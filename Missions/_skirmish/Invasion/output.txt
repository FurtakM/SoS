// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9209 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: LD_INT 91
2674: ST_TO_ADDR
// us_artillery := 97 ;
2675: LD_ADDR_EXP 17
2679: PUSH
2680: LD_INT 97
2682: ST_TO_ADDR
// ru_radar := 98 ;
2683: LD_ADDR_EXP 14
2687: PUSH
2688: LD_INT 98
2690: ST_TO_ADDR
// game_started := false ;
2691: LD_ADDR_EXP 7
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// points := 0 ;
2699: LD_ADDR_EXP 2
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// waveNumber := 0 ;
2707: LD_ADDR_EXP 5
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// timeToNextAttack := 0 ;
2715: LD_ADDR_EXP 4
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// graveyard := [ ] ;
2723: LD_ADDR_EXP 8
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// base_x := 1 ;
2730: LD_ADDR_EXP 9
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// base_y := 1 ;
2738: LD_ADDR_EXP 10
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if difficultyLevel > 2 then
2746: LD_EXP 3
2750: PUSH
2751: LD_INT 2
2753: GREATER
2754: IFFALSE 2769
// SetTech ( 5 , 7 , state_researched ) ;
2756: LD_INT 5
2758: PPUSH
2759: LD_INT 7
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: CALL_OW 322
// if not playerNation then
2769: LD_EXP 6
2773: NOT
2774: IFFALSE 2800
// begin points := 100 ;
2776: LD_ADDR_EXP 2
2780: PUSH
2781: LD_INT 100
2783: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2784: LD_ADDR_EXP 6
2788: PUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 3
2794: PPUSH
2795: CALL_OW 12
2799: ST_TO_ADDR
// end ; your_side := playerNation ;
2800: LD_ADDR_OWVAR 2
2804: PUSH
2805: LD_EXP 6
2809: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2810: LD_OWVAR 2
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2822: LD_INT 25
2824: PUSH
2825: LD_INT 20
2827: PUSH
2828: LD_INT 15
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 3
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: LD_INT 1
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_EXP 3
2892: ARRAY
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: PPUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: LD_INT 88
2915: PPUSH
2916: LD_INT 76
2918: PPUSH
2919: LD_INT 6
2921: PPUSH
2922: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2926: LD_EXP 6
2930: PPUSH
2931: LD_INT 9
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 5
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 24
2957: PUSH
2958: LD_INT 16
2960: PUSH
2961: LD_INT 12
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_EXP 3
2977: ARRAY
2978: PPUSH
2979: LD_INT 88
2981: PPUSH
2982: LD_INT 76
2984: PPUSH
2985: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2989: LD_INT 88
2991: PPUSH
2992: LD_INT 76
2994: PPUSH
2995: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2999: LD_INT 90
3001: PPUSH
3002: LD_INT 79
3004: PPUSH
3005: LD_OWVAR 2
3009: PPUSH
3010: LD_INT 50
3012: NEG
3013: PPUSH
3014: CALL_OW 330
// if debug then
3018: LD_EXP 1
3022: IFFALSE 3033
// FogOff ( your_side ) ;
3024: LD_OWVAR 2
3028: PPUSH
3029: CALL_OW 344
// end ;
3033: LD_VAR 0 1
3037: RET
// every 0 0$01 trigger game_started do var i ;
3038: LD_EXP 7
3042: IFFALSE 3276
3044: GO 3046
3046: DISABLE
3047: LD_INT 0
3049: PPUSH
// begin while ( game_started ) do
3050: LD_EXP 7
3054: IFFALSE 3276
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3056: LD_INT 22
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PUSH
3071: LD_INT 5
3073: LESS
3074: PUSH
3075: LD_EXP 4
3079: PUSH
3080: LD_INT 0
3082: LESSEQUAL
3083: AND
3084: IFFALSE 3267
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3086: LD_INT 22
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: IFFALSE 3138
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PPUSH
3117: CALL_OW 69
3121: PUSH
3122: FOR_IN
3123: IFFALSE 3136
// RemoveUnit ( i ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 64
3134: GO 3122
3136: POP
3137: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3138: LD_EXP 5
3142: PUSH
3143: LD_INT 3
3145: MOD
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: PUSH
3151: LD_EXP 5
3155: PUSH
3156: LD_INT 10
3158: MOD
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: OR
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: AND
3174: IFFALSE 3180
// InitBonus ;
3176: CALL 9306 0 0
// if waveNumber mod 10 = 0 then
3180: LD_EXP 5
3184: PUSH
3185: LD_INT 10
3187: MOD
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3198
// SaveForQuickRestart ;
3194: CALL_OW 22
// if waveNumber = 100 then
3198: LD_EXP 5
3202: PUSH
3203: LD_INT 100
3205: EQUAL
3206: IFFALSE 3219
// begin FogOff ( your_side ) ;
3208: LD_OWVAR 2
3212: PPUSH
3213: CALL_OW 344
// break ;
3217: GO 3276
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3219: LD_ADDR_EXP 4
3223: PUSH
3224: LD_INT 3150
3226: PPUSH
3227: LD_INT 5250
3229: PPUSH
3230: CALL_OW 12
3234: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3235: LD_EXP 4
3239: PPUSH
3240: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3244: LD_ADDR_EXP 5
3248: PUSH
3249: LD_EXP 5
3253: PUSH
3254: LD_INT 1
3256: PLUS
3257: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3258: LD_EXP 5
3262: PPUSH
3263: CALL 4297 0 1
// end ; Wait ( 0 0$01 ) ;
3267: LD_INT 35
3269: PPUSH
3270: CALL_OW 67
// end ;
3274: GO 3050
// end ;
3276: PPOPN 1
3278: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3279: LD_EXP 4
3283: PUSH
3284: LD_INT 0
3286: GREATER
3287: IFFALSE 3307
3289: GO 3291
3291: DISABLE
// begin enable ;
3292: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3293: LD_ADDR_EXP 4
3297: PUSH
3298: LD_EXP 4
3302: PUSH
3303: LD_INT 35
3305: MINUS
3306: ST_TO_ADDR
// end ; end_of_file
3307: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3308: LD_VAR 0 1
3312: PUSH
3313: LD_EXP 13
3317: IN
3318: NOT
3319: IFFALSE 3350
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3321: LD_ADDR_EXP 13
3325: PUSH
3326: LD_EXP 13
3330: PPUSH
3331: LD_EXP 13
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 1
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// end ;
3350: PPOPN 1
3352: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL 26798 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 255
3371: PUSH
3372: LD_OWVAR 2
3376: EQUAL
3377: PUSH
3378: LD_VAR 0 1
3382: PPUSH
3383: CALL_OW 247
3387: PUSH
3388: LD_INT 1
3390: EQUAL
3391: AND
3392: IFFALSE 3423
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3394: LD_ADDR_EXP 8
3398: PUSH
3399: LD_EXP 8
3403: PPUSH
3404: LD_EXP 8
3408: PUSH
3409: LD_INT 1
3411: PLUS
3412: PPUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 255
3432: PUSH
3433: LD_INT 7
3435: EQUAL
3436: IFFALSE 3810
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3438: LD_VAR 0 1
3442: PUSH
3443: LD_INT 34
3445: PUSH
3446: LD_INT 91
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 69
3457: IN
3458: IFFALSE 3503
// begin if Rand ( 1 , 100 ) <= 70 then
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 100
3465: PPUSH
3466: CALL_OW 12
3470: PUSH
3471: LD_INT 70
3473: LESSEQUAL
3474: IFFALSE 3503
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 250
3485: PPUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 251
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 247
3512: PUSH
3513: LD_INT 1
3515: DOUBLE
3516: EQUAL
3517: IFTRUE 3521
3519: GO 3655
3521: POP
// begin case GetClass ( un ) of class_apeman :
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 257
3531: PUSH
3532: LD_INT 12
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3550
3540: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3541: LD_INT 2
3543: PPUSH
3544: CALL 471 0 1
3548: GO 3653
3550: LD_INT 15
3552: DOUBLE
3553: EQUAL
3554: IFTRUE 3558
3556: GO 3568
3558: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3559: LD_INT 5
3561: PPUSH
3562: CALL 471 0 1
3566: GO 3653
3568: LD_INT 17
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3586
3576: POP
// AddPoints ( 30 ) ; class_soldier :
3577: LD_INT 30
3579: PPUSH
3580: CALL 471 0 1
3584: GO 3653
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3604
3594: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3595: LD_INT 50
3597: PPUSH
3598: CALL 471 0 1
3602: GO 3653
3604: LD_INT 9
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3624
3610: LD_INT 5
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3624
3616: LD_INT 8
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3634
3624: POP
// AddPoints ( 75 ) ; class_mechanic :
3625: LD_INT 75
3627: PPUSH
3628: CALL 471 0 1
3632: GO 3653
3634: LD_INT 3
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3652
3642: POP
// AddPoints ( 60 ) ; end ;
3643: LD_INT 60
3645: PPUSH
3646: CALL 471 0 1
3650: GO 3653
3652: POP
// end ; unit_vehicle :
3653: GO 3810
3655: LD_INT 2
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3809
3663: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3664: LD_VAR 0 1
3668: PPUSH
3669: CALL_OW 265
3673: PUSH
3674: LD_INT 12
3676: DOUBLE
3677: EQUAL
3678: IFTRUE 3694
3680: LD_INT 1
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3694
3686: LD_INT 11
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3694
3692: GO 3704
3694: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3695: LD_INT 100
3697: PPUSH
3698: CALL 471 0 1
3702: GO 3807
3704: LD_INT 13
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3742
3710: LD_INT 14
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3742
3716: LD_INT 2
3718: DOUBLE
3719: EQUAL
3720: IFTRUE 3742
3722: LD_INT 3
3724: DOUBLE
3725: EQUAL
3726: IFTRUE 3742
3728: LD_INT 21
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3742
3734: LD_INT 22
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3752
3742: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3743: LD_INT 250
3745: PPUSH
3746: CALL 471 0 1
3750: GO 3807
3752: LD_INT 4
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3778
3758: LD_INT 5
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3778
3764: LD_INT 23
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3778
3770: LD_INT 24
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3788
3778: POP
// AddPoints ( 500 ) ; 25 :
3779: LD_INT 500
3781: PPUSH
3782: CALL 471 0 1
3786: GO 3807
3788: LD_INT 25
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3806
3796: POP
// AddPoints ( 1250 ) ; end ;
3797: LD_INT 1250
3799: PPUSH
3800: CALL 471 0 1
3804: GO 3807
3806: POP
// end ; end ;
3807: GO 3810
3809: POP
// end ; end ;
3810: PPOPN 1
3812: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 266
3822: PUSH
3823: LD_INT 0
3825: EQUAL
3826: IFFALSE 3876
// begin base_x := GetX ( b ) ;
3828: LD_ADDR_EXP 9
3832: PUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 250
3842: ST_TO_ADDR
// base_y := GetY ( b ) ;
3843: LD_ADDR_EXP 10
3847: PUSH
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 251
3857: ST_TO_ADDR
// base := b ;
3858: LD_ADDR_EXP 11
3862: PUSH
3863: LD_VAR 0 1
3867: ST_TO_ADDR
// game_started := true ;
3868: LD_ADDR_EXP 7
3872: PUSH
3873: LD_INT 1
3875: ST_TO_ADDR
// end ; end ;
3876: PPOPN 1
3878: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 255
3888: PUSH
3889: LD_OWVAR 2
3893: EQUAL
3894: IFFALSE 3898
// exit ;
3896: GO 4045
// if GetType ( un ) = unit_vehicle then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 247
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: IFFALSE 3964
// begin KillUnit ( un ) ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 248
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 264
3945: PUSH
3946: LD_INT 49
3948: PUSH
3949: EMPTY
3950: LIST
3951: IN
3952: OR
3953: IFFALSE 3964
// ExplodeVehicle ( un ) ;
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 247
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4045
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 248
3988: PUSH
3989: LD_INT 2
3991: EQUAL
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 248
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: IN
4033: OR
4034: IFFALSE 4045
// KillUnit ( un ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 66
// end ; end ;
4045: PPOPN 1
4047: END
// every 0 0$1 do
4048: GO 4050
4050: DISABLE
// begin enable ;
4051: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4052: LD_INT 4
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 22
4060: PUSH
4061: LD_OWVAR 2
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 513
// end ;
4074: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4075: LD_EXP 7
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_OWVAR 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PUSH
4111: LD_INT 0
4113: EQUAL
4114: AND
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( die ) ;
4120: LD_STRING die
4122: PPUSH
4123: CALL_OW 104
4127: END
// every 0 0$21 trigger tick <= 15 15$00 do
4128: LD_OWVAR 1
4132: PUSH
4133: LD_INT 31500
4135: LESSEQUAL
4136: IFFALSE 4163
4138: GO 4140
4140: DISABLE
// begin enable ;
4141: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 5
4147: PPUSH
4148: CALL_OW 12
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: CALL_OW 55
// end ;
4163: END
// every 0 0$51 trigger tick > 15 15$00 do
4164: LD_OWVAR 1
4168: PUSH
4169: LD_INT 31500
4171: GREATER
4172: IFFALSE 4219
4174: GO 4176
4176: DISABLE
// begin enable ;
4177: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4178: LD_INT 22
4180: PUSH
4181: LD_INT 7
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 69
4192: PUSH
4193: LD_INT 0
4195: EQUAL
4196: IFFALSE 4219
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 5
4203: PPUSH
4204: CALL_OW 12
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 55
// end ;
4219: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4220: LD_VAR 0 1
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: CALL_OW 308
4232: IFFALSE 4243
// KillUnit ( building ) ;
4234: LD_VAR 0 1
4238: PPUSH
4239: CALL_OW 66
// end ;
4243: PPOPN 2
4245: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL 26896 0 3
// end ;
4265: PPOPN 3
4267: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL 26920 0 2
// end ;
4282: PPOPN 2
4284: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4285: LD_VAR 0 1
4289: PPUSH
4290: CALL 26904 0 1
// end ; end_of_file
4294: PPOPN 1
4296: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4297: LD_INT 0
4299: PPUSH
4300: PPUSH
4301: PPUSH
4302: PPUSH
4303: PPUSH
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4308: LD_ADDR_VAR 0 7
4312: PUSH
4313: LD_INT 1
4315: PUSH
4316: LD_INT 2
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: ST_TO_ADDR
// uc_side := 7 ;
4323: LD_ADDR_OWVAR 20
4327: PUSH
4328: LD_INT 7
4330: ST_TO_ADDR
// l := 0 ;
4331: LD_ADDR_VAR 0 9
4335: PUSH
4336: LD_INT 0
4338: ST_TO_ADDR
// case num of 1 :
4339: LD_VAR 0 1
4343: PUSH
4344: LD_INT 1
4346: DOUBLE
4347: EQUAL
4348: IFTRUE 4352
4350: GO 4371
4352: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4353: LD_ADDR_VAR 0 2
4357: PUSH
4358: LD_INT 12
4360: PPUSH
4361: LD_INT 1
4363: PPUSH
4364: CALL 6700 0 2
4368: ST_TO_ADDR
4369: GO 6509
4371: LD_INT 2
4373: DOUBLE
4374: EQUAL
4375: IFTRUE 4379
4377: GO 4398
4379: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4380: LD_ADDR_VAR 0 2
4384: PUSH
4385: LD_INT 12
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: CALL 6771 0 2
4395: ST_TO_ADDR
4396: GO 6509
4398: LD_INT 3
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4425
4406: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4407: LD_ADDR_VAR 0 2
4411: PUSH
4412: LD_INT 12
4414: PPUSH
4415: LD_INT 1
4417: PPUSH
4418: CALL 6842 0 2
4422: ST_TO_ADDR
4423: GO 6509
4425: LD_INT 4
4427: DOUBLE
4428: EQUAL
4429: IFTRUE 4433
4431: GO 4452
4433: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: LD_INT 7
4441: PPUSH
4442: LD_INT 1
4444: PPUSH
4445: CALL 6921 0 2
4449: ST_TO_ADDR
4450: GO 6509
4452: LD_INT 5
4454: DOUBLE
4455: EQUAL
4456: IFTRUE 4460
4458: GO 4479
4460: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: LD_INT 7
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: CALL 7317 0 2
4476: ST_TO_ADDR
4477: GO 6509
4479: LD_INT 6
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4506
4487: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4488: LD_ADDR_VAR 0 2
4492: PUSH
4493: LD_INT 6
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: CALL 7737 0 2
4503: ST_TO_ADDR
4504: GO 6509
4506: LD_INT 7
4508: DOUBLE
4509: EQUAL
4510: IFTRUE 4514
4512: GO 4533
4514: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: LD_INT 15
4522: PPUSH
4523: LD_INT 1
4525: PPUSH
4526: CALL 8157 0 2
4530: ST_TO_ADDR
4531: GO 6509
4533: LD_INT 8
4535: DOUBLE
4536: EQUAL
4537: IFTRUE 4541
4539: GO 4560
4541: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: LD_INT 7
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: CALL 8258 0 2
4557: ST_TO_ADDR
4558: GO 6509
4560: LD_INT 9
4562: DOUBLE
4563: EQUAL
4564: IFTRUE 4568
4566: GO 4599
4568: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4569: LD_ADDR_VAR 0 2
4573: PUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL 8258 0 2
4584: PUSH
4585: LD_INT 7
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: CALL 7317 0 2
4595: ADD
4596: ST_TO_ADDR
4597: GO 6509
4599: LD_INT 10
4601: DOUBLE
4602: EQUAL
4603: IFTRUE 4607
4605: GO 4638
4607: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4608: LD_ADDR_VAR 0 2
4612: PUSH
4613: LD_INT 9
4615: PPUSH
4616: LD_INT 1
4618: PPUSH
4619: CALL 8157 0 2
4623: PUSH
4624: LD_INT 14
4626: PPUSH
4627: LD_INT 1
4629: PPUSH
4630: CALL 6842 0 2
4634: ADD
4635: ST_TO_ADDR
4636: GO 6509
4638: LD_INT 11
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4694
4644: LD_INT 21
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4694
4650: LD_INT 31
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4694
4656: LD_INT 41
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4694
4662: LD_INT 51
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4694
4668: LD_INT 61
4670: DOUBLE
4671: EQUAL
4672: IFTRUE 4694
4674: LD_INT 71
4676: DOUBLE
4677: EQUAL
4678: IFTRUE 4694
4680: LD_INT 81
4682: DOUBLE
4683: EQUAL
4684: IFTRUE 4694
4686: LD_INT 91
4688: DOUBLE
4689: EQUAL
4690: IFTRUE 4694
4692: GO 4803
4694: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4695: LD_ADDR_VAR 0 2
4699: PUSH
4700: LD_INT 20
4702: PUSH
4703: LD_INT 30
4705: PUSH
4706: LD_INT 40
4708: PUSH
4709: LD_INT 45
4711: PUSH
4712: LD_INT 50
4714: PUSH
4715: LD_INT 60
4717: PUSH
4718: LD_INT 70
4720: PUSH
4721: LD_INT 80
4723: PUSH
4724: LD_INT 100
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_VAR 0 1
4742: PUSH
4743: LD_INT 10
4745: DIV
4746: ARRAY
4747: PPUSH
4748: LD_INT 2
4750: PUSH
4751: LD_INT 3
4753: PUSH
4754: LD_INT 4
4756: PUSH
4757: LD_INT 5
4759: PUSH
4760: LD_INT 6
4762: PUSH
4763: LD_INT 7
4765: PUSH
4766: LD_INT 8
4768: PUSH
4769: LD_INT 9
4771: PUSH
4772: LD_INT 10
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: PUSH
4786: LD_VAR 0 1
4790: PUSH
4791: LD_INT 10
4793: DIV
4794: ARRAY
4795: PPUSH
4796: CALL 6700 0 2
4800: ST_TO_ADDR
4801: GO 6509
4803: LD_INT 12
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4859
4809: LD_INT 22
4811: DOUBLE
4812: EQUAL
4813: IFTRUE 4859
4815: LD_INT 32
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4859
4821: LD_INT 42
4823: DOUBLE
4824: EQUAL
4825: IFTRUE 4859
4827: LD_INT 52
4829: DOUBLE
4830: EQUAL
4831: IFTRUE 4859
4833: LD_INT 62
4835: DOUBLE
4836: EQUAL
4837: IFTRUE 4859
4839: LD_INT 72
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4859
4845: LD_INT 82
4847: DOUBLE
4848: EQUAL
4849: IFTRUE 4859
4851: LD_INT 92
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4968
4859: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: LD_INT 16
4867: PUSH
4868: LD_INT 21
4870: PUSH
4871: LD_INT 28
4873: PUSH
4874: LD_INT 33
4876: PUSH
4877: LD_INT 39
4879: PUSH
4880: LD_INT 46
4882: PUSH
4883: LD_INT 56
4885: PUSH
4886: LD_INT 66
4888: PUSH
4889: LD_INT 80
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_VAR 0 1
4907: PUSH
4908: LD_INT 10
4910: DIV
4911: ARRAY
4912: PPUSH
4913: LD_INT 2
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 4
4921: PUSH
4922: LD_INT 5
4924: PUSH
4925: LD_INT 6
4927: PUSH
4928: LD_INT 7
4930: PUSH
4931: LD_INT 8
4933: PUSH
4934: LD_INT 9
4936: PUSH
4937: LD_INT 10
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: PUSH
4951: LD_VAR 0 1
4955: PUSH
4956: LD_INT 10
4958: DIV
4959: ARRAY
4960: PPUSH
4961: CALL 6771 0 2
4965: ST_TO_ADDR
4966: GO 6509
4968: LD_INT 13
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 5024
4974: LD_INT 23
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 5024
4980: LD_INT 33
4982: DOUBLE
4983: EQUAL
4984: IFTRUE 5024
4986: LD_INT 43
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 5024
4992: LD_INT 53
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5024
4998: LD_INT 63
5000: DOUBLE
5001: EQUAL
5002: IFTRUE 5024
5004: LD_INT 73
5006: DOUBLE
5007: EQUAL
5008: IFTRUE 5024
5010: LD_INT 83
5012: DOUBLE
5013: EQUAL
5014: IFTRUE 5024
5016: LD_INT 93
5018: DOUBLE
5019: EQUAL
5020: IFTRUE 5024
5022: GO 5133
5024: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_INT 14
5032: PUSH
5033: LD_INT 18
5035: PUSH
5036: LD_INT 22
5038: PUSH
5039: LD_INT 27
5041: PUSH
5042: LD_INT 33
5044: PUSH
5045: LD_INT 39
5047: PUSH
5048: LD_INT 44
5050: PUSH
5051: LD_INT 57
5053: PUSH
5054: LD_INT 65
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: PUSH
5068: LD_VAR 0 1
5072: PUSH
5073: LD_INT 10
5075: DIV
5076: ARRAY
5077: PPUSH
5078: LD_INT 2
5080: PUSH
5081: LD_INT 3
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: LD_INT 5
5089: PUSH
5090: LD_INT 6
5092: PUSH
5093: LD_INT 7
5095: PUSH
5096: LD_INT 8
5098: PUSH
5099: LD_INT 9
5101: PUSH
5102: LD_INT 10
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: PUSH
5116: LD_VAR 0 1
5120: PUSH
5121: LD_INT 10
5123: DIV
5124: ARRAY
5125: PPUSH
5126: CALL 6842 0 2
5130: ST_TO_ADDR
5131: GO 6509
5133: LD_INT 14
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5189
5139: LD_INT 24
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5189
5145: LD_INT 34
5147: DOUBLE
5148: EQUAL
5149: IFTRUE 5189
5151: LD_INT 44
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5189
5157: LD_INT 54
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5189
5163: LD_INT 64
5165: DOUBLE
5166: EQUAL
5167: IFTRUE 5189
5169: LD_INT 74
5171: DOUBLE
5172: EQUAL
5173: IFTRUE 5189
5175: LD_INT 84
5177: DOUBLE
5178: EQUAL
5179: IFTRUE 5189
5181: LD_INT 94
5183: DOUBLE
5184: EQUAL
5185: IFTRUE 5189
5187: GO 5298
5189: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5190: LD_ADDR_VAR 0 2
5194: PUSH
5195: LD_INT 9
5197: PUSH
5198: LD_INT 15
5200: PUSH
5201: LD_INT 22
5203: PUSH
5204: LD_INT 30
5206: PUSH
5207: LD_INT 39
5209: PUSH
5210: LD_INT 45
5212: PUSH
5213: LD_INT 56
5215: PUSH
5216: LD_INT 60
5218: PUSH
5219: LD_INT 65
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: LD_VAR 0 1
5237: PUSH
5238: LD_INT 10
5240: DIV
5241: ARRAY
5242: PPUSH
5243: LD_INT 2
5245: PUSH
5246: LD_INT 3
5248: PUSH
5249: LD_INT 4
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: LD_INT 8
5263: PUSH
5264: LD_INT 9
5266: PUSH
5267: LD_INT 10
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: LD_VAR 0 1
5285: PUSH
5286: LD_INT 10
5288: DIV
5289: ARRAY
5290: PPUSH
5291: CALL 6921 0 2
5295: ST_TO_ADDR
5296: GO 6509
5298: LD_INT 15
5300: DOUBLE
5301: EQUAL
5302: IFTRUE 5354
5304: LD_INT 25
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5354
5310: LD_INT 35
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5354
5316: LD_INT 45
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5354
5322: LD_INT 55
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5354
5328: LD_INT 65
5330: DOUBLE
5331: EQUAL
5332: IFTRUE 5354
5334: LD_INT 75
5336: DOUBLE
5337: EQUAL
5338: IFTRUE 5354
5340: LD_INT 85
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5354
5346: LD_INT 95
5348: DOUBLE
5349: EQUAL
5350: IFTRUE 5354
5352: GO 5463
5354: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_INT 6
5362: PUSH
5363: LD_INT 11
5365: PUSH
5366: LD_INT 15
5368: PUSH
5369: LD_INT 20
5371: PUSH
5372: LD_INT 25
5374: PUSH
5375: LD_INT 30
5377: PUSH
5378: LD_INT 35
5380: PUSH
5381: LD_INT 40
5383: PUSH
5384: LD_INT 45
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: LD_VAR 0 1
5402: PUSH
5403: LD_INT 10
5405: DIV
5406: ARRAY
5407: PPUSH
5408: LD_INT 2
5410: PUSH
5411: LD_INT 3
5413: PUSH
5414: LD_INT 4
5416: PUSH
5417: LD_INT 5
5419: PUSH
5420: LD_INT 6
5422: PUSH
5423: LD_INT 7
5425: PUSH
5426: LD_INT 8
5428: PUSH
5429: LD_INT 9
5431: PUSH
5432: LD_INT 10
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: PUSH
5446: LD_VAR 0 1
5450: PUSH
5451: LD_INT 10
5453: DIV
5454: ARRAY
5455: PPUSH
5456: CALL 7317 0 2
5460: ST_TO_ADDR
5461: GO 6509
5463: LD_INT 16
5465: DOUBLE
5466: EQUAL
5467: IFTRUE 5519
5469: LD_INT 26
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5519
5475: LD_INT 36
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5519
5481: LD_INT 46
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5519
5487: LD_INT 56
5489: DOUBLE
5490: EQUAL
5491: IFTRUE 5519
5493: LD_INT 66
5495: DOUBLE
5496: EQUAL
5497: IFTRUE 5519
5499: LD_INT 76
5501: DOUBLE
5502: EQUAL
5503: IFTRUE 5519
5505: LD_INT 86
5507: DOUBLE
5508: EQUAL
5509: IFTRUE 5519
5511: LD_INT 96
5513: DOUBLE
5514: EQUAL
5515: IFTRUE 5519
5517: GO 5628
5519: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5520: LD_ADDR_VAR 0 2
5524: PUSH
5525: LD_INT 9
5527: PUSH
5528: LD_INT 12
5530: PUSH
5531: LD_INT 15
5533: PUSH
5534: LD_INT 18
5536: PUSH
5537: LD_INT 21
5539: PUSH
5540: LD_INT 24
5542: PUSH
5543: LD_INT 27
5545: PUSH
5546: LD_INT 30
5548: PUSH
5549: LD_INT 33
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: PUSH
5563: LD_VAR 0 1
5567: PUSH
5568: LD_INT 10
5570: DIV
5571: ARRAY
5572: PPUSH
5573: LD_INT 2
5575: PUSH
5576: LD_INT 3
5578: PUSH
5579: LD_INT 4
5581: PUSH
5582: LD_INT 5
5584: PUSH
5585: LD_INT 6
5587: PUSH
5588: LD_INT 7
5590: PUSH
5591: LD_INT 8
5593: PUSH
5594: LD_INT 9
5596: PUSH
5597: LD_INT 10
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: PUSH
5611: LD_VAR 0 1
5615: PUSH
5616: LD_INT 10
5618: DIV
5619: ARRAY
5620: PPUSH
5621: CALL 7737 0 2
5625: ST_TO_ADDR
5626: GO 6509
5628: LD_INT 17
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5684
5634: LD_INT 27
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5684
5640: LD_INT 37
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5684
5646: LD_INT 47
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5684
5652: LD_INT 57
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5684
5658: LD_INT 67
5660: DOUBLE
5661: EQUAL
5662: IFTRUE 5684
5664: LD_INT 77
5666: DOUBLE
5667: EQUAL
5668: IFTRUE 5684
5670: LD_INT 87
5672: DOUBLE
5673: EQUAL
5674: IFTRUE 5684
5676: LD_INT 97
5678: DOUBLE
5679: EQUAL
5680: IFTRUE 5684
5682: GO 5793
5684: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5685: LD_ADDR_VAR 0 2
5689: PUSH
5690: LD_INT 14
5692: PUSH
5693: LD_INT 16
5695: PUSH
5696: LD_INT 18
5698: PUSH
5699: LD_INT 22
5701: PUSH
5702: LD_INT 24
5704: PUSH
5705: LD_INT 26
5707: PUSH
5708: LD_INT 28
5710: PUSH
5711: LD_INT 32
5713: PUSH
5714: LD_INT 35
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_VAR 0 1
5732: PUSH
5733: LD_INT 10
5735: DIV
5736: ARRAY
5737: PPUSH
5738: LD_INT 2
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 4
5746: PUSH
5747: LD_INT 5
5749: PUSH
5750: LD_INT 6
5752: PUSH
5753: LD_INT 7
5755: PUSH
5756: LD_INT 8
5758: PUSH
5759: LD_INT 9
5761: PUSH
5762: LD_INT 10
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: PUSH
5776: LD_VAR 0 1
5780: PUSH
5781: LD_INT 10
5783: DIV
5784: ARRAY
5785: PPUSH
5786: CALL 8157 0 2
5790: ST_TO_ADDR
5791: GO 6509
5793: LD_INT 18
5795: DOUBLE
5796: EQUAL
5797: IFTRUE 5849
5799: LD_INT 28
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5849
5805: LD_INT 38
5807: DOUBLE
5808: EQUAL
5809: IFTRUE 5849
5811: LD_INT 48
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5849
5817: LD_INT 58
5819: DOUBLE
5820: EQUAL
5821: IFTRUE 5849
5823: LD_INT 68
5825: DOUBLE
5826: EQUAL
5827: IFTRUE 5849
5829: LD_INT 78
5831: DOUBLE
5832: EQUAL
5833: IFTRUE 5849
5835: LD_INT 88
5837: DOUBLE
5838: EQUAL
5839: IFTRUE 5849
5841: LD_INT 98
5843: DOUBLE
5844: EQUAL
5845: IFTRUE 5849
5847: GO 5958
5849: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5850: LD_ADDR_VAR 0 2
5854: PUSH
5855: LD_INT 9
5857: PUSH
5858: LD_INT 12
5860: PUSH
5861: LD_INT 15
5863: PUSH
5864: LD_INT 18
5866: PUSH
5867: LD_INT 21
5869: PUSH
5870: LD_INT 24
5872: PUSH
5873: LD_INT 27
5875: PUSH
5876: LD_INT 30
5878: PUSH
5879: LD_INT 33
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PUSH
5893: LD_VAR 0 1
5897: PUSH
5898: LD_INT 10
5900: DIV
5901: ARRAY
5902: PPUSH
5903: LD_INT 2
5905: PUSH
5906: LD_INT 3
5908: PUSH
5909: LD_INT 4
5911: PUSH
5912: LD_INT 5
5914: PUSH
5915: LD_INT 6
5917: PUSH
5918: LD_INT 7
5920: PUSH
5921: LD_INT 8
5923: PUSH
5924: LD_INT 9
5926: PUSH
5927: LD_INT 10
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: PUSH
5941: LD_VAR 0 1
5945: PUSH
5946: LD_INT 10
5948: DIV
5949: ARRAY
5950: PPUSH
5951: CALL 8258 0 2
5955: ST_TO_ADDR
5956: GO 6509
5958: LD_INT 19
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 6014
5964: LD_INT 29
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 6014
5970: LD_INT 39
5972: DOUBLE
5973: EQUAL
5974: IFTRUE 6014
5976: LD_INT 49
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 6014
5982: LD_INT 59
5984: DOUBLE
5985: EQUAL
5986: IFTRUE 6014
5988: LD_INT 69
5990: DOUBLE
5991: EQUAL
5992: IFTRUE 6014
5994: LD_INT 79
5996: DOUBLE
5997: EQUAL
5998: IFTRUE 6014
6000: LD_INT 89
6002: DOUBLE
6003: EQUAL
6004: IFTRUE 6014
6006: LD_INT 99
6008: DOUBLE
6009: EQUAL
6010: IFTRUE 6014
6012: GO 6225
6014: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
6015: LD_ADDR_VAR 0 2
6019: PUSH
6020: LD_INT 4
6022: PUSH
6023: LD_INT 7
6025: PUSH
6026: LD_INT 10
6028: PUSH
6029: LD_INT 13
6031: PUSH
6032: LD_INT 14
6034: PUSH
6035: LD_INT 17
6037: PUSH
6038: LD_INT 19
6040: PUSH
6041: LD_INT 21
6043: PUSH
6044: LD_INT 23
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: PUSH
6058: LD_VAR 0 1
6062: PUSH
6063: LD_INT 10
6065: DIV
6066: ARRAY
6067: PPUSH
6068: LD_INT 2
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 5
6079: PUSH
6080: LD_INT 6
6082: PUSH
6083: LD_INT 7
6085: PUSH
6086: LD_INT 8
6088: PUSH
6089: LD_INT 9
6091: PUSH
6092: LD_INT 10
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: PUSH
6106: LD_VAR 0 1
6110: PUSH
6111: LD_INT 10
6113: DIV
6114: ARRAY
6115: PPUSH
6116: CALL 8258 0 2
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: LD_INT 7
6126: PUSH
6127: LD_INT 10
6129: PUSH
6130: LD_INT 13
6132: PUSH
6133: LD_INT 14
6135: PUSH
6136: LD_INT 17
6138: PUSH
6139: LD_INT 19
6141: PUSH
6142: LD_INT 22
6144: PUSH
6145: LD_INT 25
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: PUSH
6159: LD_VAR 0 1
6163: PUSH
6164: LD_INT 10
6166: DIV
6167: ARRAY
6168: PPUSH
6169: LD_INT 2
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: LD_INT 4
6177: PUSH
6178: LD_INT 5
6180: PUSH
6181: LD_INT 6
6183: PUSH
6184: LD_INT 7
6186: PUSH
6187: LD_INT 8
6189: PUSH
6190: LD_INT 9
6192: PUSH
6193: LD_INT 10
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: PUSH
6207: LD_VAR 0 1
6211: PUSH
6212: LD_INT 10
6214: DIV
6215: ARRAY
6216: PPUSH
6217: CALL 7317 0 2
6221: ADD
6222: ST_TO_ADDR
6223: GO 6509
6225: LD_INT 20
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6281
6231: LD_INT 30
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6281
6237: LD_INT 40
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6281
6243: LD_INT 50
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6281
6249: LD_INT 60
6251: DOUBLE
6252: EQUAL
6253: IFTRUE 6281
6255: LD_INT 70
6257: DOUBLE
6258: EQUAL
6259: IFTRUE 6281
6261: LD_INT 80
6263: DOUBLE
6264: EQUAL
6265: IFTRUE 6281
6267: LD_INT 90
6269: DOUBLE
6270: EQUAL
6271: IFTRUE 6281
6273: LD_INT 100
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6508
6281: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6282: LD_ADDR_VAR 0 2
6286: PUSH
6287: LD_INT 4
6289: PUSH
6290: LD_INT 7
6292: PUSH
6293: LD_INT 10
6295: PUSH
6296: LD_INT 13
6298: PUSH
6299: LD_INT 14
6301: PUSH
6302: LD_INT 17
6304: PUSH
6305: LD_INT 19
6307: PUSH
6308: LD_INT 21
6310: PUSH
6311: LD_INT 23
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: PUSH
6325: LD_VAR 0 1
6329: PUSH
6330: LD_INT 10
6332: DIVREAL
6333: PUSH
6334: LD_INT 1
6336: MINUS
6337: ARRAY
6338: PPUSH
6339: LD_INT 2
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: LD_INT 4
6347: PUSH
6348: LD_INT 5
6350: PUSH
6351: LD_INT 6
6353: PUSH
6354: LD_INT 7
6356: PUSH
6357: LD_INT 8
6359: PUSH
6360: LD_INT 9
6362: PUSH
6363: LD_INT 10
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: PUSH
6377: LD_VAR 0 1
6381: PUSH
6382: LD_INT 10
6384: DIVREAL
6385: PUSH
6386: LD_INT 1
6388: MINUS
6389: ARRAY
6390: PPUSH
6391: CALL 8157 0 2
6395: PUSH
6396: LD_INT 4
6398: PUSH
6399: LD_INT 7
6401: PUSH
6402: LD_INT 10
6404: PUSH
6405: LD_INT 13
6407: PUSH
6408: LD_INT 14
6410: PUSH
6411: LD_INT 17
6413: PUSH
6414: LD_INT 19
6416: PUSH
6417: LD_INT 22
6419: PUSH
6420: LD_INT 25
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: PUSH
6434: LD_VAR 0 1
6438: PUSH
6439: LD_INT 10
6441: DIVREAL
6442: PUSH
6443: LD_INT 1
6445: MINUS
6446: ARRAY
6447: PPUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: LD_INT 5
6459: PUSH
6460: LD_INT 6
6462: PUSH
6463: LD_INT 7
6465: PUSH
6466: LD_INT 8
6468: PUSH
6469: LD_INT 9
6471: PUSH
6472: LD_INT 10
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: PUSH
6486: LD_VAR 0 1
6490: PUSH
6491: LD_INT 10
6493: DIVREAL
6494: PUSH
6495: LD_INT 1
6497: MINUS
6498: ARRAY
6499: PPUSH
6500: CALL 7737 0 2
6504: ADD
6505: ST_TO_ADDR
6506: GO 6509
6508: POP
// for i in result do
6509: LD_ADDR_VAR 0 3
6513: PUSH
6514: LD_VAR 0 2
6518: PUSH
6519: FOR_IN
6520: IFFALSE 6693
// begin a := rand ( 1 , 2 ) ;
6522: LD_ADDR_VAR 0 8
6526: PUSH
6527: LD_INT 1
6529: PPUSH
6530: LD_INT 2
6532: PPUSH
6533: CALL_OW 12
6537: ST_TO_ADDR
// if a = 1 then
6538: LD_VAR 0 8
6542: PUSH
6543: LD_INT 1
6545: EQUAL
6546: IFFALSE 6562
// SetDir ( i , 3 ) else
6548: LD_VAR 0 3
6552: PPUSH
6553: LD_INT 3
6555: PPUSH
6556: CALL_OW 233
6560: GO 6574
// SetDir ( i , 5 ) ;
6562: LD_VAR 0 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6574: LD_VAR 0 3
6578: PPUSH
6579: LD_VAR 0 7
6583: PUSH
6584: LD_VAR 0 8
6588: ARRAY
6589: PPUSH
6590: LD_INT 0
6592: PPUSH
6593: CALL_OW 49
// if GetControl ( i ) = control_manual then
6597: LD_VAR 0 3
6601: PPUSH
6602: CALL_OW 263
6606: PUSH
6607: LD_INT 1
6609: EQUAL
6610: IFFALSE 6656
// begin uc_nation := GetNation ( i ) ;
6612: LD_ADDR_OWVAR 21
6616: PUSH
6617: LD_VAR 0 3
6621: PPUSH
6622: CALL_OW 248
6626: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6627: LD_INT 0
6629: PPUSH
6630: LD_INT 3
6632: PPUSH
6633: LD_VAR 0 5
6637: PPUSH
6638: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6642: CALL_OW 44
6646: PPUSH
6647: LD_VAR 0 3
6651: PPUSH
6652: CALL_OW 52
// end ; l := l + 1 ;
6656: LD_ADDR_VAR 0 9
6660: PUSH
6661: LD_VAR 0 9
6665: PUSH
6666: LD_INT 1
6668: PLUS
6669: ST_TO_ADDR
// if l mod 10 = 0 then
6670: LD_VAR 0 9
6674: PUSH
6675: LD_INT 10
6677: MOD
6678: PUSH
6679: LD_INT 0
6681: EQUAL
6682: IFFALSE 6691
// Wait ( 0 0$02 ) ;
6684: LD_INT 70
6686: PPUSH
6687: CALL_OW 67
// end ;
6691: GO 6519
6693: POP
6694: POP
// end ;
6695: LD_VAR 0 2
6699: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6700: LD_INT 0
6702: PPUSH
6703: PPUSH
6704: PPUSH
// uc_nation := nation_nature ;
6705: LD_ADDR_OWVAR 21
6709: PUSH
6710: LD_INT 0
6712: ST_TO_ADDR
// for i = 1 to n do
6713: LD_ADDR_VAR 0 4
6717: PUSH
6718: DOUBLE
6719: LD_INT 1
6721: DEC
6722: ST_TO_ADDR
6723: LD_VAR 0 1
6727: PUSH
6728: FOR_TO
6729: IFFALSE 6764
// begin PrepareHuman ( false , class_apeman , skill ) ;
6731: LD_INT 0
6733: PPUSH
6734: LD_INT 12
6736: PPUSH
6737: LD_VAR 0 2
6741: PPUSH
6742: CALL_OW 380
// result := result ^ CreateHuman ;
6746: LD_ADDR_VAR 0 3
6750: PUSH
6751: LD_VAR 0 3
6755: PUSH
6756: CALL_OW 44
6760: ADD
6761: ST_TO_ADDR
// end ;
6762: GO 6728
6764: POP
6765: POP
// end ;
6766: LD_VAR 0 3
6770: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// uc_nation := nation_nature ;
6776: LD_ADDR_OWVAR 21
6780: PUSH
6781: LD_INT 0
6783: ST_TO_ADDR
// for i = 1 to n do
6784: LD_ADDR_VAR 0 4
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_VAR 0 1
6798: PUSH
6799: FOR_TO
6800: IFFALSE 6835
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6802: LD_INT 0
6804: PPUSH
6805: LD_INT 15
6807: PPUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 380
// result := result ^ CreateHuman ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_VAR 0 3
6826: PUSH
6827: CALL_OW 44
6831: ADD
6832: ST_TO_ADDR
// end ;
6833: GO 6799
6835: POP
6836: POP
// end ;
6837: LD_VAR 0 3
6841: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6842: LD_INT 0
6844: PPUSH
6845: PPUSH
6846: PPUSH
// for i = 1 to n do
6847: LD_ADDR_VAR 0 4
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_VAR 0 1
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6914
// begin uc_nation := rand ( 1 , 3 ) ;
6865: LD_ADDR_OWVAR 21
6869: PUSH
6870: LD_INT 1
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: CALL_OW 12
6880: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6881: LD_INT 0
6883: PPUSH
6884: LD_INT 1
6886: PPUSH
6887: LD_VAR 0 2
6891: PPUSH
6892: CALL_OW 380
// result := result ^ CreateHuman ;
6896: LD_ADDR_VAR 0 3
6900: PUSH
6901: LD_VAR 0 3
6905: PUSH
6906: CALL_OW 44
6910: ADD
6911: ST_TO_ADDR
// end ;
6912: GO 6862
6914: POP
6915: POP
// end ;
6916: LD_VAR 0 3
6920: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6921: LD_INT 0
6923: PPUSH
6924: PPUSH
6925: PPUSH
6926: PPUSH
6927: PPUSH
6928: PPUSH
6929: PPUSH
// for i = 1 to n do
6930: LD_ADDR_VAR 0 4
6934: PUSH
6935: DOUBLE
6936: LD_INT 1
6938: DEC
6939: ST_TO_ADDR
6940: LD_VAR 0 1
6944: PUSH
6945: FOR_TO
6946: IFFALSE 7310
// begin uc_nation := rand ( 1 , 3 ) ;
6948: LD_ADDR_OWVAR 21
6952: PUSH
6953: LD_INT 1
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: CALL_OW 12
6963: ST_TO_ADDR
// case uc_nation of 1 :
6964: LD_OWVAR 21
6968: PUSH
6969: LD_INT 1
6971: DOUBLE
6972: EQUAL
6973: IFTRUE 6977
6975: GO 7040
6977: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6978: LD_ADDR_VAR 0 6
6982: PUSH
6983: LD_INT 1
6985: PUSH
6986: LD_INT 2
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6993: LD_ADDR_VAR 0 7
6997: PUSH
6998: LD_INT 2
7000: PUSH
7001: LD_INT 3
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7008: LD_ADDR_VAR 0 8
7012: PUSH
7013: LD_INT 1
7015: PUSH
7016: LD_INT 3
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7023: LD_ADDR_VAR 0 9
7027: PUSH
7028: LD_INT 1
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: ST_TO_ADDR
// end ; 2 :
7038: GO 7175
7040: LD_INT 2
7042: DOUBLE
7043: EQUAL
7044: IFTRUE 7048
7046: GO 7111
7048: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7049: LD_ADDR_VAR 0 6
7053: PUSH
7054: LD_INT 12
7056: PUSH
7057: LD_INT 11
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7064: LD_ADDR_VAR 0 7
7068: PUSH
7069: LD_INT 23
7071: PUSH
7072: LD_INT 24
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7079: LD_ADDR_VAR 0 8
7083: PUSH
7084: LD_INT 1
7086: PUSH
7087: LD_INT 5
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7094: LD_ADDR_VAR 0 9
7098: PUSH
7099: LD_INT 1
7101: PUSH
7102: LD_INT 2
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: ST_TO_ADDR
// end ; 3 :
7109: GO 7175
7111: LD_INT 3
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7174
7119: POP
// begin chassis := [ ru_medium_wheeled ] ;
7120: LD_ADDR_VAR 0 6
7124: PUSH
7125: LD_INT 21
7127: PUSH
7128: EMPTY
7129: LIST
7130: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7131: LD_ADDR_VAR 0 7
7135: PUSH
7136: LD_INT 42
7138: PUSH
7139: LD_INT 44
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7146: LD_ADDR_VAR 0 8
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: LD_INT 3
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7161: LD_ADDR_VAR 0 9
7165: PUSH
7166: LD_INT 1
7168: PUSH
7169: EMPTY
7170: LIST
7171: ST_TO_ADDR
// end ; end ;
7172: GO 7175
7174: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7175: LD_ADDR_OWVAR 37
7179: PUSH
7180: LD_VAR 0 6
7184: PUSH
7185: LD_INT 1
7187: PPUSH
7188: LD_VAR 0 6
7192: PPUSH
7193: CALL_OW 12
7197: ARRAY
7198: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7199: LD_ADDR_OWVAR 39
7203: PUSH
7204: LD_VAR 0 9
7208: PUSH
7209: LD_INT 1
7211: PPUSH
7212: LD_VAR 0 9
7216: PPUSH
7217: CALL_OW 12
7221: ARRAY
7222: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7223: LD_ADDR_OWVAR 38
7227: PUSH
7228: LD_VAR 0 8
7232: PUSH
7233: LD_INT 1
7235: PPUSH
7236: LD_VAR 0 8
7240: PPUSH
7241: CALL_OW 12
7245: ARRAY
7246: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7247: LD_ADDR_OWVAR 40
7251: PUSH
7252: LD_VAR 0 7
7256: PUSH
7257: LD_INT 1
7259: PPUSH
7260: LD_VAR 0 7
7264: PPUSH
7265: CALL_OW 12
7269: ARRAY
7270: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7271: LD_ADDR_OWVAR 41
7275: PUSH
7276: LD_INT 100
7278: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_VAR 0 3
7288: PPUSH
7289: LD_VAR 0 3
7293: PUSH
7294: LD_INT 1
7296: PLUS
7297: PPUSH
7298: CALL_OW 45
7302: PPUSH
7303: CALL_OW 2
7307: ST_TO_ADDR
// end ;
7308: GO 6945
7310: POP
7311: POP
// end ;
7312: LD_VAR 0 3
7316: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7317: LD_INT 0
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
7325: PPUSH
// for i = 1 to n do
7326: LD_ADDR_VAR 0 4
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_VAR 0 1
7340: PUSH
7341: FOR_TO
7342: IFFALSE 7730
// begin uc_nation := rand ( 1 , 3 ) ;
7344: LD_ADDR_OWVAR 21
7348: PUSH
7349: LD_INT 1
7351: PPUSH
7352: LD_INT 3
7354: PPUSH
7355: CALL_OW 12
7359: ST_TO_ADDR
// case uc_nation of 1 :
7360: LD_OWVAR 21
7364: PUSH
7365: LD_INT 1
7367: DOUBLE
7368: EQUAL
7369: IFTRUE 7373
7371: GO 7444
7373: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7374: LD_ADDR_VAR 0 6
7378: PUSH
7379: LD_INT 2
7381: PUSH
7382: LD_INT 3
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7389: LD_ADDR_VAR 0 7
7393: PUSH
7394: LD_INT 4
7396: PUSH
7397: LD_INT 5
7399: PUSH
7400: LD_INT 9
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7408: LD_ADDR_VAR 0 8
7412: PUSH
7413: LD_INT 1
7415: PUSH
7416: LD_INT 3
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7423: LD_ADDR_VAR 0 9
7427: PUSH
7428: LD_INT 1
7430: PUSH
7431: LD_INT 2
7433: PUSH
7434: LD_INT 3
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: ST_TO_ADDR
// end ; 2 :
7442: GO 7595
7444: LD_INT 2
7446: DOUBLE
7447: EQUAL
7448: IFTRUE 7452
7450: GO 7523
7452: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7453: LD_ADDR_VAR 0 6
7457: PUSH
7458: LD_INT 13
7460: PUSH
7461: LD_INT 14
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7468: LD_ADDR_VAR 0 7
7472: PUSH
7473: LD_INT 27
7475: PUSH
7476: LD_INT 26
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7487: LD_ADDR_VAR 0 8
7491: PUSH
7492: LD_INT 1
7494: PUSH
7495: LD_INT 5
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7502: LD_ADDR_VAR 0 9
7506: PUSH
7507: LD_INT 1
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: ST_TO_ADDR
// end ; 3 :
7521: GO 7595
7523: LD_INT 3
7525: DOUBLE
7526: EQUAL
7527: IFTRUE 7531
7529: GO 7594
7531: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7532: LD_ADDR_VAR 0 6
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 21
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7547: LD_ADDR_VAR 0 7
7551: PUSH
7552: LD_INT 44
7554: PUSH
7555: LD_INT 43
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7562: LD_ADDR_VAR 0 8
7566: PUSH
7567: LD_INT 1
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7577: LD_ADDR_VAR 0 9
7581: PUSH
7582: LD_INT 1
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: ST_TO_ADDR
// end ; end ;
7592: GO 7595
7594: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7595: LD_ADDR_OWVAR 37
7599: PUSH
7600: LD_VAR 0 6
7604: PUSH
7605: LD_INT 1
7607: PPUSH
7608: LD_VAR 0 6
7612: PPUSH
7613: CALL_OW 12
7617: ARRAY
7618: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7619: LD_ADDR_OWVAR 39
7623: PUSH
7624: LD_VAR 0 9
7628: PUSH
7629: LD_INT 1
7631: PPUSH
7632: LD_VAR 0 9
7636: PPUSH
7637: CALL_OW 12
7641: ARRAY
7642: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7643: LD_ADDR_OWVAR 38
7647: PUSH
7648: LD_VAR 0 8
7652: PUSH
7653: LD_INT 1
7655: PPUSH
7656: LD_VAR 0 8
7660: PPUSH
7661: CALL_OW 12
7665: ARRAY
7666: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7667: LD_ADDR_OWVAR 40
7671: PUSH
7672: LD_VAR 0 7
7676: PUSH
7677: LD_INT 1
7679: PPUSH
7680: LD_VAR 0 7
7684: PPUSH
7685: CALL_OW 12
7689: ARRAY
7690: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7691: LD_ADDR_OWVAR 41
7695: PUSH
7696: LD_INT 100
7698: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7699: LD_ADDR_VAR 0 3
7703: PUSH
7704: LD_VAR 0 3
7708: PPUSH
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 1
7716: PLUS
7717: PPUSH
7718: CALL_OW 45
7722: PPUSH
7723: CALL_OW 2
7727: ST_TO_ADDR
// end ;
7728: GO 7341
7730: POP
7731: POP
// end ;
7732: LD_VAR 0 3
7736: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7737: LD_INT 0
7739: PPUSH
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
7744: PPUSH
7745: PPUSH
// for i = 1 to n do
7746: LD_ADDR_VAR 0 4
7750: PUSH
7751: DOUBLE
7752: LD_INT 1
7754: DEC
7755: ST_TO_ADDR
7756: LD_VAR 0 1
7760: PUSH
7761: FOR_TO
7762: IFFALSE 8150
// begin uc_nation := rand ( 1 , 3 ) ;
7764: LD_ADDR_OWVAR 21
7768: PUSH
7769: LD_INT 1
7771: PPUSH
7772: LD_INT 3
7774: PPUSH
7775: CALL_OW 12
7779: ST_TO_ADDR
// case uc_nation of 1 :
7780: LD_OWVAR 21
7784: PUSH
7785: LD_INT 1
7787: DOUBLE
7788: EQUAL
7789: IFTRUE 7793
7791: GO 7860
7793: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7794: LD_ADDR_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PUSH
7802: LD_INT 5
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7809: LD_ADDR_VAR 0 7
7813: PUSH
7814: LD_INT 6
7816: PUSH
7817: LD_INT 7
7819: PUSH
7820: LD_INT 9
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7828: LD_ADDR_VAR 0 8
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 3
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7843: LD_ADDR_VAR 0 9
7847: PUSH
7848: LD_INT 1
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: ST_TO_ADDR
// end ; 2 :
7858: GO 8015
7860: LD_INT 2
7862: DOUBLE
7863: EQUAL
7864: IFTRUE 7868
7866: GO 7943
7868: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7869: LD_ADDR_VAR 0 6
7873: PUSH
7874: LD_INT 13
7876: PUSH
7877: LD_INT 14
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7884: LD_ADDR_VAR 0 7
7888: PUSH
7889: LD_INT 27
7891: PUSH
7892: LD_INT 26
7894: PUSH
7895: LD_INT 28
7897: PUSH
7898: LD_INT 29
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7907: LD_ADDR_VAR 0 8
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 5
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7922: LD_ADDR_VAR 0 9
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: LD_INT 2
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: LIST
7940: ST_TO_ADDR
// end ; 3 :
7941: GO 8015
7943: LD_INT 3
7945: DOUBLE
7946: EQUAL
7947: IFTRUE 7951
7949: GO 8014
7951: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7952: LD_ADDR_VAR 0 6
7956: PUSH
7957: LD_INT 23
7959: PUSH
7960: LD_INT 24
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7967: LD_ADDR_VAR 0 7
7971: PUSH
7972: LD_INT 46
7974: PUSH
7975: LD_INT 45
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7982: LD_ADDR_VAR 0 8
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: LD_INT 3
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7997: LD_ADDR_VAR 0 9
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: ST_TO_ADDR
// end ; end ;
8012: GO 8015
8014: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8015: LD_ADDR_OWVAR 37
8019: PUSH
8020: LD_VAR 0 6
8024: PUSH
8025: LD_INT 1
8027: PPUSH
8028: LD_VAR 0 6
8032: PPUSH
8033: CALL_OW 12
8037: ARRAY
8038: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8039: LD_ADDR_OWVAR 39
8043: PUSH
8044: LD_VAR 0 9
8048: PUSH
8049: LD_INT 1
8051: PPUSH
8052: LD_VAR 0 9
8056: PPUSH
8057: CALL_OW 12
8061: ARRAY
8062: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8063: LD_ADDR_OWVAR 38
8067: PUSH
8068: LD_VAR 0 8
8072: PUSH
8073: LD_INT 1
8075: PPUSH
8076: LD_VAR 0 8
8080: PPUSH
8081: CALL_OW 12
8085: ARRAY
8086: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8087: LD_ADDR_OWVAR 40
8091: PUSH
8092: LD_VAR 0 7
8096: PUSH
8097: LD_INT 1
8099: PPUSH
8100: LD_VAR 0 7
8104: PPUSH
8105: CALL_OW 12
8109: ARRAY
8110: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8111: LD_ADDR_OWVAR 41
8115: PUSH
8116: LD_INT 100
8118: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8119: LD_ADDR_VAR 0 3
8123: PUSH
8124: LD_VAR 0 3
8128: PPUSH
8129: LD_VAR 0 3
8133: PUSH
8134: LD_INT 1
8136: PLUS
8137: PPUSH
8138: CALL_OW 45
8142: PPUSH
8143: CALL_OW 2
8147: ST_TO_ADDR
// end ;
8148: GO 7761
8150: POP
8151: POP
// end ;
8152: LD_VAR 0 3
8156: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8157: LD_INT 0
8159: PPUSH
8160: PPUSH
// for i = 1 to n do
8161: LD_ADDR_VAR 0 4
8165: PUSH
8166: DOUBLE
8167: LD_INT 1
8169: DEC
8170: ST_TO_ADDR
8171: LD_VAR 0 1
8175: PUSH
8176: FOR_TO
8177: IFFALSE 8251
// begin uc_nation := rand ( 1 , 3 ) ;
8179: LD_ADDR_OWVAR 21
8183: PUSH
8184: LD_INT 1
8186: PPUSH
8187: LD_INT 3
8189: PPUSH
8190: CALL_OW 12
8194: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8195: LD_INT 0
8197: PPUSH
8198: LD_INT 8
8200: PUSH
8201: LD_INT 9
8203: PUSH
8204: LD_INT 1
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 1
8214: PPUSH
8215: LD_INT 3
8217: PPUSH
8218: CALL_OW 12
8222: ARRAY
8223: PPUSH
8224: LD_VAR 0 2
8228: PPUSH
8229: CALL_OW 380
// result := result ^ CreateHuman ;
8233: LD_ADDR_VAR 0 3
8237: PUSH
8238: LD_VAR 0 3
8242: PUSH
8243: CALL_OW 44
8247: ADD
8248: ST_TO_ADDR
// end ;
8249: GO 8176
8251: POP
8252: POP
// end ;
8253: LD_VAR 0 3
8257: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8258: LD_INT 0
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
// for i = 1 to n do
8267: LD_ADDR_VAR 0 4
8271: PUSH
8272: DOUBLE
8273: LD_INT 1
8275: DEC
8276: ST_TO_ADDR
8277: LD_VAR 0 1
8281: PUSH
8282: FOR_TO
8283: IFFALSE 8679
// begin uc_nation := rand ( 1 , 3 ) ;
8285: LD_ADDR_OWVAR 21
8289: PUSH
8290: LD_INT 1
8292: PPUSH
8293: LD_INT 3
8295: PPUSH
8296: CALL_OW 12
8300: ST_TO_ADDR
// case uc_nation of 1 :
8301: LD_OWVAR 21
8305: PUSH
8306: LD_INT 1
8308: DOUBLE
8309: EQUAL
8310: IFTRUE 8314
8312: GO 8387
8314: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 4
8322: PUSH
8323: LD_INT 5
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_INT 6
8337: PUSH
8338: LD_INT 7
8340: PUSH
8341: LD_INT 10
8343: PUSH
8344: LD_EXP 17
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8355: LD_ADDR_VAR 0 8
8359: PUSH
8360: LD_INT 1
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8370: LD_ADDR_VAR 0 9
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: ST_TO_ADDR
// end ; 2 :
8385: GO 8544
8387: LD_INT 2
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8395
8393: GO 8468
8395: POP
// begin chassis := [ ar_half_tracked ] ;
8396: LD_ADDR_VAR 0 6
8400: PUSH
8401: LD_INT 14
8403: PUSH
8404: EMPTY
8405: LIST
8406: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8407: LD_ADDR_VAR 0 7
8411: PUSH
8412: LD_EXP 18
8416: PUSH
8417: LD_INT 26
8419: PUSH
8420: LD_INT 28
8422: PUSH
8423: LD_INT 29
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8432: LD_ADDR_VAR 0 8
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: LD_INT 5
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8447: LD_ADDR_VAR 0 9
8451: PUSH
8452: LD_INT 1
8454: PUSH
8455: LD_INT 2
8457: PUSH
8458: LD_INT 3
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: ST_TO_ADDR
// end ; 3 :
8466: GO 8544
8468: LD_INT 3
8470: DOUBLE
8471: EQUAL
8472: IFTRUE 8476
8474: GO 8543
8476: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8477: LD_ADDR_VAR 0 6
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 24
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8492: LD_ADDR_VAR 0 7
8496: PUSH
8497: LD_INT 46
8499: PUSH
8500: LD_INT 45
8502: PUSH
8503: LD_INT 49
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8511: LD_ADDR_VAR 0 8
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: LD_INT 3
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8526: LD_ADDR_VAR 0 9
8530: PUSH
8531: LD_INT 1
8533: PUSH
8534: LD_INT 3
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: ST_TO_ADDR
// end ; end ;
8541: GO 8544
8543: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8544: LD_ADDR_OWVAR 37
8548: PUSH
8549: LD_VAR 0 6
8553: PUSH
8554: LD_INT 1
8556: PPUSH
8557: LD_VAR 0 6
8561: PPUSH
8562: CALL_OW 12
8566: ARRAY
8567: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8568: LD_ADDR_OWVAR 39
8572: PUSH
8573: LD_VAR 0 9
8577: PUSH
8578: LD_INT 1
8580: PPUSH
8581: LD_VAR 0 9
8585: PPUSH
8586: CALL_OW 12
8590: ARRAY
8591: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8592: LD_ADDR_OWVAR 38
8596: PUSH
8597: LD_VAR 0 8
8601: PUSH
8602: LD_INT 1
8604: PPUSH
8605: LD_VAR 0 8
8609: PPUSH
8610: CALL_OW 12
8614: ARRAY
8615: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8616: LD_ADDR_OWVAR 40
8620: PUSH
8621: LD_VAR 0 7
8625: PUSH
8626: LD_INT 1
8628: PPUSH
8629: LD_VAR 0 7
8633: PPUSH
8634: CALL_OW 12
8638: ARRAY
8639: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8640: LD_ADDR_OWVAR 41
8644: PUSH
8645: LD_INT 100
8647: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_VAR 0 3
8657: PPUSH
8658: LD_VAR 0 3
8662: PUSH
8663: LD_INT 1
8665: PLUS
8666: PPUSH
8667: CALL_OW 45
8671: PPUSH
8672: CALL_OW 2
8676: ST_TO_ADDR
// end ;
8677: GO 8282
8679: POP
8680: POP
// end ; end_of_file
8681: LD_VAR 0 3
8685: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8686: LD_INT 22
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PPUSH
8696: CALL_OW 69
8700: IFFALSE 9206
8702: GO 8704
8704: DISABLE
8705: LD_INT 0
8707: PPUSH
8708: PPUSH
8709: PPUSH
// begin enable ;
8710: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8711: LD_ADDR_VAR 0 3
8715: PUSH
8716: LD_INT 22
8718: PUSH
8719: LD_INT 7
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PPUSH
8726: CALL_OW 69
8730: ST_TO_ADDR
// for i in tmp do
8731: LD_ADDR_VAR 0 1
8735: PUSH
8736: LD_VAR 0 3
8740: PUSH
8741: FOR_IN
8742: IFFALSE 9204
// begin case GetType ( i ) of unit_human :
8744: LD_VAR 0 1
8748: PPUSH
8749: CALL_OW 247
8753: PUSH
8754: LD_INT 1
8756: DOUBLE
8757: EQUAL
8758: IFTRUE 8762
8760: GO 8961
8762: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL_OW 256
8772: PUSH
8773: LD_INT 250
8775: LESS
8776: PUSH
8777: LD_INT 5
8779: PPUSH
8780: LD_INT 7
8782: PPUSH
8783: CALL_OW 321
8787: PUSH
8788: LD_INT 2
8790: NONEQUAL
8791: AND
8792: IFFALSE 8796
// continue ;
8794: GO 8741
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 257
8805: PUSH
8806: LD_INT 12
8808: PUSH
8809: LD_INT 15
8811: PUSH
8812: LD_INT 16
8814: PUSH
8815: LD_INT 17
8817: PUSH
8818: LD_INT 1
8820: PUSH
8821: LD_INT 5
8823: PUSH
8824: LD_INT 6
8826: PUSH
8827: LD_INT 7
8829: PUSH
8830: LD_INT 8
8832: PUSH
8833: LD_INT 9
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: IN
8848: IFFALSE 8886
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8850: LD_VAR 0 1
8854: PPUSH
8855: LD_INT 22
8857: PUSH
8858: LD_OWVAR 2
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PPUSH
8867: CALL_OW 69
8871: PPUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 74
8881: PPUSH
8882: CALL_OW 115
// if GetClass ( i ) = 3 then
8886: LD_VAR 0 1
8890: PPUSH
8891: CALL_OW 257
8895: PUSH
8896: LD_INT 3
8898: EQUAL
8899: IFFALSE 8959
// if IsInUnit ( i ) then
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 310
8910: IFFALSE 8950
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_INT 22
8919: PUSH
8920: LD_OWVAR 2
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PPUSH
8929: CALL_OW 69
8933: PPUSH
8934: LD_VAR 0 1
8938: PPUSH
8939: CALL_OW 74
8943: PPUSH
8944: CALL_OW 115
8948: GO 8959
// ComEspace ( i ) ;
8950: LD_VAR 0 1
8954: PPUSH
8955: CALL 1933 0 1
// end ; unit_vehicle :
8959: GO 9202
8961: LD_INT 2
8963: DOUBLE
8964: EQUAL
8965: IFTRUE 8969
8967: GO 9201
8969: POP
// begin if GetLives ( i ) > 250 then
8970: LD_VAR 0 1
8974: PPUSH
8975: CALL_OW 256
8979: PUSH
8980: LD_INT 250
8982: GREATER
8983: IFFALSE 9199
// begin if GetWeapon ( i ) = us_artillery then
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 264
8994: PUSH
8995: LD_EXP 17
8999: EQUAL
9000: IFFALSE 9068
// begin if IsInArea ( i , zoneOut ) then
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 4
9009: PPUSH
9010: CALL_OW 308
9014: IFFALSE 9030
// ComMoveToArea ( i , zoneBorder ) else
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_INT 9
9023: PPUSH
9024: CALL_OW 113
9028: GO 9066
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: LD_INT 22
9037: PUSH
9038: LD_OWVAR 2
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 69
9051: PPUSH
9052: LD_VAR 0 1
9056: PPUSH
9057: CALL_OW 74
9061: PPUSH
9062: CALL_OW 115
// end else
9066: GO 9199
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9068: LD_VAR 0 1
9072: PPUSH
9073: CALL_OW 264
9077: PUSH
9078: LD_INT 11
9080: PUSH
9081: LD_INT 30
9083: PUSH
9084: LD_EXP 14
9088: PUSH
9089: LD_INT 49
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: IN
9098: IFFALSE 9128
// begin if IsInArea ( i , zoneOut ) then
9100: LD_VAR 0 1
9104: PPUSH
9105: LD_INT 4
9107: PPUSH
9108: CALL_OW 308
9112: IFFALSE 9126
// ComSpecMove ( i , specPos ) ;
9114: LD_VAR 0 1
9118: PPUSH
9119: LD_INT 8
9121: PPUSH
9122: CALL 1979 0 2
// end else
9126: GO 9199
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9128: LD_VAR 0 1
9132: PPUSH
9133: CALL_OW 264
9137: PUSH
9138: LD_EXP 18
9142: PUSH
9143: LD_INT 29
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: IN
9150: IFFALSE 9163
// ComSpecAttack ( i ) else
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL 2407 0 1
9161: GO 9199
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9163: LD_VAR 0 1
9167: PPUSH
9168: LD_INT 22
9170: PUSH
9171: LD_OWVAR 2
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PPUSH
9180: CALL_OW 69
9184: PPUSH
9185: LD_VAR 0 1
9189: PPUSH
9190: CALL_OW 74
9194: PPUSH
9195: CALL_OW 115
// end ; end ; end ;
9199: GO 9202
9201: POP
// end ;
9202: GO 8741
9204: POP
9205: POP
// end ; end_of_file
9206: PPOPN 3
9208: END
// export function InitDisplay ; begin
9209: LD_INT 0
9211: PPUSH
// while true do
9212: LD_INT 1
9214: IFFALSE 9301
// begin if waveNumber < 100 then
9216: LD_EXP 5
9220: PUSH
9221: LD_INT 100
9223: LESS
9224: IFFALSE 9275
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9226: LD_ADDR_OWVAR 47
9230: PUSH
9231: LD_STRING #Tick
9233: PUSH
9234: LD_OWVAR 1
9238: PUSH
9239: LD_STRING #Points
9241: PUSH
9242: LD_EXP 2
9246: PUSH
9247: LD_STRING #Attack
9249: PUSH
9250: LD_EXP 4
9254: PUSH
9255: LD_STRING #Wave
9257: PUSH
9258: LD_EXP 5
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: ST_TO_ADDR
9273: GO 9292
// Display_Strings := [ #Win , points ] ;
9275: LD_ADDR_OWVAR 47
9279: PUSH
9280: LD_STRING #Win
9282: PUSH
9283: LD_EXP 2
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9292: LD_INT 35
9294: PPUSH
9295: CALL_OW 67
// end ;
9299: GO 9212
// end ; end_of_file
9301: LD_VAR 0 1
9305: RET
// export function InitBonus ; var i , chance ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
// chance := rand ( 1 , 99 ) ;
9311: LD_ADDR_VAR 0 3
9315: PUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_INT 99
9321: PPUSH
9322: CALL_OW 12
9326: ST_TO_ADDR
// case chance of 1 .. 10 :
9327: LD_VAR 0 3
9331: PUSH
9332: LD_INT 1
9334: DOUBLE
9335: GREATEREQUAL
9336: IFFALSE 9344
9338: LD_INT 10
9340: DOUBLE
9341: LESSEQUAL
9342: IFTRUE 9346
9344: GO 9357
9346: POP
// i := 5 ; 11 .. 25 :
9347: LD_ADDR_VAR 0 2
9351: PUSH
9352: LD_INT 5
9354: ST_TO_ADDR
9355: GO 9458
9357: LD_INT 11
9359: DOUBLE
9360: GREATEREQUAL
9361: IFFALSE 9369
9363: LD_INT 25
9365: DOUBLE
9366: LESSEQUAL
9367: IFTRUE 9371
9369: GO 9382
9371: POP
// i := 3 ; 26 .. 40 :
9372: LD_ADDR_VAR 0 2
9376: PUSH
9377: LD_INT 3
9379: ST_TO_ADDR
9380: GO 9458
9382: LD_INT 26
9384: DOUBLE
9385: GREATEREQUAL
9386: IFFALSE 9394
9388: LD_INT 40
9390: DOUBLE
9391: LESSEQUAL
9392: IFTRUE 9396
9394: GO 9407
9396: POP
// i := 2 ; 41 .. 60 :
9397: LD_ADDR_VAR 0 2
9401: PUSH
9402: LD_INT 2
9404: ST_TO_ADDR
9405: GO 9458
9407: LD_INT 41
9409: DOUBLE
9410: GREATEREQUAL
9411: IFFALSE 9419
9413: LD_INT 60
9415: DOUBLE
9416: LESSEQUAL
9417: IFTRUE 9421
9419: GO 9432
9421: POP
// i := 4 ; 61 .. 99 :
9422: LD_ADDR_VAR 0 2
9426: PUSH
9427: LD_INT 4
9429: ST_TO_ADDR
9430: GO 9458
9432: LD_INT 61
9434: DOUBLE
9435: GREATEREQUAL
9436: IFFALSE 9444
9438: LD_INT 99
9440: DOUBLE
9441: LESSEQUAL
9442: IFTRUE 9446
9444: GO 9457
9446: POP
// i := 1 ; end ;
9447: LD_ADDR_VAR 0 2
9451: PUSH
9452: LD_INT 1
9454: ST_TO_ADDR
9455: GO 9458
9457: POP
// case i of 1 :
9458: LD_VAR 0 2
9462: PUSH
9463: LD_INT 1
9465: DOUBLE
9466: EQUAL
9467: IFTRUE 9471
9469: GO 9560
9471: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9472: LD_INT 22
9474: PUSH
9475: LD_OWVAR 2
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 2
9486: PUSH
9487: LD_INT 25
9489: PUSH
9490: LD_INT 12
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 25
9499: PUSH
9500: LD_INT 16
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 25
9509: PUSH
9510: LD_INT 15
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 25
9519: PUSH
9520: LD_INT 17
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PPUSH
9538: CALL_OW 69
9542: PUSH
9543: LD_INT 10
9545: GREATEREQUAL
9546: IFFALSE 9554
// BonusIV else
9548: CALL 10133 0 0
9552: GO 9558
// BonusI ;
9554: CALL 9638 0 0
// end ; 2 :
9558: GO 9633
9560: LD_INT 2
9562: DOUBLE
9563: EQUAL
9564: IFTRUE 9568
9566: GO 9575
9568: POP
// begin BonusII ;
9569: CALL 9811 0 0
// end ; 3 :
9573: GO 9633
9575: LD_INT 3
9577: DOUBLE
9578: EQUAL
9579: IFTRUE 9583
9581: GO 9590
9583: POP
// begin BonusIII ;
9584: CALL 9959 0 0
// end ; 4 :
9588: GO 9633
9590: LD_INT 4
9592: DOUBLE
9593: EQUAL
9594: IFTRUE 9598
9596: GO 9605
9598: POP
// begin BonusIV ;
9599: CALL 10133 0 0
// end ; 5 :
9603: GO 9633
9605: LD_INT 5
9607: DOUBLE
9608: EQUAL
9609: IFTRUE 9613
9611: GO 9632
9613: POP
// begin if graveyard then
9614: LD_EXP 8
9618: IFFALSE 9626
// BonusV else
9620: CALL 10551 0 0
9624: GO 9630
// BonusIII ;
9626: CALL 9959 0 0
// end ; end ;
9630: GO 9633
9632: POP
// end ;
9633: LD_VAR 0 1
9637: RET
// export function BonusI ; var i ; begin
9638: LD_INT 0
9640: PPUSH
9641: PPUSH
// case Query ( AddGift1 ) of 1 :
9642: LD_STRING AddGift1
9644: PPUSH
9645: CALL_OW 97
9649: PUSH
9650: LD_INT 1
9652: DOUBLE
9653: EQUAL
9654: IFTRUE 9658
9656: GO 9737
9658: POP
// begin for i = 1 to 3 do
9659: LD_ADDR_VAR 0 2
9663: PUSH
9664: DOUBLE
9665: LD_INT 1
9667: DEC
9668: ST_TO_ADDR
9669: LD_INT 3
9671: PUSH
9672: FOR_TO
9673: IFFALSE 9733
// begin uc_side := your_side ;
9675: LD_ADDR_OWVAR 20
9679: PUSH
9680: LD_OWVAR 2
9684: ST_TO_ADDR
// uc_nation := 0 ;
9685: LD_ADDR_OWVAR 21
9689: PUSH
9690: LD_INT 0
9692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9693: LD_INT 0
9695: PPUSH
9696: LD_INT 12
9698: PPUSH
9699: LD_INT 1
9701: PPUSH
9702: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9706: CALL_OW 44
9710: PPUSH
9711: LD_EXP 9
9715: PPUSH
9716: LD_EXP 10
9720: PPUSH
9721: LD_INT 15
9723: PPUSH
9724: LD_INT 1
9726: PPUSH
9727: CALL_OW 50
// end ;
9731: GO 9672
9733: POP
9734: POP
// end ; 2 :
9735: GO 9806
9737: LD_INT 2
9739: DOUBLE
9740: EQUAL
9741: IFTRUE 9745
9743: GO 9787
9745: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9746: LD_EXP 11
9750: PPUSH
9751: CALL_OW 274
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_EXP 11
9763: PPUSH
9764: CALL_OW 274
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: CALL_OW 275
9776: PUSH
9777: LD_INT 100
9779: PLUS
9780: PPUSH
9781: CALL_OW 277
// end ; 3 :
9785: GO 9806
9787: LD_INT 3
9789: DOUBLE
9790: EQUAL
9791: IFTRUE 9795
9793: GO 9805
9795: POP
// begin SetTeamExp ( 2 ) ;
9796: LD_INT 2
9798: PPUSH
9799: CALL 940 0 1
// end ; end ;
9803: GO 9806
9805: POP
// end ;
9806: LD_VAR 0 1
9810: RET
// export function BonusII ; var i ; begin
9811: LD_INT 0
9813: PPUSH
9814: PPUSH
// case Query ( AddGift2 ) of 1 :
9815: LD_STRING AddGift2
9817: PPUSH
9818: CALL_OW 97
9822: PUSH
9823: LD_INT 1
9825: DOUBLE
9826: EQUAL
9827: IFTRUE 9831
9829: GO 9873
9831: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9832: LD_EXP 11
9836: PPUSH
9837: CALL_OW 274
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: LD_EXP 11
9849: PPUSH
9850: CALL_OW 274
9854: PPUSH
9855: LD_INT 1
9857: PPUSH
9858: CALL_OW 275
9862: PUSH
9863: LD_INT 500
9865: PLUS
9866: PPUSH
9867: CALL_OW 277
// end ; 2 :
9871: GO 9954
9873: LD_INT 2
9875: DOUBLE
9876: EQUAL
9877: IFTRUE 9881
9879: GO 9891
9881: POP
// begin SetTeamExp ( 3 ) ;
9882: LD_INT 3
9884: PPUSH
9885: CALL 940 0 1
// end ; 3 :
9889: GO 9954
9891: LD_INT 3
9893: DOUBLE
9894: EQUAL
9895: IFTRUE 9899
9897: GO 9953
9899: POP
// begin uc_side = your_side ;
9900: LD_ADDR_OWVAR 20
9904: PUSH
9905: LD_OWVAR 2
9909: ST_TO_ADDR
// uc_nation = nation_russian ;
9910: LD_ADDR_OWVAR 21
9914: PUSH
9915: LD_INT 3
9917: ST_TO_ADDR
// vc_chassis = 25 ;
9918: LD_ADDR_OWVAR 37
9922: PUSH
9923: LD_INT 25
9925: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9926: CALL_OW 45
9930: PPUSH
9931: LD_EXP 9
9935: PPUSH
9936: LD_EXP 10
9940: PPUSH
9941: LD_INT 15
9943: PPUSH
9944: LD_INT 1
9946: PPUSH
9947: CALL_OW 50
// end ; end ;
9951: GO 9954
9953: POP
// end ;
9954: LD_VAR 0 1
9958: RET
// export function BonusIII ; var i ; begin
9959: LD_INT 0
9961: PPUSH
9962: PPUSH
// case Query ( AddGift3 ) of 1 :
9963: LD_STRING AddGift3
9965: PPUSH
9966: CALL_OW 97
9970: PUSH
9971: LD_INT 1
9973: DOUBLE
9974: EQUAL
9975: IFTRUE 9979
9977: GO 10021
9979: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9980: LD_EXP 11
9984: PPUSH
9985: CALL_OW 274
9989: PPUSH
9990: LD_INT 1
9992: PPUSH
9993: LD_EXP 11
9997: PPUSH
9998: CALL_OW 274
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 275
10010: PUSH
10011: LD_INT 1000
10013: PLUS
10014: PPUSH
10015: CALL_OW 277
// end ; 2 :
10019: GO 10128
10021: LD_INT 2
10023: DOUBLE
10024: EQUAL
10025: IFTRUE 10029
10027: GO 10041
10029: POP
// begin PrepareGuards ( waveNumber ) ;
10030: LD_EXP 5
10034: PPUSH
10035: CALL 1086 0 1
// end ; 3 :
10039: GO 10128
10041: LD_INT 3
10043: DOUBLE
10044: EQUAL
10045: IFTRUE 10049
10047: GO 10127
10049: POP
// begin uc_side = your_side ;
10050: LD_ADDR_OWVAR 20
10054: PUSH
10055: LD_OWVAR 2
10059: ST_TO_ADDR
// uc_nation = nation_american ;
10060: LD_ADDR_OWVAR 21
10064: PUSH
10065: LD_INT 1
10067: ST_TO_ADDR
// vc_chassis = us_morphling ;
10068: LD_ADDR_OWVAR 37
10072: PUSH
10073: LD_INT 5
10075: ST_TO_ADDR
// vc_engine := engine_siberite ;
10076: LD_ADDR_OWVAR 39
10080: PUSH
10081: LD_INT 3
10083: ST_TO_ADDR
// vc_control := control_computer ;
10084: LD_ADDR_OWVAR 38
10088: PUSH
10089: LD_INT 3
10091: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10092: LD_ADDR_OWVAR 40
10096: PUSH
10097: LD_INT 8
10099: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10100: CALL_OW 45
10104: PPUSH
10105: LD_EXP 9
10109: PPUSH
10110: LD_EXP 10
10114: PPUSH
10115: LD_INT 15
10117: PPUSH
10118: LD_INT 1
10120: PPUSH
10121: CALL_OW 50
// end ; end ;
10125: GO 10128
10127: POP
// end ;
10128: LD_VAR 0 1
10132: RET
// export function BonusIV ; var i ; begin
10133: LD_INT 0
10135: PPUSH
10136: PPUSH
// case Query ( AddGift4 ) of 1 :
10137: LD_STRING AddGift4
10139: PPUSH
10140: CALL_OW 97
10144: PUSH
10145: LD_INT 1
10147: DOUBLE
10148: EQUAL
10149: IFTRUE 10153
10151: GO 10477
10153: POP
// begin i := rand ( 1 , 3 ) ;
10154: LD_ADDR_VAR 0 2
10158: PUSH
10159: LD_INT 1
10161: PPUSH
10162: LD_INT 3
10164: PPUSH
10165: CALL_OW 12
10169: ST_TO_ADDR
// uc_side := your_side ;
10170: LD_ADDR_OWVAR 20
10174: PUSH
10175: LD_OWVAR 2
10179: ST_TO_ADDR
// case i of 1 :
10180: LD_VAR 0 2
10184: PUSH
10185: LD_INT 1
10187: DOUBLE
10188: EQUAL
10189: IFTRUE 10193
10191: GO 10280
10193: POP
// begin uc_nation := nation_arabian ;
10194: LD_ADDR_OWVAR 21
10198: PUSH
10199: LD_INT 2
10201: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10202: LD_ADDR_OWVAR 37
10206: PUSH
10207: LD_INT 14
10209: ST_TO_ADDR
// vc_engine := engine_combustion ;
10210: LD_ADDR_OWVAR 39
10214: PUSH
10215: LD_INT 1
10217: ST_TO_ADDR
// vc_control := control_manual ;
10218: LD_ADDR_OWVAR 38
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10226: LD_ADDR_OWVAR 40
10230: PUSH
10231: LD_INT 27
10233: PUSH
10234: LD_INT 28
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 1
10243: PPUSH
10244: LD_INT 2
10246: PPUSH
10247: CALL_OW 12
10251: ARRAY
10252: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10253: CALL_OW 45
10257: PPUSH
10258: LD_EXP 9
10262: PPUSH
10263: LD_EXP 10
10267: PPUSH
10268: LD_INT 15
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: CALL_OW 50
// end ; 2 :
10278: GO 10475
10280: LD_INT 2
10282: DOUBLE
10283: EQUAL
10284: IFTRUE 10288
10286: GO 10379
10288: POP
// begin uc_nation := nation_american ;
10289: LD_ADDR_OWVAR 21
10293: PUSH
10294: LD_INT 1
10296: ST_TO_ADDR
// vc_chassis := us_morphling ;
10297: LD_ADDR_OWVAR 37
10301: PUSH
10302: LD_INT 5
10304: ST_TO_ADDR
// vc_engine := engine_siberite ;
10305: LD_ADDR_OWVAR 39
10309: PUSH
10310: LD_INT 3
10312: ST_TO_ADDR
// vc_control := control_computer ;
10313: LD_ADDR_OWVAR 38
10317: PUSH
10318: LD_INT 3
10320: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10321: LD_ADDR_OWVAR 40
10325: PUSH
10326: LD_INT 12
10328: PUSH
10329: LD_INT 10
10331: PUSH
10332: LD_INT 7
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 1
10342: PPUSH
10343: LD_INT 3
10345: PPUSH
10346: CALL_OW 12
10350: ARRAY
10351: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10352: CALL_OW 45
10356: PPUSH
10357: LD_EXP 9
10361: PPUSH
10362: LD_EXP 10
10366: PPUSH
10367: LD_INT 15
10369: PPUSH
10370: LD_INT 1
10372: PPUSH
10373: CALL_OW 50
// end ; 3 :
10377: GO 10475
10379: LD_INT 3
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10474
10387: POP
// begin uc_nation := nation_russian ;
10388: LD_ADDR_OWVAR 21
10392: PUSH
10393: LD_INT 3
10395: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10396: LD_ADDR_OWVAR 37
10400: PUSH
10401: LD_INT 22
10403: ST_TO_ADDR
// vc_engine := engine_combustion ;
10404: LD_ADDR_OWVAR 39
10408: PUSH
10409: LD_INT 1
10411: ST_TO_ADDR
// vc_control := control_manual ;
10412: LD_ADDR_OWVAR 38
10416: PUSH
10417: LD_INT 1
10419: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10420: LD_ADDR_OWVAR 40
10424: PUSH
10425: LD_INT 45
10427: PUSH
10428: LD_INT 44
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 1
10437: PPUSH
10438: LD_INT 2
10440: PPUSH
10441: CALL_OW 12
10445: ARRAY
10446: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10447: CALL_OW 45
10451: PPUSH
10452: LD_EXP 9
10456: PPUSH
10457: LD_EXP 10
10461: PPUSH
10462: LD_INT 15
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: CALL_OW 50
// end ; end ;
10472: GO 10475
10474: POP
// end ; 2 :
10475: GO 10546
10477: LD_INT 2
10479: DOUBLE
10480: EQUAL
10481: IFTRUE 10485
10483: GO 10527
10485: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10486: LD_EXP 11
10490: PPUSH
10491: CALL_OW 274
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: LD_EXP 11
10503: PPUSH
10504: CALL_OW 274
10508: PPUSH
10509: LD_INT 1
10511: PPUSH
10512: CALL_OW 275
10516: PUSH
10517: LD_INT 100
10519: PLUS
10520: PPUSH
10521: CALL_OW 277
// end ; 3 :
10525: GO 10546
10527: LD_INT 3
10529: DOUBLE
10530: EQUAL
10531: IFTRUE 10535
10533: GO 10545
10535: POP
// begin SetTeamExp ( 2 ) ;
10536: LD_INT 2
10538: PPUSH
10539: CALL 940 0 1
// end ; end ;
10543: GO 10546
10545: POP
// end ;
10546: LD_VAR 0 1
10550: RET
// export function BonusV ; var i , j ; begin
10551: LD_INT 0
10553: PPUSH
10554: PPUSH
10555: PPUSH
// case Query ( AddGift5 ) of 1 :
10556: LD_STRING AddGift5
10558: PPUSH
10559: CALL_OW 97
10563: PUSH
10564: LD_INT 1
10566: DOUBLE
10567: EQUAL
10568: IFTRUE 10572
10570: GO 10916
10572: POP
// begin for j = 1 to 3 do
10573: LD_ADDR_VAR 0 3
10577: PUSH
10578: DOUBLE
10579: LD_INT 1
10581: DEC
10582: ST_TO_ADDR
10583: LD_INT 3
10585: PUSH
10586: FOR_TO
10587: IFFALSE 10912
// begin i := rand ( 1 , 3 ) ;
10589: LD_ADDR_VAR 0 2
10593: PUSH
10594: LD_INT 1
10596: PPUSH
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 12
10604: ST_TO_ADDR
// uc_side := your_side ;
10605: LD_ADDR_OWVAR 20
10609: PUSH
10610: LD_OWVAR 2
10614: ST_TO_ADDR
// case i of 1 :
10615: LD_VAR 0 2
10619: PUSH
10620: LD_INT 1
10622: DOUBLE
10623: EQUAL
10624: IFTRUE 10628
10626: GO 10715
10628: POP
// begin uc_nation := nation_arabian ;
10629: LD_ADDR_OWVAR 21
10633: PUSH
10634: LD_INT 2
10636: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10637: LD_ADDR_OWVAR 37
10641: PUSH
10642: LD_INT 14
10644: ST_TO_ADDR
// vc_engine := engine_combustion ;
10645: LD_ADDR_OWVAR 39
10649: PUSH
10650: LD_INT 1
10652: ST_TO_ADDR
// vc_control := control_manual ;
10653: LD_ADDR_OWVAR 38
10657: PUSH
10658: LD_INT 1
10660: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10661: LD_ADDR_OWVAR 40
10665: PUSH
10666: LD_INT 27
10668: PUSH
10669: LD_INT 28
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 1
10678: PPUSH
10679: LD_INT 2
10681: PPUSH
10682: CALL_OW 12
10686: ARRAY
10687: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10688: CALL_OW 45
10692: PPUSH
10693: LD_EXP 9
10697: PPUSH
10698: LD_EXP 10
10702: PPUSH
10703: LD_INT 15
10705: PPUSH
10706: LD_INT 1
10708: PPUSH
10709: CALL_OW 50
// end ; 2 :
10713: GO 10910
10715: LD_INT 2
10717: DOUBLE
10718: EQUAL
10719: IFTRUE 10723
10721: GO 10814
10723: POP
// begin uc_nation := nation_american ;
10724: LD_ADDR_OWVAR 21
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// vc_chassis := us_morphling ;
10732: LD_ADDR_OWVAR 37
10736: PUSH
10737: LD_INT 5
10739: ST_TO_ADDR
// vc_engine := engine_siberite ;
10740: LD_ADDR_OWVAR 39
10744: PUSH
10745: LD_INT 3
10747: ST_TO_ADDR
// vc_control := control_computer ;
10748: LD_ADDR_OWVAR 38
10752: PUSH
10753: LD_INT 3
10755: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10756: LD_ADDR_OWVAR 40
10760: PUSH
10761: LD_INT 12
10763: PUSH
10764: LD_INT 11
10766: PUSH
10767: LD_INT 7
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 1
10777: PPUSH
10778: LD_INT 3
10780: PPUSH
10781: CALL_OW 12
10785: ARRAY
10786: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10787: CALL_OW 45
10791: PPUSH
10792: LD_EXP 9
10796: PPUSH
10797: LD_EXP 10
10801: PPUSH
10802: LD_INT 15
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: CALL_OW 50
// end ; 3 :
10812: GO 10910
10814: LD_INT 3
10816: DOUBLE
10817: EQUAL
10818: IFTRUE 10822
10820: GO 10909
10822: POP
// begin uc_nation := nation_russian ;
10823: LD_ADDR_OWVAR 21
10827: PUSH
10828: LD_INT 3
10830: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10831: LD_ADDR_OWVAR 37
10835: PUSH
10836: LD_INT 22
10838: ST_TO_ADDR
// vc_engine := engine_combustion ;
10839: LD_ADDR_OWVAR 39
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// vc_control := control_manual ;
10847: LD_ADDR_OWVAR 38
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10855: LD_ADDR_OWVAR 40
10859: PUSH
10860: LD_INT 45
10862: PUSH
10863: LD_INT 44
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 1
10872: PPUSH
10873: LD_INT 2
10875: PPUSH
10876: CALL_OW 12
10880: ARRAY
10881: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10882: CALL_OW 45
10886: PPUSH
10887: LD_EXP 9
10891: PPUSH
10892: LD_EXP 10
10896: PPUSH
10897: LD_INT 15
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 50
// end ; end ;
10907: GO 10910
10909: POP
// end ;
10910: GO 10586
10912: POP
10913: POP
// end ; 2 :
10914: GO 10982
10916: LD_INT 2
10918: DOUBLE
10919: EQUAL
10920: IFTRUE 10924
10922: GO 10966
10924: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10925: LD_EXP 11
10929: PPUSH
10930: CALL_OW 274
10934: PPUSH
10935: LD_INT 1
10937: PPUSH
10938: LD_EXP 11
10942: PPUSH
10943: CALL_OW 274
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 275
10955: PUSH
10956: LD_INT 500
10958: PLUS
10959: PPUSH
10960: CALL_OW 277
// end ; 3 :
10964: GO 10982
10966: LD_INT 3
10968: DOUBLE
10969: EQUAL
10970: IFTRUE 10974
10972: GO 10981
10974: POP
// begin GetBack ( ) ;
10975: CALL 1746 0 0
// end ; end ;
10979: GO 10982
10981: POP
// end ; end_of_file
10982: LD_VAR 0 1
10986: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
10987: LD_INT 0
10989: PPUSH
// ar_miner := 81 ;
10990: LD_ADDR_EXP 21
10994: PUSH
10995: LD_INT 81
10997: ST_TO_ADDR
// ar_crane := 88 ;
10998: LD_ADDR_EXP 20
11002: PUSH
11003: LD_INT 88
11005: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11006: LD_ADDR_EXP 15
11010: PUSH
11011: LD_INT 89
11013: ST_TO_ADDR
// us_hack := 99 ;
11014: LD_ADDR_EXP 16
11018: PUSH
11019: LD_INT 99
11021: ST_TO_ADDR
// us_artillery := 97 ;
11022: LD_ADDR_EXP 17
11026: PUSH
11027: LD_INT 97
11029: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11030: LD_ADDR_EXP 18
11034: PUSH
11035: LD_INT 91
11037: ST_TO_ADDR
// ar_mortar := 92 ;
11038: LD_ADDR_EXP 19
11042: PUSH
11043: LD_INT 92
11045: ST_TO_ADDR
// ru_flamethrower := 93 ;
11046: LD_ADDR_EXP 22
11050: PUSH
11051: LD_INT 93
11053: ST_TO_ADDR
// ru_radar := 98 ;
11054: LD_ADDR_EXP 14
11058: PUSH
11059: LD_INT 98
11061: ST_TO_ADDR
// tech_Artillery := 80 ;
11062: LD_ADDR_EXP 23
11066: PUSH
11067: LD_INT 80
11069: ST_TO_ADDR
// tech_RadMat := 81 ;
11070: LD_ADDR_EXP 24
11074: PUSH
11075: LD_INT 81
11077: ST_TO_ADDR
// tech_BasicTools := 82 ;
11078: LD_ADDR_EXP 25
11082: PUSH
11083: LD_INT 82
11085: ST_TO_ADDR
// tech_Cargo := 83 ;
11086: LD_ADDR_EXP 26
11090: PUSH
11091: LD_INT 83
11093: ST_TO_ADDR
// tech_Track := 84 ;
11094: LD_ADDR_EXP 27
11098: PUSH
11099: LD_INT 84
11101: ST_TO_ADDR
// tech_Crane := 85 ;
11102: LD_ADDR_EXP 28
11106: PUSH
11107: LD_INT 85
11109: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11110: LD_ADDR_EXP 29
11114: PUSH
11115: LD_INT 86
11117: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11118: LD_ADDR_EXP 30
11122: PUSH
11123: LD_INT 87
11125: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11126: LD_ADDR_EXP 31
11130: PUSH
11131: LD_INT 88
11133: ST_TO_ADDR
// end ;
11134: LD_VAR 0 1
11138: RET
// every 1 do
11139: GO 11141
11141: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11142: CALL 10987 0 0
11146: END
// every 0 0$1 do
11147: GO 11149
11149: DISABLE
// begin enable ;
11150: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11151: LD_STRING updateTimer(
11153: PUSH
11154: LD_OWVAR 1
11158: STR
11159: PUSH
11160: LD_STRING );
11162: STR
11163: PPUSH
11164: CALL_OW 559
// end ;
11168: END
// export function SOS_MapStart ( ) ; begin
11169: LD_INT 0
11171: PPUSH
// if streamModeActive then
11172: LD_EXP 32
11176: IFFALSE 11185
// DefineStreamItems ( true ) ;
11178: LD_INT 1
11180: PPUSH
11181: CALL 12839 0 1
// UpdateFactoryWaypoints ( ) ;
11185: CALL 25700 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11189: CALL 25957 0 0
// end ;
11193: LD_VAR 0 1
11197: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11198: LD_INT 0
11200: PPUSH
// if p2 = 100 then
11201: LD_VAR 0 2
11205: PUSH
11206: LD_INT 100
11208: EQUAL
11209: IFFALSE 12212
// begin if not StreamModeActive then
11211: LD_EXP 32
11215: NOT
11216: IFFALSE 11226
// StreamModeActive := true ;
11218: LD_ADDR_EXP 32
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// if p3 = 0 then
11226: LD_VAR 0 3
11230: PUSH
11231: LD_INT 0
11233: EQUAL
11234: IFFALSE 11240
// InitStreamMode ;
11236: CALL 12375 0 0
// if p3 = 1 then
11240: LD_VAR 0 3
11244: PUSH
11245: LD_INT 1
11247: EQUAL
11248: IFFALSE 11258
// sRocket := true ;
11250: LD_ADDR_EXP 37
11254: PUSH
11255: LD_INT 1
11257: ST_TO_ADDR
// if p3 = 2 then
11258: LD_VAR 0 3
11262: PUSH
11263: LD_INT 2
11265: EQUAL
11266: IFFALSE 11276
// sSpeed := true ;
11268: LD_ADDR_EXP 36
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// if p3 = 3 then
11276: LD_VAR 0 3
11280: PUSH
11281: LD_INT 3
11283: EQUAL
11284: IFFALSE 11294
// sEngine := true ;
11286: LD_ADDR_EXP 38
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// if p3 = 4 then
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 4
11301: EQUAL
11302: IFFALSE 11312
// sSpec := true ;
11304: LD_ADDR_EXP 35
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// if p3 = 5 then
11312: LD_VAR 0 3
11316: PUSH
11317: LD_INT 5
11319: EQUAL
11320: IFFALSE 11330
// sLevel := true ;
11322: LD_ADDR_EXP 39
11326: PUSH
11327: LD_INT 1
11329: ST_TO_ADDR
// if p3 = 6 then
11330: LD_VAR 0 3
11334: PUSH
11335: LD_INT 6
11337: EQUAL
11338: IFFALSE 11348
// sArmoury := true ;
11340: LD_ADDR_EXP 40
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// if p3 = 7 then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 7
11355: EQUAL
11356: IFFALSE 11366
// sRadar := true ;
11358: LD_ADDR_EXP 41
11362: PUSH
11363: LD_INT 1
11365: ST_TO_ADDR
// if p3 = 8 then
11366: LD_VAR 0 3
11370: PUSH
11371: LD_INT 8
11373: EQUAL
11374: IFFALSE 11384
// sBunker := true ;
11376: LD_ADDR_EXP 42
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// if p3 = 9 then
11384: LD_VAR 0 3
11388: PUSH
11389: LD_INT 9
11391: EQUAL
11392: IFFALSE 11402
// sHack := true ;
11394: LD_ADDR_EXP 43
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// if p3 = 10 then
11402: LD_VAR 0 3
11406: PUSH
11407: LD_INT 10
11409: EQUAL
11410: IFFALSE 11420
// sFire := true ;
11412: LD_ADDR_EXP 44
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
// if p3 = 11 then
11420: LD_VAR 0 3
11424: PUSH
11425: LD_INT 11
11427: EQUAL
11428: IFFALSE 11438
// sRefresh := true ;
11430: LD_ADDR_EXP 45
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// if p3 = 12 then
11438: LD_VAR 0 3
11442: PUSH
11443: LD_INT 12
11445: EQUAL
11446: IFFALSE 11456
// sExp := true ;
11448: LD_ADDR_EXP 46
11452: PUSH
11453: LD_INT 1
11455: ST_TO_ADDR
// if p3 = 13 then
11456: LD_VAR 0 3
11460: PUSH
11461: LD_INT 13
11463: EQUAL
11464: IFFALSE 11474
// sDepot := true ;
11466: LD_ADDR_EXP 47
11470: PUSH
11471: LD_INT 1
11473: ST_TO_ADDR
// if p3 = 14 then
11474: LD_VAR 0 3
11478: PUSH
11479: LD_INT 14
11481: EQUAL
11482: IFFALSE 11492
// sFlag := true ;
11484: LD_ADDR_EXP 48
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// if p3 = 15 then
11492: LD_VAR 0 3
11496: PUSH
11497: LD_INT 15
11499: EQUAL
11500: IFFALSE 11510
// sKamikadze := true ;
11502: LD_ADDR_EXP 56
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// if p3 = 16 then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_INT 16
11517: EQUAL
11518: IFFALSE 11528
// sTroll := true ;
11520: LD_ADDR_EXP 57
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if p3 = 17 then
11528: LD_VAR 0 3
11532: PUSH
11533: LD_INT 17
11535: EQUAL
11536: IFFALSE 11546
// sSlow := true ;
11538: LD_ADDR_EXP 58
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// if p3 = 18 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 18
11553: EQUAL
11554: IFFALSE 11564
// sLack := true ;
11556: LD_ADDR_EXP 59
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// if p3 = 19 then
11564: LD_VAR 0 3
11568: PUSH
11569: LD_INT 19
11571: EQUAL
11572: IFFALSE 11582
// sTank := true ;
11574: LD_ADDR_EXP 61
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// if p3 = 20 then
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 20
11589: EQUAL
11590: IFFALSE 11600
// sRemote := true ;
11592: LD_ADDR_EXP 62
11596: PUSH
11597: LD_INT 1
11599: ST_TO_ADDR
// if p3 = 21 then
11600: LD_VAR 0 3
11604: PUSH
11605: LD_INT 21
11607: EQUAL
11608: IFFALSE 11618
// sPowell := true ;
11610: LD_ADDR_EXP 63
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// if p3 = 22 then
11618: LD_VAR 0 3
11622: PUSH
11623: LD_INT 22
11625: EQUAL
11626: IFFALSE 11636
// sTeleport := true ;
11628: LD_ADDR_EXP 66
11632: PUSH
11633: LD_INT 1
11635: ST_TO_ADDR
// if p3 = 23 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 23
11643: EQUAL
11644: IFFALSE 11654
// sOilTower := true ;
11646: LD_ADDR_EXP 68
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// if p3 = 24 then
11654: LD_VAR 0 3
11658: PUSH
11659: LD_INT 24
11661: EQUAL
11662: IFFALSE 11672
// sShovel := true ;
11664: LD_ADDR_EXP 69
11668: PUSH
11669: LD_INT 1
11671: ST_TO_ADDR
// if p3 = 25 then
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 25
11679: EQUAL
11680: IFFALSE 11690
// sSheik := true ;
11682: LD_ADDR_EXP 70
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// if p3 = 26 then
11690: LD_VAR 0 3
11694: PUSH
11695: LD_INT 26
11697: EQUAL
11698: IFFALSE 11708
// sEarthquake := true ;
11700: LD_ADDR_EXP 72
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// if p3 = 27 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 27
11715: EQUAL
11716: IFFALSE 11726
// sAI := true ;
11718: LD_ADDR_EXP 73
11722: PUSH
11723: LD_INT 1
11725: ST_TO_ADDR
// if p3 = 28 then
11726: LD_VAR 0 3
11730: PUSH
11731: LD_INT 28
11733: EQUAL
11734: IFFALSE 11744
// sCargo := true ;
11736: LD_ADDR_EXP 76
11740: PUSH
11741: LD_INT 1
11743: ST_TO_ADDR
// if p3 = 29 then
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 29
11751: EQUAL
11752: IFFALSE 11762
// sDLaser := true ;
11754: LD_ADDR_EXP 77
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if p3 = 30 then
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 30
11769: EQUAL
11770: IFFALSE 11780
// sExchange := true ;
11772: LD_ADDR_EXP 78
11776: PUSH
11777: LD_INT 1
11779: ST_TO_ADDR
// if p3 = 31 then
11780: LD_VAR 0 3
11784: PUSH
11785: LD_INT 31
11787: EQUAL
11788: IFFALSE 11798
// sFac := true ;
11790: LD_ADDR_EXP 79
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// if p3 = 32 then
11798: LD_VAR 0 3
11802: PUSH
11803: LD_INT 32
11805: EQUAL
11806: IFFALSE 11816
// sPower := true ;
11808: LD_ADDR_EXP 80
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// if p3 = 33 then
11816: LD_VAR 0 3
11820: PUSH
11821: LD_INT 33
11823: EQUAL
11824: IFFALSE 11834
// sRandom := true ;
11826: LD_ADDR_EXP 81
11830: PUSH
11831: LD_INT 1
11833: ST_TO_ADDR
// if p3 = 34 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_INT 34
11841: EQUAL
11842: IFFALSE 11852
// sShield := true ;
11844: LD_ADDR_EXP 82
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// if p3 = 35 then
11852: LD_VAR 0 3
11856: PUSH
11857: LD_INT 35
11859: EQUAL
11860: IFFALSE 11870
// sTime := true ;
11862: LD_ADDR_EXP 83
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if p3 = 36 then
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 36
11877: EQUAL
11878: IFFALSE 11888
// sTools := true ;
11880: LD_ADDR_EXP 84
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// if p3 = 101 then
11888: LD_VAR 0 3
11892: PUSH
11893: LD_INT 101
11895: EQUAL
11896: IFFALSE 11906
// sSold := true ;
11898: LD_ADDR_EXP 49
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// if p3 = 102 then
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 102
11913: EQUAL
11914: IFFALSE 11924
// sDiff := true ;
11916: LD_ADDR_EXP 50
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// if p3 = 103 then
11924: LD_VAR 0 3
11928: PUSH
11929: LD_INT 103
11931: EQUAL
11932: IFFALSE 11942
// sFog := true ;
11934: LD_ADDR_EXP 53
11938: PUSH
11939: LD_INT 1
11941: ST_TO_ADDR
// if p3 = 104 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 104
11949: EQUAL
11950: IFFALSE 11960
// sReset := true ;
11952: LD_ADDR_EXP 54
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if p3 = 105 then
11960: LD_VAR 0 3
11964: PUSH
11965: LD_INT 105
11967: EQUAL
11968: IFFALSE 11978
// sSun := true ;
11970: LD_ADDR_EXP 55
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// if p3 = 106 then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_INT 106
11985: EQUAL
11986: IFFALSE 11996
// sTiger := true ;
11988: LD_ADDR_EXP 51
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// if p3 = 107 then
11996: LD_VAR 0 3
12000: PUSH
12001: LD_INT 107
12003: EQUAL
12004: IFFALSE 12014
// sBomb := true ;
12006: LD_ADDR_EXP 52
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// if p3 = 108 then
12014: LD_VAR 0 3
12018: PUSH
12019: LD_INT 108
12021: EQUAL
12022: IFFALSE 12032
// sWound := true ;
12024: LD_ADDR_EXP 60
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// if p3 = 109 then
12032: LD_VAR 0 3
12036: PUSH
12037: LD_INT 109
12039: EQUAL
12040: IFFALSE 12050
// sBetray := true ;
12042: LD_ADDR_EXP 64
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// if p3 = 110 then
12050: LD_VAR 0 3
12054: PUSH
12055: LD_INT 110
12057: EQUAL
12058: IFFALSE 12068
// sContamin := true ;
12060: LD_ADDR_EXP 65
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// if p3 = 111 then
12068: LD_VAR 0 3
12072: PUSH
12073: LD_INT 111
12075: EQUAL
12076: IFFALSE 12086
// sOil := true ;
12078: LD_ADDR_EXP 67
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// if p3 = 112 then
12086: LD_VAR 0 3
12090: PUSH
12091: LD_INT 112
12093: EQUAL
12094: IFFALSE 12104
// sStu := true ;
12096: LD_ADDR_EXP 71
12100: PUSH
12101: LD_INT 1
12103: ST_TO_ADDR
// if p3 = 113 then
12104: LD_VAR 0 3
12108: PUSH
12109: LD_INT 113
12111: EQUAL
12112: IFFALSE 12122
// sBazooka := true ;
12114: LD_ADDR_EXP 74
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// if p3 = 114 then
12122: LD_VAR 0 3
12126: PUSH
12127: LD_INT 114
12129: EQUAL
12130: IFFALSE 12140
// sMortar := true ;
12132: LD_ADDR_EXP 75
12136: PUSH
12137: LD_INT 1
12139: ST_TO_ADDR
// if p3 = 115 then
12140: LD_VAR 0 3
12144: PUSH
12145: LD_INT 115
12147: EQUAL
12148: IFFALSE 12158
// sRanger := true ;
12150: LD_ADDR_EXP 85
12154: PUSH
12155: LD_INT 1
12157: ST_TO_ADDR
// if p3 = 116 then
12158: LD_VAR 0 3
12162: PUSH
12163: LD_INT 116
12165: EQUAL
12166: IFFALSE 12176
// sComputer := true ;
12168: LD_ADDR_EXP 86
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// if p3 = 117 then
12176: LD_VAR 0 3
12180: PUSH
12181: LD_INT 117
12183: EQUAL
12184: IFFALSE 12194
// s30 := true ;
12186: LD_ADDR_EXP 87
12190: PUSH
12191: LD_INT 1
12193: ST_TO_ADDR
// if p3 = 118 then
12194: LD_VAR 0 3
12198: PUSH
12199: LD_INT 118
12201: EQUAL
12202: IFFALSE 12212
// s60 := true ;
12204: LD_ADDR_EXP 88
12208: PUSH
12209: LD_INT 1
12211: ST_TO_ADDR
// end ; if p2 = 101 then
12212: LD_VAR 0 2
12216: PUSH
12217: LD_INT 101
12219: EQUAL
12220: IFFALSE 12348
// begin case p3 of 1 :
12222: LD_VAR 0 3
12226: PUSH
12227: LD_INT 1
12229: DOUBLE
12230: EQUAL
12231: IFTRUE 12235
12233: GO 12242
12235: POP
// hHackUnlimitedResources ; 2 :
12236: CALL 24446 0 0
12240: GO 12348
12242: LD_INT 2
12244: DOUBLE
12245: EQUAL
12246: IFTRUE 12250
12248: GO 12257
12250: POP
// hHackSetLevel10 ; 3 :
12251: CALL 24579 0 0
12255: GO 12348
12257: LD_INT 3
12259: DOUBLE
12260: EQUAL
12261: IFTRUE 12265
12263: GO 12272
12265: POP
// hHackSetLevel10YourUnits ; 4 :
12266: CALL 24664 0 0
12270: GO 12348
12272: LD_INT 4
12274: DOUBLE
12275: EQUAL
12276: IFTRUE 12280
12278: GO 12287
12280: POP
// hHackInvincible ; 5 :
12281: CALL 25112 0 0
12285: GO 12348
12287: LD_INT 5
12289: DOUBLE
12290: EQUAL
12291: IFTRUE 12295
12293: GO 12302
12295: POP
// hHackInvisible ; 6 :
12296: CALL 25223 0 0
12300: GO 12348
12302: LD_INT 6
12304: DOUBLE
12305: EQUAL
12306: IFTRUE 12310
12308: GO 12317
12310: POP
// hHackChangeYourSide ; 7 :
12311: CALL 25280 0 0
12315: GO 12348
12317: LD_INT 7
12319: DOUBLE
12320: EQUAL
12321: IFTRUE 12325
12323: GO 12332
12325: POP
// hHackChangeUnitSide ; 8 :
12326: CALL 25322 0 0
12330: GO 12348
12332: LD_INT 8
12334: DOUBLE
12335: EQUAL
12336: IFTRUE 12340
12338: GO 12347
12340: POP
// hHackFog ; end ;
12341: CALL 25423 0 0
12345: GO 12348
12347: POP
// end ; end ;
12348: LD_VAR 0 7
12352: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12353: GO 12355
12355: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12356: LD_STRING initStreamRollete();
12358: PPUSH
12359: CALL_OW 559
// InitStreamMode ;
12363: CALL 12375 0 0
// DefineStreamItems ( false ) ;
12367: LD_INT 0
12369: PPUSH
12370: CALL 12839 0 1
// end ;
12374: END
// function InitStreamMode ; begin
12375: LD_INT 0
12377: PPUSH
// streamModeActive := false ;
12378: LD_ADDR_EXP 32
12382: PUSH
12383: LD_INT 0
12385: ST_TO_ADDR
// normalCounter := 36 ;
12386: LD_ADDR_EXP 33
12390: PUSH
12391: LD_INT 36
12393: ST_TO_ADDR
// hardcoreCounter := 18 ;
12394: LD_ADDR_EXP 34
12398: PUSH
12399: LD_INT 18
12401: ST_TO_ADDR
// sRocket := false ;
12402: LD_ADDR_EXP 37
12406: PUSH
12407: LD_INT 0
12409: ST_TO_ADDR
// sSpeed := false ;
12410: LD_ADDR_EXP 36
12414: PUSH
12415: LD_INT 0
12417: ST_TO_ADDR
// sEngine := false ;
12418: LD_ADDR_EXP 38
12422: PUSH
12423: LD_INT 0
12425: ST_TO_ADDR
// sSpec := false ;
12426: LD_ADDR_EXP 35
12430: PUSH
12431: LD_INT 0
12433: ST_TO_ADDR
// sLevel := false ;
12434: LD_ADDR_EXP 39
12438: PUSH
12439: LD_INT 0
12441: ST_TO_ADDR
// sArmoury := false ;
12442: LD_ADDR_EXP 40
12446: PUSH
12447: LD_INT 0
12449: ST_TO_ADDR
// sRadar := false ;
12450: LD_ADDR_EXP 41
12454: PUSH
12455: LD_INT 0
12457: ST_TO_ADDR
// sBunker := false ;
12458: LD_ADDR_EXP 42
12462: PUSH
12463: LD_INT 0
12465: ST_TO_ADDR
// sHack := false ;
12466: LD_ADDR_EXP 43
12470: PUSH
12471: LD_INT 0
12473: ST_TO_ADDR
// sFire := false ;
12474: LD_ADDR_EXP 44
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// sRefresh := false ;
12482: LD_ADDR_EXP 45
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
// sExp := false ;
12490: LD_ADDR_EXP 46
12494: PUSH
12495: LD_INT 0
12497: ST_TO_ADDR
// sDepot := false ;
12498: LD_ADDR_EXP 47
12502: PUSH
12503: LD_INT 0
12505: ST_TO_ADDR
// sFlag := false ;
12506: LD_ADDR_EXP 48
12510: PUSH
12511: LD_INT 0
12513: ST_TO_ADDR
// sKamikadze := false ;
12514: LD_ADDR_EXP 56
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// sTroll := false ;
12522: LD_ADDR_EXP 57
12526: PUSH
12527: LD_INT 0
12529: ST_TO_ADDR
// sSlow := false ;
12530: LD_ADDR_EXP 58
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// sLack := false ;
12538: LD_ADDR_EXP 59
12542: PUSH
12543: LD_INT 0
12545: ST_TO_ADDR
// sTank := false ;
12546: LD_ADDR_EXP 61
12550: PUSH
12551: LD_INT 0
12553: ST_TO_ADDR
// sRemote := false ;
12554: LD_ADDR_EXP 62
12558: PUSH
12559: LD_INT 0
12561: ST_TO_ADDR
// sPowell := false ;
12562: LD_ADDR_EXP 63
12566: PUSH
12567: LD_INT 0
12569: ST_TO_ADDR
// sTeleport := false ;
12570: LD_ADDR_EXP 66
12574: PUSH
12575: LD_INT 0
12577: ST_TO_ADDR
// sOilTower := false ;
12578: LD_ADDR_EXP 68
12582: PUSH
12583: LD_INT 0
12585: ST_TO_ADDR
// sShovel := false ;
12586: LD_ADDR_EXP 69
12590: PUSH
12591: LD_INT 0
12593: ST_TO_ADDR
// sSheik := false ;
12594: LD_ADDR_EXP 70
12598: PUSH
12599: LD_INT 0
12601: ST_TO_ADDR
// sEarthquake := false ;
12602: LD_ADDR_EXP 72
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// sAI := false ;
12610: LD_ADDR_EXP 73
12614: PUSH
12615: LD_INT 0
12617: ST_TO_ADDR
// sCargo := false ;
12618: LD_ADDR_EXP 76
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// sDLaser := false ;
12626: LD_ADDR_EXP 77
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// sExchange := false ;
12634: LD_ADDR_EXP 78
12638: PUSH
12639: LD_INT 0
12641: ST_TO_ADDR
// sFac := false ;
12642: LD_ADDR_EXP 79
12646: PUSH
12647: LD_INT 0
12649: ST_TO_ADDR
// sPower := false ;
12650: LD_ADDR_EXP 80
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
// sRandom := false ;
12658: LD_ADDR_EXP 81
12662: PUSH
12663: LD_INT 0
12665: ST_TO_ADDR
// sShield := false ;
12666: LD_ADDR_EXP 82
12670: PUSH
12671: LD_INT 0
12673: ST_TO_ADDR
// sTime := false ;
12674: LD_ADDR_EXP 83
12678: PUSH
12679: LD_INT 0
12681: ST_TO_ADDR
// sTools := false ;
12682: LD_ADDR_EXP 84
12686: PUSH
12687: LD_INT 0
12689: ST_TO_ADDR
// sSold := false ;
12690: LD_ADDR_EXP 49
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// sDiff := false ;
12698: LD_ADDR_EXP 50
12702: PUSH
12703: LD_INT 0
12705: ST_TO_ADDR
// sFog := false ;
12706: LD_ADDR_EXP 53
12710: PUSH
12711: LD_INT 0
12713: ST_TO_ADDR
// sReset := false ;
12714: LD_ADDR_EXP 54
12718: PUSH
12719: LD_INT 0
12721: ST_TO_ADDR
// sSun := false ;
12722: LD_ADDR_EXP 55
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// sTiger := false ;
12730: LD_ADDR_EXP 51
12734: PUSH
12735: LD_INT 0
12737: ST_TO_ADDR
// sBomb := false ;
12738: LD_ADDR_EXP 52
12742: PUSH
12743: LD_INT 0
12745: ST_TO_ADDR
// sWound := false ;
12746: LD_ADDR_EXP 60
12750: PUSH
12751: LD_INT 0
12753: ST_TO_ADDR
// sBetray := false ;
12754: LD_ADDR_EXP 64
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// sContamin := false ;
12762: LD_ADDR_EXP 65
12766: PUSH
12767: LD_INT 0
12769: ST_TO_ADDR
// sOil := false ;
12770: LD_ADDR_EXP 67
12774: PUSH
12775: LD_INT 0
12777: ST_TO_ADDR
// sStu := false ;
12778: LD_ADDR_EXP 71
12782: PUSH
12783: LD_INT 0
12785: ST_TO_ADDR
// sBazooka := false ;
12786: LD_ADDR_EXP 74
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// sMortar := false ;
12794: LD_ADDR_EXP 75
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// sRanger := false ;
12802: LD_ADDR_EXP 85
12806: PUSH
12807: LD_INT 0
12809: ST_TO_ADDR
// sComputer := false ;
12810: LD_ADDR_EXP 86
12814: PUSH
12815: LD_INT 0
12817: ST_TO_ADDR
// s30 := false ;
12818: LD_ADDR_EXP 87
12822: PUSH
12823: LD_INT 0
12825: ST_TO_ADDR
// s60 := false ;
12826: LD_ADDR_EXP 88
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// end ;
12834: LD_VAR 0 1
12838: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12839: LD_INT 0
12841: PPUSH
12842: PPUSH
12843: PPUSH
12844: PPUSH
12845: PPUSH
12846: PPUSH
12847: PPUSH
// result := [ ] ;
12848: LD_ADDR_VAR 0 2
12852: PUSH
12853: EMPTY
12854: ST_TO_ADDR
// if campaign_id = 1 then
12855: LD_OWVAR 69
12859: PUSH
12860: LD_INT 1
12862: EQUAL
12863: IFFALSE 16029
// begin case mission_number of 1 :
12865: LD_OWVAR 70
12869: PUSH
12870: LD_INT 1
12872: DOUBLE
12873: EQUAL
12874: IFTRUE 12878
12876: GO 12954
12878: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12879: LD_ADDR_VAR 0 2
12883: PUSH
12884: LD_INT 2
12886: PUSH
12887: LD_INT 4
12889: PUSH
12890: LD_INT 11
12892: PUSH
12893: LD_INT 12
12895: PUSH
12896: LD_INT 15
12898: PUSH
12899: LD_INT 16
12901: PUSH
12902: LD_INT 22
12904: PUSH
12905: LD_INT 23
12907: PUSH
12908: LD_INT 26
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: PUSH
12922: LD_INT 101
12924: PUSH
12925: LD_INT 102
12927: PUSH
12928: LD_INT 106
12930: PUSH
12931: LD_INT 116
12933: PUSH
12934: LD_INT 117
12936: PUSH
12937: LD_INT 118
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: ST_TO_ADDR
12952: GO 16027
12954: LD_INT 2
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 13046
12962: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12963: LD_ADDR_VAR 0 2
12967: PUSH
12968: LD_INT 2
12970: PUSH
12971: LD_INT 4
12973: PUSH
12974: LD_INT 11
12976: PUSH
12977: LD_INT 12
12979: PUSH
12980: LD_INT 15
12982: PUSH
12983: LD_INT 16
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_INT 23
12991: PUSH
12992: LD_INT 26
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: PUSH
13006: LD_INT 101
13008: PUSH
13009: LD_INT 102
13011: PUSH
13012: LD_INT 105
13014: PUSH
13015: LD_INT 106
13017: PUSH
13018: LD_INT 108
13020: PUSH
13021: LD_INT 116
13023: PUSH
13024: LD_INT 117
13026: PUSH
13027: LD_INT 118
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: ST_TO_ADDR
13044: GO 16027
13046: LD_INT 3
13048: DOUBLE
13049: EQUAL
13050: IFTRUE 13054
13052: GO 13142
13054: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13055: LD_ADDR_VAR 0 2
13059: PUSH
13060: LD_INT 2
13062: PUSH
13063: LD_INT 4
13065: PUSH
13066: LD_INT 5
13068: PUSH
13069: LD_INT 11
13071: PUSH
13072: LD_INT 12
13074: PUSH
13075: LD_INT 15
13077: PUSH
13078: LD_INT 16
13080: PUSH
13081: LD_INT 22
13083: PUSH
13084: LD_INT 26
13086: PUSH
13087: LD_INT 36
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 101
13104: PUSH
13105: LD_INT 102
13107: PUSH
13108: LD_INT 105
13110: PUSH
13111: LD_INT 106
13113: PUSH
13114: LD_INT 108
13116: PUSH
13117: LD_INT 116
13119: PUSH
13120: LD_INT 117
13122: PUSH
13123: LD_INT 118
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: ST_TO_ADDR
13140: GO 16027
13142: LD_INT 4
13144: DOUBLE
13145: EQUAL
13146: IFTRUE 13150
13148: GO 13246
13150: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13151: LD_ADDR_VAR 0 2
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: LD_INT 4
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: LD_INT 8
13167: PUSH
13168: LD_INT 11
13170: PUSH
13171: LD_INT 12
13173: PUSH
13174: LD_INT 15
13176: PUSH
13177: LD_INT 16
13179: PUSH
13180: LD_INT 22
13182: PUSH
13183: LD_INT 23
13185: PUSH
13186: LD_INT 26
13188: PUSH
13189: LD_INT 36
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 101
13208: PUSH
13209: LD_INT 102
13211: PUSH
13212: LD_INT 105
13214: PUSH
13215: LD_INT 106
13217: PUSH
13218: LD_INT 108
13220: PUSH
13221: LD_INT 116
13223: PUSH
13224: LD_INT 117
13226: PUSH
13227: LD_INT 118
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: ST_TO_ADDR
13244: GO 16027
13246: LD_INT 5
13248: DOUBLE
13249: EQUAL
13250: IFTRUE 13254
13252: GO 13366
13254: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: LD_INT 4
13265: PUSH
13266: LD_INT 5
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: LD_INT 8
13274: PUSH
13275: LD_INT 11
13277: PUSH
13278: LD_INT 12
13280: PUSH
13281: LD_INT 15
13283: PUSH
13284: LD_INT 16
13286: PUSH
13287: LD_INT 22
13289: PUSH
13290: LD_INT 23
13292: PUSH
13293: LD_INT 25
13295: PUSH
13296: LD_INT 26
13298: PUSH
13299: LD_INT 36
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 101
13320: PUSH
13321: LD_INT 102
13323: PUSH
13324: LD_INT 105
13326: PUSH
13327: LD_INT 106
13329: PUSH
13330: LD_INT 108
13332: PUSH
13333: LD_INT 109
13335: PUSH
13336: LD_INT 112
13338: PUSH
13339: LD_INT 116
13341: PUSH
13342: LD_INT 117
13344: PUSH
13345: LD_INT 118
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: ST_TO_ADDR
13364: GO 16027
13366: LD_INT 6
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13506
13374: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13375: LD_ADDR_VAR 0 2
13379: PUSH
13380: LD_INT 2
13382: PUSH
13383: LD_INT 4
13385: PUSH
13386: LD_INT 5
13388: PUSH
13389: LD_INT 6
13391: PUSH
13392: LD_INT 8
13394: PUSH
13395: LD_INT 11
13397: PUSH
13398: LD_INT 12
13400: PUSH
13401: LD_INT 15
13403: PUSH
13404: LD_INT 16
13406: PUSH
13407: LD_INT 20
13409: PUSH
13410: LD_INT 21
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_INT 23
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 26
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: LD_INT 31
13430: PUSH
13431: LD_INT 32
13433: PUSH
13434: LD_INT 36
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 101
13460: PUSH
13461: LD_INT 102
13463: PUSH
13464: LD_INT 105
13466: PUSH
13467: LD_INT 106
13469: PUSH
13470: LD_INT 108
13472: PUSH
13473: LD_INT 109
13475: PUSH
13476: LD_INT 112
13478: PUSH
13479: LD_INT 116
13481: PUSH
13482: LD_INT 117
13484: PUSH
13485: LD_INT 118
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: ST_TO_ADDR
13504: GO 16027
13506: LD_INT 7
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13626
13514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13515: LD_ADDR_VAR 0 2
13519: PUSH
13520: LD_INT 2
13522: PUSH
13523: LD_INT 4
13525: PUSH
13526: LD_INT 5
13528: PUSH
13529: LD_INT 7
13531: PUSH
13532: LD_INT 11
13534: PUSH
13535: LD_INT 12
13537: PUSH
13538: LD_INT 15
13540: PUSH
13541: LD_INT 16
13543: PUSH
13544: LD_INT 20
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 22
13552: PUSH
13553: LD_INT 23
13555: PUSH
13556: LD_INT 25
13558: PUSH
13559: LD_INT 26
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 101
13580: PUSH
13581: LD_INT 102
13583: PUSH
13584: LD_INT 103
13586: PUSH
13587: LD_INT 105
13589: PUSH
13590: LD_INT 106
13592: PUSH
13593: LD_INT 108
13595: PUSH
13596: LD_INT 112
13598: PUSH
13599: LD_INT 116
13601: PUSH
13602: LD_INT 117
13604: PUSH
13605: LD_INT 118
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: ST_TO_ADDR
13624: GO 16027
13626: LD_INT 8
13628: DOUBLE
13629: EQUAL
13630: IFTRUE 13634
13632: GO 13774
13634: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13635: LD_ADDR_VAR 0 2
13639: PUSH
13640: LD_INT 2
13642: PUSH
13643: LD_INT 4
13645: PUSH
13646: LD_INT 5
13648: PUSH
13649: LD_INT 6
13651: PUSH
13652: LD_INT 7
13654: PUSH
13655: LD_INT 8
13657: PUSH
13658: LD_INT 11
13660: PUSH
13661: LD_INT 12
13663: PUSH
13664: LD_INT 15
13666: PUSH
13667: LD_INT 16
13669: PUSH
13670: LD_INT 20
13672: PUSH
13673: LD_INT 21
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_INT 23
13681: PUSH
13682: LD_INT 25
13684: PUSH
13685: LD_INT 26
13687: PUSH
13688: LD_INT 30
13690: PUSH
13691: LD_INT 31
13693: PUSH
13694: LD_INT 32
13696: PUSH
13697: LD_INT 36
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 101
13724: PUSH
13725: LD_INT 102
13727: PUSH
13728: LD_INT 103
13730: PUSH
13731: LD_INT 105
13733: PUSH
13734: LD_INT 106
13736: PUSH
13737: LD_INT 108
13739: PUSH
13740: LD_INT 109
13742: PUSH
13743: LD_INT 112
13745: PUSH
13746: LD_INT 116
13748: PUSH
13749: LD_INT 117
13751: PUSH
13752: LD_INT 118
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: ST_TO_ADDR
13772: GO 16027
13774: LD_INT 9
13776: DOUBLE
13777: EQUAL
13778: IFTRUE 13782
13780: GO 13930
13782: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13783: LD_ADDR_VAR 0 2
13787: PUSH
13788: LD_INT 2
13790: PUSH
13791: LD_INT 4
13793: PUSH
13794: LD_INT 5
13796: PUSH
13797: LD_INT 6
13799: PUSH
13800: LD_INT 7
13802: PUSH
13803: LD_INT 8
13805: PUSH
13806: LD_INT 11
13808: PUSH
13809: LD_INT 12
13811: PUSH
13812: LD_INT 15
13814: PUSH
13815: LD_INT 16
13817: PUSH
13818: LD_INT 20
13820: PUSH
13821: LD_INT 21
13823: PUSH
13824: LD_INT 22
13826: PUSH
13827: LD_INT 23
13829: PUSH
13830: LD_INT 25
13832: PUSH
13833: LD_INT 26
13835: PUSH
13836: LD_INT 28
13838: PUSH
13839: LD_INT 30
13841: PUSH
13842: LD_INT 31
13844: PUSH
13845: LD_INT 32
13847: PUSH
13848: LD_INT 36
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 101
13876: PUSH
13877: LD_INT 102
13879: PUSH
13880: LD_INT 103
13882: PUSH
13883: LD_INT 105
13885: PUSH
13886: LD_INT 106
13888: PUSH
13889: LD_INT 108
13891: PUSH
13892: LD_INT 109
13894: PUSH
13895: LD_INT 112
13897: PUSH
13898: LD_INT 114
13900: PUSH
13901: LD_INT 116
13903: PUSH
13904: LD_INT 117
13906: PUSH
13907: LD_INT 118
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: ST_TO_ADDR
13928: GO 16027
13930: LD_INT 10
13932: DOUBLE
13933: EQUAL
13934: IFTRUE 13938
13936: GO 14134
13938: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13939: LD_ADDR_VAR 0 2
13943: PUSH
13944: LD_INT 2
13946: PUSH
13947: LD_INT 4
13949: PUSH
13950: LD_INT 5
13952: PUSH
13953: LD_INT 6
13955: PUSH
13956: LD_INT 7
13958: PUSH
13959: LD_INT 8
13961: PUSH
13962: LD_INT 9
13964: PUSH
13965: LD_INT 10
13967: PUSH
13968: LD_INT 11
13970: PUSH
13971: LD_INT 12
13973: PUSH
13974: LD_INT 13
13976: PUSH
13977: LD_INT 14
13979: PUSH
13980: LD_INT 15
13982: PUSH
13983: LD_INT 16
13985: PUSH
13986: LD_INT 17
13988: PUSH
13989: LD_INT 18
13991: PUSH
13992: LD_INT 19
13994: PUSH
13995: LD_INT 20
13997: PUSH
13998: LD_INT 21
14000: PUSH
14001: LD_INT 22
14003: PUSH
14004: LD_INT 23
14006: PUSH
14007: LD_INT 24
14009: PUSH
14010: LD_INT 25
14012: PUSH
14013: LD_INT 26
14015: PUSH
14016: LD_INT 28
14018: PUSH
14019: LD_INT 30
14021: PUSH
14022: LD_INT 31
14024: PUSH
14025: LD_INT 32
14027: PUSH
14028: LD_INT 36
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 101
14064: PUSH
14065: LD_INT 102
14067: PUSH
14068: LD_INT 103
14070: PUSH
14071: LD_INT 104
14073: PUSH
14074: LD_INT 105
14076: PUSH
14077: LD_INT 106
14079: PUSH
14080: LD_INT 107
14082: PUSH
14083: LD_INT 108
14085: PUSH
14086: LD_INT 109
14088: PUSH
14089: LD_INT 110
14091: PUSH
14092: LD_INT 111
14094: PUSH
14095: LD_INT 112
14097: PUSH
14098: LD_INT 114
14100: PUSH
14101: LD_INT 116
14103: PUSH
14104: LD_INT 117
14106: PUSH
14107: LD_INT 118
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
14132: GO 16027
14134: LD_INT 11
14136: DOUBLE
14137: EQUAL
14138: IFTRUE 14142
14140: GO 14346
14142: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14143: LD_ADDR_VAR 0 2
14147: PUSH
14148: LD_INT 2
14150: PUSH
14151: LD_INT 3
14153: PUSH
14154: LD_INT 4
14156: PUSH
14157: LD_INT 5
14159: PUSH
14160: LD_INT 6
14162: PUSH
14163: LD_INT 7
14165: PUSH
14166: LD_INT 8
14168: PUSH
14169: LD_INT 9
14171: PUSH
14172: LD_INT 10
14174: PUSH
14175: LD_INT 11
14177: PUSH
14178: LD_INT 12
14180: PUSH
14181: LD_INT 13
14183: PUSH
14184: LD_INT 14
14186: PUSH
14187: LD_INT 15
14189: PUSH
14190: LD_INT 16
14192: PUSH
14193: LD_INT 17
14195: PUSH
14196: LD_INT 18
14198: PUSH
14199: LD_INT 19
14201: PUSH
14202: LD_INT 20
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 22
14210: PUSH
14211: LD_INT 23
14213: PUSH
14214: LD_INT 24
14216: PUSH
14217: LD_INT 25
14219: PUSH
14220: LD_INT 26
14222: PUSH
14223: LD_INT 28
14225: PUSH
14226: LD_INT 30
14228: PUSH
14229: LD_INT 31
14231: PUSH
14232: LD_INT 32
14234: PUSH
14235: LD_INT 34
14237: PUSH
14238: LD_INT 36
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 101
14276: PUSH
14277: LD_INT 102
14279: PUSH
14280: LD_INT 103
14282: PUSH
14283: LD_INT 104
14285: PUSH
14286: LD_INT 105
14288: PUSH
14289: LD_INT 106
14291: PUSH
14292: LD_INT 107
14294: PUSH
14295: LD_INT 108
14297: PUSH
14298: LD_INT 109
14300: PUSH
14301: LD_INT 110
14303: PUSH
14304: LD_INT 111
14306: PUSH
14307: LD_INT 112
14309: PUSH
14310: LD_INT 114
14312: PUSH
14313: LD_INT 116
14315: PUSH
14316: LD_INT 117
14318: PUSH
14319: LD_INT 118
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: ST_TO_ADDR
14344: GO 16027
14346: LD_INT 12
14348: DOUBLE
14349: EQUAL
14350: IFTRUE 14354
14352: GO 14574
14354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14355: LD_ADDR_VAR 0 2
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: LD_INT 3
14368: PUSH
14369: LD_INT 4
14371: PUSH
14372: LD_INT 5
14374: PUSH
14375: LD_INT 6
14377: PUSH
14378: LD_INT 7
14380: PUSH
14381: LD_INT 8
14383: PUSH
14384: LD_INT 9
14386: PUSH
14387: LD_INT 10
14389: PUSH
14390: LD_INT 11
14392: PUSH
14393: LD_INT 12
14395: PUSH
14396: LD_INT 13
14398: PUSH
14399: LD_INT 14
14401: PUSH
14402: LD_INT 15
14404: PUSH
14405: LD_INT 16
14407: PUSH
14408: LD_INT 17
14410: PUSH
14411: LD_INT 18
14413: PUSH
14414: LD_INT 19
14416: PUSH
14417: LD_INT 20
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 22
14425: PUSH
14426: LD_INT 23
14428: PUSH
14429: LD_INT 24
14431: PUSH
14432: LD_INT 25
14434: PUSH
14435: LD_INT 26
14437: PUSH
14438: LD_INT 27
14440: PUSH
14441: LD_INT 28
14443: PUSH
14444: LD_INT 30
14446: PUSH
14447: LD_INT 31
14449: PUSH
14450: LD_INT 32
14452: PUSH
14453: LD_INT 33
14455: PUSH
14456: LD_INT 34
14458: PUSH
14459: LD_INT 36
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 101
14500: PUSH
14501: LD_INT 102
14503: PUSH
14504: LD_INT 103
14506: PUSH
14507: LD_INT 104
14509: PUSH
14510: LD_INT 105
14512: PUSH
14513: LD_INT 106
14515: PUSH
14516: LD_INT 107
14518: PUSH
14519: LD_INT 108
14521: PUSH
14522: LD_INT 109
14524: PUSH
14525: LD_INT 110
14527: PUSH
14528: LD_INT 111
14530: PUSH
14531: LD_INT 112
14533: PUSH
14534: LD_INT 113
14536: PUSH
14537: LD_INT 114
14539: PUSH
14540: LD_INT 116
14542: PUSH
14543: LD_INT 117
14545: PUSH
14546: LD_INT 118
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: ST_TO_ADDR
14572: GO 16027
14574: LD_INT 13
14576: DOUBLE
14577: EQUAL
14578: IFTRUE 14582
14580: GO 14790
14582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14583: LD_ADDR_VAR 0 2
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: LD_INT 2
14593: PUSH
14594: LD_INT 3
14596: PUSH
14597: LD_INT 4
14599: PUSH
14600: LD_INT 5
14602: PUSH
14603: LD_INT 8
14605: PUSH
14606: LD_INT 9
14608: PUSH
14609: LD_INT 10
14611: PUSH
14612: LD_INT 11
14614: PUSH
14615: LD_INT 12
14617: PUSH
14618: LD_INT 14
14620: PUSH
14621: LD_INT 15
14623: PUSH
14624: LD_INT 16
14626: PUSH
14627: LD_INT 17
14629: PUSH
14630: LD_INT 18
14632: PUSH
14633: LD_INT 19
14635: PUSH
14636: LD_INT 20
14638: PUSH
14639: LD_INT 21
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_INT 23
14647: PUSH
14648: LD_INT 24
14650: PUSH
14651: LD_INT 25
14653: PUSH
14654: LD_INT 26
14656: PUSH
14657: LD_INT 27
14659: PUSH
14660: LD_INT 28
14662: PUSH
14663: LD_INT 30
14665: PUSH
14666: LD_INT 31
14668: PUSH
14669: LD_INT 32
14671: PUSH
14672: LD_INT 33
14674: PUSH
14675: LD_INT 34
14677: PUSH
14678: LD_INT 36
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 101
14716: PUSH
14717: LD_INT 102
14719: PUSH
14720: LD_INT 103
14722: PUSH
14723: LD_INT 104
14725: PUSH
14726: LD_INT 105
14728: PUSH
14729: LD_INT 106
14731: PUSH
14732: LD_INT 107
14734: PUSH
14735: LD_INT 108
14737: PUSH
14738: LD_INT 109
14740: PUSH
14741: LD_INT 110
14743: PUSH
14744: LD_INT 111
14746: PUSH
14747: LD_INT 112
14749: PUSH
14750: LD_INT 113
14752: PUSH
14753: LD_INT 114
14755: PUSH
14756: LD_INT 116
14758: PUSH
14759: LD_INT 117
14761: PUSH
14762: LD_INT 118
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: ST_TO_ADDR
14788: GO 16027
14790: LD_INT 14
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14798
14796: GO 15022
14798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14799: LD_ADDR_VAR 0 2
14803: PUSH
14804: LD_INT 1
14806: PUSH
14807: LD_INT 2
14809: PUSH
14810: LD_INT 3
14812: PUSH
14813: LD_INT 4
14815: PUSH
14816: LD_INT 5
14818: PUSH
14819: LD_INT 6
14821: PUSH
14822: LD_INT 7
14824: PUSH
14825: LD_INT 8
14827: PUSH
14828: LD_INT 9
14830: PUSH
14831: LD_INT 10
14833: PUSH
14834: LD_INT 11
14836: PUSH
14837: LD_INT 12
14839: PUSH
14840: LD_INT 13
14842: PUSH
14843: LD_INT 14
14845: PUSH
14846: LD_INT 15
14848: PUSH
14849: LD_INT 16
14851: PUSH
14852: LD_INT 17
14854: PUSH
14855: LD_INT 18
14857: PUSH
14858: LD_INT 19
14860: PUSH
14861: LD_INT 20
14863: PUSH
14864: LD_INT 21
14866: PUSH
14867: LD_INT 22
14869: PUSH
14870: LD_INT 23
14872: PUSH
14873: LD_INT 24
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 26
14881: PUSH
14882: LD_INT 27
14884: PUSH
14885: LD_INT 28
14887: PUSH
14888: LD_INT 29
14890: PUSH
14891: LD_INT 30
14893: PUSH
14894: LD_INT 31
14896: PUSH
14897: LD_INT 32
14899: PUSH
14900: LD_INT 33
14902: PUSH
14903: LD_INT 34
14905: PUSH
14906: LD_INT 36
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 101
14948: PUSH
14949: LD_INT 102
14951: PUSH
14952: LD_INT 103
14954: PUSH
14955: LD_INT 104
14957: PUSH
14958: LD_INT 105
14960: PUSH
14961: LD_INT 106
14963: PUSH
14964: LD_INT 107
14966: PUSH
14967: LD_INT 108
14969: PUSH
14970: LD_INT 109
14972: PUSH
14973: LD_INT 110
14975: PUSH
14976: LD_INT 111
14978: PUSH
14979: LD_INT 112
14981: PUSH
14982: LD_INT 113
14984: PUSH
14985: LD_INT 114
14987: PUSH
14988: LD_INT 116
14990: PUSH
14991: LD_INT 117
14993: PUSH
14994: LD_INT 118
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: ST_TO_ADDR
15020: GO 16027
15022: LD_INT 15
15024: DOUBLE
15025: EQUAL
15026: IFTRUE 15030
15028: GO 15254
15030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15031: LD_ADDR_VAR 0 2
15035: PUSH
15036: LD_INT 1
15038: PUSH
15039: LD_INT 2
15041: PUSH
15042: LD_INT 3
15044: PUSH
15045: LD_INT 4
15047: PUSH
15048: LD_INT 5
15050: PUSH
15051: LD_INT 6
15053: PUSH
15054: LD_INT 7
15056: PUSH
15057: LD_INT 8
15059: PUSH
15060: LD_INT 9
15062: PUSH
15063: LD_INT 10
15065: PUSH
15066: LD_INT 11
15068: PUSH
15069: LD_INT 12
15071: PUSH
15072: LD_INT 13
15074: PUSH
15075: LD_INT 14
15077: PUSH
15078: LD_INT 15
15080: PUSH
15081: LD_INT 16
15083: PUSH
15084: LD_INT 17
15086: PUSH
15087: LD_INT 18
15089: PUSH
15090: LD_INT 19
15092: PUSH
15093: LD_INT 20
15095: PUSH
15096: LD_INT 21
15098: PUSH
15099: LD_INT 22
15101: PUSH
15102: LD_INT 23
15104: PUSH
15105: LD_INT 24
15107: PUSH
15108: LD_INT 25
15110: PUSH
15111: LD_INT 26
15113: PUSH
15114: LD_INT 27
15116: PUSH
15117: LD_INT 28
15119: PUSH
15120: LD_INT 29
15122: PUSH
15123: LD_INT 30
15125: PUSH
15126: LD_INT 31
15128: PUSH
15129: LD_INT 32
15131: PUSH
15132: LD_INT 33
15134: PUSH
15135: LD_INT 34
15137: PUSH
15138: LD_INT 36
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 101
15180: PUSH
15181: LD_INT 102
15183: PUSH
15184: LD_INT 103
15186: PUSH
15187: LD_INT 104
15189: PUSH
15190: LD_INT 105
15192: PUSH
15193: LD_INT 106
15195: PUSH
15196: LD_INT 107
15198: PUSH
15199: LD_INT 108
15201: PUSH
15202: LD_INT 109
15204: PUSH
15205: LD_INT 110
15207: PUSH
15208: LD_INT 111
15210: PUSH
15211: LD_INT 112
15213: PUSH
15214: LD_INT 113
15216: PUSH
15217: LD_INT 114
15219: PUSH
15220: LD_INT 116
15222: PUSH
15223: LD_INT 117
15225: PUSH
15226: LD_INT 118
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: ST_TO_ADDR
15252: GO 16027
15254: LD_INT 16
15256: DOUBLE
15257: EQUAL
15258: IFTRUE 15262
15260: GO 15398
15262: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15263: LD_ADDR_VAR 0 2
15267: PUSH
15268: LD_INT 2
15270: PUSH
15271: LD_INT 4
15273: PUSH
15274: LD_INT 5
15276: PUSH
15277: LD_INT 7
15279: PUSH
15280: LD_INT 11
15282: PUSH
15283: LD_INT 12
15285: PUSH
15286: LD_INT 15
15288: PUSH
15289: LD_INT 16
15291: PUSH
15292: LD_INT 20
15294: PUSH
15295: LD_INT 21
15297: PUSH
15298: LD_INT 22
15300: PUSH
15301: LD_INT 23
15303: PUSH
15304: LD_INT 25
15306: PUSH
15307: LD_INT 26
15309: PUSH
15310: LD_INT 30
15312: PUSH
15313: LD_INT 31
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: LD_INT 33
15321: PUSH
15322: LD_INT 34
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 101
15348: PUSH
15349: LD_INT 102
15351: PUSH
15352: LD_INT 103
15354: PUSH
15355: LD_INT 106
15357: PUSH
15358: LD_INT 108
15360: PUSH
15361: LD_INT 112
15363: PUSH
15364: LD_INT 113
15366: PUSH
15367: LD_INT 114
15369: PUSH
15370: LD_INT 116
15372: PUSH
15373: LD_INT 117
15375: PUSH
15376: LD_INT 118
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: ST_TO_ADDR
15396: GO 16027
15398: LD_INT 17
15400: DOUBLE
15401: EQUAL
15402: IFTRUE 15406
15404: GO 15630
15406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15407: LD_ADDR_VAR 0 2
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: LD_INT 5
15426: PUSH
15427: LD_INT 6
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 8
15435: PUSH
15436: LD_INT 9
15438: PUSH
15439: LD_INT 10
15441: PUSH
15442: LD_INT 11
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: LD_INT 13
15450: PUSH
15451: LD_INT 14
15453: PUSH
15454: LD_INT 15
15456: PUSH
15457: LD_INT 16
15459: PUSH
15460: LD_INT 17
15462: PUSH
15463: LD_INT 18
15465: PUSH
15466: LD_INT 19
15468: PUSH
15469: LD_INT 20
15471: PUSH
15472: LD_INT 21
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 23
15480: PUSH
15481: LD_INT 24
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 26
15489: PUSH
15490: LD_INT 27
15492: PUSH
15493: LD_INT 28
15495: PUSH
15496: LD_INT 29
15498: PUSH
15499: LD_INT 30
15501: PUSH
15502: LD_INT 31
15504: PUSH
15505: LD_INT 32
15507: PUSH
15508: LD_INT 33
15510: PUSH
15511: LD_INT 34
15513: PUSH
15514: LD_INT 36
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 101
15556: PUSH
15557: LD_INT 102
15559: PUSH
15560: LD_INT 103
15562: PUSH
15563: LD_INT 104
15565: PUSH
15566: LD_INT 105
15568: PUSH
15569: LD_INT 106
15571: PUSH
15572: LD_INT 107
15574: PUSH
15575: LD_INT 108
15577: PUSH
15578: LD_INT 109
15580: PUSH
15581: LD_INT 110
15583: PUSH
15584: LD_INT 111
15586: PUSH
15587: LD_INT 112
15589: PUSH
15590: LD_INT 113
15592: PUSH
15593: LD_INT 114
15595: PUSH
15596: LD_INT 116
15598: PUSH
15599: LD_INT 117
15601: PUSH
15602: LD_INT 118
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: ST_TO_ADDR
15628: GO 16027
15630: LD_INT 18
15632: DOUBLE
15633: EQUAL
15634: IFTRUE 15638
15636: GO 15786
15638: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15639: LD_ADDR_VAR 0 2
15643: PUSH
15644: LD_INT 2
15646: PUSH
15647: LD_INT 4
15649: PUSH
15650: LD_INT 5
15652: PUSH
15653: LD_INT 7
15655: PUSH
15656: LD_INT 11
15658: PUSH
15659: LD_INT 12
15661: PUSH
15662: LD_INT 15
15664: PUSH
15665: LD_INT 16
15667: PUSH
15668: LD_INT 20
15670: PUSH
15671: LD_INT 21
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_INT 23
15679: PUSH
15680: LD_INT 25
15682: PUSH
15683: LD_INT 26
15685: PUSH
15686: LD_INT 30
15688: PUSH
15689: LD_INT 31
15691: PUSH
15692: LD_INT 32
15694: PUSH
15695: LD_INT 33
15697: PUSH
15698: LD_INT 34
15700: PUSH
15701: LD_INT 35
15703: PUSH
15704: LD_INT 36
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 101
15732: PUSH
15733: LD_INT 102
15735: PUSH
15736: LD_INT 103
15738: PUSH
15739: LD_INT 106
15741: PUSH
15742: LD_INT 108
15744: PUSH
15745: LD_INT 112
15747: PUSH
15748: LD_INT 113
15750: PUSH
15751: LD_INT 114
15753: PUSH
15754: LD_INT 115
15756: PUSH
15757: LD_INT 116
15759: PUSH
15760: LD_INT 117
15762: PUSH
15763: LD_INT 118
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: ST_TO_ADDR
15784: GO 16027
15786: LD_INT 19
15788: DOUBLE
15789: EQUAL
15790: IFTRUE 15794
15792: GO 16026
15794: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15795: LD_ADDR_VAR 0 2
15799: PUSH
15800: LD_INT 1
15802: PUSH
15803: LD_INT 2
15805: PUSH
15806: LD_INT 3
15808: PUSH
15809: LD_INT 4
15811: PUSH
15812: LD_INT 5
15814: PUSH
15815: LD_INT 6
15817: PUSH
15818: LD_INT 7
15820: PUSH
15821: LD_INT 8
15823: PUSH
15824: LD_INT 9
15826: PUSH
15827: LD_INT 10
15829: PUSH
15830: LD_INT 11
15832: PUSH
15833: LD_INT 12
15835: PUSH
15836: LD_INT 13
15838: PUSH
15839: LD_INT 14
15841: PUSH
15842: LD_INT 15
15844: PUSH
15845: LD_INT 16
15847: PUSH
15848: LD_INT 17
15850: PUSH
15851: LD_INT 18
15853: PUSH
15854: LD_INT 19
15856: PUSH
15857: LD_INT 20
15859: PUSH
15860: LD_INT 21
15862: PUSH
15863: LD_INT 22
15865: PUSH
15866: LD_INT 23
15868: PUSH
15869: LD_INT 24
15871: PUSH
15872: LD_INT 25
15874: PUSH
15875: LD_INT 26
15877: PUSH
15878: LD_INT 27
15880: PUSH
15881: LD_INT 28
15883: PUSH
15884: LD_INT 29
15886: PUSH
15887: LD_INT 30
15889: PUSH
15890: LD_INT 31
15892: PUSH
15893: LD_INT 32
15895: PUSH
15896: LD_INT 33
15898: PUSH
15899: LD_INT 34
15901: PUSH
15902: LD_INT 35
15904: PUSH
15905: LD_INT 36
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 101
15948: PUSH
15949: LD_INT 102
15951: PUSH
15952: LD_INT 103
15954: PUSH
15955: LD_INT 104
15957: PUSH
15958: LD_INT 105
15960: PUSH
15961: LD_INT 106
15963: PUSH
15964: LD_INT 107
15966: PUSH
15967: LD_INT 108
15969: PUSH
15970: LD_INT 109
15972: PUSH
15973: LD_INT 110
15975: PUSH
15976: LD_INT 111
15978: PUSH
15979: LD_INT 112
15981: PUSH
15982: LD_INT 113
15984: PUSH
15985: LD_INT 114
15987: PUSH
15988: LD_INT 115
15990: PUSH
15991: LD_INT 116
15993: PUSH
15994: LD_INT 117
15996: PUSH
15997: LD_INT 118
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: ST_TO_ADDR
16024: GO 16027
16026: POP
// end else
16027: GO 16258
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16029: LD_ADDR_VAR 0 2
16033: PUSH
16034: LD_INT 1
16036: PUSH
16037: LD_INT 2
16039: PUSH
16040: LD_INT 3
16042: PUSH
16043: LD_INT 4
16045: PUSH
16046: LD_INT 5
16048: PUSH
16049: LD_INT 6
16051: PUSH
16052: LD_INT 7
16054: PUSH
16055: LD_INT 8
16057: PUSH
16058: LD_INT 9
16060: PUSH
16061: LD_INT 10
16063: PUSH
16064: LD_INT 11
16066: PUSH
16067: LD_INT 12
16069: PUSH
16070: LD_INT 13
16072: PUSH
16073: LD_INT 14
16075: PUSH
16076: LD_INT 15
16078: PUSH
16079: LD_INT 16
16081: PUSH
16082: LD_INT 17
16084: PUSH
16085: LD_INT 18
16087: PUSH
16088: LD_INT 19
16090: PUSH
16091: LD_INT 20
16093: PUSH
16094: LD_INT 21
16096: PUSH
16097: LD_INT 22
16099: PUSH
16100: LD_INT 23
16102: PUSH
16103: LD_INT 24
16105: PUSH
16106: LD_INT 25
16108: PUSH
16109: LD_INT 26
16111: PUSH
16112: LD_INT 27
16114: PUSH
16115: LD_INT 28
16117: PUSH
16118: LD_INT 29
16120: PUSH
16121: LD_INT 30
16123: PUSH
16124: LD_INT 31
16126: PUSH
16127: LD_INT 32
16129: PUSH
16130: LD_INT 33
16132: PUSH
16133: LD_INT 34
16135: PUSH
16136: LD_INT 35
16138: PUSH
16139: LD_INT 36
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 101
16182: PUSH
16183: LD_INT 102
16185: PUSH
16186: LD_INT 103
16188: PUSH
16189: LD_INT 104
16191: PUSH
16192: LD_INT 105
16194: PUSH
16195: LD_INT 106
16197: PUSH
16198: LD_INT 107
16200: PUSH
16201: LD_INT 108
16203: PUSH
16204: LD_INT 109
16206: PUSH
16207: LD_INT 110
16209: PUSH
16210: LD_INT 111
16212: PUSH
16213: LD_INT 112
16215: PUSH
16216: LD_INT 113
16218: PUSH
16219: LD_INT 114
16221: PUSH
16222: LD_INT 115
16224: PUSH
16225: LD_INT 116
16227: PUSH
16228: LD_INT 117
16230: PUSH
16231: LD_INT 118
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: ST_TO_ADDR
// if result then
16258: LD_VAR 0 2
16262: IFFALSE 17048
// begin normal :=  ;
16264: LD_ADDR_VAR 0 5
16268: PUSH
16269: LD_STRING 
16271: ST_TO_ADDR
// hardcore :=  ;
16272: LD_ADDR_VAR 0 6
16276: PUSH
16277: LD_STRING 
16279: ST_TO_ADDR
// active :=  ;
16280: LD_ADDR_VAR 0 7
16284: PUSH
16285: LD_STRING 
16287: ST_TO_ADDR
// for i = 1 to normalCounter do
16288: LD_ADDR_VAR 0 8
16292: PUSH
16293: DOUBLE
16294: LD_INT 1
16296: DEC
16297: ST_TO_ADDR
16298: LD_EXP 33
16302: PUSH
16303: FOR_TO
16304: IFFALSE 16405
// begin tmp := 0 ;
16306: LD_ADDR_VAR 0 3
16310: PUSH
16311: LD_STRING 0
16313: ST_TO_ADDR
// if result [ 1 ] then
16314: LD_VAR 0 2
16318: PUSH
16319: LD_INT 1
16321: ARRAY
16322: IFFALSE 16387
// if result [ 1 ] [ 1 ] = i then
16324: LD_VAR 0 2
16328: PUSH
16329: LD_INT 1
16331: ARRAY
16332: PUSH
16333: LD_INT 1
16335: ARRAY
16336: PUSH
16337: LD_VAR 0 8
16341: EQUAL
16342: IFFALSE 16387
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16344: LD_ADDR_VAR 0 2
16348: PUSH
16349: LD_VAR 0 2
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_VAR 0 2
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: LD_INT 1
16368: PPUSH
16369: CALL_OW 3
16373: PPUSH
16374: CALL_OW 1
16378: ST_TO_ADDR
// tmp := 1 ;
16379: LD_ADDR_VAR 0 3
16383: PUSH
16384: LD_STRING 1
16386: ST_TO_ADDR
// end ; normal := normal & tmp ;
16387: LD_ADDR_VAR 0 5
16391: PUSH
16392: LD_VAR 0 5
16396: PUSH
16397: LD_VAR 0 3
16401: STR
16402: ST_TO_ADDR
// end ;
16403: GO 16303
16405: POP
16406: POP
// for i = 1 to hardcoreCounter do
16407: LD_ADDR_VAR 0 8
16411: PUSH
16412: DOUBLE
16413: LD_INT 1
16415: DEC
16416: ST_TO_ADDR
16417: LD_EXP 34
16421: PUSH
16422: FOR_TO
16423: IFFALSE 16528
// begin tmp := 0 ;
16425: LD_ADDR_VAR 0 3
16429: PUSH
16430: LD_STRING 0
16432: ST_TO_ADDR
// if result [ 2 ] then
16433: LD_VAR 0 2
16437: PUSH
16438: LD_INT 2
16440: ARRAY
16441: IFFALSE 16510
// if result [ 2 ] [ 1 ] = 100 + i then
16443: LD_VAR 0 2
16447: PUSH
16448: LD_INT 2
16450: ARRAY
16451: PUSH
16452: LD_INT 1
16454: ARRAY
16455: PUSH
16456: LD_INT 100
16458: PUSH
16459: LD_VAR 0 8
16463: PLUS
16464: EQUAL
16465: IFFALSE 16510
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: LD_VAR 0 2
16476: PPUSH
16477: LD_INT 2
16479: PPUSH
16480: LD_VAR 0 2
16484: PUSH
16485: LD_INT 2
16487: ARRAY
16488: PPUSH
16489: LD_INT 1
16491: PPUSH
16492: CALL_OW 3
16496: PPUSH
16497: CALL_OW 1
16501: ST_TO_ADDR
// tmp := 1 ;
16502: LD_ADDR_VAR 0 3
16506: PUSH
16507: LD_STRING 1
16509: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16510: LD_ADDR_VAR 0 6
16514: PUSH
16515: LD_VAR 0 6
16519: PUSH
16520: LD_VAR 0 3
16524: STR
16525: ST_TO_ADDR
// end ;
16526: GO 16422
16528: POP
16529: POP
// if isGameLoad then
16530: LD_VAR 0 1
16534: IFFALSE 17009
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16536: LD_ADDR_VAR 0 4
16540: PUSH
16541: LD_EXP 37
16545: PUSH
16546: LD_EXP 36
16550: PUSH
16551: LD_EXP 38
16555: PUSH
16556: LD_EXP 35
16560: PUSH
16561: LD_EXP 39
16565: PUSH
16566: LD_EXP 40
16570: PUSH
16571: LD_EXP 41
16575: PUSH
16576: LD_EXP 42
16580: PUSH
16581: LD_EXP 43
16585: PUSH
16586: LD_EXP 44
16590: PUSH
16591: LD_EXP 45
16595: PUSH
16596: LD_EXP 46
16600: PUSH
16601: LD_EXP 47
16605: PUSH
16606: LD_EXP 48
16610: PUSH
16611: LD_EXP 56
16615: PUSH
16616: LD_EXP 57
16620: PUSH
16621: LD_EXP 58
16625: PUSH
16626: LD_EXP 59
16630: PUSH
16631: LD_EXP 61
16635: PUSH
16636: LD_EXP 62
16640: PUSH
16641: LD_EXP 63
16645: PUSH
16646: LD_EXP 66
16650: PUSH
16651: LD_EXP 68
16655: PUSH
16656: LD_EXP 69
16660: PUSH
16661: LD_EXP 70
16665: PUSH
16666: LD_EXP 72
16670: PUSH
16671: LD_EXP 73
16675: PUSH
16676: LD_EXP 76
16680: PUSH
16681: LD_EXP 77
16685: PUSH
16686: LD_EXP 78
16690: PUSH
16691: LD_EXP 79
16695: PUSH
16696: LD_EXP 80
16700: PUSH
16701: LD_EXP 81
16705: PUSH
16706: LD_EXP 82
16710: PUSH
16711: LD_EXP 83
16715: PUSH
16716: LD_EXP 84
16720: PUSH
16721: LD_EXP 49
16725: PUSH
16726: LD_EXP 50
16730: PUSH
16731: LD_EXP 53
16735: PUSH
16736: LD_EXP 54
16740: PUSH
16741: LD_EXP 55
16745: PUSH
16746: LD_EXP 51
16750: PUSH
16751: LD_EXP 52
16755: PUSH
16756: LD_EXP 60
16760: PUSH
16761: LD_EXP 64
16765: PUSH
16766: LD_EXP 65
16770: PUSH
16771: LD_EXP 67
16775: PUSH
16776: LD_EXP 71
16780: PUSH
16781: LD_EXP 74
16785: PUSH
16786: LD_EXP 75
16790: PUSH
16791: LD_EXP 85
16795: PUSH
16796: LD_EXP 86
16800: PUSH
16801: LD_EXP 87
16805: PUSH
16806: LD_EXP 88
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: ST_TO_ADDR
// tmp :=  ;
16867: LD_ADDR_VAR 0 3
16871: PUSH
16872: LD_STRING 
16874: ST_TO_ADDR
// for i = 1 to normalCounter do
16875: LD_ADDR_VAR 0 8
16879: PUSH
16880: DOUBLE
16881: LD_INT 1
16883: DEC
16884: ST_TO_ADDR
16885: LD_EXP 33
16889: PUSH
16890: FOR_TO
16891: IFFALSE 16927
// begin if flags [ i ] then
16893: LD_VAR 0 4
16897: PUSH
16898: LD_VAR 0 8
16902: ARRAY
16903: IFFALSE 16925
// tmp := tmp & i & ; ;
16905: LD_ADDR_VAR 0 3
16909: PUSH
16910: LD_VAR 0 3
16914: PUSH
16915: LD_VAR 0 8
16919: STR
16920: PUSH
16921: LD_STRING ;
16923: STR
16924: ST_TO_ADDR
// end ;
16925: GO 16890
16927: POP
16928: POP
// for i = 1 to hardcoreCounter do
16929: LD_ADDR_VAR 0 8
16933: PUSH
16934: DOUBLE
16935: LD_INT 1
16937: DEC
16938: ST_TO_ADDR
16939: LD_EXP 34
16943: PUSH
16944: FOR_TO
16945: IFFALSE 16991
// begin if flags [ normalCounter + i ] then
16947: LD_VAR 0 4
16951: PUSH
16952: LD_EXP 33
16956: PUSH
16957: LD_VAR 0 8
16961: PLUS
16962: ARRAY
16963: IFFALSE 16989
// tmp := tmp & ( 100 + i ) & ; ;
16965: LD_ADDR_VAR 0 3
16969: PUSH
16970: LD_VAR 0 3
16974: PUSH
16975: LD_INT 100
16977: PUSH
16978: LD_VAR 0 8
16982: PLUS
16983: STR
16984: PUSH
16985: LD_STRING ;
16987: STR
16988: ST_TO_ADDR
// end ;
16989: GO 16944
16991: POP
16992: POP
// if tmp then
16993: LD_VAR 0 3
16997: IFFALSE 17009
// active := tmp ;
16999: LD_ADDR_VAR 0 7
17003: PUSH
17004: LD_VAR 0 3
17008: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17009: LD_STRING getStreamItemsFromMission("
17011: PUSH
17012: LD_VAR 0 5
17016: STR
17017: PUSH
17018: LD_STRING ","
17020: STR
17021: PUSH
17022: LD_VAR 0 6
17026: STR
17027: PUSH
17028: LD_STRING ","
17030: STR
17031: PUSH
17032: LD_VAR 0 7
17036: STR
17037: PUSH
17038: LD_STRING ")
17040: STR
17041: PPUSH
17042: CALL_OW 559
// end else
17046: GO 17055
// ToLua ( getStreamItemsFromMission("","","") ) ;
17048: LD_STRING getStreamItemsFromMission("","","")
17050: PPUSH
17051: CALL_OW 559
// end ;
17055: LD_VAR 0 2
17059: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17060: LD_EXP 32
17064: PUSH
17065: LD_EXP 37
17069: AND
17070: IFFALSE 17194
17072: GO 17074
17074: DISABLE
17075: LD_INT 0
17077: PPUSH
17078: PPUSH
// begin enable ;
17079: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17080: LD_ADDR_VAR 0 2
17084: PUSH
17085: LD_INT 22
17087: PUSH
17088: LD_OWVAR 2
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: LD_INT 34
17102: PUSH
17103: LD_INT 7
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 34
17112: PUSH
17113: LD_INT 45
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 34
17122: PUSH
17123: LD_INT 28
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 34
17132: PUSH
17133: LD_INT 47
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 69
17155: ST_TO_ADDR
// if not tmp then
17156: LD_VAR 0 2
17160: NOT
17161: IFFALSE 17165
// exit ;
17163: GO 17194
// for i in tmp do
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: LD_VAR 0 2
17174: PUSH
17175: FOR_IN
17176: IFFALSE 17192
// begin SetLives ( i , 0 ) ;
17178: LD_VAR 0 1
17182: PPUSH
17183: LD_INT 0
17185: PPUSH
17186: CALL_OW 234
// end ;
17190: GO 17175
17192: POP
17193: POP
// end ;
17194: PPOPN 2
17196: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17197: LD_EXP 32
17201: PUSH
17202: LD_EXP 38
17206: AND
17207: IFFALSE 17291
17209: GO 17211
17211: DISABLE
17212: LD_INT 0
17214: PPUSH
17215: PPUSH
// begin enable ;
17216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17217: LD_ADDR_VAR 0 2
17221: PUSH
17222: LD_INT 22
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 32
17236: PUSH
17237: LD_INT 3
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: ST_TO_ADDR
// if not tmp then
17253: LD_VAR 0 2
17257: NOT
17258: IFFALSE 17262
// exit ;
17260: GO 17291
// for i in tmp do
17262: LD_ADDR_VAR 0 1
17266: PUSH
17267: LD_VAR 0 2
17271: PUSH
17272: FOR_IN
17273: IFFALSE 17289
// begin SetLives ( i , 0 ) ;
17275: LD_VAR 0 1
17279: PPUSH
17280: LD_INT 0
17282: PPUSH
17283: CALL_OW 234
// end ;
17287: GO 17272
17289: POP
17290: POP
// end ;
17291: PPOPN 2
17293: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17294: LD_EXP 32
17298: PUSH
17299: LD_EXP 35
17303: AND
17304: IFFALSE 17397
17306: GO 17308
17308: DISABLE
17309: LD_INT 0
17311: PPUSH
// begin enable ;
17312: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17313: LD_ADDR_VAR 0 1
17317: PUSH
17318: LD_INT 22
17320: PUSH
17321: LD_OWVAR 2
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 2
17332: PUSH
17333: LD_INT 25
17335: PUSH
17336: LD_INT 5
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 25
17345: PUSH
17346: LD_INT 9
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 25
17355: PUSH
17356: LD_INT 8
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PPUSH
17373: CALL_OW 69
17377: PUSH
17378: FOR_IN
17379: IFFALSE 17395
// begin SetClass ( i , 1 ) ;
17381: LD_VAR 0 1
17385: PPUSH
17386: LD_INT 1
17388: PPUSH
17389: CALL_OW 336
// end ;
17393: GO 17378
17395: POP
17396: POP
// end ;
17397: PPOPN 1
17399: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17400: LD_EXP 32
17404: PUSH
17405: LD_EXP 36
17409: AND
17410: PUSH
17411: LD_OWVAR 65
17415: PUSH
17416: LD_INT 7
17418: LESS
17419: AND
17420: IFFALSE 17434
17422: GO 17424
17424: DISABLE
// begin enable ;
17425: ENABLE
// game_speed := 7 ;
17426: LD_ADDR_OWVAR 65
17430: PUSH
17431: LD_INT 7
17433: ST_TO_ADDR
// end ;
17434: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17435: LD_EXP 32
17439: PUSH
17440: LD_EXP 39
17444: AND
17445: IFFALSE 17647
17447: GO 17449
17449: DISABLE
17450: LD_INT 0
17452: PPUSH
17453: PPUSH
17454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17455: LD_ADDR_VAR 0 3
17459: PUSH
17460: LD_INT 81
17462: PUSH
17463: LD_OWVAR 2
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 21
17474: PUSH
17475: LD_INT 1
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PPUSH
17486: CALL_OW 69
17490: ST_TO_ADDR
// if not tmp then
17491: LD_VAR 0 3
17495: NOT
17496: IFFALSE 17500
// exit ;
17498: GO 17647
// if tmp > 5 then
17500: LD_VAR 0 3
17504: PUSH
17505: LD_INT 5
17507: GREATER
17508: IFFALSE 17520
// k := 5 else
17510: LD_ADDR_VAR 0 2
17514: PUSH
17515: LD_INT 5
17517: ST_TO_ADDR
17518: GO 17530
// k := tmp ;
17520: LD_ADDR_VAR 0 2
17524: PUSH
17525: LD_VAR 0 3
17529: ST_TO_ADDR
// for i := 1 to k do
17530: LD_ADDR_VAR 0 1
17534: PUSH
17535: DOUBLE
17536: LD_INT 1
17538: DEC
17539: ST_TO_ADDR
17540: LD_VAR 0 2
17544: PUSH
17545: FOR_TO
17546: IFFALSE 17645
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17548: LD_VAR 0 3
17552: PUSH
17553: LD_VAR 0 1
17557: ARRAY
17558: PPUSH
17559: LD_VAR 0 1
17563: PUSH
17564: LD_INT 4
17566: MOD
17567: PUSH
17568: LD_INT 1
17570: PLUS
17571: PPUSH
17572: CALL_OW 259
17576: PUSH
17577: LD_INT 10
17579: LESS
17580: IFFALSE 17643
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17582: LD_VAR 0 3
17586: PUSH
17587: LD_VAR 0 1
17591: ARRAY
17592: PPUSH
17593: LD_VAR 0 1
17597: PUSH
17598: LD_INT 4
17600: MOD
17601: PUSH
17602: LD_INT 1
17604: PLUS
17605: PPUSH
17606: LD_VAR 0 3
17610: PUSH
17611: LD_VAR 0 1
17615: ARRAY
17616: PPUSH
17617: LD_VAR 0 1
17621: PUSH
17622: LD_INT 4
17624: MOD
17625: PUSH
17626: LD_INT 1
17628: PLUS
17629: PPUSH
17630: CALL_OW 259
17634: PUSH
17635: LD_INT 1
17637: PLUS
17638: PPUSH
17639: CALL_OW 237
17643: GO 17545
17645: POP
17646: POP
// end ;
17647: PPOPN 3
17649: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17650: LD_EXP 32
17654: PUSH
17655: LD_EXP 40
17659: AND
17660: IFFALSE 17680
17662: GO 17664
17664: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17665: LD_INT 4
17667: PPUSH
17668: LD_OWVAR 2
17672: PPUSH
17673: LD_INT 0
17675: PPUSH
17676: CALL_OW 324
17680: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17681: LD_EXP 32
17685: PUSH
17686: LD_EXP 69
17690: AND
17691: IFFALSE 17711
17693: GO 17695
17695: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17696: LD_INT 19
17698: PPUSH
17699: LD_OWVAR 2
17703: PPUSH
17704: LD_INT 0
17706: PPUSH
17707: CALL_OW 324
17711: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17712: LD_EXP 32
17716: PUSH
17717: LD_EXP 41
17721: AND
17722: IFFALSE 17824
17724: GO 17726
17726: DISABLE
17727: LD_INT 0
17729: PPUSH
17730: PPUSH
// begin enable ;
17731: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17732: LD_ADDR_VAR 0 2
17736: PUSH
17737: LD_INT 22
17739: PUSH
17740: LD_OWVAR 2
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 2
17751: PUSH
17752: LD_INT 34
17754: PUSH
17755: LD_INT 11
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 34
17764: PUSH
17765: LD_INT 30
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PPUSH
17781: CALL_OW 69
17785: ST_TO_ADDR
// if not tmp then
17786: LD_VAR 0 2
17790: NOT
17791: IFFALSE 17795
// exit ;
17793: GO 17824
// for i in tmp do
17795: LD_ADDR_VAR 0 1
17799: PUSH
17800: LD_VAR 0 2
17804: PUSH
17805: FOR_IN
17806: IFFALSE 17822
// begin SetLives ( i , 0 ) ;
17808: LD_VAR 0 1
17812: PPUSH
17813: LD_INT 0
17815: PPUSH
17816: CALL_OW 234
// end ;
17820: GO 17805
17822: POP
17823: POP
// end ;
17824: PPOPN 2
17826: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17827: LD_EXP 32
17831: PUSH
17832: LD_EXP 42
17836: AND
17837: IFFALSE 17857
17839: GO 17841
17841: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17842: LD_INT 32
17844: PPUSH
17845: LD_OWVAR 2
17849: PPUSH
17850: LD_INT 0
17852: PPUSH
17853: CALL_OW 324
17857: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17858: LD_EXP 32
17862: PUSH
17863: LD_EXP 43
17867: AND
17868: IFFALSE 18049
17870: GO 17872
17872: DISABLE
17873: LD_INT 0
17875: PPUSH
17876: PPUSH
17877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: LD_INT 22
17885: PUSH
17886: LD_OWVAR 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 33
17897: PUSH
17898: LD_INT 3
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: ST_TO_ADDR
// if not tmp then
17914: LD_VAR 0 2
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 18049
// side := 0 ;
17923: LD_ADDR_VAR 0 3
17927: PUSH
17928: LD_INT 0
17930: ST_TO_ADDR
// for i := 1 to 8 do
17931: LD_ADDR_VAR 0 1
17935: PUSH
17936: DOUBLE
17937: LD_INT 1
17939: DEC
17940: ST_TO_ADDR
17941: LD_INT 8
17943: PUSH
17944: FOR_TO
17945: IFFALSE 17993
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17947: LD_OWVAR 2
17951: PUSH
17952: LD_VAR 0 1
17956: NONEQUAL
17957: PUSH
17958: LD_OWVAR 2
17962: PPUSH
17963: LD_VAR 0 1
17967: PPUSH
17968: CALL_OW 81
17972: PUSH
17973: LD_INT 2
17975: EQUAL
17976: AND
17977: IFFALSE 17991
// begin side := i ;
17979: LD_ADDR_VAR 0 3
17983: PUSH
17984: LD_VAR 0 1
17988: ST_TO_ADDR
// break ;
17989: GO 17993
// end ;
17991: GO 17944
17993: POP
17994: POP
// if not side then
17995: LD_VAR 0 3
17999: NOT
18000: IFFALSE 18004
// exit ;
18002: GO 18049
// for i := 1 to tmp do
18004: LD_ADDR_VAR 0 1
18008: PUSH
18009: DOUBLE
18010: LD_INT 1
18012: DEC
18013: ST_TO_ADDR
18014: LD_VAR 0 2
18018: PUSH
18019: FOR_TO
18020: IFFALSE 18047
// if Prob ( 60 ) then
18022: LD_INT 60
18024: PPUSH
18025: CALL_OW 13
18029: IFFALSE 18045
// SetSide ( i , side ) ;
18031: LD_VAR 0 1
18035: PPUSH
18036: LD_VAR 0 3
18040: PPUSH
18041: CALL_OW 235
18045: GO 18019
18047: POP
18048: POP
// end ;
18049: PPOPN 3
18051: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18052: LD_EXP 32
18056: PUSH
18057: LD_EXP 45
18061: AND
18062: IFFALSE 18181
18064: GO 18066
18066: DISABLE
18067: LD_INT 0
18069: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18070: LD_ADDR_VAR 0 1
18074: PUSH
18075: LD_INT 22
18077: PUSH
18078: LD_OWVAR 2
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 21
18089: PUSH
18090: LD_INT 1
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 3
18099: PUSH
18100: LD_INT 23
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: LIST
18118: PPUSH
18119: CALL_OW 69
18123: PUSH
18124: FOR_IN
18125: IFFALSE 18179
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 257
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: LD_INT 2
18142: PUSH
18143: LD_INT 3
18145: PUSH
18146: LD_INT 4
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: IN
18155: IFFALSE 18177
// SetClass ( un , rand ( 1 , 4 ) ) ;
18157: LD_VAR 0 1
18161: PPUSH
18162: LD_INT 1
18164: PPUSH
18165: LD_INT 4
18167: PPUSH
18168: CALL_OW 12
18172: PPUSH
18173: CALL_OW 336
18177: GO 18124
18179: POP
18180: POP
// end ;
18181: PPOPN 1
18183: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18184: LD_EXP 32
18188: PUSH
18189: LD_EXP 44
18193: AND
18194: IFFALSE 18273
18196: GO 18198
18198: DISABLE
18199: LD_INT 0
18201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18202: LD_ADDR_VAR 0 1
18206: PUSH
18207: LD_INT 22
18209: PUSH
18210: LD_OWVAR 2
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 21
18221: PUSH
18222: LD_INT 3
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PPUSH
18233: CALL_OW 69
18237: ST_TO_ADDR
// if not tmp then
18238: LD_VAR 0 1
18242: NOT
18243: IFFALSE 18247
// exit ;
18245: GO 18273
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18247: LD_VAR 0 1
18251: PUSH
18252: LD_INT 1
18254: PPUSH
18255: LD_VAR 0 1
18259: PPUSH
18260: CALL_OW 12
18264: ARRAY
18265: PPUSH
18266: LD_INT 100
18268: PPUSH
18269: CALL_OW 234
// end ;
18273: PPOPN 1
18275: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18276: LD_EXP 32
18280: PUSH
18281: LD_EXP 46
18285: AND
18286: IFFALSE 18384
18288: GO 18290
18290: DISABLE
18291: LD_INT 0
18293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18294: LD_ADDR_VAR 0 1
18298: PUSH
18299: LD_INT 22
18301: PUSH
18302: LD_OWVAR 2
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 21
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PPUSH
18325: CALL_OW 69
18329: ST_TO_ADDR
// if not tmp then
18330: LD_VAR 0 1
18334: NOT
18335: IFFALSE 18339
// exit ;
18337: GO 18384
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18339: LD_VAR 0 1
18343: PUSH
18344: LD_INT 1
18346: PPUSH
18347: LD_VAR 0 1
18351: PPUSH
18352: CALL_OW 12
18356: ARRAY
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: LD_INT 4
18363: PPUSH
18364: CALL_OW 12
18368: PPUSH
18369: LD_INT 3000
18371: PPUSH
18372: LD_INT 9000
18374: PPUSH
18375: CALL_OW 12
18379: PPUSH
18380: CALL_OW 492
// end ;
18384: PPOPN 1
18386: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18387: LD_EXP 32
18391: PUSH
18392: LD_EXP 47
18396: AND
18397: IFFALSE 18417
18399: GO 18401
18401: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18402: LD_INT 1
18404: PPUSH
18405: LD_OWVAR 2
18409: PPUSH
18410: LD_INT 0
18412: PPUSH
18413: CALL_OW 324
18417: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18418: LD_EXP 32
18422: PUSH
18423: LD_EXP 48
18427: AND
18428: IFFALSE 18511
18430: GO 18432
18432: DISABLE
18433: LD_INT 0
18435: PPUSH
18436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18437: LD_ADDR_VAR 0 2
18441: PUSH
18442: LD_INT 22
18444: PUSH
18445: LD_OWVAR 2
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 21
18456: PUSH
18457: LD_INT 3
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PPUSH
18468: CALL_OW 69
18472: ST_TO_ADDR
// if not tmp then
18473: LD_VAR 0 2
18477: NOT
18478: IFFALSE 18482
// exit ;
18480: GO 18511
// for i in tmp do
18482: LD_ADDR_VAR 0 1
18486: PUSH
18487: LD_VAR 0 2
18491: PUSH
18492: FOR_IN
18493: IFFALSE 18509
// SetBLevel ( i , 10 ) ;
18495: LD_VAR 0 1
18499: PPUSH
18500: LD_INT 10
18502: PPUSH
18503: CALL_OW 241
18507: GO 18492
18509: POP
18510: POP
// end ;
18511: PPOPN 2
18513: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18514: LD_EXP 32
18518: PUSH
18519: LD_EXP 49
18523: AND
18524: IFFALSE 18635
18526: GO 18528
18528: DISABLE
18529: LD_INT 0
18531: PPUSH
18532: PPUSH
18533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_INT 22
18541: PUSH
18542: LD_OWVAR 2
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 25
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PPUSH
18565: CALL_OW 69
18569: ST_TO_ADDR
// if not tmp then
18570: LD_VAR 0 3
18574: NOT
18575: IFFALSE 18579
// exit ;
18577: GO 18635
// un := tmp [ rand ( 1 , tmp ) ] ;
18579: LD_ADDR_VAR 0 2
18583: PUSH
18584: LD_VAR 0 3
18588: PUSH
18589: LD_INT 1
18591: PPUSH
18592: LD_VAR 0 3
18596: PPUSH
18597: CALL_OW 12
18601: ARRAY
18602: ST_TO_ADDR
// if Crawls ( un ) then
18603: LD_VAR 0 2
18607: PPUSH
18608: CALL_OW 318
18612: IFFALSE 18623
// ComWalk ( un ) ;
18614: LD_VAR 0 2
18618: PPUSH
18619: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18623: LD_VAR 0 2
18627: PPUSH
18628: LD_INT 5
18630: PPUSH
18631: CALL_OW 336
// end ;
18635: PPOPN 3
18637: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18638: LD_EXP 32
18642: PUSH
18643: LD_EXP 50
18647: AND
18648: PUSH
18649: LD_OWVAR 67
18653: PUSH
18654: LD_INT 4
18656: LESS
18657: AND
18658: IFFALSE 18677
18660: GO 18662
18662: DISABLE
// begin Difficulty := Difficulty + 1 ;
18663: LD_ADDR_OWVAR 67
18667: PUSH
18668: LD_OWVAR 67
18672: PUSH
18673: LD_INT 1
18675: PLUS
18676: ST_TO_ADDR
// end ;
18677: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18678: LD_EXP 32
18682: PUSH
18683: LD_EXP 51
18687: AND
18688: IFFALSE 18791
18690: GO 18692
18692: DISABLE
18693: LD_INT 0
18695: PPUSH
// begin for i := 1 to 5 do
18696: LD_ADDR_VAR 0 1
18700: PUSH
18701: DOUBLE
18702: LD_INT 1
18704: DEC
18705: ST_TO_ADDR
18706: LD_INT 5
18708: PUSH
18709: FOR_TO
18710: IFFALSE 18789
// begin uc_nation := nation_nature ;
18712: LD_ADDR_OWVAR 21
18716: PUSH
18717: LD_INT 0
18719: ST_TO_ADDR
// uc_side := 0 ;
18720: LD_ADDR_OWVAR 20
18724: PUSH
18725: LD_INT 0
18727: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18728: LD_ADDR_OWVAR 29
18732: PUSH
18733: LD_INT 12
18735: PUSH
18736: LD_INT 12
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: ST_TO_ADDR
// hc_agressivity := 20 ;
18743: LD_ADDR_OWVAR 35
18747: PUSH
18748: LD_INT 20
18750: ST_TO_ADDR
// hc_class := class_tiger ;
18751: LD_ADDR_OWVAR 28
18755: PUSH
18756: LD_INT 14
18758: ST_TO_ADDR
// hc_gallery :=  ;
18759: LD_ADDR_OWVAR 33
18763: PUSH
18764: LD_STRING 
18766: ST_TO_ADDR
// hc_name :=  ;
18767: LD_ADDR_OWVAR 26
18771: PUSH
18772: LD_STRING 
18774: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18775: CALL_OW 44
18779: PPUSH
18780: LD_INT 0
18782: PPUSH
18783: CALL_OW 51
// end ;
18787: GO 18709
18789: POP
18790: POP
// end ;
18791: PPOPN 1
18793: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18794: LD_EXP 32
18798: PUSH
18799: LD_EXP 52
18803: AND
18804: IFFALSE 18813
18806: GO 18808
18808: DISABLE
// StreamSibBomb ;
18809: CALL 18814 0 0
18813: END
// export function StreamSibBomb ; var i , x , y ; begin
18814: LD_INT 0
18816: PPUSH
18817: PPUSH
18818: PPUSH
18819: PPUSH
// result := false ;
18820: LD_ADDR_VAR 0 1
18824: PUSH
18825: LD_INT 0
18827: ST_TO_ADDR
// for i := 1 to 16 do
18828: LD_ADDR_VAR 0 2
18832: PUSH
18833: DOUBLE
18834: LD_INT 1
18836: DEC
18837: ST_TO_ADDR
18838: LD_INT 16
18840: PUSH
18841: FOR_TO
18842: IFFALSE 19041
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18844: LD_ADDR_VAR 0 3
18848: PUSH
18849: LD_INT 10
18851: PUSH
18852: LD_INT 20
18854: PUSH
18855: LD_INT 30
18857: PUSH
18858: LD_INT 40
18860: PUSH
18861: LD_INT 50
18863: PUSH
18864: LD_INT 60
18866: PUSH
18867: LD_INT 70
18869: PUSH
18870: LD_INT 80
18872: PUSH
18873: LD_INT 90
18875: PUSH
18876: LD_INT 100
18878: PUSH
18879: LD_INT 110
18881: PUSH
18882: LD_INT 120
18884: PUSH
18885: LD_INT 130
18887: PUSH
18888: LD_INT 140
18890: PUSH
18891: LD_INT 150
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: PPUSH
18914: LD_INT 15
18916: PPUSH
18917: CALL_OW 12
18921: ARRAY
18922: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18923: LD_ADDR_VAR 0 4
18927: PUSH
18928: LD_INT 10
18930: PUSH
18931: LD_INT 20
18933: PUSH
18934: LD_INT 30
18936: PUSH
18937: LD_INT 40
18939: PUSH
18940: LD_INT 50
18942: PUSH
18943: LD_INT 60
18945: PUSH
18946: LD_INT 70
18948: PUSH
18949: LD_INT 80
18951: PUSH
18952: LD_INT 90
18954: PUSH
18955: LD_INT 100
18957: PUSH
18958: LD_INT 110
18960: PUSH
18961: LD_INT 120
18963: PUSH
18964: LD_INT 130
18966: PUSH
18967: LD_INT 140
18969: PUSH
18970: LD_INT 150
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: PPUSH
18993: LD_INT 15
18995: PPUSH
18996: CALL_OW 12
19000: ARRAY
19001: ST_TO_ADDR
// if ValidHex ( x , y ) then
19002: LD_VAR 0 3
19006: PPUSH
19007: LD_VAR 0 4
19011: PPUSH
19012: CALL_OW 488
19016: IFFALSE 19039
// begin result := [ x , y ] ;
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_VAR 0 3
19027: PUSH
19028: LD_VAR 0 4
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: ST_TO_ADDR
// break ;
19037: GO 19041
// end ; end ;
19039: GO 18841
19041: POP
19042: POP
// if result then
19043: LD_VAR 0 1
19047: IFFALSE 19107
// begin ToLua ( playSibBomb() ) ;
19049: LD_STRING playSibBomb()
19051: PPUSH
19052: CALL_OW 559
// wait ( 0 0$14 ) ;
19056: LD_INT 490
19058: PPUSH
19059: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19063: LD_VAR 0 1
19067: PUSH
19068: LD_INT 1
19070: ARRAY
19071: PPUSH
19072: LD_VAR 0 1
19076: PUSH
19077: LD_INT 2
19079: ARRAY
19080: PPUSH
19081: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19085: LD_VAR 0 1
19089: PUSH
19090: LD_INT 1
19092: ARRAY
19093: PPUSH
19094: LD_VAR 0 1
19098: PUSH
19099: LD_INT 2
19101: ARRAY
19102: PPUSH
19103: CALL_OW 429
// end ; end ;
19107: LD_VAR 0 1
19111: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19112: LD_EXP 32
19116: PUSH
19117: LD_EXP 54
19121: AND
19122: IFFALSE 19134
19124: GO 19126
19126: DISABLE
// YouLost (  ) ;
19127: LD_STRING 
19129: PPUSH
19130: CALL_OW 104
19134: END
// every 0 0$1 trigger StreamModeActive and sFog do
19135: LD_EXP 32
19139: PUSH
19140: LD_EXP 53
19144: AND
19145: IFFALSE 19159
19147: GO 19149
19149: DISABLE
// FogOff ( your_side ) ;
19150: LD_OWVAR 2
19154: PPUSH
19155: CALL_OW 344
19159: END
// every 0 0$1 trigger StreamModeActive and sSun do
19160: LD_EXP 32
19164: PUSH
19165: LD_EXP 55
19169: AND
19170: IFFALSE 19198
19172: GO 19174
19174: DISABLE
// begin solar_recharge_percent := 0 ;
19175: LD_ADDR_OWVAR 79
19179: PUSH
19180: LD_INT 0
19182: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19183: LD_INT 10500
19185: PPUSH
19186: CALL_OW 67
// solar_recharge_percent := 100 ;
19190: LD_ADDR_OWVAR 79
19194: PUSH
19195: LD_INT 100
19197: ST_TO_ADDR
// end ;
19198: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19199: LD_EXP 32
19203: PUSH
19204: LD_EXP 56
19208: AND
19209: IFFALSE 19448
19211: GO 19213
19213: DISABLE
19214: LD_INT 0
19216: PPUSH
19217: PPUSH
19218: PPUSH
// begin tmp := [ ] ;
19219: LD_ADDR_VAR 0 3
19223: PUSH
19224: EMPTY
19225: ST_TO_ADDR
// for i := 1 to 6 do
19226: LD_ADDR_VAR 0 1
19230: PUSH
19231: DOUBLE
19232: LD_INT 1
19234: DEC
19235: ST_TO_ADDR
19236: LD_INT 6
19238: PUSH
19239: FOR_TO
19240: IFFALSE 19345
// begin uc_nation := nation_nature ;
19242: LD_ADDR_OWVAR 21
19246: PUSH
19247: LD_INT 0
19249: ST_TO_ADDR
// uc_side := 0 ;
19250: LD_ADDR_OWVAR 20
19254: PUSH
19255: LD_INT 0
19257: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19258: LD_ADDR_OWVAR 29
19262: PUSH
19263: LD_INT 12
19265: PUSH
19266: LD_INT 12
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: ST_TO_ADDR
// hc_agressivity := 20 ;
19273: LD_ADDR_OWVAR 35
19277: PUSH
19278: LD_INT 20
19280: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19281: LD_ADDR_OWVAR 28
19285: PUSH
19286: LD_INT 17
19288: ST_TO_ADDR
// hc_gallery :=  ;
19289: LD_ADDR_OWVAR 33
19293: PUSH
19294: LD_STRING 
19296: ST_TO_ADDR
// hc_name :=  ;
19297: LD_ADDR_OWVAR 26
19301: PUSH
19302: LD_STRING 
19304: ST_TO_ADDR
// un := CreateHuman ;
19305: LD_ADDR_VAR 0 2
19309: PUSH
19310: CALL_OW 44
19314: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19315: LD_VAR 0 2
19319: PPUSH
19320: LD_INT 1
19322: PPUSH
19323: CALL_OW 51
// tmp := tmp ^ un ;
19327: LD_ADDR_VAR 0 3
19331: PUSH
19332: LD_VAR 0 3
19336: PUSH
19337: LD_VAR 0 2
19341: ADD
19342: ST_TO_ADDR
// end ;
19343: GO 19239
19345: POP
19346: POP
// repeat wait ( 0 0$1 ) ;
19347: LD_INT 35
19349: PPUSH
19350: CALL_OW 67
// for un in tmp do
19354: LD_ADDR_VAR 0 2
19358: PUSH
19359: LD_VAR 0 3
19363: PUSH
19364: FOR_IN
19365: IFFALSE 19439
// begin if IsDead ( un ) then
19367: LD_VAR 0 2
19371: PPUSH
19372: CALL_OW 301
19376: IFFALSE 19396
// begin tmp := tmp diff un ;
19378: LD_ADDR_VAR 0 3
19382: PUSH
19383: LD_VAR 0 3
19387: PUSH
19388: LD_VAR 0 2
19392: DIFF
19393: ST_TO_ADDR
// continue ;
19394: GO 19364
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19396: LD_VAR 0 2
19400: PPUSH
19401: LD_INT 3
19403: PUSH
19404: LD_INT 22
19406: PUSH
19407: LD_INT 0
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PPUSH
19418: CALL_OW 69
19422: PPUSH
19423: LD_VAR 0 2
19427: PPUSH
19428: CALL_OW 74
19432: PPUSH
19433: CALL_OW 115
// end ;
19437: GO 19364
19439: POP
19440: POP
// until not tmp ;
19441: LD_VAR 0 3
19445: NOT
19446: IFFALSE 19347
// end ;
19448: PPOPN 3
19450: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19451: LD_EXP 32
19455: PUSH
19456: LD_EXP 57
19460: AND
19461: IFFALSE 19515
19463: GO 19465
19465: DISABLE
// begin ToLua ( displayTroll(); ) ;
19466: LD_STRING displayTroll();
19468: PPUSH
19469: CALL_OW 559
// wait ( 3 3$00 ) ;
19473: LD_INT 6300
19475: PPUSH
19476: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19480: LD_STRING hideTroll();
19482: PPUSH
19483: CALL_OW 559
// wait ( 1 1$00 ) ;
19487: LD_INT 2100
19489: PPUSH
19490: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19494: LD_STRING displayTroll();
19496: PPUSH
19497: CALL_OW 559
// wait ( 1 1$00 ) ;
19501: LD_INT 2100
19503: PPUSH
19504: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19508: LD_STRING hideTroll();
19510: PPUSH
19511: CALL_OW 559
// end ;
19515: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19516: LD_EXP 32
19520: PUSH
19521: LD_EXP 58
19525: AND
19526: IFFALSE 19589
19528: GO 19530
19530: DISABLE
19531: LD_INT 0
19533: PPUSH
// begin p := 0 ;
19534: LD_ADDR_VAR 0 1
19538: PUSH
19539: LD_INT 0
19541: ST_TO_ADDR
// repeat game_speed := 1 ;
19542: LD_ADDR_OWVAR 65
19546: PUSH
19547: LD_INT 1
19549: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19550: LD_INT 35
19552: PPUSH
19553: CALL_OW 67
// p := p + 1 ;
19557: LD_ADDR_VAR 0 1
19561: PUSH
19562: LD_VAR 0 1
19566: PUSH
19567: LD_INT 1
19569: PLUS
19570: ST_TO_ADDR
// until p >= 60 ;
19571: LD_VAR 0 1
19575: PUSH
19576: LD_INT 60
19578: GREATEREQUAL
19579: IFFALSE 19542
// game_speed := 4 ;
19581: LD_ADDR_OWVAR 65
19585: PUSH
19586: LD_INT 4
19588: ST_TO_ADDR
// end ;
19589: PPOPN 1
19591: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19592: LD_EXP 32
19596: PUSH
19597: LD_EXP 59
19601: AND
19602: IFFALSE 19748
19604: GO 19606
19606: DISABLE
19607: LD_INT 0
19609: PPUSH
19610: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19611: LD_ADDR_VAR 0 1
19615: PUSH
19616: LD_INT 22
19618: PUSH
19619: LD_OWVAR 2
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 2
19630: PUSH
19631: LD_INT 30
19633: PUSH
19634: LD_INT 0
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 30
19643: PUSH
19644: LD_INT 1
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PPUSH
19660: CALL_OW 69
19664: ST_TO_ADDR
// if not depot then
19665: LD_VAR 0 1
19669: NOT
19670: IFFALSE 19674
// exit ;
19672: GO 19748
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19674: LD_ADDR_VAR 0 2
19678: PUSH
19679: LD_VAR 0 1
19683: PUSH
19684: LD_INT 1
19686: PPUSH
19687: LD_VAR 0 1
19691: PPUSH
19692: CALL_OW 12
19696: ARRAY
19697: PPUSH
19698: CALL_OW 274
19702: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19703: LD_VAR 0 2
19707: PPUSH
19708: LD_INT 1
19710: PPUSH
19711: LD_INT 0
19713: PPUSH
19714: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19718: LD_VAR 0 2
19722: PPUSH
19723: LD_INT 2
19725: PPUSH
19726: LD_INT 0
19728: PPUSH
19729: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19733: LD_VAR 0 2
19737: PPUSH
19738: LD_INT 3
19740: PPUSH
19741: LD_INT 0
19743: PPUSH
19744: CALL_OW 277
// end ;
19748: PPOPN 2
19750: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19751: LD_EXP 32
19755: PUSH
19756: LD_EXP 60
19760: AND
19761: IFFALSE 19858
19763: GO 19765
19765: DISABLE
19766: LD_INT 0
19768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19769: LD_ADDR_VAR 0 1
19773: PUSH
19774: LD_INT 22
19776: PUSH
19777: LD_OWVAR 2
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 21
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 3
19798: PUSH
19799: LD_INT 23
19801: PUSH
19802: LD_INT 0
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: PPUSH
19818: CALL_OW 69
19822: ST_TO_ADDR
// if not tmp then
19823: LD_VAR 0 1
19827: NOT
19828: IFFALSE 19832
// exit ;
19830: GO 19858
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19832: LD_VAR 0 1
19836: PUSH
19837: LD_INT 1
19839: PPUSH
19840: LD_VAR 0 1
19844: PPUSH
19845: CALL_OW 12
19849: ARRAY
19850: PPUSH
19851: LD_INT 200
19853: PPUSH
19854: CALL_OW 234
// end ;
19858: PPOPN 1
19860: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19861: LD_EXP 32
19865: PUSH
19866: LD_EXP 61
19870: AND
19871: IFFALSE 19950
19873: GO 19875
19875: DISABLE
19876: LD_INT 0
19878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19879: LD_ADDR_VAR 0 1
19883: PUSH
19884: LD_INT 22
19886: PUSH
19887: LD_OWVAR 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 21
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PPUSH
19910: CALL_OW 69
19914: ST_TO_ADDR
// if not tmp then
19915: LD_VAR 0 1
19919: NOT
19920: IFFALSE 19924
// exit ;
19922: GO 19950
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19924: LD_VAR 0 1
19928: PUSH
19929: LD_INT 1
19931: PPUSH
19932: LD_VAR 0 1
19936: PPUSH
19937: CALL_OW 12
19941: ARRAY
19942: PPUSH
19943: LD_INT 60
19945: PPUSH
19946: CALL_OW 234
// end ;
19950: PPOPN 1
19952: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19953: LD_EXP 32
19957: PUSH
19958: LD_EXP 62
19962: AND
19963: IFFALSE 20062
19965: GO 19967
19967: DISABLE
19968: LD_INT 0
19970: PPUSH
19971: PPUSH
// begin enable ;
19972: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19973: LD_ADDR_VAR 0 1
19977: PUSH
19978: LD_INT 22
19980: PUSH
19981: LD_OWVAR 2
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 61
19992: PUSH
19993: EMPTY
19994: LIST
19995: PUSH
19996: LD_INT 33
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: LIST
20010: PPUSH
20011: CALL_OW 69
20015: ST_TO_ADDR
// if not tmp then
20016: LD_VAR 0 1
20020: NOT
20021: IFFALSE 20025
// exit ;
20023: GO 20062
// for i in tmp do
20025: LD_ADDR_VAR 0 2
20029: PUSH
20030: LD_VAR 0 1
20034: PUSH
20035: FOR_IN
20036: IFFALSE 20060
// if IsControledBy ( i ) then
20038: LD_VAR 0 2
20042: PPUSH
20043: CALL_OW 312
20047: IFFALSE 20058
// ComUnlink ( i ) ;
20049: LD_VAR 0 2
20053: PPUSH
20054: CALL_OW 136
20058: GO 20035
20060: POP
20061: POP
// end ;
20062: PPOPN 2
20064: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20065: LD_EXP 32
20069: PUSH
20070: LD_EXP 63
20074: AND
20075: IFFALSE 20215
20077: GO 20079
20079: DISABLE
20080: LD_INT 0
20082: PPUSH
20083: PPUSH
// begin ToLua ( displayPowell(); ) ;
20084: LD_STRING displayPowell();
20086: PPUSH
20087: CALL_OW 559
// uc_side := 0 ;
20091: LD_ADDR_OWVAR 20
20095: PUSH
20096: LD_INT 0
20098: ST_TO_ADDR
// uc_nation := 2 ;
20099: LD_ADDR_OWVAR 21
20103: PUSH
20104: LD_INT 2
20106: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20107: LD_ADDR_OWVAR 37
20111: PUSH
20112: LD_INT 14
20114: ST_TO_ADDR
// vc_engine := engine_siberite ;
20115: LD_ADDR_OWVAR 39
20119: PUSH
20120: LD_INT 3
20122: ST_TO_ADDR
// vc_control := control_apeman ;
20123: LD_ADDR_OWVAR 38
20127: PUSH
20128: LD_INT 5
20130: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20131: LD_ADDR_OWVAR 40
20135: PUSH
20136: LD_INT 29
20138: ST_TO_ADDR
// un := CreateVehicle ;
20139: LD_ADDR_VAR 0 2
20143: PUSH
20144: CALL_OW 45
20148: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20149: LD_VAR 0 2
20153: PPUSH
20154: LD_INT 1
20156: PPUSH
20157: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20161: LD_INT 35
20163: PPUSH
20164: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20168: LD_VAR 0 2
20172: PPUSH
20173: LD_INT 22
20175: PUSH
20176: LD_OWVAR 2
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PPUSH
20185: CALL_OW 69
20189: PPUSH
20190: LD_VAR 0 2
20194: PPUSH
20195: CALL_OW 74
20199: PPUSH
20200: CALL_OW 115
// until IsDead ( un ) ;
20204: LD_VAR 0 2
20208: PPUSH
20209: CALL_OW 301
20213: IFFALSE 20161
// end ;
20215: PPOPN 2
20217: END
// every 0 0$1 trigger StreamModeActive and sStu do
20218: LD_EXP 32
20222: PUSH
20223: LD_EXP 71
20227: AND
20228: IFFALSE 20244
20230: GO 20232
20232: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20233: LD_STRING displayStucuk();
20235: PPUSH
20236: CALL_OW 559
// ResetFog ;
20240: CALL_OW 335
// end ;
20244: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20245: LD_EXP 32
20249: PUSH
20250: LD_EXP 64
20254: AND
20255: IFFALSE 20396
20257: GO 20259
20259: DISABLE
20260: LD_INT 0
20262: PPUSH
20263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20264: LD_ADDR_VAR 0 2
20268: PUSH
20269: LD_INT 22
20271: PUSH
20272: LD_OWVAR 2
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 21
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PPUSH
20295: CALL_OW 69
20299: ST_TO_ADDR
// if not tmp then
20300: LD_VAR 0 2
20304: NOT
20305: IFFALSE 20309
// exit ;
20307: GO 20396
// un := tmp [ rand ( 1 , tmp ) ] ;
20309: LD_ADDR_VAR 0 1
20313: PUSH
20314: LD_VAR 0 2
20318: PUSH
20319: LD_INT 1
20321: PPUSH
20322: LD_VAR 0 2
20326: PPUSH
20327: CALL_OW 12
20331: ARRAY
20332: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20333: LD_VAR 0 1
20337: PPUSH
20338: LD_INT 0
20340: PPUSH
20341: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20345: LD_VAR 0 1
20349: PPUSH
20350: LD_OWVAR 3
20354: PUSH
20355: LD_VAR 0 1
20359: DIFF
20360: PPUSH
20361: LD_VAR 0 1
20365: PPUSH
20366: CALL_OW 74
20370: PPUSH
20371: CALL_OW 115
// wait ( 0 0$20 ) ;
20375: LD_INT 700
20377: PPUSH
20378: CALL_OW 67
// SetSide ( un , your_side ) ;
20382: LD_VAR 0 1
20386: PPUSH
20387: LD_OWVAR 2
20391: PPUSH
20392: CALL_OW 235
// end ;
20396: PPOPN 2
20398: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20399: LD_EXP 32
20403: PUSH
20404: LD_EXP 65
20408: AND
20409: IFFALSE 20515
20411: GO 20413
20413: DISABLE
20414: LD_INT 0
20416: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20417: LD_ADDR_VAR 0 1
20421: PUSH
20422: LD_INT 22
20424: PUSH
20425: LD_OWVAR 2
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: LD_INT 30
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 30
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: LIST
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PPUSH
20466: CALL_OW 69
20470: ST_TO_ADDR
// if not depot then
20471: LD_VAR 0 1
20475: NOT
20476: IFFALSE 20480
// exit ;
20478: GO 20515
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20480: LD_VAR 0 1
20484: PUSH
20485: LD_INT 1
20487: ARRAY
20488: PPUSH
20489: CALL_OW 250
20493: PPUSH
20494: LD_VAR 0 1
20498: PUSH
20499: LD_INT 1
20501: ARRAY
20502: PPUSH
20503: CALL_OW 251
20507: PPUSH
20508: LD_INT 70
20510: PPUSH
20511: CALL_OW 495
// end ;
20515: PPOPN 1
20517: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20518: LD_EXP 32
20522: PUSH
20523: LD_EXP 66
20527: AND
20528: IFFALSE 20739
20530: GO 20532
20532: DISABLE
20533: LD_INT 0
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
20539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20540: LD_ADDR_VAR 0 5
20544: PUSH
20545: LD_INT 22
20547: PUSH
20548: LD_OWVAR 2
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 21
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PPUSH
20571: CALL_OW 69
20575: ST_TO_ADDR
// if not tmp then
20576: LD_VAR 0 5
20580: NOT
20581: IFFALSE 20585
// exit ;
20583: GO 20739
// for i in tmp do
20585: LD_ADDR_VAR 0 1
20589: PUSH
20590: LD_VAR 0 5
20594: PUSH
20595: FOR_IN
20596: IFFALSE 20737
// begin d := rand ( 0 , 5 ) ;
20598: LD_ADDR_VAR 0 4
20602: PUSH
20603: LD_INT 0
20605: PPUSH
20606: LD_INT 5
20608: PPUSH
20609: CALL_OW 12
20613: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20614: LD_ADDR_VAR 0 2
20618: PUSH
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 250
20628: PPUSH
20629: LD_VAR 0 4
20633: PPUSH
20634: LD_INT 3
20636: PPUSH
20637: LD_INT 12
20639: PPUSH
20640: CALL_OW 12
20644: PPUSH
20645: CALL_OW 272
20649: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20650: LD_ADDR_VAR 0 3
20654: PUSH
20655: LD_VAR 0 1
20659: PPUSH
20660: CALL_OW 251
20664: PPUSH
20665: LD_VAR 0 4
20669: PPUSH
20670: LD_INT 3
20672: PPUSH
20673: LD_INT 12
20675: PPUSH
20676: CALL_OW 12
20680: PPUSH
20681: CALL_OW 273
20685: ST_TO_ADDR
// if ValidHex ( x , y ) then
20686: LD_VAR 0 2
20690: PPUSH
20691: LD_VAR 0 3
20695: PPUSH
20696: CALL_OW 488
20700: IFFALSE 20735
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20702: LD_VAR 0 1
20706: PPUSH
20707: LD_VAR 0 2
20711: PPUSH
20712: LD_VAR 0 3
20716: PPUSH
20717: LD_INT 3
20719: PPUSH
20720: LD_INT 6
20722: PPUSH
20723: CALL_OW 12
20727: PPUSH
20728: LD_INT 1
20730: PPUSH
20731: CALL_OW 483
// end ;
20735: GO 20595
20737: POP
20738: POP
// end ;
20739: PPOPN 5
20741: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20742: LD_EXP 32
20746: PUSH
20747: LD_EXP 67
20751: AND
20752: IFFALSE 20846
20754: GO 20756
20756: DISABLE
20757: LD_INT 0
20759: PPUSH
20760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20761: LD_ADDR_VAR 0 2
20765: PUSH
20766: LD_INT 22
20768: PUSH
20769: LD_OWVAR 2
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 32
20780: PUSH
20781: LD_INT 1
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 21
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: LIST
20802: PPUSH
20803: CALL_OW 69
20807: ST_TO_ADDR
// if not tmp then
20808: LD_VAR 0 2
20812: NOT
20813: IFFALSE 20817
// exit ;
20815: GO 20846
// for i in tmp do
20817: LD_ADDR_VAR 0 1
20821: PUSH
20822: LD_VAR 0 2
20826: PUSH
20827: FOR_IN
20828: IFFALSE 20844
// SetFuel ( i , 0 ) ;
20830: LD_VAR 0 1
20834: PPUSH
20835: LD_INT 0
20837: PPUSH
20838: CALL_OW 240
20842: GO 20827
20844: POP
20845: POP
// end ;
20846: PPOPN 2
20848: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20849: LD_EXP 32
20853: PUSH
20854: LD_EXP 68
20858: AND
20859: IFFALSE 20925
20861: GO 20863
20863: DISABLE
20864: LD_INT 0
20866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20867: LD_ADDR_VAR 0 1
20871: PUSH
20872: LD_INT 22
20874: PUSH
20875: LD_OWVAR 2
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 30
20886: PUSH
20887: LD_INT 29
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PPUSH
20898: CALL_OW 69
20902: ST_TO_ADDR
// if not tmp then
20903: LD_VAR 0 1
20907: NOT
20908: IFFALSE 20912
// exit ;
20910: GO 20925
// DestroyUnit ( tmp [ 1 ] ) ;
20912: LD_VAR 0 1
20916: PUSH
20917: LD_INT 1
20919: ARRAY
20920: PPUSH
20921: CALL_OW 65
// end ;
20925: PPOPN 1
20927: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20928: LD_EXP 32
20932: PUSH
20933: LD_EXP 70
20937: AND
20938: IFFALSE 21067
20940: GO 20942
20942: DISABLE
20943: LD_INT 0
20945: PPUSH
// begin uc_side := 0 ;
20946: LD_ADDR_OWVAR 20
20950: PUSH
20951: LD_INT 0
20953: ST_TO_ADDR
// uc_nation := nation_arabian ;
20954: LD_ADDR_OWVAR 21
20958: PUSH
20959: LD_INT 2
20961: ST_TO_ADDR
// hc_gallery :=  ;
20962: LD_ADDR_OWVAR 33
20966: PUSH
20967: LD_STRING 
20969: ST_TO_ADDR
// hc_name :=  ;
20970: LD_ADDR_OWVAR 26
20974: PUSH
20975: LD_STRING 
20977: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20978: LD_INT 1
20980: PPUSH
20981: LD_INT 11
20983: PPUSH
20984: LD_INT 10
20986: PPUSH
20987: CALL_OW 380
// un := CreateHuman ;
20991: LD_ADDR_VAR 0 1
20995: PUSH
20996: CALL_OW 44
21000: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21001: LD_VAR 0 1
21005: PPUSH
21006: LD_INT 1
21008: PPUSH
21009: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21013: LD_INT 35
21015: PPUSH
21016: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21020: LD_VAR 0 1
21024: PPUSH
21025: LD_INT 22
21027: PUSH
21028: LD_OWVAR 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PPUSH
21037: CALL_OW 69
21041: PPUSH
21042: LD_VAR 0 1
21046: PPUSH
21047: CALL_OW 74
21051: PPUSH
21052: CALL_OW 115
// until IsDead ( un ) ;
21056: LD_VAR 0 1
21060: PPUSH
21061: CALL_OW 301
21065: IFFALSE 21013
// end ;
21067: PPOPN 1
21069: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21070: LD_EXP 32
21074: PUSH
21075: LD_EXP 72
21079: AND
21080: IFFALSE 21092
21082: GO 21084
21084: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21085: LD_STRING earthquake(getX(game), 0, 32)
21087: PPUSH
21088: CALL_OW 559
21092: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21093: LD_EXP 32
21097: PUSH
21098: LD_EXP 73
21102: AND
21103: IFFALSE 21194
21105: GO 21107
21107: DISABLE
21108: LD_INT 0
21110: PPUSH
// begin enable ;
21111: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21112: LD_ADDR_VAR 0 1
21116: PUSH
21117: LD_INT 22
21119: PUSH
21120: LD_OWVAR 2
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 21
21131: PUSH
21132: LD_INT 2
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 33
21141: PUSH
21142: LD_INT 3
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: LIST
21153: PPUSH
21154: CALL_OW 69
21158: ST_TO_ADDR
// if not tmp then
21159: LD_VAR 0 1
21163: NOT
21164: IFFALSE 21168
// exit ;
21166: GO 21194
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21168: LD_VAR 0 1
21172: PUSH
21173: LD_INT 1
21175: PPUSH
21176: LD_VAR 0 1
21180: PPUSH
21181: CALL_OW 12
21185: ARRAY
21186: PPUSH
21187: LD_INT 1
21189: PPUSH
21190: CALL_OW 234
// end ;
21194: PPOPN 1
21196: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21197: LD_EXP 32
21201: PUSH
21202: LD_EXP 74
21206: AND
21207: IFFALSE 21348
21209: GO 21211
21211: DISABLE
21212: LD_INT 0
21214: PPUSH
21215: PPUSH
21216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21217: LD_ADDR_VAR 0 3
21221: PUSH
21222: LD_INT 22
21224: PUSH
21225: LD_OWVAR 2
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 25
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PPUSH
21248: CALL_OW 69
21252: ST_TO_ADDR
// if not tmp then
21253: LD_VAR 0 3
21257: NOT
21258: IFFALSE 21262
// exit ;
21260: GO 21348
// un := tmp [ rand ( 1 , tmp ) ] ;
21262: LD_ADDR_VAR 0 2
21266: PUSH
21267: LD_VAR 0 3
21271: PUSH
21272: LD_INT 1
21274: PPUSH
21275: LD_VAR 0 3
21279: PPUSH
21280: CALL_OW 12
21284: ARRAY
21285: ST_TO_ADDR
// if Crawls ( un ) then
21286: LD_VAR 0 2
21290: PPUSH
21291: CALL_OW 318
21295: IFFALSE 21306
// ComWalk ( un ) ;
21297: LD_VAR 0 2
21301: PPUSH
21302: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21306: LD_VAR 0 2
21310: PPUSH
21311: LD_INT 9
21313: PPUSH
21314: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21318: LD_INT 28
21320: PPUSH
21321: LD_OWVAR 2
21325: PPUSH
21326: LD_INT 2
21328: PPUSH
21329: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21333: LD_INT 29
21335: PPUSH
21336: LD_OWVAR 2
21340: PPUSH
21341: LD_INT 2
21343: PPUSH
21344: CALL_OW 322
// end ;
21348: PPOPN 3
21350: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21351: LD_EXP 32
21355: PUSH
21356: LD_EXP 75
21360: AND
21361: IFFALSE 21472
21363: GO 21365
21365: DISABLE
21366: LD_INT 0
21368: PPUSH
21369: PPUSH
21370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21371: LD_ADDR_VAR 0 3
21375: PUSH
21376: LD_INT 22
21378: PUSH
21379: LD_OWVAR 2
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 25
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PPUSH
21402: CALL_OW 69
21406: ST_TO_ADDR
// if not tmp then
21407: LD_VAR 0 3
21411: NOT
21412: IFFALSE 21416
// exit ;
21414: GO 21472
// un := tmp [ rand ( 1 , tmp ) ] ;
21416: LD_ADDR_VAR 0 2
21420: PUSH
21421: LD_VAR 0 3
21425: PUSH
21426: LD_INT 1
21428: PPUSH
21429: LD_VAR 0 3
21433: PPUSH
21434: CALL_OW 12
21438: ARRAY
21439: ST_TO_ADDR
// if Crawls ( un ) then
21440: LD_VAR 0 2
21444: PPUSH
21445: CALL_OW 318
21449: IFFALSE 21460
// ComWalk ( un ) ;
21451: LD_VAR 0 2
21455: PPUSH
21456: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21460: LD_VAR 0 2
21464: PPUSH
21465: LD_INT 8
21467: PPUSH
21468: CALL_OW 336
// end ;
21472: PPOPN 3
21474: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21475: LD_EXP 32
21479: PUSH
21480: LD_EXP 76
21484: AND
21485: IFFALSE 21629
21487: GO 21489
21489: DISABLE
21490: LD_INT 0
21492: PPUSH
21493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21494: LD_ADDR_VAR 0 2
21498: PUSH
21499: LD_INT 22
21501: PUSH
21502: LD_OWVAR 2
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 21
21513: PUSH
21514: LD_INT 2
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: LD_INT 34
21526: PUSH
21527: LD_INT 12
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 34
21536: PUSH
21537: LD_INT 51
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 34
21546: PUSH
21547: LD_INT 32
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: PPUSH
21565: CALL_OW 69
21569: ST_TO_ADDR
// if not tmp then
21570: LD_VAR 0 2
21574: NOT
21575: IFFALSE 21579
// exit ;
21577: GO 21629
// for i in tmp do
21579: LD_ADDR_VAR 0 1
21583: PUSH
21584: LD_VAR 0 2
21588: PUSH
21589: FOR_IN
21590: IFFALSE 21627
// if GetCargo ( i , mat_artifact ) = 0 then
21592: LD_VAR 0 1
21596: PPUSH
21597: LD_INT 4
21599: PPUSH
21600: CALL_OW 289
21604: PUSH
21605: LD_INT 0
21607: EQUAL
21608: IFFALSE 21625
// SetCargo ( i , mat_siberit , 100 ) ;
21610: LD_VAR 0 1
21614: PPUSH
21615: LD_INT 3
21617: PPUSH
21618: LD_INT 100
21620: PPUSH
21621: CALL_OW 290
21625: GO 21589
21627: POP
21628: POP
// end ;
21629: PPOPN 2
21631: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21632: LD_EXP 32
21636: PUSH
21637: LD_EXP 77
21641: AND
21642: IFFALSE 21825
21644: GO 21646
21646: DISABLE
21647: LD_INT 0
21649: PPUSH
21650: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21651: LD_ADDR_VAR 0 2
21655: PUSH
21656: LD_INT 22
21658: PUSH
21659: LD_OWVAR 2
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PPUSH
21668: CALL_OW 69
21672: ST_TO_ADDR
// if not tmp then
21673: LD_VAR 0 2
21677: NOT
21678: IFFALSE 21682
// exit ;
21680: GO 21825
// for i := 1 to 2 do
21682: LD_ADDR_VAR 0 1
21686: PUSH
21687: DOUBLE
21688: LD_INT 1
21690: DEC
21691: ST_TO_ADDR
21692: LD_INT 2
21694: PUSH
21695: FOR_TO
21696: IFFALSE 21823
// begin uc_side := your_side ;
21698: LD_ADDR_OWVAR 20
21702: PUSH
21703: LD_OWVAR 2
21707: ST_TO_ADDR
// uc_nation := nation_american ;
21708: LD_ADDR_OWVAR 21
21712: PUSH
21713: LD_INT 1
21715: ST_TO_ADDR
// vc_chassis := us_morphling ;
21716: LD_ADDR_OWVAR 37
21720: PUSH
21721: LD_INT 5
21723: ST_TO_ADDR
// vc_engine := engine_siberite ;
21724: LD_ADDR_OWVAR 39
21728: PUSH
21729: LD_INT 3
21731: ST_TO_ADDR
// vc_control := control_computer ;
21732: LD_ADDR_OWVAR 38
21736: PUSH
21737: LD_INT 3
21739: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21740: LD_ADDR_OWVAR 40
21744: PUSH
21745: LD_INT 10
21747: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21748: LD_VAR 0 2
21752: PUSH
21753: LD_INT 1
21755: ARRAY
21756: PPUSH
21757: CALL_OW 310
21761: NOT
21762: IFFALSE 21809
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21764: CALL_OW 45
21768: PPUSH
21769: LD_VAR 0 2
21773: PUSH
21774: LD_INT 1
21776: ARRAY
21777: PPUSH
21778: CALL_OW 250
21782: PPUSH
21783: LD_VAR 0 2
21787: PUSH
21788: LD_INT 1
21790: ARRAY
21791: PPUSH
21792: CALL_OW 251
21796: PPUSH
21797: LD_INT 12
21799: PPUSH
21800: LD_INT 1
21802: PPUSH
21803: CALL_OW 50
21807: GO 21821
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21809: CALL_OW 45
21813: PPUSH
21814: LD_INT 1
21816: PPUSH
21817: CALL_OW 51
// end ;
21821: GO 21695
21823: POP
21824: POP
// end ;
21825: PPOPN 2
21827: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21828: LD_EXP 32
21832: PUSH
21833: LD_EXP 78
21837: AND
21838: IFFALSE 22060
21840: GO 21842
21842: DISABLE
21843: LD_INT 0
21845: PPUSH
21846: PPUSH
21847: PPUSH
21848: PPUSH
21849: PPUSH
21850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21851: LD_ADDR_VAR 0 6
21855: PUSH
21856: LD_INT 22
21858: PUSH
21859: LD_OWVAR 2
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 21
21870: PUSH
21871: LD_INT 1
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 3
21880: PUSH
21881: LD_INT 23
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: PPUSH
21900: CALL_OW 69
21904: ST_TO_ADDR
// if not tmp then
21905: LD_VAR 0 6
21909: NOT
21910: IFFALSE 21914
// exit ;
21912: GO 22060
// s1 := rand ( 1 , 4 ) ;
21914: LD_ADDR_VAR 0 2
21918: PUSH
21919: LD_INT 1
21921: PPUSH
21922: LD_INT 4
21924: PPUSH
21925: CALL_OW 12
21929: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21930: LD_ADDR_VAR 0 4
21934: PUSH
21935: LD_VAR 0 6
21939: PUSH
21940: LD_INT 1
21942: ARRAY
21943: PPUSH
21944: LD_VAR 0 2
21948: PPUSH
21949: CALL_OW 259
21953: ST_TO_ADDR
// if s1 = 1 then
21954: LD_VAR 0 2
21958: PUSH
21959: LD_INT 1
21961: EQUAL
21962: IFFALSE 21982
// s2 := rand ( 2 , 4 ) else
21964: LD_ADDR_VAR 0 3
21968: PUSH
21969: LD_INT 2
21971: PPUSH
21972: LD_INT 4
21974: PPUSH
21975: CALL_OW 12
21979: ST_TO_ADDR
21980: GO 21990
// s2 := 1 ;
21982: LD_ADDR_VAR 0 3
21986: PUSH
21987: LD_INT 1
21989: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21990: LD_ADDR_VAR 0 5
21994: PUSH
21995: LD_VAR 0 6
21999: PUSH
22000: LD_INT 1
22002: ARRAY
22003: PPUSH
22004: LD_VAR 0 3
22008: PPUSH
22009: CALL_OW 259
22013: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22014: LD_VAR 0 6
22018: PUSH
22019: LD_INT 1
22021: ARRAY
22022: PPUSH
22023: LD_VAR 0 2
22027: PPUSH
22028: LD_VAR 0 5
22032: PPUSH
22033: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22037: LD_VAR 0 6
22041: PUSH
22042: LD_INT 1
22044: ARRAY
22045: PPUSH
22046: LD_VAR 0 3
22050: PPUSH
22051: LD_VAR 0 4
22055: PPUSH
22056: CALL_OW 237
// end ;
22060: PPOPN 6
22062: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22063: LD_EXP 32
22067: PUSH
22068: LD_EXP 79
22072: AND
22073: IFFALSE 22152
22075: GO 22077
22077: DISABLE
22078: LD_INT 0
22080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22081: LD_ADDR_VAR 0 1
22085: PUSH
22086: LD_INT 22
22088: PUSH
22089: LD_OWVAR 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 30
22100: PUSH
22101: LD_INT 3
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PPUSH
22112: CALL_OW 69
22116: ST_TO_ADDR
// if not tmp then
22117: LD_VAR 0 1
22121: NOT
22122: IFFALSE 22126
// exit ;
22124: GO 22152
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22126: LD_VAR 0 1
22130: PUSH
22131: LD_INT 1
22133: PPUSH
22134: LD_VAR 0 1
22138: PPUSH
22139: CALL_OW 12
22143: ARRAY
22144: PPUSH
22145: LD_INT 1
22147: PPUSH
22148: CALL_OW 234
// end ;
22152: PPOPN 1
22154: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22155: LD_EXP 32
22159: PUSH
22160: LD_EXP 80
22164: AND
22165: IFFALSE 22277
22167: GO 22169
22169: DISABLE
22170: LD_INT 0
22172: PPUSH
22173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22174: LD_ADDR_VAR 0 2
22178: PUSH
22179: LD_INT 22
22181: PUSH
22182: LD_OWVAR 2
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 2
22193: PUSH
22194: LD_INT 30
22196: PUSH
22197: LD_INT 27
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 30
22206: PUSH
22207: LD_INT 26
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 30
22216: PUSH
22217: LD_INT 28
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PPUSH
22234: CALL_OW 69
22238: ST_TO_ADDR
// if not tmp then
22239: LD_VAR 0 2
22243: NOT
22244: IFFALSE 22248
// exit ;
22246: GO 22277
// for i in tmp do
22248: LD_ADDR_VAR 0 1
22252: PUSH
22253: LD_VAR 0 2
22257: PUSH
22258: FOR_IN
22259: IFFALSE 22275
// SetLives ( i , 1 ) ;
22261: LD_VAR 0 1
22265: PPUSH
22266: LD_INT 1
22268: PPUSH
22269: CALL_OW 234
22273: GO 22258
22275: POP
22276: POP
// end ;
22277: PPOPN 2
22279: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22280: LD_EXP 32
22284: PUSH
22285: LD_EXP 81
22289: AND
22290: IFFALSE 22577
22292: GO 22294
22294: DISABLE
22295: LD_INT 0
22297: PPUSH
22298: PPUSH
22299: PPUSH
// begin i := rand ( 1 , 7 ) ;
22300: LD_ADDR_VAR 0 1
22304: PUSH
22305: LD_INT 1
22307: PPUSH
22308: LD_INT 7
22310: PPUSH
22311: CALL_OW 12
22315: ST_TO_ADDR
// case i of 1 :
22316: LD_VAR 0 1
22320: PUSH
22321: LD_INT 1
22323: DOUBLE
22324: EQUAL
22325: IFTRUE 22329
22327: GO 22339
22329: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22330: LD_STRING earthquake(getX(game), 0, 32)
22332: PPUSH
22333: CALL_OW 559
22337: GO 22577
22339: LD_INT 2
22341: DOUBLE
22342: EQUAL
22343: IFTRUE 22347
22345: GO 22361
22347: POP
// begin ToLua ( displayStucuk(); ) ;
22348: LD_STRING displayStucuk();
22350: PPUSH
22351: CALL_OW 559
// ResetFog ;
22355: CALL_OW 335
// end ; 3 :
22359: GO 22577
22361: LD_INT 3
22363: DOUBLE
22364: EQUAL
22365: IFTRUE 22369
22367: GO 22473
22369: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22370: LD_ADDR_VAR 0 2
22374: PUSH
22375: LD_INT 22
22377: PUSH
22378: LD_OWVAR 2
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 25
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PPUSH
22401: CALL_OW 69
22405: ST_TO_ADDR
// if not tmp then
22406: LD_VAR 0 2
22410: NOT
22411: IFFALSE 22415
// exit ;
22413: GO 22577
// un := tmp [ rand ( 1 , tmp ) ] ;
22415: LD_ADDR_VAR 0 3
22419: PUSH
22420: LD_VAR 0 2
22424: PUSH
22425: LD_INT 1
22427: PPUSH
22428: LD_VAR 0 2
22432: PPUSH
22433: CALL_OW 12
22437: ARRAY
22438: ST_TO_ADDR
// if Crawls ( un ) then
22439: LD_VAR 0 3
22443: PPUSH
22444: CALL_OW 318
22448: IFFALSE 22459
// ComWalk ( un ) ;
22450: LD_VAR 0 3
22454: PPUSH
22455: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22459: LD_VAR 0 3
22463: PPUSH
22464: LD_INT 8
22466: PPUSH
22467: CALL_OW 336
// end ; 4 :
22471: GO 22577
22473: LD_INT 4
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22555
22481: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22482: LD_ADDR_VAR 0 2
22486: PUSH
22487: LD_INT 22
22489: PUSH
22490: LD_OWVAR 2
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 30
22501: PUSH
22502: LD_INT 29
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PPUSH
22513: CALL_OW 69
22517: ST_TO_ADDR
// if not tmp then
22518: LD_VAR 0 2
22522: NOT
22523: IFFALSE 22527
// exit ;
22525: GO 22577
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22527: LD_VAR 0 2
22531: PUSH
22532: LD_INT 1
22534: ARRAY
22535: PPUSH
22536: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22540: LD_VAR 0 2
22544: PUSH
22545: LD_INT 1
22547: ARRAY
22548: PPUSH
22549: CALL_OW 65
// end ; 5 .. 7 :
22553: GO 22577
22555: LD_INT 5
22557: DOUBLE
22558: GREATEREQUAL
22559: IFFALSE 22567
22561: LD_INT 7
22563: DOUBLE
22564: LESSEQUAL
22565: IFTRUE 22569
22567: GO 22576
22569: POP
// StreamSibBomb ; end ;
22570: CALL 18814 0 0
22574: GO 22577
22576: POP
// end ;
22577: PPOPN 3
22579: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22580: LD_EXP 32
22584: PUSH
22585: LD_EXP 82
22589: AND
22590: IFFALSE 22746
22592: GO 22594
22594: DISABLE
22595: LD_INT 0
22597: PPUSH
22598: PPUSH
22599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22600: LD_ADDR_VAR 0 2
22604: PUSH
22605: LD_INT 81
22607: PUSH
22608: LD_OWVAR 2
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 2
22619: PUSH
22620: LD_INT 21
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 21
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PPUSH
22649: CALL_OW 69
22653: ST_TO_ADDR
// if not tmp then
22654: LD_VAR 0 2
22658: NOT
22659: IFFALSE 22663
// exit ;
22661: GO 22746
// p := 0 ;
22663: LD_ADDR_VAR 0 3
22667: PUSH
22668: LD_INT 0
22670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22671: LD_INT 35
22673: PPUSH
22674: CALL_OW 67
// p := p + 1 ;
22678: LD_ADDR_VAR 0 3
22682: PUSH
22683: LD_VAR 0 3
22687: PUSH
22688: LD_INT 1
22690: PLUS
22691: ST_TO_ADDR
// for i in tmp do
22692: LD_ADDR_VAR 0 1
22696: PUSH
22697: LD_VAR 0 2
22701: PUSH
22702: FOR_IN
22703: IFFALSE 22734
// if GetLives ( i ) < 1000 then
22705: LD_VAR 0 1
22709: PPUSH
22710: CALL_OW 256
22714: PUSH
22715: LD_INT 1000
22717: LESS
22718: IFFALSE 22732
// SetLives ( i , 1000 ) ;
22720: LD_VAR 0 1
22724: PPUSH
22725: LD_INT 1000
22727: PPUSH
22728: CALL_OW 234
22732: GO 22702
22734: POP
22735: POP
// until p > 20 ;
22736: LD_VAR 0 3
22740: PUSH
22741: LD_INT 20
22743: GREATER
22744: IFFALSE 22671
// end ;
22746: PPOPN 3
22748: END
// every 0 0$1 trigger StreamModeActive and sTime do
22749: LD_EXP 32
22753: PUSH
22754: LD_EXP 83
22758: AND
22759: IFFALSE 22794
22761: GO 22763
22763: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22764: LD_INT 28
22766: PPUSH
22767: LD_OWVAR 2
22771: PPUSH
22772: LD_INT 2
22774: PPUSH
22775: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22779: LD_INT 30
22781: PPUSH
22782: LD_OWVAR 2
22786: PPUSH
22787: LD_INT 2
22789: PPUSH
22790: CALL_OW 322
// end ;
22794: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22795: LD_EXP 32
22799: PUSH
22800: LD_EXP 84
22804: AND
22805: IFFALSE 22926
22807: GO 22809
22809: DISABLE
22810: LD_INT 0
22812: PPUSH
22813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22814: LD_ADDR_VAR 0 2
22818: PUSH
22819: LD_INT 22
22821: PUSH
22822: LD_OWVAR 2
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 21
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 3
22843: PUSH
22844: LD_INT 23
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: PPUSH
22863: CALL_OW 69
22867: ST_TO_ADDR
// if not tmp then
22868: LD_VAR 0 2
22872: NOT
22873: IFFALSE 22877
// exit ;
22875: GO 22926
// for i in tmp do
22877: LD_ADDR_VAR 0 1
22881: PUSH
22882: LD_VAR 0 2
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22924
// begin if Crawls ( i ) then
22890: LD_VAR 0 1
22894: PPUSH
22895: CALL_OW 318
22899: IFFALSE 22910
// ComWalk ( i ) ;
22901: LD_VAR 0 1
22905: PPUSH
22906: CALL_OW 138
// SetClass ( i , 2 ) ;
22910: LD_VAR 0 1
22914: PPUSH
22915: LD_INT 2
22917: PPUSH
22918: CALL_OW 336
// end ;
22922: GO 22887
22924: POP
22925: POP
// end ;
22926: PPOPN 2
22928: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22929: LD_EXP 32
22933: PUSH
22934: LD_EXP 85
22938: AND
22939: IFFALSE 23227
22941: GO 22943
22943: DISABLE
22944: LD_INT 0
22946: PPUSH
22947: PPUSH
22948: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22949: LD_OWVAR 2
22953: PPUSH
22954: LD_INT 9
22956: PPUSH
22957: LD_INT 1
22959: PPUSH
22960: LD_INT 1
22962: PPUSH
22963: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22967: LD_INT 9
22969: PPUSH
22970: LD_OWVAR 2
22974: PPUSH
22975: CALL_OW 343
// uc_side := 9 ;
22979: LD_ADDR_OWVAR 20
22983: PUSH
22984: LD_INT 9
22986: ST_TO_ADDR
// uc_nation := 2 ;
22987: LD_ADDR_OWVAR 21
22991: PUSH
22992: LD_INT 2
22994: ST_TO_ADDR
// hc_name := Dark Warrior ;
22995: LD_ADDR_OWVAR 26
22999: PUSH
23000: LD_STRING Dark Warrior
23002: ST_TO_ADDR
// hc_gallery :=  ;
23003: LD_ADDR_OWVAR 33
23007: PUSH
23008: LD_STRING 
23010: ST_TO_ADDR
// hc_noskilllimit := true ;
23011: LD_ADDR_OWVAR 76
23015: PUSH
23016: LD_INT 1
23018: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23019: LD_ADDR_OWVAR 31
23023: PUSH
23024: LD_INT 30
23026: PUSH
23027: LD_INT 30
23029: PUSH
23030: LD_INT 30
23032: PUSH
23033: LD_INT 30
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: ST_TO_ADDR
// un := CreateHuman ;
23042: LD_ADDR_VAR 0 3
23046: PUSH
23047: CALL_OW 44
23051: ST_TO_ADDR
// hc_noskilllimit := false ;
23052: LD_ADDR_OWVAR 76
23056: PUSH
23057: LD_INT 0
23059: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23060: LD_VAR 0 3
23064: PPUSH
23065: LD_INT 1
23067: PPUSH
23068: CALL_OW 51
// ToLua ( playRanger() ) ;
23072: LD_STRING playRanger()
23074: PPUSH
23075: CALL_OW 559
// p := 0 ;
23079: LD_ADDR_VAR 0 2
23083: PUSH
23084: LD_INT 0
23086: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23087: LD_INT 35
23089: PPUSH
23090: CALL_OW 67
// p := p + 1 ;
23094: LD_ADDR_VAR 0 2
23098: PUSH
23099: LD_VAR 0 2
23103: PUSH
23104: LD_INT 1
23106: PLUS
23107: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23108: LD_VAR 0 3
23112: PPUSH
23113: CALL_OW 256
23117: PUSH
23118: LD_INT 1000
23120: LESS
23121: IFFALSE 23135
// SetLives ( un , 1000 ) ;
23123: LD_VAR 0 3
23127: PPUSH
23128: LD_INT 1000
23130: PPUSH
23131: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23135: LD_VAR 0 3
23139: PPUSH
23140: LD_INT 81
23142: PUSH
23143: LD_OWVAR 2
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 91
23154: PUSH
23155: LD_VAR 0 3
23159: PUSH
23160: LD_INT 30
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PPUSH
23172: CALL_OW 69
23176: PPUSH
23177: LD_VAR 0 3
23181: PPUSH
23182: CALL_OW 74
23186: PPUSH
23187: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23191: LD_VAR 0 2
23195: PUSH
23196: LD_INT 80
23198: GREATER
23199: PUSH
23200: LD_VAR 0 3
23204: PPUSH
23205: CALL_OW 301
23209: OR
23210: IFFALSE 23087
// if un then
23212: LD_VAR 0 3
23216: IFFALSE 23227
// RemoveUnit ( un ) ;
23218: LD_VAR 0 3
23222: PPUSH
23223: CALL_OW 64
// end ;
23227: PPOPN 3
23229: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23230: LD_EXP 86
23234: IFFALSE 23350
23236: GO 23238
23238: DISABLE
23239: LD_INT 0
23241: PPUSH
23242: PPUSH
23243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23244: LD_ADDR_VAR 0 2
23248: PUSH
23249: LD_INT 81
23251: PUSH
23252: LD_OWVAR 2
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 21
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PPUSH
23275: CALL_OW 69
23279: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23280: LD_STRING playComputer()
23282: PPUSH
23283: CALL_OW 559
// if not tmp then
23287: LD_VAR 0 2
23291: NOT
23292: IFFALSE 23296
// exit ;
23294: GO 23350
// for i in tmp do
23296: LD_ADDR_VAR 0 1
23300: PUSH
23301: LD_VAR 0 2
23305: PUSH
23306: FOR_IN
23307: IFFALSE 23348
// for j := 1 to 4 do
23309: LD_ADDR_VAR 0 3
23313: PUSH
23314: DOUBLE
23315: LD_INT 1
23317: DEC
23318: ST_TO_ADDR
23319: LD_INT 4
23321: PUSH
23322: FOR_TO
23323: IFFALSE 23344
// SetSkill ( i , j , 10 ) ;
23325: LD_VAR 0 1
23329: PPUSH
23330: LD_VAR 0 3
23334: PPUSH
23335: LD_INT 10
23337: PPUSH
23338: CALL_OW 237
23342: GO 23322
23344: POP
23345: POP
23346: GO 23306
23348: POP
23349: POP
// end ;
23350: PPOPN 3
23352: END
// every 0 0$1 trigger s30 do var i , tmp ;
23353: LD_EXP 87
23357: IFFALSE 23426
23359: GO 23361
23361: DISABLE
23362: LD_INT 0
23364: PPUSH
23365: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23366: LD_ADDR_VAR 0 2
23370: PUSH
23371: LD_INT 22
23373: PUSH
23374: LD_OWVAR 2
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PPUSH
23383: CALL_OW 69
23387: ST_TO_ADDR
// if not tmp then
23388: LD_VAR 0 2
23392: NOT
23393: IFFALSE 23397
// exit ;
23395: GO 23426
// for i in tmp do
23397: LD_ADDR_VAR 0 1
23401: PUSH
23402: LD_VAR 0 2
23406: PUSH
23407: FOR_IN
23408: IFFALSE 23424
// SetLives ( i , 300 ) ;
23410: LD_VAR 0 1
23414: PPUSH
23415: LD_INT 300
23417: PPUSH
23418: CALL_OW 234
23422: GO 23407
23424: POP
23425: POP
// end ;
23426: PPOPN 2
23428: END
// every 0 0$1 trigger s60 do var i , tmp ;
23429: LD_EXP 88
23433: IFFALSE 23502
23435: GO 23437
23437: DISABLE
23438: LD_INT 0
23440: PPUSH
23441: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23442: LD_ADDR_VAR 0 2
23446: PUSH
23447: LD_INT 22
23449: PUSH
23450: LD_OWVAR 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PPUSH
23459: CALL_OW 69
23463: ST_TO_ADDR
// if not tmp then
23464: LD_VAR 0 2
23468: NOT
23469: IFFALSE 23473
// exit ;
23471: GO 23502
// for i in tmp do
23473: LD_ADDR_VAR 0 1
23477: PUSH
23478: LD_VAR 0 2
23482: PUSH
23483: FOR_IN
23484: IFFALSE 23500
// SetLives ( i , 600 ) ;
23486: LD_VAR 0 1
23490: PPUSH
23491: LD_INT 600
23493: PPUSH
23494: CALL_OW 234
23498: GO 23483
23500: POP
23501: POP
// end ;
23502: PPOPN 2
23504: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23505: LD_INT 0
23507: PPUSH
// case cmd of 301 :
23508: LD_VAR 0 1
23512: PUSH
23513: LD_INT 301
23515: DOUBLE
23516: EQUAL
23517: IFTRUE 23521
23519: GO 23553
23521: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23522: LD_VAR 0 6
23526: PPUSH
23527: LD_VAR 0 7
23531: PPUSH
23532: LD_VAR 0 8
23536: PPUSH
23537: LD_VAR 0 4
23541: PPUSH
23542: LD_VAR 0 5
23546: PPUSH
23547: CALL 24754 0 5
23551: GO 23674
23553: LD_INT 302
23555: DOUBLE
23556: EQUAL
23557: IFTRUE 23561
23559: GO 23598
23561: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23562: LD_VAR 0 6
23566: PPUSH
23567: LD_VAR 0 7
23571: PPUSH
23572: LD_VAR 0 8
23576: PPUSH
23577: LD_VAR 0 9
23581: PPUSH
23582: LD_VAR 0 4
23586: PPUSH
23587: LD_VAR 0 5
23591: PPUSH
23592: CALL 24845 0 6
23596: GO 23674
23598: LD_INT 303
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23643
23606: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23607: LD_VAR 0 6
23611: PPUSH
23612: LD_VAR 0 7
23616: PPUSH
23617: LD_VAR 0 8
23621: PPUSH
23622: LD_VAR 0 9
23626: PPUSH
23627: LD_VAR 0 4
23631: PPUSH
23632: LD_VAR 0 5
23636: PPUSH
23637: CALL 23679 0 6
23641: GO 23674
23643: LD_INT 304
23645: DOUBLE
23646: EQUAL
23647: IFTRUE 23651
23649: GO 23673
23651: POP
// hHackTeleport ( unit , x , y ) ; end ;
23652: LD_VAR 0 2
23656: PPUSH
23657: LD_VAR 0 4
23661: PPUSH
23662: LD_VAR 0 5
23666: PPUSH
23667: CALL 25438 0 3
23671: GO 23674
23673: POP
// end ;
23674: LD_VAR 0 12
23678: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23679: LD_INT 0
23681: PPUSH
23682: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23683: LD_VAR 0 1
23687: PUSH
23688: LD_INT 1
23690: LESS
23691: PUSH
23692: LD_VAR 0 1
23696: PUSH
23697: LD_INT 3
23699: GREATER
23700: OR
23701: PUSH
23702: LD_VAR 0 5
23706: PPUSH
23707: LD_VAR 0 6
23711: PPUSH
23712: CALL_OW 428
23716: OR
23717: IFFALSE 23721
// exit ;
23719: GO 24441
// uc_side := your_side ;
23721: LD_ADDR_OWVAR 20
23725: PUSH
23726: LD_OWVAR 2
23730: ST_TO_ADDR
// uc_nation := nation ;
23731: LD_ADDR_OWVAR 21
23735: PUSH
23736: LD_VAR 0 1
23740: ST_TO_ADDR
// bc_level = 1 ;
23741: LD_ADDR_OWVAR 43
23745: PUSH
23746: LD_INT 1
23748: ST_TO_ADDR
// case btype of 1 :
23749: LD_VAR 0 2
23753: PUSH
23754: LD_INT 1
23756: DOUBLE
23757: EQUAL
23758: IFTRUE 23762
23760: GO 23773
23762: POP
// bc_type := b_depot ; 2 :
23763: LD_ADDR_OWVAR 42
23767: PUSH
23768: LD_INT 0
23770: ST_TO_ADDR
23771: GO 24385
23773: LD_INT 2
23775: DOUBLE
23776: EQUAL
23777: IFTRUE 23781
23779: GO 23792
23781: POP
// bc_type := b_warehouse ; 3 :
23782: LD_ADDR_OWVAR 42
23786: PUSH
23787: LD_INT 1
23789: ST_TO_ADDR
23790: GO 24385
23792: LD_INT 3
23794: DOUBLE
23795: EQUAL
23796: IFTRUE 23800
23798: GO 23811
23800: POP
// bc_type := b_lab ; 4 .. 9 :
23801: LD_ADDR_OWVAR 42
23805: PUSH
23806: LD_INT 6
23808: ST_TO_ADDR
23809: GO 24385
23811: LD_INT 4
23813: DOUBLE
23814: GREATEREQUAL
23815: IFFALSE 23823
23817: LD_INT 9
23819: DOUBLE
23820: LESSEQUAL
23821: IFTRUE 23825
23823: GO 23877
23825: POP
// begin bc_type := b_lab_half ;
23826: LD_ADDR_OWVAR 42
23830: PUSH
23831: LD_INT 7
23833: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23834: LD_ADDR_OWVAR 44
23838: PUSH
23839: LD_INT 10
23841: PUSH
23842: LD_INT 11
23844: PUSH
23845: LD_INT 12
23847: PUSH
23848: LD_INT 15
23850: PUSH
23851: LD_INT 14
23853: PUSH
23854: LD_INT 13
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: PUSH
23865: LD_VAR 0 2
23869: PUSH
23870: LD_INT 3
23872: MINUS
23873: ARRAY
23874: ST_TO_ADDR
// end ; 10 .. 13 :
23875: GO 24385
23877: LD_INT 10
23879: DOUBLE
23880: GREATEREQUAL
23881: IFFALSE 23889
23883: LD_INT 13
23885: DOUBLE
23886: LESSEQUAL
23887: IFTRUE 23891
23889: GO 23968
23891: POP
// begin bc_type := b_lab_full ;
23892: LD_ADDR_OWVAR 42
23896: PUSH
23897: LD_INT 8
23899: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23900: LD_ADDR_OWVAR 44
23904: PUSH
23905: LD_INT 10
23907: PUSH
23908: LD_INT 12
23910: PUSH
23911: LD_INT 14
23913: PUSH
23914: LD_INT 13
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: PUSH
23923: LD_VAR 0 2
23927: PUSH
23928: LD_INT 9
23930: MINUS
23931: ARRAY
23932: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23933: LD_ADDR_OWVAR 45
23937: PUSH
23938: LD_INT 11
23940: PUSH
23941: LD_INT 15
23943: PUSH
23944: LD_INT 12
23946: PUSH
23947: LD_INT 15
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: PUSH
23956: LD_VAR 0 2
23960: PUSH
23961: LD_INT 9
23963: MINUS
23964: ARRAY
23965: ST_TO_ADDR
// end ; 14 :
23966: GO 24385
23968: LD_INT 14
23970: DOUBLE
23971: EQUAL
23972: IFTRUE 23976
23974: GO 23987
23976: POP
// bc_type := b_workshop ; 15 :
23977: LD_ADDR_OWVAR 42
23981: PUSH
23982: LD_INT 2
23984: ST_TO_ADDR
23985: GO 24385
23987: LD_INT 15
23989: DOUBLE
23990: EQUAL
23991: IFTRUE 23995
23993: GO 24006
23995: POP
// bc_type := b_factory ; 16 :
23996: LD_ADDR_OWVAR 42
24000: PUSH
24001: LD_INT 3
24003: ST_TO_ADDR
24004: GO 24385
24006: LD_INT 16
24008: DOUBLE
24009: EQUAL
24010: IFTRUE 24014
24012: GO 24025
24014: POP
// bc_type := b_ext_gun ; 17 :
24015: LD_ADDR_OWVAR 42
24019: PUSH
24020: LD_INT 17
24022: ST_TO_ADDR
24023: GO 24385
24025: LD_INT 17
24027: DOUBLE
24028: EQUAL
24029: IFTRUE 24033
24031: GO 24061
24033: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24034: LD_ADDR_OWVAR 42
24038: PUSH
24039: LD_INT 19
24041: PUSH
24042: LD_INT 23
24044: PUSH
24045: LD_INT 19
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: PUSH
24053: LD_VAR 0 1
24057: ARRAY
24058: ST_TO_ADDR
24059: GO 24385
24061: LD_INT 18
24063: DOUBLE
24064: EQUAL
24065: IFTRUE 24069
24067: GO 24080
24069: POP
// bc_type := b_ext_radar ; 19 :
24070: LD_ADDR_OWVAR 42
24074: PUSH
24075: LD_INT 20
24077: ST_TO_ADDR
24078: GO 24385
24080: LD_INT 19
24082: DOUBLE
24083: EQUAL
24084: IFTRUE 24088
24086: GO 24099
24088: POP
// bc_type := b_ext_radio ; 20 :
24089: LD_ADDR_OWVAR 42
24093: PUSH
24094: LD_INT 22
24096: ST_TO_ADDR
24097: GO 24385
24099: LD_INT 20
24101: DOUBLE
24102: EQUAL
24103: IFTRUE 24107
24105: GO 24118
24107: POP
// bc_type := b_ext_siberium ; 21 :
24108: LD_ADDR_OWVAR 42
24112: PUSH
24113: LD_INT 21
24115: ST_TO_ADDR
24116: GO 24385
24118: LD_INT 21
24120: DOUBLE
24121: EQUAL
24122: IFTRUE 24126
24124: GO 24137
24126: POP
// bc_type := b_ext_computer ; 22 :
24127: LD_ADDR_OWVAR 42
24131: PUSH
24132: LD_INT 24
24134: ST_TO_ADDR
24135: GO 24385
24137: LD_INT 22
24139: DOUBLE
24140: EQUAL
24141: IFTRUE 24145
24143: GO 24156
24145: POP
// bc_type := b_ext_track ; 23 :
24146: LD_ADDR_OWVAR 42
24150: PUSH
24151: LD_INT 16
24153: ST_TO_ADDR
24154: GO 24385
24156: LD_INT 23
24158: DOUBLE
24159: EQUAL
24160: IFTRUE 24164
24162: GO 24175
24164: POP
// bc_type := b_ext_laser ; 24 :
24165: LD_ADDR_OWVAR 42
24169: PUSH
24170: LD_INT 25
24172: ST_TO_ADDR
24173: GO 24385
24175: LD_INT 24
24177: DOUBLE
24178: EQUAL
24179: IFTRUE 24183
24181: GO 24194
24183: POP
// bc_type := b_control_tower ; 25 :
24184: LD_ADDR_OWVAR 42
24188: PUSH
24189: LD_INT 36
24191: ST_TO_ADDR
24192: GO 24385
24194: LD_INT 25
24196: DOUBLE
24197: EQUAL
24198: IFTRUE 24202
24200: GO 24213
24202: POP
// bc_type := b_breastwork ; 26 :
24203: LD_ADDR_OWVAR 42
24207: PUSH
24208: LD_INT 31
24210: ST_TO_ADDR
24211: GO 24385
24213: LD_INT 26
24215: DOUBLE
24216: EQUAL
24217: IFTRUE 24221
24219: GO 24232
24221: POP
// bc_type := b_bunker ; 27 :
24222: LD_ADDR_OWVAR 42
24226: PUSH
24227: LD_INT 32
24229: ST_TO_ADDR
24230: GO 24385
24232: LD_INT 27
24234: DOUBLE
24235: EQUAL
24236: IFTRUE 24240
24238: GO 24251
24240: POP
// bc_type := b_turret ; 28 :
24241: LD_ADDR_OWVAR 42
24245: PUSH
24246: LD_INT 33
24248: ST_TO_ADDR
24249: GO 24385
24251: LD_INT 28
24253: DOUBLE
24254: EQUAL
24255: IFTRUE 24259
24257: GO 24270
24259: POP
// bc_type := b_armoury ; 29 :
24260: LD_ADDR_OWVAR 42
24264: PUSH
24265: LD_INT 4
24267: ST_TO_ADDR
24268: GO 24385
24270: LD_INT 29
24272: DOUBLE
24273: EQUAL
24274: IFTRUE 24278
24276: GO 24289
24278: POP
// bc_type := b_barracks ; 30 :
24279: LD_ADDR_OWVAR 42
24283: PUSH
24284: LD_INT 5
24286: ST_TO_ADDR
24287: GO 24385
24289: LD_INT 30
24291: DOUBLE
24292: EQUAL
24293: IFTRUE 24297
24295: GO 24308
24297: POP
// bc_type := b_solar_power ; 31 :
24298: LD_ADDR_OWVAR 42
24302: PUSH
24303: LD_INT 27
24305: ST_TO_ADDR
24306: GO 24385
24308: LD_INT 31
24310: DOUBLE
24311: EQUAL
24312: IFTRUE 24316
24314: GO 24327
24316: POP
// bc_type := b_oil_power ; 32 :
24317: LD_ADDR_OWVAR 42
24321: PUSH
24322: LD_INT 26
24324: ST_TO_ADDR
24325: GO 24385
24327: LD_INT 32
24329: DOUBLE
24330: EQUAL
24331: IFTRUE 24335
24333: GO 24346
24335: POP
// bc_type := b_siberite_power ; 33 :
24336: LD_ADDR_OWVAR 42
24340: PUSH
24341: LD_INT 28
24343: ST_TO_ADDR
24344: GO 24385
24346: LD_INT 33
24348: DOUBLE
24349: EQUAL
24350: IFTRUE 24354
24352: GO 24365
24354: POP
// bc_type := b_oil_mine ; 34 :
24355: LD_ADDR_OWVAR 42
24359: PUSH
24360: LD_INT 29
24362: ST_TO_ADDR
24363: GO 24385
24365: LD_INT 34
24367: DOUBLE
24368: EQUAL
24369: IFTRUE 24373
24371: GO 24384
24373: POP
// bc_type := b_siberite_mine ; end ;
24374: LD_ADDR_OWVAR 42
24378: PUSH
24379: LD_INT 30
24381: ST_TO_ADDR
24382: GO 24385
24384: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24385: LD_ADDR_VAR 0 8
24389: PUSH
24390: LD_VAR 0 5
24394: PPUSH
24395: LD_VAR 0 6
24399: PPUSH
24400: LD_VAR 0 3
24404: PPUSH
24405: CALL_OW 47
24409: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24410: LD_OWVAR 42
24414: PUSH
24415: LD_INT 32
24417: PUSH
24418: LD_INT 33
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: IN
24425: IFFALSE 24441
// PlaceWeaponTurret ( b , weapon ) ;
24427: LD_VAR 0 8
24431: PPUSH
24432: LD_VAR 0 4
24436: PPUSH
24437: CALL_OW 431
// end ;
24441: LD_VAR 0 7
24445: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24446: LD_INT 0
24448: PPUSH
24449: PPUSH
24450: PPUSH
24451: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24452: LD_ADDR_VAR 0 4
24456: PUSH
24457: LD_INT 22
24459: PUSH
24460: LD_OWVAR 2
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: LD_INT 30
24474: PUSH
24475: LD_INT 0
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 30
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PPUSH
24501: CALL_OW 69
24505: ST_TO_ADDR
// if not tmp then
24506: LD_VAR 0 4
24510: NOT
24511: IFFALSE 24515
// exit ;
24513: GO 24574
// for i in tmp do
24515: LD_ADDR_VAR 0 2
24519: PUSH
24520: LD_VAR 0 4
24524: PUSH
24525: FOR_IN
24526: IFFALSE 24572
// for j = 1 to 3 do
24528: LD_ADDR_VAR 0 3
24532: PUSH
24533: DOUBLE
24534: LD_INT 1
24536: DEC
24537: ST_TO_ADDR
24538: LD_INT 3
24540: PUSH
24541: FOR_TO
24542: IFFALSE 24568
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24544: LD_VAR 0 2
24548: PPUSH
24549: CALL_OW 274
24553: PPUSH
24554: LD_VAR 0 3
24558: PPUSH
24559: LD_INT 99999
24561: PPUSH
24562: CALL_OW 277
24566: GO 24541
24568: POP
24569: POP
24570: GO 24525
24572: POP
24573: POP
// end ;
24574: LD_VAR 0 1
24578: RET
// export function hHackSetLevel10 ; var i , j ; begin
24579: LD_INT 0
24581: PPUSH
24582: PPUSH
24583: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24584: LD_ADDR_VAR 0 2
24588: PUSH
24589: LD_INT 21
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PPUSH
24599: CALL_OW 69
24603: PUSH
24604: FOR_IN
24605: IFFALSE 24657
// if IsSelected ( i ) then
24607: LD_VAR 0 2
24611: PPUSH
24612: CALL_OW 306
24616: IFFALSE 24655
// begin for j := 1 to 4 do
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: DOUBLE
24624: LD_INT 1
24626: DEC
24627: ST_TO_ADDR
24628: LD_INT 4
24630: PUSH
24631: FOR_TO
24632: IFFALSE 24653
// SetSkill ( i , j , 10 ) ;
24634: LD_VAR 0 2
24638: PPUSH
24639: LD_VAR 0 3
24643: PPUSH
24644: LD_INT 10
24646: PPUSH
24647: CALL_OW 237
24651: GO 24631
24653: POP
24654: POP
// end ;
24655: GO 24604
24657: POP
24658: POP
// end ;
24659: LD_VAR 0 1
24663: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24664: LD_INT 0
24666: PPUSH
24667: PPUSH
24668: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24669: LD_ADDR_VAR 0 2
24673: PUSH
24674: LD_INT 22
24676: PUSH
24677: LD_OWVAR 2
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 21
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PPUSH
24700: CALL_OW 69
24704: PUSH
24705: FOR_IN
24706: IFFALSE 24747
// begin for j := 1 to 4 do
24708: LD_ADDR_VAR 0 3
24712: PUSH
24713: DOUBLE
24714: LD_INT 1
24716: DEC
24717: ST_TO_ADDR
24718: LD_INT 4
24720: PUSH
24721: FOR_TO
24722: IFFALSE 24743
// SetSkill ( i , j , 10 ) ;
24724: LD_VAR 0 2
24728: PPUSH
24729: LD_VAR 0 3
24733: PPUSH
24734: LD_INT 10
24736: PPUSH
24737: CALL_OW 237
24741: GO 24721
24743: POP
24744: POP
// end ;
24745: GO 24705
24747: POP
24748: POP
// end ;
24749: LD_VAR 0 1
24753: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24754: LD_INT 0
24756: PPUSH
// uc_side := your_side ;
24757: LD_ADDR_OWVAR 20
24761: PUSH
24762: LD_OWVAR 2
24766: ST_TO_ADDR
// uc_nation := nation ;
24767: LD_ADDR_OWVAR 21
24771: PUSH
24772: LD_VAR 0 1
24776: ST_TO_ADDR
// InitHc ;
24777: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24781: LD_INT 0
24783: PPUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: LD_VAR 0 3
24793: PPUSH
24794: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24798: LD_VAR 0 4
24802: PPUSH
24803: LD_VAR 0 5
24807: PPUSH
24808: CALL_OW 428
24812: PUSH
24813: LD_INT 0
24815: EQUAL
24816: IFFALSE 24840
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24818: CALL_OW 44
24822: PPUSH
24823: LD_VAR 0 4
24827: PPUSH
24828: LD_VAR 0 5
24832: PPUSH
24833: LD_INT 1
24835: PPUSH
24836: CALL_OW 48
// end ;
24840: LD_VAR 0 6
24844: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24845: LD_INT 0
24847: PPUSH
24848: PPUSH
// uc_side := your_side ;
24849: LD_ADDR_OWVAR 20
24853: PUSH
24854: LD_OWVAR 2
24858: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24859: LD_VAR 0 1
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: LD_INT 3
24872: PUSH
24873: LD_INT 4
24875: PUSH
24876: LD_INT 5
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: IN
24886: IFFALSE 24898
// uc_nation := nation_american else
24888: LD_ADDR_OWVAR 21
24892: PUSH
24893: LD_INT 1
24895: ST_TO_ADDR
24896: GO 24941
// if chassis in [ 11 , 12 , 13 , 14 ] then
24898: LD_VAR 0 1
24902: PUSH
24903: LD_INT 11
24905: PUSH
24906: LD_INT 12
24908: PUSH
24909: LD_INT 13
24911: PUSH
24912: LD_INT 14
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: IN
24921: IFFALSE 24933
// uc_nation := nation_arabian else
24923: LD_ADDR_OWVAR 21
24927: PUSH
24928: LD_INT 2
24930: ST_TO_ADDR
24931: GO 24941
// uc_nation := nation_russian ;
24933: LD_ADDR_OWVAR 21
24937: PUSH
24938: LD_INT 3
24940: ST_TO_ADDR
// vc_chassis := chassis ;
24941: LD_ADDR_OWVAR 37
24945: PUSH
24946: LD_VAR 0 1
24950: ST_TO_ADDR
// vc_engine := engine ;
24951: LD_ADDR_OWVAR 39
24955: PUSH
24956: LD_VAR 0 2
24960: ST_TO_ADDR
// vc_control := control ;
24961: LD_ADDR_OWVAR 38
24965: PUSH
24966: LD_VAR 0 3
24970: ST_TO_ADDR
// vc_weapon := weapon ;
24971: LD_ADDR_OWVAR 40
24975: PUSH
24976: LD_VAR 0 4
24980: ST_TO_ADDR
// un := CreateVehicle ;
24981: LD_ADDR_VAR 0 8
24985: PUSH
24986: CALL_OW 45
24990: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24991: LD_VAR 0 8
24995: PPUSH
24996: LD_INT 0
24998: PPUSH
24999: LD_INT 5
25001: PPUSH
25002: CALL_OW 12
25006: PPUSH
25007: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25011: LD_VAR 0 8
25015: PPUSH
25016: LD_VAR 0 5
25020: PPUSH
25021: LD_VAR 0 6
25025: PPUSH
25026: LD_INT 1
25028: PPUSH
25029: CALL_OW 48
// end ;
25033: LD_VAR 0 7
25037: RET
// export hInvincible ; every 1 do
25038: GO 25040
25040: DISABLE
// hInvincible := [ ] ;
25041: LD_ADDR_EXP 89
25045: PUSH
25046: EMPTY
25047: ST_TO_ADDR
25048: END
// every 10 do var i ;
25049: GO 25051
25051: DISABLE
25052: LD_INT 0
25054: PPUSH
// begin enable ;
25055: ENABLE
// if not hInvincible then
25056: LD_EXP 89
25060: NOT
25061: IFFALSE 25065
// exit ;
25063: GO 25109
// for i in hInvincible do
25065: LD_ADDR_VAR 0 1
25069: PUSH
25070: LD_EXP 89
25074: PUSH
25075: FOR_IN
25076: IFFALSE 25107
// if GetLives ( i ) < 1000 then
25078: LD_VAR 0 1
25082: PPUSH
25083: CALL_OW 256
25087: PUSH
25088: LD_INT 1000
25090: LESS
25091: IFFALSE 25105
// SetLives ( i , 1000 ) ;
25093: LD_VAR 0 1
25097: PPUSH
25098: LD_INT 1000
25100: PPUSH
25101: CALL_OW 234
25105: GO 25075
25107: POP
25108: POP
// end ;
25109: PPOPN 1
25111: END
// export function hHackInvincible ; var i ; begin
25112: LD_INT 0
25114: PPUSH
25115: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25116: LD_ADDR_VAR 0 2
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: LD_INT 21
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 21
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: PPUSH
25149: CALL_OW 69
25153: PUSH
25154: FOR_IN
25155: IFFALSE 25216
// if IsSelected ( i ) then
25157: LD_VAR 0 2
25161: PPUSH
25162: CALL_OW 306
25166: IFFALSE 25214
// begin if i in hInvincible then
25168: LD_VAR 0 2
25172: PUSH
25173: LD_EXP 89
25177: IN
25178: IFFALSE 25198
// hInvincible := hInvincible diff i else
25180: LD_ADDR_EXP 89
25184: PUSH
25185: LD_EXP 89
25189: PUSH
25190: LD_VAR 0 2
25194: DIFF
25195: ST_TO_ADDR
25196: GO 25214
// hInvincible := hInvincible union i ;
25198: LD_ADDR_EXP 89
25202: PUSH
25203: LD_EXP 89
25207: PUSH
25208: LD_VAR 0 2
25212: UNION
25213: ST_TO_ADDR
// end ;
25214: GO 25154
25216: POP
25217: POP
// end ;
25218: LD_VAR 0 1
25222: RET
// export function hHackInvisible ; var i , j ; begin
25223: LD_INT 0
25225: PPUSH
25226: PPUSH
25227: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25228: LD_ADDR_VAR 0 2
25232: PUSH
25233: LD_INT 21
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PPUSH
25243: CALL_OW 69
25247: PUSH
25248: FOR_IN
25249: IFFALSE 25273
// if IsSelected ( i ) then
25251: LD_VAR 0 2
25255: PPUSH
25256: CALL_OW 306
25260: IFFALSE 25271
// ComForceInvisible ( i ) ;
25262: LD_VAR 0 2
25266: PPUSH
25267: CALL_OW 496
25271: GO 25248
25273: POP
25274: POP
// end ;
25275: LD_VAR 0 1
25279: RET
// export function hHackChangeYourSide ; begin
25280: LD_INT 0
25282: PPUSH
// if your_side = 8 then
25283: LD_OWVAR 2
25287: PUSH
25288: LD_INT 8
25290: EQUAL
25291: IFFALSE 25303
// your_side := 0 else
25293: LD_ADDR_OWVAR 2
25297: PUSH
25298: LD_INT 0
25300: ST_TO_ADDR
25301: GO 25317
// your_side := your_side + 1 ;
25303: LD_ADDR_OWVAR 2
25307: PUSH
25308: LD_OWVAR 2
25312: PUSH
25313: LD_INT 1
25315: PLUS
25316: ST_TO_ADDR
// end ;
25317: LD_VAR 0 1
25321: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25322: LD_INT 0
25324: PPUSH
25325: PPUSH
25326: PPUSH
// for i in all_units do
25327: LD_ADDR_VAR 0 2
25331: PUSH
25332: LD_OWVAR 3
25336: PUSH
25337: FOR_IN
25338: IFFALSE 25416
// if IsSelected ( i ) then
25340: LD_VAR 0 2
25344: PPUSH
25345: CALL_OW 306
25349: IFFALSE 25414
// begin j := GetSide ( i ) ;
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_VAR 0 2
25360: PPUSH
25361: CALL_OW 255
25365: ST_TO_ADDR
// if j = 8 then
25366: LD_VAR 0 3
25370: PUSH
25371: LD_INT 8
25373: EQUAL
25374: IFFALSE 25386
// j := 0 else
25376: LD_ADDR_VAR 0 3
25380: PUSH
25381: LD_INT 0
25383: ST_TO_ADDR
25384: GO 25400
// j := j + 1 ;
25386: LD_ADDR_VAR 0 3
25390: PUSH
25391: LD_VAR 0 3
25395: PUSH
25396: LD_INT 1
25398: PLUS
25399: ST_TO_ADDR
// SetSide ( i , j ) ;
25400: LD_VAR 0 2
25404: PPUSH
25405: LD_VAR 0 3
25409: PPUSH
25410: CALL_OW 235
// end ;
25414: GO 25337
25416: POP
25417: POP
// end ;
25418: LD_VAR 0 1
25422: RET
// export function hHackFog ; begin
25423: LD_INT 0
25425: PPUSH
// FogOff ( true ) ;
25426: LD_INT 1
25428: PPUSH
25429: CALL_OW 344
// end ;
25433: LD_VAR 0 1
25437: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25438: LD_INT 0
25440: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25441: LD_VAR 0 1
25445: PPUSH
25446: LD_VAR 0 2
25450: PPUSH
25451: LD_VAR 0 3
25455: PPUSH
25456: LD_INT 1
25458: PPUSH
25459: LD_INT 1
25461: PPUSH
25462: CALL_OW 483
// CenterOnXY ( x , y ) ;
25466: LD_VAR 0 2
25470: PPUSH
25471: LD_VAR 0 3
25475: PPUSH
25476: CALL_OW 84
// end ;
25480: LD_VAR 0 4
25484: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25485: LD_INT 0
25487: PPUSH
25488: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25489: LD_VAR 0 1
25493: NOT
25494: PUSH
25495: LD_VAR 0 2
25499: PPUSH
25500: LD_VAR 0 3
25504: PPUSH
25505: CALL_OW 488
25509: NOT
25510: OR
25511: PUSH
25512: LD_VAR 0 1
25516: PPUSH
25517: CALL_OW 266
25521: PUSH
25522: LD_INT 3
25524: NONEQUAL
25525: PUSH
25526: LD_VAR 0 1
25530: PPUSH
25531: CALL_OW 247
25535: PUSH
25536: LD_INT 1
25538: EQUAL
25539: NOT
25540: AND
25541: OR
25542: IFFALSE 25546
// exit ;
25544: GO 25695
// if GetType ( factory ) = unit_human then
25546: LD_VAR 0 1
25550: PPUSH
25551: CALL_OW 247
25555: PUSH
25556: LD_INT 1
25558: EQUAL
25559: IFFALSE 25576
// factory := IsInUnit ( factory ) ;
25561: LD_ADDR_VAR 0 1
25565: PUSH
25566: LD_VAR 0 1
25570: PPUSH
25571: CALL_OW 310
25575: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25576: LD_VAR 0 1
25580: PPUSH
25581: CALL_OW 266
25585: PUSH
25586: LD_INT 3
25588: NONEQUAL
25589: IFFALSE 25593
// exit ;
25591: GO 25695
// if HexInfo ( x , y ) = factory then
25593: LD_VAR 0 2
25597: PPUSH
25598: LD_VAR 0 3
25602: PPUSH
25603: CALL_OW 428
25607: PUSH
25608: LD_VAR 0 1
25612: EQUAL
25613: IFFALSE 25640
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25615: LD_ADDR_EXP 90
25619: PUSH
25620: LD_EXP 90
25624: PPUSH
25625: LD_VAR 0 1
25629: PPUSH
25630: LD_INT 0
25632: PPUSH
25633: CALL_OW 1
25637: ST_TO_ADDR
25638: GO 25691
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25640: LD_ADDR_EXP 90
25644: PUSH
25645: LD_EXP 90
25649: PPUSH
25650: LD_VAR 0 1
25654: PPUSH
25655: LD_VAR 0 1
25659: PPUSH
25660: CALL_OW 255
25664: PUSH
25665: LD_VAR 0 1
25669: PUSH
25670: LD_VAR 0 2
25674: PUSH
25675: LD_VAR 0 3
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: PPUSH
25686: CALL_OW 1
25690: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25691: CALL 25700 0 0
// end ;
25695: LD_VAR 0 4
25699: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25700: LD_INT 0
25702: PPUSH
25703: PPUSH
25704: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25705: LD_STRING resetFactoryWaypoint();
25707: PPUSH
25708: CALL_OW 559
// if factoryWaypoints then
25712: LD_EXP 90
25716: IFFALSE 25842
// begin list := PrepareArray ( factoryWaypoints ) ;
25718: LD_ADDR_VAR 0 3
25722: PUSH
25723: LD_EXP 90
25727: PPUSH
25728: CALL 72274 0 1
25732: ST_TO_ADDR
// for i := 1 to list do
25733: LD_ADDR_VAR 0 2
25737: PUSH
25738: DOUBLE
25739: LD_INT 1
25741: DEC
25742: ST_TO_ADDR
25743: LD_VAR 0 3
25747: PUSH
25748: FOR_TO
25749: IFFALSE 25840
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25751: LD_STRING setFactoryWaypointXY(
25753: PUSH
25754: LD_VAR 0 3
25758: PUSH
25759: LD_VAR 0 2
25763: ARRAY
25764: PUSH
25765: LD_INT 1
25767: ARRAY
25768: STR
25769: PUSH
25770: LD_STRING ,
25772: STR
25773: PUSH
25774: LD_VAR 0 3
25778: PUSH
25779: LD_VAR 0 2
25783: ARRAY
25784: PUSH
25785: LD_INT 2
25787: ARRAY
25788: STR
25789: PUSH
25790: LD_STRING ,
25792: STR
25793: PUSH
25794: LD_VAR 0 3
25798: PUSH
25799: LD_VAR 0 2
25803: ARRAY
25804: PUSH
25805: LD_INT 3
25807: ARRAY
25808: STR
25809: PUSH
25810: LD_STRING ,
25812: STR
25813: PUSH
25814: LD_VAR 0 3
25818: PUSH
25819: LD_VAR 0 2
25823: ARRAY
25824: PUSH
25825: LD_INT 4
25827: ARRAY
25828: STR
25829: PUSH
25830: LD_STRING )
25832: STR
25833: PPUSH
25834: CALL_OW 559
25838: GO 25748
25840: POP
25841: POP
// end ; end ;
25842: LD_VAR 0 1
25846: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25847: LD_INT 0
25849: PPUSH
// if HexInfo ( x , y ) = warehouse then
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_VAR 0 3
25859: PPUSH
25860: CALL_OW 428
25864: PUSH
25865: LD_VAR 0 1
25869: EQUAL
25870: IFFALSE 25897
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25872: LD_ADDR_EXP 91
25876: PUSH
25877: LD_EXP 91
25881: PPUSH
25882: LD_VAR 0 1
25886: PPUSH
25887: LD_INT 0
25889: PPUSH
25890: CALL_OW 1
25894: ST_TO_ADDR
25895: GO 25948
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25897: LD_ADDR_EXP 91
25901: PUSH
25902: LD_EXP 91
25906: PPUSH
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_VAR 0 1
25916: PPUSH
25917: CALL_OW 255
25921: PUSH
25922: LD_VAR 0 1
25926: PUSH
25927: LD_VAR 0 2
25931: PUSH
25932: LD_VAR 0 3
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: PPUSH
25943: CALL_OW 1
25947: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25948: CALL 25957 0 0
// end ;
25952: LD_VAR 0 4
25956: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25957: LD_INT 0
25959: PPUSH
25960: PPUSH
25961: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25962: LD_STRING resetWarehouseGatheringPoints();
25964: PPUSH
25965: CALL_OW 559
// if warehouseGatheringPoints then
25969: LD_EXP 91
25973: IFFALSE 26099
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25975: LD_ADDR_VAR 0 3
25979: PUSH
25980: LD_EXP 91
25984: PPUSH
25985: CALL 72274 0 1
25989: ST_TO_ADDR
// for i := 1 to list do
25990: LD_ADDR_VAR 0 2
25994: PUSH
25995: DOUBLE
25996: LD_INT 1
25998: DEC
25999: ST_TO_ADDR
26000: LD_VAR 0 3
26004: PUSH
26005: FOR_TO
26006: IFFALSE 26097
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26008: LD_STRING setWarehouseGatheringPointXY(
26010: PUSH
26011: LD_VAR 0 3
26015: PUSH
26016: LD_VAR 0 2
26020: ARRAY
26021: PUSH
26022: LD_INT 1
26024: ARRAY
26025: STR
26026: PUSH
26027: LD_STRING ,
26029: STR
26030: PUSH
26031: LD_VAR 0 3
26035: PUSH
26036: LD_VAR 0 2
26040: ARRAY
26041: PUSH
26042: LD_INT 2
26044: ARRAY
26045: STR
26046: PUSH
26047: LD_STRING ,
26049: STR
26050: PUSH
26051: LD_VAR 0 3
26055: PUSH
26056: LD_VAR 0 2
26060: ARRAY
26061: PUSH
26062: LD_INT 3
26064: ARRAY
26065: STR
26066: PUSH
26067: LD_STRING ,
26069: STR
26070: PUSH
26071: LD_VAR 0 3
26075: PUSH
26076: LD_VAR 0 2
26080: ARRAY
26081: PUSH
26082: LD_INT 4
26084: ARRAY
26085: STR
26086: PUSH
26087: LD_STRING )
26089: STR
26090: PPUSH
26091: CALL_OW 559
26095: GO 26005
26097: POP
26098: POP
// end ; end ;
26099: LD_VAR 0 1
26103: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26104: LD_EXP 91
26108: IFFALSE 26795
26110: GO 26112
26112: DISABLE
26113: LD_INT 0
26115: PPUSH
26116: PPUSH
26117: PPUSH
26118: PPUSH
26119: PPUSH
26120: PPUSH
26121: PPUSH
26122: PPUSH
26123: PPUSH
// begin enable ;
26124: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26125: LD_ADDR_VAR 0 3
26129: PUSH
26130: LD_EXP 91
26134: PPUSH
26135: CALL 72274 0 1
26139: ST_TO_ADDR
// if not list then
26140: LD_VAR 0 3
26144: NOT
26145: IFFALSE 26149
// exit ;
26147: GO 26795
// for i := 1 to list do
26149: LD_ADDR_VAR 0 1
26153: PUSH
26154: DOUBLE
26155: LD_INT 1
26157: DEC
26158: ST_TO_ADDR
26159: LD_VAR 0 3
26163: PUSH
26164: FOR_TO
26165: IFFALSE 26793
// begin depot := list [ i ] [ 2 ] ;
26167: LD_ADDR_VAR 0 8
26171: PUSH
26172: LD_VAR 0 3
26176: PUSH
26177: LD_VAR 0 1
26181: ARRAY
26182: PUSH
26183: LD_INT 2
26185: ARRAY
26186: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26187: LD_ADDR_VAR 0 5
26191: PUSH
26192: LD_VAR 0 3
26196: PUSH
26197: LD_VAR 0 1
26201: ARRAY
26202: PUSH
26203: LD_INT 1
26205: ARRAY
26206: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26207: LD_VAR 0 8
26211: PPUSH
26212: CALL_OW 301
26216: PUSH
26217: LD_VAR 0 5
26221: PUSH
26222: LD_VAR 0 8
26226: PPUSH
26227: CALL_OW 255
26231: NONEQUAL
26232: OR
26233: IFFALSE 26262
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26235: LD_ADDR_EXP 91
26239: PUSH
26240: LD_EXP 91
26244: PPUSH
26245: LD_VAR 0 8
26249: PPUSH
26250: LD_INT 0
26252: PPUSH
26253: CALL_OW 1
26257: ST_TO_ADDR
// exit ;
26258: POP
26259: POP
26260: GO 26795
// end ; x := list [ i ] [ 3 ] ;
26262: LD_ADDR_VAR 0 6
26266: PUSH
26267: LD_VAR 0 3
26271: PUSH
26272: LD_VAR 0 1
26276: ARRAY
26277: PUSH
26278: LD_INT 3
26280: ARRAY
26281: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26282: LD_ADDR_VAR 0 7
26286: PUSH
26287: LD_VAR 0 3
26291: PUSH
26292: LD_VAR 0 1
26296: ARRAY
26297: PUSH
26298: LD_INT 4
26300: ARRAY
26301: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26302: LD_ADDR_VAR 0 9
26306: PUSH
26307: LD_VAR 0 6
26311: PPUSH
26312: LD_VAR 0 7
26316: PPUSH
26317: LD_INT 16
26319: PPUSH
26320: CALL 70858 0 3
26324: ST_TO_ADDR
// if not cratesNearbyPoint then
26325: LD_VAR 0 9
26329: NOT
26330: IFFALSE 26336
// exit ;
26332: POP
26333: POP
26334: GO 26795
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26336: LD_ADDR_VAR 0 4
26340: PUSH
26341: LD_INT 22
26343: PUSH
26344: LD_VAR 0 5
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 3
26355: PUSH
26356: LD_INT 60
26358: PUSH
26359: EMPTY
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 91
26368: PUSH
26369: LD_VAR 0 8
26373: PUSH
26374: LD_INT 6
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: LD_INT 25
26387: PUSH
26388: LD_INT 2
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 25
26397: PUSH
26398: LD_INT 16
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: LIST
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: PPUSH
26416: CALL_OW 69
26420: PUSH
26421: LD_VAR 0 8
26425: PPUSH
26426: CALL_OW 313
26430: PPUSH
26431: LD_INT 3
26433: PUSH
26434: LD_INT 60
26436: PUSH
26437: EMPTY
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 2
26446: PUSH
26447: LD_INT 25
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 25
26459: PUSH
26460: LD_INT 16
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: LIST
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PPUSH
26476: CALL_OW 72
26480: UNION
26481: ST_TO_ADDR
// if tmp then
26482: LD_VAR 0 4
26486: IFFALSE 26566
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26488: LD_ADDR_VAR 0 4
26492: PUSH
26493: LD_VAR 0 4
26497: PPUSH
26498: LD_INT 3
26500: PPUSH
26501: CALL 68825 0 2
26505: ST_TO_ADDR
// for j in tmp do
26506: LD_ADDR_VAR 0 2
26510: PUSH
26511: LD_VAR 0 4
26515: PUSH
26516: FOR_IN
26517: IFFALSE 26560
// begin if IsInUnit ( j ) then
26519: LD_VAR 0 2
26523: PPUSH
26524: CALL_OW 310
26528: IFFALSE 26539
// ComExit ( j ) ;
26530: LD_VAR 0 2
26534: PPUSH
26535: CALL 68908 0 1
// AddComCollect ( j , x , y ) ;
26539: LD_VAR 0 2
26543: PPUSH
26544: LD_VAR 0 6
26548: PPUSH
26549: LD_VAR 0 7
26553: PPUSH
26554: CALL_OW 177
// end ;
26558: GO 26516
26560: POP
26561: POP
// exit ;
26562: POP
26563: POP
26564: GO 26795
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26566: LD_ADDR_VAR 0 4
26570: PUSH
26571: LD_INT 22
26573: PUSH
26574: LD_VAR 0 5
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 91
26585: PUSH
26586: LD_VAR 0 8
26590: PUSH
26591: LD_INT 8
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 34
26604: PUSH
26605: LD_INT 12
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 34
26614: PUSH
26615: LD_INT 51
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 34
26624: PUSH
26625: LD_INT 32
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 34
26634: PUSH
26635: LD_EXP 15
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: LIST
26655: PPUSH
26656: CALL_OW 69
26660: ST_TO_ADDR
// if tmp then
26661: LD_VAR 0 4
26665: IFFALSE 26791
// begin for j in tmp do
26667: LD_ADDR_VAR 0 2
26671: PUSH
26672: LD_VAR 0 4
26676: PUSH
26677: FOR_IN
26678: IFFALSE 26789
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26680: LD_VAR 0 2
26684: PPUSH
26685: CALL_OW 262
26689: PUSH
26690: LD_INT 3
26692: EQUAL
26693: PUSH
26694: LD_VAR 0 2
26698: PPUSH
26699: CALL_OW 261
26703: PUSH
26704: LD_INT 20
26706: GREATER
26707: OR
26708: PUSH
26709: LD_VAR 0 2
26713: PPUSH
26714: CALL_OW 314
26718: NOT
26719: AND
26720: PUSH
26721: LD_VAR 0 2
26725: PPUSH
26726: CALL_OW 263
26730: PUSH
26731: LD_INT 1
26733: NONEQUAL
26734: PUSH
26735: LD_VAR 0 2
26739: PPUSH
26740: CALL_OW 311
26744: OR
26745: AND
26746: IFFALSE 26787
// begin ComCollect ( j , x , y ) ;
26748: LD_VAR 0 2
26752: PPUSH
26753: LD_VAR 0 6
26757: PPUSH
26758: LD_VAR 0 7
26762: PPUSH
26763: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26767: LD_VAR 0 2
26771: PPUSH
26772: LD_VAR 0 8
26776: PPUSH
26777: CALL_OW 172
// exit ;
26781: POP
26782: POP
26783: POP
26784: POP
26785: GO 26795
// end ;
26787: GO 26677
26789: POP
26790: POP
// end ; end ;
26791: GO 26164
26793: POP
26794: POP
// end ; end_of_file
26795: PPOPN 9
26797: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26798: LD_INT 0
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 264
26813: PUSH
26814: LD_EXP 18
26818: EQUAL
26819: IFFALSE 26891
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26821: LD_INT 68
26823: PPUSH
26824: LD_VAR 0 1
26828: PPUSH
26829: CALL_OW 255
26833: PPUSH
26834: CALL_OW 321
26838: PUSH
26839: LD_INT 2
26841: EQUAL
26842: IFFALSE 26854
// eff := 70 else
26844: LD_ADDR_VAR 0 4
26848: PUSH
26849: LD_INT 70
26851: ST_TO_ADDR
26852: GO 26862
// eff := 30 ;
26854: LD_ADDR_VAR 0 4
26858: PUSH
26859: LD_INT 30
26861: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26862: LD_VAR 0 1
26866: PPUSH
26867: CALL_OW 250
26871: PPUSH
26872: LD_VAR 0 1
26876: PPUSH
26877: CALL_OW 251
26881: PPUSH
26882: LD_VAR 0 4
26886: PPUSH
26887: CALL_OW 495
// end ; end ;
26891: LD_VAR 0 2
26895: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26896: LD_INT 0
26898: PPUSH
// end ;
26899: LD_VAR 0 4
26903: RET
// export function SOS_Command ( cmd ) ; begin
26904: LD_INT 0
26906: PPUSH
// end ;
26907: LD_VAR 0 2
26911: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26912: LD_INT 0
26914: PPUSH
// end ;
26915: LD_VAR 0 6
26919: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26920: LD_INT 0
26922: PPUSH
26923: PPUSH
// if not vehicle or not factory then
26924: LD_VAR 0 1
26928: NOT
26929: PUSH
26930: LD_VAR 0 2
26934: NOT
26935: OR
26936: IFFALSE 26940
// exit ;
26938: GO 27171
// if factoryWaypoints >= factory then
26940: LD_EXP 90
26944: PUSH
26945: LD_VAR 0 2
26949: GREATEREQUAL
26950: IFFALSE 27171
// if factoryWaypoints [ factory ] then
26952: LD_EXP 90
26956: PUSH
26957: LD_VAR 0 2
26961: ARRAY
26962: IFFALSE 27171
// begin if GetControl ( vehicle ) = control_manual then
26964: LD_VAR 0 1
26968: PPUSH
26969: CALL_OW 263
26973: PUSH
26974: LD_INT 1
26976: EQUAL
26977: IFFALSE 27058
// begin driver := IsDrivenBy ( vehicle ) ;
26979: LD_ADDR_VAR 0 4
26983: PUSH
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL_OW 311
26993: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26994: LD_VAR 0 4
26998: PPUSH
26999: LD_EXP 90
27003: PUSH
27004: LD_VAR 0 2
27008: ARRAY
27009: PUSH
27010: LD_INT 3
27012: ARRAY
27013: PPUSH
27014: LD_EXP 90
27018: PUSH
27019: LD_VAR 0 2
27023: ARRAY
27024: PUSH
27025: LD_INT 4
27027: ARRAY
27028: PPUSH
27029: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27033: LD_VAR 0 4
27037: PPUSH
27038: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27042: LD_VAR 0 4
27046: PPUSH
27047: LD_VAR 0 2
27051: PPUSH
27052: CALL_OW 180
// end else
27056: GO 27171
// if GetControl ( vehicle ) = control_remote then
27058: LD_VAR 0 1
27062: PPUSH
27063: CALL_OW 263
27067: PUSH
27068: LD_INT 2
27070: EQUAL
27071: IFFALSE 27132
// begin wait ( 0 0$2 ) ;
27073: LD_INT 70
27075: PPUSH
27076: CALL_OW 67
// if Connect ( vehicle ) then
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL 39219 0 1
27089: IFFALSE 27130
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27091: LD_VAR 0 1
27095: PPUSH
27096: LD_EXP 90
27100: PUSH
27101: LD_VAR 0 2
27105: ARRAY
27106: PUSH
27107: LD_INT 3
27109: ARRAY
27110: PPUSH
27111: LD_EXP 90
27115: PUSH
27116: LD_VAR 0 2
27120: ARRAY
27121: PUSH
27122: LD_INT 4
27124: ARRAY
27125: PPUSH
27126: CALL_OW 171
// end else
27130: GO 27171
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27132: LD_VAR 0 1
27136: PPUSH
27137: LD_EXP 90
27141: PUSH
27142: LD_VAR 0 2
27146: ARRAY
27147: PUSH
27148: LD_INT 3
27150: ARRAY
27151: PPUSH
27152: LD_EXP 90
27156: PUSH
27157: LD_VAR 0 2
27161: ARRAY
27162: PUSH
27163: LD_INT 4
27165: ARRAY
27166: PPUSH
27167: CALL_OW 171
// end ; end ;
27171: LD_VAR 0 3
27175: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27176: LD_INT 0
27178: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27179: LD_VAR 0 1
27183: PUSH
27184: LD_INT 250
27186: EQUAL
27187: PUSH
27188: LD_VAR 0 2
27192: PPUSH
27193: CALL_OW 264
27197: PUSH
27198: LD_EXP 21
27202: EQUAL
27203: AND
27204: IFFALSE 27225
// MinerPlaceMine ( unit , x , y ) ;
27206: LD_VAR 0 2
27210: PPUSH
27211: LD_VAR 0 4
27215: PPUSH
27216: LD_VAR 0 5
27220: PPUSH
27221: CALL 29624 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27225: LD_VAR 0 1
27229: PUSH
27230: LD_INT 251
27232: EQUAL
27233: PUSH
27234: LD_VAR 0 2
27238: PPUSH
27239: CALL_OW 264
27243: PUSH
27244: LD_EXP 21
27248: EQUAL
27249: AND
27250: IFFALSE 27271
// MinerDetonateMine ( unit , x , y ) ;
27252: LD_VAR 0 2
27256: PPUSH
27257: LD_VAR 0 4
27261: PPUSH
27262: LD_VAR 0 5
27266: PPUSH
27267: CALL 29901 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27271: LD_VAR 0 1
27275: PUSH
27276: LD_INT 252
27278: EQUAL
27279: PUSH
27280: LD_VAR 0 2
27284: PPUSH
27285: CALL_OW 264
27289: PUSH
27290: LD_EXP 21
27294: EQUAL
27295: AND
27296: IFFALSE 27317
// MinerCreateMinefield ( unit , x , y ) ;
27298: LD_VAR 0 2
27302: PPUSH
27303: LD_VAR 0 4
27307: PPUSH
27308: LD_VAR 0 5
27312: PPUSH
27313: CALL 30318 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27317: LD_VAR 0 1
27321: PUSH
27322: LD_INT 253
27324: EQUAL
27325: PUSH
27326: LD_VAR 0 2
27330: PPUSH
27331: CALL_OW 257
27335: PUSH
27336: LD_INT 5
27338: EQUAL
27339: AND
27340: IFFALSE 27361
// ComBinocular ( unit , x , y ) ;
27342: LD_VAR 0 2
27346: PPUSH
27347: LD_VAR 0 4
27351: PPUSH
27352: LD_VAR 0 5
27356: PPUSH
27357: CALL 30689 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27361: LD_VAR 0 1
27365: PUSH
27366: LD_INT 254
27368: EQUAL
27369: PUSH
27370: LD_VAR 0 2
27374: PPUSH
27375: CALL_OW 264
27379: PUSH
27380: LD_EXP 16
27384: EQUAL
27385: AND
27386: PUSH
27387: LD_VAR 0 3
27391: PPUSH
27392: CALL_OW 263
27396: PUSH
27397: LD_INT 3
27399: EQUAL
27400: AND
27401: IFFALSE 27417
// HackDestroyVehicle ( unit , selectedUnit ) ;
27403: LD_VAR 0 2
27407: PPUSH
27408: LD_VAR 0 3
27412: PPUSH
27413: CALL 28984 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27417: LD_VAR 0 1
27421: PUSH
27422: LD_INT 255
27424: EQUAL
27425: PUSH
27426: LD_VAR 0 2
27430: PPUSH
27431: CALL_OW 264
27435: PUSH
27436: LD_INT 14
27438: PUSH
27439: LD_INT 53
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: IN
27446: AND
27447: PUSH
27448: LD_VAR 0 4
27452: PPUSH
27453: LD_VAR 0 5
27457: PPUSH
27458: CALL_OW 488
27462: AND
27463: IFFALSE 27487
// CutTreeXYR ( unit , x , y , 12 ) ;
27465: LD_VAR 0 2
27469: PPUSH
27470: LD_VAR 0 4
27474: PPUSH
27475: LD_VAR 0 5
27479: PPUSH
27480: LD_INT 12
27482: PPUSH
27483: CALL 27550 0 4
// if cmd = 256 then
27487: LD_VAR 0 1
27491: PUSH
27492: LD_INT 256
27494: EQUAL
27495: IFFALSE 27516
// SetFactoryWaypoint ( unit , x , y ) ;
27497: LD_VAR 0 2
27501: PPUSH
27502: LD_VAR 0 4
27506: PPUSH
27507: LD_VAR 0 5
27511: PPUSH
27512: CALL 25485 0 3
// if cmd = 257 then
27516: LD_VAR 0 1
27520: PUSH
27521: LD_INT 257
27523: EQUAL
27524: IFFALSE 27545
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27526: LD_VAR 0 2
27530: PPUSH
27531: LD_VAR 0 4
27535: PPUSH
27536: LD_VAR 0 5
27540: PPUSH
27541: CALL 25847 0 3
// end ;
27545: LD_VAR 0 6
27549: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27550: LD_INT 0
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
27556: PPUSH
27557: PPUSH
27558: PPUSH
27559: PPUSH
27560: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27561: LD_VAR 0 1
27565: NOT
27566: PUSH
27567: LD_VAR 0 2
27571: PPUSH
27572: LD_VAR 0 3
27576: PPUSH
27577: CALL_OW 488
27581: NOT
27582: OR
27583: PUSH
27584: LD_VAR 0 4
27588: NOT
27589: OR
27590: IFFALSE 27594
// exit ;
27592: GO 27934
// list := [ ] ;
27594: LD_ADDR_VAR 0 13
27598: PUSH
27599: EMPTY
27600: ST_TO_ADDR
// if x - r < 0 then
27601: LD_VAR 0 2
27605: PUSH
27606: LD_VAR 0 4
27610: MINUS
27611: PUSH
27612: LD_INT 0
27614: LESS
27615: IFFALSE 27627
// min_x := 0 else
27617: LD_ADDR_VAR 0 7
27621: PUSH
27622: LD_INT 0
27624: ST_TO_ADDR
27625: GO 27643
// min_x := x - r ;
27627: LD_ADDR_VAR 0 7
27631: PUSH
27632: LD_VAR 0 2
27636: PUSH
27637: LD_VAR 0 4
27641: MINUS
27642: ST_TO_ADDR
// if y - r < 0 then
27643: LD_VAR 0 3
27647: PUSH
27648: LD_VAR 0 4
27652: MINUS
27653: PUSH
27654: LD_INT 0
27656: LESS
27657: IFFALSE 27669
// min_y := 0 else
27659: LD_ADDR_VAR 0 8
27663: PUSH
27664: LD_INT 0
27666: ST_TO_ADDR
27667: GO 27685
// min_y := y - r ;
27669: LD_ADDR_VAR 0 8
27673: PUSH
27674: LD_VAR 0 3
27678: PUSH
27679: LD_VAR 0 4
27683: MINUS
27684: ST_TO_ADDR
// max_x := x + r ;
27685: LD_ADDR_VAR 0 9
27689: PUSH
27690: LD_VAR 0 2
27694: PUSH
27695: LD_VAR 0 4
27699: PLUS
27700: ST_TO_ADDR
// max_y := y + r ;
27701: LD_ADDR_VAR 0 10
27705: PUSH
27706: LD_VAR 0 3
27710: PUSH
27711: LD_VAR 0 4
27715: PLUS
27716: ST_TO_ADDR
// for _x = min_x to max_x do
27717: LD_ADDR_VAR 0 11
27721: PUSH
27722: DOUBLE
27723: LD_VAR 0 7
27727: DEC
27728: ST_TO_ADDR
27729: LD_VAR 0 9
27733: PUSH
27734: FOR_TO
27735: IFFALSE 27852
// for _y = min_y to max_y do
27737: LD_ADDR_VAR 0 12
27741: PUSH
27742: DOUBLE
27743: LD_VAR 0 8
27747: DEC
27748: ST_TO_ADDR
27749: LD_VAR 0 10
27753: PUSH
27754: FOR_TO
27755: IFFALSE 27848
// begin if not ValidHex ( _x , _y ) then
27757: LD_VAR 0 11
27761: PPUSH
27762: LD_VAR 0 12
27766: PPUSH
27767: CALL_OW 488
27771: NOT
27772: IFFALSE 27776
// continue ;
27774: GO 27754
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27776: LD_VAR 0 11
27780: PPUSH
27781: LD_VAR 0 12
27785: PPUSH
27786: CALL_OW 351
27790: PUSH
27791: LD_VAR 0 11
27795: PPUSH
27796: LD_VAR 0 12
27800: PPUSH
27801: CALL_OW 554
27805: AND
27806: IFFALSE 27846
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27808: LD_ADDR_VAR 0 13
27812: PUSH
27813: LD_VAR 0 13
27817: PPUSH
27818: LD_VAR 0 13
27822: PUSH
27823: LD_INT 1
27825: PLUS
27826: PPUSH
27827: LD_VAR 0 11
27831: PUSH
27832: LD_VAR 0 12
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PPUSH
27841: CALL_OW 2
27845: ST_TO_ADDR
// end ;
27846: GO 27754
27848: POP
27849: POP
27850: GO 27734
27852: POP
27853: POP
// if not list then
27854: LD_VAR 0 13
27858: NOT
27859: IFFALSE 27863
// exit ;
27861: GO 27934
// for i in list do
27863: LD_ADDR_VAR 0 6
27867: PUSH
27868: LD_VAR 0 13
27872: PUSH
27873: FOR_IN
27874: IFFALSE 27932
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27876: LD_VAR 0 1
27880: PPUSH
27881: LD_STRING M
27883: PUSH
27884: LD_VAR 0 6
27888: PUSH
27889: LD_INT 1
27891: ARRAY
27892: PUSH
27893: LD_VAR 0 6
27897: PUSH
27898: LD_INT 2
27900: ARRAY
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: PUSH
27923: EMPTY
27924: LIST
27925: PPUSH
27926: CALL_OW 447
27930: GO 27873
27932: POP
27933: POP
// end ;
27934: LD_VAR 0 5
27938: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27939: LD_EXP 93
27943: NOT
27944: IFFALSE 27994
27946: GO 27948
27948: DISABLE
// begin initHack := true ;
27949: LD_ADDR_EXP 93
27953: PUSH
27954: LD_INT 1
27956: ST_TO_ADDR
// hackTanks := [ ] ;
27957: LD_ADDR_EXP 94
27961: PUSH
27962: EMPTY
27963: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27964: LD_ADDR_EXP 95
27968: PUSH
27969: EMPTY
27970: ST_TO_ADDR
// hackLimit := 3 ;
27971: LD_ADDR_EXP 96
27975: PUSH
27976: LD_INT 3
27978: ST_TO_ADDR
// hackDist := 12 ;
27979: LD_ADDR_EXP 97
27983: PUSH
27984: LD_INT 12
27986: ST_TO_ADDR
// hackCounter := [ ] ;
27987: LD_ADDR_EXP 98
27991: PUSH
27992: EMPTY
27993: ST_TO_ADDR
// end ;
27994: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27995: LD_EXP 93
27999: PUSH
28000: LD_INT 34
28002: PUSH
28003: LD_EXP 16
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PPUSH
28012: CALL_OW 69
28016: AND
28017: IFFALSE 28272
28019: GO 28021
28021: DISABLE
28022: LD_INT 0
28024: PPUSH
28025: PPUSH
// begin enable ;
28026: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28027: LD_ADDR_VAR 0 1
28031: PUSH
28032: LD_INT 34
28034: PUSH
28035: LD_EXP 16
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PPUSH
28044: CALL_OW 69
28048: PUSH
28049: FOR_IN
28050: IFFALSE 28270
// begin if not i in hackTanks then
28052: LD_VAR 0 1
28056: PUSH
28057: LD_EXP 94
28061: IN
28062: NOT
28063: IFFALSE 28146
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28065: LD_ADDR_EXP 94
28069: PUSH
28070: LD_EXP 94
28074: PPUSH
28075: LD_EXP 94
28079: PUSH
28080: LD_INT 1
28082: PLUS
28083: PPUSH
28084: LD_VAR 0 1
28088: PPUSH
28089: CALL_OW 1
28093: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28094: LD_ADDR_EXP 95
28098: PUSH
28099: LD_EXP 95
28103: PPUSH
28104: LD_EXP 95
28108: PUSH
28109: LD_INT 1
28111: PLUS
28112: PPUSH
28113: EMPTY
28114: PPUSH
28115: CALL_OW 1
28119: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28120: LD_ADDR_EXP 98
28124: PUSH
28125: LD_EXP 98
28129: PPUSH
28130: LD_EXP 98
28134: PUSH
28135: LD_INT 1
28137: PLUS
28138: PPUSH
28139: EMPTY
28140: PPUSH
28141: CALL_OW 1
28145: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28146: LD_VAR 0 1
28150: PPUSH
28151: CALL_OW 302
28155: NOT
28156: IFFALSE 28169
// begin HackUnlinkAll ( i ) ;
28158: LD_VAR 0 1
28162: PPUSH
28163: CALL 28275 0 1
// continue ;
28167: GO 28049
// end ; HackCheckCapturedStatus ( i ) ;
28169: LD_VAR 0 1
28173: PPUSH
28174: CALL 28718 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28178: LD_ADDR_VAR 0 2
28182: PUSH
28183: LD_INT 81
28185: PUSH
28186: LD_VAR 0 1
28190: PPUSH
28191: CALL_OW 255
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 33
28202: PUSH
28203: LD_INT 3
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 91
28212: PUSH
28213: LD_VAR 0 1
28217: PUSH
28218: LD_EXP 97
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 50
28230: PUSH
28231: EMPTY
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: PPUSH
28240: CALL_OW 69
28244: ST_TO_ADDR
// if not tmp then
28245: LD_VAR 0 2
28249: NOT
28250: IFFALSE 28254
// continue ;
28252: GO 28049
// HackLink ( i , tmp ) ;
28254: LD_VAR 0 1
28258: PPUSH
28259: LD_VAR 0 2
28263: PPUSH
28264: CALL 28411 0 2
// end ;
28268: GO 28049
28270: POP
28271: POP
// end ;
28272: PPOPN 2
28274: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28275: LD_INT 0
28277: PPUSH
28278: PPUSH
28279: PPUSH
// if not hack in hackTanks then
28280: LD_VAR 0 1
28284: PUSH
28285: LD_EXP 94
28289: IN
28290: NOT
28291: IFFALSE 28295
// exit ;
28293: GO 28406
// index := GetElementIndex ( hackTanks , hack ) ;
28295: LD_ADDR_VAR 0 4
28299: PUSH
28300: LD_EXP 94
28304: PPUSH
28305: LD_VAR 0 1
28309: PPUSH
28310: CALL 36033 0 2
28314: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28315: LD_EXP 95
28319: PUSH
28320: LD_VAR 0 4
28324: ARRAY
28325: IFFALSE 28406
// begin for i in hackTanksCaptured [ index ] do
28327: LD_ADDR_VAR 0 3
28331: PUSH
28332: LD_EXP 95
28336: PUSH
28337: LD_VAR 0 4
28341: ARRAY
28342: PUSH
28343: FOR_IN
28344: IFFALSE 28370
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28346: LD_VAR 0 3
28350: PUSH
28351: LD_INT 1
28353: ARRAY
28354: PPUSH
28355: LD_VAR 0 3
28359: PUSH
28360: LD_INT 2
28362: ARRAY
28363: PPUSH
28364: CALL_OW 235
28368: GO 28343
28370: POP
28371: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28372: LD_ADDR_EXP 95
28376: PUSH
28377: LD_EXP 95
28381: PPUSH
28382: LD_VAR 0 4
28386: PPUSH
28387: EMPTY
28388: PPUSH
28389: CALL_OW 1
28393: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28394: LD_VAR 0 1
28398: PPUSH
28399: LD_INT 0
28401: PPUSH
28402: CALL_OW 505
// end ; end ;
28406: LD_VAR 0 2
28410: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28411: LD_INT 0
28413: PPUSH
28414: PPUSH
28415: PPUSH
// if not hack in hackTanks or not vehicles then
28416: LD_VAR 0 1
28420: PUSH
28421: LD_EXP 94
28425: IN
28426: NOT
28427: PUSH
28428: LD_VAR 0 2
28432: NOT
28433: OR
28434: IFFALSE 28438
// exit ;
28436: GO 28713
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28438: LD_ADDR_VAR 0 2
28442: PUSH
28443: LD_VAR 0 1
28447: PPUSH
28448: LD_VAR 0 2
28452: PPUSH
28453: LD_INT 1
28455: PPUSH
28456: LD_INT 1
28458: PPUSH
28459: CALL 36683 0 4
28463: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28464: LD_ADDR_VAR 0 5
28468: PUSH
28469: LD_EXP 94
28473: PPUSH
28474: LD_VAR 0 1
28478: PPUSH
28479: CALL 36033 0 2
28483: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28484: LD_EXP 95
28488: PUSH
28489: LD_VAR 0 5
28493: ARRAY
28494: PUSH
28495: LD_EXP 96
28499: LESS
28500: IFFALSE 28689
// begin for i := 1 to vehicles do
28502: LD_ADDR_VAR 0 4
28506: PUSH
28507: DOUBLE
28508: LD_INT 1
28510: DEC
28511: ST_TO_ADDR
28512: LD_VAR 0 2
28516: PUSH
28517: FOR_TO
28518: IFFALSE 28687
// begin if hackTanksCaptured [ index ] = hackLimit then
28520: LD_EXP 95
28524: PUSH
28525: LD_VAR 0 5
28529: ARRAY
28530: PUSH
28531: LD_EXP 96
28535: EQUAL
28536: IFFALSE 28540
// break ;
28538: GO 28687
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28540: LD_ADDR_EXP 98
28544: PUSH
28545: LD_EXP 98
28549: PPUSH
28550: LD_VAR 0 5
28554: PPUSH
28555: LD_EXP 98
28559: PUSH
28560: LD_VAR 0 5
28564: ARRAY
28565: PUSH
28566: LD_INT 1
28568: PLUS
28569: PPUSH
28570: CALL_OW 1
28574: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28575: LD_ADDR_EXP 95
28579: PUSH
28580: LD_EXP 95
28584: PPUSH
28585: LD_VAR 0 5
28589: PUSH
28590: LD_EXP 95
28594: PUSH
28595: LD_VAR 0 5
28599: ARRAY
28600: PUSH
28601: LD_INT 1
28603: PLUS
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PPUSH
28609: LD_VAR 0 2
28613: PUSH
28614: LD_VAR 0 4
28618: ARRAY
28619: PUSH
28620: LD_VAR 0 2
28624: PUSH
28625: LD_VAR 0 4
28629: ARRAY
28630: PPUSH
28631: CALL_OW 255
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PPUSH
28640: CALL 36248 0 3
28644: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28645: LD_VAR 0 2
28649: PUSH
28650: LD_VAR 0 4
28654: ARRAY
28655: PPUSH
28656: LD_VAR 0 1
28660: PPUSH
28661: CALL_OW 255
28665: PPUSH
28666: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28670: LD_VAR 0 2
28674: PUSH
28675: LD_VAR 0 4
28679: ARRAY
28680: PPUSH
28681: CALL_OW 141
// end ;
28685: GO 28517
28687: POP
28688: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28689: LD_VAR 0 1
28693: PPUSH
28694: LD_EXP 95
28698: PUSH
28699: LD_VAR 0 5
28703: ARRAY
28704: PUSH
28705: LD_INT 0
28707: PLUS
28708: PPUSH
28709: CALL_OW 505
// end ;
28713: LD_VAR 0 3
28717: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28718: LD_INT 0
28720: PPUSH
28721: PPUSH
28722: PPUSH
28723: PPUSH
// if not hack in hackTanks then
28724: LD_VAR 0 1
28728: PUSH
28729: LD_EXP 94
28733: IN
28734: NOT
28735: IFFALSE 28739
// exit ;
28737: GO 28979
// index := GetElementIndex ( hackTanks , hack ) ;
28739: LD_ADDR_VAR 0 4
28743: PUSH
28744: LD_EXP 94
28748: PPUSH
28749: LD_VAR 0 1
28753: PPUSH
28754: CALL 36033 0 2
28758: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28759: LD_ADDR_VAR 0 3
28763: PUSH
28764: DOUBLE
28765: LD_EXP 95
28769: PUSH
28770: LD_VAR 0 4
28774: ARRAY
28775: INC
28776: ST_TO_ADDR
28777: LD_INT 1
28779: PUSH
28780: FOR_DOWNTO
28781: IFFALSE 28953
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28783: LD_ADDR_VAR 0 5
28787: PUSH
28788: LD_EXP 95
28792: PUSH
28793: LD_VAR 0 4
28797: ARRAY
28798: PUSH
28799: LD_VAR 0 3
28803: ARRAY
28804: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28805: LD_VAR 0 5
28809: PUSH
28810: LD_INT 1
28812: ARRAY
28813: PPUSH
28814: CALL_OW 302
28818: NOT
28819: PUSH
28820: LD_VAR 0 5
28824: PUSH
28825: LD_INT 1
28827: ARRAY
28828: PPUSH
28829: CALL_OW 255
28833: PUSH
28834: LD_VAR 0 1
28838: PPUSH
28839: CALL_OW 255
28843: NONEQUAL
28844: OR
28845: IFFALSE 28951
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28847: LD_VAR 0 5
28851: PUSH
28852: LD_INT 1
28854: ARRAY
28855: PPUSH
28856: CALL_OW 305
28860: PUSH
28861: LD_VAR 0 5
28865: PUSH
28866: LD_INT 1
28868: ARRAY
28869: PPUSH
28870: CALL_OW 255
28874: PUSH
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL_OW 255
28884: EQUAL
28885: AND
28886: IFFALSE 28910
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28888: LD_VAR 0 5
28892: PUSH
28893: LD_INT 1
28895: ARRAY
28896: PPUSH
28897: LD_VAR 0 5
28901: PUSH
28902: LD_INT 2
28904: ARRAY
28905: PPUSH
28906: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28910: LD_ADDR_EXP 95
28914: PUSH
28915: LD_EXP 95
28919: PPUSH
28920: LD_VAR 0 4
28924: PPUSH
28925: LD_EXP 95
28929: PUSH
28930: LD_VAR 0 4
28934: ARRAY
28935: PPUSH
28936: LD_VAR 0 3
28940: PPUSH
28941: CALL_OW 3
28945: PPUSH
28946: CALL_OW 1
28950: ST_TO_ADDR
// end ; end ;
28951: GO 28780
28953: POP
28954: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28955: LD_VAR 0 1
28959: PPUSH
28960: LD_EXP 95
28964: PUSH
28965: LD_VAR 0 4
28969: ARRAY
28970: PUSH
28971: LD_INT 0
28973: PLUS
28974: PPUSH
28975: CALL_OW 505
// end ;
28979: LD_VAR 0 2
28983: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28984: LD_INT 0
28986: PPUSH
28987: PPUSH
28988: PPUSH
28989: PPUSH
// if not hack in hackTanks then
28990: LD_VAR 0 1
28994: PUSH
28995: LD_EXP 94
28999: IN
29000: NOT
29001: IFFALSE 29005
// exit ;
29003: GO 29090
// index := GetElementIndex ( hackTanks , hack ) ;
29005: LD_ADDR_VAR 0 5
29009: PUSH
29010: LD_EXP 94
29014: PPUSH
29015: LD_VAR 0 1
29019: PPUSH
29020: CALL 36033 0 2
29024: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29025: LD_ADDR_VAR 0 4
29029: PUSH
29030: DOUBLE
29031: LD_INT 1
29033: DEC
29034: ST_TO_ADDR
29035: LD_EXP 95
29039: PUSH
29040: LD_VAR 0 5
29044: ARRAY
29045: PUSH
29046: FOR_TO
29047: IFFALSE 29088
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29049: LD_EXP 95
29053: PUSH
29054: LD_VAR 0 5
29058: ARRAY
29059: PUSH
29060: LD_VAR 0 4
29064: ARRAY
29065: PUSH
29066: LD_INT 1
29068: ARRAY
29069: PUSH
29070: LD_VAR 0 2
29074: EQUAL
29075: IFFALSE 29086
// KillUnit ( vehicle ) ;
29077: LD_VAR 0 2
29081: PPUSH
29082: CALL_OW 66
29086: GO 29046
29088: POP
29089: POP
// end ;
29090: LD_VAR 0 3
29094: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29095: LD_EXP 99
29099: NOT
29100: IFFALSE 29135
29102: GO 29104
29104: DISABLE
// begin initMiner := true ;
29105: LD_ADDR_EXP 99
29109: PUSH
29110: LD_INT 1
29112: ST_TO_ADDR
// minersList := [ ] ;
29113: LD_ADDR_EXP 100
29117: PUSH
29118: EMPTY
29119: ST_TO_ADDR
// minerMinesList := [ ] ;
29120: LD_ADDR_EXP 101
29124: PUSH
29125: EMPTY
29126: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29127: LD_ADDR_EXP 102
29131: PUSH
29132: LD_INT 5
29134: ST_TO_ADDR
// end ;
29135: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29136: LD_EXP 99
29140: PUSH
29141: LD_INT 34
29143: PUSH
29144: LD_EXP 21
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PPUSH
29153: CALL_OW 69
29157: AND
29158: IFFALSE 29621
29160: GO 29162
29162: DISABLE
29163: LD_INT 0
29165: PPUSH
29166: PPUSH
29167: PPUSH
29168: PPUSH
// begin enable ;
29169: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29170: LD_ADDR_VAR 0 1
29174: PUSH
29175: LD_INT 34
29177: PUSH
29178: LD_EXP 21
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PPUSH
29187: CALL_OW 69
29191: PUSH
29192: FOR_IN
29193: IFFALSE 29265
// begin if not i in minersList then
29195: LD_VAR 0 1
29199: PUSH
29200: LD_EXP 100
29204: IN
29205: NOT
29206: IFFALSE 29263
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29208: LD_ADDR_EXP 100
29212: PUSH
29213: LD_EXP 100
29217: PPUSH
29218: LD_EXP 100
29222: PUSH
29223: LD_INT 1
29225: PLUS
29226: PPUSH
29227: LD_VAR 0 1
29231: PPUSH
29232: CALL_OW 1
29236: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29237: LD_ADDR_EXP 101
29241: PUSH
29242: LD_EXP 101
29246: PPUSH
29247: LD_EXP 101
29251: PUSH
29252: LD_INT 1
29254: PLUS
29255: PPUSH
29256: EMPTY
29257: PPUSH
29258: CALL_OW 1
29262: ST_TO_ADDR
// end end ;
29263: GO 29192
29265: POP
29266: POP
// for i := minerMinesList downto 1 do
29267: LD_ADDR_VAR 0 1
29271: PUSH
29272: DOUBLE
29273: LD_EXP 101
29277: INC
29278: ST_TO_ADDR
29279: LD_INT 1
29281: PUSH
29282: FOR_DOWNTO
29283: IFFALSE 29619
// begin if IsLive ( minersList [ i ] ) then
29285: LD_EXP 100
29289: PUSH
29290: LD_VAR 0 1
29294: ARRAY
29295: PPUSH
29296: CALL_OW 300
29300: IFFALSE 29328
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29302: LD_EXP 100
29306: PUSH
29307: LD_VAR 0 1
29311: ARRAY
29312: PPUSH
29313: LD_EXP 101
29317: PUSH
29318: LD_VAR 0 1
29322: ARRAY
29323: PPUSH
29324: CALL_OW 505
// if not minerMinesList [ i ] then
29328: LD_EXP 101
29332: PUSH
29333: LD_VAR 0 1
29337: ARRAY
29338: NOT
29339: IFFALSE 29343
// continue ;
29341: GO 29282
// for j := minerMinesList [ i ] downto 1 do
29343: LD_ADDR_VAR 0 2
29347: PUSH
29348: DOUBLE
29349: LD_EXP 101
29353: PUSH
29354: LD_VAR 0 1
29358: ARRAY
29359: INC
29360: ST_TO_ADDR
29361: LD_INT 1
29363: PUSH
29364: FOR_DOWNTO
29365: IFFALSE 29615
// begin side := GetSide ( minersList [ i ] ) ;
29367: LD_ADDR_VAR 0 3
29371: PUSH
29372: LD_EXP 100
29376: PUSH
29377: LD_VAR 0 1
29381: ARRAY
29382: PPUSH
29383: CALL_OW 255
29387: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29388: LD_ADDR_VAR 0 4
29392: PUSH
29393: LD_EXP 101
29397: PUSH
29398: LD_VAR 0 1
29402: ARRAY
29403: PUSH
29404: LD_VAR 0 2
29408: ARRAY
29409: PUSH
29410: LD_INT 1
29412: ARRAY
29413: PPUSH
29414: LD_EXP 101
29418: PUSH
29419: LD_VAR 0 1
29423: ARRAY
29424: PUSH
29425: LD_VAR 0 2
29429: ARRAY
29430: PUSH
29431: LD_INT 2
29433: ARRAY
29434: PPUSH
29435: CALL_OW 428
29439: ST_TO_ADDR
// if not tmp then
29440: LD_VAR 0 4
29444: NOT
29445: IFFALSE 29449
// continue ;
29447: GO 29364
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29449: LD_VAR 0 4
29453: PUSH
29454: LD_INT 81
29456: PUSH
29457: LD_VAR 0 3
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PPUSH
29466: CALL_OW 69
29470: IN
29471: PUSH
29472: LD_EXP 101
29476: PUSH
29477: LD_VAR 0 1
29481: ARRAY
29482: PUSH
29483: LD_VAR 0 2
29487: ARRAY
29488: PUSH
29489: LD_INT 1
29491: ARRAY
29492: PPUSH
29493: LD_EXP 101
29497: PUSH
29498: LD_VAR 0 1
29502: ARRAY
29503: PUSH
29504: LD_VAR 0 2
29508: ARRAY
29509: PUSH
29510: LD_INT 2
29512: ARRAY
29513: PPUSH
29514: CALL_OW 458
29518: AND
29519: IFFALSE 29613
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29521: LD_EXP 101
29525: PUSH
29526: LD_VAR 0 1
29530: ARRAY
29531: PUSH
29532: LD_VAR 0 2
29536: ARRAY
29537: PUSH
29538: LD_INT 1
29540: ARRAY
29541: PPUSH
29542: LD_EXP 101
29546: PUSH
29547: LD_VAR 0 1
29551: ARRAY
29552: PUSH
29553: LD_VAR 0 2
29557: ARRAY
29558: PUSH
29559: LD_INT 2
29561: ARRAY
29562: PPUSH
29563: LD_VAR 0 3
29567: PPUSH
29568: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29572: LD_ADDR_EXP 101
29576: PUSH
29577: LD_EXP 101
29581: PPUSH
29582: LD_VAR 0 1
29586: PPUSH
29587: LD_EXP 101
29591: PUSH
29592: LD_VAR 0 1
29596: ARRAY
29597: PPUSH
29598: LD_VAR 0 2
29602: PPUSH
29603: CALL_OW 3
29607: PPUSH
29608: CALL_OW 1
29612: ST_TO_ADDR
// end ; end ;
29613: GO 29364
29615: POP
29616: POP
// end ;
29617: GO 29282
29619: POP
29620: POP
// end ;
29621: PPOPN 4
29623: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29624: LD_INT 0
29626: PPUSH
29627: PPUSH
// result := false ;
29628: LD_ADDR_VAR 0 4
29632: PUSH
29633: LD_INT 0
29635: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29636: LD_VAR 0 1
29640: PPUSH
29641: CALL_OW 264
29645: PUSH
29646: LD_EXP 21
29650: EQUAL
29651: NOT
29652: IFFALSE 29656
// exit ;
29654: GO 29896
// index := GetElementIndex ( minersList , unit ) ;
29656: LD_ADDR_VAR 0 5
29660: PUSH
29661: LD_EXP 100
29665: PPUSH
29666: LD_VAR 0 1
29670: PPUSH
29671: CALL 36033 0 2
29675: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29676: LD_EXP 101
29680: PUSH
29681: LD_VAR 0 5
29685: ARRAY
29686: PUSH
29687: LD_EXP 102
29691: GREATEREQUAL
29692: IFFALSE 29696
// exit ;
29694: GO 29896
// ComMoveXY ( unit , x , y ) ;
29696: LD_VAR 0 1
29700: PPUSH
29701: LD_VAR 0 2
29705: PPUSH
29706: LD_VAR 0 3
29710: PPUSH
29711: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29715: LD_INT 35
29717: PPUSH
29718: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29722: LD_VAR 0 1
29726: PPUSH
29727: LD_VAR 0 2
29731: PPUSH
29732: LD_VAR 0 3
29736: PPUSH
29737: CALL 67319 0 3
29741: NOT
29742: PUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 314
29752: AND
29753: IFFALSE 29757
// exit ;
29755: GO 29896
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29757: LD_VAR 0 2
29761: PPUSH
29762: LD_VAR 0 3
29766: PPUSH
29767: CALL_OW 428
29771: PUSH
29772: LD_VAR 0 1
29776: EQUAL
29777: PUSH
29778: LD_VAR 0 1
29782: PPUSH
29783: CALL_OW 314
29787: NOT
29788: AND
29789: IFFALSE 29715
// PlaySoundXY ( x , y , PlantMine ) ;
29791: LD_VAR 0 2
29795: PPUSH
29796: LD_VAR 0 3
29800: PPUSH
29801: LD_STRING PlantMine
29803: PPUSH
29804: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29808: LD_VAR 0 2
29812: PPUSH
29813: LD_VAR 0 3
29817: PPUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 255
29827: PPUSH
29828: LD_INT 0
29830: PPUSH
29831: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29835: LD_ADDR_EXP 101
29839: PUSH
29840: LD_EXP 101
29844: PPUSH
29845: LD_VAR 0 5
29849: PUSH
29850: LD_EXP 101
29854: PUSH
29855: LD_VAR 0 5
29859: ARRAY
29860: PUSH
29861: LD_INT 1
29863: PLUS
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PPUSH
29869: LD_VAR 0 2
29873: PUSH
29874: LD_VAR 0 3
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PPUSH
29883: CALL 36248 0 3
29887: ST_TO_ADDR
// result := true ;
29888: LD_ADDR_VAR 0 4
29892: PUSH
29893: LD_INT 1
29895: ST_TO_ADDR
// end ;
29896: LD_VAR 0 4
29900: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29901: LD_INT 0
29903: PPUSH
29904: PPUSH
29905: PPUSH
// if not unit in minersList then
29906: LD_VAR 0 1
29910: PUSH
29911: LD_EXP 100
29915: IN
29916: NOT
29917: IFFALSE 29921
// exit ;
29919: GO 30313
// index := GetElementIndex ( minersList , unit ) ;
29921: LD_ADDR_VAR 0 6
29925: PUSH
29926: LD_EXP 100
29930: PPUSH
29931: LD_VAR 0 1
29935: PPUSH
29936: CALL 36033 0 2
29940: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29941: LD_ADDR_VAR 0 5
29945: PUSH
29946: DOUBLE
29947: LD_EXP 101
29951: PUSH
29952: LD_VAR 0 6
29956: ARRAY
29957: INC
29958: ST_TO_ADDR
29959: LD_INT 1
29961: PUSH
29962: FOR_DOWNTO
29963: IFFALSE 30124
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29965: LD_EXP 101
29969: PUSH
29970: LD_VAR 0 6
29974: ARRAY
29975: PUSH
29976: LD_VAR 0 5
29980: ARRAY
29981: PUSH
29982: LD_INT 1
29984: ARRAY
29985: PUSH
29986: LD_VAR 0 2
29990: EQUAL
29991: PUSH
29992: LD_EXP 101
29996: PUSH
29997: LD_VAR 0 6
30001: ARRAY
30002: PUSH
30003: LD_VAR 0 5
30007: ARRAY
30008: PUSH
30009: LD_INT 2
30011: ARRAY
30012: PUSH
30013: LD_VAR 0 3
30017: EQUAL
30018: AND
30019: IFFALSE 30122
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30021: LD_EXP 101
30025: PUSH
30026: LD_VAR 0 6
30030: ARRAY
30031: PUSH
30032: LD_VAR 0 5
30036: ARRAY
30037: PUSH
30038: LD_INT 1
30040: ARRAY
30041: PPUSH
30042: LD_EXP 101
30046: PUSH
30047: LD_VAR 0 6
30051: ARRAY
30052: PUSH
30053: LD_VAR 0 5
30057: ARRAY
30058: PUSH
30059: LD_INT 2
30061: ARRAY
30062: PPUSH
30063: LD_VAR 0 1
30067: PPUSH
30068: CALL_OW 255
30072: PPUSH
30073: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30077: LD_ADDR_EXP 101
30081: PUSH
30082: LD_EXP 101
30086: PPUSH
30087: LD_VAR 0 6
30091: PPUSH
30092: LD_EXP 101
30096: PUSH
30097: LD_VAR 0 6
30101: ARRAY
30102: PPUSH
30103: LD_VAR 0 5
30107: PPUSH
30108: CALL_OW 3
30112: PPUSH
30113: CALL_OW 1
30117: ST_TO_ADDR
// exit ;
30118: POP
30119: POP
30120: GO 30313
// end ; end ;
30122: GO 29962
30124: POP
30125: POP
// for i := minerMinesList [ index ] downto 1 do
30126: LD_ADDR_VAR 0 5
30130: PUSH
30131: DOUBLE
30132: LD_EXP 101
30136: PUSH
30137: LD_VAR 0 6
30141: ARRAY
30142: INC
30143: ST_TO_ADDR
30144: LD_INT 1
30146: PUSH
30147: FOR_DOWNTO
30148: IFFALSE 30311
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30150: LD_EXP 101
30154: PUSH
30155: LD_VAR 0 6
30159: ARRAY
30160: PUSH
30161: LD_VAR 0 5
30165: ARRAY
30166: PUSH
30167: LD_INT 1
30169: ARRAY
30170: PPUSH
30171: LD_EXP 101
30175: PUSH
30176: LD_VAR 0 6
30180: ARRAY
30181: PUSH
30182: LD_VAR 0 5
30186: ARRAY
30187: PUSH
30188: LD_INT 2
30190: ARRAY
30191: PPUSH
30192: LD_VAR 0 2
30196: PPUSH
30197: LD_VAR 0 3
30201: PPUSH
30202: CALL_OW 298
30206: PUSH
30207: LD_INT 6
30209: LESS
30210: IFFALSE 30309
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30212: LD_EXP 101
30216: PUSH
30217: LD_VAR 0 6
30221: ARRAY
30222: PUSH
30223: LD_VAR 0 5
30227: ARRAY
30228: PUSH
30229: LD_INT 1
30231: ARRAY
30232: PPUSH
30233: LD_EXP 101
30237: PUSH
30238: LD_VAR 0 6
30242: ARRAY
30243: PUSH
30244: LD_VAR 0 5
30248: ARRAY
30249: PUSH
30250: LD_INT 2
30252: ARRAY
30253: PPUSH
30254: LD_VAR 0 1
30258: PPUSH
30259: CALL_OW 255
30263: PPUSH
30264: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30268: LD_ADDR_EXP 101
30272: PUSH
30273: LD_EXP 101
30277: PPUSH
30278: LD_VAR 0 6
30282: PPUSH
30283: LD_EXP 101
30287: PUSH
30288: LD_VAR 0 6
30292: ARRAY
30293: PPUSH
30294: LD_VAR 0 5
30298: PPUSH
30299: CALL_OW 3
30303: PPUSH
30304: CALL_OW 1
30308: ST_TO_ADDR
// end ; end ;
30309: GO 30147
30311: POP
30312: POP
// end ;
30313: LD_VAR 0 4
30317: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30318: LD_INT 0
30320: PPUSH
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
30326: PPUSH
30327: PPUSH
30328: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30329: LD_VAR 0 1
30333: PPUSH
30334: CALL_OW 264
30338: PUSH
30339: LD_EXP 21
30343: EQUAL
30344: NOT
30345: PUSH
30346: LD_VAR 0 1
30350: PUSH
30351: LD_EXP 100
30355: IN
30356: NOT
30357: OR
30358: IFFALSE 30362
// exit ;
30360: GO 30684
// index := GetElementIndex ( minersList , unit ) ;
30362: LD_ADDR_VAR 0 6
30366: PUSH
30367: LD_EXP 100
30371: PPUSH
30372: LD_VAR 0 1
30376: PPUSH
30377: CALL 36033 0 2
30381: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30382: LD_ADDR_VAR 0 8
30386: PUSH
30387: LD_EXP 102
30391: PUSH
30392: LD_EXP 101
30396: PUSH
30397: LD_VAR 0 6
30401: ARRAY
30402: MINUS
30403: ST_TO_ADDR
// if not minesFreeAmount then
30404: LD_VAR 0 8
30408: NOT
30409: IFFALSE 30413
// exit ;
30411: GO 30684
// tmp := [ ] ;
30413: LD_ADDR_VAR 0 7
30417: PUSH
30418: EMPTY
30419: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30420: LD_ADDR_VAR 0 5
30424: PUSH
30425: DOUBLE
30426: LD_INT 1
30428: DEC
30429: ST_TO_ADDR
30430: LD_VAR 0 8
30434: PUSH
30435: FOR_TO
30436: IFFALSE 30631
// begin _d := rand ( 0 , 5 ) ;
30438: LD_ADDR_VAR 0 11
30442: PUSH
30443: LD_INT 0
30445: PPUSH
30446: LD_INT 5
30448: PPUSH
30449: CALL_OW 12
30453: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30454: LD_ADDR_VAR 0 12
30458: PUSH
30459: LD_INT 2
30461: PPUSH
30462: LD_INT 6
30464: PPUSH
30465: CALL_OW 12
30469: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30470: LD_ADDR_VAR 0 9
30474: PUSH
30475: LD_VAR 0 2
30479: PPUSH
30480: LD_VAR 0 11
30484: PPUSH
30485: LD_VAR 0 12
30489: PPUSH
30490: CALL_OW 272
30494: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30495: LD_ADDR_VAR 0 10
30499: PUSH
30500: LD_VAR 0 3
30504: PPUSH
30505: LD_VAR 0 11
30509: PPUSH
30510: LD_VAR 0 12
30514: PPUSH
30515: CALL_OW 273
30519: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30520: LD_VAR 0 9
30524: PPUSH
30525: LD_VAR 0 10
30529: PPUSH
30530: CALL_OW 488
30534: PUSH
30535: LD_VAR 0 9
30539: PUSH
30540: LD_VAR 0 10
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_VAR 0 7
30553: IN
30554: NOT
30555: AND
30556: PUSH
30557: LD_VAR 0 9
30561: PPUSH
30562: LD_VAR 0 10
30566: PPUSH
30567: CALL_OW 458
30571: NOT
30572: AND
30573: IFFALSE 30615
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30575: LD_ADDR_VAR 0 7
30579: PUSH
30580: LD_VAR 0 7
30584: PPUSH
30585: LD_VAR 0 7
30589: PUSH
30590: LD_INT 1
30592: PLUS
30593: PPUSH
30594: LD_VAR 0 9
30598: PUSH
30599: LD_VAR 0 10
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PPUSH
30608: CALL_OW 1
30612: ST_TO_ADDR
30613: GO 30629
// i := i - 1 ;
30615: LD_ADDR_VAR 0 5
30619: PUSH
30620: LD_VAR 0 5
30624: PUSH
30625: LD_INT 1
30627: MINUS
30628: ST_TO_ADDR
// end ;
30629: GO 30435
30631: POP
30632: POP
// for i in tmp do
30633: LD_ADDR_VAR 0 5
30637: PUSH
30638: LD_VAR 0 7
30642: PUSH
30643: FOR_IN
30644: IFFALSE 30682
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30646: LD_VAR 0 1
30650: PPUSH
30651: LD_VAR 0 5
30655: PUSH
30656: LD_INT 1
30658: ARRAY
30659: PPUSH
30660: LD_VAR 0 5
30664: PUSH
30665: LD_INT 2
30667: ARRAY
30668: PPUSH
30669: CALL 29624 0 3
30673: NOT
30674: IFFALSE 30680
// exit ;
30676: POP
30677: POP
30678: GO 30684
30680: GO 30643
30682: POP
30683: POP
// end ;
30684: LD_VAR 0 4
30688: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30689: LD_INT 0
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
// if not GetClass ( unit ) = class_sniper then
30698: LD_VAR 0 1
30702: PPUSH
30703: CALL_OW 257
30707: PUSH
30708: LD_INT 5
30710: EQUAL
30711: NOT
30712: IFFALSE 30716
// exit ;
30714: GO 31104
// dist := 8 ;
30716: LD_ADDR_VAR 0 5
30720: PUSH
30721: LD_INT 8
30723: ST_TO_ADDR
// viewRange := 12 ;
30724: LD_ADDR_VAR 0 7
30728: PUSH
30729: LD_INT 12
30731: ST_TO_ADDR
// side := GetSide ( unit ) ;
30732: LD_ADDR_VAR 0 6
30736: PUSH
30737: LD_VAR 0 1
30741: PPUSH
30742: CALL_OW 255
30746: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30747: LD_INT 61
30749: PPUSH
30750: LD_VAR 0 6
30754: PPUSH
30755: CALL_OW 321
30759: PUSH
30760: LD_INT 2
30762: EQUAL
30763: IFFALSE 30773
// viewRange := 16 ;
30765: LD_ADDR_VAR 0 7
30769: PUSH
30770: LD_INT 16
30772: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30773: LD_VAR 0 1
30777: PPUSH
30778: LD_VAR 0 2
30782: PPUSH
30783: LD_VAR 0 3
30787: PPUSH
30788: CALL_OW 297
30792: PUSH
30793: LD_VAR 0 5
30797: GREATER
30798: IFFALSE 30877
// begin ComMoveXY ( unit , x , y ) ;
30800: LD_VAR 0 1
30804: PPUSH
30805: LD_VAR 0 2
30809: PPUSH
30810: LD_VAR 0 3
30814: PPUSH
30815: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30819: LD_INT 35
30821: PPUSH
30822: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30826: LD_VAR 0 1
30830: PPUSH
30831: LD_VAR 0 2
30835: PPUSH
30836: LD_VAR 0 3
30840: PPUSH
30841: CALL 67319 0 3
30845: NOT
30846: IFFALSE 30850
// exit ;
30848: GO 31104
// until GetDistUnitXY ( unit , x , y ) < dist ;
30850: LD_VAR 0 1
30854: PPUSH
30855: LD_VAR 0 2
30859: PPUSH
30860: LD_VAR 0 3
30864: PPUSH
30865: CALL_OW 297
30869: PUSH
30870: LD_VAR 0 5
30874: LESS
30875: IFFALSE 30819
// end ; ComTurnXY ( unit , x , y ) ;
30877: LD_VAR 0 1
30881: PPUSH
30882: LD_VAR 0 2
30886: PPUSH
30887: LD_VAR 0 3
30891: PPUSH
30892: CALL_OW 118
// wait ( 5 ) ;
30896: LD_INT 5
30898: PPUSH
30899: CALL_OW 67
// _d := GetDir ( unit ) ;
30903: LD_ADDR_VAR 0 10
30907: PUSH
30908: LD_VAR 0 1
30912: PPUSH
30913: CALL_OW 254
30917: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30918: LD_ADDR_VAR 0 8
30922: PUSH
30923: LD_VAR 0 1
30927: PPUSH
30928: CALL_OW 250
30932: PPUSH
30933: LD_VAR 0 10
30937: PPUSH
30938: LD_VAR 0 5
30942: PPUSH
30943: CALL_OW 272
30947: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30948: LD_ADDR_VAR 0 9
30952: PUSH
30953: LD_VAR 0 1
30957: PPUSH
30958: CALL_OW 251
30962: PPUSH
30963: LD_VAR 0 10
30967: PPUSH
30968: LD_VAR 0 5
30972: PPUSH
30973: CALL_OW 273
30977: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30978: LD_VAR 0 8
30982: PPUSH
30983: LD_VAR 0 9
30987: PPUSH
30988: CALL_OW 488
30992: NOT
30993: IFFALSE 30997
// exit ;
30995: GO 31104
// ComAnimCustom ( unit , 1 ) ;
30997: LD_VAR 0 1
31001: PPUSH
31002: LD_INT 1
31004: PPUSH
31005: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31009: LD_VAR 0 8
31013: PPUSH
31014: LD_VAR 0 9
31018: PPUSH
31019: LD_VAR 0 6
31023: PPUSH
31024: LD_VAR 0 7
31028: PPUSH
31029: CALL_OW 330
// repeat wait ( 1 ) ;
31033: LD_INT 1
31035: PPUSH
31036: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31040: LD_VAR 0 1
31044: PPUSH
31045: CALL_OW 316
31049: PUSH
31050: LD_VAR 0 1
31054: PPUSH
31055: CALL_OW 314
31059: OR
31060: PUSH
31061: LD_VAR 0 1
31065: PPUSH
31066: CALL_OW 302
31070: NOT
31071: OR
31072: PUSH
31073: LD_VAR 0 1
31077: PPUSH
31078: CALL_OW 301
31082: OR
31083: IFFALSE 31033
// RemoveSeeing ( _x , _y , side ) ;
31085: LD_VAR 0 8
31089: PPUSH
31090: LD_VAR 0 9
31094: PPUSH
31095: LD_VAR 0 6
31099: PPUSH
31100: CALL_OW 331
// end ; end_of_file
31104: LD_VAR 0 4
31108: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31109: LD_INT 0
31111: PPUSH
31112: PPUSH
// if exist_mode then
31113: LD_VAR 0 2
31117: IFFALSE 31142
// unit := CreateCharacter ( prefix & ident ) else
31119: LD_ADDR_VAR 0 5
31123: PUSH
31124: LD_VAR 0 3
31128: PUSH
31129: LD_VAR 0 1
31133: STR
31134: PPUSH
31135: CALL_OW 34
31139: ST_TO_ADDR
31140: GO 31157
// unit := NewCharacter ( ident ) ;
31142: LD_ADDR_VAR 0 5
31146: PUSH
31147: LD_VAR 0 1
31151: PPUSH
31152: CALL_OW 25
31156: ST_TO_ADDR
// result := unit ;
31157: LD_ADDR_VAR 0 4
31161: PUSH
31162: LD_VAR 0 5
31166: ST_TO_ADDR
// end ;
31167: LD_VAR 0 4
31171: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31172: LD_INT 0
31174: PPUSH
31175: PPUSH
// if not side or not nation then
31176: LD_VAR 0 1
31180: NOT
31181: PUSH
31182: LD_VAR 0 2
31186: NOT
31187: OR
31188: IFFALSE 31192
// exit ;
31190: GO 31960
// case nation of nation_american :
31192: LD_VAR 0 2
31196: PUSH
31197: LD_INT 1
31199: DOUBLE
31200: EQUAL
31201: IFTRUE 31205
31203: GO 31419
31205: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31206: LD_ADDR_VAR 0 4
31210: PUSH
31211: LD_INT 35
31213: PUSH
31214: LD_INT 45
31216: PUSH
31217: LD_INT 46
31219: PUSH
31220: LD_INT 47
31222: PUSH
31223: LD_INT 82
31225: PUSH
31226: LD_INT 83
31228: PUSH
31229: LD_INT 84
31231: PUSH
31232: LD_INT 85
31234: PUSH
31235: LD_INT 86
31237: PUSH
31238: LD_INT 1
31240: PUSH
31241: LD_INT 2
31243: PUSH
31244: LD_INT 6
31246: PUSH
31247: LD_INT 15
31249: PUSH
31250: LD_INT 16
31252: PUSH
31253: LD_INT 7
31255: PUSH
31256: LD_INT 12
31258: PUSH
31259: LD_INT 13
31261: PUSH
31262: LD_INT 10
31264: PUSH
31265: LD_INT 14
31267: PUSH
31268: LD_INT 20
31270: PUSH
31271: LD_INT 21
31273: PUSH
31274: LD_INT 22
31276: PUSH
31277: LD_INT 25
31279: PUSH
31280: LD_INT 32
31282: PUSH
31283: LD_INT 27
31285: PUSH
31286: LD_INT 36
31288: PUSH
31289: LD_INT 69
31291: PUSH
31292: LD_INT 39
31294: PUSH
31295: LD_INT 34
31297: PUSH
31298: LD_INT 40
31300: PUSH
31301: LD_INT 48
31303: PUSH
31304: LD_INT 49
31306: PUSH
31307: LD_INT 50
31309: PUSH
31310: LD_INT 51
31312: PUSH
31313: LD_INT 52
31315: PUSH
31316: LD_INT 53
31318: PUSH
31319: LD_INT 54
31321: PUSH
31322: LD_INT 55
31324: PUSH
31325: LD_INT 56
31327: PUSH
31328: LD_INT 57
31330: PUSH
31331: LD_INT 58
31333: PUSH
31334: LD_INT 59
31336: PUSH
31337: LD_INT 60
31339: PUSH
31340: LD_INT 61
31342: PUSH
31343: LD_INT 62
31345: PUSH
31346: LD_INT 80
31348: PUSH
31349: LD_INT 82
31351: PUSH
31352: LD_INT 83
31354: PUSH
31355: LD_INT 84
31357: PUSH
31358: LD_INT 85
31360: PUSH
31361: LD_INT 86
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: ST_TO_ADDR
31417: GO 31884
31419: LD_INT 2
31421: DOUBLE
31422: EQUAL
31423: IFTRUE 31427
31425: GO 31653
31427: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31428: LD_ADDR_VAR 0 4
31432: PUSH
31433: LD_INT 35
31435: PUSH
31436: LD_INT 45
31438: PUSH
31439: LD_INT 46
31441: PUSH
31442: LD_INT 47
31444: PUSH
31445: LD_INT 82
31447: PUSH
31448: LD_INT 83
31450: PUSH
31451: LD_INT 84
31453: PUSH
31454: LD_INT 85
31456: PUSH
31457: LD_INT 87
31459: PUSH
31460: LD_INT 70
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: LD_INT 11
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: LD_INT 4
31474: PUSH
31475: LD_INT 5
31477: PUSH
31478: LD_INT 6
31480: PUSH
31481: LD_INT 15
31483: PUSH
31484: LD_INT 18
31486: PUSH
31487: LD_INT 7
31489: PUSH
31490: LD_INT 17
31492: PUSH
31493: LD_INT 8
31495: PUSH
31496: LD_INT 20
31498: PUSH
31499: LD_INT 21
31501: PUSH
31502: LD_INT 22
31504: PUSH
31505: LD_INT 72
31507: PUSH
31508: LD_INT 26
31510: PUSH
31511: LD_INT 69
31513: PUSH
31514: LD_INT 39
31516: PUSH
31517: LD_INT 40
31519: PUSH
31520: LD_INT 41
31522: PUSH
31523: LD_INT 42
31525: PUSH
31526: LD_INT 43
31528: PUSH
31529: LD_INT 48
31531: PUSH
31532: LD_INT 49
31534: PUSH
31535: LD_INT 50
31537: PUSH
31538: LD_INT 51
31540: PUSH
31541: LD_INT 52
31543: PUSH
31544: LD_INT 53
31546: PUSH
31547: LD_INT 54
31549: PUSH
31550: LD_INT 55
31552: PUSH
31553: LD_INT 56
31555: PUSH
31556: LD_INT 60
31558: PUSH
31559: LD_INT 61
31561: PUSH
31562: LD_INT 62
31564: PUSH
31565: LD_INT 66
31567: PUSH
31568: LD_INT 67
31570: PUSH
31571: LD_INT 68
31573: PUSH
31574: LD_INT 81
31576: PUSH
31577: LD_INT 82
31579: PUSH
31580: LD_INT 83
31582: PUSH
31583: LD_INT 84
31585: PUSH
31586: LD_INT 85
31588: PUSH
31589: LD_INT 87
31591: PUSH
31592: LD_INT 88
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: ST_TO_ADDR
31651: GO 31884
31653: LD_INT 3
31655: DOUBLE
31656: EQUAL
31657: IFTRUE 31661
31659: GO 31883
31661: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31662: LD_ADDR_VAR 0 4
31666: PUSH
31667: LD_INT 46
31669: PUSH
31670: LD_INT 47
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: LD_INT 82
31681: PUSH
31682: LD_INT 83
31684: PUSH
31685: LD_INT 84
31687: PUSH
31688: LD_INT 85
31690: PUSH
31691: LD_INT 86
31693: PUSH
31694: LD_INT 11
31696: PUSH
31697: LD_INT 9
31699: PUSH
31700: LD_INT 20
31702: PUSH
31703: LD_INT 19
31705: PUSH
31706: LD_INT 21
31708: PUSH
31709: LD_INT 24
31711: PUSH
31712: LD_INT 22
31714: PUSH
31715: LD_INT 25
31717: PUSH
31718: LD_INT 28
31720: PUSH
31721: LD_INT 29
31723: PUSH
31724: LD_INT 30
31726: PUSH
31727: LD_INT 31
31729: PUSH
31730: LD_INT 37
31732: PUSH
31733: LD_INT 38
31735: PUSH
31736: LD_INT 32
31738: PUSH
31739: LD_INT 27
31741: PUSH
31742: LD_INT 33
31744: PUSH
31745: LD_INT 69
31747: PUSH
31748: LD_INT 39
31750: PUSH
31751: LD_INT 34
31753: PUSH
31754: LD_INT 40
31756: PUSH
31757: LD_INT 71
31759: PUSH
31760: LD_INT 23
31762: PUSH
31763: LD_INT 44
31765: PUSH
31766: LD_INT 48
31768: PUSH
31769: LD_INT 49
31771: PUSH
31772: LD_INT 50
31774: PUSH
31775: LD_INT 51
31777: PUSH
31778: LD_INT 52
31780: PUSH
31781: LD_INT 53
31783: PUSH
31784: LD_INT 54
31786: PUSH
31787: LD_INT 55
31789: PUSH
31790: LD_INT 56
31792: PUSH
31793: LD_INT 57
31795: PUSH
31796: LD_INT 58
31798: PUSH
31799: LD_INT 59
31801: PUSH
31802: LD_INT 63
31804: PUSH
31805: LD_INT 64
31807: PUSH
31808: LD_INT 65
31810: PUSH
31811: LD_INT 82
31813: PUSH
31814: LD_INT 83
31816: PUSH
31817: LD_INT 84
31819: PUSH
31820: LD_INT 85
31822: PUSH
31823: LD_INT 86
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: ST_TO_ADDR
31881: GO 31884
31883: POP
// if state > - 1 and state < 3 then
31884: LD_VAR 0 3
31888: PUSH
31889: LD_INT 1
31891: NEG
31892: GREATER
31893: PUSH
31894: LD_VAR 0 3
31898: PUSH
31899: LD_INT 3
31901: LESS
31902: AND
31903: IFFALSE 31960
// for i in result do
31905: LD_ADDR_VAR 0 5
31909: PUSH
31910: LD_VAR 0 4
31914: PUSH
31915: FOR_IN
31916: IFFALSE 31958
// if GetTech ( i , side ) <> state then
31918: LD_VAR 0 5
31922: PPUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: CALL_OW 321
31932: PUSH
31933: LD_VAR 0 3
31937: NONEQUAL
31938: IFFALSE 31956
// result := result diff i ;
31940: LD_ADDR_VAR 0 4
31944: PUSH
31945: LD_VAR 0 4
31949: PUSH
31950: LD_VAR 0 5
31954: DIFF
31955: ST_TO_ADDR
31956: GO 31915
31958: POP
31959: POP
// end ;
31960: LD_VAR 0 4
31964: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31965: LD_INT 0
31967: PPUSH
31968: PPUSH
31969: PPUSH
// result := true ;
31970: LD_ADDR_VAR 0 3
31974: PUSH
31975: LD_INT 1
31977: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31978: LD_ADDR_VAR 0 5
31982: PUSH
31983: LD_VAR 0 2
31987: PPUSH
31988: CALL_OW 480
31992: ST_TO_ADDR
// if not tmp then
31993: LD_VAR 0 5
31997: NOT
31998: IFFALSE 32002
// exit ;
32000: GO 32051
// for i in tmp do
32002: LD_ADDR_VAR 0 4
32006: PUSH
32007: LD_VAR 0 5
32011: PUSH
32012: FOR_IN
32013: IFFALSE 32049
// if GetTech ( i , side ) <> state_researched then
32015: LD_VAR 0 4
32019: PPUSH
32020: LD_VAR 0 1
32024: PPUSH
32025: CALL_OW 321
32029: PUSH
32030: LD_INT 2
32032: NONEQUAL
32033: IFFALSE 32047
// begin result := false ;
32035: LD_ADDR_VAR 0 3
32039: PUSH
32040: LD_INT 0
32042: ST_TO_ADDR
// exit ;
32043: POP
32044: POP
32045: GO 32051
// end ;
32047: GO 32012
32049: POP
32050: POP
// end ;
32051: LD_VAR 0 3
32055: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32056: LD_INT 0
32058: PPUSH
32059: PPUSH
32060: PPUSH
32061: PPUSH
32062: PPUSH
32063: PPUSH
32064: PPUSH
32065: PPUSH
32066: PPUSH
32067: PPUSH
32068: PPUSH
32069: PPUSH
32070: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32071: LD_VAR 0 1
32075: NOT
32076: PUSH
32077: LD_VAR 0 1
32081: PPUSH
32082: CALL_OW 257
32086: PUSH
32087: LD_INT 9
32089: NONEQUAL
32090: OR
32091: IFFALSE 32095
// exit ;
32093: GO 32668
// side := GetSide ( unit ) ;
32095: LD_ADDR_VAR 0 9
32099: PUSH
32100: LD_VAR 0 1
32104: PPUSH
32105: CALL_OW 255
32109: ST_TO_ADDR
// tech_space := tech_spacanom ;
32110: LD_ADDR_VAR 0 12
32114: PUSH
32115: LD_INT 29
32117: ST_TO_ADDR
// tech_time := tech_taurad ;
32118: LD_ADDR_VAR 0 13
32122: PUSH
32123: LD_INT 28
32125: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32126: LD_ADDR_VAR 0 11
32130: PUSH
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 310
32140: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32141: LD_VAR 0 11
32145: PPUSH
32146: CALL_OW 247
32150: PUSH
32151: LD_INT 2
32153: EQUAL
32154: IFFALSE 32158
// exit ;
32156: GO 32668
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32158: LD_ADDR_VAR 0 8
32162: PUSH
32163: LD_INT 81
32165: PUSH
32166: LD_VAR 0 9
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 3
32177: PUSH
32178: LD_INT 21
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PPUSH
32196: CALL_OW 69
32200: ST_TO_ADDR
// if not tmp then
32201: LD_VAR 0 8
32205: NOT
32206: IFFALSE 32210
// exit ;
32208: GO 32668
// if in_unit then
32210: LD_VAR 0 11
32214: IFFALSE 32238
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32216: LD_ADDR_VAR 0 10
32220: PUSH
32221: LD_VAR 0 8
32225: PPUSH
32226: LD_VAR 0 11
32230: PPUSH
32231: CALL_OW 74
32235: ST_TO_ADDR
32236: GO 32258
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32238: LD_ADDR_VAR 0 10
32242: PUSH
32243: LD_VAR 0 8
32247: PPUSH
32248: LD_VAR 0 1
32252: PPUSH
32253: CALL_OW 74
32257: ST_TO_ADDR
// if not enemy then
32258: LD_VAR 0 10
32262: NOT
32263: IFFALSE 32267
// exit ;
32265: GO 32668
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32267: LD_VAR 0 11
32271: PUSH
32272: LD_VAR 0 11
32276: PPUSH
32277: LD_VAR 0 10
32281: PPUSH
32282: CALL_OW 296
32286: PUSH
32287: LD_INT 13
32289: GREATER
32290: AND
32291: PUSH
32292: LD_VAR 0 1
32296: PPUSH
32297: LD_VAR 0 10
32301: PPUSH
32302: CALL_OW 296
32306: PUSH
32307: LD_INT 12
32309: GREATER
32310: OR
32311: IFFALSE 32315
// exit ;
32313: GO 32668
// missile := [ 1 ] ;
32315: LD_ADDR_VAR 0 14
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: EMPTY
32324: LIST
32325: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32326: LD_VAR 0 9
32330: PPUSH
32331: LD_VAR 0 12
32335: PPUSH
32336: CALL_OW 325
32340: IFFALSE 32369
// missile := Replace ( missile , missile + 1 , 2 ) ;
32342: LD_ADDR_VAR 0 14
32346: PUSH
32347: LD_VAR 0 14
32351: PPUSH
32352: LD_VAR 0 14
32356: PUSH
32357: LD_INT 1
32359: PLUS
32360: PPUSH
32361: LD_INT 2
32363: PPUSH
32364: CALL_OW 1
32368: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32369: LD_VAR 0 9
32373: PPUSH
32374: LD_VAR 0 13
32378: PPUSH
32379: CALL_OW 325
32383: PUSH
32384: LD_VAR 0 10
32388: PPUSH
32389: CALL_OW 255
32393: PPUSH
32394: LD_VAR 0 13
32398: PPUSH
32399: CALL_OW 325
32403: NOT
32404: AND
32405: IFFALSE 32434
// missile := Replace ( missile , missile + 1 , 3 ) ;
32407: LD_ADDR_VAR 0 14
32411: PUSH
32412: LD_VAR 0 14
32416: PPUSH
32417: LD_VAR 0 14
32421: PUSH
32422: LD_INT 1
32424: PLUS
32425: PPUSH
32426: LD_INT 3
32428: PPUSH
32429: CALL_OW 1
32433: ST_TO_ADDR
// if missile < 2 then
32434: LD_VAR 0 14
32438: PUSH
32439: LD_INT 2
32441: LESS
32442: IFFALSE 32446
// exit ;
32444: GO 32668
// x := GetX ( enemy ) ;
32446: LD_ADDR_VAR 0 4
32450: PUSH
32451: LD_VAR 0 10
32455: PPUSH
32456: CALL_OW 250
32460: ST_TO_ADDR
// y := GetY ( enemy ) ;
32461: LD_ADDR_VAR 0 5
32465: PUSH
32466: LD_VAR 0 10
32470: PPUSH
32471: CALL_OW 251
32475: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32476: LD_ADDR_VAR 0 6
32480: PUSH
32481: LD_VAR 0 4
32485: PUSH
32486: LD_INT 1
32488: NEG
32489: PPUSH
32490: LD_INT 1
32492: PPUSH
32493: CALL_OW 12
32497: PLUS
32498: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32499: LD_ADDR_VAR 0 7
32503: PUSH
32504: LD_VAR 0 5
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PPUSH
32513: LD_INT 1
32515: PPUSH
32516: CALL_OW 12
32520: PLUS
32521: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32522: LD_VAR 0 6
32526: PPUSH
32527: LD_VAR 0 7
32531: PPUSH
32532: CALL_OW 488
32536: NOT
32537: IFFALSE 32559
// begin _x := x ;
32539: LD_ADDR_VAR 0 6
32543: PUSH
32544: LD_VAR 0 4
32548: ST_TO_ADDR
// _y := y ;
32549: LD_ADDR_VAR 0 7
32553: PUSH
32554: LD_VAR 0 5
32558: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32559: LD_ADDR_VAR 0 3
32563: PUSH
32564: LD_INT 1
32566: PPUSH
32567: LD_VAR 0 14
32571: PPUSH
32572: CALL_OW 12
32576: ST_TO_ADDR
// case i of 1 :
32577: LD_VAR 0 3
32581: PUSH
32582: LD_INT 1
32584: DOUBLE
32585: EQUAL
32586: IFTRUE 32590
32588: GO 32607
32590: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32591: LD_VAR 0 1
32595: PPUSH
32596: LD_VAR 0 10
32600: PPUSH
32601: CALL_OW 115
32605: GO 32668
32607: LD_INT 2
32609: DOUBLE
32610: EQUAL
32611: IFTRUE 32615
32613: GO 32637
32615: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32616: LD_VAR 0 1
32620: PPUSH
32621: LD_VAR 0 6
32625: PPUSH
32626: LD_VAR 0 7
32630: PPUSH
32631: CALL_OW 153
32635: GO 32668
32637: LD_INT 3
32639: DOUBLE
32640: EQUAL
32641: IFTRUE 32645
32643: GO 32667
32645: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32646: LD_VAR 0 1
32650: PPUSH
32651: LD_VAR 0 6
32655: PPUSH
32656: LD_VAR 0 7
32660: PPUSH
32661: CALL_OW 154
32665: GO 32668
32667: POP
// end ;
32668: LD_VAR 0 2
32672: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32673: LD_INT 0
32675: PPUSH
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
// if not unit or not building then
32681: LD_VAR 0 1
32685: NOT
32686: PUSH
32687: LD_VAR 0 2
32691: NOT
32692: OR
32693: IFFALSE 32697
// exit ;
32695: GO 32855
// x := GetX ( building ) ;
32697: LD_ADDR_VAR 0 5
32701: PUSH
32702: LD_VAR 0 2
32706: PPUSH
32707: CALL_OW 250
32711: ST_TO_ADDR
// y := GetY ( building ) ;
32712: LD_ADDR_VAR 0 6
32716: PUSH
32717: LD_VAR 0 2
32721: PPUSH
32722: CALL_OW 251
32726: ST_TO_ADDR
// for i = 0 to 5 do
32727: LD_ADDR_VAR 0 4
32731: PUSH
32732: DOUBLE
32733: LD_INT 0
32735: DEC
32736: ST_TO_ADDR
32737: LD_INT 5
32739: PUSH
32740: FOR_TO
32741: IFFALSE 32853
// begin _x := ShiftX ( x , i , 3 ) ;
32743: LD_ADDR_VAR 0 7
32747: PUSH
32748: LD_VAR 0 5
32752: PPUSH
32753: LD_VAR 0 4
32757: PPUSH
32758: LD_INT 3
32760: PPUSH
32761: CALL_OW 272
32765: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32766: LD_ADDR_VAR 0 8
32770: PUSH
32771: LD_VAR 0 6
32775: PPUSH
32776: LD_VAR 0 4
32780: PPUSH
32781: LD_INT 3
32783: PPUSH
32784: CALL_OW 273
32788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32789: LD_VAR 0 7
32793: PPUSH
32794: LD_VAR 0 8
32798: PPUSH
32799: CALL_OW 488
32803: NOT
32804: IFFALSE 32808
// continue ;
32806: GO 32740
// if HexInfo ( _x , _y ) = 0 then
32808: LD_VAR 0 7
32812: PPUSH
32813: LD_VAR 0 8
32817: PPUSH
32818: CALL_OW 428
32822: PUSH
32823: LD_INT 0
32825: EQUAL
32826: IFFALSE 32851
// begin ComMoveXY ( unit , _x , _y ) ;
32828: LD_VAR 0 1
32832: PPUSH
32833: LD_VAR 0 7
32837: PPUSH
32838: LD_VAR 0 8
32842: PPUSH
32843: CALL_OW 111
// exit ;
32847: POP
32848: POP
32849: GO 32855
// end ; end ;
32851: GO 32740
32853: POP
32854: POP
// end ;
32855: LD_VAR 0 3
32859: RET
// export function ScanBase ( side , base_area ) ; begin
32860: LD_INT 0
32862: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32863: LD_ADDR_VAR 0 3
32867: PUSH
32868: LD_VAR 0 2
32872: PPUSH
32873: LD_INT 81
32875: PUSH
32876: LD_VAR 0 1
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PPUSH
32885: CALL_OW 70
32889: ST_TO_ADDR
// end ;
32890: LD_VAR 0 3
32894: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32895: LD_INT 0
32897: PPUSH
32898: PPUSH
32899: PPUSH
32900: PPUSH
// result := false ;
32901: LD_ADDR_VAR 0 2
32905: PUSH
32906: LD_INT 0
32908: ST_TO_ADDR
// side := GetSide ( unit ) ;
32909: LD_ADDR_VAR 0 3
32913: PUSH
32914: LD_VAR 0 1
32918: PPUSH
32919: CALL_OW 255
32923: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32924: LD_ADDR_VAR 0 4
32928: PUSH
32929: LD_VAR 0 1
32933: PPUSH
32934: CALL_OW 248
32938: ST_TO_ADDR
// case nat of 1 :
32939: LD_VAR 0 4
32943: PUSH
32944: LD_INT 1
32946: DOUBLE
32947: EQUAL
32948: IFTRUE 32952
32950: GO 32963
32952: POP
// tech := tech_lassight ; 2 :
32953: LD_ADDR_VAR 0 5
32957: PUSH
32958: LD_INT 12
32960: ST_TO_ADDR
32961: GO 33002
32963: LD_INT 2
32965: DOUBLE
32966: EQUAL
32967: IFTRUE 32971
32969: GO 32982
32971: POP
// tech := tech_mortar ; 3 :
32972: LD_ADDR_VAR 0 5
32976: PUSH
32977: LD_INT 41
32979: ST_TO_ADDR
32980: GO 33002
32982: LD_INT 3
32984: DOUBLE
32985: EQUAL
32986: IFTRUE 32990
32988: GO 33001
32990: POP
// tech := tech_bazooka ; end ;
32991: LD_ADDR_VAR 0 5
32995: PUSH
32996: LD_INT 44
32998: ST_TO_ADDR
32999: GO 33002
33001: POP
// if Researched ( side , tech ) then
33002: LD_VAR 0 3
33006: PPUSH
33007: LD_VAR 0 5
33011: PPUSH
33012: CALL_OW 325
33016: IFFALSE 33043
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33018: LD_ADDR_VAR 0 2
33022: PUSH
33023: LD_INT 5
33025: PUSH
33026: LD_INT 8
33028: PUSH
33029: LD_INT 9
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: PUSH
33037: LD_VAR 0 4
33041: ARRAY
33042: ST_TO_ADDR
// end ;
33043: LD_VAR 0 2
33047: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33048: LD_INT 0
33050: PPUSH
33051: PPUSH
33052: PPUSH
// if not mines then
33053: LD_VAR 0 2
33057: NOT
33058: IFFALSE 33062
// exit ;
33060: GO 33206
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33062: LD_ADDR_VAR 0 5
33066: PUSH
33067: LD_INT 81
33069: PUSH
33070: LD_VAR 0 1
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: LD_INT 21
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PPUSH
33100: CALL_OW 69
33104: ST_TO_ADDR
// for i in mines do
33105: LD_ADDR_VAR 0 4
33109: PUSH
33110: LD_VAR 0 2
33114: PUSH
33115: FOR_IN
33116: IFFALSE 33204
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33118: LD_VAR 0 4
33122: PUSH
33123: LD_INT 1
33125: ARRAY
33126: PPUSH
33127: LD_VAR 0 4
33131: PUSH
33132: LD_INT 2
33134: ARRAY
33135: PPUSH
33136: CALL_OW 458
33140: NOT
33141: IFFALSE 33145
// continue ;
33143: GO 33115
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33145: LD_VAR 0 4
33149: PUSH
33150: LD_INT 1
33152: ARRAY
33153: PPUSH
33154: LD_VAR 0 4
33158: PUSH
33159: LD_INT 2
33161: ARRAY
33162: PPUSH
33163: CALL_OW 428
33167: PUSH
33168: LD_VAR 0 5
33172: IN
33173: IFFALSE 33202
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33175: LD_VAR 0 4
33179: PUSH
33180: LD_INT 1
33182: ARRAY
33183: PPUSH
33184: LD_VAR 0 4
33188: PUSH
33189: LD_INT 2
33191: ARRAY
33192: PPUSH
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL_OW 456
// end ;
33202: GO 33115
33204: POP
33205: POP
// end ;
33206: LD_VAR 0 3
33210: RET
// export function Count ( array ) ; var i ; begin
33211: LD_INT 0
33213: PPUSH
33214: PPUSH
// result := 0 ;
33215: LD_ADDR_VAR 0 2
33219: PUSH
33220: LD_INT 0
33222: ST_TO_ADDR
// for i in array do
33223: LD_ADDR_VAR 0 3
33227: PUSH
33228: LD_VAR 0 1
33232: PUSH
33233: FOR_IN
33234: IFFALSE 33258
// if i then
33236: LD_VAR 0 3
33240: IFFALSE 33256
// result := result + 1 ;
33242: LD_ADDR_VAR 0 2
33246: PUSH
33247: LD_VAR 0 2
33251: PUSH
33252: LD_INT 1
33254: PLUS
33255: ST_TO_ADDR
33256: GO 33233
33258: POP
33259: POP
// end ;
33260: LD_VAR 0 2
33264: RET
// export function IsEmpty ( building ) ; begin
33265: LD_INT 0
33267: PPUSH
// if not building then
33268: LD_VAR 0 1
33272: NOT
33273: IFFALSE 33277
// exit ;
33275: GO 33320
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33277: LD_ADDR_VAR 0 2
33281: PUSH
33282: LD_VAR 0 1
33286: PUSH
33287: LD_INT 22
33289: PUSH
33290: LD_VAR 0 1
33294: PPUSH
33295: CALL_OW 255
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 58
33306: PUSH
33307: EMPTY
33308: LIST
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PPUSH
33314: CALL_OW 69
33318: IN
33319: ST_TO_ADDR
// end ;
33320: LD_VAR 0 2
33324: RET
// export function IsNotFull ( building ) ; var places ; begin
33325: LD_INT 0
33327: PPUSH
33328: PPUSH
// if not building then
33329: LD_VAR 0 1
33333: NOT
33334: IFFALSE 33338
// exit ;
33336: GO 33509
// result := false ;
33338: LD_ADDR_VAR 0 2
33342: PUSH
33343: LD_INT 0
33345: ST_TO_ADDR
// places := 0 ;
33346: LD_ADDR_VAR 0 3
33350: PUSH
33351: LD_INT 0
33353: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33354: LD_VAR 0 1
33358: PPUSH
33359: CALL_OW 266
33363: PUSH
33364: LD_INT 0
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33426
33370: LD_INT 1
33372: DOUBLE
33373: EQUAL
33374: IFTRUE 33426
33376: LD_INT 6
33378: DOUBLE
33379: EQUAL
33380: IFTRUE 33426
33382: LD_INT 7
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33426
33388: LD_INT 8
33390: DOUBLE
33391: EQUAL
33392: IFTRUE 33426
33394: LD_INT 4
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33426
33400: LD_INT 5
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33426
33406: LD_INT 2
33408: DOUBLE
33409: EQUAL
33410: IFTRUE 33426
33412: LD_INT 3
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33426
33418: LD_INT 35
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33437
33426: POP
// places := 6 ; b_bunker , b_breastwork :
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: LD_INT 6
33434: ST_TO_ADDR
33435: GO 33482
33437: LD_INT 32
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33451
33443: LD_INT 31
33445: DOUBLE
33446: EQUAL
33447: IFTRUE 33451
33449: GO 33462
33451: POP
// places := 1 ; b_control_tower :
33452: LD_ADDR_VAR 0 3
33456: PUSH
33457: LD_INT 1
33459: ST_TO_ADDR
33460: GO 33482
33462: LD_INT 36
33464: DOUBLE
33465: EQUAL
33466: IFTRUE 33470
33468: GO 33481
33470: POP
// places := 3 ; end ;
33471: LD_ADDR_VAR 0 3
33475: PUSH
33476: LD_INT 3
33478: ST_TO_ADDR
33479: GO 33482
33481: POP
// if places then
33482: LD_VAR 0 3
33486: IFFALSE 33509
// result := UnitsInside ( building ) < places ;
33488: LD_ADDR_VAR 0 2
33492: PUSH
33493: LD_VAR 0 1
33497: PPUSH
33498: CALL_OW 313
33502: PUSH
33503: LD_VAR 0 3
33507: LESS
33508: ST_TO_ADDR
// end ;
33509: LD_VAR 0 2
33513: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33514: LD_INT 0
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
// tmp := [ ] ;
33520: LD_ADDR_VAR 0 3
33524: PUSH
33525: EMPTY
33526: ST_TO_ADDR
// list := [ ] ;
33527: LD_ADDR_VAR 0 5
33531: PUSH
33532: EMPTY
33533: ST_TO_ADDR
// for i = 16 to 25 do
33534: LD_ADDR_VAR 0 4
33538: PUSH
33539: DOUBLE
33540: LD_INT 16
33542: DEC
33543: ST_TO_ADDR
33544: LD_INT 25
33546: PUSH
33547: FOR_TO
33548: IFFALSE 33621
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33550: LD_ADDR_VAR 0 3
33554: PUSH
33555: LD_VAR 0 3
33559: PUSH
33560: LD_INT 22
33562: PUSH
33563: LD_VAR 0 1
33567: PPUSH
33568: CALL_OW 255
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 91
33579: PUSH
33580: LD_VAR 0 1
33584: PUSH
33585: LD_INT 6
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 30
33595: PUSH
33596: LD_VAR 0 4
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: LIST
33609: PUSH
33610: EMPTY
33611: LIST
33612: PPUSH
33613: CALL_OW 69
33617: ADD
33618: ST_TO_ADDR
33619: GO 33547
33621: POP
33622: POP
// for i = 1 to tmp do
33623: LD_ADDR_VAR 0 4
33627: PUSH
33628: DOUBLE
33629: LD_INT 1
33631: DEC
33632: ST_TO_ADDR
33633: LD_VAR 0 3
33637: PUSH
33638: FOR_TO
33639: IFFALSE 33727
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33641: LD_ADDR_VAR 0 5
33645: PUSH
33646: LD_VAR 0 5
33650: PUSH
33651: LD_VAR 0 3
33655: PUSH
33656: LD_VAR 0 4
33660: ARRAY
33661: PPUSH
33662: CALL_OW 266
33666: PUSH
33667: LD_VAR 0 3
33671: PUSH
33672: LD_VAR 0 4
33676: ARRAY
33677: PPUSH
33678: CALL_OW 250
33682: PUSH
33683: LD_VAR 0 3
33687: PUSH
33688: LD_VAR 0 4
33692: ARRAY
33693: PPUSH
33694: CALL_OW 251
33698: PUSH
33699: LD_VAR 0 3
33703: PUSH
33704: LD_VAR 0 4
33708: ARRAY
33709: PPUSH
33710: CALL_OW 254
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: PUSH
33721: EMPTY
33722: LIST
33723: ADD
33724: ST_TO_ADDR
33725: GO 33638
33727: POP
33728: POP
// result := list ;
33729: LD_ADDR_VAR 0 2
33733: PUSH
33734: LD_VAR 0 5
33738: ST_TO_ADDR
// end ;
33739: LD_VAR 0 2
33743: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33744: LD_INT 0
33746: PPUSH
33747: PPUSH
33748: PPUSH
33749: PPUSH
33750: PPUSH
33751: PPUSH
33752: PPUSH
// if not factory then
33753: LD_VAR 0 1
33757: NOT
33758: IFFALSE 33762
// exit ;
33760: GO 34355
// if control = control_apeman then
33762: LD_VAR 0 4
33766: PUSH
33767: LD_INT 5
33769: EQUAL
33770: IFFALSE 33879
// begin tmp := UnitsInside ( factory ) ;
33772: LD_ADDR_VAR 0 8
33776: PUSH
33777: LD_VAR 0 1
33781: PPUSH
33782: CALL_OW 313
33786: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33787: LD_VAR 0 8
33791: PPUSH
33792: LD_INT 25
33794: PUSH
33795: LD_INT 12
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PPUSH
33802: CALL_OW 72
33806: NOT
33807: IFFALSE 33817
// control := control_manual ;
33809: LD_ADDR_VAR 0 4
33813: PUSH
33814: LD_INT 1
33816: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33817: LD_ADDR_VAR 0 8
33821: PUSH
33822: LD_VAR 0 1
33826: PPUSH
33827: CALL 33514 0 1
33831: ST_TO_ADDR
// if tmp then
33832: LD_VAR 0 8
33836: IFFALSE 33879
// begin for i in tmp do
33838: LD_ADDR_VAR 0 7
33842: PUSH
33843: LD_VAR 0 8
33847: PUSH
33848: FOR_IN
33849: IFFALSE 33877
// if i [ 1 ] = b_ext_radio then
33851: LD_VAR 0 7
33855: PUSH
33856: LD_INT 1
33858: ARRAY
33859: PUSH
33860: LD_INT 22
33862: EQUAL
33863: IFFALSE 33875
// begin control := control_remote ;
33865: LD_ADDR_VAR 0 4
33869: PUSH
33870: LD_INT 2
33872: ST_TO_ADDR
// break ;
33873: GO 33877
// end ;
33875: GO 33848
33877: POP
33878: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33879: LD_VAR 0 1
33883: PPUSH
33884: LD_VAR 0 2
33888: PPUSH
33889: LD_VAR 0 3
33893: PPUSH
33894: LD_VAR 0 4
33898: PPUSH
33899: LD_VAR 0 5
33903: PPUSH
33904: CALL_OW 448
33908: IFFALSE 33943
// begin result := [ chassis , engine , control , weapon ] ;
33910: LD_ADDR_VAR 0 6
33914: PUSH
33915: LD_VAR 0 2
33919: PUSH
33920: LD_VAR 0 3
33924: PUSH
33925: LD_VAR 0 4
33929: PUSH
33930: LD_VAR 0 5
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: ST_TO_ADDR
// exit ;
33941: GO 34355
// end ; _chassis := AvailableChassisList ( factory ) ;
33943: LD_ADDR_VAR 0 9
33947: PUSH
33948: LD_VAR 0 1
33952: PPUSH
33953: CALL_OW 475
33957: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33958: LD_ADDR_VAR 0 11
33962: PUSH
33963: LD_VAR 0 1
33967: PPUSH
33968: CALL_OW 476
33972: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33973: LD_ADDR_VAR 0 12
33977: PUSH
33978: LD_VAR 0 1
33982: PPUSH
33983: CALL_OW 477
33987: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33988: LD_ADDR_VAR 0 10
33992: PUSH
33993: LD_VAR 0 1
33997: PPUSH
33998: CALL_OW 478
34002: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34003: LD_VAR 0 9
34007: NOT
34008: PUSH
34009: LD_VAR 0 11
34013: NOT
34014: OR
34015: PUSH
34016: LD_VAR 0 12
34020: NOT
34021: OR
34022: PUSH
34023: LD_VAR 0 10
34027: NOT
34028: OR
34029: IFFALSE 34064
// begin result := [ chassis , engine , control , weapon ] ;
34031: LD_ADDR_VAR 0 6
34035: PUSH
34036: LD_VAR 0 2
34040: PUSH
34041: LD_VAR 0 3
34045: PUSH
34046: LD_VAR 0 4
34050: PUSH
34051: LD_VAR 0 5
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: ST_TO_ADDR
// exit ;
34062: GO 34355
// end ; if not chassis in _chassis then
34064: LD_VAR 0 2
34068: PUSH
34069: LD_VAR 0 9
34073: IN
34074: NOT
34075: IFFALSE 34101
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34077: LD_ADDR_VAR 0 2
34081: PUSH
34082: LD_VAR 0 9
34086: PUSH
34087: LD_INT 1
34089: PPUSH
34090: LD_VAR 0 9
34094: PPUSH
34095: CALL_OW 12
34099: ARRAY
34100: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34101: LD_VAR 0 2
34105: PPUSH
34106: LD_VAR 0 3
34110: PPUSH
34111: CALL 34360 0 2
34115: NOT
34116: IFFALSE 34175
// repeat engine := _engine [ 1 ] ;
34118: LD_ADDR_VAR 0 3
34122: PUSH
34123: LD_VAR 0 11
34127: PUSH
34128: LD_INT 1
34130: ARRAY
34131: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34132: LD_ADDR_VAR 0 11
34136: PUSH
34137: LD_VAR 0 11
34141: PPUSH
34142: LD_INT 1
34144: PPUSH
34145: CALL_OW 3
34149: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34150: LD_VAR 0 2
34154: PPUSH
34155: LD_VAR 0 3
34159: PPUSH
34160: CALL 34360 0 2
34164: PUSH
34165: LD_VAR 0 11
34169: PUSH
34170: EMPTY
34171: EQUAL
34172: OR
34173: IFFALSE 34118
// if not control in _control then
34175: LD_VAR 0 4
34179: PUSH
34180: LD_VAR 0 12
34184: IN
34185: NOT
34186: IFFALSE 34212
// control := _control [ rand ( 1 , _control ) ] ;
34188: LD_ADDR_VAR 0 4
34192: PUSH
34193: LD_VAR 0 12
34197: PUSH
34198: LD_INT 1
34200: PPUSH
34201: LD_VAR 0 12
34205: PPUSH
34206: CALL_OW 12
34210: ARRAY
34211: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34212: LD_VAR 0 2
34216: PPUSH
34217: LD_VAR 0 5
34221: PPUSH
34222: CALL 34580 0 2
34226: NOT
34227: IFFALSE 34286
// repeat weapon := _weapon [ 1 ] ;
34229: LD_ADDR_VAR 0 5
34233: PUSH
34234: LD_VAR 0 10
34238: PUSH
34239: LD_INT 1
34241: ARRAY
34242: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34243: LD_ADDR_VAR 0 10
34247: PUSH
34248: LD_VAR 0 10
34252: PPUSH
34253: LD_INT 1
34255: PPUSH
34256: CALL_OW 3
34260: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34261: LD_VAR 0 2
34265: PPUSH
34266: LD_VAR 0 5
34270: PPUSH
34271: CALL 34580 0 2
34275: PUSH
34276: LD_VAR 0 10
34280: PUSH
34281: EMPTY
34282: EQUAL
34283: OR
34284: IFFALSE 34229
// result := [ ] ;
34286: LD_ADDR_VAR 0 6
34290: PUSH
34291: EMPTY
34292: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34293: LD_VAR 0 1
34297: PPUSH
34298: LD_VAR 0 2
34302: PPUSH
34303: LD_VAR 0 3
34307: PPUSH
34308: LD_VAR 0 4
34312: PPUSH
34313: LD_VAR 0 5
34317: PPUSH
34318: CALL_OW 448
34322: IFFALSE 34355
// result := [ chassis , engine , control , weapon ] ;
34324: LD_ADDR_VAR 0 6
34328: PUSH
34329: LD_VAR 0 2
34333: PUSH
34334: LD_VAR 0 3
34338: PUSH
34339: LD_VAR 0 4
34343: PUSH
34344: LD_VAR 0 5
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: ST_TO_ADDR
// end ;
34355: LD_VAR 0 6
34359: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34360: LD_INT 0
34362: PPUSH
// if not chassis or not engine then
34363: LD_VAR 0 1
34367: NOT
34368: PUSH
34369: LD_VAR 0 2
34373: NOT
34374: OR
34375: IFFALSE 34379
// exit ;
34377: GO 34575
// case engine of engine_solar :
34379: LD_VAR 0 2
34383: PUSH
34384: LD_INT 2
34386: DOUBLE
34387: EQUAL
34388: IFTRUE 34392
34390: GO 34430
34392: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: LD_INT 11
34400: PUSH
34401: LD_INT 12
34403: PUSH
34404: LD_INT 13
34406: PUSH
34407: LD_INT 14
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: LD_INT 3
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: ST_TO_ADDR
34428: GO 34559
34430: LD_INT 1
34432: DOUBLE
34433: EQUAL
34434: IFTRUE 34438
34436: GO 34500
34438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34439: LD_ADDR_VAR 0 3
34443: PUSH
34444: LD_INT 11
34446: PUSH
34447: LD_INT 12
34449: PUSH
34450: LD_INT 13
34452: PUSH
34453: LD_INT 14
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: LD_INT 4
34467: PUSH
34468: LD_INT 5
34470: PUSH
34471: LD_INT 21
34473: PUSH
34474: LD_INT 23
34476: PUSH
34477: LD_INT 22
34479: PUSH
34480: LD_INT 24
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: ST_TO_ADDR
34498: GO 34559
34500: LD_INT 3
34502: DOUBLE
34503: EQUAL
34504: IFTRUE 34508
34506: GO 34558
34508: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34509: LD_ADDR_VAR 0 3
34513: PUSH
34514: LD_INT 13
34516: PUSH
34517: LD_INT 14
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: LD_INT 3
34525: PUSH
34526: LD_INT 4
34528: PUSH
34529: LD_INT 5
34531: PUSH
34532: LD_INT 21
34534: PUSH
34535: LD_INT 22
34537: PUSH
34538: LD_INT 23
34540: PUSH
34541: LD_INT 24
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
34556: GO 34559
34558: POP
// result := ( chassis in result ) ;
34559: LD_ADDR_VAR 0 3
34563: PUSH
34564: LD_VAR 0 1
34568: PUSH
34569: LD_VAR 0 3
34573: IN
34574: ST_TO_ADDR
// end ;
34575: LD_VAR 0 3
34579: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34580: LD_INT 0
34582: PPUSH
// if not chassis or not weapon then
34583: LD_VAR 0 1
34587: NOT
34588: PUSH
34589: LD_VAR 0 2
34593: NOT
34594: OR
34595: IFFALSE 34599
// exit ;
34597: GO 35661
// case weapon of us_machine_gun :
34599: LD_VAR 0 2
34603: PUSH
34604: LD_INT 2
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34612
34610: GO 34642
34612: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34613: LD_ADDR_VAR 0 3
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: LD_INT 3
34626: PUSH
34627: LD_INT 4
34629: PUSH
34630: LD_INT 5
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: ST_TO_ADDR
34640: GO 35645
34642: LD_INT 3
34644: DOUBLE
34645: EQUAL
34646: IFTRUE 34650
34648: GO 34680
34650: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34651: LD_ADDR_VAR 0 3
34655: PUSH
34656: LD_INT 1
34658: PUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 3
34664: PUSH
34665: LD_INT 4
34667: PUSH
34668: LD_INT 5
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: ST_TO_ADDR
34678: GO 35645
34680: LD_INT 11
34682: DOUBLE
34683: EQUAL
34684: IFTRUE 34688
34686: GO 34718
34688: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34689: LD_ADDR_VAR 0 3
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: LD_INT 3
34702: PUSH
34703: LD_INT 4
34705: PUSH
34706: LD_INT 5
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: ST_TO_ADDR
34716: GO 35645
34718: LD_INT 4
34720: DOUBLE
34721: EQUAL
34722: IFTRUE 34726
34724: GO 34752
34726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34727: LD_ADDR_VAR 0 3
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: LD_INT 4
34740: PUSH
34741: LD_INT 5
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: ST_TO_ADDR
34750: GO 35645
34752: LD_INT 5
34754: DOUBLE
34755: EQUAL
34756: IFTRUE 34760
34758: GO 34786
34760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34761: LD_ADDR_VAR 0 3
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: LD_INT 3
34771: PUSH
34772: LD_INT 4
34774: PUSH
34775: LD_INT 5
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: ST_TO_ADDR
34784: GO 35645
34786: LD_INT 9
34788: DOUBLE
34789: EQUAL
34790: IFTRUE 34794
34792: GO 34820
34794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34795: LD_ADDR_VAR 0 3
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: LD_INT 3
34805: PUSH
34806: LD_INT 4
34808: PUSH
34809: LD_INT 5
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: ST_TO_ADDR
34818: GO 35645
34820: LD_INT 7
34822: DOUBLE
34823: EQUAL
34824: IFTRUE 34828
34826: GO 34854
34828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34829: LD_ADDR_VAR 0 3
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 3
34839: PUSH
34840: LD_INT 4
34842: PUSH
34843: LD_INT 5
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: ST_TO_ADDR
34852: GO 35645
34854: LD_INT 12
34856: DOUBLE
34857: EQUAL
34858: IFTRUE 34862
34860: GO 34888
34862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34863: LD_ADDR_VAR 0 3
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: LD_INT 3
34873: PUSH
34874: LD_INT 4
34876: PUSH
34877: LD_INT 5
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: ST_TO_ADDR
34886: GO 35645
34888: LD_INT 13
34890: DOUBLE
34891: EQUAL
34892: IFTRUE 34896
34894: GO 34922
34896: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34897: LD_ADDR_VAR 0 3
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: LD_INT 4
34910: PUSH
34911: LD_INT 5
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: ST_TO_ADDR
34920: GO 35645
34922: LD_INT 14
34924: DOUBLE
34925: EQUAL
34926: IFTRUE 34930
34928: GO 34948
34930: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34931: LD_ADDR_VAR 0 3
34935: PUSH
34936: LD_INT 4
34938: PUSH
34939: LD_INT 5
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: ST_TO_ADDR
34946: GO 35645
34948: LD_INT 6
34950: DOUBLE
34951: EQUAL
34952: IFTRUE 34956
34954: GO 34974
34956: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34957: LD_ADDR_VAR 0 3
34961: PUSH
34962: LD_INT 4
34964: PUSH
34965: LD_INT 5
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: ST_TO_ADDR
34972: GO 35645
34974: LD_INT 10
34976: DOUBLE
34977: EQUAL
34978: IFTRUE 34982
34980: GO 35000
34982: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34983: LD_ADDR_VAR 0 3
34987: PUSH
34988: LD_INT 4
34990: PUSH
34991: LD_INT 5
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: ST_TO_ADDR
34998: GO 35645
35000: LD_INT 22
35002: DOUBLE
35003: EQUAL
35004: IFTRUE 35008
35006: GO 35034
35008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35009: LD_ADDR_VAR 0 3
35013: PUSH
35014: LD_INT 11
35016: PUSH
35017: LD_INT 12
35019: PUSH
35020: LD_INT 13
35022: PUSH
35023: LD_INT 14
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: ST_TO_ADDR
35032: GO 35645
35034: LD_INT 23
35036: DOUBLE
35037: EQUAL
35038: IFTRUE 35042
35040: GO 35068
35042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35043: LD_ADDR_VAR 0 3
35047: PUSH
35048: LD_INT 11
35050: PUSH
35051: LD_INT 12
35053: PUSH
35054: LD_INT 13
35056: PUSH
35057: LD_INT 14
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
35066: GO 35645
35068: LD_INT 24
35070: DOUBLE
35071: EQUAL
35072: IFTRUE 35076
35074: GO 35102
35076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35077: LD_ADDR_VAR 0 3
35081: PUSH
35082: LD_INT 11
35084: PUSH
35085: LD_INT 12
35087: PUSH
35088: LD_INT 13
35090: PUSH
35091: LD_INT 14
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: ST_TO_ADDR
35100: GO 35645
35102: LD_INT 30
35104: DOUBLE
35105: EQUAL
35106: IFTRUE 35110
35108: GO 35136
35110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35111: LD_ADDR_VAR 0 3
35115: PUSH
35116: LD_INT 11
35118: PUSH
35119: LD_INT 12
35121: PUSH
35122: LD_INT 13
35124: PUSH
35125: LD_INT 14
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: ST_TO_ADDR
35134: GO 35645
35136: LD_INT 25
35138: DOUBLE
35139: EQUAL
35140: IFTRUE 35144
35142: GO 35162
35144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35145: LD_ADDR_VAR 0 3
35149: PUSH
35150: LD_INT 13
35152: PUSH
35153: LD_INT 14
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: ST_TO_ADDR
35160: GO 35645
35162: LD_INT 27
35164: DOUBLE
35165: EQUAL
35166: IFTRUE 35170
35168: GO 35188
35170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35171: LD_ADDR_VAR 0 3
35175: PUSH
35176: LD_INT 13
35178: PUSH
35179: LD_INT 14
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: ST_TO_ADDR
35186: GO 35645
35188: LD_EXP 19
35192: DOUBLE
35193: EQUAL
35194: IFTRUE 35198
35196: GO 35224
35198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35199: LD_ADDR_VAR 0 3
35203: PUSH
35204: LD_INT 11
35206: PUSH
35207: LD_INT 12
35209: PUSH
35210: LD_INT 13
35212: PUSH
35213: LD_INT 14
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: ST_TO_ADDR
35222: GO 35645
35224: LD_INT 28
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35232
35230: GO 35250
35232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35233: LD_ADDR_VAR 0 3
35237: PUSH
35238: LD_INT 13
35240: PUSH
35241: LD_INT 14
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: ST_TO_ADDR
35248: GO 35645
35250: LD_INT 29
35252: DOUBLE
35253: EQUAL
35254: IFTRUE 35258
35256: GO 35276
35258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35259: LD_ADDR_VAR 0 3
35263: PUSH
35264: LD_INT 13
35266: PUSH
35267: LD_INT 14
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: ST_TO_ADDR
35274: GO 35645
35276: LD_INT 31
35278: DOUBLE
35279: EQUAL
35280: IFTRUE 35284
35282: GO 35302
35284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35285: LD_ADDR_VAR 0 3
35289: PUSH
35290: LD_INT 13
35292: PUSH
35293: LD_INT 14
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: ST_TO_ADDR
35300: GO 35645
35302: LD_INT 26
35304: DOUBLE
35305: EQUAL
35306: IFTRUE 35310
35308: GO 35328
35310: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35311: LD_ADDR_VAR 0 3
35315: PUSH
35316: LD_INT 13
35318: PUSH
35319: LD_INT 14
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: ST_TO_ADDR
35326: GO 35645
35328: LD_INT 42
35330: DOUBLE
35331: EQUAL
35332: IFTRUE 35336
35334: GO 35362
35336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35337: LD_ADDR_VAR 0 3
35341: PUSH
35342: LD_INT 21
35344: PUSH
35345: LD_INT 22
35347: PUSH
35348: LD_INT 23
35350: PUSH
35351: LD_INT 24
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: ST_TO_ADDR
35360: GO 35645
35362: LD_INT 43
35364: DOUBLE
35365: EQUAL
35366: IFTRUE 35370
35368: GO 35396
35370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35371: LD_ADDR_VAR 0 3
35375: PUSH
35376: LD_INT 21
35378: PUSH
35379: LD_INT 22
35381: PUSH
35382: LD_INT 23
35384: PUSH
35385: LD_INT 24
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: ST_TO_ADDR
35394: GO 35645
35396: LD_INT 44
35398: DOUBLE
35399: EQUAL
35400: IFTRUE 35404
35402: GO 35430
35404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35405: LD_ADDR_VAR 0 3
35409: PUSH
35410: LD_INT 21
35412: PUSH
35413: LD_INT 22
35415: PUSH
35416: LD_INT 23
35418: PUSH
35419: LD_INT 24
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: ST_TO_ADDR
35428: GO 35645
35430: LD_INT 45
35432: DOUBLE
35433: EQUAL
35434: IFTRUE 35438
35436: GO 35464
35438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35439: LD_ADDR_VAR 0 3
35443: PUSH
35444: LD_INT 21
35446: PUSH
35447: LD_INT 22
35449: PUSH
35450: LD_INT 23
35452: PUSH
35453: LD_INT 24
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: ST_TO_ADDR
35462: GO 35645
35464: LD_INT 49
35466: DOUBLE
35467: EQUAL
35468: IFTRUE 35472
35470: GO 35498
35472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35473: LD_ADDR_VAR 0 3
35477: PUSH
35478: LD_INT 21
35480: PUSH
35481: LD_INT 22
35483: PUSH
35484: LD_INT 23
35486: PUSH
35487: LD_INT 24
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: ST_TO_ADDR
35496: GO 35645
35498: LD_INT 51
35500: DOUBLE
35501: EQUAL
35502: IFTRUE 35506
35504: GO 35532
35506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35507: LD_ADDR_VAR 0 3
35511: PUSH
35512: LD_INT 21
35514: PUSH
35515: LD_INT 22
35517: PUSH
35518: LD_INT 23
35520: PUSH
35521: LD_INT 24
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: ST_TO_ADDR
35530: GO 35645
35532: LD_INT 52
35534: DOUBLE
35535: EQUAL
35536: IFTRUE 35540
35538: GO 35566
35540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35541: LD_ADDR_VAR 0 3
35545: PUSH
35546: LD_INT 21
35548: PUSH
35549: LD_INT 22
35551: PUSH
35552: LD_INT 23
35554: PUSH
35555: LD_INT 24
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: ST_TO_ADDR
35564: GO 35645
35566: LD_INT 53
35568: DOUBLE
35569: EQUAL
35570: IFTRUE 35574
35572: GO 35592
35574: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35575: LD_ADDR_VAR 0 3
35579: PUSH
35580: LD_INT 23
35582: PUSH
35583: LD_INT 24
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: ST_TO_ADDR
35590: GO 35645
35592: LD_INT 46
35594: DOUBLE
35595: EQUAL
35596: IFTRUE 35600
35598: GO 35618
35600: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35601: LD_ADDR_VAR 0 3
35605: PUSH
35606: LD_INT 23
35608: PUSH
35609: LD_INT 24
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: ST_TO_ADDR
35616: GO 35645
35618: LD_INT 47
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35626
35624: GO 35644
35626: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35627: LD_ADDR_VAR 0 3
35631: PUSH
35632: LD_INT 23
35634: PUSH
35635: LD_INT 24
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: ST_TO_ADDR
35642: GO 35645
35644: POP
// result := ( chassis in result ) ;
35645: LD_ADDR_VAR 0 3
35649: PUSH
35650: LD_VAR 0 1
35654: PUSH
35655: LD_VAR 0 3
35659: IN
35660: ST_TO_ADDR
// end ;
35661: LD_VAR 0 3
35665: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35666: LD_INT 0
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
// result := array ;
35675: LD_ADDR_VAR 0 5
35679: PUSH
35680: LD_VAR 0 1
35684: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35685: LD_VAR 0 1
35689: NOT
35690: PUSH
35691: LD_VAR 0 2
35695: NOT
35696: OR
35697: PUSH
35698: LD_VAR 0 3
35702: NOT
35703: OR
35704: PUSH
35705: LD_VAR 0 2
35709: PUSH
35710: LD_VAR 0 1
35714: GREATER
35715: OR
35716: PUSH
35717: LD_VAR 0 3
35721: PUSH
35722: LD_VAR 0 1
35726: GREATER
35727: OR
35728: IFFALSE 35732
// exit ;
35730: GO 36028
// if direction then
35732: LD_VAR 0 4
35736: IFFALSE 35800
// begin d := 1 ;
35738: LD_ADDR_VAR 0 9
35742: PUSH
35743: LD_INT 1
35745: ST_TO_ADDR
// if i_from > i_to then
35746: LD_VAR 0 2
35750: PUSH
35751: LD_VAR 0 3
35755: GREATER
35756: IFFALSE 35782
// length := ( array - i_from ) + i_to else
35758: LD_ADDR_VAR 0 11
35762: PUSH
35763: LD_VAR 0 1
35767: PUSH
35768: LD_VAR 0 2
35772: MINUS
35773: PUSH
35774: LD_VAR 0 3
35778: PLUS
35779: ST_TO_ADDR
35780: GO 35798
// length := i_to - i_from ;
35782: LD_ADDR_VAR 0 11
35786: PUSH
35787: LD_VAR 0 3
35791: PUSH
35792: LD_VAR 0 2
35796: MINUS
35797: ST_TO_ADDR
// end else
35798: GO 35861
// begin d := - 1 ;
35800: LD_ADDR_VAR 0 9
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: ST_TO_ADDR
// if i_from > i_to then
35809: LD_VAR 0 2
35813: PUSH
35814: LD_VAR 0 3
35818: GREATER
35819: IFFALSE 35839
// length := i_from - i_to else
35821: LD_ADDR_VAR 0 11
35825: PUSH
35826: LD_VAR 0 2
35830: PUSH
35831: LD_VAR 0 3
35835: MINUS
35836: ST_TO_ADDR
35837: GO 35861
// length := ( array - i_to ) + i_from ;
35839: LD_ADDR_VAR 0 11
35843: PUSH
35844: LD_VAR 0 1
35848: PUSH
35849: LD_VAR 0 3
35853: MINUS
35854: PUSH
35855: LD_VAR 0 2
35859: PLUS
35860: ST_TO_ADDR
// end ; if not length then
35861: LD_VAR 0 11
35865: NOT
35866: IFFALSE 35870
// exit ;
35868: GO 36028
// tmp := array ;
35870: LD_ADDR_VAR 0 10
35874: PUSH
35875: LD_VAR 0 1
35879: ST_TO_ADDR
// for i = 1 to length do
35880: LD_ADDR_VAR 0 6
35884: PUSH
35885: DOUBLE
35886: LD_INT 1
35888: DEC
35889: ST_TO_ADDR
35890: LD_VAR 0 11
35894: PUSH
35895: FOR_TO
35896: IFFALSE 36016
// begin for j = 1 to array do
35898: LD_ADDR_VAR 0 7
35902: PUSH
35903: DOUBLE
35904: LD_INT 1
35906: DEC
35907: ST_TO_ADDR
35908: LD_VAR 0 1
35912: PUSH
35913: FOR_TO
35914: IFFALSE 36002
// begin k := j + d ;
35916: LD_ADDR_VAR 0 8
35920: PUSH
35921: LD_VAR 0 7
35925: PUSH
35926: LD_VAR 0 9
35930: PLUS
35931: ST_TO_ADDR
// if k > array then
35932: LD_VAR 0 8
35936: PUSH
35937: LD_VAR 0 1
35941: GREATER
35942: IFFALSE 35952
// k := 1 ;
35944: LD_ADDR_VAR 0 8
35948: PUSH
35949: LD_INT 1
35951: ST_TO_ADDR
// if not k then
35952: LD_VAR 0 8
35956: NOT
35957: IFFALSE 35969
// k := array ;
35959: LD_ADDR_VAR 0 8
35963: PUSH
35964: LD_VAR 0 1
35968: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35969: LD_ADDR_VAR 0 10
35973: PUSH
35974: LD_VAR 0 10
35978: PPUSH
35979: LD_VAR 0 8
35983: PPUSH
35984: LD_VAR 0 1
35988: PUSH
35989: LD_VAR 0 7
35993: ARRAY
35994: PPUSH
35995: CALL_OW 1
35999: ST_TO_ADDR
// end ;
36000: GO 35913
36002: POP
36003: POP
// array := tmp ;
36004: LD_ADDR_VAR 0 1
36008: PUSH
36009: LD_VAR 0 10
36013: ST_TO_ADDR
// end ;
36014: GO 35895
36016: POP
36017: POP
// result := array ;
36018: LD_ADDR_VAR 0 5
36022: PUSH
36023: LD_VAR 0 1
36027: ST_TO_ADDR
// end ;
36028: LD_VAR 0 5
36032: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36033: LD_INT 0
36035: PPUSH
36036: PPUSH
// result := 0 ;
36037: LD_ADDR_VAR 0 3
36041: PUSH
36042: LD_INT 0
36044: ST_TO_ADDR
// if not array or not value in array then
36045: LD_VAR 0 1
36049: NOT
36050: PUSH
36051: LD_VAR 0 2
36055: PUSH
36056: LD_VAR 0 1
36060: IN
36061: NOT
36062: OR
36063: IFFALSE 36067
// exit ;
36065: GO 36121
// for i = 1 to array do
36067: LD_ADDR_VAR 0 4
36071: PUSH
36072: DOUBLE
36073: LD_INT 1
36075: DEC
36076: ST_TO_ADDR
36077: LD_VAR 0 1
36081: PUSH
36082: FOR_TO
36083: IFFALSE 36119
// if value = array [ i ] then
36085: LD_VAR 0 2
36089: PUSH
36090: LD_VAR 0 1
36094: PUSH
36095: LD_VAR 0 4
36099: ARRAY
36100: EQUAL
36101: IFFALSE 36117
// begin result := i ;
36103: LD_ADDR_VAR 0 3
36107: PUSH
36108: LD_VAR 0 4
36112: ST_TO_ADDR
// exit ;
36113: POP
36114: POP
36115: GO 36121
// end ;
36117: GO 36082
36119: POP
36120: POP
// end ;
36121: LD_VAR 0 3
36125: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36126: LD_INT 0
36128: PPUSH
// vc_chassis := chassis ;
36129: LD_ADDR_OWVAR 37
36133: PUSH
36134: LD_VAR 0 1
36138: ST_TO_ADDR
// vc_engine := engine ;
36139: LD_ADDR_OWVAR 39
36143: PUSH
36144: LD_VAR 0 2
36148: ST_TO_ADDR
// vc_control := control ;
36149: LD_ADDR_OWVAR 38
36153: PUSH
36154: LD_VAR 0 3
36158: ST_TO_ADDR
// vc_weapon := weapon ;
36159: LD_ADDR_OWVAR 40
36163: PUSH
36164: LD_VAR 0 4
36168: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36169: LD_ADDR_OWVAR 41
36173: PUSH
36174: LD_VAR 0 5
36178: ST_TO_ADDR
// end ;
36179: LD_VAR 0 6
36183: RET
// export function WantPlant ( unit ) ; var task ; begin
36184: LD_INT 0
36186: PPUSH
36187: PPUSH
// result := false ;
36188: LD_ADDR_VAR 0 2
36192: PUSH
36193: LD_INT 0
36195: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36196: LD_ADDR_VAR 0 3
36200: PUSH
36201: LD_VAR 0 1
36205: PPUSH
36206: CALL_OW 437
36210: ST_TO_ADDR
// if task then
36211: LD_VAR 0 3
36215: IFFALSE 36243
// if task [ 1 ] [ 1 ] = p then
36217: LD_VAR 0 3
36221: PUSH
36222: LD_INT 1
36224: ARRAY
36225: PUSH
36226: LD_INT 1
36228: ARRAY
36229: PUSH
36230: LD_STRING p
36232: EQUAL
36233: IFFALSE 36243
// result := true ;
36235: LD_ADDR_VAR 0 2
36239: PUSH
36240: LD_INT 1
36242: ST_TO_ADDR
// end ;
36243: LD_VAR 0 2
36247: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36248: LD_INT 0
36250: PPUSH
36251: PPUSH
36252: PPUSH
36253: PPUSH
// if pos < 1 then
36254: LD_VAR 0 2
36258: PUSH
36259: LD_INT 1
36261: LESS
36262: IFFALSE 36266
// exit ;
36264: GO 36569
// if pos = 1 then
36266: LD_VAR 0 2
36270: PUSH
36271: LD_INT 1
36273: EQUAL
36274: IFFALSE 36307
// result := Replace ( arr , pos [ 1 ] , value ) else
36276: LD_ADDR_VAR 0 4
36280: PUSH
36281: LD_VAR 0 1
36285: PPUSH
36286: LD_VAR 0 2
36290: PUSH
36291: LD_INT 1
36293: ARRAY
36294: PPUSH
36295: LD_VAR 0 3
36299: PPUSH
36300: CALL_OW 1
36304: ST_TO_ADDR
36305: GO 36569
// begin tmp := arr ;
36307: LD_ADDR_VAR 0 6
36311: PUSH
36312: LD_VAR 0 1
36316: ST_TO_ADDR
// s_arr := [ tmp ] ;
36317: LD_ADDR_VAR 0 7
36321: PUSH
36322: LD_VAR 0 6
36326: PUSH
36327: EMPTY
36328: LIST
36329: ST_TO_ADDR
// for i = 1 to pos - 1 do
36330: LD_ADDR_VAR 0 5
36334: PUSH
36335: DOUBLE
36336: LD_INT 1
36338: DEC
36339: ST_TO_ADDR
36340: LD_VAR 0 2
36344: PUSH
36345: LD_INT 1
36347: MINUS
36348: PUSH
36349: FOR_TO
36350: IFFALSE 36395
// begin tmp := tmp [ pos [ i ] ] ;
36352: LD_ADDR_VAR 0 6
36356: PUSH
36357: LD_VAR 0 6
36361: PUSH
36362: LD_VAR 0 2
36366: PUSH
36367: LD_VAR 0 5
36371: ARRAY
36372: ARRAY
36373: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36374: LD_ADDR_VAR 0 7
36378: PUSH
36379: LD_VAR 0 7
36383: PUSH
36384: LD_VAR 0 6
36388: PUSH
36389: EMPTY
36390: LIST
36391: ADD
36392: ST_TO_ADDR
// end ;
36393: GO 36349
36395: POP
36396: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36397: LD_ADDR_VAR 0 6
36401: PUSH
36402: LD_VAR 0 6
36406: PPUSH
36407: LD_VAR 0 2
36411: PUSH
36412: LD_VAR 0 2
36416: ARRAY
36417: PPUSH
36418: LD_VAR 0 3
36422: PPUSH
36423: CALL_OW 1
36427: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36428: LD_ADDR_VAR 0 7
36432: PUSH
36433: LD_VAR 0 7
36437: PPUSH
36438: LD_VAR 0 7
36442: PPUSH
36443: LD_VAR 0 6
36447: PPUSH
36448: CALL_OW 1
36452: ST_TO_ADDR
// for i = s_arr downto 2 do
36453: LD_ADDR_VAR 0 5
36457: PUSH
36458: DOUBLE
36459: LD_VAR 0 7
36463: INC
36464: ST_TO_ADDR
36465: LD_INT 2
36467: PUSH
36468: FOR_DOWNTO
36469: IFFALSE 36553
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36471: LD_ADDR_VAR 0 6
36475: PUSH
36476: LD_VAR 0 7
36480: PUSH
36481: LD_VAR 0 5
36485: PUSH
36486: LD_INT 1
36488: MINUS
36489: ARRAY
36490: PPUSH
36491: LD_VAR 0 2
36495: PUSH
36496: LD_VAR 0 5
36500: PUSH
36501: LD_INT 1
36503: MINUS
36504: ARRAY
36505: PPUSH
36506: LD_VAR 0 7
36510: PUSH
36511: LD_VAR 0 5
36515: ARRAY
36516: PPUSH
36517: CALL_OW 1
36521: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36522: LD_ADDR_VAR 0 7
36526: PUSH
36527: LD_VAR 0 7
36531: PPUSH
36532: LD_VAR 0 5
36536: PUSH
36537: LD_INT 1
36539: MINUS
36540: PPUSH
36541: LD_VAR 0 6
36545: PPUSH
36546: CALL_OW 1
36550: ST_TO_ADDR
// end ;
36551: GO 36468
36553: POP
36554: POP
// result := s_arr [ 1 ] ;
36555: LD_ADDR_VAR 0 4
36559: PUSH
36560: LD_VAR 0 7
36564: PUSH
36565: LD_INT 1
36567: ARRAY
36568: ST_TO_ADDR
// end ; end ;
36569: LD_VAR 0 4
36573: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36574: LD_INT 0
36576: PPUSH
36577: PPUSH
// if not list then
36578: LD_VAR 0 1
36582: NOT
36583: IFFALSE 36587
// exit ;
36585: GO 36678
// i := list [ pos1 ] ;
36587: LD_ADDR_VAR 0 5
36591: PUSH
36592: LD_VAR 0 1
36596: PUSH
36597: LD_VAR 0 2
36601: ARRAY
36602: ST_TO_ADDR
// if not i then
36603: LD_VAR 0 5
36607: NOT
36608: IFFALSE 36612
// exit ;
36610: GO 36678
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36612: LD_ADDR_VAR 0 1
36616: PUSH
36617: LD_VAR 0 1
36621: PPUSH
36622: LD_VAR 0 2
36626: PPUSH
36627: LD_VAR 0 1
36631: PUSH
36632: LD_VAR 0 3
36636: ARRAY
36637: PPUSH
36638: CALL_OW 1
36642: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36643: LD_ADDR_VAR 0 1
36647: PUSH
36648: LD_VAR 0 1
36652: PPUSH
36653: LD_VAR 0 3
36657: PPUSH
36658: LD_VAR 0 5
36662: PPUSH
36663: CALL_OW 1
36667: ST_TO_ADDR
// result := list ;
36668: LD_ADDR_VAR 0 4
36672: PUSH
36673: LD_VAR 0 1
36677: ST_TO_ADDR
// end ;
36678: LD_VAR 0 4
36682: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36683: LD_INT 0
36685: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36686: LD_ADDR_VAR 0 5
36690: PUSH
36691: LD_VAR 0 1
36695: PPUSH
36696: CALL_OW 250
36700: PPUSH
36701: LD_VAR 0 1
36705: PPUSH
36706: CALL_OW 251
36710: PPUSH
36711: LD_VAR 0 2
36715: PPUSH
36716: LD_VAR 0 3
36720: PPUSH
36721: LD_VAR 0 4
36725: PPUSH
36726: CALL 36736 0 5
36730: ST_TO_ADDR
// end ;
36731: LD_VAR 0 5
36735: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36736: LD_INT 0
36738: PPUSH
36739: PPUSH
36740: PPUSH
36741: PPUSH
// if not list then
36742: LD_VAR 0 3
36746: NOT
36747: IFFALSE 36751
// exit ;
36749: GO 37139
// result := [ ] ;
36751: LD_ADDR_VAR 0 6
36755: PUSH
36756: EMPTY
36757: ST_TO_ADDR
// for i in list do
36758: LD_ADDR_VAR 0 7
36762: PUSH
36763: LD_VAR 0 3
36767: PUSH
36768: FOR_IN
36769: IFFALSE 36971
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36771: LD_ADDR_VAR 0 9
36775: PUSH
36776: LD_VAR 0 7
36780: PPUSH
36781: LD_VAR 0 1
36785: PPUSH
36786: LD_VAR 0 2
36790: PPUSH
36791: CALL_OW 297
36795: ST_TO_ADDR
// if not result then
36796: LD_VAR 0 6
36800: NOT
36801: IFFALSE 36827
// result := [ [ i , tmp ] ] else
36803: LD_ADDR_VAR 0 6
36807: PUSH
36808: LD_VAR 0 7
36812: PUSH
36813: LD_VAR 0 9
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: EMPTY
36823: LIST
36824: ST_TO_ADDR
36825: GO 36969
// begin if result [ result ] [ 2 ] < tmp then
36827: LD_VAR 0 6
36831: PUSH
36832: LD_VAR 0 6
36836: ARRAY
36837: PUSH
36838: LD_INT 2
36840: ARRAY
36841: PUSH
36842: LD_VAR 0 9
36846: LESS
36847: IFFALSE 36889
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36849: LD_ADDR_VAR 0 6
36853: PUSH
36854: LD_VAR 0 6
36858: PPUSH
36859: LD_VAR 0 6
36863: PUSH
36864: LD_INT 1
36866: PLUS
36867: PPUSH
36868: LD_VAR 0 7
36872: PUSH
36873: LD_VAR 0 9
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PPUSH
36882: CALL_OW 2
36886: ST_TO_ADDR
36887: GO 36969
// for j = 1 to result do
36889: LD_ADDR_VAR 0 8
36893: PUSH
36894: DOUBLE
36895: LD_INT 1
36897: DEC
36898: ST_TO_ADDR
36899: LD_VAR 0 6
36903: PUSH
36904: FOR_TO
36905: IFFALSE 36967
// begin if tmp < result [ j ] [ 2 ] then
36907: LD_VAR 0 9
36911: PUSH
36912: LD_VAR 0 6
36916: PUSH
36917: LD_VAR 0 8
36921: ARRAY
36922: PUSH
36923: LD_INT 2
36925: ARRAY
36926: LESS
36927: IFFALSE 36965
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36929: LD_ADDR_VAR 0 6
36933: PUSH
36934: LD_VAR 0 6
36938: PPUSH
36939: LD_VAR 0 8
36943: PPUSH
36944: LD_VAR 0 7
36948: PUSH
36949: LD_VAR 0 9
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PPUSH
36958: CALL_OW 2
36962: ST_TO_ADDR
// break ;
36963: GO 36967
// end ; end ;
36965: GO 36904
36967: POP
36968: POP
// end ; end ;
36969: GO 36768
36971: POP
36972: POP
// if result and not asc then
36973: LD_VAR 0 6
36977: PUSH
36978: LD_VAR 0 4
36982: NOT
36983: AND
36984: IFFALSE 37059
// begin tmp := result ;
36986: LD_ADDR_VAR 0 9
36990: PUSH
36991: LD_VAR 0 6
36995: ST_TO_ADDR
// for i = tmp downto 1 do
36996: LD_ADDR_VAR 0 7
37000: PUSH
37001: DOUBLE
37002: LD_VAR 0 9
37006: INC
37007: ST_TO_ADDR
37008: LD_INT 1
37010: PUSH
37011: FOR_DOWNTO
37012: IFFALSE 37057
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37014: LD_ADDR_VAR 0 6
37018: PUSH
37019: LD_VAR 0 6
37023: PPUSH
37024: LD_VAR 0 9
37028: PUSH
37029: LD_VAR 0 7
37033: MINUS
37034: PUSH
37035: LD_INT 1
37037: PLUS
37038: PPUSH
37039: LD_VAR 0 9
37043: PUSH
37044: LD_VAR 0 7
37048: ARRAY
37049: PPUSH
37050: CALL_OW 1
37054: ST_TO_ADDR
37055: GO 37011
37057: POP
37058: POP
// end ; tmp := [ ] ;
37059: LD_ADDR_VAR 0 9
37063: PUSH
37064: EMPTY
37065: ST_TO_ADDR
// if mode then
37066: LD_VAR 0 5
37070: IFFALSE 37139
// begin for i = 1 to result do
37072: LD_ADDR_VAR 0 7
37076: PUSH
37077: DOUBLE
37078: LD_INT 1
37080: DEC
37081: ST_TO_ADDR
37082: LD_VAR 0 6
37086: PUSH
37087: FOR_TO
37088: IFFALSE 37127
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37090: LD_ADDR_VAR 0 9
37094: PUSH
37095: LD_VAR 0 9
37099: PPUSH
37100: LD_VAR 0 7
37104: PPUSH
37105: LD_VAR 0 6
37109: PUSH
37110: LD_VAR 0 7
37114: ARRAY
37115: PUSH
37116: LD_INT 1
37118: ARRAY
37119: PPUSH
37120: CALL_OW 1
37124: ST_TO_ADDR
37125: GO 37087
37127: POP
37128: POP
// result := tmp ;
37129: LD_ADDR_VAR 0 6
37133: PUSH
37134: LD_VAR 0 9
37138: ST_TO_ADDR
// end ; end ;
37139: LD_VAR 0 6
37143: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37144: LD_INT 0
37146: PPUSH
37147: PPUSH
37148: PPUSH
37149: PPUSH
37150: PPUSH
37151: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37152: LD_ADDR_VAR 0 5
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
// if not x or not y then
37174: LD_VAR 0 2
37178: NOT
37179: PUSH
37180: LD_VAR 0 3
37184: NOT
37185: OR
37186: IFFALSE 37190
// exit ;
37188: GO 38842
// if not range then
37190: LD_VAR 0 4
37194: NOT
37195: IFFALSE 37205
// range := 10 ;
37197: LD_ADDR_VAR 0 4
37201: PUSH
37202: LD_INT 10
37204: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37205: LD_ADDR_VAR 0 8
37209: PUSH
37210: LD_INT 81
37212: PUSH
37213: LD_VAR 0 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 92
37224: PUSH
37225: LD_VAR 0 2
37229: PUSH
37230: LD_VAR 0 3
37234: PUSH
37235: LD_VAR 0 4
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 3
37248: PUSH
37249: LD_INT 21
37251: PUSH
37252: LD_INT 3
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: PPUSH
37268: CALL_OW 69
37272: ST_TO_ADDR
// if not tmp then
37273: LD_VAR 0 8
37277: NOT
37278: IFFALSE 37282
// exit ;
37280: GO 38842
// for i in tmp do
37282: LD_ADDR_VAR 0 6
37286: PUSH
37287: LD_VAR 0 8
37291: PUSH
37292: FOR_IN
37293: IFFALSE 38817
// begin points := [ 0 , 0 , 0 ] ;
37295: LD_ADDR_VAR 0 9
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// bpoints := 1 ;
37314: LD_ADDR_VAR 0 10
37318: PUSH
37319: LD_INT 1
37321: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37322: LD_VAR 0 6
37326: PPUSH
37327: CALL_OW 247
37331: PUSH
37332: LD_INT 1
37334: DOUBLE
37335: EQUAL
37336: IFTRUE 37340
37338: GO 37918
37340: POP
// begin if GetClass ( i ) = 1 then
37341: LD_VAR 0 6
37345: PPUSH
37346: CALL_OW 257
37350: PUSH
37351: LD_INT 1
37353: EQUAL
37354: IFFALSE 37375
// points := [ 10 , 5 , 3 ] ;
37356: LD_ADDR_VAR 0 9
37360: PUSH
37361: LD_INT 10
37363: PUSH
37364: LD_INT 5
37366: PUSH
37367: LD_INT 3
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37375: LD_VAR 0 6
37379: PPUSH
37380: CALL_OW 257
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: LD_INT 3
37390: PUSH
37391: LD_INT 4
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: IN
37399: IFFALSE 37420
// points := [ 3 , 2 , 1 ] ;
37401: LD_ADDR_VAR 0 9
37405: PUSH
37406: LD_INT 3
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37420: LD_VAR 0 6
37424: PPUSH
37425: CALL_OW 257
37429: PUSH
37430: LD_INT 5
37432: EQUAL
37433: IFFALSE 37454
// points := [ 130 , 5 , 2 ] ;
37435: LD_ADDR_VAR 0 9
37439: PUSH
37440: LD_INT 130
37442: PUSH
37443: LD_INT 5
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37454: LD_VAR 0 6
37458: PPUSH
37459: CALL_OW 257
37463: PUSH
37464: LD_INT 8
37466: EQUAL
37467: IFFALSE 37488
// points := [ 35 , 35 , 30 ] ;
37469: LD_ADDR_VAR 0 9
37473: PUSH
37474: LD_INT 35
37476: PUSH
37477: LD_INT 35
37479: PUSH
37480: LD_INT 30
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37488: LD_VAR 0 6
37492: PPUSH
37493: CALL_OW 257
37497: PUSH
37498: LD_INT 9
37500: EQUAL
37501: IFFALSE 37522
// points := [ 20 , 55 , 40 ] ;
37503: LD_ADDR_VAR 0 9
37507: PUSH
37508: LD_INT 20
37510: PUSH
37511: LD_INT 55
37513: PUSH
37514: LD_INT 40
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: LIST
37521: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37522: LD_VAR 0 6
37526: PPUSH
37527: CALL_OW 257
37531: PUSH
37532: LD_INT 12
37534: PUSH
37535: LD_INT 16
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: IN
37542: IFFALSE 37563
// points := [ 5 , 3 , 2 ] ;
37544: LD_ADDR_VAR 0 9
37548: PUSH
37549: LD_INT 5
37551: PUSH
37552: LD_INT 3
37554: PUSH
37555: LD_INT 2
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37563: LD_VAR 0 6
37567: PPUSH
37568: CALL_OW 257
37572: PUSH
37573: LD_INT 17
37575: EQUAL
37576: IFFALSE 37597
// points := [ 100 , 50 , 75 ] ;
37578: LD_ADDR_VAR 0 9
37582: PUSH
37583: LD_INT 100
37585: PUSH
37586: LD_INT 50
37588: PUSH
37589: LD_INT 75
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: LIST
37596: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37597: LD_VAR 0 6
37601: PPUSH
37602: CALL_OW 257
37606: PUSH
37607: LD_INT 15
37609: EQUAL
37610: IFFALSE 37631
// points := [ 10 , 5 , 3 ] ;
37612: LD_ADDR_VAR 0 9
37616: PUSH
37617: LD_INT 10
37619: PUSH
37620: LD_INT 5
37622: PUSH
37623: LD_INT 3
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37631: LD_VAR 0 6
37635: PPUSH
37636: CALL_OW 257
37640: PUSH
37641: LD_INT 14
37643: EQUAL
37644: IFFALSE 37665
// points := [ 10 , 0 , 0 ] ;
37646: LD_ADDR_VAR 0 9
37650: PUSH
37651: LD_INT 10
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37665: LD_VAR 0 6
37669: PPUSH
37670: CALL_OW 257
37674: PUSH
37675: LD_INT 11
37677: EQUAL
37678: IFFALSE 37699
// points := [ 30 , 10 , 5 ] ;
37680: LD_ADDR_VAR 0 9
37684: PUSH
37685: LD_INT 30
37687: PUSH
37688: LD_INT 10
37690: PUSH
37691: LD_INT 5
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37699: LD_VAR 0 1
37703: PPUSH
37704: LD_INT 5
37706: PPUSH
37707: CALL_OW 321
37711: PUSH
37712: LD_INT 2
37714: EQUAL
37715: IFFALSE 37732
// bpoints := bpoints * 1.8 ;
37717: LD_ADDR_VAR 0 10
37721: PUSH
37722: LD_VAR 0 10
37726: PUSH
37727: LD_REAL  1.80000000000000E+0000
37730: MUL
37731: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37732: LD_VAR 0 6
37736: PPUSH
37737: CALL_OW 257
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: LD_INT 3
37750: PUSH
37751: LD_INT 4
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: IN
37760: PUSH
37761: LD_VAR 0 1
37765: PPUSH
37766: LD_INT 51
37768: PPUSH
37769: CALL_OW 321
37773: PUSH
37774: LD_INT 2
37776: EQUAL
37777: AND
37778: IFFALSE 37795
// bpoints := bpoints * 1.2 ;
37780: LD_ADDR_VAR 0 10
37784: PUSH
37785: LD_VAR 0 10
37789: PUSH
37790: LD_REAL  1.20000000000000E+0000
37793: MUL
37794: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37795: LD_VAR 0 6
37799: PPUSH
37800: CALL_OW 257
37804: PUSH
37805: LD_INT 5
37807: PUSH
37808: LD_INT 7
37810: PUSH
37811: LD_INT 9
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: IN
37819: PUSH
37820: LD_VAR 0 1
37824: PPUSH
37825: LD_INT 52
37827: PPUSH
37828: CALL_OW 321
37832: PUSH
37833: LD_INT 2
37835: EQUAL
37836: AND
37837: IFFALSE 37854
// bpoints := bpoints * 1.5 ;
37839: LD_ADDR_VAR 0 10
37843: PUSH
37844: LD_VAR 0 10
37848: PUSH
37849: LD_REAL  1.50000000000000E+0000
37852: MUL
37853: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37854: LD_VAR 0 1
37858: PPUSH
37859: LD_INT 66
37861: PPUSH
37862: CALL_OW 321
37866: PUSH
37867: LD_INT 2
37869: EQUAL
37870: IFFALSE 37887
// bpoints := bpoints * 1.1 ;
37872: LD_ADDR_VAR 0 10
37876: PUSH
37877: LD_VAR 0 10
37881: PUSH
37882: LD_REAL  1.10000000000000E+0000
37885: MUL
37886: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37887: LD_ADDR_VAR 0 10
37891: PUSH
37892: LD_VAR 0 10
37896: PUSH
37897: LD_VAR 0 6
37901: PPUSH
37902: LD_INT 1
37904: PPUSH
37905: CALL_OW 259
37909: PUSH
37910: LD_REAL  1.15000000000000E+0000
37913: MUL
37914: MUL
37915: ST_TO_ADDR
// end ; unit_vehicle :
37916: GO 38746
37918: LD_INT 2
37920: DOUBLE
37921: EQUAL
37922: IFTRUE 37926
37924: GO 38734
37926: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37927: LD_VAR 0 6
37931: PPUSH
37932: CALL_OW 264
37936: PUSH
37937: LD_INT 2
37939: PUSH
37940: LD_INT 42
37942: PUSH
37943: LD_INT 24
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: IN
37951: IFFALSE 37972
// points := [ 25 , 5 , 3 ] ;
37953: LD_ADDR_VAR 0 9
37957: PUSH
37958: LD_INT 25
37960: PUSH
37961: LD_INT 5
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37972: LD_VAR 0 6
37976: PPUSH
37977: CALL_OW 264
37981: PUSH
37982: LD_INT 4
37984: PUSH
37985: LD_INT 43
37987: PUSH
37988: LD_INT 25
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: IN
37996: IFFALSE 38017
// points := [ 40 , 15 , 5 ] ;
37998: LD_ADDR_VAR 0 9
38002: PUSH
38003: LD_INT 40
38005: PUSH
38006: LD_INT 15
38008: PUSH
38009: LD_INT 5
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38017: LD_VAR 0 6
38021: PPUSH
38022: CALL_OW 264
38026: PUSH
38027: LD_INT 3
38029: PUSH
38030: LD_INT 23
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: IN
38037: IFFALSE 38058
// points := [ 7 , 25 , 8 ] ;
38039: LD_ADDR_VAR 0 9
38043: PUSH
38044: LD_INT 7
38046: PUSH
38047: LD_INT 25
38049: PUSH
38050: LD_INT 8
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38058: LD_VAR 0 6
38062: PPUSH
38063: CALL_OW 264
38067: PUSH
38068: LD_INT 5
38070: PUSH
38071: LD_INT 27
38073: PUSH
38074: LD_INT 44
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: IN
38082: IFFALSE 38103
// points := [ 14 , 50 , 16 ] ;
38084: LD_ADDR_VAR 0 9
38088: PUSH
38089: LD_INT 14
38091: PUSH
38092: LD_INT 50
38094: PUSH
38095: LD_INT 16
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38103: LD_VAR 0 6
38107: PPUSH
38108: CALL_OW 264
38112: PUSH
38113: LD_INT 6
38115: PUSH
38116: LD_INT 46
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: IN
38123: IFFALSE 38144
// points := [ 32 , 120 , 70 ] ;
38125: LD_ADDR_VAR 0 9
38129: PUSH
38130: LD_INT 32
38132: PUSH
38133: LD_INT 120
38135: PUSH
38136: LD_INT 70
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38144: LD_VAR 0 6
38148: PPUSH
38149: CALL_OW 264
38153: PUSH
38154: LD_INT 7
38156: PUSH
38157: LD_INT 28
38159: PUSH
38160: LD_INT 45
38162: PUSH
38163: LD_EXP 19
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: IN
38174: IFFALSE 38195
// points := [ 35 , 20 , 45 ] ;
38176: LD_ADDR_VAR 0 9
38180: PUSH
38181: LD_INT 35
38183: PUSH
38184: LD_INT 20
38186: PUSH
38187: LD_INT 45
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38195: LD_VAR 0 6
38199: PPUSH
38200: CALL_OW 264
38204: PUSH
38205: LD_INT 47
38207: PUSH
38208: EMPTY
38209: LIST
38210: IN
38211: IFFALSE 38232
// points := [ 67 , 45 , 75 ] ;
38213: LD_ADDR_VAR 0 9
38217: PUSH
38218: LD_INT 67
38220: PUSH
38221: LD_INT 45
38223: PUSH
38224: LD_INT 75
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: LIST
38231: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38232: LD_VAR 0 6
38236: PPUSH
38237: CALL_OW 264
38241: PUSH
38242: LD_INT 26
38244: PUSH
38245: EMPTY
38246: LIST
38247: IN
38248: IFFALSE 38269
// points := [ 120 , 30 , 80 ] ;
38250: LD_ADDR_VAR 0 9
38254: PUSH
38255: LD_INT 120
38257: PUSH
38258: LD_INT 30
38260: PUSH
38261: LD_INT 80
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: LIST
38268: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38269: LD_VAR 0 6
38273: PPUSH
38274: CALL_OW 264
38278: PUSH
38279: LD_INT 22
38281: PUSH
38282: EMPTY
38283: LIST
38284: IN
38285: IFFALSE 38306
// points := [ 40 , 1 , 1 ] ;
38287: LD_ADDR_VAR 0 9
38291: PUSH
38292: LD_INT 40
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38306: LD_VAR 0 6
38310: PPUSH
38311: CALL_OW 264
38315: PUSH
38316: LD_INT 29
38318: PUSH
38319: EMPTY
38320: LIST
38321: IN
38322: IFFALSE 38343
// points := [ 70 , 200 , 400 ] ;
38324: LD_ADDR_VAR 0 9
38328: PUSH
38329: LD_INT 70
38331: PUSH
38332: LD_INT 200
38334: PUSH
38335: LD_INT 400
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: LIST
38342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38343: LD_VAR 0 6
38347: PPUSH
38348: CALL_OW 264
38352: PUSH
38353: LD_INT 14
38355: PUSH
38356: LD_INT 53
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: IN
38363: IFFALSE 38384
// points := [ 40 , 10 , 20 ] ;
38365: LD_ADDR_VAR 0 9
38369: PUSH
38370: LD_INT 40
38372: PUSH
38373: LD_INT 10
38375: PUSH
38376: LD_INT 20
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38384: LD_VAR 0 6
38388: PPUSH
38389: CALL_OW 264
38393: PUSH
38394: LD_INT 9
38396: PUSH
38397: EMPTY
38398: LIST
38399: IN
38400: IFFALSE 38421
// points := [ 5 , 70 , 20 ] ;
38402: LD_ADDR_VAR 0 9
38406: PUSH
38407: LD_INT 5
38409: PUSH
38410: LD_INT 70
38412: PUSH
38413: LD_INT 20
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: LIST
38420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38421: LD_VAR 0 6
38425: PPUSH
38426: CALL_OW 264
38430: PUSH
38431: LD_INT 10
38433: PUSH
38434: EMPTY
38435: LIST
38436: IN
38437: IFFALSE 38458
// points := [ 35 , 110 , 70 ] ;
38439: LD_ADDR_VAR 0 9
38443: PUSH
38444: LD_INT 35
38446: PUSH
38447: LD_INT 110
38449: PUSH
38450: LD_INT 70
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38458: LD_VAR 0 6
38462: PPUSH
38463: CALL_OW 265
38467: PUSH
38468: LD_INT 25
38470: EQUAL
38471: IFFALSE 38492
// points := [ 80 , 65 , 100 ] ;
38473: LD_ADDR_VAR 0 9
38477: PUSH
38478: LD_INT 80
38480: PUSH
38481: LD_INT 65
38483: PUSH
38484: LD_INT 100
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38492: LD_VAR 0 6
38496: PPUSH
38497: CALL_OW 263
38501: PUSH
38502: LD_INT 1
38504: EQUAL
38505: IFFALSE 38540
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38507: LD_ADDR_VAR 0 10
38511: PUSH
38512: LD_VAR 0 10
38516: PUSH
38517: LD_VAR 0 6
38521: PPUSH
38522: CALL_OW 311
38526: PPUSH
38527: LD_INT 3
38529: PPUSH
38530: CALL_OW 259
38534: PUSH
38535: LD_INT 4
38537: MUL
38538: MUL
38539: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38540: LD_VAR 0 6
38544: PPUSH
38545: CALL_OW 263
38549: PUSH
38550: LD_INT 2
38552: EQUAL
38553: IFFALSE 38604
// begin j := IsControledBy ( i ) ;
38555: LD_ADDR_VAR 0 7
38559: PUSH
38560: LD_VAR 0 6
38564: PPUSH
38565: CALL_OW 312
38569: ST_TO_ADDR
// if j then
38570: LD_VAR 0 7
38574: IFFALSE 38604
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38576: LD_ADDR_VAR 0 10
38580: PUSH
38581: LD_VAR 0 10
38585: PUSH
38586: LD_VAR 0 7
38590: PPUSH
38591: LD_INT 3
38593: PPUSH
38594: CALL_OW 259
38598: PUSH
38599: LD_INT 3
38601: MUL
38602: MUL
38603: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38604: LD_VAR 0 6
38608: PPUSH
38609: CALL_OW 264
38613: PUSH
38614: LD_INT 5
38616: PUSH
38617: LD_INT 6
38619: PUSH
38620: LD_INT 46
38622: PUSH
38623: LD_INT 44
38625: PUSH
38626: LD_INT 47
38628: PUSH
38629: LD_INT 45
38631: PUSH
38632: LD_INT 28
38634: PUSH
38635: LD_INT 7
38637: PUSH
38638: LD_INT 27
38640: PUSH
38641: LD_INT 29
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: IN
38656: PUSH
38657: LD_VAR 0 1
38661: PPUSH
38662: LD_INT 52
38664: PPUSH
38665: CALL_OW 321
38669: PUSH
38670: LD_INT 2
38672: EQUAL
38673: AND
38674: IFFALSE 38691
// bpoints := bpoints * 1.2 ;
38676: LD_ADDR_VAR 0 10
38680: PUSH
38681: LD_VAR 0 10
38685: PUSH
38686: LD_REAL  1.20000000000000E+0000
38689: MUL
38690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38691: LD_VAR 0 6
38695: PPUSH
38696: CALL_OW 264
38700: PUSH
38701: LD_INT 6
38703: PUSH
38704: LD_INT 46
38706: PUSH
38707: LD_INT 47
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: IN
38715: IFFALSE 38732
// bpoints := bpoints * 1.2 ;
38717: LD_ADDR_VAR 0 10
38721: PUSH
38722: LD_VAR 0 10
38726: PUSH
38727: LD_REAL  1.20000000000000E+0000
38730: MUL
38731: ST_TO_ADDR
// end ; unit_building :
38732: GO 38746
38734: LD_INT 3
38736: DOUBLE
38737: EQUAL
38738: IFTRUE 38742
38740: GO 38745
38742: POP
// ; end ;
38743: GO 38746
38745: POP
// for j = 1 to 3 do
38746: LD_ADDR_VAR 0 7
38750: PUSH
38751: DOUBLE
38752: LD_INT 1
38754: DEC
38755: ST_TO_ADDR
38756: LD_INT 3
38758: PUSH
38759: FOR_TO
38760: IFFALSE 38813
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38762: LD_ADDR_VAR 0 5
38766: PUSH
38767: LD_VAR 0 5
38771: PPUSH
38772: LD_VAR 0 7
38776: PPUSH
38777: LD_VAR 0 5
38781: PUSH
38782: LD_VAR 0 7
38786: ARRAY
38787: PUSH
38788: LD_VAR 0 9
38792: PUSH
38793: LD_VAR 0 7
38797: ARRAY
38798: PUSH
38799: LD_VAR 0 10
38803: MUL
38804: PLUS
38805: PPUSH
38806: CALL_OW 1
38810: ST_TO_ADDR
38811: GO 38759
38813: POP
38814: POP
// end ;
38815: GO 37292
38817: POP
38818: POP
// result := Replace ( result , 4 , tmp ) ;
38819: LD_ADDR_VAR 0 5
38823: PUSH
38824: LD_VAR 0 5
38828: PPUSH
38829: LD_INT 4
38831: PPUSH
38832: LD_VAR 0 8
38836: PPUSH
38837: CALL_OW 1
38841: ST_TO_ADDR
// end ;
38842: LD_VAR 0 5
38846: RET
// export function DangerAtRange ( unit , range ) ; begin
38847: LD_INT 0
38849: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38850: LD_ADDR_VAR 0 3
38854: PUSH
38855: LD_VAR 0 1
38859: PPUSH
38860: CALL_OW 255
38864: PPUSH
38865: LD_VAR 0 1
38869: PPUSH
38870: CALL_OW 250
38874: PPUSH
38875: LD_VAR 0 1
38879: PPUSH
38880: CALL_OW 251
38884: PPUSH
38885: LD_VAR 0 2
38889: PPUSH
38890: CALL 37144 0 4
38894: ST_TO_ADDR
// end ;
38895: LD_VAR 0 3
38899: RET
// export function DangerInArea ( side , area ) ; begin
38900: LD_INT 0
38902: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38903: LD_ADDR_VAR 0 3
38907: PUSH
38908: LD_VAR 0 2
38912: PPUSH
38913: LD_INT 81
38915: PUSH
38916: LD_VAR 0 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PPUSH
38925: CALL_OW 70
38929: ST_TO_ADDR
// end ;
38930: LD_VAR 0 3
38934: RET
// export function IsExtension ( b ) ; begin
38935: LD_INT 0
38937: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38938: LD_ADDR_VAR 0 2
38942: PUSH
38943: LD_VAR 0 1
38947: PUSH
38948: LD_INT 23
38950: PUSH
38951: LD_INT 20
38953: PUSH
38954: LD_INT 22
38956: PUSH
38957: LD_INT 17
38959: PUSH
38960: LD_INT 24
38962: PUSH
38963: LD_INT 21
38965: PUSH
38966: LD_INT 19
38968: PUSH
38969: LD_INT 16
38971: PUSH
38972: LD_INT 25
38974: PUSH
38975: LD_INT 18
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: IN
38990: ST_TO_ADDR
// end ;
38991: LD_VAR 0 2
38995: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38996: LD_INT 0
38998: PPUSH
38999: PPUSH
39000: PPUSH
// result := [ ] ;
39001: LD_ADDR_VAR 0 4
39005: PUSH
39006: EMPTY
39007: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39008: LD_ADDR_VAR 0 5
39012: PUSH
39013: LD_VAR 0 2
39017: PPUSH
39018: LD_INT 21
39020: PUSH
39021: LD_INT 3
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PPUSH
39028: CALL_OW 70
39032: ST_TO_ADDR
// if not tmp then
39033: LD_VAR 0 5
39037: NOT
39038: IFFALSE 39042
// exit ;
39040: GO 39106
// if checkLink then
39042: LD_VAR 0 3
39046: IFFALSE 39096
// begin for i in tmp do
39048: LD_ADDR_VAR 0 6
39052: PUSH
39053: LD_VAR 0 5
39057: PUSH
39058: FOR_IN
39059: IFFALSE 39094
// if GetBase ( i ) <> base then
39061: LD_VAR 0 6
39065: PPUSH
39066: CALL_OW 274
39070: PUSH
39071: LD_VAR 0 1
39075: NONEQUAL
39076: IFFALSE 39092
// ComLinkToBase ( base , i ) ;
39078: LD_VAR 0 1
39082: PPUSH
39083: LD_VAR 0 6
39087: PPUSH
39088: CALL_OW 169
39092: GO 39058
39094: POP
39095: POP
// end ; result := tmp ;
39096: LD_ADDR_VAR 0 4
39100: PUSH
39101: LD_VAR 0 5
39105: ST_TO_ADDR
// end ;
39106: LD_VAR 0 4
39110: RET
// export function ComComplete ( units , b ) ; var i ; begin
39111: LD_INT 0
39113: PPUSH
39114: PPUSH
// if not units then
39115: LD_VAR 0 1
39119: NOT
39120: IFFALSE 39124
// exit ;
39122: GO 39214
// for i in units do
39124: LD_ADDR_VAR 0 4
39128: PUSH
39129: LD_VAR 0 1
39133: PUSH
39134: FOR_IN
39135: IFFALSE 39212
// if BuildingStatus ( b ) = bs_build then
39137: LD_VAR 0 2
39141: PPUSH
39142: CALL_OW 461
39146: PUSH
39147: LD_INT 1
39149: EQUAL
39150: IFFALSE 39210
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39152: LD_VAR 0 4
39156: PPUSH
39157: LD_STRING h
39159: PUSH
39160: LD_VAR 0 2
39164: PPUSH
39165: CALL_OW 250
39169: PUSH
39170: LD_VAR 0 2
39174: PPUSH
39175: CALL_OW 251
39179: PUSH
39180: LD_VAR 0 2
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: PUSH
39203: EMPTY
39204: LIST
39205: PPUSH
39206: CALL_OW 446
39210: GO 39134
39212: POP
39213: POP
// end ;
39214: LD_VAR 0 3
39218: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39219: LD_INT 0
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39227: LD_VAR 0 1
39231: NOT
39232: PUSH
39233: LD_VAR 0 1
39237: PPUSH
39238: CALL_OW 263
39242: PUSH
39243: LD_INT 2
39245: NONEQUAL
39246: OR
39247: IFFALSE 39251
// exit ;
39249: GO 39567
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39251: LD_ADDR_VAR 0 6
39255: PUSH
39256: LD_INT 22
39258: PUSH
39259: LD_VAR 0 1
39263: PPUSH
39264: CALL_OW 255
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: LD_INT 30
39278: PUSH
39279: LD_INT 36
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 34
39288: PUSH
39289: LD_INT 31
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PPUSH
39305: CALL_OW 69
39309: ST_TO_ADDR
// if not tmp then
39310: LD_VAR 0 6
39314: NOT
39315: IFFALSE 39319
// exit ;
39317: GO 39567
// result := [ ] ;
39319: LD_ADDR_VAR 0 2
39323: PUSH
39324: EMPTY
39325: ST_TO_ADDR
// for i in tmp do
39326: LD_ADDR_VAR 0 3
39330: PUSH
39331: LD_VAR 0 6
39335: PUSH
39336: FOR_IN
39337: IFFALSE 39408
// begin t := UnitsInside ( i ) ;
39339: LD_ADDR_VAR 0 4
39343: PUSH
39344: LD_VAR 0 3
39348: PPUSH
39349: CALL_OW 313
39353: ST_TO_ADDR
// if t then
39354: LD_VAR 0 4
39358: IFFALSE 39406
// for j in t do
39360: LD_ADDR_VAR 0 7
39364: PUSH
39365: LD_VAR 0 4
39369: PUSH
39370: FOR_IN
39371: IFFALSE 39404
// result := Replace ( result , result + 1 , j ) ;
39373: LD_ADDR_VAR 0 2
39377: PUSH
39378: LD_VAR 0 2
39382: PPUSH
39383: LD_VAR 0 2
39387: PUSH
39388: LD_INT 1
39390: PLUS
39391: PPUSH
39392: LD_VAR 0 7
39396: PPUSH
39397: CALL_OW 1
39401: ST_TO_ADDR
39402: GO 39370
39404: POP
39405: POP
// end ;
39406: GO 39336
39408: POP
39409: POP
// if not result then
39410: LD_VAR 0 2
39414: NOT
39415: IFFALSE 39419
// exit ;
39417: GO 39567
// mech := result [ 1 ] ;
39419: LD_ADDR_VAR 0 5
39423: PUSH
39424: LD_VAR 0 2
39428: PUSH
39429: LD_INT 1
39431: ARRAY
39432: ST_TO_ADDR
// if result > 1 then
39433: LD_VAR 0 2
39437: PUSH
39438: LD_INT 1
39440: GREATER
39441: IFFALSE 39553
// begin for i = 2 to result do
39443: LD_ADDR_VAR 0 3
39447: PUSH
39448: DOUBLE
39449: LD_INT 2
39451: DEC
39452: ST_TO_ADDR
39453: LD_VAR 0 2
39457: PUSH
39458: FOR_TO
39459: IFFALSE 39551
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39461: LD_ADDR_VAR 0 4
39465: PUSH
39466: LD_VAR 0 2
39470: PUSH
39471: LD_VAR 0 3
39475: ARRAY
39476: PPUSH
39477: LD_INT 3
39479: PPUSH
39480: CALL_OW 259
39484: PUSH
39485: LD_VAR 0 2
39489: PUSH
39490: LD_VAR 0 3
39494: ARRAY
39495: PPUSH
39496: CALL_OW 432
39500: MINUS
39501: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39502: LD_VAR 0 4
39506: PUSH
39507: LD_VAR 0 5
39511: PPUSH
39512: LD_INT 3
39514: PPUSH
39515: CALL_OW 259
39519: PUSH
39520: LD_VAR 0 5
39524: PPUSH
39525: CALL_OW 432
39529: MINUS
39530: GREATEREQUAL
39531: IFFALSE 39549
// mech := result [ i ] ;
39533: LD_ADDR_VAR 0 5
39537: PUSH
39538: LD_VAR 0 2
39542: PUSH
39543: LD_VAR 0 3
39547: ARRAY
39548: ST_TO_ADDR
// end ;
39549: GO 39458
39551: POP
39552: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39553: LD_VAR 0 1
39557: PPUSH
39558: LD_VAR 0 5
39562: PPUSH
39563: CALL_OW 135
// end ;
39567: LD_VAR 0 2
39571: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39572: LD_INT 0
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
// result := [ ] ;
39587: LD_ADDR_VAR 0 7
39591: PUSH
39592: EMPTY
39593: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39594: LD_VAR 0 1
39598: PPUSH
39599: CALL_OW 266
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: IN
39614: NOT
39615: IFFALSE 39619
// exit ;
39617: GO 41253
// if name then
39619: LD_VAR 0 3
39623: IFFALSE 39639
// SetBName ( base_dep , name ) ;
39625: LD_VAR 0 1
39629: PPUSH
39630: LD_VAR 0 3
39634: PPUSH
39635: CALL_OW 500
// base := GetBase ( base_dep ) ;
39639: LD_ADDR_VAR 0 15
39643: PUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL_OW 274
39653: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39654: LD_ADDR_VAR 0 16
39658: PUSH
39659: LD_VAR 0 1
39663: PPUSH
39664: CALL_OW 255
39668: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39669: LD_ADDR_VAR 0 17
39673: PUSH
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL_OW 248
39683: ST_TO_ADDR
// if sources then
39684: LD_VAR 0 5
39688: IFFALSE 39735
// for i = 1 to 3 do
39690: LD_ADDR_VAR 0 8
39694: PUSH
39695: DOUBLE
39696: LD_INT 1
39698: DEC
39699: ST_TO_ADDR
39700: LD_INT 3
39702: PUSH
39703: FOR_TO
39704: IFFALSE 39733
// AddResourceType ( base , i , sources [ i ] ) ;
39706: LD_VAR 0 15
39710: PPUSH
39711: LD_VAR 0 8
39715: PPUSH
39716: LD_VAR 0 5
39720: PUSH
39721: LD_VAR 0 8
39725: ARRAY
39726: PPUSH
39727: CALL_OW 276
39731: GO 39703
39733: POP
39734: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39735: LD_ADDR_VAR 0 18
39739: PUSH
39740: LD_VAR 0 15
39744: PPUSH
39745: LD_VAR 0 2
39749: PPUSH
39750: LD_INT 1
39752: PPUSH
39753: CALL 38996 0 3
39757: ST_TO_ADDR
// InitHc ;
39758: CALL_OW 19
// InitUc ;
39762: CALL_OW 18
// uc_side := side ;
39766: LD_ADDR_OWVAR 20
39770: PUSH
39771: LD_VAR 0 16
39775: ST_TO_ADDR
// uc_nation := nation ;
39776: LD_ADDR_OWVAR 21
39780: PUSH
39781: LD_VAR 0 17
39785: ST_TO_ADDR
// if buildings then
39786: LD_VAR 0 18
39790: IFFALSE 41112
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39792: LD_ADDR_VAR 0 19
39796: PUSH
39797: LD_VAR 0 18
39801: PPUSH
39802: LD_INT 2
39804: PUSH
39805: LD_INT 30
39807: PUSH
39808: LD_INT 29
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 30
39817: PUSH
39818: LD_INT 30
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: PPUSH
39830: CALL_OW 72
39834: ST_TO_ADDR
// if tmp then
39835: LD_VAR 0 19
39839: IFFALSE 39887
// for i in tmp do
39841: LD_ADDR_VAR 0 8
39845: PUSH
39846: LD_VAR 0 19
39850: PUSH
39851: FOR_IN
39852: IFFALSE 39885
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39854: LD_VAR 0 8
39858: PPUSH
39859: CALL_OW 250
39863: PPUSH
39864: LD_VAR 0 8
39868: PPUSH
39869: CALL_OW 251
39873: PPUSH
39874: LD_VAR 0 16
39878: PPUSH
39879: CALL_OW 441
39883: GO 39851
39885: POP
39886: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39887: LD_VAR 0 18
39891: PPUSH
39892: LD_INT 2
39894: PUSH
39895: LD_INT 30
39897: PUSH
39898: LD_INT 32
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 30
39907: PUSH
39908: LD_INT 33
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: PPUSH
39920: CALL_OW 72
39924: IFFALSE 40012
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39926: LD_ADDR_VAR 0 8
39930: PUSH
39931: LD_VAR 0 18
39935: PPUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 30
39941: PUSH
39942: LD_INT 32
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 30
39951: PUSH
39952: LD_INT 33
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: PPUSH
39964: CALL_OW 72
39968: PUSH
39969: FOR_IN
39970: IFFALSE 40010
// begin if not GetBWeapon ( i ) then
39972: LD_VAR 0 8
39976: PPUSH
39977: CALL_OW 269
39981: NOT
39982: IFFALSE 40008
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39984: LD_VAR 0 8
39988: PPUSH
39989: LD_VAR 0 8
39993: PPUSH
39994: LD_VAR 0 2
39998: PPUSH
39999: CALL 41258 0 2
40003: PPUSH
40004: CALL_OW 431
// end ;
40008: GO 39969
40010: POP
40011: POP
// end ; for i = 1 to personel do
40012: LD_ADDR_VAR 0 8
40016: PUSH
40017: DOUBLE
40018: LD_INT 1
40020: DEC
40021: ST_TO_ADDR
40022: LD_VAR 0 6
40026: PUSH
40027: FOR_TO
40028: IFFALSE 41092
// begin if i > 4 then
40030: LD_VAR 0 8
40034: PUSH
40035: LD_INT 4
40037: GREATER
40038: IFFALSE 40042
// break ;
40040: GO 41092
// case i of 1 :
40042: LD_VAR 0 8
40046: PUSH
40047: LD_INT 1
40049: DOUBLE
40050: EQUAL
40051: IFTRUE 40055
40053: GO 40135
40055: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40056: LD_ADDR_VAR 0 12
40060: PUSH
40061: LD_VAR 0 18
40065: PPUSH
40066: LD_INT 22
40068: PUSH
40069: LD_VAR 0 16
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 58
40080: PUSH
40081: EMPTY
40082: LIST
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: LD_INT 30
40089: PUSH
40090: LD_INT 32
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 30
40099: PUSH
40100: LD_INT 4
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 30
40109: PUSH
40110: LD_INT 5
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: LIST
40127: PPUSH
40128: CALL_OW 72
40132: ST_TO_ADDR
40133: GO 40357
40135: LD_INT 2
40137: DOUBLE
40138: EQUAL
40139: IFTRUE 40143
40141: GO 40205
40143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40144: LD_ADDR_VAR 0 12
40148: PUSH
40149: LD_VAR 0 18
40153: PPUSH
40154: LD_INT 22
40156: PUSH
40157: LD_VAR 0 16
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: LD_INT 30
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 30
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PPUSH
40198: CALL_OW 72
40202: ST_TO_ADDR
40203: GO 40357
40205: LD_INT 3
40207: DOUBLE
40208: EQUAL
40209: IFTRUE 40213
40211: GO 40275
40213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40214: LD_ADDR_VAR 0 12
40218: PUSH
40219: LD_VAR 0 18
40223: PPUSH
40224: LD_INT 22
40226: PUSH
40227: LD_VAR 0 16
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: LD_INT 30
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 30
40251: PUSH
40252: LD_INT 3
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: LIST
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PPUSH
40268: CALL_OW 72
40272: ST_TO_ADDR
40273: GO 40357
40275: LD_INT 4
40277: DOUBLE
40278: EQUAL
40279: IFTRUE 40283
40281: GO 40356
40283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40284: LD_ADDR_VAR 0 12
40288: PUSH
40289: LD_VAR 0 18
40293: PPUSH
40294: LD_INT 22
40296: PUSH
40297: LD_VAR 0 16
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: LD_INT 30
40311: PUSH
40312: LD_INT 6
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 30
40321: PUSH
40322: LD_INT 7
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 30
40331: PUSH
40332: LD_INT 8
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PPUSH
40349: CALL_OW 72
40353: ST_TO_ADDR
40354: GO 40357
40356: POP
// if i = 1 then
40357: LD_VAR 0 8
40361: PUSH
40362: LD_INT 1
40364: EQUAL
40365: IFFALSE 40476
// begin tmp := [ ] ;
40367: LD_ADDR_VAR 0 19
40371: PUSH
40372: EMPTY
40373: ST_TO_ADDR
// for j in f do
40374: LD_ADDR_VAR 0 9
40378: PUSH
40379: LD_VAR 0 12
40383: PUSH
40384: FOR_IN
40385: IFFALSE 40458
// if GetBType ( j ) = b_bunker then
40387: LD_VAR 0 9
40391: PPUSH
40392: CALL_OW 266
40396: PUSH
40397: LD_INT 32
40399: EQUAL
40400: IFFALSE 40427
// tmp := Insert ( tmp , 1 , j ) else
40402: LD_ADDR_VAR 0 19
40406: PUSH
40407: LD_VAR 0 19
40411: PPUSH
40412: LD_INT 1
40414: PPUSH
40415: LD_VAR 0 9
40419: PPUSH
40420: CALL_OW 2
40424: ST_TO_ADDR
40425: GO 40456
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40427: LD_ADDR_VAR 0 19
40431: PUSH
40432: LD_VAR 0 19
40436: PPUSH
40437: LD_VAR 0 19
40441: PUSH
40442: LD_INT 1
40444: PLUS
40445: PPUSH
40446: LD_VAR 0 9
40450: PPUSH
40451: CALL_OW 2
40455: ST_TO_ADDR
40456: GO 40384
40458: POP
40459: POP
// if tmp then
40460: LD_VAR 0 19
40464: IFFALSE 40476
// f := tmp ;
40466: LD_ADDR_VAR 0 12
40470: PUSH
40471: LD_VAR 0 19
40475: ST_TO_ADDR
// end ; x := personel [ i ] ;
40476: LD_ADDR_VAR 0 13
40480: PUSH
40481: LD_VAR 0 6
40485: PUSH
40486: LD_VAR 0 8
40490: ARRAY
40491: ST_TO_ADDR
// if x = - 1 then
40492: LD_VAR 0 13
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: EQUAL
40501: IFFALSE 40710
// begin for j in f do
40503: LD_ADDR_VAR 0 9
40507: PUSH
40508: LD_VAR 0 12
40512: PUSH
40513: FOR_IN
40514: IFFALSE 40706
// repeat InitHc ;
40516: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40520: LD_VAR 0 9
40524: PPUSH
40525: CALL_OW 266
40529: PUSH
40530: LD_INT 5
40532: EQUAL
40533: IFFALSE 40603
// begin if UnitsInside ( j ) < 3 then
40535: LD_VAR 0 9
40539: PPUSH
40540: CALL_OW 313
40544: PUSH
40545: LD_INT 3
40547: LESS
40548: IFFALSE 40584
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40550: LD_INT 0
40552: PPUSH
40553: LD_INT 5
40555: PUSH
40556: LD_INT 8
40558: PUSH
40559: LD_INT 9
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: LIST
40566: PUSH
40567: LD_VAR 0 17
40571: ARRAY
40572: PPUSH
40573: LD_VAR 0 4
40577: PPUSH
40578: CALL_OW 380
40582: GO 40601
// PrepareHuman ( false , i , skill ) ;
40584: LD_INT 0
40586: PPUSH
40587: LD_VAR 0 8
40591: PPUSH
40592: LD_VAR 0 4
40596: PPUSH
40597: CALL_OW 380
// end else
40601: GO 40620
// PrepareHuman ( false , i , skill ) ;
40603: LD_INT 0
40605: PPUSH
40606: LD_VAR 0 8
40610: PPUSH
40611: LD_VAR 0 4
40615: PPUSH
40616: CALL_OW 380
// un := CreateHuman ;
40620: LD_ADDR_VAR 0 14
40624: PUSH
40625: CALL_OW 44
40629: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40630: LD_ADDR_VAR 0 7
40634: PUSH
40635: LD_VAR 0 7
40639: PPUSH
40640: LD_INT 1
40642: PPUSH
40643: LD_VAR 0 14
40647: PPUSH
40648: CALL_OW 2
40652: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40653: LD_VAR 0 14
40657: PPUSH
40658: LD_VAR 0 9
40662: PPUSH
40663: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40667: LD_VAR 0 9
40671: PPUSH
40672: CALL_OW 313
40676: PUSH
40677: LD_INT 6
40679: EQUAL
40680: PUSH
40681: LD_VAR 0 9
40685: PPUSH
40686: CALL_OW 266
40690: PUSH
40691: LD_INT 32
40693: PUSH
40694: LD_INT 31
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: IN
40701: OR
40702: IFFALSE 40516
40704: GO 40513
40706: POP
40707: POP
// end else
40708: GO 41090
// for j = 1 to x do
40710: LD_ADDR_VAR 0 9
40714: PUSH
40715: DOUBLE
40716: LD_INT 1
40718: DEC
40719: ST_TO_ADDR
40720: LD_VAR 0 13
40724: PUSH
40725: FOR_TO
40726: IFFALSE 41088
// begin InitHc ;
40728: CALL_OW 19
// if not f then
40732: LD_VAR 0 12
40736: NOT
40737: IFFALSE 40826
// begin PrepareHuman ( false , i , skill ) ;
40739: LD_INT 0
40741: PPUSH
40742: LD_VAR 0 8
40746: PPUSH
40747: LD_VAR 0 4
40751: PPUSH
40752: CALL_OW 380
// un := CreateHuman ;
40756: LD_ADDR_VAR 0 14
40760: PUSH
40761: CALL_OW 44
40765: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40766: LD_ADDR_VAR 0 7
40770: PUSH
40771: LD_VAR 0 7
40775: PPUSH
40776: LD_INT 1
40778: PPUSH
40779: LD_VAR 0 14
40783: PPUSH
40784: CALL_OW 2
40788: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40789: LD_VAR 0 14
40793: PPUSH
40794: LD_VAR 0 1
40798: PPUSH
40799: CALL_OW 250
40803: PPUSH
40804: LD_VAR 0 1
40808: PPUSH
40809: CALL_OW 251
40813: PPUSH
40814: LD_INT 10
40816: PPUSH
40817: LD_INT 0
40819: PPUSH
40820: CALL_OW 50
// continue ;
40824: GO 40725
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40826: LD_VAR 0 12
40830: PUSH
40831: LD_INT 1
40833: ARRAY
40834: PPUSH
40835: CALL_OW 313
40839: PUSH
40840: LD_VAR 0 12
40844: PUSH
40845: LD_INT 1
40847: ARRAY
40848: PPUSH
40849: CALL_OW 266
40853: PUSH
40854: LD_INT 32
40856: PUSH
40857: LD_INT 31
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: IN
40864: AND
40865: PUSH
40866: LD_VAR 0 12
40870: PUSH
40871: LD_INT 1
40873: ARRAY
40874: PPUSH
40875: CALL_OW 313
40879: PUSH
40880: LD_INT 6
40882: EQUAL
40883: OR
40884: IFFALSE 40904
// f := Delete ( f , 1 ) ;
40886: LD_ADDR_VAR 0 12
40890: PUSH
40891: LD_VAR 0 12
40895: PPUSH
40896: LD_INT 1
40898: PPUSH
40899: CALL_OW 3
40903: ST_TO_ADDR
// if not f then
40904: LD_VAR 0 12
40908: NOT
40909: IFFALSE 40927
// begin x := x + 2 ;
40911: LD_ADDR_VAR 0 13
40915: PUSH
40916: LD_VAR 0 13
40920: PUSH
40921: LD_INT 2
40923: PLUS
40924: ST_TO_ADDR
// continue ;
40925: GO 40725
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40927: LD_VAR 0 12
40931: PUSH
40932: LD_INT 1
40934: ARRAY
40935: PPUSH
40936: CALL_OW 266
40940: PUSH
40941: LD_INT 5
40943: EQUAL
40944: IFFALSE 41018
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40946: LD_VAR 0 12
40950: PUSH
40951: LD_INT 1
40953: ARRAY
40954: PPUSH
40955: CALL_OW 313
40959: PUSH
40960: LD_INT 3
40962: LESS
40963: IFFALSE 40999
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40965: LD_INT 0
40967: PPUSH
40968: LD_INT 5
40970: PUSH
40971: LD_INT 8
40973: PUSH
40974: LD_INT 9
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: LIST
40981: PUSH
40982: LD_VAR 0 17
40986: ARRAY
40987: PPUSH
40988: LD_VAR 0 4
40992: PPUSH
40993: CALL_OW 380
40997: GO 41016
// PrepareHuman ( false , i , skill ) ;
40999: LD_INT 0
41001: PPUSH
41002: LD_VAR 0 8
41006: PPUSH
41007: LD_VAR 0 4
41011: PPUSH
41012: CALL_OW 380
// end else
41016: GO 41035
// PrepareHuman ( false , i , skill ) ;
41018: LD_INT 0
41020: PPUSH
41021: LD_VAR 0 8
41025: PPUSH
41026: LD_VAR 0 4
41030: PPUSH
41031: CALL_OW 380
// un := CreateHuman ;
41035: LD_ADDR_VAR 0 14
41039: PUSH
41040: CALL_OW 44
41044: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41045: LD_ADDR_VAR 0 7
41049: PUSH
41050: LD_VAR 0 7
41054: PPUSH
41055: LD_INT 1
41057: PPUSH
41058: LD_VAR 0 14
41062: PPUSH
41063: CALL_OW 2
41067: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41068: LD_VAR 0 14
41072: PPUSH
41073: LD_VAR 0 12
41077: PUSH
41078: LD_INT 1
41080: ARRAY
41081: PPUSH
41082: CALL_OW 52
// end ;
41086: GO 40725
41088: POP
41089: POP
// end ;
41090: GO 40027
41092: POP
41093: POP
// result := result ^ buildings ;
41094: LD_ADDR_VAR 0 7
41098: PUSH
41099: LD_VAR 0 7
41103: PUSH
41104: LD_VAR 0 18
41108: ADD
41109: ST_TO_ADDR
// end else
41110: GO 41253
// begin for i = 1 to personel do
41112: LD_ADDR_VAR 0 8
41116: PUSH
41117: DOUBLE
41118: LD_INT 1
41120: DEC
41121: ST_TO_ADDR
41122: LD_VAR 0 6
41126: PUSH
41127: FOR_TO
41128: IFFALSE 41251
// begin if i > 4 then
41130: LD_VAR 0 8
41134: PUSH
41135: LD_INT 4
41137: GREATER
41138: IFFALSE 41142
// break ;
41140: GO 41251
// x := personel [ i ] ;
41142: LD_ADDR_VAR 0 13
41146: PUSH
41147: LD_VAR 0 6
41151: PUSH
41152: LD_VAR 0 8
41156: ARRAY
41157: ST_TO_ADDR
// if x = - 1 then
41158: LD_VAR 0 13
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: EQUAL
41167: IFFALSE 41171
// continue ;
41169: GO 41127
// PrepareHuman ( false , i , skill ) ;
41171: LD_INT 0
41173: PPUSH
41174: LD_VAR 0 8
41178: PPUSH
41179: LD_VAR 0 4
41183: PPUSH
41184: CALL_OW 380
// un := CreateHuman ;
41188: LD_ADDR_VAR 0 14
41192: PUSH
41193: CALL_OW 44
41197: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41198: LD_VAR 0 14
41202: PPUSH
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 250
41212: PPUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: CALL_OW 251
41222: PPUSH
41223: LD_INT 10
41225: PPUSH
41226: LD_INT 0
41228: PPUSH
41229: CALL_OW 50
// result := result ^ un ;
41233: LD_ADDR_VAR 0 7
41237: PUSH
41238: LD_VAR 0 7
41242: PUSH
41243: LD_VAR 0 14
41247: ADD
41248: ST_TO_ADDR
// end ;
41249: GO 41127
41251: POP
41252: POP
// end ; end ;
41253: LD_VAR 0 7
41257: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41258: LD_INT 0
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
// result := false ;
41276: LD_ADDR_VAR 0 3
41280: PUSH
41281: LD_INT 0
41283: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41284: LD_VAR 0 1
41288: NOT
41289: PUSH
41290: LD_VAR 0 1
41294: PPUSH
41295: CALL_OW 266
41299: PUSH
41300: LD_INT 32
41302: PUSH
41303: LD_INT 33
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: IN
41310: NOT
41311: OR
41312: IFFALSE 41316
// exit ;
41314: GO 42425
// nat := GetNation ( tower ) ;
41316: LD_ADDR_VAR 0 12
41320: PUSH
41321: LD_VAR 0 1
41325: PPUSH
41326: CALL_OW 248
41330: ST_TO_ADDR
// side := GetSide ( tower ) ;
41331: LD_ADDR_VAR 0 16
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 255
41345: ST_TO_ADDR
// x := GetX ( tower ) ;
41346: LD_ADDR_VAR 0 10
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 250
41360: ST_TO_ADDR
// y := GetY ( tower ) ;
41361: LD_ADDR_VAR 0 11
41365: PUSH
41366: LD_VAR 0 1
41370: PPUSH
41371: CALL_OW 251
41375: ST_TO_ADDR
// if not x or not y then
41376: LD_VAR 0 10
41380: NOT
41381: PUSH
41382: LD_VAR 0 11
41386: NOT
41387: OR
41388: IFFALSE 41392
// exit ;
41390: GO 42425
// weapon := 0 ;
41392: LD_ADDR_VAR 0 18
41396: PUSH
41397: LD_INT 0
41399: ST_TO_ADDR
// fac_list := [ ] ;
41400: LD_ADDR_VAR 0 17
41404: PUSH
41405: EMPTY
41406: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41407: LD_ADDR_VAR 0 6
41411: PUSH
41412: LD_VAR 0 1
41416: PPUSH
41417: CALL_OW 274
41421: PPUSH
41422: LD_VAR 0 2
41426: PPUSH
41427: LD_INT 0
41429: PPUSH
41430: CALL 38996 0 3
41434: PPUSH
41435: LD_INT 30
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PPUSH
41445: CALL_OW 72
41449: ST_TO_ADDR
// if not factories then
41450: LD_VAR 0 6
41454: NOT
41455: IFFALSE 41459
// exit ;
41457: GO 42425
// for i in factories do
41459: LD_ADDR_VAR 0 8
41463: PUSH
41464: LD_VAR 0 6
41468: PUSH
41469: FOR_IN
41470: IFFALSE 41495
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41472: LD_ADDR_VAR 0 17
41476: PUSH
41477: LD_VAR 0 17
41481: PUSH
41482: LD_VAR 0 8
41486: PPUSH
41487: CALL_OW 478
41491: UNION
41492: ST_TO_ADDR
41493: GO 41469
41495: POP
41496: POP
// if not fac_list then
41497: LD_VAR 0 17
41501: NOT
41502: IFFALSE 41506
// exit ;
41504: GO 42425
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41506: LD_ADDR_VAR 0 5
41510: PUSH
41511: LD_INT 4
41513: PUSH
41514: LD_INT 5
41516: PUSH
41517: LD_INT 9
41519: PUSH
41520: LD_INT 10
41522: PUSH
41523: LD_INT 6
41525: PUSH
41526: LD_INT 7
41528: PUSH
41529: LD_INT 11
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 27
41543: PUSH
41544: LD_INT 28
41546: PUSH
41547: LD_INT 26
41549: PUSH
41550: LD_INT 30
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 43
41561: PUSH
41562: LD_INT 44
41564: PUSH
41565: LD_INT 46
41567: PUSH
41568: LD_INT 45
41570: PUSH
41571: LD_INT 47
41573: PUSH
41574: LD_INT 49
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: PUSH
41590: LD_VAR 0 12
41594: ARRAY
41595: ST_TO_ADDR
// list := list isect fac_list ;
41596: LD_ADDR_VAR 0 5
41600: PUSH
41601: LD_VAR 0 5
41605: PUSH
41606: LD_VAR 0 17
41610: ISECT
41611: ST_TO_ADDR
// if not list then
41612: LD_VAR 0 5
41616: NOT
41617: IFFALSE 41621
// exit ;
41619: GO 42425
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41621: LD_VAR 0 12
41625: PUSH
41626: LD_INT 3
41628: EQUAL
41629: PUSH
41630: LD_INT 49
41632: PUSH
41633: LD_VAR 0 5
41637: IN
41638: AND
41639: PUSH
41640: LD_INT 31
41642: PPUSH
41643: LD_VAR 0 16
41647: PPUSH
41648: CALL_OW 321
41652: PUSH
41653: LD_INT 2
41655: EQUAL
41656: AND
41657: IFFALSE 41717
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41659: LD_INT 22
41661: PUSH
41662: LD_VAR 0 16
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 35
41673: PUSH
41674: LD_INT 49
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 91
41683: PUSH
41684: LD_VAR 0 1
41688: PUSH
41689: LD_INT 10
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: LIST
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: PPUSH
41702: CALL_OW 69
41706: NOT
41707: IFFALSE 41717
// weapon := ru_time_lapser ;
41709: LD_ADDR_VAR 0 18
41713: PUSH
41714: LD_INT 49
41716: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41717: LD_VAR 0 12
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: IN
41732: PUSH
41733: LD_INT 11
41735: PUSH
41736: LD_VAR 0 5
41740: IN
41741: PUSH
41742: LD_INT 30
41744: PUSH
41745: LD_VAR 0 5
41749: IN
41750: OR
41751: AND
41752: PUSH
41753: LD_INT 6
41755: PPUSH
41756: LD_VAR 0 16
41760: PPUSH
41761: CALL_OW 321
41765: PUSH
41766: LD_INT 2
41768: EQUAL
41769: AND
41770: IFFALSE 41935
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41772: LD_INT 22
41774: PUSH
41775: LD_VAR 0 16
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: LD_INT 35
41789: PUSH
41790: LD_INT 11
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 35
41799: PUSH
41800: LD_INT 30
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 91
41814: PUSH
41815: LD_VAR 0 1
41819: PUSH
41820: LD_INT 18
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: PPUSH
41833: CALL_OW 69
41837: NOT
41838: PUSH
41839: LD_INT 22
41841: PUSH
41842: LD_VAR 0 16
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: LD_INT 30
41856: PUSH
41857: LD_INT 32
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 30
41866: PUSH
41867: LD_INT 33
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 91
41881: PUSH
41882: LD_VAR 0 1
41886: PUSH
41887: LD_INT 12
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: PUSH
41900: EMPTY
41901: LIST
41902: PPUSH
41903: CALL_OW 69
41907: PUSH
41908: LD_INT 2
41910: GREATER
41911: AND
41912: IFFALSE 41935
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41914: LD_ADDR_VAR 0 18
41918: PUSH
41919: LD_INT 11
41921: PUSH
41922: LD_INT 30
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_VAR 0 12
41933: ARRAY
41934: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41935: LD_VAR 0 18
41939: NOT
41940: PUSH
41941: LD_INT 40
41943: PPUSH
41944: LD_VAR 0 16
41948: PPUSH
41949: CALL_OW 321
41953: PUSH
41954: LD_INT 2
41956: EQUAL
41957: AND
41958: PUSH
41959: LD_INT 7
41961: PUSH
41962: LD_VAR 0 5
41966: IN
41967: PUSH
41968: LD_INT 28
41970: PUSH
41971: LD_VAR 0 5
41975: IN
41976: OR
41977: PUSH
41978: LD_INT 45
41980: PUSH
41981: LD_VAR 0 5
41985: IN
41986: OR
41987: AND
41988: IFFALSE 42242
// begin hex := GetHexInfo ( x , y ) ;
41990: LD_ADDR_VAR 0 4
41994: PUSH
41995: LD_VAR 0 10
41999: PPUSH
42000: LD_VAR 0 11
42004: PPUSH
42005: CALL_OW 546
42009: ST_TO_ADDR
// if hex [ 1 ] then
42010: LD_VAR 0 4
42014: PUSH
42015: LD_INT 1
42017: ARRAY
42018: IFFALSE 42022
// exit ;
42020: GO 42425
// height := hex [ 2 ] ;
42022: LD_ADDR_VAR 0 15
42026: PUSH
42027: LD_VAR 0 4
42031: PUSH
42032: LD_INT 2
42034: ARRAY
42035: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42036: LD_ADDR_VAR 0 14
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: LD_INT 3
42049: PUSH
42050: LD_INT 5
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: ST_TO_ADDR
// for i in tmp do
42059: LD_ADDR_VAR 0 8
42063: PUSH
42064: LD_VAR 0 14
42068: PUSH
42069: FOR_IN
42070: IFFALSE 42240
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42072: LD_ADDR_VAR 0 9
42076: PUSH
42077: LD_VAR 0 10
42081: PPUSH
42082: LD_VAR 0 8
42086: PPUSH
42087: LD_INT 5
42089: PPUSH
42090: CALL_OW 272
42094: PUSH
42095: LD_VAR 0 11
42099: PPUSH
42100: LD_VAR 0 8
42104: PPUSH
42105: LD_INT 5
42107: PPUSH
42108: CALL_OW 273
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42117: LD_VAR 0 9
42121: PUSH
42122: LD_INT 1
42124: ARRAY
42125: PPUSH
42126: LD_VAR 0 9
42130: PUSH
42131: LD_INT 2
42133: ARRAY
42134: PPUSH
42135: CALL_OW 488
42139: IFFALSE 42238
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42141: LD_ADDR_VAR 0 4
42145: PUSH
42146: LD_VAR 0 9
42150: PUSH
42151: LD_INT 1
42153: ARRAY
42154: PPUSH
42155: LD_VAR 0 9
42159: PUSH
42160: LD_INT 2
42162: ARRAY
42163: PPUSH
42164: CALL_OW 546
42168: ST_TO_ADDR
// if hex [ 1 ] then
42169: LD_VAR 0 4
42173: PUSH
42174: LD_INT 1
42176: ARRAY
42177: IFFALSE 42181
// continue ;
42179: GO 42069
// h := hex [ 2 ] ;
42181: LD_ADDR_VAR 0 13
42185: PUSH
42186: LD_VAR 0 4
42190: PUSH
42191: LD_INT 2
42193: ARRAY
42194: ST_TO_ADDR
// if h + 7 < height then
42195: LD_VAR 0 13
42199: PUSH
42200: LD_INT 7
42202: PLUS
42203: PUSH
42204: LD_VAR 0 15
42208: LESS
42209: IFFALSE 42238
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42211: LD_ADDR_VAR 0 18
42215: PUSH
42216: LD_INT 7
42218: PUSH
42219: LD_INT 28
42221: PUSH
42222: LD_INT 45
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: PUSH
42230: LD_VAR 0 12
42234: ARRAY
42235: ST_TO_ADDR
// break ;
42236: GO 42240
// end ; end ; end ;
42238: GO 42069
42240: POP
42241: POP
// end ; if not weapon then
42242: LD_VAR 0 18
42246: NOT
42247: IFFALSE 42307
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42249: LD_ADDR_VAR 0 5
42253: PUSH
42254: LD_VAR 0 5
42258: PUSH
42259: LD_INT 11
42261: PUSH
42262: LD_INT 30
42264: PUSH
42265: LD_INT 49
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: DIFF
42273: ST_TO_ADDR
// if not list then
42274: LD_VAR 0 5
42278: NOT
42279: IFFALSE 42283
// exit ;
42281: GO 42425
// weapon := list [ rand ( 1 , list ) ] ;
42283: LD_ADDR_VAR 0 18
42287: PUSH
42288: LD_VAR 0 5
42292: PUSH
42293: LD_INT 1
42295: PPUSH
42296: LD_VAR 0 5
42300: PPUSH
42301: CALL_OW 12
42305: ARRAY
42306: ST_TO_ADDR
// end ; if weapon then
42307: LD_VAR 0 18
42311: IFFALSE 42425
// begin tmp := CostOfWeapon ( weapon ) ;
42313: LD_ADDR_VAR 0 14
42317: PUSH
42318: LD_VAR 0 18
42322: PPUSH
42323: CALL_OW 451
42327: ST_TO_ADDR
// j := GetBase ( tower ) ;
42328: LD_ADDR_VAR 0 9
42332: PUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL_OW 274
42342: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42343: LD_VAR 0 9
42347: PPUSH
42348: LD_INT 1
42350: PPUSH
42351: CALL_OW 275
42355: PUSH
42356: LD_VAR 0 14
42360: PUSH
42361: LD_INT 1
42363: ARRAY
42364: GREATEREQUAL
42365: PUSH
42366: LD_VAR 0 9
42370: PPUSH
42371: LD_INT 2
42373: PPUSH
42374: CALL_OW 275
42378: PUSH
42379: LD_VAR 0 14
42383: PUSH
42384: LD_INT 2
42386: ARRAY
42387: GREATEREQUAL
42388: AND
42389: PUSH
42390: LD_VAR 0 9
42394: PPUSH
42395: LD_INT 3
42397: PPUSH
42398: CALL_OW 275
42402: PUSH
42403: LD_VAR 0 14
42407: PUSH
42408: LD_INT 3
42410: ARRAY
42411: GREATEREQUAL
42412: AND
42413: IFFALSE 42425
// result := weapon ;
42415: LD_ADDR_VAR 0 3
42419: PUSH
42420: LD_VAR 0 18
42424: ST_TO_ADDR
// end ; end ;
42425: LD_VAR 0 3
42429: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42430: LD_INT 0
42432: PPUSH
42433: PPUSH
// result := true ;
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_INT 1
42441: ST_TO_ADDR
// if array1 = array2 then
42442: LD_VAR 0 1
42446: PUSH
42447: LD_VAR 0 2
42451: EQUAL
42452: IFFALSE 42512
// begin for i = 1 to array1 do
42454: LD_ADDR_VAR 0 4
42458: PUSH
42459: DOUBLE
42460: LD_INT 1
42462: DEC
42463: ST_TO_ADDR
42464: LD_VAR 0 1
42468: PUSH
42469: FOR_TO
42470: IFFALSE 42508
// if array1 [ i ] <> array2 [ i ] then
42472: LD_VAR 0 1
42476: PUSH
42477: LD_VAR 0 4
42481: ARRAY
42482: PUSH
42483: LD_VAR 0 2
42487: PUSH
42488: LD_VAR 0 4
42492: ARRAY
42493: NONEQUAL
42494: IFFALSE 42506
// begin result := false ;
42496: LD_ADDR_VAR 0 3
42500: PUSH
42501: LD_INT 0
42503: ST_TO_ADDR
// break ;
42504: GO 42508
// end ;
42506: GO 42469
42508: POP
42509: POP
// end else
42510: GO 42520
// result := false ;
42512: LD_ADDR_VAR 0 3
42516: PUSH
42517: LD_INT 0
42519: ST_TO_ADDR
// end ;
42520: LD_VAR 0 3
42524: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42525: LD_INT 0
42527: PPUSH
42528: PPUSH
// if not array1 or not array2 then
42529: LD_VAR 0 1
42533: NOT
42534: PUSH
42535: LD_VAR 0 2
42539: NOT
42540: OR
42541: IFFALSE 42545
// exit ;
42543: GO 42609
// result := true ;
42545: LD_ADDR_VAR 0 3
42549: PUSH
42550: LD_INT 1
42552: ST_TO_ADDR
// for i = 1 to array1 do
42553: LD_ADDR_VAR 0 4
42557: PUSH
42558: DOUBLE
42559: LD_INT 1
42561: DEC
42562: ST_TO_ADDR
42563: LD_VAR 0 1
42567: PUSH
42568: FOR_TO
42569: IFFALSE 42607
// if array1 [ i ] <> array2 [ i ] then
42571: LD_VAR 0 1
42575: PUSH
42576: LD_VAR 0 4
42580: ARRAY
42581: PUSH
42582: LD_VAR 0 2
42586: PUSH
42587: LD_VAR 0 4
42591: ARRAY
42592: NONEQUAL
42593: IFFALSE 42605
// begin result := false ;
42595: LD_ADDR_VAR 0 3
42599: PUSH
42600: LD_INT 0
42602: ST_TO_ADDR
// break ;
42603: GO 42607
// end ;
42605: GO 42568
42607: POP
42608: POP
// end ;
42609: LD_VAR 0 3
42613: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42614: LD_INT 0
42616: PPUSH
42617: PPUSH
42618: PPUSH
// pom := GetBase ( fac ) ;
42619: LD_ADDR_VAR 0 5
42623: PUSH
42624: LD_VAR 0 1
42628: PPUSH
42629: CALL_OW 274
42633: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42634: LD_ADDR_VAR 0 4
42638: PUSH
42639: LD_VAR 0 2
42643: PUSH
42644: LD_INT 1
42646: ARRAY
42647: PPUSH
42648: LD_VAR 0 2
42652: PUSH
42653: LD_INT 2
42655: ARRAY
42656: PPUSH
42657: LD_VAR 0 2
42661: PUSH
42662: LD_INT 3
42664: ARRAY
42665: PPUSH
42666: LD_VAR 0 2
42670: PUSH
42671: LD_INT 4
42673: ARRAY
42674: PPUSH
42675: CALL_OW 449
42679: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42680: LD_ADDR_VAR 0 3
42684: PUSH
42685: LD_VAR 0 5
42689: PPUSH
42690: LD_INT 1
42692: PPUSH
42693: CALL_OW 275
42697: PUSH
42698: LD_VAR 0 4
42702: PUSH
42703: LD_INT 1
42705: ARRAY
42706: GREATEREQUAL
42707: PUSH
42708: LD_VAR 0 5
42712: PPUSH
42713: LD_INT 2
42715: PPUSH
42716: CALL_OW 275
42720: PUSH
42721: LD_VAR 0 4
42725: PUSH
42726: LD_INT 2
42728: ARRAY
42729: GREATEREQUAL
42730: AND
42731: PUSH
42732: LD_VAR 0 5
42736: PPUSH
42737: LD_INT 3
42739: PPUSH
42740: CALL_OW 275
42744: PUSH
42745: LD_VAR 0 4
42749: PUSH
42750: LD_INT 3
42752: ARRAY
42753: GREATEREQUAL
42754: AND
42755: ST_TO_ADDR
// end ;
42756: LD_VAR 0 3
42760: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42761: LD_INT 0
42763: PPUSH
42764: PPUSH
42765: PPUSH
42766: PPUSH
// pom := GetBase ( building ) ;
42767: LD_ADDR_VAR 0 3
42771: PUSH
42772: LD_VAR 0 1
42776: PPUSH
42777: CALL_OW 274
42781: ST_TO_ADDR
// if not pom then
42782: LD_VAR 0 3
42786: NOT
42787: IFFALSE 42791
// exit ;
42789: GO 42961
// btype := GetBType ( building ) ;
42791: LD_ADDR_VAR 0 5
42795: PUSH
42796: LD_VAR 0 1
42800: PPUSH
42801: CALL_OW 266
42805: ST_TO_ADDR
// if btype = b_armoury then
42806: LD_VAR 0 5
42810: PUSH
42811: LD_INT 4
42813: EQUAL
42814: IFFALSE 42824
// btype := b_barracks ;
42816: LD_ADDR_VAR 0 5
42820: PUSH
42821: LD_INT 5
42823: ST_TO_ADDR
// if btype = b_depot then
42824: LD_VAR 0 5
42828: PUSH
42829: LD_INT 0
42831: EQUAL
42832: IFFALSE 42842
// btype := b_warehouse ;
42834: LD_ADDR_VAR 0 5
42838: PUSH
42839: LD_INT 1
42841: ST_TO_ADDR
// if btype = b_workshop then
42842: LD_VAR 0 5
42846: PUSH
42847: LD_INT 2
42849: EQUAL
42850: IFFALSE 42860
// btype := b_factory ;
42852: LD_ADDR_VAR 0 5
42856: PUSH
42857: LD_INT 3
42859: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42860: LD_ADDR_VAR 0 4
42864: PUSH
42865: LD_VAR 0 5
42869: PPUSH
42870: LD_VAR 0 1
42874: PPUSH
42875: CALL_OW 248
42879: PPUSH
42880: CALL_OW 450
42884: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42885: LD_ADDR_VAR 0 2
42889: PUSH
42890: LD_VAR 0 3
42894: PPUSH
42895: LD_INT 1
42897: PPUSH
42898: CALL_OW 275
42902: PUSH
42903: LD_VAR 0 4
42907: PUSH
42908: LD_INT 1
42910: ARRAY
42911: GREATEREQUAL
42912: PUSH
42913: LD_VAR 0 3
42917: PPUSH
42918: LD_INT 2
42920: PPUSH
42921: CALL_OW 275
42925: PUSH
42926: LD_VAR 0 4
42930: PUSH
42931: LD_INT 2
42933: ARRAY
42934: GREATEREQUAL
42935: AND
42936: PUSH
42937: LD_VAR 0 3
42941: PPUSH
42942: LD_INT 3
42944: PPUSH
42945: CALL_OW 275
42949: PUSH
42950: LD_VAR 0 4
42954: PUSH
42955: LD_INT 3
42957: ARRAY
42958: GREATEREQUAL
42959: AND
42960: ST_TO_ADDR
// end ;
42961: LD_VAR 0 2
42965: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42966: LD_INT 0
42968: PPUSH
42969: PPUSH
42970: PPUSH
// pom := GetBase ( building ) ;
42971: LD_ADDR_VAR 0 4
42975: PUSH
42976: LD_VAR 0 1
42980: PPUSH
42981: CALL_OW 274
42985: ST_TO_ADDR
// if not pom then
42986: LD_VAR 0 4
42990: NOT
42991: IFFALSE 42995
// exit ;
42993: GO 43096
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42995: LD_ADDR_VAR 0 5
42999: PUSH
43000: LD_VAR 0 2
43004: PPUSH
43005: LD_VAR 0 1
43009: PPUSH
43010: CALL_OW 248
43014: PPUSH
43015: CALL_OW 450
43019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43020: LD_ADDR_VAR 0 3
43024: PUSH
43025: LD_VAR 0 4
43029: PPUSH
43030: LD_INT 1
43032: PPUSH
43033: CALL_OW 275
43037: PUSH
43038: LD_VAR 0 5
43042: PUSH
43043: LD_INT 1
43045: ARRAY
43046: GREATEREQUAL
43047: PUSH
43048: LD_VAR 0 4
43052: PPUSH
43053: LD_INT 2
43055: PPUSH
43056: CALL_OW 275
43060: PUSH
43061: LD_VAR 0 5
43065: PUSH
43066: LD_INT 2
43068: ARRAY
43069: GREATEREQUAL
43070: AND
43071: PUSH
43072: LD_VAR 0 4
43076: PPUSH
43077: LD_INT 3
43079: PPUSH
43080: CALL_OW 275
43084: PUSH
43085: LD_VAR 0 5
43089: PUSH
43090: LD_INT 3
43092: ARRAY
43093: GREATEREQUAL
43094: AND
43095: ST_TO_ADDR
// end ;
43096: LD_VAR 0 3
43100: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43101: LD_INT 0
43103: PPUSH
43104: PPUSH
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
43112: PPUSH
43113: PPUSH
// result := false ;
43114: LD_ADDR_VAR 0 8
43118: PUSH
43119: LD_INT 0
43121: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43122: LD_VAR 0 5
43126: NOT
43127: PUSH
43128: LD_VAR 0 1
43132: NOT
43133: OR
43134: PUSH
43135: LD_VAR 0 2
43139: NOT
43140: OR
43141: PUSH
43142: LD_VAR 0 3
43146: NOT
43147: OR
43148: IFFALSE 43152
// exit ;
43150: GO 43966
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43152: LD_ADDR_VAR 0 14
43156: PUSH
43157: LD_VAR 0 1
43161: PPUSH
43162: LD_VAR 0 2
43166: PPUSH
43167: LD_VAR 0 3
43171: PPUSH
43172: LD_VAR 0 4
43176: PPUSH
43177: LD_VAR 0 5
43181: PUSH
43182: LD_INT 1
43184: ARRAY
43185: PPUSH
43186: CALL_OW 248
43190: PPUSH
43191: LD_INT 0
43193: PPUSH
43194: CALL 45203 0 6
43198: ST_TO_ADDR
// if not hexes then
43199: LD_VAR 0 14
43203: NOT
43204: IFFALSE 43208
// exit ;
43206: GO 43966
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43208: LD_ADDR_VAR 0 17
43212: PUSH
43213: LD_VAR 0 5
43217: PPUSH
43218: LD_INT 22
43220: PUSH
43221: LD_VAR 0 13
43225: PPUSH
43226: CALL_OW 255
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 2
43237: PUSH
43238: LD_INT 30
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 30
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PPUSH
43267: CALL_OW 72
43271: ST_TO_ADDR
// for i = 1 to hexes do
43272: LD_ADDR_VAR 0 9
43276: PUSH
43277: DOUBLE
43278: LD_INT 1
43280: DEC
43281: ST_TO_ADDR
43282: LD_VAR 0 14
43286: PUSH
43287: FOR_TO
43288: IFFALSE 43964
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43290: LD_ADDR_VAR 0 13
43294: PUSH
43295: LD_VAR 0 14
43299: PUSH
43300: LD_VAR 0 9
43304: ARRAY
43305: PUSH
43306: LD_INT 1
43308: ARRAY
43309: PPUSH
43310: LD_VAR 0 14
43314: PUSH
43315: LD_VAR 0 9
43319: ARRAY
43320: PUSH
43321: LD_INT 2
43323: ARRAY
43324: PPUSH
43325: CALL_OW 428
43329: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43330: LD_VAR 0 14
43334: PUSH
43335: LD_VAR 0 9
43339: ARRAY
43340: PUSH
43341: LD_INT 1
43343: ARRAY
43344: PPUSH
43345: LD_VAR 0 14
43349: PUSH
43350: LD_VAR 0 9
43354: ARRAY
43355: PUSH
43356: LD_INT 2
43358: ARRAY
43359: PPUSH
43360: CALL_OW 351
43364: PUSH
43365: LD_VAR 0 14
43369: PUSH
43370: LD_VAR 0 9
43374: ARRAY
43375: PUSH
43376: LD_INT 1
43378: ARRAY
43379: PPUSH
43380: LD_VAR 0 14
43384: PUSH
43385: LD_VAR 0 9
43389: ARRAY
43390: PUSH
43391: LD_INT 2
43393: ARRAY
43394: PPUSH
43395: CALL_OW 488
43399: NOT
43400: OR
43401: PUSH
43402: LD_VAR 0 13
43406: PPUSH
43407: CALL_OW 247
43411: PUSH
43412: LD_INT 3
43414: EQUAL
43415: OR
43416: IFFALSE 43422
// exit ;
43418: POP
43419: POP
43420: GO 43966
// if not tmp then
43422: LD_VAR 0 13
43426: NOT
43427: IFFALSE 43431
// continue ;
43429: GO 43287
// result := true ;
43431: LD_ADDR_VAR 0 8
43435: PUSH
43436: LD_INT 1
43438: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43439: LD_VAR 0 6
43443: PUSH
43444: LD_VAR 0 13
43448: PPUSH
43449: CALL_OW 247
43453: PUSH
43454: LD_INT 2
43456: EQUAL
43457: AND
43458: PUSH
43459: LD_VAR 0 13
43463: PPUSH
43464: CALL_OW 263
43468: PUSH
43469: LD_INT 1
43471: EQUAL
43472: AND
43473: IFFALSE 43637
// begin if IsDrivenBy ( tmp ) then
43475: LD_VAR 0 13
43479: PPUSH
43480: CALL_OW 311
43484: IFFALSE 43488
// continue ;
43486: GO 43287
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43488: LD_VAR 0 6
43492: PPUSH
43493: LD_INT 3
43495: PUSH
43496: LD_INT 60
43498: PUSH
43499: EMPTY
43500: LIST
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 3
43508: PUSH
43509: LD_INT 55
43511: PUSH
43512: EMPTY
43513: LIST
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PPUSH
43523: CALL_OW 72
43527: IFFALSE 43635
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43529: LD_ADDR_VAR 0 18
43533: PUSH
43534: LD_VAR 0 6
43538: PPUSH
43539: LD_INT 3
43541: PUSH
43542: LD_INT 60
43544: PUSH
43545: EMPTY
43546: LIST
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 3
43554: PUSH
43555: LD_INT 55
43557: PUSH
43558: EMPTY
43559: LIST
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PPUSH
43569: CALL_OW 72
43573: PUSH
43574: LD_INT 1
43576: ARRAY
43577: ST_TO_ADDR
// if IsInUnit ( driver ) then
43578: LD_VAR 0 18
43582: PPUSH
43583: CALL_OW 310
43587: IFFALSE 43598
// ComExit ( driver ) ;
43589: LD_VAR 0 18
43593: PPUSH
43594: CALL 68908 0 1
// AddComEnterUnit ( driver , tmp ) ;
43598: LD_VAR 0 18
43602: PPUSH
43603: LD_VAR 0 13
43607: PPUSH
43608: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43612: LD_VAR 0 18
43616: PPUSH
43617: LD_VAR 0 7
43621: PPUSH
43622: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43626: LD_VAR 0 18
43630: PPUSH
43631: CALL_OW 181
// end ; continue ;
43635: GO 43287
// end ; if not cleaners or not tmp in cleaners then
43637: LD_VAR 0 6
43641: NOT
43642: PUSH
43643: LD_VAR 0 13
43647: PUSH
43648: LD_VAR 0 6
43652: IN
43653: NOT
43654: OR
43655: IFFALSE 43962
// begin if dep then
43657: LD_VAR 0 17
43661: IFFALSE 43797
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43663: LD_ADDR_VAR 0 16
43667: PUSH
43668: LD_VAR 0 17
43672: PUSH
43673: LD_INT 1
43675: ARRAY
43676: PPUSH
43677: CALL_OW 250
43681: PPUSH
43682: LD_VAR 0 17
43686: PUSH
43687: LD_INT 1
43689: ARRAY
43690: PPUSH
43691: CALL_OW 254
43695: PPUSH
43696: LD_INT 5
43698: PPUSH
43699: CALL_OW 272
43703: PUSH
43704: LD_VAR 0 17
43708: PUSH
43709: LD_INT 1
43711: ARRAY
43712: PPUSH
43713: CALL_OW 251
43717: PPUSH
43718: LD_VAR 0 17
43722: PUSH
43723: LD_INT 1
43725: ARRAY
43726: PPUSH
43727: CALL_OW 254
43731: PPUSH
43732: LD_INT 5
43734: PPUSH
43735: CALL_OW 273
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43744: LD_VAR 0 16
43748: PUSH
43749: LD_INT 1
43751: ARRAY
43752: PPUSH
43753: LD_VAR 0 16
43757: PUSH
43758: LD_INT 2
43760: ARRAY
43761: PPUSH
43762: CALL_OW 488
43766: IFFALSE 43797
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43768: LD_VAR 0 13
43772: PPUSH
43773: LD_VAR 0 16
43777: PUSH
43778: LD_INT 1
43780: ARRAY
43781: PPUSH
43782: LD_VAR 0 16
43786: PUSH
43787: LD_INT 2
43789: ARRAY
43790: PPUSH
43791: CALL_OW 111
// continue ;
43795: GO 43287
// end ; end ; r := GetDir ( tmp ) ;
43797: LD_ADDR_VAR 0 15
43801: PUSH
43802: LD_VAR 0 13
43806: PPUSH
43807: CALL_OW 254
43811: ST_TO_ADDR
// if r = 5 then
43812: LD_VAR 0 15
43816: PUSH
43817: LD_INT 5
43819: EQUAL
43820: IFFALSE 43830
// r := 0 ;
43822: LD_ADDR_VAR 0 15
43826: PUSH
43827: LD_INT 0
43829: ST_TO_ADDR
// for j = r to 5 do
43830: LD_ADDR_VAR 0 10
43834: PUSH
43835: DOUBLE
43836: LD_VAR 0 15
43840: DEC
43841: ST_TO_ADDR
43842: LD_INT 5
43844: PUSH
43845: FOR_TO
43846: IFFALSE 43960
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43848: LD_ADDR_VAR 0 11
43852: PUSH
43853: LD_VAR 0 13
43857: PPUSH
43858: CALL_OW 250
43862: PPUSH
43863: LD_VAR 0 10
43867: PPUSH
43868: LD_INT 2
43870: PPUSH
43871: CALL_OW 272
43875: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43876: LD_ADDR_VAR 0 12
43880: PUSH
43881: LD_VAR 0 13
43885: PPUSH
43886: CALL_OW 251
43890: PPUSH
43891: LD_VAR 0 10
43895: PPUSH
43896: LD_INT 2
43898: PPUSH
43899: CALL_OW 273
43903: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43904: LD_VAR 0 11
43908: PPUSH
43909: LD_VAR 0 12
43913: PPUSH
43914: CALL_OW 488
43918: PUSH
43919: LD_VAR 0 11
43923: PPUSH
43924: LD_VAR 0 12
43928: PPUSH
43929: CALL_OW 428
43933: NOT
43934: AND
43935: IFFALSE 43958
// begin ComMoveXY ( tmp , _x , _y ) ;
43937: LD_VAR 0 13
43941: PPUSH
43942: LD_VAR 0 11
43946: PPUSH
43947: LD_VAR 0 12
43951: PPUSH
43952: CALL_OW 111
// break ;
43956: GO 43960
// end ; end ;
43958: GO 43845
43960: POP
43961: POP
// end ; end ;
43962: GO 43287
43964: POP
43965: POP
// end ;
43966: LD_VAR 0 8
43970: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43971: LD_INT 0
43973: PPUSH
// result := true ;
43974: LD_ADDR_VAR 0 3
43978: PUSH
43979: LD_INT 1
43981: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43982: LD_VAR 0 2
43986: PUSH
43987: LD_INT 24
43989: DOUBLE
43990: EQUAL
43991: IFTRUE 44001
43993: LD_INT 33
43995: DOUBLE
43996: EQUAL
43997: IFTRUE 44001
43999: GO 44026
44001: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44002: LD_ADDR_VAR 0 3
44006: PUSH
44007: LD_INT 32
44009: PPUSH
44010: LD_VAR 0 1
44014: PPUSH
44015: CALL_OW 321
44019: PUSH
44020: LD_INT 2
44022: EQUAL
44023: ST_TO_ADDR
44024: GO 44346
44026: LD_INT 20
44028: DOUBLE
44029: EQUAL
44030: IFTRUE 44034
44032: GO 44059
44034: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44035: LD_ADDR_VAR 0 3
44039: PUSH
44040: LD_INT 6
44042: PPUSH
44043: LD_VAR 0 1
44047: PPUSH
44048: CALL_OW 321
44052: PUSH
44053: LD_INT 2
44055: EQUAL
44056: ST_TO_ADDR
44057: GO 44346
44059: LD_INT 22
44061: DOUBLE
44062: EQUAL
44063: IFTRUE 44073
44065: LD_INT 36
44067: DOUBLE
44068: EQUAL
44069: IFTRUE 44073
44071: GO 44098
44073: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44074: LD_ADDR_VAR 0 3
44078: PUSH
44079: LD_INT 15
44081: PPUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL_OW 321
44091: PUSH
44092: LD_INT 2
44094: EQUAL
44095: ST_TO_ADDR
44096: GO 44346
44098: LD_INT 30
44100: DOUBLE
44101: EQUAL
44102: IFTRUE 44106
44104: GO 44131
44106: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44107: LD_ADDR_VAR 0 3
44111: PUSH
44112: LD_INT 20
44114: PPUSH
44115: LD_VAR 0 1
44119: PPUSH
44120: CALL_OW 321
44124: PUSH
44125: LD_INT 2
44127: EQUAL
44128: ST_TO_ADDR
44129: GO 44346
44131: LD_INT 28
44133: DOUBLE
44134: EQUAL
44135: IFTRUE 44145
44137: LD_INT 21
44139: DOUBLE
44140: EQUAL
44141: IFTRUE 44145
44143: GO 44170
44145: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44146: LD_ADDR_VAR 0 3
44150: PUSH
44151: LD_INT 21
44153: PPUSH
44154: LD_VAR 0 1
44158: PPUSH
44159: CALL_OW 321
44163: PUSH
44164: LD_INT 2
44166: EQUAL
44167: ST_TO_ADDR
44168: GO 44346
44170: LD_INT 16
44172: DOUBLE
44173: EQUAL
44174: IFTRUE 44178
44176: GO 44205
44178: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44179: LD_ADDR_VAR 0 3
44183: PUSH
44184: LD_EXP 27
44188: PPUSH
44189: LD_VAR 0 1
44193: PPUSH
44194: CALL_OW 321
44198: PUSH
44199: LD_INT 2
44201: EQUAL
44202: ST_TO_ADDR
44203: GO 44346
44205: LD_INT 19
44207: DOUBLE
44208: EQUAL
44209: IFTRUE 44219
44211: LD_INT 23
44213: DOUBLE
44214: EQUAL
44215: IFTRUE 44219
44217: GO 44246
44219: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44220: LD_ADDR_VAR 0 3
44224: PUSH
44225: LD_EXP 26
44229: PPUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 321
44239: PUSH
44240: LD_INT 2
44242: EQUAL
44243: ST_TO_ADDR
44244: GO 44346
44246: LD_INT 17
44248: DOUBLE
44249: EQUAL
44250: IFTRUE 44254
44252: GO 44279
44254: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44255: LD_ADDR_VAR 0 3
44259: PUSH
44260: LD_INT 39
44262: PPUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: CALL_OW 321
44272: PUSH
44273: LD_INT 2
44275: EQUAL
44276: ST_TO_ADDR
44277: GO 44346
44279: LD_INT 18
44281: DOUBLE
44282: EQUAL
44283: IFTRUE 44287
44285: GO 44312
44287: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 40
44295: PPUSH
44296: LD_VAR 0 1
44300: PPUSH
44301: CALL_OW 321
44305: PUSH
44306: LD_INT 2
44308: EQUAL
44309: ST_TO_ADDR
44310: GO 44346
44312: LD_INT 27
44314: DOUBLE
44315: EQUAL
44316: IFTRUE 44320
44318: GO 44345
44320: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44321: LD_ADDR_VAR 0 3
44325: PUSH
44326: LD_INT 35
44328: PPUSH
44329: LD_VAR 0 1
44333: PPUSH
44334: CALL_OW 321
44338: PUSH
44339: LD_INT 2
44341: EQUAL
44342: ST_TO_ADDR
44343: GO 44346
44345: POP
// end ;
44346: LD_VAR 0 3
44350: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44351: LD_INT 0
44353: PPUSH
44354: PPUSH
44355: PPUSH
44356: PPUSH
44357: PPUSH
44358: PPUSH
44359: PPUSH
44360: PPUSH
44361: PPUSH
44362: PPUSH
44363: PPUSH
// result := false ;
44364: LD_ADDR_VAR 0 6
44368: PUSH
44369: LD_INT 0
44371: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44372: LD_VAR 0 1
44376: NOT
44377: PUSH
44378: LD_VAR 0 1
44382: PPUSH
44383: CALL_OW 266
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: IN
44398: NOT
44399: OR
44400: PUSH
44401: LD_VAR 0 2
44405: NOT
44406: OR
44407: PUSH
44408: LD_VAR 0 5
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 3
44424: PUSH
44425: LD_INT 4
44427: PUSH
44428: LD_INT 5
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: IN
44439: NOT
44440: OR
44441: PUSH
44442: LD_VAR 0 3
44446: PPUSH
44447: LD_VAR 0 4
44451: PPUSH
44452: CALL_OW 488
44456: NOT
44457: OR
44458: IFFALSE 44462
// exit ;
44460: GO 45198
// side := GetSide ( depot ) ;
44462: LD_ADDR_VAR 0 9
44466: PUSH
44467: LD_VAR 0 1
44471: PPUSH
44472: CALL_OW 255
44476: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44477: LD_VAR 0 9
44481: PPUSH
44482: LD_VAR 0 2
44486: PPUSH
44487: CALL 43971 0 2
44491: NOT
44492: IFFALSE 44496
// exit ;
44494: GO 45198
// pom := GetBase ( depot ) ;
44496: LD_ADDR_VAR 0 10
44500: PUSH
44501: LD_VAR 0 1
44505: PPUSH
44506: CALL_OW 274
44510: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44511: LD_ADDR_VAR 0 11
44515: PUSH
44516: LD_VAR 0 2
44520: PPUSH
44521: LD_VAR 0 1
44525: PPUSH
44526: CALL_OW 248
44530: PPUSH
44531: CALL_OW 450
44535: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44536: LD_VAR 0 10
44540: PPUSH
44541: LD_INT 1
44543: PPUSH
44544: CALL_OW 275
44548: PUSH
44549: LD_VAR 0 11
44553: PUSH
44554: LD_INT 1
44556: ARRAY
44557: GREATEREQUAL
44558: PUSH
44559: LD_VAR 0 10
44563: PPUSH
44564: LD_INT 2
44566: PPUSH
44567: CALL_OW 275
44571: PUSH
44572: LD_VAR 0 11
44576: PUSH
44577: LD_INT 2
44579: ARRAY
44580: GREATEREQUAL
44581: AND
44582: PUSH
44583: LD_VAR 0 10
44587: PPUSH
44588: LD_INT 3
44590: PPUSH
44591: CALL_OW 275
44595: PUSH
44596: LD_VAR 0 11
44600: PUSH
44601: LD_INT 3
44603: ARRAY
44604: GREATEREQUAL
44605: AND
44606: NOT
44607: IFFALSE 44611
// exit ;
44609: GO 45198
// if GetBType ( depot ) = b_depot then
44611: LD_VAR 0 1
44615: PPUSH
44616: CALL_OW 266
44620: PUSH
44621: LD_INT 0
44623: EQUAL
44624: IFFALSE 44636
// dist := 28 else
44626: LD_ADDR_VAR 0 14
44630: PUSH
44631: LD_INT 28
44633: ST_TO_ADDR
44634: GO 44644
// dist := 36 ;
44636: LD_ADDR_VAR 0 14
44640: PUSH
44641: LD_INT 36
44643: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44644: LD_VAR 0 1
44648: PPUSH
44649: LD_VAR 0 3
44653: PPUSH
44654: LD_VAR 0 4
44658: PPUSH
44659: CALL_OW 297
44663: PUSH
44664: LD_VAR 0 14
44668: GREATER
44669: IFFALSE 44673
// exit ;
44671: GO 45198
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44673: LD_ADDR_VAR 0 12
44677: PUSH
44678: LD_VAR 0 2
44682: PPUSH
44683: LD_VAR 0 3
44687: PPUSH
44688: LD_VAR 0 4
44692: PPUSH
44693: LD_VAR 0 5
44697: PPUSH
44698: LD_VAR 0 1
44702: PPUSH
44703: CALL_OW 248
44707: PPUSH
44708: LD_INT 0
44710: PPUSH
44711: CALL 45203 0 6
44715: ST_TO_ADDR
// if not hexes then
44716: LD_VAR 0 12
44720: NOT
44721: IFFALSE 44725
// exit ;
44723: GO 45198
// hex := GetHexInfo ( x , y ) ;
44725: LD_ADDR_VAR 0 15
44729: PUSH
44730: LD_VAR 0 3
44734: PPUSH
44735: LD_VAR 0 4
44739: PPUSH
44740: CALL_OW 546
44744: ST_TO_ADDR
// if hex [ 1 ] then
44745: LD_VAR 0 15
44749: PUSH
44750: LD_INT 1
44752: ARRAY
44753: IFFALSE 44757
// exit ;
44755: GO 45198
// height := hex [ 2 ] ;
44757: LD_ADDR_VAR 0 13
44761: PUSH
44762: LD_VAR 0 15
44766: PUSH
44767: LD_INT 2
44769: ARRAY
44770: ST_TO_ADDR
// for i = 1 to hexes do
44771: LD_ADDR_VAR 0 7
44775: PUSH
44776: DOUBLE
44777: LD_INT 1
44779: DEC
44780: ST_TO_ADDR
44781: LD_VAR 0 12
44785: PUSH
44786: FOR_TO
44787: IFFALSE 45117
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44789: LD_VAR 0 12
44793: PUSH
44794: LD_VAR 0 7
44798: ARRAY
44799: PUSH
44800: LD_INT 1
44802: ARRAY
44803: PPUSH
44804: LD_VAR 0 12
44808: PUSH
44809: LD_VAR 0 7
44813: ARRAY
44814: PUSH
44815: LD_INT 2
44817: ARRAY
44818: PPUSH
44819: CALL_OW 488
44823: NOT
44824: PUSH
44825: LD_VAR 0 12
44829: PUSH
44830: LD_VAR 0 7
44834: ARRAY
44835: PUSH
44836: LD_INT 1
44838: ARRAY
44839: PPUSH
44840: LD_VAR 0 12
44844: PUSH
44845: LD_VAR 0 7
44849: ARRAY
44850: PUSH
44851: LD_INT 2
44853: ARRAY
44854: PPUSH
44855: CALL_OW 428
44859: PUSH
44860: LD_INT 0
44862: GREATER
44863: OR
44864: PUSH
44865: LD_VAR 0 12
44869: PUSH
44870: LD_VAR 0 7
44874: ARRAY
44875: PUSH
44876: LD_INT 1
44878: ARRAY
44879: PPUSH
44880: LD_VAR 0 12
44884: PUSH
44885: LD_VAR 0 7
44889: ARRAY
44890: PUSH
44891: LD_INT 2
44893: ARRAY
44894: PPUSH
44895: CALL_OW 351
44899: OR
44900: IFFALSE 44906
// exit ;
44902: POP
44903: POP
44904: GO 45198
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44906: LD_ADDR_VAR 0 8
44910: PUSH
44911: LD_VAR 0 12
44915: PUSH
44916: LD_VAR 0 7
44920: ARRAY
44921: PUSH
44922: LD_INT 1
44924: ARRAY
44925: PPUSH
44926: LD_VAR 0 12
44930: PUSH
44931: LD_VAR 0 7
44935: ARRAY
44936: PUSH
44937: LD_INT 2
44939: ARRAY
44940: PPUSH
44941: CALL_OW 546
44945: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44946: LD_VAR 0 8
44950: PUSH
44951: LD_INT 1
44953: ARRAY
44954: PUSH
44955: LD_VAR 0 8
44959: PUSH
44960: LD_INT 2
44962: ARRAY
44963: PUSH
44964: LD_VAR 0 13
44968: PUSH
44969: LD_INT 2
44971: PLUS
44972: GREATER
44973: OR
44974: PUSH
44975: LD_VAR 0 8
44979: PUSH
44980: LD_INT 2
44982: ARRAY
44983: PUSH
44984: LD_VAR 0 13
44988: PUSH
44989: LD_INT 2
44991: MINUS
44992: LESS
44993: OR
44994: PUSH
44995: LD_VAR 0 8
44999: PUSH
45000: LD_INT 3
45002: ARRAY
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: LD_INT 8
45009: PUSH
45010: LD_INT 9
45012: PUSH
45013: LD_INT 10
45015: PUSH
45016: LD_INT 11
45018: PUSH
45019: LD_INT 12
45021: PUSH
45022: LD_INT 13
45024: PUSH
45025: LD_INT 16
45027: PUSH
45028: LD_INT 17
45030: PUSH
45031: LD_INT 18
45033: PUSH
45034: LD_INT 19
45036: PUSH
45037: LD_INT 20
45039: PUSH
45040: LD_INT 21
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: IN
45058: NOT
45059: OR
45060: PUSH
45061: LD_VAR 0 8
45065: PUSH
45066: LD_INT 5
45068: ARRAY
45069: NOT
45070: OR
45071: PUSH
45072: LD_VAR 0 8
45076: PUSH
45077: LD_INT 6
45079: ARRAY
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 7
45089: PUSH
45090: LD_INT 9
45092: PUSH
45093: LD_INT 10
45095: PUSH
45096: LD_INT 11
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: IN
45107: NOT
45108: OR
45109: IFFALSE 45115
// exit ;
45111: POP
45112: POP
45113: GO 45198
// end ;
45115: GO 44786
45117: POP
45118: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45119: LD_VAR 0 9
45123: PPUSH
45124: LD_VAR 0 3
45128: PPUSH
45129: LD_VAR 0 4
45133: PPUSH
45134: LD_INT 20
45136: PPUSH
45137: CALL 37144 0 4
45141: PUSH
45142: LD_INT 4
45144: ARRAY
45145: IFFALSE 45149
// exit ;
45147: GO 45198
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45149: LD_VAR 0 2
45153: PUSH
45154: LD_INT 29
45156: PUSH
45157: LD_INT 30
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: IN
45164: PUSH
45165: LD_VAR 0 3
45169: PPUSH
45170: LD_VAR 0 4
45174: PPUSH
45175: LD_VAR 0 9
45179: PPUSH
45180: CALL_OW 440
45184: NOT
45185: AND
45186: IFFALSE 45190
// exit ;
45188: GO 45198
// result := true ;
45190: LD_ADDR_VAR 0 6
45194: PUSH
45195: LD_INT 1
45197: ST_TO_ADDR
// end ;
45198: LD_VAR 0 6
45202: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45203: LD_INT 0
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
45210: PPUSH
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
45221: PPUSH
45222: PPUSH
45223: PPUSH
45224: PPUSH
45225: PPUSH
45226: PPUSH
45227: PPUSH
45228: PPUSH
45229: PPUSH
45230: PPUSH
45231: PPUSH
45232: PPUSH
45233: PPUSH
45234: PPUSH
45235: PPUSH
45236: PPUSH
45237: PPUSH
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
45252: PPUSH
45253: PPUSH
45254: PPUSH
45255: PPUSH
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
45262: PPUSH
// result = [ ] ;
45263: LD_ADDR_VAR 0 7
45267: PUSH
45268: EMPTY
45269: ST_TO_ADDR
// temp_list = [ ] ;
45270: LD_ADDR_VAR 0 9
45274: PUSH
45275: EMPTY
45276: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45277: LD_VAR 0 4
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: LD_INT 3
45293: PUSH
45294: LD_INT 4
45296: PUSH
45297: LD_INT 5
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: IN
45308: NOT
45309: PUSH
45310: LD_VAR 0 1
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: IN
45325: PUSH
45326: LD_VAR 0 5
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 2
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: IN
45345: NOT
45346: AND
45347: OR
45348: IFFALSE 45352
// exit ;
45350: GO 63743
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45352: LD_VAR 0 1
45356: PUSH
45357: LD_INT 6
45359: PUSH
45360: LD_INT 7
45362: PUSH
45363: LD_INT 8
45365: PUSH
45366: LD_INT 13
45368: PUSH
45369: LD_INT 12
45371: PUSH
45372: LD_INT 15
45374: PUSH
45375: LD_INT 11
45377: PUSH
45378: LD_INT 14
45380: PUSH
45381: LD_INT 10
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: IN
45395: IFFALSE 45405
// btype = b_lab ;
45397: LD_ADDR_VAR 0 1
45401: PUSH
45402: LD_INT 6
45404: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45405: LD_VAR 0 6
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: IN
45424: NOT
45425: PUSH
45426: LD_VAR 0 1
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 3
45442: PUSH
45443: LD_INT 6
45445: PUSH
45446: LD_INT 36
45448: PUSH
45449: LD_INT 4
45451: PUSH
45452: LD_INT 5
45454: PUSH
45455: LD_INT 31
45457: PUSH
45458: LD_INT 32
45460: PUSH
45461: LD_INT 33
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: IN
45477: NOT
45478: PUSH
45479: LD_VAR 0 6
45483: PUSH
45484: LD_INT 1
45486: EQUAL
45487: AND
45488: OR
45489: PUSH
45490: LD_VAR 0 1
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 3
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: IN
45505: NOT
45506: PUSH
45507: LD_VAR 0 6
45511: PUSH
45512: LD_INT 2
45514: EQUAL
45515: AND
45516: OR
45517: IFFALSE 45527
// mode = 0 ;
45519: LD_ADDR_VAR 0 6
45523: PUSH
45524: LD_INT 0
45526: ST_TO_ADDR
// case mode of 0 :
45527: LD_VAR 0 6
45531: PUSH
45532: LD_INT 0
45534: DOUBLE
45535: EQUAL
45536: IFTRUE 45540
45538: GO 56993
45540: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45541: LD_ADDR_VAR 0 11
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 3
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45734: LD_ADDR_VAR 0 12
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45930: LD_ADDR_VAR 0 13
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: NEG
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: LD_INT 3
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: LD_INT 3
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46129: LD_ADDR_VAR 0 14
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 3
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 3
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46325: LD_ADDR_VAR 0 15
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46518: LD_ADDR_VAR 0 16
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 3
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 3
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46711: LD_ADDR_VAR 0 17
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46941: LD_ADDR_VAR 0 18
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47171: LD_ADDR_VAR 0 19
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 2
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47401: LD_ADDR_VAR 0 20
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47631: LD_ADDR_VAR 0 21
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47861: LD_ADDR_VAR 0 22
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48091: LD_ADDR_VAR 0 23
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 3
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 3
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48371: LD_ADDR_VAR 0 24
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 3
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 3
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48647: LD_ADDR_VAR 0 25
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 2
48834: NEG
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 3
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48921: LD_ADDR_VAR 0 26
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 3
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 3
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49197: LD_ADDR_VAR 0 27
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: LD_INT 2
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 3
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49477: LD_ADDR_VAR 0 28
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: LD_INT 3
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 3
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 3
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49759: LD_ADDR_VAR 0 29
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 3
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 3
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 3
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 3
50003: NEG
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50038: LD_ADDR_VAR 0 30
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 3
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: LD_INT 3
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50316: LD_ADDR_VAR 0 31
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: LD_INT 3
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 3
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 3
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 3
50559: NEG
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50594: LD_ADDR_VAR 0 32
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: LD_INT 3
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50872: LD_ADDR_VAR 0 33
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 2
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: NEG
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: NEG
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51151: LD_ADDR_VAR 0 34
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: LD_INT 3
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 3
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51431: LD_ADDR_VAR 0 35
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51543: LD_ADDR_VAR 0 36
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51655: LD_ADDR_VAR 0 37
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51767: LD_ADDR_VAR 0 38
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51879: LD_ADDR_VAR 0 39
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51991: LD_ADDR_VAR 0 40
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52103: LD_ADDR_VAR 0 41
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 3
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 3
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 3
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 3
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52453: LD_ADDR_VAR 0 42
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: NEG
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 3
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 3
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: LD_INT 3
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 3
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 3
52750: NEG
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 3
52762: NEG
52763: PUSH
52764: LD_INT 3
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52803: LD_ADDR_VAR 0 43
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 3
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: LD_INT 3
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 3
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 3
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53151: LD_ADDR_VAR 0 44
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: LD_INT 3
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 3
53425: NEG
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: NEG
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53501: LD_ADDR_VAR 0 45
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 3
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 3
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: LD_INT 3
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 3
53798: NEG
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: LD_INT 3
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53851: LD_ADDR_VAR 0 46
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 3
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 3
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 3
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: LD_INT 2
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 3
54147: NEG
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 3
54158: NEG
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54199: LD_ADDR_VAR 0 47
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54350: LD_ADDR_VAR 0 48
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 2
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54497: LD_ADDR_VAR 0 49
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54641: LD_ADDR_VAR 0 50
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54785: LD_ADDR_VAR 0 51
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54932: LD_ADDR_VAR 0 52
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55083: LD_ADDR_VAR 0 53
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55313: LD_ADDR_VAR 0 54
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55543: LD_ADDR_VAR 0 55
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55773: LD_ADDR_VAR 0 56
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 2
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56003: LD_ADDR_VAR 0 57
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56233: LD_ADDR_VAR 0 58
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: NEG
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56463: LD_ADDR_VAR 0 59
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56551: LD_ADDR_VAR 0 60
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56639: LD_ADDR_VAR 0 61
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56727: LD_ADDR_VAR 0 62
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56815: LD_ADDR_VAR 0 63
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56903: LD_ADDR_VAR 0 64
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: ST_TO_ADDR
// end ; 1 :
56991: GO 62888
56993: LD_INT 1
56995: DOUBLE
56996: EQUAL
56997: IFTRUE 57001
56999: GO 59624
57001: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57002: LD_ADDR_VAR 0 11
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 3
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57046: LD_ADDR_VAR 0 12
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 3
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57087: LD_ADDR_VAR 0 13
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57127: LD_ADDR_VAR 0 14
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57168: LD_ADDR_VAR 0 15
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57212: LD_ADDR_VAR 0 16
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 3
57231: NEG
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: NEG
57244: PUSH
57245: LD_INT 3
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57258: LD_ADDR_VAR 0 17
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 3
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 3
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57302: LD_ADDR_VAR 0 18
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 3
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: LIST
57342: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57343: LD_ADDR_VAR 0 19
57347: PUSH
57348: LD_INT 3
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: PUSH
57361: LD_INT 3
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 3
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57383: LD_ADDR_VAR 0 20
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: LD_INT 3
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57424: LD_ADDR_VAR 0 21
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57468: LD_ADDR_VAR 0 22
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 3
57487: NEG
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: NEG
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: LIST
57513: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57514: LD_ADDR_VAR 0 23
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 3
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 4
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57558: LD_ADDR_VAR 0 24
57562: PUSH
57563: LD_INT 3
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 4
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57599: LD_ADDR_VAR 0 25
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: LD_INT 3
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 4
57616: PUSH
57617: LD_INT 3
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 3
57626: PUSH
57627: LD_INT 4
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57639: LD_ADDR_VAR 0 26
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 4
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57680: LD_ADDR_VAR 0 27
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 4
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57724: LD_ADDR_VAR 0 28
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: LD_INT 3
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: LD_INT 4
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 4
57755: NEG
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: LIST
57769: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57770: LD_ADDR_VAR 0 29
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: LD_INT 4
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: LD_INT 4
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 3
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 5
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 5
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: LD_INT 4
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 6
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 6
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 5
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57925: LD_ADDR_VAR 0 30
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 4
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 4
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 4
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 5
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 5
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 5
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 6
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 6
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58068: LD_ADDR_VAR 0 31
58072: PUSH
58073: LD_INT 3
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 3
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 3
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 4
58105: PUSH
58106: LD_INT 3
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 4
58115: PUSH
58116: LD_INT 4
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: LD_INT 4
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 5
58135: PUSH
58136: LD_INT 4
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 5
58145: PUSH
58146: LD_INT 5
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 4
58155: PUSH
58156: LD_INT 5
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 6
58165: PUSH
58166: LD_INT 5
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 6
58175: PUSH
58176: LD_INT 6
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 5
58185: PUSH
58186: LD_INT 6
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58207: LD_ADDR_VAR 0 32
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 3
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 4
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 4
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 3
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 5
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 5
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 4
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: LD_INT 6
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 6
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: LD_INT 5
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58350: LD_ADDR_VAR 0 33
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 3
58368: NEG
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 3
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 4
58402: NEG
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 4
58413: NEG
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 4
58425: NEG
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 5
58436: NEG
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 5
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 5
58459: NEG
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 6
58470: NEG
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 6
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58505: LD_ADDR_VAR 0 34
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: LD_INT 4
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 4
58560: NEG
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 4
58572: NEG
58573: PUSH
58574: LD_INT 4
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 4
58584: NEG
58585: PUSH
58586: LD_INT 5
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 5
58596: NEG
58597: PUSH
58598: LD_INT 4
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 5
58608: NEG
58609: PUSH
58610: LD_INT 5
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 5
58620: NEG
58621: PUSH
58622: LD_INT 6
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 6
58632: NEG
58633: PUSH
58634: LD_INT 5
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 6
58644: NEG
58645: PUSH
58646: LD_INT 6
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58668: LD_ADDR_VAR 0 41
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 3
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: LIST
58711: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58712: LD_ADDR_VAR 0 42
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 3
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58753: LD_ADDR_VAR 0 43
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 3
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58793: LD_ADDR_VAR 0 44
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58834: LD_ADDR_VAR 0 45
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58878: LD_ADDR_VAR 0 46
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: LD_INT 2
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 3
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58924: LD_ADDR_VAR 0 47
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: LD_INT 3
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58957: LD_ADDR_VAR 0 48
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58988: LD_ADDR_VAR 0 49
58992: PUSH
58993: LD_INT 3
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 3
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59017: LD_ADDR_VAR 0 50
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59046: LD_ADDR_VAR 0 51
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59077: LD_ADDR_VAR 0 52
59081: PUSH
59082: LD_INT 3
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59110: LD_ADDR_VAR 0 53
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 3
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 3
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59154: LD_ADDR_VAR 0 54
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59195: LD_ADDR_VAR 0 55
59199: PUSH
59200: LD_INT 3
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 3
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: LIST
59234: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59235: LD_ADDR_VAR 0 56
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: LIST
59275: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59276: LD_ADDR_VAR 0 57
59280: PUSH
59281: LD_INT 2
59283: NEG
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: NEG
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 3
59305: NEG
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59320: LD_ADDR_VAR 0 58
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 3
59339: NEG
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: NEG
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59366: LD_ADDR_VAR 0 59
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: LIST
59409: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59410: LD_ADDR_VAR 0 60
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: LIST
59450: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59451: LD_ADDR_VAR 0 61
59455: PUSH
59456: LD_INT 2
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59491: LD_ADDR_VAR 0 62
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: LIST
59531: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59532: LD_ADDR_VAR 0 63
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59576: LD_ADDR_VAR 0 64
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: ST_TO_ADDR
// end ; 2 :
59622: GO 62888
59624: LD_INT 2
59626: DOUBLE
59627: EQUAL
59628: IFTRUE 59632
59630: GO 62887
59632: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59633: LD_ADDR_VAR 0 29
59637: PUSH
59638: LD_INT 4
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 4
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 5
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 5
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 4
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 5
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: LD_INT 3
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 3
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 4
59753: PUSH
59754: LD_INT 3
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 4
59763: PUSH
59764: LD_INT 4
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: LD_INT 4
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 3
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 4
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 4
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 4
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 3
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 4
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 5
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 5
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 4
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: LD_INT 5
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 3
59927: NEG
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: NEG
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 3
59961: NEG
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 4
59972: NEG
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 4
59983: NEG
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 4
59995: NEG
59996: PUSH
59997: LD_INT 2
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 4
60018: NEG
60019: PUSH
60020: LD_INT 4
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 4
60030: NEG
60031: PUSH
60032: LD_INT 5
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: LD_INT 4
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 3
60054: NEG
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 4
60066: NEG
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 5
60078: NEG
60079: PUSH
60080: LD_INT 4
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 5
60090: NEG
60091: PUSH
60092: LD_INT 5
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: LD_INT 5
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 5
60114: NEG
60115: PUSH
60116: LD_INT 3
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60171: LD_ADDR_VAR 0 30
60175: PUSH
60176: LD_INT 4
60178: PUSH
60179: LD_INT 4
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 4
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 5
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 5
60208: PUSH
60209: LD_INT 5
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 4
60218: PUSH
60219: LD_INT 5
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: PUSH
60229: LD_INT 4
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 5
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: LD_INT 5
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 2
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: LD_INT 3
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 4
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 4
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 3
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: LD_INT 4
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 4
60361: NEG
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 4
60372: NEG
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 3
60384: NEG
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 4
60406: NEG
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 5
60417: NEG
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 5
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 5
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 3
60463: NEG
60464: PUSH
60465: LD_INT 3
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: LD_INT 4
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: LD_INT 3
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 2
60499: NEG
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: LD_INT 2
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 4
60523: NEG
60524: PUSH
60525: LD_INT 3
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 4
60535: NEG
60536: PUSH
60537: LD_INT 4
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: LD_INT 4
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 4
60559: NEG
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 4
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 5
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: LD_INT 4
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: LD_INT 4
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: LD_INT 5
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: LD_INT 3
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 5
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60718: LD_ADDR_VAR 0 31
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 4
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 5
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 5
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 4
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 3
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: LD_INT 5
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: LD_INT 3
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: NEG
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 3
60829: NEG
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: NEG
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 3
60863: NEG
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 4
60874: NEG
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 4
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 4
60897: NEG
60898: PUSH
60899: LD_INT 2
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 2
60909: NEG
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 4
60920: NEG
60921: PUSH
60922: LD_INT 4
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 4
60932: NEG
60933: PUSH
60934: LD_INT 5
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 3
60944: NEG
60945: PUSH
60946: LD_INT 4
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 3
60956: NEG
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 4
60968: NEG
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 5
60980: NEG
60981: PUSH
60982: LD_INT 4
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 5
60992: NEG
60993: PUSH
60994: LD_INT 5
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: LD_INT 5
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 5
61016: NEG
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 3
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 4
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: LD_INT 3
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: LD_INT 4
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: LD_INT 2
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: LD_INT 4
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 4
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 4
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 5
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 5
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 4
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 3
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 5
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61268: LD_ADDR_VAR 0 32
61272: PUSH
61273: LD_INT 4
61275: NEG
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 4
61286: NEG
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: NEG
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 4
61320: NEG
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 5
61331: NEG
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 5
61342: NEG
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 5
61354: NEG
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 3
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: NEG
61378: PUSH
61379: LD_INT 3
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 3
61389: NEG
61390: PUSH
61391: LD_INT 4
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: LD_INT 3
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 3
61425: NEG
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 4
61437: NEG
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 4
61449: NEG
61450: PUSH
61451: LD_INT 4
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 4
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 4
61473: NEG
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 4
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 5
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 4
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 3
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: LD_INT 4
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: LD_INT 5
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: LD_INT 3
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: LD_INT 5
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 3
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 3
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 4
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 4
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 3
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 2
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 4
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 4
61680: PUSH
61681: LD_INT 4
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 4
61690: PUSH
61691: LD_INT 3
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 5
61700: PUSH
61701: LD_INT 4
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 5
61710: PUSH
61711: LD_INT 5
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 4
61720: PUSH
61721: LD_INT 5
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: LD_INT 4
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 3
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 5
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 3
61760: PUSH
61761: LD_INT 5
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61815: LD_ADDR_VAR 0 33
61819: PUSH
61820: LD_INT 4
61822: NEG
61823: PUSH
61824: LD_INT 4
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 4
61834: NEG
61835: PUSH
61836: LD_INT 5
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 3
61846: NEG
61847: PUSH
61848: LD_INT 4
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 3
61858: NEG
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 4
61870: NEG
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 5
61882: NEG
61883: PUSH
61884: LD_INT 4
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 5
61894: NEG
61895: PUSH
61896: LD_INT 5
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 3
61906: NEG
61907: PUSH
61908: LD_INT 5
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 5
61918: NEG
61919: PUSH
61920: LD_INT 3
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 3
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 4
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: LD_INT 3
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 2
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: LD_INT 3
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 4
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 2
62020: NEG
62021: PUSH
62022: LD_INT 4
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 4
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 4
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 5
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 5
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 4
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 3
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: LD_INT 2
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 5
62115: PUSH
62116: LD_INT 2
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 3
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 3
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 4
62145: PUSH
62146: LD_INT 3
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 4
62155: PUSH
62156: LD_INT 4
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: LD_INT 4
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: LD_INT 3
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 4
62195: PUSH
62196: LD_INT 2
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: LD_INT 4
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 4
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: LD_INT 3
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 4
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 5
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 5
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: LD_INT 4
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 3
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: LD_INT 5
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 2
62297: NEG
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62353: LD_ADDR_VAR 0 34
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: LD_INT 4
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: LD_INT 5
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: LD_INT 4
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: LD_INT 3
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 3
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 4
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: LD_INT 5
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: LD_INT 3
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 2
62450: NEG
62451: PUSH
62452: LD_INT 5
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 3
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 4
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 4
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 3
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 2
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 4
62545: PUSH
62546: LD_INT 2
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 4
62555: PUSH
62556: LD_INT 4
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 4
62565: PUSH
62566: LD_INT 3
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 5
62575: PUSH
62576: LD_INT 4
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 5
62585: PUSH
62586: LD_INT 5
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 4
62595: PUSH
62596: LD_INT 5
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 3
62605: PUSH
62606: LD_INT 4
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 5
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 3
62635: PUSH
62636: LD_INT 5
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: LD_INT 3
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: LD_INT 4
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 4
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 3
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: PUSH
62718: LD_INT 4
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 2
62727: NEG
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 4
62738: NEG
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 4
62749: NEG
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 3
62761: NEG
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 4
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 5
62794: NEG
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 5
62805: NEG
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 5
62817: NEG
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 3
62829: NEG
62830: PUSH
62831: LD_INT 2
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: ST_TO_ADDR
// end ; end ;
62885: GO 62888
62887: POP
// case btype of b_depot , b_warehouse :
62888: LD_VAR 0 1
62892: PUSH
62893: LD_INT 0
62895: DOUBLE
62896: EQUAL
62897: IFTRUE 62907
62899: LD_INT 1
62901: DOUBLE
62902: EQUAL
62903: IFTRUE 62907
62905: GO 63108
62907: POP
// case nation of nation_american :
62908: LD_VAR 0 5
62912: PUSH
62913: LD_INT 1
62915: DOUBLE
62916: EQUAL
62917: IFTRUE 62921
62919: GO 62977
62921: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62922: LD_ADDR_VAR 0 9
62926: PUSH
62927: LD_VAR 0 11
62931: PUSH
62932: LD_VAR 0 12
62936: PUSH
62937: LD_VAR 0 13
62941: PUSH
62942: LD_VAR 0 14
62946: PUSH
62947: LD_VAR 0 15
62951: PUSH
62952: LD_VAR 0 16
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: PUSH
62965: LD_VAR 0 4
62969: PUSH
62970: LD_INT 1
62972: PLUS
62973: ARRAY
62974: ST_TO_ADDR
62975: GO 63106
62977: LD_INT 2
62979: DOUBLE
62980: EQUAL
62981: IFTRUE 62985
62983: GO 63041
62985: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62986: LD_ADDR_VAR 0 9
62990: PUSH
62991: LD_VAR 0 17
62995: PUSH
62996: LD_VAR 0 18
63000: PUSH
63001: LD_VAR 0 19
63005: PUSH
63006: LD_VAR 0 20
63010: PUSH
63011: LD_VAR 0 21
63015: PUSH
63016: LD_VAR 0 22
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: PUSH
63029: LD_VAR 0 4
63033: PUSH
63034: LD_INT 1
63036: PLUS
63037: ARRAY
63038: ST_TO_ADDR
63039: GO 63106
63041: LD_INT 3
63043: DOUBLE
63044: EQUAL
63045: IFTRUE 63049
63047: GO 63105
63049: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63050: LD_ADDR_VAR 0 9
63054: PUSH
63055: LD_VAR 0 23
63059: PUSH
63060: LD_VAR 0 24
63064: PUSH
63065: LD_VAR 0 25
63069: PUSH
63070: LD_VAR 0 26
63074: PUSH
63075: LD_VAR 0 27
63079: PUSH
63080: LD_VAR 0 28
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: PUSH
63093: LD_VAR 0 4
63097: PUSH
63098: LD_INT 1
63100: PLUS
63101: ARRAY
63102: ST_TO_ADDR
63103: GO 63106
63105: POP
63106: GO 63661
63108: LD_INT 2
63110: DOUBLE
63111: EQUAL
63112: IFTRUE 63122
63114: LD_INT 3
63116: DOUBLE
63117: EQUAL
63118: IFTRUE 63122
63120: GO 63178
63122: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63123: LD_ADDR_VAR 0 9
63127: PUSH
63128: LD_VAR 0 29
63132: PUSH
63133: LD_VAR 0 30
63137: PUSH
63138: LD_VAR 0 31
63142: PUSH
63143: LD_VAR 0 32
63147: PUSH
63148: LD_VAR 0 33
63152: PUSH
63153: LD_VAR 0 34
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: PUSH
63166: LD_VAR 0 4
63170: PUSH
63171: LD_INT 1
63173: PLUS
63174: ARRAY
63175: ST_TO_ADDR
63176: GO 63661
63178: LD_INT 16
63180: DOUBLE
63181: EQUAL
63182: IFTRUE 63240
63184: LD_INT 17
63186: DOUBLE
63187: EQUAL
63188: IFTRUE 63240
63190: LD_INT 18
63192: DOUBLE
63193: EQUAL
63194: IFTRUE 63240
63196: LD_INT 19
63198: DOUBLE
63199: EQUAL
63200: IFTRUE 63240
63202: LD_INT 22
63204: DOUBLE
63205: EQUAL
63206: IFTRUE 63240
63208: LD_INT 20
63210: DOUBLE
63211: EQUAL
63212: IFTRUE 63240
63214: LD_INT 21
63216: DOUBLE
63217: EQUAL
63218: IFTRUE 63240
63220: LD_INT 23
63222: DOUBLE
63223: EQUAL
63224: IFTRUE 63240
63226: LD_INT 24
63228: DOUBLE
63229: EQUAL
63230: IFTRUE 63240
63232: LD_INT 25
63234: DOUBLE
63235: EQUAL
63236: IFTRUE 63240
63238: GO 63296
63240: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63241: LD_ADDR_VAR 0 9
63245: PUSH
63246: LD_VAR 0 35
63250: PUSH
63251: LD_VAR 0 36
63255: PUSH
63256: LD_VAR 0 37
63260: PUSH
63261: LD_VAR 0 38
63265: PUSH
63266: LD_VAR 0 39
63270: PUSH
63271: LD_VAR 0 40
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: PUSH
63284: LD_VAR 0 4
63288: PUSH
63289: LD_INT 1
63291: PLUS
63292: ARRAY
63293: ST_TO_ADDR
63294: GO 63661
63296: LD_INT 6
63298: DOUBLE
63299: EQUAL
63300: IFTRUE 63352
63302: LD_INT 7
63304: DOUBLE
63305: EQUAL
63306: IFTRUE 63352
63308: LD_INT 8
63310: DOUBLE
63311: EQUAL
63312: IFTRUE 63352
63314: LD_INT 13
63316: DOUBLE
63317: EQUAL
63318: IFTRUE 63352
63320: LD_INT 12
63322: DOUBLE
63323: EQUAL
63324: IFTRUE 63352
63326: LD_INT 15
63328: DOUBLE
63329: EQUAL
63330: IFTRUE 63352
63332: LD_INT 11
63334: DOUBLE
63335: EQUAL
63336: IFTRUE 63352
63338: LD_INT 14
63340: DOUBLE
63341: EQUAL
63342: IFTRUE 63352
63344: LD_INT 10
63346: DOUBLE
63347: EQUAL
63348: IFTRUE 63352
63350: GO 63408
63352: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63353: LD_ADDR_VAR 0 9
63357: PUSH
63358: LD_VAR 0 41
63362: PUSH
63363: LD_VAR 0 42
63367: PUSH
63368: LD_VAR 0 43
63372: PUSH
63373: LD_VAR 0 44
63377: PUSH
63378: LD_VAR 0 45
63382: PUSH
63383: LD_VAR 0 46
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: PUSH
63396: LD_VAR 0 4
63400: PUSH
63401: LD_INT 1
63403: PLUS
63404: ARRAY
63405: ST_TO_ADDR
63406: GO 63661
63408: LD_INT 36
63410: DOUBLE
63411: EQUAL
63412: IFTRUE 63416
63414: GO 63472
63416: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63417: LD_ADDR_VAR 0 9
63421: PUSH
63422: LD_VAR 0 47
63426: PUSH
63427: LD_VAR 0 48
63431: PUSH
63432: LD_VAR 0 49
63436: PUSH
63437: LD_VAR 0 50
63441: PUSH
63442: LD_VAR 0 51
63446: PUSH
63447: LD_VAR 0 52
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: PUSH
63460: LD_VAR 0 4
63464: PUSH
63465: LD_INT 1
63467: PLUS
63468: ARRAY
63469: ST_TO_ADDR
63470: GO 63661
63472: LD_INT 4
63474: DOUBLE
63475: EQUAL
63476: IFTRUE 63498
63478: LD_INT 5
63480: DOUBLE
63481: EQUAL
63482: IFTRUE 63498
63484: LD_INT 34
63486: DOUBLE
63487: EQUAL
63488: IFTRUE 63498
63490: LD_INT 37
63492: DOUBLE
63493: EQUAL
63494: IFTRUE 63498
63496: GO 63554
63498: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63499: LD_ADDR_VAR 0 9
63503: PUSH
63504: LD_VAR 0 53
63508: PUSH
63509: LD_VAR 0 54
63513: PUSH
63514: LD_VAR 0 55
63518: PUSH
63519: LD_VAR 0 56
63523: PUSH
63524: LD_VAR 0 57
63528: PUSH
63529: LD_VAR 0 58
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: PUSH
63542: LD_VAR 0 4
63546: PUSH
63547: LD_INT 1
63549: PLUS
63550: ARRAY
63551: ST_TO_ADDR
63552: GO 63661
63554: LD_INT 31
63556: DOUBLE
63557: EQUAL
63558: IFTRUE 63604
63560: LD_INT 32
63562: DOUBLE
63563: EQUAL
63564: IFTRUE 63604
63566: LD_INT 33
63568: DOUBLE
63569: EQUAL
63570: IFTRUE 63604
63572: LD_INT 27
63574: DOUBLE
63575: EQUAL
63576: IFTRUE 63604
63578: LD_INT 26
63580: DOUBLE
63581: EQUAL
63582: IFTRUE 63604
63584: LD_INT 28
63586: DOUBLE
63587: EQUAL
63588: IFTRUE 63604
63590: LD_INT 29
63592: DOUBLE
63593: EQUAL
63594: IFTRUE 63604
63596: LD_INT 30
63598: DOUBLE
63599: EQUAL
63600: IFTRUE 63604
63602: GO 63660
63604: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63605: LD_ADDR_VAR 0 9
63609: PUSH
63610: LD_VAR 0 59
63614: PUSH
63615: LD_VAR 0 60
63619: PUSH
63620: LD_VAR 0 61
63624: PUSH
63625: LD_VAR 0 62
63629: PUSH
63630: LD_VAR 0 63
63634: PUSH
63635: LD_VAR 0 64
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: PUSH
63648: LD_VAR 0 4
63652: PUSH
63653: LD_INT 1
63655: PLUS
63656: ARRAY
63657: ST_TO_ADDR
63658: GO 63661
63660: POP
// temp_list2 = [ ] ;
63661: LD_ADDR_VAR 0 10
63665: PUSH
63666: EMPTY
63667: ST_TO_ADDR
// for i in temp_list do
63668: LD_ADDR_VAR 0 8
63672: PUSH
63673: LD_VAR 0 9
63677: PUSH
63678: FOR_IN
63679: IFFALSE 63731
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63681: LD_ADDR_VAR 0 10
63685: PUSH
63686: LD_VAR 0 10
63690: PUSH
63691: LD_VAR 0 8
63695: PUSH
63696: LD_INT 1
63698: ARRAY
63699: PUSH
63700: LD_VAR 0 2
63704: PLUS
63705: PUSH
63706: LD_VAR 0 8
63710: PUSH
63711: LD_INT 2
63713: ARRAY
63714: PUSH
63715: LD_VAR 0 3
63719: PLUS
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: EMPTY
63726: LIST
63727: ADD
63728: ST_TO_ADDR
63729: GO 63678
63731: POP
63732: POP
// result = temp_list2 ;
63733: LD_ADDR_VAR 0 7
63737: PUSH
63738: LD_VAR 0 10
63742: ST_TO_ADDR
// end ;
63743: LD_VAR 0 7
63747: RET
// export function EnemyInRange ( unit , dist ) ; begin
63748: LD_INT 0
63750: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63751: LD_ADDR_VAR 0 3
63755: PUSH
63756: LD_VAR 0 1
63760: PPUSH
63761: CALL_OW 255
63765: PPUSH
63766: LD_VAR 0 1
63770: PPUSH
63771: CALL_OW 250
63775: PPUSH
63776: LD_VAR 0 1
63780: PPUSH
63781: CALL_OW 251
63785: PPUSH
63786: LD_VAR 0 2
63790: PPUSH
63791: CALL 37144 0 4
63795: PUSH
63796: LD_INT 4
63798: ARRAY
63799: ST_TO_ADDR
// end ;
63800: LD_VAR 0 3
63804: RET
// export function PlayerSeeMe ( unit ) ; begin
63805: LD_INT 0
63807: PPUSH
// result := See ( your_side , unit ) ;
63808: LD_ADDR_VAR 0 2
63812: PUSH
63813: LD_OWVAR 2
63817: PPUSH
63818: LD_VAR 0 1
63822: PPUSH
63823: CALL_OW 292
63827: ST_TO_ADDR
// end ;
63828: LD_VAR 0 2
63832: RET
// export function ReverseDir ( unit ) ; begin
63833: LD_INT 0
63835: PPUSH
// if not unit then
63836: LD_VAR 0 1
63840: NOT
63841: IFFALSE 63845
// exit ;
63843: GO 63868
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63845: LD_ADDR_VAR 0 2
63849: PUSH
63850: LD_VAR 0 1
63854: PPUSH
63855: CALL_OW 254
63859: PUSH
63860: LD_INT 3
63862: PLUS
63863: PUSH
63864: LD_INT 6
63866: MOD
63867: ST_TO_ADDR
// end ;
63868: LD_VAR 0 2
63872: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63873: LD_INT 0
63875: PPUSH
63876: PPUSH
63877: PPUSH
63878: PPUSH
63879: PPUSH
// if not hexes then
63880: LD_VAR 0 2
63884: NOT
63885: IFFALSE 63889
// exit ;
63887: GO 64037
// dist := 9999 ;
63889: LD_ADDR_VAR 0 5
63893: PUSH
63894: LD_INT 9999
63896: ST_TO_ADDR
// for i = 1 to hexes do
63897: LD_ADDR_VAR 0 4
63901: PUSH
63902: DOUBLE
63903: LD_INT 1
63905: DEC
63906: ST_TO_ADDR
63907: LD_VAR 0 2
63911: PUSH
63912: FOR_TO
63913: IFFALSE 64025
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63915: LD_VAR 0 1
63919: PPUSH
63920: LD_VAR 0 2
63924: PUSH
63925: LD_VAR 0 4
63929: ARRAY
63930: PUSH
63931: LD_INT 1
63933: ARRAY
63934: PPUSH
63935: LD_VAR 0 2
63939: PUSH
63940: LD_VAR 0 4
63944: ARRAY
63945: PUSH
63946: LD_INT 2
63948: ARRAY
63949: PPUSH
63950: CALL_OW 297
63954: PUSH
63955: LD_VAR 0 5
63959: LESS
63960: IFFALSE 64023
// begin hex := hexes [ i ] ;
63962: LD_ADDR_VAR 0 7
63966: PUSH
63967: LD_VAR 0 2
63971: PUSH
63972: LD_VAR 0 4
63976: ARRAY
63977: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63978: LD_ADDR_VAR 0 5
63982: PUSH
63983: LD_VAR 0 1
63987: PPUSH
63988: LD_VAR 0 2
63992: PUSH
63993: LD_VAR 0 4
63997: ARRAY
63998: PUSH
63999: LD_INT 1
64001: ARRAY
64002: PPUSH
64003: LD_VAR 0 2
64007: PUSH
64008: LD_VAR 0 4
64012: ARRAY
64013: PUSH
64014: LD_INT 2
64016: ARRAY
64017: PPUSH
64018: CALL_OW 297
64022: ST_TO_ADDR
// end ; end ;
64023: GO 63912
64025: POP
64026: POP
// result := hex ;
64027: LD_ADDR_VAR 0 3
64031: PUSH
64032: LD_VAR 0 7
64036: ST_TO_ADDR
// end ;
64037: LD_VAR 0 3
64041: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64042: LD_INT 0
64044: PPUSH
64045: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64046: LD_VAR 0 1
64050: NOT
64051: PUSH
64052: LD_VAR 0 1
64056: PUSH
64057: LD_INT 21
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 23
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PPUSH
64081: CALL_OW 69
64085: IN
64086: NOT
64087: OR
64088: IFFALSE 64092
// exit ;
64090: GO 64139
// for i = 1 to 3 do
64092: LD_ADDR_VAR 0 3
64096: PUSH
64097: DOUBLE
64098: LD_INT 1
64100: DEC
64101: ST_TO_ADDR
64102: LD_INT 3
64104: PUSH
64105: FOR_TO
64106: IFFALSE 64137
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64108: LD_VAR 0 1
64112: PPUSH
64113: CALL_OW 250
64117: PPUSH
64118: LD_VAR 0 1
64122: PPUSH
64123: CALL_OW 251
64127: PPUSH
64128: LD_INT 1
64130: PPUSH
64131: CALL_OW 453
64135: GO 64105
64137: POP
64138: POP
// end ;
64139: LD_VAR 0 2
64143: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64144: LD_INT 0
64146: PPUSH
64147: PPUSH
64148: PPUSH
64149: PPUSH
64150: PPUSH
64151: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64152: LD_VAR 0 1
64156: NOT
64157: PUSH
64158: LD_VAR 0 2
64162: NOT
64163: OR
64164: PUSH
64165: LD_VAR 0 1
64169: PPUSH
64170: CALL_OW 314
64174: OR
64175: IFFALSE 64179
// exit ;
64177: GO 64620
// x := GetX ( enemy_unit ) ;
64179: LD_ADDR_VAR 0 7
64183: PUSH
64184: LD_VAR 0 2
64188: PPUSH
64189: CALL_OW 250
64193: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64194: LD_ADDR_VAR 0 8
64198: PUSH
64199: LD_VAR 0 2
64203: PPUSH
64204: CALL_OW 251
64208: ST_TO_ADDR
// if not x or not y then
64209: LD_VAR 0 7
64213: NOT
64214: PUSH
64215: LD_VAR 0 8
64219: NOT
64220: OR
64221: IFFALSE 64225
// exit ;
64223: GO 64620
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64225: LD_ADDR_VAR 0 6
64229: PUSH
64230: LD_VAR 0 7
64234: PPUSH
64235: LD_INT 0
64237: PPUSH
64238: LD_INT 4
64240: PPUSH
64241: CALL_OW 272
64245: PUSH
64246: LD_VAR 0 8
64250: PPUSH
64251: LD_INT 0
64253: PPUSH
64254: LD_INT 4
64256: PPUSH
64257: CALL_OW 273
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_VAR 0 7
64270: PPUSH
64271: LD_INT 1
64273: PPUSH
64274: LD_INT 4
64276: PPUSH
64277: CALL_OW 272
64281: PUSH
64282: LD_VAR 0 8
64286: PPUSH
64287: LD_INT 1
64289: PPUSH
64290: LD_INT 4
64292: PPUSH
64293: CALL_OW 273
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_VAR 0 7
64306: PPUSH
64307: LD_INT 2
64309: PPUSH
64310: LD_INT 4
64312: PPUSH
64313: CALL_OW 272
64317: PUSH
64318: LD_VAR 0 8
64322: PPUSH
64323: LD_INT 2
64325: PPUSH
64326: LD_INT 4
64328: PPUSH
64329: CALL_OW 273
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_VAR 0 7
64342: PPUSH
64343: LD_INT 3
64345: PPUSH
64346: LD_INT 4
64348: PPUSH
64349: CALL_OW 272
64353: PUSH
64354: LD_VAR 0 8
64358: PPUSH
64359: LD_INT 3
64361: PPUSH
64362: LD_INT 4
64364: PPUSH
64365: CALL_OW 273
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_VAR 0 7
64378: PPUSH
64379: LD_INT 4
64381: PPUSH
64382: LD_INT 4
64384: PPUSH
64385: CALL_OW 272
64389: PUSH
64390: LD_VAR 0 8
64394: PPUSH
64395: LD_INT 4
64397: PPUSH
64398: LD_INT 4
64400: PPUSH
64401: CALL_OW 273
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_VAR 0 7
64414: PPUSH
64415: LD_INT 5
64417: PPUSH
64418: LD_INT 4
64420: PPUSH
64421: CALL_OW 272
64425: PUSH
64426: LD_VAR 0 8
64430: PPUSH
64431: LD_INT 5
64433: PPUSH
64434: LD_INT 4
64436: PPUSH
64437: CALL_OW 273
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: ST_TO_ADDR
// for i = tmp downto 1 do
64454: LD_ADDR_VAR 0 4
64458: PUSH
64459: DOUBLE
64460: LD_VAR 0 6
64464: INC
64465: ST_TO_ADDR
64466: LD_INT 1
64468: PUSH
64469: FOR_DOWNTO
64470: IFFALSE 64571
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64472: LD_VAR 0 6
64476: PUSH
64477: LD_VAR 0 4
64481: ARRAY
64482: PUSH
64483: LD_INT 1
64485: ARRAY
64486: PPUSH
64487: LD_VAR 0 6
64491: PUSH
64492: LD_VAR 0 4
64496: ARRAY
64497: PUSH
64498: LD_INT 2
64500: ARRAY
64501: PPUSH
64502: CALL_OW 488
64506: NOT
64507: PUSH
64508: LD_VAR 0 6
64512: PUSH
64513: LD_VAR 0 4
64517: ARRAY
64518: PUSH
64519: LD_INT 1
64521: ARRAY
64522: PPUSH
64523: LD_VAR 0 6
64527: PUSH
64528: LD_VAR 0 4
64532: ARRAY
64533: PUSH
64534: LD_INT 2
64536: ARRAY
64537: PPUSH
64538: CALL_OW 428
64542: PUSH
64543: LD_INT 0
64545: NONEQUAL
64546: OR
64547: IFFALSE 64569
// tmp := Delete ( tmp , i ) ;
64549: LD_ADDR_VAR 0 6
64553: PUSH
64554: LD_VAR 0 6
64558: PPUSH
64559: LD_VAR 0 4
64563: PPUSH
64564: CALL_OW 3
64568: ST_TO_ADDR
64569: GO 64469
64571: POP
64572: POP
// j := GetClosestHex ( unit , tmp ) ;
64573: LD_ADDR_VAR 0 5
64577: PUSH
64578: LD_VAR 0 1
64582: PPUSH
64583: LD_VAR 0 6
64587: PPUSH
64588: CALL 63873 0 2
64592: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64593: LD_VAR 0 1
64597: PPUSH
64598: LD_VAR 0 5
64602: PUSH
64603: LD_INT 1
64605: ARRAY
64606: PPUSH
64607: LD_VAR 0 5
64611: PUSH
64612: LD_INT 2
64614: ARRAY
64615: PPUSH
64616: CALL_OW 111
// end ;
64620: LD_VAR 0 3
64624: RET
// export function PrepareApemanSoldier ( ) ; begin
64625: LD_INT 0
64627: PPUSH
// uc_nation := 0 ;
64628: LD_ADDR_OWVAR 21
64632: PUSH
64633: LD_INT 0
64635: ST_TO_ADDR
// hc_sex := sex_male ;
64636: LD_ADDR_OWVAR 27
64640: PUSH
64641: LD_INT 1
64643: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64644: LD_ADDR_OWVAR 28
64648: PUSH
64649: LD_INT 15
64651: ST_TO_ADDR
// hc_gallery :=  ;
64652: LD_ADDR_OWVAR 33
64656: PUSH
64657: LD_STRING 
64659: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64660: LD_ADDR_OWVAR 31
64664: PUSH
64665: LD_INT 0
64667: PPUSH
64668: LD_INT 3
64670: PPUSH
64671: CALL_OW 12
64675: PUSH
64676: LD_INT 0
64678: PPUSH
64679: LD_INT 3
64681: PPUSH
64682: CALL_OW 12
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: ST_TO_ADDR
// end ;
64699: LD_VAR 0 1
64703: RET
// export function PrepareApemanEngineer ( ) ; begin
64704: LD_INT 0
64706: PPUSH
// uc_nation := 0 ;
64707: LD_ADDR_OWVAR 21
64711: PUSH
64712: LD_INT 0
64714: ST_TO_ADDR
// hc_sex := sex_male ;
64715: LD_ADDR_OWVAR 27
64719: PUSH
64720: LD_INT 1
64722: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64723: LD_ADDR_OWVAR 28
64727: PUSH
64728: LD_INT 16
64730: ST_TO_ADDR
// hc_gallery :=  ;
64731: LD_ADDR_OWVAR 33
64735: PUSH
64736: LD_STRING 
64738: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64739: LD_ADDR_OWVAR 31
64743: PUSH
64744: LD_INT 0
64746: PPUSH
64747: LD_INT 3
64749: PPUSH
64750: CALL_OW 12
64754: PUSH
64755: LD_INT 0
64757: PPUSH
64758: LD_INT 3
64760: PPUSH
64761: CALL_OW 12
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: ST_TO_ADDR
// end ;
64778: LD_VAR 0 1
64782: RET
// export function PrepareApeman ( agressivity ) ; begin
64783: LD_INT 0
64785: PPUSH
// uc_side := 0 ;
64786: LD_ADDR_OWVAR 20
64790: PUSH
64791: LD_INT 0
64793: ST_TO_ADDR
// uc_nation := 0 ;
64794: LD_ADDR_OWVAR 21
64798: PUSH
64799: LD_INT 0
64801: ST_TO_ADDR
// hc_sex := sex_male ;
64802: LD_ADDR_OWVAR 27
64806: PUSH
64807: LD_INT 1
64809: ST_TO_ADDR
// hc_class := class_apeman ;
64810: LD_ADDR_OWVAR 28
64814: PUSH
64815: LD_INT 12
64817: ST_TO_ADDR
// hc_gallery :=  ;
64818: LD_ADDR_OWVAR 33
64822: PUSH
64823: LD_STRING 
64825: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64826: LD_ADDR_OWVAR 35
64830: PUSH
64831: LD_VAR 0 1
64835: NEG
64836: PPUSH
64837: LD_VAR 0 1
64841: PPUSH
64842: CALL_OW 12
64846: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64847: LD_ADDR_OWVAR 31
64851: PUSH
64852: LD_INT 0
64854: PPUSH
64855: LD_INT 3
64857: PPUSH
64858: CALL_OW 12
64862: PUSH
64863: LD_INT 0
64865: PPUSH
64866: LD_INT 3
64868: PPUSH
64869: CALL_OW 12
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: ST_TO_ADDR
// end ;
64886: LD_VAR 0 2
64890: RET
// export function PrepareTiger ( agressivity ) ; begin
64891: LD_INT 0
64893: PPUSH
// uc_side := 0 ;
64894: LD_ADDR_OWVAR 20
64898: PUSH
64899: LD_INT 0
64901: ST_TO_ADDR
// uc_nation := 0 ;
64902: LD_ADDR_OWVAR 21
64906: PUSH
64907: LD_INT 0
64909: ST_TO_ADDR
// hc_class := class_tiger ;
64910: LD_ADDR_OWVAR 28
64914: PUSH
64915: LD_INT 14
64917: ST_TO_ADDR
// hc_gallery :=  ;
64918: LD_ADDR_OWVAR 33
64922: PUSH
64923: LD_STRING 
64925: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64926: LD_ADDR_OWVAR 35
64930: PUSH
64931: LD_VAR 0 1
64935: NEG
64936: PPUSH
64937: LD_VAR 0 1
64941: PPUSH
64942: CALL_OW 12
64946: ST_TO_ADDR
// end ;
64947: LD_VAR 0 2
64951: RET
// export function PrepareEnchidna ( ) ; begin
64952: LD_INT 0
64954: PPUSH
// uc_side := 0 ;
64955: LD_ADDR_OWVAR 20
64959: PUSH
64960: LD_INT 0
64962: ST_TO_ADDR
// uc_nation := 0 ;
64963: LD_ADDR_OWVAR 21
64967: PUSH
64968: LD_INT 0
64970: ST_TO_ADDR
// hc_class := class_baggie ;
64971: LD_ADDR_OWVAR 28
64975: PUSH
64976: LD_INT 13
64978: ST_TO_ADDR
// hc_gallery :=  ;
64979: LD_ADDR_OWVAR 33
64983: PUSH
64984: LD_STRING 
64986: ST_TO_ADDR
// end ;
64987: LD_VAR 0 1
64991: RET
// export function PrepareFrog ( ) ; begin
64992: LD_INT 0
64994: PPUSH
// uc_side := 0 ;
64995: LD_ADDR_OWVAR 20
64999: PUSH
65000: LD_INT 0
65002: ST_TO_ADDR
// uc_nation := 0 ;
65003: LD_ADDR_OWVAR 21
65007: PUSH
65008: LD_INT 0
65010: ST_TO_ADDR
// hc_class := class_frog ;
65011: LD_ADDR_OWVAR 28
65015: PUSH
65016: LD_INT 19
65018: ST_TO_ADDR
// hc_gallery :=  ;
65019: LD_ADDR_OWVAR 33
65023: PUSH
65024: LD_STRING 
65026: ST_TO_ADDR
// end ;
65027: LD_VAR 0 1
65031: RET
// export function PrepareFish ( ) ; begin
65032: LD_INT 0
65034: PPUSH
// uc_side := 0 ;
65035: LD_ADDR_OWVAR 20
65039: PUSH
65040: LD_INT 0
65042: ST_TO_ADDR
// uc_nation := 0 ;
65043: LD_ADDR_OWVAR 21
65047: PUSH
65048: LD_INT 0
65050: ST_TO_ADDR
// hc_class := class_fish ;
65051: LD_ADDR_OWVAR 28
65055: PUSH
65056: LD_INT 20
65058: ST_TO_ADDR
// hc_gallery :=  ;
65059: LD_ADDR_OWVAR 33
65063: PUSH
65064: LD_STRING 
65066: ST_TO_ADDR
// end ;
65067: LD_VAR 0 1
65071: RET
// export function PrepareBird ( ) ; begin
65072: LD_INT 0
65074: PPUSH
// uc_side := 0 ;
65075: LD_ADDR_OWVAR 20
65079: PUSH
65080: LD_INT 0
65082: ST_TO_ADDR
// uc_nation := 0 ;
65083: LD_ADDR_OWVAR 21
65087: PUSH
65088: LD_INT 0
65090: ST_TO_ADDR
// hc_class := class_phororhacos ;
65091: LD_ADDR_OWVAR 28
65095: PUSH
65096: LD_INT 18
65098: ST_TO_ADDR
// hc_gallery :=  ;
65099: LD_ADDR_OWVAR 33
65103: PUSH
65104: LD_STRING 
65106: ST_TO_ADDR
// end ;
65107: LD_VAR 0 1
65111: RET
// export function PrepareHorse ( ) ; begin
65112: LD_INT 0
65114: PPUSH
// uc_side := 0 ;
65115: LD_ADDR_OWVAR 20
65119: PUSH
65120: LD_INT 0
65122: ST_TO_ADDR
// uc_nation := 0 ;
65123: LD_ADDR_OWVAR 21
65127: PUSH
65128: LD_INT 0
65130: ST_TO_ADDR
// hc_class := class_horse ;
65131: LD_ADDR_OWVAR 28
65135: PUSH
65136: LD_INT 21
65138: ST_TO_ADDR
// hc_gallery :=  ;
65139: LD_ADDR_OWVAR 33
65143: PUSH
65144: LD_STRING 
65146: ST_TO_ADDR
// end ;
65147: LD_VAR 0 1
65151: RET
// export function PrepareMastodont ( ) ; begin
65152: LD_INT 0
65154: PPUSH
// uc_side := 0 ;
65155: LD_ADDR_OWVAR 20
65159: PUSH
65160: LD_INT 0
65162: ST_TO_ADDR
// uc_nation := 0 ;
65163: LD_ADDR_OWVAR 21
65167: PUSH
65168: LD_INT 0
65170: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65171: LD_ADDR_OWVAR 37
65175: PUSH
65176: LD_INT 31
65178: ST_TO_ADDR
// vc_control := control_rider ;
65179: LD_ADDR_OWVAR 38
65183: PUSH
65184: LD_INT 4
65186: ST_TO_ADDR
// end ;
65187: LD_VAR 0 1
65191: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65192: LD_INT 0
65194: PPUSH
65195: PPUSH
65196: PPUSH
// uc_side = 0 ;
65197: LD_ADDR_OWVAR 20
65201: PUSH
65202: LD_INT 0
65204: ST_TO_ADDR
// uc_nation = 0 ;
65205: LD_ADDR_OWVAR 21
65209: PUSH
65210: LD_INT 0
65212: ST_TO_ADDR
// InitHc_All ( ) ;
65213: CALL_OW 584
// InitVc ;
65217: CALL_OW 20
// if mastodonts then
65221: LD_VAR 0 6
65225: IFFALSE 65292
// for i = 1 to mastodonts do
65227: LD_ADDR_VAR 0 11
65231: PUSH
65232: DOUBLE
65233: LD_INT 1
65235: DEC
65236: ST_TO_ADDR
65237: LD_VAR 0 6
65241: PUSH
65242: FOR_TO
65243: IFFALSE 65290
// begin vc_chassis := 31 ;
65245: LD_ADDR_OWVAR 37
65249: PUSH
65250: LD_INT 31
65252: ST_TO_ADDR
// vc_control := control_rider ;
65253: LD_ADDR_OWVAR 38
65257: PUSH
65258: LD_INT 4
65260: ST_TO_ADDR
// animal := CreateVehicle ;
65261: LD_ADDR_VAR 0 12
65265: PUSH
65266: CALL_OW 45
65270: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65271: LD_VAR 0 12
65275: PPUSH
65276: LD_VAR 0 8
65280: PPUSH
65281: LD_INT 0
65283: PPUSH
65284: CALL 67427 0 3
// end ;
65288: GO 65242
65290: POP
65291: POP
// if horses then
65292: LD_VAR 0 5
65296: IFFALSE 65363
// for i = 1 to horses do
65298: LD_ADDR_VAR 0 11
65302: PUSH
65303: DOUBLE
65304: LD_INT 1
65306: DEC
65307: ST_TO_ADDR
65308: LD_VAR 0 5
65312: PUSH
65313: FOR_TO
65314: IFFALSE 65361
// begin hc_class := 21 ;
65316: LD_ADDR_OWVAR 28
65320: PUSH
65321: LD_INT 21
65323: ST_TO_ADDR
// hc_gallery :=  ;
65324: LD_ADDR_OWVAR 33
65328: PUSH
65329: LD_STRING 
65331: ST_TO_ADDR
// animal := CreateHuman ;
65332: LD_ADDR_VAR 0 12
65336: PUSH
65337: CALL_OW 44
65341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65342: LD_VAR 0 12
65346: PPUSH
65347: LD_VAR 0 8
65351: PPUSH
65352: LD_INT 0
65354: PPUSH
65355: CALL 67427 0 3
// end ;
65359: GO 65313
65361: POP
65362: POP
// if birds then
65363: LD_VAR 0 1
65367: IFFALSE 65434
// for i = 1 to birds do
65369: LD_ADDR_VAR 0 11
65373: PUSH
65374: DOUBLE
65375: LD_INT 1
65377: DEC
65378: ST_TO_ADDR
65379: LD_VAR 0 1
65383: PUSH
65384: FOR_TO
65385: IFFALSE 65432
// begin hc_class = 18 ;
65387: LD_ADDR_OWVAR 28
65391: PUSH
65392: LD_INT 18
65394: ST_TO_ADDR
// hc_gallery =  ;
65395: LD_ADDR_OWVAR 33
65399: PUSH
65400: LD_STRING 
65402: ST_TO_ADDR
// animal := CreateHuman ;
65403: LD_ADDR_VAR 0 12
65407: PUSH
65408: CALL_OW 44
65412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65413: LD_VAR 0 12
65417: PPUSH
65418: LD_VAR 0 8
65422: PPUSH
65423: LD_INT 0
65425: PPUSH
65426: CALL 67427 0 3
// end ;
65430: GO 65384
65432: POP
65433: POP
// if tigers then
65434: LD_VAR 0 2
65438: IFFALSE 65522
// for i = 1 to tigers do
65440: LD_ADDR_VAR 0 11
65444: PUSH
65445: DOUBLE
65446: LD_INT 1
65448: DEC
65449: ST_TO_ADDR
65450: LD_VAR 0 2
65454: PUSH
65455: FOR_TO
65456: IFFALSE 65520
// begin hc_class = class_tiger ;
65458: LD_ADDR_OWVAR 28
65462: PUSH
65463: LD_INT 14
65465: ST_TO_ADDR
// hc_gallery =  ;
65466: LD_ADDR_OWVAR 33
65470: PUSH
65471: LD_STRING 
65473: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65474: LD_ADDR_OWVAR 35
65478: PUSH
65479: LD_INT 7
65481: NEG
65482: PPUSH
65483: LD_INT 7
65485: PPUSH
65486: CALL_OW 12
65490: ST_TO_ADDR
// animal := CreateHuman ;
65491: LD_ADDR_VAR 0 12
65495: PUSH
65496: CALL_OW 44
65500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65501: LD_VAR 0 12
65505: PPUSH
65506: LD_VAR 0 8
65510: PPUSH
65511: LD_INT 0
65513: PPUSH
65514: CALL 67427 0 3
// end ;
65518: GO 65455
65520: POP
65521: POP
// if apemans then
65522: LD_VAR 0 3
65526: IFFALSE 65649
// for i = 1 to apemans do
65528: LD_ADDR_VAR 0 11
65532: PUSH
65533: DOUBLE
65534: LD_INT 1
65536: DEC
65537: ST_TO_ADDR
65538: LD_VAR 0 3
65542: PUSH
65543: FOR_TO
65544: IFFALSE 65647
// begin hc_class = class_apeman ;
65546: LD_ADDR_OWVAR 28
65550: PUSH
65551: LD_INT 12
65553: ST_TO_ADDR
// hc_gallery =  ;
65554: LD_ADDR_OWVAR 33
65558: PUSH
65559: LD_STRING 
65561: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65562: LD_ADDR_OWVAR 35
65566: PUSH
65567: LD_INT 2
65569: NEG
65570: PPUSH
65571: LD_INT 2
65573: PPUSH
65574: CALL_OW 12
65578: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65579: LD_ADDR_OWVAR 31
65583: PUSH
65584: LD_INT 1
65586: PPUSH
65587: LD_INT 3
65589: PPUSH
65590: CALL_OW 12
65594: PUSH
65595: LD_INT 1
65597: PPUSH
65598: LD_INT 3
65600: PPUSH
65601: CALL_OW 12
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: ST_TO_ADDR
// animal := CreateHuman ;
65618: LD_ADDR_VAR 0 12
65622: PUSH
65623: CALL_OW 44
65627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65628: LD_VAR 0 12
65632: PPUSH
65633: LD_VAR 0 8
65637: PPUSH
65638: LD_INT 0
65640: PPUSH
65641: CALL 67427 0 3
// end ;
65645: GO 65543
65647: POP
65648: POP
// if enchidnas then
65649: LD_VAR 0 4
65653: IFFALSE 65720
// for i = 1 to enchidnas do
65655: LD_ADDR_VAR 0 11
65659: PUSH
65660: DOUBLE
65661: LD_INT 1
65663: DEC
65664: ST_TO_ADDR
65665: LD_VAR 0 4
65669: PUSH
65670: FOR_TO
65671: IFFALSE 65718
// begin hc_class = 13 ;
65673: LD_ADDR_OWVAR 28
65677: PUSH
65678: LD_INT 13
65680: ST_TO_ADDR
// hc_gallery =  ;
65681: LD_ADDR_OWVAR 33
65685: PUSH
65686: LD_STRING 
65688: ST_TO_ADDR
// animal := CreateHuman ;
65689: LD_ADDR_VAR 0 12
65693: PUSH
65694: CALL_OW 44
65698: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65699: LD_VAR 0 12
65703: PPUSH
65704: LD_VAR 0 8
65708: PPUSH
65709: LD_INT 0
65711: PPUSH
65712: CALL 67427 0 3
// end ;
65716: GO 65670
65718: POP
65719: POP
// if fishes then
65720: LD_VAR 0 7
65724: IFFALSE 65791
// for i = 1 to fishes do
65726: LD_ADDR_VAR 0 11
65730: PUSH
65731: DOUBLE
65732: LD_INT 1
65734: DEC
65735: ST_TO_ADDR
65736: LD_VAR 0 7
65740: PUSH
65741: FOR_TO
65742: IFFALSE 65789
// begin hc_class = 20 ;
65744: LD_ADDR_OWVAR 28
65748: PUSH
65749: LD_INT 20
65751: ST_TO_ADDR
// hc_gallery =  ;
65752: LD_ADDR_OWVAR 33
65756: PUSH
65757: LD_STRING 
65759: ST_TO_ADDR
// animal := CreateHuman ;
65760: LD_ADDR_VAR 0 12
65764: PUSH
65765: CALL_OW 44
65769: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65770: LD_VAR 0 12
65774: PPUSH
65775: LD_VAR 0 9
65779: PPUSH
65780: LD_INT 0
65782: PPUSH
65783: CALL 67427 0 3
// end ;
65787: GO 65741
65789: POP
65790: POP
// end ;
65791: LD_VAR 0 10
65795: RET
// export function WantHeal ( sci , unit ) ; begin
65796: LD_INT 0
65798: PPUSH
// if GetTaskList ( sci ) > 0 then
65799: LD_VAR 0 1
65803: PPUSH
65804: CALL_OW 437
65808: PUSH
65809: LD_INT 0
65811: GREATER
65812: IFFALSE 65882
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65814: LD_VAR 0 1
65818: PPUSH
65819: CALL_OW 437
65823: PUSH
65824: LD_INT 1
65826: ARRAY
65827: PUSH
65828: LD_INT 1
65830: ARRAY
65831: PUSH
65832: LD_STRING l
65834: EQUAL
65835: PUSH
65836: LD_VAR 0 1
65840: PPUSH
65841: CALL_OW 437
65845: PUSH
65846: LD_INT 1
65848: ARRAY
65849: PUSH
65850: LD_INT 4
65852: ARRAY
65853: PUSH
65854: LD_VAR 0 2
65858: EQUAL
65859: AND
65860: IFFALSE 65872
// result := true else
65862: LD_ADDR_VAR 0 3
65866: PUSH
65867: LD_INT 1
65869: ST_TO_ADDR
65870: GO 65880
// result := false ;
65872: LD_ADDR_VAR 0 3
65876: PUSH
65877: LD_INT 0
65879: ST_TO_ADDR
// end else
65880: GO 65890
// result := false ;
65882: LD_ADDR_VAR 0 3
65886: PUSH
65887: LD_INT 0
65889: ST_TO_ADDR
// end ;
65890: LD_VAR 0 3
65894: RET
// export function HealTarget ( sci ) ; begin
65895: LD_INT 0
65897: PPUSH
// if not sci then
65898: LD_VAR 0 1
65902: NOT
65903: IFFALSE 65907
// exit ;
65905: GO 65972
// result := 0 ;
65907: LD_ADDR_VAR 0 2
65911: PUSH
65912: LD_INT 0
65914: ST_TO_ADDR
// if GetTaskList ( sci ) then
65915: LD_VAR 0 1
65919: PPUSH
65920: CALL_OW 437
65924: IFFALSE 65972
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65926: LD_VAR 0 1
65930: PPUSH
65931: CALL_OW 437
65935: PUSH
65936: LD_INT 1
65938: ARRAY
65939: PUSH
65940: LD_INT 1
65942: ARRAY
65943: PUSH
65944: LD_STRING l
65946: EQUAL
65947: IFFALSE 65972
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65949: LD_ADDR_VAR 0 2
65953: PUSH
65954: LD_VAR 0 1
65958: PPUSH
65959: CALL_OW 437
65963: PUSH
65964: LD_INT 1
65966: ARRAY
65967: PUSH
65968: LD_INT 4
65970: ARRAY
65971: ST_TO_ADDR
// end ;
65972: LD_VAR 0 2
65976: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65977: LD_INT 0
65979: PPUSH
65980: PPUSH
65981: PPUSH
65982: PPUSH
// if not base_units then
65983: LD_VAR 0 1
65987: NOT
65988: IFFALSE 65992
// exit ;
65990: GO 66079
// result := false ;
65992: LD_ADDR_VAR 0 2
65996: PUSH
65997: LD_INT 0
65999: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66000: LD_ADDR_VAR 0 5
66004: PUSH
66005: LD_VAR 0 1
66009: PPUSH
66010: LD_INT 21
66012: PUSH
66013: LD_INT 3
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PPUSH
66020: CALL_OW 72
66024: ST_TO_ADDR
// if not tmp then
66025: LD_VAR 0 5
66029: NOT
66030: IFFALSE 66034
// exit ;
66032: GO 66079
// for i in tmp do
66034: LD_ADDR_VAR 0 3
66038: PUSH
66039: LD_VAR 0 5
66043: PUSH
66044: FOR_IN
66045: IFFALSE 66077
// begin result := EnemyInRange ( i , 22 ) ;
66047: LD_ADDR_VAR 0 2
66051: PUSH
66052: LD_VAR 0 3
66056: PPUSH
66057: LD_INT 22
66059: PPUSH
66060: CALL 63748 0 2
66064: ST_TO_ADDR
// if result then
66065: LD_VAR 0 2
66069: IFFALSE 66075
// exit ;
66071: POP
66072: POP
66073: GO 66079
// end ;
66075: GO 66044
66077: POP
66078: POP
// end ;
66079: LD_VAR 0 2
66083: RET
// export function FilterByTag ( units , tag ) ; begin
66084: LD_INT 0
66086: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66087: LD_ADDR_VAR 0 3
66091: PUSH
66092: LD_VAR 0 1
66096: PPUSH
66097: LD_INT 120
66099: PUSH
66100: LD_VAR 0 2
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PPUSH
66109: CALL_OW 72
66113: ST_TO_ADDR
// end ;
66114: LD_VAR 0 3
66118: RET
// export function IsDriver ( un ) ; begin
66119: LD_INT 0
66121: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66122: LD_ADDR_VAR 0 2
66126: PUSH
66127: LD_VAR 0 1
66131: PUSH
66132: LD_INT 55
66134: PUSH
66135: EMPTY
66136: LIST
66137: PPUSH
66138: CALL_OW 69
66142: IN
66143: ST_TO_ADDR
// end ;
66144: LD_VAR 0 2
66148: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66149: LD_INT 0
66151: PPUSH
66152: PPUSH
// list := [ ] ;
66153: LD_ADDR_VAR 0 5
66157: PUSH
66158: EMPTY
66159: ST_TO_ADDR
// case d of 0 :
66160: LD_VAR 0 3
66164: PUSH
66165: LD_INT 0
66167: DOUBLE
66168: EQUAL
66169: IFTRUE 66173
66171: GO 66306
66173: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66174: LD_ADDR_VAR 0 5
66178: PUSH
66179: LD_VAR 0 1
66183: PUSH
66184: LD_INT 4
66186: MINUS
66187: PUSH
66188: LD_VAR 0 2
66192: PUSH
66193: LD_INT 4
66195: MINUS
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: LIST
66204: PUSH
66205: LD_VAR 0 1
66209: PUSH
66210: LD_INT 3
66212: MINUS
66213: PUSH
66214: LD_VAR 0 2
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: PUSH
66227: LD_VAR 0 1
66231: PUSH
66232: LD_INT 4
66234: PLUS
66235: PUSH
66236: LD_VAR 0 2
66240: PUSH
66241: LD_INT 4
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: PUSH
66249: LD_VAR 0 1
66253: PUSH
66254: LD_INT 3
66256: PLUS
66257: PUSH
66258: LD_VAR 0 2
66262: PUSH
66263: LD_INT 3
66265: PLUS
66266: PUSH
66267: LD_INT 5
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: LIST
66274: PUSH
66275: LD_VAR 0 1
66279: PUSH
66280: LD_VAR 0 2
66284: PUSH
66285: LD_INT 4
66287: PLUS
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: LIST
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: ST_TO_ADDR
// end ; 1 :
66304: GO 67004
66306: LD_INT 1
66308: DOUBLE
66309: EQUAL
66310: IFTRUE 66314
66312: GO 66447
66314: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66315: LD_ADDR_VAR 0 5
66319: PUSH
66320: LD_VAR 0 1
66324: PUSH
66325: LD_VAR 0 2
66329: PUSH
66330: LD_INT 4
66332: MINUS
66333: PUSH
66334: LD_INT 3
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: LIST
66341: PUSH
66342: LD_VAR 0 1
66346: PUSH
66347: LD_INT 3
66349: MINUS
66350: PUSH
66351: LD_VAR 0 2
66355: PUSH
66356: LD_INT 3
66358: MINUS
66359: PUSH
66360: LD_INT 2
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: LIST
66367: PUSH
66368: LD_VAR 0 1
66372: PUSH
66373: LD_INT 4
66375: MINUS
66376: PUSH
66377: LD_VAR 0 2
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: PUSH
66390: LD_VAR 0 1
66394: PUSH
66395: LD_VAR 0 2
66399: PUSH
66400: LD_INT 3
66402: PLUS
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: LIST
66411: PUSH
66412: LD_VAR 0 1
66416: PUSH
66417: LD_INT 4
66419: PLUS
66420: PUSH
66421: LD_VAR 0 2
66425: PUSH
66426: LD_INT 4
66428: PLUS
66429: PUSH
66430: LD_INT 5
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: ST_TO_ADDR
// end ; 2 :
66445: GO 67004
66447: LD_INT 2
66449: DOUBLE
66450: EQUAL
66451: IFTRUE 66455
66453: GO 66584
66455: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66456: LD_ADDR_VAR 0 5
66460: PUSH
66461: LD_VAR 0 1
66465: PUSH
66466: LD_VAR 0 2
66470: PUSH
66471: LD_INT 3
66473: MINUS
66474: PUSH
66475: LD_INT 3
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: LIST
66482: PUSH
66483: LD_VAR 0 1
66487: PUSH
66488: LD_INT 4
66490: PLUS
66491: PUSH
66492: LD_VAR 0 2
66496: PUSH
66497: LD_INT 4
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: LIST
66504: PUSH
66505: LD_VAR 0 1
66509: PUSH
66510: LD_VAR 0 2
66514: PUSH
66515: LD_INT 4
66517: PLUS
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: LIST
66526: PUSH
66527: LD_VAR 0 1
66531: PUSH
66532: LD_INT 3
66534: MINUS
66535: PUSH
66536: LD_VAR 0 2
66540: PUSH
66541: LD_INT 1
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: LIST
66548: PUSH
66549: LD_VAR 0 1
66553: PUSH
66554: LD_INT 4
66556: MINUS
66557: PUSH
66558: LD_VAR 0 2
66562: PUSH
66563: LD_INT 4
66565: MINUS
66566: PUSH
66567: LD_INT 2
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: LIST
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: ST_TO_ADDR
// end ; 3 :
66582: GO 67004
66584: LD_INT 3
66586: DOUBLE
66587: EQUAL
66588: IFTRUE 66592
66590: GO 66725
66592: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66593: LD_ADDR_VAR 0 5
66597: PUSH
66598: LD_VAR 0 1
66602: PUSH
66603: LD_INT 3
66605: PLUS
66606: PUSH
66607: LD_VAR 0 2
66611: PUSH
66612: LD_INT 4
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: PUSH
66620: LD_VAR 0 1
66624: PUSH
66625: LD_INT 4
66627: PLUS
66628: PUSH
66629: LD_VAR 0 2
66633: PUSH
66634: LD_INT 4
66636: PLUS
66637: PUSH
66638: LD_INT 5
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: LIST
66645: PUSH
66646: LD_VAR 0 1
66650: PUSH
66651: LD_INT 4
66653: MINUS
66654: PUSH
66655: LD_VAR 0 2
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: LIST
66667: PUSH
66668: LD_VAR 0 1
66672: PUSH
66673: LD_VAR 0 2
66677: PUSH
66678: LD_INT 4
66680: MINUS
66681: PUSH
66682: LD_INT 3
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: PUSH
66690: LD_VAR 0 1
66694: PUSH
66695: LD_INT 3
66697: MINUS
66698: PUSH
66699: LD_VAR 0 2
66703: PUSH
66704: LD_INT 3
66706: MINUS
66707: PUSH
66708: LD_INT 2
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: LIST
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: ST_TO_ADDR
// end ; 4 :
66723: GO 67004
66725: LD_INT 4
66727: DOUBLE
66728: EQUAL
66729: IFTRUE 66733
66731: GO 66866
66733: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66734: LD_ADDR_VAR 0 5
66738: PUSH
66739: LD_VAR 0 1
66743: PUSH
66744: LD_VAR 0 2
66748: PUSH
66749: LD_INT 4
66751: PLUS
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: LIST
66760: PUSH
66761: LD_VAR 0 1
66765: PUSH
66766: LD_INT 3
66768: PLUS
66769: PUSH
66770: LD_VAR 0 2
66774: PUSH
66775: LD_INT 3
66777: PLUS
66778: PUSH
66779: LD_INT 5
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: LIST
66786: PUSH
66787: LD_VAR 0 1
66791: PUSH
66792: LD_INT 4
66794: PLUS
66795: PUSH
66796: LD_VAR 0 2
66800: PUSH
66801: LD_INT 4
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: PUSH
66809: LD_VAR 0 1
66813: PUSH
66814: LD_VAR 0 2
66818: PUSH
66819: LD_INT 3
66821: MINUS
66822: PUSH
66823: LD_INT 3
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: LIST
66830: PUSH
66831: LD_VAR 0 1
66835: PUSH
66836: LD_INT 4
66838: MINUS
66839: PUSH
66840: LD_VAR 0 2
66844: PUSH
66845: LD_INT 4
66847: MINUS
66848: PUSH
66849: LD_INT 2
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: LIST
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: ST_TO_ADDR
// end ; 5 :
66864: GO 67004
66866: LD_INT 5
66868: DOUBLE
66869: EQUAL
66870: IFTRUE 66874
66872: GO 67003
66874: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66875: LD_ADDR_VAR 0 5
66879: PUSH
66880: LD_VAR 0 1
66884: PUSH
66885: LD_INT 4
66887: MINUS
66888: PUSH
66889: LD_VAR 0 2
66893: PUSH
66894: LD_INT 1
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: LIST
66901: PUSH
66902: LD_VAR 0 1
66906: PUSH
66907: LD_VAR 0 2
66911: PUSH
66912: LD_INT 4
66914: MINUS
66915: PUSH
66916: LD_INT 3
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: PUSH
66924: LD_VAR 0 1
66928: PUSH
66929: LD_INT 4
66931: PLUS
66932: PUSH
66933: LD_VAR 0 2
66937: PUSH
66938: LD_INT 4
66940: PLUS
66941: PUSH
66942: LD_INT 5
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: LIST
66949: PUSH
66950: LD_VAR 0 1
66954: PUSH
66955: LD_INT 3
66957: PLUS
66958: PUSH
66959: LD_VAR 0 2
66963: PUSH
66964: LD_INT 4
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: LIST
66971: PUSH
66972: LD_VAR 0 1
66976: PUSH
66977: LD_VAR 0 2
66981: PUSH
66982: LD_INT 3
66984: PLUS
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: LIST
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: ST_TO_ADDR
// end ; end ;
67001: GO 67004
67003: POP
// result := list ;
67004: LD_ADDR_VAR 0 4
67008: PUSH
67009: LD_VAR 0 5
67013: ST_TO_ADDR
// end ;
67014: LD_VAR 0 4
67018: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67019: LD_INT 0
67021: PPUSH
67022: PPUSH
67023: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67024: LD_VAR 0 1
67028: NOT
67029: PUSH
67030: LD_VAR 0 2
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: LD_INT 4
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: IN
67053: NOT
67054: OR
67055: IFFALSE 67059
// exit ;
67057: GO 67151
// tmp := [ ] ;
67059: LD_ADDR_VAR 0 5
67063: PUSH
67064: EMPTY
67065: ST_TO_ADDR
// for i in units do
67066: LD_ADDR_VAR 0 4
67070: PUSH
67071: LD_VAR 0 1
67075: PUSH
67076: FOR_IN
67077: IFFALSE 67120
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67079: LD_ADDR_VAR 0 5
67083: PUSH
67084: LD_VAR 0 5
67088: PPUSH
67089: LD_VAR 0 5
67093: PUSH
67094: LD_INT 1
67096: PLUS
67097: PPUSH
67098: LD_VAR 0 4
67102: PPUSH
67103: LD_VAR 0 2
67107: PPUSH
67108: CALL_OW 259
67112: PPUSH
67113: CALL_OW 2
67117: ST_TO_ADDR
67118: GO 67076
67120: POP
67121: POP
// if not tmp then
67122: LD_VAR 0 5
67126: NOT
67127: IFFALSE 67131
// exit ;
67129: GO 67151
// result := SortListByListDesc ( units , tmp ) ;
67131: LD_ADDR_VAR 0 3
67135: PUSH
67136: LD_VAR 0 1
67140: PPUSH
67141: LD_VAR 0 5
67145: PPUSH
67146: CALL_OW 77
67150: ST_TO_ADDR
// end ;
67151: LD_VAR 0 3
67155: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67156: LD_INT 0
67158: PPUSH
67159: PPUSH
67160: PPUSH
// result := false ;
67161: LD_ADDR_VAR 0 3
67165: PUSH
67166: LD_INT 0
67168: ST_TO_ADDR
// x := GetX ( building ) ;
67169: LD_ADDR_VAR 0 4
67173: PUSH
67174: LD_VAR 0 2
67178: PPUSH
67179: CALL_OW 250
67183: ST_TO_ADDR
// y := GetY ( building ) ;
67184: LD_ADDR_VAR 0 5
67188: PUSH
67189: LD_VAR 0 2
67193: PPUSH
67194: CALL_OW 251
67198: ST_TO_ADDR
// if not building or not x or not y then
67199: LD_VAR 0 2
67203: NOT
67204: PUSH
67205: LD_VAR 0 4
67209: NOT
67210: OR
67211: PUSH
67212: LD_VAR 0 5
67216: NOT
67217: OR
67218: IFFALSE 67222
// exit ;
67220: GO 67314
// if GetTaskList ( unit ) then
67222: LD_VAR 0 1
67226: PPUSH
67227: CALL_OW 437
67231: IFFALSE 67314
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67233: LD_STRING e
67235: PUSH
67236: LD_VAR 0 1
67240: PPUSH
67241: CALL_OW 437
67245: PUSH
67246: LD_INT 1
67248: ARRAY
67249: PUSH
67250: LD_INT 1
67252: ARRAY
67253: EQUAL
67254: PUSH
67255: LD_VAR 0 4
67259: PUSH
67260: LD_VAR 0 1
67264: PPUSH
67265: CALL_OW 437
67269: PUSH
67270: LD_INT 1
67272: ARRAY
67273: PUSH
67274: LD_INT 2
67276: ARRAY
67277: EQUAL
67278: AND
67279: PUSH
67280: LD_VAR 0 5
67284: PUSH
67285: LD_VAR 0 1
67289: PPUSH
67290: CALL_OW 437
67294: PUSH
67295: LD_INT 1
67297: ARRAY
67298: PUSH
67299: LD_INT 3
67301: ARRAY
67302: EQUAL
67303: AND
67304: IFFALSE 67314
// result := true end ;
67306: LD_ADDR_VAR 0 3
67310: PUSH
67311: LD_INT 1
67313: ST_TO_ADDR
// end ;
67314: LD_VAR 0 3
67318: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67319: LD_INT 0
67321: PPUSH
// result := false ;
67322: LD_ADDR_VAR 0 4
67326: PUSH
67327: LD_INT 0
67329: ST_TO_ADDR
// if GetTaskList ( unit ) then
67330: LD_VAR 0 1
67334: PPUSH
67335: CALL_OW 437
67339: IFFALSE 67422
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67341: LD_STRING M
67343: PUSH
67344: LD_VAR 0 1
67348: PPUSH
67349: CALL_OW 437
67353: PUSH
67354: LD_INT 1
67356: ARRAY
67357: PUSH
67358: LD_INT 1
67360: ARRAY
67361: EQUAL
67362: PUSH
67363: LD_VAR 0 2
67367: PUSH
67368: LD_VAR 0 1
67372: PPUSH
67373: CALL_OW 437
67377: PUSH
67378: LD_INT 1
67380: ARRAY
67381: PUSH
67382: LD_INT 2
67384: ARRAY
67385: EQUAL
67386: AND
67387: PUSH
67388: LD_VAR 0 3
67392: PUSH
67393: LD_VAR 0 1
67397: PPUSH
67398: CALL_OW 437
67402: PUSH
67403: LD_INT 1
67405: ARRAY
67406: PUSH
67407: LD_INT 3
67409: ARRAY
67410: EQUAL
67411: AND
67412: IFFALSE 67422
// result := true ;
67414: LD_ADDR_VAR 0 4
67418: PUSH
67419: LD_INT 1
67421: ST_TO_ADDR
// end ; end ;
67422: LD_VAR 0 4
67426: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67427: LD_INT 0
67429: PPUSH
67430: PPUSH
67431: PPUSH
67432: PPUSH
// if not unit or not area then
67433: LD_VAR 0 1
67437: NOT
67438: PUSH
67439: LD_VAR 0 2
67443: NOT
67444: OR
67445: IFFALSE 67449
// exit ;
67447: GO 67613
// tmp := AreaToList ( area , i ) ;
67449: LD_ADDR_VAR 0 6
67453: PUSH
67454: LD_VAR 0 2
67458: PPUSH
67459: LD_VAR 0 5
67463: PPUSH
67464: CALL_OW 517
67468: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67469: LD_ADDR_VAR 0 5
67473: PUSH
67474: DOUBLE
67475: LD_INT 1
67477: DEC
67478: ST_TO_ADDR
67479: LD_VAR 0 6
67483: PUSH
67484: LD_INT 1
67486: ARRAY
67487: PUSH
67488: FOR_TO
67489: IFFALSE 67611
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67491: LD_ADDR_VAR 0 7
67495: PUSH
67496: LD_VAR 0 6
67500: PUSH
67501: LD_INT 1
67503: ARRAY
67504: PUSH
67505: LD_VAR 0 5
67509: ARRAY
67510: PUSH
67511: LD_VAR 0 6
67515: PUSH
67516: LD_INT 2
67518: ARRAY
67519: PUSH
67520: LD_VAR 0 5
67524: ARRAY
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67530: LD_VAR 0 7
67534: PUSH
67535: LD_INT 1
67537: ARRAY
67538: PPUSH
67539: LD_VAR 0 7
67543: PUSH
67544: LD_INT 2
67546: ARRAY
67547: PPUSH
67548: CALL_OW 428
67552: PUSH
67553: LD_INT 0
67555: EQUAL
67556: IFFALSE 67609
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67558: LD_VAR 0 1
67562: PPUSH
67563: LD_VAR 0 7
67567: PUSH
67568: LD_INT 1
67570: ARRAY
67571: PPUSH
67572: LD_VAR 0 7
67576: PUSH
67577: LD_INT 2
67579: ARRAY
67580: PPUSH
67581: LD_VAR 0 3
67585: PPUSH
67586: CALL_OW 48
// result := IsPlaced ( unit ) ;
67590: LD_ADDR_VAR 0 4
67594: PUSH
67595: LD_VAR 0 1
67599: PPUSH
67600: CALL_OW 305
67604: ST_TO_ADDR
// exit ;
67605: POP
67606: POP
67607: GO 67613
// end ; end ;
67609: GO 67488
67611: POP
67612: POP
// end ;
67613: LD_VAR 0 4
67617: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67618: LD_INT 0
67620: PPUSH
67621: PPUSH
67622: PPUSH
// if not side or side > 8 then
67623: LD_VAR 0 1
67627: NOT
67628: PUSH
67629: LD_VAR 0 1
67633: PUSH
67634: LD_INT 8
67636: GREATER
67637: OR
67638: IFFALSE 67642
// exit ;
67640: GO 67829
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67642: LD_ADDR_VAR 0 4
67646: PUSH
67647: LD_INT 22
67649: PUSH
67650: LD_VAR 0 1
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 21
67661: PUSH
67662: LD_INT 3
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PPUSH
67673: CALL_OW 69
67677: ST_TO_ADDR
// if not tmp then
67678: LD_VAR 0 4
67682: NOT
67683: IFFALSE 67687
// exit ;
67685: GO 67829
// enable_addtolog := true ;
67687: LD_ADDR_OWVAR 81
67691: PUSH
67692: LD_INT 1
67694: ST_TO_ADDR
// AddToLog ( [ ) ;
67695: LD_STRING [
67697: PPUSH
67698: CALL_OW 561
// for i in tmp do
67702: LD_ADDR_VAR 0 3
67706: PUSH
67707: LD_VAR 0 4
67711: PUSH
67712: FOR_IN
67713: IFFALSE 67820
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67715: LD_STRING [
67717: PUSH
67718: LD_VAR 0 3
67722: PPUSH
67723: CALL_OW 266
67727: STR
67728: PUSH
67729: LD_STRING , 
67731: STR
67732: PUSH
67733: LD_VAR 0 3
67737: PPUSH
67738: CALL_OW 250
67742: STR
67743: PUSH
67744: LD_STRING , 
67746: STR
67747: PUSH
67748: LD_VAR 0 3
67752: PPUSH
67753: CALL_OW 251
67757: STR
67758: PUSH
67759: LD_STRING , 
67761: STR
67762: PUSH
67763: LD_VAR 0 3
67767: PPUSH
67768: CALL_OW 254
67772: STR
67773: PUSH
67774: LD_STRING , 
67776: STR
67777: PUSH
67778: LD_VAR 0 3
67782: PPUSH
67783: LD_INT 1
67785: PPUSH
67786: CALL_OW 268
67790: STR
67791: PUSH
67792: LD_STRING , 
67794: STR
67795: PUSH
67796: LD_VAR 0 3
67800: PPUSH
67801: LD_INT 2
67803: PPUSH
67804: CALL_OW 268
67808: STR
67809: PUSH
67810: LD_STRING ],
67812: STR
67813: PPUSH
67814: CALL_OW 561
// end ;
67818: GO 67712
67820: POP
67821: POP
// AddToLog ( ]; ) ;
67822: LD_STRING ];
67824: PPUSH
67825: CALL_OW 561
// end ;
67829: LD_VAR 0 2
67833: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67834: LD_INT 0
67836: PPUSH
67837: PPUSH
67838: PPUSH
67839: PPUSH
67840: PPUSH
// if not area or not rate or not max then
67841: LD_VAR 0 1
67845: NOT
67846: PUSH
67847: LD_VAR 0 2
67851: NOT
67852: OR
67853: PUSH
67854: LD_VAR 0 4
67858: NOT
67859: OR
67860: IFFALSE 67864
// exit ;
67862: GO 68053
// while 1 do
67864: LD_INT 1
67866: IFFALSE 68053
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67868: LD_ADDR_VAR 0 9
67872: PUSH
67873: LD_VAR 0 1
67877: PPUSH
67878: LD_INT 1
67880: PPUSH
67881: CALL_OW 287
67885: PUSH
67886: LD_INT 10
67888: MUL
67889: ST_TO_ADDR
// r := rate / 10 ;
67890: LD_ADDR_VAR 0 7
67894: PUSH
67895: LD_VAR 0 2
67899: PUSH
67900: LD_INT 10
67902: DIVREAL
67903: ST_TO_ADDR
// time := 1 1$00 ;
67904: LD_ADDR_VAR 0 8
67908: PUSH
67909: LD_INT 2100
67911: ST_TO_ADDR
// if amount < min then
67912: LD_VAR 0 9
67916: PUSH
67917: LD_VAR 0 3
67921: LESS
67922: IFFALSE 67940
// r := r * 2 else
67924: LD_ADDR_VAR 0 7
67928: PUSH
67929: LD_VAR 0 7
67933: PUSH
67934: LD_INT 2
67936: MUL
67937: ST_TO_ADDR
67938: GO 67966
// if amount > max then
67940: LD_VAR 0 9
67944: PUSH
67945: LD_VAR 0 4
67949: GREATER
67950: IFFALSE 67966
// r := r / 2 ;
67952: LD_ADDR_VAR 0 7
67956: PUSH
67957: LD_VAR 0 7
67961: PUSH
67962: LD_INT 2
67964: DIVREAL
67965: ST_TO_ADDR
// time := time / r ;
67966: LD_ADDR_VAR 0 8
67970: PUSH
67971: LD_VAR 0 8
67975: PUSH
67976: LD_VAR 0 7
67980: DIVREAL
67981: ST_TO_ADDR
// if time < 0 then
67982: LD_VAR 0 8
67986: PUSH
67987: LD_INT 0
67989: LESS
67990: IFFALSE 68007
// time := time * - 1 ;
67992: LD_ADDR_VAR 0 8
67996: PUSH
67997: LD_VAR 0 8
68001: PUSH
68002: LD_INT 1
68004: NEG
68005: MUL
68006: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68007: LD_VAR 0 8
68011: PUSH
68012: LD_INT 35
68014: PPUSH
68015: LD_INT 875
68017: PPUSH
68018: CALL_OW 12
68022: PLUS
68023: PPUSH
68024: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68028: LD_INT 1
68030: PPUSH
68031: LD_INT 5
68033: PPUSH
68034: CALL_OW 12
68038: PPUSH
68039: LD_VAR 0 1
68043: PPUSH
68044: LD_INT 1
68046: PPUSH
68047: CALL_OW 55
// end ;
68051: GO 67864
// end ;
68053: LD_VAR 0 5
68057: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68058: LD_INT 0
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
68064: PPUSH
68065: PPUSH
68066: PPUSH
68067: PPUSH
// if not turrets or not factories then
68068: LD_VAR 0 1
68072: NOT
68073: PUSH
68074: LD_VAR 0 2
68078: NOT
68079: OR
68080: IFFALSE 68084
// exit ;
68082: GO 68391
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68084: LD_ADDR_VAR 0 10
68088: PUSH
68089: LD_INT 5
68091: PUSH
68092: LD_INT 6
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 2
68101: PUSH
68102: LD_INT 4
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 3
68111: PUSH
68112: LD_INT 5
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 24
68126: PUSH
68127: LD_INT 25
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 23
68136: PUSH
68137: LD_INT 27
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 42
68150: PUSH
68151: LD_INT 43
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 44
68160: PUSH
68161: LD_INT 46
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 45
68170: PUSH
68171: LD_INT 47
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: LIST
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: LIST
68187: ST_TO_ADDR
// result := [ ] ;
68188: LD_ADDR_VAR 0 3
68192: PUSH
68193: EMPTY
68194: ST_TO_ADDR
// for i in turrets do
68195: LD_ADDR_VAR 0 4
68199: PUSH
68200: LD_VAR 0 1
68204: PUSH
68205: FOR_IN
68206: IFFALSE 68389
// begin nat := GetNation ( i ) ;
68208: LD_ADDR_VAR 0 7
68212: PUSH
68213: LD_VAR 0 4
68217: PPUSH
68218: CALL_OW 248
68222: ST_TO_ADDR
// weapon := 0 ;
68223: LD_ADDR_VAR 0 8
68227: PUSH
68228: LD_INT 0
68230: ST_TO_ADDR
// if not nat then
68231: LD_VAR 0 7
68235: NOT
68236: IFFALSE 68240
// continue ;
68238: GO 68205
// for j in list [ nat ] do
68240: LD_ADDR_VAR 0 5
68244: PUSH
68245: LD_VAR 0 10
68249: PUSH
68250: LD_VAR 0 7
68254: ARRAY
68255: PUSH
68256: FOR_IN
68257: IFFALSE 68298
// if GetBWeapon ( i ) = j [ 1 ] then
68259: LD_VAR 0 4
68263: PPUSH
68264: CALL_OW 269
68268: PUSH
68269: LD_VAR 0 5
68273: PUSH
68274: LD_INT 1
68276: ARRAY
68277: EQUAL
68278: IFFALSE 68296
// begin weapon := j [ 2 ] ;
68280: LD_ADDR_VAR 0 8
68284: PUSH
68285: LD_VAR 0 5
68289: PUSH
68290: LD_INT 2
68292: ARRAY
68293: ST_TO_ADDR
// break ;
68294: GO 68298
// end ;
68296: GO 68256
68298: POP
68299: POP
// if not weapon then
68300: LD_VAR 0 8
68304: NOT
68305: IFFALSE 68309
// continue ;
68307: GO 68205
// for k in factories do
68309: LD_ADDR_VAR 0 6
68313: PUSH
68314: LD_VAR 0 2
68318: PUSH
68319: FOR_IN
68320: IFFALSE 68385
// begin weapons := AvailableWeaponList ( k ) ;
68322: LD_ADDR_VAR 0 9
68326: PUSH
68327: LD_VAR 0 6
68331: PPUSH
68332: CALL_OW 478
68336: ST_TO_ADDR
// if not weapons then
68337: LD_VAR 0 9
68341: NOT
68342: IFFALSE 68346
// continue ;
68344: GO 68319
// if weapon in weapons then
68346: LD_VAR 0 8
68350: PUSH
68351: LD_VAR 0 9
68355: IN
68356: IFFALSE 68383
// begin result := [ i , weapon ] ;
68358: LD_ADDR_VAR 0 3
68362: PUSH
68363: LD_VAR 0 4
68367: PUSH
68368: LD_VAR 0 8
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: ST_TO_ADDR
// exit ;
68377: POP
68378: POP
68379: POP
68380: POP
68381: GO 68391
// end ; end ;
68383: GO 68319
68385: POP
68386: POP
// end ;
68387: GO 68205
68389: POP
68390: POP
// end ;
68391: LD_VAR 0 3
68395: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68396: LD_INT 0
68398: PPUSH
// if not side or side > 8 then
68399: LD_VAR 0 3
68403: NOT
68404: PUSH
68405: LD_VAR 0 3
68409: PUSH
68410: LD_INT 8
68412: GREATER
68413: OR
68414: IFFALSE 68418
// exit ;
68416: GO 68477
// if not range then
68418: LD_VAR 0 4
68422: NOT
68423: IFFALSE 68434
// range := - 12 ;
68425: LD_ADDR_VAR 0 4
68429: PUSH
68430: LD_INT 12
68432: NEG
68433: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68434: LD_VAR 0 1
68438: PPUSH
68439: LD_VAR 0 2
68443: PPUSH
68444: LD_VAR 0 3
68448: PPUSH
68449: LD_VAR 0 4
68453: PPUSH
68454: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68458: LD_VAR 0 1
68462: PPUSH
68463: LD_VAR 0 2
68467: PPUSH
68468: LD_VAR 0 3
68472: PPUSH
68473: CALL_OW 331
// end ;
68477: LD_VAR 0 5
68481: RET
// export function Video ( mode ) ; begin
68482: LD_INT 0
68484: PPUSH
// ingame_video = mode ;
68485: LD_ADDR_OWVAR 52
68489: PUSH
68490: LD_VAR 0 1
68494: ST_TO_ADDR
// interface_hidden = mode ;
68495: LD_ADDR_OWVAR 54
68499: PUSH
68500: LD_VAR 0 1
68504: ST_TO_ADDR
// end ;
68505: LD_VAR 0 2
68509: RET
// export function Join ( array , element ) ; begin
68510: LD_INT 0
68512: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68513: LD_ADDR_VAR 0 3
68517: PUSH
68518: LD_VAR 0 1
68522: PPUSH
68523: LD_VAR 0 1
68527: PUSH
68528: LD_INT 1
68530: PLUS
68531: PPUSH
68532: LD_VAR 0 2
68536: PPUSH
68537: CALL_OW 1
68541: ST_TO_ADDR
// end ;
68542: LD_VAR 0 3
68546: RET
// export function JoinUnion ( array , element ) ; begin
68547: LD_INT 0
68549: PPUSH
// result := array union element ;
68550: LD_ADDR_VAR 0 3
68554: PUSH
68555: LD_VAR 0 1
68559: PUSH
68560: LD_VAR 0 2
68564: UNION
68565: ST_TO_ADDR
// end ;
68566: LD_VAR 0 3
68570: RET
// export function GetBehemoths ( side ) ; begin
68571: LD_INT 0
68573: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68574: LD_ADDR_VAR 0 2
68578: PUSH
68579: LD_INT 22
68581: PUSH
68582: LD_VAR 0 1
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 31
68593: PUSH
68594: LD_INT 25
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PPUSH
68605: CALL_OW 69
68609: ST_TO_ADDR
// end ;
68610: LD_VAR 0 2
68614: RET
// export function Shuffle ( array ) ; var i , index ; begin
68615: LD_INT 0
68617: PPUSH
68618: PPUSH
68619: PPUSH
// result := [ ] ;
68620: LD_ADDR_VAR 0 2
68624: PUSH
68625: EMPTY
68626: ST_TO_ADDR
// if not array then
68627: LD_VAR 0 1
68631: NOT
68632: IFFALSE 68636
// exit ;
68634: GO 68735
// Randomize ;
68636: CALL_OW 10
// for i = array downto 1 do
68640: LD_ADDR_VAR 0 3
68644: PUSH
68645: DOUBLE
68646: LD_VAR 0 1
68650: INC
68651: ST_TO_ADDR
68652: LD_INT 1
68654: PUSH
68655: FOR_DOWNTO
68656: IFFALSE 68733
// begin index := rand ( 1 , array ) ;
68658: LD_ADDR_VAR 0 4
68662: PUSH
68663: LD_INT 1
68665: PPUSH
68666: LD_VAR 0 1
68670: PPUSH
68671: CALL_OW 12
68675: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68676: LD_ADDR_VAR 0 2
68680: PUSH
68681: LD_VAR 0 2
68685: PPUSH
68686: LD_VAR 0 2
68690: PUSH
68691: LD_INT 1
68693: PLUS
68694: PPUSH
68695: LD_VAR 0 1
68699: PUSH
68700: LD_VAR 0 4
68704: ARRAY
68705: PPUSH
68706: CALL_OW 2
68710: ST_TO_ADDR
// array := Delete ( array , index ) ;
68711: LD_ADDR_VAR 0 1
68715: PUSH
68716: LD_VAR 0 1
68720: PPUSH
68721: LD_VAR 0 4
68725: PPUSH
68726: CALL_OW 3
68730: ST_TO_ADDR
// end ;
68731: GO 68655
68733: POP
68734: POP
// end ;
68735: LD_VAR 0 2
68739: RET
// export function GetBaseMaterials ( base ) ; begin
68740: LD_INT 0
68742: PPUSH
// result := [ 0 , 0 , 0 ] ;
68743: LD_ADDR_VAR 0 2
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: LIST
68761: ST_TO_ADDR
// if not base then
68762: LD_VAR 0 1
68766: NOT
68767: IFFALSE 68771
// exit ;
68769: GO 68820
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68771: LD_ADDR_VAR 0 2
68775: PUSH
68776: LD_VAR 0 1
68780: PPUSH
68781: LD_INT 1
68783: PPUSH
68784: CALL_OW 275
68788: PUSH
68789: LD_VAR 0 1
68793: PPUSH
68794: LD_INT 2
68796: PPUSH
68797: CALL_OW 275
68801: PUSH
68802: LD_VAR 0 1
68806: PPUSH
68807: LD_INT 3
68809: PPUSH
68810: CALL_OW 275
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: LIST
68819: ST_TO_ADDR
// end ;
68820: LD_VAR 0 2
68824: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68825: LD_INT 0
68827: PPUSH
68828: PPUSH
// result := array ;
68829: LD_ADDR_VAR 0 3
68833: PUSH
68834: LD_VAR 0 1
68838: ST_TO_ADDR
// if size >= result then
68839: LD_VAR 0 2
68843: PUSH
68844: LD_VAR 0 3
68848: GREATEREQUAL
68849: IFFALSE 68853
// exit ;
68851: GO 68903
// if size then
68853: LD_VAR 0 2
68857: IFFALSE 68903
// for i := array downto size do
68859: LD_ADDR_VAR 0 4
68863: PUSH
68864: DOUBLE
68865: LD_VAR 0 1
68869: INC
68870: ST_TO_ADDR
68871: LD_VAR 0 2
68875: PUSH
68876: FOR_DOWNTO
68877: IFFALSE 68901
// result := Delete ( result , result ) ;
68879: LD_ADDR_VAR 0 3
68883: PUSH
68884: LD_VAR 0 3
68888: PPUSH
68889: LD_VAR 0 3
68893: PPUSH
68894: CALL_OW 3
68898: ST_TO_ADDR
68899: GO 68876
68901: POP
68902: POP
// end ;
68903: LD_VAR 0 3
68907: RET
// export function ComExit ( unit ) ; var tmp ; begin
68908: LD_INT 0
68910: PPUSH
68911: PPUSH
// if not IsInUnit ( unit ) then
68912: LD_VAR 0 1
68916: PPUSH
68917: CALL_OW 310
68921: NOT
68922: IFFALSE 68926
// exit ;
68924: GO 68986
// tmp := IsInUnit ( unit ) ;
68926: LD_ADDR_VAR 0 3
68930: PUSH
68931: LD_VAR 0 1
68935: PPUSH
68936: CALL_OW 310
68940: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68941: LD_VAR 0 3
68945: PPUSH
68946: CALL_OW 247
68950: PUSH
68951: LD_INT 2
68953: EQUAL
68954: IFFALSE 68967
// ComExitVehicle ( unit ) else
68956: LD_VAR 0 1
68960: PPUSH
68961: CALL_OW 121
68965: GO 68976
// ComExitBuilding ( unit ) ;
68967: LD_VAR 0 1
68971: PPUSH
68972: CALL_OW 122
// result := tmp ;
68976: LD_ADDR_VAR 0 2
68980: PUSH
68981: LD_VAR 0 3
68985: ST_TO_ADDR
// end ;
68986: LD_VAR 0 2
68990: RET
// export function ComExitAll ( units ) ; var i ; begin
68991: LD_INT 0
68993: PPUSH
68994: PPUSH
// if not units then
68995: LD_VAR 0 1
68999: NOT
69000: IFFALSE 69004
// exit ;
69002: GO 69030
// for i in units do
69004: LD_ADDR_VAR 0 3
69008: PUSH
69009: LD_VAR 0 1
69013: PUSH
69014: FOR_IN
69015: IFFALSE 69028
// ComExit ( i ) ;
69017: LD_VAR 0 3
69021: PPUSH
69022: CALL 68908 0 1
69026: GO 69014
69028: POP
69029: POP
// end ;
69030: LD_VAR 0 2
69034: RET
// export function ResetHc ; begin
69035: LD_INT 0
69037: PPUSH
// InitHc ;
69038: CALL_OW 19
// hc_importance := 0 ;
69042: LD_ADDR_OWVAR 32
69046: PUSH
69047: LD_INT 0
69049: ST_TO_ADDR
// end ;
69050: LD_VAR 0 1
69054: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69055: LD_INT 0
69057: PPUSH
69058: PPUSH
69059: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69060: LD_ADDR_VAR 0 6
69064: PUSH
69065: LD_VAR 0 1
69069: PUSH
69070: LD_VAR 0 3
69074: PLUS
69075: PUSH
69076: LD_INT 2
69078: DIV
69079: ST_TO_ADDR
// if _x < 0 then
69080: LD_VAR 0 6
69084: PUSH
69085: LD_INT 0
69087: LESS
69088: IFFALSE 69105
// _x := _x * - 1 ;
69090: LD_ADDR_VAR 0 6
69094: PUSH
69095: LD_VAR 0 6
69099: PUSH
69100: LD_INT 1
69102: NEG
69103: MUL
69104: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69105: LD_ADDR_VAR 0 7
69109: PUSH
69110: LD_VAR 0 2
69114: PUSH
69115: LD_VAR 0 4
69119: PLUS
69120: PUSH
69121: LD_INT 2
69123: DIV
69124: ST_TO_ADDR
// if _y < 0 then
69125: LD_VAR 0 7
69129: PUSH
69130: LD_INT 0
69132: LESS
69133: IFFALSE 69150
// _y := _y * - 1 ;
69135: LD_ADDR_VAR 0 7
69139: PUSH
69140: LD_VAR 0 7
69144: PUSH
69145: LD_INT 1
69147: NEG
69148: MUL
69149: ST_TO_ADDR
// result := [ _x , _y ] ;
69150: LD_ADDR_VAR 0 5
69154: PUSH
69155: LD_VAR 0 6
69159: PUSH
69160: LD_VAR 0 7
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: ST_TO_ADDR
// end ;
69169: LD_VAR 0 5
69173: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69174: LD_INT 0
69176: PPUSH
69177: PPUSH
69178: PPUSH
69179: PPUSH
// task := GetTaskList ( unit ) ;
69180: LD_ADDR_VAR 0 7
69184: PUSH
69185: LD_VAR 0 1
69189: PPUSH
69190: CALL_OW 437
69194: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69195: LD_VAR 0 7
69199: NOT
69200: PUSH
69201: LD_VAR 0 1
69205: PPUSH
69206: LD_VAR 0 2
69210: PPUSH
69211: CALL_OW 308
69215: NOT
69216: AND
69217: IFFALSE 69221
// exit ;
69219: GO 69339
// if IsInArea ( unit , area ) then
69221: LD_VAR 0 1
69225: PPUSH
69226: LD_VAR 0 2
69230: PPUSH
69231: CALL_OW 308
69235: IFFALSE 69253
// begin ComMoveToArea ( unit , goAway ) ;
69237: LD_VAR 0 1
69241: PPUSH
69242: LD_VAR 0 3
69246: PPUSH
69247: CALL_OW 113
// exit ;
69251: GO 69339
// end ; if task [ 1 ] [ 1 ] <> M then
69253: LD_VAR 0 7
69257: PUSH
69258: LD_INT 1
69260: ARRAY
69261: PUSH
69262: LD_INT 1
69264: ARRAY
69265: PUSH
69266: LD_STRING M
69268: NONEQUAL
69269: IFFALSE 69273
// exit ;
69271: GO 69339
// x := task [ 1 ] [ 2 ] ;
69273: LD_ADDR_VAR 0 5
69277: PUSH
69278: LD_VAR 0 7
69282: PUSH
69283: LD_INT 1
69285: ARRAY
69286: PUSH
69287: LD_INT 2
69289: ARRAY
69290: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69291: LD_ADDR_VAR 0 6
69295: PUSH
69296: LD_VAR 0 7
69300: PUSH
69301: LD_INT 1
69303: ARRAY
69304: PUSH
69305: LD_INT 3
69307: ARRAY
69308: ST_TO_ADDR
// if InArea ( x , y , area ) then
69309: LD_VAR 0 5
69313: PPUSH
69314: LD_VAR 0 6
69318: PPUSH
69319: LD_VAR 0 2
69323: PPUSH
69324: CALL_OW 309
69328: IFFALSE 69339
// ComStop ( unit ) ;
69330: LD_VAR 0 1
69334: PPUSH
69335: CALL_OW 141
// end ;
69339: LD_VAR 0 4
69343: RET
// export function Abs ( value ) ; begin
69344: LD_INT 0
69346: PPUSH
// result := value ;
69347: LD_ADDR_VAR 0 2
69351: PUSH
69352: LD_VAR 0 1
69356: ST_TO_ADDR
// if value < 0 then
69357: LD_VAR 0 1
69361: PUSH
69362: LD_INT 0
69364: LESS
69365: IFFALSE 69382
// result := value * - 1 ;
69367: LD_ADDR_VAR 0 2
69371: PUSH
69372: LD_VAR 0 1
69376: PUSH
69377: LD_INT 1
69379: NEG
69380: MUL
69381: ST_TO_ADDR
// end ;
69382: LD_VAR 0 2
69386: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69387: LD_INT 0
69389: PPUSH
69390: PPUSH
69391: PPUSH
69392: PPUSH
69393: PPUSH
69394: PPUSH
69395: PPUSH
69396: PPUSH
// if not unit or not building then
69397: LD_VAR 0 1
69401: NOT
69402: PUSH
69403: LD_VAR 0 2
69407: NOT
69408: OR
69409: IFFALSE 69413
// exit ;
69411: GO 69639
// x := GetX ( building ) ;
69413: LD_ADDR_VAR 0 4
69417: PUSH
69418: LD_VAR 0 2
69422: PPUSH
69423: CALL_OW 250
69427: ST_TO_ADDR
// y := GetY ( building ) ;
69428: LD_ADDR_VAR 0 6
69432: PUSH
69433: LD_VAR 0 2
69437: PPUSH
69438: CALL_OW 251
69442: ST_TO_ADDR
// d := GetDir ( building ) ;
69443: LD_ADDR_VAR 0 8
69447: PUSH
69448: LD_VAR 0 2
69452: PPUSH
69453: CALL_OW 254
69457: ST_TO_ADDR
// r := 4 ;
69458: LD_ADDR_VAR 0 9
69462: PUSH
69463: LD_INT 4
69465: ST_TO_ADDR
// for i := 1 to 5 do
69466: LD_ADDR_VAR 0 10
69470: PUSH
69471: DOUBLE
69472: LD_INT 1
69474: DEC
69475: ST_TO_ADDR
69476: LD_INT 5
69478: PUSH
69479: FOR_TO
69480: IFFALSE 69637
// begin _x := ShiftX ( x , d , r + i ) ;
69482: LD_ADDR_VAR 0 5
69486: PUSH
69487: LD_VAR 0 4
69491: PPUSH
69492: LD_VAR 0 8
69496: PPUSH
69497: LD_VAR 0 9
69501: PUSH
69502: LD_VAR 0 10
69506: PLUS
69507: PPUSH
69508: CALL_OW 272
69512: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69513: LD_ADDR_VAR 0 7
69517: PUSH
69518: LD_VAR 0 6
69522: PPUSH
69523: LD_VAR 0 8
69527: PPUSH
69528: LD_VAR 0 9
69532: PUSH
69533: LD_VAR 0 10
69537: PLUS
69538: PPUSH
69539: CALL_OW 273
69543: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69544: LD_VAR 0 5
69548: PPUSH
69549: LD_VAR 0 7
69553: PPUSH
69554: CALL_OW 488
69558: PUSH
69559: LD_VAR 0 5
69563: PPUSH
69564: LD_VAR 0 7
69568: PPUSH
69569: CALL_OW 428
69573: PPUSH
69574: CALL_OW 247
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: LD_INT 2
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: IN
69589: NOT
69590: AND
69591: IFFALSE 69635
// begin ComMoveXY ( unit , _x , _y ) ;
69593: LD_VAR 0 1
69597: PPUSH
69598: LD_VAR 0 5
69602: PPUSH
69603: LD_VAR 0 7
69607: PPUSH
69608: CALL_OW 111
// result := [ _x , _y ] ;
69612: LD_ADDR_VAR 0 3
69616: PUSH
69617: LD_VAR 0 5
69621: PUSH
69622: LD_VAR 0 7
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: ST_TO_ADDR
// exit ;
69631: POP
69632: POP
69633: GO 69639
// end ; end ;
69635: GO 69479
69637: POP
69638: POP
// end ;
69639: LD_VAR 0 3
69643: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69644: LD_INT 0
69646: PPUSH
69647: PPUSH
69648: PPUSH
// result := 0 ;
69649: LD_ADDR_VAR 0 3
69653: PUSH
69654: LD_INT 0
69656: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69657: LD_VAR 0 1
69661: PUSH
69662: LD_INT 0
69664: LESS
69665: PUSH
69666: LD_VAR 0 1
69670: PUSH
69671: LD_INT 8
69673: GREATER
69674: OR
69675: PUSH
69676: LD_VAR 0 2
69680: PUSH
69681: LD_INT 0
69683: LESS
69684: OR
69685: PUSH
69686: LD_VAR 0 2
69690: PUSH
69691: LD_INT 8
69693: GREATER
69694: OR
69695: IFFALSE 69699
// exit ;
69697: GO 69774
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69699: LD_ADDR_VAR 0 4
69703: PUSH
69704: LD_INT 22
69706: PUSH
69707: LD_VAR 0 2
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PPUSH
69716: CALL_OW 69
69720: PUSH
69721: FOR_IN
69722: IFFALSE 69772
// begin un := UnitShoot ( i ) ;
69724: LD_ADDR_VAR 0 5
69728: PUSH
69729: LD_VAR 0 4
69733: PPUSH
69734: CALL_OW 504
69738: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69739: LD_VAR 0 5
69743: PPUSH
69744: CALL_OW 255
69748: PUSH
69749: LD_VAR 0 1
69753: EQUAL
69754: IFFALSE 69770
// begin result := un ;
69756: LD_ADDR_VAR 0 3
69760: PUSH
69761: LD_VAR 0 5
69765: ST_TO_ADDR
// exit ;
69766: POP
69767: POP
69768: GO 69774
// end ; end ;
69770: GO 69721
69772: POP
69773: POP
// end ;
69774: LD_VAR 0 3
69778: RET
// export function GetCargoBay ( units ) ; begin
69779: LD_INT 0
69781: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69782: LD_ADDR_VAR 0 2
69786: PUSH
69787: LD_VAR 0 1
69791: PPUSH
69792: LD_INT 2
69794: PUSH
69795: LD_INT 34
69797: PUSH
69798: LD_INT 12
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 34
69807: PUSH
69808: LD_INT 51
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 34
69817: PUSH
69818: LD_INT 32
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 34
69827: PUSH
69828: LD_EXP 15
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: PPUSH
69844: CALL_OW 72
69848: ST_TO_ADDR
// end ;
69849: LD_VAR 0 2
69853: RET
// export function Negate ( value ) ; begin
69854: LD_INT 0
69856: PPUSH
// result := not value ;
69857: LD_ADDR_VAR 0 2
69861: PUSH
69862: LD_VAR 0 1
69866: NOT
69867: ST_TO_ADDR
// end ;
69868: LD_VAR 0 2
69872: RET
// export function Inc ( value ) ; begin
69873: LD_INT 0
69875: PPUSH
// result := value + 1 ;
69876: LD_ADDR_VAR 0 2
69880: PUSH
69881: LD_VAR 0 1
69885: PUSH
69886: LD_INT 1
69888: PLUS
69889: ST_TO_ADDR
// end ;
69890: LD_VAR 0 2
69894: RET
// export function Dec ( value ) ; begin
69895: LD_INT 0
69897: PPUSH
// result := value - 1 ;
69898: LD_ADDR_VAR 0 2
69902: PUSH
69903: LD_VAR 0 1
69907: PUSH
69908: LD_INT 1
69910: MINUS
69911: ST_TO_ADDR
// end ;
69912: LD_VAR 0 2
69916: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69917: LD_INT 0
69919: PPUSH
69920: PPUSH
69921: PPUSH
69922: PPUSH
69923: PPUSH
69924: PPUSH
69925: PPUSH
69926: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69927: LD_VAR 0 1
69931: PPUSH
69932: LD_VAR 0 2
69936: PPUSH
69937: CALL_OW 488
69941: NOT
69942: PUSH
69943: LD_VAR 0 3
69947: PPUSH
69948: LD_VAR 0 4
69952: PPUSH
69953: CALL_OW 488
69957: NOT
69958: OR
69959: IFFALSE 69972
// begin result := - 1 ;
69961: LD_ADDR_VAR 0 5
69965: PUSH
69966: LD_INT 1
69968: NEG
69969: ST_TO_ADDR
// exit ;
69970: GO 70207
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69972: LD_ADDR_VAR 0 12
69976: PUSH
69977: LD_VAR 0 1
69981: PPUSH
69982: LD_VAR 0 2
69986: PPUSH
69987: LD_VAR 0 3
69991: PPUSH
69992: LD_VAR 0 4
69996: PPUSH
69997: CALL 69055 0 4
70001: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70002: LD_ADDR_VAR 0 11
70006: PUSH
70007: LD_VAR 0 1
70011: PPUSH
70012: LD_VAR 0 2
70016: PPUSH
70017: LD_VAR 0 12
70021: PUSH
70022: LD_INT 1
70024: ARRAY
70025: PPUSH
70026: LD_VAR 0 12
70030: PUSH
70031: LD_INT 2
70033: ARRAY
70034: PPUSH
70035: CALL_OW 298
70039: ST_TO_ADDR
// distance := 9999 ;
70040: LD_ADDR_VAR 0 10
70044: PUSH
70045: LD_INT 9999
70047: ST_TO_ADDR
// for i := 0 to 5 do
70048: LD_ADDR_VAR 0 6
70052: PUSH
70053: DOUBLE
70054: LD_INT 0
70056: DEC
70057: ST_TO_ADDR
70058: LD_INT 5
70060: PUSH
70061: FOR_TO
70062: IFFALSE 70205
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70064: LD_ADDR_VAR 0 7
70068: PUSH
70069: LD_VAR 0 1
70073: PPUSH
70074: LD_VAR 0 6
70078: PPUSH
70079: LD_VAR 0 11
70083: PPUSH
70084: CALL_OW 272
70088: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70089: LD_ADDR_VAR 0 8
70093: PUSH
70094: LD_VAR 0 2
70098: PPUSH
70099: LD_VAR 0 6
70103: PPUSH
70104: LD_VAR 0 11
70108: PPUSH
70109: CALL_OW 273
70113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70114: LD_VAR 0 7
70118: PPUSH
70119: LD_VAR 0 8
70123: PPUSH
70124: CALL_OW 488
70128: NOT
70129: IFFALSE 70133
// continue ;
70131: GO 70061
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70133: LD_ADDR_VAR 0 9
70137: PUSH
70138: LD_VAR 0 12
70142: PUSH
70143: LD_INT 1
70145: ARRAY
70146: PPUSH
70147: LD_VAR 0 12
70151: PUSH
70152: LD_INT 2
70154: ARRAY
70155: PPUSH
70156: LD_VAR 0 7
70160: PPUSH
70161: LD_VAR 0 8
70165: PPUSH
70166: CALL_OW 298
70170: ST_TO_ADDR
// if tmp < distance then
70171: LD_VAR 0 9
70175: PUSH
70176: LD_VAR 0 10
70180: LESS
70181: IFFALSE 70203
// begin result := i ;
70183: LD_ADDR_VAR 0 5
70187: PUSH
70188: LD_VAR 0 6
70192: ST_TO_ADDR
// distance := tmp ;
70193: LD_ADDR_VAR 0 10
70197: PUSH
70198: LD_VAR 0 9
70202: ST_TO_ADDR
// end ; end ;
70203: GO 70061
70205: POP
70206: POP
// end ;
70207: LD_VAR 0 5
70211: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70212: LD_INT 0
70214: PPUSH
70215: PPUSH
// if not driver or not IsInUnit ( driver ) then
70216: LD_VAR 0 1
70220: NOT
70221: PUSH
70222: LD_VAR 0 1
70226: PPUSH
70227: CALL_OW 310
70231: NOT
70232: OR
70233: IFFALSE 70237
// exit ;
70235: GO 70327
// vehicle := IsInUnit ( driver ) ;
70237: LD_ADDR_VAR 0 3
70241: PUSH
70242: LD_VAR 0 1
70246: PPUSH
70247: CALL_OW 310
70251: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70252: LD_VAR 0 1
70256: PPUSH
70257: LD_STRING \
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: LD_INT 0
70271: PUSH
70272: LD_INT 0
70274: PUSH
70275: LD_INT 0
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: PUSH
70287: LD_STRING E
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_VAR 0 3
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PPUSH
70323: CALL_OW 446
// end ;
70327: LD_VAR 0 2
70331: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70332: LD_INT 0
70334: PPUSH
70335: PPUSH
// if not driver or not IsInUnit ( driver ) then
70336: LD_VAR 0 1
70340: NOT
70341: PUSH
70342: LD_VAR 0 1
70346: PPUSH
70347: CALL_OW 310
70351: NOT
70352: OR
70353: IFFALSE 70357
// exit ;
70355: GO 70447
// vehicle := IsInUnit ( driver ) ;
70357: LD_ADDR_VAR 0 3
70361: PUSH
70362: LD_VAR 0 1
70366: PPUSH
70367: CALL_OW 310
70371: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70372: LD_VAR 0 1
70376: PPUSH
70377: LD_STRING \
70379: PUSH
70380: LD_INT 0
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: LD_INT 0
70391: PUSH
70392: LD_INT 0
70394: PUSH
70395: LD_INT 0
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: PUSH
70407: LD_STRING E
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_INT 0
70415: PUSH
70416: LD_VAR 0 3
70420: PUSH
70421: LD_INT 0
70423: PUSH
70424: LD_INT 0
70426: PUSH
70427: LD_INT 0
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PPUSH
70443: CALL_OW 447
// end ;
70447: LD_VAR 0 2
70451: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70452: LD_INT 0
70454: PPUSH
70455: PPUSH
70456: PPUSH
// tmp := [ ] ;
70457: LD_ADDR_VAR 0 5
70461: PUSH
70462: EMPTY
70463: ST_TO_ADDR
// for i in units do
70464: LD_ADDR_VAR 0 4
70468: PUSH
70469: LD_VAR 0 1
70473: PUSH
70474: FOR_IN
70475: IFFALSE 70513
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70477: LD_ADDR_VAR 0 5
70481: PUSH
70482: LD_VAR 0 5
70486: PPUSH
70487: LD_VAR 0 5
70491: PUSH
70492: LD_INT 1
70494: PLUS
70495: PPUSH
70496: LD_VAR 0 4
70500: PPUSH
70501: CALL_OW 256
70505: PPUSH
70506: CALL_OW 2
70510: ST_TO_ADDR
70511: GO 70474
70513: POP
70514: POP
// if not tmp then
70515: LD_VAR 0 5
70519: NOT
70520: IFFALSE 70524
// exit ;
70522: GO 70572
// if asc then
70524: LD_VAR 0 2
70528: IFFALSE 70552
// result := SortListByListAsc ( units , tmp ) else
70530: LD_ADDR_VAR 0 3
70534: PUSH
70535: LD_VAR 0 1
70539: PPUSH
70540: LD_VAR 0 5
70544: PPUSH
70545: CALL_OW 76
70549: ST_TO_ADDR
70550: GO 70572
// result := SortListByListDesc ( units , tmp ) ;
70552: LD_ADDR_VAR 0 3
70556: PUSH
70557: LD_VAR 0 1
70561: PPUSH
70562: LD_VAR 0 5
70566: PPUSH
70567: CALL_OW 77
70571: ST_TO_ADDR
// end ;
70572: LD_VAR 0 3
70576: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70577: LD_INT 0
70579: PPUSH
70580: PPUSH
// task := GetTaskList ( mech ) ;
70581: LD_ADDR_VAR 0 4
70585: PUSH
70586: LD_VAR 0 1
70590: PPUSH
70591: CALL_OW 437
70595: ST_TO_ADDR
// if not task then
70596: LD_VAR 0 4
70600: NOT
70601: IFFALSE 70605
// exit ;
70603: GO 70647
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70605: LD_ADDR_VAR 0 3
70609: PUSH
70610: LD_VAR 0 4
70614: PUSH
70615: LD_INT 1
70617: ARRAY
70618: PUSH
70619: LD_INT 1
70621: ARRAY
70622: PUSH
70623: LD_STRING r
70625: EQUAL
70626: PUSH
70627: LD_VAR 0 4
70631: PUSH
70632: LD_INT 1
70634: ARRAY
70635: PUSH
70636: LD_INT 4
70638: ARRAY
70639: PUSH
70640: LD_VAR 0 2
70644: EQUAL
70645: AND
70646: ST_TO_ADDR
// end ;
70647: LD_VAR 0 3
70651: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70652: LD_INT 0
70654: PPUSH
// SetDir ( unit , d ) ;
70655: LD_VAR 0 1
70659: PPUSH
70660: LD_VAR 0 4
70664: PPUSH
70665: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70669: LD_VAR 0 1
70673: PPUSH
70674: LD_VAR 0 2
70678: PPUSH
70679: LD_VAR 0 3
70683: PPUSH
70684: LD_VAR 0 5
70688: PPUSH
70689: CALL_OW 48
// end ;
70693: LD_VAR 0 6
70697: RET
// export function ToNaturalNumber ( number ) ; begin
70698: LD_INT 0
70700: PPUSH
// result := number div 1 ;
70701: LD_ADDR_VAR 0 2
70705: PUSH
70706: LD_VAR 0 1
70710: PUSH
70711: LD_INT 1
70713: DIV
70714: ST_TO_ADDR
// if number < 0 then
70715: LD_VAR 0 1
70719: PUSH
70720: LD_INT 0
70722: LESS
70723: IFFALSE 70733
// result := 0 ;
70725: LD_ADDR_VAR 0 2
70729: PUSH
70730: LD_INT 0
70732: ST_TO_ADDR
// end ;
70733: LD_VAR 0 2
70737: RET
// export function SortByClass ( units , class ) ; var un ; begin
70738: LD_INT 0
70740: PPUSH
70741: PPUSH
// if not units or not class then
70742: LD_VAR 0 1
70746: NOT
70747: PUSH
70748: LD_VAR 0 2
70752: NOT
70753: OR
70754: IFFALSE 70758
// exit ;
70756: GO 70853
// result := [ ] ;
70758: LD_ADDR_VAR 0 3
70762: PUSH
70763: EMPTY
70764: ST_TO_ADDR
// for un in units do
70765: LD_ADDR_VAR 0 4
70769: PUSH
70770: LD_VAR 0 1
70774: PUSH
70775: FOR_IN
70776: IFFALSE 70851
// if GetClass ( un ) = class then
70778: LD_VAR 0 4
70782: PPUSH
70783: CALL_OW 257
70787: PUSH
70788: LD_VAR 0 2
70792: EQUAL
70793: IFFALSE 70820
// result := Insert ( result , 1 , un ) else
70795: LD_ADDR_VAR 0 3
70799: PUSH
70800: LD_VAR 0 3
70804: PPUSH
70805: LD_INT 1
70807: PPUSH
70808: LD_VAR 0 4
70812: PPUSH
70813: CALL_OW 2
70817: ST_TO_ADDR
70818: GO 70849
// result := Replace ( result , result + 1 , un ) ;
70820: LD_ADDR_VAR 0 3
70824: PUSH
70825: LD_VAR 0 3
70829: PPUSH
70830: LD_VAR 0 3
70834: PUSH
70835: LD_INT 1
70837: PLUS
70838: PPUSH
70839: LD_VAR 0 4
70843: PPUSH
70844: CALL_OW 1
70848: ST_TO_ADDR
70849: GO 70775
70851: POP
70852: POP
// end ;
70853: LD_VAR 0 3
70857: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70858: LD_INT 0
70860: PPUSH
70861: PPUSH
70862: PPUSH
70863: PPUSH
70864: PPUSH
70865: PPUSH
70866: PPUSH
// result := [ ] ;
70867: LD_ADDR_VAR 0 4
70871: PUSH
70872: EMPTY
70873: ST_TO_ADDR
// if x - r < 0 then
70874: LD_VAR 0 1
70878: PUSH
70879: LD_VAR 0 3
70883: MINUS
70884: PUSH
70885: LD_INT 0
70887: LESS
70888: IFFALSE 70900
// min_x := 0 else
70890: LD_ADDR_VAR 0 8
70894: PUSH
70895: LD_INT 0
70897: ST_TO_ADDR
70898: GO 70916
// min_x := x - r ;
70900: LD_ADDR_VAR 0 8
70904: PUSH
70905: LD_VAR 0 1
70909: PUSH
70910: LD_VAR 0 3
70914: MINUS
70915: ST_TO_ADDR
// if y - r < 0 then
70916: LD_VAR 0 2
70920: PUSH
70921: LD_VAR 0 3
70925: MINUS
70926: PUSH
70927: LD_INT 0
70929: LESS
70930: IFFALSE 70942
// min_y := 0 else
70932: LD_ADDR_VAR 0 7
70936: PUSH
70937: LD_INT 0
70939: ST_TO_ADDR
70940: GO 70958
// min_y := y - r ;
70942: LD_ADDR_VAR 0 7
70946: PUSH
70947: LD_VAR 0 2
70951: PUSH
70952: LD_VAR 0 3
70956: MINUS
70957: ST_TO_ADDR
// max_x := x + r ;
70958: LD_ADDR_VAR 0 9
70962: PUSH
70963: LD_VAR 0 1
70967: PUSH
70968: LD_VAR 0 3
70972: PLUS
70973: ST_TO_ADDR
// max_y := y + r ;
70974: LD_ADDR_VAR 0 10
70978: PUSH
70979: LD_VAR 0 2
70983: PUSH
70984: LD_VAR 0 3
70988: PLUS
70989: ST_TO_ADDR
// for _x = min_x to max_x do
70990: LD_ADDR_VAR 0 5
70994: PUSH
70995: DOUBLE
70996: LD_VAR 0 8
71000: DEC
71001: ST_TO_ADDR
71002: LD_VAR 0 9
71006: PUSH
71007: FOR_TO
71008: IFFALSE 71109
// for _y = min_y to max_y do
71010: LD_ADDR_VAR 0 6
71014: PUSH
71015: DOUBLE
71016: LD_VAR 0 7
71020: DEC
71021: ST_TO_ADDR
71022: LD_VAR 0 10
71026: PUSH
71027: FOR_TO
71028: IFFALSE 71105
// begin if not ValidHex ( _x , _y ) then
71030: LD_VAR 0 5
71034: PPUSH
71035: LD_VAR 0 6
71039: PPUSH
71040: CALL_OW 488
71044: NOT
71045: IFFALSE 71049
// continue ;
71047: GO 71027
// if GetResourceTypeXY ( _x , _y ) then
71049: LD_VAR 0 5
71053: PPUSH
71054: LD_VAR 0 6
71058: PPUSH
71059: CALL_OW 283
71063: IFFALSE 71103
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71065: LD_ADDR_VAR 0 4
71069: PUSH
71070: LD_VAR 0 4
71074: PPUSH
71075: LD_VAR 0 4
71079: PUSH
71080: LD_INT 1
71082: PLUS
71083: PPUSH
71084: LD_VAR 0 5
71088: PUSH
71089: LD_VAR 0 6
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PPUSH
71098: CALL_OW 1
71102: ST_TO_ADDR
// end ;
71103: GO 71027
71105: POP
71106: POP
71107: GO 71007
71109: POP
71110: POP
// end ;
71111: LD_VAR 0 4
71115: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71116: LD_INT 0
71118: PPUSH
71119: PPUSH
71120: PPUSH
71121: PPUSH
71122: PPUSH
71123: PPUSH
71124: PPUSH
71125: PPUSH
// if not units then
71126: LD_VAR 0 1
71130: NOT
71131: IFFALSE 71135
// exit ;
71133: GO 71661
// result := UnitFilter ( units , [ f_ok ] ) ;
71135: LD_ADDR_VAR 0 3
71139: PUSH
71140: LD_VAR 0 1
71144: PPUSH
71145: LD_INT 50
71147: PUSH
71148: EMPTY
71149: LIST
71150: PPUSH
71151: CALL_OW 72
71155: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71156: LD_ADDR_VAR 0 8
71160: PUSH
71161: LD_VAR 0 1
71165: PUSH
71166: LD_INT 1
71168: ARRAY
71169: PPUSH
71170: CALL_OW 255
71174: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71175: LD_ADDR_VAR 0 10
71179: PUSH
71180: LD_INT 29
71182: PUSH
71183: LD_EXP 18
71187: PUSH
71188: LD_INT 49
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: LIST
71195: ST_TO_ADDR
// if not result then
71196: LD_VAR 0 3
71200: NOT
71201: IFFALSE 71205
// exit ;
71203: GO 71661
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71205: LD_ADDR_VAR 0 5
71209: PUSH
71210: LD_INT 81
71212: PUSH
71213: LD_VAR 0 8
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PPUSH
71222: CALL_OW 69
71226: ST_TO_ADDR
// for i in result do
71227: LD_ADDR_VAR 0 4
71231: PUSH
71232: LD_VAR 0 3
71236: PUSH
71237: FOR_IN
71238: IFFALSE 71659
// begin tag := GetTag ( i ) + 1 ;
71240: LD_ADDR_VAR 0 9
71244: PUSH
71245: LD_VAR 0 4
71249: PPUSH
71250: CALL_OW 110
71254: PUSH
71255: LD_INT 1
71257: PLUS
71258: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71259: LD_ADDR_VAR 0 7
71263: PUSH
71264: LD_VAR 0 4
71268: PPUSH
71269: CALL_OW 250
71273: PPUSH
71274: LD_VAR 0 4
71278: PPUSH
71279: CALL_OW 251
71283: PPUSH
71284: LD_INT 6
71286: PPUSH
71287: CALL 70858 0 3
71291: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71292: LD_VAR 0 4
71296: PPUSH
71297: CALL_OW 247
71301: PUSH
71302: LD_INT 2
71304: EQUAL
71305: PUSH
71306: LD_VAR 0 7
71310: AND
71311: PUSH
71312: LD_VAR 0 4
71316: PPUSH
71317: CALL_OW 264
71321: PUSH
71322: LD_VAR 0 10
71326: IN
71327: NOT
71328: AND
71329: IFFALSE 71368
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71331: LD_VAR 0 4
71335: PPUSH
71336: LD_VAR 0 7
71340: PUSH
71341: LD_INT 1
71343: ARRAY
71344: PUSH
71345: LD_INT 1
71347: ARRAY
71348: PPUSH
71349: LD_VAR 0 7
71353: PUSH
71354: LD_INT 1
71356: ARRAY
71357: PUSH
71358: LD_INT 2
71360: ARRAY
71361: PPUSH
71362: CALL_OW 116
71366: GO 71657
// if path > tag then
71368: LD_VAR 0 2
71372: PUSH
71373: LD_VAR 0 9
71377: GREATER
71378: IFFALSE 71586
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71380: LD_ADDR_VAR 0 6
71384: PUSH
71385: LD_VAR 0 5
71389: PPUSH
71390: LD_INT 91
71392: PUSH
71393: LD_VAR 0 4
71397: PUSH
71398: LD_INT 8
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: LIST
71405: PPUSH
71406: CALL_OW 72
71410: ST_TO_ADDR
// if nearEnemy then
71411: LD_VAR 0 6
71415: IFFALSE 71484
// begin if GetWeapon ( i ) = ru_time_lapser then
71417: LD_VAR 0 4
71421: PPUSH
71422: CALL_OW 264
71426: PUSH
71427: LD_INT 49
71429: EQUAL
71430: IFFALSE 71458
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71432: LD_VAR 0 4
71436: PPUSH
71437: LD_VAR 0 6
71441: PPUSH
71442: LD_VAR 0 4
71446: PPUSH
71447: CALL_OW 74
71451: PPUSH
71452: CALL_OW 112
71456: GO 71482
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71458: LD_VAR 0 4
71462: PPUSH
71463: LD_VAR 0 6
71467: PPUSH
71468: LD_VAR 0 4
71472: PPUSH
71473: CALL_OW 74
71477: PPUSH
71478: CALL_OW 115
// end else
71482: GO 71584
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71484: LD_VAR 0 4
71488: PPUSH
71489: LD_VAR 0 2
71493: PUSH
71494: LD_VAR 0 9
71498: ARRAY
71499: PUSH
71500: LD_INT 1
71502: ARRAY
71503: PPUSH
71504: LD_VAR 0 2
71508: PUSH
71509: LD_VAR 0 9
71513: ARRAY
71514: PUSH
71515: LD_INT 2
71517: ARRAY
71518: PPUSH
71519: CALL_OW 297
71523: PUSH
71524: LD_INT 6
71526: GREATER
71527: IFFALSE 71570
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71529: LD_VAR 0 4
71533: PPUSH
71534: LD_VAR 0 2
71538: PUSH
71539: LD_VAR 0 9
71543: ARRAY
71544: PUSH
71545: LD_INT 1
71547: ARRAY
71548: PPUSH
71549: LD_VAR 0 2
71553: PUSH
71554: LD_VAR 0 9
71558: ARRAY
71559: PUSH
71560: LD_INT 2
71562: ARRAY
71563: PPUSH
71564: CALL_OW 114
71568: GO 71584
// SetTag ( i , tag ) ;
71570: LD_VAR 0 4
71574: PPUSH
71575: LD_VAR 0 9
71579: PPUSH
71580: CALL_OW 109
// end else
71584: GO 71657
// if enemy then
71586: LD_VAR 0 5
71590: IFFALSE 71657
// begin if GetWeapon ( i ) = ru_time_lapser then
71592: LD_VAR 0 4
71596: PPUSH
71597: CALL_OW 264
71601: PUSH
71602: LD_INT 49
71604: EQUAL
71605: IFFALSE 71633
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71607: LD_VAR 0 4
71611: PPUSH
71612: LD_VAR 0 5
71616: PPUSH
71617: LD_VAR 0 4
71621: PPUSH
71622: CALL_OW 74
71626: PPUSH
71627: CALL_OW 112
71631: GO 71657
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71633: LD_VAR 0 4
71637: PPUSH
71638: LD_VAR 0 5
71642: PPUSH
71643: LD_VAR 0 4
71647: PPUSH
71648: CALL_OW 74
71652: PPUSH
71653: CALL_OW 115
// end ; end ;
71657: GO 71237
71659: POP
71660: POP
// end ;
71661: LD_VAR 0 3
71665: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71666: LD_INT 0
71668: PPUSH
71669: PPUSH
71670: PPUSH
// if not unit or IsInUnit ( unit ) then
71671: LD_VAR 0 1
71675: NOT
71676: PUSH
71677: LD_VAR 0 1
71681: PPUSH
71682: CALL_OW 310
71686: OR
71687: IFFALSE 71691
// exit ;
71689: GO 71782
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71691: LD_ADDR_VAR 0 4
71695: PUSH
71696: LD_VAR 0 1
71700: PPUSH
71701: CALL_OW 250
71705: PPUSH
71706: LD_VAR 0 2
71710: PPUSH
71711: LD_INT 1
71713: PPUSH
71714: CALL_OW 272
71718: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71719: LD_ADDR_VAR 0 5
71723: PUSH
71724: LD_VAR 0 1
71728: PPUSH
71729: CALL_OW 251
71733: PPUSH
71734: LD_VAR 0 2
71738: PPUSH
71739: LD_INT 1
71741: PPUSH
71742: CALL_OW 273
71746: ST_TO_ADDR
// if ValidHex ( x , y ) then
71747: LD_VAR 0 4
71751: PPUSH
71752: LD_VAR 0 5
71756: PPUSH
71757: CALL_OW 488
71761: IFFALSE 71782
// ComTurnXY ( unit , x , y ) ;
71763: LD_VAR 0 1
71767: PPUSH
71768: LD_VAR 0 4
71772: PPUSH
71773: LD_VAR 0 5
71777: PPUSH
71778: CALL_OW 118
// end ;
71782: LD_VAR 0 3
71786: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71787: LD_INT 0
71789: PPUSH
71790: PPUSH
// result := false ;
71791: LD_ADDR_VAR 0 3
71795: PUSH
71796: LD_INT 0
71798: ST_TO_ADDR
// if not units then
71799: LD_VAR 0 2
71803: NOT
71804: IFFALSE 71808
// exit ;
71806: GO 71853
// for i in units do
71808: LD_ADDR_VAR 0 4
71812: PUSH
71813: LD_VAR 0 2
71817: PUSH
71818: FOR_IN
71819: IFFALSE 71851
// if See ( side , i ) then
71821: LD_VAR 0 1
71825: PPUSH
71826: LD_VAR 0 4
71830: PPUSH
71831: CALL_OW 292
71835: IFFALSE 71849
// begin result := true ;
71837: LD_ADDR_VAR 0 3
71841: PUSH
71842: LD_INT 1
71844: ST_TO_ADDR
// exit ;
71845: POP
71846: POP
71847: GO 71853
// end ;
71849: GO 71818
71851: POP
71852: POP
// end ;
71853: LD_VAR 0 3
71857: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71858: LD_INT 0
71860: PPUSH
71861: PPUSH
71862: PPUSH
71863: PPUSH
// if not unit or not points then
71864: LD_VAR 0 1
71868: NOT
71869: PUSH
71870: LD_VAR 0 2
71874: NOT
71875: OR
71876: IFFALSE 71880
// exit ;
71878: GO 71970
// dist := 99999 ;
71880: LD_ADDR_VAR 0 5
71884: PUSH
71885: LD_INT 99999
71887: ST_TO_ADDR
// for i in points do
71888: LD_ADDR_VAR 0 4
71892: PUSH
71893: LD_VAR 0 2
71897: PUSH
71898: FOR_IN
71899: IFFALSE 71968
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71901: LD_ADDR_VAR 0 6
71905: PUSH
71906: LD_VAR 0 1
71910: PPUSH
71911: LD_VAR 0 4
71915: PUSH
71916: LD_INT 1
71918: ARRAY
71919: PPUSH
71920: LD_VAR 0 4
71924: PUSH
71925: LD_INT 2
71927: ARRAY
71928: PPUSH
71929: CALL_OW 297
71933: ST_TO_ADDR
// if tmpDist < dist then
71934: LD_VAR 0 6
71938: PUSH
71939: LD_VAR 0 5
71943: LESS
71944: IFFALSE 71966
// begin result := i ;
71946: LD_ADDR_VAR 0 3
71950: PUSH
71951: LD_VAR 0 4
71955: ST_TO_ADDR
// dist := tmpDist ;
71956: LD_ADDR_VAR 0 5
71960: PUSH
71961: LD_VAR 0 6
71965: ST_TO_ADDR
// end ; end ;
71966: GO 71898
71968: POP
71969: POP
// end ;
71970: LD_VAR 0 3
71974: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71975: LD_INT 0
71977: PPUSH
// uc_side := side ;
71978: LD_ADDR_OWVAR 20
71982: PUSH
71983: LD_VAR 0 1
71987: ST_TO_ADDR
// uc_nation := 3 ;
71988: LD_ADDR_OWVAR 21
71992: PUSH
71993: LD_INT 3
71995: ST_TO_ADDR
// vc_chassis := 25 ;
71996: LD_ADDR_OWVAR 37
72000: PUSH
72001: LD_INT 25
72003: ST_TO_ADDR
// vc_engine := engine_siberite ;
72004: LD_ADDR_OWVAR 39
72008: PUSH
72009: LD_INT 3
72011: ST_TO_ADDR
// vc_control := control_computer ;
72012: LD_ADDR_OWVAR 38
72016: PUSH
72017: LD_INT 3
72019: ST_TO_ADDR
// vc_weapon := 59 ;
72020: LD_ADDR_OWVAR 40
72024: PUSH
72025: LD_INT 59
72027: ST_TO_ADDR
// result := CreateVehicle ;
72028: LD_ADDR_VAR 0 5
72032: PUSH
72033: CALL_OW 45
72037: ST_TO_ADDR
// SetDir ( result , d ) ;
72038: LD_VAR 0 5
72042: PPUSH
72043: LD_VAR 0 4
72047: PPUSH
72048: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72052: LD_VAR 0 5
72056: PPUSH
72057: LD_VAR 0 2
72061: PPUSH
72062: LD_VAR 0 3
72066: PPUSH
72067: LD_INT 0
72069: PPUSH
72070: CALL_OW 48
// end ;
72074: LD_VAR 0 5
72078: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72079: LD_INT 0
72081: PPUSH
72082: PPUSH
72083: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72084: LD_ADDR_VAR 0 2
72088: PUSH
72089: LD_INT 0
72091: PUSH
72092: LD_INT 0
72094: PUSH
72095: LD_INT 0
72097: PUSH
72098: LD_INT 0
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72107: LD_VAR 0 1
72111: NOT
72112: PUSH
72113: LD_VAR 0 1
72117: PPUSH
72118: CALL_OW 264
72122: PUSH
72123: LD_INT 12
72125: PUSH
72126: LD_INT 51
72128: PUSH
72129: LD_INT 32
72131: PUSH
72132: LD_EXP 15
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: IN
72143: NOT
72144: OR
72145: IFFALSE 72149
// exit ;
72147: GO 72247
// for i := 1 to 3 do
72149: LD_ADDR_VAR 0 3
72153: PUSH
72154: DOUBLE
72155: LD_INT 1
72157: DEC
72158: ST_TO_ADDR
72159: LD_INT 3
72161: PUSH
72162: FOR_TO
72163: IFFALSE 72245
// begin tmp := GetCargo ( cargo , i ) ;
72165: LD_ADDR_VAR 0 4
72169: PUSH
72170: LD_VAR 0 1
72174: PPUSH
72175: LD_VAR 0 3
72179: PPUSH
72180: CALL_OW 289
72184: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72185: LD_ADDR_VAR 0 2
72189: PUSH
72190: LD_VAR 0 2
72194: PPUSH
72195: LD_VAR 0 3
72199: PPUSH
72200: LD_VAR 0 4
72204: PPUSH
72205: CALL_OW 1
72209: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72210: LD_ADDR_VAR 0 2
72214: PUSH
72215: LD_VAR 0 2
72219: PPUSH
72220: LD_INT 4
72222: PPUSH
72223: LD_VAR 0 2
72227: PUSH
72228: LD_INT 4
72230: ARRAY
72231: PUSH
72232: LD_VAR 0 4
72236: PLUS
72237: PPUSH
72238: CALL_OW 1
72242: ST_TO_ADDR
// end ;
72243: GO 72162
72245: POP
72246: POP
// end ;
72247: LD_VAR 0 2
72251: RET
// export function Length ( array ) ; begin
72252: LD_INT 0
72254: PPUSH
// result := array + 0 ;
72255: LD_ADDR_VAR 0 2
72259: PUSH
72260: LD_VAR 0 1
72264: PUSH
72265: LD_INT 0
72267: PLUS
72268: ST_TO_ADDR
// end ;
72269: LD_VAR 0 2
72273: RET
// export function PrepareArray ( array ) ; begin
72274: LD_INT 0
72276: PPUSH
// result := array diff 0 ;
72277: LD_ADDR_VAR 0 2
72281: PUSH
72282: LD_VAR 0 1
72286: PUSH
72287: LD_INT 0
72289: DIFF
72290: ST_TO_ADDR
// if not result [ 1 ] then
72291: LD_VAR 0 2
72295: PUSH
72296: LD_INT 1
72298: ARRAY
72299: NOT
72300: IFFALSE 72320
// result := Delete ( result , 1 ) ;
72302: LD_ADDR_VAR 0 2
72306: PUSH
72307: LD_VAR 0 2
72311: PPUSH
72312: LD_INT 1
72314: PPUSH
72315: CALL_OW 3
72319: ST_TO_ADDR
// end ; end_of_file
72320: LD_VAR 0 2
72324: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72325: LD_VAR 0 1
72329: PUSH
72330: LD_INT 200
72332: DOUBLE
72333: GREATEREQUAL
72334: IFFALSE 72342
72336: LD_INT 299
72338: DOUBLE
72339: LESSEQUAL
72340: IFTRUE 72344
72342: GO 72376
72344: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72345: LD_VAR 0 1
72349: PPUSH
72350: LD_VAR 0 2
72354: PPUSH
72355: LD_VAR 0 3
72359: PPUSH
72360: LD_VAR 0 4
72364: PPUSH
72365: LD_VAR 0 5
72369: PPUSH
72370: CALL 27176 0 5
72374: GO 72453
72376: LD_INT 300
72378: DOUBLE
72379: GREATEREQUAL
72380: IFFALSE 72388
72382: LD_INT 399
72384: DOUBLE
72385: LESSEQUAL
72386: IFTRUE 72390
72388: GO 72452
72390: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72391: LD_VAR 0 1
72395: PPUSH
72396: LD_VAR 0 2
72400: PPUSH
72401: LD_VAR 0 3
72405: PPUSH
72406: LD_VAR 0 4
72410: PPUSH
72411: LD_VAR 0 5
72415: PPUSH
72416: LD_VAR 0 6
72420: PPUSH
72421: LD_VAR 0 7
72425: PPUSH
72426: LD_VAR 0 8
72430: PPUSH
72431: LD_VAR 0 9
72435: PPUSH
72436: LD_VAR 0 10
72440: PPUSH
72441: LD_VAR 0 11
72445: PPUSH
72446: CALL 23505 0 11
72450: GO 72453
72452: POP
// end ;
72453: PPOPN 11
72455: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72456: LD_VAR 0 1
72460: PPUSH
72461: LD_VAR 0 2
72465: PPUSH
72466: LD_VAR 0 3
72470: PPUSH
72471: LD_VAR 0 4
72475: PPUSH
72476: LD_VAR 0 5
72480: PPUSH
72481: CALL 26912 0 5
// end ; end_of_file
72485: PPOPN 5
72487: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72488: LD_VAR 0 1
72492: PPUSH
72493: LD_VAR 0 2
72497: PPUSH
72498: LD_VAR 0 3
72502: PPUSH
72503: LD_VAR 0 4
72507: PPUSH
72508: LD_VAR 0 5
72512: PPUSH
72513: LD_VAR 0 6
72517: PPUSH
72518: CALL 11198 0 6
// end ;
72522: PPOPN 6
72524: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72525: LD_INT 0
72527: PPUSH
// begin if not units then
72528: LD_VAR 0 1
72532: NOT
72533: IFFALSE 72537
// exit ;
72535: GO 72537
// end ;
72537: PPOPN 7
72539: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72540: CALL 11169 0 0
// end ;
72544: PPOPN 1
72546: END
