// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9192 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: LD_INT 91
2674: ST_TO_ADDR
// us_artillery := 97 ;
2675: LD_ADDR_EXP 17
2679: PUSH
2680: LD_INT 97
2682: ST_TO_ADDR
// ru_radar := 98 ;
2683: LD_ADDR_EXP 14
2687: PUSH
2688: LD_INT 98
2690: ST_TO_ADDR
// game_started := false ;
2691: LD_ADDR_EXP 7
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// points := 0 ;
2699: LD_ADDR_EXP 2
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// waveNumber := 0 ;
2707: LD_ADDR_EXP 5
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// timeToNextAttack := 0 ;
2715: LD_ADDR_EXP 4
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// graveyard := [ ] ;
2723: LD_ADDR_EXP 8
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// base_x := 1 ;
2730: LD_ADDR_EXP 9
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// base_y := 1 ;
2738: LD_ADDR_EXP 10
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if difficultyLevel > 2 then
2746: LD_EXP 3
2750: PUSH
2751: LD_INT 2
2753: GREATER
2754: IFFALSE 2769
// SetTech ( 5 , 7 , state_researched ) ;
2756: LD_INT 5
2758: PPUSH
2759: LD_INT 7
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: CALL_OW 322
// if not playerNation then
2769: LD_EXP 6
2773: NOT
2774: IFFALSE 2800
// begin points := 100 ;
2776: LD_ADDR_EXP 2
2780: PUSH
2781: LD_INT 100
2783: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2784: LD_ADDR_EXP 6
2788: PUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 3
2794: PPUSH
2795: CALL_OW 12
2799: ST_TO_ADDR
// end ; your_side := playerNation ;
2800: LD_ADDR_OWVAR 2
2804: PUSH
2805: LD_EXP 6
2809: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2810: LD_OWVAR 2
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2822: LD_INT 25
2824: PUSH
2825: LD_INT 20
2827: PUSH
2828: LD_INT 15
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 3
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: LD_INT 1
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_EXP 3
2892: ARRAY
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: PPUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: LD_INT 88
2915: PPUSH
2916: LD_INT 76
2918: PPUSH
2919: LD_INT 6
2921: PPUSH
2922: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2926: LD_EXP 6
2930: PPUSH
2931: LD_INT 9
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 5
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 24
2957: PUSH
2958: LD_INT 16
2960: PUSH
2961: LD_INT 12
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_EXP 3
2977: ARRAY
2978: PPUSH
2979: LD_INT 88
2981: PPUSH
2982: LD_INT 76
2984: PPUSH
2985: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2989: LD_INT 88
2991: PPUSH
2992: LD_INT 76
2994: PPUSH
2995: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2999: LD_INT 90
3001: PPUSH
3002: LD_INT 79
3004: PPUSH
3005: LD_OWVAR 2
3009: PPUSH
3010: LD_INT 50
3012: NEG
3013: PPUSH
3014: CALL_OW 330
// if debug then
3018: LD_EXP 1
3022: IFFALSE 3033
// FogOff ( your_side ) ;
3024: LD_OWVAR 2
3028: PPUSH
3029: CALL_OW 344
// end ;
3033: LD_VAR 0 1
3037: RET
// every 0 0$01 trigger game_started do var i ;
3038: LD_EXP 7
3042: IFFALSE 3276
3044: GO 3046
3046: DISABLE
3047: LD_INT 0
3049: PPUSH
// begin while ( game_started ) do
3050: LD_EXP 7
3054: IFFALSE 3276
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3056: LD_INT 22
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PUSH
3071: LD_INT 5
3073: LESS
3074: PUSH
3075: LD_EXP 4
3079: PUSH
3080: LD_INT 0
3082: LESSEQUAL
3083: AND
3084: IFFALSE 3267
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3086: LD_INT 22
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: IFFALSE 3138
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PPUSH
3117: CALL_OW 69
3121: PUSH
3122: FOR_IN
3123: IFFALSE 3136
// RemoveUnit ( i ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 64
3134: GO 3122
3136: POP
3137: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3138: LD_EXP 5
3142: PUSH
3143: LD_INT 3
3145: MOD
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: PUSH
3151: LD_EXP 5
3155: PUSH
3156: LD_INT 10
3158: MOD
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: OR
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: AND
3174: IFFALSE 3180
// InitBonus ;
3176: CALL 9289 0 0
// if waveNumber mod 10 = 0 then
3180: LD_EXP 5
3184: PUSH
3185: LD_INT 10
3187: MOD
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3198
// SaveForQuickRestart ;
3194: CALL_OW 22
// if waveNumber = 100 then
3198: LD_EXP 5
3202: PUSH
3203: LD_INT 100
3205: EQUAL
3206: IFFALSE 3219
// begin FogOff ( your_side ) ;
3208: LD_OWVAR 2
3212: PPUSH
3213: CALL_OW 344
// break ;
3217: GO 3276
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3219: LD_ADDR_EXP 4
3223: PUSH
3224: LD_INT 3150
3226: PPUSH
3227: LD_INT 5250
3229: PPUSH
3230: CALL_OW 12
3234: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3235: LD_EXP 4
3239: PPUSH
3240: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3244: LD_ADDR_EXP 5
3248: PUSH
3249: LD_EXP 5
3253: PUSH
3254: LD_INT 1
3256: PLUS
3257: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3258: LD_EXP 5
3262: PPUSH
3263: CALL 4280 0 1
// end ; Wait ( 0 0$01 ) ;
3267: LD_INT 35
3269: PPUSH
3270: CALL_OW 67
// end ;
3274: GO 3050
// end ;
3276: PPOPN 1
3278: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3279: LD_EXP 4
3283: PUSH
3284: LD_INT 0
3286: GREATER
3287: IFFALSE 3307
3289: GO 3291
3291: DISABLE
// begin enable ;
3292: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3293: LD_ADDR_EXP 4
3297: PUSH
3298: LD_EXP 4
3302: PUSH
3303: LD_INT 35
3305: MINUS
3306: ST_TO_ADDR
// end ; end_of_file
3307: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3308: LD_VAR 0 1
3312: PUSH
3313: LD_EXP 13
3317: IN
3318: NOT
3319: IFFALSE 3350
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3321: LD_ADDR_EXP 13
3325: PUSH
3326: LD_EXP 13
3330: PPUSH
3331: LD_EXP 13
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 1
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// end ;
3350: PPOPN 1
3352: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL 24945 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 255
3371: PUSH
3372: LD_OWVAR 2
3376: EQUAL
3377: PUSH
3378: LD_VAR 0 1
3382: PPUSH
3383: CALL_OW 247
3387: PUSH
3388: LD_INT 1
3390: EQUAL
3391: AND
3392: IFFALSE 3423
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3394: LD_ADDR_EXP 8
3398: PUSH
3399: LD_EXP 8
3403: PPUSH
3404: LD_EXP 8
3408: PUSH
3409: LD_INT 1
3411: PLUS
3412: PPUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 255
3432: PUSH
3433: LD_INT 7
3435: EQUAL
3436: IFFALSE 3810
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3438: LD_VAR 0 1
3442: PUSH
3443: LD_INT 34
3445: PUSH
3446: LD_INT 91
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 69
3457: IN
3458: IFFALSE 3503
// begin if Rand ( 1 , 100 ) <= 70 then
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 100
3465: PPUSH
3466: CALL_OW 12
3470: PUSH
3471: LD_INT 70
3473: LESSEQUAL
3474: IFFALSE 3503
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 250
3485: PPUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 251
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 247
3512: PUSH
3513: LD_INT 1
3515: DOUBLE
3516: EQUAL
3517: IFTRUE 3521
3519: GO 3655
3521: POP
// begin case GetClass ( un ) of class_apeman :
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 257
3531: PUSH
3532: LD_INT 12
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3550
3540: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3541: LD_INT 2
3543: PPUSH
3544: CALL 471 0 1
3548: GO 3653
3550: LD_INT 15
3552: DOUBLE
3553: EQUAL
3554: IFTRUE 3558
3556: GO 3568
3558: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3559: LD_INT 5
3561: PPUSH
3562: CALL 471 0 1
3566: GO 3653
3568: LD_INT 17
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3586
3576: POP
// AddPoints ( 30 ) ; class_soldier :
3577: LD_INT 30
3579: PPUSH
3580: CALL 471 0 1
3584: GO 3653
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3604
3594: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3595: LD_INT 50
3597: PPUSH
3598: CALL 471 0 1
3602: GO 3653
3604: LD_INT 9
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3624
3610: LD_INT 5
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3624
3616: LD_INT 8
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3634
3624: POP
// AddPoints ( 75 ) ; class_mechanic :
3625: LD_INT 75
3627: PPUSH
3628: CALL 471 0 1
3632: GO 3653
3634: LD_INT 3
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3652
3642: POP
// AddPoints ( 60 ) ; end ;
3643: LD_INT 60
3645: PPUSH
3646: CALL 471 0 1
3650: GO 3653
3652: POP
// end ; unit_vehicle :
3653: GO 3810
3655: LD_INT 2
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3809
3663: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3664: LD_VAR 0 1
3668: PPUSH
3669: CALL_OW 265
3673: PUSH
3674: LD_INT 12
3676: DOUBLE
3677: EQUAL
3678: IFTRUE 3694
3680: LD_INT 1
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3694
3686: LD_INT 11
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3694
3692: GO 3704
3694: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3695: LD_INT 100
3697: PPUSH
3698: CALL 471 0 1
3702: GO 3807
3704: LD_INT 13
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3742
3710: LD_INT 14
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3742
3716: LD_INT 2
3718: DOUBLE
3719: EQUAL
3720: IFTRUE 3742
3722: LD_INT 3
3724: DOUBLE
3725: EQUAL
3726: IFTRUE 3742
3728: LD_INT 21
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3742
3734: LD_INT 22
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3752
3742: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3743: LD_INT 250
3745: PPUSH
3746: CALL 471 0 1
3750: GO 3807
3752: LD_INT 4
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3778
3758: LD_INT 5
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3778
3764: LD_INT 23
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3778
3770: LD_INT 24
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3788
3778: POP
// AddPoints ( 500 ) ; 25 :
3779: LD_INT 500
3781: PPUSH
3782: CALL 471 0 1
3786: GO 3807
3788: LD_INT 25
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3806
3796: POP
// AddPoints ( 1250 ) ; end ;
3797: LD_INT 1250
3799: PPUSH
3800: CALL 471 0 1
3804: GO 3807
3806: POP
// end ; end ;
3807: GO 3810
3809: POP
// end ; end ;
3810: PPOPN 1
3812: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 266
3822: PUSH
3823: LD_INT 0
3825: EQUAL
3826: IFFALSE 3876
// begin base_x := GetX ( b ) ;
3828: LD_ADDR_EXP 9
3832: PUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 250
3842: ST_TO_ADDR
// base_y := GetY ( b ) ;
3843: LD_ADDR_EXP 10
3847: PUSH
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 251
3857: ST_TO_ADDR
// base := b ;
3858: LD_ADDR_EXP 11
3862: PUSH
3863: LD_VAR 0 1
3867: ST_TO_ADDR
// game_started := true ;
3868: LD_ADDR_EXP 7
3872: PUSH
3873: LD_INT 1
3875: ST_TO_ADDR
// end ; end ;
3876: PPOPN 1
3878: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 255
3888: PUSH
3889: LD_OWVAR 2
3893: EQUAL
3894: IFFALSE 3898
// exit ;
3896: GO 4045
// if GetType ( un ) = unit_vehicle then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 247
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: IFFALSE 3964
// begin KillUnit ( un ) ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 248
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 264
3945: PUSH
3946: LD_INT 49
3948: PUSH
3949: EMPTY
3950: LIST
3951: IN
3952: OR
3953: IFFALSE 3964
// ExplodeVehicle ( un ) ;
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 247
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4045
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 248
3988: PUSH
3989: LD_INT 2
3991: EQUAL
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 248
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: IN
4033: OR
4034: IFFALSE 4045
// KillUnit ( un ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 66
// end ; end ;
4045: PPOPN 1
4047: END
// every 0 0$1 do
4048: GO 4050
4050: DISABLE
// begin enable ;
4051: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4052: LD_INT 4
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 22
4060: PUSH
4061: LD_OWVAR 2
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 513
// end ;
4074: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4075: LD_EXP 7
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_OWVAR 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PUSH
4111: LD_INT 0
4113: EQUAL
4114: AND
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( die ) ;
4120: LD_STRING die
4122: PPUSH
4123: CALL_OW 104
4127: END
// every 0 0$21 trigger tick <= 15 15$00 do
4128: LD_OWVAR 1
4132: PUSH
4133: LD_INT 31500
4135: LESSEQUAL
4136: IFFALSE 4163
4138: GO 4140
4140: DISABLE
// begin enable ;
4141: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 5
4147: PPUSH
4148: CALL_OW 12
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: CALL_OW 55
// end ;
4163: END
// every 0 0$51 trigger tick > 15 15$00 do
4164: LD_OWVAR 1
4168: PUSH
4169: LD_INT 31500
4171: GREATER
4172: IFFALSE 4219
4174: GO 4176
4176: DISABLE
// begin enable ;
4177: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4178: LD_INT 22
4180: PUSH
4181: LD_INT 7
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 69
4192: PUSH
4193: LD_INT 0
4195: EQUAL
4196: IFFALSE 4219
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 5
4203: PPUSH
4204: CALL_OW 12
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 55
// end ;
4219: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4220: LD_VAR 0 1
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: CALL_OW 308
4232: IFFALSE 4243
// KillUnit ( building ) ;
4234: LD_VAR 0 1
4238: PPUSH
4239: CALL_OW 66
// end ;
4243: PPOPN 2
4245: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL 25043 0 3
// end ;
4265: PPOPN 3
4267: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL 25051 0 1
// end ; end_of_file
4277: PPOPN 1
4279: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4280: LD_INT 0
4282: PPUSH
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4291: LD_ADDR_VAR 0 7
4295: PUSH
4296: LD_INT 1
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: ST_TO_ADDR
// uc_side := 7 ;
4306: LD_ADDR_OWVAR 20
4310: PUSH
4311: LD_INT 7
4313: ST_TO_ADDR
// l := 0 ;
4314: LD_ADDR_VAR 0 9
4318: PUSH
4319: LD_INT 0
4321: ST_TO_ADDR
// case num of 1 :
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 1
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4354
4335: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4336: LD_ADDR_VAR 0 2
4340: PUSH
4341: LD_INT 12
4343: PPUSH
4344: LD_INT 1
4346: PPUSH
4347: CALL 6683 0 2
4351: ST_TO_ADDR
4352: GO 6492
4354: LD_INT 2
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4381
4362: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: LD_INT 12
4370: PPUSH
4371: LD_INT 1
4373: PPUSH
4374: CALL 6754 0 2
4378: ST_TO_ADDR
4379: GO 6492
4381: LD_INT 3
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4408
4389: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4390: LD_ADDR_VAR 0 2
4394: PUSH
4395: LD_INT 12
4397: PPUSH
4398: LD_INT 1
4400: PPUSH
4401: CALL 6825 0 2
4405: ST_TO_ADDR
4406: GO 6492
4408: LD_INT 4
4410: DOUBLE
4411: EQUAL
4412: IFTRUE 4416
4414: GO 4435
4416: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: LD_INT 7
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL 6904 0 2
4432: ST_TO_ADDR
4433: GO 6492
4435: LD_INT 5
4437: DOUBLE
4438: EQUAL
4439: IFTRUE 4443
4441: GO 4462
4443: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4444: LD_ADDR_VAR 0 2
4448: PUSH
4449: LD_INT 7
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: CALL 7300 0 2
4459: ST_TO_ADDR
4460: GO 6492
4462: LD_INT 6
4464: DOUBLE
4465: EQUAL
4466: IFTRUE 4470
4468: GO 4489
4470: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 6
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: CALL 7720 0 2
4486: ST_TO_ADDR
4487: GO 6492
4489: LD_INT 7
4491: DOUBLE
4492: EQUAL
4493: IFTRUE 4497
4495: GO 4516
4497: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: LD_INT 15
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL 8140 0 2
4513: ST_TO_ADDR
4514: GO 6492
4516: LD_INT 8
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4543
4524: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 7
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL 8241 0 2
4540: ST_TO_ADDR
4541: GO 6492
4543: LD_INT 9
4545: DOUBLE
4546: EQUAL
4547: IFTRUE 4551
4549: GO 4582
4551: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4552: LD_ADDR_VAR 0 2
4556: PUSH
4557: LD_INT 4
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: CALL 8241 0 2
4567: PUSH
4568: LD_INT 7
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL 7300 0 2
4578: ADD
4579: ST_TO_ADDR
4580: GO 6492
4582: LD_INT 10
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4621
4590: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4591: LD_ADDR_VAR 0 2
4595: PUSH
4596: LD_INT 9
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: CALL 8140 0 2
4606: PUSH
4607: LD_INT 14
4609: PPUSH
4610: LD_INT 1
4612: PPUSH
4613: CALL 6825 0 2
4617: ADD
4618: ST_TO_ADDR
4619: GO 6492
4621: LD_INT 11
4623: DOUBLE
4624: EQUAL
4625: IFTRUE 4677
4627: LD_INT 21
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4677
4633: LD_INT 31
4635: DOUBLE
4636: EQUAL
4637: IFTRUE 4677
4639: LD_INT 41
4641: DOUBLE
4642: EQUAL
4643: IFTRUE 4677
4645: LD_INT 51
4647: DOUBLE
4648: EQUAL
4649: IFTRUE 4677
4651: LD_INT 61
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4677
4657: LD_INT 71
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4677
4663: LD_INT 81
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4677
4669: LD_INT 91
4671: DOUBLE
4672: EQUAL
4673: IFTRUE 4677
4675: GO 4786
4677: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: LD_INT 20
4685: PUSH
4686: LD_INT 30
4688: PUSH
4689: LD_INT 40
4691: PUSH
4692: LD_INT 45
4694: PUSH
4695: LD_INT 50
4697: PUSH
4698: LD_INT 60
4700: PUSH
4701: LD_INT 70
4703: PUSH
4704: LD_INT 80
4706: PUSH
4707: LD_INT 100
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: LD_VAR 0 1
4725: PUSH
4726: LD_INT 10
4728: DIV
4729: ARRAY
4730: PPUSH
4731: LD_INT 2
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 4
4739: PUSH
4740: LD_INT 5
4742: PUSH
4743: LD_INT 6
4745: PUSH
4746: LD_INT 7
4748: PUSH
4749: LD_INT 8
4751: PUSH
4752: LD_INT 9
4754: PUSH
4755: LD_INT 10
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 1
4773: PUSH
4774: LD_INT 10
4776: DIV
4777: ARRAY
4778: PPUSH
4779: CALL 6683 0 2
4783: ST_TO_ADDR
4784: GO 6492
4786: LD_INT 12
4788: DOUBLE
4789: EQUAL
4790: IFTRUE 4842
4792: LD_INT 22
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4842
4798: LD_INT 32
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4842
4804: LD_INT 42
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4842
4810: LD_INT 52
4812: DOUBLE
4813: EQUAL
4814: IFTRUE 4842
4816: LD_INT 62
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4842
4822: LD_INT 72
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4842
4828: LD_INT 82
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4842
4834: LD_INT 92
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4951
4842: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 16
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 28
4856: PUSH
4857: LD_INT 33
4859: PUSH
4860: LD_INT 39
4862: PUSH
4863: LD_INT 46
4865: PUSH
4866: LD_INT 56
4868: PUSH
4869: LD_INT 66
4871: PUSH
4872: LD_INT 80
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: PUSH
4891: LD_INT 10
4893: DIV
4894: ARRAY
4895: PPUSH
4896: LD_INT 2
4898: PUSH
4899: LD_INT 3
4901: PUSH
4902: LD_INT 4
4904: PUSH
4905: LD_INT 5
4907: PUSH
4908: LD_INT 6
4910: PUSH
4911: LD_INT 7
4913: PUSH
4914: LD_INT 8
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: LD_INT 10
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 10
4941: DIV
4942: ARRAY
4943: PPUSH
4944: CALL 6754 0 2
4948: ST_TO_ADDR
4949: GO 6492
4951: LD_INT 13
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 5007
4957: LD_INT 23
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 5007
4963: LD_INT 33
4965: DOUBLE
4966: EQUAL
4967: IFTRUE 5007
4969: LD_INT 43
4971: DOUBLE
4972: EQUAL
4973: IFTRUE 5007
4975: LD_INT 53
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 5007
4981: LD_INT 63
4983: DOUBLE
4984: EQUAL
4985: IFTRUE 5007
4987: LD_INT 73
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 5007
4993: LD_INT 83
4995: DOUBLE
4996: EQUAL
4997: IFTRUE 5007
4999: LD_INT 93
5001: DOUBLE
5002: EQUAL
5003: IFTRUE 5007
5005: GO 5116
5007: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_INT 14
5015: PUSH
5016: LD_INT 18
5018: PUSH
5019: LD_INT 22
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 33
5027: PUSH
5028: LD_INT 39
5030: PUSH
5031: LD_INT 44
5033: PUSH
5034: LD_INT 57
5036: PUSH
5037: LD_INT 65
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_VAR 0 1
5055: PUSH
5056: LD_INT 10
5058: DIV
5059: ARRAY
5060: PPUSH
5061: LD_INT 2
5063: PUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 4
5069: PUSH
5070: LD_INT 5
5072: PUSH
5073: LD_INT 6
5075: PUSH
5076: LD_INT 7
5078: PUSH
5079: LD_INT 8
5081: PUSH
5082: LD_INT 9
5084: PUSH
5085: LD_INT 10
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 10
5106: DIV
5107: ARRAY
5108: PPUSH
5109: CALL 6825 0 2
5113: ST_TO_ADDR
5114: GO 6492
5116: LD_INT 14
5118: DOUBLE
5119: EQUAL
5120: IFTRUE 5172
5122: LD_INT 24
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5172
5128: LD_INT 34
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5172
5134: LD_INT 44
5136: DOUBLE
5137: EQUAL
5138: IFTRUE 5172
5140: LD_INT 54
5142: DOUBLE
5143: EQUAL
5144: IFTRUE 5172
5146: LD_INT 64
5148: DOUBLE
5149: EQUAL
5150: IFTRUE 5172
5152: LD_INT 74
5154: DOUBLE
5155: EQUAL
5156: IFTRUE 5172
5158: LD_INT 84
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5172
5164: LD_INT 94
5166: DOUBLE
5167: EQUAL
5168: IFTRUE 5172
5170: GO 5281
5172: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: LD_INT 9
5180: PUSH
5181: LD_INT 15
5183: PUSH
5184: LD_INT 22
5186: PUSH
5187: LD_INT 30
5189: PUSH
5190: LD_INT 39
5192: PUSH
5193: LD_INT 45
5195: PUSH
5196: LD_INT 56
5198: PUSH
5199: LD_INT 60
5201: PUSH
5202: LD_INT 65
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_VAR 0 1
5220: PUSH
5221: LD_INT 10
5223: DIV
5224: ARRAY
5225: PPUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 4
5234: PUSH
5235: LD_INT 5
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: LD_INT 7
5243: PUSH
5244: LD_INT 8
5246: PUSH
5247: LD_INT 9
5249: PUSH
5250: LD_INT 10
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_VAR 0 1
5268: PUSH
5269: LD_INT 10
5271: DIV
5272: ARRAY
5273: PPUSH
5274: CALL 6904 0 2
5278: ST_TO_ADDR
5279: GO 6492
5281: LD_INT 15
5283: DOUBLE
5284: EQUAL
5285: IFTRUE 5337
5287: LD_INT 25
5289: DOUBLE
5290: EQUAL
5291: IFTRUE 5337
5293: LD_INT 35
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5337
5299: LD_INT 45
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5337
5305: LD_INT 55
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5337
5311: LD_INT 65
5313: DOUBLE
5314: EQUAL
5315: IFTRUE 5337
5317: LD_INT 75
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5337
5323: LD_INT 85
5325: DOUBLE
5326: EQUAL
5327: IFTRUE 5337
5329: LD_INT 95
5331: DOUBLE
5332: EQUAL
5333: IFTRUE 5337
5335: GO 5446
5337: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 6
5345: PUSH
5346: LD_INT 11
5348: PUSH
5349: LD_INT 15
5351: PUSH
5352: LD_INT 20
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 30
5360: PUSH
5361: LD_INT 35
5363: PUSH
5364: LD_INT 40
5366: PUSH
5367: LD_INT 45
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_VAR 0 1
5385: PUSH
5386: LD_INT 10
5388: DIV
5389: ARRAY
5390: PPUSH
5391: LD_INT 2
5393: PUSH
5394: LD_INT 3
5396: PUSH
5397: LD_INT 4
5399: PUSH
5400: LD_INT 5
5402: PUSH
5403: LD_INT 6
5405: PUSH
5406: LD_INT 7
5408: PUSH
5409: LD_INT 8
5411: PUSH
5412: LD_INT 9
5414: PUSH
5415: LD_INT 10
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: LD_VAR 0 1
5433: PUSH
5434: LD_INT 10
5436: DIV
5437: ARRAY
5438: PPUSH
5439: CALL 7300 0 2
5443: ST_TO_ADDR
5444: GO 6492
5446: LD_INT 16
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5502
5452: LD_INT 26
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5502
5458: LD_INT 36
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5502
5464: LD_INT 46
5466: DOUBLE
5467: EQUAL
5468: IFTRUE 5502
5470: LD_INT 56
5472: DOUBLE
5473: EQUAL
5474: IFTRUE 5502
5476: LD_INT 66
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5502
5482: LD_INT 76
5484: DOUBLE
5485: EQUAL
5486: IFTRUE 5502
5488: LD_INT 86
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5502
5494: LD_INT 96
5496: DOUBLE
5497: EQUAL
5498: IFTRUE 5502
5500: GO 5611
5502: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5503: LD_ADDR_VAR 0 2
5507: PUSH
5508: LD_INT 9
5510: PUSH
5511: LD_INT 12
5513: PUSH
5514: LD_INT 15
5516: PUSH
5517: LD_INT 18
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 24
5525: PUSH
5526: LD_INT 27
5528: PUSH
5529: LD_INT 30
5531: PUSH
5532: LD_INT 33
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 10
5553: DIV
5554: ARRAY
5555: PPUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 3
5561: PUSH
5562: LD_INT 4
5564: PUSH
5565: LD_INT 5
5567: PUSH
5568: LD_INT 6
5570: PUSH
5571: LD_INT 7
5573: PUSH
5574: LD_INT 8
5576: PUSH
5577: LD_INT 9
5579: PUSH
5580: LD_INT 10
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: PUSH
5594: LD_VAR 0 1
5598: PUSH
5599: LD_INT 10
5601: DIV
5602: ARRAY
5603: PPUSH
5604: CALL 7720 0 2
5608: ST_TO_ADDR
5609: GO 6492
5611: LD_INT 17
5613: DOUBLE
5614: EQUAL
5615: IFTRUE 5667
5617: LD_INT 27
5619: DOUBLE
5620: EQUAL
5621: IFTRUE 5667
5623: LD_INT 37
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5667
5629: LD_INT 47
5631: DOUBLE
5632: EQUAL
5633: IFTRUE 5667
5635: LD_INT 57
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5667
5641: LD_INT 67
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5667
5647: LD_INT 77
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5667
5653: LD_INT 87
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5667
5659: LD_INT 97
5661: DOUBLE
5662: EQUAL
5663: IFTRUE 5667
5665: GO 5776
5667: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_INT 14
5675: PUSH
5676: LD_INT 16
5678: PUSH
5679: LD_INT 18
5681: PUSH
5682: LD_INT 22
5684: PUSH
5685: LD_INT 24
5687: PUSH
5688: LD_INT 26
5690: PUSH
5691: LD_INT 28
5693: PUSH
5694: LD_INT 32
5696: PUSH
5697: LD_INT 35
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_INT 10
5718: DIV
5719: ARRAY
5720: PPUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 3
5726: PUSH
5727: LD_INT 4
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: LD_INT 6
5735: PUSH
5736: LD_INT 7
5738: PUSH
5739: LD_INT 8
5741: PUSH
5742: LD_INT 9
5744: PUSH
5745: LD_INT 10
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: PUSH
5759: LD_VAR 0 1
5763: PUSH
5764: LD_INT 10
5766: DIV
5767: ARRAY
5768: PPUSH
5769: CALL 8140 0 2
5773: ST_TO_ADDR
5774: GO 6492
5776: LD_INT 18
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5832
5782: LD_INT 28
5784: DOUBLE
5785: EQUAL
5786: IFTRUE 5832
5788: LD_INT 38
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5832
5794: LD_INT 48
5796: DOUBLE
5797: EQUAL
5798: IFTRUE 5832
5800: LD_INT 58
5802: DOUBLE
5803: EQUAL
5804: IFTRUE 5832
5806: LD_INT 68
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5832
5812: LD_INT 78
5814: DOUBLE
5815: EQUAL
5816: IFTRUE 5832
5818: LD_INT 88
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5832
5824: LD_INT 98
5826: DOUBLE
5827: EQUAL
5828: IFTRUE 5832
5830: GO 5941
5832: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5833: LD_ADDR_VAR 0 2
5837: PUSH
5838: LD_INT 9
5840: PUSH
5841: LD_INT 12
5843: PUSH
5844: LD_INT 15
5846: PUSH
5847: LD_INT 18
5849: PUSH
5850: LD_INT 21
5852: PUSH
5853: LD_INT 24
5855: PUSH
5856: LD_INT 27
5858: PUSH
5859: LD_INT 30
5861: PUSH
5862: LD_INT 33
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_VAR 0 1
5880: PUSH
5881: LD_INT 10
5883: DIV
5884: ARRAY
5885: PPUSH
5886: LD_INT 2
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 4
5894: PUSH
5895: LD_INT 5
5897: PUSH
5898: LD_INT 6
5900: PUSH
5901: LD_INT 7
5903: PUSH
5904: LD_INT 8
5906: PUSH
5907: LD_INT 9
5909: PUSH
5910: LD_INT 10
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: LD_INT 10
5931: DIV
5932: ARRAY
5933: PPUSH
5934: CALL 8241 0 2
5938: ST_TO_ADDR
5939: GO 6492
5941: LD_INT 19
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5997
5947: LD_INT 29
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5997
5953: LD_INT 39
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5997
5959: LD_INT 49
5961: DOUBLE
5962: EQUAL
5963: IFTRUE 5997
5965: LD_INT 59
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5997
5971: LD_INT 69
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5997
5977: LD_INT 79
5979: DOUBLE
5980: EQUAL
5981: IFTRUE 5997
5983: LD_INT 89
5985: DOUBLE
5986: EQUAL
5987: IFTRUE 5997
5989: LD_INT 99
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6208
5997: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: LD_INT 10
6011: PUSH
6012: LD_INT 13
6014: PUSH
6015: LD_INT 14
6017: PUSH
6018: LD_INT 17
6020: PUSH
6021: LD_INT 19
6023: PUSH
6024: LD_INT 21
6026: PUSH
6027: LD_INT 23
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 10
6048: DIV
6049: ARRAY
6050: PPUSH
6051: LD_INT 2
6053: PUSH
6054: LD_INT 3
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 5
6062: PUSH
6063: LD_INT 6
6065: PUSH
6066: LD_INT 7
6068: PUSH
6069: LD_INT 8
6071: PUSH
6072: LD_INT 9
6074: PUSH
6075: LD_INT 10
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_VAR 0 1
6093: PUSH
6094: LD_INT 10
6096: DIV
6097: ARRAY
6098: PPUSH
6099: CALL 8241 0 2
6103: PUSH
6104: LD_INT 4
6106: PUSH
6107: LD_INT 7
6109: PUSH
6110: LD_INT 10
6112: PUSH
6113: LD_INT 13
6115: PUSH
6116: LD_INT 14
6118: PUSH
6119: LD_INT 17
6121: PUSH
6122: LD_INT 19
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 25
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PUSH
6142: LD_VAR 0 1
6146: PUSH
6147: LD_INT 10
6149: DIV
6150: ARRAY
6151: PPUSH
6152: LD_INT 2
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 4
6160: PUSH
6161: LD_INT 5
6163: PUSH
6164: LD_INT 6
6166: PUSH
6167: LD_INT 7
6169: PUSH
6170: LD_INT 8
6172: PUSH
6173: LD_INT 9
6175: PUSH
6176: LD_INT 10
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: LD_INT 10
6197: DIV
6198: ARRAY
6199: PPUSH
6200: CALL 7300 0 2
6204: ADD
6205: ST_TO_ADDR
6206: GO 6492
6208: LD_INT 20
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6264
6214: LD_INT 30
6216: DOUBLE
6217: EQUAL
6218: IFTRUE 6264
6220: LD_INT 40
6222: DOUBLE
6223: EQUAL
6224: IFTRUE 6264
6226: LD_INT 50
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6264
6232: LD_INT 60
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6264
6238: LD_INT 70
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6264
6244: LD_INT 80
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6264
6250: LD_INT 90
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6264
6256: LD_INT 100
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6491
6264: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 4
6272: PUSH
6273: LD_INT 7
6275: PUSH
6276: LD_INT 10
6278: PUSH
6279: LD_INT 13
6281: PUSH
6282: LD_INT 14
6284: PUSH
6285: LD_INT 17
6287: PUSH
6288: LD_INT 19
6290: PUSH
6291: LD_INT 21
6293: PUSH
6294: LD_INT 23
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_VAR 0 1
6312: PUSH
6313: LD_INT 10
6315: DIVREAL
6316: PUSH
6317: LD_INT 1
6319: MINUS
6320: ARRAY
6321: PPUSH
6322: LD_INT 2
6324: PUSH
6325: LD_INT 3
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 5
6333: PUSH
6334: LD_INT 6
6336: PUSH
6337: LD_INT 7
6339: PUSH
6340: LD_INT 8
6342: PUSH
6343: LD_INT 9
6345: PUSH
6346: LD_INT 10
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_VAR 0 1
6364: PUSH
6365: LD_INT 10
6367: DIVREAL
6368: PUSH
6369: LD_INT 1
6371: MINUS
6372: ARRAY
6373: PPUSH
6374: CALL 8140 0 2
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 7
6384: PUSH
6385: LD_INT 10
6387: PUSH
6388: LD_INT 13
6390: PUSH
6391: LD_INT 14
6393: PUSH
6394: LD_INT 17
6396: PUSH
6397: LD_INT 19
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_VAR 0 1
6421: PUSH
6422: LD_INT 10
6424: DIVREAL
6425: PUSH
6426: LD_INT 1
6428: MINUS
6429: ARRAY
6430: PPUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 7
6448: PUSH
6449: LD_INT 8
6451: PUSH
6452: LD_INT 9
6454: PUSH
6455: LD_INT 10
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: LD_INT 10
6476: DIVREAL
6477: PUSH
6478: LD_INT 1
6480: MINUS
6481: ARRAY
6482: PPUSH
6483: CALL 7720 0 2
6487: ADD
6488: ST_TO_ADDR
6489: GO 6492
6491: POP
// for i in result do
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: LD_VAR 0 2
6501: PUSH
6502: FOR_IN
6503: IFFALSE 6676
// begin a := rand ( 1 , 2 ) ;
6505: LD_ADDR_VAR 0 8
6509: PUSH
6510: LD_INT 1
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: CALL_OW 12
6520: ST_TO_ADDR
// if a = 1 then
6521: LD_VAR 0 8
6525: PUSH
6526: LD_INT 1
6528: EQUAL
6529: IFFALSE 6545
// SetDir ( i , 3 ) else
6531: LD_VAR 0 3
6535: PPUSH
6536: LD_INT 3
6538: PPUSH
6539: CALL_OW 233
6543: GO 6557
// SetDir ( i , 5 ) ;
6545: LD_VAR 0 3
6549: PPUSH
6550: LD_INT 5
6552: PPUSH
6553: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6557: LD_VAR 0 3
6561: PPUSH
6562: LD_VAR 0 7
6566: PUSH
6567: LD_VAR 0 8
6571: ARRAY
6572: PPUSH
6573: LD_INT 0
6575: PPUSH
6576: CALL_OW 49
// if GetControl ( i ) = control_manual then
6580: LD_VAR 0 3
6584: PPUSH
6585: CALL_OW 263
6589: PUSH
6590: LD_INT 1
6592: EQUAL
6593: IFFALSE 6639
// begin uc_nation := GetNation ( i ) ;
6595: LD_ADDR_OWVAR 21
6599: PUSH
6600: LD_VAR 0 3
6604: PPUSH
6605: CALL_OW 248
6609: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6610: LD_INT 0
6612: PPUSH
6613: LD_INT 3
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6625: CALL_OW 44
6629: PPUSH
6630: LD_VAR 0 3
6634: PPUSH
6635: CALL_OW 52
// end ; l := l + 1 ;
6639: LD_ADDR_VAR 0 9
6643: PUSH
6644: LD_VAR 0 9
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: ST_TO_ADDR
// if l mod 10 = 0 then
6653: LD_VAR 0 9
6657: PUSH
6658: LD_INT 10
6660: MOD
6661: PUSH
6662: LD_INT 0
6664: EQUAL
6665: IFFALSE 6674
// Wait ( 0 0$02 ) ;
6667: LD_INT 70
6669: PPUSH
6670: CALL_OW 67
// end ;
6674: GO 6502
6676: POP
6677: POP
// end ;
6678: LD_VAR 0 2
6682: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
// uc_nation := nation_nature ;
6688: LD_ADDR_OWVAR 21
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// for i = 1 to n do
6696: LD_ADDR_VAR 0 4
6700: PUSH
6701: DOUBLE
6702: LD_INT 1
6704: DEC
6705: ST_TO_ADDR
6706: LD_VAR 0 1
6710: PUSH
6711: FOR_TO
6712: IFFALSE 6747
// begin PrepareHuman ( false , class_apeman , skill ) ;
6714: LD_INT 0
6716: PPUSH
6717: LD_INT 12
6719: PPUSH
6720: LD_VAR 0 2
6724: PPUSH
6725: CALL_OW 380
// result := result ^ CreateHuman ;
6729: LD_ADDR_VAR 0 3
6733: PUSH
6734: LD_VAR 0 3
6738: PUSH
6739: CALL_OW 44
6743: ADD
6744: ST_TO_ADDR
// end ;
6745: GO 6711
6747: POP
6748: POP
// end ;
6749: LD_VAR 0 3
6753: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
6758: PPUSH
// uc_nation := nation_nature ;
6759: LD_ADDR_OWVAR 21
6763: PUSH
6764: LD_INT 0
6766: ST_TO_ADDR
// for i = 1 to n do
6767: LD_ADDR_VAR 0 4
6771: PUSH
6772: DOUBLE
6773: LD_INT 1
6775: DEC
6776: ST_TO_ADDR
6777: LD_VAR 0 1
6781: PUSH
6782: FOR_TO
6783: IFFALSE 6818
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6785: LD_INT 0
6787: PPUSH
6788: LD_INT 15
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 380
// result := result ^ CreateHuman ;
6800: LD_ADDR_VAR 0 3
6804: PUSH
6805: LD_VAR 0 3
6809: PUSH
6810: CALL_OW 44
6814: ADD
6815: ST_TO_ADDR
// end ;
6816: GO 6782
6818: POP
6819: POP
// end ;
6820: LD_VAR 0 3
6824: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
6829: PPUSH
// for i = 1 to n do
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: DOUBLE
6836: LD_INT 1
6838: DEC
6839: ST_TO_ADDR
6840: LD_VAR 0 1
6844: PUSH
6845: FOR_TO
6846: IFFALSE 6897
// begin uc_nation := rand ( 1 , 3 ) ;
6848: LD_ADDR_OWVAR 21
6852: PUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 3
6858: PPUSH
6859: CALL_OW 12
6863: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6864: LD_INT 0
6866: PPUSH
6867: LD_INT 1
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 380
// result := result ^ CreateHuman ;
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: LD_VAR 0 3
6888: PUSH
6889: CALL_OW 44
6893: ADD
6894: ST_TO_ADDR
// end ;
6895: GO 6845
6897: POP
6898: POP
// end ;
6899: LD_VAR 0 3
6903: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
// for i = 1 to n do
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 1
6927: PUSH
6928: FOR_TO
6929: IFFALSE 7293
// begin uc_nation := rand ( 1 , 3 ) ;
6931: LD_ADDR_OWVAR 21
6935: PUSH
6936: LD_INT 1
6938: PPUSH
6939: LD_INT 3
6941: PPUSH
6942: CALL_OW 12
6946: ST_TO_ADDR
// case uc_nation of 1 :
6947: LD_OWVAR 21
6951: PUSH
6952: LD_INT 1
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7023
6960: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6961: LD_ADDR_VAR 0 6
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6976: LD_ADDR_VAR 0 7
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6991: LD_ADDR_VAR 0 8
6995: PUSH
6996: LD_INT 1
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7006: LD_ADDR_VAR 0 9
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; 2 :
7021: GO 7158
7023: LD_INT 2
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7094
7031: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: LD_INT 12
7039: PUSH
7040: LD_INT 11
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7047: LD_ADDR_VAR 0 7
7051: PUSH
7052: LD_INT 23
7054: PUSH
7055: LD_INT 24
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7062: LD_ADDR_VAR 0 8
7066: PUSH
7067: LD_INT 1
7069: PUSH
7070: LD_INT 5
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7077: LD_ADDR_VAR 0 9
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: LD_INT 2
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: ST_TO_ADDR
// end ; 3 :
7092: GO 7158
7094: LD_INT 3
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7157
7102: POP
// begin chassis := [ ru_medium_wheeled ] ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: EMPTY
7112: LIST
7113: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7114: LD_ADDR_VAR 0 7
7118: PUSH
7119: LD_INT 42
7121: PUSH
7122: LD_INT 44
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7129: LD_ADDR_VAR 0 8
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: LD_INT 3
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: LD_INT 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: ST_TO_ADDR
// end ; end ;
7155: GO 7158
7157: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7158: LD_ADDR_OWVAR 37
7162: PUSH
7163: LD_VAR 0 6
7167: PUSH
7168: LD_INT 1
7170: PPUSH
7171: LD_VAR 0 6
7175: PPUSH
7176: CALL_OW 12
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_VAR 0 9
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_VAR 0 9
7199: PPUSH
7200: CALL_OW 12
7204: ARRAY
7205: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7206: LD_ADDR_OWVAR 38
7210: PUSH
7211: LD_VAR 0 8
7215: PUSH
7216: LD_INT 1
7218: PPUSH
7219: LD_VAR 0 8
7223: PPUSH
7224: CALL_OW 12
7228: ARRAY
7229: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7230: LD_ADDR_OWVAR 40
7234: PUSH
7235: LD_VAR 0 7
7239: PUSH
7240: LD_INT 1
7242: PPUSH
7243: LD_VAR 0 7
7247: PPUSH
7248: CALL_OW 12
7252: ARRAY
7253: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7254: LD_ADDR_OWVAR 41
7258: PUSH
7259: LD_INT 100
7261: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 1
7279: PLUS
7280: PPUSH
7281: CALL_OW 45
7285: PPUSH
7286: CALL_OW 2
7290: ST_TO_ADDR
// end ;
7291: GO 6928
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 3
7299: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
// for i = 1 to n do
7309: LD_ADDR_VAR 0 4
7313: PUSH
7314: DOUBLE
7315: LD_INT 1
7317: DEC
7318: ST_TO_ADDR
7319: LD_VAR 0 1
7323: PUSH
7324: FOR_TO
7325: IFFALSE 7713
// begin uc_nation := rand ( 1 , 3 ) ;
7327: LD_ADDR_OWVAR 21
7331: PUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 3
7337: PPUSH
7338: CALL_OW 12
7342: ST_TO_ADDR
// case uc_nation of 1 :
7343: LD_OWVAR 21
7347: PUSH
7348: LD_INT 1
7350: DOUBLE
7351: EQUAL
7352: IFTRUE 7356
7354: GO 7427
7356: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7357: LD_ADDR_VAR 0 6
7361: PUSH
7362: LD_INT 2
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7372: LD_ADDR_VAR 0 7
7376: PUSH
7377: LD_INT 4
7379: PUSH
7380: LD_INT 5
7382: PUSH
7383: LD_INT 9
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7391: LD_ADDR_VAR 0 8
7395: PUSH
7396: LD_INT 1
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 1
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// end ; 2 :
7425: GO 7578
7427: LD_INT 2
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7506
7435: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_INT 13
7443: PUSH
7444: LD_INT 14
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7451: LD_ADDR_VAR 0 7
7455: PUSH
7456: LD_INT 27
7458: PUSH
7459: LD_INT 26
7461: PUSH
7462: LD_INT 25
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7470: LD_ADDR_VAR 0 8
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: LD_INT 5
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7485: LD_ADDR_VAR 0 9
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
// end ; 3 :
7504: GO 7578
7506: LD_INT 3
7508: DOUBLE
7509: EQUAL
7510: IFTRUE 7514
7512: GO 7577
7514: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7515: LD_ADDR_VAR 0 6
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 21
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7530: LD_ADDR_VAR 0 7
7534: PUSH
7535: LD_INT 44
7537: PUSH
7538: LD_INT 43
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7545: LD_ADDR_VAR 0 8
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7560: LD_ADDR_VAR 0 9
7564: PUSH
7565: LD_INT 1
7567: PUSH
7568: LD_INT 3
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7578: LD_ADDR_OWVAR 37
7582: PUSH
7583: LD_VAR 0 6
7587: PUSH
7588: LD_INT 1
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 12
7600: ARRAY
7601: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7602: LD_ADDR_OWVAR 39
7606: PUSH
7607: LD_VAR 0 9
7611: PUSH
7612: LD_INT 1
7614: PPUSH
7615: LD_VAR 0 9
7619: PPUSH
7620: CALL_OW 12
7624: ARRAY
7625: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7626: LD_ADDR_OWVAR 38
7630: PUSH
7631: LD_VAR 0 8
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_VAR 0 8
7643: PPUSH
7644: CALL_OW 12
7648: ARRAY
7649: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7650: LD_ADDR_OWVAR 40
7654: PUSH
7655: LD_VAR 0 7
7659: PUSH
7660: LD_INT 1
7662: PPUSH
7663: LD_VAR 0 7
7667: PPUSH
7668: CALL_OW 12
7672: ARRAY
7673: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7674: LD_ADDR_OWVAR 41
7678: PUSH
7679: LD_INT 100
7681: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7682: LD_ADDR_VAR 0 3
7686: PUSH
7687: LD_VAR 0 3
7691: PPUSH
7692: LD_VAR 0 3
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: PPUSH
7701: CALL_OW 45
7705: PPUSH
7706: CALL_OW 2
7710: ST_TO_ADDR
// end ;
7711: GO 7324
7713: POP
7714: POP
// end ;
7715: LD_VAR 0 3
7719: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// for i = 1 to n do
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: DOUBLE
7735: LD_INT 1
7737: DEC
7738: ST_TO_ADDR
7739: LD_VAR 0 1
7743: PUSH
7744: FOR_TO
7745: IFFALSE 8133
// begin uc_nation := rand ( 1 , 3 ) ;
7747: LD_ADDR_OWVAR 21
7751: PUSH
7752: LD_INT 1
7754: PPUSH
7755: LD_INT 3
7757: PPUSH
7758: CALL_OW 12
7762: ST_TO_ADDR
// case uc_nation of 1 :
7763: LD_OWVAR 21
7767: PUSH
7768: LD_INT 1
7770: DOUBLE
7771: EQUAL
7772: IFTRUE 7776
7774: GO 7843
7776: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7777: LD_ADDR_VAR 0 6
7781: PUSH
7782: LD_INT 4
7784: PUSH
7785: LD_INT 5
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7792: LD_ADDR_VAR 0 7
7796: PUSH
7797: LD_INT 6
7799: PUSH
7800: LD_INT 7
7802: PUSH
7803: LD_INT 9
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7811: LD_ADDR_VAR 0 8
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7826: LD_ADDR_VAR 0 9
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: ST_TO_ADDR
// end ; 2 :
7841: GO 7998
7843: LD_INT 2
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 7926
7851: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7852: LD_ADDR_VAR 0 6
7856: PUSH
7857: LD_INT 13
7859: PUSH
7860: LD_INT 14
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7867: LD_ADDR_VAR 0 7
7871: PUSH
7872: LD_INT 27
7874: PUSH
7875: LD_INT 26
7877: PUSH
7878: LD_INT 28
7880: PUSH
7881: LD_INT 29
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7890: LD_ADDR_VAR 0 8
7894: PUSH
7895: LD_INT 1
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7905: LD_ADDR_VAR 0 9
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: ST_TO_ADDR
// end ; 3 :
7924: GO 7998
7926: LD_INT 3
7928: DOUBLE
7929: EQUAL
7930: IFTRUE 7934
7932: GO 7997
7934: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7950: LD_ADDR_VAR 0 7
7954: PUSH
7955: LD_INT 46
7957: PUSH
7958: LD_INT 45
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7965: LD_ADDR_VAR 0 8
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: LD_INT 3
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: ST_TO_ADDR
// end ; end ;
7995: GO 7998
7997: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7998: LD_ADDR_OWVAR 37
8002: PUSH
8003: LD_VAR 0 6
8007: PUSH
8008: LD_INT 1
8010: PPUSH
8011: LD_VAR 0 6
8015: PPUSH
8016: CALL_OW 12
8020: ARRAY
8021: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8022: LD_ADDR_OWVAR 39
8026: PUSH
8027: LD_VAR 0 9
8031: PUSH
8032: LD_INT 1
8034: PPUSH
8035: LD_VAR 0 9
8039: PPUSH
8040: CALL_OW 12
8044: ARRAY
8045: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8046: LD_ADDR_OWVAR 38
8050: PUSH
8051: LD_VAR 0 8
8055: PUSH
8056: LD_INT 1
8058: PPUSH
8059: LD_VAR 0 8
8063: PPUSH
8064: CALL_OW 12
8068: ARRAY
8069: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8070: LD_ADDR_OWVAR 40
8074: PUSH
8075: LD_VAR 0 7
8079: PUSH
8080: LD_INT 1
8082: PPUSH
8083: LD_VAR 0 7
8087: PPUSH
8088: CALL_OW 12
8092: ARRAY
8093: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8094: LD_ADDR_OWVAR 41
8098: PUSH
8099: LD_INT 100
8101: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8102: LD_ADDR_VAR 0 3
8106: PUSH
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 1
8119: PLUS
8120: PPUSH
8121: CALL_OW 45
8125: PPUSH
8126: CALL_OW 2
8130: ST_TO_ADDR
// end ;
8131: GO 7744
8133: POP
8134: POP
// end ;
8135: LD_VAR 0 3
8139: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
// for i = 1 to n do
8144: LD_ADDR_VAR 0 4
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_VAR 0 1
8158: PUSH
8159: FOR_TO
8160: IFFALSE 8234
// begin uc_nation := rand ( 1 , 3 ) ;
8162: LD_ADDR_OWVAR 21
8166: PUSH
8167: LD_INT 1
8169: PPUSH
8170: LD_INT 3
8172: PPUSH
8173: CALL_OW 12
8177: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8178: LD_INT 0
8180: PPUSH
8181: LD_INT 8
8183: PUSH
8184: LD_INT 9
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 1
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: CALL_OW 12
8205: ARRAY
8206: PPUSH
8207: LD_VAR 0 2
8211: PPUSH
8212: CALL_OW 380
// result := result ^ CreateHuman ;
8216: LD_ADDR_VAR 0 3
8220: PUSH
8221: LD_VAR 0 3
8225: PUSH
8226: CALL_OW 44
8230: ADD
8231: ST_TO_ADDR
// end ;
8232: GO 8159
8234: POP
8235: POP
// end ;
8236: LD_VAR 0 3
8240: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
8247: PPUSH
8248: PPUSH
8249: PPUSH
// for i = 1 to n do
8250: LD_ADDR_VAR 0 4
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_VAR 0 1
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8662
// begin uc_nation := rand ( 1 , 3 ) ;
8268: LD_ADDR_OWVAR 21
8272: PUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_INT 3
8278: PPUSH
8279: CALL_OW 12
8283: ST_TO_ADDR
// case uc_nation of 1 :
8284: LD_OWVAR 21
8288: PUSH
8289: LD_INT 1
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8370
8297: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8313: LD_ADDR_VAR 0 7
8317: PUSH
8318: LD_INT 6
8320: PUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 10
8326: PUSH
8327: LD_EXP 17
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8338: LD_ADDR_VAR 0 8
8342: PUSH
8343: LD_INT 1
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8353: LD_ADDR_VAR 0 9
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: LD_INT 3
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// end ; 2 :
8368: GO 8527
8370: LD_INT 2
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8451
8378: POP
// begin chassis := [ ar_half_tracked ] ;
8379: LD_ADDR_VAR 0 6
8383: PUSH
8384: LD_INT 14
8386: PUSH
8387: EMPTY
8388: LIST
8389: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8390: LD_ADDR_VAR 0 7
8394: PUSH
8395: LD_EXP 18
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 28
8405: PUSH
8406: LD_INT 29
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8415: LD_ADDR_VAR 0 8
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8430: LD_ADDR_VAR 0 9
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: ST_TO_ADDR
// end ; 3 :
8449: GO 8527
8451: LD_INT 3
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8526
8459: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8460: LD_ADDR_VAR 0 6
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 24
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8475: LD_ADDR_VAR 0 7
8479: PUSH
8480: LD_INT 46
8482: PUSH
8483: LD_INT 45
8485: PUSH
8486: LD_INT 49
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8494: LD_ADDR_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: LD_INT 3
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8509: LD_ADDR_VAR 0 9
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: ST_TO_ADDR
// end ; end ;
8524: GO 8527
8526: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8527: LD_ADDR_OWVAR 37
8531: PUSH
8532: LD_VAR 0 6
8536: PUSH
8537: LD_INT 1
8539: PPUSH
8540: LD_VAR 0 6
8544: PPUSH
8545: CALL_OW 12
8549: ARRAY
8550: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8551: LD_ADDR_OWVAR 39
8555: PUSH
8556: LD_VAR 0 9
8560: PUSH
8561: LD_INT 1
8563: PPUSH
8564: LD_VAR 0 9
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8575: LD_ADDR_OWVAR 38
8579: PUSH
8580: LD_VAR 0 8
8584: PUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_VAR 0 8
8592: PPUSH
8593: CALL_OW 12
8597: ARRAY
8598: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8599: LD_ADDR_OWVAR 40
8603: PUSH
8604: LD_VAR 0 7
8608: PUSH
8609: LD_INT 1
8611: PPUSH
8612: LD_VAR 0 7
8616: PPUSH
8617: CALL_OW 12
8621: ARRAY
8622: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8623: LD_ADDR_OWVAR 41
8627: PUSH
8628: LD_INT 100
8630: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_VAR 0 3
8640: PPUSH
8641: LD_VAR 0 3
8645: PUSH
8646: LD_INT 1
8648: PLUS
8649: PPUSH
8650: CALL_OW 45
8654: PPUSH
8655: CALL_OW 2
8659: ST_TO_ADDR
// end ;
8660: GO 8265
8662: POP
8663: POP
// end ; end_of_file
8664: LD_VAR 0 3
8668: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8669: LD_INT 22
8671: PUSH
8672: LD_INT 7
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: IFFALSE 9189
8685: GO 8687
8687: DISABLE
8688: LD_INT 0
8690: PPUSH
8691: PPUSH
8692: PPUSH
// begin enable ;
8693: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8694: LD_ADDR_VAR 0 3
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 7
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 69
8713: ST_TO_ADDR
// for i in tmp do
8714: LD_ADDR_VAR 0 1
8718: PUSH
8719: LD_VAR 0 3
8723: PUSH
8724: FOR_IN
8725: IFFALSE 9187
// begin case GetType ( i ) of unit_human :
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 247
8736: PUSH
8737: LD_INT 1
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8944
8745: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 256
8755: PUSH
8756: LD_INT 250
8758: LESS
8759: PUSH
8760: LD_INT 5
8762: PPUSH
8763: LD_INT 7
8765: PPUSH
8766: CALL_OW 321
8770: PUSH
8771: LD_INT 2
8773: NONEQUAL
8774: AND
8775: IFFALSE 8779
// continue ;
8777: GO 8724
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 257
8788: PUSH
8789: LD_INT 12
8791: PUSH
8792: LD_INT 15
8794: PUSH
8795: LD_INT 16
8797: PUSH
8798: LD_INT 17
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 8
8815: PUSH
8816: LD_INT 9
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: IN
8831: IFFALSE 8869
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_INT 22
8840: PUSH
8841: LD_OWVAR 2
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: PPUSH
8855: LD_VAR 0 1
8859: PPUSH
8860: CALL_OW 74
8864: PPUSH
8865: CALL_OW 115
// if GetClass ( i ) = 3 then
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 257
8878: PUSH
8879: LD_INT 3
8881: EQUAL
8882: IFFALSE 8942
// if IsInUnit ( i ) then
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 310
8893: IFFALSE 8933
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8895: LD_VAR 0 1
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_OWVAR 2
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PPUSH
8917: LD_VAR 0 1
8921: PPUSH
8922: CALL_OW 74
8926: PPUSH
8927: CALL_OW 115
8931: GO 8942
// ComEspace ( i ) ;
8933: LD_VAR 0 1
8937: PPUSH
8938: CALL 1933 0 1
// end ; unit_vehicle :
8942: GO 9185
8944: LD_INT 2
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 9184
8952: POP
// begin if GetLives ( i ) > 250 then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 256
8962: PUSH
8963: LD_INT 250
8965: GREATER
8966: IFFALSE 9182
// begin if GetWeapon ( i ) = us_artillery then
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 264
8977: PUSH
8978: LD_EXP 17
8982: EQUAL
8983: IFFALSE 9051
// begin if IsInArea ( i , zoneOut ) then
8985: LD_VAR 0 1
8989: PPUSH
8990: LD_INT 4
8992: PPUSH
8993: CALL_OW 308
8997: IFFALSE 9013
// ComMoveToArea ( i , zoneBorder ) else
8999: LD_VAR 0 1
9003: PPUSH
9004: LD_INT 9
9006: PPUSH
9007: CALL_OW 113
9011: GO 9049
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_INT 22
9020: PUSH
9021: LD_OWVAR 2
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 1
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end else
9049: GO 9182
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 264
9060: PUSH
9061: LD_INT 11
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_EXP 14
9071: PUSH
9072: LD_INT 49
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: IN
9081: IFFALSE 9111
// begin if IsInArea ( i , zoneOut ) then
9083: LD_VAR 0 1
9087: PPUSH
9088: LD_INT 4
9090: PPUSH
9091: CALL_OW 308
9095: IFFALSE 9109
// ComSpecMove ( i , specPos ) ;
9097: LD_VAR 0 1
9101: PPUSH
9102: LD_INT 8
9104: PPUSH
9105: CALL 1979 0 2
// end else
9109: GO 9182
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 264
9120: PUSH
9121: LD_EXP 18
9125: PUSH
9126: LD_INT 29
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: IN
9133: IFFALSE 9146
// ComSpecAttack ( i ) else
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL 2407 0 1
9144: GO 9182
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9146: LD_VAR 0 1
9150: PPUSH
9151: LD_INT 22
9153: PUSH
9154: LD_OWVAR 2
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: PPUSH
9178: CALL_OW 115
// end ; end ; end ;
9182: GO 9185
9184: POP
// end ;
9185: GO 8724
9187: POP
9188: POP
// end ; end_of_file
9189: PPOPN 3
9191: END
// export function InitDisplay ; begin
9192: LD_INT 0
9194: PPUSH
// while true do
9195: LD_INT 1
9197: IFFALSE 9284
// begin if waveNumber < 100 then
9199: LD_EXP 5
9203: PUSH
9204: LD_INT 100
9206: LESS
9207: IFFALSE 9258
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9209: LD_ADDR_OWVAR 47
9213: PUSH
9214: LD_STRING #Tick
9216: PUSH
9217: LD_OWVAR 1
9221: PUSH
9222: LD_STRING #Points
9224: PUSH
9225: LD_EXP 2
9229: PUSH
9230: LD_STRING #Attack
9232: PUSH
9233: LD_EXP 4
9237: PUSH
9238: LD_STRING #Wave
9240: PUSH
9241: LD_EXP 5
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
9256: GO 9275
// Display_Strings := [ #Win , points ] ;
9258: LD_ADDR_OWVAR 47
9262: PUSH
9263: LD_STRING #Win
9265: PUSH
9266: LD_EXP 2
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9275: LD_INT 35
9277: PPUSH
9278: CALL_OW 67
// end ;
9282: GO 9195
// end ; end_of_file
9284: LD_VAR 0 1
9288: RET
// export function InitBonus ; var i , chance ; begin
9289: LD_INT 0
9291: PPUSH
9292: PPUSH
9293: PPUSH
// chance := rand ( 1 , 99 ) ;
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: LD_INT 1
9301: PPUSH
9302: LD_INT 99
9304: PPUSH
9305: CALL_OW 12
9309: ST_TO_ADDR
// case chance of 1 .. 10 :
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 1
9317: DOUBLE
9318: GREATEREQUAL
9319: IFFALSE 9327
9321: LD_INT 10
9323: DOUBLE
9324: LESSEQUAL
9325: IFTRUE 9329
9327: GO 9340
9329: POP
// i := 5 ; 11 .. 25 :
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_INT 5
9337: ST_TO_ADDR
9338: GO 9441
9340: LD_INT 11
9342: DOUBLE
9343: GREATEREQUAL
9344: IFFALSE 9352
9346: LD_INT 25
9348: DOUBLE
9349: LESSEQUAL
9350: IFTRUE 9354
9352: GO 9365
9354: POP
// i := 3 ; 26 .. 40 :
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: LD_INT 3
9362: ST_TO_ADDR
9363: GO 9441
9365: LD_INT 26
9367: DOUBLE
9368: GREATEREQUAL
9369: IFFALSE 9377
9371: LD_INT 40
9373: DOUBLE
9374: LESSEQUAL
9375: IFTRUE 9379
9377: GO 9390
9379: POP
// i := 2 ; 41 .. 60 :
9380: LD_ADDR_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ST_TO_ADDR
9388: GO 9441
9390: LD_INT 41
9392: DOUBLE
9393: GREATEREQUAL
9394: IFFALSE 9402
9396: LD_INT 60
9398: DOUBLE
9399: LESSEQUAL
9400: IFTRUE 9404
9402: GO 9415
9404: POP
// i := 4 ; 61 .. 99 :
9405: LD_ADDR_VAR 0 2
9409: PUSH
9410: LD_INT 4
9412: ST_TO_ADDR
9413: GO 9441
9415: LD_INT 61
9417: DOUBLE
9418: GREATEREQUAL
9419: IFFALSE 9427
9421: LD_INT 99
9423: DOUBLE
9424: LESSEQUAL
9425: IFTRUE 9429
9427: GO 9440
9429: POP
// i := 1 ; end ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
9438: GO 9441
9440: POP
// case i of 1 :
9441: LD_VAR 0 2
9445: PUSH
9446: LD_INT 1
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9543
9454: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9455: LD_INT 22
9457: PUSH
9458: LD_OWVAR 2
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 25
9472: PUSH
9473: LD_INT 12
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 25
9482: PUSH
9483: LD_INT 16
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 25
9492: PUSH
9493: LD_INT 15
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 25
9502: PUSH
9503: LD_INT 17
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 69
9525: PUSH
9526: LD_INT 10
9528: GREATEREQUAL
9529: IFFALSE 9537
// BonusIV else
9531: CALL 10116 0 0
9535: GO 9541
// BonusI ;
9537: CALL 9621 0 0
// end ; 2 :
9541: GO 9616
9543: LD_INT 2
9545: DOUBLE
9546: EQUAL
9547: IFTRUE 9551
9549: GO 9558
9551: POP
// begin BonusII ;
9552: CALL 9794 0 0
// end ; 3 :
9556: GO 9616
9558: LD_INT 3
9560: DOUBLE
9561: EQUAL
9562: IFTRUE 9566
9564: GO 9573
9566: POP
// begin BonusIII ;
9567: CALL 9942 0 0
// end ; 4 :
9571: GO 9616
9573: LD_INT 4
9575: DOUBLE
9576: EQUAL
9577: IFTRUE 9581
9579: GO 9588
9581: POP
// begin BonusIV ;
9582: CALL 10116 0 0
// end ; 5 :
9586: GO 9616
9588: LD_INT 5
9590: DOUBLE
9591: EQUAL
9592: IFTRUE 9596
9594: GO 9615
9596: POP
// begin if graveyard then
9597: LD_EXP 8
9601: IFFALSE 9609
// BonusV else
9603: CALL 10534 0 0
9607: GO 9613
// BonusIII ;
9609: CALL 9942 0 0
// end ; end ;
9613: GO 9616
9615: POP
// end ;
9616: LD_VAR 0 1
9620: RET
// export function BonusI ; var i ; begin
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
// case Query ( AddGift1 ) of 1 :
9625: LD_STRING AddGift1
9627: PPUSH
9628: CALL_OW 97
9632: PUSH
9633: LD_INT 1
9635: DOUBLE
9636: EQUAL
9637: IFTRUE 9641
9639: GO 9720
9641: POP
// begin for i = 1 to 3 do
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: DOUBLE
9648: LD_INT 1
9650: DEC
9651: ST_TO_ADDR
9652: LD_INT 3
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9716
// begin uc_side := your_side ;
9658: LD_ADDR_OWVAR 20
9662: PUSH
9663: LD_OWVAR 2
9667: ST_TO_ADDR
// uc_nation := 0 ;
9668: LD_ADDR_OWVAR 21
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9676: LD_INT 0
9678: PPUSH
9679: LD_INT 12
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9689: CALL_OW 44
9693: PPUSH
9694: LD_EXP 9
9698: PPUSH
9699: LD_EXP 10
9703: PPUSH
9704: LD_INT 15
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 50
// end ;
9714: GO 9655
9716: POP
9717: POP
// end ; 2 :
9718: GO 9789
9720: LD_INT 2
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9770
9728: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9729: LD_EXP 11
9733: PPUSH
9734: CALL_OW 274
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: LD_EXP 11
9746: PPUSH
9747: CALL_OW 274
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 275
9759: PUSH
9760: LD_INT 100
9762: PLUS
9763: PPUSH
9764: CALL_OW 277
// end ; 3 :
9768: GO 9789
9770: LD_INT 3
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 9788
9778: POP
// begin SetTeamExp ( 2 ) ;
9779: LD_INT 2
9781: PPUSH
9782: CALL 940 0 1
// end ; end ;
9786: GO 9789
9788: POP
// end ;
9789: LD_VAR 0 1
9793: RET
// export function BonusII ; var i ; begin
9794: LD_INT 0
9796: PPUSH
9797: PPUSH
// case Query ( AddGift2 ) of 1 :
9798: LD_STRING AddGift2
9800: PPUSH
9801: CALL_OW 97
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9856
9814: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9815: LD_EXP 11
9819: PPUSH
9820: CALL_OW 274
9824: PPUSH
9825: LD_INT 1
9827: PPUSH
9828: LD_EXP 11
9832: PPUSH
9833: CALL_OW 274
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 275
9845: PUSH
9846: LD_INT 500
9848: PLUS
9849: PPUSH
9850: CALL_OW 277
// end ; 2 :
9854: GO 9937
9856: LD_INT 2
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9874
9864: POP
// begin SetTeamExp ( 3 ) ;
9865: LD_INT 3
9867: PPUSH
9868: CALL 940 0 1
// end ; 3 :
9872: GO 9937
9874: LD_INT 3
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 9936
9882: POP
// begin uc_side = your_side ;
9883: LD_ADDR_OWVAR 20
9887: PUSH
9888: LD_OWVAR 2
9892: ST_TO_ADDR
// uc_nation = nation_russian ;
9893: LD_ADDR_OWVAR 21
9897: PUSH
9898: LD_INT 3
9900: ST_TO_ADDR
// vc_chassis = 25 ;
9901: LD_ADDR_OWVAR 37
9905: PUSH
9906: LD_INT 25
9908: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9909: CALL_OW 45
9913: PPUSH
9914: LD_EXP 9
9918: PPUSH
9919: LD_EXP 10
9923: PPUSH
9924: LD_INT 15
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 50
// end ; end ;
9934: GO 9937
9936: POP
// end ;
9937: LD_VAR 0 1
9941: RET
// export function BonusIII ; var i ; begin
9942: LD_INT 0
9944: PPUSH
9945: PPUSH
// case Query ( AddGift3 ) of 1 :
9946: LD_STRING AddGift3
9948: PPUSH
9949: CALL_OW 97
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 10004
9962: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9963: LD_EXP 11
9967: PPUSH
9968: CALL_OW 274
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_EXP 11
9980: PPUSH
9981: CALL_OW 274
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 275
9993: PUSH
9994: LD_INT 1000
9996: PLUS
9997: PPUSH
9998: CALL_OW 277
// end ; 2 :
10002: GO 10111
10004: LD_INT 2
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10024
10012: POP
// begin PrepareGuards ( waveNumber ) ;
10013: LD_EXP 5
10017: PPUSH
10018: CALL 1086 0 1
// end ; 3 :
10022: GO 10111
10024: LD_INT 3
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10110
10032: POP
// begin uc_side = your_side ;
10033: LD_ADDR_OWVAR 20
10037: PUSH
10038: LD_OWVAR 2
10042: ST_TO_ADDR
// uc_nation = nation_american ;
10043: LD_ADDR_OWVAR 21
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// vc_chassis = us_morphling ;
10051: LD_ADDR_OWVAR 37
10055: PUSH
10056: LD_INT 5
10058: ST_TO_ADDR
// vc_engine := engine_siberite ;
10059: LD_ADDR_OWVAR 39
10063: PUSH
10064: LD_INT 3
10066: ST_TO_ADDR
// vc_control := control_computer ;
10067: LD_ADDR_OWVAR 38
10071: PUSH
10072: LD_INT 3
10074: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10075: LD_ADDR_OWVAR 40
10079: PUSH
10080: LD_INT 8
10082: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10083: CALL_OW 45
10087: PPUSH
10088: LD_EXP 9
10092: PPUSH
10093: LD_EXP 10
10097: PPUSH
10098: LD_INT 15
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 50
// end ; end ;
10108: GO 10111
10110: POP
// end ;
10111: LD_VAR 0 1
10115: RET
// export function BonusIV ; var i ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
// case Query ( AddGift4 ) of 1 :
10120: LD_STRING AddGift4
10122: PPUSH
10123: CALL_OW 97
10127: PUSH
10128: LD_INT 1
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 10460
10136: POP
// begin i := rand ( 1 , 3 ) ;
10137: LD_ADDR_VAR 0 2
10141: PUSH
10142: LD_INT 1
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: CALL_OW 12
10152: ST_TO_ADDR
// uc_side := your_side ;
10153: LD_ADDR_OWVAR 20
10157: PUSH
10158: LD_OWVAR 2
10162: ST_TO_ADDR
// case i of 1 :
10163: LD_VAR 0 2
10167: PUSH
10168: LD_INT 1
10170: DOUBLE
10171: EQUAL
10172: IFTRUE 10176
10174: GO 10263
10176: POP
// begin uc_nation := nation_arabian ;
10177: LD_ADDR_OWVAR 21
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10185: LD_ADDR_OWVAR 37
10189: PUSH
10190: LD_INT 14
10192: ST_TO_ADDR
// vc_engine := engine_combustion ;
10193: LD_ADDR_OWVAR 39
10197: PUSH
10198: LD_INT 1
10200: ST_TO_ADDR
// vc_control := control_manual ;
10201: LD_ADDR_OWVAR 38
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10209: LD_ADDR_OWVAR 40
10213: PUSH
10214: LD_INT 27
10216: PUSH
10217: LD_INT 28
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 1
10226: PPUSH
10227: LD_INT 2
10229: PPUSH
10230: CALL_OW 12
10234: ARRAY
10235: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10236: CALL_OW 45
10240: PPUSH
10241: LD_EXP 9
10245: PPUSH
10246: LD_EXP 10
10250: PPUSH
10251: LD_INT 15
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 50
// end ; 2 :
10261: GO 10458
10263: LD_INT 2
10265: DOUBLE
10266: EQUAL
10267: IFTRUE 10271
10269: GO 10362
10271: POP
// begin uc_nation := nation_american ;
10272: LD_ADDR_OWVAR 21
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// vc_chassis := us_morphling ;
10280: LD_ADDR_OWVAR 37
10284: PUSH
10285: LD_INT 5
10287: ST_TO_ADDR
// vc_engine := engine_siberite ;
10288: LD_ADDR_OWVAR 39
10292: PUSH
10293: LD_INT 3
10295: ST_TO_ADDR
// vc_control := control_computer ;
10296: LD_ADDR_OWVAR 38
10300: PUSH
10301: LD_INT 3
10303: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10304: LD_ADDR_OWVAR 40
10308: PUSH
10309: LD_INT 12
10311: PUSH
10312: LD_INT 10
10314: PUSH
10315: LD_INT 7
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_INT 3
10328: PPUSH
10329: CALL_OW 12
10333: ARRAY
10334: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10335: CALL_OW 45
10339: PPUSH
10340: LD_EXP 9
10344: PPUSH
10345: LD_EXP 10
10349: PPUSH
10350: LD_INT 15
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 50
// end ; 3 :
10360: GO 10458
10362: LD_INT 3
10364: DOUBLE
10365: EQUAL
10366: IFTRUE 10370
10368: GO 10457
10370: POP
// begin uc_nation := nation_russian ;
10371: LD_ADDR_OWVAR 21
10375: PUSH
10376: LD_INT 3
10378: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10379: LD_ADDR_OWVAR 37
10383: PUSH
10384: LD_INT 22
10386: ST_TO_ADDR
// vc_engine := engine_combustion ;
10387: LD_ADDR_OWVAR 39
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// vc_control := control_manual ;
10395: LD_ADDR_OWVAR 38
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10403: LD_ADDR_OWVAR 40
10407: PUSH
10408: LD_INT 45
10410: PUSH
10411: LD_INT 44
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 1
10420: PPUSH
10421: LD_INT 2
10423: PPUSH
10424: CALL_OW 12
10428: ARRAY
10429: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10430: CALL_OW 45
10434: PPUSH
10435: LD_EXP 9
10439: PPUSH
10440: LD_EXP 10
10444: PPUSH
10445: LD_INT 15
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 50
// end ; end ;
10455: GO 10458
10457: POP
// end ; 2 :
10458: GO 10529
10460: LD_INT 2
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10510
10468: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10469: LD_EXP 11
10473: PPUSH
10474: CALL_OW 274
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: LD_EXP 11
10486: PPUSH
10487: CALL_OW 274
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 275
10499: PUSH
10500: LD_INT 100
10502: PLUS
10503: PPUSH
10504: CALL_OW 277
// end ; 3 :
10508: GO 10529
10510: LD_INT 3
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10528
10518: POP
// begin SetTeamExp ( 2 ) ;
10519: LD_INT 2
10521: PPUSH
10522: CALL 940 0 1
// end ; end ;
10526: GO 10529
10528: POP
// end ;
10529: LD_VAR 0 1
10533: RET
// export function BonusV ; var i , j ; begin
10534: LD_INT 0
10536: PPUSH
10537: PPUSH
10538: PPUSH
// case Query ( AddGift5 ) of 1 :
10539: LD_STRING AddGift5
10541: PPUSH
10542: CALL_OW 97
10546: PUSH
10547: LD_INT 1
10549: DOUBLE
10550: EQUAL
10551: IFTRUE 10555
10553: GO 10899
10555: POP
// begin for j = 1 to 3 do
10556: LD_ADDR_VAR 0 3
10560: PUSH
10561: DOUBLE
10562: LD_INT 1
10564: DEC
10565: ST_TO_ADDR
10566: LD_INT 3
10568: PUSH
10569: FOR_TO
10570: IFFALSE 10895
// begin i := rand ( 1 , 3 ) ;
10572: LD_ADDR_VAR 0 2
10576: PUSH
10577: LD_INT 1
10579: PPUSH
10580: LD_INT 3
10582: PPUSH
10583: CALL_OW 12
10587: ST_TO_ADDR
// uc_side := your_side ;
10588: LD_ADDR_OWVAR 20
10592: PUSH
10593: LD_OWVAR 2
10597: ST_TO_ADDR
// case i of 1 :
10598: LD_VAR 0 2
10602: PUSH
10603: LD_INT 1
10605: DOUBLE
10606: EQUAL
10607: IFTRUE 10611
10609: GO 10698
10611: POP
// begin uc_nation := nation_arabian ;
10612: LD_ADDR_OWVAR 21
10616: PUSH
10617: LD_INT 2
10619: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10620: LD_ADDR_OWVAR 37
10624: PUSH
10625: LD_INT 14
10627: ST_TO_ADDR
// vc_engine := engine_combustion ;
10628: LD_ADDR_OWVAR 39
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// vc_control := control_manual ;
10636: LD_ADDR_OWVAR 38
10640: PUSH
10641: LD_INT 1
10643: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10644: LD_ADDR_OWVAR 40
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: LD_INT 28
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 2
10664: PPUSH
10665: CALL_OW 12
10669: ARRAY
10670: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10671: CALL_OW 45
10675: PPUSH
10676: LD_EXP 9
10680: PPUSH
10681: LD_EXP 10
10685: PPUSH
10686: LD_INT 15
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 50
// end ; 2 :
10696: GO 10893
10698: LD_INT 2
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10797
10706: POP
// begin uc_nation := nation_american ;
10707: LD_ADDR_OWVAR 21
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
// vc_chassis := us_morphling ;
10715: LD_ADDR_OWVAR 37
10719: PUSH
10720: LD_INT 5
10722: ST_TO_ADDR
// vc_engine := engine_siberite ;
10723: LD_ADDR_OWVAR 39
10727: PUSH
10728: LD_INT 3
10730: ST_TO_ADDR
// vc_control := control_computer ;
10731: LD_ADDR_OWVAR 38
10735: PUSH
10736: LD_INT 3
10738: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10739: LD_ADDR_OWVAR 40
10743: PUSH
10744: LD_INT 12
10746: PUSH
10747: LD_INT 11
10749: PUSH
10750: LD_INT 7
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 1
10760: PPUSH
10761: LD_INT 3
10763: PPUSH
10764: CALL_OW 12
10768: ARRAY
10769: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10770: CALL_OW 45
10774: PPUSH
10775: LD_EXP 9
10779: PPUSH
10780: LD_EXP 10
10784: PPUSH
10785: LD_INT 15
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 50
// end ; 3 :
10795: GO 10893
10797: LD_INT 3
10799: DOUBLE
10800: EQUAL
10801: IFTRUE 10805
10803: GO 10892
10805: POP
// begin uc_nation := nation_russian ;
10806: LD_ADDR_OWVAR 21
10810: PUSH
10811: LD_INT 3
10813: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10814: LD_ADDR_OWVAR 37
10818: PUSH
10819: LD_INT 22
10821: ST_TO_ADDR
// vc_engine := engine_combustion ;
10822: LD_ADDR_OWVAR 39
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// vc_control := control_manual ;
10830: LD_ADDR_OWVAR 38
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10838: LD_ADDR_OWVAR 40
10842: PUSH
10843: LD_INT 45
10845: PUSH
10846: LD_INT 44
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 1
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: CALL_OW 12
10863: ARRAY
10864: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10865: CALL_OW 45
10869: PPUSH
10870: LD_EXP 9
10874: PPUSH
10875: LD_EXP 10
10879: PPUSH
10880: LD_INT 15
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 50
// end ; end ;
10890: GO 10893
10892: POP
// end ;
10893: GO 10569
10895: POP
10896: POP
// end ; 2 :
10897: GO 10965
10899: LD_INT 2
10901: DOUBLE
10902: EQUAL
10903: IFTRUE 10907
10905: GO 10949
10907: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10908: LD_EXP 11
10912: PPUSH
10913: CALL_OW 274
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: LD_EXP 11
10925: PPUSH
10926: CALL_OW 274
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 275
10938: PUSH
10939: LD_INT 500
10941: PLUS
10942: PPUSH
10943: CALL_OW 277
// end ; 3 :
10947: GO 10965
10949: LD_INT 3
10951: DOUBLE
10952: EQUAL
10953: IFTRUE 10957
10955: GO 10964
10957: POP
// begin GetBack ( ) ;
10958: CALL 1746 0 0
// end ; end ;
10962: GO 10965
10964: POP
// end ; end_of_file
10965: LD_VAR 0 1
10969: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10970: LD_INT 0
10972: PPUSH
// ar_miner := 81 ;
10973: LD_ADDR_EXP 21
10977: PUSH
10978: LD_INT 81
10980: ST_TO_ADDR
// ar_crane := 88 ;
10981: LD_ADDR_EXP 20
10985: PUSH
10986: LD_INT 88
10988: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10989: LD_ADDR_EXP 15
10993: PUSH
10994: LD_INT 89
10996: ST_TO_ADDR
// us_hack := 99 ;
10997: LD_ADDR_EXP 16
11001: PUSH
11002: LD_INT 99
11004: ST_TO_ADDR
// us_artillery := 97 ;
11005: LD_ADDR_EXP 17
11009: PUSH
11010: LD_INT 97
11012: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11013: LD_ADDR_EXP 18
11017: PUSH
11018: LD_INT 91
11020: ST_TO_ADDR
// ar_mortar := 92 ;
11021: LD_ADDR_EXP 19
11025: PUSH
11026: LD_INT 92
11028: ST_TO_ADDR
// ru_radar := 98 ;
11029: LD_ADDR_EXP 14
11033: PUSH
11034: LD_INT 98
11036: ST_TO_ADDR
// tech_Artillery := 80 ;
11037: LD_ADDR_EXP 22
11041: PUSH
11042: LD_INT 80
11044: ST_TO_ADDR
// tech_RadMat := 81 ;
11045: LD_ADDR_EXP 23
11049: PUSH
11050: LD_INT 81
11052: ST_TO_ADDR
// tech_BasicTools := 82 ;
11053: LD_ADDR_EXP 24
11057: PUSH
11058: LD_INT 82
11060: ST_TO_ADDR
// tech_Cargo := 83 ;
11061: LD_ADDR_EXP 25
11065: PUSH
11066: LD_INT 83
11068: ST_TO_ADDR
// tech_Track := 84 ;
11069: LD_ADDR_EXP 26
11073: PUSH
11074: LD_INT 84
11076: ST_TO_ADDR
// tech_Crane := 85 ;
11077: LD_ADDR_EXP 27
11081: PUSH
11082: LD_INT 85
11084: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11085: LD_ADDR_EXP 28
11089: PUSH
11090: LD_INT 86
11092: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11093: LD_ADDR_EXP 29
11097: PUSH
11098: LD_INT 87
11100: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11101: LD_ADDR_EXP 30
11105: PUSH
11106: LD_INT 88
11108: ST_TO_ADDR
// class_mastodont := 31 ;
11109: LD_ADDR_EXP 31
11113: PUSH
11114: LD_INT 31
11116: ST_TO_ADDR
// class_horse := 21 ;
11117: LD_ADDR_EXP 32
11121: PUSH
11122: LD_INT 21
11124: ST_TO_ADDR
// end ;
11125: LD_VAR 0 1
11129: RET
// every 1 do
11130: GO 11132
11132: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11133: CALL 10970 0 0
11137: END
// every 0 0$1 do
11138: GO 11140
11140: DISABLE
// begin enable ;
11141: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11142: LD_STRING updateTimer(
11144: PUSH
11145: LD_OWVAR 1
11149: STR
11150: PUSH
11151: LD_STRING );
11153: STR
11154: PPUSH
11155: CALL_OW 559
// end ;
11159: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11160: LD_INT 0
11162: PPUSH
// if p2 = 100 then
11163: LD_VAR 0 2
11167: PUSH
11168: LD_INT 100
11170: EQUAL
11171: IFFALSE 12174
// begin if not StreamModeActive then
11173: LD_EXP 33
11177: NOT
11178: IFFALSE 11188
// StreamModeActive := true ;
11180: LD_ADDR_EXP 33
11184: PUSH
11185: LD_INT 1
11187: ST_TO_ADDR
// if p3 = 0 then
11188: LD_VAR 0 3
11192: PUSH
11193: LD_INT 0
11195: EQUAL
11196: IFFALSE 11202
// InitStreamMode ;
11198: CALL 12334 0 0
// if p3 = 1 then
11202: LD_VAR 0 3
11206: PUSH
11207: LD_INT 1
11209: EQUAL
11210: IFFALSE 11220
// sRocket := true ;
11212: LD_ADDR_EXP 38
11216: PUSH
11217: LD_INT 1
11219: ST_TO_ADDR
// if p3 = 2 then
11220: LD_VAR 0 3
11224: PUSH
11225: LD_INT 2
11227: EQUAL
11228: IFFALSE 11238
// sSpeed := true ;
11230: LD_ADDR_EXP 37
11234: PUSH
11235: LD_INT 1
11237: ST_TO_ADDR
// if p3 = 3 then
11238: LD_VAR 0 3
11242: PUSH
11243: LD_INT 3
11245: EQUAL
11246: IFFALSE 11256
// sEngine := true ;
11248: LD_ADDR_EXP 39
11252: PUSH
11253: LD_INT 1
11255: ST_TO_ADDR
// if p3 = 4 then
11256: LD_VAR 0 3
11260: PUSH
11261: LD_INT 4
11263: EQUAL
11264: IFFALSE 11274
// sSpec := true ;
11266: LD_ADDR_EXP 36
11270: PUSH
11271: LD_INT 1
11273: ST_TO_ADDR
// if p3 = 5 then
11274: LD_VAR 0 3
11278: PUSH
11279: LD_INT 5
11281: EQUAL
11282: IFFALSE 11292
// sLevel := true ;
11284: LD_ADDR_EXP 40
11288: PUSH
11289: LD_INT 1
11291: ST_TO_ADDR
// if p3 = 6 then
11292: LD_VAR 0 3
11296: PUSH
11297: LD_INT 6
11299: EQUAL
11300: IFFALSE 11310
// sArmoury := true ;
11302: LD_ADDR_EXP 41
11306: PUSH
11307: LD_INT 1
11309: ST_TO_ADDR
// if p3 = 7 then
11310: LD_VAR 0 3
11314: PUSH
11315: LD_INT 7
11317: EQUAL
11318: IFFALSE 11328
// sRadar := true ;
11320: LD_ADDR_EXP 42
11324: PUSH
11325: LD_INT 1
11327: ST_TO_ADDR
// if p3 = 8 then
11328: LD_VAR 0 3
11332: PUSH
11333: LD_INT 8
11335: EQUAL
11336: IFFALSE 11346
// sBunker := true ;
11338: LD_ADDR_EXP 43
11342: PUSH
11343: LD_INT 1
11345: ST_TO_ADDR
// if p3 = 9 then
11346: LD_VAR 0 3
11350: PUSH
11351: LD_INT 9
11353: EQUAL
11354: IFFALSE 11364
// sHack := true ;
11356: LD_ADDR_EXP 44
11360: PUSH
11361: LD_INT 1
11363: ST_TO_ADDR
// if p3 = 10 then
11364: LD_VAR 0 3
11368: PUSH
11369: LD_INT 10
11371: EQUAL
11372: IFFALSE 11382
// sFire := true ;
11374: LD_ADDR_EXP 45
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// if p3 = 11 then
11382: LD_VAR 0 3
11386: PUSH
11387: LD_INT 11
11389: EQUAL
11390: IFFALSE 11400
// sRefresh := true ;
11392: LD_ADDR_EXP 46
11396: PUSH
11397: LD_INT 1
11399: ST_TO_ADDR
// if p3 = 12 then
11400: LD_VAR 0 3
11404: PUSH
11405: LD_INT 12
11407: EQUAL
11408: IFFALSE 11418
// sExp := true ;
11410: LD_ADDR_EXP 47
11414: PUSH
11415: LD_INT 1
11417: ST_TO_ADDR
// if p3 = 13 then
11418: LD_VAR 0 3
11422: PUSH
11423: LD_INT 13
11425: EQUAL
11426: IFFALSE 11436
// sDepot := true ;
11428: LD_ADDR_EXP 48
11432: PUSH
11433: LD_INT 1
11435: ST_TO_ADDR
// if p3 = 14 then
11436: LD_VAR 0 3
11440: PUSH
11441: LD_INT 14
11443: EQUAL
11444: IFFALSE 11454
// sFlag := true ;
11446: LD_ADDR_EXP 49
11450: PUSH
11451: LD_INT 1
11453: ST_TO_ADDR
// if p3 = 15 then
11454: LD_VAR 0 3
11458: PUSH
11459: LD_INT 15
11461: EQUAL
11462: IFFALSE 11472
// sKamikadze := true ;
11464: LD_ADDR_EXP 57
11468: PUSH
11469: LD_INT 1
11471: ST_TO_ADDR
// if p3 = 16 then
11472: LD_VAR 0 3
11476: PUSH
11477: LD_INT 16
11479: EQUAL
11480: IFFALSE 11490
// sTroll := true ;
11482: LD_ADDR_EXP 58
11486: PUSH
11487: LD_INT 1
11489: ST_TO_ADDR
// if p3 = 17 then
11490: LD_VAR 0 3
11494: PUSH
11495: LD_INT 17
11497: EQUAL
11498: IFFALSE 11508
// sSlow := true ;
11500: LD_ADDR_EXP 59
11504: PUSH
11505: LD_INT 1
11507: ST_TO_ADDR
// if p3 = 18 then
11508: LD_VAR 0 3
11512: PUSH
11513: LD_INT 18
11515: EQUAL
11516: IFFALSE 11526
// sLack := true ;
11518: LD_ADDR_EXP 60
11522: PUSH
11523: LD_INT 1
11525: ST_TO_ADDR
// if p3 = 19 then
11526: LD_VAR 0 3
11530: PUSH
11531: LD_INT 19
11533: EQUAL
11534: IFFALSE 11544
// sTank := true ;
11536: LD_ADDR_EXP 62
11540: PUSH
11541: LD_INT 1
11543: ST_TO_ADDR
// if p3 = 20 then
11544: LD_VAR 0 3
11548: PUSH
11549: LD_INT 20
11551: EQUAL
11552: IFFALSE 11562
// sRemote := true ;
11554: LD_ADDR_EXP 63
11558: PUSH
11559: LD_INT 1
11561: ST_TO_ADDR
// if p3 = 21 then
11562: LD_VAR 0 3
11566: PUSH
11567: LD_INT 21
11569: EQUAL
11570: IFFALSE 11580
// sPowell := true ;
11572: LD_ADDR_EXP 64
11576: PUSH
11577: LD_INT 1
11579: ST_TO_ADDR
// if p3 = 22 then
11580: LD_VAR 0 3
11584: PUSH
11585: LD_INT 22
11587: EQUAL
11588: IFFALSE 11598
// sTeleport := true ;
11590: LD_ADDR_EXP 67
11594: PUSH
11595: LD_INT 1
11597: ST_TO_ADDR
// if p3 = 23 then
11598: LD_VAR 0 3
11602: PUSH
11603: LD_INT 23
11605: EQUAL
11606: IFFALSE 11616
// sOilTower := true ;
11608: LD_ADDR_EXP 69
11612: PUSH
11613: LD_INT 1
11615: ST_TO_ADDR
// if p3 = 24 then
11616: LD_VAR 0 3
11620: PUSH
11621: LD_INT 24
11623: EQUAL
11624: IFFALSE 11634
// sShovel := true ;
11626: LD_ADDR_EXP 70
11630: PUSH
11631: LD_INT 1
11633: ST_TO_ADDR
// if p3 = 25 then
11634: LD_VAR 0 3
11638: PUSH
11639: LD_INT 25
11641: EQUAL
11642: IFFALSE 11652
// sSheik := true ;
11644: LD_ADDR_EXP 71
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// if p3 = 26 then
11652: LD_VAR 0 3
11656: PUSH
11657: LD_INT 26
11659: EQUAL
11660: IFFALSE 11670
// sEarthquake := true ;
11662: LD_ADDR_EXP 73
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// if p3 = 27 then
11670: LD_VAR 0 3
11674: PUSH
11675: LD_INT 27
11677: EQUAL
11678: IFFALSE 11688
// sAI := true ;
11680: LD_ADDR_EXP 74
11684: PUSH
11685: LD_INT 1
11687: ST_TO_ADDR
// if p3 = 28 then
11688: LD_VAR 0 3
11692: PUSH
11693: LD_INT 28
11695: EQUAL
11696: IFFALSE 11706
// sCargo := true ;
11698: LD_ADDR_EXP 77
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// if p3 = 29 then
11706: LD_VAR 0 3
11710: PUSH
11711: LD_INT 29
11713: EQUAL
11714: IFFALSE 11724
// sDLaser := true ;
11716: LD_ADDR_EXP 78
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// if p3 = 30 then
11724: LD_VAR 0 3
11728: PUSH
11729: LD_INT 30
11731: EQUAL
11732: IFFALSE 11742
// sExchange := true ;
11734: LD_ADDR_EXP 79
11738: PUSH
11739: LD_INT 1
11741: ST_TO_ADDR
// if p3 = 31 then
11742: LD_VAR 0 3
11746: PUSH
11747: LD_INT 31
11749: EQUAL
11750: IFFALSE 11760
// sFac := true ;
11752: LD_ADDR_EXP 80
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// if p3 = 32 then
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 32
11767: EQUAL
11768: IFFALSE 11778
// sPower := true ;
11770: LD_ADDR_EXP 81
11774: PUSH
11775: LD_INT 1
11777: ST_TO_ADDR
// if p3 = 33 then
11778: LD_VAR 0 3
11782: PUSH
11783: LD_INT 33
11785: EQUAL
11786: IFFALSE 11796
// sRandom := true ;
11788: LD_ADDR_EXP 82
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// if p3 = 34 then
11796: LD_VAR 0 3
11800: PUSH
11801: LD_INT 34
11803: EQUAL
11804: IFFALSE 11814
// sShield := true ;
11806: LD_ADDR_EXP 83
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if p3 = 35 then
11814: LD_VAR 0 3
11818: PUSH
11819: LD_INT 35
11821: EQUAL
11822: IFFALSE 11832
// sTime := true ;
11824: LD_ADDR_EXP 84
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// if p3 = 36 then
11832: LD_VAR 0 3
11836: PUSH
11837: LD_INT 36
11839: EQUAL
11840: IFFALSE 11850
// sTools := true ;
11842: LD_ADDR_EXP 85
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// if p3 = 101 then
11850: LD_VAR 0 3
11854: PUSH
11855: LD_INT 101
11857: EQUAL
11858: IFFALSE 11868
// sSold := true ;
11860: LD_ADDR_EXP 50
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// if p3 = 102 then
11868: LD_VAR 0 3
11872: PUSH
11873: LD_INT 102
11875: EQUAL
11876: IFFALSE 11886
// sDiff := true ;
11878: LD_ADDR_EXP 51
11882: PUSH
11883: LD_INT 1
11885: ST_TO_ADDR
// if p3 = 103 then
11886: LD_VAR 0 3
11890: PUSH
11891: LD_INT 103
11893: EQUAL
11894: IFFALSE 11904
// sFog := true ;
11896: LD_ADDR_EXP 54
11900: PUSH
11901: LD_INT 1
11903: ST_TO_ADDR
// if p3 = 104 then
11904: LD_VAR 0 3
11908: PUSH
11909: LD_INT 104
11911: EQUAL
11912: IFFALSE 11922
// sReset := true ;
11914: LD_ADDR_EXP 55
11918: PUSH
11919: LD_INT 1
11921: ST_TO_ADDR
// if p3 = 105 then
11922: LD_VAR 0 3
11926: PUSH
11927: LD_INT 105
11929: EQUAL
11930: IFFALSE 11940
// sSun := true ;
11932: LD_ADDR_EXP 56
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// if p3 = 106 then
11940: LD_VAR 0 3
11944: PUSH
11945: LD_INT 106
11947: EQUAL
11948: IFFALSE 11958
// sTiger := true ;
11950: LD_ADDR_EXP 52
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// if p3 = 107 then
11958: LD_VAR 0 3
11962: PUSH
11963: LD_INT 107
11965: EQUAL
11966: IFFALSE 11976
// sBomb := true ;
11968: LD_ADDR_EXP 53
11972: PUSH
11973: LD_INT 1
11975: ST_TO_ADDR
// if p3 = 108 then
11976: LD_VAR 0 3
11980: PUSH
11981: LD_INT 108
11983: EQUAL
11984: IFFALSE 11994
// sWound := true ;
11986: LD_ADDR_EXP 61
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// if p3 = 109 then
11994: LD_VAR 0 3
11998: PUSH
11999: LD_INT 109
12001: EQUAL
12002: IFFALSE 12012
// sBetray := true ;
12004: LD_ADDR_EXP 65
12008: PUSH
12009: LD_INT 1
12011: ST_TO_ADDR
// if p3 = 110 then
12012: LD_VAR 0 3
12016: PUSH
12017: LD_INT 110
12019: EQUAL
12020: IFFALSE 12030
// sContamin := true ;
12022: LD_ADDR_EXP 66
12026: PUSH
12027: LD_INT 1
12029: ST_TO_ADDR
// if p3 = 111 then
12030: LD_VAR 0 3
12034: PUSH
12035: LD_INT 111
12037: EQUAL
12038: IFFALSE 12048
// sOil := true ;
12040: LD_ADDR_EXP 68
12044: PUSH
12045: LD_INT 1
12047: ST_TO_ADDR
// if p3 = 112 then
12048: LD_VAR 0 3
12052: PUSH
12053: LD_INT 112
12055: EQUAL
12056: IFFALSE 12066
// sStu := true ;
12058: LD_ADDR_EXP 72
12062: PUSH
12063: LD_INT 1
12065: ST_TO_ADDR
// if p3 = 113 then
12066: LD_VAR 0 3
12070: PUSH
12071: LD_INT 113
12073: EQUAL
12074: IFFALSE 12084
// sBazooka := true ;
12076: LD_ADDR_EXP 75
12080: PUSH
12081: LD_INT 1
12083: ST_TO_ADDR
// if p3 = 114 then
12084: LD_VAR 0 3
12088: PUSH
12089: LD_INT 114
12091: EQUAL
12092: IFFALSE 12102
// sMortar := true ;
12094: LD_ADDR_EXP 76
12098: PUSH
12099: LD_INT 1
12101: ST_TO_ADDR
// if p3 = 115 then
12102: LD_VAR 0 3
12106: PUSH
12107: LD_INT 115
12109: EQUAL
12110: IFFALSE 12120
// sRanger := true ;
12112: LD_ADDR_EXP 86
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// if p3 = 116 then
12120: LD_VAR 0 3
12124: PUSH
12125: LD_INT 116
12127: EQUAL
12128: IFFALSE 12138
// sComputer := true ;
12130: LD_ADDR_EXP 87
12134: PUSH
12135: LD_INT 1
12137: ST_TO_ADDR
// if p3 = 117 then
12138: LD_VAR 0 3
12142: PUSH
12143: LD_INT 117
12145: EQUAL
12146: IFFALSE 12156
// s30 := true ;
12148: LD_ADDR_EXP 88
12152: PUSH
12153: LD_INT 1
12155: ST_TO_ADDR
// if p3 = 118 then
12156: LD_VAR 0 3
12160: PUSH
12161: LD_INT 118
12163: EQUAL
12164: IFFALSE 12174
// s60 := true ;
12166: LD_ADDR_EXP 89
12170: PUSH
12171: LD_INT 1
12173: ST_TO_ADDR
// end ; if p2 = 101 then
12174: LD_VAR 0 2
12178: PUSH
12179: LD_INT 101
12181: EQUAL
12182: IFFALSE 12310
// begin case p3 of 1 :
12184: LD_VAR 0 3
12188: PUSH
12189: LD_INT 1
12191: DOUBLE
12192: EQUAL
12193: IFTRUE 12197
12195: GO 12204
12197: POP
// hHackUnlimitedResources ; 2 :
12198: CALL 23906 0 0
12202: GO 12310
12204: LD_INT 2
12206: DOUBLE
12207: EQUAL
12208: IFTRUE 12212
12210: GO 12219
12212: POP
// hHackSetLevel10 ; 3 :
12213: CALL 24039 0 0
12217: GO 12310
12219: LD_INT 3
12221: DOUBLE
12222: EQUAL
12223: IFTRUE 12227
12225: GO 12234
12227: POP
// hHackSetLevel10YourUnits ; 4 :
12228: CALL 24124 0 0
12232: GO 12310
12234: LD_INT 4
12236: DOUBLE
12237: EQUAL
12238: IFTRUE 12242
12240: GO 12249
12242: POP
// hHackInvincible ; 5 :
12243: CALL 24572 0 0
12247: GO 12310
12249: LD_INT 5
12251: DOUBLE
12252: EQUAL
12253: IFTRUE 12257
12255: GO 12264
12257: POP
// hHackInvisible ; 6 :
12258: CALL 24683 0 0
12262: GO 12310
12264: LD_INT 6
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12279
12272: POP
// hHackChangeYourSide ; 7 :
12273: CALL 24740 0 0
12277: GO 12310
12279: LD_INT 7
12281: DOUBLE
12282: EQUAL
12283: IFTRUE 12287
12285: GO 12294
12287: POP
// hHackChangeUnitSide ; 8 :
12288: CALL 24782 0 0
12292: GO 12310
12294: LD_INT 8
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12309
12302: POP
// hHackFog ; end ;
12303: CALL 24883 0 0
12307: GO 12310
12309: POP
// end ; end ;
12310: LD_VAR 0 7
12314: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12315: GO 12317
12317: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12318: LD_STRING initStreamRollete();
12320: PPUSH
12321: CALL_OW 559
// InitStreamMode ;
12325: CALL 12334 0 0
// DefineStreamItems ( ) ;
12329: CALL 12798 0 0
// end ;
12333: END
// function InitStreamMode ; begin
12334: LD_INT 0
12336: PPUSH
// streamModeActive := false ;
12337: LD_ADDR_EXP 33
12341: PUSH
12342: LD_INT 0
12344: ST_TO_ADDR
// normalCounter := 36 ;
12345: LD_ADDR_EXP 34
12349: PUSH
12350: LD_INT 36
12352: ST_TO_ADDR
// hardcoreCounter := 16 ;
12353: LD_ADDR_EXP 35
12357: PUSH
12358: LD_INT 16
12360: ST_TO_ADDR
// sRocket := false ;
12361: LD_ADDR_EXP 38
12365: PUSH
12366: LD_INT 0
12368: ST_TO_ADDR
// sSpeed := false ;
12369: LD_ADDR_EXP 37
12373: PUSH
12374: LD_INT 0
12376: ST_TO_ADDR
// sEngine := false ;
12377: LD_ADDR_EXP 39
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// sSpec := false ;
12385: LD_ADDR_EXP 36
12389: PUSH
12390: LD_INT 0
12392: ST_TO_ADDR
// sLevel := false ;
12393: LD_ADDR_EXP 40
12397: PUSH
12398: LD_INT 0
12400: ST_TO_ADDR
// sArmoury := false ;
12401: LD_ADDR_EXP 41
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sRadar := false ;
12409: LD_ADDR_EXP 42
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sBunker := false ;
12417: LD_ADDR_EXP 43
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sHack := false ;
12425: LD_ADDR_EXP 44
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sFire := false ;
12433: LD_ADDR_EXP 45
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sRefresh := false ;
12441: LD_ADDR_EXP 46
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sExp := false ;
12449: LD_ADDR_EXP 47
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sDepot := false ;
12457: LD_ADDR_EXP 48
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sFlag := false ;
12465: LD_ADDR_EXP 49
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sKamikadze := false ;
12473: LD_ADDR_EXP 57
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sTroll := false ;
12481: LD_ADDR_EXP 58
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sSlow := false ;
12489: LD_ADDR_EXP 59
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sLack := false ;
12497: LD_ADDR_EXP 60
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sTank := false ;
12505: LD_ADDR_EXP 62
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sRemote := false ;
12513: LD_ADDR_EXP 63
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sPowell := false ;
12521: LD_ADDR_EXP 64
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sTeleport := false ;
12529: LD_ADDR_EXP 67
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sOilTower := false ;
12537: LD_ADDR_EXP 69
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sShovel := false ;
12545: LD_ADDR_EXP 70
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sSheik := false ;
12553: LD_ADDR_EXP 71
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sEarthquake := false ;
12561: LD_ADDR_EXP 73
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sAI := false ;
12569: LD_ADDR_EXP 74
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sCargo := false ;
12577: LD_ADDR_EXP 77
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sDLaser := false ;
12585: LD_ADDR_EXP 78
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sExchange := false ;
12593: LD_ADDR_EXP 79
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sFac := false ;
12601: LD_ADDR_EXP 80
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sPower := false ;
12609: LD_ADDR_EXP 81
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sRandom := false ;
12617: LD_ADDR_EXP 82
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sShield := false ;
12625: LD_ADDR_EXP 83
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sTime := false ;
12633: LD_ADDR_EXP 84
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sTools := false ;
12641: LD_ADDR_EXP 85
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sSold := false ;
12649: LD_ADDR_EXP 50
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sDiff := false ;
12657: LD_ADDR_EXP 51
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sFog := false ;
12665: LD_ADDR_EXP 54
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sReset := false ;
12673: LD_ADDR_EXP 55
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sSun := false ;
12681: LD_ADDR_EXP 56
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sTiger := false ;
12689: LD_ADDR_EXP 52
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sBomb := false ;
12697: LD_ADDR_EXP 53
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sWound := false ;
12705: LD_ADDR_EXP 61
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sBetray := false ;
12713: LD_ADDR_EXP 65
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sContamin := false ;
12721: LD_ADDR_EXP 66
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sOil := false ;
12729: LD_ADDR_EXP 68
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sStu := false ;
12737: LD_ADDR_EXP 72
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sBazooka := false ;
12745: LD_ADDR_EXP 75
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sMortar := false ;
12753: LD_ADDR_EXP 76
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sRanger := false ;
12761: LD_ADDR_EXP 86
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sComputer := false ;
12769: LD_ADDR_EXP 87
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// s30 := false ;
12777: LD_ADDR_EXP 88
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// s60 := false ;
12785: LD_ADDR_EXP 89
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// end ;
12793: LD_VAR 0 1
12797: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12798: LD_INT 0
12800: PPUSH
12801: PPUSH
12802: PPUSH
12803: PPUSH
12804: PPUSH
// result := [ ] ;
12805: LD_ADDR_VAR 0 1
12809: PUSH
12810: EMPTY
12811: ST_TO_ADDR
// if campaign_id = 1 then
12812: LD_OWVAR 69
12816: PUSH
12817: LD_INT 1
12819: EQUAL
12820: IFFALSE 15986
// begin case mission_number of 1 :
12822: LD_OWVAR 70
12826: PUSH
12827: LD_INT 1
12829: DOUBLE
12830: EQUAL
12831: IFTRUE 12835
12833: GO 12911
12835: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12836: LD_ADDR_VAR 0 1
12840: PUSH
12841: LD_INT 2
12843: PUSH
12844: LD_INT 4
12846: PUSH
12847: LD_INT 11
12849: PUSH
12850: LD_INT 12
12852: PUSH
12853: LD_INT 15
12855: PUSH
12856: LD_INT 16
12858: PUSH
12859: LD_INT 22
12861: PUSH
12862: LD_INT 23
12864: PUSH
12865: LD_INT 26
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 101
12881: PUSH
12882: LD_INT 102
12884: PUSH
12885: LD_INT 106
12887: PUSH
12888: LD_INT 116
12890: PUSH
12891: LD_INT 117
12893: PUSH
12894: LD_INT 118
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: ST_TO_ADDR
12909: GO 15984
12911: LD_INT 2
12913: DOUBLE
12914: EQUAL
12915: IFTRUE 12919
12917: GO 13003
12919: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12920: LD_ADDR_VAR 0 1
12924: PUSH
12925: LD_INT 2
12927: PUSH
12928: LD_INT 4
12930: PUSH
12931: LD_INT 11
12933: PUSH
12934: LD_INT 12
12936: PUSH
12937: LD_INT 15
12939: PUSH
12940: LD_INT 16
12942: PUSH
12943: LD_INT 22
12945: PUSH
12946: LD_INT 23
12948: PUSH
12949: LD_INT 26
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 101
12965: PUSH
12966: LD_INT 102
12968: PUSH
12969: LD_INT 105
12971: PUSH
12972: LD_INT 106
12974: PUSH
12975: LD_INT 108
12977: PUSH
12978: LD_INT 116
12980: PUSH
12981: LD_INT 117
12983: PUSH
12984: LD_INT 118
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: ST_TO_ADDR
13001: GO 15984
13003: LD_INT 3
13005: DOUBLE
13006: EQUAL
13007: IFTRUE 13011
13009: GO 13099
13011: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13012: LD_ADDR_VAR 0 1
13016: PUSH
13017: LD_INT 2
13019: PUSH
13020: LD_INT 4
13022: PUSH
13023: LD_INT 5
13025: PUSH
13026: LD_INT 11
13028: PUSH
13029: LD_INT 12
13031: PUSH
13032: LD_INT 15
13034: PUSH
13035: LD_INT 16
13037: PUSH
13038: LD_INT 22
13040: PUSH
13041: LD_INT 26
13043: PUSH
13044: LD_INT 36
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 101
13061: PUSH
13062: LD_INT 102
13064: PUSH
13065: LD_INT 105
13067: PUSH
13068: LD_INT 106
13070: PUSH
13071: LD_INT 108
13073: PUSH
13074: LD_INT 116
13076: PUSH
13077: LD_INT 117
13079: PUSH
13080: LD_INT 118
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: ST_TO_ADDR
13097: GO 15984
13099: LD_INT 4
13101: DOUBLE
13102: EQUAL
13103: IFTRUE 13107
13105: GO 13203
13107: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13108: LD_ADDR_VAR 0 1
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: LD_INT 4
13118: PUSH
13119: LD_INT 5
13121: PUSH
13122: LD_INT 8
13124: PUSH
13125: LD_INT 11
13127: PUSH
13128: LD_INT 12
13130: PUSH
13131: LD_INT 15
13133: PUSH
13134: LD_INT 16
13136: PUSH
13137: LD_INT 22
13139: PUSH
13140: LD_INT 23
13142: PUSH
13143: LD_INT 26
13145: PUSH
13146: LD_INT 36
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 101
13165: PUSH
13166: LD_INT 102
13168: PUSH
13169: LD_INT 105
13171: PUSH
13172: LD_INT 106
13174: PUSH
13175: LD_INT 108
13177: PUSH
13178: LD_INT 116
13180: PUSH
13181: LD_INT 117
13183: PUSH
13184: LD_INT 118
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: ST_TO_ADDR
13201: GO 15984
13203: LD_INT 5
13205: DOUBLE
13206: EQUAL
13207: IFTRUE 13211
13209: GO 13323
13211: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13212: LD_ADDR_VAR 0 1
13216: PUSH
13217: LD_INT 2
13219: PUSH
13220: LD_INT 4
13222: PUSH
13223: LD_INT 5
13225: PUSH
13226: LD_INT 6
13228: PUSH
13229: LD_INT 8
13231: PUSH
13232: LD_INT 11
13234: PUSH
13235: LD_INT 12
13237: PUSH
13238: LD_INT 15
13240: PUSH
13241: LD_INT 16
13243: PUSH
13244: LD_INT 22
13246: PUSH
13247: LD_INT 23
13249: PUSH
13250: LD_INT 25
13252: PUSH
13253: LD_INT 26
13255: PUSH
13256: LD_INT 36
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 101
13277: PUSH
13278: LD_INT 102
13280: PUSH
13281: LD_INT 105
13283: PUSH
13284: LD_INT 106
13286: PUSH
13287: LD_INT 108
13289: PUSH
13290: LD_INT 109
13292: PUSH
13293: LD_INT 112
13295: PUSH
13296: LD_INT 116
13298: PUSH
13299: LD_INT 117
13301: PUSH
13302: LD_INT 118
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: ST_TO_ADDR
13321: GO 15984
13323: LD_INT 6
13325: DOUBLE
13326: EQUAL
13327: IFTRUE 13331
13329: GO 13463
13331: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13332: LD_ADDR_VAR 0 1
13336: PUSH
13337: LD_INT 2
13339: PUSH
13340: LD_INT 4
13342: PUSH
13343: LD_INT 5
13345: PUSH
13346: LD_INT 6
13348: PUSH
13349: LD_INT 8
13351: PUSH
13352: LD_INT 11
13354: PUSH
13355: LD_INT 12
13357: PUSH
13358: LD_INT 15
13360: PUSH
13361: LD_INT 16
13363: PUSH
13364: LD_INT 20
13366: PUSH
13367: LD_INT 21
13369: PUSH
13370: LD_INT 22
13372: PUSH
13373: LD_INT 23
13375: PUSH
13376: LD_INT 25
13378: PUSH
13379: LD_INT 26
13381: PUSH
13382: LD_INT 30
13384: PUSH
13385: LD_INT 31
13387: PUSH
13388: LD_INT 32
13390: PUSH
13391: LD_INT 36
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 101
13417: PUSH
13418: LD_INT 102
13420: PUSH
13421: LD_INT 105
13423: PUSH
13424: LD_INT 106
13426: PUSH
13427: LD_INT 108
13429: PUSH
13430: LD_INT 109
13432: PUSH
13433: LD_INT 112
13435: PUSH
13436: LD_INT 116
13438: PUSH
13439: LD_INT 117
13441: PUSH
13442: LD_INT 118
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: ST_TO_ADDR
13461: GO 15984
13463: LD_INT 7
13465: DOUBLE
13466: EQUAL
13467: IFTRUE 13471
13469: GO 13583
13471: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13472: LD_ADDR_VAR 0 1
13476: PUSH
13477: LD_INT 2
13479: PUSH
13480: LD_INT 4
13482: PUSH
13483: LD_INT 5
13485: PUSH
13486: LD_INT 7
13488: PUSH
13489: LD_INT 11
13491: PUSH
13492: LD_INT 12
13494: PUSH
13495: LD_INT 15
13497: PUSH
13498: LD_INT 16
13500: PUSH
13501: LD_INT 20
13503: PUSH
13504: LD_INT 21
13506: PUSH
13507: LD_INT 22
13509: PUSH
13510: LD_INT 23
13512: PUSH
13513: LD_INT 25
13515: PUSH
13516: LD_INT 26
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 101
13537: PUSH
13538: LD_INT 102
13540: PUSH
13541: LD_INT 103
13543: PUSH
13544: LD_INT 105
13546: PUSH
13547: LD_INT 106
13549: PUSH
13550: LD_INT 108
13552: PUSH
13553: LD_INT 112
13555: PUSH
13556: LD_INT 116
13558: PUSH
13559: LD_INT 117
13561: PUSH
13562: LD_INT 118
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: ST_TO_ADDR
13581: GO 15984
13583: LD_INT 8
13585: DOUBLE
13586: EQUAL
13587: IFTRUE 13591
13589: GO 13731
13591: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13592: LD_ADDR_VAR 0 1
13596: PUSH
13597: LD_INT 2
13599: PUSH
13600: LD_INT 4
13602: PUSH
13603: LD_INT 5
13605: PUSH
13606: LD_INT 6
13608: PUSH
13609: LD_INT 7
13611: PUSH
13612: LD_INT 8
13614: PUSH
13615: LD_INT 11
13617: PUSH
13618: LD_INT 12
13620: PUSH
13621: LD_INT 15
13623: PUSH
13624: LD_INT 16
13626: PUSH
13627: LD_INT 20
13629: PUSH
13630: LD_INT 21
13632: PUSH
13633: LD_INT 22
13635: PUSH
13636: LD_INT 23
13638: PUSH
13639: LD_INT 25
13641: PUSH
13642: LD_INT 26
13644: PUSH
13645: LD_INT 30
13647: PUSH
13648: LD_INT 31
13650: PUSH
13651: LD_INT 32
13653: PUSH
13654: LD_INT 36
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 101
13681: PUSH
13682: LD_INT 102
13684: PUSH
13685: LD_INT 103
13687: PUSH
13688: LD_INT 105
13690: PUSH
13691: LD_INT 106
13693: PUSH
13694: LD_INT 108
13696: PUSH
13697: LD_INT 109
13699: PUSH
13700: LD_INT 112
13702: PUSH
13703: LD_INT 116
13705: PUSH
13706: LD_INT 117
13708: PUSH
13709: LD_INT 118
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: ST_TO_ADDR
13729: GO 15984
13731: LD_INT 9
13733: DOUBLE
13734: EQUAL
13735: IFTRUE 13739
13737: GO 13887
13739: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13740: LD_ADDR_VAR 0 1
13744: PUSH
13745: LD_INT 2
13747: PUSH
13748: LD_INT 4
13750: PUSH
13751: LD_INT 5
13753: PUSH
13754: LD_INT 6
13756: PUSH
13757: LD_INT 7
13759: PUSH
13760: LD_INT 8
13762: PUSH
13763: LD_INT 11
13765: PUSH
13766: LD_INT 12
13768: PUSH
13769: LD_INT 15
13771: PUSH
13772: LD_INT 16
13774: PUSH
13775: LD_INT 20
13777: PUSH
13778: LD_INT 21
13780: PUSH
13781: LD_INT 22
13783: PUSH
13784: LD_INT 23
13786: PUSH
13787: LD_INT 25
13789: PUSH
13790: LD_INT 26
13792: PUSH
13793: LD_INT 28
13795: PUSH
13796: LD_INT 30
13798: PUSH
13799: LD_INT 31
13801: PUSH
13802: LD_INT 32
13804: PUSH
13805: LD_INT 36
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 101
13833: PUSH
13834: LD_INT 102
13836: PUSH
13837: LD_INT 103
13839: PUSH
13840: LD_INT 105
13842: PUSH
13843: LD_INT 106
13845: PUSH
13846: LD_INT 108
13848: PUSH
13849: LD_INT 109
13851: PUSH
13852: LD_INT 112
13854: PUSH
13855: LD_INT 114
13857: PUSH
13858: LD_INT 116
13860: PUSH
13861: LD_INT 117
13863: PUSH
13864: LD_INT 118
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: ST_TO_ADDR
13885: GO 15984
13887: LD_INT 10
13889: DOUBLE
13890: EQUAL
13891: IFTRUE 13895
13893: GO 14091
13895: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13896: LD_ADDR_VAR 0 1
13900: PUSH
13901: LD_INT 2
13903: PUSH
13904: LD_INT 4
13906: PUSH
13907: LD_INT 5
13909: PUSH
13910: LD_INT 6
13912: PUSH
13913: LD_INT 7
13915: PUSH
13916: LD_INT 8
13918: PUSH
13919: LD_INT 9
13921: PUSH
13922: LD_INT 10
13924: PUSH
13925: LD_INT 11
13927: PUSH
13928: LD_INT 12
13930: PUSH
13931: LD_INT 13
13933: PUSH
13934: LD_INT 14
13936: PUSH
13937: LD_INT 15
13939: PUSH
13940: LD_INT 16
13942: PUSH
13943: LD_INT 17
13945: PUSH
13946: LD_INT 18
13948: PUSH
13949: LD_INT 19
13951: PUSH
13952: LD_INT 20
13954: PUSH
13955: LD_INT 21
13957: PUSH
13958: LD_INT 22
13960: PUSH
13961: LD_INT 23
13963: PUSH
13964: LD_INT 24
13966: PUSH
13967: LD_INT 25
13969: PUSH
13970: LD_INT 26
13972: PUSH
13973: LD_INT 28
13975: PUSH
13976: LD_INT 30
13978: PUSH
13979: LD_INT 31
13981: PUSH
13982: LD_INT 32
13984: PUSH
13985: LD_INT 36
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 101
14021: PUSH
14022: LD_INT 102
14024: PUSH
14025: LD_INT 103
14027: PUSH
14028: LD_INT 104
14030: PUSH
14031: LD_INT 105
14033: PUSH
14034: LD_INT 106
14036: PUSH
14037: LD_INT 107
14039: PUSH
14040: LD_INT 108
14042: PUSH
14043: LD_INT 109
14045: PUSH
14046: LD_INT 110
14048: PUSH
14049: LD_INT 111
14051: PUSH
14052: LD_INT 112
14054: PUSH
14055: LD_INT 114
14057: PUSH
14058: LD_INT 116
14060: PUSH
14061: LD_INT 117
14063: PUSH
14064: LD_INT 118
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: ST_TO_ADDR
14089: GO 15984
14091: LD_INT 11
14093: DOUBLE
14094: EQUAL
14095: IFTRUE 14099
14097: GO 14303
14099: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14100: LD_ADDR_VAR 0 1
14104: PUSH
14105: LD_INT 2
14107: PUSH
14108: LD_INT 3
14110: PUSH
14111: LD_INT 4
14113: PUSH
14114: LD_INT 5
14116: PUSH
14117: LD_INT 6
14119: PUSH
14120: LD_INT 7
14122: PUSH
14123: LD_INT 8
14125: PUSH
14126: LD_INT 9
14128: PUSH
14129: LD_INT 10
14131: PUSH
14132: LD_INT 11
14134: PUSH
14135: LD_INT 12
14137: PUSH
14138: LD_INT 13
14140: PUSH
14141: LD_INT 14
14143: PUSH
14144: LD_INT 15
14146: PUSH
14147: LD_INT 16
14149: PUSH
14150: LD_INT 17
14152: PUSH
14153: LD_INT 18
14155: PUSH
14156: LD_INT 19
14158: PUSH
14159: LD_INT 20
14161: PUSH
14162: LD_INT 21
14164: PUSH
14165: LD_INT 22
14167: PUSH
14168: LD_INT 23
14170: PUSH
14171: LD_INT 24
14173: PUSH
14174: LD_INT 25
14176: PUSH
14177: LD_INT 26
14179: PUSH
14180: LD_INT 28
14182: PUSH
14183: LD_INT 30
14185: PUSH
14186: LD_INT 31
14188: PUSH
14189: LD_INT 32
14191: PUSH
14192: LD_INT 34
14194: PUSH
14195: LD_INT 36
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 101
14233: PUSH
14234: LD_INT 102
14236: PUSH
14237: LD_INT 103
14239: PUSH
14240: LD_INT 104
14242: PUSH
14243: LD_INT 105
14245: PUSH
14246: LD_INT 106
14248: PUSH
14249: LD_INT 107
14251: PUSH
14252: LD_INT 108
14254: PUSH
14255: LD_INT 109
14257: PUSH
14258: LD_INT 110
14260: PUSH
14261: LD_INT 111
14263: PUSH
14264: LD_INT 112
14266: PUSH
14267: LD_INT 114
14269: PUSH
14270: LD_INT 116
14272: PUSH
14273: LD_INT 117
14275: PUSH
14276: LD_INT 118
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: ST_TO_ADDR
14301: GO 15984
14303: LD_INT 12
14305: DOUBLE
14306: EQUAL
14307: IFTRUE 14311
14309: GO 14531
14311: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14312: LD_ADDR_VAR 0 1
14316: PUSH
14317: LD_INT 1
14319: PUSH
14320: LD_INT 2
14322: PUSH
14323: LD_INT 3
14325: PUSH
14326: LD_INT 4
14328: PUSH
14329: LD_INT 5
14331: PUSH
14332: LD_INT 6
14334: PUSH
14335: LD_INT 7
14337: PUSH
14338: LD_INT 8
14340: PUSH
14341: LD_INT 9
14343: PUSH
14344: LD_INT 10
14346: PUSH
14347: LD_INT 11
14349: PUSH
14350: LD_INT 12
14352: PUSH
14353: LD_INT 13
14355: PUSH
14356: LD_INT 14
14358: PUSH
14359: LD_INT 15
14361: PUSH
14362: LD_INT 16
14364: PUSH
14365: LD_INT 17
14367: PUSH
14368: LD_INT 18
14370: PUSH
14371: LD_INT 19
14373: PUSH
14374: LD_INT 20
14376: PUSH
14377: LD_INT 21
14379: PUSH
14380: LD_INT 22
14382: PUSH
14383: LD_INT 23
14385: PUSH
14386: LD_INT 24
14388: PUSH
14389: LD_INT 25
14391: PUSH
14392: LD_INT 26
14394: PUSH
14395: LD_INT 27
14397: PUSH
14398: LD_INT 28
14400: PUSH
14401: LD_INT 30
14403: PUSH
14404: LD_INT 31
14406: PUSH
14407: LD_INT 32
14409: PUSH
14410: LD_INT 33
14412: PUSH
14413: LD_INT 34
14415: PUSH
14416: LD_INT 36
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 101
14457: PUSH
14458: LD_INT 102
14460: PUSH
14461: LD_INT 103
14463: PUSH
14464: LD_INT 104
14466: PUSH
14467: LD_INT 105
14469: PUSH
14470: LD_INT 106
14472: PUSH
14473: LD_INT 107
14475: PUSH
14476: LD_INT 108
14478: PUSH
14479: LD_INT 109
14481: PUSH
14482: LD_INT 110
14484: PUSH
14485: LD_INT 111
14487: PUSH
14488: LD_INT 112
14490: PUSH
14491: LD_INT 113
14493: PUSH
14494: LD_INT 114
14496: PUSH
14497: LD_INT 116
14499: PUSH
14500: LD_INT 117
14502: PUSH
14503: LD_INT 118
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: ST_TO_ADDR
14529: GO 15984
14531: LD_INT 13
14533: DOUBLE
14534: EQUAL
14535: IFTRUE 14539
14537: GO 14747
14539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14540: LD_ADDR_VAR 0 1
14544: PUSH
14545: LD_INT 1
14547: PUSH
14548: LD_INT 2
14550: PUSH
14551: LD_INT 3
14553: PUSH
14554: LD_INT 4
14556: PUSH
14557: LD_INT 5
14559: PUSH
14560: LD_INT 8
14562: PUSH
14563: LD_INT 9
14565: PUSH
14566: LD_INT 10
14568: PUSH
14569: LD_INT 11
14571: PUSH
14572: LD_INT 12
14574: PUSH
14575: LD_INT 14
14577: PUSH
14578: LD_INT 15
14580: PUSH
14581: LD_INT 16
14583: PUSH
14584: LD_INT 17
14586: PUSH
14587: LD_INT 18
14589: PUSH
14590: LD_INT 19
14592: PUSH
14593: LD_INT 20
14595: PUSH
14596: LD_INT 21
14598: PUSH
14599: LD_INT 22
14601: PUSH
14602: LD_INT 23
14604: PUSH
14605: LD_INT 24
14607: PUSH
14608: LD_INT 25
14610: PUSH
14611: LD_INT 26
14613: PUSH
14614: LD_INT 27
14616: PUSH
14617: LD_INT 28
14619: PUSH
14620: LD_INT 30
14622: PUSH
14623: LD_INT 31
14625: PUSH
14626: LD_INT 32
14628: PUSH
14629: LD_INT 33
14631: PUSH
14632: LD_INT 34
14634: PUSH
14635: LD_INT 36
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 101
14673: PUSH
14674: LD_INT 102
14676: PUSH
14677: LD_INT 103
14679: PUSH
14680: LD_INT 104
14682: PUSH
14683: LD_INT 105
14685: PUSH
14686: LD_INT 106
14688: PUSH
14689: LD_INT 107
14691: PUSH
14692: LD_INT 108
14694: PUSH
14695: LD_INT 109
14697: PUSH
14698: LD_INT 110
14700: PUSH
14701: LD_INT 111
14703: PUSH
14704: LD_INT 112
14706: PUSH
14707: LD_INT 113
14709: PUSH
14710: LD_INT 114
14712: PUSH
14713: LD_INT 116
14715: PUSH
14716: LD_INT 117
14718: PUSH
14719: LD_INT 118
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: ST_TO_ADDR
14745: GO 15984
14747: LD_INT 14
14749: DOUBLE
14750: EQUAL
14751: IFTRUE 14755
14753: GO 14979
14755: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14756: LD_ADDR_VAR 0 1
14760: PUSH
14761: LD_INT 1
14763: PUSH
14764: LD_INT 2
14766: PUSH
14767: LD_INT 3
14769: PUSH
14770: LD_INT 4
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: LD_INT 6
14778: PUSH
14779: LD_INT 7
14781: PUSH
14782: LD_INT 8
14784: PUSH
14785: LD_INT 9
14787: PUSH
14788: LD_INT 10
14790: PUSH
14791: LD_INT 11
14793: PUSH
14794: LD_INT 12
14796: PUSH
14797: LD_INT 13
14799: PUSH
14800: LD_INT 14
14802: PUSH
14803: LD_INT 15
14805: PUSH
14806: LD_INT 16
14808: PUSH
14809: LD_INT 17
14811: PUSH
14812: LD_INT 18
14814: PUSH
14815: LD_INT 19
14817: PUSH
14818: LD_INT 20
14820: PUSH
14821: LD_INT 21
14823: PUSH
14824: LD_INT 22
14826: PUSH
14827: LD_INT 23
14829: PUSH
14830: LD_INT 24
14832: PUSH
14833: LD_INT 25
14835: PUSH
14836: LD_INT 26
14838: PUSH
14839: LD_INT 27
14841: PUSH
14842: LD_INT 28
14844: PUSH
14845: LD_INT 29
14847: PUSH
14848: LD_INT 30
14850: PUSH
14851: LD_INT 31
14853: PUSH
14854: LD_INT 32
14856: PUSH
14857: LD_INT 33
14859: PUSH
14860: LD_INT 34
14862: PUSH
14863: LD_INT 36
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 101
14905: PUSH
14906: LD_INT 102
14908: PUSH
14909: LD_INT 103
14911: PUSH
14912: LD_INT 104
14914: PUSH
14915: LD_INT 105
14917: PUSH
14918: LD_INT 106
14920: PUSH
14921: LD_INT 107
14923: PUSH
14924: LD_INT 108
14926: PUSH
14927: LD_INT 109
14929: PUSH
14930: LD_INT 110
14932: PUSH
14933: LD_INT 111
14935: PUSH
14936: LD_INT 112
14938: PUSH
14939: LD_INT 113
14941: PUSH
14942: LD_INT 114
14944: PUSH
14945: LD_INT 116
14947: PUSH
14948: LD_INT 117
14950: PUSH
14951: LD_INT 118
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: ST_TO_ADDR
14977: GO 15984
14979: LD_INT 15
14981: DOUBLE
14982: EQUAL
14983: IFTRUE 14987
14985: GO 15211
14987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14988: LD_ADDR_VAR 0 1
14992: PUSH
14993: LD_INT 1
14995: PUSH
14996: LD_INT 2
14998: PUSH
14999: LD_INT 3
15001: PUSH
15002: LD_INT 4
15004: PUSH
15005: LD_INT 5
15007: PUSH
15008: LD_INT 6
15010: PUSH
15011: LD_INT 7
15013: PUSH
15014: LD_INT 8
15016: PUSH
15017: LD_INT 9
15019: PUSH
15020: LD_INT 10
15022: PUSH
15023: LD_INT 11
15025: PUSH
15026: LD_INT 12
15028: PUSH
15029: LD_INT 13
15031: PUSH
15032: LD_INT 14
15034: PUSH
15035: LD_INT 15
15037: PUSH
15038: LD_INT 16
15040: PUSH
15041: LD_INT 17
15043: PUSH
15044: LD_INT 18
15046: PUSH
15047: LD_INT 19
15049: PUSH
15050: LD_INT 20
15052: PUSH
15053: LD_INT 21
15055: PUSH
15056: LD_INT 22
15058: PUSH
15059: LD_INT 23
15061: PUSH
15062: LD_INT 24
15064: PUSH
15065: LD_INT 25
15067: PUSH
15068: LD_INT 26
15070: PUSH
15071: LD_INT 27
15073: PUSH
15074: LD_INT 28
15076: PUSH
15077: LD_INT 29
15079: PUSH
15080: LD_INT 30
15082: PUSH
15083: LD_INT 31
15085: PUSH
15086: LD_INT 32
15088: PUSH
15089: LD_INT 33
15091: PUSH
15092: LD_INT 34
15094: PUSH
15095: LD_INT 36
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: PUSH
15135: LD_INT 101
15137: PUSH
15138: LD_INT 102
15140: PUSH
15141: LD_INT 103
15143: PUSH
15144: LD_INT 104
15146: PUSH
15147: LD_INT 105
15149: PUSH
15150: LD_INT 106
15152: PUSH
15153: LD_INT 107
15155: PUSH
15156: LD_INT 108
15158: PUSH
15159: LD_INT 109
15161: PUSH
15162: LD_INT 110
15164: PUSH
15165: LD_INT 111
15167: PUSH
15168: LD_INT 112
15170: PUSH
15171: LD_INT 113
15173: PUSH
15174: LD_INT 114
15176: PUSH
15177: LD_INT 116
15179: PUSH
15180: LD_INT 117
15182: PUSH
15183: LD_INT 118
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: ST_TO_ADDR
15209: GO 15984
15211: LD_INT 16
15213: DOUBLE
15214: EQUAL
15215: IFTRUE 15219
15217: GO 15355
15219: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15220: LD_ADDR_VAR 0 1
15224: PUSH
15225: LD_INT 2
15227: PUSH
15228: LD_INT 4
15230: PUSH
15231: LD_INT 5
15233: PUSH
15234: LD_INT 7
15236: PUSH
15237: LD_INT 11
15239: PUSH
15240: LD_INT 12
15242: PUSH
15243: LD_INT 15
15245: PUSH
15246: LD_INT 16
15248: PUSH
15249: LD_INT 20
15251: PUSH
15252: LD_INT 21
15254: PUSH
15255: LD_INT 22
15257: PUSH
15258: LD_INT 23
15260: PUSH
15261: LD_INT 25
15263: PUSH
15264: LD_INT 26
15266: PUSH
15267: LD_INT 30
15269: PUSH
15270: LD_INT 31
15272: PUSH
15273: LD_INT 32
15275: PUSH
15276: LD_INT 33
15278: PUSH
15279: LD_INT 34
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 101
15305: PUSH
15306: LD_INT 102
15308: PUSH
15309: LD_INT 103
15311: PUSH
15312: LD_INT 106
15314: PUSH
15315: LD_INT 108
15317: PUSH
15318: LD_INT 112
15320: PUSH
15321: LD_INT 113
15323: PUSH
15324: LD_INT 114
15326: PUSH
15327: LD_INT 116
15329: PUSH
15330: LD_INT 117
15332: PUSH
15333: LD_INT 118
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: ST_TO_ADDR
15353: GO 15984
15355: LD_INT 17
15357: DOUBLE
15358: EQUAL
15359: IFTRUE 15363
15361: GO 15587
15363: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15364: LD_ADDR_VAR 0 1
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: LD_INT 2
15374: PUSH
15375: LD_INT 3
15377: PUSH
15378: LD_INT 4
15380: PUSH
15381: LD_INT 5
15383: PUSH
15384: LD_INT 6
15386: PUSH
15387: LD_INT 7
15389: PUSH
15390: LD_INT 8
15392: PUSH
15393: LD_INT 9
15395: PUSH
15396: LD_INT 10
15398: PUSH
15399: LD_INT 11
15401: PUSH
15402: LD_INT 12
15404: PUSH
15405: LD_INT 13
15407: PUSH
15408: LD_INT 14
15410: PUSH
15411: LD_INT 15
15413: PUSH
15414: LD_INT 16
15416: PUSH
15417: LD_INT 17
15419: PUSH
15420: LD_INT 18
15422: PUSH
15423: LD_INT 19
15425: PUSH
15426: LD_INT 20
15428: PUSH
15429: LD_INT 21
15431: PUSH
15432: LD_INT 22
15434: PUSH
15435: LD_INT 23
15437: PUSH
15438: LD_INT 24
15440: PUSH
15441: LD_INT 25
15443: PUSH
15444: LD_INT 26
15446: PUSH
15447: LD_INT 27
15449: PUSH
15450: LD_INT 28
15452: PUSH
15453: LD_INT 29
15455: PUSH
15456: LD_INT 30
15458: PUSH
15459: LD_INT 31
15461: PUSH
15462: LD_INT 32
15464: PUSH
15465: LD_INT 33
15467: PUSH
15468: LD_INT 34
15470: PUSH
15471: LD_INT 36
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 101
15513: PUSH
15514: LD_INT 102
15516: PUSH
15517: LD_INT 103
15519: PUSH
15520: LD_INT 104
15522: PUSH
15523: LD_INT 105
15525: PUSH
15526: LD_INT 106
15528: PUSH
15529: LD_INT 107
15531: PUSH
15532: LD_INT 108
15534: PUSH
15535: LD_INT 109
15537: PUSH
15538: LD_INT 110
15540: PUSH
15541: LD_INT 111
15543: PUSH
15544: LD_INT 112
15546: PUSH
15547: LD_INT 113
15549: PUSH
15550: LD_INT 114
15552: PUSH
15553: LD_INT 116
15555: PUSH
15556: LD_INT 117
15558: PUSH
15559: LD_INT 118
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: ST_TO_ADDR
15585: GO 15984
15587: LD_INT 18
15589: DOUBLE
15590: EQUAL
15591: IFTRUE 15595
15593: GO 15743
15595: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15596: LD_ADDR_VAR 0 1
15600: PUSH
15601: LD_INT 2
15603: PUSH
15604: LD_INT 4
15606: PUSH
15607: LD_INT 5
15609: PUSH
15610: LD_INT 7
15612: PUSH
15613: LD_INT 11
15615: PUSH
15616: LD_INT 12
15618: PUSH
15619: LD_INT 15
15621: PUSH
15622: LD_INT 16
15624: PUSH
15625: LD_INT 20
15627: PUSH
15628: LD_INT 21
15630: PUSH
15631: LD_INT 22
15633: PUSH
15634: LD_INT 23
15636: PUSH
15637: LD_INT 25
15639: PUSH
15640: LD_INT 26
15642: PUSH
15643: LD_INT 30
15645: PUSH
15646: LD_INT 31
15648: PUSH
15649: LD_INT 32
15651: PUSH
15652: LD_INT 33
15654: PUSH
15655: LD_INT 34
15657: PUSH
15658: LD_INT 35
15660: PUSH
15661: LD_INT 36
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 101
15689: PUSH
15690: LD_INT 102
15692: PUSH
15693: LD_INT 103
15695: PUSH
15696: LD_INT 106
15698: PUSH
15699: LD_INT 108
15701: PUSH
15702: LD_INT 112
15704: PUSH
15705: LD_INT 113
15707: PUSH
15708: LD_INT 114
15710: PUSH
15711: LD_INT 115
15713: PUSH
15714: LD_INT 116
15716: PUSH
15717: LD_INT 117
15719: PUSH
15720: LD_INT 118
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: ST_TO_ADDR
15741: GO 15984
15743: LD_INT 19
15745: DOUBLE
15746: EQUAL
15747: IFTRUE 15751
15749: GO 15983
15751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15752: LD_ADDR_VAR 0 1
15756: PUSH
15757: LD_INT 1
15759: PUSH
15760: LD_INT 2
15762: PUSH
15763: LD_INT 3
15765: PUSH
15766: LD_INT 4
15768: PUSH
15769: LD_INT 5
15771: PUSH
15772: LD_INT 6
15774: PUSH
15775: LD_INT 7
15777: PUSH
15778: LD_INT 8
15780: PUSH
15781: LD_INT 9
15783: PUSH
15784: LD_INT 10
15786: PUSH
15787: LD_INT 11
15789: PUSH
15790: LD_INT 12
15792: PUSH
15793: LD_INT 13
15795: PUSH
15796: LD_INT 14
15798: PUSH
15799: LD_INT 15
15801: PUSH
15802: LD_INT 16
15804: PUSH
15805: LD_INT 17
15807: PUSH
15808: LD_INT 18
15810: PUSH
15811: LD_INT 19
15813: PUSH
15814: LD_INT 20
15816: PUSH
15817: LD_INT 21
15819: PUSH
15820: LD_INT 22
15822: PUSH
15823: LD_INT 23
15825: PUSH
15826: LD_INT 24
15828: PUSH
15829: LD_INT 25
15831: PUSH
15832: LD_INT 26
15834: PUSH
15835: LD_INT 27
15837: PUSH
15838: LD_INT 28
15840: PUSH
15841: LD_INT 29
15843: PUSH
15844: LD_INT 30
15846: PUSH
15847: LD_INT 31
15849: PUSH
15850: LD_INT 32
15852: PUSH
15853: LD_INT 33
15855: PUSH
15856: LD_INT 34
15858: PUSH
15859: LD_INT 35
15861: PUSH
15862: LD_INT 36
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 101
15905: PUSH
15906: LD_INT 102
15908: PUSH
15909: LD_INT 103
15911: PUSH
15912: LD_INT 104
15914: PUSH
15915: LD_INT 105
15917: PUSH
15918: LD_INT 106
15920: PUSH
15921: LD_INT 107
15923: PUSH
15924: LD_INT 108
15926: PUSH
15927: LD_INT 109
15929: PUSH
15930: LD_INT 110
15932: PUSH
15933: LD_INT 111
15935: PUSH
15936: LD_INT 112
15938: PUSH
15939: LD_INT 113
15941: PUSH
15942: LD_INT 114
15944: PUSH
15945: LD_INT 115
15947: PUSH
15948: LD_INT 116
15950: PUSH
15951: LD_INT 117
15953: PUSH
15954: LD_INT 118
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: ST_TO_ADDR
15981: GO 15984
15983: POP
// end else
15984: GO 16215
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15986: LD_ADDR_VAR 0 1
15990: PUSH
15991: LD_INT 1
15993: PUSH
15994: LD_INT 2
15996: PUSH
15997: LD_INT 3
15999: PUSH
16000: LD_INT 4
16002: PUSH
16003: LD_INT 5
16005: PUSH
16006: LD_INT 6
16008: PUSH
16009: LD_INT 7
16011: PUSH
16012: LD_INT 8
16014: PUSH
16015: LD_INT 9
16017: PUSH
16018: LD_INT 10
16020: PUSH
16021: LD_INT 11
16023: PUSH
16024: LD_INT 12
16026: PUSH
16027: LD_INT 13
16029: PUSH
16030: LD_INT 14
16032: PUSH
16033: LD_INT 15
16035: PUSH
16036: LD_INT 16
16038: PUSH
16039: LD_INT 17
16041: PUSH
16042: LD_INT 18
16044: PUSH
16045: LD_INT 19
16047: PUSH
16048: LD_INT 20
16050: PUSH
16051: LD_INT 21
16053: PUSH
16054: LD_INT 22
16056: PUSH
16057: LD_INT 23
16059: PUSH
16060: LD_INT 24
16062: PUSH
16063: LD_INT 25
16065: PUSH
16066: LD_INT 26
16068: PUSH
16069: LD_INT 27
16071: PUSH
16072: LD_INT 28
16074: PUSH
16075: LD_INT 29
16077: PUSH
16078: LD_INT 30
16080: PUSH
16081: LD_INT 31
16083: PUSH
16084: LD_INT 32
16086: PUSH
16087: LD_INT 33
16089: PUSH
16090: LD_INT 34
16092: PUSH
16093: LD_INT 35
16095: PUSH
16096: LD_INT 36
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 101
16139: PUSH
16140: LD_INT 102
16142: PUSH
16143: LD_INT 103
16145: PUSH
16146: LD_INT 104
16148: PUSH
16149: LD_INT 105
16151: PUSH
16152: LD_INT 106
16154: PUSH
16155: LD_INT 107
16157: PUSH
16158: LD_INT 108
16160: PUSH
16161: LD_INT 109
16163: PUSH
16164: LD_INT 110
16166: PUSH
16167: LD_INT 111
16169: PUSH
16170: LD_INT 112
16172: PUSH
16173: LD_INT 113
16175: PUSH
16176: LD_INT 114
16178: PUSH
16179: LD_INT 115
16181: PUSH
16182: LD_INT 116
16184: PUSH
16185: LD_INT 117
16187: PUSH
16188: LD_INT 118
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: ST_TO_ADDR
// if result then
16215: LD_VAR 0 1
16219: IFFALSE 16508
// begin normal :=  ;
16221: LD_ADDR_VAR 0 3
16225: PUSH
16226: LD_STRING 
16228: ST_TO_ADDR
// hardcore :=  ;
16229: LD_ADDR_VAR 0 4
16233: PUSH
16234: LD_STRING 
16236: ST_TO_ADDR
// for i = 1 to normalCounter do
16237: LD_ADDR_VAR 0 5
16241: PUSH
16242: DOUBLE
16243: LD_INT 1
16245: DEC
16246: ST_TO_ADDR
16247: LD_EXP 34
16251: PUSH
16252: FOR_TO
16253: IFFALSE 16354
// begin tmp := 0 ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_STRING 0
16262: ST_TO_ADDR
// if result [ 1 ] then
16263: LD_VAR 0 1
16267: PUSH
16268: LD_INT 1
16270: ARRAY
16271: IFFALSE 16336
// if result [ 1 ] [ 1 ] = i then
16273: LD_VAR 0 1
16277: PUSH
16278: LD_INT 1
16280: ARRAY
16281: PUSH
16282: LD_INT 1
16284: ARRAY
16285: PUSH
16286: LD_VAR 0 5
16290: EQUAL
16291: IFFALSE 16336
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16293: LD_ADDR_VAR 0 1
16297: PUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: LD_INT 1
16305: PPUSH
16306: LD_VAR 0 1
16310: PUSH
16311: LD_INT 1
16313: ARRAY
16314: PPUSH
16315: LD_INT 1
16317: PPUSH
16318: CALL_OW 3
16322: PPUSH
16323: CALL_OW 1
16327: ST_TO_ADDR
// tmp := 1 ;
16328: LD_ADDR_VAR 0 2
16332: PUSH
16333: LD_STRING 1
16335: ST_TO_ADDR
// end ; normal := normal & tmp ;
16336: LD_ADDR_VAR 0 3
16340: PUSH
16341: LD_VAR 0 3
16345: PUSH
16346: LD_VAR 0 2
16350: STR
16351: ST_TO_ADDR
// end ;
16352: GO 16252
16354: POP
16355: POP
// for i = 1 to hardcoreCounter do
16356: LD_ADDR_VAR 0 5
16360: PUSH
16361: DOUBLE
16362: LD_INT 1
16364: DEC
16365: ST_TO_ADDR
16366: LD_EXP 35
16370: PUSH
16371: FOR_TO
16372: IFFALSE 16477
// begin tmp := 0 ;
16374: LD_ADDR_VAR 0 2
16378: PUSH
16379: LD_STRING 0
16381: ST_TO_ADDR
// if result [ 2 ] then
16382: LD_VAR 0 1
16386: PUSH
16387: LD_INT 2
16389: ARRAY
16390: IFFALSE 16459
// if result [ 2 ] [ 1 ] = 100 + i then
16392: LD_VAR 0 1
16396: PUSH
16397: LD_INT 2
16399: ARRAY
16400: PUSH
16401: LD_INT 1
16403: ARRAY
16404: PUSH
16405: LD_INT 100
16407: PUSH
16408: LD_VAR 0 5
16412: PLUS
16413: EQUAL
16414: IFFALSE 16459
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16416: LD_ADDR_VAR 0 1
16420: PUSH
16421: LD_VAR 0 1
16425: PPUSH
16426: LD_INT 2
16428: PPUSH
16429: LD_VAR 0 1
16433: PUSH
16434: LD_INT 2
16436: ARRAY
16437: PPUSH
16438: LD_INT 1
16440: PPUSH
16441: CALL_OW 3
16445: PPUSH
16446: CALL_OW 1
16450: ST_TO_ADDR
// tmp := 1 ;
16451: LD_ADDR_VAR 0 2
16455: PUSH
16456: LD_STRING 1
16458: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16459: LD_ADDR_VAR 0 4
16463: PUSH
16464: LD_VAR 0 4
16468: PUSH
16469: LD_VAR 0 2
16473: STR
16474: ST_TO_ADDR
// end ;
16475: GO 16371
16477: POP
16478: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16479: LD_STRING getStreamItemsFromMission("
16481: PUSH
16482: LD_VAR 0 3
16486: STR
16487: PUSH
16488: LD_STRING ","
16490: STR
16491: PUSH
16492: LD_VAR 0 4
16496: STR
16497: PUSH
16498: LD_STRING ")
16500: STR
16501: PPUSH
16502: CALL_OW 559
// end else
16506: GO 16515
// ToLua ( getStreamItemsFromMission("","") ) ;
16508: LD_STRING getStreamItemsFromMission("","")
16510: PPUSH
16511: CALL_OW 559
// end ;
16515: LD_VAR 0 1
16519: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16520: LD_EXP 33
16524: PUSH
16525: LD_EXP 38
16529: AND
16530: IFFALSE 16654
16532: GO 16534
16534: DISABLE
16535: LD_INT 0
16537: PPUSH
16538: PPUSH
// begin enable ;
16539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16540: LD_ADDR_VAR 0 2
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_OWVAR 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: LD_INT 34
16562: PUSH
16563: LD_INT 7
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 34
16572: PUSH
16573: LD_INT 45
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 34
16582: PUSH
16583: LD_INT 28
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 34
16592: PUSH
16593: LD_INT 47
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PPUSH
16611: CALL_OW 69
16615: ST_TO_ADDR
// if not tmp then
16616: LD_VAR 0 2
16620: NOT
16621: IFFALSE 16625
// exit ;
16623: GO 16654
// for i in tmp do
16625: LD_ADDR_VAR 0 1
16629: PUSH
16630: LD_VAR 0 2
16634: PUSH
16635: FOR_IN
16636: IFFALSE 16652
// begin SetLives ( i , 0 ) ;
16638: LD_VAR 0 1
16642: PPUSH
16643: LD_INT 0
16645: PPUSH
16646: CALL_OW 234
// end ;
16650: GO 16635
16652: POP
16653: POP
// end ;
16654: PPOPN 2
16656: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16657: LD_EXP 33
16661: PUSH
16662: LD_EXP 39
16666: AND
16667: IFFALSE 16751
16669: GO 16671
16671: DISABLE
16672: LD_INT 0
16674: PPUSH
16675: PPUSH
// begin enable ;
16676: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16677: LD_ADDR_VAR 0 2
16681: PUSH
16682: LD_INT 22
16684: PUSH
16685: LD_OWVAR 2
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 32
16696: PUSH
16697: LD_INT 3
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PPUSH
16708: CALL_OW 69
16712: ST_TO_ADDR
// if not tmp then
16713: LD_VAR 0 2
16717: NOT
16718: IFFALSE 16722
// exit ;
16720: GO 16751
// for i in tmp do
16722: LD_ADDR_VAR 0 1
16726: PUSH
16727: LD_VAR 0 2
16731: PUSH
16732: FOR_IN
16733: IFFALSE 16749
// begin SetLives ( i , 0 ) ;
16735: LD_VAR 0 1
16739: PPUSH
16740: LD_INT 0
16742: PPUSH
16743: CALL_OW 234
// end ;
16747: GO 16732
16749: POP
16750: POP
// end ;
16751: PPOPN 2
16753: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16754: LD_EXP 33
16758: PUSH
16759: LD_EXP 36
16763: AND
16764: IFFALSE 16857
16766: GO 16768
16768: DISABLE
16769: LD_INT 0
16771: PPUSH
// begin enable ;
16772: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16773: LD_ADDR_VAR 0 1
16777: PUSH
16778: LD_INT 22
16780: PUSH
16781: LD_OWVAR 2
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 2
16792: PUSH
16793: LD_INT 25
16795: PUSH
16796: LD_INT 5
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 25
16805: PUSH
16806: LD_INT 9
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 25
16815: PUSH
16816: LD_INT 8
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PPUSH
16833: CALL_OW 69
16837: PUSH
16838: FOR_IN
16839: IFFALSE 16855
// begin SetClass ( i , 1 ) ;
16841: LD_VAR 0 1
16845: PPUSH
16846: LD_INT 1
16848: PPUSH
16849: CALL_OW 336
// end ;
16853: GO 16838
16855: POP
16856: POP
// end ;
16857: PPOPN 1
16859: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16860: LD_EXP 33
16864: PUSH
16865: LD_EXP 37
16869: AND
16870: PUSH
16871: LD_OWVAR 65
16875: PUSH
16876: LD_INT 7
16878: LESS
16879: AND
16880: IFFALSE 16894
16882: GO 16884
16884: DISABLE
// begin enable ;
16885: ENABLE
// game_speed := 7 ;
16886: LD_ADDR_OWVAR 65
16890: PUSH
16891: LD_INT 7
16893: ST_TO_ADDR
// end ;
16894: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16895: LD_EXP 33
16899: PUSH
16900: LD_EXP 40
16904: AND
16905: IFFALSE 17107
16907: GO 16909
16909: DISABLE
16910: LD_INT 0
16912: PPUSH
16913: PPUSH
16914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16915: LD_ADDR_VAR 0 3
16919: PUSH
16920: LD_INT 81
16922: PUSH
16923: LD_OWVAR 2
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 21
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PPUSH
16946: CALL_OW 69
16950: ST_TO_ADDR
// if not tmp then
16951: LD_VAR 0 3
16955: NOT
16956: IFFALSE 16960
// exit ;
16958: GO 17107
// if tmp > 5 then
16960: LD_VAR 0 3
16964: PUSH
16965: LD_INT 5
16967: GREATER
16968: IFFALSE 16980
// k := 5 else
16970: LD_ADDR_VAR 0 2
16974: PUSH
16975: LD_INT 5
16977: ST_TO_ADDR
16978: GO 16990
// k := tmp ;
16980: LD_ADDR_VAR 0 2
16984: PUSH
16985: LD_VAR 0 3
16989: ST_TO_ADDR
// for i := 1 to k do
16990: LD_ADDR_VAR 0 1
16994: PUSH
16995: DOUBLE
16996: LD_INT 1
16998: DEC
16999: ST_TO_ADDR
17000: LD_VAR 0 2
17004: PUSH
17005: FOR_TO
17006: IFFALSE 17105
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17008: LD_VAR 0 3
17012: PUSH
17013: LD_VAR 0 1
17017: ARRAY
17018: PPUSH
17019: LD_VAR 0 1
17023: PUSH
17024: LD_INT 4
17026: MOD
17027: PUSH
17028: LD_INT 1
17030: PLUS
17031: PPUSH
17032: CALL_OW 259
17036: PUSH
17037: LD_INT 10
17039: LESS
17040: IFFALSE 17103
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17042: LD_VAR 0 3
17046: PUSH
17047: LD_VAR 0 1
17051: ARRAY
17052: PPUSH
17053: LD_VAR 0 1
17057: PUSH
17058: LD_INT 4
17060: MOD
17061: PUSH
17062: LD_INT 1
17064: PLUS
17065: PPUSH
17066: LD_VAR 0 3
17070: PUSH
17071: LD_VAR 0 1
17075: ARRAY
17076: PPUSH
17077: LD_VAR 0 1
17081: PUSH
17082: LD_INT 4
17084: MOD
17085: PUSH
17086: LD_INT 1
17088: PLUS
17089: PPUSH
17090: CALL_OW 259
17094: PUSH
17095: LD_INT 1
17097: PLUS
17098: PPUSH
17099: CALL_OW 237
17103: GO 17005
17105: POP
17106: POP
// end ;
17107: PPOPN 3
17109: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17110: LD_EXP 33
17114: PUSH
17115: LD_EXP 41
17119: AND
17120: IFFALSE 17140
17122: GO 17124
17124: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17125: LD_INT 4
17127: PPUSH
17128: LD_OWVAR 2
17132: PPUSH
17133: LD_INT 0
17135: PPUSH
17136: CALL_OW 324
17140: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17141: LD_EXP 33
17145: PUSH
17146: LD_EXP 70
17150: AND
17151: IFFALSE 17171
17153: GO 17155
17155: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17156: LD_INT 19
17158: PPUSH
17159: LD_OWVAR 2
17163: PPUSH
17164: LD_INT 0
17166: PPUSH
17167: CALL_OW 324
17171: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17172: LD_EXP 33
17176: PUSH
17177: LD_EXP 42
17181: AND
17182: IFFALSE 17284
17184: GO 17186
17186: DISABLE
17187: LD_INT 0
17189: PPUSH
17190: PPUSH
// begin enable ;
17191: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17192: LD_ADDR_VAR 0 2
17196: PUSH
17197: LD_INT 22
17199: PUSH
17200: LD_OWVAR 2
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: LD_INT 34
17214: PUSH
17215: LD_INT 11
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 34
17224: PUSH
17225: LD_INT 30
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL_OW 69
17245: ST_TO_ADDR
// if not tmp then
17246: LD_VAR 0 2
17250: NOT
17251: IFFALSE 17255
// exit ;
17253: GO 17284
// for i in tmp do
17255: LD_ADDR_VAR 0 1
17259: PUSH
17260: LD_VAR 0 2
17264: PUSH
17265: FOR_IN
17266: IFFALSE 17282
// begin SetLives ( i , 0 ) ;
17268: LD_VAR 0 1
17272: PPUSH
17273: LD_INT 0
17275: PPUSH
17276: CALL_OW 234
// end ;
17280: GO 17265
17282: POP
17283: POP
// end ;
17284: PPOPN 2
17286: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17287: LD_EXP 33
17291: PUSH
17292: LD_EXP 43
17296: AND
17297: IFFALSE 17317
17299: GO 17301
17301: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17302: LD_INT 32
17304: PPUSH
17305: LD_OWVAR 2
17309: PPUSH
17310: LD_INT 0
17312: PPUSH
17313: CALL_OW 324
17317: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17318: LD_EXP 33
17322: PUSH
17323: LD_EXP 44
17327: AND
17328: IFFALSE 17509
17330: GO 17332
17332: DISABLE
17333: LD_INT 0
17335: PPUSH
17336: PPUSH
17337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17338: LD_ADDR_VAR 0 2
17342: PUSH
17343: LD_INT 22
17345: PUSH
17346: LD_OWVAR 2
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 33
17357: PUSH
17358: LD_INT 3
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 69
17373: ST_TO_ADDR
// if not tmp then
17374: LD_VAR 0 2
17378: NOT
17379: IFFALSE 17383
// exit ;
17381: GO 17509
// side := 0 ;
17383: LD_ADDR_VAR 0 3
17387: PUSH
17388: LD_INT 0
17390: ST_TO_ADDR
// for i := 1 to 8 do
17391: LD_ADDR_VAR 0 1
17395: PUSH
17396: DOUBLE
17397: LD_INT 1
17399: DEC
17400: ST_TO_ADDR
17401: LD_INT 8
17403: PUSH
17404: FOR_TO
17405: IFFALSE 17453
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17407: LD_OWVAR 2
17411: PUSH
17412: LD_VAR 0 1
17416: NONEQUAL
17417: PUSH
17418: LD_OWVAR 2
17422: PPUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: CALL_OW 81
17432: PUSH
17433: LD_INT 2
17435: EQUAL
17436: AND
17437: IFFALSE 17451
// begin side := i ;
17439: LD_ADDR_VAR 0 3
17443: PUSH
17444: LD_VAR 0 1
17448: ST_TO_ADDR
// break ;
17449: GO 17453
// end ;
17451: GO 17404
17453: POP
17454: POP
// if not side then
17455: LD_VAR 0 3
17459: NOT
17460: IFFALSE 17464
// exit ;
17462: GO 17509
// for i := 1 to tmp do
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: DOUBLE
17470: LD_INT 1
17472: DEC
17473: ST_TO_ADDR
17474: LD_VAR 0 2
17478: PUSH
17479: FOR_TO
17480: IFFALSE 17507
// if Prob ( 60 ) then
17482: LD_INT 60
17484: PPUSH
17485: CALL_OW 13
17489: IFFALSE 17505
// SetSide ( i , side ) ;
17491: LD_VAR 0 1
17495: PPUSH
17496: LD_VAR 0 3
17500: PPUSH
17501: CALL_OW 235
17505: GO 17479
17507: POP
17508: POP
// end ;
17509: PPOPN 3
17511: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17512: LD_EXP 33
17516: PUSH
17517: LD_EXP 46
17521: AND
17522: IFFALSE 17641
17524: GO 17526
17526: DISABLE
17527: LD_INT 0
17529: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17530: LD_ADDR_VAR 0 1
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_OWVAR 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 21
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 3
17559: PUSH
17560: LD_INT 23
17562: PUSH
17563: LD_INT 0
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: PPUSH
17579: CALL_OW 69
17583: PUSH
17584: FOR_IN
17585: IFFALSE 17639
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17587: LD_VAR 0 1
17591: PPUSH
17592: CALL_OW 257
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 2
17602: PUSH
17603: LD_INT 3
17605: PUSH
17606: LD_INT 4
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: IN
17615: IFFALSE 17637
// SetClass ( un , rand ( 1 , 4 ) ) ;
17617: LD_VAR 0 1
17621: PPUSH
17622: LD_INT 1
17624: PPUSH
17625: LD_INT 4
17627: PPUSH
17628: CALL_OW 12
17632: PPUSH
17633: CALL_OW 336
17637: GO 17584
17639: POP
17640: POP
// end ;
17641: PPOPN 1
17643: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17644: LD_EXP 33
17648: PUSH
17649: LD_EXP 45
17653: AND
17654: IFFALSE 17733
17656: GO 17658
17658: DISABLE
17659: LD_INT 0
17661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17662: LD_ADDR_VAR 0 1
17666: PUSH
17667: LD_INT 22
17669: PUSH
17670: LD_OWVAR 2
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 21
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PPUSH
17693: CALL_OW 69
17697: ST_TO_ADDR
// if not tmp then
17698: LD_VAR 0 1
17702: NOT
17703: IFFALSE 17707
// exit ;
17705: GO 17733
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17707: LD_VAR 0 1
17711: PUSH
17712: LD_INT 1
17714: PPUSH
17715: LD_VAR 0 1
17719: PPUSH
17720: CALL_OW 12
17724: ARRAY
17725: PPUSH
17726: LD_INT 100
17728: PPUSH
17729: CALL_OW 234
// end ;
17733: PPOPN 1
17735: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17736: LD_EXP 33
17740: PUSH
17741: LD_EXP 47
17745: AND
17746: IFFALSE 17844
17748: GO 17750
17750: DISABLE
17751: LD_INT 0
17753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17754: LD_ADDR_VAR 0 1
17758: PUSH
17759: LD_INT 22
17761: PUSH
17762: LD_OWVAR 2
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 21
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PPUSH
17785: CALL_OW 69
17789: ST_TO_ADDR
// if not tmp then
17790: LD_VAR 0 1
17794: NOT
17795: IFFALSE 17799
// exit ;
17797: GO 17844
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17799: LD_VAR 0 1
17803: PUSH
17804: LD_INT 1
17806: PPUSH
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 12
17816: ARRAY
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: LD_INT 4
17823: PPUSH
17824: CALL_OW 12
17828: PPUSH
17829: LD_INT 3000
17831: PPUSH
17832: LD_INT 9000
17834: PPUSH
17835: CALL_OW 12
17839: PPUSH
17840: CALL_OW 492
// end ;
17844: PPOPN 1
17846: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17847: LD_EXP 33
17851: PUSH
17852: LD_EXP 48
17856: AND
17857: IFFALSE 17877
17859: GO 17861
17861: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17862: LD_INT 1
17864: PPUSH
17865: LD_OWVAR 2
17869: PPUSH
17870: LD_INT 0
17872: PPUSH
17873: CALL_OW 324
17877: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17878: LD_EXP 33
17882: PUSH
17883: LD_EXP 49
17887: AND
17888: IFFALSE 17971
17890: GO 17892
17892: DISABLE
17893: LD_INT 0
17895: PPUSH
17896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17897: LD_ADDR_VAR 0 2
17901: PUSH
17902: LD_INT 22
17904: PUSH
17905: LD_OWVAR 2
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 21
17916: PUSH
17917: LD_INT 3
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 69
17932: ST_TO_ADDR
// if not tmp then
17933: LD_VAR 0 2
17937: NOT
17938: IFFALSE 17942
// exit ;
17940: GO 17971
// for i in tmp do
17942: LD_ADDR_VAR 0 1
17946: PUSH
17947: LD_VAR 0 2
17951: PUSH
17952: FOR_IN
17953: IFFALSE 17969
// SetBLevel ( i , 10 ) ;
17955: LD_VAR 0 1
17959: PPUSH
17960: LD_INT 10
17962: PPUSH
17963: CALL_OW 241
17967: GO 17952
17969: POP
17970: POP
// end ;
17971: PPOPN 2
17973: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17974: LD_EXP 33
17978: PUSH
17979: LD_EXP 50
17983: AND
17984: IFFALSE 18095
17986: GO 17988
17988: DISABLE
17989: LD_INT 0
17991: PPUSH
17992: PPUSH
17993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17994: LD_ADDR_VAR 0 3
17998: PUSH
17999: LD_INT 22
18001: PUSH
18002: LD_OWVAR 2
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 25
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 69
18029: ST_TO_ADDR
// if not tmp then
18030: LD_VAR 0 3
18034: NOT
18035: IFFALSE 18039
// exit ;
18037: GO 18095
// un := tmp [ rand ( 1 , tmp ) ] ;
18039: LD_ADDR_VAR 0 2
18043: PUSH
18044: LD_VAR 0 3
18048: PUSH
18049: LD_INT 1
18051: PPUSH
18052: LD_VAR 0 3
18056: PPUSH
18057: CALL_OW 12
18061: ARRAY
18062: ST_TO_ADDR
// if Crawls ( un ) then
18063: LD_VAR 0 2
18067: PPUSH
18068: CALL_OW 318
18072: IFFALSE 18083
// ComWalk ( un ) ;
18074: LD_VAR 0 2
18078: PPUSH
18079: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18083: LD_VAR 0 2
18087: PPUSH
18088: LD_INT 5
18090: PPUSH
18091: CALL_OW 336
// end ;
18095: PPOPN 3
18097: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18098: LD_EXP 33
18102: PUSH
18103: LD_EXP 51
18107: AND
18108: PUSH
18109: LD_OWVAR 67
18113: PUSH
18114: LD_INT 4
18116: LESS
18117: AND
18118: IFFALSE 18137
18120: GO 18122
18122: DISABLE
// begin Difficulty := Difficulty + 1 ;
18123: LD_ADDR_OWVAR 67
18127: PUSH
18128: LD_OWVAR 67
18132: PUSH
18133: LD_INT 1
18135: PLUS
18136: ST_TO_ADDR
// end ;
18137: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18138: LD_EXP 33
18142: PUSH
18143: LD_EXP 52
18147: AND
18148: IFFALSE 18251
18150: GO 18152
18152: DISABLE
18153: LD_INT 0
18155: PPUSH
// begin for i := 1 to 5 do
18156: LD_ADDR_VAR 0 1
18160: PUSH
18161: DOUBLE
18162: LD_INT 1
18164: DEC
18165: ST_TO_ADDR
18166: LD_INT 5
18168: PUSH
18169: FOR_TO
18170: IFFALSE 18249
// begin uc_nation := nation_nature ;
18172: LD_ADDR_OWVAR 21
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// uc_side := 0 ;
18180: LD_ADDR_OWVAR 20
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18188: LD_ADDR_OWVAR 29
18192: PUSH
18193: LD_INT 12
18195: PUSH
18196: LD_INT 12
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: ST_TO_ADDR
// hc_agressivity := 20 ;
18203: LD_ADDR_OWVAR 35
18207: PUSH
18208: LD_INT 20
18210: ST_TO_ADDR
// hc_class := class_tiger ;
18211: LD_ADDR_OWVAR 28
18215: PUSH
18216: LD_INT 14
18218: ST_TO_ADDR
// hc_gallery :=  ;
18219: LD_ADDR_OWVAR 33
18223: PUSH
18224: LD_STRING 
18226: ST_TO_ADDR
// hc_name :=  ;
18227: LD_ADDR_OWVAR 26
18231: PUSH
18232: LD_STRING 
18234: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18235: CALL_OW 44
18239: PPUSH
18240: LD_INT 0
18242: PPUSH
18243: CALL_OW 51
// end ;
18247: GO 18169
18249: POP
18250: POP
// end ;
18251: PPOPN 1
18253: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18254: LD_EXP 33
18258: PUSH
18259: LD_EXP 53
18263: AND
18264: IFFALSE 18273
18266: GO 18268
18268: DISABLE
// StreamSibBomb ;
18269: CALL 18274 0 0
18273: END
// export function StreamSibBomb ; var i , x , y ; begin
18274: LD_INT 0
18276: PPUSH
18277: PPUSH
18278: PPUSH
18279: PPUSH
// result := false ;
18280: LD_ADDR_VAR 0 1
18284: PUSH
18285: LD_INT 0
18287: ST_TO_ADDR
// for i := 1 to 16 do
18288: LD_ADDR_VAR 0 2
18292: PUSH
18293: DOUBLE
18294: LD_INT 1
18296: DEC
18297: ST_TO_ADDR
18298: LD_INT 16
18300: PUSH
18301: FOR_TO
18302: IFFALSE 18501
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18304: LD_ADDR_VAR 0 3
18308: PUSH
18309: LD_INT 10
18311: PUSH
18312: LD_INT 20
18314: PUSH
18315: LD_INT 30
18317: PUSH
18318: LD_INT 40
18320: PUSH
18321: LD_INT 50
18323: PUSH
18324: LD_INT 60
18326: PUSH
18327: LD_INT 70
18329: PUSH
18330: LD_INT 80
18332: PUSH
18333: LD_INT 90
18335: PUSH
18336: LD_INT 100
18338: PUSH
18339: LD_INT 110
18341: PUSH
18342: LD_INT 120
18344: PUSH
18345: LD_INT 130
18347: PUSH
18348: LD_INT 140
18350: PUSH
18351: LD_INT 150
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 1
18373: PPUSH
18374: LD_INT 15
18376: PPUSH
18377: CALL_OW 12
18381: ARRAY
18382: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18383: LD_ADDR_VAR 0 4
18387: PUSH
18388: LD_INT 10
18390: PUSH
18391: LD_INT 20
18393: PUSH
18394: LD_INT 30
18396: PUSH
18397: LD_INT 40
18399: PUSH
18400: LD_INT 50
18402: PUSH
18403: LD_INT 60
18405: PUSH
18406: LD_INT 70
18408: PUSH
18409: LD_INT 80
18411: PUSH
18412: LD_INT 90
18414: PUSH
18415: LD_INT 100
18417: PUSH
18418: LD_INT 110
18420: PUSH
18421: LD_INT 120
18423: PUSH
18424: LD_INT 130
18426: PUSH
18427: LD_INT 140
18429: PUSH
18430: LD_INT 150
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: PPUSH
18453: LD_INT 15
18455: PPUSH
18456: CALL_OW 12
18460: ARRAY
18461: ST_TO_ADDR
// if ValidHex ( x , y ) then
18462: LD_VAR 0 3
18466: PPUSH
18467: LD_VAR 0 4
18471: PPUSH
18472: CALL_OW 488
18476: IFFALSE 18499
// begin result := [ x , y ] ;
18478: LD_ADDR_VAR 0 1
18482: PUSH
18483: LD_VAR 0 3
18487: PUSH
18488: LD_VAR 0 4
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: ST_TO_ADDR
// break ;
18497: GO 18501
// end ; end ;
18499: GO 18301
18501: POP
18502: POP
// if result then
18503: LD_VAR 0 1
18507: IFFALSE 18567
// begin ToLua ( playSibBomb() ) ;
18509: LD_STRING playSibBomb()
18511: PPUSH
18512: CALL_OW 559
// wait ( 0 0$14 ) ;
18516: LD_INT 490
18518: PPUSH
18519: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18523: LD_VAR 0 1
18527: PUSH
18528: LD_INT 1
18530: ARRAY
18531: PPUSH
18532: LD_VAR 0 1
18536: PUSH
18537: LD_INT 2
18539: ARRAY
18540: PPUSH
18541: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18545: LD_VAR 0 1
18549: PUSH
18550: LD_INT 1
18552: ARRAY
18553: PPUSH
18554: LD_VAR 0 1
18558: PUSH
18559: LD_INT 2
18561: ARRAY
18562: PPUSH
18563: CALL_OW 429
// end ; end ;
18567: LD_VAR 0 1
18571: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18572: LD_EXP 33
18576: PUSH
18577: LD_EXP 55
18581: AND
18582: IFFALSE 18594
18584: GO 18586
18586: DISABLE
// YouLost (  ) ;
18587: LD_STRING 
18589: PPUSH
18590: CALL_OW 104
18594: END
// every 0 0$1 trigger StreamModeActive and sFog do
18595: LD_EXP 33
18599: PUSH
18600: LD_EXP 54
18604: AND
18605: IFFALSE 18619
18607: GO 18609
18609: DISABLE
// FogOff ( your_side ) ;
18610: LD_OWVAR 2
18614: PPUSH
18615: CALL_OW 344
18619: END
// every 0 0$1 trigger StreamModeActive and sSun do
18620: LD_EXP 33
18624: PUSH
18625: LD_EXP 56
18629: AND
18630: IFFALSE 18658
18632: GO 18634
18634: DISABLE
// begin solar_recharge_percent := 0 ;
18635: LD_ADDR_OWVAR 79
18639: PUSH
18640: LD_INT 0
18642: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18643: LD_INT 10500
18645: PPUSH
18646: CALL_OW 67
// solar_recharge_percent := 100 ;
18650: LD_ADDR_OWVAR 79
18654: PUSH
18655: LD_INT 100
18657: ST_TO_ADDR
// end ;
18658: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18659: LD_EXP 33
18663: PUSH
18664: LD_EXP 57
18668: AND
18669: IFFALSE 18908
18671: GO 18673
18673: DISABLE
18674: LD_INT 0
18676: PPUSH
18677: PPUSH
18678: PPUSH
// begin tmp := [ ] ;
18679: LD_ADDR_VAR 0 3
18683: PUSH
18684: EMPTY
18685: ST_TO_ADDR
// for i := 1 to 6 do
18686: LD_ADDR_VAR 0 1
18690: PUSH
18691: DOUBLE
18692: LD_INT 1
18694: DEC
18695: ST_TO_ADDR
18696: LD_INT 6
18698: PUSH
18699: FOR_TO
18700: IFFALSE 18805
// begin uc_nation := nation_nature ;
18702: LD_ADDR_OWVAR 21
18706: PUSH
18707: LD_INT 0
18709: ST_TO_ADDR
// uc_side := 0 ;
18710: LD_ADDR_OWVAR 20
18714: PUSH
18715: LD_INT 0
18717: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18718: LD_ADDR_OWVAR 29
18722: PUSH
18723: LD_INT 12
18725: PUSH
18726: LD_INT 12
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: ST_TO_ADDR
// hc_agressivity := 20 ;
18733: LD_ADDR_OWVAR 35
18737: PUSH
18738: LD_INT 20
18740: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18741: LD_ADDR_OWVAR 28
18745: PUSH
18746: LD_INT 17
18748: ST_TO_ADDR
// hc_gallery :=  ;
18749: LD_ADDR_OWVAR 33
18753: PUSH
18754: LD_STRING 
18756: ST_TO_ADDR
// hc_name :=  ;
18757: LD_ADDR_OWVAR 26
18761: PUSH
18762: LD_STRING 
18764: ST_TO_ADDR
// un := CreateHuman ;
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: CALL_OW 44
18774: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18775: LD_VAR 0 2
18779: PPUSH
18780: LD_INT 1
18782: PPUSH
18783: CALL_OW 51
// tmp := tmp ^ un ;
18787: LD_ADDR_VAR 0 3
18791: PUSH
18792: LD_VAR 0 3
18796: PUSH
18797: LD_VAR 0 2
18801: ADD
18802: ST_TO_ADDR
// end ;
18803: GO 18699
18805: POP
18806: POP
// repeat wait ( 0 0$1 ) ;
18807: LD_INT 35
18809: PPUSH
18810: CALL_OW 67
// for un in tmp do
18814: LD_ADDR_VAR 0 2
18818: PUSH
18819: LD_VAR 0 3
18823: PUSH
18824: FOR_IN
18825: IFFALSE 18899
// begin if IsDead ( un ) then
18827: LD_VAR 0 2
18831: PPUSH
18832: CALL_OW 301
18836: IFFALSE 18856
// begin tmp := tmp diff un ;
18838: LD_ADDR_VAR 0 3
18842: PUSH
18843: LD_VAR 0 3
18847: PUSH
18848: LD_VAR 0 2
18852: DIFF
18853: ST_TO_ADDR
// continue ;
18854: GO 18824
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18856: LD_VAR 0 2
18860: PPUSH
18861: LD_INT 3
18863: PUSH
18864: LD_INT 22
18866: PUSH
18867: LD_INT 0
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PPUSH
18878: CALL_OW 69
18882: PPUSH
18883: LD_VAR 0 2
18887: PPUSH
18888: CALL_OW 74
18892: PPUSH
18893: CALL_OW 115
// end ;
18897: GO 18824
18899: POP
18900: POP
// until not tmp ;
18901: LD_VAR 0 3
18905: NOT
18906: IFFALSE 18807
// end ;
18908: PPOPN 3
18910: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18911: LD_EXP 33
18915: PUSH
18916: LD_EXP 58
18920: AND
18921: IFFALSE 18975
18923: GO 18925
18925: DISABLE
// begin ToLua ( displayTroll(); ) ;
18926: LD_STRING displayTroll();
18928: PPUSH
18929: CALL_OW 559
// wait ( 3 3$00 ) ;
18933: LD_INT 6300
18935: PPUSH
18936: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18940: LD_STRING hideTroll();
18942: PPUSH
18943: CALL_OW 559
// wait ( 1 1$00 ) ;
18947: LD_INT 2100
18949: PPUSH
18950: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18954: LD_STRING displayTroll();
18956: PPUSH
18957: CALL_OW 559
// wait ( 1 1$00 ) ;
18961: LD_INT 2100
18963: PPUSH
18964: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18968: LD_STRING hideTroll();
18970: PPUSH
18971: CALL_OW 559
// end ;
18975: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18976: LD_EXP 33
18980: PUSH
18981: LD_EXP 59
18985: AND
18986: IFFALSE 19049
18988: GO 18990
18990: DISABLE
18991: LD_INT 0
18993: PPUSH
// begin p := 0 ;
18994: LD_ADDR_VAR 0 1
18998: PUSH
18999: LD_INT 0
19001: ST_TO_ADDR
// repeat game_speed := 1 ;
19002: LD_ADDR_OWVAR 65
19006: PUSH
19007: LD_INT 1
19009: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19010: LD_INT 35
19012: PPUSH
19013: CALL_OW 67
// p := p + 1 ;
19017: LD_ADDR_VAR 0 1
19021: PUSH
19022: LD_VAR 0 1
19026: PUSH
19027: LD_INT 1
19029: PLUS
19030: ST_TO_ADDR
// until p >= 60 ;
19031: LD_VAR 0 1
19035: PUSH
19036: LD_INT 60
19038: GREATEREQUAL
19039: IFFALSE 19002
// game_speed := 4 ;
19041: LD_ADDR_OWVAR 65
19045: PUSH
19046: LD_INT 4
19048: ST_TO_ADDR
// end ;
19049: PPOPN 1
19051: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19052: LD_EXP 33
19056: PUSH
19057: LD_EXP 60
19061: AND
19062: IFFALSE 19208
19064: GO 19066
19066: DISABLE
19067: LD_INT 0
19069: PPUSH
19070: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19071: LD_ADDR_VAR 0 1
19075: PUSH
19076: LD_INT 22
19078: PUSH
19079: LD_OWVAR 2
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 2
19090: PUSH
19091: LD_INT 30
19093: PUSH
19094: LD_INT 0
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 30
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PPUSH
19120: CALL_OW 69
19124: ST_TO_ADDR
// if not depot then
19125: LD_VAR 0 1
19129: NOT
19130: IFFALSE 19134
// exit ;
19132: GO 19208
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19134: LD_ADDR_VAR 0 2
19138: PUSH
19139: LD_VAR 0 1
19143: PUSH
19144: LD_INT 1
19146: PPUSH
19147: LD_VAR 0 1
19151: PPUSH
19152: CALL_OW 12
19156: ARRAY
19157: PPUSH
19158: CALL_OW 274
19162: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19163: LD_VAR 0 2
19167: PPUSH
19168: LD_INT 1
19170: PPUSH
19171: LD_INT 0
19173: PPUSH
19174: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19178: LD_VAR 0 2
19182: PPUSH
19183: LD_INT 2
19185: PPUSH
19186: LD_INT 0
19188: PPUSH
19189: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19193: LD_VAR 0 2
19197: PPUSH
19198: LD_INT 3
19200: PPUSH
19201: LD_INT 0
19203: PPUSH
19204: CALL_OW 277
// end ;
19208: PPOPN 2
19210: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19211: LD_EXP 33
19215: PUSH
19216: LD_EXP 61
19220: AND
19221: IFFALSE 19318
19223: GO 19225
19225: DISABLE
19226: LD_INT 0
19228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19229: LD_ADDR_VAR 0 1
19233: PUSH
19234: LD_INT 22
19236: PUSH
19237: LD_OWVAR 2
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 21
19248: PUSH
19249: LD_INT 1
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 3
19258: PUSH
19259: LD_INT 23
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: LIST
19277: PPUSH
19278: CALL_OW 69
19282: ST_TO_ADDR
// if not tmp then
19283: LD_VAR 0 1
19287: NOT
19288: IFFALSE 19292
// exit ;
19290: GO 19318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19292: LD_VAR 0 1
19296: PUSH
19297: LD_INT 1
19299: PPUSH
19300: LD_VAR 0 1
19304: PPUSH
19305: CALL_OW 12
19309: ARRAY
19310: PPUSH
19311: LD_INT 200
19313: PPUSH
19314: CALL_OW 234
// end ;
19318: PPOPN 1
19320: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19321: LD_EXP 33
19325: PUSH
19326: LD_EXP 62
19330: AND
19331: IFFALSE 19410
19333: GO 19335
19335: DISABLE
19336: LD_INT 0
19338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19339: LD_ADDR_VAR 0 1
19343: PUSH
19344: LD_INT 22
19346: PUSH
19347: LD_OWVAR 2
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 21
19358: PUSH
19359: LD_INT 2
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PPUSH
19370: CALL_OW 69
19374: ST_TO_ADDR
// if not tmp then
19375: LD_VAR 0 1
19379: NOT
19380: IFFALSE 19384
// exit ;
19382: GO 19410
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19384: LD_VAR 0 1
19388: PUSH
19389: LD_INT 1
19391: PPUSH
19392: LD_VAR 0 1
19396: PPUSH
19397: CALL_OW 12
19401: ARRAY
19402: PPUSH
19403: LD_INT 60
19405: PPUSH
19406: CALL_OW 234
// end ;
19410: PPOPN 1
19412: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19413: LD_EXP 33
19417: PUSH
19418: LD_EXP 63
19422: AND
19423: IFFALSE 19522
19425: GO 19427
19427: DISABLE
19428: LD_INT 0
19430: PPUSH
19431: PPUSH
// begin enable ;
19432: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19433: LD_ADDR_VAR 0 1
19437: PUSH
19438: LD_INT 22
19440: PUSH
19441: LD_OWVAR 2
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 61
19452: PUSH
19453: EMPTY
19454: LIST
19455: PUSH
19456: LD_INT 33
19458: PUSH
19459: LD_INT 2
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: LIST
19470: PPUSH
19471: CALL_OW 69
19475: ST_TO_ADDR
// if not tmp then
19476: LD_VAR 0 1
19480: NOT
19481: IFFALSE 19485
// exit ;
19483: GO 19522
// for i in tmp do
19485: LD_ADDR_VAR 0 2
19489: PUSH
19490: LD_VAR 0 1
19494: PUSH
19495: FOR_IN
19496: IFFALSE 19520
// if IsControledBy ( i ) then
19498: LD_VAR 0 2
19502: PPUSH
19503: CALL_OW 312
19507: IFFALSE 19518
// ComUnlink ( i ) ;
19509: LD_VAR 0 2
19513: PPUSH
19514: CALL_OW 136
19518: GO 19495
19520: POP
19521: POP
// end ;
19522: PPOPN 2
19524: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19525: LD_EXP 33
19529: PUSH
19530: LD_EXP 64
19534: AND
19535: IFFALSE 19675
19537: GO 19539
19539: DISABLE
19540: LD_INT 0
19542: PPUSH
19543: PPUSH
// begin ToLua ( displayPowell(); ) ;
19544: LD_STRING displayPowell();
19546: PPUSH
19547: CALL_OW 559
// uc_side := 0 ;
19551: LD_ADDR_OWVAR 20
19555: PUSH
19556: LD_INT 0
19558: ST_TO_ADDR
// uc_nation := 2 ;
19559: LD_ADDR_OWVAR 21
19563: PUSH
19564: LD_INT 2
19566: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19567: LD_ADDR_OWVAR 37
19571: PUSH
19572: LD_INT 14
19574: ST_TO_ADDR
// vc_engine := engine_siberite ;
19575: LD_ADDR_OWVAR 39
19579: PUSH
19580: LD_INT 3
19582: ST_TO_ADDR
// vc_control := control_apeman ;
19583: LD_ADDR_OWVAR 38
19587: PUSH
19588: LD_INT 5
19590: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19591: LD_ADDR_OWVAR 40
19595: PUSH
19596: LD_INT 29
19598: ST_TO_ADDR
// un := CreateVehicle ;
19599: LD_ADDR_VAR 0 2
19603: PUSH
19604: CALL_OW 45
19608: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19609: LD_VAR 0 2
19613: PPUSH
19614: LD_INT 1
19616: PPUSH
19617: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19621: LD_INT 35
19623: PPUSH
19624: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19628: LD_VAR 0 2
19632: PPUSH
19633: LD_INT 22
19635: PUSH
19636: LD_OWVAR 2
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PPUSH
19645: CALL_OW 69
19649: PPUSH
19650: LD_VAR 0 2
19654: PPUSH
19655: CALL_OW 74
19659: PPUSH
19660: CALL_OW 115
// until IsDead ( un ) ;
19664: LD_VAR 0 2
19668: PPUSH
19669: CALL_OW 301
19673: IFFALSE 19621
// end ;
19675: PPOPN 2
19677: END
// every 0 0$1 trigger StreamModeActive and sStu do
19678: LD_EXP 33
19682: PUSH
19683: LD_EXP 72
19687: AND
19688: IFFALSE 19704
19690: GO 19692
19692: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19693: LD_STRING displayStucuk();
19695: PPUSH
19696: CALL_OW 559
// ResetFog ;
19700: CALL_OW 335
// end ;
19704: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19705: LD_EXP 33
19709: PUSH
19710: LD_EXP 65
19714: AND
19715: IFFALSE 19856
19717: GO 19719
19719: DISABLE
19720: LD_INT 0
19722: PPUSH
19723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19724: LD_ADDR_VAR 0 2
19728: PUSH
19729: LD_INT 22
19731: PUSH
19732: LD_OWVAR 2
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 21
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PPUSH
19755: CALL_OW 69
19759: ST_TO_ADDR
// if not tmp then
19760: LD_VAR 0 2
19764: NOT
19765: IFFALSE 19769
// exit ;
19767: GO 19856
// un := tmp [ rand ( 1 , tmp ) ] ;
19769: LD_ADDR_VAR 0 1
19773: PUSH
19774: LD_VAR 0 2
19778: PUSH
19779: LD_INT 1
19781: PPUSH
19782: LD_VAR 0 2
19786: PPUSH
19787: CALL_OW 12
19791: ARRAY
19792: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19793: LD_VAR 0 1
19797: PPUSH
19798: LD_INT 0
19800: PPUSH
19801: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19805: LD_VAR 0 1
19809: PPUSH
19810: LD_OWVAR 3
19814: PUSH
19815: LD_VAR 0 1
19819: DIFF
19820: PPUSH
19821: LD_VAR 0 1
19825: PPUSH
19826: CALL_OW 74
19830: PPUSH
19831: CALL_OW 115
// wait ( 0 0$20 ) ;
19835: LD_INT 700
19837: PPUSH
19838: CALL_OW 67
// SetSide ( un , your_side ) ;
19842: LD_VAR 0 1
19846: PPUSH
19847: LD_OWVAR 2
19851: PPUSH
19852: CALL_OW 235
// end ;
19856: PPOPN 2
19858: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19859: LD_EXP 33
19863: PUSH
19864: LD_EXP 66
19868: AND
19869: IFFALSE 19975
19871: GO 19873
19873: DISABLE
19874: LD_INT 0
19876: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19877: LD_ADDR_VAR 0 1
19881: PUSH
19882: LD_INT 22
19884: PUSH
19885: LD_OWVAR 2
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: LD_INT 30
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 30
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: LIST
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PPUSH
19926: CALL_OW 69
19930: ST_TO_ADDR
// if not depot then
19931: LD_VAR 0 1
19935: NOT
19936: IFFALSE 19940
// exit ;
19938: GO 19975
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19940: LD_VAR 0 1
19944: PUSH
19945: LD_INT 1
19947: ARRAY
19948: PPUSH
19949: CALL_OW 250
19953: PPUSH
19954: LD_VAR 0 1
19958: PUSH
19959: LD_INT 1
19961: ARRAY
19962: PPUSH
19963: CALL_OW 251
19967: PPUSH
19968: LD_INT 70
19970: PPUSH
19971: CALL_OW 495
// end ;
19975: PPOPN 1
19977: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19978: LD_EXP 33
19982: PUSH
19983: LD_EXP 67
19987: AND
19988: IFFALSE 20199
19990: GO 19992
19992: DISABLE
19993: LD_INT 0
19995: PPUSH
19996: PPUSH
19997: PPUSH
19998: PPUSH
19999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20000: LD_ADDR_VAR 0 5
20004: PUSH
20005: LD_INT 22
20007: PUSH
20008: LD_OWVAR 2
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 21
20019: PUSH
20020: LD_INT 1
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PPUSH
20031: CALL_OW 69
20035: ST_TO_ADDR
// if not tmp then
20036: LD_VAR 0 5
20040: NOT
20041: IFFALSE 20045
// exit ;
20043: GO 20199
// for i in tmp do
20045: LD_ADDR_VAR 0 1
20049: PUSH
20050: LD_VAR 0 5
20054: PUSH
20055: FOR_IN
20056: IFFALSE 20197
// begin d := rand ( 0 , 5 ) ;
20058: LD_ADDR_VAR 0 4
20062: PUSH
20063: LD_INT 0
20065: PPUSH
20066: LD_INT 5
20068: PPUSH
20069: CALL_OW 12
20073: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20074: LD_ADDR_VAR 0 2
20078: PUSH
20079: LD_VAR 0 1
20083: PPUSH
20084: CALL_OW 250
20088: PPUSH
20089: LD_VAR 0 4
20093: PPUSH
20094: LD_INT 3
20096: PPUSH
20097: LD_INT 12
20099: PPUSH
20100: CALL_OW 12
20104: PPUSH
20105: CALL_OW 272
20109: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20110: LD_ADDR_VAR 0 3
20114: PUSH
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 251
20124: PPUSH
20125: LD_VAR 0 4
20129: PPUSH
20130: LD_INT 3
20132: PPUSH
20133: LD_INT 12
20135: PPUSH
20136: CALL_OW 12
20140: PPUSH
20141: CALL_OW 273
20145: ST_TO_ADDR
// if ValidHex ( x , y ) then
20146: LD_VAR 0 2
20150: PPUSH
20151: LD_VAR 0 3
20155: PPUSH
20156: CALL_OW 488
20160: IFFALSE 20195
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20162: LD_VAR 0 1
20166: PPUSH
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_VAR 0 3
20176: PPUSH
20177: LD_INT 3
20179: PPUSH
20180: LD_INT 6
20182: PPUSH
20183: CALL_OW 12
20187: PPUSH
20188: LD_INT 1
20190: PPUSH
20191: CALL_OW 483
// end ;
20195: GO 20055
20197: POP
20198: POP
// end ;
20199: PPOPN 5
20201: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20202: LD_EXP 33
20206: PUSH
20207: LD_EXP 68
20211: AND
20212: IFFALSE 20306
20214: GO 20216
20216: DISABLE
20217: LD_INT 0
20219: PPUSH
20220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20221: LD_ADDR_VAR 0 2
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_OWVAR 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 32
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 21
20250: PUSH
20251: LD_INT 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: ST_TO_ADDR
// if not tmp then
20268: LD_VAR 0 2
20272: NOT
20273: IFFALSE 20277
// exit ;
20275: GO 20306
// for i in tmp do
20277: LD_ADDR_VAR 0 1
20281: PUSH
20282: LD_VAR 0 2
20286: PUSH
20287: FOR_IN
20288: IFFALSE 20304
// SetFuel ( i , 0 ) ;
20290: LD_VAR 0 1
20294: PPUSH
20295: LD_INT 0
20297: PPUSH
20298: CALL_OW 240
20302: GO 20287
20304: POP
20305: POP
// end ;
20306: PPOPN 2
20308: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20309: LD_EXP 33
20313: PUSH
20314: LD_EXP 69
20318: AND
20319: IFFALSE 20385
20321: GO 20323
20323: DISABLE
20324: LD_INT 0
20326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_INT 22
20334: PUSH
20335: LD_OWVAR 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 30
20346: PUSH
20347: LD_INT 29
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PPUSH
20358: CALL_OW 69
20362: ST_TO_ADDR
// if not tmp then
20363: LD_VAR 0 1
20367: NOT
20368: IFFALSE 20372
// exit ;
20370: GO 20385
// DestroyUnit ( tmp [ 1 ] ) ;
20372: LD_VAR 0 1
20376: PUSH
20377: LD_INT 1
20379: ARRAY
20380: PPUSH
20381: CALL_OW 65
// end ;
20385: PPOPN 1
20387: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20388: LD_EXP 33
20392: PUSH
20393: LD_EXP 71
20397: AND
20398: IFFALSE 20527
20400: GO 20402
20402: DISABLE
20403: LD_INT 0
20405: PPUSH
// begin uc_side := 0 ;
20406: LD_ADDR_OWVAR 20
20410: PUSH
20411: LD_INT 0
20413: ST_TO_ADDR
// uc_nation := nation_arabian ;
20414: LD_ADDR_OWVAR 21
20418: PUSH
20419: LD_INT 2
20421: ST_TO_ADDR
// hc_gallery :=  ;
20422: LD_ADDR_OWVAR 33
20426: PUSH
20427: LD_STRING 
20429: ST_TO_ADDR
// hc_name :=  ;
20430: LD_ADDR_OWVAR 26
20434: PUSH
20435: LD_STRING 
20437: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20438: LD_INT 1
20440: PPUSH
20441: LD_INT 11
20443: PPUSH
20444: LD_INT 10
20446: PPUSH
20447: CALL_OW 380
// un := CreateHuman ;
20451: LD_ADDR_VAR 0 1
20455: PUSH
20456: CALL_OW 44
20460: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20461: LD_VAR 0 1
20465: PPUSH
20466: LD_INT 1
20468: PPUSH
20469: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20473: LD_INT 35
20475: PPUSH
20476: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20480: LD_VAR 0 1
20484: PPUSH
20485: LD_INT 22
20487: PUSH
20488: LD_OWVAR 2
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PPUSH
20497: CALL_OW 69
20501: PPUSH
20502: LD_VAR 0 1
20506: PPUSH
20507: CALL_OW 74
20511: PPUSH
20512: CALL_OW 115
// until IsDead ( un ) ;
20516: LD_VAR 0 1
20520: PPUSH
20521: CALL_OW 301
20525: IFFALSE 20473
// end ;
20527: PPOPN 1
20529: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20530: LD_EXP 33
20534: PUSH
20535: LD_EXP 73
20539: AND
20540: IFFALSE 20552
20542: GO 20544
20544: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20545: LD_STRING earthquake(getX(game), 0, 32)
20547: PPUSH
20548: CALL_OW 559
20552: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20553: LD_EXP 33
20557: PUSH
20558: LD_EXP 74
20562: AND
20563: IFFALSE 20654
20565: GO 20567
20567: DISABLE
20568: LD_INT 0
20570: PPUSH
// begin enable ;
20571: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20572: LD_ADDR_VAR 0 1
20576: PUSH
20577: LD_INT 22
20579: PUSH
20580: LD_OWVAR 2
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 21
20591: PUSH
20592: LD_INT 2
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 33
20601: PUSH
20602: LD_INT 3
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: LIST
20613: PPUSH
20614: CALL_OW 69
20618: ST_TO_ADDR
// if not tmp then
20619: LD_VAR 0 1
20623: NOT
20624: IFFALSE 20628
// exit ;
20626: GO 20654
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20628: LD_VAR 0 1
20632: PUSH
20633: LD_INT 1
20635: PPUSH
20636: LD_VAR 0 1
20640: PPUSH
20641: CALL_OW 12
20645: ARRAY
20646: PPUSH
20647: LD_INT 1
20649: PPUSH
20650: CALL_OW 234
// end ;
20654: PPOPN 1
20656: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20657: LD_EXP 33
20661: PUSH
20662: LD_EXP 75
20666: AND
20667: IFFALSE 20808
20669: GO 20671
20671: DISABLE
20672: LD_INT 0
20674: PPUSH
20675: PPUSH
20676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20677: LD_ADDR_VAR 0 3
20681: PUSH
20682: LD_INT 22
20684: PUSH
20685: LD_OWVAR 2
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 25
20696: PUSH
20697: LD_INT 1
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PPUSH
20708: CALL_OW 69
20712: ST_TO_ADDR
// if not tmp then
20713: LD_VAR 0 3
20717: NOT
20718: IFFALSE 20722
// exit ;
20720: GO 20808
// un := tmp [ rand ( 1 , tmp ) ] ;
20722: LD_ADDR_VAR 0 2
20726: PUSH
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 1
20734: PPUSH
20735: LD_VAR 0 3
20739: PPUSH
20740: CALL_OW 12
20744: ARRAY
20745: ST_TO_ADDR
// if Crawls ( un ) then
20746: LD_VAR 0 2
20750: PPUSH
20751: CALL_OW 318
20755: IFFALSE 20766
// ComWalk ( un ) ;
20757: LD_VAR 0 2
20761: PPUSH
20762: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20766: LD_VAR 0 2
20770: PPUSH
20771: LD_INT 9
20773: PPUSH
20774: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20778: LD_INT 28
20780: PPUSH
20781: LD_OWVAR 2
20785: PPUSH
20786: LD_INT 2
20788: PPUSH
20789: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20793: LD_INT 29
20795: PPUSH
20796: LD_OWVAR 2
20800: PPUSH
20801: LD_INT 2
20803: PPUSH
20804: CALL_OW 322
// end ;
20808: PPOPN 3
20810: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20811: LD_EXP 33
20815: PUSH
20816: LD_EXP 76
20820: AND
20821: IFFALSE 20932
20823: GO 20825
20825: DISABLE
20826: LD_INT 0
20828: PPUSH
20829: PPUSH
20830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20831: LD_ADDR_VAR 0 3
20835: PUSH
20836: LD_INT 22
20838: PUSH
20839: LD_OWVAR 2
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 25
20850: PUSH
20851: LD_INT 1
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PPUSH
20862: CALL_OW 69
20866: ST_TO_ADDR
// if not tmp then
20867: LD_VAR 0 3
20871: NOT
20872: IFFALSE 20876
// exit ;
20874: GO 20932
// un := tmp [ rand ( 1 , tmp ) ] ;
20876: LD_ADDR_VAR 0 2
20880: PUSH
20881: LD_VAR 0 3
20885: PUSH
20886: LD_INT 1
20888: PPUSH
20889: LD_VAR 0 3
20893: PPUSH
20894: CALL_OW 12
20898: ARRAY
20899: ST_TO_ADDR
// if Crawls ( un ) then
20900: LD_VAR 0 2
20904: PPUSH
20905: CALL_OW 318
20909: IFFALSE 20920
// ComWalk ( un ) ;
20911: LD_VAR 0 2
20915: PPUSH
20916: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20920: LD_VAR 0 2
20924: PPUSH
20925: LD_INT 8
20927: PPUSH
20928: CALL_OW 336
// end ;
20932: PPOPN 3
20934: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20935: LD_EXP 33
20939: PUSH
20940: LD_EXP 77
20944: AND
20945: IFFALSE 21089
20947: GO 20949
20949: DISABLE
20950: LD_INT 0
20952: PPUSH
20953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20954: LD_ADDR_VAR 0 2
20958: PUSH
20959: LD_INT 22
20961: PUSH
20962: LD_OWVAR 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 21
20973: PUSH
20974: LD_INT 2
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 2
20983: PUSH
20984: LD_INT 34
20986: PUSH
20987: LD_INT 12
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 34
20996: PUSH
20997: LD_INT 51
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 34
21006: PUSH
21007: LD_INT 32
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: LIST
21024: PPUSH
21025: CALL_OW 69
21029: ST_TO_ADDR
// if not tmp then
21030: LD_VAR 0 2
21034: NOT
21035: IFFALSE 21039
// exit ;
21037: GO 21089
// for i in tmp do
21039: LD_ADDR_VAR 0 1
21043: PUSH
21044: LD_VAR 0 2
21048: PUSH
21049: FOR_IN
21050: IFFALSE 21087
// if GetCargo ( i , mat_artifact ) = 0 then
21052: LD_VAR 0 1
21056: PPUSH
21057: LD_INT 4
21059: PPUSH
21060: CALL_OW 289
21064: PUSH
21065: LD_INT 0
21067: EQUAL
21068: IFFALSE 21085
// SetCargo ( i , mat_siberit , 100 ) ;
21070: LD_VAR 0 1
21074: PPUSH
21075: LD_INT 3
21077: PPUSH
21078: LD_INT 100
21080: PPUSH
21081: CALL_OW 290
21085: GO 21049
21087: POP
21088: POP
// end ;
21089: PPOPN 2
21091: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21092: LD_EXP 33
21096: PUSH
21097: LD_EXP 78
21101: AND
21102: IFFALSE 21285
21104: GO 21106
21106: DISABLE
21107: LD_INT 0
21109: PPUSH
21110: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21111: LD_ADDR_VAR 0 2
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PPUSH
21128: CALL_OW 69
21132: ST_TO_ADDR
// if not tmp then
21133: LD_VAR 0 2
21137: NOT
21138: IFFALSE 21142
// exit ;
21140: GO 21285
// for i := 1 to 2 do
21142: LD_ADDR_VAR 0 1
21146: PUSH
21147: DOUBLE
21148: LD_INT 1
21150: DEC
21151: ST_TO_ADDR
21152: LD_INT 2
21154: PUSH
21155: FOR_TO
21156: IFFALSE 21283
// begin uc_side := your_side ;
21158: LD_ADDR_OWVAR 20
21162: PUSH
21163: LD_OWVAR 2
21167: ST_TO_ADDR
// uc_nation := nation_american ;
21168: LD_ADDR_OWVAR 21
21172: PUSH
21173: LD_INT 1
21175: ST_TO_ADDR
// vc_chassis := us_morphling ;
21176: LD_ADDR_OWVAR 37
21180: PUSH
21181: LD_INT 5
21183: ST_TO_ADDR
// vc_engine := engine_siberite ;
21184: LD_ADDR_OWVAR 39
21188: PUSH
21189: LD_INT 3
21191: ST_TO_ADDR
// vc_control := control_computer ;
21192: LD_ADDR_OWVAR 38
21196: PUSH
21197: LD_INT 3
21199: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21200: LD_ADDR_OWVAR 40
21204: PUSH
21205: LD_INT 10
21207: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21208: LD_VAR 0 2
21212: PUSH
21213: LD_INT 1
21215: ARRAY
21216: PPUSH
21217: CALL_OW 310
21221: NOT
21222: IFFALSE 21269
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21224: CALL_OW 45
21228: PPUSH
21229: LD_VAR 0 2
21233: PUSH
21234: LD_INT 1
21236: ARRAY
21237: PPUSH
21238: CALL_OW 250
21242: PPUSH
21243: LD_VAR 0 2
21247: PUSH
21248: LD_INT 1
21250: ARRAY
21251: PPUSH
21252: CALL_OW 251
21256: PPUSH
21257: LD_INT 12
21259: PPUSH
21260: LD_INT 1
21262: PPUSH
21263: CALL_OW 50
21267: GO 21281
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21269: CALL_OW 45
21273: PPUSH
21274: LD_INT 1
21276: PPUSH
21277: CALL_OW 51
// end ;
21281: GO 21155
21283: POP
21284: POP
// end ;
21285: PPOPN 2
21287: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21288: LD_EXP 33
21292: PUSH
21293: LD_EXP 79
21297: AND
21298: IFFALSE 21520
21300: GO 21302
21302: DISABLE
21303: LD_INT 0
21305: PPUSH
21306: PPUSH
21307: PPUSH
21308: PPUSH
21309: PPUSH
21310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21311: LD_ADDR_VAR 0 6
21315: PUSH
21316: LD_INT 22
21318: PUSH
21319: LD_OWVAR 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 21
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 3
21340: PUSH
21341: LD_INT 23
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: PPUSH
21360: CALL_OW 69
21364: ST_TO_ADDR
// if not tmp then
21365: LD_VAR 0 6
21369: NOT
21370: IFFALSE 21374
// exit ;
21372: GO 21520
// s1 := rand ( 1 , 4 ) ;
21374: LD_ADDR_VAR 0 2
21378: PUSH
21379: LD_INT 1
21381: PPUSH
21382: LD_INT 4
21384: PPUSH
21385: CALL_OW 12
21389: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21390: LD_ADDR_VAR 0 4
21394: PUSH
21395: LD_VAR 0 6
21399: PUSH
21400: LD_INT 1
21402: ARRAY
21403: PPUSH
21404: LD_VAR 0 2
21408: PPUSH
21409: CALL_OW 259
21413: ST_TO_ADDR
// if s1 = 1 then
21414: LD_VAR 0 2
21418: PUSH
21419: LD_INT 1
21421: EQUAL
21422: IFFALSE 21442
// s2 := rand ( 2 , 4 ) else
21424: LD_ADDR_VAR 0 3
21428: PUSH
21429: LD_INT 2
21431: PPUSH
21432: LD_INT 4
21434: PPUSH
21435: CALL_OW 12
21439: ST_TO_ADDR
21440: GO 21450
// s2 := 1 ;
21442: LD_ADDR_VAR 0 3
21446: PUSH
21447: LD_INT 1
21449: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21450: LD_ADDR_VAR 0 5
21454: PUSH
21455: LD_VAR 0 6
21459: PUSH
21460: LD_INT 1
21462: ARRAY
21463: PPUSH
21464: LD_VAR 0 3
21468: PPUSH
21469: CALL_OW 259
21473: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21474: LD_VAR 0 6
21478: PUSH
21479: LD_INT 1
21481: ARRAY
21482: PPUSH
21483: LD_VAR 0 2
21487: PPUSH
21488: LD_VAR 0 5
21492: PPUSH
21493: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21497: LD_VAR 0 6
21501: PUSH
21502: LD_INT 1
21504: ARRAY
21505: PPUSH
21506: LD_VAR 0 3
21510: PPUSH
21511: LD_VAR 0 4
21515: PPUSH
21516: CALL_OW 237
// end ;
21520: PPOPN 6
21522: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21523: LD_EXP 33
21527: PUSH
21528: LD_EXP 80
21532: AND
21533: IFFALSE 21612
21535: GO 21537
21537: DISABLE
21538: LD_INT 0
21540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21541: LD_ADDR_VAR 0 1
21545: PUSH
21546: LD_INT 22
21548: PUSH
21549: LD_OWVAR 2
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 30
21560: PUSH
21561: LD_INT 3
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PPUSH
21572: CALL_OW 69
21576: ST_TO_ADDR
// if not tmp then
21577: LD_VAR 0 1
21581: NOT
21582: IFFALSE 21586
// exit ;
21584: GO 21612
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21586: LD_VAR 0 1
21590: PUSH
21591: LD_INT 1
21593: PPUSH
21594: LD_VAR 0 1
21598: PPUSH
21599: CALL_OW 12
21603: ARRAY
21604: PPUSH
21605: LD_INT 1
21607: PPUSH
21608: CALL_OW 234
// end ;
21612: PPOPN 1
21614: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21615: LD_EXP 33
21619: PUSH
21620: LD_EXP 81
21624: AND
21625: IFFALSE 21737
21627: GO 21629
21629: DISABLE
21630: LD_INT 0
21632: PPUSH
21633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21634: LD_ADDR_VAR 0 2
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_OWVAR 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 2
21653: PUSH
21654: LD_INT 30
21656: PUSH
21657: LD_INT 27
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 30
21666: PUSH
21667: LD_INT 26
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 30
21676: PUSH
21677: LD_INT 28
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PPUSH
21694: CALL_OW 69
21698: ST_TO_ADDR
// if not tmp then
21699: LD_VAR 0 2
21703: NOT
21704: IFFALSE 21708
// exit ;
21706: GO 21737
// for i in tmp do
21708: LD_ADDR_VAR 0 1
21712: PUSH
21713: LD_VAR 0 2
21717: PUSH
21718: FOR_IN
21719: IFFALSE 21735
// SetLives ( i , 1 ) ;
21721: LD_VAR 0 1
21725: PPUSH
21726: LD_INT 1
21728: PPUSH
21729: CALL_OW 234
21733: GO 21718
21735: POP
21736: POP
// end ;
21737: PPOPN 2
21739: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21740: LD_EXP 33
21744: PUSH
21745: LD_EXP 82
21749: AND
21750: IFFALSE 22037
21752: GO 21754
21754: DISABLE
21755: LD_INT 0
21757: PPUSH
21758: PPUSH
21759: PPUSH
// begin i := rand ( 1 , 7 ) ;
21760: LD_ADDR_VAR 0 1
21764: PUSH
21765: LD_INT 1
21767: PPUSH
21768: LD_INT 7
21770: PPUSH
21771: CALL_OW 12
21775: ST_TO_ADDR
// case i of 1 :
21776: LD_VAR 0 1
21780: PUSH
21781: LD_INT 1
21783: DOUBLE
21784: EQUAL
21785: IFTRUE 21789
21787: GO 21799
21789: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21790: LD_STRING earthquake(getX(game), 0, 32)
21792: PPUSH
21793: CALL_OW 559
21797: GO 22037
21799: LD_INT 2
21801: DOUBLE
21802: EQUAL
21803: IFTRUE 21807
21805: GO 21821
21807: POP
// begin ToLua ( displayStucuk(); ) ;
21808: LD_STRING displayStucuk();
21810: PPUSH
21811: CALL_OW 559
// ResetFog ;
21815: CALL_OW 335
// end ; 3 :
21819: GO 22037
21821: LD_INT 3
21823: DOUBLE
21824: EQUAL
21825: IFTRUE 21829
21827: GO 21933
21829: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21830: LD_ADDR_VAR 0 2
21834: PUSH
21835: LD_INT 22
21837: PUSH
21838: LD_OWVAR 2
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 25
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PPUSH
21861: CALL_OW 69
21865: ST_TO_ADDR
// if not tmp then
21866: LD_VAR 0 2
21870: NOT
21871: IFFALSE 21875
// exit ;
21873: GO 22037
// un := tmp [ rand ( 1 , tmp ) ] ;
21875: LD_ADDR_VAR 0 3
21879: PUSH
21880: LD_VAR 0 2
21884: PUSH
21885: LD_INT 1
21887: PPUSH
21888: LD_VAR 0 2
21892: PPUSH
21893: CALL_OW 12
21897: ARRAY
21898: ST_TO_ADDR
// if Crawls ( un ) then
21899: LD_VAR 0 3
21903: PPUSH
21904: CALL_OW 318
21908: IFFALSE 21919
// ComWalk ( un ) ;
21910: LD_VAR 0 3
21914: PPUSH
21915: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21919: LD_VAR 0 3
21923: PPUSH
21924: LD_INT 8
21926: PPUSH
21927: CALL_OW 336
// end ; 4 :
21931: GO 22037
21933: LD_INT 4
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 22015
21941: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21942: LD_ADDR_VAR 0 2
21946: PUSH
21947: LD_INT 22
21949: PUSH
21950: LD_OWVAR 2
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 30
21961: PUSH
21962: LD_INT 29
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PPUSH
21973: CALL_OW 69
21977: ST_TO_ADDR
// if not tmp then
21978: LD_VAR 0 2
21982: NOT
21983: IFFALSE 21987
// exit ;
21985: GO 22037
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21987: LD_VAR 0 2
21991: PUSH
21992: LD_INT 1
21994: ARRAY
21995: PPUSH
21996: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22000: LD_VAR 0 2
22004: PUSH
22005: LD_INT 1
22007: ARRAY
22008: PPUSH
22009: CALL_OW 65
// end ; 5 .. 7 :
22013: GO 22037
22015: LD_INT 5
22017: DOUBLE
22018: GREATEREQUAL
22019: IFFALSE 22027
22021: LD_INT 7
22023: DOUBLE
22024: LESSEQUAL
22025: IFTRUE 22029
22027: GO 22036
22029: POP
// StreamSibBomb ; end ;
22030: CALL 18274 0 0
22034: GO 22037
22036: POP
// end ;
22037: PPOPN 3
22039: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22040: LD_EXP 33
22044: PUSH
22045: LD_EXP 83
22049: AND
22050: IFFALSE 22206
22052: GO 22054
22054: DISABLE
22055: LD_INT 0
22057: PPUSH
22058: PPUSH
22059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22060: LD_ADDR_VAR 0 2
22064: PUSH
22065: LD_INT 81
22067: PUSH
22068: LD_OWVAR 2
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: LD_INT 21
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 21
22092: PUSH
22093: LD_INT 2
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: LIST
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 69
22113: ST_TO_ADDR
// if not tmp then
22114: LD_VAR 0 2
22118: NOT
22119: IFFALSE 22123
// exit ;
22121: GO 22206
// p := 0 ;
22123: LD_ADDR_VAR 0 3
22127: PUSH
22128: LD_INT 0
22130: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22131: LD_INT 35
22133: PPUSH
22134: CALL_OW 67
// p := p + 1 ;
22138: LD_ADDR_VAR 0 3
22142: PUSH
22143: LD_VAR 0 3
22147: PUSH
22148: LD_INT 1
22150: PLUS
22151: ST_TO_ADDR
// for i in tmp do
22152: LD_ADDR_VAR 0 1
22156: PUSH
22157: LD_VAR 0 2
22161: PUSH
22162: FOR_IN
22163: IFFALSE 22194
// if GetLives ( i ) < 1000 then
22165: LD_VAR 0 1
22169: PPUSH
22170: CALL_OW 256
22174: PUSH
22175: LD_INT 1000
22177: LESS
22178: IFFALSE 22192
// SetLives ( i , 1000 ) ;
22180: LD_VAR 0 1
22184: PPUSH
22185: LD_INT 1000
22187: PPUSH
22188: CALL_OW 234
22192: GO 22162
22194: POP
22195: POP
// until p > 20 ;
22196: LD_VAR 0 3
22200: PUSH
22201: LD_INT 20
22203: GREATER
22204: IFFALSE 22131
// end ;
22206: PPOPN 3
22208: END
// every 0 0$1 trigger StreamModeActive and sTime do
22209: LD_EXP 33
22213: PUSH
22214: LD_EXP 84
22218: AND
22219: IFFALSE 22254
22221: GO 22223
22223: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22224: LD_INT 28
22226: PPUSH
22227: LD_OWVAR 2
22231: PPUSH
22232: LD_INT 2
22234: PPUSH
22235: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22239: LD_INT 30
22241: PPUSH
22242: LD_OWVAR 2
22246: PPUSH
22247: LD_INT 2
22249: PPUSH
22250: CALL_OW 322
// end ;
22254: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22255: LD_EXP 33
22259: PUSH
22260: LD_EXP 85
22264: AND
22265: IFFALSE 22386
22267: GO 22269
22269: DISABLE
22270: LD_INT 0
22272: PPUSH
22273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22274: LD_ADDR_VAR 0 2
22278: PUSH
22279: LD_INT 22
22281: PUSH
22282: LD_OWVAR 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 21
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 3
22303: PUSH
22304: LD_INT 23
22306: PUSH
22307: LD_INT 0
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: PPUSH
22323: CALL_OW 69
22327: ST_TO_ADDR
// if not tmp then
22328: LD_VAR 0 2
22332: NOT
22333: IFFALSE 22337
// exit ;
22335: GO 22386
// for i in tmp do
22337: LD_ADDR_VAR 0 1
22341: PUSH
22342: LD_VAR 0 2
22346: PUSH
22347: FOR_IN
22348: IFFALSE 22384
// begin if Crawls ( i ) then
22350: LD_VAR 0 1
22354: PPUSH
22355: CALL_OW 318
22359: IFFALSE 22370
// ComWalk ( i ) ;
22361: LD_VAR 0 1
22365: PPUSH
22366: CALL_OW 138
// SetClass ( i , 2 ) ;
22370: LD_VAR 0 1
22374: PPUSH
22375: LD_INT 2
22377: PPUSH
22378: CALL_OW 336
// end ;
22382: GO 22347
22384: POP
22385: POP
// end ;
22386: PPOPN 2
22388: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22389: LD_EXP 33
22393: PUSH
22394: LD_EXP 86
22398: AND
22399: IFFALSE 22687
22401: GO 22403
22403: DISABLE
22404: LD_INT 0
22406: PPUSH
22407: PPUSH
22408: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22409: LD_OWVAR 2
22413: PPUSH
22414: LD_INT 9
22416: PPUSH
22417: LD_INT 1
22419: PPUSH
22420: LD_INT 1
22422: PPUSH
22423: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22427: LD_INT 9
22429: PPUSH
22430: LD_OWVAR 2
22434: PPUSH
22435: CALL_OW 343
// uc_side := 9 ;
22439: LD_ADDR_OWVAR 20
22443: PUSH
22444: LD_INT 9
22446: ST_TO_ADDR
// uc_nation := 2 ;
22447: LD_ADDR_OWVAR 21
22451: PUSH
22452: LD_INT 2
22454: ST_TO_ADDR
// hc_name := Dark Warrior ;
22455: LD_ADDR_OWVAR 26
22459: PUSH
22460: LD_STRING Dark Warrior
22462: ST_TO_ADDR
// hc_gallery :=  ;
22463: LD_ADDR_OWVAR 33
22467: PUSH
22468: LD_STRING 
22470: ST_TO_ADDR
// hc_noskilllimit := true ;
22471: LD_ADDR_OWVAR 76
22475: PUSH
22476: LD_INT 1
22478: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22479: LD_ADDR_OWVAR 31
22483: PUSH
22484: LD_INT 30
22486: PUSH
22487: LD_INT 30
22489: PUSH
22490: LD_INT 30
22492: PUSH
22493: LD_INT 30
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: ST_TO_ADDR
// un := CreateHuman ;
22502: LD_ADDR_VAR 0 3
22506: PUSH
22507: CALL_OW 44
22511: ST_TO_ADDR
// hc_noskilllimit := false ;
22512: LD_ADDR_OWVAR 76
22516: PUSH
22517: LD_INT 0
22519: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22520: LD_VAR 0 3
22524: PPUSH
22525: LD_INT 1
22527: PPUSH
22528: CALL_OW 51
// ToLua ( playRanger() ) ;
22532: LD_STRING playRanger()
22534: PPUSH
22535: CALL_OW 559
// p := 0 ;
22539: LD_ADDR_VAR 0 2
22543: PUSH
22544: LD_INT 0
22546: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22547: LD_INT 35
22549: PPUSH
22550: CALL_OW 67
// p := p + 1 ;
22554: LD_ADDR_VAR 0 2
22558: PUSH
22559: LD_VAR 0 2
22563: PUSH
22564: LD_INT 1
22566: PLUS
22567: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22568: LD_VAR 0 3
22572: PPUSH
22573: CALL_OW 256
22577: PUSH
22578: LD_INT 1000
22580: LESS
22581: IFFALSE 22595
// SetLives ( un , 1000 ) ;
22583: LD_VAR 0 3
22587: PPUSH
22588: LD_INT 1000
22590: PPUSH
22591: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22595: LD_VAR 0 3
22599: PPUSH
22600: LD_INT 81
22602: PUSH
22603: LD_OWVAR 2
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 91
22614: PUSH
22615: LD_VAR 0 3
22619: PUSH
22620: LD_INT 30
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PPUSH
22632: CALL_OW 69
22636: PPUSH
22637: LD_VAR 0 3
22641: PPUSH
22642: CALL_OW 74
22646: PPUSH
22647: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22651: LD_VAR 0 2
22655: PUSH
22656: LD_INT 80
22658: GREATER
22659: PUSH
22660: LD_VAR 0 3
22664: PPUSH
22665: CALL_OW 301
22669: OR
22670: IFFALSE 22547
// if un then
22672: LD_VAR 0 3
22676: IFFALSE 22687
// RemoveUnit ( un ) ;
22678: LD_VAR 0 3
22682: PPUSH
22683: CALL_OW 64
// end ;
22687: PPOPN 3
22689: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22690: LD_EXP 87
22694: IFFALSE 22810
22696: GO 22698
22698: DISABLE
22699: LD_INT 0
22701: PPUSH
22702: PPUSH
22703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22704: LD_ADDR_VAR 0 2
22708: PUSH
22709: LD_INT 81
22711: PUSH
22712: LD_OWVAR 2
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 21
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PPUSH
22735: CALL_OW 69
22739: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22740: LD_STRING playComputer()
22742: PPUSH
22743: CALL_OW 559
// if not tmp then
22747: LD_VAR 0 2
22751: NOT
22752: IFFALSE 22756
// exit ;
22754: GO 22810
// for i in tmp do
22756: LD_ADDR_VAR 0 1
22760: PUSH
22761: LD_VAR 0 2
22765: PUSH
22766: FOR_IN
22767: IFFALSE 22808
// for j := 1 to 4 do
22769: LD_ADDR_VAR 0 3
22773: PUSH
22774: DOUBLE
22775: LD_INT 1
22777: DEC
22778: ST_TO_ADDR
22779: LD_INT 4
22781: PUSH
22782: FOR_TO
22783: IFFALSE 22804
// SetSkill ( i , j , 10 ) ;
22785: LD_VAR 0 1
22789: PPUSH
22790: LD_VAR 0 3
22794: PPUSH
22795: LD_INT 10
22797: PPUSH
22798: CALL_OW 237
22802: GO 22782
22804: POP
22805: POP
22806: GO 22766
22808: POP
22809: POP
// end ;
22810: PPOPN 3
22812: END
// every 0 0$1 trigger s30 do var i , tmp ;
22813: LD_EXP 88
22817: IFFALSE 22886
22819: GO 22821
22821: DISABLE
22822: LD_INT 0
22824: PPUSH
22825: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22826: LD_ADDR_VAR 0 2
22830: PUSH
22831: LD_INT 22
22833: PUSH
22834: LD_OWVAR 2
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PPUSH
22843: CALL_OW 69
22847: ST_TO_ADDR
// if not tmp then
22848: LD_VAR 0 2
22852: NOT
22853: IFFALSE 22857
// exit ;
22855: GO 22886
// for i in tmp do
22857: LD_ADDR_VAR 0 1
22861: PUSH
22862: LD_VAR 0 2
22866: PUSH
22867: FOR_IN
22868: IFFALSE 22884
// SetLives ( i , 300 ) ;
22870: LD_VAR 0 1
22874: PPUSH
22875: LD_INT 300
22877: PPUSH
22878: CALL_OW 234
22882: GO 22867
22884: POP
22885: POP
// end ;
22886: PPOPN 2
22888: END
// every 0 0$1 trigger s60 do var i , tmp ;
22889: LD_EXP 89
22893: IFFALSE 22962
22895: GO 22897
22897: DISABLE
22898: LD_INT 0
22900: PPUSH
22901: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22902: LD_ADDR_VAR 0 2
22906: PUSH
22907: LD_INT 22
22909: PUSH
22910: LD_OWVAR 2
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PPUSH
22919: CALL_OW 69
22923: ST_TO_ADDR
// if not tmp then
22924: LD_VAR 0 2
22928: NOT
22929: IFFALSE 22933
// exit ;
22931: GO 22962
// for i in tmp do
22933: LD_ADDR_VAR 0 1
22937: PUSH
22938: LD_VAR 0 2
22942: PUSH
22943: FOR_IN
22944: IFFALSE 22960
// SetLives ( i , 600 ) ;
22946: LD_VAR 0 1
22950: PPUSH
22951: LD_INT 600
22953: PPUSH
22954: CALL_OW 234
22958: GO 22943
22960: POP
22961: POP
// end ;
22962: PPOPN 2
22964: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22965: LD_INT 0
22967: PPUSH
// case cmd of 301 :
22968: LD_VAR 0 1
22972: PUSH
22973: LD_INT 301
22975: DOUBLE
22976: EQUAL
22977: IFTRUE 22981
22979: GO 23013
22981: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22982: LD_VAR 0 6
22986: PPUSH
22987: LD_VAR 0 7
22991: PPUSH
22992: LD_VAR 0 8
22996: PPUSH
22997: LD_VAR 0 4
23001: PPUSH
23002: LD_VAR 0 5
23006: PPUSH
23007: CALL 24214 0 5
23011: GO 23134
23013: LD_INT 302
23015: DOUBLE
23016: EQUAL
23017: IFTRUE 23021
23019: GO 23058
23021: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23022: LD_VAR 0 6
23026: PPUSH
23027: LD_VAR 0 7
23031: PPUSH
23032: LD_VAR 0 8
23036: PPUSH
23037: LD_VAR 0 9
23041: PPUSH
23042: LD_VAR 0 4
23046: PPUSH
23047: LD_VAR 0 5
23051: PPUSH
23052: CALL 24305 0 6
23056: GO 23134
23058: LD_INT 303
23060: DOUBLE
23061: EQUAL
23062: IFTRUE 23066
23064: GO 23103
23066: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23067: LD_VAR 0 6
23071: PPUSH
23072: LD_VAR 0 7
23076: PPUSH
23077: LD_VAR 0 8
23081: PPUSH
23082: LD_VAR 0 9
23086: PPUSH
23087: LD_VAR 0 4
23091: PPUSH
23092: LD_VAR 0 5
23096: PPUSH
23097: CALL 23139 0 6
23101: GO 23134
23103: LD_INT 304
23105: DOUBLE
23106: EQUAL
23107: IFTRUE 23111
23109: GO 23133
23111: POP
// hHackTeleport ( unit , x , y ) ; end ;
23112: LD_VAR 0 2
23116: PPUSH
23117: LD_VAR 0 4
23121: PPUSH
23122: LD_VAR 0 5
23126: PPUSH
23127: CALL 24898 0 3
23131: GO 23134
23133: POP
// end ;
23134: LD_VAR 0 12
23138: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23139: LD_INT 0
23141: PPUSH
23142: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23143: LD_VAR 0 1
23147: PUSH
23148: LD_INT 1
23150: LESS
23151: PUSH
23152: LD_VAR 0 1
23156: PUSH
23157: LD_INT 3
23159: GREATER
23160: OR
23161: PUSH
23162: LD_VAR 0 5
23166: PPUSH
23167: LD_VAR 0 6
23171: PPUSH
23172: CALL_OW 428
23176: OR
23177: IFFALSE 23181
// exit ;
23179: GO 23901
// uc_side := your_side ;
23181: LD_ADDR_OWVAR 20
23185: PUSH
23186: LD_OWVAR 2
23190: ST_TO_ADDR
// uc_nation := nation ;
23191: LD_ADDR_OWVAR 21
23195: PUSH
23196: LD_VAR 0 1
23200: ST_TO_ADDR
// bc_level = 1 ;
23201: LD_ADDR_OWVAR 43
23205: PUSH
23206: LD_INT 1
23208: ST_TO_ADDR
// case btype of 1 :
23209: LD_VAR 0 2
23213: PUSH
23214: LD_INT 1
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23233
23222: POP
// bc_type := b_depot ; 2 :
23223: LD_ADDR_OWVAR 42
23227: PUSH
23228: LD_INT 0
23230: ST_TO_ADDR
23231: GO 23845
23233: LD_INT 2
23235: DOUBLE
23236: EQUAL
23237: IFTRUE 23241
23239: GO 23252
23241: POP
// bc_type := b_warehouse ; 3 :
23242: LD_ADDR_OWVAR 42
23246: PUSH
23247: LD_INT 1
23249: ST_TO_ADDR
23250: GO 23845
23252: LD_INT 3
23254: DOUBLE
23255: EQUAL
23256: IFTRUE 23260
23258: GO 23271
23260: POP
// bc_type := b_lab ; 4 .. 9 :
23261: LD_ADDR_OWVAR 42
23265: PUSH
23266: LD_INT 6
23268: ST_TO_ADDR
23269: GO 23845
23271: LD_INT 4
23273: DOUBLE
23274: GREATEREQUAL
23275: IFFALSE 23283
23277: LD_INT 9
23279: DOUBLE
23280: LESSEQUAL
23281: IFTRUE 23285
23283: GO 23337
23285: POP
// begin bc_type := b_lab_half ;
23286: LD_ADDR_OWVAR 42
23290: PUSH
23291: LD_INT 7
23293: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23294: LD_ADDR_OWVAR 44
23298: PUSH
23299: LD_INT 10
23301: PUSH
23302: LD_INT 11
23304: PUSH
23305: LD_INT 12
23307: PUSH
23308: LD_INT 15
23310: PUSH
23311: LD_INT 14
23313: PUSH
23314: LD_INT 13
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: PUSH
23325: LD_VAR 0 2
23329: PUSH
23330: LD_INT 3
23332: MINUS
23333: ARRAY
23334: ST_TO_ADDR
// end ; 10 .. 13 :
23335: GO 23845
23337: LD_INT 10
23339: DOUBLE
23340: GREATEREQUAL
23341: IFFALSE 23349
23343: LD_INT 13
23345: DOUBLE
23346: LESSEQUAL
23347: IFTRUE 23351
23349: GO 23428
23351: POP
// begin bc_type := b_lab_full ;
23352: LD_ADDR_OWVAR 42
23356: PUSH
23357: LD_INT 8
23359: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23360: LD_ADDR_OWVAR 44
23364: PUSH
23365: LD_INT 10
23367: PUSH
23368: LD_INT 12
23370: PUSH
23371: LD_INT 14
23373: PUSH
23374: LD_INT 13
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: PUSH
23383: LD_VAR 0 2
23387: PUSH
23388: LD_INT 9
23390: MINUS
23391: ARRAY
23392: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23393: LD_ADDR_OWVAR 45
23397: PUSH
23398: LD_INT 11
23400: PUSH
23401: LD_INT 15
23403: PUSH
23404: LD_INT 12
23406: PUSH
23407: LD_INT 15
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: PUSH
23416: LD_VAR 0 2
23420: PUSH
23421: LD_INT 9
23423: MINUS
23424: ARRAY
23425: ST_TO_ADDR
// end ; 14 :
23426: GO 23845
23428: LD_INT 14
23430: DOUBLE
23431: EQUAL
23432: IFTRUE 23436
23434: GO 23447
23436: POP
// bc_type := b_workshop ; 15 :
23437: LD_ADDR_OWVAR 42
23441: PUSH
23442: LD_INT 2
23444: ST_TO_ADDR
23445: GO 23845
23447: LD_INT 15
23449: DOUBLE
23450: EQUAL
23451: IFTRUE 23455
23453: GO 23466
23455: POP
// bc_type := b_factory ; 16 :
23456: LD_ADDR_OWVAR 42
23460: PUSH
23461: LD_INT 3
23463: ST_TO_ADDR
23464: GO 23845
23466: LD_INT 16
23468: DOUBLE
23469: EQUAL
23470: IFTRUE 23474
23472: GO 23485
23474: POP
// bc_type := b_ext_gun ; 17 :
23475: LD_ADDR_OWVAR 42
23479: PUSH
23480: LD_INT 17
23482: ST_TO_ADDR
23483: GO 23845
23485: LD_INT 17
23487: DOUBLE
23488: EQUAL
23489: IFTRUE 23493
23491: GO 23521
23493: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23494: LD_ADDR_OWVAR 42
23498: PUSH
23499: LD_INT 19
23501: PUSH
23502: LD_INT 23
23504: PUSH
23505: LD_INT 19
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: PUSH
23513: LD_VAR 0 1
23517: ARRAY
23518: ST_TO_ADDR
23519: GO 23845
23521: LD_INT 18
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23540
23529: POP
// bc_type := b_ext_radar ; 19 :
23530: LD_ADDR_OWVAR 42
23534: PUSH
23535: LD_INT 20
23537: ST_TO_ADDR
23538: GO 23845
23540: LD_INT 19
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23559
23548: POP
// bc_type := b_ext_radio ; 20 :
23549: LD_ADDR_OWVAR 42
23553: PUSH
23554: LD_INT 22
23556: ST_TO_ADDR
23557: GO 23845
23559: LD_INT 20
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23578
23567: POP
// bc_type := b_ext_siberium ; 21 :
23568: LD_ADDR_OWVAR 42
23572: PUSH
23573: LD_INT 21
23575: ST_TO_ADDR
23576: GO 23845
23578: LD_INT 21
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23597
23586: POP
// bc_type := b_ext_computer ; 22 :
23587: LD_ADDR_OWVAR 42
23591: PUSH
23592: LD_INT 24
23594: ST_TO_ADDR
23595: GO 23845
23597: LD_INT 22
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23616
23605: POP
// bc_type := b_ext_track ; 23 :
23606: LD_ADDR_OWVAR 42
23610: PUSH
23611: LD_INT 16
23613: ST_TO_ADDR
23614: GO 23845
23616: LD_INT 23
23618: DOUBLE
23619: EQUAL
23620: IFTRUE 23624
23622: GO 23635
23624: POP
// bc_type := b_ext_laser ; 24 :
23625: LD_ADDR_OWVAR 42
23629: PUSH
23630: LD_INT 25
23632: ST_TO_ADDR
23633: GO 23845
23635: LD_INT 24
23637: DOUBLE
23638: EQUAL
23639: IFTRUE 23643
23641: GO 23654
23643: POP
// bc_type := b_control_tower ; 25 :
23644: LD_ADDR_OWVAR 42
23648: PUSH
23649: LD_INT 36
23651: ST_TO_ADDR
23652: GO 23845
23654: LD_INT 25
23656: DOUBLE
23657: EQUAL
23658: IFTRUE 23662
23660: GO 23673
23662: POP
// bc_type := b_breastwork ; 26 :
23663: LD_ADDR_OWVAR 42
23667: PUSH
23668: LD_INT 31
23670: ST_TO_ADDR
23671: GO 23845
23673: LD_INT 26
23675: DOUBLE
23676: EQUAL
23677: IFTRUE 23681
23679: GO 23692
23681: POP
// bc_type := b_bunker ; 27 :
23682: LD_ADDR_OWVAR 42
23686: PUSH
23687: LD_INT 32
23689: ST_TO_ADDR
23690: GO 23845
23692: LD_INT 27
23694: DOUBLE
23695: EQUAL
23696: IFTRUE 23700
23698: GO 23711
23700: POP
// bc_type := b_turret ; 28 :
23701: LD_ADDR_OWVAR 42
23705: PUSH
23706: LD_INT 33
23708: ST_TO_ADDR
23709: GO 23845
23711: LD_INT 28
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23730
23719: POP
// bc_type := b_armoury ; 29 :
23720: LD_ADDR_OWVAR 42
23724: PUSH
23725: LD_INT 4
23727: ST_TO_ADDR
23728: GO 23845
23730: LD_INT 29
23732: DOUBLE
23733: EQUAL
23734: IFTRUE 23738
23736: GO 23749
23738: POP
// bc_type := b_barracks ; 30 :
23739: LD_ADDR_OWVAR 42
23743: PUSH
23744: LD_INT 5
23746: ST_TO_ADDR
23747: GO 23845
23749: LD_INT 30
23751: DOUBLE
23752: EQUAL
23753: IFTRUE 23757
23755: GO 23768
23757: POP
// bc_type := b_solar_power ; 31 :
23758: LD_ADDR_OWVAR 42
23762: PUSH
23763: LD_INT 27
23765: ST_TO_ADDR
23766: GO 23845
23768: LD_INT 31
23770: DOUBLE
23771: EQUAL
23772: IFTRUE 23776
23774: GO 23787
23776: POP
// bc_type := b_oil_power ; 32 :
23777: LD_ADDR_OWVAR 42
23781: PUSH
23782: LD_INT 26
23784: ST_TO_ADDR
23785: GO 23845
23787: LD_INT 32
23789: DOUBLE
23790: EQUAL
23791: IFTRUE 23795
23793: GO 23806
23795: POP
// bc_type := b_siberite_power ; 33 :
23796: LD_ADDR_OWVAR 42
23800: PUSH
23801: LD_INT 28
23803: ST_TO_ADDR
23804: GO 23845
23806: LD_INT 33
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23825
23814: POP
// bc_type := b_oil_mine ; 34 :
23815: LD_ADDR_OWVAR 42
23819: PUSH
23820: LD_INT 29
23822: ST_TO_ADDR
23823: GO 23845
23825: LD_INT 34
23827: DOUBLE
23828: EQUAL
23829: IFTRUE 23833
23831: GO 23844
23833: POP
// bc_type := b_siberite_mine ; end ;
23834: LD_ADDR_OWVAR 42
23838: PUSH
23839: LD_INT 30
23841: ST_TO_ADDR
23842: GO 23845
23844: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23845: LD_ADDR_VAR 0 8
23849: PUSH
23850: LD_VAR 0 5
23854: PPUSH
23855: LD_VAR 0 6
23859: PPUSH
23860: LD_VAR 0 3
23864: PPUSH
23865: CALL_OW 47
23869: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23870: LD_OWVAR 42
23874: PUSH
23875: LD_INT 32
23877: PUSH
23878: LD_INT 33
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: IN
23885: IFFALSE 23901
// PlaceWeaponTurret ( b , weapon ) ;
23887: LD_VAR 0 8
23891: PPUSH
23892: LD_VAR 0 4
23896: PPUSH
23897: CALL_OW 431
// end ;
23901: LD_VAR 0 7
23905: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23906: LD_INT 0
23908: PPUSH
23909: PPUSH
23910: PPUSH
23911: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23912: LD_ADDR_VAR 0 4
23916: PUSH
23917: LD_INT 22
23919: PUSH
23920: LD_OWVAR 2
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 2
23931: PUSH
23932: LD_INT 30
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 30
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PPUSH
23961: CALL_OW 69
23965: ST_TO_ADDR
// if not tmp then
23966: LD_VAR 0 4
23970: NOT
23971: IFFALSE 23975
// exit ;
23973: GO 24034
// for i in tmp do
23975: LD_ADDR_VAR 0 2
23979: PUSH
23980: LD_VAR 0 4
23984: PUSH
23985: FOR_IN
23986: IFFALSE 24032
// for j = 1 to 3 do
23988: LD_ADDR_VAR 0 3
23992: PUSH
23993: DOUBLE
23994: LD_INT 1
23996: DEC
23997: ST_TO_ADDR
23998: LD_INT 3
24000: PUSH
24001: FOR_TO
24002: IFFALSE 24028
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24004: LD_VAR 0 2
24008: PPUSH
24009: CALL_OW 274
24013: PPUSH
24014: LD_VAR 0 3
24018: PPUSH
24019: LD_INT 99999
24021: PPUSH
24022: CALL_OW 277
24026: GO 24001
24028: POP
24029: POP
24030: GO 23985
24032: POP
24033: POP
// end ;
24034: LD_VAR 0 1
24038: RET
// export function hHackSetLevel10 ; var i , j ; begin
24039: LD_INT 0
24041: PPUSH
24042: PPUSH
24043: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24044: LD_ADDR_VAR 0 2
24048: PUSH
24049: LD_INT 21
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PPUSH
24059: CALL_OW 69
24063: PUSH
24064: FOR_IN
24065: IFFALSE 24117
// if IsSelected ( i ) then
24067: LD_VAR 0 2
24071: PPUSH
24072: CALL_OW 306
24076: IFFALSE 24115
// begin for j := 1 to 4 do
24078: LD_ADDR_VAR 0 3
24082: PUSH
24083: DOUBLE
24084: LD_INT 1
24086: DEC
24087: ST_TO_ADDR
24088: LD_INT 4
24090: PUSH
24091: FOR_TO
24092: IFFALSE 24113
// SetSkill ( i , j , 10 ) ;
24094: LD_VAR 0 2
24098: PPUSH
24099: LD_VAR 0 3
24103: PPUSH
24104: LD_INT 10
24106: PPUSH
24107: CALL_OW 237
24111: GO 24091
24113: POP
24114: POP
// end ;
24115: GO 24064
24117: POP
24118: POP
// end ;
24119: LD_VAR 0 1
24123: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24124: LD_INT 0
24126: PPUSH
24127: PPUSH
24128: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24129: LD_ADDR_VAR 0 2
24133: PUSH
24134: LD_INT 22
24136: PUSH
24137: LD_OWVAR 2
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 21
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PPUSH
24160: CALL_OW 69
24164: PUSH
24165: FOR_IN
24166: IFFALSE 24207
// begin for j := 1 to 4 do
24168: LD_ADDR_VAR 0 3
24172: PUSH
24173: DOUBLE
24174: LD_INT 1
24176: DEC
24177: ST_TO_ADDR
24178: LD_INT 4
24180: PUSH
24181: FOR_TO
24182: IFFALSE 24203
// SetSkill ( i , j , 10 ) ;
24184: LD_VAR 0 2
24188: PPUSH
24189: LD_VAR 0 3
24193: PPUSH
24194: LD_INT 10
24196: PPUSH
24197: CALL_OW 237
24201: GO 24181
24203: POP
24204: POP
// end ;
24205: GO 24165
24207: POP
24208: POP
// end ;
24209: LD_VAR 0 1
24213: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24214: LD_INT 0
24216: PPUSH
// uc_side := your_side ;
24217: LD_ADDR_OWVAR 20
24221: PUSH
24222: LD_OWVAR 2
24226: ST_TO_ADDR
// uc_nation := nation ;
24227: LD_ADDR_OWVAR 21
24231: PUSH
24232: LD_VAR 0 1
24236: ST_TO_ADDR
// InitHc ;
24237: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24241: LD_INT 0
24243: PPUSH
24244: LD_VAR 0 2
24248: PPUSH
24249: LD_VAR 0 3
24253: PPUSH
24254: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24258: LD_VAR 0 4
24262: PPUSH
24263: LD_VAR 0 5
24267: PPUSH
24268: CALL_OW 428
24272: PUSH
24273: LD_INT 0
24275: EQUAL
24276: IFFALSE 24300
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24278: CALL_OW 44
24282: PPUSH
24283: LD_VAR 0 4
24287: PPUSH
24288: LD_VAR 0 5
24292: PPUSH
24293: LD_INT 1
24295: PPUSH
24296: CALL_OW 48
// end ;
24300: LD_VAR 0 6
24304: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24305: LD_INT 0
24307: PPUSH
24308: PPUSH
// uc_side := your_side ;
24309: LD_ADDR_OWVAR 20
24313: PUSH
24314: LD_OWVAR 2
24318: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24319: LD_VAR 0 1
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: LD_INT 3
24332: PUSH
24333: LD_INT 4
24335: PUSH
24336: LD_INT 5
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: IN
24346: IFFALSE 24358
// uc_nation := nation_american else
24348: LD_ADDR_OWVAR 21
24352: PUSH
24353: LD_INT 1
24355: ST_TO_ADDR
24356: GO 24401
// if chassis in [ 11 , 12 , 13 , 14 ] then
24358: LD_VAR 0 1
24362: PUSH
24363: LD_INT 11
24365: PUSH
24366: LD_INT 12
24368: PUSH
24369: LD_INT 13
24371: PUSH
24372: LD_INT 14
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: IN
24381: IFFALSE 24393
// uc_nation := nation_arabian else
24383: LD_ADDR_OWVAR 21
24387: PUSH
24388: LD_INT 2
24390: ST_TO_ADDR
24391: GO 24401
// uc_nation := nation_russian ;
24393: LD_ADDR_OWVAR 21
24397: PUSH
24398: LD_INT 3
24400: ST_TO_ADDR
// vc_chassis := chassis ;
24401: LD_ADDR_OWVAR 37
24405: PUSH
24406: LD_VAR 0 1
24410: ST_TO_ADDR
// vc_engine := engine ;
24411: LD_ADDR_OWVAR 39
24415: PUSH
24416: LD_VAR 0 2
24420: ST_TO_ADDR
// vc_control := control ;
24421: LD_ADDR_OWVAR 38
24425: PUSH
24426: LD_VAR 0 3
24430: ST_TO_ADDR
// vc_weapon := weapon ;
24431: LD_ADDR_OWVAR 40
24435: PUSH
24436: LD_VAR 0 4
24440: ST_TO_ADDR
// un := CreateVehicle ;
24441: LD_ADDR_VAR 0 8
24445: PUSH
24446: CALL_OW 45
24450: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24451: LD_VAR 0 8
24455: PPUSH
24456: LD_INT 0
24458: PPUSH
24459: LD_INT 5
24461: PPUSH
24462: CALL_OW 12
24466: PPUSH
24467: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24471: LD_VAR 0 8
24475: PPUSH
24476: LD_VAR 0 5
24480: PPUSH
24481: LD_VAR 0 6
24485: PPUSH
24486: LD_INT 1
24488: PPUSH
24489: CALL_OW 48
// end ;
24493: LD_VAR 0 7
24497: RET
// export hInvincible ; every 1 do
24498: GO 24500
24500: DISABLE
// hInvincible := [ ] ;
24501: LD_ADDR_EXP 90
24505: PUSH
24506: EMPTY
24507: ST_TO_ADDR
24508: END
// every 10 do var i ;
24509: GO 24511
24511: DISABLE
24512: LD_INT 0
24514: PPUSH
// begin enable ;
24515: ENABLE
// if not hInvincible then
24516: LD_EXP 90
24520: NOT
24521: IFFALSE 24525
// exit ;
24523: GO 24569
// for i in hInvincible do
24525: LD_ADDR_VAR 0 1
24529: PUSH
24530: LD_EXP 90
24534: PUSH
24535: FOR_IN
24536: IFFALSE 24567
// if GetLives ( i ) < 1000 then
24538: LD_VAR 0 1
24542: PPUSH
24543: CALL_OW 256
24547: PUSH
24548: LD_INT 1000
24550: LESS
24551: IFFALSE 24565
// SetLives ( i , 1000 ) ;
24553: LD_VAR 0 1
24557: PPUSH
24558: LD_INT 1000
24560: PPUSH
24561: CALL_OW 234
24565: GO 24535
24567: POP
24568: POP
// end ;
24569: PPOPN 1
24571: END
// export function hHackInvincible ; var i ; begin
24572: LD_INT 0
24574: PPUSH
24575: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24576: LD_ADDR_VAR 0 2
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: LD_INT 21
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 21
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: LIST
24608: PPUSH
24609: CALL_OW 69
24613: PUSH
24614: FOR_IN
24615: IFFALSE 24676
// if IsSelected ( i ) then
24617: LD_VAR 0 2
24621: PPUSH
24622: CALL_OW 306
24626: IFFALSE 24674
// begin if i in hInvincible then
24628: LD_VAR 0 2
24632: PUSH
24633: LD_EXP 90
24637: IN
24638: IFFALSE 24658
// hInvincible := hInvincible diff i else
24640: LD_ADDR_EXP 90
24644: PUSH
24645: LD_EXP 90
24649: PUSH
24650: LD_VAR 0 2
24654: DIFF
24655: ST_TO_ADDR
24656: GO 24674
// hInvincible := hInvincible union i ;
24658: LD_ADDR_EXP 90
24662: PUSH
24663: LD_EXP 90
24667: PUSH
24668: LD_VAR 0 2
24672: UNION
24673: ST_TO_ADDR
// end ;
24674: GO 24614
24676: POP
24677: POP
// end ;
24678: LD_VAR 0 1
24682: RET
// export function hHackInvisible ; var i , j ; begin
24683: LD_INT 0
24685: PPUSH
24686: PPUSH
24687: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24688: LD_ADDR_VAR 0 2
24692: PUSH
24693: LD_INT 21
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PPUSH
24703: CALL_OW 69
24707: PUSH
24708: FOR_IN
24709: IFFALSE 24733
// if IsSelected ( i ) then
24711: LD_VAR 0 2
24715: PPUSH
24716: CALL_OW 306
24720: IFFALSE 24731
// ComForceInvisible ( i ) ;
24722: LD_VAR 0 2
24726: PPUSH
24727: CALL_OW 496
24731: GO 24708
24733: POP
24734: POP
// end ;
24735: LD_VAR 0 1
24739: RET
// export function hHackChangeYourSide ; begin
24740: LD_INT 0
24742: PPUSH
// if your_side = 8 then
24743: LD_OWVAR 2
24747: PUSH
24748: LD_INT 8
24750: EQUAL
24751: IFFALSE 24763
// your_side := 0 else
24753: LD_ADDR_OWVAR 2
24757: PUSH
24758: LD_INT 0
24760: ST_TO_ADDR
24761: GO 24777
// your_side := your_side + 1 ;
24763: LD_ADDR_OWVAR 2
24767: PUSH
24768: LD_OWVAR 2
24772: PUSH
24773: LD_INT 1
24775: PLUS
24776: ST_TO_ADDR
// end ;
24777: LD_VAR 0 1
24781: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24782: LD_INT 0
24784: PPUSH
24785: PPUSH
24786: PPUSH
// for i in all_units do
24787: LD_ADDR_VAR 0 2
24791: PUSH
24792: LD_OWVAR 3
24796: PUSH
24797: FOR_IN
24798: IFFALSE 24876
// if IsSelected ( i ) then
24800: LD_VAR 0 2
24804: PPUSH
24805: CALL_OW 306
24809: IFFALSE 24874
// begin j := GetSide ( i ) ;
24811: LD_ADDR_VAR 0 3
24815: PUSH
24816: LD_VAR 0 2
24820: PPUSH
24821: CALL_OW 255
24825: ST_TO_ADDR
// if j = 8 then
24826: LD_VAR 0 3
24830: PUSH
24831: LD_INT 8
24833: EQUAL
24834: IFFALSE 24846
// j := 0 else
24836: LD_ADDR_VAR 0 3
24840: PUSH
24841: LD_INT 0
24843: ST_TO_ADDR
24844: GO 24860
// j := j + 1 ;
24846: LD_ADDR_VAR 0 3
24850: PUSH
24851: LD_VAR 0 3
24855: PUSH
24856: LD_INT 1
24858: PLUS
24859: ST_TO_ADDR
// SetSide ( i , j ) ;
24860: LD_VAR 0 2
24864: PPUSH
24865: LD_VAR 0 3
24869: PPUSH
24870: CALL_OW 235
// end ;
24874: GO 24797
24876: POP
24877: POP
// end ;
24878: LD_VAR 0 1
24882: RET
// export function hHackFog ; begin
24883: LD_INT 0
24885: PPUSH
// FogOff ( true ) ;
24886: LD_INT 1
24888: PPUSH
24889: CALL_OW 344
// end ;
24893: LD_VAR 0 1
24897: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24898: LD_INT 0
24900: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24901: LD_VAR 0 1
24905: PPUSH
24906: LD_VAR 0 2
24910: PPUSH
24911: LD_VAR 0 3
24915: PPUSH
24916: LD_INT 1
24918: PPUSH
24919: LD_INT 1
24921: PPUSH
24922: CALL_OW 483
// CenterOnXY ( x , y ) ;
24926: LD_VAR 0 2
24930: PPUSH
24931: LD_VAR 0 3
24935: PPUSH
24936: CALL_OW 84
// end ; end_of_file
24940: LD_VAR 0 4
24944: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24945: LD_INT 0
24947: PPUSH
24948: PPUSH
24949: PPUSH
24950: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24951: LD_VAR 0 1
24955: PPUSH
24956: CALL_OW 264
24960: PUSH
24961: LD_EXP 18
24965: EQUAL
24966: IFFALSE 25038
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24968: LD_INT 68
24970: PPUSH
24971: LD_VAR 0 1
24975: PPUSH
24976: CALL_OW 255
24980: PPUSH
24981: CALL_OW 321
24985: PUSH
24986: LD_INT 2
24988: EQUAL
24989: IFFALSE 25001
// eff := 70 else
24991: LD_ADDR_VAR 0 4
24995: PUSH
24996: LD_INT 70
24998: ST_TO_ADDR
24999: GO 25009
// eff := 30 ;
25001: LD_ADDR_VAR 0 4
25005: PUSH
25006: LD_INT 30
25008: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25009: LD_VAR 0 1
25013: PPUSH
25014: CALL_OW 250
25018: PPUSH
25019: LD_VAR 0 1
25023: PPUSH
25024: CALL_OW 251
25028: PPUSH
25029: LD_VAR 0 4
25033: PPUSH
25034: CALL_OW 495
// end ; end ;
25038: LD_VAR 0 2
25042: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25043: LD_INT 0
25045: PPUSH
// end ;
25046: LD_VAR 0 4
25050: RET
// export function SOS_Command ( cmd ) ; begin
25051: LD_INT 0
25053: PPUSH
// end ;
25054: LD_VAR 0 2
25058: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25059: LD_INT 0
25061: PPUSH
// end ;
25062: LD_VAR 0 6
25066: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25067: LD_INT 0
25069: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25070: LD_VAR 0 1
25074: PUSH
25075: LD_INT 250
25077: EQUAL
25078: PUSH
25079: LD_VAR 0 2
25083: PPUSH
25084: CALL_OW 264
25088: PUSH
25089: LD_EXP 21
25093: EQUAL
25094: AND
25095: IFFALSE 25116
// MinerPlaceMine ( unit , x , y ) ;
25097: LD_VAR 0 2
25101: PPUSH
25102: LD_VAR 0 4
25106: PPUSH
25107: LD_VAR 0 5
25111: PPUSH
25112: CALL 27465 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25116: LD_VAR 0 1
25120: PUSH
25121: LD_INT 251
25123: EQUAL
25124: PUSH
25125: LD_VAR 0 2
25129: PPUSH
25130: CALL_OW 264
25134: PUSH
25135: LD_EXP 21
25139: EQUAL
25140: AND
25141: IFFALSE 25162
// MinerDetonateMine ( unit , x , y ) ;
25143: LD_VAR 0 2
25147: PPUSH
25148: LD_VAR 0 4
25152: PPUSH
25153: LD_VAR 0 5
25157: PPUSH
25158: CALL 27742 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25162: LD_VAR 0 1
25166: PUSH
25167: LD_INT 252
25169: EQUAL
25170: PUSH
25171: LD_VAR 0 2
25175: PPUSH
25176: CALL_OW 264
25180: PUSH
25181: LD_EXP 21
25185: EQUAL
25186: AND
25187: IFFALSE 25208
// MinerCreateMinefield ( unit , x , y ) ;
25189: LD_VAR 0 2
25193: PPUSH
25194: LD_VAR 0 4
25198: PPUSH
25199: LD_VAR 0 5
25203: PPUSH
25204: CALL 28159 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25208: LD_VAR 0 1
25212: PUSH
25213: LD_INT 253
25215: EQUAL
25216: PUSH
25217: LD_VAR 0 2
25221: PPUSH
25222: CALL_OW 257
25226: PUSH
25227: LD_INT 5
25229: EQUAL
25230: AND
25231: IFFALSE 25252
// ComBinocular ( unit , x , y ) ;
25233: LD_VAR 0 2
25237: PPUSH
25238: LD_VAR 0 4
25242: PPUSH
25243: LD_VAR 0 5
25247: PPUSH
25248: CALL 28530 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25252: LD_VAR 0 1
25256: PUSH
25257: LD_INT 254
25259: EQUAL
25260: PUSH
25261: LD_VAR 0 2
25265: PPUSH
25266: CALL_OW 264
25270: PUSH
25271: LD_EXP 16
25275: EQUAL
25276: AND
25277: PUSH
25278: LD_VAR 0 3
25282: PPUSH
25283: CALL_OW 263
25287: PUSH
25288: LD_INT 3
25290: EQUAL
25291: AND
25292: IFFALSE 25308
// HackDestroyVehicle ( unit , selectedUnit ) ;
25294: LD_VAR 0 2
25298: PPUSH
25299: LD_VAR 0 3
25303: PPUSH
25304: CALL 26825 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25308: LD_VAR 0 1
25312: PUSH
25313: LD_INT 255
25315: EQUAL
25316: PUSH
25317: LD_VAR 0 2
25321: PPUSH
25322: CALL_OW 264
25326: PUSH
25327: LD_INT 14
25329: PUSH
25330: LD_INT 53
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: IN
25337: AND
25338: PUSH
25339: LD_VAR 0 4
25343: PPUSH
25344: LD_VAR 0 5
25348: PPUSH
25349: CALL_OW 488
25353: AND
25354: IFFALSE 25378
// CutTreeXYR ( unit , x , y , 12 ) ;
25356: LD_VAR 0 2
25360: PPUSH
25361: LD_VAR 0 4
25365: PPUSH
25366: LD_VAR 0 5
25370: PPUSH
25371: LD_INT 12
25373: PPUSH
25374: CALL 25391 0 4
// end ;
25378: LD_VAR 0 6
25382: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25383: LD_INT 0
25385: PPUSH
// end ;
25386: LD_VAR 0 4
25390: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25391: LD_INT 0
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
25397: PPUSH
25398: PPUSH
25399: PPUSH
25400: PPUSH
25401: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25402: LD_VAR 0 1
25406: NOT
25407: PUSH
25408: LD_VAR 0 2
25412: PPUSH
25413: LD_VAR 0 3
25417: PPUSH
25418: CALL_OW 488
25422: NOT
25423: OR
25424: PUSH
25425: LD_VAR 0 4
25429: NOT
25430: OR
25431: IFFALSE 25435
// exit ;
25433: GO 25775
// list := [ ] ;
25435: LD_ADDR_VAR 0 13
25439: PUSH
25440: EMPTY
25441: ST_TO_ADDR
// if x - r < 0 then
25442: LD_VAR 0 2
25446: PUSH
25447: LD_VAR 0 4
25451: MINUS
25452: PUSH
25453: LD_INT 0
25455: LESS
25456: IFFALSE 25468
// min_x := 0 else
25458: LD_ADDR_VAR 0 7
25462: PUSH
25463: LD_INT 0
25465: ST_TO_ADDR
25466: GO 25484
// min_x := x - r ;
25468: LD_ADDR_VAR 0 7
25472: PUSH
25473: LD_VAR 0 2
25477: PUSH
25478: LD_VAR 0 4
25482: MINUS
25483: ST_TO_ADDR
// if y - r < 0 then
25484: LD_VAR 0 3
25488: PUSH
25489: LD_VAR 0 4
25493: MINUS
25494: PUSH
25495: LD_INT 0
25497: LESS
25498: IFFALSE 25510
// min_y := 0 else
25500: LD_ADDR_VAR 0 8
25504: PUSH
25505: LD_INT 0
25507: ST_TO_ADDR
25508: GO 25526
// min_y := y - r ;
25510: LD_ADDR_VAR 0 8
25514: PUSH
25515: LD_VAR 0 3
25519: PUSH
25520: LD_VAR 0 4
25524: MINUS
25525: ST_TO_ADDR
// max_x := x + r ;
25526: LD_ADDR_VAR 0 9
25530: PUSH
25531: LD_VAR 0 2
25535: PUSH
25536: LD_VAR 0 4
25540: PLUS
25541: ST_TO_ADDR
// max_y := y + r ;
25542: LD_ADDR_VAR 0 10
25546: PUSH
25547: LD_VAR 0 3
25551: PUSH
25552: LD_VAR 0 4
25556: PLUS
25557: ST_TO_ADDR
// for _x = min_x to max_x do
25558: LD_ADDR_VAR 0 11
25562: PUSH
25563: DOUBLE
25564: LD_VAR 0 7
25568: DEC
25569: ST_TO_ADDR
25570: LD_VAR 0 9
25574: PUSH
25575: FOR_TO
25576: IFFALSE 25693
// for _y = min_y to max_y do
25578: LD_ADDR_VAR 0 12
25582: PUSH
25583: DOUBLE
25584: LD_VAR 0 8
25588: DEC
25589: ST_TO_ADDR
25590: LD_VAR 0 10
25594: PUSH
25595: FOR_TO
25596: IFFALSE 25689
// begin if not ValidHex ( _x , _y ) then
25598: LD_VAR 0 11
25602: PPUSH
25603: LD_VAR 0 12
25607: PPUSH
25608: CALL_OW 488
25612: NOT
25613: IFFALSE 25617
// continue ;
25615: GO 25595
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25617: LD_VAR 0 11
25621: PPUSH
25622: LD_VAR 0 12
25626: PPUSH
25627: CALL_OW 351
25631: PUSH
25632: LD_VAR 0 11
25636: PPUSH
25637: LD_VAR 0 12
25641: PPUSH
25642: CALL_OW 554
25646: AND
25647: IFFALSE 25687
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25649: LD_ADDR_VAR 0 13
25653: PUSH
25654: LD_VAR 0 13
25658: PPUSH
25659: LD_VAR 0 13
25663: PUSH
25664: LD_INT 1
25666: PLUS
25667: PPUSH
25668: LD_VAR 0 11
25672: PUSH
25673: LD_VAR 0 12
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PPUSH
25682: CALL_OW 2
25686: ST_TO_ADDR
// end ;
25687: GO 25595
25689: POP
25690: POP
25691: GO 25575
25693: POP
25694: POP
// if not list then
25695: LD_VAR 0 13
25699: NOT
25700: IFFALSE 25704
// exit ;
25702: GO 25775
// for i in list do
25704: LD_ADDR_VAR 0 6
25708: PUSH
25709: LD_VAR 0 13
25713: PUSH
25714: FOR_IN
25715: IFFALSE 25773
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25717: LD_VAR 0 1
25721: PPUSH
25722: LD_STRING M
25724: PUSH
25725: LD_VAR 0 6
25729: PUSH
25730: LD_INT 1
25732: ARRAY
25733: PUSH
25734: LD_VAR 0 6
25738: PUSH
25739: LD_INT 2
25741: ARRAY
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: PUSH
25764: EMPTY
25765: LIST
25766: PPUSH
25767: CALL_OW 447
25771: GO 25714
25773: POP
25774: POP
// end ;
25775: LD_VAR 0 5
25779: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25780: LD_EXP 93
25784: NOT
25785: IFFALSE 25835
25787: GO 25789
25789: DISABLE
// begin initHack := true ;
25790: LD_ADDR_EXP 93
25794: PUSH
25795: LD_INT 1
25797: ST_TO_ADDR
// hackTanks := [ ] ;
25798: LD_ADDR_EXP 94
25802: PUSH
25803: EMPTY
25804: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25805: LD_ADDR_EXP 95
25809: PUSH
25810: EMPTY
25811: ST_TO_ADDR
// hackLimit := 3 ;
25812: LD_ADDR_EXP 96
25816: PUSH
25817: LD_INT 3
25819: ST_TO_ADDR
// hackDist := 12 ;
25820: LD_ADDR_EXP 97
25824: PUSH
25825: LD_INT 12
25827: ST_TO_ADDR
// hackCounter := [ ] ;
25828: LD_ADDR_EXP 98
25832: PUSH
25833: EMPTY
25834: ST_TO_ADDR
// end ;
25835: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25836: LD_EXP 93
25840: PUSH
25841: LD_INT 34
25843: PUSH
25844: LD_EXP 16
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PPUSH
25853: CALL_OW 69
25857: AND
25858: IFFALSE 26113
25860: GO 25862
25862: DISABLE
25863: LD_INT 0
25865: PPUSH
25866: PPUSH
// begin enable ;
25867: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25868: LD_ADDR_VAR 0 1
25872: PUSH
25873: LD_INT 34
25875: PUSH
25876: LD_EXP 16
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PPUSH
25885: CALL_OW 69
25889: PUSH
25890: FOR_IN
25891: IFFALSE 26111
// begin if not i in hackTanks then
25893: LD_VAR 0 1
25897: PUSH
25898: LD_EXP 94
25902: IN
25903: NOT
25904: IFFALSE 25987
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25906: LD_ADDR_EXP 94
25910: PUSH
25911: LD_EXP 94
25915: PPUSH
25916: LD_EXP 94
25920: PUSH
25921: LD_INT 1
25923: PLUS
25924: PPUSH
25925: LD_VAR 0 1
25929: PPUSH
25930: CALL_OW 1
25934: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25935: LD_ADDR_EXP 95
25939: PUSH
25940: LD_EXP 95
25944: PPUSH
25945: LD_EXP 95
25949: PUSH
25950: LD_INT 1
25952: PLUS
25953: PPUSH
25954: EMPTY
25955: PPUSH
25956: CALL_OW 1
25960: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25961: LD_ADDR_EXP 98
25965: PUSH
25966: LD_EXP 98
25970: PPUSH
25971: LD_EXP 98
25975: PUSH
25976: LD_INT 1
25978: PLUS
25979: PPUSH
25980: EMPTY
25981: PPUSH
25982: CALL_OW 1
25986: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25987: LD_VAR 0 1
25991: PPUSH
25992: CALL_OW 302
25996: NOT
25997: IFFALSE 26010
// begin HackUnlinkAll ( i ) ;
25999: LD_VAR 0 1
26003: PPUSH
26004: CALL 26116 0 1
// continue ;
26008: GO 25890
// end ; HackCheckCapturedStatus ( i ) ;
26010: LD_VAR 0 1
26014: PPUSH
26015: CALL 26559 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26019: LD_ADDR_VAR 0 2
26023: PUSH
26024: LD_INT 81
26026: PUSH
26027: LD_VAR 0 1
26031: PPUSH
26032: CALL_OW 255
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 33
26043: PUSH
26044: LD_INT 3
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 91
26053: PUSH
26054: LD_VAR 0 1
26058: PUSH
26059: LD_EXP 97
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 50
26071: PUSH
26072: EMPTY
26073: LIST
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: PPUSH
26081: CALL_OW 69
26085: ST_TO_ADDR
// if not tmp then
26086: LD_VAR 0 2
26090: NOT
26091: IFFALSE 26095
// continue ;
26093: GO 25890
// HackLink ( i , tmp ) ;
26095: LD_VAR 0 1
26099: PPUSH
26100: LD_VAR 0 2
26104: PPUSH
26105: CALL 26252 0 2
// end ;
26109: GO 25890
26111: POP
26112: POP
// end ;
26113: PPOPN 2
26115: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26116: LD_INT 0
26118: PPUSH
26119: PPUSH
26120: PPUSH
// if not hack in hackTanks then
26121: LD_VAR 0 1
26125: PUSH
26126: LD_EXP 94
26130: IN
26131: NOT
26132: IFFALSE 26136
// exit ;
26134: GO 26247
// index := GetElementIndex ( hackTanks , hack ) ;
26136: LD_ADDR_VAR 0 4
26140: PUSH
26141: LD_EXP 94
26145: PPUSH
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL 33721 0 2
26155: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26156: LD_EXP 95
26160: PUSH
26161: LD_VAR 0 4
26165: ARRAY
26166: IFFALSE 26247
// begin for i in hackTanksCaptured [ index ] do
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_EXP 95
26177: PUSH
26178: LD_VAR 0 4
26182: ARRAY
26183: PUSH
26184: FOR_IN
26185: IFFALSE 26211
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26187: LD_VAR 0 3
26191: PUSH
26192: LD_INT 1
26194: ARRAY
26195: PPUSH
26196: LD_VAR 0 3
26200: PUSH
26201: LD_INT 2
26203: ARRAY
26204: PPUSH
26205: CALL_OW 235
26209: GO 26184
26211: POP
26212: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26213: LD_ADDR_EXP 95
26217: PUSH
26218: LD_EXP 95
26222: PPUSH
26223: LD_VAR 0 4
26227: PPUSH
26228: EMPTY
26229: PPUSH
26230: CALL_OW 1
26234: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26235: LD_VAR 0 1
26239: PPUSH
26240: LD_INT 0
26242: PPUSH
26243: CALL_OW 505
// end ; end ;
26247: LD_VAR 0 2
26251: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26252: LD_INT 0
26254: PPUSH
26255: PPUSH
26256: PPUSH
// if not hack in hackTanks or not vehicles then
26257: LD_VAR 0 1
26261: PUSH
26262: LD_EXP 94
26266: IN
26267: NOT
26268: PUSH
26269: LD_VAR 0 2
26273: NOT
26274: OR
26275: IFFALSE 26279
// exit ;
26277: GO 26554
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26279: LD_ADDR_VAR 0 2
26283: PUSH
26284: LD_VAR 0 1
26288: PPUSH
26289: LD_VAR 0 2
26293: PPUSH
26294: LD_INT 1
26296: PPUSH
26297: LD_INT 1
26299: PPUSH
26300: CALL 34371 0 4
26304: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26305: LD_ADDR_VAR 0 5
26309: PUSH
26310: LD_EXP 94
26314: PPUSH
26315: LD_VAR 0 1
26319: PPUSH
26320: CALL 33721 0 2
26324: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26325: LD_EXP 95
26329: PUSH
26330: LD_VAR 0 5
26334: ARRAY
26335: PUSH
26336: LD_EXP 96
26340: LESS
26341: IFFALSE 26530
// begin for i := 1 to vehicles do
26343: LD_ADDR_VAR 0 4
26347: PUSH
26348: DOUBLE
26349: LD_INT 1
26351: DEC
26352: ST_TO_ADDR
26353: LD_VAR 0 2
26357: PUSH
26358: FOR_TO
26359: IFFALSE 26528
// begin if hackTanksCaptured [ index ] = hackLimit then
26361: LD_EXP 95
26365: PUSH
26366: LD_VAR 0 5
26370: ARRAY
26371: PUSH
26372: LD_EXP 96
26376: EQUAL
26377: IFFALSE 26381
// break ;
26379: GO 26528
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26381: LD_ADDR_EXP 98
26385: PUSH
26386: LD_EXP 98
26390: PPUSH
26391: LD_VAR 0 5
26395: PPUSH
26396: LD_EXP 98
26400: PUSH
26401: LD_VAR 0 5
26405: ARRAY
26406: PUSH
26407: LD_INT 1
26409: PLUS
26410: PPUSH
26411: CALL_OW 1
26415: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26416: LD_ADDR_EXP 95
26420: PUSH
26421: LD_EXP 95
26425: PPUSH
26426: LD_VAR 0 5
26430: PUSH
26431: LD_EXP 95
26435: PUSH
26436: LD_VAR 0 5
26440: ARRAY
26441: PUSH
26442: LD_INT 1
26444: PLUS
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PPUSH
26450: LD_VAR 0 2
26454: PUSH
26455: LD_VAR 0 4
26459: ARRAY
26460: PUSH
26461: LD_VAR 0 2
26465: PUSH
26466: LD_VAR 0 4
26470: ARRAY
26471: PPUSH
26472: CALL_OW 255
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PPUSH
26481: CALL 33936 0 3
26485: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26486: LD_VAR 0 2
26490: PUSH
26491: LD_VAR 0 4
26495: ARRAY
26496: PPUSH
26497: LD_VAR 0 1
26501: PPUSH
26502: CALL_OW 255
26506: PPUSH
26507: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26511: LD_VAR 0 2
26515: PUSH
26516: LD_VAR 0 4
26520: ARRAY
26521: PPUSH
26522: CALL_OW 141
// end ;
26526: GO 26358
26528: POP
26529: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26530: LD_VAR 0 1
26534: PPUSH
26535: LD_EXP 95
26539: PUSH
26540: LD_VAR 0 5
26544: ARRAY
26545: PUSH
26546: LD_INT 0
26548: PLUS
26549: PPUSH
26550: CALL_OW 505
// end ;
26554: LD_VAR 0 3
26558: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26559: LD_INT 0
26561: PPUSH
26562: PPUSH
26563: PPUSH
26564: PPUSH
// if not hack in hackTanks then
26565: LD_VAR 0 1
26569: PUSH
26570: LD_EXP 94
26574: IN
26575: NOT
26576: IFFALSE 26580
// exit ;
26578: GO 26820
// index := GetElementIndex ( hackTanks , hack ) ;
26580: LD_ADDR_VAR 0 4
26584: PUSH
26585: LD_EXP 94
26589: PPUSH
26590: LD_VAR 0 1
26594: PPUSH
26595: CALL 33721 0 2
26599: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: DOUBLE
26606: LD_EXP 95
26610: PUSH
26611: LD_VAR 0 4
26615: ARRAY
26616: INC
26617: ST_TO_ADDR
26618: LD_INT 1
26620: PUSH
26621: FOR_DOWNTO
26622: IFFALSE 26794
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26624: LD_ADDR_VAR 0 5
26628: PUSH
26629: LD_EXP 95
26633: PUSH
26634: LD_VAR 0 4
26638: ARRAY
26639: PUSH
26640: LD_VAR 0 3
26644: ARRAY
26645: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26646: LD_VAR 0 5
26650: PUSH
26651: LD_INT 1
26653: ARRAY
26654: PPUSH
26655: CALL_OW 302
26659: NOT
26660: PUSH
26661: LD_VAR 0 5
26665: PUSH
26666: LD_INT 1
26668: ARRAY
26669: PPUSH
26670: CALL_OW 255
26674: PUSH
26675: LD_VAR 0 1
26679: PPUSH
26680: CALL_OW 255
26684: NONEQUAL
26685: OR
26686: IFFALSE 26792
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26688: LD_VAR 0 5
26692: PUSH
26693: LD_INT 1
26695: ARRAY
26696: PPUSH
26697: CALL_OW 305
26701: PUSH
26702: LD_VAR 0 5
26706: PUSH
26707: LD_INT 1
26709: ARRAY
26710: PPUSH
26711: CALL_OW 255
26715: PUSH
26716: LD_VAR 0 1
26720: PPUSH
26721: CALL_OW 255
26725: EQUAL
26726: AND
26727: IFFALSE 26751
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26729: LD_VAR 0 5
26733: PUSH
26734: LD_INT 1
26736: ARRAY
26737: PPUSH
26738: LD_VAR 0 5
26742: PUSH
26743: LD_INT 2
26745: ARRAY
26746: PPUSH
26747: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26751: LD_ADDR_EXP 95
26755: PUSH
26756: LD_EXP 95
26760: PPUSH
26761: LD_VAR 0 4
26765: PPUSH
26766: LD_EXP 95
26770: PUSH
26771: LD_VAR 0 4
26775: ARRAY
26776: PPUSH
26777: LD_VAR 0 3
26781: PPUSH
26782: CALL_OW 3
26786: PPUSH
26787: CALL_OW 1
26791: ST_TO_ADDR
// end ; end ;
26792: GO 26621
26794: POP
26795: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26796: LD_VAR 0 1
26800: PPUSH
26801: LD_EXP 95
26805: PUSH
26806: LD_VAR 0 4
26810: ARRAY
26811: PUSH
26812: LD_INT 0
26814: PLUS
26815: PPUSH
26816: CALL_OW 505
// end ;
26820: LD_VAR 0 2
26824: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26825: LD_INT 0
26827: PPUSH
26828: PPUSH
26829: PPUSH
26830: PPUSH
// if not hack in hackTanks then
26831: LD_VAR 0 1
26835: PUSH
26836: LD_EXP 94
26840: IN
26841: NOT
26842: IFFALSE 26846
// exit ;
26844: GO 26931
// index := GetElementIndex ( hackTanks , hack ) ;
26846: LD_ADDR_VAR 0 5
26850: PUSH
26851: LD_EXP 94
26855: PPUSH
26856: LD_VAR 0 1
26860: PPUSH
26861: CALL 33721 0 2
26865: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26866: LD_ADDR_VAR 0 4
26870: PUSH
26871: DOUBLE
26872: LD_INT 1
26874: DEC
26875: ST_TO_ADDR
26876: LD_EXP 95
26880: PUSH
26881: LD_VAR 0 5
26885: ARRAY
26886: PUSH
26887: FOR_TO
26888: IFFALSE 26929
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26890: LD_EXP 95
26894: PUSH
26895: LD_VAR 0 5
26899: ARRAY
26900: PUSH
26901: LD_VAR 0 4
26905: ARRAY
26906: PUSH
26907: LD_INT 1
26909: ARRAY
26910: PUSH
26911: LD_VAR 0 2
26915: EQUAL
26916: IFFALSE 26927
// KillUnit ( vehicle ) ;
26918: LD_VAR 0 2
26922: PPUSH
26923: CALL_OW 66
26927: GO 26887
26929: POP
26930: POP
// end ;
26931: LD_VAR 0 3
26935: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26936: LD_EXP 99
26940: NOT
26941: IFFALSE 26976
26943: GO 26945
26945: DISABLE
// begin initMiner := true ;
26946: LD_ADDR_EXP 99
26950: PUSH
26951: LD_INT 1
26953: ST_TO_ADDR
// minersList := [ ] ;
26954: LD_ADDR_EXP 100
26958: PUSH
26959: EMPTY
26960: ST_TO_ADDR
// minerMinesList := [ ] ;
26961: LD_ADDR_EXP 101
26965: PUSH
26966: EMPTY
26967: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26968: LD_ADDR_EXP 102
26972: PUSH
26973: LD_INT 5
26975: ST_TO_ADDR
// end ;
26976: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26977: LD_EXP 99
26981: PUSH
26982: LD_INT 34
26984: PUSH
26985: LD_EXP 21
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PPUSH
26994: CALL_OW 69
26998: AND
26999: IFFALSE 27462
27001: GO 27003
27003: DISABLE
27004: LD_INT 0
27006: PPUSH
27007: PPUSH
27008: PPUSH
27009: PPUSH
// begin enable ;
27010: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27011: LD_ADDR_VAR 0 1
27015: PUSH
27016: LD_INT 34
27018: PUSH
27019: LD_EXP 21
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PPUSH
27028: CALL_OW 69
27032: PUSH
27033: FOR_IN
27034: IFFALSE 27106
// begin if not i in minersList then
27036: LD_VAR 0 1
27040: PUSH
27041: LD_EXP 100
27045: IN
27046: NOT
27047: IFFALSE 27104
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27049: LD_ADDR_EXP 100
27053: PUSH
27054: LD_EXP 100
27058: PPUSH
27059: LD_EXP 100
27063: PUSH
27064: LD_INT 1
27066: PLUS
27067: PPUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: CALL_OW 1
27077: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27078: LD_ADDR_EXP 101
27082: PUSH
27083: LD_EXP 101
27087: PPUSH
27088: LD_EXP 101
27092: PUSH
27093: LD_INT 1
27095: PLUS
27096: PPUSH
27097: EMPTY
27098: PPUSH
27099: CALL_OW 1
27103: ST_TO_ADDR
// end end ;
27104: GO 27033
27106: POP
27107: POP
// for i := minerMinesList downto 1 do
27108: LD_ADDR_VAR 0 1
27112: PUSH
27113: DOUBLE
27114: LD_EXP 101
27118: INC
27119: ST_TO_ADDR
27120: LD_INT 1
27122: PUSH
27123: FOR_DOWNTO
27124: IFFALSE 27460
// begin if IsLive ( minersList [ i ] ) then
27126: LD_EXP 100
27130: PUSH
27131: LD_VAR 0 1
27135: ARRAY
27136: PPUSH
27137: CALL_OW 300
27141: IFFALSE 27169
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27143: LD_EXP 100
27147: PUSH
27148: LD_VAR 0 1
27152: ARRAY
27153: PPUSH
27154: LD_EXP 101
27158: PUSH
27159: LD_VAR 0 1
27163: ARRAY
27164: PPUSH
27165: CALL_OW 505
// if not minerMinesList [ i ] then
27169: LD_EXP 101
27173: PUSH
27174: LD_VAR 0 1
27178: ARRAY
27179: NOT
27180: IFFALSE 27184
// continue ;
27182: GO 27123
// for j := minerMinesList [ i ] downto 1 do
27184: LD_ADDR_VAR 0 2
27188: PUSH
27189: DOUBLE
27190: LD_EXP 101
27194: PUSH
27195: LD_VAR 0 1
27199: ARRAY
27200: INC
27201: ST_TO_ADDR
27202: LD_INT 1
27204: PUSH
27205: FOR_DOWNTO
27206: IFFALSE 27456
// begin side := GetSide ( minersList [ i ] ) ;
27208: LD_ADDR_VAR 0 3
27212: PUSH
27213: LD_EXP 100
27217: PUSH
27218: LD_VAR 0 1
27222: ARRAY
27223: PPUSH
27224: CALL_OW 255
27228: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27229: LD_ADDR_VAR 0 4
27233: PUSH
27234: LD_EXP 101
27238: PUSH
27239: LD_VAR 0 1
27243: ARRAY
27244: PUSH
27245: LD_VAR 0 2
27249: ARRAY
27250: PUSH
27251: LD_INT 1
27253: ARRAY
27254: PPUSH
27255: LD_EXP 101
27259: PUSH
27260: LD_VAR 0 1
27264: ARRAY
27265: PUSH
27266: LD_VAR 0 2
27270: ARRAY
27271: PUSH
27272: LD_INT 2
27274: ARRAY
27275: PPUSH
27276: CALL_OW 428
27280: ST_TO_ADDR
// if not tmp then
27281: LD_VAR 0 4
27285: NOT
27286: IFFALSE 27290
// continue ;
27288: GO 27205
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27290: LD_VAR 0 4
27294: PUSH
27295: LD_INT 81
27297: PUSH
27298: LD_VAR 0 3
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PPUSH
27307: CALL_OW 69
27311: IN
27312: PUSH
27313: LD_EXP 101
27317: PUSH
27318: LD_VAR 0 1
27322: ARRAY
27323: PUSH
27324: LD_VAR 0 2
27328: ARRAY
27329: PUSH
27330: LD_INT 1
27332: ARRAY
27333: PPUSH
27334: LD_EXP 101
27338: PUSH
27339: LD_VAR 0 1
27343: ARRAY
27344: PUSH
27345: LD_VAR 0 2
27349: ARRAY
27350: PUSH
27351: LD_INT 2
27353: ARRAY
27354: PPUSH
27355: CALL_OW 458
27359: AND
27360: IFFALSE 27454
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27362: LD_EXP 101
27366: PUSH
27367: LD_VAR 0 1
27371: ARRAY
27372: PUSH
27373: LD_VAR 0 2
27377: ARRAY
27378: PUSH
27379: LD_INT 1
27381: ARRAY
27382: PPUSH
27383: LD_EXP 101
27387: PUSH
27388: LD_VAR 0 1
27392: ARRAY
27393: PUSH
27394: LD_VAR 0 2
27398: ARRAY
27399: PUSH
27400: LD_INT 2
27402: ARRAY
27403: PPUSH
27404: LD_VAR 0 3
27408: PPUSH
27409: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27413: LD_ADDR_EXP 101
27417: PUSH
27418: LD_EXP 101
27422: PPUSH
27423: LD_VAR 0 1
27427: PPUSH
27428: LD_EXP 101
27432: PUSH
27433: LD_VAR 0 1
27437: ARRAY
27438: PPUSH
27439: LD_VAR 0 2
27443: PPUSH
27444: CALL_OW 3
27448: PPUSH
27449: CALL_OW 1
27453: ST_TO_ADDR
// end ; end ;
27454: GO 27205
27456: POP
27457: POP
// end ;
27458: GO 27123
27460: POP
27461: POP
// end ;
27462: PPOPN 4
27464: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27465: LD_INT 0
27467: PPUSH
27468: PPUSH
// result := false ;
27469: LD_ADDR_VAR 0 4
27473: PUSH
27474: LD_INT 0
27476: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27477: LD_VAR 0 1
27481: PPUSH
27482: CALL_OW 264
27486: PUSH
27487: LD_EXP 21
27491: EQUAL
27492: NOT
27493: IFFALSE 27497
// exit ;
27495: GO 27737
// index := GetElementIndex ( minersList , unit ) ;
27497: LD_ADDR_VAR 0 5
27501: PUSH
27502: LD_EXP 100
27506: PPUSH
27507: LD_VAR 0 1
27511: PPUSH
27512: CALL 33721 0 2
27516: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27517: LD_EXP 101
27521: PUSH
27522: LD_VAR 0 5
27526: ARRAY
27527: PUSH
27528: LD_EXP 102
27532: GREATEREQUAL
27533: IFFALSE 27537
// exit ;
27535: GO 27737
// ComMoveXY ( unit , x , y ) ;
27537: LD_VAR 0 1
27541: PPUSH
27542: LD_VAR 0 2
27546: PPUSH
27547: LD_VAR 0 3
27551: PPUSH
27552: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27556: LD_INT 35
27558: PPUSH
27559: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27563: LD_VAR 0 1
27567: PPUSH
27568: LD_VAR 0 2
27572: PPUSH
27573: LD_VAR 0 3
27577: PPUSH
27578: CALL 64493 0 3
27582: NOT
27583: PUSH
27584: LD_VAR 0 1
27588: PPUSH
27589: CALL_OW 314
27593: AND
27594: IFFALSE 27598
// exit ;
27596: GO 27737
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27598: LD_VAR 0 2
27602: PPUSH
27603: LD_VAR 0 3
27607: PPUSH
27608: CALL_OW 428
27612: PUSH
27613: LD_VAR 0 1
27617: EQUAL
27618: PUSH
27619: LD_VAR 0 1
27623: PPUSH
27624: CALL_OW 314
27628: NOT
27629: AND
27630: IFFALSE 27556
// PlaySoundXY ( x , y , PlantMine ) ;
27632: LD_VAR 0 2
27636: PPUSH
27637: LD_VAR 0 3
27641: PPUSH
27642: LD_STRING PlantMine
27644: PPUSH
27645: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27649: LD_VAR 0 2
27653: PPUSH
27654: LD_VAR 0 3
27658: PPUSH
27659: LD_VAR 0 1
27663: PPUSH
27664: CALL_OW 255
27668: PPUSH
27669: LD_INT 0
27671: PPUSH
27672: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27676: LD_ADDR_EXP 101
27680: PUSH
27681: LD_EXP 101
27685: PPUSH
27686: LD_VAR 0 5
27690: PUSH
27691: LD_EXP 101
27695: PUSH
27696: LD_VAR 0 5
27700: ARRAY
27701: PUSH
27702: LD_INT 1
27704: PLUS
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PPUSH
27710: LD_VAR 0 2
27714: PUSH
27715: LD_VAR 0 3
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PPUSH
27724: CALL 33936 0 3
27728: ST_TO_ADDR
// result := true ;
27729: LD_ADDR_VAR 0 4
27733: PUSH
27734: LD_INT 1
27736: ST_TO_ADDR
// end ;
27737: LD_VAR 0 4
27741: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27742: LD_INT 0
27744: PPUSH
27745: PPUSH
27746: PPUSH
// if not unit in minersList then
27747: LD_VAR 0 1
27751: PUSH
27752: LD_EXP 100
27756: IN
27757: NOT
27758: IFFALSE 27762
// exit ;
27760: GO 28154
// index := GetElementIndex ( minersList , unit ) ;
27762: LD_ADDR_VAR 0 6
27766: PUSH
27767: LD_EXP 100
27771: PPUSH
27772: LD_VAR 0 1
27776: PPUSH
27777: CALL 33721 0 2
27781: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27782: LD_ADDR_VAR 0 5
27786: PUSH
27787: DOUBLE
27788: LD_EXP 101
27792: PUSH
27793: LD_VAR 0 6
27797: ARRAY
27798: INC
27799: ST_TO_ADDR
27800: LD_INT 1
27802: PUSH
27803: FOR_DOWNTO
27804: IFFALSE 27965
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27806: LD_EXP 101
27810: PUSH
27811: LD_VAR 0 6
27815: ARRAY
27816: PUSH
27817: LD_VAR 0 5
27821: ARRAY
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: PUSH
27827: LD_VAR 0 2
27831: EQUAL
27832: PUSH
27833: LD_EXP 101
27837: PUSH
27838: LD_VAR 0 6
27842: ARRAY
27843: PUSH
27844: LD_VAR 0 5
27848: ARRAY
27849: PUSH
27850: LD_INT 2
27852: ARRAY
27853: PUSH
27854: LD_VAR 0 3
27858: EQUAL
27859: AND
27860: IFFALSE 27963
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27862: LD_EXP 101
27866: PUSH
27867: LD_VAR 0 6
27871: ARRAY
27872: PUSH
27873: LD_VAR 0 5
27877: ARRAY
27878: PUSH
27879: LD_INT 1
27881: ARRAY
27882: PPUSH
27883: LD_EXP 101
27887: PUSH
27888: LD_VAR 0 6
27892: ARRAY
27893: PUSH
27894: LD_VAR 0 5
27898: ARRAY
27899: PUSH
27900: LD_INT 2
27902: ARRAY
27903: PPUSH
27904: LD_VAR 0 1
27908: PPUSH
27909: CALL_OW 255
27913: PPUSH
27914: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27918: LD_ADDR_EXP 101
27922: PUSH
27923: LD_EXP 101
27927: PPUSH
27928: LD_VAR 0 6
27932: PPUSH
27933: LD_EXP 101
27937: PUSH
27938: LD_VAR 0 6
27942: ARRAY
27943: PPUSH
27944: LD_VAR 0 5
27948: PPUSH
27949: CALL_OW 3
27953: PPUSH
27954: CALL_OW 1
27958: ST_TO_ADDR
// exit ;
27959: POP
27960: POP
27961: GO 28154
// end ; end ;
27963: GO 27803
27965: POP
27966: POP
// for i := minerMinesList [ index ] downto 1 do
27967: LD_ADDR_VAR 0 5
27971: PUSH
27972: DOUBLE
27973: LD_EXP 101
27977: PUSH
27978: LD_VAR 0 6
27982: ARRAY
27983: INC
27984: ST_TO_ADDR
27985: LD_INT 1
27987: PUSH
27988: FOR_DOWNTO
27989: IFFALSE 28152
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27991: LD_EXP 101
27995: PUSH
27996: LD_VAR 0 6
28000: ARRAY
28001: PUSH
28002: LD_VAR 0 5
28006: ARRAY
28007: PUSH
28008: LD_INT 1
28010: ARRAY
28011: PPUSH
28012: LD_EXP 101
28016: PUSH
28017: LD_VAR 0 6
28021: ARRAY
28022: PUSH
28023: LD_VAR 0 5
28027: ARRAY
28028: PUSH
28029: LD_INT 2
28031: ARRAY
28032: PPUSH
28033: LD_VAR 0 2
28037: PPUSH
28038: LD_VAR 0 3
28042: PPUSH
28043: CALL_OW 298
28047: PUSH
28048: LD_INT 6
28050: LESS
28051: IFFALSE 28150
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28053: LD_EXP 101
28057: PUSH
28058: LD_VAR 0 6
28062: ARRAY
28063: PUSH
28064: LD_VAR 0 5
28068: ARRAY
28069: PUSH
28070: LD_INT 1
28072: ARRAY
28073: PPUSH
28074: LD_EXP 101
28078: PUSH
28079: LD_VAR 0 6
28083: ARRAY
28084: PUSH
28085: LD_VAR 0 5
28089: ARRAY
28090: PUSH
28091: LD_INT 2
28093: ARRAY
28094: PPUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL_OW 255
28104: PPUSH
28105: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28109: LD_ADDR_EXP 101
28113: PUSH
28114: LD_EXP 101
28118: PPUSH
28119: LD_VAR 0 6
28123: PPUSH
28124: LD_EXP 101
28128: PUSH
28129: LD_VAR 0 6
28133: ARRAY
28134: PPUSH
28135: LD_VAR 0 5
28139: PPUSH
28140: CALL_OW 3
28144: PPUSH
28145: CALL_OW 1
28149: ST_TO_ADDR
// end ; end ;
28150: GO 27988
28152: POP
28153: POP
// end ;
28154: LD_VAR 0 4
28158: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28159: LD_INT 0
28161: PPUSH
28162: PPUSH
28163: PPUSH
28164: PPUSH
28165: PPUSH
28166: PPUSH
28167: PPUSH
28168: PPUSH
28169: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28170: LD_VAR 0 1
28174: PPUSH
28175: CALL_OW 264
28179: PUSH
28180: LD_EXP 21
28184: EQUAL
28185: NOT
28186: PUSH
28187: LD_VAR 0 1
28191: PUSH
28192: LD_EXP 100
28196: IN
28197: NOT
28198: OR
28199: IFFALSE 28203
// exit ;
28201: GO 28525
// index := GetElementIndex ( minersList , unit ) ;
28203: LD_ADDR_VAR 0 6
28207: PUSH
28208: LD_EXP 100
28212: PPUSH
28213: LD_VAR 0 1
28217: PPUSH
28218: CALL 33721 0 2
28222: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28223: LD_ADDR_VAR 0 8
28227: PUSH
28228: LD_EXP 102
28232: PUSH
28233: LD_EXP 101
28237: PUSH
28238: LD_VAR 0 6
28242: ARRAY
28243: MINUS
28244: ST_TO_ADDR
// if not minesFreeAmount then
28245: LD_VAR 0 8
28249: NOT
28250: IFFALSE 28254
// exit ;
28252: GO 28525
// tmp := [ ] ;
28254: LD_ADDR_VAR 0 7
28258: PUSH
28259: EMPTY
28260: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28261: LD_ADDR_VAR 0 5
28265: PUSH
28266: DOUBLE
28267: LD_INT 1
28269: DEC
28270: ST_TO_ADDR
28271: LD_VAR 0 8
28275: PUSH
28276: FOR_TO
28277: IFFALSE 28472
// begin _d := rand ( 0 , 5 ) ;
28279: LD_ADDR_VAR 0 11
28283: PUSH
28284: LD_INT 0
28286: PPUSH
28287: LD_INT 5
28289: PPUSH
28290: CALL_OW 12
28294: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28295: LD_ADDR_VAR 0 12
28299: PUSH
28300: LD_INT 2
28302: PPUSH
28303: LD_INT 6
28305: PPUSH
28306: CALL_OW 12
28310: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28311: LD_ADDR_VAR 0 9
28315: PUSH
28316: LD_VAR 0 2
28320: PPUSH
28321: LD_VAR 0 11
28325: PPUSH
28326: LD_VAR 0 12
28330: PPUSH
28331: CALL_OW 272
28335: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28336: LD_ADDR_VAR 0 10
28340: PUSH
28341: LD_VAR 0 3
28345: PPUSH
28346: LD_VAR 0 11
28350: PPUSH
28351: LD_VAR 0 12
28355: PPUSH
28356: CALL_OW 273
28360: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28361: LD_VAR 0 9
28365: PPUSH
28366: LD_VAR 0 10
28370: PPUSH
28371: CALL_OW 488
28375: PUSH
28376: LD_VAR 0 9
28380: PUSH
28381: LD_VAR 0 10
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_VAR 0 7
28394: IN
28395: NOT
28396: AND
28397: PUSH
28398: LD_VAR 0 9
28402: PPUSH
28403: LD_VAR 0 10
28407: PPUSH
28408: CALL_OW 458
28412: NOT
28413: AND
28414: IFFALSE 28456
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28416: LD_ADDR_VAR 0 7
28420: PUSH
28421: LD_VAR 0 7
28425: PPUSH
28426: LD_VAR 0 7
28430: PUSH
28431: LD_INT 1
28433: PLUS
28434: PPUSH
28435: LD_VAR 0 9
28439: PUSH
28440: LD_VAR 0 10
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PPUSH
28449: CALL_OW 1
28453: ST_TO_ADDR
28454: GO 28470
// i := i - 1 ;
28456: LD_ADDR_VAR 0 5
28460: PUSH
28461: LD_VAR 0 5
28465: PUSH
28466: LD_INT 1
28468: MINUS
28469: ST_TO_ADDR
// end ;
28470: GO 28276
28472: POP
28473: POP
// for i in tmp do
28474: LD_ADDR_VAR 0 5
28478: PUSH
28479: LD_VAR 0 7
28483: PUSH
28484: FOR_IN
28485: IFFALSE 28523
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28487: LD_VAR 0 1
28491: PPUSH
28492: LD_VAR 0 5
28496: PUSH
28497: LD_INT 1
28499: ARRAY
28500: PPUSH
28501: LD_VAR 0 5
28505: PUSH
28506: LD_INT 2
28508: ARRAY
28509: PPUSH
28510: CALL 27465 0 3
28514: NOT
28515: IFFALSE 28521
// exit ;
28517: POP
28518: POP
28519: GO 28525
28521: GO 28484
28523: POP
28524: POP
// end ;
28525: LD_VAR 0 4
28529: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28530: LD_INT 0
28532: PPUSH
28533: PPUSH
28534: PPUSH
28535: PPUSH
28536: PPUSH
28537: PPUSH
28538: PPUSH
// if not GetClass ( unit ) = class_sniper then
28539: LD_VAR 0 1
28543: PPUSH
28544: CALL_OW 257
28548: PUSH
28549: LD_INT 5
28551: EQUAL
28552: NOT
28553: IFFALSE 28557
// exit ;
28555: GO 28945
// dist := 8 ;
28557: LD_ADDR_VAR 0 5
28561: PUSH
28562: LD_INT 8
28564: ST_TO_ADDR
// viewRange := 12 ;
28565: LD_ADDR_VAR 0 7
28569: PUSH
28570: LD_INT 12
28572: ST_TO_ADDR
// side := GetSide ( unit ) ;
28573: LD_ADDR_VAR 0 6
28577: PUSH
28578: LD_VAR 0 1
28582: PPUSH
28583: CALL_OW 255
28587: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28588: LD_INT 61
28590: PPUSH
28591: LD_VAR 0 6
28595: PPUSH
28596: CALL_OW 321
28600: PUSH
28601: LD_INT 2
28603: EQUAL
28604: IFFALSE 28614
// viewRange := 16 ;
28606: LD_ADDR_VAR 0 7
28610: PUSH
28611: LD_INT 16
28613: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28614: LD_VAR 0 1
28618: PPUSH
28619: LD_VAR 0 2
28623: PPUSH
28624: LD_VAR 0 3
28628: PPUSH
28629: CALL_OW 297
28633: PUSH
28634: LD_VAR 0 5
28638: GREATER
28639: IFFALSE 28718
// begin ComMoveXY ( unit , x , y ) ;
28641: LD_VAR 0 1
28645: PPUSH
28646: LD_VAR 0 2
28650: PPUSH
28651: LD_VAR 0 3
28655: PPUSH
28656: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28660: LD_INT 35
28662: PPUSH
28663: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28667: LD_VAR 0 1
28671: PPUSH
28672: LD_VAR 0 2
28676: PPUSH
28677: LD_VAR 0 3
28681: PPUSH
28682: CALL 64493 0 3
28686: NOT
28687: IFFALSE 28691
// exit ;
28689: GO 28945
// until GetDistUnitXY ( unit , x , y ) < dist ;
28691: LD_VAR 0 1
28695: PPUSH
28696: LD_VAR 0 2
28700: PPUSH
28701: LD_VAR 0 3
28705: PPUSH
28706: CALL_OW 297
28710: PUSH
28711: LD_VAR 0 5
28715: LESS
28716: IFFALSE 28660
// end ; ComTurnXY ( unit , x , y ) ;
28718: LD_VAR 0 1
28722: PPUSH
28723: LD_VAR 0 2
28727: PPUSH
28728: LD_VAR 0 3
28732: PPUSH
28733: CALL_OW 118
// wait ( 5 ) ;
28737: LD_INT 5
28739: PPUSH
28740: CALL_OW 67
// _d := GetDir ( unit ) ;
28744: LD_ADDR_VAR 0 10
28748: PUSH
28749: LD_VAR 0 1
28753: PPUSH
28754: CALL_OW 254
28758: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28759: LD_ADDR_VAR 0 8
28763: PUSH
28764: LD_VAR 0 1
28768: PPUSH
28769: CALL_OW 250
28773: PPUSH
28774: LD_VAR 0 10
28778: PPUSH
28779: LD_VAR 0 5
28783: PPUSH
28784: CALL_OW 272
28788: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28789: LD_ADDR_VAR 0 9
28793: PUSH
28794: LD_VAR 0 1
28798: PPUSH
28799: CALL_OW 251
28803: PPUSH
28804: LD_VAR 0 10
28808: PPUSH
28809: LD_VAR 0 5
28813: PPUSH
28814: CALL_OW 273
28818: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28819: LD_VAR 0 8
28823: PPUSH
28824: LD_VAR 0 9
28828: PPUSH
28829: CALL_OW 488
28833: NOT
28834: IFFALSE 28838
// exit ;
28836: GO 28945
// ComAnimCustom ( unit , 1 ) ;
28838: LD_VAR 0 1
28842: PPUSH
28843: LD_INT 1
28845: PPUSH
28846: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28850: LD_VAR 0 8
28854: PPUSH
28855: LD_VAR 0 9
28859: PPUSH
28860: LD_VAR 0 6
28864: PPUSH
28865: LD_VAR 0 7
28869: PPUSH
28870: CALL_OW 330
// repeat wait ( 1 ) ;
28874: LD_INT 1
28876: PPUSH
28877: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28881: LD_VAR 0 1
28885: PPUSH
28886: CALL_OW 316
28890: PUSH
28891: LD_VAR 0 1
28895: PPUSH
28896: CALL_OW 314
28900: OR
28901: PUSH
28902: LD_VAR 0 1
28906: PPUSH
28907: CALL_OW 302
28911: NOT
28912: OR
28913: PUSH
28914: LD_VAR 0 1
28918: PPUSH
28919: CALL_OW 301
28923: OR
28924: IFFALSE 28874
// RemoveSeeing ( _x , _y , side ) ;
28926: LD_VAR 0 8
28930: PPUSH
28931: LD_VAR 0 9
28935: PPUSH
28936: LD_VAR 0 6
28940: PPUSH
28941: CALL_OW 331
// end ; end_of_file
28945: LD_VAR 0 4
28949: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28950: LD_INT 0
28952: PPUSH
28953: PPUSH
// if exist_mode then
28954: LD_VAR 0 2
28958: IFFALSE 28983
// unit := CreateCharacter ( prefix & ident ) else
28960: LD_ADDR_VAR 0 5
28964: PUSH
28965: LD_VAR 0 3
28969: PUSH
28970: LD_VAR 0 1
28974: STR
28975: PPUSH
28976: CALL_OW 34
28980: ST_TO_ADDR
28981: GO 28998
// unit := NewCharacter ( ident ) ;
28983: LD_ADDR_VAR 0 5
28987: PUSH
28988: LD_VAR 0 1
28992: PPUSH
28993: CALL_OW 25
28997: ST_TO_ADDR
// result := unit ;
28998: LD_ADDR_VAR 0 4
29002: PUSH
29003: LD_VAR 0 5
29007: ST_TO_ADDR
// end ;
29008: LD_VAR 0 4
29012: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29013: LD_INT 0
29015: PPUSH
29016: PPUSH
// if not side or not nation then
29017: LD_VAR 0 1
29021: NOT
29022: PUSH
29023: LD_VAR 0 2
29027: NOT
29028: OR
29029: IFFALSE 29033
// exit ;
29031: GO 29801
// case nation of nation_american :
29033: LD_VAR 0 2
29037: PUSH
29038: LD_INT 1
29040: DOUBLE
29041: EQUAL
29042: IFTRUE 29046
29044: GO 29260
29046: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29047: LD_ADDR_VAR 0 4
29051: PUSH
29052: LD_INT 35
29054: PUSH
29055: LD_INT 45
29057: PUSH
29058: LD_INT 46
29060: PUSH
29061: LD_INT 47
29063: PUSH
29064: LD_INT 82
29066: PUSH
29067: LD_INT 83
29069: PUSH
29070: LD_INT 84
29072: PUSH
29073: LD_INT 85
29075: PUSH
29076: LD_INT 86
29078: PUSH
29079: LD_INT 1
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: LD_INT 6
29087: PUSH
29088: LD_INT 15
29090: PUSH
29091: LD_INT 16
29093: PUSH
29094: LD_INT 7
29096: PUSH
29097: LD_INT 12
29099: PUSH
29100: LD_INT 13
29102: PUSH
29103: LD_INT 10
29105: PUSH
29106: LD_INT 14
29108: PUSH
29109: LD_INT 20
29111: PUSH
29112: LD_INT 21
29114: PUSH
29115: LD_INT 22
29117: PUSH
29118: LD_INT 25
29120: PUSH
29121: LD_INT 32
29123: PUSH
29124: LD_INT 27
29126: PUSH
29127: LD_INT 36
29129: PUSH
29130: LD_INT 69
29132: PUSH
29133: LD_INT 39
29135: PUSH
29136: LD_INT 34
29138: PUSH
29139: LD_INT 40
29141: PUSH
29142: LD_INT 48
29144: PUSH
29145: LD_INT 49
29147: PUSH
29148: LD_INT 50
29150: PUSH
29151: LD_INT 51
29153: PUSH
29154: LD_INT 52
29156: PUSH
29157: LD_INT 53
29159: PUSH
29160: LD_INT 54
29162: PUSH
29163: LD_INT 55
29165: PUSH
29166: LD_INT 56
29168: PUSH
29169: LD_INT 57
29171: PUSH
29172: LD_INT 58
29174: PUSH
29175: LD_INT 59
29177: PUSH
29178: LD_INT 60
29180: PUSH
29181: LD_INT 61
29183: PUSH
29184: LD_INT 62
29186: PUSH
29187: LD_INT 80
29189: PUSH
29190: LD_INT 82
29192: PUSH
29193: LD_INT 83
29195: PUSH
29196: LD_INT 84
29198: PUSH
29199: LD_INT 85
29201: PUSH
29202: LD_INT 86
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
29258: GO 29725
29260: LD_INT 2
29262: DOUBLE
29263: EQUAL
29264: IFTRUE 29268
29266: GO 29494
29268: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29269: LD_ADDR_VAR 0 4
29273: PUSH
29274: LD_INT 35
29276: PUSH
29277: LD_INT 45
29279: PUSH
29280: LD_INT 46
29282: PUSH
29283: LD_INT 47
29285: PUSH
29286: LD_INT 82
29288: PUSH
29289: LD_INT 83
29291: PUSH
29292: LD_INT 84
29294: PUSH
29295: LD_INT 85
29297: PUSH
29298: LD_INT 87
29300: PUSH
29301: LD_INT 70
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 11
29309: PUSH
29310: LD_INT 3
29312: PUSH
29313: LD_INT 4
29315: PUSH
29316: LD_INT 5
29318: PUSH
29319: LD_INT 6
29321: PUSH
29322: LD_INT 15
29324: PUSH
29325: LD_INT 18
29327: PUSH
29328: LD_INT 7
29330: PUSH
29331: LD_INT 17
29333: PUSH
29334: LD_INT 8
29336: PUSH
29337: LD_INT 20
29339: PUSH
29340: LD_INT 21
29342: PUSH
29343: LD_INT 22
29345: PUSH
29346: LD_INT 72
29348: PUSH
29349: LD_INT 26
29351: PUSH
29352: LD_INT 69
29354: PUSH
29355: LD_INT 39
29357: PUSH
29358: LD_INT 40
29360: PUSH
29361: LD_INT 41
29363: PUSH
29364: LD_INT 42
29366: PUSH
29367: LD_INT 43
29369: PUSH
29370: LD_INT 48
29372: PUSH
29373: LD_INT 49
29375: PUSH
29376: LD_INT 50
29378: PUSH
29379: LD_INT 51
29381: PUSH
29382: LD_INT 52
29384: PUSH
29385: LD_INT 53
29387: PUSH
29388: LD_INT 54
29390: PUSH
29391: LD_INT 55
29393: PUSH
29394: LD_INT 56
29396: PUSH
29397: LD_INT 60
29399: PUSH
29400: LD_INT 61
29402: PUSH
29403: LD_INT 62
29405: PUSH
29406: LD_INT 66
29408: PUSH
29409: LD_INT 67
29411: PUSH
29412: LD_INT 68
29414: PUSH
29415: LD_INT 81
29417: PUSH
29418: LD_INT 82
29420: PUSH
29421: LD_INT 83
29423: PUSH
29424: LD_INT 84
29426: PUSH
29427: LD_INT 85
29429: PUSH
29430: LD_INT 87
29432: PUSH
29433: LD_INT 88
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
29492: GO 29725
29494: LD_INT 3
29496: DOUBLE
29497: EQUAL
29498: IFTRUE 29502
29500: GO 29724
29502: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29503: LD_ADDR_VAR 0 4
29507: PUSH
29508: LD_INT 46
29510: PUSH
29511: LD_INT 47
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: LD_INT 82
29522: PUSH
29523: LD_INT 83
29525: PUSH
29526: LD_INT 84
29528: PUSH
29529: LD_INT 85
29531: PUSH
29532: LD_INT 86
29534: PUSH
29535: LD_INT 11
29537: PUSH
29538: LD_INT 9
29540: PUSH
29541: LD_INT 20
29543: PUSH
29544: LD_INT 19
29546: PUSH
29547: LD_INT 21
29549: PUSH
29550: LD_INT 24
29552: PUSH
29553: LD_INT 22
29555: PUSH
29556: LD_INT 25
29558: PUSH
29559: LD_INT 28
29561: PUSH
29562: LD_INT 29
29564: PUSH
29565: LD_INT 30
29567: PUSH
29568: LD_INT 31
29570: PUSH
29571: LD_INT 37
29573: PUSH
29574: LD_INT 38
29576: PUSH
29577: LD_INT 32
29579: PUSH
29580: LD_INT 27
29582: PUSH
29583: LD_INT 33
29585: PUSH
29586: LD_INT 69
29588: PUSH
29589: LD_INT 39
29591: PUSH
29592: LD_INT 34
29594: PUSH
29595: LD_INT 40
29597: PUSH
29598: LD_INT 71
29600: PUSH
29601: LD_INT 23
29603: PUSH
29604: LD_INT 44
29606: PUSH
29607: LD_INT 48
29609: PUSH
29610: LD_INT 49
29612: PUSH
29613: LD_INT 50
29615: PUSH
29616: LD_INT 51
29618: PUSH
29619: LD_INT 52
29621: PUSH
29622: LD_INT 53
29624: PUSH
29625: LD_INT 54
29627: PUSH
29628: LD_INT 55
29630: PUSH
29631: LD_INT 56
29633: PUSH
29634: LD_INT 57
29636: PUSH
29637: LD_INT 58
29639: PUSH
29640: LD_INT 59
29642: PUSH
29643: LD_INT 63
29645: PUSH
29646: LD_INT 64
29648: PUSH
29649: LD_INT 65
29651: PUSH
29652: LD_INT 82
29654: PUSH
29655: LD_INT 83
29657: PUSH
29658: LD_INT 84
29660: PUSH
29661: LD_INT 85
29663: PUSH
29664: LD_INT 86
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: ST_TO_ADDR
29722: GO 29725
29724: POP
// if state > - 1 and state < 3 then
29725: LD_VAR 0 3
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: GREATER
29734: PUSH
29735: LD_VAR 0 3
29739: PUSH
29740: LD_INT 3
29742: LESS
29743: AND
29744: IFFALSE 29801
// for i in result do
29746: LD_ADDR_VAR 0 5
29750: PUSH
29751: LD_VAR 0 4
29755: PUSH
29756: FOR_IN
29757: IFFALSE 29799
// if GetTech ( i , side ) <> state then
29759: LD_VAR 0 5
29763: PPUSH
29764: LD_VAR 0 1
29768: PPUSH
29769: CALL_OW 321
29773: PUSH
29774: LD_VAR 0 3
29778: NONEQUAL
29779: IFFALSE 29797
// result := result diff i ;
29781: LD_ADDR_VAR 0 4
29785: PUSH
29786: LD_VAR 0 4
29790: PUSH
29791: LD_VAR 0 5
29795: DIFF
29796: ST_TO_ADDR
29797: GO 29756
29799: POP
29800: POP
// end ;
29801: LD_VAR 0 4
29805: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29806: LD_INT 0
29808: PPUSH
29809: PPUSH
29810: PPUSH
// result := true ;
29811: LD_ADDR_VAR 0 3
29815: PUSH
29816: LD_INT 1
29818: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29819: LD_ADDR_VAR 0 5
29823: PUSH
29824: LD_VAR 0 2
29828: PPUSH
29829: CALL_OW 480
29833: ST_TO_ADDR
// if not tmp then
29834: LD_VAR 0 5
29838: NOT
29839: IFFALSE 29843
// exit ;
29841: GO 29892
// for i in tmp do
29843: LD_ADDR_VAR 0 4
29847: PUSH
29848: LD_VAR 0 5
29852: PUSH
29853: FOR_IN
29854: IFFALSE 29890
// if GetTech ( i , side ) <> state_researched then
29856: LD_VAR 0 4
29860: PPUSH
29861: LD_VAR 0 1
29865: PPUSH
29866: CALL_OW 321
29870: PUSH
29871: LD_INT 2
29873: NONEQUAL
29874: IFFALSE 29888
// begin result := false ;
29876: LD_ADDR_VAR 0 3
29880: PUSH
29881: LD_INT 0
29883: ST_TO_ADDR
// exit ;
29884: POP
29885: POP
29886: GO 29892
// end ;
29888: GO 29853
29890: POP
29891: POP
// end ;
29892: LD_VAR 0 3
29896: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29897: LD_INT 0
29899: PPUSH
29900: PPUSH
29901: PPUSH
29902: PPUSH
29903: PPUSH
29904: PPUSH
29905: PPUSH
29906: PPUSH
29907: PPUSH
29908: PPUSH
29909: PPUSH
29910: PPUSH
29911: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29912: LD_VAR 0 1
29916: NOT
29917: PUSH
29918: LD_VAR 0 1
29922: PPUSH
29923: CALL_OW 257
29927: PUSH
29928: LD_INT 9
29930: NONEQUAL
29931: OR
29932: IFFALSE 29936
// exit ;
29934: GO 30509
// side := GetSide ( unit ) ;
29936: LD_ADDR_VAR 0 9
29940: PUSH
29941: LD_VAR 0 1
29945: PPUSH
29946: CALL_OW 255
29950: ST_TO_ADDR
// tech_space := tech_spacanom ;
29951: LD_ADDR_VAR 0 12
29955: PUSH
29956: LD_INT 29
29958: ST_TO_ADDR
// tech_time := tech_taurad ;
29959: LD_ADDR_VAR 0 13
29963: PUSH
29964: LD_INT 28
29966: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29967: LD_ADDR_VAR 0 11
29971: PUSH
29972: LD_VAR 0 1
29976: PPUSH
29977: CALL_OW 310
29981: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29982: LD_VAR 0 11
29986: PPUSH
29987: CALL_OW 247
29991: PUSH
29992: LD_INT 2
29994: EQUAL
29995: IFFALSE 29999
// exit ;
29997: GO 30509
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29999: LD_ADDR_VAR 0 8
30003: PUSH
30004: LD_INT 81
30006: PUSH
30007: LD_VAR 0 9
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: LD_INT 21
30021: PUSH
30022: LD_INT 3
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PPUSH
30037: CALL_OW 69
30041: ST_TO_ADDR
// if not tmp then
30042: LD_VAR 0 8
30046: NOT
30047: IFFALSE 30051
// exit ;
30049: GO 30509
// if in_unit then
30051: LD_VAR 0 11
30055: IFFALSE 30079
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30057: LD_ADDR_VAR 0 10
30061: PUSH
30062: LD_VAR 0 8
30066: PPUSH
30067: LD_VAR 0 11
30071: PPUSH
30072: CALL_OW 74
30076: ST_TO_ADDR
30077: GO 30099
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30079: LD_ADDR_VAR 0 10
30083: PUSH
30084: LD_VAR 0 8
30088: PPUSH
30089: LD_VAR 0 1
30093: PPUSH
30094: CALL_OW 74
30098: ST_TO_ADDR
// if not enemy then
30099: LD_VAR 0 10
30103: NOT
30104: IFFALSE 30108
// exit ;
30106: GO 30509
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30108: LD_VAR 0 11
30112: PUSH
30113: LD_VAR 0 11
30117: PPUSH
30118: LD_VAR 0 10
30122: PPUSH
30123: CALL_OW 296
30127: PUSH
30128: LD_INT 13
30130: GREATER
30131: AND
30132: PUSH
30133: LD_VAR 0 1
30137: PPUSH
30138: LD_VAR 0 10
30142: PPUSH
30143: CALL_OW 296
30147: PUSH
30148: LD_INT 12
30150: GREATER
30151: OR
30152: IFFALSE 30156
// exit ;
30154: GO 30509
// missile := [ 1 ] ;
30156: LD_ADDR_VAR 0 14
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: EMPTY
30165: LIST
30166: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30167: LD_VAR 0 9
30171: PPUSH
30172: LD_VAR 0 12
30176: PPUSH
30177: CALL_OW 325
30181: IFFALSE 30210
// missile := Insert ( missile , missile + 1 , 2 ) ;
30183: LD_ADDR_VAR 0 14
30187: PUSH
30188: LD_VAR 0 14
30192: PPUSH
30193: LD_VAR 0 14
30197: PUSH
30198: LD_INT 1
30200: PLUS
30201: PPUSH
30202: LD_INT 2
30204: PPUSH
30205: CALL_OW 2
30209: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30210: LD_VAR 0 9
30214: PPUSH
30215: LD_VAR 0 13
30219: PPUSH
30220: CALL_OW 325
30224: PUSH
30225: LD_VAR 0 10
30229: PPUSH
30230: CALL_OW 255
30234: PPUSH
30235: LD_VAR 0 13
30239: PPUSH
30240: CALL_OW 325
30244: NOT
30245: AND
30246: IFFALSE 30275
// missile := Insert ( missile , missile + 1 , 3 ) ;
30248: LD_ADDR_VAR 0 14
30252: PUSH
30253: LD_VAR 0 14
30257: PPUSH
30258: LD_VAR 0 14
30262: PUSH
30263: LD_INT 1
30265: PLUS
30266: PPUSH
30267: LD_INT 3
30269: PPUSH
30270: CALL_OW 2
30274: ST_TO_ADDR
// if missile < 2 then
30275: LD_VAR 0 14
30279: PUSH
30280: LD_INT 2
30282: LESS
30283: IFFALSE 30287
// exit ;
30285: GO 30509
// x := GetX ( enemy ) ;
30287: LD_ADDR_VAR 0 4
30291: PUSH
30292: LD_VAR 0 10
30296: PPUSH
30297: CALL_OW 250
30301: ST_TO_ADDR
// y := GetY ( enemy ) ;
30302: LD_ADDR_VAR 0 5
30306: PUSH
30307: LD_VAR 0 10
30311: PPUSH
30312: CALL_OW 251
30316: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30317: LD_ADDR_VAR 0 6
30321: PUSH
30322: LD_VAR 0 4
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PPUSH
30331: LD_INT 1
30333: PPUSH
30334: CALL_OW 12
30338: PLUS
30339: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30340: LD_ADDR_VAR 0 7
30344: PUSH
30345: LD_VAR 0 5
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PPUSH
30354: LD_INT 1
30356: PPUSH
30357: CALL_OW 12
30361: PLUS
30362: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30363: LD_VAR 0 6
30367: PPUSH
30368: LD_VAR 0 7
30372: PPUSH
30373: CALL_OW 488
30377: NOT
30378: IFFALSE 30400
// begin _x := x ;
30380: LD_ADDR_VAR 0 6
30384: PUSH
30385: LD_VAR 0 4
30389: ST_TO_ADDR
// _y := y ;
30390: LD_ADDR_VAR 0 7
30394: PUSH
30395: LD_VAR 0 5
30399: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30400: LD_ADDR_VAR 0 3
30404: PUSH
30405: LD_INT 1
30407: PPUSH
30408: LD_VAR 0 14
30412: PPUSH
30413: CALL_OW 12
30417: ST_TO_ADDR
// case i of 1 :
30418: LD_VAR 0 3
30422: PUSH
30423: LD_INT 1
30425: DOUBLE
30426: EQUAL
30427: IFTRUE 30431
30429: GO 30448
30431: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30432: LD_VAR 0 1
30436: PPUSH
30437: LD_VAR 0 10
30441: PPUSH
30442: CALL_OW 115
30446: GO 30509
30448: LD_INT 2
30450: DOUBLE
30451: EQUAL
30452: IFTRUE 30456
30454: GO 30478
30456: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30457: LD_VAR 0 1
30461: PPUSH
30462: LD_VAR 0 6
30466: PPUSH
30467: LD_VAR 0 7
30471: PPUSH
30472: CALL_OW 153
30476: GO 30509
30478: LD_INT 3
30480: DOUBLE
30481: EQUAL
30482: IFTRUE 30486
30484: GO 30508
30486: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30487: LD_VAR 0 1
30491: PPUSH
30492: LD_VAR 0 6
30496: PPUSH
30497: LD_VAR 0 7
30501: PPUSH
30502: CALL_OW 154
30506: GO 30509
30508: POP
// end ;
30509: LD_VAR 0 2
30513: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30514: LD_INT 0
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
30521: PPUSH
// if not unit or not building then
30522: LD_VAR 0 1
30526: NOT
30527: PUSH
30528: LD_VAR 0 2
30532: NOT
30533: OR
30534: IFFALSE 30538
// exit ;
30536: GO 30696
// x := GetX ( building ) ;
30538: LD_ADDR_VAR 0 5
30542: PUSH
30543: LD_VAR 0 2
30547: PPUSH
30548: CALL_OW 250
30552: ST_TO_ADDR
// y := GetY ( building ) ;
30553: LD_ADDR_VAR 0 6
30557: PUSH
30558: LD_VAR 0 2
30562: PPUSH
30563: CALL_OW 251
30567: ST_TO_ADDR
// for i = 0 to 5 do
30568: LD_ADDR_VAR 0 4
30572: PUSH
30573: DOUBLE
30574: LD_INT 0
30576: DEC
30577: ST_TO_ADDR
30578: LD_INT 5
30580: PUSH
30581: FOR_TO
30582: IFFALSE 30694
// begin _x := ShiftX ( x , i , 3 ) ;
30584: LD_ADDR_VAR 0 7
30588: PUSH
30589: LD_VAR 0 5
30593: PPUSH
30594: LD_VAR 0 4
30598: PPUSH
30599: LD_INT 3
30601: PPUSH
30602: CALL_OW 272
30606: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30607: LD_ADDR_VAR 0 8
30611: PUSH
30612: LD_VAR 0 6
30616: PPUSH
30617: LD_VAR 0 4
30621: PPUSH
30622: LD_INT 3
30624: PPUSH
30625: CALL_OW 273
30629: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30630: LD_VAR 0 7
30634: PPUSH
30635: LD_VAR 0 8
30639: PPUSH
30640: CALL_OW 488
30644: NOT
30645: IFFALSE 30649
// continue ;
30647: GO 30581
// if HexInfo ( _x , _y ) = 0 then
30649: LD_VAR 0 7
30653: PPUSH
30654: LD_VAR 0 8
30658: PPUSH
30659: CALL_OW 428
30663: PUSH
30664: LD_INT 0
30666: EQUAL
30667: IFFALSE 30692
// begin ComMoveXY ( unit , _x , _y ) ;
30669: LD_VAR 0 1
30673: PPUSH
30674: LD_VAR 0 7
30678: PPUSH
30679: LD_VAR 0 8
30683: PPUSH
30684: CALL_OW 111
// exit ;
30688: POP
30689: POP
30690: GO 30696
// end ; end ;
30692: GO 30581
30694: POP
30695: POP
// end ;
30696: LD_VAR 0 3
30700: RET
// export function ScanBase ( side , base_area ) ; begin
30701: LD_INT 0
30703: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30704: LD_ADDR_VAR 0 3
30708: PUSH
30709: LD_VAR 0 2
30713: PPUSH
30714: LD_INT 81
30716: PUSH
30717: LD_VAR 0 1
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PPUSH
30726: CALL_OW 70
30730: ST_TO_ADDR
// end ;
30731: LD_VAR 0 3
30735: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30736: LD_INT 0
30738: PPUSH
30739: PPUSH
30740: PPUSH
30741: PPUSH
// result := false ;
30742: LD_ADDR_VAR 0 2
30746: PUSH
30747: LD_INT 0
30749: ST_TO_ADDR
// side := GetSide ( unit ) ;
30750: LD_ADDR_VAR 0 3
30754: PUSH
30755: LD_VAR 0 1
30759: PPUSH
30760: CALL_OW 255
30764: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30765: LD_ADDR_VAR 0 4
30769: PUSH
30770: LD_VAR 0 1
30774: PPUSH
30775: CALL_OW 248
30779: ST_TO_ADDR
// case nat of 1 :
30780: LD_VAR 0 4
30784: PUSH
30785: LD_INT 1
30787: DOUBLE
30788: EQUAL
30789: IFTRUE 30793
30791: GO 30804
30793: POP
// tech := tech_lassight ; 2 :
30794: LD_ADDR_VAR 0 5
30798: PUSH
30799: LD_INT 12
30801: ST_TO_ADDR
30802: GO 30843
30804: LD_INT 2
30806: DOUBLE
30807: EQUAL
30808: IFTRUE 30812
30810: GO 30823
30812: POP
// tech := tech_mortar ; 3 :
30813: LD_ADDR_VAR 0 5
30817: PUSH
30818: LD_INT 41
30820: ST_TO_ADDR
30821: GO 30843
30823: LD_INT 3
30825: DOUBLE
30826: EQUAL
30827: IFTRUE 30831
30829: GO 30842
30831: POP
// tech := tech_bazooka ; end ;
30832: LD_ADDR_VAR 0 5
30836: PUSH
30837: LD_INT 44
30839: ST_TO_ADDR
30840: GO 30843
30842: POP
// if Researched ( side , tech ) then
30843: LD_VAR 0 3
30847: PPUSH
30848: LD_VAR 0 5
30852: PPUSH
30853: CALL_OW 325
30857: IFFALSE 30884
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30859: LD_ADDR_VAR 0 2
30863: PUSH
30864: LD_INT 5
30866: PUSH
30867: LD_INT 8
30869: PUSH
30870: LD_INT 9
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: PUSH
30878: LD_VAR 0 4
30882: ARRAY
30883: ST_TO_ADDR
// end ;
30884: LD_VAR 0 2
30888: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30889: LD_INT 0
30891: PPUSH
30892: PPUSH
30893: PPUSH
// if not mines then
30894: LD_VAR 0 2
30898: NOT
30899: IFFALSE 30903
// exit ;
30901: GO 31047
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30903: LD_ADDR_VAR 0 5
30907: PUSH
30908: LD_INT 81
30910: PUSH
30911: LD_VAR 0 1
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 3
30922: PUSH
30923: LD_INT 21
30925: PUSH
30926: LD_INT 3
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PPUSH
30941: CALL_OW 69
30945: ST_TO_ADDR
// for i in mines do
30946: LD_ADDR_VAR 0 4
30950: PUSH
30951: LD_VAR 0 2
30955: PUSH
30956: FOR_IN
30957: IFFALSE 31045
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30959: LD_VAR 0 4
30963: PUSH
30964: LD_INT 1
30966: ARRAY
30967: PPUSH
30968: LD_VAR 0 4
30972: PUSH
30973: LD_INT 2
30975: ARRAY
30976: PPUSH
30977: CALL_OW 458
30981: NOT
30982: IFFALSE 30986
// continue ;
30984: GO 30956
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30986: LD_VAR 0 4
30990: PUSH
30991: LD_INT 1
30993: ARRAY
30994: PPUSH
30995: LD_VAR 0 4
30999: PUSH
31000: LD_INT 2
31002: ARRAY
31003: PPUSH
31004: CALL_OW 428
31008: PUSH
31009: LD_VAR 0 5
31013: IN
31014: IFFALSE 31043
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31016: LD_VAR 0 4
31020: PUSH
31021: LD_INT 1
31023: ARRAY
31024: PPUSH
31025: LD_VAR 0 4
31029: PUSH
31030: LD_INT 2
31032: ARRAY
31033: PPUSH
31034: LD_VAR 0 1
31038: PPUSH
31039: CALL_OW 456
// end ;
31043: GO 30956
31045: POP
31046: POP
// end ;
31047: LD_VAR 0 3
31051: RET
// export function Count ( array ) ; var i ; begin
31052: LD_INT 0
31054: PPUSH
31055: PPUSH
// result := 0 ;
31056: LD_ADDR_VAR 0 2
31060: PUSH
31061: LD_INT 0
31063: ST_TO_ADDR
// for i in array do
31064: LD_ADDR_VAR 0 3
31068: PUSH
31069: LD_VAR 0 1
31073: PUSH
31074: FOR_IN
31075: IFFALSE 31099
// if i then
31077: LD_VAR 0 3
31081: IFFALSE 31097
// result := result + 1 ;
31083: LD_ADDR_VAR 0 2
31087: PUSH
31088: LD_VAR 0 2
31092: PUSH
31093: LD_INT 1
31095: PLUS
31096: ST_TO_ADDR
31097: GO 31074
31099: POP
31100: POP
// end ;
31101: LD_VAR 0 2
31105: RET
// export function IsEmpty ( building ) ; begin
31106: LD_INT 0
31108: PPUSH
// if not building then
31109: LD_VAR 0 1
31113: NOT
31114: IFFALSE 31118
// exit ;
31116: GO 31161
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31118: LD_ADDR_VAR 0 2
31122: PUSH
31123: LD_VAR 0 1
31127: PUSH
31128: LD_INT 22
31130: PUSH
31131: LD_VAR 0 1
31135: PPUSH
31136: CALL_OW 255
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 58
31147: PUSH
31148: EMPTY
31149: LIST
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PPUSH
31155: CALL_OW 69
31159: IN
31160: ST_TO_ADDR
// end ;
31161: LD_VAR 0 2
31165: RET
// export function IsNotFull ( building ) ; begin
31166: LD_INT 0
31168: PPUSH
// if not building then
31169: LD_VAR 0 1
31173: NOT
31174: IFFALSE 31178
// exit ;
31176: GO 31197
// result := UnitsInside ( building ) < 6 ;
31178: LD_ADDR_VAR 0 2
31182: PUSH
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 313
31192: PUSH
31193: LD_INT 6
31195: LESS
31196: ST_TO_ADDR
// end ;
31197: LD_VAR 0 2
31201: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31202: LD_INT 0
31204: PPUSH
31205: PPUSH
31206: PPUSH
31207: PPUSH
// tmp := [ ] ;
31208: LD_ADDR_VAR 0 3
31212: PUSH
31213: EMPTY
31214: ST_TO_ADDR
// list := [ ] ;
31215: LD_ADDR_VAR 0 5
31219: PUSH
31220: EMPTY
31221: ST_TO_ADDR
// for i = 16 to 25 do
31222: LD_ADDR_VAR 0 4
31226: PUSH
31227: DOUBLE
31228: LD_INT 16
31230: DEC
31231: ST_TO_ADDR
31232: LD_INT 25
31234: PUSH
31235: FOR_TO
31236: IFFALSE 31309
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31238: LD_ADDR_VAR 0 3
31242: PUSH
31243: LD_VAR 0 3
31247: PUSH
31248: LD_INT 22
31250: PUSH
31251: LD_VAR 0 1
31255: PPUSH
31256: CALL_OW 255
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 91
31267: PUSH
31268: LD_VAR 0 1
31272: PUSH
31273: LD_INT 6
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 30
31283: PUSH
31284: LD_VAR 0 4
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: PPUSH
31301: CALL_OW 69
31305: ADD
31306: ST_TO_ADDR
31307: GO 31235
31309: POP
31310: POP
// for i = 1 to tmp do
31311: LD_ADDR_VAR 0 4
31315: PUSH
31316: DOUBLE
31317: LD_INT 1
31319: DEC
31320: ST_TO_ADDR
31321: LD_VAR 0 3
31325: PUSH
31326: FOR_TO
31327: IFFALSE 31415
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31329: LD_ADDR_VAR 0 5
31333: PUSH
31334: LD_VAR 0 5
31338: PUSH
31339: LD_VAR 0 3
31343: PUSH
31344: LD_VAR 0 4
31348: ARRAY
31349: PPUSH
31350: CALL_OW 266
31354: PUSH
31355: LD_VAR 0 3
31359: PUSH
31360: LD_VAR 0 4
31364: ARRAY
31365: PPUSH
31366: CALL_OW 250
31370: PUSH
31371: LD_VAR 0 3
31375: PUSH
31376: LD_VAR 0 4
31380: ARRAY
31381: PPUSH
31382: CALL_OW 251
31386: PUSH
31387: LD_VAR 0 3
31391: PUSH
31392: LD_VAR 0 4
31396: ARRAY
31397: PPUSH
31398: CALL_OW 254
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: PUSH
31409: EMPTY
31410: LIST
31411: ADD
31412: ST_TO_ADDR
31413: GO 31326
31415: POP
31416: POP
// result := list ;
31417: LD_ADDR_VAR 0 2
31421: PUSH
31422: LD_VAR 0 5
31426: ST_TO_ADDR
// end ;
31427: LD_VAR 0 2
31431: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31432: LD_INT 0
31434: PPUSH
31435: PPUSH
31436: PPUSH
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
// if not factory then
31441: LD_VAR 0 1
31445: NOT
31446: IFFALSE 31450
// exit ;
31448: GO 32043
// if control = control_apeman then
31450: LD_VAR 0 4
31454: PUSH
31455: LD_INT 5
31457: EQUAL
31458: IFFALSE 31567
// begin tmp := UnitsInside ( factory ) ;
31460: LD_ADDR_VAR 0 8
31464: PUSH
31465: LD_VAR 0 1
31469: PPUSH
31470: CALL_OW 313
31474: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31475: LD_VAR 0 8
31479: PPUSH
31480: LD_INT 25
31482: PUSH
31483: LD_INT 12
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PPUSH
31490: CALL_OW 72
31494: NOT
31495: IFFALSE 31505
// control := control_manual ;
31497: LD_ADDR_VAR 0 4
31501: PUSH
31502: LD_INT 1
31504: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31505: LD_ADDR_VAR 0 8
31509: PUSH
31510: LD_VAR 0 1
31514: PPUSH
31515: CALL 31202 0 1
31519: ST_TO_ADDR
// if tmp then
31520: LD_VAR 0 8
31524: IFFALSE 31567
// begin for i in tmp do
31526: LD_ADDR_VAR 0 7
31530: PUSH
31531: LD_VAR 0 8
31535: PUSH
31536: FOR_IN
31537: IFFALSE 31565
// if i [ 1 ] = b_ext_radio then
31539: LD_VAR 0 7
31543: PUSH
31544: LD_INT 1
31546: ARRAY
31547: PUSH
31548: LD_INT 22
31550: EQUAL
31551: IFFALSE 31563
// begin control := control_remote ;
31553: LD_ADDR_VAR 0 4
31557: PUSH
31558: LD_INT 2
31560: ST_TO_ADDR
// break ;
31561: GO 31565
// end ;
31563: GO 31536
31565: POP
31566: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31567: LD_VAR 0 1
31571: PPUSH
31572: LD_VAR 0 2
31576: PPUSH
31577: LD_VAR 0 3
31581: PPUSH
31582: LD_VAR 0 4
31586: PPUSH
31587: LD_VAR 0 5
31591: PPUSH
31592: CALL_OW 448
31596: IFFALSE 31631
// begin result := [ chassis , engine , control , weapon ] ;
31598: LD_ADDR_VAR 0 6
31602: PUSH
31603: LD_VAR 0 2
31607: PUSH
31608: LD_VAR 0 3
31612: PUSH
31613: LD_VAR 0 4
31617: PUSH
31618: LD_VAR 0 5
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: ST_TO_ADDR
// exit ;
31629: GO 32043
// end ; _chassis := AvailableChassisList ( factory ) ;
31631: LD_ADDR_VAR 0 9
31635: PUSH
31636: LD_VAR 0 1
31640: PPUSH
31641: CALL_OW 475
31645: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31646: LD_ADDR_VAR 0 11
31650: PUSH
31651: LD_VAR 0 1
31655: PPUSH
31656: CALL_OW 476
31660: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31661: LD_ADDR_VAR 0 12
31665: PUSH
31666: LD_VAR 0 1
31670: PPUSH
31671: CALL_OW 477
31675: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31676: LD_ADDR_VAR 0 10
31680: PUSH
31681: LD_VAR 0 1
31685: PPUSH
31686: CALL_OW 478
31690: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31691: LD_VAR 0 9
31695: NOT
31696: PUSH
31697: LD_VAR 0 11
31701: NOT
31702: OR
31703: PUSH
31704: LD_VAR 0 12
31708: NOT
31709: OR
31710: PUSH
31711: LD_VAR 0 10
31715: NOT
31716: OR
31717: IFFALSE 31752
// begin result := [ chassis , engine , control , weapon ] ;
31719: LD_ADDR_VAR 0 6
31723: PUSH
31724: LD_VAR 0 2
31728: PUSH
31729: LD_VAR 0 3
31733: PUSH
31734: LD_VAR 0 4
31738: PUSH
31739: LD_VAR 0 5
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: ST_TO_ADDR
// exit ;
31750: GO 32043
// end ; if not chassis in _chassis then
31752: LD_VAR 0 2
31756: PUSH
31757: LD_VAR 0 9
31761: IN
31762: NOT
31763: IFFALSE 31789
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31765: LD_ADDR_VAR 0 2
31769: PUSH
31770: LD_VAR 0 9
31774: PUSH
31775: LD_INT 1
31777: PPUSH
31778: LD_VAR 0 9
31782: PPUSH
31783: CALL_OW 12
31787: ARRAY
31788: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31789: LD_VAR 0 2
31793: PPUSH
31794: LD_VAR 0 3
31798: PPUSH
31799: CALL 32048 0 2
31803: NOT
31804: IFFALSE 31863
// repeat engine := _engine [ 1 ] ;
31806: LD_ADDR_VAR 0 3
31810: PUSH
31811: LD_VAR 0 11
31815: PUSH
31816: LD_INT 1
31818: ARRAY
31819: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31820: LD_ADDR_VAR 0 11
31824: PUSH
31825: LD_VAR 0 11
31829: PPUSH
31830: LD_INT 1
31832: PPUSH
31833: CALL_OW 3
31837: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31838: LD_VAR 0 2
31842: PPUSH
31843: LD_VAR 0 3
31847: PPUSH
31848: CALL 32048 0 2
31852: PUSH
31853: LD_VAR 0 11
31857: PUSH
31858: EMPTY
31859: EQUAL
31860: OR
31861: IFFALSE 31806
// if not control in _control then
31863: LD_VAR 0 4
31867: PUSH
31868: LD_VAR 0 12
31872: IN
31873: NOT
31874: IFFALSE 31900
// control := _control [ rand ( 1 , _control ) ] ;
31876: LD_ADDR_VAR 0 4
31880: PUSH
31881: LD_VAR 0 12
31885: PUSH
31886: LD_INT 1
31888: PPUSH
31889: LD_VAR 0 12
31893: PPUSH
31894: CALL_OW 12
31898: ARRAY
31899: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31900: LD_VAR 0 2
31904: PPUSH
31905: LD_VAR 0 5
31909: PPUSH
31910: CALL 32268 0 2
31914: NOT
31915: IFFALSE 31974
// repeat weapon := _weapon [ 1 ] ;
31917: LD_ADDR_VAR 0 5
31921: PUSH
31922: LD_VAR 0 10
31926: PUSH
31927: LD_INT 1
31929: ARRAY
31930: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31931: LD_ADDR_VAR 0 10
31935: PUSH
31936: LD_VAR 0 10
31940: PPUSH
31941: LD_INT 1
31943: PPUSH
31944: CALL_OW 3
31948: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31949: LD_VAR 0 2
31953: PPUSH
31954: LD_VAR 0 5
31958: PPUSH
31959: CALL 32268 0 2
31963: PUSH
31964: LD_VAR 0 10
31968: PUSH
31969: EMPTY
31970: EQUAL
31971: OR
31972: IFFALSE 31917
// result := [ ] ;
31974: LD_ADDR_VAR 0 6
31978: PUSH
31979: EMPTY
31980: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31981: LD_VAR 0 1
31985: PPUSH
31986: LD_VAR 0 2
31990: PPUSH
31991: LD_VAR 0 3
31995: PPUSH
31996: LD_VAR 0 4
32000: PPUSH
32001: LD_VAR 0 5
32005: PPUSH
32006: CALL_OW 448
32010: IFFALSE 32043
// result := [ chassis , engine , control , weapon ] ;
32012: LD_ADDR_VAR 0 6
32016: PUSH
32017: LD_VAR 0 2
32021: PUSH
32022: LD_VAR 0 3
32026: PUSH
32027: LD_VAR 0 4
32031: PUSH
32032: LD_VAR 0 5
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: ST_TO_ADDR
// end ;
32043: LD_VAR 0 6
32047: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32048: LD_INT 0
32050: PPUSH
// if not chassis or not engine then
32051: LD_VAR 0 1
32055: NOT
32056: PUSH
32057: LD_VAR 0 2
32061: NOT
32062: OR
32063: IFFALSE 32067
// exit ;
32065: GO 32263
// case engine of engine_solar :
32067: LD_VAR 0 2
32071: PUSH
32072: LD_INT 2
32074: DOUBLE
32075: EQUAL
32076: IFTRUE 32080
32078: GO 32118
32080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32081: LD_ADDR_VAR 0 3
32085: PUSH
32086: LD_INT 11
32088: PUSH
32089: LD_INT 12
32091: PUSH
32092: LD_INT 13
32094: PUSH
32095: LD_INT 14
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: ST_TO_ADDR
32116: GO 32247
32118: LD_INT 1
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32188
32126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_INT 11
32134: PUSH
32135: LD_INT 12
32137: PUSH
32138: LD_INT 13
32140: PUSH
32141: LD_INT 14
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: LD_INT 5
32158: PUSH
32159: LD_INT 21
32161: PUSH
32162: LD_INT 23
32164: PUSH
32165: LD_INT 22
32167: PUSH
32168: LD_INT 24
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: ST_TO_ADDR
32186: GO 32247
32188: LD_INT 3
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32196
32194: GO 32246
32196: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32197: LD_ADDR_VAR 0 3
32201: PUSH
32202: LD_INT 13
32204: PUSH
32205: LD_INT 14
32207: PUSH
32208: LD_INT 2
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: LD_INT 4
32216: PUSH
32217: LD_INT 5
32219: PUSH
32220: LD_INT 21
32222: PUSH
32223: LD_INT 22
32225: PUSH
32226: LD_INT 23
32228: PUSH
32229: LD_INT 24
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: ST_TO_ADDR
32244: GO 32247
32246: POP
// result := ( chassis in result ) ;
32247: LD_ADDR_VAR 0 3
32251: PUSH
32252: LD_VAR 0 1
32256: PUSH
32257: LD_VAR 0 3
32261: IN
32262: ST_TO_ADDR
// end ;
32263: LD_VAR 0 3
32267: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32268: LD_INT 0
32270: PPUSH
// if not chassis or not weapon then
32271: LD_VAR 0 1
32275: NOT
32276: PUSH
32277: LD_VAR 0 2
32281: NOT
32282: OR
32283: IFFALSE 32287
// exit ;
32285: GO 33349
// case weapon of us_machine_gun :
32287: LD_VAR 0 2
32291: PUSH
32292: LD_INT 2
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32330
32300: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32301: LD_ADDR_VAR 0 3
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 3
32314: PUSH
32315: LD_INT 4
32317: PUSH
32318: LD_INT 5
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
32328: GO 33333
32330: LD_INT 3
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32368
32338: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32339: LD_ADDR_VAR 0 3
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: LD_INT 4
32355: PUSH
32356: LD_INT 5
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: ST_TO_ADDR
32366: GO 33333
32368: LD_INT 11
32370: DOUBLE
32371: EQUAL
32372: IFTRUE 32376
32374: GO 32406
32376: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32377: LD_ADDR_VAR 0 3
32381: PUSH
32382: LD_INT 1
32384: PUSH
32385: LD_INT 2
32387: PUSH
32388: LD_INT 3
32390: PUSH
32391: LD_INT 4
32393: PUSH
32394: LD_INT 5
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: ST_TO_ADDR
32404: GO 33333
32406: LD_INT 4
32408: DOUBLE
32409: EQUAL
32410: IFTRUE 32414
32412: GO 32440
32414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32415: LD_ADDR_VAR 0 3
32419: PUSH
32420: LD_INT 2
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: LD_INT 4
32428: PUSH
32429: LD_INT 5
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: ST_TO_ADDR
32438: GO 33333
32440: LD_INT 5
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32448
32446: GO 32474
32448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: LD_INT 3
32459: PUSH
32460: LD_INT 4
32462: PUSH
32463: LD_INT 5
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: ST_TO_ADDR
32472: GO 33333
32474: LD_INT 9
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32508
32482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32483: LD_ADDR_VAR 0 3
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: LD_INT 3
32493: PUSH
32494: LD_INT 4
32496: PUSH
32497: LD_INT 5
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: ST_TO_ADDR
32506: GO 33333
32508: LD_INT 7
32510: DOUBLE
32511: EQUAL
32512: IFTRUE 32516
32514: GO 32542
32516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: LD_INT 3
32527: PUSH
32528: LD_INT 4
32530: PUSH
32531: LD_INT 5
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: ST_TO_ADDR
32540: GO 33333
32542: LD_INT 12
32544: DOUBLE
32545: EQUAL
32546: IFTRUE 32550
32548: GO 32576
32550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32551: LD_ADDR_VAR 0 3
32555: PUSH
32556: LD_INT 2
32558: PUSH
32559: LD_INT 3
32561: PUSH
32562: LD_INT 4
32564: PUSH
32565: LD_INT 5
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: ST_TO_ADDR
32574: GO 33333
32576: LD_INT 13
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32584
32582: GO 32610
32584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: LD_INT 4
32598: PUSH
32599: LD_INT 5
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: ST_TO_ADDR
32608: GO 33333
32610: LD_INT 14
32612: DOUBLE
32613: EQUAL
32614: IFTRUE 32618
32616: GO 32636
32618: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32619: LD_ADDR_VAR 0 3
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: LD_INT 5
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: ST_TO_ADDR
32634: GO 33333
32636: LD_INT 6
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32662
32644: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32645: LD_ADDR_VAR 0 3
32649: PUSH
32650: LD_INT 4
32652: PUSH
32653: LD_INT 5
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: ST_TO_ADDR
32660: GO 33333
32662: LD_INT 10
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32688
32670: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32671: LD_ADDR_VAR 0 3
32675: PUSH
32676: LD_INT 4
32678: PUSH
32679: LD_INT 5
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: ST_TO_ADDR
32686: GO 33333
32688: LD_INT 22
32690: DOUBLE
32691: EQUAL
32692: IFTRUE 32696
32694: GO 32722
32696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32697: LD_ADDR_VAR 0 3
32701: PUSH
32702: LD_INT 11
32704: PUSH
32705: LD_INT 12
32707: PUSH
32708: LD_INT 13
32710: PUSH
32711: LD_INT 14
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: ST_TO_ADDR
32720: GO 33333
32722: LD_INT 23
32724: DOUBLE
32725: EQUAL
32726: IFTRUE 32730
32728: GO 32756
32730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32731: LD_ADDR_VAR 0 3
32735: PUSH
32736: LD_INT 11
32738: PUSH
32739: LD_INT 12
32741: PUSH
32742: LD_INT 13
32744: PUSH
32745: LD_INT 14
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: ST_TO_ADDR
32754: GO 33333
32756: LD_INT 24
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32764
32762: GO 32790
32764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32765: LD_ADDR_VAR 0 3
32769: PUSH
32770: LD_INT 11
32772: PUSH
32773: LD_INT 12
32775: PUSH
32776: LD_INT 13
32778: PUSH
32779: LD_INT 14
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: ST_TO_ADDR
32788: GO 33333
32790: LD_INT 30
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32824
32798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32799: LD_ADDR_VAR 0 3
32803: PUSH
32804: LD_INT 11
32806: PUSH
32807: LD_INT 12
32809: PUSH
32810: LD_INT 13
32812: PUSH
32813: LD_INT 14
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: ST_TO_ADDR
32822: GO 33333
32824: LD_INT 25
32826: DOUBLE
32827: EQUAL
32828: IFTRUE 32832
32830: GO 32850
32832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32833: LD_ADDR_VAR 0 3
32837: PUSH
32838: LD_INT 13
32840: PUSH
32841: LD_INT 14
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: ST_TO_ADDR
32848: GO 33333
32850: LD_INT 27
32852: DOUBLE
32853: EQUAL
32854: IFTRUE 32858
32856: GO 32876
32858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32859: LD_ADDR_VAR 0 3
32863: PUSH
32864: LD_INT 13
32866: PUSH
32867: LD_INT 14
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: ST_TO_ADDR
32874: GO 33333
32876: LD_EXP 19
32880: DOUBLE
32881: EQUAL
32882: IFTRUE 32886
32884: GO 32912
32886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32887: LD_ADDR_VAR 0 3
32891: PUSH
32892: LD_INT 11
32894: PUSH
32895: LD_INT 12
32897: PUSH
32898: LD_INT 13
32900: PUSH
32901: LD_INT 14
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: ST_TO_ADDR
32910: GO 33333
32912: LD_INT 28
32914: DOUBLE
32915: EQUAL
32916: IFTRUE 32920
32918: GO 32938
32920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32921: LD_ADDR_VAR 0 3
32925: PUSH
32926: LD_INT 13
32928: PUSH
32929: LD_INT 14
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: ST_TO_ADDR
32936: GO 33333
32938: LD_INT 29
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32946
32944: GO 32964
32946: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32947: LD_ADDR_VAR 0 3
32951: PUSH
32952: LD_INT 13
32954: PUSH
32955: LD_INT 14
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: ST_TO_ADDR
32962: GO 33333
32964: LD_INT 31
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32972
32970: GO 32990
32972: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32973: LD_ADDR_VAR 0 3
32977: PUSH
32978: LD_INT 13
32980: PUSH
32981: LD_INT 14
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: ST_TO_ADDR
32988: GO 33333
32990: LD_INT 26
32992: DOUBLE
32993: EQUAL
32994: IFTRUE 32998
32996: GO 33016
32998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32999: LD_ADDR_VAR 0 3
33003: PUSH
33004: LD_INT 13
33006: PUSH
33007: LD_INT 14
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: ST_TO_ADDR
33014: GO 33333
33016: LD_INT 42
33018: DOUBLE
33019: EQUAL
33020: IFTRUE 33024
33022: GO 33050
33024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33025: LD_ADDR_VAR 0 3
33029: PUSH
33030: LD_INT 21
33032: PUSH
33033: LD_INT 22
33035: PUSH
33036: LD_INT 23
33038: PUSH
33039: LD_INT 24
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
33048: GO 33333
33050: LD_INT 43
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33084
33058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33059: LD_ADDR_VAR 0 3
33063: PUSH
33064: LD_INT 21
33066: PUSH
33067: LD_INT 22
33069: PUSH
33070: LD_INT 23
33072: PUSH
33073: LD_INT 24
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: ST_TO_ADDR
33082: GO 33333
33084: LD_INT 44
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33118
33092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33093: LD_ADDR_VAR 0 3
33097: PUSH
33098: LD_INT 21
33100: PUSH
33101: LD_INT 22
33103: PUSH
33104: LD_INT 23
33106: PUSH
33107: LD_INT 24
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: ST_TO_ADDR
33116: GO 33333
33118: LD_INT 45
33120: DOUBLE
33121: EQUAL
33122: IFTRUE 33126
33124: GO 33152
33126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33127: LD_ADDR_VAR 0 3
33131: PUSH
33132: LD_INT 21
33134: PUSH
33135: LD_INT 22
33137: PUSH
33138: LD_INT 23
33140: PUSH
33141: LD_INT 24
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: ST_TO_ADDR
33150: GO 33333
33152: LD_INT 49
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33160
33158: GO 33186
33160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33161: LD_ADDR_VAR 0 3
33165: PUSH
33166: LD_INT 21
33168: PUSH
33169: LD_INT 22
33171: PUSH
33172: LD_INT 23
33174: PUSH
33175: LD_INT 24
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: ST_TO_ADDR
33184: GO 33333
33186: LD_INT 51
33188: DOUBLE
33189: EQUAL
33190: IFTRUE 33194
33192: GO 33220
33194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33195: LD_ADDR_VAR 0 3
33199: PUSH
33200: LD_INT 21
33202: PUSH
33203: LD_INT 22
33205: PUSH
33206: LD_INT 23
33208: PUSH
33209: LD_INT 24
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
33218: GO 33333
33220: LD_INT 52
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33228
33226: GO 33254
33228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33229: LD_ADDR_VAR 0 3
33233: PUSH
33234: LD_INT 21
33236: PUSH
33237: LD_INT 22
33239: PUSH
33240: LD_INT 23
33242: PUSH
33243: LD_INT 24
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: ST_TO_ADDR
33252: GO 33333
33254: LD_INT 53
33256: DOUBLE
33257: EQUAL
33258: IFTRUE 33262
33260: GO 33280
33262: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33263: LD_ADDR_VAR 0 3
33267: PUSH
33268: LD_INT 23
33270: PUSH
33271: LD_INT 24
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: ST_TO_ADDR
33278: GO 33333
33280: LD_INT 46
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33288
33286: GO 33306
33288: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33289: LD_ADDR_VAR 0 3
33293: PUSH
33294: LD_INT 23
33296: PUSH
33297: LD_INT 24
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: ST_TO_ADDR
33304: GO 33333
33306: LD_INT 47
33308: DOUBLE
33309: EQUAL
33310: IFTRUE 33314
33312: GO 33332
33314: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33315: LD_ADDR_VAR 0 3
33319: PUSH
33320: LD_INT 23
33322: PUSH
33323: LD_INT 24
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: ST_TO_ADDR
33330: GO 33333
33332: POP
// result := ( chassis in result ) ;
33333: LD_ADDR_VAR 0 3
33337: PUSH
33338: LD_VAR 0 1
33342: PUSH
33343: LD_VAR 0 3
33347: IN
33348: ST_TO_ADDR
// end ;
33349: LD_VAR 0 3
33353: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33354: LD_INT 0
33356: PPUSH
33357: PPUSH
33358: PPUSH
33359: PPUSH
33360: PPUSH
33361: PPUSH
33362: PPUSH
// result := array ;
33363: LD_ADDR_VAR 0 5
33367: PUSH
33368: LD_VAR 0 1
33372: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33373: LD_VAR 0 1
33377: NOT
33378: PUSH
33379: LD_VAR 0 2
33383: NOT
33384: OR
33385: PUSH
33386: LD_VAR 0 3
33390: NOT
33391: OR
33392: PUSH
33393: LD_VAR 0 2
33397: PUSH
33398: LD_VAR 0 1
33402: GREATER
33403: OR
33404: PUSH
33405: LD_VAR 0 3
33409: PUSH
33410: LD_VAR 0 1
33414: GREATER
33415: OR
33416: IFFALSE 33420
// exit ;
33418: GO 33716
// if direction then
33420: LD_VAR 0 4
33424: IFFALSE 33488
// begin d := 1 ;
33426: LD_ADDR_VAR 0 9
33430: PUSH
33431: LD_INT 1
33433: ST_TO_ADDR
// if i_from > i_to then
33434: LD_VAR 0 2
33438: PUSH
33439: LD_VAR 0 3
33443: GREATER
33444: IFFALSE 33470
// length := ( array - i_from ) + i_to else
33446: LD_ADDR_VAR 0 11
33450: PUSH
33451: LD_VAR 0 1
33455: PUSH
33456: LD_VAR 0 2
33460: MINUS
33461: PUSH
33462: LD_VAR 0 3
33466: PLUS
33467: ST_TO_ADDR
33468: GO 33486
// length := i_to - i_from ;
33470: LD_ADDR_VAR 0 11
33474: PUSH
33475: LD_VAR 0 3
33479: PUSH
33480: LD_VAR 0 2
33484: MINUS
33485: ST_TO_ADDR
// end else
33486: GO 33549
// begin d := - 1 ;
33488: LD_ADDR_VAR 0 9
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: ST_TO_ADDR
// if i_from > i_to then
33497: LD_VAR 0 2
33501: PUSH
33502: LD_VAR 0 3
33506: GREATER
33507: IFFALSE 33527
// length := i_from - i_to else
33509: LD_ADDR_VAR 0 11
33513: PUSH
33514: LD_VAR 0 2
33518: PUSH
33519: LD_VAR 0 3
33523: MINUS
33524: ST_TO_ADDR
33525: GO 33549
// length := ( array - i_to ) + i_from ;
33527: LD_ADDR_VAR 0 11
33531: PUSH
33532: LD_VAR 0 1
33536: PUSH
33537: LD_VAR 0 3
33541: MINUS
33542: PUSH
33543: LD_VAR 0 2
33547: PLUS
33548: ST_TO_ADDR
// end ; if not length then
33549: LD_VAR 0 11
33553: NOT
33554: IFFALSE 33558
// exit ;
33556: GO 33716
// tmp := array ;
33558: LD_ADDR_VAR 0 10
33562: PUSH
33563: LD_VAR 0 1
33567: ST_TO_ADDR
// for i = 1 to length do
33568: LD_ADDR_VAR 0 6
33572: PUSH
33573: DOUBLE
33574: LD_INT 1
33576: DEC
33577: ST_TO_ADDR
33578: LD_VAR 0 11
33582: PUSH
33583: FOR_TO
33584: IFFALSE 33704
// begin for j = 1 to array do
33586: LD_ADDR_VAR 0 7
33590: PUSH
33591: DOUBLE
33592: LD_INT 1
33594: DEC
33595: ST_TO_ADDR
33596: LD_VAR 0 1
33600: PUSH
33601: FOR_TO
33602: IFFALSE 33690
// begin k := j + d ;
33604: LD_ADDR_VAR 0 8
33608: PUSH
33609: LD_VAR 0 7
33613: PUSH
33614: LD_VAR 0 9
33618: PLUS
33619: ST_TO_ADDR
// if k > array then
33620: LD_VAR 0 8
33624: PUSH
33625: LD_VAR 0 1
33629: GREATER
33630: IFFALSE 33640
// k := 1 ;
33632: LD_ADDR_VAR 0 8
33636: PUSH
33637: LD_INT 1
33639: ST_TO_ADDR
// if not k then
33640: LD_VAR 0 8
33644: NOT
33645: IFFALSE 33657
// k := array ;
33647: LD_ADDR_VAR 0 8
33651: PUSH
33652: LD_VAR 0 1
33656: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33657: LD_ADDR_VAR 0 10
33661: PUSH
33662: LD_VAR 0 10
33666: PPUSH
33667: LD_VAR 0 8
33671: PPUSH
33672: LD_VAR 0 1
33676: PUSH
33677: LD_VAR 0 7
33681: ARRAY
33682: PPUSH
33683: CALL_OW 1
33687: ST_TO_ADDR
// end ;
33688: GO 33601
33690: POP
33691: POP
// array := tmp ;
33692: LD_ADDR_VAR 0 1
33696: PUSH
33697: LD_VAR 0 10
33701: ST_TO_ADDR
// end ;
33702: GO 33583
33704: POP
33705: POP
// result := array ;
33706: LD_ADDR_VAR 0 5
33710: PUSH
33711: LD_VAR 0 1
33715: ST_TO_ADDR
// end ;
33716: LD_VAR 0 5
33720: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33721: LD_INT 0
33723: PPUSH
33724: PPUSH
// result := 0 ;
33725: LD_ADDR_VAR 0 3
33729: PUSH
33730: LD_INT 0
33732: ST_TO_ADDR
// if not array or not value in array then
33733: LD_VAR 0 1
33737: NOT
33738: PUSH
33739: LD_VAR 0 2
33743: PUSH
33744: LD_VAR 0 1
33748: IN
33749: NOT
33750: OR
33751: IFFALSE 33755
// exit ;
33753: GO 33809
// for i = 1 to array do
33755: LD_ADDR_VAR 0 4
33759: PUSH
33760: DOUBLE
33761: LD_INT 1
33763: DEC
33764: ST_TO_ADDR
33765: LD_VAR 0 1
33769: PUSH
33770: FOR_TO
33771: IFFALSE 33807
// if value = array [ i ] then
33773: LD_VAR 0 2
33777: PUSH
33778: LD_VAR 0 1
33782: PUSH
33783: LD_VAR 0 4
33787: ARRAY
33788: EQUAL
33789: IFFALSE 33805
// begin result := i ;
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_VAR 0 4
33800: ST_TO_ADDR
// exit ;
33801: POP
33802: POP
33803: GO 33809
// end ;
33805: GO 33770
33807: POP
33808: POP
// end ;
33809: LD_VAR 0 3
33813: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33814: LD_INT 0
33816: PPUSH
// vc_chassis := chassis ;
33817: LD_ADDR_OWVAR 37
33821: PUSH
33822: LD_VAR 0 1
33826: ST_TO_ADDR
// vc_engine := engine ;
33827: LD_ADDR_OWVAR 39
33831: PUSH
33832: LD_VAR 0 2
33836: ST_TO_ADDR
// vc_control := control ;
33837: LD_ADDR_OWVAR 38
33841: PUSH
33842: LD_VAR 0 3
33846: ST_TO_ADDR
// vc_weapon := weapon ;
33847: LD_ADDR_OWVAR 40
33851: PUSH
33852: LD_VAR 0 4
33856: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33857: LD_ADDR_OWVAR 41
33861: PUSH
33862: LD_VAR 0 5
33866: ST_TO_ADDR
// end ;
33867: LD_VAR 0 6
33871: RET
// export function WantPlant ( unit ) ; var task ; begin
33872: LD_INT 0
33874: PPUSH
33875: PPUSH
// result := false ;
33876: LD_ADDR_VAR 0 2
33880: PUSH
33881: LD_INT 0
33883: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33884: LD_ADDR_VAR 0 3
33888: PUSH
33889: LD_VAR 0 1
33893: PPUSH
33894: CALL_OW 437
33898: ST_TO_ADDR
// if task then
33899: LD_VAR 0 3
33903: IFFALSE 33931
// if task [ 1 ] [ 1 ] = p then
33905: LD_VAR 0 3
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: PUSH
33914: LD_INT 1
33916: ARRAY
33917: PUSH
33918: LD_STRING p
33920: EQUAL
33921: IFFALSE 33931
// result := true ;
33923: LD_ADDR_VAR 0 2
33927: PUSH
33928: LD_INT 1
33930: ST_TO_ADDR
// end ;
33931: LD_VAR 0 2
33935: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33936: LD_INT 0
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
// if pos < 1 then
33942: LD_VAR 0 2
33946: PUSH
33947: LD_INT 1
33949: LESS
33950: IFFALSE 33954
// exit ;
33952: GO 34257
// if pos = 1 then
33954: LD_VAR 0 2
33958: PUSH
33959: LD_INT 1
33961: EQUAL
33962: IFFALSE 33995
// result := Replace ( arr , pos [ 1 ] , value ) else
33964: LD_ADDR_VAR 0 4
33968: PUSH
33969: LD_VAR 0 1
33973: PPUSH
33974: LD_VAR 0 2
33978: PUSH
33979: LD_INT 1
33981: ARRAY
33982: PPUSH
33983: LD_VAR 0 3
33987: PPUSH
33988: CALL_OW 1
33992: ST_TO_ADDR
33993: GO 34257
// begin tmp := arr ;
33995: LD_ADDR_VAR 0 6
33999: PUSH
34000: LD_VAR 0 1
34004: ST_TO_ADDR
// s_arr := [ tmp ] ;
34005: LD_ADDR_VAR 0 7
34009: PUSH
34010: LD_VAR 0 6
34014: PUSH
34015: EMPTY
34016: LIST
34017: ST_TO_ADDR
// for i = 1 to pos - 1 do
34018: LD_ADDR_VAR 0 5
34022: PUSH
34023: DOUBLE
34024: LD_INT 1
34026: DEC
34027: ST_TO_ADDR
34028: LD_VAR 0 2
34032: PUSH
34033: LD_INT 1
34035: MINUS
34036: PUSH
34037: FOR_TO
34038: IFFALSE 34083
// begin tmp := tmp [ pos [ i ] ] ;
34040: LD_ADDR_VAR 0 6
34044: PUSH
34045: LD_VAR 0 6
34049: PUSH
34050: LD_VAR 0 2
34054: PUSH
34055: LD_VAR 0 5
34059: ARRAY
34060: ARRAY
34061: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34062: LD_ADDR_VAR 0 7
34066: PUSH
34067: LD_VAR 0 7
34071: PUSH
34072: LD_VAR 0 6
34076: PUSH
34077: EMPTY
34078: LIST
34079: ADD
34080: ST_TO_ADDR
// end ;
34081: GO 34037
34083: POP
34084: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34085: LD_ADDR_VAR 0 6
34089: PUSH
34090: LD_VAR 0 6
34094: PPUSH
34095: LD_VAR 0 2
34099: PUSH
34100: LD_VAR 0 2
34104: ARRAY
34105: PPUSH
34106: LD_VAR 0 3
34110: PPUSH
34111: CALL_OW 1
34115: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34116: LD_ADDR_VAR 0 7
34120: PUSH
34121: LD_VAR 0 7
34125: PPUSH
34126: LD_VAR 0 7
34130: PPUSH
34131: LD_VAR 0 6
34135: PPUSH
34136: CALL_OW 1
34140: ST_TO_ADDR
// for i = s_arr downto 2 do
34141: LD_ADDR_VAR 0 5
34145: PUSH
34146: DOUBLE
34147: LD_VAR 0 7
34151: INC
34152: ST_TO_ADDR
34153: LD_INT 2
34155: PUSH
34156: FOR_DOWNTO
34157: IFFALSE 34241
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34159: LD_ADDR_VAR 0 6
34163: PUSH
34164: LD_VAR 0 7
34168: PUSH
34169: LD_VAR 0 5
34173: PUSH
34174: LD_INT 1
34176: MINUS
34177: ARRAY
34178: PPUSH
34179: LD_VAR 0 2
34183: PUSH
34184: LD_VAR 0 5
34188: PUSH
34189: LD_INT 1
34191: MINUS
34192: ARRAY
34193: PPUSH
34194: LD_VAR 0 7
34198: PUSH
34199: LD_VAR 0 5
34203: ARRAY
34204: PPUSH
34205: CALL_OW 1
34209: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34210: LD_ADDR_VAR 0 7
34214: PUSH
34215: LD_VAR 0 7
34219: PPUSH
34220: LD_VAR 0 5
34224: PUSH
34225: LD_INT 1
34227: MINUS
34228: PPUSH
34229: LD_VAR 0 6
34233: PPUSH
34234: CALL_OW 1
34238: ST_TO_ADDR
// end ;
34239: GO 34156
34241: POP
34242: POP
// result := s_arr [ 1 ] ;
34243: LD_ADDR_VAR 0 4
34247: PUSH
34248: LD_VAR 0 7
34252: PUSH
34253: LD_INT 1
34255: ARRAY
34256: ST_TO_ADDR
// end ; end ;
34257: LD_VAR 0 4
34261: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34262: LD_INT 0
34264: PPUSH
34265: PPUSH
// if not list then
34266: LD_VAR 0 1
34270: NOT
34271: IFFALSE 34275
// exit ;
34273: GO 34366
// i := list [ pos1 ] ;
34275: LD_ADDR_VAR 0 5
34279: PUSH
34280: LD_VAR 0 1
34284: PUSH
34285: LD_VAR 0 2
34289: ARRAY
34290: ST_TO_ADDR
// if not i then
34291: LD_VAR 0 5
34295: NOT
34296: IFFALSE 34300
// exit ;
34298: GO 34366
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34300: LD_ADDR_VAR 0 1
34304: PUSH
34305: LD_VAR 0 1
34309: PPUSH
34310: LD_VAR 0 2
34314: PPUSH
34315: LD_VAR 0 1
34319: PUSH
34320: LD_VAR 0 3
34324: ARRAY
34325: PPUSH
34326: CALL_OW 1
34330: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34331: LD_ADDR_VAR 0 1
34335: PUSH
34336: LD_VAR 0 1
34340: PPUSH
34341: LD_VAR 0 3
34345: PPUSH
34346: LD_VAR 0 5
34350: PPUSH
34351: CALL_OW 1
34355: ST_TO_ADDR
// result := list ;
34356: LD_ADDR_VAR 0 4
34360: PUSH
34361: LD_VAR 0 1
34365: ST_TO_ADDR
// end ;
34366: LD_VAR 0 4
34370: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34371: LD_INT 0
34373: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34374: LD_ADDR_VAR 0 5
34378: PUSH
34379: LD_VAR 0 1
34383: PPUSH
34384: CALL_OW 250
34388: PPUSH
34389: LD_VAR 0 1
34393: PPUSH
34394: CALL_OW 251
34398: PPUSH
34399: LD_VAR 0 2
34403: PPUSH
34404: LD_VAR 0 3
34408: PPUSH
34409: LD_VAR 0 4
34413: PPUSH
34414: CALL 34424 0 5
34418: ST_TO_ADDR
// end ;
34419: LD_VAR 0 5
34423: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34424: LD_INT 0
34426: PPUSH
34427: PPUSH
34428: PPUSH
34429: PPUSH
// if not list then
34430: LD_VAR 0 3
34434: NOT
34435: IFFALSE 34439
// exit ;
34437: GO 34827
// result := [ ] ;
34439: LD_ADDR_VAR 0 6
34443: PUSH
34444: EMPTY
34445: ST_TO_ADDR
// for i in list do
34446: LD_ADDR_VAR 0 7
34450: PUSH
34451: LD_VAR 0 3
34455: PUSH
34456: FOR_IN
34457: IFFALSE 34659
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34459: LD_ADDR_VAR 0 9
34463: PUSH
34464: LD_VAR 0 7
34468: PPUSH
34469: LD_VAR 0 1
34473: PPUSH
34474: LD_VAR 0 2
34478: PPUSH
34479: CALL_OW 297
34483: ST_TO_ADDR
// if not result then
34484: LD_VAR 0 6
34488: NOT
34489: IFFALSE 34515
// result := [ [ i , tmp ] ] else
34491: LD_ADDR_VAR 0 6
34495: PUSH
34496: LD_VAR 0 7
34500: PUSH
34501: LD_VAR 0 9
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: EMPTY
34511: LIST
34512: ST_TO_ADDR
34513: GO 34657
// begin if result [ result ] [ 2 ] < tmp then
34515: LD_VAR 0 6
34519: PUSH
34520: LD_VAR 0 6
34524: ARRAY
34525: PUSH
34526: LD_INT 2
34528: ARRAY
34529: PUSH
34530: LD_VAR 0 9
34534: LESS
34535: IFFALSE 34577
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34537: LD_ADDR_VAR 0 6
34541: PUSH
34542: LD_VAR 0 6
34546: PPUSH
34547: LD_VAR 0 6
34551: PUSH
34552: LD_INT 1
34554: PLUS
34555: PPUSH
34556: LD_VAR 0 7
34560: PUSH
34561: LD_VAR 0 9
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PPUSH
34570: CALL_OW 2
34574: ST_TO_ADDR
34575: GO 34657
// for j = 1 to result do
34577: LD_ADDR_VAR 0 8
34581: PUSH
34582: DOUBLE
34583: LD_INT 1
34585: DEC
34586: ST_TO_ADDR
34587: LD_VAR 0 6
34591: PUSH
34592: FOR_TO
34593: IFFALSE 34655
// begin if tmp < result [ j ] [ 2 ] then
34595: LD_VAR 0 9
34599: PUSH
34600: LD_VAR 0 6
34604: PUSH
34605: LD_VAR 0 8
34609: ARRAY
34610: PUSH
34611: LD_INT 2
34613: ARRAY
34614: LESS
34615: IFFALSE 34653
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34617: LD_ADDR_VAR 0 6
34621: PUSH
34622: LD_VAR 0 6
34626: PPUSH
34627: LD_VAR 0 8
34631: PPUSH
34632: LD_VAR 0 7
34636: PUSH
34637: LD_VAR 0 9
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PPUSH
34646: CALL_OW 2
34650: ST_TO_ADDR
// break ;
34651: GO 34655
// end ; end ;
34653: GO 34592
34655: POP
34656: POP
// end ; end ;
34657: GO 34456
34659: POP
34660: POP
// if result and not asc then
34661: LD_VAR 0 6
34665: PUSH
34666: LD_VAR 0 4
34670: NOT
34671: AND
34672: IFFALSE 34747
// begin tmp := result ;
34674: LD_ADDR_VAR 0 9
34678: PUSH
34679: LD_VAR 0 6
34683: ST_TO_ADDR
// for i = tmp downto 1 do
34684: LD_ADDR_VAR 0 7
34688: PUSH
34689: DOUBLE
34690: LD_VAR 0 9
34694: INC
34695: ST_TO_ADDR
34696: LD_INT 1
34698: PUSH
34699: FOR_DOWNTO
34700: IFFALSE 34745
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34702: LD_ADDR_VAR 0 6
34706: PUSH
34707: LD_VAR 0 6
34711: PPUSH
34712: LD_VAR 0 9
34716: PUSH
34717: LD_VAR 0 7
34721: MINUS
34722: PUSH
34723: LD_INT 1
34725: PLUS
34726: PPUSH
34727: LD_VAR 0 9
34731: PUSH
34732: LD_VAR 0 7
34736: ARRAY
34737: PPUSH
34738: CALL_OW 1
34742: ST_TO_ADDR
34743: GO 34699
34745: POP
34746: POP
// end ; tmp := [ ] ;
34747: LD_ADDR_VAR 0 9
34751: PUSH
34752: EMPTY
34753: ST_TO_ADDR
// if mode then
34754: LD_VAR 0 5
34758: IFFALSE 34827
// begin for i = 1 to result do
34760: LD_ADDR_VAR 0 7
34764: PUSH
34765: DOUBLE
34766: LD_INT 1
34768: DEC
34769: ST_TO_ADDR
34770: LD_VAR 0 6
34774: PUSH
34775: FOR_TO
34776: IFFALSE 34815
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34778: LD_ADDR_VAR 0 9
34782: PUSH
34783: LD_VAR 0 9
34787: PPUSH
34788: LD_VAR 0 7
34792: PPUSH
34793: LD_VAR 0 6
34797: PUSH
34798: LD_VAR 0 7
34802: ARRAY
34803: PUSH
34804: LD_INT 1
34806: ARRAY
34807: PPUSH
34808: CALL_OW 1
34812: ST_TO_ADDR
34813: GO 34775
34815: POP
34816: POP
// result := tmp ;
34817: LD_ADDR_VAR 0 6
34821: PUSH
34822: LD_VAR 0 9
34826: ST_TO_ADDR
// end ; end ;
34827: LD_VAR 0 6
34831: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34832: LD_INT 0
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34840: LD_ADDR_VAR 0 5
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: EMPTY
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: ST_TO_ADDR
// if not x or not y then
34862: LD_VAR 0 2
34866: NOT
34867: PUSH
34868: LD_VAR 0 3
34872: NOT
34873: OR
34874: IFFALSE 34878
// exit ;
34876: GO 36530
// if not range then
34878: LD_VAR 0 4
34882: NOT
34883: IFFALSE 34893
// range := 10 ;
34885: LD_ADDR_VAR 0 4
34889: PUSH
34890: LD_INT 10
34892: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34893: LD_ADDR_VAR 0 8
34897: PUSH
34898: LD_INT 81
34900: PUSH
34901: LD_VAR 0 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 92
34912: PUSH
34913: LD_VAR 0 2
34917: PUSH
34918: LD_VAR 0 3
34922: PUSH
34923: LD_VAR 0 4
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: LD_INT 21
34939: PUSH
34940: LD_INT 3
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: PPUSH
34956: CALL_OW 69
34960: ST_TO_ADDR
// if not tmp then
34961: LD_VAR 0 8
34965: NOT
34966: IFFALSE 34970
// exit ;
34968: GO 36530
// for i in tmp do
34970: LD_ADDR_VAR 0 6
34974: PUSH
34975: LD_VAR 0 8
34979: PUSH
34980: FOR_IN
34981: IFFALSE 36505
// begin points := [ 0 , 0 , 0 ] ;
34983: LD_ADDR_VAR 0 9
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: LIST
35001: ST_TO_ADDR
// bpoints := 1 ;
35002: LD_ADDR_VAR 0 10
35006: PUSH
35007: LD_INT 1
35009: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35010: LD_VAR 0 6
35014: PPUSH
35015: CALL_OW 247
35019: PUSH
35020: LD_INT 1
35022: DOUBLE
35023: EQUAL
35024: IFTRUE 35028
35026: GO 35606
35028: POP
// begin if GetClass ( i ) = 1 then
35029: LD_VAR 0 6
35033: PPUSH
35034: CALL_OW 257
35038: PUSH
35039: LD_INT 1
35041: EQUAL
35042: IFFALSE 35063
// points := [ 10 , 5 , 3 ] ;
35044: LD_ADDR_VAR 0 9
35048: PUSH
35049: LD_INT 10
35051: PUSH
35052: LD_INT 5
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: LIST
35062: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35063: LD_VAR 0 6
35067: PPUSH
35068: CALL_OW 257
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 3
35078: PUSH
35079: LD_INT 4
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: IN
35087: IFFALSE 35108
// points := [ 3 , 2 , 1 ] ;
35089: LD_ADDR_VAR 0 9
35093: PUSH
35094: LD_INT 3
35096: PUSH
35097: LD_INT 2
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: LIST
35107: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35108: LD_VAR 0 6
35112: PPUSH
35113: CALL_OW 257
35117: PUSH
35118: LD_INT 5
35120: EQUAL
35121: IFFALSE 35142
// points := [ 130 , 5 , 2 ] ;
35123: LD_ADDR_VAR 0 9
35127: PUSH
35128: LD_INT 130
35130: PUSH
35131: LD_INT 5
35133: PUSH
35134: LD_INT 2
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35142: LD_VAR 0 6
35146: PPUSH
35147: CALL_OW 257
35151: PUSH
35152: LD_INT 8
35154: EQUAL
35155: IFFALSE 35176
// points := [ 35 , 35 , 30 ] ;
35157: LD_ADDR_VAR 0 9
35161: PUSH
35162: LD_INT 35
35164: PUSH
35165: LD_INT 35
35167: PUSH
35168: LD_INT 30
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35176: LD_VAR 0 6
35180: PPUSH
35181: CALL_OW 257
35185: PUSH
35186: LD_INT 9
35188: EQUAL
35189: IFFALSE 35210
// points := [ 20 , 55 , 40 ] ;
35191: LD_ADDR_VAR 0 9
35195: PUSH
35196: LD_INT 20
35198: PUSH
35199: LD_INT 55
35201: PUSH
35202: LD_INT 40
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35210: LD_VAR 0 6
35214: PPUSH
35215: CALL_OW 257
35219: PUSH
35220: LD_INT 12
35222: PUSH
35223: LD_INT 16
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: IN
35230: IFFALSE 35251
// points := [ 5 , 3 , 2 ] ;
35232: LD_ADDR_VAR 0 9
35236: PUSH
35237: LD_INT 5
35239: PUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35251: LD_VAR 0 6
35255: PPUSH
35256: CALL_OW 257
35260: PUSH
35261: LD_INT 17
35263: EQUAL
35264: IFFALSE 35285
// points := [ 100 , 50 , 75 ] ;
35266: LD_ADDR_VAR 0 9
35270: PUSH
35271: LD_INT 100
35273: PUSH
35274: LD_INT 50
35276: PUSH
35277: LD_INT 75
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35285: LD_VAR 0 6
35289: PPUSH
35290: CALL_OW 257
35294: PUSH
35295: LD_INT 15
35297: EQUAL
35298: IFFALSE 35319
// points := [ 10 , 5 , 3 ] ;
35300: LD_ADDR_VAR 0 9
35304: PUSH
35305: LD_INT 10
35307: PUSH
35308: LD_INT 5
35310: PUSH
35311: LD_INT 3
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35319: LD_VAR 0 6
35323: PPUSH
35324: CALL_OW 257
35328: PUSH
35329: LD_INT 14
35331: EQUAL
35332: IFFALSE 35353
// points := [ 10 , 0 , 0 ] ;
35334: LD_ADDR_VAR 0 9
35338: PUSH
35339: LD_INT 10
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: LIST
35352: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35353: LD_VAR 0 6
35357: PPUSH
35358: CALL_OW 257
35362: PUSH
35363: LD_INT 11
35365: EQUAL
35366: IFFALSE 35387
// points := [ 30 , 10 , 5 ] ;
35368: LD_ADDR_VAR 0 9
35372: PUSH
35373: LD_INT 30
35375: PUSH
35376: LD_INT 10
35378: PUSH
35379: LD_INT 5
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35387: LD_VAR 0 1
35391: PPUSH
35392: LD_INT 5
35394: PPUSH
35395: CALL_OW 321
35399: PUSH
35400: LD_INT 2
35402: EQUAL
35403: IFFALSE 35420
// bpoints := bpoints * 1.8 ;
35405: LD_ADDR_VAR 0 10
35409: PUSH
35410: LD_VAR 0 10
35414: PUSH
35415: LD_REAL  1.80000000000000E+0000
35418: MUL
35419: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35420: LD_VAR 0 6
35424: PPUSH
35425: CALL_OW 257
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: LD_INT 4
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: IN
35448: PUSH
35449: LD_VAR 0 1
35453: PPUSH
35454: LD_INT 51
35456: PPUSH
35457: CALL_OW 321
35461: PUSH
35462: LD_INT 2
35464: EQUAL
35465: AND
35466: IFFALSE 35483
// bpoints := bpoints * 1.2 ;
35468: LD_ADDR_VAR 0 10
35472: PUSH
35473: LD_VAR 0 10
35477: PUSH
35478: LD_REAL  1.20000000000000E+0000
35481: MUL
35482: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35483: LD_VAR 0 6
35487: PPUSH
35488: CALL_OW 257
35492: PUSH
35493: LD_INT 5
35495: PUSH
35496: LD_INT 7
35498: PUSH
35499: LD_INT 9
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: LIST
35506: IN
35507: PUSH
35508: LD_VAR 0 1
35512: PPUSH
35513: LD_INT 52
35515: PPUSH
35516: CALL_OW 321
35520: PUSH
35521: LD_INT 2
35523: EQUAL
35524: AND
35525: IFFALSE 35542
// bpoints := bpoints * 1.5 ;
35527: LD_ADDR_VAR 0 10
35531: PUSH
35532: LD_VAR 0 10
35536: PUSH
35537: LD_REAL  1.50000000000000E+0000
35540: MUL
35541: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35542: LD_VAR 0 1
35546: PPUSH
35547: LD_INT 66
35549: PPUSH
35550: CALL_OW 321
35554: PUSH
35555: LD_INT 2
35557: EQUAL
35558: IFFALSE 35575
// bpoints := bpoints * 1.1 ;
35560: LD_ADDR_VAR 0 10
35564: PUSH
35565: LD_VAR 0 10
35569: PUSH
35570: LD_REAL  1.10000000000000E+0000
35573: MUL
35574: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35575: LD_ADDR_VAR 0 10
35579: PUSH
35580: LD_VAR 0 10
35584: PUSH
35585: LD_VAR 0 6
35589: PPUSH
35590: LD_INT 1
35592: PPUSH
35593: CALL_OW 259
35597: PUSH
35598: LD_REAL  1.15000000000000E+0000
35601: MUL
35602: MUL
35603: ST_TO_ADDR
// end ; unit_vehicle :
35604: GO 36434
35606: LD_INT 2
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35614
35612: GO 36422
35614: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35615: LD_VAR 0 6
35619: PPUSH
35620: CALL_OW 264
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: LD_INT 42
35630: PUSH
35631: LD_INT 24
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: IN
35639: IFFALSE 35660
// points := [ 25 , 5 , 3 ] ;
35641: LD_ADDR_VAR 0 9
35645: PUSH
35646: LD_INT 25
35648: PUSH
35649: LD_INT 5
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35660: LD_VAR 0 6
35664: PPUSH
35665: CALL_OW 264
35669: PUSH
35670: LD_INT 4
35672: PUSH
35673: LD_INT 43
35675: PUSH
35676: LD_INT 25
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: IN
35684: IFFALSE 35705
// points := [ 40 , 15 , 5 ] ;
35686: LD_ADDR_VAR 0 9
35690: PUSH
35691: LD_INT 40
35693: PUSH
35694: LD_INT 15
35696: PUSH
35697: LD_INT 5
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: LIST
35704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35705: LD_VAR 0 6
35709: PPUSH
35710: CALL_OW 264
35714: PUSH
35715: LD_INT 3
35717: PUSH
35718: LD_INT 23
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: IN
35725: IFFALSE 35746
// points := [ 7 , 25 , 8 ] ;
35727: LD_ADDR_VAR 0 9
35731: PUSH
35732: LD_INT 7
35734: PUSH
35735: LD_INT 25
35737: PUSH
35738: LD_INT 8
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35746: LD_VAR 0 6
35750: PPUSH
35751: CALL_OW 264
35755: PUSH
35756: LD_INT 5
35758: PUSH
35759: LD_INT 27
35761: PUSH
35762: LD_INT 44
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: LIST
35769: IN
35770: IFFALSE 35791
// points := [ 14 , 50 , 16 ] ;
35772: LD_ADDR_VAR 0 9
35776: PUSH
35777: LD_INT 14
35779: PUSH
35780: LD_INT 50
35782: PUSH
35783: LD_INT 16
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35791: LD_VAR 0 6
35795: PPUSH
35796: CALL_OW 264
35800: PUSH
35801: LD_INT 6
35803: PUSH
35804: LD_INT 46
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: IN
35811: IFFALSE 35832
// points := [ 32 , 120 , 70 ] ;
35813: LD_ADDR_VAR 0 9
35817: PUSH
35818: LD_INT 32
35820: PUSH
35821: LD_INT 120
35823: PUSH
35824: LD_INT 70
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: LIST
35831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35832: LD_VAR 0 6
35836: PPUSH
35837: CALL_OW 264
35841: PUSH
35842: LD_INT 7
35844: PUSH
35845: LD_INT 28
35847: PUSH
35848: LD_INT 45
35850: PUSH
35851: LD_EXP 19
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: IN
35862: IFFALSE 35883
// points := [ 35 , 20 , 45 ] ;
35864: LD_ADDR_VAR 0 9
35868: PUSH
35869: LD_INT 35
35871: PUSH
35872: LD_INT 20
35874: PUSH
35875: LD_INT 45
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35883: LD_VAR 0 6
35887: PPUSH
35888: CALL_OW 264
35892: PUSH
35893: LD_INT 47
35895: PUSH
35896: EMPTY
35897: LIST
35898: IN
35899: IFFALSE 35920
// points := [ 67 , 45 , 75 ] ;
35901: LD_ADDR_VAR 0 9
35905: PUSH
35906: LD_INT 67
35908: PUSH
35909: LD_INT 45
35911: PUSH
35912: LD_INT 75
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35920: LD_VAR 0 6
35924: PPUSH
35925: CALL_OW 264
35929: PUSH
35930: LD_INT 26
35932: PUSH
35933: EMPTY
35934: LIST
35935: IN
35936: IFFALSE 35957
// points := [ 120 , 30 , 80 ] ;
35938: LD_ADDR_VAR 0 9
35942: PUSH
35943: LD_INT 120
35945: PUSH
35946: LD_INT 30
35948: PUSH
35949: LD_INT 80
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35957: LD_VAR 0 6
35961: PPUSH
35962: CALL_OW 264
35966: PUSH
35967: LD_INT 22
35969: PUSH
35970: EMPTY
35971: LIST
35972: IN
35973: IFFALSE 35994
// points := [ 40 , 1 , 1 ] ;
35975: LD_ADDR_VAR 0 9
35979: PUSH
35980: LD_INT 40
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35994: LD_VAR 0 6
35998: PPUSH
35999: CALL_OW 264
36003: PUSH
36004: LD_INT 29
36006: PUSH
36007: EMPTY
36008: LIST
36009: IN
36010: IFFALSE 36031
// points := [ 70 , 200 , 400 ] ;
36012: LD_ADDR_VAR 0 9
36016: PUSH
36017: LD_INT 70
36019: PUSH
36020: LD_INT 200
36022: PUSH
36023: LD_INT 400
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: LIST
36030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36031: LD_VAR 0 6
36035: PPUSH
36036: CALL_OW 264
36040: PUSH
36041: LD_INT 14
36043: PUSH
36044: LD_INT 53
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: IN
36051: IFFALSE 36072
// points := [ 40 , 10 , 20 ] ;
36053: LD_ADDR_VAR 0 9
36057: PUSH
36058: LD_INT 40
36060: PUSH
36061: LD_INT 10
36063: PUSH
36064: LD_INT 20
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36072: LD_VAR 0 6
36076: PPUSH
36077: CALL_OW 264
36081: PUSH
36082: LD_INT 9
36084: PUSH
36085: EMPTY
36086: LIST
36087: IN
36088: IFFALSE 36109
// points := [ 5 , 70 , 20 ] ;
36090: LD_ADDR_VAR 0 9
36094: PUSH
36095: LD_INT 5
36097: PUSH
36098: LD_INT 70
36100: PUSH
36101: LD_INT 20
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: LIST
36108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36109: LD_VAR 0 6
36113: PPUSH
36114: CALL_OW 264
36118: PUSH
36119: LD_INT 10
36121: PUSH
36122: EMPTY
36123: LIST
36124: IN
36125: IFFALSE 36146
// points := [ 35 , 110 , 70 ] ;
36127: LD_ADDR_VAR 0 9
36131: PUSH
36132: LD_INT 35
36134: PUSH
36135: LD_INT 110
36137: PUSH
36138: LD_INT 70
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36146: LD_VAR 0 6
36150: PPUSH
36151: CALL_OW 265
36155: PUSH
36156: LD_INT 25
36158: EQUAL
36159: IFFALSE 36180
// points := [ 80 , 65 , 100 ] ;
36161: LD_ADDR_VAR 0 9
36165: PUSH
36166: LD_INT 80
36168: PUSH
36169: LD_INT 65
36171: PUSH
36172: LD_INT 100
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36180: LD_VAR 0 6
36184: PPUSH
36185: CALL_OW 263
36189: PUSH
36190: LD_INT 1
36192: EQUAL
36193: IFFALSE 36228
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36195: LD_ADDR_VAR 0 10
36199: PUSH
36200: LD_VAR 0 10
36204: PUSH
36205: LD_VAR 0 6
36209: PPUSH
36210: CALL_OW 311
36214: PPUSH
36215: LD_INT 3
36217: PPUSH
36218: CALL_OW 259
36222: PUSH
36223: LD_INT 4
36225: MUL
36226: MUL
36227: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36228: LD_VAR 0 6
36232: PPUSH
36233: CALL_OW 263
36237: PUSH
36238: LD_INT 2
36240: EQUAL
36241: IFFALSE 36292
// begin j := IsControledBy ( i ) ;
36243: LD_ADDR_VAR 0 7
36247: PUSH
36248: LD_VAR 0 6
36252: PPUSH
36253: CALL_OW 312
36257: ST_TO_ADDR
// if j then
36258: LD_VAR 0 7
36262: IFFALSE 36292
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36264: LD_ADDR_VAR 0 10
36268: PUSH
36269: LD_VAR 0 10
36273: PUSH
36274: LD_VAR 0 7
36278: PPUSH
36279: LD_INT 3
36281: PPUSH
36282: CALL_OW 259
36286: PUSH
36287: LD_INT 3
36289: MUL
36290: MUL
36291: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36292: LD_VAR 0 6
36296: PPUSH
36297: CALL_OW 264
36301: PUSH
36302: LD_INT 5
36304: PUSH
36305: LD_INT 6
36307: PUSH
36308: LD_INT 46
36310: PUSH
36311: LD_INT 44
36313: PUSH
36314: LD_INT 47
36316: PUSH
36317: LD_INT 45
36319: PUSH
36320: LD_INT 28
36322: PUSH
36323: LD_INT 7
36325: PUSH
36326: LD_INT 27
36328: PUSH
36329: LD_INT 29
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: IN
36344: PUSH
36345: LD_VAR 0 1
36349: PPUSH
36350: LD_INT 52
36352: PPUSH
36353: CALL_OW 321
36357: PUSH
36358: LD_INT 2
36360: EQUAL
36361: AND
36362: IFFALSE 36379
// bpoints := bpoints * 1.2 ;
36364: LD_ADDR_VAR 0 10
36368: PUSH
36369: LD_VAR 0 10
36373: PUSH
36374: LD_REAL  1.20000000000000E+0000
36377: MUL
36378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36379: LD_VAR 0 6
36383: PPUSH
36384: CALL_OW 264
36388: PUSH
36389: LD_INT 6
36391: PUSH
36392: LD_INT 46
36394: PUSH
36395: LD_INT 47
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: IN
36403: IFFALSE 36420
// bpoints := bpoints * 1.2 ;
36405: LD_ADDR_VAR 0 10
36409: PUSH
36410: LD_VAR 0 10
36414: PUSH
36415: LD_REAL  1.20000000000000E+0000
36418: MUL
36419: ST_TO_ADDR
// end ; unit_building :
36420: GO 36434
36422: LD_INT 3
36424: DOUBLE
36425: EQUAL
36426: IFTRUE 36430
36428: GO 36433
36430: POP
// ; end ;
36431: GO 36434
36433: POP
// for j = 1 to 3 do
36434: LD_ADDR_VAR 0 7
36438: PUSH
36439: DOUBLE
36440: LD_INT 1
36442: DEC
36443: ST_TO_ADDR
36444: LD_INT 3
36446: PUSH
36447: FOR_TO
36448: IFFALSE 36501
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36450: LD_ADDR_VAR 0 5
36454: PUSH
36455: LD_VAR 0 5
36459: PPUSH
36460: LD_VAR 0 7
36464: PPUSH
36465: LD_VAR 0 5
36469: PUSH
36470: LD_VAR 0 7
36474: ARRAY
36475: PUSH
36476: LD_VAR 0 9
36480: PUSH
36481: LD_VAR 0 7
36485: ARRAY
36486: PUSH
36487: LD_VAR 0 10
36491: MUL
36492: PLUS
36493: PPUSH
36494: CALL_OW 1
36498: ST_TO_ADDR
36499: GO 36447
36501: POP
36502: POP
// end ;
36503: GO 34980
36505: POP
36506: POP
// result := Replace ( result , 4 , tmp ) ;
36507: LD_ADDR_VAR 0 5
36511: PUSH
36512: LD_VAR 0 5
36516: PPUSH
36517: LD_INT 4
36519: PPUSH
36520: LD_VAR 0 8
36524: PPUSH
36525: CALL_OW 1
36529: ST_TO_ADDR
// end ;
36530: LD_VAR 0 5
36534: RET
// export function DangerAtRange ( unit , range ) ; begin
36535: LD_INT 0
36537: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36538: LD_ADDR_VAR 0 3
36542: PUSH
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL_OW 255
36552: PPUSH
36553: LD_VAR 0 1
36557: PPUSH
36558: CALL_OW 250
36562: PPUSH
36563: LD_VAR 0 1
36567: PPUSH
36568: CALL_OW 251
36572: PPUSH
36573: LD_VAR 0 2
36577: PPUSH
36578: CALL 34832 0 4
36582: ST_TO_ADDR
// end ;
36583: LD_VAR 0 3
36587: RET
// export function DangerInArea ( side , area ) ; begin
36588: LD_INT 0
36590: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36591: LD_ADDR_VAR 0 3
36595: PUSH
36596: LD_VAR 0 2
36600: PPUSH
36601: LD_INT 81
36603: PUSH
36604: LD_VAR 0 1
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PPUSH
36613: CALL_OW 70
36617: ST_TO_ADDR
// end ;
36618: LD_VAR 0 3
36622: RET
// export function IsExtension ( b ) ; begin
36623: LD_INT 0
36625: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36626: LD_ADDR_VAR 0 2
36630: PUSH
36631: LD_VAR 0 1
36635: PUSH
36636: LD_INT 23
36638: PUSH
36639: LD_INT 20
36641: PUSH
36642: LD_INT 22
36644: PUSH
36645: LD_INT 17
36647: PUSH
36648: LD_INT 24
36650: PUSH
36651: LD_INT 21
36653: PUSH
36654: LD_INT 19
36656: PUSH
36657: LD_INT 16
36659: PUSH
36660: LD_INT 25
36662: PUSH
36663: LD_INT 18
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: IN
36678: ST_TO_ADDR
// end ;
36679: LD_VAR 0 2
36683: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36684: LD_INT 0
36686: PPUSH
36687: PPUSH
36688: PPUSH
// result := [ ] ;
36689: LD_ADDR_VAR 0 4
36693: PUSH
36694: EMPTY
36695: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36696: LD_ADDR_VAR 0 5
36700: PUSH
36701: LD_VAR 0 2
36705: PPUSH
36706: LD_INT 21
36708: PUSH
36709: LD_INT 3
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PPUSH
36716: CALL_OW 70
36720: ST_TO_ADDR
// if not tmp then
36721: LD_VAR 0 5
36725: NOT
36726: IFFALSE 36730
// exit ;
36728: GO 36794
// if checkLink then
36730: LD_VAR 0 3
36734: IFFALSE 36784
// begin for i in tmp do
36736: LD_ADDR_VAR 0 6
36740: PUSH
36741: LD_VAR 0 5
36745: PUSH
36746: FOR_IN
36747: IFFALSE 36782
// if GetBase ( i ) <> base then
36749: LD_VAR 0 6
36753: PPUSH
36754: CALL_OW 274
36758: PUSH
36759: LD_VAR 0 1
36763: NONEQUAL
36764: IFFALSE 36780
// ComLinkToBase ( base , i ) ;
36766: LD_VAR 0 1
36770: PPUSH
36771: LD_VAR 0 6
36775: PPUSH
36776: CALL_OW 169
36780: GO 36746
36782: POP
36783: POP
// end ; result := tmp ;
36784: LD_ADDR_VAR 0 4
36788: PUSH
36789: LD_VAR 0 5
36793: ST_TO_ADDR
// end ;
36794: LD_VAR 0 4
36798: RET
// export function ComComplete ( units , b ) ; var i ; begin
36799: LD_INT 0
36801: PPUSH
36802: PPUSH
// if not units then
36803: LD_VAR 0 1
36807: NOT
36808: IFFALSE 36812
// exit ;
36810: GO 36902
// for i in units do
36812: LD_ADDR_VAR 0 4
36816: PUSH
36817: LD_VAR 0 1
36821: PUSH
36822: FOR_IN
36823: IFFALSE 36900
// if BuildingStatus ( b ) = bs_build then
36825: LD_VAR 0 2
36829: PPUSH
36830: CALL_OW 461
36834: PUSH
36835: LD_INT 1
36837: EQUAL
36838: IFFALSE 36898
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36840: LD_VAR 0 4
36844: PPUSH
36845: LD_STRING h
36847: PUSH
36848: LD_VAR 0 2
36852: PPUSH
36853: CALL_OW 250
36857: PUSH
36858: LD_VAR 0 2
36862: PPUSH
36863: CALL_OW 251
36867: PUSH
36868: LD_VAR 0 2
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: PUSH
36891: EMPTY
36892: LIST
36893: PPUSH
36894: CALL_OW 446
36898: GO 36822
36900: POP
36901: POP
// end ;
36902: LD_VAR 0 3
36906: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36907: LD_INT 0
36909: PPUSH
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
36914: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36915: LD_VAR 0 1
36919: NOT
36920: PUSH
36921: LD_VAR 0 1
36925: PPUSH
36926: CALL_OW 263
36930: PUSH
36931: LD_INT 2
36933: NONEQUAL
36934: OR
36935: IFFALSE 36939
// exit ;
36937: GO 37255
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36939: LD_ADDR_VAR 0 6
36943: PUSH
36944: LD_INT 22
36946: PUSH
36947: LD_VAR 0 1
36951: PPUSH
36952: CALL_OW 255
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: LD_INT 30
36966: PUSH
36967: LD_INT 36
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 34
36976: PUSH
36977: LD_INT 31
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PPUSH
36993: CALL_OW 69
36997: ST_TO_ADDR
// if not tmp then
36998: LD_VAR 0 6
37002: NOT
37003: IFFALSE 37007
// exit ;
37005: GO 37255
// result := [ ] ;
37007: LD_ADDR_VAR 0 2
37011: PUSH
37012: EMPTY
37013: ST_TO_ADDR
// for i in tmp do
37014: LD_ADDR_VAR 0 3
37018: PUSH
37019: LD_VAR 0 6
37023: PUSH
37024: FOR_IN
37025: IFFALSE 37096
// begin t := UnitsInside ( i ) ;
37027: LD_ADDR_VAR 0 4
37031: PUSH
37032: LD_VAR 0 3
37036: PPUSH
37037: CALL_OW 313
37041: ST_TO_ADDR
// if t then
37042: LD_VAR 0 4
37046: IFFALSE 37094
// for j in t do
37048: LD_ADDR_VAR 0 7
37052: PUSH
37053: LD_VAR 0 4
37057: PUSH
37058: FOR_IN
37059: IFFALSE 37092
// result := Replace ( result , result + 1 , j ) ;
37061: LD_ADDR_VAR 0 2
37065: PUSH
37066: LD_VAR 0 2
37070: PPUSH
37071: LD_VAR 0 2
37075: PUSH
37076: LD_INT 1
37078: PLUS
37079: PPUSH
37080: LD_VAR 0 7
37084: PPUSH
37085: CALL_OW 1
37089: ST_TO_ADDR
37090: GO 37058
37092: POP
37093: POP
// end ;
37094: GO 37024
37096: POP
37097: POP
// if not result then
37098: LD_VAR 0 2
37102: NOT
37103: IFFALSE 37107
// exit ;
37105: GO 37255
// mech := result [ 1 ] ;
37107: LD_ADDR_VAR 0 5
37111: PUSH
37112: LD_VAR 0 2
37116: PUSH
37117: LD_INT 1
37119: ARRAY
37120: ST_TO_ADDR
// if result > 1 then
37121: LD_VAR 0 2
37125: PUSH
37126: LD_INT 1
37128: GREATER
37129: IFFALSE 37241
// begin for i = 2 to result do
37131: LD_ADDR_VAR 0 3
37135: PUSH
37136: DOUBLE
37137: LD_INT 2
37139: DEC
37140: ST_TO_ADDR
37141: LD_VAR 0 2
37145: PUSH
37146: FOR_TO
37147: IFFALSE 37239
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37149: LD_ADDR_VAR 0 4
37153: PUSH
37154: LD_VAR 0 2
37158: PUSH
37159: LD_VAR 0 3
37163: ARRAY
37164: PPUSH
37165: LD_INT 3
37167: PPUSH
37168: CALL_OW 259
37172: PUSH
37173: LD_VAR 0 2
37177: PUSH
37178: LD_VAR 0 3
37182: ARRAY
37183: PPUSH
37184: CALL_OW 432
37188: MINUS
37189: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37190: LD_VAR 0 4
37194: PUSH
37195: LD_VAR 0 5
37199: PPUSH
37200: LD_INT 3
37202: PPUSH
37203: CALL_OW 259
37207: PUSH
37208: LD_VAR 0 5
37212: PPUSH
37213: CALL_OW 432
37217: MINUS
37218: GREATEREQUAL
37219: IFFALSE 37237
// mech := result [ i ] ;
37221: LD_ADDR_VAR 0 5
37225: PUSH
37226: LD_VAR 0 2
37230: PUSH
37231: LD_VAR 0 3
37235: ARRAY
37236: ST_TO_ADDR
// end ;
37237: GO 37146
37239: POP
37240: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37241: LD_VAR 0 1
37245: PPUSH
37246: LD_VAR 0 5
37250: PPUSH
37251: CALL_OW 135
// end ;
37255: LD_VAR 0 2
37259: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37260: LD_INT 0
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
37268: PPUSH
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
37273: PPUSH
37274: PPUSH
// result := [ ] ;
37275: LD_ADDR_VAR 0 7
37279: PUSH
37280: EMPTY
37281: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37282: LD_VAR 0 1
37286: PPUSH
37287: CALL_OW 266
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: IN
37302: NOT
37303: IFFALSE 37307
// exit ;
37305: GO 38941
// if name then
37307: LD_VAR 0 3
37311: IFFALSE 37327
// SetBName ( base_dep , name ) ;
37313: LD_VAR 0 1
37317: PPUSH
37318: LD_VAR 0 3
37322: PPUSH
37323: CALL_OW 500
// base := GetBase ( base_dep ) ;
37327: LD_ADDR_VAR 0 15
37331: PUSH
37332: LD_VAR 0 1
37336: PPUSH
37337: CALL_OW 274
37341: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37342: LD_ADDR_VAR 0 16
37346: PUSH
37347: LD_VAR 0 1
37351: PPUSH
37352: CALL_OW 255
37356: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37357: LD_ADDR_VAR 0 17
37361: PUSH
37362: LD_VAR 0 1
37366: PPUSH
37367: CALL_OW 248
37371: ST_TO_ADDR
// if sources then
37372: LD_VAR 0 5
37376: IFFALSE 37423
// for i = 1 to 3 do
37378: LD_ADDR_VAR 0 8
37382: PUSH
37383: DOUBLE
37384: LD_INT 1
37386: DEC
37387: ST_TO_ADDR
37388: LD_INT 3
37390: PUSH
37391: FOR_TO
37392: IFFALSE 37421
// AddResourceType ( base , i , sources [ i ] ) ;
37394: LD_VAR 0 15
37398: PPUSH
37399: LD_VAR 0 8
37403: PPUSH
37404: LD_VAR 0 5
37408: PUSH
37409: LD_VAR 0 8
37413: ARRAY
37414: PPUSH
37415: CALL_OW 276
37419: GO 37391
37421: POP
37422: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37423: LD_ADDR_VAR 0 18
37427: PUSH
37428: LD_VAR 0 15
37432: PPUSH
37433: LD_VAR 0 2
37437: PPUSH
37438: LD_INT 1
37440: PPUSH
37441: CALL 36684 0 3
37445: ST_TO_ADDR
// InitHc ;
37446: CALL_OW 19
// InitUc ;
37450: CALL_OW 18
// uc_side := side ;
37454: LD_ADDR_OWVAR 20
37458: PUSH
37459: LD_VAR 0 16
37463: ST_TO_ADDR
// uc_nation := nation ;
37464: LD_ADDR_OWVAR 21
37468: PUSH
37469: LD_VAR 0 17
37473: ST_TO_ADDR
// if buildings then
37474: LD_VAR 0 18
37478: IFFALSE 38800
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37480: LD_ADDR_VAR 0 19
37484: PUSH
37485: LD_VAR 0 18
37489: PPUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 30
37495: PUSH
37496: LD_INT 29
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 30
37505: PUSH
37506: LD_INT 30
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: PPUSH
37518: CALL_OW 72
37522: ST_TO_ADDR
// if tmp then
37523: LD_VAR 0 19
37527: IFFALSE 37575
// for i in tmp do
37529: LD_ADDR_VAR 0 8
37533: PUSH
37534: LD_VAR 0 19
37538: PUSH
37539: FOR_IN
37540: IFFALSE 37573
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37542: LD_VAR 0 8
37546: PPUSH
37547: CALL_OW 250
37551: PPUSH
37552: LD_VAR 0 8
37556: PPUSH
37557: CALL_OW 251
37561: PPUSH
37562: LD_VAR 0 16
37566: PPUSH
37567: CALL_OW 441
37571: GO 37539
37573: POP
37574: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37575: LD_VAR 0 18
37579: PPUSH
37580: LD_INT 2
37582: PUSH
37583: LD_INT 30
37585: PUSH
37586: LD_INT 32
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 30
37595: PUSH
37596: LD_INT 33
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: LIST
37607: PPUSH
37608: CALL_OW 72
37612: IFFALSE 37700
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37614: LD_ADDR_VAR 0 8
37618: PUSH
37619: LD_VAR 0 18
37623: PPUSH
37624: LD_INT 2
37626: PUSH
37627: LD_INT 30
37629: PUSH
37630: LD_INT 32
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 30
37639: PUSH
37640: LD_INT 33
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: LIST
37651: PPUSH
37652: CALL_OW 72
37656: PUSH
37657: FOR_IN
37658: IFFALSE 37698
// begin if not GetBWeapon ( i ) then
37660: LD_VAR 0 8
37664: PPUSH
37665: CALL_OW 269
37669: NOT
37670: IFFALSE 37696
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37672: LD_VAR 0 8
37676: PPUSH
37677: LD_VAR 0 8
37681: PPUSH
37682: LD_VAR 0 2
37686: PPUSH
37687: CALL 38946 0 2
37691: PPUSH
37692: CALL_OW 431
// end ;
37696: GO 37657
37698: POP
37699: POP
// end ; for i = 1 to personel do
37700: LD_ADDR_VAR 0 8
37704: PUSH
37705: DOUBLE
37706: LD_INT 1
37708: DEC
37709: ST_TO_ADDR
37710: LD_VAR 0 6
37714: PUSH
37715: FOR_TO
37716: IFFALSE 38780
// begin if i > 4 then
37718: LD_VAR 0 8
37722: PUSH
37723: LD_INT 4
37725: GREATER
37726: IFFALSE 37730
// break ;
37728: GO 38780
// case i of 1 :
37730: LD_VAR 0 8
37734: PUSH
37735: LD_INT 1
37737: DOUBLE
37738: EQUAL
37739: IFTRUE 37743
37741: GO 37823
37743: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37744: LD_ADDR_VAR 0 12
37748: PUSH
37749: LD_VAR 0 18
37753: PPUSH
37754: LD_INT 22
37756: PUSH
37757: LD_VAR 0 16
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 58
37768: PUSH
37769: EMPTY
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: LD_INT 30
37777: PUSH
37778: LD_INT 32
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 30
37787: PUSH
37788: LD_INT 4
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 30
37797: PUSH
37798: LD_INT 5
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: PPUSH
37816: CALL_OW 72
37820: ST_TO_ADDR
37821: GO 38045
37823: LD_INT 2
37825: DOUBLE
37826: EQUAL
37827: IFTRUE 37831
37829: GO 37893
37831: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37832: LD_ADDR_VAR 0 12
37836: PUSH
37837: LD_VAR 0 18
37841: PPUSH
37842: LD_INT 22
37844: PUSH
37845: LD_VAR 0 16
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 30
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 30
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PPUSH
37886: CALL_OW 72
37890: ST_TO_ADDR
37891: GO 38045
37893: LD_INT 3
37895: DOUBLE
37896: EQUAL
37897: IFTRUE 37901
37899: GO 37963
37901: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37902: LD_ADDR_VAR 0 12
37906: PUSH
37907: LD_VAR 0 18
37911: PPUSH
37912: LD_INT 22
37914: PUSH
37915: LD_VAR 0 16
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: LD_INT 30
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 30
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: LIST
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PPUSH
37956: CALL_OW 72
37960: ST_TO_ADDR
37961: GO 38045
37963: LD_INT 4
37965: DOUBLE
37966: EQUAL
37967: IFTRUE 37971
37969: GO 38044
37971: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37972: LD_ADDR_VAR 0 12
37976: PUSH
37977: LD_VAR 0 18
37981: PPUSH
37982: LD_INT 22
37984: PUSH
37985: LD_VAR 0 16
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: LD_INT 30
37999: PUSH
38000: LD_INT 6
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 30
38009: PUSH
38010: LD_INT 7
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 30
38019: PUSH
38020: LD_INT 8
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PPUSH
38037: CALL_OW 72
38041: ST_TO_ADDR
38042: GO 38045
38044: POP
// if i = 1 then
38045: LD_VAR 0 8
38049: PUSH
38050: LD_INT 1
38052: EQUAL
38053: IFFALSE 38164
// begin tmp := [ ] ;
38055: LD_ADDR_VAR 0 19
38059: PUSH
38060: EMPTY
38061: ST_TO_ADDR
// for j in f do
38062: LD_ADDR_VAR 0 9
38066: PUSH
38067: LD_VAR 0 12
38071: PUSH
38072: FOR_IN
38073: IFFALSE 38146
// if GetBType ( j ) = b_bunker then
38075: LD_VAR 0 9
38079: PPUSH
38080: CALL_OW 266
38084: PUSH
38085: LD_INT 32
38087: EQUAL
38088: IFFALSE 38115
// tmp := Insert ( tmp , 1 , j ) else
38090: LD_ADDR_VAR 0 19
38094: PUSH
38095: LD_VAR 0 19
38099: PPUSH
38100: LD_INT 1
38102: PPUSH
38103: LD_VAR 0 9
38107: PPUSH
38108: CALL_OW 2
38112: ST_TO_ADDR
38113: GO 38144
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38115: LD_ADDR_VAR 0 19
38119: PUSH
38120: LD_VAR 0 19
38124: PPUSH
38125: LD_VAR 0 19
38129: PUSH
38130: LD_INT 1
38132: PLUS
38133: PPUSH
38134: LD_VAR 0 9
38138: PPUSH
38139: CALL_OW 2
38143: ST_TO_ADDR
38144: GO 38072
38146: POP
38147: POP
// if tmp then
38148: LD_VAR 0 19
38152: IFFALSE 38164
// f := tmp ;
38154: LD_ADDR_VAR 0 12
38158: PUSH
38159: LD_VAR 0 19
38163: ST_TO_ADDR
// end ; x := personel [ i ] ;
38164: LD_ADDR_VAR 0 13
38168: PUSH
38169: LD_VAR 0 6
38173: PUSH
38174: LD_VAR 0 8
38178: ARRAY
38179: ST_TO_ADDR
// if x = - 1 then
38180: LD_VAR 0 13
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: EQUAL
38189: IFFALSE 38398
// begin for j in f do
38191: LD_ADDR_VAR 0 9
38195: PUSH
38196: LD_VAR 0 12
38200: PUSH
38201: FOR_IN
38202: IFFALSE 38394
// repeat InitHc ;
38204: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38208: LD_VAR 0 9
38212: PPUSH
38213: CALL_OW 266
38217: PUSH
38218: LD_INT 5
38220: EQUAL
38221: IFFALSE 38291
// begin if UnitsInside ( j ) < 3 then
38223: LD_VAR 0 9
38227: PPUSH
38228: CALL_OW 313
38232: PUSH
38233: LD_INT 3
38235: LESS
38236: IFFALSE 38272
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38238: LD_INT 0
38240: PPUSH
38241: LD_INT 5
38243: PUSH
38244: LD_INT 8
38246: PUSH
38247: LD_INT 9
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: PUSH
38255: LD_VAR 0 17
38259: ARRAY
38260: PPUSH
38261: LD_VAR 0 4
38265: PPUSH
38266: CALL_OW 380
38270: GO 38289
// PrepareHuman ( false , i , skill ) ;
38272: LD_INT 0
38274: PPUSH
38275: LD_VAR 0 8
38279: PPUSH
38280: LD_VAR 0 4
38284: PPUSH
38285: CALL_OW 380
// end else
38289: GO 38308
// PrepareHuman ( false , i , skill ) ;
38291: LD_INT 0
38293: PPUSH
38294: LD_VAR 0 8
38298: PPUSH
38299: LD_VAR 0 4
38303: PPUSH
38304: CALL_OW 380
// un := CreateHuman ;
38308: LD_ADDR_VAR 0 14
38312: PUSH
38313: CALL_OW 44
38317: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38318: LD_ADDR_VAR 0 7
38322: PUSH
38323: LD_VAR 0 7
38327: PPUSH
38328: LD_INT 1
38330: PPUSH
38331: LD_VAR 0 14
38335: PPUSH
38336: CALL_OW 2
38340: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38341: LD_VAR 0 14
38345: PPUSH
38346: LD_VAR 0 9
38350: PPUSH
38351: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38355: LD_VAR 0 9
38359: PPUSH
38360: CALL_OW 313
38364: PUSH
38365: LD_INT 6
38367: EQUAL
38368: PUSH
38369: LD_VAR 0 9
38373: PPUSH
38374: CALL_OW 266
38378: PUSH
38379: LD_INT 32
38381: PUSH
38382: LD_INT 31
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: IN
38389: OR
38390: IFFALSE 38204
38392: GO 38201
38394: POP
38395: POP
// end else
38396: GO 38778
// for j = 1 to x do
38398: LD_ADDR_VAR 0 9
38402: PUSH
38403: DOUBLE
38404: LD_INT 1
38406: DEC
38407: ST_TO_ADDR
38408: LD_VAR 0 13
38412: PUSH
38413: FOR_TO
38414: IFFALSE 38776
// begin InitHc ;
38416: CALL_OW 19
// if not f then
38420: LD_VAR 0 12
38424: NOT
38425: IFFALSE 38514
// begin PrepareHuman ( false , i , skill ) ;
38427: LD_INT 0
38429: PPUSH
38430: LD_VAR 0 8
38434: PPUSH
38435: LD_VAR 0 4
38439: PPUSH
38440: CALL_OW 380
// un := CreateHuman ;
38444: LD_ADDR_VAR 0 14
38448: PUSH
38449: CALL_OW 44
38453: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38454: LD_ADDR_VAR 0 7
38458: PUSH
38459: LD_VAR 0 7
38463: PPUSH
38464: LD_INT 1
38466: PPUSH
38467: LD_VAR 0 14
38471: PPUSH
38472: CALL_OW 2
38476: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38477: LD_VAR 0 14
38481: PPUSH
38482: LD_VAR 0 1
38486: PPUSH
38487: CALL_OW 250
38491: PPUSH
38492: LD_VAR 0 1
38496: PPUSH
38497: CALL_OW 251
38501: PPUSH
38502: LD_INT 10
38504: PPUSH
38505: LD_INT 0
38507: PPUSH
38508: CALL_OW 50
// continue ;
38512: GO 38413
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38514: LD_VAR 0 12
38518: PUSH
38519: LD_INT 1
38521: ARRAY
38522: PPUSH
38523: CALL_OW 313
38527: PUSH
38528: LD_VAR 0 12
38532: PUSH
38533: LD_INT 1
38535: ARRAY
38536: PPUSH
38537: CALL_OW 266
38541: PUSH
38542: LD_INT 32
38544: PUSH
38545: LD_INT 31
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: IN
38552: AND
38553: PUSH
38554: LD_VAR 0 12
38558: PUSH
38559: LD_INT 1
38561: ARRAY
38562: PPUSH
38563: CALL_OW 313
38567: PUSH
38568: LD_INT 6
38570: EQUAL
38571: OR
38572: IFFALSE 38592
// f := Delete ( f , 1 ) ;
38574: LD_ADDR_VAR 0 12
38578: PUSH
38579: LD_VAR 0 12
38583: PPUSH
38584: LD_INT 1
38586: PPUSH
38587: CALL_OW 3
38591: ST_TO_ADDR
// if not f then
38592: LD_VAR 0 12
38596: NOT
38597: IFFALSE 38615
// begin x := x + 2 ;
38599: LD_ADDR_VAR 0 13
38603: PUSH
38604: LD_VAR 0 13
38608: PUSH
38609: LD_INT 2
38611: PLUS
38612: ST_TO_ADDR
// continue ;
38613: GO 38413
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38615: LD_VAR 0 12
38619: PUSH
38620: LD_INT 1
38622: ARRAY
38623: PPUSH
38624: CALL_OW 266
38628: PUSH
38629: LD_INT 5
38631: EQUAL
38632: IFFALSE 38706
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38634: LD_VAR 0 12
38638: PUSH
38639: LD_INT 1
38641: ARRAY
38642: PPUSH
38643: CALL_OW 313
38647: PUSH
38648: LD_INT 3
38650: LESS
38651: IFFALSE 38687
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38653: LD_INT 0
38655: PPUSH
38656: LD_INT 5
38658: PUSH
38659: LD_INT 8
38661: PUSH
38662: LD_INT 9
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: PUSH
38670: LD_VAR 0 17
38674: ARRAY
38675: PPUSH
38676: LD_VAR 0 4
38680: PPUSH
38681: CALL_OW 380
38685: GO 38704
// PrepareHuman ( false , i , skill ) ;
38687: LD_INT 0
38689: PPUSH
38690: LD_VAR 0 8
38694: PPUSH
38695: LD_VAR 0 4
38699: PPUSH
38700: CALL_OW 380
// end else
38704: GO 38723
// PrepareHuman ( false , i , skill ) ;
38706: LD_INT 0
38708: PPUSH
38709: LD_VAR 0 8
38713: PPUSH
38714: LD_VAR 0 4
38718: PPUSH
38719: CALL_OW 380
// un := CreateHuman ;
38723: LD_ADDR_VAR 0 14
38727: PUSH
38728: CALL_OW 44
38732: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38733: LD_ADDR_VAR 0 7
38737: PUSH
38738: LD_VAR 0 7
38742: PPUSH
38743: LD_INT 1
38745: PPUSH
38746: LD_VAR 0 14
38750: PPUSH
38751: CALL_OW 2
38755: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38756: LD_VAR 0 14
38760: PPUSH
38761: LD_VAR 0 12
38765: PUSH
38766: LD_INT 1
38768: ARRAY
38769: PPUSH
38770: CALL_OW 52
// end ;
38774: GO 38413
38776: POP
38777: POP
// end ;
38778: GO 37715
38780: POP
38781: POP
// result := result ^ buildings ;
38782: LD_ADDR_VAR 0 7
38786: PUSH
38787: LD_VAR 0 7
38791: PUSH
38792: LD_VAR 0 18
38796: ADD
38797: ST_TO_ADDR
// end else
38798: GO 38941
// begin for i = 1 to personel do
38800: LD_ADDR_VAR 0 8
38804: PUSH
38805: DOUBLE
38806: LD_INT 1
38808: DEC
38809: ST_TO_ADDR
38810: LD_VAR 0 6
38814: PUSH
38815: FOR_TO
38816: IFFALSE 38939
// begin if i > 4 then
38818: LD_VAR 0 8
38822: PUSH
38823: LD_INT 4
38825: GREATER
38826: IFFALSE 38830
// break ;
38828: GO 38939
// x := personel [ i ] ;
38830: LD_ADDR_VAR 0 13
38834: PUSH
38835: LD_VAR 0 6
38839: PUSH
38840: LD_VAR 0 8
38844: ARRAY
38845: ST_TO_ADDR
// if x = - 1 then
38846: LD_VAR 0 13
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: EQUAL
38855: IFFALSE 38859
// continue ;
38857: GO 38815
// PrepareHuman ( false , i , skill ) ;
38859: LD_INT 0
38861: PPUSH
38862: LD_VAR 0 8
38866: PPUSH
38867: LD_VAR 0 4
38871: PPUSH
38872: CALL_OW 380
// un := CreateHuman ;
38876: LD_ADDR_VAR 0 14
38880: PUSH
38881: CALL_OW 44
38885: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38886: LD_VAR 0 14
38890: PPUSH
38891: LD_VAR 0 1
38895: PPUSH
38896: CALL_OW 250
38900: PPUSH
38901: LD_VAR 0 1
38905: PPUSH
38906: CALL_OW 251
38910: PPUSH
38911: LD_INT 10
38913: PPUSH
38914: LD_INT 0
38916: PPUSH
38917: CALL_OW 50
// result := result ^ un ;
38921: LD_ADDR_VAR 0 7
38925: PUSH
38926: LD_VAR 0 7
38930: PUSH
38931: LD_VAR 0 14
38935: ADD
38936: ST_TO_ADDR
// end ;
38937: GO 38815
38939: POP
38940: POP
// end ; end ;
38941: LD_VAR 0 7
38945: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38946: LD_INT 0
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
38955: PPUSH
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
// result := false ;
38964: LD_ADDR_VAR 0 3
38968: PUSH
38969: LD_INT 0
38971: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38972: LD_VAR 0 1
38976: NOT
38977: PUSH
38978: LD_VAR 0 1
38982: PPUSH
38983: CALL_OW 266
38987: PUSH
38988: LD_INT 32
38990: PUSH
38991: LD_INT 33
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: IN
38998: NOT
38999: OR
39000: IFFALSE 39004
// exit ;
39002: GO 40113
// nat := GetNation ( tower ) ;
39004: LD_ADDR_VAR 0 12
39008: PUSH
39009: LD_VAR 0 1
39013: PPUSH
39014: CALL_OW 248
39018: ST_TO_ADDR
// side := GetSide ( tower ) ;
39019: LD_ADDR_VAR 0 16
39023: PUSH
39024: LD_VAR 0 1
39028: PPUSH
39029: CALL_OW 255
39033: ST_TO_ADDR
// x := GetX ( tower ) ;
39034: LD_ADDR_VAR 0 10
39038: PUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: CALL_OW 250
39048: ST_TO_ADDR
// y := GetY ( tower ) ;
39049: LD_ADDR_VAR 0 11
39053: PUSH
39054: LD_VAR 0 1
39058: PPUSH
39059: CALL_OW 251
39063: ST_TO_ADDR
// if not x or not y then
39064: LD_VAR 0 10
39068: NOT
39069: PUSH
39070: LD_VAR 0 11
39074: NOT
39075: OR
39076: IFFALSE 39080
// exit ;
39078: GO 40113
// weapon := 0 ;
39080: LD_ADDR_VAR 0 18
39084: PUSH
39085: LD_INT 0
39087: ST_TO_ADDR
// fac_list := [ ] ;
39088: LD_ADDR_VAR 0 17
39092: PUSH
39093: EMPTY
39094: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39095: LD_ADDR_VAR 0 6
39099: PUSH
39100: LD_VAR 0 1
39104: PPUSH
39105: CALL_OW 274
39109: PPUSH
39110: LD_VAR 0 2
39114: PPUSH
39115: LD_INT 0
39117: PPUSH
39118: CALL 36684 0 3
39122: PPUSH
39123: LD_INT 30
39125: PUSH
39126: LD_INT 3
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PPUSH
39133: CALL_OW 72
39137: ST_TO_ADDR
// if not factories then
39138: LD_VAR 0 6
39142: NOT
39143: IFFALSE 39147
// exit ;
39145: GO 40113
// for i in factories do
39147: LD_ADDR_VAR 0 8
39151: PUSH
39152: LD_VAR 0 6
39156: PUSH
39157: FOR_IN
39158: IFFALSE 39183
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39160: LD_ADDR_VAR 0 17
39164: PUSH
39165: LD_VAR 0 17
39169: PUSH
39170: LD_VAR 0 8
39174: PPUSH
39175: CALL_OW 478
39179: UNION
39180: ST_TO_ADDR
39181: GO 39157
39183: POP
39184: POP
// if not fac_list then
39185: LD_VAR 0 17
39189: NOT
39190: IFFALSE 39194
// exit ;
39192: GO 40113
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39194: LD_ADDR_VAR 0 5
39198: PUSH
39199: LD_INT 4
39201: PUSH
39202: LD_INT 5
39204: PUSH
39205: LD_INT 9
39207: PUSH
39208: LD_INT 10
39210: PUSH
39211: LD_INT 6
39213: PUSH
39214: LD_INT 7
39216: PUSH
39217: LD_INT 11
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 27
39231: PUSH
39232: LD_INT 28
39234: PUSH
39235: LD_INT 26
39237: PUSH
39238: LD_INT 30
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 43
39249: PUSH
39250: LD_INT 44
39252: PUSH
39253: LD_INT 46
39255: PUSH
39256: LD_INT 45
39258: PUSH
39259: LD_INT 47
39261: PUSH
39262: LD_INT 49
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: PUSH
39278: LD_VAR 0 12
39282: ARRAY
39283: ST_TO_ADDR
// list := list isect fac_list ;
39284: LD_ADDR_VAR 0 5
39288: PUSH
39289: LD_VAR 0 5
39293: PUSH
39294: LD_VAR 0 17
39298: ISECT
39299: ST_TO_ADDR
// if not list then
39300: LD_VAR 0 5
39304: NOT
39305: IFFALSE 39309
// exit ;
39307: GO 40113
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39309: LD_VAR 0 12
39313: PUSH
39314: LD_INT 3
39316: EQUAL
39317: PUSH
39318: LD_INT 49
39320: PUSH
39321: LD_VAR 0 5
39325: IN
39326: AND
39327: PUSH
39328: LD_INT 31
39330: PPUSH
39331: LD_VAR 0 16
39335: PPUSH
39336: CALL_OW 321
39340: PUSH
39341: LD_INT 2
39343: EQUAL
39344: AND
39345: IFFALSE 39405
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39347: LD_INT 22
39349: PUSH
39350: LD_VAR 0 16
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 35
39361: PUSH
39362: LD_INT 49
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 91
39371: PUSH
39372: LD_VAR 0 1
39376: PUSH
39377: LD_INT 10
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: LIST
39389: PPUSH
39390: CALL_OW 69
39394: NOT
39395: IFFALSE 39405
// weapon := ru_time_lapser ;
39397: LD_ADDR_VAR 0 18
39401: PUSH
39402: LD_INT 49
39404: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39405: LD_VAR 0 12
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: IN
39420: PUSH
39421: LD_INT 11
39423: PUSH
39424: LD_VAR 0 5
39428: IN
39429: PUSH
39430: LD_INT 30
39432: PUSH
39433: LD_VAR 0 5
39437: IN
39438: OR
39439: AND
39440: PUSH
39441: LD_INT 6
39443: PPUSH
39444: LD_VAR 0 16
39448: PPUSH
39449: CALL_OW 321
39453: PUSH
39454: LD_INT 2
39456: EQUAL
39457: AND
39458: IFFALSE 39623
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39460: LD_INT 22
39462: PUSH
39463: LD_VAR 0 16
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: PUSH
39475: LD_INT 35
39477: PUSH
39478: LD_INT 11
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 35
39487: PUSH
39488: LD_INT 30
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 91
39502: PUSH
39503: LD_VAR 0 1
39507: PUSH
39508: LD_INT 18
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: PPUSH
39521: CALL_OW 69
39525: NOT
39526: PUSH
39527: LD_INT 22
39529: PUSH
39530: LD_VAR 0 16
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: LD_INT 30
39544: PUSH
39545: LD_INT 32
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 30
39554: PUSH
39555: LD_INT 33
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 91
39569: PUSH
39570: LD_VAR 0 1
39574: PUSH
39575: LD_INT 12
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: LIST
39587: PUSH
39588: EMPTY
39589: LIST
39590: PPUSH
39591: CALL_OW 69
39595: PUSH
39596: LD_INT 2
39598: GREATER
39599: AND
39600: IFFALSE 39623
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39602: LD_ADDR_VAR 0 18
39606: PUSH
39607: LD_INT 11
39609: PUSH
39610: LD_INT 30
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_VAR 0 12
39621: ARRAY
39622: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39623: LD_VAR 0 18
39627: NOT
39628: PUSH
39629: LD_INT 40
39631: PPUSH
39632: LD_VAR 0 16
39636: PPUSH
39637: CALL_OW 321
39641: PUSH
39642: LD_INT 2
39644: EQUAL
39645: AND
39646: PUSH
39647: LD_INT 7
39649: PUSH
39650: LD_VAR 0 5
39654: IN
39655: PUSH
39656: LD_INT 28
39658: PUSH
39659: LD_VAR 0 5
39663: IN
39664: OR
39665: PUSH
39666: LD_INT 45
39668: PUSH
39669: LD_VAR 0 5
39673: IN
39674: OR
39675: AND
39676: IFFALSE 39930
// begin hex := GetHexInfo ( x , y ) ;
39678: LD_ADDR_VAR 0 4
39682: PUSH
39683: LD_VAR 0 10
39687: PPUSH
39688: LD_VAR 0 11
39692: PPUSH
39693: CALL_OW 546
39697: ST_TO_ADDR
// if hex [ 1 ] then
39698: LD_VAR 0 4
39702: PUSH
39703: LD_INT 1
39705: ARRAY
39706: IFFALSE 39710
// exit ;
39708: GO 40113
// height := hex [ 2 ] ;
39710: LD_ADDR_VAR 0 15
39714: PUSH
39715: LD_VAR 0 4
39719: PUSH
39720: LD_INT 2
39722: ARRAY
39723: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39724: LD_ADDR_VAR 0 14
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: LD_INT 3
39737: PUSH
39738: LD_INT 5
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: ST_TO_ADDR
// for i in tmp do
39747: LD_ADDR_VAR 0 8
39751: PUSH
39752: LD_VAR 0 14
39756: PUSH
39757: FOR_IN
39758: IFFALSE 39928
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39760: LD_ADDR_VAR 0 9
39764: PUSH
39765: LD_VAR 0 10
39769: PPUSH
39770: LD_VAR 0 8
39774: PPUSH
39775: LD_INT 5
39777: PPUSH
39778: CALL_OW 272
39782: PUSH
39783: LD_VAR 0 11
39787: PPUSH
39788: LD_VAR 0 8
39792: PPUSH
39793: LD_INT 5
39795: PPUSH
39796: CALL_OW 273
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39805: LD_VAR 0 9
39809: PUSH
39810: LD_INT 1
39812: ARRAY
39813: PPUSH
39814: LD_VAR 0 9
39818: PUSH
39819: LD_INT 2
39821: ARRAY
39822: PPUSH
39823: CALL_OW 488
39827: IFFALSE 39926
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39829: LD_ADDR_VAR 0 4
39833: PUSH
39834: LD_VAR 0 9
39838: PUSH
39839: LD_INT 1
39841: ARRAY
39842: PPUSH
39843: LD_VAR 0 9
39847: PUSH
39848: LD_INT 2
39850: ARRAY
39851: PPUSH
39852: CALL_OW 546
39856: ST_TO_ADDR
// if hex [ 1 ] then
39857: LD_VAR 0 4
39861: PUSH
39862: LD_INT 1
39864: ARRAY
39865: IFFALSE 39869
// continue ;
39867: GO 39757
// h := hex [ 2 ] ;
39869: LD_ADDR_VAR 0 13
39873: PUSH
39874: LD_VAR 0 4
39878: PUSH
39879: LD_INT 2
39881: ARRAY
39882: ST_TO_ADDR
// if h + 7 < height then
39883: LD_VAR 0 13
39887: PUSH
39888: LD_INT 7
39890: PLUS
39891: PUSH
39892: LD_VAR 0 15
39896: LESS
39897: IFFALSE 39926
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39899: LD_ADDR_VAR 0 18
39903: PUSH
39904: LD_INT 7
39906: PUSH
39907: LD_INT 28
39909: PUSH
39910: LD_INT 45
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: PUSH
39918: LD_VAR 0 12
39922: ARRAY
39923: ST_TO_ADDR
// break ;
39924: GO 39928
// end ; end ; end ;
39926: GO 39757
39928: POP
39929: POP
// end ; if not weapon then
39930: LD_VAR 0 18
39934: NOT
39935: IFFALSE 39995
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39937: LD_ADDR_VAR 0 5
39941: PUSH
39942: LD_VAR 0 5
39946: PUSH
39947: LD_INT 11
39949: PUSH
39950: LD_INT 30
39952: PUSH
39953: LD_INT 49
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: LIST
39960: DIFF
39961: ST_TO_ADDR
// if not list then
39962: LD_VAR 0 5
39966: NOT
39967: IFFALSE 39971
// exit ;
39969: GO 40113
// weapon := list [ rand ( 1 , list ) ] ;
39971: LD_ADDR_VAR 0 18
39975: PUSH
39976: LD_VAR 0 5
39980: PUSH
39981: LD_INT 1
39983: PPUSH
39984: LD_VAR 0 5
39988: PPUSH
39989: CALL_OW 12
39993: ARRAY
39994: ST_TO_ADDR
// end ; if weapon then
39995: LD_VAR 0 18
39999: IFFALSE 40113
// begin tmp := CostOfWeapon ( weapon ) ;
40001: LD_ADDR_VAR 0 14
40005: PUSH
40006: LD_VAR 0 18
40010: PPUSH
40011: CALL_OW 451
40015: ST_TO_ADDR
// j := GetBase ( tower ) ;
40016: LD_ADDR_VAR 0 9
40020: PUSH
40021: LD_VAR 0 1
40025: PPUSH
40026: CALL_OW 274
40030: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40031: LD_VAR 0 9
40035: PPUSH
40036: LD_INT 1
40038: PPUSH
40039: CALL_OW 275
40043: PUSH
40044: LD_VAR 0 14
40048: PUSH
40049: LD_INT 1
40051: ARRAY
40052: GREATEREQUAL
40053: PUSH
40054: LD_VAR 0 9
40058: PPUSH
40059: LD_INT 2
40061: PPUSH
40062: CALL_OW 275
40066: PUSH
40067: LD_VAR 0 14
40071: PUSH
40072: LD_INT 2
40074: ARRAY
40075: GREATEREQUAL
40076: AND
40077: PUSH
40078: LD_VAR 0 9
40082: PPUSH
40083: LD_INT 3
40085: PPUSH
40086: CALL_OW 275
40090: PUSH
40091: LD_VAR 0 14
40095: PUSH
40096: LD_INT 3
40098: ARRAY
40099: GREATEREQUAL
40100: AND
40101: IFFALSE 40113
// result := weapon ;
40103: LD_ADDR_VAR 0 3
40107: PUSH
40108: LD_VAR 0 18
40112: ST_TO_ADDR
// end ; end ;
40113: LD_VAR 0 3
40117: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40118: LD_INT 0
40120: PPUSH
40121: PPUSH
// result := true ;
40122: LD_ADDR_VAR 0 3
40126: PUSH
40127: LD_INT 1
40129: ST_TO_ADDR
// if array1 = array2 then
40130: LD_VAR 0 1
40134: PUSH
40135: LD_VAR 0 2
40139: EQUAL
40140: IFFALSE 40200
// begin for i = 1 to array1 do
40142: LD_ADDR_VAR 0 4
40146: PUSH
40147: DOUBLE
40148: LD_INT 1
40150: DEC
40151: ST_TO_ADDR
40152: LD_VAR 0 1
40156: PUSH
40157: FOR_TO
40158: IFFALSE 40196
// if array1 [ i ] <> array2 [ i ] then
40160: LD_VAR 0 1
40164: PUSH
40165: LD_VAR 0 4
40169: ARRAY
40170: PUSH
40171: LD_VAR 0 2
40175: PUSH
40176: LD_VAR 0 4
40180: ARRAY
40181: NONEQUAL
40182: IFFALSE 40194
// begin result := false ;
40184: LD_ADDR_VAR 0 3
40188: PUSH
40189: LD_INT 0
40191: ST_TO_ADDR
// break ;
40192: GO 40196
// end ;
40194: GO 40157
40196: POP
40197: POP
// end else
40198: GO 40208
// result := false ;
40200: LD_ADDR_VAR 0 3
40204: PUSH
40205: LD_INT 0
40207: ST_TO_ADDR
// end ;
40208: LD_VAR 0 3
40212: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40213: LD_INT 0
40215: PPUSH
40216: PPUSH
// if not array1 or not array2 then
40217: LD_VAR 0 1
40221: NOT
40222: PUSH
40223: LD_VAR 0 2
40227: NOT
40228: OR
40229: IFFALSE 40233
// exit ;
40231: GO 40297
// result := true ;
40233: LD_ADDR_VAR 0 3
40237: PUSH
40238: LD_INT 1
40240: ST_TO_ADDR
// for i = 1 to array1 do
40241: LD_ADDR_VAR 0 4
40245: PUSH
40246: DOUBLE
40247: LD_INT 1
40249: DEC
40250: ST_TO_ADDR
40251: LD_VAR 0 1
40255: PUSH
40256: FOR_TO
40257: IFFALSE 40295
// if array1 [ i ] <> array2 [ i ] then
40259: LD_VAR 0 1
40263: PUSH
40264: LD_VAR 0 4
40268: ARRAY
40269: PUSH
40270: LD_VAR 0 2
40274: PUSH
40275: LD_VAR 0 4
40279: ARRAY
40280: NONEQUAL
40281: IFFALSE 40293
// begin result := false ;
40283: LD_ADDR_VAR 0 3
40287: PUSH
40288: LD_INT 0
40290: ST_TO_ADDR
// break ;
40291: GO 40295
// end ;
40293: GO 40256
40295: POP
40296: POP
// end ;
40297: LD_VAR 0 3
40301: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40302: LD_INT 0
40304: PPUSH
40305: PPUSH
40306: PPUSH
// pom := GetBase ( fac ) ;
40307: LD_ADDR_VAR 0 5
40311: PUSH
40312: LD_VAR 0 1
40316: PPUSH
40317: CALL_OW 274
40321: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40322: LD_ADDR_VAR 0 4
40326: PUSH
40327: LD_VAR 0 2
40331: PUSH
40332: LD_INT 1
40334: ARRAY
40335: PPUSH
40336: LD_VAR 0 2
40340: PUSH
40341: LD_INT 2
40343: ARRAY
40344: PPUSH
40345: LD_VAR 0 2
40349: PUSH
40350: LD_INT 3
40352: ARRAY
40353: PPUSH
40354: LD_VAR 0 2
40358: PUSH
40359: LD_INT 4
40361: ARRAY
40362: PPUSH
40363: CALL_OW 449
40367: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40368: LD_ADDR_VAR 0 3
40372: PUSH
40373: LD_VAR 0 5
40377: PPUSH
40378: LD_INT 1
40380: PPUSH
40381: CALL_OW 275
40385: PUSH
40386: LD_VAR 0 4
40390: PUSH
40391: LD_INT 1
40393: ARRAY
40394: GREATEREQUAL
40395: PUSH
40396: LD_VAR 0 5
40400: PPUSH
40401: LD_INT 2
40403: PPUSH
40404: CALL_OW 275
40408: PUSH
40409: LD_VAR 0 4
40413: PUSH
40414: LD_INT 2
40416: ARRAY
40417: GREATEREQUAL
40418: AND
40419: PUSH
40420: LD_VAR 0 5
40424: PPUSH
40425: LD_INT 3
40427: PPUSH
40428: CALL_OW 275
40432: PUSH
40433: LD_VAR 0 4
40437: PUSH
40438: LD_INT 3
40440: ARRAY
40441: GREATEREQUAL
40442: AND
40443: ST_TO_ADDR
// end ;
40444: LD_VAR 0 3
40448: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40449: LD_INT 0
40451: PPUSH
40452: PPUSH
40453: PPUSH
40454: PPUSH
// pom := GetBase ( building ) ;
40455: LD_ADDR_VAR 0 3
40459: PUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 274
40469: ST_TO_ADDR
// if not pom then
40470: LD_VAR 0 3
40474: NOT
40475: IFFALSE 40479
// exit ;
40477: GO 40649
// btype := GetBType ( building ) ;
40479: LD_ADDR_VAR 0 5
40483: PUSH
40484: LD_VAR 0 1
40488: PPUSH
40489: CALL_OW 266
40493: ST_TO_ADDR
// if btype = b_armoury then
40494: LD_VAR 0 5
40498: PUSH
40499: LD_INT 4
40501: EQUAL
40502: IFFALSE 40512
// btype := b_barracks ;
40504: LD_ADDR_VAR 0 5
40508: PUSH
40509: LD_INT 5
40511: ST_TO_ADDR
// if btype = b_depot then
40512: LD_VAR 0 5
40516: PUSH
40517: LD_INT 0
40519: EQUAL
40520: IFFALSE 40530
// btype := b_warehouse ;
40522: LD_ADDR_VAR 0 5
40526: PUSH
40527: LD_INT 1
40529: ST_TO_ADDR
// if btype = b_workshop then
40530: LD_VAR 0 5
40534: PUSH
40535: LD_INT 2
40537: EQUAL
40538: IFFALSE 40548
// btype := b_factory ;
40540: LD_ADDR_VAR 0 5
40544: PUSH
40545: LD_INT 3
40547: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40548: LD_ADDR_VAR 0 4
40552: PUSH
40553: LD_VAR 0 5
40557: PPUSH
40558: LD_VAR 0 1
40562: PPUSH
40563: CALL_OW 248
40567: PPUSH
40568: CALL_OW 450
40572: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40573: LD_ADDR_VAR 0 2
40577: PUSH
40578: LD_VAR 0 3
40582: PPUSH
40583: LD_INT 1
40585: PPUSH
40586: CALL_OW 275
40590: PUSH
40591: LD_VAR 0 4
40595: PUSH
40596: LD_INT 1
40598: ARRAY
40599: GREATEREQUAL
40600: PUSH
40601: LD_VAR 0 3
40605: PPUSH
40606: LD_INT 2
40608: PPUSH
40609: CALL_OW 275
40613: PUSH
40614: LD_VAR 0 4
40618: PUSH
40619: LD_INT 2
40621: ARRAY
40622: GREATEREQUAL
40623: AND
40624: PUSH
40625: LD_VAR 0 3
40629: PPUSH
40630: LD_INT 3
40632: PPUSH
40633: CALL_OW 275
40637: PUSH
40638: LD_VAR 0 4
40642: PUSH
40643: LD_INT 3
40645: ARRAY
40646: GREATEREQUAL
40647: AND
40648: ST_TO_ADDR
// end ;
40649: LD_VAR 0 2
40653: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40654: LD_INT 0
40656: PPUSH
40657: PPUSH
40658: PPUSH
// pom := GetBase ( building ) ;
40659: LD_ADDR_VAR 0 4
40663: PUSH
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 274
40673: ST_TO_ADDR
// if not pom then
40674: LD_VAR 0 4
40678: NOT
40679: IFFALSE 40683
// exit ;
40681: GO 40784
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40683: LD_ADDR_VAR 0 5
40687: PUSH
40688: LD_VAR 0 2
40692: PPUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: CALL_OW 248
40702: PPUSH
40703: CALL_OW 450
40707: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40708: LD_ADDR_VAR 0 3
40712: PUSH
40713: LD_VAR 0 4
40717: PPUSH
40718: LD_INT 1
40720: PPUSH
40721: CALL_OW 275
40725: PUSH
40726: LD_VAR 0 5
40730: PUSH
40731: LD_INT 1
40733: ARRAY
40734: GREATEREQUAL
40735: PUSH
40736: LD_VAR 0 4
40740: PPUSH
40741: LD_INT 2
40743: PPUSH
40744: CALL_OW 275
40748: PUSH
40749: LD_VAR 0 5
40753: PUSH
40754: LD_INT 2
40756: ARRAY
40757: GREATEREQUAL
40758: AND
40759: PUSH
40760: LD_VAR 0 4
40764: PPUSH
40765: LD_INT 3
40767: PPUSH
40768: CALL_OW 275
40772: PUSH
40773: LD_VAR 0 5
40777: PUSH
40778: LD_INT 3
40780: ARRAY
40781: GREATEREQUAL
40782: AND
40783: ST_TO_ADDR
// end ;
40784: LD_VAR 0 3
40788: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40789: LD_INT 0
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
// result := false ;
40802: LD_ADDR_VAR 0 8
40806: PUSH
40807: LD_INT 0
40809: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40810: LD_VAR 0 5
40814: NOT
40815: PUSH
40816: LD_VAR 0 1
40820: NOT
40821: OR
40822: PUSH
40823: LD_VAR 0 2
40827: NOT
40828: OR
40829: PUSH
40830: LD_VAR 0 3
40834: NOT
40835: OR
40836: IFFALSE 40840
// exit ;
40838: GO 41654
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40840: LD_ADDR_VAR 0 14
40844: PUSH
40845: LD_VAR 0 1
40849: PPUSH
40850: LD_VAR 0 2
40854: PPUSH
40855: LD_VAR 0 3
40859: PPUSH
40860: LD_VAR 0 4
40864: PPUSH
40865: LD_VAR 0 5
40869: PUSH
40870: LD_INT 1
40872: ARRAY
40873: PPUSH
40874: CALL_OW 248
40878: PPUSH
40879: LD_INT 0
40881: PPUSH
40882: CALL 42891 0 6
40886: ST_TO_ADDR
// if not hexes then
40887: LD_VAR 0 14
40891: NOT
40892: IFFALSE 40896
// exit ;
40894: GO 41654
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40896: LD_ADDR_VAR 0 17
40900: PUSH
40901: LD_VAR 0 5
40905: PPUSH
40906: LD_INT 22
40908: PUSH
40909: LD_VAR 0 13
40913: PPUSH
40914: CALL_OW 255
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: LD_INT 30
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 30
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PPUSH
40955: CALL_OW 72
40959: ST_TO_ADDR
// for i = 1 to hexes do
40960: LD_ADDR_VAR 0 9
40964: PUSH
40965: DOUBLE
40966: LD_INT 1
40968: DEC
40969: ST_TO_ADDR
40970: LD_VAR 0 14
40974: PUSH
40975: FOR_TO
40976: IFFALSE 41652
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40978: LD_ADDR_VAR 0 13
40982: PUSH
40983: LD_VAR 0 14
40987: PUSH
40988: LD_VAR 0 9
40992: ARRAY
40993: PUSH
40994: LD_INT 1
40996: ARRAY
40997: PPUSH
40998: LD_VAR 0 14
41002: PUSH
41003: LD_VAR 0 9
41007: ARRAY
41008: PUSH
41009: LD_INT 2
41011: ARRAY
41012: PPUSH
41013: CALL_OW 428
41017: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41018: LD_VAR 0 14
41022: PUSH
41023: LD_VAR 0 9
41027: ARRAY
41028: PUSH
41029: LD_INT 1
41031: ARRAY
41032: PPUSH
41033: LD_VAR 0 14
41037: PUSH
41038: LD_VAR 0 9
41042: ARRAY
41043: PUSH
41044: LD_INT 2
41046: ARRAY
41047: PPUSH
41048: CALL_OW 351
41052: PUSH
41053: LD_VAR 0 14
41057: PUSH
41058: LD_VAR 0 9
41062: ARRAY
41063: PUSH
41064: LD_INT 1
41066: ARRAY
41067: PPUSH
41068: LD_VAR 0 14
41072: PUSH
41073: LD_VAR 0 9
41077: ARRAY
41078: PUSH
41079: LD_INT 2
41081: ARRAY
41082: PPUSH
41083: CALL_OW 488
41087: NOT
41088: OR
41089: PUSH
41090: LD_VAR 0 13
41094: PPUSH
41095: CALL_OW 247
41099: PUSH
41100: LD_INT 3
41102: EQUAL
41103: OR
41104: IFFALSE 41110
// exit ;
41106: POP
41107: POP
41108: GO 41654
// if not tmp then
41110: LD_VAR 0 13
41114: NOT
41115: IFFALSE 41119
// continue ;
41117: GO 40975
// result := true ;
41119: LD_ADDR_VAR 0 8
41123: PUSH
41124: LD_INT 1
41126: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41127: LD_VAR 0 6
41131: PUSH
41132: LD_VAR 0 13
41136: PPUSH
41137: CALL_OW 247
41141: PUSH
41142: LD_INT 2
41144: EQUAL
41145: AND
41146: PUSH
41147: LD_VAR 0 13
41151: PPUSH
41152: CALL_OW 263
41156: PUSH
41157: LD_INT 1
41159: EQUAL
41160: AND
41161: IFFALSE 41325
// begin if IsDrivenBy ( tmp ) then
41163: LD_VAR 0 13
41167: PPUSH
41168: CALL_OW 311
41172: IFFALSE 41176
// continue ;
41174: GO 40975
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41176: LD_VAR 0 6
41180: PPUSH
41181: LD_INT 3
41183: PUSH
41184: LD_INT 60
41186: PUSH
41187: EMPTY
41188: LIST
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 3
41196: PUSH
41197: LD_INT 55
41199: PUSH
41200: EMPTY
41201: LIST
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PPUSH
41211: CALL_OW 72
41215: IFFALSE 41323
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41217: LD_ADDR_VAR 0 18
41221: PUSH
41222: LD_VAR 0 6
41226: PPUSH
41227: LD_INT 3
41229: PUSH
41230: LD_INT 60
41232: PUSH
41233: EMPTY
41234: LIST
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 3
41242: PUSH
41243: LD_INT 55
41245: PUSH
41246: EMPTY
41247: LIST
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PPUSH
41257: CALL_OW 72
41261: PUSH
41262: LD_INT 1
41264: ARRAY
41265: ST_TO_ADDR
// if IsInUnit ( driver ) then
41266: LD_VAR 0 18
41270: PPUSH
41271: CALL_OW 310
41275: IFFALSE 41286
// ComExit ( driver ) ;
41277: LD_VAR 0 18
41281: PPUSH
41282: CALL 66075 0 1
// AddComEnterUnit ( driver , tmp ) ;
41286: LD_VAR 0 18
41290: PPUSH
41291: LD_VAR 0 13
41295: PPUSH
41296: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41300: LD_VAR 0 18
41304: PPUSH
41305: LD_VAR 0 7
41309: PPUSH
41310: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41314: LD_VAR 0 18
41318: PPUSH
41319: CALL_OW 181
// end ; continue ;
41323: GO 40975
// end ; if not cleaners or not tmp in cleaners then
41325: LD_VAR 0 6
41329: NOT
41330: PUSH
41331: LD_VAR 0 13
41335: PUSH
41336: LD_VAR 0 6
41340: IN
41341: NOT
41342: OR
41343: IFFALSE 41650
// begin if dep then
41345: LD_VAR 0 17
41349: IFFALSE 41485
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41351: LD_ADDR_VAR 0 16
41355: PUSH
41356: LD_VAR 0 17
41360: PUSH
41361: LD_INT 1
41363: ARRAY
41364: PPUSH
41365: CALL_OW 250
41369: PPUSH
41370: LD_VAR 0 17
41374: PUSH
41375: LD_INT 1
41377: ARRAY
41378: PPUSH
41379: CALL_OW 254
41383: PPUSH
41384: LD_INT 5
41386: PPUSH
41387: CALL_OW 272
41391: PUSH
41392: LD_VAR 0 17
41396: PUSH
41397: LD_INT 1
41399: ARRAY
41400: PPUSH
41401: CALL_OW 251
41405: PPUSH
41406: LD_VAR 0 17
41410: PUSH
41411: LD_INT 1
41413: ARRAY
41414: PPUSH
41415: CALL_OW 254
41419: PPUSH
41420: LD_INT 5
41422: PPUSH
41423: CALL_OW 273
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41432: LD_VAR 0 16
41436: PUSH
41437: LD_INT 1
41439: ARRAY
41440: PPUSH
41441: LD_VAR 0 16
41445: PUSH
41446: LD_INT 2
41448: ARRAY
41449: PPUSH
41450: CALL_OW 488
41454: IFFALSE 41485
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41456: LD_VAR 0 13
41460: PPUSH
41461: LD_VAR 0 16
41465: PUSH
41466: LD_INT 1
41468: ARRAY
41469: PPUSH
41470: LD_VAR 0 16
41474: PUSH
41475: LD_INT 2
41477: ARRAY
41478: PPUSH
41479: CALL_OW 111
// continue ;
41483: GO 40975
// end ; end ; r := GetDir ( tmp ) ;
41485: LD_ADDR_VAR 0 15
41489: PUSH
41490: LD_VAR 0 13
41494: PPUSH
41495: CALL_OW 254
41499: ST_TO_ADDR
// if r = 5 then
41500: LD_VAR 0 15
41504: PUSH
41505: LD_INT 5
41507: EQUAL
41508: IFFALSE 41518
// r := 0 ;
41510: LD_ADDR_VAR 0 15
41514: PUSH
41515: LD_INT 0
41517: ST_TO_ADDR
// for j = r to 5 do
41518: LD_ADDR_VAR 0 10
41522: PUSH
41523: DOUBLE
41524: LD_VAR 0 15
41528: DEC
41529: ST_TO_ADDR
41530: LD_INT 5
41532: PUSH
41533: FOR_TO
41534: IFFALSE 41648
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41536: LD_ADDR_VAR 0 11
41540: PUSH
41541: LD_VAR 0 13
41545: PPUSH
41546: CALL_OW 250
41550: PPUSH
41551: LD_VAR 0 10
41555: PPUSH
41556: LD_INT 2
41558: PPUSH
41559: CALL_OW 272
41563: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41564: LD_ADDR_VAR 0 12
41568: PUSH
41569: LD_VAR 0 13
41573: PPUSH
41574: CALL_OW 251
41578: PPUSH
41579: LD_VAR 0 10
41583: PPUSH
41584: LD_INT 2
41586: PPUSH
41587: CALL_OW 273
41591: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41592: LD_VAR 0 11
41596: PPUSH
41597: LD_VAR 0 12
41601: PPUSH
41602: CALL_OW 488
41606: PUSH
41607: LD_VAR 0 11
41611: PPUSH
41612: LD_VAR 0 12
41616: PPUSH
41617: CALL_OW 428
41621: NOT
41622: AND
41623: IFFALSE 41646
// begin ComMoveXY ( tmp , _x , _y ) ;
41625: LD_VAR 0 13
41629: PPUSH
41630: LD_VAR 0 11
41634: PPUSH
41635: LD_VAR 0 12
41639: PPUSH
41640: CALL_OW 111
// break ;
41644: GO 41648
// end ; end ;
41646: GO 41533
41648: POP
41649: POP
// end ; end ;
41650: GO 40975
41652: POP
41653: POP
// end ;
41654: LD_VAR 0 8
41658: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41659: LD_INT 0
41661: PPUSH
// result := true ;
41662: LD_ADDR_VAR 0 3
41666: PUSH
41667: LD_INT 1
41669: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41670: LD_VAR 0 2
41674: PUSH
41675: LD_INT 24
41677: DOUBLE
41678: EQUAL
41679: IFTRUE 41689
41681: LD_INT 33
41683: DOUBLE
41684: EQUAL
41685: IFTRUE 41689
41687: GO 41714
41689: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41690: LD_ADDR_VAR 0 3
41694: PUSH
41695: LD_INT 32
41697: PPUSH
41698: LD_VAR 0 1
41702: PPUSH
41703: CALL_OW 321
41707: PUSH
41708: LD_INT 2
41710: EQUAL
41711: ST_TO_ADDR
41712: GO 42034
41714: LD_INT 20
41716: DOUBLE
41717: EQUAL
41718: IFTRUE 41722
41720: GO 41747
41722: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41723: LD_ADDR_VAR 0 3
41727: PUSH
41728: LD_INT 6
41730: PPUSH
41731: LD_VAR 0 1
41735: PPUSH
41736: CALL_OW 321
41740: PUSH
41741: LD_INT 2
41743: EQUAL
41744: ST_TO_ADDR
41745: GO 42034
41747: LD_INT 22
41749: DOUBLE
41750: EQUAL
41751: IFTRUE 41761
41753: LD_INT 36
41755: DOUBLE
41756: EQUAL
41757: IFTRUE 41761
41759: GO 41786
41761: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41762: LD_ADDR_VAR 0 3
41766: PUSH
41767: LD_INT 15
41769: PPUSH
41770: LD_VAR 0 1
41774: PPUSH
41775: CALL_OW 321
41779: PUSH
41780: LD_INT 2
41782: EQUAL
41783: ST_TO_ADDR
41784: GO 42034
41786: LD_INT 30
41788: DOUBLE
41789: EQUAL
41790: IFTRUE 41794
41792: GO 41819
41794: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41795: LD_ADDR_VAR 0 3
41799: PUSH
41800: LD_INT 20
41802: PPUSH
41803: LD_VAR 0 1
41807: PPUSH
41808: CALL_OW 321
41812: PUSH
41813: LD_INT 2
41815: EQUAL
41816: ST_TO_ADDR
41817: GO 42034
41819: LD_INT 28
41821: DOUBLE
41822: EQUAL
41823: IFTRUE 41833
41825: LD_INT 21
41827: DOUBLE
41828: EQUAL
41829: IFTRUE 41833
41831: GO 41858
41833: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41834: LD_ADDR_VAR 0 3
41838: PUSH
41839: LD_INT 21
41841: PPUSH
41842: LD_VAR 0 1
41846: PPUSH
41847: CALL_OW 321
41851: PUSH
41852: LD_INT 2
41854: EQUAL
41855: ST_TO_ADDR
41856: GO 42034
41858: LD_INT 16
41860: DOUBLE
41861: EQUAL
41862: IFTRUE 41866
41864: GO 41893
41866: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41867: LD_ADDR_VAR 0 3
41871: PUSH
41872: LD_EXP 26
41876: PPUSH
41877: LD_VAR 0 1
41881: PPUSH
41882: CALL_OW 321
41886: PUSH
41887: LD_INT 2
41889: EQUAL
41890: ST_TO_ADDR
41891: GO 42034
41893: LD_INT 19
41895: DOUBLE
41896: EQUAL
41897: IFTRUE 41907
41899: LD_INT 23
41901: DOUBLE
41902: EQUAL
41903: IFTRUE 41907
41905: GO 41934
41907: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41908: LD_ADDR_VAR 0 3
41912: PUSH
41913: LD_EXP 25
41917: PPUSH
41918: LD_VAR 0 1
41922: PPUSH
41923: CALL_OW 321
41927: PUSH
41928: LD_INT 2
41930: EQUAL
41931: ST_TO_ADDR
41932: GO 42034
41934: LD_INT 17
41936: DOUBLE
41937: EQUAL
41938: IFTRUE 41942
41940: GO 41967
41942: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41943: LD_ADDR_VAR 0 3
41947: PUSH
41948: LD_INT 39
41950: PPUSH
41951: LD_VAR 0 1
41955: PPUSH
41956: CALL_OW 321
41960: PUSH
41961: LD_INT 2
41963: EQUAL
41964: ST_TO_ADDR
41965: GO 42034
41967: LD_INT 18
41969: DOUBLE
41970: EQUAL
41971: IFTRUE 41975
41973: GO 42000
41975: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41976: LD_ADDR_VAR 0 3
41980: PUSH
41981: LD_INT 40
41983: PPUSH
41984: LD_VAR 0 1
41988: PPUSH
41989: CALL_OW 321
41993: PUSH
41994: LD_INT 2
41996: EQUAL
41997: ST_TO_ADDR
41998: GO 42034
42000: LD_INT 27
42002: DOUBLE
42003: EQUAL
42004: IFTRUE 42008
42006: GO 42033
42008: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42009: LD_ADDR_VAR 0 3
42013: PUSH
42014: LD_INT 35
42016: PPUSH
42017: LD_VAR 0 1
42021: PPUSH
42022: CALL_OW 321
42026: PUSH
42027: LD_INT 2
42029: EQUAL
42030: ST_TO_ADDR
42031: GO 42034
42033: POP
// end ;
42034: LD_VAR 0 3
42038: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42039: LD_INT 0
42041: PPUSH
42042: PPUSH
42043: PPUSH
42044: PPUSH
42045: PPUSH
42046: PPUSH
42047: PPUSH
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
// result := false ;
42052: LD_ADDR_VAR 0 6
42056: PUSH
42057: LD_INT 0
42059: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42060: LD_VAR 0 1
42064: NOT
42065: PUSH
42066: LD_VAR 0 1
42070: PPUSH
42071: CALL_OW 266
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: IN
42086: NOT
42087: OR
42088: PUSH
42089: LD_VAR 0 2
42093: NOT
42094: OR
42095: PUSH
42096: LD_VAR 0 5
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 3
42112: PUSH
42113: LD_INT 4
42115: PUSH
42116: LD_INT 5
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: IN
42127: NOT
42128: OR
42129: PUSH
42130: LD_VAR 0 3
42134: PPUSH
42135: LD_VAR 0 4
42139: PPUSH
42140: CALL_OW 488
42144: NOT
42145: OR
42146: IFFALSE 42150
// exit ;
42148: GO 42886
// side := GetSide ( depot ) ;
42150: LD_ADDR_VAR 0 9
42154: PUSH
42155: LD_VAR 0 1
42159: PPUSH
42160: CALL_OW 255
42164: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42165: LD_VAR 0 9
42169: PPUSH
42170: LD_VAR 0 2
42174: PPUSH
42175: CALL 41659 0 2
42179: NOT
42180: IFFALSE 42184
// exit ;
42182: GO 42886
// pom := GetBase ( depot ) ;
42184: LD_ADDR_VAR 0 10
42188: PUSH
42189: LD_VAR 0 1
42193: PPUSH
42194: CALL_OW 274
42198: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42199: LD_ADDR_VAR 0 11
42203: PUSH
42204: LD_VAR 0 2
42208: PPUSH
42209: LD_VAR 0 1
42213: PPUSH
42214: CALL_OW 248
42218: PPUSH
42219: CALL_OW 450
42223: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42224: LD_VAR 0 10
42228: PPUSH
42229: LD_INT 1
42231: PPUSH
42232: CALL_OW 275
42236: PUSH
42237: LD_VAR 0 11
42241: PUSH
42242: LD_INT 1
42244: ARRAY
42245: GREATEREQUAL
42246: PUSH
42247: LD_VAR 0 10
42251: PPUSH
42252: LD_INT 2
42254: PPUSH
42255: CALL_OW 275
42259: PUSH
42260: LD_VAR 0 11
42264: PUSH
42265: LD_INT 2
42267: ARRAY
42268: GREATEREQUAL
42269: AND
42270: PUSH
42271: LD_VAR 0 10
42275: PPUSH
42276: LD_INT 3
42278: PPUSH
42279: CALL_OW 275
42283: PUSH
42284: LD_VAR 0 11
42288: PUSH
42289: LD_INT 3
42291: ARRAY
42292: GREATEREQUAL
42293: AND
42294: NOT
42295: IFFALSE 42299
// exit ;
42297: GO 42886
// if GetBType ( depot ) = b_depot then
42299: LD_VAR 0 1
42303: PPUSH
42304: CALL_OW 266
42308: PUSH
42309: LD_INT 0
42311: EQUAL
42312: IFFALSE 42324
// dist := 28 else
42314: LD_ADDR_VAR 0 14
42318: PUSH
42319: LD_INT 28
42321: ST_TO_ADDR
42322: GO 42332
// dist := 36 ;
42324: LD_ADDR_VAR 0 14
42328: PUSH
42329: LD_INT 36
42331: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42332: LD_VAR 0 1
42336: PPUSH
42337: LD_VAR 0 3
42341: PPUSH
42342: LD_VAR 0 4
42346: PPUSH
42347: CALL_OW 297
42351: PUSH
42352: LD_VAR 0 14
42356: GREATER
42357: IFFALSE 42361
// exit ;
42359: GO 42886
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42361: LD_ADDR_VAR 0 12
42365: PUSH
42366: LD_VAR 0 2
42370: PPUSH
42371: LD_VAR 0 3
42375: PPUSH
42376: LD_VAR 0 4
42380: PPUSH
42381: LD_VAR 0 5
42385: PPUSH
42386: LD_VAR 0 1
42390: PPUSH
42391: CALL_OW 248
42395: PPUSH
42396: LD_INT 0
42398: PPUSH
42399: CALL 42891 0 6
42403: ST_TO_ADDR
// if not hexes then
42404: LD_VAR 0 12
42408: NOT
42409: IFFALSE 42413
// exit ;
42411: GO 42886
// hex := GetHexInfo ( x , y ) ;
42413: LD_ADDR_VAR 0 15
42417: PUSH
42418: LD_VAR 0 3
42422: PPUSH
42423: LD_VAR 0 4
42427: PPUSH
42428: CALL_OW 546
42432: ST_TO_ADDR
// if hex [ 1 ] then
42433: LD_VAR 0 15
42437: PUSH
42438: LD_INT 1
42440: ARRAY
42441: IFFALSE 42445
// exit ;
42443: GO 42886
// height := hex [ 2 ] ;
42445: LD_ADDR_VAR 0 13
42449: PUSH
42450: LD_VAR 0 15
42454: PUSH
42455: LD_INT 2
42457: ARRAY
42458: ST_TO_ADDR
// for i = 1 to hexes do
42459: LD_ADDR_VAR 0 7
42463: PUSH
42464: DOUBLE
42465: LD_INT 1
42467: DEC
42468: ST_TO_ADDR
42469: LD_VAR 0 12
42473: PUSH
42474: FOR_TO
42475: IFFALSE 42805
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42477: LD_VAR 0 12
42481: PUSH
42482: LD_VAR 0 7
42486: ARRAY
42487: PUSH
42488: LD_INT 1
42490: ARRAY
42491: PPUSH
42492: LD_VAR 0 12
42496: PUSH
42497: LD_VAR 0 7
42501: ARRAY
42502: PUSH
42503: LD_INT 2
42505: ARRAY
42506: PPUSH
42507: CALL_OW 488
42511: NOT
42512: PUSH
42513: LD_VAR 0 12
42517: PUSH
42518: LD_VAR 0 7
42522: ARRAY
42523: PUSH
42524: LD_INT 1
42526: ARRAY
42527: PPUSH
42528: LD_VAR 0 12
42532: PUSH
42533: LD_VAR 0 7
42537: ARRAY
42538: PUSH
42539: LD_INT 2
42541: ARRAY
42542: PPUSH
42543: CALL_OW 428
42547: PUSH
42548: LD_INT 0
42550: GREATER
42551: OR
42552: PUSH
42553: LD_VAR 0 12
42557: PUSH
42558: LD_VAR 0 7
42562: ARRAY
42563: PUSH
42564: LD_INT 1
42566: ARRAY
42567: PPUSH
42568: LD_VAR 0 12
42572: PUSH
42573: LD_VAR 0 7
42577: ARRAY
42578: PUSH
42579: LD_INT 2
42581: ARRAY
42582: PPUSH
42583: CALL_OW 351
42587: OR
42588: IFFALSE 42594
// exit ;
42590: POP
42591: POP
42592: GO 42886
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42594: LD_ADDR_VAR 0 8
42598: PUSH
42599: LD_VAR 0 12
42603: PUSH
42604: LD_VAR 0 7
42608: ARRAY
42609: PUSH
42610: LD_INT 1
42612: ARRAY
42613: PPUSH
42614: LD_VAR 0 12
42618: PUSH
42619: LD_VAR 0 7
42623: ARRAY
42624: PUSH
42625: LD_INT 2
42627: ARRAY
42628: PPUSH
42629: CALL_OW 546
42633: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42634: LD_VAR 0 8
42638: PUSH
42639: LD_INT 1
42641: ARRAY
42642: PUSH
42643: LD_VAR 0 8
42647: PUSH
42648: LD_INT 2
42650: ARRAY
42651: PUSH
42652: LD_VAR 0 13
42656: PUSH
42657: LD_INT 2
42659: PLUS
42660: GREATER
42661: OR
42662: PUSH
42663: LD_VAR 0 8
42667: PUSH
42668: LD_INT 2
42670: ARRAY
42671: PUSH
42672: LD_VAR 0 13
42676: PUSH
42677: LD_INT 2
42679: MINUS
42680: LESS
42681: OR
42682: PUSH
42683: LD_VAR 0 8
42687: PUSH
42688: LD_INT 3
42690: ARRAY
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 8
42697: PUSH
42698: LD_INT 9
42700: PUSH
42701: LD_INT 10
42703: PUSH
42704: LD_INT 11
42706: PUSH
42707: LD_INT 12
42709: PUSH
42710: LD_INT 13
42712: PUSH
42713: LD_INT 16
42715: PUSH
42716: LD_INT 17
42718: PUSH
42719: LD_INT 18
42721: PUSH
42722: LD_INT 19
42724: PUSH
42725: LD_INT 20
42727: PUSH
42728: LD_INT 21
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: IN
42746: NOT
42747: OR
42748: PUSH
42749: LD_VAR 0 8
42753: PUSH
42754: LD_INT 5
42756: ARRAY
42757: NOT
42758: OR
42759: PUSH
42760: LD_VAR 0 8
42764: PUSH
42765: LD_INT 6
42767: ARRAY
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: LD_INT 7
42777: PUSH
42778: LD_INT 9
42780: PUSH
42781: LD_INT 10
42783: PUSH
42784: LD_INT 11
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: IN
42795: NOT
42796: OR
42797: IFFALSE 42803
// exit ;
42799: POP
42800: POP
42801: GO 42886
// end ;
42803: GO 42474
42805: POP
42806: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42807: LD_VAR 0 9
42811: PPUSH
42812: LD_VAR 0 3
42816: PPUSH
42817: LD_VAR 0 4
42821: PPUSH
42822: LD_INT 20
42824: PPUSH
42825: CALL 34832 0 4
42829: PUSH
42830: LD_INT 4
42832: ARRAY
42833: IFFALSE 42837
// exit ;
42835: GO 42886
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42837: LD_VAR 0 2
42841: PUSH
42842: LD_INT 29
42844: PUSH
42845: LD_INT 30
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: IN
42852: PUSH
42853: LD_VAR 0 3
42857: PPUSH
42858: LD_VAR 0 4
42862: PPUSH
42863: LD_VAR 0 9
42867: PPUSH
42868: CALL_OW 440
42872: NOT
42873: AND
42874: IFFALSE 42878
// exit ;
42876: GO 42886
// result := true ;
42878: LD_ADDR_VAR 0 6
42882: PUSH
42883: LD_INT 1
42885: ST_TO_ADDR
// end ;
42886: LD_VAR 0 6
42890: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42891: LD_INT 0
42893: PPUSH
42894: PPUSH
42895: PPUSH
42896: PPUSH
42897: PPUSH
42898: PPUSH
42899: PPUSH
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
42907: PPUSH
42908: PPUSH
42909: PPUSH
42910: PPUSH
42911: PPUSH
42912: PPUSH
42913: PPUSH
42914: PPUSH
42915: PPUSH
42916: PPUSH
42917: PPUSH
42918: PPUSH
42919: PPUSH
42920: PPUSH
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
42942: PPUSH
42943: PPUSH
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
// result = [ ] ;
42951: LD_ADDR_VAR 0 7
42955: PUSH
42956: EMPTY
42957: ST_TO_ADDR
// temp_list = [ ] ;
42958: LD_ADDR_VAR 0 9
42962: PUSH
42963: EMPTY
42964: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42965: LD_VAR 0 4
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: LD_INT 4
42984: PUSH
42985: LD_INT 5
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: IN
42996: NOT
42997: PUSH
42998: LD_VAR 0 1
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: IN
43013: PUSH
43014: LD_VAR 0 5
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: LD_INT 2
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: IN
43033: NOT
43034: AND
43035: OR
43036: IFFALSE 43040
// exit ;
43038: GO 61431
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43040: LD_VAR 0 1
43044: PUSH
43045: LD_INT 6
43047: PUSH
43048: LD_INT 7
43050: PUSH
43051: LD_INT 8
43053: PUSH
43054: LD_INT 13
43056: PUSH
43057: LD_INT 12
43059: PUSH
43060: LD_INT 15
43062: PUSH
43063: LD_INT 11
43065: PUSH
43066: LD_INT 14
43068: PUSH
43069: LD_INT 10
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: IN
43083: IFFALSE 43093
// btype = b_lab ;
43085: LD_ADDR_VAR 0 1
43089: PUSH
43090: LD_INT 6
43092: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43093: LD_VAR 0 6
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: IN
43112: NOT
43113: PUSH
43114: LD_VAR 0 1
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: LD_INT 3
43130: PUSH
43131: LD_INT 6
43133: PUSH
43134: LD_INT 36
43136: PUSH
43137: LD_INT 4
43139: PUSH
43140: LD_INT 5
43142: PUSH
43143: LD_INT 31
43145: PUSH
43146: LD_INT 32
43148: PUSH
43149: LD_INT 33
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: IN
43165: NOT
43166: PUSH
43167: LD_VAR 0 6
43171: PUSH
43172: LD_INT 1
43174: EQUAL
43175: AND
43176: OR
43177: PUSH
43178: LD_VAR 0 1
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: LD_INT 3
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: IN
43193: NOT
43194: PUSH
43195: LD_VAR 0 6
43199: PUSH
43200: LD_INT 2
43202: EQUAL
43203: AND
43204: OR
43205: IFFALSE 43215
// mode = 0 ;
43207: LD_ADDR_VAR 0 6
43211: PUSH
43212: LD_INT 0
43214: ST_TO_ADDR
// case mode of 0 :
43215: LD_VAR 0 6
43219: PUSH
43220: LD_INT 0
43222: DOUBLE
43223: EQUAL
43224: IFTRUE 43228
43226: GO 54681
43228: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43229: LD_ADDR_VAR 0 11
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 3
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43422: LD_ADDR_VAR 0 12
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 3
43579: NEG
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 3
43590: NEG
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43618: LD_ADDR_VAR 0 13
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 3
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 3
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 3
43789: NEG
43790: PUSH
43791: LD_INT 3
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43817: LD_ADDR_VAR 0 14
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: LD_INT 3
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 3
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 2
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44013: LD_ADDR_VAR 0 15
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 3
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 3
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44206: LD_ADDR_VAR 0 16
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: NEG
44342: PUSH
44343: LD_INT 2
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 3
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: LD_INT 3
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44399: LD_ADDR_VAR 0 17
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 2
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44629: LD_ADDR_VAR 0 18
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: NEG
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44859: LD_ADDR_VAR 0 19
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 2
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 2
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45089: LD_ADDR_VAR 0 20
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 2
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45319: LD_ADDR_VAR 0 21
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45549: LD_ADDR_VAR 0 22
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45779: LD_ADDR_VAR 0 23
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: LD_INT 3
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 3
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46059: LD_ADDR_VAR 0 24
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 3
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46335: LD_ADDR_VAR 0 25
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 3
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46609: LD_ADDR_VAR 0 26
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 2
46808: NEG
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46885: LD_ADDR_VAR 0 27
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: NEG
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47165: LD_ADDR_VAR 0 28
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: LD_INT 3
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: NEG
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 3
47412: NEG
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47447: LD_ADDR_VAR 0 29
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 3
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 3
47691: NEG
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47726: LD_ADDR_VAR 0 30
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: LD_INT 3
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 3
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48004: LD_ADDR_VAR 0 31
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48282: LD_ADDR_VAR 0 32
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 3
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 3
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: LD_INT 3
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48560: LD_ADDR_VAR 0 33
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: NEG
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: LD_INT 3
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 3
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 3
48804: NEG
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48839: LD_ADDR_VAR 0 34
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 2
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 3
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: LD_INT 3
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49119: LD_ADDR_VAR 0 35
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49231: LD_ADDR_VAR 0 36
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49343: LD_ADDR_VAR 0 37
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49455: LD_ADDR_VAR 0 38
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49567: LD_ADDR_VAR 0 39
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49679: LD_ADDR_VAR 0 40
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49791: LD_ADDR_VAR 0 41
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: LD_INT 3
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 3
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: LD_INT 3
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 3
50065: NEG
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 3
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 3
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 3
50100: NEG
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50141: LD_ADDR_VAR 0 42
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 3
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 3
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 3
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: LD_INT 3
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: LD_INT 3
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: LD_INT 3
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 3
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 3
50450: NEG
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50491: LD_ADDR_VAR 0 43
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 3
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50839: LD_ADDR_VAR 0 44
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 3
51113: NEG
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 3
51124: NEG
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 3
51136: NEG
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: NEG
51149: PUSH
51150: LD_INT 3
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51189: LD_ADDR_VAR 0 45
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 3
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 3
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 3
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 3
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 3
51498: NEG
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51539: LD_ADDR_VAR 0 46
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 2
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 3
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 3
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 3
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 3
51835: NEG
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 3
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51887: LD_ADDR_VAR 0 47
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: NEG
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52038: LD_ADDR_VAR 0 48
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52185: LD_ADDR_VAR 0 49
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52329: LD_ADDR_VAR 0 50
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52473: LD_ADDR_VAR 0 51
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52620: LD_ADDR_VAR 0 52
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: LD_INT 2
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52771: LD_ADDR_VAR 0 53
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53001: LD_ADDR_VAR 0 54
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 2
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53231: LD_ADDR_VAR 0 55
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53461: LD_ADDR_VAR 0 56
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53691: LD_ADDR_VAR 0 57
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53921: LD_ADDR_VAR 0 58
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54151: LD_ADDR_VAR 0 59
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54239: LD_ADDR_VAR 0 60
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54327: LD_ADDR_VAR 0 61
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54415: LD_ADDR_VAR 0 62
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54503: LD_ADDR_VAR 0 63
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54591: LD_ADDR_VAR 0 64
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: ST_TO_ADDR
// end ; 1 :
54679: GO 60576
54681: LD_INT 1
54683: DOUBLE
54684: EQUAL
54685: IFTRUE 54689
54687: GO 57312
54689: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54690: LD_ADDR_VAR 0 11
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: LD_INT 3
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 3
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: LIST
54733: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54734: LD_ADDR_VAR 0 12
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: LIST
54774: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54775: LD_ADDR_VAR 0 13
54779: PUSH
54780: LD_INT 3
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54815: LD_ADDR_VAR 0 14
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 3
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: LIST
54855: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54856: LD_ADDR_VAR 0 15
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 3
54874: NEG
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: LIST
54899: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54900: LD_ADDR_VAR 0 16
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: LD_INT 3
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54946: LD_ADDR_VAR 0 17
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54990: LD_ADDR_VAR 0 18
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55031: LD_ADDR_VAR 0 19
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 3
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: LD_INT 3
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: LIST
55070: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55071: LD_ADDR_VAR 0 20
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 3
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 3
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: LIST
55111: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55112: LD_ADDR_VAR 0 21
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 3
55130: NEG
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 3
55141: NEG
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: LIST
55155: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55156: LD_ADDR_VAR 0 22
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 3
55175: NEG
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 3
55187: NEG
55188: PUSH
55189: LD_INT 3
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55202: LD_ADDR_VAR 0 23
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 3
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 4
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55246: LD_ADDR_VAR 0 24
55250: PUSH
55251: LD_INT 3
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 4
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55287: LD_ADDR_VAR 0 25
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 4
55304: PUSH
55305: LD_INT 3
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 3
55314: PUSH
55315: LD_INT 4
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55327: LD_ADDR_VAR 0 26
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 3
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 4
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55368: LD_ADDR_VAR 0 27
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 3
55386: NEG
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 4
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: LIST
55411: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55412: LD_ADDR_VAR 0 28
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: LD_INT 3
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 3
55431: NEG
55432: PUSH
55433: LD_INT 4
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 4
55443: NEG
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55458: LD_ADDR_VAR 0 29
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 3
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 3
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 4
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 4
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 3
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 5
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: LD_INT 5
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: LD_INT 4
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 6
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 6
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 5
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55613: LD_ADDR_VAR 0 30
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 4
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 4
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 4
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 5
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 5
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 5
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 6
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 6
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55756: LD_ADDR_VAR 0 31
55760: PUSH
55761: LD_INT 3
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: PUSH
55774: LD_INT 3
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 4
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: LD_INT 4
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 3
55813: PUSH
55814: LD_INT 4
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 5
55823: PUSH
55824: LD_INT 4
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 5
55833: PUSH
55834: LD_INT 5
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 4
55843: PUSH
55844: LD_INT 5
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 6
55853: PUSH
55854: LD_INT 5
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 6
55863: PUSH
55864: LD_INT 6
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 5
55873: PUSH
55874: LD_INT 6
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55895: LD_ADDR_VAR 0 32
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 4
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 4
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 3
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 5
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: LD_INT 5
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: LD_INT 4
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 6
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 6
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 5
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56038: LD_ADDR_VAR 0 33
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 3
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 4
56090: NEG
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 4
56101: NEG
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 4
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 5
56124: NEG
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 5
56135: NEG
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 5
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 6
56158: NEG
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 6
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56193: LD_ADDR_VAR 0 34
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: LD_INT 3
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 3
56224: NEG
56225: PUSH
56226: LD_INT 3
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 3
56236: NEG
56237: PUSH
56238: LD_INT 4
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 4
56248: NEG
56249: PUSH
56250: LD_INT 3
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 4
56260: NEG
56261: PUSH
56262: LD_INT 4
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 4
56272: NEG
56273: PUSH
56274: LD_INT 5
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 5
56284: NEG
56285: PUSH
56286: LD_INT 4
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 5
56296: NEG
56297: PUSH
56298: LD_INT 5
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 5
56308: NEG
56309: PUSH
56310: LD_INT 6
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 6
56320: NEG
56321: PUSH
56322: LD_INT 5
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 6
56332: NEG
56333: PUSH
56334: LD_INT 6
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56356: LD_ADDR_VAR 0 41
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 3
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56400: LD_ADDR_VAR 0 42
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 3
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56441: LD_ADDR_VAR 0 43
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 3
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56481: LD_ADDR_VAR 0 44
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56522: LD_ADDR_VAR 0 45
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 3
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56566: LD_ADDR_VAR 0 46
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 3
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56612: LD_ADDR_VAR 0 47
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: LD_INT 3
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 3
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56645: LD_ADDR_VAR 0 48
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56676: LD_ADDR_VAR 0 49
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56705: LD_ADDR_VAR 0 50
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56734: LD_ADDR_VAR 0 51
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56765: LD_ADDR_VAR 0 52
56769: PUSH
56770: LD_INT 3
56772: NEG
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56798: LD_ADDR_VAR 0 53
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 3
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 3
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56842: LD_ADDR_VAR 0 54
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: LIST
56882: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56883: LD_ADDR_VAR 0 55
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: LIST
56922: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56923: LD_ADDR_VAR 0 56
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: LD_INT 3
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56964: LD_ADDR_VAR 0 57
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 3
56993: NEG
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: LIST
57007: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57008: LD_ADDR_VAR 0 58
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57054: LD_ADDR_VAR 0 59
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: LIST
57097: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57098: LD_ADDR_VAR 0 60
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57139: LD_ADDR_VAR 0 61
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57179: LD_ADDR_VAR 0 62
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57220: LD_ADDR_VAR 0 63
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: LIST
57263: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57264: LD_ADDR_VAR 0 64
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: NEG
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: ST_TO_ADDR
// end ; 2 :
57310: GO 60576
57312: LD_INT 2
57314: DOUBLE
57315: EQUAL
57316: IFTRUE 57320
57318: GO 60575
57320: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57321: LD_ADDR_VAR 0 29
57325: PUSH
57326: LD_INT 4
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 4
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 5
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 5
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 4
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 5
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 4
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 4
57451: PUSH
57452: LD_INT 4
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: LD_INT 4
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 4
57491: PUSH
57492: LD_INT 2
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 4
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 4
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 3
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 4
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 5
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: LD_INT 5
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 4
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: LD_INT 3
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: LD_INT 5
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 2
57593: NEG
57594: PUSH
57595: LD_INT 3
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 3
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: NEG
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 4
57660: NEG
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 4
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 4
57683: NEG
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 4
57706: NEG
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 4
57718: NEG
57719: PUSH
57720: LD_INT 5
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: NEG
57731: PUSH
57732: LD_INT 4
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: NEG
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 4
57754: NEG
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 5
57766: NEG
57767: PUSH
57768: LD_INT 4
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 5
57778: NEG
57779: PUSH
57780: LD_INT 5
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 3
57790: NEG
57791: PUSH
57792: LD_INT 5
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 5
57802: NEG
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57859: LD_ADDR_VAR 0 30
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: LD_INT 4
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 4
57876: PUSH
57877: LD_INT 3
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 5
57886: PUSH
57887: LD_INT 4
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 5
57896: PUSH
57897: LD_INT 5
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 4
57906: PUSH
57907: LD_INT 5
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 3
57926: PUSH
57927: LD_INT 3
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 5
57936: PUSH
57937: LD_INT 3
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 3
57946: PUSH
57947: LD_INT 5
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 3
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 4
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 4
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 4
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 4
58049: NEG
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 4
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 3
58072: NEG
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 4
58094: NEG
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 5
58105: NEG
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 5
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 5
58128: NEG
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: LD_INT 4
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 4
58211: NEG
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 4
58223: NEG
58224: PUSH
58225: LD_INT 4
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: LD_INT 4
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 4
58247: NEG
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 4
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 5
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 4
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: LD_INT 3
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 3
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 4
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 5
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: LD_INT 3
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: LD_INT 5
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58406: LD_ADDR_VAR 0 31
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 4
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 3
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: LD_INT 4
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 5
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: LD_INT 4
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: LD_INT 3
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 5
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 3
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 3
58551: NEG
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 4
58562: NEG
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 4
58573: NEG
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 4
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 4
58608: NEG
58609: PUSH
58610: LD_INT 4
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 4
58620: NEG
58621: PUSH
58622: LD_INT 5
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: LD_INT 4
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 3
58644: NEG
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 4
58656: NEG
58657: PUSH
58658: LD_INT 3
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 5
58668: NEG
58669: PUSH
58670: LD_INT 4
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 5
58680: NEG
58681: PUSH
58682: LD_INT 5
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: LD_INT 5
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 5
58704: NEG
58705: PUSH
58706: LD_INT 3
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 3
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 4
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 3
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 4
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 4
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 4
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 4
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 5
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 5
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 4
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 3
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 5
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58956: LD_ADDR_VAR 0 32
58960: PUSH
58961: LD_INT 4
58963: NEG
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 4
58974: NEG
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 3
58986: NEG
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 4
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 5
59019: NEG
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 5
59030: NEG
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 5
59042: NEG
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: LD_INT 4
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 4
59125: NEG
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 4
59137: NEG
59138: PUSH
59139: LD_INT 4
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: LD_INT 4
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 4
59161: NEG
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 4
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 5
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: PUSH
59196: LD_INT 4
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 3
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: LD_INT 4
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: LD_INT 5
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: LD_INT 5
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 4
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 4
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 3
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 4
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 4
59368: PUSH
59369: LD_INT 4
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 4
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 5
59388: PUSH
59389: LD_INT 4
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 5
59398: PUSH
59399: LD_INT 5
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 4
59408: PUSH
59409: LD_INT 5
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 3
59418: PUSH
59419: LD_INT 4
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: PUSH
59429: LD_INT 3
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 5
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 3
59448: PUSH
59449: LD_INT 5
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59503: LD_ADDR_VAR 0 33
59507: PUSH
59508: LD_INT 4
59510: NEG
59511: PUSH
59512: LD_INT 4
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 4
59522: NEG
59523: PUSH
59524: LD_INT 5
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: NEG
59535: PUSH
59536: LD_INT 4
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: NEG
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 4
59558: NEG
59559: PUSH
59560: LD_INT 3
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 5
59570: NEG
59571: PUSH
59572: LD_INT 4
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 5
59582: NEG
59583: PUSH
59584: LD_INT 5
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: LD_INT 5
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 5
59606: NEG
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: LD_INT 4
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 3
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 2
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 3
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: LD_INT 4
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 4
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 4
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 4
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 5
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 5
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 4
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 3
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 3
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 5
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 4
59833: PUSH
59834: LD_INT 3
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 4
59843: PUSH
59844: LD_INT 4
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 3
59853: PUSH
59854: LD_INT 4
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: PUSH
59864: LD_INT 3
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 2
59873: PUSH
59874: LD_INT 2
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 4
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: LD_INT 4
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 4
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 3
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 4
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 5
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 5
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: LD_INT 4
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 3
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 5
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60041: LD_ADDR_VAR 0 34
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 4
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: LD_INT 5
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 4
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 3
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: LD_INT 4
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: LD_INT 5
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: LD_INT 3
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: LD_INT 5
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 3
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 4
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 4
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 4
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 4
60243: PUSH
60244: LD_INT 4
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 4
60253: PUSH
60254: LD_INT 3
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 5
60263: PUSH
60264: LD_INT 4
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 5
60273: PUSH
60274: LD_INT 5
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 4
60283: PUSH
60284: LD_INT 5
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 3
60293: PUSH
60294: LD_INT 4
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 5
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: LD_INT 5
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 3
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: LD_INT 4
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: LD_INT 4
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: LD_INT 3
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: LD_INT 2
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: LD_INT 4
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 4
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 4
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 3
60449: NEG
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 3
60460: NEG
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 4
60471: NEG
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 5
60482: NEG
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 5
60493: NEG
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 5
60505: NEG
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: NEG
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: ST_TO_ADDR
// end ; end ;
60573: GO 60576
60575: POP
// case btype of b_depot , b_warehouse :
60576: LD_VAR 0 1
60580: PUSH
60581: LD_INT 0
60583: DOUBLE
60584: EQUAL
60585: IFTRUE 60595
60587: LD_INT 1
60589: DOUBLE
60590: EQUAL
60591: IFTRUE 60595
60593: GO 60796
60595: POP
// case nation of nation_american :
60596: LD_VAR 0 5
60600: PUSH
60601: LD_INT 1
60603: DOUBLE
60604: EQUAL
60605: IFTRUE 60609
60607: GO 60665
60609: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60610: LD_ADDR_VAR 0 9
60614: PUSH
60615: LD_VAR 0 11
60619: PUSH
60620: LD_VAR 0 12
60624: PUSH
60625: LD_VAR 0 13
60629: PUSH
60630: LD_VAR 0 14
60634: PUSH
60635: LD_VAR 0 15
60639: PUSH
60640: LD_VAR 0 16
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: PUSH
60653: LD_VAR 0 4
60657: PUSH
60658: LD_INT 1
60660: PLUS
60661: ARRAY
60662: ST_TO_ADDR
60663: GO 60794
60665: LD_INT 2
60667: DOUBLE
60668: EQUAL
60669: IFTRUE 60673
60671: GO 60729
60673: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60674: LD_ADDR_VAR 0 9
60678: PUSH
60679: LD_VAR 0 17
60683: PUSH
60684: LD_VAR 0 18
60688: PUSH
60689: LD_VAR 0 19
60693: PUSH
60694: LD_VAR 0 20
60698: PUSH
60699: LD_VAR 0 21
60703: PUSH
60704: LD_VAR 0 22
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: PUSH
60717: LD_VAR 0 4
60721: PUSH
60722: LD_INT 1
60724: PLUS
60725: ARRAY
60726: ST_TO_ADDR
60727: GO 60794
60729: LD_INT 3
60731: DOUBLE
60732: EQUAL
60733: IFTRUE 60737
60735: GO 60793
60737: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60738: LD_ADDR_VAR 0 9
60742: PUSH
60743: LD_VAR 0 23
60747: PUSH
60748: LD_VAR 0 24
60752: PUSH
60753: LD_VAR 0 25
60757: PUSH
60758: LD_VAR 0 26
60762: PUSH
60763: LD_VAR 0 27
60767: PUSH
60768: LD_VAR 0 28
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: PUSH
60781: LD_VAR 0 4
60785: PUSH
60786: LD_INT 1
60788: PLUS
60789: ARRAY
60790: ST_TO_ADDR
60791: GO 60794
60793: POP
60794: GO 61349
60796: LD_INT 2
60798: DOUBLE
60799: EQUAL
60800: IFTRUE 60810
60802: LD_INT 3
60804: DOUBLE
60805: EQUAL
60806: IFTRUE 60810
60808: GO 60866
60810: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60811: LD_ADDR_VAR 0 9
60815: PUSH
60816: LD_VAR 0 29
60820: PUSH
60821: LD_VAR 0 30
60825: PUSH
60826: LD_VAR 0 31
60830: PUSH
60831: LD_VAR 0 32
60835: PUSH
60836: LD_VAR 0 33
60840: PUSH
60841: LD_VAR 0 34
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: PUSH
60854: LD_VAR 0 4
60858: PUSH
60859: LD_INT 1
60861: PLUS
60862: ARRAY
60863: ST_TO_ADDR
60864: GO 61349
60866: LD_INT 16
60868: DOUBLE
60869: EQUAL
60870: IFTRUE 60928
60872: LD_INT 17
60874: DOUBLE
60875: EQUAL
60876: IFTRUE 60928
60878: LD_INT 18
60880: DOUBLE
60881: EQUAL
60882: IFTRUE 60928
60884: LD_INT 19
60886: DOUBLE
60887: EQUAL
60888: IFTRUE 60928
60890: LD_INT 22
60892: DOUBLE
60893: EQUAL
60894: IFTRUE 60928
60896: LD_INT 20
60898: DOUBLE
60899: EQUAL
60900: IFTRUE 60928
60902: LD_INT 21
60904: DOUBLE
60905: EQUAL
60906: IFTRUE 60928
60908: LD_INT 23
60910: DOUBLE
60911: EQUAL
60912: IFTRUE 60928
60914: LD_INT 24
60916: DOUBLE
60917: EQUAL
60918: IFTRUE 60928
60920: LD_INT 25
60922: DOUBLE
60923: EQUAL
60924: IFTRUE 60928
60926: GO 60984
60928: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60929: LD_ADDR_VAR 0 9
60933: PUSH
60934: LD_VAR 0 35
60938: PUSH
60939: LD_VAR 0 36
60943: PUSH
60944: LD_VAR 0 37
60948: PUSH
60949: LD_VAR 0 38
60953: PUSH
60954: LD_VAR 0 39
60958: PUSH
60959: LD_VAR 0 40
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: PUSH
60972: LD_VAR 0 4
60976: PUSH
60977: LD_INT 1
60979: PLUS
60980: ARRAY
60981: ST_TO_ADDR
60982: GO 61349
60984: LD_INT 6
60986: DOUBLE
60987: EQUAL
60988: IFTRUE 61040
60990: LD_INT 7
60992: DOUBLE
60993: EQUAL
60994: IFTRUE 61040
60996: LD_INT 8
60998: DOUBLE
60999: EQUAL
61000: IFTRUE 61040
61002: LD_INT 13
61004: DOUBLE
61005: EQUAL
61006: IFTRUE 61040
61008: LD_INT 12
61010: DOUBLE
61011: EQUAL
61012: IFTRUE 61040
61014: LD_INT 15
61016: DOUBLE
61017: EQUAL
61018: IFTRUE 61040
61020: LD_INT 11
61022: DOUBLE
61023: EQUAL
61024: IFTRUE 61040
61026: LD_INT 14
61028: DOUBLE
61029: EQUAL
61030: IFTRUE 61040
61032: LD_INT 10
61034: DOUBLE
61035: EQUAL
61036: IFTRUE 61040
61038: GO 61096
61040: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61041: LD_ADDR_VAR 0 9
61045: PUSH
61046: LD_VAR 0 41
61050: PUSH
61051: LD_VAR 0 42
61055: PUSH
61056: LD_VAR 0 43
61060: PUSH
61061: LD_VAR 0 44
61065: PUSH
61066: LD_VAR 0 45
61070: PUSH
61071: LD_VAR 0 46
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: PUSH
61084: LD_VAR 0 4
61088: PUSH
61089: LD_INT 1
61091: PLUS
61092: ARRAY
61093: ST_TO_ADDR
61094: GO 61349
61096: LD_INT 36
61098: DOUBLE
61099: EQUAL
61100: IFTRUE 61104
61102: GO 61160
61104: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61105: LD_ADDR_VAR 0 9
61109: PUSH
61110: LD_VAR 0 47
61114: PUSH
61115: LD_VAR 0 48
61119: PUSH
61120: LD_VAR 0 49
61124: PUSH
61125: LD_VAR 0 50
61129: PUSH
61130: LD_VAR 0 51
61134: PUSH
61135: LD_VAR 0 52
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: PUSH
61148: LD_VAR 0 4
61152: PUSH
61153: LD_INT 1
61155: PLUS
61156: ARRAY
61157: ST_TO_ADDR
61158: GO 61349
61160: LD_INT 4
61162: DOUBLE
61163: EQUAL
61164: IFTRUE 61186
61166: LD_INT 5
61168: DOUBLE
61169: EQUAL
61170: IFTRUE 61186
61172: LD_INT 34
61174: DOUBLE
61175: EQUAL
61176: IFTRUE 61186
61178: LD_INT 37
61180: DOUBLE
61181: EQUAL
61182: IFTRUE 61186
61184: GO 61242
61186: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61187: LD_ADDR_VAR 0 9
61191: PUSH
61192: LD_VAR 0 53
61196: PUSH
61197: LD_VAR 0 54
61201: PUSH
61202: LD_VAR 0 55
61206: PUSH
61207: LD_VAR 0 56
61211: PUSH
61212: LD_VAR 0 57
61216: PUSH
61217: LD_VAR 0 58
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: PUSH
61230: LD_VAR 0 4
61234: PUSH
61235: LD_INT 1
61237: PLUS
61238: ARRAY
61239: ST_TO_ADDR
61240: GO 61349
61242: LD_INT 31
61244: DOUBLE
61245: EQUAL
61246: IFTRUE 61292
61248: LD_INT 32
61250: DOUBLE
61251: EQUAL
61252: IFTRUE 61292
61254: LD_INT 33
61256: DOUBLE
61257: EQUAL
61258: IFTRUE 61292
61260: LD_INT 27
61262: DOUBLE
61263: EQUAL
61264: IFTRUE 61292
61266: LD_INT 26
61268: DOUBLE
61269: EQUAL
61270: IFTRUE 61292
61272: LD_INT 28
61274: DOUBLE
61275: EQUAL
61276: IFTRUE 61292
61278: LD_INT 29
61280: DOUBLE
61281: EQUAL
61282: IFTRUE 61292
61284: LD_INT 30
61286: DOUBLE
61287: EQUAL
61288: IFTRUE 61292
61290: GO 61348
61292: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61293: LD_ADDR_VAR 0 9
61297: PUSH
61298: LD_VAR 0 59
61302: PUSH
61303: LD_VAR 0 60
61307: PUSH
61308: LD_VAR 0 61
61312: PUSH
61313: LD_VAR 0 62
61317: PUSH
61318: LD_VAR 0 63
61322: PUSH
61323: LD_VAR 0 64
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: PUSH
61336: LD_VAR 0 4
61340: PUSH
61341: LD_INT 1
61343: PLUS
61344: ARRAY
61345: ST_TO_ADDR
61346: GO 61349
61348: POP
// temp_list2 = [ ] ;
61349: LD_ADDR_VAR 0 10
61353: PUSH
61354: EMPTY
61355: ST_TO_ADDR
// for i in temp_list do
61356: LD_ADDR_VAR 0 8
61360: PUSH
61361: LD_VAR 0 9
61365: PUSH
61366: FOR_IN
61367: IFFALSE 61419
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61369: LD_ADDR_VAR 0 10
61373: PUSH
61374: LD_VAR 0 10
61378: PUSH
61379: LD_VAR 0 8
61383: PUSH
61384: LD_INT 1
61386: ARRAY
61387: PUSH
61388: LD_VAR 0 2
61392: PLUS
61393: PUSH
61394: LD_VAR 0 8
61398: PUSH
61399: LD_INT 2
61401: ARRAY
61402: PUSH
61403: LD_VAR 0 3
61407: PLUS
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: ADD
61416: ST_TO_ADDR
61417: GO 61366
61419: POP
61420: POP
// result = temp_list2 ;
61421: LD_ADDR_VAR 0 7
61425: PUSH
61426: LD_VAR 0 10
61430: ST_TO_ADDR
// end ;
61431: LD_VAR 0 7
61435: RET
// export function EnemyInRange ( unit , dist ) ; begin
61436: LD_INT 0
61438: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61439: LD_ADDR_VAR 0 3
61443: PUSH
61444: LD_VAR 0 1
61448: PPUSH
61449: CALL_OW 255
61453: PPUSH
61454: LD_VAR 0 1
61458: PPUSH
61459: CALL_OW 250
61463: PPUSH
61464: LD_VAR 0 1
61468: PPUSH
61469: CALL_OW 251
61473: PPUSH
61474: LD_VAR 0 2
61478: PPUSH
61479: CALL 34832 0 4
61483: PUSH
61484: LD_INT 4
61486: ARRAY
61487: ST_TO_ADDR
// end ;
61488: LD_VAR 0 3
61492: RET
// export function PlayerSeeMe ( unit ) ; begin
61493: LD_INT 0
61495: PPUSH
// result := See ( your_side , unit ) ;
61496: LD_ADDR_VAR 0 2
61500: PUSH
61501: LD_OWVAR 2
61505: PPUSH
61506: LD_VAR 0 1
61510: PPUSH
61511: CALL_OW 292
61515: ST_TO_ADDR
// end ;
61516: LD_VAR 0 2
61520: RET
// export function ReverseDir ( unit ) ; begin
61521: LD_INT 0
61523: PPUSH
// if not unit then
61524: LD_VAR 0 1
61528: NOT
61529: IFFALSE 61533
// exit ;
61531: GO 61556
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61533: LD_ADDR_VAR 0 2
61537: PUSH
61538: LD_VAR 0 1
61542: PPUSH
61543: CALL_OW 254
61547: PUSH
61548: LD_INT 3
61550: PLUS
61551: PUSH
61552: LD_INT 6
61554: MOD
61555: ST_TO_ADDR
// end ;
61556: LD_VAR 0 2
61560: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61561: LD_INT 0
61563: PPUSH
61564: PPUSH
61565: PPUSH
61566: PPUSH
61567: PPUSH
// if not hexes then
61568: LD_VAR 0 2
61572: NOT
61573: IFFALSE 61577
// exit ;
61575: GO 61725
// dist := 9999 ;
61577: LD_ADDR_VAR 0 5
61581: PUSH
61582: LD_INT 9999
61584: ST_TO_ADDR
// for i = 1 to hexes do
61585: LD_ADDR_VAR 0 4
61589: PUSH
61590: DOUBLE
61591: LD_INT 1
61593: DEC
61594: ST_TO_ADDR
61595: LD_VAR 0 2
61599: PUSH
61600: FOR_TO
61601: IFFALSE 61713
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61603: LD_VAR 0 1
61607: PPUSH
61608: LD_VAR 0 2
61612: PUSH
61613: LD_VAR 0 4
61617: ARRAY
61618: PUSH
61619: LD_INT 1
61621: ARRAY
61622: PPUSH
61623: LD_VAR 0 2
61627: PUSH
61628: LD_VAR 0 4
61632: ARRAY
61633: PUSH
61634: LD_INT 2
61636: ARRAY
61637: PPUSH
61638: CALL_OW 297
61642: PUSH
61643: LD_VAR 0 5
61647: LESS
61648: IFFALSE 61711
// begin hex := hexes [ i ] ;
61650: LD_ADDR_VAR 0 7
61654: PUSH
61655: LD_VAR 0 2
61659: PUSH
61660: LD_VAR 0 4
61664: ARRAY
61665: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61666: LD_ADDR_VAR 0 5
61670: PUSH
61671: LD_VAR 0 1
61675: PPUSH
61676: LD_VAR 0 2
61680: PUSH
61681: LD_VAR 0 4
61685: ARRAY
61686: PUSH
61687: LD_INT 1
61689: ARRAY
61690: PPUSH
61691: LD_VAR 0 2
61695: PUSH
61696: LD_VAR 0 4
61700: ARRAY
61701: PUSH
61702: LD_INT 2
61704: ARRAY
61705: PPUSH
61706: CALL_OW 297
61710: ST_TO_ADDR
// end ; end ;
61711: GO 61600
61713: POP
61714: POP
// result := hex ;
61715: LD_ADDR_VAR 0 3
61719: PUSH
61720: LD_VAR 0 7
61724: ST_TO_ADDR
// end ;
61725: LD_VAR 0 3
61729: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61730: LD_INT 0
61732: PPUSH
61733: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61734: LD_VAR 0 1
61738: NOT
61739: PUSH
61740: LD_VAR 0 1
61744: PUSH
61745: LD_INT 21
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 23
61757: PUSH
61758: LD_INT 2
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PPUSH
61769: CALL_OW 69
61773: IN
61774: NOT
61775: OR
61776: IFFALSE 61780
// exit ;
61778: GO 61827
// for i = 1 to 3 do
61780: LD_ADDR_VAR 0 3
61784: PUSH
61785: DOUBLE
61786: LD_INT 1
61788: DEC
61789: ST_TO_ADDR
61790: LD_INT 3
61792: PUSH
61793: FOR_TO
61794: IFFALSE 61825
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61796: LD_VAR 0 1
61800: PPUSH
61801: CALL_OW 250
61805: PPUSH
61806: LD_VAR 0 1
61810: PPUSH
61811: CALL_OW 251
61815: PPUSH
61816: LD_INT 1
61818: PPUSH
61819: CALL_OW 453
61823: GO 61793
61825: POP
61826: POP
// end ;
61827: LD_VAR 0 2
61831: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61832: LD_INT 0
61834: PPUSH
61835: PPUSH
61836: PPUSH
61837: PPUSH
61838: PPUSH
61839: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61840: LD_VAR 0 1
61844: NOT
61845: PUSH
61846: LD_VAR 0 2
61850: NOT
61851: OR
61852: PUSH
61853: LD_VAR 0 1
61857: PPUSH
61858: CALL_OW 314
61862: OR
61863: IFFALSE 61867
// exit ;
61865: GO 62308
// x := GetX ( enemy_unit ) ;
61867: LD_ADDR_VAR 0 7
61871: PUSH
61872: LD_VAR 0 2
61876: PPUSH
61877: CALL_OW 250
61881: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61882: LD_ADDR_VAR 0 8
61886: PUSH
61887: LD_VAR 0 2
61891: PPUSH
61892: CALL_OW 251
61896: ST_TO_ADDR
// if not x or not y then
61897: LD_VAR 0 7
61901: NOT
61902: PUSH
61903: LD_VAR 0 8
61907: NOT
61908: OR
61909: IFFALSE 61913
// exit ;
61911: GO 62308
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61913: LD_ADDR_VAR 0 6
61917: PUSH
61918: LD_VAR 0 7
61922: PPUSH
61923: LD_INT 0
61925: PPUSH
61926: LD_INT 4
61928: PPUSH
61929: CALL_OW 272
61933: PUSH
61934: LD_VAR 0 8
61938: PPUSH
61939: LD_INT 0
61941: PPUSH
61942: LD_INT 4
61944: PPUSH
61945: CALL_OW 273
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_VAR 0 7
61958: PPUSH
61959: LD_INT 1
61961: PPUSH
61962: LD_INT 4
61964: PPUSH
61965: CALL_OW 272
61969: PUSH
61970: LD_VAR 0 8
61974: PPUSH
61975: LD_INT 1
61977: PPUSH
61978: LD_INT 4
61980: PPUSH
61981: CALL_OW 273
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_VAR 0 7
61994: PPUSH
61995: LD_INT 2
61997: PPUSH
61998: LD_INT 4
62000: PPUSH
62001: CALL_OW 272
62005: PUSH
62006: LD_VAR 0 8
62010: PPUSH
62011: LD_INT 2
62013: PPUSH
62014: LD_INT 4
62016: PPUSH
62017: CALL_OW 273
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_VAR 0 7
62030: PPUSH
62031: LD_INT 3
62033: PPUSH
62034: LD_INT 4
62036: PPUSH
62037: CALL_OW 272
62041: PUSH
62042: LD_VAR 0 8
62046: PPUSH
62047: LD_INT 3
62049: PPUSH
62050: LD_INT 4
62052: PPUSH
62053: CALL_OW 273
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_VAR 0 7
62066: PPUSH
62067: LD_INT 4
62069: PPUSH
62070: LD_INT 4
62072: PPUSH
62073: CALL_OW 272
62077: PUSH
62078: LD_VAR 0 8
62082: PPUSH
62083: LD_INT 4
62085: PPUSH
62086: LD_INT 4
62088: PPUSH
62089: CALL_OW 273
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_VAR 0 7
62102: PPUSH
62103: LD_INT 5
62105: PPUSH
62106: LD_INT 4
62108: PPUSH
62109: CALL_OW 272
62113: PUSH
62114: LD_VAR 0 8
62118: PPUSH
62119: LD_INT 5
62121: PPUSH
62122: LD_INT 4
62124: PPUSH
62125: CALL_OW 273
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: ST_TO_ADDR
// for i = tmp downto 1 do
62142: LD_ADDR_VAR 0 4
62146: PUSH
62147: DOUBLE
62148: LD_VAR 0 6
62152: INC
62153: ST_TO_ADDR
62154: LD_INT 1
62156: PUSH
62157: FOR_DOWNTO
62158: IFFALSE 62259
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62160: LD_VAR 0 6
62164: PUSH
62165: LD_VAR 0 4
62169: ARRAY
62170: PUSH
62171: LD_INT 1
62173: ARRAY
62174: PPUSH
62175: LD_VAR 0 6
62179: PUSH
62180: LD_VAR 0 4
62184: ARRAY
62185: PUSH
62186: LD_INT 2
62188: ARRAY
62189: PPUSH
62190: CALL_OW 488
62194: NOT
62195: PUSH
62196: LD_VAR 0 6
62200: PUSH
62201: LD_VAR 0 4
62205: ARRAY
62206: PUSH
62207: LD_INT 1
62209: ARRAY
62210: PPUSH
62211: LD_VAR 0 6
62215: PUSH
62216: LD_VAR 0 4
62220: ARRAY
62221: PUSH
62222: LD_INT 2
62224: ARRAY
62225: PPUSH
62226: CALL_OW 428
62230: PUSH
62231: LD_INT 0
62233: NONEQUAL
62234: OR
62235: IFFALSE 62257
// tmp := Delete ( tmp , i ) ;
62237: LD_ADDR_VAR 0 6
62241: PUSH
62242: LD_VAR 0 6
62246: PPUSH
62247: LD_VAR 0 4
62251: PPUSH
62252: CALL_OW 3
62256: ST_TO_ADDR
62257: GO 62157
62259: POP
62260: POP
// j := GetClosestHex ( unit , tmp ) ;
62261: LD_ADDR_VAR 0 5
62265: PUSH
62266: LD_VAR 0 1
62270: PPUSH
62271: LD_VAR 0 6
62275: PPUSH
62276: CALL 61561 0 2
62280: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62281: LD_VAR 0 1
62285: PPUSH
62286: LD_VAR 0 5
62290: PUSH
62291: LD_INT 1
62293: ARRAY
62294: PPUSH
62295: LD_VAR 0 5
62299: PUSH
62300: LD_INT 2
62302: ARRAY
62303: PPUSH
62304: CALL_OW 111
// end ;
62308: LD_VAR 0 3
62312: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62313: LD_INT 0
62315: PPUSH
62316: PPUSH
62317: PPUSH
// uc_side = 0 ;
62318: LD_ADDR_OWVAR 20
62322: PUSH
62323: LD_INT 0
62325: ST_TO_ADDR
// uc_nation = 0 ;
62326: LD_ADDR_OWVAR 21
62330: PUSH
62331: LD_INT 0
62333: ST_TO_ADDR
// InitHc_All ( ) ;
62334: CALL_OW 584
// InitVc ;
62338: CALL_OW 20
// if mastodonts then
62342: LD_VAR 0 6
62346: IFFALSE 62413
// for i = 1 to mastodonts do
62348: LD_ADDR_VAR 0 11
62352: PUSH
62353: DOUBLE
62354: LD_INT 1
62356: DEC
62357: ST_TO_ADDR
62358: LD_VAR 0 6
62362: PUSH
62363: FOR_TO
62364: IFFALSE 62411
// begin vc_chassis := 31 ;
62366: LD_ADDR_OWVAR 37
62370: PUSH
62371: LD_INT 31
62373: ST_TO_ADDR
// vc_control := control_rider ;
62374: LD_ADDR_OWVAR 38
62378: PUSH
62379: LD_INT 4
62381: ST_TO_ADDR
// animal := CreateVehicle ;
62382: LD_ADDR_VAR 0 12
62386: PUSH
62387: CALL_OW 45
62391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62392: LD_VAR 0 12
62396: PPUSH
62397: LD_VAR 0 8
62401: PPUSH
62402: LD_INT 0
62404: PPUSH
62405: CALL 64601 0 3
// end ;
62409: GO 62363
62411: POP
62412: POP
// if horses then
62413: LD_VAR 0 5
62417: IFFALSE 62484
// for i = 1 to horses do
62419: LD_ADDR_VAR 0 11
62423: PUSH
62424: DOUBLE
62425: LD_INT 1
62427: DEC
62428: ST_TO_ADDR
62429: LD_VAR 0 5
62433: PUSH
62434: FOR_TO
62435: IFFALSE 62482
// begin hc_class := 21 ;
62437: LD_ADDR_OWVAR 28
62441: PUSH
62442: LD_INT 21
62444: ST_TO_ADDR
// hc_gallery :=  ;
62445: LD_ADDR_OWVAR 33
62449: PUSH
62450: LD_STRING 
62452: ST_TO_ADDR
// animal := CreateHuman ;
62453: LD_ADDR_VAR 0 12
62457: PUSH
62458: CALL_OW 44
62462: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62463: LD_VAR 0 12
62467: PPUSH
62468: LD_VAR 0 8
62472: PPUSH
62473: LD_INT 0
62475: PPUSH
62476: CALL 64601 0 3
// end ;
62480: GO 62434
62482: POP
62483: POP
// if birds then
62484: LD_VAR 0 1
62488: IFFALSE 62555
// for i = 1 to birds do
62490: LD_ADDR_VAR 0 11
62494: PUSH
62495: DOUBLE
62496: LD_INT 1
62498: DEC
62499: ST_TO_ADDR
62500: LD_VAR 0 1
62504: PUSH
62505: FOR_TO
62506: IFFALSE 62553
// begin hc_class = 18 ;
62508: LD_ADDR_OWVAR 28
62512: PUSH
62513: LD_INT 18
62515: ST_TO_ADDR
// hc_gallery =  ;
62516: LD_ADDR_OWVAR 33
62520: PUSH
62521: LD_STRING 
62523: ST_TO_ADDR
// animal := CreateHuman ;
62524: LD_ADDR_VAR 0 12
62528: PUSH
62529: CALL_OW 44
62533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62534: LD_VAR 0 12
62538: PPUSH
62539: LD_VAR 0 8
62543: PPUSH
62544: LD_INT 0
62546: PPUSH
62547: CALL 64601 0 3
// end ;
62551: GO 62505
62553: POP
62554: POP
// if tigers then
62555: LD_VAR 0 2
62559: IFFALSE 62643
// for i = 1 to tigers do
62561: LD_ADDR_VAR 0 11
62565: PUSH
62566: DOUBLE
62567: LD_INT 1
62569: DEC
62570: ST_TO_ADDR
62571: LD_VAR 0 2
62575: PUSH
62576: FOR_TO
62577: IFFALSE 62641
// begin hc_class = class_tiger ;
62579: LD_ADDR_OWVAR 28
62583: PUSH
62584: LD_INT 14
62586: ST_TO_ADDR
// hc_gallery =  ;
62587: LD_ADDR_OWVAR 33
62591: PUSH
62592: LD_STRING 
62594: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62595: LD_ADDR_OWVAR 35
62599: PUSH
62600: LD_INT 7
62602: NEG
62603: PPUSH
62604: LD_INT 7
62606: PPUSH
62607: CALL_OW 12
62611: ST_TO_ADDR
// animal := CreateHuman ;
62612: LD_ADDR_VAR 0 12
62616: PUSH
62617: CALL_OW 44
62621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62622: LD_VAR 0 12
62626: PPUSH
62627: LD_VAR 0 8
62631: PPUSH
62632: LD_INT 0
62634: PPUSH
62635: CALL 64601 0 3
// end ;
62639: GO 62576
62641: POP
62642: POP
// if apemans then
62643: LD_VAR 0 3
62647: IFFALSE 62770
// for i = 1 to apemans do
62649: LD_ADDR_VAR 0 11
62653: PUSH
62654: DOUBLE
62655: LD_INT 1
62657: DEC
62658: ST_TO_ADDR
62659: LD_VAR 0 3
62663: PUSH
62664: FOR_TO
62665: IFFALSE 62768
// begin hc_class = class_apeman ;
62667: LD_ADDR_OWVAR 28
62671: PUSH
62672: LD_INT 12
62674: ST_TO_ADDR
// hc_gallery =  ;
62675: LD_ADDR_OWVAR 33
62679: PUSH
62680: LD_STRING 
62682: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62683: LD_ADDR_OWVAR 35
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PPUSH
62692: LD_INT 2
62694: PPUSH
62695: CALL_OW 12
62699: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62700: LD_ADDR_OWVAR 31
62704: PUSH
62705: LD_INT 1
62707: PPUSH
62708: LD_INT 3
62710: PPUSH
62711: CALL_OW 12
62715: PUSH
62716: LD_INT 1
62718: PPUSH
62719: LD_INT 3
62721: PPUSH
62722: CALL_OW 12
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: ST_TO_ADDR
// animal := CreateHuman ;
62739: LD_ADDR_VAR 0 12
62743: PUSH
62744: CALL_OW 44
62748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62749: LD_VAR 0 12
62753: PPUSH
62754: LD_VAR 0 8
62758: PPUSH
62759: LD_INT 0
62761: PPUSH
62762: CALL 64601 0 3
// end ;
62766: GO 62664
62768: POP
62769: POP
// if enchidnas then
62770: LD_VAR 0 4
62774: IFFALSE 62841
// for i = 1 to enchidnas do
62776: LD_ADDR_VAR 0 11
62780: PUSH
62781: DOUBLE
62782: LD_INT 1
62784: DEC
62785: ST_TO_ADDR
62786: LD_VAR 0 4
62790: PUSH
62791: FOR_TO
62792: IFFALSE 62839
// begin hc_class = 13 ;
62794: LD_ADDR_OWVAR 28
62798: PUSH
62799: LD_INT 13
62801: ST_TO_ADDR
// hc_gallery =  ;
62802: LD_ADDR_OWVAR 33
62806: PUSH
62807: LD_STRING 
62809: ST_TO_ADDR
// animal := CreateHuman ;
62810: LD_ADDR_VAR 0 12
62814: PUSH
62815: CALL_OW 44
62819: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62820: LD_VAR 0 12
62824: PPUSH
62825: LD_VAR 0 8
62829: PPUSH
62830: LD_INT 0
62832: PPUSH
62833: CALL 64601 0 3
// end ;
62837: GO 62791
62839: POP
62840: POP
// if fishes then
62841: LD_VAR 0 7
62845: IFFALSE 62912
// for i = 1 to fishes do
62847: LD_ADDR_VAR 0 11
62851: PUSH
62852: DOUBLE
62853: LD_INT 1
62855: DEC
62856: ST_TO_ADDR
62857: LD_VAR 0 7
62861: PUSH
62862: FOR_TO
62863: IFFALSE 62910
// begin hc_class = 20 ;
62865: LD_ADDR_OWVAR 28
62869: PUSH
62870: LD_INT 20
62872: ST_TO_ADDR
// hc_gallery =  ;
62873: LD_ADDR_OWVAR 33
62877: PUSH
62878: LD_STRING 
62880: ST_TO_ADDR
// animal := CreateHuman ;
62881: LD_ADDR_VAR 0 12
62885: PUSH
62886: CALL_OW 44
62890: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62891: LD_VAR 0 12
62895: PPUSH
62896: LD_VAR 0 9
62900: PPUSH
62901: LD_INT 0
62903: PPUSH
62904: CALL 64601 0 3
// end ;
62908: GO 62862
62910: POP
62911: POP
// end ;
62912: LD_VAR 0 10
62916: RET
// export function WantHeal ( sci , unit ) ; begin
62917: LD_INT 0
62919: PPUSH
// if GetTaskList ( sci ) > 0 then
62920: LD_VAR 0 1
62924: PPUSH
62925: CALL_OW 437
62929: PUSH
62930: LD_INT 0
62932: GREATER
62933: IFFALSE 63003
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62935: LD_VAR 0 1
62939: PPUSH
62940: CALL_OW 437
62944: PUSH
62945: LD_INT 1
62947: ARRAY
62948: PUSH
62949: LD_INT 1
62951: ARRAY
62952: PUSH
62953: LD_STRING l
62955: EQUAL
62956: PUSH
62957: LD_VAR 0 1
62961: PPUSH
62962: CALL_OW 437
62966: PUSH
62967: LD_INT 1
62969: ARRAY
62970: PUSH
62971: LD_INT 4
62973: ARRAY
62974: PUSH
62975: LD_VAR 0 2
62979: EQUAL
62980: AND
62981: IFFALSE 62993
// result := true else
62983: LD_ADDR_VAR 0 3
62987: PUSH
62988: LD_INT 1
62990: ST_TO_ADDR
62991: GO 63001
// result := false ;
62993: LD_ADDR_VAR 0 3
62997: PUSH
62998: LD_INT 0
63000: ST_TO_ADDR
// end else
63001: GO 63011
// result := false ;
63003: LD_ADDR_VAR 0 3
63007: PUSH
63008: LD_INT 0
63010: ST_TO_ADDR
// end ;
63011: LD_VAR 0 3
63015: RET
// export function HealTarget ( sci ) ; begin
63016: LD_INT 0
63018: PPUSH
// if not sci then
63019: LD_VAR 0 1
63023: NOT
63024: IFFALSE 63028
// exit ;
63026: GO 63093
// result := 0 ;
63028: LD_ADDR_VAR 0 2
63032: PUSH
63033: LD_INT 0
63035: ST_TO_ADDR
// if GetTaskList ( sci ) then
63036: LD_VAR 0 1
63040: PPUSH
63041: CALL_OW 437
63045: IFFALSE 63093
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63047: LD_VAR 0 1
63051: PPUSH
63052: CALL_OW 437
63056: PUSH
63057: LD_INT 1
63059: ARRAY
63060: PUSH
63061: LD_INT 1
63063: ARRAY
63064: PUSH
63065: LD_STRING l
63067: EQUAL
63068: IFFALSE 63093
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63070: LD_ADDR_VAR 0 2
63074: PUSH
63075: LD_VAR 0 1
63079: PPUSH
63080: CALL_OW 437
63084: PUSH
63085: LD_INT 1
63087: ARRAY
63088: PUSH
63089: LD_INT 4
63091: ARRAY
63092: ST_TO_ADDR
// end ;
63093: LD_VAR 0 2
63097: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63098: LD_INT 0
63100: PPUSH
63101: PPUSH
63102: PPUSH
63103: PPUSH
// if not base_units then
63104: LD_VAR 0 1
63108: NOT
63109: IFFALSE 63113
// exit ;
63111: GO 63200
// result := false ;
63113: LD_ADDR_VAR 0 2
63117: PUSH
63118: LD_INT 0
63120: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63121: LD_ADDR_VAR 0 5
63125: PUSH
63126: LD_VAR 0 1
63130: PPUSH
63131: LD_INT 21
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PPUSH
63141: CALL_OW 72
63145: ST_TO_ADDR
// if not tmp then
63146: LD_VAR 0 5
63150: NOT
63151: IFFALSE 63155
// exit ;
63153: GO 63200
// for i in tmp do
63155: LD_ADDR_VAR 0 3
63159: PUSH
63160: LD_VAR 0 5
63164: PUSH
63165: FOR_IN
63166: IFFALSE 63198
// begin result := EnemyInRange ( i , 22 ) ;
63168: LD_ADDR_VAR 0 2
63172: PUSH
63173: LD_VAR 0 3
63177: PPUSH
63178: LD_INT 22
63180: PPUSH
63181: CALL 61436 0 2
63185: ST_TO_ADDR
// if result then
63186: LD_VAR 0 2
63190: IFFALSE 63196
// exit ;
63192: POP
63193: POP
63194: GO 63200
// end ;
63196: GO 63165
63198: POP
63199: POP
// end ;
63200: LD_VAR 0 2
63204: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63205: LD_INT 0
63207: PPUSH
63208: PPUSH
// if not units then
63209: LD_VAR 0 1
63213: NOT
63214: IFFALSE 63218
// exit ;
63216: GO 63288
// result := [ ] ;
63218: LD_ADDR_VAR 0 3
63222: PUSH
63223: EMPTY
63224: ST_TO_ADDR
// for i in units do
63225: LD_ADDR_VAR 0 4
63229: PUSH
63230: LD_VAR 0 1
63234: PUSH
63235: FOR_IN
63236: IFFALSE 63286
// if GetTag ( i ) = tag then
63238: LD_VAR 0 4
63242: PPUSH
63243: CALL_OW 110
63247: PUSH
63248: LD_VAR 0 2
63252: EQUAL
63253: IFFALSE 63284
// result := Replace ( result , result + 1 , i ) ;
63255: LD_ADDR_VAR 0 3
63259: PUSH
63260: LD_VAR 0 3
63264: PPUSH
63265: LD_VAR 0 3
63269: PUSH
63270: LD_INT 1
63272: PLUS
63273: PPUSH
63274: LD_VAR 0 4
63278: PPUSH
63279: CALL_OW 1
63283: ST_TO_ADDR
63284: GO 63235
63286: POP
63287: POP
// end ;
63288: LD_VAR 0 3
63292: RET
// export function IsDriver ( un ) ; begin
63293: LD_INT 0
63295: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63296: LD_ADDR_VAR 0 2
63300: PUSH
63301: LD_VAR 0 1
63305: PUSH
63306: LD_INT 55
63308: PUSH
63309: EMPTY
63310: LIST
63311: PPUSH
63312: CALL_OW 69
63316: IN
63317: ST_TO_ADDR
// end ;
63318: LD_VAR 0 2
63322: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63323: LD_INT 0
63325: PPUSH
63326: PPUSH
// list := [ ] ;
63327: LD_ADDR_VAR 0 5
63331: PUSH
63332: EMPTY
63333: ST_TO_ADDR
// case d of 0 :
63334: LD_VAR 0 3
63338: PUSH
63339: LD_INT 0
63341: DOUBLE
63342: EQUAL
63343: IFTRUE 63347
63345: GO 63480
63347: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63348: LD_ADDR_VAR 0 5
63352: PUSH
63353: LD_VAR 0 1
63357: PUSH
63358: LD_INT 4
63360: MINUS
63361: PUSH
63362: LD_VAR 0 2
63366: PUSH
63367: LD_INT 4
63369: MINUS
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: PUSH
63379: LD_VAR 0 1
63383: PUSH
63384: LD_INT 3
63386: MINUS
63387: PUSH
63388: LD_VAR 0 2
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: LIST
63400: PUSH
63401: LD_VAR 0 1
63405: PUSH
63406: LD_INT 4
63408: PLUS
63409: PUSH
63410: LD_VAR 0 2
63414: PUSH
63415: LD_INT 4
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: LIST
63422: PUSH
63423: LD_VAR 0 1
63427: PUSH
63428: LD_INT 3
63430: PLUS
63431: PUSH
63432: LD_VAR 0 2
63436: PUSH
63437: LD_INT 3
63439: PLUS
63440: PUSH
63441: LD_INT 5
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: PUSH
63449: LD_VAR 0 1
63453: PUSH
63454: LD_VAR 0 2
63458: PUSH
63459: LD_INT 4
63461: PLUS
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: ST_TO_ADDR
// end ; 1 :
63478: GO 64178
63480: LD_INT 1
63482: DOUBLE
63483: EQUAL
63484: IFTRUE 63488
63486: GO 63621
63488: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63489: LD_ADDR_VAR 0 5
63493: PUSH
63494: LD_VAR 0 1
63498: PUSH
63499: LD_VAR 0 2
63503: PUSH
63504: LD_INT 4
63506: MINUS
63507: PUSH
63508: LD_INT 3
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: PUSH
63516: LD_VAR 0 1
63520: PUSH
63521: LD_INT 3
63523: MINUS
63524: PUSH
63525: LD_VAR 0 2
63529: PUSH
63530: LD_INT 3
63532: MINUS
63533: PUSH
63534: LD_INT 2
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: PUSH
63542: LD_VAR 0 1
63546: PUSH
63547: LD_INT 4
63549: MINUS
63550: PUSH
63551: LD_VAR 0 2
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: PUSH
63564: LD_VAR 0 1
63568: PUSH
63569: LD_VAR 0 2
63573: PUSH
63574: LD_INT 3
63576: PLUS
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: LIST
63585: PUSH
63586: LD_VAR 0 1
63590: PUSH
63591: LD_INT 4
63593: PLUS
63594: PUSH
63595: LD_VAR 0 2
63599: PUSH
63600: LD_INT 4
63602: PLUS
63603: PUSH
63604: LD_INT 5
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: ST_TO_ADDR
// end ; 2 :
63619: GO 64178
63621: LD_INT 2
63623: DOUBLE
63624: EQUAL
63625: IFTRUE 63629
63627: GO 63758
63629: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63630: LD_ADDR_VAR 0 5
63634: PUSH
63635: LD_VAR 0 1
63639: PUSH
63640: LD_VAR 0 2
63644: PUSH
63645: LD_INT 3
63647: MINUS
63648: PUSH
63649: LD_INT 3
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: PUSH
63657: LD_VAR 0 1
63661: PUSH
63662: LD_INT 4
63664: PLUS
63665: PUSH
63666: LD_VAR 0 2
63670: PUSH
63671: LD_INT 4
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PUSH
63679: LD_VAR 0 1
63683: PUSH
63684: LD_VAR 0 2
63688: PUSH
63689: LD_INT 4
63691: PLUS
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: PUSH
63701: LD_VAR 0 1
63705: PUSH
63706: LD_INT 3
63708: MINUS
63709: PUSH
63710: LD_VAR 0 2
63714: PUSH
63715: LD_INT 1
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: LIST
63722: PUSH
63723: LD_VAR 0 1
63727: PUSH
63728: LD_INT 4
63730: MINUS
63731: PUSH
63732: LD_VAR 0 2
63736: PUSH
63737: LD_INT 4
63739: MINUS
63740: PUSH
63741: LD_INT 2
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: ST_TO_ADDR
// end ; 3 :
63756: GO 64178
63758: LD_INT 3
63760: DOUBLE
63761: EQUAL
63762: IFTRUE 63766
63764: GO 63899
63766: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63767: LD_ADDR_VAR 0 5
63771: PUSH
63772: LD_VAR 0 1
63776: PUSH
63777: LD_INT 3
63779: PLUS
63780: PUSH
63781: LD_VAR 0 2
63785: PUSH
63786: LD_INT 4
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: PUSH
63794: LD_VAR 0 1
63798: PUSH
63799: LD_INT 4
63801: PLUS
63802: PUSH
63803: LD_VAR 0 2
63807: PUSH
63808: LD_INT 4
63810: PLUS
63811: PUSH
63812: LD_INT 5
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: PUSH
63820: LD_VAR 0 1
63824: PUSH
63825: LD_INT 4
63827: MINUS
63828: PUSH
63829: LD_VAR 0 2
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: PUSH
63842: LD_VAR 0 1
63846: PUSH
63847: LD_VAR 0 2
63851: PUSH
63852: LD_INT 4
63854: MINUS
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: PUSH
63864: LD_VAR 0 1
63868: PUSH
63869: LD_INT 3
63871: MINUS
63872: PUSH
63873: LD_VAR 0 2
63877: PUSH
63878: LD_INT 3
63880: MINUS
63881: PUSH
63882: LD_INT 2
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: ST_TO_ADDR
// end ; 4 :
63897: GO 64178
63899: LD_INT 4
63901: DOUBLE
63902: EQUAL
63903: IFTRUE 63907
63905: GO 64040
63907: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63908: LD_ADDR_VAR 0 5
63912: PUSH
63913: LD_VAR 0 1
63917: PUSH
63918: LD_VAR 0 2
63922: PUSH
63923: LD_INT 4
63925: PLUS
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: LIST
63934: PUSH
63935: LD_VAR 0 1
63939: PUSH
63940: LD_INT 3
63942: PLUS
63943: PUSH
63944: LD_VAR 0 2
63948: PUSH
63949: LD_INT 3
63951: PLUS
63952: PUSH
63953: LD_INT 5
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: PUSH
63961: LD_VAR 0 1
63965: PUSH
63966: LD_INT 4
63968: PLUS
63969: PUSH
63970: LD_VAR 0 2
63974: PUSH
63975: LD_INT 4
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: LIST
63982: PUSH
63983: LD_VAR 0 1
63987: PUSH
63988: LD_VAR 0 2
63992: PUSH
63993: LD_INT 3
63995: MINUS
63996: PUSH
63997: LD_INT 3
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: LIST
64004: PUSH
64005: LD_VAR 0 1
64009: PUSH
64010: LD_INT 4
64012: MINUS
64013: PUSH
64014: LD_VAR 0 2
64018: PUSH
64019: LD_INT 4
64021: MINUS
64022: PUSH
64023: LD_INT 2
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: ST_TO_ADDR
// end ; 5 :
64038: GO 64178
64040: LD_INT 5
64042: DOUBLE
64043: EQUAL
64044: IFTRUE 64048
64046: GO 64177
64048: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64049: LD_ADDR_VAR 0 5
64053: PUSH
64054: LD_VAR 0 1
64058: PUSH
64059: LD_INT 4
64061: MINUS
64062: PUSH
64063: LD_VAR 0 2
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: PUSH
64076: LD_VAR 0 1
64080: PUSH
64081: LD_VAR 0 2
64085: PUSH
64086: LD_INT 4
64088: MINUS
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: PUSH
64098: LD_VAR 0 1
64102: PUSH
64103: LD_INT 4
64105: PLUS
64106: PUSH
64107: LD_VAR 0 2
64111: PUSH
64112: LD_INT 4
64114: PLUS
64115: PUSH
64116: LD_INT 5
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: PUSH
64124: LD_VAR 0 1
64128: PUSH
64129: LD_INT 3
64131: PLUS
64132: PUSH
64133: LD_VAR 0 2
64137: PUSH
64138: LD_INT 4
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: PUSH
64146: LD_VAR 0 1
64150: PUSH
64151: LD_VAR 0 2
64155: PUSH
64156: LD_INT 3
64158: PLUS
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: LIST
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: ST_TO_ADDR
// end ; end ;
64175: GO 64178
64177: POP
// result := list ;
64178: LD_ADDR_VAR 0 4
64182: PUSH
64183: LD_VAR 0 5
64187: ST_TO_ADDR
// end ;
64188: LD_VAR 0 4
64192: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64193: LD_INT 0
64195: PPUSH
64196: PPUSH
64197: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64198: LD_VAR 0 1
64202: NOT
64203: PUSH
64204: LD_VAR 0 2
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: LD_INT 2
64214: PUSH
64215: LD_INT 3
64217: PUSH
64218: LD_INT 4
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: IN
64227: NOT
64228: OR
64229: IFFALSE 64233
// exit ;
64231: GO 64325
// tmp := [ ] ;
64233: LD_ADDR_VAR 0 5
64237: PUSH
64238: EMPTY
64239: ST_TO_ADDR
// for i in units do
64240: LD_ADDR_VAR 0 4
64244: PUSH
64245: LD_VAR 0 1
64249: PUSH
64250: FOR_IN
64251: IFFALSE 64294
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64253: LD_ADDR_VAR 0 5
64257: PUSH
64258: LD_VAR 0 5
64262: PPUSH
64263: LD_VAR 0 5
64267: PUSH
64268: LD_INT 1
64270: PLUS
64271: PPUSH
64272: LD_VAR 0 4
64276: PPUSH
64277: LD_VAR 0 2
64281: PPUSH
64282: CALL_OW 259
64286: PPUSH
64287: CALL_OW 2
64291: ST_TO_ADDR
64292: GO 64250
64294: POP
64295: POP
// if not tmp then
64296: LD_VAR 0 5
64300: NOT
64301: IFFALSE 64305
// exit ;
64303: GO 64325
// result := SortListByListDesc ( units , tmp ) ;
64305: LD_ADDR_VAR 0 3
64309: PUSH
64310: LD_VAR 0 1
64314: PPUSH
64315: LD_VAR 0 5
64319: PPUSH
64320: CALL_OW 77
64324: ST_TO_ADDR
// end ;
64325: LD_VAR 0 3
64329: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64330: LD_INT 0
64332: PPUSH
64333: PPUSH
64334: PPUSH
// result := false ;
64335: LD_ADDR_VAR 0 3
64339: PUSH
64340: LD_INT 0
64342: ST_TO_ADDR
// x := GetX ( building ) ;
64343: LD_ADDR_VAR 0 4
64347: PUSH
64348: LD_VAR 0 2
64352: PPUSH
64353: CALL_OW 250
64357: ST_TO_ADDR
// y := GetY ( building ) ;
64358: LD_ADDR_VAR 0 5
64362: PUSH
64363: LD_VAR 0 2
64367: PPUSH
64368: CALL_OW 251
64372: ST_TO_ADDR
// if not building or not x or not y then
64373: LD_VAR 0 2
64377: NOT
64378: PUSH
64379: LD_VAR 0 4
64383: NOT
64384: OR
64385: PUSH
64386: LD_VAR 0 5
64390: NOT
64391: OR
64392: IFFALSE 64396
// exit ;
64394: GO 64488
// if GetTaskList ( unit ) then
64396: LD_VAR 0 1
64400: PPUSH
64401: CALL_OW 437
64405: IFFALSE 64488
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64407: LD_STRING e
64409: PUSH
64410: LD_VAR 0 1
64414: PPUSH
64415: CALL_OW 437
64419: PUSH
64420: LD_INT 1
64422: ARRAY
64423: PUSH
64424: LD_INT 1
64426: ARRAY
64427: EQUAL
64428: PUSH
64429: LD_VAR 0 4
64433: PUSH
64434: LD_VAR 0 1
64438: PPUSH
64439: CALL_OW 437
64443: PUSH
64444: LD_INT 1
64446: ARRAY
64447: PUSH
64448: LD_INT 2
64450: ARRAY
64451: EQUAL
64452: AND
64453: PUSH
64454: LD_VAR 0 5
64458: PUSH
64459: LD_VAR 0 1
64463: PPUSH
64464: CALL_OW 437
64468: PUSH
64469: LD_INT 1
64471: ARRAY
64472: PUSH
64473: LD_INT 3
64475: ARRAY
64476: EQUAL
64477: AND
64478: IFFALSE 64488
// result := true end ;
64480: LD_ADDR_VAR 0 3
64484: PUSH
64485: LD_INT 1
64487: ST_TO_ADDR
// end ;
64488: LD_VAR 0 3
64492: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64493: LD_INT 0
64495: PPUSH
// result := false ;
64496: LD_ADDR_VAR 0 4
64500: PUSH
64501: LD_INT 0
64503: ST_TO_ADDR
// if GetTaskList ( unit ) then
64504: LD_VAR 0 1
64508: PPUSH
64509: CALL_OW 437
64513: IFFALSE 64596
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64515: LD_STRING M
64517: PUSH
64518: LD_VAR 0 1
64522: PPUSH
64523: CALL_OW 437
64527: PUSH
64528: LD_INT 1
64530: ARRAY
64531: PUSH
64532: LD_INT 1
64534: ARRAY
64535: EQUAL
64536: PUSH
64537: LD_VAR 0 2
64541: PUSH
64542: LD_VAR 0 1
64546: PPUSH
64547: CALL_OW 437
64551: PUSH
64552: LD_INT 1
64554: ARRAY
64555: PUSH
64556: LD_INT 2
64558: ARRAY
64559: EQUAL
64560: AND
64561: PUSH
64562: LD_VAR 0 3
64566: PUSH
64567: LD_VAR 0 1
64571: PPUSH
64572: CALL_OW 437
64576: PUSH
64577: LD_INT 1
64579: ARRAY
64580: PUSH
64581: LD_INT 3
64583: ARRAY
64584: EQUAL
64585: AND
64586: IFFALSE 64596
// result := true ;
64588: LD_ADDR_VAR 0 4
64592: PUSH
64593: LD_INT 1
64595: ST_TO_ADDR
// end ; end ;
64596: LD_VAR 0 4
64600: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64601: LD_INT 0
64603: PPUSH
64604: PPUSH
64605: PPUSH
64606: PPUSH
// if not unit or not area then
64607: LD_VAR 0 1
64611: NOT
64612: PUSH
64613: LD_VAR 0 2
64617: NOT
64618: OR
64619: IFFALSE 64623
// exit ;
64621: GO 64787
// tmp := AreaToList ( area , i ) ;
64623: LD_ADDR_VAR 0 6
64627: PUSH
64628: LD_VAR 0 2
64632: PPUSH
64633: LD_VAR 0 5
64637: PPUSH
64638: CALL_OW 517
64642: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64643: LD_ADDR_VAR 0 5
64647: PUSH
64648: DOUBLE
64649: LD_INT 1
64651: DEC
64652: ST_TO_ADDR
64653: LD_VAR 0 6
64657: PUSH
64658: LD_INT 1
64660: ARRAY
64661: PUSH
64662: FOR_TO
64663: IFFALSE 64785
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64665: LD_ADDR_VAR 0 7
64669: PUSH
64670: LD_VAR 0 6
64674: PUSH
64675: LD_INT 1
64677: ARRAY
64678: PUSH
64679: LD_VAR 0 5
64683: ARRAY
64684: PUSH
64685: LD_VAR 0 6
64689: PUSH
64690: LD_INT 2
64692: ARRAY
64693: PUSH
64694: LD_VAR 0 5
64698: ARRAY
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64704: LD_VAR 0 7
64708: PUSH
64709: LD_INT 1
64711: ARRAY
64712: PPUSH
64713: LD_VAR 0 7
64717: PUSH
64718: LD_INT 2
64720: ARRAY
64721: PPUSH
64722: CALL_OW 428
64726: PUSH
64727: LD_INT 0
64729: EQUAL
64730: IFFALSE 64783
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64732: LD_VAR 0 1
64736: PPUSH
64737: LD_VAR 0 7
64741: PUSH
64742: LD_INT 1
64744: ARRAY
64745: PPUSH
64746: LD_VAR 0 7
64750: PUSH
64751: LD_INT 2
64753: ARRAY
64754: PPUSH
64755: LD_VAR 0 3
64759: PPUSH
64760: CALL_OW 48
// result := IsPlaced ( unit ) ;
64764: LD_ADDR_VAR 0 4
64768: PUSH
64769: LD_VAR 0 1
64773: PPUSH
64774: CALL_OW 305
64778: ST_TO_ADDR
// exit ;
64779: POP
64780: POP
64781: GO 64787
// end ; end ;
64783: GO 64662
64785: POP
64786: POP
// end ;
64787: LD_VAR 0 4
64791: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64792: LD_INT 0
64794: PPUSH
64795: PPUSH
64796: PPUSH
// if not side or side > 8 then
64797: LD_VAR 0 1
64801: NOT
64802: PUSH
64803: LD_VAR 0 1
64807: PUSH
64808: LD_INT 8
64810: GREATER
64811: OR
64812: IFFALSE 64816
// exit ;
64814: GO 65003
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64816: LD_ADDR_VAR 0 4
64820: PUSH
64821: LD_INT 22
64823: PUSH
64824: LD_VAR 0 1
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 21
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PPUSH
64847: CALL_OW 69
64851: ST_TO_ADDR
// if not tmp then
64852: LD_VAR 0 4
64856: NOT
64857: IFFALSE 64861
// exit ;
64859: GO 65003
// enable_addtolog := true ;
64861: LD_ADDR_OWVAR 81
64865: PUSH
64866: LD_INT 1
64868: ST_TO_ADDR
// AddToLog ( [ ) ;
64869: LD_STRING [
64871: PPUSH
64872: CALL_OW 561
// for i in tmp do
64876: LD_ADDR_VAR 0 3
64880: PUSH
64881: LD_VAR 0 4
64885: PUSH
64886: FOR_IN
64887: IFFALSE 64994
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64889: LD_STRING [
64891: PUSH
64892: LD_VAR 0 3
64896: PPUSH
64897: CALL_OW 266
64901: STR
64902: PUSH
64903: LD_STRING , 
64905: STR
64906: PUSH
64907: LD_VAR 0 3
64911: PPUSH
64912: CALL_OW 250
64916: STR
64917: PUSH
64918: LD_STRING , 
64920: STR
64921: PUSH
64922: LD_VAR 0 3
64926: PPUSH
64927: CALL_OW 251
64931: STR
64932: PUSH
64933: LD_STRING , 
64935: STR
64936: PUSH
64937: LD_VAR 0 3
64941: PPUSH
64942: CALL_OW 254
64946: STR
64947: PUSH
64948: LD_STRING , 
64950: STR
64951: PUSH
64952: LD_VAR 0 3
64956: PPUSH
64957: LD_INT 1
64959: PPUSH
64960: CALL_OW 268
64964: STR
64965: PUSH
64966: LD_STRING , 
64968: STR
64969: PUSH
64970: LD_VAR 0 3
64974: PPUSH
64975: LD_INT 2
64977: PPUSH
64978: CALL_OW 268
64982: STR
64983: PUSH
64984: LD_STRING ],
64986: STR
64987: PPUSH
64988: CALL_OW 561
// end ;
64992: GO 64886
64994: POP
64995: POP
// AddToLog ( ]; ) ;
64996: LD_STRING ];
64998: PPUSH
64999: CALL_OW 561
// end ;
65003: LD_VAR 0 2
65007: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65008: LD_INT 0
65010: PPUSH
65011: PPUSH
65012: PPUSH
65013: PPUSH
65014: PPUSH
// if not area or not rate or not max then
65015: LD_VAR 0 1
65019: NOT
65020: PUSH
65021: LD_VAR 0 2
65025: NOT
65026: OR
65027: PUSH
65028: LD_VAR 0 4
65032: NOT
65033: OR
65034: IFFALSE 65038
// exit ;
65036: GO 65230
// while 1 do
65038: LD_INT 1
65040: IFFALSE 65230
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65042: LD_ADDR_VAR 0 9
65046: PUSH
65047: LD_VAR 0 1
65051: PPUSH
65052: LD_INT 1
65054: PPUSH
65055: CALL_OW 287
65059: PUSH
65060: LD_INT 10
65062: MUL
65063: ST_TO_ADDR
// r := rate / 10 ;
65064: LD_ADDR_VAR 0 7
65068: PUSH
65069: LD_VAR 0 2
65073: PUSH
65074: LD_INT 10
65076: DIVREAL
65077: ST_TO_ADDR
// time := 1 1$00 ;
65078: LD_ADDR_VAR 0 8
65082: PUSH
65083: LD_INT 2100
65085: ST_TO_ADDR
// if amount < min then
65086: LD_VAR 0 9
65090: PUSH
65091: LD_VAR 0 3
65095: LESS
65096: IFFALSE 65114
// r := r * 2 else
65098: LD_ADDR_VAR 0 7
65102: PUSH
65103: LD_VAR 0 7
65107: PUSH
65108: LD_INT 2
65110: MUL
65111: ST_TO_ADDR
65112: GO 65140
// if amount > max then
65114: LD_VAR 0 9
65118: PUSH
65119: LD_VAR 0 4
65123: GREATER
65124: IFFALSE 65140
// r := r / 2 ;
65126: LD_ADDR_VAR 0 7
65130: PUSH
65131: LD_VAR 0 7
65135: PUSH
65136: LD_INT 2
65138: DIVREAL
65139: ST_TO_ADDR
// time := time / r ;
65140: LD_ADDR_VAR 0 8
65144: PUSH
65145: LD_VAR 0 8
65149: PUSH
65150: LD_VAR 0 7
65154: DIVREAL
65155: ST_TO_ADDR
// if time < 0 then
65156: LD_VAR 0 8
65160: PUSH
65161: LD_INT 0
65163: LESS
65164: IFFALSE 65181
// time := time * - 1 ;
65166: LD_ADDR_VAR 0 8
65170: PUSH
65171: LD_VAR 0 8
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: MUL
65180: ST_TO_ADDR
// wait ( time ) ;
65181: LD_VAR 0 8
65185: PPUSH
65186: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65190: LD_INT 35
65192: PPUSH
65193: LD_INT 875
65195: PPUSH
65196: CALL_OW 12
65200: PPUSH
65201: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65205: LD_INT 1
65207: PPUSH
65208: LD_INT 5
65210: PPUSH
65211: CALL_OW 12
65215: PPUSH
65216: LD_VAR 0 1
65220: PPUSH
65221: LD_INT 1
65223: PPUSH
65224: CALL_OW 55
// end ;
65228: GO 65038
// end ;
65230: LD_VAR 0 5
65234: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65235: LD_INT 0
65237: PPUSH
65238: PPUSH
65239: PPUSH
65240: PPUSH
65241: PPUSH
65242: PPUSH
65243: PPUSH
65244: PPUSH
// if not turrets or not factories then
65245: LD_VAR 0 1
65249: NOT
65250: PUSH
65251: LD_VAR 0 2
65255: NOT
65256: OR
65257: IFFALSE 65261
// exit ;
65259: GO 65568
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65261: LD_ADDR_VAR 0 10
65265: PUSH
65266: LD_INT 5
65268: PUSH
65269: LD_INT 6
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: LD_INT 4
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: LD_INT 5
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 24
65303: PUSH
65304: LD_INT 25
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 23
65313: PUSH
65314: LD_INT 27
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 42
65327: PUSH
65328: LD_INT 43
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 44
65337: PUSH
65338: LD_INT 46
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 45
65347: PUSH
65348: LD_INT 47
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: LIST
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: LIST
65364: ST_TO_ADDR
// result := [ ] ;
65365: LD_ADDR_VAR 0 3
65369: PUSH
65370: EMPTY
65371: ST_TO_ADDR
// for i in turrets do
65372: LD_ADDR_VAR 0 4
65376: PUSH
65377: LD_VAR 0 1
65381: PUSH
65382: FOR_IN
65383: IFFALSE 65566
// begin nat := GetNation ( i ) ;
65385: LD_ADDR_VAR 0 7
65389: PUSH
65390: LD_VAR 0 4
65394: PPUSH
65395: CALL_OW 248
65399: ST_TO_ADDR
// weapon := 0 ;
65400: LD_ADDR_VAR 0 8
65404: PUSH
65405: LD_INT 0
65407: ST_TO_ADDR
// if not nat then
65408: LD_VAR 0 7
65412: NOT
65413: IFFALSE 65417
// continue ;
65415: GO 65382
// for j in list [ nat ] do
65417: LD_ADDR_VAR 0 5
65421: PUSH
65422: LD_VAR 0 10
65426: PUSH
65427: LD_VAR 0 7
65431: ARRAY
65432: PUSH
65433: FOR_IN
65434: IFFALSE 65475
// if GetBWeapon ( i ) = j [ 1 ] then
65436: LD_VAR 0 4
65440: PPUSH
65441: CALL_OW 269
65445: PUSH
65446: LD_VAR 0 5
65450: PUSH
65451: LD_INT 1
65453: ARRAY
65454: EQUAL
65455: IFFALSE 65473
// begin weapon := j [ 2 ] ;
65457: LD_ADDR_VAR 0 8
65461: PUSH
65462: LD_VAR 0 5
65466: PUSH
65467: LD_INT 2
65469: ARRAY
65470: ST_TO_ADDR
// break ;
65471: GO 65475
// end ;
65473: GO 65433
65475: POP
65476: POP
// if not weapon then
65477: LD_VAR 0 8
65481: NOT
65482: IFFALSE 65486
// continue ;
65484: GO 65382
// for k in factories do
65486: LD_ADDR_VAR 0 6
65490: PUSH
65491: LD_VAR 0 2
65495: PUSH
65496: FOR_IN
65497: IFFALSE 65562
// begin weapons := AvailableWeaponList ( k ) ;
65499: LD_ADDR_VAR 0 9
65503: PUSH
65504: LD_VAR 0 6
65508: PPUSH
65509: CALL_OW 478
65513: ST_TO_ADDR
// if not weapons then
65514: LD_VAR 0 9
65518: NOT
65519: IFFALSE 65523
// continue ;
65521: GO 65496
// if weapon in weapons then
65523: LD_VAR 0 8
65527: PUSH
65528: LD_VAR 0 9
65532: IN
65533: IFFALSE 65560
// begin result := [ i , weapon ] ;
65535: LD_ADDR_VAR 0 3
65539: PUSH
65540: LD_VAR 0 4
65544: PUSH
65545: LD_VAR 0 8
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: ST_TO_ADDR
// exit ;
65554: POP
65555: POP
65556: POP
65557: POP
65558: GO 65568
// end ; end ;
65560: GO 65496
65562: POP
65563: POP
// end ;
65564: GO 65382
65566: POP
65567: POP
// end ;
65568: LD_VAR 0 3
65572: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65573: LD_INT 0
65575: PPUSH
// if not side or side > 8 then
65576: LD_VAR 0 3
65580: NOT
65581: PUSH
65582: LD_VAR 0 3
65586: PUSH
65587: LD_INT 8
65589: GREATER
65590: OR
65591: IFFALSE 65595
// exit ;
65593: GO 65654
// if not range then
65595: LD_VAR 0 4
65599: NOT
65600: IFFALSE 65611
// range := - 12 ;
65602: LD_ADDR_VAR 0 4
65606: PUSH
65607: LD_INT 12
65609: NEG
65610: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65611: LD_VAR 0 1
65615: PPUSH
65616: LD_VAR 0 2
65620: PPUSH
65621: LD_VAR 0 3
65625: PPUSH
65626: LD_VAR 0 4
65630: PPUSH
65631: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65635: LD_VAR 0 1
65639: PPUSH
65640: LD_VAR 0 2
65644: PPUSH
65645: LD_VAR 0 3
65649: PPUSH
65650: CALL_OW 331
// end ;
65654: LD_VAR 0 5
65658: RET
// export function Video ( mode ) ; begin
65659: LD_INT 0
65661: PPUSH
// ingame_video = mode ;
65662: LD_ADDR_OWVAR 52
65666: PUSH
65667: LD_VAR 0 1
65671: ST_TO_ADDR
// interface_hidden = mode ;
65672: LD_ADDR_OWVAR 54
65676: PUSH
65677: LD_VAR 0 1
65681: ST_TO_ADDR
// end ;
65682: LD_VAR 0 2
65686: RET
// export function Join ( array , element ) ; begin
65687: LD_INT 0
65689: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65690: LD_ADDR_VAR 0 3
65694: PUSH
65695: LD_VAR 0 1
65699: PPUSH
65700: LD_VAR 0 1
65704: PUSH
65705: LD_INT 1
65707: PLUS
65708: PPUSH
65709: LD_VAR 0 2
65713: PPUSH
65714: CALL_OW 1
65718: ST_TO_ADDR
// end ;
65719: LD_VAR 0 3
65723: RET
// export function JoinUnion ( array , element ) ; begin
65724: LD_INT 0
65726: PPUSH
// result := array union element ;
65727: LD_ADDR_VAR 0 3
65731: PUSH
65732: LD_VAR 0 1
65736: PUSH
65737: LD_VAR 0 2
65741: UNION
65742: ST_TO_ADDR
// end ;
65743: LD_VAR 0 3
65747: RET
// export function GetBehemoths ( side ) ; begin
65748: LD_INT 0
65750: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65751: LD_ADDR_VAR 0 2
65755: PUSH
65756: LD_INT 22
65758: PUSH
65759: LD_VAR 0 1
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 31
65770: PUSH
65771: LD_INT 25
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PPUSH
65782: CALL_OW 69
65786: ST_TO_ADDR
// end ;
65787: LD_VAR 0 2
65791: RET
// export function Shuffle ( array ) ; var i , index ; begin
65792: LD_INT 0
65794: PPUSH
65795: PPUSH
65796: PPUSH
// result := [ ] ;
65797: LD_ADDR_VAR 0 2
65801: PUSH
65802: EMPTY
65803: ST_TO_ADDR
// if not array then
65804: LD_VAR 0 1
65808: NOT
65809: IFFALSE 65813
// exit ;
65811: GO 65912
// Randomize ;
65813: CALL_OW 10
// for i = array downto 1 do
65817: LD_ADDR_VAR 0 3
65821: PUSH
65822: DOUBLE
65823: LD_VAR 0 1
65827: INC
65828: ST_TO_ADDR
65829: LD_INT 1
65831: PUSH
65832: FOR_DOWNTO
65833: IFFALSE 65910
// begin index := rand ( 1 , array ) ;
65835: LD_ADDR_VAR 0 4
65839: PUSH
65840: LD_INT 1
65842: PPUSH
65843: LD_VAR 0 1
65847: PPUSH
65848: CALL_OW 12
65852: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65853: LD_ADDR_VAR 0 2
65857: PUSH
65858: LD_VAR 0 2
65862: PPUSH
65863: LD_VAR 0 2
65867: PUSH
65868: LD_INT 1
65870: PLUS
65871: PPUSH
65872: LD_VAR 0 1
65876: PUSH
65877: LD_VAR 0 4
65881: ARRAY
65882: PPUSH
65883: CALL_OW 2
65887: ST_TO_ADDR
// array := Delete ( array , index ) ;
65888: LD_ADDR_VAR 0 1
65892: PUSH
65893: LD_VAR 0 1
65897: PPUSH
65898: LD_VAR 0 4
65902: PPUSH
65903: CALL_OW 3
65907: ST_TO_ADDR
// end ;
65908: GO 65832
65910: POP
65911: POP
// end ;
65912: LD_VAR 0 2
65916: RET
// export function GetBaseMaterials ( base ) ; begin
65917: LD_INT 0
65919: PPUSH
// result := [ 0 , 0 , 0 ] ;
65920: LD_ADDR_VAR 0 2
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: LIST
65938: ST_TO_ADDR
// if not base then
65939: LD_VAR 0 1
65943: NOT
65944: IFFALSE 65948
// exit ;
65946: GO 65997
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65948: LD_ADDR_VAR 0 2
65952: PUSH
65953: LD_VAR 0 1
65957: PPUSH
65958: LD_INT 1
65960: PPUSH
65961: CALL_OW 275
65965: PUSH
65966: LD_VAR 0 1
65970: PPUSH
65971: LD_INT 2
65973: PPUSH
65974: CALL_OW 275
65978: PUSH
65979: LD_VAR 0 1
65983: PPUSH
65984: LD_INT 3
65986: PPUSH
65987: CALL_OW 275
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: LIST
65996: ST_TO_ADDR
// end ;
65997: LD_VAR 0 2
66001: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66002: LD_INT 0
66004: PPUSH
66005: PPUSH
// result := array ;
66006: LD_ADDR_VAR 0 3
66010: PUSH
66011: LD_VAR 0 1
66015: ST_TO_ADDR
// if size > 0 then
66016: LD_VAR 0 2
66020: PUSH
66021: LD_INT 0
66023: GREATER
66024: IFFALSE 66070
// for i := array downto size do
66026: LD_ADDR_VAR 0 4
66030: PUSH
66031: DOUBLE
66032: LD_VAR 0 1
66036: INC
66037: ST_TO_ADDR
66038: LD_VAR 0 2
66042: PUSH
66043: FOR_DOWNTO
66044: IFFALSE 66068
// result := Delete ( result , result ) ;
66046: LD_ADDR_VAR 0 3
66050: PUSH
66051: LD_VAR 0 3
66055: PPUSH
66056: LD_VAR 0 3
66060: PPUSH
66061: CALL_OW 3
66065: ST_TO_ADDR
66066: GO 66043
66068: POP
66069: POP
// end ;
66070: LD_VAR 0 3
66074: RET
// export function ComExit ( unit ) ; var tmp ; begin
66075: LD_INT 0
66077: PPUSH
66078: PPUSH
// if not IsInUnit ( unit ) then
66079: LD_VAR 0 1
66083: PPUSH
66084: CALL_OW 310
66088: NOT
66089: IFFALSE 66093
// exit ;
66091: GO 66153
// tmp := IsInUnit ( unit ) ;
66093: LD_ADDR_VAR 0 3
66097: PUSH
66098: LD_VAR 0 1
66102: PPUSH
66103: CALL_OW 310
66107: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66108: LD_VAR 0 3
66112: PPUSH
66113: CALL_OW 247
66117: PUSH
66118: LD_INT 2
66120: EQUAL
66121: IFFALSE 66134
// ComExitVehicle ( unit ) else
66123: LD_VAR 0 1
66127: PPUSH
66128: CALL_OW 121
66132: GO 66143
// ComExitBuilding ( unit ) ;
66134: LD_VAR 0 1
66138: PPUSH
66139: CALL_OW 122
// result := tmp ;
66143: LD_ADDR_VAR 0 2
66147: PUSH
66148: LD_VAR 0 3
66152: ST_TO_ADDR
// end ;
66153: LD_VAR 0 2
66157: RET
// export function ComExitAll ( units ) ; var i ; begin
66158: LD_INT 0
66160: PPUSH
66161: PPUSH
// if not units then
66162: LD_VAR 0 1
66166: NOT
66167: IFFALSE 66171
// exit ;
66169: GO 66197
// for i in units do
66171: LD_ADDR_VAR 0 3
66175: PUSH
66176: LD_VAR 0 1
66180: PUSH
66181: FOR_IN
66182: IFFALSE 66195
// ComExit ( i ) ;
66184: LD_VAR 0 3
66188: PPUSH
66189: CALL 66075 0 1
66193: GO 66181
66195: POP
66196: POP
// end ;
66197: LD_VAR 0 2
66201: RET
// export function ResetHc ; begin
66202: LD_INT 0
66204: PPUSH
// InitHc ;
66205: CALL_OW 19
// hc_importance := 0 ;
66209: LD_ADDR_OWVAR 32
66213: PUSH
66214: LD_INT 0
66216: ST_TO_ADDR
// end ;
66217: LD_VAR 0 1
66221: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66222: LD_INT 0
66224: PPUSH
66225: PPUSH
66226: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66227: LD_ADDR_VAR 0 6
66231: PUSH
66232: LD_VAR 0 1
66236: PUSH
66237: LD_VAR 0 3
66241: PLUS
66242: PUSH
66243: LD_INT 2
66245: DIV
66246: ST_TO_ADDR
// if _x < 0 then
66247: LD_VAR 0 6
66251: PUSH
66252: LD_INT 0
66254: LESS
66255: IFFALSE 66272
// _x := _x * - 1 ;
66257: LD_ADDR_VAR 0 6
66261: PUSH
66262: LD_VAR 0 6
66266: PUSH
66267: LD_INT 1
66269: NEG
66270: MUL
66271: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66272: LD_ADDR_VAR 0 7
66276: PUSH
66277: LD_VAR 0 2
66281: PUSH
66282: LD_VAR 0 4
66286: PLUS
66287: PUSH
66288: LD_INT 2
66290: DIV
66291: ST_TO_ADDR
// if _y < 0 then
66292: LD_VAR 0 7
66296: PUSH
66297: LD_INT 0
66299: LESS
66300: IFFALSE 66317
// _y := _y * - 1 ;
66302: LD_ADDR_VAR 0 7
66306: PUSH
66307: LD_VAR 0 7
66311: PUSH
66312: LD_INT 1
66314: NEG
66315: MUL
66316: ST_TO_ADDR
// result := [ _x , _y ] ;
66317: LD_ADDR_VAR 0 5
66321: PUSH
66322: LD_VAR 0 6
66326: PUSH
66327: LD_VAR 0 7
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: ST_TO_ADDR
// end ;
66336: LD_VAR 0 5
66340: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66341: LD_INT 0
66343: PPUSH
66344: PPUSH
66345: PPUSH
66346: PPUSH
// task := GetTaskList ( unit ) ;
66347: LD_ADDR_VAR 0 7
66351: PUSH
66352: LD_VAR 0 1
66356: PPUSH
66357: CALL_OW 437
66361: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66362: LD_VAR 0 7
66366: NOT
66367: PUSH
66368: LD_VAR 0 1
66372: PPUSH
66373: LD_VAR 0 2
66377: PPUSH
66378: CALL_OW 308
66382: NOT
66383: AND
66384: IFFALSE 66388
// exit ;
66386: GO 66506
// if IsInArea ( unit , area ) then
66388: LD_VAR 0 1
66392: PPUSH
66393: LD_VAR 0 2
66397: PPUSH
66398: CALL_OW 308
66402: IFFALSE 66420
// begin ComMoveToArea ( unit , goAway ) ;
66404: LD_VAR 0 1
66408: PPUSH
66409: LD_VAR 0 3
66413: PPUSH
66414: CALL_OW 113
// exit ;
66418: GO 66506
// end ; if task [ 1 ] [ 1 ] <> M then
66420: LD_VAR 0 7
66424: PUSH
66425: LD_INT 1
66427: ARRAY
66428: PUSH
66429: LD_INT 1
66431: ARRAY
66432: PUSH
66433: LD_STRING M
66435: NONEQUAL
66436: IFFALSE 66440
// exit ;
66438: GO 66506
// x := task [ 1 ] [ 2 ] ;
66440: LD_ADDR_VAR 0 5
66444: PUSH
66445: LD_VAR 0 7
66449: PUSH
66450: LD_INT 1
66452: ARRAY
66453: PUSH
66454: LD_INT 2
66456: ARRAY
66457: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66458: LD_ADDR_VAR 0 6
66462: PUSH
66463: LD_VAR 0 7
66467: PUSH
66468: LD_INT 1
66470: ARRAY
66471: PUSH
66472: LD_INT 3
66474: ARRAY
66475: ST_TO_ADDR
// if InArea ( x , y , area ) then
66476: LD_VAR 0 5
66480: PPUSH
66481: LD_VAR 0 6
66485: PPUSH
66486: LD_VAR 0 2
66490: PPUSH
66491: CALL_OW 309
66495: IFFALSE 66506
// ComStop ( unit ) ;
66497: LD_VAR 0 1
66501: PPUSH
66502: CALL_OW 141
// end ;
66506: LD_VAR 0 4
66510: RET
// export function Abs ( value ) ; begin
66511: LD_INT 0
66513: PPUSH
// result := value ;
66514: LD_ADDR_VAR 0 2
66518: PUSH
66519: LD_VAR 0 1
66523: ST_TO_ADDR
// if value < 0 then
66524: LD_VAR 0 1
66528: PUSH
66529: LD_INT 0
66531: LESS
66532: IFFALSE 66549
// result := value * - 1 ;
66534: LD_ADDR_VAR 0 2
66538: PUSH
66539: LD_VAR 0 1
66543: PUSH
66544: LD_INT 1
66546: NEG
66547: MUL
66548: ST_TO_ADDR
// end ;
66549: LD_VAR 0 2
66553: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66554: LD_INT 0
66556: PPUSH
66557: PPUSH
66558: PPUSH
66559: PPUSH
66560: PPUSH
66561: PPUSH
66562: PPUSH
66563: PPUSH
// if not unit or not building then
66564: LD_VAR 0 1
66568: NOT
66569: PUSH
66570: LD_VAR 0 2
66574: NOT
66575: OR
66576: IFFALSE 66580
// exit ;
66578: GO 66806
// x := GetX ( building ) ;
66580: LD_ADDR_VAR 0 4
66584: PUSH
66585: LD_VAR 0 2
66589: PPUSH
66590: CALL_OW 250
66594: ST_TO_ADDR
// y := GetY ( building ) ;
66595: LD_ADDR_VAR 0 6
66599: PUSH
66600: LD_VAR 0 2
66604: PPUSH
66605: CALL_OW 251
66609: ST_TO_ADDR
// d := GetDir ( building ) ;
66610: LD_ADDR_VAR 0 8
66614: PUSH
66615: LD_VAR 0 2
66619: PPUSH
66620: CALL_OW 254
66624: ST_TO_ADDR
// r := 4 ;
66625: LD_ADDR_VAR 0 9
66629: PUSH
66630: LD_INT 4
66632: ST_TO_ADDR
// for i := 1 to 5 do
66633: LD_ADDR_VAR 0 10
66637: PUSH
66638: DOUBLE
66639: LD_INT 1
66641: DEC
66642: ST_TO_ADDR
66643: LD_INT 5
66645: PUSH
66646: FOR_TO
66647: IFFALSE 66804
// begin _x := ShiftX ( x , d , r + i ) ;
66649: LD_ADDR_VAR 0 5
66653: PUSH
66654: LD_VAR 0 4
66658: PPUSH
66659: LD_VAR 0 8
66663: PPUSH
66664: LD_VAR 0 9
66668: PUSH
66669: LD_VAR 0 10
66673: PLUS
66674: PPUSH
66675: CALL_OW 272
66679: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66680: LD_ADDR_VAR 0 7
66684: PUSH
66685: LD_VAR 0 6
66689: PPUSH
66690: LD_VAR 0 8
66694: PPUSH
66695: LD_VAR 0 9
66699: PUSH
66700: LD_VAR 0 10
66704: PLUS
66705: PPUSH
66706: CALL_OW 273
66710: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66711: LD_VAR 0 5
66715: PPUSH
66716: LD_VAR 0 7
66720: PPUSH
66721: CALL_OW 488
66725: PUSH
66726: LD_VAR 0 5
66730: PPUSH
66731: LD_VAR 0 7
66735: PPUSH
66736: CALL_OW 428
66740: PPUSH
66741: CALL_OW 247
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: LD_INT 2
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: IN
66756: NOT
66757: AND
66758: IFFALSE 66802
// begin ComMoveXY ( unit , _x , _y ) ;
66760: LD_VAR 0 1
66764: PPUSH
66765: LD_VAR 0 5
66769: PPUSH
66770: LD_VAR 0 7
66774: PPUSH
66775: CALL_OW 111
// result := [ _x , _y ] ;
66779: LD_ADDR_VAR 0 3
66783: PUSH
66784: LD_VAR 0 5
66788: PUSH
66789: LD_VAR 0 7
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: ST_TO_ADDR
// exit ;
66798: POP
66799: POP
66800: GO 66806
// end ; end ;
66802: GO 66646
66804: POP
66805: POP
// end ;
66806: LD_VAR 0 3
66810: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66811: LD_INT 0
66813: PPUSH
66814: PPUSH
66815: PPUSH
// result := 0 ;
66816: LD_ADDR_VAR 0 3
66820: PUSH
66821: LD_INT 0
66823: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66824: LD_VAR 0 1
66828: PUSH
66829: LD_INT 0
66831: LESS
66832: PUSH
66833: LD_VAR 0 1
66837: PUSH
66838: LD_INT 8
66840: GREATER
66841: OR
66842: PUSH
66843: LD_VAR 0 2
66847: PUSH
66848: LD_INT 0
66850: LESS
66851: OR
66852: PUSH
66853: LD_VAR 0 2
66857: PUSH
66858: LD_INT 8
66860: GREATER
66861: OR
66862: IFFALSE 66866
// exit ;
66864: GO 66941
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66866: LD_ADDR_VAR 0 4
66870: PUSH
66871: LD_INT 22
66873: PUSH
66874: LD_VAR 0 2
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PPUSH
66883: CALL_OW 69
66887: PUSH
66888: FOR_IN
66889: IFFALSE 66939
// begin un := UnitShoot ( i ) ;
66891: LD_ADDR_VAR 0 5
66895: PUSH
66896: LD_VAR 0 4
66900: PPUSH
66901: CALL_OW 504
66905: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66906: LD_VAR 0 5
66910: PPUSH
66911: CALL_OW 255
66915: PUSH
66916: LD_VAR 0 1
66920: EQUAL
66921: IFFALSE 66937
// begin result := un ;
66923: LD_ADDR_VAR 0 3
66927: PUSH
66928: LD_VAR 0 5
66932: ST_TO_ADDR
// exit ;
66933: POP
66934: POP
66935: GO 66941
// end ; end ;
66937: GO 66888
66939: POP
66940: POP
// end ;
66941: LD_VAR 0 3
66945: RET
// export function GetCargoBay ( units ) ; begin
66946: LD_INT 0
66948: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66949: LD_ADDR_VAR 0 2
66953: PUSH
66954: LD_VAR 0 1
66958: PPUSH
66959: LD_INT 2
66961: PUSH
66962: LD_INT 34
66964: PUSH
66965: LD_INT 12
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 34
66974: PUSH
66975: LD_INT 51
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 34
66984: PUSH
66985: LD_INT 32
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 34
66994: PUSH
66995: LD_EXP 15
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: PPUSH
67011: CALL_OW 72
67015: ST_TO_ADDR
// end ;
67016: LD_VAR 0 2
67020: RET
// export function Negate ( value ) ; begin
67021: LD_INT 0
67023: PPUSH
// result := not value ;
67024: LD_ADDR_VAR 0 2
67028: PUSH
67029: LD_VAR 0 1
67033: NOT
67034: ST_TO_ADDR
// end ;
67035: LD_VAR 0 2
67039: RET
// export function Inc ( value ) ; begin
67040: LD_INT 0
67042: PPUSH
// result := value + 1 ;
67043: LD_ADDR_VAR 0 2
67047: PUSH
67048: LD_VAR 0 1
67052: PUSH
67053: LD_INT 1
67055: PLUS
67056: ST_TO_ADDR
// end ;
67057: LD_VAR 0 2
67061: RET
// export function Dec ( value ) ; begin
67062: LD_INT 0
67064: PPUSH
// result := value - 1 ;
67065: LD_ADDR_VAR 0 2
67069: PUSH
67070: LD_VAR 0 1
67074: PUSH
67075: LD_INT 1
67077: MINUS
67078: ST_TO_ADDR
// end ;
67079: LD_VAR 0 2
67083: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67084: LD_INT 0
67086: PPUSH
67087: PPUSH
67088: PPUSH
67089: PPUSH
67090: PPUSH
67091: PPUSH
67092: PPUSH
67093: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67094: LD_VAR 0 1
67098: PPUSH
67099: LD_VAR 0 2
67103: PPUSH
67104: CALL_OW 488
67108: NOT
67109: PUSH
67110: LD_VAR 0 3
67114: PPUSH
67115: LD_VAR 0 4
67119: PPUSH
67120: CALL_OW 488
67124: NOT
67125: OR
67126: IFFALSE 67139
// begin result := - 1 ;
67128: LD_ADDR_VAR 0 5
67132: PUSH
67133: LD_INT 1
67135: NEG
67136: ST_TO_ADDR
// exit ;
67137: GO 67374
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67139: LD_ADDR_VAR 0 12
67143: PUSH
67144: LD_VAR 0 1
67148: PPUSH
67149: LD_VAR 0 2
67153: PPUSH
67154: LD_VAR 0 3
67158: PPUSH
67159: LD_VAR 0 4
67163: PPUSH
67164: CALL 66222 0 4
67168: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67169: LD_ADDR_VAR 0 11
67173: PUSH
67174: LD_VAR 0 1
67178: PPUSH
67179: LD_VAR 0 2
67183: PPUSH
67184: LD_VAR 0 12
67188: PUSH
67189: LD_INT 1
67191: ARRAY
67192: PPUSH
67193: LD_VAR 0 12
67197: PUSH
67198: LD_INT 2
67200: ARRAY
67201: PPUSH
67202: CALL_OW 298
67206: ST_TO_ADDR
// distance := 9999 ;
67207: LD_ADDR_VAR 0 10
67211: PUSH
67212: LD_INT 9999
67214: ST_TO_ADDR
// for i := 0 to 5 do
67215: LD_ADDR_VAR 0 6
67219: PUSH
67220: DOUBLE
67221: LD_INT 0
67223: DEC
67224: ST_TO_ADDR
67225: LD_INT 5
67227: PUSH
67228: FOR_TO
67229: IFFALSE 67372
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67231: LD_ADDR_VAR 0 7
67235: PUSH
67236: LD_VAR 0 1
67240: PPUSH
67241: LD_VAR 0 6
67245: PPUSH
67246: LD_VAR 0 11
67250: PPUSH
67251: CALL_OW 272
67255: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67256: LD_ADDR_VAR 0 8
67260: PUSH
67261: LD_VAR 0 2
67265: PPUSH
67266: LD_VAR 0 6
67270: PPUSH
67271: LD_VAR 0 11
67275: PPUSH
67276: CALL_OW 273
67280: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67281: LD_VAR 0 7
67285: PPUSH
67286: LD_VAR 0 8
67290: PPUSH
67291: CALL_OW 488
67295: NOT
67296: IFFALSE 67300
// continue ;
67298: GO 67228
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67300: LD_ADDR_VAR 0 9
67304: PUSH
67305: LD_VAR 0 12
67309: PUSH
67310: LD_INT 1
67312: ARRAY
67313: PPUSH
67314: LD_VAR 0 12
67318: PUSH
67319: LD_INT 2
67321: ARRAY
67322: PPUSH
67323: LD_VAR 0 7
67327: PPUSH
67328: LD_VAR 0 8
67332: PPUSH
67333: CALL_OW 298
67337: ST_TO_ADDR
// if tmp < distance then
67338: LD_VAR 0 9
67342: PUSH
67343: LD_VAR 0 10
67347: LESS
67348: IFFALSE 67370
// begin result := i ;
67350: LD_ADDR_VAR 0 5
67354: PUSH
67355: LD_VAR 0 6
67359: ST_TO_ADDR
// distance := tmp ;
67360: LD_ADDR_VAR 0 10
67364: PUSH
67365: LD_VAR 0 9
67369: ST_TO_ADDR
// end ; end ;
67370: GO 67228
67372: POP
67373: POP
// end ;
67374: LD_VAR 0 5
67378: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67379: LD_INT 0
67381: PPUSH
67382: PPUSH
// if not driver or not IsInUnit ( driver ) then
67383: LD_VAR 0 1
67387: NOT
67388: PUSH
67389: LD_VAR 0 1
67393: PPUSH
67394: CALL_OW 310
67398: NOT
67399: OR
67400: IFFALSE 67404
// exit ;
67402: GO 67494
// vehicle := IsInUnit ( driver ) ;
67404: LD_ADDR_VAR 0 3
67408: PUSH
67409: LD_VAR 0 1
67413: PPUSH
67414: CALL_OW 310
67418: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67419: LD_VAR 0 1
67423: PPUSH
67424: LD_STRING \
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: PUSH
67454: LD_STRING E
67456: PUSH
67457: LD_INT 0
67459: PUSH
67460: LD_INT 0
67462: PUSH
67463: LD_VAR 0 3
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PPUSH
67490: CALL_OW 446
// end ;
67494: LD_VAR 0 2
67498: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67499: LD_INT 0
67501: PPUSH
67502: PPUSH
// if not driver or not IsInUnit ( driver ) then
67503: LD_VAR 0 1
67507: NOT
67508: PUSH
67509: LD_VAR 0 1
67513: PPUSH
67514: CALL_OW 310
67518: NOT
67519: OR
67520: IFFALSE 67524
// exit ;
67522: GO 67614
// vehicle := IsInUnit ( driver ) ;
67524: LD_ADDR_VAR 0 3
67528: PUSH
67529: LD_VAR 0 1
67533: PPUSH
67534: CALL_OW 310
67538: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67539: LD_VAR 0 1
67543: PPUSH
67544: LD_STRING \
67546: PUSH
67547: LD_INT 0
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: LD_INT 0
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: PUSH
67574: LD_STRING E
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: LD_VAR 0 3
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: LD_INT 0
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PPUSH
67610: CALL_OW 447
// end ;
67614: LD_VAR 0 2
67618: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67619: LD_INT 0
67621: PPUSH
67622: PPUSH
67623: PPUSH
// tmp := [ ] ;
67624: LD_ADDR_VAR 0 5
67628: PUSH
67629: EMPTY
67630: ST_TO_ADDR
// for i in units do
67631: LD_ADDR_VAR 0 4
67635: PUSH
67636: LD_VAR 0 1
67640: PUSH
67641: FOR_IN
67642: IFFALSE 67680
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67644: LD_ADDR_VAR 0 5
67648: PUSH
67649: LD_VAR 0 5
67653: PPUSH
67654: LD_VAR 0 5
67658: PUSH
67659: LD_INT 1
67661: PLUS
67662: PPUSH
67663: LD_VAR 0 4
67667: PPUSH
67668: CALL_OW 256
67672: PPUSH
67673: CALL_OW 2
67677: ST_TO_ADDR
67678: GO 67641
67680: POP
67681: POP
// if not tmp then
67682: LD_VAR 0 5
67686: NOT
67687: IFFALSE 67691
// exit ;
67689: GO 67739
// if asc then
67691: LD_VAR 0 2
67695: IFFALSE 67719
// result := SortListByListAsc ( units , tmp ) else
67697: LD_ADDR_VAR 0 3
67701: PUSH
67702: LD_VAR 0 1
67706: PPUSH
67707: LD_VAR 0 5
67711: PPUSH
67712: CALL_OW 76
67716: ST_TO_ADDR
67717: GO 67739
// result := SortListByListDesc ( units , tmp ) ;
67719: LD_ADDR_VAR 0 3
67723: PUSH
67724: LD_VAR 0 1
67728: PPUSH
67729: LD_VAR 0 5
67733: PPUSH
67734: CALL_OW 77
67738: ST_TO_ADDR
// end ;
67739: LD_VAR 0 3
67743: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67744: LD_INT 0
67746: PPUSH
67747: PPUSH
// task := GetTaskList ( mech ) ;
67748: LD_ADDR_VAR 0 4
67752: PUSH
67753: LD_VAR 0 1
67757: PPUSH
67758: CALL_OW 437
67762: ST_TO_ADDR
// if not task then
67763: LD_VAR 0 4
67767: NOT
67768: IFFALSE 67772
// exit ;
67770: GO 67814
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67772: LD_ADDR_VAR 0 3
67776: PUSH
67777: LD_VAR 0 4
67781: PUSH
67782: LD_INT 1
67784: ARRAY
67785: PUSH
67786: LD_INT 1
67788: ARRAY
67789: PUSH
67790: LD_STRING r
67792: EQUAL
67793: PUSH
67794: LD_VAR 0 4
67798: PUSH
67799: LD_INT 1
67801: ARRAY
67802: PUSH
67803: LD_INT 4
67805: ARRAY
67806: PUSH
67807: LD_VAR 0 2
67811: EQUAL
67812: AND
67813: ST_TO_ADDR
// end ;
67814: LD_VAR 0 3
67818: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67819: LD_INT 0
67821: PPUSH
// SetDir ( unit , d ) ;
67822: LD_VAR 0 1
67826: PPUSH
67827: LD_VAR 0 4
67831: PPUSH
67832: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67836: LD_VAR 0 1
67840: PPUSH
67841: LD_VAR 0 2
67845: PPUSH
67846: LD_VAR 0 3
67850: PPUSH
67851: LD_VAR 0 5
67855: PPUSH
67856: CALL_OW 48
// end ;
67860: LD_VAR 0 6
67864: RET
// export function ToNaturalNumber ( number ) ; begin
67865: LD_INT 0
67867: PPUSH
// result := number div 1 ;
67868: LD_ADDR_VAR 0 2
67872: PUSH
67873: LD_VAR 0 1
67877: PUSH
67878: LD_INT 1
67880: DIV
67881: ST_TO_ADDR
// if number < 0 then
67882: LD_VAR 0 1
67886: PUSH
67887: LD_INT 0
67889: LESS
67890: IFFALSE 67900
// result := 0 ;
67892: LD_ADDR_VAR 0 2
67896: PUSH
67897: LD_INT 0
67899: ST_TO_ADDR
// end ;
67900: LD_VAR 0 2
67904: RET
// export function SortByClass ( units , class ) ; var un ; begin
67905: LD_INT 0
67907: PPUSH
67908: PPUSH
// if not units or not class then
67909: LD_VAR 0 1
67913: NOT
67914: PUSH
67915: LD_VAR 0 2
67919: NOT
67920: OR
67921: IFFALSE 67925
// exit ;
67923: GO 68020
// result := [ ] ;
67925: LD_ADDR_VAR 0 3
67929: PUSH
67930: EMPTY
67931: ST_TO_ADDR
// for un in units do
67932: LD_ADDR_VAR 0 4
67936: PUSH
67937: LD_VAR 0 1
67941: PUSH
67942: FOR_IN
67943: IFFALSE 68018
// if GetClass ( un ) = class then
67945: LD_VAR 0 4
67949: PPUSH
67950: CALL_OW 257
67954: PUSH
67955: LD_VAR 0 2
67959: EQUAL
67960: IFFALSE 67987
// result := Insert ( result , 1 , un ) else
67962: LD_ADDR_VAR 0 3
67966: PUSH
67967: LD_VAR 0 3
67971: PPUSH
67972: LD_INT 1
67974: PPUSH
67975: LD_VAR 0 4
67979: PPUSH
67980: CALL_OW 2
67984: ST_TO_ADDR
67985: GO 68016
// result := Replace ( result , result + 1 , un ) ;
67987: LD_ADDR_VAR 0 3
67991: PUSH
67992: LD_VAR 0 3
67996: PPUSH
67997: LD_VAR 0 3
68001: PUSH
68002: LD_INT 1
68004: PLUS
68005: PPUSH
68006: LD_VAR 0 4
68010: PPUSH
68011: CALL_OW 1
68015: ST_TO_ADDR
68016: GO 67942
68018: POP
68019: POP
// end ;
68020: LD_VAR 0 3
68024: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68025: LD_INT 0
68027: PPUSH
68028: PPUSH
68029: PPUSH
68030: PPUSH
68031: PPUSH
68032: PPUSH
68033: PPUSH
// result := [ ] ;
68034: LD_ADDR_VAR 0 4
68038: PUSH
68039: EMPTY
68040: ST_TO_ADDR
// if x - r < 0 then
68041: LD_VAR 0 1
68045: PUSH
68046: LD_VAR 0 3
68050: MINUS
68051: PUSH
68052: LD_INT 0
68054: LESS
68055: IFFALSE 68067
// min_x := 0 else
68057: LD_ADDR_VAR 0 8
68061: PUSH
68062: LD_INT 0
68064: ST_TO_ADDR
68065: GO 68083
// min_x := x - r ;
68067: LD_ADDR_VAR 0 8
68071: PUSH
68072: LD_VAR 0 1
68076: PUSH
68077: LD_VAR 0 3
68081: MINUS
68082: ST_TO_ADDR
// if y - r < 0 then
68083: LD_VAR 0 2
68087: PUSH
68088: LD_VAR 0 3
68092: MINUS
68093: PUSH
68094: LD_INT 0
68096: LESS
68097: IFFALSE 68109
// min_y := 0 else
68099: LD_ADDR_VAR 0 7
68103: PUSH
68104: LD_INT 0
68106: ST_TO_ADDR
68107: GO 68125
// min_y := y - r ;
68109: LD_ADDR_VAR 0 7
68113: PUSH
68114: LD_VAR 0 2
68118: PUSH
68119: LD_VAR 0 3
68123: MINUS
68124: ST_TO_ADDR
// max_x := x + r ;
68125: LD_ADDR_VAR 0 9
68129: PUSH
68130: LD_VAR 0 1
68134: PUSH
68135: LD_VAR 0 3
68139: PLUS
68140: ST_TO_ADDR
// max_y := y + r ;
68141: LD_ADDR_VAR 0 10
68145: PUSH
68146: LD_VAR 0 2
68150: PUSH
68151: LD_VAR 0 3
68155: PLUS
68156: ST_TO_ADDR
// for _x = min_x to max_x do
68157: LD_ADDR_VAR 0 5
68161: PUSH
68162: DOUBLE
68163: LD_VAR 0 8
68167: DEC
68168: ST_TO_ADDR
68169: LD_VAR 0 9
68173: PUSH
68174: FOR_TO
68175: IFFALSE 68276
// for _y = min_y to max_y do
68177: LD_ADDR_VAR 0 6
68181: PUSH
68182: DOUBLE
68183: LD_VAR 0 7
68187: DEC
68188: ST_TO_ADDR
68189: LD_VAR 0 10
68193: PUSH
68194: FOR_TO
68195: IFFALSE 68272
// begin if not ValidHex ( _x , _y ) then
68197: LD_VAR 0 5
68201: PPUSH
68202: LD_VAR 0 6
68206: PPUSH
68207: CALL_OW 488
68211: NOT
68212: IFFALSE 68216
// continue ;
68214: GO 68194
// if GetResourceTypeXY ( _x , _y ) then
68216: LD_VAR 0 5
68220: PPUSH
68221: LD_VAR 0 6
68225: PPUSH
68226: CALL_OW 283
68230: IFFALSE 68270
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68232: LD_ADDR_VAR 0 4
68236: PUSH
68237: LD_VAR 0 4
68241: PPUSH
68242: LD_VAR 0 4
68246: PUSH
68247: LD_INT 1
68249: PLUS
68250: PPUSH
68251: LD_VAR 0 5
68255: PUSH
68256: LD_VAR 0 6
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PPUSH
68265: CALL_OW 1
68269: ST_TO_ADDR
// end ;
68270: GO 68194
68272: POP
68273: POP
68274: GO 68174
68276: POP
68277: POP
// end ;
68278: LD_VAR 0 4
68282: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68283: LD_INT 0
68285: PPUSH
68286: PPUSH
68287: PPUSH
68288: PPUSH
68289: PPUSH
68290: PPUSH
68291: PPUSH
68292: PPUSH
// if not units then
68293: LD_VAR 0 1
68297: NOT
68298: IFFALSE 68302
// exit ;
68300: GO 68727
// result := UnitFilter ( units , [ f_ok ] ) ;
68302: LD_ADDR_VAR 0 3
68306: PUSH
68307: LD_VAR 0 1
68311: PPUSH
68312: LD_INT 50
68314: PUSH
68315: EMPTY
68316: LIST
68317: PPUSH
68318: CALL_OW 72
68322: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68323: LD_ADDR_VAR 0 8
68327: PUSH
68328: LD_VAR 0 1
68332: PUSH
68333: LD_INT 1
68335: ARRAY
68336: PPUSH
68337: CALL_OW 255
68341: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
68342: LD_ADDR_VAR 0 10
68346: PUSH
68347: LD_INT 29
68349: PUSH
68350: LD_EXP 18
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: ST_TO_ADDR
// if not result then
68359: LD_VAR 0 3
68363: NOT
68364: IFFALSE 68368
// exit ;
68366: GO 68727
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68368: LD_ADDR_VAR 0 5
68372: PUSH
68373: LD_INT 81
68375: PUSH
68376: LD_VAR 0 8
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PPUSH
68385: CALL_OW 69
68389: ST_TO_ADDR
// for i in result do
68390: LD_ADDR_VAR 0 4
68394: PUSH
68395: LD_VAR 0 3
68399: PUSH
68400: FOR_IN
68401: IFFALSE 68725
// begin tag := GetTag ( i ) + 1 ;
68403: LD_ADDR_VAR 0 9
68407: PUSH
68408: LD_VAR 0 4
68412: PPUSH
68413: CALL_OW 110
68417: PUSH
68418: LD_INT 1
68420: PLUS
68421: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68422: LD_ADDR_VAR 0 7
68426: PUSH
68427: LD_VAR 0 4
68431: PPUSH
68432: CALL_OW 250
68436: PPUSH
68437: LD_VAR 0 4
68441: PPUSH
68442: CALL_OW 251
68446: PPUSH
68447: LD_INT 6
68449: PPUSH
68450: CALL 68025 0 3
68454: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68455: LD_VAR 0 7
68459: PUSH
68460: LD_VAR 0 4
68464: PPUSH
68465: CALL_OW 264
68469: PUSH
68470: LD_VAR 0 10
68474: IN
68475: NOT
68476: AND
68477: IFFALSE 68516
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68479: LD_VAR 0 4
68483: PPUSH
68484: LD_VAR 0 7
68488: PUSH
68489: LD_INT 1
68491: ARRAY
68492: PUSH
68493: LD_INT 1
68495: ARRAY
68496: PPUSH
68497: LD_VAR 0 7
68501: PUSH
68502: LD_INT 1
68504: ARRAY
68505: PUSH
68506: LD_INT 2
68508: ARRAY
68509: PPUSH
68510: CALL_OW 116
68514: GO 68723
// if path > tag then
68516: LD_VAR 0 2
68520: PUSH
68521: LD_VAR 0 9
68525: GREATER
68526: IFFALSE 68693
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68528: LD_ADDR_VAR 0 6
68532: PUSH
68533: LD_VAR 0 5
68537: PPUSH
68538: LD_INT 91
68540: PUSH
68541: LD_VAR 0 4
68545: PUSH
68546: LD_INT 12
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: LIST
68553: PPUSH
68554: CALL_OW 72
68558: ST_TO_ADDR
// if nearEnemy then
68559: LD_VAR 0 6
68563: IFFALSE 68591
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68565: LD_VAR 0 4
68569: PPUSH
68570: LD_VAR 0 6
68574: PPUSH
68575: LD_VAR 0 4
68579: PPUSH
68580: CALL_OW 74
68584: PPUSH
68585: CALL_OW 115
68589: GO 68691
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68591: LD_VAR 0 4
68595: PPUSH
68596: LD_VAR 0 2
68600: PUSH
68601: LD_VAR 0 9
68605: ARRAY
68606: PUSH
68607: LD_INT 1
68609: ARRAY
68610: PPUSH
68611: LD_VAR 0 2
68615: PUSH
68616: LD_VAR 0 9
68620: ARRAY
68621: PUSH
68622: LD_INT 2
68624: ARRAY
68625: PPUSH
68626: CALL_OW 297
68630: PUSH
68631: LD_INT 6
68633: GREATER
68634: IFFALSE 68677
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68636: LD_VAR 0 4
68640: PPUSH
68641: LD_VAR 0 2
68645: PUSH
68646: LD_VAR 0 9
68650: ARRAY
68651: PUSH
68652: LD_INT 1
68654: ARRAY
68655: PPUSH
68656: LD_VAR 0 2
68660: PUSH
68661: LD_VAR 0 9
68665: ARRAY
68666: PUSH
68667: LD_INT 2
68669: ARRAY
68670: PPUSH
68671: CALL_OW 114
68675: GO 68691
// SetTag ( i , tag ) ;
68677: LD_VAR 0 4
68681: PPUSH
68682: LD_VAR 0 9
68686: PPUSH
68687: CALL_OW 109
// end else
68691: GO 68723
// if enemy then
68693: LD_VAR 0 5
68697: IFFALSE 68723
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68699: LD_VAR 0 4
68703: PPUSH
68704: LD_VAR 0 5
68708: PPUSH
68709: LD_VAR 0 4
68713: PPUSH
68714: CALL_OW 74
68718: PPUSH
68719: CALL_OW 115
// end ;
68723: GO 68400
68725: POP
68726: POP
// end ;
68727: LD_VAR 0 3
68731: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68732: LD_INT 0
68734: PPUSH
68735: PPUSH
68736: PPUSH
// if not unit or IsInUnit ( unit ) then
68737: LD_VAR 0 1
68741: NOT
68742: PUSH
68743: LD_VAR 0 1
68747: PPUSH
68748: CALL_OW 310
68752: OR
68753: IFFALSE 68757
// exit ;
68755: GO 68848
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68757: LD_ADDR_VAR 0 4
68761: PUSH
68762: LD_VAR 0 1
68766: PPUSH
68767: CALL_OW 250
68771: PPUSH
68772: LD_VAR 0 2
68776: PPUSH
68777: LD_INT 1
68779: PPUSH
68780: CALL_OW 272
68784: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68785: LD_ADDR_VAR 0 5
68789: PUSH
68790: LD_VAR 0 1
68794: PPUSH
68795: CALL_OW 251
68799: PPUSH
68800: LD_VAR 0 2
68804: PPUSH
68805: LD_INT 1
68807: PPUSH
68808: CALL_OW 273
68812: ST_TO_ADDR
// if ValidHex ( x , y ) then
68813: LD_VAR 0 4
68817: PPUSH
68818: LD_VAR 0 5
68822: PPUSH
68823: CALL_OW 488
68827: IFFALSE 68848
// ComTurnXY ( unit , x , y ) ;
68829: LD_VAR 0 1
68833: PPUSH
68834: LD_VAR 0 4
68838: PPUSH
68839: LD_VAR 0 5
68843: PPUSH
68844: CALL_OW 118
// end ;
68848: LD_VAR 0 3
68852: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68853: LD_INT 0
68855: PPUSH
68856: PPUSH
// result := false ;
68857: LD_ADDR_VAR 0 3
68861: PUSH
68862: LD_INT 0
68864: ST_TO_ADDR
// if not units then
68865: LD_VAR 0 2
68869: NOT
68870: IFFALSE 68874
// exit ;
68872: GO 68919
// for i in units do
68874: LD_ADDR_VAR 0 4
68878: PUSH
68879: LD_VAR 0 2
68883: PUSH
68884: FOR_IN
68885: IFFALSE 68917
// if See ( side , i ) then
68887: LD_VAR 0 1
68891: PPUSH
68892: LD_VAR 0 4
68896: PPUSH
68897: CALL_OW 292
68901: IFFALSE 68915
// begin result := true ;
68903: LD_ADDR_VAR 0 3
68907: PUSH
68908: LD_INT 1
68910: ST_TO_ADDR
// exit ;
68911: POP
68912: POP
68913: GO 68919
// end ;
68915: GO 68884
68917: POP
68918: POP
// end ;
68919: LD_VAR 0 3
68923: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68924: LD_INT 0
68926: PPUSH
68927: PPUSH
68928: PPUSH
68929: PPUSH
// if not unit or not points then
68930: LD_VAR 0 1
68934: NOT
68935: PUSH
68936: LD_VAR 0 2
68940: NOT
68941: OR
68942: IFFALSE 68946
// exit ;
68944: GO 69036
// dist := 99999 ;
68946: LD_ADDR_VAR 0 5
68950: PUSH
68951: LD_INT 99999
68953: ST_TO_ADDR
// for i in points do
68954: LD_ADDR_VAR 0 4
68958: PUSH
68959: LD_VAR 0 2
68963: PUSH
68964: FOR_IN
68965: IFFALSE 69034
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68967: LD_ADDR_VAR 0 6
68971: PUSH
68972: LD_VAR 0 1
68976: PPUSH
68977: LD_VAR 0 4
68981: PUSH
68982: LD_INT 1
68984: ARRAY
68985: PPUSH
68986: LD_VAR 0 4
68990: PUSH
68991: LD_INT 2
68993: ARRAY
68994: PPUSH
68995: CALL_OW 297
68999: ST_TO_ADDR
// if tmpDist < dist then
69000: LD_VAR 0 6
69004: PUSH
69005: LD_VAR 0 5
69009: LESS
69010: IFFALSE 69032
// begin result := i ;
69012: LD_ADDR_VAR 0 3
69016: PUSH
69017: LD_VAR 0 4
69021: ST_TO_ADDR
// dist := tmpDist ;
69022: LD_ADDR_VAR 0 5
69026: PUSH
69027: LD_VAR 0 6
69031: ST_TO_ADDR
// end ; end ;
69032: GO 68964
69034: POP
69035: POP
// end ; end_of_file
69036: LD_VAR 0 3
69040: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69041: LD_VAR 0 1
69045: PUSH
69046: LD_INT 200
69048: DOUBLE
69049: GREATEREQUAL
69050: IFFALSE 69058
69052: LD_INT 299
69054: DOUBLE
69055: LESSEQUAL
69056: IFTRUE 69060
69058: GO 69092
69060: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69061: LD_VAR 0 1
69065: PPUSH
69066: LD_VAR 0 2
69070: PPUSH
69071: LD_VAR 0 3
69075: PPUSH
69076: LD_VAR 0 4
69080: PPUSH
69081: LD_VAR 0 5
69085: PPUSH
69086: CALL 25067 0 5
69090: GO 69169
69092: LD_INT 300
69094: DOUBLE
69095: GREATEREQUAL
69096: IFFALSE 69104
69098: LD_INT 399
69100: DOUBLE
69101: LESSEQUAL
69102: IFTRUE 69106
69104: GO 69168
69106: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69107: LD_VAR 0 1
69111: PPUSH
69112: LD_VAR 0 2
69116: PPUSH
69117: LD_VAR 0 3
69121: PPUSH
69122: LD_VAR 0 4
69126: PPUSH
69127: LD_VAR 0 5
69131: PPUSH
69132: LD_VAR 0 6
69136: PPUSH
69137: LD_VAR 0 7
69141: PPUSH
69142: LD_VAR 0 8
69146: PPUSH
69147: LD_VAR 0 9
69151: PPUSH
69152: LD_VAR 0 10
69156: PPUSH
69157: LD_VAR 0 11
69161: PPUSH
69162: CALL 22965 0 11
69166: GO 69169
69168: POP
// end ;
69169: PPOPN 11
69171: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69172: LD_VAR 0 1
69176: PPUSH
69177: LD_VAR 0 2
69181: PPUSH
69182: LD_VAR 0 3
69186: PPUSH
69187: LD_VAR 0 4
69191: PPUSH
69192: LD_VAR 0 5
69196: PPUSH
69197: CALL 25059 0 5
// end ; end_of_file
69201: PPOPN 5
69203: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69204: LD_VAR 0 1
69208: PPUSH
69209: LD_VAR 0 2
69213: PPUSH
69214: LD_VAR 0 3
69218: PPUSH
69219: LD_VAR 0 4
69223: PPUSH
69224: LD_VAR 0 5
69228: PPUSH
69229: LD_VAR 0 6
69233: PPUSH
69234: CALL 11160 0 6
// end ;
69238: PPOPN 6
69240: END
