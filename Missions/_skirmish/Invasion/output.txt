// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9175 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// game_started := false ;
2667: LD_ADDR_EXP 7
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// points := 0 ;
2675: LD_ADDR_EXP 2
2679: PUSH
2680: LD_INT 0
2682: ST_TO_ADDR
// waveNumber := 0 ;
2683: LD_ADDR_EXP 5
2687: PUSH
2688: LD_INT 0
2690: ST_TO_ADDR
// timeToNextAttack := 0 ;
2691: LD_ADDR_EXP 4
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// graveyard := [ ] ;
2699: LD_ADDR_EXP 8
2703: PUSH
2704: EMPTY
2705: ST_TO_ADDR
// base_x := 1 ;
2706: LD_ADDR_EXP 9
2710: PUSH
2711: LD_INT 1
2713: ST_TO_ADDR
// base_y := 1 ;
2714: LD_ADDR_EXP 10
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// if difficultyLevel > 2 then
2722: LD_EXP 3
2726: PUSH
2727: LD_INT 2
2729: GREATER
2730: IFFALSE 2745
// SetTech ( 5 , 7 , state_researched ) ;
2732: LD_INT 5
2734: PPUSH
2735: LD_INT 7
2737: PPUSH
2738: LD_INT 2
2740: PPUSH
2741: CALL_OW 322
// if not playerNation then
2745: LD_EXP 6
2749: NOT
2750: IFFALSE 2776
// begin points := 100 ;
2752: LD_ADDR_EXP 2
2756: PUSH
2757: LD_INT 100
2759: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2760: LD_ADDR_EXP 6
2764: PUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_INT 3
2770: PPUSH
2771: CALL_OW 12
2775: ST_TO_ADDR
// end ; your_side := playerNation ;
2776: LD_ADDR_OWVAR 2
2780: PUSH
2781: LD_EXP 6
2785: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2786: LD_OWVAR 2
2790: PPUSH
2791: LD_INT 4
2793: PPUSH
2794: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2798: LD_INT 25
2800: PUSH
2801: LD_INT 20
2803: PUSH
2804: LD_INT 15
2806: PUSH
2807: LD_INT 10
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: PUSH
2816: LD_EXP 3
2820: ARRAY
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 2
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PPUSH
2875: LD_INT 1
2877: PUSH
2878: LD_INT 2
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_INT 88
2891: PPUSH
2892: LD_INT 76
2894: PPUSH
2895: LD_INT 6
2897: PPUSH
2898: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2902: LD_EXP 6
2906: PPUSH
2907: LD_INT 9
2909: PUSH
2910: LD_INT 7
2912: PUSH
2913: LD_INT 5
2915: PUSH
2916: LD_INT 3
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_EXP 3
2929: ARRAY
2930: PPUSH
2931: LD_INT 24
2933: PUSH
2934: LD_INT 16
2936: PUSH
2937: LD_INT 12
2939: PUSH
2940: LD_INT 8
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 88
2957: PPUSH
2958: LD_INT 76
2960: PPUSH
2961: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2965: LD_INT 88
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2975: LD_INT 90
2977: PPUSH
2978: LD_INT 79
2980: PPUSH
2981: LD_OWVAR 2
2985: PPUSH
2986: LD_INT 50
2988: NEG
2989: PPUSH
2990: CALL_OW 330
// if debug then
2994: LD_EXP 1
2998: IFFALSE 3009
// FogOff ( your_side ) ;
3000: LD_OWVAR 2
3004: PPUSH
3005: CALL_OW 344
// end ;
3009: LD_VAR 0 1
3013: RET
// every 0 0$01 trigger game_started do var i ;
3014: LD_EXP 7
3018: IFFALSE 3252
3020: GO 3022
3022: DISABLE
3023: LD_INT 0
3025: PPUSH
// begin while ( game_started ) do
3026: LD_EXP 7
3030: IFFALSE 3252
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3032: LD_INT 22
3034: PUSH
3035: LD_INT 7
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: PUSH
3047: LD_INT 5
3049: LESS
3050: PUSH
3051: LD_EXP 4
3055: PUSH
3056: LD_INT 0
3058: LESSEQUAL
3059: AND
3060: IFFALSE 3243
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3062: LD_INT 22
3064: PUSH
3065: LD_INT 4
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: IFFALSE 3114
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3078: LD_ADDR_VAR 0 1
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_INT 4
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PPUSH
3093: CALL_OW 69
3097: PUSH
3098: FOR_IN
3099: IFFALSE 3112
// RemoveUnit ( i ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 64
3110: GO 3098
3112: POP
3113: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3114: LD_EXP 5
3118: PUSH
3119: LD_INT 3
3121: MOD
3122: PUSH
3123: LD_INT 0
3125: EQUAL
3126: PUSH
3127: LD_EXP 5
3131: PUSH
3132: LD_INT 10
3134: MOD
3135: PUSH
3136: LD_INT 0
3138: EQUAL
3139: OR
3140: PUSH
3141: LD_EXP 5
3145: PUSH
3146: LD_INT 0
3148: GREATER
3149: AND
3150: IFFALSE 3156
// InitBonus ;
3152: CALL 9272 0 0
// if waveNumber mod 10 = 0 then
3156: LD_EXP 5
3160: PUSH
3161: LD_INT 10
3163: MOD
3164: PUSH
3165: LD_INT 0
3167: EQUAL
3168: IFFALSE 3174
// SaveForQuickRestart ;
3170: CALL_OW 22
// if waveNumber = 100 then
3174: LD_EXP 5
3178: PUSH
3179: LD_INT 100
3181: EQUAL
3182: IFFALSE 3195
// begin FogOff ( your_side ) ;
3184: LD_OWVAR 2
3188: PPUSH
3189: CALL_OW 344
// break ;
3193: GO 3252
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3195: LD_ADDR_EXP 4
3199: PUSH
3200: LD_INT 3150
3202: PPUSH
3203: LD_INT 5250
3205: PPUSH
3206: CALL_OW 12
3210: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3211: LD_EXP 4
3215: PPUSH
3216: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3220: LD_ADDR_EXP 5
3224: PUSH
3225: LD_EXP 5
3229: PUSH
3230: LD_INT 1
3232: PLUS
3233: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3234: LD_EXP 5
3238: PPUSH
3239: CALL 4273 0 1
// end ; Wait ( 0 0$01 ) ;
3243: LD_INT 35
3245: PPUSH
3246: CALL_OW 67
// end ;
3250: GO 3026
// end ;
3252: PPOPN 1
3254: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3255: LD_EXP 4
3259: PUSH
3260: LD_INT 0
3262: GREATER
3263: IFFALSE 3283
3265: GO 3267
3267: DISABLE
// begin enable ;
3268: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3269: LD_ADDR_EXP 4
3273: PUSH
3274: LD_EXP 4
3278: PUSH
3279: LD_INT 35
3281: MINUS
3282: ST_TO_ADDR
// end ; end_of_file
3283: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3284: LD_VAR 0 1
3288: PUSH
3289: LD_EXP 13
3293: IN
3294: NOT
3295: IFFALSE 3326
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3297: LD_ADDR_EXP 13
3301: PUSH
3302: LD_EXP 13
3306: PPUSH
3307: LD_EXP 13
3311: PUSH
3312: LD_INT 1
3314: PLUS
3315: PPUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 2
3325: ST_TO_ADDR
// end ;
3326: PPOPN 1
3328: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 26755 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 255
3347: PUSH
3348: LD_OWVAR 2
3352: EQUAL
3353: PUSH
3354: LD_VAR 0 1
3358: PPUSH
3359: CALL_OW 247
3363: PUSH
3364: LD_INT 1
3366: EQUAL
3367: AND
3368: IFFALSE 3399
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3370: LD_ADDR_EXP 8
3374: PUSH
3375: LD_EXP 8
3379: PPUSH
3380: LD_EXP 8
3384: PUSH
3385: LD_INT 1
3387: PLUS
3388: PPUSH
3389: LD_VAR 0 1
3393: PPUSH
3394: CALL_OW 2
3398: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3399: LD_VAR 0 1
3403: PPUSH
3404: CALL_OW 255
3408: PUSH
3409: LD_INT 7
3411: EQUAL
3412: IFFALSE 3786
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3414: LD_VAR 0 1
3418: PUSH
3419: LD_INT 34
3421: PUSH
3422: LD_INT 91
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: PPUSH
3429: CALL_OW 69
3433: IN
3434: IFFALSE 3479
// begin if Rand ( 1 , 100 ) <= 70 then
3436: LD_INT 1
3438: PPUSH
3439: LD_INT 100
3441: PPUSH
3442: CALL_OW 12
3446: PUSH
3447: LD_INT 70
3449: LESSEQUAL
3450: IFFALSE 3479
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: CALL_OW 250
3461: PPUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 251
3471: PPUSH
3472: LD_INT 10
3474: PPUSH
3475: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3479: LD_VAR 0 1
3483: PPUSH
3484: CALL_OW 247
3488: PUSH
3489: LD_INT 1
3491: DOUBLE
3492: EQUAL
3493: IFTRUE 3497
3495: GO 3631
3497: POP
// begin case GetClass ( un ) of class_apeman :
3498: LD_VAR 0 1
3502: PPUSH
3503: CALL_OW 257
3507: PUSH
3508: LD_INT 12
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3526
3516: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3517: LD_INT 2
3519: PPUSH
3520: CALL 471 0 1
3524: GO 3629
3526: LD_INT 15
3528: DOUBLE
3529: EQUAL
3530: IFTRUE 3534
3532: GO 3544
3534: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3535: LD_INT 5
3537: PPUSH
3538: CALL 471 0 1
3542: GO 3629
3544: LD_INT 17
3546: DOUBLE
3547: EQUAL
3548: IFTRUE 3552
3550: GO 3562
3552: POP
// AddPoints ( 30 ) ; class_soldier :
3553: LD_INT 30
3555: PPUSH
3556: CALL 471 0 1
3560: GO 3629
3562: LD_INT 1
3564: DOUBLE
3565: EQUAL
3566: IFTRUE 3570
3568: GO 3580
3570: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3571: LD_INT 50
3573: PPUSH
3574: CALL 471 0 1
3578: GO 3629
3580: LD_INT 9
3582: DOUBLE
3583: EQUAL
3584: IFTRUE 3600
3586: LD_INT 5
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3600
3592: LD_INT 8
3594: DOUBLE
3595: EQUAL
3596: IFTRUE 3600
3598: GO 3610
3600: POP
// AddPoints ( 75 ) ; class_mechanic :
3601: LD_INT 75
3603: PPUSH
3604: CALL 471 0 1
3608: GO 3629
3610: LD_INT 3
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3618
3616: GO 3628
3618: POP
// AddPoints ( 60 ) ; end ;
3619: LD_INT 60
3621: PPUSH
3622: CALL 471 0 1
3626: GO 3629
3628: POP
// end ; unit_vehicle :
3629: GO 3786
3631: LD_INT 2
3633: DOUBLE
3634: EQUAL
3635: IFTRUE 3639
3637: GO 3785
3639: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 265
3649: PUSH
3650: LD_INT 12
3652: DOUBLE
3653: EQUAL
3654: IFTRUE 3670
3656: LD_INT 1
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3670
3662: LD_INT 11
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3680
3670: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3671: LD_INT 100
3673: PPUSH
3674: CALL 471 0 1
3678: GO 3783
3680: LD_INT 13
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3718
3686: LD_INT 14
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3718
3692: LD_INT 2
3694: DOUBLE
3695: EQUAL
3696: IFTRUE 3718
3698: LD_INT 3
3700: DOUBLE
3701: EQUAL
3702: IFTRUE 3718
3704: LD_INT 21
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3718
3710: LD_INT 22
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3718
3716: GO 3728
3718: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3719: LD_INT 250
3721: PPUSH
3722: CALL 471 0 1
3726: GO 3783
3728: LD_INT 4
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3754
3734: LD_INT 5
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3754
3740: LD_INT 23
3742: DOUBLE
3743: EQUAL
3744: IFTRUE 3754
3746: LD_INT 24
3748: DOUBLE
3749: EQUAL
3750: IFTRUE 3754
3752: GO 3764
3754: POP
// AddPoints ( 500 ) ; 25 :
3755: LD_INT 500
3757: PPUSH
3758: CALL 471 0 1
3762: GO 3783
3764: LD_INT 25
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3782
3772: POP
// AddPoints ( 1250 ) ; end ;
3773: LD_INT 1250
3775: PPUSH
3776: CALL 471 0 1
3780: GO 3783
3782: POP
// end ; end ;
3783: GO 3786
3785: POP
// end ; end ;
3786: PPOPN 1
3788: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3789: LD_VAR 0 1
3793: PPUSH
3794: CALL_OW 266
3798: PUSH
3799: LD_INT 0
3801: EQUAL
3802: IFFALSE 3852
// begin base_x := GetX ( b ) ;
3804: LD_ADDR_EXP 9
3808: PUSH
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 250
3818: ST_TO_ADDR
// base_y := GetY ( b ) ;
3819: LD_ADDR_EXP 10
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 251
3833: ST_TO_ADDR
// base := b ;
3834: LD_ADDR_EXP 11
3838: PUSH
3839: LD_VAR 0 1
3843: ST_TO_ADDR
// game_started := true ;
3844: LD_ADDR_EXP 7
3848: PUSH
3849: LD_INT 1
3851: ST_TO_ADDR
// end ; end ;
3852: PPOPN 1
3854: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3855: LD_VAR 0 1
3859: PPUSH
3860: CALL_OW 255
3864: PUSH
3865: LD_OWVAR 2
3869: EQUAL
3870: IFFALSE 3874
// exit ;
3872: GO 4021
// if GetType ( un ) = unit_vehicle then
3874: LD_VAR 0 1
3878: PPUSH
3879: CALL_OW 247
3883: PUSH
3884: LD_INT 2
3886: EQUAL
3887: IFFALSE 3940
// begin KillUnit ( un ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 248
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: PUSH
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 264
3921: PUSH
3922: LD_INT 49
3924: PUSH
3925: EMPTY
3926: LIST
3927: IN
3928: OR
3929: IFFALSE 3940
// ExplodeVehicle ( un ) ;
3931: LD_VAR 0 1
3935: PPUSH
3936: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3940: LD_VAR 0 1
3944: PPUSH
3945: CALL_OW 247
3949: PUSH
3950: LD_INT 1
3952: EQUAL
3953: IFFALSE 4021
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 248
3964: PUSH
3965: LD_INT 2
3967: EQUAL
3968: PUSH
3969: LD_INT 5
3971: PPUSH
3972: LD_INT 7
3974: PPUSH
3975: CALL_OW 321
3979: PUSH
3980: LD_INT 2
3982: NONEQUAL
3983: AND
3984: PUSH
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 248
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: IN
4009: OR
4010: IFFALSE 4021
// KillUnit ( un ) ;
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 66
// end ; end ;
4021: PPOPN 1
4023: END
// every 0 0$1 do
4024: GO 4026
4026: DISABLE
// begin enable ;
4027: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4028: LD_INT 4
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 22
4036: PUSH
4037: LD_OWVAR 2
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 513
// end ;
4050: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4051: LD_EXP 7
4055: PUSH
4056: LD_INT 22
4058: PUSH
4059: LD_OWVAR 2
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: LD_INT 1
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PPUSH
4082: CALL_OW 69
4086: PUSH
4087: LD_INT 0
4089: EQUAL
4090: AND
4091: IFFALSE 4103
4093: GO 4095
4095: DISABLE
// YouLost ( die ) ;
4096: LD_STRING die
4098: PPUSH
4099: CALL_OW 104
4103: END
// every 0 0$21 trigger tick <= 15 15$00 do
4104: LD_OWVAR 1
4108: PUSH
4109: LD_INT 31500
4111: LESSEQUAL
4112: IFFALSE 4139
4114: GO 4116
4116: DISABLE
// begin enable ;
4117: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4118: LD_INT 1
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: CALL_OW 12
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: CALL_OW 55
// end ;
4139: END
// every 0 0$51 trigger tick > 15 15$00 do
4140: LD_OWVAR 1
4144: PUSH
4145: LD_INT 31500
4147: GREATER
4148: IFFALSE 4195
4150: GO 4152
4152: DISABLE
// begin enable ;
4153: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4154: LD_INT 22
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 69
4168: PUSH
4169: LD_INT 0
4171: EQUAL
4172: IFFALSE 4195
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4174: LD_INT 1
4176: PPUSH
4177: LD_INT 5
4179: PPUSH
4180: CALL_OW 12
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: LD_INT 1
4190: PPUSH
4191: CALL_OW 55
// end ;
4195: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 308
4208: IFFALSE 4219
// KillUnit ( building ) ;
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 66
// end ;
4219: PPOPN 2
4221: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_VAR 0 2
4231: PPUSH
4232: LD_VAR 0 3
4236: PPUSH
4237: CALL 26851 0 3
// end ;
4241: PPOPN 3
4243: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_VAR 0 2
4253: PPUSH
4254: CALL 26875 0 2
// end ;
4258: PPOPN 2
4260: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4261: LD_VAR 0 1
4265: PPUSH
4266: CALL 26859 0 1
// end ; end_of_file
4270: PPOPN 1
4272: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
4279: PPUSH
4280: PPUSH
4281: PPUSH
4282: PPUSH
4283: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4284: LD_ADDR_VAR 0 7
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: LD_INT 2
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: ST_TO_ADDR
// uc_side := 7 ;
4299: LD_ADDR_OWVAR 20
4303: PUSH
4304: LD_INT 7
4306: ST_TO_ADDR
// l := 0 ;
4307: LD_ADDR_VAR 0 9
4311: PUSH
4312: LD_INT 0
4314: ST_TO_ADDR
// case num of 1 :
4315: LD_VAR 0 1
4319: PUSH
4320: LD_INT 1
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4347
4328: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: LD_INT 12
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: CALL 6676 0 2
4344: ST_TO_ADDR
4345: GO 6485
4347: LD_INT 2
4349: DOUBLE
4350: EQUAL
4351: IFTRUE 4355
4353: GO 4374
4355: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 12
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL 6747 0 2
4371: ST_TO_ADDR
4372: GO 6485
4374: LD_INT 3
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4401
4382: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: LD_INT 12
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: CALL 6818 0 2
4398: ST_TO_ADDR
4399: GO 6485
4401: LD_INT 4
4403: DOUBLE
4404: EQUAL
4405: IFTRUE 4409
4407: GO 4428
4409: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4410: LD_ADDR_VAR 0 2
4414: PUSH
4415: LD_INT 7
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL 6897 0 2
4425: ST_TO_ADDR
4426: GO 6485
4428: LD_INT 5
4430: DOUBLE
4431: EQUAL
4432: IFTRUE 4436
4434: GO 4455
4436: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: LD_INT 7
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: CALL 7293 0 2
4452: ST_TO_ADDR
4453: GO 6485
4455: LD_INT 6
4457: DOUBLE
4458: EQUAL
4459: IFTRUE 4463
4461: GO 4482
4463: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: LD_INT 6
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL 7713 0 2
4479: ST_TO_ADDR
4480: GO 6485
4482: LD_INT 7
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4509
4490: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 15
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL 8133 0 2
4506: ST_TO_ADDR
4507: GO 6485
4509: LD_INT 8
4511: DOUBLE
4512: EQUAL
4513: IFTRUE 4517
4515: GO 4536
4517: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 7
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: CALL 8234 0 2
4533: ST_TO_ADDR
4534: GO 6485
4536: LD_INT 9
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4575
4544: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: LD_INT 4
4552: PPUSH
4553: LD_INT 1
4555: PPUSH
4556: CALL 8234 0 2
4560: PUSH
4561: LD_INT 7
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: CALL 7293 0 2
4571: ADD
4572: ST_TO_ADDR
4573: GO 6485
4575: LD_INT 10
4577: DOUBLE
4578: EQUAL
4579: IFTRUE 4583
4581: GO 4614
4583: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4584: LD_ADDR_VAR 0 2
4588: PUSH
4589: LD_INT 9
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: CALL 8133 0 2
4599: PUSH
4600: LD_INT 14
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL 6818 0 2
4610: ADD
4611: ST_TO_ADDR
4612: GO 6485
4614: LD_INT 11
4616: DOUBLE
4617: EQUAL
4618: IFTRUE 4670
4620: LD_INT 21
4622: DOUBLE
4623: EQUAL
4624: IFTRUE 4670
4626: LD_INT 31
4628: DOUBLE
4629: EQUAL
4630: IFTRUE 4670
4632: LD_INT 41
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4670
4638: LD_INT 51
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4670
4644: LD_INT 61
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4670
4650: LD_INT 71
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4670
4656: LD_INT 81
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4670
4662: LD_INT 91
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4779
4670: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_INT 20
4678: PUSH
4679: LD_INT 30
4681: PUSH
4682: LD_INT 40
4684: PUSH
4685: LD_INT 45
4687: PUSH
4688: LD_INT 50
4690: PUSH
4691: LD_INT 60
4693: PUSH
4694: LD_INT 70
4696: PUSH
4697: LD_INT 80
4699: PUSH
4700: LD_INT 100
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: PUSH
4714: LD_VAR 0 1
4718: PUSH
4719: LD_INT 10
4721: DIV
4722: ARRAY
4723: PPUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: LD_INT 6
4738: PUSH
4739: LD_INT 7
4741: PUSH
4742: LD_INT 8
4744: PUSH
4745: LD_INT 9
4747: PUSH
4748: LD_INT 10
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: LD_INT 10
4769: DIV
4770: ARRAY
4771: PPUSH
4772: CALL 6676 0 2
4776: ST_TO_ADDR
4777: GO 6485
4779: LD_INT 12
4781: DOUBLE
4782: EQUAL
4783: IFTRUE 4835
4785: LD_INT 22
4787: DOUBLE
4788: EQUAL
4789: IFTRUE 4835
4791: LD_INT 32
4793: DOUBLE
4794: EQUAL
4795: IFTRUE 4835
4797: LD_INT 42
4799: DOUBLE
4800: EQUAL
4801: IFTRUE 4835
4803: LD_INT 52
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4835
4809: LD_INT 62
4811: DOUBLE
4812: EQUAL
4813: IFTRUE 4835
4815: LD_INT 72
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4835
4821: LD_INT 82
4823: DOUBLE
4824: EQUAL
4825: IFTRUE 4835
4827: LD_INT 92
4829: DOUBLE
4830: EQUAL
4831: IFTRUE 4835
4833: GO 4944
4835: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: LD_INT 16
4843: PUSH
4844: LD_INT 21
4846: PUSH
4847: LD_INT 28
4849: PUSH
4850: LD_INT 33
4852: PUSH
4853: LD_INT 39
4855: PUSH
4856: LD_INT 46
4858: PUSH
4859: LD_INT 56
4861: PUSH
4862: LD_INT 66
4864: PUSH
4865: LD_INT 80
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_VAR 0 1
4883: PUSH
4884: LD_INT 10
4886: DIV
4887: ARRAY
4888: PPUSH
4889: LD_INT 2
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: LD_INT 5
4900: PUSH
4901: LD_INT 6
4903: PUSH
4904: LD_INT 7
4906: PUSH
4907: LD_INT 8
4909: PUSH
4910: LD_INT 9
4912: PUSH
4913: LD_INT 10
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_VAR 0 1
4931: PUSH
4932: LD_INT 10
4934: DIV
4935: ARRAY
4936: PPUSH
4937: CALL 6747 0 2
4941: ST_TO_ADDR
4942: GO 6485
4944: LD_INT 13
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 5000
4950: LD_INT 23
4952: DOUBLE
4953: EQUAL
4954: IFTRUE 5000
4956: LD_INT 33
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 5000
4962: LD_INT 43
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 5000
4968: LD_INT 53
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 5000
4974: LD_INT 63
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 5000
4980: LD_INT 73
4982: DOUBLE
4983: EQUAL
4984: IFTRUE 5000
4986: LD_INT 83
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 5000
4992: LD_INT 93
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5109
5000: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: LD_INT 14
5008: PUSH
5009: LD_INT 18
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 27
5017: PUSH
5018: LD_INT 33
5020: PUSH
5021: LD_INT 39
5023: PUSH
5024: LD_INT 44
5026: PUSH
5027: LD_INT 57
5029: PUSH
5030: LD_INT 65
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: LD_VAR 0 1
5048: PUSH
5049: LD_INT 10
5051: DIV
5052: ARRAY
5053: PPUSH
5054: LD_INT 2
5056: PUSH
5057: LD_INT 3
5059: PUSH
5060: LD_INT 4
5062: PUSH
5063: LD_INT 5
5065: PUSH
5066: LD_INT 6
5068: PUSH
5069: LD_INT 7
5071: PUSH
5072: LD_INT 8
5074: PUSH
5075: LD_INT 9
5077: PUSH
5078: LD_INT 10
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_VAR 0 1
5096: PUSH
5097: LD_INT 10
5099: DIV
5100: ARRAY
5101: PPUSH
5102: CALL 6818 0 2
5106: ST_TO_ADDR
5107: GO 6485
5109: LD_INT 14
5111: DOUBLE
5112: EQUAL
5113: IFTRUE 5165
5115: LD_INT 24
5117: DOUBLE
5118: EQUAL
5119: IFTRUE 5165
5121: LD_INT 34
5123: DOUBLE
5124: EQUAL
5125: IFTRUE 5165
5127: LD_INT 44
5129: DOUBLE
5130: EQUAL
5131: IFTRUE 5165
5133: LD_INT 54
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5165
5139: LD_INT 64
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5165
5145: LD_INT 74
5147: DOUBLE
5148: EQUAL
5149: IFTRUE 5165
5151: LD_INT 84
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5165
5157: LD_INT 94
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5274
5165: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5166: LD_ADDR_VAR 0 2
5170: PUSH
5171: LD_INT 9
5173: PUSH
5174: LD_INT 15
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 30
5182: PUSH
5183: LD_INT 39
5185: PUSH
5186: LD_INT 45
5188: PUSH
5189: LD_INT 56
5191: PUSH
5192: LD_INT 60
5194: PUSH
5195: LD_INT 65
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_VAR 0 1
5213: PUSH
5214: LD_INT 10
5216: DIV
5217: ARRAY
5218: PPUSH
5219: LD_INT 2
5221: PUSH
5222: LD_INT 3
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 6
5233: PUSH
5234: LD_INT 7
5236: PUSH
5237: LD_INT 8
5239: PUSH
5240: LD_INT 9
5242: PUSH
5243: LD_INT 10
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: LD_VAR 0 1
5261: PUSH
5262: LD_INT 10
5264: DIV
5265: ARRAY
5266: PPUSH
5267: CALL 6897 0 2
5271: ST_TO_ADDR
5272: GO 6485
5274: LD_INT 15
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5330
5280: LD_INT 25
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5330
5286: LD_INT 35
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5330
5292: LD_INT 45
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5330
5298: LD_INT 55
5300: DOUBLE
5301: EQUAL
5302: IFTRUE 5330
5304: LD_INT 65
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5330
5310: LD_INT 75
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5330
5316: LD_INT 85
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5330
5322: LD_INT 95
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5439
5330: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: LD_INT 6
5338: PUSH
5339: LD_INT 11
5341: PUSH
5342: LD_INT 15
5344: PUSH
5345: LD_INT 20
5347: PUSH
5348: LD_INT 25
5350: PUSH
5351: LD_INT 30
5353: PUSH
5354: LD_INT 35
5356: PUSH
5357: LD_INT 40
5359: PUSH
5360: LD_INT 45
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 10
5381: DIV
5382: ARRAY
5383: PPUSH
5384: LD_INT 2
5386: PUSH
5387: LD_INT 3
5389: PUSH
5390: LD_INT 4
5392: PUSH
5393: LD_INT 5
5395: PUSH
5396: LD_INT 6
5398: PUSH
5399: LD_INT 7
5401: PUSH
5402: LD_INT 8
5404: PUSH
5405: LD_INT 9
5407: PUSH
5408: LD_INT 10
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_VAR 0 1
5426: PUSH
5427: LD_INT 10
5429: DIV
5430: ARRAY
5431: PPUSH
5432: CALL 7293 0 2
5436: ST_TO_ADDR
5437: GO 6485
5439: LD_INT 16
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5495
5445: LD_INT 26
5447: DOUBLE
5448: EQUAL
5449: IFTRUE 5495
5451: LD_INT 36
5453: DOUBLE
5454: EQUAL
5455: IFTRUE 5495
5457: LD_INT 46
5459: DOUBLE
5460: EQUAL
5461: IFTRUE 5495
5463: LD_INT 56
5465: DOUBLE
5466: EQUAL
5467: IFTRUE 5495
5469: LD_INT 66
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5495
5475: LD_INT 76
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5495
5481: LD_INT 86
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5495
5487: LD_INT 96
5489: DOUBLE
5490: EQUAL
5491: IFTRUE 5495
5493: GO 5604
5495: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_INT 9
5503: PUSH
5504: LD_INT 12
5506: PUSH
5507: LD_INT 15
5509: PUSH
5510: LD_INT 18
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: LD_INT 27
5521: PUSH
5522: LD_INT 30
5524: PUSH
5525: LD_INT 33
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: LD_VAR 0 1
5543: PUSH
5544: LD_INT 10
5546: DIV
5547: ARRAY
5548: PPUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 5
5560: PUSH
5561: LD_INT 6
5563: PUSH
5564: LD_INT 7
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: LD_INT 10
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: PUSH
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 10
5594: DIV
5595: ARRAY
5596: PPUSH
5597: CALL 7713 0 2
5601: ST_TO_ADDR
5602: GO 6485
5604: LD_INT 17
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5660
5610: LD_INT 27
5612: DOUBLE
5613: EQUAL
5614: IFTRUE 5660
5616: LD_INT 37
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5660
5622: LD_INT 47
5624: DOUBLE
5625: EQUAL
5626: IFTRUE 5660
5628: LD_INT 57
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5660
5634: LD_INT 67
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5660
5640: LD_INT 77
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5660
5646: LD_INT 87
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5660
5652: LD_INT 97
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5660
5658: GO 5769
5660: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5661: LD_ADDR_VAR 0 2
5665: PUSH
5666: LD_INT 14
5668: PUSH
5669: LD_INT 16
5671: PUSH
5672: LD_INT 18
5674: PUSH
5675: LD_INT 22
5677: PUSH
5678: LD_INT 24
5680: PUSH
5681: LD_INT 26
5683: PUSH
5684: LD_INT 28
5686: PUSH
5687: LD_INT 32
5689: PUSH
5690: LD_INT 35
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 10
5711: DIV
5712: ARRAY
5713: PPUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 4
5722: PUSH
5723: LD_INT 5
5725: PUSH
5726: LD_INT 6
5728: PUSH
5729: LD_INT 7
5731: PUSH
5732: LD_INT 8
5734: PUSH
5735: LD_INT 9
5737: PUSH
5738: LD_INT 10
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_VAR 0 1
5756: PUSH
5757: LD_INT 10
5759: DIV
5760: ARRAY
5761: PPUSH
5762: CALL 8133 0 2
5766: ST_TO_ADDR
5767: GO 6485
5769: LD_INT 18
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5825
5775: LD_INT 28
5777: DOUBLE
5778: EQUAL
5779: IFTRUE 5825
5781: LD_INT 38
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5825
5787: LD_INT 48
5789: DOUBLE
5790: EQUAL
5791: IFTRUE 5825
5793: LD_INT 58
5795: DOUBLE
5796: EQUAL
5797: IFTRUE 5825
5799: LD_INT 68
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5825
5805: LD_INT 78
5807: DOUBLE
5808: EQUAL
5809: IFTRUE 5825
5811: LD_INT 88
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5825
5817: LD_INT 98
5819: DOUBLE
5820: EQUAL
5821: IFTRUE 5825
5823: GO 5934
5825: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: LD_INT 9
5833: PUSH
5834: LD_INT 12
5836: PUSH
5837: LD_INT 15
5839: PUSH
5840: LD_INT 18
5842: PUSH
5843: LD_INT 21
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: LD_INT 27
5851: PUSH
5852: LD_INT 30
5854: PUSH
5855: LD_INT 33
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: LD_VAR 0 1
5873: PUSH
5874: LD_INT 10
5876: DIV
5877: ARRAY
5878: PPUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: LD_INT 7
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: LD_INT 9
5902: PUSH
5903: LD_INT 10
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_VAR 0 1
5921: PUSH
5922: LD_INT 10
5924: DIV
5925: ARRAY
5926: PPUSH
5927: CALL 8234 0 2
5931: ST_TO_ADDR
5932: GO 6485
5934: LD_INT 19
5936: DOUBLE
5937: EQUAL
5938: IFTRUE 5990
5940: LD_INT 29
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5990
5946: LD_INT 39
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5990
5952: LD_INT 49
5954: DOUBLE
5955: EQUAL
5956: IFTRUE 5990
5958: LD_INT 59
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5990
5964: LD_INT 69
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5990
5970: LD_INT 79
5972: DOUBLE
5973: EQUAL
5974: IFTRUE 5990
5976: LD_INT 89
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5990
5982: LD_INT 99
5984: DOUBLE
5985: EQUAL
5986: IFTRUE 5990
5988: GO 6201
5990: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5991: LD_ADDR_VAR 0 2
5995: PUSH
5996: LD_INT 4
5998: PUSH
5999: LD_INT 7
6001: PUSH
6002: LD_INT 10
6004: PUSH
6005: LD_INT 13
6007: PUSH
6008: LD_INT 14
6010: PUSH
6011: LD_INT 17
6013: PUSH
6014: LD_INT 19
6016: PUSH
6017: LD_INT 21
6019: PUSH
6020: LD_INT 23
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: LD_INT 10
6041: DIV
6042: ARRAY
6043: PPUSH
6044: LD_INT 2
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: LD_INT 4
6052: PUSH
6053: LD_INT 5
6055: PUSH
6056: LD_INT 6
6058: PUSH
6059: LD_INT 7
6061: PUSH
6062: LD_INT 8
6064: PUSH
6065: LD_INT 9
6067: PUSH
6068: LD_INT 10
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: PUSH
6082: LD_VAR 0 1
6086: PUSH
6087: LD_INT 10
6089: DIV
6090: ARRAY
6091: PPUSH
6092: CALL 8234 0 2
6096: PUSH
6097: LD_INT 4
6099: PUSH
6100: LD_INT 7
6102: PUSH
6103: LD_INT 10
6105: PUSH
6106: LD_INT 13
6108: PUSH
6109: LD_INT 14
6111: PUSH
6112: LD_INT 17
6114: PUSH
6115: LD_INT 19
6117: PUSH
6118: LD_INT 22
6120: PUSH
6121: LD_INT 25
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_VAR 0 1
6139: PUSH
6140: LD_INT 10
6142: DIV
6143: ARRAY
6144: PPUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: LD_INT 6
6159: PUSH
6160: LD_INT 7
6162: PUSH
6163: LD_INT 8
6165: PUSH
6166: LD_INT 9
6168: PUSH
6169: LD_INT 10
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_VAR 0 1
6187: PUSH
6188: LD_INT 10
6190: DIV
6191: ARRAY
6192: PPUSH
6193: CALL 7293 0 2
6197: ADD
6198: ST_TO_ADDR
6199: GO 6485
6201: LD_INT 20
6203: DOUBLE
6204: EQUAL
6205: IFTRUE 6257
6207: LD_INT 30
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6257
6213: LD_INT 40
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6257
6219: LD_INT 50
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6257
6225: LD_INT 60
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6257
6231: LD_INT 70
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6257
6237: LD_INT 80
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6257
6243: LD_INT 90
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6257
6249: LD_INT 100
6251: DOUBLE
6252: EQUAL
6253: IFTRUE 6257
6255: GO 6484
6257: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6258: LD_ADDR_VAR 0 2
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 7
6268: PUSH
6269: LD_INT 10
6271: PUSH
6272: LD_INT 13
6274: PUSH
6275: LD_INT 14
6277: PUSH
6278: LD_INT 17
6280: PUSH
6281: LD_INT 19
6283: PUSH
6284: LD_INT 21
6286: PUSH
6287: LD_INT 23
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 10
6308: DIVREAL
6309: PUSH
6310: LD_INT 1
6312: MINUS
6313: ARRAY
6314: PPUSH
6315: LD_INT 2
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: LD_INT 7
6332: PUSH
6333: LD_INT 8
6335: PUSH
6336: LD_INT 9
6338: PUSH
6339: LD_INT 10
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 10
6360: DIVREAL
6361: PUSH
6362: LD_INT 1
6364: MINUS
6365: ARRAY
6366: PPUSH
6367: CALL 8133 0 2
6371: PUSH
6372: LD_INT 4
6374: PUSH
6375: LD_INT 7
6377: PUSH
6378: LD_INT 10
6380: PUSH
6381: LD_INT 13
6383: PUSH
6384: LD_INT 14
6386: PUSH
6387: LD_INT 17
6389: PUSH
6390: LD_INT 19
6392: PUSH
6393: LD_INT 22
6395: PUSH
6396: LD_INT 25
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 10
6417: DIVREAL
6418: PUSH
6419: LD_INT 1
6421: MINUS
6422: ARRAY
6423: PPUSH
6424: LD_INT 2
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: LD_INT 6
6438: PUSH
6439: LD_INT 7
6441: PUSH
6442: LD_INT 8
6444: PUSH
6445: LD_INT 9
6447: PUSH
6448: LD_INT 10
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: LD_VAR 0 1
6466: PUSH
6467: LD_INT 10
6469: DIVREAL
6470: PUSH
6471: LD_INT 1
6473: MINUS
6474: ARRAY
6475: PPUSH
6476: CALL 7713 0 2
6480: ADD
6481: ST_TO_ADDR
6482: GO 6485
6484: POP
// for i in result do
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: LD_VAR 0 2
6494: PUSH
6495: FOR_IN
6496: IFFALSE 6669
// begin a := rand ( 1 , 2 ) ;
6498: LD_ADDR_VAR 0 8
6502: PUSH
6503: LD_INT 1
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: CALL_OW 12
6513: ST_TO_ADDR
// if a = 1 then
6514: LD_VAR 0 8
6518: PUSH
6519: LD_INT 1
6521: EQUAL
6522: IFFALSE 6538
// SetDir ( i , 3 ) else
6524: LD_VAR 0 3
6528: PPUSH
6529: LD_INT 3
6531: PPUSH
6532: CALL_OW 233
6536: GO 6550
// SetDir ( i , 5 ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_INT 5
6545: PPUSH
6546: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_VAR 0 7
6559: PUSH
6560: LD_VAR 0 8
6564: ARRAY
6565: PPUSH
6566: LD_INT 0
6568: PPUSH
6569: CALL_OW 49
// if GetControl ( i ) = control_manual then
6573: LD_VAR 0 3
6577: PPUSH
6578: CALL_OW 263
6582: PUSH
6583: LD_INT 1
6585: EQUAL
6586: IFFALSE 6632
// begin uc_nation := GetNation ( i ) ;
6588: LD_ADDR_OWVAR 21
6592: PUSH
6593: LD_VAR 0 3
6597: PPUSH
6598: CALL_OW 248
6602: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6603: LD_INT 0
6605: PPUSH
6606: LD_INT 3
6608: PPUSH
6609: LD_VAR 0 5
6613: PPUSH
6614: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6618: CALL_OW 44
6622: PPUSH
6623: LD_VAR 0 3
6627: PPUSH
6628: CALL_OW 52
// end ; l := l + 1 ;
6632: LD_ADDR_VAR 0 9
6636: PUSH
6637: LD_VAR 0 9
6641: PUSH
6642: LD_INT 1
6644: PLUS
6645: ST_TO_ADDR
// if l mod 10 = 0 then
6646: LD_VAR 0 9
6650: PUSH
6651: LD_INT 10
6653: MOD
6654: PUSH
6655: LD_INT 0
6657: EQUAL
6658: IFFALSE 6667
// Wait ( 0 0$02 ) ;
6660: LD_INT 70
6662: PPUSH
6663: CALL_OW 67
// end ;
6667: GO 6495
6669: POP
6670: POP
// end ;
6671: LD_VAR 0 2
6675: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6676: LD_INT 0
6678: PPUSH
6679: PPUSH
6680: PPUSH
// uc_nation := nation_nature ;
6681: LD_ADDR_OWVAR 21
6685: PUSH
6686: LD_INT 0
6688: ST_TO_ADDR
// for i = 1 to n do
6689: LD_ADDR_VAR 0 4
6693: PUSH
6694: DOUBLE
6695: LD_INT 1
6697: DEC
6698: ST_TO_ADDR
6699: LD_VAR 0 1
6703: PUSH
6704: FOR_TO
6705: IFFALSE 6740
// begin PrepareHuman ( false , class_apeman , skill ) ;
6707: LD_INT 0
6709: PPUSH
6710: LD_INT 12
6712: PPUSH
6713: LD_VAR 0 2
6717: PPUSH
6718: CALL_OW 380
// result := result ^ CreateHuman ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_VAR 0 3
6731: PUSH
6732: CALL_OW 44
6736: ADD
6737: ST_TO_ADDR
// end ;
6738: GO 6704
6740: POP
6741: POP
// end ;
6742: LD_VAR 0 3
6746: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6747: LD_INT 0
6749: PPUSH
6750: PPUSH
6751: PPUSH
// uc_nation := nation_nature ;
6752: LD_ADDR_OWVAR 21
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// for i = 1 to n do
6760: LD_ADDR_VAR 0 4
6764: PUSH
6765: DOUBLE
6766: LD_INT 1
6768: DEC
6769: ST_TO_ADDR
6770: LD_VAR 0 1
6774: PUSH
6775: FOR_TO
6776: IFFALSE 6811
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6778: LD_INT 0
6780: PPUSH
6781: LD_INT 15
6783: PPUSH
6784: LD_VAR 0 2
6788: PPUSH
6789: CALL_OW 380
// result := result ^ CreateHuman ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_VAR 0 3
6802: PUSH
6803: CALL_OW 44
6807: ADD
6808: ST_TO_ADDR
// end ;
6809: GO 6775
6811: POP
6812: POP
// end ;
6813: LD_VAR 0 3
6817: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6818: LD_INT 0
6820: PPUSH
6821: PPUSH
6822: PPUSH
// for i = 1 to n do
6823: LD_ADDR_VAR 0 4
6827: PUSH
6828: DOUBLE
6829: LD_INT 1
6831: DEC
6832: ST_TO_ADDR
6833: LD_VAR 0 1
6837: PUSH
6838: FOR_TO
6839: IFFALSE 6890
// begin uc_nation := rand ( 1 , 3 ) ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_INT 3
6851: PPUSH
6852: CALL_OW 12
6856: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6857: LD_INT 0
6859: PPUSH
6860: LD_INT 1
6862: PPUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 380
// result := result ^ CreateHuman ;
6872: LD_ADDR_VAR 0 3
6876: PUSH
6877: LD_VAR 0 3
6881: PUSH
6882: CALL_OW 44
6886: ADD
6887: ST_TO_ADDR
// end ;
6888: GO 6838
6890: POP
6891: POP
// end ;
6892: LD_VAR 0 3
6896: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
// for i = 1 to n do
6906: LD_ADDR_VAR 0 4
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_VAR 0 1
6920: PUSH
6921: FOR_TO
6922: IFFALSE 7286
// begin uc_nation := rand ( 1 , 3 ) ;
6924: LD_ADDR_OWVAR 21
6928: PUSH
6929: LD_INT 1
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: CALL_OW 12
6939: ST_TO_ADDR
// case uc_nation of 1 :
6940: LD_OWVAR 21
6944: PUSH
6945: LD_INT 1
6947: DOUBLE
6948: EQUAL
6949: IFTRUE 6953
6951: GO 7016
6953: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6954: LD_ADDR_VAR 0 6
6958: PUSH
6959: LD_INT 1
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6969: LD_ADDR_VAR 0 7
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6984: LD_ADDR_VAR 0 8
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
6999: LD_ADDR_VAR 0 9
7003: PUSH
7004: LD_INT 1
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: ST_TO_ADDR
// end ; 2 :
7014: GO 7151
7016: LD_INT 2
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7087
7024: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_INT 12
7032: PUSH
7033: LD_INT 11
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7040: LD_ADDR_VAR 0 7
7044: PUSH
7045: LD_INT 23
7047: PUSH
7048: LD_INT 24
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7055: LD_ADDR_VAR 0 8
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 5
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_INT 1
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
// end ; 3 :
7085: GO 7151
7087: LD_INT 3
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7150
7095: POP
// begin chassis := [ ru_medium_wheeled ] ;
7096: LD_ADDR_VAR 0 6
7100: PUSH
7101: LD_INT 21
7103: PUSH
7104: EMPTY
7105: LIST
7106: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7107: LD_ADDR_VAR 0 7
7111: PUSH
7112: LD_INT 42
7114: PUSH
7115: LD_INT 44
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7122: LD_ADDR_VAR 0 8
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: LD_INT 3
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7137: LD_ADDR_VAR 0 9
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: ST_TO_ADDR
// end ; end ;
7148: GO 7151
7150: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7151: LD_ADDR_OWVAR 37
7155: PUSH
7156: LD_VAR 0 6
7160: PUSH
7161: LD_INT 1
7163: PPUSH
7164: LD_VAR 0 6
7168: PPUSH
7169: CALL_OW 12
7173: ARRAY
7174: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7175: LD_ADDR_OWVAR 39
7179: PUSH
7180: LD_VAR 0 9
7184: PUSH
7185: LD_INT 1
7187: PPUSH
7188: LD_VAR 0 9
7192: PPUSH
7193: CALL_OW 12
7197: ARRAY
7198: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7199: LD_ADDR_OWVAR 38
7203: PUSH
7204: LD_VAR 0 8
7208: PUSH
7209: LD_INT 1
7211: PPUSH
7212: LD_VAR 0 8
7216: PPUSH
7217: CALL_OW 12
7221: ARRAY
7222: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7223: LD_ADDR_OWVAR 40
7227: PUSH
7228: LD_VAR 0 7
7232: PUSH
7233: LD_INT 1
7235: PPUSH
7236: LD_VAR 0 7
7240: PPUSH
7241: CALL_OW 12
7245: ARRAY
7246: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7247: LD_ADDR_OWVAR 41
7251: PUSH
7252: LD_INT 100
7254: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7255: LD_ADDR_VAR 0 3
7259: PUSH
7260: LD_VAR 0 3
7264: PPUSH
7265: LD_VAR 0 3
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: CALL_OW 45
7278: PPUSH
7279: CALL_OW 2
7283: ST_TO_ADDR
// end ;
7284: GO 6921
7286: POP
7287: POP
// end ;
7288: LD_VAR 0 3
7292: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
7301: PPUSH
// for i = 1 to n do
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: DOUBLE
7308: LD_INT 1
7310: DEC
7311: ST_TO_ADDR
7312: LD_VAR 0 1
7316: PUSH
7317: FOR_TO
7318: IFFALSE 7706
// begin uc_nation := rand ( 1 , 3 ) ;
7320: LD_ADDR_OWVAR 21
7324: PUSH
7325: LD_INT 1
7327: PPUSH
7328: LD_INT 3
7330: PPUSH
7331: CALL_OW 12
7335: ST_TO_ADDR
// case uc_nation of 1 :
7336: LD_OWVAR 21
7340: PUSH
7341: LD_INT 1
7343: DOUBLE
7344: EQUAL
7345: IFTRUE 7349
7347: GO 7420
7349: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: LD_INT 2
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7365: LD_ADDR_VAR 0 7
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: LD_INT 5
7375: PUSH
7376: LD_INT 9
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7384: LD_ADDR_VAR 0 8
7388: PUSH
7389: LD_INT 1
7391: PUSH
7392: LD_INT 3
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7399: LD_ADDR_VAR 0 9
7403: PUSH
7404: LD_INT 1
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 3
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// end ; 2 :
7418: GO 7571
7420: LD_INT 2
7422: DOUBLE
7423: EQUAL
7424: IFTRUE 7428
7426: GO 7499
7428: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7429: LD_ADDR_VAR 0 6
7433: PUSH
7434: LD_INT 13
7436: PUSH
7437: LD_INT 14
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7444: LD_ADDR_VAR 0 7
7448: PUSH
7449: LD_INT 27
7451: PUSH
7452: LD_INT 26
7454: PUSH
7455: LD_INT 25
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7463: LD_ADDR_VAR 0 8
7467: PUSH
7468: LD_INT 1
7470: PUSH
7471: LD_INT 5
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 1
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: ST_TO_ADDR
// end ; 3 :
7497: GO 7571
7499: LD_INT 3
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7570
7507: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7508: LD_ADDR_VAR 0 6
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 21
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7523: LD_ADDR_VAR 0 7
7527: PUSH
7528: LD_INT 44
7530: PUSH
7531: LD_INT 43
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7538: LD_ADDR_VAR 0 8
7542: PUSH
7543: LD_INT 1
7545: PUSH
7546: LD_INT 3
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7553: LD_ADDR_VAR 0 9
7557: PUSH
7558: LD_INT 1
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// end ; end ;
7568: GO 7571
7570: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7571: LD_ADDR_OWVAR 37
7575: PUSH
7576: LD_VAR 0 6
7580: PUSH
7581: LD_INT 1
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 12
7593: ARRAY
7594: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7595: LD_ADDR_OWVAR 39
7599: PUSH
7600: LD_VAR 0 9
7604: PUSH
7605: LD_INT 1
7607: PPUSH
7608: LD_VAR 0 9
7612: PPUSH
7613: CALL_OW 12
7617: ARRAY
7618: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7619: LD_ADDR_OWVAR 38
7623: PUSH
7624: LD_VAR 0 8
7628: PUSH
7629: LD_INT 1
7631: PPUSH
7632: LD_VAR 0 8
7636: PPUSH
7637: CALL_OW 12
7641: ARRAY
7642: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7643: LD_ADDR_OWVAR 40
7647: PUSH
7648: LD_VAR 0 7
7652: PUSH
7653: LD_INT 1
7655: PPUSH
7656: LD_VAR 0 7
7660: PPUSH
7661: CALL_OW 12
7665: ARRAY
7666: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7667: LD_ADDR_OWVAR 41
7671: PUSH
7672: LD_INT 100
7674: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_VAR 0 3
7684: PPUSH
7685: LD_VAR 0 3
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: PPUSH
7694: CALL_OW 45
7698: PPUSH
7699: CALL_OW 2
7703: ST_TO_ADDR
// end ;
7704: GO 7317
7706: POP
7707: POP
// end ;
7708: LD_VAR 0 3
7712: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7713: LD_INT 0
7715: PPUSH
7716: PPUSH
7717: PPUSH
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
// for i = 1 to n do
7722: LD_ADDR_VAR 0 4
7726: PUSH
7727: DOUBLE
7728: LD_INT 1
7730: DEC
7731: ST_TO_ADDR
7732: LD_VAR 0 1
7736: PUSH
7737: FOR_TO
7738: IFFALSE 8126
// begin uc_nation := rand ( 1 , 3 ) ;
7740: LD_ADDR_OWVAR 21
7744: PUSH
7745: LD_INT 1
7747: PPUSH
7748: LD_INT 3
7750: PPUSH
7751: CALL_OW 12
7755: ST_TO_ADDR
// case uc_nation of 1 :
7756: LD_OWVAR 21
7760: PUSH
7761: LD_INT 1
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7836
7769: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7770: LD_ADDR_VAR 0 6
7774: PUSH
7775: LD_INT 4
7777: PUSH
7778: LD_INT 5
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7785: LD_ADDR_VAR 0 7
7789: PUSH
7790: LD_INT 6
7792: PUSH
7793: LD_INT 7
7795: PUSH
7796: LD_INT 9
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7804: LD_ADDR_VAR 0 8
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: LD_INT 3
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7819: LD_ADDR_VAR 0 9
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: ST_TO_ADDR
// end ; 2 :
7834: GO 7991
7836: LD_INT 2
7838: DOUBLE
7839: EQUAL
7840: IFTRUE 7844
7842: GO 7919
7844: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7845: LD_ADDR_VAR 0 6
7849: PUSH
7850: LD_INT 13
7852: PUSH
7853: LD_INT 14
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7860: LD_ADDR_VAR 0 7
7864: PUSH
7865: LD_INT 27
7867: PUSH
7868: LD_INT 26
7870: PUSH
7871: LD_INT 28
7873: PUSH
7874: LD_INT 29
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7883: LD_ADDR_VAR 0 8
7887: PUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 5
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7898: LD_ADDR_VAR 0 9
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: ST_TO_ADDR
// end ; 3 :
7917: GO 7991
7919: LD_INT 3
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7990
7927: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7928: LD_ADDR_VAR 0 6
7932: PUSH
7933: LD_INT 23
7935: PUSH
7936: LD_INT 24
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7943: LD_ADDR_VAR 0 7
7947: PUSH
7948: LD_INT 46
7950: PUSH
7951: LD_INT 45
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7958: LD_ADDR_VAR 0 8
7962: PUSH
7963: LD_INT 1
7965: PUSH
7966: LD_INT 3
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7973: LD_ADDR_VAR 0 9
7977: PUSH
7978: LD_INT 1
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: ST_TO_ADDR
// end ; end ;
7988: GO 7991
7990: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7991: LD_ADDR_OWVAR 37
7995: PUSH
7996: LD_VAR 0 6
8000: PUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_VAR 0 6
8008: PPUSH
8009: CALL_OW 12
8013: ARRAY
8014: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8015: LD_ADDR_OWVAR 39
8019: PUSH
8020: LD_VAR 0 9
8024: PUSH
8025: LD_INT 1
8027: PPUSH
8028: LD_VAR 0 9
8032: PPUSH
8033: CALL_OW 12
8037: ARRAY
8038: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8039: LD_ADDR_OWVAR 38
8043: PUSH
8044: LD_VAR 0 8
8048: PUSH
8049: LD_INT 1
8051: PPUSH
8052: LD_VAR 0 8
8056: PPUSH
8057: CALL_OW 12
8061: ARRAY
8062: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8063: LD_ADDR_OWVAR 40
8067: PUSH
8068: LD_VAR 0 7
8072: PUSH
8073: LD_INT 1
8075: PPUSH
8076: LD_VAR 0 7
8080: PPUSH
8081: CALL_OW 12
8085: ARRAY
8086: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8087: LD_ADDR_OWVAR 41
8091: PUSH
8092: LD_INT 100
8094: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8095: LD_ADDR_VAR 0 3
8099: PUSH
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 1
8112: PLUS
8113: PPUSH
8114: CALL_OW 45
8118: PPUSH
8119: CALL_OW 2
8123: ST_TO_ADDR
// end ;
8124: GO 7737
8126: POP
8127: POP
// end ;
8128: LD_VAR 0 3
8132: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8133: LD_INT 0
8135: PPUSH
8136: PPUSH
// for i = 1 to n do
8137: LD_ADDR_VAR 0 4
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_VAR 0 1
8151: PUSH
8152: FOR_TO
8153: IFFALSE 8227
// begin uc_nation := rand ( 1 , 3 ) ;
8155: LD_ADDR_OWVAR 21
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8171: LD_INT 0
8173: PPUSH
8174: LD_INT 8
8176: PUSH
8177: LD_INT 9
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 2
8204: PPUSH
8205: CALL_OW 380
// result := result ^ CreateHuman ;
8209: LD_ADDR_VAR 0 3
8213: PUSH
8214: LD_VAR 0 3
8218: PUSH
8219: CALL_OW 44
8223: ADD
8224: ST_TO_ADDR
// end ;
8225: GO 8152
8227: POP
8228: POP
// end ;
8229: LD_VAR 0 3
8233: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8234: LD_INT 0
8236: PPUSH
8237: PPUSH
8238: PPUSH
8239: PPUSH
8240: PPUSH
8241: PPUSH
8242: PPUSH
// for i = 1 to n do
8243: LD_ADDR_VAR 0 4
8247: PUSH
8248: DOUBLE
8249: LD_INT 1
8251: DEC
8252: ST_TO_ADDR
8253: LD_VAR 0 1
8257: PUSH
8258: FOR_TO
8259: IFFALSE 8651
// begin uc_nation := rand ( 1 , 3 ) ;
8261: LD_ADDR_OWVAR 21
8265: PUSH
8266: LD_INT 1
8268: PPUSH
8269: LD_INT 3
8271: PPUSH
8272: CALL_OW 12
8276: ST_TO_ADDR
// case uc_nation of 1 :
8277: LD_OWVAR 21
8281: PUSH
8282: LD_INT 1
8284: DOUBLE
8285: EQUAL
8286: IFTRUE 8290
8288: GO 8361
8290: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8291: LD_ADDR_VAR 0 6
8295: PUSH
8296: LD_INT 4
8298: PUSH
8299: LD_INT 5
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8306: LD_ADDR_VAR 0 7
8310: PUSH
8311: LD_INT 6
8313: PUSH
8314: LD_INT 7
8316: PUSH
8317: LD_INT 10
8319: PUSH
8320: LD_INT 97
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8329: LD_ADDR_VAR 0 8
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8344: LD_ADDR_VAR 0 9
8348: PUSH
8349: LD_INT 1
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: ST_TO_ADDR
// end ; 2 :
8359: GO 8516
8361: LD_INT 2
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8440
8369: POP
// begin chassis := [ ar_half_tracked ] ;
8370: LD_ADDR_VAR 0 6
8374: PUSH
8375: LD_INT 14
8377: PUSH
8378: EMPTY
8379: LIST
8380: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8381: LD_ADDR_VAR 0 7
8385: PUSH
8386: LD_INT 91
8388: PUSH
8389: LD_INT 26
8391: PUSH
8392: LD_INT 28
8394: PUSH
8395: LD_INT 29
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8404: LD_ADDR_VAR 0 8
8408: PUSH
8409: LD_INT 1
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 1
8426: PUSH
8427: LD_INT 2
8429: PUSH
8430: LD_INT 3
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// end ; 3 :
8438: GO 8516
8440: LD_INT 3
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8515
8448: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8449: LD_ADDR_VAR 0 6
8453: PUSH
8454: LD_INT 23
8456: PUSH
8457: LD_INT 24
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8464: LD_ADDR_VAR 0 7
8468: PUSH
8469: LD_INT 46
8471: PUSH
8472: LD_INT 45
8474: PUSH
8475: LD_INT 49
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8483: LD_ADDR_VAR 0 8
8487: PUSH
8488: LD_INT 1
8490: PUSH
8491: LD_INT 3
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: ST_TO_ADDR
// end ; end ;
8513: GO 8516
8515: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8516: LD_ADDR_OWVAR 37
8520: PUSH
8521: LD_VAR 0 6
8525: PUSH
8526: LD_INT 1
8528: PPUSH
8529: LD_VAR 0 6
8533: PPUSH
8534: CALL_OW 12
8538: ARRAY
8539: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8540: LD_ADDR_OWVAR 39
8544: PUSH
8545: LD_VAR 0 9
8549: PUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 9
8557: PPUSH
8558: CALL_OW 12
8562: ARRAY
8563: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8564: LD_ADDR_OWVAR 38
8568: PUSH
8569: LD_VAR 0 8
8573: PUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_VAR 0 8
8581: PPUSH
8582: CALL_OW 12
8586: ARRAY
8587: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8588: LD_ADDR_OWVAR 40
8592: PUSH
8593: LD_VAR 0 7
8597: PUSH
8598: LD_INT 1
8600: PPUSH
8601: LD_VAR 0 7
8605: PPUSH
8606: CALL_OW 12
8610: ARRAY
8611: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8612: LD_ADDR_OWVAR 41
8616: PUSH
8617: LD_INT 100
8619: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8620: LD_ADDR_VAR 0 3
8624: PUSH
8625: LD_VAR 0 3
8629: PPUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_INT 1
8637: PLUS
8638: PPUSH
8639: CALL_OW 45
8643: PPUSH
8644: CALL_OW 2
8648: ST_TO_ADDR
// end ;
8649: GO 8258
8651: POP
8652: POP
// end ; end_of_file
8653: LD_VAR 0 3
8657: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8658: LD_INT 22
8660: PUSH
8661: LD_INT 7
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: IFFALSE 9172
8674: GO 8676
8676: DISABLE
8677: LD_INT 0
8679: PPUSH
8680: PPUSH
8681: PPUSH
// begin enable ;
8682: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: LD_INT 22
8690: PUSH
8691: LD_INT 7
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: ST_TO_ADDR
// for i in tmp do
8703: LD_ADDR_VAR 0 1
8707: PUSH
8708: LD_VAR 0 3
8712: PUSH
8713: FOR_IN
8714: IFFALSE 9170
// begin case GetType ( i ) of unit_human :
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 247
8725: PUSH
8726: LD_INT 1
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8933
8734: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 256
8744: PUSH
8745: LD_INT 250
8747: LESS
8748: PUSH
8749: LD_INT 5
8751: PPUSH
8752: LD_INT 7
8754: PPUSH
8755: CALL_OW 321
8759: PUSH
8760: LD_INT 2
8762: NONEQUAL
8763: AND
8764: IFFALSE 8768
// continue ;
8766: GO 8713
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8768: LD_VAR 0 1
8772: PPUSH
8773: CALL_OW 257
8777: PUSH
8778: LD_INT 12
8780: PUSH
8781: LD_INT 15
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_INT 17
8789: PUSH
8790: LD_INT 1
8792: PUSH
8793: LD_INT 5
8795: PUSH
8796: LD_INT 6
8798: PUSH
8799: LD_INT 7
8801: PUSH
8802: LD_INT 8
8804: PUSH
8805: LD_INT 9
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: IN
8820: IFFALSE 8858
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8822: LD_VAR 0 1
8826: PPUSH
8827: LD_INT 22
8829: PUSH
8830: LD_OWVAR 2
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 69
8843: PPUSH
8844: LD_VAR 0 1
8848: PPUSH
8849: CALL_OW 74
8853: PPUSH
8854: CALL_OW 115
// if GetClass ( i ) = 3 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 257
8867: PUSH
8868: LD_INT 3
8870: EQUAL
8871: IFFALSE 8931
// if IsInUnit ( i ) then
8873: LD_VAR 0 1
8877: PPUSH
8878: CALL_OW 310
8882: IFFALSE 8922
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8884: LD_VAR 0 1
8888: PPUSH
8889: LD_INT 22
8891: PUSH
8892: LD_OWVAR 2
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PPUSH
8901: CALL_OW 69
8905: PPUSH
8906: LD_VAR 0 1
8910: PPUSH
8911: CALL_OW 74
8915: PPUSH
8916: CALL_OW 115
8920: GO 8931
// ComEspace ( i ) ;
8922: LD_VAR 0 1
8926: PPUSH
8927: CALL 1933 0 1
// end ; unit_vehicle :
8931: GO 9168
8933: LD_INT 2
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 9167
8941: POP
// begin if GetLives ( i ) > 250 then
8942: LD_VAR 0 1
8946: PPUSH
8947: CALL_OW 256
8951: PUSH
8952: LD_INT 250
8954: GREATER
8955: IFFALSE 9165
// begin if GetWeapon ( i ) = us_artillery then
8957: LD_VAR 0 1
8961: PPUSH
8962: CALL_OW 264
8966: PUSH
8967: LD_INT 97
8969: EQUAL
8970: IFFALSE 9038
// begin if IsInArea ( i , zoneOut ) then
8972: LD_VAR 0 1
8976: PPUSH
8977: LD_INT 4
8979: PPUSH
8980: CALL_OW 308
8984: IFFALSE 9000
// ComMoveToArea ( i , zoneBorder ) else
8986: LD_VAR 0 1
8990: PPUSH
8991: LD_INT 9
8993: PPUSH
8994: CALL_OW 113
8998: GO 9036
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9000: LD_VAR 0 1
9004: PPUSH
9005: LD_INT 22
9007: PUSH
9008: LD_OWVAR 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 69
9021: PPUSH
9022: LD_VAR 0 1
9026: PPUSH
9027: CALL_OW 74
9031: PPUSH
9032: CALL_OW 115
// end else
9036: GO 9165
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9038: LD_VAR 0 1
9042: PPUSH
9043: CALL_OW 264
9047: PUSH
9048: LD_INT 11
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 98
9056: PUSH
9057: LD_INT 49
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: IN
9066: IFFALSE 9096
// begin if IsInArea ( i , zoneOut ) then
9068: LD_VAR 0 1
9072: PPUSH
9073: LD_INT 4
9075: PPUSH
9076: CALL_OW 308
9080: IFFALSE 9094
// ComSpecMove ( i , specPos ) ;
9082: LD_VAR 0 1
9086: PPUSH
9087: LD_INT 8
9089: PPUSH
9090: CALL 1979 0 2
// end else
9094: GO 9165
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 264
9105: PUSH
9106: LD_INT 91
9108: PUSH
9109: LD_INT 29
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: IN
9116: IFFALSE 9129
// ComSpecAttack ( i ) else
9118: LD_VAR 0 1
9122: PPUSH
9123: CALL 2407 0 1
9127: GO 9165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9129: LD_VAR 0 1
9133: PPUSH
9134: LD_INT 22
9136: PUSH
9137: LD_OWVAR 2
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 74
9160: PPUSH
9161: CALL_OW 115
// end ; end ; end ;
9165: GO 9168
9167: POP
// end ;
9168: GO 8713
9170: POP
9171: POP
// end ; end_of_file
9172: PPOPN 3
9174: END
// export function InitDisplay ; begin
9175: LD_INT 0
9177: PPUSH
// while true do
9178: LD_INT 1
9180: IFFALSE 9267
// begin if waveNumber < 100 then
9182: LD_EXP 5
9186: PUSH
9187: LD_INT 100
9189: LESS
9190: IFFALSE 9241
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9192: LD_ADDR_OWVAR 47
9196: PUSH
9197: LD_STRING #Tick
9199: PUSH
9200: LD_OWVAR 1
9204: PUSH
9205: LD_STRING #Points
9207: PUSH
9208: LD_EXP 2
9212: PUSH
9213: LD_STRING #Attack
9215: PUSH
9216: LD_EXP 4
9220: PUSH
9221: LD_STRING #Wave
9223: PUSH
9224: LD_EXP 5
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: ST_TO_ADDR
9239: GO 9258
// Display_Strings := [ #Win , points ] ;
9241: LD_ADDR_OWVAR 47
9245: PUSH
9246: LD_STRING #Win
9248: PUSH
9249: LD_EXP 2
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9258: LD_INT 35
9260: PPUSH
9261: CALL_OW 67
// end ;
9265: GO 9178
// end ; end_of_file
9267: LD_VAR 0 1
9271: RET
// export function InitBonus ; var i , chance ; begin
9272: LD_INT 0
9274: PPUSH
9275: PPUSH
9276: PPUSH
// chance := rand ( 1 , 99 ) ;
9277: LD_ADDR_VAR 0 3
9281: PUSH
9282: LD_INT 1
9284: PPUSH
9285: LD_INT 99
9287: PPUSH
9288: CALL_OW 12
9292: ST_TO_ADDR
// case chance of 1 .. 10 :
9293: LD_VAR 0 3
9297: PUSH
9298: LD_INT 1
9300: DOUBLE
9301: GREATEREQUAL
9302: IFFALSE 9310
9304: LD_INT 10
9306: DOUBLE
9307: LESSEQUAL
9308: IFTRUE 9312
9310: GO 9323
9312: POP
// i := 5 ; 11 .. 25 :
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_INT 5
9320: ST_TO_ADDR
9321: GO 9424
9323: LD_INT 11
9325: DOUBLE
9326: GREATEREQUAL
9327: IFFALSE 9335
9329: LD_INT 25
9331: DOUBLE
9332: LESSEQUAL
9333: IFTRUE 9337
9335: GO 9348
9337: POP
// i := 3 ; 26 .. 40 :
9338: LD_ADDR_VAR 0 2
9342: PUSH
9343: LD_INT 3
9345: ST_TO_ADDR
9346: GO 9424
9348: LD_INT 26
9350: DOUBLE
9351: GREATEREQUAL
9352: IFFALSE 9360
9354: LD_INT 40
9356: DOUBLE
9357: LESSEQUAL
9358: IFTRUE 9362
9360: GO 9373
9362: POP
// i := 2 ; 41 .. 60 :
9363: LD_ADDR_VAR 0 2
9367: PUSH
9368: LD_INT 2
9370: ST_TO_ADDR
9371: GO 9424
9373: LD_INT 41
9375: DOUBLE
9376: GREATEREQUAL
9377: IFFALSE 9385
9379: LD_INT 60
9381: DOUBLE
9382: LESSEQUAL
9383: IFTRUE 9387
9385: GO 9398
9387: POP
// i := 4 ; 61 .. 99 :
9388: LD_ADDR_VAR 0 2
9392: PUSH
9393: LD_INT 4
9395: ST_TO_ADDR
9396: GO 9424
9398: LD_INT 61
9400: DOUBLE
9401: GREATEREQUAL
9402: IFFALSE 9410
9404: LD_INT 99
9406: DOUBLE
9407: LESSEQUAL
9408: IFTRUE 9412
9410: GO 9423
9412: POP
// i := 1 ; end ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_INT 1
9420: ST_TO_ADDR
9421: GO 9424
9423: POP
// case i of 1 :
9424: LD_VAR 0 2
9428: PUSH
9429: LD_INT 1
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9526
9437: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9438: LD_INT 22
9440: PUSH
9441: LD_OWVAR 2
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: LD_INT 25
9455: PUSH
9456: LD_INT 12
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 25
9465: PUSH
9466: LD_INT 16
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 25
9475: PUSH
9476: LD_INT 15
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 17
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PPUSH
9504: CALL_OW 69
9508: PUSH
9509: LD_INT 10
9511: GREATEREQUAL
9512: IFFALSE 9520
// BonusIV else
9514: CALL 10099 0 0
9518: GO 9524
// BonusI ;
9520: CALL 9604 0 0
// end ; 2 :
9524: GO 9599
9526: LD_INT 2
9528: DOUBLE
9529: EQUAL
9530: IFTRUE 9534
9532: GO 9541
9534: POP
// begin BonusII ;
9535: CALL 9777 0 0
// end ; 3 :
9539: GO 9599
9541: LD_INT 3
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9556
9549: POP
// begin BonusIII ;
9550: CALL 9925 0 0
// end ; 4 :
9554: GO 9599
9556: LD_INT 4
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9571
9564: POP
// begin BonusIV ;
9565: CALL 10099 0 0
// end ; 5 :
9569: GO 9599
9571: LD_INT 5
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9598
9579: POP
// begin if graveyard then
9580: LD_EXP 8
9584: IFFALSE 9592
// BonusV else
9586: CALL 10517 0 0
9590: GO 9596
// BonusIII ;
9592: CALL 9925 0 0
// end ; end ;
9596: GO 9599
9598: POP
// end ;
9599: LD_VAR 0 1
9603: RET
// export function BonusI ; var i ; begin
9604: LD_INT 0
9606: PPUSH
9607: PPUSH
// case Query ( AddGift1 ) of 1 :
9608: LD_STRING AddGift1
9610: PPUSH
9611: CALL_OW 97
9615: PUSH
9616: LD_INT 1
9618: DOUBLE
9619: EQUAL
9620: IFTRUE 9624
9622: GO 9703
9624: POP
// begin for i = 1 to 3 do
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: DOUBLE
9631: LD_INT 1
9633: DEC
9634: ST_TO_ADDR
9635: LD_INT 3
9637: PUSH
9638: FOR_TO
9639: IFFALSE 9699
// begin uc_side := your_side ;
9641: LD_ADDR_OWVAR 20
9645: PUSH
9646: LD_OWVAR 2
9650: ST_TO_ADDR
// uc_nation := 0 ;
9651: LD_ADDR_OWVAR 21
9655: PUSH
9656: LD_INT 0
9658: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9659: LD_INT 0
9661: PPUSH
9662: LD_INT 12
9664: PPUSH
9665: LD_INT 1
9667: PPUSH
9668: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9672: CALL_OW 44
9676: PPUSH
9677: LD_EXP 9
9681: PPUSH
9682: LD_EXP 10
9686: PPUSH
9687: LD_INT 15
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: CALL_OW 50
// end ;
9697: GO 9638
9699: POP
9700: POP
// end ; 2 :
9701: GO 9772
9703: LD_INT 2
9705: DOUBLE
9706: EQUAL
9707: IFTRUE 9711
9709: GO 9753
9711: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9712: LD_EXP 11
9716: PPUSH
9717: CALL_OW 274
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: LD_EXP 11
9729: PPUSH
9730: CALL_OW 274
9734: PPUSH
9735: LD_INT 1
9737: PPUSH
9738: CALL_OW 275
9742: PUSH
9743: LD_INT 100
9745: PLUS
9746: PPUSH
9747: CALL_OW 277
// end ; 3 :
9751: GO 9772
9753: LD_INT 3
9755: DOUBLE
9756: EQUAL
9757: IFTRUE 9761
9759: GO 9771
9761: POP
// begin SetTeamExp ( 2 ) ;
9762: LD_INT 2
9764: PPUSH
9765: CALL 940 0 1
// end ; end ;
9769: GO 9772
9771: POP
// end ;
9772: LD_VAR 0 1
9776: RET
// export function BonusII ; var i ; begin
9777: LD_INT 0
9779: PPUSH
9780: PPUSH
// case Query ( AddGift2 ) of 1 :
9781: LD_STRING AddGift2
9783: PPUSH
9784: CALL_OW 97
9788: PUSH
9789: LD_INT 1
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 9839
9797: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9798: LD_EXP 11
9802: PPUSH
9803: CALL_OW 274
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: LD_EXP 11
9815: PPUSH
9816: CALL_OW 274
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 275
9828: PUSH
9829: LD_INT 500
9831: PLUS
9832: PPUSH
9833: CALL_OW 277
// end ; 2 :
9837: GO 9920
9839: LD_INT 2
9841: DOUBLE
9842: EQUAL
9843: IFTRUE 9847
9845: GO 9857
9847: POP
// begin SetTeamExp ( 3 ) ;
9848: LD_INT 3
9850: PPUSH
9851: CALL 940 0 1
// end ; 3 :
9855: GO 9920
9857: LD_INT 3
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 9919
9865: POP
// begin uc_side = your_side ;
9866: LD_ADDR_OWVAR 20
9870: PUSH
9871: LD_OWVAR 2
9875: ST_TO_ADDR
// uc_nation = nation_russian ;
9876: LD_ADDR_OWVAR 21
9880: PUSH
9881: LD_INT 3
9883: ST_TO_ADDR
// vc_chassis = 25 ;
9884: LD_ADDR_OWVAR 37
9888: PUSH
9889: LD_INT 25
9891: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9892: CALL_OW 45
9896: PPUSH
9897: LD_EXP 9
9901: PPUSH
9902: LD_EXP 10
9906: PPUSH
9907: LD_INT 15
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 50
// end ; end ;
9917: GO 9920
9919: POP
// end ;
9920: LD_VAR 0 1
9924: RET
// export function BonusIII ; var i ; begin
9925: LD_INT 0
9927: PPUSH
9928: PPUSH
// case Query ( AddGift3 ) of 1 :
9929: LD_STRING AddGift3
9931: PPUSH
9932: CALL_OW 97
9936: PUSH
9937: LD_INT 1
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 9987
9945: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9946: LD_EXP 11
9950: PPUSH
9951: CALL_OW 274
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: LD_EXP 11
9963: PPUSH
9964: CALL_OW 274
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 275
9976: PUSH
9977: LD_INT 1000
9979: PLUS
9980: PPUSH
9981: CALL_OW 277
// end ; 2 :
9985: GO 10094
9987: LD_INT 2
9989: DOUBLE
9990: EQUAL
9991: IFTRUE 9995
9993: GO 10007
9995: POP
// begin PrepareGuards ( waveNumber ) ;
9996: LD_EXP 5
10000: PPUSH
10001: CALL 1086 0 1
// end ; 3 :
10005: GO 10094
10007: LD_INT 3
10009: DOUBLE
10010: EQUAL
10011: IFTRUE 10015
10013: GO 10093
10015: POP
// begin uc_side = your_side ;
10016: LD_ADDR_OWVAR 20
10020: PUSH
10021: LD_OWVAR 2
10025: ST_TO_ADDR
// uc_nation = nation_american ;
10026: LD_ADDR_OWVAR 21
10030: PUSH
10031: LD_INT 1
10033: ST_TO_ADDR
// vc_chassis = us_morphling ;
10034: LD_ADDR_OWVAR 37
10038: PUSH
10039: LD_INT 5
10041: ST_TO_ADDR
// vc_engine := engine_siberite ;
10042: LD_ADDR_OWVAR 39
10046: PUSH
10047: LD_INT 3
10049: ST_TO_ADDR
// vc_control := control_computer ;
10050: LD_ADDR_OWVAR 38
10054: PUSH
10055: LD_INT 3
10057: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10058: LD_ADDR_OWVAR 40
10062: PUSH
10063: LD_INT 8
10065: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10066: CALL_OW 45
10070: PPUSH
10071: LD_EXP 9
10075: PPUSH
10076: LD_EXP 10
10080: PPUSH
10081: LD_INT 15
10083: PPUSH
10084: LD_INT 1
10086: PPUSH
10087: CALL_OW 50
// end ; end ;
10091: GO 10094
10093: POP
// end ;
10094: LD_VAR 0 1
10098: RET
// export function BonusIV ; var i ; begin
10099: LD_INT 0
10101: PPUSH
10102: PPUSH
// case Query ( AddGift4 ) of 1 :
10103: LD_STRING AddGift4
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10443
10119: POP
// begin i := rand ( 1 , 3 ) ;
10120: LD_ADDR_VAR 0 2
10124: PUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 3
10130: PPUSH
10131: CALL_OW 12
10135: ST_TO_ADDR
// uc_side := your_side ;
10136: LD_ADDR_OWVAR 20
10140: PUSH
10141: LD_OWVAR 2
10145: ST_TO_ADDR
// case i of 1 :
10146: LD_VAR 0 2
10150: PUSH
10151: LD_INT 1
10153: DOUBLE
10154: EQUAL
10155: IFTRUE 10159
10157: GO 10246
10159: POP
// begin uc_nation := nation_arabian ;
10160: LD_ADDR_OWVAR 21
10164: PUSH
10165: LD_INT 2
10167: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10168: LD_ADDR_OWVAR 37
10172: PUSH
10173: LD_INT 14
10175: ST_TO_ADDR
// vc_engine := engine_combustion ;
10176: LD_ADDR_OWVAR 39
10180: PUSH
10181: LD_INT 1
10183: ST_TO_ADDR
// vc_control := control_manual ;
10184: LD_ADDR_OWVAR 38
10188: PUSH
10189: LD_INT 1
10191: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10192: LD_ADDR_OWVAR 40
10196: PUSH
10197: LD_INT 27
10199: PUSH
10200: LD_INT 28
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 1
10209: PPUSH
10210: LD_INT 2
10212: PPUSH
10213: CALL_OW 12
10217: ARRAY
10218: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10219: CALL_OW 45
10223: PPUSH
10224: LD_EXP 9
10228: PPUSH
10229: LD_EXP 10
10233: PPUSH
10234: LD_INT 15
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 50
// end ; 2 :
10244: GO 10441
10246: LD_INT 2
10248: DOUBLE
10249: EQUAL
10250: IFTRUE 10254
10252: GO 10345
10254: POP
// begin uc_nation := nation_american ;
10255: LD_ADDR_OWVAR 21
10259: PUSH
10260: LD_INT 1
10262: ST_TO_ADDR
// vc_chassis := us_morphling ;
10263: LD_ADDR_OWVAR 37
10267: PUSH
10268: LD_INT 5
10270: ST_TO_ADDR
// vc_engine := engine_siberite ;
10271: LD_ADDR_OWVAR 39
10275: PUSH
10276: LD_INT 3
10278: ST_TO_ADDR
// vc_control := control_computer ;
10279: LD_ADDR_OWVAR 38
10283: PUSH
10284: LD_INT 3
10286: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10287: LD_ADDR_OWVAR 40
10291: PUSH
10292: LD_INT 12
10294: PUSH
10295: LD_INT 10
10297: PUSH
10298: LD_INT 7
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 1
10308: PPUSH
10309: LD_INT 3
10311: PPUSH
10312: CALL_OW 12
10316: ARRAY
10317: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10318: CALL_OW 45
10322: PPUSH
10323: LD_EXP 9
10327: PPUSH
10328: LD_EXP 10
10332: PPUSH
10333: LD_INT 15
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 50
// end ; 3 :
10343: GO 10441
10345: LD_INT 3
10347: DOUBLE
10348: EQUAL
10349: IFTRUE 10353
10351: GO 10440
10353: POP
// begin uc_nation := nation_russian ;
10354: LD_ADDR_OWVAR 21
10358: PUSH
10359: LD_INT 3
10361: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10362: LD_ADDR_OWVAR 37
10366: PUSH
10367: LD_INT 22
10369: ST_TO_ADDR
// vc_engine := engine_combustion ;
10370: LD_ADDR_OWVAR 39
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// vc_control := control_manual ;
10378: LD_ADDR_OWVAR 38
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10386: LD_ADDR_OWVAR 40
10390: PUSH
10391: LD_INT 45
10393: PUSH
10394: LD_INT 44
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 1
10403: PPUSH
10404: LD_INT 2
10406: PPUSH
10407: CALL_OW 12
10411: ARRAY
10412: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10413: CALL_OW 45
10417: PPUSH
10418: LD_EXP 9
10422: PPUSH
10423: LD_EXP 10
10427: PPUSH
10428: LD_INT 15
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 50
// end ; end ;
10438: GO 10441
10440: POP
// end ; 2 :
10441: GO 10512
10443: LD_INT 2
10445: DOUBLE
10446: EQUAL
10447: IFTRUE 10451
10449: GO 10493
10451: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10452: LD_EXP 11
10456: PPUSH
10457: CALL_OW 274
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: LD_EXP 11
10469: PPUSH
10470: CALL_OW 274
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 275
10482: PUSH
10483: LD_INT 100
10485: PLUS
10486: PPUSH
10487: CALL_OW 277
// end ; 3 :
10491: GO 10512
10493: LD_INT 3
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10511
10501: POP
// begin SetTeamExp ( 2 ) ;
10502: LD_INT 2
10504: PPUSH
10505: CALL 940 0 1
// end ; end ;
10509: GO 10512
10511: POP
// end ;
10512: LD_VAR 0 1
10516: RET
// export function BonusV ; var i , j ; begin
10517: LD_INT 0
10519: PPUSH
10520: PPUSH
10521: PPUSH
// case Query ( AddGift5 ) of 1 :
10522: LD_STRING AddGift5
10524: PPUSH
10525: CALL_OW 97
10529: PUSH
10530: LD_INT 1
10532: DOUBLE
10533: EQUAL
10534: IFTRUE 10538
10536: GO 10882
10538: POP
// begin for j = 1 to 3 do
10539: LD_ADDR_VAR 0 3
10543: PUSH
10544: DOUBLE
10545: LD_INT 1
10547: DEC
10548: ST_TO_ADDR
10549: LD_INT 3
10551: PUSH
10552: FOR_TO
10553: IFFALSE 10878
// begin i := rand ( 1 , 3 ) ;
10555: LD_ADDR_VAR 0 2
10559: PUSH
10560: LD_INT 1
10562: PPUSH
10563: LD_INT 3
10565: PPUSH
10566: CALL_OW 12
10570: ST_TO_ADDR
// uc_side := your_side ;
10571: LD_ADDR_OWVAR 20
10575: PUSH
10576: LD_OWVAR 2
10580: ST_TO_ADDR
// case i of 1 :
10581: LD_VAR 0 2
10585: PUSH
10586: LD_INT 1
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10681
10594: POP
// begin uc_nation := nation_arabian ;
10595: LD_ADDR_OWVAR 21
10599: PUSH
10600: LD_INT 2
10602: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10603: LD_ADDR_OWVAR 37
10607: PUSH
10608: LD_INT 14
10610: ST_TO_ADDR
// vc_engine := engine_combustion ;
10611: LD_ADDR_OWVAR 39
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// vc_control := control_manual ;
10619: LD_ADDR_OWVAR 38
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10627: LD_ADDR_OWVAR 40
10631: PUSH
10632: LD_INT 27
10634: PUSH
10635: LD_INT 28
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_INT 2
10647: PPUSH
10648: CALL_OW 12
10652: ARRAY
10653: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10654: CALL_OW 45
10658: PPUSH
10659: LD_EXP 9
10663: PPUSH
10664: LD_EXP 10
10668: PPUSH
10669: LD_INT 15
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 50
// end ; 2 :
10679: GO 10876
10681: LD_INT 2
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10780
10689: POP
// begin uc_nation := nation_american ;
10690: LD_ADDR_OWVAR 21
10694: PUSH
10695: LD_INT 1
10697: ST_TO_ADDR
// vc_chassis := us_morphling ;
10698: LD_ADDR_OWVAR 37
10702: PUSH
10703: LD_INT 5
10705: ST_TO_ADDR
// vc_engine := engine_siberite ;
10706: LD_ADDR_OWVAR 39
10710: PUSH
10711: LD_INT 3
10713: ST_TO_ADDR
// vc_control := control_computer ;
10714: LD_ADDR_OWVAR 38
10718: PUSH
10719: LD_INT 3
10721: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10722: LD_ADDR_OWVAR 40
10726: PUSH
10727: LD_INT 12
10729: PUSH
10730: LD_INT 11
10732: PUSH
10733: LD_INT 7
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 1
10743: PPUSH
10744: LD_INT 3
10746: PPUSH
10747: CALL_OW 12
10751: ARRAY
10752: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10753: CALL_OW 45
10757: PPUSH
10758: LD_EXP 9
10762: PPUSH
10763: LD_EXP 10
10767: PPUSH
10768: LD_INT 15
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: CALL_OW 50
// end ; 3 :
10778: GO 10876
10780: LD_INT 3
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10875
10788: POP
// begin uc_nation := nation_russian ;
10789: LD_ADDR_OWVAR 21
10793: PUSH
10794: LD_INT 3
10796: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10797: LD_ADDR_OWVAR 37
10801: PUSH
10802: LD_INT 22
10804: ST_TO_ADDR
// vc_engine := engine_combustion ;
10805: LD_ADDR_OWVAR 39
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
// vc_control := control_manual ;
10813: LD_ADDR_OWVAR 38
10817: PUSH
10818: LD_INT 1
10820: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10821: LD_ADDR_OWVAR 40
10825: PUSH
10826: LD_INT 45
10828: PUSH
10829: LD_INT 44
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 1
10838: PPUSH
10839: LD_INT 2
10841: PPUSH
10842: CALL_OW 12
10846: ARRAY
10847: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10848: CALL_OW 45
10852: PPUSH
10853: LD_EXP 9
10857: PPUSH
10858: LD_EXP 10
10862: PPUSH
10863: LD_INT 15
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 50
// end ; end ;
10873: GO 10876
10875: POP
// end ;
10876: GO 10552
10878: POP
10879: POP
// end ; 2 :
10880: GO 10948
10882: LD_INT 2
10884: DOUBLE
10885: EQUAL
10886: IFTRUE 10890
10888: GO 10932
10890: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10891: LD_EXP 11
10895: PPUSH
10896: CALL_OW 274
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: LD_EXP 11
10908: PPUSH
10909: CALL_OW 274
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 275
10921: PUSH
10922: LD_INT 500
10924: PLUS
10925: PPUSH
10926: CALL_OW 277
// end ; 3 :
10930: GO 10948
10932: LD_INT 3
10934: DOUBLE
10935: EQUAL
10936: IFTRUE 10940
10938: GO 10947
10940: POP
// begin GetBack ( ) ;
10941: CALL 1746 0 0
// end ; end ;
10945: GO 10948
10947: POP
// end ; end_of_file end_of_file
10948: LD_VAR 0 1
10952: RET
// export globalGameSaveCounter ; every 0 0$1 do
10953: GO 10955
10955: DISABLE
// begin enable ;
10956: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10957: LD_STRING updateTimer(
10959: PUSH
10960: LD_OWVAR 1
10964: STR
10965: PUSH
10966: LD_STRING );
10968: STR
10969: PPUSH
10970: CALL_OW 559
// end ;
10974: END
// every 0 0$1 do
10975: GO 10977
10977: DISABLE
// begin globalGameSaveCounter := 0 ;
10978: LD_ADDR_EXP 14
10982: PUSH
10983: LD_INT 0
10985: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10986: LD_STRING setGameSaveCounter(0)
10988: PPUSH
10989: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10993: LD_STRING initStreamRollete();
10995: PPUSH
10996: CALL_OW 559
// InitStreamMode ;
11000: CALL 12326 0 0
// DefineStreamItems ( false ) ;
11004: LD_INT 0
11006: PPUSH
11007: CALL 12790 0 1
// end ;
11011: END
// export function SOS_MapStart ( ) ; begin
11012: LD_INT 0
11014: PPUSH
// if streamModeActive then
11015: LD_EXP 15
11019: IFFALSE 11028
// DefineStreamItems ( true ) ;
11021: LD_INT 1
11023: PPUSH
11024: CALL 12790 0 1
// UpdateLuaVariables ( ) ;
11028: CALL 11045 0 0
// UpdateFactoryWaypoints ( ) ;
11032: CALL 25659 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11036: CALL 25916 0 0
// end ;
11040: LD_VAR 0 1
11044: RET
// function UpdateLuaVariables ( ) ; begin
11045: LD_INT 0
11047: PPUSH
// if globalGameSaveCounter then
11048: LD_EXP 14
11052: IFFALSE 11086
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11054: LD_ADDR_EXP 14
11058: PUSH
11059: LD_EXP 14
11063: PPUSH
11064: CALL 70546 0 1
11068: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11069: LD_STRING setGameSaveCounter(
11071: PUSH
11072: LD_EXP 14
11076: STR
11077: PUSH
11078: LD_STRING )
11080: STR
11081: PPUSH
11082: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11086: LD_STRING setGameDifficulty(
11088: PUSH
11089: LD_OWVAR 67
11093: STR
11094: PUSH
11095: LD_STRING )
11097: STR
11098: PPUSH
11099: CALL_OW 559
// end ;
11103: LD_VAR 0 1
11107: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11108: LD_INT 0
11110: PPUSH
// if p2 = stream_mode then
11111: LD_VAR 0 2
11115: PUSH
11116: LD_INT 100
11118: EQUAL
11119: IFFALSE 12122
// begin if not StreamModeActive then
11121: LD_EXP 15
11125: NOT
11126: IFFALSE 11136
// StreamModeActive := true ;
11128: LD_ADDR_EXP 15
11132: PUSH
11133: LD_INT 1
11135: ST_TO_ADDR
// if p3 = 0 then
11136: LD_VAR 0 3
11140: PUSH
11141: LD_INT 0
11143: EQUAL
11144: IFFALSE 11150
// InitStreamMode ;
11146: CALL 12326 0 0
// if p3 = 1 then
11150: LD_VAR 0 3
11154: PUSH
11155: LD_INT 1
11157: EQUAL
11158: IFFALSE 11168
// sRocket := true ;
11160: LD_ADDR_EXP 20
11164: PUSH
11165: LD_INT 1
11167: ST_TO_ADDR
// if p3 = 2 then
11168: LD_VAR 0 3
11172: PUSH
11173: LD_INT 2
11175: EQUAL
11176: IFFALSE 11186
// sSpeed := true ;
11178: LD_ADDR_EXP 19
11182: PUSH
11183: LD_INT 1
11185: ST_TO_ADDR
// if p3 = 3 then
11186: LD_VAR 0 3
11190: PUSH
11191: LD_INT 3
11193: EQUAL
11194: IFFALSE 11204
// sEngine := true ;
11196: LD_ADDR_EXP 21
11200: PUSH
11201: LD_INT 1
11203: ST_TO_ADDR
// if p3 = 4 then
11204: LD_VAR 0 3
11208: PUSH
11209: LD_INT 4
11211: EQUAL
11212: IFFALSE 11222
// sSpec := true ;
11214: LD_ADDR_EXP 18
11218: PUSH
11219: LD_INT 1
11221: ST_TO_ADDR
// if p3 = 5 then
11222: LD_VAR 0 3
11226: PUSH
11227: LD_INT 5
11229: EQUAL
11230: IFFALSE 11240
// sLevel := true ;
11232: LD_ADDR_EXP 22
11236: PUSH
11237: LD_INT 1
11239: ST_TO_ADDR
// if p3 = 6 then
11240: LD_VAR 0 3
11244: PUSH
11245: LD_INT 6
11247: EQUAL
11248: IFFALSE 11258
// sArmoury := true ;
11250: LD_ADDR_EXP 23
11254: PUSH
11255: LD_INT 1
11257: ST_TO_ADDR
// if p3 = 7 then
11258: LD_VAR 0 3
11262: PUSH
11263: LD_INT 7
11265: EQUAL
11266: IFFALSE 11276
// sRadar := true ;
11268: LD_ADDR_EXP 24
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// if p3 = 8 then
11276: LD_VAR 0 3
11280: PUSH
11281: LD_INT 8
11283: EQUAL
11284: IFFALSE 11294
// sBunker := true ;
11286: LD_ADDR_EXP 25
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// if p3 = 9 then
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 9
11301: EQUAL
11302: IFFALSE 11312
// sHack := true ;
11304: LD_ADDR_EXP 26
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// if p3 = 10 then
11312: LD_VAR 0 3
11316: PUSH
11317: LD_INT 10
11319: EQUAL
11320: IFFALSE 11330
// sFire := true ;
11322: LD_ADDR_EXP 27
11326: PUSH
11327: LD_INT 1
11329: ST_TO_ADDR
// if p3 = 11 then
11330: LD_VAR 0 3
11334: PUSH
11335: LD_INT 11
11337: EQUAL
11338: IFFALSE 11348
// sRefresh := true ;
11340: LD_ADDR_EXP 28
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// if p3 = 12 then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 12
11355: EQUAL
11356: IFFALSE 11366
// sExp := true ;
11358: LD_ADDR_EXP 29
11362: PUSH
11363: LD_INT 1
11365: ST_TO_ADDR
// if p3 = 13 then
11366: LD_VAR 0 3
11370: PUSH
11371: LD_INT 13
11373: EQUAL
11374: IFFALSE 11384
// sDepot := true ;
11376: LD_ADDR_EXP 30
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// if p3 = 14 then
11384: LD_VAR 0 3
11388: PUSH
11389: LD_INT 14
11391: EQUAL
11392: IFFALSE 11402
// sFlag := true ;
11394: LD_ADDR_EXP 31
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// if p3 = 15 then
11402: LD_VAR 0 3
11406: PUSH
11407: LD_INT 15
11409: EQUAL
11410: IFFALSE 11420
// sKamikadze := true ;
11412: LD_ADDR_EXP 39
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
// if p3 = 16 then
11420: LD_VAR 0 3
11424: PUSH
11425: LD_INT 16
11427: EQUAL
11428: IFFALSE 11438
// sTroll := true ;
11430: LD_ADDR_EXP 40
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// if p3 = 17 then
11438: LD_VAR 0 3
11442: PUSH
11443: LD_INT 17
11445: EQUAL
11446: IFFALSE 11456
// sSlow := true ;
11448: LD_ADDR_EXP 41
11452: PUSH
11453: LD_INT 1
11455: ST_TO_ADDR
// if p3 = 18 then
11456: LD_VAR 0 3
11460: PUSH
11461: LD_INT 18
11463: EQUAL
11464: IFFALSE 11474
// sLack := true ;
11466: LD_ADDR_EXP 42
11470: PUSH
11471: LD_INT 1
11473: ST_TO_ADDR
// if p3 = 19 then
11474: LD_VAR 0 3
11478: PUSH
11479: LD_INT 19
11481: EQUAL
11482: IFFALSE 11492
// sTank := true ;
11484: LD_ADDR_EXP 44
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// if p3 = 20 then
11492: LD_VAR 0 3
11496: PUSH
11497: LD_INT 20
11499: EQUAL
11500: IFFALSE 11510
// sRemote := true ;
11502: LD_ADDR_EXP 45
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// if p3 = 21 then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_INT 21
11517: EQUAL
11518: IFFALSE 11528
// sPowell := true ;
11520: LD_ADDR_EXP 46
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if p3 = 22 then
11528: LD_VAR 0 3
11532: PUSH
11533: LD_INT 22
11535: EQUAL
11536: IFFALSE 11546
// sTeleport := true ;
11538: LD_ADDR_EXP 49
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// if p3 = 23 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 23
11553: EQUAL
11554: IFFALSE 11564
// sOilTower := true ;
11556: LD_ADDR_EXP 51
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// if p3 = 24 then
11564: LD_VAR 0 3
11568: PUSH
11569: LD_INT 24
11571: EQUAL
11572: IFFALSE 11582
// sShovel := true ;
11574: LD_ADDR_EXP 52
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// if p3 = 25 then
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 25
11589: EQUAL
11590: IFFALSE 11600
// sSheik := true ;
11592: LD_ADDR_EXP 53
11596: PUSH
11597: LD_INT 1
11599: ST_TO_ADDR
// if p3 = 26 then
11600: LD_VAR 0 3
11604: PUSH
11605: LD_INT 26
11607: EQUAL
11608: IFFALSE 11618
// sEarthquake := true ;
11610: LD_ADDR_EXP 55
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// if p3 = 27 then
11618: LD_VAR 0 3
11622: PUSH
11623: LD_INT 27
11625: EQUAL
11626: IFFALSE 11636
// sAI := true ;
11628: LD_ADDR_EXP 56
11632: PUSH
11633: LD_INT 1
11635: ST_TO_ADDR
// if p3 = 28 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 28
11643: EQUAL
11644: IFFALSE 11654
// sCargo := true ;
11646: LD_ADDR_EXP 59
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// if p3 = 29 then
11654: LD_VAR 0 3
11658: PUSH
11659: LD_INT 29
11661: EQUAL
11662: IFFALSE 11672
// sDLaser := true ;
11664: LD_ADDR_EXP 60
11668: PUSH
11669: LD_INT 1
11671: ST_TO_ADDR
// if p3 = 30 then
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 30
11679: EQUAL
11680: IFFALSE 11690
// sExchange := true ;
11682: LD_ADDR_EXP 61
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// if p3 = 31 then
11690: LD_VAR 0 3
11694: PUSH
11695: LD_INT 31
11697: EQUAL
11698: IFFALSE 11708
// sFac := true ;
11700: LD_ADDR_EXP 62
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// if p3 = 32 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 32
11715: EQUAL
11716: IFFALSE 11726
// sPower := true ;
11718: LD_ADDR_EXP 63
11722: PUSH
11723: LD_INT 1
11725: ST_TO_ADDR
// if p3 = 33 then
11726: LD_VAR 0 3
11730: PUSH
11731: LD_INT 33
11733: EQUAL
11734: IFFALSE 11744
// sRandom := true ;
11736: LD_ADDR_EXP 64
11740: PUSH
11741: LD_INT 1
11743: ST_TO_ADDR
// if p3 = 34 then
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 34
11751: EQUAL
11752: IFFALSE 11762
// sShield := true ;
11754: LD_ADDR_EXP 65
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if p3 = 35 then
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 35
11769: EQUAL
11770: IFFALSE 11780
// sTime := true ;
11772: LD_ADDR_EXP 66
11776: PUSH
11777: LD_INT 1
11779: ST_TO_ADDR
// if p3 = 36 then
11780: LD_VAR 0 3
11784: PUSH
11785: LD_INT 36
11787: EQUAL
11788: IFFALSE 11798
// sTools := true ;
11790: LD_ADDR_EXP 67
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// if p3 = 101 then
11798: LD_VAR 0 3
11802: PUSH
11803: LD_INT 101
11805: EQUAL
11806: IFFALSE 11816
// sSold := true ;
11808: LD_ADDR_EXP 32
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// if p3 = 102 then
11816: LD_VAR 0 3
11820: PUSH
11821: LD_INT 102
11823: EQUAL
11824: IFFALSE 11834
// sDiff := true ;
11826: LD_ADDR_EXP 33
11830: PUSH
11831: LD_INT 1
11833: ST_TO_ADDR
// if p3 = 103 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_INT 103
11841: EQUAL
11842: IFFALSE 11852
// sFog := true ;
11844: LD_ADDR_EXP 36
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// if p3 = 104 then
11852: LD_VAR 0 3
11856: PUSH
11857: LD_INT 104
11859: EQUAL
11860: IFFALSE 11870
// sReset := true ;
11862: LD_ADDR_EXP 37
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if p3 = 105 then
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 105
11877: EQUAL
11878: IFFALSE 11888
// sSun := true ;
11880: LD_ADDR_EXP 38
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// if p3 = 106 then
11888: LD_VAR 0 3
11892: PUSH
11893: LD_INT 106
11895: EQUAL
11896: IFFALSE 11906
// sTiger := true ;
11898: LD_ADDR_EXP 34
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// if p3 = 107 then
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 107
11913: EQUAL
11914: IFFALSE 11924
// sBomb := true ;
11916: LD_ADDR_EXP 35
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// if p3 = 108 then
11924: LD_VAR 0 3
11928: PUSH
11929: LD_INT 108
11931: EQUAL
11932: IFFALSE 11942
// sWound := true ;
11934: LD_ADDR_EXP 43
11938: PUSH
11939: LD_INT 1
11941: ST_TO_ADDR
// if p3 = 109 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 109
11949: EQUAL
11950: IFFALSE 11960
// sBetray := true ;
11952: LD_ADDR_EXP 47
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if p3 = 110 then
11960: LD_VAR 0 3
11964: PUSH
11965: LD_INT 110
11967: EQUAL
11968: IFFALSE 11978
// sContamin := true ;
11970: LD_ADDR_EXP 48
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// if p3 = 111 then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_INT 111
11985: EQUAL
11986: IFFALSE 11996
// sOil := true ;
11988: LD_ADDR_EXP 50
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// if p3 = 112 then
11996: LD_VAR 0 3
12000: PUSH
12001: LD_INT 112
12003: EQUAL
12004: IFFALSE 12014
// sStu := true ;
12006: LD_ADDR_EXP 54
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// if p3 = 113 then
12014: LD_VAR 0 3
12018: PUSH
12019: LD_INT 113
12021: EQUAL
12022: IFFALSE 12032
// sBazooka := true ;
12024: LD_ADDR_EXP 57
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// if p3 = 114 then
12032: LD_VAR 0 3
12036: PUSH
12037: LD_INT 114
12039: EQUAL
12040: IFFALSE 12050
// sMortar := true ;
12042: LD_ADDR_EXP 58
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// if p3 = 115 then
12050: LD_VAR 0 3
12054: PUSH
12055: LD_INT 115
12057: EQUAL
12058: IFFALSE 12068
// sRanger := true ;
12060: LD_ADDR_EXP 68
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// if p3 = 116 then
12068: LD_VAR 0 3
12072: PUSH
12073: LD_INT 116
12075: EQUAL
12076: IFFALSE 12086
// sComputer := true ;
12078: LD_ADDR_EXP 69
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// if p3 = 117 then
12086: LD_VAR 0 3
12090: PUSH
12091: LD_INT 117
12093: EQUAL
12094: IFFALSE 12104
// s30 := true ;
12096: LD_ADDR_EXP 70
12100: PUSH
12101: LD_INT 1
12103: ST_TO_ADDR
// if p3 = 118 then
12104: LD_VAR 0 3
12108: PUSH
12109: LD_INT 118
12111: EQUAL
12112: IFFALSE 12122
// s60 := true ;
12114: LD_ADDR_EXP 71
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ; if p2 = hack_mode then
12122: LD_VAR 0 2
12126: PUSH
12127: LD_INT 101
12129: EQUAL
12130: IFFALSE 12258
// begin case p3 of 1 :
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: DOUBLE
12140: EQUAL
12141: IFTRUE 12145
12143: GO 12152
12145: POP
// hHackUnlimitedResources ; 2 :
12146: CALL 24405 0 0
12150: GO 12258
12152: LD_INT 2
12154: DOUBLE
12155: EQUAL
12156: IFTRUE 12160
12158: GO 12167
12160: POP
// hHackSetLevel10 ; 3 :
12161: CALL 24538 0 0
12165: GO 12258
12167: LD_INT 3
12169: DOUBLE
12170: EQUAL
12171: IFTRUE 12175
12173: GO 12182
12175: POP
// hHackSetLevel10YourUnits ; 4 :
12176: CALL 24623 0 0
12180: GO 12258
12182: LD_INT 4
12184: DOUBLE
12185: EQUAL
12186: IFTRUE 12190
12188: GO 12197
12190: POP
// hHackInvincible ; 5 :
12191: CALL 25071 0 0
12195: GO 12258
12197: LD_INT 5
12199: DOUBLE
12200: EQUAL
12201: IFTRUE 12205
12203: GO 12212
12205: POP
// hHackInvisible ; 6 :
12206: CALL 25182 0 0
12210: GO 12258
12212: LD_INT 6
12214: DOUBLE
12215: EQUAL
12216: IFTRUE 12220
12218: GO 12227
12220: POP
// hHackChangeYourSide ; 7 :
12221: CALL 25239 0 0
12225: GO 12258
12227: LD_INT 7
12229: DOUBLE
12230: EQUAL
12231: IFTRUE 12235
12233: GO 12242
12235: POP
// hHackChangeUnitSide ; 8 :
12236: CALL 25281 0 0
12240: GO 12258
12242: LD_INT 8
12244: DOUBLE
12245: EQUAL
12246: IFTRUE 12250
12248: GO 12257
12250: POP
// hHackFog ; end ;
12251: CALL 25382 0 0
12255: GO 12258
12257: POP
// end ; if p2 = game_save_mode then
12258: LD_VAR 0 2
12262: PUSH
12263: LD_INT 102
12265: EQUAL
12266: IFFALSE 12321
// begin if p3 = 1 then
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 1
12275: EQUAL
12276: IFFALSE 12288
// globalGameSaveCounter := p4 ;
12278: LD_ADDR_EXP 14
12282: PUSH
12283: LD_VAR 0 4
12287: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12288: LD_VAR 0 3
12292: PUSH
12293: LD_INT 2
12295: EQUAL
12296: PUSH
12297: LD_EXP 14
12301: AND
12302: IFFALSE 12321
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12304: LD_STRING setGameSaveCounter(
12306: PUSH
12307: LD_EXP 14
12311: STR
12312: PUSH
12313: LD_STRING )
12315: STR
12316: PPUSH
12317: CALL_OW 559
// end ; end ;
12321: LD_VAR 0 7
12325: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12326: LD_INT 0
12328: PPUSH
// streamModeActive := false ;
12329: LD_ADDR_EXP 15
12333: PUSH
12334: LD_INT 0
12336: ST_TO_ADDR
// normalCounter := 36 ;
12337: LD_ADDR_EXP 16
12341: PUSH
12342: LD_INT 36
12344: ST_TO_ADDR
// hardcoreCounter := 18 ;
12345: LD_ADDR_EXP 17
12349: PUSH
12350: LD_INT 18
12352: ST_TO_ADDR
// sRocket := false ;
12353: LD_ADDR_EXP 20
12357: PUSH
12358: LD_INT 0
12360: ST_TO_ADDR
// sSpeed := false ;
12361: LD_ADDR_EXP 19
12365: PUSH
12366: LD_INT 0
12368: ST_TO_ADDR
// sEngine := false ;
12369: LD_ADDR_EXP 21
12373: PUSH
12374: LD_INT 0
12376: ST_TO_ADDR
// sSpec := false ;
12377: LD_ADDR_EXP 18
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// sLevel := false ;
12385: LD_ADDR_EXP 22
12389: PUSH
12390: LD_INT 0
12392: ST_TO_ADDR
// sArmoury := false ;
12393: LD_ADDR_EXP 23
12397: PUSH
12398: LD_INT 0
12400: ST_TO_ADDR
// sRadar := false ;
12401: LD_ADDR_EXP 24
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sBunker := false ;
12409: LD_ADDR_EXP 25
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sHack := false ;
12417: LD_ADDR_EXP 26
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sFire := false ;
12425: LD_ADDR_EXP 27
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sRefresh := false ;
12433: LD_ADDR_EXP 28
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sExp := false ;
12441: LD_ADDR_EXP 29
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sDepot := false ;
12449: LD_ADDR_EXP 30
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sFlag := false ;
12457: LD_ADDR_EXP 31
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sKamikadze := false ;
12465: LD_ADDR_EXP 39
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sTroll := false ;
12473: LD_ADDR_EXP 40
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sSlow := false ;
12481: LD_ADDR_EXP 41
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sLack := false ;
12489: LD_ADDR_EXP 42
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sTank := false ;
12497: LD_ADDR_EXP 44
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sRemote := false ;
12505: LD_ADDR_EXP 45
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sPowell := false ;
12513: LD_ADDR_EXP 46
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sTeleport := false ;
12521: LD_ADDR_EXP 49
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sOilTower := false ;
12529: LD_ADDR_EXP 51
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sShovel := false ;
12537: LD_ADDR_EXP 52
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sSheik := false ;
12545: LD_ADDR_EXP 53
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sEarthquake := false ;
12553: LD_ADDR_EXP 55
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sAI := false ;
12561: LD_ADDR_EXP 56
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sCargo := false ;
12569: LD_ADDR_EXP 59
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sDLaser := false ;
12577: LD_ADDR_EXP 60
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sExchange := false ;
12585: LD_ADDR_EXP 61
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sFac := false ;
12593: LD_ADDR_EXP 62
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sPower := false ;
12601: LD_ADDR_EXP 63
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sRandom := false ;
12609: LD_ADDR_EXP 64
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sShield := false ;
12617: LD_ADDR_EXP 65
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sTime := false ;
12625: LD_ADDR_EXP 66
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sTools := false ;
12633: LD_ADDR_EXP 67
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sSold := false ;
12641: LD_ADDR_EXP 32
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sDiff := false ;
12649: LD_ADDR_EXP 33
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sFog := false ;
12657: LD_ADDR_EXP 36
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sReset := false ;
12665: LD_ADDR_EXP 37
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sSun := false ;
12673: LD_ADDR_EXP 38
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sTiger := false ;
12681: LD_ADDR_EXP 34
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sBomb := false ;
12689: LD_ADDR_EXP 35
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sWound := false ;
12697: LD_ADDR_EXP 43
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sBetray := false ;
12705: LD_ADDR_EXP 47
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sContamin := false ;
12713: LD_ADDR_EXP 48
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sOil := false ;
12721: LD_ADDR_EXP 50
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sStu := false ;
12729: LD_ADDR_EXP 54
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sBazooka := false ;
12737: LD_ADDR_EXP 57
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sMortar := false ;
12745: LD_ADDR_EXP 58
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sRanger := false ;
12753: LD_ADDR_EXP 68
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sComputer := false ;
12761: LD_ADDR_EXP 69
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// s30 := false ;
12769: LD_ADDR_EXP 70
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// s60 := false ;
12777: LD_ADDR_EXP 71
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// end ;
12785: LD_VAR 0 1
12789: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12790: LD_INT 0
12792: PPUSH
12793: PPUSH
12794: PPUSH
12795: PPUSH
12796: PPUSH
12797: PPUSH
12798: PPUSH
// result := [ ] ;
12799: LD_ADDR_VAR 0 2
12803: PUSH
12804: EMPTY
12805: ST_TO_ADDR
// if campaign_id = 1 then
12806: LD_OWVAR 69
12810: PUSH
12811: LD_INT 1
12813: EQUAL
12814: IFFALSE 15980
// begin case mission_number of 1 :
12816: LD_OWVAR 70
12820: PUSH
12821: LD_INT 1
12823: DOUBLE
12824: EQUAL
12825: IFTRUE 12829
12827: GO 12905
12829: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12830: LD_ADDR_VAR 0 2
12834: PUSH
12835: LD_INT 2
12837: PUSH
12838: LD_INT 4
12840: PUSH
12841: LD_INT 11
12843: PUSH
12844: LD_INT 12
12846: PUSH
12847: LD_INT 15
12849: PUSH
12850: LD_INT 16
12852: PUSH
12853: LD_INT 22
12855: PUSH
12856: LD_INT 23
12858: PUSH
12859: LD_INT 26
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: PUSH
12873: LD_INT 101
12875: PUSH
12876: LD_INT 102
12878: PUSH
12879: LD_INT 106
12881: PUSH
12882: LD_INT 116
12884: PUSH
12885: LD_INT 117
12887: PUSH
12888: LD_INT 118
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: ST_TO_ADDR
12903: GO 15978
12905: LD_INT 2
12907: DOUBLE
12908: EQUAL
12909: IFTRUE 12913
12911: GO 12997
12913: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12914: LD_ADDR_VAR 0 2
12918: PUSH
12919: LD_INT 2
12921: PUSH
12922: LD_INT 4
12924: PUSH
12925: LD_INT 11
12927: PUSH
12928: LD_INT 12
12930: PUSH
12931: LD_INT 15
12933: PUSH
12934: LD_INT 16
12936: PUSH
12937: LD_INT 22
12939: PUSH
12940: LD_INT 23
12942: PUSH
12943: LD_INT 26
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 101
12959: PUSH
12960: LD_INT 102
12962: PUSH
12963: LD_INT 105
12965: PUSH
12966: LD_INT 106
12968: PUSH
12969: LD_INT 108
12971: PUSH
12972: LD_INT 116
12974: PUSH
12975: LD_INT 117
12977: PUSH
12978: LD_INT 118
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: ST_TO_ADDR
12995: GO 15978
12997: LD_INT 3
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13093
13005: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13006: LD_ADDR_VAR 0 2
13010: PUSH
13011: LD_INT 2
13013: PUSH
13014: LD_INT 4
13016: PUSH
13017: LD_INT 5
13019: PUSH
13020: LD_INT 11
13022: PUSH
13023: LD_INT 12
13025: PUSH
13026: LD_INT 15
13028: PUSH
13029: LD_INT 16
13031: PUSH
13032: LD_INT 22
13034: PUSH
13035: LD_INT 26
13037: PUSH
13038: LD_INT 36
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 101
13055: PUSH
13056: LD_INT 102
13058: PUSH
13059: LD_INT 105
13061: PUSH
13062: LD_INT 106
13064: PUSH
13065: LD_INT 108
13067: PUSH
13068: LD_INT 116
13070: PUSH
13071: LD_INT 117
13073: PUSH
13074: LD_INT 118
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: ST_TO_ADDR
13091: GO 15978
13093: LD_INT 4
13095: DOUBLE
13096: EQUAL
13097: IFTRUE 13101
13099: GO 13197
13101: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13102: LD_ADDR_VAR 0 2
13106: PUSH
13107: LD_INT 2
13109: PUSH
13110: LD_INT 4
13112: PUSH
13113: LD_INT 5
13115: PUSH
13116: LD_INT 8
13118: PUSH
13119: LD_INT 11
13121: PUSH
13122: LD_INT 12
13124: PUSH
13125: LD_INT 15
13127: PUSH
13128: LD_INT 16
13130: PUSH
13131: LD_INT 22
13133: PUSH
13134: LD_INT 23
13136: PUSH
13137: LD_INT 26
13139: PUSH
13140: LD_INT 36
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 101
13159: PUSH
13160: LD_INT 102
13162: PUSH
13163: LD_INT 105
13165: PUSH
13166: LD_INT 106
13168: PUSH
13169: LD_INT 108
13171: PUSH
13172: LD_INT 116
13174: PUSH
13175: LD_INT 117
13177: PUSH
13178: LD_INT 118
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: ST_TO_ADDR
13195: GO 15978
13197: LD_INT 5
13199: DOUBLE
13200: EQUAL
13201: IFTRUE 13205
13203: GO 13317
13205: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13206: LD_ADDR_VAR 0 2
13210: PUSH
13211: LD_INT 2
13213: PUSH
13214: LD_INT 4
13216: PUSH
13217: LD_INT 5
13219: PUSH
13220: LD_INT 6
13222: PUSH
13223: LD_INT 8
13225: PUSH
13226: LD_INT 11
13228: PUSH
13229: LD_INT 12
13231: PUSH
13232: LD_INT 15
13234: PUSH
13235: LD_INT 16
13237: PUSH
13238: LD_INT 22
13240: PUSH
13241: LD_INT 23
13243: PUSH
13244: LD_INT 25
13246: PUSH
13247: LD_INT 26
13249: PUSH
13250: LD_INT 36
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: PUSH
13269: LD_INT 101
13271: PUSH
13272: LD_INT 102
13274: PUSH
13275: LD_INT 105
13277: PUSH
13278: LD_INT 106
13280: PUSH
13281: LD_INT 108
13283: PUSH
13284: LD_INT 109
13286: PUSH
13287: LD_INT 112
13289: PUSH
13290: LD_INT 116
13292: PUSH
13293: LD_INT 117
13295: PUSH
13296: LD_INT 118
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: ST_TO_ADDR
13315: GO 15978
13317: LD_INT 6
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13457
13325: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: LD_INT 4
13336: PUSH
13337: LD_INT 5
13339: PUSH
13340: LD_INT 6
13342: PUSH
13343: LD_INT 8
13345: PUSH
13346: LD_INT 11
13348: PUSH
13349: LD_INT 12
13351: PUSH
13352: LD_INT 15
13354: PUSH
13355: LD_INT 16
13357: PUSH
13358: LD_INT 20
13360: PUSH
13361: LD_INT 21
13363: PUSH
13364: LD_INT 22
13366: PUSH
13367: LD_INT 23
13369: PUSH
13370: LD_INT 25
13372: PUSH
13373: LD_INT 26
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 31
13381: PUSH
13382: LD_INT 32
13384: PUSH
13385: LD_INT 36
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 101
13411: PUSH
13412: LD_INT 102
13414: PUSH
13415: LD_INT 105
13417: PUSH
13418: LD_INT 106
13420: PUSH
13421: LD_INT 108
13423: PUSH
13424: LD_INT 109
13426: PUSH
13427: LD_INT 112
13429: PUSH
13430: LD_INT 116
13432: PUSH
13433: LD_INT 117
13435: PUSH
13436: LD_INT 118
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: ST_TO_ADDR
13455: GO 15978
13457: LD_INT 7
13459: DOUBLE
13460: EQUAL
13461: IFTRUE 13465
13463: GO 13577
13465: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13466: LD_ADDR_VAR 0 2
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: LD_INT 4
13476: PUSH
13477: LD_INT 5
13479: PUSH
13480: LD_INT 7
13482: PUSH
13483: LD_INT 11
13485: PUSH
13486: LD_INT 12
13488: PUSH
13489: LD_INT 15
13491: PUSH
13492: LD_INT 16
13494: PUSH
13495: LD_INT 20
13497: PUSH
13498: LD_INT 21
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 23
13506: PUSH
13507: LD_INT 25
13509: PUSH
13510: LD_INT 26
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 101
13531: PUSH
13532: LD_INT 102
13534: PUSH
13535: LD_INT 103
13537: PUSH
13538: LD_INT 105
13540: PUSH
13541: LD_INT 106
13543: PUSH
13544: LD_INT 108
13546: PUSH
13547: LD_INT 112
13549: PUSH
13550: LD_INT 116
13552: PUSH
13553: LD_INT 117
13555: PUSH
13556: LD_INT 118
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: ST_TO_ADDR
13575: GO 15978
13577: LD_INT 8
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13725
13585: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13586: LD_ADDR_VAR 0 2
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 4
13596: PUSH
13597: LD_INT 5
13599: PUSH
13600: LD_INT 6
13602: PUSH
13603: LD_INT 7
13605: PUSH
13606: LD_INT 8
13608: PUSH
13609: LD_INT 11
13611: PUSH
13612: LD_INT 12
13614: PUSH
13615: LD_INT 15
13617: PUSH
13618: LD_INT 16
13620: PUSH
13621: LD_INT 20
13623: PUSH
13624: LD_INT 21
13626: PUSH
13627: LD_INT 22
13629: PUSH
13630: LD_INT 23
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 26
13638: PUSH
13639: LD_INT 30
13641: PUSH
13642: LD_INT 31
13644: PUSH
13645: LD_INT 32
13647: PUSH
13648: LD_INT 36
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 101
13675: PUSH
13676: LD_INT 102
13678: PUSH
13679: LD_INT 103
13681: PUSH
13682: LD_INT 105
13684: PUSH
13685: LD_INT 106
13687: PUSH
13688: LD_INT 108
13690: PUSH
13691: LD_INT 109
13693: PUSH
13694: LD_INT 112
13696: PUSH
13697: LD_INT 116
13699: PUSH
13700: LD_INT 117
13702: PUSH
13703: LD_INT 118
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: ST_TO_ADDR
13723: GO 15978
13725: LD_INT 9
13727: DOUBLE
13728: EQUAL
13729: IFTRUE 13733
13731: GO 13881
13733: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13734: LD_ADDR_VAR 0 2
13738: PUSH
13739: LD_INT 2
13741: PUSH
13742: LD_INT 4
13744: PUSH
13745: LD_INT 5
13747: PUSH
13748: LD_INT 6
13750: PUSH
13751: LD_INT 7
13753: PUSH
13754: LD_INT 8
13756: PUSH
13757: LD_INT 11
13759: PUSH
13760: LD_INT 12
13762: PUSH
13763: LD_INT 15
13765: PUSH
13766: LD_INT 16
13768: PUSH
13769: LD_INT 20
13771: PUSH
13772: LD_INT 21
13774: PUSH
13775: LD_INT 22
13777: PUSH
13778: LD_INT 23
13780: PUSH
13781: LD_INT 25
13783: PUSH
13784: LD_INT 26
13786: PUSH
13787: LD_INT 28
13789: PUSH
13790: LD_INT 30
13792: PUSH
13793: LD_INT 31
13795: PUSH
13796: LD_INT 32
13798: PUSH
13799: LD_INT 36
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 101
13827: PUSH
13828: LD_INT 102
13830: PUSH
13831: LD_INT 103
13833: PUSH
13834: LD_INT 105
13836: PUSH
13837: LD_INT 106
13839: PUSH
13840: LD_INT 108
13842: PUSH
13843: LD_INT 109
13845: PUSH
13846: LD_INT 112
13848: PUSH
13849: LD_INT 114
13851: PUSH
13852: LD_INT 116
13854: PUSH
13855: LD_INT 117
13857: PUSH
13858: LD_INT 118
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: ST_TO_ADDR
13879: GO 15978
13881: LD_INT 10
13883: DOUBLE
13884: EQUAL
13885: IFTRUE 13889
13887: GO 14085
13889: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13890: LD_ADDR_VAR 0 2
13894: PUSH
13895: LD_INT 2
13897: PUSH
13898: LD_INT 4
13900: PUSH
13901: LD_INT 5
13903: PUSH
13904: LD_INT 6
13906: PUSH
13907: LD_INT 7
13909: PUSH
13910: LD_INT 8
13912: PUSH
13913: LD_INT 9
13915: PUSH
13916: LD_INT 10
13918: PUSH
13919: LD_INT 11
13921: PUSH
13922: LD_INT 12
13924: PUSH
13925: LD_INT 13
13927: PUSH
13928: LD_INT 14
13930: PUSH
13931: LD_INT 15
13933: PUSH
13934: LD_INT 16
13936: PUSH
13937: LD_INT 17
13939: PUSH
13940: LD_INT 18
13942: PUSH
13943: LD_INT 19
13945: PUSH
13946: LD_INT 20
13948: PUSH
13949: LD_INT 21
13951: PUSH
13952: LD_INT 22
13954: PUSH
13955: LD_INT 23
13957: PUSH
13958: LD_INT 24
13960: PUSH
13961: LD_INT 25
13963: PUSH
13964: LD_INT 26
13966: PUSH
13967: LD_INT 28
13969: PUSH
13970: LD_INT 30
13972: PUSH
13973: LD_INT 31
13975: PUSH
13976: LD_INT 32
13978: PUSH
13979: LD_INT 36
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 101
14015: PUSH
14016: LD_INT 102
14018: PUSH
14019: LD_INT 103
14021: PUSH
14022: LD_INT 104
14024: PUSH
14025: LD_INT 105
14027: PUSH
14028: LD_INT 106
14030: PUSH
14031: LD_INT 107
14033: PUSH
14034: LD_INT 108
14036: PUSH
14037: LD_INT 109
14039: PUSH
14040: LD_INT 110
14042: PUSH
14043: LD_INT 111
14045: PUSH
14046: LD_INT 112
14048: PUSH
14049: LD_INT 114
14051: PUSH
14052: LD_INT 116
14054: PUSH
14055: LD_INT 117
14057: PUSH
14058: LD_INT 118
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: ST_TO_ADDR
14083: GO 15978
14085: LD_INT 11
14087: DOUBLE
14088: EQUAL
14089: IFTRUE 14093
14091: GO 14297
14093: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: LD_INT 3
14104: PUSH
14105: LD_INT 4
14107: PUSH
14108: LD_INT 5
14110: PUSH
14111: LD_INT 6
14113: PUSH
14114: LD_INT 7
14116: PUSH
14117: LD_INT 8
14119: PUSH
14120: LD_INT 9
14122: PUSH
14123: LD_INT 10
14125: PUSH
14126: LD_INT 11
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: LD_INT 13
14134: PUSH
14135: LD_INT 14
14137: PUSH
14138: LD_INT 15
14140: PUSH
14141: LD_INT 16
14143: PUSH
14144: LD_INT 17
14146: PUSH
14147: LD_INT 18
14149: PUSH
14150: LD_INT 19
14152: PUSH
14153: LD_INT 20
14155: PUSH
14156: LD_INT 21
14158: PUSH
14159: LD_INT 22
14161: PUSH
14162: LD_INT 23
14164: PUSH
14165: LD_INT 24
14167: PUSH
14168: LD_INT 25
14170: PUSH
14171: LD_INT 26
14173: PUSH
14174: LD_INT 28
14176: PUSH
14177: LD_INT 30
14179: PUSH
14180: LD_INT 31
14182: PUSH
14183: LD_INT 32
14185: PUSH
14186: LD_INT 34
14188: PUSH
14189: LD_INT 36
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 101
14227: PUSH
14228: LD_INT 102
14230: PUSH
14231: LD_INT 103
14233: PUSH
14234: LD_INT 104
14236: PUSH
14237: LD_INT 105
14239: PUSH
14240: LD_INT 106
14242: PUSH
14243: LD_INT 107
14245: PUSH
14246: LD_INT 108
14248: PUSH
14249: LD_INT 109
14251: PUSH
14252: LD_INT 110
14254: PUSH
14255: LD_INT 111
14257: PUSH
14258: LD_INT 112
14260: PUSH
14261: LD_INT 114
14263: PUSH
14264: LD_INT 116
14266: PUSH
14267: LD_INT 117
14269: PUSH
14270: LD_INT 118
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: ST_TO_ADDR
14295: GO 15978
14297: LD_INT 12
14299: DOUBLE
14300: EQUAL
14301: IFTRUE 14305
14303: GO 14525
14305: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14306: LD_ADDR_VAR 0 2
14310: PUSH
14311: LD_INT 1
14313: PUSH
14314: LD_INT 2
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: LD_INT 4
14322: PUSH
14323: LD_INT 5
14325: PUSH
14326: LD_INT 6
14328: PUSH
14329: LD_INT 7
14331: PUSH
14332: LD_INT 8
14334: PUSH
14335: LD_INT 9
14337: PUSH
14338: LD_INT 10
14340: PUSH
14341: LD_INT 11
14343: PUSH
14344: LD_INT 12
14346: PUSH
14347: LD_INT 13
14349: PUSH
14350: LD_INT 14
14352: PUSH
14353: LD_INT 15
14355: PUSH
14356: LD_INT 16
14358: PUSH
14359: LD_INT 17
14361: PUSH
14362: LD_INT 18
14364: PUSH
14365: LD_INT 19
14367: PUSH
14368: LD_INT 20
14370: PUSH
14371: LD_INT 21
14373: PUSH
14374: LD_INT 22
14376: PUSH
14377: LD_INT 23
14379: PUSH
14380: LD_INT 24
14382: PUSH
14383: LD_INT 25
14385: PUSH
14386: LD_INT 26
14388: PUSH
14389: LD_INT 27
14391: PUSH
14392: LD_INT 28
14394: PUSH
14395: LD_INT 30
14397: PUSH
14398: LD_INT 31
14400: PUSH
14401: LD_INT 32
14403: PUSH
14404: LD_INT 33
14406: PUSH
14407: LD_INT 34
14409: PUSH
14410: LD_INT 36
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 101
14451: PUSH
14452: LD_INT 102
14454: PUSH
14455: LD_INT 103
14457: PUSH
14458: LD_INT 104
14460: PUSH
14461: LD_INT 105
14463: PUSH
14464: LD_INT 106
14466: PUSH
14467: LD_INT 107
14469: PUSH
14470: LD_INT 108
14472: PUSH
14473: LD_INT 109
14475: PUSH
14476: LD_INT 110
14478: PUSH
14479: LD_INT 111
14481: PUSH
14482: LD_INT 112
14484: PUSH
14485: LD_INT 113
14487: PUSH
14488: LD_INT 114
14490: PUSH
14491: LD_INT 116
14493: PUSH
14494: LD_INT 117
14496: PUSH
14497: LD_INT 118
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: ST_TO_ADDR
14523: GO 15978
14525: LD_INT 13
14527: DOUBLE
14528: EQUAL
14529: IFTRUE 14533
14531: GO 14741
14533: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14534: LD_ADDR_VAR 0 2
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: LD_INT 2
14544: PUSH
14545: LD_INT 3
14547: PUSH
14548: LD_INT 4
14550: PUSH
14551: LD_INT 5
14553: PUSH
14554: LD_INT 8
14556: PUSH
14557: LD_INT 9
14559: PUSH
14560: LD_INT 10
14562: PUSH
14563: LD_INT 11
14565: PUSH
14566: LD_INT 12
14568: PUSH
14569: LD_INT 14
14571: PUSH
14572: LD_INT 15
14574: PUSH
14575: LD_INT 16
14577: PUSH
14578: LD_INT 17
14580: PUSH
14581: LD_INT 18
14583: PUSH
14584: LD_INT 19
14586: PUSH
14587: LD_INT 20
14589: PUSH
14590: LD_INT 21
14592: PUSH
14593: LD_INT 22
14595: PUSH
14596: LD_INT 23
14598: PUSH
14599: LD_INT 24
14601: PUSH
14602: LD_INT 25
14604: PUSH
14605: LD_INT 26
14607: PUSH
14608: LD_INT 27
14610: PUSH
14611: LD_INT 28
14613: PUSH
14614: LD_INT 30
14616: PUSH
14617: LD_INT 31
14619: PUSH
14620: LD_INT 32
14622: PUSH
14623: LD_INT 33
14625: PUSH
14626: LD_INT 34
14628: PUSH
14629: LD_INT 36
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 101
14667: PUSH
14668: LD_INT 102
14670: PUSH
14671: LD_INT 103
14673: PUSH
14674: LD_INT 104
14676: PUSH
14677: LD_INT 105
14679: PUSH
14680: LD_INT 106
14682: PUSH
14683: LD_INT 107
14685: PUSH
14686: LD_INT 108
14688: PUSH
14689: LD_INT 109
14691: PUSH
14692: LD_INT 110
14694: PUSH
14695: LD_INT 111
14697: PUSH
14698: LD_INT 112
14700: PUSH
14701: LD_INT 113
14703: PUSH
14704: LD_INT 114
14706: PUSH
14707: LD_INT 116
14709: PUSH
14710: LD_INT 117
14712: PUSH
14713: LD_INT 118
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: ST_TO_ADDR
14739: GO 15978
14741: LD_INT 14
14743: DOUBLE
14744: EQUAL
14745: IFTRUE 14749
14747: GO 14973
14749: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14750: LD_ADDR_VAR 0 2
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: LD_INT 2
14760: PUSH
14761: LD_INT 3
14763: PUSH
14764: LD_INT 4
14766: PUSH
14767: LD_INT 5
14769: PUSH
14770: LD_INT 6
14772: PUSH
14773: LD_INT 7
14775: PUSH
14776: LD_INT 8
14778: PUSH
14779: LD_INT 9
14781: PUSH
14782: LD_INT 10
14784: PUSH
14785: LD_INT 11
14787: PUSH
14788: LD_INT 12
14790: PUSH
14791: LD_INT 13
14793: PUSH
14794: LD_INT 14
14796: PUSH
14797: LD_INT 15
14799: PUSH
14800: LD_INT 16
14802: PUSH
14803: LD_INT 17
14805: PUSH
14806: LD_INT 18
14808: PUSH
14809: LD_INT 19
14811: PUSH
14812: LD_INT 20
14814: PUSH
14815: LD_INT 21
14817: PUSH
14818: LD_INT 22
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 24
14826: PUSH
14827: LD_INT 25
14829: PUSH
14830: LD_INT 26
14832: PUSH
14833: LD_INT 27
14835: PUSH
14836: LD_INT 28
14838: PUSH
14839: LD_INT 29
14841: PUSH
14842: LD_INT 30
14844: PUSH
14845: LD_INT 31
14847: PUSH
14848: LD_INT 32
14850: PUSH
14851: LD_INT 33
14853: PUSH
14854: LD_INT 34
14856: PUSH
14857: LD_INT 36
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 101
14899: PUSH
14900: LD_INT 102
14902: PUSH
14903: LD_INT 103
14905: PUSH
14906: LD_INT 104
14908: PUSH
14909: LD_INT 105
14911: PUSH
14912: LD_INT 106
14914: PUSH
14915: LD_INT 107
14917: PUSH
14918: LD_INT 108
14920: PUSH
14921: LD_INT 109
14923: PUSH
14924: LD_INT 110
14926: PUSH
14927: LD_INT 111
14929: PUSH
14930: LD_INT 112
14932: PUSH
14933: LD_INT 113
14935: PUSH
14936: LD_INT 114
14938: PUSH
14939: LD_INT 116
14941: PUSH
14942: LD_INT 117
14944: PUSH
14945: LD_INT 118
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: ST_TO_ADDR
14971: GO 15978
14973: LD_INT 15
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 15205
14981: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14982: LD_ADDR_VAR 0 2
14986: PUSH
14987: LD_INT 1
14989: PUSH
14990: LD_INT 2
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 4
14998: PUSH
14999: LD_INT 5
15001: PUSH
15002: LD_INT 6
15004: PUSH
15005: LD_INT 7
15007: PUSH
15008: LD_INT 8
15010: PUSH
15011: LD_INT 9
15013: PUSH
15014: LD_INT 10
15016: PUSH
15017: LD_INT 11
15019: PUSH
15020: LD_INT 12
15022: PUSH
15023: LD_INT 13
15025: PUSH
15026: LD_INT 14
15028: PUSH
15029: LD_INT 15
15031: PUSH
15032: LD_INT 16
15034: PUSH
15035: LD_INT 17
15037: PUSH
15038: LD_INT 18
15040: PUSH
15041: LD_INT 19
15043: PUSH
15044: LD_INT 20
15046: PUSH
15047: LD_INT 21
15049: PUSH
15050: LD_INT 22
15052: PUSH
15053: LD_INT 23
15055: PUSH
15056: LD_INT 24
15058: PUSH
15059: LD_INT 25
15061: PUSH
15062: LD_INT 26
15064: PUSH
15065: LD_INT 27
15067: PUSH
15068: LD_INT 28
15070: PUSH
15071: LD_INT 29
15073: PUSH
15074: LD_INT 30
15076: PUSH
15077: LD_INT 31
15079: PUSH
15080: LD_INT 32
15082: PUSH
15083: LD_INT 33
15085: PUSH
15086: LD_INT 34
15088: PUSH
15089: LD_INT 36
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 101
15131: PUSH
15132: LD_INT 102
15134: PUSH
15135: LD_INT 103
15137: PUSH
15138: LD_INT 104
15140: PUSH
15141: LD_INT 105
15143: PUSH
15144: LD_INT 106
15146: PUSH
15147: LD_INT 107
15149: PUSH
15150: LD_INT 108
15152: PUSH
15153: LD_INT 109
15155: PUSH
15156: LD_INT 110
15158: PUSH
15159: LD_INT 111
15161: PUSH
15162: LD_INT 112
15164: PUSH
15165: LD_INT 113
15167: PUSH
15168: LD_INT 114
15170: PUSH
15171: LD_INT 116
15173: PUSH
15174: LD_INT 117
15176: PUSH
15177: LD_INT 118
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: ST_TO_ADDR
15203: GO 15978
15205: LD_INT 16
15207: DOUBLE
15208: EQUAL
15209: IFTRUE 15213
15211: GO 15349
15213: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15214: LD_ADDR_VAR 0 2
15218: PUSH
15219: LD_INT 2
15221: PUSH
15222: LD_INT 4
15224: PUSH
15225: LD_INT 5
15227: PUSH
15228: LD_INT 7
15230: PUSH
15231: LD_INT 11
15233: PUSH
15234: LD_INT 12
15236: PUSH
15237: LD_INT 15
15239: PUSH
15240: LD_INT 16
15242: PUSH
15243: LD_INT 20
15245: PUSH
15246: LD_INT 21
15248: PUSH
15249: LD_INT 22
15251: PUSH
15252: LD_INT 23
15254: PUSH
15255: LD_INT 25
15257: PUSH
15258: LD_INT 26
15260: PUSH
15261: LD_INT 30
15263: PUSH
15264: LD_INT 31
15266: PUSH
15267: LD_INT 32
15269: PUSH
15270: LD_INT 33
15272: PUSH
15273: LD_INT 34
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 101
15299: PUSH
15300: LD_INT 102
15302: PUSH
15303: LD_INT 103
15305: PUSH
15306: LD_INT 106
15308: PUSH
15309: LD_INT 108
15311: PUSH
15312: LD_INT 112
15314: PUSH
15315: LD_INT 113
15317: PUSH
15318: LD_INT 114
15320: PUSH
15321: LD_INT 116
15323: PUSH
15324: LD_INT 117
15326: PUSH
15327: LD_INT 118
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: ST_TO_ADDR
15347: GO 15978
15349: LD_INT 17
15351: DOUBLE
15352: EQUAL
15353: IFTRUE 15357
15355: GO 15581
15357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: LD_INT 2
15368: PUSH
15369: LD_INT 3
15371: PUSH
15372: LD_INT 4
15374: PUSH
15375: LD_INT 5
15377: PUSH
15378: LD_INT 6
15380: PUSH
15381: LD_INT 7
15383: PUSH
15384: LD_INT 8
15386: PUSH
15387: LD_INT 9
15389: PUSH
15390: LD_INT 10
15392: PUSH
15393: LD_INT 11
15395: PUSH
15396: LD_INT 12
15398: PUSH
15399: LD_INT 13
15401: PUSH
15402: LD_INT 14
15404: PUSH
15405: LD_INT 15
15407: PUSH
15408: LD_INT 16
15410: PUSH
15411: LD_INT 17
15413: PUSH
15414: LD_INT 18
15416: PUSH
15417: LD_INT 19
15419: PUSH
15420: LD_INT 20
15422: PUSH
15423: LD_INT 21
15425: PUSH
15426: LD_INT 22
15428: PUSH
15429: LD_INT 23
15431: PUSH
15432: LD_INT 24
15434: PUSH
15435: LD_INT 25
15437: PUSH
15438: LD_INT 26
15440: PUSH
15441: LD_INT 27
15443: PUSH
15444: LD_INT 28
15446: PUSH
15447: LD_INT 29
15449: PUSH
15450: LD_INT 30
15452: PUSH
15453: LD_INT 31
15455: PUSH
15456: LD_INT 32
15458: PUSH
15459: LD_INT 33
15461: PUSH
15462: LD_INT 34
15464: PUSH
15465: LD_INT 36
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 101
15507: PUSH
15508: LD_INT 102
15510: PUSH
15511: LD_INT 103
15513: PUSH
15514: LD_INT 104
15516: PUSH
15517: LD_INT 105
15519: PUSH
15520: LD_INT 106
15522: PUSH
15523: LD_INT 107
15525: PUSH
15526: LD_INT 108
15528: PUSH
15529: LD_INT 109
15531: PUSH
15532: LD_INT 110
15534: PUSH
15535: LD_INT 111
15537: PUSH
15538: LD_INT 112
15540: PUSH
15541: LD_INT 113
15543: PUSH
15544: LD_INT 114
15546: PUSH
15547: LD_INT 116
15549: PUSH
15550: LD_INT 117
15552: PUSH
15553: LD_INT 118
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
15579: GO 15978
15581: LD_INT 18
15583: DOUBLE
15584: EQUAL
15585: IFTRUE 15589
15587: GO 15737
15589: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15590: LD_ADDR_VAR 0 2
15594: PUSH
15595: LD_INT 2
15597: PUSH
15598: LD_INT 4
15600: PUSH
15601: LD_INT 5
15603: PUSH
15604: LD_INT 7
15606: PUSH
15607: LD_INT 11
15609: PUSH
15610: LD_INT 12
15612: PUSH
15613: LD_INT 15
15615: PUSH
15616: LD_INT 16
15618: PUSH
15619: LD_INT 20
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 22
15627: PUSH
15628: LD_INT 23
15630: PUSH
15631: LD_INT 25
15633: PUSH
15634: LD_INT 26
15636: PUSH
15637: LD_INT 30
15639: PUSH
15640: LD_INT 31
15642: PUSH
15643: LD_INT 32
15645: PUSH
15646: LD_INT 33
15648: PUSH
15649: LD_INT 34
15651: PUSH
15652: LD_INT 35
15654: PUSH
15655: LD_INT 36
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 101
15683: PUSH
15684: LD_INT 102
15686: PUSH
15687: LD_INT 103
15689: PUSH
15690: LD_INT 106
15692: PUSH
15693: LD_INT 108
15695: PUSH
15696: LD_INT 112
15698: PUSH
15699: LD_INT 113
15701: PUSH
15702: LD_INT 114
15704: PUSH
15705: LD_INT 115
15707: PUSH
15708: LD_INT 116
15710: PUSH
15711: LD_INT 117
15713: PUSH
15714: LD_INT 118
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: ST_TO_ADDR
15735: GO 15978
15737: LD_INT 19
15739: DOUBLE
15740: EQUAL
15741: IFTRUE 15745
15743: GO 15977
15745: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15746: LD_ADDR_VAR 0 2
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 3
15759: PUSH
15760: LD_INT 4
15762: PUSH
15763: LD_INT 5
15765: PUSH
15766: LD_INT 6
15768: PUSH
15769: LD_INT 7
15771: PUSH
15772: LD_INT 8
15774: PUSH
15775: LD_INT 9
15777: PUSH
15778: LD_INT 10
15780: PUSH
15781: LD_INT 11
15783: PUSH
15784: LD_INT 12
15786: PUSH
15787: LD_INT 13
15789: PUSH
15790: LD_INT 14
15792: PUSH
15793: LD_INT 15
15795: PUSH
15796: LD_INT 16
15798: PUSH
15799: LD_INT 17
15801: PUSH
15802: LD_INT 18
15804: PUSH
15805: LD_INT 19
15807: PUSH
15808: LD_INT 20
15810: PUSH
15811: LD_INT 21
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_INT 23
15819: PUSH
15820: LD_INT 24
15822: PUSH
15823: LD_INT 25
15825: PUSH
15826: LD_INT 26
15828: PUSH
15829: LD_INT 27
15831: PUSH
15832: LD_INT 28
15834: PUSH
15835: LD_INT 29
15837: PUSH
15838: LD_INT 30
15840: PUSH
15841: LD_INT 31
15843: PUSH
15844: LD_INT 32
15846: PUSH
15847: LD_INT 33
15849: PUSH
15850: LD_INT 34
15852: PUSH
15853: LD_INT 35
15855: PUSH
15856: LD_INT 36
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 101
15899: PUSH
15900: LD_INT 102
15902: PUSH
15903: LD_INT 103
15905: PUSH
15906: LD_INT 104
15908: PUSH
15909: LD_INT 105
15911: PUSH
15912: LD_INT 106
15914: PUSH
15915: LD_INT 107
15917: PUSH
15918: LD_INT 108
15920: PUSH
15921: LD_INT 109
15923: PUSH
15924: LD_INT 110
15926: PUSH
15927: LD_INT 111
15929: PUSH
15930: LD_INT 112
15932: PUSH
15933: LD_INT 113
15935: PUSH
15936: LD_INT 114
15938: PUSH
15939: LD_INT 115
15941: PUSH
15942: LD_INT 116
15944: PUSH
15945: LD_INT 117
15947: PUSH
15948: LD_INT 118
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: ST_TO_ADDR
15975: GO 15978
15977: POP
// end else
15978: GO 16209
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15980: LD_ADDR_VAR 0 2
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: LD_INT 3
15993: PUSH
15994: LD_INT 4
15996: PUSH
15997: LD_INT 5
15999: PUSH
16000: LD_INT 6
16002: PUSH
16003: LD_INT 7
16005: PUSH
16006: LD_INT 8
16008: PUSH
16009: LD_INT 9
16011: PUSH
16012: LD_INT 10
16014: PUSH
16015: LD_INT 11
16017: PUSH
16018: LD_INT 12
16020: PUSH
16021: LD_INT 13
16023: PUSH
16024: LD_INT 14
16026: PUSH
16027: LD_INT 15
16029: PUSH
16030: LD_INT 16
16032: PUSH
16033: LD_INT 17
16035: PUSH
16036: LD_INT 18
16038: PUSH
16039: LD_INT 19
16041: PUSH
16042: LD_INT 20
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 22
16050: PUSH
16051: LD_INT 23
16053: PUSH
16054: LD_INT 24
16056: PUSH
16057: LD_INT 25
16059: PUSH
16060: LD_INT 26
16062: PUSH
16063: LD_INT 27
16065: PUSH
16066: LD_INT 28
16068: PUSH
16069: LD_INT 29
16071: PUSH
16072: LD_INT 30
16074: PUSH
16075: LD_INT 31
16077: PUSH
16078: LD_INT 32
16080: PUSH
16081: LD_INT 33
16083: PUSH
16084: LD_INT 34
16086: PUSH
16087: LD_INT 35
16089: PUSH
16090: LD_INT 36
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 101
16133: PUSH
16134: LD_INT 102
16136: PUSH
16137: LD_INT 103
16139: PUSH
16140: LD_INT 104
16142: PUSH
16143: LD_INT 105
16145: PUSH
16146: LD_INT 106
16148: PUSH
16149: LD_INT 107
16151: PUSH
16152: LD_INT 108
16154: PUSH
16155: LD_INT 109
16157: PUSH
16158: LD_INT 110
16160: PUSH
16161: LD_INT 111
16163: PUSH
16164: LD_INT 112
16166: PUSH
16167: LD_INT 113
16169: PUSH
16170: LD_INT 114
16172: PUSH
16173: LD_INT 115
16175: PUSH
16176: LD_INT 116
16178: PUSH
16179: LD_INT 117
16181: PUSH
16182: LD_INT 118
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: ST_TO_ADDR
// if result then
16209: LD_VAR 0 2
16213: IFFALSE 16999
// begin normal :=  ;
16215: LD_ADDR_VAR 0 5
16219: PUSH
16220: LD_STRING 
16222: ST_TO_ADDR
// hardcore :=  ;
16223: LD_ADDR_VAR 0 6
16227: PUSH
16228: LD_STRING 
16230: ST_TO_ADDR
// active :=  ;
16231: LD_ADDR_VAR 0 7
16235: PUSH
16236: LD_STRING 
16238: ST_TO_ADDR
// for i = 1 to normalCounter do
16239: LD_ADDR_VAR 0 8
16243: PUSH
16244: DOUBLE
16245: LD_INT 1
16247: DEC
16248: ST_TO_ADDR
16249: LD_EXP 16
16253: PUSH
16254: FOR_TO
16255: IFFALSE 16356
// begin tmp := 0 ;
16257: LD_ADDR_VAR 0 3
16261: PUSH
16262: LD_STRING 0
16264: ST_TO_ADDR
// if result [ 1 ] then
16265: LD_VAR 0 2
16269: PUSH
16270: LD_INT 1
16272: ARRAY
16273: IFFALSE 16338
// if result [ 1 ] [ 1 ] = i then
16275: LD_VAR 0 2
16279: PUSH
16280: LD_INT 1
16282: ARRAY
16283: PUSH
16284: LD_INT 1
16286: ARRAY
16287: PUSH
16288: LD_VAR 0 8
16292: EQUAL
16293: IFFALSE 16338
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16295: LD_ADDR_VAR 0 2
16299: PUSH
16300: LD_VAR 0 2
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_VAR 0 2
16312: PUSH
16313: LD_INT 1
16315: ARRAY
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: CALL_OW 3
16324: PPUSH
16325: CALL_OW 1
16329: ST_TO_ADDR
// tmp := 1 ;
16330: LD_ADDR_VAR 0 3
16334: PUSH
16335: LD_STRING 1
16337: ST_TO_ADDR
// end ; normal := normal & tmp ;
16338: LD_ADDR_VAR 0 5
16342: PUSH
16343: LD_VAR 0 5
16347: PUSH
16348: LD_VAR 0 3
16352: STR
16353: ST_TO_ADDR
// end ;
16354: GO 16254
16356: POP
16357: POP
// for i = 1 to hardcoreCounter do
16358: LD_ADDR_VAR 0 8
16362: PUSH
16363: DOUBLE
16364: LD_INT 1
16366: DEC
16367: ST_TO_ADDR
16368: LD_EXP 17
16372: PUSH
16373: FOR_TO
16374: IFFALSE 16479
// begin tmp := 0 ;
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: LD_STRING 0
16383: ST_TO_ADDR
// if result [ 2 ] then
16384: LD_VAR 0 2
16388: PUSH
16389: LD_INT 2
16391: ARRAY
16392: IFFALSE 16461
// if result [ 2 ] [ 1 ] = 100 + i then
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 2
16401: ARRAY
16402: PUSH
16403: LD_INT 1
16405: ARRAY
16406: PUSH
16407: LD_INT 100
16409: PUSH
16410: LD_VAR 0 8
16414: PLUS
16415: EQUAL
16416: IFFALSE 16461
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16418: LD_ADDR_VAR 0 2
16422: PUSH
16423: LD_VAR 0 2
16427: PPUSH
16428: LD_INT 2
16430: PPUSH
16431: LD_VAR 0 2
16435: PUSH
16436: LD_INT 2
16438: ARRAY
16439: PPUSH
16440: LD_INT 1
16442: PPUSH
16443: CALL_OW 3
16447: PPUSH
16448: CALL_OW 1
16452: ST_TO_ADDR
// tmp := 1 ;
16453: LD_ADDR_VAR 0 3
16457: PUSH
16458: LD_STRING 1
16460: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16461: LD_ADDR_VAR 0 6
16465: PUSH
16466: LD_VAR 0 6
16470: PUSH
16471: LD_VAR 0 3
16475: STR
16476: ST_TO_ADDR
// end ;
16477: GO 16373
16479: POP
16480: POP
// if isGameLoad then
16481: LD_VAR 0 1
16485: IFFALSE 16960
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16487: LD_ADDR_VAR 0 4
16491: PUSH
16492: LD_EXP 20
16496: PUSH
16497: LD_EXP 19
16501: PUSH
16502: LD_EXP 21
16506: PUSH
16507: LD_EXP 18
16511: PUSH
16512: LD_EXP 22
16516: PUSH
16517: LD_EXP 23
16521: PUSH
16522: LD_EXP 24
16526: PUSH
16527: LD_EXP 25
16531: PUSH
16532: LD_EXP 26
16536: PUSH
16537: LD_EXP 27
16541: PUSH
16542: LD_EXP 28
16546: PUSH
16547: LD_EXP 29
16551: PUSH
16552: LD_EXP 30
16556: PUSH
16557: LD_EXP 31
16561: PUSH
16562: LD_EXP 39
16566: PUSH
16567: LD_EXP 40
16571: PUSH
16572: LD_EXP 41
16576: PUSH
16577: LD_EXP 42
16581: PUSH
16582: LD_EXP 44
16586: PUSH
16587: LD_EXP 45
16591: PUSH
16592: LD_EXP 46
16596: PUSH
16597: LD_EXP 49
16601: PUSH
16602: LD_EXP 51
16606: PUSH
16607: LD_EXP 52
16611: PUSH
16612: LD_EXP 53
16616: PUSH
16617: LD_EXP 55
16621: PUSH
16622: LD_EXP 56
16626: PUSH
16627: LD_EXP 59
16631: PUSH
16632: LD_EXP 60
16636: PUSH
16637: LD_EXP 61
16641: PUSH
16642: LD_EXP 62
16646: PUSH
16647: LD_EXP 63
16651: PUSH
16652: LD_EXP 64
16656: PUSH
16657: LD_EXP 65
16661: PUSH
16662: LD_EXP 66
16666: PUSH
16667: LD_EXP 67
16671: PUSH
16672: LD_EXP 32
16676: PUSH
16677: LD_EXP 33
16681: PUSH
16682: LD_EXP 36
16686: PUSH
16687: LD_EXP 37
16691: PUSH
16692: LD_EXP 38
16696: PUSH
16697: LD_EXP 34
16701: PUSH
16702: LD_EXP 35
16706: PUSH
16707: LD_EXP 43
16711: PUSH
16712: LD_EXP 47
16716: PUSH
16717: LD_EXP 48
16721: PUSH
16722: LD_EXP 50
16726: PUSH
16727: LD_EXP 54
16731: PUSH
16732: LD_EXP 57
16736: PUSH
16737: LD_EXP 58
16741: PUSH
16742: LD_EXP 68
16746: PUSH
16747: LD_EXP 69
16751: PUSH
16752: LD_EXP 70
16756: PUSH
16757: LD_EXP 71
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: ST_TO_ADDR
// tmp :=  ;
16818: LD_ADDR_VAR 0 3
16822: PUSH
16823: LD_STRING 
16825: ST_TO_ADDR
// for i = 1 to normalCounter do
16826: LD_ADDR_VAR 0 8
16830: PUSH
16831: DOUBLE
16832: LD_INT 1
16834: DEC
16835: ST_TO_ADDR
16836: LD_EXP 16
16840: PUSH
16841: FOR_TO
16842: IFFALSE 16878
// begin if flags [ i ] then
16844: LD_VAR 0 4
16848: PUSH
16849: LD_VAR 0 8
16853: ARRAY
16854: IFFALSE 16876
// tmp := tmp & i & ; ;
16856: LD_ADDR_VAR 0 3
16860: PUSH
16861: LD_VAR 0 3
16865: PUSH
16866: LD_VAR 0 8
16870: STR
16871: PUSH
16872: LD_STRING ;
16874: STR
16875: ST_TO_ADDR
// end ;
16876: GO 16841
16878: POP
16879: POP
// for i = 1 to hardcoreCounter do
16880: LD_ADDR_VAR 0 8
16884: PUSH
16885: DOUBLE
16886: LD_INT 1
16888: DEC
16889: ST_TO_ADDR
16890: LD_EXP 17
16894: PUSH
16895: FOR_TO
16896: IFFALSE 16942
// begin if flags [ normalCounter + i ] then
16898: LD_VAR 0 4
16902: PUSH
16903: LD_EXP 16
16907: PUSH
16908: LD_VAR 0 8
16912: PLUS
16913: ARRAY
16914: IFFALSE 16940
// tmp := tmp & ( 100 + i ) & ; ;
16916: LD_ADDR_VAR 0 3
16920: PUSH
16921: LD_VAR 0 3
16925: PUSH
16926: LD_INT 100
16928: PUSH
16929: LD_VAR 0 8
16933: PLUS
16934: STR
16935: PUSH
16936: LD_STRING ;
16938: STR
16939: ST_TO_ADDR
// end ;
16940: GO 16895
16942: POP
16943: POP
// if tmp then
16944: LD_VAR 0 3
16948: IFFALSE 16960
// active := tmp ;
16950: LD_ADDR_VAR 0 7
16954: PUSH
16955: LD_VAR 0 3
16959: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16960: LD_STRING getStreamItemsFromMission("
16962: PUSH
16963: LD_VAR 0 5
16967: STR
16968: PUSH
16969: LD_STRING ","
16971: STR
16972: PUSH
16973: LD_VAR 0 6
16977: STR
16978: PUSH
16979: LD_STRING ","
16981: STR
16982: PUSH
16983: LD_VAR 0 7
16987: STR
16988: PUSH
16989: LD_STRING ")
16991: STR
16992: PPUSH
16993: CALL_OW 559
// end else
16997: GO 17006
// ToLua ( getStreamItemsFromMission("","","") ) ;
16999: LD_STRING getStreamItemsFromMission("","","")
17001: PPUSH
17002: CALL_OW 559
// end ;
17006: LD_VAR 0 2
17010: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17011: LD_EXP 15
17015: PUSH
17016: LD_EXP 20
17020: AND
17021: IFFALSE 17145
17023: GO 17025
17025: DISABLE
17026: LD_INT 0
17028: PPUSH
17029: PPUSH
// begin enable ;
17030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17031: LD_ADDR_VAR 0 2
17035: PUSH
17036: LD_INT 22
17038: PUSH
17039: LD_OWVAR 2
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 34
17053: PUSH
17054: LD_INT 7
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 34
17063: PUSH
17064: LD_INT 45
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 34
17073: PUSH
17074: LD_INT 28
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 34
17083: PUSH
17084: LD_INT 47
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PPUSH
17102: CALL_OW 69
17106: ST_TO_ADDR
// if not tmp then
17107: LD_VAR 0 2
17111: NOT
17112: IFFALSE 17116
// exit ;
17114: GO 17145
// for i in tmp do
17116: LD_ADDR_VAR 0 1
17120: PUSH
17121: LD_VAR 0 2
17125: PUSH
17126: FOR_IN
17127: IFFALSE 17143
// begin SetLives ( i , 0 ) ;
17129: LD_VAR 0 1
17133: PPUSH
17134: LD_INT 0
17136: PPUSH
17137: CALL_OW 234
// end ;
17141: GO 17126
17143: POP
17144: POP
// end ;
17145: PPOPN 2
17147: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17148: LD_EXP 15
17152: PUSH
17153: LD_EXP 21
17157: AND
17158: IFFALSE 17242
17160: GO 17162
17162: DISABLE
17163: LD_INT 0
17165: PPUSH
17166: PPUSH
// begin enable ;
17167: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17168: LD_ADDR_VAR 0 2
17172: PUSH
17173: LD_INT 22
17175: PUSH
17176: LD_OWVAR 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 32
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PPUSH
17199: CALL_OW 69
17203: ST_TO_ADDR
// if not tmp then
17204: LD_VAR 0 2
17208: NOT
17209: IFFALSE 17213
// exit ;
17211: GO 17242
// for i in tmp do
17213: LD_ADDR_VAR 0 1
17217: PUSH
17218: LD_VAR 0 2
17222: PUSH
17223: FOR_IN
17224: IFFALSE 17240
// begin SetLives ( i , 0 ) ;
17226: LD_VAR 0 1
17230: PPUSH
17231: LD_INT 0
17233: PPUSH
17234: CALL_OW 234
// end ;
17238: GO 17223
17240: POP
17241: POP
// end ;
17242: PPOPN 2
17244: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17245: LD_EXP 15
17249: PUSH
17250: LD_EXP 18
17254: AND
17255: IFFALSE 17348
17257: GO 17259
17259: DISABLE
17260: LD_INT 0
17262: PPUSH
// begin enable ;
17263: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: LD_INT 22
17271: PUSH
17272: LD_OWVAR 2
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 2
17283: PUSH
17284: LD_INT 25
17286: PUSH
17287: LD_INT 5
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 25
17296: PUSH
17297: LD_INT 9
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 25
17306: PUSH
17307: LD_INT 8
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PPUSH
17324: CALL_OW 69
17328: PUSH
17329: FOR_IN
17330: IFFALSE 17346
// begin SetClass ( i , 1 ) ;
17332: LD_VAR 0 1
17336: PPUSH
17337: LD_INT 1
17339: PPUSH
17340: CALL_OW 336
// end ;
17344: GO 17329
17346: POP
17347: POP
// end ;
17348: PPOPN 1
17350: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17351: LD_EXP 15
17355: PUSH
17356: LD_EXP 19
17360: AND
17361: PUSH
17362: LD_OWVAR 65
17366: PUSH
17367: LD_INT 7
17369: LESS
17370: AND
17371: IFFALSE 17385
17373: GO 17375
17375: DISABLE
// begin enable ;
17376: ENABLE
// game_speed := 7 ;
17377: LD_ADDR_OWVAR 65
17381: PUSH
17382: LD_INT 7
17384: ST_TO_ADDR
// end ;
17385: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17386: LD_EXP 15
17390: PUSH
17391: LD_EXP 22
17395: AND
17396: IFFALSE 17598
17398: GO 17400
17400: DISABLE
17401: LD_INT 0
17403: PPUSH
17404: PPUSH
17405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17406: LD_ADDR_VAR 0 3
17410: PUSH
17411: LD_INT 81
17413: PUSH
17414: LD_OWVAR 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: ST_TO_ADDR
// if not tmp then
17442: LD_VAR 0 3
17446: NOT
17447: IFFALSE 17451
// exit ;
17449: GO 17598
// if tmp > 5 then
17451: LD_VAR 0 3
17455: PUSH
17456: LD_INT 5
17458: GREATER
17459: IFFALSE 17471
// k := 5 else
17461: LD_ADDR_VAR 0 2
17465: PUSH
17466: LD_INT 5
17468: ST_TO_ADDR
17469: GO 17481
// k := tmp ;
17471: LD_ADDR_VAR 0 2
17475: PUSH
17476: LD_VAR 0 3
17480: ST_TO_ADDR
// for i := 1 to k do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: DOUBLE
17487: LD_INT 1
17489: DEC
17490: ST_TO_ADDR
17491: LD_VAR 0 2
17495: PUSH
17496: FOR_TO
17497: IFFALSE 17596
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17499: LD_VAR 0 3
17503: PUSH
17504: LD_VAR 0 1
17508: ARRAY
17509: PPUSH
17510: LD_VAR 0 1
17514: PUSH
17515: LD_INT 4
17517: MOD
17518: PUSH
17519: LD_INT 1
17521: PLUS
17522: PPUSH
17523: CALL_OW 259
17527: PUSH
17528: LD_INT 10
17530: LESS
17531: IFFALSE 17594
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17533: LD_VAR 0 3
17537: PUSH
17538: LD_VAR 0 1
17542: ARRAY
17543: PPUSH
17544: LD_VAR 0 1
17548: PUSH
17549: LD_INT 4
17551: MOD
17552: PUSH
17553: LD_INT 1
17555: PLUS
17556: PPUSH
17557: LD_VAR 0 3
17561: PUSH
17562: LD_VAR 0 1
17566: ARRAY
17567: PPUSH
17568: LD_VAR 0 1
17572: PUSH
17573: LD_INT 4
17575: MOD
17576: PUSH
17577: LD_INT 1
17579: PLUS
17580: PPUSH
17581: CALL_OW 259
17585: PUSH
17586: LD_INT 1
17588: PLUS
17589: PPUSH
17590: CALL_OW 237
17594: GO 17496
17596: POP
17597: POP
// end ;
17598: PPOPN 3
17600: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17601: LD_EXP 15
17605: PUSH
17606: LD_EXP 23
17610: AND
17611: IFFALSE 17631
17613: GO 17615
17615: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17616: LD_INT 4
17618: PPUSH
17619: LD_OWVAR 2
17623: PPUSH
17624: LD_INT 0
17626: PPUSH
17627: CALL_OW 324
17631: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17632: LD_EXP 15
17636: PUSH
17637: LD_EXP 52
17641: AND
17642: IFFALSE 17662
17644: GO 17646
17646: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17647: LD_INT 19
17649: PPUSH
17650: LD_OWVAR 2
17654: PPUSH
17655: LD_INT 0
17657: PPUSH
17658: CALL_OW 324
17662: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17663: LD_EXP 15
17667: PUSH
17668: LD_EXP 24
17672: AND
17673: IFFALSE 17775
17675: GO 17677
17677: DISABLE
17678: LD_INT 0
17680: PPUSH
17681: PPUSH
// begin enable ;
17682: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17683: LD_ADDR_VAR 0 2
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_OWVAR 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 2
17702: PUSH
17703: LD_INT 34
17705: PUSH
17706: LD_INT 11
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 34
17715: PUSH
17716: LD_INT 30
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: ST_TO_ADDR
// if not tmp then
17737: LD_VAR 0 2
17741: NOT
17742: IFFALSE 17746
// exit ;
17744: GO 17775
// for i in tmp do
17746: LD_ADDR_VAR 0 1
17750: PUSH
17751: LD_VAR 0 2
17755: PUSH
17756: FOR_IN
17757: IFFALSE 17773
// begin SetLives ( i , 0 ) ;
17759: LD_VAR 0 1
17763: PPUSH
17764: LD_INT 0
17766: PPUSH
17767: CALL_OW 234
// end ;
17771: GO 17756
17773: POP
17774: POP
// end ;
17775: PPOPN 2
17777: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17778: LD_EXP 15
17782: PUSH
17783: LD_EXP 25
17787: AND
17788: IFFALSE 17808
17790: GO 17792
17792: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17793: LD_INT 32
17795: PPUSH
17796: LD_OWVAR 2
17800: PPUSH
17801: LD_INT 0
17803: PPUSH
17804: CALL_OW 324
17808: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17809: LD_EXP 15
17813: PUSH
17814: LD_EXP 26
17818: AND
17819: IFFALSE 18000
17821: GO 17823
17823: DISABLE
17824: LD_INT 0
17826: PPUSH
17827: PPUSH
17828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17829: LD_ADDR_VAR 0 2
17833: PUSH
17834: LD_INT 22
17836: PUSH
17837: LD_OWVAR 2
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 33
17848: PUSH
17849: LD_INT 3
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PPUSH
17860: CALL_OW 69
17864: ST_TO_ADDR
// if not tmp then
17865: LD_VAR 0 2
17869: NOT
17870: IFFALSE 17874
// exit ;
17872: GO 18000
// side := 0 ;
17874: LD_ADDR_VAR 0 3
17878: PUSH
17879: LD_INT 0
17881: ST_TO_ADDR
// for i := 1 to 8 do
17882: LD_ADDR_VAR 0 1
17886: PUSH
17887: DOUBLE
17888: LD_INT 1
17890: DEC
17891: ST_TO_ADDR
17892: LD_INT 8
17894: PUSH
17895: FOR_TO
17896: IFFALSE 17944
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17898: LD_OWVAR 2
17902: PUSH
17903: LD_VAR 0 1
17907: NONEQUAL
17908: PUSH
17909: LD_OWVAR 2
17913: PPUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 81
17923: PUSH
17924: LD_INT 2
17926: EQUAL
17927: AND
17928: IFFALSE 17942
// begin side := i ;
17930: LD_ADDR_VAR 0 3
17934: PUSH
17935: LD_VAR 0 1
17939: ST_TO_ADDR
// break ;
17940: GO 17944
// end ;
17942: GO 17895
17944: POP
17945: POP
// if not side then
17946: LD_VAR 0 3
17950: NOT
17951: IFFALSE 17955
// exit ;
17953: GO 18000
// for i := 1 to tmp do
17955: LD_ADDR_VAR 0 1
17959: PUSH
17960: DOUBLE
17961: LD_INT 1
17963: DEC
17964: ST_TO_ADDR
17965: LD_VAR 0 2
17969: PUSH
17970: FOR_TO
17971: IFFALSE 17998
// if Prob ( 60 ) then
17973: LD_INT 60
17975: PPUSH
17976: CALL_OW 13
17980: IFFALSE 17996
// SetSide ( i , side ) ;
17982: LD_VAR 0 1
17986: PPUSH
17987: LD_VAR 0 3
17991: PPUSH
17992: CALL_OW 235
17996: GO 17970
17998: POP
17999: POP
// end ;
18000: PPOPN 3
18002: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18003: LD_EXP 15
18007: PUSH
18008: LD_EXP 28
18012: AND
18013: IFFALSE 18132
18015: GO 18017
18017: DISABLE
18018: LD_INT 0
18020: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18021: LD_ADDR_VAR 0 1
18025: PUSH
18026: LD_INT 22
18028: PUSH
18029: LD_OWVAR 2
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 21
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 3
18050: PUSH
18051: LD_INT 23
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18130
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 257
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: LD_INT 3
18096: PUSH
18097: LD_INT 4
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: IN
18106: IFFALSE 18128
// SetClass ( un , rand ( 1 , 4 ) ) ;
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_INT 1
18115: PPUSH
18116: LD_INT 4
18118: PPUSH
18119: CALL_OW 12
18123: PPUSH
18124: CALL_OW 336
18128: GO 18075
18130: POP
18131: POP
// end ;
18132: PPOPN 1
18134: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18135: LD_EXP 15
18139: PUSH
18140: LD_EXP 27
18144: AND
18145: IFFALSE 18224
18147: GO 18149
18149: DISABLE
18150: LD_INT 0
18152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18153: LD_ADDR_VAR 0 1
18157: PUSH
18158: LD_INT 22
18160: PUSH
18161: LD_OWVAR 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 21
18172: PUSH
18173: LD_INT 3
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PPUSH
18184: CALL_OW 69
18188: ST_TO_ADDR
// if not tmp then
18189: LD_VAR 0 1
18193: NOT
18194: IFFALSE 18198
// exit ;
18196: GO 18224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18198: LD_VAR 0 1
18202: PUSH
18203: LD_INT 1
18205: PPUSH
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 12
18215: ARRAY
18216: PPUSH
18217: LD_INT 100
18219: PPUSH
18220: CALL_OW 234
// end ;
18224: PPOPN 1
18226: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18227: LD_EXP 15
18231: PUSH
18232: LD_EXP 29
18236: AND
18237: IFFALSE 18335
18239: GO 18241
18241: DISABLE
18242: LD_INT 0
18244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18245: LD_ADDR_VAR 0 1
18249: PUSH
18250: LD_INT 22
18252: PUSH
18253: LD_OWVAR 2
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 21
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PPUSH
18276: CALL_OW 69
18280: ST_TO_ADDR
// if not tmp then
18281: LD_VAR 0 1
18285: NOT
18286: IFFALSE 18290
// exit ;
18288: GO 18335
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18290: LD_VAR 0 1
18294: PUSH
18295: LD_INT 1
18297: PPUSH
18298: LD_VAR 0 1
18302: PPUSH
18303: CALL_OW 12
18307: ARRAY
18308: PPUSH
18309: LD_INT 1
18311: PPUSH
18312: LD_INT 4
18314: PPUSH
18315: CALL_OW 12
18319: PPUSH
18320: LD_INT 3000
18322: PPUSH
18323: LD_INT 9000
18325: PPUSH
18326: CALL_OW 12
18330: PPUSH
18331: CALL_OW 492
// end ;
18335: PPOPN 1
18337: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18338: LD_EXP 15
18342: PUSH
18343: LD_EXP 30
18347: AND
18348: IFFALSE 18368
18350: GO 18352
18352: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18353: LD_INT 1
18355: PPUSH
18356: LD_OWVAR 2
18360: PPUSH
18361: LD_INT 0
18363: PPUSH
18364: CALL_OW 324
18368: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18369: LD_EXP 15
18373: PUSH
18374: LD_EXP 31
18378: AND
18379: IFFALSE 18462
18381: GO 18383
18383: DISABLE
18384: LD_INT 0
18386: PPUSH
18387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18388: LD_ADDR_VAR 0 2
18392: PUSH
18393: LD_INT 22
18395: PUSH
18396: LD_OWVAR 2
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 21
18407: PUSH
18408: LD_INT 3
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PPUSH
18419: CALL_OW 69
18423: ST_TO_ADDR
// if not tmp then
18424: LD_VAR 0 2
18428: NOT
18429: IFFALSE 18433
// exit ;
18431: GO 18462
// for i in tmp do
18433: LD_ADDR_VAR 0 1
18437: PUSH
18438: LD_VAR 0 2
18442: PUSH
18443: FOR_IN
18444: IFFALSE 18460
// SetBLevel ( i , 10 ) ;
18446: LD_VAR 0 1
18450: PPUSH
18451: LD_INT 10
18453: PPUSH
18454: CALL_OW 241
18458: GO 18443
18460: POP
18461: POP
// end ;
18462: PPOPN 2
18464: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18465: LD_EXP 15
18469: PUSH
18470: LD_EXP 32
18474: AND
18475: IFFALSE 18586
18477: GO 18479
18479: DISABLE
18480: LD_INT 0
18482: PPUSH
18483: PPUSH
18484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18485: LD_ADDR_VAR 0 3
18489: PUSH
18490: LD_INT 22
18492: PUSH
18493: LD_OWVAR 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 25
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 69
18520: ST_TO_ADDR
// if not tmp then
18521: LD_VAR 0 3
18525: NOT
18526: IFFALSE 18530
// exit ;
18528: GO 18586
// un := tmp [ rand ( 1 , tmp ) ] ;
18530: LD_ADDR_VAR 0 2
18534: PUSH
18535: LD_VAR 0 3
18539: PUSH
18540: LD_INT 1
18542: PPUSH
18543: LD_VAR 0 3
18547: PPUSH
18548: CALL_OW 12
18552: ARRAY
18553: ST_TO_ADDR
// if Crawls ( un ) then
18554: LD_VAR 0 2
18558: PPUSH
18559: CALL_OW 318
18563: IFFALSE 18574
// ComWalk ( un ) ;
18565: LD_VAR 0 2
18569: PPUSH
18570: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18574: LD_VAR 0 2
18578: PPUSH
18579: LD_INT 5
18581: PPUSH
18582: CALL_OW 336
// end ;
18586: PPOPN 3
18588: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18589: LD_EXP 15
18593: PUSH
18594: LD_EXP 33
18598: AND
18599: PUSH
18600: LD_OWVAR 67
18604: PUSH
18605: LD_INT 4
18607: LESS
18608: AND
18609: IFFALSE 18628
18611: GO 18613
18613: DISABLE
// begin Difficulty := Difficulty + 1 ;
18614: LD_ADDR_OWVAR 67
18618: PUSH
18619: LD_OWVAR 67
18623: PUSH
18624: LD_INT 1
18626: PLUS
18627: ST_TO_ADDR
// end ;
18628: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18629: LD_EXP 15
18633: PUSH
18634: LD_EXP 34
18638: AND
18639: IFFALSE 18742
18641: GO 18643
18643: DISABLE
18644: LD_INT 0
18646: PPUSH
// begin for i := 1 to 5 do
18647: LD_ADDR_VAR 0 1
18651: PUSH
18652: DOUBLE
18653: LD_INT 1
18655: DEC
18656: ST_TO_ADDR
18657: LD_INT 5
18659: PUSH
18660: FOR_TO
18661: IFFALSE 18740
// begin uc_nation := nation_nature ;
18663: LD_ADDR_OWVAR 21
18667: PUSH
18668: LD_INT 0
18670: ST_TO_ADDR
// uc_side := 0 ;
18671: LD_ADDR_OWVAR 20
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18679: LD_ADDR_OWVAR 29
18683: PUSH
18684: LD_INT 12
18686: PUSH
18687: LD_INT 12
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: ST_TO_ADDR
// hc_agressivity := 20 ;
18694: LD_ADDR_OWVAR 35
18698: PUSH
18699: LD_INT 20
18701: ST_TO_ADDR
// hc_class := class_tiger ;
18702: LD_ADDR_OWVAR 28
18706: PUSH
18707: LD_INT 14
18709: ST_TO_ADDR
// hc_gallery :=  ;
18710: LD_ADDR_OWVAR 33
18714: PUSH
18715: LD_STRING 
18717: ST_TO_ADDR
// hc_name :=  ;
18718: LD_ADDR_OWVAR 26
18722: PUSH
18723: LD_STRING 
18725: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18726: CALL_OW 44
18730: PPUSH
18731: LD_INT 0
18733: PPUSH
18734: CALL_OW 51
// end ;
18738: GO 18660
18740: POP
18741: POP
// end ;
18742: PPOPN 1
18744: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18745: LD_EXP 15
18749: PUSH
18750: LD_EXP 35
18754: AND
18755: IFFALSE 18764
18757: GO 18759
18759: DISABLE
// StreamSibBomb ;
18760: CALL 18765 0 0
18764: END
// export function StreamSibBomb ; var i , x , y ; begin
18765: LD_INT 0
18767: PPUSH
18768: PPUSH
18769: PPUSH
18770: PPUSH
// result := false ;
18771: LD_ADDR_VAR 0 1
18775: PUSH
18776: LD_INT 0
18778: ST_TO_ADDR
// for i := 1 to 16 do
18779: LD_ADDR_VAR 0 2
18783: PUSH
18784: DOUBLE
18785: LD_INT 1
18787: DEC
18788: ST_TO_ADDR
18789: LD_INT 16
18791: PUSH
18792: FOR_TO
18793: IFFALSE 18992
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18795: LD_ADDR_VAR 0 3
18799: PUSH
18800: LD_INT 10
18802: PUSH
18803: LD_INT 20
18805: PUSH
18806: LD_INT 30
18808: PUSH
18809: LD_INT 40
18811: PUSH
18812: LD_INT 50
18814: PUSH
18815: LD_INT 60
18817: PUSH
18818: LD_INT 70
18820: PUSH
18821: LD_INT 80
18823: PUSH
18824: LD_INT 90
18826: PUSH
18827: LD_INT 100
18829: PUSH
18830: LD_INT 110
18832: PUSH
18833: LD_INT 120
18835: PUSH
18836: LD_INT 130
18838: PUSH
18839: LD_INT 140
18841: PUSH
18842: LD_INT 150
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 1
18864: PPUSH
18865: LD_INT 15
18867: PPUSH
18868: CALL_OW 12
18872: ARRAY
18873: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18874: LD_ADDR_VAR 0 4
18878: PUSH
18879: LD_INT 10
18881: PUSH
18882: LD_INT 20
18884: PUSH
18885: LD_INT 30
18887: PUSH
18888: LD_INT 40
18890: PUSH
18891: LD_INT 50
18893: PUSH
18894: LD_INT 60
18896: PUSH
18897: LD_INT 70
18899: PUSH
18900: LD_INT 80
18902: PUSH
18903: LD_INT 90
18905: PUSH
18906: LD_INT 100
18908: PUSH
18909: LD_INT 110
18911: PUSH
18912: LD_INT 120
18914: PUSH
18915: LD_INT 130
18917: PUSH
18918: LD_INT 140
18920: PUSH
18921: LD_INT 150
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: PPUSH
18944: LD_INT 15
18946: PPUSH
18947: CALL_OW 12
18951: ARRAY
18952: ST_TO_ADDR
// if ValidHex ( x , y ) then
18953: LD_VAR 0 3
18957: PPUSH
18958: LD_VAR 0 4
18962: PPUSH
18963: CALL_OW 488
18967: IFFALSE 18990
// begin result := [ x , y ] ;
18969: LD_ADDR_VAR 0 1
18973: PUSH
18974: LD_VAR 0 3
18978: PUSH
18979: LD_VAR 0 4
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: ST_TO_ADDR
// break ;
18988: GO 18992
// end ; end ;
18990: GO 18792
18992: POP
18993: POP
// if result then
18994: LD_VAR 0 1
18998: IFFALSE 19058
// begin ToLua ( playSibBomb() ) ;
19000: LD_STRING playSibBomb()
19002: PPUSH
19003: CALL_OW 559
// wait ( 0 0$14 ) ;
19007: LD_INT 490
19009: PPUSH
19010: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19014: LD_VAR 0 1
19018: PUSH
19019: LD_INT 1
19021: ARRAY
19022: PPUSH
19023: LD_VAR 0 1
19027: PUSH
19028: LD_INT 2
19030: ARRAY
19031: PPUSH
19032: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19036: LD_VAR 0 1
19040: PUSH
19041: LD_INT 1
19043: ARRAY
19044: PPUSH
19045: LD_VAR 0 1
19049: PUSH
19050: LD_INT 2
19052: ARRAY
19053: PPUSH
19054: CALL_OW 429
// end ; end ;
19058: LD_VAR 0 1
19062: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19063: LD_EXP 15
19067: PUSH
19068: LD_EXP 37
19072: AND
19073: IFFALSE 19085
19075: GO 19077
19077: DISABLE
// YouLost (  ) ;
19078: LD_STRING 
19080: PPUSH
19081: CALL_OW 104
19085: END
// every 0 0$1 trigger StreamModeActive and sFog do
19086: LD_EXP 15
19090: PUSH
19091: LD_EXP 36
19095: AND
19096: IFFALSE 19110
19098: GO 19100
19100: DISABLE
// FogOff ( your_side ) ;
19101: LD_OWVAR 2
19105: PPUSH
19106: CALL_OW 344
19110: END
// every 0 0$1 trigger StreamModeActive and sSun do
19111: LD_EXP 15
19115: PUSH
19116: LD_EXP 38
19120: AND
19121: IFFALSE 19149
19123: GO 19125
19125: DISABLE
// begin solar_recharge_percent := 0 ;
19126: LD_ADDR_OWVAR 79
19130: PUSH
19131: LD_INT 0
19133: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19134: LD_INT 10500
19136: PPUSH
19137: CALL_OW 67
// solar_recharge_percent := 100 ;
19141: LD_ADDR_OWVAR 79
19145: PUSH
19146: LD_INT 100
19148: ST_TO_ADDR
// end ;
19149: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19150: LD_EXP 15
19154: PUSH
19155: LD_EXP 39
19159: AND
19160: IFFALSE 19399
19162: GO 19164
19164: DISABLE
19165: LD_INT 0
19167: PPUSH
19168: PPUSH
19169: PPUSH
// begin tmp := [ ] ;
19170: LD_ADDR_VAR 0 3
19174: PUSH
19175: EMPTY
19176: ST_TO_ADDR
// for i := 1 to 6 do
19177: LD_ADDR_VAR 0 1
19181: PUSH
19182: DOUBLE
19183: LD_INT 1
19185: DEC
19186: ST_TO_ADDR
19187: LD_INT 6
19189: PUSH
19190: FOR_TO
19191: IFFALSE 19296
// begin uc_nation := nation_nature ;
19193: LD_ADDR_OWVAR 21
19197: PUSH
19198: LD_INT 0
19200: ST_TO_ADDR
// uc_side := 0 ;
19201: LD_ADDR_OWVAR 20
19205: PUSH
19206: LD_INT 0
19208: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19209: LD_ADDR_OWVAR 29
19213: PUSH
19214: LD_INT 12
19216: PUSH
19217: LD_INT 12
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: ST_TO_ADDR
// hc_agressivity := 20 ;
19224: LD_ADDR_OWVAR 35
19228: PUSH
19229: LD_INT 20
19231: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19232: LD_ADDR_OWVAR 28
19236: PUSH
19237: LD_INT 17
19239: ST_TO_ADDR
// hc_gallery :=  ;
19240: LD_ADDR_OWVAR 33
19244: PUSH
19245: LD_STRING 
19247: ST_TO_ADDR
// hc_name :=  ;
19248: LD_ADDR_OWVAR 26
19252: PUSH
19253: LD_STRING 
19255: ST_TO_ADDR
// un := CreateHuman ;
19256: LD_ADDR_VAR 0 2
19260: PUSH
19261: CALL_OW 44
19265: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19266: LD_VAR 0 2
19270: PPUSH
19271: LD_INT 1
19273: PPUSH
19274: CALL_OW 51
// tmp := tmp ^ un ;
19278: LD_ADDR_VAR 0 3
19282: PUSH
19283: LD_VAR 0 3
19287: PUSH
19288: LD_VAR 0 2
19292: ADD
19293: ST_TO_ADDR
// end ;
19294: GO 19190
19296: POP
19297: POP
// repeat wait ( 0 0$1 ) ;
19298: LD_INT 35
19300: PPUSH
19301: CALL_OW 67
// for un in tmp do
19305: LD_ADDR_VAR 0 2
19309: PUSH
19310: LD_VAR 0 3
19314: PUSH
19315: FOR_IN
19316: IFFALSE 19390
// begin if IsDead ( un ) then
19318: LD_VAR 0 2
19322: PPUSH
19323: CALL_OW 301
19327: IFFALSE 19347
// begin tmp := tmp diff un ;
19329: LD_ADDR_VAR 0 3
19333: PUSH
19334: LD_VAR 0 3
19338: PUSH
19339: LD_VAR 0 2
19343: DIFF
19344: ST_TO_ADDR
// continue ;
19345: GO 19315
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19347: LD_VAR 0 2
19351: PPUSH
19352: LD_INT 3
19354: PUSH
19355: LD_INT 22
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PPUSH
19369: CALL_OW 69
19373: PPUSH
19374: LD_VAR 0 2
19378: PPUSH
19379: CALL_OW 74
19383: PPUSH
19384: CALL_OW 115
// end ;
19388: GO 19315
19390: POP
19391: POP
// until not tmp ;
19392: LD_VAR 0 3
19396: NOT
19397: IFFALSE 19298
// end ;
19399: PPOPN 3
19401: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19402: LD_EXP 15
19406: PUSH
19407: LD_EXP 40
19411: AND
19412: IFFALSE 19466
19414: GO 19416
19416: DISABLE
// begin ToLua ( displayTroll(); ) ;
19417: LD_STRING displayTroll();
19419: PPUSH
19420: CALL_OW 559
// wait ( 3 3$00 ) ;
19424: LD_INT 6300
19426: PPUSH
19427: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19431: LD_STRING hideTroll();
19433: PPUSH
19434: CALL_OW 559
// wait ( 1 1$00 ) ;
19438: LD_INT 2100
19440: PPUSH
19441: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19445: LD_STRING displayTroll();
19447: PPUSH
19448: CALL_OW 559
// wait ( 1 1$00 ) ;
19452: LD_INT 2100
19454: PPUSH
19455: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19459: LD_STRING hideTroll();
19461: PPUSH
19462: CALL_OW 559
// end ;
19466: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19467: LD_EXP 15
19471: PUSH
19472: LD_EXP 41
19476: AND
19477: IFFALSE 19540
19479: GO 19481
19481: DISABLE
19482: LD_INT 0
19484: PPUSH
// begin p := 0 ;
19485: LD_ADDR_VAR 0 1
19489: PUSH
19490: LD_INT 0
19492: ST_TO_ADDR
// repeat game_speed := 1 ;
19493: LD_ADDR_OWVAR 65
19497: PUSH
19498: LD_INT 1
19500: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19501: LD_INT 35
19503: PPUSH
19504: CALL_OW 67
// p := p + 1 ;
19508: LD_ADDR_VAR 0 1
19512: PUSH
19513: LD_VAR 0 1
19517: PUSH
19518: LD_INT 1
19520: PLUS
19521: ST_TO_ADDR
// until p >= 60 ;
19522: LD_VAR 0 1
19526: PUSH
19527: LD_INT 60
19529: GREATEREQUAL
19530: IFFALSE 19493
// game_speed := 4 ;
19532: LD_ADDR_OWVAR 65
19536: PUSH
19537: LD_INT 4
19539: ST_TO_ADDR
// end ;
19540: PPOPN 1
19542: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19543: LD_EXP 15
19547: PUSH
19548: LD_EXP 42
19552: AND
19553: IFFALSE 19699
19555: GO 19557
19557: DISABLE
19558: LD_INT 0
19560: PPUSH
19561: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19562: LD_ADDR_VAR 0 1
19566: PUSH
19567: LD_INT 22
19569: PUSH
19570: LD_OWVAR 2
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: LD_INT 30
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 30
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PPUSH
19611: CALL_OW 69
19615: ST_TO_ADDR
// if not depot then
19616: LD_VAR 0 1
19620: NOT
19621: IFFALSE 19625
// exit ;
19623: GO 19699
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19625: LD_ADDR_VAR 0 2
19629: PUSH
19630: LD_VAR 0 1
19634: PUSH
19635: LD_INT 1
19637: PPUSH
19638: LD_VAR 0 1
19642: PPUSH
19643: CALL_OW 12
19647: ARRAY
19648: PPUSH
19649: CALL_OW 274
19653: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19654: LD_VAR 0 2
19658: PPUSH
19659: LD_INT 1
19661: PPUSH
19662: LD_INT 0
19664: PPUSH
19665: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19669: LD_VAR 0 2
19673: PPUSH
19674: LD_INT 2
19676: PPUSH
19677: LD_INT 0
19679: PPUSH
19680: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19684: LD_VAR 0 2
19688: PPUSH
19689: LD_INT 3
19691: PPUSH
19692: LD_INT 0
19694: PPUSH
19695: CALL_OW 277
// end ;
19699: PPOPN 2
19701: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19702: LD_EXP 15
19706: PUSH
19707: LD_EXP 43
19711: AND
19712: IFFALSE 19809
19714: GO 19716
19716: DISABLE
19717: LD_INT 0
19719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19720: LD_ADDR_VAR 0 1
19724: PUSH
19725: LD_INT 22
19727: PUSH
19728: LD_OWVAR 2
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 21
19739: PUSH
19740: LD_INT 1
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 3
19749: PUSH
19750: LD_INT 23
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: PPUSH
19769: CALL_OW 69
19773: ST_TO_ADDR
// if not tmp then
19774: LD_VAR 0 1
19778: NOT
19779: IFFALSE 19783
// exit ;
19781: GO 19809
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19783: LD_VAR 0 1
19787: PUSH
19788: LD_INT 1
19790: PPUSH
19791: LD_VAR 0 1
19795: PPUSH
19796: CALL_OW 12
19800: ARRAY
19801: PPUSH
19802: LD_INT 200
19804: PPUSH
19805: CALL_OW 234
// end ;
19809: PPOPN 1
19811: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19812: LD_EXP 15
19816: PUSH
19817: LD_EXP 44
19821: AND
19822: IFFALSE 19901
19824: GO 19826
19826: DISABLE
19827: LD_INT 0
19829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19830: LD_ADDR_VAR 0 1
19834: PUSH
19835: LD_INT 22
19837: PUSH
19838: LD_OWVAR 2
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 21
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PPUSH
19861: CALL_OW 69
19865: ST_TO_ADDR
// if not tmp then
19866: LD_VAR 0 1
19870: NOT
19871: IFFALSE 19875
// exit ;
19873: GO 19901
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19875: LD_VAR 0 1
19879: PUSH
19880: LD_INT 1
19882: PPUSH
19883: LD_VAR 0 1
19887: PPUSH
19888: CALL_OW 12
19892: ARRAY
19893: PPUSH
19894: LD_INT 60
19896: PPUSH
19897: CALL_OW 234
// end ;
19901: PPOPN 1
19903: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19904: LD_EXP 15
19908: PUSH
19909: LD_EXP 45
19913: AND
19914: IFFALSE 20013
19916: GO 19918
19918: DISABLE
19919: LD_INT 0
19921: PPUSH
19922: PPUSH
// begin enable ;
19923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19924: LD_ADDR_VAR 0 1
19928: PUSH
19929: LD_INT 22
19931: PUSH
19932: LD_OWVAR 2
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 61
19943: PUSH
19944: EMPTY
19945: LIST
19946: PUSH
19947: LD_INT 33
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: LIST
19961: PPUSH
19962: CALL_OW 69
19966: ST_TO_ADDR
// if not tmp then
19967: LD_VAR 0 1
19971: NOT
19972: IFFALSE 19976
// exit ;
19974: GO 20013
// for i in tmp do
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: LD_VAR 0 1
19985: PUSH
19986: FOR_IN
19987: IFFALSE 20011
// if IsControledBy ( i ) then
19989: LD_VAR 0 2
19993: PPUSH
19994: CALL_OW 312
19998: IFFALSE 20009
// ComUnlink ( i ) ;
20000: LD_VAR 0 2
20004: PPUSH
20005: CALL_OW 136
20009: GO 19986
20011: POP
20012: POP
// end ;
20013: PPOPN 2
20015: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20016: LD_EXP 15
20020: PUSH
20021: LD_EXP 46
20025: AND
20026: IFFALSE 20166
20028: GO 20030
20030: DISABLE
20031: LD_INT 0
20033: PPUSH
20034: PPUSH
// begin ToLua ( displayPowell(); ) ;
20035: LD_STRING displayPowell();
20037: PPUSH
20038: CALL_OW 559
// uc_side := 0 ;
20042: LD_ADDR_OWVAR 20
20046: PUSH
20047: LD_INT 0
20049: ST_TO_ADDR
// uc_nation := 2 ;
20050: LD_ADDR_OWVAR 21
20054: PUSH
20055: LD_INT 2
20057: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20058: LD_ADDR_OWVAR 37
20062: PUSH
20063: LD_INT 14
20065: ST_TO_ADDR
// vc_engine := engine_siberite ;
20066: LD_ADDR_OWVAR 39
20070: PUSH
20071: LD_INT 3
20073: ST_TO_ADDR
// vc_control := control_apeman ;
20074: LD_ADDR_OWVAR 38
20078: PUSH
20079: LD_INT 5
20081: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20082: LD_ADDR_OWVAR 40
20086: PUSH
20087: LD_INT 29
20089: ST_TO_ADDR
// un := CreateVehicle ;
20090: LD_ADDR_VAR 0 2
20094: PUSH
20095: CALL_OW 45
20099: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20100: LD_VAR 0 2
20104: PPUSH
20105: LD_INT 1
20107: PPUSH
20108: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20112: LD_INT 35
20114: PPUSH
20115: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20119: LD_VAR 0 2
20123: PPUSH
20124: LD_INT 22
20126: PUSH
20127: LD_OWVAR 2
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PPUSH
20136: CALL_OW 69
20140: PPUSH
20141: LD_VAR 0 2
20145: PPUSH
20146: CALL_OW 74
20150: PPUSH
20151: CALL_OW 115
// until IsDead ( un ) ;
20155: LD_VAR 0 2
20159: PPUSH
20160: CALL_OW 301
20164: IFFALSE 20112
// end ;
20166: PPOPN 2
20168: END
// every 0 0$1 trigger StreamModeActive and sStu do
20169: LD_EXP 15
20173: PUSH
20174: LD_EXP 54
20178: AND
20179: IFFALSE 20195
20181: GO 20183
20183: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20184: LD_STRING displayStucuk();
20186: PPUSH
20187: CALL_OW 559
// ResetFog ;
20191: CALL_OW 335
// end ;
20195: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20196: LD_EXP 15
20200: PUSH
20201: LD_EXP 47
20205: AND
20206: IFFALSE 20347
20208: GO 20210
20210: DISABLE
20211: LD_INT 0
20213: PPUSH
20214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20215: LD_ADDR_VAR 0 2
20219: PUSH
20220: LD_INT 22
20222: PUSH
20223: LD_OWVAR 2
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 21
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PPUSH
20246: CALL_OW 69
20250: ST_TO_ADDR
// if not tmp then
20251: LD_VAR 0 2
20255: NOT
20256: IFFALSE 20260
// exit ;
20258: GO 20347
// un := tmp [ rand ( 1 , tmp ) ] ;
20260: LD_ADDR_VAR 0 1
20264: PUSH
20265: LD_VAR 0 2
20269: PUSH
20270: LD_INT 1
20272: PPUSH
20273: LD_VAR 0 2
20277: PPUSH
20278: CALL_OW 12
20282: ARRAY
20283: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20284: LD_VAR 0 1
20288: PPUSH
20289: LD_INT 0
20291: PPUSH
20292: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20296: LD_VAR 0 1
20300: PPUSH
20301: LD_OWVAR 3
20305: PUSH
20306: LD_VAR 0 1
20310: DIFF
20311: PPUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 74
20321: PPUSH
20322: CALL_OW 115
// wait ( 0 0$20 ) ;
20326: LD_INT 700
20328: PPUSH
20329: CALL_OW 67
// SetSide ( un , your_side ) ;
20333: LD_VAR 0 1
20337: PPUSH
20338: LD_OWVAR 2
20342: PPUSH
20343: CALL_OW 235
// end ;
20347: PPOPN 2
20349: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20350: LD_EXP 15
20354: PUSH
20355: LD_EXP 48
20359: AND
20360: IFFALSE 20466
20362: GO 20364
20364: DISABLE
20365: LD_INT 0
20367: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20368: LD_ADDR_VAR 0 1
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_OWVAR 2
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: LD_INT 30
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 30
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PPUSH
20417: CALL_OW 69
20421: ST_TO_ADDR
// if not depot then
20422: LD_VAR 0 1
20426: NOT
20427: IFFALSE 20431
// exit ;
20429: GO 20466
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20431: LD_VAR 0 1
20435: PUSH
20436: LD_INT 1
20438: ARRAY
20439: PPUSH
20440: CALL_OW 250
20444: PPUSH
20445: LD_VAR 0 1
20449: PUSH
20450: LD_INT 1
20452: ARRAY
20453: PPUSH
20454: CALL_OW 251
20458: PPUSH
20459: LD_INT 70
20461: PPUSH
20462: CALL_OW 495
// end ;
20466: PPOPN 1
20468: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20469: LD_EXP 15
20473: PUSH
20474: LD_EXP 49
20478: AND
20479: IFFALSE 20690
20481: GO 20483
20483: DISABLE
20484: LD_INT 0
20486: PPUSH
20487: PPUSH
20488: PPUSH
20489: PPUSH
20490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20491: LD_ADDR_VAR 0 5
20495: PUSH
20496: LD_INT 22
20498: PUSH
20499: LD_OWVAR 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 21
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PPUSH
20522: CALL_OW 69
20526: ST_TO_ADDR
// if not tmp then
20527: LD_VAR 0 5
20531: NOT
20532: IFFALSE 20536
// exit ;
20534: GO 20690
// for i in tmp do
20536: LD_ADDR_VAR 0 1
20540: PUSH
20541: LD_VAR 0 5
20545: PUSH
20546: FOR_IN
20547: IFFALSE 20688
// begin d := rand ( 0 , 5 ) ;
20549: LD_ADDR_VAR 0 4
20553: PUSH
20554: LD_INT 0
20556: PPUSH
20557: LD_INT 5
20559: PPUSH
20560: CALL_OW 12
20564: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20565: LD_ADDR_VAR 0 2
20569: PUSH
20570: LD_VAR 0 1
20574: PPUSH
20575: CALL_OW 250
20579: PPUSH
20580: LD_VAR 0 4
20584: PPUSH
20585: LD_INT 3
20587: PPUSH
20588: LD_INT 12
20590: PPUSH
20591: CALL_OW 12
20595: PPUSH
20596: CALL_OW 272
20600: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20601: LD_ADDR_VAR 0 3
20605: PUSH
20606: LD_VAR 0 1
20610: PPUSH
20611: CALL_OW 251
20615: PPUSH
20616: LD_VAR 0 4
20620: PPUSH
20621: LD_INT 3
20623: PPUSH
20624: LD_INT 12
20626: PPUSH
20627: CALL_OW 12
20631: PPUSH
20632: CALL_OW 273
20636: ST_TO_ADDR
// if ValidHex ( x , y ) then
20637: LD_VAR 0 2
20641: PPUSH
20642: LD_VAR 0 3
20646: PPUSH
20647: CALL_OW 488
20651: IFFALSE 20686
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20653: LD_VAR 0 1
20657: PPUSH
20658: LD_VAR 0 2
20662: PPUSH
20663: LD_VAR 0 3
20667: PPUSH
20668: LD_INT 3
20670: PPUSH
20671: LD_INT 6
20673: PPUSH
20674: CALL_OW 12
20678: PPUSH
20679: LD_INT 1
20681: PPUSH
20682: CALL_OW 483
// end ;
20686: GO 20546
20688: POP
20689: POP
// end ;
20690: PPOPN 5
20692: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20693: LD_EXP 15
20697: PUSH
20698: LD_EXP 50
20702: AND
20703: IFFALSE 20797
20705: GO 20707
20707: DISABLE
20708: LD_INT 0
20710: PPUSH
20711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20712: LD_ADDR_VAR 0 2
20716: PUSH
20717: LD_INT 22
20719: PUSH
20720: LD_OWVAR 2
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 32
20731: PUSH
20732: LD_INT 1
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 21
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: ST_TO_ADDR
// if not tmp then
20759: LD_VAR 0 2
20763: NOT
20764: IFFALSE 20768
// exit ;
20766: GO 20797
// for i in tmp do
20768: LD_ADDR_VAR 0 1
20772: PUSH
20773: LD_VAR 0 2
20777: PUSH
20778: FOR_IN
20779: IFFALSE 20795
// SetFuel ( i , 0 ) ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_INT 0
20788: PPUSH
20789: CALL_OW 240
20793: GO 20778
20795: POP
20796: POP
// end ;
20797: PPOPN 2
20799: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20800: LD_EXP 15
20804: PUSH
20805: LD_EXP 51
20809: AND
20810: IFFALSE 20876
20812: GO 20814
20814: DISABLE
20815: LD_INT 0
20817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20818: LD_ADDR_VAR 0 1
20822: PUSH
20823: LD_INT 22
20825: PUSH
20826: LD_OWVAR 2
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 30
20837: PUSH
20838: LD_INT 29
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PPUSH
20849: CALL_OW 69
20853: ST_TO_ADDR
// if not tmp then
20854: LD_VAR 0 1
20858: NOT
20859: IFFALSE 20863
// exit ;
20861: GO 20876
// DestroyUnit ( tmp [ 1 ] ) ;
20863: LD_VAR 0 1
20867: PUSH
20868: LD_INT 1
20870: ARRAY
20871: PPUSH
20872: CALL_OW 65
// end ;
20876: PPOPN 1
20878: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20879: LD_EXP 15
20883: PUSH
20884: LD_EXP 53
20888: AND
20889: IFFALSE 21018
20891: GO 20893
20893: DISABLE
20894: LD_INT 0
20896: PPUSH
// begin uc_side := 0 ;
20897: LD_ADDR_OWVAR 20
20901: PUSH
20902: LD_INT 0
20904: ST_TO_ADDR
// uc_nation := nation_arabian ;
20905: LD_ADDR_OWVAR 21
20909: PUSH
20910: LD_INT 2
20912: ST_TO_ADDR
// hc_gallery :=  ;
20913: LD_ADDR_OWVAR 33
20917: PUSH
20918: LD_STRING 
20920: ST_TO_ADDR
// hc_name :=  ;
20921: LD_ADDR_OWVAR 26
20925: PUSH
20926: LD_STRING 
20928: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20929: LD_INT 1
20931: PPUSH
20932: LD_INT 11
20934: PPUSH
20935: LD_INT 10
20937: PPUSH
20938: CALL_OW 380
// un := CreateHuman ;
20942: LD_ADDR_VAR 0 1
20946: PUSH
20947: CALL_OW 44
20951: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20952: LD_VAR 0 1
20956: PPUSH
20957: LD_INT 1
20959: PPUSH
20960: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20964: LD_INT 35
20966: PPUSH
20967: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20971: LD_VAR 0 1
20975: PPUSH
20976: LD_INT 22
20978: PUSH
20979: LD_OWVAR 2
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 69
20992: PPUSH
20993: LD_VAR 0 1
20997: PPUSH
20998: CALL_OW 74
21002: PPUSH
21003: CALL_OW 115
// until IsDead ( un ) ;
21007: LD_VAR 0 1
21011: PPUSH
21012: CALL_OW 301
21016: IFFALSE 20964
// end ;
21018: PPOPN 1
21020: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21021: LD_EXP 15
21025: PUSH
21026: LD_EXP 55
21030: AND
21031: IFFALSE 21043
21033: GO 21035
21035: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21036: LD_STRING earthquake(getX(game), 0, 32)
21038: PPUSH
21039: CALL_OW 559
21043: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21044: LD_EXP 15
21048: PUSH
21049: LD_EXP 56
21053: AND
21054: IFFALSE 21145
21056: GO 21058
21058: DISABLE
21059: LD_INT 0
21061: PPUSH
// begin enable ;
21062: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21063: LD_ADDR_VAR 0 1
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_OWVAR 2
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 21
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 33
21092: PUSH
21093: LD_INT 3
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: PPUSH
21105: CALL_OW 69
21109: ST_TO_ADDR
// if not tmp then
21110: LD_VAR 0 1
21114: NOT
21115: IFFALSE 21119
// exit ;
21117: GO 21145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21119: LD_VAR 0 1
21123: PUSH
21124: LD_INT 1
21126: PPUSH
21127: LD_VAR 0 1
21131: PPUSH
21132: CALL_OW 12
21136: ARRAY
21137: PPUSH
21138: LD_INT 1
21140: PPUSH
21141: CALL_OW 234
// end ;
21145: PPOPN 1
21147: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21148: LD_EXP 15
21152: PUSH
21153: LD_EXP 57
21157: AND
21158: IFFALSE 21299
21160: GO 21162
21162: DISABLE
21163: LD_INT 0
21165: PPUSH
21166: PPUSH
21167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21168: LD_ADDR_VAR 0 3
21172: PUSH
21173: LD_INT 22
21175: PUSH
21176: LD_OWVAR 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 25
21187: PUSH
21188: LD_INT 1
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PPUSH
21199: CALL_OW 69
21203: ST_TO_ADDR
// if not tmp then
21204: LD_VAR 0 3
21208: NOT
21209: IFFALSE 21213
// exit ;
21211: GO 21299
// un := tmp [ rand ( 1 , tmp ) ] ;
21213: LD_ADDR_VAR 0 2
21217: PUSH
21218: LD_VAR 0 3
21222: PUSH
21223: LD_INT 1
21225: PPUSH
21226: LD_VAR 0 3
21230: PPUSH
21231: CALL_OW 12
21235: ARRAY
21236: ST_TO_ADDR
// if Crawls ( un ) then
21237: LD_VAR 0 2
21241: PPUSH
21242: CALL_OW 318
21246: IFFALSE 21257
// ComWalk ( un ) ;
21248: LD_VAR 0 2
21252: PPUSH
21253: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21257: LD_VAR 0 2
21261: PPUSH
21262: LD_INT 9
21264: PPUSH
21265: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21269: LD_INT 28
21271: PPUSH
21272: LD_OWVAR 2
21276: PPUSH
21277: LD_INT 2
21279: PPUSH
21280: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21284: LD_INT 29
21286: PPUSH
21287: LD_OWVAR 2
21291: PPUSH
21292: LD_INT 2
21294: PPUSH
21295: CALL_OW 322
// end ;
21299: PPOPN 3
21301: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21302: LD_EXP 15
21306: PUSH
21307: LD_EXP 58
21311: AND
21312: IFFALSE 21423
21314: GO 21316
21316: DISABLE
21317: LD_INT 0
21319: PPUSH
21320: PPUSH
21321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 22
21329: PUSH
21330: LD_OWVAR 2
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 25
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PPUSH
21353: CALL_OW 69
21357: ST_TO_ADDR
// if not tmp then
21358: LD_VAR 0 3
21362: NOT
21363: IFFALSE 21367
// exit ;
21365: GO 21423
// un := tmp [ rand ( 1 , tmp ) ] ;
21367: LD_ADDR_VAR 0 2
21371: PUSH
21372: LD_VAR 0 3
21376: PUSH
21377: LD_INT 1
21379: PPUSH
21380: LD_VAR 0 3
21384: PPUSH
21385: CALL_OW 12
21389: ARRAY
21390: ST_TO_ADDR
// if Crawls ( un ) then
21391: LD_VAR 0 2
21395: PPUSH
21396: CALL_OW 318
21400: IFFALSE 21411
// ComWalk ( un ) ;
21402: LD_VAR 0 2
21406: PPUSH
21407: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21411: LD_VAR 0 2
21415: PPUSH
21416: LD_INT 8
21418: PPUSH
21419: CALL_OW 336
// end ;
21423: PPOPN 3
21425: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21426: LD_EXP 15
21430: PUSH
21431: LD_EXP 59
21435: AND
21436: IFFALSE 21580
21438: GO 21440
21440: DISABLE
21441: LD_INT 0
21443: PPUSH
21444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21445: LD_ADDR_VAR 0 2
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_OWVAR 2
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 21
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: LD_INT 34
21477: PUSH
21478: LD_INT 12
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 34
21487: PUSH
21488: LD_INT 51
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 34
21497: PUSH
21498: LD_INT 32
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: PPUSH
21516: CALL_OW 69
21520: ST_TO_ADDR
// if not tmp then
21521: LD_VAR 0 2
21525: NOT
21526: IFFALSE 21530
// exit ;
21528: GO 21580
// for i in tmp do
21530: LD_ADDR_VAR 0 1
21534: PUSH
21535: LD_VAR 0 2
21539: PUSH
21540: FOR_IN
21541: IFFALSE 21578
// if GetCargo ( i , mat_artifact ) = 0 then
21543: LD_VAR 0 1
21547: PPUSH
21548: LD_INT 4
21550: PPUSH
21551: CALL_OW 289
21555: PUSH
21556: LD_INT 0
21558: EQUAL
21559: IFFALSE 21576
// SetCargo ( i , mat_siberit , 100 ) ;
21561: LD_VAR 0 1
21565: PPUSH
21566: LD_INT 3
21568: PPUSH
21569: LD_INT 100
21571: PPUSH
21572: CALL_OW 290
21576: GO 21540
21578: POP
21579: POP
// end ;
21580: PPOPN 2
21582: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21583: LD_EXP 15
21587: PUSH
21588: LD_EXP 60
21592: AND
21593: IFFALSE 21776
21595: GO 21597
21597: DISABLE
21598: LD_INT 0
21600: PPUSH
21601: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21602: LD_ADDR_VAR 0 2
21606: PUSH
21607: LD_INT 22
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PPUSH
21619: CALL_OW 69
21623: ST_TO_ADDR
// if not tmp then
21624: LD_VAR 0 2
21628: NOT
21629: IFFALSE 21633
// exit ;
21631: GO 21776
// for i := 1 to 2 do
21633: LD_ADDR_VAR 0 1
21637: PUSH
21638: DOUBLE
21639: LD_INT 1
21641: DEC
21642: ST_TO_ADDR
21643: LD_INT 2
21645: PUSH
21646: FOR_TO
21647: IFFALSE 21774
// begin uc_side := your_side ;
21649: LD_ADDR_OWVAR 20
21653: PUSH
21654: LD_OWVAR 2
21658: ST_TO_ADDR
// uc_nation := nation_american ;
21659: LD_ADDR_OWVAR 21
21663: PUSH
21664: LD_INT 1
21666: ST_TO_ADDR
// vc_chassis := us_morphling ;
21667: LD_ADDR_OWVAR 37
21671: PUSH
21672: LD_INT 5
21674: ST_TO_ADDR
// vc_engine := engine_siberite ;
21675: LD_ADDR_OWVAR 39
21679: PUSH
21680: LD_INT 3
21682: ST_TO_ADDR
// vc_control := control_computer ;
21683: LD_ADDR_OWVAR 38
21687: PUSH
21688: LD_INT 3
21690: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21691: LD_ADDR_OWVAR 40
21695: PUSH
21696: LD_INT 10
21698: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21699: LD_VAR 0 2
21703: PUSH
21704: LD_INT 1
21706: ARRAY
21707: PPUSH
21708: CALL_OW 310
21712: NOT
21713: IFFALSE 21760
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21715: CALL_OW 45
21719: PPUSH
21720: LD_VAR 0 2
21724: PUSH
21725: LD_INT 1
21727: ARRAY
21728: PPUSH
21729: CALL_OW 250
21733: PPUSH
21734: LD_VAR 0 2
21738: PUSH
21739: LD_INT 1
21741: ARRAY
21742: PPUSH
21743: CALL_OW 251
21747: PPUSH
21748: LD_INT 12
21750: PPUSH
21751: LD_INT 1
21753: PPUSH
21754: CALL_OW 50
21758: GO 21772
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21760: CALL_OW 45
21764: PPUSH
21765: LD_INT 1
21767: PPUSH
21768: CALL_OW 51
// end ;
21772: GO 21646
21774: POP
21775: POP
// end ;
21776: PPOPN 2
21778: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21779: LD_EXP 15
21783: PUSH
21784: LD_EXP 61
21788: AND
21789: IFFALSE 22011
21791: GO 21793
21793: DISABLE
21794: LD_INT 0
21796: PPUSH
21797: PPUSH
21798: PPUSH
21799: PPUSH
21800: PPUSH
21801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21802: LD_ADDR_VAR 0 6
21806: PUSH
21807: LD_INT 22
21809: PUSH
21810: LD_OWVAR 2
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 21
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 3
21831: PUSH
21832: LD_INT 23
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: PPUSH
21851: CALL_OW 69
21855: ST_TO_ADDR
// if not tmp then
21856: LD_VAR 0 6
21860: NOT
21861: IFFALSE 21865
// exit ;
21863: GO 22011
// s1 := rand ( 1 , 4 ) ;
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: LD_INT 1
21872: PPUSH
21873: LD_INT 4
21875: PPUSH
21876: CALL_OW 12
21880: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21881: LD_ADDR_VAR 0 4
21885: PUSH
21886: LD_VAR 0 6
21890: PUSH
21891: LD_INT 1
21893: ARRAY
21894: PPUSH
21895: LD_VAR 0 2
21899: PPUSH
21900: CALL_OW 259
21904: ST_TO_ADDR
// if s1 = 1 then
21905: LD_VAR 0 2
21909: PUSH
21910: LD_INT 1
21912: EQUAL
21913: IFFALSE 21933
// s2 := rand ( 2 , 4 ) else
21915: LD_ADDR_VAR 0 3
21919: PUSH
21920: LD_INT 2
21922: PPUSH
21923: LD_INT 4
21925: PPUSH
21926: CALL_OW 12
21930: ST_TO_ADDR
21931: GO 21941
// s2 := 1 ;
21933: LD_ADDR_VAR 0 3
21937: PUSH
21938: LD_INT 1
21940: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21941: LD_ADDR_VAR 0 5
21945: PUSH
21946: LD_VAR 0 6
21950: PUSH
21951: LD_INT 1
21953: ARRAY
21954: PPUSH
21955: LD_VAR 0 3
21959: PPUSH
21960: CALL_OW 259
21964: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21965: LD_VAR 0 6
21969: PUSH
21970: LD_INT 1
21972: ARRAY
21973: PPUSH
21974: LD_VAR 0 2
21978: PPUSH
21979: LD_VAR 0 5
21983: PPUSH
21984: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21988: LD_VAR 0 6
21992: PUSH
21993: LD_INT 1
21995: ARRAY
21996: PPUSH
21997: LD_VAR 0 3
22001: PPUSH
22002: LD_VAR 0 4
22006: PPUSH
22007: CALL_OW 237
// end ;
22011: PPOPN 6
22013: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22014: LD_EXP 15
22018: PUSH
22019: LD_EXP 62
22023: AND
22024: IFFALSE 22103
22026: GO 22028
22028: DISABLE
22029: LD_INT 0
22031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22032: LD_ADDR_VAR 0 1
22036: PUSH
22037: LD_INT 22
22039: PUSH
22040: LD_OWVAR 2
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 30
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PPUSH
22063: CALL_OW 69
22067: ST_TO_ADDR
// if not tmp then
22068: LD_VAR 0 1
22072: NOT
22073: IFFALSE 22077
// exit ;
22075: GO 22103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22077: LD_VAR 0 1
22081: PUSH
22082: LD_INT 1
22084: PPUSH
22085: LD_VAR 0 1
22089: PPUSH
22090: CALL_OW 12
22094: ARRAY
22095: PPUSH
22096: LD_INT 1
22098: PPUSH
22099: CALL_OW 234
// end ;
22103: PPOPN 1
22105: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22106: LD_EXP 15
22110: PUSH
22111: LD_EXP 63
22115: AND
22116: IFFALSE 22228
22118: GO 22120
22120: DISABLE
22121: LD_INT 0
22123: PPUSH
22124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22125: LD_ADDR_VAR 0 2
22129: PUSH
22130: LD_INT 22
22132: PUSH
22133: LD_OWVAR 2
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 30
22147: PUSH
22148: LD_INT 27
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 30
22157: PUSH
22158: LD_INT 26
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 30
22167: PUSH
22168: LD_INT 28
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PPUSH
22185: CALL_OW 69
22189: ST_TO_ADDR
// if not tmp then
22190: LD_VAR 0 2
22194: NOT
22195: IFFALSE 22199
// exit ;
22197: GO 22228
// for i in tmp do
22199: LD_ADDR_VAR 0 1
22203: PUSH
22204: LD_VAR 0 2
22208: PUSH
22209: FOR_IN
22210: IFFALSE 22226
// SetLives ( i , 1 ) ;
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: CALL_OW 234
22224: GO 22209
22226: POP
22227: POP
// end ;
22228: PPOPN 2
22230: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22231: LD_EXP 15
22235: PUSH
22236: LD_EXP 64
22240: AND
22241: IFFALSE 22528
22243: GO 22245
22245: DISABLE
22246: LD_INT 0
22248: PPUSH
22249: PPUSH
22250: PPUSH
// begin i := rand ( 1 , 7 ) ;
22251: LD_ADDR_VAR 0 1
22255: PUSH
22256: LD_INT 1
22258: PPUSH
22259: LD_INT 7
22261: PPUSH
22262: CALL_OW 12
22266: ST_TO_ADDR
// case i of 1 :
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 1
22274: DOUBLE
22275: EQUAL
22276: IFTRUE 22280
22278: GO 22290
22280: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22281: LD_STRING earthquake(getX(game), 0, 32)
22283: PPUSH
22284: CALL_OW 559
22288: GO 22528
22290: LD_INT 2
22292: DOUBLE
22293: EQUAL
22294: IFTRUE 22298
22296: GO 22312
22298: POP
// begin ToLua ( displayStucuk(); ) ;
22299: LD_STRING displayStucuk();
22301: PPUSH
22302: CALL_OW 559
// ResetFog ;
22306: CALL_OW 335
// end ; 3 :
22310: GO 22528
22312: LD_INT 3
22314: DOUBLE
22315: EQUAL
22316: IFTRUE 22320
22318: GO 22424
22320: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22321: LD_ADDR_VAR 0 2
22325: PUSH
22326: LD_INT 22
22328: PUSH
22329: LD_OWVAR 2
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 25
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL_OW 69
22356: ST_TO_ADDR
// if not tmp then
22357: LD_VAR 0 2
22361: NOT
22362: IFFALSE 22366
// exit ;
22364: GO 22528
// un := tmp [ rand ( 1 , tmp ) ] ;
22366: LD_ADDR_VAR 0 3
22370: PUSH
22371: LD_VAR 0 2
22375: PUSH
22376: LD_INT 1
22378: PPUSH
22379: LD_VAR 0 2
22383: PPUSH
22384: CALL_OW 12
22388: ARRAY
22389: ST_TO_ADDR
// if Crawls ( un ) then
22390: LD_VAR 0 3
22394: PPUSH
22395: CALL_OW 318
22399: IFFALSE 22410
// ComWalk ( un ) ;
22401: LD_VAR 0 3
22405: PPUSH
22406: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22410: LD_VAR 0 3
22414: PPUSH
22415: LD_INT 8
22417: PPUSH
22418: CALL_OW 336
// end ; 4 :
22422: GO 22528
22424: LD_INT 4
22426: DOUBLE
22427: EQUAL
22428: IFTRUE 22432
22430: GO 22506
22432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22433: LD_ADDR_VAR 0 2
22437: PUSH
22438: LD_INT 22
22440: PUSH
22441: LD_OWVAR 2
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 30
22452: PUSH
22453: LD_INT 29
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PPUSH
22464: CALL_OW 69
22468: ST_TO_ADDR
// if not tmp then
22469: LD_VAR 0 2
22473: NOT
22474: IFFALSE 22478
// exit ;
22476: GO 22528
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22478: LD_VAR 0 2
22482: PUSH
22483: LD_INT 1
22485: ARRAY
22486: PPUSH
22487: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22491: LD_VAR 0 2
22495: PUSH
22496: LD_INT 1
22498: ARRAY
22499: PPUSH
22500: CALL_OW 65
// end ; 5 .. 7 :
22504: GO 22528
22506: LD_INT 5
22508: DOUBLE
22509: GREATEREQUAL
22510: IFFALSE 22518
22512: LD_INT 7
22514: DOUBLE
22515: LESSEQUAL
22516: IFTRUE 22520
22518: GO 22527
22520: POP
// StreamSibBomb ; end ;
22521: CALL 18765 0 0
22525: GO 22528
22527: POP
// end ;
22528: PPOPN 3
22530: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22531: LD_EXP 15
22535: PUSH
22536: LD_EXP 65
22540: AND
22541: IFFALSE 22697
22543: GO 22545
22545: DISABLE
22546: LD_INT 0
22548: PPUSH
22549: PPUSH
22550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22551: LD_ADDR_VAR 0 2
22555: PUSH
22556: LD_INT 81
22558: PUSH
22559: LD_OWVAR 2
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: LD_INT 21
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 21
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PPUSH
22600: CALL_OW 69
22604: ST_TO_ADDR
// if not tmp then
22605: LD_VAR 0 2
22609: NOT
22610: IFFALSE 22614
// exit ;
22612: GO 22697
// p := 0 ;
22614: LD_ADDR_VAR 0 3
22618: PUSH
22619: LD_INT 0
22621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22622: LD_INT 35
22624: PPUSH
22625: CALL_OW 67
// p := p + 1 ;
22629: LD_ADDR_VAR 0 3
22633: PUSH
22634: LD_VAR 0 3
22638: PUSH
22639: LD_INT 1
22641: PLUS
22642: ST_TO_ADDR
// for i in tmp do
22643: LD_ADDR_VAR 0 1
22647: PUSH
22648: LD_VAR 0 2
22652: PUSH
22653: FOR_IN
22654: IFFALSE 22685
// if GetLives ( i ) < 1000 then
22656: LD_VAR 0 1
22660: PPUSH
22661: CALL_OW 256
22665: PUSH
22666: LD_INT 1000
22668: LESS
22669: IFFALSE 22683
// SetLives ( i , 1000 ) ;
22671: LD_VAR 0 1
22675: PPUSH
22676: LD_INT 1000
22678: PPUSH
22679: CALL_OW 234
22683: GO 22653
22685: POP
22686: POP
// until p > 20 ;
22687: LD_VAR 0 3
22691: PUSH
22692: LD_INT 20
22694: GREATER
22695: IFFALSE 22622
// end ;
22697: PPOPN 3
22699: END
// every 0 0$1 trigger StreamModeActive and sTime do
22700: LD_EXP 15
22704: PUSH
22705: LD_EXP 66
22709: AND
22710: IFFALSE 22745
22712: GO 22714
22714: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22715: LD_INT 28
22717: PPUSH
22718: LD_OWVAR 2
22722: PPUSH
22723: LD_INT 2
22725: PPUSH
22726: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22730: LD_INT 30
22732: PPUSH
22733: LD_OWVAR 2
22737: PPUSH
22738: LD_INT 2
22740: PPUSH
22741: CALL_OW 322
// end ;
22745: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22746: LD_EXP 15
22750: PUSH
22751: LD_EXP 67
22755: AND
22756: IFFALSE 22877
22758: GO 22760
22760: DISABLE
22761: LD_INT 0
22763: PPUSH
22764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22765: LD_ADDR_VAR 0 2
22769: PUSH
22770: LD_INT 22
22772: PUSH
22773: LD_OWVAR 2
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 21
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 3
22794: PUSH
22795: LD_INT 23
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: PPUSH
22814: CALL_OW 69
22818: ST_TO_ADDR
// if not tmp then
22819: LD_VAR 0 2
22823: NOT
22824: IFFALSE 22828
// exit ;
22826: GO 22877
// for i in tmp do
22828: LD_ADDR_VAR 0 1
22832: PUSH
22833: LD_VAR 0 2
22837: PUSH
22838: FOR_IN
22839: IFFALSE 22875
// begin if Crawls ( i ) then
22841: LD_VAR 0 1
22845: PPUSH
22846: CALL_OW 318
22850: IFFALSE 22861
// ComWalk ( i ) ;
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 138
// SetClass ( i , 2 ) ;
22861: LD_VAR 0 1
22865: PPUSH
22866: LD_INT 2
22868: PPUSH
22869: CALL_OW 336
// end ;
22873: GO 22838
22875: POP
22876: POP
// end ;
22877: PPOPN 2
22879: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22880: LD_EXP 15
22884: PUSH
22885: LD_EXP 68
22889: AND
22890: IFFALSE 23178
22892: GO 22894
22894: DISABLE
22895: LD_INT 0
22897: PPUSH
22898: PPUSH
22899: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22900: LD_OWVAR 2
22904: PPUSH
22905: LD_INT 9
22907: PPUSH
22908: LD_INT 1
22910: PPUSH
22911: LD_INT 1
22913: PPUSH
22914: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22918: LD_INT 9
22920: PPUSH
22921: LD_OWVAR 2
22925: PPUSH
22926: CALL_OW 343
// uc_side := 9 ;
22930: LD_ADDR_OWVAR 20
22934: PUSH
22935: LD_INT 9
22937: ST_TO_ADDR
// uc_nation := 2 ;
22938: LD_ADDR_OWVAR 21
22942: PUSH
22943: LD_INT 2
22945: ST_TO_ADDR
// hc_name := Dark Warrior ;
22946: LD_ADDR_OWVAR 26
22950: PUSH
22951: LD_STRING Dark Warrior
22953: ST_TO_ADDR
// hc_gallery :=  ;
22954: LD_ADDR_OWVAR 33
22958: PUSH
22959: LD_STRING 
22961: ST_TO_ADDR
// hc_noskilllimit := true ;
22962: LD_ADDR_OWVAR 76
22966: PUSH
22967: LD_INT 1
22969: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22970: LD_ADDR_OWVAR 31
22974: PUSH
22975: LD_INT 30
22977: PUSH
22978: LD_INT 30
22980: PUSH
22981: LD_INT 30
22983: PUSH
22984: LD_INT 30
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: ST_TO_ADDR
// un := CreateHuman ;
22993: LD_ADDR_VAR 0 3
22997: PUSH
22998: CALL_OW 44
23002: ST_TO_ADDR
// hc_noskilllimit := false ;
23003: LD_ADDR_OWVAR 76
23007: PUSH
23008: LD_INT 0
23010: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23011: LD_VAR 0 3
23015: PPUSH
23016: LD_INT 1
23018: PPUSH
23019: CALL_OW 51
// ToLua ( playRanger() ) ;
23023: LD_STRING playRanger()
23025: PPUSH
23026: CALL_OW 559
// p := 0 ;
23030: LD_ADDR_VAR 0 2
23034: PUSH
23035: LD_INT 0
23037: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23038: LD_INT 35
23040: PPUSH
23041: CALL_OW 67
// p := p + 1 ;
23045: LD_ADDR_VAR 0 2
23049: PUSH
23050: LD_VAR 0 2
23054: PUSH
23055: LD_INT 1
23057: PLUS
23058: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23059: LD_VAR 0 3
23063: PPUSH
23064: CALL_OW 256
23068: PUSH
23069: LD_INT 1000
23071: LESS
23072: IFFALSE 23086
// SetLives ( un , 1000 ) ;
23074: LD_VAR 0 3
23078: PPUSH
23079: LD_INT 1000
23081: PPUSH
23082: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23086: LD_VAR 0 3
23090: PPUSH
23091: LD_INT 81
23093: PUSH
23094: LD_OWVAR 2
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 91
23105: PUSH
23106: LD_VAR 0 3
23110: PUSH
23111: LD_INT 30
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: LIST
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 69
23127: PPUSH
23128: LD_VAR 0 3
23132: PPUSH
23133: CALL_OW 74
23137: PPUSH
23138: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23142: LD_VAR 0 2
23146: PUSH
23147: LD_INT 80
23149: GREATER
23150: PUSH
23151: LD_VAR 0 3
23155: PPUSH
23156: CALL_OW 301
23160: OR
23161: IFFALSE 23038
// if un then
23163: LD_VAR 0 3
23167: IFFALSE 23178
// RemoveUnit ( un ) ;
23169: LD_VAR 0 3
23173: PPUSH
23174: CALL_OW 64
// end ;
23178: PPOPN 3
23180: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23181: LD_EXP 69
23185: IFFALSE 23301
23187: GO 23189
23189: DISABLE
23190: LD_INT 0
23192: PPUSH
23193: PPUSH
23194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23195: LD_ADDR_VAR 0 2
23199: PUSH
23200: LD_INT 81
23202: PUSH
23203: LD_OWVAR 2
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 21
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PPUSH
23226: CALL_OW 69
23230: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23231: LD_STRING playComputer()
23233: PPUSH
23234: CALL_OW 559
// if not tmp then
23238: LD_VAR 0 2
23242: NOT
23243: IFFALSE 23247
// exit ;
23245: GO 23301
// for i in tmp do
23247: LD_ADDR_VAR 0 1
23251: PUSH
23252: LD_VAR 0 2
23256: PUSH
23257: FOR_IN
23258: IFFALSE 23299
// for j := 1 to 4 do
23260: LD_ADDR_VAR 0 3
23264: PUSH
23265: DOUBLE
23266: LD_INT 1
23268: DEC
23269: ST_TO_ADDR
23270: LD_INT 4
23272: PUSH
23273: FOR_TO
23274: IFFALSE 23295
// SetSkill ( i , j , 10 ) ;
23276: LD_VAR 0 1
23280: PPUSH
23281: LD_VAR 0 3
23285: PPUSH
23286: LD_INT 10
23288: PPUSH
23289: CALL_OW 237
23293: GO 23273
23295: POP
23296: POP
23297: GO 23257
23299: POP
23300: POP
// end ;
23301: PPOPN 3
23303: END
// every 0 0$1 trigger s30 do var i , tmp ;
23304: LD_EXP 70
23308: IFFALSE 23377
23310: GO 23312
23312: DISABLE
23313: LD_INT 0
23315: PPUSH
23316: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23317: LD_ADDR_VAR 0 2
23321: PUSH
23322: LD_INT 22
23324: PUSH
23325: LD_OWVAR 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PPUSH
23334: CALL_OW 69
23338: ST_TO_ADDR
// if not tmp then
23339: LD_VAR 0 2
23343: NOT
23344: IFFALSE 23348
// exit ;
23346: GO 23377
// for i in tmp do
23348: LD_ADDR_VAR 0 1
23352: PUSH
23353: LD_VAR 0 2
23357: PUSH
23358: FOR_IN
23359: IFFALSE 23375
// SetLives ( i , 300 ) ;
23361: LD_VAR 0 1
23365: PPUSH
23366: LD_INT 300
23368: PPUSH
23369: CALL_OW 234
23373: GO 23358
23375: POP
23376: POP
// end ;
23377: PPOPN 2
23379: END
// every 0 0$1 trigger s60 do var i , tmp ;
23380: LD_EXP 71
23384: IFFALSE 23453
23386: GO 23388
23388: DISABLE
23389: LD_INT 0
23391: PPUSH
23392: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: LD_INT 22
23400: PUSH
23401: LD_OWVAR 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PPUSH
23410: CALL_OW 69
23414: ST_TO_ADDR
// if not tmp then
23415: LD_VAR 0 2
23419: NOT
23420: IFFALSE 23424
// exit ;
23422: GO 23453
// for i in tmp do
23424: LD_ADDR_VAR 0 1
23428: PUSH
23429: LD_VAR 0 2
23433: PUSH
23434: FOR_IN
23435: IFFALSE 23451
// SetLives ( i , 600 ) ;
23437: LD_VAR 0 1
23441: PPUSH
23442: LD_INT 600
23444: PPUSH
23445: CALL_OW 234
23449: GO 23434
23451: POP
23452: POP
// end ;
23453: PPOPN 2
23455: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23456: LD_INT 0
23458: PPUSH
// case cmd of 301 :
23459: LD_VAR 0 1
23463: PUSH
23464: LD_INT 301
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23504
23472: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23473: LD_VAR 0 6
23477: PPUSH
23478: LD_VAR 0 7
23482: PPUSH
23483: LD_VAR 0 8
23487: PPUSH
23488: LD_VAR 0 4
23492: PPUSH
23493: LD_VAR 0 5
23497: PPUSH
23498: CALL 24713 0 5
23502: GO 23625
23504: LD_INT 302
23506: DOUBLE
23507: EQUAL
23508: IFTRUE 23512
23510: GO 23549
23512: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23513: LD_VAR 0 6
23517: PPUSH
23518: LD_VAR 0 7
23522: PPUSH
23523: LD_VAR 0 8
23527: PPUSH
23528: LD_VAR 0 9
23532: PPUSH
23533: LD_VAR 0 4
23537: PPUSH
23538: LD_VAR 0 5
23542: PPUSH
23543: CALL 24804 0 6
23547: GO 23625
23549: LD_INT 303
23551: DOUBLE
23552: EQUAL
23553: IFTRUE 23557
23555: GO 23594
23557: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23558: LD_VAR 0 6
23562: PPUSH
23563: LD_VAR 0 7
23567: PPUSH
23568: LD_VAR 0 8
23572: PPUSH
23573: LD_VAR 0 9
23577: PPUSH
23578: LD_VAR 0 4
23582: PPUSH
23583: LD_VAR 0 5
23587: PPUSH
23588: CALL 23630 0 6
23592: GO 23625
23594: LD_INT 304
23596: DOUBLE
23597: EQUAL
23598: IFTRUE 23602
23600: GO 23624
23602: POP
// hHackTeleport ( unit , x , y ) ; end ;
23603: LD_VAR 0 2
23607: PPUSH
23608: LD_VAR 0 4
23612: PPUSH
23613: LD_VAR 0 5
23617: PPUSH
23618: CALL 25397 0 3
23622: GO 23625
23624: POP
// end ;
23625: LD_VAR 0 12
23629: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23630: LD_INT 0
23632: PPUSH
23633: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23634: LD_VAR 0 1
23638: PUSH
23639: LD_INT 1
23641: LESS
23642: PUSH
23643: LD_VAR 0 1
23647: PUSH
23648: LD_INT 3
23650: GREATER
23651: OR
23652: PUSH
23653: LD_VAR 0 5
23657: PPUSH
23658: LD_VAR 0 6
23662: PPUSH
23663: CALL_OW 428
23667: OR
23668: IFFALSE 23672
// exit ;
23670: GO 24400
// uc_side := your_side ;
23672: LD_ADDR_OWVAR 20
23676: PUSH
23677: LD_OWVAR 2
23681: ST_TO_ADDR
// uc_nation := nation ;
23682: LD_ADDR_OWVAR 21
23686: PUSH
23687: LD_VAR 0 1
23691: ST_TO_ADDR
// bc_level = 1 ;
23692: LD_ADDR_OWVAR 43
23696: PUSH
23697: LD_INT 1
23699: ST_TO_ADDR
// case btype of 1 :
23700: LD_VAR 0 2
23704: PUSH
23705: LD_INT 1
23707: DOUBLE
23708: EQUAL
23709: IFTRUE 23713
23711: GO 23724
23713: POP
// bc_type := b_depot ; 2 :
23714: LD_ADDR_OWVAR 42
23718: PUSH
23719: LD_INT 0
23721: ST_TO_ADDR
23722: GO 24344
23724: LD_INT 2
23726: DOUBLE
23727: EQUAL
23728: IFTRUE 23732
23730: GO 23743
23732: POP
// bc_type := b_warehouse ; 3 :
23733: LD_ADDR_OWVAR 42
23737: PUSH
23738: LD_INT 1
23740: ST_TO_ADDR
23741: GO 24344
23743: LD_INT 3
23745: DOUBLE
23746: EQUAL
23747: IFTRUE 23751
23749: GO 23762
23751: POP
// bc_type := b_lab ; 4 .. 9 :
23752: LD_ADDR_OWVAR 42
23756: PUSH
23757: LD_INT 6
23759: ST_TO_ADDR
23760: GO 24344
23762: LD_INT 4
23764: DOUBLE
23765: GREATEREQUAL
23766: IFFALSE 23774
23768: LD_INT 9
23770: DOUBLE
23771: LESSEQUAL
23772: IFTRUE 23776
23774: GO 23836
23776: POP
// begin bc_type := b_lab_half ;
23777: LD_ADDR_OWVAR 42
23781: PUSH
23782: LD_INT 7
23784: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23785: LD_ADDR_OWVAR 44
23789: PUSH
23790: LD_INT 10
23792: PUSH
23793: LD_INT 11
23795: PUSH
23796: LD_INT 12
23798: PUSH
23799: LD_INT 15
23801: PUSH
23802: LD_INT 14
23804: PUSH
23805: LD_INT 13
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: LD_VAR 0 2
23820: PUSH
23821: LD_INT 3
23823: MINUS
23824: ARRAY
23825: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23826: LD_ADDR_OWVAR 45
23830: PUSH
23831: LD_INT 9
23833: ST_TO_ADDR
// end ; 10 .. 13 :
23834: GO 24344
23836: LD_INT 10
23838: DOUBLE
23839: GREATEREQUAL
23840: IFFALSE 23848
23842: LD_INT 13
23844: DOUBLE
23845: LESSEQUAL
23846: IFTRUE 23850
23848: GO 23927
23850: POP
// begin bc_type := b_lab_full ;
23851: LD_ADDR_OWVAR 42
23855: PUSH
23856: LD_INT 8
23858: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23859: LD_ADDR_OWVAR 44
23863: PUSH
23864: LD_INT 10
23866: PUSH
23867: LD_INT 12
23869: PUSH
23870: LD_INT 14
23872: PUSH
23873: LD_INT 13
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: PUSH
23882: LD_VAR 0 2
23886: PUSH
23887: LD_INT 9
23889: MINUS
23890: ARRAY
23891: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23892: LD_ADDR_OWVAR 45
23896: PUSH
23897: LD_INT 11
23899: PUSH
23900: LD_INT 15
23902: PUSH
23903: LD_INT 12
23905: PUSH
23906: LD_INT 15
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: PUSH
23915: LD_VAR 0 2
23919: PUSH
23920: LD_INT 9
23922: MINUS
23923: ARRAY
23924: ST_TO_ADDR
// end ; 14 :
23925: GO 24344
23927: LD_INT 14
23929: DOUBLE
23930: EQUAL
23931: IFTRUE 23935
23933: GO 23946
23935: POP
// bc_type := b_workshop ; 15 :
23936: LD_ADDR_OWVAR 42
23940: PUSH
23941: LD_INT 2
23943: ST_TO_ADDR
23944: GO 24344
23946: LD_INT 15
23948: DOUBLE
23949: EQUAL
23950: IFTRUE 23954
23952: GO 23965
23954: POP
// bc_type := b_factory ; 16 :
23955: LD_ADDR_OWVAR 42
23959: PUSH
23960: LD_INT 3
23962: ST_TO_ADDR
23963: GO 24344
23965: LD_INT 16
23967: DOUBLE
23968: EQUAL
23969: IFTRUE 23973
23971: GO 23984
23973: POP
// bc_type := b_ext_gun ; 17 :
23974: LD_ADDR_OWVAR 42
23978: PUSH
23979: LD_INT 17
23981: ST_TO_ADDR
23982: GO 24344
23984: LD_INT 17
23986: DOUBLE
23987: EQUAL
23988: IFTRUE 23992
23990: GO 24020
23992: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23993: LD_ADDR_OWVAR 42
23997: PUSH
23998: LD_INT 19
24000: PUSH
24001: LD_INT 23
24003: PUSH
24004: LD_INT 19
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: LD_VAR 0 1
24016: ARRAY
24017: ST_TO_ADDR
24018: GO 24344
24020: LD_INT 18
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24039
24028: POP
// bc_type := b_ext_radar ; 19 :
24029: LD_ADDR_OWVAR 42
24033: PUSH
24034: LD_INT 20
24036: ST_TO_ADDR
24037: GO 24344
24039: LD_INT 19
24041: DOUBLE
24042: EQUAL
24043: IFTRUE 24047
24045: GO 24058
24047: POP
// bc_type := b_ext_radio ; 20 :
24048: LD_ADDR_OWVAR 42
24052: PUSH
24053: LD_INT 22
24055: ST_TO_ADDR
24056: GO 24344
24058: LD_INT 20
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24077
24066: POP
// bc_type := b_ext_siberium ; 21 :
24067: LD_ADDR_OWVAR 42
24071: PUSH
24072: LD_INT 21
24074: ST_TO_ADDR
24075: GO 24344
24077: LD_INT 21
24079: DOUBLE
24080: EQUAL
24081: IFTRUE 24085
24083: GO 24096
24085: POP
// bc_type := b_ext_computer ; 22 :
24086: LD_ADDR_OWVAR 42
24090: PUSH
24091: LD_INT 24
24093: ST_TO_ADDR
24094: GO 24344
24096: LD_INT 22
24098: DOUBLE
24099: EQUAL
24100: IFTRUE 24104
24102: GO 24115
24104: POP
// bc_type := b_ext_track ; 23 :
24105: LD_ADDR_OWVAR 42
24109: PUSH
24110: LD_INT 16
24112: ST_TO_ADDR
24113: GO 24344
24115: LD_INT 23
24117: DOUBLE
24118: EQUAL
24119: IFTRUE 24123
24121: GO 24134
24123: POP
// bc_type := b_ext_laser ; 24 :
24124: LD_ADDR_OWVAR 42
24128: PUSH
24129: LD_INT 25
24131: ST_TO_ADDR
24132: GO 24344
24134: LD_INT 24
24136: DOUBLE
24137: EQUAL
24138: IFTRUE 24142
24140: GO 24153
24142: POP
// bc_type := b_control_tower ; 25 :
24143: LD_ADDR_OWVAR 42
24147: PUSH
24148: LD_INT 36
24150: ST_TO_ADDR
24151: GO 24344
24153: LD_INT 25
24155: DOUBLE
24156: EQUAL
24157: IFTRUE 24161
24159: GO 24172
24161: POP
// bc_type := b_breastwork ; 26 :
24162: LD_ADDR_OWVAR 42
24166: PUSH
24167: LD_INT 31
24169: ST_TO_ADDR
24170: GO 24344
24172: LD_INT 26
24174: DOUBLE
24175: EQUAL
24176: IFTRUE 24180
24178: GO 24191
24180: POP
// bc_type := b_bunker ; 27 :
24181: LD_ADDR_OWVAR 42
24185: PUSH
24186: LD_INT 32
24188: ST_TO_ADDR
24189: GO 24344
24191: LD_INT 27
24193: DOUBLE
24194: EQUAL
24195: IFTRUE 24199
24197: GO 24210
24199: POP
// bc_type := b_turret ; 28 :
24200: LD_ADDR_OWVAR 42
24204: PUSH
24205: LD_INT 33
24207: ST_TO_ADDR
24208: GO 24344
24210: LD_INT 28
24212: DOUBLE
24213: EQUAL
24214: IFTRUE 24218
24216: GO 24229
24218: POP
// bc_type := b_armoury ; 29 :
24219: LD_ADDR_OWVAR 42
24223: PUSH
24224: LD_INT 4
24226: ST_TO_ADDR
24227: GO 24344
24229: LD_INT 29
24231: DOUBLE
24232: EQUAL
24233: IFTRUE 24237
24235: GO 24248
24237: POP
// bc_type := b_barracks ; 30 :
24238: LD_ADDR_OWVAR 42
24242: PUSH
24243: LD_INT 5
24245: ST_TO_ADDR
24246: GO 24344
24248: LD_INT 30
24250: DOUBLE
24251: EQUAL
24252: IFTRUE 24256
24254: GO 24267
24256: POP
// bc_type := b_solar_power ; 31 :
24257: LD_ADDR_OWVAR 42
24261: PUSH
24262: LD_INT 27
24264: ST_TO_ADDR
24265: GO 24344
24267: LD_INT 31
24269: DOUBLE
24270: EQUAL
24271: IFTRUE 24275
24273: GO 24286
24275: POP
// bc_type := b_oil_power ; 32 :
24276: LD_ADDR_OWVAR 42
24280: PUSH
24281: LD_INT 26
24283: ST_TO_ADDR
24284: GO 24344
24286: LD_INT 32
24288: DOUBLE
24289: EQUAL
24290: IFTRUE 24294
24292: GO 24305
24294: POP
// bc_type := b_siberite_power ; 33 :
24295: LD_ADDR_OWVAR 42
24299: PUSH
24300: LD_INT 28
24302: ST_TO_ADDR
24303: GO 24344
24305: LD_INT 33
24307: DOUBLE
24308: EQUAL
24309: IFTRUE 24313
24311: GO 24324
24313: POP
// bc_type := b_oil_mine ; 34 :
24314: LD_ADDR_OWVAR 42
24318: PUSH
24319: LD_INT 29
24321: ST_TO_ADDR
24322: GO 24344
24324: LD_INT 34
24326: DOUBLE
24327: EQUAL
24328: IFTRUE 24332
24330: GO 24343
24332: POP
// bc_type := b_siberite_mine ; end ;
24333: LD_ADDR_OWVAR 42
24337: PUSH
24338: LD_INT 30
24340: ST_TO_ADDR
24341: GO 24344
24343: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24344: LD_ADDR_VAR 0 8
24348: PUSH
24349: LD_VAR 0 5
24353: PPUSH
24354: LD_VAR 0 6
24358: PPUSH
24359: LD_VAR 0 3
24363: PPUSH
24364: CALL_OW 47
24368: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24369: LD_OWVAR 42
24373: PUSH
24374: LD_INT 32
24376: PUSH
24377: LD_INT 33
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: IN
24384: IFFALSE 24400
// PlaceWeaponTurret ( b , weapon ) ;
24386: LD_VAR 0 8
24390: PPUSH
24391: LD_VAR 0 4
24395: PPUSH
24396: CALL_OW 431
// end ;
24400: LD_VAR 0 7
24404: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24405: LD_INT 0
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24411: LD_ADDR_VAR 0 4
24415: PUSH
24416: LD_INT 22
24418: PUSH
24419: LD_OWVAR 2
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 2
24430: PUSH
24431: LD_INT 30
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 30
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PPUSH
24460: CALL_OW 69
24464: ST_TO_ADDR
// if not tmp then
24465: LD_VAR 0 4
24469: NOT
24470: IFFALSE 24474
// exit ;
24472: GO 24533
// for i in tmp do
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_VAR 0 4
24483: PUSH
24484: FOR_IN
24485: IFFALSE 24531
// for j = 1 to 3 do
24487: LD_ADDR_VAR 0 3
24491: PUSH
24492: DOUBLE
24493: LD_INT 1
24495: DEC
24496: ST_TO_ADDR
24497: LD_INT 3
24499: PUSH
24500: FOR_TO
24501: IFFALSE 24527
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24503: LD_VAR 0 2
24507: PPUSH
24508: CALL_OW 274
24512: PPUSH
24513: LD_VAR 0 3
24517: PPUSH
24518: LD_INT 99999
24520: PPUSH
24521: CALL_OW 277
24525: GO 24500
24527: POP
24528: POP
24529: GO 24484
24531: POP
24532: POP
// end ;
24533: LD_VAR 0 1
24537: RET
// export function hHackSetLevel10 ; var i , j ; begin
24538: LD_INT 0
24540: PPUSH
24541: PPUSH
24542: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24543: LD_ADDR_VAR 0 2
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PPUSH
24558: CALL_OW 69
24562: PUSH
24563: FOR_IN
24564: IFFALSE 24616
// if IsSelected ( i ) then
24566: LD_VAR 0 2
24570: PPUSH
24571: CALL_OW 306
24575: IFFALSE 24614
// begin for j := 1 to 4 do
24577: LD_ADDR_VAR 0 3
24581: PUSH
24582: DOUBLE
24583: LD_INT 1
24585: DEC
24586: ST_TO_ADDR
24587: LD_INT 4
24589: PUSH
24590: FOR_TO
24591: IFFALSE 24612
// SetSkill ( i , j , 10 ) ;
24593: LD_VAR 0 2
24597: PPUSH
24598: LD_VAR 0 3
24602: PPUSH
24603: LD_INT 10
24605: PPUSH
24606: CALL_OW 237
24610: GO 24590
24612: POP
24613: POP
// end ;
24614: GO 24563
24616: POP
24617: POP
// end ;
24618: LD_VAR 0 1
24622: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24623: LD_INT 0
24625: PPUSH
24626: PPUSH
24627: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24628: LD_ADDR_VAR 0 2
24632: PUSH
24633: LD_INT 22
24635: PUSH
24636: LD_OWVAR 2
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 21
24647: PUSH
24648: LD_INT 1
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PPUSH
24659: CALL_OW 69
24663: PUSH
24664: FOR_IN
24665: IFFALSE 24706
// begin for j := 1 to 4 do
24667: LD_ADDR_VAR 0 3
24671: PUSH
24672: DOUBLE
24673: LD_INT 1
24675: DEC
24676: ST_TO_ADDR
24677: LD_INT 4
24679: PUSH
24680: FOR_TO
24681: IFFALSE 24702
// SetSkill ( i , j , 10 ) ;
24683: LD_VAR 0 2
24687: PPUSH
24688: LD_VAR 0 3
24692: PPUSH
24693: LD_INT 10
24695: PPUSH
24696: CALL_OW 237
24700: GO 24680
24702: POP
24703: POP
// end ;
24704: GO 24664
24706: POP
24707: POP
// end ;
24708: LD_VAR 0 1
24712: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24713: LD_INT 0
24715: PPUSH
// uc_side := your_side ;
24716: LD_ADDR_OWVAR 20
24720: PUSH
24721: LD_OWVAR 2
24725: ST_TO_ADDR
// uc_nation := nation ;
24726: LD_ADDR_OWVAR 21
24730: PUSH
24731: LD_VAR 0 1
24735: ST_TO_ADDR
// InitHc ;
24736: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24740: LD_INT 0
24742: PPUSH
24743: LD_VAR 0 2
24747: PPUSH
24748: LD_VAR 0 3
24752: PPUSH
24753: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24757: LD_VAR 0 4
24761: PPUSH
24762: LD_VAR 0 5
24766: PPUSH
24767: CALL_OW 428
24771: PUSH
24772: LD_INT 0
24774: EQUAL
24775: IFFALSE 24799
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24777: CALL_OW 44
24781: PPUSH
24782: LD_VAR 0 4
24786: PPUSH
24787: LD_VAR 0 5
24791: PPUSH
24792: LD_INT 1
24794: PPUSH
24795: CALL_OW 48
// end ;
24799: LD_VAR 0 6
24803: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24804: LD_INT 0
24806: PPUSH
24807: PPUSH
// uc_side := your_side ;
24808: LD_ADDR_OWVAR 20
24812: PUSH
24813: LD_OWVAR 2
24817: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24818: LD_VAR 0 1
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: LD_INT 2
24828: PUSH
24829: LD_INT 3
24831: PUSH
24832: LD_INT 4
24834: PUSH
24835: LD_INT 5
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: IN
24845: IFFALSE 24857
// uc_nation := nation_american else
24847: LD_ADDR_OWVAR 21
24851: PUSH
24852: LD_INT 1
24854: ST_TO_ADDR
24855: GO 24900
// if chassis in [ 11 , 12 , 13 , 14 ] then
24857: LD_VAR 0 1
24861: PUSH
24862: LD_INT 11
24864: PUSH
24865: LD_INT 12
24867: PUSH
24868: LD_INT 13
24870: PUSH
24871: LD_INT 14
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: IN
24880: IFFALSE 24892
// uc_nation := nation_arabian else
24882: LD_ADDR_OWVAR 21
24886: PUSH
24887: LD_INT 2
24889: ST_TO_ADDR
24890: GO 24900
// uc_nation := nation_russian ;
24892: LD_ADDR_OWVAR 21
24896: PUSH
24897: LD_INT 3
24899: ST_TO_ADDR
// vc_chassis := chassis ;
24900: LD_ADDR_OWVAR 37
24904: PUSH
24905: LD_VAR 0 1
24909: ST_TO_ADDR
// vc_engine := engine ;
24910: LD_ADDR_OWVAR 39
24914: PUSH
24915: LD_VAR 0 2
24919: ST_TO_ADDR
// vc_control := control ;
24920: LD_ADDR_OWVAR 38
24924: PUSH
24925: LD_VAR 0 3
24929: ST_TO_ADDR
// vc_weapon := weapon ;
24930: LD_ADDR_OWVAR 40
24934: PUSH
24935: LD_VAR 0 4
24939: ST_TO_ADDR
// un := CreateVehicle ;
24940: LD_ADDR_VAR 0 8
24944: PUSH
24945: CALL_OW 45
24949: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24950: LD_VAR 0 8
24954: PPUSH
24955: LD_INT 0
24957: PPUSH
24958: LD_INT 5
24960: PPUSH
24961: CALL_OW 12
24965: PPUSH
24966: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24970: LD_VAR 0 8
24974: PPUSH
24975: LD_VAR 0 5
24979: PPUSH
24980: LD_VAR 0 6
24984: PPUSH
24985: LD_INT 1
24987: PPUSH
24988: CALL_OW 48
// end ;
24992: LD_VAR 0 7
24996: RET
// export hInvincible ; every 1 do
24997: GO 24999
24999: DISABLE
// hInvincible := [ ] ;
25000: LD_ADDR_EXP 72
25004: PUSH
25005: EMPTY
25006: ST_TO_ADDR
25007: END
// every 10 do var i ;
25008: GO 25010
25010: DISABLE
25011: LD_INT 0
25013: PPUSH
// begin enable ;
25014: ENABLE
// if not hInvincible then
25015: LD_EXP 72
25019: NOT
25020: IFFALSE 25024
// exit ;
25022: GO 25068
// for i in hInvincible do
25024: LD_ADDR_VAR 0 1
25028: PUSH
25029: LD_EXP 72
25033: PUSH
25034: FOR_IN
25035: IFFALSE 25066
// if GetLives ( i ) < 1000 then
25037: LD_VAR 0 1
25041: PPUSH
25042: CALL_OW 256
25046: PUSH
25047: LD_INT 1000
25049: LESS
25050: IFFALSE 25064
// SetLives ( i , 1000 ) ;
25052: LD_VAR 0 1
25056: PPUSH
25057: LD_INT 1000
25059: PPUSH
25060: CALL_OW 234
25064: GO 25034
25066: POP
25067: POP
// end ;
25068: PPOPN 1
25070: END
// export function hHackInvincible ; var i ; begin
25071: LD_INT 0
25073: PPUSH
25074: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25075: LD_ADDR_VAR 0 2
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: LD_INT 21
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 21
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: PPUSH
25108: CALL_OW 69
25112: PUSH
25113: FOR_IN
25114: IFFALSE 25175
// if IsSelected ( i ) then
25116: LD_VAR 0 2
25120: PPUSH
25121: CALL_OW 306
25125: IFFALSE 25173
// begin if i in hInvincible then
25127: LD_VAR 0 2
25131: PUSH
25132: LD_EXP 72
25136: IN
25137: IFFALSE 25157
// hInvincible := hInvincible diff i else
25139: LD_ADDR_EXP 72
25143: PUSH
25144: LD_EXP 72
25148: PUSH
25149: LD_VAR 0 2
25153: DIFF
25154: ST_TO_ADDR
25155: GO 25173
// hInvincible := hInvincible union i ;
25157: LD_ADDR_EXP 72
25161: PUSH
25162: LD_EXP 72
25166: PUSH
25167: LD_VAR 0 2
25171: UNION
25172: ST_TO_ADDR
// end ;
25173: GO 25113
25175: POP
25176: POP
// end ;
25177: LD_VAR 0 1
25181: RET
// export function hHackInvisible ; var i , j ; begin
25182: LD_INT 0
25184: PPUSH
25185: PPUSH
25186: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25187: LD_ADDR_VAR 0 2
25191: PUSH
25192: LD_INT 21
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: PUSH
25207: FOR_IN
25208: IFFALSE 25232
// if IsSelected ( i ) then
25210: LD_VAR 0 2
25214: PPUSH
25215: CALL_OW 306
25219: IFFALSE 25230
// ComForceInvisible ( i ) ;
25221: LD_VAR 0 2
25225: PPUSH
25226: CALL_OW 496
25230: GO 25207
25232: POP
25233: POP
// end ;
25234: LD_VAR 0 1
25238: RET
// export function hHackChangeYourSide ; begin
25239: LD_INT 0
25241: PPUSH
// if your_side = 8 then
25242: LD_OWVAR 2
25246: PUSH
25247: LD_INT 8
25249: EQUAL
25250: IFFALSE 25262
// your_side := 0 else
25252: LD_ADDR_OWVAR 2
25256: PUSH
25257: LD_INT 0
25259: ST_TO_ADDR
25260: GO 25276
// your_side := your_side + 1 ;
25262: LD_ADDR_OWVAR 2
25266: PUSH
25267: LD_OWVAR 2
25271: PUSH
25272: LD_INT 1
25274: PLUS
25275: ST_TO_ADDR
// end ;
25276: LD_VAR 0 1
25280: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25281: LD_INT 0
25283: PPUSH
25284: PPUSH
25285: PPUSH
// for i in all_units do
25286: LD_ADDR_VAR 0 2
25290: PUSH
25291: LD_OWVAR 3
25295: PUSH
25296: FOR_IN
25297: IFFALSE 25375
// if IsSelected ( i ) then
25299: LD_VAR 0 2
25303: PPUSH
25304: CALL_OW 306
25308: IFFALSE 25373
// begin j := GetSide ( i ) ;
25310: LD_ADDR_VAR 0 3
25314: PUSH
25315: LD_VAR 0 2
25319: PPUSH
25320: CALL_OW 255
25324: ST_TO_ADDR
// if j = 8 then
25325: LD_VAR 0 3
25329: PUSH
25330: LD_INT 8
25332: EQUAL
25333: IFFALSE 25345
// j := 0 else
25335: LD_ADDR_VAR 0 3
25339: PUSH
25340: LD_INT 0
25342: ST_TO_ADDR
25343: GO 25359
// j := j + 1 ;
25345: LD_ADDR_VAR 0 3
25349: PUSH
25350: LD_VAR 0 3
25354: PUSH
25355: LD_INT 1
25357: PLUS
25358: ST_TO_ADDR
// SetSide ( i , j ) ;
25359: LD_VAR 0 2
25363: PPUSH
25364: LD_VAR 0 3
25368: PPUSH
25369: CALL_OW 235
// end ;
25373: GO 25296
25375: POP
25376: POP
// end ;
25377: LD_VAR 0 1
25381: RET
// export function hHackFog ; begin
25382: LD_INT 0
25384: PPUSH
// FogOff ( true ) ;
25385: LD_INT 1
25387: PPUSH
25388: CALL_OW 344
// end ;
25392: LD_VAR 0 1
25396: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25397: LD_INT 0
25399: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25400: LD_VAR 0 1
25404: PPUSH
25405: LD_VAR 0 2
25409: PPUSH
25410: LD_VAR 0 3
25414: PPUSH
25415: LD_INT 1
25417: PPUSH
25418: LD_INT 1
25420: PPUSH
25421: CALL_OW 483
// CenterOnXY ( x , y ) ;
25425: LD_VAR 0 2
25429: PPUSH
25430: LD_VAR 0 3
25434: PPUSH
25435: CALL_OW 84
// end ;
25439: LD_VAR 0 4
25443: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25444: LD_INT 0
25446: PPUSH
25447: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25448: LD_VAR 0 1
25452: NOT
25453: PUSH
25454: LD_VAR 0 2
25458: PPUSH
25459: LD_VAR 0 3
25463: PPUSH
25464: CALL_OW 488
25468: NOT
25469: OR
25470: PUSH
25471: LD_VAR 0 1
25475: PPUSH
25476: CALL_OW 266
25480: PUSH
25481: LD_INT 3
25483: NONEQUAL
25484: PUSH
25485: LD_VAR 0 1
25489: PPUSH
25490: CALL_OW 247
25494: PUSH
25495: LD_INT 1
25497: EQUAL
25498: NOT
25499: AND
25500: OR
25501: IFFALSE 25505
// exit ;
25503: GO 25654
// if GetType ( factory ) = unit_human then
25505: LD_VAR 0 1
25509: PPUSH
25510: CALL_OW 247
25514: PUSH
25515: LD_INT 1
25517: EQUAL
25518: IFFALSE 25535
// factory := IsInUnit ( factory ) ;
25520: LD_ADDR_VAR 0 1
25524: PUSH
25525: LD_VAR 0 1
25529: PPUSH
25530: CALL_OW 310
25534: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 266
25544: PUSH
25545: LD_INT 3
25547: NONEQUAL
25548: IFFALSE 25552
// exit ;
25550: GO 25654
// if HexInfo ( x , y ) = factory then
25552: LD_VAR 0 2
25556: PPUSH
25557: LD_VAR 0 3
25561: PPUSH
25562: CALL_OW 428
25566: PUSH
25567: LD_VAR 0 1
25571: EQUAL
25572: IFFALSE 25599
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25574: LD_ADDR_EXP 73
25578: PUSH
25579: LD_EXP 73
25583: PPUSH
25584: LD_VAR 0 1
25588: PPUSH
25589: LD_INT 0
25591: PPUSH
25592: CALL_OW 1
25596: ST_TO_ADDR
25597: GO 25650
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25599: LD_ADDR_EXP 73
25603: PUSH
25604: LD_EXP 73
25608: PPUSH
25609: LD_VAR 0 1
25613: PPUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 255
25623: PUSH
25624: LD_VAR 0 1
25628: PUSH
25629: LD_VAR 0 2
25633: PUSH
25634: LD_VAR 0 3
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: PPUSH
25645: CALL_OW 1
25649: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25650: CALL 25659 0 0
// end ;
25654: LD_VAR 0 4
25658: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25659: LD_INT 0
25661: PPUSH
25662: PPUSH
25663: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25664: LD_STRING resetFactoryWaypoint();
25666: PPUSH
25667: CALL_OW 559
// if factoryWaypoints then
25671: LD_EXP 73
25675: IFFALSE 25801
// begin list := PrepareArray ( factoryWaypoints ) ;
25677: LD_ADDR_VAR 0 3
25681: PUSH
25682: LD_EXP 73
25686: PPUSH
25687: CALL 72943 0 1
25691: ST_TO_ADDR
// for i := 1 to list do
25692: LD_ADDR_VAR 0 2
25696: PUSH
25697: DOUBLE
25698: LD_INT 1
25700: DEC
25701: ST_TO_ADDR
25702: LD_VAR 0 3
25706: PUSH
25707: FOR_TO
25708: IFFALSE 25799
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25710: LD_STRING setFactoryWaypointXY(
25712: PUSH
25713: LD_VAR 0 3
25717: PUSH
25718: LD_VAR 0 2
25722: ARRAY
25723: PUSH
25724: LD_INT 1
25726: ARRAY
25727: STR
25728: PUSH
25729: LD_STRING ,
25731: STR
25732: PUSH
25733: LD_VAR 0 3
25737: PUSH
25738: LD_VAR 0 2
25742: ARRAY
25743: PUSH
25744: LD_INT 2
25746: ARRAY
25747: STR
25748: PUSH
25749: LD_STRING ,
25751: STR
25752: PUSH
25753: LD_VAR 0 3
25757: PUSH
25758: LD_VAR 0 2
25762: ARRAY
25763: PUSH
25764: LD_INT 3
25766: ARRAY
25767: STR
25768: PUSH
25769: LD_STRING ,
25771: STR
25772: PUSH
25773: LD_VAR 0 3
25777: PUSH
25778: LD_VAR 0 2
25782: ARRAY
25783: PUSH
25784: LD_INT 4
25786: ARRAY
25787: STR
25788: PUSH
25789: LD_STRING )
25791: STR
25792: PPUSH
25793: CALL_OW 559
25797: GO 25707
25799: POP
25800: POP
// end ; end ;
25801: LD_VAR 0 1
25805: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25806: LD_INT 0
25808: PPUSH
// if HexInfo ( x , y ) = warehouse then
25809: LD_VAR 0 2
25813: PPUSH
25814: LD_VAR 0 3
25818: PPUSH
25819: CALL_OW 428
25823: PUSH
25824: LD_VAR 0 1
25828: EQUAL
25829: IFFALSE 25856
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25831: LD_ADDR_EXP 74
25835: PUSH
25836: LD_EXP 74
25840: PPUSH
25841: LD_VAR 0 1
25845: PPUSH
25846: LD_INT 0
25848: PPUSH
25849: CALL_OW 1
25853: ST_TO_ADDR
25854: GO 25907
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25856: LD_ADDR_EXP 74
25860: PUSH
25861: LD_EXP 74
25865: PPUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: LD_VAR 0 1
25875: PPUSH
25876: CALL_OW 255
25880: PUSH
25881: LD_VAR 0 1
25885: PUSH
25886: LD_VAR 0 2
25890: PUSH
25891: LD_VAR 0 3
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: PPUSH
25902: CALL_OW 1
25906: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25907: CALL 25916 0 0
// end ;
25911: LD_VAR 0 4
25915: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25916: LD_INT 0
25918: PPUSH
25919: PPUSH
25920: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25921: LD_STRING resetWarehouseGatheringPoints();
25923: PPUSH
25924: CALL_OW 559
// if warehouseGatheringPoints then
25928: LD_EXP 74
25932: IFFALSE 26058
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25934: LD_ADDR_VAR 0 3
25938: PUSH
25939: LD_EXP 74
25943: PPUSH
25944: CALL 72943 0 1
25948: ST_TO_ADDR
// for i := 1 to list do
25949: LD_ADDR_VAR 0 2
25953: PUSH
25954: DOUBLE
25955: LD_INT 1
25957: DEC
25958: ST_TO_ADDR
25959: LD_VAR 0 3
25963: PUSH
25964: FOR_TO
25965: IFFALSE 26056
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25967: LD_STRING setWarehouseGatheringPointXY(
25969: PUSH
25970: LD_VAR 0 3
25974: PUSH
25975: LD_VAR 0 2
25979: ARRAY
25980: PUSH
25981: LD_INT 1
25983: ARRAY
25984: STR
25985: PUSH
25986: LD_STRING ,
25988: STR
25989: PUSH
25990: LD_VAR 0 3
25994: PUSH
25995: LD_VAR 0 2
25999: ARRAY
26000: PUSH
26001: LD_INT 2
26003: ARRAY
26004: STR
26005: PUSH
26006: LD_STRING ,
26008: STR
26009: PUSH
26010: LD_VAR 0 3
26014: PUSH
26015: LD_VAR 0 2
26019: ARRAY
26020: PUSH
26021: LD_INT 3
26023: ARRAY
26024: STR
26025: PUSH
26026: LD_STRING ,
26028: STR
26029: PUSH
26030: LD_VAR 0 3
26034: PUSH
26035: LD_VAR 0 2
26039: ARRAY
26040: PUSH
26041: LD_INT 4
26043: ARRAY
26044: STR
26045: PUSH
26046: LD_STRING )
26048: STR
26049: PPUSH
26050: CALL_OW 559
26054: GO 25964
26056: POP
26057: POP
// end ; end ;
26058: LD_VAR 0 1
26062: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26063: LD_EXP 74
26067: IFFALSE 26752
26069: GO 26071
26071: DISABLE
26072: LD_INT 0
26074: PPUSH
26075: PPUSH
26076: PPUSH
26077: PPUSH
26078: PPUSH
26079: PPUSH
26080: PPUSH
26081: PPUSH
26082: PPUSH
// begin enable ;
26083: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26084: LD_ADDR_VAR 0 3
26088: PUSH
26089: LD_EXP 74
26093: PPUSH
26094: CALL 72943 0 1
26098: ST_TO_ADDR
// if not list then
26099: LD_VAR 0 3
26103: NOT
26104: IFFALSE 26108
// exit ;
26106: GO 26752
// for i := 1 to list do
26108: LD_ADDR_VAR 0 1
26112: PUSH
26113: DOUBLE
26114: LD_INT 1
26116: DEC
26117: ST_TO_ADDR
26118: LD_VAR 0 3
26122: PUSH
26123: FOR_TO
26124: IFFALSE 26750
// begin depot := list [ i ] [ 2 ] ;
26126: LD_ADDR_VAR 0 8
26130: PUSH
26131: LD_VAR 0 3
26135: PUSH
26136: LD_VAR 0 1
26140: ARRAY
26141: PUSH
26142: LD_INT 2
26144: ARRAY
26145: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26146: LD_ADDR_VAR 0 5
26150: PUSH
26151: LD_VAR 0 3
26155: PUSH
26156: LD_VAR 0 1
26160: ARRAY
26161: PUSH
26162: LD_INT 1
26164: ARRAY
26165: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26166: LD_VAR 0 8
26170: PPUSH
26171: CALL_OW 301
26175: PUSH
26176: LD_VAR 0 5
26180: PUSH
26181: LD_VAR 0 8
26185: PPUSH
26186: CALL_OW 255
26190: NONEQUAL
26191: OR
26192: IFFALSE 26221
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26194: LD_ADDR_EXP 74
26198: PUSH
26199: LD_EXP 74
26203: PPUSH
26204: LD_VAR 0 8
26208: PPUSH
26209: LD_INT 0
26211: PPUSH
26212: CALL_OW 1
26216: ST_TO_ADDR
// exit ;
26217: POP
26218: POP
26219: GO 26752
// end ; x := list [ i ] [ 3 ] ;
26221: LD_ADDR_VAR 0 6
26225: PUSH
26226: LD_VAR 0 3
26230: PUSH
26231: LD_VAR 0 1
26235: ARRAY
26236: PUSH
26237: LD_INT 3
26239: ARRAY
26240: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26241: LD_ADDR_VAR 0 7
26245: PUSH
26246: LD_VAR 0 3
26250: PUSH
26251: LD_VAR 0 1
26255: ARRAY
26256: PUSH
26257: LD_INT 4
26259: ARRAY
26260: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26261: LD_ADDR_VAR 0 9
26265: PUSH
26266: LD_VAR 0 6
26270: PPUSH
26271: LD_VAR 0 7
26275: PPUSH
26276: LD_INT 16
26278: PPUSH
26279: CALL 71531 0 3
26283: ST_TO_ADDR
// if not cratesNearbyPoint then
26284: LD_VAR 0 9
26288: NOT
26289: IFFALSE 26295
// exit ;
26291: POP
26292: POP
26293: GO 26752
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26295: LD_ADDR_VAR 0 4
26299: PUSH
26300: LD_INT 22
26302: PUSH
26303: LD_VAR 0 5
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 3
26314: PUSH
26315: LD_INT 60
26317: PUSH
26318: EMPTY
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 91
26327: PUSH
26328: LD_VAR 0 8
26332: PUSH
26333: LD_INT 6
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 2
26343: PUSH
26344: LD_INT 25
26346: PUSH
26347: LD_INT 2
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 25
26356: PUSH
26357: LD_INT 16
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: LIST
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: PPUSH
26375: CALL_OW 69
26379: PUSH
26380: LD_VAR 0 8
26384: PPUSH
26385: CALL_OW 313
26389: PPUSH
26390: LD_INT 3
26392: PUSH
26393: LD_INT 60
26395: PUSH
26396: EMPTY
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: LD_INT 25
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 25
26418: PUSH
26419: LD_INT 16
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PPUSH
26435: CALL_OW 72
26439: UNION
26440: ST_TO_ADDR
// if tmp then
26441: LD_VAR 0 4
26445: IFFALSE 26525
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26447: LD_ADDR_VAR 0 4
26451: PUSH
26452: LD_VAR 0 4
26456: PPUSH
26457: LD_INT 3
26459: PPUSH
26460: CALL 69500 0 2
26464: ST_TO_ADDR
// for j in tmp do
26465: LD_ADDR_VAR 0 2
26469: PUSH
26470: LD_VAR 0 4
26474: PUSH
26475: FOR_IN
26476: IFFALSE 26519
// begin if IsInUnit ( j ) then
26478: LD_VAR 0 2
26482: PPUSH
26483: CALL_OW 310
26487: IFFALSE 26498
// ComExit ( j ) ;
26489: LD_VAR 0 2
26493: PPUSH
26494: CALL 69583 0 1
// AddComCollect ( j , x , y ) ;
26498: LD_VAR 0 2
26502: PPUSH
26503: LD_VAR 0 6
26507: PPUSH
26508: LD_VAR 0 7
26512: PPUSH
26513: CALL_OW 177
// end ;
26517: GO 26475
26519: POP
26520: POP
// exit ;
26521: POP
26522: POP
26523: GO 26752
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26525: LD_ADDR_VAR 0 4
26529: PUSH
26530: LD_INT 22
26532: PUSH
26533: LD_VAR 0 5
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 91
26544: PUSH
26545: LD_VAR 0 8
26549: PUSH
26550: LD_INT 8
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: LD_INT 34
26563: PUSH
26564: LD_INT 12
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 34
26573: PUSH
26574: LD_INT 51
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 34
26583: PUSH
26584: LD_INT 32
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 34
26593: PUSH
26594: LD_INT 89
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: PPUSH
26613: CALL_OW 69
26617: ST_TO_ADDR
// if tmp then
26618: LD_VAR 0 4
26622: IFFALSE 26748
// begin for j in tmp do
26624: LD_ADDR_VAR 0 2
26628: PUSH
26629: LD_VAR 0 4
26633: PUSH
26634: FOR_IN
26635: IFFALSE 26746
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26637: LD_VAR 0 2
26641: PPUSH
26642: CALL_OW 262
26646: PUSH
26647: LD_INT 3
26649: EQUAL
26650: PUSH
26651: LD_VAR 0 2
26655: PPUSH
26656: CALL_OW 261
26660: PUSH
26661: LD_INT 20
26663: GREATER
26664: OR
26665: PUSH
26666: LD_VAR 0 2
26670: PPUSH
26671: CALL_OW 314
26675: NOT
26676: AND
26677: PUSH
26678: LD_VAR 0 2
26682: PPUSH
26683: CALL_OW 263
26687: PUSH
26688: LD_INT 1
26690: NONEQUAL
26691: PUSH
26692: LD_VAR 0 2
26696: PPUSH
26697: CALL_OW 311
26701: OR
26702: AND
26703: IFFALSE 26744
// begin ComCollect ( j , x , y ) ;
26705: LD_VAR 0 2
26709: PPUSH
26710: LD_VAR 0 6
26714: PPUSH
26715: LD_VAR 0 7
26719: PPUSH
26720: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26724: LD_VAR 0 2
26728: PPUSH
26729: LD_VAR 0 8
26733: PPUSH
26734: CALL_OW 172
// exit ;
26738: POP
26739: POP
26740: POP
26741: POP
26742: GO 26752
// end ;
26744: GO 26634
26746: POP
26747: POP
// end ; end ;
26748: GO 26123
26750: POP
26751: POP
// end ; end_of_file
26752: PPOPN 9
26754: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL_OW 264
26770: PUSH
26771: LD_INT 91
26773: EQUAL
26774: IFFALSE 26846
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26776: LD_INT 68
26778: PPUSH
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL_OW 255
26788: PPUSH
26789: CALL_OW 321
26793: PUSH
26794: LD_INT 2
26796: EQUAL
26797: IFFALSE 26809
// eff := 70 else
26799: LD_ADDR_VAR 0 4
26803: PUSH
26804: LD_INT 70
26806: ST_TO_ADDR
26807: GO 26817
// eff := 30 ;
26809: LD_ADDR_VAR 0 4
26813: PUSH
26814: LD_INT 30
26816: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL_OW 250
26826: PPUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 251
26836: PPUSH
26837: LD_VAR 0 4
26841: PPUSH
26842: CALL_OW 495
// end ; end ;
26846: LD_VAR 0 2
26850: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26851: LD_INT 0
26853: PPUSH
// end ;
26854: LD_VAR 0 4
26858: RET
// export function SOS_Command ( cmd ) ; begin
26859: LD_INT 0
26861: PPUSH
// end ;
26862: LD_VAR 0 2
26866: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26867: LD_INT 0
26869: PPUSH
// end ;
26870: LD_VAR 0 6
26874: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26875: LD_INT 0
26877: PPUSH
26878: PPUSH
// if not vehicle or not factory then
26879: LD_VAR 0 1
26883: NOT
26884: PUSH
26885: LD_VAR 0 2
26889: NOT
26890: OR
26891: IFFALSE 26895
// exit ;
26893: GO 27126
// if factoryWaypoints >= factory then
26895: LD_EXP 73
26899: PUSH
26900: LD_VAR 0 2
26904: GREATEREQUAL
26905: IFFALSE 27126
// if factoryWaypoints [ factory ] then
26907: LD_EXP 73
26911: PUSH
26912: LD_VAR 0 2
26916: ARRAY
26917: IFFALSE 27126
// begin if GetControl ( vehicle ) = control_manual then
26919: LD_VAR 0 1
26923: PPUSH
26924: CALL_OW 263
26928: PUSH
26929: LD_INT 1
26931: EQUAL
26932: IFFALSE 27013
// begin driver := IsDrivenBy ( vehicle ) ;
26934: LD_ADDR_VAR 0 4
26938: PUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 311
26948: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26949: LD_VAR 0 4
26953: PPUSH
26954: LD_EXP 73
26958: PUSH
26959: LD_VAR 0 2
26963: ARRAY
26964: PUSH
26965: LD_INT 3
26967: ARRAY
26968: PPUSH
26969: LD_EXP 73
26973: PUSH
26974: LD_VAR 0 2
26978: ARRAY
26979: PUSH
26980: LD_INT 4
26982: ARRAY
26983: PPUSH
26984: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26988: LD_VAR 0 4
26992: PPUSH
26993: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26997: LD_VAR 0 4
27001: PPUSH
27002: LD_VAR 0 2
27006: PPUSH
27007: CALL_OW 180
// end else
27011: GO 27126
// if GetControl ( vehicle ) = control_remote then
27013: LD_VAR 0 1
27017: PPUSH
27018: CALL_OW 263
27022: PUSH
27023: LD_INT 2
27025: EQUAL
27026: IFFALSE 27087
// begin wait ( 0 0$2 ) ;
27028: LD_INT 70
27030: PPUSH
27031: CALL_OW 67
// if Connect ( vehicle ) then
27035: LD_VAR 0 1
27039: PPUSH
27040: CALL 39791 0 1
27044: IFFALSE 27085
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27046: LD_VAR 0 1
27050: PPUSH
27051: LD_EXP 73
27055: PUSH
27056: LD_VAR 0 2
27060: ARRAY
27061: PUSH
27062: LD_INT 3
27064: ARRAY
27065: PPUSH
27066: LD_EXP 73
27070: PUSH
27071: LD_VAR 0 2
27075: ARRAY
27076: PUSH
27077: LD_INT 4
27079: ARRAY
27080: PPUSH
27081: CALL_OW 171
// end else
27085: GO 27126
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27087: LD_VAR 0 1
27091: PPUSH
27092: LD_EXP 73
27096: PUSH
27097: LD_VAR 0 2
27101: ARRAY
27102: PUSH
27103: LD_INT 3
27105: ARRAY
27106: PPUSH
27107: LD_EXP 73
27111: PUSH
27112: LD_VAR 0 2
27116: ARRAY
27117: PUSH
27118: LD_INT 4
27120: ARRAY
27121: PPUSH
27122: CALL_OW 171
// end ; end ;
27126: LD_VAR 0 3
27130: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27131: LD_INT 0
27133: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27134: LD_VAR 0 1
27138: PUSH
27139: LD_INT 250
27141: EQUAL
27142: PUSH
27143: LD_VAR 0 2
27147: PPUSH
27148: CALL_OW 264
27152: PUSH
27153: LD_INT 81
27155: EQUAL
27156: AND
27157: IFFALSE 27178
// MinerPlaceMine ( unit , x , y ) ;
27159: LD_VAR 0 2
27163: PPUSH
27164: LD_VAR 0 4
27168: PPUSH
27169: LD_VAR 0 5
27173: PPUSH
27174: CALL 30002 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27178: LD_VAR 0 1
27182: PUSH
27183: LD_INT 251
27185: EQUAL
27186: PUSH
27187: LD_VAR 0 2
27191: PPUSH
27192: CALL_OW 264
27196: PUSH
27197: LD_INT 81
27199: EQUAL
27200: AND
27201: IFFALSE 27222
// MinerDetonateMine ( unit , x , y ) ;
27203: LD_VAR 0 2
27207: PPUSH
27208: LD_VAR 0 4
27212: PPUSH
27213: LD_VAR 0 5
27217: PPUSH
27218: CALL 30277 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27222: LD_VAR 0 1
27226: PUSH
27227: LD_INT 252
27229: EQUAL
27230: PUSH
27231: LD_VAR 0 2
27235: PPUSH
27236: CALL_OW 264
27240: PUSH
27241: LD_INT 81
27243: EQUAL
27244: AND
27245: IFFALSE 27266
// MinerCreateMinefield ( unit , x , y ) ;
27247: LD_VAR 0 2
27251: PPUSH
27252: LD_VAR 0 4
27256: PPUSH
27257: LD_VAR 0 5
27261: PPUSH
27262: CALL 30694 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27266: LD_VAR 0 1
27270: PUSH
27271: LD_INT 253
27273: EQUAL
27274: PUSH
27275: LD_VAR 0 2
27279: PPUSH
27280: CALL_OW 257
27284: PUSH
27285: LD_INT 5
27287: EQUAL
27288: AND
27289: IFFALSE 27310
// ComBinocular ( unit , x , y ) ;
27291: LD_VAR 0 2
27295: PPUSH
27296: LD_VAR 0 4
27300: PPUSH
27301: LD_VAR 0 5
27305: PPUSH
27306: CALL 31063 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27310: LD_VAR 0 1
27314: PUSH
27315: LD_INT 254
27317: EQUAL
27318: PUSH
27319: LD_VAR 0 2
27323: PPUSH
27324: CALL_OW 264
27328: PUSH
27329: LD_INT 99
27331: EQUAL
27332: AND
27333: PUSH
27334: LD_VAR 0 3
27338: PPUSH
27339: CALL_OW 263
27343: PUSH
27344: LD_INT 3
27346: EQUAL
27347: AND
27348: IFFALSE 27364
// HackDestroyVehicle ( unit , selectedUnit ) ;
27350: LD_VAR 0 2
27354: PPUSH
27355: LD_VAR 0 3
27359: PPUSH
27360: CALL 29366 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27364: LD_VAR 0 1
27368: PUSH
27369: LD_INT 255
27371: EQUAL
27372: PUSH
27373: LD_VAR 0 2
27377: PPUSH
27378: CALL_OW 264
27382: PUSH
27383: LD_INT 14
27385: PUSH
27386: LD_INT 53
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: IN
27393: AND
27394: PUSH
27395: LD_VAR 0 4
27399: PPUSH
27400: LD_VAR 0 5
27404: PPUSH
27405: CALL_OW 488
27409: AND
27410: IFFALSE 27434
// CutTreeXYR ( unit , x , y , 12 ) ;
27412: LD_VAR 0 2
27416: PPUSH
27417: LD_VAR 0 4
27421: PPUSH
27422: LD_VAR 0 5
27426: PPUSH
27427: LD_INT 12
27429: PPUSH
27430: CALL 27529 0 4
// if cmd = 256 then
27434: LD_VAR 0 1
27438: PUSH
27439: LD_INT 256
27441: EQUAL
27442: IFFALSE 27463
// SetFactoryWaypoint ( unit , x , y ) ;
27444: LD_VAR 0 2
27448: PPUSH
27449: LD_VAR 0 4
27453: PPUSH
27454: LD_VAR 0 5
27458: PPUSH
27459: CALL 25444 0 3
// if cmd = 257 then
27463: LD_VAR 0 1
27467: PUSH
27468: LD_INT 257
27470: EQUAL
27471: IFFALSE 27492
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27473: LD_VAR 0 2
27477: PPUSH
27478: LD_VAR 0 4
27482: PPUSH
27483: LD_VAR 0 5
27487: PPUSH
27488: CALL 25806 0 3
// if cmd = 258 then
27492: LD_VAR 0 1
27496: PUSH
27497: LD_INT 258
27499: EQUAL
27500: IFFALSE 27524
// BurnTreeXYR ( unit , x , y , 8 ) ;
27502: LD_VAR 0 2
27506: PPUSH
27507: LD_VAR 0 4
27511: PPUSH
27512: LD_VAR 0 5
27516: PPUSH
27517: LD_INT 8
27519: PPUSH
27520: CALL 27923 0 4
// end ;
27524: LD_VAR 0 6
27528: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27529: LD_INT 0
27531: PPUSH
27532: PPUSH
27533: PPUSH
27534: PPUSH
27535: PPUSH
27536: PPUSH
27537: PPUSH
27538: PPUSH
27539: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27540: LD_VAR 0 1
27544: PPUSH
27545: CALL_OW 302
27549: NOT
27550: PUSH
27551: LD_VAR 0 2
27555: PPUSH
27556: LD_VAR 0 3
27560: PPUSH
27561: CALL_OW 488
27565: NOT
27566: OR
27567: PUSH
27568: LD_VAR 0 4
27572: NOT
27573: OR
27574: IFFALSE 27578
// exit ;
27576: GO 27918
// list := [ ] ;
27578: LD_ADDR_VAR 0 13
27582: PUSH
27583: EMPTY
27584: ST_TO_ADDR
// if x - r < 0 then
27585: LD_VAR 0 2
27589: PUSH
27590: LD_VAR 0 4
27594: MINUS
27595: PUSH
27596: LD_INT 0
27598: LESS
27599: IFFALSE 27611
// min_x := 0 else
27601: LD_ADDR_VAR 0 7
27605: PUSH
27606: LD_INT 0
27608: ST_TO_ADDR
27609: GO 27627
// min_x := x - r ;
27611: LD_ADDR_VAR 0 7
27615: PUSH
27616: LD_VAR 0 2
27620: PUSH
27621: LD_VAR 0 4
27625: MINUS
27626: ST_TO_ADDR
// if y - r < 0 then
27627: LD_VAR 0 3
27631: PUSH
27632: LD_VAR 0 4
27636: MINUS
27637: PUSH
27638: LD_INT 0
27640: LESS
27641: IFFALSE 27653
// min_y := 0 else
27643: LD_ADDR_VAR 0 8
27647: PUSH
27648: LD_INT 0
27650: ST_TO_ADDR
27651: GO 27669
// min_y := y - r ;
27653: LD_ADDR_VAR 0 8
27657: PUSH
27658: LD_VAR 0 3
27662: PUSH
27663: LD_VAR 0 4
27667: MINUS
27668: ST_TO_ADDR
// max_x := x + r ;
27669: LD_ADDR_VAR 0 9
27673: PUSH
27674: LD_VAR 0 2
27678: PUSH
27679: LD_VAR 0 4
27683: PLUS
27684: ST_TO_ADDR
// max_y := y + r ;
27685: LD_ADDR_VAR 0 10
27689: PUSH
27690: LD_VAR 0 3
27694: PUSH
27695: LD_VAR 0 4
27699: PLUS
27700: ST_TO_ADDR
// for _x = min_x to max_x do
27701: LD_ADDR_VAR 0 11
27705: PUSH
27706: DOUBLE
27707: LD_VAR 0 7
27711: DEC
27712: ST_TO_ADDR
27713: LD_VAR 0 9
27717: PUSH
27718: FOR_TO
27719: IFFALSE 27836
// for _y = min_y to max_y do
27721: LD_ADDR_VAR 0 12
27725: PUSH
27726: DOUBLE
27727: LD_VAR 0 8
27731: DEC
27732: ST_TO_ADDR
27733: LD_VAR 0 10
27737: PUSH
27738: FOR_TO
27739: IFFALSE 27832
// begin if not ValidHex ( _x , _y ) then
27741: LD_VAR 0 11
27745: PPUSH
27746: LD_VAR 0 12
27750: PPUSH
27751: CALL_OW 488
27755: NOT
27756: IFFALSE 27760
// continue ;
27758: GO 27738
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27760: LD_VAR 0 11
27764: PPUSH
27765: LD_VAR 0 12
27769: PPUSH
27770: CALL_OW 351
27774: PUSH
27775: LD_VAR 0 11
27779: PPUSH
27780: LD_VAR 0 12
27784: PPUSH
27785: CALL_OW 554
27789: AND
27790: IFFALSE 27830
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27792: LD_ADDR_VAR 0 13
27796: PUSH
27797: LD_VAR 0 13
27801: PPUSH
27802: LD_VAR 0 13
27806: PUSH
27807: LD_INT 1
27809: PLUS
27810: PPUSH
27811: LD_VAR 0 11
27815: PUSH
27816: LD_VAR 0 12
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PPUSH
27825: CALL_OW 2
27829: ST_TO_ADDR
// end ;
27830: GO 27738
27832: POP
27833: POP
27834: GO 27718
27836: POP
27837: POP
// if not list then
27838: LD_VAR 0 13
27842: NOT
27843: IFFALSE 27847
// exit ;
27845: GO 27918
// for i in list do
27847: LD_ADDR_VAR 0 6
27851: PUSH
27852: LD_VAR 0 13
27856: PUSH
27857: FOR_IN
27858: IFFALSE 27916
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27860: LD_VAR 0 1
27864: PPUSH
27865: LD_STRING M
27867: PUSH
27868: LD_VAR 0 6
27872: PUSH
27873: LD_INT 1
27875: ARRAY
27876: PUSH
27877: LD_VAR 0 6
27881: PUSH
27882: LD_INT 2
27884: ARRAY
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: PUSH
27907: EMPTY
27908: LIST
27909: PPUSH
27910: CALL_OW 447
27914: GO 27857
27916: POP
27917: POP
// end ;
27918: LD_VAR 0 5
27922: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27923: LD_INT 0
27925: PPUSH
27926: PPUSH
27927: PPUSH
27928: PPUSH
27929: PPUSH
27930: PPUSH
27931: PPUSH
27932: PPUSH
27933: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27934: LD_VAR 0 1
27938: PPUSH
27939: CALL_OW 302
27943: NOT
27944: PUSH
27945: LD_VAR 0 2
27949: PPUSH
27950: LD_VAR 0 3
27954: PPUSH
27955: CALL_OW 488
27959: NOT
27960: OR
27961: PUSH
27962: LD_VAR 0 4
27966: NOT
27967: OR
27968: IFFALSE 27972
// exit ;
27970: GO 28320
// list := [ ] ;
27972: LD_ADDR_VAR 0 13
27976: PUSH
27977: EMPTY
27978: ST_TO_ADDR
// if x - r < 0 then
27979: LD_VAR 0 2
27983: PUSH
27984: LD_VAR 0 4
27988: MINUS
27989: PUSH
27990: LD_INT 0
27992: LESS
27993: IFFALSE 28005
// min_x := 0 else
27995: LD_ADDR_VAR 0 7
27999: PUSH
28000: LD_INT 0
28002: ST_TO_ADDR
28003: GO 28021
// min_x := x - r ;
28005: LD_ADDR_VAR 0 7
28009: PUSH
28010: LD_VAR 0 2
28014: PUSH
28015: LD_VAR 0 4
28019: MINUS
28020: ST_TO_ADDR
// if y - r < 0 then
28021: LD_VAR 0 3
28025: PUSH
28026: LD_VAR 0 4
28030: MINUS
28031: PUSH
28032: LD_INT 0
28034: LESS
28035: IFFALSE 28047
// min_y := 0 else
28037: LD_ADDR_VAR 0 8
28041: PUSH
28042: LD_INT 0
28044: ST_TO_ADDR
28045: GO 28063
// min_y := y - r ;
28047: LD_ADDR_VAR 0 8
28051: PUSH
28052: LD_VAR 0 3
28056: PUSH
28057: LD_VAR 0 4
28061: MINUS
28062: ST_TO_ADDR
// max_x := x + r ;
28063: LD_ADDR_VAR 0 9
28067: PUSH
28068: LD_VAR 0 2
28072: PUSH
28073: LD_VAR 0 4
28077: PLUS
28078: ST_TO_ADDR
// max_y := y + r ;
28079: LD_ADDR_VAR 0 10
28083: PUSH
28084: LD_VAR 0 3
28088: PUSH
28089: LD_VAR 0 4
28093: PLUS
28094: ST_TO_ADDR
// for _x = min_x to max_x do
28095: LD_ADDR_VAR 0 11
28099: PUSH
28100: DOUBLE
28101: LD_VAR 0 7
28105: DEC
28106: ST_TO_ADDR
28107: LD_VAR 0 9
28111: PUSH
28112: FOR_TO
28113: IFFALSE 28230
// for _y = min_y to max_y do
28115: LD_ADDR_VAR 0 12
28119: PUSH
28120: DOUBLE
28121: LD_VAR 0 8
28125: DEC
28126: ST_TO_ADDR
28127: LD_VAR 0 10
28131: PUSH
28132: FOR_TO
28133: IFFALSE 28226
// begin if not ValidHex ( _x , _y ) then
28135: LD_VAR 0 11
28139: PPUSH
28140: LD_VAR 0 12
28144: PPUSH
28145: CALL_OW 488
28149: NOT
28150: IFFALSE 28154
// continue ;
28152: GO 28132
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28154: LD_VAR 0 11
28158: PPUSH
28159: LD_VAR 0 12
28163: PPUSH
28164: CALL_OW 351
28168: PUSH
28169: LD_VAR 0 11
28173: PPUSH
28174: LD_VAR 0 12
28178: PPUSH
28179: CALL_OW 554
28183: AND
28184: IFFALSE 28224
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28186: LD_ADDR_VAR 0 13
28190: PUSH
28191: LD_VAR 0 13
28195: PPUSH
28196: LD_VAR 0 13
28200: PUSH
28201: LD_INT 1
28203: PLUS
28204: PPUSH
28205: LD_VAR 0 11
28209: PUSH
28210: LD_VAR 0 12
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PPUSH
28219: CALL_OW 2
28223: ST_TO_ADDR
// end ;
28224: GO 28132
28226: POP
28227: POP
28228: GO 28112
28230: POP
28231: POP
// if not list then
28232: LD_VAR 0 13
28236: NOT
28237: IFFALSE 28241
// exit ;
28239: GO 28320
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28241: LD_ADDR_VAR 0 13
28245: PUSH
28246: LD_VAR 0 1
28250: PPUSH
28251: LD_VAR 0 13
28255: PPUSH
28256: LD_INT 1
28258: PPUSH
28259: LD_INT 1
28261: PPUSH
28262: CALL 36933 0 4
28266: ST_TO_ADDR
// ComStop ( flame ) ;
28267: LD_VAR 0 1
28271: PPUSH
28272: CALL_OW 141
// for i in list do
28276: LD_ADDR_VAR 0 6
28280: PUSH
28281: LD_VAR 0 13
28285: PUSH
28286: FOR_IN
28287: IFFALSE 28318
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28289: LD_VAR 0 1
28293: PPUSH
28294: LD_VAR 0 6
28298: PUSH
28299: LD_INT 1
28301: ARRAY
28302: PPUSH
28303: LD_VAR 0 6
28307: PUSH
28308: LD_INT 2
28310: ARRAY
28311: PPUSH
28312: CALL_OW 176
28316: GO 28286
28318: POP
28319: POP
// end ;
28320: LD_VAR 0 5
28324: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28325: LD_EXP 76
28329: NOT
28330: IFFALSE 28380
28332: GO 28334
28334: DISABLE
// begin initHack := true ;
28335: LD_ADDR_EXP 76
28339: PUSH
28340: LD_INT 1
28342: ST_TO_ADDR
// hackTanks := [ ] ;
28343: LD_ADDR_EXP 77
28347: PUSH
28348: EMPTY
28349: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28350: LD_ADDR_EXP 78
28354: PUSH
28355: EMPTY
28356: ST_TO_ADDR
// hackLimit := 3 ;
28357: LD_ADDR_EXP 79
28361: PUSH
28362: LD_INT 3
28364: ST_TO_ADDR
// hackDist := 12 ;
28365: LD_ADDR_EXP 80
28369: PUSH
28370: LD_INT 12
28372: ST_TO_ADDR
// hackCounter := [ ] ;
28373: LD_ADDR_EXP 81
28377: PUSH
28378: EMPTY
28379: ST_TO_ADDR
// end ;
28380: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28381: LD_EXP 76
28385: PUSH
28386: LD_INT 34
28388: PUSH
28389: LD_INT 99
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PPUSH
28396: CALL_OW 69
28400: AND
28401: IFFALSE 28654
28403: GO 28405
28405: DISABLE
28406: LD_INT 0
28408: PPUSH
28409: PPUSH
// begin enable ;
28410: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28411: LD_ADDR_VAR 0 1
28415: PUSH
28416: LD_INT 34
28418: PUSH
28419: LD_INT 99
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PPUSH
28426: CALL_OW 69
28430: PUSH
28431: FOR_IN
28432: IFFALSE 28652
// begin if not i in hackTanks then
28434: LD_VAR 0 1
28438: PUSH
28439: LD_EXP 77
28443: IN
28444: NOT
28445: IFFALSE 28528
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28447: LD_ADDR_EXP 77
28451: PUSH
28452: LD_EXP 77
28456: PPUSH
28457: LD_EXP 77
28461: PUSH
28462: LD_INT 1
28464: PLUS
28465: PPUSH
28466: LD_VAR 0 1
28470: PPUSH
28471: CALL_OW 1
28475: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28476: LD_ADDR_EXP 78
28480: PUSH
28481: LD_EXP 78
28485: PPUSH
28486: LD_EXP 78
28490: PUSH
28491: LD_INT 1
28493: PLUS
28494: PPUSH
28495: EMPTY
28496: PPUSH
28497: CALL_OW 1
28501: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28502: LD_ADDR_EXP 81
28506: PUSH
28507: LD_EXP 81
28511: PPUSH
28512: LD_EXP 81
28516: PUSH
28517: LD_INT 1
28519: PLUS
28520: PPUSH
28521: EMPTY
28522: PPUSH
28523: CALL_OW 1
28527: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 302
28537: NOT
28538: IFFALSE 28551
// begin HackUnlinkAll ( i ) ;
28540: LD_VAR 0 1
28544: PPUSH
28545: CALL 28657 0 1
// continue ;
28549: GO 28431
// end ; HackCheckCapturedStatus ( i ) ;
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL 29100 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28560: LD_ADDR_VAR 0 2
28564: PUSH
28565: LD_INT 81
28567: PUSH
28568: LD_VAR 0 1
28572: PPUSH
28573: CALL_OW 255
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 33
28584: PUSH
28585: LD_INT 3
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 91
28594: PUSH
28595: LD_VAR 0 1
28599: PUSH
28600: LD_EXP 80
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 50
28612: PUSH
28613: EMPTY
28614: LIST
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: PPUSH
28622: CALL_OW 69
28626: ST_TO_ADDR
// if not tmp then
28627: LD_VAR 0 2
28631: NOT
28632: IFFALSE 28636
// continue ;
28634: GO 28431
// HackLink ( i , tmp ) ;
28636: LD_VAR 0 1
28640: PPUSH
28641: LD_VAR 0 2
28645: PPUSH
28646: CALL 28793 0 2
// end ;
28650: GO 28431
28652: POP
28653: POP
// end ;
28654: PPOPN 2
28656: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28657: LD_INT 0
28659: PPUSH
28660: PPUSH
28661: PPUSH
// if not hack in hackTanks then
28662: LD_VAR 0 1
28666: PUSH
28667: LD_EXP 77
28671: IN
28672: NOT
28673: IFFALSE 28677
// exit ;
28675: GO 28788
// index := GetElementIndex ( hackTanks , hack ) ;
28677: LD_ADDR_VAR 0 4
28681: PUSH
28682: LD_EXP 77
28686: PPUSH
28687: LD_VAR 0 1
28691: PPUSH
28692: CALL 36230 0 2
28696: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28697: LD_EXP 78
28701: PUSH
28702: LD_VAR 0 4
28706: ARRAY
28707: IFFALSE 28788
// begin for i in hackTanksCaptured [ index ] do
28709: LD_ADDR_VAR 0 3
28713: PUSH
28714: LD_EXP 78
28718: PUSH
28719: LD_VAR 0 4
28723: ARRAY
28724: PUSH
28725: FOR_IN
28726: IFFALSE 28752
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28728: LD_VAR 0 3
28732: PUSH
28733: LD_INT 1
28735: ARRAY
28736: PPUSH
28737: LD_VAR 0 3
28741: PUSH
28742: LD_INT 2
28744: ARRAY
28745: PPUSH
28746: CALL_OW 235
28750: GO 28725
28752: POP
28753: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28754: LD_ADDR_EXP 78
28758: PUSH
28759: LD_EXP 78
28763: PPUSH
28764: LD_VAR 0 4
28768: PPUSH
28769: EMPTY
28770: PPUSH
28771: CALL_OW 1
28775: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28776: LD_VAR 0 1
28780: PPUSH
28781: LD_INT 0
28783: PPUSH
28784: CALL_OW 505
// end ; end ;
28788: LD_VAR 0 2
28792: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28793: LD_INT 0
28795: PPUSH
28796: PPUSH
28797: PPUSH
// if not hack in hackTanks or not vehicles then
28798: LD_VAR 0 1
28802: PUSH
28803: LD_EXP 77
28807: IN
28808: NOT
28809: PUSH
28810: LD_VAR 0 2
28814: NOT
28815: OR
28816: IFFALSE 28820
// exit ;
28818: GO 29095
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28820: LD_ADDR_VAR 0 2
28824: PUSH
28825: LD_VAR 0 1
28829: PPUSH
28830: LD_VAR 0 2
28834: PPUSH
28835: LD_INT 1
28837: PPUSH
28838: LD_INT 1
28840: PPUSH
28841: CALL 36880 0 4
28845: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28846: LD_ADDR_VAR 0 5
28850: PUSH
28851: LD_EXP 77
28855: PPUSH
28856: LD_VAR 0 1
28860: PPUSH
28861: CALL 36230 0 2
28865: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28866: LD_EXP 78
28870: PUSH
28871: LD_VAR 0 5
28875: ARRAY
28876: PUSH
28877: LD_EXP 79
28881: LESS
28882: IFFALSE 29071
// begin for i := 1 to vehicles do
28884: LD_ADDR_VAR 0 4
28888: PUSH
28889: DOUBLE
28890: LD_INT 1
28892: DEC
28893: ST_TO_ADDR
28894: LD_VAR 0 2
28898: PUSH
28899: FOR_TO
28900: IFFALSE 29069
// begin if hackTanksCaptured [ index ] = hackLimit then
28902: LD_EXP 78
28906: PUSH
28907: LD_VAR 0 5
28911: ARRAY
28912: PUSH
28913: LD_EXP 79
28917: EQUAL
28918: IFFALSE 28922
// break ;
28920: GO 29069
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28922: LD_ADDR_EXP 81
28926: PUSH
28927: LD_EXP 81
28931: PPUSH
28932: LD_VAR 0 5
28936: PPUSH
28937: LD_EXP 81
28941: PUSH
28942: LD_VAR 0 5
28946: ARRAY
28947: PUSH
28948: LD_INT 1
28950: PLUS
28951: PPUSH
28952: CALL_OW 1
28956: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28957: LD_ADDR_EXP 78
28961: PUSH
28962: LD_EXP 78
28966: PPUSH
28967: LD_VAR 0 5
28971: PUSH
28972: LD_EXP 78
28976: PUSH
28977: LD_VAR 0 5
28981: ARRAY
28982: PUSH
28983: LD_INT 1
28985: PLUS
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PPUSH
28991: LD_VAR 0 2
28995: PUSH
28996: LD_VAR 0 4
29000: ARRAY
29001: PUSH
29002: LD_VAR 0 2
29006: PUSH
29007: LD_VAR 0 4
29011: ARRAY
29012: PPUSH
29013: CALL_OW 255
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PPUSH
29022: CALL 36445 0 3
29026: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29027: LD_VAR 0 2
29031: PUSH
29032: LD_VAR 0 4
29036: ARRAY
29037: PPUSH
29038: LD_VAR 0 1
29042: PPUSH
29043: CALL_OW 255
29047: PPUSH
29048: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29052: LD_VAR 0 2
29056: PUSH
29057: LD_VAR 0 4
29061: ARRAY
29062: PPUSH
29063: CALL_OW 141
// end ;
29067: GO 28899
29069: POP
29070: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29071: LD_VAR 0 1
29075: PPUSH
29076: LD_EXP 78
29080: PUSH
29081: LD_VAR 0 5
29085: ARRAY
29086: PUSH
29087: LD_INT 0
29089: PLUS
29090: PPUSH
29091: CALL_OW 505
// end ;
29095: LD_VAR 0 3
29099: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29100: LD_INT 0
29102: PPUSH
29103: PPUSH
29104: PPUSH
29105: PPUSH
// if not hack in hackTanks then
29106: LD_VAR 0 1
29110: PUSH
29111: LD_EXP 77
29115: IN
29116: NOT
29117: IFFALSE 29121
// exit ;
29119: GO 29361
// index := GetElementIndex ( hackTanks , hack ) ;
29121: LD_ADDR_VAR 0 4
29125: PUSH
29126: LD_EXP 77
29130: PPUSH
29131: LD_VAR 0 1
29135: PPUSH
29136: CALL 36230 0 2
29140: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29141: LD_ADDR_VAR 0 3
29145: PUSH
29146: DOUBLE
29147: LD_EXP 78
29151: PUSH
29152: LD_VAR 0 4
29156: ARRAY
29157: INC
29158: ST_TO_ADDR
29159: LD_INT 1
29161: PUSH
29162: FOR_DOWNTO
29163: IFFALSE 29335
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29165: LD_ADDR_VAR 0 5
29169: PUSH
29170: LD_EXP 78
29174: PUSH
29175: LD_VAR 0 4
29179: ARRAY
29180: PUSH
29181: LD_VAR 0 3
29185: ARRAY
29186: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29187: LD_VAR 0 5
29191: PUSH
29192: LD_INT 1
29194: ARRAY
29195: PPUSH
29196: CALL_OW 302
29200: NOT
29201: PUSH
29202: LD_VAR 0 5
29206: PUSH
29207: LD_INT 1
29209: ARRAY
29210: PPUSH
29211: CALL_OW 255
29215: PUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 255
29225: NONEQUAL
29226: OR
29227: IFFALSE 29333
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29229: LD_VAR 0 5
29233: PUSH
29234: LD_INT 1
29236: ARRAY
29237: PPUSH
29238: CALL_OW 305
29242: PUSH
29243: LD_VAR 0 5
29247: PUSH
29248: LD_INT 1
29250: ARRAY
29251: PPUSH
29252: CALL_OW 255
29256: PUSH
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL_OW 255
29266: EQUAL
29267: AND
29268: IFFALSE 29292
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29270: LD_VAR 0 5
29274: PUSH
29275: LD_INT 1
29277: ARRAY
29278: PPUSH
29279: LD_VAR 0 5
29283: PUSH
29284: LD_INT 2
29286: ARRAY
29287: PPUSH
29288: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29292: LD_ADDR_EXP 78
29296: PUSH
29297: LD_EXP 78
29301: PPUSH
29302: LD_VAR 0 4
29306: PPUSH
29307: LD_EXP 78
29311: PUSH
29312: LD_VAR 0 4
29316: ARRAY
29317: PPUSH
29318: LD_VAR 0 3
29322: PPUSH
29323: CALL_OW 3
29327: PPUSH
29328: CALL_OW 1
29332: ST_TO_ADDR
// end ; end ;
29333: GO 29162
29335: POP
29336: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29337: LD_VAR 0 1
29341: PPUSH
29342: LD_EXP 78
29346: PUSH
29347: LD_VAR 0 4
29351: ARRAY
29352: PUSH
29353: LD_INT 0
29355: PLUS
29356: PPUSH
29357: CALL_OW 505
// end ;
29361: LD_VAR 0 2
29365: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29366: LD_INT 0
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
// if not hack in hackTanks then
29372: LD_VAR 0 1
29376: PUSH
29377: LD_EXP 77
29381: IN
29382: NOT
29383: IFFALSE 29387
// exit ;
29385: GO 29472
// index := GetElementIndex ( hackTanks , hack ) ;
29387: LD_ADDR_VAR 0 5
29391: PUSH
29392: LD_EXP 77
29396: PPUSH
29397: LD_VAR 0 1
29401: PPUSH
29402: CALL 36230 0 2
29406: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29407: LD_ADDR_VAR 0 4
29411: PUSH
29412: DOUBLE
29413: LD_INT 1
29415: DEC
29416: ST_TO_ADDR
29417: LD_EXP 78
29421: PUSH
29422: LD_VAR 0 5
29426: ARRAY
29427: PUSH
29428: FOR_TO
29429: IFFALSE 29470
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29431: LD_EXP 78
29435: PUSH
29436: LD_VAR 0 5
29440: ARRAY
29441: PUSH
29442: LD_VAR 0 4
29446: ARRAY
29447: PUSH
29448: LD_INT 1
29450: ARRAY
29451: PUSH
29452: LD_VAR 0 2
29456: EQUAL
29457: IFFALSE 29468
// KillUnit ( vehicle ) ;
29459: LD_VAR 0 2
29463: PPUSH
29464: CALL_OW 66
29468: GO 29428
29470: POP
29471: POP
// end ;
29472: LD_VAR 0 3
29476: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29477: LD_EXP 82
29481: NOT
29482: IFFALSE 29517
29484: GO 29486
29486: DISABLE
// begin initMiner := true ;
29487: LD_ADDR_EXP 82
29491: PUSH
29492: LD_INT 1
29494: ST_TO_ADDR
// minersList := [ ] ;
29495: LD_ADDR_EXP 83
29499: PUSH
29500: EMPTY
29501: ST_TO_ADDR
// minerMinesList := [ ] ;
29502: LD_ADDR_EXP 84
29506: PUSH
29507: EMPTY
29508: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29509: LD_ADDR_EXP 85
29513: PUSH
29514: LD_INT 5
29516: ST_TO_ADDR
// end ;
29517: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29518: LD_EXP 82
29522: PUSH
29523: LD_INT 34
29525: PUSH
29526: LD_INT 81
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PPUSH
29533: CALL_OW 69
29537: AND
29538: IFFALSE 29999
29540: GO 29542
29542: DISABLE
29543: LD_INT 0
29545: PPUSH
29546: PPUSH
29547: PPUSH
29548: PPUSH
// begin enable ;
29549: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29550: LD_ADDR_VAR 0 1
29554: PUSH
29555: LD_INT 34
29557: PUSH
29558: LD_INT 81
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PPUSH
29565: CALL_OW 69
29569: PUSH
29570: FOR_IN
29571: IFFALSE 29643
// begin if not i in minersList then
29573: LD_VAR 0 1
29577: PUSH
29578: LD_EXP 83
29582: IN
29583: NOT
29584: IFFALSE 29641
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29586: LD_ADDR_EXP 83
29590: PUSH
29591: LD_EXP 83
29595: PPUSH
29596: LD_EXP 83
29600: PUSH
29601: LD_INT 1
29603: PLUS
29604: PPUSH
29605: LD_VAR 0 1
29609: PPUSH
29610: CALL_OW 1
29614: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29615: LD_ADDR_EXP 84
29619: PUSH
29620: LD_EXP 84
29624: PPUSH
29625: LD_EXP 84
29629: PUSH
29630: LD_INT 1
29632: PLUS
29633: PPUSH
29634: EMPTY
29635: PPUSH
29636: CALL_OW 1
29640: ST_TO_ADDR
// end end ;
29641: GO 29570
29643: POP
29644: POP
// for i := minerMinesList downto 1 do
29645: LD_ADDR_VAR 0 1
29649: PUSH
29650: DOUBLE
29651: LD_EXP 84
29655: INC
29656: ST_TO_ADDR
29657: LD_INT 1
29659: PUSH
29660: FOR_DOWNTO
29661: IFFALSE 29997
// begin if IsLive ( minersList [ i ] ) then
29663: LD_EXP 83
29667: PUSH
29668: LD_VAR 0 1
29672: ARRAY
29673: PPUSH
29674: CALL_OW 300
29678: IFFALSE 29706
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29680: LD_EXP 83
29684: PUSH
29685: LD_VAR 0 1
29689: ARRAY
29690: PPUSH
29691: LD_EXP 84
29695: PUSH
29696: LD_VAR 0 1
29700: ARRAY
29701: PPUSH
29702: CALL_OW 505
// if not minerMinesList [ i ] then
29706: LD_EXP 84
29710: PUSH
29711: LD_VAR 0 1
29715: ARRAY
29716: NOT
29717: IFFALSE 29721
// continue ;
29719: GO 29660
// for j := minerMinesList [ i ] downto 1 do
29721: LD_ADDR_VAR 0 2
29725: PUSH
29726: DOUBLE
29727: LD_EXP 84
29731: PUSH
29732: LD_VAR 0 1
29736: ARRAY
29737: INC
29738: ST_TO_ADDR
29739: LD_INT 1
29741: PUSH
29742: FOR_DOWNTO
29743: IFFALSE 29993
// begin side := GetSide ( minersList [ i ] ) ;
29745: LD_ADDR_VAR 0 3
29749: PUSH
29750: LD_EXP 83
29754: PUSH
29755: LD_VAR 0 1
29759: ARRAY
29760: PPUSH
29761: CALL_OW 255
29765: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29766: LD_ADDR_VAR 0 4
29770: PUSH
29771: LD_EXP 84
29775: PUSH
29776: LD_VAR 0 1
29780: ARRAY
29781: PUSH
29782: LD_VAR 0 2
29786: ARRAY
29787: PUSH
29788: LD_INT 1
29790: ARRAY
29791: PPUSH
29792: LD_EXP 84
29796: PUSH
29797: LD_VAR 0 1
29801: ARRAY
29802: PUSH
29803: LD_VAR 0 2
29807: ARRAY
29808: PUSH
29809: LD_INT 2
29811: ARRAY
29812: PPUSH
29813: CALL_OW 428
29817: ST_TO_ADDR
// if not tmp then
29818: LD_VAR 0 4
29822: NOT
29823: IFFALSE 29827
// continue ;
29825: GO 29742
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29827: LD_VAR 0 4
29831: PUSH
29832: LD_INT 81
29834: PUSH
29835: LD_VAR 0 3
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PPUSH
29844: CALL_OW 69
29848: IN
29849: PUSH
29850: LD_EXP 84
29854: PUSH
29855: LD_VAR 0 1
29859: ARRAY
29860: PUSH
29861: LD_VAR 0 2
29865: ARRAY
29866: PUSH
29867: LD_INT 1
29869: ARRAY
29870: PPUSH
29871: LD_EXP 84
29875: PUSH
29876: LD_VAR 0 1
29880: ARRAY
29881: PUSH
29882: LD_VAR 0 2
29886: ARRAY
29887: PUSH
29888: LD_INT 2
29890: ARRAY
29891: PPUSH
29892: CALL_OW 458
29896: AND
29897: IFFALSE 29991
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29899: LD_EXP 84
29903: PUSH
29904: LD_VAR 0 1
29908: ARRAY
29909: PUSH
29910: LD_VAR 0 2
29914: ARRAY
29915: PUSH
29916: LD_INT 1
29918: ARRAY
29919: PPUSH
29920: LD_EXP 84
29924: PUSH
29925: LD_VAR 0 1
29929: ARRAY
29930: PUSH
29931: LD_VAR 0 2
29935: ARRAY
29936: PUSH
29937: LD_INT 2
29939: ARRAY
29940: PPUSH
29941: LD_VAR 0 3
29945: PPUSH
29946: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29950: LD_ADDR_EXP 84
29954: PUSH
29955: LD_EXP 84
29959: PPUSH
29960: LD_VAR 0 1
29964: PPUSH
29965: LD_EXP 84
29969: PUSH
29970: LD_VAR 0 1
29974: ARRAY
29975: PPUSH
29976: LD_VAR 0 2
29980: PPUSH
29981: CALL_OW 3
29985: PPUSH
29986: CALL_OW 1
29990: ST_TO_ADDR
// end ; end ;
29991: GO 29742
29993: POP
29994: POP
// end ;
29995: GO 29660
29997: POP
29998: POP
// end ;
29999: PPOPN 4
30001: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30002: LD_INT 0
30004: PPUSH
30005: PPUSH
// result := false ;
30006: LD_ADDR_VAR 0 4
30010: PUSH
30011: LD_INT 0
30013: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30014: LD_VAR 0 1
30018: PPUSH
30019: CALL_OW 264
30023: PUSH
30024: LD_INT 81
30026: EQUAL
30027: NOT
30028: IFFALSE 30032
// exit ;
30030: GO 30272
// index := GetElementIndex ( minersList , unit ) ;
30032: LD_ADDR_VAR 0 5
30036: PUSH
30037: LD_EXP 83
30041: PPUSH
30042: LD_VAR 0 1
30046: PPUSH
30047: CALL 36230 0 2
30051: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30052: LD_EXP 84
30056: PUSH
30057: LD_VAR 0 5
30061: ARRAY
30062: PUSH
30063: LD_EXP 85
30067: GREATEREQUAL
30068: IFFALSE 30072
// exit ;
30070: GO 30272
// ComMoveXY ( unit , x , y ) ;
30072: LD_VAR 0 1
30076: PPUSH
30077: LD_VAR 0 2
30081: PPUSH
30082: LD_VAR 0 3
30086: PPUSH
30087: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30091: LD_INT 35
30093: PPUSH
30094: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30098: LD_VAR 0 1
30102: PPUSH
30103: LD_VAR 0 2
30107: PPUSH
30108: LD_VAR 0 3
30112: PPUSH
30113: CALL 67982 0 3
30117: NOT
30118: PUSH
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 314
30128: AND
30129: IFFALSE 30133
// exit ;
30131: GO 30272
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30133: LD_VAR 0 2
30137: PPUSH
30138: LD_VAR 0 3
30142: PPUSH
30143: CALL_OW 428
30147: PUSH
30148: LD_VAR 0 1
30152: EQUAL
30153: PUSH
30154: LD_VAR 0 1
30158: PPUSH
30159: CALL_OW 314
30163: NOT
30164: AND
30165: IFFALSE 30091
// PlaySoundXY ( x , y , PlantMine ) ;
30167: LD_VAR 0 2
30171: PPUSH
30172: LD_VAR 0 3
30176: PPUSH
30177: LD_STRING PlantMine
30179: PPUSH
30180: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30184: LD_VAR 0 2
30188: PPUSH
30189: LD_VAR 0 3
30193: PPUSH
30194: LD_VAR 0 1
30198: PPUSH
30199: CALL_OW 255
30203: PPUSH
30204: LD_INT 0
30206: PPUSH
30207: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30211: LD_ADDR_EXP 84
30215: PUSH
30216: LD_EXP 84
30220: PPUSH
30221: LD_VAR 0 5
30225: PUSH
30226: LD_EXP 84
30230: PUSH
30231: LD_VAR 0 5
30235: ARRAY
30236: PUSH
30237: LD_INT 1
30239: PLUS
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PPUSH
30245: LD_VAR 0 2
30249: PUSH
30250: LD_VAR 0 3
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PPUSH
30259: CALL 36445 0 3
30263: ST_TO_ADDR
// result := true ;
30264: LD_ADDR_VAR 0 4
30268: PUSH
30269: LD_INT 1
30271: ST_TO_ADDR
// end ;
30272: LD_VAR 0 4
30276: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30277: LD_INT 0
30279: PPUSH
30280: PPUSH
30281: PPUSH
// if not unit in minersList then
30282: LD_VAR 0 1
30286: PUSH
30287: LD_EXP 83
30291: IN
30292: NOT
30293: IFFALSE 30297
// exit ;
30295: GO 30689
// index := GetElementIndex ( minersList , unit ) ;
30297: LD_ADDR_VAR 0 6
30301: PUSH
30302: LD_EXP 83
30306: PPUSH
30307: LD_VAR 0 1
30311: PPUSH
30312: CALL 36230 0 2
30316: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30317: LD_ADDR_VAR 0 5
30321: PUSH
30322: DOUBLE
30323: LD_EXP 84
30327: PUSH
30328: LD_VAR 0 6
30332: ARRAY
30333: INC
30334: ST_TO_ADDR
30335: LD_INT 1
30337: PUSH
30338: FOR_DOWNTO
30339: IFFALSE 30500
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30341: LD_EXP 84
30345: PUSH
30346: LD_VAR 0 6
30350: ARRAY
30351: PUSH
30352: LD_VAR 0 5
30356: ARRAY
30357: PUSH
30358: LD_INT 1
30360: ARRAY
30361: PUSH
30362: LD_VAR 0 2
30366: EQUAL
30367: PUSH
30368: LD_EXP 84
30372: PUSH
30373: LD_VAR 0 6
30377: ARRAY
30378: PUSH
30379: LD_VAR 0 5
30383: ARRAY
30384: PUSH
30385: LD_INT 2
30387: ARRAY
30388: PUSH
30389: LD_VAR 0 3
30393: EQUAL
30394: AND
30395: IFFALSE 30498
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30397: LD_EXP 84
30401: PUSH
30402: LD_VAR 0 6
30406: ARRAY
30407: PUSH
30408: LD_VAR 0 5
30412: ARRAY
30413: PUSH
30414: LD_INT 1
30416: ARRAY
30417: PPUSH
30418: LD_EXP 84
30422: PUSH
30423: LD_VAR 0 6
30427: ARRAY
30428: PUSH
30429: LD_VAR 0 5
30433: ARRAY
30434: PUSH
30435: LD_INT 2
30437: ARRAY
30438: PPUSH
30439: LD_VAR 0 1
30443: PPUSH
30444: CALL_OW 255
30448: PPUSH
30449: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30453: LD_ADDR_EXP 84
30457: PUSH
30458: LD_EXP 84
30462: PPUSH
30463: LD_VAR 0 6
30467: PPUSH
30468: LD_EXP 84
30472: PUSH
30473: LD_VAR 0 6
30477: ARRAY
30478: PPUSH
30479: LD_VAR 0 5
30483: PPUSH
30484: CALL_OW 3
30488: PPUSH
30489: CALL_OW 1
30493: ST_TO_ADDR
// exit ;
30494: POP
30495: POP
30496: GO 30689
// end ; end ;
30498: GO 30338
30500: POP
30501: POP
// for i := minerMinesList [ index ] downto 1 do
30502: LD_ADDR_VAR 0 5
30506: PUSH
30507: DOUBLE
30508: LD_EXP 84
30512: PUSH
30513: LD_VAR 0 6
30517: ARRAY
30518: INC
30519: ST_TO_ADDR
30520: LD_INT 1
30522: PUSH
30523: FOR_DOWNTO
30524: IFFALSE 30687
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30526: LD_EXP 84
30530: PUSH
30531: LD_VAR 0 6
30535: ARRAY
30536: PUSH
30537: LD_VAR 0 5
30541: ARRAY
30542: PUSH
30543: LD_INT 1
30545: ARRAY
30546: PPUSH
30547: LD_EXP 84
30551: PUSH
30552: LD_VAR 0 6
30556: ARRAY
30557: PUSH
30558: LD_VAR 0 5
30562: ARRAY
30563: PUSH
30564: LD_INT 2
30566: ARRAY
30567: PPUSH
30568: LD_VAR 0 2
30572: PPUSH
30573: LD_VAR 0 3
30577: PPUSH
30578: CALL_OW 298
30582: PUSH
30583: LD_INT 6
30585: LESS
30586: IFFALSE 30685
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30588: LD_EXP 84
30592: PUSH
30593: LD_VAR 0 6
30597: ARRAY
30598: PUSH
30599: LD_VAR 0 5
30603: ARRAY
30604: PUSH
30605: LD_INT 1
30607: ARRAY
30608: PPUSH
30609: LD_EXP 84
30613: PUSH
30614: LD_VAR 0 6
30618: ARRAY
30619: PUSH
30620: LD_VAR 0 5
30624: ARRAY
30625: PUSH
30626: LD_INT 2
30628: ARRAY
30629: PPUSH
30630: LD_VAR 0 1
30634: PPUSH
30635: CALL_OW 255
30639: PPUSH
30640: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30644: LD_ADDR_EXP 84
30648: PUSH
30649: LD_EXP 84
30653: PPUSH
30654: LD_VAR 0 6
30658: PPUSH
30659: LD_EXP 84
30663: PUSH
30664: LD_VAR 0 6
30668: ARRAY
30669: PPUSH
30670: LD_VAR 0 5
30674: PPUSH
30675: CALL_OW 3
30679: PPUSH
30680: CALL_OW 1
30684: ST_TO_ADDR
// end ; end ;
30685: GO 30523
30687: POP
30688: POP
// end ;
30689: LD_VAR 0 4
30693: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30694: LD_INT 0
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30705: LD_VAR 0 1
30709: PPUSH
30710: CALL_OW 264
30714: PUSH
30715: LD_INT 81
30717: EQUAL
30718: NOT
30719: PUSH
30720: LD_VAR 0 1
30724: PUSH
30725: LD_EXP 83
30729: IN
30730: NOT
30731: OR
30732: IFFALSE 30736
// exit ;
30734: GO 31058
// index := GetElementIndex ( minersList , unit ) ;
30736: LD_ADDR_VAR 0 6
30740: PUSH
30741: LD_EXP 83
30745: PPUSH
30746: LD_VAR 0 1
30750: PPUSH
30751: CALL 36230 0 2
30755: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30756: LD_ADDR_VAR 0 8
30760: PUSH
30761: LD_EXP 85
30765: PUSH
30766: LD_EXP 84
30770: PUSH
30771: LD_VAR 0 6
30775: ARRAY
30776: MINUS
30777: ST_TO_ADDR
// if not minesFreeAmount then
30778: LD_VAR 0 8
30782: NOT
30783: IFFALSE 30787
// exit ;
30785: GO 31058
// tmp := [ ] ;
30787: LD_ADDR_VAR 0 7
30791: PUSH
30792: EMPTY
30793: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30794: LD_ADDR_VAR 0 5
30798: PUSH
30799: DOUBLE
30800: LD_INT 1
30802: DEC
30803: ST_TO_ADDR
30804: LD_VAR 0 8
30808: PUSH
30809: FOR_TO
30810: IFFALSE 31005
// begin _d := rand ( 0 , 5 ) ;
30812: LD_ADDR_VAR 0 11
30816: PUSH
30817: LD_INT 0
30819: PPUSH
30820: LD_INT 5
30822: PPUSH
30823: CALL_OW 12
30827: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30828: LD_ADDR_VAR 0 12
30832: PUSH
30833: LD_INT 2
30835: PPUSH
30836: LD_INT 6
30838: PPUSH
30839: CALL_OW 12
30843: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30844: LD_ADDR_VAR 0 9
30848: PUSH
30849: LD_VAR 0 2
30853: PPUSH
30854: LD_VAR 0 11
30858: PPUSH
30859: LD_VAR 0 12
30863: PPUSH
30864: CALL_OW 272
30868: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30869: LD_ADDR_VAR 0 10
30873: PUSH
30874: LD_VAR 0 3
30878: PPUSH
30879: LD_VAR 0 11
30883: PPUSH
30884: LD_VAR 0 12
30888: PPUSH
30889: CALL_OW 273
30893: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30894: LD_VAR 0 9
30898: PPUSH
30899: LD_VAR 0 10
30903: PPUSH
30904: CALL_OW 488
30908: PUSH
30909: LD_VAR 0 9
30913: PUSH
30914: LD_VAR 0 10
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_VAR 0 7
30927: IN
30928: NOT
30929: AND
30930: PUSH
30931: LD_VAR 0 9
30935: PPUSH
30936: LD_VAR 0 10
30940: PPUSH
30941: CALL_OW 458
30945: NOT
30946: AND
30947: IFFALSE 30989
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30949: LD_ADDR_VAR 0 7
30953: PUSH
30954: LD_VAR 0 7
30958: PPUSH
30959: LD_VAR 0 7
30963: PUSH
30964: LD_INT 1
30966: PLUS
30967: PPUSH
30968: LD_VAR 0 9
30972: PUSH
30973: LD_VAR 0 10
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PPUSH
30982: CALL_OW 1
30986: ST_TO_ADDR
30987: GO 31003
// i := i - 1 ;
30989: LD_ADDR_VAR 0 5
30993: PUSH
30994: LD_VAR 0 5
30998: PUSH
30999: LD_INT 1
31001: MINUS
31002: ST_TO_ADDR
// end ;
31003: GO 30809
31005: POP
31006: POP
// for i in tmp do
31007: LD_ADDR_VAR 0 5
31011: PUSH
31012: LD_VAR 0 7
31016: PUSH
31017: FOR_IN
31018: IFFALSE 31056
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31020: LD_VAR 0 1
31024: PPUSH
31025: LD_VAR 0 5
31029: PUSH
31030: LD_INT 1
31032: ARRAY
31033: PPUSH
31034: LD_VAR 0 5
31038: PUSH
31039: LD_INT 2
31041: ARRAY
31042: PPUSH
31043: CALL 30002 0 3
31047: NOT
31048: IFFALSE 31054
// exit ;
31050: POP
31051: POP
31052: GO 31058
31054: GO 31017
31056: POP
31057: POP
// end ;
31058: LD_VAR 0 4
31062: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31063: LD_INT 0
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
// if not GetClass ( unit ) = class_sniper then
31072: LD_VAR 0 1
31076: PPUSH
31077: CALL_OW 257
31081: PUSH
31082: LD_INT 5
31084: EQUAL
31085: NOT
31086: IFFALSE 31090
// exit ;
31088: GO 31478
// dist := 8 ;
31090: LD_ADDR_VAR 0 5
31094: PUSH
31095: LD_INT 8
31097: ST_TO_ADDR
// viewRange := 12 ;
31098: LD_ADDR_VAR 0 7
31102: PUSH
31103: LD_INT 12
31105: ST_TO_ADDR
// side := GetSide ( unit ) ;
31106: LD_ADDR_VAR 0 6
31110: PUSH
31111: LD_VAR 0 1
31115: PPUSH
31116: CALL_OW 255
31120: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31121: LD_INT 61
31123: PPUSH
31124: LD_VAR 0 6
31128: PPUSH
31129: CALL_OW 321
31133: PUSH
31134: LD_INT 2
31136: EQUAL
31137: IFFALSE 31147
// viewRange := 16 ;
31139: LD_ADDR_VAR 0 7
31143: PUSH
31144: LD_INT 16
31146: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31147: LD_VAR 0 1
31151: PPUSH
31152: LD_VAR 0 2
31156: PPUSH
31157: LD_VAR 0 3
31161: PPUSH
31162: CALL_OW 297
31166: PUSH
31167: LD_VAR 0 5
31171: GREATER
31172: IFFALSE 31251
// begin ComMoveXY ( unit , x , y ) ;
31174: LD_VAR 0 1
31178: PPUSH
31179: LD_VAR 0 2
31183: PPUSH
31184: LD_VAR 0 3
31188: PPUSH
31189: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31193: LD_INT 35
31195: PPUSH
31196: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31200: LD_VAR 0 1
31204: PPUSH
31205: LD_VAR 0 2
31209: PPUSH
31210: LD_VAR 0 3
31214: PPUSH
31215: CALL 67982 0 3
31219: NOT
31220: IFFALSE 31224
// exit ;
31222: GO 31478
// until GetDistUnitXY ( unit , x , y ) < dist ;
31224: LD_VAR 0 1
31228: PPUSH
31229: LD_VAR 0 2
31233: PPUSH
31234: LD_VAR 0 3
31238: PPUSH
31239: CALL_OW 297
31243: PUSH
31244: LD_VAR 0 5
31248: LESS
31249: IFFALSE 31193
// end ; ComTurnXY ( unit , x , y ) ;
31251: LD_VAR 0 1
31255: PPUSH
31256: LD_VAR 0 2
31260: PPUSH
31261: LD_VAR 0 3
31265: PPUSH
31266: CALL_OW 118
// wait ( 5 ) ;
31270: LD_INT 5
31272: PPUSH
31273: CALL_OW 67
// _d := GetDir ( unit ) ;
31277: LD_ADDR_VAR 0 10
31281: PUSH
31282: LD_VAR 0 1
31286: PPUSH
31287: CALL_OW 254
31291: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31292: LD_ADDR_VAR 0 8
31296: PUSH
31297: LD_VAR 0 1
31301: PPUSH
31302: CALL_OW 250
31306: PPUSH
31307: LD_VAR 0 10
31311: PPUSH
31312: LD_VAR 0 5
31316: PPUSH
31317: CALL_OW 272
31321: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31322: LD_ADDR_VAR 0 9
31326: PUSH
31327: LD_VAR 0 1
31331: PPUSH
31332: CALL_OW 251
31336: PPUSH
31337: LD_VAR 0 10
31341: PPUSH
31342: LD_VAR 0 5
31346: PPUSH
31347: CALL_OW 273
31351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31352: LD_VAR 0 8
31356: PPUSH
31357: LD_VAR 0 9
31361: PPUSH
31362: CALL_OW 488
31366: NOT
31367: IFFALSE 31371
// exit ;
31369: GO 31478
// ComAnimCustom ( unit , 1 ) ;
31371: LD_VAR 0 1
31375: PPUSH
31376: LD_INT 1
31378: PPUSH
31379: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31383: LD_VAR 0 8
31387: PPUSH
31388: LD_VAR 0 9
31392: PPUSH
31393: LD_VAR 0 6
31397: PPUSH
31398: LD_VAR 0 7
31402: PPUSH
31403: CALL_OW 330
// repeat wait ( 1 ) ;
31407: LD_INT 1
31409: PPUSH
31410: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31414: LD_VAR 0 1
31418: PPUSH
31419: CALL_OW 316
31423: PUSH
31424: LD_VAR 0 1
31428: PPUSH
31429: CALL_OW 314
31433: OR
31434: PUSH
31435: LD_VAR 0 1
31439: PPUSH
31440: CALL_OW 302
31444: NOT
31445: OR
31446: PUSH
31447: LD_VAR 0 1
31451: PPUSH
31452: CALL_OW 301
31456: OR
31457: IFFALSE 31407
// RemoveSeeing ( _x , _y , side ) ;
31459: LD_VAR 0 8
31463: PPUSH
31464: LD_VAR 0 9
31468: PPUSH
31469: LD_VAR 0 6
31473: PPUSH
31474: CALL_OW 331
// end ; end_of_file
31478: LD_VAR 0 4
31482: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31483: LD_INT 0
31485: PPUSH
31486: PPUSH
// if exist_mode then
31487: LD_VAR 0 2
31491: IFFALSE 31516
// unit := CreateCharacter ( prefix & ident ) else
31493: LD_ADDR_VAR 0 5
31497: PUSH
31498: LD_VAR 0 3
31502: PUSH
31503: LD_VAR 0 1
31507: STR
31508: PPUSH
31509: CALL_OW 34
31513: ST_TO_ADDR
31514: GO 31531
// unit := NewCharacter ( ident ) ;
31516: LD_ADDR_VAR 0 5
31520: PUSH
31521: LD_VAR 0 1
31525: PPUSH
31526: CALL_OW 25
31530: ST_TO_ADDR
// result := unit ;
31531: LD_ADDR_VAR 0 4
31535: PUSH
31536: LD_VAR 0 5
31540: ST_TO_ADDR
// end ;
31541: LD_VAR 0 4
31545: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31546: LD_INT 0
31548: PPUSH
31549: PPUSH
// if not side or not nation then
31550: LD_VAR 0 1
31554: NOT
31555: PUSH
31556: LD_VAR 0 2
31560: NOT
31561: OR
31562: IFFALSE 31566
// exit ;
31564: GO 32334
// case nation of nation_american :
31566: LD_VAR 0 2
31570: PUSH
31571: LD_INT 1
31573: DOUBLE
31574: EQUAL
31575: IFTRUE 31579
31577: GO 31793
31579: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31580: LD_ADDR_VAR 0 4
31584: PUSH
31585: LD_INT 35
31587: PUSH
31588: LD_INT 45
31590: PUSH
31591: LD_INT 46
31593: PUSH
31594: LD_INT 47
31596: PUSH
31597: LD_INT 82
31599: PUSH
31600: LD_INT 83
31602: PUSH
31603: LD_INT 84
31605: PUSH
31606: LD_INT 85
31608: PUSH
31609: LD_INT 86
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 6
31620: PUSH
31621: LD_INT 15
31623: PUSH
31624: LD_INT 16
31626: PUSH
31627: LD_INT 7
31629: PUSH
31630: LD_INT 12
31632: PUSH
31633: LD_INT 13
31635: PUSH
31636: LD_INT 10
31638: PUSH
31639: LD_INT 14
31641: PUSH
31642: LD_INT 20
31644: PUSH
31645: LD_INT 21
31647: PUSH
31648: LD_INT 22
31650: PUSH
31651: LD_INT 25
31653: PUSH
31654: LD_INT 32
31656: PUSH
31657: LD_INT 27
31659: PUSH
31660: LD_INT 36
31662: PUSH
31663: LD_INT 69
31665: PUSH
31666: LD_INT 39
31668: PUSH
31669: LD_INT 34
31671: PUSH
31672: LD_INT 40
31674: PUSH
31675: LD_INT 48
31677: PUSH
31678: LD_INT 49
31680: PUSH
31681: LD_INT 50
31683: PUSH
31684: LD_INT 51
31686: PUSH
31687: LD_INT 52
31689: PUSH
31690: LD_INT 53
31692: PUSH
31693: LD_INT 54
31695: PUSH
31696: LD_INT 55
31698: PUSH
31699: LD_INT 56
31701: PUSH
31702: LD_INT 57
31704: PUSH
31705: LD_INT 58
31707: PUSH
31708: LD_INT 59
31710: PUSH
31711: LD_INT 60
31713: PUSH
31714: LD_INT 61
31716: PUSH
31717: LD_INT 62
31719: PUSH
31720: LD_INT 80
31722: PUSH
31723: LD_INT 82
31725: PUSH
31726: LD_INT 83
31728: PUSH
31729: LD_INT 84
31731: PUSH
31732: LD_INT 85
31734: PUSH
31735: LD_INT 86
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
31791: GO 32258
31793: LD_INT 2
31795: DOUBLE
31796: EQUAL
31797: IFTRUE 31801
31799: GO 32027
31801: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31802: LD_ADDR_VAR 0 4
31806: PUSH
31807: LD_INT 35
31809: PUSH
31810: LD_INT 45
31812: PUSH
31813: LD_INT 46
31815: PUSH
31816: LD_INT 47
31818: PUSH
31819: LD_INT 82
31821: PUSH
31822: LD_INT 83
31824: PUSH
31825: LD_INT 84
31827: PUSH
31828: LD_INT 85
31830: PUSH
31831: LD_INT 87
31833: PUSH
31834: LD_INT 70
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 11
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: LD_INT 4
31848: PUSH
31849: LD_INT 5
31851: PUSH
31852: LD_INT 6
31854: PUSH
31855: LD_INT 15
31857: PUSH
31858: LD_INT 18
31860: PUSH
31861: LD_INT 7
31863: PUSH
31864: LD_INT 17
31866: PUSH
31867: LD_INT 8
31869: PUSH
31870: LD_INT 20
31872: PUSH
31873: LD_INT 21
31875: PUSH
31876: LD_INT 22
31878: PUSH
31879: LD_INT 72
31881: PUSH
31882: LD_INT 26
31884: PUSH
31885: LD_INT 69
31887: PUSH
31888: LD_INT 39
31890: PUSH
31891: LD_INT 40
31893: PUSH
31894: LD_INT 41
31896: PUSH
31897: LD_INT 42
31899: PUSH
31900: LD_INT 43
31902: PUSH
31903: LD_INT 48
31905: PUSH
31906: LD_INT 49
31908: PUSH
31909: LD_INT 50
31911: PUSH
31912: LD_INT 51
31914: PUSH
31915: LD_INT 52
31917: PUSH
31918: LD_INT 53
31920: PUSH
31921: LD_INT 54
31923: PUSH
31924: LD_INT 55
31926: PUSH
31927: LD_INT 56
31929: PUSH
31930: LD_INT 60
31932: PUSH
31933: LD_INT 61
31935: PUSH
31936: LD_INT 62
31938: PUSH
31939: LD_INT 66
31941: PUSH
31942: LD_INT 67
31944: PUSH
31945: LD_INT 68
31947: PUSH
31948: LD_INT 81
31950: PUSH
31951: LD_INT 82
31953: PUSH
31954: LD_INT 83
31956: PUSH
31957: LD_INT 84
31959: PUSH
31960: LD_INT 85
31962: PUSH
31963: LD_INT 87
31965: PUSH
31966: LD_INT 88
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: ST_TO_ADDR
32025: GO 32258
32027: LD_INT 3
32029: DOUBLE
32030: EQUAL
32031: IFTRUE 32035
32033: GO 32257
32035: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32036: LD_ADDR_VAR 0 4
32040: PUSH
32041: LD_INT 46
32043: PUSH
32044: LD_INT 47
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 82
32055: PUSH
32056: LD_INT 83
32058: PUSH
32059: LD_INT 84
32061: PUSH
32062: LD_INT 85
32064: PUSH
32065: LD_INT 86
32067: PUSH
32068: LD_INT 11
32070: PUSH
32071: LD_INT 9
32073: PUSH
32074: LD_INT 20
32076: PUSH
32077: LD_INT 19
32079: PUSH
32080: LD_INT 21
32082: PUSH
32083: LD_INT 24
32085: PUSH
32086: LD_INT 22
32088: PUSH
32089: LD_INT 25
32091: PUSH
32092: LD_INT 28
32094: PUSH
32095: LD_INT 29
32097: PUSH
32098: LD_INT 30
32100: PUSH
32101: LD_INT 31
32103: PUSH
32104: LD_INT 37
32106: PUSH
32107: LD_INT 38
32109: PUSH
32110: LD_INT 32
32112: PUSH
32113: LD_INT 27
32115: PUSH
32116: LD_INT 33
32118: PUSH
32119: LD_INT 69
32121: PUSH
32122: LD_INT 39
32124: PUSH
32125: LD_INT 34
32127: PUSH
32128: LD_INT 40
32130: PUSH
32131: LD_INT 71
32133: PUSH
32134: LD_INT 23
32136: PUSH
32137: LD_INT 44
32139: PUSH
32140: LD_INT 48
32142: PUSH
32143: LD_INT 49
32145: PUSH
32146: LD_INT 50
32148: PUSH
32149: LD_INT 51
32151: PUSH
32152: LD_INT 52
32154: PUSH
32155: LD_INT 53
32157: PUSH
32158: LD_INT 54
32160: PUSH
32161: LD_INT 55
32163: PUSH
32164: LD_INT 56
32166: PUSH
32167: LD_INT 57
32169: PUSH
32170: LD_INT 58
32172: PUSH
32173: LD_INT 59
32175: PUSH
32176: LD_INT 63
32178: PUSH
32179: LD_INT 64
32181: PUSH
32182: LD_INT 65
32184: PUSH
32185: LD_INT 82
32187: PUSH
32188: LD_INT 83
32190: PUSH
32191: LD_INT 84
32193: PUSH
32194: LD_INT 85
32196: PUSH
32197: LD_INT 86
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: ST_TO_ADDR
32255: GO 32258
32257: POP
// if state > - 1 and state < 3 then
32258: LD_VAR 0 3
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: GREATER
32267: PUSH
32268: LD_VAR 0 3
32272: PUSH
32273: LD_INT 3
32275: LESS
32276: AND
32277: IFFALSE 32334
// for i in result do
32279: LD_ADDR_VAR 0 5
32283: PUSH
32284: LD_VAR 0 4
32288: PUSH
32289: FOR_IN
32290: IFFALSE 32332
// if GetTech ( i , side ) <> state then
32292: LD_VAR 0 5
32296: PPUSH
32297: LD_VAR 0 1
32301: PPUSH
32302: CALL_OW 321
32306: PUSH
32307: LD_VAR 0 3
32311: NONEQUAL
32312: IFFALSE 32330
// result := result diff i ;
32314: LD_ADDR_VAR 0 4
32318: PUSH
32319: LD_VAR 0 4
32323: PUSH
32324: LD_VAR 0 5
32328: DIFF
32329: ST_TO_ADDR
32330: GO 32289
32332: POP
32333: POP
// end ;
32334: LD_VAR 0 4
32338: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32339: LD_INT 0
32341: PPUSH
32342: PPUSH
32343: PPUSH
// result := true ;
32344: LD_ADDR_VAR 0 3
32348: PUSH
32349: LD_INT 1
32351: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32352: LD_ADDR_VAR 0 5
32356: PUSH
32357: LD_VAR 0 2
32361: PPUSH
32362: CALL_OW 480
32366: ST_TO_ADDR
// if not tmp then
32367: LD_VAR 0 5
32371: NOT
32372: IFFALSE 32376
// exit ;
32374: GO 32425
// for i in tmp do
32376: LD_ADDR_VAR 0 4
32380: PUSH
32381: LD_VAR 0 5
32385: PUSH
32386: FOR_IN
32387: IFFALSE 32423
// if GetTech ( i , side ) <> state_researched then
32389: LD_VAR 0 4
32393: PPUSH
32394: LD_VAR 0 1
32398: PPUSH
32399: CALL_OW 321
32403: PUSH
32404: LD_INT 2
32406: NONEQUAL
32407: IFFALSE 32421
// begin result := false ;
32409: LD_ADDR_VAR 0 3
32413: PUSH
32414: LD_INT 0
32416: ST_TO_ADDR
// exit ;
32417: POP
32418: POP
32419: GO 32425
// end ;
32421: GO 32386
32423: POP
32424: POP
// end ;
32425: LD_VAR 0 3
32429: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32430: LD_INT 0
32432: PPUSH
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
32439: PPUSH
32440: PPUSH
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32445: LD_VAR 0 1
32449: NOT
32450: PUSH
32451: LD_VAR 0 1
32455: PPUSH
32456: CALL_OW 257
32460: PUSH
32461: LD_INT 9
32463: NONEQUAL
32464: OR
32465: IFFALSE 32469
// exit ;
32467: GO 33042
// side := GetSide ( unit ) ;
32469: LD_ADDR_VAR 0 9
32473: PUSH
32474: LD_VAR 0 1
32478: PPUSH
32479: CALL_OW 255
32483: ST_TO_ADDR
// tech_space := tech_spacanom ;
32484: LD_ADDR_VAR 0 12
32488: PUSH
32489: LD_INT 29
32491: ST_TO_ADDR
// tech_time := tech_taurad ;
32492: LD_ADDR_VAR 0 13
32496: PUSH
32497: LD_INT 28
32499: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32500: LD_ADDR_VAR 0 11
32504: PUSH
32505: LD_VAR 0 1
32509: PPUSH
32510: CALL_OW 310
32514: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32515: LD_VAR 0 11
32519: PPUSH
32520: CALL_OW 247
32524: PUSH
32525: LD_INT 2
32527: EQUAL
32528: IFFALSE 32532
// exit ;
32530: GO 33042
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32532: LD_ADDR_VAR 0 8
32536: PUSH
32537: LD_INT 81
32539: PUSH
32540: LD_VAR 0 9
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 3
32551: PUSH
32552: LD_INT 21
32554: PUSH
32555: LD_INT 3
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PPUSH
32570: CALL_OW 69
32574: ST_TO_ADDR
// if not tmp then
32575: LD_VAR 0 8
32579: NOT
32580: IFFALSE 32584
// exit ;
32582: GO 33042
// if in_unit then
32584: LD_VAR 0 11
32588: IFFALSE 32612
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32590: LD_ADDR_VAR 0 10
32594: PUSH
32595: LD_VAR 0 8
32599: PPUSH
32600: LD_VAR 0 11
32604: PPUSH
32605: CALL_OW 74
32609: ST_TO_ADDR
32610: GO 32632
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32612: LD_ADDR_VAR 0 10
32616: PUSH
32617: LD_VAR 0 8
32621: PPUSH
32622: LD_VAR 0 1
32626: PPUSH
32627: CALL_OW 74
32631: ST_TO_ADDR
// if not enemy then
32632: LD_VAR 0 10
32636: NOT
32637: IFFALSE 32641
// exit ;
32639: GO 33042
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32641: LD_VAR 0 11
32645: PUSH
32646: LD_VAR 0 11
32650: PPUSH
32651: LD_VAR 0 10
32655: PPUSH
32656: CALL_OW 296
32660: PUSH
32661: LD_INT 13
32663: GREATER
32664: AND
32665: PUSH
32666: LD_VAR 0 1
32670: PPUSH
32671: LD_VAR 0 10
32675: PPUSH
32676: CALL_OW 296
32680: PUSH
32681: LD_INT 12
32683: GREATER
32684: OR
32685: IFFALSE 32689
// exit ;
32687: GO 33042
// missile := [ 1 ] ;
32689: LD_ADDR_VAR 0 14
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: EMPTY
32698: LIST
32699: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32700: LD_VAR 0 9
32704: PPUSH
32705: LD_VAR 0 12
32709: PPUSH
32710: CALL_OW 325
32714: IFFALSE 32743
// missile := Replace ( missile , missile + 1 , 2 ) ;
32716: LD_ADDR_VAR 0 14
32720: PUSH
32721: LD_VAR 0 14
32725: PPUSH
32726: LD_VAR 0 14
32730: PUSH
32731: LD_INT 1
32733: PLUS
32734: PPUSH
32735: LD_INT 2
32737: PPUSH
32738: CALL_OW 1
32742: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32743: LD_VAR 0 9
32747: PPUSH
32748: LD_VAR 0 13
32752: PPUSH
32753: CALL_OW 325
32757: PUSH
32758: LD_VAR 0 10
32762: PPUSH
32763: CALL_OW 255
32767: PPUSH
32768: LD_VAR 0 13
32772: PPUSH
32773: CALL_OW 325
32777: NOT
32778: AND
32779: IFFALSE 32808
// missile := Replace ( missile , missile + 1 , 3 ) ;
32781: LD_ADDR_VAR 0 14
32785: PUSH
32786: LD_VAR 0 14
32790: PPUSH
32791: LD_VAR 0 14
32795: PUSH
32796: LD_INT 1
32798: PLUS
32799: PPUSH
32800: LD_INT 3
32802: PPUSH
32803: CALL_OW 1
32807: ST_TO_ADDR
// if missile < 2 then
32808: LD_VAR 0 14
32812: PUSH
32813: LD_INT 2
32815: LESS
32816: IFFALSE 32820
// exit ;
32818: GO 33042
// x := GetX ( enemy ) ;
32820: LD_ADDR_VAR 0 4
32824: PUSH
32825: LD_VAR 0 10
32829: PPUSH
32830: CALL_OW 250
32834: ST_TO_ADDR
// y := GetY ( enemy ) ;
32835: LD_ADDR_VAR 0 5
32839: PUSH
32840: LD_VAR 0 10
32844: PPUSH
32845: CALL_OW 251
32849: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32850: LD_ADDR_VAR 0 6
32854: PUSH
32855: LD_VAR 0 4
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PPUSH
32864: LD_INT 1
32866: PPUSH
32867: CALL_OW 12
32871: PLUS
32872: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32873: LD_ADDR_VAR 0 7
32877: PUSH
32878: LD_VAR 0 5
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PPUSH
32887: LD_INT 1
32889: PPUSH
32890: CALL_OW 12
32894: PLUS
32895: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32896: LD_VAR 0 6
32900: PPUSH
32901: LD_VAR 0 7
32905: PPUSH
32906: CALL_OW 488
32910: NOT
32911: IFFALSE 32933
// begin _x := x ;
32913: LD_ADDR_VAR 0 6
32917: PUSH
32918: LD_VAR 0 4
32922: ST_TO_ADDR
// _y := y ;
32923: LD_ADDR_VAR 0 7
32927: PUSH
32928: LD_VAR 0 5
32932: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32933: LD_ADDR_VAR 0 3
32937: PUSH
32938: LD_INT 1
32940: PPUSH
32941: LD_VAR 0 14
32945: PPUSH
32946: CALL_OW 12
32950: ST_TO_ADDR
// case i of 1 :
32951: LD_VAR 0 3
32955: PUSH
32956: LD_INT 1
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 32981
32964: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32965: LD_VAR 0 1
32969: PPUSH
32970: LD_VAR 0 10
32974: PPUSH
32975: CALL_OW 115
32979: GO 33042
32981: LD_INT 2
32983: DOUBLE
32984: EQUAL
32985: IFTRUE 32989
32987: GO 33011
32989: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32990: LD_VAR 0 1
32994: PPUSH
32995: LD_VAR 0 6
32999: PPUSH
33000: LD_VAR 0 7
33004: PPUSH
33005: CALL_OW 153
33009: GO 33042
33011: LD_INT 3
33013: DOUBLE
33014: EQUAL
33015: IFTRUE 33019
33017: GO 33041
33019: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33020: LD_VAR 0 1
33024: PPUSH
33025: LD_VAR 0 6
33029: PPUSH
33030: LD_VAR 0 7
33034: PPUSH
33035: CALL_OW 154
33039: GO 33042
33041: POP
// end ;
33042: LD_VAR 0 2
33046: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33047: LD_INT 0
33049: PPUSH
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
33054: PPUSH
// if not unit or not building then
33055: LD_VAR 0 1
33059: NOT
33060: PUSH
33061: LD_VAR 0 2
33065: NOT
33066: OR
33067: IFFALSE 33071
// exit ;
33069: GO 33229
// x := GetX ( building ) ;
33071: LD_ADDR_VAR 0 5
33075: PUSH
33076: LD_VAR 0 2
33080: PPUSH
33081: CALL_OW 250
33085: ST_TO_ADDR
// y := GetY ( building ) ;
33086: LD_ADDR_VAR 0 6
33090: PUSH
33091: LD_VAR 0 2
33095: PPUSH
33096: CALL_OW 251
33100: ST_TO_ADDR
// for i = 0 to 5 do
33101: LD_ADDR_VAR 0 4
33105: PUSH
33106: DOUBLE
33107: LD_INT 0
33109: DEC
33110: ST_TO_ADDR
33111: LD_INT 5
33113: PUSH
33114: FOR_TO
33115: IFFALSE 33227
// begin _x := ShiftX ( x , i , 3 ) ;
33117: LD_ADDR_VAR 0 7
33121: PUSH
33122: LD_VAR 0 5
33126: PPUSH
33127: LD_VAR 0 4
33131: PPUSH
33132: LD_INT 3
33134: PPUSH
33135: CALL_OW 272
33139: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33140: LD_ADDR_VAR 0 8
33144: PUSH
33145: LD_VAR 0 6
33149: PPUSH
33150: LD_VAR 0 4
33154: PPUSH
33155: LD_INT 3
33157: PPUSH
33158: CALL_OW 273
33162: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33163: LD_VAR 0 7
33167: PPUSH
33168: LD_VAR 0 8
33172: PPUSH
33173: CALL_OW 488
33177: NOT
33178: IFFALSE 33182
// continue ;
33180: GO 33114
// if HexInfo ( _x , _y ) = 0 then
33182: LD_VAR 0 7
33186: PPUSH
33187: LD_VAR 0 8
33191: PPUSH
33192: CALL_OW 428
33196: PUSH
33197: LD_INT 0
33199: EQUAL
33200: IFFALSE 33225
// begin ComMoveXY ( unit , _x , _y ) ;
33202: LD_VAR 0 1
33206: PPUSH
33207: LD_VAR 0 7
33211: PPUSH
33212: LD_VAR 0 8
33216: PPUSH
33217: CALL_OW 111
// exit ;
33221: POP
33222: POP
33223: GO 33229
// end ; end ;
33225: GO 33114
33227: POP
33228: POP
// end ;
33229: LD_VAR 0 3
33233: RET
// export function ScanBase ( side , base_area ) ; begin
33234: LD_INT 0
33236: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33237: LD_ADDR_VAR 0 3
33241: PUSH
33242: LD_VAR 0 2
33246: PPUSH
33247: LD_INT 81
33249: PUSH
33250: LD_VAR 0 1
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PPUSH
33259: CALL_OW 70
33263: ST_TO_ADDR
// end ;
33264: LD_VAR 0 3
33268: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33269: LD_INT 0
33271: PPUSH
33272: PPUSH
33273: PPUSH
33274: PPUSH
// result := false ;
33275: LD_ADDR_VAR 0 2
33279: PUSH
33280: LD_INT 0
33282: ST_TO_ADDR
// side := GetSide ( unit ) ;
33283: LD_ADDR_VAR 0 3
33287: PUSH
33288: LD_VAR 0 1
33292: PPUSH
33293: CALL_OW 255
33297: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33298: LD_ADDR_VAR 0 4
33302: PUSH
33303: LD_VAR 0 1
33307: PPUSH
33308: CALL_OW 248
33312: ST_TO_ADDR
// case nat of 1 :
33313: LD_VAR 0 4
33317: PUSH
33318: LD_INT 1
33320: DOUBLE
33321: EQUAL
33322: IFTRUE 33326
33324: GO 33337
33326: POP
// tech := tech_lassight ; 2 :
33327: LD_ADDR_VAR 0 5
33331: PUSH
33332: LD_INT 12
33334: ST_TO_ADDR
33335: GO 33376
33337: LD_INT 2
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33345
33343: GO 33356
33345: POP
// tech := tech_mortar ; 3 :
33346: LD_ADDR_VAR 0 5
33350: PUSH
33351: LD_INT 41
33353: ST_TO_ADDR
33354: GO 33376
33356: LD_INT 3
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33364
33362: GO 33375
33364: POP
// tech := tech_bazooka ; end ;
33365: LD_ADDR_VAR 0 5
33369: PUSH
33370: LD_INT 44
33372: ST_TO_ADDR
33373: GO 33376
33375: POP
// if Researched ( side , tech ) then
33376: LD_VAR 0 3
33380: PPUSH
33381: LD_VAR 0 5
33385: PPUSH
33386: CALL_OW 325
33390: IFFALSE 33417
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33392: LD_ADDR_VAR 0 2
33396: PUSH
33397: LD_INT 5
33399: PUSH
33400: LD_INT 8
33402: PUSH
33403: LD_INT 9
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: PUSH
33411: LD_VAR 0 4
33415: ARRAY
33416: ST_TO_ADDR
// end ;
33417: LD_VAR 0 2
33421: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33422: LD_INT 0
33424: PPUSH
33425: PPUSH
33426: PPUSH
// if not mines then
33427: LD_VAR 0 2
33431: NOT
33432: IFFALSE 33436
// exit ;
33434: GO 33580
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33436: LD_ADDR_VAR 0 5
33440: PUSH
33441: LD_INT 81
33443: PUSH
33444: LD_VAR 0 1
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: LD_INT 21
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PPUSH
33474: CALL_OW 69
33478: ST_TO_ADDR
// for i in mines do
33479: LD_ADDR_VAR 0 4
33483: PUSH
33484: LD_VAR 0 2
33488: PUSH
33489: FOR_IN
33490: IFFALSE 33578
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33492: LD_VAR 0 4
33496: PUSH
33497: LD_INT 1
33499: ARRAY
33500: PPUSH
33501: LD_VAR 0 4
33505: PUSH
33506: LD_INT 2
33508: ARRAY
33509: PPUSH
33510: CALL_OW 458
33514: NOT
33515: IFFALSE 33519
// continue ;
33517: GO 33489
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33519: LD_VAR 0 4
33523: PUSH
33524: LD_INT 1
33526: ARRAY
33527: PPUSH
33528: LD_VAR 0 4
33532: PUSH
33533: LD_INT 2
33535: ARRAY
33536: PPUSH
33537: CALL_OW 428
33541: PUSH
33542: LD_VAR 0 5
33546: IN
33547: IFFALSE 33576
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33549: LD_VAR 0 4
33553: PUSH
33554: LD_INT 1
33556: ARRAY
33557: PPUSH
33558: LD_VAR 0 4
33562: PUSH
33563: LD_INT 2
33565: ARRAY
33566: PPUSH
33567: LD_VAR 0 1
33571: PPUSH
33572: CALL_OW 456
// end ;
33576: GO 33489
33578: POP
33579: POP
// end ;
33580: LD_VAR 0 3
33584: RET
// export function Count ( array ) ; begin
33585: LD_INT 0
33587: PPUSH
// result := array + 0 ;
33588: LD_ADDR_VAR 0 2
33592: PUSH
33593: LD_VAR 0 1
33597: PUSH
33598: LD_INT 0
33600: PLUS
33601: ST_TO_ADDR
// end ;
33602: LD_VAR 0 2
33606: RET
// export function IsEmpty ( building ) ; begin
33607: LD_INT 0
33609: PPUSH
// if not building then
33610: LD_VAR 0 1
33614: NOT
33615: IFFALSE 33619
// exit ;
33617: GO 33662
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33619: LD_ADDR_VAR 0 2
33623: PUSH
33624: LD_VAR 0 1
33628: PUSH
33629: LD_INT 22
33631: PUSH
33632: LD_VAR 0 1
33636: PPUSH
33637: CALL_OW 255
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 58
33648: PUSH
33649: EMPTY
33650: LIST
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PPUSH
33656: CALL_OW 69
33660: IN
33661: ST_TO_ADDR
// end ;
33662: LD_VAR 0 2
33666: RET
// export function IsNotFull ( building ) ; var places ; begin
33667: LD_INT 0
33669: PPUSH
33670: PPUSH
// if not building then
33671: LD_VAR 0 1
33675: NOT
33676: IFFALSE 33680
// exit ;
33678: GO 33708
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33680: LD_ADDR_VAR 0 2
33684: PUSH
33685: LD_VAR 0 1
33689: PPUSH
33690: LD_INT 3
33692: PUSH
33693: LD_INT 62
33695: PUSH
33696: EMPTY
33697: LIST
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PPUSH
33703: CALL_OW 72
33707: ST_TO_ADDR
// end ;
33708: LD_VAR 0 2
33712: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33713: LD_INT 0
33715: PPUSH
33716: PPUSH
33717: PPUSH
33718: PPUSH
// tmp := [ ] ;
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: EMPTY
33725: ST_TO_ADDR
// list := [ ] ;
33726: LD_ADDR_VAR 0 5
33730: PUSH
33731: EMPTY
33732: ST_TO_ADDR
// for i = 16 to 25 do
33733: LD_ADDR_VAR 0 4
33737: PUSH
33738: DOUBLE
33739: LD_INT 16
33741: DEC
33742: ST_TO_ADDR
33743: LD_INT 25
33745: PUSH
33746: FOR_TO
33747: IFFALSE 33820
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33749: LD_ADDR_VAR 0 3
33753: PUSH
33754: LD_VAR 0 3
33758: PUSH
33759: LD_INT 22
33761: PUSH
33762: LD_VAR 0 1
33766: PPUSH
33767: CALL_OW 255
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 91
33778: PUSH
33779: LD_VAR 0 1
33783: PUSH
33784: LD_INT 6
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 30
33794: PUSH
33795: LD_VAR 0 4
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: PUSH
33809: EMPTY
33810: LIST
33811: PPUSH
33812: CALL_OW 69
33816: ADD
33817: ST_TO_ADDR
33818: GO 33746
33820: POP
33821: POP
// for i = 1 to tmp do
33822: LD_ADDR_VAR 0 4
33826: PUSH
33827: DOUBLE
33828: LD_INT 1
33830: DEC
33831: ST_TO_ADDR
33832: LD_VAR 0 3
33836: PUSH
33837: FOR_TO
33838: IFFALSE 33926
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33840: LD_ADDR_VAR 0 5
33844: PUSH
33845: LD_VAR 0 5
33849: PUSH
33850: LD_VAR 0 3
33854: PUSH
33855: LD_VAR 0 4
33859: ARRAY
33860: PPUSH
33861: CALL_OW 266
33865: PUSH
33866: LD_VAR 0 3
33870: PUSH
33871: LD_VAR 0 4
33875: ARRAY
33876: PPUSH
33877: CALL_OW 250
33881: PUSH
33882: LD_VAR 0 3
33886: PUSH
33887: LD_VAR 0 4
33891: ARRAY
33892: PPUSH
33893: CALL_OW 251
33897: PUSH
33898: LD_VAR 0 3
33902: PUSH
33903: LD_VAR 0 4
33907: ARRAY
33908: PPUSH
33909: CALL_OW 254
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: PUSH
33920: EMPTY
33921: LIST
33922: ADD
33923: ST_TO_ADDR
33924: GO 33837
33926: POP
33927: POP
// result := list ;
33928: LD_ADDR_VAR 0 2
33932: PUSH
33933: LD_VAR 0 5
33937: ST_TO_ADDR
// end ;
33938: LD_VAR 0 2
33942: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33943: LD_INT 0
33945: PPUSH
33946: PPUSH
33947: PPUSH
33948: PPUSH
33949: PPUSH
33950: PPUSH
33951: PPUSH
// if not factory then
33952: LD_VAR 0 1
33956: NOT
33957: IFFALSE 33961
// exit ;
33959: GO 34554
// if control = control_apeman then
33961: LD_VAR 0 4
33965: PUSH
33966: LD_INT 5
33968: EQUAL
33969: IFFALSE 34078
// begin tmp := UnitsInside ( factory ) ;
33971: LD_ADDR_VAR 0 8
33975: PUSH
33976: LD_VAR 0 1
33980: PPUSH
33981: CALL_OW 313
33985: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33986: LD_VAR 0 8
33990: PPUSH
33991: LD_INT 25
33993: PUSH
33994: LD_INT 12
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PPUSH
34001: CALL_OW 72
34005: NOT
34006: IFFALSE 34016
// control := control_manual ;
34008: LD_ADDR_VAR 0 4
34012: PUSH
34013: LD_INT 1
34015: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34016: LD_ADDR_VAR 0 8
34020: PUSH
34021: LD_VAR 0 1
34025: PPUSH
34026: CALL 33713 0 1
34030: ST_TO_ADDR
// if tmp then
34031: LD_VAR 0 8
34035: IFFALSE 34078
// begin for i in tmp do
34037: LD_ADDR_VAR 0 7
34041: PUSH
34042: LD_VAR 0 8
34046: PUSH
34047: FOR_IN
34048: IFFALSE 34076
// if i [ 1 ] = b_ext_radio then
34050: LD_VAR 0 7
34054: PUSH
34055: LD_INT 1
34057: ARRAY
34058: PUSH
34059: LD_INT 22
34061: EQUAL
34062: IFFALSE 34074
// begin control := control_remote ;
34064: LD_ADDR_VAR 0 4
34068: PUSH
34069: LD_INT 2
34071: ST_TO_ADDR
// break ;
34072: GO 34076
// end ;
34074: GO 34047
34076: POP
34077: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34078: LD_VAR 0 1
34082: PPUSH
34083: LD_VAR 0 2
34087: PPUSH
34088: LD_VAR 0 3
34092: PPUSH
34093: LD_VAR 0 4
34097: PPUSH
34098: LD_VAR 0 5
34102: PPUSH
34103: CALL_OW 448
34107: IFFALSE 34142
// begin result := [ chassis , engine , control , weapon ] ;
34109: LD_ADDR_VAR 0 6
34113: PUSH
34114: LD_VAR 0 2
34118: PUSH
34119: LD_VAR 0 3
34123: PUSH
34124: LD_VAR 0 4
34128: PUSH
34129: LD_VAR 0 5
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: ST_TO_ADDR
// exit ;
34140: GO 34554
// end ; _chassis := AvailableChassisList ( factory ) ;
34142: LD_ADDR_VAR 0 9
34146: PUSH
34147: LD_VAR 0 1
34151: PPUSH
34152: CALL_OW 475
34156: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34157: LD_ADDR_VAR 0 11
34161: PUSH
34162: LD_VAR 0 1
34166: PPUSH
34167: CALL_OW 476
34171: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34172: LD_ADDR_VAR 0 12
34176: PUSH
34177: LD_VAR 0 1
34181: PPUSH
34182: CALL_OW 477
34186: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34187: LD_ADDR_VAR 0 10
34191: PUSH
34192: LD_VAR 0 1
34196: PPUSH
34197: CALL_OW 478
34201: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34202: LD_VAR 0 9
34206: NOT
34207: PUSH
34208: LD_VAR 0 11
34212: NOT
34213: OR
34214: PUSH
34215: LD_VAR 0 12
34219: NOT
34220: OR
34221: PUSH
34222: LD_VAR 0 10
34226: NOT
34227: OR
34228: IFFALSE 34263
// begin result := [ chassis , engine , control , weapon ] ;
34230: LD_ADDR_VAR 0 6
34234: PUSH
34235: LD_VAR 0 2
34239: PUSH
34240: LD_VAR 0 3
34244: PUSH
34245: LD_VAR 0 4
34249: PUSH
34250: LD_VAR 0 5
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: ST_TO_ADDR
// exit ;
34261: GO 34554
// end ; if not chassis in _chassis then
34263: LD_VAR 0 2
34267: PUSH
34268: LD_VAR 0 9
34272: IN
34273: NOT
34274: IFFALSE 34300
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34276: LD_ADDR_VAR 0 2
34280: PUSH
34281: LD_VAR 0 9
34285: PUSH
34286: LD_INT 1
34288: PPUSH
34289: LD_VAR 0 9
34293: PPUSH
34294: CALL_OW 12
34298: ARRAY
34299: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34300: LD_VAR 0 2
34304: PPUSH
34305: LD_VAR 0 3
34309: PPUSH
34310: CALL 34559 0 2
34314: NOT
34315: IFFALSE 34374
// repeat engine := _engine [ 1 ] ;
34317: LD_ADDR_VAR 0 3
34321: PUSH
34322: LD_VAR 0 11
34326: PUSH
34327: LD_INT 1
34329: ARRAY
34330: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34331: LD_ADDR_VAR 0 11
34335: PUSH
34336: LD_VAR 0 11
34340: PPUSH
34341: LD_INT 1
34343: PPUSH
34344: CALL_OW 3
34348: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34349: LD_VAR 0 2
34353: PPUSH
34354: LD_VAR 0 3
34358: PPUSH
34359: CALL 34559 0 2
34363: PUSH
34364: LD_VAR 0 11
34368: PUSH
34369: EMPTY
34370: EQUAL
34371: OR
34372: IFFALSE 34317
// if not control in _control then
34374: LD_VAR 0 4
34378: PUSH
34379: LD_VAR 0 12
34383: IN
34384: NOT
34385: IFFALSE 34411
// control := _control [ rand ( 1 , _control ) ] ;
34387: LD_ADDR_VAR 0 4
34391: PUSH
34392: LD_VAR 0 12
34396: PUSH
34397: LD_INT 1
34399: PPUSH
34400: LD_VAR 0 12
34404: PPUSH
34405: CALL_OW 12
34409: ARRAY
34410: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34411: LD_VAR 0 2
34415: PPUSH
34416: LD_VAR 0 5
34420: PPUSH
34421: CALL 34779 0 2
34425: NOT
34426: IFFALSE 34485
// repeat weapon := _weapon [ 1 ] ;
34428: LD_ADDR_VAR 0 5
34432: PUSH
34433: LD_VAR 0 10
34437: PUSH
34438: LD_INT 1
34440: ARRAY
34441: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34442: LD_ADDR_VAR 0 10
34446: PUSH
34447: LD_VAR 0 10
34451: PPUSH
34452: LD_INT 1
34454: PPUSH
34455: CALL_OW 3
34459: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34460: LD_VAR 0 2
34464: PPUSH
34465: LD_VAR 0 5
34469: PPUSH
34470: CALL 34779 0 2
34474: PUSH
34475: LD_VAR 0 10
34479: PUSH
34480: EMPTY
34481: EQUAL
34482: OR
34483: IFFALSE 34428
// result := [ ] ;
34485: LD_ADDR_VAR 0 6
34489: PUSH
34490: EMPTY
34491: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34492: LD_VAR 0 1
34496: PPUSH
34497: LD_VAR 0 2
34501: PPUSH
34502: LD_VAR 0 3
34506: PPUSH
34507: LD_VAR 0 4
34511: PPUSH
34512: LD_VAR 0 5
34516: PPUSH
34517: CALL_OW 448
34521: IFFALSE 34554
// result := [ chassis , engine , control , weapon ] ;
34523: LD_ADDR_VAR 0 6
34527: PUSH
34528: LD_VAR 0 2
34532: PUSH
34533: LD_VAR 0 3
34537: PUSH
34538: LD_VAR 0 4
34542: PUSH
34543: LD_VAR 0 5
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: ST_TO_ADDR
// end ;
34554: LD_VAR 0 6
34558: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34559: LD_INT 0
34561: PPUSH
// if not chassis or not engine then
34562: LD_VAR 0 1
34566: NOT
34567: PUSH
34568: LD_VAR 0 2
34572: NOT
34573: OR
34574: IFFALSE 34578
// exit ;
34576: GO 34774
// case engine of engine_solar :
34578: LD_VAR 0 2
34582: PUSH
34583: LD_INT 2
34585: DOUBLE
34586: EQUAL
34587: IFTRUE 34591
34589: GO 34629
34591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34592: LD_ADDR_VAR 0 3
34596: PUSH
34597: LD_INT 11
34599: PUSH
34600: LD_INT 12
34602: PUSH
34603: LD_INT 13
34605: PUSH
34606: LD_INT 14
34608: PUSH
34609: LD_INT 1
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: LD_INT 3
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: ST_TO_ADDR
34627: GO 34758
34629: LD_INT 1
34631: DOUBLE
34632: EQUAL
34633: IFTRUE 34637
34635: GO 34699
34637: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34638: LD_ADDR_VAR 0 3
34642: PUSH
34643: LD_INT 11
34645: PUSH
34646: LD_INT 12
34648: PUSH
34649: LD_INT 13
34651: PUSH
34652: LD_INT 14
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: LD_INT 3
34663: PUSH
34664: LD_INT 4
34666: PUSH
34667: LD_INT 5
34669: PUSH
34670: LD_INT 21
34672: PUSH
34673: LD_INT 23
34675: PUSH
34676: LD_INT 22
34678: PUSH
34679: LD_INT 24
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: ST_TO_ADDR
34697: GO 34758
34699: LD_INT 3
34701: DOUBLE
34702: EQUAL
34703: IFTRUE 34707
34705: GO 34757
34707: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34708: LD_ADDR_VAR 0 3
34712: PUSH
34713: LD_INT 13
34715: PUSH
34716: LD_INT 14
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: LD_INT 3
34724: PUSH
34725: LD_INT 4
34727: PUSH
34728: LD_INT 5
34730: PUSH
34731: LD_INT 21
34733: PUSH
34734: LD_INT 22
34736: PUSH
34737: LD_INT 23
34739: PUSH
34740: LD_INT 24
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: ST_TO_ADDR
34755: GO 34758
34757: POP
// result := ( chassis in result ) ;
34758: LD_ADDR_VAR 0 3
34762: PUSH
34763: LD_VAR 0 1
34767: PUSH
34768: LD_VAR 0 3
34772: IN
34773: ST_TO_ADDR
// end ;
34774: LD_VAR 0 3
34778: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34779: LD_INT 0
34781: PPUSH
// if not chassis or not weapon then
34782: LD_VAR 0 1
34786: NOT
34787: PUSH
34788: LD_VAR 0 2
34792: NOT
34793: OR
34794: IFFALSE 34798
// exit ;
34796: GO 35858
// case weapon of us_machine_gun :
34798: LD_VAR 0 2
34802: PUSH
34803: LD_INT 2
34805: DOUBLE
34806: EQUAL
34807: IFTRUE 34811
34809: GO 34841
34811: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34812: LD_ADDR_VAR 0 3
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: LD_INT 3
34825: PUSH
34826: LD_INT 4
34828: PUSH
34829: LD_INT 5
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: ST_TO_ADDR
34839: GO 35842
34841: LD_INT 3
34843: DOUBLE
34844: EQUAL
34845: IFTRUE 34849
34847: GO 34879
34849: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34850: LD_ADDR_VAR 0 3
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: LD_INT 3
34863: PUSH
34864: LD_INT 4
34866: PUSH
34867: LD_INT 5
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: ST_TO_ADDR
34877: GO 35842
34879: LD_INT 11
34881: DOUBLE
34882: EQUAL
34883: IFTRUE 34887
34885: GO 34917
34887: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34888: LD_ADDR_VAR 0 3
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: LD_INT 3
34901: PUSH
34902: LD_INT 4
34904: PUSH
34905: LD_INT 5
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: ST_TO_ADDR
34915: GO 35842
34917: LD_INT 4
34919: DOUBLE
34920: EQUAL
34921: IFTRUE 34925
34923: GO 34951
34925: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34926: LD_ADDR_VAR 0 3
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: LD_INT 4
34939: PUSH
34940: LD_INT 5
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: ST_TO_ADDR
34949: GO 35842
34951: LD_INT 5
34953: DOUBLE
34954: EQUAL
34955: IFTRUE 34959
34957: GO 34985
34959: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34960: LD_ADDR_VAR 0 3
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: LD_INT 3
34970: PUSH
34971: LD_INT 4
34973: PUSH
34974: LD_INT 5
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: ST_TO_ADDR
34983: GO 35842
34985: LD_INT 9
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 34993
34991: GO 35019
34993: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34994: LD_ADDR_VAR 0 3
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: LD_INT 4
35007: PUSH
35008: LD_INT 5
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: ST_TO_ADDR
35017: GO 35842
35019: LD_INT 7
35021: DOUBLE
35022: EQUAL
35023: IFTRUE 35027
35025: GO 35053
35027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35028: LD_ADDR_VAR 0 3
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 3
35038: PUSH
35039: LD_INT 4
35041: PUSH
35042: LD_INT 5
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: ST_TO_ADDR
35051: GO 35842
35053: LD_INT 12
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35061
35059: GO 35087
35061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: LD_INT 2
35069: PUSH
35070: LD_INT 3
35072: PUSH
35073: LD_INT 4
35075: PUSH
35076: LD_INT 5
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: ST_TO_ADDR
35085: GO 35842
35087: LD_INT 13
35089: DOUBLE
35090: EQUAL
35091: IFTRUE 35095
35093: GO 35121
35095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35096: LD_ADDR_VAR 0 3
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: LD_INT 4
35109: PUSH
35110: LD_INT 5
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: ST_TO_ADDR
35119: GO 35842
35121: LD_INT 14
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35129
35127: GO 35147
35129: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35130: LD_ADDR_VAR 0 3
35134: PUSH
35135: LD_INT 4
35137: PUSH
35138: LD_INT 5
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: ST_TO_ADDR
35145: GO 35842
35147: LD_INT 6
35149: DOUBLE
35150: EQUAL
35151: IFTRUE 35155
35153: GO 35173
35155: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35156: LD_ADDR_VAR 0 3
35160: PUSH
35161: LD_INT 4
35163: PUSH
35164: LD_INT 5
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: ST_TO_ADDR
35171: GO 35842
35173: LD_INT 10
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35181
35179: GO 35199
35181: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35182: LD_ADDR_VAR 0 3
35186: PUSH
35187: LD_INT 4
35189: PUSH
35190: LD_INT 5
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: ST_TO_ADDR
35197: GO 35842
35199: LD_INT 22
35201: DOUBLE
35202: EQUAL
35203: IFTRUE 35207
35205: GO 35233
35207: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35208: LD_ADDR_VAR 0 3
35212: PUSH
35213: LD_INT 11
35215: PUSH
35216: LD_INT 12
35218: PUSH
35219: LD_INT 13
35221: PUSH
35222: LD_INT 14
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: ST_TO_ADDR
35231: GO 35842
35233: LD_INT 23
35235: DOUBLE
35236: EQUAL
35237: IFTRUE 35241
35239: GO 35267
35241: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35242: LD_ADDR_VAR 0 3
35246: PUSH
35247: LD_INT 11
35249: PUSH
35250: LD_INT 12
35252: PUSH
35253: LD_INT 13
35255: PUSH
35256: LD_INT 14
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: ST_TO_ADDR
35265: GO 35842
35267: LD_INT 24
35269: DOUBLE
35270: EQUAL
35271: IFTRUE 35275
35273: GO 35301
35275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35276: LD_ADDR_VAR 0 3
35280: PUSH
35281: LD_INT 11
35283: PUSH
35284: LD_INT 12
35286: PUSH
35287: LD_INT 13
35289: PUSH
35290: LD_INT 14
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: ST_TO_ADDR
35299: GO 35842
35301: LD_INT 30
35303: DOUBLE
35304: EQUAL
35305: IFTRUE 35309
35307: GO 35335
35309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35310: LD_ADDR_VAR 0 3
35314: PUSH
35315: LD_INT 11
35317: PUSH
35318: LD_INT 12
35320: PUSH
35321: LD_INT 13
35323: PUSH
35324: LD_INT 14
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
35333: GO 35842
35335: LD_INT 25
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35343
35341: GO 35361
35343: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35344: LD_ADDR_VAR 0 3
35348: PUSH
35349: LD_INT 13
35351: PUSH
35352: LD_INT 14
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: ST_TO_ADDR
35359: GO 35842
35361: LD_INT 27
35363: DOUBLE
35364: EQUAL
35365: IFTRUE 35369
35367: GO 35387
35369: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35370: LD_ADDR_VAR 0 3
35374: PUSH
35375: LD_INT 13
35377: PUSH
35378: LD_INT 14
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: ST_TO_ADDR
35385: GO 35842
35387: LD_INT 92
35389: DOUBLE
35390: EQUAL
35391: IFTRUE 35395
35393: GO 35421
35395: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35396: LD_ADDR_VAR 0 3
35400: PUSH
35401: LD_INT 11
35403: PUSH
35404: LD_INT 12
35406: PUSH
35407: LD_INT 13
35409: PUSH
35410: LD_INT 14
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: ST_TO_ADDR
35419: GO 35842
35421: LD_INT 28
35423: DOUBLE
35424: EQUAL
35425: IFTRUE 35429
35427: GO 35447
35429: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35430: LD_ADDR_VAR 0 3
35434: PUSH
35435: LD_INT 13
35437: PUSH
35438: LD_INT 14
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: ST_TO_ADDR
35445: GO 35842
35447: LD_INT 29
35449: DOUBLE
35450: EQUAL
35451: IFTRUE 35455
35453: GO 35473
35455: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35456: LD_ADDR_VAR 0 3
35460: PUSH
35461: LD_INT 13
35463: PUSH
35464: LD_INT 14
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: ST_TO_ADDR
35471: GO 35842
35473: LD_INT 31
35475: DOUBLE
35476: EQUAL
35477: IFTRUE 35481
35479: GO 35499
35481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35482: LD_ADDR_VAR 0 3
35486: PUSH
35487: LD_INT 13
35489: PUSH
35490: LD_INT 14
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: ST_TO_ADDR
35497: GO 35842
35499: LD_INT 26
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35507
35505: GO 35525
35507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35508: LD_ADDR_VAR 0 3
35512: PUSH
35513: LD_INT 13
35515: PUSH
35516: LD_INT 14
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: ST_TO_ADDR
35523: GO 35842
35525: LD_INT 42
35527: DOUBLE
35528: EQUAL
35529: IFTRUE 35533
35531: GO 35559
35533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35534: LD_ADDR_VAR 0 3
35538: PUSH
35539: LD_INT 21
35541: PUSH
35542: LD_INT 22
35544: PUSH
35545: LD_INT 23
35547: PUSH
35548: LD_INT 24
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: ST_TO_ADDR
35557: GO 35842
35559: LD_INT 43
35561: DOUBLE
35562: EQUAL
35563: IFTRUE 35567
35565: GO 35593
35567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: LD_INT 21
35575: PUSH
35576: LD_INT 22
35578: PUSH
35579: LD_INT 23
35581: PUSH
35582: LD_INT 24
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: ST_TO_ADDR
35591: GO 35842
35593: LD_INT 44
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35601
35599: GO 35627
35601: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35602: LD_ADDR_VAR 0 3
35606: PUSH
35607: LD_INT 21
35609: PUSH
35610: LD_INT 22
35612: PUSH
35613: LD_INT 23
35615: PUSH
35616: LD_INT 24
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: ST_TO_ADDR
35625: GO 35842
35627: LD_INT 45
35629: DOUBLE
35630: EQUAL
35631: IFTRUE 35635
35633: GO 35661
35635: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35636: LD_ADDR_VAR 0 3
35640: PUSH
35641: LD_INT 21
35643: PUSH
35644: LD_INT 22
35646: PUSH
35647: LD_INT 23
35649: PUSH
35650: LD_INT 24
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: ST_TO_ADDR
35659: GO 35842
35661: LD_INT 49
35663: DOUBLE
35664: EQUAL
35665: IFTRUE 35669
35667: GO 35695
35669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35670: LD_ADDR_VAR 0 3
35674: PUSH
35675: LD_INT 21
35677: PUSH
35678: LD_INT 22
35680: PUSH
35681: LD_INT 23
35683: PUSH
35684: LD_INT 24
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: ST_TO_ADDR
35693: GO 35842
35695: LD_INT 51
35697: DOUBLE
35698: EQUAL
35699: IFTRUE 35703
35701: GO 35729
35703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35704: LD_ADDR_VAR 0 3
35708: PUSH
35709: LD_INT 21
35711: PUSH
35712: LD_INT 22
35714: PUSH
35715: LD_INT 23
35717: PUSH
35718: LD_INT 24
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: ST_TO_ADDR
35727: GO 35842
35729: LD_INT 52
35731: DOUBLE
35732: EQUAL
35733: IFTRUE 35737
35735: GO 35763
35737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35738: LD_ADDR_VAR 0 3
35742: PUSH
35743: LD_INT 21
35745: PUSH
35746: LD_INT 22
35748: PUSH
35749: LD_INT 23
35751: PUSH
35752: LD_INT 24
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: ST_TO_ADDR
35761: GO 35842
35763: LD_INT 53
35765: DOUBLE
35766: EQUAL
35767: IFTRUE 35771
35769: GO 35789
35771: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35772: LD_ADDR_VAR 0 3
35776: PUSH
35777: LD_INT 23
35779: PUSH
35780: LD_INT 24
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: ST_TO_ADDR
35787: GO 35842
35789: LD_INT 46
35791: DOUBLE
35792: EQUAL
35793: IFTRUE 35797
35795: GO 35815
35797: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35798: LD_ADDR_VAR 0 3
35802: PUSH
35803: LD_INT 23
35805: PUSH
35806: LD_INT 24
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: ST_TO_ADDR
35813: GO 35842
35815: LD_INT 47
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35823
35821: GO 35841
35823: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35824: LD_ADDR_VAR 0 3
35828: PUSH
35829: LD_INT 23
35831: PUSH
35832: LD_INT 24
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: ST_TO_ADDR
35839: GO 35842
35841: POP
// result := ( chassis in result ) ;
35842: LD_ADDR_VAR 0 3
35846: PUSH
35847: LD_VAR 0 1
35851: PUSH
35852: LD_VAR 0 3
35856: IN
35857: ST_TO_ADDR
// end ;
35858: LD_VAR 0 3
35862: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35863: LD_INT 0
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
35869: PPUSH
35870: PPUSH
35871: PPUSH
// result := array ;
35872: LD_ADDR_VAR 0 5
35876: PUSH
35877: LD_VAR 0 1
35881: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35882: LD_VAR 0 1
35886: NOT
35887: PUSH
35888: LD_VAR 0 2
35892: NOT
35893: OR
35894: PUSH
35895: LD_VAR 0 3
35899: NOT
35900: OR
35901: PUSH
35902: LD_VAR 0 2
35906: PUSH
35907: LD_VAR 0 1
35911: GREATER
35912: OR
35913: PUSH
35914: LD_VAR 0 3
35918: PUSH
35919: LD_VAR 0 1
35923: GREATER
35924: OR
35925: IFFALSE 35929
// exit ;
35927: GO 36225
// if direction then
35929: LD_VAR 0 4
35933: IFFALSE 35997
// begin d := 1 ;
35935: LD_ADDR_VAR 0 9
35939: PUSH
35940: LD_INT 1
35942: ST_TO_ADDR
// if i_from > i_to then
35943: LD_VAR 0 2
35947: PUSH
35948: LD_VAR 0 3
35952: GREATER
35953: IFFALSE 35979
// length := ( array - i_from ) + i_to else
35955: LD_ADDR_VAR 0 11
35959: PUSH
35960: LD_VAR 0 1
35964: PUSH
35965: LD_VAR 0 2
35969: MINUS
35970: PUSH
35971: LD_VAR 0 3
35975: PLUS
35976: ST_TO_ADDR
35977: GO 35995
// length := i_to - i_from ;
35979: LD_ADDR_VAR 0 11
35983: PUSH
35984: LD_VAR 0 3
35988: PUSH
35989: LD_VAR 0 2
35993: MINUS
35994: ST_TO_ADDR
// end else
35995: GO 36058
// begin d := - 1 ;
35997: LD_ADDR_VAR 0 9
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: ST_TO_ADDR
// if i_from > i_to then
36006: LD_VAR 0 2
36010: PUSH
36011: LD_VAR 0 3
36015: GREATER
36016: IFFALSE 36036
// length := i_from - i_to else
36018: LD_ADDR_VAR 0 11
36022: PUSH
36023: LD_VAR 0 2
36027: PUSH
36028: LD_VAR 0 3
36032: MINUS
36033: ST_TO_ADDR
36034: GO 36058
// length := ( array - i_to ) + i_from ;
36036: LD_ADDR_VAR 0 11
36040: PUSH
36041: LD_VAR 0 1
36045: PUSH
36046: LD_VAR 0 3
36050: MINUS
36051: PUSH
36052: LD_VAR 0 2
36056: PLUS
36057: ST_TO_ADDR
// end ; if not length then
36058: LD_VAR 0 11
36062: NOT
36063: IFFALSE 36067
// exit ;
36065: GO 36225
// tmp := array ;
36067: LD_ADDR_VAR 0 10
36071: PUSH
36072: LD_VAR 0 1
36076: ST_TO_ADDR
// for i = 1 to length do
36077: LD_ADDR_VAR 0 6
36081: PUSH
36082: DOUBLE
36083: LD_INT 1
36085: DEC
36086: ST_TO_ADDR
36087: LD_VAR 0 11
36091: PUSH
36092: FOR_TO
36093: IFFALSE 36213
// begin for j = 1 to array do
36095: LD_ADDR_VAR 0 7
36099: PUSH
36100: DOUBLE
36101: LD_INT 1
36103: DEC
36104: ST_TO_ADDR
36105: LD_VAR 0 1
36109: PUSH
36110: FOR_TO
36111: IFFALSE 36199
// begin k := j + d ;
36113: LD_ADDR_VAR 0 8
36117: PUSH
36118: LD_VAR 0 7
36122: PUSH
36123: LD_VAR 0 9
36127: PLUS
36128: ST_TO_ADDR
// if k > array then
36129: LD_VAR 0 8
36133: PUSH
36134: LD_VAR 0 1
36138: GREATER
36139: IFFALSE 36149
// k := 1 ;
36141: LD_ADDR_VAR 0 8
36145: PUSH
36146: LD_INT 1
36148: ST_TO_ADDR
// if not k then
36149: LD_VAR 0 8
36153: NOT
36154: IFFALSE 36166
// k := array ;
36156: LD_ADDR_VAR 0 8
36160: PUSH
36161: LD_VAR 0 1
36165: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36166: LD_ADDR_VAR 0 10
36170: PUSH
36171: LD_VAR 0 10
36175: PPUSH
36176: LD_VAR 0 8
36180: PPUSH
36181: LD_VAR 0 1
36185: PUSH
36186: LD_VAR 0 7
36190: ARRAY
36191: PPUSH
36192: CALL_OW 1
36196: ST_TO_ADDR
// end ;
36197: GO 36110
36199: POP
36200: POP
// array := tmp ;
36201: LD_ADDR_VAR 0 1
36205: PUSH
36206: LD_VAR 0 10
36210: ST_TO_ADDR
// end ;
36211: GO 36092
36213: POP
36214: POP
// result := array ;
36215: LD_ADDR_VAR 0 5
36219: PUSH
36220: LD_VAR 0 1
36224: ST_TO_ADDR
// end ;
36225: LD_VAR 0 5
36229: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36230: LD_INT 0
36232: PPUSH
36233: PPUSH
// result := 0 ;
36234: LD_ADDR_VAR 0 3
36238: PUSH
36239: LD_INT 0
36241: ST_TO_ADDR
// if not array or not value in array then
36242: LD_VAR 0 1
36246: NOT
36247: PUSH
36248: LD_VAR 0 2
36252: PUSH
36253: LD_VAR 0 1
36257: IN
36258: NOT
36259: OR
36260: IFFALSE 36264
// exit ;
36262: GO 36318
// for i = 1 to array do
36264: LD_ADDR_VAR 0 4
36268: PUSH
36269: DOUBLE
36270: LD_INT 1
36272: DEC
36273: ST_TO_ADDR
36274: LD_VAR 0 1
36278: PUSH
36279: FOR_TO
36280: IFFALSE 36316
// if value = array [ i ] then
36282: LD_VAR 0 2
36286: PUSH
36287: LD_VAR 0 1
36291: PUSH
36292: LD_VAR 0 4
36296: ARRAY
36297: EQUAL
36298: IFFALSE 36314
// begin result := i ;
36300: LD_ADDR_VAR 0 3
36304: PUSH
36305: LD_VAR 0 4
36309: ST_TO_ADDR
// exit ;
36310: POP
36311: POP
36312: GO 36318
// end ;
36314: GO 36279
36316: POP
36317: POP
// end ;
36318: LD_VAR 0 3
36322: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36323: LD_INT 0
36325: PPUSH
// vc_chassis := chassis ;
36326: LD_ADDR_OWVAR 37
36330: PUSH
36331: LD_VAR 0 1
36335: ST_TO_ADDR
// vc_engine := engine ;
36336: LD_ADDR_OWVAR 39
36340: PUSH
36341: LD_VAR 0 2
36345: ST_TO_ADDR
// vc_control := control ;
36346: LD_ADDR_OWVAR 38
36350: PUSH
36351: LD_VAR 0 3
36355: ST_TO_ADDR
// vc_weapon := weapon ;
36356: LD_ADDR_OWVAR 40
36360: PUSH
36361: LD_VAR 0 4
36365: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36366: LD_ADDR_OWVAR 41
36370: PUSH
36371: LD_VAR 0 5
36375: ST_TO_ADDR
// end ;
36376: LD_VAR 0 6
36380: RET
// export function WantPlant ( unit ) ; var task ; begin
36381: LD_INT 0
36383: PPUSH
36384: PPUSH
// result := false ;
36385: LD_ADDR_VAR 0 2
36389: PUSH
36390: LD_INT 0
36392: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36393: LD_ADDR_VAR 0 3
36397: PUSH
36398: LD_VAR 0 1
36402: PPUSH
36403: CALL_OW 437
36407: ST_TO_ADDR
// if task then
36408: LD_VAR 0 3
36412: IFFALSE 36440
// if task [ 1 ] [ 1 ] = p then
36414: LD_VAR 0 3
36418: PUSH
36419: LD_INT 1
36421: ARRAY
36422: PUSH
36423: LD_INT 1
36425: ARRAY
36426: PUSH
36427: LD_STRING p
36429: EQUAL
36430: IFFALSE 36440
// result := true ;
36432: LD_ADDR_VAR 0 2
36436: PUSH
36437: LD_INT 1
36439: ST_TO_ADDR
// end ;
36440: LD_VAR 0 2
36444: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36445: LD_INT 0
36447: PPUSH
36448: PPUSH
36449: PPUSH
36450: PPUSH
// if pos < 1 then
36451: LD_VAR 0 2
36455: PUSH
36456: LD_INT 1
36458: LESS
36459: IFFALSE 36463
// exit ;
36461: GO 36766
// if pos = 1 then
36463: LD_VAR 0 2
36467: PUSH
36468: LD_INT 1
36470: EQUAL
36471: IFFALSE 36504
// result := Replace ( arr , pos [ 1 ] , value ) else
36473: LD_ADDR_VAR 0 4
36477: PUSH
36478: LD_VAR 0 1
36482: PPUSH
36483: LD_VAR 0 2
36487: PUSH
36488: LD_INT 1
36490: ARRAY
36491: PPUSH
36492: LD_VAR 0 3
36496: PPUSH
36497: CALL_OW 1
36501: ST_TO_ADDR
36502: GO 36766
// begin tmp := arr ;
36504: LD_ADDR_VAR 0 6
36508: PUSH
36509: LD_VAR 0 1
36513: ST_TO_ADDR
// s_arr := [ tmp ] ;
36514: LD_ADDR_VAR 0 7
36518: PUSH
36519: LD_VAR 0 6
36523: PUSH
36524: EMPTY
36525: LIST
36526: ST_TO_ADDR
// for i = 1 to pos - 1 do
36527: LD_ADDR_VAR 0 5
36531: PUSH
36532: DOUBLE
36533: LD_INT 1
36535: DEC
36536: ST_TO_ADDR
36537: LD_VAR 0 2
36541: PUSH
36542: LD_INT 1
36544: MINUS
36545: PUSH
36546: FOR_TO
36547: IFFALSE 36592
// begin tmp := tmp [ pos [ i ] ] ;
36549: LD_ADDR_VAR 0 6
36553: PUSH
36554: LD_VAR 0 6
36558: PUSH
36559: LD_VAR 0 2
36563: PUSH
36564: LD_VAR 0 5
36568: ARRAY
36569: ARRAY
36570: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36571: LD_ADDR_VAR 0 7
36575: PUSH
36576: LD_VAR 0 7
36580: PUSH
36581: LD_VAR 0 6
36585: PUSH
36586: EMPTY
36587: LIST
36588: ADD
36589: ST_TO_ADDR
// end ;
36590: GO 36546
36592: POP
36593: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36594: LD_ADDR_VAR 0 6
36598: PUSH
36599: LD_VAR 0 6
36603: PPUSH
36604: LD_VAR 0 2
36608: PUSH
36609: LD_VAR 0 2
36613: ARRAY
36614: PPUSH
36615: LD_VAR 0 3
36619: PPUSH
36620: CALL_OW 1
36624: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36625: LD_ADDR_VAR 0 7
36629: PUSH
36630: LD_VAR 0 7
36634: PPUSH
36635: LD_VAR 0 7
36639: PPUSH
36640: LD_VAR 0 6
36644: PPUSH
36645: CALL_OW 1
36649: ST_TO_ADDR
// for i = s_arr downto 2 do
36650: LD_ADDR_VAR 0 5
36654: PUSH
36655: DOUBLE
36656: LD_VAR 0 7
36660: INC
36661: ST_TO_ADDR
36662: LD_INT 2
36664: PUSH
36665: FOR_DOWNTO
36666: IFFALSE 36750
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36668: LD_ADDR_VAR 0 6
36672: PUSH
36673: LD_VAR 0 7
36677: PUSH
36678: LD_VAR 0 5
36682: PUSH
36683: LD_INT 1
36685: MINUS
36686: ARRAY
36687: PPUSH
36688: LD_VAR 0 2
36692: PUSH
36693: LD_VAR 0 5
36697: PUSH
36698: LD_INT 1
36700: MINUS
36701: ARRAY
36702: PPUSH
36703: LD_VAR 0 7
36707: PUSH
36708: LD_VAR 0 5
36712: ARRAY
36713: PPUSH
36714: CALL_OW 1
36718: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36719: LD_ADDR_VAR 0 7
36723: PUSH
36724: LD_VAR 0 7
36728: PPUSH
36729: LD_VAR 0 5
36733: PUSH
36734: LD_INT 1
36736: MINUS
36737: PPUSH
36738: LD_VAR 0 6
36742: PPUSH
36743: CALL_OW 1
36747: ST_TO_ADDR
// end ;
36748: GO 36665
36750: POP
36751: POP
// result := s_arr [ 1 ] ;
36752: LD_ADDR_VAR 0 4
36756: PUSH
36757: LD_VAR 0 7
36761: PUSH
36762: LD_INT 1
36764: ARRAY
36765: ST_TO_ADDR
// end ; end ;
36766: LD_VAR 0 4
36770: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36771: LD_INT 0
36773: PPUSH
36774: PPUSH
// if not list then
36775: LD_VAR 0 1
36779: NOT
36780: IFFALSE 36784
// exit ;
36782: GO 36875
// i := list [ pos1 ] ;
36784: LD_ADDR_VAR 0 5
36788: PUSH
36789: LD_VAR 0 1
36793: PUSH
36794: LD_VAR 0 2
36798: ARRAY
36799: ST_TO_ADDR
// if not i then
36800: LD_VAR 0 5
36804: NOT
36805: IFFALSE 36809
// exit ;
36807: GO 36875
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36809: LD_ADDR_VAR 0 1
36813: PUSH
36814: LD_VAR 0 1
36818: PPUSH
36819: LD_VAR 0 2
36823: PPUSH
36824: LD_VAR 0 1
36828: PUSH
36829: LD_VAR 0 3
36833: ARRAY
36834: PPUSH
36835: CALL_OW 1
36839: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36840: LD_ADDR_VAR 0 1
36844: PUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: LD_VAR 0 3
36854: PPUSH
36855: LD_VAR 0 5
36859: PPUSH
36860: CALL_OW 1
36864: ST_TO_ADDR
// result := list ;
36865: LD_ADDR_VAR 0 4
36869: PUSH
36870: LD_VAR 0 1
36874: ST_TO_ADDR
// end ;
36875: LD_VAR 0 4
36879: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36880: LD_INT 0
36882: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36883: LD_ADDR_VAR 0 5
36887: PUSH
36888: LD_VAR 0 1
36892: PPUSH
36893: CALL_OW 250
36897: PPUSH
36898: LD_VAR 0 1
36902: PPUSH
36903: CALL_OW 251
36907: PPUSH
36908: LD_VAR 0 2
36912: PPUSH
36913: LD_VAR 0 3
36917: PPUSH
36918: LD_VAR 0 4
36922: PPUSH
36923: CALL 37301 0 5
36927: ST_TO_ADDR
// end ;
36928: LD_VAR 0 5
36932: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36933: LD_INT 0
36935: PPUSH
36936: PPUSH
36937: PPUSH
36938: PPUSH
// if not list or not unit then
36939: LD_VAR 0 2
36943: NOT
36944: PUSH
36945: LD_VAR 0 1
36949: NOT
36950: OR
36951: IFFALSE 36955
// exit ;
36953: GO 37296
// result := [ ] ;
36955: LD_ADDR_VAR 0 5
36959: PUSH
36960: EMPTY
36961: ST_TO_ADDR
// for i in list do
36962: LD_ADDR_VAR 0 6
36966: PUSH
36967: LD_VAR 0 2
36971: PUSH
36972: FOR_IN
36973: IFFALSE 37191
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36975: LD_ADDR_VAR 0 8
36979: PUSH
36980: LD_VAR 0 1
36984: PPUSH
36985: LD_VAR 0 6
36989: PUSH
36990: LD_INT 1
36992: ARRAY
36993: PPUSH
36994: LD_VAR 0 6
36998: PUSH
36999: LD_INT 2
37001: ARRAY
37002: PPUSH
37003: CALL_OW 297
37007: ST_TO_ADDR
// if not Count ( result ) then
37008: LD_VAR 0 5
37012: PPUSH
37013: CALL 33585 0 1
37017: NOT
37018: IFFALSE 37051
// begin result := Join ( result , [ i , tmp ] ) ;
37020: LD_ADDR_VAR 0 5
37024: PUSH
37025: LD_VAR 0 5
37029: PPUSH
37030: LD_VAR 0 6
37034: PUSH
37035: LD_VAR 0 8
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PPUSH
37044: CALL 69185 0 2
37048: ST_TO_ADDR
// continue ;
37049: GO 36972
// end ; if result [ result ] [ 2 ] <= tmp then
37051: LD_VAR 0 5
37055: PUSH
37056: LD_VAR 0 5
37060: ARRAY
37061: PUSH
37062: LD_INT 2
37064: ARRAY
37065: PUSH
37066: LD_VAR 0 8
37070: LESSEQUAL
37071: IFFALSE 37104
// result := Join ( result , [ i , tmp ] ) else
37073: LD_ADDR_VAR 0 5
37077: PUSH
37078: LD_VAR 0 5
37082: PPUSH
37083: LD_VAR 0 6
37087: PUSH
37088: LD_VAR 0 8
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PPUSH
37097: CALL 69185 0 2
37101: ST_TO_ADDR
37102: GO 37189
// begin for j := 1 to Count ( result ) do
37104: LD_ADDR_VAR 0 7
37108: PUSH
37109: DOUBLE
37110: LD_INT 1
37112: DEC
37113: ST_TO_ADDR
37114: LD_VAR 0 5
37118: PPUSH
37119: CALL 33585 0 1
37123: PUSH
37124: FOR_TO
37125: IFFALSE 37187
// begin if tmp < result [ j ] [ 2 ] then
37127: LD_VAR 0 8
37131: PUSH
37132: LD_VAR 0 5
37136: PUSH
37137: LD_VAR 0 7
37141: ARRAY
37142: PUSH
37143: LD_INT 2
37145: ARRAY
37146: LESS
37147: IFFALSE 37185
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37149: LD_ADDR_VAR 0 5
37153: PUSH
37154: LD_VAR 0 5
37158: PPUSH
37159: LD_VAR 0 7
37163: PPUSH
37164: LD_VAR 0 6
37168: PUSH
37169: LD_VAR 0 8
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PPUSH
37178: CALL_OW 2
37182: ST_TO_ADDR
// break ;
37183: GO 37187
// end ; end ;
37185: GO 37124
37187: POP
37188: POP
// end ; end ;
37189: GO 36972
37191: POP
37192: POP
// if result and not asc then
37193: LD_VAR 0 5
37197: PUSH
37198: LD_VAR 0 3
37202: NOT
37203: AND
37204: IFFALSE 37221
// result := ReverseArray ( result ) ;
37206: LD_ADDR_VAR 0 5
37210: PUSH
37211: LD_VAR 0 5
37215: PPUSH
37216: CALL 64461 0 1
37220: ST_TO_ADDR
// tmp := [ ] ;
37221: LD_ADDR_VAR 0 8
37225: PUSH
37226: EMPTY
37227: ST_TO_ADDR
// if mode then
37228: LD_VAR 0 4
37232: IFFALSE 37296
// begin for i := 1 to result do
37234: LD_ADDR_VAR 0 6
37238: PUSH
37239: DOUBLE
37240: LD_INT 1
37242: DEC
37243: ST_TO_ADDR
37244: LD_VAR 0 5
37248: PUSH
37249: FOR_TO
37250: IFFALSE 37284
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37252: LD_ADDR_VAR 0 8
37256: PUSH
37257: LD_VAR 0 8
37261: PPUSH
37262: LD_VAR 0 5
37266: PUSH
37267: LD_VAR 0 6
37271: ARRAY
37272: PUSH
37273: LD_INT 1
37275: ARRAY
37276: PPUSH
37277: CALL 69185 0 2
37281: ST_TO_ADDR
37282: GO 37249
37284: POP
37285: POP
// result := tmp ;
37286: LD_ADDR_VAR 0 5
37290: PUSH
37291: LD_VAR 0 8
37295: ST_TO_ADDR
// end ; end ;
37296: LD_VAR 0 5
37300: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37301: LD_INT 0
37303: PPUSH
37304: PPUSH
37305: PPUSH
37306: PPUSH
// if not list then
37307: LD_VAR 0 3
37311: NOT
37312: IFFALSE 37316
// exit ;
37314: GO 37704
// result := [ ] ;
37316: LD_ADDR_VAR 0 6
37320: PUSH
37321: EMPTY
37322: ST_TO_ADDR
// for i in list do
37323: LD_ADDR_VAR 0 7
37327: PUSH
37328: LD_VAR 0 3
37332: PUSH
37333: FOR_IN
37334: IFFALSE 37536
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37336: LD_ADDR_VAR 0 9
37340: PUSH
37341: LD_VAR 0 7
37345: PPUSH
37346: LD_VAR 0 1
37350: PPUSH
37351: LD_VAR 0 2
37355: PPUSH
37356: CALL_OW 297
37360: ST_TO_ADDR
// if not result then
37361: LD_VAR 0 6
37365: NOT
37366: IFFALSE 37392
// result := [ [ i , tmp ] ] else
37368: LD_ADDR_VAR 0 6
37372: PUSH
37373: LD_VAR 0 7
37377: PUSH
37378: LD_VAR 0 9
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: EMPTY
37388: LIST
37389: ST_TO_ADDR
37390: GO 37534
// begin if result [ result ] [ 2 ] < tmp then
37392: LD_VAR 0 6
37396: PUSH
37397: LD_VAR 0 6
37401: ARRAY
37402: PUSH
37403: LD_INT 2
37405: ARRAY
37406: PUSH
37407: LD_VAR 0 9
37411: LESS
37412: IFFALSE 37454
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37414: LD_ADDR_VAR 0 6
37418: PUSH
37419: LD_VAR 0 6
37423: PPUSH
37424: LD_VAR 0 6
37428: PUSH
37429: LD_INT 1
37431: PLUS
37432: PPUSH
37433: LD_VAR 0 7
37437: PUSH
37438: LD_VAR 0 9
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PPUSH
37447: CALL_OW 2
37451: ST_TO_ADDR
37452: GO 37534
// for j = 1 to result do
37454: LD_ADDR_VAR 0 8
37458: PUSH
37459: DOUBLE
37460: LD_INT 1
37462: DEC
37463: ST_TO_ADDR
37464: LD_VAR 0 6
37468: PUSH
37469: FOR_TO
37470: IFFALSE 37532
// begin if tmp < result [ j ] [ 2 ] then
37472: LD_VAR 0 9
37476: PUSH
37477: LD_VAR 0 6
37481: PUSH
37482: LD_VAR 0 8
37486: ARRAY
37487: PUSH
37488: LD_INT 2
37490: ARRAY
37491: LESS
37492: IFFALSE 37530
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37494: LD_ADDR_VAR 0 6
37498: PUSH
37499: LD_VAR 0 6
37503: PPUSH
37504: LD_VAR 0 8
37508: PPUSH
37509: LD_VAR 0 7
37513: PUSH
37514: LD_VAR 0 9
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PPUSH
37523: CALL_OW 2
37527: ST_TO_ADDR
// break ;
37528: GO 37532
// end ; end ;
37530: GO 37469
37532: POP
37533: POP
// end ; end ;
37534: GO 37333
37536: POP
37537: POP
// if result and not asc then
37538: LD_VAR 0 6
37542: PUSH
37543: LD_VAR 0 4
37547: NOT
37548: AND
37549: IFFALSE 37624
// begin tmp := result ;
37551: LD_ADDR_VAR 0 9
37555: PUSH
37556: LD_VAR 0 6
37560: ST_TO_ADDR
// for i = tmp downto 1 do
37561: LD_ADDR_VAR 0 7
37565: PUSH
37566: DOUBLE
37567: LD_VAR 0 9
37571: INC
37572: ST_TO_ADDR
37573: LD_INT 1
37575: PUSH
37576: FOR_DOWNTO
37577: IFFALSE 37622
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37579: LD_ADDR_VAR 0 6
37583: PUSH
37584: LD_VAR 0 6
37588: PPUSH
37589: LD_VAR 0 9
37593: PUSH
37594: LD_VAR 0 7
37598: MINUS
37599: PUSH
37600: LD_INT 1
37602: PLUS
37603: PPUSH
37604: LD_VAR 0 9
37608: PUSH
37609: LD_VAR 0 7
37613: ARRAY
37614: PPUSH
37615: CALL_OW 1
37619: ST_TO_ADDR
37620: GO 37576
37622: POP
37623: POP
// end ; tmp := [ ] ;
37624: LD_ADDR_VAR 0 9
37628: PUSH
37629: EMPTY
37630: ST_TO_ADDR
// if mode then
37631: LD_VAR 0 5
37635: IFFALSE 37704
// begin for i = 1 to result do
37637: LD_ADDR_VAR 0 7
37641: PUSH
37642: DOUBLE
37643: LD_INT 1
37645: DEC
37646: ST_TO_ADDR
37647: LD_VAR 0 6
37651: PUSH
37652: FOR_TO
37653: IFFALSE 37692
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37655: LD_ADDR_VAR 0 9
37659: PUSH
37660: LD_VAR 0 9
37664: PPUSH
37665: LD_VAR 0 7
37669: PPUSH
37670: LD_VAR 0 6
37674: PUSH
37675: LD_VAR 0 7
37679: ARRAY
37680: PUSH
37681: LD_INT 1
37683: ARRAY
37684: PPUSH
37685: CALL_OW 1
37689: ST_TO_ADDR
37690: GO 37652
37692: POP
37693: POP
// result := tmp ;
37694: LD_ADDR_VAR 0 6
37698: PUSH
37699: LD_VAR 0 9
37703: ST_TO_ADDR
// end ; end ;
37704: LD_VAR 0 6
37708: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37709: LD_INT 0
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
37715: PPUSH
37716: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37717: LD_ADDR_VAR 0 5
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: EMPTY
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: ST_TO_ADDR
// if not x or not y then
37739: LD_VAR 0 2
37743: NOT
37744: PUSH
37745: LD_VAR 0 3
37749: NOT
37750: OR
37751: IFFALSE 37755
// exit ;
37753: GO 39405
// if not range then
37755: LD_VAR 0 4
37759: NOT
37760: IFFALSE 37770
// range := 10 ;
37762: LD_ADDR_VAR 0 4
37766: PUSH
37767: LD_INT 10
37769: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37770: LD_ADDR_VAR 0 8
37774: PUSH
37775: LD_INT 81
37777: PUSH
37778: LD_VAR 0 1
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 92
37789: PUSH
37790: LD_VAR 0 2
37794: PUSH
37795: LD_VAR 0 3
37799: PUSH
37800: LD_VAR 0 4
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 3
37813: PUSH
37814: LD_INT 21
37816: PUSH
37817: LD_INT 3
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: LIST
37832: PPUSH
37833: CALL_OW 69
37837: ST_TO_ADDR
// if not tmp then
37838: LD_VAR 0 8
37842: NOT
37843: IFFALSE 37847
// exit ;
37845: GO 39405
// for i in tmp do
37847: LD_ADDR_VAR 0 6
37851: PUSH
37852: LD_VAR 0 8
37856: PUSH
37857: FOR_IN
37858: IFFALSE 39380
// begin points := [ 0 , 0 , 0 ] ;
37860: LD_ADDR_VAR 0 9
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: LIST
37878: ST_TO_ADDR
// bpoints := 1 ;
37879: LD_ADDR_VAR 0 10
37883: PUSH
37884: LD_INT 1
37886: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37887: LD_VAR 0 6
37891: PPUSH
37892: CALL_OW 247
37896: PUSH
37897: LD_INT 1
37899: DOUBLE
37900: EQUAL
37901: IFTRUE 37905
37903: GO 38483
37905: POP
// begin if GetClass ( i ) = 1 then
37906: LD_VAR 0 6
37910: PPUSH
37911: CALL_OW 257
37915: PUSH
37916: LD_INT 1
37918: EQUAL
37919: IFFALSE 37940
// points := [ 10 , 5 , 3 ] ;
37921: LD_ADDR_VAR 0 9
37925: PUSH
37926: LD_INT 10
37928: PUSH
37929: LD_INT 5
37931: PUSH
37932: LD_INT 3
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37940: LD_VAR 0 6
37944: PPUSH
37945: CALL_OW 257
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 3
37955: PUSH
37956: LD_INT 4
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: LIST
37963: IN
37964: IFFALSE 37985
// points := [ 3 , 2 , 1 ] ;
37966: LD_ADDR_VAR 0 9
37970: PUSH
37971: LD_INT 3
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37985: LD_VAR 0 6
37989: PPUSH
37990: CALL_OW 257
37994: PUSH
37995: LD_INT 5
37997: EQUAL
37998: IFFALSE 38019
// points := [ 130 , 5 , 2 ] ;
38000: LD_ADDR_VAR 0 9
38004: PUSH
38005: LD_INT 130
38007: PUSH
38008: LD_INT 5
38010: PUSH
38011: LD_INT 2
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38019: LD_VAR 0 6
38023: PPUSH
38024: CALL_OW 257
38028: PUSH
38029: LD_INT 8
38031: EQUAL
38032: IFFALSE 38053
// points := [ 35 , 35 , 30 ] ;
38034: LD_ADDR_VAR 0 9
38038: PUSH
38039: LD_INT 35
38041: PUSH
38042: LD_INT 35
38044: PUSH
38045: LD_INT 30
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38053: LD_VAR 0 6
38057: PPUSH
38058: CALL_OW 257
38062: PUSH
38063: LD_INT 9
38065: EQUAL
38066: IFFALSE 38087
// points := [ 20 , 55 , 40 ] ;
38068: LD_ADDR_VAR 0 9
38072: PUSH
38073: LD_INT 20
38075: PUSH
38076: LD_INT 55
38078: PUSH
38079: LD_INT 40
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38087: LD_VAR 0 6
38091: PPUSH
38092: CALL_OW 257
38096: PUSH
38097: LD_INT 12
38099: PUSH
38100: LD_INT 16
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: IN
38107: IFFALSE 38128
// points := [ 5 , 3 , 2 ] ;
38109: LD_ADDR_VAR 0 9
38113: PUSH
38114: LD_INT 5
38116: PUSH
38117: LD_INT 3
38119: PUSH
38120: LD_INT 2
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38128: LD_VAR 0 6
38132: PPUSH
38133: CALL_OW 257
38137: PUSH
38138: LD_INT 17
38140: EQUAL
38141: IFFALSE 38162
// points := [ 100 , 50 , 75 ] ;
38143: LD_ADDR_VAR 0 9
38147: PUSH
38148: LD_INT 100
38150: PUSH
38151: LD_INT 50
38153: PUSH
38154: LD_INT 75
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38162: LD_VAR 0 6
38166: PPUSH
38167: CALL_OW 257
38171: PUSH
38172: LD_INT 15
38174: EQUAL
38175: IFFALSE 38196
// points := [ 10 , 5 , 3 ] ;
38177: LD_ADDR_VAR 0 9
38181: PUSH
38182: LD_INT 10
38184: PUSH
38185: LD_INT 5
38187: PUSH
38188: LD_INT 3
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38196: LD_VAR 0 6
38200: PPUSH
38201: CALL_OW 257
38205: PUSH
38206: LD_INT 14
38208: EQUAL
38209: IFFALSE 38230
// points := [ 10 , 0 , 0 ] ;
38211: LD_ADDR_VAR 0 9
38215: PUSH
38216: LD_INT 10
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38230: LD_VAR 0 6
38234: PPUSH
38235: CALL_OW 257
38239: PUSH
38240: LD_INT 11
38242: EQUAL
38243: IFFALSE 38264
// points := [ 30 , 10 , 5 ] ;
38245: LD_ADDR_VAR 0 9
38249: PUSH
38250: LD_INT 30
38252: PUSH
38253: LD_INT 10
38255: PUSH
38256: LD_INT 5
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38264: LD_VAR 0 1
38268: PPUSH
38269: LD_INT 5
38271: PPUSH
38272: CALL_OW 321
38276: PUSH
38277: LD_INT 2
38279: EQUAL
38280: IFFALSE 38297
// bpoints := bpoints * 1.8 ;
38282: LD_ADDR_VAR 0 10
38286: PUSH
38287: LD_VAR 0 10
38291: PUSH
38292: LD_REAL  1.80000000000000E+0000
38295: MUL
38296: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38297: LD_VAR 0 6
38301: PPUSH
38302: CALL_OW 257
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: LD_INT 3
38315: PUSH
38316: LD_INT 4
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: IN
38325: PUSH
38326: LD_VAR 0 1
38330: PPUSH
38331: LD_INT 51
38333: PPUSH
38334: CALL_OW 321
38338: PUSH
38339: LD_INT 2
38341: EQUAL
38342: AND
38343: IFFALSE 38360
// bpoints := bpoints * 1.2 ;
38345: LD_ADDR_VAR 0 10
38349: PUSH
38350: LD_VAR 0 10
38354: PUSH
38355: LD_REAL  1.20000000000000E+0000
38358: MUL
38359: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38360: LD_VAR 0 6
38364: PPUSH
38365: CALL_OW 257
38369: PUSH
38370: LD_INT 5
38372: PUSH
38373: LD_INT 7
38375: PUSH
38376: LD_INT 9
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: IN
38384: PUSH
38385: LD_VAR 0 1
38389: PPUSH
38390: LD_INT 52
38392: PPUSH
38393: CALL_OW 321
38397: PUSH
38398: LD_INT 2
38400: EQUAL
38401: AND
38402: IFFALSE 38419
// bpoints := bpoints * 1.5 ;
38404: LD_ADDR_VAR 0 10
38408: PUSH
38409: LD_VAR 0 10
38413: PUSH
38414: LD_REAL  1.50000000000000E+0000
38417: MUL
38418: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38419: LD_VAR 0 1
38423: PPUSH
38424: LD_INT 66
38426: PPUSH
38427: CALL_OW 321
38431: PUSH
38432: LD_INT 2
38434: EQUAL
38435: IFFALSE 38452
// bpoints := bpoints * 1.1 ;
38437: LD_ADDR_VAR 0 10
38441: PUSH
38442: LD_VAR 0 10
38446: PUSH
38447: LD_REAL  1.10000000000000E+0000
38450: MUL
38451: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38452: LD_ADDR_VAR 0 10
38456: PUSH
38457: LD_VAR 0 10
38461: PUSH
38462: LD_VAR 0 6
38466: PPUSH
38467: LD_INT 1
38469: PPUSH
38470: CALL_OW 259
38474: PUSH
38475: LD_REAL  1.15000000000000E+0000
38478: MUL
38479: MUL
38480: ST_TO_ADDR
// end ; unit_vehicle :
38481: GO 39309
38483: LD_INT 2
38485: DOUBLE
38486: EQUAL
38487: IFTRUE 38491
38489: GO 39297
38491: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38492: LD_VAR 0 6
38496: PPUSH
38497: CALL_OW 264
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: LD_INT 42
38507: PUSH
38508: LD_INT 24
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: IN
38516: IFFALSE 38537
// points := [ 25 , 5 , 3 ] ;
38518: LD_ADDR_VAR 0 9
38522: PUSH
38523: LD_INT 25
38525: PUSH
38526: LD_INT 5
38528: PUSH
38529: LD_INT 3
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38537: LD_VAR 0 6
38541: PPUSH
38542: CALL_OW 264
38546: PUSH
38547: LD_INT 4
38549: PUSH
38550: LD_INT 43
38552: PUSH
38553: LD_INT 25
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: IN
38561: IFFALSE 38582
// points := [ 40 , 15 , 5 ] ;
38563: LD_ADDR_VAR 0 9
38567: PUSH
38568: LD_INT 40
38570: PUSH
38571: LD_INT 15
38573: PUSH
38574: LD_INT 5
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38582: LD_VAR 0 6
38586: PPUSH
38587: CALL_OW 264
38591: PUSH
38592: LD_INT 3
38594: PUSH
38595: LD_INT 23
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: IN
38602: IFFALSE 38623
// points := [ 7 , 25 , 8 ] ;
38604: LD_ADDR_VAR 0 9
38608: PUSH
38609: LD_INT 7
38611: PUSH
38612: LD_INT 25
38614: PUSH
38615: LD_INT 8
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38623: LD_VAR 0 6
38627: PPUSH
38628: CALL_OW 264
38632: PUSH
38633: LD_INT 5
38635: PUSH
38636: LD_INT 27
38638: PUSH
38639: LD_INT 44
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: IN
38647: IFFALSE 38668
// points := [ 14 , 50 , 16 ] ;
38649: LD_ADDR_VAR 0 9
38653: PUSH
38654: LD_INT 14
38656: PUSH
38657: LD_INT 50
38659: PUSH
38660: LD_INT 16
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38668: LD_VAR 0 6
38672: PPUSH
38673: CALL_OW 264
38677: PUSH
38678: LD_INT 6
38680: PUSH
38681: LD_INT 46
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: IN
38688: IFFALSE 38709
// points := [ 32 , 120 , 70 ] ;
38690: LD_ADDR_VAR 0 9
38694: PUSH
38695: LD_INT 32
38697: PUSH
38698: LD_INT 120
38700: PUSH
38701: LD_INT 70
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: LIST
38708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38709: LD_VAR 0 6
38713: PPUSH
38714: CALL_OW 264
38718: PUSH
38719: LD_INT 7
38721: PUSH
38722: LD_INT 28
38724: PUSH
38725: LD_INT 45
38727: PUSH
38728: LD_INT 92
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: IN
38737: IFFALSE 38758
// points := [ 35 , 20 , 45 ] ;
38739: LD_ADDR_VAR 0 9
38743: PUSH
38744: LD_INT 35
38746: PUSH
38747: LD_INT 20
38749: PUSH
38750: LD_INT 45
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38758: LD_VAR 0 6
38762: PPUSH
38763: CALL_OW 264
38767: PUSH
38768: LD_INT 47
38770: PUSH
38771: EMPTY
38772: LIST
38773: IN
38774: IFFALSE 38795
// points := [ 67 , 45 , 75 ] ;
38776: LD_ADDR_VAR 0 9
38780: PUSH
38781: LD_INT 67
38783: PUSH
38784: LD_INT 45
38786: PUSH
38787: LD_INT 75
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: LIST
38794: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38795: LD_VAR 0 6
38799: PPUSH
38800: CALL_OW 264
38804: PUSH
38805: LD_INT 26
38807: PUSH
38808: EMPTY
38809: LIST
38810: IN
38811: IFFALSE 38832
// points := [ 120 , 30 , 80 ] ;
38813: LD_ADDR_VAR 0 9
38817: PUSH
38818: LD_INT 120
38820: PUSH
38821: LD_INT 30
38823: PUSH
38824: LD_INT 80
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38832: LD_VAR 0 6
38836: PPUSH
38837: CALL_OW 264
38841: PUSH
38842: LD_INT 22
38844: PUSH
38845: EMPTY
38846: LIST
38847: IN
38848: IFFALSE 38869
// points := [ 40 , 1 , 1 ] ;
38850: LD_ADDR_VAR 0 9
38854: PUSH
38855: LD_INT 40
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: LIST
38868: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38869: LD_VAR 0 6
38873: PPUSH
38874: CALL_OW 264
38878: PUSH
38879: LD_INT 29
38881: PUSH
38882: EMPTY
38883: LIST
38884: IN
38885: IFFALSE 38906
// points := [ 70 , 200 , 400 ] ;
38887: LD_ADDR_VAR 0 9
38891: PUSH
38892: LD_INT 70
38894: PUSH
38895: LD_INT 200
38897: PUSH
38898: LD_INT 400
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38906: LD_VAR 0 6
38910: PPUSH
38911: CALL_OW 264
38915: PUSH
38916: LD_INT 14
38918: PUSH
38919: LD_INT 53
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: IN
38926: IFFALSE 38947
// points := [ 40 , 10 , 20 ] ;
38928: LD_ADDR_VAR 0 9
38932: PUSH
38933: LD_INT 40
38935: PUSH
38936: LD_INT 10
38938: PUSH
38939: LD_INT 20
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38947: LD_VAR 0 6
38951: PPUSH
38952: CALL_OW 264
38956: PUSH
38957: LD_INT 9
38959: PUSH
38960: EMPTY
38961: LIST
38962: IN
38963: IFFALSE 38984
// points := [ 5 , 70 , 20 ] ;
38965: LD_ADDR_VAR 0 9
38969: PUSH
38970: LD_INT 5
38972: PUSH
38973: LD_INT 70
38975: PUSH
38976: LD_INT 20
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38984: LD_VAR 0 6
38988: PPUSH
38989: CALL_OW 264
38993: PUSH
38994: LD_INT 10
38996: PUSH
38997: EMPTY
38998: LIST
38999: IN
39000: IFFALSE 39021
// points := [ 35 , 110 , 70 ] ;
39002: LD_ADDR_VAR 0 9
39006: PUSH
39007: LD_INT 35
39009: PUSH
39010: LD_INT 110
39012: PUSH
39013: LD_INT 70
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39021: LD_VAR 0 6
39025: PPUSH
39026: CALL_OW 265
39030: PUSH
39031: LD_INT 25
39033: EQUAL
39034: IFFALSE 39055
// points := [ 80 , 65 , 100 ] ;
39036: LD_ADDR_VAR 0 9
39040: PUSH
39041: LD_INT 80
39043: PUSH
39044: LD_INT 65
39046: PUSH
39047: LD_INT 100
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39055: LD_VAR 0 6
39059: PPUSH
39060: CALL_OW 263
39064: PUSH
39065: LD_INT 1
39067: EQUAL
39068: IFFALSE 39103
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39070: LD_ADDR_VAR 0 10
39074: PUSH
39075: LD_VAR 0 10
39079: PUSH
39080: LD_VAR 0 6
39084: PPUSH
39085: CALL_OW 311
39089: PPUSH
39090: LD_INT 3
39092: PPUSH
39093: CALL_OW 259
39097: PUSH
39098: LD_INT 4
39100: MUL
39101: MUL
39102: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39103: LD_VAR 0 6
39107: PPUSH
39108: CALL_OW 263
39112: PUSH
39113: LD_INT 2
39115: EQUAL
39116: IFFALSE 39167
// begin j := IsControledBy ( i ) ;
39118: LD_ADDR_VAR 0 7
39122: PUSH
39123: LD_VAR 0 6
39127: PPUSH
39128: CALL_OW 312
39132: ST_TO_ADDR
// if j then
39133: LD_VAR 0 7
39137: IFFALSE 39167
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39139: LD_ADDR_VAR 0 10
39143: PUSH
39144: LD_VAR 0 10
39148: PUSH
39149: LD_VAR 0 7
39153: PPUSH
39154: LD_INT 3
39156: PPUSH
39157: CALL_OW 259
39161: PUSH
39162: LD_INT 3
39164: MUL
39165: MUL
39166: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39167: LD_VAR 0 6
39171: PPUSH
39172: CALL_OW 264
39176: PUSH
39177: LD_INT 5
39179: PUSH
39180: LD_INT 6
39182: PUSH
39183: LD_INT 46
39185: PUSH
39186: LD_INT 44
39188: PUSH
39189: LD_INT 47
39191: PUSH
39192: LD_INT 45
39194: PUSH
39195: LD_INT 28
39197: PUSH
39198: LD_INT 7
39200: PUSH
39201: LD_INT 27
39203: PUSH
39204: LD_INT 29
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: IN
39219: PUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: LD_INT 52
39227: PPUSH
39228: CALL_OW 321
39232: PUSH
39233: LD_INT 2
39235: EQUAL
39236: AND
39237: IFFALSE 39254
// bpoints := bpoints * 1.2 ;
39239: LD_ADDR_VAR 0 10
39243: PUSH
39244: LD_VAR 0 10
39248: PUSH
39249: LD_REAL  1.20000000000000E+0000
39252: MUL
39253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39254: LD_VAR 0 6
39258: PPUSH
39259: CALL_OW 264
39263: PUSH
39264: LD_INT 6
39266: PUSH
39267: LD_INT 46
39269: PUSH
39270: LD_INT 47
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: IN
39278: IFFALSE 39295
// bpoints := bpoints * 1.2 ;
39280: LD_ADDR_VAR 0 10
39284: PUSH
39285: LD_VAR 0 10
39289: PUSH
39290: LD_REAL  1.20000000000000E+0000
39293: MUL
39294: ST_TO_ADDR
// end ; unit_building :
39295: GO 39309
39297: LD_INT 3
39299: DOUBLE
39300: EQUAL
39301: IFTRUE 39305
39303: GO 39308
39305: POP
// ; end ;
39306: GO 39309
39308: POP
// for j = 1 to 3 do
39309: LD_ADDR_VAR 0 7
39313: PUSH
39314: DOUBLE
39315: LD_INT 1
39317: DEC
39318: ST_TO_ADDR
39319: LD_INT 3
39321: PUSH
39322: FOR_TO
39323: IFFALSE 39376
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39325: LD_ADDR_VAR 0 5
39329: PUSH
39330: LD_VAR 0 5
39334: PPUSH
39335: LD_VAR 0 7
39339: PPUSH
39340: LD_VAR 0 5
39344: PUSH
39345: LD_VAR 0 7
39349: ARRAY
39350: PUSH
39351: LD_VAR 0 9
39355: PUSH
39356: LD_VAR 0 7
39360: ARRAY
39361: PUSH
39362: LD_VAR 0 10
39366: MUL
39367: PLUS
39368: PPUSH
39369: CALL_OW 1
39373: ST_TO_ADDR
39374: GO 39322
39376: POP
39377: POP
// end ;
39378: GO 37857
39380: POP
39381: POP
// result := Replace ( result , 4 , tmp ) ;
39382: LD_ADDR_VAR 0 5
39386: PUSH
39387: LD_VAR 0 5
39391: PPUSH
39392: LD_INT 4
39394: PPUSH
39395: LD_VAR 0 8
39399: PPUSH
39400: CALL_OW 1
39404: ST_TO_ADDR
// end ;
39405: LD_VAR 0 5
39409: RET
// export function DangerAtRange ( unit , range ) ; begin
39410: LD_INT 0
39412: PPUSH
// if not unit then
39413: LD_VAR 0 1
39417: NOT
39418: IFFALSE 39422
// exit ;
39420: GO 39467
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39422: LD_ADDR_VAR 0 3
39426: PUSH
39427: LD_VAR 0 1
39431: PPUSH
39432: CALL_OW 255
39436: PPUSH
39437: LD_VAR 0 1
39441: PPUSH
39442: CALL_OW 250
39446: PPUSH
39447: LD_VAR 0 1
39451: PPUSH
39452: CALL_OW 251
39456: PPUSH
39457: LD_VAR 0 2
39461: PPUSH
39462: CALL 37709 0 4
39466: ST_TO_ADDR
// end ;
39467: LD_VAR 0 3
39471: RET
// export function DangerInArea ( side , area ) ; begin
39472: LD_INT 0
39474: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39475: LD_ADDR_VAR 0 3
39479: PUSH
39480: LD_VAR 0 2
39484: PPUSH
39485: LD_INT 81
39487: PUSH
39488: LD_VAR 0 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PPUSH
39497: CALL_OW 70
39501: ST_TO_ADDR
// end ;
39502: LD_VAR 0 3
39506: RET
// export function IsExtension ( b ) ; begin
39507: LD_INT 0
39509: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39510: LD_ADDR_VAR 0 2
39514: PUSH
39515: LD_VAR 0 1
39519: PUSH
39520: LD_INT 23
39522: PUSH
39523: LD_INT 20
39525: PUSH
39526: LD_INT 22
39528: PUSH
39529: LD_INT 17
39531: PUSH
39532: LD_INT 24
39534: PUSH
39535: LD_INT 21
39537: PUSH
39538: LD_INT 19
39540: PUSH
39541: LD_INT 16
39543: PUSH
39544: LD_INT 25
39546: PUSH
39547: LD_INT 18
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: IN
39562: ST_TO_ADDR
// end ;
39563: LD_VAR 0 2
39567: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39568: LD_INT 0
39570: PPUSH
39571: PPUSH
39572: PPUSH
// result := [ ] ;
39573: LD_ADDR_VAR 0 4
39577: PUSH
39578: EMPTY
39579: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39580: LD_ADDR_VAR 0 5
39584: PUSH
39585: LD_VAR 0 2
39589: PPUSH
39590: LD_INT 21
39592: PUSH
39593: LD_INT 3
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PPUSH
39600: CALL_OW 70
39604: ST_TO_ADDR
// if not tmp then
39605: LD_VAR 0 5
39609: NOT
39610: IFFALSE 39614
// exit ;
39612: GO 39678
// if checkLink then
39614: LD_VAR 0 3
39618: IFFALSE 39668
// begin for i in tmp do
39620: LD_ADDR_VAR 0 6
39624: PUSH
39625: LD_VAR 0 5
39629: PUSH
39630: FOR_IN
39631: IFFALSE 39666
// if GetBase ( i ) <> base then
39633: LD_VAR 0 6
39637: PPUSH
39638: CALL_OW 274
39642: PUSH
39643: LD_VAR 0 1
39647: NONEQUAL
39648: IFFALSE 39664
// ComLinkToBase ( base , i ) ;
39650: LD_VAR 0 1
39654: PPUSH
39655: LD_VAR 0 6
39659: PPUSH
39660: CALL_OW 169
39664: GO 39630
39666: POP
39667: POP
// end ; result := tmp ;
39668: LD_ADDR_VAR 0 4
39672: PUSH
39673: LD_VAR 0 5
39677: ST_TO_ADDR
// end ;
39678: LD_VAR 0 4
39682: RET
// export function ComComplete ( units , b ) ; var i ; begin
39683: LD_INT 0
39685: PPUSH
39686: PPUSH
// if not units then
39687: LD_VAR 0 1
39691: NOT
39692: IFFALSE 39696
// exit ;
39694: GO 39786
// for i in units do
39696: LD_ADDR_VAR 0 4
39700: PUSH
39701: LD_VAR 0 1
39705: PUSH
39706: FOR_IN
39707: IFFALSE 39784
// if BuildingStatus ( b ) = bs_build then
39709: LD_VAR 0 2
39713: PPUSH
39714: CALL_OW 461
39718: PUSH
39719: LD_INT 1
39721: EQUAL
39722: IFFALSE 39782
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39724: LD_VAR 0 4
39728: PPUSH
39729: LD_STRING h
39731: PUSH
39732: LD_VAR 0 2
39736: PPUSH
39737: CALL_OW 250
39741: PUSH
39742: LD_VAR 0 2
39746: PPUSH
39747: CALL_OW 251
39751: PUSH
39752: LD_VAR 0 2
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: PUSH
39775: EMPTY
39776: LIST
39777: PPUSH
39778: CALL_OW 446
39782: GO 39706
39784: POP
39785: POP
// end ;
39786: LD_VAR 0 3
39790: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39791: LD_INT 0
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39799: LD_VAR 0 1
39803: NOT
39804: PUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 263
39814: PUSH
39815: LD_INT 2
39817: NONEQUAL
39818: OR
39819: IFFALSE 39823
// exit ;
39821: GO 40139
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39823: LD_ADDR_VAR 0 6
39827: PUSH
39828: LD_INT 22
39830: PUSH
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 255
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: LD_INT 30
39850: PUSH
39851: LD_INT 36
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 34
39860: PUSH
39861: LD_INT 31
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PPUSH
39877: CALL_OW 69
39881: ST_TO_ADDR
// if not tmp then
39882: LD_VAR 0 6
39886: NOT
39887: IFFALSE 39891
// exit ;
39889: GO 40139
// result := [ ] ;
39891: LD_ADDR_VAR 0 2
39895: PUSH
39896: EMPTY
39897: ST_TO_ADDR
// for i in tmp do
39898: LD_ADDR_VAR 0 3
39902: PUSH
39903: LD_VAR 0 6
39907: PUSH
39908: FOR_IN
39909: IFFALSE 39980
// begin t := UnitsInside ( i ) ;
39911: LD_ADDR_VAR 0 4
39915: PUSH
39916: LD_VAR 0 3
39920: PPUSH
39921: CALL_OW 313
39925: ST_TO_ADDR
// if t then
39926: LD_VAR 0 4
39930: IFFALSE 39978
// for j in t do
39932: LD_ADDR_VAR 0 7
39936: PUSH
39937: LD_VAR 0 4
39941: PUSH
39942: FOR_IN
39943: IFFALSE 39976
// result := Replace ( result , result + 1 , j ) ;
39945: LD_ADDR_VAR 0 2
39949: PUSH
39950: LD_VAR 0 2
39954: PPUSH
39955: LD_VAR 0 2
39959: PUSH
39960: LD_INT 1
39962: PLUS
39963: PPUSH
39964: LD_VAR 0 7
39968: PPUSH
39969: CALL_OW 1
39973: ST_TO_ADDR
39974: GO 39942
39976: POP
39977: POP
// end ;
39978: GO 39908
39980: POP
39981: POP
// if not result then
39982: LD_VAR 0 2
39986: NOT
39987: IFFALSE 39991
// exit ;
39989: GO 40139
// mech := result [ 1 ] ;
39991: LD_ADDR_VAR 0 5
39995: PUSH
39996: LD_VAR 0 2
40000: PUSH
40001: LD_INT 1
40003: ARRAY
40004: ST_TO_ADDR
// if result > 1 then
40005: LD_VAR 0 2
40009: PUSH
40010: LD_INT 1
40012: GREATER
40013: IFFALSE 40125
// begin for i = 2 to result do
40015: LD_ADDR_VAR 0 3
40019: PUSH
40020: DOUBLE
40021: LD_INT 2
40023: DEC
40024: ST_TO_ADDR
40025: LD_VAR 0 2
40029: PUSH
40030: FOR_TO
40031: IFFALSE 40123
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40033: LD_ADDR_VAR 0 4
40037: PUSH
40038: LD_VAR 0 2
40042: PUSH
40043: LD_VAR 0 3
40047: ARRAY
40048: PPUSH
40049: LD_INT 3
40051: PPUSH
40052: CALL_OW 259
40056: PUSH
40057: LD_VAR 0 2
40061: PUSH
40062: LD_VAR 0 3
40066: ARRAY
40067: PPUSH
40068: CALL_OW 432
40072: MINUS
40073: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40074: LD_VAR 0 4
40078: PUSH
40079: LD_VAR 0 5
40083: PPUSH
40084: LD_INT 3
40086: PPUSH
40087: CALL_OW 259
40091: PUSH
40092: LD_VAR 0 5
40096: PPUSH
40097: CALL_OW 432
40101: MINUS
40102: GREATEREQUAL
40103: IFFALSE 40121
// mech := result [ i ] ;
40105: LD_ADDR_VAR 0 5
40109: PUSH
40110: LD_VAR 0 2
40114: PUSH
40115: LD_VAR 0 3
40119: ARRAY
40120: ST_TO_ADDR
// end ;
40121: GO 40030
40123: POP
40124: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40125: LD_VAR 0 1
40129: PPUSH
40130: LD_VAR 0 5
40134: PPUSH
40135: CALL_OW 135
// end ;
40139: LD_VAR 0 2
40143: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40144: LD_INT 0
40146: PPUSH
40147: PPUSH
40148: PPUSH
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
// result := [ ] ;
40159: LD_ADDR_VAR 0 7
40163: PUSH
40164: EMPTY
40165: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40166: LD_VAR 0 1
40170: PPUSH
40171: CALL_OW 266
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: IN
40186: NOT
40187: IFFALSE 40191
// exit ;
40189: GO 41825
// if name then
40191: LD_VAR 0 3
40195: IFFALSE 40211
// SetBName ( base_dep , name ) ;
40197: LD_VAR 0 1
40201: PPUSH
40202: LD_VAR 0 3
40206: PPUSH
40207: CALL_OW 500
// base := GetBase ( base_dep ) ;
40211: LD_ADDR_VAR 0 15
40215: PUSH
40216: LD_VAR 0 1
40220: PPUSH
40221: CALL_OW 274
40225: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40226: LD_ADDR_VAR 0 16
40230: PUSH
40231: LD_VAR 0 1
40235: PPUSH
40236: CALL_OW 255
40240: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40241: LD_ADDR_VAR 0 17
40245: PUSH
40246: LD_VAR 0 1
40250: PPUSH
40251: CALL_OW 248
40255: ST_TO_ADDR
// if sources then
40256: LD_VAR 0 5
40260: IFFALSE 40307
// for i = 1 to 3 do
40262: LD_ADDR_VAR 0 8
40266: PUSH
40267: DOUBLE
40268: LD_INT 1
40270: DEC
40271: ST_TO_ADDR
40272: LD_INT 3
40274: PUSH
40275: FOR_TO
40276: IFFALSE 40305
// AddResourceType ( base , i , sources [ i ] ) ;
40278: LD_VAR 0 15
40282: PPUSH
40283: LD_VAR 0 8
40287: PPUSH
40288: LD_VAR 0 5
40292: PUSH
40293: LD_VAR 0 8
40297: ARRAY
40298: PPUSH
40299: CALL_OW 276
40303: GO 40275
40305: POP
40306: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40307: LD_ADDR_VAR 0 18
40311: PUSH
40312: LD_VAR 0 15
40316: PPUSH
40317: LD_VAR 0 2
40321: PPUSH
40322: LD_INT 1
40324: PPUSH
40325: CALL 39568 0 3
40329: ST_TO_ADDR
// InitHc ;
40330: CALL_OW 19
// InitUc ;
40334: CALL_OW 18
// uc_side := side ;
40338: LD_ADDR_OWVAR 20
40342: PUSH
40343: LD_VAR 0 16
40347: ST_TO_ADDR
// uc_nation := nation ;
40348: LD_ADDR_OWVAR 21
40352: PUSH
40353: LD_VAR 0 17
40357: ST_TO_ADDR
// if buildings then
40358: LD_VAR 0 18
40362: IFFALSE 41684
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40364: LD_ADDR_VAR 0 19
40368: PUSH
40369: LD_VAR 0 18
40373: PPUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 30
40379: PUSH
40380: LD_INT 29
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 30
40389: PUSH
40390: LD_INT 30
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: PPUSH
40402: CALL_OW 72
40406: ST_TO_ADDR
// if tmp then
40407: LD_VAR 0 19
40411: IFFALSE 40459
// for i in tmp do
40413: LD_ADDR_VAR 0 8
40417: PUSH
40418: LD_VAR 0 19
40422: PUSH
40423: FOR_IN
40424: IFFALSE 40457
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40426: LD_VAR 0 8
40430: PPUSH
40431: CALL_OW 250
40435: PPUSH
40436: LD_VAR 0 8
40440: PPUSH
40441: CALL_OW 251
40445: PPUSH
40446: LD_VAR 0 16
40450: PPUSH
40451: CALL_OW 441
40455: GO 40423
40457: POP
40458: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40459: LD_VAR 0 18
40463: PPUSH
40464: LD_INT 2
40466: PUSH
40467: LD_INT 30
40469: PUSH
40470: LD_INT 32
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 30
40479: PUSH
40480: LD_INT 33
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: PPUSH
40492: CALL_OW 72
40496: IFFALSE 40584
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40498: LD_ADDR_VAR 0 8
40502: PUSH
40503: LD_VAR 0 18
40507: PPUSH
40508: LD_INT 2
40510: PUSH
40511: LD_INT 30
40513: PUSH
40514: LD_INT 32
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 30
40523: PUSH
40524: LD_INT 33
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: PPUSH
40536: CALL_OW 72
40540: PUSH
40541: FOR_IN
40542: IFFALSE 40582
// begin if not GetBWeapon ( i ) then
40544: LD_VAR 0 8
40548: PPUSH
40549: CALL_OW 269
40553: NOT
40554: IFFALSE 40580
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40556: LD_VAR 0 8
40560: PPUSH
40561: LD_VAR 0 8
40565: PPUSH
40566: LD_VAR 0 2
40570: PPUSH
40571: CALL 41830 0 2
40575: PPUSH
40576: CALL_OW 431
// end ;
40580: GO 40541
40582: POP
40583: POP
// end ; for i = 1 to personel do
40584: LD_ADDR_VAR 0 8
40588: PUSH
40589: DOUBLE
40590: LD_INT 1
40592: DEC
40593: ST_TO_ADDR
40594: LD_VAR 0 6
40598: PUSH
40599: FOR_TO
40600: IFFALSE 41664
// begin if i > 4 then
40602: LD_VAR 0 8
40606: PUSH
40607: LD_INT 4
40609: GREATER
40610: IFFALSE 40614
// break ;
40612: GO 41664
// case i of 1 :
40614: LD_VAR 0 8
40618: PUSH
40619: LD_INT 1
40621: DOUBLE
40622: EQUAL
40623: IFTRUE 40627
40625: GO 40707
40627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40628: LD_ADDR_VAR 0 12
40632: PUSH
40633: LD_VAR 0 18
40637: PPUSH
40638: LD_INT 22
40640: PUSH
40641: LD_VAR 0 16
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 58
40652: PUSH
40653: EMPTY
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: PUSH
40659: LD_INT 30
40661: PUSH
40662: LD_INT 32
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 30
40671: PUSH
40672: LD_INT 4
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 30
40681: PUSH
40682: LD_INT 5
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: LIST
40699: PPUSH
40700: CALL_OW 72
40704: ST_TO_ADDR
40705: GO 40929
40707: LD_INT 2
40709: DOUBLE
40710: EQUAL
40711: IFTRUE 40715
40713: GO 40777
40715: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40716: LD_ADDR_VAR 0 12
40720: PUSH
40721: LD_VAR 0 18
40725: PPUSH
40726: LD_INT 22
40728: PUSH
40729: LD_VAR 0 16
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 30
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 30
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PPUSH
40770: CALL_OW 72
40774: ST_TO_ADDR
40775: GO 40929
40777: LD_INT 3
40779: DOUBLE
40780: EQUAL
40781: IFTRUE 40785
40783: GO 40847
40785: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40786: LD_ADDR_VAR 0 12
40790: PUSH
40791: LD_VAR 0 18
40795: PPUSH
40796: LD_INT 22
40798: PUSH
40799: LD_VAR 0 16
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 30
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 30
40823: PUSH
40824: LD_INT 3
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: LIST
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PPUSH
40840: CALL_OW 72
40844: ST_TO_ADDR
40845: GO 40929
40847: LD_INT 4
40849: DOUBLE
40850: EQUAL
40851: IFTRUE 40855
40853: GO 40928
40855: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40856: LD_ADDR_VAR 0 12
40860: PUSH
40861: LD_VAR 0 18
40865: PPUSH
40866: LD_INT 22
40868: PUSH
40869: LD_VAR 0 16
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: LD_INT 30
40883: PUSH
40884: LD_INT 6
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 30
40893: PUSH
40894: LD_INT 7
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 30
40903: PUSH
40904: LD_INT 8
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PPUSH
40921: CALL_OW 72
40925: ST_TO_ADDR
40926: GO 40929
40928: POP
// if i = 1 then
40929: LD_VAR 0 8
40933: PUSH
40934: LD_INT 1
40936: EQUAL
40937: IFFALSE 41048
// begin tmp := [ ] ;
40939: LD_ADDR_VAR 0 19
40943: PUSH
40944: EMPTY
40945: ST_TO_ADDR
// for j in f do
40946: LD_ADDR_VAR 0 9
40950: PUSH
40951: LD_VAR 0 12
40955: PUSH
40956: FOR_IN
40957: IFFALSE 41030
// if GetBType ( j ) = b_bunker then
40959: LD_VAR 0 9
40963: PPUSH
40964: CALL_OW 266
40968: PUSH
40969: LD_INT 32
40971: EQUAL
40972: IFFALSE 40999
// tmp := Insert ( tmp , 1 , j ) else
40974: LD_ADDR_VAR 0 19
40978: PUSH
40979: LD_VAR 0 19
40983: PPUSH
40984: LD_INT 1
40986: PPUSH
40987: LD_VAR 0 9
40991: PPUSH
40992: CALL_OW 2
40996: ST_TO_ADDR
40997: GO 41028
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40999: LD_ADDR_VAR 0 19
41003: PUSH
41004: LD_VAR 0 19
41008: PPUSH
41009: LD_VAR 0 19
41013: PUSH
41014: LD_INT 1
41016: PLUS
41017: PPUSH
41018: LD_VAR 0 9
41022: PPUSH
41023: CALL_OW 2
41027: ST_TO_ADDR
41028: GO 40956
41030: POP
41031: POP
// if tmp then
41032: LD_VAR 0 19
41036: IFFALSE 41048
// f := tmp ;
41038: LD_ADDR_VAR 0 12
41042: PUSH
41043: LD_VAR 0 19
41047: ST_TO_ADDR
// end ; x := personel [ i ] ;
41048: LD_ADDR_VAR 0 13
41052: PUSH
41053: LD_VAR 0 6
41057: PUSH
41058: LD_VAR 0 8
41062: ARRAY
41063: ST_TO_ADDR
// if x = - 1 then
41064: LD_VAR 0 13
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: EQUAL
41073: IFFALSE 41282
// begin for j in f do
41075: LD_ADDR_VAR 0 9
41079: PUSH
41080: LD_VAR 0 12
41084: PUSH
41085: FOR_IN
41086: IFFALSE 41278
// repeat InitHc ;
41088: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41092: LD_VAR 0 9
41096: PPUSH
41097: CALL_OW 266
41101: PUSH
41102: LD_INT 5
41104: EQUAL
41105: IFFALSE 41175
// begin if UnitsInside ( j ) < 3 then
41107: LD_VAR 0 9
41111: PPUSH
41112: CALL_OW 313
41116: PUSH
41117: LD_INT 3
41119: LESS
41120: IFFALSE 41156
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41122: LD_INT 0
41124: PPUSH
41125: LD_INT 5
41127: PUSH
41128: LD_INT 8
41130: PUSH
41131: LD_INT 9
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: LIST
41138: PUSH
41139: LD_VAR 0 17
41143: ARRAY
41144: PPUSH
41145: LD_VAR 0 4
41149: PPUSH
41150: CALL_OW 380
41154: GO 41173
// PrepareHuman ( false , i , skill ) ;
41156: LD_INT 0
41158: PPUSH
41159: LD_VAR 0 8
41163: PPUSH
41164: LD_VAR 0 4
41168: PPUSH
41169: CALL_OW 380
// end else
41173: GO 41192
// PrepareHuman ( false , i , skill ) ;
41175: LD_INT 0
41177: PPUSH
41178: LD_VAR 0 8
41182: PPUSH
41183: LD_VAR 0 4
41187: PPUSH
41188: CALL_OW 380
// un := CreateHuman ;
41192: LD_ADDR_VAR 0 14
41196: PUSH
41197: CALL_OW 44
41201: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41202: LD_ADDR_VAR 0 7
41206: PUSH
41207: LD_VAR 0 7
41211: PPUSH
41212: LD_INT 1
41214: PPUSH
41215: LD_VAR 0 14
41219: PPUSH
41220: CALL_OW 2
41224: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41225: LD_VAR 0 14
41229: PPUSH
41230: LD_VAR 0 9
41234: PPUSH
41235: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41239: LD_VAR 0 9
41243: PPUSH
41244: CALL_OW 313
41248: PUSH
41249: LD_INT 6
41251: EQUAL
41252: PUSH
41253: LD_VAR 0 9
41257: PPUSH
41258: CALL_OW 266
41262: PUSH
41263: LD_INT 32
41265: PUSH
41266: LD_INT 31
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: IN
41273: OR
41274: IFFALSE 41088
41276: GO 41085
41278: POP
41279: POP
// end else
41280: GO 41662
// for j = 1 to x do
41282: LD_ADDR_VAR 0 9
41286: PUSH
41287: DOUBLE
41288: LD_INT 1
41290: DEC
41291: ST_TO_ADDR
41292: LD_VAR 0 13
41296: PUSH
41297: FOR_TO
41298: IFFALSE 41660
// begin InitHc ;
41300: CALL_OW 19
// if not f then
41304: LD_VAR 0 12
41308: NOT
41309: IFFALSE 41398
// begin PrepareHuman ( false , i , skill ) ;
41311: LD_INT 0
41313: PPUSH
41314: LD_VAR 0 8
41318: PPUSH
41319: LD_VAR 0 4
41323: PPUSH
41324: CALL_OW 380
// un := CreateHuman ;
41328: LD_ADDR_VAR 0 14
41332: PUSH
41333: CALL_OW 44
41337: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41338: LD_ADDR_VAR 0 7
41342: PUSH
41343: LD_VAR 0 7
41347: PPUSH
41348: LD_INT 1
41350: PPUSH
41351: LD_VAR 0 14
41355: PPUSH
41356: CALL_OW 2
41360: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41361: LD_VAR 0 14
41365: PPUSH
41366: LD_VAR 0 1
41370: PPUSH
41371: CALL_OW 250
41375: PPUSH
41376: LD_VAR 0 1
41380: PPUSH
41381: CALL_OW 251
41385: PPUSH
41386: LD_INT 10
41388: PPUSH
41389: LD_INT 0
41391: PPUSH
41392: CALL_OW 50
// continue ;
41396: GO 41297
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41398: LD_VAR 0 12
41402: PUSH
41403: LD_INT 1
41405: ARRAY
41406: PPUSH
41407: CALL_OW 313
41411: PUSH
41412: LD_VAR 0 12
41416: PUSH
41417: LD_INT 1
41419: ARRAY
41420: PPUSH
41421: CALL_OW 266
41425: PUSH
41426: LD_INT 32
41428: PUSH
41429: LD_INT 31
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: IN
41436: AND
41437: PUSH
41438: LD_VAR 0 12
41442: PUSH
41443: LD_INT 1
41445: ARRAY
41446: PPUSH
41447: CALL_OW 313
41451: PUSH
41452: LD_INT 6
41454: EQUAL
41455: OR
41456: IFFALSE 41476
// f := Delete ( f , 1 ) ;
41458: LD_ADDR_VAR 0 12
41462: PUSH
41463: LD_VAR 0 12
41467: PPUSH
41468: LD_INT 1
41470: PPUSH
41471: CALL_OW 3
41475: ST_TO_ADDR
// if not f then
41476: LD_VAR 0 12
41480: NOT
41481: IFFALSE 41499
// begin x := x + 2 ;
41483: LD_ADDR_VAR 0 13
41487: PUSH
41488: LD_VAR 0 13
41492: PUSH
41493: LD_INT 2
41495: PLUS
41496: ST_TO_ADDR
// continue ;
41497: GO 41297
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41499: LD_VAR 0 12
41503: PUSH
41504: LD_INT 1
41506: ARRAY
41507: PPUSH
41508: CALL_OW 266
41512: PUSH
41513: LD_INT 5
41515: EQUAL
41516: IFFALSE 41590
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41518: LD_VAR 0 12
41522: PUSH
41523: LD_INT 1
41525: ARRAY
41526: PPUSH
41527: CALL_OW 313
41531: PUSH
41532: LD_INT 3
41534: LESS
41535: IFFALSE 41571
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41537: LD_INT 0
41539: PPUSH
41540: LD_INT 5
41542: PUSH
41543: LD_INT 8
41545: PUSH
41546: LD_INT 9
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: PUSH
41554: LD_VAR 0 17
41558: ARRAY
41559: PPUSH
41560: LD_VAR 0 4
41564: PPUSH
41565: CALL_OW 380
41569: GO 41588
// PrepareHuman ( false , i , skill ) ;
41571: LD_INT 0
41573: PPUSH
41574: LD_VAR 0 8
41578: PPUSH
41579: LD_VAR 0 4
41583: PPUSH
41584: CALL_OW 380
// end else
41588: GO 41607
// PrepareHuman ( false , i , skill ) ;
41590: LD_INT 0
41592: PPUSH
41593: LD_VAR 0 8
41597: PPUSH
41598: LD_VAR 0 4
41602: PPUSH
41603: CALL_OW 380
// un := CreateHuman ;
41607: LD_ADDR_VAR 0 14
41611: PUSH
41612: CALL_OW 44
41616: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41617: LD_ADDR_VAR 0 7
41621: PUSH
41622: LD_VAR 0 7
41626: PPUSH
41627: LD_INT 1
41629: PPUSH
41630: LD_VAR 0 14
41634: PPUSH
41635: CALL_OW 2
41639: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41640: LD_VAR 0 14
41644: PPUSH
41645: LD_VAR 0 12
41649: PUSH
41650: LD_INT 1
41652: ARRAY
41653: PPUSH
41654: CALL_OW 52
// end ;
41658: GO 41297
41660: POP
41661: POP
// end ;
41662: GO 40599
41664: POP
41665: POP
// result := result ^ buildings ;
41666: LD_ADDR_VAR 0 7
41670: PUSH
41671: LD_VAR 0 7
41675: PUSH
41676: LD_VAR 0 18
41680: ADD
41681: ST_TO_ADDR
// end else
41682: GO 41825
// begin for i = 1 to personel do
41684: LD_ADDR_VAR 0 8
41688: PUSH
41689: DOUBLE
41690: LD_INT 1
41692: DEC
41693: ST_TO_ADDR
41694: LD_VAR 0 6
41698: PUSH
41699: FOR_TO
41700: IFFALSE 41823
// begin if i > 4 then
41702: LD_VAR 0 8
41706: PUSH
41707: LD_INT 4
41709: GREATER
41710: IFFALSE 41714
// break ;
41712: GO 41823
// x := personel [ i ] ;
41714: LD_ADDR_VAR 0 13
41718: PUSH
41719: LD_VAR 0 6
41723: PUSH
41724: LD_VAR 0 8
41728: ARRAY
41729: ST_TO_ADDR
// if x = - 1 then
41730: LD_VAR 0 13
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: EQUAL
41739: IFFALSE 41743
// continue ;
41741: GO 41699
// PrepareHuman ( false , i , skill ) ;
41743: LD_INT 0
41745: PPUSH
41746: LD_VAR 0 8
41750: PPUSH
41751: LD_VAR 0 4
41755: PPUSH
41756: CALL_OW 380
// un := CreateHuman ;
41760: LD_ADDR_VAR 0 14
41764: PUSH
41765: CALL_OW 44
41769: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41770: LD_VAR 0 14
41774: PPUSH
41775: LD_VAR 0 1
41779: PPUSH
41780: CALL_OW 250
41784: PPUSH
41785: LD_VAR 0 1
41789: PPUSH
41790: CALL_OW 251
41794: PPUSH
41795: LD_INT 10
41797: PPUSH
41798: LD_INT 0
41800: PPUSH
41801: CALL_OW 50
// result := result ^ un ;
41805: LD_ADDR_VAR 0 7
41809: PUSH
41810: LD_VAR 0 7
41814: PUSH
41815: LD_VAR 0 14
41819: ADD
41820: ST_TO_ADDR
// end ;
41821: GO 41699
41823: POP
41824: POP
// end ; end ;
41825: LD_VAR 0 7
41829: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41830: LD_INT 0
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
41838: PPUSH
41839: PPUSH
41840: PPUSH
41841: PPUSH
41842: PPUSH
41843: PPUSH
41844: PPUSH
41845: PPUSH
41846: PPUSH
41847: PPUSH
// result := false ;
41848: LD_ADDR_VAR 0 3
41852: PUSH
41853: LD_INT 0
41855: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41856: LD_VAR 0 1
41860: NOT
41861: PUSH
41862: LD_VAR 0 1
41866: PPUSH
41867: CALL_OW 266
41871: PUSH
41872: LD_INT 32
41874: PUSH
41875: LD_INT 33
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: IN
41882: NOT
41883: OR
41884: IFFALSE 41888
// exit ;
41886: GO 42997
// nat := GetNation ( tower ) ;
41888: LD_ADDR_VAR 0 12
41892: PUSH
41893: LD_VAR 0 1
41897: PPUSH
41898: CALL_OW 248
41902: ST_TO_ADDR
// side := GetSide ( tower ) ;
41903: LD_ADDR_VAR 0 16
41907: PUSH
41908: LD_VAR 0 1
41912: PPUSH
41913: CALL_OW 255
41917: ST_TO_ADDR
// x := GetX ( tower ) ;
41918: LD_ADDR_VAR 0 10
41922: PUSH
41923: LD_VAR 0 1
41927: PPUSH
41928: CALL_OW 250
41932: ST_TO_ADDR
// y := GetY ( tower ) ;
41933: LD_ADDR_VAR 0 11
41937: PUSH
41938: LD_VAR 0 1
41942: PPUSH
41943: CALL_OW 251
41947: ST_TO_ADDR
// if not x or not y then
41948: LD_VAR 0 10
41952: NOT
41953: PUSH
41954: LD_VAR 0 11
41958: NOT
41959: OR
41960: IFFALSE 41964
// exit ;
41962: GO 42997
// weapon := 0 ;
41964: LD_ADDR_VAR 0 18
41968: PUSH
41969: LD_INT 0
41971: ST_TO_ADDR
// fac_list := [ ] ;
41972: LD_ADDR_VAR 0 17
41976: PUSH
41977: EMPTY
41978: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41979: LD_ADDR_VAR 0 6
41983: PUSH
41984: LD_VAR 0 1
41988: PPUSH
41989: CALL_OW 274
41993: PPUSH
41994: LD_VAR 0 2
41998: PPUSH
41999: LD_INT 0
42001: PPUSH
42002: CALL 39568 0 3
42006: PPUSH
42007: LD_INT 30
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PPUSH
42017: CALL_OW 72
42021: ST_TO_ADDR
// if not factories then
42022: LD_VAR 0 6
42026: NOT
42027: IFFALSE 42031
// exit ;
42029: GO 42997
// for i in factories do
42031: LD_ADDR_VAR 0 8
42035: PUSH
42036: LD_VAR 0 6
42040: PUSH
42041: FOR_IN
42042: IFFALSE 42067
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42044: LD_ADDR_VAR 0 17
42048: PUSH
42049: LD_VAR 0 17
42053: PUSH
42054: LD_VAR 0 8
42058: PPUSH
42059: CALL_OW 478
42063: UNION
42064: ST_TO_ADDR
42065: GO 42041
42067: POP
42068: POP
// if not fac_list then
42069: LD_VAR 0 17
42073: NOT
42074: IFFALSE 42078
// exit ;
42076: GO 42997
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42078: LD_ADDR_VAR 0 5
42082: PUSH
42083: LD_INT 4
42085: PUSH
42086: LD_INT 5
42088: PUSH
42089: LD_INT 9
42091: PUSH
42092: LD_INT 10
42094: PUSH
42095: LD_INT 6
42097: PUSH
42098: LD_INT 7
42100: PUSH
42101: LD_INT 11
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 27
42115: PUSH
42116: LD_INT 28
42118: PUSH
42119: LD_INT 26
42121: PUSH
42122: LD_INT 30
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 43
42133: PUSH
42134: LD_INT 44
42136: PUSH
42137: LD_INT 46
42139: PUSH
42140: LD_INT 45
42142: PUSH
42143: LD_INT 47
42145: PUSH
42146: LD_INT 49
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: LIST
42161: PUSH
42162: LD_VAR 0 12
42166: ARRAY
42167: ST_TO_ADDR
// list := list isect fac_list ;
42168: LD_ADDR_VAR 0 5
42172: PUSH
42173: LD_VAR 0 5
42177: PUSH
42178: LD_VAR 0 17
42182: ISECT
42183: ST_TO_ADDR
// if not list then
42184: LD_VAR 0 5
42188: NOT
42189: IFFALSE 42193
// exit ;
42191: GO 42997
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42193: LD_VAR 0 12
42197: PUSH
42198: LD_INT 3
42200: EQUAL
42201: PUSH
42202: LD_INT 49
42204: PUSH
42205: LD_VAR 0 5
42209: IN
42210: AND
42211: PUSH
42212: LD_INT 31
42214: PPUSH
42215: LD_VAR 0 16
42219: PPUSH
42220: CALL_OW 321
42224: PUSH
42225: LD_INT 2
42227: EQUAL
42228: AND
42229: IFFALSE 42289
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42231: LD_INT 22
42233: PUSH
42234: LD_VAR 0 16
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 35
42245: PUSH
42246: LD_INT 49
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 91
42255: PUSH
42256: LD_VAR 0 1
42260: PUSH
42261: LD_INT 10
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: PPUSH
42274: CALL_OW 69
42278: NOT
42279: IFFALSE 42289
// weapon := ru_time_lapser ;
42281: LD_ADDR_VAR 0 18
42285: PUSH
42286: LD_INT 49
42288: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42289: LD_VAR 0 12
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: IN
42304: PUSH
42305: LD_INT 11
42307: PUSH
42308: LD_VAR 0 5
42312: IN
42313: PUSH
42314: LD_INT 30
42316: PUSH
42317: LD_VAR 0 5
42321: IN
42322: OR
42323: AND
42324: PUSH
42325: LD_INT 6
42327: PPUSH
42328: LD_VAR 0 16
42332: PPUSH
42333: CALL_OW 321
42337: PUSH
42338: LD_INT 2
42340: EQUAL
42341: AND
42342: IFFALSE 42507
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42344: LD_INT 22
42346: PUSH
42347: LD_VAR 0 16
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 35
42361: PUSH
42362: LD_INT 11
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 35
42371: PUSH
42372: LD_INT 30
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 91
42386: PUSH
42387: LD_VAR 0 1
42391: PUSH
42392: LD_INT 18
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: PPUSH
42405: CALL_OW 69
42409: NOT
42410: PUSH
42411: LD_INT 22
42413: PUSH
42414: LD_VAR 0 16
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 30
42428: PUSH
42429: LD_INT 32
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 30
42438: PUSH
42439: LD_INT 33
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 91
42453: PUSH
42454: LD_VAR 0 1
42458: PUSH
42459: LD_INT 12
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: PUSH
42472: EMPTY
42473: LIST
42474: PPUSH
42475: CALL_OW 69
42479: PUSH
42480: LD_INT 2
42482: GREATER
42483: AND
42484: IFFALSE 42507
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42486: LD_ADDR_VAR 0 18
42490: PUSH
42491: LD_INT 11
42493: PUSH
42494: LD_INT 30
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_VAR 0 12
42505: ARRAY
42506: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42507: LD_VAR 0 18
42511: NOT
42512: PUSH
42513: LD_INT 40
42515: PPUSH
42516: LD_VAR 0 16
42520: PPUSH
42521: CALL_OW 321
42525: PUSH
42526: LD_INT 2
42528: EQUAL
42529: AND
42530: PUSH
42531: LD_INT 7
42533: PUSH
42534: LD_VAR 0 5
42538: IN
42539: PUSH
42540: LD_INT 28
42542: PUSH
42543: LD_VAR 0 5
42547: IN
42548: OR
42549: PUSH
42550: LD_INT 45
42552: PUSH
42553: LD_VAR 0 5
42557: IN
42558: OR
42559: AND
42560: IFFALSE 42814
// begin hex := GetHexInfo ( x , y ) ;
42562: LD_ADDR_VAR 0 4
42566: PUSH
42567: LD_VAR 0 10
42571: PPUSH
42572: LD_VAR 0 11
42576: PPUSH
42577: CALL_OW 546
42581: ST_TO_ADDR
// if hex [ 1 ] then
42582: LD_VAR 0 4
42586: PUSH
42587: LD_INT 1
42589: ARRAY
42590: IFFALSE 42594
// exit ;
42592: GO 42997
// height := hex [ 2 ] ;
42594: LD_ADDR_VAR 0 15
42598: PUSH
42599: LD_VAR 0 4
42603: PUSH
42604: LD_INT 2
42606: ARRAY
42607: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42608: LD_ADDR_VAR 0 14
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: LD_INT 3
42621: PUSH
42622: LD_INT 5
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// for i in tmp do
42631: LD_ADDR_VAR 0 8
42635: PUSH
42636: LD_VAR 0 14
42640: PUSH
42641: FOR_IN
42642: IFFALSE 42812
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42644: LD_ADDR_VAR 0 9
42648: PUSH
42649: LD_VAR 0 10
42653: PPUSH
42654: LD_VAR 0 8
42658: PPUSH
42659: LD_INT 5
42661: PPUSH
42662: CALL_OW 272
42666: PUSH
42667: LD_VAR 0 11
42671: PPUSH
42672: LD_VAR 0 8
42676: PPUSH
42677: LD_INT 5
42679: PPUSH
42680: CALL_OW 273
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42689: LD_VAR 0 9
42693: PUSH
42694: LD_INT 1
42696: ARRAY
42697: PPUSH
42698: LD_VAR 0 9
42702: PUSH
42703: LD_INT 2
42705: ARRAY
42706: PPUSH
42707: CALL_OW 488
42711: IFFALSE 42810
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42713: LD_ADDR_VAR 0 4
42717: PUSH
42718: LD_VAR 0 9
42722: PUSH
42723: LD_INT 1
42725: ARRAY
42726: PPUSH
42727: LD_VAR 0 9
42731: PUSH
42732: LD_INT 2
42734: ARRAY
42735: PPUSH
42736: CALL_OW 546
42740: ST_TO_ADDR
// if hex [ 1 ] then
42741: LD_VAR 0 4
42745: PUSH
42746: LD_INT 1
42748: ARRAY
42749: IFFALSE 42753
// continue ;
42751: GO 42641
// h := hex [ 2 ] ;
42753: LD_ADDR_VAR 0 13
42757: PUSH
42758: LD_VAR 0 4
42762: PUSH
42763: LD_INT 2
42765: ARRAY
42766: ST_TO_ADDR
// if h + 7 < height then
42767: LD_VAR 0 13
42771: PUSH
42772: LD_INT 7
42774: PLUS
42775: PUSH
42776: LD_VAR 0 15
42780: LESS
42781: IFFALSE 42810
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42783: LD_ADDR_VAR 0 18
42787: PUSH
42788: LD_INT 7
42790: PUSH
42791: LD_INT 28
42793: PUSH
42794: LD_INT 45
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: LIST
42801: PUSH
42802: LD_VAR 0 12
42806: ARRAY
42807: ST_TO_ADDR
// break ;
42808: GO 42812
// end ; end ; end ;
42810: GO 42641
42812: POP
42813: POP
// end ; if not weapon then
42814: LD_VAR 0 18
42818: NOT
42819: IFFALSE 42879
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42821: LD_ADDR_VAR 0 5
42825: PUSH
42826: LD_VAR 0 5
42830: PUSH
42831: LD_INT 11
42833: PUSH
42834: LD_INT 30
42836: PUSH
42837: LD_INT 49
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: DIFF
42845: ST_TO_ADDR
// if not list then
42846: LD_VAR 0 5
42850: NOT
42851: IFFALSE 42855
// exit ;
42853: GO 42997
// weapon := list [ rand ( 1 , list ) ] ;
42855: LD_ADDR_VAR 0 18
42859: PUSH
42860: LD_VAR 0 5
42864: PUSH
42865: LD_INT 1
42867: PPUSH
42868: LD_VAR 0 5
42872: PPUSH
42873: CALL_OW 12
42877: ARRAY
42878: ST_TO_ADDR
// end ; if weapon then
42879: LD_VAR 0 18
42883: IFFALSE 42997
// begin tmp := CostOfWeapon ( weapon ) ;
42885: LD_ADDR_VAR 0 14
42889: PUSH
42890: LD_VAR 0 18
42894: PPUSH
42895: CALL_OW 451
42899: ST_TO_ADDR
// j := GetBase ( tower ) ;
42900: LD_ADDR_VAR 0 9
42904: PUSH
42905: LD_VAR 0 1
42909: PPUSH
42910: CALL_OW 274
42914: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42915: LD_VAR 0 9
42919: PPUSH
42920: LD_INT 1
42922: PPUSH
42923: CALL_OW 275
42927: PUSH
42928: LD_VAR 0 14
42932: PUSH
42933: LD_INT 1
42935: ARRAY
42936: GREATEREQUAL
42937: PUSH
42938: LD_VAR 0 9
42942: PPUSH
42943: LD_INT 2
42945: PPUSH
42946: CALL_OW 275
42950: PUSH
42951: LD_VAR 0 14
42955: PUSH
42956: LD_INT 2
42958: ARRAY
42959: GREATEREQUAL
42960: AND
42961: PUSH
42962: LD_VAR 0 9
42966: PPUSH
42967: LD_INT 3
42969: PPUSH
42970: CALL_OW 275
42974: PUSH
42975: LD_VAR 0 14
42979: PUSH
42980: LD_INT 3
42982: ARRAY
42983: GREATEREQUAL
42984: AND
42985: IFFALSE 42997
// result := weapon ;
42987: LD_ADDR_VAR 0 3
42991: PUSH
42992: LD_VAR 0 18
42996: ST_TO_ADDR
// end ; end ;
42997: LD_VAR 0 3
43001: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43002: LD_INT 0
43004: PPUSH
43005: PPUSH
// result := true ;
43006: LD_ADDR_VAR 0 3
43010: PUSH
43011: LD_INT 1
43013: ST_TO_ADDR
// if array1 = array2 then
43014: LD_VAR 0 1
43018: PUSH
43019: LD_VAR 0 2
43023: EQUAL
43024: IFFALSE 43084
// begin for i = 1 to array1 do
43026: LD_ADDR_VAR 0 4
43030: PUSH
43031: DOUBLE
43032: LD_INT 1
43034: DEC
43035: ST_TO_ADDR
43036: LD_VAR 0 1
43040: PUSH
43041: FOR_TO
43042: IFFALSE 43080
// if array1 [ i ] <> array2 [ i ] then
43044: LD_VAR 0 1
43048: PUSH
43049: LD_VAR 0 4
43053: ARRAY
43054: PUSH
43055: LD_VAR 0 2
43059: PUSH
43060: LD_VAR 0 4
43064: ARRAY
43065: NONEQUAL
43066: IFFALSE 43078
// begin result := false ;
43068: LD_ADDR_VAR 0 3
43072: PUSH
43073: LD_INT 0
43075: ST_TO_ADDR
// break ;
43076: GO 43080
// end ;
43078: GO 43041
43080: POP
43081: POP
// end else
43082: GO 43092
// result := false ;
43084: LD_ADDR_VAR 0 3
43088: PUSH
43089: LD_INT 0
43091: ST_TO_ADDR
// end ;
43092: LD_VAR 0 3
43096: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43097: LD_INT 0
43099: PPUSH
43100: PPUSH
// if not array1 or not array2 then
43101: LD_VAR 0 1
43105: NOT
43106: PUSH
43107: LD_VAR 0 2
43111: NOT
43112: OR
43113: IFFALSE 43117
// exit ;
43115: GO 43181
// result := true ;
43117: LD_ADDR_VAR 0 3
43121: PUSH
43122: LD_INT 1
43124: ST_TO_ADDR
// for i = 1 to array1 do
43125: LD_ADDR_VAR 0 4
43129: PUSH
43130: DOUBLE
43131: LD_INT 1
43133: DEC
43134: ST_TO_ADDR
43135: LD_VAR 0 1
43139: PUSH
43140: FOR_TO
43141: IFFALSE 43179
// if array1 [ i ] <> array2 [ i ] then
43143: LD_VAR 0 1
43147: PUSH
43148: LD_VAR 0 4
43152: ARRAY
43153: PUSH
43154: LD_VAR 0 2
43158: PUSH
43159: LD_VAR 0 4
43163: ARRAY
43164: NONEQUAL
43165: IFFALSE 43177
// begin result := false ;
43167: LD_ADDR_VAR 0 3
43171: PUSH
43172: LD_INT 0
43174: ST_TO_ADDR
// break ;
43175: GO 43179
// end ;
43177: GO 43140
43179: POP
43180: POP
// end ;
43181: LD_VAR 0 3
43185: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43186: LD_INT 0
43188: PPUSH
43189: PPUSH
43190: PPUSH
// pom := GetBase ( fac ) ;
43191: LD_ADDR_VAR 0 5
43195: PUSH
43196: LD_VAR 0 1
43200: PPUSH
43201: CALL_OW 274
43205: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43206: LD_ADDR_VAR 0 4
43210: PUSH
43211: LD_VAR 0 2
43215: PUSH
43216: LD_INT 1
43218: ARRAY
43219: PPUSH
43220: LD_VAR 0 2
43224: PUSH
43225: LD_INT 2
43227: ARRAY
43228: PPUSH
43229: LD_VAR 0 2
43233: PUSH
43234: LD_INT 3
43236: ARRAY
43237: PPUSH
43238: LD_VAR 0 2
43242: PUSH
43243: LD_INT 4
43245: ARRAY
43246: PPUSH
43247: CALL_OW 449
43251: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43252: LD_ADDR_VAR 0 3
43256: PUSH
43257: LD_VAR 0 5
43261: PPUSH
43262: LD_INT 1
43264: PPUSH
43265: CALL_OW 275
43269: PUSH
43270: LD_VAR 0 4
43274: PUSH
43275: LD_INT 1
43277: ARRAY
43278: GREATEREQUAL
43279: PUSH
43280: LD_VAR 0 5
43284: PPUSH
43285: LD_INT 2
43287: PPUSH
43288: CALL_OW 275
43292: PUSH
43293: LD_VAR 0 4
43297: PUSH
43298: LD_INT 2
43300: ARRAY
43301: GREATEREQUAL
43302: AND
43303: PUSH
43304: LD_VAR 0 5
43308: PPUSH
43309: LD_INT 3
43311: PPUSH
43312: CALL_OW 275
43316: PUSH
43317: LD_VAR 0 4
43321: PUSH
43322: LD_INT 3
43324: ARRAY
43325: GREATEREQUAL
43326: AND
43327: ST_TO_ADDR
// end ;
43328: LD_VAR 0 3
43332: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43333: LD_INT 0
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
// pom := GetBase ( building ) ;
43339: LD_ADDR_VAR 0 3
43343: PUSH
43344: LD_VAR 0 1
43348: PPUSH
43349: CALL_OW 274
43353: ST_TO_ADDR
// if not pom then
43354: LD_VAR 0 3
43358: NOT
43359: IFFALSE 43363
// exit ;
43361: GO 43533
// btype := GetBType ( building ) ;
43363: LD_ADDR_VAR 0 5
43367: PUSH
43368: LD_VAR 0 1
43372: PPUSH
43373: CALL_OW 266
43377: ST_TO_ADDR
// if btype = b_armoury then
43378: LD_VAR 0 5
43382: PUSH
43383: LD_INT 4
43385: EQUAL
43386: IFFALSE 43396
// btype := b_barracks ;
43388: LD_ADDR_VAR 0 5
43392: PUSH
43393: LD_INT 5
43395: ST_TO_ADDR
// if btype = b_depot then
43396: LD_VAR 0 5
43400: PUSH
43401: LD_INT 0
43403: EQUAL
43404: IFFALSE 43414
// btype := b_warehouse ;
43406: LD_ADDR_VAR 0 5
43410: PUSH
43411: LD_INT 1
43413: ST_TO_ADDR
// if btype = b_workshop then
43414: LD_VAR 0 5
43418: PUSH
43419: LD_INT 2
43421: EQUAL
43422: IFFALSE 43432
// btype := b_factory ;
43424: LD_ADDR_VAR 0 5
43428: PUSH
43429: LD_INT 3
43431: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43432: LD_ADDR_VAR 0 4
43436: PUSH
43437: LD_VAR 0 5
43441: PPUSH
43442: LD_VAR 0 1
43446: PPUSH
43447: CALL_OW 248
43451: PPUSH
43452: CALL_OW 450
43456: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43457: LD_ADDR_VAR 0 2
43461: PUSH
43462: LD_VAR 0 3
43466: PPUSH
43467: LD_INT 1
43469: PPUSH
43470: CALL_OW 275
43474: PUSH
43475: LD_VAR 0 4
43479: PUSH
43480: LD_INT 1
43482: ARRAY
43483: GREATEREQUAL
43484: PUSH
43485: LD_VAR 0 3
43489: PPUSH
43490: LD_INT 2
43492: PPUSH
43493: CALL_OW 275
43497: PUSH
43498: LD_VAR 0 4
43502: PUSH
43503: LD_INT 2
43505: ARRAY
43506: GREATEREQUAL
43507: AND
43508: PUSH
43509: LD_VAR 0 3
43513: PPUSH
43514: LD_INT 3
43516: PPUSH
43517: CALL_OW 275
43521: PUSH
43522: LD_VAR 0 4
43526: PUSH
43527: LD_INT 3
43529: ARRAY
43530: GREATEREQUAL
43531: AND
43532: ST_TO_ADDR
// end ;
43533: LD_VAR 0 2
43537: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43538: LD_INT 0
43540: PPUSH
43541: PPUSH
43542: PPUSH
// pom := GetBase ( building ) ;
43543: LD_ADDR_VAR 0 4
43547: PUSH
43548: LD_VAR 0 1
43552: PPUSH
43553: CALL_OW 274
43557: ST_TO_ADDR
// if not pom then
43558: LD_VAR 0 4
43562: NOT
43563: IFFALSE 43567
// exit ;
43565: GO 43668
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43567: LD_ADDR_VAR 0 5
43571: PUSH
43572: LD_VAR 0 2
43576: PPUSH
43577: LD_VAR 0 1
43581: PPUSH
43582: CALL_OW 248
43586: PPUSH
43587: CALL_OW 450
43591: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43592: LD_ADDR_VAR 0 3
43596: PUSH
43597: LD_VAR 0 4
43601: PPUSH
43602: LD_INT 1
43604: PPUSH
43605: CALL_OW 275
43609: PUSH
43610: LD_VAR 0 5
43614: PUSH
43615: LD_INT 1
43617: ARRAY
43618: GREATEREQUAL
43619: PUSH
43620: LD_VAR 0 4
43624: PPUSH
43625: LD_INT 2
43627: PPUSH
43628: CALL_OW 275
43632: PUSH
43633: LD_VAR 0 5
43637: PUSH
43638: LD_INT 2
43640: ARRAY
43641: GREATEREQUAL
43642: AND
43643: PUSH
43644: LD_VAR 0 4
43648: PPUSH
43649: LD_INT 3
43651: PPUSH
43652: CALL_OW 275
43656: PUSH
43657: LD_VAR 0 5
43661: PUSH
43662: LD_INT 3
43664: ARRAY
43665: GREATEREQUAL
43666: AND
43667: ST_TO_ADDR
// end ;
43668: LD_VAR 0 3
43672: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43673: LD_INT 0
43675: PPUSH
43676: PPUSH
43677: PPUSH
43678: PPUSH
43679: PPUSH
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
43684: PPUSH
43685: PPUSH
// result := false ;
43686: LD_ADDR_VAR 0 8
43690: PUSH
43691: LD_INT 0
43693: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43694: LD_VAR 0 5
43698: NOT
43699: PUSH
43700: LD_VAR 0 1
43704: NOT
43705: OR
43706: PUSH
43707: LD_VAR 0 2
43711: NOT
43712: OR
43713: PUSH
43714: LD_VAR 0 3
43718: NOT
43719: OR
43720: IFFALSE 43724
// exit ;
43722: GO 44538
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43724: LD_ADDR_VAR 0 14
43728: PUSH
43729: LD_VAR 0 1
43733: PPUSH
43734: LD_VAR 0 2
43738: PPUSH
43739: LD_VAR 0 3
43743: PPUSH
43744: LD_VAR 0 4
43748: PPUSH
43749: LD_VAR 0 5
43753: PUSH
43754: LD_INT 1
43756: ARRAY
43757: PPUSH
43758: CALL_OW 248
43762: PPUSH
43763: LD_INT 0
43765: PPUSH
43766: CALL 45791 0 6
43770: ST_TO_ADDR
// if not hexes then
43771: LD_VAR 0 14
43775: NOT
43776: IFFALSE 43780
// exit ;
43778: GO 44538
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43780: LD_ADDR_VAR 0 17
43784: PUSH
43785: LD_VAR 0 5
43789: PPUSH
43790: LD_INT 22
43792: PUSH
43793: LD_VAR 0 13
43797: PPUSH
43798: CALL_OW 255
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 30
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 30
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PPUSH
43839: CALL_OW 72
43843: ST_TO_ADDR
// for i = 1 to hexes do
43844: LD_ADDR_VAR 0 9
43848: PUSH
43849: DOUBLE
43850: LD_INT 1
43852: DEC
43853: ST_TO_ADDR
43854: LD_VAR 0 14
43858: PUSH
43859: FOR_TO
43860: IFFALSE 44536
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43862: LD_ADDR_VAR 0 13
43866: PUSH
43867: LD_VAR 0 14
43871: PUSH
43872: LD_VAR 0 9
43876: ARRAY
43877: PUSH
43878: LD_INT 1
43880: ARRAY
43881: PPUSH
43882: LD_VAR 0 14
43886: PUSH
43887: LD_VAR 0 9
43891: ARRAY
43892: PUSH
43893: LD_INT 2
43895: ARRAY
43896: PPUSH
43897: CALL_OW 428
43901: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43902: LD_VAR 0 14
43906: PUSH
43907: LD_VAR 0 9
43911: ARRAY
43912: PUSH
43913: LD_INT 1
43915: ARRAY
43916: PPUSH
43917: LD_VAR 0 14
43921: PUSH
43922: LD_VAR 0 9
43926: ARRAY
43927: PUSH
43928: LD_INT 2
43930: ARRAY
43931: PPUSH
43932: CALL_OW 351
43936: PUSH
43937: LD_VAR 0 14
43941: PUSH
43942: LD_VAR 0 9
43946: ARRAY
43947: PUSH
43948: LD_INT 1
43950: ARRAY
43951: PPUSH
43952: LD_VAR 0 14
43956: PUSH
43957: LD_VAR 0 9
43961: ARRAY
43962: PUSH
43963: LD_INT 2
43965: ARRAY
43966: PPUSH
43967: CALL_OW 488
43971: NOT
43972: OR
43973: PUSH
43974: LD_VAR 0 13
43978: PPUSH
43979: CALL_OW 247
43983: PUSH
43984: LD_INT 3
43986: EQUAL
43987: OR
43988: IFFALSE 43994
// exit ;
43990: POP
43991: POP
43992: GO 44538
// if not tmp then
43994: LD_VAR 0 13
43998: NOT
43999: IFFALSE 44003
// continue ;
44001: GO 43859
// result := true ;
44003: LD_ADDR_VAR 0 8
44007: PUSH
44008: LD_INT 1
44010: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44011: LD_VAR 0 6
44015: PUSH
44016: LD_VAR 0 13
44020: PPUSH
44021: CALL_OW 247
44025: PUSH
44026: LD_INT 2
44028: EQUAL
44029: AND
44030: PUSH
44031: LD_VAR 0 13
44035: PPUSH
44036: CALL_OW 263
44040: PUSH
44041: LD_INT 1
44043: EQUAL
44044: AND
44045: IFFALSE 44209
// begin if IsDrivenBy ( tmp ) then
44047: LD_VAR 0 13
44051: PPUSH
44052: CALL_OW 311
44056: IFFALSE 44060
// continue ;
44058: GO 43859
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44060: LD_VAR 0 6
44064: PPUSH
44065: LD_INT 3
44067: PUSH
44068: LD_INT 60
44070: PUSH
44071: EMPTY
44072: LIST
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: LD_INT 55
44083: PUSH
44084: EMPTY
44085: LIST
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PPUSH
44095: CALL_OW 72
44099: IFFALSE 44207
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44101: LD_ADDR_VAR 0 18
44105: PUSH
44106: LD_VAR 0 6
44110: PPUSH
44111: LD_INT 3
44113: PUSH
44114: LD_INT 60
44116: PUSH
44117: EMPTY
44118: LIST
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: LD_INT 55
44129: PUSH
44130: EMPTY
44131: LIST
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PPUSH
44141: CALL_OW 72
44145: PUSH
44146: LD_INT 1
44148: ARRAY
44149: ST_TO_ADDR
// if IsInUnit ( driver ) then
44150: LD_VAR 0 18
44154: PPUSH
44155: CALL_OW 310
44159: IFFALSE 44170
// ComExit ( driver ) ;
44161: LD_VAR 0 18
44165: PPUSH
44166: CALL 69583 0 1
// AddComEnterUnit ( driver , tmp ) ;
44170: LD_VAR 0 18
44174: PPUSH
44175: LD_VAR 0 13
44179: PPUSH
44180: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44184: LD_VAR 0 18
44188: PPUSH
44189: LD_VAR 0 7
44193: PPUSH
44194: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44198: LD_VAR 0 18
44202: PPUSH
44203: CALL_OW 181
// end ; continue ;
44207: GO 43859
// end ; if not cleaners or not tmp in cleaners then
44209: LD_VAR 0 6
44213: NOT
44214: PUSH
44215: LD_VAR 0 13
44219: PUSH
44220: LD_VAR 0 6
44224: IN
44225: NOT
44226: OR
44227: IFFALSE 44534
// begin if dep then
44229: LD_VAR 0 17
44233: IFFALSE 44369
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44235: LD_ADDR_VAR 0 16
44239: PUSH
44240: LD_VAR 0 17
44244: PUSH
44245: LD_INT 1
44247: ARRAY
44248: PPUSH
44249: CALL_OW 250
44253: PPUSH
44254: LD_VAR 0 17
44258: PUSH
44259: LD_INT 1
44261: ARRAY
44262: PPUSH
44263: CALL_OW 254
44267: PPUSH
44268: LD_INT 5
44270: PPUSH
44271: CALL_OW 272
44275: PUSH
44276: LD_VAR 0 17
44280: PUSH
44281: LD_INT 1
44283: ARRAY
44284: PPUSH
44285: CALL_OW 251
44289: PPUSH
44290: LD_VAR 0 17
44294: PUSH
44295: LD_INT 1
44297: ARRAY
44298: PPUSH
44299: CALL_OW 254
44303: PPUSH
44304: LD_INT 5
44306: PPUSH
44307: CALL_OW 273
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44316: LD_VAR 0 16
44320: PUSH
44321: LD_INT 1
44323: ARRAY
44324: PPUSH
44325: LD_VAR 0 16
44329: PUSH
44330: LD_INT 2
44332: ARRAY
44333: PPUSH
44334: CALL_OW 488
44338: IFFALSE 44369
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44340: LD_VAR 0 13
44344: PPUSH
44345: LD_VAR 0 16
44349: PUSH
44350: LD_INT 1
44352: ARRAY
44353: PPUSH
44354: LD_VAR 0 16
44358: PUSH
44359: LD_INT 2
44361: ARRAY
44362: PPUSH
44363: CALL_OW 111
// continue ;
44367: GO 43859
// end ; end ; r := GetDir ( tmp ) ;
44369: LD_ADDR_VAR 0 15
44373: PUSH
44374: LD_VAR 0 13
44378: PPUSH
44379: CALL_OW 254
44383: ST_TO_ADDR
// if r = 5 then
44384: LD_VAR 0 15
44388: PUSH
44389: LD_INT 5
44391: EQUAL
44392: IFFALSE 44402
// r := 0 ;
44394: LD_ADDR_VAR 0 15
44398: PUSH
44399: LD_INT 0
44401: ST_TO_ADDR
// for j = r to 5 do
44402: LD_ADDR_VAR 0 10
44406: PUSH
44407: DOUBLE
44408: LD_VAR 0 15
44412: DEC
44413: ST_TO_ADDR
44414: LD_INT 5
44416: PUSH
44417: FOR_TO
44418: IFFALSE 44532
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44420: LD_ADDR_VAR 0 11
44424: PUSH
44425: LD_VAR 0 13
44429: PPUSH
44430: CALL_OW 250
44434: PPUSH
44435: LD_VAR 0 10
44439: PPUSH
44440: LD_INT 2
44442: PPUSH
44443: CALL_OW 272
44447: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44448: LD_ADDR_VAR 0 12
44452: PUSH
44453: LD_VAR 0 13
44457: PPUSH
44458: CALL_OW 251
44462: PPUSH
44463: LD_VAR 0 10
44467: PPUSH
44468: LD_INT 2
44470: PPUSH
44471: CALL_OW 273
44475: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44476: LD_VAR 0 11
44480: PPUSH
44481: LD_VAR 0 12
44485: PPUSH
44486: CALL_OW 488
44490: PUSH
44491: LD_VAR 0 11
44495: PPUSH
44496: LD_VAR 0 12
44500: PPUSH
44501: CALL_OW 428
44505: NOT
44506: AND
44507: IFFALSE 44530
// begin ComMoveXY ( tmp , _x , _y ) ;
44509: LD_VAR 0 13
44513: PPUSH
44514: LD_VAR 0 11
44518: PPUSH
44519: LD_VAR 0 12
44523: PPUSH
44524: CALL_OW 111
// break ;
44528: GO 44532
// end ; end ;
44530: GO 44417
44532: POP
44533: POP
// end ; end ;
44534: GO 43859
44536: POP
44537: POP
// end ;
44538: LD_VAR 0 8
44542: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44543: LD_INT 0
44545: PPUSH
// result := true ;
44546: LD_ADDR_VAR 0 3
44550: PUSH
44551: LD_INT 1
44553: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44554: LD_VAR 0 2
44558: PUSH
44559: LD_INT 24
44561: DOUBLE
44562: EQUAL
44563: IFTRUE 44573
44565: LD_INT 33
44567: DOUBLE
44568: EQUAL
44569: IFTRUE 44573
44571: GO 44598
44573: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44574: LD_ADDR_VAR 0 3
44578: PUSH
44579: LD_INT 32
44581: PPUSH
44582: LD_VAR 0 1
44586: PPUSH
44587: CALL_OW 321
44591: PUSH
44592: LD_INT 2
44594: EQUAL
44595: ST_TO_ADDR
44596: GO 44914
44598: LD_INT 20
44600: DOUBLE
44601: EQUAL
44602: IFTRUE 44606
44604: GO 44631
44606: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44607: LD_ADDR_VAR 0 3
44611: PUSH
44612: LD_INT 6
44614: PPUSH
44615: LD_VAR 0 1
44619: PPUSH
44620: CALL_OW 321
44624: PUSH
44625: LD_INT 2
44627: EQUAL
44628: ST_TO_ADDR
44629: GO 44914
44631: LD_INT 22
44633: DOUBLE
44634: EQUAL
44635: IFTRUE 44645
44637: LD_INT 36
44639: DOUBLE
44640: EQUAL
44641: IFTRUE 44645
44643: GO 44670
44645: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44646: LD_ADDR_VAR 0 3
44650: PUSH
44651: LD_INT 15
44653: PPUSH
44654: LD_VAR 0 1
44658: PPUSH
44659: CALL_OW 321
44663: PUSH
44664: LD_INT 2
44666: EQUAL
44667: ST_TO_ADDR
44668: GO 44914
44670: LD_INT 30
44672: DOUBLE
44673: EQUAL
44674: IFTRUE 44678
44676: GO 44703
44678: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44679: LD_ADDR_VAR 0 3
44683: PUSH
44684: LD_INT 20
44686: PPUSH
44687: LD_VAR 0 1
44691: PPUSH
44692: CALL_OW 321
44696: PUSH
44697: LD_INT 2
44699: EQUAL
44700: ST_TO_ADDR
44701: GO 44914
44703: LD_INT 28
44705: DOUBLE
44706: EQUAL
44707: IFTRUE 44717
44709: LD_INT 21
44711: DOUBLE
44712: EQUAL
44713: IFTRUE 44717
44715: GO 44742
44717: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44718: LD_ADDR_VAR 0 3
44722: PUSH
44723: LD_INT 21
44725: PPUSH
44726: LD_VAR 0 1
44730: PPUSH
44731: CALL_OW 321
44735: PUSH
44736: LD_INT 2
44738: EQUAL
44739: ST_TO_ADDR
44740: GO 44914
44742: LD_INT 16
44744: DOUBLE
44745: EQUAL
44746: IFTRUE 44750
44748: GO 44775
44750: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44751: LD_ADDR_VAR 0 3
44755: PUSH
44756: LD_INT 84
44758: PPUSH
44759: LD_VAR 0 1
44763: PPUSH
44764: CALL_OW 321
44768: PUSH
44769: LD_INT 2
44771: EQUAL
44772: ST_TO_ADDR
44773: GO 44914
44775: LD_INT 19
44777: DOUBLE
44778: EQUAL
44779: IFTRUE 44789
44781: LD_INT 23
44783: DOUBLE
44784: EQUAL
44785: IFTRUE 44789
44787: GO 44814
44789: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44790: LD_ADDR_VAR 0 3
44794: PUSH
44795: LD_INT 83
44797: PPUSH
44798: LD_VAR 0 1
44802: PPUSH
44803: CALL_OW 321
44807: PUSH
44808: LD_INT 2
44810: EQUAL
44811: ST_TO_ADDR
44812: GO 44914
44814: LD_INT 17
44816: DOUBLE
44817: EQUAL
44818: IFTRUE 44822
44820: GO 44847
44822: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44823: LD_ADDR_VAR 0 3
44827: PUSH
44828: LD_INT 39
44830: PPUSH
44831: LD_VAR 0 1
44835: PPUSH
44836: CALL_OW 321
44840: PUSH
44841: LD_INT 2
44843: EQUAL
44844: ST_TO_ADDR
44845: GO 44914
44847: LD_INT 18
44849: DOUBLE
44850: EQUAL
44851: IFTRUE 44855
44853: GO 44880
44855: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44856: LD_ADDR_VAR 0 3
44860: PUSH
44861: LD_INT 40
44863: PPUSH
44864: LD_VAR 0 1
44868: PPUSH
44869: CALL_OW 321
44873: PUSH
44874: LD_INT 2
44876: EQUAL
44877: ST_TO_ADDR
44878: GO 44914
44880: LD_INT 27
44882: DOUBLE
44883: EQUAL
44884: IFTRUE 44888
44886: GO 44913
44888: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44889: LD_ADDR_VAR 0 3
44893: PUSH
44894: LD_INT 35
44896: PPUSH
44897: LD_VAR 0 1
44901: PPUSH
44902: CALL_OW 321
44906: PUSH
44907: LD_INT 2
44909: EQUAL
44910: ST_TO_ADDR
44911: GO 44914
44913: POP
// end ;
44914: LD_VAR 0 3
44918: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44919: LD_INT 0
44921: PPUSH
44922: PPUSH
44923: PPUSH
44924: PPUSH
44925: PPUSH
44926: PPUSH
44927: PPUSH
44928: PPUSH
44929: PPUSH
44930: PPUSH
44931: PPUSH
// result := false ;
44932: LD_ADDR_VAR 0 6
44936: PUSH
44937: LD_INT 0
44939: ST_TO_ADDR
// if btype = b_depot then
44940: LD_VAR 0 2
44944: PUSH
44945: LD_INT 0
44947: EQUAL
44948: IFFALSE 44960
// begin result := true ;
44950: LD_ADDR_VAR 0 6
44954: PUSH
44955: LD_INT 1
44957: ST_TO_ADDR
// exit ;
44958: GO 45786
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44960: LD_VAR 0 1
44964: NOT
44965: PUSH
44966: LD_VAR 0 1
44970: PPUSH
44971: CALL_OW 266
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: IN
44986: NOT
44987: OR
44988: PUSH
44989: LD_VAR 0 2
44993: NOT
44994: OR
44995: PUSH
44996: LD_VAR 0 5
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: LD_INT 3
45012: PUSH
45013: LD_INT 4
45015: PUSH
45016: LD_INT 5
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: IN
45027: NOT
45028: OR
45029: PUSH
45030: LD_VAR 0 3
45034: PPUSH
45035: LD_VAR 0 4
45039: PPUSH
45040: CALL_OW 488
45044: NOT
45045: OR
45046: IFFALSE 45050
// exit ;
45048: GO 45786
// side := GetSide ( depot ) ;
45050: LD_ADDR_VAR 0 9
45054: PUSH
45055: LD_VAR 0 1
45059: PPUSH
45060: CALL_OW 255
45064: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45065: LD_VAR 0 9
45069: PPUSH
45070: LD_VAR 0 2
45074: PPUSH
45075: CALL 44543 0 2
45079: NOT
45080: IFFALSE 45084
// exit ;
45082: GO 45786
// pom := GetBase ( depot ) ;
45084: LD_ADDR_VAR 0 10
45088: PUSH
45089: LD_VAR 0 1
45093: PPUSH
45094: CALL_OW 274
45098: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45099: LD_ADDR_VAR 0 11
45103: PUSH
45104: LD_VAR 0 2
45108: PPUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 248
45118: PPUSH
45119: CALL_OW 450
45123: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45124: LD_VAR 0 10
45128: PPUSH
45129: LD_INT 1
45131: PPUSH
45132: CALL_OW 275
45136: PUSH
45137: LD_VAR 0 11
45141: PUSH
45142: LD_INT 1
45144: ARRAY
45145: GREATEREQUAL
45146: PUSH
45147: LD_VAR 0 10
45151: PPUSH
45152: LD_INT 2
45154: PPUSH
45155: CALL_OW 275
45159: PUSH
45160: LD_VAR 0 11
45164: PUSH
45165: LD_INT 2
45167: ARRAY
45168: GREATEREQUAL
45169: AND
45170: PUSH
45171: LD_VAR 0 10
45175: PPUSH
45176: LD_INT 3
45178: PPUSH
45179: CALL_OW 275
45183: PUSH
45184: LD_VAR 0 11
45188: PUSH
45189: LD_INT 3
45191: ARRAY
45192: GREATEREQUAL
45193: AND
45194: NOT
45195: IFFALSE 45199
// exit ;
45197: GO 45786
// if GetBType ( depot ) = b_depot then
45199: LD_VAR 0 1
45203: PPUSH
45204: CALL_OW 266
45208: PUSH
45209: LD_INT 0
45211: EQUAL
45212: IFFALSE 45224
// dist := 28 else
45214: LD_ADDR_VAR 0 14
45218: PUSH
45219: LD_INT 28
45221: ST_TO_ADDR
45222: GO 45232
// dist := 36 ;
45224: LD_ADDR_VAR 0 14
45228: PUSH
45229: LD_INT 36
45231: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45232: LD_VAR 0 1
45236: PPUSH
45237: LD_VAR 0 3
45241: PPUSH
45242: LD_VAR 0 4
45246: PPUSH
45247: CALL_OW 297
45251: PUSH
45252: LD_VAR 0 14
45256: GREATER
45257: IFFALSE 45261
// exit ;
45259: GO 45786
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45261: LD_ADDR_VAR 0 12
45265: PUSH
45266: LD_VAR 0 2
45270: PPUSH
45271: LD_VAR 0 3
45275: PPUSH
45276: LD_VAR 0 4
45280: PPUSH
45281: LD_VAR 0 5
45285: PPUSH
45286: LD_VAR 0 1
45290: PPUSH
45291: CALL_OW 248
45295: PPUSH
45296: LD_INT 0
45298: PPUSH
45299: CALL 45791 0 6
45303: ST_TO_ADDR
// if not hexes then
45304: LD_VAR 0 12
45308: NOT
45309: IFFALSE 45313
// exit ;
45311: GO 45786
// hex := GetHexInfo ( x , y ) ;
45313: LD_ADDR_VAR 0 15
45317: PUSH
45318: LD_VAR 0 3
45322: PPUSH
45323: LD_VAR 0 4
45327: PPUSH
45328: CALL_OW 546
45332: ST_TO_ADDR
// if hex [ 1 ] then
45333: LD_VAR 0 15
45337: PUSH
45338: LD_INT 1
45340: ARRAY
45341: IFFALSE 45345
// exit ;
45343: GO 45786
// height := hex [ 2 ] ;
45345: LD_ADDR_VAR 0 13
45349: PUSH
45350: LD_VAR 0 15
45354: PUSH
45355: LD_INT 2
45357: ARRAY
45358: ST_TO_ADDR
// for i = 1 to hexes do
45359: LD_ADDR_VAR 0 7
45363: PUSH
45364: DOUBLE
45365: LD_INT 1
45367: DEC
45368: ST_TO_ADDR
45369: LD_VAR 0 12
45373: PUSH
45374: FOR_TO
45375: IFFALSE 45705
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45377: LD_VAR 0 12
45381: PUSH
45382: LD_VAR 0 7
45386: ARRAY
45387: PUSH
45388: LD_INT 1
45390: ARRAY
45391: PPUSH
45392: LD_VAR 0 12
45396: PUSH
45397: LD_VAR 0 7
45401: ARRAY
45402: PUSH
45403: LD_INT 2
45405: ARRAY
45406: PPUSH
45407: CALL_OW 488
45411: NOT
45412: PUSH
45413: LD_VAR 0 12
45417: PUSH
45418: LD_VAR 0 7
45422: ARRAY
45423: PUSH
45424: LD_INT 1
45426: ARRAY
45427: PPUSH
45428: LD_VAR 0 12
45432: PUSH
45433: LD_VAR 0 7
45437: ARRAY
45438: PUSH
45439: LD_INT 2
45441: ARRAY
45442: PPUSH
45443: CALL_OW 428
45447: PUSH
45448: LD_INT 0
45450: GREATER
45451: OR
45452: PUSH
45453: LD_VAR 0 12
45457: PUSH
45458: LD_VAR 0 7
45462: ARRAY
45463: PUSH
45464: LD_INT 1
45466: ARRAY
45467: PPUSH
45468: LD_VAR 0 12
45472: PUSH
45473: LD_VAR 0 7
45477: ARRAY
45478: PUSH
45479: LD_INT 2
45481: ARRAY
45482: PPUSH
45483: CALL_OW 351
45487: OR
45488: IFFALSE 45494
// exit ;
45490: POP
45491: POP
45492: GO 45786
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45494: LD_ADDR_VAR 0 8
45498: PUSH
45499: LD_VAR 0 12
45503: PUSH
45504: LD_VAR 0 7
45508: ARRAY
45509: PUSH
45510: LD_INT 1
45512: ARRAY
45513: PPUSH
45514: LD_VAR 0 12
45518: PUSH
45519: LD_VAR 0 7
45523: ARRAY
45524: PUSH
45525: LD_INT 2
45527: ARRAY
45528: PPUSH
45529: CALL_OW 546
45533: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45534: LD_VAR 0 8
45538: PUSH
45539: LD_INT 1
45541: ARRAY
45542: PUSH
45543: LD_VAR 0 8
45547: PUSH
45548: LD_INT 2
45550: ARRAY
45551: PUSH
45552: LD_VAR 0 13
45556: PUSH
45557: LD_INT 2
45559: PLUS
45560: GREATER
45561: OR
45562: PUSH
45563: LD_VAR 0 8
45567: PUSH
45568: LD_INT 2
45570: ARRAY
45571: PUSH
45572: LD_VAR 0 13
45576: PUSH
45577: LD_INT 2
45579: MINUS
45580: LESS
45581: OR
45582: PUSH
45583: LD_VAR 0 8
45587: PUSH
45588: LD_INT 3
45590: ARRAY
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 8
45597: PUSH
45598: LD_INT 9
45600: PUSH
45601: LD_INT 10
45603: PUSH
45604: LD_INT 11
45606: PUSH
45607: LD_INT 12
45609: PUSH
45610: LD_INT 13
45612: PUSH
45613: LD_INT 16
45615: PUSH
45616: LD_INT 17
45618: PUSH
45619: LD_INT 18
45621: PUSH
45622: LD_INT 19
45624: PUSH
45625: LD_INT 20
45627: PUSH
45628: LD_INT 21
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: IN
45646: NOT
45647: OR
45648: PUSH
45649: LD_VAR 0 8
45653: PUSH
45654: LD_INT 5
45656: ARRAY
45657: NOT
45658: OR
45659: PUSH
45660: LD_VAR 0 8
45664: PUSH
45665: LD_INT 6
45667: ARRAY
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: LD_INT 7
45677: PUSH
45678: LD_INT 9
45680: PUSH
45681: LD_INT 10
45683: PUSH
45684: LD_INT 11
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: IN
45695: NOT
45696: OR
45697: IFFALSE 45703
// exit ;
45699: POP
45700: POP
45701: GO 45786
// end ;
45703: GO 45374
45705: POP
45706: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45707: LD_VAR 0 9
45711: PPUSH
45712: LD_VAR 0 3
45716: PPUSH
45717: LD_VAR 0 4
45721: PPUSH
45722: LD_INT 20
45724: PPUSH
45725: CALL 37709 0 4
45729: PUSH
45730: LD_INT 4
45732: ARRAY
45733: IFFALSE 45737
// exit ;
45735: GO 45786
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45737: LD_VAR 0 2
45741: PUSH
45742: LD_INT 29
45744: PUSH
45745: LD_INT 30
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: IN
45752: PUSH
45753: LD_VAR 0 3
45757: PPUSH
45758: LD_VAR 0 4
45762: PPUSH
45763: LD_VAR 0 9
45767: PPUSH
45768: CALL_OW 440
45772: NOT
45773: AND
45774: IFFALSE 45778
// exit ;
45776: GO 45786
// result := true ;
45778: LD_ADDR_VAR 0 6
45782: PUSH
45783: LD_INT 1
45785: ST_TO_ADDR
// end ;
45786: LD_VAR 0 6
45790: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45791: LD_INT 0
45793: PPUSH
45794: PPUSH
45795: PPUSH
45796: PPUSH
45797: PPUSH
45798: PPUSH
45799: PPUSH
45800: PPUSH
45801: PPUSH
45802: PPUSH
45803: PPUSH
45804: PPUSH
45805: PPUSH
45806: PPUSH
45807: PPUSH
45808: PPUSH
45809: PPUSH
45810: PPUSH
45811: PPUSH
45812: PPUSH
45813: PPUSH
45814: PPUSH
45815: PPUSH
45816: PPUSH
45817: PPUSH
45818: PPUSH
45819: PPUSH
45820: PPUSH
45821: PPUSH
45822: PPUSH
45823: PPUSH
45824: PPUSH
45825: PPUSH
45826: PPUSH
45827: PPUSH
45828: PPUSH
45829: PPUSH
45830: PPUSH
45831: PPUSH
45832: PPUSH
45833: PPUSH
45834: PPUSH
45835: PPUSH
45836: PPUSH
45837: PPUSH
45838: PPUSH
45839: PPUSH
45840: PPUSH
45841: PPUSH
45842: PPUSH
45843: PPUSH
45844: PPUSH
45845: PPUSH
45846: PPUSH
45847: PPUSH
45848: PPUSH
45849: PPUSH
45850: PPUSH
// result = [ ] ;
45851: LD_ADDR_VAR 0 7
45855: PUSH
45856: EMPTY
45857: ST_TO_ADDR
// temp_list = [ ] ;
45858: LD_ADDR_VAR 0 9
45862: PUSH
45863: EMPTY
45864: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45865: LD_VAR 0 4
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: LD_INT 4
45884: PUSH
45885: LD_INT 5
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: IN
45896: NOT
45897: PUSH
45898: LD_VAR 0 1
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: IN
45913: PUSH
45914: LD_VAR 0 5
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: LD_INT 3
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: IN
45933: NOT
45934: AND
45935: OR
45936: IFFALSE 45940
// exit ;
45938: GO 64331
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45940: LD_VAR 0 1
45944: PUSH
45945: LD_INT 6
45947: PUSH
45948: LD_INT 7
45950: PUSH
45951: LD_INT 8
45953: PUSH
45954: LD_INT 13
45956: PUSH
45957: LD_INT 12
45959: PUSH
45960: LD_INT 15
45962: PUSH
45963: LD_INT 11
45965: PUSH
45966: LD_INT 14
45968: PUSH
45969: LD_INT 10
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: IN
45983: IFFALSE 45993
// btype = b_lab ;
45985: LD_ADDR_VAR 0 1
45989: PUSH
45990: LD_INT 6
45992: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45993: LD_VAR 0 6
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: IN
46012: NOT
46013: PUSH
46014: LD_VAR 0 1
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 3
46030: PUSH
46031: LD_INT 6
46033: PUSH
46034: LD_INT 36
46036: PUSH
46037: LD_INT 4
46039: PUSH
46040: LD_INT 5
46042: PUSH
46043: LD_INT 31
46045: PUSH
46046: LD_INT 32
46048: PUSH
46049: LD_INT 33
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: IN
46065: NOT
46066: PUSH
46067: LD_VAR 0 6
46071: PUSH
46072: LD_INT 1
46074: EQUAL
46075: AND
46076: OR
46077: PUSH
46078: LD_VAR 0 1
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: LD_INT 3
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: IN
46093: NOT
46094: PUSH
46095: LD_VAR 0 6
46099: PUSH
46100: LD_INT 2
46102: EQUAL
46103: AND
46104: OR
46105: IFFALSE 46115
// mode = 0 ;
46107: LD_ADDR_VAR 0 6
46111: PUSH
46112: LD_INT 0
46114: ST_TO_ADDR
// case mode of 0 :
46115: LD_VAR 0 6
46119: PUSH
46120: LD_INT 0
46122: DOUBLE
46123: EQUAL
46124: IFTRUE 46128
46126: GO 57581
46128: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46129: LD_ADDR_VAR 0 11
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46322: LD_ADDR_VAR 0 12
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 3
46479: NEG
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 3
46490: NEG
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46518: LD_ADDR_VAR 0 13
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: NEG
46690: PUSH
46691: LD_INT 3
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46717: LD_ADDR_VAR 0 14
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 3
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 3
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46913: LD_ADDR_VAR 0 15
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 3
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 3
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47106: LD_ADDR_VAR 0 16
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 3
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 3
47263: PUSH
47264: LD_INT 3
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47299: LD_ADDR_VAR 0 17
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: LD_INT 2
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47529: LD_ADDR_VAR 0 18
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: LD_INT 2
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47759: LD_ADDR_VAR 0 19
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47989: LD_ADDR_VAR 0 20
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 2
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48219: LD_ADDR_VAR 0 21
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48449: LD_ADDR_VAR 0 22
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48679: LD_ADDR_VAR 0 23
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: LD_INT 3
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 3
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48959: LD_ADDR_VAR 0 24
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 3
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 3
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49235: LD_ADDR_VAR 0 25
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 3
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 3
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: LD_INT 3
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 3
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49509: LD_ADDR_VAR 0 26
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49785: LD_ADDR_VAR 0 27
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: LD_INT 2
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 3
50018: NEG
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50065: LD_ADDR_VAR 0 28
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 3
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 3
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 3
50312: NEG
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50347: LD_ADDR_VAR 0 29
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: LD_INT 3
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 3
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 3
50591: NEG
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50626: LD_ADDR_VAR 0 30
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50904: LD_ADDR_VAR 0 31
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 3
51147: NEG
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51182: LD_ADDR_VAR 0 32
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 3
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51460: LD_ADDR_VAR 0 33
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 3
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 3
51704: NEG
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51739: LD_ADDR_VAR 0 34
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: LD_INT 3
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: NEG
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52019: LD_ADDR_VAR 0 35
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52131: LD_ADDR_VAR 0 36
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52243: LD_ADDR_VAR 0 37
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52355: LD_ADDR_VAR 0 38
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52467: LD_ADDR_VAR 0 39
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52579: LD_ADDR_VAR 0 40
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52691: LD_ADDR_VAR 0 41
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 3
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 3
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 3
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: LD_INT 3
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 3
52965: NEG
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 3
52976: NEG
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 3
52988: NEG
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 3
53000: NEG
53001: PUSH
53002: LD_INT 3
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53041: LD_ADDR_VAR 0 42
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 3
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: LD_INT 3
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: LD_INT 3
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 3
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 3
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53391: LD_ADDR_VAR 0 43
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 3
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 2
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 3
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 3
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 3
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 3
53687: NEG
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53739: LD_ADDR_VAR 0 44
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: LD_INT 3
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 3
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 3
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 3
54036: NEG
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54089: LD_ADDR_VAR 0 45
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 2
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 3
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 3
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 3
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 3
54398: NEG
54399: PUSH
54400: LD_INT 3
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54439: LD_ADDR_VAR 0 46
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 3
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 3
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 3
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 3
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 3
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 3
54735: NEG
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54787: LD_ADDR_VAR 0 47
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54938: LD_ADDR_VAR 0 48
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55085: LD_ADDR_VAR 0 49
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55229: LD_ADDR_VAR 0 50
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55373: LD_ADDR_VAR 0 51
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55520: LD_ADDR_VAR 0 52
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55671: LD_ADDR_VAR 0 53
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55901: LD_ADDR_VAR 0 54
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56131: LD_ADDR_VAR 0 55
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56361: LD_ADDR_VAR 0 56
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56591: LD_ADDR_VAR 0 57
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56821: LD_ADDR_VAR 0 58
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57051: LD_ADDR_VAR 0 59
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57139: LD_ADDR_VAR 0 60
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57227: LD_ADDR_VAR 0 61
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57315: LD_ADDR_VAR 0 62
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57403: LD_ADDR_VAR 0 63
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57491: LD_ADDR_VAR 0 64
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: ST_TO_ADDR
// end ; 1 :
57579: GO 63476
57581: LD_INT 1
57583: DOUBLE
57584: EQUAL
57585: IFTRUE 57589
57587: GO 60212
57589: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57590: LD_ADDR_VAR 0 11
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 3
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 3
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57634: LD_ADDR_VAR 0 12
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 3
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 3
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: LIST
57674: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57675: LD_ADDR_VAR 0 13
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: LD_INT 3
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57715: LD_ADDR_VAR 0 14
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57756: LD_ADDR_VAR 0 15
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57800: LD_ADDR_VAR 0 16
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: LD_INT 3
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 3
57831: NEG
57832: PUSH
57833: LD_INT 3
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57846: LD_ADDR_VAR 0 17
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 3
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57890: LD_ADDR_VAR 0 18
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57931: LD_ADDR_VAR 0 19
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: LD_INT 3
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57971: LD_ADDR_VAR 0 20
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: LIST
58011: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58012: LD_ADDR_VAR 0 21
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 3
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: LIST
58055: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58056: LD_ADDR_VAR 0 22
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: LD_INT 3
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: LIST
58101: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58102: LD_ADDR_VAR 0 23
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 3
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 4
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: LIST
58145: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58146: LD_ADDR_VAR 0 24
58150: PUSH
58151: LD_INT 3
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 4
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58187: LD_ADDR_VAR 0 25
58191: PUSH
58192: LD_INT 3
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 4
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: LD_INT 4
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58227: LD_ADDR_VAR 0 26
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 4
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 3
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: LIST
58267: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58268: LD_ADDR_VAR 0 27
58272: PUSH
58273: LD_INT 3
58275: NEG
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 4
58297: NEG
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58312: LD_ADDR_VAR 0 28
58316: PUSH
58317: LD_INT 3
58319: NEG
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 3
58331: NEG
58332: PUSH
58333: LD_INT 4
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 4
58343: NEG
58344: PUSH
58345: LD_INT 3
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58358: LD_ADDR_VAR 0 29
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 3
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: LD_INT 3
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 4
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 4
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 3
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 5
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 5
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 4
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 6
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: LD_INT 6
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 5
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58513: LD_ADDR_VAR 0 30
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 3
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 3
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 3
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 4
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 4
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 4
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 5
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 5
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 5
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 6
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 6
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58656: LD_ADDR_VAR 0 31
58660: PUSH
58661: LD_INT 3
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 3
58673: PUSH
58674: LD_INT 3
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: LD_INT 3
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 4
58693: PUSH
58694: LD_INT 3
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 4
58703: PUSH
58704: LD_INT 4
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: LD_INT 4
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 5
58723: PUSH
58724: LD_INT 4
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 5
58733: PUSH
58734: LD_INT 5
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 4
58743: PUSH
58744: LD_INT 5
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 6
58753: PUSH
58754: LD_INT 5
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 6
58763: PUSH
58764: LD_INT 6
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 5
58773: PUSH
58774: LD_INT 6
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58795: LD_ADDR_VAR 0 32
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: LD_INT 2
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: LD_INT 4
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: LD_INT 4
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: LD_INT 3
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: LD_INT 5
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 5
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 4
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 6
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 6
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 5
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58938: LD_ADDR_VAR 0 33
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 4
58990: NEG
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 4
59001: NEG
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 4
59013: NEG
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 5
59024: NEG
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 5
59035: NEG
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 5
59047: NEG
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 6
59058: NEG
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 6
59069: NEG
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59093: LD_ADDR_VAR 0 34
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 3
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: NEG
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: LD_INT 4
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 4
59148: NEG
59149: PUSH
59150: LD_INT 3
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 4
59160: NEG
59161: PUSH
59162: LD_INT 4
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 4
59172: NEG
59173: PUSH
59174: LD_INT 5
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 5
59184: NEG
59185: PUSH
59186: LD_INT 4
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 5
59196: NEG
59197: PUSH
59198: LD_INT 5
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 5
59208: NEG
59209: PUSH
59210: LD_INT 6
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 6
59220: NEG
59221: PUSH
59222: LD_INT 5
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 6
59232: NEG
59233: PUSH
59234: LD_INT 6
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59256: LD_ADDR_VAR 0 41
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 2
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: LD_INT 3
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: LIST
59299: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59300: LD_ADDR_VAR 0 42
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 3
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: LIST
59340: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59341: LD_ADDR_VAR 0 43
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 3
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: LD_INT 3
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59381: LD_ADDR_VAR 0 44
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59422: LD_ADDR_VAR 0 45
59426: PUSH
59427: LD_INT 2
59429: NEG
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59466: LD_ADDR_VAR 0 46
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: LD_INT 3
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 3
59497: NEG
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: LIST
59511: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59512: LD_ADDR_VAR 0 47
59516: PUSH
59517: LD_INT 2
59519: NEG
59520: PUSH
59521: LD_INT 3
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59545: LD_ADDR_VAR 0 48
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59576: LD_ADDR_VAR 0 49
59580: PUSH
59581: LD_INT 3
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 3
59593: PUSH
59594: LD_INT 2
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59605: LD_ADDR_VAR 0 50
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59634: LD_ADDR_VAR 0 51
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 2
59652: NEG
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59665: LD_ADDR_VAR 0 52
59669: PUSH
59670: LD_INT 3
59672: NEG
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: NEG
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59698: LD_ADDR_VAR 0 53
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 3
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59742: LD_ADDR_VAR 0 54
59746: PUSH
59747: LD_INT 2
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: LIST
59782: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59783: LD_ADDR_VAR 0 55
59787: PUSH
59788: LD_INT 3
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: LIST
59822: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59823: LD_ADDR_VAR 0 56
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: LD_INT 3
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: LIST
59863: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59864: LD_ADDR_VAR 0 57
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 3
59882: NEG
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 3
59893: NEG
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59908: LD_ADDR_VAR 0 58
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 3
59927: NEG
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: NEG
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: LIST
59953: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59954: LD_ADDR_VAR 0 59
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: LIST
59997: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59998: LD_ADDR_VAR 0 60
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60039: LD_ADDR_VAR 0 61
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: LIST
60078: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60079: LD_ADDR_VAR 0 62
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 2
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: LIST
60119: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60120: LD_ADDR_VAR 0 63
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: LIST
60163: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60164: LD_ADDR_VAR 0 64
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: LIST
60209: ST_TO_ADDR
// end ; 2 :
60210: GO 63476
60212: LD_INT 2
60214: DOUBLE
60215: EQUAL
60216: IFTRUE 60220
60218: GO 63475
60220: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60221: LD_ADDR_VAR 0 29
60225: PUSH
60226: LD_INT 4
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 4
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 5
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 5
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 4
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 3
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 5
60311: PUSH
60312: LD_INT 2
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: LD_INT 3
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 3
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 4
60341: PUSH
60342: LD_INT 3
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 4
60351: PUSH
60352: LD_INT 4
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: LD_INT 4
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: LD_INT 3
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 4
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: PUSH
60402: LD_INT 4
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 4
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 4
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 5
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 5
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: LD_INT 4
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: LD_INT 3
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 5
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: LD_INT 3
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 3
60504: NEG
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 3
60515: NEG
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 3
60549: NEG
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 4
60560: NEG
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 4
60571: NEG
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 4
60583: NEG
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 4
60606: NEG
60607: PUSH
60608: LD_INT 4
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 4
60618: NEG
60619: PUSH
60620: LD_INT 5
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 3
60630: NEG
60631: PUSH
60632: LD_INT 4
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: LD_INT 3
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 4
60654: NEG
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 5
60666: NEG
60667: PUSH
60668: LD_INT 4
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 5
60678: NEG
60679: PUSH
60680: LD_INT 5
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 3
60690: NEG
60691: PUSH
60692: LD_INT 5
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 5
60702: NEG
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60759: LD_ADDR_VAR 0 30
60763: PUSH
60764: LD_INT 4
60766: PUSH
60767: LD_INT 4
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 4
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 5
60786: PUSH
60787: LD_INT 4
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 5
60796: PUSH
60797: LD_INT 5
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 4
60806: PUSH
60807: LD_INT 5
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: PUSH
60817: LD_INT 4
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 3
60826: PUSH
60827: LD_INT 3
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 5
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 3
60846: PUSH
60847: LD_INT 5
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 3
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: LD_INT 4
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 4
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 2
60928: PUSH
60929: LD_INT 4
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: LD_INT 2
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 4
60949: NEG
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 4
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 3
60983: NEG
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 4
60994: NEG
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 5
61005: NEG
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 5
61016: NEG
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 5
61028: NEG
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: LD_INT 3
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 3
61063: NEG
61064: PUSH
61065: LD_INT 4
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: LD_INT 3
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 2
61087: NEG
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 4
61111: NEG
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 4
61123: NEG
61124: PUSH
61125: LD_INT 4
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 4
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 4
61147: NEG
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: LD_INT 4
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 5
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 4
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: LD_INT 3
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: LD_INT 3
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 4
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 5
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: LD_INT 3
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: LD_INT 5
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61306: LD_ADDR_VAR 0 31
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 4
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 4
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 5
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 5
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 4
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 5
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: LD_INT 3
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: NEG
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 2
61440: NEG
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 4
61462: NEG
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 4
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 4
61485: NEG
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 4
61508: NEG
61509: PUSH
61510: LD_INT 4
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 4
61520: NEG
61521: PUSH
61522: LD_INT 5
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 3
61532: NEG
61533: PUSH
61534: LD_INT 4
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 3
61544: NEG
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 4
61556: NEG
61557: PUSH
61558: LD_INT 3
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 5
61568: NEG
61569: PUSH
61570: LD_INT 4
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 5
61580: NEG
61581: PUSH
61582: LD_INT 5
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 3
61592: NEG
61593: PUSH
61594: LD_INT 5
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 5
61604: NEG
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 3
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: LD_INT 4
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: LD_INT 3
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: LD_INT 2
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 2
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 3
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 4
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: LD_INT 4
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 4
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 4
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 5
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 5
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 4
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 3
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 3
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 5
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61856: LD_ADDR_VAR 0 32
61860: PUSH
61861: LD_INT 4
61863: NEG
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 4
61874: NEG
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 3
61897: NEG
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 4
61908: NEG
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 5
61919: NEG
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 5
61930: NEG
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 5
61942: NEG
61943: PUSH
61944: LD_INT 2
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 3
61954: NEG
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: NEG
61966: PUSH
61967: LD_INT 3
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 3
61977: NEG
61978: PUSH
61979: LD_INT 4
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: NEG
61990: PUSH
61991: LD_INT 3
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: LD_INT 2
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 4
62025: NEG
62026: PUSH
62027: LD_INT 3
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 4
62037: NEG
62038: PUSH
62039: LD_INT 4
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: LD_INT 4
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 4
62061: NEG
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 4
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 5
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: LD_INT 4
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 3
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 3
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 4
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: LD_INT 5
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: LD_INT 3
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: LD_INT 5
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 3
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 4
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 4
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 3
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: LD_INT 2
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 4
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 4
62268: PUSH
62269: LD_INT 4
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 4
62278: PUSH
62279: LD_INT 3
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 5
62288: PUSH
62289: LD_INT 4
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 5
62298: PUSH
62299: LD_INT 5
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 4
62308: PUSH
62309: LD_INT 5
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: LD_INT 4
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 3
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 5
62338: PUSH
62339: LD_INT 3
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: PUSH
62349: LD_INT 5
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62403: LD_ADDR_VAR 0 33
62407: PUSH
62408: LD_INT 4
62410: NEG
62411: PUSH
62412: LD_INT 4
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 4
62422: NEG
62423: PUSH
62424: LD_INT 5
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: LD_INT 4
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 3
62446: NEG
62447: PUSH
62448: LD_INT 3
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 4
62458: NEG
62459: PUSH
62460: LD_INT 3
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 5
62470: NEG
62471: PUSH
62472: LD_INT 4
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 5
62482: NEG
62483: PUSH
62484: LD_INT 5
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 3
62494: NEG
62495: PUSH
62496: LD_INT 5
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 5
62506: NEG
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: LD_INT 3
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 4
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 3
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: LD_INT 2
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: LD_INT 3
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: LD_INT 4
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 2
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: LD_INT 4
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 4
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 4
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 5
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 5
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 4
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 3
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 3
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 3
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 5
62703: PUSH
62704: LD_INT 2
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 3
62713: PUSH
62714: LD_INT 3
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 4
62733: PUSH
62734: LD_INT 3
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 4
62743: PUSH
62744: LD_INT 4
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 3
62753: PUSH
62754: LD_INT 4
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 4
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 2
62793: PUSH
62794: LD_INT 4
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 4
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 3
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: LD_INT 4
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: LD_INT 5
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 5
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: LD_INT 4
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: LD_INT 3
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: PUSH
62876: LD_INT 5
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 2
62885: NEG
62886: PUSH
62887: LD_INT 3
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62941: LD_ADDR_VAR 0 34
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 4
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 5
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 4
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: LD_INT 3
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: LD_INT 3
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 4
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: LD_INT 5
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: LD_INT 3
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: LD_INT 5
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 3
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 3
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 4
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 4
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 3
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 2
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: PUSH
63112: LD_INT 1
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 4
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 4
63143: PUSH
63144: LD_INT 4
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 4
63153: PUSH
63154: LD_INT 3
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 5
63163: PUSH
63164: LD_INT 4
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 5
63173: PUSH
63174: LD_INT 5
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 4
63183: PUSH
63184: LD_INT 5
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 3
63193: PUSH
63194: LD_INT 4
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 3
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 5
63213: PUSH
63214: LD_INT 3
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 3
63223: PUSH
63224: LD_INT 5
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: LD_INT 3
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 4
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 4
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: LD_INT 3
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 4
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: NEG
63316: PUSH
63317: LD_INT 2
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 4
63326: NEG
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 4
63337: NEG
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 3
63349: NEG
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 3
63360: NEG
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 4
63371: NEG
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 5
63382: NEG
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 5
63393: NEG
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 5
63405: NEG
63406: PUSH
63407: LD_INT 2
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 3
63417: NEG
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: ST_TO_ADDR
// end ; end ;
63473: GO 63476
63475: POP
// case btype of b_depot , b_warehouse :
63476: LD_VAR 0 1
63480: PUSH
63481: LD_INT 0
63483: DOUBLE
63484: EQUAL
63485: IFTRUE 63495
63487: LD_INT 1
63489: DOUBLE
63490: EQUAL
63491: IFTRUE 63495
63493: GO 63696
63495: POP
// case nation of nation_american :
63496: LD_VAR 0 5
63500: PUSH
63501: LD_INT 1
63503: DOUBLE
63504: EQUAL
63505: IFTRUE 63509
63507: GO 63565
63509: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63510: LD_ADDR_VAR 0 9
63514: PUSH
63515: LD_VAR 0 11
63519: PUSH
63520: LD_VAR 0 12
63524: PUSH
63525: LD_VAR 0 13
63529: PUSH
63530: LD_VAR 0 14
63534: PUSH
63535: LD_VAR 0 15
63539: PUSH
63540: LD_VAR 0 16
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: PUSH
63553: LD_VAR 0 4
63557: PUSH
63558: LD_INT 1
63560: PLUS
63561: ARRAY
63562: ST_TO_ADDR
63563: GO 63694
63565: LD_INT 2
63567: DOUBLE
63568: EQUAL
63569: IFTRUE 63573
63571: GO 63629
63573: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63574: LD_ADDR_VAR 0 9
63578: PUSH
63579: LD_VAR 0 17
63583: PUSH
63584: LD_VAR 0 18
63588: PUSH
63589: LD_VAR 0 19
63593: PUSH
63594: LD_VAR 0 20
63598: PUSH
63599: LD_VAR 0 21
63603: PUSH
63604: LD_VAR 0 22
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: PUSH
63617: LD_VAR 0 4
63621: PUSH
63622: LD_INT 1
63624: PLUS
63625: ARRAY
63626: ST_TO_ADDR
63627: GO 63694
63629: LD_INT 3
63631: DOUBLE
63632: EQUAL
63633: IFTRUE 63637
63635: GO 63693
63637: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63638: LD_ADDR_VAR 0 9
63642: PUSH
63643: LD_VAR 0 23
63647: PUSH
63648: LD_VAR 0 24
63652: PUSH
63653: LD_VAR 0 25
63657: PUSH
63658: LD_VAR 0 26
63662: PUSH
63663: LD_VAR 0 27
63667: PUSH
63668: LD_VAR 0 28
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: PUSH
63681: LD_VAR 0 4
63685: PUSH
63686: LD_INT 1
63688: PLUS
63689: ARRAY
63690: ST_TO_ADDR
63691: GO 63694
63693: POP
63694: GO 64249
63696: LD_INT 2
63698: DOUBLE
63699: EQUAL
63700: IFTRUE 63710
63702: LD_INT 3
63704: DOUBLE
63705: EQUAL
63706: IFTRUE 63710
63708: GO 63766
63710: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63711: LD_ADDR_VAR 0 9
63715: PUSH
63716: LD_VAR 0 29
63720: PUSH
63721: LD_VAR 0 30
63725: PUSH
63726: LD_VAR 0 31
63730: PUSH
63731: LD_VAR 0 32
63735: PUSH
63736: LD_VAR 0 33
63740: PUSH
63741: LD_VAR 0 34
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: PUSH
63754: LD_VAR 0 4
63758: PUSH
63759: LD_INT 1
63761: PLUS
63762: ARRAY
63763: ST_TO_ADDR
63764: GO 64249
63766: LD_INT 16
63768: DOUBLE
63769: EQUAL
63770: IFTRUE 63828
63772: LD_INT 17
63774: DOUBLE
63775: EQUAL
63776: IFTRUE 63828
63778: LD_INT 18
63780: DOUBLE
63781: EQUAL
63782: IFTRUE 63828
63784: LD_INT 19
63786: DOUBLE
63787: EQUAL
63788: IFTRUE 63828
63790: LD_INT 22
63792: DOUBLE
63793: EQUAL
63794: IFTRUE 63828
63796: LD_INT 20
63798: DOUBLE
63799: EQUAL
63800: IFTRUE 63828
63802: LD_INT 21
63804: DOUBLE
63805: EQUAL
63806: IFTRUE 63828
63808: LD_INT 23
63810: DOUBLE
63811: EQUAL
63812: IFTRUE 63828
63814: LD_INT 24
63816: DOUBLE
63817: EQUAL
63818: IFTRUE 63828
63820: LD_INT 25
63822: DOUBLE
63823: EQUAL
63824: IFTRUE 63828
63826: GO 63884
63828: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63829: LD_ADDR_VAR 0 9
63833: PUSH
63834: LD_VAR 0 35
63838: PUSH
63839: LD_VAR 0 36
63843: PUSH
63844: LD_VAR 0 37
63848: PUSH
63849: LD_VAR 0 38
63853: PUSH
63854: LD_VAR 0 39
63858: PUSH
63859: LD_VAR 0 40
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: PUSH
63872: LD_VAR 0 4
63876: PUSH
63877: LD_INT 1
63879: PLUS
63880: ARRAY
63881: ST_TO_ADDR
63882: GO 64249
63884: LD_INT 6
63886: DOUBLE
63887: EQUAL
63888: IFTRUE 63940
63890: LD_INT 7
63892: DOUBLE
63893: EQUAL
63894: IFTRUE 63940
63896: LD_INT 8
63898: DOUBLE
63899: EQUAL
63900: IFTRUE 63940
63902: LD_INT 13
63904: DOUBLE
63905: EQUAL
63906: IFTRUE 63940
63908: LD_INT 12
63910: DOUBLE
63911: EQUAL
63912: IFTRUE 63940
63914: LD_INT 15
63916: DOUBLE
63917: EQUAL
63918: IFTRUE 63940
63920: LD_INT 11
63922: DOUBLE
63923: EQUAL
63924: IFTRUE 63940
63926: LD_INT 14
63928: DOUBLE
63929: EQUAL
63930: IFTRUE 63940
63932: LD_INT 10
63934: DOUBLE
63935: EQUAL
63936: IFTRUE 63940
63938: GO 63996
63940: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63941: LD_ADDR_VAR 0 9
63945: PUSH
63946: LD_VAR 0 41
63950: PUSH
63951: LD_VAR 0 42
63955: PUSH
63956: LD_VAR 0 43
63960: PUSH
63961: LD_VAR 0 44
63965: PUSH
63966: LD_VAR 0 45
63970: PUSH
63971: LD_VAR 0 46
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: PUSH
63984: LD_VAR 0 4
63988: PUSH
63989: LD_INT 1
63991: PLUS
63992: ARRAY
63993: ST_TO_ADDR
63994: GO 64249
63996: LD_INT 36
63998: DOUBLE
63999: EQUAL
64000: IFTRUE 64004
64002: GO 64060
64004: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64005: LD_ADDR_VAR 0 9
64009: PUSH
64010: LD_VAR 0 47
64014: PUSH
64015: LD_VAR 0 48
64019: PUSH
64020: LD_VAR 0 49
64024: PUSH
64025: LD_VAR 0 50
64029: PUSH
64030: LD_VAR 0 51
64034: PUSH
64035: LD_VAR 0 52
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: PUSH
64048: LD_VAR 0 4
64052: PUSH
64053: LD_INT 1
64055: PLUS
64056: ARRAY
64057: ST_TO_ADDR
64058: GO 64249
64060: LD_INT 4
64062: DOUBLE
64063: EQUAL
64064: IFTRUE 64086
64066: LD_INT 5
64068: DOUBLE
64069: EQUAL
64070: IFTRUE 64086
64072: LD_INT 34
64074: DOUBLE
64075: EQUAL
64076: IFTRUE 64086
64078: LD_INT 37
64080: DOUBLE
64081: EQUAL
64082: IFTRUE 64086
64084: GO 64142
64086: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64087: LD_ADDR_VAR 0 9
64091: PUSH
64092: LD_VAR 0 53
64096: PUSH
64097: LD_VAR 0 54
64101: PUSH
64102: LD_VAR 0 55
64106: PUSH
64107: LD_VAR 0 56
64111: PUSH
64112: LD_VAR 0 57
64116: PUSH
64117: LD_VAR 0 58
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: PUSH
64130: LD_VAR 0 4
64134: PUSH
64135: LD_INT 1
64137: PLUS
64138: ARRAY
64139: ST_TO_ADDR
64140: GO 64249
64142: LD_INT 31
64144: DOUBLE
64145: EQUAL
64146: IFTRUE 64192
64148: LD_INT 32
64150: DOUBLE
64151: EQUAL
64152: IFTRUE 64192
64154: LD_INT 33
64156: DOUBLE
64157: EQUAL
64158: IFTRUE 64192
64160: LD_INT 27
64162: DOUBLE
64163: EQUAL
64164: IFTRUE 64192
64166: LD_INT 26
64168: DOUBLE
64169: EQUAL
64170: IFTRUE 64192
64172: LD_INT 28
64174: DOUBLE
64175: EQUAL
64176: IFTRUE 64192
64178: LD_INT 29
64180: DOUBLE
64181: EQUAL
64182: IFTRUE 64192
64184: LD_INT 30
64186: DOUBLE
64187: EQUAL
64188: IFTRUE 64192
64190: GO 64248
64192: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64193: LD_ADDR_VAR 0 9
64197: PUSH
64198: LD_VAR 0 59
64202: PUSH
64203: LD_VAR 0 60
64207: PUSH
64208: LD_VAR 0 61
64212: PUSH
64213: LD_VAR 0 62
64217: PUSH
64218: LD_VAR 0 63
64222: PUSH
64223: LD_VAR 0 64
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: PUSH
64236: LD_VAR 0 4
64240: PUSH
64241: LD_INT 1
64243: PLUS
64244: ARRAY
64245: ST_TO_ADDR
64246: GO 64249
64248: POP
// temp_list2 = [ ] ;
64249: LD_ADDR_VAR 0 10
64253: PUSH
64254: EMPTY
64255: ST_TO_ADDR
// for i in temp_list do
64256: LD_ADDR_VAR 0 8
64260: PUSH
64261: LD_VAR 0 9
64265: PUSH
64266: FOR_IN
64267: IFFALSE 64319
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64269: LD_ADDR_VAR 0 10
64273: PUSH
64274: LD_VAR 0 10
64278: PUSH
64279: LD_VAR 0 8
64283: PUSH
64284: LD_INT 1
64286: ARRAY
64287: PUSH
64288: LD_VAR 0 2
64292: PLUS
64293: PUSH
64294: LD_VAR 0 8
64298: PUSH
64299: LD_INT 2
64301: ARRAY
64302: PUSH
64303: LD_VAR 0 3
64307: PLUS
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: EMPTY
64314: LIST
64315: ADD
64316: ST_TO_ADDR
64317: GO 64266
64319: POP
64320: POP
// result = temp_list2 ;
64321: LD_ADDR_VAR 0 7
64325: PUSH
64326: LD_VAR 0 10
64330: ST_TO_ADDR
// end ;
64331: LD_VAR 0 7
64335: RET
// export function EnemyInRange ( unit , dist ) ; begin
64336: LD_INT 0
64338: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64339: LD_ADDR_VAR 0 3
64343: PUSH
64344: LD_VAR 0 1
64348: PPUSH
64349: CALL_OW 255
64353: PPUSH
64354: LD_VAR 0 1
64358: PPUSH
64359: CALL_OW 250
64363: PPUSH
64364: LD_VAR 0 1
64368: PPUSH
64369: CALL_OW 251
64373: PPUSH
64374: LD_VAR 0 2
64378: PPUSH
64379: CALL 37709 0 4
64383: PUSH
64384: LD_INT 4
64386: ARRAY
64387: ST_TO_ADDR
// end ;
64388: LD_VAR 0 3
64392: RET
// export function PlayerSeeMe ( unit ) ; begin
64393: LD_INT 0
64395: PPUSH
// result := See ( your_side , unit ) ;
64396: LD_ADDR_VAR 0 2
64400: PUSH
64401: LD_OWVAR 2
64405: PPUSH
64406: LD_VAR 0 1
64410: PPUSH
64411: CALL_OW 292
64415: ST_TO_ADDR
// end ;
64416: LD_VAR 0 2
64420: RET
// export function ReverseDir ( unit ) ; begin
64421: LD_INT 0
64423: PPUSH
// if not unit then
64424: LD_VAR 0 1
64428: NOT
64429: IFFALSE 64433
// exit ;
64431: GO 64456
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64433: LD_ADDR_VAR 0 2
64437: PUSH
64438: LD_VAR 0 1
64442: PPUSH
64443: CALL_OW 254
64447: PUSH
64448: LD_INT 3
64450: PLUS
64451: PUSH
64452: LD_INT 6
64454: MOD
64455: ST_TO_ADDR
// end ;
64456: LD_VAR 0 2
64460: RET
// export function ReverseArray ( array ) ; var i ; begin
64461: LD_INT 0
64463: PPUSH
64464: PPUSH
// if not array then
64465: LD_VAR 0 1
64469: NOT
64470: IFFALSE 64474
// exit ;
64472: GO 64529
// result := [ ] ;
64474: LD_ADDR_VAR 0 2
64478: PUSH
64479: EMPTY
64480: ST_TO_ADDR
// for i := array downto 1 do
64481: LD_ADDR_VAR 0 3
64485: PUSH
64486: DOUBLE
64487: LD_VAR 0 1
64491: INC
64492: ST_TO_ADDR
64493: LD_INT 1
64495: PUSH
64496: FOR_DOWNTO
64497: IFFALSE 64527
// result := Join ( result , array [ i ] ) ;
64499: LD_ADDR_VAR 0 2
64503: PUSH
64504: LD_VAR 0 2
64508: PPUSH
64509: LD_VAR 0 1
64513: PUSH
64514: LD_VAR 0 3
64518: ARRAY
64519: PPUSH
64520: CALL 69185 0 2
64524: ST_TO_ADDR
64525: GO 64496
64527: POP
64528: POP
// end ;
64529: LD_VAR 0 2
64533: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64534: LD_INT 0
64536: PPUSH
64537: PPUSH
64538: PPUSH
64539: PPUSH
64540: PPUSH
64541: PPUSH
// if not unit or not hexes then
64542: LD_VAR 0 1
64546: NOT
64547: PUSH
64548: LD_VAR 0 2
64552: NOT
64553: OR
64554: IFFALSE 64558
// exit ;
64556: GO 64681
// dist := 9999 ;
64558: LD_ADDR_VAR 0 5
64562: PUSH
64563: LD_INT 9999
64565: ST_TO_ADDR
// for i = 1 to hexes do
64566: LD_ADDR_VAR 0 4
64570: PUSH
64571: DOUBLE
64572: LD_INT 1
64574: DEC
64575: ST_TO_ADDR
64576: LD_VAR 0 2
64580: PUSH
64581: FOR_TO
64582: IFFALSE 64669
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64584: LD_ADDR_VAR 0 6
64588: PUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: LD_VAR 0 2
64598: PUSH
64599: LD_VAR 0 4
64603: ARRAY
64604: PUSH
64605: LD_INT 1
64607: ARRAY
64608: PPUSH
64609: LD_VAR 0 2
64613: PUSH
64614: LD_VAR 0 4
64618: ARRAY
64619: PUSH
64620: LD_INT 2
64622: ARRAY
64623: PPUSH
64624: CALL_OW 297
64628: ST_TO_ADDR
// if tdist < dist then
64629: LD_VAR 0 6
64633: PUSH
64634: LD_VAR 0 5
64638: LESS
64639: IFFALSE 64667
// begin hex := hexes [ i ] ;
64641: LD_ADDR_VAR 0 8
64645: PUSH
64646: LD_VAR 0 2
64650: PUSH
64651: LD_VAR 0 4
64655: ARRAY
64656: ST_TO_ADDR
// dist := tdist ;
64657: LD_ADDR_VAR 0 5
64661: PUSH
64662: LD_VAR 0 6
64666: ST_TO_ADDR
// end ; end ;
64667: GO 64581
64669: POP
64670: POP
// result := hex ;
64671: LD_ADDR_VAR 0 3
64675: PUSH
64676: LD_VAR 0 8
64680: ST_TO_ADDR
// end ;
64681: LD_VAR 0 3
64685: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64686: LD_INT 0
64688: PPUSH
64689: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64690: LD_VAR 0 1
64694: NOT
64695: PUSH
64696: LD_VAR 0 1
64700: PUSH
64701: LD_INT 21
64703: PUSH
64704: LD_INT 2
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 23
64713: PUSH
64714: LD_INT 2
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PPUSH
64725: CALL_OW 69
64729: IN
64730: NOT
64731: OR
64732: IFFALSE 64736
// exit ;
64734: GO 64783
// for i = 1 to 3 do
64736: LD_ADDR_VAR 0 3
64740: PUSH
64741: DOUBLE
64742: LD_INT 1
64744: DEC
64745: ST_TO_ADDR
64746: LD_INT 3
64748: PUSH
64749: FOR_TO
64750: IFFALSE 64781
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64752: LD_VAR 0 1
64756: PPUSH
64757: CALL_OW 250
64761: PPUSH
64762: LD_VAR 0 1
64766: PPUSH
64767: CALL_OW 251
64771: PPUSH
64772: LD_INT 1
64774: PPUSH
64775: CALL_OW 453
64779: GO 64749
64781: POP
64782: POP
// end ;
64783: LD_VAR 0 2
64787: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64788: LD_INT 0
64790: PPUSH
64791: PPUSH
64792: PPUSH
64793: PPUSH
64794: PPUSH
64795: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64796: LD_VAR 0 1
64800: NOT
64801: PUSH
64802: LD_VAR 0 2
64806: NOT
64807: OR
64808: PUSH
64809: LD_VAR 0 1
64813: PPUSH
64814: CALL_OW 314
64818: OR
64819: IFFALSE 64823
// exit ;
64821: GO 65290
// if GetLives ( i ) < 250 then
64823: LD_VAR 0 4
64827: PPUSH
64828: CALL_OW 256
64832: PUSH
64833: LD_INT 250
64835: LESS
64836: IFFALSE 64849
// begin ComAutodestruct ( i ) ;
64838: LD_VAR 0 4
64842: PPUSH
64843: CALL 64686 0 1
// exit ;
64847: GO 65290
// end ; x := GetX ( enemy_unit ) ;
64849: LD_ADDR_VAR 0 7
64853: PUSH
64854: LD_VAR 0 2
64858: PPUSH
64859: CALL_OW 250
64863: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64864: LD_ADDR_VAR 0 8
64868: PUSH
64869: LD_VAR 0 2
64873: PPUSH
64874: CALL_OW 251
64878: ST_TO_ADDR
// if not x or not y then
64879: LD_VAR 0 7
64883: NOT
64884: PUSH
64885: LD_VAR 0 8
64889: NOT
64890: OR
64891: IFFALSE 64895
// exit ;
64893: GO 65290
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64895: LD_ADDR_VAR 0 6
64899: PUSH
64900: LD_VAR 0 7
64904: PPUSH
64905: LD_INT 0
64907: PPUSH
64908: LD_INT 4
64910: PPUSH
64911: CALL_OW 272
64915: PUSH
64916: LD_VAR 0 8
64920: PPUSH
64921: LD_INT 0
64923: PPUSH
64924: LD_INT 4
64926: PPUSH
64927: CALL_OW 273
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_VAR 0 7
64940: PPUSH
64941: LD_INT 1
64943: PPUSH
64944: LD_INT 4
64946: PPUSH
64947: CALL_OW 272
64951: PUSH
64952: LD_VAR 0 8
64956: PPUSH
64957: LD_INT 1
64959: PPUSH
64960: LD_INT 4
64962: PPUSH
64963: CALL_OW 273
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_VAR 0 7
64976: PPUSH
64977: LD_INT 2
64979: PPUSH
64980: LD_INT 4
64982: PPUSH
64983: CALL_OW 272
64987: PUSH
64988: LD_VAR 0 8
64992: PPUSH
64993: LD_INT 2
64995: PPUSH
64996: LD_INT 4
64998: PPUSH
64999: CALL_OW 273
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_VAR 0 7
65012: PPUSH
65013: LD_INT 3
65015: PPUSH
65016: LD_INT 4
65018: PPUSH
65019: CALL_OW 272
65023: PUSH
65024: LD_VAR 0 8
65028: PPUSH
65029: LD_INT 3
65031: PPUSH
65032: LD_INT 4
65034: PPUSH
65035: CALL_OW 273
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_VAR 0 7
65048: PPUSH
65049: LD_INT 4
65051: PPUSH
65052: LD_INT 4
65054: PPUSH
65055: CALL_OW 272
65059: PUSH
65060: LD_VAR 0 8
65064: PPUSH
65065: LD_INT 4
65067: PPUSH
65068: LD_INT 4
65070: PPUSH
65071: CALL_OW 273
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_VAR 0 7
65084: PPUSH
65085: LD_INT 5
65087: PPUSH
65088: LD_INT 4
65090: PPUSH
65091: CALL_OW 272
65095: PUSH
65096: LD_VAR 0 8
65100: PPUSH
65101: LD_INT 5
65103: PPUSH
65104: LD_INT 4
65106: PPUSH
65107: CALL_OW 273
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: ST_TO_ADDR
// for i = tmp downto 1 do
65124: LD_ADDR_VAR 0 4
65128: PUSH
65129: DOUBLE
65130: LD_VAR 0 6
65134: INC
65135: ST_TO_ADDR
65136: LD_INT 1
65138: PUSH
65139: FOR_DOWNTO
65140: IFFALSE 65241
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65142: LD_VAR 0 6
65146: PUSH
65147: LD_VAR 0 4
65151: ARRAY
65152: PUSH
65153: LD_INT 1
65155: ARRAY
65156: PPUSH
65157: LD_VAR 0 6
65161: PUSH
65162: LD_VAR 0 4
65166: ARRAY
65167: PUSH
65168: LD_INT 2
65170: ARRAY
65171: PPUSH
65172: CALL_OW 488
65176: NOT
65177: PUSH
65178: LD_VAR 0 6
65182: PUSH
65183: LD_VAR 0 4
65187: ARRAY
65188: PUSH
65189: LD_INT 1
65191: ARRAY
65192: PPUSH
65193: LD_VAR 0 6
65197: PUSH
65198: LD_VAR 0 4
65202: ARRAY
65203: PUSH
65204: LD_INT 2
65206: ARRAY
65207: PPUSH
65208: CALL_OW 428
65212: PUSH
65213: LD_INT 0
65215: NONEQUAL
65216: OR
65217: IFFALSE 65239
// tmp := Delete ( tmp , i ) ;
65219: LD_ADDR_VAR 0 6
65223: PUSH
65224: LD_VAR 0 6
65228: PPUSH
65229: LD_VAR 0 4
65233: PPUSH
65234: CALL_OW 3
65238: ST_TO_ADDR
65239: GO 65139
65241: POP
65242: POP
// j := GetClosestHex ( unit , tmp ) ;
65243: LD_ADDR_VAR 0 5
65247: PUSH
65248: LD_VAR 0 1
65252: PPUSH
65253: LD_VAR 0 6
65257: PPUSH
65258: CALL 64534 0 2
65262: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65263: LD_VAR 0 1
65267: PPUSH
65268: LD_VAR 0 5
65272: PUSH
65273: LD_INT 1
65275: ARRAY
65276: PPUSH
65277: LD_VAR 0 5
65281: PUSH
65282: LD_INT 2
65284: ARRAY
65285: PPUSH
65286: CALL_OW 111
// end ;
65290: LD_VAR 0 3
65294: RET
// export function PrepareApemanSoldier ( ) ; begin
65295: LD_INT 0
65297: PPUSH
// uc_nation := 0 ;
65298: LD_ADDR_OWVAR 21
65302: PUSH
65303: LD_INT 0
65305: ST_TO_ADDR
// hc_sex := sex_male ;
65306: LD_ADDR_OWVAR 27
65310: PUSH
65311: LD_INT 1
65313: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65314: LD_ADDR_OWVAR 28
65318: PUSH
65319: LD_INT 15
65321: ST_TO_ADDR
// hc_gallery :=  ;
65322: LD_ADDR_OWVAR 33
65326: PUSH
65327: LD_STRING 
65329: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65330: LD_ADDR_OWVAR 31
65334: PUSH
65335: LD_INT 0
65337: PPUSH
65338: LD_INT 3
65340: PPUSH
65341: CALL_OW 12
65345: PUSH
65346: LD_INT 0
65348: PPUSH
65349: LD_INT 3
65351: PPUSH
65352: CALL_OW 12
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: ST_TO_ADDR
// end ;
65369: LD_VAR 0 1
65373: RET
// export function PrepareApemanEngineer ( ) ; begin
65374: LD_INT 0
65376: PPUSH
// uc_nation := 0 ;
65377: LD_ADDR_OWVAR 21
65381: PUSH
65382: LD_INT 0
65384: ST_TO_ADDR
// hc_sex := sex_male ;
65385: LD_ADDR_OWVAR 27
65389: PUSH
65390: LD_INT 1
65392: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65393: LD_ADDR_OWVAR 28
65397: PUSH
65398: LD_INT 16
65400: ST_TO_ADDR
// hc_gallery :=  ;
65401: LD_ADDR_OWVAR 33
65405: PUSH
65406: LD_STRING 
65408: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65409: LD_ADDR_OWVAR 31
65413: PUSH
65414: LD_INT 0
65416: PPUSH
65417: LD_INT 3
65419: PPUSH
65420: CALL_OW 12
65424: PUSH
65425: LD_INT 0
65427: PPUSH
65428: LD_INT 3
65430: PPUSH
65431: CALL_OW 12
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: ST_TO_ADDR
// end ;
65448: LD_VAR 0 1
65452: RET
// export function PrepareApeman ( agressivity ) ; begin
65453: LD_INT 0
65455: PPUSH
// uc_side := 0 ;
65456: LD_ADDR_OWVAR 20
65460: PUSH
65461: LD_INT 0
65463: ST_TO_ADDR
// uc_nation := 0 ;
65464: LD_ADDR_OWVAR 21
65468: PUSH
65469: LD_INT 0
65471: ST_TO_ADDR
// hc_sex := sex_male ;
65472: LD_ADDR_OWVAR 27
65476: PUSH
65477: LD_INT 1
65479: ST_TO_ADDR
// hc_class := class_apeman ;
65480: LD_ADDR_OWVAR 28
65484: PUSH
65485: LD_INT 12
65487: ST_TO_ADDR
// hc_gallery :=  ;
65488: LD_ADDR_OWVAR 33
65492: PUSH
65493: LD_STRING 
65495: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65496: LD_ADDR_OWVAR 35
65500: PUSH
65501: LD_VAR 0 1
65505: NEG
65506: PPUSH
65507: LD_VAR 0 1
65511: PPUSH
65512: CALL_OW 12
65516: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65517: LD_ADDR_OWVAR 31
65521: PUSH
65522: LD_INT 0
65524: PPUSH
65525: LD_INT 3
65527: PPUSH
65528: CALL_OW 12
65532: PUSH
65533: LD_INT 0
65535: PPUSH
65536: LD_INT 3
65538: PPUSH
65539: CALL_OW 12
65543: PUSH
65544: LD_INT 0
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: ST_TO_ADDR
// end ;
65556: LD_VAR 0 2
65560: RET
// export function PrepareTiger ( agressivity ) ; begin
65561: LD_INT 0
65563: PPUSH
// uc_side := 0 ;
65564: LD_ADDR_OWVAR 20
65568: PUSH
65569: LD_INT 0
65571: ST_TO_ADDR
// uc_nation := 0 ;
65572: LD_ADDR_OWVAR 21
65576: PUSH
65577: LD_INT 0
65579: ST_TO_ADDR
// hc_class := class_tiger ;
65580: LD_ADDR_OWVAR 28
65584: PUSH
65585: LD_INT 14
65587: ST_TO_ADDR
// hc_gallery :=  ;
65588: LD_ADDR_OWVAR 33
65592: PUSH
65593: LD_STRING 
65595: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65596: LD_ADDR_OWVAR 35
65600: PUSH
65601: LD_VAR 0 1
65605: NEG
65606: PPUSH
65607: LD_VAR 0 1
65611: PPUSH
65612: CALL_OW 12
65616: ST_TO_ADDR
// end ;
65617: LD_VAR 0 2
65621: RET
// export function PrepareEnchidna ( ) ; begin
65622: LD_INT 0
65624: PPUSH
// uc_side := 0 ;
65625: LD_ADDR_OWVAR 20
65629: PUSH
65630: LD_INT 0
65632: ST_TO_ADDR
// uc_nation := 0 ;
65633: LD_ADDR_OWVAR 21
65637: PUSH
65638: LD_INT 0
65640: ST_TO_ADDR
// hc_class := class_baggie ;
65641: LD_ADDR_OWVAR 28
65645: PUSH
65646: LD_INT 13
65648: ST_TO_ADDR
// hc_gallery :=  ;
65649: LD_ADDR_OWVAR 33
65653: PUSH
65654: LD_STRING 
65656: ST_TO_ADDR
// end ;
65657: LD_VAR 0 1
65661: RET
// export function PrepareFrog ( ) ; begin
65662: LD_INT 0
65664: PPUSH
// uc_side := 0 ;
65665: LD_ADDR_OWVAR 20
65669: PUSH
65670: LD_INT 0
65672: ST_TO_ADDR
// uc_nation := 0 ;
65673: LD_ADDR_OWVAR 21
65677: PUSH
65678: LD_INT 0
65680: ST_TO_ADDR
// hc_class := class_frog ;
65681: LD_ADDR_OWVAR 28
65685: PUSH
65686: LD_INT 19
65688: ST_TO_ADDR
// hc_gallery :=  ;
65689: LD_ADDR_OWVAR 33
65693: PUSH
65694: LD_STRING 
65696: ST_TO_ADDR
// end ;
65697: LD_VAR 0 1
65701: RET
// export function PrepareFish ( ) ; begin
65702: LD_INT 0
65704: PPUSH
// uc_side := 0 ;
65705: LD_ADDR_OWVAR 20
65709: PUSH
65710: LD_INT 0
65712: ST_TO_ADDR
// uc_nation := 0 ;
65713: LD_ADDR_OWVAR 21
65717: PUSH
65718: LD_INT 0
65720: ST_TO_ADDR
// hc_class := class_fish ;
65721: LD_ADDR_OWVAR 28
65725: PUSH
65726: LD_INT 20
65728: ST_TO_ADDR
// hc_gallery :=  ;
65729: LD_ADDR_OWVAR 33
65733: PUSH
65734: LD_STRING 
65736: ST_TO_ADDR
// end ;
65737: LD_VAR 0 1
65741: RET
// export function PrepareBird ( ) ; begin
65742: LD_INT 0
65744: PPUSH
// uc_side := 0 ;
65745: LD_ADDR_OWVAR 20
65749: PUSH
65750: LD_INT 0
65752: ST_TO_ADDR
// uc_nation := 0 ;
65753: LD_ADDR_OWVAR 21
65757: PUSH
65758: LD_INT 0
65760: ST_TO_ADDR
// hc_class := class_phororhacos ;
65761: LD_ADDR_OWVAR 28
65765: PUSH
65766: LD_INT 18
65768: ST_TO_ADDR
// hc_gallery :=  ;
65769: LD_ADDR_OWVAR 33
65773: PUSH
65774: LD_STRING 
65776: ST_TO_ADDR
// end ;
65777: LD_VAR 0 1
65781: RET
// export function PrepareHorse ( ) ; begin
65782: LD_INT 0
65784: PPUSH
// uc_side := 0 ;
65785: LD_ADDR_OWVAR 20
65789: PUSH
65790: LD_INT 0
65792: ST_TO_ADDR
// uc_nation := 0 ;
65793: LD_ADDR_OWVAR 21
65797: PUSH
65798: LD_INT 0
65800: ST_TO_ADDR
// hc_class := class_horse ;
65801: LD_ADDR_OWVAR 28
65805: PUSH
65806: LD_INT 21
65808: ST_TO_ADDR
// hc_gallery :=  ;
65809: LD_ADDR_OWVAR 33
65813: PUSH
65814: LD_STRING 
65816: ST_TO_ADDR
// end ;
65817: LD_VAR 0 1
65821: RET
// export function PrepareMastodont ( ) ; begin
65822: LD_INT 0
65824: PPUSH
// uc_side := 0 ;
65825: LD_ADDR_OWVAR 20
65829: PUSH
65830: LD_INT 0
65832: ST_TO_ADDR
// uc_nation := 0 ;
65833: LD_ADDR_OWVAR 21
65837: PUSH
65838: LD_INT 0
65840: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65841: LD_ADDR_OWVAR 37
65845: PUSH
65846: LD_INT 31
65848: ST_TO_ADDR
// vc_control := control_rider ;
65849: LD_ADDR_OWVAR 38
65853: PUSH
65854: LD_INT 4
65856: ST_TO_ADDR
// end ;
65857: LD_VAR 0 1
65861: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65862: LD_INT 0
65864: PPUSH
65865: PPUSH
65866: PPUSH
// uc_side = 0 ;
65867: LD_ADDR_OWVAR 20
65871: PUSH
65872: LD_INT 0
65874: ST_TO_ADDR
// uc_nation = 0 ;
65875: LD_ADDR_OWVAR 21
65879: PUSH
65880: LD_INT 0
65882: ST_TO_ADDR
// InitHc_All ( ) ;
65883: CALL_OW 584
// InitVc ;
65887: CALL_OW 20
// if mastodonts then
65891: LD_VAR 0 6
65895: IFFALSE 65962
// for i = 1 to mastodonts do
65897: LD_ADDR_VAR 0 11
65901: PUSH
65902: DOUBLE
65903: LD_INT 1
65905: DEC
65906: ST_TO_ADDR
65907: LD_VAR 0 6
65911: PUSH
65912: FOR_TO
65913: IFFALSE 65960
// begin vc_chassis := 31 ;
65915: LD_ADDR_OWVAR 37
65919: PUSH
65920: LD_INT 31
65922: ST_TO_ADDR
// vc_control := control_rider ;
65923: LD_ADDR_OWVAR 38
65927: PUSH
65928: LD_INT 4
65930: ST_TO_ADDR
// animal := CreateVehicle ;
65931: LD_ADDR_VAR 0 12
65935: PUSH
65936: CALL_OW 45
65940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65941: LD_VAR 0 12
65945: PPUSH
65946: LD_VAR 0 8
65950: PPUSH
65951: LD_INT 0
65953: PPUSH
65954: CALL 68090 0 3
// end ;
65958: GO 65912
65960: POP
65961: POP
// if horses then
65962: LD_VAR 0 5
65966: IFFALSE 66033
// for i = 1 to horses do
65968: LD_ADDR_VAR 0 11
65972: PUSH
65973: DOUBLE
65974: LD_INT 1
65976: DEC
65977: ST_TO_ADDR
65978: LD_VAR 0 5
65982: PUSH
65983: FOR_TO
65984: IFFALSE 66031
// begin hc_class := 21 ;
65986: LD_ADDR_OWVAR 28
65990: PUSH
65991: LD_INT 21
65993: ST_TO_ADDR
// hc_gallery :=  ;
65994: LD_ADDR_OWVAR 33
65998: PUSH
65999: LD_STRING 
66001: ST_TO_ADDR
// animal := CreateHuman ;
66002: LD_ADDR_VAR 0 12
66006: PUSH
66007: CALL_OW 44
66011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66012: LD_VAR 0 12
66016: PPUSH
66017: LD_VAR 0 8
66021: PPUSH
66022: LD_INT 0
66024: PPUSH
66025: CALL 68090 0 3
// end ;
66029: GO 65983
66031: POP
66032: POP
// if birds then
66033: LD_VAR 0 1
66037: IFFALSE 66104
// for i = 1 to birds do
66039: LD_ADDR_VAR 0 11
66043: PUSH
66044: DOUBLE
66045: LD_INT 1
66047: DEC
66048: ST_TO_ADDR
66049: LD_VAR 0 1
66053: PUSH
66054: FOR_TO
66055: IFFALSE 66102
// begin hc_class := 18 ;
66057: LD_ADDR_OWVAR 28
66061: PUSH
66062: LD_INT 18
66064: ST_TO_ADDR
// hc_gallery =  ;
66065: LD_ADDR_OWVAR 33
66069: PUSH
66070: LD_STRING 
66072: ST_TO_ADDR
// animal := CreateHuman ;
66073: LD_ADDR_VAR 0 12
66077: PUSH
66078: CALL_OW 44
66082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66083: LD_VAR 0 12
66087: PPUSH
66088: LD_VAR 0 8
66092: PPUSH
66093: LD_INT 0
66095: PPUSH
66096: CALL 68090 0 3
// end ;
66100: GO 66054
66102: POP
66103: POP
// if tigers then
66104: LD_VAR 0 2
66108: IFFALSE 66192
// for i = 1 to tigers do
66110: LD_ADDR_VAR 0 11
66114: PUSH
66115: DOUBLE
66116: LD_INT 1
66118: DEC
66119: ST_TO_ADDR
66120: LD_VAR 0 2
66124: PUSH
66125: FOR_TO
66126: IFFALSE 66190
// begin hc_class = class_tiger ;
66128: LD_ADDR_OWVAR 28
66132: PUSH
66133: LD_INT 14
66135: ST_TO_ADDR
// hc_gallery =  ;
66136: LD_ADDR_OWVAR 33
66140: PUSH
66141: LD_STRING 
66143: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66144: LD_ADDR_OWVAR 35
66148: PUSH
66149: LD_INT 7
66151: NEG
66152: PPUSH
66153: LD_INT 7
66155: PPUSH
66156: CALL_OW 12
66160: ST_TO_ADDR
// animal := CreateHuman ;
66161: LD_ADDR_VAR 0 12
66165: PUSH
66166: CALL_OW 44
66170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66171: LD_VAR 0 12
66175: PPUSH
66176: LD_VAR 0 8
66180: PPUSH
66181: LD_INT 0
66183: PPUSH
66184: CALL 68090 0 3
// end ;
66188: GO 66125
66190: POP
66191: POP
// if apemans then
66192: LD_VAR 0 3
66196: IFFALSE 66319
// for i = 1 to apemans do
66198: LD_ADDR_VAR 0 11
66202: PUSH
66203: DOUBLE
66204: LD_INT 1
66206: DEC
66207: ST_TO_ADDR
66208: LD_VAR 0 3
66212: PUSH
66213: FOR_TO
66214: IFFALSE 66317
// begin hc_class = class_apeman ;
66216: LD_ADDR_OWVAR 28
66220: PUSH
66221: LD_INT 12
66223: ST_TO_ADDR
// hc_gallery =  ;
66224: LD_ADDR_OWVAR 33
66228: PUSH
66229: LD_STRING 
66231: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66232: LD_ADDR_OWVAR 35
66236: PUSH
66237: LD_INT 2
66239: NEG
66240: PPUSH
66241: LD_INT 2
66243: PPUSH
66244: CALL_OW 12
66248: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66249: LD_ADDR_OWVAR 31
66253: PUSH
66254: LD_INT 1
66256: PPUSH
66257: LD_INT 3
66259: PPUSH
66260: CALL_OW 12
66264: PUSH
66265: LD_INT 1
66267: PPUSH
66268: LD_INT 3
66270: PPUSH
66271: CALL_OW 12
66275: PUSH
66276: LD_INT 0
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: ST_TO_ADDR
// animal := CreateHuman ;
66288: LD_ADDR_VAR 0 12
66292: PUSH
66293: CALL_OW 44
66297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66298: LD_VAR 0 12
66302: PPUSH
66303: LD_VAR 0 8
66307: PPUSH
66308: LD_INT 0
66310: PPUSH
66311: CALL 68090 0 3
// end ;
66315: GO 66213
66317: POP
66318: POP
// if enchidnas then
66319: LD_VAR 0 4
66323: IFFALSE 66390
// for i = 1 to enchidnas do
66325: LD_ADDR_VAR 0 11
66329: PUSH
66330: DOUBLE
66331: LD_INT 1
66333: DEC
66334: ST_TO_ADDR
66335: LD_VAR 0 4
66339: PUSH
66340: FOR_TO
66341: IFFALSE 66388
// begin hc_class = 13 ;
66343: LD_ADDR_OWVAR 28
66347: PUSH
66348: LD_INT 13
66350: ST_TO_ADDR
// hc_gallery =  ;
66351: LD_ADDR_OWVAR 33
66355: PUSH
66356: LD_STRING 
66358: ST_TO_ADDR
// animal := CreateHuman ;
66359: LD_ADDR_VAR 0 12
66363: PUSH
66364: CALL_OW 44
66368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66369: LD_VAR 0 12
66373: PPUSH
66374: LD_VAR 0 8
66378: PPUSH
66379: LD_INT 0
66381: PPUSH
66382: CALL 68090 0 3
// end ;
66386: GO 66340
66388: POP
66389: POP
// if fishes then
66390: LD_VAR 0 7
66394: IFFALSE 66461
// for i = 1 to fishes do
66396: LD_ADDR_VAR 0 11
66400: PUSH
66401: DOUBLE
66402: LD_INT 1
66404: DEC
66405: ST_TO_ADDR
66406: LD_VAR 0 7
66410: PUSH
66411: FOR_TO
66412: IFFALSE 66459
// begin hc_class = 20 ;
66414: LD_ADDR_OWVAR 28
66418: PUSH
66419: LD_INT 20
66421: ST_TO_ADDR
// hc_gallery =  ;
66422: LD_ADDR_OWVAR 33
66426: PUSH
66427: LD_STRING 
66429: ST_TO_ADDR
// animal := CreateHuman ;
66430: LD_ADDR_VAR 0 12
66434: PUSH
66435: CALL_OW 44
66439: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66440: LD_VAR 0 12
66444: PPUSH
66445: LD_VAR 0 9
66449: PPUSH
66450: LD_INT 0
66452: PPUSH
66453: CALL 68090 0 3
// end ;
66457: GO 66411
66459: POP
66460: POP
// end ;
66461: LD_VAR 0 10
66465: RET
// export function WantHeal ( sci , unit ) ; begin
66466: LD_INT 0
66468: PPUSH
// if GetTaskList ( sci ) > 0 then
66469: LD_VAR 0 1
66473: PPUSH
66474: CALL_OW 437
66478: PUSH
66479: LD_INT 0
66481: GREATER
66482: IFFALSE 66552
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66484: LD_VAR 0 1
66488: PPUSH
66489: CALL_OW 437
66493: PUSH
66494: LD_INT 1
66496: ARRAY
66497: PUSH
66498: LD_INT 1
66500: ARRAY
66501: PUSH
66502: LD_STRING l
66504: EQUAL
66505: PUSH
66506: LD_VAR 0 1
66510: PPUSH
66511: CALL_OW 437
66515: PUSH
66516: LD_INT 1
66518: ARRAY
66519: PUSH
66520: LD_INT 4
66522: ARRAY
66523: PUSH
66524: LD_VAR 0 2
66528: EQUAL
66529: AND
66530: IFFALSE 66542
// result := true else
66532: LD_ADDR_VAR 0 3
66536: PUSH
66537: LD_INT 1
66539: ST_TO_ADDR
66540: GO 66550
// result := false ;
66542: LD_ADDR_VAR 0 3
66546: PUSH
66547: LD_INT 0
66549: ST_TO_ADDR
// end else
66550: GO 66560
// result := false ;
66552: LD_ADDR_VAR 0 3
66556: PUSH
66557: LD_INT 0
66559: ST_TO_ADDR
// end ;
66560: LD_VAR 0 3
66564: RET
// export function HealTarget ( sci ) ; begin
66565: LD_INT 0
66567: PPUSH
// if not sci then
66568: LD_VAR 0 1
66572: NOT
66573: IFFALSE 66577
// exit ;
66575: GO 66642
// result := 0 ;
66577: LD_ADDR_VAR 0 2
66581: PUSH
66582: LD_INT 0
66584: ST_TO_ADDR
// if GetTaskList ( sci ) then
66585: LD_VAR 0 1
66589: PPUSH
66590: CALL_OW 437
66594: IFFALSE 66642
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66596: LD_VAR 0 1
66600: PPUSH
66601: CALL_OW 437
66605: PUSH
66606: LD_INT 1
66608: ARRAY
66609: PUSH
66610: LD_INT 1
66612: ARRAY
66613: PUSH
66614: LD_STRING l
66616: EQUAL
66617: IFFALSE 66642
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66619: LD_ADDR_VAR 0 2
66623: PUSH
66624: LD_VAR 0 1
66628: PPUSH
66629: CALL_OW 437
66633: PUSH
66634: LD_INT 1
66636: ARRAY
66637: PUSH
66638: LD_INT 4
66640: ARRAY
66641: ST_TO_ADDR
// end ;
66642: LD_VAR 0 2
66646: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66647: LD_INT 0
66649: PPUSH
66650: PPUSH
66651: PPUSH
66652: PPUSH
// if not base_units then
66653: LD_VAR 0 1
66657: NOT
66658: IFFALSE 66662
// exit ;
66660: GO 66749
// result := false ;
66662: LD_ADDR_VAR 0 2
66666: PUSH
66667: LD_INT 0
66669: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66670: LD_ADDR_VAR 0 5
66674: PUSH
66675: LD_VAR 0 1
66679: PPUSH
66680: LD_INT 21
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PPUSH
66690: CALL_OW 72
66694: ST_TO_ADDR
// if not tmp then
66695: LD_VAR 0 5
66699: NOT
66700: IFFALSE 66704
// exit ;
66702: GO 66749
// for i in tmp do
66704: LD_ADDR_VAR 0 3
66708: PUSH
66709: LD_VAR 0 5
66713: PUSH
66714: FOR_IN
66715: IFFALSE 66747
// begin result := EnemyInRange ( i , 22 ) ;
66717: LD_ADDR_VAR 0 2
66721: PUSH
66722: LD_VAR 0 3
66726: PPUSH
66727: LD_INT 22
66729: PPUSH
66730: CALL 64336 0 2
66734: ST_TO_ADDR
// if result then
66735: LD_VAR 0 2
66739: IFFALSE 66745
// exit ;
66741: POP
66742: POP
66743: GO 66749
// end ;
66745: GO 66714
66747: POP
66748: POP
// end ;
66749: LD_VAR 0 2
66753: RET
// export function FilterByTag ( units , tag ) ; begin
66754: LD_INT 0
66756: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66757: LD_ADDR_VAR 0 3
66761: PUSH
66762: LD_VAR 0 1
66766: PPUSH
66767: LD_INT 120
66769: PUSH
66770: LD_VAR 0 2
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PPUSH
66779: CALL_OW 72
66783: ST_TO_ADDR
// end ;
66784: LD_VAR 0 3
66788: RET
// export function IsDriver ( un ) ; begin
66789: LD_INT 0
66791: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66792: LD_ADDR_VAR 0 2
66796: PUSH
66797: LD_VAR 0 1
66801: PUSH
66802: LD_INT 55
66804: PUSH
66805: EMPTY
66806: LIST
66807: PPUSH
66808: CALL_OW 69
66812: IN
66813: ST_TO_ADDR
// end ;
66814: LD_VAR 0 2
66818: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66819: LD_INT 0
66821: PPUSH
66822: PPUSH
// list := [ ] ;
66823: LD_ADDR_VAR 0 5
66827: PUSH
66828: EMPTY
66829: ST_TO_ADDR
// case d of 0 :
66830: LD_VAR 0 3
66834: PUSH
66835: LD_INT 0
66837: DOUBLE
66838: EQUAL
66839: IFTRUE 66843
66841: GO 66976
66843: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66844: LD_ADDR_VAR 0 5
66848: PUSH
66849: LD_VAR 0 1
66853: PUSH
66854: LD_INT 4
66856: MINUS
66857: PUSH
66858: LD_VAR 0 2
66862: PUSH
66863: LD_INT 4
66865: MINUS
66866: PUSH
66867: LD_INT 2
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: LIST
66874: PUSH
66875: LD_VAR 0 1
66879: PUSH
66880: LD_INT 3
66882: MINUS
66883: PUSH
66884: LD_VAR 0 2
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: LIST
66896: PUSH
66897: LD_VAR 0 1
66901: PUSH
66902: LD_INT 4
66904: PLUS
66905: PUSH
66906: LD_VAR 0 2
66910: PUSH
66911: LD_INT 4
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: LIST
66918: PUSH
66919: LD_VAR 0 1
66923: PUSH
66924: LD_INT 3
66926: PLUS
66927: PUSH
66928: LD_VAR 0 2
66932: PUSH
66933: LD_INT 3
66935: PLUS
66936: PUSH
66937: LD_INT 5
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: LIST
66944: PUSH
66945: LD_VAR 0 1
66949: PUSH
66950: LD_VAR 0 2
66954: PUSH
66955: LD_INT 4
66957: PLUS
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: ST_TO_ADDR
// end ; 1 :
66974: GO 67674
66976: LD_INT 1
66978: DOUBLE
66979: EQUAL
66980: IFTRUE 66984
66982: GO 67117
66984: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66985: LD_ADDR_VAR 0 5
66989: PUSH
66990: LD_VAR 0 1
66994: PUSH
66995: LD_VAR 0 2
66999: PUSH
67000: LD_INT 4
67002: MINUS
67003: PUSH
67004: LD_INT 3
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: LIST
67011: PUSH
67012: LD_VAR 0 1
67016: PUSH
67017: LD_INT 3
67019: MINUS
67020: PUSH
67021: LD_VAR 0 2
67025: PUSH
67026: LD_INT 3
67028: MINUS
67029: PUSH
67030: LD_INT 2
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: LIST
67037: PUSH
67038: LD_VAR 0 1
67042: PUSH
67043: LD_INT 4
67045: MINUS
67046: PUSH
67047: LD_VAR 0 2
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: PUSH
67060: LD_VAR 0 1
67064: PUSH
67065: LD_VAR 0 2
67069: PUSH
67070: LD_INT 3
67072: PLUS
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: LIST
67081: PUSH
67082: LD_VAR 0 1
67086: PUSH
67087: LD_INT 4
67089: PLUS
67090: PUSH
67091: LD_VAR 0 2
67095: PUSH
67096: LD_INT 4
67098: PLUS
67099: PUSH
67100: LD_INT 5
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: LIST
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: ST_TO_ADDR
// end ; 2 :
67115: GO 67674
67117: LD_INT 2
67119: DOUBLE
67120: EQUAL
67121: IFTRUE 67125
67123: GO 67254
67125: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67126: LD_ADDR_VAR 0 5
67130: PUSH
67131: LD_VAR 0 1
67135: PUSH
67136: LD_VAR 0 2
67140: PUSH
67141: LD_INT 3
67143: MINUS
67144: PUSH
67145: LD_INT 3
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: LIST
67152: PUSH
67153: LD_VAR 0 1
67157: PUSH
67158: LD_INT 4
67160: PLUS
67161: PUSH
67162: LD_VAR 0 2
67166: PUSH
67167: LD_INT 4
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: LIST
67174: PUSH
67175: LD_VAR 0 1
67179: PUSH
67180: LD_VAR 0 2
67184: PUSH
67185: LD_INT 4
67187: PLUS
67188: PUSH
67189: LD_INT 0
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: LIST
67196: PUSH
67197: LD_VAR 0 1
67201: PUSH
67202: LD_INT 3
67204: MINUS
67205: PUSH
67206: LD_VAR 0 2
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: PUSH
67219: LD_VAR 0 1
67223: PUSH
67224: LD_INT 4
67226: MINUS
67227: PUSH
67228: LD_VAR 0 2
67232: PUSH
67233: LD_INT 4
67235: MINUS
67236: PUSH
67237: LD_INT 2
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: LIST
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: ST_TO_ADDR
// end ; 3 :
67252: GO 67674
67254: LD_INT 3
67256: DOUBLE
67257: EQUAL
67258: IFTRUE 67262
67260: GO 67395
67262: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67263: LD_ADDR_VAR 0 5
67267: PUSH
67268: LD_VAR 0 1
67272: PUSH
67273: LD_INT 3
67275: PLUS
67276: PUSH
67277: LD_VAR 0 2
67281: PUSH
67282: LD_INT 4
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: LIST
67289: PUSH
67290: LD_VAR 0 1
67294: PUSH
67295: LD_INT 4
67297: PLUS
67298: PUSH
67299: LD_VAR 0 2
67303: PUSH
67304: LD_INT 4
67306: PLUS
67307: PUSH
67308: LD_INT 5
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: PUSH
67316: LD_VAR 0 1
67320: PUSH
67321: LD_INT 4
67323: MINUS
67324: PUSH
67325: LD_VAR 0 2
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: PUSH
67338: LD_VAR 0 1
67342: PUSH
67343: LD_VAR 0 2
67347: PUSH
67348: LD_INT 4
67350: MINUS
67351: PUSH
67352: LD_INT 3
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: LIST
67359: PUSH
67360: LD_VAR 0 1
67364: PUSH
67365: LD_INT 3
67367: MINUS
67368: PUSH
67369: LD_VAR 0 2
67373: PUSH
67374: LD_INT 3
67376: MINUS
67377: PUSH
67378: LD_INT 2
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: ST_TO_ADDR
// end ; 4 :
67393: GO 67674
67395: LD_INT 4
67397: DOUBLE
67398: EQUAL
67399: IFTRUE 67403
67401: GO 67536
67403: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67404: LD_ADDR_VAR 0 5
67408: PUSH
67409: LD_VAR 0 1
67413: PUSH
67414: LD_VAR 0 2
67418: PUSH
67419: LD_INT 4
67421: PLUS
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: LIST
67430: PUSH
67431: LD_VAR 0 1
67435: PUSH
67436: LD_INT 3
67438: PLUS
67439: PUSH
67440: LD_VAR 0 2
67444: PUSH
67445: LD_INT 3
67447: PLUS
67448: PUSH
67449: LD_INT 5
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: PUSH
67457: LD_VAR 0 1
67461: PUSH
67462: LD_INT 4
67464: PLUS
67465: PUSH
67466: LD_VAR 0 2
67470: PUSH
67471: LD_INT 4
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: PUSH
67479: LD_VAR 0 1
67483: PUSH
67484: LD_VAR 0 2
67488: PUSH
67489: LD_INT 3
67491: MINUS
67492: PUSH
67493: LD_INT 3
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: PUSH
67501: LD_VAR 0 1
67505: PUSH
67506: LD_INT 4
67508: MINUS
67509: PUSH
67510: LD_VAR 0 2
67514: PUSH
67515: LD_INT 4
67517: MINUS
67518: PUSH
67519: LD_INT 2
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: ST_TO_ADDR
// end ; 5 :
67534: GO 67674
67536: LD_INT 5
67538: DOUBLE
67539: EQUAL
67540: IFTRUE 67544
67542: GO 67673
67544: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67545: LD_ADDR_VAR 0 5
67549: PUSH
67550: LD_VAR 0 1
67554: PUSH
67555: LD_INT 4
67557: MINUS
67558: PUSH
67559: LD_VAR 0 2
67563: PUSH
67564: LD_INT 1
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: LIST
67571: PUSH
67572: LD_VAR 0 1
67576: PUSH
67577: LD_VAR 0 2
67581: PUSH
67582: LD_INT 4
67584: MINUS
67585: PUSH
67586: LD_INT 3
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: PUSH
67594: LD_VAR 0 1
67598: PUSH
67599: LD_INT 4
67601: PLUS
67602: PUSH
67603: LD_VAR 0 2
67607: PUSH
67608: LD_INT 4
67610: PLUS
67611: PUSH
67612: LD_INT 5
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: LIST
67619: PUSH
67620: LD_VAR 0 1
67624: PUSH
67625: LD_INT 3
67627: PLUS
67628: PUSH
67629: LD_VAR 0 2
67633: PUSH
67634: LD_INT 4
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: PUSH
67642: LD_VAR 0 1
67646: PUSH
67647: LD_VAR 0 2
67651: PUSH
67652: LD_INT 3
67654: PLUS
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: LIST
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: ST_TO_ADDR
// end ; end ;
67671: GO 67674
67673: POP
// result := list ;
67674: LD_ADDR_VAR 0 4
67678: PUSH
67679: LD_VAR 0 5
67683: ST_TO_ADDR
// end ;
67684: LD_VAR 0 4
67688: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67689: LD_INT 0
67691: PPUSH
67692: PPUSH
67693: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67694: LD_VAR 0 1
67698: NOT
67699: PUSH
67700: LD_VAR 0 2
67704: PUSH
67705: LD_INT 1
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: LD_INT 3
67713: PUSH
67714: LD_INT 4
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: IN
67723: NOT
67724: OR
67725: IFFALSE 67729
// exit ;
67727: GO 67812
// tmp := [ ] ;
67729: LD_ADDR_VAR 0 5
67733: PUSH
67734: EMPTY
67735: ST_TO_ADDR
// for i in units do
67736: LD_ADDR_VAR 0 4
67740: PUSH
67741: LD_VAR 0 1
67745: PUSH
67746: FOR_IN
67747: IFFALSE 67781
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67749: LD_ADDR_VAR 0 5
67753: PUSH
67754: LD_VAR 0 5
67758: PPUSH
67759: LD_VAR 0 4
67763: PPUSH
67764: LD_VAR 0 2
67768: PPUSH
67769: CALL_OW 259
67773: PPUSH
67774: CALL 69185 0 2
67778: ST_TO_ADDR
67779: GO 67746
67781: POP
67782: POP
// if not tmp then
67783: LD_VAR 0 5
67787: NOT
67788: IFFALSE 67792
// exit ;
67790: GO 67812
// result := SortListByListDesc ( units , tmp ) ;
67792: LD_ADDR_VAR 0 3
67796: PUSH
67797: LD_VAR 0 1
67801: PPUSH
67802: LD_VAR 0 5
67806: PPUSH
67807: CALL_OW 77
67811: ST_TO_ADDR
// end ;
67812: LD_VAR 0 3
67816: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67817: LD_INT 0
67819: PPUSH
67820: PPUSH
67821: PPUSH
// result := false ;
67822: LD_ADDR_VAR 0 3
67826: PUSH
67827: LD_INT 0
67829: ST_TO_ADDR
// if not building then
67830: LD_VAR 0 2
67834: NOT
67835: IFFALSE 67839
// exit ;
67837: GO 67977
// x := GetX ( building ) ;
67839: LD_ADDR_VAR 0 4
67843: PUSH
67844: LD_VAR 0 2
67848: PPUSH
67849: CALL_OW 250
67853: ST_TO_ADDR
// y := GetY ( building ) ;
67854: LD_ADDR_VAR 0 5
67858: PUSH
67859: LD_VAR 0 2
67863: PPUSH
67864: CALL_OW 251
67868: ST_TO_ADDR
// if not x or not y then
67869: LD_VAR 0 4
67873: NOT
67874: PUSH
67875: LD_VAR 0 5
67879: NOT
67880: OR
67881: IFFALSE 67885
// exit ;
67883: GO 67977
// if GetTaskList ( unit ) then
67885: LD_VAR 0 1
67889: PPUSH
67890: CALL_OW 437
67894: IFFALSE 67977
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67896: LD_STRING e
67898: PUSH
67899: LD_VAR 0 1
67903: PPUSH
67904: CALL_OW 437
67908: PUSH
67909: LD_INT 1
67911: ARRAY
67912: PUSH
67913: LD_INT 1
67915: ARRAY
67916: EQUAL
67917: PUSH
67918: LD_VAR 0 4
67922: PUSH
67923: LD_VAR 0 1
67927: PPUSH
67928: CALL_OW 437
67932: PUSH
67933: LD_INT 1
67935: ARRAY
67936: PUSH
67937: LD_INT 2
67939: ARRAY
67940: EQUAL
67941: AND
67942: PUSH
67943: LD_VAR 0 5
67947: PUSH
67948: LD_VAR 0 1
67952: PPUSH
67953: CALL_OW 437
67957: PUSH
67958: LD_INT 1
67960: ARRAY
67961: PUSH
67962: LD_INT 3
67964: ARRAY
67965: EQUAL
67966: AND
67967: IFFALSE 67977
// result := true end ;
67969: LD_ADDR_VAR 0 3
67973: PUSH
67974: LD_INT 1
67976: ST_TO_ADDR
// end ;
67977: LD_VAR 0 3
67981: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67982: LD_INT 0
67984: PPUSH
// result := false ;
67985: LD_ADDR_VAR 0 4
67989: PUSH
67990: LD_INT 0
67992: ST_TO_ADDR
// if GetTaskList ( unit ) then
67993: LD_VAR 0 1
67997: PPUSH
67998: CALL_OW 437
68002: IFFALSE 68085
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68004: LD_STRING M
68006: PUSH
68007: LD_VAR 0 1
68011: PPUSH
68012: CALL_OW 437
68016: PUSH
68017: LD_INT 1
68019: ARRAY
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: EQUAL
68025: PUSH
68026: LD_VAR 0 2
68030: PUSH
68031: LD_VAR 0 1
68035: PPUSH
68036: CALL_OW 437
68040: PUSH
68041: LD_INT 1
68043: ARRAY
68044: PUSH
68045: LD_INT 2
68047: ARRAY
68048: EQUAL
68049: AND
68050: PUSH
68051: LD_VAR 0 3
68055: PUSH
68056: LD_VAR 0 1
68060: PPUSH
68061: CALL_OW 437
68065: PUSH
68066: LD_INT 1
68068: ARRAY
68069: PUSH
68070: LD_INT 3
68072: ARRAY
68073: EQUAL
68074: AND
68075: IFFALSE 68085
// result := true ;
68077: LD_ADDR_VAR 0 4
68081: PUSH
68082: LD_INT 1
68084: ST_TO_ADDR
// end ; end ;
68085: LD_VAR 0 4
68089: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68090: LD_INT 0
68092: PPUSH
68093: PPUSH
68094: PPUSH
68095: PPUSH
// if not unit or not area then
68096: LD_VAR 0 1
68100: NOT
68101: PUSH
68102: LD_VAR 0 2
68106: NOT
68107: OR
68108: IFFALSE 68112
// exit ;
68110: GO 68288
// tmp := AreaToList ( area , i ) ;
68112: LD_ADDR_VAR 0 6
68116: PUSH
68117: LD_VAR 0 2
68121: PPUSH
68122: LD_VAR 0 5
68126: PPUSH
68127: CALL_OW 517
68131: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68132: LD_ADDR_VAR 0 5
68136: PUSH
68137: DOUBLE
68138: LD_INT 1
68140: DEC
68141: ST_TO_ADDR
68142: LD_VAR 0 6
68146: PUSH
68147: LD_INT 1
68149: ARRAY
68150: PUSH
68151: FOR_TO
68152: IFFALSE 68286
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68154: LD_ADDR_VAR 0 7
68158: PUSH
68159: LD_VAR 0 6
68163: PUSH
68164: LD_INT 1
68166: ARRAY
68167: PUSH
68168: LD_VAR 0 5
68172: ARRAY
68173: PUSH
68174: LD_VAR 0 6
68178: PUSH
68179: LD_INT 2
68181: ARRAY
68182: PUSH
68183: LD_VAR 0 5
68187: ARRAY
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68193: LD_INT 92
68195: PUSH
68196: LD_VAR 0 7
68200: PUSH
68201: LD_INT 1
68203: ARRAY
68204: PUSH
68205: LD_VAR 0 7
68209: PUSH
68210: LD_INT 2
68212: ARRAY
68213: PUSH
68214: LD_INT 2
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: PPUSH
68223: CALL_OW 69
68227: PUSH
68228: LD_INT 0
68230: EQUAL
68231: IFFALSE 68284
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68233: LD_VAR 0 1
68237: PPUSH
68238: LD_VAR 0 7
68242: PUSH
68243: LD_INT 1
68245: ARRAY
68246: PPUSH
68247: LD_VAR 0 7
68251: PUSH
68252: LD_INT 2
68254: ARRAY
68255: PPUSH
68256: LD_VAR 0 3
68260: PPUSH
68261: CALL_OW 48
// result := IsPlaced ( unit ) ;
68265: LD_ADDR_VAR 0 4
68269: PUSH
68270: LD_VAR 0 1
68274: PPUSH
68275: CALL_OW 305
68279: ST_TO_ADDR
// exit ;
68280: POP
68281: POP
68282: GO 68288
// end ; end ;
68284: GO 68151
68286: POP
68287: POP
// end ;
68288: LD_VAR 0 4
68292: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68293: LD_INT 0
68295: PPUSH
68296: PPUSH
68297: PPUSH
// if not side or side > 8 then
68298: LD_VAR 0 1
68302: NOT
68303: PUSH
68304: LD_VAR 0 1
68308: PUSH
68309: LD_INT 8
68311: GREATER
68312: OR
68313: IFFALSE 68317
// exit ;
68315: GO 68504
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68317: LD_ADDR_VAR 0 4
68321: PUSH
68322: LD_INT 22
68324: PUSH
68325: LD_VAR 0 1
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 21
68336: PUSH
68337: LD_INT 3
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PPUSH
68348: CALL_OW 69
68352: ST_TO_ADDR
// if not tmp then
68353: LD_VAR 0 4
68357: NOT
68358: IFFALSE 68362
// exit ;
68360: GO 68504
// enable_addtolog := true ;
68362: LD_ADDR_OWVAR 81
68366: PUSH
68367: LD_INT 1
68369: ST_TO_ADDR
// AddToLog ( [ ) ;
68370: LD_STRING [
68372: PPUSH
68373: CALL_OW 561
// for i in tmp do
68377: LD_ADDR_VAR 0 3
68381: PUSH
68382: LD_VAR 0 4
68386: PUSH
68387: FOR_IN
68388: IFFALSE 68495
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68390: LD_STRING [
68392: PUSH
68393: LD_VAR 0 3
68397: PPUSH
68398: CALL_OW 266
68402: STR
68403: PUSH
68404: LD_STRING , 
68406: STR
68407: PUSH
68408: LD_VAR 0 3
68412: PPUSH
68413: CALL_OW 250
68417: STR
68418: PUSH
68419: LD_STRING , 
68421: STR
68422: PUSH
68423: LD_VAR 0 3
68427: PPUSH
68428: CALL_OW 251
68432: STR
68433: PUSH
68434: LD_STRING , 
68436: STR
68437: PUSH
68438: LD_VAR 0 3
68442: PPUSH
68443: CALL_OW 254
68447: STR
68448: PUSH
68449: LD_STRING , 
68451: STR
68452: PUSH
68453: LD_VAR 0 3
68457: PPUSH
68458: LD_INT 1
68460: PPUSH
68461: CALL_OW 268
68465: STR
68466: PUSH
68467: LD_STRING , 
68469: STR
68470: PUSH
68471: LD_VAR 0 3
68475: PPUSH
68476: LD_INT 2
68478: PPUSH
68479: CALL_OW 268
68483: STR
68484: PUSH
68485: LD_STRING ],
68487: STR
68488: PPUSH
68489: CALL_OW 561
// end ;
68493: GO 68387
68495: POP
68496: POP
// AddToLog ( ]; ) ;
68497: LD_STRING ];
68499: PPUSH
68500: CALL_OW 561
// end ;
68504: LD_VAR 0 2
68508: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68509: LD_INT 0
68511: PPUSH
68512: PPUSH
68513: PPUSH
68514: PPUSH
68515: PPUSH
// if not area or not rate or not max then
68516: LD_VAR 0 1
68520: NOT
68521: PUSH
68522: LD_VAR 0 2
68526: NOT
68527: OR
68528: PUSH
68529: LD_VAR 0 4
68533: NOT
68534: OR
68535: IFFALSE 68539
// exit ;
68537: GO 68728
// while 1 do
68539: LD_INT 1
68541: IFFALSE 68728
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68543: LD_ADDR_VAR 0 9
68547: PUSH
68548: LD_VAR 0 1
68552: PPUSH
68553: LD_INT 1
68555: PPUSH
68556: CALL_OW 287
68560: PUSH
68561: LD_INT 10
68563: MUL
68564: ST_TO_ADDR
// r := rate / 10 ;
68565: LD_ADDR_VAR 0 7
68569: PUSH
68570: LD_VAR 0 2
68574: PUSH
68575: LD_INT 10
68577: DIVREAL
68578: ST_TO_ADDR
// time := 1 1$00 ;
68579: LD_ADDR_VAR 0 8
68583: PUSH
68584: LD_INT 2100
68586: ST_TO_ADDR
// if amount < min then
68587: LD_VAR 0 9
68591: PUSH
68592: LD_VAR 0 3
68596: LESS
68597: IFFALSE 68615
// r := r * 2 else
68599: LD_ADDR_VAR 0 7
68603: PUSH
68604: LD_VAR 0 7
68608: PUSH
68609: LD_INT 2
68611: MUL
68612: ST_TO_ADDR
68613: GO 68641
// if amount > max then
68615: LD_VAR 0 9
68619: PUSH
68620: LD_VAR 0 4
68624: GREATER
68625: IFFALSE 68641
// r := r / 2 ;
68627: LD_ADDR_VAR 0 7
68631: PUSH
68632: LD_VAR 0 7
68636: PUSH
68637: LD_INT 2
68639: DIVREAL
68640: ST_TO_ADDR
// time := time / r ;
68641: LD_ADDR_VAR 0 8
68645: PUSH
68646: LD_VAR 0 8
68650: PUSH
68651: LD_VAR 0 7
68655: DIVREAL
68656: ST_TO_ADDR
// if time < 0 then
68657: LD_VAR 0 8
68661: PUSH
68662: LD_INT 0
68664: LESS
68665: IFFALSE 68682
// time := time * - 1 ;
68667: LD_ADDR_VAR 0 8
68671: PUSH
68672: LD_VAR 0 8
68676: PUSH
68677: LD_INT 1
68679: NEG
68680: MUL
68681: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68682: LD_VAR 0 8
68686: PUSH
68687: LD_INT 35
68689: PPUSH
68690: LD_INT 875
68692: PPUSH
68693: CALL_OW 12
68697: PLUS
68698: PPUSH
68699: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68703: LD_INT 1
68705: PPUSH
68706: LD_INT 5
68708: PPUSH
68709: CALL_OW 12
68713: PPUSH
68714: LD_VAR 0 1
68718: PPUSH
68719: LD_INT 1
68721: PPUSH
68722: CALL_OW 55
// end ;
68726: GO 68539
// end ;
68728: LD_VAR 0 5
68732: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68733: LD_INT 0
68735: PPUSH
68736: PPUSH
68737: PPUSH
68738: PPUSH
68739: PPUSH
68740: PPUSH
68741: PPUSH
68742: PPUSH
// if not turrets or not factories then
68743: LD_VAR 0 1
68747: NOT
68748: PUSH
68749: LD_VAR 0 2
68753: NOT
68754: OR
68755: IFFALSE 68759
// exit ;
68757: GO 69066
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68759: LD_ADDR_VAR 0 10
68763: PUSH
68764: LD_INT 5
68766: PUSH
68767: LD_INT 6
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: LD_INT 4
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 3
68786: PUSH
68787: LD_INT 5
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 24
68801: PUSH
68802: LD_INT 25
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 23
68811: PUSH
68812: LD_INT 27
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 42
68825: PUSH
68826: LD_INT 43
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 44
68835: PUSH
68836: LD_INT 46
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 45
68845: PUSH
68846: LD_INT 47
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: LIST
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: ST_TO_ADDR
// result := [ ] ;
68863: LD_ADDR_VAR 0 3
68867: PUSH
68868: EMPTY
68869: ST_TO_ADDR
// for i in turrets do
68870: LD_ADDR_VAR 0 4
68874: PUSH
68875: LD_VAR 0 1
68879: PUSH
68880: FOR_IN
68881: IFFALSE 69064
// begin nat := GetNation ( i ) ;
68883: LD_ADDR_VAR 0 7
68887: PUSH
68888: LD_VAR 0 4
68892: PPUSH
68893: CALL_OW 248
68897: ST_TO_ADDR
// weapon := 0 ;
68898: LD_ADDR_VAR 0 8
68902: PUSH
68903: LD_INT 0
68905: ST_TO_ADDR
// if not nat then
68906: LD_VAR 0 7
68910: NOT
68911: IFFALSE 68915
// continue ;
68913: GO 68880
// for j in list [ nat ] do
68915: LD_ADDR_VAR 0 5
68919: PUSH
68920: LD_VAR 0 10
68924: PUSH
68925: LD_VAR 0 7
68929: ARRAY
68930: PUSH
68931: FOR_IN
68932: IFFALSE 68973
// if GetBWeapon ( i ) = j [ 1 ] then
68934: LD_VAR 0 4
68938: PPUSH
68939: CALL_OW 269
68943: PUSH
68944: LD_VAR 0 5
68948: PUSH
68949: LD_INT 1
68951: ARRAY
68952: EQUAL
68953: IFFALSE 68971
// begin weapon := j [ 2 ] ;
68955: LD_ADDR_VAR 0 8
68959: PUSH
68960: LD_VAR 0 5
68964: PUSH
68965: LD_INT 2
68967: ARRAY
68968: ST_TO_ADDR
// break ;
68969: GO 68973
// end ;
68971: GO 68931
68973: POP
68974: POP
// if not weapon then
68975: LD_VAR 0 8
68979: NOT
68980: IFFALSE 68984
// continue ;
68982: GO 68880
// for k in factories do
68984: LD_ADDR_VAR 0 6
68988: PUSH
68989: LD_VAR 0 2
68993: PUSH
68994: FOR_IN
68995: IFFALSE 69060
// begin weapons := AvailableWeaponList ( k ) ;
68997: LD_ADDR_VAR 0 9
69001: PUSH
69002: LD_VAR 0 6
69006: PPUSH
69007: CALL_OW 478
69011: ST_TO_ADDR
// if not weapons then
69012: LD_VAR 0 9
69016: NOT
69017: IFFALSE 69021
// continue ;
69019: GO 68994
// if weapon in weapons then
69021: LD_VAR 0 8
69025: PUSH
69026: LD_VAR 0 9
69030: IN
69031: IFFALSE 69058
// begin result := [ i , weapon ] ;
69033: LD_ADDR_VAR 0 3
69037: PUSH
69038: LD_VAR 0 4
69042: PUSH
69043: LD_VAR 0 8
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: ST_TO_ADDR
// exit ;
69052: POP
69053: POP
69054: POP
69055: POP
69056: GO 69066
// end ; end ;
69058: GO 68994
69060: POP
69061: POP
// end ;
69062: GO 68880
69064: POP
69065: POP
// end ;
69066: LD_VAR 0 3
69070: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69071: LD_INT 0
69073: PPUSH
// if not side or side > 8 then
69074: LD_VAR 0 3
69078: NOT
69079: PUSH
69080: LD_VAR 0 3
69084: PUSH
69085: LD_INT 8
69087: GREATER
69088: OR
69089: IFFALSE 69093
// exit ;
69091: GO 69152
// if not range then
69093: LD_VAR 0 4
69097: NOT
69098: IFFALSE 69109
// range := - 12 ;
69100: LD_ADDR_VAR 0 4
69104: PUSH
69105: LD_INT 12
69107: NEG
69108: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69109: LD_VAR 0 1
69113: PPUSH
69114: LD_VAR 0 2
69118: PPUSH
69119: LD_VAR 0 3
69123: PPUSH
69124: LD_VAR 0 4
69128: PPUSH
69129: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69133: LD_VAR 0 1
69137: PPUSH
69138: LD_VAR 0 2
69142: PPUSH
69143: LD_VAR 0 3
69147: PPUSH
69148: CALL_OW 331
// end ;
69152: LD_VAR 0 5
69156: RET
// export function Video ( mode ) ; begin
69157: LD_INT 0
69159: PPUSH
// ingame_video = mode ;
69160: LD_ADDR_OWVAR 52
69164: PUSH
69165: LD_VAR 0 1
69169: ST_TO_ADDR
// interface_hidden = mode ;
69170: LD_ADDR_OWVAR 54
69174: PUSH
69175: LD_VAR 0 1
69179: ST_TO_ADDR
// end ;
69180: LD_VAR 0 2
69184: RET
// export function Join ( array , element ) ; begin
69185: LD_INT 0
69187: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69188: LD_ADDR_VAR 0 3
69192: PUSH
69193: LD_VAR 0 1
69197: PPUSH
69198: LD_VAR 0 1
69202: PUSH
69203: LD_INT 1
69205: PLUS
69206: PPUSH
69207: LD_VAR 0 2
69211: PPUSH
69212: CALL_OW 1
69216: ST_TO_ADDR
// end ;
69217: LD_VAR 0 3
69221: RET
// export function JoinUnion ( array , element ) ; begin
69222: LD_INT 0
69224: PPUSH
// result := array union element ;
69225: LD_ADDR_VAR 0 3
69229: PUSH
69230: LD_VAR 0 1
69234: PUSH
69235: LD_VAR 0 2
69239: UNION
69240: ST_TO_ADDR
// end ;
69241: LD_VAR 0 3
69245: RET
// export function GetBehemoths ( side ) ; begin
69246: LD_INT 0
69248: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69249: LD_ADDR_VAR 0 2
69253: PUSH
69254: LD_INT 22
69256: PUSH
69257: LD_VAR 0 1
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 31
69268: PUSH
69269: LD_INT 25
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PPUSH
69280: CALL_OW 69
69284: ST_TO_ADDR
// end ;
69285: LD_VAR 0 2
69289: RET
// export function Shuffle ( array ) ; var i , index ; begin
69290: LD_INT 0
69292: PPUSH
69293: PPUSH
69294: PPUSH
// result := [ ] ;
69295: LD_ADDR_VAR 0 2
69299: PUSH
69300: EMPTY
69301: ST_TO_ADDR
// if not array then
69302: LD_VAR 0 1
69306: NOT
69307: IFFALSE 69311
// exit ;
69309: GO 69410
// Randomize ;
69311: CALL_OW 10
// for i = array downto 1 do
69315: LD_ADDR_VAR 0 3
69319: PUSH
69320: DOUBLE
69321: LD_VAR 0 1
69325: INC
69326: ST_TO_ADDR
69327: LD_INT 1
69329: PUSH
69330: FOR_DOWNTO
69331: IFFALSE 69408
// begin index := rand ( 1 , array ) ;
69333: LD_ADDR_VAR 0 4
69337: PUSH
69338: LD_INT 1
69340: PPUSH
69341: LD_VAR 0 1
69345: PPUSH
69346: CALL_OW 12
69350: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69351: LD_ADDR_VAR 0 2
69355: PUSH
69356: LD_VAR 0 2
69360: PPUSH
69361: LD_VAR 0 2
69365: PUSH
69366: LD_INT 1
69368: PLUS
69369: PPUSH
69370: LD_VAR 0 1
69374: PUSH
69375: LD_VAR 0 4
69379: ARRAY
69380: PPUSH
69381: CALL_OW 2
69385: ST_TO_ADDR
// array := Delete ( array , index ) ;
69386: LD_ADDR_VAR 0 1
69390: PUSH
69391: LD_VAR 0 1
69395: PPUSH
69396: LD_VAR 0 4
69400: PPUSH
69401: CALL_OW 3
69405: ST_TO_ADDR
// end ;
69406: GO 69330
69408: POP
69409: POP
// end ;
69410: LD_VAR 0 2
69414: RET
// export function GetBaseMaterials ( base ) ; begin
69415: LD_INT 0
69417: PPUSH
// result := [ 0 , 0 , 0 ] ;
69418: LD_ADDR_VAR 0 2
69422: PUSH
69423: LD_INT 0
69425: PUSH
69426: LD_INT 0
69428: PUSH
69429: LD_INT 0
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: LIST
69436: ST_TO_ADDR
// if not base then
69437: LD_VAR 0 1
69441: NOT
69442: IFFALSE 69446
// exit ;
69444: GO 69495
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69446: LD_ADDR_VAR 0 2
69450: PUSH
69451: LD_VAR 0 1
69455: PPUSH
69456: LD_INT 1
69458: PPUSH
69459: CALL_OW 275
69463: PUSH
69464: LD_VAR 0 1
69468: PPUSH
69469: LD_INT 2
69471: PPUSH
69472: CALL_OW 275
69476: PUSH
69477: LD_VAR 0 1
69481: PPUSH
69482: LD_INT 3
69484: PPUSH
69485: CALL_OW 275
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: LIST
69494: ST_TO_ADDR
// end ;
69495: LD_VAR 0 2
69499: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69500: LD_INT 0
69502: PPUSH
69503: PPUSH
// result := array ;
69504: LD_ADDR_VAR 0 3
69508: PUSH
69509: LD_VAR 0 1
69513: ST_TO_ADDR
// if size >= result then
69514: LD_VAR 0 2
69518: PUSH
69519: LD_VAR 0 3
69523: GREATEREQUAL
69524: IFFALSE 69528
// exit ;
69526: GO 69578
// if size then
69528: LD_VAR 0 2
69532: IFFALSE 69578
// for i := array downto size do
69534: LD_ADDR_VAR 0 4
69538: PUSH
69539: DOUBLE
69540: LD_VAR 0 1
69544: INC
69545: ST_TO_ADDR
69546: LD_VAR 0 2
69550: PUSH
69551: FOR_DOWNTO
69552: IFFALSE 69576
// result := Delete ( result , result ) ;
69554: LD_ADDR_VAR 0 3
69558: PUSH
69559: LD_VAR 0 3
69563: PPUSH
69564: LD_VAR 0 3
69568: PPUSH
69569: CALL_OW 3
69573: ST_TO_ADDR
69574: GO 69551
69576: POP
69577: POP
// end ;
69578: LD_VAR 0 3
69582: RET
// export function ComExit ( unit ) ; var tmp ; begin
69583: LD_INT 0
69585: PPUSH
69586: PPUSH
// if not IsInUnit ( unit ) then
69587: LD_VAR 0 1
69591: PPUSH
69592: CALL_OW 310
69596: NOT
69597: IFFALSE 69601
// exit ;
69599: GO 69661
// tmp := IsInUnit ( unit ) ;
69601: LD_ADDR_VAR 0 3
69605: PUSH
69606: LD_VAR 0 1
69610: PPUSH
69611: CALL_OW 310
69615: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69616: LD_VAR 0 3
69620: PPUSH
69621: CALL_OW 247
69625: PUSH
69626: LD_INT 2
69628: EQUAL
69629: IFFALSE 69642
// ComExitVehicle ( unit ) else
69631: LD_VAR 0 1
69635: PPUSH
69636: CALL_OW 121
69640: GO 69651
// ComExitBuilding ( unit ) ;
69642: LD_VAR 0 1
69646: PPUSH
69647: CALL_OW 122
// result := tmp ;
69651: LD_ADDR_VAR 0 2
69655: PUSH
69656: LD_VAR 0 3
69660: ST_TO_ADDR
// end ;
69661: LD_VAR 0 2
69665: RET
// export function ComExitAll ( units ) ; var i ; begin
69666: LD_INT 0
69668: PPUSH
69669: PPUSH
// if not units then
69670: LD_VAR 0 1
69674: NOT
69675: IFFALSE 69679
// exit ;
69677: GO 69705
// for i in units do
69679: LD_ADDR_VAR 0 3
69683: PUSH
69684: LD_VAR 0 1
69688: PUSH
69689: FOR_IN
69690: IFFALSE 69703
// ComExit ( i ) ;
69692: LD_VAR 0 3
69696: PPUSH
69697: CALL 69583 0 1
69701: GO 69689
69703: POP
69704: POP
// end ;
69705: LD_VAR 0 2
69709: RET
// export function ResetHc ; begin
69710: LD_INT 0
69712: PPUSH
// InitHc ;
69713: CALL_OW 19
// hc_importance := 0 ;
69717: LD_ADDR_OWVAR 32
69721: PUSH
69722: LD_INT 0
69724: ST_TO_ADDR
// end ;
69725: LD_VAR 0 1
69729: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69730: LD_INT 0
69732: PPUSH
69733: PPUSH
69734: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69735: LD_ADDR_VAR 0 6
69739: PUSH
69740: LD_VAR 0 1
69744: PUSH
69745: LD_VAR 0 3
69749: PLUS
69750: PUSH
69751: LD_INT 2
69753: DIV
69754: ST_TO_ADDR
// if _x < 0 then
69755: LD_VAR 0 6
69759: PUSH
69760: LD_INT 0
69762: LESS
69763: IFFALSE 69780
// _x := _x * - 1 ;
69765: LD_ADDR_VAR 0 6
69769: PUSH
69770: LD_VAR 0 6
69774: PUSH
69775: LD_INT 1
69777: NEG
69778: MUL
69779: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69780: LD_ADDR_VAR 0 7
69784: PUSH
69785: LD_VAR 0 2
69789: PUSH
69790: LD_VAR 0 4
69794: PLUS
69795: PUSH
69796: LD_INT 2
69798: DIV
69799: ST_TO_ADDR
// if _y < 0 then
69800: LD_VAR 0 7
69804: PUSH
69805: LD_INT 0
69807: LESS
69808: IFFALSE 69825
// _y := _y * - 1 ;
69810: LD_ADDR_VAR 0 7
69814: PUSH
69815: LD_VAR 0 7
69819: PUSH
69820: LD_INT 1
69822: NEG
69823: MUL
69824: ST_TO_ADDR
// result := [ _x , _y ] ;
69825: LD_ADDR_VAR 0 5
69829: PUSH
69830: LD_VAR 0 6
69834: PUSH
69835: LD_VAR 0 7
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: ST_TO_ADDR
// end ;
69844: LD_VAR 0 5
69848: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69849: LD_INT 0
69851: PPUSH
69852: PPUSH
69853: PPUSH
69854: PPUSH
// task := GetTaskList ( unit ) ;
69855: LD_ADDR_VAR 0 7
69859: PUSH
69860: LD_VAR 0 1
69864: PPUSH
69865: CALL_OW 437
69869: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69870: LD_VAR 0 7
69874: NOT
69875: PUSH
69876: LD_VAR 0 1
69880: PPUSH
69881: LD_VAR 0 2
69885: PPUSH
69886: CALL_OW 308
69890: NOT
69891: AND
69892: IFFALSE 69896
// exit ;
69894: GO 70014
// if IsInArea ( unit , area ) then
69896: LD_VAR 0 1
69900: PPUSH
69901: LD_VAR 0 2
69905: PPUSH
69906: CALL_OW 308
69910: IFFALSE 69928
// begin ComMoveToArea ( unit , goAway ) ;
69912: LD_VAR 0 1
69916: PPUSH
69917: LD_VAR 0 3
69921: PPUSH
69922: CALL_OW 113
// exit ;
69926: GO 70014
// end ; if task [ 1 ] [ 1 ] <> M then
69928: LD_VAR 0 7
69932: PUSH
69933: LD_INT 1
69935: ARRAY
69936: PUSH
69937: LD_INT 1
69939: ARRAY
69940: PUSH
69941: LD_STRING M
69943: NONEQUAL
69944: IFFALSE 69948
// exit ;
69946: GO 70014
// x := task [ 1 ] [ 2 ] ;
69948: LD_ADDR_VAR 0 5
69952: PUSH
69953: LD_VAR 0 7
69957: PUSH
69958: LD_INT 1
69960: ARRAY
69961: PUSH
69962: LD_INT 2
69964: ARRAY
69965: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69966: LD_ADDR_VAR 0 6
69970: PUSH
69971: LD_VAR 0 7
69975: PUSH
69976: LD_INT 1
69978: ARRAY
69979: PUSH
69980: LD_INT 3
69982: ARRAY
69983: ST_TO_ADDR
// if InArea ( x , y , area ) then
69984: LD_VAR 0 5
69988: PPUSH
69989: LD_VAR 0 6
69993: PPUSH
69994: LD_VAR 0 2
69998: PPUSH
69999: CALL_OW 309
70003: IFFALSE 70014
// ComStop ( unit ) ;
70005: LD_VAR 0 1
70009: PPUSH
70010: CALL_OW 141
// end ;
70014: LD_VAR 0 4
70018: RET
// export function Abs ( value ) ; begin
70019: LD_INT 0
70021: PPUSH
// result := value ;
70022: LD_ADDR_VAR 0 2
70026: PUSH
70027: LD_VAR 0 1
70031: ST_TO_ADDR
// if value < 0 then
70032: LD_VAR 0 1
70036: PUSH
70037: LD_INT 0
70039: LESS
70040: IFFALSE 70057
// result := value * - 1 ;
70042: LD_ADDR_VAR 0 2
70046: PUSH
70047: LD_VAR 0 1
70051: PUSH
70052: LD_INT 1
70054: NEG
70055: MUL
70056: ST_TO_ADDR
// end ;
70057: LD_VAR 0 2
70061: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70062: LD_INT 0
70064: PPUSH
70065: PPUSH
70066: PPUSH
70067: PPUSH
70068: PPUSH
70069: PPUSH
70070: PPUSH
70071: PPUSH
// if not unit or not building then
70072: LD_VAR 0 1
70076: NOT
70077: PUSH
70078: LD_VAR 0 2
70082: NOT
70083: OR
70084: IFFALSE 70088
// exit ;
70086: GO 70314
// x := GetX ( building ) ;
70088: LD_ADDR_VAR 0 4
70092: PUSH
70093: LD_VAR 0 2
70097: PPUSH
70098: CALL_OW 250
70102: ST_TO_ADDR
// y := GetY ( building ) ;
70103: LD_ADDR_VAR 0 6
70107: PUSH
70108: LD_VAR 0 2
70112: PPUSH
70113: CALL_OW 251
70117: ST_TO_ADDR
// d := GetDir ( building ) ;
70118: LD_ADDR_VAR 0 8
70122: PUSH
70123: LD_VAR 0 2
70127: PPUSH
70128: CALL_OW 254
70132: ST_TO_ADDR
// r := 4 ;
70133: LD_ADDR_VAR 0 9
70137: PUSH
70138: LD_INT 4
70140: ST_TO_ADDR
// for i := 1 to 5 do
70141: LD_ADDR_VAR 0 10
70145: PUSH
70146: DOUBLE
70147: LD_INT 1
70149: DEC
70150: ST_TO_ADDR
70151: LD_INT 5
70153: PUSH
70154: FOR_TO
70155: IFFALSE 70312
// begin _x := ShiftX ( x , d , r + i ) ;
70157: LD_ADDR_VAR 0 5
70161: PUSH
70162: LD_VAR 0 4
70166: PPUSH
70167: LD_VAR 0 8
70171: PPUSH
70172: LD_VAR 0 9
70176: PUSH
70177: LD_VAR 0 10
70181: PLUS
70182: PPUSH
70183: CALL_OW 272
70187: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70188: LD_ADDR_VAR 0 7
70192: PUSH
70193: LD_VAR 0 6
70197: PPUSH
70198: LD_VAR 0 8
70202: PPUSH
70203: LD_VAR 0 9
70207: PUSH
70208: LD_VAR 0 10
70212: PLUS
70213: PPUSH
70214: CALL_OW 273
70218: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70219: LD_VAR 0 5
70223: PPUSH
70224: LD_VAR 0 7
70228: PPUSH
70229: CALL_OW 488
70233: PUSH
70234: LD_VAR 0 5
70238: PPUSH
70239: LD_VAR 0 7
70243: PPUSH
70244: CALL_OW 428
70248: PPUSH
70249: CALL_OW 247
70253: PUSH
70254: LD_INT 3
70256: PUSH
70257: LD_INT 2
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: IN
70264: NOT
70265: AND
70266: IFFALSE 70310
// begin ComMoveXY ( unit , _x , _y ) ;
70268: LD_VAR 0 1
70272: PPUSH
70273: LD_VAR 0 5
70277: PPUSH
70278: LD_VAR 0 7
70282: PPUSH
70283: CALL_OW 111
// result := [ _x , _y ] ;
70287: LD_ADDR_VAR 0 3
70291: PUSH
70292: LD_VAR 0 5
70296: PUSH
70297: LD_VAR 0 7
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: ST_TO_ADDR
// exit ;
70306: POP
70307: POP
70308: GO 70314
// end ; end ;
70310: GO 70154
70312: POP
70313: POP
// end ;
70314: LD_VAR 0 3
70318: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70319: LD_INT 0
70321: PPUSH
70322: PPUSH
70323: PPUSH
// result := 0 ;
70324: LD_ADDR_VAR 0 3
70328: PUSH
70329: LD_INT 0
70331: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70332: LD_VAR 0 1
70336: PUSH
70337: LD_INT 0
70339: LESS
70340: PUSH
70341: LD_VAR 0 1
70345: PUSH
70346: LD_INT 8
70348: GREATER
70349: OR
70350: PUSH
70351: LD_VAR 0 2
70355: PUSH
70356: LD_INT 0
70358: LESS
70359: OR
70360: PUSH
70361: LD_VAR 0 2
70365: PUSH
70366: LD_INT 8
70368: GREATER
70369: OR
70370: IFFALSE 70374
// exit ;
70372: GO 70449
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70374: LD_ADDR_VAR 0 4
70378: PUSH
70379: LD_INT 22
70381: PUSH
70382: LD_VAR 0 2
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PPUSH
70391: CALL_OW 69
70395: PUSH
70396: FOR_IN
70397: IFFALSE 70447
// begin un := UnitShoot ( i ) ;
70399: LD_ADDR_VAR 0 5
70403: PUSH
70404: LD_VAR 0 4
70408: PPUSH
70409: CALL_OW 504
70413: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70414: LD_VAR 0 5
70418: PPUSH
70419: CALL_OW 255
70423: PUSH
70424: LD_VAR 0 1
70428: EQUAL
70429: IFFALSE 70445
// begin result := un ;
70431: LD_ADDR_VAR 0 3
70435: PUSH
70436: LD_VAR 0 5
70440: ST_TO_ADDR
// exit ;
70441: POP
70442: POP
70443: GO 70449
// end ; end ;
70445: GO 70396
70447: POP
70448: POP
// end ;
70449: LD_VAR 0 3
70453: RET
// export function GetCargoBay ( units ) ; begin
70454: LD_INT 0
70456: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70457: LD_ADDR_VAR 0 2
70461: PUSH
70462: LD_VAR 0 1
70466: PPUSH
70467: LD_INT 2
70469: PUSH
70470: LD_INT 34
70472: PUSH
70473: LD_INT 12
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 34
70482: PUSH
70483: LD_INT 51
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 34
70492: PUSH
70493: LD_INT 32
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 34
70502: PUSH
70503: LD_INT 89
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: PPUSH
70517: CALL_OW 72
70521: ST_TO_ADDR
// end ;
70522: LD_VAR 0 2
70526: RET
// export function Negate ( value ) ; begin
70527: LD_INT 0
70529: PPUSH
// result := not value ;
70530: LD_ADDR_VAR 0 2
70534: PUSH
70535: LD_VAR 0 1
70539: NOT
70540: ST_TO_ADDR
// end ;
70541: LD_VAR 0 2
70545: RET
// export function Inc ( value ) ; begin
70546: LD_INT 0
70548: PPUSH
// result := value + 1 ;
70549: LD_ADDR_VAR 0 2
70553: PUSH
70554: LD_VAR 0 1
70558: PUSH
70559: LD_INT 1
70561: PLUS
70562: ST_TO_ADDR
// end ;
70563: LD_VAR 0 2
70567: RET
// export function Dec ( value ) ; begin
70568: LD_INT 0
70570: PPUSH
// result := value - 1 ;
70571: LD_ADDR_VAR 0 2
70575: PUSH
70576: LD_VAR 0 1
70580: PUSH
70581: LD_INT 1
70583: MINUS
70584: ST_TO_ADDR
// end ;
70585: LD_VAR 0 2
70589: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70590: LD_INT 0
70592: PPUSH
70593: PPUSH
70594: PPUSH
70595: PPUSH
70596: PPUSH
70597: PPUSH
70598: PPUSH
70599: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70600: LD_VAR 0 1
70604: PPUSH
70605: LD_VAR 0 2
70609: PPUSH
70610: CALL_OW 488
70614: NOT
70615: PUSH
70616: LD_VAR 0 3
70620: PPUSH
70621: LD_VAR 0 4
70625: PPUSH
70626: CALL_OW 488
70630: NOT
70631: OR
70632: IFFALSE 70645
// begin result := - 1 ;
70634: LD_ADDR_VAR 0 5
70638: PUSH
70639: LD_INT 1
70641: NEG
70642: ST_TO_ADDR
// exit ;
70643: GO 70880
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70645: LD_ADDR_VAR 0 12
70649: PUSH
70650: LD_VAR 0 1
70654: PPUSH
70655: LD_VAR 0 2
70659: PPUSH
70660: LD_VAR 0 3
70664: PPUSH
70665: LD_VAR 0 4
70669: PPUSH
70670: CALL 69730 0 4
70674: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70675: LD_ADDR_VAR 0 11
70679: PUSH
70680: LD_VAR 0 1
70684: PPUSH
70685: LD_VAR 0 2
70689: PPUSH
70690: LD_VAR 0 12
70694: PUSH
70695: LD_INT 1
70697: ARRAY
70698: PPUSH
70699: LD_VAR 0 12
70703: PUSH
70704: LD_INT 2
70706: ARRAY
70707: PPUSH
70708: CALL_OW 298
70712: ST_TO_ADDR
// distance := 9999 ;
70713: LD_ADDR_VAR 0 10
70717: PUSH
70718: LD_INT 9999
70720: ST_TO_ADDR
// for i := 0 to 5 do
70721: LD_ADDR_VAR 0 6
70725: PUSH
70726: DOUBLE
70727: LD_INT 0
70729: DEC
70730: ST_TO_ADDR
70731: LD_INT 5
70733: PUSH
70734: FOR_TO
70735: IFFALSE 70878
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70737: LD_ADDR_VAR 0 7
70741: PUSH
70742: LD_VAR 0 1
70746: PPUSH
70747: LD_VAR 0 6
70751: PPUSH
70752: LD_VAR 0 11
70756: PPUSH
70757: CALL_OW 272
70761: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70762: LD_ADDR_VAR 0 8
70766: PUSH
70767: LD_VAR 0 2
70771: PPUSH
70772: LD_VAR 0 6
70776: PPUSH
70777: LD_VAR 0 11
70781: PPUSH
70782: CALL_OW 273
70786: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70787: LD_VAR 0 7
70791: PPUSH
70792: LD_VAR 0 8
70796: PPUSH
70797: CALL_OW 488
70801: NOT
70802: IFFALSE 70806
// continue ;
70804: GO 70734
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70806: LD_ADDR_VAR 0 9
70810: PUSH
70811: LD_VAR 0 12
70815: PUSH
70816: LD_INT 1
70818: ARRAY
70819: PPUSH
70820: LD_VAR 0 12
70824: PUSH
70825: LD_INT 2
70827: ARRAY
70828: PPUSH
70829: LD_VAR 0 7
70833: PPUSH
70834: LD_VAR 0 8
70838: PPUSH
70839: CALL_OW 298
70843: ST_TO_ADDR
// if tmp < distance then
70844: LD_VAR 0 9
70848: PUSH
70849: LD_VAR 0 10
70853: LESS
70854: IFFALSE 70876
// begin result := i ;
70856: LD_ADDR_VAR 0 5
70860: PUSH
70861: LD_VAR 0 6
70865: ST_TO_ADDR
// distance := tmp ;
70866: LD_ADDR_VAR 0 10
70870: PUSH
70871: LD_VAR 0 9
70875: ST_TO_ADDR
// end ; end ;
70876: GO 70734
70878: POP
70879: POP
// end ;
70880: LD_VAR 0 5
70884: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70885: LD_INT 0
70887: PPUSH
70888: PPUSH
// if not driver or not IsInUnit ( driver ) then
70889: LD_VAR 0 1
70893: NOT
70894: PUSH
70895: LD_VAR 0 1
70899: PPUSH
70900: CALL_OW 310
70904: NOT
70905: OR
70906: IFFALSE 70910
// exit ;
70908: GO 71000
// vehicle := IsInUnit ( driver ) ;
70910: LD_ADDR_VAR 0 3
70914: PUSH
70915: LD_VAR 0 1
70919: PPUSH
70920: CALL_OW 310
70924: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70925: LD_VAR 0 1
70929: PPUSH
70930: LD_STRING \
70932: PUSH
70933: LD_INT 0
70935: PUSH
70936: LD_INT 0
70938: PUSH
70939: LD_INT 0
70941: PUSH
70942: LD_INT 0
70944: PUSH
70945: LD_INT 0
70947: PUSH
70948: LD_INT 0
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: PUSH
70960: LD_STRING E
70962: PUSH
70963: LD_INT 0
70965: PUSH
70966: LD_INT 0
70968: PUSH
70969: LD_VAR 0 3
70973: PUSH
70974: LD_INT 0
70976: PUSH
70977: LD_INT 0
70979: PUSH
70980: LD_INT 0
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PPUSH
70996: CALL_OW 446
// end ;
71000: LD_VAR 0 2
71004: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71005: LD_INT 0
71007: PPUSH
71008: PPUSH
// if not driver or not IsInUnit ( driver ) then
71009: LD_VAR 0 1
71013: NOT
71014: PUSH
71015: LD_VAR 0 1
71019: PPUSH
71020: CALL_OW 310
71024: NOT
71025: OR
71026: IFFALSE 71030
// exit ;
71028: GO 71120
// vehicle := IsInUnit ( driver ) ;
71030: LD_ADDR_VAR 0 3
71034: PUSH
71035: LD_VAR 0 1
71039: PPUSH
71040: CALL_OW 310
71044: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71045: LD_VAR 0 1
71049: PPUSH
71050: LD_STRING \
71052: PUSH
71053: LD_INT 0
71055: PUSH
71056: LD_INT 0
71058: PUSH
71059: LD_INT 0
71061: PUSH
71062: LD_INT 0
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: LD_INT 0
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: PUSH
71080: LD_STRING E
71082: PUSH
71083: LD_INT 0
71085: PUSH
71086: LD_INT 0
71088: PUSH
71089: LD_VAR 0 3
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: LD_INT 0
71099: PUSH
71100: LD_INT 0
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PPUSH
71116: CALL_OW 447
// end ;
71120: LD_VAR 0 2
71124: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71125: LD_INT 0
71127: PPUSH
71128: PPUSH
71129: PPUSH
// tmp := [ ] ;
71130: LD_ADDR_VAR 0 5
71134: PUSH
71135: EMPTY
71136: ST_TO_ADDR
// for i in units do
71137: LD_ADDR_VAR 0 4
71141: PUSH
71142: LD_VAR 0 1
71146: PUSH
71147: FOR_IN
71148: IFFALSE 71186
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71150: LD_ADDR_VAR 0 5
71154: PUSH
71155: LD_VAR 0 5
71159: PPUSH
71160: LD_VAR 0 5
71164: PUSH
71165: LD_INT 1
71167: PLUS
71168: PPUSH
71169: LD_VAR 0 4
71173: PPUSH
71174: CALL_OW 256
71178: PPUSH
71179: CALL_OW 2
71183: ST_TO_ADDR
71184: GO 71147
71186: POP
71187: POP
// if not tmp then
71188: LD_VAR 0 5
71192: NOT
71193: IFFALSE 71197
// exit ;
71195: GO 71245
// if asc then
71197: LD_VAR 0 2
71201: IFFALSE 71225
// result := SortListByListAsc ( units , tmp ) else
71203: LD_ADDR_VAR 0 3
71207: PUSH
71208: LD_VAR 0 1
71212: PPUSH
71213: LD_VAR 0 5
71217: PPUSH
71218: CALL_OW 76
71222: ST_TO_ADDR
71223: GO 71245
// result := SortListByListDesc ( units , tmp ) ;
71225: LD_ADDR_VAR 0 3
71229: PUSH
71230: LD_VAR 0 1
71234: PPUSH
71235: LD_VAR 0 5
71239: PPUSH
71240: CALL_OW 77
71244: ST_TO_ADDR
// end ;
71245: LD_VAR 0 3
71249: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71250: LD_INT 0
71252: PPUSH
71253: PPUSH
// task := GetTaskList ( mech ) ;
71254: LD_ADDR_VAR 0 4
71258: PUSH
71259: LD_VAR 0 1
71263: PPUSH
71264: CALL_OW 437
71268: ST_TO_ADDR
// if not task then
71269: LD_VAR 0 4
71273: NOT
71274: IFFALSE 71278
// exit ;
71276: GO 71320
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71278: LD_ADDR_VAR 0 3
71282: PUSH
71283: LD_VAR 0 4
71287: PUSH
71288: LD_INT 1
71290: ARRAY
71291: PUSH
71292: LD_INT 1
71294: ARRAY
71295: PUSH
71296: LD_STRING r
71298: EQUAL
71299: PUSH
71300: LD_VAR 0 4
71304: PUSH
71305: LD_INT 1
71307: ARRAY
71308: PUSH
71309: LD_INT 4
71311: ARRAY
71312: PUSH
71313: LD_VAR 0 2
71317: EQUAL
71318: AND
71319: ST_TO_ADDR
// end ;
71320: LD_VAR 0 3
71324: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71325: LD_INT 0
71327: PPUSH
// SetDir ( unit , d ) ;
71328: LD_VAR 0 1
71332: PPUSH
71333: LD_VAR 0 4
71337: PPUSH
71338: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71342: LD_VAR 0 1
71346: PPUSH
71347: LD_VAR 0 2
71351: PPUSH
71352: LD_VAR 0 3
71356: PPUSH
71357: LD_VAR 0 5
71361: PPUSH
71362: CALL_OW 48
// end ;
71366: LD_VAR 0 6
71370: RET
// export function ToNaturalNumber ( number ) ; begin
71371: LD_INT 0
71373: PPUSH
// result := number div 1 ;
71374: LD_ADDR_VAR 0 2
71378: PUSH
71379: LD_VAR 0 1
71383: PUSH
71384: LD_INT 1
71386: DIV
71387: ST_TO_ADDR
// if number < 0 then
71388: LD_VAR 0 1
71392: PUSH
71393: LD_INT 0
71395: LESS
71396: IFFALSE 71406
// result := 0 ;
71398: LD_ADDR_VAR 0 2
71402: PUSH
71403: LD_INT 0
71405: ST_TO_ADDR
// end ;
71406: LD_VAR 0 2
71410: RET
// export function SortByClass ( units , class ) ; var un ; begin
71411: LD_INT 0
71413: PPUSH
71414: PPUSH
// if not units or not class then
71415: LD_VAR 0 1
71419: NOT
71420: PUSH
71421: LD_VAR 0 2
71425: NOT
71426: OR
71427: IFFALSE 71431
// exit ;
71429: GO 71526
// result := [ ] ;
71431: LD_ADDR_VAR 0 3
71435: PUSH
71436: EMPTY
71437: ST_TO_ADDR
// for un in units do
71438: LD_ADDR_VAR 0 4
71442: PUSH
71443: LD_VAR 0 1
71447: PUSH
71448: FOR_IN
71449: IFFALSE 71524
// if GetClass ( un ) = class then
71451: LD_VAR 0 4
71455: PPUSH
71456: CALL_OW 257
71460: PUSH
71461: LD_VAR 0 2
71465: EQUAL
71466: IFFALSE 71493
// result := Insert ( result , 1 , un ) else
71468: LD_ADDR_VAR 0 3
71472: PUSH
71473: LD_VAR 0 3
71477: PPUSH
71478: LD_INT 1
71480: PPUSH
71481: LD_VAR 0 4
71485: PPUSH
71486: CALL_OW 2
71490: ST_TO_ADDR
71491: GO 71522
// result := Replace ( result , result + 1 , un ) ;
71493: LD_ADDR_VAR 0 3
71497: PUSH
71498: LD_VAR 0 3
71502: PPUSH
71503: LD_VAR 0 3
71507: PUSH
71508: LD_INT 1
71510: PLUS
71511: PPUSH
71512: LD_VAR 0 4
71516: PPUSH
71517: CALL_OW 1
71521: ST_TO_ADDR
71522: GO 71448
71524: POP
71525: POP
// end ;
71526: LD_VAR 0 3
71530: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71531: LD_INT 0
71533: PPUSH
71534: PPUSH
71535: PPUSH
71536: PPUSH
71537: PPUSH
71538: PPUSH
71539: PPUSH
// result := [ ] ;
71540: LD_ADDR_VAR 0 4
71544: PUSH
71545: EMPTY
71546: ST_TO_ADDR
// if x - r < 0 then
71547: LD_VAR 0 1
71551: PUSH
71552: LD_VAR 0 3
71556: MINUS
71557: PUSH
71558: LD_INT 0
71560: LESS
71561: IFFALSE 71573
// min_x := 0 else
71563: LD_ADDR_VAR 0 8
71567: PUSH
71568: LD_INT 0
71570: ST_TO_ADDR
71571: GO 71589
// min_x := x - r ;
71573: LD_ADDR_VAR 0 8
71577: PUSH
71578: LD_VAR 0 1
71582: PUSH
71583: LD_VAR 0 3
71587: MINUS
71588: ST_TO_ADDR
// if y - r < 0 then
71589: LD_VAR 0 2
71593: PUSH
71594: LD_VAR 0 3
71598: MINUS
71599: PUSH
71600: LD_INT 0
71602: LESS
71603: IFFALSE 71615
// min_y := 0 else
71605: LD_ADDR_VAR 0 7
71609: PUSH
71610: LD_INT 0
71612: ST_TO_ADDR
71613: GO 71631
// min_y := y - r ;
71615: LD_ADDR_VAR 0 7
71619: PUSH
71620: LD_VAR 0 2
71624: PUSH
71625: LD_VAR 0 3
71629: MINUS
71630: ST_TO_ADDR
// max_x := x + r ;
71631: LD_ADDR_VAR 0 9
71635: PUSH
71636: LD_VAR 0 1
71640: PUSH
71641: LD_VAR 0 3
71645: PLUS
71646: ST_TO_ADDR
// max_y := y + r ;
71647: LD_ADDR_VAR 0 10
71651: PUSH
71652: LD_VAR 0 2
71656: PUSH
71657: LD_VAR 0 3
71661: PLUS
71662: ST_TO_ADDR
// for _x = min_x to max_x do
71663: LD_ADDR_VAR 0 5
71667: PUSH
71668: DOUBLE
71669: LD_VAR 0 8
71673: DEC
71674: ST_TO_ADDR
71675: LD_VAR 0 9
71679: PUSH
71680: FOR_TO
71681: IFFALSE 71782
// for _y = min_y to max_y do
71683: LD_ADDR_VAR 0 6
71687: PUSH
71688: DOUBLE
71689: LD_VAR 0 7
71693: DEC
71694: ST_TO_ADDR
71695: LD_VAR 0 10
71699: PUSH
71700: FOR_TO
71701: IFFALSE 71778
// begin if not ValidHex ( _x , _y ) then
71703: LD_VAR 0 5
71707: PPUSH
71708: LD_VAR 0 6
71712: PPUSH
71713: CALL_OW 488
71717: NOT
71718: IFFALSE 71722
// continue ;
71720: GO 71700
// if GetResourceTypeXY ( _x , _y ) then
71722: LD_VAR 0 5
71726: PPUSH
71727: LD_VAR 0 6
71731: PPUSH
71732: CALL_OW 283
71736: IFFALSE 71776
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71738: LD_ADDR_VAR 0 4
71742: PUSH
71743: LD_VAR 0 4
71747: PPUSH
71748: LD_VAR 0 4
71752: PUSH
71753: LD_INT 1
71755: PLUS
71756: PPUSH
71757: LD_VAR 0 5
71761: PUSH
71762: LD_VAR 0 6
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PPUSH
71771: CALL_OW 1
71775: ST_TO_ADDR
// end ;
71776: GO 71700
71778: POP
71779: POP
71780: GO 71680
71782: POP
71783: POP
// end ;
71784: LD_VAR 0 4
71788: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71789: LD_INT 0
71791: PPUSH
71792: PPUSH
71793: PPUSH
71794: PPUSH
71795: PPUSH
71796: PPUSH
71797: PPUSH
71798: PPUSH
// if not units then
71799: LD_VAR 0 1
71803: NOT
71804: IFFALSE 71808
// exit ;
71806: GO 72332
// result := UnitFilter ( units , [ f_ok ] ) ;
71808: LD_ADDR_VAR 0 3
71812: PUSH
71813: LD_VAR 0 1
71817: PPUSH
71818: LD_INT 50
71820: PUSH
71821: EMPTY
71822: LIST
71823: PPUSH
71824: CALL_OW 72
71828: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71829: LD_ADDR_VAR 0 8
71833: PUSH
71834: LD_VAR 0 1
71838: PUSH
71839: LD_INT 1
71841: ARRAY
71842: PPUSH
71843: CALL_OW 255
71847: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71848: LD_ADDR_VAR 0 10
71852: PUSH
71853: LD_INT 29
71855: PUSH
71856: LD_INT 91
71858: PUSH
71859: LD_INT 49
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: LIST
71866: ST_TO_ADDR
// if not result then
71867: LD_VAR 0 3
71871: NOT
71872: IFFALSE 71876
// exit ;
71874: GO 72332
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71876: LD_ADDR_VAR 0 5
71880: PUSH
71881: LD_INT 81
71883: PUSH
71884: LD_VAR 0 8
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PPUSH
71893: CALL_OW 69
71897: ST_TO_ADDR
// for i in result do
71898: LD_ADDR_VAR 0 4
71902: PUSH
71903: LD_VAR 0 3
71907: PUSH
71908: FOR_IN
71909: IFFALSE 72330
// begin tag := GetTag ( i ) + 1 ;
71911: LD_ADDR_VAR 0 9
71915: PUSH
71916: LD_VAR 0 4
71920: PPUSH
71921: CALL_OW 110
71925: PUSH
71926: LD_INT 1
71928: PLUS
71929: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71930: LD_ADDR_VAR 0 7
71934: PUSH
71935: LD_VAR 0 4
71939: PPUSH
71940: CALL_OW 250
71944: PPUSH
71945: LD_VAR 0 4
71949: PPUSH
71950: CALL_OW 251
71954: PPUSH
71955: LD_INT 6
71957: PPUSH
71958: CALL 71531 0 3
71962: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71963: LD_VAR 0 4
71967: PPUSH
71968: CALL_OW 247
71972: PUSH
71973: LD_INT 2
71975: EQUAL
71976: PUSH
71977: LD_VAR 0 7
71981: AND
71982: PUSH
71983: LD_VAR 0 4
71987: PPUSH
71988: CALL_OW 264
71992: PUSH
71993: LD_VAR 0 10
71997: IN
71998: NOT
71999: AND
72000: IFFALSE 72039
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72002: LD_VAR 0 4
72006: PPUSH
72007: LD_VAR 0 7
72011: PUSH
72012: LD_INT 1
72014: ARRAY
72015: PUSH
72016: LD_INT 1
72018: ARRAY
72019: PPUSH
72020: LD_VAR 0 7
72024: PUSH
72025: LD_INT 1
72027: ARRAY
72028: PUSH
72029: LD_INT 2
72031: ARRAY
72032: PPUSH
72033: CALL_OW 116
72037: GO 72328
// if path > tag then
72039: LD_VAR 0 2
72043: PUSH
72044: LD_VAR 0 9
72048: GREATER
72049: IFFALSE 72257
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72051: LD_ADDR_VAR 0 6
72055: PUSH
72056: LD_VAR 0 5
72060: PPUSH
72061: LD_INT 91
72063: PUSH
72064: LD_VAR 0 4
72068: PUSH
72069: LD_INT 8
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: LIST
72076: PPUSH
72077: CALL_OW 72
72081: ST_TO_ADDR
// if nearEnemy then
72082: LD_VAR 0 6
72086: IFFALSE 72155
// begin if GetWeapon ( i ) = ru_time_lapser then
72088: LD_VAR 0 4
72092: PPUSH
72093: CALL_OW 264
72097: PUSH
72098: LD_INT 49
72100: EQUAL
72101: IFFALSE 72129
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72103: LD_VAR 0 4
72107: PPUSH
72108: LD_VAR 0 6
72112: PPUSH
72113: LD_VAR 0 4
72117: PPUSH
72118: CALL_OW 74
72122: PPUSH
72123: CALL_OW 112
72127: GO 72153
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72129: LD_VAR 0 4
72133: PPUSH
72134: LD_VAR 0 6
72138: PPUSH
72139: LD_VAR 0 4
72143: PPUSH
72144: CALL_OW 74
72148: PPUSH
72149: CALL 73257 0 2
// end else
72153: GO 72255
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72155: LD_VAR 0 4
72159: PPUSH
72160: LD_VAR 0 2
72164: PUSH
72165: LD_VAR 0 9
72169: ARRAY
72170: PUSH
72171: LD_INT 1
72173: ARRAY
72174: PPUSH
72175: LD_VAR 0 2
72179: PUSH
72180: LD_VAR 0 9
72184: ARRAY
72185: PUSH
72186: LD_INT 2
72188: ARRAY
72189: PPUSH
72190: CALL_OW 297
72194: PUSH
72195: LD_INT 6
72197: GREATER
72198: IFFALSE 72241
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72200: LD_VAR 0 4
72204: PPUSH
72205: LD_VAR 0 2
72209: PUSH
72210: LD_VAR 0 9
72214: ARRAY
72215: PUSH
72216: LD_INT 1
72218: ARRAY
72219: PPUSH
72220: LD_VAR 0 2
72224: PUSH
72225: LD_VAR 0 9
72229: ARRAY
72230: PUSH
72231: LD_INT 2
72233: ARRAY
72234: PPUSH
72235: CALL_OW 114
72239: GO 72255
// SetTag ( i , tag ) ;
72241: LD_VAR 0 4
72245: PPUSH
72246: LD_VAR 0 9
72250: PPUSH
72251: CALL_OW 109
// end else
72255: GO 72328
// if enemy then
72257: LD_VAR 0 5
72261: IFFALSE 72328
// begin if GetWeapon ( i ) = ru_time_lapser then
72263: LD_VAR 0 4
72267: PPUSH
72268: CALL_OW 264
72272: PUSH
72273: LD_INT 49
72275: EQUAL
72276: IFFALSE 72304
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72278: LD_VAR 0 4
72282: PPUSH
72283: LD_VAR 0 5
72287: PPUSH
72288: LD_VAR 0 4
72292: PPUSH
72293: CALL_OW 74
72297: PPUSH
72298: CALL_OW 112
72302: GO 72328
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72304: LD_VAR 0 4
72308: PPUSH
72309: LD_VAR 0 5
72313: PPUSH
72314: LD_VAR 0 4
72318: PPUSH
72319: CALL_OW 74
72323: PPUSH
72324: CALL 73257 0 2
// end ; end ;
72328: GO 71908
72330: POP
72331: POP
// end ;
72332: LD_VAR 0 3
72336: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72337: LD_INT 0
72339: PPUSH
72340: PPUSH
72341: PPUSH
// if not unit or IsInUnit ( unit ) then
72342: LD_VAR 0 1
72346: NOT
72347: PUSH
72348: LD_VAR 0 1
72352: PPUSH
72353: CALL_OW 310
72357: OR
72358: IFFALSE 72362
// exit ;
72360: GO 72453
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72362: LD_ADDR_VAR 0 4
72366: PUSH
72367: LD_VAR 0 1
72371: PPUSH
72372: CALL_OW 250
72376: PPUSH
72377: LD_VAR 0 2
72381: PPUSH
72382: LD_INT 1
72384: PPUSH
72385: CALL_OW 272
72389: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72390: LD_ADDR_VAR 0 5
72394: PUSH
72395: LD_VAR 0 1
72399: PPUSH
72400: CALL_OW 251
72404: PPUSH
72405: LD_VAR 0 2
72409: PPUSH
72410: LD_INT 1
72412: PPUSH
72413: CALL_OW 273
72417: ST_TO_ADDR
// if ValidHex ( x , y ) then
72418: LD_VAR 0 4
72422: PPUSH
72423: LD_VAR 0 5
72427: PPUSH
72428: CALL_OW 488
72432: IFFALSE 72453
// ComTurnXY ( unit , x , y ) ;
72434: LD_VAR 0 1
72438: PPUSH
72439: LD_VAR 0 4
72443: PPUSH
72444: LD_VAR 0 5
72448: PPUSH
72449: CALL_OW 118
// end ;
72453: LD_VAR 0 3
72457: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72458: LD_INT 0
72460: PPUSH
72461: PPUSH
// result := false ;
72462: LD_ADDR_VAR 0 3
72466: PUSH
72467: LD_INT 0
72469: ST_TO_ADDR
// if not units then
72470: LD_VAR 0 2
72474: NOT
72475: IFFALSE 72479
// exit ;
72477: GO 72524
// for i in units do
72479: LD_ADDR_VAR 0 4
72483: PUSH
72484: LD_VAR 0 2
72488: PUSH
72489: FOR_IN
72490: IFFALSE 72522
// if See ( side , i ) then
72492: LD_VAR 0 1
72496: PPUSH
72497: LD_VAR 0 4
72501: PPUSH
72502: CALL_OW 292
72506: IFFALSE 72520
// begin result := true ;
72508: LD_ADDR_VAR 0 3
72512: PUSH
72513: LD_INT 1
72515: ST_TO_ADDR
// exit ;
72516: POP
72517: POP
72518: GO 72524
// end ;
72520: GO 72489
72522: POP
72523: POP
// end ;
72524: LD_VAR 0 3
72528: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72529: LD_INT 0
72531: PPUSH
72532: PPUSH
72533: PPUSH
72534: PPUSH
// if not unit or not points then
72535: LD_VAR 0 1
72539: NOT
72540: PUSH
72541: LD_VAR 0 2
72545: NOT
72546: OR
72547: IFFALSE 72551
// exit ;
72549: GO 72641
// dist := 99999 ;
72551: LD_ADDR_VAR 0 5
72555: PUSH
72556: LD_INT 99999
72558: ST_TO_ADDR
// for i in points do
72559: LD_ADDR_VAR 0 4
72563: PUSH
72564: LD_VAR 0 2
72568: PUSH
72569: FOR_IN
72570: IFFALSE 72639
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72572: LD_ADDR_VAR 0 6
72576: PUSH
72577: LD_VAR 0 1
72581: PPUSH
72582: LD_VAR 0 4
72586: PUSH
72587: LD_INT 1
72589: ARRAY
72590: PPUSH
72591: LD_VAR 0 4
72595: PUSH
72596: LD_INT 2
72598: ARRAY
72599: PPUSH
72600: CALL_OW 297
72604: ST_TO_ADDR
// if tmpDist < dist then
72605: LD_VAR 0 6
72609: PUSH
72610: LD_VAR 0 5
72614: LESS
72615: IFFALSE 72637
// begin result := i ;
72617: LD_ADDR_VAR 0 3
72621: PUSH
72622: LD_VAR 0 4
72626: ST_TO_ADDR
// dist := tmpDist ;
72627: LD_ADDR_VAR 0 5
72631: PUSH
72632: LD_VAR 0 6
72636: ST_TO_ADDR
// end ; end ;
72637: GO 72569
72639: POP
72640: POP
// end ;
72641: LD_VAR 0 3
72645: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72646: LD_INT 0
72648: PPUSH
// uc_side := side ;
72649: LD_ADDR_OWVAR 20
72653: PUSH
72654: LD_VAR 0 1
72658: ST_TO_ADDR
// uc_nation := 3 ;
72659: LD_ADDR_OWVAR 21
72663: PUSH
72664: LD_INT 3
72666: ST_TO_ADDR
// vc_chassis := 25 ;
72667: LD_ADDR_OWVAR 37
72671: PUSH
72672: LD_INT 25
72674: ST_TO_ADDR
// vc_engine := engine_siberite ;
72675: LD_ADDR_OWVAR 39
72679: PUSH
72680: LD_INT 3
72682: ST_TO_ADDR
// vc_control := control_computer ;
72683: LD_ADDR_OWVAR 38
72687: PUSH
72688: LD_INT 3
72690: ST_TO_ADDR
// vc_weapon := 59 ;
72691: LD_ADDR_OWVAR 40
72695: PUSH
72696: LD_INT 59
72698: ST_TO_ADDR
// result := CreateVehicle ;
72699: LD_ADDR_VAR 0 5
72703: PUSH
72704: CALL_OW 45
72708: ST_TO_ADDR
// SetDir ( result , d ) ;
72709: LD_VAR 0 5
72713: PPUSH
72714: LD_VAR 0 4
72718: PPUSH
72719: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72723: LD_VAR 0 5
72727: PPUSH
72728: LD_VAR 0 2
72732: PPUSH
72733: LD_VAR 0 3
72737: PPUSH
72738: LD_INT 0
72740: PPUSH
72741: CALL_OW 48
// end ;
72745: LD_VAR 0 5
72749: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72750: LD_INT 0
72752: PPUSH
72753: PPUSH
72754: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72755: LD_ADDR_VAR 0 2
72759: PUSH
72760: LD_INT 0
72762: PUSH
72763: LD_INT 0
72765: PUSH
72766: LD_INT 0
72768: PUSH
72769: LD_INT 0
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72778: LD_VAR 0 1
72782: NOT
72783: PUSH
72784: LD_VAR 0 1
72788: PPUSH
72789: CALL_OW 264
72793: PUSH
72794: LD_INT 12
72796: PUSH
72797: LD_INT 51
72799: PUSH
72800: LD_INT 32
72802: PUSH
72803: LD_INT 89
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: IN
72812: NOT
72813: OR
72814: IFFALSE 72818
// exit ;
72816: GO 72916
// for i := 1 to 3 do
72818: LD_ADDR_VAR 0 3
72822: PUSH
72823: DOUBLE
72824: LD_INT 1
72826: DEC
72827: ST_TO_ADDR
72828: LD_INT 3
72830: PUSH
72831: FOR_TO
72832: IFFALSE 72914
// begin tmp := GetCargo ( cargo , i ) ;
72834: LD_ADDR_VAR 0 4
72838: PUSH
72839: LD_VAR 0 1
72843: PPUSH
72844: LD_VAR 0 3
72848: PPUSH
72849: CALL_OW 289
72853: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72854: LD_ADDR_VAR 0 2
72858: PUSH
72859: LD_VAR 0 2
72863: PPUSH
72864: LD_VAR 0 3
72868: PPUSH
72869: LD_VAR 0 4
72873: PPUSH
72874: CALL_OW 1
72878: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72879: LD_ADDR_VAR 0 2
72883: PUSH
72884: LD_VAR 0 2
72888: PPUSH
72889: LD_INT 4
72891: PPUSH
72892: LD_VAR 0 2
72896: PUSH
72897: LD_INT 4
72899: ARRAY
72900: PUSH
72901: LD_VAR 0 4
72905: PLUS
72906: PPUSH
72907: CALL_OW 1
72911: ST_TO_ADDR
// end ;
72912: GO 72831
72914: POP
72915: POP
// end ;
72916: LD_VAR 0 2
72920: RET
// export function Length ( array ) ; begin
72921: LD_INT 0
72923: PPUSH
// result := array + 0 ;
72924: LD_ADDR_VAR 0 2
72928: PUSH
72929: LD_VAR 0 1
72933: PUSH
72934: LD_INT 0
72936: PLUS
72937: ST_TO_ADDR
// end ;
72938: LD_VAR 0 2
72942: RET
// export function PrepareArray ( array ) ; begin
72943: LD_INT 0
72945: PPUSH
// result := array diff 0 ;
72946: LD_ADDR_VAR 0 2
72950: PUSH
72951: LD_VAR 0 1
72955: PUSH
72956: LD_INT 0
72958: DIFF
72959: ST_TO_ADDR
// if not result [ 1 ] then
72960: LD_VAR 0 2
72964: PUSH
72965: LD_INT 1
72967: ARRAY
72968: NOT
72969: IFFALSE 72989
// result := Delete ( result , 1 ) ;
72971: LD_ADDR_VAR 0 2
72975: PUSH
72976: LD_VAR 0 2
72980: PPUSH
72981: LD_INT 1
72983: PPUSH
72984: CALL_OW 3
72988: ST_TO_ADDR
// end ;
72989: LD_VAR 0 2
72993: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72994: LD_INT 0
72996: PPUSH
72997: PPUSH
72998: PPUSH
72999: PPUSH
// sibRocketRange := 25 ;
73000: LD_ADDR_VAR 0 6
73004: PUSH
73005: LD_INT 25
73007: ST_TO_ADDR
// result := false ;
73008: LD_ADDR_VAR 0 4
73012: PUSH
73013: LD_INT 0
73015: ST_TO_ADDR
// for i := 0 to 5 do
73016: LD_ADDR_VAR 0 5
73020: PUSH
73021: DOUBLE
73022: LD_INT 0
73024: DEC
73025: ST_TO_ADDR
73026: LD_INT 5
73028: PUSH
73029: FOR_TO
73030: IFFALSE 73097
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73032: LD_VAR 0 1
73036: PPUSH
73037: LD_VAR 0 5
73041: PPUSH
73042: LD_VAR 0 6
73046: PPUSH
73047: CALL_OW 272
73051: PPUSH
73052: LD_VAR 0 2
73056: PPUSH
73057: LD_VAR 0 5
73061: PPUSH
73062: LD_VAR 0 6
73066: PPUSH
73067: CALL_OW 273
73071: PPUSH
73072: LD_VAR 0 3
73076: PPUSH
73077: CALL_OW 309
73081: IFFALSE 73095
// begin result := true ;
73083: LD_ADDR_VAR 0 4
73087: PUSH
73088: LD_INT 1
73090: ST_TO_ADDR
// exit ;
73091: POP
73092: POP
73093: GO 73099
// end ;
73095: GO 73029
73097: POP
73098: POP
// end ;
73099: LD_VAR 0 4
73103: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73104: LD_INT 0
73106: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73107: LD_VAR 0 1
73111: PPUSH
73112: LD_VAR 0 2
73116: PPUSH
73117: LD_INT 0
73119: PPUSH
73120: LD_INT 0
73122: PPUSH
73123: LD_INT 1
73125: PPUSH
73126: LD_INT 0
73128: PPUSH
73129: CALL_OW 587
// end ;
73133: LD_VAR 0 3
73137: RET
// export function CenterOnNow ( unit ) ; begin
73138: LD_INT 0
73140: PPUSH
// result := IsInUnit ( unit ) ;
73141: LD_ADDR_VAR 0 2
73145: PUSH
73146: LD_VAR 0 1
73150: PPUSH
73151: CALL_OW 310
73155: ST_TO_ADDR
// if not result then
73156: LD_VAR 0 2
73160: NOT
73161: IFFALSE 73173
// result := unit ;
73163: LD_ADDR_VAR 0 2
73167: PUSH
73168: LD_VAR 0 1
73172: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73173: LD_VAR 0 1
73177: PPUSH
73178: CALL_OW 87
// end ;
73182: LD_VAR 0 2
73186: RET
// export function ComMoveHex ( unit , hex ) ; begin
73187: LD_INT 0
73189: PPUSH
// if not hex then
73190: LD_VAR 0 2
73194: NOT
73195: IFFALSE 73199
// exit ;
73197: GO 73252
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73199: LD_VAR 0 2
73203: PUSH
73204: LD_INT 1
73206: ARRAY
73207: PPUSH
73208: LD_VAR 0 2
73212: PUSH
73213: LD_INT 2
73215: ARRAY
73216: PPUSH
73217: CALL_OW 428
73221: IFFALSE 73225
// exit ;
73223: GO 73252
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73225: LD_VAR 0 1
73229: PPUSH
73230: LD_VAR 0 2
73234: PUSH
73235: LD_INT 1
73237: ARRAY
73238: PPUSH
73239: LD_VAR 0 2
73243: PUSH
73244: LD_INT 2
73246: ARRAY
73247: PPUSH
73248: CALL_OW 111
// end ;
73252: LD_VAR 0 3
73256: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73257: LD_INT 0
73259: PPUSH
73260: PPUSH
73261: PPUSH
// if not unit or not enemy then
73262: LD_VAR 0 1
73266: NOT
73267: PUSH
73268: LD_VAR 0 2
73272: NOT
73273: OR
73274: IFFALSE 73278
// exit ;
73276: GO 73402
// x := GetX ( enemy ) ;
73278: LD_ADDR_VAR 0 4
73282: PUSH
73283: LD_VAR 0 2
73287: PPUSH
73288: CALL_OW 250
73292: ST_TO_ADDR
// y := GetY ( enemy ) ;
73293: LD_ADDR_VAR 0 5
73297: PUSH
73298: LD_VAR 0 2
73302: PPUSH
73303: CALL_OW 251
73307: ST_TO_ADDR
// if ValidHex ( x , y ) then
73308: LD_VAR 0 4
73312: PPUSH
73313: LD_VAR 0 5
73317: PPUSH
73318: CALL_OW 488
73322: IFFALSE 73402
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
73324: LD_VAR 0 2
73328: PPUSH
73329: CALL_OW 247
73333: PUSH
73334: LD_INT 3
73336: PUSH
73337: LD_INT 2
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: IN
73344: PUSH
73345: LD_VAR 0 1
73349: PPUSH
73350: CALL_OW 255
73354: PPUSH
73355: LD_VAR 0 2
73359: PPUSH
73360: CALL_OW 292
73364: AND
73365: IFFALSE 73383
// ComAttackUnit ( unit , enemy ) else
73367: LD_VAR 0 1
73371: PPUSH
73372: LD_VAR 0 2
73376: PPUSH
73377: CALL_OW 115
73381: GO 73402
// ComAgressiveMove ( unit , x , y ) ;
73383: LD_VAR 0 1
73387: PPUSH
73388: LD_VAR 0 4
73392: PPUSH
73393: LD_VAR 0 5
73397: PPUSH
73398: CALL_OW 114
// end ; end_of_file
73402: LD_VAR 0 3
73406: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73407: LD_VAR 0 1
73411: PUSH
73412: LD_INT 200
73414: DOUBLE
73415: GREATEREQUAL
73416: IFFALSE 73424
73418: LD_INT 299
73420: DOUBLE
73421: LESSEQUAL
73422: IFTRUE 73426
73424: GO 73458
73426: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73427: LD_VAR 0 1
73431: PPUSH
73432: LD_VAR 0 2
73436: PPUSH
73437: LD_VAR 0 3
73441: PPUSH
73442: LD_VAR 0 4
73446: PPUSH
73447: LD_VAR 0 5
73451: PPUSH
73452: CALL 27131 0 5
73456: GO 73535
73458: LD_INT 300
73460: DOUBLE
73461: GREATEREQUAL
73462: IFFALSE 73470
73464: LD_INT 399
73466: DOUBLE
73467: LESSEQUAL
73468: IFTRUE 73472
73470: GO 73534
73472: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73473: LD_VAR 0 1
73477: PPUSH
73478: LD_VAR 0 2
73482: PPUSH
73483: LD_VAR 0 3
73487: PPUSH
73488: LD_VAR 0 4
73492: PPUSH
73493: LD_VAR 0 5
73497: PPUSH
73498: LD_VAR 0 6
73502: PPUSH
73503: LD_VAR 0 7
73507: PPUSH
73508: LD_VAR 0 8
73512: PPUSH
73513: LD_VAR 0 9
73517: PPUSH
73518: LD_VAR 0 10
73522: PPUSH
73523: LD_VAR 0 11
73527: PPUSH
73528: CALL 23456 0 11
73532: GO 73535
73534: POP
// end ;
73535: PPOPN 11
73537: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73538: LD_VAR 0 1
73542: PPUSH
73543: LD_VAR 0 2
73547: PPUSH
73548: LD_VAR 0 3
73552: PPUSH
73553: LD_VAR 0 4
73557: PPUSH
73558: LD_VAR 0 5
73562: PPUSH
73563: CALL 26867 0 5
// end ; end_of_file
73567: PPOPN 5
73569: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73570: LD_VAR 0 1
73574: PPUSH
73575: LD_VAR 0 2
73579: PPUSH
73580: LD_VAR 0 3
73584: PPUSH
73585: LD_VAR 0 4
73589: PPUSH
73590: LD_VAR 0 5
73594: PPUSH
73595: LD_VAR 0 6
73599: PPUSH
73600: CALL 11108 0 6
// end ;
73604: PPOPN 6
73606: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73607: LD_INT 0
73609: PPUSH
// begin if not units then
73610: LD_VAR 0 1
73614: NOT
73615: IFFALSE 73619
// exit ;
73617: GO 73619
// end ;
73619: PPOPN 7
73621: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73622: CALL 11012 0 0
// end ;
73626: PPOPN 1
73628: END
