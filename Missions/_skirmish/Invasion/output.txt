// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9175 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// game_started := false ;
2667: LD_ADDR_EXP 7
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// points := 0 ;
2675: LD_ADDR_EXP 2
2679: PUSH
2680: LD_INT 0
2682: ST_TO_ADDR
// waveNumber := 0 ;
2683: LD_ADDR_EXP 5
2687: PUSH
2688: LD_INT 0
2690: ST_TO_ADDR
// timeToNextAttack := 0 ;
2691: LD_ADDR_EXP 4
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// graveyard := [ ] ;
2699: LD_ADDR_EXP 8
2703: PUSH
2704: EMPTY
2705: ST_TO_ADDR
// base_x := 1 ;
2706: LD_ADDR_EXP 9
2710: PUSH
2711: LD_INT 1
2713: ST_TO_ADDR
// base_y := 1 ;
2714: LD_ADDR_EXP 10
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// if difficultyLevel > 2 then
2722: LD_EXP 3
2726: PUSH
2727: LD_INT 2
2729: GREATER
2730: IFFALSE 2745
// SetTech ( 5 , 7 , state_researched ) ;
2732: LD_INT 5
2734: PPUSH
2735: LD_INT 7
2737: PPUSH
2738: LD_INT 2
2740: PPUSH
2741: CALL_OW 322
// if not playerNation then
2745: LD_EXP 6
2749: NOT
2750: IFFALSE 2776
// begin points := 100 ;
2752: LD_ADDR_EXP 2
2756: PUSH
2757: LD_INT 100
2759: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2760: LD_ADDR_EXP 6
2764: PUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_INT 3
2770: PPUSH
2771: CALL_OW 12
2775: ST_TO_ADDR
// end ; your_side := playerNation ;
2776: LD_ADDR_OWVAR 2
2780: PUSH
2781: LD_EXP 6
2785: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2786: LD_OWVAR 2
2790: PPUSH
2791: LD_INT 4
2793: PPUSH
2794: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2798: LD_INT 25
2800: PUSH
2801: LD_INT 20
2803: PUSH
2804: LD_INT 15
2806: PUSH
2807: LD_INT 10
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: PUSH
2816: LD_EXP 3
2820: ARRAY
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 2
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PPUSH
2875: LD_INT 1
2877: PUSH
2878: LD_INT 2
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_INT 88
2891: PPUSH
2892: LD_INT 76
2894: PPUSH
2895: LD_INT 6
2897: PPUSH
2898: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2902: LD_EXP 6
2906: PPUSH
2907: LD_INT 9
2909: PUSH
2910: LD_INT 7
2912: PUSH
2913: LD_INT 5
2915: PUSH
2916: LD_INT 3
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_EXP 3
2929: ARRAY
2930: PPUSH
2931: LD_INT 24
2933: PUSH
2934: LD_INT 16
2936: PUSH
2937: LD_INT 12
2939: PUSH
2940: LD_INT 8
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 88
2957: PPUSH
2958: LD_INT 76
2960: PPUSH
2961: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2965: LD_INT 88
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2975: LD_INT 90
2977: PPUSH
2978: LD_INT 79
2980: PPUSH
2981: LD_OWVAR 2
2985: PPUSH
2986: LD_INT 50
2988: NEG
2989: PPUSH
2990: CALL_OW 330
// if debug then
2994: LD_EXP 1
2998: IFFALSE 3009
// FogOff ( your_side ) ;
3000: LD_OWVAR 2
3004: PPUSH
3005: CALL_OW 344
// end ;
3009: LD_VAR 0 1
3013: RET
// every 0 0$01 trigger game_started do var i ;
3014: LD_EXP 7
3018: IFFALSE 3252
3020: GO 3022
3022: DISABLE
3023: LD_INT 0
3025: PPUSH
// begin while ( game_started ) do
3026: LD_EXP 7
3030: IFFALSE 3252
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3032: LD_INT 22
3034: PUSH
3035: LD_INT 7
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: PUSH
3047: LD_INT 5
3049: LESS
3050: PUSH
3051: LD_EXP 4
3055: PUSH
3056: LD_INT 0
3058: LESSEQUAL
3059: AND
3060: IFFALSE 3243
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3062: LD_INT 22
3064: PUSH
3065: LD_INT 4
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: IFFALSE 3114
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3078: LD_ADDR_VAR 0 1
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_INT 4
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PPUSH
3093: CALL_OW 69
3097: PUSH
3098: FOR_IN
3099: IFFALSE 3112
// RemoveUnit ( i ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 64
3110: GO 3098
3112: POP
3113: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3114: LD_EXP 5
3118: PUSH
3119: LD_INT 3
3121: MOD
3122: PUSH
3123: LD_INT 0
3125: EQUAL
3126: PUSH
3127: LD_EXP 5
3131: PUSH
3132: LD_INT 10
3134: MOD
3135: PUSH
3136: LD_INT 0
3138: EQUAL
3139: OR
3140: PUSH
3141: LD_EXP 5
3145: PUSH
3146: LD_INT 0
3148: GREATER
3149: AND
3150: IFFALSE 3156
// InitBonus ;
3152: CALL 9272 0 0
// if waveNumber mod 10 = 0 then
3156: LD_EXP 5
3160: PUSH
3161: LD_INT 10
3163: MOD
3164: PUSH
3165: LD_INT 0
3167: EQUAL
3168: IFFALSE 3174
// SaveForQuickRestart ;
3170: CALL_OW 22
// if waveNumber = 100 then
3174: LD_EXP 5
3178: PUSH
3179: LD_INT 100
3181: EQUAL
3182: IFFALSE 3195
// begin FogOff ( your_side ) ;
3184: LD_OWVAR 2
3188: PPUSH
3189: CALL_OW 344
// break ;
3193: GO 3252
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3195: LD_ADDR_EXP 4
3199: PUSH
3200: LD_INT 3150
3202: PPUSH
3203: LD_INT 5250
3205: PPUSH
3206: CALL_OW 12
3210: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3211: LD_EXP 4
3215: PPUSH
3216: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3220: LD_ADDR_EXP 5
3224: PUSH
3225: LD_EXP 5
3229: PUSH
3230: LD_INT 1
3232: PLUS
3233: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3234: LD_EXP 5
3238: PPUSH
3239: CALL 4273 0 1
// end ; Wait ( 0 0$01 ) ;
3243: LD_INT 35
3245: PPUSH
3246: CALL_OW 67
// end ;
3250: GO 3026
// end ;
3252: PPOPN 1
3254: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3255: LD_EXP 4
3259: PUSH
3260: LD_INT 0
3262: GREATER
3263: IFFALSE 3283
3265: GO 3267
3267: DISABLE
// begin enable ;
3268: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3269: LD_ADDR_EXP 4
3273: PUSH
3274: LD_EXP 4
3278: PUSH
3279: LD_INT 35
3281: MINUS
3282: ST_TO_ADDR
// end ; end_of_file
3283: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3284: LD_VAR 0 1
3288: PUSH
3289: LD_EXP 13
3293: IN
3294: NOT
3295: IFFALSE 3326
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3297: LD_ADDR_EXP 13
3301: PUSH
3302: LD_EXP 13
3306: PPUSH
3307: LD_EXP 13
3311: PUSH
3312: LD_INT 1
3314: PLUS
3315: PPUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 2
3325: ST_TO_ADDR
// end ;
3326: PPOPN 1
3328: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 26602 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 255
3347: PUSH
3348: LD_OWVAR 2
3352: EQUAL
3353: PUSH
3354: LD_VAR 0 1
3358: PPUSH
3359: CALL_OW 247
3363: PUSH
3364: LD_INT 1
3366: EQUAL
3367: AND
3368: IFFALSE 3399
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3370: LD_ADDR_EXP 8
3374: PUSH
3375: LD_EXP 8
3379: PPUSH
3380: LD_EXP 8
3384: PUSH
3385: LD_INT 1
3387: PLUS
3388: PPUSH
3389: LD_VAR 0 1
3393: PPUSH
3394: CALL_OW 2
3398: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3399: LD_VAR 0 1
3403: PPUSH
3404: CALL_OW 255
3408: PUSH
3409: LD_INT 7
3411: EQUAL
3412: IFFALSE 3786
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3414: LD_VAR 0 1
3418: PUSH
3419: LD_INT 34
3421: PUSH
3422: LD_INT 91
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: PPUSH
3429: CALL_OW 69
3433: IN
3434: IFFALSE 3479
// begin if Rand ( 1 , 100 ) <= 70 then
3436: LD_INT 1
3438: PPUSH
3439: LD_INT 100
3441: PPUSH
3442: CALL_OW 12
3446: PUSH
3447: LD_INT 70
3449: LESSEQUAL
3450: IFFALSE 3479
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: CALL_OW 250
3461: PPUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 251
3471: PPUSH
3472: LD_INT 10
3474: PPUSH
3475: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3479: LD_VAR 0 1
3483: PPUSH
3484: CALL_OW 247
3488: PUSH
3489: LD_INT 1
3491: DOUBLE
3492: EQUAL
3493: IFTRUE 3497
3495: GO 3631
3497: POP
// begin case GetClass ( un ) of class_apeman :
3498: LD_VAR 0 1
3502: PPUSH
3503: CALL_OW 257
3507: PUSH
3508: LD_INT 12
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3526
3516: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3517: LD_INT 2
3519: PPUSH
3520: CALL 471 0 1
3524: GO 3629
3526: LD_INT 15
3528: DOUBLE
3529: EQUAL
3530: IFTRUE 3534
3532: GO 3544
3534: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3535: LD_INT 5
3537: PPUSH
3538: CALL 471 0 1
3542: GO 3629
3544: LD_INT 17
3546: DOUBLE
3547: EQUAL
3548: IFTRUE 3552
3550: GO 3562
3552: POP
// AddPoints ( 30 ) ; class_soldier :
3553: LD_INT 30
3555: PPUSH
3556: CALL 471 0 1
3560: GO 3629
3562: LD_INT 1
3564: DOUBLE
3565: EQUAL
3566: IFTRUE 3570
3568: GO 3580
3570: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3571: LD_INT 50
3573: PPUSH
3574: CALL 471 0 1
3578: GO 3629
3580: LD_INT 9
3582: DOUBLE
3583: EQUAL
3584: IFTRUE 3600
3586: LD_INT 5
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3600
3592: LD_INT 8
3594: DOUBLE
3595: EQUAL
3596: IFTRUE 3600
3598: GO 3610
3600: POP
// AddPoints ( 75 ) ; class_mechanic :
3601: LD_INT 75
3603: PPUSH
3604: CALL 471 0 1
3608: GO 3629
3610: LD_INT 3
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3618
3616: GO 3628
3618: POP
// AddPoints ( 60 ) ; end ;
3619: LD_INT 60
3621: PPUSH
3622: CALL 471 0 1
3626: GO 3629
3628: POP
// end ; unit_vehicle :
3629: GO 3786
3631: LD_INT 2
3633: DOUBLE
3634: EQUAL
3635: IFTRUE 3639
3637: GO 3785
3639: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 265
3649: PUSH
3650: LD_INT 12
3652: DOUBLE
3653: EQUAL
3654: IFTRUE 3670
3656: LD_INT 1
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3670
3662: LD_INT 11
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3680
3670: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3671: LD_INT 100
3673: PPUSH
3674: CALL 471 0 1
3678: GO 3783
3680: LD_INT 13
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3718
3686: LD_INT 14
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3718
3692: LD_INT 2
3694: DOUBLE
3695: EQUAL
3696: IFTRUE 3718
3698: LD_INT 3
3700: DOUBLE
3701: EQUAL
3702: IFTRUE 3718
3704: LD_INT 21
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3718
3710: LD_INT 22
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3718
3716: GO 3728
3718: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3719: LD_INT 250
3721: PPUSH
3722: CALL 471 0 1
3726: GO 3783
3728: LD_INT 4
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3754
3734: LD_INT 5
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3754
3740: LD_INT 23
3742: DOUBLE
3743: EQUAL
3744: IFTRUE 3754
3746: LD_INT 24
3748: DOUBLE
3749: EQUAL
3750: IFTRUE 3754
3752: GO 3764
3754: POP
// AddPoints ( 500 ) ; 25 :
3755: LD_INT 500
3757: PPUSH
3758: CALL 471 0 1
3762: GO 3783
3764: LD_INT 25
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3782
3772: POP
// AddPoints ( 1250 ) ; end ;
3773: LD_INT 1250
3775: PPUSH
3776: CALL 471 0 1
3780: GO 3783
3782: POP
// end ; end ;
3783: GO 3786
3785: POP
// end ; end ;
3786: PPOPN 1
3788: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3789: LD_VAR 0 1
3793: PPUSH
3794: CALL_OW 266
3798: PUSH
3799: LD_INT 0
3801: EQUAL
3802: IFFALSE 3852
// begin base_x := GetX ( b ) ;
3804: LD_ADDR_EXP 9
3808: PUSH
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 250
3818: ST_TO_ADDR
// base_y := GetY ( b ) ;
3819: LD_ADDR_EXP 10
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 251
3833: ST_TO_ADDR
// base := b ;
3834: LD_ADDR_EXP 11
3838: PUSH
3839: LD_VAR 0 1
3843: ST_TO_ADDR
// game_started := true ;
3844: LD_ADDR_EXP 7
3848: PUSH
3849: LD_INT 1
3851: ST_TO_ADDR
// end ; end ;
3852: PPOPN 1
3854: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3855: LD_VAR 0 1
3859: PPUSH
3860: CALL_OW 255
3864: PUSH
3865: LD_OWVAR 2
3869: EQUAL
3870: IFFALSE 3874
// exit ;
3872: GO 4021
// if GetType ( un ) = unit_vehicle then
3874: LD_VAR 0 1
3878: PPUSH
3879: CALL_OW 247
3883: PUSH
3884: LD_INT 2
3886: EQUAL
3887: IFFALSE 3940
// begin KillUnit ( un ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 248
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: PUSH
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 264
3921: PUSH
3922: LD_INT 49
3924: PUSH
3925: EMPTY
3926: LIST
3927: IN
3928: OR
3929: IFFALSE 3940
// ExplodeVehicle ( un ) ;
3931: LD_VAR 0 1
3935: PPUSH
3936: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3940: LD_VAR 0 1
3944: PPUSH
3945: CALL_OW 247
3949: PUSH
3950: LD_INT 1
3952: EQUAL
3953: IFFALSE 4021
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 248
3964: PUSH
3965: LD_INT 2
3967: EQUAL
3968: PUSH
3969: LD_INT 5
3971: PPUSH
3972: LD_INT 7
3974: PPUSH
3975: CALL_OW 321
3979: PUSH
3980: LD_INT 2
3982: NONEQUAL
3983: AND
3984: PUSH
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 248
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: IN
4009: OR
4010: IFFALSE 4021
// KillUnit ( un ) ;
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 66
// end ; end ;
4021: PPOPN 1
4023: END
// every 0 0$1 do
4024: GO 4026
4026: DISABLE
// begin enable ;
4027: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4028: LD_INT 4
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 22
4036: PUSH
4037: LD_OWVAR 2
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 513
// end ;
4050: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4051: LD_EXP 7
4055: PUSH
4056: LD_INT 22
4058: PUSH
4059: LD_OWVAR 2
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: LD_INT 1
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PPUSH
4082: CALL_OW 69
4086: PUSH
4087: LD_INT 0
4089: EQUAL
4090: AND
4091: IFFALSE 4103
4093: GO 4095
4095: DISABLE
// YouLost ( die ) ;
4096: LD_STRING die
4098: PPUSH
4099: CALL_OW 104
4103: END
// every 0 0$21 trigger tick <= 15 15$00 do
4104: LD_OWVAR 1
4108: PUSH
4109: LD_INT 31500
4111: LESSEQUAL
4112: IFFALSE 4139
4114: GO 4116
4116: DISABLE
// begin enable ;
4117: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4118: LD_INT 1
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: CALL_OW 12
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: CALL_OW 55
// end ;
4139: END
// every 0 0$51 trigger tick > 15 15$00 do
4140: LD_OWVAR 1
4144: PUSH
4145: LD_INT 31500
4147: GREATER
4148: IFFALSE 4195
4150: GO 4152
4152: DISABLE
// begin enable ;
4153: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4154: LD_INT 22
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 69
4168: PUSH
4169: LD_INT 0
4171: EQUAL
4172: IFFALSE 4195
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4174: LD_INT 1
4176: PPUSH
4177: LD_INT 5
4179: PPUSH
4180: CALL_OW 12
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: LD_INT 1
4190: PPUSH
4191: CALL_OW 55
// end ;
4195: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 308
4208: IFFALSE 4219
// KillUnit ( building ) ;
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 66
// end ;
4219: PPOPN 2
4221: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_VAR 0 2
4231: PPUSH
4232: LD_VAR 0 3
4236: PPUSH
4237: CALL 26698 0 3
// end ;
4241: PPOPN 3
4243: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_VAR 0 2
4253: PPUSH
4254: CALL 26722 0 2
// end ;
4258: PPOPN 2
4260: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4261: LD_VAR 0 1
4265: PPUSH
4266: CALL 26706 0 1
// end ; end_of_file
4270: PPOPN 1
4272: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
4279: PPUSH
4280: PPUSH
4281: PPUSH
4282: PPUSH
4283: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4284: LD_ADDR_VAR 0 7
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: LD_INT 2
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: ST_TO_ADDR
// uc_side := 7 ;
4299: LD_ADDR_OWVAR 20
4303: PUSH
4304: LD_INT 7
4306: ST_TO_ADDR
// l := 0 ;
4307: LD_ADDR_VAR 0 9
4311: PUSH
4312: LD_INT 0
4314: ST_TO_ADDR
// case num of 1 :
4315: LD_VAR 0 1
4319: PUSH
4320: LD_INT 1
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4347
4328: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: LD_INT 12
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: CALL 6676 0 2
4344: ST_TO_ADDR
4345: GO 6485
4347: LD_INT 2
4349: DOUBLE
4350: EQUAL
4351: IFTRUE 4355
4353: GO 4374
4355: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 12
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL 6747 0 2
4371: ST_TO_ADDR
4372: GO 6485
4374: LD_INT 3
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4401
4382: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: LD_INT 12
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: CALL 6818 0 2
4398: ST_TO_ADDR
4399: GO 6485
4401: LD_INT 4
4403: DOUBLE
4404: EQUAL
4405: IFTRUE 4409
4407: GO 4428
4409: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4410: LD_ADDR_VAR 0 2
4414: PUSH
4415: LD_INT 7
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL 6897 0 2
4425: ST_TO_ADDR
4426: GO 6485
4428: LD_INT 5
4430: DOUBLE
4431: EQUAL
4432: IFTRUE 4436
4434: GO 4455
4436: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: LD_INT 7
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: CALL 7293 0 2
4452: ST_TO_ADDR
4453: GO 6485
4455: LD_INT 6
4457: DOUBLE
4458: EQUAL
4459: IFTRUE 4463
4461: GO 4482
4463: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: LD_INT 6
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL 7713 0 2
4479: ST_TO_ADDR
4480: GO 6485
4482: LD_INT 7
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4509
4490: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 15
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL 8133 0 2
4506: ST_TO_ADDR
4507: GO 6485
4509: LD_INT 8
4511: DOUBLE
4512: EQUAL
4513: IFTRUE 4517
4515: GO 4536
4517: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 7
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: CALL 8234 0 2
4533: ST_TO_ADDR
4534: GO 6485
4536: LD_INT 9
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4575
4544: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: LD_INT 4
4552: PPUSH
4553: LD_INT 1
4555: PPUSH
4556: CALL 8234 0 2
4560: PUSH
4561: LD_INT 7
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: CALL 7293 0 2
4571: ADD
4572: ST_TO_ADDR
4573: GO 6485
4575: LD_INT 10
4577: DOUBLE
4578: EQUAL
4579: IFTRUE 4583
4581: GO 4614
4583: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4584: LD_ADDR_VAR 0 2
4588: PUSH
4589: LD_INT 9
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: CALL 8133 0 2
4599: PUSH
4600: LD_INT 14
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL 6818 0 2
4610: ADD
4611: ST_TO_ADDR
4612: GO 6485
4614: LD_INT 11
4616: DOUBLE
4617: EQUAL
4618: IFTRUE 4670
4620: LD_INT 21
4622: DOUBLE
4623: EQUAL
4624: IFTRUE 4670
4626: LD_INT 31
4628: DOUBLE
4629: EQUAL
4630: IFTRUE 4670
4632: LD_INT 41
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4670
4638: LD_INT 51
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4670
4644: LD_INT 61
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4670
4650: LD_INT 71
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4670
4656: LD_INT 81
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4670
4662: LD_INT 91
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4779
4670: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_INT 20
4678: PUSH
4679: LD_INT 30
4681: PUSH
4682: LD_INT 40
4684: PUSH
4685: LD_INT 45
4687: PUSH
4688: LD_INT 50
4690: PUSH
4691: LD_INT 60
4693: PUSH
4694: LD_INT 70
4696: PUSH
4697: LD_INT 80
4699: PUSH
4700: LD_INT 100
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: PUSH
4714: LD_VAR 0 1
4718: PUSH
4719: LD_INT 10
4721: DIV
4722: ARRAY
4723: PPUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: LD_INT 6
4738: PUSH
4739: LD_INT 7
4741: PUSH
4742: LD_INT 8
4744: PUSH
4745: LD_INT 9
4747: PUSH
4748: LD_INT 10
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: LD_INT 10
4769: DIV
4770: ARRAY
4771: PPUSH
4772: CALL 6676 0 2
4776: ST_TO_ADDR
4777: GO 6485
4779: LD_INT 12
4781: DOUBLE
4782: EQUAL
4783: IFTRUE 4835
4785: LD_INT 22
4787: DOUBLE
4788: EQUAL
4789: IFTRUE 4835
4791: LD_INT 32
4793: DOUBLE
4794: EQUAL
4795: IFTRUE 4835
4797: LD_INT 42
4799: DOUBLE
4800: EQUAL
4801: IFTRUE 4835
4803: LD_INT 52
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4835
4809: LD_INT 62
4811: DOUBLE
4812: EQUAL
4813: IFTRUE 4835
4815: LD_INT 72
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4835
4821: LD_INT 82
4823: DOUBLE
4824: EQUAL
4825: IFTRUE 4835
4827: LD_INT 92
4829: DOUBLE
4830: EQUAL
4831: IFTRUE 4835
4833: GO 4944
4835: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: LD_INT 16
4843: PUSH
4844: LD_INT 21
4846: PUSH
4847: LD_INT 28
4849: PUSH
4850: LD_INT 33
4852: PUSH
4853: LD_INT 39
4855: PUSH
4856: LD_INT 46
4858: PUSH
4859: LD_INT 56
4861: PUSH
4862: LD_INT 66
4864: PUSH
4865: LD_INT 80
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_VAR 0 1
4883: PUSH
4884: LD_INT 10
4886: DIV
4887: ARRAY
4888: PPUSH
4889: LD_INT 2
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: LD_INT 5
4900: PUSH
4901: LD_INT 6
4903: PUSH
4904: LD_INT 7
4906: PUSH
4907: LD_INT 8
4909: PUSH
4910: LD_INT 9
4912: PUSH
4913: LD_INT 10
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_VAR 0 1
4931: PUSH
4932: LD_INT 10
4934: DIV
4935: ARRAY
4936: PPUSH
4937: CALL 6747 0 2
4941: ST_TO_ADDR
4942: GO 6485
4944: LD_INT 13
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 5000
4950: LD_INT 23
4952: DOUBLE
4953: EQUAL
4954: IFTRUE 5000
4956: LD_INT 33
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 5000
4962: LD_INT 43
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 5000
4968: LD_INT 53
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 5000
4974: LD_INT 63
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 5000
4980: LD_INT 73
4982: DOUBLE
4983: EQUAL
4984: IFTRUE 5000
4986: LD_INT 83
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 5000
4992: LD_INT 93
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5109
5000: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: LD_INT 14
5008: PUSH
5009: LD_INT 18
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 27
5017: PUSH
5018: LD_INT 33
5020: PUSH
5021: LD_INT 39
5023: PUSH
5024: LD_INT 44
5026: PUSH
5027: LD_INT 57
5029: PUSH
5030: LD_INT 65
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: LD_VAR 0 1
5048: PUSH
5049: LD_INT 10
5051: DIV
5052: ARRAY
5053: PPUSH
5054: LD_INT 2
5056: PUSH
5057: LD_INT 3
5059: PUSH
5060: LD_INT 4
5062: PUSH
5063: LD_INT 5
5065: PUSH
5066: LD_INT 6
5068: PUSH
5069: LD_INT 7
5071: PUSH
5072: LD_INT 8
5074: PUSH
5075: LD_INT 9
5077: PUSH
5078: LD_INT 10
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_VAR 0 1
5096: PUSH
5097: LD_INT 10
5099: DIV
5100: ARRAY
5101: PPUSH
5102: CALL 6818 0 2
5106: ST_TO_ADDR
5107: GO 6485
5109: LD_INT 14
5111: DOUBLE
5112: EQUAL
5113: IFTRUE 5165
5115: LD_INT 24
5117: DOUBLE
5118: EQUAL
5119: IFTRUE 5165
5121: LD_INT 34
5123: DOUBLE
5124: EQUAL
5125: IFTRUE 5165
5127: LD_INT 44
5129: DOUBLE
5130: EQUAL
5131: IFTRUE 5165
5133: LD_INT 54
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5165
5139: LD_INT 64
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5165
5145: LD_INT 74
5147: DOUBLE
5148: EQUAL
5149: IFTRUE 5165
5151: LD_INT 84
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5165
5157: LD_INT 94
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5274
5165: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5166: LD_ADDR_VAR 0 2
5170: PUSH
5171: LD_INT 9
5173: PUSH
5174: LD_INT 15
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 30
5182: PUSH
5183: LD_INT 39
5185: PUSH
5186: LD_INT 45
5188: PUSH
5189: LD_INT 56
5191: PUSH
5192: LD_INT 60
5194: PUSH
5195: LD_INT 65
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_VAR 0 1
5213: PUSH
5214: LD_INT 10
5216: DIV
5217: ARRAY
5218: PPUSH
5219: LD_INT 2
5221: PUSH
5222: LD_INT 3
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 6
5233: PUSH
5234: LD_INT 7
5236: PUSH
5237: LD_INT 8
5239: PUSH
5240: LD_INT 9
5242: PUSH
5243: LD_INT 10
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: LD_VAR 0 1
5261: PUSH
5262: LD_INT 10
5264: DIV
5265: ARRAY
5266: PPUSH
5267: CALL 6897 0 2
5271: ST_TO_ADDR
5272: GO 6485
5274: LD_INT 15
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5330
5280: LD_INT 25
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5330
5286: LD_INT 35
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5330
5292: LD_INT 45
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5330
5298: LD_INT 55
5300: DOUBLE
5301: EQUAL
5302: IFTRUE 5330
5304: LD_INT 65
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5330
5310: LD_INT 75
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5330
5316: LD_INT 85
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5330
5322: LD_INT 95
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5439
5330: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: LD_INT 6
5338: PUSH
5339: LD_INT 11
5341: PUSH
5342: LD_INT 15
5344: PUSH
5345: LD_INT 20
5347: PUSH
5348: LD_INT 25
5350: PUSH
5351: LD_INT 30
5353: PUSH
5354: LD_INT 35
5356: PUSH
5357: LD_INT 40
5359: PUSH
5360: LD_INT 45
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 10
5381: DIV
5382: ARRAY
5383: PPUSH
5384: LD_INT 2
5386: PUSH
5387: LD_INT 3
5389: PUSH
5390: LD_INT 4
5392: PUSH
5393: LD_INT 5
5395: PUSH
5396: LD_INT 6
5398: PUSH
5399: LD_INT 7
5401: PUSH
5402: LD_INT 8
5404: PUSH
5405: LD_INT 9
5407: PUSH
5408: LD_INT 10
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_VAR 0 1
5426: PUSH
5427: LD_INT 10
5429: DIV
5430: ARRAY
5431: PPUSH
5432: CALL 7293 0 2
5436: ST_TO_ADDR
5437: GO 6485
5439: LD_INT 16
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5495
5445: LD_INT 26
5447: DOUBLE
5448: EQUAL
5449: IFTRUE 5495
5451: LD_INT 36
5453: DOUBLE
5454: EQUAL
5455: IFTRUE 5495
5457: LD_INT 46
5459: DOUBLE
5460: EQUAL
5461: IFTRUE 5495
5463: LD_INT 56
5465: DOUBLE
5466: EQUAL
5467: IFTRUE 5495
5469: LD_INT 66
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5495
5475: LD_INT 76
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5495
5481: LD_INT 86
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5495
5487: LD_INT 96
5489: DOUBLE
5490: EQUAL
5491: IFTRUE 5495
5493: GO 5604
5495: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_INT 9
5503: PUSH
5504: LD_INT 12
5506: PUSH
5507: LD_INT 15
5509: PUSH
5510: LD_INT 18
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: LD_INT 27
5521: PUSH
5522: LD_INT 30
5524: PUSH
5525: LD_INT 33
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: LD_VAR 0 1
5543: PUSH
5544: LD_INT 10
5546: DIV
5547: ARRAY
5548: PPUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 5
5560: PUSH
5561: LD_INT 6
5563: PUSH
5564: LD_INT 7
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: LD_INT 10
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: PUSH
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 10
5594: DIV
5595: ARRAY
5596: PPUSH
5597: CALL 7713 0 2
5601: ST_TO_ADDR
5602: GO 6485
5604: LD_INT 17
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5660
5610: LD_INT 27
5612: DOUBLE
5613: EQUAL
5614: IFTRUE 5660
5616: LD_INT 37
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5660
5622: LD_INT 47
5624: DOUBLE
5625: EQUAL
5626: IFTRUE 5660
5628: LD_INT 57
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5660
5634: LD_INT 67
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5660
5640: LD_INT 77
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5660
5646: LD_INT 87
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5660
5652: LD_INT 97
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5660
5658: GO 5769
5660: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5661: LD_ADDR_VAR 0 2
5665: PUSH
5666: LD_INT 14
5668: PUSH
5669: LD_INT 16
5671: PUSH
5672: LD_INT 18
5674: PUSH
5675: LD_INT 22
5677: PUSH
5678: LD_INT 24
5680: PUSH
5681: LD_INT 26
5683: PUSH
5684: LD_INT 28
5686: PUSH
5687: LD_INT 32
5689: PUSH
5690: LD_INT 35
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 10
5711: DIV
5712: ARRAY
5713: PPUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 4
5722: PUSH
5723: LD_INT 5
5725: PUSH
5726: LD_INT 6
5728: PUSH
5729: LD_INT 7
5731: PUSH
5732: LD_INT 8
5734: PUSH
5735: LD_INT 9
5737: PUSH
5738: LD_INT 10
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_VAR 0 1
5756: PUSH
5757: LD_INT 10
5759: DIV
5760: ARRAY
5761: PPUSH
5762: CALL 8133 0 2
5766: ST_TO_ADDR
5767: GO 6485
5769: LD_INT 18
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5825
5775: LD_INT 28
5777: DOUBLE
5778: EQUAL
5779: IFTRUE 5825
5781: LD_INT 38
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5825
5787: LD_INT 48
5789: DOUBLE
5790: EQUAL
5791: IFTRUE 5825
5793: LD_INT 58
5795: DOUBLE
5796: EQUAL
5797: IFTRUE 5825
5799: LD_INT 68
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5825
5805: LD_INT 78
5807: DOUBLE
5808: EQUAL
5809: IFTRUE 5825
5811: LD_INT 88
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5825
5817: LD_INT 98
5819: DOUBLE
5820: EQUAL
5821: IFTRUE 5825
5823: GO 5934
5825: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: LD_INT 9
5833: PUSH
5834: LD_INT 12
5836: PUSH
5837: LD_INT 15
5839: PUSH
5840: LD_INT 18
5842: PUSH
5843: LD_INT 21
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: LD_INT 27
5851: PUSH
5852: LD_INT 30
5854: PUSH
5855: LD_INT 33
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: LD_VAR 0 1
5873: PUSH
5874: LD_INT 10
5876: DIV
5877: ARRAY
5878: PPUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: LD_INT 7
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: LD_INT 9
5902: PUSH
5903: LD_INT 10
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_VAR 0 1
5921: PUSH
5922: LD_INT 10
5924: DIV
5925: ARRAY
5926: PPUSH
5927: CALL 8234 0 2
5931: ST_TO_ADDR
5932: GO 6485
5934: LD_INT 19
5936: DOUBLE
5937: EQUAL
5938: IFTRUE 5990
5940: LD_INT 29
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5990
5946: LD_INT 39
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5990
5952: LD_INT 49
5954: DOUBLE
5955: EQUAL
5956: IFTRUE 5990
5958: LD_INT 59
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5990
5964: LD_INT 69
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5990
5970: LD_INT 79
5972: DOUBLE
5973: EQUAL
5974: IFTRUE 5990
5976: LD_INT 89
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5990
5982: LD_INT 99
5984: DOUBLE
5985: EQUAL
5986: IFTRUE 5990
5988: GO 6201
5990: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5991: LD_ADDR_VAR 0 2
5995: PUSH
5996: LD_INT 4
5998: PUSH
5999: LD_INT 7
6001: PUSH
6002: LD_INT 10
6004: PUSH
6005: LD_INT 13
6007: PUSH
6008: LD_INT 14
6010: PUSH
6011: LD_INT 17
6013: PUSH
6014: LD_INT 19
6016: PUSH
6017: LD_INT 21
6019: PUSH
6020: LD_INT 23
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: LD_INT 10
6041: DIV
6042: ARRAY
6043: PPUSH
6044: LD_INT 2
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: LD_INT 4
6052: PUSH
6053: LD_INT 5
6055: PUSH
6056: LD_INT 6
6058: PUSH
6059: LD_INT 7
6061: PUSH
6062: LD_INT 8
6064: PUSH
6065: LD_INT 9
6067: PUSH
6068: LD_INT 10
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: PUSH
6082: LD_VAR 0 1
6086: PUSH
6087: LD_INT 10
6089: DIV
6090: ARRAY
6091: PPUSH
6092: CALL 8234 0 2
6096: PUSH
6097: LD_INT 4
6099: PUSH
6100: LD_INT 7
6102: PUSH
6103: LD_INT 10
6105: PUSH
6106: LD_INT 13
6108: PUSH
6109: LD_INT 14
6111: PUSH
6112: LD_INT 17
6114: PUSH
6115: LD_INT 19
6117: PUSH
6118: LD_INT 22
6120: PUSH
6121: LD_INT 25
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_VAR 0 1
6139: PUSH
6140: LD_INT 10
6142: DIV
6143: ARRAY
6144: PPUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: LD_INT 6
6159: PUSH
6160: LD_INT 7
6162: PUSH
6163: LD_INT 8
6165: PUSH
6166: LD_INT 9
6168: PUSH
6169: LD_INT 10
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_VAR 0 1
6187: PUSH
6188: LD_INT 10
6190: DIV
6191: ARRAY
6192: PPUSH
6193: CALL 7293 0 2
6197: ADD
6198: ST_TO_ADDR
6199: GO 6485
6201: LD_INT 20
6203: DOUBLE
6204: EQUAL
6205: IFTRUE 6257
6207: LD_INT 30
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6257
6213: LD_INT 40
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6257
6219: LD_INT 50
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6257
6225: LD_INT 60
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6257
6231: LD_INT 70
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6257
6237: LD_INT 80
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6257
6243: LD_INT 90
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6257
6249: LD_INT 100
6251: DOUBLE
6252: EQUAL
6253: IFTRUE 6257
6255: GO 6484
6257: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6258: LD_ADDR_VAR 0 2
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 7
6268: PUSH
6269: LD_INT 10
6271: PUSH
6272: LD_INT 13
6274: PUSH
6275: LD_INT 14
6277: PUSH
6278: LD_INT 17
6280: PUSH
6281: LD_INT 19
6283: PUSH
6284: LD_INT 21
6286: PUSH
6287: LD_INT 23
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 10
6308: DIVREAL
6309: PUSH
6310: LD_INT 1
6312: MINUS
6313: ARRAY
6314: PPUSH
6315: LD_INT 2
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: LD_INT 7
6332: PUSH
6333: LD_INT 8
6335: PUSH
6336: LD_INT 9
6338: PUSH
6339: LD_INT 10
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 10
6360: DIVREAL
6361: PUSH
6362: LD_INT 1
6364: MINUS
6365: ARRAY
6366: PPUSH
6367: CALL 8133 0 2
6371: PUSH
6372: LD_INT 4
6374: PUSH
6375: LD_INT 7
6377: PUSH
6378: LD_INT 10
6380: PUSH
6381: LD_INT 13
6383: PUSH
6384: LD_INT 14
6386: PUSH
6387: LD_INT 17
6389: PUSH
6390: LD_INT 19
6392: PUSH
6393: LD_INT 22
6395: PUSH
6396: LD_INT 25
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 10
6417: DIVREAL
6418: PUSH
6419: LD_INT 1
6421: MINUS
6422: ARRAY
6423: PPUSH
6424: LD_INT 2
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: LD_INT 6
6438: PUSH
6439: LD_INT 7
6441: PUSH
6442: LD_INT 8
6444: PUSH
6445: LD_INT 9
6447: PUSH
6448: LD_INT 10
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: LD_VAR 0 1
6466: PUSH
6467: LD_INT 10
6469: DIVREAL
6470: PUSH
6471: LD_INT 1
6473: MINUS
6474: ARRAY
6475: PPUSH
6476: CALL 7713 0 2
6480: ADD
6481: ST_TO_ADDR
6482: GO 6485
6484: POP
// for i in result do
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: LD_VAR 0 2
6494: PUSH
6495: FOR_IN
6496: IFFALSE 6669
// begin a := rand ( 1 , 2 ) ;
6498: LD_ADDR_VAR 0 8
6502: PUSH
6503: LD_INT 1
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: CALL_OW 12
6513: ST_TO_ADDR
// if a = 1 then
6514: LD_VAR 0 8
6518: PUSH
6519: LD_INT 1
6521: EQUAL
6522: IFFALSE 6538
// SetDir ( i , 3 ) else
6524: LD_VAR 0 3
6528: PPUSH
6529: LD_INT 3
6531: PPUSH
6532: CALL_OW 233
6536: GO 6550
// SetDir ( i , 5 ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_INT 5
6545: PPUSH
6546: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_VAR 0 7
6559: PUSH
6560: LD_VAR 0 8
6564: ARRAY
6565: PPUSH
6566: LD_INT 0
6568: PPUSH
6569: CALL_OW 49
// if GetControl ( i ) = control_manual then
6573: LD_VAR 0 3
6577: PPUSH
6578: CALL_OW 263
6582: PUSH
6583: LD_INT 1
6585: EQUAL
6586: IFFALSE 6632
// begin uc_nation := GetNation ( i ) ;
6588: LD_ADDR_OWVAR 21
6592: PUSH
6593: LD_VAR 0 3
6597: PPUSH
6598: CALL_OW 248
6602: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6603: LD_INT 0
6605: PPUSH
6606: LD_INT 3
6608: PPUSH
6609: LD_VAR 0 5
6613: PPUSH
6614: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6618: CALL_OW 44
6622: PPUSH
6623: LD_VAR 0 3
6627: PPUSH
6628: CALL_OW 52
// end ; l := l + 1 ;
6632: LD_ADDR_VAR 0 9
6636: PUSH
6637: LD_VAR 0 9
6641: PUSH
6642: LD_INT 1
6644: PLUS
6645: ST_TO_ADDR
// if l mod 10 = 0 then
6646: LD_VAR 0 9
6650: PUSH
6651: LD_INT 10
6653: MOD
6654: PUSH
6655: LD_INT 0
6657: EQUAL
6658: IFFALSE 6667
// Wait ( 0 0$02 ) ;
6660: LD_INT 70
6662: PPUSH
6663: CALL_OW 67
// end ;
6667: GO 6495
6669: POP
6670: POP
// end ;
6671: LD_VAR 0 2
6675: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6676: LD_INT 0
6678: PPUSH
6679: PPUSH
6680: PPUSH
// uc_nation := nation_nature ;
6681: LD_ADDR_OWVAR 21
6685: PUSH
6686: LD_INT 0
6688: ST_TO_ADDR
// for i = 1 to n do
6689: LD_ADDR_VAR 0 4
6693: PUSH
6694: DOUBLE
6695: LD_INT 1
6697: DEC
6698: ST_TO_ADDR
6699: LD_VAR 0 1
6703: PUSH
6704: FOR_TO
6705: IFFALSE 6740
// begin PrepareHuman ( false , class_apeman , skill ) ;
6707: LD_INT 0
6709: PPUSH
6710: LD_INT 12
6712: PPUSH
6713: LD_VAR 0 2
6717: PPUSH
6718: CALL_OW 380
// result := result ^ CreateHuman ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_VAR 0 3
6731: PUSH
6732: CALL_OW 44
6736: ADD
6737: ST_TO_ADDR
// end ;
6738: GO 6704
6740: POP
6741: POP
// end ;
6742: LD_VAR 0 3
6746: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6747: LD_INT 0
6749: PPUSH
6750: PPUSH
6751: PPUSH
// uc_nation := nation_nature ;
6752: LD_ADDR_OWVAR 21
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// for i = 1 to n do
6760: LD_ADDR_VAR 0 4
6764: PUSH
6765: DOUBLE
6766: LD_INT 1
6768: DEC
6769: ST_TO_ADDR
6770: LD_VAR 0 1
6774: PUSH
6775: FOR_TO
6776: IFFALSE 6811
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6778: LD_INT 0
6780: PPUSH
6781: LD_INT 15
6783: PPUSH
6784: LD_VAR 0 2
6788: PPUSH
6789: CALL_OW 380
// result := result ^ CreateHuman ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_VAR 0 3
6802: PUSH
6803: CALL_OW 44
6807: ADD
6808: ST_TO_ADDR
// end ;
6809: GO 6775
6811: POP
6812: POP
// end ;
6813: LD_VAR 0 3
6817: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6818: LD_INT 0
6820: PPUSH
6821: PPUSH
6822: PPUSH
// for i = 1 to n do
6823: LD_ADDR_VAR 0 4
6827: PUSH
6828: DOUBLE
6829: LD_INT 1
6831: DEC
6832: ST_TO_ADDR
6833: LD_VAR 0 1
6837: PUSH
6838: FOR_TO
6839: IFFALSE 6890
// begin uc_nation := rand ( 1 , 3 ) ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_INT 3
6851: PPUSH
6852: CALL_OW 12
6856: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6857: LD_INT 0
6859: PPUSH
6860: LD_INT 1
6862: PPUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 380
// result := result ^ CreateHuman ;
6872: LD_ADDR_VAR 0 3
6876: PUSH
6877: LD_VAR 0 3
6881: PUSH
6882: CALL_OW 44
6886: ADD
6887: ST_TO_ADDR
// end ;
6888: GO 6838
6890: POP
6891: POP
// end ;
6892: LD_VAR 0 3
6896: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
// for i = 1 to n do
6906: LD_ADDR_VAR 0 4
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_VAR 0 1
6920: PUSH
6921: FOR_TO
6922: IFFALSE 7286
// begin uc_nation := rand ( 1 , 3 ) ;
6924: LD_ADDR_OWVAR 21
6928: PUSH
6929: LD_INT 1
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: CALL_OW 12
6939: ST_TO_ADDR
// case uc_nation of 1 :
6940: LD_OWVAR 21
6944: PUSH
6945: LD_INT 1
6947: DOUBLE
6948: EQUAL
6949: IFTRUE 6953
6951: GO 7016
6953: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6954: LD_ADDR_VAR 0 6
6958: PUSH
6959: LD_INT 1
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6969: LD_ADDR_VAR 0 7
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6984: LD_ADDR_VAR 0 8
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
6999: LD_ADDR_VAR 0 9
7003: PUSH
7004: LD_INT 1
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: ST_TO_ADDR
// end ; 2 :
7014: GO 7151
7016: LD_INT 2
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7087
7024: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_INT 12
7032: PUSH
7033: LD_INT 11
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7040: LD_ADDR_VAR 0 7
7044: PUSH
7045: LD_INT 23
7047: PUSH
7048: LD_INT 24
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7055: LD_ADDR_VAR 0 8
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 5
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_INT 1
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
// end ; 3 :
7085: GO 7151
7087: LD_INT 3
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7150
7095: POP
// begin chassis := [ ru_medium_wheeled ] ;
7096: LD_ADDR_VAR 0 6
7100: PUSH
7101: LD_INT 21
7103: PUSH
7104: EMPTY
7105: LIST
7106: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7107: LD_ADDR_VAR 0 7
7111: PUSH
7112: LD_INT 42
7114: PUSH
7115: LD_INT 44
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7122: LD_ADDR_VAR 0 8
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: LD_INT 3
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7137: LD_ADDR_VAR 0 9
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: ST_TO_ADDR
// end ; end ;
7148: GO 7151
7150: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7151: LD_ADDR_OWVAR 37
7155: PUSH
7156: LD_VAR 0 6
7160: PUSH
7161: LD_INT 1
7163: PPUSH
7164: LD_VAR 0 6
7168: PPUSH
7169: CALL_OW 12
7173: ARRAY
7174: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7175: LD_ADDR_OWVAR 39
7179: PUSH
7180: LD_VAR 0 9
7184: PUSH
7185: LD_INT 1
7187: PPUSH
7188: LD_VAR 0 9
7192: PPUSH
7193: CALL_OW 12
7197: ARRAY
7198: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7199: LD_ADDR_OWVAR 38
7203: PUSH
7204: LD_VAR 0 8
7208: PUSH
7209: LD_INT 1
7211: PPUSH
7212: LD_VAR 0 8
7216: PPUSH
7217: CALL_OW 12
7221: ARRAY
7222: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7223: LD_ADDR_OWVAR 40
7227: PUSH
7228: LD_VAR 0 7
7232: PUSH
7233: LD_INT 1
7235: PPUSH
7236: LD_VAR 0 7
7240: PPUSH
7241: CALL_OW 12
7245: ARRAY
7246: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7247: LD_ADDR_OWVAR 41
7251: PUSH
7252: LD_INT 100
7254: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7255: LD_ADDR_VAR 0 3
7259: PUSH
7260: LD_VAR 0 3
7264: PPUSH
7265: LD_VAR 0 3
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: CALL_OW 45
7278: PPUSH
7279: CALL_OW 2
7283: ST_TO_ADDR
// end ;
7284: GO 6921
7286: POP
7287: POP
// end ;
7288: LD_VAR 0 3
7292: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
7301: PPUSH
// for i = 1 to n do
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: DOUBLE
7308: LD_INT 1
7310: DEC
7311: ST_TO_ADDR
7312: LD_VAR 0 1
7316: PUSH
7317: FOR_TO
7318: IFFALSE 7706
// begin uc_nation := rand ( 1 , 3 ) ;
7320: LD_ADDR_OWVAR 21
7324: PUSH
7325: LD_INT 1
7327: PPUSH
7328: LD_INT 3
7330: PPUSH
7331: CALL_OW 12
7335: ST_TO_ADDR
// case uc_nation of 1 :
7336: LD_OWVAR 21
7340: PUSH
7341: LD_INT 1
7343: DOUBLE
7344: EQUAL
7345: IFTRUE 7349
7347: GO 7420
7349: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: LD_INT 2
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7365: LD_ADDR_VAR 0 7
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: LD_INT 5
7375: PUSH
7376: LD_INT 9
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7384: LD_ADDR_VAR 0 8
7388: PUSH
7389: LD_INT 1
7391: PUSH
7392: LD_INT 3
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7399: LD_ADDR_VAR 0 9
7403: PUSH
7404: LD_INT 1
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 3
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// end ; 2 :
7418: GO 7571
7420: LD_INT 2
7422: DOUBLE
7423: EQUAL
7424: IFTRUE 7428
7426: GO 7499
7428: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7429: LD_ADDR_VAR 0 6
7433: PUSH
7434: LD_INT 13
7436: PUSH
7437: LD_INT 14
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7444: LD_ADDR_VAR 0 7
7448: PUSH
7449: LD_INT 27
7451: PUSH
7452: LD_INT 26
7454: PUSH
7455: LD_INT 25
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7463: LD_ADDR_VAR 0 8
7467: PUSH
7468: LD_INT 1
7470: PUSH
7471: LD_INT 5
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 1
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: ST_TO_ADDR
// end ; 3 :
7497: GO 7571
7499: LD_INT 3
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7570
7507: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7508: LD_ADDR_VAR 0 6
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 21
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7523: LD_ADDR_VAR 0 7
7527: PUSH
7528: LD_INT 44
7530: PUSH
7531: LD_INT 43
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7538: LD_ADDR_VAR 0 8
7542: PUSH
7543: LD_INT 1
7545: PUSH
7546: LD_INT 3
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7553: LD_ADDR_VAR 0 9
7557: PUSH
7558: LD_INT 1
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// end ; end ;
7568: GO 7571
7570: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7571: LD_ADDR_OWVAR 37
7575: PUSH
7576: LD_VAR 0 6
7580: PUSH
7581: LD_INT 1
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 12
7593: ARRAY
7594: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7595: LD_ADDR_OWVAR 39
7599: PUSH
7600: LD_VAR 0 9
7604: PUSH
7605: LD_INT 1
7607: PPUSH
7608: LD_VAR 0 9
7612: PPUSH
7613: CALL_OW 12
7617: ARRAY
7618: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7619: LD_ADDR_OWVAR 38
7623: PUSH
7624: LD_VAR 0 8
7628: PUSH
7629: LD_INT 1
7631: PPUSH
7632: LD_VAR 0 8
7636: PPUSH
7637: CALL_OW 12
7641: ARRAY
7642: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7643: LD_ADDR_OWVAR 40
7647: PUSH
7648: LD_VAR 0 7
7652: PUSH
7653: LD_INT 1
7655: PPUSH
7656: LD_VAR 0 7
7660: PPUSH
7661: CALL_OW 12
7665: ARRAY
7666: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7667: LD_ADDR_OWVAR 41
7671: PUSH
7672: LD_INT 100
7674: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_VAR 0 3
7684: PPUSH
7685: LD_VAR 0 3
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: PPUSH
7694: CALL_OW 45
7698: PPUSH
7699: CALL_OW 2
7703: ST_TO_ADDR
// end ;
7704: GO 7317
7706: POP
7707: POP
// end ;
7708: LD_VAR 0 3
7712: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7713: LD_INT 0
7715: PPUSH
7716: PPUSH
7717: PPUSH
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
// for i = 1 to n do
7722: LD_ADDR_VAR 0 4
7726: PUSH
7727: DOUBLE
7728: LD_INT 1
7730: DEC
7731: ST_TO_ADDR
7732: LD_VAR 0 1
7736: PUSH
7737: FOR_TO
7738: IFFALSE 8126
// begin uc_nation := rand ( 1 , 3 ) ;
7740: LD_ADDR_OWVAR 21
7744: PUSH
7745: LD_INT 1
7747: PPUSH
7748: LD_INT 3
7750: PPUSH
7751: CALL_OW 12
7755: ST_TO_ADDR
// case uc_nation of 1 :
7756: LD_OWVAR 21
7760: PUSH
7761: LD_INT 1
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7836
7769: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7770: LD_ADDR_VAR 0 6
7774: PUSH
7775: LD_INT 4
7777: PUSH
7778: LD_INT 5
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7785: LD_ADDR_VAR 0 7
7789: PUSH
7790: LD_INT 6
7792: PUSH
7793: LD_INT 7
7795: PUSH
7796: LD_INT 9
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7804: LD_ADDR_VAR 0 8
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: LD_INT 3
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7819: LD_ADDR_VAR 0 9
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: ST_TO_ADDR
// end ; 2 :
7834: GO 7991
7836: LD_INT 2
7838: DOUBLE
7839: EQUAL
7840: IFTRUE 7844
7842: GO 7919
7844: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7845: LD_ADDR_VAR 0 6
7849: PUSH
7850: LD_INT 13
7852: PUSH
7853: LD_INT 14
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7860: LD_ADDR_VAR 0 7
7864: PUSH
7865: LD_INT 27
7867: PUSH
7868: LD_INT 26
7870: PUSH
7871: LD_INT 28
7873: PUSH
7874: LD_INT 29
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7883: LD_ADDR_VAR 0 8
7887: PUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 5
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7898: LD_ADDR_VAR 0 9
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: ST_TO_ADDR
// end ; 3 :
7917: GO 7991
7919: LD_INT 3
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7990
7927: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7928: LD_ADDR_VAR 0 6
7932: PUSH
7933: LD_INT 23
7935: PUSH
7936: LD_INT 24
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7943: LD_ADDR_VAR 0 7
7947: PUSH
7948: LD_INT 46
7950: PUSH
7951: LD_INT 45
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7958: LD_ADDR_VAR 0 8
7962: PUSH
7963: LD_INT 1
7965: PUSH
7966: LD_INT 3
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7973: LD_ADDR_VAR 0 9
7977: PUSH
7978: LD_INT 1
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: ST_TO_ADDR
// end ; end ;
7988: GO 7991
7990: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7991: LD_ADDR_OWVAR 37
7995: PUSH
7996: LD_VAR 0 6
8000: PUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_VAR 0 6
8008: PPUSH
8009: CALL_OW 12
8013: ARRAY
8014: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8015: LD_ADDR_OWVAR 39
8019: PUSH
8020: LD_VAR 0 9
8024: PUSH
8025: LD_INT 1
8027: PPUSH
8028: LD_VAR 0 9
8032: PPUSH
8033: CALL_OW 12
8037: ARRAY
8038: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8039: LD_ADDR_OWVAR 38
8043: PUSH
8044: LD_VAR 0 8
8048: PUSH
8049: LD_INT 1
8051: PPUSH
8052: LD_VAR 0 8
8056: PPUSH
8057: CALL_OW 12
8061: ARRAY
8062: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8063: LD_ADDR_OWVAR 40
8067: PUSH
8068: LD_VAR 0 7
8072: PUSH
8073: LD_INT 1
8075: PPUSH
8076: LD_VAR 0 7
8080: PPUSH
8081: CALL_OW 12
8085: ARRAY
8086: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8087: LD_ADDR_OWVAR 41
8091: PUSH
8092: LD_INT 100
8094: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8095: LD_ADDR_VAR 0 3
8099: PUSH
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 1
8112: PLUS
8113: PPUSH
8114: CALL_OW 45
8118: PPUSH
8119: CALL_OW 2
8123: ST_TO_ADDR
// end ;
8124: GO 7737
8126: POP
8127: POP
// end ;
8128: LD_VAR 0 3
8132: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8133: LD_INT 0
8135: PPUSH
8136: PPUSH
// for i = 1 to n do
8137: LD_ADDR_VAR 0 4
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_VAR 0 1
8151: PUSH
8152: FOR_TO
8153: IFFALSE 8227
// begin uc_nation := rand ( 1 , 3 ) ;
8155: LD_ADDR_OWVAR 21
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8171: LD_INT 0
8173: PPUSH
8174: LD_INT 8
8176: PUSH
8177: LD_INT 9
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 2
8204: PPUSH
8205: CALL_OW 380
// result := result ^ CreateHuman ;
8209: LD_ADDR_VAR 0 3
8213: PUSH
8214: LD_VAR 0 3
8218: PUSH
8219: CALL_OW 44
8223: ADD
8224: ST_TO_ADDR
// end ;
8225: GO 8152
8227: POP
8228: POP
// end ;
8229: LD_VAR 0 3
8233: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8234: LD_INT 0
8236: PPUSH
8237: PPUSH
8238: PPUSH
8239: PPUSH
8240: PPUSH
8241: PPUSH
8242: PPUSH
// for i = 1 to n do
8243: LD_ADDR_VAR 0 4
8247: PUSH
8248: DOUBLE
8249: LD_INT 1
8251: DEC
8252: ST_TO_ADDR
8253: LD_VAR 0 1
8257: PUSH
8258: FOR_TO
8259: IFFALSE 8651
// begin uc_nation := rand ( 1 , 3 ) ;
8261: LD_ADDR_OWVAR 21
8265: PUSH
8266: LD_INT 1
8268: PPUSH
8269: LD_INT 3
8271: PPUSH
8272: CALL_OW 12
8276: ST_TO_ADDR
// case uc_nation of 1 :
8277: LD_OWVAR 21
8281: PUSH
8282: LD_INT 1
8284: DOUBLE
8285: EQUAL
8286: IFTRUE 8290
8288: GO 8361
8290: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8291: LD_ADDR_VAR 0 6
8295: PUSH
8296: LD_INT 4
8298: PUSH
8299: LD_INT 5
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8306: LD_ADDR_VAR 0 7
8310: PUSH
8311: LD_INT 6
8313: PUSH
8314: LD_INT 7
8316: PUSH
8317: LD_INT 10
8319: PUSH
8320: LD_INT 97
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8329: LD_ADDR_VAR 0 8
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8344: LD_ADDR_VAR 0 9
8348: PUSH
8349: LD_INT 1
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: ST_TO_ADDR
// end ; 2 :
8359: GO 8516
8361: LD_INT 2
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8440
8369: POP
// begin chassis := [ ar_half_tracked ] ;
8370: LD_ADDR_VAR 0 6
8374: PUSH
8375: LD_INT 14
8377: PUSH
8378: EMPTY
8379: LIST
8380: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8381: LD_ADDR_VAR 0 7
8385: PUSH
8386: LD_INT 91
8388: PUSH
8389: LD_INT 26
8391: PUSH
8392: LD_INT 28
8394: PUSH
8395: LD_INT 29
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8404: LD_ADDR_VAR 0 8
8408: PUSH
8409: LD_INT 1
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 1
8426: PUSH
8427: LD_INT 2
8429: PUSH
8430: LD_INT 3
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// end ; 3 :
8438: GO 8516
8440: LD_INT 3
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8515
8448: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8449: LD_ADDR_VAR 0 6
8453: PUSH
8454: LD_INT 23
8456: PUSH
8457: LD_INT 24
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8464: LD_ADDR_VAR 0 7
8468: PUSH
8469: LD_INT 46
8471: PUSH
8472: LD_INT 45
8474: PUSH
8475: LD_INT 49
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8483: LD_ADDR_VAR 0 8
8487: PUSH
8488: LD_INT 1
8490: PUSH
8491: LD_INT 3
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: ST_TO_ADDR
// end ; end ;
8513: GO 8516
8515: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8516: LD_ADDR_OWVAR 37
8520: PUSH
8521: LD_VAR 0 6
8525: PUSH
8526: LD_INT 1
8528: PPUSH
8529: LD_VAR 0 6
8533: PPUSH
8534: CALL_OW 12
8538: ARRAY
8539: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8540: LD_ADDR_OWVAR 39
8544: PUSH
8545: LD_VAR 0 9
8549: PUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 9
8557: PPUSH
8558: CALL_OW 12
8562: ARRAY
8563: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8564: LD_ADDR_OWVAR 38
8568: PUSH
8569: LD_VAR 0 8
8573: PUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_VAR 0 8
8581: PPUSH
8582: CALL_OW 12
8586: ARRAY
8587: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8588: LD_ADDR_OWVAR 40
8592: PUSH
8593: LD_VAR 0 7
8597: PUSH
8598: LD_INT 1
8600: PPUSH
8601: LD_VAR 0 7
8605: PPUSH
8606: CALL_OW 12
8610: ARRAY
8611: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8612: LD_ADDR_OWVAR 41
8616: PUSH
8617: LD_INT 100
8619: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8620: LD_ADDR_VAR 0 3
8624: PUSH
8625: LD_VAR 0 3
8629: PPUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_INT 1
8637: PLUS
8638: PPUSH
8639: CALL_OW 45
8643: PPUSH
8644: CALL_OW 2
8648: ST_TO_ADDR
// end ;
8649: GO 8258
8651: POP
8652: POP
// end ; end_of_file
8653: LD_VAR 0 3
8657: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8658: LD_INT 22
8660: PUSH
8661: LD_INT 7
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: IFFALSE 9172
8674: GO 8676
8676: DISABLE
8677: LD_INT 0
8679: PPUSH
8680: PPUSH
8681: PPUSH
// begin enable ;
8682: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: LD_INT 22
8690: PUSH
8691: LD_INT 7
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: ST_TO_ADDR
// for i in tmp do
8703: LD_ADDR_VAR 0 1
8707: PUSH
8708: LD_VAR 0 3
8712: PUSH
8713: FOR_IN
8714: IFFALSE 9170
// begin case GetType ( i ) of unit_human :
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 247
8725: PUSH
8726: LD_INT 1
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8933
8734: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 256
8744: PUSH
8745: LD_INT 250
8747: LESS
8748: PUSH
8749: LD_INT 5
8751: PPUSH
8752: LD_INT 7
8754: PPUSH
8755: CALL_OW 321
8759: PUSH
8760: LD_INT 2
8762: NONEQUAL
8763: AND
8764: IFFALSE 8768
// continue ;
8766: GO 8713
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8768: LD_VAR 0 1
8772: PPUSH
8773: CALL_OW 257
8777: PUSH
8778: LD_INT 12
8780: PUSH
8781: LD_INT 15
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_INT 17
8789: PUSH
8790: LD_INT 1
8792: PUSH
8793: LD_INT 5
8795: PUSH
8796: LD_INT 6
8798: PUSH
8799: LD_INT 7
8801: PUSH
8802: LD_INT 8
8804: PUSH
8805: LD_INT 9
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: IN
8820: IFFALSE 8858
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8822: LD_VAR 0 1
8826: PPUSH
8827: LD_INT 22
8829: PUSH
8830: LD_OWVAR 2
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 69
8843: PPUSH
8844: LD_VAR 0 1
8848: PPUSH
8849: CALL_OW 74
8853: PPUSH
8854: CALL_OW 115
// if GetClass ( i ) = 3 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 257
8867: PUSH
8868: LD_INT 3
8870: EQUAL
8871: IFFALSE 8931
// if IsInUnit ( i ) then
8873: LD_VAR 0 1
8877: PPUSH
8878: CALL_OW 310
8882: IFFALSE 8922
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8884: LD_VAR 0 1
8888: PPUSH
8889: LD_INT 22
8891: PUSH
8892: LD_OWVAR 2
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PPUSH
8901: CALL_OW 69
8905: PPUSH
8906: LD_VAR 0 1
8910: PPUSH
8911: CALL_OW 74
8915: PPUSH
8916: CALL_OW 115
8920: GO 8931
// ComEspace ( i ) ;
8922: LD_VAR 0 1
8926: PPUSH
8927: CALL 1933 0 1
// end ; unit_vehicle :
8931: GO 9168
8933: LD_INT 2
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 9167
8941: POP
// begin if GetLives ( i ) > 250 then
8942: LD_VAR 0 1
8946: PPUSH
8947: CALL_OW 256
8951: PUSH
8952: LD_INT 250
8954: GREATER
8955: IFFALSE 9165
// begin if GetWeapon ( i ) = us_artillery then
8957: LD_VAR 0 1
8961: PPUSH
8962: CALL_OW 264
8966: PUSH
8967: LD_INT 97
8969: EQUAL
8970: IFFALSE 9038
// begin if IsInArea ( i , zoneOut ) then
8972: LD_VAR 0 1
8976: PPUSH
8977: LD_INT 4
8979: PPUSH
8980: CALL_OW 308
8984: IFFALSE 9000
// ComMoveToArea ( i , zoneBorder ) else
8986: LD_VAR 0 1
8990: PPUSH
8991: LD_INT 9
8993: PPUSH
8994: CALL_OW 113
8998: GO 9036
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9000: LD_VAR 0 1
9004: PPUSH
9005: LD_INT 22
9007: PUSH
9008: LD_OWVAR 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 69
9021: PPUSH
9022: LD_VAR 0 1
9026: PPUSH
9027: CALL_OW 74
9031: PPUSH
9032: CALL_OW 115
// end else
9036: GO 9165
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9038: LD_VAR 0 1
9042: PPUSH
9043: CALL_OW 264
9047: PUSH
9048: LD_INT 11
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 98
9056: PUSH
9057: LD_INT 49
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: IN
9066: IFFALSE 9096
// begin if IsInArea ( i , zoneOut ) then
9068: LD_VAR 0 1
9072: PPUSH
9073: LD_INT 4
9075: PPUSH
9076: CALL_OW 308
9080: IFFALSE 9094
// ComSpecMove ( i , specPos ) ;
9082: LD_VAR 0 1
9086: PPUSH
9087: LD_INT 8
9089: PPUSH
9090: CALL 1979 0 2
// end else
9094: GO 9165
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 264
9105: PUSH
9106: LD_INT 91
9108: PUSH
9109: LD_INT 29
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: IN
9116: IFFALSE 9129
// ComSpecAttack ( i ) else
9118: LD_VAR 0 1
9122: PPUSH
9123: CALL 2407 0 1
9127: GO 9165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9129: LD_VAR 0 1
9133: PPUSH
9134: LD_INT 22
9136: PUSH
9137: LD_OWVAR 2
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 74
9160: PPUSH
9161: CALL_OW 115
// end ; end ; end ;
9165: GO 9168
9167: POP
// end ;
9168: GO 8713
9170: POP
9171: POP
// end ; end_of_file
9172: PPOPN 3
9174: END
// export function InitDisplay ; begin
9175: LD_INT 0
9177: PPUSH
// while true do
9178: LD_INT 1
9180: IFFALSE 9267
// begin if waveNumber < 100 then
9182: LD_EXP 5
9186: PUSH
9187: LD_INT 100
9189: LESS
9190: IFFALSE 9241
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9192: LD_ADDR_OWVAR 47
9196: PUSH
9197: LD_STRING #Tick
9199: PUSH
9200: LD_OWVAR 1
9204: PUSH
9205: LD_STRING #Points
9207: PUSH
9208: LD_EXP 2
9212: PUSH
9213: LD_STRING #Attack
9215: PUSH
9216: LD_EXP 4
9220: PUSH
9221: LD_STRING #Wave
9223: PUSH
9224: LD_EXP 5
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: ST_TO_ADDR
9239: GO 9258
// Display_Strings := [ #Win , points ] ;
9241: LD_ADDR_OWVAR 47
9245: PUSH
9246: LD_STRING #Win
9248: PUSH
9249: LD_EXP 2
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9258: LD_INT 35
9260: PPUSH
9261: CALL_OW 67
// end ;
9265: GO 9178
// end ; end_of_file
9267: LD_VAR 0 1
9271: RET
// export function InitBonus ; var i , chance ; begin
9272: LD_INT 0
9274: PPUSH
9275: PPUSH
9276: PPUSH
// chance := rand ( 1 , 99 ) ;
9277: LD_ADDR_VAR 0 3
9281: PUSH
9282: LD_INT 1
9284: PPUSH
9285: LD_INT 99
9287: PPUSH
9288: CALL_OW 12
9292: ST_TO_ADDR
// case chance of 1 .. 10 :
9293: LD_VAR 0 3
9297: PUSH
9298: LD_INT 1
9300: DOUBLE
9301: GREATEREQUAL
9302: IFFALSE 9310
9304: LD_INT 10
9306: DOUBLE
9307: LESSEQUAL
9308: IFTRUE 9312
9310: GO 9323
9312: POP
// i := 5 ; 11 .. 25 :
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_INT 5
9320: ST_TO_ADDR
9321: GO 9424
9323: LD_INT 11
9325: DOUBLE
9326: GREATEREQUAL
9327: IFFALSE 9335
9329: LD_INT 25
9331: DOUBLE
9332: LESSEQUAL
9333: IFTRUE 9337
9335: GO 9348
9337: POP
// i := 3 ; 26 .. 40 :
9338: LD_ADDR_VAR 0 2
9342: PUSH
9343: LD_INT 3
9345: ST_TO_ADDR
9346: GO 9424
9348: LD_INT 26
9350: DOUBLE
9351: GREATEREQUAL
9352: IFFALSE 9360
9354: LD_INT 40
9356: DOUBLE
9357: LESSEQUAL
9358: IFTRUE 9362
9360: GO 9373
9362: POP
// i := 2 ; 41 .. 60 :
9363: LD_ADDR_VAR 0 2
9367: PUSH
9368: LD_INT 2
9370: ST_TO_ADDR
9371: GO 9424
9373: LD_INT 41
9375: DOUBLE
9376: GREATEREQUAL
9377: IFFALSE 9385
9379: LD_INT 60
9381: DOUBLE
9382: LESSEQUAL
9383: IFTRUE 9387
9385: GO 9398
9387: POP
// i := 4 ; 61 .. 99 :
9388: LD_ADDR_VAR 0 2
9392: PUSH
9393: LD_INT 4
9395: ST_TO_ADDR
9396: GO 9424
9398: LD_INT 61
9400: DOUBLE
9401: GREATEREQUAL
9402: IFFALSE 9410
9404: LD_INT 99
9406: DOUBLE
9407: LESSEQUAL
9408: IFTRUE 9412
9410: GO 9423
9412: POP
// i := 1 ; end ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_INT 1
9420: ST_TO_ADDR
9421: GO 9424
9423: POP
// case i of 1 :
9424: LD_VAR 0 2
9428: PUSH
9429: LD_INT 1
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9526
9437: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9438: LD_INT 22
9440: PUSH
9441: LD_OWVAR 2
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: LD_INT 25
9455: PUSH
9456: LD_INT 12
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 25
9465: PUSH
9466: LD_INT 16
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 25
9475: PUSH
9476: LD_INT 15
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 17
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PPUSH
9504: CALL_OW 69
9508: PUSH
9509: LD_INT 10
9511: GREATEREQUAL
9512: IFFALSE 9520
// BonusIV else
9514: CALL 10099 0 0
9518: GO 9524
// BonusI ;
9520: CALL 9604 0 0
// end ; 2 :
9524: GO 9599
9526: LD_INT 2
9528: DOUBLE
9529: EQUAL
9530: IFTRUE 9534
9532: GO 9541
9534: POP
// begin BonusII ;
9535: CALL 9777 0 0
// end ; 3 :
9539: GO 9599
9541: LD_INT 3
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9556
9549: POP
// begin BonusIII ;
9550: CALL 9925 0 0
// end ; 4 :
9554: GO 9599
9556: LD_INT 4
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9571
9564: POP
// begin BonusIV ;
9565: CALL 10099 0 0
// end ; 5 :
9569: GO 9599
9571: LD_INT 5
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9598
9579: POP
// begin if graveyard then
9580: LD_EXP 8
9584: IFFALSE 9592
// BonusV else
9586: CALL 10517 0 0
9590: GO 9596
// BonusIII ;
9592: CALL 9925 0 0
// end ; end ;
9596: GO 9599
9598: POP
// end ;
9599: LD_VAR 0 1
9603: RET
// export function BonusI ; var i ; begin
9604: LD_INT 0
9606: PPUSH
9607: PPUSH
// case Query ( AddGift1 ) of 1 :
9608: LD_STRING AddGift1
9610: PPUSH
9611: CALL_OW 97
9615: PUSH
9616: LD_INT 1
9618: DOUBLE
9619: EQUAL
9620: IFTRUE 9624
9622: GO 9703
9624: POP
// begin for i = 1 to 3 do
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: DOUBLE
9631: LD_INT 1
9633: DEC
9634: ST_TO_ADDR
9635: LD_INT 3
9637: PUSH
9638: FOR_TO
9639: IFFALSE 9699
// begin uc_side := your_side ;
9641: LD_ADDR_OWVAR 20
9645: PUSH
9646: LD_OWVAR 2
9650: ST_TO_ADDR
// uc_nation := 0 ;
9651: LD_ADDR_OWVAR 21
9655: PUSH
9656: LD_INT 0
9658: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9659: LD_INT 0
9661: PPUSH
9662: LD_INT 12
9664: PPUSH
9665: LD_INT 1
9667: PPUSH
9668: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9672: CALL_OW 44
9676: PPUSH
9677: LD_EXP 9
9681: PPUSH
9682: LD_EXP 10
9686: PPUSH
9687: LD_INT 15
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: CALL_OW 50
// end ;
9697: GO 9638
9699: POP
9700: POP
// end ; 2 :
9701: GO 9772
9703: LD_INT 2
9705: DOUBLE
9706: EQUAL
9707: IFTRUE 9711
9709: GO 9753
9711: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9712: LD_EXP 11
9716: PPUSH
9717: CALL_OW 274
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: LD_EXP 11
9729: PPUSH
9730: CALL_OW 274
9734: PPUSH
9735: LD_INT 1
9737: PPUSH
9738: CALL_OW 275
9742: PUSH
9743: LD_INT 100
9745: PLUS
9746: PPUSH
9747: CALL_OW 277
// end ; 3 :
9751: GO 9772
9753: LD_INT 3
9755: DOUBLE
9756: EQUAL
9757: IFTRUE 9761
9759: GO 9771
9761: POP
// begin SetTeamExp ( 2 ) ;
9762: LD_INT 2
9764: PPUSH
9765: CALL 940 0 1
// end ; end ;
9769: GO 9772
9771: POP
// end ;
9772: LD_VAR 0 1
9776: RET
// export function BonusII ; var i ; begin
9777: LD_INT 0
9779: PPUSH
9780: PPUSH
// case Query ( AddGift2 ) of 1 :
9781: LD_STRING AddGift2
9783: PPUSH
9784: CALL_OW 97
9788: PUSH
9789: LD_INT 1
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 9839
9797: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9798: LD_EXP 11
9802: PPUSH
9803: CALL_OW 274
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: LD_EXP 11
9815: PPUSH
9816: CALL_OW 274
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 275
9828: PUSH
9829: LD_INT 500
9831: PLUS
9832: PPUSH
9833: CALL_OW 277
// end ; 2 :
9837: GO 9920
9839: LD_INT 2
9841: DOUBLE
9842: EQUAL
9843: IFTRUE 9847
9845: GO 9857
9847: POP
// begin SetTeamExp ( 3 ) ;
9848: LD_INT 3
9850: PPUSH
9851: CALL 940 0 1
// end ; 3 :
9855: GO 9920
9857: LD_INT 3
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 9919
9865: POP
// begin uc_side = your_side ;
9866: LD_ADDR_OWVAR 20
9870: PUSH
9871: LD_OWVAR 2
9875: ST_TO_ADDR
// uc_nation = nation_russian ;
9876: LD_ADDR_OWVAR 21
9880: PUSH
9881: LD_INT 3
9883: ST_TO_ADDR
// vc_chassis = 25 ;
9884: LD_ADDR_OWVAR 37
9888: PUSH
9889: LD_INT 25
9891: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9892: CALL_OW 45
9896: PPUSH
9897: LD_EXP 9
9901: PPUSH
9902: LD_EXP 10
9906: PPUSH
9907: LD_INT 15
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 50
// end ; end ;
9917: GO 9920
9919: POP
// end ;
9920: LD_VAR 0 1
9924: RET
// export function BonusIII ; var i ; begin
9925: LD_INT 0
9927: PPUSH
9928: PPUSH
// case Query ( AddGift3 ) of 1 :
9929: LD_STRING AddGift3
9931: PPUSH
9932: CALL_OW 97
9936: PUSH
9937: LD_INT 1
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 9987
9945: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9946: LD_EXP 11
9950: PPUSH
9951: CALL_OW 274
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: LD_EXP 11
9963: PPUSH
9964: CALL_OW 274
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 275
9976: PUSH
9977: LD_INT 1000
9979: PLUS
9980: PPUSH
9981: CALL_OW 277
// end ; 2 :
9985: GO 10094
9987: LD_INT 2
9989: DOUBLE
9990: EQUAL
9991: IFTRUE 9995
9993: GO 10007
9995: POP
// begin PrepareGuards ( waveNumber ) ;
9996: LD_EXP 5
10000: PPUSH
10001: CALL 1086 0 1
// end ; 3 :
10005: GO 10094
10007: LD_INT 3
10009: DOUBLE
10010: EQUAL
10011: IFTRUE 10015
10013: GO 10093
10015: POP
// begin uc_side = your_side ;
10016: LD_ADDR_OWVAR 20
10020: PUSH
10021: LD_OWVAR 2
10025: ST_TO_ADDR
// uc_nation = nation_american ;
10026: LD_ADDR_OWVAR 21
10030: PUSH
10031: LD_INT 1
10033: ST_TO_ADDR
// vc_chassis = us_morphling ;
10034: LD_ADDR_OWVAR 37
10038: PUSH
10039: LD_INT 5
10041: ST_TO_ADDR
// vc_engine := engine_siberite ;
10042: LD_ADDR_OWVAR 39
10046: PUSH
10047: LD_INT 3
10049: ST_TO_ADDR
// vc_control := control_computer ;
10050: LD_ADDR_OWVAR 38
10054: PUSH
10055: LD_INT 3
10057: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10058: LD_ADDR_OWVAR 40
10062: PUSH
10063: LD_INT 8
10065: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10066: CALL_OW 45
10070: PPUSH
10071: LD_EXP 9
10075: PPUSH
10076: LD_EXP 10
10080: PPUSH
10081: LD_INT 15
10083: PPUSH
10084: LD_INT 1
10086: PPUSH
10087: CALL_OW 50
// end ; end ;
10091: GO 10094
10093: POP
// end ;
10094: LD_VAR 0 1
10098: RET
// export function BonusIV ; var i ; begin
10099: LD_INT 0
10101: PPUSH
10102: PPUSH
// case Query ( AddGift4 ) of 1 :
10103: LD_STRING AddGift4
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10443
10119: POP
// begin i := rand ( 1 , 3 ) ;
10120: LD_ADDR_VAR 0 2
10124: PUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 3
10130: PPUSH
10131: CALL_OW 12
10135: ST_TO_ADDR
// uc_side := your_side ;
10136: LD_ADDR_OWVAR 20
10140: PUSH
10141: LD_OWVAR 2
10145: ST_TO_ADDR
// case i of 1 :
10146: LD_VAR 0 2
10150: PUSH
10151: LD_INT 1
10153: DOUBLE
10154: EQUAL
10155: IFTRUE 10159
10157: GO 10246
10159: POP
// begin uc_nation := nation_arabian ;
10160: LD_ADDR_OWVAR 21
10164: PUSH
10165: LD_INT 2
10167: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10168: LD_ADDR_OWVAR 37
10172: PUSH
10173: LD_INT 14
10175: ST_TO_ADDR
// vc_engine := engine_combustion ;
10176: LD_ADDR_OWVAR 39
10180: PUSH
10181: LD_INT 1
10183: ST_TO_ADDR
// vc_control := control_manual ;
10184: LD_ADDR_OWVAR 38
10188: PUSH
10189: LD_INT 1
10191: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10192: LD_ADDR_OWVAR 40
10196: PUSH
10197: LD_INT 27
10199: PUSH
10200: LD_INT 28
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 1
10209: PPUSH
10210: LD_INT 2
10212: PPUSH
10213: CALL_OW 12
10217: ARRAY
10218: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10219: CALL_OW 45
10223: PPUSH
10224: LD_EXP 9
10228: PPUSH
10229: LD_EXP 10
10233: PPUSH
10234: LD_INT 15
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 50
// end ; 2 :
10244: GO 10441
10246: LD_INT 2
10248: DOUBLE
10249: EQUAL
10250: IFTRUE 10254
10252: GO 10345
10254: POP
// begin uc_nation := nation_american ;
10255: LD_ADDR_OWVAR 21
10259: PUSH
10260: LD_INT 1
10262: ST_TO_ADDR
// vc_chassis := us_morphling ;
10263: LD_ADDR_OWVAR 37
10267: PUSH
10268: LD_INT 5
10270: ST_TO_ADDR
// vc_engine := engine_siberite ;
10271: LD_ADDR_OWVAR 39
10275: PUSH
10276: LD_INT 3
10278: ST_TO_ADDR
// vc_control := control_computer ;
10279: LD_ADDR_OWVAR 38
10283: PUSH
10284: LD_INT 3
10286: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10287: LD_ADDR_OWVAR 40
10291: PUSH
10292: LD_INT 12
10294: PUSH
10295: LD_INT 10
10297: PUSH
10298: LD_INT 7
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 1
10308: PPUSH
10309: LD_INT 3
10311: PPUSH
10312: CALL_OW 12
10316: ARRAY
10317: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10318: CALL_OW 45
10322: PPUSH
10323: LD_EXP 9
10327: PPUSH
10328: LD_EXP 10
10332: PPUSH
10333: LD_INT 15
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 50
// end ; 3 :
10343: GO 10441
10345: LD_INT 3
10347: DOUBLE
10348: EQUAL
10349: IFTRUE 10353
10351: GO 10440
10353: POP
// begin uc_nation := nation_russian ;
10354: LD_ADDR_OWVAR 21
10358: PUSH
10359: LD_INT 3
10361: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10362: LD_ADDR_OWVAR 37
10366: PUSH
10367: LD_INT 22
10369: ST_TO_ADDR
// vc_engine := engine_combustion ;
10370: LD_ADDR_OWVAR 39
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// vc_control := control_manual ;
10378: LD_ADDR_OWVAR 38
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10386: LD_ADDR_OWVAR 40
10390: PUSH
10391: LD_INT 45
10393: PUSH
10394: LD_INT 44
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 1
10403: PPUSH
10404: LD_INT 2
10406: PPUSH
10407: CALL_OW 12
10411: ARRAY
10412: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10413: CALL_OW 45
10417: PPUSH
10418: LD_EXP 9
10422: PPUSH
10423: LD_EXP 10
10427: PPUSH
10428: LD_INT 15
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 50
// end ; end ;
10438: GO 10441
10440: POP
// end ; 2 :
10441: GO 10512
10443: LD_INT 2
10445: DOUBLE
10446: EQUAL
10447: IFTRUE 10451
10449: GO 10493
10451: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10452: LD_EXP 11
10456: PPUSH
10457: CALL_OW 274
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: LD_EXP 11
10469: PPUSH
10470: CALL_OW 274
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 275
10482: PUSH
10483: LD_INT 100
10485: PLUS
10486: PPUSH
10487: CALL_OW 277
// end ; 3 :
10491: GO 10512
10493: LD_INT 3
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10511
10501: POP
// begin SetTeamExp ( 2 ) ;
10502: LD_INT 2
10504: PPUSH
10505: CALL 940 0 1
// end ; end ;
10509: GO 10512
10511: POP
// end ;
10512: LD_VAR 0 1
10516: RET
// export function BonusV ; var i , j ; begin
10517: LD_INT 0
10519: PPUSH
10520: PPUSH
10521: PPUSH
// case Query ( AddGift5 ) of 1 :
10522: LD_STRING AddGift5
10524: PPUSH
10525: CALL_OW 97
10529: PUSH
10530: LD_INT 1
10532: DOUBLE
10533: EQUAL
10534: IFTRUE 10538
10536: GO 10882
10538: POP
// begin for j = 1 to 3 do
10539: LD_ADDR_VAR 0 3
10543: PUSH
10544: DOUBLE
10545: LD_INT 1
10547: DEC
10548: ST_TO_ADDR
10549: LD_INT 3
10551: PUSH
10552: FOR_TO
10553: IFFALSE 10878
// begin i := rand ( 1 , 3 ) ;
10555: LD_ADDR_VAR 0 2
10559: PUSH
10560: LD_INT 1
10562: PPUSH
10563: LD_INT 3
10565: PPUSH
10566: CALL_OW 12
10570: ST_TO_ADDR
// uc_side := your_side ;
10571: LD_ADDR_OWVAR 20
10575: PUSH
10576: LD_OWVAR 2
10580: ST_TO_ADDR
// case i of 1 :
10581: LD_VAR 0 2
10585: PUSH
10586: LD_INT 1
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10681
10594: POP
// begin uc_nation := nation_arabian ;
10595: LD_ADDR_OWVAR 21
10599: PUSH
10600: LD_INT 2
10602: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10603: LD_ADDR_OWVAR 37
10607: PUSH
10608: LD_INT 14
10610: ST_TO_ADDR
// vc_engine := engine_combustion ;
10611: LD_ADDR_OWVAR 39
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// vc_control := control_manual ;
10619: LD_ADDR_OWVAR 38
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10627: LD_ADDR_OWVAR 40
10631: PUSH
10632: LD_INT 27
10634: PUSH
10635: LD_INT 28
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_INT 2
10647: PPUSH
10648: CALL_OW 12
10652: ARRAY
10653: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10654: CALL_OW 45
10658: PPUSH
10659: LD_EXP 9
10663: PPUSH
10664: LD_EXP 10
10668: PPUSH
10669: LD_INT 15
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 50
// end ; 2 :
10679: GO 10876
10681: LD_INT 2
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10780
10689: POP
// begin uc_nation := nation_american ;
10690: LD_ADDR_OWVAR 21
10694: PUSH
10695: LD_INT 1
10697: ST_TO_ADDR
// vc_chassis := us_morphling ;
10698: LD_ADDR_OWVAR 37
10702: PUSH
10703: LD_INT 5
10705: ST_TO_ADDR
// vc_engine := engine_siberite ;
10706: LD_ADDR_OWVAR 39
10710: PUSH
10711: LD_INT 3
10713: ST_TO_ADDR
// vc_control := control_computer ;
10714: LD_ADDR_OWVAR 38
10718: PUSH
10719: LD_INT 3
10721: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10722: LD_ADDR_OWVAR 40
10726: PUSH
10727: LD_INT 12
10729: PUSH
10730: LD_INT 11
10732: PUSH
10733: LD_INT 7
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 1
10743: PPUSH
10744: LD_INT 3
10746: PPUSH
10747: CALL_OW 12
10751: ARRAY
10752: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10753: CALL_OW 45
10757: PPUSH
10758: LD_EXP 9
10762: PPUSH
10763: LD_EXP 10
10767: PPUSH
10768: LD_INT 15
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: CALL_OW 50
// end ; 3 :
10778: GO 10876
10780: LD_INT 3
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10875
10788: POP
// begin uc_nation := nation_russian ;
10789: LD_ADDR_OWVAR 21
10793: PUSH
10794: LD_INT 3
10796: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10797: LD_ADDR_OWVAR 37
10801: PUSH
10802: LD_INT 22
10804: ST_TO_ADDR
// vc_engine := engine_combustion ;
10805: LD_ADDR_OWVAR 39
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
// vc_control := control_manual ;
10813: LD_ADDR_OWVAR 38
10817: PUSH
10818: LD_INT 1
10820: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10821: LD_ADDR_OWVAR 40
10825: PUSH
10826: LD_INT 45
10828: PUSH
10829: LD_INT 44
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 1
10838: PPUSH
10839: LD_INT 2
10841: PPUSH
10842: CALL_OW 12
10846: ARRAY
10847: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10848: CALL_OW 45
10852: PPUSH
10853: LD_EXP 9
10857: PPUSH
10858: LD_EXP 10
10862: PPUSH
10863: LD_INT 15
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 50
// end ; end ;
10873: GO 10876
10875: POP
// end ;
10876: GO 10552
10878: POP
10879: POP
// end ; 2 :
10880: GO 10948
10882: LD_INT 2
10884: DOUBLE
10885: EQUAL
10886: IFTRUE 10890
10888: GO 10932
10890: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10891: LD_EXP 11
10895: PPUSH
10896: CALL_OW 274
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: LD_EXP 11
10908: PPUSH
10909: CALL_OW 274
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 275
10921: PUSH
10922: LD_INT 500
10924: PLUS
10925: PPUSH
10926: CALL_OW 277
// end ; 3 :
10930: GO 10948
10932: LD_INT 3
10934: DOUBLE
10935: EQUAL
10936: IFTRUE 10940
10938: GO 10947
10940: POP
// begin GetBack ( ) ;
10941: CALL 1746 0 0
// end ; end ;
10945: GO 10948
10947: POP
// end ; end_of_file end_of_file
10948: LD_VAR 0 1
10952: RET
// every 0 0$1 do
10953: GO 10955
10955: DISABLE
// begin enable ;
10956: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10957: LD_STRING updateTimer(
10959: PUSH
10960: LD_OWVAR 1
10964: STR
10965: PUSH
10966: LD_STRING );
10968: STR
10969: PPUSH
10970: CALL_OW 559
// end ;
10974: END
// export function SOS_MapStart ( ) ; begin
10975: LD_INT 0
10977: PPUSH
// if streamModeActive then
10978: LD_EXP 14
10982: IFFALSE 10991
// DefineStreamItems ( true ) ;
10984: LD_INT 1
10986: PPUSH
10987: CALL 12645 0 1
// UpdateFactoryWaypoints ( ) ;
10991: CALL 25506 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10995: CALL 25763 0 0
// end ;
10999: LD_VAR 0 1
11003: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11004: LD_INT 0
11006: PPUSH
// if p2 = 100 then
11007: LD_VAR 0 2
11011: PUSH
11012: LD_INT 100
11014: EQUAL
11015: IFFALSE 12018
// begin if not StreamModeActive then
11017: LD_EXP 14
11021: NOT
11022: IFFALSE 11032
// StreamModeActive := true ;
11024: LD_ADDR_EXP 14
11028: PUSH
11029: LD_INT 1
11031: ST_TO_ADDR
// if p3 = 0 then
11032: LD_VAR 0 3
11036: PUSH
11037: LD_INT 0
11039: EQUAL
11040: IFFALSE 11046
// InitStreamMode ;
11042: CALL 12181 0 0
// if p3 = 1 then
11046: LD_VAR 0 3
11050: PUSH
11051: LD_INT 1
11053: EQUAL
11054: IFFALSE 11064
// sRocket := true ;
11056: LD_ADDR_EXP 19
11060: PUSH
11061: LD_INT 1
11063: ST_TO_ADDR
// if p3 = 2 then
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 2
11071: EQUAL
11072: IFFALSE 11082
// sSpeed := true ;
11074: LD_ADDR_EXP 18
11078: PUSH
11079: LD_INT 1
11081: ST_TO_ADDR
// if p3 = 3 then
11082: LD_VAR 0 3
11086: PUSH
11087: LD_INT 3
11089: EQUAL
11090: IFFALSE 11100
// sEngine := true ;
11092: LD_ADDR_EXP 20
11096: PUSH
11097: LD_INT 1
11099: ST_TO_ADDR
// if p3 = 4 then
11100: LD_VAR 0 3
11104: PUSH
11105: LD_INT 4
11107: EQUAL
11108: IFFALSE 11118
// sSpec := true ;
11110: LD_ADDR_EXP 17
11114: PUSH
11115: LD_INT 1
11117: ST_TO_ADDR
// if p3 = 5 then
11118: LD_VAR 0 3
11122: PUSH
11123: LD_INT 5
11125: EQUAL
11126: IFFALSE 11136
// sLevel := true ;
11128: LD_ADDR_EXP 21
11132: PUSH
11133: LD_INT 1
11135: ST_TO_ADDR
// if p3 = 6 then
11136: LD_VAR 0 3
11140: PUSH
11141: LD_INT 6
11143: EQUAL
11144: IFFALSE 11154
// sArmoury := true ;
11146: LD_ADDR_EXP 22
11150: PUSH
11151: LD_INT 1
11153: ST_TO_ADDR
// if p3 = 7 then
11154: LD_VAR 0 3
11158: PUSH
11159: LD_INT 7
11161: EQUAL
11162: IFFALSE 11172
// sRadar := true ;
11164: LD_ADDR_EXP 23
11168: PUSH
11169: LD_INT 1
11171: ST_TO_ADDR
// if p3 = 8 then
11172: LD_VAR 0 3
11176: PUSH
11177: LD_INT 8
11179: EQUAL
11180: IFFALSE 11190
// sBunker := true ;
11182: LD_ADDR_EXP 24
11186: PUSH
11187: LD_INT 1
11189: ST_TO_ADDR
// if p3 = 9 then
11190: LD_VAR 0 3
11194: PUSH
11195: LD_INT 9
11197: EQUAL
11198: IFFALSE 11208
// sHack := true ;
11200: LD_ADDR_EXP 25
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// if p3 = 10 then
11208: LD_VAR 0 3
11212: PUSH
11213: LD_INT 10
11215: EQUAL
11216: IFFALSE 11226
// sFire := true ;
11218: LD_ADDR_EXP 26
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// if p3 = 11 then
11226: LD_VAR 0 3
11230: PUSH
11231: LD_INT 11
11233: EQUAL
11234: IFFALSE 11244
// sRefresh := true ;
11236: LD_ADDR_EXP 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// if p3 = 12 then
11244: LD_VAR 0 3
11248: PUSH
11249: LD_INT 12
11251: EQUAL
11252: IFFALSE 11262
// sExp := true ;
11254: LD_ADDR_EXP 28
11258: PUSH
11259: LD_INT 1
11261: ST_TO_ADDR
// if p3 = 13 then
11262: LD_VAR 0 3
11266: PUSH
11267: LD_INT 13
11269: EQUAL
11270: IFFALSE 11280
// sDepot := true ;
11272: LD_ADDR_EXP 29
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// if p3 = 14 then
11280: LD_VAR 0 3
11284: PUSH
11285: LD_INT 14
11287: EQUAL
11288: IFFALSE 11298
// sFlag := true ;
11290: LD_ADDR_EXP 30
11294: PUSH
11295: LD_INT 1
11297: ST_TO_ADDR
// if p3 = 15 then
11298: LD_VAR 0 3
11302: PUSH
11303: LD_INT 15
11305: EQUAL
11306: IFFALSE 11316
// sKamikadze := true ;
11308: LD_ADDR_EXP 38
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// if p3 = 16 then
11316: LD_VAR 0 3
11320: PUSH
11321: LD_INT 16
11323: EQUAL
11324: IFFALSE 11334
// sTroll := true ;
11326: LD_ADDR_EXP 39
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// if p3 = 17 then
11334: LD_VAR 0 3
11338: PUSH
11339: LD_INT 17
11341: EQUAL
11342: IFFALSE 11352
// sSlow := true ;
11344: LD_ADDR_EXP 40
11348: PUSH
11349: LD_INT 1
11351: ST_TO_ADDR
// if p3 = 18 then
11352: LD_VAR 0 3
11356: PUSH
11357: LD_INT 18
11359: EQUAL
11360: IFFALSE 11370
// sLack := true ;
11362: LD_ADDR_EXP 41
11366: PUSH
11367: LD_INT 1
11369: ST_TO_ADDR
// if p3 = 19 then
11370: LD_VAR 0 3
11374: PUSH
11375: LD_INT 19
11377: EQUAL
11378: IFFALSE 11388
// sTank := true ;
11380: LD_ADDR_EXP 43
11384: PUSH
11385: LD_INT 1
11387: ST_TO_ADDR
// if p3 = 20 then
11388: LD_VAR 0 3
11392: PUSH
11393: LD_INT 20
11395: EQUAL
11396: IFFALSE 11406
// sRemote := true ;
11398: LD_ADDR_EXP 44
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// if p3 = 21 then
11406: LD_VAR 0 3
11410: PUSH
11411: LD_INT 21
11413: EQUAL
11414: IFFALSE 11424
// sPowell := true ;
11416: LD_ADDR_EXP 45
11420: PUSH
11421: LD_INT 1
11423: ST_TO_ADDR
// if p3 = 22 then
11424: LD_VAR 0 3
11428: PUSH
11429: LD_INT 22
11431: EQUAL
11432: IFFALSE 11442
// sTeleport := true ;
11434: LD_ADDR_EXP 48
11438: PUSH
11439: LD_INT 1
11441: ST_TO_ADDR
// if p3 = 23 then
11442: LD_VAR 0 3
11446: PUSH
11447: LD_INT 23
11449: EQUAL
11450: IFFALSE 11460
// sOilTower := true ;
11452: LD_ADDR_EXP 50
11456: PUSH
11457: LD_INT 1
11459: ST_TO_ADDR
// if p3 = 24 then
11460: LD_VAR 0 3
11464: PUSH
11465: LD_INT 24
11467: EQUAL
11468: IFFALSE 11478
// sShovel := true ;
11470: LD_ADDR_EXP 51
11474: PUSH
11475: LD_INT 1
11477: ST_TO_ADDR
// if p3 = 25 then
11478: LD_VAR 0 3
11482: PUSH
11483: LD_INT 25
11485: EQUAL
11486: IFFALSE 11496
// sSheik := true ;
11488: LD_ADDR_EXP 52
11492: PUSH
11493: LD_INT 1
11495: ST_TO_ADDR
// if p3 = 26 then
11496: LD_VAR 0 3
11500: PUSH
11501: LD_INT 26
11503: EQUAL
11504: IFFALSE 11514
// sEarthquake := true ;
11506: LD_ADDR_EXP 54
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// if p3 = 27 then
11514: LD_VAR 0 3
11518: PUSH
11519: LD_INT 27
11521: EQUAL
11522: IFFALSE 11532
// sAI := true ;
11524: LD_ADDR_EXP 55
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// if p3 = 28 then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_INT 28
11539: EQUAL
11540: IFFALSE 11550
// sCargo := true ;
11542: LD_ADDR_EXP 58
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// if p3 = 29 then
11550: LD_VAR 0 3
11554: PUSH
11555: LD_INT 29
11557: EQUAL
11558: IFFALSE 11568
// sDLaser := true ;
11560: LD_ADDR_EXP 59
11564: PUSH
11565: LD_INT 1
11567: ST_TO_ADDR
// if p3 = 30 then
11568: LD_VAR 0 3
11572: PUSH
11573: LD_INT 30
11575: EQUAL
11576: IFFALSE 11586
// sExchange := true ;
11578: LD_ADDR_EXP 60
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
// if p3 = 31 then
11586: LD_VAR 0 3
11590: PUSH
11591: LD_INT 31
11593: EQUAL
11594: IFFALSE 11604
// sFac := true ;
11596: LD_ADDR_EXP 61
11600: PUSH
11601: LD_INT 1
11603: ST_TO_ADDR
// if p3 = 32 then
11604: LD_VAR 0 3
11608: PUSH
11609: LD_INT 32
11611: EQUAL
11612: IFFALSE 11622
// sPower := true ;
11614: LD_ADDR_EXP 62
11618: PUSH
11619: LD_INT 1
11621: ST_TO_ADDR
// if p3 = 33 then
11622: LD_VAR 0 3
11626: PUSH
11627: LD_INT 33
11629: EQUAL
11630: IFFALSE 11640
// sRandom := true ;
11632: LD_ADDR_EXP 63
11636: PUSH
11637: LD_INT 1
11639: ST_TO_ADDR
// if p3 = 34 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 34
11647: EQUAL
11648: IFFALSE 11658
// sShield := true ;
11650: LD_ADDR_EXP 64
11654: PUSH
11655: LD_INT 1
11657: ST_TO_ADDR
// if p3 = 35 then
11658: LD_VAR 0 3
11662: PUSH
11663: LD_INT 35
11665: EQUAL
11666: IFFALSE 11676
// sTime := true ;
11668: LD_ADDR_EXP 65
11672: PUSH
11673: LD_INT 1
11675: ST_TO_ADDR
// if p3 = 36 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 36
11683: EQUAL
11684: IFFALSE 11694
// sTools := true ;
11686: LD_ADDR_EXP 66
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// if p3 = 101 then
11694: LD_VAR 0 3
11698: PUSH
11699: LD_INT 101
11701: EQUAL
11702: IFFALSE 11712
// sSold := true ;
11704: LD_ADDR_EXP 31
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// if p3 = 102 then
11712: LD_VAR 0 3
11716: PUSH
11717: LD_INT 102
11719: EQUAL
11720: IFFALSE 11730
// sDiff := true ;
11722: LD_ADDR_EXP 32
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// if p3 = 103 then
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 103
11737: EQUAL
11738: IFFALSE 11748
// sFog := true ;
11740: LD_ADDR_EXP 35
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
// if p3 = 104 then
11748: LD_VAR 0 3
11752: PUSH
11753: LD_INT 104
11755: EQUAL
11756: IFFALSE 11766
// sReset := true ;
11758: LD_ADDR_EXP 36
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// if p3 = 105 then
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 105
11773: EQUAL
11774: IFFALSE 11784
// sSun := true ;
11776: LD_ADDR_EXP 37
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// if p3 = 106 then
11784: LD_VAR 0 3
11788: PUSH
11789: LD_INT 106
11791: EQUAL
11792: IFFALSE 11802
// sTiger := true ;
11794: LD_ADDR_EXP 33
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// if p3 = 107 then
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 107
11809: EQUAL
11810: IFFALSE 11820
// sBomb := true ;
11812: LD_ADDR_EXP 34
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// if p3 = 108 then
11820: LD_VAR 0 3
11824: PUSH
11825: LD_INT 108
11827: EQUAL
11828: IFFALSE 11838
// sWound := true ;
11830: LD_ADDR_EXP 42
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// if p3 = 109 then
11838: LD_VAR 0 3
11842: PUSH
11843: LD_INT 109
11845: EQUAL
11846: IFFALSE 11856
// sBetray := true ;
11848: LD_ADDR_EXP 46
11852: PUSH
11853: LD_INT 1
11855: ST_TO_ADDR
// if p3 = 110 then
11856: LD_VAR 0 3
11860: PUSH
11861: LD_INT 110
11863: EQUAL
11864: IFFALSE 11874
// sContamin := true ;
11866: LD_ADDR_EXP 47
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if p3 = 111 then
11874: LD_VAR 0 3
11878: PUSH
11879: LD_INT 111
11881: EQUAL
11882: IFFALSE 11892
// sOil := true ;
11884: LD_ADDR_EXP 49
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// if p3 = 112 then
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 112
11899: EQUAL
11900: IFFALSE 11910
// sStu := true ;
11902: LD_ADDR_EXP 53
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// if p3 = 113 then
11910: LD_VAR 0 3
11914: PUSH
11915: LD_INT 113
11917: EQUAL
11918: IFFALSE 11928
// sBazooka := true ;
11920: LD_ADDR_EXP 56
11924: PUSH
11925: LD_INT 1
11927: ST_TO_ADDR
// if p3 = 114 then
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 114
11935: EQUAL
11936: IFFALSE 11946
// sMortar := true ;
11938: LD_ADDR_EXP 57
11942: PUSH
11943: LD_INT 1
11945: ST_TO_ADDR
// if p3 = 115 then
11946: LD_VAR 0 3
11950: PUSH
11951: LD_INT 115
11953: EQUAL
11954: IFFALSE 11964
// sRanger := true ;
11956: LD_ADDR_EXP 67
11960: PUSH
11961: LD_INT 1
11963: ST_TO_ADDR
// if p3 = 116 then
11964: LD_VAR 0 3
11968: PUSH
11969: LD_INT 116
11971: EQUAL
11972: IFFALSE 11982
// sComputer := true ;
11974: LD_ADDR_EXP 68
11978: PUSH
11979: LD_INT 1
11981: ST_TO_ADDR
// if p3 = 117 then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 117
11989: EQUAL
11990: IFFALSE 12000
// s30 := true ;
11992: LD_ADDR_EXP 69
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// if p3 = 118 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 118
12007: EQUAL
12008: IFFALSE 12018
// s60 := true ;
12010: LD_ADDR_EXP 70
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// end ; if p2 = 101 then
12018: LD_VAR 0 2
12022: PUSH
12023: LD_INT 101
12025: EQUAL
12026: IFFALSE 12154
// begin case p3 of 1 :
12028: LD_VAR 0 3
12032: PUSH
12033: LD_INT 1
12035: DOUBLE
12036: EQUAL
12037: IFTRUE 12041
12039: GO 12048
12041: POP
// hHackUnlimitedResources ; 2 :
12042: CALL 24252 0 0
12046: GO 12154
12048: LD_INT 2
12050: DOUBLE
12051: EQUAL
12052: IFTRUE 12056
12054: GO 12063
12056: POP
// hHackSetLevel10 ; 3 :
12057: CALL 24385 0 0
12061: GO 12154
12063: LD_INT 3
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12078
12071: POP
// hHackSetLevel10YourUnits ; 4 :
12072: CALL 24470 0 0
12076: GO 12154
12078: LD_INT 4
12080: DOUBLE
12081: EQUAL
12082: IFTRUE 12086
12084: GO 12093
12086: POP
// hHackInvincible ; 5 :
12087: CALL 24918 0 0
12091: GO 12154
12093: LD_INT 5
12095: DOUBLE
12096: EQUAL
12097: IFTRUE 12101
12099: GO 12108
12101: POP
// hHackInvisible ; 6 :
12102: CALL 25029 0 0
12106: GO 12154
12108: LD_INT 6
12110: DOUBLE
12111: EQUAL
12112: IFTRUE 12116
12114: GO 12123
12116: POP
// hHackChangeYourSide ; 7 :
12117: CALL 25086 0 0
12121: GO 12154
12123: LD_INT 7
12125: DOUBLE
12126: EQUAL
12127: IFTRUE 12131
12129: GO 12138
12131: POP
// hHackChangeUnitSide ; 8 :
12132: CALL 25128 0 0
12136: GO 12154
12138: LD_INT 8
12140: DOUBLE
12141: EQUAL
12142: IFTRUE 12146
12144: GO 12153
12146: POP
// hHackFog ; end ;
12147: CALL 25229 0 0
12151: GO 12154
12153: POP
// end ; end ;
12154: LD_VAR 0 7
12158: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12159: GO 12161
12161: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12162: LD_STRING initStreamRollete();
12164: PPUSH
12165: CALL_OW 559
// InitStreamMode ;
12169: CALL 12181 0 0
// DefineStreamItems ( false ) ;
12173: LD_INT 0
12175: PPUSH
12176: CALL 12645 0 1
// end ;
12180: END
// function InitStreamMode ; begin
12181: LD_INT 0
12183: PPUSH
// streamModeActive := false ;
12184: LD_ADDR_EXP 14
12188: PUSH
12189: LD_INT 0
12191: ST_TO_ADDR
// normalCounter := 36 ;
12192: LD_ADDR_EXP 15
12196: PUSH
12197: LD_INT 36
12199: ST_TO_ADDR
// hardcoreCounter := 18 ;
12200: LD_ADDR_EXP 16
12204: PUSH
12205: LD_INT 18
12207: ST_TO_ADDR
// sRocket := false ;
12208: LD_ADDR_EXP 19
12212: PUSH
12213: LD_INT 0
12215: ST_TO_ADDR
// sSpeed := false ;
12216: LD_ADDR_EXP 18
12220: PUSH
12221: LD_INT 0
12223: ST_TO_ADDR
// sEngine := false ;
12224: LD_ADDR_EXP 20
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// sSpec := false ;
12232: LD_ADDR_EXP 17
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// sLevel := false ;
12240: LD_ADDR_EXP 21
12244: PUSH
12245: LD_INT 0
12247: ST_TO_ADDR
// sArmoury := false ;
12248: LD_ADDR_EXP 22
12252: PUSH
12253: LD_INT 0
12255: ST_TO_ADDR
// sRadar := false ;
12256: LD_ADDR_EXP 23
12260: PUSH
12261: LD_INT 0
12263: ST_TO_ADDR
// sBunker := false ;
12264: LD_ADDR_EXP 24
12268: PUSH
12269: LD_INT 0
12271: ST_TO_ADDR
// sHack := false ;
12272: LD_ADDR_EXP 25
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// sFire := false ;
12280: LD_ADDR_EXP 26
12284: PUSH
12285: LD_INT 0
12287: ST_TO_ADDR
// sRefresh := false ;
12288: LD_ADDR_EXP 27
12292: PUSH
12293: LD_INT 0
12295: ST_TO_ADDR
// sExp := false ;
12296: LD_ADDR_EXP 28
12300: PUSH
12301: LD_INT 0
12303: ST_TO_ADDR
// sDepot := false ;
12304: LD_ADDR_EXP 29
12308: PUSH
12309: LD_INT 0
12311: ST_TO_ADDR
// sFlag := false ;
12312: LD_ADDR_EXP 30
12316: PUSH
12317: LD_INT 0
12319: ST_TO_ADDR
// sKamikadze := false ;
12320: LD_ADDR_EXP 38
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// sTroll := false ;
12328: LD_ADDR_EXP 39
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// sSlow := false ;
12336: LD_ADDR_EXP 40
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// sLack := false ;
12344: LD_ADDR_EXP 41
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// sTank := false ;
12352: LD_ADDR_EXP 43
12356: PUSH
12357: LD_INT 0
12359: ST_TO_ADDR
// sRemote := false ;
12360: LD_ADDR_EXP 44
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// sPowell := false ;
12368: LD_ADDR_EXP 45
12372: PUSH
12373: LD_INT 0
12375: ST_TO_ADDR
// sTeleport := false ;
12376: LD_ADDR_EXP 48
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// sOilTower := false ;
12384: LD_ADDR_EXP 50
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// sShovel := false ;
12392: LD_ADDR_EXP 51
12396: PUSH
12397: LD_INT 0
12399: ST_TO_ADDR
// sSheik := false ;
12400: LD_ADDR_EXP 52
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// sEarthquake := false ;
12408: LD_ADDR_EXP 54
12412: PUSH
12413: LD_INT 0
12415: ST_TO_ADDR
// sAI := false ;
12416: LD_ADDR_EXP 55
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// sCargo := false ;
12424: LD_ADDR_EXP 58
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// sDLaser := false ;
12432: LD_ADDR_EXP 59
12436: PUSH
12437: LD_INT 0
12439: ST_TO_ADDR
// sExchange := false ;
12440: LD_ADDR_EXP 60
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// sFac := false ;
12448: LD_ADDR_EXP 61
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// sPower := false ;
12456: LD_ADDR_EXP 62
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// sRandom := false ;
12464: LD_ADDR_EXP 63
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// sShield := false ;
12472: LD_ADDR_EXP 64
12476: PUSH
12477: LD_INT 0
12479: ST_TO_ADDR
// sTime := false ;
12480: LD_ADDR_EXP 65
12484: PUSH
12485: LD_INT 0
12487: ST_TO_ADDR
// sTools := false ;
12488: LD_ADDR_EXP 66
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// sSold := false ;
12496: LD_ADDR_EXP 31
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// sDiff := false ;
12504: LD_ADDR_EXP 32
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// sFog := false ;
12512: LD_ADDR_EXP 35
12516: PUSH
12517: LD_INT 0
12519: ST_TO_ADDR
// sReset := false ;
12520: LD_ADDR_EXP 36
12524: PUSH
12525: LD_INT 0
12527: ST_TO_ADDR
// sSun := false ;
12528: LD_ADDR_EXP 37
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// sTiger := false ;
12536: LD_ADDR_EXP 33
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// sBomb := false ;
12544: LD_ADDR_EXP 34
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// sWound := false ;
12552: LD_ADDR_EXP 42
12556: PUSH
12557: LD_INT 0
12559: ST_TO_ADDR
// sBetray := false ;
12560: LD_ADDR_EXP 46
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// sContamin := false ;
12568: LD_ADDR_EXP 47
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// sOil := false ;
12576: LD_ADDR_EXP 49
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// sStu := false ;
12584: LD_ADDR_EXP 53
12588: PUSH
12589: LD_INT 0
12591: ST_TO_ADDR
// sBazooka := false ;
12592: LD_ADDR_EXP 56
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// sMortar := false ;
12600: LD_ADDR_EXP 57
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// sRanger := false ;
12608: LD_ADDR_EXP 67
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// sComputer := false ;
12616: LD_ADDR_EXP 68
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// s30 := false ;
12624: LD_ADDR_EXP 69
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// s60 := false ;
12632: LD_ADDR_EXP 70
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// end ;
12640: LD_VAR 0 1
12644: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12645: LD_INT 0
12647: PPUSH
12648: PPUSH
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
12653: PPUSH
// result := [ ] ;
12654: LD_ADDR_VAR 0 2
12658: PUSH
12659: EMPTY
12660: ST_TO_ADDR
// if campaign_id = 1 then
12661: LD_OWVAR 69
12665: PUSH
12666: LD_INT 1
12668: EQUAL
12669: IFFALSE 15835
// begin case mission_number of 1 :
12671: LD_OWVAR 70
12675: PUSH
12676: LD_INT 1
12678: DOUBLE
12679: EQUAL
12680: IFTRUE 12684
12682: GO 12760
12684: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12685: LD_ADDR_VAR 0 2
12689: PUSH
12690: LD_INT 2
12692: PUSH
12693: LD_INT 4
12695: PUSH
12696: LD_INT 11
12698: PUSH
12699: LD_INT 12
12701: PUSH
12702: LD_INT 15
12704: PUSH
12705: LD_INT 16
12707: PUSH
12708: LD_INT 22
12710: PUSH
12711: LD_INT 23
12713: PUSH
12714: LD_INT 26
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 101
12730: PUSH
12731: LD_INT 102
12733: PUSH
12734: LD_INT 106
12736: PUSH
12737: LD_INT 116
12739: PUSH
12740: LD_INT 117
12742: PUSH
12743: LD_INT 118
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: ST_TO_ADDR
12758: GO 15833
12760: LD_INT 2
12762: DOUBLE
12763: EQUAL
12764: IFTRUE 12768
12766: GO 12852
12768: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12769: LD_ADDR_VAR 0 2
12773: PUSH
12774: LD_INT 2
12776: PUSH
12777: LD_INT 4
12779: PUSH
12780: LD_INT 11
12782: PUSH
12783: LD_INT 12
12785: PUSH
12786: LD_INT 15
12788: PUSH
12789: LD_INT 16
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 23
12797: PUSH
12798: LD_INT 26
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 101
12814: PUSH
12815: LD_INT 102
12817: PUSH
12818: LD_INT 105
12820: PUSH
12821: LD_INT 106
12823: PUSH
12824: LD_INT 108
12826: PUSH
12827: LD_INT 116
12829: PUSH
12830: LD_INT 117
12832: PUSH
12833: LD_INT 118
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: ST_TO_ADDR
12850: GO 15833
12852: LD_INT 3
12854: DOUBLE
12855: EQUAL
12856: IFTRUE 12860
12858: GO 12948
12860: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12861: LD_ADDR_VAR 0 2
12865: PUSH
12866: LD_INT 2
12868: PUSH
12869: LD_INT 4
12871: PUSH
12872: LD_INT 5
12874: PUSH
12875: LD_INT 11
12877: PUSH
12878: LD_INT 12
12880: PUSH
12881: LD_INT 15
12883: PUSH
12884: LD_INT 16
12886: PUSH
12887: LD_INT 22
12889: PUSH
12890: LD_INT 26
12892: PUSH
12893: LD_INT 36
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 101
12910: PUSH
12911: LD_INT 102
12913: PUSH
12914: LD_INT 105
12916: PUSH
12917: LD_INT 106
12919: PUSH
12920: LD_INT 108
12922: PUSH
12923: LD_INT 116
12925: PUSH
12926: LD_INT 117
12928: PUSH
12929: LD_INT 118
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: ST_TO_ADDR
12946: GO 15833
12948: LD_INT 4
12950: DOUBLE
12951: EQUAL
12952: IFTRUE 12956
12954: GO 13052
12956: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12957: LD_ADDR_VAR 0 2
12961: PUSH
12962: LD_INT 2
12964: PUSH
12965: LD_INT 4
12967: PUSH
12968: LD_INT 5
12970: PUSH
12971: LD_INT 8
12973: PUSH
12974: LD_INT 11
12976: PUSH
12977: LD_INT 12
12979: PUSH
12980: LD_INT 15
12982: PUSH
12983: LD_INT 16
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_INT 23
12991: PUSH
12992: LD_INT 26
12994: PUSH
12995: LD_INT 36
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 101
13014: PUSH
13015: LD_INT 102
13017: PUSH
13018: LD_INT 105
13020: PUSH
13021: LD_INT 106
13023: PUSH
13024: LD_INT 108
13026: PUSH
13027: LD_INT 116
13029: PUSH
13030: LD_INT 117
13032: PUSH
13033: LD_INT 118
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: ST_TO_ADDR
13050: GO 15833
13052: LD_INT 5
13054: DOUBLE
13055: EQUAL
13056: IFTRUE 13060
13058: GO 13172
13060: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13061: LD_ADDR_VAR 0 2
13065: PUSH
13066: LD_INT 2
13068: PUSH
13069: LD_INT 4
13071: PUSH
13072: LD_INT 5
13074: PUSH
13075: LD_INT 6
13077: PUSH
13078: LD_INT 8
13080: PUSH
13081: LD_INT 11
13083: PUSH
13084: LD_INT 12
13086: PUSH
13087: LD_INT 15
13089: PUSH
13090: LD_INT 16
13092: PUSH
13093: LD_INT 22
13095: PUSH
13096: LD_INT 23
13098: PUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 26
13104: PUSH
13105: LD_INT 36
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 101
13126: PUSH
13127: LD_INT 102
13129: PUSH
13130: LD_INT 105
13132: PUSH
13133: LD_INT 106
13135: PUSH
13136: LD_INT 108
13138: PUSH
13139: LD_INT 109
13141: PUSH
13142: LD_INT 112
13144: PUSH
13145: LD_INT 116
13147: PUSH
13148: LD_INT 117
13150: PUSH
13151: LD_INT 118
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: ST_TO_ADDR
13170: GO 15833
13172: LD_INT 6
13174: DOUBLE
13175: EQUAL
13176: IFTRUE 13180
13178: GO 13312
13180: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13181: LD_ADDR_VAR 0 2
13185: PUSH
13186: LD_INT 2
13188: PUSH
13189: LD_INT 4
13191: PUSH
13192: LD_INT 5
13194: PUSH
13195: LD_INT 6
13197: PUSH
13198: LD_INT 8
13200: PUSH
13201: LD_INT 11
13203: PUSH
13204: LD_INT 12
13206: PUSH
13207: LD_INT 15
13209: PUSH
13210: LD_INT 16
13212: PUSH
13213: LD_INT 20
13215: PUSH
13216: LD_INT 21
13218: PUSH
13219: LD_INT 22
13221: PUSH
13222: LD_INT 23
13224: PUSH
13225: LD_INT 25
13227: PUSH
13228: LD_INT 26
13230: PUSH
13231: LD_INT 30
13233: PUSH
13234: LD_INT 31
13236: PUSH
13237: LD_INT 32
13239: PUSH
13240: LD_INT 36
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 101
13266: PUSH
13267: LD_INT 102
13269: PUSH
13270: LD_INT 105
13272: PUSH
13273: LD_INT 106
13275: PUSH
13276: LD_INT 108
13278: PUSH
13279: LD_INT 109
13281: PUSH
13282: LD_INT 112
13284: PUSH
13285: LD_INT 116
13287: PUSH
13288: LD_INT 117
13290: PUSH
13291: LD_INT 118
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: ST_TO_ADDR
13310: GO 15833
13312: LD_INT 7
13314: DOUBLE
13315: EQUAL
13316: IFTRUE 13320
13318: GO 13432
13320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13321: LD_ADDR_VAR 0 2
13325: PUSH
13326: LD_INT 2
13328: PUSH
13329: LD_INT 4
13331: PUSH
13332: LD_INT 5
13334: PUSH
13335: LD_INT 7
13337: PUSH
13338: LD_INT 11
13340: PUSH
13341: LD_INT 12
13343: PUSH
13344: LD_INT 15
13346: PUSH
13347: LD_INT 16
13349: PUSH
13350: LD_INT 20
13352: PUSH
13353: LD_INT 21
13355: PUSH
13356: LD_INT 22
13358: PUSH
13359: LD_INT 23
13361: PUSH
13362: LD_INT 25
13364: PUSH
13365: LD_INT 26
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 101
13386: PUSH
13387: LD_INT 102
13389: PUSH
13390: LD_INT 103
13392: PUSH
13393: LD_INT 105
13395: PUSH
13396: LD_INT 106
13398: PUSH
13399: LD_INT 108
13401: PUSH
13402: LD_INT 112
13404: PUSH
13405: LD_INT 116
13407: PUSH
13408: LD_INT 117
13410: PUSH
13411: LD_INT 118
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: ST_TO_ADDR
13430: GO 15833
13432: LD_INT 8
13434: DOUBLE
13435: EQUAL
13436: IFTRUE 13440
13438: GO 13580
13440: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13441: LD_ADDR_VAR 0 2
13445: PUSH
13446: LD_INT 2
13448: PUSH
13449: LD_INT 4
13451: PUSH
13452: LD_INT 5
13454: PUSH
13455: LD_INT 6
13457: PUSH
13458: LD_INT 7
13460: PUSH
13461: LD_INT 8
13463: PUSH
13464: LD_INT 11
13466: PUSH
13467: LD_INT 12
13469: PUSH
13470: LD_INT 15
13472: PUSH
13473: LD_INT 16
13475: PUSH
13476: LD_INT 20
13478: PUSH
13479: LD_INT 21
13481: PUSH
13482: LD_INT 22
13484: PUSH
13485: LD_INT 23
13487: PUSH
13488: LD_INT 25
13490: PUSH
13491: LD_INT 26
13493: PUSH
13494: LD_INT 30
13496: PUSH
13497: LD_INT 31
13499: PUSH
13500: LD_INT 32
13502: PUSH
13503: LD_INT 36
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 101
13530: PUSH
13531: LD_INT 102
13533: PUSH
13534: LD_INT 103
13536: PUSH
13537: LD_INT 105
13539: PUSH
13540: LD_INT 106
13542: PUSH
13543: LD_INT 108
13545: PUSH
13546: LD_INT 109
13548: PUSH
13549: LD_INT 112
13551: PUSH
13552: LD_INT 116
13554: PUSH
13555: LD_INT 117
13557: PUSH
13558: LD_INT 118
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: ST_TO_ADDR
13578: GO 15833
13580: LD_INT 9
13582: DOUBLE
13583: EQUAL
13584: IFTRUE 13588
13586: GO 13736
13588: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13589: LD_ADDR_VAR 0 2
13593: PUSH
13594: LD_INT 2
13596: PUSH
13597: LD_INT 4
13599: PUSH
13600: LD_INT 5
13602: PUSH
13603: LD_INT 6
13605: PUSH
13606: LD_INT 7
13608: PUSH
13609: LD_INT 8
13611: PUSH
13612: LD_INT 11
13614: PUSH
13615: LD_INT 12
13617: PUSH
13618: LD_INT 15
13620: PUSH
13621: LD_INT 16
13623: PUSH
13624: LD_INT 20
13626: PUSH
13627: LD_INT 21
13629: PUSH
13630: LD_INT 22
13632: PUSH
13633: LD_INT 23
13635: PUSH
13636: LD_INT 25
13638: PUSH
13639: LD_INT 26
13641: PUSH
13642: LD_INT 28
13644: PUSH
13645: LD_INT 30
13647: PUSH
13648: LD_INT 31
13650: PUSH
13651: LD_INT 32
13653: PUSH
13654: LD_INT 36
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 101
13682: PUSH
13683: LD_INT 102
13685: PUSH
13686: LD_INT 103
13688: PUSH
13689: LD_INT 105
13691: PUSH
13692: LD_INT 106
13694: PUSH
13695: LD_INT 108
13697: PUSH
13698: LD_INT 109
13700: PUSH
13701: LD_INT 112
13703: PUSH
13704: LD_INT 114
13706: PUSH
13707: LD_INT 116
13709: PUSH
13710: LD_INT 117
13712: PUSH
13713: LD_INT 118
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: ST_TO_ADDR
13734: GO 15833
13736: LD_INT 10
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13744
13742: GO 13940
13744: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_INT 2
13752: PUSH
13753: LD_INT 4
13755: PUSH
13756: LD_INT 5
13758: PUSH
13759: LD_INT 6
13761: PUSH
13762: LD_INT 7
13764: PUSH
13765: LD_INT 8
13767: PUSH
13768: LD_INT 9
13770: PUSH
13771: LD_INT 10
13773: PUSH
13774: LD_INT 11
13776: PUSH
13777: LD_INT 12
13779: PUSH
13780: LD_INT 13
13782: PUSH
13783: LD_INT 14
13785: PUSH
13786: LD_INT 15
13788: PUSH
13789: LD_INT 16
13791: PUSH
13792: LD_INT 17
13794: PUSH
13795: LD_INT 18
13797: PUSH
13798: LD_INT 19
13800: PUSH
13801: LD_INT 20
13803: PUSH
13804: LD_INT 21
13806: PUSH
13807: LD_INT 22
13809: PUSH
13810: LD_INT 23
13812: PUSH
13813: LD_INT 24
13815: PUSH
13816: LD_INT 25
13818: PUSH
13819: LD_INT 26
13821: PUSH
13822: LD_INT 28
13824: PUSH
13825: LD_INT 30
13827: PUSH
13828: LD_INT 31
13830: PUSH
13831: LD_INT 32
13833: PUSH
13834: LD_INT 36
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 101
13870: PUSH
13871: LD_INT 102
13873: PUSH
13874: LD_INT 103
13876: PUSH
13877: LD_INT 104
13879: PUSH
13880: LD_INT 105
13882: PUSH
13883: LD_INT 106
13885: PUSH
13886: LD_INT 107
13888: PUSH
13889: LD_INT 108
13891: PUSH
13892: LD_INT 109
13894: PUSH
13895: LD_INT 110
13897: PUSH
13898: LD_INT 111
13900: PUSH
13901: LD_INT 112
13903: PUSH
13904: LD_INT 114
13906: PUSH
13907: LD_INT 116
13909: PUSH
13910: LD_INT 117
13912: PUSH
13913: LD_INT 118
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: ST_TO_ADDR
13938: GO 15833
13940: LD_INT 11
13942: DOUBLE
13943: EQUAL
13944: IFTRUE 13948
13946: GO 14152
13948: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13949: LD_ADDR_VAR 0 2
13953: PUSH
13954: LD_INT 2
13956: PUSH
13957: LD_INT 3
13959: PUSH
13960: LD_INT 4
13962: PUSH
13963: LD_INT 5
13965: PUSH
13966: LD_INT 6
13968: PUSH
13969: LD_INT 7
13971: PUSH
13972: LD_INT 8
13974: PUSH
13975: LD_INT 9
13977: PUSH
13978: LD_INT 10
13980: PUSH
13981: LD_INT 11
13983: PUSH
13984: LD_INT 12
13986: PUSH
13987: LD_INT 13
13989: PUSH
13990: LD_INT 14
13992: PUSH
13993: LD_INT 15
13995: PUSH
13996: LD_INT 16
13998: PUSH
13999: LD_INT 17
14001: PUSH
14002: LD_INT 18
14004: PUSH
14005: LD_INT 19
14007: PUSH
14008: LD_INT 20
14010: PUSH
14011: LD_INT 21
14013: PUSH
14014: LD_INT 22
14016: PUSH
14017: LD_INT 23
14019: PUSH
14020: LD_INT 24
14022: PUSH
14023: LD_INT 25
14025: PUSH
14026: LD_INT 26
14028: PUSH
14029: LD_INT 28
14031: PUSH
14032: LD_INT 30
14034: PUSH
14035: LD_INT 31
14037: PUSH
14038: LD_INT 32
14040: PUSH
14041: LD_INT 34
14043: PUSH
14044: LD_INT 36
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 101
14082: PUSH
14083: LD_INT 102
14085: PUSH
14086: LD_INT 103
14088: PUSH
14089: LD_INT 104
14091: PUSH
14092: LD_INT 105
14094: PUSH
14095: LD_INT 106
14097: PUSH
14098: LD_INT 107
14100: PUSH
14101: LD_INT 108
14103: PUSH
14104: LD_INT 109
14106: PUSH
14107: LD_INT 110
14109: PUSH
14110: LD_INT 111
14112: PUSH
14113: LD_INT 112
14115: PUSH
14116: LD_INT 114
14118: PUSH
14119: LD_INT 116
14121: PUSH
14122: LD_INT 117
14124: PUSH
14125: LD_INT 118
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: ST_TO_ADDR
14150: GO 15833
14152: LD_INT 12
14154: DOUBLE
14155: EQUAL
14156: IFTRUE 14160
14158: GO 14380
14160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14161: LD_ADDR_VAR 0 2
14165: PUSH
14166: LD_INT 1
14168: PUSH
14169: LD_INT 2
14171: PUSH
14172: LD_INT 3
14174: PUSH
14175: LD_INT 4
14177: PUSH
14178: LD_INT 5
14180: PUSH
14181: LD_INT 6
14183: PUSH
14184: LD_INT 7
14186: PUSH
14187: LD_INT 8
14189: PUSH
14190: LD_INT 9
14192: PUSH
14193: LD_INT 10
14195: PUSH
14196: LD_INT 11
14198: PUSH
14199: LD_INT 12
14201: PUSH
14202: LD_INT 13
14204: PUSH
14205: LD_INT 14
14207: PUSH
14208: LD_INT 15
14210: PUSH
14211: LD_INT 16
14213: PUSH
14214: LD_INT 17
14216: PUSH
14217: LD_INT 18
14219: PUSH
14220: LD_INT 19
14222: PUSH
14223: LD_INT 20
14225: PUSH
14226: LD_INT 21
14228: PUSH
14229: LD_INT 22
14231: PUSH
14232: LD_INT 23
14234: PUSH
14235: LD_INT 24
14237: PUSH
14238: LD_INT 25
14240: PUSH
14241: LD_INT 26
14243: PUSH
14244: LD_INT 27
14246: PUSH
14247: LD_INT 28
14249: PUSH
14250: LD_INT 30
14252: PUSH
14253: LD_INT 31
14255: PUSH
14256: LD_INT 32
14258: PUSH
14259: LD_INT 33
14261: PUSH
14262: LD_INT 34
14264: PUSH
14265: LD_INT 36
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: PUSH
14304: LD_INT 101
14306: PUSH
14307: LD_INT 102
14309: PUSH
14310: LD_INT 103
14312: PUSH
14313: LD_INT 104
14315: PUSH
14316: LD_INT 105
14318: PUSH
14319: LD_INT 106
14321: PUSH
14322: LD_INT 107
14324: PUSH
14325: LD_INT 108
14327: PUSH
14328: LD_INT 109
14330: PUSH
14331: LD_INT 110
14333: PUSH
14334: LD_INT 111
14336: PUSH
14337: LD_INT 112
14339: PUSH
14340: LD_INT 113
14342: PUSH
14343: LD_INT 114
14345: PUSH
14346: LD_INT 116
14348: PUSH
14349: LD_INT 117
14351: PUSH
14352: LD_INT 118
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: ST_TO_ADDR
14378: GO 15833
14380: LD_INT 13
14382: DOUBLE
14383: EQUAL
14384: IFTRUE 14388
14386: GO 14596
14388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: LD_INT 2
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: LD_INT 5
14408: PUSH
14409: LD_INT 8
14411: PUSH
14412: LD_INT 9
14414: PUSH
14415: LD_INT 10
14417: PUSH
14418: LD_INT 11
14420: PUSH
14421: LD_INT 12
14423: PUSH
14424: LD_INT 14
14426: PUSH
14427: LD_INT 15
14429: PUSH
14430: LD_INT 16
14432: PUSH
14433: LD_INT 17
14435: PUSH
14436: LD_INT 18
14438: PUSH
14439: LD_INT 19
14441: PUSH
14442: LD_INT 20
14444: PUSH
14445: LD_INT 21
14447: PUSH
14448: LD_INT 22
14450: PUSH
14451: LD_INT 23
14453: PUSH
14454: LD_INT 24
14456: PUSH
14457: LD_INT 25
14459: PUSH
14460: LD_INT 26
14462: PUSH
14463: LD_INT 27
14465: PUSH
14466: LD_INT 28
14468: PUSH
14469: LD_INT 30
14471: PUSH
14472: LD_INT 31
14474: PUSH
14475: LD_INT 32
14477: PUSH
14478: LD_INT 33
14480: PUSH
14481: LD_INT 34
14483: PUSH
14484: LD_INT 36
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 101
14522: PUSH
14523: LD_INT 102
14525: PUSH
14526: LD_INT 103
14528: PUSH
14529: LD_INT 104
14531: PUSH
14532: LD_INT 105
14534: PUSH
14535: LD_INT 106
14537: PUSH
14538: LD_INT 107
14540: PUSH
14541: LD_INT 108
14543: PUSH
14544: LD_INT 109
14546: PUSH
14547: LD_INT 110
14549: PUSH
14550: LD_INT 111
14552: PUSH
14553: LD_INT 112
14555: PUSH
14556: LD_INT 113
14558: PUSH
14559: LD_INT 114
14561: PUSH
14562: LD_INT 116
14564: PUSH
14565: LD_INT 117
14567: PUSH
14568: LD_INT 118
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: ST_TO_ADDR
14594: GO 15833
14596: LD_INT 14
14598: DOUBLE
14599: EQUAL
14600: IFTRUE 14604
14602: GO 14828
14604: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14605: LD_ADDR_VAR 0 2
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: LD_INT 2
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: LD_INT 4
14621: PUSH
14622: LD_INT 5
14624: PUSH
14625: LD_INT 6
14627: PUSH
14628: LD_INT 7
14630: PUSH
14631: LD_INT 8
14633: PUSH
14634: LD_INT 9
14636: PUSH
14637: LD_INT 10
14639: PUSH
14640: LD_INT 11
14642: PUSH
14643: LD_INT 12
14645: PUSH
14646: LD_INT 13
14648: PUSH
14649: LD_INT 14
14651: PUSH
14652: LD_INT 15
14654: PUSH
14655: LD_INT 16
14657: PUSH
14658: LD_INT 17
14660: PUSH
14661: LD_INT 18
14663: PUSH
14664: LD_INT 19
14666: PUSH
14667: LD_INT 20
14669: PUSH
14670: LD_INT 21
14672: PUSH
14673: LD_INT 22
14675: PUSH
14676: LD_INT 23
14678: PUSH
14679: LD_INT 24
14681: PUSH
14682: LD_INT 25
14684: PUSH
14685: LD_INT 26
14687: PUSH
14688: LD_INT 27
14690: PUSH
14691: LD_INT 28
14693: PUSH
14694: LD_INT 29
14696: PUSH
14697: LD_INT 30
14699: PUSH
14700: LD_INT 31
14702: PUSH
14703: LD_INT 32
14705: PUSH
14706: LD_INT 33
14708: PUSH
14709: LD_INT 34
14711: PUSH
14712: LD_INT 36
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 101
14754: PUSH
14755: LD_INT 102
14757: PUSH
14758: LD_INT 103
14760: PUSH
14761: LD_INT 104
14763: PUSH
14764: LD_INT 105
14766: PUSH
14767: LD_INT 106
14769: PUSH
14770: LD_INT 107
14772: PUSH
14773: LD_INT 108
14775: PUSH
14776: LD_INT 109
14778: PUSH
14779: LD_INT 110
14781: PUSH
14782: LD_INT 111
14784: PUSH
14785: LD_INT 112
14787: PUSH
14788: LD_INT 113
14790: PUSH
14791: LD_INT 114
14793: PUSH
14794: LD_INT 116
14796: PUSH
14797: LD_INT 117
14799: PUSH
14800: LD_INT 118
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: ST_TO_ADDR
14826: GO 15833
14828: LD_INT 15
14830: DOUBLE
14831: EQUAL
14832: IFTRUE 14836
14834: GO 15060
14836: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14837: LD_ADDR_VAR 0 2
14841: PUSH
14842: LD_INT 1
14844: PUSH
14845: LD_INT 2
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: LD_INT 4
14853: PUSH
14854: LD_INT 5
14856: PUSH
14857: LD_INT 6
14859: PUSH
14860: LD_INT 7
14862: PUSH
14863: LD_INT 8
14865: PUSH
14866: LD_INT 9
14868: PUSH
14869: LD_INT 10
14871: PUSH
14872: LD_INT 11
14874: PUSH
14875: LD_INT 12
14877: PUSH
14878: LD_INT 13
14880: PUSH
14881: LD_INT 14
14883: PUSH
14884: LD_INT 15
14886: PUSH
14887: LD_INT 16
14889: PUSH
14890: LD_INT 17
14892: PUSH
14893: LD_INT 18
14895: PUSH
14896: LD_INT 19
14898: PUSH
14899: LD_INT 20
14901: PUSH
14902: LD_INT 21
14904: PUSH
14905: LD_INT 22
14907: PUSH
14908: LD_INT 23
14910: PUSH
14911: LD_INT 24
14913: PUSH
14914: LD_INT 25
14916: PUSH
14917: LD_INT 26
14919: PUSH
14920: LD_INT 27
14922: PUSH
14923: LD_INT 28
14925: PUSH
14926: LD_INT 29
14928: PUSH
14929: LD_INT 30
14931: PUSH
14932: LD_INT 31
14934: PUSH
14935: LD_INT 32
14937: PUSH
14938: LD_INT 33
14940: PUSH
14941: LD_INT 34
14943: PUSH
14944: LD_INT 36
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 101
14986: PUSH
14987: LD_INT 102
14989: PUSH
14990: LD_INT 103
14992: PUSH
14993: LD_INT 104
14995: PUSH
14996: LD_INT 105
14998: PUSH
14999: LD_INT 106
15001: PUSH
15002: LD_INT 107
15004: PUSH
15005: LD_INT 108
15007: PUSH
15008: LD_INT 109
15010: PUSH
15011: LD_INT 110
15013: PUSH
15014: LD_INT 111
15016: PUSH
15017: LD_INT 112
15019: PUSH
15020: LD_INT 113
15022: PUSH
15023: LD_INT 114
15025: PUSH
15026: LD_INT 116
15028: PUSH
15029: LD_INT 117
15031: PUSH
15032: LD_INT 118
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: ST_TO_ADDR
15058: GO 15833
15060: LD_INT 16
15062: DOUBLE
15063: EQUAL
15064: IFTRUE 15068
15066: GO 15204
15068: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15069: LD_ADDR_VAR 0 2
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: LD_INT 4
15079: PUSH
15080: LD_INT 5
15082: PUSH
15083: LD_INT 7
15085: PUSH
15086: LD_INT 11
15088: PUSH
15089: LD_INT 12
15091: PUSH
15092: LD_INT 15
15094: PUSH
15095: LD_INT 16
15097: PUSH
15098: LD_INT 20
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 22
15106: PUSH
15107: LD_INT 23
15109: PUSH
15110: LD_INT 25
15112: PUSH
15113: LD_INT 26
15115: PUSH
15116: LD_INT 30
15118: PUSH
15119: LD_INT 31
15121: PUSH
15122: LD_INT 32
15124: PUSH
15125: LD_INT 33
15127: PUSH
15128: LD_INT 34
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 101
15154: PUSH
15155: LD_INT 102
15157: PUSH
15158: LD_INT 103
15160: PUSH
15161: LD_INT 106
15163: PUSH
15164: LD_INT 108
15166: PUSH
15167: LD_INT 112
15169: PUSH
15170: LD_INT 113
15172: PUSH
15173: LD_INT 114
15175: PUSH
15176: LD_INT 116
15178: PUSH
15179: LD_INT 117
15181: PUSH
15182: LD_INT 118
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: ST_TO_ADDR
15202: GO 15833
15204: LD_INT 17
15206: DOUBLE
15207: EQUAL
15208: IFTRUE 15212
15210: GO 15436
15212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15213: LD_ADDR_VAR 0 2
15217: PUSH
15218: LD_INT 1
15220: PUSH
15221: LD_INT 2
15223: PUSH
15224: LD_INT 3
15226: PUSH
15227: LD_INT 4
15229: PUSH
15230: LD_INT 5
15232: PUSH
15233: LD_INT 6
15235: PUSH
15236: LD_INT 7
15238: PUSH
15239: LD_INT 8
15241: PUSH
15242: LD_INT 9
15244: PUSH
15245: LD_INT 10
15247: PUSH
15248: LD_INT 11
15250: PUSH
15251: LD_INT 12
15253: PUSH
15254: LD_INT 13
15256: PUSH
15257: LD_INT 14
15259: PUSH
15260: LD_INT 15
15262: PUSH
15263: LD_INT 16
15265: PUSH
15266: LD_INT 17
15268: PUSH
15269: LD_INT 18
15271: PUSH
15272: LD_INT 19
15274: PUSH
15275: LD_INT 20
15277: PUSH
15278: LD_INT 21
15280: PUSH
15281: LD_INT 22
15283: PUSH
15284: LD_INT 23
15286: PUSH
15287: LD_INT 24
15289: PUSH
15290: LD_INT 25
15292: PUSH
15293: LD_INT 26
15295: PUSH
15296: LD_INT 27
15298: PUSH
15299: LD_INT 28
15301: PUSH
15302: LD_INT 29
15304: PUSH
15305: LD_INT 30
15307: PUSH
15308: LD_INT 31
15310: PUSH
15311: LD_INT 32
15313: PUSH
15314: LD_INT 33
15316: PUSH
15317: LD_INT 34
15319: PUSH
15320: LD_INT 36
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 101
15362: PUSH
15363: LD_INT 102
15365: PUSH
15366: LD_INT 103
15368: PUSH
15369: LD_INT 104
15371: PUSH
15372: LD_INT 105
15374: PUSH
15375: LD_INT 106
15377: PUSH
15378: LD_INT 107
15380: PUSH
15381: LD_INT 108
15383: PUSH
15384: LD_INT 109
15386: PUSH
15387: LD_INT 110
15389: PUSH
15390: LD_INT 111
15392: PUSH
15393: LD_INT 112
15395: PUSH
15396: LD_INT 113
15398: PUSH
15399: LD_INT 114
15401: PUSH
15402: LD_INT 116
15404: PUSH
15405: LD_INT 117
15407: PUSH
15408: LD_INT 118
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: ST_TO_ADDR
15434: GO 15833
15436: LD_INT 18
15438: DOUBLE
15439: EQUAL
15440: IFTRUE 15444
15442: GO 15592
15444: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15445: LD_ADDR_VAR 0 2
15449: PUSH
15450: LD_INT 2
15452: PUSH
15453: LD_INT 4
15455: PUSH
15456: LD_INT 5
15458: PUSH
15459: LD_INT 7
15461: PUSH
15462: LD_INT 11
15464: PUSH
15465: LD_INT 12
15467: PUSH
15468: LD_INT 15
15470: PUSH
15471: LD_INT 16
15473: PUSH
15474: LD_INT 20
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 22
15482: PUSH
15483: LD_INT 23
15485: PUSH
15486: LD_INT 25
15488: PUSH
15489: LD_INT 26
15491: PUSH
15492: LD_INT 30
15494: PUSH
15495: LD_INT 31
15497: PUSH
15498: LD_INT 32
15500: PUSH
15501: LD_INT 33
15503: PUSH
15504: LD_INT 34
15506: PUSH
15507: LD_INT 35
15509: PUSH
15510: LD_INT 36
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 101
15538: PUSH
15539: LD_INT 102
15541: PUSH
15542: LD_INT 103
15544: PUSH
15545: LD_INT 106
15547: PUSH
15548: LD_INT 108
15550: PUSH
15551: LD_INT 112
15553: PUSH
15554: LD_INT 113
15556: PUSH
15557: LD_INT 114
15559: PUSH
15560: LD_INT 115
15562: PUSH
15563: LD_INT 116
15565: PUSH
15566: LD_INT 117
15568: PUSH
15569: LD_INT 118
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: ST_TO_ADDR
15590: GO 15833
15592: LD_INT 19
15594: DOUBLE
15595: EQUAL
15596: IFTRUE 15600
15598: GO 15832
15600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 1
15608: PUSH
15609: LD_INT 2
15611: PUSH
15612: LD_INT 3
15614: PUSH
15615: LD_INT 4
15617: PUSH
15618: LD_INT 5
15620: PUSH
15621: LD_INT 6
15623: PUSH
15624: LD_INT 7
15626: PUSH
15627: LD_INT 8
15629: PUSH
15630: LD_INT 9
15632: PUSH
15633: LD_INT 10
15635: PUSH
15636: LD_INT 11
15638: PUSH
15639: LD_INT 12
15641: PUSH
15642: LD_INT 13
15644: PUSH
15645: LD_INT 14
15647: PUSH
15648: LD_INT 15
15650: PUSH
15651: LD_INT 16
15653: PUSH
15654: LD_INT 17
15656: PUSH
15657: LD_INT 18
15659: PUSH
15660: LD_INT 19
15662: PUSH
15663: LD_INT 20
15665: PUSH
15666: LD_INT 21
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_INT 23
15674: PUSH
15675: LD_INT 24
15677: PUSH
15678: LD_INT 25
15680: PUSH
15681: LD_INT 26
15683: PUSH
15684: LD_INT 27
15686: PUSH
15687: LD_INT 28
15689: PUSH
15690: LD_INT 29
15692: PUSH
15693: LD_INT 30
15695: PUSH
15696: LD_INT 31
15698: PUSH
15699: LD_INT 32
15701: PUSH
15702: LD_INT 33
15704: PUSH
15705: LD_INT 34
15707: PUSH
15708: LD_INT 35
15710: PUSH
15711: LD_INT 36
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 101
15754: PUSH
15755: LD_INT 102
15757: PUSH
15758: LD_INT 103
15760: PUSH
15761: LD_INT 104
15763: PUSH
15764: LD_INT 105
15766: PUSH
15767: LD_INT 106
15769: PUSH
15770: LD_INT 107
15772: PUSH
15773: LD_INT 108
15775: PUSH
15776: LD_INT 109
15778: PUSH
15779: LD_INT 110
15781: PUSH
15782: LD_INT 111
15784: PUSH
15785: LD_INT 112
15787: PUSH
15788: LD_INT 113
15790: PUSH
15791: LD_INT 114
15793: PUSH
15794: LD_INT 115
15796: PUSH
15797: LD_INT 116
15799: PUSH
15800: LD_INT 117
15802: PUSH
15803: LD_INT 118
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: ST_TO_ADDR
15830: GO 15833
15832: POP
// end else
15833: GO 16064
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: LD_INT 5
15854: PUSH
15855: LD_INT 6
15857: PUSH
15858: LD_INT 7
15860: PUSH
15861: LD_INT 8
15863: PUSH
15864: LD_INT 9
15866: PUSH
15867: LD_INT 10
15869: PUSH
15870: LD_INT 11
15872: PUSH
15873: LD_INT 12
15875: PUSH
15876: LD_INT 13
15878: PUSH
15879: LD_INT 14
15881: PUSH
15882: LD_INT 15
15884: PUSH
15885: LD_INT 16
15887: PUSH
15888: LD_INT 17
15890: PUSH
15891: LD_INT 18
15893: PUSH
15894: LD_INT 19
15896: PUSH
15897: LD_INT 20
15899: PUSH
15900: LD_INT 21
15902: PUSH
15903: LD_INT 22
15905: PUSH
15906: LD_INT 23
15908: PUSH
15909: LD_INT 24
15911: PUSH
15912: LD_INT 25
15914: PUSH
15915: LD_INT 26
15917: PUSH
15918: LD_INT 27
15920: PUSH
15921: LD_INT 28
15923: PUSH
15924: LD_INT 29
15926: PUSH
15927: LD_INT 30
15929: PUSH
15930: LD_INT 31
15932: PUSH
15933: LD_INT 32
15935: PUSH
15936: LD_INT 33
15938: PUSH
15939: LD_INT 34
15941: PUSH
15942: LD_INT 35
15944: PUSH
15945: LD_INT 36
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 101
15988: PUSH
15989: LD_INT 102
15991: PUSH
15992: LD_INT 103
15994: PUSH
15995: LD_INT 104
15997: PUSH
15998: LD_INT 105
16000: PUSH
16001: LD_INT 106
16003: PUSH
16004: LD_INT 107
16006: PUSH
16007: LD_INT 108
16009: PUSH
16010: LD_INT 109
16012: PUSH
16013: LD_INT 110
16015: PUSH
16016: LD_INT 111
16018: PUSH
16019: LD_INT 112
16021: PUSH
16022: LD_INT 113
16024: PUSH
16025: LD_INT 114
16027: PUSH
16028: LD_INT 115
16030: PUSH
16031: LD_INT 116
16033: PUSH
16034: LD_INT 117
16036: PUSH
16037: LD_INT 118
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: ST_TO_ADDR
// if result then
16064: LD_VAR 0 2
16068: IFFALSE 16854
// begin normal :=  ;
16070: LD_ADDR_VAR 0 5
16074: PUSH
16075: LD_STRING 
16077: ST_TO_ADDR
// hardcore :=  ;
16078: LD_ADDR_VAR 0 6
16082: PUSH
16083: LD_STRING 
16085: ST_TO_ADDR
// active :=  ;
16086: LD_ADDR_VAR 0 7
16090: PUSH
16091: LD_STRING 
16093: ST_TO_ADDR
// for i = 1 to normalCounter do
16094: LD_ADDR_VAR 0 8
16098: PUSH
16099: DOUBLE
16100: LD_INT 1
16102: DEC
16103: ST_TO_ADDR
16104: LD_EXP 15
16108: PUSH
16109: FOR_TO
16110: IFFALSE 16211
// begin tmp := 0 ;
16112: LD_ADDR_VAR 0 3
16116: PUSH
16117: LD_STRING 0
16119: ST_TO_ADDR
// if result [ 1 ] then
16120: LD_VAR 0 2
16124: PUSH
16125: LD_INT 1
16127: ARRAY
16128: IFFALSE 16193
// if result [ 1 ] [ 1 ] = i then
16130: LD_VAR 0 2
16134: PUSH
16135: LD_INT 1
16137: ARRAY
16138: PUSH
16139: LD_INT 1
16141: ARRAY
16142: PUSH
16143: LD_VAR 0 8
16147: EQUAL
16148: IFFALSE 16193
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16150: LD_ADDR_VAR 0 2
16154: PUSH
16155: LD_VAR 0 2
16159: PPUSH
16160: LD_INT 1
16162: PPUSH
16163: LD_VAR 0 2
16167: PUSH
16168: LD_INT 1
16170: ARRAY
16171: PPUSH
16172: LD_INT 1
16174: PPUSH
16175: CALL_OW 3
16179: PPUSH
16180: CALL_OW 1
16184: ST_TO_ADDR
// tmp := 1 ;
16185: LD_ADDR_VAR 0 3
16189: PUSH
16190: LD_STRING 1
16192: ST_TO_ADDR
// end ; normal := normal & tmp ;
16193: LD_ADDR_VAR 0 5
16197: PUSH
16198: LD_VAR 0 5
16202: PUSH
16203: LD_VAR 0 3
16207: STR
16208: ST_TO_ADDR
// end ;
16209: GO 16109
16211: POP
16212: POP
// for i = 1 to hardcoreCounter do
16213: LD_ADDR_VAR 0 8
16217: PUSH
16218: DOUBLE
16219: LD_INT 1
16221: DEC
16222: ST_TO_ADDR
16223: LD_EXP 16
16227: PUSH
16228: FOR_TO
16229: IFFALSE 16334
// begin tmp := 0 ;
16231: LD_ADDR_VAR 0 3
16235: PUSH
16236: LD_STRING 0
16238: ST_TO_ADDR
// if result [ 2 ] then
16239: LD_VAR 0 2
16243: PUSH
16244: LD_INT 2
16246: ARRAY
16247: IFFALSE 16316
// if result [ 2 ] [ 1 ] = 100 + i then
16249: LD_VAR 0 2
16253: PUSH
16254: LD_INT 2
16256: ARRAY
16257: PUSH
16258: LD_INT 1
16260: ARRAY
16261: PUSH
16262: LD_INT 100
16264: PUSH
16265: LD_VAR 0 8
16269: PLUS
16270: EQUAL
16271: IFFALSE 16316
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: LD_VAR 0 2
16282: PPUSH
16283: LD_INT 2
16285: PPUSH
16286: LD_VAR 0 2
16290: PUSH
16291: LD_INT 2
16293: ARRAY
16294: PPUSH
16295: LD_INT 1
16297: PPUSH
16298: CALL_OW 3
16302: PPUSH
16303: CALL_OW 1
16307: ST_TO_ADDR
// tmp := 1 ;
16308: LD_ADDR_VAR 0 3
16312: PUSH
16313: LD_STRING 1
16315: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16316: LD_ADDR_VAR 0 6
16320: PUSH
16321: LD_VAR 0 6
16325: PUSH
16326: LD_VAR 0 3
16330: STR
16331: ST_TO_ADDR
// end ;
16332: GO 16228
16334: POP
16335: POP
// if isGameLoad then
16336: LD_VAR 0 1
16340: IFFALSE 16815
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16342: LD_ADDR_VAR 0 4
16346: PUSH
16347: LD_EXP 19
16351: PUSH
16352: LD_EXP 18
16356: PUSH
16357: LD_EXP 20
16361: PUSH
16362: LD_EXP 17
16366: PUSH
16367: LD_EXP 21
16371: PUSH
16372: LD_EXP 22
16376: PUSH
16377: LD_EXP 23
16381: PUSH
16382: LD_EXP 24
16386: PUSH
16387: LD_EXP 25
16391: PUSH
16392: LD_EXP 26
16396: PUSH
16397: LD_EXP 27
16401: PUSH
16402: LD_EXP 28
16406: PUSH
16407: LD_EXP 29
16411: PUSH
16412: LD_EXP 30
16416: PUSH
16417: LD_EXP 38
16421: PUSH
16422: LD_EXP 39
16426: PUSH
16427: LD_EXP 40
16431: PUSH
16432: LD_EXP 41
16436: PUSH
16437: LD_EXP 43
16441: PUSH
16442: LD_EXP 44
16446: PUSH
16447: LD_EXP 45
16451: PUSH
16452: LD_EXP 48
16456: PUSH
16457: LD_EXP 50
16461: PUSH
16462: LD_EXP 51
16466: PUSH
16467: LD_EXP 52
16471: PUSH
16472: LD_EXP 54
16476: PUSH
16477: LD_EXP 55
16481: PUSH
16482: LD_EXP 58
16486: PUSH
16487: LD_EXP 59
16491: PUSH
16492: LD_EXP 60
16496: PUSH
16497: LD_EXP 61
16501: PUSH
16502: LD_EXP 62
16506: PUSH
16507: LD_EXP 63
16511: PUSH
16512: LD_EXP 64
16516: PUSH
16517: LD_EXP 65
16521: PUSH
16522: LD_EXP 66
16526: PUSH
16527: LD_EXP 31
16531: PUSH
16532: LD_EXP 32
16536: PUSH
16537: LD_EXP 35
16541: PUSH
16542: LD_EXP 36
16546: PUSH
16547: LD_EXP 37
16551: PUSH
16552: LD_EXP 33
16556: PUSH
16557: LD_EXP 34
16561: PUSH
16562: LD_EXP 42
16566: PUSH
16567: LD_EXP 46
16571: PUSH
16572: LD_EXP 47
16576: PUSH
16577: LD_EXP 49
16581: PUSH
16582: LD_EXP 53
16586: PUSH
16587: LD_EXP 56
16591: PUSH
16592: LD_EXP 57
16596: PUSH
16597: LD_EXP 67
16601: PUSH
16602: LD_EXP 68
16606: PUSH
16607: LD_EXP 69
16611: PUSH
16612: LD_EXP 70
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: ST_TO_ADDR
// tmp :=  ;
16673: LD_ADDR_VAR 0 3
16677: PUSH
16678: LD_STRING 
16680: ST_TO_ADDR
// for i = 1 to normalCounter do
16681: LD_ADDR_VAR 0 8
16685: PUSH
16686: DOUBLE
16687: LD_INT 1
16689: DEC
16690: ST_TO_ADDR
16691: LD_EXP 15
16695: PUSH
16696: FOR_TO
16697: IFFALSE 16733
// begin if flags [ i ] then
16699: LD_VAR 0 4
16703: PUSH
16704: LD_VAR 0 8
16708: ARRAY
16709: IFFALSE 16731
// tmp := tmp & i & ; ;
16711: LD_ADDR_VAR 0 3
16715: PUSH
16716: LD_VAR 0 3
16720: PUSH
16721: LD_VAR 0 8
16725: STR
16726: PUSH
16727: LD_STRING ;
16729: STR
16730: ST_TO_ADDR
// end ;
16731: GO 16696
16733: POP
16734: POP
// for i = 1 to hardcoreCounter do
16735: LD_ADDR_VAR 0 8
16739: PUSH
16740: DOUBLE
16741: LD_INT 1
16743: DEC
16744: ST_TO_ADDR
16745: LD_EXP 16
16749: PUSH
16750: FOR_TO
16751: IFFALSE 16797
// begin if flags [ normalCounter + i ] then
16753: LD_VAR 0 4
16757: PUSH
16758: LD_EXP 15
16762: PUSH
16763: LD_VAR 0 8
16767: PLUS
16768: ARRAY
16769: IFFALSE 16795
// tmp := tmp & ( 100 + i ) & ; ;
16771: LD_ADDR_VAR 0 3
16775: PUSH
16776: LD_VAR 0 3
16780: PUSH
16781: LD_INT 100
16783: PUSH
16784: LD_VAR 0 8
16788: PLUS
16789: STR
16790: PUSH
16791: LD_STRING ;
16793: STR
16794: ST_TO_ADDR
// end ;
16795: GO 16750
16797: POP
16798: POP
// if tmp then
16799: LD_VAR 0 3
16803: IFFALSE 16815
// active := tmp ;
16805: LD_ADDR_VAR 0 7
16809: PUSH
16810: LD_VAR 0 3
16814: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16815: LD_STRING getStreamItemsFromMission("
16817: PUSH
16818: LD_VAR 0 5
16822: STR
16823: PUSH
16824: LD_STRING ","
16826: STR
16827: PUSH
16828: LD_VAR 0 6
16832: STR
16833: PUSH
16834: LD_STRING ","
16836: STR
16837: PUSH
16838: LD_VAR 0 7
16842: STR
16843: PUSH
16844: LD_STRING ")
16846: STR
16847: PPUSH
16848: CALL_OW 559
// end else
16852: GO 16861
// ToLua ( getStreamItemsFromMission("","","") ) ;
16854: LD_STRING getStreamItemsFromMission("","","")
16856: PPUSH
16857: CALL_OW 559
// end ;
16861: LD_VAR 0 2
16865: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16866: LD_EXP 14
16870: PUSH
16871: LD_EXP 19
16875: AND
16876: IFFALSE 17000
16878: GO 16880
16880: DISABLE
16881: LD_INT 0
16883: PPUSH
16884: PPUSH
// begin enable ;
16885: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16886: LD_ADDR_VAR 0 2
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_OWVAR 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 2
16905: PUSH
16906: LD_INT 34
16908: PUSH
16909: LD_INT 7
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 34
16918: PUSH
16919: LD_INT 45
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 34
16928: PUSH
16929: LD_INT 28
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 34
16938: PUSH
16939: LD_INT 47
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PPUSH
16957: CALL_OW 69
16961: ST_TO_ADDR
// if not tmp then
16962: LD_VAR 0 2
16966: NOT
16967: IFFALSE 16971
// exit ;
16969: GO 17000
// for i in tmp do
16971: LD_ADDR_VAR 0 1
16975: PUSH
16976: LD_VAR 0 2
16980: PUSH
16981: FOR_IN
16982: IFFALSE 16998
// begin SetLives ( i , 0 ) ;
16984: LD_VAR 0 1
16988: PPUSH
16989: LD_INT 0
16991: PPUSH
16992: CALL_OW 234
// end ;
16996: GO 16981
16998: POP
16999: POP
// end ;
17000: PPOPN 2
17002: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17003: LD_EXP 14
17007: PUSH
17008: LD_EXP 20
17012: AND
17013: IFFALSE 17097
17015: GO 17017
17017: DISABLE
17018: LD_INT 0
17020: PPUSH
17021: PPUSH
// begin enable ;
17022: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17023: LD_ADDR_VAR 0 2
17027: PUSH
17028: LD_INT 22
17030: PUSH
17031: LD_OWVAR 2
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 32
17042: PUSH
17043: LD_INT 3
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PPUSH
17054: CALL_OW 69
17058: ST_TO_ADDR
// if not tmp then
17059: LD_VAR 0 2
17063: NOT
17064: IFFALSE 17068
// exit ;
17066: GO 17097
// for i in tmp do
17068: LD_ADDR_VAR 0 1
17072: PUSH
17073: LD_VAR 0 2
17077: PUSH
17078: FOR_IN
17079: IFFALSE 17095
// begin SetLives ( i , 0 ) ;
17081: LD_VAR 0 1
17085: PPUSH
17086: LD_INT 0
17088: PPUSH
17089: CALL_OW 234
// end ;
17093: GO 17078
17095: POP
17096: POP
// end ;
17097: PPOPN 2
17099: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17100: LD_EXP 14
17104: PUSH
17105: LD_EXP 17
17109: AND
17110: IFFALSE 17203
17112: GO 17114
17114: DISABLE
17115: LD_INT 0
17117: PPUSH
// begin enable ;
17118: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17119: LD_ADDR_VAR 0 1
17123: PUSH
17124: LD_INT 22
17126: PUSH
17127: LD_OWVAR 2
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: LD_INT 2
17138: PUSH
17139: LD_INT 25
17141: PUSH
17142: LD_INT 5
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 25
17151: PUSH
17152: LD_INT 9
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 25
17161: PUSH
17162: LD_INT 8
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PPUSH
17179: CALL_OW 69
17183: PUSH
17184: FOR_IN
17185: IFFALSE 17201
// begin SetClass ( i , 1 ) ;
17187: LD_VAR 0 1
17191: PPUSH
17192: LD_INT 1
17194: PPUSH
17195: CALL_OW 336
// end ;
17199: GO 17184
17201: POP
17202: POP
// end ;
17203: PPOPN 1
17205: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17206: LD_EXP 14
17210: PUSH
17211: LD_EXP 18
17215: AND
17216: PUSH
17217: LD_OWVAR 65
17221: PUSH
17222: LD_INT 7
17224: LESS
17225: AND
17226: IFFALSE 17240
17228: GO 17230
17230: DISABLE
// begin enable ;
17231: ENABLE
// game_speed := 7 ;
17232: LD_ADDR_OWVAR 65
17236: PUSH
17237: LD_INT 7
17239: ST_TO_ADDR
// end ;
17240: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17241: LD_EXP 14
17245: PUSH
17246: LD_EXP 21
17250: AND
17251: IFFALSE 17453
17253: GO 17255
17255: DISABLE
17256: LD_INT 0
17258: PPUSH
17259: PPUSH
17260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17261: LD_ADDR_VAR 0 3
17265: PUSH
17266: LD_INT 81
17268: PUSH
17269: LD_OWVAR 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 21
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: ST_TO_ADDR
// if not tmp then
17297: LD_VAR 0 3
17301: NOT
17302: IFFALSE 17306
// exit ;
17304: GO 17453
// if tmp > 5 then
17306: LD_VAR 0 3
17310: PUSH
17311: LD_INT 5
17313: GREATER
17314: IFFALSE 17326
// k := 5 else
17316: LD_ADDR_VAR 0 2
17320: PUSH
17321: LD_INT 5
17323: ST_TO_ADDR
17324: GO 17336
// k := tmp ;
17326: LD_ADDR_VAR 0 2
17330: PUSH
17331: LD_VAR 0 3
17335: ST_TO_ADDR
// for i := 1 to k do
17336: LD_ADDR_VAR 0 1
17340: PUSH
17341: DOUBLE
17342: LD_INT 1
17344: DEC
17345: ST_TO_ADDR
17346: LD_VAR 0 2
17350: PUSH
17351: FOR_TO
17352: IFFALSE 17451
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17354: LD_VAR 0 3
17358: PUSH
17359: LD_VAR 0 1
17363: ARRAY
17364: PPUSH
17365: LD_VAR 0 1
17369: PUSH
17370: LD_INT 4
17372: MOD
17373: PUSH
17374: LD_INT 1
17376: PLUS
17377: PPUSH
17378: CALL_OW 259
17382: PUSH
17383: LD_INT 10
17385: LESS
17386: IFFALSE 17449
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17388: LD_VAR 0 3
17392: PUSH
17393: LD_VAR 0 1
17397: ARRAY
17398: PPUSH
17399: LD_VAR 0 1
17403: PUSH
17404: LD_INT 4
17406: MOD
17407: PUSH
17408: LD_INT 1
17410: PLUS
17411: PPUSH
17412: LD_VAR 0 3
17416: PUSH
17417: LD_VAR 0 1
17421: ARRAY
17422: PPUSH
17423: LD_VAR 0 1
17427: PUSH
17428: LD_INT 4
17430: MOD
17431: PUSH
17432: LD_INT 1
17434: PLUS
17435: PPUSH
17436: CALL_OW 259
17440: PUSH
17441: LD_INT 1
17443: PLUS
17444: PPUSH
17445: CALL_OW 237
17449: GO 17351
17451: POP
17452: POP
// end ;
17453: PPOPN 3
17455: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17456: LD_EXP 14
17460: PUSH
17461: LD_EXP 22
17465: AND
17466: IFFALSE 17486
17468: GO 17470
17470: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17471: LD_INT 4
17473: PPUSH
17474: LD_OWVAR 2
17478: PPUSH
17479: LD_INT 0
17481: PPUSH
17482: CALL_OW 324
17486: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17487: LD_EXP 14
17491: PUSH
17492: LD_EXP 51
17496: AND
17497: IFFALSE 17517
17499: GO 17501
17501: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17502: LD_INT 19
17504: PPUSH
17505: LD_OWVAR 2
17509: PPUSH
17510: LD_INT 0
17512: PPUSH
17513: CALL_OW 324
17517: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17518: LD_EXP 14
17522: PUSH
17523: LD_EXP 23
17527: AND
17528: IFFALSE 17630
17530: GO 17532
17532: DISABLE
17533: LD_INT 0
17535: PPUSH
17536: PPUSH
// begin enable ;
17537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17538: LD_ADDR_VAR 0 2
17542: PUSH
17543: LD_INT 22
17545: PUSH
17546: LD_OWVAR 2
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 2
17557: PUSH
17558: LD_INT 34
17560: PUSH
17561: LD_INT 11
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 34
17570: PUSH
17571: LD_INT 30
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: LIST
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PPUSH
17587: CALL_OW 69
17591: ST_TO_ADDR
// if not tmp then
17592: LD_VAR 0 2
17596: NOT
17597: IFFALSE 17601
// exit ;
17599: GO 17630
// for i in tmp do
17601: LD_ADDR_VAR 0 1
17605: PUSH
17606: LD_VAR 0 2
17610: PUSH
17611: FOR_IN
17612: IFFALSE 17628
// begin SetLives ( i , 0 ) ;
17614: LD_VAR 0 1
17618: PPUSH
17619: LD_INT 0
17621: PPUSH
17622: CALL_OW 234
// end ;
17626: GO 17611
17628: POP
17629: POP
// end ;
17630: PPOPN 2
17632: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17633: LD_EXP 14
17637: PUSH
17638: LD_EXP 24
17642: AND
17643: IFFALSE 17663
17645: GO 17647
17647: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17648: LD_INT 32
17650: PPUSH
17651: LD_OWVAR 2
17655: PPUSH
17656: LD_INT 0
17658: PPUSH
17659: CALL_OW 324
17663: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17664: LD_EXP 14
17668: PUSH
17669: LD_EXP 25
17673: AND
17674: IFFALSE 17855
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
17682: PPUSH
17683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17684: LD_ADDR_VAR 0 2
17688: PUSH
17689: LD_INT 22
17691: PUSH
17692: LD_OWVAR 2
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 33
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PPUSH
17715: CALL_OW 69
17719: ST_TO_ADDR
// if not tmp then
17720: LD_VAR 0 2
17724: NOT
17725: IFFALSE 17729
// exit ;
17727: GO 17855
// side := 0 ;
17729: LD_ADDR_VAR 0 3
17733: PUSH
17734: LD_INT 0
17736: ST_TO_ADDR
// for i := 1 to 8 do
17737: LD_ADDR_VAR 0 1
17741: PUSH
17742: DOUBLE
17743: LD_INT 1
17745: DEC
17746: ST_TO_ADDR
17747: LD_INT 8
17749: PUSH
17750: FOR_TO
17751: IFFALSE 17799
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17753: LD_OWVAR 2
17757: PUSH
17758: LD_VAR 0 1
17762: NONEQUAL
17763: PUSH
17764: LD_OWVAR 2
17768: PPUSH
17769: LD_VAR 0 1
17773: PPUSH
17774: CALL_OW 81
17778: PUSH
17779: LD_INT 2
17781: EQUAL
17782: AND
17783: IFFALSE 17797
// begin side := i ;
17785: LD_ADDR_VAR 0 3
17789: PUSH
17790: LD_VAR 0 1
17794: ST_TO_ADDR
// break ;
17795: GO 17799
// end ;
17797: GO 17750
17799: POP
17800: POP
// if not side then
17801: LD_VAR 0 3
17805: NOT
17806: IFFALSE 17810
// exit ;
17808: GO 17855
// for i := 1 to tmp do
17810: LD_ADDR_VAR 0 1
17814: PUSH
17815: DOUBLE
17816: LD_INT 1
17818: DEC
17819: ST_TO_ADDR
17820: LD_VAR 0 2
17824: PUSH
17825: FOR_TO
17826: IFFALSE 17853
// if Prob ( 60 ) then
17828: LD_INT 60
17830: PPUSH
17831: CALL_OW 13
17835: IFFALSE 17851
// SetSide ( i , side ) ;
17837: LD_VAR 0 1
17841: PPUSH
17842: LD_VAR 0 3
17846: PPUSH
17847: CALL_OW 235
17851: GO 17825
17853: POP
17854: POP
// end ;
17855: PPOPN 3
17857: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17858: LD_EXP 14
17862: PUSH
17863: LD_EXP 27
17867: AND
17868: IFFALSE 17987
17870: GO 17872
17872: DISABLE
17873: LD_INT 0
17875: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17876: LD_ADDR_VAR 0 1
17880: PUSH
17881: LD_INT 22
17883: PUSH
17884: LD_OWVAR 2
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 21
17895: PUSH
17896: LD_INT 1
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 3
17905: PUSH
17906: LD_INT 23
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: PPUSH
17925: CALL_OW 69
17929: PUSH
17930: FOR_IN
17931: IFFALSE 17985
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17933: LD_VAR 0 1
17937: PPUSH
17938: CALL_OW 257
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: LD_INT 2
17948: PUSH
17949: LD_INT 3
17951: PUSH
17952: LD_INT 4
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: IN
17961: IFFALSE 17983
// SetClass ( un , rand ( 1 , 4 ) ) ;
17963: LD_VAR 0 1
17967: PPUSH
17968: LD_INT 1
17970: PPUSH
17971: LD_INT 4
17973: PPUSH
17974: CALL_OW 12
17978: PPUSH
17979: CALL_OW 336
17983: GO 17930
17985: POP
17986: POP
// end ;
17987: PPOPN 1
17989: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17990: LD_EXP 14
17994: PUSH
17995: LD_EXP 26
17999: AND
18000: IFFALSE 18079
18002: GO 18004
18004: DISABLE
18005: LD_INT 0
18007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18008: LD_ADDR_VAR 0 1
18012: PUSH
18013: LD_INT 22
18015: PUSH
18016: LD_OWVAR 2
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 21
18027: PUSH
18028: LD_INT 3
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PPUSH
18039: CALL_OW 69
18043: ST_TO_ADDR
// if not tmp then
18044: LD_VAR 0 1
18048: NOT
18049: IFFALSE 18053
// exit ;
18051: GO 18079
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18053: LD_VAR 0 1
18057: PUSH
18058: LD_INT 1
18060: PPUSH
18061: LD_VAR 0 1
18065: PPUSH
18066: CALL_OW 12
18070: ARRAY
18071: PPUSH
18072: LD_INT 100
18074: PPUSH
18075: CALL_OW 234
// end ;
18079: PPOPN 1
18081: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18082: LD_EXP 14
18086: PUSH
18087: LD_EXP 28
18091: AND
18092: IFFALSE 18190
18094: GO 18096
18096: DISABLE
18097: LD_INT 0
18099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18100: LD_ADDR_VAR 0 1
18104: PUSH
18105: LD_INT 22
18107: PUSH
18108: LD_OWVAR 2
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 21
18119: PUSH
18120: LD_INT 1
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PPUSH
18131: CALL_OW 69
18135: ST_TO_ADDR
// if not tmp then
18136: LD_VAR 0 1
18140: NOT
18141: IFFALSE 18145
// exit ;
18143: GO 18190
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18145: LD_VAR 0 1
18149: PUSH
18150: LD_INT 1
18152: PPUSH
18153: LD_VAR 0 1
18157: PPUSH
18158: CALL_OW 12
18162: ARRAY
18163: PPUSH
18164: LD_INT 1
18166: PPUSH
18167: LD_INT 4
18169: PPUSH
18170: CALL_OW 12
18174: PPUSH
18175: LD_INT 3000
18177: PPUSH
18178: LD_INT 9000
18180: PPUSH
18181: CALL_OW 12
18185: PPUSH
18186: CALL_OW 492
// end ;
18190: PPOPN 1
18192: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18193: LD_EXP 14
18197: PUSH
18198: LD_EXP 29
18202: AND
18203: IFFALSE 18223
18205: GO 18207
18207: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18208: LD_INT 1
18210: PPUSH
18211: LD_OWVAR 2
18215: PPUSH
18216: LD_INT 0
18218: PPUSH
18219: CALL_OW 324
18223: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18224: LD_EXP 14
18228: PUSH
18229: LD_EXP 30
18233: AND
18234: IFFALSE 18317
18236: GO 18238
18238: DISABLE
18239: LD_INT 0
18241: PPUSH
18242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18243: LD_ADDR_VAR 0 2
18247: PUSH
18248: LD_INT 22
18250: PUSH
18251: LD_OWVAR 2
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 21
18262: PUSH
18263: LD_INT 3
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PPUSH
18274: CALL_OW 69
18278: ST_TO_ADDR
// if not tmp then
18279: LD_VAR 0 2
18283: NOT
18284: IFFALSE 18288
// exit ;
18286: GO 18317
// for i in tmp do
18288: LD_ADDR_VAR 0 1
18292: PUSH
18293: LD_VAR 0 2
18297: PUSH
18298: FOR_IN
18299: IFFALSE 18315
// SetBLevel ( i , 10 ) ;
18301: LD_VAR 0 1
18305: PPUSH
18306: LD_INT 10
18308: PPUSH
18309: CALL_OW 241
18313: GO 18298
18315: POP
18316: POP
// end ;
18317: PPOPN 2
18319: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18320: LD_EXP 14
18324: PUSH
18325: LD_EXP 31
18329: AND
18330: IFFALSE 18441
18332: GO 18334
18334: DISABLE
18335: LD_INT 0
18337: PPUSH
18338: PPUSH
18339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18340: LD_ADDR_VAR 0 3
18344: PUSH
18345: LD_INT 22
18347: PUSH
18348: LD_OWVAR 2
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 25
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL_OW 69
18375: ST_TO_ADDR
// if not tmp then
18376: LD_VAR 0 3
18380: NOT
18381: IFFALSE 18385
// exit ;
18383: GO 18441
// un := tmp [ rand ( 1 , tmp ) ] ;
18385: LD_ADDR_VAR 0 2
18389: PUSH
18390: LD_VAR 0 3
18394: PUSH
18395: LD_INT 1
18397: PPUSH
18398: LD_VAR 0 3
18402: PPUSH
18403: CALL_OW 12
18407: ARRAY
18408: ST_TO_ADDR
// if Crawls ( un ) then
18409: LD_VAR 0 2
18413: PPUSH
18414: CALL_OW 318
18418: IFFALSE 18429
// ComWalk ( un ) ;
18420: LD_VAR 0 2
18424: PPUSH
18425: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18429: LD_VAR 0 2
18433: PPUSH
18434: LD_INT 5
18436: PPUSH
18437: CALL_OW 336
// end ;
18441: PPOPN 3
18443: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18444: LD_EXP 14
18448: PUSH
18449: LD_EXP 32
18453: AND
18454: PUSH
18455: LD_OWVAR 67
18459: PUSH
18460: LD_INT 4
18462: LESS
18463: AND
18464: IFFALSE 18483
18466: GO 18468
18468: DISABLE
// begin Difficulty := Difficulty + 1 ;
18469: LD_ADDR_OWVAR 67
18473: PUSH
18474: LD_OWVAR 67
18478: PUSH
18479: LD_INT 1
18481: PLUS
18482: ST_TO_ADDR
// end ;
18483: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18484: LD_EXP 14
18488: PUSH
18489: LD_EXP 33
18493: AND
18494: IFFALSE 18597
18496: GO 18498
18498: DISABLE
18499: LD_INT 0
18501: PPUSH
// begin for i := 1 to 5 do
18502: LD_ADDR_VAR 0 1
18506: PUSH
18507: DOUBLE
18508: LD_INT 1
18510: DEC
18511: ST_TO_ADDR
18512: LD_INT 5
18514: PUSH
18515: FOR_TO
18516: IFFALSE 18595
// begin uc_nation := nation_nature ;
18518: LD_ADDR_OWVAR 21
18522: PUSH
18523: LD_INT 0
18525: ST_TO_ADDR
// uc_side := 0 ;
18526: LD_ADDR_OWVAR 20
18530: PUSH
18531: LD_INT 0
18533: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18534: LD_ADDR_OWVAR 29
18538: PUSH
18539: LD_INT 12
18541: PUSH
18542: LD_INT 12
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: ST_TO_ADDR
// hc_agressivity := 20 ;
18549: LD_ADDR_OWVAR 35
18553: PUSH
18554: LD_INT 20
18556: ST_TO_ADDR
// hc_class := class_tiger ;
18557: LD_ADDR_OWVAR 28
18561: PUSH
18562: LD_INT 14
18564: ST_TO_ADDR
// hc_gallery :=  ;
18565: LD_ADDR_OWVAR 33
18569: PUSH
18570: LD_STRING 
18572: ST_TO_ADDR
// hc_name :=  ;
18573: LD_ADDR_OWVAR 26
18577: PUSH
18578: LD_STRING 
18580: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18581: CALL_OW 44
18585: PPUSH
18586: LD_INT 0
18588: PPUSH
18589: CALL_OW 51
// end ;
18593: GO 18515
18595: POP
18596: POP
// end ;
18597: PPOPN 1
18599: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18600: LD_EXP 14
18604: PUSH
18605: LD_EXP 34
18609: AND
18610: IFFALSE 18619
18612: GO 18614
18614: DISABLE
// StreamSibBomb ;
18615: CALL 18620 0 0
18619: END
// export function StreamSibBomb ; var i , x , y ; begin
18620: LD_INT 0
18622: PPUSH
18623: PPUSH
18624: PPUSH
18625: PPUSH
// result := false ;
18626: LD_ADDR_VAR 0 1
18630: PUSH
18631: LD_INT 0
18633: ST_TO_ADDR
// for i := 1 to 16 do
18634: LD_ADDR_VAR 0 2
18638: PUSH
18639: DOUBLE
18640: LD_INT 1
18642: DEC
18643: ST_TO_ADDR
18644: LD_INT 16
18646: PUSH
18647: FOR_TO
18648: IFFALSE 18847
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18650: LD_ADDR_VAR 0 3
18654: PUSH
18655: LD_INT 10
18657: PUSH
18658: LD_INT 20
18660: PUSH
18661: LD_INT 30
18663: PUSH
18664: LD_INT 40
18666: PUSH
18667: LD_INT 50
18669: PUSH
18670: LD_INT 60
18672: PUSH
18673: LD_INT 70
18675: PUSH
18676: LD_INT 80
18678: PUSH
18679: LD_INT 90
18681: PUSH
18682: LD_INT 100
18684: PUSH
18685: LD_INT 110
18687: PUSH
18688: LD_INT 120
18690: PUSH
18691: LD_INT 130
18693: PUSH
18694: LD_INT 140
18696: PUSH
18697: LD_INT 150
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 1
18719: PPUSH
18720: LD_INT 15
18722: PPUSH
18723: CALL_OW 12
18727: ARRAY
18728: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18729: LD_ADDR_VAR 0 4
18733: PUSH
18734: LD_INT 10
18736: PUSH
18737: LD_INT 20
18739: PUSH
18740: LD_INT 30
18742: PUSH
18743: LD_INT 40
18745: PUSH
18746: LD_INT 50
18748: PUSH
18749: LD_INT 60
18751: PUSH
18752: LD_INT 70
18754: PUSH
18755: LD_INT 80
18757: PUSH
18758: LD_INT 90
18760: PUSH
18761: LD_INT 100
18763: PUSH
18764: LD_INT 110
18766: PUSH
18767: LD_INT 120
18769: PUSH
18770: LD_INT 130
18772: PUSH
18773: LD_INT 140
18775: PUSH
18776: LD_INT 150
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: PPUSH
18799: LD_INT 15
18801: PPUSH
18802: CALL_OW 12
18806: ARRAY
18807: ST_TO_ADDR
// if ValidHex ( x , y ) then
18808: LD_VAR 0 3
18812: PPUSH
18813: LD_VAR 0 4
18817: PPUSH
18818: CALL_OW 488
18822: IFFALSE 18845
// begin result := [ x , y ] ;
18824: LD_ADDR_VAR 0 1
18828: PUSH
18829: LD_VAR 0 3
18833: PUSH
18834: LD_VAR 0 4
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: ST_TO_ADDR
// break ;
18843: GO 18847
// end ; end ;
18845: GO 18647
18847: POP
18848: POP
// if result then
18849: LD_VAR 0 1
18853: IFFALSE 18913
// begin ToLua ( playSibBomb() ) ;
18855: LD_STRING playSibBomb()
18857: PPUSH
18858: CALL_OW 559
// wait ( 0 0$14 ) ;
18862: LD_INT 490
18864: PPUSH
18865: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18869: LD_VAR 0 1
18873: PUSH
18874: LD_INT 1
18876: ARRAY
18877: PPUSH
18878: LD_VAR 0 1
18882: PUSH
18883: LD_INT 2
18885: ARRAY
18886: PPUSH
18887: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18891: LD_VAR 0 1
18895: PUSH
18896: LD_INT 1
18898: ARRAY
18899: PPUSH
18900: LD_VAR 0 1
18904: PUSH
18905: LD_INT 2
18907: ARRAY
18908: PPUSH
18909: CALL_OW 429
// end ; end ;
18913: LD_VAR 0 1
18917: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18918: LD_EXP 14
18922: PUSH
18923: LD_EXP 36
18927: AND
18928: IFFALSE 18940
18930: GO 18932
18932: DISABLE
// YouLost (  ) ;
18933: LD_STRING 
18935: PPUSH
18936: CALL_OW 104
18940: END
// every 0 0$1 trigger StreamModeActive and sFog do
18941: LD_EXP 14
18945: PUSH
18946: LD_EXP 35
18950: AND
18951: IFFALSE 18965
18953: GO 18955
18955: DISABLE
// FogOff ( your_side ) ;
18956: LD_OWVAR 2
18960: PPUSH
18961: CALL_OW 344
18965: END
// every 0 0$1 trigger StreamModeActive and sSun do
18966: LD_EXP 14
18970: PUSH
18971: LD_EXP 37
18975: AND
18976: IFFALSE 19004
18978: GO 18980
18980: DISABLE
// begin solar_recharge_percent := 0 ;
18981: LD_ADDR_OWVAR 79
18985: PUSH
18986: LD_INT 0
18988: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18989: LD_INT 10500
18991: PPUSH
18992: CALL_OW 67
// solar_recharge_percent := 100 ;
18996: LD_ADDR_OWVAR 79
19000: PUSH
19001: LD_INT 100
19003: ST_TO_ADDR
// end ;
19004: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19005: LD_EXP 14
19009: PUSH
19010: LD_EXP 38
19014: AND
19015: IFFALSE 19254
19017: GO 19019
19019: DISABLE
19020: LD_INT 0
19022: PPUSH
19023: PPUSH
19024: PPUSH
// begin tmp := [ ] ;
19025: LD_ADDR_VAR 0 3
19029: PUSH
19030: EMPTY
19031: ST_TO_ADDR
// for i := 1 to 6 do
19032: LD_ADDR_VAR 0 1
19036: PUSH
19037: DOUBLE
19038: LD_INT 1
19040: DEC
19041: ST_TO_ADDR
19042: LD_INT 6
19044: PUSH
19045: FOR_TO
19046: IFFALSE 19151
// begin uc_nation := nation_nature ;
19048: LD_ADDR_OWVAR 21
19052: PUSH
19053: LD_INT 0
19055: ST_TO_ADDR
// uc_side := 0 ;
19056: LD_ADDR_OWVAR 20
19060: PUSH
19061: LD_INT 0
19063: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19064: LD_ADDR_OWVAR 29
19068: PUSH
19069: LD_INT 12
19071: PUSH
19072: LD_INT 12
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: ST_TO_ADDR
// hc_agressivity := 20 ;
19079: LD_ADDR_OWVAR 35
19083: PUSH
19084: LD_INT 20
19086: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19087: LD_ADDR_OWVAR 28
19091: PUSH
19092: LD_INT 17
19094: ST_TO_ADDR
// hc_gallery :=  ;
19095: LD_ADDR_OWVAR 33
19099: PUSH
19100: LD_STRING 
19102: ST_TO_ADDR
// hc_name :=  ;
19103: LD_ADDR_OWVAR 26
19107: PUSH
19108: LD_STRING 
19110: ST_TO_ADDR
// un := CreateHuman ;
19111: LD_ADDR_VAR 0 2
19115: PUSH
19116: CALL_OW 44
19120: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19121: LD_VAR 0 2
19125: PPUSH
19126: LD_INT 1
19128: PPUSH
19129: CALL_OW 51
// tmp := tmp ^ un ;
19133: LD_ADDR_VAR 0 3
19137: PUSH
19138: LD_VAR 0 3
19142: PUSH
19143: LD_VAR 0 2
19147: ADD
19148: ST_TO_ADDR
// end ;
19149: GO 19045
19151: POP
19152: POP
// repeat wait ( 0 0$1 ) ;
19153: LD_INT 35
19155: PPUSH
19156: CALL_OW 67
// for un in tmp do
19160: LD_ADDR_VAR 0 2
19164: PUSH
19165: LD_VAR 0 3
19169: PUSH
19170: FOR_IN
19171: IFFALSE 19245
// begin if IsDead ( un ) then
19173: LD_VAR 0 2
19177: PPUSH
19178: CALL_OW 301
19182: IFFALSE 19202
// begin tmp := tmp diff un ;
19184: LD_ADDR_VAR 0 3
19188: PUSH
19189: LD_VAR 0 3
19193: PUSH
19194: LD_VAR 0 2
19198: DIFF
19199: ST_TO_ADDR
// continue ;
19200: GO 19170
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19202: LD_VAR 0 2
19206: PPUSH
19207: LD_INT 3
19209: PUSH
19210: LD_INT 22
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PPUSH
19224: CALL_OW 69
19228: PPUSH
19229: LD_VAR 0 2
19233: PPUSH
19234: CALL_OW 74
19238: PPUSH
19239: CALL_OW 115
// end ;
19243: GO 19170
19245: POP
19246: POP
// until not tmp ;
19247: LD_VAR 0 3
19251: NOT
19252: IFFALSE 19153
// end ;
19254: PPOPN 3
19256: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19257: LD_EXP 14
19261: PUSH
19262: LD_EXP 39
19266: AND
19267: IFFALSE 19321
19269: GO 19271
19271: DISABLE
// begin ToLua ( displayTroll(); ) ;
19272: LD_STRING displayTroll();
19274: PPUSH
19275: CALL_OW 559
// wait ( 3 3$00 ) ;
19279: LD_INT 6300
19281: PPUSH
19282: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19286: LD_STRING hideTroll();
19288: PPUSH
19289: CALL_OW 559
// wait ( 1 1$00 ) ;
19293: LD_INT 2100
19295: PPUSH
19296: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19300: LD_STRING displayTroll();
19302: PPUSH
19303: CALL_OW 559
// wait ( 1 1$00 ) ;
19307: LD_INT 2100
19309: PPUSH
19310: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19314: LD_STRING hideTroll();
19316: PPUSH
19317: CALL_OW 559
// end ;
19321: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19322: LD_EXP 14
19326: PUSH
19327: LD_EXP 40
19331: AND
19332: IFFALSE 19395
19334: GO 19336
19336: DISABLE
19337: LD_INT 0
19339: PPUSH
// begin p := 0 ;
19340: LD_ADDR_VAR 0 1
19344: PUSH
19345: LD_INT 0
19347: ST_TO_ADDR
// repeat game_speed := 1 ;
19348: LD_ADDR_OWVAR 65
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19356: LD_INT 35
19358: PPUSH
19359: CALL_OW 67
// p := p + 1 ;
19363: LD_ADDR_VAR 0 1
19367: PUSH
19368: LD_VAR 0 1
19372: PUSH
19373: LD_INT 1
19375: PLUS
19376: ST_TO_ADDR
// until p >= 60 ;
19377: LD_VAR 0 1
19381: PUSH
19382: LD_INT 60
19384: GREATEREQUAL
19385: IFFALSE 19348
// game_speed := 4 ;
19387: LD_ADDR_OWVAR 65
19391: PUSH
19392: LD_INT 4
19394: ST_TO_ADDR
// end ;
19395: PPOPN 1
19397: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19398: LD_EXP 14
19402: PUSH
19403: LD_EXP 41
19407: AND
19408: IFFALSE 19554
19410: GO 19412
19412: DISABLE
19413: LD_INT 0
19415: PPUSH
19416: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19417: LD_ADDR_VAR 0 1
19421: PUSH
19422: LD_INT 22
19424: PUSH
19425: LD_OWVAR 2
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: LD_INT 30
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 30
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PPUSH
19466: CALL_OW 69
19470: ST_TO_ADDR
// if not depot then
19471: LD_VAR 0 1
19475: NOT
19476: IFFALSE 19480
// exit ;
19478: GO 19554
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19480: LD_ADDR_VAR 0 2
19484: PUSH
19485: LD_VAR 0 1
19489: PUSH
19490: LD_INT 1
19492: PPUSH
19493: LD_VAR 0 1
19497: PPUSH
19498: CALL_OW 12
19502: ARRAY
19503: PPUSH
19504: CALL_OW 274
19508: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19509: LD_VAR 0 2
19513: PPUSH
19514: LD_INT 1
19516: PPUSH
19517: LD_INT 0
19519: PPUSH
19520: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19524: LD_VAR 0 2
19528: PPUSH
19529: LD_INT 2
19531: PPUSH
19532: LD_INT 0
19534: PPUSH
19535: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19539: LD_VAR 0 2
19543: PPUSH
19544: LD_INT 3
19546: PPUSH
19547: LD_INT 0
19549: PPUSH
19550: CALL_OW 277
// end ;
19554: PPOPN 2
19556: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19557: LD_EXP 14
19561: PUSH
19562: LD_EXP 42
19566: AND
19567: IFFALSE 19664
19569: GO 19571
19571: DISABLE
19572: LD_INT 0
19574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19575: LD_ADDR_VAR 0 1
19579: PUSH
19580: LD_INT 22
19582: PUSH
19583: LD_OWVAR 2
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 21
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 3
19604: PUSH
19605: LD_INT 23
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: LIST
19623: PPUSH
19624: CALL_OW 69
19628: ST_TO_ADDR
// if not tmp then
19629: LD_VAR 0 1
19633: NOT
19634: IFFALSE 19638
// exit ;
19636: GO 19664
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19638: LD_VAR 0 1
19642: PUSH
19643: LD_INT 1
19645: PPUSH
19646: LD_VAR 0 1
19650: PPUSH
19651: CALL_OW 12
19655: ARRAY
19656: PPUSH
19657: LD_INT 200
19659: PPUSH
19660: CALL_OW 234
// end ;
19664: PPOPN 1
19666: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19667: LD_EXP 14
19671: PUSH
19672: LD_EXP 43
19676: AND
19677: IFFALSE 19756
19679: GO 19681
19681: DISABLE
19682: LD_INT 0
19684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19685: LD_ADDR_VAR 0 1
19689: PUSH
19690: LD_INT 22
19692: PUSH
19693: LD_OWVAR 2
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 21
19704: PUSH
19705: LD_INT 2
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PPUSH
19716: CALL_OW 69
19720: ST_TO_ADDR
// if not tmp then
19721: LD_VAR 0 1
19725: NOT
19726: IFFALSE 19730
// exit ;
19728: GO 19756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19730: LD_VAR 0 1
19734: PUSH
19735: LD_INT 1
19737: PPUSH
19738: LD_VAR 0 1
19742: PPUSH
19743: CALL_OW 12
19747: ARRAY
19748: PPUSH
19749: LD_INT 60
19751: PPUSH
19752: CALL_OW 234
// end ;
19756: PPOPN 1
19758: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19759: LD_EXP 14
19763: PUSH
19764: LD_EXP 44
19768: AND
19769: IFFALSE 19868
19771: GO 19773
19773: DISABLE
19774: LD_INT 0
19776: PPUSH
19777: PPUSH
// begin enable ;
19778: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19779: LD_ADDR_VAR 0 1
19783: PUSH
19784: LD_INT 22
19786: PUSH
19787: LD_OWVAR 2
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 61
19798: PUSH
19799: EMPTY
19800: LIST
19801: PUSH
19802: LD_INT 33
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 1
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19868
// for i in tmp do
19831: LD_ADDR_VAR 0 2
19835: PUSH
19836: LD_VAR 0 1
19840: PUSH
19841: FOR_IN
19842: IFFALSE 19866
// if IsControledBy ( i ) then
19844: LD_VAR 0 2
19848: PPUSH
19849: CALL_OW 312
19853: IFFALSE 19864
// ComUnlink ( i ) ;
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 136
19864: GO 19841
19866: POP
19867: POP
// end ;
19868: PPOPN 2
19870: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19871: LD_EXP 14
19875: PUSH
19876: LD_EXP 45
19880: AND
19881: IFFALSE 20021
19883: GO 19885
19885: DISABLE
19886: LD_INT 0
19888: PPUSH
19889: PPUSH
// begin ToLua ( displayPowell(); ) ;
19890: LD_STRING displayPowell();
19892: PPUSH
19893: CALL_OW 559
// uc_side := 0 ;
19897: LD_ADDR_OWVAR 20
19901: PUSH
19902: LD_INT 0
19904: ST_TO_ADDR
// uc_nation := 2 ;
19905: LD_ADDR_OWVAR 21
19909: PUSH
19910: LD_INT 2
19912: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19913: LD_ADDR_OWVAR 37
19917: PUSH
19918: LD_INT 14
19920: ST_TO_ADDR
// vc_engine := engine_siberite ;
19921: LD_ADDR_OWVAR 39
19925: PUSH
19926: LD_INT 3
19928: ST_TO_ADDR
// vc_control := control_apeman ;
19929: LD_ADDR_OWVAR 38
19933: PUSH
19934: LD_INT 5
19936: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19937: LD_ADDR_OWVAR 40
19941: PUSH
19942: LD_INT 29
19944: ST_TO_ADDR
// un := CreateVehicle ;
19945: LD_ADDR_VAR 0 2
19949: PUSH
19950: CALL_OW 45
19954: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19955: LD_VAR 0 2
19959: PPUSH
19960: LD_INT 1
19962: PPUSH
19963: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19967: LD_INT 35
19969: PPUSH
19970: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19974: LD_VAR 0 2
19978: PPUSH
19979: LD_INT 22
19981: PUSH
19982: LD_OWVAR 2
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PPUSH
19991: CALL_OW 69
19995: PPUSH
19996: LD_VAR 0 2
20000: PPUSH
20001: CALL_OW 74
20005: PPUSH
20006: CALL_OW 115
// until IsDead ( un ) ;
20010: LD_VAR 0 2
20014: PPUSH
20015: CALL_OW 301
20019: IFFALSE 19967
// end ;
20021: PPOPN 2
20023: END
// every 0 0$1 trigger StreamModeActive and sStu do
20024: LD_EXP 14
20028: PUSH
20029: LD_EXP 53
20033: AND
20034: IFFALSE 20050
20036: GO 20038
20038: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20039: LD_STRING displayStucuk();
20041: PPUSH
20042: CALL_OW 559
// ResetFog ;
20046: CALL_OW 335
// end ;
20050: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20051: LD_EXP 14
20055: PUSH
20056: LD_EXP 46
20060: AND
20061: IFFALSE 20202
20063: GO 20065
20065: DISABLE
20066: LD_INT 0
20068: PPUSH
20069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20070: LD_ADDR_VAR 0 2
20074: PUSH
20075: LD_INT 22
20077: PUSH
20078: LD_OWVAR 2
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 21
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PPUSH
20101: CALL_OW 69
20105: ST_TO_ADDR
// if not tmp then
20106: LD_VAR 0 2
20110: NOT
20111: IFFALSE 20115
// exit ;
20113: GO 20202
// un := tmp [ rand ( 1 , tmp ) ] ;
20115: LD_ADDR_VAR 0 1
20119: PUSH
20120: LD_VAR 0 2
20124: PUSH
20125: LD_INT 1
20127: PPUSH
20128: LD_VAR 0 2
20132: PPUSH
20133: CALL_OW 12
20137: ARRAY
20138: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20139: LD_VAR 0 1
20143: PPUSH
20144: LD_INT 0
20146: PPUSH
20147: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20151: LD_VAR 0 1
20155: PPUSH
20156: LD_OWVAR 3
20160: PUSH
20161: LD_VAR 0 1
20165: DIFF
20166: PPUSH
20167: LD_VAR 0 1
20171: PPUSH
20172: CALL_OW 74
20176: PPUSH
20177: CALL_OW 115
// wait ( 0 0$20 ) ;
20181: LD_INT 700
20183: PPUSH
20184: CALL_OW 67
// SetSide ( un , your_side ) ;
20188: LD_VAR 0 1
20192: PPUSH
20193: LD_OWVAR 2
20197: PPUSH
20198: CALL_OW 235
// end ;
20202: PPOPN 2
20204: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20205: LD_EXP 14
20209: PUSH
20210: LD_EXP 47
20214: AND
20215: IFFALSE 20321
20217: GO 20219
20219: DISABLE
20220: LD_INT 0
20222: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20223: LD_ADDR_VAR 0 1
20227: PUSH
20228: LD_INT 22
20230: PUSH
20231: LD_OWVAR 2
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: LD_INT 30
20245: PUSH
20246: LD_INT 0
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 30
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: LIST
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PPUSH
20272: CALL_OW 69
20276: ST_TO_ADDR
// if not depot then
20277: LD_VAR 0 1
20281: NOT
20282: IFFALSE 20286
// exit ;
20284: GO 20321
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20286: LD_VAR 0 1
20290: PUSH
20291: LD_INT 1
20293: ARRAY
20294: PPUSH
20295: CALL_OW 250
20299: PPUSH
20300: LD_VAR 0 1
20304: PUSH
20305: LD_INT 1
20307: ARRAY
20308: PPUSH
20309: CALL_OW 251
20313: PPUSH
20314: LD_INT 70
20316: PPUSH
20317: CALL_OW 495
// end ;
20321: PPOPN 1
20323: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20324: LD_EXP 14
20328: PUSH
20329: LD_EXP 48
20333: AND
20334: IFFALSE 20545
20336: GO 20338
20338: DISABLE
20339: LD_INT 0
20341: PPUSH
20342: PPUSH
20343: PPUSH
20344: PPUSH
20345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20346: LD_ADDR_VAR 0 5
20350: PUSH
20351: LD_INT 22
20353: PUSH
20354: LD_OWVAR 2
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 21
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PPUSH
20377: CALL_OW 69
20381: ST_TO_ADDR
// if not tmp then
20382: LD_VAR 0 5
20386: NOT
20387: IFFALSE 20391
// exit ;
20389: GO 20545
// for i in tmp do
20391: LD_ADDR_VAR 0 1
20395: PUSH
20396: LD_VAR 0 5
20400: PUSH
20401: FOR_IN
20402: IFFALSE 20543
// begin d := rand ( 0 , 5 ) ;
20404: LD_ADDR_VAR 0 4
20408: PUSH
20409: LD_INT 0
20411: PPUSH
20412: LD_INT 5
20414: PPUSH
20415: CALL_OW 12
20419: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20420: LD_ADDR_VAR 0 2
20424: PUSH
20425: LD_VAR 0 1
20429: PPUSH
20430: CALL_OW 250
20434: PPUSH
20435: LD_VAR 0 4
20439: PPUSH
20440: LD_INT 3
20442: PPUSH
20443: LD_INT 12
20445: PPUSH
20446: CALL_OW 12
20450: PPUSH
20451: CALL_OW 272
20455: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20456: LD_ADDR_VAR 0 3
20460: PUSH
20461: LD_VAR 0 1
20465: PPUSH
20466: CALL_OW 251
20470: PPUSH
20471: LD_VAR 0 4
20475: PPUSH
20476: LD_INT 3
20478: PPUSH
20479: LD_INT 12
20481: PPUSH
20482: CALL_OW 12
20486: PPUSH
20487: CALL_OW 273
20491: ST_TO_ADDR
// if ValidHex ( x , y ) then
20492: LD_VAR 0 2
20496: PPUSH
20497: LD_VAR 0 3
20501: PPUSH
20502: CALL_OW 488
20506: IFFALSE 20541
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20508: LD_VAR 0 1
20512: PPUSH
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_VAR 0 3
20522: PPUSH
20523: LD_INT 3
20525: PPUSH
20526: LD_INT 6
20528: PPUSH
20529: CALL_OW 12
20533: PPUSH
20534: LD_INT 1
20536: PPUSH
20537: CALL_OW 483
// end ;
20541: GO 20401
20543: POP
20544: POP
// end ;
20545: PPOPN 5
20547: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20548: LD_EXP 14
20552: PUSH
20553: LD_EXP 49
20557: AND
20558: IFFALSE 20652
20560: GO 20562
20562: DISABLE
20563: LD_INT 0
20565: PPUSH
20566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20567: LD_ADDR_VAR 0 2
20571: PUSH
20572: LD_INT 22
20574: PUSH
20575: LD_OWVAR 2
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 32
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 21
20596: PUSH
20597: LD_INT 2
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: PPUSH
20609: CALL_OW 69
20613: ST_TO_ADDR
// if not tmp then
20614: LD_VAR 0 2
20618: NOT
20619: IFFALSE 20623
// exit ;
20621: GO 20652
// for i in tmp do
20623: LD_ADDR_VAR 0 1
20627: PUSH
20628: LD_VAR 0 2
20632: PUSH
20633: FOR_IN
20634: IFFALSE 20650
// SetFuel ( i , 0 ) ;
20636: LD_VAR 0 1
20640: PPUSH
20641: LD_INT 0
20643: PPUSH
20644: CALL_OW 240
20648: GO 20633
20650: POP
20651: POP
// end ;
20652: PPOPN 2
20654: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20655: LD_EXP 14
20659: PUSH
20660: LD_EXP 50
20664: AND
20665: IFFALSE 20731
20667: GO 20669
20669: DISABLE
20670: LD_INT 0
20672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20673: LD_ADDR_VAR 0 1
20677: PUSH
20678: LD_INT 22
20680: PUSH
20681: LD_OWVAR 2
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 30
20692: PUSH
20693: LD_INT 29
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PPUSH
20704: CALL_OW 69
20708: ST_TO_ADDR
// if not tmp then
20709: LD_VAR 0 1
20713: NOT
20714: IFFALSE 20718
// exit ;
20716: GO 20731
// DestroyUnit ( tmp [ 1 ] ) ;
20718: LD_VAR 0 1
20722: PUSH
20723: LD_INT 1
20725: ARRAY
20726: PPUSH
20727: CALL_OW 65
// end ;
20731: PPOPN 1
20733: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20734: LD_EXP 14
20738: PUSH
20739: LD_EXP 52
20743: AND
20744: IFFALSE 20873
20746: GO 20748
20748: DISABLE
20749: LD_INT 0
20751: PPUSH
// begin uc_side := 0 ;
20752: LD_ADDR_OWVAR 20
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// uc_nation := nation_arabian ;
20760: LD_ADDR_OWVAR 21
20764: PUSH
20765: LD_INT 2
20767: ST_TO_ADDR
// hc_gallery :=  ;
20768: LD_ADDR_OWVAR 33
20772: PUSH
20773: LD_STRING 
20775: ST_TO_ADDR
// hc_name :=  ;
20776: LD_ADDR_OWVAR 26
20780: PUSH
20781: LD_STRING 
20783: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20784: LD_INT 1
20786: PPUSH
20787: LD_INT 11
20789: PPUSH
20790: LD_INT 10
20792: PPUSH
20793: CALL_OW 380
// un := CreateHuman ;
20797: LD_ADDR_VAR 0 1
20801: PUSH
20802: CALL_OW 44
20806: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20807: LD_VAR 0 1
20811: PPUSH
20812: LD_INT 1
20814: PPUSH
20815: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20819: LD_INT 35
20821: PPUSH
20822: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20826: LD_VAR 0 1
20830: PPUSH
20831: LD_INT 22
20833: PUSH
20834: LD_OWVAR 2
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PPUSH
20843: CALL_OW 69
20847: PPUSH
20848: LD_VAR 0 1
20852: PPUSH
20853: CALL_OW 74
20857: PPUSH
20858: CALL_OW 115
// until IsDead ( un ) ;
20862: LD_VAR 0 1
20866: PPUSH
20867: CALL_OW 301
20871: IFFALSE 20819
// end ;
20873: PPOPN 1
20875: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20876: LD_EXP 14
20880: PUSH
20881: LD_EXP 54
20885: AND
20886: IFFALSE 20898
20888: GO 20890
20890: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20891: LD_STRING earthquake(getX(game), 0, 32)
20893: PPUSH
20894: CALL_OW 559
20898: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20899: LD_EXP 14
20903: PUSH
20904: LD_EXP 55
20908: AND
20909: IFFALSE 21000
20911: GO 20913
20913: DISABLE
20914: LD_INT 0
20916: PPUSH
// begin enable ;
20917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20918: LD_ADDR_VAR 0 1
20922: PUSH
20923: LD_INT 22
20925: PUSH
20926: LD_OWVAR 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 21
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 33
20947: PUSH
20948: LD_INT 3
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: PPUSH
20960: CALL_OW 69
20964: ST_TO_ADDR
// if not tmp then
20965: LD_VAR 0 1
20969: NOT
20970: IFFALSE 20974
// exit ;
20972: GO 21000
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20974: LD_VAR 0 1
20978: PUSH
20979: LD_INT 1
20981: PPUSH
20982: LD_VAR 0 1
20986: PPUSH
20987: CALL_OW 12
20991: ARRAY
20992: PPUSH
20993: LD_INT 1
20995: PPUSH
20996: CALL_OW 234
// end ;
21000: PPOPN 1
21002: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21003: LD_EXP 14
21007: PUSH
21008: LD_EXP 56
21012: AND
21013: IFFALSE 21154
21015: GO 21017
21017: DISABLE
21018: LD_INT 0
21020: PPUSH
21021: PPUSH
21022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21023: LD_ADDR_VAR 0 3
21027: PUSH
21028: LD_INT 22
21030: PUSH
21031: LD_OWVAR 2
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 25
21042: PUSH
21043: LD_INT 1
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PPUSH
21054: CALL_OW 69
21058: ST_TO_ADDR
// if not tmp then
21059: LD_VAR 0 3
21063: NOT
21064: IFFALSE 21068
// exit ;
21066: GO 21154
// un := tmp [ rand ( 1 , tmp ) ] ;
21068: LD_ADDR_VAR 0 2
21072: PUSH
21073: LD_VAR 0 3
21077: PUSH
21078: LD_INT 1
21080: PPUSH
21081: LD_VAR 0 3
21085: PPUSH
21086: CALL_OW 12
21090: ARRAY
21091: ST_TO_ADDR
// if Crawls ( un ) then
21092: LD_VAR 0 2
21096: PPUSH
21097: CALL_OW 318
21101: IFFALSE 21112
// ComWalk ( un ) ;
21103: LD_VAR 0 2
21107: PPUSH
21108: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21112: LD_VAR 0 2
21116: PPUSH
21117: LD_INT 9
21119: PPUSH
21120: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21124: LD_INT 28
21126: PPUSH
21127: LD_OWVAR 2
21131: PPUSH
21132: LD_INT 2
21134: PPUSH
21135: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21139: LD_INT 29
21141: PPUSH
21142: LD_OWVAR 2
21146: PPUSH
21147: LD_INT 2
21149: PPUSH
21150: CALL_OW 322
// end ;
21154: PPOPN 3
21156: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21157: LD_EXP 14
21161: PUSH
21162: LD_EXP 57
21166: AND
21167: IFFALSE 21278
21169: GO 21171
21171: DISABLE
21172: LD_INT 0
21174: PPUSH
21175: PPUSH
21176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21177: LD_ADDR_VAR 0 3
21181: PUSH
21182: LD_INT 22
21184: PUSH
21185: LD_OWVAR 2
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 25
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PPUSH
21208: CALL_OW 69
21212: ST_TO_ADDR
// if not tmp then
21213: LD_VAR 0 3
21217: NOT
21218: IFFALSE 21222
// exit ;
21220: GO 21278
// un := tmp [ rand ( 1 , tmp ) ] ;
21222: LD_ADDR_VAR 0 2
21226: PUSH
21227: LD_VAR 0 3
21231: PUSH
21232: LD_INT 1
21234: PPUSH
21235: LD_VAR 0 3
21239: PPUSH
21240: CALL_OW 12
21244: ARRAY
21245: ST_TO_ADDR
// if Crawls ( un ) then
21246: LD_VAR 0 2
21250: PPUSH
21251: CALL_OW 318
21255: IFFALSE 21266
// ComWalk ( un ) ;
21257: LD_VAR 0 2
21261: PPUSH
21262: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21266: LD_VAR 0 2
21270: PPUSH
21271: LD_INT 8
21273: PPUSH
21274: CALL_OW 336
// end ;
21278: PPOPN 3
21280: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21281: LD_EXP 14
21285: PUSH
21286: LD_EXP 58
21290: AND
21291: IFFALSE 21435
21293: GO 21295
21295: DISABLE
21296: LD_INT 0
21298: PPUSH
21299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21300: LD_ADDR_VAR 0 2
21304: PUSH
21305: LD_INT 22
21307: PUSH
21308: LD_OWVAR 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 21
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: LD_INT 34
21332: PUSH
21333: LD_INT 12
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 34
21342: PUSH
21343: LD_INT 51
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 34
21352: PUSH
21353: LD_INT 32
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: PPUSH
21371: CALL_OW 69
21375: ST_TO_ADDR
// if not tmp then
21376: LD_VAR 0 2
21380: NOT
21381: IFFALSE 21385
// exit ;
21383: GO 21435
// for i in tmp do
21385: LD_ADDR_VAR 0 1
21389: PUSH
21390: LD_VAR 0 2
21394: PUSH
21395: FOR_IN
21396: IFFALSE 21433
// if GetCargo ( i , mat_artifact ) = 0 then
21398: LD_VAR 0 1
21402: PPUSH
21403: LD_INT 4
21405: PPUSH
21406: CALL_OW 289
21410: PUSH
21411: LD_INT 0
21413: EQUAL
21414: IFFALSE 21431
// SetCargo ( i , mat_siberit , 100 ) ;
21416: LD_VAR 0 1
21420: PPUSH
21421: LD_INT 3
21423: PPUSH
21424: LD_INT 100
21426: PPUSH
21427: CALL_OW 290
21431: GO 21395
21433: POP
21434: POP
// end ;
21435: PPOPN 2
21437: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21438: LD_EXP 14
21442: PUSH
21443: LD_EXP 59
21447: AND
21448: IFFALSE 21631
21450: GO 21452
21452: DISABLE
21453: LD_INT 0
21455: PPUSH
21456: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_INT 22
21464: PUSH
21465: LD_OWVAR 2
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PPUSH
21474: CALL_OW 69
21478: ST_TO_ADDR
// if not tmp then
21479: LD_VAR 0 2
21483: NOT
21484: IFFALSE 21488
// exit ;
21486: GO 21631
// for i := 1 to 2 do
21488: LD_ADDR_VAR 0 1
21492: PUSH
21493: DOUBLE
21494: LD_INT 1
21496: DEC
21497: ST_TO_ADDR
21498: LD_INT 2
21500: PUSH
21501: FOR_TO
21502: IFFALSE 21629
// begin uc_side := your_side ;
21504: LD_ADDR_OWVAR 20
21508: PUSH
21509: LD_OWVAR 2
21513: ST_TO_ADDR
// uc_nation := nation_american ;
21514: LD_ADDR_OWVAR 21
21518: PUSH
21519: LD_INT 1
21521: ST_TO_ADDR
// vc_chassis := us_morphling ;
21522: LD_ADDR_OWVAR 37
21526: PUSH
21527: LD_INT 5
21529: ST_TO_ADDR
// vc_engine := engine_siberite ;
21530: LD_ADDR_OWVAR 39
21534: PUSH
21535: LD_INT 3
21537: ST_TO_ADDR
// vc_control := control_computer ;
21538: LD_ADDR_OWVAR 38
21542: PUSH
21543: LD_INT 3
21545: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21546: LD_ADDR_OWVAR 40
21550: PUSH
21551: LD_INT 10
21553: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21554: LD_VAR 0 2
21558: PUSH
21559: LD_INT 1
21561: ARRAY
21562: PPUSH
21563: CALL_OW 310
21567: NOT
21568: IFFALSE 21615
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21570: CALL_OW 45
21574: PPUSH
21575: LD_VAR 0 2
21579: PUSH
21580: LD_INT 1
21582: ARRAY
21583: PPUSH
21584: CALL_OW 250
21588: PPUSH
21589: LD_VAR 0 2
21593: PUSH
21594: LD_INT 1
21596: ARRAY
21597: PPUSH
21598: CALL_OW 251
21602: PPUSH
21603: LD_INT 12
21605: PPUSH
21606: LD_INT 1
21608: PPUSH
21609: CALL_OW 50
21613: GO 21627
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21615: CALL_OW 45
21619: PPUSH
21620: LD_INT 1
21622: PPUSH
21623: CALL_OW 51
// end ;
21627: GO 21501
21629: POP
21630: POP
// end ;
21631: PPOPN 2
21633: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21634: LD_EXP 14
21638: PUSH
21639: LD_EXP 60
21643: AND
21644: IFFALSE 21866
21646: GO 21648
21648: DISABLE
21649: LD_INT 0
21651: PPUSH
21652: PPUSH
21653: PPUSH
21654: PPUSH
21655: PPUSH
21656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21657: LD_ADDR_VAR 0 6
21661: PUSH
21662: LD_INT 22
21664: PUSH
21665: LD_OWVAR 2
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 21
21676: PUSH
21677: LD_INT 1
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 3
21686: PUSH
21687: LD_INT 23
21689: PUSH
21690: LD_INT 0
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 69
21710: ST_TO_ADDR
// if not tmp then
21711: LD_VAR 0 6
21715: NOT
21716: IFFALSE 21720
// exit ;
21718: GO 21866
// s1 := rand ( 1 , 4 ) ;
21720: LD_ADDR_VAR 0 2
21724: PUSH
21725: LD_INT 1
21727: PPUSH
21728: LD_INT 4
21730: PPUSH
21731: CALL_OW 12
21735: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21736: LD_ADDR_VAR 0 4
21740: PUSH
21741: LD_VAR 0 6
21745: PUSH
21746: LD_INT 1
21748: ARRAY
21749: PPUSH
21750: LD_VAR 0 2
21754: PPUSH
21755: CALL_OW 259
21759: ST_TO_ADDR
// if s1 = 1 then
21760: LD_VAR 0 2
21764: PUSH
21765: LD_INT 1
21767: EQUAL
21768: IFFALSE 21788
// s2 := rand ( 2 , 4 ) else
21770: LD_ADDR_VAR 0 3
21774: PUSH
21775: LD_INT 2
21777: PPUSH
21778: LD_INT 4
21780: PPUSH
21781: CALL_OW 12
21785: ST_TO_ADDR
21786: GO 21796
// s2 := 1 ;
21788: LD_ADDR_VAR 0 3
21792: PUSH
21793: LD_INT 1
21795: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21796: LD_ADDR_VAR 0 5
21800: PUSH
21801: LD_VAR 0 6
21805: PUSH
21806: LD_INT 1
21808: ARRAY
21809: PPUSH
21810: LD_VAR 0 3
21814: PPUSH
21815: CALL_OW 259
21819: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21820: LD_VAR 0 6
21824: PUSH
21825: LD_INT 1
21827: ARRAY
21828: PPUSH
21829: LD_VAR 0 2
21833: PPUSH
21834: LD_VAR 0 5
21838: PPUSH
21839: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21843: LD_VAR 0 6
21847: PUSH
21848: LD_INT 1
21850: ARRAY
21851: PPUSH
21852: LD_VAR 0 3
21856: PPUSH
21857: LD_VAR 0 4
21861: PPUSH
21862: CALL_OW 237
// end ;
21866: PPOPN 6
21868: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21869: LD_EXP 14
21873: PUSH
21874: LD_EXP 61
21878: AND
21879: IFFALSE 21958
21881: GO 21883
21883: DISABLE
21884: LD_INT 0
21886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21887: LD_ADDR_VAR 0 1
21891: PUSH
21892: LD_INT 22
21894: PUSH
21895: LD_OWVAR 2
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 30
21906: PUSH
21907: LD_INT 3
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PPUSH
21918: CALL_OW 69
21922: ST_TO_ADDR
// if not tmp then
21923: LD_VAR 0 1
21927: NOT
21928: IFFALSE 21932
// exit ;
21930: GO 21958
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21932: LD_VAR 0 1
21936: PUSH
21937: LD_INT 1
21939: PPUSH
21940: LD_VAR 0 1
21944: PPUSH
21945: CALL_OW 12
21949: ARRAY
21950: PPUSH
21951: LD_INT 1
21953: PPUSH
21954: CALL_OW 234
// end ;
21958: PPOPN 1
21960: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21961: LD_EXP 14
21965: PUSH
21966: LD_EXP 62
21970: AND
21971: IFFALSE 22083
21973: GO 21975
21975: DISABLE
21976: LD_INT 0
21978: PPUSH
21979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21980: LD_ADDR_VAR 0 2
21984: PUSH
21985: LD_INT 22
21987: PUSH
21988: LD_OWVAR 2
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 2
21999: PUSH
22000: LD_INT 30
22002: PUSH
22003: LD_INT 27
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 30
22012: PUSH
22013: LD_INT 26
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 30
22022: PUSH
22023: LD_INT 28
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PPUSH
22040: CALL_OW 69
22044: ST_TO_ADDR
// if not tmp then
22045: LD_VAR 0 2
22049: NOT
22050: IFFALSE 22054
// exit ;
22052: GO 22083
// for i in tmp do
22054: LD_ADDR_VAR 0 1
22058: PUSH
22059: LD_VAR 0 2
22063: PUSH
22064: FOR_IN
22065: IFFALSE 22081
// SetLives ( i , 1 ) ;
22067: LD_VAR 0 1
22071: PPUSH
22072: LD_INT 1
22074: PPUSH
22075: CALL_OW 234
22079: GO 22064
22081: POP
22082: POP
// end ;
22083: PPOPN 2
22085: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22086: LD_EXP 14
22090: PUSH
22091: LD_EXP 63
22095: AND
22096: IFFALSE 22383
22098: GO 22100
22100: DISABLE
22101: LD_INT 0
22103: PPUSH
22104: PPUSH
22105: PPUSH
// begin i := rand ( 1 , 7 ) ;
22106: LD_ADDR_VAR 0 1
22110: PUSH
22111: LD_INT 1
22113: PPUSH
22114: LD_INT 7
22116: PPUSH
22117: CALL_OW 12
22121: ST_TO_ADDR
// case i of 1 :
22122: LD_VAR 0 1
22126: PUSH
22127: LD_INT 1
22129: DOUBLE
22130: EQUAL
22131: IFTRUE 22135
22133: GO 22145
22135: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22136: LD_STRING earthquake(getX(game), 0, 32)
22138: PPUSH
22139: CALL_OW 559
22143: GO 22383
22145: LD_INT 2
22147: DOUBLE
22148: EQUAL
22149: IFTRUE 22153
22151: GO 22167
22153: POP
// begin ToLua ( displayStucuk(); ) ;
22154: LD_STRING displayStucuk();
22156: PPUSH
22157: CALL_OW 559
// ResetFog ;
22161: CALL_OW 335
// end ; 3 :
22165: GO 22383
22167: LD_INT 3
22169: DOUBLE
22170: EQUAL
22171: IFTRUE 22175
22173: GO 22279
22175: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22176: LD_ADDR_VAR 0 2
22180: PUSH
22181: LD_INT 22
22183: PUSH
22184: LD_OWVAR 2
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 25
22195: PUSH
22196: LD_INT 1
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PPUSH
22207: CALL_OW 69
22211: ST_TO_ADDR
// if not tmp then
22212: LD_VAR 0 2
22216: NOT
22217: IFFALSE 22221
// exit ;
22219: GO 22383
// un := tmp [ rand ( 1 , tmp ) ] ;
22221: LD_ADDR_VAR 0 3
22225: PUSH
22226: LD_VAR 0 2
22230: PUSH
22231: LD_INT 1
22233: PPUSH
22234: LD_VAR 0 2
22238: PPUSH
22239: CALL_OW 12
22243: ARRAY
22244: ST_TO_ADDR
// if Crawls ( un ) then
22245: LD_VAR 0 3
22249: PPUSH
22250: CALL_OW 318
22254: IFFALSE 22265
// ComWalk ( un ) ;
22256: LD_VAR 0 3
22260: PPUSH
22261: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22265: LD_VAR 0 3
22269: PPUSH
22270: LD_INT 8
22272: PPUSH
22273: CALL_OW 336
// end ; 4 :
22277: GO 22383
22279: LD_INT 4
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22361
22287: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22288: LD_ADDR_VAR 0 2
22292: PUSH
22293: LD_INT 22
22295: PUSH
22296: LD_OWVAR 2
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 30
22307: PUSH
22308: LD_INT 29
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PPUSH
22319: CALL_OW 69
22323: ST_TO_ADDR
// if not tmp then
22324: LD_VAR 0 2
22328: NOT
22329: IFFALSE 22333
// exit ;
22331: GO 22383
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22333: LD_VAR 0 2
22337: PUSH
22338: LD_INT 1
22340: ARRAY
22341: PPUSH
22342: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22346: LD_VAR 0 2
22350: PUSH
22351: LD_INT 1
22353: ARRAY
22354: PPUSH
22355: CALL_OW 65
// end ; 5 .. 7 :
22359: GO 22383
22361: LD_INT 5
22363: DOUBLE
22364: GREATEREQUAL
22365: IFFALSE 22373
22367: LD_INT 7
22369: DOUBLE
22370: LESSEQUAL
22371: IFTRUE 22375
22373: GO 22382
22375: POP
// StreamSibBomb ; end ;
22376: CALL 18620 0 0
22380: GO 22383
22382: POP
// end ;
22383: PPOPN 3
22385: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22386: LD_EXP 14
22390: PUSH
22391: LD_EXP 64
22395: AND
22396: IFFALSE 22552
22398: GO 22400
22400: DISABLE
22401: LD_INT 0
22403: PPUSH
22404: PPUSH
22405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22406: LD_ADDR_VAR 0 2
22410: PUSH
22411: LD_INT 81
22413: PUSH
22414: LD_OWVAR 2
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 2
22425: PUSH
22426: LD_INT 21
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 21
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PPUSH
22455: CALL_OW 69
22459: ST_TO_ADDR
// if not tmp then
22460: LD_VAR 0 2
22464: NOT
22465: IFFALSE 22469
// exit ;
22467: GO 22552
// p := 0 ;
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_INT 0
22476: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22477: LD_INT 35
22479: PPUSH
22480: CALL_OW 67
// p := p + 1 ;
22484: LD_ADDR_VAR 0 3
22488: PUSH
22489: LD_VAR 0 3
22493: PUSH
22494: LD_INT 1
22496: PLUS
22497: ST_TO_ADDR
// for i in tmp do
22498: LD_ADDR_VAR 0 1
22502: PUSH
22503: LD_VAR 0 2
22507: PUSH
22508: FOR_IN
22509: IFFALSE 22540
// if GetLives ( i ) < 1000 then
22511: LD_VAR 0 1
22515: PPUSH
22516: CALL_OW 256
22520: PUSH
22521: LD_INT 1000
22523: LESS
22524: IFFALSE 22538
// SetLives ( i , 1000 ) ;
22526: LD_VAR 0 1
22530: PPUSH
22531: LD_INT 1000
22533: PPUSH
22534: CALL_OW 234
22538: GO 22508
22540: POP
22541: POP
// until p > 20 ;
22542: LD_VAR 0 3
22546: PUSH
22547: LD_INT 20
22549: GREATER
22550: IFFALSE 22477
// end ;
22552: PPOPN 3
22554: END
// every 0 0$1 trigger StreamModeActive and sTime do
22555: LD_EXP 14
22559: PUSH
22560: LD_EXP 65
22564: AND
22565: IFFALSE 22600
22567: GO 22569
22569: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22570: LD_INT 28
22572: PPUSH
22573: LD_OWVAR 2
22577: PPUSH
22578: LD_INT 2
22580: PPUSH
22581: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22585: LD_INT 30
22587: PPUSH
22588: LD_OWVAR 2
22592: PPUSH
22593: LD_INT 2
22595: PPUSH
22596: CALL_OW 322
// end ;
22600: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22601: LD_EXP 14
22605: PUSH
22606: LD_EXP 66
22610: AND
22611: IFFALSE 22732
22613: GO 22615
22615: DISABLE
22616: LD_INT 0
22618: PPUSH
22619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22620: LD_ADDR_VAR 0 2
22624: PUSH
22625: LD_INT 22
22627: PUSH
22628: LD_OWVAR 2
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 21
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 3
22649: PUSH
22650: LD_INT 23
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: LIST
22668: PPUSH
22669: CALL_OW 69
22673: ST_TO_ADDR
// if not tmp then
22674: LD_VAR 0 2
22678: NOT
22679: IFFALSE 22683
// exit ;
22681: GO 22732
// for i in tmp do
22683: LD_ADDR_VAR 0 1
22687: PUSH
22688: LD_VAR 0 2
22692: PUSH
22693: FOR_IN
22694: IFFALSE 22730
// begin if Crawls ( i ) then
22696: LD_VAR 0 1
22700: PPUSH
22701: CALL_OW 318
22705: IFFALSE 22716
// ComWalk ( i ) ;
22707: LD_VAR 0 1
22711: PPUSH
22712: CALL_OW 138
// SetClass ( i , 2 ) ;
22716: LD_VAR 0 1
22720: PPUSH
22721: LD_INT 2
22723: PPUSH
22724: CALL_OW 336
// end ;
22728: GO 22693
22730: POP
22731: POP
// end ;
22732: PPOPN 2
22734: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22735: LD_EXP 14
22739: PUSH
22740: LD_EXP 67
22744: AND
22745: IFFALSE 23033
22747: GO 22749
22749: DISABLE
22750: LD_INT 0
22752: PPUSH
22753: PPUSH
22754: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22755: LD_OWVAR 2
22759: PPUSH
22760: LD_INT 9
22762: PPUSH
22763: LD_INT 1
22765: PPUSH
22766: LD_INT 1
22768: PPUSH
22769: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22773: LD_INT 9
22775: PPUSH
22776: LD_OWVAR 2
22780: PPUSH
22781: CALL_OW 343
// uc_side := 9 ;
22785: LD_ADDR_OWVAR 20
22789: PUSH
22790: LD_INT 9
22792: ST_TO_ADDR
// uc_nation := 2 ;
22793: LD_ADDR_OWVAR 21
22797: PUSH
22798: LD_INT 2
22800: ST_TO_ADDR
// hc_name := Dark Warrior ;
22801: LD_ADDR_OWVAR 26
22805: PUSH
22806: LD_STRING Dark Warrior
22808: ST_TO_ADDR
// hc_gallery :=  ;
22809: LD_ADDR_OWVAR 33
22813: PUSH
22814: LD_STRING 
22816: ST_TO_ADDR
// hc_noskilllimit := true ;
22817: LD_ADDR_OWVAR 76
22821: PUSH
22822: LD_INT 1
22824: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22825: LD_ADDR_OWVAR 31
22829: PUSH
22830: LD_INT 30
22832: PUSH
22833: LD_INT 30
22835: PUSH
22836: LD_INT 30
22838: PUSH
22839: LD_INT 30
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: ST_TO_ADDR
// un := CreateHuman ;
22848: LD_ADDR_VAR 0 3
22852: PUSH
22853: CALL_OW 44
22857: ST_TO_ADDR
// hc_noskilllimit := false ;
22858: LD_ADDR_OWVAR 76
22862: PUSH
22863: LD_INT 0
22865: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22866: LD_VAR 0 3
22870: PPUSH
22871: LD_INT 1
22873: PPUSH
22874: CALL_OW 51
// ToLua ( playRanger() ) ;
22878: LD_STRING playRanger()
22880: PPUSH
22881: CALL_OW 559
// p := 0 ;
22885: LD_ADDR_VAR 0 2
22889: PUSH
22890: LD_INT 0
22892: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22893: LD_INT 35
22895: PPUSH
22896: CALL_OW 67
// p := p + 1 ;
22900: LD_ADDR_VAR 0 2
22904: PUSH
22905: LD_VAR 0 2
22909: PUSH
22910: LD_INT 1
22912: PLUS
22913: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22914: LD_VAR 0 3
22918: PPUSH
22919: CALL_OW 256
22923: PUSH
22924: LD_INT 1000
22926: LESS
22927: IFFALSE 22941
// SetLives ( un , 1000 ) ;
22929: LD_VAR 0 3
22933: PPUSH
22934: LD_INT 1000
22936: PPUSH
22937: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22941: LD_VAR 0 3
22945: PPUSH
22946: LD_INT 81
22948: PUSH
22949: LD_OWVAR 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 91
22960: PUSH
22961: LD_VAR 0 3
22965: PUSH
22966: LD_INT 30
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PPUSH
22978: CALL_OW 69
22982: PPUSH
22983: LD_VAR 0 3
22987: PPUSH
22988: CALL_OW 74
22992: PPUSH
22993: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22997: LD_VAR 0 2
23001: PUSH
23002: LD_INT 80
23004: GREATER
23005: PUSH
23006: LD_VAR 0 3
23010: PPUSH
23011: CALL_OW 301
23015: OR
23016: IFFALSE 22893
// if un then
23018: LD_VAR 0 3
23022: IFFALSE 23033
// RemoveUnit ( un ) ;
23024: LD_VAR 0 3
23028: PPUSH
23029: CALL_OW 64
// end ;
23033: PPOPN 3
23035: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23036: LD_EXP 68
23040: IFFALSE 23156
23042: GO 23044
23044: DISABLE
23045: LD_INT 0
23047: PPUSH
23048: PPUSH
23049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23050: LD_ADDR_VAR 0 2
23054: PUSH
23055: LD_INT 81
23057: PUSH
23058: LD_OWVAR 2
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 21
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 69
23085: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23086: LD_STRING playComputer()
23088: PPUSH
23089: CALL_OW 559
// if not tmp then
23093: LD_VAR 0 2
23097: NOT
23098: IFFALSE 23102
// exit ;
23100: GO 23156
// for i in tmp do
23102: LD_ADDR_VAR 0 1
23106: PUSH
23107: LD_VAR 0 2
23111: PUSH
23112: FOR_IN
23113: IFFALSE 23154
// for j := 1 to 4 do
23115: LD_ADDR_VAR 0 3
23119: PUSH
23120: DOUBLE
23121: LD_INT 1
23123: DEC
23124: ST_TO_ADDR
23125: LD_INT 4
23127: PUSH
23128: FOR_TO
23129: IFFALSE 23150
// SetSkill ( i , j , 10 ) ;
23131: LD_VAR 0 1
23135: PPUSH
23136: LD_VAR 0 3
23140: PPUSH
23141: LD_INT 10
23143: PPUSH
23144: CALL_OW 237
23148: GO 23128
23150: POP
23151: POP
23152: GO 23112
23154: POP
23155: POP
// end ;
23156: PPOPN 3
23158: END
// every 0 0$1 trigger s30 do var i , tmp ;
23159: LD_EXP 69
23163: IFFALSE 23232
23165: GO 23167
23167: DISABLE
23168: LD_INT 0
23170: PPUSH
23171: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23172: LD_ADDR_VAR 0 2
23176: PUSH
23177: LD_INT 22
23179: PUSH
23180: LD_OWVAR 2
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PPUSH
23189: CALL_OW 69
23193: ST_TO_ADDR
// if not tmp then
23194: LD_VAR 0 2
23198: NOT
23199: IFFALSE 23203
// exit ;
23201: GO 23232
// for i in tmp do
23203: LD_ADDR_VAR 0 1
23207: PUSH
23208: LD_VAR 0 2
23212: PUSH
23213: FOR_IN
23214: IFFALSE 23230
// SetLives ( i , 300 ) ;
23216: LD_VAR 0 1
23220: PPUSH
23221: LD_INT 300
23223: PPUSH
23224: CALL_OW 234
23228: GO 23213
23230: POP
23231: POP
// end ;
23232: PPOPN 2
23234: END
// every 0 0$1 trigger s60 do var i , tmp ;
23235: LD_EXP 70
23239: IFFALSE 23308
23241: GO 23243
23243: DISABLE
23244: LD_INT 0
23246: PPUSH
23247: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_INT 22
23255: PUSH
23256: LD_OWVAR 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PPUSH
23265: CALL_OW 69
23269: ST_TO_ADDR
// if not tmp then
23270: LD_VAR 0 2
23274: NOT
23275: IFFALSE 23279
// exit ;
23277: GO 23308
// for i in tmp do
23279: LD_ADDR_VAR 0 1
23283: PUSH
23284: LD_VAR 0 2
23288: PUSH
23289: FOR_IN
23290: IFFALSE 23306
// SetLives ( i , 600 ) ;
23292: LD_VAR 0 1
23296: PPUSH
23297: LD_INT 600
23299: PPUSH
23300: CALL_OW 234
23304: GO 23289
23306: POP
23307: POP
// end ;
23308: PPOPN 2
23310: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23311: LD_INT 0
23313: PPUSH
// case cmd of 301 :
23314: LD_VAR 0 1
23318: PUSH
23319: LD_INT 301
23321: DOUBLE
23322: EQUAL
23323: IFTRUE 23327
23325: GO 23359
23327: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23328: LD_VAR 0 6
23332: PPUSH
23333: LD_VAR 0 7
23337: PPUSH
23338: LD_VAR 0 8
23342: PPUSH
23343: LD_VAR 0 4
23347: PPUSH
23348: LD_VAR 0 5
23352: PPUSH
23353: CALL 24560 0 5
23357: GO 23480
23359: LD_INT 302
23361: DOUBLE
23362: EQUAL
23363: IFTRUE 23367
23365: GO 23404
23367: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23368: LD_VAR 0 6
23372: PPUSH
23373: LD_VAR 0 7
23377: PPUSH
23378: LD_VAR 0 8
23382: PPUSH
23383: LD_VAR 0 9
23387: PPUSH
23388: LD_VAR 0 4
23392: PPUSH
23393: LD_VAR 0 5
23397: PPUSH
23398: CALL 24651 0 6
23402: GO 23480
23404: LD_INT 303
23406: DOUBLE
23407: EQUAL
23408: IFTRUE 23412
23410: GO 23449
23412: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23413: LD_VAR 0 6
23417: PPUSH
23418: LD_VAR 0 7
23422: PPUSH
23423: LD_VAR 0 8
23427: PPUSH
23428: LD_VAR 0 9
23432: PPUSH
23433: LD_VAR 0 4
23437: PPUSH
23438: LD_VAR 0 5
23442: PPUSH
23443: CALL 23485 0 6
23447: GO 23480
23449: LD_INT 304
23451: DOUBLE
23452: EQUAL
23453: IFTRUE 23457
23455: GO 23479
23457: POP
// hHackTeleport ( unit , x , y ) ; end ;
23458: LD_VAR 0 2
23462: PPUSH
23463: LD_VAR 0 4
23467: PPUSH
23468: LD_VAR 0 5
23472: PPUSH
23473: CALL 25244 0 3
23477: GO 23480
23479: POP
// end ;
23480: LD_VAR 0 12
23484: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23485: LD_INT 0
23487: PPUSH
23488: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23489: LD_VAR 0 1
23493: PUSH
23494: LD_INT 1
23496: LESS
23497: PUSH
23498: LD_VAR 0 1
23502: PUSH
23503: LD_INT 3
23505: GREATER
23506: OR
23507: PUSH
23508: LD_VAR 0 5
23512: PPUSH
23513: LD_VAR 0 6
23517: PPUSH
23518: CALL_OW 428
23522: OR
23523: IFFALSE 23527
// exit ;
23525: GO 24247
// uc_side := your_side ;
23527: LD_ADDR_OWVAR 20
23531: PUSH
23532: LD_OWVAR 2
23536: ST_TO_ADDR
// uc_nation := nation ;
23537: LD_ADDR_OWVAR 21
23541: PUSH
23542: LD_VAR 0 1
23546: ST_TO_ADDR
// bc_level = 1 ;
23547: LD_ADDR_OWVAR 43
23551: PUSH
23552: LD_INT 1
23554: ST_TO_ADDR
// case btype of 1 :
23555: LD_VAR 0 2
23559: PUSH
23560: LD_INT 1
23562: DOUBLE
23563: EQUAL
23564: IFTRUE 23568
23566: GO 23579
23568: POP
// bc_type := b_depot ; 2 :
23569: LD_ADDR_OWVAR 42
23573: PUSH
23574: LD_INT 0
23576: ST_TO_ADDR
23577: GO 24191
23579: LD_INT 2
23581: DOUBLE
23582: EQUAL
23583: IFTRUE 23587
23585: GO 23598
23587: POP
// bc_type := b_warehouse ; 3 :
23588: LD_ADDR_OWVAR 42
23592: PUSH
23593: LD_INT 1
23595: ST_TO_ADDR
23596: GO 24191
23598: LD_INT 3
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23617
23606: POP
// bc_type := b_lab ; 4 .. 9 :
23607: LD_ADDR_OWVAR 42
23611: PUSH
23612: LD_INT 6
23614: ST_TO_ADDR
23615: GO 24191
23617: LD_INT 4
23619: DOUBLE
23620: GREATEREQUAL
23621: IFFALSE 23629
23623: LD_INT 9
23625: DOUBLE
23626: LESSEQUAL
23627: IFTRUE 23631
23629: GO 23683
23631: POP
// begin bc_type := b_lab_half ;
23632: LD_ADDR_OWVAR 42
23636: PUSH
23637: LD_INT 7
23639: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23640: LD_ADDR_OWVAR 44
23644: PUSH
23645: LD_INT 10
23647: PUSH
23648: LD_INT 11
23650: PUSH
23651: LD_INT 12
23653: PUSH
23654: LD_INT 15
23656: PUSH
23657: LD_INT 14
23659: PUSH
23660: LD_INT 13
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: PUSH
23671: LD_VAR 0 2
23675: PUSH
23676: LD_INT 3
23678: MINUS
23679: ARRAY
23680: ST_TO_ADDR
// end ; 10 .. 13 :
23681: GO 24191
23683: LD_INT 10
23685: DOUBLE
23686: GREATEREQUAL
23687: IFFALSE 23695
23689: LD_INT 13
23691: DOUBLE
23692: LESSEQUAL
23693: IFTRUE 23697
23695: GO 23774
23697: POP
// begin bc_type := b_lab_full ;
23698: LD_ADDR_OWVAR 42
23702: PUSH
23703: LD_INT 8
23705: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23706: LD_ADDR_OWVAR 44
23710: PUSH
23711: LD_INT 10
23713: PUSH
23714: LD_INT 12
23716: PUSH
23717: LD_INT 14
23719: PUSH
23720: LD_INT 13
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: LD_VAR 0 2
23733: PUSH
23734: LD_INT 9
23736: MINUS
23737: ARRAY
23738: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23739: LD_ADDR_OWVAR 45
23743: PUSH
23744: LD_INT 11
23746: PUSH
23747: LD_INT 15
23749: PUSH
23750: LD_INT 12
23752: PUSH
23753: LD_INT 15
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: PUSH
23762: LD_VAR 0 2
23766: PUSH
23767: LD_INT 9
23769: MINUS
23770: ARRAY
23771: ST_TO_ADDR
// end ; 14 :
23772: GO 24191
23774: LD_INT 14
23776: DOUBLE
23777: EQUAL
23778: IFTRUE 23782
23780: GO 23793
23782: POP
// bc_type := b_workshop ; 15 :
23783: LD_ADDR_OWVAR 42
23787: PUSH
23788: LD_INT 2
23790: ST_TO_ADDR
23791: GO 24191
23793: LD_INT 15
23795: DOUBLE
23796: EQUAL
23797: IFTRUE 23801
23799: GO 23812
23801: POP
// bc_type := b_factory ; 16 :
23802: LD_ADDR_OWVAR 42
23806: PUSH
23807: LD_INT 3
23809: ST_TO_ADDR
23810: GO 24191
23812: LD_INT 16
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23831
23820: POP
// bc_type := b_ext_gun ; 17 :
23821: LD_ADDR_OWVAR 42
23825: PUSH
23826: LD_INT 17
23828: ST_TO_ADDR
23829: GO 24191
23831: LD_INT 17
23833: DOUBLE
23834: EQUAL
23835: IFTRUE 23839
23837: GO 23867
23839: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23840: LD_ADDR_OWVAR 42
23844: PUSH
23845: LD_INT 19
23847: PUSH
23848: LD_INT 23
23850: PUSH
23851: LD_INT 19
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: PUSH
23859: LD_VAR 0 1
23863: ARRAY
23864: ST_TO_ADDR
23865: GO 24191
23867: LD_INT 18
23869: DOUBLE
23870: EQUAL
23871: IFTRUE 23875
23873: GO 23886
23875: POP
// bc_type := b_ext_radar ; 19 :
23876: LD_ADDR_OWVAR 42
23880: PUSH
23881: LD_INT 20
23883: ST_TO_ADDR
23884: GO 24191
23886: LD_INT 19
23888: DOUBLE
23889: EQUAL
23890: IFTRUE 23894
23892: GO 23905
23894: POP
// bc_type := b_ext_radio ; 20 :
23895: LD_ADDR_OWVAR 42
23899: PUSH
23900: LD_INT 22
23902: ST_TO_ADDR
23903: GO 24191
23905: LD_INT 20
23907: DOUBLE
23908: EQUAL
23909: IFTRUE 23913
23911: GO 23924
23913: POP
// bc_type := b_ext_siberium ; 21 :
23914: LD_ADDR_OWVAR 42
23918: PUSH
23919: LD_INT 21
23921: ST_TO_ADDR
23922: GO 24191
23924: LD_INT 21
23926: DOUBLE
23927: EQUAL
23928: IFTRUE 23932
23930: GO 23943
23932: POP
// bc_type := b_ext_computer ; 22 :
23933: LD_ADDR_OWVAR 42
23937: PUSH
23938: LD_INT 24
23940: ST_TO_ADDR
23941: GO 24191
23943: LD_INT 22
23945: DOUBLE
23946: EQUAL
23947: IFTRUE 23951
23949: GO 23962
23951: POP
// bc_type := b_ext_track ; 23 :
23952: LD_ADDR_OWVAR 42
23956: PUSH
23957: LD_INT 16
23959: ST_TO_ADDR
23960: GO 24191
23962: LD_INT 23
23964: DOUBLE
23965: EQUAL
23966: IFTRUE 23970
23968: GO 23981
23970: POP
// bc_type := b_ext_laser ; 24 :
23971: LD_ADDR_OWVAR 42
23975: PUSH
23976: LD_INT 25
23978: ST_TO_ADDR
23979: GO 24191
23981: LD_INT 24
23983: DOUBLE
23984: EQUAL
23985: IFTRUE 23989
23987: GO 24000
23989: POP
// bc_type := b_control_tower ; 25 :
23990: LD_ADDR_OWVAR 42
23994: PUSH
23995: LD_INT 36
23997: ST_TO_ADDR
23998: GO 24191
24000: LD_INT 25
24002: DOUBLE
24003: EQUAL
24004: IFTRUE 24008
24006: GO 24019
24008: POP
// bc_type := b_breastwork ; 26 :
24009: LD_ADDR_OWVAR 42
24013: PUSH
24014: LD_INT 31
24016: ST_TO_ADDR
24017: GO 24191
24019: LD_INT 26
24021: DOUBLE
24022: EQUAL
24023: IFTRUE 24027
24025: GO 24038
24027: POP
// bc_type := b_bunker ; 27 :
24028: LD_ADDR_OWVAR 42
24032: PUSH
24033: LD_INT 32
24035: ST_TO_ADDR
24036: GO 24191
24038: LD_INT 27
24040: DOUBLE
24041: EQUAL
24042: IFTRUE 24046
24044: GO 24057
24046: POP
// bc_type := b_turret ; 28 :
24047: LD_ADDR_OWVAR 42
24051: PUSH
24052: LD_INT 33
24054: ST_TO_ADDR
24055: GO 24191
24057: LD_INT 28
24059: DOUBLE
24060: EQUAL
24061: IFTRUE 24065
24063: GO 24076
24065: POP
// bc_type := b_armoury ; 29 :
24066: LD_ADDR_OWVAR 42
24070: PUSH
24071: LD_INT 4
24073: ST_TO_ADDR
24074: GO 24191
24076: LD_INT 29
24078: DOUBLE
24079: EQUAL
24080: IFTRUE 24084
24082: GO 24095
24084: POP
// bc_type := b_barracks ; 30 :
24085: LD_ADDR_OWVAR 42
24089: PUSH
24090: LD_INT 5
24092: ST_TO_ADDR
24093: GO 24191
24095: LD_INT 30
24097: DOUBLE
24098: EQUAL
24099: IFTRUE 24103
24101: GO 24114
24103: POP
// bc_type := b_solar_power ; 31 :
24104: LD_ADDR_OWVAR 42
24108: PUSH
24109: LD_INT 27
24111: ST_TO_ADDR
24112: GO 24191
24114: LD_INT 31
24116: DOUBLE
24117: EQUAL
24118: IFTRUE 24122
24120: GO 24133
24122: POP
// bc_type := b_oil_power ; 32 :
24123: LD_ADDR_OWVAR 42
24127: PUSH
24128: LD_INT 26
24130: ST_TO_ADDR
24131: GO 24191
24133: LD_INT 32
24135: DOUBLE
24136: EQUAL
24137: IFTRUE 24141
24139: GO 24152
24141: POP
// bc_type := b_siberite_power ; 33 :
24142: LD_ADDR_OWVAR 42
24146: PUSH
24147: LD_INT 28
24149: ST_TO_ADDR
24150: GO 24191
24152: LD_INT 33
24154: DOUBLE
24155: EQUAL
24156: IFTRUE 24160
24158: GO 24171
24160: POP
// bc_type := b_oil_mine ; 34 :
24161: LD_ADDR_OWVAR 42
24165: PUSH
24166: LD_INT 29
24168: ST_TO_ADDR
24169: GO 24191
24171: LD_INT 34
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 24190
24179: POP
// bc_type := b_siberite_mine ; end ;
24180: LD_ADDR_OWVAR 42
24184: PUSH
24185: LD_INT 30
24187: ST_TO_ADDR
24188: GO 24191
24190: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24191: LD_ADDR_VAR 0 8
24195: PUSH
24196: LD_VAR 0 5
24200: PPUSH
24201: LD_VAR 0 6
24205: PPUSH
24206: LD_VAR 0 3
24210: PPUSH
24211: CALL_OW 47
24215: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24216: LD_OWVAR 42
24220: PUSH
24221: LD_INT 32
24223: PUSH
24224: LD_INT 33
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: IN
24231: IFFALSE 24247
// PlaceWeaponTurret ( b , weapon ) ;
24233: LD_VAR 0 8
24237: PPUSH
24238: LD_VAR 0 4
24242: PPUSH
24243: CALL_OW 431
// end ;
24247: LD_VAR 0 7
24251: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24252: LD_INT 0
24254: PPUSH
24255: PPUSH
24256: PPUSH
24257: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24258: LD_ADDR_VAR 0 4
24262: PUSH
24263: LD_INT 22
24265: PUSH
24266: LD_OWVAR 2
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: LD_INT 30
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 30
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PPUSH
24307: CALL_OW 69
24311: ST_TO_ADDR
// if not tmp then
24312: LD_VAR 0 4
24316: NOT
24317: IFFALSE 24321
// exit ;
24319: GO 24380
// for i in tmp do
24321: LD_ADDR_VAR 0 2
24325: PUSH
24326: LD_VAR 0 4
24330: PUSH
24331: FOR_IN
24332: IFFALSE 24378
// for j = 1 to 3 do
24334: LD_ADDR_VAR 0 3
24338: PUSH
24339: DOUBLE
24340: LD_INT 1
24342: DEC
24343: ST_TO_ADDR
24344: LD_INT 3
24346: PUSH
24347: FOR_TO
24348: IFFALSE 24374
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24350: LD_VAR 0 2
24354: PPUSH
24355: CALL_OW 274
24359: PPUSH
24360: LD_VAR 0 3
24364: PPUSH
24365: LD_INT 99999
24367: PPUSH
24368: CALL_OW 277
24372: GO 24347
24374: POP
24375: POP
24376: GO 24331
24378: POP
24379: POP
// end ;
24380: LD_VAR 0 1
24384: RET
// export function hHackSetLevel10 ; var i , j ; begin
24385: LD_INT 0
24387: PPUSH
24388: PPUSH
24389: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24390: LD_ADDR_VAR 0 2
24394: PUSH
24395: LD_INT 21
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PPUSH
24405: CALL_OW 69
24409: PUSH
24410: FOR_IN
24411: IFFALSE 24463
// if IsSelected ( i ) then
24413: LD_VAR 0 2
24417: PPUSH
24418: CALL_OW 306
24422: IFFALSE 24461
// begin for j := 1 to 4 do
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: DOUBLE
24430: LD_INT 1
24432: DEC
24433: ST_TO_ADDR
24434: LD_INT 4
24436: PUSH
24437: FOR_TO
24438: IFFALSE 24459
// SetSkill ( i , j , 10 ) ;
24440: LD_VAR 0 2
24444: PPUSH
24445: LD_VAR 0 3
24449: PPUSH
24450: LD_INT 10
24452: PPUSH
24453: CALL_OW 237
24457: GO 24437
24459: POP
24460: POP
// end ;
24461: GO 24410
24463: POP
24464: POP
// end ;
24465: LD_VAR 0 1
24469: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24470: LD_INT 0
24472: PPUSH
24473: PPUSH
24474: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24475: LD_ADDR_VAR 0 2
24479: PUSH
24480: LD_INT 22
24482: PUSH
24483: LD_OWVAR 2
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 21
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PPUSH
24506: CALL_OW 69
24510: PUSH
24511: FOR_IN
24512: IFFALSE 24553
// begin for j := 1 to 4 do
24514: LD_ADDR_VAR 0 3
24518: PUSH
24519: DOUBLE
24520: LD_INT 1
24522: DEC
24523: ST_TO_ADDR
24524: LD_INT 4
24526: PUSH
24527: FOR_TO
24528: IFFALSE 24549
// SetSkill ( i , j , 10 ) ;
24530: LD_VAR 0 2
24534: PPUSH
24535: LD_VAR 0 3
24539: PPUSH
24540: LD_INT 10
24542: PPUSH
24543: CALL_OW 237
24547: GO 24527
24549: POP
24550: POP
// end ;
24551: GO 24511
24553: POP
24554: POP
// end ;
24555: LD_VAR 0 1
24559: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24560: LD_INT 0
24562: PPUSH
// uc_side := your_side ;
24563: LD_ADDR_OWVAR 20
24567: PUSH
24568: LD_OWVAR 2
24572: ST_TO_ADDR
// uc_nation := nation ;
24573: LD_ADDR_OWVAR 21
24577: PUSH
24578: LD_VAR 0 1
24582: ST_TO_ADDR
// InitHc ;
24583: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24587: LD_INT 0
24589: PPUSH
24590: LD_VAR 0 2
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24604: LD_VAR 0 4
24608: PPUSH
24609: LD_VAR 0 5
24613: PPUSH
24614: CALL_OW 428
24618: PUSH
24619: LD_INT 0
24621: EQUAL
24622: IFFALSE 24646
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24624: CALL_OW 44
24628: PPUSH
24629: LD_VAR 0 4
24633: PPUSH
24634: LD_VAR 0 5
24638: PPUSH
24639: LD_INT 1
24641: PPUSH
24642: CALL_OW 48
// end ;
24646: LD_VAR 0 6
24650: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24651: LD_INT 0
24653: PPUSH
24654: PPUSH
// uc_side := your_side ;
24655: LD_ADDR_OWVAR 20
24659: PUSH
24660: LD_OWVAR 2
24664: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24665: LD_VAR 0 1
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: LD_INT 4
24681: PUSH
24682: LD_INT 5
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: IN
24692: IFFALSE 24704
// uc_nation := nation_american else
24694: LD_ADDR_OWVAR 21
24698: PUSH
24699: LD_INT 1
24701: ST_TO_ADDR
24702: GO 24747
// if chassis in [ 11 , 12 , 13 , 14 ] then
24704: LD_VAR 0 1
24708: PUSH
24709: LD_INT 11
24711: PUSH
24712: LD_INT 12
24714: PUSH
24715: LD_INT 13
24717: PUSH
24718: LD_INT 14
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: IN
24727: IFFALSE 24739
// uc_nation := nation_arabian else
24729: LD_ADDR_OWVAR 21
24733: PUSH
24734: LD_INT 2
24736: ST_TO_ADDR
24737: GO 24747
// uc_nation := nation_russian ;
24739: LD_ADDR_OWVAR 21
24743: PUSH
24744: LD_INT 3
24746: ST_TO_ADDR
// vc_chassis := chassis ;
24747: LD_ADDR_OWVAR 37
24751: PUSH
24752: LD_VAR 0 1
24756: ST_TO_ADDR
// vc_engine := engine ;
24757: LD_ADDR_OWVAR 39
24761: PUSH
24762: LD_VAR 0 2
24766: ST_TO_ADDR
// vc_control := control ;
24767: LD_ADDR_OWVAR 38
24771: PUSH
24772: LD_VAR 0 3
24776: ST_TO_ADDR
// vc_weapon := weapon ;
24777: LD_ADDR_OWVAR 40
24781: PUSH
24782: LD_VAR 0 4
24786: ST_TO_ADDR
// un := CreateVehicle ;
24787: LD_ADDR_VAR 0 8
24791: PUSH
24792: CALL_OW 45
24796: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24797: LD_VAR 0 8
24801: PPUSH
24802: LD_INT 0
24804: PPUSH
24805: LD_INT 5
24807: PPUSH
24808: CALL_OW 12
24812: PPUSH
24813: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24817: LD_VAR 0 8
24821: PPUSH
24822: LD_VAR 0 5
24826: PPUSH
24827: LD_VAR 0 6
24831: PPUSH
24832: LD_INT 1
24834: PPUSH
24835: CALL_OW 48
// end ;
24839: LD_VAR 0 7
24843: RET
// export hInvincible ; every 1 do
24844: GO 24846
24846: DISABLE
// hInvincible := [ ] ;
24847: LD_ADDR_EXP 71
24851: PUSH
24852: EMPTY
24853: ST_TO_ADDR
24854: END
// every 10 do var i ;
24855: GO 24857
24857: DISABLE
24858: LD_INT 0
24860: PPUSH
// begin enable ;
24861: ENABLE
// if not hInvincible then
24862: LD_EXP 71
24866: NOT
24867: IFFALSE 24871
// exit ;
24869: GO 24915
// for i in hInvincible do
24871: LD_ADDR_VAR 0 1
24875: PUSH
24876: LD_EXP 71
24880: PUSH
24881: FOR_IN
24882: IFFALSE 24913
// if GetLives ( i ) < 1000 then
24884: LD_VAR 0 1
24888: PPUSH
24889: CALL_OW 256
24893: PUSH
24894: LD_INT 1000
24896: LESS
24897: IFFALSE 24911
// SetLives ( i , 1000 ) ;
24899: LD_VAR 0 1
24903: PPUSH
24904: LD_INT 1000
24906: PPUSH
24907: CALL_OW 234
24911: GO 24881
24913: POP
24914: POP
// end ;
24915: PPOPN 1
24917: END
// export function hHackInvincible ; var i ; begin
24918: LD_INT 0
24920: PPUSH
24921: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24922: LD_ADDR_VAR 0 2
24926: PUSH
24927: LD_INT 2
24929: PUSH
24930: LD_INT 21
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 21
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: PPUSH
24955: CALL_OW 69
24959: PUSH
24960: FOR_IN
24961: IFFALSE 25022
// if IsSelected ( i ) then
24963: LD_VAR 0 2
24967: PPUSH
24968: CALL_OW 306
24972: IFFALSE 25020
// begin if i in hInvincible then
24974: LD_VAR 0 2
24978: PUSH
24979: LD_EXP 71
24983: IN
24984: IFFALSE 25004
// hInvincible := hInvincible diff i else
24986: LD_ADDR_EXP 71
24990: PUSH
24991: LD_EXP 71
24995: PUSH
24996: LD_VAR 0 2
25000: DIFF
25001: ST_TO_ADDR
25002: GO 25020
// hInvincible := hInvincible union i ;
25004: LD_ADDR_EXP 71
25008: PUSH
25009: LD_EXP 71
25013: PUSH
25014: LD_VAR 0 2
25018: UNION
25019: ST_TO_ADDR
// end ;
25020: GO 24960
25022: POP
25023: POP
// end ;
25024: LD_VAR 0 1
25028: RET
// export function hHackInvisible ; var i , j ; begin
25029: LD_INT 0
25031: PPUSH
25032: PPUSH
25033: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25034: LD_ADDR_VAR 0 2
25038: PUSH
25039: LD_INT 21
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PPUSH
25049: CALL_OW 69
25053: PUSH
25054: FOR_IN
25055: IFFALSE 25079
// if IsSelected ( i ) then
25057: LD_VAR 0 2
25061: PPUSH
25062: CALL_OW 306
25066: IFFALSE 25077
// ComForceInvisible ( i ) ;
25068: LD_VAR 0 2
25072: PPUSH
25073: CALL_OW 496
25077: GO 25054
25079: POP
25080: POP
// end ;
25081: LD_VAR 0 1
25085: RET
// export function hHackChangeYourSide ; begin
25086: LD_INT 0
25088: PPUSH
// if your_side = 8 then
25089: LD_OWVAR 2
25093: PUSH
25094: LD_INT 8
25096: EQUAL
25097: IFFALSE 25109
// your_side := 0 else
25099: LD_ADDR_OWVAR 2
25103: PUSH
25104: LD_INT 0
25106: ST_TO_ADDR
25107: GO 25123
// your_side := your_side + 1 ;
25109: LD_ADDR_OWVAR 2
25113: PUSH
25114: LD_OWVAR 2
25118: PUSH
25119: LD_INT 1
25121: PLUS
25122: ST_TO_ADDR
// end ;
25123: LD_VAR 0 1
25127: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25128: LD_INT 0
25130: PPUSH
25131: PPUSH
25132: PPUSH
// for i in all_units do
25133: LD_ADDR_VAR 0 2
25137: PUSH
25138: LD_OWVAR 3
25142: PUSH
25143: FOR_IN
25144: IFFALSE 25222
// if IsSelected ( i ) then
25146: LD_VAR 0 2
25150: PPUSH
25151: CALL_OW 306
25155: IFFALSE 25220
// begin j := GetSide ( i ) ;
25157: LD_ADDR_VAR 0 3
25161: PUSH
25162: LD_VAR 0 2
25166: PPUSH
25167: CALL_OW 255
25171: ST_TO_ADDR
// if j = 8 then
25172: LD_VAR 0 3
25176: PUSH
25177: LD_INT 8
25179: EQUAL
25180: IFFALSE 25192
// j := 0 else
25182: LD_ADDR_VAR 0 3
25186: PUSH
25187: LD_INT 0
25189: ST_TO_ADDR
25190: GO 25206
// j := j + 1 ;
25192: LD_ADDR_VAR 0 3
25196: PUSH
25197: LD_VAR 0 3
25201: PUSH
25202: LD_INT 1
25204: PLUS
25205: ST_TO_ADDR
// SetSide ( i , j ) ;
25206: LD_VAR 0 2
25210: PPUSH
25211: LD_VAR 0 3
25215: PPUSH
25216: CALL_OW 235
// end ;
25220: GO 25143
25222: POP
25223: POP
// end ;
25224: LD_VAR 0 1
25228: RET
// export function hHackFog ; begin
25229: LD_INT 0
25231: PPUSH
// FogOff ( true ) ;
25232: LD_INT 1
25234: PPUSH
25235: CALL_OW 344
// end ;
25239: LD_VAR 0 1
25243: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25244: LD_INT 0
25246: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25247: LD_VAR 0 1
25251: PPUSH
25252: LD_VAR 0 2
25256: PPUSH
25257: LD_VAR 0 3
25261: PPUSH
25262: LD_INT 1
25264: PPUSH
25265: LD_INT 1
25267: PPUSH
25268: CALL_OW 483
// CenterOnXY ( x , y ) ;
25272: LD_VAR 0 2
25276: PPUSH
25277: LD_VAR 0 3
25281: PPUSH
25282: CALL_OW 84
// end ;
25286: LD_VAR 0 4
25290: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25291: LD_INT 0
25293: PPUSH
25294: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25295: LD_VAR 0 1
25299: NOT
25300: PUSH
25301: LD_VAR 0 2
25305: PPUSH
25306: LD_VAR 0 3
25310: PPUSH
25311: CALL_OW 488
25315: NOT
25316: OR
25317: PUSH
25318: LD_VAR 0 1
25322: PPUSH
25323: CALL_OW 266
25327: PUSH
25328: LD_INT 3
25330: NONEQUAL
25331: PUSH
25332: LD_VAR 0 1
25336: PPUSH
25337: CALL_OW 247
25341: PUSH
25342: LD_INT 1
25344: EQUAL
25345: NOT
25346: AND
25347: OR
25348: IFFALSE 25352
// exit ;
25350: GO 25501
// if GetType ( factory ) = unit_human then
25352: LD_VAR 0 1
25356: PPUSH
25357: CALL_OW 247
25361: PUSH
25362: LD_INT 1
25364: EQUAL
25365: IFFALSE 25382
// factory := IsInUnit ( factory ) ;
25367: LD_ADDR_VAR 0 1
25371: PUSH
25372: LD_VAR 0 1
25376: PPUSH
25377: CALL_OW 310
25381: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25382: LD_VAR 0 1
25386: PPUSH
25387: CALL_OW 266
25391: PUSH
25392: LD_INT 3
25394: NONEQUAL
25395: IFFALSE 25399
// exit ;
25397: GO 25501
// if HexInfo ( x , y ) = factory then
25399: LD_VAR 0 2
25403: PPUSH
25404: LD_VAR 0 3
25408: PPUSH
25409: CALL_OW 428
25413: PUSH
25414: LD_VAR 0 1
25418: EQUAL
25419: IFFALSE 25446
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25421: LD_ADDR_EXP 72
25425: PUSH
25426: LD_EXP 72
25430: PPUSH
25431: LD_VAR 0 1
25435: PPUSH
25436: LD_INT 0
25438: PPUSH
25439: CALL_OW 1
25443: ST_TO_ADDR
25444: GO 25497
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25446: LD_ADDR_EXP 72
25450: PUSH
25451: LD_EXP 72
25455: PPUSH
25456: LD_VAR 0 1
25460: PPUSH
25461: LD_VAR 0 1
25465: PPUSH
25466: CALL_OW 255
25470: PUSH
25471: LD_VAR 0 1
25475: PUSH
25476: LD_VAR 0 2
25480: PUSH
25481: LD_VAR 0 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: PPUSH
25492: CALL_OW 1
25496: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25497: CALL 25506 0 0
// end ;
25501: LD_VAR 0 4
25505: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25506: LD_INT 0
25508: PPUSH
25509: PPUSH
25510: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25511: LD_STRING resetFactoryWaypoint();
25513: PPUSH
25514: CALL_OW 559
// if factoryWaypoints then
25518: LD_EXP 72
25522: IFFALSE 25648
// begin list := PrepareArray ( factoryWaypoints ) ;
25524: LD_ADDR_VAR 0 3
25528: PUSH
25529: LD_EXP 72
25533: PPUSH
25534: CALL 72025 0 1
25538: ST_TO_ADDR
// for i := 1 to list do
25539: LD_ADDR_VAR 0 2
25543: PUSH
25544: DOUBLE
25545: LD_INT 1
25547: DEC
25548: ST_TO_ADDR
25549: LD_VAR 0 3
25553: PUSH
25554: FOR_TO
25555: IFFALSE 25646
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25557: LD_STRING setFactoryWaypointXY(
25559: PUSH
25560: LD_VAR 0 3
25564: PUSH
25565: LD_VAR 0 2
25569: ARRAY
25570: PUSH
25571: LD_INT 1
25573: ARRAY
25574: STR
25575: PUSH
25576: LD_STRING ,
25578: STR
25579: PUSH
25580: LD_VAR 0 3
25584: PUSH
25585: LD_VAR 0 2
25589: ARRAY
25590: PUSH
25591: LD_INT 2
25593: ARRAY
25594: STR
25595: PUSH
25596: LD_STRING ,
25598: STR
25599: PUSH
25600: LD_VAR 0 3
25604: PUSH
25605: LD_VAR 0 2
25609: ARRAY
25610: PUSH
25611: LD_INT 3
25613: ARRAY
25614: STR
25615: PUSH
25616: LD_STRING ,
25618: STR
25619: PUSH
25620: LD_VAR 0 3
25624: PUSH
25625: LD_VAR 0 2
25629: ARRAY
25630: PUSH
25631: LD_INT 4
25633: ARRAY
25634: STR
25635: PUSH
25636: LD_STRING )
25638: STR
25639: PPUSH
25640: CALL_OW 559
25644: GO 25554
25646: POP
25647: POP
// end ; end ;
25648: LD_VAR 0 1
25652: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25653: LD_INT 0
25655: PPUSH
// if HexInfo ( x , y ) = warehouse then
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_VAR 0 3
25665: PPUSH
25666: CALL_OW 428
25670: PUSH
25671: LD_VAR 0 1
25675: EQUAL
25676: IFFALSE 25703
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25678: LD_ADDR_EXP 73
25682: PUSH
25683: LD_EXP 73
25687: PPUSH
25688: LD_VAR 0 1
25692: PPUSH
25693: LD_INT 0
25695: PPUSH
25696: CALL_OW 1
25700: ST_TO_ADDR
25701: GO 25754
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25703: LD_ADDR_EXP 73
25707: PUSH
25708: LD_EXP 73
25712: PPUSH
25713: LD_VAR 0 1
25717: PPUSH
25718: LD_VAR 0 1
25722: PPUSH
25723: CALL_OW 255
25727: PUSH
25728: LD_VAR 0 1
25732: PUSH
25733: LD_VAR 0 2
25737: PUSH
25738: LD_VAR 0 3
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: PPUSH
25749: CALL_OW 1
25753: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25754: CALL 25763 0 0
// end ;
25758: LD_VAR 0 4
25762: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
25767: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25768: LD_STRING resetWarehouseGatheringPoints();
25770: PPUSH
25771: CALL_OW 559
// if warehouseGatheringPoints then
25775: LD_EXP 73
25779: IFFALSE 25905
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25781: LD_ADDR_VAR 0 3
25785: PUSH
25786: LD_EXP 73
25790: PPUSH
25791: CALL 72025 0 1
25795: ST_TO_ADDR
// for i := 1 to list do
25796: LD_ADDR_VAR 0 2
25800: PUSH
25801: DOUBLE
25802: LD_INT 1
25804: DEC
25805: ST_TO_ADDR
25806: LD_VAR 0 3
25810: PUSH
25811: FOR_TO
25812: IFFALSE 25903
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25814: LD_STRING setWarehouseGatheringPointXY(
25816: PUSH
25817: LD_VAR 0 3
25821: PUSH
25822: LD_VAR 0 2
25826: ARRAY
25827: PUSH
25828: LD_INT 1
25830: ARRAY
25831: STR
25832: PUSH
25833: LD_STRING ,
25835: STR
25836: PUSH
25837: LD_VAR 0 3
25841: PUSH
25842: LD_VAR 0 2
25846: ARRAY
25847: PUSH
25848: LD_INT 2
25850: ARRAY
25851: STR
25852: PUSH
25853: LD_STRING ,
25855: STR
25856: PUSH
25857: LD_VAR 0 3
25861: PUSH
25862: LD_VAR 0 2
25866: ARRAY
25867: PUSH
25868: LD_INT 3
25870: ARRAY
25871: STR
25872: PUSH
25873: LD_STRING ,
25875: STR
25876: PUSH
25877: LD_VAR 0 3
25881: PUSH
25882: LD_VAR 0 2
25886: ARRAY
25887: PUSH
25888: LD_INT 4
25890: ARRAY
25891: STR
25892: PUSH
25893: LD_STRING )
25895: STR
25896: PPUSH
25897: CALL_OW 559
25901: GO 25811
25903: POP
25904: POP
// end ; end ;
25905: LD_VAR 0 1
25909: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25910: LD_EXP 73
25914: IFFALSE 26599
25916: GO 25918
25918: DISABLE
25919: LD_INT 0
25921: PPUSH
25922: PPUSH
25923: PPUSH
25924: PPUSH
25925: PPUSH
25926: PPUSH
25927: PPUSH
25928: PPUSH
25929: PPUSH
// begin enable ;
25930: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25931: LD_ADDR_VAR 0 3
25935: PUSH
25936: LD_EXP 73
25940: PPUSH
25941: CALL 72025 0 1
25945: ST_TO_ADDR
// if not list then
25946: LD_VAR 0 3
25950: NOT
25951: IFFALSE 25955
// exit ;
25953: GO 26599
// for i := 1 to list do
25955: LD_ADDR_VAR 0 1
25959: PUSH
25960: DOUBLE
25961: LD_INT 1
25963: DEC
25964: ST_TO_ADDR
25965: LD_VAR 0 3
25969: PUSH
25970: FOR_TO
25971: IFFALSE 26597
// begin depot := list [ i ] [ 2 ] ;
25973: LD_ADDR_VAR 0 8
25977: PUSH
25978: LD_VAR 0 3
25982: PUSH
25983: LD_VAR 0 1
25987: ARRAY
25988: PUSH
25989: LD_INT 2
25991: ARRAY
25992: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25993: LD_ADDR_VAR 0 5
25997: PUSH
25998: LD_VAR 0 3
26002: PUSH
26003: LD_VAR 0 1
26007: ARRAY
26008: PUSH
26009: LD_INT 1
26011: ARRAY
26012: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26013: LD_VAR 0 8
26017: PPUSH
26018: CALL_OW 301
26022: PUSH
26023: LD_VAR 0 5
26027: PUSH
26028: LD_VAR 0 8
26032: PPUSH
26033: CALL_OW 255
26037: NONEQUAL
26038: OR
26039: IFFALSE 26068
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26041: LD_ADDR_EXP 73
26045: PUSH
26046: LD_EXP 73
26050: PPUSH
26051: LD_VAR 0 8
26055: PPUSH
26056: LD_INT 0
26058: PPUSH
26059: CALL_OW 1
26063: ST_TO_ADDR
// exit ;
26064: POP
26065: POP
26066: GO 26599
// end ; x := list [ i ] [ 3 ] ;
26068: LD_ADDR_VAR 0 6
26072: PUSH
26073: LD_VAR 0 3
26077: PUSH
26078: LD_VAR 0 1
26082: ARRAY
26083: PUSH
26084: LD_INT 3
26086: ARRAY
26087: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26088: LD_ADDR_VAR 0 7
26092: PUSH
26093: LD_VAR 0 3
26097: PUSH
26098: LD_VAR 0 1
26102: ARRAY
26103: PUSH
26104: LD_INT 4
26106: ARRAY
26107: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26108: LD_ADDR_VAR 0 9
26112: PUSH
26113: LD_VAR 0 6
26117: PPUSH
26118: LD_VAR 0 7
26122: PPUSH
26123: LD_INT 16
26125: PPUSH
26126: CALL 70613 0 3
26130: ST_TO_ADDR
// if not cratesNearbyPoint then
26131: LD_VAR 0 9
26135: NOT
26136: IFFALSE 26142
// exit ;
26138: POP
26139: POP
26140: GO 26599
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26142: LD_ADDR_VAR 0 4
26146: PUSH
26147: LD_INT 22
26149: PUSH
26150: LD_VAR 0 5
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 3
26161: PUSH
26162: LD_INT 60
26164: PUSH
26165: EMPTY
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 91
26174: PUSH
26175: LD_VAR 0 8
26179: PUSH
26180: LD_INT 6
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: LD_INT 25
26193: PUSH
26194: LD_INT 2
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 25
26203: PUSH
26204: LD_INT 16
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: PPUSH
26222: CALL_OW 69
26226: PUSH
26227: LD_VAR 0 8
26231: PPUSH
26232: CALL_OW 313
26236: PPUSH
26237: LD_INT 3
26239: PUSH
26240: LD_INT 60
26242: PUSH
26243: EMPTY
26244: LIST
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: LD_INT 25
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 25
26265: PUSH
26266: LD_INT 16
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 72
26286: UNION
26287: ST_TO_ADDR
// if tmp then
26288: LD_VAR 0 4
26292: IFFALSE 26372
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26294: LD_ADDR_VAR 0 4
26298: PUSH
26299: LD_VAR 0 4
26303: PPUSH
26304: LD_INT 3
26306: PPUSH
26307: CALL 68582 0 2
26311: ST_TO_ADDR
// for j in tmp do
26312: LD_ADDR_VAR 0 2
26316: PUSH
26317: LD_VAR 0 4
26321: PUSH
26322: FOR_IN
26323: IFFALSE 26366
// begin if IsInUnit ( j ) then
26325: LD_VAR 0 2
26329: PPUSH
26330: CALL_OW 310
26334: IFFALSE 26345
// ComExit ( j ) ;
26336: LD_VAR 0 2
26340: PPUSH
26341: CALL 68665 0 1
// AddComCollect ( j , x , y ) ;
26345: LD_VAR 0 2
26349: PPUSH
26350: LD_VAR 0 6
26354: PPUSH
26355: LD_VAR 0 7
26359: PPUSH
26360: CALL_OW 177
// end ;
26364: GO 26322
26366: POP
26367: POP
// exit ;
26368: POP
26369: POP
26370: GO 26599
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26372: LD_ADDR_VAR 0 4
26376: PUSH
26377: LD_INT 22
26379: PUSH
26380: LD_VAR 0 5
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 91
26391: PUSH
26392: LD_VAR 0 8
26396: PUSH
26397: LD_INT 8
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 2
26407: PUSH
26408: LD_INT 34
26410: PUSH
26411: LD_INT 12
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 34
26420: PUSH
26421: LD_INT 51
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 34
26430: PUSH
26431: LD_INT 32
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 34
26440: PUSH
26441: LD_INT 89
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: LIST
26459: PPUSH
26460: CALL_OW 69
26464: ST_TO_ADDR
// if tmp then
26465: LD_VAR 0 4
26469: IFFALSE 26595
// begin for j in tmp do
26471: LD_ADDR_VAR 0 2
26475: PUSH
26476: LD_VAR 0 4
26480: PUSH
26481: FOR_IN
26482: IFFALSE 26593
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26484: LD_VAR 0 2
26488: PPUSH
26489: CALL_OW 262
26493: PUSH
26494: LD_INT 3
26496: EQUAL
26497: PUSH
26498: LD_VAR 0 2
26502: PPUSH
26503: CALL_OW 261
26507: PUSH
26508: LD_INT 20
26510: GREATER
26511: OR
26512: PUSH
26513: LD_VAR 0 2
26517: PPUSH
26518: CALL_OW 314
26522: NOT
26523: AND
26524: PUSH
26525: LD_VAR 0 2
26529: PPUSH
26530: CALL_OW 263
26534: PUSH
26535: LD_INT 1
26537: NONEQUAL
26538: PUSH
26539: LD_VAR 0 2
26543: PPUSH
26544: CALL_OW 311
26548: OR
26549: AND
26550: IFFALSE 26591
// begin ComCollect ( j , x , y ) ;
26552: LD_VAR 0 2
26556: PPUSH
26557: LD_VAR 0 6
26561: PPUSH
26562: LD_VAR 0 7
26566: PPUSH
26567: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26571: LD_VAR 0 2
26575: PPUSH
26576: LD_VAR 0 8
26580: PPUSH
26581: CALL_OW 172
// exit ;
26585: POP
26586: POP
26587: POP
26588: POP
26589: GO 26599
// end ;
26591: GO 26481
26593: POP
26594: POP
// end ; end ;
26595: GO 25970
26597: POP
26598: POP
// end ; end_of_file
26599: PPOPN 9
26601: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26602: LD_INT 0
26604: PPUSH
26605: PPUSH
26606: PPUSH
26607: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26608: LD_VAR 0 1
26612: PPUSH
26613: CALL_OW 264
26617: PUSH
26618: LD_INT 91
26620: EQUAL
26621: IFFALSE 26693
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26623: LD_INT 68
26625: PPUSH
26626: LD_VAR 0 1
26630: PPUSH
26631: CALL_OW 255
26635: PPUSH
26636: CALL_OW 321
26640: PUSH
26641: LD_INT 2
26643: EQUAL
26644: IFFALSE 26656
// eff := 70 else
26646: LD_ADDR_VAR 0 4
26650: PUSH
26651: LD_INT 70
26653: ST_TO_ADDR
26654: GO 26664
// eff := 30 ;
26656: LD_ADDR_VAR 0 4
26660: PUSH
26661: LD_INT 30
26663: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26664: LD_VAR 0 1
26668: PPUSH
26669: CALL_OW 250
26673: PPUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL_OW 251
26683: PPUSH
26684: LD_VAR 0 4
26688: PPUSH
26689: CALL_OW 495
// end ; end ;
26693: LD_VAR 0 2
26697: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26698: LD_INT 0
26700: PPUSH
// end ;
26701: LD_VAR 0 4
26705: RET
// export function SOS_Command ( cmd ) ; begin
26706: LD_INT 0
26708: PPUSH
// end ;
26709: LD_VAR 0 2
26713: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26714: LD_INT 0
26716: PPUSH
// end ;
26717: LD_VAR 0 6
26721: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26722: LD_INT 0
26724: PPUSH
26725: PPUSH
// if not vehicle or not factory then
26726: LD_VAR 0 1
26730: NOT
26731: PUSH
26732: LD_VAR 0 2
26736: NOT
26737: OR
26738: IFFALSE 26742
// exit ;
26740: GO 26973
// if factoryWaypoints >= factory then
26742: LD_EXP 72
26746: PUSH
26747: LD_VAR 0 2
26751: GREATEREQUAL
26752: IFFALSE 26973
// if factoryWaypoints [ factory ] then
26754: LD_EXP 72
26758: PUSH
26759: LD_VAR 0 2
26763: ARRAY
26764: IFFALSE 26973
// begin if GetControl ( vehicle ) = control_manual then
26766: LD_VAR 0 1
26770: PPUSH
26771: CALL_OW 263
26775: PUSH
26776: LD_INT 1
26778: EQUAL
26779: IFFALSE 26860
// begin driver := IsDrivenBy ( vehicle ) ;
26781: LD_ADDR_VAR 0 4
26785: PUSH
26786: LD_VAR 0 1
26790: PPUSH
26791: CALL_OW 311
26795: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26796: LD_VAR 0 4
26800: PPUSH
26801: LD_EXP 72
26805: PUSH
26806: LD_VAR 0 2
26810: ARRAY
26811: PUSH
26812: LD_INT 3
26814: ARRAY
26815: PPUSH
26816: LD_EXP 72
26820: PUSH
26821: LD_VAR 0 2
26825: ARRAY
26826: PUSH
26827: LD_INT 4
26829: ARRAY
26830: PPUSH
26831: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26835: LD_VAR 0 4
26839: PPUSH
26840: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26844: LD_VAR 0 4
26848: PPUSH
26849: LD_VAR 0 2
26853: PPUSH
26854: CALL_OW 180
// end else
26858: GO 26973
// if GetControl ( vehicle ) = control_remote then
26860: LD_VAR 0 1
26864: PPUSH
26865: CALL_OW 263
26869: PUSH
26870: LD_INT 2
26872: EQUAL
26873: IFFALSE 26934
// begin wait ( 0 0$2 ) ;
26875: LD_INT 70
26877: PPUSH
26878: CALL_OW 67
// if Connect ( vehicle ) then
26882: LD_VAR 0 1
26886: PPUSH
26887: CALL 38997 0 1
26891: IFFALSE 26932
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26893: LD_VAR 0 1
26897: PPUSH
26898: LD_EXP 72
26902: PUSH
26903: LD_VAR 0 2
26907: ARRAY
26908: PUSH
26909: LD_INT 3
26911: ARRAY
26912: PPUSH
26913: LD_EXP 72
26917: PUSH
26918: LD_VAR 0 2
26922: ARRAY
26923: PUSH
26924: LD_INT 4
26926: ARRAY
26927: PPUSH
26928: CALL_OW 171
// end else
26932: GO 26973
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26934: LD_VAR 0 1
26938: PPUSH
26939: LD_EXP 72
26943: PUSH
26944: LD_VAR 0 2
26948: ARRAY
26949: PUSH
26950: LD_INT 3
26952: ARRAY
26953: PPUSH
26954: LD_EXP 72
26958: PUSH
26959: LD_VAR 0 2
26963: ARRAY
26964: PUSH
26965: LD_INT 4
26967: ARRAY
26968: PPUSH
26969: CALL_OW 171
// end ; end ;
26973: LD_VAR 0 3
26977: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26978: LD_INT 0
26980: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26981: LD_VAR 0 1
26985: PUSH
26986: LD_INT 250
26988: EQUAL
26989: PUSH
26990: LD_VAR 0 2
26994: PPUSH
26995: CALL_OW 264
26999: PUSH
27000: LD_INT 81
27002: EQUAL
27003: AND
27004: IFFALSE 27025
// MinerPlaceMine ( unit , x , y ) ;
27006: LD_VAR 0 2
27010: PPUSH
27011: LD_VAR 0 4
27015: PPUSH
27016: LD_VAR 0 5
27020: PPUSH
27021: CALL 29410 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27025: LD_VAR 0 1
27029: PUSH
27030: LD_INT 251
27032: EQUAL
27033: PUSH
27034: LD_VAR 0 2
27038: PPUSH
27039: CALL_OW 264
27043: PUSH
27044: LD_INT 81
27046: EQUAL
27047: AND
27048: IFFALSE 27069
// MinerDetonateMine ( unit , x , y ) ;
27050: LD_VAR 0 2
27054: PPUSH
27055: LD_VAR 0 4
27059: PPUSH
27060: LD_VAR 0 5
27064: PPUSH
27065: CALL 29685 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27069: LD_VAR 0 1
27073: PUSH
27074: LD_INT 252
27076: EQUAL
27077: PUSH
27078: LD_VAR 0 2
27082: PPUSH
27083: CALL_OW 264
27087: PUSH
27088: LD_INT 81
27090: EQUAL
27091: AND
27092: IFFALSE 27113
// MinerCreateMinefield ( unit , x , y ) ;
27094: LD_VAR 0 2
27098: PPUSH
27099: LD_VAR 0 4
27103: PPUSH
27104: LD_VAR 0 5
27108: PPUSH
27109: CALL 30102 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27113: LD_VAR 0 1
27117: PUSH
27118: LD_INT 253
27120: EQUAL
27121: PUSH
27122: LD_VAR 0 2
27126: PPUSH
27127: CALL_OW 257
27131: PUSH
27132: LD_INT 5
27134: EQUAL
27135: AND
27136: IFFALSE 27157
// ComBinocular ( unit , x , y ) ;
27138: LD_VAR 0 2
27142: PPUSH
27143: LD_VAR 0 4
27147: PPUSH
27148: LD_VAR 0 5
27152: PPUSH
27153: CALL 30471 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27157: LD_VAR 0 1
27161: PUSH
27162: LD_INT 254
27164: EQUAL
27165: PUSH
27166: LD_VAR 0 2
27170: PPUSH
27171: CALL_OW 264
27175: PUSH
27176: LD_INT 99
27178: EQUAL
27179: AND
27180: PUSH
27181: LD_VAR 0 3
27185: PPUSH
27186: CALL_OW 263
27190: PUSH
27191: LD_INT 3
27193: EQUAL
27194: AND
27195: IFFALSE 27211
// HackDestroyVehicle ( unit , selectedUnit ) ;
27197: LD_VAR 0 2
27201: PPUSH
27202: LD_VAR 0 3
27206: PPUSH
27207: CALL 28774 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27211: LD_VAR 0 1
27215: PUSH
27216: LD_INT 255
27218: EQUAL
27219: PUSH
27220: LD_VAR 0 2
27224: PPUSH
27225: CALL_OW 264
27229: PUSH
27230: LD_INT 14
27232: PUSH
27233: LD_INT 53
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: IN
27240: AND
27241: PUSH
27242: LD_VAR 0 4
27246: PPUSH
27247: LD_VAR 0 5
27251: PPUSH
27252: CALL_OW 488
27256: AND
27257: IFFALSE 27281
// CutTreeXYR ( unit , x , y , 12 ) ;
27259: LD_VAR 0 2
27263: PPUSH
27264: LD_VAR 0 4
27268: PPUSH
27269: LD_VAR 0 5
27273: PPUSH
27274: LD_INT 12
27276: PPUSH
27277: CALL 27344 0 4
// if cmd = 256 then
27281: LD_VAR 0 1
27285: PUSH
27286: LD_INT 256
27288: EQUAL
27289: IFFALSE 27310
// SetFactoryWaypoint ( unit , x , y ) ;
27291: LD_VAR 0 2
27295: PPUSH
27296: LD_VAR 0 4
27300: PPUSH
27301: LD_VAR 0 5
27305: PPUSH
27306: CALL 25291 0 3
// if cmd = 257 then
27310: LD_VAR 0 1
27314: PUSH
27315: LD_INT 257
27317: EQUAL
27318: IFFALSE 27339
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27320: LD_VAR 0 2
27324: PPUSH
27325: LD_VAR 0 4
27329: PPUSH
27330: LD_VAR 0 5
27334: PPUSH
27335: CALL 25653 0 3
// end ;
27339: LD_VAR 0 6
27343: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27344: LD_INT 0
27346: PPUSH
27347: PPUSH
27348: PPUSH
27349: PPUSH
27350: PPUSH
27351: PPUSH
27352: PPUSH
27353: PPUSH
27354: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27355: LD_VAR 0 1
27359: NOT
27360: PUSH
27361: LD_VAR 0 2
27365: PPUSH
27366: LD_VAR 0 3
27370: PPUSH
27371: CALL_OW 488
27375: NOT
27376: OR
27377: PUSH
27378: LD_VAR 0 4
27382: NOT
27383: OR
27384: IFFALSE 27388
// exit ;
27386: GO 27728
// list := [ ] ;
27388: LD_ADDR_VAR 0 13
27392: PUSH
27393: EMPTY
27394: ST_TO_ADDR
// if x - r < 0 then
27395: LD_VAR 0 2
27399: PUSH
27400: LD_VAR 0 4
27404: MINUS
27405: PUSH
27406: LD_INT 0
27408: LESS
27409: IFFALSE 27421
// min_x := 0 else
27411: LD_ADDR_VAR 0 7
27415: PUSH
27416: LD_INT 0
27418: ST_TO_ADDR
27419: GO 27437
// min_x := x - r ;
27421: LD_ADDR_VAR 0 7
27425: PUSH
27426: LD_VAR 0 2
27430: PUSH
27431: LD_VAR 0 4
27435: MINUS
27436: ST_TO_ADDR
// if y - r < 0 then
27437: LD_VAR 0 3
27441: PUSH
27442: LD_VAR 0 4
27446: MINUS
27447: PUSH
27448: LD_INT 0
27450: LESS
27451: IFFALSE 27463
// min_y := 0 else
27453: LD_ADDR_VAR 0 8
27457: PUSH
27458: LD_INT 0
27460: ST_TO_ADDR
27461: GO 27479
// min_y := y - r ;
27463: LD_ADDR_VAR 0 8
27467: PUSH
27468: LD_VAR 0 3
27472: PUSH
27473: LD_VAR 0 4
27477: MINUS
27478: ST_TO_ADDR
// max_x := x + r ;
27479: LD_ADDR_VAR 0 9
27483: PUSH
27484: LD_VAR 0 2
27488: PUSH
27489: LD_VAR 0 4
27493: PLUS
27494: ST_TO_ADDR
// max_y := y + r ;
27495: LD_ADDR_VAR 0 10
27499: PUSH
27500: LD_VAR 0 3
27504: PUSH
27505: LD_VAR 0 4
27509: PLUS
27510: ST_TO_ADDR
// for _x = min_x to max_x do
27511: LD_ADDR_VAR 0 11
27515: PUSH
27516: DOUBLE
27517: LD_VAR 0 7
27521: DEC
27522: ST_TO_ADDR
27523: LD_VAR 0 9
27527: PUSH
27528: FOR_TO
27529: IFFALSE 27646
// for _y = min_y to max_y do
27531: LD_ADDR_VAR 0 12
27535: PUSH
27536: DOUBLE
27537: LD_VAR 0 8
27541: DEC
27542: ST_TO_ADDR
27543: LD_VAR 0 10
27547: PUSH
27548: FOR_TO
27549: IFFALSE 27642
// begin if not ValidHex ( _x , _y ) then
27551: LD_VAR 0 11
27555: PPUSH
27556: LD_VAR 0 12
27560: PPUSH
27561: CALL_OW 488
27565: NOT
27566: IFFALSE 27570
// continue ;
27568: GO 27548
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27570: LD_VAR 0 11
27574: PPUSH
27575: LD_VAR 0 12
27579: PPUSH
27580: CALL_OW 351
27584: PUSH
27585: LD_VAR 0 11
27589: PPUSH
27590: LD_VAR 0 12
27594: PPUSH
27595: CALL_OW 554
27599: AND
27600: IFFALSE 27640
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27602: LD_ADDR_VAR 0 13
27606: PUSH
27607: LD_VAR 0 13
27611: PPUSH
27612: LD_VAR 0 13
27616: PUSH
27617: LD_INT 1
27619: PLUS
27620: PPUSH
27621: LD_VAR 0 11
27625: PUSH
27626: LD_VAR 0 12
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PPUSH
27635: CALL_OW 2
27639: ST_TO_ADDR
// end ;
27640: GO 27548
27642: POP
27643: POP
27644: GO 27528
27646: POP
27647: POP
// if not list then
27648: LD_VAR 0 13
27652: NOT
27653: IFFALSE 27657
// exit ;
27655: GO 27728
// for i in list do
27657: LD_ADDR_VAR 0 6
27661: PUSH
27662: LD_VAR 0 13
27666: PUSH
27667: FOR_IN
27668: IFFALSE 27726
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27670: LD_VAR 0 1
27674: PPUSH
27675: LD_STRING M
27677: PUSH
27678: LD_VAR 0 6
27682: PUSH
27683: LD_INT 1
27685: ARRAY
27686: PUSH
27687: LD_VAR 0 6
27691: PUSH
27692: LD_INT 2
27694: ARRAY
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: PUSH
27717: EMPTY
27718: LIST
27719: PPUSH
27720: CALL_OW 447
27724: GO 27667
27726: POP
27727: POP
// end ;
27728: LD_VAR 0 5
27732: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27733: LD_EXP 75
27737: NOT
27738: IFFALSE 27788
27740: GO 27742
27742: DISABLE
// begin initHack := true ;
27743: LD_ADDR_EXP 75
27747: PUSH
27748: LD_INT 1
27750: ST_TO_ADDR
// hackTanks := [ ] ;
27751: LD_ADDR_EXP 76
27755: PUSH
27756: EMPTY
27757: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27758: LD_ADDR_EXP 77
27762: PUSH
27763: EMPTY
27764: ST_TO_ADDR
// hackLimit := 3 ;
27765: LD_ADDR_EXP 78
27769: PUSH
27770: LD_INT 3
27772: ST_TO_ADDR
// hackDist := 12 ;
27773: LD_ADDR_EXP 79
27777: PUSH
27778: LD_INT 12
27780: ST_TO_ADDR
// hackCounter := [ ] ;
27781: LD_ADDR_EXP 80
27785: PUSH
27786: EMPTY
27787: ST_TO_ADDR
// end ;
27788: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27789: LD_EXP 75
27793: PUSH
27794: LD_INT 34
27796: PUSH
27797: LD_INT 99
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PPUSH
27804: CALL_OW 69
27808: AND
27809: IFFALSE 28062
27811: GO 27813
27813: DISABLE
27814: LD_INT 0
27816: PPUSH
27817: PPUSH
// begin enable ;
27818: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27819: LD_ADDR_VAR 0 1
27823: PUSH
27824: LD_INT 34
27826: PUSH
27827: LD_INT 99
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PPUSH
27834: CALL_OW 69
27838: PUSH
27839: FOR_IN
27840: IFFALSE 28060
// begin if not i in hackTanks then
27842: LD_VAR 0 1
27846: PUSH
27847: LD_EXP 76
27851: IN
27852: NOT
27853: IFFALSE 27936
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27855: LD_ADDR_EXP 76
27859: PUSH
27860: LD_EXP 76
27864: PPUSH
27865: LD_EXP 76
27869: PUSH
27870: LD_INT 1
27872: PLUS
27873: PPUSH
27874: LD_VAR 0 1
27878: PPUSH
27879: CALL_OW 1
27883: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27884: LD_ADDR_EXP 77
27888: PUSH
27889: LD_EXP 77
27893: PPUSH
27894: LD_EXP 77
27898: PUSH
27899: LD_INT 1
27901: PLUS
27902: PPUSH
27903: EMPTY
27904: PPUSH
27905: CALL_OW 1
27909: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27910: LD_ADDR_EXP 80
27914: PUSH
27915: LD_EXP 80
27919: PPUSH
27920: LD_EXP 80
27924: PUSH
27925: LD_INT 1
27927: PLUS
27928: PPUSH
27929: EMPTY
27930: PPUSH
27931: CALL_OW 1
27935: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27936: LD_VAR 0 1
27940: PPUSH
27941: CALL_OW 302
27945: NOT
27946: IFFALSE 27959
// begin HackUnlinkAll ( i ) ;
27948: LD_VAR 0 1
27952: PPUSH
27953: CALL 28065 0 1
// continue ;
27957: GO 27839
// end ; HackCheckCapturedStatus ( i ) ;
27959: LD_VAR 0 1
27963: PPUSH
27964: CALL 28508 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27968: LD_ADDR_VAR 0 2
27972: PUSH
27973: LD_INT 81
27975: PUSH
27976: LD_VAR 0 1
27980: PPUSH
27981: CALL_OW 255
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 33
27992: PUSH
27993: LD_INT 3
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 91
28002: PUSH
28003: LD_VAR 0 1
28007: PUSH
28008: LD_EXP 79
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 50
28020: PUSH
28021: EMPTY
28022: LIST
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: PPUSH
28030: CALL_OW 69
28034: ST_TO_ADDR
// if not tmp then
28035: LD_VAR 0 2
28039: NOT
28040: IFFALSE 28044
// continue ;
28042: GO 27839
// HackLink ( i , tmp ) ;
28044: LD_VAR 0 1
28048: PPUSH
28049: LD_VAR 0 2
28053: PPUSH
28054: CALL 28201 0 2
// end ;
28058: GO 27839
28060: POP
28061: POP
// end ;
28062: PPOPN 2
28064: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28065: LD_INT 0
28067: PPUSH
28068: PPUSH
28069: PPUSH
// if not hack in hackTanks then
28070: LD_VAR 0 1
28074: PUSH
28075: LD_EXP 76
28079: IN
28080: NOT
28081: IFFALSE 28085
// exit ;
28083: GO 28196
// index := GetElementIndex ( hackTanks , hack ) ;
28085: LD_ADDR_VAR 0 4
28089: PUSH
28090: LD_EXP 76
28094: PPUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL 35813 0 2
28104: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28105: LD_EXP 77
28109: PUSH
28110: LD_VAR 0 4
28114: ARRAY
28115: IFFALSE 28196
// begin for i in hackTanksCaptured [ index ] do
28117: LD_ADDR_VAR 0 3
28121: PUSH
28122: LD_EXP 77
28126: PUSH
28127: LD_VAR 0 4
28131: ARRAY
28132: PUSH
28133: FOR_IN
28134: IFFALSE 28160
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28136: LD_VAR 0 3
28140: PUSH
28141: LD_INT 1
28143: ARRAY
28144: PPUSH
28145: LD_VAR 0 3
28149: PUSH
28150: LD_INT 2
28152: ARRAY
28153: PPUSH
28154: CALL_OW 235
28158: GO 28133
28160: POP
28161: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28162: LD_ADDR_EXP 77
28166: PUSH
28167: LD_EXP 77
28171: PPUSH
28172: LD_VAR 0 4
28176: PPUSH
28177: EMPTY
28178: PPUSH
28179: CALL_OW 1
28183: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28184: LD_VAR 0 1
28188: PPUSH
28189: LD_INT 0
28191: PPUSH
28192: CALL_OW 505
// end ; end ;
28196: LD_VAR 0 2
28200: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28201: LD_INT 0
28203: PPUSH
28204: PPUSH
28205: PPUSH
// if not hack in hackTanks or not vehicles then
28206: LD_VAR 0 1
28210: PUSH
28211: LD_EXP 76
28215: IN
28216: NOT
28217: PUSH
28218: LD_VAR 0 2
28222: NOT
28223: OR
28224: IFFALSE 28228
// exit ;
28226: GO 28503
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28228: LD_ADDR_VAR 0 2
28232: PUSH
28233: LD_VAR 0 1
28237: PPUSH
28238: LD_VAR 0 2
28242: PPUSH
28243: LD_INT 1
28245: PPUSH
28246: LD_INT 1
28248: PPUSH
28249: CALL 36463 0 4
28253: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28254: LD_ADDR_VAR 0 5
28258: PUSH
28259: LD_EXP 76
28263: PPUSH
28264: LD_VAR 0 1
28268: PPUSH
28269: CALL 35813 0 2
28273: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28274: LD_EXP 77
28278: PUSH
28279: LD_VAR 0 5
28283: ARRAY
28284: PUSH
28285: LD_EXP 78
28289: LESS
28290: IFFALSE 28479
// begin for i := 1 to vehicles do
28292: LD_ADDR_VAR 0 4
28296: PUSH
28297: DOUBLE
28298: LD_INT 1
28300: DEC
28301: ST_TO_ADDR
28302: LD_VAR 0 2
28306: PUSH
28307: FOR_TO
28308: IFFALSE 28477
// begin if hackTanksCaptured [ index ] = hackLimit then
28310: LD_EXP 77
28314: PUSH
28315: LD_VAR 0 5
28319: ARRAY
28320: PUSH
28321: LD_EXP 78
28325: EQUAL
28326: IFFALSE 28330
// break ;
28328: GO 28477
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28330: LD_ADDR_EXP 80
28334: PUSH
28335: LD_EXP 80
28339: PPUSH
28340: LD_VAR 0 5
28344: PPUSH
28345: LD_EXP 80
28349: PUSH
28350: LD_VAR 0 5
28354: ARRAY
28355: PUSH
28356: LD_INT 1
28358: PLUS
28359: PPUSH
28360: CALL_OW 1
28364: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28365: LD_ADDR_EXP 77
28369: PUSH
28370: LD_EXP 77
28374: PPUSH
28375: LD_VAR 0 5
28379: PUSH
28380: LD_EXP 77
28384: PUSH
28385: LD_VAR 0 5
28389: ARRAY
28390: PUSH
28391: LD_INT 1
28393: PLUS
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PPUSH
28399: LD_VAR 0 2
28403: PUSH
28404: LD_VAR 0 4
28408: ARRAY
28409: PUSH
28410: LD_VAR 0 2
28414: PUSH
28415: LD_VAR 0 4
28419: ARRAY
28420: PPUSH
28421: CALL_OW 255
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PPUSH
28430: CALL 36028 0 3
28434: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28435: LD_VAR 0 2
28439: PUSH
28440: LD_VAR 0 4
28444: ARRAY
28445: PPUSH
28446: LD_VAR 0 1
28450: PPUSH
28451: CALL_OW 255
28455: PPUSH
28456: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28460: LD_VAR 0 2
28464: PUSH
28465: LD_VAR 0 4
28469: ARRAY
28470: PPUSH
28471: CALL_OW 141
// end ;
28475: GO 28307
28477: POP
28478: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28479: LD_VAR 0 1
28483: PPUSH
28484: LD_EXP 77
28488: PUSH
28489: LD_VAR 0 5
28493: ARRAY
28494: PUSH
28495: LD_INT 0
28497: PLUS
28498: PPUSH
28499: CALL_OW 505
// end ;
28503: LD_VAR 0 3
28507: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28508: LD_INT 0
28510: PPUSH
28511: PPUSH
28512: PPUSH
28513: PPUSH
// if not hack in hackTanks then
28514: LD_VAR 0 1
28518: PUSH
28519: LD_EXP 76
28523: IN
28524: NOT
28525: IFFALSE 28529
// exit ;
28527: GO 28769
// index := GetElementIndex ( hackTanks , hack ) ;
28529: LD_ADDR_VAR 0 4
28533: PUSH
28534: LD_EXP 76
28538: PPUSH
28539: LD_VAR 0 1
28543: PPUSH
28544: CALL 35813 0 2
28548: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28549: LD_ADDR_VAR 0 3
28553: PUSH
28554: DOUBLE
28555: LD_EXP 77
28559: PUSH
28560: LD_VAR 0 4
28564: ARRAY
28565: INC
28566: ST_TO_ADDR
28567: LD_INT 1
28569: PUSH
28570: FOR_DOWNTO
28571: IFFALSE 28743
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28573: LD_ADDR_VAR 0 5
28577: PUSH
28578: LD_EXP 77
28582: PUSH
28583: LD_VAR 0 4
28587: ARRAY
28588: PUSH
28589: LD_VAR 0 3
28593: ARRAY
28594: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28595: LD_VAR 0 5
28599: PUSH
28600: LD_INT 1
28602: ARRAY
28603: PPUSH
28604: CALL_OW 302
28608: NOT
28609: PUSH
28610: LD_VAR 0 5
28614: PUSH
28615: LD_INT 1
28617: ARRAY
28618: PPUSH
28619: CALL_OW 255
28623: PUSH
28624: LD_VAR 0 1
28628: PPUSH
28629: CALL_OW 255
28633: NONEQUAL
28634: OR
28635: IFFALSE 28741
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28637: LD_VAR 0 5
28641: PUSH
28642: LD_INT 1
28644: ARRAY
28645: PPUSH
28646: CALL_OW 305
28650: PUSH
28651: LD_VAR 0 5
28655: PUSH
28656: LD_INT 1
28658: ARRAY
28659: PPUSH
28660: CALL_OW 255
28664: PUSH
28665: LD_VAR 0 1
28669: PPUSH
28670: CALL_OW 255
28674: EQUAL
28675: AND
28676: IFFALSE 28700
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28678: LD_VAR 0 5
28682: PUSH
28683: LD_INT 1
28685: ARRAY
28686: PPUSH
28687: LD_VAR 0 5
28691: PUSH
28692: LD_INT 2
28694: ARRAY
28695: PPUSH
28696: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28700: LD_ADDR_EXP 77
28704: PUSH
28705: LD_EXP 77
28709: PPUSH
28710: LD_VAR 0 4
28714: PPUSH
28715: LD_EXP 77
28719: PUSH
28720: LD_VAR 0 4
28724: ARRAY
28725: PPUSH
28726: LD_VAR 0 3
28730: PPUSH
28731: CALL_OW 3
28735: PPUSH
28736: CALL_OW 1
28740: ST_TO_ADDR
// end ; end ;
28741: GO 28570
28743: POP
28744: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28745: LD_VAR 0 1
28749: PPUSH
28750: LD_EXP 77
28754: PUSH
28755: LD_VAR 0 4
28759: ARRAY
28760: PUSH
28761: LD_INT 0
28763: PLUS
28764: PPUSH
28765: CALL_OW 505
// end ;
28769: LD_VAR 0 2
28773: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28774: LD_INT 0
28776: PPUSH
28777: PPUSH
28778: PPUSH
28779: PPUSH
// if not hack in hackTanks then
28780: LD_VAR 0 1
28784: PUSH
28785: LD_EXP 76
28789: IN
28790: NOT
28791: IFFALSE 28795
// exit ;
28793: GO 28880
// index := GetElementIndex ( hackTanks , hack ) ;
28795: LD_ADDR_VAR 0 5
28799: PUSH
28800: LD_EXP 76
28804: PPUSH
28805: LD_VAR 0 1
28809: PPUSH
28810: CALL 35813 0 2
28814: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28815: LD_ADDR_VAR 0 4
28819: PUSH
28820: DOUBLE
28821: LD_INT 1
28823: DEC
28824: ST_TO_ADDR
28825: LD_EXP 77
28829: PUSH
28830: LD_VAR 0 5
28834: ARRAY
28835: PUSH
28836: FOR_TO
28837: IFFALSE 28878
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28839: LD_EXP 77
28843: PUSH
28844: LD_VAR 0 5
28848: ARRAY
28849: PUSH
28850: LD_VAR 0 4
28854: ARRAY
28855: PUSH
28856: LD_INT 1
28858: ARRAY
28859: PUSH
28860: LD_VAR 0 2
28864: EQUAL
28865: IFFALSE 28876
// KillUnit ( vehicle ) ;
28867: LD_VAR 0 2
28871: PPUSH
28872: CALL_OW 66
28876: GO 28836
28878: POP
28879: POP
// end ;
28880: LD_VAR 0 3
28884: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28885: LD_EXP 81
28889: NOT
28890: IFFALSE 28925
28892: GO 28894
28894: DISABLE
// begin initMiner := true ;
28895: LD_ADDR_EXP 81
28899: PUSH
28900: LD_INT 1
28902: ST_TO_ADDR
// minersList := [ ] ;
28903: LD_ADDR_EXP 82
28907: PUSH
28908: EMPTY
28909: ST_TO_ADDR
// minerMinesList := [ ] ;
28910: LD_ADDR_EXP 83
28914: PUSH
28915: EMPTY
28916: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28917: LD_ADDR_EXP 84
28921: PUSH
28922: LD_INT 5
28924: ST_TO_ADDR
// end ;
28925: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28926: LD_EXP 81
28930: PUSH
28931: LD_INT 34
28933: PUSH
28934: LD_INT 81
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PPUSH
28941: CALL_OW 69
28945: AND
28946: IFFALSE 29407
28948: GO 28950
28950: DISABLE
28951: LD_INT 0
28953: PPUSH
28954: PPUSH
28955: PPUSH
28956: PPUSH
// begin enable ;
28957: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28958: LD_ADDR_VAR 0 1
28962: PUSH
28963: LD_INT 34
28965: PUSH
28966: LD_INT 81
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PPUSH
28973: CALL_OW 69
28977: PUSH
28978: FOR_IN
28979: IFFALSE 29051
// begin if not i in minersList then
28981: LD_VAR 0 1
28985: PUSH
28986: LD_EXP 82
28990: IN
28991: NOT
28992: IFFALSE 29049
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28994: LD_ADDR_EXP 82
28998: PUSH
28999: LD_EXP 82
29003: PPUSH
29004: LD_EXP 82
29008: PUSH
29009: LD_INT 1
29011: PLUS
29012: PPUSH
29013: LD_VAR 0 1
29017: PPUSH
29018: CALL_OW 1
29022: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29023: LD_ADDR_EXP 83
29027: PUSH
29028: LD_EXP 83
29032: PPUSH
29033: LD_EXP 83
29037: PUSH
29038: LD_INT 1
29040: PLUS
29041: PPUSH
29042: EMPTY
29043: PPUSH
29044: CALL_OW 1
29048: ST_TO_ADDR
// end end ;
29049: GO 28978
29051: POP
29052: POP
// for i := minerMinesList downto 1 do
29053: LD_ADDR_VAR 0 1
29057: PUSH
29058: DOUBLE
29059: LD_EXP 83
29063: INC
29064: ST_TO_ADDR
29065: LD_INT 1
29067: PUSH
29068: FOR_DOWNTO
29069: IFFALSE 29405
// begin if IsLive ( minersList [ i ] ) then
29071: LD_EXP 82
29075: PUSH
29076: LD_VAR 0 1
29080: ARRAY
29081: PPUSH
29082: CALL_OW 300
29086: IFFALSE 29114
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29088: LD_EXP 82
29092: PUSH
29093: LD_VAR 0 1
29097: ARRAY
29098: PPUSH
29099: LD_EXP 83
29103: PUSH
29104: LD_VAR 0 1
29108: ARRAY
29109: PPUSH
29110: CALL_OW 505
// if not minerMinesList [ i ] then
29114: LD_EXP 83
29118: PUSH
29119: LD_VAR 0 1
29123: ARRAY
29124: NOT
29125: IFFALSE 29129
// continue ;
29127: GO 29068
// for j := minerMinesList [ i ] downto 1 do
29129: LD_ADDR_VAR 0 2
29133: PUSH
29134: DOUBLE
29135: LD_EXP 83
29139: PUSH
29140: LD_VAR 0 1
29144: ARRAY
29145: INC
29146: ST_TO_ADDR
29147: LD_INT 1
29149: PUSH
29150: FOR_DOWNTO
29151: IFFALSE 29401
// begin side := GetSide ( minersList [ i ] ) ;
29153: LD_ADDR_VAR 0 3
29157: PUSH
29158: LD_EXP 82
29162: PUSH
29163: LD_VAR 0 1
29167: ARRAY
29168: PPUSH
29169: CALL_OW 255
29173: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29174: LD_ADDR_VAR 0 4
29178: PUSH
29179: LD_EXP 83
29183: PUSH
29184: LD_VAR 0 1
29188: ARRAY
29189: PUSH
29190: LD_VAR 0 2
29194: ARRAY
29195: PUSH
29196: LD_INT 1
29198: ARRAY
29199: PPUSH
29200: LD_EXP 83
29204: PUSH
29205: LD_VAR 0 1
29209: ARRAY
29210: PUSH
29211: LD_VAR 0 2
29215: ARRAY
29216: PUSH
29217: LD_INT 2
29219: ARRAY
29220: PPUSH
29221: CALL_OW 428
29225: ST_TO_ADDR
// if not tmp then
29226: LD_VAR 0 4
29230: NOT
29231: IFFALSE 29235
// continue ;
29233: GO 29150
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29235: LD_VAR 0 4
29239: PUSH
29240: LD_INT 81
29242: PUSH
29243: LD_VAR 0 3
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PPUSH
29252: CALL_OW 69
29256: IN
29257: PUSH
29258: LD_EXP 83
29262: PUSH
29263: LD_VAR 0 1
29267: ARRAY
29268: PUSH
29269: LD_VAR 0 2
29273: ARRAY
29274: PUSH
29275: LD_INT 1
29277: ARRAY
29278: PPUSH
29279: LD_EXP 83
29283: PUSH
29284: LD_VAR 0 1
29288: ARRAY
29289: PUSH
29290: LD_VAR 0 2
29294: ARRAY
29295: PUSH
29296: LD_INT 2
29298: ARRAY
29299: PPUSH
29300: CALL_OW 458
29304: AND
29305: IFFALSE 29399
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29307: LD_EXP 83
29311: PUSH
29312: LD_VAR 0 1
29316: ARRAY
29317: PUSH
29318: LD_VAR 0 2
29322: ARRAY
29323: PUSH
29324: LD_INT 1
29326: ARRAY
29327: PPUSH
29328: LD_EXP 83
29332: PUSH
29333: LD_VAR 0 1
29337: ARRAY
29338: PUSH
29339: LD_VAR 0 2
29343: ARRAY
29344: PUSH
29345: LD_INT 2
29347: ARRAY
29348: PPUSH
29349: LD_VAR 0 3
29353: PPUSH
29354: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29358: LD_ADDR_EXP 83
29362: PUSH
29363: LD_EXP 83
29367: PPUSH
29368: LD_VAR 0 1
29372: PPUSH
29373: LD_EXP 83
29377: PUSH
29378: LD_VAR 0 1
29382: ARRAY
29383: PPUSH
29384: LD_VAR 0 2
29388: PPUSH
29389: CALL_OW 3
29393: PPUSH
29394: CALL_OW 1
29398: ST_TO_ADDR
// end ; end ;
29399: GO 29150
29401: POP
29402: POP
// end ;
29403: GO 29068
29405: POP
29406: POP
// end ;
29407: PPOPN 4
29409: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29410: LD_INT 0
29412: PPUSH
29413: PPUSH
// result := false ;
29414: LD_ADDR_VAR 0 4
29418: PUSH
29419: LD_INT 0
29421: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29422: LD_VAR 0 1
29426: PPUSH
29427: CALL_OW 264
29431: PUSH
29432: LD_INT 81
29434: EQUAL
29435: NOT
29436: IFFALSE 29440
// exit ;
29438: GO 29680
// index := GetElementIndex ( minersList , unit ) ;
29440: LD_ADDR_VAR 0 5
29444: PUSH
29445: LD_EXP 82
29449: PPUSH
29450: LD_VAR 0 1
29454: PPUSH
29455: CALL 35813 0 2
29459: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29460: LD_EXP 83
29464: PUSH
29465: LD_VAR 0 5
29469: ARRAY
29470: PUSH
29471: LD_EXP 84
29475: GREATEREQUAL
29476: IFFALSE 29480
// exit ;
29478: GO 29680
// ComMoveXY ( unit , x , y ) ;
29480: LD_VAR 0 1
29484: PPUSH
29485: LD_VAR 0 2
29489: PPUSH
29490: LD_VAR 0 3
29494: PPUSH
29495: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29499: LD_INT 35
29501: PPUSH
29502: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29506: LD_VAR 0 1
29510: PPUSH
29511: LD_VAR 0 2
29515: PPUSH
29516: LD_VAR 0 3
29520: PPUSH
29521: CALL 67076 0 3
29525: NOT
29526: PUSH
29527: LD_VAR 0 1
29531: PPUSH
29532: CALL_OW 314
29536: AND
29537: IFFALSE 29541
// exit ;
29539: GO 29680
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29541: LD_VAR 0 2
29545: PPUSH
29546: LD_VAR 0 3
29550: PPUSH
29551: CALL_OW 428
29555: PUSH
29556: LD_VAR 0 1
29560: EQUAL
29561: PUSH
29562: LD_VAR 0 1
29566: PPUSH
29567: CALL_OW 314
29571: NOT
29572: AND
29573: IFFALSE 29499
// PlaySoundXY ( x , y , PlantMine ) ;
29575: LD_VAR 0 2
29579: PPUSH
29580: LD_VAR 0 3
29584: PPUSH
29585: LD_STRING PlantMine
29587: PPUSH
29588: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29592: LD_VAR 0 2
29596: PPUSH
29597: LD_VAR 0 3
29601: PPUSH
29602: LD_VAR 0 1
29606: PPUSH
29607: CALL_OW 255
29611: PPUSH
29612: LD_INT 0
29614: PPUSH
29615: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29619: LD_ADDR_EXP 83
29623: PUSH
29624: LD_EXP 83
29628: PPUSH
29629: LD_VAR 0 5
29633: PUSH
29634: LD_EXP 83
29638: PUSH
29639: LD_VAR 0 5
29643: ARRAY
29644: PUSH
29645: LD_INT 1
29647: PLUS
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PPUSH
29653: LD_VAR 0 2
29657: PUSH
29658: LD_VAR 0 3
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL 36028 0 3
29671: ST_TO_ADDR
// result := true ;
29672: LD_ADDR_VAR 0 4
29676: PUSH
29677: LD_INT 1
29679: ST_TO_ADDR
// end ;
29680: LD_VAR 0 4
29684: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29685: LD_INT 0
29687: PPUSH
29688: PPUSH
29689: PPUSH
// if not unit in minersList then
29690: LD_VAR 0 1
29694: PUSH
29695: LD_EXP 82
29699: IN
29700: NOT
29701: IFFALSE 29705
// exit ;
29703: GO 30097
// index := GetElementIndex ( minersList , unit ) ;
29705: LD_ADDR_VAR 0 6
29709: PUSH
29710: LD_EXP 82
29714: PPUSH
29715: LD_VAR 0 1
29719: PPUSH
29720: CALL 35813 0 2
29724: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29725: LD_ADDR_VAR 0 5
29729: PUSH
29730: DOUBLE
29731: LD_EXP 83
29735: PUSH
29736: LD_VAR 0 6
29740: ARRAY
29741: INC
29742: ST_TO_ADDR
29743: LD_INT 1
29745: PUSH
29746: FOR_DOWNTO
29747: IFFALSE 29908
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29749: LD_EXP 83
29753: PUSH
29754: LD_VAR 0 6
29758: ARRAY
29759: PUSH
29760: LD_VAR 0 5
29764: ARRAY
29765: PUSH
29766: LD_INT 1
29768: ARRAY
29769: PUSH
29770: LD_VAR 0 2
29774: EQUAL
29775: PUSH
29776: LD_EXP 83
29780: PUSH
29781: LD_VAR 0 6
29785: ARRAY
29786: PUSH
29787: LD_VAR 0 5
29791: ARRAY
29792: PUSH
29793: LD_INT 2
29795: ARRAY
29796: PUSH
29797: LD_VAR 0 3
29801: EQUAL
29802: AND
29803: IFFALSE 29906
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29805: LD_EXP 83
29809: PUSH
29810: LD_VAR 0 6
29814: ARRAY
29815: PUSH
29816: LD_VAR 0 5
29820: ARRAY
29821: PUSH
29822: LD_INT 1
29824: ARRAY
29825: PPUSH
29826: LD_EXP 83
29830: PUSH
29831: LD_VAR 0 6
29835: ARRAY
29836: PUSH
29837: LD_VAR 0 5
29841: ARRAY
29842: PUSH
29843: LD_INT 2
29845: ARRAY
29846: PPUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL_OW 255
29856: PPUSH
29857: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29861: LD_ADDR_EXP 83
29865: PUSH
29866: LD_EXP 83
29870: PPUSH
29871: LD_VAR 0 6
29875: PPUSH
29876: LD_EXP 83
29880: PUSH
29881: LD_VAR 0 6
29885: ARRAY
29886: PPUSH
29887: LD_VAR 0 5
29891: PPUSH
29892: CALL_OW 3
29896: PPUSH
29897: CALL_OW 1
29901: ST_TO_ADDR
// exit ;
29902: POP
29903: POP
29904: GO 30097
// end ; end ;
29906: GO 29746
29908: POP
29909: POP
// for i := minerMinesList [ index ] downto 1 do
29910: LD_ADDR_VAR 0 5
29914: PUSH
29915: DOUBLE
29916: LD_EXP 83
29920: PUSH
29921: LD_VAR 0 6
29925: ARRAY
29926: INC
29927: ST_TO_ADDR
29928: LD_INT 1
29930: PUSH
29931: FOR_DOWNTO
29932: IFFALSE 30095
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29934: LD_EXP 83
29938: PUSH
29939: LD_VAR 0 6
29943: ARRAY
29944: PUSH
29945: LD_VAR 0 5
29949: ARRAY
29950: PUSH
29951: LD_INT 1
29953: ARRAY
29954: PPUSH
29955: LD_EXP 83
29959: PUSH
29960: LD_VAR 0 6
29964: ARRAY
29965: PUSH
29966: LD_VAR 0 5
29970: ARRAY
29971: PUSH
29972: LD_INT 2
29974: ARRAY
29975: PPUSH
29976: LD_VAR 0 2
29980: PPUSH
29981: LD_VAR 0 3
29985: PPUSH
29986: CALL_OW 298
29990: PUSH
29991: LD_INT 6
29993: LESS
29994: IFFALSE 30093
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29996: LD_EXP 83
30000: PUSH
30001: LD_VAR 0 6
30005: ARRAY
30006: PUSH
30007: LD_VAR 0 5
30011: ARRAY
30012: PUSH
30013: LD_INT 1
30015: ARRAY
30016: PPUSH
30017: LD_EXP 83
30021: PUSH
30022: LD_VAR 0 6
30026: ARRAY
30027: PUSH
30028: LD_VAR 0 5
30032: ARRAY
30033: PUSH
30034: LD_INT 2
30036: ARRAY
30037: PPUSH
30038: LD_VAR 0 1
30042: PPUSH
30043: CALL_OW 255
30047: PPUSH
30048: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30052: LD_ADDR_EXP 83
30056: PUSH
30057: LD_EXP 83
30061: PPUSH
30062: LD_VAR 0 6
30066: PPUSH
30067: LD_EXP 83
30071: PUSH
30072: LD_VAR 0 6
30076: ARRAY
30077: PPUSH
30078: LD_VAR 0 5
30082: PPUSH
30083: CALL_OW 3
30087: PPUSH
30088: CALL_OW 1
30092: ST_TO_ADDR
// end ; end ;
30093: GO 29931
30095: POP
30096: POP
// end ;
30097: LD_VAR 0 4
30101: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30102: LD_INT 0
30104: PPUSH
30105: PPUSH
30106: PPUSH
30107: PPUSH
30108: PPUSH
30109: PPUSH
30110: PPUSH
30111: PPUSH
30112: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30113: LD_VAR 0 1
30117: PPUSH
30118: CALL_OW 264
30122: PUSH
30123: LD_INT 81
30125: EQUAL
30126: NOT
30127: PUSH
30128: LD_VAR 0 1
30132: PUSH
30133: LD_EXP 82
30137: IN
30138: NOT
30139: OR
30140: IFFALSE 30144
// exit ;
30142: GO 30466
// index := GetElementIndex ( minersList , unit ) ;
30144: LD_ADDR_VAR 0 6
30148: PUSH
30149: LD_EXP 82
30153: PPUSH
30154: LD_VAR 0 1
30158: PPUSH
30159: CALL 35813 0 2
30163: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30164: LD_ADDR_VAR 0 8
30168: PUSH
30169: LD_EXP 84
30173: PUSH
30174: LD_EXP 83
30178: PUSH
30179: LD_VAR 0 6
30183: ARRAY
30184: MINUS
30185: ST_TO_ADDR
// if not minesFreeAmount then
30186: LD_VAR 0 8
30190: NOT
30191: IFFALSE 30195
// exit ;
30193: GO 30466
// tmp := [ ] ;
30195: LD_ADDR_VAR 0 7
30199: PUSH
30200: EMPTY
30201: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30202: LD_ADDR_VAR 0 5
30206: PUSH
30207: DOUBLE
30208: LD_INT 1
30210: DEC
30211: ST_TO_ADDR
30212: LD_VAR 0 8
30216: PUSH
30217: FOR_TO
30218: IFFALSE 30413
// begin _d := rand ( 0 , 5 ) ;
30220: LD_ADDR_VAR 0 11
30224: PUSH
30225: LD_INT 0
30227: PPUSH
30228: LD_INT 5
30230: PPUSH
30231: CALL_OW 12
30235: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30236: LD_ADDR_VAR 0 12
30240: PUSH
30241: LD_INT 2
30243: PPUSH
30244: LD_INT 6
30246: PPUSH
30247: CALL_OW 12
30251: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30252: LD_ADDR_VAR 0 9
30256: PUSH
30257: LD_VAR 0 2
30261: PPUSH
30262: LD_VAR 0 11
30266: PPUSH
30267: LD_VAR 0 12
30271: PPUSH
30272: CALL_OW 272
30276: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30277: LD_ADDR_VAR 0 10
30281: PUSH
30282: LD_VAR 0 3
30286: PPUSH
30287: LD_VAR 0 11
30291: PPUSH
30292: LD_VAR 0 12
30296: PPUSH
30297: CALL_OW 273
30301: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30302: LD_VAR 0 9
30306: PPUSH
30307: LD_VAR 0 10
30311: PPUSH
30312: CALL_OW 488
30316: PUSH
30317: LD_VAR 0 9
30321: PUSH
30322: LD_VAR 0 10
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_VAR 0 7
30335: IN
30336: NOT
30337: AND
30338: PUSH
30339: LD_VAR 0 9
30343: PPUSH
30344: LD_VAR 0 10
30348: PPUSH
30349: CALL_OW 458
30353: NOT
30354: AND
30355: IFFALSE 30397
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30357: LD_ADDR_VAR 0 7
30361: PUSH
30362: LD_VAR 0 7
30366: PPUSH
30367: LD_VAR 0 7
30371: PUSH
30372: LD_INT 1
30374: PLUS
30375: PPUSH
30376: LD_VAR 0 9
30380: PUSH
30381: LD_VAR 0 10
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PPUSH
30390: CALL_OW 1
30394: ST_TO_ADDR
30395: GO 30411
// i := i - 1 ;
30397: LD_ADDR_VAR 0 5
30401: PUSH
30402: LD_VAR 0 5
30406: PUSH
30407: LD_INT 1
30409: MINUS
30410: ST_TO_ADDR
// end ;
30411: GO 30217
30413: POP
30414: POP
// for i in tmp do
30415: LD_ADDR_VAR 0 5
30419: PUSH
30420: LD_VAR 0 7
30424: PUSH
30425: FOR_IN
30426: IFFALSE 30464
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30428: LD_VAR 0 1
30432: PPUSH
30433: LD_VAR 0 5
30437: PUSH
30438: LD_INT 1
30440: ARRAY
30441: PPUSH
30442: LD_VAR 0 5
30446: PUSH
30447: LD_INT 2
30449: ARRAY
30450: PPUSH
30451: CALL 29410 0 3
30455: NOT
30456: IFFALSE 30462
// exit ;
30458: POP
30459: POP
30460: GO 30466
30462: GO 30425
30464: POP
30465: POP
// end ;
30466: LD_VAR 0 4
30470: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30471: LD_INT 0
30473: PPUSH
30474: PPUSH
30475: PPUSH
30476: PPUSH
30477: PPUSH
30478: PPUSH
30479: PPUSH
// if not GetClass ( unit ) = class_sniper then
30480: LD_VAR 0 1
30484: PPUSH
30485: CALL_OW 257
30489: PUSH
30490: LD_INT 5
30492: EQUAL
30493: NOT
30494: IFFALSE 30498
// exit ;
30496: GO 30886
// dist := 8 ;
30498: LD_ADDR_VAR 0 5
30502: PUSH
30503: LD_INT 8
30505: ST_TO_ADDR
// viewRange := 12 ;
30506: LD_ADDR_VAR 0 7
30510: PUSH
30511: LD_INT 12
30513: ST_TO_ADDR
// side := GetSide ( unit ) ;
30514: LD_ADDR_VAR 0 6
30518: PUSH
30519: LD_VAR 0 1
30523: PPUSH
30524: CALL_OW 255
30528: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30529: LD_INT 61
30531: PPUSH
30532: LD_VAR 0 6
30536: PPUSH
30537: CALL_OW 321
30541: PUSH
30542: LD_INT 2
30544: EQUAL
30545: IFFALSE 30555
// viewRange := 16 ;
30547: LD_ADDR_VAR 0 7
30551: PUSH
30552: LD_INT 16
30554: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30555: LD_VAR 0 1
30559: PPUSH
30560: LD_VAR 0 2
30564: PPUSH
30565: LD_VAR 0 3
30569: PPUSH
30570: CALL_OW 297
30574: PUSH
30575: LD_VAR 0 5
30579: GREATER
30580: IFFALSE 30659
// begin ComMoveXY ( unit , x , y ) ;
30582: LD_VAR 0 1
30586: PPUSH
30587: LD_VAR 0 2
30591: PPUSH
30592: LD_VAR 0 3
30596: PPUSH
30597: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30601: LD_INT 35
30603: PPUSH
30604: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30608: LD_VAR 0 1
30612: PPUSH
30613: LD_VAR 0 2
30617: PPUSH
30618: LD_VAR 0 3
30622: PPUSH
30623: CALL 67076 0 3
30627: NOT
30628: IFFALSE 30632
// exit ;
30630: GO 30886
// until GetDistUnitXY ( unit , x , y ) < dist ;
30632: LD_VAR 0 1
30636: PPUSH
30637: LD_VAR 0 2
30641: PPUSH
30642: LD_VAR 0 3
30646: PPUSH
30647: CALL_OW 297
30651: PUSH
30652: LD_VAR 0 5
30656: LESS
30657: IFFALSE 30601
// end ; ComTurnXY ( unit , x , y ) ;
30659: LD_VAR 0 1
30663: PPUSH
30664: LD_VAR 0 2
30668: PPUSH
30669: LD_VAR 0 3
30673: PPUSH
30674: CALL_OW 118
// wait ( 5 ) ;
30678: LD_INT 5
30680: PPUSH
30681: CALL_OW 67
// _d := GetDir ( unit ) ;
30685: LD_ADDR_VAR 0 10
30689: PUSH
30690: LD_VAR 0 1
30694: PPUSH
30695: CALL_OW 254
30699: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30700: LD_ADDR_VAR 0 8
30704: PUSH
30705: LD_VAR 0 1
30709: PPUSH
30710: CALL_OW 250
30714: PPUSH
30715: LD_VAR 0 10
30719: PPUSH
30720: LD_VAR 0 5
30724: PPUSH
30725: CALL_OW 272
30729: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30730: LD_ADDR_VAR 0 9
30734: PUSH
30735: LD_VAR 0 1
30739: PPUSH
30740: CALL_OW 251
30744: PPUSH
30745: LD_VAR 0 10
30749: PPUSH
30750: LD_VAR 0 5
30754: PPUSH
30755: CALL_OW 273
30759: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30760: LD_VAR 0 8
30764: PPUSH
30765: LD_VAR 0 9
30769: PPUSH
30770: CALL_OW 488
30774: NOT
30775: IFFALSE 30779
// exit ;
30777: GO 30886
// ComAnimCustom ( unit , 1 ) ;
30779: LD_VAR 0 1
30783: PPUSH
30784: LD_INT 1
30786: PPUSH
30787: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30791: LD_VAR 0 8
30795: PPUSH
30796: LD_VAR 0 9
30800: PPUSH
30801: LD_VAR 0 6
30805: PPUSH
30806: LD_VAR 0 7
30810: PPUSH
30811: CALL_OW 330
// repeat wait ( 1 ) ;
30815: LD_INT 1
30817: PPUSH
30818: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30822: LD_VAR 0 1
30826: PPUSH
30827: CALL_OW 316
30831: PUSH
30832: LD_VAR 0 1
30836: PPUSH
30837: CALL_OW 314
30841: OR
30842: PUSH
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 302
30852: NOT
30853: OR
30854: PUSH
30855: LD_VAR 0 1
30859: PPUSH
30860: CALL_OW 301
30864: OR
30865: IFFALSE 30815
// RemoveSeeing ( _x , _y , side ) ;
30867: LD_VAR 0 8
30871: PPUSH
30872: LD_VAR 0 9
30876: PPUSH
30877: LD_VAR 0 6
30881: PPUSH
30882: CALL_OW 331
// end ; end_of_file
30886: LD_VAR 0 4
30890: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30891: LD_INT 0
30893: PPUSH
30894: PPUSH
// if exist_mode then
30895: LD_VAR 0 2
30899: IFFALSE 30924
// unit := CreateCharacter ( prefix & ident ) else
30901: LD_ADDR_VAR 0 5
30905: PUSH
30906: LD_VAR 0 3
30910: PUSH
30911: LD_VAR 0 1
30915: STR
30916: PPUSH
30917: CALL_OW 34
30921: ST_TO_ADDR
30922: GO 30939
// unit := NewCharacter ( ident ) ;
30924: LD_ADDR_VAR 0 5
30928: PUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 25
30938: ST_TO_ADDR
// result := unit ;
30939: LD_ADDR_VAR 0 4
30943: PUSH
30944: LD_VAR 0 5
30948: ST_TO_ADDR
// end ;
30949: LD_VAR 0 4
30953: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30954: LD_INT 0
30956: PPUSH
30957: PPUSH
// if not side or not nation then
30958: LD_VAR 0 1
30962: NOT
30963: PUSH
30964: LD_VAR 0 2
30968: NOT
30969: OR
30970: IFFALSE 30974
// exit ;
30972: GO 31742
// case nation of nation_american :
30974: LD_VAR 0 2
30978: PUSH
30979: LD_INT 1
30981: DOUBLE
30982: EQUAL
30983: IFTRUE 30987
30985: GO 31201
30987: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30988: LD_ADDR_VAR 0 4
30992: PUSH
30993: LD_INT 35
30995: PUSH
30996: LD_INT 45
30998: PUSH
30999: LD_INT 46
31001: PUSH
31002: LD_INT 47
31004: PUSH
31005: LD_INT 82
31007: PUSH
31008: LD_INT 83
31010: PUSH
31011: LD_INT 84
31013: PUSH
31014: LD_INT 85
31016: PUSH
31017: LD_INT 86
31019: PUSH
31020: LD_INT 1
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 6
31028: PUSH
31029: LD_INT 15
31031: PUSH
31032: LD_INT 16
31034: PUSH
31035: LD_INT 7
31037: PUSH
31038: LD_INT 12
31040: PUSH
31041: LD_INT 13
31043: PUSH
31044: LD_INT 10
31046: PUSH
31047: LD_INT 14
31049: PUSH
31050: LD_INT 20
31052: PUSH
31053: LD_INT 21
31055: PUSH
31056: LD_INT 22
31058: PUSH
31059: LD_INT 25
31061: PUSH
31062: LD_INT 32
31064: PUSH
31065: LD_INT 27
31067: PUSH
31068: LD_INT 36
31070: PUSH
31071: LD_INT 69
31073: PUSH
31074: LD_INT 39
31076: PUSH
31077: LD_INT 34
31079: PUSH
31080: LD_INT 40
31082: PUSH
31083: LD_INT 48
31085: PUSH
31086: LD_INT 49
31088: PUSH
31089: LD_INT 50
31091: PUSH
31092: LD_INT 51
31094: PUSH
31095: LD_INT 52
31097: PUSH
31098: LD_INT 53
31100: PUSH
31101: LD_INT 54
31103: PUSH
31104: LD_INT 55
31106: PUSH
31107: LD_INT 56
31109: PUSH
31110: LD_INT 57
31112: PUSH
31113: LD_INT 58
31115: PUSH
31116: LD_INT 59
31118: PUSH
31119: LD_INT 60
31121: PUSH
31122: LD_INT 61
31124: PUSH
31125: LD_INT 62
31127: PUSH
31128: LD_INT 80
31130: PUSH
31131: LD_INT 82
31133: PUSH
31134: LD_INT 83
31136: PUSH
31137: LD_INT 84
31139: PUSH
31140: LD_INT 85
31142: PUSH
31143: LD_INT 86
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: ST_TO_ADDR
31199: GO 31666
31201: LD_INT 2
31203: DOUBLE
31204: EQUAL
31205: IFTRUE 31209
31207: GO 31435
31209: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31210: LD_ADDR_VAR 0 4
31214: PUSH
31215: LD_INT 35
31217: PUSH
31218: LD_INT 45
31220: PUSH
31221: LD_INT 46
31223: PUSH
31224: LD_INT 47
31226: PUSH
31227: LD_INT 82
31229: PUSH
31230: LD_INT 83
31232: PUSH
31233: LD_INT 84
31235: PUSH
31236: LD_INT 85
31238: PUSH
31239: LD_INT 87
31241: PUSH
31242: LD_INT 70
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: LD_INT 11
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: LD_INT 4
31256: PUSH
31257: LD_INT 5
31259: PUSH
31260: LD_INT 6
31262: PUSH
31263: LD_INT 15
31265: PUSH
31266: LD_INT 18
31268: PUSH
31269: LD_INT 7
31271: PUSH
31272: LD_INT 17
31274: PUSH
31275: LD_INT 8
31277: PUSH
31278: LD_INT 20
31280: PUSH
31281: LD_INT 21
31283: PUSH
31284: LD_INT 22
31286: PUSH
31287: LD_INT 72
31289: PUSH
31290: LD_INT 26
31292: PUSH
31293: LD_INT 69
31295: PUSH
31296: LD_INT 39
31298: PUSH
31299: LD_INT 40
31301: PUSH
31302: LD_INT 41
31304: PUSH
31305: LD_INT 42
31307: PUSH
31308: LD_INT 43
31310: PUSH
31311: LD_INT 48
31313: PUSH
31314: LD_INT 49
31316: PUSH
31317: LD_INT 50
31319: PUSH
31320: LD_INT 51
31322: PUSH
31323: LD_INT 52
31325: PUSH
31326: LD_INT 53
31328: PUSH
31329: LD_INT 54
31331: PUSH
31332: LD_INT 55
31334: PUSH
31335: LD_INT 56
31337: PUSH
31338: LD_INT 60
31340: PUSH
31341: LD_INT 61
31343: PUSH
31344: LD_INT 62
31346: PUSH
31347: LD_INT 66
31349: PUSH
31350: LD_INT 67
31352: PUSH
31353: LD_INT 68
31355: PUSH
31356: LD_INT 81
31358: PUSH
31359: LD_INT 82
31361: PUSH
31362: LD_INT 83
31364: PUSH
31365: LD_INT 84
31367: PUSH
31368: LD_INT 85
31370: PUSH
31371: LD_INT 87
31373: PUSH
31374: LD_INT 88
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
31433: GO 31666
31435: LD_INT 3
31437: DOUBLE
31438: EQUAL
31439: IFTRUE 31443
31441: GO 31665
31443: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31444: LD_ADDR_VAR 0 4
31448: PUSH
31449: LD_INT 46
31451: PUSH
31452: LD_INT 47
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 82
31463: PUSH
31464: LD_INT 83
31466: PUSH
31467: LD_INT 84
31469: PUSH
31470: LD_INT 85
31472: PUSH
31473: LD_INT 86
31475: PUSH
31476: LD_INT 11
31478: PUSH
31479: LD_INT 9
31481: PUSH
31482: LD_INT 20
31484: PUSH
31485: LD_INT 19
31487: PUSH
31488: LD_INT 21
31490: PUSH
31491: LD_INT 24
31493: PUSH
31494: LD_INT 22
31496: PUSH
31497: LD_INT 25
31499: PUSH
31500: LD_INT 28
31502: PUSH
31503: LD_INT 29
31505: PUSH
31506: LD_INT 30
31508: PUSH
31509: LD_INT 31
31511: PUSH
31512: LD_INT 37
31514: PUSH
31515: LD_INT 38
31517: PUSH
31518: LD_INT 32
31520: PUSH
31521: LD_INT 27
31523: PUSH
31524: LD_INT 33
31526: PUSH
31527: LD_INT 69
31529: PUSH
31530: LD_INT 39
31532: PUSH
31533: LD_INT 34
31535: PUSH
31536: LD_INT 40
31538: PUSH
31539: LD_INT 71
31541: PUSH
31542: LD_INT 23
31544: PUSH
31545: LD_INT 44
31547: PUSH
31548: LD_INT 48
31550: PUSH
31551: LD_INT 49
31553: PUSH
31554: LD_INT 50
31556: PUSH
31557: LD_INT 51
31559: PUSH
31560: LD_INT 52
31562: PUSH
31563: LD_INT 53
31565: PUSH
31566: LD_INT 54
31568: PUSH
31569: LD_INT 55
31571: PUSH
31572: LD_INT 56
31574: PUSH
31575: LD_INT 57
31577: PUSH
31578: LD_INT 58
31580: PUSH
31581: LD_INT 59
31583: PUSH
31584: LD_INT 63
31586: PUSH
31587: LD_INT 64
31589: PUSH
31590: LD_INT 65
31592: PUSH
31593: LD_INT 82
31595: PUSH
31596: LD_INT 83
31598: PUSH
31599: LD_INT 84
31601: PUSH
31602: LD_INT 85
31604: PUSH
31605: LD_INT 86
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: ST_TO_ADDR
31663: GO 31666
31665: POP
// if state > - 1 and state < 3 then
31666: LD_VAR 0 3
31670: PUSH
31671: LD_INT 1
31673: NEG
31674: GREATER
31675: PUSH
31676: LD_VAR 0 3
31680: PUSH
31681: LD_INT 3
31683: LESS
31684: AND
31685: IFFALSE 31742
// for i in result do
31687: LD_ADDR_VAR 0 5
31691: PUSH
31692: LD_VAR 0 4
31696: PUSH
31697: FOR_IN
31698: IFFALSE 31740
// if GetTech ( i , side ) <> state then
31700: LD_VAR 0 5
31704: PPUSH
31705: LD_VAR 0 1
31709: PPUSH
31710: CALL_OW 321
31714: PUSH
31715: LD_VAR 0 3
31719: NONEQUAL
31720: IFFALSE 31738
// result := result diff i ;
31722: LD_ADDR_VAR 0 4
31726: PUSH
31727: LD_VAR 0 4
31731: PUSH
31732: LD_VAR 0 5
31736: DIFF
31737: ST_TO_ADDR
31738: GO 31697
31740: POP
31741: POP
// end ;
31742: LD_VAR 0 4
31746: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31747: LD_INT 0
31749: PPUSH
31750: PPUSH
31751: PPUSH
// result := true ;
31752: LD_ADDR_VAR 0 3
31756: PUSH
31757: LD_INT 1
31759: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31760: LD_ADDR_VAR 0 5
31764: PUSH
31765: LD_VAR 0 2
31769: PPUSH
31770: CALL_OW 480
31774: ST_TO_ADDR
// if not tmp then
31775: LD_VAR 0 5
31779: NOT
31780: IFFALSE 31784
// exit ;
31782: GO 31833
// for i in tmp do
31784: LD_ADDR_VAR 0 4
31788: PUSH
31789: LD_VAR 0 5
31793: PUSH
31794: FOR_IN
31795: IFFALSE 31831
// if GetTech ( i , side ) <> state_researched then
31797: LD_VAR 0 4
31801: PPUSH
31802: LD_VAR 0 1
31806: PPUSH
31807: CALL_OW 321
31811: PUSH
31812: LD_INT 2
31814: NONEQUAL
31815: IFFALSE 31829
// begin result := false ;
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: LD_INT 0
31824: ST_TO_ADDR
// exit ;
31825: POP
31826: POP
31827: GO 31833
// end ;
31829: GO 31794
31831: POP
31832: POP
// end ;
31833: LD_VAR 0 3
31837: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31838: LD_INT 0
31840: PPUSH
31841: PPUSH
31842: PPUSH
31843: PPUSH
31844: PPUSH
31845: PPUSH
31846: PPUSH
31847: PPUSH
31848: PPUSH
31849: PPUSH
31850: PPUSH
31851: PPUSH
31852: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31853: LD_VAR 0 1
31857: NOT
31858: PUSH
31859: LD_VAR 0 1
31863: PPUSH
31864: CALL_OW 257
31868: PUSH
31869: LD_INT 9
31871: NONEQUAL
31872: OR
31873: IFFALSE 31877
// exit ;
31875: GO 32450
// side := GetSide ( unit ) ;
31877: LD_ADDR_VAR 0 9
31881: PUSH
31882: LD_VAR 0 1
31886: PPUSH
31887: CALL_OW 255
31891: ST_TO_ADDR
// tech_space := tech_spacanom ;
31892: LD_ADDR_VAR 0 12
31896: PUSH
31897: LD_INT 29
31899: ST_TO_ADDR
// tech_time := tech_taurad ;
31900: LD_ADDR_VAR 0 13
31904: PUSH
31905: LD_INT 28
31907: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31908: LD_ADDR_VAR 0 11
31912: PUSH
31913: LD_VAR 0 1
31917: PPUSH
31918: CALL_OW 310
31922: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31923: LD_VAR 0 11
31927: PPUSH
31928: CALL_OW 247
31932: PUSH
31933: LD_INT 2
31935: EQUAL
31936: IFFALSE 31940
// exit ;
31938: GO 32450
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31940: LD_ADDR_VAR 0 8
31944: PUSH
31945: LD_INT 81
31947: PUSH
31948: LD_VAR 0 9
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 3
31959: PUSH
31960: LD_INT 21
31962: PUSH
31963: LD_INT 3
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PPUSH
31978: CALL_OW 69
31982: ST_TO_ADDR
// if not tmp then
31983: LD_VAR 0 8
31987: NOT
31988: IFFALSE 31992
// exit ;
31990: GO 32450
// if in_unit then
31992: LD_VAR 0 11
31996: IFFALSE 32020
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31998: LD_ADDR_VAR 0 10
32002: PUSH
32003: LD_VAR 0 8
32007: PPUSH
32008: LD_VAR 0 11
32012: PPUSH
32013: CALL_OW 74
32017: ST_TO_ADDR
32018: GO 32040
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32020: LD_ADDR_VAR 0 10
32024: PUSH
32025: LD_VAR 0 8
32029: PPUSH
32030: LD_VAR 0 1
32034: PPUSH
32035: CALL_OW 74
32039: ST_TO_ADDR
// if not enemy then
32040: LD_VAR 0 10
32044: NOT
32045: IFFALSE 32049
// exit ;
32047: GO 32450
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32049: LD_VAR 0 11
32053: PUSH
32054: LD_VAR 0 11
32058: PPUSH
32059: LD_VAR 0 10
32063: PPUSH
32064: CALL_OW 296
32068: PUSH
32069: LD_INT 13
32071: GREATER
32072: AND
32073: PUSH
32074: LD_VAR 0 1
32078: PPUSH
32079: LD_VAR 0 10
32083: PPUSH
32084: CALL_OW 296
32088: PUSH
32089: LD_INT 12
32091: GREATER
32092: OR
32093: IFFALSE 32097
// exit ;
32095: GO 32450
// missile := [ 1 ] ;
32097: LD_ADDR_VAR 0 14
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: EMPTY
32106: LIST
32107: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32108: LD_VAR 0 9
32112: PPUSH
32113: LD_VAR 0 12
32117: PPUSH
32118: CALL_OW 325
32122: IFFALSE 32151
// missile := Replace ( missile , missile + 1 , 2 ) ;
32124: LD_ADDR_VAR 0 14
32128: PUSH
32129: LD_VAR 0 14
32133: PPUSH
32134: LD_VAR 0 14
32138: PUSH
32139: LD_INT 1
32141: PLUS
32142: PPUSH
32143: LD_INT 2
32145: PPUSH
32146: CALL_OW 1
32150: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32151: LD_VAR 0 9
32155: PPUSH
32156: LD_VAR 0 13
32160: PPUSH
32161: CALL_OW 325
32165: PUSH
32166: LD_VAR 0 10
32170: PPUSH
32171: CALL_OW 255
32175: PPUSH
32176: LD_VAR 0 13
32180: PPUSH
32181: CALL_OW 325
32185: NOT
32186: AND
32187: IFFALSE 32216
// missile := Replace ( missile , missile + 1 , 3 ) ;
32189: LD_ADDR_VAR 0 14
32193: PUSH
32194: LD_VAR 0 14
32198: PPUSH
32199: LD_VAR 0 14
32203: PUSH
32204: LD_INT 1
32206: PLUS
32207: PPUSH
32208: LD_INT 3
32210: PPUSH
32211: CALL_OW 1
32215: ST_TO_ADDR
// if missile < 2 then
32216: LD_VAR 0 14
32220: PUSH
32221: LD_INT 2
32223: LESS
32224: IFFALSE 32228
// exit ;
32226: GO 32450
// x := GetX ( enemy ) ;
32228: LD_ADDR_VAR 0 4
32232: PUSH
32233: LD_VAR 0 10
32237: PPUSH
32238: CALL_OW 250
32242: ST_TO_ADDR
// y := GetY ( enemy ) ;
32243: LD_ADDR_VAR 0 5
32247: PUSH
32248: LD_VAR 0 10
32252: PPUSH
32253: CALL_OW 251
32257: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32258: LD_ADDR_VAR 0 6
32262: PUSH
32263: LD_VAR 0 4
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PPUSH
32272: LD_INT 1
32274: PPUSH
32275: CALL_OW 12
32279: PLUS
32280: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32281: LD_ADDR_VAR 0 7
32285: PUSH
32286: LD_VAR 0 5
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PPUSH
32295: LD_INT 1
32297: PPUSH
32298: CALL_OW 12
32302: PLUS
32303: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32304: LD_VAR 0 6
32308: PPUSH
32309: LD_VAR 0 7
32313: PPUSH
32314: CALL_OW 488
32318: NOT
32319: IFFALSE 32341
// begin _x := x ;
32321: LD_ADDR_VAR 0 6
32325: PUSH
32326: LD_VAR 0 4
32330: ST_TO_ADDR
// _y := y ;
32331: LD_ADDR_VAR 0 7
32335: PUSH
32336: LD_VAR 0 5
32340: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32341: LD_ADDR_VAR 0 3
32345: PUSH
32346: LD_INT 1
32348: PPUSH
32349: LD_VAR 0 14
32353: PPUSH
32354: CALL_OW 12
32358: ST_TO_ADDR
// case i of 1 :
32359: LD_VAR 0 3
32363: PUSH
32364: LD_INT 1
32366: DOUBLE
32367: EQUAL
32368: IFTRUE 32372
32370: GO 32389
32372: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32373: LD_VAR 0 1
32377: PPUSH
32378: LD_VAR 0 10
32382: PPUSH
32383: CALL_OW 115
32387: GO 32450
32389: LD_INT 2
32391: DOUBLE
32392: EQUAL
32393: IFTRUE 32397
32395: GO 32419
32397: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32398: LD_VAR 0 1
32402: PPUSH
32403: LD_VAR 0 6
32407: PPUSH
32408: LD_VAR 0 7
32412: PPUSH
32413: CALL_OW 153
32417: GO 32450
32419: LD_INT 3
32421: DOUBLE
32422: EQUAL
32423: IFTRUE 32427
32425: GO 32449
32427: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32428: LD_VAR 0 1
32432: PPUSH
32433: LD_VAR 0 6
32437: PPUSH
32438: LD_VAR 0 7
32442: PPUSH
32443: CALL_OW 154
32447: GO 32450
32449: POP
// end ;
32450: LD_VAR 0 2
32454: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32455: LD_INT 0
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
// if not unit or not building then
32463: LD_VAR 0 1
32467: NOT
32468: PUSH
32469: LD_VAR 0 2
32473: NOT
32474: OR
32475: IFFALSE 32479
// exit ;
32477: GO 32637
// x := GetX ( building ) ;
32479: LD_ADDR_VAR 0 5
32483: PUSH
32484: LD_VAR 0 2
32488: PPUSH
32489: CALL_OW 250
32493: ST_TO_ADDR
// y := GetY ( building ) ;
32494: LD_ADDR_VAR 0 6
32498: PUSH
32499: LD_VAR 0 2
32503: PPUSH
32504: CALL_OW 251
32508: ST_TO_ADDR
// for i = 0 to 5 do
32509: LD_ADDR_VAR 0 4
32513: PUSH
32514: DOUBLE
32515: LD_INT 0
32517: DEC
32518: ST_TO_ADDR
32519: LD_INT 5
32521: PUSH
32522: FOR_TO
32523: IFFALSE 32635
// begin _x := ShiftX ( x , i , 3 ) ;
32525: LD_ADDR_VAR 0 7
32529: PUSH
32530: LD_VAR 0 5
32534: PPUSH
32535: LD_VAR 0 4
32539: PPUSH
32540: LD_INT 3
32542: PPUSH
32543: CALL_OW 272
32547: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32548: LD_ADDR_VAR 0 8
32552: PUSH
32553: LD_VAR 0 6
32557: PPUSH
32558: LD_VAR 0 4
32562: PPUSH
32563: LD_INT 3
32565: PPUSH
32566: CALL_OW 273
32570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32571: LD_VAR 0 7
32575: PPUSH
32576: LD_VAR 0 8
32580: PPUSH
32581: CALL_OW 488
32585: NOT
32586: IFFALSE 32590
// continue ;
32588: GO 32522
// if HexInfo ( _x , _y ) = 0 then
32590: LD_VAR 0 7
32594: PPUSH
32595: LD_VAR 0 8
32599: PPUSH
32600: CALL_OW 428
32604: PUSH
32605: LD_INT 0
32607: EQUAL
32608: IFFALSE 32633
// begin ComMoveXY ( unit , _x , _y ) ;
32610: LD_VAR 0 1
32614: PPUSH
32615: LD_VAR 0 7
32619: PPUSH
32620: LD_VAR 0 8
32624: PPUSH
32625: CALL_OW 111
// exit ;
32629: POP
32630: POP
32631: GO 32637
// end ; end ;
32633: GO 32522
32635: POP
32636: POP
// end ;
32637: LD_VAR 0 3
32641: RET
// export function ScanBase ( side , base_area ) ; begin
32642: LD_INT 0
32644: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32645: LD_ADDR_VAR 0 3
32649: PUSH
32650: LD_VAR 0 2
32654: PPUSH
32655: LD_INT 81
32657: PUSH
32658: LD_VAR 0 1
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PPUSH
32667: CALL_OW 70
32671: ST_TO_ADDR
// end ;
32672: LD_VAR 0 3
32676: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32677: LD_INT 0
32679: PPUSH
32680: PPUSH
32681: PPUSH
32682: PPUSH
// result := false ;
32683: LD_ADDR_VAR 0 2
32687: PUSH
32688: LD_INT 0
32690: ST_TO_ADDR
// side := GetSide ( unit ) ;
32691: LD_ADDR_VAR 0 3
32695: PUSH
32696: LD_VAR 0 1
32700: PPUSH
32701: CALL_OW 255
32705: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32706: LD_ADDR_VAR 0 4
32710: PUSH
32711: LD_VAR 0 1
32715: PPUSH
32716: CALL_OW 248
32720: ST_TO_ADDR
// case nat of 1 :
32721: LD_VAR 0 4
32725: PUSH
32726: LD_INT 1
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32734
32732: GO 32745
32734: POP
// tech := tech_lassight ; 2 :
32735: LD_ADDR_VAR 0 5
32739: PUSH
32740: LD_INT 12
32742: ST_TO_ADDR
32743: GO 32784
32745: LD_INT 2
32747: DOUBLE
32748: EQUAL
32749: IFTRUE 32753
32751: GO 32764
32753: POP
// tech := tech_mortar ; 3 :
32754: LD_ADDR_VAR 0 5
32758: PUSH
32759: LD_INT 41
32761: ST_TO_ADDR
32762: GO 32784
32764: LD_INT 3
32766: DOUBLE
32767: EQUAL
32768: IFTRUE 32772
32770: GO 32783
32772: POP
// tech := tech_bazooka ; end ;
32773: LD_ADDR_VAR 0 5
32777: PUSH
32778: LD_INT 44
32780: ST_TO_ADDR
32781: GO 32784
32783: POP
// if Researched ( side , tech ) then
32784: LD_VAR 0 3
32788: PPUSH
32789: LD_VAR 0 5
32793: PPUSH
32794: CALL_OW 325
32798: IFFALSE 32825
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32800: LD_ADDR_VAR 0 2
32804: PUSH
32805: LD_INT 5
32807: PUSH
32808: LD_INT 8
32810: PUSH
32811: LD_INT 9
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: LIST
32818: PUSH
32819: LD_VAR 0 4
32823: ARRAY
32824: ST_TO_ADDR
// end ;
32825: LD_VAR 0 2
32829: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32830: LD_INT 0
32832: PPUSH
32833: PPUSH
32834: PPUSH
// if not mines then
32835: LD_VAR 0 2
32839: NOT
32840: IFFALSE 32844
// exit ;
32842: GO 32988
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32844: LD_ADDR_VAR 0 5
32848: PUSH
32849: LD_INT 81
32851: PUSH
32852: LD_VAR 0 1
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: LD_INT 21
32866: PUSH
32867: LD_INT 3
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PPUSH
32882: CALL_OW 69
32886: ST_TO_ADDR
// for i in mines do
32887: LD_ADDR_VAR 0 4
32891: PUSH
32892: LD_VAR 0 2
32896: PUSH
32897: FOR_IN
32898: IFFALSE 32986
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32900: LD_VAR 0 4
32904: PUSH
32905: LD_INT 1
32907: ARRAY
32908: PPUSH
32909: LD_VAR 0 4
32913: PUSH
32914: LD_INT 2
32916: ARRAY
32917: PPUSH
32918: CALL_OW 458
32922: NOT
32923: IFFALSE 32927
// continue ;
32925: GO 32897
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32927: LD_VAR 0 4
32931: PUSH
32932: LD_INT 1
32934: ARRAY
32935: PPUSH
32936: LD_VAR 0 4
32940: PUSH
32941: LD_INT 2
32943: ARRAY
32944: PPUSH
32945: CALL_OW 428
32949: PUSH
32950: LD_VAR 0 5
32954: IN
32955: IFFALSE 32984
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32957: LD_VAR 0 4
32961: PUSH
32962: LD_INT 1
32964: ARRAY
32965: PPUSH
32966: LD_VAR 0 4
32970: PUSH
32971: LD_INT 2
32973: ARRAY
32974: PPUSH
32975: LD_VAR 0 1
32979: PPUSH
32980: CALL_OW 456
// end ;
32984: GO 32897
32986: POP
32987: POP
// end ;
32988: LD_VAR 0 3
32992: RET
// export function Count ( array ) ; var i ; begin
32993: LD_INT 0
32995: PPUSH
32996: PPUSH
// result := 0 ;
32997: LD_ADDR_VAR 0 2
33001: PUSH
33002: LD_INT 0
33004: ST_TO_ADDR
// for i in array do
33005: LD_ADDR_VAR 0 3
33009: PUSH
33010: LD_VAR 0 1
33014: PUSH
33015: FOR_IN
33016: IFFALSE 33040
// if i then
33018: LD_VAR 0 3
33022: IFFALSE 33038
// result := result + 1 ;
33024: LD_ADDR_VAR 0 2
33028: PUSH
33029: LD_VAR 0 2
33033: PUSH
33034: LD_INT 1
33036: PLUS
33037: ST_TO_ADDR
33038: GO 33015
33040: POP
33041: POP
// end ;
33042: LD_VAR 0 2
33046: RET
// export function IsEmpty ( building ) ; begin
33047: LD_INT 0
33049: PPUSH
// if not building then
33050: LD_VAR 0 1
33054: NOT
33055: IFFALSE 33059
// exit ;
33057: GO 33102
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33059: LD_ADDR_VAR 0 2
33063: PUSH
33064: LD_VAR 0 1
33068: PUSH
33069: LD_INT 22
33071: PUSH
33072: LD_VAR 0 1
33076: PPUSH
33077: CALL_OW 255
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 58
33088: PUSH
33089: EMPTY
33090: LIST
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PPUSH
33096: CALL_OW 69
33100: IN
33101: ST_TO_ADDR
// end ;
33102: LD_VAR 0 2
33106: RET
// export function IsNotFull ( building ) ; var places ; begin
33107: LD_INT 0
33109: PPUSH
33110: PPUSH
// if not building then
33111: LD_VAR 0 1
33115: NOT
33116: IFFALSE 33120
// exit ;
33118: GO 33291
// result := false ;
33120: LD_ADDR_VAR 0 2
33124: PUSH
33125: LD_INT 0
33127: ST_TO_ADDR
// places := 0 ;
33128: LD_ADDR_VAR 0 3
33132: PUSH
33133: LD_INT 0
33135: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33136: LD_VAR 0 1
33140: PPUSH
33141: CALL_OW 266
33145: PUSH
33146: LD_INT 0
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33208
33152: LD_INT 1
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33208
33158: LD_INT 6
33160: DOUBLE
33161: EQUAL
33162: IFTRUE 33208
33164: LD_INT 7
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33208
33170: LD_INT 8
33172: DOUBLE
33173: EQUAL
33174: IFTRUE 33208
33176: LD_INT 4
33178: DOUBLE
33179: EQUAL
33180: IFTRUE 33208
33182: LD_INT 5
33184: DOUBLE
33185: EQUAL
33186: IFTRUE 33208
33188: LD_INT 2
33190: DOUBLE
33191: EQUAL
33192: IFTRUE 33208
33194: LD_INT 3
33196: DOUBLE
33197: EQUAL
33198: IFTRUE 33208
33200: LD_INT 35
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33219
33208: POP
// places := 6 ; b_bunker , b_breastwork :
33209: LD_ADDR_VAR 0 3
33213: PUSH
33214: LD_INT 6
33216: ST_TO_ADDR
33217: GO 33264
33219: LD_INT 32
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33233
33225: LD_INT 31
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33233
33231: GO 33244
33233: POP
// places := 1 ; b_control_tower :
33234: LD_ADDR_VAR 0 3
33238: PUSH
33239: LD_INT 1
33241: ST_TO_ADDR
33242: GO 33264
33244: LD_INT 36
33246: DOUBLE
33247: EQUAL
33248: IFTRUE 33252
33250: GO 33263
33252: POP
// places := 3 ; end ;
33253: LD_ADDR_VAR 0 3
33257: PUSH
33258: LD_INT 3
33260: ST_TO_ADDR
33261: GO 33264
33263: POP
// if places then
33264: LD_VAR 0 3
33268: IFFALSE 33291
// result := UnitsInside ( building ) < places ;
33270: LD_ADDR_VAR 0 2
33274: PUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: CALL_OW 313
33284: PUSH
33285: LD_VAR 0 3
33289: LESS
33290: ST_TO_ADDR
// end ;
33291: LD_VAR 0 2
33295: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33296: LD_INT 0
33298: PPUSH
33299: PPUSH
33300: PPUSH
33301: PPUSH
// tmp := [ ] ;
33302: LD_ADDR_VAR 0 3
33306: PUSH
33307: EMPTY
33308: ST_TO_ADDR
// list := [ ] ;
33309: LD_ADDR_VAR 0 5
33313: PUSH
33314: EMPTY
33315: ST_TO_ADDR
// for i = 16 to 25 do
33316: LD_ADDR_VAR 0 4
33320: PUSH
33321: DOUBLE
33322: LD_INT 16
33324: DEC
33325: ST_TO_ADDR
33326: LD_INT 25
33328: PUSH
33329: FOR_TO
33330: IFFALSE 33403
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33332: LD_ADDR_VAR 0 3
33336: PUSH
33337: LD_VAR 0 3
33341: PUSH
33342: LD_INT 22
33344: PUSH
33345: LD_VAR 0 1
33349: PPUSH
33350: CALL_OW 255
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 91
33361: PUSH
33362: LD_VAR 0 1
33366: PUSH
33367: LD_INT 6
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 30
33377: PUSH
33378: LD_VAR 0 4
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: PUSH
33392: EMPTY
33393: LIST
33394: PPUSH
33395: CALL_OW 69
33399: ADD
33400: ST_TO_ADDR
33401: GO 33329
33403: POP
33404: POP
// for i = 1 to tmp do
33405: LD_ADDR_VAR 0 4
33409: PUSH
33410: DOUBLE
33411: LD_INT 1
33413: DEC
33414: ST_TO_ADDR
33415: LD_VAR 0 3
33419: PUSH
33420: FOR_TO
33421: IFFALSE 33509
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33423: LD_ADDR_VAR 0 5
33427: PUSH
33428: LD_VAR 0 5
33432: PUSH
33433: LD_VAR 0 3
33437: PUSH
33438: LD_VAR 0 4
33442: ARRAY
33443: PPUSH
33444: CALL_OW 266
33448: PUSH
33449: LD_VAR 0 3
33453: PUSH
33454: LD_VAR 0 4
33458: ARRAY
33459: PPUSH
33460: CALL_OW 250
33464: PUSH
33465: LD_VAR 0 3
33469: PUSH
33470: LD_VAR 0 4
33474: ARRAY
33475: PPUSH
33476: CALL_OW 251
33480: PUSH
33481: LD_VAR 0 3
33485: PUSH
33486: LD_VAR 0 4
33490: ARRAY
33491: PPUSH
33492: CALL_OW 254
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: PUSH
33503: EMPTY
33504: LIST
33505: ADD
33506: ST_TO_ADDR
33507: GO 33420
33509: POP
33510: POP
// result := list ;
33511: LD_ADDR_VAR 0 2
33515: PUSH
33516: LD_VAR 0 5
33520: ST_TO_ADDR
// end ;
33521: LD_VAR 0 2
33525: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33526: LD_INT 0
33528: PPUSH
33529: PPUSH
33530: PPUSH
33531: PPUSH
33532: PPUSH
33533: PPUSH
33534: PPUSH
// if not factory then
33535: LD_VAR 0 1
33539: NOT
33540: IFFALSE 33544
// exit ;
33542: GO 34137
// if control = control_apeman then
33544: LD_VAR 0 4
33548: PUSH
33549: LD_INT 5
33551: EQUAL
33552: IFFALSE 33661
// begin tmp := UnitsInside ( factory ) ;
33554: LD_ADDR_VAR 0 8
33558: PUSH
33559: LD_VAR 0 1
33563: PPUSH
33564: CALL_OW 313
33568: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33569: LD_VAR 0 8
33573: PPUSH
33574: LD_INT 25
33576: PUSH
33577: LD_INT 12
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PPUSH
33584: CALL_OW 72
33588: NOT
33589: IFFALSE 33599
// control := control_manual ;
33591: LD_ADDR_VAR 0 4
33595: PUSH
33596: LD_INT 1
33598: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33599: LD_ADDR_VAR 0 8
33603: PUSH
33604: LD_VAR 0 1
33608: PPUSH
33609: CALL 33296 0 1
33613: ST_TO_ADDR
// if tmp then
33614: LD_VAR 0 8
33618: IFFALSE 33661
// begin for i in tmp do
33620: LD_ADDR_VAR 0 7
33624: PUSH
33625: LD_VAR 0 8
33629: PUSH
33630: FOR_IN
33631: IFFALSE 33659
// if i [ 1 ] = b_ext_radio then
33633: LD_VAR 0 7
33637: PUSH
33638: LD_INT 1
33640: ARRAY
33641: PUSH
33642: LD_INT 22
33644: EQUAL
33645: IFFALSE 33657
// begin control := control_remote ;
33647: LD_ADDR_VAR 0 4
33651: PUSH
33652: LD_INT 2
33654: ST_TO_ADDR
// break ;
33655: GO 33659
// end ;
33657: GO 33630
33659: POP
33660: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33661: LD_VAR 0 1
33665: PPUSH
33666: LD_VAR 0 2
33670: PPUSH
33671: LD_VAR 0 3
33675: PPUSH
33676: LD_VAR 0 4
33680: PPUSH
33681: LD_VAR 0 5
33685: PPUSH
33686: CALL_OW 448
33690: IFFALSE 33725
// begin result := [ chassis , engine , control , weapon ] ;
33692: LD_ADDR_VAR 0 6
33696: PUSH
33697: LD_VAR 0 2
33701: PUSH
33702: LD_VAR 0 3
33706: PUSH
33707: LD_VAR 0 4
33711: PUSH
33712: LD_VAR 0 5
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: ST_TO_ADDR
// exit ;
33723: GO 34137
// end ; _chassis := AvailableChassisList ( factory ) ;
33725: LD_ADDR_VAR 0 9
33729: PUSH
33730: LD_VAR 0 1
33734: PPUSH
33735: CALL_OW 475
33739: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33740: LD_ADDR_VAR 0 11
33744: PUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: CALL_OW 476
33754: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33755: LD_ADDR_VAR 0 12
33759: PUSH
33760: LD_VAR 0 1
33764: PPUSH
33765: CALL_OW 477
33769: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33770: LD_ADDR_VAR 0 10
33774: PUSH
33775: LD_VAR 0 1
33779: PPUSH
33780: CALL_OW 478
33784: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33785: LD_VAR 0 9
33789: NOT
33790: PUSH
33791: LD_VAR 0 11
33795: NOT
33796: OR
33797: PUSH
33798: LD_VAR 0 12
33802: NOT
33803: OR
33804: PUSH
33805: LD_VAR 0 10
33809: NOT
33810: OR
33811: IFFALSE 33846
// begin result := [ chassis , engine , control , weapon ] ;
33813: LD_ADDR_VAR 0 6
33817: PUSH
33818: LD_VAR 0 2
33822: PUSH
33823: LD_VAR 0 3
33827: PUSH
33828: LD_VAR 0 4
33832: PUSH
33833: LD_VAR 0 5
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: ST_TO_ADDR
// exit ;
33844: GO 34137
// end ; if not chassis in _chassis then
33846: LD_VAR 0 2
33850: PUSH
33851: LD_VAR 0 9
33855: IN
33856: NOT
33857: IFFALSE 33883
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33859: LD_ADDR_VAR 0 2
33863: PUSH
33864: LD_VAR 0 9
33868: PUSH
33869: LD_INT 1
33871: PPUSH
33872: LD_VAR 0 9
33876: PPUSH
33877: CALL_OW 12
33881: ARRAY
33882: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33883: LD_VAR 0 2
33887: PPUSH
33888: LD_VAR 0 3
33892: PPUSH
33893: CALL 34142 0 2
33897: NOT
33898: IFFALSE 33957
// repeat engine := _engine [ 1 ] ;
33900: LD_ADDR_VAR 0 3
33904: PUSH
33905: LD_VAR 0 11
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33914: LD_ADDR_VAR 0 11
33918: PUSH
33919: LD_VAR 0 11
33923: PPUSH
33924: LD_INT 1
33926: PPUSH
33927: CALL_OW 3
33931: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33932: LD_VAR 0 2
33936: PPUSH
33937: LD_VAR 0 3
33941: PPUSH
33942: CALL 34142 0 2
33946: PUSH
33947: LD_VAR 0 11
33951: PUSH
33952: EMPTY
33953: EQUAL
33954: OR
33955: IFFALSE 33900
// if not control in _control then
33957: LD_VAR 0 4
33961: PUSH
33962: LD_VAR 0 12
33966: IN
33967: NOT
33968: IFFALSE 33994
// control := _control [ rand ( 1 , _control ) ] ;
33970: LD_ADDR_VAR 0 4
33974: PUSH
33975: LD_VAR 0 12
33979: PUSH
33980: LD_INT 1
33982: PPUSH
33983: LD_VAR 0 12
33987: PPUSH
33988: CALL_OW 12
33992: ARRAY
33993: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33994: LD_VAR 0 2
33998: PPUSH
33999: LD_VAR 0 5
34003: PPUSH
34004: CALL 34362 0 2
34008: NOT
34009: IFFALSE 34068
// repeat weapon := _weapon [ 1 ] ;
34011: LD_ADDR_VAR 0 5
34015: PUSH
34016: LD_VAR 0 10
34020: PUSH
34021: LD_INT 1
34023: ARRAY
34024: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34025: LD_ADDR_VAR 0 10
34029: PUSH
34030: LD_VAR 0 10
34034: PPUSH
34035: LD_INT 1
34037: PPUSH
34038: CALL_OW 3
34042: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34043: LD_VAR 0 2
34047: PPUSH
34048: LD_VAR 0 5
34052: PPUSH
34053: CALL 34362 0 2
34057: PUSH
34058: LD_VAR 0 10
34062: PUSH
34063: EMPTY
34064: EQUAL
34065: OR
34066: IFFALSE 34011
// result := [ ] ;
34068: LD_ADDR_VAR 0 6
34072: PUSH
34073: EMPTY
34074: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34075: LD_VAR 0 1
34079: PPUSH
34080: LD_VAR 0 2
34084: PPUSH
34085: LD_VAR 0 3
34089: PPUSH
34090: LD_VAR 0 4
34094: PPUSH
34095: LD_VAR 0 5
34099: PPUSH
34100: CALL_OW 448
34104: IFFALSE 34137
// result := [ chassis , engine , control , weapon ] ;
34106: LD_ADDR_VAR 0 6
34110: PUSH
34111: LD_VAR 0 2
34115: PUSH
34116: LD_VAR 0 3
34120: PUSH
34121: LD_VAR 0 4
34125: PUSH
34126: LD_VAR 0 5
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: ST_TO_ADDR
// end ;
34137: LD_VAR 0 6
34141: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34142: LD_INT 0
34144: PPUSH
// if not chassis or not engine then
34145: LD_VAR 0 1
34149: NOT
34150: PUSH
34151: LD_VAR 0 2
34155: NOT
34156: OR
34157: IFFALSE 34161
// exit ;
34159: GO 34357
// case engine of engine_solar :
34161: LD_VAR 0 2
34165: PUSH
34166: LD_INT 2
34168: DOUBLE
34169: EQUAL
34170: IFTRUE 34174
34172: GO 34212
34174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34175: LD_ADDR_VAR 0 3
34179: PUSH
34180: LD_INT 11
34182: PUSH
34183: LD_INT 12
34185: PUSH
34186: LD_INT 13
34188: PUSH
34189: LD_INT 14
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: LD_INT 3
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: ST_TO_ADDR
34210: GO 34341
34212: LD_INT 1
34214: DOUBLE
34215: EQUAL
34216: IFTRUE 34220
34218: GO 34282
34220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34221: LD_ADDR_VAR 0 3
34225: PUSH
34226: LD_INT 11
34228: PUSH
34229: LD_INT 12
34231: PUSH
34232: LD_INT 13
34234: PUSH
34235: LD_INT 14
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: LD_INT 2
34243: PUSH
34244: LD_INT 3
34246: PUSH
34247: LD_INT 4
34249: PUSH
34250: LD_INT 5
34252: PUSH
34253: LD_INT 21
34255: PUSH
34256: LD_INT 23
34258: PUSH
34259: LD_INT 22
34261: PUSH
34262: LD_INT 24
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: ST_TO_ADDR
34280: GO 34341
34282: LD_INT 3
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34290
34288: GO 34340
34290: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34291: LD_ADDR_VAR 0 3
34295: PUSH
34296: LD_INT 13
34298: PUSH
34299: LD_INT 14
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 3
34307: PUSH
34308: LD_INT 4
34310: PUSH
34311: LD_INT 5
34313: PUSH
34314: LD_INT 21
34316: PUSH
34317: LD_INT 22
34319: PUSH
34320: LD_INT 23
34322: PUSH
34323: LD_INT 24
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: ST_TO_ADDR
34338: GO 34341
34340: POP
// result := ( chassis in result ) ;
34341: LD_ADDR_VAR 0 3
34345: PUSH
34346: LD_VAR 0 1
34350: PUSH
34351: LD_VAR 0 3
34355: IN
34356: ST_TO_ADDR
// end ;
34357: LD_VAR 0 3
34361: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34362: LD_INT 0
34364: PPUSH
// if not chassis or not weapon then
34365: LD_VAR 0 1
34369: NOT
34370: PUSH
34371: LD_VAR 0 2
34375: NOT
34376: OR
34377: IFFALSE 34381
// exit ;
34379: GO 35441
// case weapon of us_machine_gun :
34381: LD_VAR 0 2
34385: PUSH
34386: LD_INT 2
34388: DOUBLE
34389: EQUAL
34390: IFTRUE 34394
34392: GO 34424
34394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34395: LD_ADDR_VAR 0 3
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 2
34405: PUSH
34406: LD_INT 3
34408: PUSH
34409: LD_INT 4
34411: PUSH
34412: LD_INT 5
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: ST_TO_ADDR
34422: GO 35425
34424: LD_INT 3
34426: DOUBLE
34427: EQUAL
34428: IFTRUE 34432
34430: GO 34462
34432: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: LD_INT 2
34443: PUSH
34444: LD_INT 3
34446: PUSH
34447: LD_INT 4
34449: PUSH
34450: LD_INT 5
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: ST_TO_ADDR
34460: GO 35425
34462: LD_INT 11
34464: DOUBLE
34465: EQUAL
34466: IFTRUE 34470
34468: GO 34500
34470: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34471: LD_ADDR_VAR 0 3
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: LD_INT 3
34484: PUSH
34485: LD_INT 4
34487: PUSH
34488: LD_INT 5
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: ST_TO_ADDR
34498: GO 35425
34500: LD_INT 4
34502: DOUBLE
34503: EQUAL
34504: IFTRUE 34508
34506: GO 34534
34508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34509: LD_ADDR_VAR 0 3
34513: PUSH
34514: LD_INT 2
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: LD_INT 4
34522: PUSH
34523: LD_INT 5
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: ST_TO_ADDR
34532: GO 35425
34534: LD_INT 5
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34542
34540: GO 34568
34542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_INT 2
34550: PUSH
34551: LD_INT 3
34553: PUSH
34554: LD_INT 4
34556: PUSH
34557: LD_INT 5
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: ST_TO_ADDR
34566: GO 35425
34568: LD_INT 9
34570: DOUBLE
34571: EQUAL
34572: IFTRUE 34576
34574: GO 34602
34576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34577: LD_ADDR_VAR 0 3
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 3
34587: PUSH
34588: LD_INT 4
34590: PUSH
34591: LD_INT 5
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: ST_TO_ADDR
34600: GO 35425
34602: LD_INT 7
34604: DOUBLE
34605: EQUAL
34606: IFTRUE 34610
34608: GO 34636
34610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34611: LD_ADDR_VAR 0 3
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: LD_INT 3
34621: PUSH
34622: LD_INT 4
34624: PUSH
34625: LD_INT 5
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
34634: GO 35425
34636: LD_INT 12
34638: DOUBLE
34639: EQUAL
34640: IFTRUE 34644
34642: GO 34670
34644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34645: LD_ADDR_VAR 0 3
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: LD_INT 4
34658: PUSH
34659: LD_INT 5
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
34668: GO 35425
34670: LD_INT 13
34672: DOUBLE
34673: EQUAL
34674: IFTRUE 34678
34676: GO 34704
34678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34679: LD_ADDR_VAR 0 3
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 3
34689: PUSH
34690: LD_INT 4
34692: PUSH
34693: LD_INT 5
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: ST_TO_ADDR
34702: GO 35425
34704: LD_INT 14
34706: DOUBLE
34707: EQUAL
34708: IFTRUE 34712
34710: GO 34730
34712: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34713: LD_ADDR_VAR 0 3
34717: PUSH
34718: LD_INT 4
34720: PUSH
34721: LD_INT 5
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: ST_TO_ADDR
34728: GO 35425
34730: LD_INT 6
34732: DOUBLE
34733: EQUAL
34734: IFTRUE 34738
34736: GO 34756
34738: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34739: LD_ADDR_VAR 0 3
34743: PUSH
34744: LD_INT 4
34746: PUSH
34747: LD_INT 5
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: ST_TO_ADDR
34754: GO 35425
34756: LD_INT 10
34758: DOUBLE
34759: EQUAL
34760: IFTRUE 34764
34762: GO 34782
34764: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34765: LD_ADDR_VAR 0 3
34769: PUSH
34770: LD_INT 4
34772: PUSH
34773: LD_INT 5
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: ST_TO_ADDR
34780: GO 35425
34782: LD_INT 22
34784: DOUBLE
34785: EQUAL
34786: IFTRUE 34790
34788: GO 34816
34790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34791: LD_ADDR_VAR 0 3
34795: PUSH
34796: LD_INT 11
34798: PUSH
34799: LD_INT 12
34801: PUSH
34802: LD_INT 13
34804: PUSH
34805: LD_INT 14
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 35425
34816: LD_INT 23
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 34850
34824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_INT 11
34832: PUSH
34833: LD_INT 12
34835: PUSH
34836: LD_INT 13
34838: PUSH
34839: LD_INT 14
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
34848: GO 35425
34850: LD_INT 24
34852: DOUBLE
34853: EQUAL
34854: IFTRUE 34858
34856: GO 34884
34858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34859: LD_ADDR_VAR 0 3
34863: PUSH
34864: LD_INT 11
34866: PUSH
34867: LD_INT 12
34869: PUSH
34870: LD_INT 13
34872: PUSH
34873: LD_INT 14
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
34882: GO 35425
34884: LD_INT 30
34886: DOUBLE
34887: EQUAL
34888: IFTRUE 34892
34890: GO 34918
34892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34893: LD_ADDR_VAR 0 3
34897: PUSH
34898: LD_INT 11
34900: PUSH
34901: LD_INT 12
34903: PUSH
34904: LD_INT 13
34906: PUSH
34907: LD_INT 14
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
34916: GO 35425
34918: LD_INT 25
34920: DOUBLE
34921: EQUAL
34922: IFTRUE 34926
34924: GO 34944
34926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34927: LD_ADDR_VAR 0 3
34931: PUSH
34932: LD_INT 13
34934: PUSH
34935: LD_INT 14
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: ST_TO_ADDR
34942: GO 35425
34944: LD_INT 27
34946: DOUBLE
34947: EQUAL
34948: IFTRUE 34952
34950: GO 34970
34952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34953: LD_ADDR_VAR 0 3
34957: PUSH
34958: LD_INT 13
34960: PUSH
34961: LD_INT 14
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: ST_TO_ADDR
34968: GO 35425
34970: LD_INT 92
34972: DOUBLE
34973: EQUAL
34974: IFTRUE 34978
34976: GO 35004
34978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34979: LD_ADDR_VAR 0 3
34983: PUSH
34984: LD_INT 11
34986: PUSH
34987: LD_INT 12
34989: PUSH
34990: LD_INT 13
34992: PUSH
34993: LD_INT 14
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: ST_TO_ADDR
35002: GO 35425
35004: LD_INT 28
35006: DOUBLE
35007: EQUAL
35008: IFTRUE 35012
35010: GO 35030
35012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35013: LD_ADDR_VAR 0 3
35017: PUSH
35018: LD_INT 13
35020: PUSH
35021: LD_INT 14
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: ST_TO_ADDR
35028: GO 35425
35030: LD_INT 29
35032: DOUBLE
35033: EQUAL
35034: IFTRUE 35038
35036: GO 35056
35038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35039: LD_ADDR_VAR 0 3
35043: PUSH
35044: LD_INT 13
35046: PUSH
35047: LD_INT 14
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: ST_TO_ADDR
35054: GO 35425
35056: LD_INT 31
35058: DOUBLE
35059: EQUAL
35060: IFTRUE 35064
35062: GO 35082
35064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35065: LD_ADDR_VAR 0 3
35069: PUSH
35070: LD_INT 13
35072: PUSH
35073: LD_INT 14
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: ST_TO_ADDR
35080: GO 35425
35082: LD_INT 26
35084: DOUBLE
35085: EQUAL
35086: IFTRUE 35090
35088: GO 35108
35090: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35091: LD_ADDR_VAR 0 3
35095: PUSH
35096: LD_INT 13
35098: PUSH
35099: LD_INT 14
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: ST_TO_ADDR
35106: GO 35425
35108: LD_INT 42
35110: DOUBLE
35111: EQUAL
35112: IFTRUE 35116
35114: GO 35142
35116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35117: LD_ADDR_VAR 0 3
35121: PUSH
35122: LD_INT 21
35124: PUSH
35125: LD_INT 22
35127: PUSH
35128: LD_INT 23
35130: PUSH
35131: LD_INT 24
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: ST_TO_ADDR
35140: GO 35425
35142: LD_INT 43
35144: DOUBLE
35145: EQUAL
35146: IFTRUE 35150
35148: GO 35176
35150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35151: LD_ADDR_VAR 0 3
35155: PUSH
35156: LD_INT 21
35158: PUSH
35159: LD_INT 22
35161: PUSH
35162: LD_INT 23
35164: PUSH
35165: LD_INT 24
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: ST_TO_ADDR
35174: GO 35425
35176: LD_INT 44
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35184
35182: GO 35210
35184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35185: LD_ADDR_VAR 0 3
35189: PUSH
35190: LD_INT 21
35192: PUSH
35193: LD_INT 22
35195: PUSH
35196: LD_INT 23
35198: PUSH
35199: LD_INT 24
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
35208: GO 35425
35210: LD_INT 45
35212: DOUBLE
35213: EQUAL
35214: IFTRUE 35218
35216: GO 35244
35218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35219: LD_ADDR_VAR 0 3
35223: PUSH
35224: LD_INT 21
35226: PUSH
35227: LD_INT 22
35229: PUSH
35230: LD_INT 23
35232: PUSH
35233: LD_INT 24
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
35242: GO 35425
35244: LD_INT 49
35246: DOUBLE
35247: EQUAL
35248: IFTRUE 35252
35250: GO 35278
35252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35253: LD_ADDR_VAR 0 3
35257: PUSH
35258: LD_INT 21
35260: PUSH
35261: LD_INT 22
35263: PUSH
35264: LD_INT 23
35266: PUSH
35267: LD_INT 24
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: ST_TO_ADDR
35276: GO 35425
35278: LD_INT 51
35280: DOUBLE
35281: EQUAL
35282: IFTRUE 35286
35284: GO 35312
35286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35287: LD_ADDR_VAR 0 3
35291: PUSH
35292: LD_INT 21
35294: PUSH
35295: LD_INT 22
35297: PUSH
35298: LD_INT 23
35300: PUSH
35301: LD_INT 24
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: ST_TO_ADDR
35310: GO 35425
35312: LD_INT 52
35314: DOUBLE
35315: EQUAL
35316: IFTRUE 35320
35318: GO 35346
35320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35321: LD_ADDR_VAR 0 3
35325: PUSH
35326: LD_INT 21
35328: PUSH
35329: LD_INT 22
35331: PUSH
35332: LD_INT 23
35334: PUSH
35335: LD_INT 24
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
35344: GO 35425
35346: LD_INT 53
35348: DOUBLE
35349: EQUAL
35350: IFTRUE 35354
35352: GO 35372
35354: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35355: LD_ADDR_VAR 0 3
35359: PUSH
35360: LD_INT 23
35362: PUSH
35363: LD_INT 24
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: ST_TO_ADDR
35370: GO 35425
35372: LD_INT 46
35374: DOUBLE
35375: EQUAL
35376: IFTRUE 35380
35378: GO 35398
35380: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35381: LD_ADDR_VAR 0 3
35385: PUSH
35386: LD_INT 23
35388: PUSH
35389: LD_INT 24
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: ST_TO_ADDR
35396: GO 35425
35398: LD_INT 47
35400: DOUBLE
35401: EQUAL
35402: IFTRUE 35406
35404: GO 35424
35406: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35407: LD_ADDR_VAR 0 3
35411: PUSH
35412: LD_INT 23
35414: PUSH
35415: LD_INT 24
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: ST_TO_ADDR
35422: GO 35425
35424: POP
// result := ( chassis in result ) ;
35425: LD_ADDR_VAR 0 3
35429: PUSH
35430: LD_VAR 0 1
35434: PUSH
35435: LD_VAR 0 3
35439: IN
35440: ST_TO_ADDR
// end ;
35441: LD_VAR 0 3
35445: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35446: LD_INT 0
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
// result := array ;
35455: LD_ADDR_VAR 0 5
35459: PUSH
35460: LD_VAR 0 1
35464: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35465: LD_VAR 0 1
35469: NOT
35470: PUSH
35471: LD_VAR 0 2
35475: NOT
35476: OR
35477: PUSH
35478: LD_VAR 0 3
35482: NOT
35483: OR
35484: PUSH
35485: LD_VAR 0 2
35489: PUSH
35490: LD_VAR 0 1
35494: GREATER
35495: OR
35496: PUSH
35497: LD_VAR 0 3
35501: PUSH
35502: LD_VAR 0 1
35506: GREATER
35507: OR
35508: IFFALSE 35512
// exit ;
35510: GO 35808
// if direction then
35512: LD_VAR 0 4
35516: IFFALSE 35580
// begin d := 1 ;
35518: LD_ADDR_VAR 0 9
35522: PUSH
35523: LD_INT 1
35525: ST_TO_ADDR
// if i_from > i_to then
35526: LD_VAR 0 2
35530: PUSH
35531: LD_VAR 0 3
35535: GREATER
35536: IFFALSE 35562
// length := ( array - i_from ) + i_to else
35538: LD_ADDR_VAR 0 11
35542: PUSH
35543: LD_VAR 0 1
35547: PUSH
35548: LD_VAR 0 2
35552: MINUS
35553: PUSH
35554: LD_VAR 0 3
35558: PLUS
35559: ST_TO_ADDR
35560: GO 35578
// length := i_to - i_from ;
35562: LD_ADDR_VAR 0 11
35566: PUSH
35567: LD_VAR 0 3
35571: PUSH
35572: LD_VAR 0 2
35576: MINUS
35577: ST_TO_ADDR
// end else
35578: GO 35641
// begin d := - 1 ;
35580: LD_ADDR_VAR 0 9
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: ST_TO_ADDR
// if i_from > i_to then
35589: LD_VAR 0 2
35593: PUSH
35594: LD_VAR 0 3
35598: GREATER
35599: IFFALSE 35619
// length := i_from - i_to else
35601: LD_ADDR_VAR 0 11
35605: PUSH
35606: LD_VAR 0 2
35610: PUSH
35611: LD_VAR 0 3
35615: MINUS
35616: ST_TO_ADDR
35617: GO 35641
// length := ( array - i_to ) + i_from ;
35619: LD_ADDR_VAR 0 11
35623: PUSH
35624: LD_VAR 0 1
35628: PUSH
35629: LD_VAR 0 3
35633: MINUS
35634: PUSH
35635: LD_VAR 0 2
35639: PLUS
35640: ST_TO_ADDR
// end ; if not length then
35641: LD_VAR 0 11
35645: NOT
35646: IFFALSE 35650
// exit ;
35648: GO 35808
// tmp := array ;
35650: LD_ADDR_VAR 0 10
35654: PUSH
35655: LD_VAR 0 1
35659: ST_TO_ADDR
// for i = 1 to length do
35660: LD_ADDR_VAR 0 6
35664: PUSH
35665: DOUBLE
35666: LD_INT 1
35668: DEC
35669: ST_TO_ADDR
35670: LD_VAR 0 11
35674: PUSH
35675: FOR_TO
35676: IFFALSE 35796
// begin for j = 1 to array do
35678: LD_ADDR_VAR 0 7
35682: PUSH
35683: DOUBLE
35684: LD_INT 1
35686: DEC
35687: ST_TO_ADDR
35688: LD_VAR 0 1
35692: PUSH
35693: FOR_TO
35694: IFFALSE 35782
// begin k := j + d ;
35696: LD_ADDR_VAR 0 8
35700: PUSH
35701: LD_VAR 0 7
35705: PUSH
35706: LD_VAR 0 9
35710: PLUS
35711: ST_TO_ADDR
// if k > array then
35712: LD_VAR 0 8
35716: PUSH
35717: LD_VAR 0 1
35721: GREATER
35722: IFFALSE 35732
// k := 1 ;
35724: LD_ADDR_VAR 0 8
35728: PUSH
35729: LD_INT 1
35731: ST_TO_ADDR
// if not k then
35732: LD_VAR 0 8
35736: NOT
35737: IFFALSE 35749
// k := array ;
35739: LD_ADDR_VAR 0 8
35743: PUSH
35744: LD_VAR 0 1
35748: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35749: LD_ADDR_VAR 0 10
35753: PUSH
35754: LD_VAR 0 10
35758: PPUSH
35759: LD_VAR 0 8
35763: PPUSH
35764: LD_VAR 0 1
35768: PUSH
35769: LD_VAR 0 7
35773: ARRAY
35774: PPUSH
35775: CALL_OW 1
35779: ST_TO_ADDR
// end ;
35780: GO 35693
35782: POP
35783: POP
// array := tmp ;
35784: LD_ADDR_VAR 0 1
35788: PUSH
35789: LD_VAR 0 10
35793: ST_TO_ADDR
// end ;
35794: GO 35675
35796: POP
35797: POP
// result := array ;
35798: LD_ADDR_VAR 0 5
35802: PUSH
35803: LD_VAR 0 1
35807: ST_TO_ADDR
// end ;
35808: LD_VAR 0 5
35812: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35813: LD_INT 0
35815: PPUSH
35816: PPUSH
// result := 0 ;
35817: LD_ADDR_VAR 0 3
35821: PUSH
35822: LD_INT 0
35824: ST_TO_ADDR
// if not array or not value in array then
35825: LD_VAR 0 1
35829: NOT
35830: PUSH
35831: LD_VAR 0 2
35835: PUSH
35836: LD_VAR 0 1
35840: IN
35841: NOT
35842: OR
35843: IFFALSE 35847
// exit ;
35845: GO 35901
// for i = 1 to array do
35847: LD_ADDR_VAR 0 4
35851: PUSH
35852: DOUBLE
35853: LD_INT 1
35855: DEC
35856: ST_TO_ADDR
35857: LD_VAR 0 1
35861: PUSH
35862: FOR_TO
35863: IFFALSE 35899
// if value = array [ i ] then
35865: LD_VAR 0 2
35869: PUSH
35870: LD_VAR 0 1
35874: PUSH
35875: LD_VAR 0 4
35879: ARRAY
35880: EQUAL
35881: IFFALSE 35897
// begin result := i ;
35883: LD_ADDR_VAR 0 3
35887: PUSH
35888: LD_VAR 0 4
35892: ST_TO_ADDR
// exit ;
35893: POP
35894: POP
35895: GO 35901
// end ;
35897: GO 35862
35899: POP
35900: POP
// end ;
35901: LD_VAR 0 3
35905: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35906: LD_INT 0
35908: PPUSH
// vc_chassis := chassis ;
35909: LD_ADDR_OWVAR 37
35913: PUSH
35914: LD_VAR 0 1
35918: ST_TO_ADDR
// vc_engine := engine ;
35919: LD_ADDR_OWVAR 39
35923: PUSH
35924: LD_VAR 0 2
35928: ST_TO_ADDR
// vc_control := control ;
35929: LD_ADDR_OWVAR 38
35933: PUSH
35934: LD_VAR 0 3
35938: ST_TO_ADDR
// vc_weapon := weapon ;
35939: LD_ADDR_OWVAR 40
35943: PUSH
35944: LD_VAR 0 4
35948: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35949: LD_ADDR_OWVAR 41
35953: PUSH
35954: LD_VAR 0 5
35958: ST_TO_ADDR
// end ;
35959: LD_VAR 0 6
35963: RET
// export function WantPlant ( unit ) ; var task ; begin
35964: LD_INT 0
35966: PPUSH
35967: PPUSH
// result := false ;
35968: LD_ADDR_VAR 0 2
35972: PUSH
35973: LD_INT 0
35975: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35976: LD_ADDR_VAR 0 3
35980: PUSH
35981: LD_VAR 0 1
35985: PPUSH
35986: CALL_OW 437
35990: ST_TO_ADDR
// if task then
35991: LD_VAR 0 3
35995: IFFALSE 36023
// if task [ 1 ] [ 1 ] = p then
35997: LD_VAR 0 3
36001: PUSH
36002: LD_INT 1
36004: ARRAY
36005: PUSH
36006: LD_INT 1
36008: ARRAY
36009: PUSH
36010: LD_STRING p
36012: EQUAL
36013: IFFALSE 36023
// result := true ;
36015: LD_ADDR_VAR 0 2
36019: PUSH
36020: LD_INT 1
36022: ST_TO_ADDR
// end ;
36023: LD_VAR 0 2
36027: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36028: LD_INT 0
36030: PPUSH
36031: PPUSH
36032: PPUSH
36033: PPUSH
// if pos < 1 then
36034: LD_VAR 0 2
36038: PUSH
36039: LD_INT 1
36041: LESS
36042: IFFALSE 36046
// exit ;
36044: GO 36349
// if pos = 1 then
36046: LD_VAR 0 2
36050: PUSH
36051: LD_INT 1
36053: EQUAL
36054: IFFALSE 36087
// result := Replace ( arr , pos [ 1 ] , value ) else
36056: LD_ADDR_VAR 0 4
36060: PUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: LD_VAR 0 2
36070: PUSH
36071: LD_INT 1
36073: ARRAY
36074: PPUSH
36075: LD_VAR 0 3
36079: PPUSH
36080: CALL_OW 1
36084: ST_TO_ADDR
36085: GO 36349
// begin tmp := arr ;
36087: LD_ADDR_VAR 0 6
36091: PUSH
36092: LD_VAR 0 1
36096: ST_TO_ADDR
// s_arr := [ tmp ] ;
36097: LD_ADDR_VAR 0 7
36101: PUSH
36102: LD_VAR 0 6
36106: PUSH
36107: EMPTY
36108: LIST
36109: ST_TO_ADDR
// for i = 1 to pos - 1 do
36110: LD_ADDR_VAR 0 5
36114: PUSH
36115: DOUBLE
36116: LD_INT 1
36118: DEC
36119: ST_TO_ADDR
36120: LD_VAR 0 2
36124: PUSH
36125: LD_INT 1
36127: MINUS
36128: PUSH
36129: FOR_TO
36130: IFFALSE 36175
// begin tmp := tmp [ pos [ i ] ] ;
36132: LD_ADDR_VAR 0 6
36136: PUSH
36137: LD_VAR 0 6
36141: PUSH
36142: LD_VAR 0 2
36146: PUSH
36147: LD_VAR 0 5
36151: ARRAY
36152: ARRAY
36153: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36154: LD_ADDR_VAR 0 7
36158: PUSH
36159: LD_VAR 0 7
36163: PUSH
36164: LD_VAR 0 6
36168: PUSH
36169: EMPTY
36170: LIST
36171: ADD
36172: ST_TO_ADDR
// end ;
36173: GO 36129
36175: POP
36176: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36177: LD_ADDR_VAR 0 6
36181: PUSH
36182: LD_VAR 0 6
36186: PPUSH
36187: LD_VAR 0 2
36191: PUSH
36192: LD_VAR 0 2
36196: ARRAY
36197: PPUSH
36198: LD_VAR 0 3
36202: PPUSH
36203: CALL_OW 1
36207: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36208: LD_ADDR_VAR 0 7
36212: PUSH
36213: LD_VAR 0 7
36217: PPUSH
36218: LD_VAR 0 7
36222: PPUSH
36223: LD_VAR 0 6
36227: PPUSH
36228: CALL_OW 1
36232: ST_TO_ADDR
// for i = s_arr downto 2 do
36233: LD_ADDR_VAR 0 5
36237: PUSH
36238: DOUBLE
36239: LD_VAR 0 7
36243: INC
36244: ST_TO_ADDR
36245: LD_INT 2
36247: PUSH
36248: FOR_DOWNTO
36249: IFFALSE 36333
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36251: LD_ADDR_VAR 0 6
36255: PUSH
36256: LD_VAR 0 7
36260: PUSH
36261: LD_VAR 0 5
36265: PUSH
36266: LD_INT 1
36268: MINUS
36269: ARRAY
36270: PPUSH
36271: LD_VAR 0 2
36275: PUSH
36276: LD_VAR 0 5
36280: PUSH
36281: LD_INT 1
36283: MINUS
36284: ARRAY
36285: PPUSH
36286: LD_VAR 0 7
36290: PUSH
36291: LD_VAR 0 5
36295: ARRAY
36296: PPUSH
36297: CALL_OW 1
36301: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36302: LD_ADDR_VAR 0 7
36306: PUSH
36307: LD_VAR 0 7
36311: PPUSH
36312: LD_VAR 0 5
36316: PUSH
36317: LD_INT 1
36319: MINUS
36320: PPUSH
36321: LD_VAR 0 6
36325: PPUSH
36326: CALL_OW 1
36330: ST_TO_ADDR
// end ;
36331: GO 36248
36333: POP
36334: POP
// result := s_arr [ 1 ] ;
36335: LD_ADDR_VAR 0 4
36339: PUSH
36340: LD_VAR 0 7
36344: PUSH
36345: LD_INT 1
36347: ARRAY
36348: ST_TO_ADDR
// end ; end ;
36349: LD_VAR 0 4
36353: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36354: LD_INT 0
36356: PPUSH
36357: PPUSH
// if not list then
36358: LD_VAR 0 1
36362: NOT
36363: IFFALSE 36367
// exit ;
36365: GO 36458
// i := list [ pos1 ] ;
36367: LD_ADDR_VAR 0 5
36371: PUSH
36372: LD_VAR 0 1
36376: PUSH
36377: LD_VAR 0 2
36381: ARRAY
36382: ST_TO_ADDR
// if not i then
36383: LD_VAR 0 5
36387: NOT
36388: IFFALSE 36392
// exit ;
36390: GO 36458
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36392: LD_ADDR_VAR 0 1
36396: PUSH
36397: LD_VAR 0 1
36401: PPUSH
36402: LD_VAR 0 2
36406: PPUSH
36407: LD_VAR 0 1
36411: PUSH
36412: LD_VAR 0 3
36416: ARRAY
36417: PPUSH
36418: CALL_OW 1
36422: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36423: LD_ADDR_VAR 0 1
36427: PUSH
36428: LD_VAR 0 1
36432: PPUSH
36433: LD_VAR 0 3
36437: PPUSH
36438: LD_VAR 0 5
36442: PPUSH
36443: CALL_OW 1
36447: ST_TO_ADDR
// result := list ;
36448: LD_ADDR_VAR 0 4
36452: PUSH
36453: LD_VAR 0 1
36457: ST_TO_ADDR
// end ;
36458: LD_VAR 0 4
36462: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36463: LD_INT 0
36465: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36466: LD_ADDR_VAR 0 5
36470: PUSH
36471: LD_VAR 0 1
36475: PPUSH
36476: CALL_OW 250
36480: PPUSH
36481: LD_VAR 0 1
36485: PPUSH
36486: CALL_OW 251
36490: PPUSH
36491: LD_VAR 0 2
36495: PPUSH
36496: LD_VAR 0 3
36500: PPUSH
36501: LD_VAR 0 4
36505: PPUSH
36506: CALL 36516 0 5
36510: ST_TO_ADDR
// end ;
36511: LD_VAR 0 5
36515: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36516: LD_INT 0
36518: PPUSH
36519: PPUSH
36520: PPUSH
36521: PPUSH
// if not list then
36522: LD_VAR 0 3
36526: NOT
36527: IFFALSE 36531
// exit ;
36529: GO 36919
// result := [ ] ;
36531: LD_ADDR_VAR 0 6
36535: PUSH
36536: EMPTY
36537: ST_TO_ADDR
// for i in list do
36538: LD_ADDR_VAR 0 7
36542: PUSH
36543: LD_VAR 0 3
36547: PUSH
36548: FOR_IN
36549: IFFALSE 36751
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36551: LD_ADDR_VAR 0 9
36555: PUSH
36556: LD_VAR 0 7
36560: PPUSH
36561: LD_VAR 0 1
36565: PPUSH
36566: LD_VAR 0 2
36570: PPUSH
36571: CALL_OW 297
36575: ST_TO_ADDR
// if not result then
36576: LD_VAR 0 6
36580: NOT
36581: IFFALSE 36607
// result := [ [ i , tmp ] ] else
36583: LD_ADDR_VAR 0 6
36587: PUSH
36588: LD_VAR 0 7
36592: PUSH
36593: LD_VAR 0 9
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: EMPTY
36603: LIST
36604: ST_TO_ADDR
36605: GO 36749
// begin if result [ result ] [ 2 ] < tmp then
36607: LD_VAR 0 6
36611: PUSH
36612: LD_VAR 0 6
36616: ARRAY
36617: PUSH
36618: LD_INT 2
36620: ARRAY
36621: PUSH
36622: LD_VAR 0 9
36626: LESS
36627: IFFALSE 36669
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36629: LD_ADDR_VAR 0 6
36633: PUSH
36634: LD_VAR 0 6
36638: PPUSH
36639: LD_VAR 0 6
36643: PUSH
36644: LD_INT 1
36646: PLUS
36647: PPUSH
36648: LD_VAR 0 7
36652: PUSH
36653: LD_VAR 0 9
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PPUSH
36662: CALL_OW 2
36666: ST_TO_ADDR
36667: GO 36749
// for j = 1 to result do
36669: LD_ADDR_VAR 0 8
36673: PUSH
36674: DOUBLE
36675: LD_INT 1
36677: DEC
36678: ST_TO_ADDR
36679: LD_VAR 0 6
36683: PUSH
36684: FOR_TO
36685: IFFALSE 36747
// begin if tmp < result [ j ] [ 2 ] then
36687: LD_VAR 0 9
36691: PUSH
36692: LD_VAR 0 6
36696: PUSH
36697: LD_VAR 0 8
36701: ARRAY
36702: PUSH
36703: LD_INT 2
36705: ARRAY
36706: LESS
36707: IFFALSE 36745
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36709: LD_ADDR_VAR 0 6
36713: PUSH
36714: LD_VAR 0 6
36718: PPUSH
36719: LD_VAR 0 8
36723: PPUSH
36724: LD_VAR 0 7
36728: PUSH
36729: LD_VAR 0 9
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PPUSH
36738: CALL_OW 2
36742: ST_TO_ADDR
// break ;
36743: GO 36747
// end ; end ;
36745: GO 36684
36747: POP
36748: POP
// end ; end ;
36749: GO 36548
36751: POP
36752: POP
// if result and not asc then
36753: LD_VAR 0 6
36757: PUSH
36758: LD_VAR 0 4
36762: NOT
36763: AND
36764: IFFALSE 36839
// begin tmp := result ;
36766: LD_ADDR_VAR 0 9
36770: PUSH
36771: LD_VAR 0 6
36775: ST_TO_ADDR
// for i = tmp downto 1 do
36776: LD_ADDR_VAR 0 7
36780: PUSH
36781: DOUBLE
36782: LD_VAR 0 9
36786: INC
36787: ST_TO_ADDR
36788: LD_INT 1
36790: PUSH
36791: FOR_DOWNTO
36792: IFFALSE 36837
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36794: LD_ADDR_VAR 0 6
36798: PUSH
36799: LD_VAR 0 6
36803: PPUSH
36804: LD_VAR 0 9
36808: PUSH
36809: LD_VAR 0 7
36813: MINUS
36814: PUSH
36815: LD_INT 1
36817: PLUS
36818: PPUSH
36819: LD_VAR 0 9
36823: PUSH
36824: LD_VAR 0 7
36828: ARRAY
36829: PPUSH
36830: CALL_OW 1
36834: ST_TO_ADDR
36835: GO 36791
36837: POP
36838: POP
// end ; tmp := [ ] ;
36839: LD_ADDR_VAR 0 9
36843: PUSH
36844: EMPTY
36845: ST_TO_ADDR
// if mode then
36846: LD_VAR 0 5
36850: IFFALSE 36919
// begin for i = 1 to result do
36852: LD_ADDR_VAR 0 7
36856: PUSH
36857: DOUBLE
36858: LD_INT 1
36860: DEC
36861: ST_TO_ADDR
36862: LD_VAR 0 6
36866: PUSH
36867: FOR_TO
36868: IFFALSE 36907
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36870: LD_ADDR_VAR 0 9
36874: PUSH
36875: LD_VAR 0 9
36879: PPUSH
36880: LD_VAR 0 7
36884: PPUSH
36885: LD_VAR 0 6
36889: PUSH
36890: LD_VAR 0 7
36894: ARRAY
36895: PUSH
36896: LD_INT 1
36898: ARRAY
36899: PPUSH
36900: CALL_OW 1
36904: ST_TO_ADDR
36905: GO 36867
36907: POP
36908: POP
// result := tmp ;
36909: LD_ADDR_VAR 0 6
36913: PUSH
36914: LD_VAR 0 9
36918: ST_TO_ADDR
// end ; end ;
36919: LD_VAR 0 6
36923: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36924: LD_INT 0
36926: PPUSH
36927: PPUSH
36928: PPUSH
36929: PPUSH
36930: PPUSH
36931: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36932: LD_ADDR_VAR 0 5
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: ST_TO_ADDR
// if not x or not y then
36954: LD_VAR 0 2
36958: NOT
36959: PUSH
36960: LD_VAR 0 3
36964: NOT
36965: OR
36966: IFFALSE 36970
// exit ;
36968: GO 38620
// if not range then
36970: LD_VAR 0 4
36974: NOT
36975: IFFALSE 36985
// range := 10 ;
36977: LD_ADDR_VAR 0 4
36981: PUSH
36982: LD_INT 10
36984: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36985: LD_ADDR_VAR 0 8
36989: PUSH
36990: LD_INT 81
36992: PUSH
36993: LD_VAR 0 1
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 92
37004: PUSH
37005: LD_VAR 0 2
37009: PUSH
37010: LD_VAR 0 3
37014: PUSH
37015: LD_VAR 0 4
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: LD_INT 21
37031: PUSH
37032: LD_INT 3
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: PPUSH
37048: CALL_OW 69
37052: ST_TO_ADDR
// if not tmp then
37053: LD_VAR 0 8
37057: NOT
37058: IFFALSE 37062
// exit ;
37060: GO 38620
// for i in tmp do
37062: LD_ADDR_VAR 0 6
37066: PUSH
37067: LD_VAR 0 8
37071: PUSH
37072: FOR_IN
37073: IFFALSE 38595
// begin points := [ 0 , 0 , 0 ] ;
37075: LD_ADDR_VAR 0 9
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: ST_TO_ADDR
// bpoints := 1 ;
37094: LD_ADDR_VAR 0 10
37098: PUSH
37099: LD_INT 1
37101: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37102: LD_VAR 0 6
37106: PPUSH
37107: CALL_OW 247
37111: PUSH
37112: LD_INT 1
37114: DOUBLE
37115: EQUAL
37116: IFTRUE 37120
37118: GO 37698
37120: POP
// begin if GetClass ( i ) = 1 then
37121: LD_VAR 0 6
37125: PPUSH
37126: CALL_OW 257
37130: PUSH
37131: LD_INT 1
37133: EQUAL
37134: IFFALSE 37155
// points := [ 10 , 5 , 3 ] ;
37136: LD_ADDR_VAR 0 9
37140: PUSH
37141: LD_INT 10
37143: PUSH
37144: LD_INT 5
37146: PUSH
37147: LD_INT 3
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37155: LD_VAR 0 6
37159: PPUSH
37160: CALL_OW 257
37164: PUSH
37165: LD_INT 2
37167: PUSH
37168: LD_INT 3
37170: PUSH
37171: LD_INT 4
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: IN
37179: IFFALSE 37200
// points := [ 3 , 2 , 1 ] ;
37181: LD_ADDR_VAR 0 9
37185: PUSH
37186: LD_INT 3
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37200: LD_VAR 0 6
37204: PPUSH
37205: CALL_OW 257
37209: PUSH
37210: LD_INT 5
37212: EQUAL
37213: IFFALSE 37234
// points := [ 130 , 5 , 2 ] ;
37215: LD_ADDR_VAR 0 9
37219: PUSH
37220: LD_INT 130
37222: PUSH
37223: LD_INT 5
37225: PUSH
37226: LD_INT 2
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37234: LD_VAR 0 6
37238: PPUSH
37239: CALL_OW 257
37243: PUSH
37244: LD_INT 8
37246: EQUAL
37247: IFFALSE 37268
// points := [ 35 , 35 , 30 ] ;
37249: LD_ADDR_VAR 0 9
37253: PUSH
37254: LD_INT 35
37256: PUSH
37257: LD_INT 35
37259: PUSH
37260: LD_INT 30
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37268: LD_VAR 0 6
37272: PPUSH
37273: CALL_OW 257
37277: PUSH
37278: LD_INT 9
37280: EQUAL
37281: IFFALSE 37302
// points := [ 20 , 55 , 40 ] ;
37283: LD_ADDR_VAR 0 9
37287: PUSH
37288: LD_INT 20
37290: PUSH
37291: LD_INT 55
37293: PUSH
37294: LD_INT 40
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37302: LD_VAR 0 6
37306: PPUSH
37307: CALL_OW 257
37311: PUSH
37312: LD_INT 12
37314: PUSH
37315: LD_INT 16
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: IN
37322: IFFALSE 37343
// points := [ 5 , 3 , 2 ] ;
37324: LD_ADDR_VAR 0 9
37328: PUSH
37329: LD_INT 5
37331: PUSH
37332: LD_INT 3
37334: PUSH
37335: LD_INT 2
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37343: LD_VAR 0 6
37347: PPUSH
37348: CALL_OW 257
37352: PUSH
37353: LD_INT 17
37355: EQUAL
37356: IFFALSE 37377
// points := [ 100 , 50 , 75 ] ;
37358: LD_ADDR_VAR 0 9
37362: PUSH
37363: LD_INT 100
37365: PUSH
37366: LD_INT 50
37368: PUSH
37369: LD_INT 75
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37377: LD_VAR 0 6
37381: PPUSH
37382: CALL_OW 257
37386: PUSH
37387: LD_INT 15
37389: EQUAL
37390: IFFALSE 37411
// points := [ 10 , 5 , 3 ] ;
37392: LD_ADDR_VAR 0 9
37396: PUSH
37397: LD_INT 10
37399: PUSH
37400: LD_INT 5
37402: PUSH
37403: LD_INT 3
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37411: LD_VAR 0 6
37415: PPUSH
37416: CALL_OW 257
37420: PUSH
37421: LD_INT 14
37423: EQUAL
37424: IFFALSE 37445
// points := [ 10 , 0 , 0 ] ;
37426: LD_ADDR_VAR 0 9
37430: PUSH
37431: LD_INT 10
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37445: LD_VAR 0 6
37449: PPUSH
37450: CALL_OW 257
37454: PUSH
37455: LD_INT 11
37457: EQUAL
37458: IFFALSE 37479
// points := [ 30 , 10 , 5 ] ;
37460: LD_ADDR_VAR 0 9
37464: PUSH
37465: LD_INT 30
37467: PUSH
37468: LD_INT 10
37470: PUSH
37471: LD_INT 5
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37479: LD_VAR 0 1
37483: PPUSH
37484: LD_INT 5
37486: PPUSH
37487: CALL_OW 321
37491: PUSH
37492: LD_INT 2
37494: EQUAL
37495: IFFALSE 37512
// bpoints := bpoints * 1.8 ;
37497: LD_ADDR_VAR 0 10
37501: PUSH
37502: LD_VAR 0 10
37506: PUSH
37507: LD_REAL  1.80000000000000E+0000
37510: MUL
37511: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37512: LD_VAR 0 6
37516: PPUSH
37517: CALL_OW 257
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: LD_INT 3
37530: PUSH
37531: LD_INT 4
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: IN
37540: PUSH
37541: LD_VAR 0 1
37545: PPUSH
37546: LD_INT 51
37548: PPUSH
37549: CALL_OW 321
37553: PUSH
37554: LD_INT 2
37556: EQUAL
37557: AND
37558: IFFALSE 37575
// bpoints := bpoints * 1.2 ;
37560: LD_ADDR_VAR 0 10
37564: PUSH
37565: LD_VAR 0 10
37569: PUSH
37570: LD_REAL  1.20000000000000E+0000
37573: MUL
37574: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37575: LD_VAR 0 6
37579: PPUSH
37580: CALL_OW 257
37584: PUSH
37585: LD_INT 5
37587: PUSH
37588: LD_INT 7
37590: PUSH
37591: LD_INT 9
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: IN
37599: PUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: LD_INT 52
37607: PPUSH
37608: CALL_OW 321
37612: PUSH
37613: LD_INT 2
37615: EQUAL
37616: AND
37617: IFFALSE 37634
// bpoints := bpoints * 1.5 ;
37619: LD_ADDR_VAR 0 10
37623: PUSH
37624: LD_VAR 0 10
37628: PUSH
37629: LD_REAL  1.50000000000000E+0000
37632: MUL
37633: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37634: LD_VAR 0 1
37638: PPUSH
37639: LD_INT 66
37641: PPUSH
37642: CALL_OW 321
37646: PUSH
37647: LD_INT 2
37649: EQUAL
37650: IFFALSE 37667
// bpoints := bpoints * 1.1 ;
37652: LD_ADDR_VAR 0 10
37656: PUSH
37657: LD_VAR 0 10
37661: PUSH
37662: LD_REAL  1.10000000000000E+0000
37665: MUL
37666: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37667: LD_ADDR_VAR 0 10
37671: PUSH
37672: LD_VAR 0 10
37676: PUSH
37677: LD_VAR 0 6
37681: PPUSH
37682: LD_INT 1
37684: PPUSH
37685: CALL_OW 259
37689: PUSH
37690: LD_REAL  1.15000000000000E+0000
37693: MUL
37694: MUL
37695: ST_TO_ADDR
// end ; unit_vehicle :
37696: GO 38524
37698: LD_INT 2
37700: DOUBLE
37701: EQUAL
37702: IFTRUE 37706
37704: GO 38512
37706: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37707: LD_VAR 0 6
37711: PPUSH
37712: CALL_OW 264
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: LD_INT 42
37722: PUSH
37723: LD_INT 24
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: IN
37731: IFFALSE 37752
// points := [ 25 , 5 , 3 ] ;
37733: LD_ADDR_VAR 0 9
37737: PUSH
37738: LD_INT 25
37740: PUSH
37741: LD_INT 5
37743: PUSH
37744: LD_INT 3
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: LIST
37751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37752: LD_VAR 0 6
37756: PPUSH
37757: CALL_OW 264
37761: PUSH
37762: LD_INT 4
37764: PUSH
37765: LD_INT 43
37767: PUSH
37768: LD_INT 25
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: IN
37776: IFFALSE 37797
// points := [ 40 , 15 , 5 ] ;
37778: LD_ADDR_VAR 0 9
37782: PUSH
37783: LD_INT 40
37785: PUSH
37786: LD_INT 15
37788: PUSH
37789: LD_INT 5
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37797: LD_VAR 0 6
37801: PPUSH
37802: CALL_OW 264
37806: PUSH
37807: LD_INT 3
37809: PUSH
37810: LD_INT 23
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: IN
37817: IFFALSE 37838
// points := [ 7 , 25 , 8 ] ;
37819: LD_ADDR_VAR 0 9
37823: PUSH
37824: LD_INT 7
37826: PUSH
37827: LD_INT 25
37829: PUSH
37830: LD_INT 8
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: LIST
37837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37838: LD_VAR 0 6
37842: PPUSH
37843: CALL_OW 264
37847: PUSH
37848: LD_INT 5
37850: PUSH
37851: LD_INT 27
37853: PUSH
37854: LD_INT 44
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: LIST
37861: IN
37862: IFFALSE 37883
// points := [ 14 , 50 , 16 ] ;
37864: LD_ADDR_VAR 0 9
37868: PUSH
37869: LD_INT 14
37871: PUSH
37872: LD_INT 50
37874: PUSH
37875: LD_INT 16
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: LIST
37882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37883: LD_VAR 0 6
37887: PPUSH
37888: CALL_OW 264
37892: PUSH
37893: LD_INT 6
37895: PUSH
37896: LD_INT 46
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: IN
37903: IFFALSE 37924
// points := [ 32 , 120 , 70 ] ;
37905: LD_ADDR_VAR 0 9
37909: PUSH
37910: LD_INT 32
37912: PUSH
37913: LD_INT 120
37915: PUSH
37916: LD_INT 70
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: LIST
37923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37924: LD_VAR 0 6
37928: PPUSH
37929: CALL_OW 264
37933: PUSH
37934: LD_INT 7
37936: PUSH
37937: LD_INT 28
37939: PUSH
37940: LD_INT 45
37942: PUSH
37943: LD_INT 92
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: IN
37952: IFFALSE 37973
// points := [ 35 , 20 , 45 ] ;
37954: LD_ADDR_VAR 0 9
37958: PUSH
37959: LD_INT 35
37961: PUSH
37962: LD_INT 20
37964: PUSH
37965: LD_INT 45
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: LIST
37972: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37973: LD_VAR 0 6
37977: PPUSH
37978: CALL_OW 264
37982: PUSH
37983: LD_INT 47
37985: PUSH
37986: EMPTY
37987: LIST
37988: IN
37989: IFFALSE 38010
// points := [ 67 , 45 , 75 ] ;
37991: LD_ADDR_VAR 0 9
37995: PUSH
37996: LD_INT 67
37998: PUSH
37999: LD_INT 45
38001: PUSH
38002: LD_INT 75
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38010: LD_VAR 0 6
38014: PPUSH
38015: CALL_OW 264
38019: PUSH
38020: LD_INT 26
38022: PUSH
38023: EMPTY
38024: LIST
38025: IN
38026: IFFALSE 38047
// points := [ 120 , 30 , 80 ] ;
38028: LD_ADDR_VAR 0 9
38032: PUSH
38033: LD_INT 120
38035: PUSH
38036: LD_INT 30
38038: PUSH
38039: LD_INT 80
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38047: LD_VAR 0 6
38051: PPUSH
38052: CALL_OW 264
38056: PUSH
38057: LD_INT 22
38059: PUSH
38060: EMPTY
38061: LIST
38062: IN
38063: IFFALSE 38084
// points := [ 40 , 1 , 1 ] ;
38065: LD_ADDR_VAR 0 9
38069: PUSH
38070: LD_INT 40
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: LIST
38083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38084: LD_VAR 0 6
38088: PPUSH
38089: CALL_OW 264
38093: PUSH
38094: LD_INT 29
38096: PUSH
38097: EMPTY
38098: LIST
38099: IN
38100: IFFALSE 38121
// points := [ 70 , 200 , 400 ] ;
38102: LD_ADDR_VAR 0 9
38106: PUSH
38107: LD_INT 70
38109: PUSH
38110: LD_INT 200
38112: PUSH
38113: LD_INT 400
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38121: LD_VAR 0 6
38125: PPUSH
38126: CALL_OW 264
38130: PUSH
38131: LD_INT 14
38133: PUSH
38134: LD_INT 53
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: IN
38141: IFFALSE 38162
// points := [ 40 , 10 , 20 ] ;
38143: LD_ADDR_VAR 0 9
38147: PUSH
38148: LD_INT 40
38150: PUSH
38151: LD_INT 10
38153: PUSH
38154: LD_INT 20
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38162: LD_VAR 0 6
38166: PPUSH
38167: CALL_OW 264
38171: PUSH
38172: LD_INT 9
38174: PUSH
38175: EMPTY
38176: LIST
38177: IN
38178: IFFALSE 38199
// points := [ 5 , 70 , 20 ] ;
38180: LD_ADDR_VAR 0 9
38184: PUSH
38185: LD_INT 5
38187: PUSH
38188: LD_INT 70
38190: PUSH
38191: LD_INT 20
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38199: LD_VAR 0 6
38203: PPUSH
38204: CALL_OW 264
38208: PUSH
38209: LD_INT 10
38211: PUSH
38212: EMPTY
38213: LIST
38214: IN
38215: IFFALSE 38236
// points := [ 35 , 110 , 70 ] ;
38217: LD_ADDR_VAR 0 9
38221: PUSH
38222: LD_INT 35
38224: PUSH
38225: LD_INT 110
38227: PUSH
38228: LD_INT 70
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38236: LD_VAR 0 6
38240: PPUSH
38241: CALL_OW 265
38245: PUSH
38246: LD_INT 25
38248: EQUAL
38249: IFFALSE 38270
// points := [ 80 , 65 , 100 ] ;
38251: LD_ADDR_VAR 0 9
38255: PUSH
38256: LD_INT 80
38258: PUSH
38259: LD_INT 65
38261: PUSH
38262: LD_INT 100
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38270: LD_VAR 0 6
38274: PPUSH
38275: CALL_OW 263
38279: PUSH
38280: LD_INT 1
38282: EQUAL
38283: IFFALSE 38318
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38285: LD_ADDR_VAR 0 10
38289: PUSH
38290: LD_VAR 0 10
38294: PUSH
38295: LD_VAR 0 6
38299: PPUSH
38300: CALL_OW 311
38304: PPUSH
38305: LD_INT 3
38307: PPUSH
38308: CALL_OW 259
38312: PUSH
38313: LD_INT 4
38315: MUL
38316: MUL
38317: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38318: LD_VAR 0 6
38322: PPUSH
38323: CALL_OW 263
38327: PUSH
38328: LD_INT 2
38330: EQUAL
38331: IFFALSE 38382
// begin j := IsControledBy ( i ) ;
38333: LD_ADDR_VAR 0 7
38337: PUSH
38338: LD_VAR 0 6
38342: PPUSH
38343: CALL_OW 312
38347: ST_TO_ADDR
// if j then
38348: LD_VAR 0 7
38352: IFFALSE 38382
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38354: LD_ADDR_VAR 0 10
38358: PUSH
38359: LD_VAR 0 10
38363: PUSH
38364: LD_VAR 0 7
38368: PPUSH
38369: LD_INT 3
38371: PPUSH
38372: CALL_OW 259
38376: PUSH
38377: LD_INT 3
38379: MUL
38380: MUL
38381: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38382: LD_VAR 0 6
38386: PPUSH
38387: CALL_OW 264
38391: PUSH
38392: LD_INT 5
38394: PUSH
38395: LD_INT 6
38397: PUSH
38398: LD_INT 46
38400: PUSH
38401: LD_INT 44
38403: PUSH
38404: LD_INT 47
38406: PUSH
38407: LD_INT 45
38409: PUSH
38410: LD_INT 28
38412: PUSH
38413: LD_INT 7
38415: PUSH
38416: LD_INT 27
38418: PUSH
38419: LD_INT 29
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: IN
38434: PUSH
38435: LD_VAR 0 1
38439: PPUSH
38440: LD_INT 52
38442: PPUSH
38443: CALL_OW 321
38447: PUSH
38448: LD_INT 2
38450: EQUAL
38451: AND
38452: IFFALSE 38469
// bpoints := bpoints * 1.2 ;
38454: LD_ADDR_VAR 0 10
38458: PUSH
38459: LD_VAR 0 10
38463: PUSH
38464: LD_REAL  1.20000000000000E+0000
38467: MUL
38468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38469: LD_VAR 0 6
38473: PPUSH
38474: CALL_OW 264
38478: PUSH
38479: LD_INT 6
38481: PUSH
38482: LD_INT 46
38484: PUSH
38485: LD_INT 47
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: LIST
38492: IN
38493: IFFALSE 38510
// bpoints := bpoints * 1.2 ;
38495: LD_ADDR_VAR 0 10
38499: PUSH
38500: LD_VAR 0 10
38504: PUSH
38505: LD_REAL  1.20000000000000E+0000
38508: MUL
38509: ST_TO_ADDR
// end ; unit_building :
38510: GO 38524
38512: LD_INT 3
38514: DOUBLE
38515: EQUAL
38516: IFTRUE 38520
38518: GO 38523
38520: POP
// ; end ;
38521: GO 38524
38523: POP
// for j = 1 to 3 do
38524: LD_ADDR_VAR 0 7
38528: PUSH
38529: DOUBLE
38530: LD_INT 1
38532: DEC
38533: ST_TO_ADDR
38534: LD_INT 3
38536: PUSH
38537: FOR_TO
38538: IFFALSE 38591
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38540: LD_ADDR_VAR 0 5
38544: PUSH
38545: LD_VAR 0 5
38549: PPUSH
38550: LD_VAR 0 7
38554: PPUSH
38555: LD_VAR 0 5
38559: PUSH
38560: LD_VAR 0 7
38564: ARRAY
38565: PUSH
38566: LD_VAR 0 9
38570: PUSH
38571: LD_VAR 0 7
38575: ARRAY
38576: PUSH
38577: LD_VAR 0 10
38581: MUL
38582: PLUS
38583: PPUSH
38584: CALL_OW 1
38588: ST_TO_ADDR
38589: GO 38537
38591: POP
38592: POP
// end ;
38593: GO 37072
38595: POP
38596: POP
// result := Replace ( result , 4 , tmp ) ;
38597: LD_ADDR_VAR 0 5
38601: PUSH
38602: LD_VAR 0 5
38606: PPUSH
38607: LD_INT 4
38609: PPUSH
38610: LD_VAR 0 8
38614: PPUSH
38615: CALL_OW 1
38619: ST_TO_ADDR
// end ;
38620: LD_VAR 0 5
38624: RET
// export function DangerAtRange ( unit , range ) ; begin
38625: LD_INT 0
38627: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38628: LD_ADDR_VAR 0 3
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 255
38642: PPUSH
38643: LD_VAR 0 1
38647: PPUSH
38648: CALL_OW 250
38652: PPUSH
38653: LD_VAR 0 1
38657: PPUSH
38658: CALL_OW 251
38662: PPUSH
38663: LD_VAR 0 2
38667: PPUSH
38668: CALL 36924 0 4
38672: ST_TO_ADDR
// end ;
38673: LD_VAR 0 3
38677: RET
// export function DangerInArea ( side , area ) ; begin
38678: LD_INT 0
38680: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38681: LD_ADDR_VAR 0 3
38685: PUSH
38686: LD_VAR 0 2
38690: PPUSH
38691: LD_INT 81
38693: PUSH
38694: LD_VAR 0 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PPUSH
38703: CALL_OW 70
38707: ST_TO_ADDR
// end ;
38708: LD_VAR 0 3
38712: RET
// export function IsExtension ( b ) ; begin
38713: LD_INT 0
38715: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38716: LD_ADDR_VAR 0 2
38720: PUSH
38721: LD_VAR 0 1
38725: PUSH
38726: LD_INT 23
38728: PUSH
38729: LD_INT 20
38731: PUSH
38732: LD_INT 22
38734: PUSH
38735: LD_INT 17
38737: PUSH
38738: LD_INT 24
38740: PUSH
38741: LD_INT 21
38743: PUSH
38744: LD_INT 19
38746: PUSH
38747: LD_INT 16
38749: PUSH
38750: LD_INT 25
38752: PUSH
38753: LD_INT 18
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: IN
38768: ST_TO_ADDR
// end ;
38769: LD_VAR 0 2
38773: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38774: LD_INT 0
38776: PPUSH
38777: PPUSH
38778: PPUSH
// result := [ ] ;
38779: LD_ADDR_VAR 0 4
38783: PUSH
38784: EMPTY
38785: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38786: LD_ADDR_VAR 0 5
38790: PUSH
38791: LD_VAR 0 2
38795: PPUSH
38796: LD_INT 21
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PPUSH
38806: CALL_OW 70
38810: ST_TO_ADDR
// if not tmp then
38811: LD_VAR 0 5
38815: NOT
38816: IFFALSE 38820
// exit ;
38818: GO 38884
// if checkLink then
38820: LD_VAR 0 3
38824: IFFALSE 38874
// begin for i in tmp do
38826: LD_ADDR_VAR 0 6
38830: PUSH
38831: LD_VAR 0 5
38835: PUSH
38836: FOR_IN
38837: IFFALSE 38872
// if GetBase ( i ) <> base then
38839: LD_VAR 0 6
38843: PPUSH
38844: CALL_OW 274
38848: PUSH
38849: LD_VAR 0 1
38853: NONEQUAL
38854: IFFALSE 38870
// ComLinkToBase ( base , i ) ;
38856: LD_VAR 0 1
38860: PPUSH
38861: LD_VAR 0 6
38865: PPUSH
38866: CALL_OW 169
38870: GO 38836
38872: POP
38873: POP
// end ; result := tmp ;
38874: LD_ADDR_VAR 0 4
38878: PUSH
38879: LD_VAR 0 5
38883: ST_TO_ADDR
// end ;
38884: LD_VAR 0 4
38888: RET
// export function ComComplete ( units , b ) ; var i ; begin
38889: LD_INT 0
38891: PPUSH
38892: PPUSH
// if not units then
38893: LD_VAR 0 1
38897: NOT
38898: IFFALSE 38902
// exit ;
38900: GO 38992
// for i in units do
38902: LD_ADDR_VAR 0 4
38906: PUSH
38907: LD_VAR 0 1
38911: PUSH
38912: FOR_IN
38913: IFFALSE 38990
// if BuildingStatus ( b ) = bs_build then
38915: LD_VAR 0 2
38919: PPUSH
38920: CALL_OW 461
38924: PUSH
38925: LD_INT 1
38927: EQUAL
38928: IFFALSE 38988
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38930: LD_VAR 0 4
38934: PPUSH
38935: LD_STRING h
38937: PUSH
38938: LD_VAR 0 2
38942: PPUSH
38943: CALL_OW 250
38947: PUSH
38948: LD_VAR 0 2
38952: PPUSH
38953: CALL_OW 251
38957: PUSH
38958: LD_VAR 0 2
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: PUSH
38981: EMPTY
38982: LIST
38983: PPUSH
38984: CALL_OW 446
38988: GO 38912
38990: POP
38991: POP
// end ;
38992: LD_VAR 0 3
38996: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38997: LD_INT 0
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
39003: PPUSH
39004: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39005: LD_VAR 0 1
39009: NOT
39010: PUSH
39011: LD_VAR 0 1
39015: PPUSH
39016: CALL_OW 263
39020: PUSH
39021: LD_INT 2
39023: NONEQUAL
39024: OR
39025: IFFALSE 39029
// exit ;
39027: GO 39345
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39029: LD_ADDR_VAR 0 6
39033: PUSH
39034: LD_INT 22
39036: PUSH
39037: LD_VAR 0 1
39041: PPUSH
39042: CALL_OW 255
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: LD_INT 30
39056: PUSH
39057: LD_INT 36
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 34
39066: PUSH
39067: LD_INT 31
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PPUSH
39083: CALL_OW 69
39087: ST_TO_ADDR
// if not tmp then
39088: LD_VAR 0 6
39092: NOT
39093: IFFALSE 39097
// exit ;
39095: GO 39345
// result := [ ] ;
39097: LD_ADDR_VAR 0 2
39101: PUSH
39102: EMPTY
39103: ST_TO_ADDR
// for i in tmp do
39104: LD_ADDR_VAR 0 3
39108: PUSH
39109: LD_VAR 0 6
39113: PUSH
39114: FOR_IN
39115: IFFALSE 39186
// begin t := UnitsInside ( i ) ;
39117: LD_ADDR_VAR 0 4
39121: PUSH
39122: LD_VAR 0 3
39126: PPUSH
39127: CALL_OW 313
39131: ST_TO_ADDR
// if t then
39132: LD_VAR 0 4
39136: IFFALSE 39184
// for j in t do
39138: LD_ADDR_VAR 0 7
39142: PUSH
39143: LD_VAR 0 4
39147: PUSH
39148: FOR_IN
39149: IFFALSE 39182
// result := Replace ( result , result + 1 , j ) ;
39151: LD_ADDR_VAR 0 2
39155: PUSH
39156: LD_VAR 0 2
39160: PPUSH
39161: LD_VAR 0 2
39165: PUSH
39166: LD_INT 1
39168: PLUS
39169: PPUSH
39170: LD_VAR 0 7
39174: PPUSH
39175: CALL_OW 1
39179: ST_TO_ADDR
39180: GO 39148
39182: POP
39183: POP
// end ;
39184: GO 39114
39186: POP
39187: POP
// if not result then
39188: LD_VAR 0 2
39192: NOT
39193: IFFALSE 39197
// exit ;
39195: GO 39345
// mech := result [ 1 ] ;
39197: LD_ADDR_VAR 0 5
39201: PUSH
39202: LD_VAR 0 2
39206: PUSH
39207: LD_INT 1
39209: ARRAY
39210: ST_TO_ADDR
// if result > 1 then
39211: LD_VAR 0 2
39215: PUSH
39216: LD_INT 1
39218: GREATER
39219: IFFALSE 39331
// begin for i = 2 to result do
39221: LD_ADDR_VAR 0 3
39225: PUSH
39226: DOUBLE
39227: LD_INT 2
39229: DEC
39230: ST_TO_ADDR
39231: LD_VAR 0 2
39235: PUSH
39236: FOR_TO
39237: IFFALSE 39329
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39239: LD_ADDR_VAR 0 4
39243: PUSH
39244: LD_VAR 0 2
39248: PUSH
39249: LD_VAR 0 3
39253: ARRAY
39254: PPUSH
39255: LD_INT 3
39257: PPUSH
39258: CALL_OW 259
39262: PUSH
39263: LD_VAR 0 2
39267: PUSH
39268: LD_VAR 0 3
39272: ARRAY
39273: PPUSH
39274: CALL_OW 432
39278: MINUS
39279: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39280: LD_VAR 0 4
39284: PUSH
39285: LD_VAR 0 5
39289: PPUSH
39290: LD_INT 3
39292: PPUSH
39293: CALL_OW 259
39297: PUSH
39298: LD_VAR 0 5
39302: PPUSH
39303: CALL_OW 432
39307: MINUS
39308: GREATEREQUAL
39309: IFFALSE 39327
// mech := result [ i ] ;
39311: LD_ADDR_VAR 0 5
39315: PUSH
39316: LD_VAR 0 2
39320: PUSH
39321: LD_VAR 0 3
39325: ARRAY
39326: ST_TO_ADDR
// end ;
39327: GO 39236
39329: POP
39330: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39331: LD_VAR 0 1
39335: PPUSH
39336: LD_VAR 0 5
39340: PPUSH
39341: CALL_OW 135
// end ;
39345: LD_VAR 0 2
39349: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39350: LD_INT 0
39352: PPUSH
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
39360: PPUSH
39361: PPUSH
39362: PPUSH
39363: PPUSH
39364: PPUSH
// result := [ ] ;
39365: LD_ADDR_VAR 0 7
39369: PUSH
39370: EMPTY
39371: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39372: LD_VAR 0 1
39376: PPUSH
39377: CALL_OW 266
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: IN
39392: NOT
39393: IFFALSE 39397
// exit ;
39395: GO 41031
// if name then
39397: LD_VAR 0 3
39401: IFFALSE 39417
// SetBName ( base_dep , name ) ;
39403: LD_VAR 0 1
39407: PPUSH
39408: LD_VAR 0 3
39412: PPUSH
39413: CALL_OW 500
// base := GetBase ( base_dep ) ;
39417: LD_ADDR_VAR 0 15
39421: PUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 274
39431: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39432: LD_ADDR_VAR 0 16
39436: PUSH
39437: LD_VAR 0 1
39441: PPUSH
39442: CALL_OW 255
39446: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39447: LD_ADDR_VAR 0 17
39451: PUSH
39452: LD_VAR 0 1
39456: PPUSH
39457: CALL_OW 248
39461: ST_TO_ADDR
// if sources then
39462: LD_VAR 0 5
39466: IFFALSE 39513
// for i = 1 to 3 do
39468: LD_ADDR_VAR 0 8
39472: PUSH
39473: DOUBLE
39474: LD_INT 1
39476: DEC
39477: ST_TO_ADDR
39478: LD_INT 3
39480: PUSH
39481: FOR_TO
39482: IFFALSE 39511
// AddResourceType ( base , i , sources [ i ] ) ;
39484: LD_VAR 0 15
39488: PPUSH
39489: LD_VAR 0 8
39493: PPUSH
39494: LD_VAR 0 5
39498: PUSH
39499: LD_VAR 0 8
39503: ARRAY
39504: PPUSH
39505: CALL_OW 276
39509: GO 39481
39511: POP
39512: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39513: LD_ADDR_VAR 0 18
39517: PUSH
39518: LD_VAR 0 15
39522: PPUSH
39523: LD_VAR 0 2
39527: PPUSH
39528: LD_INT 1
39530: PPUSH
39531: CALL 38774 0 3
39535: ST_TO_ADDR
// InitHc ;
39536: CALL_OW 19
// InitUc ;
39540: CALL_OW 18
// uc_side := side ;
39544: LD_ADDR_OWVAR 20
39548: PUSH
39549: LD_VAR 0 16
39553: ST_TO_ADDR
// uc_nation := nation ;
39554: LD_ADDR_OWVAR 21
39558: PUSH
39559: LD_VAR 0 17
39563: ST_TO_ADDR
// if buildings then
39564: LD_VAR 0 18
39568: IFFALSE 40890
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39570: LD_ADDR_VAR 0 19
39574: PUSH
39575: LD_VAR 0 18
39579: PPUSH
39580: LD_INT 2
39582: PUSH
39583: LD_INT 30
39585: PUSH
39586: LD_INT 29
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 30
39595: PUSH
39596: LD_INT 30
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: PPUSH
39608: CALL_OW 72
39612: ST_TO_ADDR
// if tmp then
39613: LD_VAR 0 19
39617: IFFALSE 39665
// for i in tmp do
39619: LD_ADDR_VAR 0 8
39623: PUSH
39624: LD_VAR 0 19
39628: PUSH
39629: FOR_IN
39630: IFFALSE 39663
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39632: LD_VAR 0 8
39636: PPUSH
39637: CALL_OW 250
39641: PPUSH
39642: LD_VAR 0 8
39646: PPUSH
39647: CALL_OW 251
39651: PPUSH
39652: LD_VAR 0 16
39656: PPUSH
39657: CALL_OW 441
39661: GO 39629
39663: POP
39664: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39665: LD_VAR 0 18
39669: PPUSH
39670: LD_INT 2
39672: PUSH
39673: LD_INT 30
39675: PUSH
39676: LD_INT 32
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 30
39685: PUSH
39686: LD_INT 33
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: PPUSH
39698: CALL_OW 72
39702: IFFALSE 39790
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39704: LD_ADDR_VAR 0 8
39708: PUSH
39709: LD_VAR 0 18
39713: PPUSH
39714: LD_INT 2
39716: PUSH
39717: LD_INT 30
39719: PUSH
39720: LD_INT 32
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 30
39729: PUSH
39730: LD_INT 33
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: PPUSH
39742: CALL_OW 72
39746: PUSH
39747: FOR_IN
39748: IFFALSE 39788
// begin if not GetBWeapon ( i ) then
39750: LD_VAR 0 8
39754: PPUSH
39755: CALL_OW 269
39759: NOT
39760: IFFALSE 39786
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39762: LD_VAR 0 8
39766: PPUSH
39767: LD_VAR 0 8
39771: PPUSH
39772: LD_VAR 0 2
39776: PPUSH
39777: CALL 41036 0 2
39781: PPUSH
39782: CALL_OW 431
// end ;
39786: GO 39747
39788: POP
39789: POP
// end ; for i = 1 to personel do
39790: LD_ADDR_VAR 0 8
39794: PUSH
39795: DOUBLE
39796: LD_INT 1
39798: DEC
39799: ST_TO_ADDR
39800: LD_VAR 0 6
39804: PUSH
39805: FOR_TO
39806: IFFALSE 40870
// begin if i > 4 then
39808: LD_VAR 0 8
39812: PUSH
39813: LD_INT 4
39815: GREATER
39816: IFFALSE 39820
// break ;
39818: GO 40870
// case i of 1 :
39820: LD_VAR 0 8
39824: PUSH
39825: LD_INT 1
39827: DOUBLE
39828: EQUAL
39829: IFTRUE 39833
39831: GO 39913
39833: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39834: LD_ADDR_VAR 0 12
39838: PUSH
39839: LD_VAR 0 18
39843: PPUSH
39844: LD_INT 22
39846: PUSH
39847: LD_VAR 0 16
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 58
39858: PUSH
39859: EMPTY
39860: LIST
39861: PUSH
39862: LD_INT 2
39864: PUSH
39865: LD_INT 30
39867: PUSH
39868: LD_INT 32
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 30
39877: PUSH
39878: LD_INT 4
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 30
39887: PUSH
39888: LD_INT 5
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: LIST
39905: PPUSH
39906: CALL_OW 72
39910: ST_TO_ADDR
39911: GO 40135
39913: LD_INT 2
39915: DOUBLE
39916: EQUAL
39917: IFTRUE 39921
39919: GO 39983
39921: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39922: LD_ADDR_VAR 0 12
39926: PUSH
39927: LD_VAR 0 18
39931: PPUSH
39932: LD_INT 22
39934: PUSH
39935: LD_VAR 0 16
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 30
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 30
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PPUSH
39976: CALL_OW 72
39980: ST_TO_ADDR
39981: GO 40135
39983: LD_INT 3
39985: DOUBLE
39986: EQUAL
39987: IFTRUE 39991
39989: GO 40053
39991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39992: LD_ADDR_VAR 0 12
39996: PUSH
39997: LD_VAR 0 18
40001: PPUSH
40002: LD_INT 22
40004: PUSH
40005: LD_VAR 0 16
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 30
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 30
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: LIST
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PPUSH
40046: CALL_OW 72
40050: ST_TO_ADDR
40051: GO 40135
40053: LD_INT 4
40055: DOUBLE
40056: EQUAL
40057: IFTRUE 40061
40059: GO 40134
40061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40062: LD_ADDR_VAR 0 12
40066: PUSH
40067: LD_VAR 0 18
40071: PPUSH
40072: LD_INT 22
40074: PUSH
40075: LD_VAR 0 16
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: LD_INT 30
40089: PUSH
40090: LD_INT 6
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 30
40099: PUSH
40100: LD_INT 7
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 30
40109: PUSH
40110: LD_INT 8
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PPUSH
40127: CALL_OW 72
40131: ST_TO_ADDR
40132: GO 40135
40134: POP
// if i = 1 then
40135: LD_VAR 0 8
40139: PUSH
40140: LD_INT 1
40142: EQUAL
40143: IFFALSE 40254
// begin tmp := [ ] ;
40145: LD_ADDR_VAR 0 19
40149: PUSH
40150: EMPTY
40151: ST_TO_ADDR
// for j in f do
40152: LD_ADDR_VAR 0 9
40156: PUSH
40157: LD_VAR 0 12
40161: PUSH
40162: FOR_IN
40163: IFFALSE 40236
// if GetBType ( j ) = b_bunker then
40165: LD_VAR 0 9
40169: PPUSH
40170: CALL_OW 266
40174: PUSH
40175: LD_INT 32
40177: EQUAL
40178: IFFALSE 40205
// tmp := Insert ( tmp , 1 , j ) else
40180: LD_ADDR_VAR 0 19
40184: PUSH
40185: LD_VAR 0 19
40189: PPUSH
40190: LD_INT 1
40192: PPUSH
40193: LD_VAR 0 9
40197: PPUSH
40198: CALL_OW 2
40202: ST_TO_ADDR
40203: GO 40234
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40205: LD_ADDR_VAR 0 19
40209: PUSH
40210: LD_VAR 0 19
40214: PPUSH
40215: LD_VAR 0 19
40219: PUSH
40220: LD_INT 1
40222: PLUS
40223: PPUSH
40224: LD_VAR 0 9
40228: PPUSH
40229: CALL_OW 2
40233: ST_TO_ADDR
40234: GO 40162
40236: POP
40237: POP
// if tmp then
40238: LD_VAR 0 19
40242: IFFALSE 40254
// f := tmp ;
40244: LD_ADDR_VAR 0 12
40248: PUSH
40249: LD_VAR 0 19
40253: ST_TO_ADDR
// end ; x := personel [ i ] ;
40254: LD_ADDR_VAR 0 13
40258: PUSH
40259: LD_VAR 0 6
40263: PUSH
40264: LD_VAR 0 8
40268: ARRAY
40269: ST_TO_ADDR
// if x = - 1 then
40270: LD_VAR 0 13
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: EQUAL
40279: IFFALSE 40488
// begin for j in f do
40281: LD_ADDR_VAR 0 9
40285: PUSH
40286: LD_VAR 0 12
40290: PUSH
40291: FOR_IN
40292: IFFALSE 40484
// repeat InitHc ;
40294: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40298: LD_VAR 0 9
40302: PPUSH
40303: CALL_OW 266
40307: PUSH
40308: LD_INT 5
40310: EQUAL
40311: IFFALSE 40381
// begin if UnitsInside ( j ) < 3 then
40313: LD_VAR 0 9
40317: PPUSH
40318: CALL_OW 313
40322: PUSH
40323: LD_INT 3
40325: LESS
40326: IFFALSE 40362
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40328: LD_INT 0
40330: PPUSH
40331: LD_INT 5
40333: PUSH
40334: LD_INT 8
40336: PUSH
40337: LD_INT 9
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: PUSH
40345: LD_VAR 0 17
40349: ARRAY
40350: PPUSH
40351: LD_VAR 0 4
40355: PPUSH
40356: CALL_OW 380
40360: GO 40379
// PrepareHuman ( false , i , skill ) ;
40362: LD_INT 0
40364: PPUSH
40365: LD_VAR 0 8
40369: PPUSH
40370: LD_VAR 0 4
40374: PPUSH
40375: CALL_OW 380
// end else
40379: GO 40398
// PrepareHuman ( false , i , skill ) ;
40381: LD_INT 0
40383: PPUSH
40384: LD_VAR 0 8
40388: PPUSH
40389: LD_VAR 0 4
40393: PPUSH
40394: CALL_OW 380
// un := CreateHuman ;
40398: LD_ADDR_VAR 0 14
40402: PUSH
40403: CALL_OW 44
40407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40408: LD_ADDR_VAR 0 7
40412: PUSH
40413: LD_VAR 0 7
40417: PPUSH
40418: LD_INT 1
40420: PPUSH
40421: LD_VAR 0 14
40425: PPUSH
40426: CALL_OW 2
40430: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40431: LD_VAR 0 14
40435: PPUSH
40436: LD_VAR 0 9
40440: PPUSH
40441: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40445: LD_VAR 0 9
40449: PPUSH
40450: CALL_OW 313
40454: PUSH
40455: LD_INT 6
40457: EQUAL
40458: PUSH
40459: LD_VAR 0 9
40463: PPUSH
40464: CALL_OW 266
40468: PUSH
40469: LD_INT 32
40471: PUSH
40472: LD_INT 31
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: IN
40479: OR
40480: IFFALSE 40294
40482: GO 40291
40484: POP
40485: POP
// end else
40486: GO 40868
// for j = 1 to x do
40488: LD_ADDR_VAR 0 9
40492: PUSH
40493: DOUBLE
40494: LD_INT 1
40496: DEC
40497: ST_TO_ADDR
40498: LD_VAR 0 13
40502: PUSH
40503: FOR_TO
40504: IFFALSE 40866
// begin InitHc ;
40506: CALL_OW 19
// if not f then
40510: LD_VAR 0 12
40514: NOT
40515: IFFALSE 40604
// begin PrepareHuman ( false , i , skill ) ;
40517: LD_INT 0
40519: PPUSH
40520: LD_VAR 0 8
40524: PPUSH
40525: LD_VAR 0 4
40529: PPUSH
40530: CALL_OW 380
// un := CreateHuman ;
40534: LD_ADDR_VAR 0 14
40538: PUSH
40539: CALL_OW 44
40543: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40544: LD_ADDR_VAR 0 7
40548: PUSH
40549: LD_VAR 0 7
40553: PPUSH
40554: LD_INT 1
40556: PPUSH
40557: LD_VAR 0 14
40561: PPUSH
40562: CALL_OW 2
40566: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40567: LD_VAR 0 14
40571: PPUSH
40572: LD_VAR 0 1
40576: PPUSH
40577: CALL_OW 250
40581: PPUSH
40582: LD_VAR 0 1
40586: PPUSH
40587: CALL_OW 251
40591: PPUSH
40592: LD_INT 10
40594: PPUSH
40595: LD_INT 0
40597: PPUSH
40598: CALL_OW 50
// continue ;
40602: GO 40503
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40604: LD_VAR 0 12
40608: PUSH
40609: LD_INT 1
40611: ARRAY
40612: PPUSH
40613: CALL_OW 313
40617: PUSH
40618: LD_VAR 0 12
40622: PUSH
40623: LD_INT 1
40625: ARRAY
40626: PPUSH
40627: CALL_OW 266
40631: PUSH
40632: LD_INT 32
40634: PUSH
40635: LD_INT 31
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: IN
40642: AND
40643: PUSH
40644: LD_VAR 0 12
40648: PUSH
40649: LD_INT 1
40651: ARRAY
40652: PPUSH
40653: CALL_OW 313
40657: PUSH
40658: LD_INT 6
40660: EQUAL
40661: OR
40662: IFFALSE 40682
// f := Delete ( f , 1 ) ;
40664: LD_ADDR_VAR 0 12
40668: PUSH
40669: LD_VAR 0 12
40673: PPUSH
40674: LD_INT 1
40676: PPUSH
40677: CALL_OW 3
40681: ST_TO_ADDR
// if not f then
40682: LD_VAR 0 12
40686: NOT
40687: IFFALSE 40705
// begin x := x + 2 ;
40689: LD_ADDR_VAR 0 13
40693: PUSH
40694: LD_VAR 0 13
40698: PUSH
40699: LD_INT 2
40701: PLUS
40702: ST_TO_ADDR
// continue ;
40703: GO 40503
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40705: LD_VAR 0 12
40709: PUSH
40710: LD_INT 1
40712: ARRAY
40713: PPUSH
40714: CALL_OW 266
40718: PUSH
40719: LD_INT 5
40721: EQUAL
40722: IFFALSE 40796
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40724: LD_VAR 0 12
40728: PUSH
40729: LD_INT 1
40731: ARRAY
40732: PPUSH
40733: CALL_OW 313
40737: PUSH
40738: LD_INT 3
40740: LESS
40741: IFFALSE 40777
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40743: LD_INT 0
40745: PPUSH
40746: LD_INT 5
40748: PUSH
40749: LD_INT 8
40751: PUSH
40752: LD_INT 9
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: PUSH
40760: LD_VAR 0 17
40764: ARRAY
40765: PPUSH
40766: LD_VAR 0 4
40770: PPUSH
40771: CALL_OW 380
40775: GO 40794
// PrepareHuman ( false , i , skill ) ;
40777: LD_INT 0
40779: PPUSH
40780: LD_VAR 0 8
40784: PPUSH
40785: LD_VAR 0 4
40789: PPUSH
40790: CALL_OW 380
// end else
40794: GO 40813
// PrepareHuman ( false , i , skill ) ;
40796: LD_INT 0
40798: PPUSH
40799: LD_VAR 0 8
40803: PPUSH
40804: LD_VAR 0 4
40808: PPUSH
40809: CALL_OW 380
// un := CreateHuman ;
40813: LD_ADDR_VAR 0 14
40817: PUSH
40818: CALL_OW 44
40822: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40823: LD_ADDR_VAR 0 7
40827: PUSH
40828: LD_VAR 0 7
40832: PPUSH
40833: LD_INT 1
40835: PPUSH
40836: LD_VAR 0 14
40840: PPUSH
40841: CALL_OW 2
40845: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40846: LD_VAR 0 14
40850: PPUSH
40851: LD_VAR 0 12
40855: PUSH
40856: LD_INT 1
40858: ARRAY
40859: PPUSH
40860: CALL_OW 52
// end ;
40864: GO 40503
40866: POP
40867: POP
// end ;
40868: GO 39805
40870: POP
40871: POP
// result := result ^ buildings ;
40872: LD_ADDR_VAR 0 7
40876: PUSH
40877: LD_VAR 0 7
40881: PUSH
40882: LD_VAR 0 18
40886: ADD
40887: ST_TO_ADDR
// end else
40888: GO 41031
// begin for i = 1 to personel do
40890: LD_ADDR_VAR 0 8
40894: PUSH
40895: DOUBLE
40896: LD_INT 1
40898: DEC
40899: ST_TO_ADDR
40900: LD_VAR 0 6
40904: PUSH
40905: FOR_TO
40906: IFFALSE 41029
// begin if i > 4 then
40908: LD_VAR 0 8
40912: PUSH
40913: LD_INT 4
40915: GREATER
40916: IFFALSE 40920
// break ;
40918: GO 41029
// x := personel [ i ] ;
40920: LD_ADDR_VAR 0 13
40924: PUSH
40925: LD_VAR 0 6
40929: PUSH
40930: LD_VAR 0 8
40934: ARRAY
40935: ST_TO_ADDR
// if x = - 1 then
40936: LD_VAR 0 13
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: EQUAL
40945: IFFALSE 40949
// continue ;
40947: GO 40905
// PrepareHuman ( false , i , skill ) ;
40949: LD_INT 0
40951: PPUSH
40952: LD_VAR 0 8
40956: PPUSH
40957: LD_VAR 0 4
40961: PPUSH
40962: CALL_OW 380
// un := CreateHuman ;
40966: LD_ADDR_VAR 0 14
40970: PUSH
40971: CALL_OW 44
40975: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40976: LD_VAR 0 14
40980: PPUSH
40981: LD_VAR 0 1
40985: PPUSH
40986: CALL_OW 250
40990: PPUSH
40991: LD_VAR 0 1
40995: PPUSH
40996: CALL_OW 251
41000: PPUSH
41001: LD_INT 10
41003: PPUSH
41004: LD_INT 0
41006: PPUSH
41007: CALL_OW 50
// result := result ^ un ;
41011: LD_ADDR_VAR 0 7
41015: PUSH
41016: LD_VAR 0 7
41020: PUSH
41021: LD_VAR 0 14
41025: ADD
41026: ST_TO_ADDR
// end ;
41027: GO 40905
41029: POP
41030: POP
// end ; end ;
41031: LD_VAR 0 7
41035: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41036: LD_INT 0
41038: PPUSH
41039: PPUSH
41040: PPUSH
41041: PPUSH
41042: PPUSH
41043: PPUSH
41044: PPUSH
41045: PPUSH
41046: PPUSH
41047: PPUSH
41048: PPUSH
41049: PPUSH
41050: PPUSH
41051: PPUSH
41052: PPUSH
41053: PPUSH
// result := false ;
41054: LD_ADDR_VAR 0 3
41058: PUSH
41059: LD_INT 0
41061: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41062: LD_VAR 0 1
41066: NOT
41067: PUSH
41068: LD_VAR 0 1
41072: PPUSH
41073: CALL_OW 266
41077: PUSH
41078: LD_INT 32
41080: PUSH
41081: LD_INT 33
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: IN
41088: NOT
41089: OR
41090: IFFALSE 41094
// exit ;
41092: GO 42203
// nat := GetNation ( tower ) ;
41094: LD_ADDR_VAR 0 12
41098: PUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 248
41108: ST_TO_ADDR
// side := GetSide ( tower ) ;
41109: LD_ADDR_VAR 0 16
41113: PUSH
41114: LD_VAR 0 1
41118: PPUSH
41119: CALL_OW 255
41123: ST_TO_ADDR
// x := GetX ( tower ) ;
41124: LD_ADDR_VAR 0 10
41128: PUSH
41129: LD_VAR 0 1
41133: PPUSH
41134: CALL_OW 250
41138: ST_TO_ADDR
// y := GetY ( tower ) ;
41139: LD_ADDR_VAR 0 11
41143: PUSH
41144: LD_VAR 0 1
41148: PPUSH
41149: CALL_OW 251
41153: ST_TO_ADDR
// if not x or not y then
41154: LD_VAR 0 10
41158: NOT
41159: PUSH
41160: LD_VAR 0 11
41164: NOT
41165: OR
41166: IFFALSE 41170
// exit ;
41168: GO 42203
// weapon := 0 ;
41170: LD_ADDR_VAR 0 18
41174: PUSH
41175: LD_INT 0
41177: ST_TO_ADDR
// fac_list := [ ] ;
41178: LD_ADDR_VAR 0 17
41182: PUSH
41183: EMPTY
41184: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41185: LD_ADDR_VAR 0 6
41189: PUSH
41190: LD_VAR 0 1
41194: PPUSH
41195: CALL_OW 274
41199: PPUSH
41200: LD_VAR 0 2
41204: PPUSH
41205: LD_INT 0
41207: PPUSH
41208: CALL 38774 0 3
41212: PPUSH
41213: LD_INT 30
41215: PUSH
41216: LD_INT 3
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PPUSH
41223: CALL_OW 72
41227: ST_TO_ADDR
// if not factories then
41228: LD_VAR 0 6
41232: NOT
41233: IFFALSE 41237
// exit ;
41235: GO 42203
// for i in factories do
41237: LD_ADDR_VAR 0 8
41241: PUSH
41242: LD_VAR 0 6
41246: PUSH
41247: FOR_IN
41248: IFFALSE 41273
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41250: LD_ADDR_VAR 0 17
41254: PUSH
41255: LD_VAR 0 17
41259: PUSH
41260: LD_VAR 0 8
41264: PPUSH
41265: CALL_OW 478
41269: UNION
41270: ST_TO_ADDR
41271: GO 41247
41273: POP
41274: POP
// if not fac_list then
41275: LD_VAR 0 17
41279: NOT
41280: IFFALSE 41284
// exit ;
41282: GO 42203
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41284: LD_ADDR_VAR 0 5
41288: PUSH
41289: LD_INT 4
41291: PUSH
41292: LD_INT 5
41294: PUSH
41295: LD_INT 9
41297: PUSH
41298: LD_INT 10
41300: PUSH
41301: LD_INT 6
41303: PUSH
41304: LD_INT 7
41306: PUSH
41307: LD_INT 11
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 27
41321: PUSH
41322: LD_INT 28
41324: PUSH
41325: LD_INT 26
41327: PUSH
41328: LD_INT 30
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 43
41339: PUSH
41340: LD_INT 44
41342: PUSH
41343: LD_INT 46
41345: PUSH
41346: LD_INT 45
41348: PUSH
41349: LD_INT 47
41351: PUSH
41352: LD_INT 49
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: LIST
41367: PUSH
41368: LD_VAR 0 12
41372: ARRAY
41373: ST_TO_ADDR
// list := list isect fac_list ;
41374: LD_ADDR_VAR 0 5
41378: PUSH
41379: LD_VAR 0 5
41383: PUSH
41384: LD_VAR 0 17
41388: ISECT
41389: ST_TO_ADDR
// if not list then
41390: LD_VAR 0 5
41394: NOT
41395: IFFALSE 41399
// exit ;
41397: GO 42203
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41399: LD_VAR 0 12
41403: PUSH
41404: LD_INT 3
41406: EQUAL
41407: PUSH
41408: LD_INT 49
41410: PUSH
41411: LD_VAR 0 5
41415: IN
41416: AND
41417: PUSH
41418: LD_INT 31
41420: PPUSH
41421: LD_VAR 0 16
41425: PPUSH
41426: CALL_OW 321
41430: PUSH
41431: LD_INT 2
41433: EQUAL
41434: AND
41435: IFFALSE 41495
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41437: LD_INT 22
41439: PUSH
41440: LD_VAR 0 16
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 35
41451: PUSH
41452: LD_INT 49
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 91
41461: PUSH
41462: LD_VAR 0 1
41466: PUSH
41467: LD_INT 10
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: LIST
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: LIST
41479: PPUSH
41480: CALL_OW 69
41484: NOT
41485: IFFALSE 41495
// weapon := ru_time_lapser ;
41487: LD_ADDR_VAR 0 18
41491: PUSH
41492: LD_INT 49
41494: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41495: LD_VAR 0 12
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: IN
41510: PUSH
41511: LD_INT 11
41513: PUSH
41514: LD_VAR 0 5
41518: IN
41519: PUSH
41520: LD_INT 30
41522: PUSH
41523: LD_VAR 0 5
41527: IN
41528: OR
41529: AND
41530: PUSH
41531: LD_INT 6
41533: PPUSH
41534: LD_VAR 0 16
41538: PPUSH
41539: CALL_OW 321
41543: PUSH
41544: LD_INT 2
41546: EQUAL
41547: AND
41548: IFFALSE 41713
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41550: LD_INT 22
41552: PUSH
41553: LD_VAR 0 16
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: PUSH
41565: LD_INT 35
41567: PUSH
41568: LD_INT 11
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 35
41577: PUSH
41578: LD_INT 30
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 91
41592: PUSH
41593: LD_VAR 0 1
41597: PUSH
41598: LD_INT 18
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: LIST
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: LIST
41610: PPUSH
41611: CALL_OW 69
41615: NOT
41616: PUSH
41617: LD_INT 22
41619: PUSH
41620: LD_VAR 0 16
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 2
41631: PUSH
41632: LD_INT 30
41634: PUSH
41635: LD_INT 32
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 30
41644: PUSH
41645: LD_INT 33
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 91
41659: PUSH
41660: LD_VAR 0 1
41664: PUSH
41665: LD_INT 12
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: LIST
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: LIST
41677: PUSH
41678: EMPTY
41679: LIST
41680: PPUSH
41681: CALL_OW 69
41685: PUSH
41686: LD_INT 2
41688: GREATER
41689: AND
41690: IFFALSE 41713
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41692: LD_ADDR_VAR 0 18
41696: PUSH
41697: LD_INT 11
41699: PUSH
41700: LD_INT 30
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_VAR 0 12
41711: ARRAY
41712: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41713: LD_VAR 0 18
41717: NOT
41718: PUSH
41719: LD_INT 40
41721: PPUSH
41722: LD_VAR 0 16
41726: PPUSH
41727: CALL_OW 321
41731: PUSH
41732: LD_INT 2
41734: EQUAL
41735: AND
41736: PUSH
41737: LD_INT 7
41739: PUSH
41740: LD_VAR 0 5
41744: IN
41745: PUSH
41746: LD_INT 28
41748: PUSH
41749: LD_VAR 0 5
41753: IN
41754: OR
41755: PUSH
41756: LD_INT 45
41758: PUSH
41759: LD_VAR 0 5
41763: IN
41764: OR
41765: AND
41766: IFFALSE 42020
// begin hex := GetHexInfo ( x , y ) ;
41768: LD_ADDR_VAR 0 4
41772: PUSH
41773: LD_VAR 0 10
41777: PPUSH
41778: LD_VAR 0 11
41782: PPUSH
41783: CALL_OW 546
41787: ST_TO_ADDR
// if hex [ 1 ] then
41788: LD_VAR 0 4
41792: PUSH
41793: LD_INT 1
41795: ARRAY
41796: IFFALSE 41800
// exit ;
41798: GO 42203
// height := hex [ 2 ] ;
41800: LD_ADDR_VAR 0 15
41804: PUSH
41805: LD_VAR 0 4
41809: PUSH
41810: LD_INT 2
41812: ARRAY
41813: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41814: LD_ADDR_VAR 0 14
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: LD_INT 5
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: ST_TO_ADDR
// for i in tmp do
41837: LD_ADDR_VAR 0 8
41841: PUSH
41842: LD_VAR 0 14
41846: PUSH
41847: FOR_IN
41848: IFFALSE 42018
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41850: LD_ADDR_VAR 0 9
41854: PUSH
41855: LD_VAR 0 10
41859: PPUSH
41860: LD_VAR 0 8
41864: PPUSH
41865: LD_INT 5
41867: PPUSH
41868: CALL_OW 272
41872: PUSH
41873: LD_VAR 0 11
41877: PPUSH
41878: LD_VAR 0 8
41882: PPUSH
41883: LD_INT 5
41885: PPUSH
41886: CALL_OW 273
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41895: LD_VAR 0 9
41899: PUSH
41900: LD_INT 1
41902: ARRAY
41903: PPUSH
41904: LD_VAR 0 9
41908: PUSH
41909: LD_INT 2
41911: ARRAY
41912: PPUSH
41913: CALL_OW 488
41917: IFFALSE 42016
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41919: LD_ADDR_VAR 0 4
41923: PUSH
41924: LD_VAR 0 9
41928: PUSH
41929: LD_INT 1
41931: ARRAY
41932: PPUSH
41933: LD_VAR 0 9
41937: PUSH
41938: LD_INT 2
41940: ARRAY
41941: PPUSH
41942: CALL_OW 546
41946: ST_TO_ADDR
// if hex [ 1 ] then
41947: LD_VAR 0 4
41951: PUSH
41952: LD_INT 1
41954: ARRAY
41955: IFFALSE 41959
// continue ;
41957: GO 41847
// h := hex [ 2 ] ;
41959: LD_ADDR_VAR 0 13
41963: PUSH
41964: LD_VAR 0 4
41968: PUSH
41969: LD_INT 2
41971: ARRAY
41972: ST_TO_ADDR
// if h + 7 < height then
41973: LD_VAR 0 13
41977: PUSH
41978: LD_INT 7
41980: PLUS
41981: PUSH
41982: LD_VAR 0 15
41986: LESS
41987: IFFALSE 42016
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41989: LD_ADDR_VAR 0 18
41993: PUSH
41994: LD_INT 7
41996: PUSH
41997: LD_INT 28
41999: PUSH
42000: LD_INT 45
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: LIST
42007: PUSH
42008: LD_VAR 0 12
42012: ARRAY
42013: ST_TO_ADDR
// break ;
42014: GO 42018
// end ; end ; end ;
42016: GO 41847
42018: POP
42019: POP
// end ; if not weapon then
42020: LD_VAR 0 18
42024: NOT
42025: IFFALSE 42085
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42027: LD_ADDR_VAR 0 5
42031: PUSH
42032: LD_VAR 0 5
42036: PUSH
42037: LD_INT 11
42039: PUSH
42040: LD_INT 30
42042: PUSH
42043: LD_INT 49
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: DIFF
42051: ST_TO_ADDR
// if not list then
42052: LD_VAR 0 5
42056: NOT
42057: IFFALSE 42061
// exit ;
42059: GO 42203
// weapon := list [ rand ( 1 , list ) ] ;
42061: LD_ADDR_VAR 0 18
42065: PUSH
42066: LD_VAR 0 5
42070: PUSH
42071: LD_INT 1
42073: PPUSH
42074: LD_VAR 0 5
42078: PPUSH
42079: CALL_OW 12
42083: ARRAY
42084: ST_TO_ADDR
// end ; if weapon then
42085: LD_VAR 0 18
42089: IFFALSE 42203
// begin tmp := CostOfWeapon ( weapon ) ;
42091: LD_ADDR_VAR 0 14
42095: PUSH
42096: LD_VAR 0 18
42100: PPUSH
42101: CALL_OW 451
42105: ST_TO_ADDR
// j := GetBase ( tower ) ;
42106: LD_ADDR_VAR 0 9
42110: PUSH
42111: LD_VAR 0 1
42115: PPUSH
42116: CALL_OW 274
42120: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42121: LD_VAR 0 9
42125: PPUSH
42126: LD_INT 1
42128: PPUSH
42129: CALL_OW 275
42133: PUSH
42134: LD_VAR 0 14
42138: PUSH
42139: LD_INT 1
42141: ARRAY
42142: GREATEREQUAL
42143: PUSH
42144: LD_VAR 0 9
42148: PPUSH
42149: LD_INT 2
42151: PPUSH
42152: CALL_OW 275
42156: PUSH
42157: LD_VAR 0 14
42161: PUSH
42162: LD_INT 2
42164: ARRAY
42165: GREATEREQUAL
42166: AND
42167: PUSH
42168: LD_VAR 0 9
42172: PPUSH
42173: LD_INT 3
42175: PPUSH
42176: CALL_OW 275
42180: PUSH
42181: LD_VAR 0 14
42185: PUSH
42186: LD_INT 3
42188: ARRAY
42189: GREATEREQUAL
42190: AND
42191: IFFALSE 42203
// result := weapon ;
42193: LD_ADDR_VAR 0 3
42197: PUSH
42198: LD_VAR 0 18
42202: ST_TO_ADDR
// end ; end ;
42203: LD_VAR 0 3
42207: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42208: LD_INT 0
42210: PPUSH
42211: PPUSH
// result := true ;
42212: LD_ADDR_VAR 0 3
42216: PUSH
42217: LD_INT 1
42219: ST_TO_ADDR
// if array1 = array2 then
42220: LD_VAR 0 1
42224: PUSH
42225: LD_VAR 0 2
42229: EQUAL
42230: IFFALSE 42290
// begin for i = 1 to array1 do
42232: LD_ADDR_VAR 0 4
42236: PUSH
42237: DOUBLE
42238: LD_INT 1
42240: DEC
42241: ST_TO_ADDR
42242: LD_VAR 0 1
42246: PUSH
42247: FOR_TO
42248: IFFALSE 42286
// if array1 [ i ] <> array2 [ i ] then
42250: LD_VAR 0 1
42254: PUSH
42255: LD_VAR 0 4
42259: ARRAY
42260: PUSH
42261: LD_VAR 0 2
42265: PUSH
42266: LD_VAR 0 4
42270: ARRAY
42271: NONEQUAL
42272: IFFALSE 42284
// begin result := false ;
42274: LD_ADDR_VAR 0 3
42278: PUSH
42279: LD_INT 0
42281: ST_TO_ADDR
// break ;
42282: GO 42286
// end ;
42284: GO 42247
42286: POP
42287: POP
// end else
42288: GO 42298
// result := false ;
42290: LD_ADDR_VAR 0 3
42294: PUSH
42295: LD_INT 0
42297: ST_TO_ADDR
// end ;
42298: LD_VAR 0 3
42302: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42303: LD_INT 0
42305: PPUSH
42306: PPUSH
// if not array1 or not array2 then
42307: LD_VAR 0 1
42311: NOT
42312: PUSH
42313: LD_VAR 0 2
42317: NOT
42318: OR
42319: IFFALSE 42323
// exit ;
42321: GO 42387
// result := true ;
42323: LD_ADDR_VAR 0 3
42327: PUSH
42328: LD_INT 1
42330: ST_TO_ADDR
// for i = 1 to array1 do
42331: LD_ADDR_VAR 0 4
42335: PUSH
42336: DOUBLE
42337: LD_INT 1
42339: DEC
42340: ST_TO_ADDR
42341: LD_VAR 0 1
42345: PUSH
42346: FOR_TO
42347: IFFALSE 42385
// if array1 [ i ] <> array2 [ i ] then
42349: LD_VAR 0 1
42353: PUSH
42354: LD_VAR 0 4
42358: ARRAY
42359: PUSH
42360: LD_VAR 0 2
42364: PUSH
42365: LD_VAR 0 4
42369: ARRAY
42370: NONEQUAL
42371: IFFALSE 42383
// begin result := false ;
42373: LD_ADDR_VAR 0 3
42377: PUSH
42378: LD_INT 0
42380: ST_TO_ADDR
// break ;
42381: GO 42385
// end ;
42383: GO 42346
42385: POP
42386: POP
// end ;
42387: LD_VAR 0 3
42391: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42392: LD_INT 0
42394: PPUSH
42395: PPUSH
42396: PPUSH
// pom := GetBase ( fac ) ;
42397: LD_ADDR_VAR 0 5
42401: PUSH
42402: LD_VAR 0 1
42406: PPUSH
42407: CALL_OW 274
42411: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42412: LD_ADDR_VAR 0 4
42416: PUSH
42417: LD_VAR 0 2
42421: PUSH
42422: LD_INT 1
42424: ARRAY
42425: PPUSH
42426: LD_VAR 0 2
42430: PUSH
42431: LD_INT 2
42433: ARRAY
42434: PPUSH
42435: LD_VAR 0 2
42439: PUSH
42440: LD_INT 3
42442: ARRAY
42443: PPUSH
42444: LD_VAR 0 2
42448: PUSH
42449: LD_INT 4
42451: ARRAY
42452: PPUSH
42453: CALL_OW 449
42457: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42458: LD_ADDR_VAR 0 3
42462: PUSH
42463: LD_VAR 0 5
42467: PPUSH
42468: LD_INT 1
42470: PPUSH
42471: CALL_OW 275
42475: PUSH
42476: LD_VAR 0 4
42480: PUSH
42481: LD_INT 1
42483: ARRAY
42484: GREATEREQUAL
42485: PUSH
42486: LD_VAR 0 5
42490: PPUSH
42491: LD_INT 2
42493: PPUSH
42494: CALL_OW 275
42498: PUSH
42499: LD_VAR 0 4
42503: PUSH
42504: LD_INT 2
42506: ARRAY
42507: GREATEREQUAL
42508: AND
42509: PUSH
42510: LD_VAR 0 5
42514: PPUSH
42515: LD_INT 3
42517: PPUSH
42518: CALL_OW 275
42522: PUSH
42523: LD_VAR 0 4
42527: PUSH
42528: LD_INT 3
42530: ARRAY
42531: GREATEREQUAL
42532: AND
42533: ST_TO_ADDR
// end ;
42534: LD_VAR 0 3
42538: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42539: LD_INT 0
42541: PPUSH
42542: PPUSH
42543: PPUSH
42544: PPUSH
// pom := GetBase ( building ) ;
42545: LD_ADDR_VAR 0 3
42549: PUSH
42550: LD_VAR 0 1
42554: PPUSH
42555: CALL_OW 274
42559: ST_TO_ADDR
// if not pom then
42560: LD_VAR 0 3
42564: NOT
42565: IFFALSE 42569
// exit ;
42567: GO 42739
// btype := GetBType ( building ) ;
42569: LD_ADDR_VAR 0 5
42573: PUSH
42574: LD_VAR 0 1
42578: PPUSH
42579: CALL_OW 266
42583: ST_TO_ADDR
// if btype = b_armoury then
42584: LD_VAR 0 5
42588: PUSH
42589: LD_INT 4
42591: EQUAL
42592: IFFALSE 42602
// btype := b_barracks ;
42594: LD_ADDR_VAR 0 5
42598: PUSH
42599: LD_INT 5
42601: ST_TO_ADDR
// if btype = b_depot then
42602: LD_VAR 0 5
42606: PUSH
42607: LD_INT 0
42609: EQUAL
42610: IFFALSE 42620
// btype := b_warehouse ;
42612: LD_ADDR_VAR 0 5
42616: PUSH
42617: LD_INT 1
42619: ST_TO_ADDR
// if btype = b_workshop then
42620: LD_VAR 0 5
42624: PUSH
42625: LD_INT 2
42627: EQUAL
42628: IFFALSE 42638
// btype := b_factory ;
42630: LD_ADDR_VAR 0 5
42634: PUSH
42635: LD_INT 3
42637: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42638: LD_ADDR_VAR 0 4
42642: PUSH
42643: LD_VAR 0 5
42647: PPUSH
42648: LD_VAR 0 1
42652: PPUSH
42653: CALL_OW 248
42657: PPUSH
42658: CALL_OW 450
42662: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42663: LD_ADDR_VAR 0 2
42667: PUSH
42668: LD_VAR 0 3
42672: PPUSH
42673: LD_INT 1
42675: PPUSH
42676: CALL_OW 275
42680: PUSH
42681: LD_VAR 0 4
42685: PUSH
42686: LD_INT 1
42688: ARRAY
42689: GREATEREQUAL
42690: PUSH
42691: LD_VAR 0 3
42695: PPUSH
42696: LD_INT 2
42698: PPUSH
42699: CALL_OW 275
42703: PUSH
42704: LD_VAR 0 4
42708: PUSH
42709: LD_INT 2
42711: ARRAY
42712: GREATEREQUAL
42713: AND
42714: PUSH
42715: LD_VAR 0 3
42719: PPUSH
42720: LD_INT 3
42722: PPUSH
42723: CALL_OW 275
42727: PUSH
42728: LD_VAR 0 4
42732: PUSH
42733: LD_INT 3
42735: ARRAY
42736: GREATEREQUAL
42737: AND
42738: ST_TO_ADDR
// end ;
42739: LD_VAR 0 2
42743: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42744: LD_INT 0
42746: PPUSH
42747: PPUSH
42748: PPUSH
// pom := GetBase ( building ) ;
42749: LD_ADDR_VAR 0 4
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 274
42763: ST_TO_ADDR
// if not pom then
42764: LD_VAR 0 4
42768: NOT
42769: IFFALSE 42773
// exit ;
42771: GO 42874
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42773: LD_ADDR_VAR 0 5
42777: PUSH
42778: LD_VAR 0 2
42782: PPUSH
42783: LD_VAR 0 1
42787: PPUSH
42788: CALL_OW 248
42792: PPUSH
42793: CALL_OW 450
42797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42798: LD_ADDR_VAR 0 3
42802: PUSH
42803: LD_VAR 0 4
42807: PPUSH
42808: LD_INT 1
42810: PPUSH
42811: CALL_OW 275
42815: PUSH
42816: LD_VAR 0 5
42820: PUSH
42821: LD_INT 1
42823: ARRAY
42824: GREATEREQUAL
42825: PUSH
42826: LD_VAR 0 4
42830: PPUSH
42831: LD_INT 2
42833: PPUSH
42834: CALL_OW 275
42838: PUSH
42839: LD_VAR 0 5
42843: PUSH
42844: LD_INT 2
42846: ARRAY
42847: GREATEREQUAL
42848: AND
42849: PUSH
42850: LD_VAR 0 4
42854: PPUSH
42855: LD_INT 3
42857: PPUSH
42858: CALL_OW 275
42862: PUSH
42863: LD_VAR 0 5
42867: PUSH
42868: LD_INT 3
42870: ARRAY
42871: GREATEREQUAL
42872: AND
42873: ST_TO_ADDR
// end ;
42874: LD_VAR 0 3
42878: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42879: LD_INT 0
42881: PPUSH
42882: PPUSH
42883: PPUSH
42884: PPUSH
42885: PPUSH
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
// result := false ;
42892: LD_ADDR_VAR 0 8
42896: PUSH
42897: LD_INT 0
42899: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42900: LD_VAR 0 5
42904: NOT
42905: PUSH
42906: LD_VAR 0 1
42910: NOT
42911: OR
42912: PUSH
42913: LD_VAR 0 2
42917: NOT
42918: OR
42919: PUSH
42920: LD_VAR 0 3
42924: NOT
42925: OR
42926: IFFALSE 42930
// exit ;
42928: GO 43744
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42930: LD_ADDR_VAR 0 14
42934: PUSH
42935: LD_VAR 0 1
42939: PPUSH
42940: LD_VAR 0 2
42944: PPUSH
42945: LD_VAR 0 3
42949: PPUSH
42950: LD_VAR 0 4
42954: PPUSH
42955: LD_VAR 0 5
42959: PUSH
42960: LD_INT 1
42962: ARRAY
42963: PPUSH
42964: CALL_OW 248
42968: PPUSH
42969: LD_INT 0
42971: PPUSH
42972: CALL 44977 0 6
42976: ST_TO_ADDR
// if not hexes then
42977: LD_VAR 0 14
42981: NOT
42982: IFFALSE 42986
// exit ;
42984: GO 43744
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42986: LD_ADDR_VAR 0 17
42990: PUSH
42991: LD_VAR 0 5
42995: PPUSH
42996: LD_INT 22
42998: PUSH
42999: LD_VAR 0 13
43003: PPUSH
43004: CALL_OW 255
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: PUSH
43016: LD_INT 30
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 30
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PPUSH
43045: CALL_OW 72
43049: ST_TO_ADDR
// for i = 1 to hexes do
43050: LD_ADDR_VAR 0 9
43054: PUSH
43055: DOUBLE
43056: LD_INT 1
43058: DEC
43059: ST_TO_ADDR
43060: LD_VAR 0 14
43064: PUSH
43065: FOR_TO
43066: IFFALSE 43742
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43068: LD_ADDR_VAR 0 13
43072: PUSH
43073: LD_VAR 0 14
43077: PUSH
43078: LD_VAR 0 9
43082: ARRAY
43083: PUSH
43084: LD_INT 1
43086: ARRAY
43087: PPUSH
43088: LD_VAR 0 14
43092: PUSH
43093: LD_VAR 0 9
43097: ARRAY
43098: PUSH
43099: LD_INT 2
43101: ARRAY
43102: PPUSH
43103: CALL_OW 428
43107: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43108: LD_VAR 0 14
43112: PUSH
43113: LD_VAR 0 9
43117: ARRAY
43118: PUSH
43119: LD_INT 1
43121: ARRAY
43122: PPUSH
43123: LD_VAR 0 14
43127: PUSH
43128: LD_VAR 0 9
43132: ARRAY
43133: PUSH
43134: LD_INT 2
43136: ARRAY
43137: PPUSH
43138: CALL_OW 351
43142: PUSH
43143: LD_VAR 0 14
43147: PUSH
43148: LD_VAR 0 9
43152: ARRAY
43153: PUSH
43154: LD_INT 1
43156: ARRAY
43157: PPUSH
43158: LD_VAR 0 14
43162: PUSH
43163: LD_VAR 0 9
43167: ARRAY
43168: PUSH
43169: LD_INT 2
43171: ARRAY
43172: PPUSH
43173: CALL_OW 488
43177: NOT
43178: OR
43179: PUSH
43180: LD_VAR 0 13
43184: PPUSH
43185: CALL_OW 247
43189: PUSH
43190: LD_INT 3
43192: EQUAL
43193: OR
43194: IFFALSE 43200
// exit ;
43196: POP
43197: POP
43198: GO 43744
// if not tmp then
43200: LD_VAR 0 13
43204: NOT
43205: IFFALSE 43209
// continue ;
43207: GO 43065
// result := true ;
43209: LD_ADDR_VAR 0 8
43213: PUSH
43214: LD_INT 1
43216: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43217: LD_VAR 0 6
43221: PUSH
43222: LD_VAR 0 13
43226: PPUSH
43227: CALL_OW 247
43231: PUSH
43232: LD_INT 2
43234: EQUAL
43235: AND
43236: PUSH
43237: LD_VAR 0 13
43241: PPUSH
43242: CALL_OW 263
43246: PUSH
43247: LD_INT 1
43249: EQUAL
43250: AND
43251: IFFALSE 43415
// begin if IsDrivenBy ( tmp ) then
43253: LD_VAR 0 13
43257: PPUSH
43258: CALL_OW 311
43262: IFFALSE 43266
// continue ;
43264: GO 43065
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43266: LD_VAR 0 6
43270: PPUSH
43271: LD_INT 3
43273: PUSH
43274: LD_INT 60
43276: PUSH
43277: EMPTY
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 3
43286: PUSH
43287: LD_INT 55
43289: PUSH
43290: EMPTY
43291: LIST
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PPUSH
43301: CALL_OW 72
43305: IFFALSE 43413
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43307: LD_ADDR_VAR 0 18
43311: PUSH
43312: LD_VAR 0 6
43316: PPUSH
43317: LD_INT 3
43319: PUSH
43320: LD_INT 60
43322: PUSH
43323: EMPTY
43324: LIST
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 3
43332: PUSH
43333: LD_INT 55
43335: PUSH
43336: EMPTY
43337: LIST
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PPUSH
43347: CALL_OW 72
43351: PUSH
43352: LD_INT 1
43354: ARRAY
43355: ST_TO_ADDR
// if IsInUnit ( driver ) then
43356: LD_VAR 0 18
43360: PPUSH
43361: CALL_OW 310
43365: IFFALSE 43376
// ComExit ( driver ) ;
43367: LD_VAR 0 18
43371: PPUSH
43372: CALL 68665 0 1
// AddComEnterUnit ( driver , tmp ) ;
43376: LD_VAR 0 18
43380: PPUSH
43381: LD_VAR 0 13
43385: PPUSH
43386: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43390: LD_VAR 0 18
43394: PPUSH
43395: LD_VAR 0 7
43399: PPUSH
43400: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43404: LD_VAR 0 18
43408: PPUSH
43409: CALL_OW 181
// end ; continue ;
43413: GO 43065
// end ; if not cleaners or not tmp in cleaners then
43415: LD_VAR 0 6
43419: NOT
43420: PUSH
43421: LD_VAR 0 13
43425: PUSH
43426: LD_VAR 0 6
43430: IN
43431: NOT
43432: OR
43433: IFFALSE 43740
// begin if dep then
43435: LD_VAR 0 17
43439: IFFALSE 43575
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43441: LD_ADDR_VAR 0 16
43445: PUSH
43446: LD_VAR 0 17
43450: PUSH
43451: LD_INT 1
43453: ARRAY
43454: PPUSH
43455: CALL_OW 250
43459: PPUSH
43460: LD_VAR 0 17
43464: PUSH
43465: LD_INT 1
43467: ARRAY
43468: PPUSH
43469: CALL_OW 254
43473: PPUSH
43474: LD_INT 5
43476: PPUSH
43477: CALL_OW 272
43481: PUSH
43482: LD_VAR 0 17
43486: PUSH
43487: LD_INT 1
43489: ARRAY
43490: PPUSH
43491: CALL_OW 251
43495: PPUSH
43496: LD_VAR 0 17
43500: PUSH
43501: LD_INT 1
43503: ARRAY
43504: PPUSH
43505: CALL_OW 254
43509: PPUSH
43510: LD_INT 5
43512: PPUSH
43513: CALL_OW 273
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43522: LD_VAR 0 16
43526: PUSH
43527: LD_INT 1
43529: ARRAY
43530: PPUSH
43531: LD_VAR 0 16
43535: PUSH
43536: LD_INT 2
43538: ARRAY
43539: PPUSH
43540: CALL_OW 488
43544: IFFALSE 43575
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43546: LD_VAR 0 13
43550: PPUSH
43551: LD_VAR 0 16
43555: PUSH
43556: LD_INT 1
43558: ARRAY
43559: PPUSH
43560: LD_VAR 0 16
43564: PUSH
43565: LD_INT 2
43567: ARRAY
43568: PPUSH
43569: CALL_OW 111
// continue ;
43573: GO 43065
// end ; end ; r := GetDir ( tmp ) ;
43575: LD_ADDR_VAR 0 15
43579: PUSH
43580: LD_VAR 0 13
43584: PPUSH
43585: CALL_OW 254
43589: ST_TO_ADDR
// if r = 5 then
43590: LD_VAR 0 15
43594: PUSH
43595: LD_INT 5
43597: EQUAL
43598: IFFALSE 43608
// r := 0 ;
43600: LD_ADDR_VAR 0 15
43604: PUSH
43605: LD_INT 0
43607: ST_TO_ADDR
// for j = r to 5 do
43608: LD_ADDR_VAR 0 10
43612: PUSH
43613: DOUBLE
43614: LD_VAR 0 15
43618: DEC
43619: ST_TO_ADDR
43620: LD_INT 5
43622: PUSH
43623: FOR_TO
43624: IFFALSE 43738
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43626: LD_ADDR_VAR 0 11
43630: PUSH
43631: LD_VAR 0 13
43635: PPUSH
43636: CALL_OW 250
43640: PPUSH
43641: LD_VAR 0 10
43645: PPUSH
43646: LD_INT 2
43648: PPUSH
43649: CALL_OW 272
43653: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43654: LD_ADDR_VAR 0 12
43658: PUSH
43659: LD_VAR 0 13
43663: PPUSH
43664: CALL_OW 251
43668: PPUSH
43669: LD_VAR 0 10
43673: PPUSH
43674: LD_INT 2
43676: PPUSH
43677: CALL_OW 273
43681: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43682: LD_VAR 0 11
43686: PPUSH
43687: LD_VAR 0 12
43691: PPUSH
43692: CALL_OW 488
43696: PUSH
43697: LD_VAR 0 11
43701: PPUSH
43702: LD_VAR 0 12
43706: PPUSH
43707: CALL_OW 428
43711: NOT
43712: AND
43713: IFFALSE 43736
// begin ComMoveXY ( tmp , _x , _y ) ;
43715: LD_VAR 0 13
43719: PPUSH
43720: LD_VAR 0 11
43724: PPUSH
43725: LD_VAR 0 12
43729: PPUSH
43730: CALL_OW 111
// break ;
43734: GO 43738
// end ; end ;
43736: GO 43623
43738: POP
43739: POP
// end ; end ;
43740: GO 43065
43742: POP
43743: POP
// end ;
43744: LD_VAR 0 8
43748: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43749: LD_INT 0
43751: PPUSH
// result := true ;
43752: LD_ADDR_VAR 0 3
43756: PUSH
43757: LD_INT 1
43759: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43760: LD_VAR 0 2
43764: PUSH
43765: LD_INT 24
43767: DOUBLE
43768: EQUAL
43769: IFTRUE 43779
43771: LD_INT 33
43773: DOUBLE
43774: EQUAL
43775: IFTRUE 43779
43777: GO 43804
43779: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43780: LD_ADDR_VAR 0 3
43784: PUSH
43785: LD_INT 32
43787: PPUSH
43788: LD_VAR 0 1
43792: PPUSH
43793: CALL_OW 321
43797: PUSH
43798: LD_INT 2
43800: EQUAL
43801: ST_TO_ADDR
43802: GO 44120
43804: LD_INT 20
43806: DOUBLE
43807: EQUAL
43808: IFTRUE 43812
43810: GO 43837
43812: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43813: LD_ADDR_VAR 0 3
43817: PUSH
43818: LD_INT 6
43820: PPUSH
43821: LD_VAR 0 1
43825: PPUSH
43826: CALL_OW 321
43830: PUSH
43831: LD_INT 2
43833: EQUAL
43834: ST_TO_ADDR
43835: GO 44120
43837: LD_INT 22
43839: DOUBLE
43840: EQUAL
43841: IFTRUE 43851
43843: LD_INT 36
43845: DOUBLE
43846: EQUAL
43847: IFTRUE 43851
43849: GO 43876
43851: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43852: LD_ADDR_VAR 0 3
43856: PUSH
43857: LD_INT 15
43859: PPUSH
43860: LD_VAR 0 1
43864: PPUSH
43865: CALL_OW 321
43869: PUSH
43870: LD_INT 2
43872: EQUAL
43873: ST_TO_ADDR
43874: GO 44120
43876: LD_INT 30
43878: DOUBLE
43879: EQUAL
43880: IFTRUE 43884
43882: GO 43909
43884: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43885: LD_ADDR_VAR 0 3
43889: PUSH
43890: LD_INT 20
43892: PPUSH
43893: LD_VAR 0 1
43897: PPUSH
43898: CALL_OW 321
43902: PUSH
43903: LD_INT 2
43905: EQUAL
43906: ST_TO_ADDR
43907: GO 44120
43909: LD_INT 28
43911: DOUBLE
43912: EQUAL
43913: IFTRUE 43923
43915: LD_INT 21
43917: DOUBLE
43918: EQUAL
43919: IFTRUE 43923
43921: GO 43948
43923: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43924: LD_ADDR_VAR 0 3
43928: PUSH
43929: LD_INT 21
43931: PPUSH
43932: LD_VAR 0 1
43936: PPUSH
43937: CALL_OW 321
43941: PUSH
43942: LD_INT 2
43944: EQUAL
43945: ST_TO_ADDR
43946: GO 44120
43948: LD_INT 16
43950: DOUBLE
43951: EQUAL
43952: IFTRUE 43956
43954: GO 43981
43956: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43957: LD_ADDR_VAR 0 3
43961: PUSH
43962: LD_INT 84
43964: PPUSH
43965: LD_VAR 0 1
43969: PPUSH
43970: CALL_OW 321
43974: PUSH
43975: LD_INT 2
43977: EQUAL
43978: ST_TO_ADDR
43979: GO 44120
43981: LD_INT 19
43983: DOUBLE
43984: EQUAL
43985: IFTRUE 43995
43987: LD_INT 23
43989: DOUBLE
43990: EQUAL
43991: IFTRUE 43995
43993: GO 44020
43995: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43996: LD_ADDR_VAR 0 3
44000: PUSH
44001: LD_INT 83
44003: PPUSH
44004: LD_VAR 0 1
44008: PPUSH
44009: CALL_OW 321
44013: PUSH
44014: LD_INT 2
44016: EQUAL
44017: ST_TO_ADDR
44018: GO 44120
44020: LD_INT 17
44022: DOUBLE
44023: EQUAL
44024: IFTRUE 44028
44026: GO 44053
44028: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44029: LD_ADDR_VAR 0 3
44033: PUSH
44034: LD_INT 39
44036: PPUSH
44037: LD_VAR 0 1
44041: PPUSH
44042: CALL_OW 321
44046: PUSH
44047: LD_INT 2
44049: EQUAL
44050: ST_TO_ADDR
44051: GO 44120
44053: LD_INT 18
44055: DOUBLE
44056: EQUAL
44057: IFTRUE 44061
44059: GO 44086
44061: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44062: LD_ADDR_VAR 0 3
44066: PUSH
44067: LD_INT 40
44069: PPUSH
44070: LD_VAR 0 1
44074: PPUSH
44075: CALL_OW 321
44079: PUSH
44080: LD_INT 2
44082: EQUAL
44083: ST_TO_ADDR
44084: GO 44120
44086: LD_INT 27
44088: DOUBLE
44089: EQUAL
44090: IFTRUE 44094
44092: GO 44119
44094: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44095: LD_ADDR_VAR 0 3
44099: PUSH
44100: LD_INT 35
44102: PPUSH
44103: LD_VAR 0 1
44107: PPUSH
44108: CALL_OW 321
44112: PUSH
44113: LD_INT 2
44115: EQUAL
44116: ST_TO_ADDR
44117: GO 44120
44119: POP
// end ;
44120: LD_VAR 0 3
44124: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44125: LD_INT 0
44127: PPUSH
44128: PPUSH
44129: PPUSH
44130: PPUSH
44131: PPUSH
44132: PPUSH
44133: PPUSH
44134: PPUSH
44135: PPUSH
44136: PPUSH
44137: PPUSH
// result := false ;
44138: LD_ADDR_VAR 0 6
44142: PUSH
44143: LD_INT 0
44145: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44146: LD_VAR 0 1
44150: NOT
44151: PUSH
44152: LD_VAR 0 1
44156: PPUSH
44157: CALL_OW 266
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: IN
44172: NOT
44173: OR
44174: PUSH
44175: LD_VAR 0 2
44179: NOT
44180: OR
44181: PUSH
44182: LD_VAR 0 5
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: LD_INT 4
44201: PUSH
44202: LD_INT 5
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: IN
44213: NOT
44214: OR
44215: PUSH
44216: LD_VAR 0 3
44220: PPUSH
44221: LD_VAR 0 4
44225: PPUSH
44226: CALL_OW 488
44230: NOT
44231: OR
44232: IFFALSE 44236
// exit ;
44234: GO 44972
// side := GetSide ( depot ) ;
44236: LD_ADDR_VAR 0 9
44240: PUSH
44241: LD_VAR 0 1
44245: PPUSH
44246: CALL_OW 255
44250: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44251: LD_VAR 0 9
44255: PPUSH
44256: LD_VAR 0 2
44260: PPUSH
44261: CALL 43749 0 2
44265: NOT
44266: IFFALSE 44270
// exit ;
44268: GO 44972
// pom := GetBase ( depot ) ;
44270: LD_ADDR_VAR 0 10
44274: PUSH
44275: LD_VAR 0 1
44279: PPUSH
44280: CALL_OW 274
44284: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44285: LD_ADDR_VAR 0 11
44289: PUSH
44290: LD_VAR 0 2
44294: PPUSH
44295: LD_VAR 0 1
44299: PPUSH
44300: CALL_OW 248
44304: PPUSH
44305: CALL_OW 450
44309: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44310: LD_VAR 0 10
44314: PPUSH
44315: LD_INT 1
44317: PPUSH
44318: CALL_OW 275
44322: PUSH
44323: LD_VAR 0 11
44327: PUSH
44328: LD_INT 1
44330: ARRAY
44331: GREATEREQUAL
44332: PUSH
44333: LD_VAR 0 10
44337: PPUSH
44338: LD_INT 2
44340: PPUSH
44341: CALL_OW 275
44345: PUSH
44346: LD_VAR 0 11
44350: PUSH
44351: LD_INT 2
44353: ARRAY
44354: GREATEREQUAL
44355: AND
44356: PUSH
44357: LD_VAR 0 10
44361: PPUSH
44362: LD_INT 3
44364: PPUSH
44365: CALL_OW 275
44369: PUSH
44370: LD_VAR 0 11
44374: PUSH
44375: LD_INT 3
44377: ARRAY
44378: GREATEREQUAL
44379: AND
44380: NOT
44381: IFFALSE 44385
// exit ;
44383: GO 44972
// if GetBType ( depot ) = b_depot then
44385: LD_VAR 0 1
44389: PPUSH
44390: CALL_OW 266
44394: PUSH
44395: LD_INT 0
44397: EQUAL
44398: IFFALSE 44410
// dist := 28 else
44400: LD_ADDR_VAR 0 14
44404: PUSH
44405: LD_INT 28
44407: ST_TO_ADDR
44408: GO 44418
// dist := 36 ;
44410: LD_ADDR_VAR 0 14
44414: PUSH
44415: LD_INT 36
44417: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44418: LD_VAR 0 1
44422: PPUSH
44423: LD_VAR 0 3
44427: PPUSH
44428: LD_VAR 0 4
44432: PPUSH
44433: CALL_OW 297
44437: PUSH
44438: LD_VAR 0 14
44442: GREATER
44443: IFFALSE 44447
// exit ;
44445: GO 44972
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44447: LD_ADDR_VAR 0 12
44451: PUSH
44452: LD_VAR 0 2
44456: PPUSH
44457: LD_VAR 0 3
44461: PPUSH
44462: LD_VAR 0 4
44466: PPUSH
44467: LD_VAR 0 5
44471: PPUSH
44472: LD_VAR 0 1
44476: PPUSH
44477: CALL_OW 248
44481: PPUSH
44482: LD_INT 0
44484: PPUSH
44485: CALL 44977 0 6
44489: ST_TO_ADDR
// if not hexes then
44490: LD_VAR 0 12
44494: NOT
44495: IFFALSE 44499
// exit ;
44497: GO 44972
// hex := GetHexInfo ( x , y ) ;
44499: LD_ADDR_VAR 0 15
44503: PUSH
44504: LD_VAR 0 3
44508: PPUSH
44509: LD_VAR 0 4
44513: PPUSH
44514: CALL_OW 546
44518: ST_TO_ADDR
// if hex [ 1 ] then
44519: LD_VAR 0 15
44523: PUSH
44524: LD_INT 1
44526: ARRAY
44527: IFFALSE 44531
// exit ;
44529: GO 44972
// height := hex [ 2 ] ;
44531: LD_ADDR_VAR 0 13
44535: PUSH
44536: LD_VAR 0 15
44540: PUSH
44541: LD_INT 2
44543: ARRAY
44544: ST_TO_ADDR
// for i = 1 to hexes do
44545: LD_ADDR_VAR 0 7
44549: PUSH
44550: DOUBLE
44551: LD_INT 1
44553: DEC
44554: ST_TO_ADDR
44555: LD_VAR 0 12
44559: PUSH
44560: FOR_TO
44561: IFFALSE 44891
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44563: LD_VAR 0 12
44567: PUSH
44568: LD_VAR 0 7
44572: ARRAY
44573: PUSH
44574: LD_INT 1
44576: ARRAY
44577: PPUSH
44578: LD_VAR 0 12
44582: PUSH
44583: LD_VAR 0 7
44587: ARRAY
44588: PUSH
44589: LD_INT 2
44591: ARRAY
44592: PPUSH
44593: CALL_OW 488
44597: NOT
44598: PUSH
44599: LD_VAR 0 12
44603: PUSH
44604: LD_VAR 0 7
44608: ARRAY
44609: PUSH
44610: LD_INT 1
44612: ARRAY
44613: PPUSH
44614: LD_VAR 0 12
44618: PUSH
44619: LD_VAR 0 7
44623: ARRAY
44624: PUSH
44625: LD_INT 2
44627: ARRAY
44628: PPUSH
44629: CALL_OW 428
44633: PUSH
44634: LD_INT 0
44636: GREATER
44637: OR
44638: PUSH
44639: LD_VAR 0 12
44643: PUSH
44644: LD_VAR 0 7
44648: ARRAY
44649: PUSH
44650: LD_INT 1
44652: ARRAY
44653: PPUSH
44654: LD_VAR 0 12
44658: PUSH
44659: LD_VAR 0 7
44663: ARRAY
44664: PUSH
44665: LD_INT 2
44667: ARRAY
44668: PPUSH
44669: CALL_OW 351
44673: OR
44674: IFFALSE 44680
// exit ;
44676: POP
44677: POP
44678: GO 44972
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44680: LD_ADDR_VAR 0 8
44684: PUSH
44685: LD_VAR 0 12
44689: PUSH
44690: LD_VAR 0 7
44694: ARRAY
44695: PUSH
44696: LD_INT 1
44698: ARRAY
44699: PPUSH
44700: LD_VAR 0 12
44704: PUSH
44705: LD_VAR 0 7
44709: ARRAY
44710: PUSH
44711: LD_INT 2
44713: ARRAY
44714: PPUSH
44715: CALL_OW 546
44719: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44720: LD_VAR 0 8
44724: PUSH
44725: LD_INT 1
44727: ARRAY
44728: PUSH
44729: LD_VAR 0 8
44733: PUSH
44734: LD_INT 2
44736: ARRAY
44737: PUSH
44738: LD_VAR 0 13
44742: PUSH
44743: LD_INT 2
44745: PLUS
44746: GREATER
44747: OR
44748: PUSH
44749: LD_VAR 0 8
44753: PUSH
44754: LD_INT 2
44756: ARRAY
44757: PUSH
44758: LD_VAR 0 13
44762: PUSH
44763: LD_INT 2
44765: MINUS
44766: LESS
44767: OR
44768: PUSH
44769: LD_VAR 0 8
44773: PUSH
44774: LD_INT 3
44776: ARRAY
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: LD_INT 8
44783: PUSH
44784: LD_INT 9
44786: PUSH
44787: LD_INT 10
44789: PUSH
44790: LD_INT 11
44792: PUSH
44793: LD_INT 12
44795: PUSH
44796: LD_INT 13
44798: PUSH
44799: LD_INT 16
44801: PUSH
44802: LD_INT 17
44804: PUSH
44805: LD_INT 18
44807: PUSH
44808: LD_INT 19
44810: PUSH
44811: LD_INT 20
44813: PUSH
44814: LD_INT 21
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: IN
44832: NOT
44833: OR
44834: PUSH
44835: LD_VAR 0 8
44839: PUSH
44840: LD_INT 5
44842: ARRAY
44843: NOT
44844: OR
44845: PUSH
44846: LD_VAR 0 8
44850: PUSH
44851: LD_INT 6
44853: ARRAY
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: LD_INT 7
44863: PUSH
44864: LD_INT 9
44866: PUSH
44867: LD_INT 10
44869: PUSH
44870: LD_INT 11
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: IN
44881: NOT
44882: OR
44883: IFFALSE 44889
// exit ;
44885: POP
44886: POP
44887: GO 44972
// end ;
44889: GO 44560
44891: POP
44892: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44893: LD_VAR 0 9
44897: PPUSH
44898: LD_VAR 0 3
44902: PPUSH
44903: LD_VAR 0 4
44907: PPUSH
44908: LD_INT 20
44910: PPUSH
44911: CALL 36924 0 4
44915: PUSH
44916: LD_INT 4
44918: ARRAY
44919: IFFALSE 44923
// exit ;
44921: GO 44972
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44923: LD_VAR 0 2
44927: PUSH
44928: LD_INT 29
44930: PUSH
44931: LD_INT 30
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: IN
44938: PUSH
44939: LD_VAR 0 3
44943: PPUSH
44944: LD_VAR 0 4
44948: PPUSH
44949: LD_VAR 0 9
44953: PPUSH
44954: CALL_OW 440
44958: NOT
44959: AND
44960: IFFALSE 44964
// exit ;
44962: GO 44972
// result := true ;
44964: LD_ADDR_VAR 0 6
44968: PUSH
44969: LD_INT 1
44971: ST_TO_ADDR
// end ;
44972: LD_VAR 0 6
44976: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44977: LD_INT 0
44979: PPUSH
44980: PPUSH
44981: PPUSH
44982: PPUSH
44983: PPUSH
44984: PPUSH
44985: PPUSH
44986: PPUSH
44987: PPUSH
44988: PPUSH
44989: PPUSH
44990: PPUSH
44991: PPUSH
44992: PPUSH
44993: PPUSH
44994: PPUSH
44995: PPUSH
44996: PPUSH
44997: PPUSH
44998: PPUSH
44999: PPUSH
45000: PPUSH
45001: PPUSH
45002: PPUSH
45003: PPUSH
45004: PPUSH
45005: PPUSH
45006: PPUSH
45007: PPUSH
45008: PPUSH
45009: PPUSH
45010: PPUSH
45011: PPUSH
45012: PPUSH
45013: PPUSH
45014: PPUSH
45015: PPUSH
45016: PPUSH
45017: PPUSH
45018: PPUSH
45019: PPUSH
45020: PPUSH
45021: PPUSH
45022: PPUSH
45023: PPUSH
45024: PPUSH
45025: PPUSH
45026: PPUSH
45027: PPUSH
45028: PPUSH
45029: PPUSH
45030: PPUSH
45031: PPUSH
45032: PPUSH
45033: PPUSH
45034: PPUSH
45035: PPUSH
45036: PPUSH
// result = [ ] ;
45037: LD_ADDR_VAR 0 7
45041: PUSH
45042: EMPTY
45043: ST_TO_ADDR
// temp_list = [ ] ;
45044: LD_ADDR_VAR 0 9
45048: PUSH
45049: EMPTY
45050: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45051: LD_VAR 0 4
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: LD_INT 3
45067: PUSH
45068: LD_INT 4
45070: PUSH
45071: LD_INT 5
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: IN
45082: NOT
45083: PUSH
45084: LD_VAR 0 1
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: IN
45099: PUSH
45100: LD_VAR 0 5
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: IN
45119: NOT
45120: AND
45121: OR
45122: IFFALSE 45126
// exit ;
45124: GO 63517
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45126: LD_VAR 0 1
45130: PUSH
45131: LD_INT 6
45133: PUSH
45134: LD_INT 7
45136: PUSH
45137: LD_INT 8
45139: PUSH
45140: LD_INT 13
45142: PUSH
45143: LD_INT 12
45145: PUSH
45146: LD_INT 15
45148: PUSH
45149: LD_INT 11
45151: PUSH
45152: LD_INT 14
45154: PUSH
45155: LD_INT 10
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: IN
45169: IFFALSE 45179
// btype = b_lab ;
45171: LD_ADDR_VAR 0 1
45175: PUSH
45176: LD_INT 6
45178: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45179: LD_VAR 0 6
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: IN
45198: NOT
45199: PUSH
45200: LD_VAR 0 1
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 3
45216: PUSH
45217: LD_INT 6
45219: PUSH
45220: LD_INT 36
45222: PUSH
45223: LD_INT 4
45225: PUSH
45226: LD_INT 5
45228: PUSH
45229: LD_INT 31
45231: PUSH
45232: LD_INT 32
45234: PUSH
45235: LD_INT 33
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: IN
45251: NOT
45252: PUSH
45253: LD_VAR 0 6
45257: PUSH
45258: LD_INT 1
45260: EQUAL
45261: AND
45262: OR
45263: PUSH
45264: LD_VAR 0 1
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 3
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: IN
45279: NOT
45280: PUSH
45281: LD_VAR 0 6
45285: PUSH
45286: LD_INT 2
45288: EQUAL
45289: AND
45290: OR
45291: IFFALSE 45301
// mode = 0 ;
45293: LD_ADDR_VAR 0 6
45297: PUSH
45298: LD_INT 0
45300: ST_TO_ADDR
// case mode of 0 :
45301: LD_VAR 0 6
45305: PUSH
45306: LD_INT 0
45308: DOUBLE
45309: EQUAL
45310: IFTRUE 45314
45312: GO 56767
45314: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45315: LD_ADDR_VAR 0 11
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 3
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45508: LD_ADDR_VAR 0 12
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 3
45665: NEG
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 3
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45704: LD_ADDR_VAR 0 13
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 3
45863: NEG
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 3
45875: NEG
45876: PUSH
45877: LD_INT 3
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45903: LD_ADDR_VAR 0 14
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 3
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46099: LD_ADDR_VAR 0 15
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 2
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 3
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 3
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46292: LD_ADDR_VAR 0 16
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46485: LD_ADDR_VAR 0 17
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46715: LD_ADDR_VAR 0 18
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46945: LD_ADDR_VAR 0 19
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47175: LD_ADDR_VAR 0 20
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47405: LD_ADDR_VAR 0 21
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47635: LD_ADDR_VAR 0 22
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47865: LD_ADDR_VAR 0 23
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 2
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 3
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48145: LD_ADDR_VAR 0 24
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 3
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 3
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48421: LD_ADDR_VAR 0 25
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 2
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 3
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48695: LD_ADDR_VAR 0 26
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: LD_INT 3
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 3
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48971: LD_ADDR_VAR 0 27
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 3
49204: NEG
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 3
49216: NEG
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49251: LD_ADDR_VAR 0 28
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 3
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 3
49498: NEG
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49533: LD_ADDR_VAR 0 29
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: LD_INT 3
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 3
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 3
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 3
49777: NEG
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49812: LD_ADDR_VAR 0 30
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 3
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 3
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50090: LD_ADDR_VAR 0 31
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 2
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 3
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 3
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50368: LD_ADDR_VAR 0 32
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 3
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 3
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: LD_INT 3
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: NEG
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50646: LD_ADDR_VAR 0 33
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: NEG
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: LD_INT 3
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50925: LD_ADDR_VAR 0 34
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 3
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: NEG
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51205: LD_ADDR_VAR 0 35
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51317: LD_ADDR_VAR 0 36
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51429: LD_ADDR_VAR 0 37
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51541: LD_ADDR_VAR 0 38
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51653: LD_ADDR_VAR 0 39
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51765: LD_ADDR_VAR 0 40
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51877: LD_ADDR_VAR 0 41
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: LD_INT 3
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 3
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: NEG
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: NEG
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52227: LD_ADDR_VAR 0 42
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: LD_INT 3
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 3
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 2
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 3
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 3
52473: PUSH
52474: LD_INT 3
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: LD_INT 3
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 3
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 3
52524: NEG
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 3
52536: NEG
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52577: LD_ADDR_VAR 0 43
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 3
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52925: LD_ADDR_VAR 0 44
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: NEG
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 3
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 3
53222: NEG
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: NEG
53235: PUSH
53236: LD_INT 3
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53275: LD_ADDR_VAR 0 45
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: LD_INT 3
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 3
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 3
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 3
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: LD_INT 3
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 3
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: NEG
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: LD_INT 3
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53625: LD_ADDR_VAR 0 46
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 3
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 3
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 3
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 3
53921: NEG
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53973: LD_ADDR_VAR 0 47
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54124: LD_ADDR_VAR 0 48
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54271: LD_ADDR_VAR 0 49
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54415: LD_ADDR_VAR 0 50
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54559: LD_ADDR_VAR 0 51
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54706: LD_ADDR_VAR 0 52
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54857: LD_ADDR_VAR 0 53
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55087: LD_ADDR_VAR 0 54
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55317: LD_ADDR_VAR 0 55
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55547: LD_ADDR_VAR 0 56
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55777: LD_ADDR_VAR 0 57
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56007: LD_ADDR_VAR 0 58
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56237: LD_ADDR_VAR 0 59
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56325: LD_ADDR_VAR 0 60
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56413: LD_ADDR_VAR 0 61
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56501: LD_ADDR_VAR 0 62
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56589: LD_ADDR_VAR 0 63
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56677: LD_ADDR_VAR 0 64
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: ST_TO_ADDR
// end ; 1 :
56765: GO 62662
56767: LD_INT 1
56769: DOUBLE
56770: EQUAL
56771: IFTRUE 56775
56773: GO 59398
56775: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56776: LD_ADDR_VAR 0 11
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: LIST
56819: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56820: LD_ADDR_VAR 0 12
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56861: LD_ADDR_VAR 0 13
56865: PUSH
56866: LD_INT 3
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: LD_INT 3
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56901: LD_ADDR_VAR 0 14
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 3
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 3
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: LIST
56941: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56942: LD_ADDR_VAR 0 15
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: LIST
56985: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56986: LD_ADDR_VAR 0 16
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: LD_INT 3
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57032: LD_ADDR_VAR 0 17
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 3
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57076: LD_ADDR_VAR 0 18
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57117: LD_ADDR_VAR 0 19
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57157: LD_ADDR_VAR 0 20
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57198: LD_ADDR_VAR 0 21
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 3
57216: NEG
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57242: LD_ADDR_VAR 0 22
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57288: LD_ADDR_VAR 0 23
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 4
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 3
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57332: LD_ADDR_VAR 0 24
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 4
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57373: LD_ADDR_VAR 0 25
57377: PUSH
57378: LD_INT 3
57380: PUSH
57381: LD_INT 3
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 4
57390: PUSH
57391: LD_INT 3
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: LD_INT 4
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57413: LD_ADDR_VAR 0 26
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 4
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57454: LD_ADDR_VAR 0 27
57458: PUSH
57459: LD_INT 3
57461: NEG
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 4
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57498: LD_ADDR_VAR 0 28
57502: PUSH
57503: LD_INT 3
57505: NEG
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: LD_INT 4
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 4
57529: NEG
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57544: LD_ADDR_VAR 0 29
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 3
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 4
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 4
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: LD_INT 5
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 5
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: LD_INT 4
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 6
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 6
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: LD_INT 5
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57699: LD_ADDR_VAR 0 30
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 3
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 3
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 4
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 4
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 4
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 5
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 5
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 5
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 6
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 6
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57842: LD_ADDR_VAR 0 31
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 4
57889: PUSH
57890: LD_INT 4
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: LD_INT 4
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 5
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 5
57919: PUSH
57920: LD_INT 5
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: LD_INT 5
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 6
57939: PUSH
57940: LD_INT 5
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 6
57949: PUSH
57950: LD_INT 6
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 5
57959: PUSH
57960: LD_INT 6
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57981: LD_ADDR_VAR 0 32
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: LD_INT 3
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: LD_INT 2
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 4
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: LD_INT 4
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 3
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: LD_INT 5
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: LD_INT 5
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: LD_INT 4
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: LD_INT 6
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 6
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 5
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58124: LD_ADDR_VAR 0 33
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 3
58153: NEG
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: NEG
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 4
58176: NEG
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 4
58187: NEG
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 4
58199: NEG
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 5
58210: NEG
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 5
58221: NEG
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 5
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 6
58244: NEG
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 6
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58279: LD_ADDR_VAR 0 34
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 4
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 4
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 4
58346: NEG
58347: PUSH
58348: LD_INT 4
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 4
58358: NEG
58359: PUSH
58360: LD_INT 5
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 5
58370: NEG
58371: PUSH
58372: LD_INT 4
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 5
58382: NEG
58383: PUSH
58384: LD_INT 5
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 5
58394: NEG
58395: PUSH
58396: LD_INT 6
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 6
58406: NEG
58407: PUSH
58408: LD_INT 5
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 6
58418: NEG
58419: PUSH
58420: LD_INT 6
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58442: LD_ADDR_VAR 0 41
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58486: LD_ADDR_VAR 0 42
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: LIST
58526: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58527: LD_ADDR_VAR 0 43
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58567: LD_ADDR_VAR 0 44
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 3
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: LIST
58607: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58608: LD_ADDR_VAR 0 45
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: NEG
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 3
58637: NEG
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: LIST
58651: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58652: LD_ADDR_VAR 0 46
58656: PUSH
58657: LD_INT 2
58659: NEG
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 3
58683: NEG
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58698: LD_ADDR_VAR 0 47
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58731: LD_ADDR_VAR 0 48
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58762: LD_ADDR_VAR 0 49
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58791: LD_ADDR_VAR 0 50
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 3
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58820: LD_ADDR_VAR 0 51
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58851: LD_ADDR_VAR 0 52
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58884: LD_ADDR_VAR 0 53
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 3
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: LIST
58927: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58928: LD_ADDR_VAR 0 54
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: LIST
58968: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58969: LD_ADDR_VAR 0 55
58973: PUSH
58974: LD_INT 3
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 3
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 3
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59009: LD_ADDR_VAR 0 56
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 3
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: LIST
59049: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59050: LD_ADDR_VAR 0 57
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 3
59068: NEG
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: NEG
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: LIST
59093: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59094: LD_ADDR_VAR 0 58
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: LIST
59139: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59140: LD_ADDR_VAR 0 59
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59184: LD_ADDR_VAR 0 60
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59225: LD_ADDR_VAR 0 61
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59265: LD_ADDR_VAR 0 62
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: LIST
59305: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59306: LD_ADDR_VAR 0 63
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: NEG
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59350: LD_ADDR_VAR 0 64
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: ST_TO_ADDR
// end ; 2 :
59396: GO 62662
59398: LD_INT 2
59400: DOUBLE
59401: EQUAL
59402: IFTRUE 59406
59404: GO 62661
59406: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59407: LD_ADDR_VAR 0 29
59411: PUSH
59412: LD_INT 4
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 4
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 5
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 5
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 4
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 3
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 5
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 3
59507: PUSH
59508: LD_INT 3
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 4
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 4
59537: PUSH
59538: LD_INT 4
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: PUSH
59548: LD_INT 4
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 3
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 4
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: LD_INT 4
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 4
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 4
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 5
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 5
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 4
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: LD_INT 5
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: LD_INT 3
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 3
59690: NEG
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 3
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 4
59746: NEG
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 4
59757: NEG
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 4
59769: NEG
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 4
59792: NEG
59793: PUSH
59794: LD_INT 4
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 4
59804: NEG
59805: PUSH
59806: LD_INT 5
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: LD_INT 4
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: NEG
59829: PUSH
59830: LD_INT 3
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 4
59840: NEG
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 5
59852: NEG
59853: PUSH
59854: LD_INT 4
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 5
59864: NEG
59865: PUSH
59866: LD_INT 5
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 3
59876: NEG
59877: PUSH
59878: LD_INT 5
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 5
59888: NEG
59889: PUSH
59890: LD_INT 3
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59945: LD_ADDR_VAR 0 30
59949: PUSH
59950: LD_INT 4
59952: PUSH
59953: LD_INT 4
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 4
59962: PUSH
59963: LD_INT 3
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 5
59972: PUSH
59973: LD_INT 4
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 5
59982: PUSH
59983: LD_INT 5
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 4
59992: PUSH
59993: LD_INT 5
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: LD_INT 4
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 3
60012: PUSH
60013: LD_INT 3
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 5
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: LD_INT 5
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: LD_INT 4
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 4
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 4
60135: NEG
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 4
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 3
60169: NEG
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 4
60180: NEG
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 5
60191: NEG
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 5
60202: NEG
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 5
60214: NEG
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: NEG
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: NEG
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 3
60249: NEG
60250: PUSH
60251: LD_INT 4
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 3
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 3
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 4
60297: NEG
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 4
60309: NEG
60310: PUSH
60311: LD_INT 4
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 2
60321: NEG
60322: PUSH
60323: LD_INT 4
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 4
60333: NEG
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 4
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 5
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: LD_INT 3
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 4
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 5
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 3
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 5
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60492: LD_ADDR_VAR 0 31
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_INT 4
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: LD_INT 3
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: LD_INT 4
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 5
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 5
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 4
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 3
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: LD_INT 5
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: LD_INT 3
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 4
60648: NEG
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 4
60659: NEG
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 4
60671: NEG
60672: PUSH
60673: LD_INT 2
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 4
60694: NEG
60695: PUSH
60696: LD_INT 4
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 4
60706: NEG
60707: PUSH
60708: LD_INT 5
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: LD_INT 4
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 4
60742: NEG
60743: PUSH
60744: LD_INT 3
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 5
60754: NEG
60755: PUSH
60756: LD_INT 4
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 5
60766: NEG
60767: PUSH
60768: LD_INT 5
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 3
60778: NEG
60779: PUSH
60780: LD_INT 5
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 5
60790: NEG
60791: PUSH
60792: LD_INT 3
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 3
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 4
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 3
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: LD_INT 2
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: LD_INT 3
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: LD_INT 4
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: LD_INT 4
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 4
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 4
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 5
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 5
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 4
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 3
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 3
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 5
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61042: LD_ADDR_VAR 0 32
61046: PUSH
61047: LD_INT 4
61049: NEG
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 4
61060: NEG
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 3
61072: NEG
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 3
61083: NEG
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 4
61094: NEG
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 5
61105: NEG
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 5
61116: NEG
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 5
61128: NEG
61129: PUSH
61130: LD_INT 2
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 3
61140: NEG
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 3
61151: NEG
61152: PUSH
61153: LD_INT 3
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: LD_INT 4
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PUSH
61177: LD_INT 3
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: LD_INT 2
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 3
61199: NEG
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 4
61211: NEG
61212: PUSH
61213: LD_INT 3
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 4
61223: NEG
61224: PUSH
61225: LD_INT 4
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: LD_INT 4
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 4
61247: NEG
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: LD_INT 4
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 5
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: LD_INT 4
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: LD_INT 3
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 3
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 4
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 5
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: LD_INT 5
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 3
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 3
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 4
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 4
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: LD_INT 2
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 4
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 4
61454: PUSH
61455: LD_INT 4
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 4
61464: PUSH
61465: LD_INT 3
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 5
61474: PUSH
61475: LD_INT 4
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 5
61484: PUSH
61485: LD_INT 5
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 4
61494: PUSH
61495: LD_INT 5
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 3
61504: PUSH
61505: LD_INT 4
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 3
61514: PUSH
61515: LD_INT 3
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 5
61524: PUSH
61525: LD_INT 3
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 3
61534: PUSH
61535: LD_INT 5
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61589: LD_ADDR_VAR 0 33
61593: PUSH
61594: LD_INT 4
61596: NEG
61597: PUSH
61598: LD_INT 4
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 4
61608: NEG
61609: PUSH
61610: LD_INT 5
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 3
61620: NEG
61621: PUSH
61622: LD_INT 4
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: NEG
61633: PUSH
61634: LD_INT 3
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 4
61644: NEG
61645: PUSH
61646: LD_INT 3
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 5
61656: NEG
61657: PUSH
61658: LD_INT 4
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 5
61668: NEG
61669: PUSH
61670: LD_INT 5
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 3
61680: NEG
61681: PUSH
61682: LD_INT 5
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 5
61692: NEG
61693: PUSH
61694: LD_INT 3
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 3
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_INT 4
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: LD_INT 2
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: LD_INT 3
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 4
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: LD_INT 2
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: LD_INT 4
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 4
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 4
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 5
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 5
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 4
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 3
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 3
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 3
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 5
61889: PUSH
61890: LD_INT 2
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 3
61899: PUSH
61900: LD_INT 3
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 3
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 4
61919: PUSH
61920: LD_INT 3
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 4
61929: PUSH
61930: LD_INT 4
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 3
61939: PUSH
61940: LD_INT 4
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: LD_INT 3
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 4
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: LD_INT 4
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 4
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 3
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: LD_INT 4
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 5
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: LD_INT 5
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: LD_INT 4
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: PUSH
62052: LD_INT 3
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: PUSH
62062: LD_INT 5
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: LD_INT 3
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62127: LD_ADDR_VAR 0 34
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 4
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 5
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: LD_INT 4
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: LD_INT 3
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: LD_INT 3
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: LD_INT 4
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: LD_INT 5
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 3
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: LD_INT 5
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 3
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 4
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 4
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 3
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: LD_INT 2
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 4
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 4
62329: PUSH
62330: LD_INT 4
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: LD_INT 3
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 5
62349: PUSH
62350: LD_INT 4
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 5
62359: PUSH
62360: LD_INT 5
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 4
62369: PUSH
62370: LD_INT 5
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 3
62379: PUSH
62380: LD_INT 4
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: LD_INT 3
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 5
62399: PUSH
62400: LD_INT 3
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 3
62409: PUSH
62410: LD_INT 5
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 3
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: LD_INT 4
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 4
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: LD_INT 3
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: LD_INT 4
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: NEG
62502: PUSH
62503: LD_INT 2
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 4
62512: NEG
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 4
62523: NEG
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 3
62535: NEG
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: LD_INT 1
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 4
62557: NEG
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 5
62568: NEG
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 5
62579: NEG
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 5
62591: NEG
62592: PUSH
62593: LD_INT 2
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 3
62603: NEG
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: ST_TO_ADDR
// end ; end ;
62659: GO 62662
62661: POP
// case btype of b_depot , b_warehouse :
62662: LD_VAR 0 1
62666: PUSH
62667: LD_INT 0
62669: DOUBLE
62670: EQUAL
62671: IFTRUE 62681
62673: LD_INT 1
62675: DOUBLE
62676: EQUAL
62677: IFTRUE 62681
62679: GO 62882
62681: POP
// case nation of nation_american :
62682: LD_VAR 0 5
62686: PUSH
62687: LD_INT 1
62689: DOUBLE
62690: EQUAL
62691: IFTRUE 62695
62693: GO 62751
62695: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62696: LD_ADDR_VAR 0 9
62700: PUSH
62701: LD_VAR 0 11
62705: PUSH
62706: LD_VAR 0 12
62710: PUSH
62711: LD_VAR 0 13
62715: PUSH
62716: LD_VAR 0 14
62720: PUSH
62721: LD_VAR 0 15
62725: PUSH
62726: LD_VAR 0 16
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: PUSH
62739: LD_VAR 0 4
62743: PUSH
62744: LD_INT 1
62746: PLUS
62747: ARRAY
62748: ST_TO_ADDR
62749: GO 62880
62751: LD_INT 2
62753: DOUBLE
62754: EQUAL
62755: IFTRUE 62759
62757: GO 62815
62759: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62760: LD_ADDR_VAR 0 9
62764: PUSH
62765: LD_VAR 0 17
62769: PUSH
62770: LD_VAR 0 18
62774: PUSH
62775: LD_VAR 0 19
62779: PUSH
62780: LD_VAR 0 20
62784: PUSH
62785: LD_VAR 0 21
62789: PUSH
62790: LD_VAR 0 22
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: PUSH
62803: LD_VAR 0 4
62807: PUSH
62808: LD_INT 1
62810: PLUS
62811: ARRAY
62812: ST_TO_ADDR
62813: GO 62880
62815: LD_INT 3
62817: DOUBLE
62818: EQUAL
62819: IFTRUE 62823
62821: GO 62879
62823: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62824: LD_ADDR_VAR 0 9
62828: PUSH
62829: LD_VAR 0 23
62833: PUSH
62834: LD_VAR 0 24
62838: PUSH
62839: LD_VAR 0 25
62843: PUSH
62844: LD_VAR 0 26
62848: PUSH
62849: LD_VAR 0 27
62853: PUSH
62854: LD_VAR 0 28
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: PUSH
62867: LD_VAR 0 4
62871: PUSH
62872: LD_INT 1
62874: PLUS
62875: ARRAY
62876: ST_TO_ADDR
62877: GO 62880
62879: POP
62880: GO 63435
62882: LD_INT 2
62884: DOUBLE
62885: EQUAL
62886: IFTRUE 62896
62888: LD_INT 3
62890: DOUBLE
62891: EQUAL
62892: IFTRUE 62896
62894: GO 62952
62896: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62897: LD_ADDR_VAR 0 9
62901: PUSH
62902: LD_VAR 0 29
62906: PUSH
62907: LD_VAR 0 30
62911: PUSH
62912: LD_VAR 0 31
62916: PUSH
62917: LD_VAR 0 32
62921: PUSH
62922: LD_VAR 0 33
62926: PUSH
62927: LD_VAR 0 34
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: PUSH
62940: LD_VAR 0 4
62944: PUSH
62945: LD_INT 1
62947: PLUS
62948: ARRAY
62949: ST_TO_ADDR
62950: GO 63435
62952: LD_INT 16
62954: DOUBLE
62955: EQUAL
62956: IFTRUE 63014
62958: LD_INT 17
62960: DOUBLE
62961: EQUAL
62962: IFTRUE 63014
62964: LD_INT 18
62966: DOUBLE
62967: EQUAL
62968: IFTRUE 63014
62970: LD_INT 19
62972: DOUBLE
62973: EQUAL
62974: IFTRUE 63014
62976: LD_INT 22
62978: DOUBLE
62979: EQUAL
62980: IFTRUE 63014
62982: LD_INT 20
62984: DOUBLE
62985: EQUAL
62986: IFTRUE 63014
62988: LD_INT 21
62990: DOUBLE
62991: EQUAL
62992: IFTRUE 63014
62994: LD_INT 23
62996: DOUBLE
62997: EQUAL
62998: IFTRUE 63014
63000: LD_INT 24
63002: DOUBLE
63003: EQUAL
63004: IFTRUE 63014
63006: LD_INT 25
63008: DOUBLE
63009: EQUAL
63010: IFTRUE 63014
63012: GO 63070
63014: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63015: LD_ADDR_VAR 0 9
63019: PUSH
63020: LD_VAR 0 35
63024: PUSH
63025: LD_VAR 0 36
63029: PUSH
63030: LD_VAR 0 37
63034: PUSH
63035: LD_VAR 0 38
63039: PUSH
63040: LD_VAR 0 39
63044: PUSH
63045: LD_VAR 0 40
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: PUSH
63058: LD_VAR 0 4
63062: PUSH
63063: LD_INT 1
63065: PLUS
63066: ARRAY
63067: ST_TO_ADDR
63068: GO 63435
63070: LD_INT 6
63072: DOUBLE
63073: EQUAL
63074: IFTRUE 63126
63076: LD_INT 7
63078: DOUBLE
63079: EQUAL
63080: IFTRUE 63126
63082: LD_INT 8
63084: DOUBLE
63085: EQUAL
63086: IFTRUE 63126
63088: LD_INT 13
63090: DOUBLE
63091: EQUAL
63092: IFTRUE 63126
63094: LD_INT 12
63096: DOUBLE
63097: EQUAL
63098: IFTRUE 63126
63100: LD_INT 15
63102: DOUBLE
63103: EQUAL
63104: IFTRUE 63126
63106: LD_INT 11
63108: DOUBLE
63109: EQUAL
63110: IFTRUE 63126
63112: LD_INT 14
63114: DOUBLE
63115: EQUAL
63116: IFTRUE 63126
63118: LD_INT 10
63120: DOUBLE
63121: EQUAL
63122: IFTRUE 63126
63124: GO 63182
63126: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63127: LD_ADDR_VAR 0 9
63131: PUSH
63132: LD_VAR 0 41
63136: PUSH
63137: LD_VAR 0 42
63141: PUSH
63142: LD_VAR 0 43
63146: PUSH
63147: LD_VAR 0 44
63151: PUSH
63152: LD_VAR 0 45
63156: PUSH
63157: LD_VAR 0 46
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: PUSH
63170: LD_VAR 0 4
63174: PUSH
63175: LD_INT 1
63177: PLUS
63178: ARRAY
63179: ST_TO_ADDR
63180: GO 63435
63182: LD_INT 36
63184: DOUBLE
63185: EQUAL
63186: IFTRUE 63190
63188: GO 63246
63190: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63191: LD_ADDR_VAR 0 9
63195: PUSH
63196: LD_VAR 0 47
63200: PUSH
63201: LD_VAR 0 48
63205: PUSH
63206: LD_VAR 0 49
63210: PUSH
63211: LD_VAR 0 50
63215: PUSH
63216: LD_VAR 0 51
63220: PUSH
63221: LD_VAR 0 52
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: PUSH
63234: LD_VAR 0 4
63238: PUSH
63239: LD_INT 1
63241: PLUS
63242: ARRAY
63243: ST_TO_ADDR
63244: GO 63435
63246: LD_INT 4
63248: DOUBLE
63249: EQUAL
63250: IFTRUE 63272
63252: LD_INT 5
63254: DOUBLE
63255: EQUAL
63256: IFTRUE 63272
63258: LD_INT 34
63260: DOUBLE
63261: EQUAL
63262: IFTRUE 63272
63264: LD_INT 37
63266: DOUBLE
63267: EQUAL
63268: IFTRUE 63272
63270: GO 63328
63272: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63273: LD_ADDR_VAR 0 9
63277: PUSH
63278: LD_VAR 0 53
63282: PUSH
63283: LD_VAR 0 54
63287: PUSH
63288: LD_VAR 0 55
63292: PUSH
63293: LD_VAR 0 56
63297: PUSH
63298: LD_VAR 0 57
63302: PUSH
63303: LD_VAR 0 58
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: PUSH
63316: LD_VAR 0 4
63320: PUSH
63321: LD_INT 1
63323: PLUS
63324: ARRAY
63325: ST_TO_ADDR
63326: GO 63435
63328: LD_INT 31
63330: DOUBLE
63331: EQUAL
63332: IFTRUE 63378
63334: LD_INT 32
63336: DOUBLE
63337: EQUAL
63338: IFTRUE 63378
63340: LD_INT 33
63342: DOUBLE
63343: EQUAL
63344: IFTRUE 63378
63346: LD_INT 27
63348: DOUBLE
63349: EQUAL
63350: IFTRUE 63378
63352: LD_INT 26
63354: DOUBLE
63355: EQUAL
63356: IFTRUE 63378
63358: LD_INT 28
63360: DOUBLE
63361: EQUAL
63362: IFTRUE 63378
63364: LD_INT 29
63366: DOUBLE
63367: EQUAL
63368: IFTRUE 63378
63370: LD_INT 30
63372: DOUBLE
63373: EQUAL
63374: IFTRUE 63378
63376: GO 63434
63378: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63379: LD_ADDR_VAR 0 9
63383: PUSH
63384: LD_VAR 0 59
63388: PUSH
63389: LD_VAR 0 60
63393: PUSH
63394: LD_VAR 0 61
63398: PUSH
63399: LD_VAR 0 62
63403: PUSH
63404: LD_VAR 0 63
63408: PUSH
63409: LD_VAR 0 64
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: PUSH
63422: LD_VAR 0 4
63426: PUSH
63427: LD_INT 1
63429: PLUS
63430: ARRAY
63431: ST_TO_ADDR
63432: GO 63435
63434: POP
// temp_list2 = [ ] ;
63435: LD_ADDR_VAR 0 10
63439: PUSH
63440: EMPTY
63441: ST_TO_ADDR
// for i in temp_list do
63442: LD_ADDR_VAR 0 8
63446: PUSH
63447: LD_VAR 0 9
63451: PUSH
63452: FOR_IN
63453: IFFALSE 63505
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63455: LD_ADDR_VAR 0 10
63459: PUSH
63460: LD_VAR 0 10
63464: PUSH
63465: LD_VAR 0 8
63469: PUSH
63470: LD_INT 1
63472: ARRAY
63473: PUSH
63474: LD_VAR 0 2
63478: PLUS
63479: PUSH
63480: LD_VAR 0 8
63484: PUSH
63485: LD_INT 2
63487: ARRAY
63488: PUSH
63489: LD_VAR 0 3
63493: PLUS
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: EMPTY
63500: LIST
63501: ADD
63502: ST_TO_ADDR
63503: GO 63452
63505: POP
63506: POP
// result = temp_list2 ;
63507: LD_ADDR_VAR 0 7
63511: PUSH
63512: LD_VAR 0 10
63516: ST_TO_ADDR
// end ;
63517: LD_VAR 0 7
63521: RET
// export function EnemyInRange ( unit , dist ) ; begin
63522: LD_INT 0
63524: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63525: LD_ADDR_VAR 0 3
63529: PUSH
63530: LD_VAR 0 1
63534: PPUSH
63535: CALL_OW 255
63539: PPUSH
63540: LD_VAR 0 1
63544: PPUSH
63545: CALL_OW 250
63549: PPUSH
63550: LD_VAR 0 1
63554: PPUSH
63555: CALL_OW 251
63559: PPUSH
63560: LD_VAR 0 2
63564: PPUSH
63565: CALL 36924 0 4
63569: PUSH
63570: LD_INT 4
63572: ARRAY
63573: ST_TO_ADDR
// end ;
63574: LD_VAR 0 3
63578: RET
// export function PlayerSeeMe ( unit ) ; begin
63579: LD_INT 0
63581: PPUSH
// result := See ( your_side , unit ) ;
63582: LD_ADDR_VAR 0 2
63586: PUSH
63587: LD_OWVAR 2
63591: PPUSH
63592: LD_VAR 0 1
63596: PPUSH
63597: CALL_OW 292
63601: ST_TO_ADDR
// end ;
63602: LD_VAR 0 2
63606: RET
// export function ReverseDir ( unit ) ; begin
63607: LD_INT 0
63609: PPUSH
// if not unit then
63610: LD_VAR 0 1
63614: NOT
63615: IFFALSE 63619
// exit ;
63617: GO 63642
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63619: LD_ADDR_VAR 0 2
63623: PUSH
63624: LD_VAR 0 1
63628: PPUSH
63629: CALL_OW 254
63633: PUSH
63634: LD_INT 3
63636: PLUS
63637: PUSH
63638: LD_INT 6
63640: MOD
63641: ST_TO_ADDR
// end ;
63642: LD_VAR 0 2
63646: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63647: LD_INT 0
63649: PPUSH
63650: PPUSH
63651: PPUSH
63652: PPUSH
63653: PPUSH
63654: PPUSH
// if not unit or not hexes then
63655: LD_VAR 0 1
63659: NOT
63660: PUSH
63661: LD_VAR 0 2
63665: NOT
63666: OR
63667: IFFALSE 63671
// exit ;
63669: GO 63794
// dist := 9999 ;
63671: LD_ADDR_VAR 0 5
63675: PUSH
63676: LD_INT 9999
63678: ST_TO_ADDR
// for i = 1 to hexes do
63679: LD_ADDR_VAR 0 4
63683: PUSH
63684: DOUBLE
63685: LD_INT 1
63687: DEC
63688: ST_TO_ADDR
63689: LD_VAR 0 2
63693: PUSH
63694: FOR_TO
63695: IFFALSE 63782
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63697: LD_ADDR_VAR 0 6
63701: PUSH
63702: LD_VAR 0 1
63706: PPUSH
63707: LD_VAR 0 2
63711: PUSH
63712: LD_VAR 0 4
63716: ARRAY
63717: PUSH
63718: LD_INT 1
63720: ARRAY
63721: PPUSH
63722: LD_VAR 0 2
63726: PUSH
63727: LD_VAR 0 4
63731: ARRAY
63732: PUSH
63733: LD_INT 2
63735: ARRAY
63736: PPUSH
63737: CALL_OW 297
63741: ST_TO_ADDR
// if tdist < dist then
63742: LD_VAR 0 6
63746: PUSH
63747: LD_VAR 0 5
63751: LESS
63752: IFFALSE 63780
// begin hex := hexes [ i ] ;
63754: LD_ADDR_VAR 0 8
63758: PUSH
63759: LD_VAR 0 2
63763: PUSH
63764: LD_VAR 0 4
63768: ARRAY
63769: ST_TO_ADDR
// dist := tdist ;
63770: LD_ADDR_VAR 0 5
63774: PUSH
63775: LD_VAR 0 6
63779: ST_TO_ADDR
// end ; end ;
63780: GO 63694
63782: POP
63783: POP
// result := hex ;
63784: LD_ADDR_VAR 0 3
63788: PUSH
63789: LD_VAR 0 8
63793: ST_TO_ADDR
// end ;
63794: LD_VAR 0 3
63798: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63799: LD_INT 0
63801: PPUSH
63802: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63803: LD_VAR 0 1
63807: NOT
63808: PUSH
63809: LD_VAR 0 1
63813: PUSH
63814: LD_INT 21
63816: PUSH
63817: LD_INT 2
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 23
63826: PUSH
63827: LD_INT 2
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PPUSH
63838: CALL_OW 69
63842: IN
63843: NOT
63844: OR
63845: IFFALSE 63849
// exit ;
63847: GO 63896
// for i = 1 to 3 do
63849: LD_ADDR_VAR 0 3
63853: PUSH
63854: DOUBLE
63855: LD_INT 1
63857: DEC
63858: ST_TO_ADDR
63859: LD_INT 3
63861: PUSH
63862: FOR_TO
63863: IFFALSE 63894
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63865: LD_VAR 0 1
63869: PPUSH
63870: CALL_OW 250
63874: PPUSH
63875: LD_VAR 0 1
63879: PPUSH
63880: CALL_OW 251
63884: PPUSH
63885: LD_INT 1
63887: PPUSH
63888: CALL_OW 453
63892: GO 63862
63894: POP
63895: POP
// end ;
63896: LD_VAR 0 2
63900: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63901: LD_INT 0
63903: PPUSH
63904: PPUSH
63905: PPUSH
63906: PPUSH
63907: PPUSH
63908: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63909: LD_VAR 0 1
63913: NOT
63914: PUSH
63915: LD_VAR 0 2
63919: NOT
63920: OR
63921: PUSH
63922: LD_VAR 0 1
63926: PPUSH
63927: CALL_OW 314
63931: OR
63932: IFFALSE 63936
// exit ;
63934: GO 64377
// x := GetX ( enemy_unit ) ;
63936: LD_ADDR_VAR 0 7
63940: PUSH
63941: LD_VAR 0 2
63945: PPUSH
63946: CALL_OW 250
63950: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63951: LD_ADDR_VAR 0 8
63955: PUSH
63956: LD_VAR 0 2
63960: PPUSH
63961: CALL_OW 251
63965: ST_TO_ADDR
// if not x or not y then
63966: LD_VAR 0 7
63970: NOT
63971: PUSH
63972: LD_VAR 0 8
63976: NOT
63977: OR
63978: IFFALSE 63982
// exit ;
63980: GO 64377
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63982: LD_ADDR_VAR 0 6
63986: PUSH
63987: LD_VAR 0 7
63991: PPUSH
63992: LD_INT 0
63994: PPUSH
63995: LD_INT 4
63997: PPUSH
63998: CALL_OW 272
64002: PUSH
64003: LD_VAR 0 8
64007: PPUSH
64008: LD_INT 0
64010: PPUSH
64011: LD_INT 4
64013: PPUSH
64014: CALL_OW 273
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_VAR 0 7
64027: PPUSH
64028: LD_INT 1
64030: PPUSH
64031: LD_INT 4
64033: PPUSH
64034: CALL_OW 272
64038: PUSH
64039: LD_VAR 0 8
64043: PPUSH
64044: LD_INT 1
64046: PPUSH
64047: LD_INT 4
64049: PPUSH
64050: CALL_OW 273
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_VAR 0 7
64063: PPUSH
64064: LD_INT 2
64066: PPUSH
64067: LD_INT 4
64069: PPUSH
64070: CALL_OW 272
64074: PUSH
64075: LD_VAR 0 8
64079: PPUSH
64080: LD_INT 2
64082: PPUSH
64083: LD_INT 4
64085: PPUSH
64086: CALL_OW 273
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_VAR 0 7
64099: PPUSH
64100: LD_INT 3
64102: PPUSH
64103: LD_INT 4
64105: PPUSH
64106: CALL_OW 272
64110: PUSH
64111: LD_VAR 0 8
64115: PPUSH
64116: LD_INT 3
64118: PPUSH
64119: LD_INT 4
64121: PPUSH
64122: CALL_OW 273
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_VAR 0 7
64135: PPUSH
64136: LD_INT 4
64138: PPUSH
64139: LD_INT 4
64141: PPUSH
64142: CALL_OW 272
64146: PUSH
64147: LD_VAR 0 8
64151: PPUSH
64152: LD_INT 4
64154: PPUSH
64155: LD_INT 4
64157: PPUSH
64158: CALL_OW 273
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_VAR 0 7
64171: PPUSH
64172: LD_INT 5
64174: PPUSH
64175: LD_INT 4
64177: PPUSH
64178: CALL_OW 272
64182: PUSH
64183: LD_VAR 0 8
64187: PPUSH
64188: LD_INT 5
64190: PPUSH
64191: LD_INT 4
64193: PPUSH
64194: CALL_OW 273
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: ST_TO_ADDR
// for i = tmp downto 1 do
64211: LD_ADDR_VAR 0 4
64215: PUSH
64216: DOUBLE
64217: LD_VAR 0 6
64221: INC
64222: ST_TO_ADDR
64223: LD_INT 1
64225: PUSH
64226: FOR_DOWNTO
64227: IFFALSE 64328
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64229: LD_VAR 0 6
64233: PUSH
64234: LD_VAR 0 4
64238: ARRAY
64239: PUSH
64240: LD_INT 1
64242: ARRAY
64243: PPUSH
64244: LD_VAR 0 6
64248: PUSH
64249: LD_VAR 0 4
64253: ARRAY
64254: PUSH
64255: LD_INT 2
64257: ARRAY
64258: PPUSH
64259: CALL_OW 488
64263: NOT
64264: PUSH
64265: LD_VAR 0 6
64269: PUSH
64270: LD_VAR 0 4
64274: ARRAY
64275: PUSH
64276: LD_INT 1
64278: ARRAY
64279: PPUSH
64280: LD_VAR 0 6
64284: PUSH
64285: LD_VAR 0 4
64289: ARRAY
64290: PUSH
64291: LD_INT 2
64293: ARRAY
64294: PPUSH
64295: CALL_OW 428
64299: PUSH
64300: LD_INT 0
64302: NONEQUAL
64303: OR
64304: IFFALSE 64326
// tmp := Delete ( tmp , i ) ;
64306: LD_ADDR_VAR 0 6
64310: PUSH
64311: LD_VAR 0 6
64315: PPUSH
64316: LD_VAR 0 4
64320: PPUSH
64321: CALL_OW 3
64325: ST_TO_ADDR
64326: GO 64226
64328: POP
64329: POP
// j := GetClosestHex ( unit , tmp ) ;
64330: LD_ADDR_VAR 0 5
64334: PUSH
64335: LD_VAR 0 1
64339: PPUSH
64340: LD_VAR 0 6
64344: PPUSH
64345: CALL 63647 0 2
64349: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64350: LD_VAR 0 1
64354: PPUSH
64355: LD_VAR 0 5
64359: PUSH
64360: LD_INT 1
64362: ARRAY
64363: PPUSH
64364: LD_VAR 0 5
64368: PUSH
64369: LD_INT 2
64371: ARRAY
64372: PPUSH
64373: CALL_OW 111
// end ;
64377: LD_VAR 0 3
64381: RET
// export function PrepareApemanSoldier ( ) ; begin
64382: LD_INT 0
64384: PPUSH
// uc_nation := 0 ;
64385: LD_ADDR_OWVAR 21
64389: PUSH
64390: LD_INT 0
64392: ST_TO_ADDR
// hc_sex := sex_male ;
64393: LD_ADDR_OWVAR 27
64397: PUSH
64398: LD_INT 1
64400: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64401: LD_ADDR_OWVAR 28
64405: PUSH
64406: LD_INT 15
64408: ST_TO_ADDR
// hc_gallery :=  ;
64409: LD_ADDR_OWVAR 33
64413: PUSH
64414: LD_STRING 
64416: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64417: LD_ADDR_OWVAR 31
64421: PUSH
64422: LD_INT 0
64424: PPUSH
64425: LD_INT 3
64427: PPUSH
64428: CALL_OW 12
64432: PUSH
64433: LD_INT 0
64435: PPUSH
64436: LD_INT 3
64438: PPUSH
64439: CALL_OW 12
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: ST_TO_ADDR
// end ;
64456: LD_VAR 0 1
64460: RET
// export function PrepareApemanEngineer ( ) ; begin
64461: LD_INT 0
64463: PPUSH
// uc_nation := 0 ;
64464: LD_ADDR_OWVAR 21
64468: PUSH
64469: LD_INT 0
64471: ST_TO_ADDR
// hc_sex := sex_male ;
64472: LD_ADDR_OWVAR 27
64476: PUSH
64477: LD_INT 1
64479: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64480: LD_ADDR_OWVAR 28
64484: PUSH
64485: LD_INT 16
64487: ST_TO_ADDR
// hc_gallery :=  ;
64488: LD_ADDR_OWVAR 33
64492: PUSH
64493: LD_STRING 
64495: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64496: LD_ADDR_OWVAR 31
64500: PUSH
64501: LD_INT 0
64503: PPUSH
64504: LD_INT 3
64506: PPUSH
64507: CALL_OW 12
64511: PUSH
64512: LD_INT 0
64514: PPUSH
64515: LD_INT 3
64517: PPUSH
64518: CALL_OW 12
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: ST_TO_ADDR
// end ;
64535: LD_VAR 0 1
64539: RET
// export function PrepareApeman ( agressivity ) ; begin
64540: LD_INT 0
64542: PPUSH
// uc_side := 0 ;
64543: LD_ADDR_OWVAR 20
64547: PUSH
64548: LD_INT 0
64550: ST_TO_ADDR
// uc_nation := 0 ;
64551: LD_ADDR_OWVAR 21
64555: PUSH
64556: LD_INT 0
64558: ST_TO_ADDR
// hc_sex := sex_male ;
64559: LD_ADDR_OWVAR 27
64563: PUSH
64564: LD_INT 1
64566: ST_TO_ADDR
// hc_class := class_apeman ;
64567: LD_ADDR_OWVAR 28
64571: PUSH
64572: LD_INT 12
64574: ST_TO_ADDR
// hc_gallery :=  ;
64575: LD_ADDR_OWVAR 33
64579: PUSH
64580: LD_STRING 
64582: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64583: LD_ADDR_OWVAR 35
64587: PUSH
64588: LD_VAR 0 1
64592: NEG
64593: PPUSH
64594: LD_VAR 0 1
64598: PPUSH
64599: CALL_OW 12
64603: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64604: LD_ADDR_OWVAR 31
64608: PUSH
64609: LD_INT 0
64611: PPUSH
64612: LD_INT 3
64614: PPUSH
64615: CALL_OW 12
64619: PUSH
64620: LD_INT 0
64622: PPUSH
64623: LD_INT 3
64625: PPUSH
64626: CALL_OW 12
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: LD_INT 0
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: ST_TO_ADDR
// end ;
64643: LD_VAR 0 2
64647: RET
// export function PrepareTiger ( agressivity ) ; begin
64648: LD_INT 0
64650: PPUSH
// uc_side := 0 ;
64651: LD_ADDR_OWVAR 20
64655: PUSH
64656: LD_INT 0
64658: ST_TO_ADDR
// uc_nation := 0 ;
64659: LD_ADDR_OWVAR 21
64663: PUSH
64664: LD_INT 0
64666: ST_TO_ADDR
// hc_class := class_tiger ;
64667: LD_ADDR_OWVAR 28
64671: PUSH
64672: LD_INT 14
64674: ST_TO_ADDR
// hc_gallery :=  ;
64675: LD_ADDR_OWVAR 33
64679: PUSH
64680: LD_STRING 
64682: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64683: LD_ADDR_OWVAR 35
64687: PUSH
64688: LD_VAR 0 1
64692: NEG
64693: PPUSH
64694: LD_VAR 0 1
64698: PPUSH
64699: CALL_OW 12
64703: ST_TO_ADDR
// end ;
64704: LD_VAR 0 2
64708: RET
// export function PrepareEnchidna ( ) ; begin
64709: LD_INT 0
64711: PPUSH
// uc_side := 0 ;
64712: LD_ADDR_OWVAR 20
64716: PUSH
64717: LD_INT 0
64719: ST_TO_ADDR
// uc_nation := 0 ;
64720: LD_ADDR_OWVAR 21
64724: PUSH
64725: LD_INT 0
64727: ST_TO_ADDR
// hc_class := class_baggie ;
64728: LD_ADDR_OWVAR 28
64732: PUSH
64733: LD_INT 13
64735: ST_TO_ADDR
// hc_gallery :=  ;
64736: LD_ADDR_OWVAR 33
64740: PUSH
64741: LD_STRING 
64743: ST_TO_ADDR
// end ;
64744: LD_VAR 0 1
64748: RET
// export function PrepareFrog ( ) ; begin
64749: LD_INT 0
64751: PPUSH
// uc_side := 0 ;
64752: LD_ADDR_OWVAR 20
64756: PUSH
64757: LD_INT 0
64759: ST_TO_ADDR
// uc_nation := 0 ;
64760: LD_ADDR_OWVAR 21
64764: PUSH
64765: LD_INT 0
64767: ST_TO_ADDR
// hc_class := class_frog ;
64768: LD_ADDR_OWVAR 28
64772: PUSH
64773: LD_INT 19
64775: ST_TO_ADDR
// hc_gallery :=  ;
64776: LD_ADDR_OWVAR 33
64780: PUSH
64781: LD_STRING 
64783: ST_TO_ADDR
// end ;
64784: LD_VAR 0 1
64788: RET
// export function PrepareFish ( ) ; begin
64789: LD_INT 0
64791: PPUSH
// uc_side := 0 ;
64792: LD_ADDR_OWVAR 20
64796: PUSH
64797: LD_INT 0
64799: ST_TO_ADDR
// uc_nation := 0 ;
64800: LD_ADDR_OWVAR 21
64804: PUSH
64805: LD_INT 0
64807: ST_TO_ADDR
// hc_class := class_fish ;
64808: LD_ADDR_OWVAR 28
64812: PUSH
64813: LD_INT 20
64815: ST_TO_ADDR
// hc_gallery :=  ;
64816: LD_ADDR_OWVAR 33
64820: PUSH
64821: LD_STRING 
64823: ST_TO_ADDR
// end ;
64824: LD_VAR 0 1
64828: RET
// export function PrepareBird ( ) ; begin
64829: LD_INT 0
64831: PPUSH
// uc_side := 0 ;
64832: LD_ADDR_OWVAR 20
64836: PUSH
64837: LD_INT 0
64839: ST_TO_ADDR
// uc_nation := 0 ;
64840: LD_ADDR_OWVAR 21
64844: PUSH
64845: LD_INT 0
64847: ST_TO_ADDR
// hc_class := class_phororhacos ;
64848: LD_ADDR_OWVAR 28
64852: PUSH
64853: LD_INT 18
64855: ST_TO_ADDR
// hc_gallery :=  ;
64856: LD_ADDR_OWVAR 33
64860: PUSH
64861: LD_STRING 
64863: ST_TO_ADDR
// end ;
64864: LD_VAR 0 1
64868: RET
// export function PrepareHorse ( ) ; begin
64869: LD_INT 0
64871: PPUSH
// uc_side := 0 ;
64872: LD_ADDR_OWVAR 20
64876: PUSH
64877: LD_INT 0
64879: ST_TO_ADDR
// uc_nation := 0 ;
64880: LD_ADDR_OWVAR 21
64884: PUSH
64885: LD_INT 0
64887: ST_TO_ADDR
// hc_class := class_horse ;
64888: LD_ADDR_OWVAR 28
64892: PUSH
64893: LD_INT 21
64895: ST_TO_ADDR
// hc_gallery :=  ;
64896: LD_ADDR_OWVAR 33
64900: PUSH
64901: LD_STRING 
64903: ST_TO_ADDR
// end ;
64904: LD_VAR 0 1
64908: RET
// export function PrepareMastodont ( ) ; begin
64909: LD_INT 0
64911: PPUSH
// uc_side := 0 ;
64912: LD_ADDR_OWVAR 20
64916: PUSH
64917: LD_INT 0
64919: ST_TO_ADDR
// uc_nation := 0 ;
64920: LD_ADDR_OWVAR 21
64924: PUSH
64925: LD_INT 0
64927: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64928: LD_ADDR_OWVAR 37
64932: PUSH
64933: LD_INT 31
64935: ST_TO_ADDR
// vc_control := control_rider ;
64936: LD_ADDR_OWVAR 38
64940: PUSH
64941: LD_INT 4
64943: ST_TO_ADDR
// end ;
64944: LD_VAR 0 1
64948: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64949: LD_INT 0
64951: PPUSH
64952: PPUSH
64953: PPUSH
// uc_side = 0 ;
64954: LD_ADDR_OWVAR 20
64958: PUSH
64959: LD_INT 0
64961: ST_TO_ADDR
// uc_nation = 0 ;
64962: LD_ADDR_OWVAR 21
64966: PUSH
64967: LD_INT 0
64969: ST_TO_ADDR
// InitHc_All ( ) ;
64970: CALL_OW 584
// InitVc ;
64974: CALL_OW 20
// if mastodonts then
64978: LD_VAR 0 6
64982: IFFALSE 65049
// for i = 1 to mastodonts do
64984: LD_ADDR_VAR 0 11
64988: PUSH
64989: DOUBLE
64990: LD_INT 1
64992: DEC
64993: ST_TO_ADDR
64994: LD_VAR 0 6
64998: PUSH
64999: FOR_TO
65000: IFFALSE 65047
// begin vc_chassis := 31 ;
65002: LD_ADDR_OWVAR 37
65006: PUSH
65007: LD_INT 31
65009: ST_TO_ADDR
// vc_control := control_rider ;
65010: LD_ADDR_OWVAR 38
65014: PUSH
65015: LD_INT 4
65017: ST_TO_ADDR
// animal := CreateVehicle ;
65018: LD_ADDR_VAR 0 12
65022: PUSH
65023: CALL_OW 45
65027: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65028: LD_VAR 0 12
65032: PPUSH
65033: LD_VAR 0 8
65037: PPUSH
65038: LD_INT 0
65040: PPUSH
65041: CALL 67184 0 3
// end ;
65045: GO 64999
65047: POP
65048: POP
// if horses then
65049: LD_VAR 0 5
65053: IFFALSE 65120
// for i = 1 to horses do
65055: LD_ADDR_VAR 0 11
65059: PUSH
65060: DOUBLE
65061: LD_INT 1
65063: DEC
65064: ST_TO_ADDR
65065: LD_VAR 0 5
65069: PUSH
65070: FOR_TO
65071: IFFALSE 65118
// begin hc_class := 21 ;
65073: LD_ADDR_OWVAR 28
65077: PUSH
65078: LD_INT 21
65080: ST_TO_ADDR
// hc_gallery :=  ;
65081: LD_ADDR_OWVAR 33
65085: PUSH
65086: LD_STRING 
65088: ST_TO_ADDR
// animal := CreateHuman ;
65089: LD_ADDR_VAR 0 12
65093: PUSH
65094: CALL_OW 44
65098: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65099: LD_VAR 0 12
65103: PPUSH
65104: LD_VAR 0 8
65108: PPUSH
65109: LD_INT 0
65111: PPUSH
65112: CALL 67184 0 3
// end ;
65116: GO 65070
65118: POP
65119: POP
// if birds then
65120: LD_VAR 0 1
65124: IFFALSE 65191
// for i = 1 to birds do
65126: LD_ADDR_VAR 0 11
65130: PUSH
65131: DOUBLE
65132: LD_INT 1
65134: DEC
65135: ST_TO_ADDR
65136: LD_VAR 0 1
65140: PUSH
65141: FOR_TO
65142: IFFALSE 65189
// begin hc_class = 18 ;
65144: LD_ADDR_OWVAR 28
65148: PUSH
65149: LD_INT 18
65151: ST_TO_ADDR
// hc_gallery =  ;
65152: LD_ADDR_OWVAR 33
65156: PUSH
65157: LD_STRING 
65159: ST_TO_ADDR
// animal := CreateHuman ;
65160: LD_ADDR_VAR 0 12
65164: PUSH
65165: CALL_OW 44
65169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65170: LD_VAR 0 12
65174: PPUSH
65175: LD_VAR 0 8
65179: PPUSH
65180: LD_INT 0
65182: PPUSH
65183: CALL 67184 0 3
// end ;
65187: GO 65141
65189: POP
65190: POP
// if tigers then
65191: LD_VAR 0 2
65195: IFFALSE 65279
// for i = 1 to tigers do
65197: LD_ADDR_VAR 0 11
65201: PUSH
65202: DOUBLE
65203: LD_INT 1
65205: DEC
65206: ST_TO_ADDR
65207: LD_VAR 0 2
65211: PUSH
65212: FOR_TO
65213: IFFALSE 65277
// begin hc_class = class_tiger ;
65215: LD_ADDR_OWVAR 28
65219: PUSH
65220: LD_INT 14
65222: ST_TO_ADDR
// hc_gallery =  ;
65223: LD_ADDR_OWVAR 33
65227: PUSH
65228: LD_STRING 
65230: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65231: LD_ADDR_OWVAR 35
65235: PUSH
65236: LD_INT 7
65238: NEG
65239: PPUSH
65240: LD_INT 7
65242: PPUSH
65243: CALL_OW 12
65247: ST_TO_ADDR
// animal := CreateHuman ;
65248: LD_ADDR_VAR 0 12
65252: PUSH
65253: CALL_OW 44
65257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65258: LD_VAR 0 12
65262: PPUSH
65263: LD_VAR 0 8
65267: PPUSH
65268: LD_INT 0
65270: PPUSH
65271: CALL 67184 0 3
// end ;
65275: GO 65212
65277: POP
65278: POP
// if apemans then
65279: LD_VAR 0 3
65283: IFFALSE 65406
// for i = 1 to apemans do
65285: LD_ADDR_VAR 0 11
65289: PUSH
65290: DOUBLE
65291: LD_INT 1
65293: DEC
65294: ST_TO_ADDR
65295: LD_VAR 0 3
65299: PUSH
65300: FOR_TO
65301: IFFALSE 65404
// begin hc_class = class_apeman ;
65303: LD_ADDR_OWVAR 28
65307: PUSH
65308: LD_INT 12
65310: ST_TO_ADDR
// hc_gallery =  ;
65311: LD_ADDR_OWVAR 33
65315: PUSH
65316: LD_STRING 
65318: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65319: LD_ADDR_OWVAR 35
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PPUSH
65328: LD_INT 2
65330: PPUSH
65331: CALL_OW 12
65335: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65336: LD_ADDR_OWVAR 31
65340: PUSH
65341: LD_INT 1
65343: PPUSH
65344: LD_INT 3
65346: PPUSH
65347: CALL_OW 12
65351: PUSH
65352: LD_INT 1
65354: PPUSH
65355: LD_INT 3
65357: PPUSH
65358: CALL_OW 12
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: ST_TO_ADDR
// animal := CreateHuman ;
65375: LD_ADDR_VAR 0 12
65379: PUSH
65380: CALL_OW 44
65384: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65385: LD_VAR 0 12
65389: PPUSH
65390: LD_VAR 0 8
65394: PPUSH
65395: LD_INT 0
65397: PPUSH
65398: CALL 67184 0 3
// end ;
65402: GO 65300
65404: POP
65405: POP
// if enchidnas then
65406: LD_VAR 0 4
65410: IFFALSE 65477
// for i = 1 to enchidnas do
65412: LD_ADDR_VAR 0 11
65416: PUSH
65417: DOUBLE
65418: LD_INT 1
65420: DEC
65421: ST_TO_ADDR
65422: LD_VAR 0 4
65426: PUSH
65427: FOR_TO
65428: IFFALSE 65475
// begin hc_class = 13 ;
65430: LD_ADDR_OWVAR 28
65434: PUSH
65435: LD_INT 13
65437: ST_TO_ADDR
// hc_gallery =  ;
65438: LD_ADDR_OWVAR 33
65442: PUSH
65443: LD_STRING 
65445: ST_TO_ADDR
// animal := CreateHuman ;
65446: LD_ADDR_VAR 0 12
65450: PUSH
65451: CALL_OW 44
65455: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65456: LD_VAR 0 12
65460: PPUSH
65461: LD_VAR 0 8
65465: PPUSH
65466: LD_INT 0
65468: PPUSH
65469: CALL 67184 0 3
// end ;
65473: GO 65427
65475: POP
65476: POP
// if fishes then
65477: LD_VAR 0 7
65481: IFFALSE 65548
// for i = 1 to fishes do
65483: LD_ADDR_VAR 0 11
65487: PUSH
65488: DOUBLE
65489: LD_INT 1
65491: DEC
65492: ST_TO_ADDR
65493: LD_VAR 0 7
65497: PUSH
65498: FOR_TO
65499: IFFALSE 65546
// begin hc_class = 20 ;
65501: LD_ADDR_OWVAR 28
65505: PUSH
65506: LD_INT 20
65508: ST_TO_ADDR
// hc_gallery =  ;
65509: LD_ADDR_OWVAR 33
65513: PUSH
65514: LD_STRING 
65516: ST_TO_ADDR
// animal := CreateHuman ;
65517: LD_ADDR_VAR 0 12
65521: PUSH
65522: CALL_OW 44
65526: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65527: LD_VAR 0 12
65531: PPUSH
65532: LD_VAR 0 9
65536: PPUSH
65537: LD_INT 0
65539: PPUSH
65540: CALL 67184 0 3
// end ;
65544: GO 65498
65546: POP
65547: POP
// end ;
65548: LD_VAR 0 10
65552: RET
// export function WantHeal ( sci , unit ) ; begin
65553: LD_INT 0
65555: PPUSH
// if GetTaskList ( sci ) > 0 then
65556: LD_VAR 0 1
65560: PPUSH
65561: CALL_OW 437
65565: PUSH
65566: LD_INT 0
65568: GREATER
65569: IFFALSE 65639
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65571: LD_VAR 0 1
65575: PPUSH
65576: CALL_OW 437
65580: PUSH
65581: LD_INT 1
65583: ARRAY
65584: PUSH
65585: LD_INT 1
65587: ARRAY
65588: PUSH
65589: LD_STRING l
65591: EQUAL
65592: PUSH
65593: LD_VAR 0 1
65597: PPUSH
65598: CALL_OW 437
65602: PUSH
65603: LD_INT 1
65605: ARRAY
65606: PUSH
65607: LD_INT 4
65609: ARRAY
65610: PUSH
65611: LD_VAR 0 2
65615: EQUAL
65616: AND
65617: IFFALSE 65629
// result := true else
65619: LD_ADDR_VAR 0 3
65623: PUSH
65624: LD_INT 1
65626: ST_TO_ADDR
65627: GO 65637
// result := false ;
65629: LD_ADDR_VAR 0 3
65633: PUSH
65634: LD_INT 0
65636: ST_TO_ADDR
// end else
65637: GO 65647
// result := false ;
65639: LD_ADDR_VAR 0 3
65643: PUSH
65644: LD_INT 0
65646: ST_TO_ADDR
// end ;
65647: LD_VAR 0 3
65651: RET
// export function HealTarget ( sci ) ; begin
65652: LD_INT 0
65654: PPUSH
// if not sci then
65655: LD_VAR 0 1
65659: NOT
65660: IFFALSE 65664
// exit ;
65662: GO 65729
// result := 0 ;
65664: LD_ADDR_VAR 0 2
65668: PUSH
65669: LD_INT 0
65671: ST_TO_ADDR
// if GetTaskList ( sci ) then
65672: LD_VAR 0 1
65676: PPUSH
65677: CALL_OW 437
65681: IFFALSE 65729
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65683: LD_VAR 0 1
65687: PPUSH
65688: CALL_OW 437
65692: PUSH
65693: LD_INT 1
65695: ARRAY
65696: PUSH
65697: LD_INT 1
65699: ARRAY
65700: PUSH
65701: LD_STRING l
65703: EQUAL
65704: IFFALSE 65729
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65706: LD_ADDR_VAR 0 2
65710: PUSH
65711: LD_VAR 0 1
65715: PPUSH
65716: CALL_OW 437
65720: PUSH
65721: LD_INT 1
65723: ARRAY
65724: PUSH
65725: LD_INT 4
65727: ARRAY
65728: ST_TO_ADDR
// end ;
65729: LD_VAR 0 2
65733: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65734: LD_INT 0
65736: PPUSH
65737: PPUSH
65738: PPUSH
65739: PPUSH
// if not base_units then
65740: LD_VAR 0 1
65744: NOT
65745: IFFALSE 65749
// exit ;
65747: GO 65836
// result := false ;
65749: LD_ADDR_VAR 0 2
65753: PUSH
65754: LD_INT 0
65756: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65757: LD_ADDR_VAR 0 5
65761: PUSH
65762: LD_VAR 0 1
65766: PPUSH
65767: LD_INT 21
65769: PUSH
65770: LD_INT 3
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PPUSH
65777: CALL_OW 72
65781: ST_TO_ADDR
// if not tmp then
65782: LD_VAR 0 5
65786: NOT
65787: IFFALSE 65791
// exit ;
65789: GO 65836
// for i in tmp do
65791: LD_ADDR_VAR 0 3
65795: PUSH
65796: LD_VAR 0 5
65800: PUSH
65801: FOR_IN
65802: IFFALSE 65834
// begin result := EnemyInRange ( i , 22 ) ;
65804: LD_ADDR_VAR 0 2
65808: PUSH
65809: LD_VAR 0 3
65813: PPUSH
65814: LD_INT 22
65816: PPUSH
65817: CALL 63522 0 2
65821: ST_TO_ADDR
// if result then
65822: LD_VAR 0 2
65826: IFFALSE 65832
// exit ;
65828: POP
65829: POP
65830: GO 65836
// end ;
65832: GO 65801
65834: POP
65835: POP
// end ;
65836: LD_VAR 0 2
65840: RET
// export function FilterByTag ( units , tag ) ; begin
65841: LD_INT 0
65843: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65844: LD_ADDR_VAR 0 3
65848: PUSH
65849: LD_VAR 0 1
65853: PPUSH
65854: LD_INT 120
65856: PUSH
65857: LD_VAR 0 2
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PPUSH
65866: CALL_OW 72
65870: ST_TO_ADDR
// end ;
65871: LD_VAR 0 3
65875: RET
// export function IsDriver ( un ) ; begin
65876: LD_INT 0
65878: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65879: LD_ADDR_VAR 0 2
65883: PUSH
65884: LD_VAR 0 1
65888: PUSH
65889: LD_INT 55
65891: PUSH
65892: EMPTY
65893: LIST
65894: PPUSH
65895: CALL_OW 69
65899: IN
65900: ST_TO_ADDR
// end ;
65901: LD_VAR 0 2
65905: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65906: LD_INT 0
65908: PPUSH
65909: PPUSH
// list := [ ] ;
65910: LD_ADDR_VAR 0 5
65914: PUSH
65915: EMPTY
65916: ST_TO_ADDR
// case d of 0 :
65917: LD_VAR 0 3
65921: PUSH
65922: LD_INT 0
65924: DOUBLE
65925: EQUAL
65926: IFTRUE 65930
65928: GO 66063
65930: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65931: LD_ADDR_VAR 0 5
65935: PUSH
65936: LD_VAR 0 1
65940: PUSH
65941: LD_INT 4
65943: MINUS
65944: PUSH
65945: LD_VAR 0 2
65949: PUSH
65950: LD_INT 4
65952: MINUS
65953: PUSH
65954: LD_INT 2
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: LIST
65961: PUSH
65962: LD_VAR 0 1
65966: PUSH
65967: LD_INT 3
65969: MINUS
65970: PUSH
65971: LD_VAR 0 2
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: LIST
65983: PUSH
65984: LD_VAR 0 1
65988: PUSH
65989: LD_INT 4
65991: PLUS
65992: PUSH
65993: LD_VAR 0 2
65997: PUSH
65998: LD_INT 4
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: PUSH
66006: LD_VAR 0 1
66010: PUSH
66011: LD_INT 3
66013: PLUS
66014: PUSH
66015: LD_VAR 0 2
66019: PUSH
66020: LD_INT 3
66022: PLUS
66023: PUSH
66024: LD_INT 5
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: LIST
66031: PUSH
66032: LD_VAR 0 1
66036: PUSH
66037: LD_VAR 0 2
66041: PUSH
66042: LD_INT 4
66044: PLUS
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: LIST
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: ST_TO_ADDR
// end ; 1 :
66061: GO 66761
66063: LD_INT 1
66065: DOUBLE
66066: EQUAL
66067: IFTRUE 66071
66069: GO 66204
66071: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66072: LD_ADDR_VAR 0 5
66076: PUSH
66077: LD_VAR 0 1
66081: PUSH
66082: LD_VAR 0 2
66086: PUSH
66087: LD_INT 4
66089: MINUS
66090: PUSH
66091: LD_INT 3
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: LIST
66098: PUSH
66099: LD_VAR 0 1
66103: PUSH
66104: LD_INT 3
66106: MINUS
66107: PUSH
66108: LD_VAR 0 2
66112: PUSH
66113: LD_INT 3
66115: MINUS
66116: PUSH
66117: LD_INT 2
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: PUSH
66125: LD_VAR 0 1
66129: PUSH
66130: LD_INT 4
66132: MINUS
66133: PUSH
66134: LD_VAR 0 2
66138: PUSH
66139: LD_INT 1
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: LIST
66146: PUSH
66147: LD_VAR 0 1
66151: PUSH
66152: LD_VAR 0 2
66156: PUSH
66157: LD_INT 3
66159: PLUS
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: LIST
66168: PUSH
66169: LD_VAR 0 1
66173: PUSH
66174: LD_INT 4
66176: PLUS
66177: PUSH
66178: LD_VAR 0 2
66182: PUSH
66183: LD_INT 4
66185: PLUS
66186: PUSH
66187: LD_INT 5
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: LIST
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: ST_TO_ADDR
// end ; 2 :
66202: GO 66761
66204: LD_INT 2
66206: DOUBLE
66207: EQUAL
66208: IFTRUE 66212
66210: GO 66341
66212: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66213: LD_ADDR_VAR 0 5
66217: PUSH
66218: LD_VAR 0 1
66222: PUSH
66223: LD_VAR 0 2
66227: PUSH
66228: LD_INT 3
66230: MINUS
66231: PUSH
66232: LD_INT 3
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: PUSH
66240: LD_VAR 0 1
66244: PUSH
66245: LD_INT 4
66247: PLUS
66248: PUSH
66249: LD_VAR 0 2
66253: PUSH
66254: LD_INT 4
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: PUSH
66262: LD_VAR 0 1
66266: PUSH
66267: LD_VAR 0 2
66271: PUSH
66272: LD_INT 4
66274: PLUS
66275: PUSH
66276: LD_INT 0
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: LIST
66283: PUSH
66284: LD_VAR 0 1
66288: PUSH
66289: LD_INT 3
66291: MINUS
66292: PUSH
66293: LD_VAR 0 2
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: LIST
66305: PUSH
66306: LD_VAR 0 1
66310: PUSH
66311: LD_INT 4
66313: MINUS
66314: PUSH
66315: LD_VAR 0 2
66319: PUSH
66320: LD_INT 4
66322: MINUS
66323: PUSH
66324: LD_INT 2
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: LIST
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: ST_TO_ADDR
// end ; 3 :
66339: GO 66761
66341: LD_INT 3
66343: DOUBLE
66344: EQUAL
66345: IFTRUE 66349
66347: GO 66482
66349: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66350: LD_ADDR_VAR 0 5
66354: PUSH
66355: LD_VAR 0 1
66359: PUSH
66360: LD_INT 3
66362: PLUS
66363: PUSH
66364: LD_VAR 0 2
66368: PUSH
66369: LD_INT 4
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: LIST
66376: PUSH
66377: LD_VAR 0 1
66381: PUSH
66382: LD_INT 4
66384: PLUS
66385: PUSH
66386: LD_VAR 0 2
66390: PUSH
66391: LD_INT 4
66393: PLUS
66394: PUSH
66395: LD_INT 5
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: LIST
66402: PUSH
66403: LD_VAR 0 1
66407: PUSH
66408: LD_INT 4
66410: MINUS
66411: PUSH
66412: LD_VAR 0 2
66416: PUSH
66417: LD_INT 1
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: LIST
66424: PUSH
66425: LD_VAR 0 1
66429: PUSH
66430: LD_VAR 0 2
66434: PUSH
66435: LD_INT 4
66437: MINUS
66438: PUSH
66439: LD_INT 3
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: LIST
66446: PUSH
66447: LD_VAR 0 1
66451: PUSH
66452: LD_INT 3
66454: MINUS
66455: PUSH
66456: LD_VAR 0 2
66460: PUSH
66461: LD_INT 3
66463: MINUS
66464: PUSH
66465: LD_INT 2
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: LIST
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: ST_TO_ADDR
// end ; 4 :
66480: GO 66761
66482: LD_INT 4
66484: DOUBLE
66485: EQUAL
66486: IFTRUE 66490
66488: GO 66623
66490: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66491: LD_ADDR_VAR 0 5
66495: PUSH
66496: LD_VAR 0 1
66500: PUSH
66501: LD_VAR 0 2
66505: PUSH
66506: LD_INT 4
66508: PLUS
66509: PUSH
66510: LD_INT 0
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: PUSH
66518: LD_VAR 0 1
66522: PUSH
66523: LD_INT 3
66525: PLUS
66526: PUSH
66527: LD_VAR 0 2
66531: PUSH
66532: LD_INT 3
66534: PLUS
66535: PUSH
66536: LD_INT 5
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: LIST
66543: PUSH
66544: LD_VAR 0 1
66548: PUSH
66549: LD_INT 4
66551: PLUS
66552: PUSH
66553: LD_VAR 0 2
66557: PUSH
66558: LD_INT 4
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: LIST
66565: PUSH
66566: LD_VAR 0 1
66570: PUSH
66571: LD_VAR 0 2
66575: PUSH
66576: LD_INT 3
66578: MINUS
66579: PUSH
66580: LD_INT 3
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: LIST
66587: PUSH
66588: LD_VAR 0 1
66592: PUSH
66593: LD_INT 4
66595: MINUS
66596: PUSH
66597: LD_VAR 0 2
66601: PUSH
66602: LD_INT 4
66604: MINUS
66605: PUSH
66606: LD_INT 2
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: LIST
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: ST_TO_ADDR
// end ; 5 :
66621: GO 66761
66623: LD_INT 5
66625: DOUBLE
66626: EQUAL
66627: IFTRUE 66631
66629: GO 66760
66631: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66632: LD_ADDR_VAR 0 5
66636: PUSH
66637: LD_VAR 0 1
66641: PUSH
66642: LD_INT 4
66644: MINUS
66645: PUSH
66646: LD_VAR 0 2
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: PUSH
66659: LD_VAR 0 1
66663: PUSH
66664: LD_VAR 0 2
66668: PUSH
66669: LD_INT 4
66671: MINUS
66672: PUSH
66673: LD_INT 3
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: LIST
66680: PUSH
66681: LD_VAR 0 1
66685: PUSH
66686: LD_INT 4
66688: PLUS
66689: PUSH
66690: LD_VAR 0 2
66694: PUSH
66695: LD_INT 4
66697: PLUS
66698: PUSH
66699: LD_INT 5
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: PUSH
66707: LD_VAR 0 1
66711: PUSH
66712: LD_INT 3
66714: PLUS
66715: PUSH
66716: LD_VAR 0 2
66720: PUSH
66721: LD_INT 4
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: LIST
66728: PUSH
66729: LD_VAR 0 1
66733: PUSH
66734: LD_VAR 0 2
66738: PUSH
66739: LD_INT 3
66741: PLUS
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: LIST
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: ST_TO_ADDR
// end ; end ;
66758: GO 66761
66760: POP
// result := list ;
66761: LD_ADDR_VAR 0 4
66765: PUSH
66766: LD_VAR 0 5
66770: ST_TO_ADDR
// end ;
66771: LD_VAR 0 4
66775: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66776: LD_INT 0
66778: PPUSH
66779: PPUSH
66780: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66781: LD_VAR 0 1
66785: NOT
66786: PUSH
66787: LD_VAR 0 2
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: LD_INT 2
66797: PUSH
66798: LD_INT 3
66800: PUSH
66801: LD_INT 4
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: IN
66810: NOT
66811: OR
66812: IFFALSE 66816
// exit ;
66814: GO 66908
// tmp := [ ] ;
66816: LD_ADDR_VAR 0 5
66820: PUSH
66821: EMPTY
66822: ST_TO_ADDR
// for i in units do
66823: LD_ADDR_VAR 0 4
66827: PUSH
66828: LD_VAR 0 1
66832: PUSH
66833: FOR_IN
66834: IFFALSE 66877
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66836: LD_ADDR_VAR 0 5
66840: PUSH
66841: LD_VAR 0 5
66845: PPUSH
66846: LD_VAR 0 5
66850: PUSH
66851: LD_INT 1
66853: PLUS
66854: PPUSH
66855: LD_VAR 0 4
66859: PPUSH
66860: LD_VAR 0 2
66864: PPUSH
66865: CALL_OW 259
66869: PPUSH
66870: CALL_OW 2
66874: ST_TO_ADDR
66875: GO 66833
66877: POP
66878: POP
// if not tmp then
66879: LD_VAR 0 5
66883: NOT
66884: IFFALSE 66888
// exit ;
66886: GO 66908
// result := SortListByListDesc ( units , tmp ) ;
66888: LD_ADDR_VAR 0 3
66892: PUSH
66893: LD_VAR 0 1
66897: PPUSH
66898: LD_VAR 0 5
66902: PPUSH
66903: CALL_OW 77
66907: ST_TO_ADDR
// end ;
66908: LD_VAR 0 3
66912: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66913: LD_INT 0
66915: PPUSH
66916: PPUSH
66917: PPUSH
// result := false ;
66918: LD_ADDR_VAR 0 3
66922: PUSH
66923: LD_INT 0
66925: ST_TO_ADDR
// x := GetX ( building ) ;
66926: LD_ADDR_VAR 0 4
66930: PUSH
66931: LD_VAR 0 2
66935: PPUSH
66936: CALL_OW 250
66940: ST_TO_ADDR
// y := GetY ( building ) ;
66941: LD_ADDR_VAR 0 5
66945: PUSH
66946: LD_VAR 0 2
66950: PPUSH
66951: CALL_OW 251
66955: ST_TO_ADDR
// if not building or not x or not y then
66956: LD_VAR 0 2
66960: NOT
66961: PUSH
66962: LD_VAR 0 4
66966: NOT
66967: OR
66968: PUSH
66969: LD_VAR 0 5
66973: NOT
66974: OR
66975: IFFALSE 66979
// exit ;
66977: GO 67071
// if GetTaskList ( unit ) then
66979: LD_VAR 0 1
66983: PPUSH
66984: CALL_OW 437
66988: IFFALSE 67071
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66990: LD_STRING e
66992: PUSH
66993: LD_VAR 0 1
66997: PPUSH
66998: CALL_OW 437
67002: PUSH
67003: LD_INT 1
67005: ARRAY
67006: PUSH
67007: LD_INT 1
67009: ARRAY
67010: EQUAL
67011: PUSH
67012: LD_VAR 0 4
67016: PUSH
67017: LD_VAR 0 1
67021: PPUSH
67022: CALL_OW 437
67026: PUSH
67027: LD_INT 1
67029: ARRAY
67030: PUSH
67031: LD_INT 2
67033: ARRAY
67034: EQUAL
67035: AND
67036: PUSH
67037: LD_VAR 0 5
67041: PUSH
67042: LD_VAR 0 1
67046: PPUSH
67047: CALL_OW 437
67051: PUSH
67052: LD_INT 1
67054: ARRAY
67055: PUSH
67056: LD_INT 3
67058: ARRAY
67059: EQUAL
67060: AND
67061: IFFALSE 67071
// result := true end ;
67063: LD_ADDR_VAR 0 3
67067: PUSH
67068: LD_INT 1
67070: ST_TO_ADDR
// end ;
67071: LD_VAR 0 3
67075: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67076: LD_INT 0
67078: PPUSH
// result := false ;
67079: LD_ADDR_VAR 0 4
67083: PUSH
67084: LD_INT 0
67086: ST_TO_ADDR
// if GetTaskList ( unit ) then
67087: LD_VAR 0 1
67091: PPUSH
67092: CALL_OW 437
67096: IFFALSE 67179
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67098: LD_STRING M
67100: PUSH
67101: LD_VAR 0 1
67105: PPUSH
67106: CALL_OW 437
67110: PUSH
67111: LD_INT 1
67113: ARRAY
67114: PUSH
67115: LD_INT 1
67117: ARRAY
67118: EQUAL
67119: PUSH
67120: LD_VAR 0 2
67124: PUSH
67125: LD_VAR 0 1
67129: PPUSH
67130: CALL_OW 437
67134: PUSH
67135: LD_INT 1
67137: ARRAY
67138: PUSH
67139: LD_INT 2
67141: ARRAY
67142: EQUAL
67143: AND
67144: PUSH
67145: LD_VAR 0 3
67149: PUSH
67150: LD_VAR 0 1
67154: PPUSH
67155: CALL_OW 437
67159: PUSH
67160: LD_INT 1
67162: ARRAY
67163: PUSH
67164: LD_INT 3
67166: ARRAY
67167: EQUAL
67168: AND
67169: IFFALSE 67179
// result := true ;
67171: LD_ADDR_VAR 0 4
67175: PUSH
67176: LD_INT 1
67178: ST_TO_ADDR
// end ; end ;
67179: LD_VAR 0 4
67183: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67184: LD_INT 0
67186: PPUSH
67187: PPUSH
67188: PPUSH
67189: PPUSH
// if not unit or not area then
67190: LD_VAR 0 1
67194: NOT
67195: PUSH
67196: LD_VAR 0 2
67200: NOT
67201: OR
67202: IFFALSE 67206
// exit ;
67204: GO 67370
// tmp := AreaToList ( area , i ) ;
67206: LD_ADDR_VAR 0 6
67210: PUSH
67211: LD_VAR 0 2
67215: PPUSH
67216: LD_VAR 0 5
67220: PPUSH
67221: CALL_OW 517
67225: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67226: LD_ADDR_VAR 0 5
67230: PUSH
67231: DOUBLE
67232: LD_INT 1
67234: DEC
67235: ST_TO_ADDR
67236: LD_VAR 0 6
67240: PUSH
67241: LD_INT 1
67243: ARRAY
67244: PUSH
67245: FOR_TO
67246: IFFALSE 67368
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67248: LD_ADDR_VAR 0 7
67252: PUSH
67253: LD_VAR 0 6
67257: PUSH
67258: LD_INT 1
67260: ARRAY
67261: PUSH
67262: LD_VAR 0 5
67266: ARRAY
67267: PUSH
67268: LD_VAR 0 6
67272: PUSH
67273: LD_INT 2
67275: ARRAY
67276: PUSH
67277: LD_VAR 0 5
67281: ARRAY
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67287: LD_VAR 0 7
67291: PUSH
67292: LD_INT 1
67294: ARRAY
67295: PPUSH
67296: LD_VAR 0 7
67300: PUSH
67301: LD_INT 2
67303: ARRAY
67304: PPUSH
67305: CALL_OW 428
67309: PUSH
67310: LD_INT 0
67312: EQUAL
67313: IFFALSE 67366
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67315: LD_VAR 0 1
67319: PPUSH
67320: LD_VAR 0 7
67324: PUSH
67325: LD_INT 1
67327: ARRAY
67328: PPUSH
67329: LD_VAR 0 7
67333: PUSH
67334: LD_INT 2
67336: ARRAY
67337: PPUSH
67338: LD_VAR 0 3
67342: PPUSH
67343: CALL_OW 48
// result := IsPlaced ( unit ) ;
67347: LD_ADDR_VAR 0 4
67351: PUSH
67352: LD_VAR 0 1
67356: PPUSH
67357: CALL_OW 305
67361: ST_TO_ADDR
// exit ;
67362: POP
67363: POP
67364: GO 67370
// end ; end ;
67366: GO 67245
67368: POP
67369: POP
// end ;
67370: LD_VAR 0 4
67374: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67375: LD_INT 0
67377: PPUSH
67378: PPUSH
67379: PPUSH
// if not side or side > 8 then
67380: LD_VAR 0 1
67384: NOT
67385: PUSH
67386: LD_VAR 0 1
67390: PUSH
67391: LD_INT 8
67393: GREATER
67394: OR
67395: IFFALSE 67399
// exit ;
67397: GO 67586
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67399: LD_ADDR_VAR 0 4
67403: PUSH
67404: LD_INT 22
67406: PUSH
67407: LD_VAR 0 1
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 21
67418: PUSH
67419: LD_INT 3
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PPUSH
67430: CALL_OW 69
67434: ST_TO_ADDR
// if not tmp then
67435: LD_VAR 0 4
67439: NOT
67440: IFFALSE 67444
// exit ;
67442: GO 67586
// enable_addtolog := true ;
67444: LD_ADDR_OWVAR 81
67448: PUSH
67449: LD_INT 1
67451: ST_TO_ADDR
// AddToLog ( [ ) ;
67452: LD_STRING [
67454: PPUSH
67455: CALL_OW 561
// for i in tmp do
67459: LD_ADDR_VAR 0 3
67463: PUSH
67464: LD_VAR 0 4
67468: PUSH
67469: FOR_IN
67470: IFFALSE 67577
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67472: LD_STRING [
67474: PUSH
67475: LD_VAR 0 3
67479: PPUSH
67480: CALL_OW 266
67484: STR
67485: PUSH
67486: LD_STRING , 
67488: STR
67489: PUSH
67490: LD_VAR 0 3
67494: PPUSH
67495: CALL_OW 250
67499: STR
67500: PUSH
67501: LD_STRING , 
67503: STR
67504: PUSH
67505: LD_VAR 0 3
67509: PPUSH
67510: CALL_OW 251
67514: STR
67515: PUSH
67516: LD_STRING , 
67518: STR
67519: PUSH
67520: LD_VAR 0 3
67524: PPUSH
67525: CALL_OW 254
67529: STR
67530: PUSH
67531: LD_STRING , 
67533: STR
67534: PUSH
67535: LD_VAR 0 3
67539: PPUSH
67540: LD_INT 1
67542: PPUSH
67543: CALL_OW 268
67547: STR
67548: PUSH
67549: LD_STRING , 
67551: STR
67552: PUSH
67553: LD_VAR 0 3
67557: PPUSH
67558: LD_INT 2
67560: PPUSH
67561: CALL_OW 268
67565: STR
67566: PUSH
67567: LD_STRING ],
67569: STR
67570: PPUSH
67571: CALL_OW 561
// end ;
67575: GO 67469
67577: POP
67578: POP
// AddToLog ( ]; ) ;
67579: LD_STRING ];
67581: PPUSH
67582: CALL_OW 561
// end ;
67586: LD_VAR 0 2
67590: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67591: LD_INT 0
67593: PPUSH
67594: PPUSH
67595: PPUSH
67596: PPUSH
67597: PPUSH
// if not area or not rate or not max then
67598: LD_VAR 0 1
67602: NOT
67603: PUSH
67604: LD_VAR 0 2
67608: NOT
67609: OR
67610: PUSH
67611: LD_VAR 0 4
67615: NOT
67616: OR
67617: IFFALSE 67621
// exit ;
67619: GO 67810
// while 1 do
67621: LD_INT 1
67623: IFFALSE 67810
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67625: LD_ADDR_VAR 0 9
67629: PUSH
67630: LD_VAR 0 1
67634: PPUSH
67635: LD_INT 1
67637: PPUSH
67638: CALL_OW 287
67642: PUSH
67643: LD_INT 10
67645: MUL
67646: ST_TO_ADDR
// r := rate / 10 ;
67647: LD_ADDR_VAR 0 7
67651: PUSH
67652: LD_VAR 0 2
67656: PUSH
67657: LD_INT 10
67659: DIVREAL
67660: ST_TO_ADDR
// time := 1 1$00 ;
67661: LD_ADDR_VAR 0 8
67665: PUSH
67666: LD_INT 2100
67668: ST_TO_ADDR
// if amount < min then
67669: LD_VAR 0 9
67673: PUSH
67674: LD_VAR 0 3
67678: LESS
67679: IFFALSE 67697
// r := r * 2 else
67681: LD_ADDR_VAR 0 7
67685: PUSH
67686: LD_VAR 0 7
67690: PUSH
67691: LD_INT 2
67693: MUL
67694: ST_TO_ADDR
67695: GO 67723
// if amount > max then
67697: LD_VAR 0 9
67701: PUSH
67702: LD_VAR 0 4
67706: GREATER
67707: IFFALSE 67723
// r := r / 2 ;
67709: LD_ADDR_VAR 0 7
67713: PUSH
67714: LD_VAR 0 7
67718: PUSH
67719: LD_INT 2
67721: DIVREAL
67722: ST_TO_ADDR
// time := time / r ;
67723: LD_ADDR_VAR 0 8
67727: PUSH
67728: LD_VAR 0 8
67732: PUSH
67733: LD_VAR 0 7
67737: DIVREAL
67738: ST_TO_ADDR
// if time < 0 then
67739: LD_VAR 0 8
67743: PUSH
67744: LD_INT 0
67746: LESS
67747: IFFALSE 67764
// time := time * - 1 ;
67749: LD_ADDR_VAR 0 8
67753: PUSH
67754: LD_VAR 0 8
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: MUL
67763: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67764: LD_VAR 0 8
67768: PUSH
67769: LD_INT 35
67771: PPUSH
67772: LD_INT 875
67774: PPUSH
67775: CALL_OW 12
67779: PLUS
67780: PPUSH
67781: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67785: LD_INT 1
67787: PPUSH
67788: LD_INT 5
67790: PPUSH
67791: CALL_OW 12
67795: PPUSH
67796: LD_VAR 0 1
67800: PPUSH
67801: LD_INT 1
67803: PPUSH
67804: CALL_OW 55
// end ;
67808: GO 67621
// end ;
67810: LD_VAR 0 5
67814: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67815: LD_INT 0
67817: PPUSH
67818: PPUSH
67819: PPUSH
67820: PPUSH
67821: PPUSH
67822: PPUSH
67823: PPUSH
67824: PPUSH
// if not turrets or not factories then
67825: LD_VAR 0 1
67829: NOT
67830: PUSH
67831: LD_VAR 0 2
67835: NOT
67836: OR
67837: IFFALSE 67841
// exit ;
67839: GO 68148
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67841: LD_ADDR_VAR 0 10
67845: PUSH
67846: LD_INT 5
67848: PUSH
67849: LD_INT 6
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 2
67858: PUSH
67859: LD_INT 4
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: LD_INT 5
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 24
67883: PUSH
67884: LD_INT 25
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 23
67893: PUSH
67894: LD_INT 27
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 42
67907: PUSH
67908: LD_INT 43
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 44
67917: PUSH
67918: LD_INT 46
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 45
67927: PUSH
67928: LD_INT 47
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: LIST
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: LIST
67944: ST_TO_ADDR
// result := [ ] ;
67945: LD_ADDR_VAR 0 3
67949: PUSH
67950: EMPTY
67951: ST_TO_ADDR
// for i in turrets do
67952: LD_ADDR_VAR 0 4
67956: PUSH
67957: LD_VAR 0 1
67961: PUSH
67962: FOR_IN
67963: IFFALSE 68146
// begin nat := GetNation ( i ) ;
67965: LD_ADDR_VAR 0 7
67969: PUSH
67970: LD_VAR 0 4
67974: PPUSH
67975: CALL_OW 248
67979: ST_TO_ADDR
// weapon := 0 ;
67980: LD_ADDR_VAR 0 8
67984: PUSH
67985: LD_INT 0
67987: ST_TO_ADDR
// if not nat then
67988: LD_VAR 0 7
67992: NOT
67993: IFFALSE 67997
// continue ;
67995: GO 67962
// for j in list [ nat ] do
67997: LD_ADDR_VAR 0 5
68001: PUSH
68002: LD_VAR 0 10
68006: PUSH
68007: LD_VAR 0 7
68011: ARRAY
68012: PUSH
68013: FOR_IN
68014: IFFALSE 68055
// if GetBWeapon ( i ) = j [ 1 ] then
68016: LD_VAR 0 4
68020: PPUSH
68021: CALL_OW 269
68025: PUSH
68026: LD_VAR 0 5
68030: PUSH
68031: LD_INT 1
68033: ARRAY
68034: EQUAL
68035: IFFALSE 68053
// begin weapon := j [ 2 ] ;
68037: LD_ADDR_VAR 0 8
68041: PUSH
68042: LD_VAR 0 5
68046: PUSH
68047: LD_INT 2
68049: ARRAY
68050: ST_TO_ADDR
// break ;
68051: GO 68055
// end ;
68053: GO 68013
68055: POP
68056: POP
// if not weapon then
68057: LD_VAR 0 8
68061: NOT
68062: IFFALSE 68066
// continue ;
68064: GO 67962
// for k in factories do
68066: LD_ADDR_VAR 0 6
68070: PUSH
68071: LD_VAR 0 2
68075: PUSH
68076: FOR_IN
68077: IFFALSE 68142
// begin weapons := AvailableWeaponList ( k ) ;
68079: LD_ADDR_VAR 0 9
68083: PUSH
68084: LD_VAR 0 6
68088: PPUSH
68089: CALL_OW 478
68093: ST_TO_ADDR
// if not weapons then
68094: LD_VAR 0 9
68098: NOT
68099: IFFALSE 68103
// continue ;
68101: GO 68076
// if weapon in weapons then
68103: LD_VAR 0 8
68107: PUSH
68108: LD_VAR 0 9
68112: IN
68113: IFFALSE 68140
// begin result := [ i , weapon ] ;
68115: LD_ADDR_VAR 0 3
68119: PUSH
68120: LD_VAR 0 4
68124: PUSH
68125: LD_VAR 0 8
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: ST_TO_ADDR
// exit ;
68134: POP
68135: POP
68136: POP
68137: POP
68138: GO 68148
// end ; end ;
68140: GO 68076
68142: POP
68143: POP
// end ;
68144: GO 67962
68146: POP
68147: POP
// end ;
68148: LD_VAR 0 3
68152: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68153: LD_INT 0
68155: PPUSH
// if not side or side > 8 then
68156: LD_VAR 0 3
68160: NOT
68161: PUSH
68162: LD_VAR 0 3
68166: PUSH
68167: LD_INT 8
68169: GREATER
68170: OR
68171: IFFALSE 68175
// exit ;
68173: GO 68234
// if not range then
68175: LD_VAR 0 4
68179: NOT
68180: IFFALSE 68191
// range := - 12 ;
68182: LD_ADDR_VAR 0 4
68186: PUSH
68187: LD_INT 12
68189: NEG
68190: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68191: LD_VAR 0 1
68195: PPUSH
68196: LD_VAR 0 2
68200: PPUSH
68201: LD_VAR 0 3
68205: PPUSH
68206: LD_VAR 0 4
68210: PPUSH
68211: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68215: LD_VAR 0 1
68219: PPUSH
68220: LD_VAR 0 2
68224: PPUSH
68225: LD_VAR 0 3
68229: PPUSH
68230: CALL_OW 331
// end ;
68234: LD_VAR 0 5
68238: RET
// export function Video ( mode ) ; begin
68239: LD_INT 0
68241: PPUSH
// ingame_video = mode ;
68242: LD_ADDR_OWVAR 52
68246: PUSH
68247: LD_VAR 0 1
68251: ST_TO_ADDR
// interface_hidden = mode ;
68252: LD_ADDR_OWVAR 54
68256: PUSH
68257: LD_VAR 0 1
68261: ST_TO_ADDR
// end ;
68262: LD_VAR 0 2
68266: RET
// export function Join ( array , element ) ; begin
68267: LD_INT 0
68269: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68270: LD_ADDR_VAR 0 3
68274: PUSH
68275: LD_VAR 0 1
68279: PPUSH
68280: LD_VAR 0 1
68284: PUSH
68285: LD_INT 1
68287: PLUS
68288: PPUSH
68289: LD_VAR 0 2
68293: PPUSH
68294: CALL_OW 1
68298: ST_TO_ADDR
// end ;
68299: LD_VAR 0 3
68303: RET
// export function JoinUnion ( array , element ) ; begin
68304: LD_INT 0
68306: PPUSH
// result := array union element ;
68307: LD_ADDR_VAR 0 3
68311: PUSH
68312: LD_VAR 0 1
68316: PUSH
68317: LD_VAR 0 2
68321: UNION
68322: ST_TO_ADDR
// end ;
68323: LD_VAR 0 3
68327: RET
// export function GetBehemoths ( side ) ; begin
68328: LD_INT 0
68330: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68331: LD_ADDR_VAR 0 2
68335: PUSH
68336: LD_INT 22
68338: PUSH
68339: LD_VAR 0 1
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 31
68350: PUSH
68351: LD_INT 25
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PPUSH
68362: CALL_OW 69
68366: ST_TO_ADDR
// end ;
68367: LD_VAR 0 2
68371: RET
// export function Shuffle ( array ) ; var i , index ; begin
68372: LD_INT 0
68374: PPUSH
68375: PPUSH
68376: PPUSH
// result := [ ] ;
68377: LD_ADDR_VAR 0 2
68381: PUSH
68382: EMPTY
68383: ST_TO_ADDR
// if not array then
68384: LD_VAR 0 1
68388: NOT
68389: IFFALSE 68393
// exit ;
68391: GO 68492
// Randomize ;
68393: CALL_OW 10
// for i = array downto 1 do
68397: LD_ADDR_VAR 0 3
68401: PUSH
68402: DOUBLE
68403: LD_VAR 0 1
68407: INC
68408: ST_TO_ADDR
68409: LD_INT 1
68411: PUSH
68412: FOR_DOWNTO
68413: IFFALSE 68490
// begin index := rand ( 1 , array ) ;
68415: LD_ADDR_VAR 0 4
68419: PUSH
68420: LD_INT 1
68422: PPUSH
68423: LD_VAR 0 1
68427: PPUSH
68428: CALL_OW 12
68432: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68433: LD_ADDR_VAR 0 2
68437: PUSH
68438: LD_VAR 0 2
68442: PPUSH
68443: LD_VAR 0 2
68447: PUSH
68448: LD_INT 1
68450: PLUS
68451: PPUSH
68452: LD_VAR 0 1
68456: PUSH
68457: LD_VAR 0 4
68461: ARRAY
68462: PPUSH
68463: CALL_OW 2
68467: ST_TO_ADDR
// array := Delete ( array , index ) ;
68468: LD_ADDR_VAR 0 1
68472: PUSH
68473: LD_VAR 0 1
68477: PPUSH
68478: LD_VAR 0 4
68482: PPUSH
68483: CALL_OW 3
68487: ST_TO_ADDR
// end ;
68488: GO 68412
68490: POP
68491: POP
// end ;
68492: LD_VAR 0 2
68496: RET
// export function GetBaseMaterials ( base ) ; begin
68497: LD_INT 0
68499: PPUSH
// result := [ 0 , 0 , 0 ] ;
68500: LD_ADDR_VAR 0 2
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: LD_INT 0
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: ST_TO_ADDR
// if not base then
68519: LD_VAR 0 1
68523: NOT
68524: IFFALSE 68528
// exit ;
68526: GO 68577
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68528: LD_ADDR_VAR 0 2
68532: PUSH
68533: LD_VAR 0 1
68537: PPUSH
68538: LD_INT 1
68540: PPUSH
68541: CALL_OW 275
68545: PUSH
68546: LD_VAR 0 1
68550: PPUSH
68551: LD_INT 2
68553: PPUSH
68554: CALL_OW 275
68558: PUSH
68559: LD_VAR 0 1
68563: PPUSH
68564: LD_INT 3
68566: PPUSH
68567: CALL_OW 275
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: ST_TO_ADDR
// end ;
68577: LD_VAR 0 2
68581: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68582: LD_INT 0
68584: PPUSH
68585: PPUSH
// result := array ;
68586: LD_ADDR_VAR 0 3
68590: PUSH
68591: LD_VAR 0 1
68595: ST_TO_ADDR
// if size >= result then
68596: LD_VAR 0 2
68600: PUSH
68601: LD_VAR 0 3
68605: GREATEREQUAL
68606: IFFALSE 68610
// exit ;
68608: GO 68660
// if size then
68610: LD_VAR 0 2
68614: IFFALSE 68660
// for i := array downto size do
68616: LD_ADDR_VAR 0 4
68620: PUSH
68621: DOUBLE
68622: LD_VAR 0 1
68626: INC
68627: ST_TO_ADDR
68628: LD_VAR 0 2
68632: PUSH
68633: FOR_DOWNTO
68634: IFFALSE 68658
// result := Delete ( result , result ) ;
68636: LD_ADDR_VAR 0 3
68640: PUSH
68641: LD_VAR 0 3
68645: PPUSH
68646: LD_VAR 0 3
68650: PPUSH
68651: CALL_OW 3
68655: ST_TO_ADDR
68656: GO 68633
68658: POP
68659: POP
// end ;
68660: LD_VAR 0 3
68664: RET
// export function ComExit ( unit ) ; var tmp ; begin
68665: LD_INT 0
68667: PPUSH
68668: PPUSH
// if not IsInUnit ( unit ) then
68669: LD_VAR 0 1
68673: PPUSH
68674: CALL_OW 310
68678: NOT
68679: IFFALSE 68683
// exit ;
68681: GO 68743
// tmp := IsInUnit ( unit ) ;
68683: LD_ADDR_VAR 0 3
68687: PUSH
68688: LD_VAR 0 1
68692: PPUSH
68693: CALL_OW 310
68697: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68698: LD_VAR 0 3
68702: PPUSH
68703: CALL_OW 247
68707: PUSH
68708: LD_INT 2
68710: EQUAL
68711: IFFALSE 68724
// ComExitVehicle ( unit ) else
68713: LD_VAR 0 1
68717: PPUSH
68718: CALL_OW 121
68722: GO 68733
// ComExitBuilding ( unit ) ;
68724: LD_VAR 0 1
68728: PPUSH
68729: CALL_OW 122
// result := tmp ;
68733: LD_ADDR_VAR 0 2
68737: PUSH
68738: LD_VAR 0 3
68742: ST_TO_ADDR
// end ;
68743: LD_VAR 0 2
68747: RET
// export function ComExitAll ( units ) ; var i ; begin
68748: LD_INT 0
68750: PPUSH
68751: PPUSH
// if not units then
68752: LD_VAR 0 1
68756: NOT
68757: IFFALSE 68761
// exit ;
68759: GO 68787
// for i in units do
68761: LD_ADDR_VAR 0 3
68765: PUSH
68766: LD_VAR 0 1
68770: PUSH
68771: FOR_IN
68772: IFFALSE 68785
// ComExit ( i ) ;
68774: LD_VAR 0 3
68778: PPUSH
68779: CALL 68665 0 1
68783: GO 68771
68785: POP
68786: POP
// end ;
68787: LD_VAR 0 2
68791: RET
// export function ResetHc ; begin
68792: LD_INT 0
68794: PPUSH
// InitHc ;
68795: CALL_OW 19
// hc_importance := 0 ;
68799: LD_ADDR_OWVAR 32
68803: PUSH
68804: LD_INT 0
68806: ST_TO_ADDR
// end ;
68807: LD_VAR 0 1
68811: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68812: LD_INT 0
68814: PPUSH
68815: PPUSH
68816: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68817: LD_ADDR_VAR 0 6
68821: PUSH
68822: LD_VAR 0 1
68826: PUSH
68827: LD_VAR 0 3
68831: PLUS
68832: PUSH
68833: LD_INT 2
68835: DIV
68836: ST_TO_ADDR
// if _x < 0 then
68837: LD_VAR 0 6
68841: PUSH
68842: LD_INT 0
68844: LESS
68845: IFFALSE 68862
// _x := _x * - 1 ;
68847: LD_ADDR_VAR 0 6
68851: PUSH
68852: LD_VAR 0 6
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: MUL
68861: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68862: LD_ADDR_VAR 0 7
68866: PUSH
68867: LD_VAR 0 2
68871: PUSH
68872: LD_VAR 0 4
68876: PLUS
68877: PUSH
68878: LD_INT 2
68880: DIV
68881: ST_TO_ADDR
// if _y < 0 then
68882: LD_VAR 0 7
68886: PUSH
68887: LD_INT 0
68889: LESS
68890: IFFALSE 68907
// _y := _y * - 1 ;
68892: LD_ADDR_VAR 0 7
68896: PUSH
68897: LD_VAR 0 7
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: MUL
68906: ST_TO_ADDR
// result := [ _x , _y ] ;
68907: LD_ADDR_VAR 0 5
68911: PUSH
68912: LD_VAR 0 6
68916: PUSH
68917: LD_VAR 0 7
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: ST_TO_ADDR
// end ;
68926: LD_VAR 0 5
68930: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68931: LD_INT 0
68933: PPUSH
68934: PPUSH
68935: PPUSH
68936: PPUSH
// task := GetTaskList ( unit ) ;
68937: LD_ADDR_VAR 0 7
68941: PUSH
68942: LD_VAR 0 1
68946: PPUSH
68947: CALL_OW 437
68951: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68952: LD_VAR 0 7
68956: NOT
68957: PUSH
68958: LD_VAR 0 1
68962: PPUSH
68963: LD_VAR 0 2
68967: PPUSH
68968: CALL_OW 308
68972: NOT
68973: AND
68974: IFFALSE 68978
// exit ;
68976: GO 69096
// if IsInArea ( unit , area ) then
68978: LD_VAR 0 1
68982: PPUSH
68983: LD_VAR 0 2
68987: PPUSH
68988: CALL_OW 308
68992: IFFALSE 69010
// begin ComMoveToArea ( unit , goAway ) ;
68994: LD_VAR 0 1
68998: PPUSH
68999: LD_VAR 0 3
69003: PPUSH
69004: CALL_OW 113
// exit ;
69008: GO 69096
// end ; if task [ 1 ] [ 1 ] <> M then
69010: LD_VAR 0 7
69014: PUSH
69015: LD_INT 1
69017: ARRAY
69018: PUSH
69019: LD_INT 1
69021: ARRAY
69022: PUSH
69023: LD_STRING M
69025: NONEQUAL
69026: IFFALSE 69030
// exit ;
69028: GO 69096
// x := task [ 1 ] [ 2 ] ;
69030: LD_ADDR_VAR 0 5
69034: PUSH
69035: LD_VAR 0 7
69039: PUSH
69040: LD_INT 1
69042: ARRAY
69043: PUSH
69044: LD_INT 2
69046: ARRAY
69047: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69048: LD_ADDR_VAR 0 6
69052: PUSH
69053: LD_VAR 0 7
69057: PUSH
69058: LD_INT 1
69060: ARRAY
69061: PUSH
69062: LD_INT 3
69064: ARRAY
69065: ST_TO_ADDR
// if InArea ( x , y , area ) then
69066: LD_VAR 0 5
69070: PPUSH
69071: LD_VAR 0 6
69075: PPUSH
69076: LD_VAR 0 2
69080: PPUSH
69081: CALL_OW 309
69085: IFFALSE 69096
// ComStop ( unit ) ;
69087: LD_VAR 0 1
69091: PPUSH
69092: CALL_OW 141
// end ;
69096: LD_VAR 0 4
69100: RET
// export function Abs ( value ) ; begin
69101: LD_INT 0
69103: PPUSH
// result := value ;
69104: LD_ADDR_VAR 0 2
69108: PUSH
69109: LD_VAR 0 1
69113: ST_TO_ADDR
// if value < 0 then
69114: LD_VAR 0 1
69118: PUSH
69119: LD_INT 0
69121: LESS
69122: IFFALSE 69139
// result := value * - 1 ;
69124: LD_ADDR_VAR 0 2
69128: PUSH
69129: LD_VAR 0 1
69133: PUSH
69134: LD_INT 1
69136: NEG
69137: MUL
69138: ST_TO_ADDR
// end ;
69139: LD_VAR 0 2
69143: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69144: LD_INT 0
69146: PPUSH
69147: PPUSH
69148: PPUSH
69149: PPUSH
69150: PPUSH
69151: PPUSH
69152: PPUSH
69153: PPUSH
// if not unit or not building then
69154: LD_VAR 0 1
69158: NOT
69159: PUSH
69160: LD_VAR 0 2
69164: NOT
69165: OR
69166: IFFALSE 69170
// exit ;
69168: GO 69396
// x := GetX ( building ) ;
69170: LD_ADDR_VAR 0 4
69174: PUSH
69175: LD_VAR 0 2
69179: PPUSH
69180: CALL_OW 250
69184: ST_TO_ADDR
// y := GetY ( building ) ;
69185: LD_ADDR_VAR 0 6
69189: PUSH
69190: LD_VAR 0 2
69194: PPUSH
69195: CALL_OW 251
69199: ST_TO_ADDR
// d := GetDir ( building ) ;
69200: LD_ADDR_VAR 0 8
69204: PUSH
69205: LD_VAR 0 2
69209: PPUSH
69210: CALL_OW 254
69214: ST_TO_ADDR
// r := 4 ;
69215: LD_ADDR_VAR 0 9
69219: PUSH
69220: LD_INT 4
69222: ST_TO_ADDR
// for i := 1 to 5 do
69223: LD_ADDR_VAR 0 10
69227: PUSH
69228: DOUBLE
69229: LD_INT 1
69231: DEC
69232: ST_TO_ADDR
69233: LD_INT 5
69235: PUSH
69236: FOR_TO
69237: IFFALSE 69394
// begin _x := ShiftX ( x , d , r + i ) ;
69239: LD_ADDR_VAR 0 5
69243: PUSH
69244: LD_VAR 0 4
69248: PPUSH
69249: LD_VAR 0 8
69253: PPUSH
69254: LD_VAR 0 9
69258: PUSH
69259: LD_VAR 0 10
69263: PLUS
69264: PPUSH
69265: CALL_OW 272
69269: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69270: LD_ADDR_VAR 0 7
69274: PUSH
69275: LD_VAR 0 6
69279: PPUSH
69280: LD_VAR 0 8
69284: PPUSH
69285: LD_VAR 0 9
69289: PUSH
69290: LD_VAR 0 10
69294: PLUS
69295: PPUSH
69296: CALL_OW 273
69300: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69301: LD_VAR 0 5
69305: PPUSH
69306: LD_VAR 0 7
69310: PPUSH
69311: CALL_OW 488
69315: PUSH
69316: LD_VAR 0 5
69320: PPUSH
69321: LD_VAR 0 7
69325: PPUSH
69326: CALL_OW 428
69330: PPUSH
69331: CALL_OW 247
69335: PUSH
69336: LD_INT 3
69338: PUSH
69339: LD_INT 2
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: IN
69346: NOT
69347: AND
69348: IFFALSE 69392
// begin ComMoveXY ( unit , _x , _y ) ;
69350: LD_VAR 0 1
69354: PPUSH
69355: LD_VAR 0 5
69359: PPUSH
69360: LD_VAR 0 7
69364: PPUSH
69365: CALL_OW 111
// result := [ _x , _y ] ;
69369: LD_ADDR_VAR 0 3
69373: PUSH
69374: LD_VAR 0 5
69378: PUSH
69379: LD_VAR 0 7
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: ST_TO_ADDR
// exit ;
69388: POP
69389: POP
69390: GO 69396
// end ; end ;
69392: GO 69236
69394: POP
69395: POP
// end ;
69396: LD_VAR 0 3
69400: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69401: LD_INT 0
69403: PPUSH
69404: PPUSH
69405: PPUSH
// result := 0 ;
69406: LD_ADDR_VAR 0 3
69410: PUSH
69411: LD_INT 0
69413: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69414: LD_VAR 0 1
69418: PUSH
69419: LD_INT 0
69421: LESS
69422: PUSH
69423: LD_VAR 0 1
69427: PUSH
69428: LD_INT 8
69430: GREATER
69431: OR
69432: PUSH
69433: LD_VAR 0 2
69437: PUSH
69438: LD_INT 0
69440: LESS
69441: OR
69442: PUSH
69443: LD_VAR 0 2
69447: PUSH
69448: LD_INT 8
69450: GREATER
69451: OR
69452: IFFALSE 69456
// exit ;
69454: GO 69531
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69456: LD_ADDR_VAR 0 4
69460: PUSH
69461: LD_INT 22
69463: PUSH
69464: LD_VAR 0 2
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PPUSH
69473: CALL_OW 69
69477: PUSH
69478: FOR_IN
69479: IFFALSE 69529
// begin un := UnitShoot ( i ) ;
69481: LD_ADDR_VAR 0 5
69485: PUSH
69486: LD_VAR 0 4
69490: PPUSH
69491: CALL_OW 504
69495: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69496: LD_VAR 0 5
69500: PPUSH
69501: CALL_OW 255
69505: PUSH
69506: LD_VAR 0 1
69510: EQUAL
69511: IFFALSE 69527
// begin result := un ;
69513: LD_ADDR_VAR 0 3
69517: PUSH
69518: LD_VAR 0 5
69522: ST_TO_ADDR
// exit ;
69523: POP
69524: POP
69525: GO 69531
// end ; end ;
69527: GO 69478
69529: POP
69530: POP
// end ;
69531: LD_VAR 0 3
69535: RET
// export function GetCargoBay ( units ) ; begin
69536: LD_INT 0
69538: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69539: LD_ADDR_VAR 0 2
69543: PUSH
69544: LD_VAR 0 1
69548: PPUSH
69549: LD_INT 2
69551: PUSH
69552: LD_INT 34
69554: PUSH
69555: LD_INT 12
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 34
69564: PUSH
69565: LD_INT 51
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 34
69574: PUSH
69575: LD_INT 32
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 34
69584: PUSH
69585: LD_INT 89
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: PPUSH
69599: CALL_OW 72
69603: ST_TO_ADDR
// end ;
69604: LD_VAR 0 2
69608: RET
// export function Negate ( value ) ; begin
69609: LD_INT 0
69611: PPUSH
// result := not value ;
69612: LD_ADDR_VAR 0 2
69616: PUSH
69617: LD_VAR 0 1
69621: NOT
69622: ST_TO_ADDR
// end ;
69623: LD_VAR 0 2
69627: RET
// export function Inc ( value ) ; begin
69628: LD_INT 0
69630: PPUSH
// result := value + 1 ;
69631: LD_ADDR_VAR 0 2
69635: PUSH
69636: LD_VAR 0 1
69640: PUSH
69641: LD_INT 1
69643: PLUS
69644: ST_TO_ADDR
// end ;
69645: LD_VAR 0 2
69649: RET
// export function Dec ( value ) ; begin
69650: LD_INT 0
69652: PPUSH
// result := value - 1 ;
69653: LD_ADDR_VAR 0 2
69657: PUSH
69658: LD_VAR 0 1
69662: PUSH
69663: LD_INT 1
69665: MINUS
69666: ST_TO_ADDR
// end ;
69667: LD_VAR 0 2
69671: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69672: LD_INT 0
69674: PPUSH
69675: PPUSH
69676: PPUSH
69677: PPUSH
69678: PPUSH
69679: PPUSH
69680: PPUSH
69681: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69682: LD_VAR 0 1
69686: PPUSH
69687: LD_VAR 0 2
69691: PPUSH
69692: CALL_OW 488
69696: NOT
69697: PUSH
69698: LD_VAR 0 3
69702: PPUSH
69703: LD_VAR 0 4
69707: PPUSH
69708: CALL_OW 488
69712: NOT
69713: OR
69714: IFFALSE 69727
// begin result := - 1 ;
69716: LD_ADDR_VAR 0 5
69720: PUSH
69721: LD_INT 1
69723: NEG
69724: ST_TO_ADDR
// exit ;
69725: GO 69962
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69727: LD_ADDR_VAR 0 12
69731: PUSH
69732: LD_VAR 0 1
69736: PPUSH
69737: LD_VAR 0 2
69741: PPUSH
69742: LD_VAR 0 3
69746: PPUSH
69747: LD_VAR 0 4
69751: PPUSH
69752: CALL 68812 0 4
69756: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69757: LD_ADDR_VAR 0 11
69761: PUSH
69762: LD_VAR 0 1
69766: PPUSH
69767: LD_VAR 0 2
69771: PPUSH
69772: LD_VAR 0 12
69776: PUSH
69777: LD_INT 1
69779: ARRAY
69780: PPUSH
69781: LD_VAR 0 12
69785: PUSH
69786: LD_INT 2
69788: ARRAY
69789: PPUSH
69790: CALL_OW 298
69794: ST_TO_ADDR
// distance := 9999 ;
69795: LD_ADDR_VAR 0 10
69799: PUSH
69800: LD_INT 9999
69802: ST_TO_ADDR
// for i := 0 to 5 do
69803: LD_ADDR_VAR 0 6
69807: PUSH
69808: DOUBLE
69809: LD_INT 0
69811: DEC
69812: ST_TO_ADDR
69813: LD_INT 5
69815: PUSH
69816: FOR_TO
69817: IFFALSE 69960
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69819: LD_ADDR_VAR 0 7
69823: PUSH
69824: LD_VAR 0 1
69828: PPUSH
69829: LD_VAR 0 6
69833: PPUSH
69834: LD_VAR 0 11
69838: PPUSH
69839: CALL_OW 272
69843: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69844: LD_ADDR_VAR 0 8
69848: PUSH
69849: LD_VAR 0 2
69853: PPUSH
69854: LD_VAR 0 6
69858: PPUSH
69859: LD_VAR 0 11
69863: PPUSH
69864: CALL_OW 273
69868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69869: LD_VAR 0 7
69873: PPUSH
69874: LD_VAR 0 8
69878: PPUSH
69879: CALL_OW 488
69883: NOT
69884: IFFALSE 69888
// continue ;
69886: GO 69816
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69888: LD_ADDR_VAR 0 9
69892: PUSH
69893: LD_VAR 0 12
69897: PUSH
69898: LD_INT 1
69900: ARRAY
69901: PPUSH
69902: LD_VAR 0 12
69906: PUSH
69907: LD_INT 2
69909: ARRAY
69910: PPUSH
69911: LD_VAR 0 7
69915: PPUSH
69916: LD_VAR 0 8
69920: PPUSH
69921: CALL_OW 298
69925: ST_TO_ADDR
// if tmp < distance then
69926: LD_VAR 0 9
69930: PUSH
69931: LD_VAR 0 10
69935: LESS
69936: IFFALSE 69958
// begin result := i ;
69938: LD_ADDR_VAR 0 5
69942: PUSH
69943: LD_VAR 0 6
69947: ST_TO_ADDR
// distance := tmp ;
69948: LD_ADDR_VAR 0 10
69952: PUSH
69953: LD_VAR 0 9
69957: ST_TO_ADDR
// end ; end ;
69958: GO 69816
69960: POP
69961: POP
// end ;
69962: LD_VAR 0 5
69966: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69967: LD_INT 0
69969: PPUSH
69970: PPUSH
// if not driver or not IsInUnit ( driver ) then
69971: LD_VAR 0 1
69975: NOT
69976: PUSH
69977: LD_VAR 0 1
69981: PPUSH
69982: CALL_OW 310
69986: NOT
69987: OR
69988: IFFALSE 69992
// exit ;
69990: GO 70082
// vehicle := IsInUnit ( driver ) ;
69992: LD_ADDR_VAR 0 3
69996: PUSH
69997: LD_VAR 0 1
70001: PPUSH
70002: CALL_OW 310
70006: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70007: LD_VAR 0 1
70011: PPUSH
70012: LD_STRING \
70014: PUSH
70015: LD_INT 0
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: LD_INT 0
70023: PUSH
70024: LD_INT 0
70026: PUSH
70027: LD_INT 0
70029: PUSH
70030: LD_INT 0
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: PUSH
70042: LD_STRING E
70044: PUSH
70045: LD_INT 0
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_VAR 0 3
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: LD_INT 0
70061: PUSH
70062: LD_INT 0
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PPUSH
70078: CALL_OW 446
// end ;
70082: LD_VAR 0 2
70086: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70087: LD_INT 0
70089: PPUSH
70090: PPUSH
// if not driver or not IsInUnit ( driver ) then
70091: LD_VAR 0 1
70095: NOT
70096: PUSH
70097: LD_VAR 0 1
70101: PPUSH
70102: CALL_OW 310
70106: NOT
70107: OR
70108: IFFALSE 70112
// exit ;
70110: GO 70202
// vehicle := IsInUnit ( driver ) ;
70112: LD_ADDR_VAR 0 3
70116: PUSH
70117: LD_VAR 0 1
70121: PPUSH
70122: CALL_OW 310
70126: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70127: LD_VAR 0 1
70131: PPUSH
70132: LD_STRING \
70134: PUSH
70135: LD_INT 0
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: PUSH
70162: LD_STRING E
70164: PUSH
70165: LD_INT 0
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: LD_VAR 0 3
70175: PUSH
70176: LD_INT 0
70178: PUSH
70179: LD_INT 0
70181: PUSH
70182: LD_INT 0
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PPUSH
70198: CALL_OW 447
// end ;
70202: LD_VAR 0 2
70206: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70207: LD_INT 0
70209: PPUSH
70210: PPUSH
70211: PPUSH
// tmp := [ ] ;
70212: LD_ADDR_VAR 0 5
70216: PUSH
70217: EMPTY
70218: ST_TO_ADDR
// for i in units do
70219: LD_ADDR_VAR 0 4
70223: PUSH
70224: LD_VAR 0 1
70228: PUSH
70229: FOR_IN
70230: IFFALSE 70268
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70232: LD_ADDR_VAR 0 5
70236: PUSH
70237: LD_VAR 0 5
70241: PPUSH
70242: LD_VAR 0 5
70246: PUSH
70247: LD_INT 1
70249: PLUS
70250: PPUSH
70251: LD_VAR 0 4
70255: PPUSH
70256: CALL_OW 256
70260: PPUSH
70261: CALL_OW 2
70265: ST_TO_ADDR
70266: GO 70229
70268: POP
70269: POP
// if not tmp then
70270: LD_VAR 0 5
70274: NOT
70275: IFFALSE 70279
// exit ;
70277: GO 70327
// if asc then
70279: LD_VAR 0 2
70283: IFFALSE 70307
// result := SortListByListAsc ( units , tmp ) else
70285: LD_ADDR_VAR 0 3
70289: PUSH
70290: LD_VAR 0 1
70294: PPUSH
70295: LD_VAR 0 5
70299: PPUSH
70300: CALL_OW 76
70304: ST_TO_ADDR
70305: GO 70327
// result := SortListByListDesc ( units , tmp ) ;
70307: LD_ADDR_VAR 0 3
70311: PUSH
70312: LD_VAR 0 1
70316: PPUSH
70317: LD_VAR 0 5
70321: PPUSH
70322: CALL_OW 77
70326: ST_TO_ADDR
// end ;
70327: LD_VAR 0 3
70331: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70332: LD_INT 0
70334: PPUSH
70335: PPUSH
// task := GetTaskList ( mech ) ;
70336: LD_ADDR_VAR 0 4
70340: PUSH
70341: LD_VAR 0 1
70345: PPUSH
70346: CALL_OW 437
70350: ST_TO_ADDR
// if not task then
70351: LD_VAR 0 4
70355: NOT
70356: IFFALSE 70360
// exit ;
70358: GO 70402
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70360: LD_ADDR_VAR 0 3
70364: PUSH
70365: LD_VAR 0 4
70369: PUSH
70370: LD_INT 1
70372: ARRAY
70373: PUSH
70374: LD_INT 1
70376: ARRAY
70377: PUSH
70378: LD_STRING r
70380: EQUAL
70381: PUSH
70382: LD_VAR 0 4
70386: PUSH
70387: LD_INT 1
70389: ARRAY
70390: PUSH
70391: LD_INT 4
70393: ARRAY
70394: PUSH
70395: LD_VAR 0 2
70399: EQUAL
70400: AND
70401: ST_TO_ADDR
// end ;
70402: LD_VAR 0 3
70406: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70407: LD_INT 0
70409: PPUSH
// SetDir ( unit , d ) ;
70410: LD_VAR 0 1
70414: PPUSH
70415: LD_VAR 0 4
70419: PPUSH
70420: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70424: LD_VAR 0 1
70428: PPUSH
70429: LD_VAR 0 2
70433: PPUSH
70434: LD_VAR 0 3
70438: PPUSH
70439: LD_VAR 0 5
70443: PPUSH
70444: CALL_OW 48
// end ;
70448: LD_VAR 0 6
70452: RET
// export function ToNaturalNumber ( number ) ; begin
70453: LD_INT 0
70455: PPUSH
// result := number div 1 ;
70456: LD_ADDR_VAR 0 2
70460: PUSH
70461: LD_VAR 0 1
70465: PUSH
70466: LD_INT 1
70468: DIV
70469: ST_TO_ADDR
// if number < 0 then
70470: LD_VAR 0 1
70474: PUSH
70475: LD_INT 0
70477: LESS
70478: IFFALSE 70488
// result := 0 ;
70480: LD_ADDR_VAR 0 2
70484: PUSH
70485: LD_INT 0
70487: ST_TO_ADDR
// end ;
70488: LD_VAR 0 2
70492: RET
// export function SortByClass ( units , class ) ; var un ; begin
70493: LD_INT 0
70495: PPUSH
70496: PPUSH
// if not units or not class then
70497: LD_VAR 0 1
70501: NOT
70502: PUSH
70503: LD_VAR 0 2
70507: NOT
70508: OR
70509: IFFALSE 70513
// exit ;
70511: GO 70608
// result := [ ] ;
70513: LD_ADDR_VAR 0 3
70517: PUSH
70518: EMPTY
70519: ST_TO_ADDR
// for un in units do
70520: LD_ADDR_VAR 0 4
70524: PUSH
70525: LD_VAR 0 1
70529: PUSH
70530: FOR_IN
70531: IFFALSE 70606
// if GetClass ( un ) = class then
70533: LD_VAR 0 4
70537: PPUSH
70538: CALL_OW 257
70542: PUSH
70543: LD_VAR 0 2
70547: EQUAL
70548: IFFALSE 70575
// result := Insert ( result , 1 , un ) else
70550: LD_ADDR_VAR 0 3
70554: PUSH
70555: LD_VAR 0 3
70559: PPUSH
70560: LD_INT 1
70562: PPUSH
70563: LD_VAR 0 4
70567: PPUSH
70568: CALL_OW 2
70572: ST_TO_ADDR
70573: GO 70604
// result := Replace ( result , result + 1 , un ) ;
70575: LD_ADDR_VAR 0 3
70579: PUSH
70580: LD_VAR 0 3
70584: PPUSH
70585: LD_VAR 0 3
70589: PUSH
70590: LD_INT 1
70592: PLUS
70593: PPUSH
70594: LD_VAR 0 4
70598: PPUSH
70599: CALL_OW 1
70603: ST_TO_ADDR
70604: GO 70530
70606: POP
70607: POP
// end ;
70608: LD_VAR 0 3
70612: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70613: LD_INT 0
70615: PPUSH
70616: PPUSH
70617: PPUSH
70618: PPUSH
70619: PPUSH
70620: PPUSH
70621: PPUSH
// result := [ ] ;
70622: LD_ADDR_VAR 0 4
70626: PUSH
70627: EMPTY
70628: ST_TO_ADDR
// if x - r < 0 then
70629: LD_VAR 0 1
70633: PUSH
70634: LD_VAR 0 3
70638: MINUS
70639: PUSH
70640: LD_INT 0
70642: LESS
70643: IFFALSE 70655
// min_x := 0 else
70645: LD_ADDR_VAR 0 8
70649: PUSH
70650: LD_INT 0
70652: ST_TO_ADDR
70653: GO 70671
// min_x := x - r ;
70655: LD_ADDR_VAR 0 8
70659: PUSH
70660: LD_VAR 0 1
70664: PUSH
70665: LD_VAR 0 3
70669: MINUS
70670: ST_TO_ADDR
// if y - r < 0 then
70671: LD_VAR 0 2
70675: PUSH
70676: LD_VAR 0 3
70680: MINUS
70681: PUSH
70682: LD_INT 0
70684: LESS
70685: IFFALSE 70697
// min_y := 0 else
70687: LD_ADDR_VAR 0 7
70691: PUSH
70692: LD_INT 0
70694: ST_TO_ADDR
70695: GO 70713
// min_y := y - r ;
70697: LD_ADDR_VAR 0 7
70701: PUSH
70702: LD_VAR 0 2
70706: PUSH
70707: LD_VAR 0 3
70711: MINUS
70712: ST_TO_ADDR
// max_x := x + r ;
70713: LD_ADDR_VAR 0 9
70717: PUSH
70718: LD_VAR 0 1
70722: PUSH
70723: LD_VAR 0 3
70727: PLUS
70728: ST_TO_ADDR
// max_y := y + r ;
70729: LD_ADDR_VAR 0 10
70733: PUSH
70734: LD_VAR 0 2
70738: PUSH
70739: LD_VAR 0 3
70743: PLUS
70744: ST_TO_ADDR
// for _x = min_x to max_x do
70745: LD_ADDR_VAR 0 5
70749: PUSH
70750: DOUBLE
70751: LD_VAR 0 8
70755: DEC
70756: ST_TO_ADDR
70757: LD_VAR 0 9
70761: PUSH
70762: FOR_TO
70763: IFFALSE 70864
// for _y = min_y to max_y do
70765: LD_ADDR_VAR 0 6
70769: PUSH
70770: DOUBLE
70771: LD_VAR 0 7
70775: DEC
70776: ST_TO_ADDR
70777: LD_VAR 0 10
70781: PUSH
70782: FOR_TO
70783: IFFALSE 70860
// begin if not ValidHex ( _x , _y ) then
70785: LD_VAR 0 5
70789: PPUSH
70790: LD_VAR 0 6
70794: PPUSH
70795: CALL_OW 488
70799: NOT
70800: IFFALSE 70804
// continue ;
70802: GO 70782
// if GetResourceTypeXY ( _x , _y ) then
70804: LD_VAR 0 5
70808: PPUSH
70809: LD_VAR 0 6
70813: PPUSH
70814: CALL_OW 283
70818: IFFALSE 70858
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70820: LD_ADDR_VAR 0 4
70824: PUSH
70825: LD_VAR 0 4
70829: PPUSH
70830: LD_VAR 0 4
70834: PUSH
70835: LD_INT 1
70837: PLUS
70838: PPUSH
70839: LD_VAR 0 5
70843: PUSH
70844: LD_VAR 0 6
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PPUSH
70853: CALL_OW 1
70857: ST_TO_ADDR
// end ;
70858: GO 70782
70860: POP
70861: POP
70862: GO 70762
70864: POP
70865: POP
// end ;
70866: LD_VAR 0 4
70870: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70871: LD_INT 0
70873: PPUSH
70874: PPUSH
70875: PPUSH
70876: PPUSH
70877: PPUSH
70878: PPUSH
70879: PPUSH
70880: PPUSH
// if not units then
70881: LD_VAR 0 1
70885: NOT
70886: IFFALSE 70890
// exit ;
70888: GO 71414
// result := UnitFilter ( units , [ f_ok ] ) ;
70890: LD_ADDR_VAR 0 3
70894: PUSH
70895: LD_VAR 0 1
70899: PPUSH
70900: LD_INT 50
70902: PUSH
70903: EMPTY
70904: LIST
70905: PPUSH
70906: CALL_OW 72
70910: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70911: LD_ADDR_VAR 0 8
70915: PUSH
70916: LD_VAR 0 1
70920: PUSH
70921: LD_INT 1
70923: ARRAY
70924: PPUSH
70925: CALL_OW 255
70929: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70930: LD_ADDR_VAR 0 10
70934: PUSH
70935: LD_INT 29
70937: PUSH
70938: LD_INT 91
70940: PUSH
70941: LD_INT 49
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: LIST
70948: ST_TO_ADDR
// if not result then
70949: LD_VAR 0 3
70953: NOT
70954: IFFALSE 70958
// exit ;
70956: GO 71414
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70958: LD_ADDR_VAR 0 5
70962: PUSH
70963: LD_INT 81
70965: PUSH
70966: LD_VAR 0 8
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PPUSH
70975: CALL_OW 69
70979: ST_TO_ADDR
// for i in result do
70980: LD_ADDR_VAR 0 4
70984: PUSH
70985: LD_VAR 0 3
70989: PUSH
70990: FOR_IN
70991: IFFALSE 71412
// begin tag := GetTag ( i ) + 1 ;
70993: LD_ADDR_VAR 0 9
70997: PUSH
70998: LD_VAR 0 4
71002: PPUSH
71003: CALL_OW 110
71007: PUSH
71008: LD_INT 1
71010: PLUS
71011: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71012: LD_ADDR_VAR 0 7
71016: PUSH
71017: LD_VAR 0 4
71021: PPUSH
71022: CALL_OW 250
71026: PPUSH
71027: LD_VAR 0 4
71031: PPUSH
71032: CALL_OW 251
71036: PPUSH
71037: LD_INT 6
71039: PPUSH
71040: CALL 70613 0 3
71044: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71045: LD_VAR 0 4
71049: PPUSH
71050: CALL_OW 247
71054: PUSH
71055: LD_INT 2
71057: EQUAL
71058: PUSH
71059: LD_VAR 0 7
71063: AND
71064: PUSH
71065: LD_VAR 0 4
71069: PPUSH
71070: CALL_OW 264
71074: PUSH
71075: LD_VAR 0 10
71079: IN
71080: NOT
71081: AND
71082: IFFALSE 71121
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71084: LD_VAR 0 4
71088: PPUSH
71089: LD_VAR 0 7
71093: PUSH
71094: LD_INT 1
71096: ARRAY
71097: PUSH
71098: LD_INT 1
71100: ARRAY
71101: PPUSH
71102: LD_VAR 0 7
71106: PUSH
71107: LD_INT 1
71109: ARRAY
71110: PUSH
71111: LD_INT 2
71113: ARRAY
71114: PPUSH
71115: CALL_OW 116
71119: GO 71410
// if path > tag then
71121: LD_VAR 0 2
71125: PUSH
71126: LD_VAR 0 9
71130: GREATER
71131: IFFALSE 71339
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71133: LD_ADDR_VAR 0 6
71137: PUSH
71138: LD_VAR 0 5
71142: PPUSH
71143: LD_INT 91
71145: PUSH
71146: LD_VAR 0 4
71150: PUSH
71151: LD_INT 8
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: LIST
71158: PPUSH
71159: CALL_OW 72
71163: ST_TO_ADDR
// if nearEnemy then
71164: LD_VAR 0 6
71168: IFFALSE 71237
// begin if GetWeapon ( i ) = ru_time_lapser then
71170: LD_VAR 0 4
71174: PPUSH
71175: CALL_OW 264
71179: PUSH
71180: LD_INT 49
71182: EQUAL
71183: IFFALSE 71211
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71185: LD_VAR 0 4
71189: PPUSH
71190: LD_VAR 0 6
71194: PPUSH
71195: LD_VAR 0 4
71199: PPUSH
71200: CALL_OW 74
71204: PPUSH
71205: CALL_OW 112
71209: GO 71235
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71211: LD_VAR 0 4
71215: PPUSH
71216: LD_VAR 0 6
71220: PPUSH
71221: LD_VAR 0 4
71225: PPUSH
71226: CALL_OW 74
71230: PPUSH
71231: CALL_OW 115
// end else
71235: GO 71337
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71237: LD_VAR 0 4
71241: PPUSH
71242: LD_VAR 0 2
71246: PUSH
71247: LD_VAR 0 9
71251: ARRAY
71252: PUSH
71253: LD_INT 1
71255: ARRAY
71256: PPUSH
71257: LD_VAR 0 2
71261: PUSH
71262: LD_VAR 0 9
71266: ARRAY
71267: PUSH
71268: LD_INT 2
71270: ARRAY
71271: PPUSH
71272: CALL_OW 297
71276: PUSH
71277: LD_INT 6
71279: GREATER
71280: IFFALSE 71323
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71282: LD_VAR 0 4
71286: PPUSH
71287: LD_VAR 0 2
71291: PUSH
71292: LD_VAR 0 9
71296: ARRAY
71297: PUSH
71298: LD_INT 1
71300: ARRAY
71301: PPUSH
71302: LD_VAR 0 2
71306: PUSH
71307: LD_VAR 0 9
71311: ARRAY
71312: PUSH
71313: LD_INT 2
71315: ARRAY
71316: PPUSH
71317: CALL_OW 114
71321: GO 71337
// SetTag ( i , tag ) ;
71323: LD_VAR 0 4
71327: PPUSH
71328: LD_VAR 0 9
71332: PPUSH
71333: CALL_OW 109
// end else
71337: GO 71410
// if enemy then
71339: LD_VAR 0 5
71343: IFFALSE 71410
// begin if GetWeapon ( i ) = ru_time_lapser then
71345: LD_VAR 0 4
71349: PPUSH
71350: CALL_OW 264
71354: PUSH
71355: LD_INT 49
71357: EQUAL
71358: IFFALSE 71386
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71360: LD_VAR 0 4
71364: PPUSH
71365: LD_VAR 0 5
71369: PPUSH
71370: LD_VAR 0 4
71374: PPUSH
71375: CALL_OW 74
71379: PPUSH
71380: CALL_OW 112
71384: GO 71410
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71386: LD_VAR 0 4
71390: PPUSH
71391: LD_VAR 0 5
71395: PPUSH
71396: LD_VAR 0 4
71400: PPUSH
71401: CALL_OW 74
71405: PPUSH
71406: CALL_OW 115
// end ; end ;
71410: GO 70990
71412: POP
71413: POP
// end ;
71414: LD_VAR 0 3
71418: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71419: LD_INT 0
71421: PPUSH
71422: PPUSH
71423: PPUSH
// if not unit or IsInUnit ( unit ) then
71424: LD_VAR 0 1
71428: NOT
71429: PUSH
71430: LD_VAR 0 1
71434: PPUSH
71435: CALL_OW 310
71439: OR
71440: IFFALSE 71444
// exit ;
71442: GO 71535
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71444: LD_ADDR_VAR 0 4
71448: PUSH
71449: LD_VAR 0 1
71453: PPUSH
71454: CALL_OW 250
71458: PPUSH
71459: LD_VAR 0 2
71463: PPUSH
71464: LD_INT 1
71466: PPUSH
71467: CALL_OW 272
71471: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71472: LD_ADDR_VAR 0 5
71476: PUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: CALL_OW 251
71486: PPUSH
71487: LD_VAR 0 2
71491: PPUSH
71492: LD_INT 1
71494: PPUSH
71495: CALL_OW 273
71499: ST_TO_ADDR
// if ValidHex ( x , y ) then
71500: LD_VAR 0 4
71504: PPUSH
71505: LD_VAR 0 5
71509: PPUSH
71510: CALL_OW 488
71514: IFFALSE 71535
// ComTurnXY ( unit , x , y ) ;
71516: LD_VAR 0 1
71520: PPUSH
71521: LD_VAR 0 4
71525: PPUSH
71526: LD_VAR 0 5
71530: PPUSH
71531: CALL_OW 118
// end ;
71535: LD_VAR 0 3
71539: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71540: LD_INT 0
71542: PPUSH
71543: PPUSH
// result := false ;
71544: LD_ADDR_VAR 0 3
71548: PUSH
71549: LD_INT 0
71551: ST_TO_ADDR
// if not units then
71552: LD_VAR 0 2
71556: NOT
71557: IFFALSE 71561
// exit ;
71559: GO 71606
// for i in units do
71561: LD_ADDR_VAR 0 4
71565: PUSH
71566: LD_VAR 0 2
71570: PUSH
71571: FOR_IN
71572: IFFALSE 71604
// if See ( side , i ) then
71574: LD_VAR 0 1
71578: PPUSH
71579: LD_VAR 0 4
71583: PPUSH
71584: CALL_OW 292
71588: IFFALSE 71602
// begin result := true ;
71590: LD_ADDR_VAR 0 3
71594: PUSH
71595: LD_INT 1
71597: ST_TO_ADDR
// exit ;
71598: POP
71599: POP
71600: GO 71606
// end ;
71602: GO 71571
71604: POP
71605: POP
// end ;
71606: LD_VAR 0 3
71610: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71611: LD_INT 0
71613: PPUSH
71614: PPUSH
71615: PPUSH
71616: PPUSH
// if not unit or not points then
71617: LD_VAR 0 1
71621: NOT
71622: PUSH
71623: LD_VAR 0 2
71627: NOT
71628: OR
71629: IFFALSE 71633
// exit ;
71631: GO 71723
// dist := 99999 ;
71633: LD_ADDR_VAR 0 5
71637: PUSH
71638: LD_INT 99999
71640: ST_TO_ADDR
// for i in points do
71641: LD_ADDR_VAR 0 4
71645: PUSH
71646: LD_VAR 0 2
71650: PUSH
71651: FOR_IN
71652: IFFALSE 71721
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71654: LD_ADDR_VAR 0 6
71658: PUSH
71659: LD_VAR 0 1
71663: PPUSH
71664: LD_VAR 0 4
71668: PUSH
71669: LD_INT 1
71671: ARRAY
71672: PPUSH
71673: LD_VAR 0 4
71677: PUSH
71678: LD_INT 2
71680: ARRAY
71681: PPUSH
71682: CALL_OW 297
71686: ST_TO_ADDR
// if tmpDist < dist then
71687: LD_VAR 0 6
71691: PUSH
71692: LD_VAR 0 5
71696: LESS
71697: IFFALSE 71719
// begin result := i ;
71699: LD_ADDR_VAR 0 3
71703: PUSH
71704: LD_VAR 0 4
71708: ST_TO_ADDR
// dist := tmpDist ;
71709: LD_ADDR_VAR 0 5
71713: PUSH
71714: LD_VAR 0 6
71718: ST_TO_ADDR
// end ; end ;
71719: GO 71651
71721: POP
71722: POP
// end ;
71723: LD_VAR 0 3
71727: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71728: LD_INT 0
71730: PPUSH
// uc_side := side ;
71731: LD_ADDR_OWVAR 20
71735: PUSH
71736: LD_VAR 0 1
71740: ST_TO_ADDR
// uc_nation := 3 ;
71741: LD_ADDR_OWVAR 21
71745: PUSH
71746: LD_INT 3
71748: ST_TO_ADDR
// vc_chassis := 25 ;
71749: LD_ADDR_OWVAR 37
71753: PUSH
71754: LD_INT 25
71756: ST_TO_ADDR
// vc_engine := engine_siberite ;
71757: LD_ADDR_OWVAR 39
71761: PUSH
71762: LD_INT 3
71764: ST_TO_ADDR
// vc_control := control_computer ;
71765: LD_ADDR_OWVAR 38
71769: PUSH
71770: LD_INT 3
71772: ST_TO_ADDR
// vc_weapon := 59 ;
71773: LD_ADDR_OWVAR 40
71777: PUSH
71778: LD_INT 59
71780: ST_TO_ADDR
// result := CreateVehicle ;
71781: LD_ADDR_VAR 0 5
71785: PUSH
71786: CALL_OW 45
71790: ST_TO_ADDR
// SetDir ( result , d ) ;
71791: LD_VAR 0 5
71795: PPUSH
71796: LD_VAR 0 4
71800: PPUSH
71801: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71805: LD_VAR 0 5
71809: PPUSH
71810: LD_VAR 0 2
71814: PPUSH
71815: LD_VAR 0 3
71819: PPUSH
71820: LD_INT 0
71822: PPUSH
71823: CALL_OW 48
// end ;
71827: LD_VAR 0 5
71831: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71832: LD_INT 0
71834: PPUSH
71835: PPUSH
71836: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71837: LD_ADDR_VAR 0 2
71841: PUSH
71842: LD_INT 0
71844: PUSH
71845: LD_INT 0
71847: PUSH
71848: LD_INT 0
71850: PUSH
71851: LD_INT 0
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71860: LD_VAR 0 1
71864: NOT
71865: PUSH
71866: LD_VAR 0 1
71870: PPUSH
71871: CALL_OW 264
71875: PUSH
71876: LD_INT 12
71878: PUSH
71879: LD_INT 51
71881: PUSH
71882: LD_INT 32
71884: PUSH
71885: LD_INT 89
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: IN
71894: NOT
71895: OR
71896: IFFALSE 71900
// exit ;
71898: GO 71998
// for i := 1 to 3 do
71900: LD_ADDR_VAR 0 3
71904: PUSH
71905: DOUBLE
71906: LD_INT 1
71908: DEC
71909: ST_TO_ADDR
71910: LD_INT 3
71912: PUSH
71913: FOR_TO
71914: IFFALSE 71996
// begin tmp := GetCargo ( cargo , i ) ;
71916: LD_ADDR_VAR 0 4
71920: PUSH
71921: LD_VAR 0 1
71925: PPUSH
71926: LD_VAR 0 3
71930: PPUSH
71931: CALL_OW 289
71935: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71936: LD_ADDR_VAR 0 2
71940: PUSH
71941: LD_VAR 0 2
71945: PPUSH
71946: LD_VAR 0 3
71950: PPUSH
71951: LD_VAR 0 4
71955: PPUSH
71956: CALL_OW 1
71960: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71961: LD_ADDR_VAR 0 2
71965: PUSH
71966: LD_VAR 0 2
71970: PPUSH
71971: LD_INT 4
71973: PPUSH
71974: LD_VAR 0 2
71978: PUSH
71979: LD_INT 4
71981: ARRAY
71982: PUSH
71983: LD_VAR 0 4
71987: PLUS
71988: PPUSH
71989: CALL_OW 1
71993: ST_TO_ADDR
// end ;
71994: GO 71913
71996: POP
71997: POP
// end ;
71998: LD_VAR 0 2
72002: RET
// export function Length ( array ) ; begin
72003: LD_INT 0
72005: PPUSH
// result := array + 0 ;
72006: LD_ADDR_VAR 0 2
72010: PUSH
72011: LD_VAR 0 1
72015: PUSH
72016: LD_INT 0
72018: PLUS
72019: ST_TO_ADDR
// end ;
72020: LD_VAR 0 2
72024: RET
// export function PrepareArray ( array ) ; begin
72025: LD_INT 0
72027: PPUSH
// result := array diff 0 ;
72028: LD_ADDR_VAR 0 2
72032: PUSH
72033: LD_VAR 0 1
72037: PUSH
72038: LD_INT 0
72040: DIFF
72041: ST_TO_ADDR
// if not result [ 1 ] then
72042: LD_VAR 0 2
72046: PUSH
72047: LD_INT 1
72049: ARRAY
72050: NOT
72051: IFFALSE 72071
// result := Delete ( result , 1 ) ;
72053: LD_ADDR_VAR 0 2
72057: PUSH
72058: LD_VAR 0 2
72062: PPUSH
72063: LD_INT 1
72065: PPUSH
72066: CALL_OW 3
72070: ST_TO_ADDR
// end ; end_of_file
72071: LD_VAR 0 2
72075: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72076: LD_VAR 0 1
72080: PUSH
72081: LD_INT 200
72083: DOUBLE
72084: GREATEREQUAL
72085: IFFALSE 72093
72087: LD_INT 299
72089: DOUBLE
72090: LESSEQUAL
72091: IFTRUE 72095
72093: GO 72127
72095: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72096: LD_VAR 0 1
72100: PPUSH
72101: LD_VAR 0 2
72105: PPUSH
72106: LD_VAR 0 3
72110: PPUSH
72111: LD_VAR 0 4
72115: PPUSH
72116: LD_VAR 0 5
72120: PPUSH
72121: CALL 26978 0 5
72125: GO 72204
72127: LD_INT 300
72129: DOUBLE
72130: GREATEREQUAL
72131: IFFALSE 72139
72133: LD_INT 399
72135: DOUBLE
72136: LESSEQUAL
72137: IFTRUE 72141
72139: GO 72203
72141: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72142: LD_VAR 0 1
72146: PPUSH
72147: LD_VAR 0 2
72151: PPUSH
72152: LD_VAR 0 3
72156: PPUSH
72157: LD_VAR 0 4
72161: PPUSH
72162: LD_VAR 0 5
72166: PPUSH
72167: LD_VAR 0 6
72171: PPUSH
72172: LD_VAR 0 7
72176: PPUSH
72177: LD_VAR 0 8
72181: PPUSH
72182: LD_VAR 0 9
72186: PPUSH
72187: LD_VAR 0 10
72191: PPUSH
72192: LD_VAR 0 11
72196: PPUSH
72197: CALL 23311 0 11
72201: GO 72204
72203: POP
// end ;
72204: PPOPN 11
72206: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72207: LD_VAR 0 1
72211: PPUSH
72212: LD_VAR 0 2
72216: PPUSH
72217: LD_VAR 0 3
72221: PPUSH
72222: LD_VAR 0 4
72226: PPUSH
72227: LD_VAR 0 5
72231: PPUSH
72232: CALL 26714 0 5
// end ; end_of_file
72236: PPOPN 5
72238: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72239: LD_VAR 0 1
72243: PPUSH
72244: LD_VAR 0 2
72248: PPUSH
72249: LD_VAR 0 3
72253: PPUSH
72254: LD_VAR 0 4
72258: PPUSH
72259: LD_VAR 0 5
72263: PPUSH
72264: LD_VAR 0 6
72268: PPUSH
72269: CALL 11004 0 6
// end ;
72273: PPOPN 6
72275: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72276: LD_INT 0
72278: PPUSH
// begin if not units then
72279: LD_VAR 0 1
72283: NOT
72284: IFFALSE 72288
// exit ;
72286: GO 72288
// end ;
72288: PPOPN 7
72290: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72291: CALL 10975 0 0
// end ;
72295: PPOPN 1
72297: END
