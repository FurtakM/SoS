// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9175 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// game_started := false ;
2667: LD_ADDR_EXP 7
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// points := 0 ;
2675: LD_ADDR_EXP 2
2679: PUSH
2680: LD_INT 0
2682: ST_TO_ADDR
// waveNumber := 0 ;
2683: LD_ADDR_EXP 5
2687: PUSH
2688: LD_INT 0
2690: ST_TO_ADDR
// timeToNextAttack := 0 ;
2691: LD_ADDR_EXP 4
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// graveyard := [ ] ;
2699: LD_ADDR_EXP 8
2703: PUSH
2704: EMPTY
2705: ST_TO_ADDR
// base_x := 1 ;
2706: LD_ADDR_EXP 9
2710: PUSH
2711: LD_INT 1
2713: ST_TO_ADDR
// base_y := 1 ;
2714: LD_ADDR_EXP 10
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// if difficultyLevel > 2 then
2722: LD_EXP 3
2726: PUSH
2727: LD_INT 2
2729: GREATER
2730: IFFALSE 2745
// SetTech ( 5 , 7 , state_researched ) ;
2732: LD_INT 5
2734: PPUSH
2735: LD_INT 7
2737: PPUSH
2738: LD_INT 2
2740: PPUSH
2741: CALL_OW 322
// if not playerNation then
2745: LD_EXP 6
2749: NOT
2750: IFFALSE 2776
// begin points := 100 ;
2752: LD_ADDR_EXP 2
2756: PUSH
2757: LD_INT 100
2759: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2760: LD_ADDR_EXP 6
2764: PUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_INT 3
2770: PPUSH
2771: CALL_OW 12
2775: ST_TO_ADDR
// end ; your_side := playerNation ;
2776: LD_ADDR_OWVAR 2
2780: PUSH
2781: LD_EXP 6
2785: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2786: LD_OWVAR 2
2790: PPUSH
2791: LD_INT 4
2793: PPUSH
2794: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2798: LD_INT 25
2800: PUSH
2801: LD_INT 20
2803: PUSH
2804: LD_INT 15
2806: PUSH
2807: LD_INT 10
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: PUSH
2816: LD_EXP 3
2820: ARRAY
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 2
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PPUSH
2875: LD_INT 1
2877: PUSH
2878: LD_INT 2
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_INT 88
2891: PPUSH
2892: LD_INT 76
2894: PPUSH
2895: LD_INT 6
2897: PPUSH
2898: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2902: LD_EXP 6
2906: PPUSH
2907: LD_INT 9
2909: PUSH
2910: LD_INT 7
2912: PUSH
2913: LD_INT 5
2915: PUSH
2916: LD_INT 3
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_EXP 3
2929: ARRAY
2930: PPUSH
2931: LD_INT 24
2933: PUSH
2934: LD_INT 16
2936: PUSH
2937: LD_INT 12
2939: PUSH
2940: LD_INT 8
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 88
2957: PPUSH
2958: LD_INT 76
2960: PPUSH
2961: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2965: LD_INT 88
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2975: LD_INT 90
2977: PPUSH
2978: LD_INT 79
2980: PPUSH
2981: LD_OWVAR 2
2985: PPUSH
2986: LD_INT 50
2988: NEG
2989: PPUSH
2990: CALL_OW 330
// if debug then
2994: LD_EXP 1
2998: IFFALSE 3009
// FogOff ( your_side ) ;
3000: LD_OWVAR 2
3004: PPUSH
3005: CALL_OW 344
// end ;
3009: LD_VAR 0 1
3013: RET
// every 0 0$01 trigger game_started do var i ;
3014: LD_EXP 7
3018: IFFALSE 3252
3020: GO 3022
3022: DISABLE
3023: LD_INT 0
3025: PPUSH
// begin while ( game_started ) do
3026: LD_EXP 7
3030: IFFALSE 3252
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3032: LD_INT 22
3034: PUSH
3035: LD_INT 7
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: PUSH
3047: LD_INT 5
3049: LESS
3050: PUSH
3051: LD_EXP 4
3055: PUSH
3056: LD_INT 0
3058: LESSEQUAL
3059: AND
3060: IFFALSE 3243
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3062: LD_INT 22
3064: PUSH
3065: LD_INT 4
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: IFFALSE 3114
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3078: LD_ADDR_VAR 0 1
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_INT 4
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PPUSH
3093: CALL_OW 69
3097: PUSH
3098: FOR_IN
3099: IFFALSE 3112
// RemoveUnit ( i ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 64
3110: GO 3098
3112: POP
3113: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3114: LD_EXP 5
3118: PUSH
3119: LD_INT 3
3121: MOD
3122: PUSH
3123: LD_INT 0
3125: EQUAL
3126: PUSH
3127: LD_EXP 5
3131: PUSH
3132: LD_INT 10
3134: MOD
3135: PUSH
3136: LD_INT 0
3138: EQUAL
3139: OR
3140: PUSH
3141: LD_EXP 5
3145: PUSH
3146: LD_INT 0
3148: GREATER
3149: AND
3150: IFFALSE 3156
// InitBonus ;
3152: CALL 9272 0 0
// if waveNumber mod 10 = 0 then
3156: LD_EXP 5
3160: PUSH
3161: LD_INT 10
3163: MOD
3164: PUSH
3165: LD_INT 0
3167: EQUAL
3168: IFFALSE 3174
// SaveForQuickRestart ;
3170: CALL_OW 22
// if waveNumber = 100 then
3174: LD_EXP 5
3178: PUSH
3179: LD_INT 100
3181: EQUAL
3182: IFFALSE 3195
// begin FogOff ( your_side ) ;
3184: LD_OWVAR 2
3188: PPUSH
3189: CALL_OW 344
// break ;
3193: GO 3252
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3195: LD_ADDR_EXP 4
3199: PUSH
3200: LD_INT 3150
3202: PPUSH
3203: LD_INT 5250
3205: PPUSH
3206: CALL_OW 12
3210: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3211: LD_EXP 4
3215: PPUSH
3216: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3220: LD_ADDR_EXP 5
3224: PUSH
3225: LD_EXP 5
3229: PUSH
3230: LD_INT 1
3232: PLUS
3233: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3234: LD_EXP 5
3238: PPUSH
3239: CALL 4273 0 1
// end ; Wait ( 0 0$01 ) ;
3243: LD_INT 35
3245: PPUSH
3246: CALL_OW 67
// end ;
3250: GO 3026
// end ;
3252: PPOPN 1
3254: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3255: LD_EXP 4
3259: PUSH
3260: LD_INT 0
3262: GREATER
3263: IFFALSE 3283
3265: GO 3267
3267: DISABLE
// begin enable ;
3268: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3269: LD_ADDR_EXP 4
3273: PUSH
3274: LD_EXP 4
3278: PUSH
3279: LD_INT 35
3281: MINUS
3282: ST_TO_ADDR
// end ; end_of_file
3283: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3284: LD_VAR 0 1
3288: PUSH
3289: LD_EXP 13
3293: IN
3294: NOT
3295: IFFALSE 3326
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3297: LD_ADDR_EXP 13
3301: PUSH
3302: LD_EXP 13
3306: PPUSH
3307: LD_EXP 13
3311: PUSH
3312: LD_INT 1
3314: PLUS
3315: PPUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 2
3325: ST_TO_ADDR
// end ;
3326: PPOPN 1
3328: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 26752 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 255
3347: PUSH
3348: LD_OWVAR 2
3352: EQUAL
3353: PUSH
3354: LD_VAR 0 1
3358: PPUSH
3359: CALL_OW 247
3363: PUSH
3364: LD_INT 1
3366: EQUAL
3367: AND
3368: IFFALSE 3399
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3370: LD_ADDR_EXP 8
3374: PUSH
3375: LD_EXP 8
3379: PPUSH
3380: LD_EXP 8
3384: PUSH
3385: LD_INT 1
3387: PLUS
3388: PPUSH
3389: LD_VAR 0 1
3393: PPUSH
3394: CALL_OW 2
3398: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3399: LD_VAR 0 1
3403: PPUSH
3404: CALL_OW 255
3408: PUSH
3409: LD_INT 7
3411: EQUAL
3412: IFFALSE 3786
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3414: LD_VAR 0 1
3418: PUSH
3419: LD_INT 34
3421: PUSH
3422: LD_INT 91
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: PPUSH
3429: CALL_OW 69
3433: IN
3434: IFFALSE 3479
// begin if Rand ( 1 , 100 ) <= 70 then
3436: LD_INT 1
3438: PPUSH
3439: LD_INT 100
3441: PPUSH
3442: CALL_OW 12
3446: PUSH
3447: LD_INT 70
3449: LESSEQUAL
3450: IFFALSE 3479
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: CALL_OW 250
3461: PPUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 251
3471: PPUSH
3472: LD_INT 10
3474: PPUSH
3475: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3479: LD_VAR 0 1
3483: PPUSH
3484: CALL_OW 247
3488: PUSH
3489: LD_INT 1
3491: DOUBLE
3492: EQUAL
3493: IFTRUE 3497
3495: GO 3631
3497: POP
// begin case GetClass ( un ) of class_apeman :
3498: LD_VAR 0 1
3502: PPUSH
3503: CALL_OW 257
3507: PUSH
3508: LD_INT 12
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3526
3516: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3517: LD_INT 2
3519: PPUSH
3520: CALL 471 0 1
3524: GO 3629
3526: LD_INT 15
3528: DOUBLE
3529: EQUAL
3530: IFTRUE 3534
3532: GO 3544
3534: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3535: LD_INT 5
3537: PPUSH
3538: CALL 471 0 1
3542: GO 3629
3544: LD_INT 17
3546: DOUBLE
3547: EQUAL
3548: IFTRUE 3552
3550: GO 3562
3552: POP
// AddPoints ( 30 ) ; class_soldier :
3553: LD_INT 30
3555: PPUSH
3556: CALL 471 0 1
3560: GO 3629
3562: LD_INT 1
3564: DOUBLE
3565: EQUAL
3566: IFTRUE 3570
3568: GO 3580
3570: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3571: LD_INT 50
3573: PPUSH
3574: CALL 471 0 1
3578: GO 3629
3580: LD_INT 9
3582: DOUBLE
3583: EQUAL
3584: IFTRUE 3600
3586: LD_INT 5
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3600
3592: LD_INT 8
3594: DOUBLE
3595: EQUAL
3596: IFTRUE 3600
3598: GO 3610
3600: POP
// AddPoints ( 75 ) ; class_mechanic :
3601: LD_INT 75
3603: PPUSH
3604: CALL 471 0 1
3608: GO 3629
3610: LD_INT 3
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3618
3616: GO 3628
3618: POP
// AddPoints ( 60 ) ; end ;
3619: LD_INT 60
3621: PPUSH
3622: CALL 471 0 1
3626: GO 3629
3628: POP
// end ; unit_vehicle :
3629: GO 3786
3631: LD_INT 2
3633: DOUBLE
3634: EQUAL
3635: IFTRUE 3639
3637: GO 3785
3639: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 265
3649: PUSH
3650: LD_INT 12
3652: DOUBLE
3653: EQUAL
3654: IFTRUE 3670
3656: LD_INT 1
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3670
3662: LD_INT 11
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3680
3670: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3671: LD_INT 100
3673: PPUSH
3674: CALL 471 0 1
3678: GO 3783
3680: LD_INT 13
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3718
3686: LD_INT 14
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3718
3692: LD_INT 2
3694: DOUBLE
3695: EQUAL
3696: IFTRUE 3718
3698: LD_INT 3
3700: DOUBLE
3701: EQUAL
3702: IFTRUE 3718
3704: LD_INT 21
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3718
3710: LD_INT 22
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3718
3716: GO 3728
3718: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3719: LD_INT 250
3721: PPUSH
3722: CALL 471 0 1
3726: GO 3783
3728: LD_INT 4
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3754
3734: LD_INT 5
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3754
3740: LD_INT 23
3742: DOUBLE
3743: EQUAL
3744: IFTRUE 3754
3746: LD_INT 24
3748: DOUBLE
3749: EQUAL
3750: IFTRUE 3754
3752: GO 3764
3754: POP
// AddPoints ( 500 ) ; 25 :
3755: LD_INT 500
3757: PPUSH
3758: CALL 471 0 1
3762: GO 3783
3764: LD_INT 25
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3782
3772: POP
// AddPoints ( 1250 ) ; end ;
3773: LD_INT 1250
3775: PPUSH
3776: CALL 471 0 1
3780: GO 3783
3782: POP
// end ; end ;
3783: GO 3786
3785: POP
// end ; end ;
3786: PPOPN 1
3788: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3789: LD_VAR 0 1
3793: PPUSH
3794: CALL_OW 266
3798: PUSH
3799: LD_INT 0
3801: EQUAL
3802: IFFALSE 3852
// begin base_x := GetX ( b ) ;
3804: LD_ADDR_EXP 9
3808: PUSH
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 250
3818: ST_TO_ADDR
// base_y := GetY ( b ) ;
3819: LD_ADDR_EXP 10
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 251
3833: ST_TO_ADDR
// base := b ;
3834: LD_ADDR_EXP 11
3838: PUSH
3839: LD_VAR 0 1
3843: ST_TO_ADDR
// game_started := true ;
3844: LD_ADDR_EXP 7
3848: PUSH
3849: LD_INT 1
3851: ST_TO_ADDR
// end ; end ;
3852: PPOPN 1
3854: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3855: LD_VAR 0 1
3859: PPUSH
3860: CALL_OW 255
3864: PUSH
3865: LD_OWVAR 2
3869: EQUAL
3870: IFFALSE 3874
// exit ;
3872: GO 4021
// if GetType ( un ) = unit_vehicle then
3874: LD_VAR 0 1
3878: PPUSH
3879: CALL_OW 247
3883: PUSH
3884: LD_INT 2
3886: EQUAL
3887: IFFALSE 3940
// begin KillUnit ( un ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 248
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: PUSH
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 264
3921: PUSH
3922: LD_INT 49
3924: PUSH
3925: EMPTY
3926: LIST
3927: IN
3928: OR
3929: IFFALSE 3940
// ExplodeVehicle ( un ) ;
3931: LD_VAR 0 1
3935: PPUSH
3936: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3940: LD_VAR 0 1
3944: PPUSH
3945: CALL_OW 247
3949: PUSH
3950: LD_INT 1
3952: EQUAL
3953: IFFALSE 4021
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 248
3964: PUSH
3965: LD_INT 2
3967: EQUAL
3968: PUSH
3969: LD_INT 5
3971: PPUSH
3972: LD_INT 7
3974: PPUSH
3975: CALL_OW 321
3979: PUSH
3980: LD_INT 2
3982: NONEQUAL
3983: AND
3984: PUSH
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 248
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: IN
4009: OR
4010: IFFALSE 4021
// KillUnit ( un ) ;
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 66
// end ; end ;
4021: PPOPN 1
4023: END
// every 0 0$1 do
4024: GO 4026
4026: DISABLE
// begin enable ;
4027: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4028: LD_INT 4
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 22
4036: PUSH
4037: LD_OWVAR 2
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 513
// end ;
4050: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4051: LD_EXP 7
4055: PUSH
4056: LD_INT 22
4058: PUSH
4059: LD_OWVAR 2
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: LD_INT 1
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PPUSH
4082: CALL_OW 69
4086: PUSH
4087: LD_INT 0
4089: EQUAL
4090: AND
4091: IFFALSE 4103
4093: GO 4095
4095: DISABLE
// YouLost ( die ) ;
4096: LD_STRING die
4098: PPUSH
4099: CALL_OW 104
4103: END
// every 0 0$21 trigger tick <= 15 15$00 do
4104: LD_OWVAR 1
4108: PUSH
4109: LD_INT 31500
4111: LESSEQUAL
4112: IFFALSE 4139
4114: GO 4116
4116: DISABLE
// begin enable ;
4117: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4118: LD_INT 1
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: CALL_OW 12
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: CALL_OW 55
// end ;
4139: END
// every 0 0$51 trigger tick > 15 15$00 do
4140: LD_OWVAR 1
4144: PUSH
4145: LD_INT 31500
4147: GREATER
4148: IFFALSE 4195
4150: GO 4152
4152: DISABLE
// begin enable ;
4153: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4154: LD_INT 22
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 69
4168: PUSH
4169: LD_INT 0
4171: EQUAL
4172: IFFALSE 4195
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4174: LD_INT 1
4176: PPUSH
4177: LD_INT 5
4179: PPUSH
4180: CALL_OW 12
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: LD_INT 1
4190: PPUSH
4191: CALL_OW 55
// end ;
4195: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 308
4208: IFFALSE 4219
// KillUnit ( building ) ;
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 66
// end ;
4219: PPOPN 2
4221: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_VAR 0 2
4231: PPUSH
4232: LD_VAR 0 3
4236: PPUSH
4237: CALL 26848 0 3
// end ;
4241: PPOPN 3
4243: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_VAR 0 2
4253: PPUSH
4254: CALL 26872 0 2
// end ;
4258: PPOPN 2
4260: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4261: LD_VAR 0 1
4265: PPUSH
4266: CALL 26856 0 1
// end ; end_of_file
4270: PPOPN 1
4272: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
4279: PPUSH
4280: PPUSH
4281: PPUSH
4282: PPUSH
4283: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4284: LD_ADDR_VAR 0 7
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: LD_INT 2
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: ST_TO_ADDR
// uc_side := 7 ;
4299: LD_ADDR_OWVAR 20
4303: PUSH
4304: LD_INT 7
4306: ST_TO_ADDR
// l := 0 ;
4307: LD_ADDR_VAR 0 9
4311: PUSH
4312: LD_INT 0
4314: ST_TO_ADDR
// case num of 1 :
4315: LD_VAR 0 1
4319: PUSH
4320: LD_INT 1
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4347
4328: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: LD_INT 12
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: CALL 6676 0 2
4344: ST_TO_ADDR
4345: GO 6485
4347: LD_INT 2
4349: DOUBLE
4350: EQUAL
4351: IFTRUE 4355
4353: GO 4374
4355: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 12
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL 6747 0 2
4371: ST_TO_ADDR
4372: GO 6485
4374: LD_INT 3
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4401
4382: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: LD_INT 12
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: CALL 6818 0 2
4398: ST_TO_ADDR
4399: GO 6485
4401: LD_INT 4
4403: DOUBLE
4404: EQUAL
4405: IFTRUE 4409
4407: GO 4428
4409: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4410: LD_ADDR_VAR 0 2
4414: PUSH
4415: LD_INT 7
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL 6897 0 2
4425: ST_TO_ADDR
4426: GO 6485
4428: LD_INT 5
4430: DOUBLE
4431: EQUAL
4432: IFTRUE 4436
4434: GO 4455
4436: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: LD_INT 7
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: CALL 7293 0 2
4452: ST_TO_ADDR
4453: GO 6485
4455: LD_INT 6
4457: DOUBLE
4458: EQUAL
4459: IFTRUE 4463
4461: GO 4482
4463: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: LD_INT 6
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL 7713 0 2
4479: ST_TO_ADDR
4480: GO 6485
4482: LD_INT 7
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4509
4490: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 15
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL 8133 0 2
4506: ST_TO_ADDR
4507: GO 6485
4509: LD_INT 8
4511: DOUBLE
4512: EQUAL
4513: IFTRUE 4517
4515: GO 4536
4517: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 7
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: CALL 8234 0 2
4533: ST_TO_ADDR
4534: GO 6485
4536: LD_INT 9
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4575
4544: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: LD_INT 4
4552: PPUSH
4553: LD_INT 1
4555: PPUSH
4556: CALL 8234 0 2
4560: PUSH
4561: LD_INT 7
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: CALL 7293 0 2
4571: ADD
4572: ST_TO_ADDR
4573: GO 6485
4575: LD_INT 10
4577: DOUBLE
4578: EQUAL
4579: IFTRUE 4583
4581: GO 4614
4583: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4584: LD_ADDR_VAR 0 2
4588: PUSH
4589: LD_INT 9
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: CALL 8133 0 2
4599: PUSH
4600: LD_INT 14
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL 6818 0 2
4610: ADD
4611: ST_TO_ADDR
4612: GO 6485
4614: LD_INT 11
4616: DOUBLE
4617: EQUAL
4618: IFTRUE 4670
4620: LD_INT 21
4622: DOUBLE
4623: EQUAL
4624: IFTRUE 4670
4626: LD_INT 31
4628: DOUBLE
4629: EQUAL
4630: IFTRUE 4670
4632: LD_INT 41
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4670
4638: LD_INT 51
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4670
4644: LD_INT 61
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4670
4650: LD_INT 71
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4670
4656: LD_INT 81
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4670
4662: LD_INT 91
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4779
4670: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_INT 20
4678: PUSH
4679: LD_INT 30
4681: PUSH
4682: LD_INT 40
4684: PUSH
4685: LD_INT 45
4687: PUSH
4688: LD_INT 50
4690: PUSH
4691: LD_INT 60
4693: PUSH
4694: LD_INT 70
4696: PUSH
4697: LD_INT 80
4699: PUSH
4700: LD_INT 100
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: PUSH
4714: LD_VAR 0 1
4718: PUSH
4719: LD_INT 10
4721: DIV
4722: ARRAY
4723: PPUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: LD_INT 6
4738: PUSH
4739: LD_INT 7
4741: PUSH
4742: LD_INT 8
4744: PUSH
4745: LD_INT 9
4747: PUSH
4748: LD_INT 10
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: LD_INT 10
4769: DIV
4770: ARRAY
4771: PPUSH
4772: CALL 6676 0 2
4776: ST_TO_ADDR
4777: GO 6485
4779: LD_INT 12
4781: DOUBLE
4782: EQUAL
4783: IFTRUE 4835
4785: LD_INT 22
4787: DOUBLE
4788: EQUAL
4789: IFTRUE 4835
4791: LD_INT 32
4793: DOUBLE
4794: EQUAL
4795: IFTRUE 4835
4797: LD_INT 42
4799: DOUBLE
4800: EQUAL
4801: IFTRUE 4835
4803: LD_INT 52
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4835
4809: LD_INT 62
4811: DOUBLE
4812: EQUAL
4813: IFTRUE 4835
4815: LD_INT 72
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4835
4821: LD_INT 82
4823: DOUBLE
4824: EQUAL
4825: IFTRUE 4835
4827: LD_INT 92
4829: DOUBLE
4830: EQUAL
4831: IFTRUE 4835
4833: GO 4944
4835: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: LD_INT 16
4843: PUSH
4844: LD_INT 21
4846: PUSH
4847: LD_INT 28
4849: PUSH
4850: LD_INT 33
4852: PUSH
4853: LD_INT 39
4855: PUSH
4856: LD_INT 46
4858: PUSH
4859: LD_INT 56
4861: PUSH
4862: LD_INT 66
4864: PUSH
4865: LD_INT 80
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_VAR 0 1
4883: PUSH
4884: LD_INT 10
4886: DIV
4887: ARRAY
4888: PPUSH
4889: LD_INT 2
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: LD_INT 5
4900: PUSH
4901: LD_INT 6
4903: PUSH
4904: LD_INT 7
4906: PUSH
4907: LD_INT 8
4909: PUSH
4910: LD_INT 9
4912: PUSH
4913: LD_INT 10
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_VAR 0 1
4931: PUSH
4932: LD_INT 10
4934: DIV
4935: ARRAY
4936: PPUSH
4937: CALL 6747 0 2
4941: ST_TO_ADDR
4942: GO 6485
4944: LD_INT 13
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 5000
4950: LD_INT 23
4952: DOUBLE
4953: EQUAL
4954: IFTRUE 5000
4956: LD_INT 33
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 5000
4962: LD_INT 43
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 5000
4968: LD_INT 53
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 5000
4974: LD_INT 63
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 5000
4980: LD_INT 73
4982: DOUBLE
4983: EQUAL
4984: IFTRUE 5000
4986: LD_INT 83
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 5000
4992: LD_INT 93
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5109
5000: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: LD_INT 14
5008: PUSH
5009: LD_INT 18
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 27
5017: PUSH
5018: LD_INT 33
5020: PUSH
5021: LD_INT 39
5023: PUSH
5024: LD_INT 44
5026: PUSH
5027: LD_INT 57
5029: PUSH
5030: LD_INT 65
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: LD_VAR 0 1
5048: PUSH
5049: LD_INT 10
5051: DIV
5052: ARRAY
5053: PPUSH
5054: LD_INT 2
5056: PUSH
5057: LD_INT 3
5059: PUSH
5060: LD_INT 4
5062: PUSH
5063: LD_INT 5
5065: PUSH
5066: LD_INT 6
5068: PUSH
5069: LD_INT 7
5071: PUSH
5072: LD_INT 8
5074: PUSH
5075: LD_INT 9
5077: PUSH
5078: LD_INT 10
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_VAR 0 1
5096: PUSH
5097: LD_INT 10
5099: DIV
5100: ARRAY
5101: PPUSH
5102: CALL 6818 0 2
5106: ST_TO_ADDR
5107: GO 6485
5109: LD_INT 14
5111: DOUBLE
5112: EQUAL
5113: IFTRUE 5165
5115: LD_INT 24
5117: DOUBLE
5118: EQUAL
5119: IFTRUE 5165
5121: LD_INT 34
5123: DOUBLE
5124: EQUAL
5125: IFTRUE 5165
5127: LD_INT 44
5129: DOUBLE
5130: EQUAL
5131: IFTRUE 5165
5133: LD_INT 54
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5165
5139: LD_INT 64
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5165
5145: LD_INT 74
5147: DOUBLE
5148: EQUAL
5149: IFTRUE 5165
5151: LD_INT 84
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5165
5157: LD_INT 94
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5274
5165: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5166: LD_ADDR_VAR 0 2
5170: PUSH
5171: LD_INT 9
5173: PUSH
5174: LD_INT 15
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 30
5182: PUSH
5183: LD_INT 39
5185: PUSH
5186: LD_INT 45
5188: PUSH
5189: LD_INT 56
5191: PUSH
5192: LD_INT 60
5194: PUSH
5195: LD_INT 65
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_VAR 0 1
5213: PUSH
5214: LD_INT 10
5216: DIV
5217: ARRAY
5218: PPUSH
5219: LD_INT 2
5221: PUSH
5222: LD_INT 3
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 6
5233: PUSH
5234: LD_INT 7
5236: PUSH
5237: LD_INT 8
5239: PUSH
5240: LD_INT 9
5242: PUSH
5243: LD_INT 10
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: LD_VAR 0 1
5261: PUSH
5262: LD_INT 10
5264: DIV
5265: ARRAY
5266: PPUSH
5267: CALL 6897 0 2
5271: ST_TO_ADDR
5272: GO 6485
5274: LD_INT 15
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5330
5280: LD_INT 25
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5330
5286: LD_INT 35
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5330
5292: LD_INT 45
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5330
5298: LD_INT 55
5300: DOUBLE
5301: EQUAL
5302: IFTRUE 5330
5304: LD_INT 65
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5330
5310: LD_INT 75
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5330
5316: LD_INT 85
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5330
5322: LD_INT 95
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5439
5330: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: LD_INT 6
5338: PUSH
5339: LD_INT 11
5341: PUSH
5342: LD_INT 15
5344: PUSH
5345: LD_INT 20
5347: PUSH
5348: LD_INT 25
5350: PUSH
5351: LD_INT 30
5353: PUSH
5354: LD_INT 35
5356: PUSH
5357: LD_INT 40
5359: PUSH
5360: LD_INT 45
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 10
5381: DIV
5382: ARRAY
5383: PPUSH
5384: LD_INT 2
5386: PUSH
5387: LD_INT 3
5389: PUSH
5390: LD_INT 4
5392: PUSH
5393: LD_INT 5
5395: PUSH
5396: LD_INT 6
5398: PUSH
5399: LD_INT 7
5401: PUSH
5402: LD_INT 8
5404: PUSH
5405: LD_INT 9
5407: PUSH
5408: LD_INT 10
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_VAR 0 1
5426: PUSH
5427: LD_INT 10
5429: DIV
5430: ARRAY
5431: PPUSH
5432: CALL 7293 0 2
5436: ST_TO_ADDR
5437: GO 6485
5439: LD_INT 16
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5495
5445: LD_INT 26
5447: DOUBLE
5448: EQUAL
5449: IFTRUE 5495
5451: LD_INT 36
5453: DOUBLE
5454: EQUAL
5455: IFTRUE 5495
5457: LD_INT 46
5459: DOUBLE
5460: EQUAL
5461: IFTRUE 5495
5463: LD_INT 56
5465: DOUBLE
5466: EQUAL
5467: IFTRUE 5495
5469: LD_INT 66
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5495
5475: LD_INT 76
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5495
5481: LD_INT 86
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5495
5487: LD_INT 96
5489: DOUBLE
5490: EQUAL
5491: IFTRUE 5495
5493: GO 5604
5495: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_INT 9
5503: PUSH
5504: LD_INT 12
5506: PUSH
5507: LD_INT 15
5509: PUSH
5510: LD_INT 18
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: LD_INT 27
5521: PUSH
5522: LD_INT 30
5524: PUSH
5525: LD_INT 33
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: LD_VAR 0 1
5543: PUSH
5544: LD_INT 10
5546: DIV
5547: ARRAY
5548: PPUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 5
5560: PUSH
5561: LD_INT 6
5563: PUSH
5564: LD_INT 7
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: LD_INT 10
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: PUSH
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 10
5594: DIV
5595: ARRAY
5596: PPUSH
5597: CALL 7713 0 2
5601: ST_TO_ADDR
5602: GO 6485
5604: LD_INT 17
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5660
5610: LD_INT 27
5612: DOUBLE
5613: EQUAL
5614: IFTRUE 5660
5616: LD_INT 37
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5660
5622: LD_INT 47
5624: DOUBLE
5625: EQUAL
5626: IFTRUE 5660
5628: LD_INT 57
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5660
5634: LD_INT 67
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5660
5640: LD_INT 77
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5660
5646: LD_INT 87
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5660
5652: LD_INT 97
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5660
5658: GO 5769
5660: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5661: LD_ADDR_VAR 0 2
5665: PUSH
5666: LD_INT 14
5668: PUSH
5669: LD_INT 16
5671: PUSH
5672: LD_INT 18
5674: PUSH
5675: LD_INT 22
5677: PUSH
5678: LD_INT 24
5680: PUSH
5681: LD_INT 26
5683: PUSH
5684: LD_INT 28
5686: PUSH
5687: LD_INT 32
5689: PUSH
5690: LD_INT 35
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 10
5711: DIV
5712: ARRAY
5713: PPUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 4
5722: PUSH
5723: LD_INT 5
5725: PUSH
5726: LD_INT 6
5728: PUSH
5729: LD_INT 7
5731: PUSH
5732: LD_INT 8
5734: PUSH
5735: LD_INT 9
5737: PUSH
5738: LD_INT 10
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_VAR 0 1
5756: PUSH
5757: LD_INT 10
5759: DIV
5760: ARRAY
5761: PPUSH
5762: CALL 8133 0 2
5766: ST_TO_ADDR
5767: GO 6485
5769: LD_INT 18
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5825
5775: LD_INT 28
5777: DOUBLE
5778: EQUAL
5779: IFTRUE 5825
5781: LD_INT 38
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5825
5787: LD_INT 48
5789: DOUBLE
5790: EQUAL
5791: IFTRUE 5825
5793: LD_INT 58
5795: DOUBLE
5796: EQUAL
5797: IFTRUE 5825
5799: LD_INT 68
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5825
5805: LD_INT 78
5807: DOUBLE
5808: EQUAL
5809: IFTRUE 5825
5811: LD_INT 88
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5825
5817: LD_INT 98
5819: DOUBLE
5820: EQUAL
5821: IFTRUE 5825
5823: GO 5934
5825: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: LD_INT 9
5833: PUSH
5834: LD_INT 12
5836: PUSH
5837: LD_INT 15
5839: PUSH
5840: LD_INT 18
5842: PUSH
5843: LD_INT 21
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: LD_INT 27
5851: PUSH
5852: LD_INT 30
5854: PUSH
5855: LD_INT 33
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: LD_VAR 0 1
5873: PUSH
5874: LD_INT 10
5876: DIV
5877: ARRAY
5878: PPUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: LD_INT 7
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: LD_INT 9
5902: PUSH
5903: LD_INT 10
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_VAR 0 1
5921: PUSH
5922: LD_INT 10
5924: DIV
5925: ARRAY
5926: PPUSH
5927: CALL 8234 0 2
5931: ST_TO_ADDR
5932: GO 6485
5934: LD_INT 19
5936: DOUBLE
5937: EQUAL
5938: IFTRUE 5990
5940: LD_INT 29
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5990
5946: LD_INT 39
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5990
5952: LD_INT 49
5954: DOUBLE
5955: EQUAL
5956: IFTRUE 5990
5958: LD_INT 59
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5990
5964: LD_INT 69
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5990
5970: LD_INT 79
5972: DOUBLE
5973: EQUAL
5974: IFTRUE 5990
5976: LD_INT 89
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5990
5982: LD_INT 99
5984: DOUBLE
5985: EQUAL
5986: IFTRUE 5990
5988: GO 6201
5990: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5991: LD_ADDR_VAR 0 2
5995: PUSH
5996: LD_INT 4
5998: PUSH
5999: LD_INT 7
6001: PUSH
6002: LD_INT 10
6004: PUSH
6005: LD_INT 13
6007: PUSH
6008: LD_INT 14
6010: PUSH
6011: LD_INT 17
6013: PUSH
6014: LD_INT 19
6016: PUSH
6017: LD_INT 21
6019: PUSH
6020: LD_INT 23
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: LD_INT 10
6041: DIV
6042: ARRAY
6043: PPUSH
6044: LD_INT 2
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: LD_INT 4
6052: PUSH
6053: LD_INT 5
6055: PUSH
6056: LD_INT 6
6058: PUSH
6059: LD_INT 7
6061: PUSH
6062: LD_INT 8
6064: PUSH
6065: LD_INT 9
6067: PUSH
6068: LD_INT 10
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: PUSH
6082: LD_VAR 0 1
6086: PUSH
6087: LD_INT 10
6089: DIV
6090: ARRAY
6091: PPUSH
6092: CALL 8234 0 2
6096: PUSH
6097: LD_INT 4
6099: PUSH
6100: LD_INT 7
6102: PUSH
6103: LD_INT 10
6105: PUSH
6106: LD_INT 13
6108: PUSH
6109: LD_INT 14
6111: PUSH
6112: LD_INT 17
6114: PUSH
6115: LD_INT 19
6117: PUSH
6118: LD_INT 22
6120: PUSH
6121: LD_INT 25
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_VAR 0 1
6139: PUSH
6140: LD_INT 10
6142: DIV
6143: ARRAY
6144: PPUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: LD_INT 6
6159: PUSH
6160: LD_INT 7
6162: PUSH
6163: LD_INT 8
6165: PUSH
6166: LD_INT 9
6168: PUSH
6169: LD_INT 10
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_VAR 0 1
6187: PUSH
6188: LD_INT 10
6190: DIV
6191: ARRAY
6192: PPUSH
6193: CALL 7293 0 2
6197: ADD
6198: ST_TO_ADDR
6199: GO 6485
6201: LD_INT 20
6203: DOUBLE
6204: EQUAL
6205: IFTRUE 6257
6207: LD_INT 30
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6257
6213: LD_INT 40
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6257
6219: LD_INT 50
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6257
6225: LD_INT 60
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6257
6231: LD_INT 70
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6257
6237: LD_INT 80
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6257
6243: LD_INT 90
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6257
6249: LD_INT 100
6251: DOUBLE
6252: EQUAL
6253: IFTRUE 6257
6255: GO 6484
6257: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6258: LD_ADDR_VAR 0 2
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 7
6268: PUSH
6269: LD_INT 10
6271: PUSH
6272: LD_INT 13
6274: PUSH
6275: LD_INT 14
6277: PUSH
6278: LD_INT 17
6280: PUSH
6281: LD_INT 19
6283: PUSH
6284: LD_INT 21
6286: PUSH
6287: LD_INT 23
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 10
6308: DIVREAL
6309: PUSH
6310: LD_INT 1
6312: MINUS
6313: ARRAY
6314: PPUSH
6315: LD_INT 2
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: LD_INT 7
6332: PUSH
6333: LD_INT 8
6335: PUSH
6336: LD_INT 9
6338: PUSH
6339: LD_INT 10
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 10
6360: DIVREAL
6361: PUSH
6362: LD_INT 1
6364: MINUS
6365: ARRAY
6366: PPUSH
6367: CALL 8133 0 2
6371: PUSH
6372: LD_INT 4
6374: PUSH
6375: LD_INT 7
6377: PUSH
6378: LD_INT 10
6380: PUSH
6381: LD_INT 13
6383: PUSH
6384: LD_INT 14
6386: PUSH
6387: LD_INT 17
6389: PUSH
6390: LD_INT 19
6392: PUSH
6393: LD_INT 22
6395: PUSH
6396: LD_INT 25
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 10
6417: DIVREAL
6418: PUSH
6419: LD_INT 1
6421: MINUS
6422: ARRAY
6423: PPUSH
6424: LD_INT 2
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: LD_INT 6
6438: PUSH
6439: LD_INT 7
6441: PUSH
6442: LD_INT 8
6444: PUSH
6445: LD_INT 9
6447: PUSH
6448: LD_INT 10
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: LD_VAR 0 1
6466: PUSH
6467: LD_INT 10
6469: DIVREAL
6470: PUSH
6471: LD_INT 1
6473: MINUS
6474: ARRAY
6475: PPUSH
6476: CALL 7713 0 2
6480: ADD
6481: ST_TO_ADDR
6482: GO 6485
6484: POP
// for i in result do
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: LD_VAR 0 2
6494: PUSH
6495: FOR_IN
6496: IFFALSE 6669
// begin a := rand ( 1 , 2 ) ;
6498: LD_ADDR_VAR 0 8
6502: PUSH
6503: LD_INT 1
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: CALL_OW 12
6513: ST_TO_ADDR
// if a = 1 then
6514: LD_VAR 0 8
6518: PUSH
6519: LD_INT 1
6521: EQUAL
6522: IFFALSE 6538
// SetDir ( i , 3 ) else
6524: LD_VAR 0 3
6528: PPUSH
6529: LD_INT 3
6531: PPUSH
6532: CALL_OW 233
6536: GO 6550
// SetDir ( i , 5 ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_INT 5
6545: PPUSH
6546: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_VAR 0 7
6559: PUSH
6560: LD_VAR 0 8
6564: ARRAY
6565: PPUSH
6566: LD_INT 0
6568: PPUSH
6569: CALL_OW 49
// if GetControl ( i ) = control_manual then
6573: LD_VAR 0 3
6577: PPUSH
6578: CALL_OW 263
6582: PUSH
6583: LD_INT 1
6585: EQUAL
6586: IFFALSE 6632
// begin uc_nation := GetNation ( i ) ;
6588: LD_ADDR_OWVAR 21
6592: PUSH
6593: LD_VAR 0 3
6597: PPUSH
6598: CALL_OW 248
6602: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6603: LD_INT 0
6605: PPUSH
6606: LD_INT 3
6608: PPUSH
6609: LD_VAR 0 5
6613: PPUSH
6614: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6618: CALL_OW 44
6622: PPUSH
6623: LD_VAR 0 3
6627: PPUSH
6628: CALL_OW 52
// end ; l := l + 1 ;
6632: LD_ADDR_VAR 0 9
6636: PUSH
6637: LD_VAR 0 9
6641: PUSH
6642: LD_INT 1
6644: PLUS
6645: ST_TO_ADDR
// if l mod 10 = 0 then
6646: LD_VAR 0 9
6650: PUSH
6651: LD_INT 10
6653: MOD
6654: PUSH
6655: LD_INT 0
6657: EQUAL
6658: IFFALSE 6667
// Wait ( 0 0$02 ) ;
6660: LD_INT 70
6662: PPUSH
6663: CALL_OW 67
// end ;
6667: GO 6495
6669: POP
6670: POP
// end ;
6671: LD_VAR 0 2
6675: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6676: LD_INT 0
6678: PPUSH
6679: PPUSH
6680: PPUSH
// uc_nation := nation_nature ;
6681: LD_ADDR_OWVAR 21
6685: PUSH
6686: LD_INT 0
6688: ST_TO_ADDR
// for i = 1 to n do
6689: LD_ADDR_VAR 0 4
6693: PUSH
6694: DOUBLE
6695: LD_INT 1
6697: DEC
6698: ST_TO_ADDR
6699: LD_VAR 0 1
6703: PUSH
6704: FOR_TO
6705: IFFALSE 6740
// begin PrepareHuman ( false , class_apeman , skill ) ;
6707: LD_INT 0
6709: PPUSH
6710: LD_INT 12
6712: PPUSH
6713: LD_VAR 0 2
6717: PPUSH
6718: CALL_OW 380
// result := result ^ CreateHuman ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_VAR 0 3
6731: PUSH
6732: CALL_OW 44
6736: ADD
6737: ST_TO_ADDR
// end ;
6738: GO 6704
6740: POP
6741: POP
// end ;
6742: LD_VAR 0 3
6746: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6747: LD_INT 0
6749: PPUSH
6750: PPUSH
6751: PPUSH
// uc_nation := nation_nature ;
6752: LD_ADDR_OWVAR 21
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// for i = 1 to n do
6760: LD_ADDR_VAR 0 4
6764: PUSH
6765: DOUBLE
6766: LD_INT 1
6768: DEC
6769: ST_TO_ADDR
6770: LD_VAR 0 1
6774: PUSH
6775: FOR_TO
6776: IFFALSE 6811
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6778: LD_INT 0
6780: PPUSH
6781: LD_INT 15
6783: PPUSH
6784: LD_VAR 0 2
6788: PPUSH
6789: CALL_OW 380
// result := result ^ CreateHuman ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_VAR 0 3
6802: PUSH
6803: CALL_OW 44
6807: ADD
6808: ST_TO_ADDR
// end ;
6809: GO 6775
6811: POP
6812: POP
// end ;
6813: LD_VAR 0 3
6817: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6818: LD_INT 0
6820: PPUSH
6821: PPUSH
6822: PPUSH
// for i = 1 to n do
6823: LD_ADDR_VAR 0 4
6827: PUSH
6828: DOUBLE
6829: LD_INT 1
6831: DEC
6832: ST_TO_ADDR
6833: LD_VAR 0 1
6837: PUSH
6838: FOR_TO
6839: IFFALSE 6890
// begin uc_nation := rand ( 1 , 3 ) ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_INT 3
6851: PPUSH
6852: CALL_OW 12
6856: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6857: LD_INT 0
6859: PPUSH
6860: LD_INT 1
6862: PPUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 380
// result := result ^ CreateHuman ;
6872: LD_ADDR_VAR 0 3
6876: PUSH
6877: LD_VAR 0 3
6881: PUSH
6882: CALL_OW 44
6886: ADD
6887: ST_TO_ADDR
// end ;
6888: GO 6838
6890: POP
6891: POP
// end ;
6892: LD_VAR 0 3
6896: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
// for i = 1 to n do
6906: LD_ADDR_VAR 0 4
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_VAR 0 1
6920: PUSH
6921: FOR_TO
6922: IFFALSE 7286
// begin uc_nation := rand ( 1 , 3 ) ;
6924: LD_ADDR_OWVAR 21
6928: PUSH
6929: LD_INT 1
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: CALL_OW 12
6939: ST_TO_ADDR
// case uc_nation of 1 :
6940: LD_OWVAR 21
6944: PUSH
6945: LD_INT 1
6947: DOUBLE
6948: EQUAL
6949: IFTRUE 6953
6951: GO 7016
6953: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6954: LD_ADDR_VAR 0 6
6958: PUSH
6959: LD_INT 1
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6969: LD_ADDR_VAR 0 7
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6984: LD_ADDR_VAR 0 8
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
6999: LD_ADDR_VAR 0 9
7003: PUSH
7004: LD_INT 1
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: ST_TO_ADDR
// end ; 2 :
7014: GO 7151
7016: LD_INT 2
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7087
7024: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_INT 12
7032: PUSH
7033: LD_INT 11
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7040: LD_ADDR_VAR 0 7
7044: PUSH
7045: LD_INT 23
7047: PUSH
7048: LD_INT 24
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7055: LD_ADDR_VAR 0 8
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 5
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_INT 1
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
// end ; 3 :
7085: GO 7151
7087: LD_INT 3
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7150
7095: POP
// begin chassis := [ ru_medium_wheeled ] ;
7096: LD_ADDR_VAR 0 6
7100: PUSH
7101: LD_INT 21
7103: PUSH
7104: EMPTY
7105: LIST
7106: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7107: LD_ADDR_VAR 0 7
7111: PUSH
7112: LD_INT 42
7114: PUSH
7115: LD_INT 44
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7122: LD_ADDR_VAR 0 8
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: LD_INT 3
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7137: LD_ADDR_VAR 0 9
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: ST_TO_ADDR
// end ; end ;
7148: GO 7151
7150: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7151: LD_ADDR_OWVAR 37
7155: PUSH
7156: LD_VAR 0 6
7160: PUSH
7161: LD_INT 1
7163: PPUSH
7164: LD_VAR 0 6
7168: PPUSH
7169: CALL_OW 12
7173: ARRAY
7174: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7175: LD_ADDR_OWVAR 39
7179: PUSH
7180: LD_VAR 0 9
7184: PUSH
7185: LD_INT 1
7187: PPUSH
7188: LD_VAR 0 9
7192: PPUSH
7193: CALL_OW 12
7197: ARRAY
7198: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7199: LD_ADDR_OWVAR 38
7203: PUSH
7204: LD_VAR 0 8
7208: PUSH
7209: LD_INT 1
7211: PPUSH
7212: LD_VAR 0 8
7216: PPUSH
7217: CALL_OW 12
7221: ARRAY
7222: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7223: LD_ADDR_OWVAR 40
7227: PUSH
7228: LD_VAR 0 7
7232: PUSH
7233: LD_INT 1
7235: PPUSH
7236: LD_VAR 0 7
7240: PPUSH
7241: CALL_OW 12
7245: ARRAY
7246: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7247: LD_ADDR_OWVAR 41
7251: PUSH
7252: LD_INT 100
7254: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7255: LD_ADDR_VAR 0 3
7259: PUSH
7260: LD_VAR 0 3
7264: PPUSH
7265: LD_VAR 0 3
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: CALL_OW 45
7278: PPUSH
7279: CALL_OW 2
7283: ST_TO_ADDR
// end ;
7284: GO 6921
7286: POP
7287: POP
// end ;
7288: LD_VAR 0 3
7292: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
7301: PPUSH
// for i = 1 to n do
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: DOUBLE
7308: LD_INT 1
7310: DEC
7311: ST_TO_ADDR
7312: LD_VAR 0 1
7316: PUSH
7317: FOR_TO
7318: IFFALSE 7706
// begin uc_nation := rand ( 1 , 3 ) ;
7320: LD_ADDR_OWVAR 21
7324: PUSH
7325: LD_INT 1
7327: PPUSH
7328: LD_INT 3
7330: PPUSH
7331: CALL_OW 12
7335: ST_TO_ADDR
// case uc_nation of 1 :
7336: LD_OWVAR 21
7340: PUSH
7341: LD_INT 1
7343: DOUBLE
7344: EQUAL
7345: IFTRUE 7349
7347: GO 7420
7349: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: LD_INT 2
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7365: LD_ADDR_VAR 0 7
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: LD_INT 5
7375: PUSH
7376: LD_INT 9
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7384: LD_ADDR_VAR 0 8
7388: PUSH
7389: LD_INT 1
7391: PUSH
7392: LD_INT 3
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7399: LD_ADDR_VAR 0 9
7403: PUSH
7404: LD_INT 1
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 3
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// end ; 2 :
7418: GO 7571
7420: LD_INT 2
7422: DOUBLE
7423: EQUAL
7424: IFTRUE 7428
7426: GO 7499
7428: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7429: LD_ADDR_VAR 0 6
7433: PUSH
7434: LD_INT 13
7436: PUSH
7437: LD_INT 14
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7444: LD_ADDR_VAR 0 7
7448: PUSH
7449: LD_INT 27
7451: PUSH
7452: LD_INT 26
7454: PUSH
7455: LD_INT 25
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7463: LD_ADDR_VAR 0 8
7467: PUSH
7468: LD_INT 1
7470: PUSH
7471: LD_INT 5
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 1
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: ST_TO_ADDR
// end ; 3 :
7497: GO 7571
7499: LD_INT 3
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7570
7507: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7508: LD_ADDR_VAR 0 6
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 21
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7523: LD_ADDR_VAR 0 7
7527: PUSH
7528: LD_INT 44
7530: PUSH
7531: LD_INT 43
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7538: LD_ADDR_VAR 0 8
7542: PUSH
7543: LD_INT 1
7545: PUSH
7546: LD_INT 3
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7553: LD_ADDR_VAR 0 9
7557: PUSH
7558: LD_INT 1
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// end ; end ;
7568: GO 7571
7570: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7571: LD_ADDR_OWVAR 37
7575: PUSH
7576: LD_VAR 0 6
7580: PUSH
7581: LD_INT 1
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 12
7593: ARRAY
7594: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7595: LD_ADDR_OWVAR 39
7599: PUSH
7600: LD_VAR 0 9
7604: PUSH
7605: LD_INT 1
7607: PPUSH
7608: LD_VAR 0 9
7612: PPUSH
7613: CALL_OW 12
7617: ARRAY
7618: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7619: LD_ADDR_OWVAR 38
7623: PUSH
7624: LD_VAR 0 8
7628: PUSH
7629: LD_INT 1
7631: PPUSH
7632: LD_VAR 0 8
7636: PPUSH
7637: CALL_OW 12
7641: ARRAY
7642: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7643: LD_ADDR_OWVAR 40
7647: PUSH
7648: LD_VAR 0 7
7652: PUSH
7653: LD_INT 1
7655: PPUSH
7656: LD_VAR 0 7
7660: PPUSH
7661: CALL_OW 12
7665: ARRAY
7666: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7667: LD_ADDR_OWVAR 41
7671: PUSH
7672: LD_INT 100
7674: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_VAR 0 3
7684: PPUSH
7685: LD_VAR 0 3
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: PPUSH
7694: CALL_OW 45
7698: PPUSH
7699: CALL_OW 2
7703: ST_TO_ADDR
// end ;
7704: GO 7317
7706: POP
7707: POP
// end ;
7708: LD_VAR 0 3
7712: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7713: LD_INT 0
7715: PPUSH
7716: PPUSH
7717: PPUSH
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
// for i = 1 to n do
7722: LD_ADDR_VAR 0 4
7726: PUSH
7727: DOUBLE
7728: LD_INT 1
7730: DEC
7731: ST_TO_ADDR
7732: LD_VAR 0 1
7736: PUSH
7737: FOR_TO
7738: IFFALSE 8126
// begin uc_nation := rand ( 1 , 3 ) ;
7740: LD_ADDR_OWVAR 21
7744: PUSH
7745: LD_INT 1
7747: PPUSH
7748: LD_INT 3
7750: PPUSH
7751: CALL_OW 12
7755: ST_TO_ADDR
// case uc_nation of 1 :
7756: LD_OWVAR 21
7760: PUSH
7761: LD_INT 1
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7836
7769: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7770: LD_ADDR_VAR 0 6
7774: PUSH
7775: LD_INT 4
7777: PUSH
7778: LD_INT 5
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7785: LD_ADDR_VAR 0 7
7789: PUSH
7790: LD_INT 6
7792: PUSH
7793: LD_INT 7
7795: PUSH
7796: LD_INT 9
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7804: LD_ADDR_VAR 0 8
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: LD_INT 3
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7819: LD_ADDR_VAR 0 9
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: ST_TO_ADDR
// end ; 2 :
7834: GO 7991
7836: LD_INT 2
7838: DOUBLE
7839: EQUAL
7840: IFTRUE 7844
7842: GO 7919
7844: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7845: LD_ADDR_VAR 0 6
7849: PUSH
7850: LD_INT 13
7852: PUSH
7853: LD_INT 14
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7860: LD_ADDR_VAR 0 7
7864: PUSH
7865: LD_INT 27
7867: PUSH
7868: LD_INT 26
7870: PUSH
7871: LD_INT 28
7873: PUSH
7874: LD_INT 29
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7883: LD_ADDR_VAR 0 8
7887: PUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 5
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7898: LD_ADDR_VAR 0 9
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: ST_TO_ADDR
// end ; 3 :
7917: GO 7991
7919: LD_INT 3
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7990
7927: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7928: LD_ADDR_VAR 0 6
7932: PUSH
7933: LD_INT 23
7935: PUSH
7936: LD_INT 24
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7943: LD_ADDR_VAR 0 7
7947: PUSH
7948: LD_INT 46
7950: PUSH
7951: LD_INT 45
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7958: LD_ADDR_VAR 0 8
7962: PUSH
7963: LD_INT 1
7965: PUSH
7966: LD_INT 3
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7973: LD_ADDR_VAR 0 9
7977: PUSH
7978: LD_INT 1
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: ST_TO_ADDR
// end ; end ;
7988: GO 7991
7990: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7991: LD_ADDR_OWVAR 37
7995: PUSH
7996: LD_VAR 0 6
8000: PUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_VAR 0 6
8008: PPUSH
8009: CALL_OW 12
8013: ARRAY
8014: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8015: LD_ADDR_OWVAR 39
8019: PUSH
8020: LD_VAR 0 9
8024: PUSH
8025: LD_INT 1
8027: PPUSH
8028: LD_VAR 0 9
8032: PPUSH
8033: CALL_OW 12
8037: ARRAY
8038: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8039: LD_ADDR_OWVAR 38
8043: PUSH
8044: LD_VAR 0 8
8048: PUSH
8049: LD_INT 1
8051: PPUSH
8052: LD_VAR 0 8
8056: PPUSH
8057: CALL_OW 12
8061: ARRAY
8062: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8063: LD_ADDR_OWVAR 40
8067: PUSH
8068: LD_VAR 0 7
8072: PUSH
8073: LD_INT 1
8075: PPUSH
8076: LD_VAR 0 7
8080: PPUSH
8081: CALL_OW 12
8085: ARRAY
8086: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8087: LD_ADDR_OWVAR 41
8091: PUSH
8092: LD_INT 100
8094: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8095: LD_ADDR_VAR 0 3
8099: PUSH
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 1
8112: PLUS
8113: PPUSH
8114: CALL_OW 45
8118: PPUSH
8119: CALL_OW 2
8123: ST_TO_ADDR
// end ;
8124: GO 7737
8126: POP
8127: POP
// end ;
8128: LD_VAR 0 3
8132: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8133: LD_INT 0
8135: PPUSH
8136: PPUSH
// for i = 1 to n do
8137: LD_ADDR_VAR 0 4
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_VAR 0 1
8151: PUSH
8152: FOR_TO
8153: IFFALSE 8227
// begin uc_nation := rand ( 1 , 3 ) ;
8155: LD_ADDR_OWVAR 21
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8171: LD_INT 0
8173: PPUSH
8174: LD_INT 8
8176: PUSH
8177: LD_INT 9
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 2
8204: PPUSH
8205: CALL_OW 380
// result := result ^ CreateHuman ;
8209: LD_ADDR_VAR 0 3
8213: PUSH
8214: LD_VAR 0 3
8218: PUSH
8219: CALL_OW 44
8223: ADD
8224: ST_TO_ADDR
// end ;
8225: GO 8152
8227: POP
8228: POP
// end ;
8229: LD_VAR 0 3
8233: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8234: LD_INT 0
8236: PPUSH
8237: PPUSH
8238: PPUSH
8239: PPUSH
8240: PPUSH
8241: PPUSH
8242: PPUSH
// for i = 1 to n do
8243: LD_ADDR_VAR 0 4
8247: PUSH
8248: DOUBLE
8249: LD_INT 1
8251: DEC
8252: ST_TO_ADDR
8253: LD_VAR 0 1
8257: PUSH
8258: FOR_TO
8259: IFFALSE 8651
// begin uc_nation := rand ( 1 , 3 ) ;
8261: LD_ADDR_OWVAR 21
8265: PUSH
8266: LD_INT 1
8268: PPUSH
8269: LD_INT 3
8271: PPUSH
8272: CALL_OW 12
8276: ST_TO_ADDR
// case uc_nation of 1 :
8277: LD_OWVAR 21
8281: PUSH
8282: LD_INT 1
8284: DOUBLE
8285: EQUAL
8286: IFTRUE 8290
8288: GO 8361
8290: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8291: LD_ADDR_VAR 0 6
8295: PUSH
8296: LD_INT 4
8298: PUSH
8299: LD_INT 5
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8306: LD_ADDR_VAR 0 7
8310: PUSH
8311: LD_INT 6
8313: PUSH
8314: LD_INT 7
8316: PUSH
8317: LD_INT 10
8319: PUSH
8320: LD_INT 97
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8329: LD_ADDR_VAR 0 8
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8344: LD_ADDR_VAR 0 9
8348: PUSH
8349: LD_INT 1
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: ST_TO_ADDR
// end ; 2 :
8359: GO 8516
8361: LD_INT 2
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8440
8369: POP
// begin chassis := [ ar_half_tracked ] ;
8370: LD_ADDR_VAR 0 6
8374: PUSH
8375: LD_INT 14
8377: PUSH
8378: EMPTY
8379: LIST
8380: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8381: LD_ADDR_VAR 0 7
8385: PUSH
8386: LD_INT 91
8388: PUSH
8389: LD_INT 26
8391: PUSH
8392: LD_INT 28
8394: PUSH
8395: LD_INT 29
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8404: LD_ADDR_VAR 0 8
8408: PUSH
8409: LD_INT 1
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 1
8426: PUSH
8427: LD_INT 2
8429: PUSH
8430: LD_INT 3
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// end ; 3 :
8438: GO 8516
8440: LD_INT 3
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8515
8448: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8449: LD_ADDR_VAR 0 6
8453: PUSH
8454: LD_INT 23
8456: PUSH
8457: LD_INT 24
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8464: LD_ADDR_VAR 0 7
8468: PUSH
8469: LD_INT 46
8471: PUSH
8472: LD_INT 45
8474: PUSH
8475: LD_INT 49
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8483: LD_ADDR_VAR 0 8
8487: PUSH
8488: LD_INT 1
8490: PUSH
8491: LD_INT 3
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: ST_TO_ADDR
// end ; end ;
8513: GO 8516
8515: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8516: LD_ADDR_OWVAR 37
8520: PUSH
8521: LD_VAR 0 6
8525: PUSH
8526: LD_INT 1
8528: PPUSH
8529: LD_VAR 0 6
8533: PPUSH
8534: CALL_OW 12
8538: ARRAY
8539: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8540: LD_ADDR_OWVAR 39
8544: PUSH
8545: LD_VAR 0 9
8549: PUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 9
8557: PPUSH
8558: CALL_OW 12
8562: ARRAY
8563: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8564: LD_ADDR_OWVAR 38
8568: PUSH
8569: LD_VAR 0 8
8573: PUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_VAR 0 8
8581: PPUSH
8582: CALL_OW 12
8586: ARRAY
8587: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8588: LD_ADDR_OWVAR 40
8592: PUSH
8593: LD_VAR 0 7
8597: PUSH
8598: LD_INT 1
8600: PPUSH
8601: LD_VAR 0 7
8605: PPUSH
8606: CALL_OW 12
8610: ARRAY
8611: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8612: LD_ADDR_OWVAR 41
8616: PUSH
8617: LD_INT 100
8619: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8620: LD_ADDR_VAR 0 3
8624: PUSH
8625: LD_VAR 0 3
8629: PPUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_INT 1
8637: PLUS
8638: PPUSH
8639: CALL_OW 45
8643: PPUSH
8644: CALL_OW 2
8648: ST_TO_ADDR
// end ;
8649: GO 8258
8651: POP
8652: POP
// end ; end_of_file
8653: LD_VAR 0 3
8657: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8658: LD_INT 22
8660: PUSH
8661: LD_INT 7
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: IFFALSE 9172
8674: GO 8676
8676: DISABLE
8677: LD_INT 0
8679: PPUSH
8680: PPUSH
8681: PPUSH
// begin enable ;
8682: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: LD_INT 22
8690: PUSH
8691: LD_INT 7
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: ST_TO_ADDR
// for i in tmp do
8703: LD_ADDR_VAR 0 1
8707: PUSH
8708: LD_VAR 0 3
8712: PUSH
8713: FOR_IN
8714: IFFALSE 9170
// begin case GetType ( i ) of unit_human :
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 247
8725: PUSH
8726: LD_INT 1
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8933
8734: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 256
8744: PUSH
8745: LD_INT 250
8747: LESS
8748: PUSH
8749: LD_INT 5
8751: PPUSH
8752: LD_INT 7
8754: PPUSH
8755: CALL_OW 321
8759: PUSH
8760: LD_INT 2
8762: NONEQUAL
8763: AND
8764: IFFALSE 8768
// continue ;
8766: GO 8713
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8768: LD_VAR 0 1
8772: PPUSH
8773: CALL_OW 257
8777: PUSH
8778: LD_INT 12
8780: PUSH
8781: LD_INT 15
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_INT 17
8789: PUSH
8790: LD_INT 1
8792: PUSH
8793: LD_INT 5
8795: PUSH
8796: LD_INT 6
8798: PUSH
8799: LD_INT 7
8801: PUSH
8802: LD_INT 8
8804: PUSH
8805: LD_INT 9
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: IN
8820: IFFALSE 8858
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8822: LD_VAR 0 1
8826: PPUSH
8827: LD_INT 22
8829: PUSH
8830: LD_OWVAR 2
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 69
8843: PPUSH
8844: LD_VAR 0 1
8848: PPUSH
8849: CALL_OW 74
8853: PPUSH
8854: CALL_OW 115
// if GetClass ( i ) = 3 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 257
8867: PUSH
8868: LD_INT 3
8870: EQUAL
8871: IFFALSE 8931
// if IsInUnit ( i ) then
8873: LD_VAR 0 1
8877: PPUSH
8878: CALL_OW 310
8882: IFFALSE 8922
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8884: LD_VAR 0 1
8888: PPUSH
8889: LD_INT 22
8891: PUSH
8892: LD_OWVAR 2
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PPUSH
8901: CALL_OW 69
8905: PPUSH
8906: LD_VAR 0 1
8910: PPUSH
8911: CALL_OW 74
8915: PPUSH
8916: CALL_OW 115
8920: GO 8931
// ComEspace ( i ) ;
8922: LD_VAR 0 1
8926: PPUSH
8927: CALL 1933 0 1
// end ; unit_vehicle :
8931: GO 9168
8933: LD_INT 2
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 9167
8941: POP
// begin if GetLives ( i ) > 250 then
8942: LD_VAR 0 1
8946: PPUSH
8947: CALL_OW 256
8951: PUSH
8952: LD_INT 250
8954: GREATER
8955: IFFALSE 9165
// begin if GetWeapon ( i ) = us_artillery then
8957: LD_VAR 0 1
8961: PPUSH
8962: CALL_OW 264
8966: PUSH
8967: LD_INT 97
8969: EQUAL
8970: IFFALSE 9038
// begin if IsInArea ( i , zoneOut ) then
8972: LD_VAR 0 1
8976: PPUSH
8977: LD_INT 4
8979: PPUSH
8980: CALL_OW 308
8984: IFFALSE 9000
// ComMoveToArea ( i , zoneBorder ) else
8986: LD_VAR 0 1
8990: PPUSH
8991: LD_INT 9
8993: PPUSH
8994: CALL_OW 113
8998: GO 9036
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9000: LD_VAR 0 1
9004: PPUSH
9005: LD_INT 22
9007: PUSH
9008: LD_OWVAR 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 69
9021: PPUSH
9022: LD_VAR 0 1
9026: PPUSH
9027: CALL_OW 74
9031: PPUSH
9032: CALL_OW 115
// end else
9036: GO 9165
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9038: LD_VAR 0 1
9042: PPUSH
9043: CALL_OW 264
9047: PUSH
9048: LD_INT 11
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 98
9056: PUSH
9057: LD_INT 49
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: IN
9066: IFFALSE 9096
// begin if IsInArea ( i , zoneOut ) then
9068: LD_VAR 0 1
9072: PPUSH
9073: LD_INT 4
9075: PPUSH
9076: CALL_OW 308
9080: IFFALSE 9094
// ComSpecMove ( i , specPos ) ;
9082: LD_VAR 0 1
9086: PPUSH
9087: LD_INT 8
9089: PPUSH
9090: CALL 1979 0 2
// end else
9094: GO 9165
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 264
9105: PUSH
9106: LD_INT 91
9108: PUSH
9109: LD_INT 29
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: IN
9116: IFFALSE 9129
// ComSpecAttack ( i ) else
9118: LD_VAR 0 1
9122: PPUSH
9123: CALL 2407 0 1
9127: GO 9165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9129: LD_VAR 0 1
9133: PPUSH
9134: LD_INT 22
9136: PUSH
9137: LD_OWVAR 2
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 74
9160: PPUSH
9161: CALL_OW 115
// end ; end ; end ;
9165: GO 9168
9167: POP
// end ;
9168: GO 8713
9170: POP
9171: POP
// end ; end_of_file
9172: PPOPN 3
9174: END
// export function InitDisplay ; begin
9175: LD_INT 0
9177: PPUSH
// while true do
9178: LD_INT 1
9180: IFFALSE 9267
// begin if waveNumber < 100 then
9182: LD_EXP 5
9186: PUSH
9187: LD_INT 100
9189: LESS
9190: IFFALSE 9241
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9192: LD_ADDR_OWVAR 47
9196: PUSH
9197: LD_STRING #Tick
9199: PUSH
9200: LD_OWVAR 1
9204: PUSH
9205: LD_STRING #Points
9207: PUSH
9208: LD_EXP 2
9212: PUSH
9213: LD_STRING #Attack
9215: PUSH
9216: LD_EXP 4
9220: PUSH
9221: LD_STRING #Wave
9223: PUSH
9224: LD_EXP 5
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: ST_TO_ADDR
9239: GO 9258
// Display_Strings := [ #Win , points ] ;
9241: LD_ADDR_OWVAR 47
9245: PUSH
9246: LD_STRING #Win
9248: PUSH
9249: LD_EXP 2
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9258: LD_INT 35
9260: PPUSH
9261: CALL_OW 67
// end ;
9265: GO 9178
// end ; end_of_file
9267: LD_VAR 0 1
9271: RET
// export function InitBonus ; var i , chance ; begin
9272: LD_INT 0
9274: PPUSH
9275: PPUSH
9276: PPUSH
// chance := rand ( 1 , 99 ) ;
9277: LD_ADDR_VAR 0 3
9281: PUSH
9282: LD_INT 1
9284: PPUSH
9285: LD_INT 99
9287: PPUSH
9288: CALL_OW 12
9292: ST_TO_ADDR
// case chance of 1 .. 10 :
9293: LD_VAR 0 3
9297: PUSH
9298: LD_INT 1
9300: DOUBLE
9301: GREATEREQUAL
9302: IFFALSE 9310
9304: LD_INT 10
9306: DOUBLE
9307: LESSEQUAL
9308: IFTRUE 9312
9310: GO 9323
9312: POP
// i := 5 ; 11 .. 25 :
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_INT 5
9320: ST_TO_ADDR
9321: GO 9424
9323: LD_INT 11
9325: DOUBLE
9326: GREATEREQUAL
9327: IFFALSE 9335
9329: LD_INT 25
9331: DOUBLE
9332: LESSEQUAL
9333: IFTRUE 9337
9335: GO 9348
9337: POP
// i := 3 ; 26 .. 40 :
9338: LD_ADDR_VAR 0 2
9342: PUSH
9343: LD_INT 3
9345: ST_TO_ADDR
9346: GO 9424
9348: LD_INT 26
9350: DOUBLE
9351: GREATEREQUAL
9352: IFFALSE 9360
9354: LD_INT 40
9356: DOUBLE
9357: LESSEQUAL
9358: IFTRUE 9362
9360: GO 9373
9362: POP
// i := 2 ; 41 .. 60 :
9363: LD_ADDR_VAR 0 2
9367: PUSH
9368: LD_INT 2
9370: ST_TO_ADDR
9371: GO 9424
9373: LD_INT 41
9375: DOUBLE
9376: GREATEREQUAL
9377: IFFALSE 9385
9379: LD_INT 60
9381: DOUBLE
9382: LESSEQUAL
9383: IFTRUE 9387
9385: GO 9398
9387: POP
// i := 4 ; 61 .. 99 :
9388: LD_ADDR_VAR 0 2
9392: PUSH
9393: LD_INT 4
9395: ST_TO_ADDR
9396: GO 9424
9398: LD_INT 61
9400: DOUBLE
9401: GREATEREQUAL
9402: IFFALSE 9410
9404: LD_INT 99
9406: DOUBLE
9407: LESSEQUAL
9408: IFTRUE 9412
9410: GO 9423
9412: POP
// i := 1 ; end ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_INT 1
9420: ST_TO_ADDR
9421: GO 9424
9423: POP
// case i of 1 :
9424: LD_VAR 0 2
9428: PUSH
9429: LD_INT 1
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9526
9437: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9438: LD_INT 22
9440: PUSH
9441: LD_OWVAR 2
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: LD_INT 25
9455: PUSH
9456: LD_INT 12
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 25
9465: PUSH
9466: LD_INT 16
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 25
9475: PUSH
9476: LD_INT 15
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 17
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PPUSH
9504: CALL_OW 69
9508: PUSH
9509: LD_INT 10
9511: GREATEREQUAL
9512: IFFALSE 9520
// BonusIV else
9514: CALL 10099 0 0
9518: GO 9524
// BonusI ;
9520: CALL 9604 0 0
// end ; 2 :
9524: GO 9599
9526: LD_INT 2
9528: DOUBLE
9529: EQUAL
9530: IFTRUE 9534
9532: GO 9541
9534: POP
// begin BonusII ;
9535: CALL 9777 0 0
// end ; 3 :
9539: GO 9599
9541: LD_INT 3
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9556
9549: POP
// begin BonusIII ;
9550: CALL 9925 0 0
// end ; 4 :
9554: GO 9599
9556: LD_INT 4
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9571
9564: POP
// begin BonusIV ;
9565: CALL 10099 0 0
// end ; 5 :
9569: GO 9599
9571: LD_INT 5
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9598
9579: POP
// begin if graveyard then
9580: LD_EXP 8
9584: IFFALSE 9592
// BonusV else
9586: CALL 10517 0 0
9590: GO 9596
// BonusIII ;
9592: CALL 9925 0 0
// end ; end ;
9596: GO 9599
9598: POP
// end ;
9599: LD_VAR 0 1
9603: RET
// export function BonusI ; var i ; begin
9604: LD_INT 0
9606: PPUSH
9607: PPUSH
// case Query ( AddGift1 ) of 1 :
9608: LD_STRING AddGift1
9610: PPUSH
9611: CALL_OW 97
9615: PUSH
9616: LD_INT 1
9618: DOUBLE
9619: EQUAL
9620: IFTRUE 9624
9622: GO 9703
9624: POP
// begin for i = 1 to 3 do
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: DOUBLE
9631: LD_INT 1
9633: DEC
9634: ST_TO_ADDR
9635: LD_INT 3
9637: PUSH
9638: FOR_TO
9639: IFFALSE 9699
// begin uc_side := your_side ;
9641: LD_ADDR_OWVAR 20
9645: PUSH
9646: LD_OWVAR 2
9650: ST_TO_ADDR
// uc_nation := 0 ;
9651: LD_ADDR_OWVAR 21
9655: PUSH
9656: LD_INT 0
9658: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9659: LD_INT 0
9661: PPUSH
9662: LD_INT 12
9664: PPUSH
9665: LD_INT 1
9667: PPUSH
9668: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9672: CALL_OW 44
9676: PPUSH
9677: LD_EXP 9
9681: PPUSH
9682: LD_EXP 10
9686: PPUSH
9687: LD_INT 15
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: CALL_OW 50
// end ;
9697: GO 9638
9699: POP
9700: POP
// end ; 2 :
9701: GO 9772
9703: LD_INT 2
9705: DOUBLE
9706: EQUAL
9707: IFTRUE 9711
9709: GO 9753
9711: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9712: LD_EXP 11
9716: PPUSH
9717: CALL_OW 274
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: LD_EXP 11
9729: PPUSH
9730: CALL_OW 274
9734: PPUSH
9735: LD_INT 1
9737: PPUSH
9738: CALL_OW 275
9742: PUSH
9743: LD_INT 100
9745: PLUS
9746: PPUSH
9747: CALL_OW 277
// end ; 3 :
9751: GO 9772
9753: LD_INT 3
9755: DOUBLE
9756: EQUAL
9757: IFTRUE 9761
9759: GO 9771
9761: POP
// begin SetTeamExp ( 2 ) ;
9762: LD_INT 2
9764: PPUSH
9765: CALL 940 0 1
// end ; end ;
9769: GO 9772
9771: POP
// end ;
9772: LD_VAR 0 1
9776: RET
// export function BonusII ; var i ; begin
9777: LD_INT 0
9779: PPUSH
9780: PPUSH
// case Query ( AddGift2 ) of 1 :
9781: LD_STRING AddGift2
9783: PPUSH
9784: CALL_OW 97
9788: PUSH
9789: LD_INT 1
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 9839
9797: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9798: LD_EXP 11
9802: PPUSH
9803: CALL_OW 274
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: LD_EXP 11
9815: PPUSH
9816: CALL_OW 274
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 275
9828: PUSH
9829: LD_INT 500
9831: PLUS
9832: PPUSH
9833: CALL_OW 277
// end ; 2 :
9837: GO 9920
9839: LD_INT 2
9841: DOUBLE
9842: EQUAL
9843: IFTRUE 9847
9845: GO 9857
9847: POP
// begin SetTeamExp ( 3 ) ;
9848: LD_INT 3
9850: PPUSH
9851: CALL 940 0 1
// end ; 3 :
9855: GO 9920
9857: LD_INT 3
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 9919
9865: POP
// begin uc_side = your_side ;
9866: LD_ADDR_OWVAR 20
9870: PUSH
9871: LD_OWVAR 2
9875: ST_TO_ADDR
// uc_nation = nation_russian ;
9876: LD_ADDR_OWVAR 21
9880: PUSH
9881: LD_INT 3
9883: ST_TO_ADDR
// vc_chassis = 25 ;
9884: LD_ADDR_OWVAR 37
9888: PUSH
9889: LD_INT 25
9891: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9892: CALL_OW 45
9896: PPUSH
9897: LD_EXP 9
9901: PPUSH
9902: LD_EXP 10
9906: PPUSH
9907: LD_INT 15
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 50
// end ; end ;
9917: GO 9920
9919: POP
// end ;
9920: LD_VAR 0 1
9924: RET
// export function BonusIII ; var i ; begin
9925: LD_INT 0
9927: PPUSH
9928: PPUSH
// case Query ( AddGift3 ) of 1 :
9929: LD_STRING AddGift3
9931: PPUSH
9932: CALL_OW 97
9936: PUSH
9937: LD_INT 1
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 9987
9945: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9946: LD_EXP 11
9950: PPUSH
9951: CALL_OW 274
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: LD_EXP 11
9963: PPUSH
9964: CALL_OW 274
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 275
9976: PUSH
9977: LD_INT 1000
9979: PLUS
9980: PPUSH
9981: CALL_OW 277
// end ; 2 :
9985: GO 10094
9987: LD_INT 2
9989: DOUBLE
9990: EQUAL
9991: IFTRUE 9995
9993: GO 10007
9995: POP
// begin PrepareGuards ( waveNumber ) ;
9996: LD_EXP 5
10000: PPUSH
10001: CALL 1086 0 1
// end ; 3 :
10005: GO 10094
10007: LD_INT 3
10009: DOUBLE
10010: EQUAL
10011: IFTRUE 10015
10013: GO 10093
10015: POP
// begin uc_side = your_side ;
10016: LD_ADDR_OWVAR 20
10020: PUSH
10021: LD_OWVAR 2
10025: ST_TO_ADDR
// uc_nation = nation_american ;
10026: LD_ADDR_OWVAR 21
10030: PUSH
10031: LD_INT 1
10033: ST_TO_ADDR
// vc_chassis = us_morphling ;
10034: LD_ADDR_OWVAR 37
10038: PUSH
10039: LD_INT 5
10041: ST_TO_ADDR
// vc_engine := engine_siberite ;
10042: LD_ADDR_OWVAR 39
10046: PUSH
10047: LD_INT 3
10049: ST_TO_ADDR
// vc_control := control_computer ;
10050: LD_ADDR_OWVAR 38
10054: PUSH
10055: LD_INT 3
10057: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10058: LD_ADDR_OWVAR 40
10062: PUSH
10063: LD_INT 8
10065: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10066: CALL_OW 45
10070: PPUSH
10071: LD_EXP 9
10075: PPUSH
10076: LD_EXP 10
10080: PPUSH
10081: LD_INT 15
10083: PPUSH
10084: LD_INT 1
10086: PPUSH
10087: CALL_OW 50
// end ; end ;
10091: GO 10094
10093: POP
// end ;
10094: LD_VAR 0 1
10098: RET
// export function BonusIV ; var i ; begin
10099: LD_INT 0
10101: PPUSH
10102: PPUSH
// case Query ( AddGift4 ) of 1 :
10103: LD_STRING AddGift4
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10443
10119: POP
// begin i := rand ( 1 , 3 ) ;
10120: LD_ADDR_VAR 0 2
10124: PUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 3
10130: PPUSH
10131: CALL_OW 12
10135: ST_TO_ADDR
// uc_side := your_side ;
10136: LD_ADDR_OWVAR 20
10140: PUSH
10141: LD_OWVAR 2
10145: ST_TO_ADDR
// case i of 1 :
10146: LD_VAR 0 2
10150: PUSH
10151: LD_INT 1
10153: DOUBLE
10154: EQUAL
10155: IFTRUE 10159
10157: GO 10246
10159: POP
// begin uc_nation := nation_arabian ;
10160: LD_ADDR_OWVAR 21
10164: PUSH
10165: LD_INT 2
10167: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10168: LD_ADDR_OWVAR 37
10172: PUSH
10173: LD_INT 14
10175: ST_TO_ADDR
// vc_engine := engine_combustion ;
10176: LD_ADDR_OWVAR 39
10180: PUSH
10181: LD_INT 1
10183: ST_TO_ADDR
// vc_control := control_manual ;
10184: LD_ADDR_OWVAR 38
10188: PUSH
10189: LD_INT 1
10191: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10192: LD_ADDR_OWVAR 40
10196: PUSH
10197: LD_INT 27
10199: PUSH
10200: LD_INT 28
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 1
10209: PPUSH
10210: LD_INT 2
10212: PPUSH
10213: CALL_OW 12
10217: ARRAY
10218: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10219: CALL_OW 45
10223: PPUSH
10224: LD_EXP 9
10228: PPUSH
10229: LD_EXP 10
10233: PPUSH
10234: LD_INT 15
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 50
// end ; 2 :
10244: GO 10441
10246: LD_INT 2
10248: DOUBLE
10249: EQUAL
10250: IFTRUE 10254
10252: GO 10345
10254: POP
// begin uc_nation := nation_american ;
10255: LD_ADDR_OWVAR 21
10259: PUSH
10260: LD_INT 1
10262: ST_TO_ADDR
// vc_chassis := us_morphling ;
10263: LD_ADDR_OWVAR 37
10267: PUSH
10268: LD_INT 5
10270: ST_TO_ADDR
// vc_engine := engine_siberite ;
10271: LD_ADDR_OWVAR 39
10275: PUSH
10276: LD_INT 3
10278: ST_TO_ADDR
// vc_control := control_computer ;
10279: LD_ADDR_OWVAR 38
10283: PUSH
10284: LD_INT 3
10286: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10287: LD_ADDR_OWVAR 40
10291: PUSH
10292: LD_INT 12
10294: PUSH
10295: LD_INT 10
10297: PUSH
10298: LD_INT 7
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 1
10308: PPUSH
10309: LD_INT 3
10311: PPUSH
10312: CALL_OW 12
10316: ARRAY
10317: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10318: CALL_OW 45
10322: PPUSH
10323: LD_EXP 9
10327: PPUSH
10328: LD_EXP 10
10332: PPUSH
10333: LD_INT 15
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 50
// end ; 3 :
10343: GO 10441
10345: LD_INT 3
10347: DOUBLE
10348: EQUAL
10349: IFTRUE 10353
10351: GO 10440
10353: POP
// begin uc_nation := nation_russian ;
10354: LD_ADDR_OWVAR 21
10358: PUSH
10359: LD_INT 3
10361: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10362: LD_ADDR_OWVAR 37
10366: PUSH
10367: LD_INT 22
10369: ST_TO_ADDR
// vc_engine := engine_combustion ;
10370: LD_ADDR_OWVAR 39
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// vc_control := control_manual ;
10378: LD_ADDR_OWVAR 38
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10386: LD_ADDR_OWVAR 40
10390: PUSH
10391: LD_INT 45
10393: PUSH
10394: LD_INT 44
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 1
10403: PPUSH
10404: LD_INT 2
10406: PPUSH
10407: CALL_OW 12
10411: ARRAY
10412: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10413: CALL_OW 45
10417: PPUSH
10418: LD_EXP 9
10422: PPUSH
10423: LD_EXP 10
10427: PPUSH
10428: LD_INT 15
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 50
// end ; end ;
10438: GO 10441
10440: POP
// end ; 2 :
10441: GO 10512
10443: LD_INT 2
10445: DOUBLE
10446: EQUAL
10447: IFTRUE 10451
10449: GO 10493
10451: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10452: LD_EXP 11
10456: PPUSH
10457: CALL_OW 274
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: LD_EXP 11
10469: PPUSH
10470: CALL_OW 274
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 275
10482: PUSH
10483: LD_INT 100
10485: PLUS
10486: PPUSH
10487: CALL_OW 277
// end ; 3 :
10491: GO 10512
10493: LD_INT 3
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10511
10501: POP
// begin SetTeamExp ( 2 ) ;
10502: LD_INT 2
10504: PPUSH
10505: CALL 940 0 1
// end ; end ;
10509: GO 10512
10511: POP
// end ;
10512: LD_VAR 0 1
10516: RET
// export function BonusV ; var i , j ; begin
10517: LD_INT 0
10519: PPUSH
10520: PPUSH
10521: PPUSH
// case Query ( AddGift5 ) of 1 :
10522: LD_STRING AddGift5
10524: PPUSH
10525: CALL_OW 97
10529: PUSH
10530: LD_INT 1
10532: DOUBLE
10533: EQUAL
10534: IFTRUE 10538
10536: GO 10882
10538: POP
// begin for j = 1 to 3 do
10539: LD_ADDR_VAR 0 3
10543: PUSH
10544: DOUBLE
10545: LD_INT 1
10547: DEC
10548: ST_TO_ADDR
10549: LD_INT 3
10551: PUSH
10552: FOR_TO
10553: IFFALSE 10878
// begin i := rand ( 1 , 3 ) ;
10555: LD_ADDR_VAR 0 2
10559: PUSH
10560: LD_INT 1
10562: PPUSH
10563: LD_INT 3
10565: PPUSH
10566: CALL_OW 12
10570: ST_TO_ADDR
// uc_side := your_side ;
10571: LD_ADDR_OWVAR 20
10575: PUSH
10576: LD_OWVAR 2
10580: ST_TO_ADDR
// case i of 1 :
10581: LD_VAR 0 2
10585: PUSH
10586: LD_INT 1
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10681
10594: POP
// begin uc_nation := nation_arabian ;
10595: LD_ADDR_OWVAR 21
10599: PUSH
10600: LD_INT 2
10602: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10603: LD_ADDR_OWVAR 37
10607: PUSH
10608: LD_INT 14
10610: ST_TO_ADDR
// vc_engine := engine_combustion ;
10611: LD_ADDR_OWVAR 39
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// vc_control := control_manual ;
10619: LD_ADDR_OWVAR 38
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10627: LD_ADDR_OWVAR 40
10631: PUSH
10632: LD_INT 27
10634: PUSH
10635: LD_INT 28
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_INT 2
10647: PPUSH
10648: CALL_OW 12
10652: ARRAY
10653: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10654: CALL_OW 45
10658: PPUSH
10659: LD_EXP 9
10663: PPUSH
10664: LD_EXP 10
10668: PPUSH
10669: LD_INT 15
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 50
// end ; 2 :
10679: GO 10876
10681: LD_INT 2
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10780
10689: POP
// begin uc_nation := nation_american ;
10690: LD_ADDR_OWVAR 21
10694: PUSH
10695: LD_INT 1
10697: ST_TO_ADDR
// vc_chassis := us_morphling ;
10698: LD_ADDR_OWVAR 37
10702: PUSH
10703: LD_INT 5
10705: ST_TO_ADDR
// vc_engine := engine_siberite ;
10706: LD_ADDR_OWVAR 39
10710: PUSH
10711: LD_INT 3
10713: ST_TO_ADDR
// vc_control := control_computer ;
10714: LD_ADDR_OWVAR 38
10718: PUSH
10719: LD_INT 3
10721: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10722: LD_ADDR_OWVAR 40
10726: PUSH
10727: LD_INT 12
10729: PUSH
10730: LD_INT 11
10732: PUSH
10733: LD_INT 7
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 1
10743: PPUSH
10744: LD_INT 3
10746: PPUSH
10747: CALL_OW 12
10751: ARRAY
10752: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10753: CALL_OW 45
10757: PPUSH
10758: LD_EXP 9
10762: PPUSH
10763: LD_EXP 10
10767: PPUSH
10768: LD_INT 15
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: CALL_OW 50
// end ; 3 :
10778: GO 10876
10780: LD_INT 3
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10875
10788: POP
// begin uc_nation := nation_russian ;
10789: LD_ADDR_OWVAR 21
10793: PUSH
10794: LD_INT 3
10796: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10797: LD_ADDR_OWVAR 37
10801: PUSH
10802: LD_INT 22
10804: ST_TO_ADDR
// vc_engine := engine_combustion ;
10805: LD_ADDR_OWVAR 39
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
// vc_control := control_manual ;
10813: LD_ADDR_OWVAR 38
10817: PUSH
10818: LD_INT 1
10820: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10821: LD_ADDR_OWVAR 40
10825: PUSH
10826: LD_INT 45
10828: PUSH
10829: LD_INT 44
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 1
10838: PPUSH
10839: LD_INT 2
10841: PPUSH
10842: CALL_OW 12
10846: ARRAY
10847: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10848: CALL_OW 45
10852: PPUSH
10853: LD_EXP 9
10857: PPUSH
10858: LD_EXP 10
10862: PPUSH
10863: LD_INT 15
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 50
// end ; end ;
10873: GO 10876
10875: POP
// end ;
10876: GO 10552
10878: POP
10879: POP
// end ; 2 :
10880: GO 10948
10882: LD_INT 2
10884: DOUBLE
10885: EQUAL
10886: IFTRUE 10890
10888: GO 10932
10890: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10891: LD_EXP 11
10895: PPUSH
10896: CALL_OW 274
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: LD_EXP 11
10908: PPUSH
10909: CALL_OW 274
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 275
10921: PUSH
10922: LD_INT 500
10924: PLUS
10925: PPUSH
10926: CALL_OW 277
// end ; 3 :
10930: GO 10948
10932: LD_INT 3
10934: DOUBLE
10935: EQUAL
10936: IFTRUE 10940
10938: GO 10947
10940: POP
// begin GetBack ( ) ;
10941: CALL 1746 0 0
// end ; end ;
10945: GO 10948
10947: POP
// end ; end_of_file end_of_file
10948: LD_VAR 0 1
10952: RET
// every 0 0$1 do
10953: GO 10955
10955: DISABLE
// begin enable ;
10956: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10957: LD_STRING updateTimer(
10959: PUSH
10960: LD_OWVAR 1
10964: STR
10965: PUSH
10966: LD_STRING );
10968: STR
10969: PPUSH
10970: CALL_OW 559
// end ;
10974: END
// export function SOS_MapStart ( ) ; begin
10975: LD_INT 0
10977: PPUSH
// if streamModeActive then
10978: LD_EXP 15
10982: IFFALSE 10991
// DefineStreamItems ( true ) ;
10984: LD_INT 1
10986: PPUSH
10987: CALL 12795 0 1
// UpdateLuaVariables ( ) ;
10991: CALL 11008 0 0
// UpdateFactoryWaypoints ( ) ;
10995: CALL 25656 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10999: CALL 25913 0 0
// end ;
11003: LD_VAR 0 1
11007: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
11008: LD_INT 0
11010: PPUSH
// if not globalGameSaveCounter then
11011: LD_EXP 14
11015: NOT
11016: IFFALSE 11027
// ToLua ( setGameSaveCounter(0) ) else
11018: LD_STRING setGameSaveCounter(0)
11020: PPUSH
11021: CALL_OW 559
11025: GO 11059
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11027: LD_ADDR_EXP 14
11031: PUSH
11032: LD_EXP 14
11036: PPUSH
11037: CALL 69870 0 1
11041: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11042: LD_STRING setGameSaveCounter(
11044: PUSH
11045: LD_EXP 14
11049: STR
11050: PUSH
11051: LD_STRING )
11053: STR
11054: PPUSH
11055: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11059: LD_STRING setGameDifficulty(
11061: PUSH
11062: LD_OWVAR 67
11066: STR
11067: PUSH
11068: LD_STRING )
11070: STR
11071: PPUSH
11072: CALL_OW 559
// end ;
11076: LD_VAR 0 1
11080: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11081: LD_INT 0
11083: PPUSH
// if p2 = stream_mode then
11084: LD_VAR 0 2
11088: PUSH
11089: LD_INT 100
11091: EQUAL
11092: IFFALSE 12095
// begin if not StreamModeActive then
11094: LD_EXP 15
11098: NOT
11099: IFFALSE 11109
// StreamModeActive := true ;
11101: LD_ADDR_EXP 15
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// if p3 = 0 then
11109: LD_VAR 0 3
11113: PUSH
11114: LD_INT 0
11116: EQUAL
11117: IFFALSE 11123
// InitStreamMode ;
11119: CALL 12331 0 0
// if p3 = 1 then
11123: LD_VAR 0 3
11127: PUSH
11128: LD_INT 1
11130: EQUAL
11131: IFFALSE 11141
// sRocket := true ;
11133: LD_ADDR_EXP 20
11137: PUSH
11138: LD_INT 1
11140: ST_TO_ADDR
// if p3 = 2 then
11141: LD_VAR 0 3
11145: PUSH
11146: LD_INT 2
11148: EQUAL
11149: IFFALSE 11159
// sSpeed := true ;
11151: LD_ADDR_EXP 19
11155: PUSH
11156: LD_INT 1
11158: ST_TO_ADDR
// if p3 = 3 then
11159: LD_VAR 0 3
11163: PUSH
11164: LD_INT 3
11166: EQUAL
11167: IFFALSE 11177
// sEngine := true ;
11169: LD_ADDR_EXP 21
11173: PUSH
11174: LD_INT 1
11176: ST_TO_ADDR
// if p3 = 4 then
11177: LD_VAR 0 3
11181: PUSH
11182: LD_INT 4
11184: EQUAL
11185: IFFALSE 11195
// sSpec := true ;
11187: LD_ADDR_EXP 18
11191: PUSH
11192: LD_INT 1
11194: ST_TO_ADDR
// if p3 = 5 then
11195: LD_VAR 0 3
11199: PUSH
11200: LD_INT 5
11202: EQUAL
11203: IFFALSE 11213
// sLevel := true ;
11205: LD_ADDR_EXP 22
11209: PUSH
11210: LD_INT 1
11212: ST_TO_ADDR
// if p3 = 6 then
11213: LD_VAR 0 3
11217: PUSH
11218: LD_INT 6
11220: EQUAL
11221: IFFALSE 11231
// sArmoury := true ;
11223: LD_ADDR_EXP 23
11227: PUSH
11228: LD_INT 1
11230: ST_TO_ADDR
// if p3 = 7 then
11231: LD_VAR 0 3
11235: PUSH
11236: LD_INT 7
11238: EQUAL
11239: IFFALSE 11249
// sRadar := true ;
11241: LD_ADDR_EXP 24
11245: PUSH
11246: LD_INT 1
11248: ST_TO_ADDR
// if p3 = 8 then
11249: LD_VAR 0 3
11253: PUSH
11254: LD_INT 8
11256: EQUAL
11257: IFFALSE 11267
// sBunker := true ;
11259: LD_ADDR_EXP 25
11263: PUSH
11264: LD_INT 1
11266: ST_TO_ADDR
// if p3 = 9 then
11267: LD_VAR 0 3
11271: PUSH
11272: LD_INT 9
11274: EQUAL
11275: IFFALSE 11285
// sHack := true ;
11277: LD_ADDR_EXP 26
11281: PUSH
11282: LD_INT 1
11284: ST_TO_ADDR
// if p3 = 10 then
11285: LD_VAR 0 3
11289: PUSH
11290: LD_INT 10
11292: EQUAL
11293: IFFALSE 11303
// sFire := true ;
11295: LD_ADDR_EXP 27
11299: PUSH
11300: LD_INT 1
11302: ST_TO_ADDR
// if p3 = 11 then
11303: LD_VAR 0 3
11307: PUSH
11308: LD_INT 11
11310: EQUAL
11311: IFFALSE 11321
// sRefresh := true ;
11313: LD_ADDR_EXP 28
11317: PUSH
11318: LD_INT 1
11320: ST_TO_ADDR
// if p3 = 12 then
11321: LD_VAR 0 3
11325: PUSH
11326: LD_INT 12
11328: EQUAL
11329: IFFALSE 11339
// sExp := true ;
11331: LD_ADDR_EXP 29
11335: PUSH
11336: LD_INT 1
11338: ST_TO_ADDR
// if p3 = 13 then
11339: LD_VAR 0 3
11343: PUSH
11344: LD_INT 13
11346: EQUAL
11347: IFFALSE 11357
// sDepot := true ;
11349: LD_ADDR_EXP 30
11353: PUSH
11354: LD_INT 1
11356: ST_TO_ADDR
// if p3 = 14 then
11357: LD_VAR 0 3
11361: PUSH
11362: LD_INT 14
11364: EQUAL
11365: IFFALSE 11375
// sFlag := true ;
11367: LD_ADDR_EXP 31
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// if p3 = 15 then
11375: LD_VAR 0 3
11379: PUSH
11380: LD_INT 15
11382: EQUAL
11383: IFFALSE 11393
// sKamikadze := true ;
11385: LD_ADDR_EXP 39
11389: PUSH
11390: LD_INT 1
11392: ST_TO_ADDR
// if p3 = 16 then
11393: LD_VAR 0 3
11397: PUSH
11398: LD_INT 16
11400: EQUAL
11401: IFFALSE 11411
// sTroll := true ;
11403: LD_ADDR_EXP 40
11407: PUSH
11408: LD_INT 1
11410: ST_TO_ADDR
// if p3 = 17 then
11411: LD_VAR 0 3
11415: PUSH
11416: LD_INT 17
11418: EQUAL
11419: IFFALSE 11429
// sSlow := true ;
11421: LD_ADDR_EXP 41
11425: PUSH
11426: LD_INT 1
11428: ST_TO_ADDR
// if p3 = 18 then
11429: LD_VAR 0 3
11433: PUSH
11434: LD_INT 18
11436: EQUAL
11437: IFFALSE 11447
// sLack := true ;
11439: LD_ADDR_EXP 42
11443: PUSH
11444: LD_INT 1
11446: ST_TO_ADDR
// if p3 = 19 then
11447: LD_VAR 0 3
11451: PUSH
11452: LD_INT 19
11454: EQUAL
11455: IFFALSE 11465
// sTank := true ;
11457: LD_ADDR_EXP 44
11461: PUSH
11462: LD_INT 1
11464: ST_TO_ADDR
// if p3 = 20 then
11465: LD_VAR 0 3
11469: PUSH
11470: LD_INT 20
11472: EQUAL
11473: IFFALSE 11483
// sRemote := true ;
11475: LD_ADDR_EXP 45
11479: PUSH
11480: LD_INT 1
11482: ST_TO_ADDR
// if p3 = 21 then
11483: LD_VAR 0 3
11487: PUSH
11488: LD_INT 21
11490: EQUAL
11491: IFFALSE 11501
// sPowell := true ;
11493: LD_ADDR_EXP 46
11497: PUSH
11498: LD_INT 1
11500: ST_TO_ADDR
// if p3 = 22 then
11501: LD_VAR 0 3
11505: PUSH
11506: LD_INT 22
11508: EQUAL
11509: IFFALSE 11519
// sTeleport := true ;
11511: LD_ADDR_EXP 49
11515: PUSH
11516: LD_INT 1
11518: ST_TO_ADDR
// if p3 = 23 then
11519: LD_VAR 0 3
11523: PUSH
11524: LD_INT 23
11526: EQUAL
11527: IFFALSE 11537
// sOilTower := true ;
11529: LD_ADDR_EXP 51
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// if p3 = 24 then
11537: LD_VAR 0 3
11541: PUSH
11542: LD_INT 24
11544: EQUAL
11545: IFFALSE 11555
// sShovel := true ;
11547: LD_ADDR_EXP 52
11551: PUSH
11552: LD_INT 1
11554: ST_TO_ADDR
// if p3 = 25 then
11555: LD_VAR 0 3
11559: PUSH
11560: LD_INT 25
11562: EQUAL
11563: IFFALSE 11573
// sSheik := true ;
11565: LD_ADDR_EXP 53
11569: PUSH
11570: LD_INT 1
11572: ST_TO_ADDR
// if p3 = 26 then
11573: LD_VAR 0 3
11577: PUSH
11578: LD_INT 26
11580: EQUAL
11581: IFFALSE 11591
// sEarthquake := true ;
11583: LD_ADDR_EXP 55
11587: PUSH
11588: LD_INT 1
11590: ST_TO_ADDR
// if p3 = 27 then
11591: LD_VAR 0 3
11595: PUSH
11596: LD_INT 27
11598: EQUAL
11599: IFFALSE 11609
// sAI := true ;
11601: LD_ADDR_EXP 56
11605: PUSH
11606: LD_INT 1
11608: ST_TO_ADDR
// if p3 = 28 then
11609: LD_VAR 0 3
11613: PUSH
11614: LD_INT 28
11616: EQUAL
11617: IFFALSE 11627
// sCargo := true ;
11619: LD_ADDR_EXP 59
11623: PUSH
11624: LD_INT 1
11626: ST_TO_ADDR
// if p3 = 29 then
11627: LD_VAR 0 3
11631: PUSH
11632: LD_INT 29
11634: EQUAL
11635: IFFALSE 11645
// sDLaser := true ;
11637: LD_ADDR_EXP 60
11641: PUSH
11642: LD_INT 1
11644: ST_TO_ADDR
// if p3 = 30 then
11645: LD_VAR 0 3
11649: PUSH
11650: LD_INT 30
11652: EQUAL
11653: IFFALSE 11663
// sExchange := true ;
11655: LD_ADDR_EXP 61
11659: PUSH
11660: LD_INT 1
11662: ST_TO_ADDR
// if p3 = 31 then
11663: LD_VAR 0 3
11667: PUSH
11668: LD_INT 31
11670: EQUAL
11671: IFFALSE 11681
// sFac := true ;
11673: LD_ADDR_EXP 62
11677: PUSH
11678: LD_INT 1
11680: ST_TO_ADDR
// if p3 = 32 then
11681: LD_VAR 0 3
11685: PUSH
11686: LD_INT 32
11688: EQUAL
11689: IFFALSE 11699
// sPower := true ;
11691: LD_ADDR_EXP 63
11695: PUSH
11696: LD_INT 1
11698: ST_TO_ADDR
// if p3 = 33 then
11699: LD_VAR 0 3
11703: PUSH
11704: LD_INT 33
11706: EQUAL
11707: IFFALSE 11717
// sRandom := true ;
11709: LD_ADDR_EXP 64
11713: PUSH
11714: LD_INT 1
11716: ST_TO_ADDR
// if p3 = 34 then
11717: LD_VAR 0 3
11721: PUSH
11722: LD_INT 34
11724: EQUAL
11725: IFFALSE 11735
// sShield := true ;
11727: LD_ADDR_EXP 65
11731: PUSH
11732: LD_INT 1
11734: ST_TO_ADDR
// if p3 = 35 then
11735: LD_VAR 0 3
11739: PUSH
11740: LD_INT 35
11742: EQUAL
11743: IFFALSE 11753
// sTime := true ;
11745: LD_ADDR_EXP 66
11749: PUSH
11750: LD_INT 1
11752: ST_TO_ADDR
// if p3 = 36 then
11753: LD_VAR 0 3
11757: PUSH
11758: LD_INT 36
11760: EQUAL
11761: IFFALSE 11771
// sTools := true ;
11763: LD_ADDR_EXP 67
11767: PUSH
11768: LD_INT 1
11770: ST_TO_ADDR
// if p3 = 101 then
11771: LD_VAR 0 3
11775: PUSH
11776: LD_INT 101
11778: EQUAL
11779: IFFALSE 11789
// sSold := true ;
11781: LD_ADDR_EXP 32
11785: PUSH
11786: LD_INT 1
11788: ST_TO_ADDR
// if p3 = 102 then
11789: LD_VAR 0 3
11793: PUSH
11794: LD_INT 102
11796: EQUAL
11797: IFFALSE 11807
// sDiff := true ;
11799: LD_ADDR_EXP 33
11803: PUSH
11804: LD_INT 1
11806: ST_TO_ADDR
// if p3 = 103 then
11807: LD_VAR 0 3
11811: PUSH
11812: LD_INT 103
11814: EQUAL
11815: IFFALSE 11825
// sFog := true ;
11817: LD_ADDR_EXP 36
11821: PUSH
11822: LD_INT 1
11824: ST_TO_ADDR
// if p3 = 104 then
11825: LD_VAR 0 3
11829: PUSH
11830: LD_INT 104
11832: EQUAL
11833: IFFALSE 11843
// sReset := true ;
11835: LD_ADDR_EXP 37
11839: PUSH
11840: LD_INT 1
11842: ST_TO_ADDR
// if p3 = 105 then
11843: LD_VAR 0 3
11847: PUSH
11848: LD_INT 105
11850: EQUAL
11851: IFFALSE 11861
// sSun := true ;
11853: LD_ADDR_EXP 38
11857: PUSH
11858: LD_INT 1
11860: ST_TO_ADDR
// if p3 = 106 then
11861: LD_VAR 0 3
11865: PUSH
11866: LD_INT 106
11868: EQUAL
11869: IFFALSE 11879
// sTiger := true ;
11871: LD_ADDR_EXP 34
11875: PUSH
11876: LD_INT 1
11878: ST_TO_ADDR
// if p3 = 107 then
11879: LD_VAR 0 3
11883: PUSH
11884: LD_INT 107
11886: EQUAL
11887: IFFALSE 11897
// sBomb := true ;
11889: LD_ADDR_EXP 35
11893: PUSH
11894: LD_INT 1
11896: ST_TO_ADDR
// if p3 = 108 then
11897: LD_VAR 0 3
11901: PUSH
11902: LD_INT 108
11904: EQUAL
11905: IFFALSE 11915
// sWound := true ;
11907: LD_ADDR_EXP 43
11911: PUSH
11912: LD_INT 1
11914: ST_TO_ADDR
// if p3 = 109 then
11915: LD_VAR 0 3
11919: PUSH
11920: LD_INT 109
11922: EQUAL
11923: IFFALSE 11933
// sBetray := true ;
11925: LD_ADDR_EXP 47
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// if p3 = 110 then
11933: LD_VAR 0 3
11937: PUSH
11938: LD_INT 110
11940: EQUAL
11941: IFFALSE 11951
// sContamin := true ;
11943: LD_ADDR_EXP 48
11947: PUSH
11948: LD_INT 1
11950: ST_TO_ADDR
// if p3 = 111 then
11951: LD_VAR 0 3
11955: PUSH
11956: LD_INT 111
11958: EQUAL
11959: IFFALSE 11969
// sOil := true ;
11961: LD_ADDR_EXP 50
11965: PUSH
11966: LD_INT 1
11968: ST_TO_ADDR
// if p3 = 112 then
11969: LD_VAR 0 3
11973: PUSH
11974: LD_INT 112
11976: EQUAL
11977: IFFALSE 11987
// sStu := true ;
11979: LD_ADDR_EXP 54
11983: PUSH
11984: LD_INT 1
11986: ST_TO_ADDR
// if p3 = 113 then
11987: LD_VAR 0 3
11991: PUSH
11992: LD_INT 113
11994: EQUAL
11995: IFFALSE 12005
// sBazooka := true ;
11997: LD_ADDR_EXP 57
12001: PUSH
12002: LD_INT 1
12004: ST_TO_ADDR
// if p3 = 114 then
12005: LD_VAR 0 3
12009: PUSH
12010: LD_INT 114
12012: EQUAL
12013: IFFALSE 12023
// sMortar := true ;
12015: LD_ADDR_EXP 58
12019: PUSH
12020: LD_INT 1
12022: ST_TO_ADDR
// if p3 = 115 then
12023: LD_VAR 0 3
12027: PUSH
12028: LD_INT 115
12030: EQUAL
12031: IFFALSE 12041
// sRanger := true ;
12033: LD_ADDR_EXP 68
12037: PUSH
12038: LD_INT 1
12040: ST_TO_ADDR
// if p3 = 116 then
12041: LD_VAR 0 3
12045: PUSH
12046: LD_INT 116
12048: EQUAL
12049: IFFALSE 12059
// sComputer := true ;
12051: LD_ADDR_EXP 69
12055: PUSH
12056: LD_INT 1
12058: ST_TO_ADDR
// if p3 = 117 then
12059: LD_VAR 0 3
12063: PUSH
12064: LD_INT 117
12066: EQUAL
12067: IFFALSE 12077
// s30 := true ;
12069: LD_ADDR_EXP 70
12073: PUSH
12074: LD_INT 1
12076: ST_TO_ADDR
// if p3 = 118 then
12077: LD_VAR 0 3
12081: PUSH
12082: LD_INT 118
12084: EQUAL
12085: IFFALSE 12095
// s60 := true ;
12087: LD_ADDR_EXP 71
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// end ; if p2 = hack_mode then
12095: LD_VAR 0 2
12099: PUSH
12100: LD_INT 101
12102: EQUAL
12103: IFFALSE 12231
// begin case p3 of 1 :
12105: LD_VAR 0 3
12109: PUSH
12110: LD_INT 1
12112: DOUBLE
12113: EQUAL
12114: IFTRUE 12118
12116: GO 12125
12118: POP
// hHackUnlimitedResources ; 2 :
12119: CALL 24402 0 0
12123: GO 12231
12125: LD_INT 2
12127: DOUBLE
12128: EQUAL
12129: IFTRUE 12133
12131: GO 12140
12133: POP
// hHackSetLevel10 ; 3 :
12134: CALL 24535 0 0
12138: GO 12231
12140: LD_INT 3
12142: DOUBLE
12143: EQUAL
12144: IFTRUE 12148
12146: GO 12155
12148: POP
// hHackSetLevel10YourUnits ; 4 :
12149: CALL 24620 0 0
12153: GO 12231
12155: LD_INT 4
12157: DOUBLE
12158: EQUAL
12159: IFTRUE 12163
12161: GO 12170
12163: POP
// hHackInvincible ; 5 :
12164: CALL 25068 0 0
12168: GO 12231
12170: LD_INT 5
12172: DOUBLE
12173: EQUAL
12174: IFTRUE 12178
12176: GO 12185
12178: POP
// hHackInvisible ; 6 :
12179: CALL 25179 0 0
12183: GO 12231
12185: LD_INT 6
12187: DOUBLE
12188: EQUAL
12189: IFTRUE 12193
12191: GO 12200
12193: POP
// hHackChangeYourSide ; 7 :
12194: CALL 25236 0 0
12198: GO 12231
12200: LD_INT 7
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12215
12208: POP
// hHackChangeUnitSide ; 8 :
12209: CALL 25278 0 0
12213: GO 12231
12215: LD_INT 8
12217: DOUBLE
12218: EQUAL
12219: IFTRUE 12223
12221: GO 12230
12223: POP
// hHackFog ; end ;
12224: CALL 25379 0 0
12228: GO 12231
12230: POP
// end ; if p2 = game_save_mode then
12231: LD_VAR 0 2
12235: PUSH
12236: LD_INT 102
12238: EQUAL
12239: IFFALSE 12304
// begin if p3 = 1 then
12241: LD_VAR 0 3
12245: PUSH
12246: LD_INT 1
12248: EQUAL
12249: IFFALSE 12261
// globalGameSaveCounter := p4 ;
12251: LD_ADDR_EXP 14
12255: PUSH
12256: LD_VAR 0 4
12260: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12261: LD_VAR 0 3
12265: PUSH
12266: LD_INT 2
12268: EQUAL
12269: PUSH
12270: LD_EXP 14
12274: AND
12275: IFFALSE 12294
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12277: LD_STRING setGameSaveCounter(
12279: PUSH
12280: LD_EXP 14
12284: STR
12285: PUSH
12286: LD_STRING )
12288: STR
12289: PPUSH
12290: CALL_OW 559
// display_strings := globalGameSaveCounter ;
12294: LD_ADDR_OWVAR 47
12298: PUSH
12299: LD_EXP 14
12303: ST_TO_ADDR
// end ; end ;
12304: LD_VAR 0 7
12308: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12309: GO 12311
12311: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12312: LD_STRING initStreamRollete();
12314: PPUSH
12315: CALL_OW 559
// InitStreamMode ;
12319: CALL 12331 0 0
// DefineStreamItems ( false ) ;
12323: LD_INT 0
12325: PPUSH
12326: CALL 12795 0 1
// end ;
12330: END
// function InitStreamMode ; begin
12331: LD_INT 0
12333: PPUSH
// streamModeActive := false ;
12334: LD_ADDR_EXP 15
12338: PUSH
12339: LD_INT 0
12341: ST_TO_ADDR
// normalCounter := 36 ;
12342: LD_ADDR_EXP 16
12346: PUSH
12347: LD_INT 36
12349: ST_TO_ADDR
// hardcoreCounter := 18 ;
12350: LD_ADDR_EXP 17
12354: PUSH
12355: LD_INT 18
12357: ST_TO_ADDR
// sRocket := false ;
12358: LD_ADDR_EXP 20
12362: PUSH
12363: LD_INT 0
12365: ST_TO_ADDR
// sSpeed := false ;
12366: LD_ADDR_EXP 19
12370: PUSH
12371: LD_INT 0
12373: ST_TO_ADDR
// sEngine := false ;
12374: LD_ADDR_EXP 21
12378: PUSH
12379: LD_INT 0
12381: ST_TO_ADDR
// sSpec := false ;
12382: LD_ADDR_EXP 18
12386: PUSH
12387: LD_INT 0
12389: ST_TO_ADDR
// sLevel := false ;
12390: LD_ADDR_EXP 22
12394: PUSH
12395: LD_INT 0
12397: ST_TO_ADDR
// sArmoury := false ;
12398: LD_ADDR_EXP 23
12402: PUSH
12403: LD_INT 0
12405: ST_TO_ADDR
// sRadar := false ;
12406: LD_ADDR_EXP 24
12410: PUSH
12411: LD_INT 0
12413: ST_TO_ADDR
// sBunker := false ;
12414: LD_ADDR_EXP 25
12418: PUSH
12419: LD_INT 0
12421: ST_TO_ADDR
// sHack := false ;
12422: LD_ADDR_EXP 26
12426: PUSH
12427: LD_INT 0
12429: ST_TO_ADDR
// sFire := false ;
12430: LD_ADDR_EXP 27
12434: PUSH
12435: LD_INT 0
12437: ST_TO_ADDR
// sRefresh := false ;
12438: LD_ADDR_EXP 28
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// sExp := false ;
12446: LD_ADDR_EXP 29
12450: PUSH
12451: LD_INT 0
12453: ST_TO_ADDR
// sDepot := false ;
12454: LD_ADDR_EXP 30
12458: PUSH
12459: LD_INT 0
12461: ST_TO_ADDR
// sFlag := false ;
12462: LD_ADDR_EXP 31
12466: PUSH
12467: LD_INT 0
12469: ST_TO_ADDR
// sKamikadze := false ;
12470: LD_ADDR_EXP 39
12474: PUSH
12475: LD_INT 0
12477: ST_TO_ADDR
// sTroll := false ;
12478: LD_ADDR_EXP 40
12482: PUSH
12483: LD_INT 0
12485: ST_TO_ADDR
// sSlow := false ;
12486: LD_ADDR_EXP 41
12490: PUSH
12491: LD_INT 0
12493: ST_TO_ADDR
// sLack := false ;
12494: LD_ADDR_EXP 42
12498: PUSH
12499: LD_INT 0
12501: ST_TO_ADDR
// sTank := false ;
12502: LD_ADDR_EXP 44
12506: PUSH
12507: LD_INT 0
12509: ST_TO_ADDR
// sRemote := false ;
12510: LD_ADDR_EXP 45
12514: PUSH
12515: LD_INT 0
12517: ST_TO_ADDR
// sPowell := false ;
12518: LD_ADDR_EXP 46
12522: PUSH
12523: LD_INT 0
12525: ST_TO_ADDR
// sTeleport := false ;
12526: LD_ADDR_EXP 49
12530: PUSH
12531: LD_INT 0
12533: ST_TO_ADDR
// sOilTower := false ;
12534: LD_ADDR_EXP 51
12538: PUSH
12539: LD_INT 0
12541: ST_TO_ADDR
// sShovel := false ;
12542: LD_ADDR_EXP 52
12546: PUSH
12547: LD_INT 0
12549: ST_TO_ADDR
// sSheik := false ;
12550: LD_ADDR_EXP 53
12554: PUSH
12555: LD_INT 0
12557: ST_TO_ADDR
// sEarthquake := false ;
12558: LD_ADDR_EXP 55
12562: PUSH
12563: LD_INT 0
12565: ST_TO_ADDR
// sAI := false ;
12566: LD_ADDR_EXP 56
12570: PUSH
12571: LD_INT 0
12573: ST_TO_ADDR
// sCargo := false ;
12574: LD_ADDR_EXP 59
12578: PUSH
12579: LD_INT 0
12581: ST_TO_ADDR
// sDLaser := false ;
12582: LD_ADDR_EXP 60
12586: PUSH
12587: LD_INT 0
12589: ST_TO_ADDR
// sExchange := false ;
12590: LD_ADDR_EXP 61
12594: PUSH
12595: LD_INT 0
12597: ST_TO_ADDR
// sFac := false ;
12598: LD_ADDR_EXP 62
12602: PUSH
12603: LD_INT 0
12605: ST_TO_ADDR
// sPower := false ;
12606: LD_ADDR_EXP 63
12610: PUSH
12611: LD_INT 0
12613: ST_TO_ADDR
// sRandom := false ;
12614: LD_ADDR_EXP 64
12618: PUSH
12619: LD_INT 0
12621: ST_TO_ADDR
// sShield := false ;
12622: LD_ADDR_EXP 65
12626: PUSH
12627: LD_INT 0
12629: ST_TO_ADDR
// sTime := false ;
12630: LD_ADDR_EXP 66
12634: PUSH
12635: LD_INT 0
12637: ST_TO_ADDR
// sTools := false ;
12638: LD_ADDR_EXP 67
12642: PUSH
12643: LD_INT 0
12645: ST_TO_ADDR
// sSold := false ;
12646: LD_ADDR_EXP 32
12650: PUSH
12651: LD_INT 0
12653: ST_TO_ADDR
// sDiff := false ;
12654: LD_ADDR_EXP 33
12658: PUSH
12659: LD_INT 0
12661: ST_TO_ADDR
// sFog := false ;
12662: LD_ADDR_EXP 36
12666: PUSH
12667: LD_INT 0
12669: ST_TO_ADDR
// sReset := false ;
12670: LD_ADDR_EXP 37
12674: PUSH
12675: LD_INT 0
12677: ST_TO_ADDR
// sSun := false ;
12678: LD_ADDR_EXP 38
12682: PUSH
12683: LD_INT 0
12685: ST_TO_ADDR
// sTiger := false ;
12686: LD_ADDR_EXP 34
12690: PUSH
12691: LD_INT 0
12693: ST_TO_ADDR
// sBomb := false ;
12694: LD_ADDR_EXP 35
12698: PUSH
12699: LD_INT 0
12701: ST_TO_ADDR
// sWound := false ;
12702: LD_ADDR_EXP 43
12706: PUSH
12707: LD_INT 0
12709: ST_TO_ADDR
// sBetray := false ;
12710: LD_ADDR_EXP 47
12714: PUSH
12715: LD_INT 0
12717: ST_TO_ADDR
// sContamin := false ;
12718: LD_ADDR_EXP 48
12722: PUSH
12723: LD_INT 0
12725: ST_TO_ADDR
// sOil := false ;
12726: LD_ADDR_EXP 50
12730: PUSH
12731: LD_INT 0
12733: ST_TO_ADDR
// sStu := false ;
12734: LD_ADDR_EXP 54
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// sBazooka := false ;
12742: LD_ADDR_EXP 57
12746: PUSH
12747: LD_INT 0
12749: ST_TO_ADDR
// sMortar := false ;
12750: LD_ADDR_EXP 58
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// sRanger := false ;
12758: LD_ADDR_EXP 68
12762: PUSH
12763: LD_INT 0
12765: ST_TO_ADDR
// sComputer := false ;
12766: LD_ADDR_EXP 69
12770: PUSH
12771: LD_INT 0
12773: ST_TO_ADDR
// s30 := false ;
12774: LD_ADDR_EXP 70
12778: PUSH
12779: LD_INT 0
12781: ST_TO_ADDR
// s60 := false ;
12782: LD_ADDR_EXP 71
12786: PUSH
12787: LD_INT 0
12789: ST_TO_ADDR
// end ;
12790: LD_VAR 0 1
12794: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12795: LD_INT 0
12797: PPUSH
12798: PPUSH
12799: PPUSH
12800: PPUSH
12801: PPUSH
12802: PPUSH
12803: PPUSH
// result := [ ] ;
12804: LD_ADDR_VAR 0 2
12808: PUSH
12809: EMPTY
12810: ST_TO_ADDR
// if campaign_id = 1 then
12811: LD_OWVAR 69
12815: PUSH
12816: LD_INT 1
12818: EQUAL
12819: IFFALSE 15985
// begin case mission_number of 1 :
12821: LD_OWVAR 70
12825: PUSH
12826: LD_INT 1
12828: DOUBLE
12829: EQUAL
12830: IFTRUE 12834
12832: GO 12910
12834: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12835: LD_ADDR_VAR 0 2
12839: PUSH
12840: LD_INT 2
12842: PUSH
12843: LD_INT 4
12845: PUSH
12846: LD_INT 11
12848: PUSH
12849: LD_INT 12
12851: PUSH
12852: LD_INT 15
12854: PUSH
12855: LD_INT 16
12857: PUSH
12858: LD_INT 22
12860: PUSH
12861: LD_INT 23
12863: PUSH
12864: LD_INT 26
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: LD_INT 101
12880: PUSH
12881: LD_INT 102
12883: PUSH
12884: LD_INT 106
12886: PUSH
12887: LD_INT 116
12889: PUSH
12890: LD_INT 117
12892: PUSH
12893: LD_INT 118
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: ST_TO_ADDR
12908: GO 15983
12910: LD_INT 2
12912: DOUBLE
12913: EQUAL
12914: IFTRUE 12918
12916: GO 13002
12918: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12919: LD_ADDR_VAR 0 2
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: LD_INT 4
12929: PUSH
12930: LD_INT 11
12932: PUSH
12933: LD_INT 12
12935: PUSH
12936: LD_INT 15
12938: PUSH
12939: LD_INT 16
12941: PUSH
12942: LD_INT 22
12944: PUSH
12945: LD_INT 23
12947: PUSH
12948: LD_INT 26
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 101
12964: PUSH
12965: LD_INT 102
12967: PUSH
12968: LD_INT 105
12970: PUSH
12971: LD_INT 106
12973: PUSH
12974: LD_INT 108
12976: PUSH
12977: LD_INT 116
12979: PUSH
12980: LD_INT 117
12982: PUSH
12983: LD_INT 118
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: ST_TO_ADDR
13000: GO 15983
13002: LD_INT 3
13004: DOUBLE
13005: EQUAL
13006: IFTRUE 13010
13008: GO 13098
13010: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13011: LD_ADDR_VAR 0 2
13015: PUSH
13016: LD_INT 2
13018: PUSH
13019: LD_INT 4
13021: PUSH
13022: LD_INT 5
13024: PUSH
13025: LD_INT 11
13027: PUSH
13028: LD_INT 12
13030: PUSH
13031: LD_INT 15
13033: PUSH
13034: LD_INT 16
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 26
13042: PUSH
13043: LD_INT 36
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 101
13060: PUSH
13061: LD_INT 102
13063: PUSH
13064: LD_INT 105
13066: PUSH
13067: LD_INT 106
13069: PUSH
13070: LD_INT 108
13072: PUSH
13073: LD_INT 116
13075: PUSH
13076: LD_INT 117
13078: PUSH
13079: LD_INT 118
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: ST_TO_ADDR
13096: GO 15983
13098: LD_INT 4
13100: DOUBLE
13101: EQUAL
13102: IFTRUE 13106
13104: GO 13202
13106: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13107: LD_ADDR_VAR 0 2
13111: PUSH
13112: LD_INT 2
13114: PUSH
13115: LD_INT 4
13117: PUSH
13118: LD_INT 5
13120: PUSH
13121: LD_INT 8
13123: PUSH
13124: LD_INT 11
13126: PUSH
13127: LD_INT 12
13129: PUSH
13130: LD_INT 15
13132: PUSH
13133: LD_INT 16
13135: PUSH
13136: LD_INT 22
13138: PUSH
13139: LD_INT 23
13141: PUSH
13142: LD_INT 26
13144: PUSH
13145: LD_INT 36
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: PUSH
13162: LD_INT 101
13164: PUSH
13165: LD_INT 102
13167: PUSH
13168: LD_INT 105
13170: PUSH
13171: LD_INT 106
13173: PUSH
13174: LD_INT 108
13176: PUSH
13177: LD_INT 116
13179: PUSH
13180: LD_INT 117
13182: PUSH
13183: LD_INT 118
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: ST_TO_ADDR
13200: GO 15983
13202: LD_INT 5
13204: DOUBLE
13205: EQUAL
13206: IFTRUE 13210
13208: GO 13322
13210: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13211: LD_ADDR_VAR 0 2
13215: PUSH
13216: LD_INT 2
13218: PUSH
13219: LD_INT 4
13221: PUSH
13222: LD_INT 5
13224: PUSH
13225: LD_INT 6
13227: PUSH
13228: LD_INT 8
13230: PUSH
13231: LD_INT 11
13233: PUSH
13234: LD_INT 12
13236: PUSH
13237: LD_INT 15
13239: PUSH
13240: LD_INT 16
13242: PUSH
13243: LD_INT 22
13245: PUSH
13246: LD_INT 23
13248: PUSH
13249: LD_INT 25
13251: PUSH
13252: LD_INT 26
13254: PUSH
13255: LD_INT 36
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 101
13276: PUSH
13277: LD_INT 102
13279: PUSH
13280: LD_INT 105
13282: PUSH
13283: LD_INT 106
13285: PUSH
13286: LD_INT 108
13288: PUSH
13289: LD_INT 109
13291: PUSH
13292: LD_INT 112
13294: PUSH
13295: LD_INT 116
13297: PUSH
13298: LD_INT 117
13300: PUSH
13301: LD_INT 118
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: ST_TO_ADDR
13320: GO 15983
13322: LD_INT 6
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13462
13330: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13331: LD_ADDR_VAR 0 2
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: LD_INT 4
13341: PUSH
13342: LD_INT 5
13344: PUSH
13345: LD_INT 6
13347: PUSH
13348: LD_INT 8
13350: PUSH
13351: LD_INT 11
13353: PUSH
13354: LD_INT 12
13356: PUSH
13357: LD_INT 15
13359: PUSH
13360: LD_INT 16
13362: PUSH
13363: LD_INT 20
13365: PUSH
13366: LD_INT 21
13368: PUSH
13369: LD_INT 22
13371: PUSH
13372: LD_INT 23
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 26
13380: PUSH
13381: LD_INT 30
13383: PUSH
13384: LD_INT 31
13386: PUSH
13387: LD_INT 32
13389: PUSH
13390: LD_INT 36
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 101
13416: PUSH
13417: LD_INT 102
13419: PUSH
13420: LD_INT 105
13422: PUSH
13423: LD_INT 106
13425: PUSH
13426: LD_INT 108
13428: PUSH
13429: LD_INT 109
13431: PUSH
13432: LD_INT 112
13434: PUSH
13435: LD_INT 116
13437: PUSH
13438: LD_INT 117
13440: PUSH
13441: LD_INT 118
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: ST_TO_ADDR
13460: GO 15983
13462: LD_INT 7
13464: DOUBLE
13465: EQUAL
13466: IFTRUE 13470
13468: GO 13582
13470: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13471: LD_ADDR_VAR 0 2
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: LD_INT 4
13481: PUSH
13482: LD_INT 5
13484: PUSH
13485: LD_INT 7
13487: PUSH
13488: LD_INT 11
13490: PUSH
13491: LD_INT 12
13493: PUSH
13494: LD_INT 15
13496: PUSH
13497: LD_INT 16
13499: PUSH
13500: LD_INT 20
13502: PUSH
13503: LD_INT 21
13505: PUSH
13506: LD_INT 22
13508: PUSH
13509: LD_INT 23
13511: PUSH
13512: LD_INT 25
13514: PUSH
13515: LD_INT 26
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 101
13536: PUSH
13537: LD_INT 102
13539: PUSH
13540: LD_INT 103
13542: PUSH
13543: LD_INT 105
13545: PUSH
13546: LD_INT 106
13548: PUSH
13549: LD_INT 108
13551: PUSH
13552: LD_INT 112
13554: PUSH
13555: LD_INT 116
13557: PUSH
13558: LD_INT 117
13560: PUSH
13561: LD_INT 118
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: ST_TO_ADDR
13580: GO 15983
13582: LD_INT 8
13584: DOUBLE
13585: EQUAL
13586: IFTRUE 13590
13588: GO 13730
13590: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13591: LD_ADDR_VAR 0 2
13595: PUSH
13596: LD_INT 2
13598: PUSH
13599: LD_INT 4
13601: PUSH
13602: LD_INT 5
13604: PUSH
13605: LD_INT 6
13607: PUSH
13608: LD_INT 7
13610: PUSH
13611: LD_INT 8
13613: PUSH
13614: LD_INT 11
13616: PUSH
13617: LD_INT 12
13619: PUSH
13620: LD_INT 15
13622: PUSH
13623: LD_INT 16
13625: PUSH
13626: LD_INT 20
13628: PUSH
13629: LD_INT 21
13631: PUSH
13632: LD_INT 22
13634: PUSH
13635: LD_INT 23
13637: PUSH
13638: LD_INT 25
13640: PUSH
13641: LD_INT 26
13643: PUSH
13644: LD_INT 30
13646: PUSH
13647: LD_INT 31
13649: PUSH
13650: LD_INT 32
13652: PUSH
13653: LD_INT 36
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: PUSH
13678: LD_INT 101
13680: PUSH
13681: LD_INT 102
13683: PUSH
13684: LD_INT 103
13686: PUSH
13687: LD_INT 105
13689: PUSH
13690: LD_INT 106
13692: PUSH
13693: LD_INT 108
13695: PUSH
13696: LD_INT 109
13698: PUSH
13699: LD_INT 112
13701: PUSH
13702: LD_INT 116
13704: PUSH
13705: LD_INT 117
13707: PUSH
13708: LD_INT 118
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: ST_TO_ADDR
13728: GO 15983
13730: LD_INT 9
13732: DOUBLE
13733: EQUAL
13734: IFTRUE 13738
13736: GO 13886
13738: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13739: LD_ADDR_VAR 0 2
13743: PUSH
13744: LD_INT 2
13746: PUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: LD_INT 6
13755: PUSH
13756: LD_INT 7
13758: PUSH
13759: LD_INT 8
13761: PUSH
13762: LD_INT 11
13764: PUSH
13765: LD_INT 12
13767: PUSH
13768: LD_INT 15
13770: PUSH
13771: LD_INT 16
13773: PUSH
13774: LD_INT 20
13776: PUSH
13777: LD_INT 21
13779: PUSH
13780: LD_INT 22
13782: PUSH
13783: LD_INT 23
13785: PUSH
13786: LD_INT 25
13788: PUSH
13789: LD_INT 26
13791: PUSH
13792: LD_INT 28
13794: PUSH
13795: LD_INT 30
13797: PUSH
13798: LD_INT 31
13800: PUSH
13801: LD_INT 32
13803: PUSH
13804: LD_INT 36
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 101
13832: PUSH
13833: LD_INT 102
13835: PUSH
13836: LD_INT 103
13838: PUSH
13839: LD_INT 105
13841: PUSH
13842: LD_INT 106
13844: PUSH
13845: LD_INT 108
13847: PUSH
13848: LD_INT 109
13850: PUSH
13851: LD_INT 112
13853: PUSH
13854: LD_INT 114
13856: PUSH
13857: LD_INT 116
13859: PUSH
13860: LD_INT 117
13862: PUSH
13863: LD_INT 118
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: ST_TO_ADDR
13884: GO 15983
13886: LD_INT 10
13888: DOUBLE
13889: EQUAL
13890: IFTRUE 13894
13892: GO 14090
13894: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13895: LD_ADDR_VAR 0 2
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 4
13905: PUSH
13906: LD_INT 5
13908: PUSH
13909: LD_INT 6
13911: PUSH
13912: LD_INT 7
13914: PUSH
13915: LD_INT 8
13917: PUSH
13918: LD_INT 9
13920: PUSH
13921: LD_INT 10
13923: PUSH
13924: LD_INT 11
13926: PUSH
13927: LD_INT 12
13929: PUSH
13930: LD_INT 13
13932: PUSH
13933: LD_INT 14
13935: PUSH
13936: LD_INT 15
13938: PUSH
13939: LD_INT 16
13941: PUSH
13942: LD_INT 17
13944: PUSH
13945: LD_INT 18
13947: PUSH
13948: LD_INT 19
13950: PUSH
13951: LD_INT 20
13953: PUSH
13954: LD_INT 21
13956: PUSH
13957: LD_INT 22
13959: PUSH
13960: LD_INT 23
13962: PUSH
13963: LD_INT 24
13965: PUSH
13966: LD_INT 25
13968: PUSH
13969: LD_INT 26
13971: PUSH
13972: LD_INT 28
13974: PUSH
13975: LD_INT 30
13977: PUSH
13978: LD_INT 31
13980: PUSH
13981: LD_INT 32
13983: PUSH
13984: LD_INT 36
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 101
14020: PUSH
14021: LD_INT 102
14023: PUSH
14024: LD_INT 103
14026: PUSH
14027: LD_INT 104
14029: PUSH
14030: LD_INT 105
14032: PUSH
14033: LD_INT 106
14035: PUSH
14036: LD_INT 107
14038: PUSH
14039: LD_INT 108
14041: PUSH
14042: LD_INT 109
14044: PUSH
14045: LD_INT 110
14047: PUSH
14048: LD_INT 111
14050: PUSH
14051: LD_INT 112
14053: PUSH
14054: LD_INT 114
14056: PUSH
14057: LD_INT 116
14059: PUSH
14060: LD_INT 117
14062: PUSH
14063: LD_INT 118
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: ST_TO_ADDR
14088: GO 15983
14090: LD_INT 11
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14302
14098: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14099: LD_ADDR_VAR 0 2
14103: PUSH
14104: LD_INT 2
14106: PUSH
14107: LD_INT 3
14109: PUSH
14110: LD_INT 4
14112: PUSH
14113: LD_INT 5
14115: PUSH
14116: LD_INT 6
14118: PUSH
14119: LD_INT 7
14121: PUSH
14122: LD_INT 8
14124: PUSH
14125: LD_INT 9
14127: PUSH
14128: LD_INT 10
14130: PUSH
14131: LD_INT 11
14133: PUSH
14134: LD_INT 12
14136: PUSH
14137: LD_INT 13
14139: PUSH
14140: LD_INT 14
14142: PUSH
14143: LD_INT 15
14145: PUSH
14146: LD_INT 16
14148: PUSH
14149: LD_INT 17
14151: PUSH
14152: LD_INT 18
14154: PUSH
14155: LD_INT 19
14157: PUSH
14158: LD_INT 20
14160: PUSH
14161: LD_INT 21
14163: PUSH
14164: LD_INT 22
14166: PUSH
14167: LD_INT 23
14169: PUSH
14170: LD_INT 24
14172: PUSH
14173: LD_INT 25
14175: PUSH
14176: LD_INT 26
14178: PUSH
14179: LD_INT 28
14181: PUSH
14182: LD_INT 30
14184: PUSH
14185: LD_INT 31
14187: PUSH
14188: LD_INT 32
14190: PUSH
14191: LD_INT 34
14193: PUSH
14194: LD_INT 36
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 101
14232: PUSH
14233: LD_INT 102
14235: PUSH
14236: LD_INT 103
14238: PUSH
14239: LD_INT 104
14241: PUSH
14242: LD_INT 105
14244: PUSH
14245: LD_INT 106
14247: PUSH
14248: LD_INT 107
14250: PUSH
14251: LD_INT 108
14253: PUSH
14254: LD_INT 109
14256: PUSH
14257: LD_INT 110
14259: PUSH
14260: LD_INT 111
14262: PUSH
14263: LD_INT 112
14265: PUSH
14266: LD_INT 114
14268: PUSH
14269: LD_INT 116
14271: PUSH
14272: LD_INT 117
14274: PUSH
14275: LD_INT 118
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: ST_TO_ADDR
14300: GO 15983
14302: LD_INT 12
14304: DOUBLE
14305: EQUAL
14306: IFTRUE 14310
14308: GO 14530
14310: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14311: LD_ADDR_VAR 0 2
14315: PUSH
14316: LD_INT 1
14318: PUSH
14319: LD_INT 2
14321: PUSH
14322: LD_INT 3
14324: PUSH
14325: LD_INT 4
14327: PUSH
14328: LD_INT 5
14330: PUSH
14331: LD_INT 6
14333: PUSH
14334: LD_INT 7
14336: PUSH
14337: LD_INT 8
14339: PUSH
14340: LD_INT 9
14342: PUSH
14343: LD_INT 10
14345: PUSH
14346: LD_INT 11
14348: PUSH
14349: LD_INT 12
14351: PUSH
14352: LD_INT 13
14354: PUSH
14355: LD_INT 14
14357: PUSH
14358: LD_INT 15
14360: PUSH
14361: LD_INT 16
14363: PUSH
14364: LD_INT 17
14366: PUSH
14367: LD_INT 18
14369: PUSH
14370: LD_INT 19
14372: PUSH
14373: LD_INT 20
14375: PUSH
14376: LD_INT 21
14378: PUSH
14379: LD_INT 22
14381: PUSH
14382: LD_INT 23
14384: PUSH
14385: LD_INT 24
14387: PUSH
14388: LD_INT 25
14390: PUSH
14391: LD_INT 26
14393: PUSH
14394: LD_INT 27
14396: PUSH
14397: LD_INT 28
14399: PUSH
14400: LD_INT 30
14402: PUSH
14403: LD_INT 31
14405: PUSH
14406: LD_INT 32
14408: PUSH
14409: LD_INT 33
14411: PUSH
14412: LD_INT 34
14414: PUSH
14415: LD_INT 36
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 101
14456: PUSH
14457: LD_INT 102
14459: PUSH
14460: LD_INT 103
14462: PUSH
14463: LD_INT 104
14465: PUSH
14466: LD_INT 105
14468: PUSH
14469: LD_INT 106
14471: PUSH
14472: LD_INT 107
14474: PUSH
14475: LD_INT 108
14477: PUSH
14478: LD_INT 109
14480: PUSH
14481: LD_INT 110
14483: PUSH
14484: LD_INT 111
14486: PUSH
14487: LD_INT 112
14489: PUSH
14490: LD_INT 113
14492: PUSH
14493: LD_INT 114
14495: PUSH
14496: LD_INT 116
14498: PUSH
14499: LD_INT 117
14501: PUSH
14502: LD_INT 118
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: ST_TO_ADDR
14528: GO 15983
14530: LD_INT 13
14532: DOUBLE
14533: EQUAL
14534: IFTRUE 14538
14536: GO 14746
14538: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14539: LD_ADDR_VAR 0 2
14543: PUSH
14544: LD_INT 1
14546: PUSH
14547: LD_INT 2
14549: PUSH
14550: LD_INT 3
14552: PUSH
14553: LD_INT 4
14555: PUSH
14556: LD_INT 5
14558: PUSH
14559: LD_INT 8
14561: PUSH
14562: LD_INT 9
14564: PUSH
14565: LD_INT 10
14567: PUSH
14568: LD_INT 11
14570: PUSH
14571: LD_INT 12
14573: PUSH
14574: LD_INT 14
14576: PUSH
14577: LD_INT 15
14579: PUSH
14580: LD_INT 16
14582: PUSH
14583: LD_INT 17
14585: PUSH
14586: LD_INT 18
14588: PUSH
14589: LD_INT 19
14591: PUSH
14592: LD_INT 20
14594: PUSH
14595: LD_INT 21
14597: PUSH
14598: LD_INT 22
14600: PUSH
14601: LD_INT 23
14603: PUSH
14604: LD_INT 24
14606: PUSH
14607: LD_INT 25
14609: PUSH
14610: LD_INT 26
14612: PUSH
14613: LD_INT 27
14615: PUSH
14616: LD_INT 28
14618: PUSH
14619: LD_INT 30
14621: PUSH
14622: LD_INT 31
14624: PUSH
14625: LD_INT 32
14627: PUSH
14628: LD_INT 33
14630: PUSH
14631: LD_INT 34
14633: PUSH
14634: LD_INT 36
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: PUSH
14670: LD_INT 101
14672: PUSH
14673: LD_INT 102
14675: PUSH
14676: LD_INT 103
14678: PUSH
14679: LD_INT 104
14681: PUSH
14682: LD_INT 105
14684: PUSH
14685: LD_INT 106
14687: PUSH
14688: LD_INT 107
14690: PUSH
14691: LD_INT 108
14693: PUSH
14694: LD_INT 109
14696: PUSH
14697: LD_INT 110
14699: PUSH
14700: LD_INT 111
14702: PUSH
14703: LD_INT 112
14705: PUSH
14706: LD_INT 113
14708: PUSH
14709: LD_INT 114
14711: PUSH
14712: LD_INT 116
14714: PUSH
14715: LD_INT 117
14717: PUSH
14718: LD_INT 118
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: ST_TO_ADDR
14744: GO 15983
14746: LD_INT 14
14748: DOUBLE
14749: EQUAL
14750: IFTRUE 14754
14752: GO 14978
14754: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14755: LD_ADDR_VAR 0 2
14759: PUSH
14760: LD_INT 1
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: LD_INT 3
14768: PUSH
14769: LD_INT 4
14771: PUSH
14772: LD_INT 5
14774: PUSH
14775: LD_INT 6
14777: PUSH
14778: LD_INT 7
14780: PUSH
14781: LD_INT 8
14783: PUSH
14784: LD_INT 9
14786: PUSH
14787: LD_INT 10
14789: PUSH
14790: LD_INT 11
14792: PUSH
14793: LD_INT 12
14795: PUSH
14796: LD_INT 13
14798: PUSH
14799: LD_INT 14
14801: PUSH
14802: LD_INT 15
14804: PUSH
14805: LD_INT 16
14807: PUSH
14808: LD_INT 17
14810: PUSH
14811: LD_INT 18
14813: PUSH
14814: LD_INT 19
14816: PUSH
14817: LD_INT 20
14819: PUSH
14820: LD_INT 21
14822: PUSH
14823: LD_INT 22
14825: PUSH
14826: LD_INT 23
14828: PUSH
14829: LD_INT 24
14831: PUSH
14832: LD_INT 25
14834: PUSH
14835: LD_INT 26
14837: PUSH
14838: LD_INT 27
14840: PUSH
14841: LD_INT 28
14843: PUSH
14844: LD_INT 29
14846: PUSH
14847: LD_INT 30
14849: PUSH
14850: LD_INT 31
14852: PUSH
14853: LD_INT 32
14855: PUSH
14856: LD_INT 33
14858: PUSH
14859: LD_INT 34
14861: PUSH
14862: LD_INT 36
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: PUSH
14902: LD_INT 101
14904: PUSH
14905: LD_INT 102
14907: PUSH
14908: LD_INT 103
14910: PUSH
14911: LD_INT 104
14913: PUSH
14914: LD_INT 105
14916: PUSH
14917: LD_INT 106
14919: PUSH
14920: LD_INT 107
14922: PUSH
14923: LD_INT 108
14925: PUSH
14926: LD_INT 109
14928: PUSH
14929: LD_INT 110
14931: PUSH
14932: LD_INT 111
14934: PUSH
14935: LD_INT 112
14937: PUSH
14938: LD_INT 113
14940: PUSH
14941: LD_INT 114
14943: PUSH
14944: LD_INT 116
14946: PUSH
14947: LD_INT 117
14949: PUSH
14950: LD_INT 118
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: ST_TO_ADDR
14976: GO 15983
14978: LD_INT 15
14980: DOUBLE
14981: EQUAL
14982: IFTRUE 14986
14984: GO 15210
14986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14987: LD_ADDR_VAR 0 2
14991: PUSH
14992: LD_INT 1
14994: PUSH
14995: LD_INT 2
14997: PUSH
14998: LD_INT 3
15000: PUSH
15001: LD_INT 4
15003: PUSH
15004: LD_INT 5
15006: PUSH
15007: LD_INT 6
15009: PUSH
15010: LD_INT 7
15012: PUSH
15013: LD_INT 8
15015: PUSH
15016: LD_INT 9
15018: PUSH
15019: LD_INT 10
15021: PUSH
15022: LD_INT 11
15024: PUSH
15025: LD_INT 12
15027: PUSH
15028: LD_INT 13
15030: PUSH
15031: LD_INT 14
15033: PUSH
15034: LD_INT 15
15036: PUSH
15037: LD_INT 16
15039: PUSH
15040: LD_INT 17
15042: PUSH
15043: LD_INT 18
15045: PUSH
15046: LD_INT 19
15048: PUSH
15049: LD_INT 20
15051: PUSH
15052: LD_INT 21
15054: PUSH
15055: LD_INT 22
15057: PUSH
15058: LD_INT 23
15060: PUSH
15061: LD_INT 24
15063: PUSH
15064: LD_INT 25
15066: PUSH
15067: LD_INT 26
15069: PUSH
15070: LD_INT 27
15072: PUSH
15073: LD_INT 28
15075: PUSH
15076: LD_INT 29
15078: PUSH
15079: LD_INT 30
15081: PUSH
15082: LD_INT 31
15084: PUSH
15085: LD_INT 32
15087: PUSH
15088: LD_INT 33
15090: PUSH
15091: LD_INT 34
15093: PUSH
15094: LD_INT 36
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: PUSH
15134: LD_INT 101
15136: PUSH
15137: LD_INT 102
15139: PUSH
15140: LD_INT 103
15142: PUSH
15143: LD_INT 104
15145: PUSH
15146: LD_INT 105
15148: PUSH
15149: LD_INT 106
15151: PUSH
15152: LD_INT 107
15154: PUSH
15155: LD_INT 108
15157: PUSH
15158: LD_INT 109
15160: PUSH
15161: LD_INT 110
15163: PUSH
15164: LD_INT 111
15166: PUSH
15167: LD_INT 112
15169: PUSH
15170: LD_INT 113
15172: PUSH
15173: LD_INT 114
15175: PUSH
15176: LD_INT 116
15178: PUSH
15179: LD_INT 117
15181: PUSH
15182: LD_INT 118
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: ST_TO_ADDR
15208: GO 15983
15210: LD_INT 16
15212: DOUBLE
15213: EQUAL
15214: IFTRUE 15218
15216: GO 15354
15218: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15219: LD_ADDR_VAR 0 2
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: LD_INT 4
15229: PUSH
15230: LD_INT 5
15232: PUSH
15233: LD_INT 7
15235: PUSH
15236: LD_INT 11
15238: PUSH
15239: LD_INT 12
15241: PUSH
15242: LD_INT 15
15244: PUSH
15245: LD_INT 16
15247: PUSH
15248: LD_INT 20
15250: PUSH
15251: LD_INT 21
15253: PUSH
15254: LD_INT 22
15256: PUSH
15257: LD_INT 23
15259: PUSH
15260: LD_INT 25
15262: PUSH
15263: LD_INT 26
15265: PUSH
15266: LD_INT 30
15268: PUSH
15269: LD_INT 31
15271: PUSH
15272: LD_INT 32
15274: PUSH
15275: LD_INT 33
15277: PUSH
15278: LD_INT 34
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 101
15304: PUSH
15305: LD_INT 102
15307: PUSH
15308: LD_INT 103
15310: PUSH
15311: LD_INT 106
15313: PUSH
15314: LD_INT 108
15316: PUSH
15317: LD_INT 112
15319: PUSH
15320: LD_INT 113
15322: PUSH
15323: LD_INT 114
15325: PUSH
15326: LD_INT 116
15328: PUSH
15329: LD_INT 117
15331: PUSH
15332: LD_INT 118
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: ST_TO_ADDR
15352: GO 15983
15354: LD_INT 17
15356: DOUBLE
15357: EQUAL
15358: IFTRUE 15362
15360: GO 15586
15362: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15363: LD_ADDR_VAR 0 2
15367: PUSH
15368: LD_INT 1
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: LD_INT 3
15376: PUSH
15377: LD_INT 4
15379: PUSH
15380: LD_INT 5
15382: PUSH
15383: LD_INT 6
15385: PUSH
15386: LD_INT 7
15388: PUSH
15389: LD_INT 8
15391: PUSH
15392: LD_INT 9
15394: PUSH
15395: LD_INT 10
15397: PUSH
15398: LD_INT 11
15400: PUSH
15401: LD_INT 12
15403: PUSH
15404: LD_INT 13
15406: PUSH
15407: LD_INT 14
15409: PUSH
15410: LD_INT 15
15412: PUSH
15413: LD_INT 16
15415: PUSH
15416: LD_INT 17
15418: PUSH
15419: LD_INT 18
15421: PUSH
15422: LD_INT 19
15424: PUSH
15425: LD_INT 20
15427: PUSH
15428: LD_INT 21
15430: PUSH
15431: LD_INT 22
15433: PUSH
15434: LD_INT 23
15436: PUSH
15437: LD_INT 24
15439: PUSH
15440: LD_INT 25
15442: PUSH
15443: LD_INT 26
15445: PUSH
15446: LD_INT 27
15448: PUSH
15449: LD_INT 28
15451: PUSH
15452: LD_INT 29
15454: PUSH
15455: LD_INT 30
15457: PUSH
15458: LD_INT 31
15460: PUSH
15461: LD_INT 32
15463: PUSH
15464: LD_INT 33
15466: PUSH
15467: LD_INT 34
15469: PUSH
15470: LD_INT 36
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 101
15512: PUSH
15513: LD_INT 102
15515: PUSH
15516: LD_INT 103
15518: PUSH
15519: LD_INT 104
15521: PUSH
15522: LD_INT 105
15524: PUSH
15525: LD_INT 106
15527: PUSH
15528: LD_INT 107
15530: PUSH
15531: LD_INT 108
15533: PUSH
15534: LD_INT 109
15536: PUSH
15537: LD_INT 110
15539: PUSH
15540: LD_INT 111
15542: PUSH
15543: LD_INT 112
15545: PUSH
15546: LD_INT 113
15548: PUSH
15549: LD_INT 114
15551: PUSH
15552: LD_INT 116
15554: PUSH
15555: LD_INT 117
15557: PUSH
15558: LD_INT 118
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: ST_TO_ADDR
15584: GO 15983
15586: LD_INT 18
15588: DOUBLE
15589: EQUAL
15590: IFTRUE 15594
15592: GO 15742
15594: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15595: LD_ADDR_VAR 0 2
15599: PUSH
15600: LD_INT 2
15602: PUSH
15603: LD_INT 4
15605: PUSH
15606: LD_INT 5
15608: PUSH
15609: LD_INT 7
15611: PUSH
15612: LD_INT 11
15614: PUSH
15615: LD_INT 12
15617: PUSH
15618: LD_INT 15
15620: PUSH
15621: LD_INT 16
15623: PUSH
15624: LD_INT 20
15626: PUSH
15627: LD_INT 21
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_INT 23
15635: PUSH
15636: LD_INT 25
15638: PUSH
15639: LD_INT 26
15641: PUSH
15642: LD_INT 30
15644: PUSH
15645: LD_INT 31
15647: PUSH
15648: LD_INT 32
15650: PUSH
15651: LD_INT 33
15653: PUSH
15654: LD_INT 34
15656: PUSH
15657: LD_INT 35
15659: PUSH
15660: LD_INT 36
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 101
15688: PUSH
15689: LD_INT 102
15691: PUSH
15692: LD_INT 103
15694: PUSH
15695: LD_INT 106
15697: PUSH
15698: LD_INT 108
15700: PUSH
15701: LD_INT 112
15703: PUSH
15704: LD_INT 113
15706: PUSH
15707: LD_INT 114
15709: PUSH
15710: LD_INT 115
15712: PUSH
15713: LD_INT 116
15715: PUSH
15716: LD_INT 117
15718: PUSH
15719: LD_INT 118
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: ST_TO_ADDR
15740: GO 15983
15742: LD_INT 19
15744: DOUBLE
15745: EQUAL
15746: IFTRUE 15750
15748: GO 15982
15750: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15751: LD_ADDR_VAR 0 2
15755: PUSH
15756: LD_INT 1
15758: PUSH
15759: LD_INT 2
15761: PUSH
15762: LD_INT 3
15764: PUSH
15765: LD_INT 4
15767: PUSH
15768: LD_INT 5
15770: PUSH
15771: LD_INT 6
15773: PUSH
15774: LD_INT 7
15776: PUSH
15777: LD_INT 8
15779: PUSH
15780: LD_INT 9
15782: PUSH
15783: LD_INT 10
15785: PUSH
15786: LD_INT 11
15788: PUSH
15789: LD_INT 12
15791: PUSH
15792: LD_INT 13
15794: PUSH
15795: LD_INT 14
15797: PUSH
15798: LD_INT 15
15800: PUSH
15801: LD_INT 16
15803: PUSH
15804: LD_INT 17
15806: PUSH
15807: LD_INT 18
15809: PUSH
15810: LD_INT 19
15812: PUSH
15813: LD_INT 20
15815: PUSH
15816: LD_INT 21
15818: PUSH
15819: LD_INT 22
15821: PUSH
15822: LD_INT 23
15824: PUSH
15825: LD_INT 24
15827: PUSH
15828: LD_INT 25
15830: PUSH
15831: LD_INT 26
15833: PUSH
15834: LD_INT 27
15836: PUSH
15837: LD_INT 28
15839: PUSH
15840: LD_INT 29
15842: PUSH
15843: LD_INT 30
15845: PUSH
15846: LD_INT 31
15848: PUSH
15849: LD_INT 32
15851: PUSH
15852: LD_INT 33
15854: PUSH
15855: LD_INT 34
15857: PUSH
15858: LD_INT 35
15860: PUSH
15861: LD_INT 36
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 101
15904: PUSH
15905: LD_INT 102
15907: PUSH
15908: LD_INT 103
15910: PUSH
15911: LD_INT 104
15913: PUSH
15914: LD_INT 105
15916: PUSH
15917: LD_INT 106
15919: PUSH
15920: LD_INT 107
15922: PUSH
15923: LD_INT 108
15925: PUSH
15926: LD_INT 109
15928: PUSH
15929: LD_INT 110
15931: PUSH
15932: LD_INT 111
15934: PUSH
15935: LD_INT 112
15937: PUSH
15938: LD_INT 113
15940: PUSH
15941: LD_INT 114
15943: PUSH
15944: LD_INT 115
15946: PUSH
15947: LD_INT 116
15949: PUSH
15950: LD_INT 117
15952: PUSH
15953: LD_INT 118
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: ST_TO_ADDR
15980: GO 15983
15982: POP
// end else
15983: GO 16214
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15985: LD_ADDR_VAR 0 2
15989: PUSH
15990: LD_INT 1
15992: PUSH
15993: LD_INT 2
15995: PUSH
15996: LD_INT 3
15998: PUSH
15999: LD_INT 4
16001: PUSH
16002: LD_INT 5
16004: PUSH
16005: LD_INT 6
16007: PUSH
16008: LD_INT 7
16010: PUSH
16011: LD_INT 8
16013: PUSH
16014: LD_INT 9
16016: PUSH
16017: LD_INT 10
16019: PUSH
16020: LD_INT 11
16022: PUSH
16023: LD_INT 12
16025: PUSH
16026: LD_INT 13
16028: PUSH
16029: LD_INT 14
16031: PUSH
16032: LD_INT 15
16034: PUSH
16035: LD_INT 16
16037: PUSH
16038: LD_INT 17
16040: PUSH
16041: LD_INT 18
16043: PUSH
16044: LD_INT 19
16046: PUSH
16047: LD_INT 20
16049: PUSH
16050: LD_INT 21
16052: PUSH
16053: LD_INT 22
16055: PUSH
16056: LD_INT 23
16058: PUSH
16059: LD_INT 24
16061: PUSH
16062: LD_INT 25
16064: PUSH
16065: LD_INT 26
16067: PUSH
16068: LD_INT 27
16070: PUSH
16071: LD_INT 28
16073: PUSH
16074: LD_INT 29
16076: PUSH
16077: LD_INT 30
16079: PUSH
16080: LD_INT 31
16082: PUSH
16083: LD_INT 32
16085: PUSH
16086: LD_INT 33
16088: PUSH
16089: LD_INT 34
16091: PUSH
16092: LD_INT 35
16094: PUSH
16095: LD_INT 36
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 101
16138: PUSH
16139: LD_INT 102
16141: PUSH
16142: LD_INT 103
16144: PUSH
16145: LD_INT 104
16147: PUSH
16148: LD_INT 105
16150: PUSH
16151: LD_INT 106
16153: PUSH
16154: LD_INT 107
16156: PUSH
16157: LD_INT 108
16159: PUSH
16160: LD_INT 109
16162: PUSH
16163: LD_INT 110
16165: PUSH
16166: LD_INT 111
16168: PUSH
16169: LD_INT 112
16171: PUSH
16172: LD_INT 113
16174: PUSH
16175: LD_INT 114
16177: PUSH
16178: LD_INT 115
16180: PUSH
16181: LD_INT 116
16183: PUSH
16184: LD_INT 117
16186: PUSH
16187: LD_INT 118
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: ST_TO_ADDR
// if result then
16214: LD_VAR 0 2
16218: IFFALSE 17004
// begin normal :=  ;
16220: LD_ADDR_VAR 0 5
16224: PUSH
16225: LD_STRING 
16227: ST_TO_ADDR
// hardcore :=  ;
16228: LD_ADDR_VAR 0 6
16232: PUSH
16233: LD_STRING 
16235: ST_TO_ADDR
// active :=  ;
16236: LD_ADDR_VAR 0 7
16240: PUSH
16241: LD_STRING 
16243: ST_TO_ADDR
// for i = 1 to normalCounter do
16244: LD_ADDR_VAR 0 8
16248: PUSH
16249: DOUBLE
16250: LD_INT 1
16252: DEC
16253: ST_TO_ADDR
16254: LD_EXP 16
16258: PUSH
16259: FOR_TO
16260: IFFALSE 16361
// begin tmp := 0 ;
16262: LD_ADDR_VAR 0 3
16266: PUSH
16267: LD_STRING 0
16269: ST_TO_ADDR
// if result [ 1 ] then
16270: LD_VAR 0 2
16274: PUSH
16275: LD_INT 1
16277: ARRAY
16278: IFFALSE 16343
// if result [ 1 ] [ 1 ] = i then
16280: LD_VAR 0 2
16284: PUSH
16285: LD_INT 1
16287: ARRAY
16288: PUSH
16289: LD_INT 1
16291: ARRAY
16292: PUSH
16293: LD_VAR 0 8
16297: EQUAL
16298: IFFALSE 16343
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16300: LD_ADDR_VAR 0 2
16304: PUSH
16305: LD_VAR 0 2
16309: PPUSH
16310: LD_INT 1
16312: PPUSH
16313: LD_VAR 0 2
16317: PUSH
16318: LD_INT 1
16320: ARRAY
16321: PPUSH
16322: LD_INT 1
16324: PPUSH
16325: CALL_OW 3
16329: PPUSH
16330: CALL_OW 1
16334: ST_TO_ADDR
// tmp := 1 ;
16335: LD_ADDR_VAR 0 3
16339: PUSH
16340: LD_STRING 1
16342: ST_TO_ADDR
// end ; normal := normal & tmp ;
16343: LD_ADDR_VAR 0 5
16347: PUSH
16348: LD_VAR 0 5
16352: PUSH
16353: LD_VAR 0 3
16357: STR
16358: ST_TO_ADDR
// end ;
16359: GO 16259
16361: POP
16362: POP
// for i = 1 to hardcoreCounter do
16363: LD_ADDR_VAR 0 8
16367: PUSH
16368: DOUBLE
16369: LD_INT 1
16371: DEC
16372: ST_TO_ADDR
16373: LD_EXP 17
16377: PUSH
16378: FOR_TO
16379: IFFALSE 16484
// begin tmp := 0 ;
16381: LD_ADDR_VAR 0 3
16385: PUSH
16386: LD_STRING 0
16388: ST_TO_ADDR
// if result [ 2 ] then
16389: LD_VAR 0 2
16393: PUSH
16394: LD_INT 2
16396: ARRAY
16397: IFFALSE 16466
// if result [ 2 ] [ 1 ] = 100 + i then
16399: LD_VAR 0 2
16403: PUSH
16404: LD_INT 2
16406: ARRAY
16407: PUSH
16408: LD_INT 1
16410: ARRAY
16411: PUSH
16412: LD_INT 100
16414: PUSH
16415: LD_VAR 0 8
16419: PLUS
16420: EQUAL
16421: IFFALSE 16466
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16423: LD_ADDR_VAR 0 2
16427: PUSH
16428: LD_VAR 0 2
16432: PPUSH
16433: LD_INT 2
16435: PPUSH
16436: LD_VAR 0 2
16440: PUSH
16441: LD_INT 2
16443: ARRAY
16444: PPUSH
16445: LD_INT 1
16447: PPUSH
16448: CALL_OW 3
16452: PPUSH
16453: CALL_OW 1
16457: ST_TO_ADDR
// tmp := 1 ;
16458: LD_ADDR_VAR 0 3
16462: PUSH
16463: LD_STRING 1
16465: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16466: LD_ADDR_VAR 0 6
16470: PUSH
16471: LD_VAR 0 6
16475: PUSH
16476: LD_VAR 0 3
16480: STR
16481: ST_TO_ADDR
// end ;
16482: GO 16378
16484: POP
16485: POP
// if isGameLoad then
16486: LD_VAR 0 1
16490: IFFALSE 16965
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16492: LD_ADDR_VAR 0 4
16496: PUSH
16497: LD_EXP 20
16501: PUSH
16502: LD_EXP 19
16506: PUSH
16507: LD_EXP 21
16511: PUSH
16512: LD_EXP 18
16516: PUSH
16517: LD_EXP 22
16521: PUSH
16522: LD_EXP 23
16526: PUSH
16527: LD_EXP 24
16531: PUSH
16532: LD_EXP 25
16536: PUSH
16537: LD_EXP 26
16541: PUSH
16542: LD_EXP 27
16546: PUSH
16547: LD_EXP 28
16551: PUSH
16552: LD_EXP 29
16556: PUSH
16557: LD_EXP 30
16561: PUSH
16562: LD_EXP 31
16566: PUSH
16567: LD_EXP 39
16571: PUSH
16572: LD_EXP 40
16576: PUSH
16577: LD_EXP 41
16581: PUSH
16582: LD_EXP 42
16586: PUSH
16587: LD_EXP 44
16591: PUSH
16592: LD_EXP 45
16596: PUSH
16597: LD_EXP 46
16601: PUSH
16602: LD_EXP 49
16606: PUSH
16607: LD_EXP 51
16611: PUSH
16612: LD_EXP 52
16616: PUSH
16617: LD_EXP 53
16621: PUSH
16622: LD_EXP 55
16626: PUSH
16627: LD_EXP 56
16631: PUSH
16632: LD_EXP 59
16636: PUSH
16637: LD_EXP 60
16641: PUSH
16642: LD_EXP 61
16646: PUSH
16647: LD_EXP 62
16651: PUSH
16652: LD_EXP 63
16656: PUSH
16657: LD_EXP 64
16661: PUSH
16662: LD_EXP 65
16666: PUSH
16667: LD_EXP 66
16671: PUSH
16672: LD_EXP 67
16676: PUSH
16677: LD_EXP 32
16681: PUSH
16682: LD_EXP 33
16686: PUSH
16687: LD_EXP 36
16691: PUSH
16692: LD_EXP 37
16696: PUSH
16697: LD_EXP 38
16701: PUSH
16702: LD_EXP 34
16706: PUSH
16707: LD_EXP 35
16711: PUSH
16712: LD_EXP 43
16716: PUSH
16717: LD_EXP 47
16721: PUSH
16722: LD_EXP 48
16726: PUSH
16727: LD_EXP 50
16731: PUSH
16732: LD_EXP 54
16736: PUSH
16737: LD_EXP 57
16741: PUSH
16742: LD_EXP 58
16746: PUSH
16747: LD_EXP 68
16751: PUSH
16752: LD_EXP 69
16756: PUSH
16757: LD_EXP 70
16761: PUSH
16762: LD_EXP 71
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: ST_TO_ADDR
// tmp :=  ;
16823: LD_ADDR_VAR 0 3
16827: PUSH
16828: LD_STRING 
16830: ST_TO_ADDR
// for i = 1 to normalCounter do
16831: LD_ADDR_VAR 0 8
16835: PUSH
16836: DOUBLE
16837: LD_INT 1
16839: DEC
16840: ST_TO_ADDR
16841: LD_EXP 16
16845: PUSH
16846: FOR_TO
16847: IFFALSE 16883
// begin if flags [ i ] then
16849: LD_VAR 0 4
16853: PUSH
16854: LD_VAR 0 8
16858: ARRAY
16859: IFFALSE 16881
// tmp := tmp & i & ; ;
16861: LD_ADDR_VAR 0 3
16865: PUSH
16866: LD_VAR 0 3
16870: PUSH
16871: LD_VAR 0 8
16875: STR
16876: PUSH
16877: LD_STRING ;
16879: STR
16880: ST_TO_ADDR
// end ;
16881: GO 16846
16883: POP
16884: POP
// for i = 1 to hardcoreCounter do
16885: LD_ADDR_VAR 0 8
16889: PUSH
16890: DOUBLE
16891: LD_INT 1
16893: DEC
16894: ST_TO_ADDR
16895: LD_EXP 17
16899: PUSH
16900: FOR_TO
16901: IFFALSE 16947
// begin if flags [ normalCounter + i ] then
16903: LD_VAR 0 4
16907: PUSH
16908: LD_EXP 16
16912: PUSH
16913: LD_VAR 0 8
16917: PLUS
16918: ARRAY
16919: IFFALSE 16945
// tmp := tmp & ( 100 + i ) & ; ;
16921: LD_ADDR_VAR 0 3
16925: PUSH
16926: LD_VAR 0 3
16930: PUSH
16931: LD_INT 100
16933: PUSH
16934: LD_VAR 0 8
16938: PLUS
16939: STR
16940: PUSH
16941: LD_STRING ;
16943: STR
16944: ST_TO_ADDR
// end ;
16945: GO 16900
16947: POP
16948: POP
// if tmp then
16949: LD_VAR 0 3
16953: IFFALSE 16965
// active := tmp ;
16955: LD_ADDR_VAR 0 7
16959: PUSH
16960: LD_VAR 0 3
16964: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16965: LD_STRING getStreamItemsFromMission("
16967: PUSH
16968: LD_VAR 0 5
16972: STR
16973: PUSH
16974: LD_STRING ","
16976: STR
16977: PUSH
16978: LD_VAR 0 6
16982: STR
16983: PUSH
16984: LD_STRING ","
16986: STR
16987: PUSH
16988: LD_VAR 0 7
16992: STR
16993: PUSH
16994: LD_STRING ")
16996: STR
16997: PPUSH
16998: CALL_OW 559
// end else
17002: GO 17011
// ToLua ( getStreamItemsFromMission("","","") ) ;
17004: LD_STRING getStreamItemsFromMission("","","")
17006: PPUSH
17007: CALL_OW 559
// end ;
17011: LD_VAR 0 2
17015: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17016: LD_EXP 15
17020: PUSH
17021: LD_EXP 20
17025: AND
17026: IFFALSE 17150
17028: GO 17030
17030: DISABLE
17031: LD_INT 0
17033: PPUSH
17034: PPUSH
// begin enable ;
17035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17036: LD_ADDR_VAR 0 2
17040: PUSH
17041: LD_INT 22
17043: PUSH
17044: LD_OWVAR 2
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: LD_INT 34
17058: PUSH
17059: LD_INT 7
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 34
17068: PUSH
17069: LD_INT 45
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 34
17078: PUSH
17079: LD_INT 28
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 34
17088: PUSH
17089: LD_INT 47
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PPUSH
17107: CALL_OW 69
17111: ST_TO_ADDR
// if not tmp then
17112: LD_VAR 0 2
17116: NOT
17117: IFFALSE 17121
// exit ;
17119: GO 17150
// for i in tmp do
17121: LD_ADDR_VAR 0 1
17125: PUSH
17126: LD_VAR 0 2
17130: PUSH
17131: FOR_IN
17132: IFFALSE 17148
// begin SetLives ( i , 0 ) ;
17134: LD_VAR 0 1
17138: PPUSH
17139: LD_INT 0
17141: PPUSH
17142: CALL_OW 234
// end ;
17146: GO 17131
17148: POP
17149: POP
// end ;
17150: PPOPN 2
17152: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17153: LD_EXP 15
17157: PUSH
17158: LD_EXP 21
17162: AND
17163: IFFALSE 17247
17165: GO 17167
17167: DISABLE
17168: LD_INT 0
17170: PPUSH
17171: PPUSH
// begin enable ;
17172: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17173: LD_ADDR_VAR 0 2
17177: PUSH
17178: LD_INT 22
17180: PUSH
17181: LD_OWVAR 2
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 32
17192: PUSH
17193: LD_INT 3
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PPUSH
17204: CALL_OW 69
17208: ST_TO_ADDR
// if not tmp then
17209: LD_VAR 0 2
17213: NOT
17214: IFFALSE 17218
// exit ;
17216: GO 17247
// for i in tmp do
17218: LD_ADDR_VAR 0 1
17222: PUSH
17223: LD_VAR 0 2
17227: PUSH
17228: FOR_IN
17229: IFFALSE 17245
// begin SetLives ( i , 0 ) ;
17231: LD_VAR 0 1
17235: PPUSH
17236: LD_INT 0
17238: PPUSH
17239: CALL_OW 234
// end ;
17243: GO 17228
17245: POP
17246: POP
// end ;
17247: PPOPN 2
17249: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17250: LD_EXP 15
17254: PUSH
17255: LD_EXP 18
17259: AND
17260: IFFALSE 17353
17262: GO 17264
17264: DISABLE
17265: LD_INT 0
17267: PPUSH
// begin enable ;
17268: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17269: LD_ADDR_VAR 0 1
17273: PUSH
17274: LD_INT 22
17276: PUSH
17277: LD_OWVAR 2
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 2
17288: PUSH
17289: LD_INT 25
17291: PUSH
17292: LD_INT 5
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 25
17301: PUSH
17302: LD_INT 9
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 25
17311: PUSH
17312: LD_INT 8
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PPUSH
17329: CALL_OW 69
17333: PUSH
17334: FOR_IN
17335: IFFALSE 17351
// begin SetClass ( i , 1 ) ;
17337: LD_VAR 0 1
17341: PPUSH
17342: LD_INT 1
17344: PPUSH
17345: CALL_OW 336
// end ;
17349: GO 17334
17351: POP
17352: POP
// end ;
17353: PPOPN 1
17355: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17356: LD_EXP 15
17360: PUSH
17361: LD_EXP 19
17365: AND
17366: PUSH
17367: LD_OWVAR 65
17371: PUSH
17372: LD_INT 7
17374: LESS
17375: AND
17376: IFFALSE 17390
17378: GO 17380
17380: DISABLE
// begin enable ;
17381: ENABLE
// game_speed := 7 ;
17382: LD_ADDR_OWVAR 65
17386: PUSH
17387: LD_INT 7
17389: ST_TO_ADDR
// end ;
17390: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17391: LD_EXP 15
17395: PUSH
17396: LD_EXP 22
17400: AND
17401: IFFALSE 17603
17403: GO 17405
17405: DISABLE
17406: LD_INT 0
17408: PPUSH
17409: PPUSH
17410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17411: LD_ADDR_VAR 0 3
17415: PUSH
17416: LD_INT 81
17418: PUSH
17419: LD_OWVAR 2
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 21
17430: PUSH
17431: LD_INT 1
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PPUSH
17442: CALL_OW 69
17446: ST_TO_ADDR
// if not tmp then
17447: LD_VAR 0 3
17451: NOT
17452: IFFALSE 17456
// exit ;
17454: GO 17603
// if tmp > 5 then
17456: LD_VAR 0 3
17460: PUSH
17461: LD_INT 5
17463: GREATER
17464: IFFALSE 17476
// k := 5 else
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: LD_INT 5
17473: ST_TO_ADDR
17474: GO 17486
// k := tmp ;
17476: LD_ADDR_VAR 0 2
17480: PUSH
17481: LD_VAR 0 3
17485: ST_TO_ADDR
// for i := 1 to k do
17486: LD_ADDR_VAR 0 1
17490: PUSH
17491: DOUBLE
17492: LD_INT 1
17494: DEC
17495: ST_TO_ADDR
17496: LD_VAR 0 2
17500: PUSH
17501: FOR_TO
17502: IFFALSE 17601
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17504: LD_VAR 0 3
17508: PUSH
17509: LD_VAR 0 1
17513: ARRAY
17514: PPUSH
17515: LD_VAR 0 1
17519: PUSH
17520: LD_INT 4
17522: MOD
17523: PUSH
17524: LD_INT 1
17526: PLUS
17527: PPUSH
17528: CALL_OW 259
17532: PUSH
17533: LD_INT 10
17535: LESS
17536: IFFALSE 17599
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17538: LD_VAR 0 3
17542: PUSH
17543: LD_VAR 0 1
17547: ARRAY
17548: PPUSH
17549: LD_VAR 0 1
17553: PUSH
17554: LD_INT 4
17556: MOD
17557: PUSH
17558: LD_INT 1
17560: PLUS
17561: PPUSH
17562: LD_VAR 0 3
17566: PUSH
17567: LD_VAR 0 1
17571: ARRAY
17572: PPUSH
17573: LD_VAR 0 1
17577: PUSH
17578: LD_INT 4
17580: MOD
17581: PUSH
17582: LD_INT 1
17584: PLUS
17585: PPUSH
17586: CALL_OW 259
17590: PUSH
17591: LD_INT 1
17593: PLUS
17594: PPUSH
17595: CALL_OW 237
17599: GO 17501
17601: POP
17602: POP
// end ;
17603: PPOPN 3
17605: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17606: LD_EXP 15
17610: PUSH
17611: LD_EXP 23
17615: AND
17616: IFFALSE 17636
17618: GO 17620
17620: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17621: LD_INT 4
17623: PPUSH
17624: LD_OWVAR 2
17628: PPUSH
17629: LD_INT 0
17631: PPUSH
17632: CALL_OW 324
17636: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17637: LD_EXP 15
17641: PUSH
17642: LD_EXP 52
17646: AND
17647: IFFALSE 17667
17649: GO 17651
17651: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17652: LD_INT 19
17654: PPUSH
17655: LD_OWVAR 2
17659: PPUSH
17660: LD_INT 0
17662: PPUSH
17663: CALL_OW 324
17667: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17668: LD_EXP 15
17672: PUSH
17673: LD_EXP 24
17677: AND
17678: IFFALSE 17780
17680: GO 17682
17682: DISABLE
17683: LD_INT 0
17685: PPUSH
17686: PPUSH
// begin enable ;
17687: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17688: LD_ADDR_VAR 0 2
17692: PUSH
17693: LD_INT 22
17695: PUSH
17696: LD_OWVAR 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 2
17707: PUSH
17708: LD_INT 34
17710: PUSH
17711: LD_INT 11
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 34
17720: PUSH
17721: LD_INT 30
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL_OW 69
17741: ST_TO_ADDR
// if not tmp then
17742: LD_VAR 0 2
17746: NOT
17747: IFFALSE 17751
// exit ;
17749: GO 17780
// for i in tmp do
17751: LD_ADDR_VAR 0 1
17755: PUSH
17756: LD_VAR 0 2
17760: PUSH
17761: FOR_IN
17762: IFFALSE 17778
// begin SetLives ( i , 0 ) ;
17764: LD_VAR 0 1
17768: PPUSH
17769: LD_INT 0
17771: PPUSH
17772: CALL_OW 234
// end ;
17776: GO 17761
17778: POP
17779: POP
// end ;
17780: PPOPN 2
17782: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17783: LD_EXP 15
17787: PUSH
17788: LD_EXP 25
17792: AND
17793: IFFALSE 17813
17795: GO 17797
17797: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17798: LD_INT 32
17800: PPUSH
17801: LD_OWVAR 2
17805: PPUSH
17806: LD_INT 0
17808: PPUSH
17809: CALL_OW 324
17813: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17814: LD_EXP 15
17818: PUSH
17819: LD_EXP 26
17823: AND
17824: IFFALSE 18005
17826: GO 17828
17828: DISABLE
17829: LD_INT 0
17831: PPUSH
17832: PPUSH
17833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17834: LD_ADDR_VAR 0 2
17838: PUSH
17839: LD_INT 22
17841: PUSH
17842: LD_OWVAR 2
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 33
17853: PUSH
17854: LD_INT 3
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PPUSH
17865: CALL_OW 69
17869: ST_TO_ADDR
// if not tmp then
17870: LD_VAR 0 2
17874: NOT
17875: IFFALSE 17879
// exit ;
17877: GO 18005
// side := 0 ;
17879: LD_ADDR_VAR 0 3
17883: PUSH
17884: LD_INT 0
17886: ST_TO_ADDR
// for i := 1 to 8 do
17887: LD_ADDR_VAR 0 1
17891: PUSH
17892: DOUBLE
17893: LD_INT 1
17895: DEC
17896: ST_TO_ADDR
17897: LD_INT 8
17899: PUSH
17900: FOR_TO
17901: IFFALSE 17949
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17903: LD_OWVAR 2
17907: PUSH
17908: LD_VAR 0 1
17912: NONEQUAL
17913: PUSH
17914: LD_OWVAR 2
17918: PPUSH
17919: LD_VAR 0 1
17923: PPUSH
17924: CALL_OW 81
17928: PUSH
17929: LD_INT 2
17931: EQUAL
17932: AND
17933: IFFALSE 17947
// begin side := i ;
17935: LD_ADDR_VAR 0 3
17939: PUSH
17940: LD_VAR 0 1
17944: ST_TO_ADDR
// break ;
17945: GO 17949
// end ;
17947: GO 17900
17949: POP
17950: POP
// if not side then
17951: LD_VAR 0 3
17955: NOT
17956: IFFALSE 17960
// exit ;
17958: GO 18005
// for i := 1 to tmp do
17960: LD_ADDR_VAR 0 1
17964: PUSH
17965: DOUBLE
17966: LD_INT 1
17968: DEC
17969: ST_TO_ADDR
17970: LD_VAR 0 2
17974: PUSH
17975: FOR_TO
17976: IFFALSE 18003
// if Prob ( 60 ) then
17978: LD_INT 60
17980: PPUSH
17981: CALL_OW 13
17985: IFFALSE 18001
// SetSide ( i , side ) ;
17987: LD_VAR 0 1
17991: PPUSH
17992: LD_VAR 0 3
17996: PPUSH
17997: CALL_OW 235
18001: GO 17975
18003: POP
18004: POP
// end ;
18005: PPOPN 3
18007: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18008: LD_EXP 15
18012: PUSH
18013: LD_EXP 28
18017: AND
18018: IFFALSE 18137
18020: GO 18022
18022: DISABLE
18023: LD_INT 0
18025: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18026: LD_ADDR_VAR 0 1
18030: PUSH
18031: LD_INT 22
18033: PUSH
18034: LD_OWVAR 2
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 21
18045: PUSH
18046: LD_INT 1
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: LD_INT 23
18058: PUSH
18059: LD_INT 0
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: PPUSH
18075: CALL_OW 69
18079: PUSH
18080: FOR_IN
18081: IFFALSE 18135
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18083: LD_VAR 0 1
18087: PPUSH
18088: CALL_OW 257
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: LD_INT 2
18098: PUSH
18099: LD_INT 3
18101: PUSH
18102: LD_INT 4
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: IN
18111: IFFALSE 18133
// SetClass ( un , rand ( 1 , 4 ) ) ;
18113: LD_VAR 0 1
18117: PPUSH
18118: LD_INT 1
18120: PPUSH
18121: LD_INT 4
18123: PPUSH
18124: CALL_OW 12
18128: PPUSH
18129: CALL_OW 336
18133: GO 18080
18135: POP
18136: POP
// end ;
18137: PPOPN 1
18139: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18140: LD_EXP 15
18144: PUSH
18145: LD_EXP 27
18149: AND
18150: IFFALSE 18229
18152: GO 18154
18154: DISABLE
18155: LD_INT 0
18157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18158: LD_ADDR_VAR 0 1
18162: PUSH
18163: LD_INT 22
18165: PUSH
18166: LD_OWVAR 2
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 21
18177: PUSH
18178: LD_INT 3
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PPUSH
18189: CALL_OW 69
18193: ST_TO_ADDR
// if not tmp then
18194: LD_VAR 0 1
18198: NOT
18199: IFFALSE 18203
// exit ;
18201: GO 18229
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18203: LD_VAR 0 1
18207: PUSH
18208: LD_INT 1
18210: PPUSH
18211: LD_VAR 0 1
18215: PPUSH
18216: CALL_OW 12
18220: ARRAY
18221: PPUSH
18222: LD_INT 100
18224: PPUSH
18225: CALL_OW 234
// end ;
18229: PPOPN 1
18231: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18232: LD_EXP 15
18236: PUSH
18237: LD_EXP 29
18241: AND
18242: IFFALSE 18340
18244: GO 18246
18246: DISABLE
18247: LD_INT 0
18249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_OWVAR 2
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 21
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PPUSH
18281: CALL_OW 69
18285: ST_TO_ADDR
// if not tmp then
18286: LD_VAR 0 1
18290: NOT
18291: IFFALSE 18295
// exit ;
18293: GO 18340
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18295: LD_VAR 0 1
18299: PUSH
18300: LD_INT 1
18302: PPUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 12
18312: ARRAY
18313: PPUSH
18314: LD_INT 1
18316: PPUSH
18317: LD_INT 4
18319: PPUSH
18320: CALL_OW 12
18324: PPUSH
18325: LD_INT 3000
18327: PPUSH
18328: LD_INT 9000
18330: PPUSH
18331: CALL_OW 12
18335: PPUSH
18336: CALL_OW 492
// end ;
18340: PPOPN 1
18342: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18343: LD_EXP 15
18347: PUSH
18348: LD_EXP 30
18352: AND
18353: IFFALSE 18373
18355: GO 18357
18357: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18358: LD_INT 1
18360: PPUSH
18361: LD_OWVAR 2
18365: PPUSH
18366: LD_INT 0
18368: PPUSH
18369: CALL_OW 324
18373: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18374: LD_EXP 15
18378: PUSH
18379: LD_EXP 31
18383: AND
18384: IFFALSE 18467
18386: GO 18388
18388: DISABLE
18389: LD_INT 0
18391: PPUSH
18392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18393: LD_ADDR_VAR 0 2
18397: PUSH
18398: LD_INT 22
18400: PUSH
18401: LD_OWVAR 2
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 21
18412: PUSH
18413: LD_INT 3
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PPUSH
18424: CALL_OW 69
18428: ST_TO_ADDR
// if not tmp then
18429: LD_VAR 0 2
18433: NOT
18434: IFFALSE 18438
// exit ;
18436: GO 18467
// for i in tmp do
18438: LD_ADDR_VAR 0 1
18442: PUSH
18443: LD_VAR 0 2
18447: PUSH
18448: FOR_IN
18449: IFFALSE 18465
// SetBLevel ( i , 10 ) ;
18451: LD_VAR 0 1
18455: PPUSH
18456: LD_INT 10
18458: PPUSH
18459: CALL_OW 241
18463: GO 18448
18465: POP
18466: POP
// end ;
18467: PPOPN 2
18469: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18470: LD_EXP 15
18474: PUSH
18475: LD_EXP 32
18479: AND
18480: IFFALSE 18591
18482: GO 18484
18484: DISABLE
18485: LD_INT 0
18487: PPUSH
18488: PPUSH
18489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18490: LD_ADDR_VAR 0 3
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_OWVAR 2
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 25
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PPUSH
18521: CALL_OW 69
18525: ST_TO_ADDR
// if not tmp then
18526: LD_VAR 0 3
18530: NOT
18531: IFFALSE 18535
// exit ;
18533: GO 18591
// un := tmp [ rand ( 1 , tmp ) ] ;
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_VAR 0 3
18544: PUSH
18545: LD_INT 1
18547: PPUSH
18548: LD_VAR 0 3
18552: PPUSH
18553: CALL_OW 12
18557: ARRAY
18558: ST_TO_ADDR
// if Crawls ( un ) then
18559: LD_VAR 0 2
18563: PPUSH
18564: CALL_OW 318
18568: IFFALSE 18579
// ComWalk ( un ) ;
18570: LD_VAR 0 2
18574: PPUSH
18575: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18579: LD_VAR 0 2
18583: PPUSH
18584: LD_INT 5
18586: PPUSH
18587: CALL_OW 336
// end ;
18591: PPOPN 3
18593: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18594: LD_EXP 15
18598: PUSH
18599: LD_EXP 33
18603: AND
18604: PUSH
18605: LD_OWVAR 67
18609: PUSH
18610: LD_INT 4
18612: LESS
18613: AND
18614: IFFALSE 18633
18616: GO 18618
18618: DISABLE
// begin Difficulty := Difficulty + 1 ;
18619: LD_ADDR_OWVAR 67
18623: PUSH
18624: LD_OWVAR 67
18628: PUSH
18629: LD_INT 1
18631: PLUS
18632: ST_TO_ADDR
// end ;
18633: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18634: LD_EXP 15
18638: PUSH
18639: LD_EXP 34
18643: AND
18644: IFFALSE 18747
18646: GO 18648
18648: DISABLE
18649: LD_INT 0
18651: PPUSH
// begin for i := 1 to 5 do
18652: LD_ADDR_VAR 0 1
18656: PUSH
18657: DOUBLE
18658: LD_INT 1
18660: DEC
18661: ST_TO_ADDR
18662: LD_INT 5
18664: PUSH
18665: FOR_TO
18666: IFFALSE 18745
// begin uc_nation := nation_nature ;
18668: LD_ADDR_OWVAR 21
18672: PUSH
18673: LD_INT 0
18675: ST_TO_ADDR
// uc_side := 0 ;
18676: LD_ADDR_OWVAR 20
18680: PUSH
18681: LD_INT 0
18683: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18684: LD_ADDR_OWVAR 29
18688: PUSH
18689: LD_INT 12
18691: PUSH
18692: LD_INT 12
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: ST_TO_ADDR
// hc_agressivity := 20 ;
18699: LD_ADDR_OWVAR 35
18703: PUSH
18704: LD_INT 20
18706: ST_TO_ADDR
// hc_class := class_tiger ;
18707: LD_ADDR_OWVAR 28
18711: PUSH
18712: LD_INT 14
18714: ST_TO_ADDR
// hc_gallery :=  ;
18715: LD_ADDR_OWVAR 33
18719: PUSH
18720: LD_STRING 
18722: ST_TO_ADDR
// hc_name :=  ;
18723: LD_ADDR_OWVAR 26
18727: PUSH
18728: LD_STRING 
18730: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18731: CALL_OW 44
18735: PPUSH
18736: LD_INT 0
18738: PPUSH
18739: CALL_OW 51
// end ;
18743: GO 18665
18745: POP
18746: POP
// end ;
18747: PPOPN 1
18749: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18750: LD_EXP 15
18754: PUSH
18755: LD_EXP 35
18759: AND
18760: IFFALSE 18769
18762: GO 18764
18764: DISABLE
// StreamSibBomb ;
18765: CALL 18770 0 0
18769: END
// export function StreamSibBomb ; var i , x , y ; begin
18770: LD_INT 0
18772: PPUSH
18773: PPUSH
18774: PPUSH
18775: PPUSH
// result := false ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_INT 0
18783: ST_TO_ADDR
// for i := 1 to 16 do
18784: LD_ADDR_VAR 0 2
18788: PUSH
18789: DOUBLE
18790: LD_INT 1
18792: DEC
18793: ST_TO_ADDR
18794: LD_INT 16
18796: PUSH
18797: FOR_TO
18798: IFFALSE 18997
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18800: LD_ADDR_VAR 0 3
18804: PUSH
18805: LD_INT 10
18807: PUSH
18808: LD_INT 20
18810: PUSH
18811: LD_INT 30
18813: PUSH
18814: LD_INT 40
18816: PUSH
18817: LD_INT 50
18819: PUSH
18820: LD_INT 60
18822: PUSH
18823: LD_INT 70
18825: PUSH
18826: LD_INT 80
18828: PUSH
18829: LD_INT 90
18831: PUSH
18832: LD_INT 100
18834: PUSH
18835: LD_INT 110
18837: PUSH
18838: LD_INT 120
18840: PUSH
18841: LD_INT 130
18843: PUSH
18844: LD_INT 140
18846: PUSH
18847: LD_INT 150
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_INT 15
18872: PPUSH
18873: CALL_OW 12
18877: ARRAY
18878: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18879: LD_ADDR_VAR 0 4
18883: PUSH
18884: LD_INT 10
18886: PUSH
18887: LD_INT 20
18889: PUSH
18890: LD_INT 30
18892: PUSH
18893: LD_INT 40
18895: PUSH
18896: LD_INT 50
18898: PUSH
18899: LD_INT 60
18901: PUSH
18902: LD_INT 70
18904: PUSH
18905: LD_INT 80
18907: PUSH
18908: LD_INT 90
18910: PUSH
18911: LD_INT 100
18913: PUSH
18914: LD_INT 110
18916: PUSH
18917: LD_INT 120
18919: PUSH
18920: LD_INT 130
18922: PUSH
18923: LD_INT 140
18925: PUSH
18926: LD_INT 150
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 1
18948: PPUSH
18949: LD_INT 15
18951: PPUSH
18952: CALL_OW 12
18956: ARRAY
18957: ST_TO_ADDR
// if ValidHex ( x , y ) then
18958: LD_VAR 0 3
18962: PPUSH
18963: LD_VAR 0 4
18967: PPUSH
18968: CALL_OW 488
18972: IFFALSE 18995
// begin result := [ x , y ] ;
18974: LD_ADDR_VAR 0 1
18978: PUSH
18979: LD_VAR 0 3
18983: PUSH
18984: LD_VAR 0 4
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: ST_TO_ADDR
// break ;
18993: GO 18997
// end ; end ;
18995: GO 18797
18997: POP
18998: POP
// if result then
18999: LD_VAR 0 1
19003: IFFALSE 19063
// begin ToLua ( playSibBomb() ) ;
19005: LD_STRING playSibBomb()
19007: PPUSH
19008: CALL_OW 559
// wait ( 0 0$14 ) ;
19012: LD_INT 490
19014: PPUSH
19015: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19019: LD_VAR 0 1
19023: PUSH
19024: LD_INT 1
19026: ARRAY
19027: PPUSH
19028: LD_VAR 0 1
19032: PUSH
19033: LD_INT 2
19035: ARRAY
19036: PPUSH
19037: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19041: LD_VAR 0 1
19045: PUSH
19046: LD_INT 1
19048: ARRAY
19049: PPUSH
19050: LD_VAR 0 1
19054: PUSH
19055: LD_INT 2
19057: ARRAY
19058: PPUSH
19059: CALL_OW 429
// end ; end ;
19063: LD_VAR 0 1
19067: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19068: LD_EXP 15
19072: PUSH
19073: LD_EXP 37
19077: AND
19078: IFFALSE 19090
19080: GO 19082
19082: DISABLE
// YouLost (  ) ;
19083: LD_STRING 
19085: PPUSH
19086: CALL_OW 104
19090: END
// every 0 0$1 trigger StreamModeActive and sFog do
19091: LD_EXP 15
19095: PUSH
19096: LD_EXP 36
19100: AND
19101: IFFALSE 19115
19103: GO 19105
19105: DISABLE
// FogOff ( your_side ) ;
19106: LD_OWVAR 2
19110: PPUSH
19111: CALL_OW 344
19115: END
// every 0 0$1 trigger StreamModeActive and sSun do
19116: LD_EXP 15
19120: PUSH
19121: LD_EXP 38
19125: AND
19126: IFFALSE 19154
19128: GO 19130
19130: DISABLE
// begin solar_recharge_percent := 0 ;
19131: LD_ADDR_OWVAR 79
19135: PUSH
19136: LD_INT 0
19138: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19139: LD_INT 10500
19141: PPUSH
19142: CALL_OW 67
// solar_recharge_percent := 100 ;
19146: LD_ADDR_OWVAR 79
19150: PUSH
19151: LD_INT 100
19153: ST_TO_ADDR
// end ;
19154: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19155: LD_EXP 15
19159: PUSH
19160: LD_EXP 39
19164: AND
19165: IFFALSE 19404
19167: GO 19169
19169: DISABLE
19170: LD_INT 0
19172: PPUSH
19173: PPUSH
19174: PPUSH
// begin tmp := [ ] ;
19175: LD_ADDR_VAR 0 3
19179: PUSH
19180: EMPTY
19181: ST_TO_ADDR
// for i := 1 to 6 do
19182: LD_ADDR_VAR 0 1
19186: PUSH
19187: DOUBLE
19188: LD_INT 1
19190: DEC
19191: ST_TO_ADDR
19192: LD_INT 6
19194: PUSH
19195: FOR_TO
19196: IFFALSE 19301
// begin uc_nation := nation_nature ;
19198: LD_ADDR_OWVAR 21
19202: PUSH
19203: LD_INT 0
19205: ST_TO_ADDR
// uc_side := 0 ;
19206: LD_ADDR_OWVAR 20
19210: PUSH
19211: LD_INT 0
19213: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19214: LD_ADDR_OWVAR 29
19218: PUSH
19219: LD_INT 12
19221: PUSH
19222: LD_INT 12
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: ST_TO_ADDR
// hc_agressivity := 20 ;
19229: LD_ADDR_OWVAR 35
19233: PUSH
19234: LD_INT 20
19236: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19237: LD_ADDR_OWVAR 28
19241: PUSH
19242: LD_INT 17
19244: ST_TO_ADDR
// hc_gallery :=  ;
19245: LD_ADDR_OWVAR 33
19249: PUSH
19250: LD_STRING 
19252: ST_TO_ADDR
// hc_name :=  ;
19253: LD_ADDR_OWVAR 26
19257: PUSH
19258: LD_STRING 
19260: ST_TO_ADDR
// un := CreateHuman ;
19261: LD_ADDR_VAR 0 2
19265: PUSH
19266: CALL_OW 44
19270: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19271: LD_VAR 0 2
19275: PPUSH
19276: LD_INT 1
19278: PPUSH
19279: CALL_OW 51
// tmp := tmp ^ un ;
19283: LD_ADDR_VAR 0 3
19287: PUSH
19288: LD_VAR 0 3
19292: PUSH
19293: LD_VAR 0 2
19297: ADD
19298: ST_TO_ADDR
// end ;
19299: GO 19195
19301: POP
19302: POP
// repeat wait ( 0 0$1 ) ;
19303: LD_INT 35
19305: PPUSH
19306: CALL_OW 67
// for un in tmp do
19310: LD_ADDR_VAR 0 2
19314: PUSH
19315: LD_VAR 0 3
19319: PUSH
19320: FOR_IN
19321: IFFALSE 19395
// begin if IsDead ( un ) then
19323: LD_VAR 0 2
19327: PPUSH
19328: CALL_OW 301
19332: IFFALSE 19352
// begin tmp := tmp diff un ;
19334: LD_ADDR_VAR 0 3
19338: PUSH
19339: LD_VAR 0 3
19343: PUSH
19344: LD_VAR 0 2
19348: DIFF
19349: ST_TO_ADDR
// continue ;
19350: GO 19320
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19352: LD_VAR 0 2
19356: PPUSH
19357: LD_INT 3
19359: PUSH
19360: LD_INT 22
19362: PUSH
19363: LD_INT 0
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PPUSH
19374: CALL_OW 69
19378: PPUSH
19379: LD_VAR 0 2
19383: PPUSH
19384: CALL_OW 74
19388: PPUSH
19389: CALL_OW 115
// end ;
19393: GO 19320
19395: POP
19396: POP
// until not tmp ;
19397: LD_VAR 0 3
19401: NOT
19402: IFFALSE 19303
// end ;
19404: PPOPN 3
19406: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19407: LD_EXP 15
19411: PUSH
19412: LD_EXP 40
19416: AND
19417: IFFALSE 19471
19419: GO 19421
19421: DISABLE
// begin ToLua ( displayTroll(); ) ;
19422: LD_STRING displayTroll();
19424: PPUSH
19425: CALL_OW 559
// wait ( 3 3$00 ) ;
19429: LD_INT 6300
19431: PPUSH
19432: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19436: LD_STRING hideTroll();
19438: PPUSH
19439: CALL_OW 559
// wait ( 1 1$00 ) ;
19443: LD_INT 2100
19445: PPUSH
19446: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19450: LD_STRING displayTroll();
19452: PPUSH
19453: CALL_OW 559
// wait ( 1 1$00 ) ;
19457: LD_INT 2100
19459: PPUSH
19460: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19464: LD_STRING hideTroll();
19466: PPUSH
19467: CALL_OW 559
// end ;
19471: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19472: LD_EXP 15
19476: PUSH
19477: LD_EXP 41
19481: AND
19482: IFFALSE 19545
19484: GO 19486
19486: DISABLE
19487: LD_INT 0
19489: PPUSH
// begin p := 0 ;
19490: LD_ADDR_VAR 0 1
19494: PUSH
19495: LD_INT 0
19497: ST_TO_ADDR
// repeat game_speed := 1 ;
19498: LD_ADDR_OWVAR 65
19502: PUSH
19503: LD_INT 1
19505: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19506: LD_INT 35
19508: PPUSH
19509: CALL_OW 67
// p := p + 1 ;
19513: LD_ADDR_VAR 0 1
19517: PUSH
19518: LD_VAR 0 1
19522: PUSH
19523: LD_INT 1
19525: PLUS
19526: ST_TO_ADDR
// until p >= 60 ;
19527: LD_VAR 0 1
19531: PUSH
19532: LD_INT 60
19534: GREATEREQUAL
19535: IFFALSE 19498
// game_speed := 4 ;
19537: LD_ADDR_OWVAR 65
19541: PUSH
19542: LD_INT 4
19544: ST_TO_ADDR
// end ;
19545: PPOPN 1
19547: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19548: LD_EXP 15
19552: PUSH
19553: LD_EXP 42
19557: AND
19558: IFFALSE 19704
19560: GO 19562
19562: DISABLE
19563: LD_INT 0
19565: PPUSH
19566: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19567: LD_ADDR_VAR 0 1
19571: PUSH
19572: LD_INT 22
19574: PUSH
19575: LD_OWVAR 2
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 2
19586: PUSH
19587: LD_INT 30
19589: PUSH
19590: LD_INT 0
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 30
19599: PUSH
19600: LD_INT 1
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: ST_TO_ADDR
// if not depot then
19621: LD_VAR 0 1
19625: NOT
19626: IFFALSE 19630
// exit ;
19628: GO 19704
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19630: LD_ADDR_VAR 0 2
19634: PUSH
19635: LD_VAR 0 1
19639: PUSH
19640: LD_INT 1
19642: PPUSH
19643: LD_VAR 0 1
19647: PPUSH
19648: CALL_OW 12
19652: ARRAY
19653: PPUSH
19654: CALL_OW 274
19658: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19659: LD_VAR 0 2
19663: PPUSH
19664: LD_INT 1
19666: PPUSH
19667: LD_INT 0
19669: PPUSH
19670: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19674: LD_VAR 0 2
19678: PPUSH
19679: LD_INT 2
19681: PPUSH
19682: LD_INT 0
19684: PPUSH
19685: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19689: LD_VAR 0 2
19693: PPUSH
19694: LD_INT 3
19696: PPUSH
19697: LD_INT 0
19699: PPUSH
19700: CALL_OW 277
// end ;
19704: PPOPN 2
19706: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19707: LD_EXP 15
19711: PUSH
19712: LD_EXP 43
19716: AND
19717: IFFALSE 19814
19719: GO 19721
19721: DISABLE
19722: LD_INT 0
19724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19725: LD_ADDR_VAR 0 1
19729: PUSH
19730: LD_INT 22
19732: PUSH
19733: LD_OWVAR 2
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 21
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 3
19754: PUSH
19755: LD_INT 23
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: LIST
19773: PPUSH
19774: CALL_OW 69
19778: ST_TO_ADDR
// if not tmp then
19779: LD_VAR 0 1
19783: NOT
19784: IFFALSE 19788
// exit ;
19786: GO 19814
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19788: LD_VAR 0 1
19792: PUSH
19793: LD_INT 1
19795: PPUSH
19796: LD_VAR 0 1
19800: PPUSH
19801: CALL_OW 12
19805: ARRAY
19806: PPUSH
19807: LD_INT 200
19809: PPUSH
19810: CALL_OW 234
// end ;
19814: PPOPN 1
19816: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19817: LD_EXP 15
19821: PUSH
19822: LD_EXP 44
19826: AND
19827: IFFALSE 19906
19829: GO 19831
19831: DISABLE
19832: LD_INT 0
19834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19835: LD_ADDR_VAR 0 1
19839: PUSH
19840: LD_INT 22
19842: PUSH
19843: LD_OWVAR 2
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 21
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PPUSH
19866: CALL_OW 69
19870: ST_TO_ADDR
// if not tmp then
19871: LD_VAR 0 1
19875: NOT
19876: IFFALSE 19880
// exit ;
19878: GO 19906
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19880: LD_VAR 0 1
19884: PUSH
19885: LD_INT 1
19887: PPUSH
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 12
19897: ARRAY
19898: PPUSH
19899: LD_INT 60
19901: PPUSH
19902: CALL_OW 234
// end ;
19906: PPOPN 1
19908: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19909: LD_EXP 15
19913: PUSH
19914: LD_EXP 45
19918: AND
19919: IFFALSE 20018
19921: GO 19923
19923: DISABLE
19924: LD_INT 0
19926: PPUSH
19927: PPUSH
// begin enable ;
19928: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19929: LD_ADDR_VAR 0 1
19933: PUSH
19934: LD_INT 22
19936: PUSH
19937: LD_OWVAR 2
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 61
19948: PUSH
19949: EMPTY
19950: LIST
19951: PUSH
19952: LD_INT 33
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: LIST
19966: PPUSH
19967: CALL_OW 69
19971: ST_TO_ADDR
// if not tmp then
19972: LD_VAR 0 1
19976: NOT
19977: IFFALSE 19981
// exit ;
19979: GO 20018
// for i in tmp do
19981: LD_ADDR_VAR 0 2
19985: PUSH
19986: LD_VAR 0 1
19990: PUSH
19991: FOR_IN
19992: IFFALSE 20016
// if IsControledBy ( i ) then
19994: LD_VAR 0 2
19998: PPUSH
19999: CALL_OW 312
20003: IFFALSE 20014
// ComUnlink ( i ) ;
20005: LD_VAR 0 2
20009: PPUSH
20010: CALL_OW 136
20014: GO 19991
20016: POP
20017: POP
// end ;
20018: PPOPN 2
20020: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20021: LD_EXP 15
20025: PUSH
20026: LD_EXP 46
20030: AND
20031: IFFALSE 20171
20033: GO 20035
20035: DISABLE
20036: LD_INT 0
20038: PPUSH
20039: PPUSH
// begin ToLua ( displayPowell(); ) ;
20040: LD_STRING displayPowell();
20042: PPUSH
20043: CALL_OW 559
// uc_side := 0 ;
20047: LD_ADDR_OWVAR 20
20051: PUSH
20052: LD_INT 0
20054: ST_TO_ADDR
// uc_nation := 2 ;
20055: LD_ADDR_OWVAR 21
20059: PUSH
20060: LD_INT 2
20062: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20063: LD_ADDR_OWVAR 37
20067: PUSH
20068: LD_INT 14
20070: ST_TO_ADDR
// vc_engine := engine_siberite ;
20071: LD_ADDR_OWVAR 39
20075: PUSH
20076: LD_INT 3
20078: ST_TO_ADDR
// vc_control := control_apeman ;
20079: LD_ADDR_OWVAR 38
20083: PUSH
20084: LD_INT 5
20086: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20087: LD_ADDR_OWVAR 40
20091: PUSH
20092: LD_INT 29
20094: ST_TO_ADDR
// un := CreateVehicle ;
20095: LD_ADDR_VAR 0 2
20099: PUSH
20100: CALL_OW 45
20104: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20105: LD_VAR 0 2
20109: PPUSH
20110: LD_INT 1
20112: PPUSH
20113: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20117: LD_INT 35
20119: PPUSH
20120: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20124: LD_VAR 0 2
20128: PPUSH
20129: LD_INT 22
20131: PUSH
20132: LD_OWVAR 2
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PPUSH
20141: CALL_OW 69
20145: PPUSH
20146: LD_VAR 0 2
20150: PPUSH
20151: CALL_OW 74
20155: PPUSH
20156: CALL_OW 115
// until IsDead ( un ) ;
20160: LD_VAR 0 2
20164: PPUSH
20165: CALL_OW 301
20169: IFFALSE 20117
// end ;
20171: PPOPN 2
20173: END
// every 0 0$1 trigger StreamModeActive and sStu do
20174: LD_EXP 15
20178: PUSH
20179: LD_EXP 54
20183: AND
20184: IFFALSE 20200
20186: GO 20188
20188: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20189: LD_STRING displayStucuk();
20191: PPUSH
20192: CALL_OW 559
// ResetFog ;
20196: CALL_OW 335
// end ;
20200: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20201: LD_EXP 15
20205: PUSH
20206: LD_EXP 47
20210: AND
20211: IFFALSE 20352
20213: GO 20215
20215: DISABLE
20216: LD_INT 0
20218: PPUSH
20219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20220: LD_ADDR_VAR 0 2
20224: PUSH
20225: LD_INT 22
20227: PUSH
20228: LD_OWVAR 2
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 21
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PPUSH
20251: CALL_OW 69
20255: ST_TO_ADDR
// if not tmp then
20256: LD_VAR 0 2
20260: NOT
20261: IFFALSE 20265
// exit ;
20263: GO 20352
// un := tmp [ rand ( 1 , tmp ) ] ;
20265: LD_ADDR_VAR 0 1
20269: PUSH
20270: LD_VAR 0 2
20274: PUSH
20275: LD_INT 1
20277: PPUSH
20278: LD_VAR 0 2
20282: PPUSH
20283: CALL_OW 12
20287: ARRAY
20288: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20289: LD_VAR 0 1
20293: PPUSH
20294: LD_INT 0
20296: PPUSH
20297: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20301: LD_VAR 0 1
20305: PPUSH
20306: LD_OWVAR 3
20310: PUSH
20311: LD_VAR 0 1
20315: DIFF
20316: PPUSH
20317: LD_VAR 0 1
20321: PPUSH
20322: CALL_OW 74
20326: PPUSH
20327: CALL_OW 115
// wait ( 0 0$20 ) ;
20331: LD_INT 700
20333: PPUSH
20334: CALL_OW 67
// SetSide ( un , your_side ) ;
20338: LD_VAR 0 1
20342: PPUSH
20343: LD_OWVAR 2
20347: PPUSH
20348: CALL_OW 235
// end ;
20352: PPOPN 2
20354: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20355: LD_EXP 15
20359: PUSH
20360: LD_EXP 48
20364: AND
20365: IFFALSE 20471
20367: GO 20369
20369: DISABLE
20370: LD_INT 0
20372: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20373: LD_ADDR_VAR 0 1
20377: PUSH
20378: LD_INT 22
20380: PUSH
20381: LD_OWVAR 2
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: LD_INT 30
20395: PUSH
20396: LD_INT 0
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 30
20405: PUSH
20406: LD_INT 1
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PPUSH
20422: CALL_OW 69
20426: ST_TO_ADDR
// if not depot then
20427: LD_VAR 0 1
20431: NOT
20432: IFFALSE 20436
// exit ;
20434: GO 20471
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20436: LD_VAR 0 1
20440: PUSH
20441: LD_INT 1
20443: ARRAY
20444: PPUSH
20445: CALL_OW 250
20449: PPUSH
20450: LD_VAR 0 1
20454: PUSH
20455: LD_INT 1
20457: ARRAY
20458: PPUSH
20459: CALL_OW 251
20463: PPUSH
20464: LD_INT 70
20466: PPUSH
20467: CALL_OW 495
// end ;
20471: PPOPN 1
20473: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20474: LD_EXP 15
20478: PUSH
20479: LD_EXP 49
20483: AND
20484: IFFALSE 20695
20486: GO 20488
20488: DISABLE
20489: LD_INT 0
20491: PPUSH
20492: PPUSH
20493: PPUSH
20494: PPUSH
20495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20496: LD_ADDR_VAR 0 5
20500: PUSH
20501: LD_INT 22
20503: PUSH
20504: LD_OWVAR 2
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 21
20515: PUSH
20516: LD_INT 1
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PPUSH
20527: CALL_OW 69
20531: ST_TO_ADDR
// if not tmp then
20532: LD_VAR 0 5
20536: NOT
20537: IFFALSE 20541
// exit ;
20539: GO 20695
// for i in tmp do
20541: LD_ADDR_VAR 0 1
20545: PUSH
20546: LD_VAR 0 5
20550: PUSH
20551: FOR_IN
20552: IFFALSE 20693
// begin d := rand ( 0 , 5 ) ;
20554: LD_ADDR_VAR 0 4
20558: PUSH
20559: LD_INT 0
20561: PPUSH
20562: LD_INT 5
20564: PPUSH
20565: CALL_OW 12
20569: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20570: LD_ADDR_VAR 0 2
20574: PUSH
20575: LD_VAR 0 1
20579: PPUSH
20580: CALL_OW 250
20584: PPUSH
20585: LD_VAR 0 4
20589: PPUSH
20590: LD_INT 3
20592: PPUSH
20593: LD_INT 12
20595: PPUSH
20596: CALL_OW 12
20600: PPUSH
20601: CALL_OW 272
20605: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20606: LD_ADDR_VAR 0 3
20610: PUSH
20611: LD_VAR 0 1
20615: PPUSH
20616: CALL_OW 251
20620: PPUSH
20621: LD_VAR 0 4
20625: PPUSH
20626: LD_INT 3
20628: PPUSH
20629: LD_INT 12
20631: PPUSH
20632: CALL_OW 12
20636: PPUSH
20637: CALL_OW 273
20641: ST_TO_ADDR
// if ValidHex ( x , y ) then
20642: LD_VAR 0 2
20646: PPUSH
20647: LD_VAR 0 3
20651: PPUSH
20652: CALL_OW 488
20656: IFFALSE 20691
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20658: LD_VAR 0 1
20662: PPUSH
20663: LD_VAR 0 2
20667: PPUSH
20668: LD_VAR 0 3
20672: PPUSH
20673: LD_INT 3
20675: PPUSH
20676: LD_INT 6
20678: PPUSH
20679: CALL_OW 12
20683: PPUSH
20684: LD_INT 1
20686: PPUSH
20687: CALL_OW 483
// end ;
20691: GO 20551
20693: POP
20694: POP
// end ;
20695: PPOPN 5
20697: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20698: LD_EXP 15
20702: PUSH
20703: LD_EXP 50
20707: AND
20708: IFFALSE 20802
20710: GO 20712
20712: DISABLE
20713: LD_INT 0
20715: PPUSH
20716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20717: LD_ADDR_VAR 0 2
20721: PUSH
20722: LD_INT 22
20724: PUSH
20725: LD_OWVAR 2
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 32
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 21
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 69
20763: ST_TO_ADDR
// if not tmp then
20764: LD_VAR 0 2
20768: NOT
20769: IFFALSE 20773
// exit ;
20771: GO 20802
// for i in tmp do
20773: LD_ADDR_VAR 0 1
20777: PUSH
20778: LD_VAR 0 2
20782: PUSH
20783: FOR_IN
20784: IFFALSE 20800
// SetFuel ( i , 0 ) ;
20786: LD_VAR 0 1
20790: PPUSH
20791: LD_INT 0
20793: PPUSH
20794: CALL_OW 240
20798: GO 20783
20800: POP
20801: POP
// end ;
20802: PPOPN 2
20804: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20805: LD_EXP 15
20809: PUSH
20810: LD_EXP 51
20814: AND
20815: IFFALSE 20881
20817: GO 20819
20819: DISABLE
20820: LD_INT 0
20822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20823: LD_ADDR_VAR 0 1
20827: PUSH
20828: LD_INT 22
20830: PUSH
20831: LD_OWVAR 2
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 30
20842: PUSH
20843: LD_INT 29
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 69
20858: ST_TO_ADDR
// if not tmp then
20859: LD_VAR 0 1
20863: NOT
20864: IFFALSE 20868
// exit ;
20866: GO 20881
// DestroyUnit ( tmp [ 1 ] ) ;
20868: LD_VAR 0 1
20872: PUSH
20873: LD_INT 1
20875: ARRAY
20876: PPUSH
20877: CALL_OW 65
// end ;
20881: PPOPN 1
20883: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20884: LD_EXP 15
20888: PUSH
20889: LD_EXP 53
20893: AND
20894: IFFALSE 21023
20896: GO 20898
20898: DISABLE
20899: LD_INT 0
20901: PPUSH
// begin uc_side := 0 ;
20902: LD_ADDR_OWVAR 20
20906: PUSH
20907: LD_INT 0
20909: ST_TO_ADDR
// uc_nation := nation_arabian ;
20910: LD_ADDR_OWVAR 21
20914: PUSH
20915: LD_INT 2
20917: ST_TO_ADDR
// hc_gallery :=  ;
20918: LD_ADDR_OWVAR 33
20922: PUSH
20923: LD_STRING 
20925: ST_TO_ADDR
// hc_name :=  ;
20926: LD_ADDR_OWVAR 26
20930: PUSH
20931: LD_STRING 
20933: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20934: LD_INT 1
20936: PPUSH
20937: LD_INT 11
20939: PPUSH
20940: LD_INT 10
20942: PPUSH
20943: CALL_OW 380
// un := CreateHuman ;
20947: LD_ADDR_VAR 0 1
20951: PUSH
20952: CALL_OW 44
20956: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20957: LD_VAR 0 1
20961: PPUSH
20962: LD_INT 1
20964: PPUSH
20965: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20969: LD_INT 35
20971: PPUSH
20972: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20976: LD_VAR 0 1
20980: PPUSH
20981: LD_INT 22
20983: PUSH
20984: LD_OWVAR 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PPUSH
20993: CALL_OW 69
20997: PPUSH
20998: LD_VAR 0 1
21002: PPUSH
21003: CALL_OW 74
21007: PPUSH
21008: CALL_OW 115
// until IsDead ( un ) ;
21012: LD_VAR 0 1
21016: PPUSH
21017: CALL_OW 301
21021: IFFALSE 20969
// end ;
21023: PPOPN 1
21025: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21026: LD_EXP 15
21030: PUSH
21031: LD_EXP 55
21035: AND
21036: IFFALSE 21048
21038: GO 21040
21040: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21041: LD_STRING earthquake(getX(game), 0, 32)
21043: PPUSH
21044: CALL_OW 559
21048: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21049: LD_EXP 15
21053: PUSH
21054: LD_EXP 56
21058: AND
21059: IFFALSE 21150
21061: GO 21063
21063: DISABLE
21064: LD_INT 0
21066: PPUSH
// begin enable ;
21067: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21068: LD_ADDR_VAR 0 1
21072: PUSH
21073: LD_INT 22
21075: PUSH
21076: LD_OWVAR 2
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 21
21087: PUSH
21088: LD_INT 2
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 33
21097: PUSH
21098: LD_INT 3
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: LIST
21109: PPUSH
21110: CALL_OW 69
21114: ST_TO_ADDR
// if not tmp then
21115: LD_VAR 0 1
21119: NOT
21120: IFFALSE 21124
// exit ;
21122: GO 21150
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21124: LD_VAR 0 1
21128: PUSH
21129: LD_INT 1
21131: PPUSH
21132: LD_VAR 0 1
21136: PPUSH
21137: CALL_OW 12
21141: ARRAY
21142: PPUSH
21143: LD_INT 1
21145: PPUSH
21146: CALL_OW 234
// end ;
21150: PPOPN 1
21152: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21153: LD_EXP 15
21157: PUSH
21158: LD_EXP 57
21162: AND
21163: IFFALSE 21304
21165: GO 21167
21167: DISABLE
21168: LD_INT 0
21170: PPUSH
21171: PPUSH
21172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21173: LD_ADDR_VAR 0 3
21177: PUSH
21178: LD_INT 22
21180: PUSH
21181: LD_OWVAR 2
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 25
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PPUSH
21204: CALL_OW 69
21208: ST_TO_ADDR
// if not tmp then
21209: LD_VAR 0 3
21213: NOT
21214: IFFALSE 21218
// exit ;
21216: GO 21304
// un := tmp [ rand ( 1 , tmp ) ] ;
21218: LD_ADDR_VAR 0 2
21222: PUSH
21223: LD_VAR 0 3
21227: PUSH
21228: LD_INT 1
21230: PPUSH
21231: LD_VAR 0 3
21235: PPUSH
21236: CALL_OW 12
21240: ARRAY
21241: ST_TO_ADDR
// if Crawls ( un ) then
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 318
21251: IFFALSE 21262
// ComWalk ( un ) ;
21253: LD_VAR 0 2
21257: PPUSH
21258: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21262: LD_VAR 0 2
21266: PPUSH
21267: LD_INT 9
21269: PPUSH
21270: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21274: LD_INT 28
21276: PPUSH
21277: LD_OWVAR 2
21281: PPUSH
21282: LD_INT 2
21284: PPUSH
21285: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21289: LD_INT 29
21291: PPUSH
21292: LD_OWVAR 2
21296: PPUSH
21297: LD_INT 2
21299: PPUSH
21300: CALL_OW 322
// end ;
21304: PPOPN 3
21306: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21307: LD_EXP 15
21311: PUSH
21312: LD_EXP 58
21316: AND
21317: IFFALSE 21428
21319: GO 21321
21321: DISABLE
21322: LD_INT 0
21324: PPUSH
21325: PPUSH
21326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21327: LD_ADDR_VAR 0 3
21331: PUSH
21332: LD_INT 22
21334: PUSH
21335: LD_OWVAR 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 25
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PPUSH
21358: CALL_OW 69
21362: ST_TO_ADDR
// if not tmp then
21363: LD_VAR 0 3
21367: NOT
21368: IFFALSE 21372
// exit ;
21370: GO 21428
// un := tmp [ rand ( 1 , tmp ) ] ;
21372: LD_ADDR_VAR 0 2
21376: PUSH
21377: LD_VAR 0 3
21381: PUSH
21382: LD_INT 1
21384: PPUSH
21385: LD_VAR 0 3
21389: PPUSH
21390: CALL_OW 12
21394: ARRAY
21395: ST_TO_ADDR
// if Crawls ( un ) then
21396: LD_VAR 0 2
21400: PPUSH
21401: CALL_OW 318
21405: IFFALSE 21416
// ComWalk ( un ) ;
21407: LD_VAR 0 2
21411: PPUSH
21412: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21416: LD_VAR 0 2
21420: PPUSH
21421: LD_INT 8
21423: PPUSH
21424: CALL_OW 336
// end ;
21428: PPOPN 3
21430: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21431: LD_EXP 15
21435: PUSH
21436: LD_EXP 59
21440: AND
21441: IFFALSE 21585
21443: GO 21445
21445: DISABLE
21446: LD_INT 0
21448: PPUSH
21449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21450: LD_ADDR_VAR 0 2
21454: PUSH
21455: LD_INT 22
21457: PUSH
21458: LD_OWVAR 2
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 21
21469: PUSH
21470: LD_INT 2
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: LD_INT 34
21482: PUSH
21483: LD_INT 12
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 34
21492: PUSH
21493: LD_INT 51
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 34
21502: PUSH
21503: LD_INT 32
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: PPUSH
21521: CALL_OW 69
21525: ST_TO_ADDR
// if not tmp then
21526: LD_VAR 0 2
21530: NOT
21531: IFFALSE 21535
// exit ;
21533: GO 21585
// for i in tmp do
21535: LD_ADDR_VAR 0 1
21539: PUSH
21540: LD_VAR 0 2
21544: PUSH
21545: FOR_IN
21546: IFFALSE 21583
// if GetCargo ( i , mat_artifact ) = 0 then
21548: LD_VAR 0 1
21552: PPUSH
21553: LD_INT 4
21555: PPUSH
21556: CALL_OW 289
21560: PUSH
21561: LD_INT 0
21563: EQUAL
21564: IFFALSE 21581
// SetCargo ( i , mat_siberit , 100 ) ;
21566: LD_VAR 0 1
21570: PPUSH
21571: LD_INT 3
21573: PPUSH
21574: LD_INT 100
21576: PPUSH
21577: CALL_OW 290
21581: GO 21545
21583: POP
21584: POP
// end ;
21585: PPOPN 2
21587: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21588: LD_EXP 15
21592: PUSH
21593: LD_EXP 60
21597: AND
21598: IFFALSE 21781
21600: GO 21602
21602: DISABLE
21603: LD_INT 0
21605: PPUSH
21606: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21607: LD_ADDR_VAR 0 2
21611: PUSH
21612: LD_INT 22
21614: PUSH
21615: LD_OWVAR 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 69
21628: ST_TO_ADDR
// if not tmp then
21629: LD_VAR 0 2
21633: NOT
21634: IFFALSE 21638
// exit ;
21636: GO 21781
// for i := 1 to 2 do
21638: LD_ADDR_VAR 0 1
21642: PUSH
21643: DOUBLE
21644: LD_INT 1
21646: DEC
21647: ST_TO_ADDR
21648: LD_INT 2
21650: PUSH
21651: FOR_TO
21652: IFFALSE 21779
// begin uc_side := your_side ;
21654: LD_ADDR_OWVAR 20
21658: PUSH
21659: LD_OWVAR 2
21663: ST_TO_ADDR
// uc_nation := nation_american ;
21664: LD_ADDR_OWVAR 21
21668: PUSH
21669: LD_INT 1
21671: ST_TO_ADDR
// vc_chassis := us_morphling ;
21672: LD_ADDR_OWVAR 37
21676: PUSH
21677: LD_INT 5
21679: ST_TO_ADDR
// vc_engine := engine_siberite ;
21680: LD_ADDR_OWVAR 39
21684: PUSH
21685: LD_INT 3
21687: ST_TO_ADDR
// vc_control := control_computer ;
21688: LD_ADDR_OWVAR 38
21692: PUSH
21693: LD_INT 3
21695: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21696: LD_ADDR_OWVAR 40
21700: PUSH
21701: LD_INT 10
21703: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21704: LD_VAR 0 2
21708: PUSH
21709: LD_INT 1
21711: ARRAY
21712: PPUSH
21713: CALL_OW 310
21717: NOT
21718: IFFALSE 21765
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21720: CALL_OW 45
21724: PPUSH
21725: LD_VAR 0 2
21729: PUSH
21730: LD_INT 1
21732: ARRAY
21733: PPUSH
21734: CALL_OW 250
21738: PPUSH
21739: LD_VAR 0 2
21743: PUSH
21744: LD_INT 1
21746: ARRAY
21747: PPUSH
21748: CALL_OW 251
21752: PPUSH
21753: LD_INT 12
21755: PPUSH
21756: LD_INT 1
21758: PPUSH
21759: CALL_OW 50
21763: GO 21777
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21765: CALL_OW 45
21769: PPUSH
21770: LD_INT 1
21772: PPUSH
21773: CALL_OW 51
// end ;
21777: GO 21651
21779: POP
21780: POP
// end ;
21781: PPOPN 2
21783: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21784: LD_EXP 15
21788: PUSH
21789: LD_EXP 61
21793: AND
21794: IFFALSE 22016
21796: GO 21798
21798: DISABLE
21799: LD_INT 0
21801: PPUSH
21802: PPUSH
21803: PPUSH
21804: PPUSH
21805: PPUSH
21806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21807: LD_ADDR_VAR 0 6
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_OWVAR 2
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 21
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 3
21836: PUSH
21837: LD_INT 23
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: PPUSH
21856: CALL_OW 69
21860: ST_TO_ADDR
// if not tmp then
21861: LD_VAR 0 6
21865: NOT
21866: IFFALSE 21870
// exit ;
21868: GO 22016
// s1 := rand ( 1 , 4 ) ;
21870: LD_ADDR_VAR 0 2
21874: PUSH
21875: LD_INT 1
21877: PPUSH
21878: LD_INT 4
21880: PPUSH
21881: CALL_OW 12
21885: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21886: LD_ADDR_VAR 0 4
21890: PUSH
21891: LD_VAR 0 6
21895: PUSH
21896: LD_INT 1
21898: ARRAY
21899: PPUSH
21900: LD_VAR 0 2
21904: PPUSH
21905: CALL_OW 259
21909: ST_TO_ADDR
// if s1 = 1 then
21910: LD_VAR 0 2
21914: PUSH
21915: LD_INT 1
21917: EQUAL
21918: IFFALSE 21938
// s2 := rand ( 2 , 4 ) else
21920: LD_ADDR_VAR 0 3
21924: PUSH
21925: LD_INT 2
21927: PPUSH
21928: LD_INT 4
21930: PPUSH
21931: CALL_OW 12
21935: ST_TO_ADDR
21936: GO 21946
// s2 := 1 ;
21938: LD_ADDR_VAR 0 3
21942: PUSH
21943: LD_INT 1
21945: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21946: LD_ADDR_VAR 0 5
21950: PUSH
21951: LD_VAR 0 6
21955: PUSH
21956: LD_INT 1
21958: ARRAY
21959: PPUSH
21960: LD_VAR 0 3
21964: PPUSH
21965: CALL_OW 259
21969: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21970: LD_VAR 0 6
21974: PUSH
21975: LD_INT 1
21977: ARRAY
21978: PPUSH
21979: LD_VAR 0 2
21983: PPUSH
21984: LD_VAR 0 5
21988: PPUSH
21989: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21993: LD_VAR 0 6
21997: PUSH
21998: LD_INT 1
22000: ARRAY
22001: PPUSH
22002: LD_VAR 0 3
22006: PPUSH
22007: LD_VAR 0 4
22011: PPUSH
22012: CALL_OW 237
// end ;
22016: PPOPN 6
22018: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22019: LD_EXP 15
22023: PUSH
22024: LD_EXP 62
22028: AND
22029: IFFALSE 22108
22031: GO 22033
22033: DISABLE
22034: LD_INT 0
22036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22037: LD_ADDR_VAR 0 1
22041: PUSH
22042: LD_INT 22
22044: PUSH
22045: LD_OWVAR 2
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 30
22056: PUSH
22057: LD_INT 3
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PPUSH
22068: CALL_OW 69
22072: ST_TO_ADDR
// if not tmp then
22073: LD_VAR 0 1
22077: NOT
22078: IFFALSE 22082
// exit ;
22080: GO 22108
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22082: LD_VAR 0 1
22086: PUSH
22087: LD_INT 1
22089: PPUSH
22090: LD_VAR 0 1
22094: PPUSH
22095: CALL_OW 12
22099: ARRAY
22100: PPUSH
22101: LD_INT 1
22103: PPUSH
22104: CALL_OW 234
// end ;
22108: PPOPN 1
22110: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22111: LD_EXP 15
22115: PUSH
22116: LD_EXP 63
22120: AND
22121: IFFALSE 22233
22123: GO 22125
22125: DISABLE
22126: LD_INT 0
22128: PPUSH
22129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22130: LD_ADDR_VAR 0 2
22134: PUSH
22135: LD_INT 22
22137: PUSH
22138: LD_OWVAR 2
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 2
22149: PUSH
22150: LD_INT 30
22152: PUSH
22153: LD_INT 27
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 30
22162: PUSH
22163: LD_INT 26
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 30
22172: PUSH
22173: LD_INT 28
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PPUSH
22190: CALL_OW 69
22194: ST_TO_ADDR
// if not tmp then
22195: LD_VAR 0 2
22199: NOT
22200: IFFALSE 22204
// exit ;
22202: GO 22233
// for i in tmp do
22204: LD_ADDR_VAR 0 1
22208: PUSH
22209: LD_VAR 0 2
22213: PUSH
22214: FOR_IN
22215: IFFALSE 22231
// SetLives ( i , 1 ) ;
22217: LD_VAR 0 1
22221: PPUSH
22222: LD_INT 1
22224: PPUSH
22225: CALL_OW 234
22229: GO 22214
22231: POP
22232: POP
// end ;
22233: PPOPN 2
22235: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22236: LD_EXP 15
22240: PUSH
22241: LD_EXP 64
22245: AND
22246: IFFALSE 22533
22248: GO 22250
22250: DISABLE
22251: LD_INT 0
22253: PPUSH
22254: PPUSH
22255: PPUSH
// begin i := rand ( 1 , 7 ) ;
22256: LD_ADDR_VAR 0 1
22260: PUSH
22261: LD_INT 1
22263: PPUSH
22264: LD_INT 7
22266: PPUSH
22267: CALL_OW 12
22271: ST_TO_ADDR
// case i of 1 :
22272: LD_VAR 0 1
22276: PUSH
22277: LD_INT 1
22279: DOUBLE
22280: EQUAL
22281: IFTRUE 22285
22283: GO 22295
22285: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22286: LD_STRING earthquake(getX(game), 0, 32)
22288: PPUSH
22289: CALL_OW 559
22293: GO 22533
22295: LD_INT 2
22297: DOUBLE
22298: EQUAL
22299: IFTRUE 22303
22301: GO 22317
22303: POP
// begin ToLua ( displayStucuk(); ) ;
22304: LD_STRING displayStucuk();
22306: PPUSH
22307: CALL_OW 559
// ResetFog ;
22311: CALL_OW 335
// end ; 3 :
22315: GO 22533
22317: LD_INT 3
22319: DOUBLE
22320: EQUAL
22321: IFTRUE 22325
22323: GO 22429
22325: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22326: LD_ADDR_VAR 0 2
22330: PUSH
22331: LD_INT 22
22333: PUSH
22334: LD_OWVAR 2
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 25
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PPUSH
22357: CALL_OW 69
22361: ST_TO_ADDR
// if not tmp then
22362: LD_VAR 0 2
22366: NOT
22367: IFFALSE 22371
// exit ;
22369: GO 22533
// un := tmp [ rand ( 1 , tmp ) ] ;
22371: LD_ADDR_VAR 0 3
22375: PUSH
22376: LD_VAR 0 2
22380: PUSH
22381: LD_INT 1
22383: PPUSH
22384: LD_VAR 0 2
22388: PPUSH
22389: CALL_OW 12
22393: ARRAY
22394: ST_TO_ADDR
// if Crawls ( un ) then
22395: LD_VAR 0 3
22399: PPUSH
22400: CALL_OW 318
22404: IFFALSE 22415
// ComWalk ( un ) ;
22406: LD_VAR 0 3
22410: PPUSH
22411: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22415: LD_VAR 0 3
22419: PPUSH
22420: LD_INT 8
22422: PPUSH
22423: CALL_OW 336
// end ; 4 :
22427: GO 22533
22429: LD_INT 4
22431: DOUBLE
22432: EQUAL
22433: IFTRUE 22437
22435: GO 22511
22437: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22438: LD_ADDR_VAR 0 2
22442: PUSH
22443: LD_INT 22
22445: PUSH
22446: LD_OWVAR 2
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 30
22457: PUSH
22458: LD_INT 29
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PPUSH
22469: CALL_OW 69
22473: ST_TO_ADDR
// if not tmp then
22474: LD_VAR 0 2
22478: NOT
22479: IFFALSE 22483
// exit ;
22481: GO 22533
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22483: LD_VAR 0 2
22487: PUSH
22488: LD_INT 1
22490: ARRAY
22491: PPUSH
22492: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22496: LD_VAR 0 2
22500: PUSH
22501: LD_INT 1
22503: ARRAY
22504: PPUSH
22505: CALL_OW 65
// end ; 5 .. 7 :
22509: GO 22533
22511: LD_INT 5
22513: DOUBLE
22514: GREATEREQUAL
22515: IFFALSE 22523
22517: LD_INT 7
22519: DOUBLE
22520: LESSEQUAL
22521: IFTRUE 22525
22523: GO 22532
22525: POP
// StreamSibBomb ; end ;
22526: CALL 18770 0 0
22530: GO 22533
22532: POP
// end ;
22533: PPOPN 3
22535: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22536: LD_EXP 15
22540: PUSH
22541: LD_EXP 65
22545: AND
22546: IFFALSE 22702
22548: GO 22550
22550: DISABLE
22551: LD_INT 0
22553: PPUSH
22554: PPUSH
22555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22556: LD_ADDR_VAR 0 2
22560: PUSH
22561: LD_INT 81
22563: PUSH
22564: LD_OWVAR 2
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 2
22575: PUSH
22576: LD_INT 21
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 21
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PPUSH
22605: CALL_OW 69
22609: ST_TO_ADDR
// if not tmp then
22610: LD_VAR 0 2
22614: NOT
22615: IFFALSE 22619
// exit ;
22617: GO 22702
// p := 0 ;
22619: LD_ADDR_VAR 0 3
22623: PUSH
22624: LD_INT 0
22626: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22627: LD_INT 35
22629: PPUSH
22630: CALL_OW 67
// p := p + 1 ;
22634: LD_ADDR_VAR 0 3
22638: PUSH
22639: LD_VAR 0 3
22643: PUSH
22644: LD_INT 1
22646: PLUS
22647: ST_TO_ADDR
// for i in tmp do
22648: LD_ADDR_VAR 0 1
22652: PUSH
22653: LD_VAR 0 2
22657: PUSH
22658: FOR_IN
22659: IFFALSE 22690
// if GetLives ( i ) < 1000 then
22661: LD_VAR 0 1
22665: PPUSH
22666: CALL_OW 256
22670: PUSH
22671: LD_INT 1000
22673: LESS
22674: IFFALSE 22688
// SetLives ( i , 1000 ) ;
22676: LD_VAR 0 1
22680: PPUSH
22681: LD_INT 1000
22683: PPUSH
22684: CALL_OW 234
22688: GO 22658
22690: POP
22691: POP
// until p > 20 ;
22692: LD_VAR 0 3
22696: PUSH
22697: LD_INT 20
22699: GREATER
22700: IFFALSE 22627
// end ;
22702: PPOPN 3
22704: END
// every 0 0$1 trigger StreamModeActive and sTime do
22705: LD_EXP 15
22709: PUSH
22710: LD_EXP 66
22714: AND
22715: IFFALSE 22750
22717: GO 22719
22719: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22720: LD_INT 28
22722: PPUSH
22723: LD_OWVAR 2
22727: PPUSH
22728: LD_INT 2
22730: PPUSH
22731: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22735: LD_INT 30
22737: PPUSH
22738: LD_OWVAR 2
22742: PPUSH
22743: LD_INT 2
22745: PPUSH
22746: CALL_OW 322
// end ;
22750: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22751: LD_EXP 15
22755: PUSH
22756: LD_EXP 67
22760: AND
22761: IFFALSE 22882
22763: GO 22765
22765: DISABLE
22766: LD_INT 0
22768: PPUSH
22769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22770: LD_ADDR_VAR 0 2
22774: PUSH
22775: LD_INT 22
22777: PUSH
22778: LD_OWVAR 2
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 21
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 3
22799: PUSH
22800: LD_INT 23
22802: PUSH
22803: LD_INT 0
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: PPUSH
22819: CALL_OW 69
22823: ST_TO_ADDR
// if not tmp then
22824: LD_VAR 0 2
22828: NOT
22829: IFFALSE 22833
// exit ;
22831: GO 22882
// for i in tmp do
22833: LD_ADDR_VAR 0 1
22837: PUSH
22838: LD_VAR 0 2
22842: PUSH
22843: FOR_IN
22844: IFFALSE 22880
// begin if Crawls ( i ) then
22846: LD_VAR 0 1
22850: PPUSH
22851: CALL_OW 318
22855: IFFALSE 22866
// ComWalk ( i ) ;
22857: LD_VAR 0 1
22861: PPUSH
22862: CALL_OW 138
// SetClass ( i , 2 ) ;
22866: LD_VAR 0 1
22870: PPUSH
22871: LD_INT 2
22873: PPUSH
22874: CALL_OW 336
// end ;
22878: GO 22843
22880: POP
22881: POP
// end ;
22882: PPOPN 2
22884: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22885: LD_EXP 15
22889: PUSH
22890: LD_EXP 68
22894: AND
22895: IFFALSE 23183
22897: GO 22899
22899: DISABLE
22900: LD_INT 0
22902: PPUSH
22903: PPUSH
22904: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22905: LD_OWVAR 2
22909: PPUSH
22910: LD_INT 9
22912: PPUSH
22913: LD_INT 1
22915: PPUSH
22916: LD_INT 1
22918: PPUSH
22919: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22923: LD_INT 9
22925: PPUSH
22926: LD_OWVAR 2
22930: PPUSH
22931: CALL_OW 343
// uc_side := 9 ;
22935: LD_ADDR_OWVAR 20
22939: PUSH
22940: LD_INT 9
22942: ST_TO_ADDR
// uc_nation := 2 ;
22943: LD_ADDR_OWVAR 21
22947: PUSH
22948: LD_INT 2
22950: ST_TO_ADDR
// hc_name := Dark Warrior ;
22951: LD_ADDR_OWVAR 26
22955: PUSH
22956: LD_STRING Dark Warrior
22958: ST_TO_ADDR
// hc_gallery :=  ;
22959: LD_ADDR_OWVAR 33
22963: PUSH
22964: LD_STRING 
22966: ST_TO_ADDR
// hc_noskilllimit := true ;
22967: LD_ADDR_OWVAR 76
22971: PUSH
22972: LD_INT 1
22974: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22975: LD_ADDR_OWVAR 31
22979: PUSH
22980: LD_INT 30
22982: PUSH
22983: LD_INT 30
22985: PUSH
22986: LD_INT 30
22988: PUSH
22989: LD_INT 30
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: ST_TO_ADDR
// un := CreateHuman ;
22998: LD_ADDR_VAR 0 3
23002: PUSH
23003: CALL_OW 44
23007: ST_TO_ADDR
// hc_noskilllimit := false ;
23008: LD_ADDR_OWVAR 76
23012: PUSH
23013: LD_INT 0
23015: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23016: LD_VAR 0 3
23020: PPUSH
23021: LD_INT 1
23023: PPUSH
23024: CALL_OW 51
// ToLua ( playRanger() ) ;
23028: LD_STRING playRanger()
23030: PPUSH
23031: CALL_OW 559
// p := 0 ;
23035: LD_ADDR_VAR 0 2
23039: PUSH
23040: LD_INT 0
23042: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23043: LD_INT 35
23045: PPUSH
23046: CALL_OW 67
// p := p + 1 ;
23050: LD_ADDR_VAR 0 2
23054: PUSH
23055: LD_VAR 0 2
23059: PUSH
23060: LD_INT 1
23062: PLUS
23063: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23064: LD_VAR 0 3
23068: PPUSH
23069: CALL_OW 256
23073: PUSH
23074: LD_INT 1000
23076: LESS
23077: IFFALSE 23091
// SetLives ( un , 1000 ) ;
23079: LD_VAR 0 3
23083: PPUSH
23084: LD_INT 1000
23086: PPUSH
23087: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23091: LD_VAR 0 3
23095: PPUSH
23096: LD_INT 81
23098: PUSH
23099: LD_OWVAR 2
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 91
23110: PUSH
23111: LD_VAR 0 3
23115: PUSH
23116: LD_INT 30
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: LIST
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PPUSH
23128: CALL_OW 69
23132: PPUSH
23133: LD_VAR 0 3
23137: PPUSH
23138: CALL_OW 74
23142: PPUSH
23143: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23147: LD_VAR 0 2
23151: PUSH
23152: LD_INT 80
23154: GREATER
23155: PUSH
23156: LD_VAR 0 3
23160: PPUSH
23161: CALL_OW 301
23165: OR
23166: IFFALSE 23043
// if un then
23168: LD_VAR 0 3
23172: IFFALSE 23183
// RemoveUnit ( un ) ;
23174: LD_VAR 0 3
23178: PPUSH
23179: CALL_OW 64
// end ;
23183: PPOPN 3
23185: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23186: LD_EXP 69
23190: IFFALSE 23306
23192: GO 23194
23194: DISABLE
23195: LD_INT 0
23197: PPUSH
23198: PPUSH
23199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23200: LD_ADDR_VAR 0 2
23204: PUSH
23205: LD_INT 81
23207: PUSH
23208: LD_OWVAR 2
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 21
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PPUSH
23231: CALL_OW 69
23235: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23236: LD_STRING playComputer()
23238: PPUSH
23239: CALL_OW 559
// if not tmp then
23243: LD_VAR 0 2
23247: NOT
23248: IFFALSE 23252
// exit ;
23250: GO 23306
// for i in tmp do
23252: LD_ADDR_VAR 0 1
23256: PUSH
23257: LD_VAR 0 2
23261: PUSH
23262: FOR_IN
23263: IFFALSE 23304
// for j := 1 to 4 do
23265: LD_ADDR_VAR 0 3
23269: PUSH
23270: DOUBLE
23271: LD_INT 1
23273: DEC
23274: ST_TO_ADDR
23275: LD_INT 4
23277: PUSH
23278: FOR_TO
23279: IFFALSE 23300
// SetSkill ( i , j , 10 ) ;
23281: LD_VAR 0 1
23285: PPUSH
23286: LD_VAR 0 3
23290: PPUSH
23291: LD_INT 10
23293: PPUSH
23294: CALL_OW 237
23298: GO 23278
23300: POP
23301: POP
23302: GO 23262
23304: POP
23305: POP
// end ;
23306: PPOPN 3
23308: END
// every 0 0$1 trigger s30 do var i , tmp ;
23309: LD_EXP 70
23313: IFFALSE 23382
23315: GO 23317
23317: DISABLE
23318: LD_INT 0
23320: PPUSH
23321: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23322: LD_ADDR_VAR 0 2
23326: PUSH
23327: LD_INT 22
23329: PUSH
23330: LD_OWVAR 2
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PPUSH
23339: CALL_OW 69
23343: ST_TO_ADDR
// if not tmp then
23344: LD_VAR 0 2
23348: NOT
23349: IFFALSE 23353
// exit ;
23351: GO 23382
// for i in tmp do
23353: LD_ADDR_VAR 0 1
23357: PUSH
23358: LD_VAR 0 2
23362: PUSH
23363: FOR_IN
23364: IFFALSE 23380
// SetLives ( i , 300 ) ;
23366: LD_VAR 0 1
23370: PPUSH
23371: LD_INT 300
23373: PPUSH
23374: CALL_OW 234
23378: GO 23363
23380: POP
23381: POP
// end ;
23382: PPOPN 2
23384: END
// every 0 0$1 trigger s60 do var i , tmp ;
23385: LD_EXP 71
23389: IFFALSE 23458
23391: GO 23393
23393: DISABLE
23394: LD_INT 0
23396: PPUSH
23397: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23398: LD_ADDR_VAR 0 2
23402: PUSH
23403: LD_INT 22
23405: PUSH
23406: LD_OWVAR 2
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PPUSH
23415: CALL_OW 69
23419: ST_TO_ADDR
// if not tmp then
23420: LD_VAR 0 2
23424: NOT
23425: IFFALSE 23429
// exit ;
23427: GO 23458
// for i in tmp do
23429: LD_ADDR_VAR 0 1
23433: PUSH
23434: LD_VAR 0 2
23438: PUSH
23439: FOR_IN
23440: IFFALSE 23456
// SetLives ( i , 600 ) ;
23442: LD_VAR 0 1
23446: PPUSH
23447: LD_INT 600
23449: PPUSH
23450: CALL_OW 234
23454: GO 23439
23456: POP
23457: POP
// end ;
23458: PPOPN 2
23460: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23461: LD_INT 0
23463: PPUSH
// case cmd of 301 :
23464: LD_VAR 0 1
23468: PUSH
23469: LD_INT 301
23471: DOUBLE
23472: EQUAL
23473: IFTRUE 23477
23475: GO 23509
23477: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23478: LD_VAR 0 6
23482: PPUSH
23483: LD_VAR 0 7
23487: PPUSH
23488: LD_VAR 0 8
23492: PPUSH
23493: LD_VAR 0 4
23497: PPUSH
23498: LD_VAR 0 5
23502: PPUSH
23503: CALL 24710 0 5
23507: GO 23630
23509: LD_INT 302
23511: DOUBLE
23512: EQUAL
23513: IFTRUE 23517
23515: GO 23554
23517: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23518: LD_VAR 0 6
23522: PPUSH
23523: LD_VAR 0 7
23527: PPUSH
23528: LD_VAR 0 8
23532: PPUSH
23533: LD_VAR 0 9
23537: PPUSH
23538: LD_VAR 0 4
23542: PPUSH
23543: LD_VAR 0 5
23547: PPUSH
23548: CALL 24801 0 6
23552: GO 23630
23554: LD_INT 303
23556: DOUBLE
23557: EQUAL
23558: IFTRUE 23562
23560: GO 23599
23562: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23563: LD_VAR 0 6
23567: PPUSH
23568: LD_VAR 0 7
23572: PPUSH
23573: LD_VAR 0 8
23577: PPUSH
23578: LD_VAR 0 9
23582: PPUSH
23583: LD_VAR 0 4
23587: PPUSH
23588: LD_VAR 0 5
23592: PPUSH
23593: CALL 23635 0 6
23597: GO 23630
23599: LD_INT 304
23601: DOUBLE
23602: EQUAL
23603: IFTRUE 23607
23605: GO 23629
23607: POP
// hHackTeleport ( unit , x , y ) ; end ;
23608: LD_VAR 0 2
23612: PPUSH
23613: LD_VAR 0 4
23617: PPUSH
23618: LD_VAR 0 5
23622: PPUSH
23623: CALL 25394 0 3
23627: GO 23630
23629: POP
// end ;
23630: LD_VAR 0 12
23634: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23635: LD_INT 0
23637: PPUSH
23638: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23639: LD_VAR 0 1
23643: PUSH
23644: LD_INT 1
23646: LESS
23647: PUSH
23648: LD_VAR 0 1
23652: PUSH
23653: LD_INT 3
23655: GREATER
23656: OR
23657: PUSH
23658: LD_VAR 0 5
23662: PPUSH
23663: LD_VAR 0 6
23667: PPUSH
23668: CALL_OW 428
23672: OR
23673: IFFALSE 23677
// exit ;
23675: GO 24397
// uc_side := your_side ;
23677: LD_ADDR_OWVAR 20
23681: PUSH
23682: LD_OWVAR 2
23686: ST_TO_ADDR
// uc_nation := nation ;
23687: LD_ADDR_OWVAR 21
23691: PUSH
23692: LD_VAR 0 1
23696: ST_TO_ADDR
// bc_level = 1 ;
23697: LD_ADDR_OWVAR 43
23701: PUSH
23702: LD_INT 1
23704: ST_TO_ADDR
// case btype of 1 :
23705: LD_VAR 0 2
23709: PUSH
23710: LD_INT 1
23712: DOUBLE
23713: EQUAL
23714: IFTRUE 23718
23716: GO 23729
23718: POP
// bc_type := b_depot ; 2 :
23719: LD_ADDR_OWVAR 42
23723: PUSH
23724: LD_INT 0
23726: ST_TO_ADDR
23727: GO 24341
23729: LD_INT 2
23731: DOUBLE
23732: EQUAL
23733: IFTRUE 23737
23735: GO 23748
23737: POP
// bc_type := b_warehouse ; 3 :
23738: LD_ADDR_OWVAR 42
23742: PUSH
23743: LD_INT 1
23745: ST_TO_ADDR
23746: GO 24341
23748: LD_INT 3
23750: DOUBLE
23751: EQUAL
23752: IFTRUE 23756
23754: GO 23767
23756: POP
// bc_type := b_lab ; 4 .. 9 :
23757: LD_ADDR_OWVAR 42
23761: PUSH
23762: LD_INT 6
23764: ST_TO_ADDR
23765: GO 24341
23767: LD_INT 4
23769: DOUBLE
23770: GREATEREQUAL
23771: IFFALSE 23779
23773: LD_INT 9
23775: DOUBLE
23776: LESSEQUAL
23777: IFTRUE 23781
23779: GO 23833
23781: POP
// begin bc_type := b_lab_half ;
23782: LD_ADDR_OWVAR 42
23786: PUSH
23787: LD_INT 7
23789: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23790: LD_ADDR_OWVAR 44
23794: PUSH
23795: LD_INT 10
23797: PUSH
23798: LD_INT 11
23800: PUSH
23801: LD_INT 12
23803: PUSH
23804: LD_INT 15
23806: PUSH
23807: LD_INT 14
23809: PUSH
23810: LD_INT 13
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: PUSH
23821: LD_VAR 0 2
23825: PUSH
23826: LD_INT 3
23828: MINUS
23829: ARRAY
23830: ST_TO_ADDR
// end ; 10 .. 13 :
23831: GO 24341
23833: LD_INT 10
23835: DOUBLE
23836: GREATEREQUAL
23837: IFFALSE 23845
23839: LD_INT 13
23841: DOUBLE
23842: LESSEQUAL
23843: IFTRUE 23847
23845: GO 23924
23847: POP
// begin bc_type := b_lab_full ;
23848: LD_ADDR_OWVAR 42
23852: PUSH
23853: LD_INT 8
23855: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23856: LD_ADDR_OWVAR 44
23860: PUSH
23861: LD_INT 10
23863: PUSH
23864: LD_INT 12
23866: PUSH
23867: LD_INT 14
23869: PUSH
23870: LD_INT 13
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: PUSH
23879: LD_VAR 0 2
23883: PUSH
23884: LD_INT 9
23886: MINUS
23887: ARRAY
23888: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23889: LD_ADDR_OWVAR 45
23893: PUSH
23894: LD_INT 11
23896: PUSH
23897: LD_INT 15
23899: PUSH
23900: LD_INT 12
23902: PUSH
23903: LD_INT 15
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: PUSH
23912: LD_VAR 0 2
23916: PUSH
23917: LD_INT 9
23919: MINUS
23920: ARRAY
23921: ST_TO_ADDR
// end ; 14 :
23922: GO 24341
23924: LD_INT 14
23926: DOUBLE
23927: EQUAL
23928: IFTRUE 23932
23930: GO 23943
23932: POP
// bc_type := b_workshop ; 15 :
23933: LD_ADDR_OWVAR 42
23937: PUSH
23938: LD_INT 2
23940: ST_TO_ADDR
23941: GO 24341
23943: LD_INT 15
23945: DOUBLE
23946: EQUAL
23947: IFTRUE 23951
23949: GO 23962
23951: POP
// bc_type := b_factory ; 16 :
23952: LD_ADDR_OWVAR 42
23956: PUSH
23957: LD_INT 3
23959: ST_TO_ADDR
23960: GO 24341
23962: LD_INT 16
23964: DOUBLE
23965: EQUAL
23966: IFTRUE 23970
23968: GO 23981
23970: POP
// bc_type := b_ext_gun ; 17 :
23971: LD_ADDR_OWVAR 42
23975: PUSH
23976: LD_INT 17
23978: ST_TO_ADDR
23979: GO 24341
23981: LD_INT 17
23983: DOUBLE
23984: EQUAL
23985: IFTRUE 23989
23987: GO 24017
23989: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23990: LD_ADDR_OWVAR 42
23994: PUSH
23995: LD_INT 19
23997: PUSH
23998: LD_INT 23
24000: PUSH
24001: LD_INT 19
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: LIST
24008: PUSH
24009: LD_VAR 0 1
24013: ARRAY
24014: ST_TO_ADDR
24015: GO 24341
24017: LD_INT 18
24019: DOUBLE
24020: EQUAL
24021: IFTRUE 24025
24023: GO 24036
24025: POP
// bc_type := b_ext_radar ; 19 :
24026: LD_ADDR_OWVAR 42
24030: PUSH
24031: LD_INT 20
24033: ST_TO_ADDR
24034: GO 24341
24036: LD_INT 19
24038: DOUBLE
24039: EQUAL
24040: IFTRUE 24044
24042: GO 24055
24044: POP
// bc_type := b_ext_radio ; 20 :
24045: LD_ADDR_OWVAR 42
24049: PUSH
24050: LD_INT 22
24052: ST_TO_ADDR
24053: GO 24341
24055: LD_INT 20
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24074
24063: POP
// bc_type := b_ext_siberium ; 21 :
24064: LD_ADDR_OWVAR 42
24068: PUSH
24069: LD_INT 21
24071: ST_TO_ADDR
24072: GO 24341
24074: LD_INT 21
24076: DOUBLE
24077: EQUAL
24078: IFTRUE 24082
24080: GO 24093
24082: POP
// bc_type := b_ext_computer ; 22 :
24083: LD_ADDR_OWVAR 42
24087: PUSH
24088: LD_INT 24
24090: ST_TO_ADDR
24091: GO 24341
24093: LD_INT 22
24095: DOUBLE
24096: EQUAL
24097: IFTRUE 24101
24099: GO 24112
24101: POP
// bc_type := b_ext_track ; 23 :
24102: LD_ADDR_OWVAR 42
24106: PUSH
24107: LD_INT 16
24109: ST_TO_ADDR
24110: GO 24341
24112: LD_INT 23
24114: DOUBLE
24115: EQUAL
24116: IFTRUE 24120
24118: GO 24131
24120: POP
// bc_type := b_ext_laser ; 24 :
24121: LD_ADDR_OWVAR 42
24125: PUSH
24126: LD_INT 25
24128: ST_TO_ADDR
24129: GO 24341
24131: LD_INT 24
24133: DOUBLE
24134: EQUAL
24135: IFTRUE 24139
24137: GO 24150
24139: POP
// bc_type := b_control_tower ; 25 :
24140: LD_ADDR_OWVAR 42
24144: PUSH
24145: LD_INT 36
24147: ST_TO_ADDR
24148: GO 24341
24150: LD_INT 25
24152: DOUBLE
24153: EQUAL
24154: IFTRUE 24158
24156: GO 24169
24158: POP
// bc_type := b_breastwork ; 26 :
24159: LD_ADDR_OWVAR 42
24163: PUSH
24164: LD_INT 31
24166: ST_TO_ADDR
24167: GO 24341
24169: LD_INT 26
24171: DOUBLE
24172: EQUAL
24173: IFTRUE 24177
24175: GO 24188
24177: POP
// bc_type := b_bunker ; 27 :
24178: LD_ADDR_OWVAR 42
24182: PUSH
24183: LD_INT 32
24185: ST_TO_ADDR
24186: GO 24341
24188: LD_INT 27
24190: DOUBLE
24191: EQUAL
24192: IFTRUE 24196
24194: GO 24207
24196: POP
// bc_type := b_turret ; 28 :
24197: LD_ADDR_OWVAR 42
24201: PUSH
24202: LD_INT 33
24204: ST_TO_ADDR
24205: GO 24341
24207: LD_INT 28
24209: DOUBLE
24210: EQUAL
24211: IFTRUE 24215
24213: GO 24226
24215: POP
// bc_type := b_armoury ; 29 :
24216: LD_ADDR_OWVAR 42
24220: PUSH
24221: LD_INT 4
24223: ST_TO_ADDR
24224: GO 24341
24226: LD_INT 29
24228: DOUBLE
24229: EQUAL
24230: IFTRUE 24234
24232: GO 24245
24234: POP
// bc_type := b_barracks ; 30 :
24235: LD_ADDR_OWVAR 42
24239: PUSH
24240: LD_INT 5
24242: ST_TO_ADDR
24243: GO 24341
24245: LD_INT 30
24247: DOUBLE
24248: EQUAL
24249: IFTRUE 24253
24251: GO 24264
24253: POP
// bc_type := b_solar_power ; 31 :
24254: LD_ADDR_OWVAR 42
24258: PUSH
24259: LD_INT 27
24261: ST_TO_ADDR
24262: GO 24341
24264: LD_INT 31
24266: DOUBLE
24267: EQUAL
24268: IFTRUE 24272
24270: GO 24283
24272: POP
// bc_type := b_oil_power ; 32 :
24273: LD_ADDR_OWVAR 42
24277: PUSH
24278: LD_INT 26
24280: ST_TO_ADDR
24281: GO 24341
24283: LD_INT 32
24285: DOUBLE
24286: EQUAL
24287: IFTRUE 24291
24289: GO 24302
24291: POP
// bc_type := b_siberite_power ; 33 :
24292: LD_ADDR_OWVAR 42
24296: PUSH
24297: LD_INT 28
24299: ST_TO_ADDR
24300: GO 24341
24302: LD_INT 33
24304: DOUBLE
24305: EQUAL
24306: IFTRUE 24310
24308: GO 24321
24310: POP
// bc_type := b_oil_mine ; 34 :
24311: LD_ADDR_OWVAR 42
24315: PUSH
24316: LD_INT 29
24318: ST_TO_ADDR
24319: GO 24341
24321: LD_INT 34
24323: DOUBLE
24324: EQUAL
24325: IFTRUE 24329
24327: GO 24340
24329: POP
// bc_type := b_siberite_mine ; end ;
24330: LD_ADDR_OWVAR 42
24334: PUSH
24335: LD_INT 30
24337: ST_TO_ADDR
24338: GO 24341
24340: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24341: LD_ADDR_VAR 0 8
24345: PUSH
24346: LD_VAR 0 5
24350: PPUSH
24351: LD_VAR 0 6
24355: PPUSH
24356: LD_VAR 0 3
24360: PPUSH
24361: CALL_OW 47
24365: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24366: LD_OWVAR 42
24370: PUSH
24371: LD_INT 32
24373: PUSH
24374: LD_INT 33
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: IN
24381: IFFALSE 24397
// PlaceWeaponTurret ( b , weapon ) ;
24383: LD_VAR 0 8
24387: PPUSH
24388: LD_VAR 0 4
24392: PPUSH
24393: CALL_OW 431
// end ;
24397: LD_VAR 0 7
24401: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24402: LD_INT 0
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24408: LD_ADDR_VAR 0 4
24412: PUSH
24413: LD_INT 22
24415: PUSH
24416: LD_OWVAR 2
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: LD_INT 30
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 30
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PPUSH
24457: CALL_OW 69
24461: ST_TO_ADDR
// if not tmp then
24462: LD_VAR 0 4
24466: NOT
24467: IFFALSE 24471
// exit ;
24469: GO 24530
// for i in tmp do
24471: LD_ADDR_VAR 0 2
24475: PUSH
24476: LD_VAR 0 4
24480: PUSH
24481: FOR_IN
24482: IFFALSE 24528
// for j = 1 to 3 do
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: DOUBLE
24490: LD_INT 1
24492: DEC
24493: ST_TO_ADDR
24494: LD_INT 3
24496: PUSH
24497: FOR_TO
24498: IFFALSE 24524
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24500: LD_VAR 0 2
24504: PPUSH
24505: CALL_OW 274
24509: PPUSH
24510: LD_VAR 0 3
24514: PPUSH
24515: LD_INT 99999
24517: PPUSH
24518: CALL_OW 277
24522: GO 24497
24524: POP
24525: POP
24526: GO 24481
24528: POP
24529: POP
// end ;
24530: LD_VAR 0 1
24534: RET
// export function hHackSetLevel10 ; var i , j ; begin
24535: LD_INT 0
24537: PPUSH
24538: PPUSH
24539: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24540: LD_ADDR_VAR 0 2
24544: PUSH
24545: LD_INT 21
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PPUSH
24555: CALL_OW 69
24559: PUSH
24560: FOR_IN
24561: IFFALSE 24613
// if IsSelected ( i ) then
24563: LD_VAR 0 2
24567: PPUSH
24568: CALL_OW 306
24572: IFFALSE 24611
// begin for j := 1 to 4 do
24574: LD_ADDR_VAR 0 3
24578: PUSH
24579: DOUBLE
24580: LD_INT 1
24582: DEC
24583: ST_TO_ADDR
24584: LD_INT 4
24586: PUSH
24587: FOR_TO
24588: IFFALSE 24609
// SetSkill ( i , j , 10 ) ;
24590: LD_VAR 0 2
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: LD_INT 10
24602: PPUSH
24603: CALL_OW 237
24607: GO 24587
24609: POP
24610: POP
// end ;
24611: GO 24560
24613: POP
24614: POP
// end ;
24615: LD_VAR 0 1
24619: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
24624: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24625: LD_ADDR_VAR 0 2
24629: PUSH
24630: LD_INT 22
24632: PUSH
24633: LD_OWVAR 2
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 21
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PPUSH
24656: CALL_OW 69
24660: PUSH
24661: FOR_IN
24662: IFFALSE 24703
// begin for j := 1 to 4 do
24664: LD_ADDR_VAR 0 3
24668: PUSH
24669: DOUBLE
24670: LD_INT 1
24672: DEC
24673: ST_TO_ADDR
24674: LD_INT 4
24676: PUSH
24677: FOR_TO
24678: IFFALSE 24699
// SetSkill ( i , j , 10 ) ;
24680: LD_VAR 0 2
24684: PPUSH
24685: LD_VAR 0 3
24689: PPUSH
24690: LD_INT 10
24692: PPUSH
24693: CALL_OW 237
24697: GO 24677
24699: POP
24700: POP
// end ;
24701: GO 24661
24703: POP
24704: POP
// end ;
24705: LD_VAR 0 1
24709: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24710: LD_INT 0
24712: PPUSH
// uc_side := your_side ;
24713: LD_ADDR_OWVAR 20
24717: PUSH
24718: LD_OWVAR 2
24722: ST_TO_ADDR
// uc_nation := nation ;
24723: LD_ADDR_OWVAR 21
24727: PUSH
24728: LD_VAR 0 1
24732: ST_TO_ADDR
// InitHc ;
24733: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24737: LD_INT 0
24739: PPUSH
24740: LD_VAR 0 2
24744: PPUSH
24745: LD_VAR 0 3
24749: PPUSH
24750: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24754: LD_VAR 0 4
24758: PPUSH
24759: LD_VAR 0 5
24763: PPUSH
24764: CALL_OW 428
24768: PUSH
24769: LD_INT 0
24771: EQUAL
24772: IFFALSE 24796
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24774: CALL_OW 44
24778: PPUSH
24779: LD_VAR 0 4
24783: PPUSH
24784: LD_VAR 0 5
24788: PPUSH
24789: LD_INT 1
24791: PPUSH
24792: CALL_OW 48
// end ;
24796: LD_VAR 0 6
24800: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24801: LD_INT 0
24803: PPUSH
24804: PPUSH
// uc_side := your_side ;
24805: LD_ADDR_OWVAR 20
24809: PUSH
24810: LD_OWVAR 2
24814: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24815: LD_VAR 0 1
24819: PUSH
24820: LD_INT 1
24822: PUSH
24823: LD_INT 2
24825: PUSH
24826: LD_INT 3
24828: PUSH
24829: LD_INT 4
24831: PUSH
24832: LD_INT 5
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: IN
24842: IFFALSE 24854
// uc_nation := nation_american else
24844: LD_ADDR_OWVAR 21
24848: PUSH
24849: LD_INT 1
24851: ST_TO_ADDR
24852: GO 24897
// if chassis in [ 11 , 12 , 13 , 14 ] then
24854: LD_VAR 0 1
24858: PUSH
24859: LD_INT 11
24861: PUSH
24862: LD_INT 12
24864: PUSH
24865: LD_INT 13
24867: PUSH
24868: LD_INT 14
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: IN
24877: IFFALSE 24889
// uc_nation := nation_arabian else
24879: LD_ADDR_OWVAR 21
24883: PUSH
24884: LD_INT 2
24886: ST_TO_ADDR
24887: GO 24897
// uc_nation := nation_russian ;
24889: LD_ADDR_OWVAR 21
24893: PUSH
24894: LD_INT 3
24896: ST_TO_ADDR
// vc_chassis := chassis ;
24897: LD_ADDR_OWVAR 37
24901: PUSH
24902: LD_VAR 0 1
24906: ST_TO_ADDR
// vc_engine := engine ;
24907: LD_ADDR_OWVAR 39
24911: PUSH
24912: LD_VAR 0 2
24916: ST_TO_ADDR
// vc_control := control ;
24917: LD_ADDR_OWVAR 38
24921: PUSH
24922: LD_VAR 0 3
24926: ST_TO_ADDR
// vc_weapon := weapon ;
24927: LD_ADDR_OWVAR 40
24931: PUSH
24932: LD_VAR 0 4
24936: ST_TO_ADDR
// un := CreateVehicle ;
24937: LD_ADDR_VAR 0 8
24941: PUSH
24942: CALL_OW 45
24946: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24947: LD_VAR 0 8
24951: PPUSH
24952: LD_INT 0
24954: PPUSH
24955: LD_INT 5
24957: PPUSH
24958: CALL_OW 12
24962: PPUSH
24963: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24967: LD_VAR 0 8
24971: PPUSH
24972: LD_VAR 0 5
24976: PPUSH
24977: LD_VAR 0 6
24981: PPUSH
24982: LD_INT 1
24984: PPUSH
24985: CALL_OW 48
// end ;
24989: LD_VAR 0 7
24993: RET
// export hInvincible ; every 1 do
24994: GO 24996
24996: DISABLE
// hInvincible := [ ] ;
24997: LD_ADDR_EXP 72
25001: PUSH
25002: EMPTY
25003: ST_TO_ADDR
25004: END
// every 10 do var i ;
25005: GO 25007
25007: DISABLE
25008: LD_INT 0
25010: PPUSH
// begin enable ;
25011: ENABLE
// if not hInvincible then
25012: LD_EXP 72
25016: NOT
25017: IFFALSE 25021
// exit ;
25019: GO 25065
// for i in hInvincible do
25021: LD_ADDR_VAR 0 1
25025: PUSH
25026: LD_EXP 72
25030: PUSH
25031: FOR_IN
25032: IFFALSE 25063
// if GetLives ( i ) < 1000 then
25034: LD_VAR 0 1
25038: PPUSH
25039: CALL_OW 256
25043: PUSH
25044: LD_INT 1000
25046: LESS
25047: IFFALSE 25061
// SetLives ( i , 1000 ) ;
25049: LD_VAR 0 1
25053: PPUSH
25054: LD_INT 1000
25056: PPUSH
25057: CALL_OW 234
25061: GO 25031
25063: POP
25064: POP
// end ;
25065: PPOPN 1
25067: END
// export function hHackInvincible ; var i ; begin
25068: LD_INT 0
25070: PPUSH
25071: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25072: LD_ADDR_VAR 0 2
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: LD_INT 21
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 21
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: PPUSH
25105: CALL_OW 69
25109: PUSH
25110: FOR_IN
25111: IFFALSE 25172
// if IsSelected ( i ) then
25113: LD_VAR 0 2
25117: PPUSH
25118: CALL_OW 306
25122: IFFALSE 25170
// begin if i in hInvincible then
25124: LD_VAR 0 2
25128: PUSH
25129: LD_EXP 72
25133: IN
25134: IFFALSE 25154
// hInvincible := hInvincible diff i else
25136: LD_ADDR_EXP 72
25140: PUSH
25141: LD_EXP 72
25145: PUSH
25146: LD_VAR 0 2
25150: DIFF
25151: ST_TO_ADDR
25152: GO 25170
// hInvincible := hInvincible union i ;
25154: LD_ADDR_EXP 72
25158: PUSH
25159: LD_EXP 72
25163: PUSH
25164: LD_VAR 0 2
25168: UNION
25169: ST_TO_ADDR
// end ;
25170: GO 25110
25172: POP
25173: POP
// end ;
25174: LD_VAR 0 1
25178: RET
// export function hHackInvisible ; var i , j ; begin
25179: LD_INT 0
25181: PPUSH
25182: PPUSH
25183: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25184: LD_ADDR_VAR 0 2
25188: PUSH
25189: LD_INT 21
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PPUSH
25199: CALL_OW 69
25203: PUSH
25204: FOR_IN
25205: IFFALSE 25229
// if IsSelected ( i ) then
25207: LD_VAR 0 2
25211: PPUSH
25212: CALL_OW 306
25216: IFFALSE 25227
// ComForceInvisible ( i ) ;
25218: LD_VAR 0 2
25222: PPUSH
25223: CALL_OW 496
25227: GO 25204
25229: POP
25230: POP
// end ;
25231: LD_VAR 0 1
25235: RET
// export function hHackChangeYourSide ; begin
25236: LD_INT 0
25238: PPUSH
// if your_side = 8 then
25239: LD_OWVAR 2
25243: PUSH
25244: LD_INT 8
25246: EQUAL
25247: IFFALSE 25259
// your_side := 0 else
25249: LD_ADDR_OWVAR 2
25253: PUSH
25254: LD_INT 0
25256: ST_TO_ADDR
25257: GO 25273
// your_side := your_side + 1 ;
25259: LD_ADDR_OWVAR 2
25263: PUSH
25264: LD_OWVAR 2
25268: PUSH
25269: LD_INT 1
25271: PLUS
25272: ST_TO_ADDR
// end ;
25273: LD_VAR 0 1
25277: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25278: LD_INT 0
25280: PPUSH
25281: PPUSH
25282: PPUSH
// for i in all_units do
25283: LD_ADDR_VAR 0 2
25287: PUSH
25288: LD_OWVAR 3
25292: PUSH
25293: FOR_IN
25294: IFFALSE 25372
// if IsSelected ( i ) then
25296: LD_VAR 0 2
25300: PPUSH
25301: CALL_OW 306
25305: IFFALSE 25370
// begin j := GetSide ( i ) ;
25307: LD_ADDR_VAR 0 3
25311: PUSH
25312: LD_VAR 0 2
25316: PPUSH
25317: CALL_OW 255
25321: ST_TO_ADDR
// if j = 8 then
25322: LD_VAR 0 3
25326: PUSH
25327: LD_INT 8
25329: EQUAL
25330: IFFALSE 25342
// j := 0 else
25332: LD_ADDR_VAR 0 3
25336: PUSH
25337: LD_INT 0
25339: ST_TO_ADDR
25340: GO 25356
// j := j + 1 ;
25342: LD_ADDR_VAR 0 3
25346: PUSH
25347: LD_VAR 0 3
25351: PUSH
25352: LD_INT 1
25354: PLUS
25355: ST_TO_ADDR
// SetSide ( i , j ) ;
25356: LD_VAR 0 2
25360: PPUSH
25361: LD_VAR 0 3
25365: PPUSH
25366: CALL_OW 235
// end ;
25370: GO 25293
25372: POP
25373: POP
// end ;
25374: LD_VAR 0 1
25378: RET
// export function hHackFog ; begin
25379: LD_INT 0
25381: PPUSH
// FogOff ( true ) ;
25382: LD_INT 1
25384: PPUSH
25385: CALL_OW 344
// end ;
25389: LD_VAR 0 1
25393: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25394: LD_INT 0
25396: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25397: LD_VAR 0 1
25401: PPUSH
25402: LD_VAR 0 2
25406: PPUSH
25407: LD_VAR 0 3
25411: PPUSH
25412: LD_INT 1
25414: PPUSH
25415: LD_INT 1
25417: PPUSH
25418: CALL_OW 483
// CenterOnXY ( x , y ) ;
25422: LD_VAR 0 2
25426: PPUSH
25427: LD_VAR 0 3
25431: PPUSH
25432: CALL_OW 84
// end ;
25436: LD_VAR 0 4
25440: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25441: LD_INT 0
25443: PPUSH
25444: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25445: LD_VAR 0 1
25449: NOT
25450: PUSH
25451: LD_VAR 0 2
25455: PPUSH
25456: LD_VAR 0 3
25460: PPUSH
25461: CALL_OW 488
25465: NOT
25466: OR
25467: PUSH
25468: LD_VAR 0 1
25472: PPUSH
25473: CALL_OW 266
25477: PUSH
25478: LD_INT 3
25480: NONEQUAL
25481: PUSH
25482: LD_VAR 0 1
25486: PPUSH
25487: CALL_OW 247
25491: PUSH
25492: LD_INT 1
25494: EQUAL
25495: NOT
25496: AND
25497: OR
25498: IFFALSE 25502
// exit ;
25500: GO 25651
// if GetType ( factory ) = unit_human then
25502: LD_VAR 0 1
25506: PPUSH
25507: CALL_OW 247
25511: PUSH
25512: LD_INT 1
25514: EQUAL
25515: IFFALSE 25532
// factory := IsInUnit ( factory ) ;
25517: LD_ADDR_VAR 0 1
25521: PUSH
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 310
25531: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25532: LD_VAR 0 1
25536: PPUSH
25537: CALL_OW 266
25541: PUSH
25542: LD_INT 3
25544: NONEQUAL
25545: IFFALSE 25549
// exit ;
25547: GO 25651
// if HexInfo ( x , y ) = factory then
25549: LD_VAR 0 2
25553: PPUSH
25554: LD_VAR 0 3
25558: PPUSH
25559: CALL_OW 428
25563: PUSH
25564: LD_VAR 0 1
25568: EQUAL
25569: IFFALSE 25596
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25571: LD_ADDR_EXP 73
25575: PUSH
25576: LD_EXP 73
25580: PPUSH
25581: LD_VAR 0 1
25585: PPUSH
25586: LD_INT 0
25588: PPUSH
25589: CALL_OW 1
25593: ST_TO_ADDR
25594: GO 25647
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25596: LD_ADDR_EXP 73
25600: PUSH
25601: LD_EXP 73
25605: PPUSH
25606: LD_VAR 0 1
25610: PPUSH
25611: LD_VAR 0 1
25615: PPUSH
25616: CALL_OW 255
25620: PUSH
25621: LD_VAR 0 1
25625: PUSH
25626: LD_VAR 0 2
25630: PUSH
25631: LD_VAR 0 3
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: PPUSH
25642: CALL_OW 1
25646: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25647: CALL 25656 0 0
// end ;
25651: LD_VAR 0 4
25655: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25656: LD_INT 0
25658: PPUSH
25659: PPUSH
25660: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25661: LD_STRING resetFactoryWaypoint();
25663: PPUSH
25664: CALL_OW 559
// if factoryWaypoints then
25668: LD_EXP 73
25672: IFFALSE 25798
// begin list := PrepareArray ( factoryWaypoints ) ;
25674: LD_ADDR_VAR 0 3
25678: PUSH
25679: LD_EXP 73
25683: PPUSH
25684: CALL 72267 0 1
25688: ST_TO_ADDR
// for i := 1 to list do
25689: LD_ADDR_VAR 0 2
25693: PUSH
25694: DOUBLE
25695: LD_INT 1
25697: DEC
25698: ST_TO_ADDR
25699: LD_VAR 0 3
25703: PUSH
25704: FOR_TO
25705: IFFALSE 25796
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25707: LD_STRING setFactoryWaypointXY(
25709: PUSH
25710: LD_VAR 0 3
25714: PUSH
25715: LD_VAR 0 2
25719: ARRAY
25720: PUSH
25721: LD_INT 1
25723: ARRAY
25724: STR
25725: PUSH
25726: LD_STRING ,
25728: STR
25729: PUSH
25730: LD_VAR 0 3
25734: PUSH
25735: LD_VAR 0 2
25739: ARRAY
25740: PUSH
25741: LD_INT 2
25743: ARRAY
25744: STR
25745: PUSH
25746: LD_STRING ,
25748: STR
25749: PUSH
25750: LD_VAR 0 3
25754: PUSH
25755: LD_VAR 0 2
25759: ARRAY
25760: PUSH
25761: LD_INT 3
25763: ARRAY
25764: STR
25765: PUSH
25766: LD_STRING ,
25768: STR
25769: PUSH
25770: LD_VAR 0 3
25774: PUSH
25775: LD_VAR 0 2
25779: ARRAY
25780: PUSH
25781: LD_INT 4
25783: ARRAY
25784: STR
25785: PUSH
25786: LD_STRING )
25788: STR
25789: PPUSH
25790: CALL_OW 559
25794: GO 25704
25796: POP
25797: POP
// end ; end ;
25798: LD_VAR 0 1
25802: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25803: LD_INT 0
25805: PPUSH
// if HexInfo ( x , y ) = warehouse then
25806: LD_VAR 0 2
25810: PPUSH
25811: LD_VAR 0 3
25815: PPUSH
25816: CALL_OW 428
25820: PUSH
25821: LD_VAR 0 1
25825: EQUAL
25826: IFFALSE 25853
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25828: LD_ADDR_EXP 74
25832: PUSH
25833: LD_EXP 74
25837: PPUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: LD_INT 0
25845: PPUSH
25846: CALL_OW 1
25850: ST_TO_ADDR
25851: GO 25904
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25853: LD_ADDR_EXP 74
25857: PUSH
25858: LD_EXP 74
25862: PPUSH
25863: LD_VAR 0 1
25867: PPUSH
25868: LD_VAR 0 1
25872: PPUSH
25873: CALL_OW 255
25877: PUSH
25878: LD_VAR 0 1
25882: PUSH
25883: LD_VAR 0 2
25887: PUSH
25888: LD_VAR 0 3
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: PPUSH
25899: CALL_OW 1
25903: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25904: CALL 25913 0 0
// end ;
25908: LD_VAR 0 4
25912: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25913: LD_INT 0
25915: PPUSH
25916: PPUSH
25917: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25918: LD_STRING resetWarehouseGatheringPoints();
25920: PPUSH
25921: CALL_OW 559
// if warehouseGatheringPoints then
25925: LD_EXP 74
25929: IFFALSE 26055
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25931: LD_ADDR_VAR 0 3
25935: PUSH
25936: LD_EXP 74
25940: PPUSH
25941: CALL 72267 0 1
25945: ST_TO_ADDR
// for i := 1 to list do
25946: LD_ADDR_VAR 0 2
25950: PUSH
25951: DOUBLE
25952: LD_INT 1
25954: DEC
25955: ST_TO_ADDR
25956: LD_VAR 0 3
25960: PUSH
25961: FOR_TO
25962: IFFALSE 26053
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25964: LD_STRING setWarehouseGatheringPointXY(
25966: PUSH
25967: LD_VAR 0 3
25971: PUSH
25972: LD_VAR 0 2
25976: ARRAY
25977: PUSH
25978: LD_INT 1
25980: ARRAY
25981: STR
25982: PUSH
25983: LD_STRING ,
25985: STR
25986: PUSH
25987: LD_VAR 0 3
25991: PUSH
25992: LD_VAR 0 2
25996: ARRAY
25997: PUSH
25998: LD_INT 2
26000: ARRAY
26001: STR
26002: PUSH
26003: LD_STRING ,
26005: STR
26006: PUSH
26007: LD_VAR 0 3
26011: PUSH
26012: LD_VAR 0 2
26016: ARRAY
26017: PUSH
26018: LD_INT 3
26020: ARRAY
26021: STR
26022: PUSH
26023: LD_STRING ,
26025: STR
26026: PUSH
26027: LD_VAR 0 3
26031: PUSH
26032: LD_VAR 0 2
26036: ARRAY
26037: PUSH
26038: LD_INT 4
26040: ARRAY
26041: STR
26042: PUSH
26043: LD_STRING )
26045: STR
26046: PPUSH
26047: CALL_OW 559
26051: GO 25961
26053: POP
26054: POP
// end ; end ;
26055: LD_VAR 0 1
26059: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26060: LD_EXP 74
26064: IFFALSE 26749
26066: GO 26068
26068: DISABLE
26069: LD_INT 0
26071: PPUSH
26072: PPUSH
26073: PPUSH
26074: PPUSH
26075: PPUSH
26076: PPUSH
26077: PPUSH
26078: PPUSH
26079: PPUSH
// begin enable ;
26080: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26081: LD_ADDR_VAR 0 3
26085: PUSH
26086: LD_EXP 74
26090: PPUSH
26091: CALL 72267 0 1
26095: ST_TO_ADDR
// if not list then
26096: LD_VAR 0 3
26100: NOT
26101: IFFALSE 26105
// exit ;
26103: GO 26749
// for i := 1 to list do
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: DOUBLE
26111: LD_INT 1
26113: DEC
26114: ST_TO_ADDR
26115: LD_VAR 0 3
26119: PUSH
26120: FOR_TO
26121: IFFALSE 26747
// begin depot := list [ i ] [ 2 ] ;
26123: LD_ADDR_VAR 0 8
26127: PUSH
26128: LD_VAR 0 3
26132: PUSH
26133: LD_VAR 0 1
26137: ARRAY
26138: PUSH
26139: LD_INT 2
26141: ARRAY
26142: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26143: LD_ADDR_VAR 0 5
26147: PUSH
26148: LD_VAR 0 3
26152: PUSH
26153: LD_VAR 0 1
26157: ARRAY
26158: PUSH
26159: LD_INT 1
26161: ARRAY
26162: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26163: LD_VAR 0 8
26167: PPUSH
26168: CALL_OW 301
26172: PUSH
26173: LD_VAR 0 5
26177: PUSH
26178: LD_VAR 0 8
26182: PPUSH
26183: CALL_OW 255
26187: NONEQUAL
26188: OR
26189: IFFALSE 26218
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26191: LD_ADDR_EXP 74
26195: PUSH
26196: LD_EXP 74
26200: PPUSH
26201: LD_VAR 0 8
26205: PPUSH
26206: LD_INT 0
26208: PPUSH
26209: CALL_OW 1
26213: ST_TO_ADDR
// exit ;
26214: POP
26215: POP
26216: GO 26749
// end ; x := list [ i ] [ 3 ] ;
26218: LD_ADDR_VAR 0 6
26222: PUSH
26223: LD_VAR 0 3
26227: PUSH
26228: LD_VAR 0 1
26232: ARRAY
26233: PUSH
26234: LD_INT 3
26236: ARRAY
26237: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26238: LD_ADDR_VAR 0 7
26242: PUSH
26243: LD_VAR 0 3
26247: PUSH
26248: LD_VAR 0 1
26252: ARRAY
26253: PUSH
26254: LD_INT 4
26256: ARRAY
26257: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26258: LD_ADDR_VAR 0 9
26262: PUSH
26263: LD_VAR 0 6
26267: PPUSH
26268: LD_VAR 0 7
26272: PPUSH
26273: LD_INT 16
26275: PPUSH
26276: CALL 70855 0 3
26280: ST_TO_ADDR
// if not cratesNearbyPoint then
26281: LD_VAR 0 9
26285: NOT
26286: IFFALSE 26292
// exit ;
26288: POP
26289: POP
26290: GO 26749
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26292: LD_ADDR_VAR 0 4
26296: PUSH
26297: LD_INT 22
26299: PUSH
26300: LD_VAR 0 5
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 3
26311: PUSH
26312: LD_INT 60
26314: PUSH
26315: EMPTY
26316: LIST
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 91
26324: PUSH
26325: LD_VAR 0 8
26329: PUSH
26330: LD_INT 6
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: LD_INT 25
26343: PUSH
26344: LD_INT 2
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 25
26353: PUSH
26354: LD_INT 16
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: PPUSH
26372: CALL_OW 69
26376: PUSH
26377: LD_VAR 0 8
26381: PPUSH
26382: CALL_OW 313
26386: PPUSH
26387: LD_INT 3
26389: PUSH
26390: LD_INT 60
26392: PUSH
26393: EMPTY
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: LD_INT 25
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 25
26415: PUSH
26416: LD_INT 16
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: LIST
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PPUSH
26432: CALL_OW 72
26436: UNION
26437: ST_TO_ADDR
// if tmp then
26438: LD_VAR 0 4
26442: IFFALSE 26522
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26444: LD_ADDR_VAR 0 4
26448: PUSH
26449: LD_VAR 0 4
26453: PPUSH
26454: LD_INT 3
26456: PPUSH
26457: CALL 68824 0 2
26461: ST_TO_ADDR
// for j in tmp do
26462: LD_ADDR_VAR 0 2
26466: PUSH
26467: LD_VAR 0 4
26471: PUSH
26472: FOR_IN
26473: IFFALSE 26516
// begin if IsInUnit ( j ) then
26475: LD_VAR 0 2
26479: PPUSH
26480: CALL_OW 310
26484: IFFALSE 26495
// ComExit ( j ) ;
26486: LD_VAR 0 2
26490: PPUSH
26491: CALL 68907 0 1
// AddComCollect ( j , x , y ) ;
26495: LD_VAR 0 2
26499: PPUSH
26500: LD_VAR 0 6
26504: PPUSH
26505: LD_VAR 0 7
26509: PPUSH
26510: CALL_OW 177
// end ;
26514: GO 26472
26516: POP
26517: POP
// exit ;
26518: POP
26519: POP
26520: GO 26749
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26522: LD_ADDR_VAR 0 4
26526: PUSH
26527: LD_INT 22
26529: PUSH
26530: LD_VAR 0 5
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 91
26541: PUSH
26542: LD_VAR 0 8
26546: PUSH
26547: LD_INT 8
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: LD_INT 34
26560: PUSH
26561: LD_INT 12
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 34
26570: PUSH
26571: LD_INT 51
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 34
26580: PUSH
26581: LD_INT 32
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 34
26590: PUSH
26591: LD_INT 89
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: LIST
26609: PPUSH
26610: CALL_OW 69
26614: ST_TO_ADDR
// if tmp then
26615: LD_VAR 0 4
26619: IFFALSE 26745
// begin for j in tmp do
26621: LD_ADDR_VAR 0 2
26625: PUSH
26626: LD_VAR 0 4
26630: PUSH
26631: FOR_IN
26632: IFFALSE 26743
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26634: LD_VAR 0 2
26638: PPUSH
26639: CALL_OW 262
26643: PUSH
26644: LD_INT 3
26646: EQUAL
26647: PUSH
26648: LD_VAR 0 2
26652: PPUSH
26653: CALL_OW 261
26657: PUSH
26658: LD_INT 20
26660: GREATER
26661: OR
26662: PUSH
26663: LD_VAR 0 2
26667: PPUSH
26668: CALL_OW 314
26672: NOT
26673: AND
26674: PUSH
26675: LD_VAR 0 2
26679: PPUSH
26680: CALL_OW 263
26684: PUSH
26685: LD_INT 1
26687: NONEQUAL
26688: PUSH
26689: LD_VAR 0 2
26693: PPUSH
26694: CALL_OW 311
26698: OR
26699: AND
26700: IFFALSE 26741
// begin ComCollect ( j , x , y ) ;
26702: LD_VAR 0 2
26706: PPUSH
26707: LD_VAR 0 6
26711: PPUSH
26712: LD_VAR 0 7
26716: PPUSH
26717: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26721: LD_VAR 0 2
26725: PPUSH
26726: LD_VAR 0 8
26730: PPUSH
26731: CALL_OW 172
// exit ;
26735: POP
26736: POP
26737: POP
26738: POP
26739: GO 26749
// end ;
26741: GO 26631
26743: POP
26744: POP
// end ; end ;
26745: GO 26120
26747: POP
26748: POP
// end ; end_of_file
26749: PPOPN 9
26751: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26752: LD_INT 0
26754: PPUSH
26755: PPUSH
26756: PPUSH
26757: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26758: LD_VAR 0 1
26762: PPUSH
26763: CALL_OW 264
26767: PUSH
26768: LD_INT 91
26770: EQUAL
26771: IFFALSE 26843
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26773: LD_INT 68
26775: PPUSH
26776: LD_VAR 0 1
26780: PPUSH
26781: CALL_OW 255
26785: PPUSH
26786: CALL_OW 321
26790: PUSH
26791: LD_INT 2
26793: EQUAL
26794: IFFALSE 26806
// eff := 70 else
26796: LD_ADDR_VAR 0 4
26800: PUSH
26801: LD_INT 70
26803: ST_TO_ADDR
26804: GO 26814
// eff := 30 ;
26806: LD_ADDR_VAR 0 4
26810: PUSH
26811: LD_INT 30
26813: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL_OW 250
26823: PPUSH
26824: LD_VAR 0 1
26828: PPUSH
26829: CALL_OW 251
26833: PPUSH
26834: LD_VAR 0 4
26838: PPUSH
26839: CALL_OW 495
// end ; end ;
26843: LD_VAR 0 2
26847: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26848: LD_INT 0
26850: PPUSH
// end ;
26851: LD_VAR 0 4
26855: RET
// export function SOS_Command ( cmd ) ; begin
26856: LD_INT 0
26858: PPUSH
// end ;
26859: LD_VAR 0 2
26863: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26864: LD_INT 0
26866: PPUSH
// end ;
26867: LD_VAR 0 6
26871: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26872: LD_INT 0
26874: PPUSH
26875: PPUSH
// if not vehicle or not factory then
26876: LD_VAR 0 1
26880: NOT
26881: PUSH
26882: LD_VAR 0 2
26886: NOT
26887: OR
26888: IFFALSE 26892
// exit ;
26890: GO 27123
// if factoryWaypoints >= factory then
26892: LD_EXP 73
26896: PUSH
26897: LD_VAR 0 2
26901: GREATEREQUAL
26902: IFFALSE 27123
// if factoryWaypoints [ factory ] then
26904: LD_EXP 73
26908: PUSH
26909: LD_VAR 0 2
26913: ARRAY
26914: IFFALSE 27123
// begin if GetControl ( vehicle ) = control_manual then
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 263
26925: PUSH
26926: LD_INT 1
26928: EQUAL
26929: IFFALSE 27010
// begin driver := IsDrivenBy ( vehicle ) ;
26931: LD_ADDR_VAR 0 4
26935: PUSH
26936: LD_VAR 0 1
26940: PPUSH
26941: CALL_OW 311
26945: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26946: LD_VAR 0 4
26950: PPUSH
26951: LD_EXP 73
26955: PUSH
26956: LD_VAR 0 2
26960: ARRAY
26961: PUSH
26962: LD_INT 3
26964: ARRAY
26965: PPUSH
26966: LD_EXP 73
26970: PUSH
26971: LD_VAR 0 2
26975: ARRAY
26976: PUSH
26977: LD_INT 4
26979: ARRAY
26980: PPUSH
26981: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26985: LD_VAR 0 4
26989: PPUSH
26990: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26994: LD_VAR 0 4
26998: PPUSH
26999: LD_VAR 0 2
27003: PPUSH
27004: CALL_OW 180
// end else
27008: GO 27123
// if GetControl ( vehicle ) = control_remote then
27010: LD_VAR 0 1
27014: PPUSH
27015: CALL_OW 263
27019: PUSH
27020: LD_INT 2
27022: EQUAL
27023: IFFALSE 27084
// begin wait ( 0 0$2 ) ;
27025: LD_INT 70
27027: PPUSH
27028: CALL_OW 67
// if Connect ( vehicle ) then
27032: LD_VAR 0 1
27036: PPUSH
27037: CALL 39147 0 1
27041: IFFALSE 27082
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27043: LD_VAR 0 1
27047: PPUSH
27048: LD_EXP 73
27052: PUSH
27053: LD_VAR 0 2
27057: ARRAY
27058: PUSH
27059: LD_INT 3
27061: ARRAY
27062: PPUSH
27063: LD_EXP 73
27067: PUSH
27068: LD_VAR 0 2
27072: ARRAY
27073: PUSH
27074: LD_INT 4
27076: ARRAY
27077: PPUSH
27078: CALL_OW 171
// end else
27082: GO 27123
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27084: LD_VAR 0 1
27088: PPUSH
27089: LD_EXP 73
27093: PUSH
27094: LD_VAR 0 2
27098: ARRAY
27099: PUSH
27100: LD_INT 3
27102: ARRAY
27103: PPUSH
27104: LD_EXP 73
27108: PUSH
27109: LD_VAR 0 2
27113: ARRAY
27114: PUSH
27115: LD_INT 4
27117: ARRAY
27118: PPUSH
27119: CALL_OW 171
// end ; end ;
27123: LD_VAR 0 3
27127: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27128: LD_INT 0
27130: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27131: LD_VAR 0 1
27135: PUSH
27136: LD_INT 250
27138: EQUAL
27139: PUSH
27140: LD_VAR 0 2
27144: PPUSH
27145: CALL_OW 264
27149: PUSH
27150: LD_INT 81
27152: EQUAL
27153: AND
27154: IFFALSE 27175
// MinerPlaceMine ( unit , x , y ) ;
27156: LD_VAR 0 2
27160: PPUSH
27161: LD_VAR 0 4
27165: PPUSH
27166: LD_VAR 0 5
27170: PPUSH
27171: CALL 29560 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27175: LD_VAR 0 1
27179: PUSH
27180: LD_INT 251
27182: EQUAL
27183: PUSH
27184: LD_VAR 0 2
27188: PPUSH
27189: CALL_OW 264
27193: PUSH
27194: LD_INT 81
27196: EQUAL
27197: AND
27198: IFFALSE 27219
// MinerDetonateMine ( unit , x , y ) ;
27200: LD_VAR 0 2
27204: PPUSH
27205: LD_VAR 0 4
27209: PPUSH
27210: LD_VAR 0 5
27214: PPUSH
27215: CALL 29835 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27219: LD_VAR 0 1
27223: PUSH
27224: LD_INT 252
27226: EQUAL
27227: PUSH
27228: LD_VAR 0 2
27232: PPUSH
27233: CALL_OW 264
27237: PUSH
27238: LD_INT 81
27240: EQUAL
27241: AND
27242: IFFALSE 27263
// MinerCreateMinefield ( unit , x , y ) ;
27244: LD_VAR 0 2
27248: PPUSH
27249: LD_VAR 0 4
27253: PPUSH
27254: LD_VAR 0 5
27258: PPUSH
27259: CALL 30252 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27263: LD_VAR 0 1
27267: PUSH
27268: LD_INT 253
27270: EQUAL
27271: PUSH
27272: LD_VAR 0 2
27276: PPUSH
27277: CALL_OW 257
27281: PUSH
27282: LD_INT 5
27284: EQUAL
27285: AND
27286: IFFALSE 27307
// ComBinocular ( unit , x , y ) ;
27288: LD_VAR 0 2
27292: PPUSH
27293: LD_VAR 0 4
27297: PPUSH
27298: LD_VAR 0 5
27302: PPUSH
27303: CALL 30621 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27307: LD_VAR 0 1
27311: PUSH
27312: LD_INT 254
27314: EQUAL
27315: PUSH
27316: LD_VAR 0 2
27320: PPUSH
27321: CALL_OW 264
27325: PUSH
27326: LD_INT 99
27328: EQUAL
27329: AND
27330: PUSH
27331: LD_VAR 0 3
27335: PPUSH
27336: CALL_OW 263
27340: PUSH
27341: LD_INT 3
27343: EQUAL
27344: AND
27345: IFFALSE 27361
// HackDestroyVehicle ( unit , selectedUnit ) ;
27347: LD_VAR 0 2
27351: PPUSH
27352: LD_VAR 0 3
27356: PPUSH
27357: CALL 28924 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27361: LD_VAR 0 1
27365: PUSH
27366: LD_INT 255
27368: EQUAL
27369: PUSH
27370: LD_VAR 0 2
27374: PPUSH
27375: CALL_OW 264
27379: PUSH
27380: LD_INT 14
27382: PUSH
27383: LD_INT 53
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: IN
27390: AND
27391: PUSH
27392: LD_VAR 0 4
27396: PPUSH
27397: LD_VAR 0 5
27401: PPUSH
27402: CALL_OW 488
27406: AND
27407: IFFALSE 27431
// CutTreeXYR ( unit , x , y , 12 ) ;
27409: LD_VAR 0 2
27413: PPUSH
27414: LD_VAR 0 4
27418: PPUSH
27419: LD_VAR 0 5
27423: PPUSH
27424: LD_INT 12
27426: PPUSH
27427: CALL 27494 0 4
// if cmd = 256 then
27431: LD_VAR 0 1
27435: PUSH
27436: LD_INT 256
27438: EQUAL
27439: IFFALSE 27460
// SetFactoryWaypoint ( unit , x , y ) ;
27441: LD_VAR 0 2
27445: PPUSH
27446: LD_VAR 0 4
27450: PPUSH
27451: LD_VAR 0 5
27455: PPUSH
27456: CALL 25441 0 3
// if cmd = 257 then
27460: LD_VAR 0 1
27464: PUSH
27465: LD_INT 257
27467: EQUAL
27468: IFFALSE 27489
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27470: LD_VAR 0 2
27474: PPUSH
27475: LD_VAR 0 4
27479: PPUSH
27480: LD_VAR 0 5
27484: PPUSH
27485: CALL 25803 0 3
// end ;
27489: LD_VAR 0 6
27493: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27494: LD_INT 0
27496: PPUSH
27497: PPUSH
27498: PPUSH
27499: PPUSH
27500: PPUSH
27501: PPUSH
27502: PPUSH
27503: PPUSH
27504: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27505: LD_VAR 0 1
27509: NOT
27510: PUSH
27511: LD_VAR 0 2
27515: PPUSH
27516: LD_VAR 0 3
27520: PPUSH
27521: CALL_OW 488
27525: NOT
27526: OR
27527: PUSH
27528: LD_VAR 0 4
27532: NOT
27533: OR
27534: IFFALSE 27538
// exit ;
27536: GO 27878
// list := [ ] ;
27538: LD_ADDR_VAR 0 13
27542: PUSH
27543: EMPTY
27544: ST_TO_ADDR
// if x - r < 0 then
27545: LD_VAR 0 2
27549: PUSH
27550: LD_VAR 0 4
27554: MINUS
27555: PUSH
27556: LD_INT 0
27558: LESS
27559: IFFALSE 27571
// min_x := 0 else
27561: LD_ADDR_VAR 0 7
27565: PUSH
27566: LD_INT 0
27568: ST_TO_ADDR
27569: GO 27587
// min_x := x - r ;
27571: LD_ADDR_VAR 0 7
27575: PUSH
27576: LD_VAR 0 2
27580: PUSH
27581: LD_VAR 0 4
27585: MINUS
27586: ST_TO_ADDR
// if y - r < 0 then
27587: LD_VAR 0 3
27591: PUSH
27592: LD_VAR 0 4
27596: MINUS
27597: PUSH
27598: LD_INT 0
27600: LESS
27601: IFFALSE 27613
// min_y := 0 else
27603: LD_ADDR_VAR 0 8
27607: PUSH
27608: LD_INT 0
27610: ST_TO_ADDR
27611: GO 27629
// min_y := y - r ;
27613: LD_ADDR_VAR 0 8
27617: PUSH
27618: LD_VAR 0 3
27622: PUSH
27623: LD_VAR 0 4
27627: MINUS
27628: ST_TO_ADDR
// max_x := x + r ;
27629: LD_ADDR_VAR 0 9
27633: PUSH
27634: LD_VAR 0 2
27638: PUSH
27639: LD_VAR 0 4
27643: PLUS
27644: ST_TO_ADDR
// max_y := y + r ;
27645: LD_ADDR_VAR 0 10
27649: PUSH
27650: LD_VAR 0 3
27654: PUSH
27655: LD_VAR 0 4
27659: PLUS
27660: ST_TO_ADDR
// for _x = min_x to max_x do
27661: LD_ADDR_VAR 0 11
27665: PUSH
27666: DOUBLE
27667: LD_VAR 0 7
27671: DEC
27672: ST_TO_ADDR
27673: LD_VAR 0 9
27677: PUSH
27678: FOR_TO
27679: IFFALSE 27796
// for _y = min_y to max_y do
27681: LD_ADDR_VAR 0 12
27685: PUSH
27686: DOUBLE
27687: LD_VAR 0 8
27691: DEC
27692: ST_TO_ADDR
27693: LD_VAR 0 10
27697: PUSH
27698: FOR_TO
27699: IFFALSE 27792
// begin if not ValidHex ( _x , _y ) then
27701: LD_VAR 0 11
27705: PPUSH
27706: LD_VAR 0 12
27710: PPUSH
27711: CALL_OW 488
27715: NOT
27716: IFFALSE 27720
// continue ;
27718: GO 27698
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27720: LD_VAR 0 11
27724: PPUSH
27725: LD_VAR 0 12
27729: PPUSH
27730: CALL_OW 351
27734: PUSH
27735: LD_VAR 0 11
27739: PPUSH
27740: LD_VAR 0 12
27744: PPUSH
27745: CALL_OW 554
27749: AND
27750: IFFALSE 27790
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27752: LD_ADDR_VAR 0 13
27756: PUSH
27757: LD_VAR 0 13
27761: PPUSH
27762: LD_VAR 0 13
27766: PUSH
27767: LD_INT 1
27769: PLUS
27770: PPUSH
27771: LD_VAR 0 11
27775: PUSH
27776: LD_VAR 0 12
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PPUSH
27785: CALL_OW 2
27789: ST_TO_ADDR
// end ;
27790: GO 27698
27792: POP
27793: POP
27794: GO 27678
27796: POP
27797: POP
// if not list then
27798: LD_VAR 0 13
27802: NOT
27803: IFFALSE 27807
// exit ;
27805: GO 27878
// for i in list do
27807: LD_ADDR_VAR 0 6
27811: PUSH
27812: LD_VAR 0 13
27816: PUSH
27817: FOR_IN
27818: IFFALSE 27876
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27820: LD_VAR 0 1
27824: PPUSH
27825: LD_STRING M
27827: PUSH
27828: LD_VAR 0 6
27832: PUSH
27833: LD_INT 1
27835: ARRAY
27836: PUSH
27837: LD_VAR 0 6
27841: PUSH
27842: LD_INT 2
27844: ARRAY
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: LD_INT 0
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: PUSH
27867: EMPTY
27868: LIST
27869: PPUSH
27870: CALL_OW 447
27874: GO 27817
27876: POP
27877: POP
// end ;
27878: LD_VAR 0 5
27882: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27883: LD_EXP 76
27887: NOT
27888: IFFALSE 27938
27890: GO 27892
27892: DISABLE
// begin initHack := true ;
27893: LD_ADDR_EXP 76
27897: PUSH
27898: LD_INT 1
27900: ST_TO_ADDR
// hackTanks := [ ] ;
27901: LD_ADDR_EXP 77
27905: PUSH
27906: EMPTY
27907: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27908: LD_ADDR_EXP 78
27912: PUSH
27913: EMPTY
27914: ST_TO_ADDR
// hackLimit := 3 ;
27915: LD_ADDR_EXP 79
27919: PUSH
27920: LD_INT 3
27922: ST_TO_ADDR
// hackDist := 12 ;
27923: LD_ADDR_EXP 80
27927: PUSH
27928: LD_INT 12
27930: ST_TO_ADDR
// hackCounter := [ ] ;
27931: LD_ADDR_EXP 81
27935: PUSH
27936: EMPTY
27937: ST_TO_ADDR
// end ;
27938: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27939: LD_EXP 76
27943: PUSH
27944: LD_INT 34
27946: PUSH
27947: LD_INT 99
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PPUSH
27954: CALL_OW 69
27958: AND
27959: IFFALSE 28212
27961: GO 27963
27963: DISABLE
27964: LD_INT 0
27966: PPUSH
27967: PPUSH
// begin enable ;
27968: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27969: LD_ADDR_VAR 0 1
27973: PUSH
27974: LD_INT 34
27976: PUSH
27977: LD_INT 99
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PPUSH
27984: CALL_OW 69
27988: PUSH
27989: FOR_IN
27990: IFFALSE 28210
// begin if not i in hackTanks then
27992: LD_VAR 0 1
27996: PUSH
27997: LD_EXP 77
28001: IN
28002: NOT
28003: IFFALSE 28086
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28005: LD_ADDR_EXP 77
28009: PUSH
28010: LD_EXP 77
28014: PPUSH
28015: LD_EXP 77
28019: PUSH
28020: LD_INT 1
28022: PLUS
28023: PPUSH
28024: LD_VAR 0 1
28028: PPUSH
28029: CALL_OW 1
28033: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28034: LD_ADDR_EXP 78
28038: PUSH
28039: LD_EXP 78
28043: PPUSH
28044: LD_EXP 78
28048: PUSH
28049: LD_INT 1
28051: PLUS
28052: PPUSH
28053: EMPTY
28054: PPUSH
28055: CALL_OW 1
28059: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28060: LD_ADDR_EXP 81
28064: PUSH
28065: LD_EXP 81
28069: PPUSH
28070: LD_EXP 81
28074: PUSH
28075: LD_INT 1
28077: PLUS
28078: PPUSH
28079: EMPTY
28080: PPUSH
28081: CALL_OW 1
28085: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28086: LD_VAR 0 1
28090: PPUSH
28091: CALL_OW 302
28095: NOT
28096: IFFALSE 28109
// begin HackUnlinkAll ( i ) ;
28098: LD_VAR 0 1
28102: PPUSH
28103: CALL 28215 0 1
// continue ;
28107: GO 27989
// end ; HackCheckCapturedStatus ( i ) ;
28109: LD_VAR 0 1
28113: PPUSH
28114: CALL 28658 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28118: LD_ADDR_VAR 0 2
28122: PUSH
28123: LD_INT 81
28125: PUSH
28126: LD_VAR 0 1
28130: PPUSH
28131: CALL_OW 255
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 33
28142: PUSH
28143: LD_INT 3
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 91
28152: PUSH
28153: LD_VAR 0 1
28157: PUSH
28158: LD_EXP 80
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 50
28170: PUSH
28171: EMPTY
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: PPUSH
28180: CALL_OW 69
28184: ST_TO_ADDR
// if not tmp then
28185: LD_VAR 0 2
28189: NOT
28190: IFFALSE 28194
// continue ;
28192: GO 27989
// HackLink ( i , tmp ) ;
28194: LD_VAR 0 1
28198: PPUSH
28199: LD_VAR 0 2
28203: PPUSH
28204: CALL 28351 0 2
// end ;
28208: GO 27989
28210: POP
28211: POP
// end ;
28212: PPOPN 2
28214: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28215: LD_INT 0
28217: PPUSH
28218: PPUSH
28219: PPUSH
// if not hack in hackTanks then
28220: LD_VAR 0 1
28224: PUSH
28225: LD_EXP 77
28229: IN
28230: NOT
28231: IFFALSE 28235
// exit ;
28233: GO 28346
// index := GetElementIndex ( hackTanks , hack ) ;
28235: LD_ADDR_VAR 0 4
28239: PUSH
28240: LD_EXP 77
28244: PPUSH
28245: LD_VAR 0 1
28249: PPUSH
28250: CALL 35963 0 2
28254: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28255: LD_EXP 78
28259: PUSH
28260: LD_VAR 0 4
28264: ARRAY
28265: IFFALSE 28346
// begin for i in hackTanksCaptured [ index ] do
28267: LD_ADDR_VAR 0 3
28271: PUSH
28272: LD_EXP 78
28276: PUSH
28277: LD_VAR 0 4
28281: ARRAY
28282: PUSH
28283: FOR_IN
28284: IFFALSE 28310
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28286: LD_VAR 0 3
28290: PUSH
28291: LD_INT 1
28293: ARRAY
28294: PPUSH
28295: LD_VAR 0 3
28299: PUSH
28300: LD_INT 2
28302: ARRAY
28303: PPUSH
28304: CALL_OW 235
28308: GO 28283
28310: POP
28311: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28312: LD_ADDR_EXP 78
28316: PUSH
28317: LD_EXP 78
28321: PPUSH
28322: LD_VAR 0 4
28326: PPUSH
28327: EMPTY
28328: PPUSH
28329: CALL_OW 1
28333: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28334: LD_VAR 0 1
28338: PPUSH
28339: LD_INT 0
28341: PPUSH
28342: CALL_OW 505
// end ; end ;
28346: LD_VAR 0 2
28350: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28351: LD_INT 0
28353: PPUSH
28354: PPUSH
28355: PPUSH
// if not hack in hackTanks or not vehicles then
28356: LD_VAR 0 1
28360: PUSH
28361: LD_EXP 77
28365: IN
28366: NOT
28367: PUSH
28368: LD_VAR 0 2
28372: NOT
28373: OR
28374: IFFALSE 28378
// exit ;
28376: GO 28653
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28378: LD_ADDR_VAR 0 2
28382: PUSH
28383: LD_VAR 0 1
28387: PPUSH
28388: LD_VAR 0 2
28392: PPUSH
28393: LD_INT 1
28395: PPUSH
28396: LD_INT 1
28398: PPUSH
28399: CALL 36613 0 4
28403: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28404: LD_ADDR_VAR 0 5
28408: PUSH
28409: LD_EXP 77
28413: PPUSH
28414: LD_VAR 0 1
28418: PPUSH
28419: CALL 35963 0 2
28423: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28424: LD_EXP 78
28428: PUSH
28429: LD_VAR 0 5
28433: ARRAY
28434: PUSH
28435: LD_EXP 79
28439: LESS
28440: IFFALSE 28629
// begin for i := 1 to vehicles do
28442: LD_ADDR_VAR 0 4
28446: PUSH
28447: DOUBLE
28448: LD_INT 1
28450: DEC
28451: ST_TO_ADDR
28452: LD_VAR 0 2
28456: PUSH
28457: FOR_TO
28458: IFFALSE 28627
// begin if hackTanksCaptured [ index ] = hackLimit then
28460: LD_EXP 78
28464: PUSH
28465: LD_VAR 0 5
28469: ARRAY
28470: PUSH
28471: LD_EXP 79
28475: EQUAL
28476: IFFALSE 28480
// break ;
28478: GO 28627
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28480: LD_ADDR_EXP 81
28484: PUSH
28485: LD_EXP 81
28489: PPUSH
28490: LD_VAR 0 5
28494: PPUSH
28495: LD_EXP 81
28499: PUSH
28500: LD_VAR 0 5
28504: ARRAY
28505: PUSH
28506: LD_INT 1
28508: PLUS
28509: PPUSH
28510: CALL_OW 1
28514: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28515: LD_ADDR_EXP 78
28519: PUSH
28520: LD_EXP 78
28524: PPUSH
28525: LD_VAR 0 5
28529: PUSH
28530: LD_EXP 78
28534: PUSH
28535: LD_VAR 0 5
28539: ARRAY
28540: PUSH
28541: LD_INT 1
28543: PLUS
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PPUSH
28549: LD_VAR 0 2
28553: PUSH
28554: LD_VAR 0 4
28558: ARRAY
28559: PUSH
28560: LD_VAR 0 2
28564: PUSH
28565: LD_VAR 0 4
28569: ARRAY
28570: PPUSH
28571: CALL_OW 255
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PPUSH
28580: CALL 36178 0 3
28584: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28585: LD_VAR 0 2
28589: PUSH
28590: LD_VAR 0 4
28594: ARRAY
28595: PPUSH
28596: LD_VAR 0 1
28600: PPUSH
28601: CALL_OW 255
28605: PPUSH
28606: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28610: LD_VAR 0 2
28614: PUSH
28615: LD_VAR 0 4
28619: ARRAY
28620: PPUSH
28621: CALL_OW 141
// end ;
28625: GO 28457
28627: POP
28628: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28629: LD_VAR 0 1
28633: PPUSH
28634: LD_EXP 78
28638: PUSH
28639: LD_VAR 0 5
28643: ARRAY
28644: PUSH
28645: LD_INT 0
28647: PLUS
28648: PPUSH
28649: CALL_OW 505
// end ;
28653: LD_VAR 0 3
28657: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28658: LD_INT 0
28660: PPUSH
28661: PPUSH
28662: PPUSH
28663: PPUSH
// if not hack in hackTanks then
28664: LD_VAR 0 1
28668: PUSH
28669: LD_EXP 77
28673: IN
28674: NOT
28675: IFFALSE 28679
// exit ;
28677: GO 28919
// index := GetElementIndex ( hackTanks , hack ) ;
28679: LD_ADDR_VAR 0 4
28683: PUSH
28684: LD_EXP 77
28688: PPUSH
28689: LD_VAR 0 1
28693: PPUSH
28694: CALL 35963 0 2
28698: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28699: LD_ADDR_VAR 0 3
28703: PUSH
28704: DOUBLE
28705: LD_EXP 78
28709: PUSH
28710: LD_VAR 0 4
28714: ARRAY
28715: INC
28716: ST_TO_ADDR
28717: LD_INT 1
28719: PUSH
28720: FOR_DOWNTO
28721: IFFALSE 28893
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28723: LD_ADDR_VAR 0 5
28727: PUSH
28728: LD_EXP 78
28732: PUSH
28733: LD_VAR 0 4
28737: ARRAY
28738: PUSH
28739: LD_VAR 0 3
28743: ARRAY
28744: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28745: LD_VAR 0 5
28749: PUSH
28750: LD_INT 1
28752: ARRAY
28753: PPUSH
28754: CALL_OW 302
28758: NOT
28759: PUSH
28760: LD_VAR 0 5
28764: PUSH
28765: LD_INT 1
28767: ARRAY
28768: PPUSH
28769: CALL_OW 255
28773: PUSH
28774: LD_VAR 0 1
28778: PPUSH
28779: CALL_OW 255
28783: NONEQUAL
28784: OR
28785: IFFALSE 28891
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28787: LD_VAR 0 5
28791: PUSH
28792: LD_INT 1
28794: ARRAY
28795: PPUSH
28796: CALL_OW 305
28800: PUSH
28801: LD_VAR 0 5
28805: PUSH
28806: LD_INT 1
28808: ARRAY
28809: PPUSH
28810: CALL_OW 255
28814: PUSH
28815: LD_VAR 0 1
28819: PPUSH
28820: CALL_OW 255
28824: EQUAL
28825: AND
28826: IFFALSE 28850
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28828: LD_VAR 0 5
28832: PUSH
28833: LD_INT 1
28835: ARRAY
28836: PPUSH
28837: LD_VAR 0 5
28841: PUSH
28842: LD_INT 2
28844: ARRAY
28845: PPUSH
28846: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28850: LD_ADDR_EXP 78
28854: PUSH
28855: LD_EXP 78
28859: PPUSH
28860: LD_VAR 0 4
28864: PPUSH
28865: LD_EXP 78
28869: PUSH
28870: LD_VAR 0 4
28874: ARRAY
28875: PPUSH
28876: LD_VAR 0 3
28880: PPUSH
28881: CALL_OW 3
28885: PPUSH
28886: CALL_OW 1
28890: ST_TO_ADDR
// end ; end ;
28891: GO 28720
28893: POP
28894: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28895: LD_VAR 0 1
28899: PPUSH
28900: LD_EXP 78
28904: PUSH
28905: LD_VAR 0 4
28909: ARRAY
28910: PUSH
28911: LD_INT 0
28913: PLUS
28914: PPUSH
28915: CALL_OW 505
// end ;
28919: LD_VAR 0 2
28923: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28924: LD_INT 0
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
// if not hack in hackTanks then
28930: LD_VAR 0 1
28934: PUSH
28935: LD_EXP 77
28939: IN
28940: NOT
28941: IFFALSE 28945
// exit ;
28943: GO 29030
// index := GetElementIndex ( hackTanks , hack ) ;
28945: LD_ADDR_VAR 0 5
28949: PUSH
28950: LD_EXP 77
28954: PPUSH
28955: LD_VAR 0 1
28959: PPUSH
28960: CALL 35963 0 2
28964: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28965: LD_ADDR_VAR 0 4
28969: PUSH
28970: DOUBLE
28971: LD_INT 1
28973: DEC
28974: ST_TO_ADDR
28975: LD_EXP 78
28979: PUSH
28980: LD_VAR 0 5
28984: ARRAY
28985: PUSH
28986: FOR_TO
28987: IFFALSE 29028
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28989: LD_EXP 78
28993: PUSH
28994: LD_VAR 0 5
28998: ARRAY
28999: PUSH
29000: LD_VAR 0 4
29004: ARRAY
29005: PUSH
29006: LD_INT 1
29008: ARRAY
29009: PUSH
29010: LD_VAR 0 2
29014: EQUAL
29015: IFFALSE 29026
// KillUnit ( vehicle ) ;
29017: LD_VAR 0 2
29021: PPUSH
29022: CALL_OW 66
29026: GO 28986
29028: POP
29029: POP
// end ;
29030: LD_VAR 0 3
29034: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29035: LD_EXP 82
29039: NOT
29040: IFFALSE 29075
29042: GO 29044
29044: DISABLE
// begin initMiner := true ;
29045: LD_ADDR_EXP 82
29049: PUSH
29050: LD_INT 1
29052: ST_TO_ADDR
// minersList := [ ] ;
29053: LD_ADDR_EXP 83
29057: PUSH
29058: EMPTY
29059: ST_TO_ADDR
// minerMinesList := [ ] ;
29060: LD_ADDR_EXP 84
29064: PUSH
29065: EMPTY
29066: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29067: LD_ADDR_EXP 85
29071: PUSH
29072: LD_INT 5
29074: ST_TO_ADDR
// end ;
29075: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29076: LD_EXP 82
29080: PUSH
29081: LD_INT 34
29083: PUSH
29084: LD_INT 81
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 69
29095: AND
29096: IFFALSE 29557
29098: GO 29100
29100: DISABLE
29101: LD_INT 0
29103: PPUSH
29104: PPUSH
29105: PPUSH
29106: PPUSH
// begin enable ;
29107: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29108: LD_ADDR_VAR 0 1
29112: PUSH
29113: LD_INT 34
29115: PUSH
29116: LD_INT 81
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PPUSH
29123: CALL_OW 69
29127: PUSH
29128: FOR_IN
29129: IFFALSE 29201
// begin if not i in minersList then
29131: LD_VAR 0 1
29135: PUSH
29136: LD_EXP 83
29140: IN
29141: NOT
29142: IFFALSE 29199
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29144: LD_ADDR_EXP 83
29148: PUSH
29149: LD_EXP 83
29153: PPUSH
29154: LD_EXP 83
29158: PUSH
29159: LD_INT 1
29161: PLUS
29162: PPUSH
29163: LD_VAR 0 1
29167: PPUSH
29168: CALL_OW 1
29172: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29173: LD_ADDR_EXP 84
29177: PUSH
29178: LD_EXP 84
29182: PPUSH
29183: LD_EXP 84
29187: PUSH
29188: LD_INT 1
29190: PLUS
29191: PPUSH
29192: EMPTY
29193: PPUSH
29194: CALL_OW 1
29198: ST_TO_ADDR
// end end ;
29199: GO 29128
29201: POP
29202: POP
// for i := minerMinesList downto 1 do
29203: LD_ADDR_VAR 0 1
29207: PUSH
29208: DOUBLE
29209: LD_EXP 84
29213: INC
29214: ST_TO_ADDR
29215: LD_INT 1
29217: PUSH
29218: FOR_DOWNTO
29219: IFFALSE 29555
// begin if IsLive ( minersList [ i ] ) then
29221: LD_EXP 83
29225: PUSH
29226: LD_VAR 0 1
29230: ARRAY
29231: PPUSH
29232: CALL_OW 300
29236: IFFALSE 29264
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29238: LD_EXP 83
29242: PUSH
29243: LD_VAR 0 1
29247: ARRAY
29248: PPUSH
29249: LD_EXP 84
29253: PUSH
29254: LD_VAR 0 1
29258: ARRAY
29259: PPUSH
29260: CALL_OW 505
// if not minerMinesList [ i ] then
29264: LD_EXP 84
29268: PUSH
29269: LD_VAR 0 1
29273: ARRAY
29274: NOT
29275: IFFALSE 29279
// continue ;
29277: GO 29218
// for j := minerMinesList [ i ] downto 1 do
29279: LD_ADDR_VAR 0 2
29283: PUSH
29284: DOUBLE
29285: LD_EXP 84
29289: PUSH
29290: LD_VAR 0 1
29294: ARRAY
29295: INC
29296: ST_TO_ADDR
29297: LD_INT 1
29299: PUSH
29300: FOR_DOWNTO
29301: IFFALSE 29551
// begin side := GetSide ( minersList [ i ] ) ;
29303: LD_ADDR_VAR 0 3
29307: PUSH
29308: LD_EXP 83
29312: PUSH
29313: LD_VAR 0 1
29317: ARRAY
29318: PPUSH
29319: CALL_OW 255
29323: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29324: LD_ADDR_VAR 0 4
29328: PUSH
29329: LD_EXP 84
29333: PUSH
29334: LD_VAR 0 1
29338: ARRAY
29339: PUSH
29340: LD_VAR 0 2
29344: ARRAY
29345: PUSH
29346: LD_INT 1
29348: ARRAY
29349: PPUSH
29350: LD_EXP 84
29354: PUSH
29355: LD_VAR 0 1
29359: ARRAY
29360: PUSH
29361: LD_VAR 0 2
29365: ARRAY
29366: PUSH
29367: LD_INT 2
29369: ARRAY
29370: PPUSH
29371: CALL_OW 428
29375: ST_TO_ADDR
// if not tmp then
29376: LD_VAR 0 4
29380: NOT
29381: IFFALSE 29385
// continue ;
29383: GO 29300
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29385: LD_VAR 0 4
29389: PUSH
29390: LD_INT 81
29392: PUSH
29393: LD_VAR 0 3
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PPUSH
29402: CALL_OW 69
29406: IN
29407: PUSH
29408: LD_EXP 84
29412: PUSH
29413: LD_VAR 0 1
29417: ARRAY
29418: PUSH
29419: LD_VAR 0 2
29423: ARRAY
29424: PUSH
29425: LD_INT 1
29427: ARRAY
29428: PPUSH
29429: LD_EXP 84
29433: PUSH
29434: LD_VAR 0 1
29438: ARRAY
29439: PUSH
29440: LD_VAR 0 2
29444: ARRAY
29445: PUSH
29446: LD_INT 2
29448: ARRAY
29449: PPUSH
29450: CALL_OW 458
29454: AND
29455: IFFALSE 29549
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29457: LD_EXP 84
29461: PUSH
29462: LD_VAR 0 1
29466: ARRAY
29467: PUSH
29468: LD_VAR 0 2
29472: ARRAY
29473: PUSH
29474: LD_INT 1
29476: ARRAY
29477: PPUSH
29478: LD_EXP 84
29482: PUSH
29483: LD_VAR 0 1
29487: ARRAY
29488: PUSH
29489: LD_VAR 0 2
29493: ARRAY
29494: PUSH
29495: LD_INT 2
29497: ARRAY
29498: PPUSH
29499: LD_VAR 0 3
29503: PPUSH
29504: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29508: LD_ADDR_EXP 84
29512: PUSH
29513: LD_EXP 84
29517: PPUSH
29518: LD_VAR 0 1
29522: PPUSH
29523: LD_EXP 84
29527: PUSH
29528: LD_VAR 0 1
29532: ARRAY
29533: PPUSH
29534: LD_VAR 0 2
29538: PPUSH
29539: CALL_OW 3
29543: PPUSH
29544: CALL_OW 1
29548: ST_TO_ADDR
// end ; end ;
29549: GO 29300
29551: POP
29552: POP
// end ;
29553: GO 29218
29555: POP
29556: POP
// end ;
29557: PPOPN 4
29559: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29560: LD_INT 0
29562: PPUSH
29563: PPUSH
// result := false ;
29564: LD_ADDR_VAR 0 4
29568: PUSH
29569: LD_INT 0
29571: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29572: LD_VAR 0 1
29576: PPUSH
29577: CALL_OW 264
29581: PUSH
29582: LD_INT 81
29584: EQUAL
29585: NOT
29586: IFFALSE 29590
// exit ;
29588: GO 29830
// index := GetElementIndex ( minersList , unit ) ;
29590: LD_ADDR_VAR 0 5
29594: PUSH
29595: LD_EXP 83
29599: PPUSH
29600: LD_VAR 0 1
29604: PPUSH
29605: CALL 35963 0 2
29609: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29610: LD_EXP 84
29614: PUSH
29615: LD_VAR 0 5
29619: ARRAY
29620: PUSH
29621: LD_EXP 85
29625: GREATEREQUAL
29626: IFFALSE 29630
// exit ;
29628: GO 29830
// ComMoveXY ( unit , x , y ) ;
29630: LD_VAR 0 1
29634: PPUSH
29635: LD_VAR 0 2
29639: PPUSH
29640: LD_VAR 0 3
29644: PPUSH
29645: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29649: LD_INT 35
29651: PPUSH
29652: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29656: LD_VAR 0 1
29660: PPUSH
29661: LD_VAR 0 2
29665: PPUSH
29666: LD_VAR 0 3
29670: PPUSH
29671: CALL 67318 0 3
29675: NOT
29676: PUSH
29677: LD_VAR 0 1
29681: PPUSH
29682: CALL_OW 314
29686: AND
29687: IFFALSE 29691
// exit ;
29689: GO 29830
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29691: LD_VAR 0 2
29695: PPUSH
29696: LD_VAR 0 3
29700: PPUSH
29701: CALL_OW 428
29705: PUSH
29706: LD_VAR 0 1
29710: EQUAL
29711: PUSH
29712: LD_VAR 0 1
29716: PPUSH
29717: CALL_OW 314
29721: NOT
29722: AND
29723: IFFALSE 29649
// PlaySoundXY ( x , y , PlantMine ) ;
29725: LD_VAR 0 2
29729: PPUSH
29730: LD_VAR 0 3
29734: PPUSH
29735: LD_STRING PlantMine
29737: PPUSH
29738: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29742: LD_VAR 0 2
29746: PPUSH
29747: LD_VAR 0 3
29751: PPUSH
29752: LD_VAR 0 1
29756: PPUSH
29757: CALL_OW 255
29761: PPUSH
29762: LD_INT 0
29764: PPUSH
29765: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29769: LD_ADDR_EXP 84
29773: PUSH
29774: LD_EXP 84
29778: PPUSH
29779: LD_VAR 0 5
29783: PUSH
29784: LD_EXP 84
29788: PUSH
29789: LD_VAR 0 5
29793: ARRAY
29794: PUSH
29795: LD_INT 1
29797: PLUS
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PPUSH
29803: LD_VAR 0 2
29807: PUSH
29808: LD_VAR 0 3
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PPUSH
29817: CALL 36178 0 3
29821: ST_TO_ADDR
// result := true ;
29822: LD_ADDR_VAR 0 4
29826: PUSH
29827: LD_INT 1
29829: ST_TO_ADDR
// end ;
29830: LD_VAR 0 4
29834: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29835: LD_INT 0
29837: PPUSH
29838: PPUSH
29839: PPUSH
// if not unit in minersList then
29840: LD_VAR 0 1
29844: PUSH
29845: LD_EXP 83
29849: IN
29850: NOT
29851: IFFALSE 29855
// exit ;
29853: GO 30247
// index := GetElementIndex ( minersList , unit ) ;
29855: LD_ADDR_VAR 0 6
29859: PUSH
29860: LD_EXP 83
29864: PPUSH
29865: LD_VAR 0 1
29869: PPUSH
29870: CALL 35963 0 2
29874: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29875: LD_ADDR_VAR 0 5
29879: PUSH
29880: DOUBLE
29881: LD_EXP 84
29885: PUSH
29886: LD_VAR 0 6
29890: ARRAY
29891: INC
29892: ST_TO_ADDR
29893: LD_INT 1
29895: PUSH
29896: FOR_DOWNTO
29897: IFFALSE 30058
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29899: LD_EXP 84
29903: PUSH
29904: LD_VAR 0 6
29908: ARRAY
29909: PUSH
29910: LD_VAR 0 5
29914: ARRAY
29915: PUSH
29916: LD_INT 1
29918: ARRAY
29919: PUSH
29920: LD_VAR 0 2
29924: EQUAL
29925: PUSH
29926: LD_EXP 84
29930: PUSH
29931: LD_VAR 0 6
29935: ARRAY
29936: PUSH
29937: LD_VAR 0 5
29941: ARRAY
29942: PUSH
29943: LD_INT 2
29945: ARRAY
29946: PUSH
29947: LD_VAR 0 3
29951: EQUAL
29952: AND
29953: IFFALSE 30056
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29955: LD_EXP 84
29959: PUSH
29960: LD_VAR 0 6
29964: ARRAY
29965: PUSH
29966: LD_VAR 0 5
29970: ARRAY
29971: PUSH
29972: LD_INT 1
29974: ARRAY
29975: PPUSH
29976: LD_EXP 84
29980: PUSH
29981: LD_VAR 0 6
29985: ARRAY
29986: PUSH
29987: LD_VAR 0 5
29991: ARRAY
29992: PUSH
29993: LD_INT 2
29995: ARRAY
29996: PPUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 255
30006: PPUSH
30007: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30011: LD_ADDR_EXP 84
30015: PUSH
30016: LD_EXP 84
30020: PPUSH
30021: LD_VAR 0 6
30025: PPUSH
30026: LD_EXP 84
30030: PUSH
30031: LD_VAR 0 6
30035: ARRAY
30036: PPUSH
30037: LD_VAR 0 5
30041: PPUSH
30042: CALL_OW 3
30046: PPUSH
30047: CALL_OW 1
30051: ST_TO_ADDR
// exit ;
30052: POP
30053: POP
30054: GO 30247
// end ; end ;
30056: GO 29896
30058: POP
30059: POP
// for i := minerMinesList [ index ] downto 1 do
30060: LD_ADDR_VAR 0 5
30064: PUSH
30065: DOUBLE
30066: LD_EXP 84
30070: PUSH
30071: LD_VAR 0 6
30075: ARRAY
30076: INC
30077: ST_TO_ADDR
30078: LD_INT 1
30080: PUSH
30081: FOR_DOWNTO
30082: IFFALSE 30245
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30084: LD_EXP 84
30088: PUSH
30089: LD_VAR 0 6
30093: ARRAY
30094: PUSH
30095: LD_VAR 0 5
30099: ARRAY
30100: PUSH
30101: LD_INT 1
30103: ARRAY
30104: PPUSH
30105: LD_EXP 84
30109: PUSH
30110: LD_VAR 0 6
30114: ARRAY
30115: PUSH
30116: LD_VAR 0 5
30120: ARRAY
30121: PUSH
30122: LD_INT 2
30124: ARRAY
30125: PPUSH
30126: LD_VAR 0 2
30130: PPUSH
30131: LD_VAR 0 3
30135: PPUSH
30136: CALL_OW 298
30140: PUSH
30141: LD_INT 6
30143: LESS
30144: IFFALSE 30243
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30146: LD_EXP 84
30150: PUSH
30151: LD_VAR 0 6
30155: ARRAY
30156: PUSH
30157: LD_VAR 0 5
30161: ARRAY
30162: PUSH
30163: LD_INT 1
30165: ARRAY
30166: PPUSH
30167: LD_EXP 84
30171: PUSH
30172: LD_VAR 0 6
30176: ARRAY
30177: PUSH
30178: LD_VAR 0 5
30182: ARRAY
30183: PUSH
30184: LD_INT 2
30186: ARRAY
30187: PPUSH
30188: LD_VAR 0 1
30192: PPUSH
30193: CALL_OW 255
30197: PPUSH
30198: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30202: LD_ADDR_EXP 84
30206: PUSH
30207: LD_EXP 84
30211: PPUSH
30212: LD_VAR 0 6
30216: PPUSH
30217: LD_EXP 84
30221: PUSH
30222: LD_VAR 0 6
30226: ARRAY
30227: PPUSH
30228: LD_VAR 0 5
30232: PPUSH
30233: CALL_OW 3
30237: PPUSH
30238: CALL_OW 1
30242: ST_TO_ADDR
// end ; end ;
30243: GO 30081
30245: POP
30246: POP
// end ;
30247: LD_VAR 0 4
30251: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30252: LD_INT 0
30254: PPUSH
30255: PPUSH
30256: PPUSH
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30263: LD_VAR 0 1
30267: PPUSH
30268: CALL_OW 264
30272: PUSH
30273: LD_INT 81
30275: EQUAL
30276: NOT
30277: PUSH
30278: LD_VAR 0 1
30282: PUSH
30283: LD_EXP 83
30287: IN
30288: NOT
30289: OR
30290: IFFALSE 30294
// exit ;
30292: GO 30616
// index := GetElementIndex ( minersList , unit ) ;
30294: LD_ADDR_VAR 0 6
30298: PUSH
30299: LD_EXP 83
30303: PPUSH
30304: LD_VAR 0 1
30308: PPUSH
30309: CALL 35963 0 2
30313: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30314: LD_ADDR_VAR 0 8
30318: PUSH
30319: LD_EXP 85
30323: PUSH
30324: LD_EXP 84
30328: PUSH
30329: LD_VAR 0 6
30333: ARRAY
30334: MINUS
30335: ST_TO_ADDR
// if not minesFreeAmount then
30336: LD_VAR 0 8
30340: NOT
30341: IFFALSE 30345
// exit ;
30343: GO 30616
// tmp := [ ] ;
30345: LD_ADDR_VAR 0 7
30349: PUSH
30350: EMPTY
30351: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30352: LD_ADDR_VAR 0 5
30356: PUSH
30357: DOUBLE
30358: LD_INT 1
30360: DEC
30361: ST_TO_ADDR
30362: LD_VAR 0 8
30366: PUSH
30367: FOR_TO
30368: IFFALSE 30563
// begin _d := rand ( 0 , 5 ) ;
30370: LD_ADDR_VAR 0 11
30374: PUSH
30375: LD_INT 0
30377: PPUSH
30378: LD_INT 5
30380: PPUSH
30381: CALL_OW 12
30385: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30386: LD_ADDR_VAR 0 12
30390: PUSH
30391: LD_INT 2
30393: PPUSH
30394: LD_INT 6
30396: PPUSH
30397: CALL_OW 12
30401: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30402: LD_ADDR_VAR 0 9
30406: PUSH
30407: LD_VAR 0 2
30411: PPUSH
30412: LD_VAR 0 11
30416: PPUSH
30417: LD_VAR 0 12
30421: PPUSH
30422: CALL_OW 272
30426: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30427: LD_ADDR_VAR 0 10
30431: PUSH
30432: LD_VAR 0 3
30436: PPUSH
30437: LD_VAR 0 11
30441: PPUSH
30442: LD_VAR 0 12
30446: PPUSH
30447: CALL_OW 273
30451: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30452: LD_VAR 0 9
30456: PPUSH
30457: LD_VAR 0 10
30461: PPUSH
30462: CALL_OW 488
30466: PUSH
30467: LD_VAR 0 9
30471: PUSH
30472: LD_VAR 0 10
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_VAR 0 7
30485: IN
30486: NOT
30487: AND
30488: PUSH
30489: LD_VAR 0 9
30493: PPUSH
30494: LD_VAR 0 10
30498: PPUSH
30499: CALL_OW 458
30503: NOT
30504: AND
30505: IFFALSE 30547
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30507: LD_ADDR_VAR 0 7
30511: PUSH
30512: LD_VAR 0 7
30516: PPUSH
30517: LD_VAR 0 7
30521: PUSH
30522: LD_INT 1
30524: PLUS
30525: PPUSH
30526: LD_VAR 0 9
30530: PUSH
30531: LD_VAR 0 10
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PPUSH
30540: CALL_OW 1
30544: ST_TO_ADDR
30545: GO 30561
// i := i - 1 ;
30547: LD_ADDR_VAR 0 5
30551: PUSH
30552: LD_VAR 0 5
30556: PUSH
30557: LD_INT 1
30559: MINUS
30560: ST_TO_ADDR
// end ;
30561: GO 30367
30563: POP
30564: POP
// for i in tmp do
30565: LD_ADDR_VAR 0 5
30569: PUSH
30570: LD_VAR 0 7
30574: PUSH
30575: FOR_IN
30576: IFFALSE 30614
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30578: LD_VAR 0 1
30582: PPUSH
30583: LD_VAR 0 5
30587: PUSH
30588: LD_INT 1
30590: ARRAY
30591: PPUSH
30592: LD_VAR 0 5
30596: PUSH
30597: LD_INT 2
30599: ARRAY
30600: PPUSH
30601: CALL 29560 0 3
30605: NOT
30606: IFFALSE 30612
// exit ;
30608: POP
30609: POP
30610: GO 30616
30612: GO 30575
30614: POP
30615: POP
// end ;
30616: LD_VAR 0 4
30620: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30621: LD_INT 0
30623: PPUSH
30624: PPUSH
30625: PPUSH
30626: PPUSH
30627: PPUSH
30628: PPUSH
30629: PPUSH
// if not GetClass ( unit ) = class_sniper then
30630: LD_VAR 0 1
30634: PPUSH
30635: CALL_OW 257
30639: PUSH
30640: LD_INT 5
30642: EQUAL
30643: NOT
30644: IFFALSE 30648
// exit ;
30646: GO 31036
// dist := 8 ;
30648: LD_ADDR_VAR 0 5
30652: PUSH
30653: LD_INT 8
30655: ST_TO_ADDR
// viewRange := 12 ;
30656: LD_ADDR_VAR 0 7
30660: PUSH
30661: LD_INT 12
30663: ST_TO_ADDR
// side := GetSide ( unit ) ;
30664: LD_ADDR_VAR 0 6
30668: PUSH
30669: LD_VAR 0 1
30673: PPUSH
30674: CALL_OW 255
30678: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30679: LD_INT 61
30681: PPUSH
30682: LD_VAR 0 6
30686: PPUSH
30687: CALL_OW 321
30691: PUSH
30692: LD_INT 2
30694: EQUAL
30695: IFFALSE 30705
// viewRange := 16 ;
30697: LD_ADDR_VAR 0 7
30701: PUSH
30702: LD_INT 16
30704: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30705: LD_VAR 0 1
30709: PPUSH
30710: LD_VAR 0 2
30714: PPUSH
30715: LD_VAR 0 3
30719: PPUSH
30720: CALL_OW 297
30724: PUSH
30725: LD_VAR 0 5
30729: GREATER
30730: IFFALSE 30809
// begin ComMoveXY ( unit , x , y ) ;
30732: LD_VAR 0 1
30736: PPUSH
30737: LD_VAR 0 2
30741: PPUSH
30742: LD_VAR 0 3
30746: PPUSH
30747: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30751: LD_INT 35
30753: PPUSH
30754: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30758: LD_VAR 0 1
30762: PPUSH
30763: LD_VAR 0 2
30767: PPUSH
30768: LD_VAR 0 3
30772: PPUSH
30773: CALL 67318 0 3
30777: NOT
30778: IFFALSE 30782
// exit ;
30780: GO 31036
// until GetDistUnitXY ( unit , x , y ) < dist ;
30782: LD_VAR 0 1
30786: PPUSH
30787: LD_VAR 0 2
30791: PPUSH
30792: LD_VAR 0 3
30796: PPUSH
30797: CALL_OW 297
30801: PUSH
30802: LD_VAR 0 5
30806: LESS
30807: IFFALSE 30751
// end ; ComTurnXY ( unit , x , y ) ;
30809: LD_VAR 0 1
30813: PPUSH
30814: LD_VAR 0 2
30818: PPUSH
30819: LD_VAR 0 3
30823: PPUSH
30824: CALL_OW 118
// wait ( 5 ) ;
30828: LD_INT 5
30830: PPUSH
30831: CALL_OW 67
// _d := GetDir ( unit ) ;
30835: LD_ADDR_VAR 0 10
30839: PUSH
30840: LD_VAR 0 1
30844: PPUSH
30845: CALL_OW 254
30849: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30850: LD_ADDR_VAR 0 8
30854: PUSH
30855: LD_VAR 0 1
30859: PPUSH
30860: CALL_OW 250
30864: PPUSH
30865: LD_VAR 0 10
30869: PPUSH
30870: LD_VAR 0 5
30874: PPUSH
30875: CALL_OW 272
30879: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30880: LD_ADDR_VAR 0 9
30884: PUSH
30885: LD_VAR 0 1
30889: PPUSH
30890: CALL_OW 251
30894: PPUSH
30895: LD_VAR 0 10
30899: PPUSH
30900: LD_VAR 0 5
30904: PPUSH
30905: CALL_OW 273
30909: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30910: LD_VAR 0 8
30914: PPUSH
30915: LD_VAR 0 9
30919: PPUSH
30920: CALL_OW 488
30924: NOT
30925: IFFALSE 30929
// exit ;
30927: GO 31036
// ComAnimCustom ( unit , 1 ) ;
30929: LD_VAR 0 1
30933: PPUSH
30934: LD_INT 1
30936: PPUSH
30937: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30941: LD_VAR 0 8
30945: PPUSH
30946: LD_VAR 0 9
30950: PPUSH
30951: LD_VAR 0 6
30955: PPUSH
30956: LD_VAR 0 7
30960: PPUSH
30961: CALL_OW 330
// repeat wait ( 1 ) ;
30965: LD_INT 1
30967: PPUSH
30968: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30972: LD_VAR 0 1
30976: PPUSH
30977: CALL_OW 316
30981: PUSH
30982: LD_VAR 0 1
30986: PPUSH
30987: CALL_OW 314
30991: OR
30992: PUSH
30993: LD_VAR 0 1
30997: PPUSH
30998: CALL_OW 302
31002: NOT
31003: OR
31004: PUSH
31005: LD_VAR 0 1
31009: PPUSH
31010: CALL_OW 301
31014: OR
31015: IFFALSE 30965
// RemoveSeeing ( _x , _y , side ) ;
31017: LD_VAR 0 8
31021: PPUSH
31022: LD_VAR 0 9
31026: PPUSH
31027: LD_VAR 0 6
31031: PPUSH
31032: CALL_OW 331
// end ; end_of_file
31036: LD_VAR 0 4
31040: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31041: LD_INT 0
31043: PPUSH
31044: PPUSH
// if exist_mode then
31045: LD_VAR 0 2
31049: IFFALSE 31074
// unit := CreateCharacter ( prefix & ident ) else
31051: LD_ADDR_VAR 0 5
31055: PUSH
31056: LD_VAR 0 3
31060: PUSH
31061: LD_VAR 0 1
31065: STR
31066: PPUSH
31067: CALL_OW 34
31071: ST_TO_ADDR
31072: GO 31089
// unit := NewCharacter ( ident ) ;
31074: LD_ADDR_VAR 0 5
31078: PUSH
31079: LD_VAR 0 1
31083: PPUSH
31084: CALL_OW 25
31088: ST_TO_ADDR
// result := unit ;
31089: LD_ADDR_VAR 0 4
31093: PUSH
31094: LD_VAR 0 5
31098: ST_TO_ADDR
// end ;
31099: LD_VAR 0 4
31103: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31104: LD_INT 0
31106: PPUSH
31107: PPUSH
// if not side or not nation then
31108: LD_VAR 0 1
31112: NOT
31113: PUSH
31114: LD_VAR 0 2
31118: NOT
31119: OR
31120: IFFALSE 31124
// exit ;
31122: GO 31892
// case nation of nation_american :
31124: LD_VAR 0 2
31128: PUSH
31129: LD_INT 1
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31351
31137: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31138: LD_ADDR_VAR 0 4
31142: PUSH
31143: LD_INT 35
31145: PUSH
31146: LD_INT 45
31148: PUSH
31149: LD_INT 46
31151: PUSH
31152: LD_INT 47
31154: PUSH
31155: LD_INT 82
31157: PUSH
31158: LD_INT 83
31160: PUSH
31161: LD_INT 84
31163: PUSH
31164: LD_INT 85
31166: PUSH
31167: LD_INT 86
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: LD_INT 6
31178: PUSH
31179: LD_INT 15
31181: PUSH
31182: LD_INT 16
31184: PUSH
31185: LD_INT 7
31187: PUSH
31188: LD_INT 12
31190: PUSH
31191: LD_INT 13
31193: PUSH
31194: LD_INT 10
31196: PUSH
31197: LD_INT 14
31199: PUSH
31200: LD_INT 20
31202: PUSH
31203: LD_INT 21
31205: PUSH
31206: LD_INT 22
31208: PUSH
31209: LD_INT 25
31211: PUSH
31212: LD_INT 32
31214: PUSH
31215: LD_INT 27
31217: PUSH
31218: LD_INT 36
31220: PUSH
31221: LD_INT 69
31223: PUSH
31224: LD_INT 39
31226: PUSH
31227: LD_INT 34
31229: PUSH
31230: LD_INT 40
31232: PUSH
31233: LD_INT 48
31235: PUSH
31236: LD_INT 49
31238: PUSH
31239: LD_INT 50
31241: PUSH
31242: LD_INT 51
31244: PUSH
31245: LD_INT 52
31247: PUSH
31248: LD_INT 53
31250: PUSH
31251: LD_INT 54
31253: PUSH
31254: LD_INT 55
31256: PUSH
31257: LD_INT 56
31259: PUSH
31260: LD_INT 57
31262: PUSH
31263: LD_INT 58
31265: PUSH
31266: LD_INT 59
31268: PUSH
31269: LD_INT 60
31271: PUSH
31272: LD_INT 61
31274: PUSH
31275: LD_INT 62
31277: PUSH
31278: LD_INT 80
31280: PUSH
31281: LD_INT 82
31283: PUSH
31284: LD_INT 83
31286: PUSH
31287: LD_INT 84
31289: PUSH
31290: LD_INT 85
31292: PUSH
31293: LD_INT 86
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: ST_TO_ADDR
31349: GO 31816
31351: LD_INT 2
31353: DOUBLE
31354: EQUAL
31355: IFTRUE 31359
31357: GO 31585
31359: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31360: LD_ADDR_VAR 0 4
31364: PUSH
31365: LD_INT 35
31367: PUSH
31368: LD_INT 45
31370: PUSH
31371: LD_INT 46
31373: PUSH
31374: LD_INT 47
31376: PUSH
31377: LD_INT 82
31379: PUSH
31380: LD_INT 83
31382: PUSH
31383: LD_INT 84
31385: PUSH
31386: LD_INT 85
31388: PUSH
31389: LD_INT 87
31391: PUSH
31392: LD_INT 70
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: LD_INT 11
31400: PUSH
31401: LD_INT 3
31403: PUSH
31404: LD_INT 4
31406: PUSH
31407: LD_INT 5
31409: PUSH
31410: LD_INT 6
31412: PUSH
31413: LD_INT 15
31415: PUSH
31416: LD_INT 18
31418: PUSH
31419: LD_INT 7
31421: PUSH
31422: LD_INT 17
31424: PUSH
31425: LD_INT 8
31427: PUSH
31428: LD_INT 20
31430: PUSH
31431: LD_INT 21
31433: PUSH
31434: LD_INT 22
31436: PUSH
31437: LD_INT 72
31439: PUSH
31440: LD_INT 26
31442: PUSH
31443: LD_INT 69
31445: PUSH
31446: LD_INT 39
31448: PUSH
31449: LD_INT 40
31451: PUSH
31452: LD_INT 41
31454: PUSH
31455: LD_INT 42
31457: PUSH
31458: LD_INT 43
31460: PUSH
31461: LD_INT 48
31463: PUSH
31464: LD_INT 49
31466: PUSH
31467: LD_INT 50
31469: PUSH
31470: LD_INT 51
31472: PUSH
31473: LD_INT 52
31475: PUSH
31476: LD_INT 53
31478: PUSH
31479: LD_INT 54
31481: PUSH
31482: LD_INT 55
31484: PUSH
31485: LD_INT 56
31487: PUSH
31488: LD_INT 60
31490: PUSH
31491: LD_INT 61
31493: PUSH
31494: LD_INT 62
31496: PUSH
31497: LD_INT 66
31499: PUSH
31500: LD_INT 67
31502: PUSH
31503: LD_INT 68
31505: PUSH
31506: LD_INT 81
31508: PUSH
31509: LD_INT 82
31511: PUSH
31512: LD_INT 83
31514: PUSH
31515: LD_INT 84
31517: PUSH
31518: LD_INT 85
31520: PUSH
31521: LD_INT 87
31523: PUSH
31524: LD_INT 88
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: ST_TO_ADDR
31583: GO 31816
31585: LD_INT 3
31587: DOUBLE
31588: EQUAL
31589: IFTRUE 31593
31591: GO 31815
31593: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31594: LD_ADDR_VAR 0 4
31598: PUSH
31599: LD_INT 46
31601: PUSH
31602: LD_INT 47
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: LD_INT 82
31613: PUSH
31614: LD_INT 83
31616: PUSH
31617: LD_INT 84
31619: PUSH
31620: LD_INT 85
31622: PUSH
31623: LD_INT 86
31625: PUSH
31626: LD_INT 11
31628: PUSH
31629: LD_INT 9
31631: PUSH
31632: LD_INT 20
31634: PUSH
31635: LD_INT 19
31637: PUSH
31638: LD_INT 21
31640: PUSH
31641: LD_INT 24
31643: PUSH
31644: LD_INT 22
31646: PUSH
31647: LD_INT 25
31649: PUSH
31650: LD_INT 28
31652: PUSH
31653: LD_INT 29
31655: PUSH
31656: LD_INT 30
31658: PUSH
31659: LD_INT 31
31661: PUSH
31662: LD_INT 37
31664: PUSH
31665: LD_INT 38
31667: PUSH
31668: LD_INT 32
31670: PUSH
31671: LD_INT 27
31673: PUSH
31674: LD_INT 33
31676: PUSH
31677: LD_INT 69
31679: PUSH
31680: LD_INT 39
31682: PUSH
31683: LD_INT 34
31685: PUSH
31686: LD_INT 40
31688: PUSH
31689: LD_INT 71
31691: PUSH
31692: LD_INT 23
31694: PUSH
31695: LD_INT 44
31697: PUSH
31698: LD_INT 48
31700: PUSH
31701: LD_INT 49
31703: PUSH
31704: LD_INT 50
31706: PUSH
31707: LD_INT 51
31709: PUSH
31710: LD_INT 52
31712: PUSH
31713: LD_INT 53
31715: PUSH
31716: LD_INT 54
31718: PUSH
31719: LD_INT 55
31721: PUSH
31722: LD_INT 56
31724: PUSH
31725: LD_INT 57
31727: PUSH
31728: LD_INT 58
31730: PUSH
31731: LD_INT 59
31733: PUSH
31734: LD_INT 63
31736: PUSH
31737: LD_INT 64
31739: PUSH
31740: LD_INT 65
31742: PUSH
31743: LD_INT 82
31745: PUSH
31746: LD_INT 83
31748: PUSH
31749: LD_INT 84
31751: PUSH
31752: LD_INT 85
31754: PUSH
31755: LD_INT 86
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: ST_TO_ADDR
31813: GO 31816
31815: POP
// if state > - 1 and state < 3 then
31816: LD_VAR 0 3
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: GREATER
31825: PUSH
31826: LD_VAR 0 3
31830: PUSH
31831: LD_INT 3
31833: LESS
31834: AND
31835: IFFALSE 31892
// for i in result do
31837: LD_ADDR_VAR 0 5
31841: PUSH
31842: LD_VAR 0 4
31846: PUSH
31847: FOR_IN
31848: IFFALSE 31890
// if GetTech ( i , side ) <> state then
31850: LD_VAR 0 5
31854: PPUSH
31855: LD_VAR 0 1
31859: PPUSH
31860: CALL_OW 321
31864: PUSH
31865: LD_VAR 0 3
31869: NONEQUAL
31870: IFFALSE 31888
// result := result diff i ;
31872: LD_ADDR_VAR 0 4
31876: PUSH
31877: LD_VAR 0 4
31881: PUSH
31882: LD_VAR 0 5
31886: DIFF
31887: ST_TO_ADDR
31888: GO 31847
31890: POP
31891: POP
// end ;
31892: LD_VAR 0 4
31896: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31897: LD_INT 0
31899: PPUSH
31900: PPUSH
31901: PPUSH
// result := true ;
31902: LD_ADDR_VAR 0 3
31906: PUSH
31907: LD_INT 1
31909: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31910: LD_ADDR_VAR 0 5
31914: PUSH
31915: LD_VAR 0 2
31919: PPUSH
31920: CALL_OW 480
31924: ST_TO_ADDR
// if not tmp then
31925: LD_VAR 0 5
31929: NOT
31930: IFFALSE 31934
// exit ;
31932: GO 31983
// for i in tmp do
31934: LD_ADDR_VAR 0 4
31938: PUSH
31939: LD_VAR 0 5
31943: PUSH
31944: FOR_IN
31945: IFFALSE 31981
// if GetTech ( i , side ) <> state_researched then
31947: LD_VAR 0 4
31951: PPUSH
31952: LD_VAR 0 1
31956: PPUSH
31957: CALL_OW 321
31961: PUSH
31962: LD_INT 2
31964: NONEQUAL
31965: IFFALSE 31979
// begin result := false ;
31967: LD_ADDR_VAR 0 3
31971: PUSH
31972: LD_INT 0
31974: ST_TO_ADDR
// exit ;
31975: POP
31976: POP
31977: GO 31983
// end ;
31979: GO 31944
31981: POP
31982: POP
// end ;
31983: LD_VAR 0 3
31987: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31988: LD_INT 0
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
32002: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32003: LD_VAR 0 1
32007: NOT
32008: PUSH
32009: LD_VAR 0 1
32013: PPUSH
32014: CALL_OW 257
32018: PUSH
32019: LD_INT 9
32021: NONEQUAL
32022: OR
32023: IFFALSE 32027
// exit ;
32025: GO 32600
// side := GetSide ( unit ) ;
32027: LD_ADDR_VAR 0 9
32031: PUSH
32032: LD_VAR 0 1
32036: PPUSH
32037: CALL_OW 255
32041: ST_TO_ADDR
// tech_space := tech_spacanom ;
32042: LD_ADDR_VAR 0 12
32046: PUSH
32047: LD_INT 29
32049: ST_TO_ADDR
// tech_time := tech_taurad ;
32050: LD_ADDR_VAR 0 13
32054: PUSH
32055: LD_INT 28
32057: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32058: LD_ADDR_VAR 0 11
32062: PUSH
32063: LD_VAR 0 1
32067: PPUSH
32068: CALL_OW 310
32072: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32073: LD_VAR 0 11
32077: PPUSH
32078: CALL_OW 247
32082: PUSH
32083: LD_INT 2
32085: EQUAL
32086: IFFALSE 32090
// exit ;
32088: GO 32600
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32090: LD_ADDR_VAR 0 8
32094: PUSH
32095: LD_INT 81
32097: PUSH
32098: LD_VAR 0 9
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: LD_INT 21
32112: PUSH
32113: LD_INT 3
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PPUSH
32128: CALL_OW 69
32132: ST_TO_ADDR
// if not tmp then
32133: LD_VAR 0 8
32137: NOT
32138: IFFALSE 32142
// exit ;
32140: GO 32600
// if in_unit then
32142: LD_VAR 0 11
32146: IFFALSE 32170
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32148: LD_ADDR_VAR 0 10
32152: PUSH
32153: LD_VAR 0 8
32157: PPUSH
32158: LD_VAR 0 11
32162: PPUSH
32163: CALL_OW 74
32167: ST_TO_ADDR
32168: GO 32190
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32170: LD_ADDR_VAR 0 10
32174: PUSH
32175: LD_VAR 0 8
32179: PPUSH
32180: LD_VAR 0 1
32184: PPUSH
32185: CALL_OW 74
32189: ST_TO_ADDR
// if not enemy then
32190: LD_VAR 0 10
32194: NOT
32195: IFFALSE 32199
// exit ;
32197: GO 32600
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32199: LD_VAR 0 11
32203: PUSH
32204: LD_VAR 0 11
32208: PPUSH
32209: LD_VAR 0 10
32213: PPUSH
32214: CALL_OW 296
32218: PUSH
32219: LD_INT 13
32221: GREATER
32222: AND
32223: PUSH
32224: LD_VAR 0 1
32228: PPUSH
32229: LD_VAR 0 10
32233: PPUSH
32234: CALL_OW 296
32238: PUSH
32239: LD_INT 12
32241: GREATER
32242: OR
32243: IFFALSE 32247
// exit ;
32245: GO 32600
// missile := [ 1 ] ;
32247: LD_ADDR_VAR 0 14
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: EMPTY
32256: LIST
32257: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32258: LD_VAR 0 9
32262: PPUSH
32263: LD_VAR 0 12
32267: PPUSH
32268: CALL_OW 325
32272: IFFALSE 32301
// missile := Replace ( missile , missile + 1 , 2 ) ;
32274: LD_ADDR_VAR 0 14
32278: PUSH
32279: LD_VAR 0 14
32283: PPUSH
32284: LD_VAR 0 14
32288: PUSH
32289: LD_INT 1
32291: PLUS
32292: PPUSH
32293: LD_INT 2
32295: PPUSH
32296: CALL_OW 1
32300: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32301: LD_VAR 0 9
32305: PPUSH
32306: LD_VAR 0 13
32310: PPUSH
32311: CALL_OW 325
32315: PUSH
32316: LD_VAR 0 10
32320: PPUSH
32321: CALL_OW 255
32325: PPUSH
32326: LD_VAR 0 13
32330: PPUSH
32331: CALL_OW 325
32335: NOT
32336: AND
32337: IFFALSE 32366
// missile := Replace ( missile , missile + 1 , 3 ) ;
32339: LD_ADDR_VAR 0 14
32343: PUSH
32344: LD_VAR 0 14
32348: PPUSH
32349: LD_VAR 0 14
32353: PUSH
32354: LD_INT 1
32356: PLUS
32357: PPUSH
32358: LD_INT 3
32360: PPUSH
32361: CALL_OW 1
32365: ST_TO_ADDR
// if missile < 2 then
32366: LD_VAR 0 14
32370: PUSH
32371: LD_INT 2
32373: LESS
32374: IFFALSE 32378
// exit ;
32376: GO 32600
// x := GetX ( enemy ) ;
32378: LD_ADDR_VAR 0 4
32382: PUSH
32383: LD_VAR 0 10
32387: PPUSH
32388: CALL_OW 250
32392: ST_TO_ADDR
// y := GetY ( enemy ) ;
32393: LD_ADDR_VAR 0 5
32397: PUSH
32398: LD_VAR 0 10
32402: PPUSH
32403: CALL_OW 251
32407: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32408: LD_ADDR_VAR 0 6
32412: PUSH
32413: LD_VAR 0 4
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PPUSH
32422: LD_INT 1
32424: PPUSH
32425: CALL_OW 12
32429: PLUS
32430: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32431: LD_ADDR_VAR 0 7
32435: PUSH
32436: LD_VAR 0 5
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PPUSH
32445: LD_INT 1
32447: PPUSH
32448: CALL_OW 12
32452: PLUS
32453: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32454: LD_VAR 0 6
32458: PPUSH
32459: LD_VAR 0 7
32463: PPUSH
32464: CALL_OW 488
32468: NOT
32469: IFFALSE 32491
// begin _x := x ;
32471: LD_ADDR_VAR 0 6
32475: PUSH
32476: LD_VAR 0 4
32480: ST_TO_ADDR
// _y := y ;
32481: LD_ADDR_VAR 0 7
32485: PUSH
32486: LD_VAR 0 5
32490: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32491: LD_ADDR_VAR 0 3
32495: PUSH
32496: LD_INT 1
32498: PPUSH
32499: LD_VAR 0 14
32503: PPUSH
32504: CALL_OW 12
32508: ST_TO_ADDR
// case i of 1 :
32509: LD_VAR 0 3
32513: PUSH
32514: LD_INT 1
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32539
32522: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32523: LD_VAR 0 1
32527: PPUSH
32528: LD_VAR 0 10
32532: PPUSH
32533: CALL_OW 115
32537: GO 32600
32539: LD_INT 2
32541: DOUBLE
32542: EQUAL
32543: IFTRUE 32547
32545: GO 32569
32547: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32548: LD_VAR 0 1
32552: PPUSH
32553: LD_VAR 0 6
32557: PPUSH
32558: LD_VAR 0 7
32562: PPUSH
32563: CALL_OW 153
32567: GO 32600
32569: LD_INT 3
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32599
32577: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32578: LD_VAR 0 1
32582: PPUSH
32583: LD_VAR 0 6
32587: PPUSH
32588: LD_VAR 0 7
32592: PPUSH
32593: CALL_OW 154
32597: GO 32600
32599: POP
// end ;
32600: LD_VAR 0 2
32604: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32605: LD_INT 0
32607: PPUSH
32608: PPUSH
32609: PPUSH
32610: PPUSH
32611: PPUSH
32612: PPUSH
// if not unit or not building then
32613: LD_VAR 0 1
32617: NOT
32618: PUSH
32619: LD_VAR 0 2
32623: NOT
32624: OR
32625: IFFALSE 32629
// exit ;
32627: GO 32787
// x := GetX ( building ) ;
32629: LD_ADDR_VAR 0 5
32633: PUSH
32634: LD_VAR 0 2
32638: PPUSH
32639: CALL_OW 250
32643: ST_TO_ADDR
// y := GetY ( building ) ;
32644: LD_ADDR_VAR 0 6
32648: PUSH
32649: LD_VAR 0 2
32653: PPUSH
32654: CALL_OW 251
32658: ST_TO_ADDR
// for i = 0 to 5 do
32659: LD_ADDR_VAR 0 4
32663: PUSH
32664: DOUBLE
32665: LD_INT 0
32667: DEC
32668: ST_TO_ADDR
32669: LD_INT 5
32671: PUSH
32672: FOR_TO
32673: IFFALSE 32785
// begin _x := ShiftX ( x , i , 3 ) ;
32675: LD_ADDR_VAR 0 7
32679: PUSH
32680: LD_VAR 0 5
32684: PPUSH
32685: LD_VAR 0 4
32689: PPUSH
32690: LD_INT 3
32692: PPUSH
32693: CALL_OW 272
32697: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32698: LD_ADDR_VAR 0 8
32702: PUSH
32703: LD_VAR 0 6
32707: PPUSH
32708: LD_VAR 0 4
32712: PPUSH
32713: LD_INT 3
32715: PPUSH
32716: CALL_OW 273
32720: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32721: LD_VAR 0 7
32725: PPUSH
32726: LD_VAR 0 8
32730: PPUSH
32731: CALL_OW 488
32735: NOT
32736: IFFALSE 32740
// continue ;
32738: GO 32672
// if HexInfo ( _x , _y ) = 0 then
32740: LD_VAR 0 7
32744: PPUSH
32745: LD_VAR 0 8
32749: PPUSH
32750: CALL_OW 428
32754: PUSH
32755: LD_INT 0
32757: EQUAL
32758: IFFALSE 32783
// begin ComMoveXY ( unit , _x , _y ) ;
32760: LD_VAR 0 1
32764: PPUSH
32765: LD_VAR 0 7
32769: PPUSH
32770: LD_VAR 0 8
32774: PPUSH
32775: CALL_OW 111
// exit ;
32779: POP
32780: POP
32781: GO 32787
// end ; end ;
32783: GO 32672
32785: POP
32786: POP
// end ;
32787: LD_VAR 0 3
32791: RET
// export function ScanBase ( side , base_area ) ; begin
32792: LD_INT 0
32794: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32795: LD_ADDR_VAR 0 3
32799: PUSH
32800: LD_VAR 0 2
32804: PPUSH
32805: LD_INT 81
32807: PUSH
32808: LD_VAR 0 1
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PPUSH
32817: CALL_OW 70
32821: ST_TO_ADDR
// end ;
32822: LD_VAR 0 3
32826: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32827: LD_INT 0
32829: PPUSH
32830: PPUSH
32831: PPUSH
32832: PPUSH
// result := false ;
32833: LD_ADDR_VAR 0 2
32837: PUSH
32838: LD_INT 0
32840: ST_TO_ADDR
// side := GetSide ( unit ) ;
32841: LD_ADDR_VAR 0 3
32845: PUSH
32846: LD_VAR 0 1
32850: PPUSH
32851: CALL_OW 255
32855: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32856: LD_ADDR_VAR 0 4
32860: PUSH
32861: LD_VAR 0 1
32865: PPUSH
32866: CALL_OW 248
32870: ST_TO_ADDR
// case nat of 1 :
32871: LD_VAR 0 4
32875: PUSH
32876: LD_INT 1
32878: DOUBLE
32879: EQUAL
32880: IFTRUE 32884
32882: GO 32895
32884: POP
// tech := tech_lassight ; 2 :
32885: LD_ADDR_VAR 0 5
32889: PUSH
32890: LD_INT 12
32892: ST_TO_ADDR
32893: GO 32934
32895: LD_INT 2
32897: DOUBLE
32898: EQUAL
32899: IFTRUE 32903
32901: GO 32914
32903: POP
// tech := tech_mortar ; 3 :
32904: LD_ADDR_VAR 0 5
32908: PUSH
32909: LD_INT 41
32911: ST_TO_ADDR
32912: GO 32934
32914: LD_INT 3
32916: DOUBLE
32917: EQUAL
32918: IFTRUE 32922
32920: GO 32933
32922: POP
// tech := tech_bazooka ; end ;
32923: LD_ADDR_VAR 0 5
32927: PUSH
32928: LD_INT 44
32930: ST_TO_ADDR
32931: GO 32934
32933: POP
// if Researched ( side , tech ) then
32934: LD_VAR 0 3
32938: PPUSH
32939: LD_VAR 0 5
32943: PPUSH
32944: CALL_OW 325
32948: IFFALSE 32975
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32950: LD_ADDR_VAR 0 2
32954: PUSH
32955: LD_INT 5
32957: PUSH
32958: LD_INT 8
32960: PUSH
32961: LD_INT 9
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: LIST
32968: PUSH
32969: LD_VAR 0 4
32973: ARRAY
32974: ST_TO_ADDR
// end ;
32975: LD_VAR 0 2
32979: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32980: LD_INT 0
32982: PPUSH
32983: PPUSH
32984: PPUSH
// if not mines then
32985: LD_VAR 0 2
32989: NOT
32990: IFFALSE 32994
// exit ;
32992: GO 33138
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32994: LD_ADDR_VAR 0 5
32998: PUSH
32999: LD_INT 81
33001: PUSH
33002: LD_VAR 0 1
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 3
33013: PUSH
33014: LD_INT 21
33016: PUSH
33017: LD_INT 3
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PPUSH
33032: CALL_OW 69
33036: ST_TO_ADDR
// for i in mines do
33037: LD_ADDR_VAR 0 4
33041: PUSH
33042: LD_VAR 0 2
33046: PUSH
33047: FOR_IN
33048: IFFALSE 33136
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33050: LD_VAR 0 4
33054: PUSH
33055: LD_INT 1
33057: ARRAY
33058: PPUSH
33059: LD_VAR 0 4
33063: PUSH
33064: LD_INT 2
33066: ARRAY
33067: PPUSH
33068: CALL_OW 458
33072: NOT
33073: IFFALSE 33077
// continue ;
33075: GO 33047
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33077: LD_VAR 0 4
33081: PUSH
33082: LD_INT 1
33084: ARRAY
33085: PPUSH
33086: LD_VAR 0 4
33090: PUSH
33091: LD_INT 2
33093: ARRAY
33094: PPUSH
33095: CALL_OW 428
33099: PUSH
33100: LD_VAR 0 5
33104: IN
33105: IFFALSE 33134
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33107: LD_VAR 0 4
33111: PUSH
33112: LD_INT 1
33114: ARRAY
33115: PPUSH
33116: LD_VAR 0 4
33120: PUSH
33121: LD_INT 2
33123: ARRAY
33124: PPUSH
33125: LD_VAR 0 1
33129: PPUSH
33130: CALL_OW 456
// end ;
33134: GO 33047
33136: POP
33137: POP
// end ;
33138: LD_VAR 0 3
33142: RET
// export function Count ( array ) ; var i ; begin
33143: LD_INT 0
33145: PPUSH
33146: PPUSH
// result := 0 ;
33147: LD_ADDR_VAR 0 2
33151: PUSH
33152: LD_INT 0
33154: ST_TO_ADDR
// for i in array do
33155: LD_ADDR_VAR 0 3
33159: PUSH
33160: LD_VAR 0 1
33164: PUSH
33165: FOR_IN
33166: IFFALSE 33190
// if i then
33168: LD_VAR 0 3
33172: IFFALSE 33188
// result := result + 1 ;
33174: LD_ADDR_VAR 0 2
33178: PUSH
33179: LD_VAR 0 2
33183: PUSH
33184: LD_INT 1
33186: PLUS
33187: ST_TO_ADDR
33188: GO 33165
33190: POP
33191: POP
// end ;
33192: LD_VAR 0 2
33196: RET
// export function IsEmpty ( building ) ; begin
33197: LD_INT 0
33199: PPUSH
// if not building then
33200: LD_VAR 0 1
33204: NOT
33205: IFFALSE 33209
// exit ;
33207: GO 33252
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33209: LD_ADDR_VAR 0 2
33213: PUSH
33214: LD_VAR 0 1
33218: PUSH
33219: LD_INT 22
33221: PUSH
33222: LD_VAR 0 1
33226: PPUSH
33227: CALL_OW 255
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 58
33238: PUSH
33239: EMPTY
33240: LIST
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PPUSH
33246: CALL_OW 69
33250: IN
33251: ST_TO_ADDR
// end ;
33252: LD_VAR 0 2
33256: RET
// export function IsNotFull ( building ) ; var places ; begin
33257: LD_INT 0
33259: PPUSH
33260: PPUSH
// if not building then
33261: LD_VAR 0 1
33265: NOT
33266: IFFALSE 33270
// exit ;
33268: GO 33441
// result := false ;
33270: LD_ADDR_VAR 0 2
33274: PUSH
33275: LD_INT 0
33277: ST_TO_ADDR
// places := 0 ;
33278: LD_ADDR_VAR 0 3
33282: PUSH
33283: LD_INT 0
33285: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33286: LD_VAR 0 1
33290: PPUSH
33291: CALL_OW 266
33295: PUSH
33296: LD_INT 0
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33358
33302: LD_INT 1
33304: DOUBLE
33305: EQUAL
33306: IFTRUE 33358
33308: LD_INT 6
33310: DOUBLE
33311: EQUAL
33312: IFTRUE 33358
33314: LD_INT 7
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33358
33320: LD_INT 8
33322: DOUBLE
33323: EQUAL
33324: IFTRUE 33358
33326: LD_INT 4
33328: DOUBLE
33329: EQUAL
33330: IFTRUE 33358
33332: LD_INT 5
33334: DOUBLE
33335: EQUAL
33336: IFTRUE 33358
33338: LD_INT 2
33340: DOUBLE
33341: EQUAL
33342: IFTRUE 33358
33344: LD_INT 3
33346: DOUBLE
33347: EQUAL
33348: IFTRUE 33358
33350: LD_INT 35
33352: DOUBLE
33353: EQUAL
33354: IFTRUE 33358
33356: GO 33369
33358: POP
// places := 6 ; b_bunker , b_breastwork :
33359: LD_ADDR_VAR 0 3
33363: PUSH
33364: LD_INT 6
33366: ST_TO_ADDR
33367: GO 33414
33369: LD_INT 32
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33383
33375: LD_INT 31
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33394
33383: POP
// places := 1 ; b_control_tower :
33384: LD_ADDR_VAR 0 3
33388: PUSH
33389: LD_INT 1
33391: ST_TO_ADDR
33392: GO 33414
33394: LD_INT 36
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33402
33400: GO 33413
33402: POP
// places := 3 ; end ;
33403: LD_ADDR_VAR 0 3
33407: PUSH
33408: LD_INT 3
33410: ST_TO_ADDR
33411: GO 33414
33413: POP
// if places then
33414: LD_VAR 0 3
33418: IFFALSE 33441
// result := UnitsInside ( building ) < places ;
33420: LD_ADDR_VAR 0 2
33424: PUSH
33425: LD_VAR 0 1
33429: PPUSH
33430: CALL_OW 313
33434: PUSH
33435: LD_VAR 0 3
33439: LESS
33440: ST_TO_ADDR
// end ;
33441: LD_VAR 0 2
33445: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33446: LD_INT 0
33448: PPUSH
33449: PPUSH
33450: PPUSH
33451: PPUSH
// tmp := [ ] ;
33452: LD_ADDR_VAR 0 3
33456: PUSH
33457: EMPTY
33458: ST_TO_ADDR
// list := [ ] ;
33459: LD_ADDR_VAR 0 5
33463: PUSH
33464: EMPTY
33465: ST_TO_ADDR
// for i = 16 to 25 do
33466: LD_ADDR_VAR 0 4
33470: PUSH
33471: DOUBLE
33472: LD_INT 16
33474: DEC
33475: ST_TO_ADDR
33476: LD_INT 25
33478: PUSH
33479: FOR_TO
33480: IFFALSE 33553
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33482: LD_ADDR_VAR 0 3
33486: PUSH
33487: LD_VAR 0 3
33491: PUSH
33492: LD_INT 22
33494: PUSH
33495: LD_VAR 0 1
33499: PPUSH
33500: CALL_OW 255
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 91
33511: PUSH
33512: LD_VAR 0 1
33516: PUSH
33517: LD_INT 6
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 30
33527: PUSH
33528: LD_VAR 0 4
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: PUSH
33542: EMPTY
33543: LIST
33544: PPUSH
33545: CALL_OW 69
33549: ADD
33550: ST_TO_ADDR
33551: GO 33479
33553: POP
33554: POP
// for i = 1 to tmp do
33555: LD_ADDR_VAR 0 4
33559: PUSH
33560: DOUBLE
33561: LD_INT 1
33563: DEC
33564: ST_TO_ADDR
33565: LD_VAR 0 3
33569: PUSH
33570: FOR_TO
33571: IFFALSE 33659
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33573: LD_ADDR_VAR 0 5
33577: PUSH
33578: LD_VAR 0 5
33582: PUSH
33583: LD_VAR 0 3
33587: PUSH
33588: LD_VAR 0 4
33592: ARRAY
33593: PPUSH
33594: CALL_OW 266
33598: PUSH
33599: LD_VAR 0 3
33603: PUSH
33604: LD_VAR 0 4
33608: ARRAY
33609: PPUSH
33610: CALL_OW 250
33614: PUSH
33615: LD_VAR 0 3
33619: PUSH
33620: LD_VAR 0 4
33624: ARRAY
33625: PPUSH
33626: CALL_OW 251
33630: PUSH
33631: LD_VAR 0 3
33635: PUSH
33636: LD_VAR 0 4
33640: ARRAY
33641: PPUSH
33642: CALL_OW 254
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: ADD
33656: ST_TO_ADDR
33657: GO 33570
33659: POP
33660: POP
// result := list ;
33661: LD_ADDR_VAR 0 2
33665: PUSH
33666: LD_VAR 0 5
33670: ST_TO_ADDR
// end ;
33671: LD_VAR 0 2
33675: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33676: LD_INT 0
33678: PPUSH
33679: PPUSH
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
33684: PPUSH
// if not factory then
33685: LD_VAR 0 1
33689: NOT
33690: IFFALSE 33694
// exit ;
33692: GO 34287
// if control = control_apeman then
33694: LD_VAR 0 4
33698: PUSH
33699: LD_INT 5
33701: EQUAL
33702: IFFALSE 33811
// begin tmp := UnitsInside ( factory ) ;
33704: LD_ADDR_VAR 0 8
33708: PUSH
33709: LD_VAR 0 1
33713: PPUSH
33714: CALL_OW 313
33718: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33719: LD_VAR 0 8
33723: PPUSH
33724: LD_INT 25
33726: PUSH
33727: LD_INT 12
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PPUSH
33734: CALL_OW 72
33738: NOT
33739: IFFALSE 33749
// control := control_manual ;
33741: LD_ADDR_VAR 0 4
33745: PUSH
33746: LD_INT 1
33748: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33749: LD_ADDR_VAR 0 8
33753: PUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: CALL 33446 0 1
33763: ST_TO_ADDR
// if tmp then
33764: LD_VAR 0 8
33768: IFFALSE 33811
// begin for i in tmp do
33770: LD_ADDR_VAR 0 7
33774: PUSH
33775: LD_VAR 0 8
33779: PUSH
33780: FOR_IN
33781: IFFALSE 33809
// if i [ 1 ] = b_ext_radio then
33783: LD_VAR 0 7
33787: PUSH
33788: LD_INT 1
33790: ARRAY
33791: PUSH
33792: LD_INT 22
33794: EQUAL
33795: IFFALSE 33807
// begin control := control_remote ;
33797: LD_ADDR_VAR 0 4
33801: PUSH
33802: LD_INT 2
33804: ST_TO_ADDR
// break ;
33805: GO 33809
// end ;
33807: GO 33780
33809: POP
33810: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33811: LD_VAR 0 1
33815: PPUSH
33816: LD_VAR 0 2
33820: PPUSH
33821: LD_VAR 0 3
33825: PPUSH
33826: LD_VAR 0 4
33830: PPUSH
33831: LD_VAR 0 5
33835: PPUSH
33836: CALL_OW 448
33840: IFFALSE 33875
// begin result := [ chassis , engine , control , weapon ] ;
33842: LD_ADDR_VAR 0 6
33846: PUSH
33847: LD_VAR 0 2
33851: PUSH
33852: LD_VAR 0 3
33856: PUSH
33857: LD_VAR 0 4
33861: PUSH
33862: LD_VAR 0 5
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: ST_TO_ADDR
// exit ;
33873: GO 34287
// end ; _chassis := AvailableChassisList ( factory ) ;
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_VAR 0 1
33884: PPUSH
33885: CALL_OW 475
33889: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33890: LD_ADDR_VAR 0 11
33894: PUSH
33895: LD_VAR 0 1
33899: PPUSH
33900: CALL_OW 476
33904: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33905: LD_ADDR_VAR 0 12
33909: PUSH
33910: LD_VAR 0 1
33914: PPUSH
33915: CALL_OW 477
33919: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33920: LD_ADDR_VAR 0 10
33924: PUSH
33925: LD_VAR 0 1
33929: PPUSH
33930: CALL_OW 478
33934: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33935: LD_VAR 0 9
33939: NOT
33940: PUSH
33941: LD_VAR 0 11
33945: NOT
33946: OR
33947: PUSH
33948: LD_VAR 0 12
33952: NOT
33953: OR
33954: PUSH
33955: LD_VAR 0 10
33959: NOT
33960: OR
33961: IFFALSE 33996
// begin result := [ chassis , engine , control , weapon ] ;
33963: LD_ADDR_VAR 0 6
33967: PUSH
33968: LD_VAR 0 2
33972: PUSH
33973: LD_VAR 0 3
33977: PUSH
33978: LD_VAR 0 4
33982: PUSH
33983: LD_VAR 0 5
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: ST_TO_ADDR
// exit ;
33994: GO 34287
// end ; if not chassis in _chassis then
33996: LD_VAR 0 2
34000: PUSH
34001: LD_VAR 0 9
34005: IN
34006: NOT
34007: IFFALSE 34033
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34009: LD_ADDR_VAR 0 2
34013: PUSH
34014: LD_VAR 0 9
34018: PUSH
34019: LD_INT 1
34021: PPUSH
34022: LD_VAR 0 9
34026: PPUSH
34027: CALL_OW 12
34031: ARRAY
34032: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34033: LD_VAR 0 2
34037: PPUSH
34038: LD_VAR 0 3
34042: PPUSH
34043: CALL 34292 0 2
34047: NOT
34048: IFFALSE 34107
// repeat engine := _engine [ 1 ] ;
34050: LD_ADDR_VAR 0 3
34054: PUSH
34055: LD_VAR 0 11
34059: PUSH
34060: LD_INT 1
34062: ARRAY
34063: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34064: LD_ADDR_VAR 0 11
34068: PUSH
34069: LD_VAR 0 11
34073: PPUSH
34074: LD_INT 1
34076: PPUSH
34077: CALL_OW 3
34081: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34082: LD_VAR 0 2
34086: PPUSH
34087: LD_VAR 0 3
34091: PPUSH
34092: CALL 34292 0 2
34096: PUSH
34097: LD_VAR 0 11
34101: PUSH
34102: EMPTY
34103: EQUAL
34104: OR
34105: IFFALSE 34050
// if not control in _control then
34107: LD_VAR 0 4
34111: PUSH
34112: LD_VAR 0 12
34116: IN
34117: NOT
34118: IFFALSE 34144
// control := _control [ rand ( 1 , _control ) ] ;
34120: LD_ADDR_VAR 0 4
34124: PUSH
34125: LD_VAR 0 12
34129: PUSH
34130: LD_INT 1
34132: PPUSH
34133: LD_VAR 0 12
34137: PPUSH
34138: CALL_OW 12
34142: ARRAY
34143: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34144: LD_VAR 0 2
34148: PPUSH
34149: LD_VAR 0 5
34153: PPUSH
34154: CALL 34512 0 2
34158: NOT
34159: IFFALSE 34218
// repeat weapon := _weapon [ 1 ] ;
34161: LD_ADDR_VAR 0 5
34165: PUSH
34166: LD_VAR 0 10
34170: PUSH
34171: LD_INT 1
34173: ARRAY
34174: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34175: LD_ADDR_VAR 0 10
34179: PUSH
34180: LD_VAR 0 10
34184: PPUSH
34185: LD_INT 1
34187: PPUSH
34188: CALL_OW 3
34192: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34193: LD_VAR 0 2
34197: PPUSH
34198: LD_VAR 0 5
34202: PPUSH
34203: CALL 34512 0 2
34207: PUSH
34208: LD_VAR 0 10
34212: PUSH
34213: EMPTY
34214: EQUAL
34215: OR
34216: IFFALSE 34161
// result := [ ] ;
34218: LD_ADDR_VAR 0 6
34222: PUSH
34223: EMPTY
34224: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34225: LD_VAR 0 1
34229: PPUSH
34230: LD_VAR 0 2
34234: PPUSH
34235: LD_VAR 0 3
34239: PPUSH
34240: LD_VAR 0 4
34244: PPUSH
34245: LD_VAR 0 5
34249: PPUSH
34250: CALL_OW 448
34254: IFFALSE 34287
// result := [ chassis , engine , control , weapon ] ;
34256: LD_ADDR_VAR 0 6
34260: PUSH
34261: LD_VAR 0 2
34265: PUSH
34266: LD_VAR 0 3
34270: PUSH
34271: LD_VAR 0 4
34275: PUSH
34276: LD_VAR 0 5
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: ST_TO_ADDR
// end ;
34287: LD_VAR 0 6
34291: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34292: LD_INT 0
34294: PPUSH
// if not chassis or not engine then
34295: LD_VAR 0 1
34299: NOT
34300: PUSH
34301: LD_VAR 0 2
34305: NOT
34306: OR
34307: IFFALSE 34311
// exit ;
34309: GO 34507
// case engine of engine_solar :
34311: LD_VAR 0 2
34315: PUSH
34316: LD_INT 2
34318: DOUBLE
34319: EQUAL
34320: IFTRUE 34324
34322: GO 34362
34324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34325: LD_ADDR_VAR 0 3
34329: PUSH
34330: LD_INT 11
34332: PUSH
34333: LD_INT 12
34335: PUSH
34336: LD_INT 13
34338: PUSH
34339: LD_INT 14
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: LD_INT 3
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: ST_TO_ADDR
34360: GO 34491
34362: LD_INT 1
34364: DOUBLE
34365: EQUAL
34366: IFTRUE 34370
34368: GO 34432
34370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34371: LD_ADDR_VAR 0 3
34375: PUSH
34376: LD_INT 11
34378: PUSH
34379: LD_INT 12
34381: PUSH
34382: LD_INT 13
34384: PUSH
34385: LD_INT 14
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 3
34396: PUSH
34397: LD_INT 4
34399: PUSH
34400: LD_INT 5
34402: PUSH
34403: LD_INT 21
34405: PUSH
34406: LD_INT 23
34408: PUSH
34409: LD_INT 22
34411: PUSH
34412: LD_INT 24
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: ST_TO_ADDR
34430: GO 34491
34432: LD_INT 3
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34440
34438: GO 34490
34440: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34441: LD_ADDR_VAR 0 3
34445: PUSH
34446: LD_INT 13
34448: PUSH
34449: LD_INT 14
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: LD_INT 3
34457: PUSH
34458: LD_INT 4
34460: PUSH
34461: LD_INT 5
34463: PUSH
34464: LD_INT 21
34466: PUSH
34467: LD_INT 22
34469: PUSH
34470: LD_INT 23
34472: PUSH
34473: LD_INT 24
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: ST_TO_ADDR
34488: GO 34491
34490: POP
// result := ( chassis in result ) ;
34491: LD_ADDR_VAR 0 3
34495: PUSH
34496: LD_VAR 0 1
34500: PUSH
34501: LD_VAR 0 3
34505: IN
34506: ST_TO_ADDR
// end ;
34507: LD_VAR 0 3
34511: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34512: LD_INT 0
34514: PPUSH
// if not chassis or not weapon then
34515: LD_VAR 0 1
34519: NOT
34520: PUSH
34521: LD_VAR 0 2
34525: NOT
34526: OR
34527: IFFALSE 34531
// exit ;
34529: GO 35591
// case weapon of us_machine_gun :
34531: LD_VAR 0 2
34535: PUSH
34536: LD_INT 2
34538: DOUBLE
34539: EQUAL
34540: IFTRUE 34544
34542: GO 34574
34544: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34545: LD_ADDR_VAR 0 3
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: LD_INT 3
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: LD_INT 5
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: ST_TO_ADDR
34572: GO 35575
34574: LD_INT 3
34576: DOUBLE
34577: EQUAL
34578: IFTRUE 34582
34580: GO 34612
34582: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34583: LD_ADDR_VAR 0 3
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: LD_INT 3
34596: PUSH
34597: LD_INT 4
34599: PUSH
34600: LD_INT 5
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: ST_TO_ADDR
34610: GO 35575
34612: LD_INT 11
34614: DOUBLE
34615: EQUAL
34616: IFTRUE 34620
34618: GO 34650
34620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34621: LD_ADDR_VAR 0 3
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: LD_INT 4
34637: PUSH
34638: LD_INT 5
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: ST_TO_ADDR
34648: GO 35575
34650: LD_INT 4
34652: DOUBLE
34653: EQUAL
34654: IFTRUE 34658
34656: GO 34684
34658: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34659: LD_ADDR_VAR 0 3
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: LD_INT 3
34669: PUSH
34670: LD_INT 4
34672: PUSH
34673: LD_INT 5
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: ST_TO_ADDR
34682: GO 35575
34684: LD_INT 5
34686: DOUBLE
34687: EQUAL
34688: IFTRUE 34692
34690: GO 34718
34692: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34693: LD_ADDR_VAR 0 3
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: LD_INT 3
34703: PUSH
34704: LD_INT 4
34706: PUSH
34707: LD_INT 5
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: ST_TO_ADDR
34716: GO 35575
34718: LD_INT 9
34720: DOUBLE
34721: EQUAL
34722: IFTRUE 34726
34724: GO 34752
34726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34727: LD_ADDR_VAR 0 3
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: LD_INT 4
34740: PUSH
34741: LD_INT 5
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: ST_TO_ADDR
34750: GO 35575
34752: LD_INT 7
34754: DOUBLE
34755: EQUAL
34756: IFTRUE 34760
34758: GO 34786
34760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34761: LD_ADDR_VAR 0 3
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: LD_INT 3
34771: PUSH
34772: LD_INT 4
34774: PUSH
34775: LD_INT 5
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: ST_TO_ADDR
34784: GO 35575
34786: LD_INT 12
34788: DOUBLE
34789: EQUAL
34790: IFTRUE 34794
34792: GO 34820
34794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34795: LD_ADDR_VAR 0 3
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: LD_INT 3
34805: PUSH
34806: LD_INT 4
34808: PUSH
34809: LD_INT 5
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: ST_TO_ADDR
34818: GO 35575
34820: LD_INT 13
34822: DOUBLE
34823: EQUAL
34824: IFTRUE 34828
34826: GO 34854
34828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34829: LD_ADDR_VAR 0 3
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 3
34839: PUSH
34840: LD_INT 4
34842: PUSH
34843: LD_INT 5
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: ST_TO_ADDR
34852: GO 35575
34854: LD_INT 14
34856: DOUBLE
34857: EQUAL
34858: IFTRUE 34862
34860: GO 34880
34862: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34863: LD_ADDR_VAR 0 3
34867: PUSH
34868: LD_INT 4
34870: PUSH
34871: LD_INT 5
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: ST_TO_ADDR
34878: GO 35575
34880: LD_INT 6
34882: DOUBLE
34883: EQUAL
34884: IFTRUE 34888
34886: GO 34906
34888: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34889: LD_ADDR_VAR 0 3
34893: PUSH
34894: LD_INT 4
34896: PUSH
34897: LD_INT 5
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: ST_TO_ADDR
34904: GO 35575
34906: LD_INT 10
34908: DOUBLE
34909: EQUAL
34910: IFTRUE 34914
34912: GO 34932
34914: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34915: LD_ADDR_VAR 0 3
34919: PUSH
34920: LD_INT 4
34922: PUSH
34923: LD_INT 5
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: ST_TO_ADDR
34930: GO 35575
34932: LD_INT 22
34934: DOUBLE
34935: EQUAL
34936: IFTRUE 34940
34938: GO 34966
34940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34941: LD_ADDR_VAR 0 3
34945: PUSH
34946: LD_INT 11
34948: PUSH
34949: LD_INT 12
34951: PUSH
34952: LD_INT 13
34954: PUSH
34955: LD_INT 14
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: ST_TO_ADDR
34964: GO 35575
34966: LD_INT 23
34968: DOUBLE
34969: EQUAL
34970: IFTRUE 34974
34972: GO 35000
34974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34975: LD_ADDR_VAR 0 3
34979: PUSH
34980: LD_INT 11
34982: PUSH
34983: LD_INT 12
34985: PUSH
34986: LD_INT 13
34988: PUSH
34989: LD_INT 14
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: ST_TO_ADDR
34998: GO 35575
35000: LD_INT 24
35002: DOUBLE
35003: EQUAL
35004: IFTRUE 35008
35006: GO 35034
35008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35009: LD_ADDR_VAR 0 3
35013: PUSH
35014: LD_INT 11
35016: PUSH
35017: LD_INT 12
35019: PUSH
35020: LD_INT 13
35022: PUSH
35023: LD_INT 14
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: ST_TO_ADDR
35032: GO 35575
35034: LD_INT 30
35036: DOUBLE
35037: EQUAL
35038: IFTRUE 35042
35040: GO 35068
35042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35043: LD_ADDR_VAR 0 3
35047: PUSH
35048: LD_INT 11
35050: PUSH
35051: LD_INT 12
35053: PUSH
35054: LD_INT 13
35056: PUSH
35057: LD_INT 14
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
35066: GO 35575
35068: LD_INT 25
35070: DOUBLE
35071: EQUAL
35072: IFTRUE 35076
35074: GO 35094
35076: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35077: LD_ADDR_VAR 0 3
35081: PUSH
35082: LD_INT 13
35084: PUSH
35085: LD_INT 14
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: ST_TO_ADDR
35092: GO 35575
35094: LD_INT 27
35096: DOUBLE
35097: EQUAL
35098: IFTRUE 35102
35100: GO 35120
35102: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35103: LD_ADDR_VAR 0 3
35107: PUSH
35108: LD_INT 13
35110: PUSH
35111: LD_INT 14
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: ST_TO_ADDR
35118: GO 35575
35120: LD_INT 92
35122: DOUBLE
35123: EQUAL
35124: IFTRUE 35128
35126: GO 35154
35128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35129: LD_ADDR_VAR 0 3
35133: PUSH
35134: LD_INT 11
35136: PUSH
35137: LD_INT 12
35139: PUSH
35140: LD_INT 13
35142: PUSH
35143: LD_INT 14
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: ST_TO_ADDR
35152: GO 35575
35154: LD_INT 28
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35162
35160: GO 35180
35162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35163: LD_ADDR_VAR 0 3
35167: PUSH
35168: LD_INT 13
35170: PUSH
35171: LD_INT 14
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: ST_TO_ADDR
35178: GO 35575
35180: LD_INT 29
35182: DOUBLE
35183: EQUAL
35184: IFTRUE 35188
35186: GO 35206
35188: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35189: LD_ADDR_VAR 0 3
35193: PUSH
35194: LD_INT 13
35196: PUSH
35197: LD_INT 14
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: ST_TO_ADDR
35204: GO 35575
35206: LD_INT 31
35208: DOUBLE
35209: EQUAL
35210: IFTRUE 35214
35212: GO 35232
35214: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35215: LD_ADDR_VAR 0 3
35219: PUSH
35220: LD_INT 13
35222: PUSH
35223: LD_INT 14
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: ST_TO_ADDR
35230: GO 35575
35232: LD_INT 26
35234: DOUBLE
35235: EQUAL
35236: IFTRUE 35240
35238: GO 35258
35240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35241: LD_ADDR_VAR 0 3
35245: PUSH
35246: LD_INT 13
35248: PUSH
35249: LD_INT 14
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: ST_TO_ADDR
35256: GO 35575
35258: LD_INT 42
35260: DOUBLE
35261: EQUAL
35262: IFTRUE 35266
35264: GO 35292
35266: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35267: LD_ADDR_VAR 0 3
35271: PUSH
35272: LD_INT 21
35274: PUSH
35275: LD_INT 22
35277: PUSH
35278: LD_INT 23
35280: PUSH
35281: LD_INT 24
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: ST_TO_ADDR
35290: GO 35575
35292: LD_INT 43
35294: DOUBLE
35295: EQUAL
35296: IFTRUE 35300
35298: GO 35326
35300: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35301: LD_ADDR_VAR 0 3
35305: PUSH
35306: LD_INT 21
35308: PUSH
35309: LD_INT 22
35311: PUSH
35312: LD_INT 23
35314: PUSH
35315: LD_INT 24
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: ST_TO_ADDR
35324: GO 35575
35326: LD_INT 44
35328: DOUBLE
35329: EQUAL
35330: IFTRUE 35334
35332: GO 35360
35334: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35335: LD_ADDR_VAR 0 3
35339: PUSH
35340: LD_INT 21
35342: PUSH
35343: LD_INT 22
35345: PUSH
35346: LD_INT 23
35348: PUSH
35349: LD_INT 24
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: ST_TO_ADDR
35358: GO 35575
35360: LD_INT 45
35362: DOUBLE
35363: EQUAL
35364: IFTRUE 35368
35366: GO 35394
35368: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35369: LD_ADDR_VAR 0 3
35373: PUSH
35374: LD_INT 21
35376: PUSH
35377: LD_INT 22
35379: PUSH
35380: LD_INT 23
35382: PUSH
35383: LD_INT 24
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: ST_TO_ADDR
35392: GO 35575
35394: LD_INT 49
35396: DOUBLE
35397: EQUAL
35398: IFTRUE 35402
35400: GO 35428
35402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35403: LD_ADDR_VAR 0 3
35407: PUSH
35408: LD_INT 21
35410: PUSH
35411: LD_INT 22
35413: PUSH
35414: LD_INT 23
35416: PUSH
35417: LD_INT 24
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: ST_TO_ADDR
35426: GO 35575
35428: LD_INT 51
35430: DOUBLE
35431: EQUAL
35432: IFTRUE 35436
35434: GO 35462
35436: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35437: LD_ADDR_VAR 0 3
35441: PUSH
35442: LD_INT 21
35444: PUSH
35445: LD_INT 22
35447: PUSH
35448: LD_INT 23
35450: PUSH
35451: LD_INT 24
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: ST_TO_ADDR
35460: GO 35575
35462: LD_INT 52
35464: DOUBLE
35465: EQUAL
35466: IFTRUE 35470
35468: GO 35496
35470: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35471: LD_ADDR_VAR 0 3
35475: PUSH
35476: LD_INT 21
35478: PUSH
35479: LD_INT 22
35481: PUSH
35482: LD_INT 23
35484: PUSH
35485: LD_INT 24
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: ST_TO_ADDR
35494: GO 35575
35496: LD_INT 53
35498: DOUBLE
35499: EQUAL
35500: IFTRUE 35504
35502: GO 35522
35504: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35505: LD_ADDR_VAR 0 3
35509: PUSH
35510: LD_INT 23
35512: PUSH
35513: LD_INT 24
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: ST_TO_ADDR
35520: GO 35575
35522: LD_INT 46
35524: DOUBLE
35525: EQUAL
35526: IFTRUE 35530
35528: GO 35548
35530: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35531: LD_ADDR_VAR 0 3
35535: PUSH
35536: LD_INT 23
35538: PUSH
35539: LD_INT 24
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: ST_TO_ADDR
35546: GO 35575
35548: LD_INT 47
35550: DOUBLE
35551: EQUAL
35552: IFTRUE 35556
35554: GO 35574
35556: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35557: LD_ADDR_VAR 0 3
35561: PUSH
35562: LD_INT 23
35564: PUSH
35565: LD_INT 24
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: ST_TO_ADDR
35572: GO 35575
35574: POP
// result := ( chassis in result ) ;
35575: LD_ADDR_VAR 0 3
35579: PUSH
35580: LD_VAR 0 1
35584: PUSH
35585: LD_VAR 0 3
35589: IN
35590: ST_TO_ADDR
// end ;
35591: LD_VAR 0 3
35595: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35596: LD_INT 0
35598: PPUSH
35599: PPUSH
35600: PPUSH
35601: PPUSH
35602: PPUSH
35603: PPUSH
35604: PPUSH
// result := array ;
35605: LD_ADDR_VAR 0 5
35609: PUSH
35610: LD_VAR 0 1
35614: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35615: LD_VAR 0 1
35619: NOT
35620: PUSH
35621: LD_VAR 0 2
35625: NOT
35626: OR
35627: PUSH
35628: LD_VAR 0 3
35632: NOT
35633: OR
35634: PUSH
35635: LD_VAR 0 2
35639: PUSH
35640: LD_VAR 0 1
35644: GREATER
35645: OR
35646: PUSH
35647: LD_VAR 0 3
35651: PUSH
35652: LD_VAR 0 1
35656: GREATER
35657: OR
35658: IFFALSE 35662
// exit ;
35660: GO 35958
// if direction then
35662: LD_VAR 0 4
35666: IFFALSE 35730
// begin d := 1 ;
35668: LD_ADDR_VAR 0 9
35672: PUSH
35673: LD_INT 1
35675: ST_TO_ADDR
// if i_from > i_to then
35676: LD_VAR 0 2
35680: PUSH
35681: LD_VAR 0 3
35685: GREATER
35686: IFFALSE 35712
// length := ( array - i_from ) + i_to else
35688: LD_ADDR_VAR 0 11
35692: PUSH
35693: LD_VAR 0 1
35697: PUSH
35698: LD_VAR 0 2
35702: MINUS
35703: PUSH
35704: LD_VAR 0 3
35708: PLUS
35709: ST_TO_ADDR
35710: GO 35728
// length := i_to - i_from ;
35712: LD_ADDR_VAR 0 11
35716: PUSH
35717: LD_VAR 0 3
35721: PUSH
35722: LD_VAR 0 2
35726: MINUS
35727: ST_TO_ADDR
// end else
35728: GO 35791
// begin d := - 1 ;
35730: LD_ADDR_VAR 0 9
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: ST_TO_ADDR
// if i_from > i_to then
35739: LD_VAR 0 2
35743: PUSH
35744: LD_VAR 0 3
35748: GREATER
35749: IFFALSE 35769
// length := i_from - i_to else
35751: LD_ADDR_VAR 0 11
35755: PUSH
35756: LD_VAR 0 2
35760: PUSH
35761: LD_VAR 0 3
35765: MINUS
35766: ST_TO_ADDR
35767: GO 35791
// length := ( array - i_to ) + i_from ;
35769: LD_ADDR_VAR 0 11
35773: PUSH
35774: LD_VAR 0 1
35778: PUSH
35779: LD_VAR 0 3
35783: MINUS
35784: PUSH
35785: LD_VAR 0 2
35789: PLUS
35790: ST_TO_ADDR
// end ; if not length then
35791: LD_VAR 0 11
35795: NOT
35796: IFFALSE 35800
// exit ;
35798: GO 35958
// tmp := array ;
35800: LD_ADDR_VAR 0 10
35804: PUSH
35805: LD_VAR 0 1
35809: ST_TO_ADDR
// for i = 1 to length do
35810: LD_ADDR_VAR 0 6
35814: PUSH
35815: DOUBLE
35816: LD_INT 1
35818: DEC
35819: ST_TO_ADDR
35820: LD_VAR 0 11
35824: PUSH
35825: FOR_TO
35826: IFFALSE 35946
// begin for j = 1 to array do
35828: LD_ADDR_VAR 0 7
35832: PUSH
35833: DOUBLE
35834: LD_INT 1
35836: DEC
35837: ST_TO_ADDR
35838: LD_VAR 0 1
35842: PUSH
35843: FOR_TO
35844: IFFALSE 35932
// begin k := j + d ;
35846: LD_ADDR_VAR 0 8
35850: PUSH
35851: LD_VAR 0 7
35855: PUSH
35856: LD_VAR 0 9
35860: PLUS
35861: ST_TO_ADDR
// if k > array then
35862: LD_VAR 0 8
35866: PUSH
35867: LD_VAR 0 1
35871: GREATER
35872: IFFALSE 35882
// k := 1 ;
35874: LD_ADDR_VAR 0 8
35878: PUSH
35879: LD_INT 1
35881: ST_TO_ADDR
// if not k then
35882: LD_VAR 0 8
35886: NOT
35887: IFFALSE 35899
// k := array ;
35889: LD_ADDR_VAR 0 8
35893: PUSH
35894: LD_VAR 0 1
35898: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35899: LD_ADDR_VAR 0 10
35903: PUSH
35904: LD_VAR 0 10
35908: PPUSH
35909: LD_VAR 0 8
35913: PPUSH
35914: LD_VAR 0 1
35918: PUSH
35919: LD_VAR 0 7
35923: ARRAY
35924: PPUSH
35925: CALL_OW 1
35929: ST_TO_ADDR
// end ;
35930: GO 35843
35932: POP
35933: POP
// array := tmp ;
35934: LD_ADDR_VAR 0 1
35938: PUSH
35939: LD_VAR 0 10
35943: ST_TO_ADDR
// end ;
35944: GO 35825
35946: POP
35947: POP
// result := array ;
35948: LD_ADDR_VAR 0 5
35952: PUSH
35953: LD_VAR 0 1
35957: ST_TO_ADDR
// end ;
35958: LD_VAR 0 5
35962: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35963: LD_INT 0
35965: PPUSH
35966: PPUSH
// result := 0 ;
35967: LD_ADDR_VAR 0 3
35971: PUSH
35972: LD_INT 0
35974: ST_TO_ADDR
// if not array or not value in array then
35975: LD_VAR 0 1
35979: NOT
35980: PUSH
35981: LD_VAR 0 2
35985: PUSH
35986: LD_VAR 0 1
35990: IN
35991: NOT
35992: OR
35993: IFFALSE 35997
// exit ;
35995: GO 36051
// for i = 1 to array do
35997: LD_ADDR_VAR 0 4
36001: PUSH
36002: DOUBLE
36003: LD_INT 1
36005: DEC
36006: ST_TO_ADDR
36007: LD_VAR 0 1
36011: PUSH
36012: FOR_TO
36013: IFFALSE 36049
// if value = array [ i ] then
36015: LD_VAR 0 2
36019: PUSH
36020: LD_VAR 0 1
36024: PUSH
36025: LD_VAR 0 4
36029: ARRAY
36030: EQUAL
36031: IFFALSE 36047
// begin result := i ;
36033: LD_ADDR_VAR 0 3
36037: PUSH
36038: LD_VAR 0 4
36042: ST_TO_ADDR
// exit ;
36043: POP
36044: POP
36045: GO 36051
// end ;
36047: GO 36012
36049: POP
36050: POP
// end ;
36051: LD_VAR 0 3
36055: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36056: LD_INT 0
36058: PPUSH
// vc_chassis := chassis ;
36059: LD_ADDR_OWVAR 37
36063: PUSH
36064: LD_VAR 0 1
36068: ST_TO_ADDR
// vc_engine := engine ;
36069: LD_ADDR_OWVAR 39
36073: PUSH
36074: LD_VAR 0 2
36078: ST_TO_ADDR
// vc_control := control ;
36079: LD_ADDR_OWVAR 38
36083: PUSH
36084: LD_VAR 0 3
36088: ST_TO_ADDR
// vc_weapon := weapon ;
36089: LD_ADDR_OWVAR 40
36093: PUSH
36094: LD_VAR 0 4
36098: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36099: LD_ADDR_OWVAR 41
36103: PUSH
36104: LD_VAR 0 5
36108: ST_TO_ADDR
// end ;
36109: LD_VAR 0 6
36113: RET
// export function WantPlant ( unit ) ; var task ; begin
36114: LD_INT 0
36116: PPUSH
36117: PPUSH
// result := false ;
36118: LD_ADDR_VAR 0 2
36122: PUSH
36123: LD_INT 0
36125: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36126: LD_ADDR_VAR 0 3
36130: PUSH
36131: LD_VAR 0 1
36135: PPUSH
36136: CALL_OW 437
36140: ST_TO_ADDR
// if task then
36141: LD_VAR 0 3
36145: IFFALSE 36173
// if task [ 1 ] [ 1 ] = p then
36147: LD_VAR 0 3
36151: PUSH
36152: LD_INT 1
36154: ARRAY
36155: PUSH
36156: LD_INT 1
36158: ARRAY
36159: PUSH
36160: LD_STRING p
36162: EQUAL
36163: IFFALSE 36173
// result := true ;
36165: LD_ADDR_VAR 0 2
36169: PUSH
36170: LD_INT 1
36172: ST_TO_ADDR
// end ;
36173: LD_VAR 0 2
36177: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36178: LD_INT 0
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
// if pos < 1 then
36184: LD_VAR 0 2
36188: PUSH
36189: LD_INT 1
36191: LESS
36192: IFFALSE 36196
// exit ;
36194: GO 36499
// if pos = 1 then
36196: LD_VAR 0 2
36200: PUSH
36201: LD_INT 1
36203: EQUAL
36204: IFFALSE 36237
// result := Replace ( arr , pos [ 1 ] , value ) else
36206: LD_ADDR_VAR 0 4
36210: PUSH
36211: LD_VAR 0 1
36215: PPUSH
36216: LD_VAR 0 2
36220: PUSH
36221: LD_INT 1
36223: ARRAY
36224: PPUSH
36225: LD_VAR 0 3
36229: PPUSH
36230: CALL_OW 1
36234: ST_TO_ADDR
36235: GO 36499
// begin tmp := arr ;
36237: LD_ADDR_VAR 0 6
36241: PUSH
36242: LD_VAR 0 1
36246: ST_TO_ADDR
// s_arr := [ tmp ] ;
36247: LD_ADDR_VAR 0 7
36251: PUSH
36252: LD_VAR 0 6
36256: PUSH
36257: EMPTY
36258: LIST
36259: ST_TO_ADDR
// for i = 1 to pos - 1 do
36260: LD_ADDR_VAR 0 5
36264: PUSH
36265: DOUBLE
36266: LD_INT 1
36268: DEC
36269: ST_TO_ADDR
36270: LD_VAR 0 2
36274: PUSH
36275: LD_INT 1
36277: MINUS
36278: PUSH
36279: FOR_TO
36280: IFFALSE 36325
// begin tmp := tmp [ pos [ i ] ] ;
36282: LD_ADDR_VAR 0 6
36286: PUSH
36287: LD_VAR 0 6
36291: PUSH
36292: LD_VAR 0 2
36296: PUSH
36297: LD_VAR 0 5
36301: ARRAY
36302: ARRAY
36303: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36304: LD_ADDR_VAR 0 7
36308: PUSH
36309: LD_VAR 0 7
36313: PUSH
36314: LD_VAR 0 6
36318: PUSH
36319: EMPTY
36320: LIST
36321: ADD
36322: ST_TO_ADDR
// end ;
36323: GO 36279
36325: POP
36326: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36327: LD_ADDR_VAR 0 6
36331: PUSH
36332: LD_VAR 0 6
36336: PPUSH
36337: LD_VAR 0 2
36341: PUSH
36342: LD_VAR 0 2
36346: ARRAY
36347: PPUSH
36348: LD_VAR 0 3
36352: PPUSH
36353: CALL_OW 1
36357: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36358: LD_ADDR_VAR 0 7
36362: PUSH
36363: LD_VAR 0 7
36367: PPUSH
36368: LD_VAR 0 7
36372: PPUSH
36373: LD_VAR 0 6
36377: PPUSH
36378: CALL_OW 1
36382: ST_TO_ADDR
// for i = s_arr downto 2 do
36383: LD_ADDR_VAR 0 5
36387: PUSH
36388: DOUBLE
36389: LD_VAR 0 7
36393: INC
36394: ST_TO_ADDR
36395: LD_INT 2
36397: PUSH
36398: FOR_DOWNTO
36399: IFFALSE 36483
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36401: LD_ADDR_VAR 0 6
36405: PUSH
36406: LD_VAR 0 7
36410: PUSH
36411: LD_VAR 0 5
36415: PUSH
36416: LD_INT 1
36418: MINUS
36419: ARRAY
36420: PPUSH
36421: LD_VAR 0 2
36425: PUSH
36426: LD_VAR 0 5
36430: PUSH
36431: LD_INT 1
36433: MINUS
36434: ARRAY
36435: PPUSH
36436: LD_VAR 0 7
36440: PUSH
36441: LD_VAR 0 5
36445: ARRAY
36446: PPUSH
36447: CALL_OW 1
36451: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36452: LD_ADDR_VAR 0 7
36456: PUSH
36457: LD_VAR 0 7
36461: PPUSH
36462: LD_VAR 0 5
36466: PUSH
36467: LD_INT 1
36469: MINUS
36470: PPUSH
36471: LD_VAR 0 6
36475: PPUSH
36476: CALL_OW 1
36480: ST_TO_ADDR
// end ;
36481: GO 36398
36483: POP
36484: POP
// result := s_arr [ 1 ] ;
36485: LD_ADDR_VAR 0 4
36489: PUSH
36490: LD_VAR 0 7
36494: PUSH
36495: LD_INT 1
36497: ARRAY
36498: ST_TO_ADDR
// end ; end ;
36499: LD_VAR 0 4
36503: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36504: LD_INT 0
36506: PPUSH
36507: PPUSH
// if not list then
36508: LD_VAR 0 1
36512: NOT
36513: IFFALSE 36517
// exit ;
36515: GO 36608
// i := list [ pos1 ] ;
36517: LD_ADDR_VAR 0 5
36521: PUSH
36522: LD_VAR 0 1
36526: PUSH
36527: LD_VAR 0 2
36531: ARRAY
36532: ST_TO_ADDR
// if not i then
36533: LD_VAR 0 5
36537: NOT
36538: IFFALSE 36542
// exit ;
36540: GO 36608
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36542: LD_ADDR_VAR 0 1
36546: PUSH
36547: LD_VAR 0 1
36551: PPUSH
36552: LD_VAR 0 2
36556: PPUSH
36557: LD_VAR 0 1
36561: PUSH
36562: LD_VAR 0 3
36566: ARRAY
36567: PPUSH
36568: CALL_OW 1
36572: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36573: LD_ADDR_VAR 0 1
36577: PUSH
36578: LD_VAR 0 1
36582: PPUSH
36583: LD_VAR 0 3
36587: PPUSH
36588: LD_VAR 0 5
36592: PPUSH
36593: CALL_OW 1
36597: ST_TO_ADDR
// result := list ;
36598: LD_ADDR_VAR 0 4
36602: PUSH
36603: LD_VAR 0 1
36607: ST_TO_ADDR
// end ;
36608: LD_VAR 0 4
36612: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36613: LD_INT 0
36615: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36616: LD_ADDR_VAR 0 5
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 250
36630: PPUSH
36631: LD_VAR 0 1
36635: PPUSH
36636: CALL_OW 251
36640: PPUSH
36641: LD_VAR 0 2
36645: PPUSH
36646: LD_VAR 0 3
36650: PPUSH
36651: LD_VAR 0 4
36655: PPUSH
36656: CALL 36666 0 5
36660: ST_TO_ADDR
// end ;
36661: LD_VAR 0 5
36665: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36666: LD_INT 0
36668: PPUSH
36669: PPUSH
36670: PPUSH
36671: PPUSH
// if not list then
36672: LD_VAR 0 3
36676: NOT
36677: IFFALSE 36681
// exit ;
36679: GO 37069
// result := [ ] ;
36681: LD_ADDR_VAR 0 6
36685: PUSH
36686: EMPTY
36687: ST_TO_ADDR
// for i in list do
36688: LD_ADDR_VAR 0 7
36692: PUSH
36693: LD_VAR 0 3
36697: PUSH
36698: FOR_IN
36699: IFFALSE 36901
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36701: LD_ADDR_VAR 0 9
36705: PUSH
36706: LD_VAR 0 7
36710: PPUSH
36711: LD_VAR 0 1
36715: PPUSH
36716: LD_VAR 0 2
36720: PPUSH
36721: CALL_OW 297
36725: ST_TO_ADDR
// if not result then
36726: LD_VAR 0 6
36730: NOT
36731: IFFALSE 36757
// result := [ [ i , tmp ] ] else
36733: LD_ADDR_VAR 0 6
36737: PUSH
36738: LD_VAR 0 7
36742: PUSH
36743: LD_VAR 0 9
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: EMPTY
36753: LIST
36754: ST_TO_ADDR
36755: GO 36899
// begin if result [ result ] [ 2 ] < tmp then
36757: LD_VAR 0 6
36761: PUSH
36762: LD_VAR 0 6
36766: ARRAY
36767: PUSH
36768: LD_INT 2
36770: ARRAY
36771: PUSH
36772: LD_VAR 0 9
36776: LESS
36777: IFFALSE 36819
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36779: LD_ADDR_VAR 0 6
36783: PUSH
36784: LD_VAR 0 6
36788: PPUSH
36789: LD_VAR 0 6
36793: PUSH
36794: LD_INT 1
36796: PLUS
36797: PPUSH
36798: LD_VAR 0 7
36802: PUSH
36803: LD_VAR 0 9
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PPUSH
36812: CALL_OW 2
36816: ST_TO_ADDR
36817: GO 36899
// for j = 1 to result do
36819: LD_ADDR_VAR 0 8
36823: PUSH
36824: DOUBLE
36825: LD_INT 1
36827: DEC
36828: ST_TO_ADDR
36829: LD_VAR 0 6
36833: PUSH
36834: FOR_TO
36835: IFFALSE 36897
// begin if tmp < result [ j ] [ 2 ] then
36837: LD_VAR 0 9
36841: PUSH
36842: LD_VAR 0 6
36846: PUSH
36847: LD_VAR 0 8
36851: ARRAY
36852: PUSH
36853: LD_INT 2
36855: ARRAY
36856: LESS
36857: IFFALSE 36895
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36859: LD_ADDR_VAR 0 6
36863: PUSH
36864: LD_VAR 0 6
36868: PPUSH
36869: LD_VAR 0 8
36873: PPUSH
36874: LD_VAR 0 7
36878: PUSH
36879: LD_VAR 0 9
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PPUSH
36888: CALL_OW 2
36892: ST_TO_ADDR
// break ;
36893: GO 36897
// end ; end ;
36895: GO 36834
36897: POP
36898: POP
// end ; end ;
36899: GO 36698
36901: POP
36902: POP
// if result and not asc then
36903: LD_VAR 0 6
36907: PUSH
36908: LD_VAR 0 4
36912: NOT
36913: AND
36914: IFFALSE 36989
// begin tmp := result ;
36916: LD_ADDR_VAR 0 9
36920: PUSH
36921: LD_VAR 0 6
36925: ST_TO_ADDR
// for i = tmp downto 1 do
36926: LD_ADDR_VAR 0 7
36930: PUSH
36931: DOUBLE
36932: LD_VAR 0 9
36936: INC
36937: ST_TO_ADDR
36938: LD_INT 1
36940: PUSH
36941: FOR_DOWNTO
36942: IFFALSE 36987
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36944: LD_ADDR_VAR 0 6
36948: PUSH
36949: LD_VAR 0 6
36953: PPUSH
36954: LD_VAR 0 9
36958: PUSH
36959: LD_VAR 0 7
36963: MINUS
36964: PUSH
36965: LD_INT 1
36967: PLUS
36968: PPUSH
36969: LD_VAR 0 9
36973: PUSH
36974: LD_VAR 0 7
36978: ARRAY
36979: PPUSH
36980: CALL_OW 1
36984: ST_TO_ADDR
36985: GO 36941
36987: POP
36988: POP
// end ; tmp := [ ] ;
36989: LD_ADDR_VAR 0 9
36993: PUSH
36994: EMPTY
36995: ST_TO_ADDR
// if mode then
36996: LD_VAR 0 5
37000: IFFALSE 37069
// begin for i = 1 to result do
37002: LD_ADDR_VAR 0 7
37006: PUSH
37007: DOUBLE
37008: LD_INT 1
37010: DEC
37011: ST_TO_ADDR
37012: LD_VAR 0 6
37016: PUSH
37017: FOR_TO
37018: IFFALSE 37057
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37020: LD_ADDR_VAR 0 9
37024: PUSH
37025: LD_VAR 0 9
37029: PPUSH
37030: LD_VAR 0 7
37034: PPUSH
37035: LD_VAR 0 6
37039: PUSH
37040: LD_VAR 0 7
37044: ARRAY
37045: PUSH
37046: LD_INT 1
37048: ARRAY
37049: PPUSH
37050: CALL_OW 1
37054: ST_TO_ADDR
37055: GO 37017
37057: POP
37058: POP
// result := tmp ;
37059: LD_ADDR_VAR 0 6
37063: PUSH
37064: LD_VAR 0 9
37068: ST_TO_ADDR
// end ; end ;
37069: LD_VAR 0 6
37073: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37074: LD_INT 0
37076: PPUSH
37077: PPUSH
37078: PPUSH
37079: PPUSH
37080: PPUSH
37081: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37082: LD_ADDR_VAR 0 5
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: EMPTY
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// if not x or not y then
37104: LD_VAR 0 2
37108: NOT
37109: PUSH
37110: LD_VAR 0 3
37114: NOT
37115: OR
37116: IFFALSE 37120
// exit ;
37118: GO 38770
// if not range then
37120: LD_VAR 0 4
37124: NOT
37125: IFFALSE 37135
// range := 10 ;
37127: LD_ADDR_VAR 0 4
37131: PUSH
37132: LD_INT 10
37134: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37135: LD_ADDR_VAR 0 8
37139: PUSH
37140: LD_INT 81
37142: PUSH
37143: LD_VAR 0 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 92
37154: PUSH
37155: LD_VAR 0 2
37159: PUSH
37160: LD_VAR 0 3
37164: PUSH
37165: LD_VAR 0 4
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 3
37178: PUSH
37179: LD_INT 21
37181: PUSH
37182: LD_INT 3
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: PPUSH
37198: CALL_OW 69
37202: ST_TO_ADDR
// if not tmp then
37203: LD_VAR 0 8
37207: NOT
37208: IFFALSE 37212
// exit ;
37210: GO 38770
// for i in tmp do
37212: LD_ADDR_VAR 0 6
37216: PUSH
37217: LD_VAR 0 8
37221: PUSH
37222: FOR_IN
37223: IFFALSE 38745
// begin points := [ 0 , 0 , 0 ] ;
37225: LD_ADDR_VAR 0 9
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: ST_TO_ADDR
// bpoints := 1 ;
37244: LD_ADDR_VAR 0 10
37248: PUSH
37249: LD_INT 1
37251: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37252: LD_VAR 0 6
37256: PPUSH
37257: CALL_OW 247
37261: PUSH
37262: LD_INT 1
37264: DOUBLE
37265: EQUAL
37266: IFTRUE 37270
37268: GO 37848
37270: POP
// begin if GetClass ( i ) = 1 then
37271: LD_VAR 0 6
37275: PPUSH
37276: CALL_OW 257
37280: PUSH
37281: LD_INT 1
37283: EQUAL
37284: IFFALSE 37305
// points := [ 10 , 5 , 3 ] ;
37286: LD_ADDR_VAR 0 9
37290: PUSH
37291: LD_INT 10
37293: PUSH
37294: LD_INT 5
37296: PUSH
37297: LD_INT 3
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37305: LD_VAR 0 6
37309: PPUSH
37310: CALL_OW 257
37314: PUSH
37315: LD_INT 2
37317: PUSH
37318: LD_INT 3
37320: PUSH
37321: LD_INT 4
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: IN
37329: IFFALSE 37350
// points := [ 3 , 2 , 1 ] ;
37331: LD_ADDR_VAR 0 9
37335: PUSH
37336: LD_INT 3
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37350: LD_VAR 0 6
37354: PPUSH
37355: CALL_OW 257
37359: PUSH
37360: LD_INT 5
37362: EQUAL
37363: IFFALSE 37384
// points := [ 130 , 5 , 2 ] ;
37365: LD_ADDR_VAR 0 9
37369: PUSH
37370: LD_INT 130
37372: PUSH
37373: LD_INT 5
37375: PUSH
37376: LD_INT 2
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37384: LD_VAR 0 6
37388: PPUSH
37389: CALL_OW 257
37393: PUSH
37394: LD_INT 8
37396: EQUAL
37397: IFFALSE 37418
// points := [ 35 , 35 , 30 ] ;
37399: LD_ADDR_VAR 0 9
37403: PUSH
37404: LD_INT 35
37406: PUSH
37407: LD_INT 35
37409: PUSH
37410: LD_INT 30
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: LIST
37417: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37418: LD_VAR 0 6
37422: PPUSH
37423: CALL_OW 257
37427: PUSH
37428: LD_INT 9
37430: EQUAL
37431: IFFALSE 37452
// points := [ 20 , 55 , 40 ] ;
37433: LD_ADDR_VAR 0 9
37437: PUSH
37438: LD_INT 20
37440: PUSH
37441: LD_INT 55
37443: PUSH
37444: LD_INT 40
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37452: LD_VAR 0 6
37456: PPUSH
37457: CALL_OW 257
37461: PUSH
37462: LD_INT 12
37464: PUSH
37465: LD_INT 16
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: IN
37472: IFFALSE 37493
// points := [ 5 , 3 , 2 ] ;
37474: LD_ADDR_VAR 0 9
37478: PUSH
37479: LD_INT 5
37481: PUSH
37482: LD_INT 3
37484: PUSH
37485: LD_INT 2
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37493: LD_VAR 0 6
37497: PPUSH
37498: CALL_OW 257
37502: PUSH
37503: LD_INT 17
37505: EQUAL
37506: IFFALSE 37527
// points := [ 100 , 50 , 75 ] ;
37508: LD_ADDR_VAR 0 9
37512: PUSH
37513: LD_INT 100
37515: PUSH
37516: LD_INT 50
37518: PUSH
37519: LD_INT 75
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: LIST
37526: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37527: LD_VAR 0 6
37531: PPUSH
37532: CALL_OW 257
37536: PUSH
37537: LD_INT 15
37539: EQUAL
37540: IFFALSE 37561
// points := [ 10 , 5 , 3 ] ;
37542: LD_ADDR_VAR 0 9
37546: PUSH
37547: LD_INT 10
37549: PUSH
37550: LD_INT 5
37552: PUSH
37553: LD_INT 3
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37561: LD_VAR 0 6
37565: PPUSH
37566: CALL_OW 257
37570: PUSH
37571: LD_INT 14
37573: EQUAL
37574: IFFALSE 37595
// points := [ 10 , 0 , 0 ] ;
37576: LD_ADDR_VAR 0 9
37580: PUSH
37581: LD_INT 10
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37595: LD_VAR 0 6
37599: PPUSH
37600: CALL_OW 257
37604: PUSH
37605: LD_INT 11
37607: EQUAL
37608: IFFALSE 37629
// points := [ 30 , 10 , 5 ] ;
37610: LD_ADDR_VAR 0 9
37614: PUSH
37615: LD_INT 30
37617: PUSH
37618: LD_INT 10
37620: PUSH
37621: LD_INT 5
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: LIST
37628: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37629: LD_VAR 0 1
37633: PPUSH
37634: LD_INT 5
37636: PPUSH
37637: CALL_OW 321
37641: PUSH
37642: LD_INT 2
37644: EQUAL
37645: IFFALSE 37662
// bpoints := bpoints * 1.8 ;
37647: LD_ADDR_VAR 0 10
37651: PUSH
37652: LD_VAR 0 10
37656: PUSH
37657: LD_REAL  1.80000000000000E+0000
37660: MUL
37661: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37662: LD_VAR 0 6
37666: PPUSH
37667: CALL_OW 257
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: LD_INT 3
37680: PUSH
37681: LD_INT 4
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: IN
37690: PUSH
37691: LD_VAR 0 1
37695: PPUSH
37696: LD_INT 51
37698: PPUSH
37699: CALL_OW 321
37703: PUSH
37704: LD_INT 2
37706: EQUAL
37707: AND
37708: IFFALSE 37725
// bpoints := bpoints * 1.2 ;
37710: LD_ADDR_VAR 0 10
37714: PUSH
37715: LD_VAR 0 10
37719: PUSH
37720: LD_REAL  1.20000000000000E+0000
37723: MUL
37724: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37725: LD_VAR 0 6
37729: PPUSH
37730: CALL_OW 257
37734: PUSH
37735: LD_INT 5
37737: PUSH
37738: LD_INT 7
37740: PUSH
37741: LD_INT 9
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: LIST
37748: IN
37749: PUSH
37750: LD_VAR 0 1
37754: PPUSH
37755: LD_INT 52
37757: PPUSH
37758: CALL_OW 321
37762: PUSH
37763: LD_INT 2
37765: EQUAL
37766: AND
37767: IFFALSE 37784
// bpoints := bpoints * 1.5 ;
37769: LD_ADDR_VAR 0 10
37773: PUSH
37774: LD_VAR 0 10
37778: PUSH
37779: LD_REAL  1.50000000000000E+0000
37782: MUL
37783: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37784: LD_VAR 0 1
37788: PPUSH
37789: LD_INT 66
37791: PPUSH
37792: CALL_OW 321
37796: PUSH
37797: LD_INT 2
37799: EQUAL
37800: IFFALSE 37817
// bpoints := bpoints * 1.1 ;
37802: LD_ADDR_VAR 0 10
37806: PUSH
37807: LD_VAR 0 10
37811: PUSH
37812: LD_REAL  1.10000000000000E+0000
37815: MUL
37816: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37817: LD_ADDR_VAR 0 10
37821: PUSH
37822: LD_VAR 0 10
37826: PUSH
37827: LD_VAR 0 6
37831: PPUSH
37832: LD_INT 1
37834: PPUSH
37835: CALL_OW 259
37839: PUSH
37840: LD_REAL  1.15000000000000E+0000
37843: MUL
37844: MUL
37845: ST_TO_ADDR
// end ; unit_vehicle :
37846: GO 38674
37848: LD_INT 2
37850: DOUBLE
37851: EQUAL
37852: IFTRUE 37856
37854: GO 38662
37856: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37857: LD_VAR 0 6
37861: PPUSH
37862: CALL_OW 264
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 42
37872: PUSH
37873: LD_INT 24
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: IN
37881: IFFALSE 37902
// points := [ 25 , 5 , 3 ] ;
37883: LD_ADDR_VAR 0 9
37887: PUSH
37888: LD_INT 25
37890: PUSH
37891: LD_INT 5
37893: PUSH
37894: LD_INT 3
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37902: LD_VAR 0 6
37906: PPUSH
37907: CALL_OW 264
37911: PUSH
37912: LD_INT 4
37914: PUSH
37915: LD_INT 43
37917: PUSH
37918: LD_INT 25
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: LIST
37925: IN
37926: IFFALSE 37947
// points := [ 40 , 15 , 5 ] ;
37928: LD_ADDR_VAR 0 9
37932: PUSH
37933: LD_INT 40
37935: PUSH
37936: LD_INT 15
37938: PUSH
37939: LD_INT 5
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37947: LD_VAR 0 6
37951: PPUSH
37952: CALL_OW 264
37956: PUSH
37957: LD_INT 3
37959: PUSH
37960: LD_INT 23
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: IN
37967: IFFALSE 37988
// points := [ 7 , 25 , 8 ] ;
37969: LD_ADDR_VAR 0 9
37973: PUSH
37974: LD_INT 7
37976: PUSH
37977: LD_INT 25
37979: PUSH
37980: LD_INT 8
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37988: LD_VAR 0 6
37992: PPUSH
37993: CALL_OW 264
37997: PUSH
37998: LD_INT 5
38000: PUSH
38001: LD_INT 27
38003: PUSH
38004: LD_INT 44
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: IN
38012: IFFALSE 38033
// points := [ 14 , 50 , 16 ] ;
38014: LD_ADDR_VAR 0 9
38018: PUSH
38019: LD_INT 14
38021: PUSH
38022: LD_INT 50
38024: PUSH
38025: LD_INT 16
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38033: LD_VAR 0 6
38037: PPUSH
38038: CALL_OW 264
38042: PUSH
38043: LD_INT 6
38045: PUSH
38046: LD_INT 46
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: IN
38053: IFFALSE 38074
// points := [ 32 , 120 , 70 ] ;
38055: LD_ADDR_VAR 0 9
38059: PUSH
38060: LD_INT 32
38062: PUSH
38063: LD_INT 120
38065: PUSH
38066: LD_INT 70
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: LIST
38073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38074: LD_VAR 0 6
38078: PPUSH
38079: CALL_OW 264
38083: PUSH
38084: LD_INT 7
38086: PUSH
38087: LD_INT 28
38089: PUSH
38090: LD_INT 45
38092: PUSH
38093: LD_INT 92
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: IN
38102: IFFALSE 38123
// points := [ 35 , 20 , 45 ] ;
38104: LD_ADDR_VAR 0 9
38108: PUSH
38109: LD_INT 35
38111: PUSH
38112: LD_INT 20
38114: PUSH
38115: LD_INT 45
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38123: LD_VAR 0 6
38127: PPUSH
38128: CALL_OW 264
38132: PUSH
38133: LD_INT 47
38135: PUSH
38136: EMPTY
38137: LIST
38138: IN
38139: IFFALSE 38160
// points := [ 67 , 45 , 75 ] ;
38141: LD_ADDR_VAR 0 9
38145: PUSH
38146: LD_INT 67
38148: PUSH
38149: LD_INT 45
38151: PUSH
38152: LD_INT 75
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: LIST
38159: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38160: LD_VAR 0 6
38164: PPUSH
38165: CALL_OW 264
38169: PUSH
38170: LD_INT 26
38172: PUSH
38173: EMPTY
38174: LIST
38175: IN
38176: IFFALSE 38197
// points := [ 120 , 30 , 80 ] ;
38178: LD_ADDR_VAR 0 9
38182: PUSH
38183: LD_INT 120
38185: PUSH
38186: LD_INT 30
38188: PUSH
38189: LD_INT 80
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: LIST
38196: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38197: LD_VAR 0 6
38201: PPUSH
38202: CALL_OW 264
38206: PUSH
38207: LD_INT 22
38209: PUSH
38210: EMPTY
38211: LIST
38212: IN
38213: IFFALSE 38234
// points := [ 40 , 1 , 1 ] ;
38215: LD_ADDR_VAR 0 9
38219: PUSH
38220: LD_INT 40
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: LIST
38233: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38234: LD_VAR 0 6
38238: PPUSH
38239: CALL_OW 264
38243: PUSH
38244: LD_INT 29
38246: PUSH
38247: EMPTY
38248: LIST
38249: IN
38250: IFFALSE 38271
// points := [ 70 , 200 , 400 ] ;
38252: LD_ADDR_VAR 0 9
38256: PUSH
38257: LD_INT 70
38259: PUSH
38260: LD_INT 200
38262: PUSH
38263: LD_INT 400
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38271: LD_VAR 0 6
38275: PPUSH
38276: CALL_OW 264
38280: PUSH
38281: LD_INT 14
38283: PUSH
38284: LD_INT 53
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: IN
38291: IFFALSE 38312
// points := [ 40 , 10 , 20 ] ;
38293: LD_ADDR_VAR 0 9
38297: PUSH
38298: LD_INT 40
38300: PUSH
38301: LD_INT 10
38303: PUSH
38304: LD_INT 20
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38312: LD_VAR 0 6
38316: PPUSH
38317: CALL_OW 264
38321: PUSH
38322: LD_INT 9
38324: PUSH
38325: EMPTY
38326: LIST
38327: IN
38328: IFFALSE 38349
// points := [ 5 , 70 , 20 ] ;
38330: LD_ADDR_VAR 0 9
38334: PUSH
38335: LD_INT 5
38337: PUSH
38338: LD_INT 70
38340: PUSH
38341: LD_INT 20
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: LIST
38348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38349: LD_VAR 0 6
38353: PPUSH
38354: CALL_OW 264
38358: PUSH
38359: LD_INT 10
38361: PUSH
38362: EMPTY
38363: LIST
38364: IN
38365: IFFALSE 38386
// points := [ 35 , 110 , 70 ] ;
38367: LD_ADDR_VAR 0 9
38371: PUSH
38372: LD_INT 35
38374: PUSH
38375: LD_INT 110
38377: PUSH
38378: LD_INT 70
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: LIST
38385: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38386: LD_VAR 0 6
38390: PPUSH
38391: CALL_OW 265
38395: PUSH
38396: LD_INT 25
38398: EQUAL
38399: IFFALSE 38420
// points := [ 80 , 65 , 100 ] ;
38401: LD_ADDR_VAR 0 9
38405: PUSH
38406: LD_INT 80
38408: PUSH
38409: LD_INT 65
38411: PUSH
38412: LD_INT 100
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38420: LD_VAR 0 6
38424: PPUSH
38425: CALL_OW 263
38429: PUSH
38430: LD_INT 1
38432: EQUAL
38433: IFFALSE 38468
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38435: LD_ADDR_VAR 0 10
38439: PUSH
38440: LD_VAR 0 10
38444: PUSH
38445: LD_VAR 0 6
38449: PPUSH
38450: CALL_OW 311
38454: PPUSH
38455: LD_INT 3
38457: PPUSH
38458: CALL_OW 259
38462: PUSH
38463: LD_INT 4
38465: MUL
38466: MUL
38467: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38468: LD_VAR 0 6
38472: PPUSH
38473: CALL_OW 263
38477: PUSH
38478: LD_INT 2
38480: EQUAL
38481: IFFALSE 38532
// begin j := IsControledBy ( i ) ;
38483: LD_ADDR_VAR 0 7
38487: PUSH
38488: LD_VAR 0 6
38492: PPUSH
38493: CALL_OW 312
38497: ST_TO_ADDR
// if j then
38498: LD_VAR 0 7
38502: IFFALSE 38532
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38504: LD_ADDR_VAR 0 10
38508: PUSH
38509: LD_VAR 0 10
38513: PUSH
38514: LD_VAR 0 7
38518: PPUSH
38519: LD_INT 3
38521: PPUSH
38522: CALL_OW 259
38526: PUSH
38527: LD_INT 3
38529: MUL
38530: MUL
38531: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38532: LD_VAR 0 6
38536: PPUSH
38537: CALL_OW 264
38541: PUSH
38542: LD_INT 5
38544: PUSH
38545: LD_INT 6
38547: PUSH
38548: LD_INT 46
38550: PUSH
38551: LD_INT 44
38553: PUSH
38554: LD_INT 47
38556: PUSH
38557: LD_INT 45
38559: PUSH
38560: LD_INT 28
38562: PUSH
38563: LD_INT 7
38565: PUSH
38566: LD_INT 27
38568: PUSH
38569: LD_INT 29
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: IN
38584: PUSH
38585: LD_VAR 0 1
38589: PPUSH
38590: LD_INT 52
38592: PPUSH
38593: CALL_OW 321
38597: PUSH
38598: LD_INT 2
38600: EQUAL
38601: AND
38602: IFFALSE 38619
// bpoints := bpoints * 1.2 ;
38604: LD_ADDR_VAR 0 10
38608: PUSH
38609: LD_VAR 0 10
38613: PUSH
38614: LD_REAL  1.20000000000000E+0000
38617: MUL
38618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38619: LD_VAR 0 6
38623: PPUSH
38624: CALL_OW 264
38628: PUSH
38629: LD_INT 6
38631: PUSH
38632: LD_INT 46
38634: PUSH
38635: LD_INT 47
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: IN
38643: IFFALSE 38660
// bpoints := bpoints * 1.2 ;
38645: LD_ADDR_VAR 0 10
38649: PUSH
38650: LD_VAR 0 10
38654: PUSH
38655: LD_REAL  1.20000000000000E+0000
38658: MUL
38659: ST_TO_ADDR
// end ; unit_building :
38660: GO 38674
38662: LD_INT 3
38664: DOUBLE
38665: EQUAL
38666: IFTRUE 38670
38668: GO 38673
38670: POP
// ; end ;
38671: GO 38674
38673: POP
// for j = 1 to 3 do
38674: LD_ADDR_VAR 0 7
38678: PUSH
38679: DOUBLE
38680: LD_INT 1
38682: DEC
38683: ST_TO_ADDR
38684: LD_INT 3
38686: PUSH
38687: FOR_TO
38688: IFFALSE 38741
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38690: LD_ADDR_VAR 0 5
38694: PUSH
38695: LD_VAR 0 5
38699: PPUSH
38700: LD_VAR 0 7
38704: PPUSH
38705: LD_VAR 0 5
38709: PUSH
38710: LD_VAR 0 7
38714: ARRAY
38715: PUSH
38716: LD_VAR 0 9
38720: PUSH
38721: LD_VAR 0 7
38725: ARRAY
38726: PUSH
38727: LD_VAR 0 10
38731: MUL
38732: PLUS
38733: PPUSH
38734: CALL_OW 1
38738: ST_TO_ADDR
38739: GO 38687
38741: POP
38742: POP
// end ;
38743: GO 37222
38745: POP
38746: POP
// result := Replace ( result , 4 , tmp ) ;
38747: LD_ADDR_VAR 0 5
38751: PUSH
38752: LD_VAR 0 5
38756: PPUSH
38757: LD_INT 4
38759: PPUSH
38760: LD_VAR 0 8
38764: PPUSH
38765: CALL_OW 1
38769: ST_TO_ADDR
// end ;
38770: LD_VAR 0 5
38774: RET
// export function DangerAtRange ( unit , range ) ; begin
38775: LD_INT 0
38777: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38778: LD_ADDR_VAR 0 3
38782: PUSH
38783: LD_VAR 0 1
38787: PPUSH
38788: CALL_OW 255
38792: PPUSH
38793: LD_VAR 0 1
38797: PPUSH
38798: CALL_OW 250
38802: PPUSH
38803: LD_VAR 0 1
38807: PPUSH
38808: CALL_OW 251
38812: PPUSH
38813: LD_VAR 0 2
38817: PPUSH
38818: CALL 37074 0 4
38822: ST_TO_ADDR
// end ;
38823: LD_VAR 0 3
38827: RET
// export function DangerInArea ( side , area ) ; begin
38828: LD_INT 0
38830: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38831: LD_ADDR_VAR 0 3
38835: PUSH
38836: LD_VAR 0 2
38840: PPUSH
38841: LD_INT 81
38843: PUSH
38844: LD_VAR 0 1
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PPUSH
38853: CALL_OW 70
38857: ST_TO_ADDR
// end ;
38858: LD_VAR 0 3
38862: RET
// export function IsExtension ( b ) ; begin
38863: LD_INT 0
38865: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38866: LD_ADDR_VAR 0 2
38870: PUSH
38871: LD_VAR 0 1
38875: PUSH
38876: LD_INT 23
38878: PUSH
38879: LD_INT 20
38881: PUSH
38882: LD_INT 22
38884: PUSH
38885: LD_INT 17
38887: PUSH
38888: LD_INT 24
38890: PUSH
38891: LD_INT 21
38893: PUSH
38894: LD_INT 19
38896: PUSH
38897: LD_INT 16
38899: PUSH
38900: LD_INT 25
38902: PUSH
38903: LD_INT 18
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: IN
38918: ST_TO_ADDR
// end ;
38919: LD_VAR 0 2
38923: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38924: LD_INT 0
38926: PPUSH
38927: PPUSH
38928: PPUSH
// result := [ ] ;
38929: LD_ADDR_VAR 0 4
38933: PUSH
38934: EMPTY
38935: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38936: LD_ADDR_VAR 0 5
38940: PUSH
38941: LD_VAR 0 2
38945: PPUSH
38946: LD_INT 21
38948: PUSH
38949: LD_INT 3
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PPUSH
38956: CALL_OW 70
38960: ST_TO_ADDR
// if not tmp then
38961: LD_VAR 0 5
38965: NOT
38966: IFFALSE 38970
// exit ;
38968: GO 39034
// if checkLink then
38970: LD_VAR 0 3
38974: IFFALSE 39024
// begin for i in tmp do
38976: LD_ADDR_VAR 0 6
38980: PUSH
38981: LD_VAR 0 5
38985: PUSH
38986: FOR_IN
38987: IFFALSE 39022
// if GetBase ( i ) <> base then
38989: LD_VAR 0 6
38993: PPUSH
38994: CALL_OW 274
38998: PUSH
38999: LD_VAR 0 1
39003: NONEQUAL
39004: IFFALSE 39020
// ComLinkToBase ( base , i ) ;
39006: LD_VAR 0 1
39010: PPUSH
39011: LD_VAR 0 6
39015: PPUSH
39016: CALL_OW 169
39020: GO 38986
39022: POP
39023: POP
// end ; result := tmp ;
39024: LD_ADDR_VAR 0 4
39028: PUSH
39029: LD_VAR 0 5
39033: ST_TO_ADDR
// end ;
39034: LD_VAR 0 4
39038: RET
// export function ComComplete ( units , b ) ; var i ; begin
39039: LD_INT 0
39041: PPUSH
39042: PPUSH
// if not units then
39043: LD_VAR 0 1
39047: NOT
39048: IFFALSE 39052
// exit ;
39050: GO 39142
// for i in units do
39052: LD_ADDR_VAR 0 4
39056: PUSH
39057: LD_VAR 0 1
39061: PUSH
39062: FOR_IN
39063: IFFALSE 39140
// if BuildingStatus ( b ) = bs_build then
39065: LD_VAR 0 2
39069: PPUSH
39070: CALL_OW 461
39074: PUSH
39075: LD_INT 1
39077: EQUAL
39078: IFFALSE 39138
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39080: LD_VAR 0 4
39084: PPUSH
39085: LD_STRING h
39087: PUSH
39088: LD_VAR 0 2
39092: PPUSH
39093: CALL_OW 250
39097: PUSH
39098: LD_VAR 0 2
39102: PPUSH
39103: CALL_OW 251
39107: PUSH
39108: LD_VAR 0 2
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: PUSH
39131: EMPTY
39132: LIST
39133: PPUSH
39134: CALL_OW 446
39138: GO 39062
39140: POP
39141: POP
// end ;
39142: LD_VAR 0 3
39146: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39147: LD_INT 0
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39155: LD_VAR 0 1
39159: NOT
39160: PUSH
39161: LD_VAR 0 1
39165: PPUSH
39166: CALL_OW 263
39170: PUSH
39171: LD_INT 2
39173: NONEQUAL
39174: OR
39175: IFFALSE 39179
// exit ;
39177: GO 39495
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39179: LD_ADDR_VAR 0 6
39183: PUSH
39184: LD_INT 22
39186: PUSH
39187: LD_VAR 0 1
39191: PPUSH
39192: CALL_OW 255
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: LD_INT 30
39206: PUSH
39207: LD_INT 36
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 34
39216: PUSH
39217: LD_INT 31
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PPUSH
39233: CALL_OW 69
39237: ST_TO_ADDR
// if not tmp then
39238: LD_VAR 0 6
39242: NOT
39243: IFFALSE 39247
// exit ;
39245: GO 39495
// result := [ ] ;
39247: LD_ADDR_VAR 0 2
39251: PUSH
39252: EMPTY
39253: ST_TO_ADDR
// for i in tmp do
39254: LD_ADDR_VAR 0 3
39258: PUSH
39259: LD_VAR 0 6
39263: PUSH
39264: FOR_IN
39265: IFFALSE 39336
// begin t := UnitsInside ( i ) ;
39267: LD_ADDR_VAR 0 4
39271: PUSH
39272: LD_VAR 0 3
39276: PPUSH
39277: CALL_OW 313
39281: ST_TO_ADDR
// if t then
39282: LD_VAR 0 4
39286: IFFALSE 39334
// for j in t do
39288: LD_ADDR_VAR 0 7
39292: PUSH
39293: LD_VAR 0 4
39297: PUSH
39298: FOR_IN
39299: IFFALSE 39332
// result := Replace ( result , result + 1 , j ) ;
39301: LD_ADDR_VAR 0 2
39305: PUSH
39306: LD_VAR 0 2
39310: PPUSH
39311: LD_VAR 0 2
39315: PUSH
39316: LD_INT 1
39318: PLUS
39319: PPUSH
39320: LD_VAR 0 7
39324: PPUSH
39325: CALL_OW 1
39329: ST_TO_ADDR
39330: GO 39298
39332: POP
39333: POP
// end ;
39334: GO 39264
39336: POP
39337: POP
// if not result then
39338: LD_VAR 0 2
39342: NOT
39343: IFFALSE 39347
// exit ;
39345: GO 39495
// mech := result [ 1 ] ;
39347: LD_ADDR_VAR 0 5
39351: PUSH
39352: LD_VAR 0 2
39356: PUSH
39357: LD_INT 1
39359: ARRAY
39360: ST_TO_ADDR
// if result > 1 then
39361: LD_VAR 0 2
39365: PUSH
39366: LD_INT 1
39368: GREATER
39369: IFFALSE 39481
// begin for i = 2 to result do
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: DOUBLE
39377: LD_INT 2
39379: DEC
39380: ST_TO_ADDR
39381: LD_VAR 0 2
39385: PUSH
39386: FOR_TO
39387: IFFALSE 39479
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39389: LD_ADDR_VAR 0 4
39393: PUSH
39394: LD_VAR 0 2
39398: PUSH
39399: LD_VAR 0 3
39403: ARRAY
39404: PPUSH
39405: LD_INT 3
39407: PPUSH
39408: CALL_OW 259
39412: PUSH
39413: LD_VAR 0 2
39417: PUSH
39418: LD_VAR 0 3
39422: ARRAY
39423: PPUSH
39424: CALL_OW 432
39428: MINUS
39429: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39430: LD_VAR 0 4
39434: PUSH
39435: LD_VAR 0 5
39439: PPUSH
39440: LD_INT 3
39442: PPUSH
39443: CALL_OW 259
39447: PUSH
39448: LD_VAR 0 5
39452: PPUSH
39453: CALL_OW 432
39457: MINUS
39458: GREATEREQUAL
39459: IFFALSE 39477
// mech := result [ i ] ;
39461: LD_ADDR_VAR 0 5
39465: PUSH
39466: LD_VAR 0 2
39470: PUSH
39471: LD_VAR 0 3
39475: ARRAY
39476: ST_TO_ADDR
// end ;
39477: GO 39386
39479: POP
39480: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39481: LD_VAR 0 1
39485: PPUSH
39486: LD_VAR 0 5
39490: PPUSH
39491: CALL_OW 135
// end ;
39495: LD_VAR 0 2
39499: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39500: LD_INT 0
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
39508: PPUSH
39509: PPUSH
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
// result := [ ] ;
39515: LD_ADDR_VAR 0 7
39519: PUSH
39520: EMPTY
39521: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39522: LD_VAR 0 1
39526: PPUSH
39527: CALL_OW 266
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: IN
39542: NOT
39543: IFFALSE 39547
// exit ;
39545: GO 41181
// if name then
39547: LD_VAR 0 3
39551: IFFALSE 39567
// SetBName ( base_dep , name ) ;
39553: LD_VAR 0 1
39557: PPUSH
39558: LD_VAR 0 3
39562: PPUSH
39563: CALL_OW 500
// base := GetBase ( base_dep ) ;
39567: LD_ADDR_VAR 0 15
39571: PUSH
39572: LD_VAR 0 1
39576: PPUSH
39577: CALL_OW 274
39581: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39582: LD_ADDR_VAR 0 16
39586: PUSH
39587: LD_VAR 0 1
39591: PPUSH
39592: CALL_OW 255
39596: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39597: LD_ADDR_VAR 0 17
39601: PUSH
39602: LD_VAR 0 1
39606: PPUSH
39607: CALL_OW 248
39611: ST_TO_ADDR
// if sources then
39612: LD_VAR 0 5
39616: IFFALSE 39663
// for i = 1 to 3 do
39618: LD_ADDR_VAR 0 8
39622: PUSH
39623: DOUBLE
39624: LD_INT 1
39626: DEC
39627: ST_TO_ADDR
39628: LD_INT 3
39630: PUSH
39631: FOR_TO
39632: IFFALSE 39661
// AddResourceType ( base , i , sources [ i ] ) ;
39634: LD_VAR 0 15
39638: PPUSH
39639: LD_VAR 0 8
39643: PPUSH
39644: LD_VAR 0 5
39648: PUSH
39649: LD_VAR 0 8
39653: ARRAY
39654: PPUSH
39655: CALL_OW 276
39659: GO 39631
39661: POP
39662: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39663: LD_ADDR_VAR 0 18
39667: PUSH
39668: LD_VAR 0 15
39672: PPUSH
39673: LD_VAR 0 2
39677: PPUSH
39678: LD_INT 1
39680: PPUSH
39681: CALL 38924 0 3
39685: ST_TO_ADDR
// InitHc ;
39686: CALL_OW 19
// InitUc ;
39690: CALL_OW 18
// uc_side := side ;
39694: LD_ADDR_OWVAR 20
39698: PUSH
39699: LD_VAR 0 16
39703: ST_TO_ADDR
// uc_nation := nation ;
39704: LD_ADDR_OWVAR 21
39708: PUSH
39709: LD_VAR 0 17
39713: ST_TO_ADDR
// if buildings then
39714: LD_VAR 0 18
39718: IFFALSE 41040
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39720: LD_ADDR_VAR 0 19
39724: PUSH
39725: LD_VAR 0 18
39729: PPUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 30
39735: PUSH
39736: LD_INT 29
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 30
39745: PUSH
39746: LD_INT 30
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: LIST
39757: PPUSH
39758: CALL_OW 72
39762: ST_TO_ADDR
// if tmp then
39763: LD_VAR 0 19
39767: IFFALSE 39815
// for i in tmp do
39769: LD_ADDR_VAR 0 8
39773: PUSH
39774: LD_VAR 0 19
39778: PUSH
39779: FOR_IN
39780: IFFALSE 39813
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39782: LD_VAR 0 8
39786: PPUSH
39787: CALL_OW 250
39791: PPUSH
39792: LD_VAR 0 8
39796: PPUSH
39797: CALL_OW 251
39801: PPUSH
39802: LD_VAR 0 16
39806: PPUSH
39807: CALL_OW 441
39811: GO 39779
39813: POP
39814: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39815: LD_VAR 0 18
39819: PPUSH
39820: LD_INT 2
39822: PUSH
39823: LD_INT 30
39825: PUSH
39826: LD_INT 32
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 30
39835: PUSH
39836: LD_INT 33
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: PPUSH
39848: CALL_OW 72
39852: IFFALSE 39940
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39854: LD_ADDR_VAR 0 8
39858: PUSH
39859: LD_VAR 0 18
39863: PPUSH
39864: LD_INT 2
39866: PUSH
39867: LD_INT 30
39869: PUSH
39870: LD_INT 32
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 30
39879: PUSH
39880: LD_INT 33
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: LIST
39891: PPUSH
39892: CALL_OW 72
39896: PUSH
39897: FOR_IN
39898: IFFALSE 39938
// begin if not GetBWeapon ( i ) then
39900: LD_VAR 0 8
39904: PPUSH
39905: CALL_OW 269
39909: NOT
39910: IFFALSE 39936
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39912: LD_VAR 0 8
39916: PPUSH
39917: LD_VAR 0 8
39921: PPUSH
39922: LD_VAR 0 2
39926: PPUSH
39927: CALL 41186 0 2
39931: PPUSH
39932: CALL_OW 431
// end ;
39936: GO 39897
39938: POP
39939: POP
// end ; for i = 1 to personel do
39940: LD_ADDR_VAR 0 8
39944: PUSH
39945: DOUBLE
39946: LD_INT 1
39948: DEC
39949: ST_TO_ADDR
39950: LD_VAR 0 6
39954: PUSH
39955: FOR_TO
39956: IFFALSE 41020
// begin if i > 4 then
39958: LD_VAR 0 8
39962: PUSH
39963: LD_INT 4
39965: GREATER
39966: IFFALSE 39970
// break ;
39968: GO 41020
// case i of 1 :
39970: LD_VAR 0 8
39974: PUSH
39975: LD_INT 1
39977: DOUBLE
39978: EQUAL
39979: IFTRUE 39983
39981: GO 40063
39983: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39984: LD_ADDR_VAR 0 12
39988: PUSH
39989: LD_VAR 0 18
39993: PPUSH
39994: LD_INT 22
39996: PUSH
39997: LD_VAR 0 16
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 58
40008: PUSH
40009: EMPTY
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 30
40017: PUSH
40018: LD_INT 32
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 30
40027: PUSH
40028: LD_INT 4
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 30
40037: PUSH
40038: LD_INT 5
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: PPUSH
40056: CALL_OW 72
40060: ST_TO_ADDR
40061: GO 40285
40063: LD_INT 2
40065: DOUBLE
40066: EQUAL
40067: IFTRUE 40071
40069: GO 40133
40071: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40072: LD_ADDR_VAR 0 12
40076: PUSH
40077: LD_VAR 0 18
40081: PPUSH
40082: LD_INT 22
40084: PUSH
40085: LD_VAR 0 16
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: PUSH
40097: LD_INT 30
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 30
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PPUSH
40126: CALL_OW 72
40130: ST_TO_ADDR
40131: GO 40285
40133: LD_INT 3
40135: DOUBLE
40136: EQUAL
40137: IFTRUE 40141
40139: GO 40203
40141: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40142: LD_ADDR_VAR 0 12
40146: PUSH
40147: LD_VAR 0 18
40151: PPUSH
40152: LD_INT 22
40154: PUSH
40155: LD_VAR 0 16
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 30
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 30
40179: PUSH
40180: LD_INT 3
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PPUSH
40196: CALL_OW 72
40200: ST_TO_ADDR
40201: GO 40285
40203: LD_INT 4
40205: DOUBLE
40206: EQUAL
40207: IFTRUE 40211
40209: GO 40284
40211: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40212: LD_ADDR_VAR 0 12
40216: PUSH
40217: LD_VAR 0 18
40221: PPUSH
40222: LD_INT 22
40224: PUSH
40225: LD_VAR 0 16
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: LD_INT 30
40239: PUSH
40240: LD_INT 6
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 30
40249: PUSH
40250: LD_INT 7
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 30
40259: PUSH
40260: LD_INT 8
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PPUSH
40277: CALL_OW 72
40281: ST_TO_ADDR
40282: GO 40285
40284: POP
// if i = 1 then
40285: LD_VAR 0 8
40289: PUSH
40290: LD_INT 1
40292: EQUAL
40293: IFFALSE 40404
// begin tmp := [ ] ;
40295: LD_ADDR_VAR 0 19
40299: PUSH
40300: EMPTY
40301: ST_TO_ADDR
// for j in f do
40302: LD_ADDR_VAR 0 9
40306: PUSH
40307: LD_VAR 0 12
40311: PUSH
40312: FOR_IN
40313: IFFALSE 40386
// if GetBType ( j ) = b_bunker then
40315: LD_VAR 0 9
40319: PPUSH
40320: CALL_OW 266
40324: PUSH
40325: LD_INT 32
40327: EQUAL
40328: IFFALSE 40355
// tmp := Insert ( tmp , 1 , j ) else
40330: LD_ADDR_VAR 0 19
40334: PUSH
40335: LD_VAR 0 19
40339: PPUSH
40340: LD_INT 1
40342: PPUSH
40343: LD_VAR 0 9
40347: PPUSH
40348: CALL_OW 2
40352: ST_TO_ADDR
40353: GO 40384
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40355: LD_ADDR_VAR 0 19
40359: PUSH
40360: LD_VAR 0 19
40364: PPUSH
40365: LD_VAR 0 19
40369: PUSH
40370: LD_INT 1
40372: PLUS
40373: PPUSH
40374: LD_VAR 0 9
40378: PPUSH
40379: CALL_OW 2
40383: ST_TO_ADDR
40384: GO 40312
40386: POP
40387: POP
// if tmp then
40388: LD_VAR 0 19
40392: IFFALSE 40404
// f := tmp ;
40394: LD_ADDR_VAR 0 12
40398: PUSH
40399: LD_VAR 0 19
40403: ST_TO_ADDR
// end ; x := personel [ i ] ;
40404: LD_ADDR_VAR 0 13
40408: PUSH
40409: LD_VAR 0 6
40413: PUSH
40414: LD_VAR 0 8
40418: ARRAY
40419: ST_TO_ADDR
// if x = - 1 then
40420: LD_VAR 0 13
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: EQUAL
40429: IFFALSE 40638
// begin for j in f do
40431: LD_ADDR_VAR 0 9
40435: PUSH
40436: LD_VAR 0 12
40440: PUSH
40441: FOR_IN
40442: IFFALSE 40634
// repeat InitHc ;
40444: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40448: LD_VAR 0 9
40452: PPUSH
40453: CALL_OW 266
40457: PUSH
40458: LD_INT 5
40460: EQUAL
40461: IFFALSE 40531
// begin if UnitsInside ( j ) < 3 then
40463: LD_VAR 0 9
40467: PPUSH
40468: CALL_OW 313
40472: PUSH
40473: LD_INT 3
40475: LESS
40476: IFFALSE 40512
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40478: LD_INT 0
40480: PPUSH
40481: LD_INT 5
40483: PUSH
40484: LD_INT 8
40486: PUSH
40487: LD_INT 9
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: LIST
40494: PUSH
40495: LD_VAR 0 17
40499: ARRAY
40500: PPUSH
40501: LD_VAR 0 4
40505: PPUSH
40506: CALL_OW 380
40510: GO 40529
// PrepareHuman ( false , i , skill ) ;
40512: LD_INT 0
40514: PPUSH
40515: LD_VAR 0 8
40519: PPUSH
40520: LD_VAR 0 4
40524: PPUSH
40525: CALL_OW 380
// end else
40529: GO 40548
// PrepareHuman ( false , i , skill ) ;
40531: LD_INT 0
40533: PPUSH
40534: LD_VAR 0 8
40538: PPUSH
40539: LD_VAR 0 4
40543: PPUSH
40544: CALL_OW 380
// un := CreateHuman ;
40548: LD_ADDR_VAR 0 14
40552: PUSH
40553: CALL_OW 44
40557: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40558: LD_ADDR_VAR 0 7
40562: PUSH
40563: LD_VAR 0 7
40567: PPUSH
40568: LD_INT 1
40570: PPUSH
40571: LD_VAR 0 14
40575: PPUSH
40576: CALL_OW 2
40580: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40581: LD_VAR 0 14
40585: PPUSH
40586: LD_VAR 0 9
40590: PPUSH
40591: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40595: LD_VAR 0 9
40599: PPUSH
40600: CALL_OW 313
40604: PUSH
40605: LD_INT 6
40607: EQUAL
40608: PUSH
40609: LD_VAR 0 9
40613: PPUSH
40614: CALL_OW 266
40618: PUSH
40619: LD_INT 32
40621: PUSH
40622: LD_INT 31
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: IN
40629: OR
40630: IFFALSE 40444
40632: GO 40441
40634: POP
40635: POP
// end else
40636: GO 41018
// for j = 1 to x do
40638: LD_ADDR_VAR 0 9
40642: PUSH
40643: DOUBLE
40644: LD_INT 1
40646: DEC
40647: ST_TO_ADDR
40648: LD_VAR 0 13
40652: PUSH
40653: FOR_TO
40654: IFFALSE 41016
// begin InitHc ;
40656: CALL_OW 19
// if not f then
40660: LD_VAR 0 12
40664: NOT
40665: IFFALSE 40754
// begin PrepareHuman ( false , i , skill ) ;
40667: LD_INT 0
40669: PPUSH
40670: LD_VAR 0 8
40674: PPUSH
40675: LD_VAR 0 4
40679: PPUSH
40680: CALL_OW 380
// un := CreateHuman ;
40684: LD_ADDR_VAR 0 14
40688: PUSH
40689: CALL_OW 44
40693: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40694: LD_ADDR_VAR 0 7
40698: PUSH
40699: LD_VAR 0 7
40703: PPUSH
40704: LD_INT 1
40706: PPUSH
40707: LD_VAR 0 14
40711: PPUSH
40712: CALL_OW 2
40716: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40717: LD_VAR 0 14
40721: PPUSH
40722: LD_VAR 0 1
40726: PPUSH
40727: CALL_OW 250
40731: PPUSH
40732: LD_VAR 0 1
40736: PPUSH
40737: CALL_OW 251
40741: PPUSH
40742: LD_INT 10
40744: PPUSH
40745: LD_INT 0
40747: PPUSH
40748: CALL_OW 50
// continue ;
40752: GO 40653
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40754: LD_VAR 0 12
40758: PUSH
40759: LD_INT 1
40761: ARRAY
40762: PPUSH
40763: CALL_OW 313
40767: PUSH
40768: LD_VAR 0 12
40772: PUSH
40773: LD_INT 1
40775: ARRAY
40776: PPUSH
40777: CALL_OW 266
40781: PUSH
40782: LD_INT 32
40784: PUSH
40785: LD_INT 31
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: IN
40792: AND
40793: PUSH
40794: LD_VAR 0 12
40798: PUSH
40799: LD_INT 1
40801: ARRAY
40802: PPUSH
40803: CALL_OW 313
40807: PUSH
40808: LD_INT 6
40810: EQUAL
40811: OR
40812: IFFALSE 40832
// f := Delete ( f , 1 ) ;
40814: LD_ADDR_VAR 0 12
40818: PUSH
40819: LD_VAR 0 12
40823: PPUSH
40824: LD_INT 1
40826: PPUSH
40827: CALL_OW 3
40831: ST_TO_ADDR
// if not f then
40832: LD_VAR 0 12
40836: NOT
40837: IFFALSE 40855
// begin x := x + 2 ;
40839: LD_ADDR_VAR 0 13
40843: PUSH
40844: LD_VAR 0 13
40848: PUSH
40849: LD_INT 2
40851: PLUS
40852: ST_TO_ADDR
// continue ;
40853: GO 40653
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40855: LD_VAR 0 12
40859: PUSH
40860: LD_INT 1
40862: ARRAY
40863: PPUSH
40864: CALL_OW 266
40868: PUSH
40869: LD_INT 5
40871: EQUAL
40872: IFFALSE 40946
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40874: LD_VAR 0 12
40878: PUSH
40879: LD_INT 1
40881: ARRAY
40882: PPUSH
40883: CALL_OW 313
40887: PUSH
40888: LD_INT 3
40890: LESS
40891: IFFALSE 40927
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40893: LD_INT 0
40895: PPUSH
40896: LD_INT 5
40898: PUSH
40899: LD_INT 8
40901: PUSH
40902: LD_INT 9
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: LIST
40909: PUSH
40910: LD_VAR 0 17
40914: ARRAY
40915: PPUSH
40916: LD_VAR 0 4
40920: PPUSH
40921: CALL_OW 380
40925: GO 40944
// PrepareHuman ( false , i , skill ) ;
40927: LD_INT 0
40929: PPUSH
40930: LD_VAR 0 8
40934: PPUSH
40935: LD_VAR 0 4
40939: PPUSH
40940: CALL_OW 380
// end else
40944: GO 40963
// PrepareHuman ( false , i , skill ) ;
40946: LD_INT 0
40948: PPUSH
40949: LD_VAR 0 8
40953: PPUSH
40954: LD_VAR 0 4
40958: PPUSH
40959: CALL_OW 380
// un := CreateHuman ;
40963: LD_ADDR_VAR 0 14
40967: PUSH
40968: CALL_OW 44
40972: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40973: LD_ADDR_VAR 0 7
40977: PUSH
40978: LD_VAR 0 7
40982: PPUSH
40983: LD_INT 1
40985: PPUSH
40986: LD_VAR 0 14
40990: PPUSH
40991: CALL_OW 2
40995: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40996: LD_VAR 0 14
41000: PPUSH
41001: LD_VAR 0 12
41005: PUSH
41006: LD_INT 1
41008: ARRAY
41009: PPUSH
41010: CALL_OW 52
// end ;
41014: GO 40653
41016: POP
41017: POP
// end ;
41018: GO 39955
41020: POP
41021: POP
// result := result ^ buildings ;
41022: LD_ADDR_VAR 0 7
41026: PUSH
41027: LD_VAR 0 7
41031: PUSH
41032: LD_VAR 0 18
41036: ADD
41037: ST_TO_ADDR
// end else
41038: GO 41181
// begin for i = 1 to personel do
41040: LD_ADDR_VAR 0 8
41044: PUSH
41045: DOUBLE
41046: LD_INT 1
41048: DEC
41049: ST_TO_ADDR
41050: LD_VAR 0 6
41054: PUSH
41055: FOR_TO
41056: IFFALSE 41179
// begin if i > 4 then
41058: LD_VAR 0 8
41062: PUSH
41063: LD_INT 4
41065: GREATER
41066: IFFALSE 41070
// break ;
41068: GO 41179
// x := personel [ i ] ;
41070: LD_ADDR_VAR 0 13
41074: PUSH
41075: LD_VAR 0 6
41079: PUSH
41080: LD_VAR 0 8
41084: ARRAY
41085: ST_TO_ADDR
// if x = - 1 then
41086: LD_VAR 0 13
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: EQUAL
41095: IFFALSE 41099
// continue ;
41097: GO 41055
// PrepareHuman ( false , i , skill ) ;
41099: LD_INT 0
41101: PPUSH
41102: LD_VAR 0 8
41106: PPUSH
41107: LD_VAR 0 4
41111: PPUSH
41112: CALL_OW 380
// un := CreateHuman ;
41116: LD_ADDR_VAR 0 14
41120: PUSH
41121: CALL_OW 44
41125: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41126: LD_VAR 0 14
41130: PPUSH
41131: LD_VAR 0 1
41135: PPUSH
41136: CALL_OW 250
41140: PPUSH
41141: LD_VAR 0 1
41145: PPUSH
41146: CALL_OW 251
41150: PPUSH
41151: LD_INT 10
41153: PPUSH
41154: LD_INT 0
41156: PPUSH
41157: CALL_OW 50
// result := result ^ un ;
41161: LD_ADDR_VAR 0 7
41165: PUSH
41166: LD_VAR 0 7
41170: PUSH
41171: LD_VAR 0 14
41175: ADD
41176: ST_TO_ADDR
// end ;
41177: GO 41055
41179: POP
41180: POP
// end ; end ;
41181: LD_VAR 0 7
41185: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41186: LD_INT 0
41188: PPUSH
41189: PPUSH
41190: PPUSH
41191: PPUSH
41192: PPUSH
41193: PPUSH
41194: PPUSH
41195: PPUSH
41196: PPUSH
41197: PPUSH
41198: PPUSH
41199: PPUSH
41200: PPUSH
41201: PPUSH
41202: PPUSH
41203: PPUSH
// result := false ;
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: LD_INT 0
41211: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41212: LD_VAR 0 1
41216: NOT
41217: PUSH
41218: LD_VAR 0 1
41222: PPUSH
41223: CALL_OW 266
41227: PUSH
41228: LD_INT 32
41230: PUSH
41231: LD_INT 33
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: IN
41238: NOT
41239: OR
41240: IFFALSE 41244
// exit ;
41242: GO 42353
// nat := GetNation ( tower ) ;
41244: LD_ADDR_VAR 0 12
41248: PUSH
41249: LD_VAR 0 1
41253: PPUSH
41254: CALL_OW 248
41258: ST_TO_ADDR
// side := GetSide ( tower ) ;
41259: LD_ADDR_VAR 0 16
41263: PUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: CALL_OW 255
41273: ST_TO_ADDR
// x := GetX ( tower ) ;
41274: LD_ADDR_VAR 0 10
41278: PUSH
41279: LD_VAR 0 1
41283: PPUSH
41284: CALL_OW 250
41288: ST_TO_ADDR
// y := GetY ( tower ) ;
41289: LD_ADDR_VAR 0 11
41293: PUSH
41294: LD_VAR 0 1
41298: PPUSH
41299: CALL_OW 251
41303: ST_TO_ADDR
// if not x or not y then
41304: LD_VAR 0 10
41308: NOT
41309: PUSH
41310: LD_VAR 0 11
41314: NOT
41315: OR
41316: IFFALSE 41320
// exit ;
41318: GO 42353
// weapon := 0 ;
41320: LD_ADDR_VAR 0 18
41324: PUSH
41325: LD_INT 0
41327: ST_TO_ADDR
// fac_list := [ ] ;
41328: LD_ADDR_VAR 0 17
41332: PUSH
41333: EMPTY
41334: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41335: LD_ADDR_VAR 0 6
41339: PUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 274
41349: PPUSH
41350: LD_VAR 0 2
41354: PPUSH
41355: LD_INT 0
41357: PPUSH
41358: CALL 38924 0 3
41362: PPUSH
41363: LD_INT 30
41365: PUSH
41366: LD_INT 3
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PPUSH
41373: CALL_OW 72
41377: ST_TO_ADDR
// if not factories then
41378: LD_VAR 0 6
41382: NOT
41383: IFFALSE 41387
// exit ;
41385: GO 42353
// for i in factories do
41387: LD_ADDR_VAR 0 8
41391: PUSH
41392: LD_VAR 0 6
41396: PUSH
41397: FOR_IN
41398: IFFALSE 41423
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41400: LD_ADDR_VAR 0 17
41404: PUSH
41405: LD_VAR 0 17
41409: PUSH
41410: LD_VAR 0 8
41414: PPUSH
41415: CALL_OW 478
41419: UNION
41420: ST_TO_ADDR
41421: GO 41397
41423: POP
41424: POP
// if not fac_list then
41425: LD_VAR 0 17
41429: NOT
41430: IFFALSE 41434
// exit ;
41432: GO 42353
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41434: LD_ADDR_VAR 0 5
41438: PUSH
41439: LD_INT 4
41441: PUSH
41442: LD_INT 5
41444: PUSH
41445: LD_INT 9
41447: PUSH
41448: LD_INT 10
41450: PUSH
41451: LD_INT 6
41453: PUSH
41454: LD_INT 7
41456: PUSH
41457: LD_INT 11
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 27
41471: PUSH
41472: LD_INT 28
41474: PUSH
41475: LD_INT 26
41477: PUSH
41478: LD_INT 30
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 43
41489: PUSH
41490: LD_INT 44
41492: PUSH
41493: LD_INT 46
41495: PUSH
41496: LD_INT 45
41498: PUSH
41499: LD_INT 47
41501: PUSH
41502: LD_INT 49
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: PUSH
41518: LD_VAR 0 12
41522: ARRAY
41523: ST_TO_ADDR
// list := list isect fac_list ;
41524: LD_ADDR_VAR 0 5
41528: PUSH
41529: LD_VAR 0 5
41533: PUSH
41534: LD_VAR 0 17
41538: ISECT
41539: ST_TO_ADDR
// if not list then
41540: LD_VAR 0 5
41544: NOT
41545: IFFALSE 41549
// exit ;
41547: GO 42353
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41549: LD_VAR 0 12
41553: PUSH
41554: LD_INT 3
41556: EQUAL
41557: PUSH
41558: LD_INT 49
41560: PUSH
41561: LD_VAR 0 5
41565: IN
41566: AND
41567: PUSH
41568: LD_INT 31
41570: PPUSH
41571: LD_VAR 0 16
41575: PPUSH
41576: CALL_OW 321
41580: PUSH
41581: LD_INT 2
41583: EQUAL
41584: AND
41585: IFFALSE 41645
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41587: LD_INT 22
41589: PUSH
41590: LD_VAR 0 16
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 35
41601: PUSH
41602: LD_INT 49
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 91
41611: PUSH
41612: LD_VAR 0 1
41616: PUSH
41617: LD_INT 10
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: LIST
41629: PPUSH
41630: CALL_OW 69
41634: NOT
41635: IFFALSE 41645
// weapon := ru_time_lapser ;
41637: LD_ADDR_VAR 0 18
41641: PUSH
41642: LD_INT 49
41644: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41645: LD_VAR 0 12
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: IN
41660: PUSH
41661: LD_INT 11
41663: PUSH
41664: LD_VAR 0 5
41668: IN
41669: PUSH
41670: LD_INT 30
41672: PUSH
41673: LD_VAR 0 5
41677: IN
41678: OR
41679: AND
41680: PUSH
41681: LD_INT 6
41683: PPUSH
41684: LD_VAR 0 16
41688: PPUSH
41689: CALL_OW 321
41693: PUSH
41694: LD_INT 2
41696: EQUAL
41697: AND
41698: IFFALSE 41863
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41700: LD_INT 22
41702: PUSH
41703: LD_VAR 0 16
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: LD_INT 35
41717: PUSH
41718: LD_INT 11
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 35
41727: PUSH
41728: LD_INT 30
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 91
41742: PUSH
41743: LD_VAR 0 1
41747: PUSH
41748: LD_INT 18
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: LIST
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: LIST
41760: PPUSH
41761: CALL_OW 69
41765: NOT
41766: PUSH
41767: LD_INT 22
41769: PUSH
41770: LD_VAR 0 16
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: LD_INT 30
41784: PUSH
41785: LD_INT 32
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 30
41794: PUSH
41795: LD_INT 33
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 91
41809: PUSH
41810: LD_VAR 0 1
41814: PUSH
41815: LD_INT 12
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: PUSH
41828: EMPTY
41829: LIST
41830: PPUSH
41831: CALL_OW 69
41835: PUSH
41836: LD_INT 2
41838: GREATER
41839: AND
41840: IFFALSE 41863
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41842: LD_ADDR_VAR 0 18
41846: PUSH
41847: LD_INT 11
41849: PUSH
41850: LD_INT 30
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_VAR 0 12
41861: ARRAY
41862: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41863: LD_VAR 0 18
41867: NOT
41868: PUSH
41869: LD_INT 40
41871: PPUSH
41872: LD_VAR 0 16
41876: PPUSH
41877: CALL_OW 321
41881: PUSH
41882: LD_INT 2
41884: EQUAL
41885: AND
41886: PUSH
41887: LD_INT 7
41889: PUSH
41890: LD_VAR 0 5
41894: IN
41895: PUSH
41896: LD_INT 28
41898: PUSH
41899: LD_VAR 0 5
41903: IN
41904: OR
41905: PUSH
41906: LD_INT 45
41908: PUSH
41909: LD_VAR 0 5
41913: IN
41914: OR
41915: AND
41916: IFFALSE 42170
// begin hex := GetHexInfo ( x , y ) ;
41918: LD_ADDR_VAR 0 4
41922: PUSH
41923: LD_VAR 0 10
41927: PPUSH
41928: LD_VAR 0 11
41932: PPUSH
41933: CALL_OW 546
41937: ST_TO_ADDR
// if hex [ 1 ] then
41938: LD_VAR 0 4
41942: PUSH
41943: LD_INT 1
41945: ARRAY
41946: IFFALSE 41950
// exit ;
41948: GO 42353
// height := hex [ 2 ] ;
41950: LD_ADDR_VAR 0 15
41954: PUSH
41955: LD_VAR 0 4
41959: PUSH
41960: LD_INT 2
41962: ARRAY
41963: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41964: LD_ADDR_VAR 0 14
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: LD_INT 5
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: ST_TO_ADDR
// for i in tmp do
41987: LD_ADDR_VAR 0 8
41991: PUSH
41992: LD_VAR 0 14
41996: PUSH
41997: FOR_IN
41998: IFFALSE 42168
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42000: LD_ADDR_VAR 0 9
42004: PUSH
42005: LD_VAR 0 10
42009: PPUSH
42010: LD_VAR 0 8
42014: PPUSH
42015: LD_INT 5
42017: PPUSH
42018: CALL_OW 272
42022: PUSH
42023: LD_VAR 0 11
42027: PPUSH
42028: LD_VAR 0 8
42032: PPUSH
42033: LD_INT 5
42035: PPUSH
42036: CALL_OW 273
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42045: LD_VAR 0 9
42049: PUSH
42050: LD_INT 1
42052: ARRAY
42053: PPUSH
42054: LD_VAR 0 9
42058: PUSH
42059: LD_INT 2
42061: ARRAY
42062: PPUSH
42063: CALL_OW 488
42067: IFFALSE 42166
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42069: LD_ADDR_VAR 0 4
42073: PUSH
42074: LD_VAR 0 9
42078: PUSH
42079: LD_INT 1
42081: ARRAY
42082: PPUSH
42083: LD_VAR 0 9
42087: PUSH
42088: LD_INT 2
42090: ARRAY
42091: PPUSH
42092: CALL_OW 546
42096: ST_TO_ADDR
// if hex [ 1 ] then
42097: LD_VAR 0 4
42101: PUSH
42102: LD_INT 1
42104: ARRAY
42105: IFFALSE 42109
// continue ;
42107: GO 41997
// h := hex [ 2 ] ;
42109: LD_ADDR_VAR 0 13
42113: PUSH
42114: LD_VAR 0 4
42118: PUSH
42119: LD_INT 2
42121: ARRAY
42122: ST_TO_ADDR
// if h + 7 < height then
42123: LD_VAR 0 13
42127: PUSH
42128: LD_INT 7
42130: PLUS
42131: PUSH
42132: LD_VAR 0 15
42136: LESS
42137: IFFALSE 42166
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42139: LD_ADDR_VAR 0 18
42143: PUSH
42144: LD_INT 7
42146: PUSH
42147: LD_INT 28
42149: PUSH
42150: LD_INT 45
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: PUSH
42158: LD_VAR 0 12
42162: ARRAY
42163: ST_TO_ADDR
// break ;
42164: GO 42168
// end ; end ; end ;
42166: GO 41997
42168: POP
42169: POP
// end ; if not weapon then
42170: LD_VAR 0 18
42174: NOT
42175: IFFALSE 42235
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42177: LD_ADDR_VAR 0 5
42181: PUSH
42182: LD_VAR 0 5
42186: PUSH
42187: LD_INT 11
42189: PUSH
42190: LD_INT 30
42192: PUSH
42193: LD_INT 49
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: DIFF
42201: ST_TO_ADDR
// if not list then
42202: LD_VAR 0 5
42206: NOT
42207: IFFALSE 42211
// exit ;
42209: GO 42353
// weapon := list [ rand ( 1 , list ) ] ;
42211: LD_ADDR_VAR 0 18
42215: PUSH
42216: LD_VAR 0 5
42220: PUSH
42221: LD_INT 1
42223: PPUSH
42224: LD_VAR 0 5
42228: PPUSH
42229: CALL_OW 12
42233: ARRAY
42234: ST_TO_ADDR
// end ; if weapon then
42235: LD_VAR 0 18
42239: IFFALSE 42353
// begin tmp := CostOfWeapon ( weapon ) ;
42241: LD_ADDR_VAR 0 14
42245: PUSH
42246: LD_VAR 0 18
42250: PPUSH
42251: CALL_OW 451
42255: ST_TO_ADDR
// j := GetBase ( tower ) ;
42256: LD_ADDR_VAR 0 9
42260: PUSH
42261: LD_VAR 0 1
42265: PPUSH
42266: CALL_OW 274
42270: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42271: LD_VAR 0 9
42275: PPUSH
42276: LD_INT 1
42278: PPUSH
42279: CALL_OW 275
42283: PUSH
42284: LD_VAR 0 14
42288: PUSH
42289: LD_INT 1
42291: ARRAY
42292: GREATEREQUAL
42293: PUSH
42294: LD_VAR 0 9
42298: PPUSH
42299: LD_INT 2
42301: PPUSH
42302: CALL_OW 275
42306: PUSH
42307: LD_VAR 0 14
42311: PUSH
42312: LD_INT 2
42314: ARRAY
42315: GREATEREQUAL
42316: AND
42317: PUSH
42318: LD_VAR 0 9
42322: PPUSH
42323: LD_INT 3
42325: PPUSH
42326: CALL_OW 275
42330: PUSH
42331: LD_VAR 0 14
42335: PUSH
42336: LD_INT 3
42338: ARRAY
42339: GREATEREQUAL
42340: AND
42341: IFFALSE 42353
// result := weapon ;
42343: LD_ADDR_VAR 0 3
42347: PUSH
42348: LD_VAR 0 18
42352: ST_TO_ADDR
// end ; end ;
42353: LD_VAR 0 3
42357: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42358: LD_INT 0
42360: PPUSH
42361: PPUSH
// result := true ;
42362: LD_ADDR_VAR 0 3
42366: PUSH
42367: LD_INT 1
42369: ST_TO_ADDR
// if array1 = array2 then
42370: LD_VAR 0 1
42374: PUSH
42375: LD_VAR 0 2
42379: EQUAL
42380: IFFALSE 42440
// begin for i = 1 to array1 do
42382: LD_ADDR_VAR 0 4
42386: PUSH
42387: DOUBLE
42388: LD_INT 1
42390: DEC
42391: ST_TO_ADDR
42392: LD_VAR 0 1
42396: PUSH
42397: FOR_TO
42398: IFFALSE 42436
// if array1 [ i ] <> array2 [ i ] then
42400: LD_VAR 0 1
42404: PUSH
42405: LD_VAR 0 4
42409: ARRAY
42410: PUSH
42411: LD_VAR 0 2
42415: PUSH
42416: LD_VAR 0 4
42420: ARRAY
42421: NONEQUAL
42422: IFFALSE 42434
// begin result := false ;
42424: LD_ADDR_VAR 0 3
42428: PUSH
42429: LD_INT 0
42431: ST_TO_ADDR
// break ;
42432: GO 42436
// end ;
42434: GO 42397
42436: POP
42437: POP
// end else
42438: GO 42448
// result := false ;
42440: LD_ADDR_VAR 0 3
42444: PUSH
42445: LD_INT 0
42447: ST_TO_ADDR
// end ;
42448: LD_VAR 0 3
42452: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42453: LD_INT 0
42455: PPUSH
42456: PPUSH
// if not array1 or not array2 then
42457: LD_VAR 0 1
42461: NOT
42462: PUSH
42463: LD_VAR 0 2
42467: NOT
42468: OR
42469: IFFALSE 42473
// exit ;
42471: GO 42537
// result := true ;
42473: LD_ADDR_VAR 0 3
42477: PUSH
42478: LD_INT 1
42480: ST_TO_ADDR
// for i = 1 to array1 do
42481: LD_ADDR_VAR 0 4
42485: PUSH
42486: DOUBLE
42487: LD_INT 1
42489: DEC
42490: ST_TO_ADDR
42491: LD_VAR 0 1
42495: PUSH
42496: FOR_TO
42497: IFFALSE 42535
// if array1 [ i ] <> array2 [ i ] then
42499: LD_VAR 0 1
42503: PUSH
42504: LD_VAR 0 4
42508: ARRAY
42509: PUSH
42510: LD_VAR 0 2
42514: PUSH
42515: LD_VAR 0 4
42519: ARRAY
42520: NONEQUAL
42521: IFFALSE 42533
// begin result := false ;
42523: LD_ADDR_VAR 0 3
42527: PUSH
42528: LD_INT 0
42530: ST_TO_ADDR
// break ;
42531: GO 42535
// end ;
42533: GO 42496
42535: POP
42536: POP
// end ;
42537: LD_VAR 0 3
42541: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42542: LD_INT 0
42544: PPUSH
42545: PPUSH
42546: PPUSH
// pom := GetBase ( fac ) ;
42547: LD_ADDR_VAR 0 5
42551: PUSH
42552: LD_VAR 0 1
42556: PPUSH
42557: CALL_OW 274
42561: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42562: LD_ADDR_VAR 0 4
42566: PUSH
42567: LD_VAR 0 2
42571: PUSH
42572: LD_INT 1
42574: ARRAY
42575: PPUSH
42576: LD_VAR 0 2
42580: PUSH
42581: LD_INT 2
42583: ARRAY
42584: PPUSH
42585: LD_VAR 0 2
42589: PUSH
42590: LD_INT 3
42592: ARRAY
42593: PPUSH
42594: LD_VAR 0 2
42598: PUSH
42599: LD_INT 4
42601: ARRAY
42602: PPUSH
42603: CALL_OW 449
42607: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42608: LD_ADDR_VAR 0 3
42612: PUSH
42613: LD_VAR 0 5
42617: PPUSH
42618: LD_INT 1
42620: PPUSH
42621: CALL_OW 275
42625: PUSH
42626: LD_VAR 0 4
42630: PUSH
42631: LD_INT 1
42633: ARRAY
42634: GREATEREQUAL
42635: PUSH
42636: LD_VAR 0 5
42640: PPUSH
42641: LD_INT 2
42643: PPUSH
42644: CALL_OW 275
42648: PUSH
42649: LD_VAR 0 4
42653: PUSH
42654: LD_INT 2
42656: ARRAY
42657: GREATEREQUAL
42658: AND
42659: PUSH
42660: LD_VAR 0 5
42664: PPUSH
42665: LD_INT 3
42667: PPUSH
42668: CALL_OW 275
42672: PUSH
42673: LD_VAR 0 4
42677: PUSH
42678: LD_INT 3
42680: ARRAY
42681: GREATEREQUAL
42682: AND
42683: ST_TO_ADDR
// end ;
42684: LD_VAR 0 3
42688: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42689: LD_INT 0
42691: PPUSH
42692: PPUSH
42693: PPUSH
42694: PPUSH
// pom := GetBase ( building ) ;
42695: LD_ADDR_VAR 0 3
42699: PUSH
42700: LD_VAR 0 1
42704: PPUSH
42705: CALL_OW 274
42709: ST_TO_ADDR
// if not pom then
42710: LD_VAR 0 3
42714: NOT
42715: IFFALSE 42719
// exit ;
42717: GO 42889
// btype := GetBType ( building ) ;
42719: LD_ADDR_VAR 0 5
42723: PUSH
42724: LD_VAR 0 1
42728: PPUSH
42729: CALL_OW 266
42733: ST_TO_ADDR
// if btype = b_armoury then
42734: LD_VAR 0 5
42738: PUSH
42739: LD_INT 4
42741: EQUAL
42742: IFFALSE 42752
// btype := b_barracks ;
42744: LD_ADDR_VAR 0 5
42748: PUSH
42749: LD_INT 5
42751: ST_TO_ADDR
// if btype = b_depot then
42752: LD_VAR 0 5
42756: PUSH
42757: LD_INT 0
42759: EQUAL
42760: IFFALSE 42770
// btype := b_warehouse ;
42762: LD_ADDR_VAR 0 5
42766: PUSH
42767: LD_INT 1
42769: ST_TO_ADDR
// if btype = b_workshop then
42770: LD_VAR 0 5
42774: PUSH
42775: LD_INT 2
42777: EQUAL
42778: IFFALSE 42788
// btype := b_factory ;
42780: LD_ADDR_VAR 0 5
42784: PUSH
42785: LD_INT 3
42787: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42788: LD_ADDR_VAR 0 4
42792: PUSH
42793: LD_VAR 0 5
42797: PPUSH
42798: LD_VAR 0 1
42802: PPUSH
42803: CALL_OW 248
42807: PPUSH
42808: CALL_OW 450
42812: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42813: LD_ADDR_VAR 0 2
42817: PUSH
42818: LD_VAR 0 3
42822: PPUSH
42823: LD_INT 1
42825: PPUSH
42826: CALL_OW 275
42830: PUSH
42831: LD_VAR 0 4
42835: PUSH
42836: LD_INT 1
42838: ARRAY
42839: GREATEREQUAL
42840: PUSH
42841: LD_VAR 0 3
42845: PPUSH
42846: LD_INT 2
42848: PPUSH
42849: CALL_OW 275
42853: PUSH
42854: LD_VAR 0 4
42858: PUSH
42859: LD_INT 2
42861: ARRAY
42862: GREATEREQUAL
42863: AND
42864: PUSH
42865: LD_VAR 0 3
42869: PPUSH
42870: LD_INT 3
42872: PPUSH
42873: CALL_OW 275
42877: PUSH
42878: LD_VAR 0 4
42882: PUSH
42883: LD_INT 3
42885: ARRAY
42886: GREATEREQUAL
42887: AND
42888: ST_TO_ADDR
// end ;
42889: LD_VAR 0 2
42893: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42894: LD_INT 0
42896: PPUSH
42897: PPUSH
42898: PPUSH
// pom := GetBase ( building ) ;
42899: LD_ADDR_VAR 0 4
42903: PUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: CALL_OW 274
42913: ST_TO_ADDR
// if not pom then
42914: LD_VAR 0 4
42918: NOT
42919: IFFALSE 42923
// exit ;
42921: GO 43024
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42923: LD_ADDR_VAR 0 5
42927: PUSH
42928: LD_VAR 0 2
42932: PPUSH
42933: LD_VAR 0 1
42937: PPUSH
42938: CALL_OW 248
42942: PPUSH
42943: CALL_OW 450
42947: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42948: LD_ADDR_VAR 0 3
42952: PUSH
42953: LD_VAR 0 4
42957: PPUSH
42958: LD_INT 1
42960: PPUSH
42961: CALL_OW 275
42965: PUSH
42966: LD_VAR 0 5
42970: PUSH
42971: LD_INT 1
42973: ARRAY
42974: GREATEREQUAL
42975: PUSH
42976: LD_VAR 0 4
42980: PPUSH
42981: LD_INT 2
42983: PPUSH
42984: CALL_OW 275
42988: PUSH
42989: LD_VAR 0 5
42993: PUSH
42994: LD_INT 2
42996: ARRAY
42997: GREATEREQUAL
42998: AND
42999: PUSH
43000: LD_VAR 0 4
43004: PPUSH
43005: LD_INT 3
43007: PPUSH
43008: CALL_OW 275
43012: PUSH
43013: LD_VAR 0 5
43017: PUSH
43018: LD_INT 3
43020: ARRAY
43021: GREATEREQUAL
43022: AND
43023: ST_TO_ADDR
// end ;
43024: LD_VAR 0 3
43028: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43029: LD_INT 0
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
43037: PPUSH
43038: PPUSH
43039: PPUSH
43040: PPUSH
43041: PPUSH
// result := false ;
43042: LD_ADDR_VAR 0 8
43046: PUSH
43047: LD_INT 0
43049: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43050: LD_VAR 0 5
43054: NOT
43055: PUSH
43056: LD_VAR 0 1
43060: NOT
43061: OR
43062: PUSH
43063: LD_VAR 0 2
43067: NOT
43068: OR
43069: PUSH
43070: LD_VAR 0 3
43074: NOT
43075: OR
43076: IFFALSE 43080
// exit ;
43078: GO 43894
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43080: LD_ADDR_VAR 0 14
43084: PUSH
43085: LD_VAR 0 1
43089: PPUSH
43090: LD_VAR 0 2
43094: PPUSH
43095: LD_VAR 0 3
43099: PPUSH
43100: LD_VAR 0 4
43104: PPUSH
43105: LD_VAR 0 5
43109: PUSH
43110: LD_INT 1
43112: ARRAY
43113: PPUSH
43114: CALL_OW 248
43118: PPUSH
43119: LD_INT 0
43121: PPUSH
43122: CALL 45127 0 6
43126: ST_TO_ADDR
// if not hexes then
43127: LD_VAR 0 14
43131: NOT
43132: IFFALSE 43136
// exit ;
43134: GO 43894
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43136: LD_ADDR_VAR 0 17
43140: PUSH
43141: LD_VAR 0 5
43145: PPUSH
43146: LD_INT 22
43148: PUSH
43149: LD_VAR 0 13
43153: PPUSH
43154: CALL_OW 255
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: LD_INT 30
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 30
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: LIST
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PPUSH
43195: CALL_OW 72
43199: ST_TO_ADDR
// for i = 1 to hexes do
43200: LD_ADDR_VAR 0 9
43204: PUSH
43205: DOUBLE
43206: LD_INT 1
43208: DEC
43209: ST_TO_ADDR
43210: LD_VAR 0 14
43214: PUSH
43215: FOR_TO
43216: IFFALSE 43892
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43218: LD_ADDR_VAR 0 13
43222: PUSH
43223: LD_VAR 0 14
43227: PUSH
43228: LD_VAR 0 9
43232: ARRAY
43233: PUSH
43234: LD_INT 1
43236: ARRAY
43237: PPUSH
43238: LD_VAR 0 14
43242: PUSH
43243: LD_VAR 0 9
43247: ARRAY
43248: PUSH
43249: LD_INT 2
43251: ARRAY
43252: PPUSH
43253: CALL_OW 428
43257: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43258: LD_VAR 0 14
43262: PUSH
43263: LD_VAR 0 9
43267: ARRAY
43268: PUSH
43269: LD_INT 1
43271: ARRAY
43272: PPUSH
43273: LD_VAR 0 14
43277: PUSH
43278: LD_VAR 0 9
43282: ARRAY
43283: PUSH
43284: LD_INT 2
43286: ARRAY
43287: PPUSH
43288: CALL_OW 351
43292: PUSH
43293: LD_VAR 0 14
43297: PUSH
43298: LD_VAR 0 9
43302: ARRAY
43303: PUSH
43304: LD_INT 1
43306: ARRAY
43307: PPUSH
43308: LD_VAR 0 14
43312: PUSH
43313: LD_VAR 0 9
43317: ARRAY
43318: PUSH
43319: LD_INT 2
43321: ARRAY
43322: PPUSH
43323: CALL_OW 488
43327: NOT
43328: OR
43329: PUSH
43330: LD_VAR 0 13
43334: PPUSH
43335: CALL_OW 247
43339: PUSH
43340: LD_INT 3
43342: EQUAL
43343: OR
43344: IFFALSE 43350
// exit ;
43346: POP
43347: POP
43348: GO 43894
// if not tmp then
43350: LD_VAR 0 13
43354: NOT
43355: IFFALSE 43359
// continue ;
43357: GO 43215
// result := true ;
43359: LD_ADDR_VAR 0 8
43363: PUSH
43364: LD_INT 1
43366: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43367: LD_VAR 0 6
43371: PUSH
43372: LD_VAR 0 13
43376: PPUSH
43377: CALL_OW 247
43381: PUSH
43382: LD_INT 2
43384: EQUAL
43385: AND
43386: PUSH
43387: LD_VAR 0 13
43391: PPUSH
43392: CALL_OW 263
43396: PUSH
43397: LD_INT 1
43399: EQUAL
43400: AND
43401: IFFALSE 43565
// begin if IsDrivenBy ( tmp ) then
43403: LD_VAR 0 13
43407: PPUSH
43408: CALL_OW 311
43412: IFFALSE 43416
// continue ;
43414: GO 43215
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43416: LD_VAR 0 6
43420: PPUSH
43421: LD_INT 3
43423: PUSH
43424: LD_INT 60
43426: PUSH
43427: EMPTY
43428: LIST
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 3
43436: PUSH
43437: LD_INT 55
43439: PUSH
43440: EMPTY
43441: LIST
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PPUSH
43451: CALL_OW 72
43455: IFFALSE 43563
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43457: LD_ADDR_VAR 0 18
43461: PUSH
43462: LD_VAR 0 6
43466: PPUSH
43467: LD_INT 3
43469: PUSH
43470: LD_INT 60
43472: PUSH
43473: EMPTY
43474: LIST
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 3
43482: PUSH
43483: LD_INT 55
43485: PUSH
43486: EMPTY
43487: LIST
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PPUSH
43497: CALL_OW 72
43501: PUSH
43502: LD_INT 1
43504: ARRAY
43505: ST_TO_ADDR
// if IsInUnit ( driver ) then
43506: LD_VAR 0 18
43510: PPUSH
43511: CALL_OW 310
43515: IFFALSE 43526
// ComExit ( driver ) ;
43517: LD_VAR 0 18
43521: PPUSH
43522: CALL 68907 0 1
// AddComEnterUnit ( driver , tmp ) ;
43526: LD_VAR 0 18
43530: PPUSH
43531: LD_VAR 0 13
43535: PPUSH
43536: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43540: LD_VAR 0 18
43544: PPUSH
43545: LD_VAR 0 7
43549: PPUSH
43550: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43554: LD_VAR 0 18
43558: PPUSH
43559: CALL_OW 181
// end ; continue ;
43563: GO 43215
// end ; if not cleaners or not tmp in cleaners then
43565: LD_VAR 0 6
43569: NOT
43570: PUSH
43571: LD_VAR 0 13
43575: PUSH
43576: LD_VAR 0 6
43580: IN
43581: NOT
43582: OR
43583: IFFALSE 43890
// begin if dep then
43585: LD_VAR 0 17
43589: IFFALSE 43725
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43591: LD_ADDR_VAR 0 16
43595: PUSH
43596: LD_VAR 0 17
43600: PUSH
43601: LD_INT 1
43603: ARRAY
43604: PPUSH
43605: CALL_OW 250
43609: PPUSH
43610: LD_VAR 0 17
43614: PUSH
43615: LD_INT 1
43617: ARRAY
43618: PPUSH
43619: CALL_OW 254
43623: PPUSH
43624: LD_INT 5
43626: PPUSH
43627: CALL_OW 272
43631: PUSH
43632: LD_VAR 0 17
43636: PUSH
43637: LD_INT 1
43639: ARRAY
43640: PPUSH
43641: CALL_OW 251
43645: PPUSH
43646: LD_VAR 0 17
43650: PUSH
43651: LD_INT 1
43653: ARRAY
43654: PPUSH
43655: CALL_OW 254
43659: PPUSH
43660: LD_INT 5
43662: PPUSH
43663: CALL_OW 273
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43672: LD_VAR 0 16
43676: PUSH
43677: LD_INT 1
43679: ARRAY
43680: PPUSH
43681: LD_VAR 0 16
43685: PUSH
43686: LD_INT 2
43688: ARRAY
43689: PPUSH
43690: CALL_OW 488
43694: IFFALSE 43725
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43696: LD_VAR 0 13
43700: PPUSH
43701: LD_VAR 0 16
43705: PUSH
43706: LD_INT 1
43708: ARRAY
43709: PPUSH
43710: LD_VAR 0 16
43714: PUSH
43715: LD_INT 2
43717: ARRAY
43718: PPUSH
43719: CALL_OW 111
// continue ;
43723: GO 43215
// end ; end ; r := GetDir ( tmp ) ;
43725: LD_ADDR_VAR 0 15
43729: PUSH
43730: LD_VAR 0 13
43734: PPUSH
43735: CALL_OW 254
43739: ST_TO_ADDR
// if r = 5 then
43740: LD_VAR 0 15
43744: PUSH
43745: LD_INT 5
43747: EQUAL
43748: IFFALSE 43758
// r := 0 ;
43750: LD_ADDR_VAR 0 15
43754: PUSH
43755: LD_INT 0
43757: ST_TO_ADDR
// for j = r to 5 do
43758: LD_ADDR_VAR 0 10
43762: PUSH
43763: DOUBLE
43764: LD_VAR 0 15
43768: DEC
43769: ST_TO_ADDR
43770: LD_INT 5
43772: PUSH
43773: FOR_TO
43774: IFFALSE 43888
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43776: LD_ADDR_VAR 0 11
43780: PUSH
43781: LD_VAR 0 13
43785: PPUSH
43786: CALL_OW 250
43790: PPUSH
43791: LD_VAR 0 10
43795: PPUSH
43796: LD_INT 2
43798: PPUSH
43799: CALL_OW 272
43803: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43804: LD_ADDR_VAR 0 12
43808: PUSH
43809: LD_VAR 0 13
43813: PPUSH
43814: CALL_OW 251
43818: PPUSH
43819: LD_VAR 0 10
43823: PPUSH
43824: LD_INT 2
43826: PPUSH
43827: CALL_OW 273
43831: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43832: LD_VAR 0 11
43836: PPUSH
43837: LD_VAR 0 12
43841: PPUSH
43842: CALL_OW 488
43846: PUSH
43847: LD_VAR 0 11
43851: PPUSH
43852: LD_VAR 0 12
43856: PPUSH
43857: CALL_OW 428
43861: NOT
43862: AND
43863: IFFALSE 43886
// begin ComMoveXY ( tmp , _x , _y ) ;
43865: LD_VAR 0 13
43869: PPUSH
43870: LD_VAR 0 11
43874: PPUSH
43875: LD_VAR 0 12
43879: PPUSH
43880: CALL_OW 111
// break ;
43884: GO 43888
// end ; end ;
43886: GO 43773
43888: POP
43889: POP
// end ; end ;
43890: GO 43215
43892: POP
43893: POP
// end ;
43894: LD_VAR 0 8
43898: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43899: LD_INT 0
43901: PPUSH
// result := true ;
43902: LD_ADDR_VAR 0 3
43906: PUSH
43907: LD_INT 1
43909: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43910: LD_VAR 0 2
43914: PUSH
43915: LD_INT 24
43917: DOUBLE
43918: EQUAL
43919: IFTRUE 43929
43921: LD_INT 33
43923: DOUBLE
43924: EQUAL
43925: IFTRUE 43929
43927: GO 43954
43929: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43930: LD_ADDR_VAR 0 3
43934: PUSH
43935: LD_INT 32
43937: PPUSH
43938: LD_VAR 0 1
43942: PPUSH
43943: CALL_OW 321
43947: PUSH
43948: LD_INT 2
43950: EQUAL
43951: ST_TO_ADDR
43952: GO 44270
43954: LD_INT 20
43956: DOUBLE
43957: EQUAL
43958: IFTRUE 43962
43960: GO 43987
43962: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43963: LD_ADDR_VAR 0 3
43967: PUSH
43968: LD_INT 6
43970: PPUSH
43971: LD_VAR 0 1
43975: PPUSH
43976: CALL_OW 321
43980: PUSH
43981: LD_INT 2
43983: EQUAL
43984: ST_TO_ADDR
43985: GO 44270
43987: LD_INT 22
43989: DOUBLE
43990: EQUAL
43991: IFTRUE 44001
43993: LD_INT 36
43995: DOUBLE
43996: EQUAL
43997: IFTRUE 44001
43999: GO 44026
44001: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44002: LD_ADDR_VAR 0 3
44006: PUSH
44007: LD_INT 15
44009: PPUSH
44010: LD_VAR 0 1
44014: PPUSH
44015: CALL_OW 321
44019: PUSH
44020: LD_INT 2
44022: EQUAL
44023: ST_TO_ADDR
44024: GO 44270
44026: LD_INT 30
44028: DOUBLE
44029: EQUAL
44030: IFTRUE 44034
44032: GO 44059
44034: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44035: LD_ADDR_VAR 0 3
44039: PUSH
44040: LD_INT 20
44042: PPUSH
44043: LD_VAR 0 1
44047: PPUSH
44048: CALL_OW 321
44052: PUSH
44053: LD_INT 2
44055: EQUAL
44056: ST_TO_ADDR
44057: GO 44270
44059: LD_INT 28
44061: DOUBLE
44062: EQUAL
44063: IFTRUE 44073
44065: LD_INT 21
44067: DOUBLE
44068: EQUAL
44069: IFTRUE 44073
44071: GO 44098
44073: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44074: LD_ADDR_VAR 0 3
44078: PUSH
44079: LD_INT 21
44081: PPUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL_OW 321
44091: PUSH
44092: LD_INT 2
44094: EQUAL
44095: ST_TO_ADDR
44096: GO 44270
44098: LD_INT 16
44100: DOUBLE
44101: EQUAL
44102: IFTRUE 44106
44104: GO 44131
44106: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44107: LD_ADDR_VAR 0 3
44111: PUSH
44112: LD_INT 84
44114: PPUSH
44115: LD_VAR 0 1
44119: PPUSH
44120: CALL_OW 321
44124: PUSH
44125: LD_INT 2
44127: EQUAL
44128: ST_TO_ADDR
44129: GO 44270
44131: LD_INT 19
44133: DOUBLE
44134: EQUAL
44135: IFTRUE 44145
44137: LD_INT 23
44139: DOUBLE
44140: EQUAL
44141: IFTRUE 44145
44143: GO 44170
44145: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44146: LD_ADDR_VAR 0 3
44150: PUSH
44151: LD_INT 83
44153: PPUSH
44154: LD_VAR 0 1
44158: PPUSH
44159: CALL_OW 321
44163: PUSH
44164: LD_INT 2
44166: EQUAL
44167: ST_TO_ADDR
44168: GO 44270
44170: LD_INT 17
44172: DOUBLE
44173: EQUAL
44174: IFTRUE 44178
44176: GO 44203
44178: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44179: LD_ADDR_VAR 0 3
44183: PUSH
44184: LD_INT 39
44186: PPUSH
44187: LD_VAR 0 1
44191: PPUSH
44192: CALL_OW 321
44196: PUSH
44197: LD_INT 2
44199: EQUAL
44200: ST_TO_ADDR
44201: GO 44270
44203: LD_INT 18
44205: DOUBLE
44206: EQUAL
44207: IFTRUE 44211
44209: GO 44236
44211: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44212: LD_ADDR_VAR 0 3
44216: PUSH
44217: LD_INT 40
44219: PPUSH
44220: LD_VAR 0 1
44224: PPUSH
44225: CALL_OW 321
44229: PUSH
44230: LD_INT 2
44232: EQUAL
44233: ST_TO_ADDR
44234: GO 44270
44236: LD_INT 27
44238: DOUBLE
44239: EQUAL
44240: IFTRUE 44244
44242: GO 44269
44244: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44245: LD_ADDR_VAR 0 3
44249: PUSH
44250: LD_INT 35
44252: PPUSH
44253: LD_VAR 0 1
44257: PPUSH
44258: CALL_OW 321
44262: PUSH
44263: LD_INT 2
44265: EQUAL
44266: ST_TO_ADDR
44267: GO 44270
44269: POP
// end ;
44270: LD_VAR 0 3
44274: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44275: LD_INT 0
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
// result := false ;
44288: LD_ADDR_VAR 0 6
44292: PUSH
44293: LD_INT 0
44295: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44296: LD_VAR 0 1
44300: NOT
44301: PUSH
44302: LD_VAR 0 1
44306: PPUSH
44307: CALL_OW 266
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: IN
44322: NOT
44323: OR
44324: PUSH
44325: LD_VAR 0 2
44329: NOT
44330: OR
44331: PUSH
44332: LD_VAR 0 5
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: LD_INT 4
44351: PUSH
44352: LD_INT 5
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: IN
44363: NOT
44364: OR
44365: PUSH
44366: LD_VAR 0 3
44370: PPUSH
44371: LD_VAR 0 4
44375: PPUSH
44376: CALL_OW 488
44380: NOT
44381: OR
44382: IFFALSE 44386
// exit ;
44384: GO 45122
// side := GetSide ( depot ) ;
44386: LD_ADDR_VAR 0 9
44390: PUSH
44391: LD_VAR 0 1
44395: PPUSH
44396: CALL_OW 255
44400: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44401: LD_VAR 0 9
44405: PPUSH
44406: LD_VAR 0 2
44410: PPUSH
44411: CALL 43899 0 2
44415: NOT
44416: IFFALSE 44420
// exit ;
44418: GO 45122
// pom := GetBase ( depot ) ;
44420: LD_ADDR_VAR 0 10
44424: PUSH
44425: LD_VAR 0 1
44429: PPUSH
44430: CALL_OW 274
44434: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44435: LD_ADDR_VAR 0 11
44439: PUSH
44440: LD_VAR 0 2
44444: PPUSH
44445: LD_VAR 0 1
44449: PPUSH
44450: CALL_OW 248
44454: PPUSH
44455: CALL_OW 450
44459: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44460: LD_VAR 0 10
44464: PPUSH
44465: LD_INT 1
44467: PPUSH
44468: CALL_OW 275
44472: PUSH
44473: LD_VAR 0 11
44477: PUSH
44478: LD_INT 1
44480: ARRAY
44481: GREATEREQUAL
44482: PUSH
44483: LD_VAR 0 10
44487: PPUSH
44488: LD_INT 2
44490: PPUSH
44491: CALL_OW 275
44495: PUSH
44496: LD_VAR 0 11
44500: PUSH
44501: LD_INT 2
44503: ARRAY
44504: GREATEREQUAL
44505: AND
44506: PUSH
44507: LD_VAR 0 10
44511: PPUSH
44512: LD_INT 3
44514: PPUSH
44515: CALL_OW 275
44519: PUSH
44520: LD_VAR 0 11
44524: PUSH
44525: LD_INT 3
44527: ARRAY
44528: GREATEREQUAL
44529: AND
44530: NOT
44531: IFFALSE 44535
// exit ;
44533: GO 45122
// if GetBType ( depot ) = b_depot then
44535: LD_VAR 0 1
44539: PPUSH
44540: CALL_OW 266
44544: PUSH
44545: LD_INT 0
44547: EQUAL
44548: IFFALSE 44560
// dist := 28 else
44550: LD_ADDR_VAR 0 14
44554: PUSH
44555: LD_INT 28
44557: ST_TO_ADDR
44558: GO 44568
// dist := 36 ;
44560: LD_ADDR_VAR 0 14
44564: PUSH
44565: LD_INT 36
44567: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44568: LD_VAR 0 1
44572: PPUSH
44573: LD_VAR 0 3
44577: PPUSH
44578: LD_VAR 0 4
44582: PPUSH
44583: CALL_OW 297
44587: PUSH
44588: LD_VAR 0 14
44592: GREATER
44593: IFFALSE 44597
// exit ;
44595: GO 45122
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44597: LD_ADDR_VAR 0 12
44601: PUSH
44602: LD_VAR 0 2
44606: PPUSH
44607: LD_VAR 0 3
44611: PPUSH
44612: LD_VAR 0 4
44616: PPUSH
44617: LD_VAR 0 5
44621: PPUSH
44622: LD_VAR 0 1
44626: PPUSH
44627: CALL_OW 248
44631: PPUSH
44632: LD_INT 0
44634: PPUSH
44635: CALL 45127 0 6
44639: ST_TO_ADDR
// if not hexes then
44640: LD_VAR 0 12
44644: NOT
44645: IFFALSE 44649
// exit ;
44647: GO 45122
// hex := GetHexInfo ( x , y ) ;
44649: LD_ADDR_VAR 0 15
44653: PUSH
44654: LD_VAR 0 3
44658: PPUSH
44659: LD_VAR 0 4
44663: PPUSH
44664: CALL_OW 546
44668: ST_TO_ADDR
// if hex [ 1 ] then
44669: LD_VAR 0 15
44673: PUSH
44674: LD_INT 1
44676: ARRAY
44677: IFFALSE 44681
// exit ;
44679: GO 45122
// height := hex [ 2 ] ;
44681: LD_ADDR_VAR 0 13
44685: PUSH
44686: LD_VAR 0 15
44690: PUSH
44691: LD_INT 2
44693: ARRAY
44694: ST_TO_ADDR
// for i = 1 to hexes do
44695: LD_ADDR_VAR 0 7
44699: PUSH
44700: DOUBLE
44701: LD_INT 1
44703: DEC
44704: ST_TO_ADDR
44705: LD_VAR 0 12
44709: PUSH
44710: FOR_TO
44711: IFFALSE 45041
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44713: LD_VAR 0 12
44717: PUSH
44718: LD_VAR 0 7
44722: ARRAY
44723: PUSH
44724: LD_INT 1
44726: ARRAY
44727: PPUSH
44728: LD_VAR 0 12
44732: PUSH
44733: LD_VAR 0 7
44737: ARRAY
44738: PUSH
44739: LD_INT 2
44741: ARRAY
44742: PPUSH
44743: CALL_OW 488
44747: NOT
44748: PUSH
44749: LD_VAR 0 12
44753: PUSH
44754: LD_VAR 0 7
44758: ARRAY
44759: PUSH
44760: LD_INT 1
44762: ARRAY
44763: PPUSH
44764: LD_VAR 0 12
44768: PUSH
44769: LD_VAR 0 7
44773: ARRAY
44774: PUSH
44775: LD_INT 2
44777: ARRAY
44778: PPUSH
44779: CALL_OW 428
44783: PUSH
44784: LD_INT 0
44786: GREATER
44787: OR
44788: PUSH
44789: LD_VAR 0 12
44793: PUSH
44794: LD_VAR 0 7
44798: ARRAY
44799: PUSH
44800: LD_INT 1
44802: ARRAY
44803: PPUSH
44804: LD_VAR 0 12
44808: PUSH
44809: LD_VAR 0 7
44813: ARRAY
44814: PUSH
44815: LD_INT 2
44817: ARRAY
44818: PPUSH
44819: CALL_OW 351
44823: OR
44824: IFFALSE 44830
// exit ;
44826: POP
44827: POP
44828: GO 45122
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44830: LD_ADDR_VAR 0 8
44834: PUSH
44835: LD_VAR 0 12
44839: PUSH
44840: LD_VAR 0 7
44844: ARRAY
44845: PUSH
44846: LD_INT 1
44848: ARRAY
44849: PPUSH
44850: LD_VAR 0 12
44854: PUSH
44855: LD_VAR 0 7
44859: ARRAY
44860: PUSH
44861: LD_INT 2
44863: ARRAY
44864: PPUSH
44865: CALL_OW 546
44869: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44870: LD_VAR 0 8
44874: PUSH
44875: LD_INT 1
44877: ARRAY
44878: PUSH
44879: LD_VAR 0 8
44883: PUSH
44884: LD_INT 2
44886: ARRAY
44887: PUSH
44888: LD_VAR 0 13
44892: PUSH
44893: LD_INT 2
44895: PLUS
44896: GREATER
44897: OR
44898: PUSH
44899: LD_VAR 0 8
44903: PUSH
44904: LD_INT 2
44906: ARRAY
44907: PUSH
44908: LD_VAR 0 13
44912: PUSH
44913: LD_INT 2
44915: MINUS
44916: LESS
44917: OR
44918: PUSH
44919: LD_VAR 0 8
44923: PUSH
44924: LD_INT 3
44926: ARRAY
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 8
44933: PUSH
44934: LD_INT 9
44936: PUSH
44937: LD_INT 10
44939: PUSH
44940: LD_INT 11
44942: PUSH
44943: LD_INT 12
44945: PUSH
44946: LD_INT 13
44948: PUSH
44949: LD_INT 16
44951: PUSH
44952: LD_INT 17
44954: PUSH
44955: LD_INT 18
44957: PUSH
44958: LD_INT 19
44960: PUSH
44961: LD_INT 20
44963: PUSH
44964: LD_INT 21
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: IN
44982: NOT
44983: OR
44984: PUSH
44985: LD_VAR 0 8
44989: PUSH
44990: LD_INT 5
44992: ARRAY
44993: NOT
44994: OR
44995: PUSH
44996: LD_VAR 0 8
45000: PUSH
45001: LD_INT 6
45003: ARRAY
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 7
45013: PUSH
45014: LD_INT 9
45016: PUSH
45017: LD_INT 10
45019: PUSH
45020: LD_INT 11
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: IN
45031: NOT
45032: OR
45033: IFFALSE 45039
// exit ;
45035: POP
45036: POP
45037: GO 45122
// end ;
45039: GO 44710
45041: POP
45042: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45043: LD_VAR 0 9
45047: PPUSH
45048: LD_VAR 0 3
45052: PPUSH
45053: LD_VAR 0 4
45057: PPUSH
45058: LD_INT 20
45060: PPUSH
45061: CALL 37074 0 4
45065: PUSH
45066: LD_INT 4
45068: ARRAY
45069: IFFALSE 45073
// exit ;
45071: GO 45122
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45073: LD_VAR 0 2
45077: PUSH
45078: LD_INT 29
45080: PUSH
45081: LD_INT 30
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: IN
45088: PUSH
45089: LD_VAR 0 3
45093: PPUSH
45094: LD_VAR 0 4
45098: PPUSH
45099: LD_VAR 0 9
45103: PPUSH
45104: CALL_OW 440
45108: NOT
45109: AND
45110: IFFALSE 45114
// exit ;
45112: GO 45122
// result := true ;
45114: LD_ADDR_VAR 0 6
45118: PUSH
45119: LD_INT 1
45121: ST_TO_ADDR
// end ;
45122: LD_VAR 0 6
45126: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45127: LD_INT 0
45129: PPUSH
45130: PPUSH
45131: PPUSH
45132: PPUSH
45133: PPUSH
45134: PPUSH
45135: PPUSH
45136: PPUSH
45137: PPUSH
45138: PPUSH
45139: PPUSH
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
45157: PPUSH
45158: PPUSH
45159: PPUSH
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
45186: PPUSH
// result = [ ] ;
45187: LD_ADDR_VAR 0 7
45191: PUSH
45192: EMPTY
45193: ST_TO_ADDR
// temp_list = [ ] ;
45194: LD_ADDR_VAR 0 9
45198: PUSH
45199: EMPTY
45200: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45201: LD_VAR 0 4
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: LD_INT 3
45217: PUSH
45218: LD_INT 4
45220: PUSH
45221: LD_INT 5
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: IN
45232: NOT
45233: PUSH
45234: LD_VAR 0 1
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: IN
45249: PUSH
45250: LD_VAR 0 5
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: IN
45269: NOT
45270: AND
45271: OR
45272: IFFALSE 45276
// exit ;
45274: GO 63667
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45276: LD_VAR 0 1
45280: PUSH
45281: LD_INT 6
45283: PUSH
45284: LD_INT 7
45286: PUSH
45287: LD_INT 8
45289: PUSH
45290: LD_INT 13
45292: PUSH
45293: LD_INT 12
45295: PUSH
45296: LD_INT 15
45298: PUSH
45299: LD_INT 11
45301: PUSH
45302: LD_INT 14
45304: PUSH
45305: LD_INT 10
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: IN
45319: IFFALSE 45329
// btype = b_lab ;
45321: LD_ADDR_VAR 0 1
45325: PUSH
45326: LD_INT 6
45328: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45329: LD_VAR 0 6
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: IN
45348: NOT
45349: PUSH
45350: LD_VAR 0 1
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: LD_INT 3
45366: PUSH
45367: LD_INT 6
45369: PUSH
45370: LD_INT 36
45372: PUSH
45373: LD_INT 4
45375: PUSH
45376: LD_INT 5
45378: PUSH
45379: LD_INT 31
45381: PUSH
45382: LD_INT 32
45384: PUSH
45385: LD_INT 33
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: IN
45401: NOT
45402: PUSH
45403: LD_VAR 0 6
45407: PUSH
45408: LD_INT 1
45410: EQUAL
45411: AND
45412: OR
45413: PUSH
45414: LD_VAR 0 1
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: LD_INT 3
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: IN
45429: NOT
45430: PUSH
45431: LD_VAR 0 6
45435: PUSH
45436: LD_INT 2
45438: EQUAL
45439: AND
45440: OR
45441: IFFALSE 45451
// mode = 0 ;
45443: LD_ADDR_VAR 0 6
45447: PUSH
45448: LD_INT 0
45450: ST_TO_ADDR
// case mode of 0 :
45451: LD_VAR 0 6
45455: PUSH
45456: LD_INT 0
45458: DOUBLE
45459: EQUAL
45460: IFTRUE 45464
45462: GO 56917
45464: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45465: LD_ADDR_VAR 0 11
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 3
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 3
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45658: LD_ADDR_VAR 0 12
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 3
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45854: LD_ADDR_VAR 0 13
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: LD_INT 3
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 3
46013: NEG
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 3
46025: NEG
46026: PUSH
46027: LD_INT 3
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46053: LD_ADDR_VAR 0 14
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 2
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 3
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 3
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46249: LD_ADDR_VAR 0 15
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46442: LD_ADDR_VAR 0 16
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 3
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46635: LD_ADDR_VAR 0 17
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46865: LD_ADDR_VAR 0 18
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47095: LD_ADDR_VAR 0 19
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47325: LD_ADDR_VAR 0 20
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47555: LD_ADDR_VAR 0 21
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 2
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47785: LD_ADDR_VAR 0 22
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48015: LD_ADDR_VAR 0 23
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: LD_INT 3
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 3
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48295: LD_ADDR_VAR 0 24
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 3
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48571: LD_ADDR_VAR 0 25
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 3
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 3
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 3
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 3
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48845: LD_ADDR_VAR 0 26
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 3
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 3
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49121: LD_ADDR_VAR 0 27
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 3
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49401: LD_ADDR_VAR 0 28
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: LD_INT 3
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 3
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 3
49648: NEG
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49683: LD_ADDR_VAR 0 29
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: LD_INT 3
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 3
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 3
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49962: LD_ADDR_VAR 0 30
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 3
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 3
50205: NEG
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50240: LD_ADDR_VAR 0 31
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 2
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 3
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50518: LD_ADDR_VAR 0 32
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 3
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 3
50761: NEG
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50796: LD_ADDR_VAR 0 33
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: NEG
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51075: LD_ADDR_VAR 0 34
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 2
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 2
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 3
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51355: LD_ADDR_VAR 0 35
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51467: LD_ADDR_VAR 0 36
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51579: LD_ADDR_VAR 0 37
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51691: LD_ADDR_VAR 0 38
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51803: LD_ADDR_VAR 0 39
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51915: LD_ADDR_VAR 0 40
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52027: LD_ADDR_VAR 0 41
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 3
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 3
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 3
52336: NEG
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52377: LD_ADDR_VAR 0 42
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: LD_INT 3
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 3
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: LD_INT 3
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 3
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 3
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 3
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 3
52686: NEG
52687: PUSH
52688: LD_INT 3
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52727: LD_ADDR_VAR 0 43
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 3
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: LD_INT 3
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 3
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: NEG
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53075: LD_ADDR_VAR 0 44
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: NEG
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 3
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 3
53318: PUSH
53319: LD_INT 3
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 3
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: NEG
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 3
53360: NEG
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 3
53372: NEG
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: NEG
53385: PUSH
53386: LD_INT 3
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53425: LD_ADDR_VAR 0 45
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: PUSH
53672: LD_INT 3
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 3
53734: NEG
53735: PUSH
53736: LD_INT 3
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53775: LD_ADDR_VAR 0 46
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 2
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: LD_INT 3
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 3
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 2
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 3
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 3
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 3
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 3
54082: NEG
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54123: LD_ADDR_VAR 0 47
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 2
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54274: LD_ADDR_VAR 0 48
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54421: LD_ADDR_VAR 0 49
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54565: LD_ADDR_VAR 0 50
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54709: LD_ADDR_VAR 0 51
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54856: LD_ADDR_VAR 0 52
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 2
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55007: LD_ADDR_VAR 0 53
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55237: LD_ADDR_VAR 0 54
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 2
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55467: LD_ADDR_VAR 0 55
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55697: LD_ADDR_VAR 0 56
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55927: LD_ADDR_VAR 0 57
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56157: LD_ADDR_VAR 0 58
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: LD_INT 2
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 2
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56387: LD_ADDR_VAR 0 59
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56475: LD_ADDR_VAR 0 60
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56563: LD_ADDR_VAR 0 61
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56651: LD_ADDR_VAR 0 62
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56739: LD_ADDR_VAR 0 63
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56827: LD_ADDR_VAR 0 64
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: ST_TO_ADDR
// end ; 1 :
56915: GO 62812
56917: LD_INT 1
56919: DOUBLE
56920: EQUAL
56921: IFTRUE 56925
56923: GO 59548
56925: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56926: LD_ADDR_VAR 0 11
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 3
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56970: LD_ADDR_VAR 0 12
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 3
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57011: LD_ADDR_VAR 0 13
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57051: LD_ADDR_VAR 0 14
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57092: LD_ADDR_VAR 0 15
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 3
57110: NEG
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: LIST
57135: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57136: LD_ADDR_VAR 0 16
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: NEG
57168: PUSH
57169: LD_INT 3
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: LIST
57181: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57182: LD_ADDR_VAR 0 17
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: LD_INT 3
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 3
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: LIST
57225: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57226: LD_ADDR_VAR 0 18
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 3
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57267: LD_ADDR_VAR 0 19
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 3
57284: PUSH
57285: LD_INT 3
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: LD_INT 3
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: LIST
57306: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57307: LD_ADDR_VAR 0 20
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: LIST
57347: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57348: LD_ADDR_VAR 0 21
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: NEG
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57392: LD_ADDR_VAR 0 22
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: LD_INT 3
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57438: LD_ADDR_VAR 0 23
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 4
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: LIST
57481: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57482: LD_ADDR_VAR 0 24
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 4
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: LIST
57522: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57523: LD_ADDR_VAR 0 25
57527: PUSH
57528: LD_INT 3
57530: PUSH
57531: LD_INT 3
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 4
57540: PUSH
57541: LD_INT 3
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: LD_INT 4
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: LIST
57562: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57563: LD_ADDR_VAR 0 26
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 3
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57604: LD_ADDR_VAR 0 27
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 3
57622: NEG
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 4
57633: NEG
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57648: LD_ADDR_VAR 0 28
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: LD_INT 4
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 4
57679: NEG
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57694: LD_ADDR_VAR 0 29
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 3
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 4
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 4
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 5
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: LD_INT 5
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: LD_INT 4
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 6
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: LD_INT 6
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 5
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57849: LD_ADDR_VAR 0 30
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 3
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 4
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 4
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 5
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 5
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 6
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 6
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57992: LD_ADDR_VAR 0 31
57996: PUSH
57997: LD_INT 3
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 4
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 4
58039: PUSH
58040: LD_INT 4
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: LD_INT 4
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 5
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 5
58069: PUSH
58070: LD_INT 5
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 4
58079: PUSH
58080: LD_INT 5
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 6
58089: PUSH
58090: LD_INT 5
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 6
58099: PUSH
58100: LD_INT 6
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 5
58109: PUSH
58110: LD_INT 6
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58131: LD_ADDR_VAR 0 32
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 4
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 4
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 3
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: LD_INT 5
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 5
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: LD_INT 4
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 6
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 6
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 5
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58274: LD_ADDR_VAR 0 33
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 3
58315: NEG
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 4
58326: NEG
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 4
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 4
58349: NEG
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 5
58360: NEG
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 5
58371: NEG
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 5
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 6
58394: NEG
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 6
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58429: LD_ADDR_VAR 0 34
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 3
58472: NEG
58473: PUSH
58474: LD_INT 4
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 4
58484: NEG
58485: PUSH
58486: LD_INT 3
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 4
58496: NEG
58497: PUSH
58498: LD_INT 4
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 4
58508: NEG
58509: PUSH
58510: LD_INT 5
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 5
58520: NEG
58521: PUSH
58522: LD_INT 4
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 5
58532: NEG
58533: PUSH
58534: LD_INT 5
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 5
58544: NEG
58545: PUSH
58546: LD_INT 6
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 6
58556: NEG
58557: PUSH
58558: LD_INT 5
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 6
58568: NEG
58569: PUSH
58570: LD_INT 6
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58592: LD_ADDR_VAR 0 41
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 2
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 3
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 2
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58636: LD_ADDR_VAR 0 42
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58677: LD_ADDR_VAR 0 43
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: LD_INT 3
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58717: LD_ADDR_VAR 0 44
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58758: LD_ADDR_VAR 0 45
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: LIST
58801: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58802: LD_ADDR_VAR 0 46
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: NEG
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: LIST
58847: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58848: LD_ADDR_VAR 0 47
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 3
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: LD_INT 3
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58881: LD_ADDR_VAR 0 48
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58912: LD_ADDR_VAR 0 49
58916: PUSH
58917: LD_INT 3
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 3
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58941: LD_ADDR_VAR 0 50
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58970: LD_ADDR_VAR 0 51
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59001: LD_ADDR_VAR 0 52
59005: PUSH
59006: LD_INT 3
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59034: LD_ADDR_VAR 0 53
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 3
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 3
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: LIST
59077: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59078: LD_ADDR_VAR 0 54
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59119: LD_ADDR_VAR 0 55
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59159: LD_ADDR_VAR 0 56
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: LIST
59199: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59200: LD_ADDR_VAR 0 57
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 3
59218: NEG
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: LIST
59243: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59244: LD_ADDR_VAR 0 58
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59290: LD_ADDR_VAR 0 59
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59334: LD_ADDR_VAR 0 60
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: LIST
59374: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59375: LD_ADDR_VAR 0 61
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59415: LD_ADDR_VAR 0 62
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: LIST
59455: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59456: LD_ADDR_VAR 0 63
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: LIST
59499: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59500: LD_ADDR_VAR 0 64
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 2
59519: NEG
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: LIST
59545: ST_TO_ADDR
// end ; 2 :
59546: GO 62812
59548: LD_INT 2
59550: DOUBLE
59551: EQUAL
59552: IFTRUE 59556
59554: GO 62811
59556: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59557: LD_ADDR_VAR 0 29
59561: PUSH
59562: LD_INT 4
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 4
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 5
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 5
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 4
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 5
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 3
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 4
59677: PUSH
59678: LD_INT 3
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 4
59687: PUSH
59688: LD_INT 4
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: PUSH
59698: LD_INT 4
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: LD_INT 3
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: LD_INT 5
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 5
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: LD_INT 4
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 3
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 5
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: NEG
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 4
59896: NEG
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 4
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 4
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 4
59942: NEG
59943: PUSH
59944: LD_INT 4
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 4
59954: NEG
59955: PUSH
59956: LD_INT 5
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 3
59966: NEG
59967: PUSH
59968: LD_INT 4
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 4
59990: NEG
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 5
60002: NEG
60003: PUSH
60004: LD_INT 4
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 5
60014: NEG
60015: PUSH
60016: LD_INT 5
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 3
60026: NEG
60027: PUSH
60028: LD_INT 5
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 5
60038: NEG
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60095: LD_ADDR_VAR 0 30
60099: PUSH
60100: LD_INT 4
60102: PUSH
60103: LD_INT 4
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 4
60112: PUSH
60113: LD_INT 3
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 5
60122: PUSH
60123: LD_INT 4
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 5
60132: PUSH
60133: LD_INT 5
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 4
60142: PUSH
60143: LD_INT 5
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 3
60152: PUSH
60153: LD_INT 4
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 3
60162: PUSH
60163: LD_INT 3
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 5
60172: PUSH
60173: LD_INT 3
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: LD_INT 5
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: LD_INT 2
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 3
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 4
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 4
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: LD_INT 4
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 4
60285: NEG
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 4
60296: NEG
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 3
60308: NEG
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 4
60330: NEG
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 5
60341: NEG
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 5
60352: NEG
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 5
60364: NEG
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: NEG
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: LD_INT 3
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: LD_INT 3
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 3
60435: NEG
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 4
60447: NEG
60448: PUSH
60449: LD_INT 3
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 4
60459: NEG
60460: PUSH
60461: LD_INT 4
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: LD_INT 4
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 4
60483: NEG
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 4
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 5
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 4
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 3
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: LD_INT 4
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 5
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: LD_INT 5
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60642: LD_ADDR_VAR 0 31
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: LD_INT 4
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 3
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 4
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: LD_INT 5
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 5
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 4
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: LD_INT 5
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 2
60731: NEG
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 3
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 4
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 4
60821: NEG
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 4
60844: NEG
60845: PUSH
60846: LD_INT 4
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 4
60856: NEG
60857: PUSH
60858: LD_INT 5
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: NEG
60869: PUSH
60870: LD_INT 4
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 3
60880: NEG
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 4
60892: NEG
60893: PUSH
60894: LD_INT 3
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 5
60904: NEG
60905: PUSH
60906: LD_INT 4
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 5
60916: NEG
60917: PUSH
60918: LD_INT 5
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: NEG
60929: PUSH
60930: LD_INT 5
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 5
60940: NEG
60941: PUSH
60942: LD_INT 3
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 3
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 4
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 2
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: LD_INT 3
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: LD_INT 4
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: LD_INT 4
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 4
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 4
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 5
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 5
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 4
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 3
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 3
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: LD_INT 2
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 5
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61192: LD_ADDR_VAR 0 32
61196: PUSH
61197: LD_INT 4
61199: NEG
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 4
61210: NEG
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 4
61244: NEG
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 5
61255: NEG
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 5
61266: NEG
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 5
61278: NEG
61279: PUSH
61280: LD_INT 2
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: NEG
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: LD_INT 3
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: LD_INT 4
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 3
61349: NEG
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 4
61361: NEG
61362: PUSH
61363: LD_INT 3
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 4
61373: NEG
61374: PUSH
61375: LD_INT 4
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: NEG
61386: PUSH
61387: LD_INT 4
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 4
61397: NEG
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 4
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 5
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 4
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: LD_INT 3
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 3
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 4
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 5
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: LD_INT 3
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 2
61499: NEG
61500: PUSH
61501: LD_INT 5
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 4
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 4
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 3
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 4
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 4
61604: PUSH
61605: LD_INT 4
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 4
61614: PUSH
61615: LD_INT 3
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 5
61624: PUSH
61625: LD_INT 4
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 5
61634: PUSH
61635: LD_INT 5
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 4
61644: PUSH
61645: LD_INT 5
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 3
61654: PUSH
61655: LD_INT 4
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 5
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: LD_INT 5
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61739: LD_ADDR_VAR 0 33
61743: PUSH
61744: LD_INT 4
61746: NEG
61747: PUSH
61748: LD_INT 4
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 4
61758: NEG
61759: PUSH
61760: LD_INT 5
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 3
61770: NEG
61771: PUSH
61772: LD_INT 4
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 3
61782: NEG
61783: PUSH
61784: LD_INT 3
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 4
61794: NEG
61795: PUSH
61796: LD_INT 3
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 5
61806: NEG
61807: PUSH
61808: LD_INT 4
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 5
61818: NEG
61819: PUSH
61820: LD_INT 5
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 3
61830: NEG
61831: PUSH
61832: LD_INT 5
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 5
61842: NEG
61843: PUSH
61844: LD_INT 3
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 3
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: LD_INT 4
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: LD_INT 3
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: LD_INT 2
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 2
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 3
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: LD_INT 4
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: LD_INT 2
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: LD_INT 4
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 4
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 4
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 5
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 5
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 4
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 3
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: LD_INT 2
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 5
62039: PUSH
62040: LD_INT 2
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: PUSH
62050: LD_INT 3
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 4
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 4
62079: PUSH
62080: LD_INT 4
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: LD_INT 4
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: LD_INT 3
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: LD_INT 4
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 4
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: LD_INT 3
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: LD_INT 4
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: PUSH
62170: LD_INT 5
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 5
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: LD_INT 4
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: LD_INT 5
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: LD_INT 3
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62277: LD_ADDR_VAR 0 34
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 4
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: LD_INT 5
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: LD_INT 4
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: LD_INT 3
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 3
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 4
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: LD_INT 5
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: LD_INT 3
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: NEG
62375: PUSH
62376: LD_INT 5
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 3
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 3
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 4
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 4
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 3
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: LD_INT 2
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 4
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 4
62479: PUSH
62480: LD_INT 4
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 4
62489: PUSH
62490: LD_INT 3
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 5
62499: PUSH
62500: LD_INT 4
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 5
62509: PUSH
62510: LD_INT 5
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 4
62519: PUSH
62520: LD_INT 5
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 3
62529: PUSH
62530: LD_INT 4
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: LD_INT 3
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 5
62549: PUSH
62550: LD_INT 3
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: LD_INT 5
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 3
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 3
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 4
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 4
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: LD_INT 4
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: LD_INT 2
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 4
62662: NEG
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 4
62673: NEG
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 3
62685: NEG
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 3
62696: NEG
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 4
62707: NEG
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 5
62718: NEG
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 5
62729: NEG
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 5
62741: NEG
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 3
62753: NEG
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: ST_TO_ADDR
// end ; end ;
62809: GO 62812
62811: POP
// case btype of b_depot , b_warehouse :
62812: LD_VAR 0 1
62816: PUSH
62817: LD_INT 0
62819: DOUBLE
62820: EQUAL
62821: IFTRUE 62831
62823: LD_INT 1
62825: DOUBLE
62826: EQUAL
62827: IFTRUE 62831
62829: GO 63032
62831: POP
// case nation of nation_american :
62832: LD_VAR 0 5
62836: PUSH
62837: LD_INT 1
62839: DOUBLE
62840: EQUAL
62841: IFTRUE 62845
62843: GO 62901
62845: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62846: LD_ADDR_VAR 0 9
62850: PUSH
62851: LD_VAR 0 11
62855: PUSH
62856: LD_VAR 0 12
62860: PUSH
62861: LD_VAR 0 13
62865: PUSH
62866: LD_VAR 0 14
62870: PUSH
62871: LD_VAR 0 15
62875: PUSH
62876: LD_VAR 0 16
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: PUSH
62889: LD_VAR 0 4
62893: PUSH
62894: LD_INT 1
62896: PLUS
62897: ARRAY
62898: ST_TO_ADDR
62899: GO 63030
62901: LD_INT 2
62903: DOUBLE
62904: EQUAL
62905: IFTRUE 62909
62907: GO 62965
62909: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62910: LD_ADDR_VAR 0 9
62914: PUSH
62915: LD_VAR 0 17
62919: PUSH
62920: LD_VAR 0 18
62924: PUSH
62925: LD_VAR 0 19
62929: PUSH
62930: LD_VAR 0 20
62934: PUSH
62935: LD_VAR 0 21
62939: PUSH
62940: LD_VAR 0 22
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: PUSH
62953: LD_VAR 0 4
62957: PUSH
62958: LD_INT 1
62960: PLUS
62961: ARRAY
62962: ST_TO_ADDR
62963: GO 63030
62965: LD_INT 3
62967: DOUBLE
62968: EQUAL
62969: IFTRUE 62973
62971: GO 63029
62973: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62974: LD_ADDR_VAR 0 9
62978: PUSH
62979: LD_VAR 0 23
62983: PUSH
62984: LD_VAR 0 24
62988: PUSH
62989: LD_VAR 0 25
62993: PUSH
62994: LD_VAR 0 26
62998: PUSH
62999: LD_VAR 0 27
63003: PUSH
63004: LD_VAR 0 28
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: PUSH
63017: LD_VAR 0 4
63021: PUSH
63022: LD_INT 1
63024: PLUS
63025: ARRAY
63026: ST_TO_ADDR
63027: GO 63030
63029: POP
63030: GO 63585
63032: LD_INT 2
63034: DOUBLE
63035: EQUAL
63036: IFTRUE 63046
63038: LD_INT 3
63040: DOUBLE
63041: EQUAL
63042: IFTRUE 63046
63044: GO 63102
63046: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63047: LD_ADDR_VAR 0 9
63051: PUSH
63052: LD_VAR 0 29
63056: PUSH
63057: LD_VAR 0 30
63061: PUSH
63062: LD_VAR 0 31
63066: PUSH
63067: LD_VAR 0 32
63071: PUSH
63072: LD_VAR 0 33
63076: PUSH
63077: LD_VAR 0 34
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: PUSH
63090: LD_VAR 0 4
63094: PUSH
63095: LD_INT 1
63097: PLUS
63098: ARRAY
63099: ST_TO_ADDR
63100: GO 63585
63102: LD_INT 16
63104: DOUBLE
63105: EQUAL
63106: IFTRUE 63164
63108: LD_INT 17
63110: DOUBLE
63111: EQUAL
63112: IFTRUE 63164
63114: LD_INT 18
63116: DOUBLE
63117: EQUAL
63118: IFTRUE 63164
63120: LD_INT 19
63122: DOUBLE
63123: EQUAL
63124: IFTRUE 63164
63126: LD_INT 22
63128: DOUBLE
63129: EQUAL
63130: IFTRUE 63164
63132: LD_INT 20
63134: DOUBLE
63135: EQUAL
63136: IFTRUE 63164
63138: LD_INT 21
63140: DOUBLE
63141: EQUAL
63142: IFTRUE 63164
63144: LD_INT 23
63146: DOUBLE
63147: EQUAL
63148: IFTRUE 63164
63150: LD_INT 24
63152: DOUBLE
63153: EQUAL
63154: IFTRUE 63164
63156: LD_INT 25
63158: DOUBLE
63159: EQUAL
63160: IFTRUE 63164
63162: GO 63220
63164: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63165: LD_ADDR_VAR 0 9
63169: PUSH
63170: LD_VAR 0 35
63174: PUSH
63175: LD_VAR 0 36
63179: PUSH
63180: LD_VAR 0 37
63184: PUSH
63185: LD_VAR 0 38
63189: PUSH
63190: LD_VAR 0 39
63194: PUSH
63195: LD_VAR 0 40
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: PUSH
63208: LD_VAR 0 4
63212: PUSH
63213: LD_INT 1
63215: PLUS
63216: ARRAY
63217: ST_TO_ADDR
63218: GO 63585
63220: LD_INT 6
63222: DOUBLE
63223: EQUAL
63224: IFTRUE 63276
63226: LD_INT 7
63228: DOUBLE
63229: EQUAL
63230: IFTRUE 63276
63232: LD_INT 8
63234: DOUBLE
63235: EQUAL
63236: IFTRUE 63276
63238: LD_INT 13
63240: DOUBLE
63241: EQUAL
63242: IFTRUE 63276
63244: LD_INT 12
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63276
63250: LD_INT 15
63252: DOUBLE
63253: EQUAL
63254: IFTRUE 63276
63256: LD_INT 11
63258: DOUBLE
63259: EQUAL
63260: IFTRUE 63276
63262: LD_INT 14
63264: DOUBLE
63265: EQUAL
63266: IFTRUE 63276
63268: LD_INT 10
63270: DOUBLE
63271: EQUAL
63272: IFTRUE 63276
63274: GO 63332
63276: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63277: LD_ADDR_VAR 0 9
63281: PUSH
63282: LD_VAR 0 41
63286: PUSH
63287: LD_VAR 0 42
63291: PUSH
63292: LD_VAR 0 43
63296: PUSH
63297: LD_VAR 0 44
63301: PUSH
63302: LD_VAR 0 45
63306: PUSH
63307: LD_VAR 0 46
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: PUSH
63320: LD_VAR 0 4
63324: PUSH
63325: LD_INT 1
63327: PLUS
63328: ARRAY
63329: ST_TO_ADDR
63330: GO 63585
63332: LD_INT 36
63334: DOUBLE
63335: EQUAL
63336: IFTRUE 63340
63338: GO 63396
63340: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63341: LD_ADDR_VAR 0 9
63345: PUSH
63346: LD_VAR 0 47
63350: PUSH
63351: LD_VAR 0 48
63355: PUSH
63356: LD_VAR 0 49
63360: PUSH
63361: LD_VAR 0 50
63365: PUSH
63366: LD_VAR 0 51
63370: PUSH
63371: LD_VAR 0 52
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: PUSH
63384: LD_VAR 0 4
63388: PUSH
63389: LD_INT 1
63391: PLUS
63392: ARRAY
63393: ST_TO_ADDR
63394: GO 63585
63396: LD_INT 4
63398: DOUBLE
63399: EQUAL
63400: IFTRUE 63422
63402: LD_INT 5
63404: DOUBLE
63405: EQUAL
63406: IFTRUE 63422
63408: LD_INT 34
63410: DOUBLE
63411: EQUAL
63412: IFTRUE 63422
63414: LD_INT 37
63416: DOUBLE
63417: EQUAL
63418: IFTRUE 63422
63420: GO 63478
63422: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63423: LD_ADDR_VAR 0 9
63427: PUSH
63428: LD_VAR 0 53
63432: PUSH
63433: LD_VAR 0 54
63437: PUSH
63438: LD_VAR 0 55
63442: PUSH
63443: LD_VAR 0 56
63447: PUSH
63448: LD_VAR 0 57
63452: PUSH
63453: LD_VAR 0 58
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: PUSH
63466: LD_VAR 0 4
63470: PUSH
63471: LD_INT 1
63473: PLUS
63474: ARRAY
63475: ST_TO_ADDR
63476: GO 63585
63478: LD_INT 31
63480: DOUBLE
63481: EQUAL
63482: IFTRUE 63528
63484: LD_INT 32
63486: DOUBLE
63487: EQUAL
63488: IFTRUE 63528
63490: LD_INT 33
63492: DOUBLE
63493: EQUAL
63494: IFTRUE 63528
63496: LD_INT 27
63498: DOUBLE
63499: EQUAL
63500: IFTRUE 63528
63502: LD_INT 26
63504: DOUBLE
63505: EQUAL
63506: IFTRUE 63528
63508: LD_INT 28
63510: DOUBLE
63511: EQUAL
63512: IFTRUE 63528
63514: LD_INT 29
63516: DOUBLE
63517: EQUAL
63518: IFTRUE 63528
63520: LD_INT 30
63522: DOUBLE
63523: EQUAL
63524: IFTRUE 63528
63526: GO 63584
63528: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63529: LD_ADDR_VAR 0 9
63533: PUSH
63534: LD_VAR 0 59
63538: PUSH
63539: LD_VAR 0 60
63543: PUSH
63544: LD_VAR 0 61
63548: PUSH
63549: LD_VAR 0 62
63553: PUSH
63554: LD_VAR 0 63
63558: PUSH
63559: LD_VAR 0 64
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: PUSH
63572: LD_VAR 0 4
63576: PUSH
63577: LD_INT 1
63579: PLUS
63580: ARRAY
63581: ST_TO_ADDR
63582: GO 63585
63584: POP
// temp_list2 = [ ] ;
63585: LD_ADDR_VAR 0 10
63589: PUSH
63590: EMPTY
63591: ST_TO_ADDR
// for i in temp_list do
63592: LD_ADDR_VAR 0 8
63596: PUSH
63597: LD_VAR 0 9
63601: PUSH
63602: FOR_IN
63603: IFFALSE 63655
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63605: LD_ADDR_VAR 0 10
63609: PUSH
63610: LD_VAR 0 10
63614: PUSH
63615: LD_VAR 0 8
63619: PUSH
63620: LD_INT 1
63622: ARRAY
63623: PUSH
63624: LD_VAR 0 2
63628: PLUS
63629: PUSH
63630: LD_VAR 0 8
63634: PUSH
63635: LD_INT 2
63637: ARRAY
63638: PUSH
63639: LD_VAR 0 3
63643: PLUS
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: EMPTY
63650: LIST
63651: ADD
63652: ST_TO_ADDR
63653: GO 63602
63655: POP
63656: POP
// result = temp_list2 ;
63657: LD_ADDR_VAR 0 7
63661: PUSH
63662: LD_VAR 0 10
63666: ST_TO_ADDR
// end ;
63667: LD_VAR 0 7
63671: RET
// export function EnemyInRange ( unit , dist ) ; begin
63672: LD_INT 0
63674: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63675: LD_ADDR_VAR 0 3
63679: PUSH
63680: LD_VAR 0 1
63684: PPUSH
63685: CALL_OW 255
63689: PPUSH
63690: LD_VAR 0 1
63694: PPUSH
63695: CALL_OW 250
63699: PPUSH
63700: LD_VAR 0 1
63704: PPUSH
63705: CALL_OW 251
63709: PPUSH
63710: LD_VAR 0 2
63714: PPUSH
63715: CALL 37074 0 4
63719: PUSH
63720: LD_INT 4
63722: ARRAY
63723: ST_TO_ADDR
// end ;
63724: LD_VAR 0 3
63728: RET
// export function PlayerSeeMe ( unit ) ; begin
63729: LD_INT 0
63731: PPUSH
// result := See ( your_side , unit ) ;
63732: LD_ADDR_VAR 0 2
63736: PUSH
63737: LD_OWVAR 2
63741: PPUSH
63742: LD_VAR 0 1
63746: PPUSH
63747: CALL_OW 292
63751: ST_TO_ADDR
// end ;
63752: LD_VAR 0 2
63756: RET
// export function ReverseDir ( unit ) ; begin
63757: LD_INT 0
63759: PPUSH
// if not unit then
63760: LD_VAR 0 1
63764: NOT
63765: IFFALSE 63769
// exit ;
63767: GO 63792
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63769: LD_ADDR_VAR 0 2
63773: PUSH
63774: LD_VAR 0 1
63778: PPUSH
63779: CALL_OW 254
63783: PUSH
63784: LD_INT 3
63786: PLUS
63787: PUSH
63788: LD_INT 6
63790: MOD
63791: ST_TO_ADDR
// end ;
63792: LD_VAR 0 2
63796: RET
// export function ReverseArray ( array ) ; var i ; begin
63797: LD_INT 0
63799: PPUSH
63800: PPUSH
// if not array then
63801: LD_VAR 0 1
63805: NOT
63806: IFFALSE 63810
// exit ;
63808: GO 63865
// result := [ ] ;
63810: LD_ADDR_VAR 0 2
63814: PUSH
63815: EMPTY
63816: ST_TO_ADDR
// for i := array downto 1 do
63817: LD_ADDR_VAR 0 3
63821: PUSH
63822: DOUBLE
63823: LD_VAR 0 1
63827: INC
63828: ST_TO_ADDR
63829: LD_INT 1
63831: PUSH
63832: FOR_DOWNTO
63833: IFFALSE 63863
// result := Join ( result , array [ i ] ) ;
63835: LD_ADDR_VAR 0 2
63839: PUSH
63840: LD_VAR 0 2
63844: PPUSH
63845: LD_VAR 0 1
63849: PUSH
63850: LD_VAR 0 3
63854: ARRAY
63855: PPUSH
63856: CALL 68509 0 2
63860: ST_TO_ADDR
63861: GO 63832
63863: POP
63864: POP
// end ;
63865: LD_VAR 0 2
63869: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63870: LD_INT 0
63872: PPUSH
63873: PPUSH
63874: PPUSH
63875: PPUSH
63876: PPUSH
63877: PPUSH
// if not unit or not hexes then
63878: LD_VAR 0 1
63882: NOT
63883: PUSH
63884: LD_VAR 0 2
63888: NOT
63889: OR
63890: IFFALSE 63894
// exit ;
63892: GO 64017
// dist := 9999 ;
63894: LD_ADDR_VAR 0 5
63898: PUSH
63899: LD_INT 9999
63901: ST_TO_ADDR
// for i = 1 to hexes do
63902: LD_ADDR_VAR 0 4
63906: PUSH
63907: DOUBLE
63908: LD_INT 1
63910: DEC
63911: ST_TO_ADDR
63912: LD_VAR 0 2
63916: PUSH
63917: FOR_TO
63918: IFFALSE 64005
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63920: LD_ADDR_VAR 0 6
63924: PUSH
63925: LD_VAR 0 1
63929: PPUSH
63930: LD_VAR 0 2
63934: PUSH
63935: LD_VAR 0 4
63939: ARRAY
63940: PUSH
63941: LD_INT 1
63943: ARRAY
63944: PPUSH
63945: LD_VAR 0 2
63949: PUSH
63950: LD_VAR 0 4
63954: ARRAY
63955: PUSH
63956: LD_INT 2
63958: ARRAY
63959: PPUSH
63960: CALL_OW 297
63964: ST_TO_ADDR
// if tdist < dist then
63965: LD_VAR 0 6
63969: PUSH
63970: LD_VAR 0 5
63974: LESS
63975: IFFALSE 64003
// begin hex := hexes [ i ] ;
63977: LD_ADDR_VAR 0 8
63981: PUSH
63982: LD_VAR 0 2
63986: PUSH
63987: LD_VAR 0 4
63991: ARRAY
63992: ST_TO_ADDR
// dist := tdist ;
63993: LD_ADDR_VAR 0 5
63997: PUSH
63998: LD_VAR 0 6
64002: ST_TO_ADDR
// end ; end ;
64003: GO 63917
64005: POP
64006: POP
// result := hex ;
64007: LD_ADDR_VAR 0 3
64011: PUSH
64012: LD_VAR 0 8
64016: ST_TO_ADDR
// end ;
64017: LD_VAR 0 3
64021: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64022: LD_INT 0
64024: PPUSH
64025: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64026: LD_VAR 0 1
64030: NOT
64031: PUSH
64032: LD_VAR 0 1
64036: PUSH
64037: LD_INT 21
64039: PUSH
64040: LD_INT 2
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 23
64049: PUSH
64050: LD_INT 2
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PPUSH
64061: CALL_OW 69
64065: IN
64066: NOT
64067: OR
64068: IFFALSE 64072
// exit ;
64070: GO 64119
// for i = 1 to 3 do
64072: LD_ADDR_VAR 0 3
64076: PUSH
64077: DOUBLE
64078: LD_INT 1
64080: DEC
64081: ST_TO_ADDR
64082: LD_INT 3
64084: PUSH
64085: FOR_TO
64086: IFFALSE 64117
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64088: LD_VAR 0 1
64092: PPUSH
64093: CALL_OW 250
64097: PPUSH
64098: LD_VAR 0 1
64102: PPUSH
64103: CALL_OW 251
64107: PPUSH
64108: LD_INT 1
64110: PPUSH
64111: CALL_OW 453
64115: GO 64085
64117: POP
64118: POP
// end ;
64119: LD_VAR 0 2
64123: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64124: LD_INT 0
64126: PPUSH
64127: PPUSH
64128: PPUSH
64129: PPUSH
64130: PPUSH
64131: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64132: LD_VAR 0 1
64136: NOT
64137: PUSH
64138: LD_VAR 0 2
64142: NOT
64143: OR
64144: PUSH
64145: LD_VAR 0 1
64149: PPUSH
64150: CALL_OW 314
64154: OR
64155: IFFALSE 64159
// exit ;
64157: GO 64626
// if GetLives ( i ) < 250 then
64159: LD_VAR 0 4
64163: PPUSH
64164: CALL_OW 256
64168: PUSH
64169: LD_INT 250
64171: LESS
64172: IFFALSE 64185
// begin ComAutodestruct ( i ) ;
64174: LD_VAR 0 4
64178: PPUSH
64179: CALL 64022 0 1
// exit ;
64183: GO 64626
// end ; x := GetX ( enemy_unit ) ;
64185: LD_ADDR_VAR 0 7
64189: PUSH
64190: LD_VAR 0 2
64194: PPUSH
64195: CALL_OW 250
64199: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64200: LD_ADDR_VAR 0 8
64204: PUSH
64205: LD_VAR 0 2
64209: PPUSH
64210: CALL_OW 251
64214: ST_TO_ADDR
// if not x or not y then
64215: LD_VAR 0 7
64219: NOT
64220: PUSH
64221: LD_VAR 0 8
64225: NOT
64226: OR
64227: IFFALSE 64231
// exit ;
64229: GO 64626
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64231: LD_ADDR_VAR 0 6
64235: PUSH
64236: LD_VAR 0 7
64240: PPUSH
64241: LD_INT 0
64243: PPUSH
64244: LD_INT 4
64246: PPUSH
64247: CALL_OW 272
64251: PUSH
64252: LD_VAR 0 8
64256: PPUSH
64257: LD_INT 0
64259: PPUSH
64260: LD_INT 4
64262: PPUSH
64263: CALL_OW 273
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_VAR 0 7
64276: PPUSH
64277: LD_INT 1
64279: PPUSH
64280: LD_INT 4
64282: PPUSH
64283: CALL_OW 272
64287: PUSH
64288: LD_VAR 0 8
64292: PPUSH
64293: LD_INT 1
64295: PPUSH
64296: LD_INT 4
64298: PPUSH
64299: CALL_OW 273
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_VAR 0 7
64312: PPUSH
64313: LD_INT 2
64315: PPUSH
64316: LD_INT 4
64318: PPUSH
64319: CALL_OW 272
64323: PUSH
64324: LD_VAR 0 8
64328: PPUSH
64329: LD_INT 2
64331: PPUSH
64332: LD_INT 4
64334: PPUSH
64335: CALL_OW 273
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_VAR 0 7
64348: PPUSH
64349: LD_INT 3
64351: PPUSH
64352: LD_INT 4
64354: PPUSH
64355: CALL_OW 272
64359: PUSH
64360: LD_VAR 0 8
64364: PPUSH
64365: LD_INT 3
64367: PPUSH
64368: LD_INT 4
64370: PPUSH
64371: CALL_OW 273
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_VAR 0 7
64384: PPUSH
64385: LD_INT 4
64387: PPUSH
64388: LD_INT 4
64390: PPUSH
64391: CALL_OW 272
64395: PUSH
64396: LD_VAR 0 8
64400: PPUSH
64401: LD_INT 4
64403: PPUSH
64404: LD_INT 4
64406: PPUSH
64407: CALL_OW 273
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_VAR 0 7
64420: PPUSH
64421: LD_INT 5
64423: PPUSH
64424: LD_INT 4
64426: PPUSH
64427: CALL_OW 272
64431: PUSH
64432: LD_VAR 0 8
64436: PPUSH
64437: LD_INT 5
64439: PPUSH
64440: LD_INT 4
64442: PPUSH
64443: CALL_OW 273
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: ST_TO_ADDR
// for i = tmp downto 1 do
64460: LD_ADDR_VAR 0 4
64464: PUSH
64465: DOUBLE
64466: LD_VAR 0 6
64470: INC
64471: ST_TO_ADDR
64472: LD_INT 1
64474: PUSH
64475: FOR_DOWNTO
64476: IFFALSE 64577
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64478: LD_VAR 0 6
64482: PUSH
64483: LD_VAR 0 4
64487: ARRAY
64488: PUSH
64489: LD_INT 1
64491: ARRAY
64492: PPUSH
64493: LD_VAR 0 6
64497: PUSH
64498: LD_VAR 0 4
64502: ARRAY
64503: PUSH
64504: LD_INT 2
64506: ARRAY
64507: PPUSH
64508: CALL_OW 488
64512: NOT
64513: PUSH
64514: LD_VAR 0 6
64518: PUSH
64519: LD_VAR 0 4
64523: ARRAY
64524: PUSH
64525: LD_INT 1
64527: ARRAY
64528: PPUSH
64529: LD_VAR 0 6
64533: PUSH
64534: LD_VAR 0 4
64538: ARRAY
64539: PUSH
64540: LD_INT 2
64542: ARRAY
64543: PPUSH
64544: CALL_OW 428
64548: PUSH
64549: LD_INT 0
64551: NONEQUAL
64552: OR
64553: IFFALSE 64575
// tmp := Delete ( tmp , i ) ;
64555: LD_ADDR_VAR 0 6
64559: PUSH
64560: LD_VAR 0 6
64564: PPUSH
64565: LD_VAR 0 4
64569: PPUSH
64570: CALL_OW 3
64574: ST_TO_ADDR
64575: GO 64475
64577: POP
64578: POP
// j := GetClosestHex ( unit , tmp ) ;
64579: LD_ADDR_VAR 0 5
64583: PUSH
64584: LD_VAR 0 1
64588: PPUSH
64589: LD_VAR 0 6
64593: PPUSH
64594: CALL 63870 0 2
64598: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64599: LD_VAR 0 1
64603: PPUSH
64604: LD_VAR 0 5
64608: PUSH
64609: LD_INT 1
64611: ARRAY
64612: PPUSH
64613: LD_VAR 0 5
64617: PUSH
64618: LD_INT 2
64620: ARRAY
64621: PPUSH
64622: CALL_OW 111
// end ;
64626: LD_VAR 0 3
64630: RET
// export function PrepareApemanSoldier ( ) ; begin
64631: LD_INT 0
64633: PPUSH
// uc_nation := 0 ;
64634: LD_ADDR_OWVAR 21
64638: PUSH
64639: LD_INT 0
64641: ST_TO_ADDR
// hc_sex := sex_male ;
64642: LD_ADDR_OWVAR 27
64646: PUSH
64647: LD_INT 1
64649: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64650: LD_ADDR_OWVAR 28
64654: PUSH
64655: LD_INT 15
64657: ST_TO_ADDR
// hc_gallery :=  ;
64658: LD_ADDR_OWVAR 33
64662: PUSH
64663: LD_STRING 
64665: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64666: LD_ADDR_OWVAR 31
64670: PUSH
64671: LD_INT 0
64673: PPUSH
64674: LD_INT 3
64676: PPUSH
64677: CALL_OW 12
64681: PUSH
64682: LD_INT 0
64684: PPUSH
64685: LD_INT 3
64687: PPUSH
64688: CALL_OW 12
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: ST_TO_ADDR
// end ;
64705: LD_VAR 0 1
64709: RET
// export function PrepareApemanEngineer ( ) ; begin
64710: LD_INT 0
64712: PPUSH
// uc_nation := 0 ;
64713: LD_ADDR_OWVAR 21
64717: PUSH
64718: LD_INT 0
64720: ST_TO_ADDR
// hc_sex := sex_male ;
64721: LD_ADDR_OWVAR 27
64725: PUSH
64726: LD_INT 1
64728: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64729: LD_ADDR_OWVAR 28
64733: PUSH
64734: LD_INT 16
64736: ST_TO_ADDR
// hc_gallery :=  ;
64737: LD_ADDR_OWVAR 33
64741: PUSH
64742: LD_STRING 
64744: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64745: LD_ADDR_OWVAR 31
64749: PUSH
64750: LD_INT 0
64752: PPUSH
64753: LD_INT 3
64755: PPUSH
64756: CALL_OW 12
64760: PUSH
64761: LD_INT 0
64763: PPUSH
64764: LD_INT 3
64766: PPUSH
64767: CALL_OW 12
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: ST_TO_ADDR
// end ;
64784: LD_VAR 0 1
64788: RET
// export function PrepareApeman ( agressivity ) ; begin
64789: LD_INT 0
64791: PPUSH
// uc_side := 0 ;
64792: LD_ADDR_OWVAR 20
64796: PUSH
64797: LD_INT 0
64799: ST_TO_ADDR
// uc_nation := 0 ;
64800: LD_ADDR_OWVAR 21
64804: PUSH
64805: LD_INT 0
64807: ST_TO_ADDR
// hc_sex := sex_male ;
64808: LD_ADDR_OWVAR 27
64812: PUSH
64813: LD_INT 1
64815: ST_TO_ADDR
// hc_class := class_apeman ;
64816: LD_ADDR_OWVAR 28
64820: PUSH
64821: LD_INT 12
64823: ST_TO_ADDR
// hc_gallery :=  ;
64824: LD_ADDR_OWVAR 33
64828: PUSH
64829: LD_STRING 
64831: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64832: LD_ADDR_OWVAR 35
64836: PUSH
64837: LD_VAR 0 1
64841: NEG
64842: PPUSH
64843: LD_VAR 0 1
64847: PPUSH
64848: CALL_OW 12
64852: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64853: LD_ADDR_OWVAR 31
64857: PUSH
64858: LD_INT 0
64860: PPUSH
64861: LD_INT 3
64863: PPUSH
64864: CALL_OW 12
64868: PUSH
64869: LD_INT 0
64871: PPUSH
64872: LD_INT 3
64874: PPUSH
64875: CALL_OW 12
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: ST_TO_ADDR
// end ;
64892: LD_VAR 0 2
64896: RET
// export function PrepareTiger ( agressivity ) ; begin
64897: LD_INT 0
64899: PPUSH
// uc_side := 0 ;
64900: LD_ADDR_OWVAR 20
64904: PUSH
64905: LD_INT 0
64907: ST_TO_ADDR
// uc_nation := 0 ;
64908: LD_ADDR_OWVAR 21
64912: PUSH
64913: LD_INT 0
64915: ST_TO_ADDR
// hc_class := class_tiger ;
64916: LD_ADDR_OWVAR 28
64920: PUSH
64921: LD_INT 14
64923: ST_TO_ADDR
// hc_gallery :=  ;
64924: LD_ADDR_OWVAR 33
64928: PUSH
64929: LD_STRING 
64931: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64932: LD_ADDR_OWVAR 35
64936: PUSH
64937: LD_VAR 0 1
64941: NEG
64942: PPUSH
64943: LD_VAR 0 1
64947: PPUSH
64948: CALL_OW 12
64952: ST_TO_ADDR
// end ;
64953: LD_VAR 0 2
64957: RET
// export function PrepareEnchidna ( ) ; begin
64958: LD_INT 0
64960: PPUSH
// uc_side := 0 ;
64961: LD_ADDR_OWVAR 20
64965: PUSH
64966: LD_INT 0
64968: ST_TO_ADDR
// uc_nation := 0 ;
64969: LD_ADDR_OWVAR 21
64973: PUSH
64974: LD_INT 0
64976: ST_TO_ADDR
// hc_class := class_baggie ;
64977: LD_ADDR_OWVAR 28
64981: PUSH
64982: LD_INT 13
64984: ST_TO_ADDR
// hc_gallery :=  ;
64985: LD_ADDR_OWVAR 33
64989: PUSH
64990: LD_STRING 
64992: ST_TO_ADDR
// end ;
64993: LD_VAR 0 1
64997: RET
// export function PrepareFrog ( ) ; begin
64998: LD_INT 0
65000: PPUSH
// uc_side := 0 ;
65001: LD_ADDR_OWVAR 20
65005: PUSH
65006: LD_INT 0
65008: ST_TO_ADDR
// uc_nation := 0 ;
65009: LD_ADDR_OWVAR 21
65013: PUSH
65014: LD_INT 0
65016: ST_TO_ADDR
// hc_class := class_frog ;
65017: LD_ADDR_OWVAR 28
65021: PUSH
65022: LD_INT 19
65024: ST_TO_ADDR
// hc_gallery :=  ;
65025: LD_ADDR_OWVAR 33
65029: PUSH
65030: LD_STRING 
65032: ST_TO_ADDR
// end ;
65033: LD_VAR 0 1
65037: RET
// export function PrepareFish ( ) ; begin
65038: LD_INT 0
65040: PPUSH
// uc_side := 0 ;
65041: LD_ADDR_OWVAR 20
65045: PUSH
65046: LD_INT 0
65048: ST_TO_ADDR
// uc_nation := 0 ;
65049: LD_ADDR_OWVAR 21
65053: PUSH
65054: LD_INT 0
65056: ST_TO_ADDR
// hc_class := class_fish ;
65057: LD_ADDR_OWVAR 28
65061: PUSH
65062: LD_INT 20
65064: ST_TO_ADDR
// hc_gallery :=  ;
65065: LD_ADDR_OWVAR 33
65069: PUSH
65070: LD_STRING 
65072: ST_TO_ADDR
// end ;
65073: LD_VAR 0 1
65077: RET
// export function PrepareBird ( ) ; begin
65078: LD_INT 0
65080: PPUSH
// uc_side := 0 ;
65081: LD_ADDR_OWVAR 20
65085: PUSH
65086: LD_INT 0
65088: ST_TO_ADDR
// uc_nation := 0 ;
65089: LD_ADDR_OWVAR 21
65093: PUSH
65094: LD_INT 0
65096: ST_TO_ADDR
// hc_class := class_phororhacos ;
65097: LD_ADDR_OWVAR 28
65101: PUSH
65102: LD_INT 18
65104: ST_TO_ADDR
// hc_gallery :=  ;
65105: LD_ADDR_OWVAR 33
65109: PUSH
65110: LD_STRING 
65112: ST_TO_ADDR
// end ;
65113: LD_VAR 0 1
65117: RET
// export function PrepareHorse ( ) ; begin
65118: LD_INT 0
65120: PPUSH
// uc_side := 0 ;
65121: LD_ADDR_OWVAR 20
65125: PUSH
65126: LD_INT 0
65128: ST_TO_ADDR
// uc_nation := 0 ;
65129: LD_ADDR_OWVAR 21
65133: PUSH
65134: LD_INT 0
65136: ST_TO_ADDR
// hc_class := class_horse ;
65137: LD_ADDR_OWVAR 28
65141: PUSH
65142: LD_INT 21
65144: ST_TO_ADDR
// hc_gallery :=  ;
65145: LD_ADDR_OWVAR 33
65149: PUSH
65150: LD_STRING 
65152: ST_TO_ADDR
// end ;
65153: LD_VAR 0 1
65157: RET
// export function PrepareMastodont ( ) ; begin
65158: LD_INT 0
65160: PPUSH
// uc_side := 0 ;
65161: LD_ADDR_OWVAR 20
65165: PUSH
65166: LD_INT 0
65168: ST_TO_ADDR
// uc_nation := 0 ;
65169: LD_ADDR_OWVAR 21
65173: PUSH
65174: LD_INT 0
65176: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65177: LD_ADDR_OWVAR 37
65181: PUSH
65182: LD_INT 31
65184: ST_TO_ADDR
// vc_control := control_rider ;
65185: LD_ADDR_OWVAR 38
65189: PUSH
65190: LD_INT 4
65192: ST_TO_ADDR
// end ;
65193: LD_VAR 0 1
65197: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65198: LD_INT 0
65200: PPUSH
65201: PPUSH
65202: PPUSH
// uc_side = 0 ;
65203: LD_ADDR_OWVAR 20
65207: PUSH
65208: LD_INT 0
65210: ST_TO_ADDR
// uc_nation = 0 ;
65211: LD_ADDR_OWVAR 21
65215: PUSH
65216: LD_INT 0
65218: ST_TO_ADDR
// InitHc_All ( ) ;
65219: CALL_OW 584
// InitVc ;
65223: CALL_OW 20
// if mastodonts then
65227: LD_VAR 0 6
65231: IFFALSE 65298
// for i = 1 to mastodonts do
65233: LD_ADDR_VAR 0 11
65237: PUSH
65238: DOUBLE
65239: LD_INT 1
65241: DEC
65242: ST_TO_ADDR
65243: LD_VAR 0 6
65247: PUSH
65248: FOR_TO
65249: IFFALSE 65296
// begin vc_chassis := 31 ;
65251: LD_ADDR_OWVAR 37
65255: PUSH
65256: LD_INT 31
65258: ST_TO_ADDR
// vc_control := control_rider ;
65259: LD_ADDR_OWVAR 38
65263: PUSH
65264: LD_INT 4
65266: ST_TO_ADDR
// animal := CreateVehicle ;
65267: LD_ADDR_VAR 0 12
65271: PUSH
65272: CALL_OW 45
65276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65277: LD_VAR 0 12
65281: PPUSH
65282: LD_VAR 0 8
65286: PPUSH
65287: LD_INT 0
65289: PPUSH
65290: CALL 67426 0 3
// end ;
65294: GO 65248
65296: POP
65297: POP
// if horses then
65298: LD_VAR 0 5
65302: IFFALSE 65369
// for i = 1 to horses do
65304: LD_ADDR_VAR 0 11
65308: PUSH
65309: DOUBLE
65310: LD_INT 1
65312: DEC
65313: ST_TO_ADDR
65314: LD_VAR 0 5
65318: PUSH
65319: FOR_TO
65320: IFFALSE 65367
// begin hc_class := 21 ;
65322: LD_ADDR_OWVAR 28
65326: PUSH
65327: LD_INT 21
65329: ST_TO_ADDR
// hc_gallery :=  ;
65330: LD_ADDR_OWVAR 33
65334: PUSH
65335: LD_STRING 
65337: ST_TO_ADDR
// animal := CreateHuman ;
65338: LD_ADDR_VAR 0 12
65342: PUSH
65343: CALL_OW 44
65347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65348: LD_VAR 0 12
65352: PPUSH
65353: LD_VAR 0 8
65357: PPUSH
65358: LD_INT 0
65360: PPUSH
65361: CALL 67426 0 3
// end ;
65365: GO 65319
65367: POP
65368: POP
// if birds then
65369: LD_VAR 0 1
65373: IFFALSE 65440
// for i = 1 to birds do
65375: LD_ADDR_VAR 0 11
65379: PUSH
65380: DOUBLE
65381: LD_INT 1
65383: DEC
65384: ST_TO_ADDR
65385: LD_VAR 0 1
65389: PUSH
65390: FOR_TO
65391: IFFALSE 65438
// begin hc_class = 18 ;
65393: LD_ADDR_OWVAR 28
65397: PUSH
65398: LD_INT 18
65400: ST_TO_ADDR
// hc_gallery =  ;
65401: LD_ADDR_OWVAR 33
65405: PUSH
65406: LD_STRING 
65408: ST_TO_ADDR
// animal := CreateHuman ;
65409: LD_ADDR_VAR 0 12
65413: PUSH
65414: CALL_OW 44
65418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65419: LD_VAR 0 12
65423: PPUSH
65424: LD_VAR 0 8
65428: PPUSH
65429: LD_INT 0
65431: PPUSH
65432: CALL 67426 0 3
// end ;
65436: GO 65390
65438: POP
65439: POP
// if tigers then
65440: LD_VAR 0 2
65444: IFFALSE 65528
// for i = 1 to tigers do
65446: LD_ADDR_VAR 0 11
65450: PUSH
65451: DOUBLE
65452: LD_INT 1
65454: DEC
65455: ST_TO_ADDR
65456: LD_VAR 0 2
65460: PUSH
65461: FOR_TO
65462: IFFALSE 65526
// begin hc_class = class_tiger ;
65464: LD_ADDR_OWVAR 28
65468: PUSH
65469: LD_INT 14
65471: ST_TO_ADDR
// hc_gallery =  ;
65472: LD_ADDR_OWVAR 33
65476: PUSH
65477: LD_STRING 
65479: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65480: LD_ADDR_OWVAR 35
65484: PUSH
65485: LD_INT 7
65487: NEG
65488: PPUSH
65489: LD_INT 7
65491: PPUSH
65492: CALL_OW 12
65496: ST_TO_ADDR
// animal := CreateHuman ;
65497: LD_ADDR_VAR 0 12
65501: PUSH
65502: CALL_OW 44
65506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65507: LD_VAR 0 12
65511: PPUSH
65512: LD_VAR 0 8
65516: PPUSH
65517: LD_INT 0
65519: PPUSH
65520: CALL 67426 0 3
// end ;
65524: GO 65461
65526: POP
65527: POP
// if apemans then
65528: LD_VAR 0 3
65532: IFFALSE 65655
// for i = 1 to apemans do
65534: LD_ADDR_VAR 0 11
65538: PUSH
65539: DOUBLE
65540: LD_INT 1
65542: DEC
65543: ST_TO_ADDR
65544: LD_VAR 0 3
65548: PUSH
65549: FOR_TO
65550: IFFALSE 65653
// begin hc_class = class_apeman ;
65552: LD_ADDR_OWVAR 28
65556: PUSH
65557: LD_INT 12
65559: ST_TO_ADDR
// hc_gallery =  ;
65560: LD_ADDR_OWVAR 33
65564: PUSH
65565: LD_STRING 
65567: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65568: LD_ADDR_OWVAR 35
65572: PUSH
65573: LD_INT 2
65575: NEG
65576: PPUSH
65577: LD_INT 2
65579: PPUSH
65580: CALL_OW 12
65584: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65585: LD_ADDR_OWVAR 31
65589: PUSH
65590: LD_INT 1
65592: PPUSH
65593: LD_INT 3
65595: PPUSH
65596: CALL_OW 12
65600: PUSH
65601: LD_INT 1
65603: PPUSH
65604: LD_INT 3
65606: PPUSH
65607: CALL_OW 12
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: ST_TO_ADDR
// animal := CreateHuman ;
65624: LD_ADDR_VAR 0 12
65628: PUSH
65629: CALL_OW 44
65633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65634: LD_VAR 0 12
65638: PPUSH
65639: LD_VAR 0 8
65643: PPUSH
65644: LD_INT 0
65646: PPUSH
65647: CALL 67426 0 3
// end ;
65651: GO 65549
65653: POP
65654: POP
// if enchidnas then
65655: LD_VAR 0 4
65659: IFFALSE 65726
// for i = 1 to enchidnas do
65661: LD_ADDR_VAR 0 11
65665: PUSH
65666: DOUBLE
65667: LD_INT 1
65669: DEC
65670: ST_TO_ADDR
65671: LD_VAR 0 4
65675: PUSH
65676: FOR_TO
65677: IFFALSE 65724
// begin hc_class = 13 ;
65679: LD_ADDR_OWVAR 28
65683: PUSH
65684: LD_INT 13
65686: ST_TO_ADDR
// hc_gallery =  ;
65687: LD_ADDR_OWVAR 33
65691: PUSH
65692: LD_STRING 
65694: ST_TO_ADDR
// animal := CreateHuman ;
65695: LD_ADDR_VAR 0 12
65699: PUSH
65700: CALL_OW 44
65704: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65705: LD_VAR 0 12
65709: PPUSH
65710: LD_VAR 0 8
65714: PPUSH
65715: LD_INT 0
65717: PPUSH
65718: CALL 67426 0 3
// end ;
65722: GO 65676
65724: POP
65725: POP
// if fishes then
65726: LD_VAR 0 7
65730: IFFALSE 65797
// for i = 1 to fishes do
65732: LD_ADDR_VAR 0 11
65736: PUSH
65737: DOUBLE
65738: LD_INT 1
65740: DEC
65741: ST_TO_ADDR
65742: LD_VAR 0 7
65746: PUSH
65747: FOR_TO
65748: IFFALSE 65795
// begin hc_class = 20 ;
65750: LD_ADDR_OWVAR 28
65754: PUSH
65755: LD_INT 20
65757: ST_TO_ADDR
// hc_gallery =  ;
65758: LD_ADDR_OWVAR 33
65762: PUSH
65763: LD_STRING 
65765: ST_TO_ADDR
// animal := CreateHuman ;
65766: LD_ADDR_VAR 0 12
65770: PUSH
65771: CALL_OW 44
65775: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65776: LD_VAR 0 12
65780: PPUSH
65781: LD_VAR 0 9
65785: PPUSH
65786: LD_INT 0
65788: PPUSH
65789: CALL 67426 0 3
// end ;
65793: GO 65747
65795: POP
65796: POP
// end ;
65797: LD_VAR 0 10
65801: RET
// export function WantHeal ( sci , unit ) ; begin
65802: LD_INT 0
65804: PPUSH
// if GetTaskList ( sci ) > 0 then
65805: LD_VAR 0 1
65809: PPUSH
65810: CALL_OW 437
65814: PUSH
65815: LD_INT 0
65817: GREATER
65818: IFFALSE 65888
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65820: LD_VAR 0 1
65824: PPUSH
65825: CALL_OW 437
65829: PUSH
65830: LD_INT 1
65832: ARRAY
65833: PUSH
65834: LD_INT 1
65836: ARRAY
65837: PUSH
65838: LD_STRING l
65840: EQUAL
65841: PUSH
65842: LD_VAR 0 1
65846: PPUSH
65847: CALL_OW 437
65851: PUSH
65852: LD_INT 1
65854: ARRAY
65855: PUSH
65856: LD_INT 4
65858: ARRAY
65859: PUSH
65860: LD_VAR 0 2
65864: EQUAL
65865: AND
65866: IFFALSE 65878
// result := true else
65868: LD_ADDR_VAR 0 3
65872: PUSH
65873: LD_INT 1
65875: ST_TO_ADDR
65876: GO 65886
// result := false ;
65878: LD_ADDR_VAR 0 3
65882: PUSH
65883: LD_INT 0
65885: ST_TO_ADDR
// end else
65886: GO 65896
// result := false ;
65888: LD_ADDR_VAR 0 3
65892: PUSH
65893: LD_INT 0
65895: ST_TO_ADDR
// end ;
65896: LD_VAR 0 3
65900: RET
// export function HealTarget ( sci ) ; begin
65901: LD_INT 0
65903: PPUSH
// if not sci then
65904: LD_VAR 0 1
65908: NOT
65909: IFFALSE 65913
// exit ;
65911: GO 65978
// result := 0 ;
65913: LD_ADDR_VAR 0 2
65917: PUSH
65918: LD_INT 0
65920: ST_TO_ADDR
// if GetTaskList ( sci ) then
65921: LD_VAR 0 1
65925: PPUSH
65926: CALL_OW 437
65930: IFFALSE 65978
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65932: LD_VAR 0 1
65936: PPUSH
65937: CALL_OW 437
65941: PUSH
65942: LD_INT 1
65944: ARRAY
65945: PUSH
65946: LD_INT 1
65948: ARRAY
65949: PUSH
65950: LD_STRING l
65952: EQUAL
65953: IFFALSE 65978
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65955: LD_ADDR_VAR 0 2
65959: PUSH
65960: LD_VAR 0 1
65964: PPUSH
65965: CALL_OW 437
65969: PUSH
65970: LD_INT 1
65972: ARRAY
65973: PUSH
65974: LD_INT 4
65976: ARRAY
65977: ST_TO_ADDR
// end ;
65978: LD_VAR 0 2
65982: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65983: LD_INT 0
65985: PPUSH
65986: PPUSH
65987: PPUSH
65988: PPUSH
// if not base_units then
65989: LD_VAR 0 1
65993: NOT
65994: IFFALSE 65998
// exit ;
65996: GO 66085
// result := false ;
65998: LD_ADDR_VAR 0 2
66002: PUSH
66003: LD_INT 0
66005: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66006: LD_ADDR_VAR 0 5
66010: PUSH
66011: LD_VAR 0 1
66015: PPUSH
66016: LD_INT 21
66018: PUSH
66019: LD_INT 3
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PPUSH
66026: CALL_OW 72
66030: ST_TO_ADDR
// if not tmp then
66031: LD_VAR 0 5
66035: NOT
66036: IFFALSE 66040
// exit ;
66038: GO 66085
// for i in tmp do
66040: LD_ADDR_VAR 0 3
66044: PUSH
66045: LD_VAR 0 5
66049: PUSH
66050: FOR_IN
66051: IFFALSE 66083
// begin result := EnemyInRange ( i , 22 ) ;
66053: LD_ADDR_VAR 0 2
66057: PUSH
66058: LD_VAR 0 3
66062: PPUSH
66063: LD_INT 22
66065: PPUSH
66066: CALL 63672 0 2
66070: ST_TO_ADDR
// if result then
66071: LD_VAR 0 2
66075: IFFALSE 66081
// exit ;
66077: POP
66078: POP
66079: GO 66085
// end ;
66081: GO 66050
66083: POP
66084: POP
// end ;
66085: LD_VAR 0 2
66089: RET
// export function FilterByTag ( units , tag ) ; begin
66090: LD_INT 0
66092: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66093: LD_ADDR_VAR 0 3
66097: PUSH
66098: LD_VAR 0 1
66102: PPUSH
66103: LD_INT 120
66105: PUSH
66106: LD_VAR 0 2
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PPUSH
66115: CALL_OW 72
66119: ST_TO_ADDR
// end ;
66120: LD_VAR 0 3
66124: RET
// export function IsDriver ( un ) ; begin
66125: LD_INT 0
66127: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66128: LD_ADDR_VAR 0 2
66132: PUSH
66133: LD_VAR 0 1
66137: PUSH
66138: LD_INT 55
66140: PUSH
66141: EMPTY
66142: LIST
66143: PPUSH
66144: CALL_OW 69
66148: IN
66149: ST_TO_ADDR
// end ;
66150: LD_VAR 0 2
66154: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66155: LD_INT 0
66157: PPUSH
66158: PPUSH
// list := [ ] ;
66159: LD_ADDR_VAR 0 5
66163: PUSH
66164: EMPTY
66165: ST_TO_ADDR
// case d of 0 :
66166: LD_VAR 0 3
66170: PUSH
66171: LD_INT 0
66173: DOUBLE
66174: EQUAL
66175: IFTRUE 66179
66177: GO 66312
66179: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66180: LD_ADDR_VAR 0 5
66184: PUSH
66185: LD_VAR 0 1
66189: PUSH
66190: LD_INT 4
66192: MINUS
66193: PUSH
66194: LD_VAR 0 2
66198: PUSH
66199: LD_INT 4
66201: MINUS
66202: PUSH
66203: LD_INT 2
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: LIST
66210: PUSH
66211: LD_VAR 0 1
66215: PUSH
66216: LD_INT 3
66218: MINUS
66219: PUSH
66220: LD_VAR 0 2
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: LIST
66232: PUSH
66233: LD_VAR 0 1
66237: PUSH
66238: LD_INT 4
66240: PLUS
66241: PUSH
66242: LD_VAR 0 2
66246: PUSH
66247: LD_INT 4
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: LIST
66254: PUSH
66255: LD_VAR 0 1
66259: PUSH
66260: LD_INT 3
66262: PLUS
66263: PUSH
66264: LD_VAR 0 2
66268: PUSH
66269: LD_INT 3
66271: PLUS
66272: PUSH
66273: LD_INT 5
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: PUSH
66281: LD_VAR 0 1
66285: PUSH
66286: LD_VAR 0 2
66290: PUSH
66291: LD_INT 4
66293: PLUS
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: LIST
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: ST_TO_ADDR
// end ; 1 :
66310: GO 67010
66312: LD_INT 1
66314: DOUBLE
66315: EQUAL
66316: IFTRUE 66320
66318: GO 66453
66320: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66321: LD_ADDR_VAR 0 5
66325: PUSH
66326: LD_VAR 0 1
66330: PUSH
66331: LD_VAR 0 2
66335: PUSH
66336: LD_INT 4
66338: MINUS
66339: PUSH
66340: LD_INT 3
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: LIST
66347: PUSH
66348: LD_VAR 0 1
66352: PUSH
66353: LD_INT 3
66355: MINUS
66356: PUSH
66357: LD_VAR 0 2
66361: PUSH
66362: LD_INT 3
66364: MINUS
66365: PUSH
66366: LD_INT 2
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: PUSH
66374: LD_VAR 0 1
66378: PUSH
66379: LD_INT 4
66381: MINUS
66382: PUSH
66383: LD_VAR 0 2
66387: PUSH
66388: LD_INT 1
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: LIST
66395: PUSH
66396: LD_VAR 0 1
66400: PUSH
66401: LD_VAR 0 2
66405: PUSH
66406: LD_INT 3
66408: PLUS
66409: PUSH
66410: LD_INT 0
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: LIST
66417: PUSH
66418: LD_VAR 0 1
66422: PUSH
66423: LD_INT 4
66425: PLUS
66426: PUSH
66427: LD_VAR 0 2
66431: PUSH
66432: LD_INT 4
66434: PLUS
66435: PUSH
66436: LD_INT 5
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: ST_TO_ADDR
// end ; 2 :
66451: GO 67010
66453: LD_INT 2
66455: DOUBLE
66456: EQUAL
66457: IFTRUE 66461
66459: GO 66590
66461: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66462: LD_ADDR_VAR 0 5
66466: PUSH
66467: LD_VAR 0 1
66471: PUSH
66472: LD_VAR 0 2
66476: PUSH
66477: LD_INT 3
66479: MINUS
66480: PUSH
66481: LD_INT 3
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: LIST
66488: PUSH
66489: LD_VAR 0 1
66493: PUSH
66494: LD_INT 4
66496: PLUS
66497: PUSH
66498: LD_VAR 0 2
66502: PUSH
66503: LD_INT 4
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: LIST
66510: PUSH
66511: LD_VAR 0 1
66515: PUSH
66516: LD_VAR 0 2
66520: PUSH
66521: LD_INT 4
66523: PLUS
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: PUSH
66533: LD_VAR 0 1
66537: PUSH
66538: LD_INT 3
66540: MINUS
66541: PUSH
66542: LD_VAR 0 2
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: LIST
66554: PUSH
66555: LD_VAR 0 1
66559: PUSH
66560: LD_INT 4
66562: MINUS
66563: PUSH
66564: LD_VAR 0 2
66568: PUSH
66569: LD_INT 4
66571: MINUS
66572: PUSH
66573: LD_INT 2
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: ST_TO_ADDR
// end ; 3 :
66588: GO 67010
66590: LD_INT 3
66592: DOUBLE
66593: EQUAL
66594: IFTRUE 66598
66596: GO 66731
66598: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66599: LD_ADDR_VAR 0 5
66603: PUSH
66604: LD_VAR 0 1
66608: PUSH
66609: LD_INT 3
66611: PLUS
66612: PUSH
66613: LD_VAR 0 2
66617: PUSH
66618: LD_INT 4
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: LIST
66625: PUSH
66626: LD_VAR 0 1
66630: PUSH
66631: LD_INT 4
66633: PLUS
66634: PUSH
66635: LD_VAR 0 2
66639: PUSH
66640: LD_INT 4
66642: PLUS
66643: PUSH
66644: LD_INT 5
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: LIST
66651: PUSH
66652: LD_VAR 0 1
66656: PUSH
66657: LD_INT 4
66659: MINUS
66660: PUSH
66661: LD_VAR 0 2
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: LIST
66673: PUSH
66674: LD_VAR 0 1
66678: PUSH
66679: LD_VAR 0 2
66683: PUSH
66684: LD_INT 4
66686: MINUS
66687: PUSH
66688: LD_INT 3
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: LIST
66695: PUSH
66696: LD_VAR 0 1
66700: PUSH
66701: LD_INT 3
66703: MINUS
66704: PUSH
66705: LD_VAR 0 2
66709: PUSH
66710: LD_INT 3
66712: MINUS
66713: PUSH
66714: LD_INT 2
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: LIST
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: ST_TO_ADDR
// end ; 4 :
66729: GO 67010
66731: LD_INT 4
66733: DOUBLE
66734: EQUAL
66735: IFTRUE 66739
66737: GO 66872
66739: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66740: LD_ADDR_VAR 0 5
66744: PUSH
66745: LD_VAR 0 1
66749: PUSH
66750: LD_VAR 0 2
66754: PUSH
66755: LD_INT 4
66757: PLUS
66758: PUSH
66759: LD_INT 0
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: LIST
66766: PUSH
66767: LD_VAR 0 1
66771: PUSH
66772: LD_INT 3
66774: PLUS
66775: PUSH
66776: LD_VAR 0 2
66780: PUSH
66781: LD_INT 3
66783: PLUS
66784: PUSH
66785: LD_INT 5
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: PUSH
66793: LD_VAR 0 1
66797: PUSH
66798: LD_INT 4
66800: PLUS
66801: PUSH
66802: LD_VAR 0 2
66806: PUSH
66807: LD_INT 4
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: PUSH
66815: LD_VAR 0 1
66819: PUSH
66820: LD_VAR 0 2
66824: PUSH
66825: LD_INT 3
66827: MINUS
66828: PUSH
66829: LD_INT 3
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: LIST
66836: PUSH
66837: LD_VAR 0 1
66841: PUSH
66842: LD_INT 4
66844: MINUS
66845: PUSH
66846: LD_VAR 0 2
66850: PUSH
66851: LD_INT 4
66853: MINUS
66854: PUSH
66855: LD_INT 2
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: ST_TO_ADDR
// end ; 5 :
66870: GO 67010
66872: LD_INT 5
66874: DOUBLE
66875: EQUAL
66876: IFTRUE 66880
66878: GO 67009
66880: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66881: LD_ADDR_VAR 0 5
66885: PUSH
66886: LD_VAR 0 1
66890: PUSH
66891: LD_INT 4
66893: MINUS
66894: PUSH
66895: LD_VAR 0 2
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: PUSH
66908: LD_VAR 0 1
66912: PUSH
66913: LD_VAR 0 2
66917: PUSH
66918: LD_INT 4
66920: MINUS
66921: PUSH
66922: LD_INT 3
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: LIST
66929: PUSH
66930: LD_VAR 0 1
66934: PUSH
66935: LD_INT 4
66937: PLUS
66938: PUSH
66939: LD_VAR 0 2
66943: PUSH
66944: LD_INT 4
66946: PLUS
66947: PUSH
66948: LD_INT 5
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: LIST
66955: PUSH
66956: LD_VAR 0 1
66960: PUSH
66961: LD_INT 3
66963: PLUS
66964: PUSH
66965: LD_VAR 0 2
66969: PUSH
66970: LD_INT 4
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: LIST
66977: PUSH
66978: LD_VAR 0 1
66982: PUSH
66983: LD_VAR 0 2
66987: PUSH
66988: LD_INT 3
66990: PLUS
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: LIST
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: ST_TO_ADDR
// end ; end ;
67007: GO 67010
67009: POP
// result := list ;
67010: LD_ADDR_VAR 0 4
67014: PUSH
67015: LD_VAR 0 5
67019: ST_TO_ADDR
// end ;
67020: LD_VAR 0 4
67024: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67025: LD_INT 0
67027: PPUSH
67028: PPUSH
67029: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67030: LD_VAR 0 1
67034: NOT
67035: PUSH
67036: LD_VAR 0 2
67040: PUSH
67041: LD_INT 1
67043: PUSH
67044: LD_INT 2
67046: PUSH
67047: LD_INT 3
67049: PUSH
67050: LD_INT 4
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: IN
67059: NOT
67060: OR
67061: IFFALSE 67065
// exit ;
67063: GO 67148
// tmp := [ ] ;
67065: LD_ADDR_VAR 0 5
67069: PUSH
67070: EMPTY
67071: ST_TO_ADDR
// for i in units do
67072: LD_ADDR_VAR 0 4
67076: PUSH
67077: LD_VAR 0 1
67081: PUSH
67082: FOR_IN
67083: IFFALSE 67117
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67085: LD_ADDR_VAR 0 5
67089: PUSH
67090: LD_VAR 0 5
67094: PPUSH
67095: LD_VAR 0 4
67099: PPUSH
67100: LD_VAR 0 2
67104: PPUSH
67105: CALL_OW 259
67109: PPUSH
67110: CALL 68509 0 2
67114: ST_TO_ADDR
67115: GO 67082
67117: POP
67118: POP
// if not tmp then
67119: LD_VAR 0 5
67123: NOT
67124: IFFALSE 67128
// exit ;
67126: GO 67148
// result := SortListByListDesc ( units , tmp ) ;
67128: LD_ADDR_VAR 0 3
67132: PUSH
67133: LD_VAR 0 1
67137: PPUSH
67138: LD_VAR 0 5
67142: PPUSH
67143: CALL_OW 77
67147: ST_TO_ADDR
// end ;
67148: LD_VAR 0 3
67152: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67153: LD_INT 0
67155: PPUSH
67156: PPUSH
67157: PPUSH
// result := false ;
67158: LD_ADDR_VAR 0 3
67162: PUSH
67163: LD_INT 0
67165: ST_TO_ADDR
// if not building then
67166: LD_VAR 0 2
67170: NOT
67171: IFFALSE 67175
// exit ;
67173: GO 67313
// x := GetX ( building ) ;
67175: LD_ADDR_VAR 0 4
67179: PUSH
67180: LD_VAR 0 2
67184: PPUSH
67185: CALL_OW 250
67189: ST_TO_ADDR
// y := GetY ( building ) ;
67190: LD_ADDR_VAR 0 5
67194: PUSH
67195: LD_VAR 0 2
67199: PPUSH
67200: CALL_OW 251
67204: ST_TO_ADDR
// if not x or not y then
67205: LD_VAR 0 4
67209: NOT
67210: PUSH
67211: LD_VAR 0 5
67215: NOT
67216: OR
67217: IFFALSE 67221
// exit ;
67219: GO 67313
// if GetTaskList ( unit ) then
67221: LD_VAR 0 1
67225: PPUSH
67226: CALL_OW 437
67230: IFFALSE 67313
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67232: LD_STRING e
67234: PUSH
67235: LD_VAR 0 1
67239: PPUSH
67240: CALL_OW 437
67244: PUSH
67245: LD_INT 1
67247: ARRAY
67248: PUSH
67249: LD_INT 1
67251: ARRAY
67252: EQUAL
67253: PUSH
67254: LD_VAR 0 4
67258: PUSH
67259: LD_VAR 0 1
67263: PPUSH
67264: CALL_OW 437
67268: PUSH
67269: LD_INT 1
67271: ARRAY
67272: PUSH
67273: LD_INT 2
67275: ARRAY
67276: EQUAL
67277: AND
67278: PUSH
67279: LD_VAR 0 5
67283: PUSH
67284: LD_VAR 0 1
67288: PPUSH
67289: CALL_OW 437
67293: PUSH
67294: LD_INT 1
67296: ARRAY
67297: PUSH
67298: LD_INT 3
67300: ARRAY
67301: EQUAL
67302: AND
67303: IFFALSE 67313
// result := true end ;
67305: LD_ADDR_VAR 0 3
67309: PUSH
67310: LD_INT 1
67312: ST_TO_ADDR
// end ;
67313: LD_VAR 0 3
67317: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67318: LD_INT 0
67320: PPUSH
// result := false ;
67321: LD_ADDR_VAR 0 4
67325: PUSH
67326: LD_INT 0
67328: ST_TO_ADDR
// if GetTaskList ( unit ) then
67329: LD_VAR 0 1
67333: PPUSH
67334: CALL_OW 437
67338: IFFALSE 67421
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67340: LD_STRING M
67342: PUSH
67343: LD_VAR 0 1
67347: PPUSH
67348: CALL_OW 437
67352: PUSH
67353: LD_INT 1
67355: ARRAY
67356: PUSH
67357: LD_INT 1
67359: ARRAY
67360: EQUAL
67361: PUSH
67362: LD_VAR 0 2
67366: PUSH
67367: LD_VAR 0 1
67371: PPUSH
67372: CALL_OW 437
67376: PUSH
67377: LD_INT 1
67379: ARRAY
67380: PUSH
67381: LD_INT 2
67383: ARRAY
67384: EQUAL
67385: AND
67386: PUSH
67387: LD_VAR 0 3
67391: PUSH
67392: LD_VAR 0 1
67396: PPUSH
67397: CALL_OW 437
67401: PUSH
67402: LD_INT 1
67404: ARRAY
67405: PUSH
67406: LD_INT 3
67408: ARRAY
67409: EQUAL
67410: AND
67411: IFFALSE 67421
// result := true ;
67413: LD_ADDR_VAR 0 4
67417: PUSH
67418: LD_INT 1
67420: ST_TO_ADDR
// end ; end ;
67421: LD_VAR 0 4
67425: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67426: LD_INT 0
67428: PPUSH
67429: PPUSH
67430: PPUSH
67431: PPUSH
// if not unit or not area then
67432: LD_VAR 0 1
67436: NOT
67437: PUSH
67438: LD_VAR 0 2
67442: NOT
67443: OR
67444: IFFALSE 67448
// exit ;
67446: GO 67612
// tmp := AreaToList ( area , i ) ;
67448: LD_ADDR_VAR 0 6
67452: PUSH
67453: LD_VAR 0 2
67457: PPUSH
67458: LD_VAR 0 5
67462: PPUSH
67463: CALL_OW 517
67467: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67468: LD_ADDR_VAR 0 5
67472: PUSH
67473: DOUBLE
67474: LD_INT 1
67476: DEC
67477: ST_TO_ADDR
67478: LD_VAR 0 6
67482: PUSH
67483: LD_INT 1
67485: ARRAY
67486: PUSH
67487: FOR_TO
67488: IFFALSE 67610
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67490: LD_ADDR_VAR 0 7
67494: PUSH
67495: LD_VAR 0 6
67499: PUSH
67500: LD_INT 1
67502: ARRAY
67503: PUSH
67504: LD_VAR 0 5
67508: ARRAY
67509: PUSH
67510: LD_VAR 0 6
67514: PUSH
67515: LD_INT 2
67517: ARRAY
67518: PUSH
67519: LD_VAR 0 5
67523: ARRAY
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67529: LD_VAR 0 7
67533: PUSH
67534: LD_INT 1
67536: ARRAY
67537: PPUSH
67538: LD_VAR 0 7
67542: PUSH
67543: LD_INT 2
67545: ARRAY
67546: PPUSH
67547: CALL_OW 428
67551: PUSH
67552: LD_INT 0
67554: EQUAL
67555: IFFALSE 67608
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67557: LD_VAR 0 1
67561: PPUSH
67562: LD_VAR 0 7
67566: PUSH
67567: LD_INT 1
67569: ARRAY
67570: PPUSH
67571: LD_VAR 0 7
67575: PUSH
67576: LD_INT 2
67578: ARRAY
67579: PPUSH
67580: LD_VAR 0 3
67584: PPUSH
67585: CALL_OW 48
// result := IsPlaced ( unit ) ;
67589: LD_ADDR_VAR 0 4
67593: PUSH
67594: LD_VAR 0 1
67598: PPUSH
67599: CALL_OW 305
67603: ST_TO_ADDR
// exit ;
67604: POP
67605: POP
67606: GO 67612
// end ; end ;
67608: GO 67487
67610: POP
67611: POP
// end ;
67612: LD_VAR 0 4
67616: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67617: LD_INT 0
67619: PPUSH
67620: PPUSH
67621: PPUSH
// if not side or side > 8 then
67622: LD_VAR 0 1
67626: NOT
67627: PUSH
67628: LD_VAR 0 1
67632: PUSH
67633: LD_INT 8
67635: GREATER
67636: OR
67637: IFFALSE 67641
// exit ;
67639: GO 67828
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67641: LD_ADDR_VAR 0 4
67645: PUSH
67646: LD_INT 22
67648: PUSH
67649: LD_VAR 0 1
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 21
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PPUSH
67672: CALL_OW 69
67676: ST_TO_ADDR
// if not tmp then
67677: LD_VAR 0 4
67681: NOT
67682: IFFALSE 67686
// exit ;
67684: GO 67828
// enable_addtolog := true ;
67686: LD_ADDR_OWVAR 81
67690: PUSH
67691: LD_INT 1
67693: ST_TO_ADDR
// AddToLog ( [ ) ;
67694: LD_STRING [
67696: PPUSH
67697: CALL_OW 561
// for i in tmp do
67701: LD_ADDR_VAR 0 3
67705: PUSH
67706: LD_VAR 0 4
67710: PUSH
67711: FOR_IN
67712: IFFALSE 67819
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67714: LD_STRING [
67716: PUSH
67717: LD_VAR 0 3
67721: PPUSH
67722: CALL_OW 266
67726: STR
67727: PUSH
67728: LD_STRING , 
67730: STR
67731: PUSH
67732: LD_VAR 0 3
67736: PPUSH
67737: CALL_OW 250
67741: STR
67742: PUSH
67743: LD_STRING , 
67745: STR
67746: PUSH
67747: LD_VAR 0 3
67751: PPUSH
67752: CALL_OW 251
67756: STR
67757: PUSH
67758: LD_STRING , 
67760: STR
67761: PUSH
67762: LD_VAR 0 3
67766: PPUSH
67767: CALL_OW 254
67771: STR
67772: PUSH
67773: LD_STRING , 
67775: STR
67776: PUSH
67777: LD_VAR 0 3
67781: PPUSH
67782: LD_INT 1
67784: PPUSH
67785: CALL_OW 268
67789: STR
67790: PUSH
67791: LD_STRING , 
67793: STR
67794: PUSH
67795: LD_VAR 0 3
67799: PPUSH
67800: LD_INT 2
67802: PPUSH
67803: CALL_OW 268
67807: STR
67808: PUSH
67809: LD_STRING ],
67811: STR
67812: PPUSH
67813: CALL_OW 561
// end ;
67817: GO 67711
67819: POP
67820: POP
// AddToLog ( ]; ) ;
67821: LD_STRING ];
67823: PPUSH
67824: CALL_OW 561
// end ;
67828: LD_VAR 0 2
67832: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67833: LD_INT 0
67835: PPUSH
67836: PPUSH
67837: PPUSH
67838: PPUSH
67839: PPUSH
// if not area or not rate or not max then
67840: LD_VAR 0 1
67844: NOT
67845: PUSH
67846: LD_VAR 0 2
67850: NOT
67851: OR
67852: PUSH
67853: LD_VAR 0 4
67857: NOT
67858: OR
67859: IFFALSE 67863
// exit ;
67861: GO 68052
// while 1 do
67863: LD_INT 1
67865: IFFALSE 68052
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67867: LD_ADDR_VAR 0 9
67871: PUSH
67872: LD_VAR 0 1
67876: PPUSH
67877: LD_INT 1
67879: PPUSH
67880: CALL_OW 287
67884: PUSH
67885: LD_INT 10
67887: MUL
67888: ST_TO_ADDR
// r := rate / 10 ;
67889: LD_ADDR_VAR 0 7
67893: PUSH
67894: LD_VAR 0 2
67898: PUSH
67899: LD_INT 10
67901: DIVREAL
67902: ST_TO_ADDR
// time := 1 1$00 ;
67903: LD_ADDR_VAR 0 8
67907: PUSH
67908: LD_INT 2100
67910: ST_TO_ADDR
// if amount < min then
67911: LD_VAR 0 9
67915: PUSH
67916: LD_VAR 0 3
67920: LESS
67921: IFFALSE 67939
// r := r * 2 else
67923: LD_ADDR_VAR 0 7
67927: PUSH
67928: LD_VAR 0 7
67932: PUSH
67933: LD_INT 2
67935: MUL
67936: ST_TO_ADDR
67937: GO 67965
// if amount > max then
67939: LD_VAR 0 9
67943: PUSH
67944: LD_VAR 0 4
67948: GREATER
67949: IFFALSE 67965
// r := r / 2 ;
67951: LD_ADDR_VAR 0 7
67955: PUSH
67956: LD_VAR 0 7
67960: PUSH
67961: LD_INT 2
67963: DIVREAL
67964: ST_TO_ADDR
// time := time / r ;
67965: LD_ADDR_VAR 0 8
67969: PUSH
67970: LD_VAR 0 8
67974: PUSH
67975: LD_VAR 0 7
67979: DIVREAL
67980: ST_TO_ADDR
// if time < 0 then
67981: LD_VAR 0 8
67985: PUSH
67986: LD_INT 0
67988: LESS
67989: IFFALSE 68006
// time := time * - 1 ;
67991: LD_ADDR_VAR 0 8
67995: PUSH
67996: LD_VAR 0 8
68000: PUSH
68001: LD_INT 1
68003: NEG
68004: MUL
68005: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68006: LD_VAR 0 8
68010: PUSH
68011: LD_INT 35
68013: PPUSH
68014: LD_INT 875
68016: PPUSH
68017: CALL_OW 12
68021: PLUS
68022: PPUSH
68023: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68027: LD_INT 1
68029: PPUSH
68030: LD_INT 5
68032: PPUSH
68033: CALL_OW 12
68037: PPUSH
68038: LD_VAR 0 1
68042: PPUSH
68043: LD_INT 1
68045: PPUSH
68046: CALL_OW 55
// end ;
68050: GO 67863
// end ;
68052: LD_VAR 0 5
68056: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68057: LD_INT 0
68059: PPUSH
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
68064: PPUSH
68065: PPUSH
68066: PPUSH
// if not turrets or not factories then
68067: LD_VAR 0 1
68071: NOT
68072: PUSH
68073: LD_VAR 0 2
68077: NOT
68078: OR
68079: IFFALSE 68083
// exit ;
68081: GO 68390
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68083: LD_ADDR_VAR 0 10
68087: PUSH
68088: LD_INT 5
68090: PUSH
68091: LD_INT 6
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: LD_INT 4
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: LD_INT 5
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 24
68125: PUSH
68126: LD_INT 25
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 23
68135: PUSH
68136: LD_INT 27
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 42
68149: PUSH
68150: LD_INT 43
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 44
68159: PUSH
68160: LD_INT 46
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 45
68169: PUSH
68170: LD_INT 47
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: LIST
68186: ST_TO_ADDR
// result := [ ] ;
68187: LD_ADDR_VAR 0 3
68191: PUSH
68192: EMPTY
68193: ST_TO_ADDR
// for i in turrets do
68194: LD_ADDR_VAR 0 4
68198: PUSH
68199: LD_VAR 0 1
68203: PUSH
68204: FOR_IN
68205: IFFALSE 68388
// begin nat := GetNation ( i ) ;
68207: LD_ADDR_VAR 0 7
68211: PUSH
68212: LD_VAR 0 4
68216: PPUSH
68217: CALL_OW 248
68221: ST_TO_ADDR
// weapon := 0 ;
68222: LD_ADDR_VAR 0 8
68226: PUSH
68227: LD_INT 0
68229: ST_TO_ADDR
// if not nat then
68230: LD_VAR 0 7
68234: NOT
68235: IFFALSE 68239
// continue ;
68237: GO 68204
// for j in list [ nat ] do
68239: LD_ADDR_VAR 0 5
68243: PUSH
68244: LD_VAR 0 10
68248: PUSH
68249: LD_VAR 0 7
68253: ARRAY
68254: PUSH
68255: FOR_IN
68256: IFFALSE 68297
// if GetBWeapon ( i ) = j [ 1 ] then
68258: LD_VAR 0 4
68262: PPUSH
68263: CALL_OW 269
68267: PUSH
68268: LD_VAR 0 5
68272: PUSH
68273: LD_INT 1
68275: ARRAY
68276: EQUAL
68277: IFFALSE 68295
// begin weapon := j [ 2 ] ;
68279: LD_ADDR_VAR 0 8
68283: PUSH
68284: LD_VAR 0 5
68288: PUSH
68289: LD_INT 2
68291: ARRAY
68292: ST_TO_ADDR
// break ;
68293: GO 68297
// end ;
68295: GO 68255
68297: POP
68298: POP
// if not weapon then
68299: LD_VAR 0 8
68303: NOT
68304: IFFALSE 68308
// continue ;
68306: GO 68204
// for k in factories do
68308: LD_ADDR_VAR 0 6
68312: PUSH
68313: LD_VAR 0 2
68317: PUSH
68318: FOR_IN
68319: IFFALSE 68384
// begin weapons := AvailableWeaponList ( k ) ;
68321: LD_ADDR_VAR 0 9
68325: PUSH
68326: LD_VAR 0 6
68330: PPUSH
68331: CALL_OW 478
68335: ST_TO_ADDR
// if not weapons then
68336: LD_VAR 0 9
68340: NOT
68341: IFFALSE 68345
// continue ;
68343: GO 68318
// if weapon in weapons then
68345: LD_VAR 0 8
68349: PUSH
68350: LD_VAR 0 9
68354: IN
68355: IFFALSE 68382
// begin result := [ i , weapon ] ;
68357: LD_ADDR_VAR 0 3
68361: PUSH
68362: LD_VAR 0 4
68366: PUSH
68367: LD_VAR 0 8
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: ST_TO_ADDR
// exit ;
68376: POP
68377: POP
68378: POP
68379: POP
68380: GO 68390
// end ; end ;
68382: GO 68318
68384: POP
68385: POP
// end ;
68386: GO 68204
68388: POP
68389: POP
// end ;
68390: LD_VAR 0 3
68394: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68395: LD_INT 0
68397: PPUSH
// if not side or side > 8 then
68398: LD_VAR 0 3
68402: NOT
68403: PUSH
68404: LD_VAR 0 3
68408: PUSH
68409: LD_INT 8
68411: GREATER
68412: OR
68413: IFFALSE 68417
// exit ;
68415: GO 68476
// if not range then
68417: LD_VAR 0 4
68421: NOT
68422: IFFALSE 68433
// range := - 12 ;
68424: LD_ADDR_VAR 0 4
68428: PUSH
68429: LD_INT 12
68431: NEG
68432: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68433: LD_VAR 0 1
68437: PPUSH
68438: LD_VAR 0 2
68442: PPUSH
68443: LD_VAR 0 3
68447: PPUSH
68448: LD_VAR 0 4
68452: PPUSH
68453: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68457: LD_VAR 0 1
68461: PPUSH
68462: LD_VAR 0 2
68466: PPUSH
68467: LD_VAR 0 3
68471: PPUSH
68472: CALL_OW 331
// end ;
68476: LD_VAR 0 5
68480: RET
// export function Video ( mode ) ; begin
68481: LD_INT 0
68483: PPUSH
// ingame_video = mode ;
68484: LD_ADDR_OWVAR 52
68488: PUSH
68489: LD_VAR 0 1
68493: ST_TO_ADDR
// interface_hidden = mode ;
68494: LD_ADDR_OWVAR 54
68498: PUSH
68499: LD_VAR 0 1
68503: ST_TO_ADDR
// end ;
68504: LD_VAR 0 2
68508: RET
// export function Join ( array , element ) ; begin
68509: LD_INT 0
68511: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68512: LD_ADDR_VAR 0 3
68516: PUSH
68517: LD_VAR 0 1
68521: PPUSH
68522: LD_VAR 0 1
68526: PUSH
68527: LD_INT 1
68529: PLUS
68530: PPUSH
68531: LD_VAR 0 2
68535: PPUSH
68536: CALL_OW 1
68540: ST_TO_ADDR
// end ;
68541: LD_VAR 0 3
68545: RET
// export function JoinUnion ( array , element ) ; begin
68546: LD_INT 0
68548: PPUSH
// result := array union element ;
68549: LD_ADDR_VAR 0 3
68553: PUSH
68554: LD_VAR 0 1
68558: PUSH
68559: LD_VAR 0 2
68563: UNION
68564: ST_TO_ADDR
// end ;
68565: LD_VAR 0 3
68569: RET
// export function GetBehemoths ( side ) ; begin
68570: LD_INT 0
68572: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68573: LD_ADDR_VAR 0 2
68577: PUSH
68578: LD_INT 22
68580: PUSH
68581: LD_VAR 0 1
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 31
68592: PUSH
68593: LD_INT 25
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PPUSH
68604: CALL_OW 69
68608: ST_TO_ADDR
// end ;
68609: LD_VAR 0 2
68613: RET
// export function Shuffle ( array ) ; var i , index ; begin
68614: LD_INT 0
68616: PPUSH
68617: PPUSH
68618: PPUSH
// result := [ ] ;
68619: LD_ADDR_VAR 0 2
68623: PUSH
68624: EMPTY
68625: ST_TO_ADDR
// if not array then
68626: LD_VAR 0 1
68630: NOT
68631: IFFALSE 68635
// exit ;
68633: GO 68734
// Randomize ;
68635: CALL_OW 10
// for i = array downto 1 do
68639: LD_ADDR_VAR 0 3
68643: PUSH
68644: DOUBLE
68645: LD_VAR 0 1
68649: INC
68650: ST_TO_ADDR
68651: LD_INT 1
68653: PUSH
68654: FOR_DOWNTO
68655: IFFALSE 68732
// begin index := rand ( 1 , array ) ;
68657: LD_ADDR_VAR 0 4
68661: PUSH
68662: LD_INT 1
68664: PPUSH
68665: LD_VAR 0 1
68669: PPUSH
68670: CALL_OW 12
68674: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68675: LD_ADDR_VAR 0 2
68679: PUSH
68680: LD_VAR 0 2
68684: PPUSH
68685: LD_VAR 0 2
68689: PUSH
68690: LD_INT 1
68692: PLUS
68693: PPUSH
68694: LD_VAR 0 1
68698: PUSH
68699: LD_VAR 0 4
68703: ARRAY
68704: PPUSH
68705: CALL_OW 2
68709: ST_TO_ADDR
// array := Delete ( array , index ) ;
68710: LD_ADDR_VAR 0 1
68714: PUSH
68715: LD_VAR 0 1
68719: PPUSH
68720: LD_VAR 0 4
68724: PPUSH
68725: CALL_OW 3
68729: ST_TO_ADDR
// end ;
68730: GO 68654
68732: POP
68733: POP
// end ;
68734: LD_VAR 0 2
68738: RET
// export function GetBaseMaterials ( base ) ; begin
68739: LD_INT 0
68741: PPUSH
// result := [ 0 , 0 , 0 ] ;
68742: LD_ADDR_VAR 0 2
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: LD_INT 0
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: LIST
68760: ST_TO_ADDR
// if not base then
68761: LD_VAR 0 1
68765: NOT
68766: IFFALSE 68770
// exit ;
68768: GO 68819
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68770: LD_ADDR_VAR 0 2
68774: PUSH
68775: LD_VAR 0 1
68779: PPUSH
68780: LD_INT 1
68782: PPUSH
68783: CALL_OW 275
68787: PUSH
68788: LD_VAR 0 1
68792: PPUSH
68793: LD_INT 2
68795: PPUSH
68796: CALL_OW 275
68800: PUSH
68801: LD_VAR 0 1
68805: PPUSH
68806: LD_INT 3
68808: PPUSH
68809: CALL_OW 275
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: LIST
68818: ST_TO_ADDR
// end ;
68819: LD_VAR 0 2
68823: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68824: LD_INT 0
68826: PPUSH
68827: PPUSH
// result := array ;
68828: LD_ADDR_VAR 0 3
68832: PUSH
68833: LD_VAR 0 1
68837: ST_TO_ADDR
// if size >= result then
68838: LD_VAR 0 2
68842: PUSH
68843: LD_VAR 0 3
68847: GREATEREQUAL
68848: IFFALSE 68852
// exit ;
68850: GO 68902
// if size then
68852: LD_VAR 0 2
68856: IFFALSE 68902
// for i := array downto size do
68858: LD_ADDR_VAR 0 4
68862: PUSH
68863: DOUBLE
68864: LD_VAR 0 1
68868: INC
68869: ST_TO_ADDR
68870: LD_VAR 0 2
68874: PUSH
68875: FOR_DOWNTO
68876: IFFALSE 68900
// result := Delete ( result , result ) ;
68878: LD_ADDR_VAR 0 3
68882: PUSH
68883: LD_VAR 0 3
68887: PPUSH
68888: LD_VAR 0 3
68892: PPUSH
68893: CALL_OW 3
68897: ST_TO_ADDR
68898: GO 68875
68900: POP
68901: POP
// end ;
68902: LD_VAR 0 3
68906: RET
// export function ComExit ( unit ) ; var tmp ; begin
68907: LD_INT 0
68909: PPUSH
68910: PPUSH
// if not IsInUnit ( unit ) then
68911: LD_VAR 0 1
68915: PPUSH
68916: CALL_OW 310
68920: NOT
68921: IFFALSE 68925
// exit ;
68923: GO 68985
// tmp := IsInUnit ( unit ) ;
68925: LD_ADDR_VAR 0 3
68929: PUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: CALL_OW 310
68939: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68940: LD_VAR 0 3
68944: PPUSH
68945: CALL_OW 247
68949: PUSH
68950: LD_INT 2
68952: EQUAL
68953: IFFALSE 68966
// ComExitVehicle ( unit ) else
68955: LD_VAR 0 1
68959: PPUSH
68960: CALL_OW 121
68964: GO 68975
// ComExitBuilding ( unit ) ;
68966: LD_VAR 0 1
68970: PPUSH
68971: CALL_OW 122
// result := tmp ;
68975: LD_ADDR_VAR 0 2
68979: PUSH
68980: LD_VAR 0 3
68984: ST_TO_ADDR
// end ;
68985: LD_VAR 0 2
68989: RET
// export function ComExitAll ( units ) ; var i ; begin
68990: LD_INT 0
68992: PPUSH
68993: PPUSH
// if not units then
68994: LD_VAR 0 1
68998: NOT
68999: IFFALSE 69003
// exit ;
69001: GO 69029
// for i in units do
69003: LD_ADDR_VAR 0 3
69007: PUSH
69008: LD_VAR 0 1
69012: PUSH
69013: FOR_IN
69014: IFFALSE 69027
// ComExit ( i ) ;
69016: LD_VAR 0 3
69020: PPUSH
69021: CALL 68907 0 1
69025: GO 69013
69027: POP
69028: POP
// end ;
69029: LD_VAR 0 2
69033: RET
// export function ResetHc ; begin
69034: LD_INT 0
69036: PPUSH
// InitHc ;
69037: CALL_OW 19
// hc_importance := 0 ;
69041: LD_ADDR_OWVAR 32
69045: PUSH
69046: LD_INT 0
69048: ST_TO_ADDR
// end ;
69049: LD_VAR 0 1
69053: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69054: LD_INT 0
69056: PPUSH
69057: PPUSH
69058: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69059: LD_ADDR_VAR 0 6
69063: PUSH
69064: LD_VAR 0 1
69068: PUSH
69069: LD_VAR 0 3
69073: PLUS
69074: PUSH
69075: LD_INT 2
69077: DIV
69078: ST_TO_ADDR
// if _x < 0 then
69079: LD_VAR 0 6
69083: PUSH
69084: LD_INT 0
69086: LESS
69087: IFFALSE 69104
// _x := _x * - 1 ;
69089: LD_ADDR_VAR 0 6
69093: PUSH
69094: LD_VAR 0 6
69098: PUSH
69099: LD_INT 1
69101: NEG
69102: MUL
69103: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69104: LD_ADDR_VAR 0 7
69108: PUSH
69109: LD_VAR 0 2
69113: PUSH
69114: LD_VAR 0 4
69118: PLUS
69119: PUSH
69120: LD_INT 2
69122: DIV
69123: ST_TO_ADDR
// if _y < 0 then
69124: LD_VAR 0 7
69128: PUSH
69129: LD_INT 0
69131: LESS
69132: IFFALSE 69149
// _y := _y * - 1 ;
69134: LD_ADDR_VAR 0 7
69138: PUSH
69139: LD_VAR 0 7
69143: PUSH
69144: LD_INT 1
69146: NEG
69147: MUL
69148: ST_TO_ADDR
// result := [ _x , _y ] ;
69149: LD_ADDR_VAR 0 5
69153: PUSH
69154: LD_VAR 0 6
69158: PUSH
69159: LD_VAR 0 7
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: ST_TO_ADDR
// end ;
69168: LD_VAR 0 5
69172: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69173: LD_INT 0
69175: PPUSH
69176: PPUSH
69177: PPUSH
69178: PPUSH
// task := GetTaskList ( unit ) ;
69179: LD_ADDR_VAR 0 7
69183: PUSH
69184: LD_VAR 0 1
69188: PPUSH
69189: CALL_OW 437
69193: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69194: LD_VAR 0 7
69198: NOT
69199: PUSH
69200: LD_VAR 0 1
69204: PPUSH
69205: LD_VAR 0 2
69209: PPUSH
69210: CALL_OW 308
69214: NOT
69215: AND
69216: IFFALSE 69220
// exit ;
69218: GO 69338
// if IsInArea ( unit , area ) then
69220: LD_VAR 0 1
69224: PPUSH
69225: LD_VAR 0 2
69229: PPUSH
69230: CALL_OW 308
69234: IFFALSE 69252
// begin ComMoveToArea ( unit , goAway ) ;
69236: LD_VAR 0 1
69240: PPUSH
69241: LD_VAR 0 3
69245: PPUSH
69246: CALL_OW 113
// exit ;
69250: GO 69338
// end ; if task [ 1 ] [ 1 ] <> M then
69252: LD_VAR 0 7
69256: PUSH
69257: LD_INT 1
69259: ARRAY
69260: PUSH
69261: LD_INT 1
69263: ARRAY
69264: PUSH
69265: LD_STRING M
69267: NONEQUAL
69268: IFFALSE 69272
// exit ;
69270: GO 69338
// x := task [ 1 ] [ 2 ] ;
69272: LD_ADDR_VAR 0 5
69276: PUSH
69277: LD_VAR 0 7
69281: PUSH
69282: LD_INT 1
69284: ARRAY
69285: PUSH
69286: LD_INT 2
69288: ARRAY
69289: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69290: LD_ADDR_VAR 0 6
69294: PUSH
69295: LD_VAR 0 7
69299: PUSH
69300: LD_INT 1
69302: ARRAY
69303: PUSH
69304: LD_INT 3
69306: ARRAY
69307: ST_TO_ADDR
// if InArea ( x , y , area ) then
69308: LD_VAR 0 5
69312: PPUSH
69313: LD_VAR 0 6
69317: PPUSH
69318: LD_VAR 0 2
69322: PPUSH
69323: CALL_OW 309
69327: IFFALSE 69338
// ComStop ( unit ) ;
69329: LD_VAR 0 1
69333: PPUSH
69334: CALL_OW 141
// end ;
69338: LD_VAR 0 4
69342: RET
// export function Abs ( value ) ; begin
69343: LD_INT 0
69345: PPUSH
// result := value ;
69346: LD_ADDR_VAR 0 2
69350: PUSH
69351: LD_VAR 0 1
69355: ST_TO_ADDR
// if value < 0 then
69356: LD_VAR 0 1
69360: PUSH
69361: LD_INT 0
69363: LESS
69364: IFFALSE 69381
// result := value * - 1 ;
69366: LD_ADDR_VAR 0 2
69370: PUSH
69371: LD_VAR 0 1
69375: PUSH
69376: LD_INT 1
69378: NEG
69379: MUL
69380: ST_TO_ADDR
// end ;
69381: LD_VAR 0 2
69385: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69386: LD_INT 0
69388: PPUSH
69389: PPUSH
69390: PPUSH
69391: PPUSH
69392: PPUSH
69393: PPUSH
69394: PPUSH
69395: PPUSH
// if not unit or not building then
69396: LD_VAR 0 1
69400: NOT
69401: PUSH
69402: LD_VAR 0 2
69406: NOT
69407: OR
69408: IFFALSE 69412
// exit ;
69410: GO 69638
// x := GetX ( building ) ;
69412: LD_ADDR_VAR 0 4
69416: PUSH
69417: LD_VAR 0 2
69421: PPUSH
69422: CALL_OW 250
69426: ST_TO_ADDR
// y := GetY ( building ) ;
69427: LD_ADDR_VAR 0 6
69431: PUSH
69432: LD_VAR 0 2
69436: PPUSH
69437: CALL_OW 251
69441: ST_TO_ADDR
// d := GetDir ( building ) ;
69442: LD_ADDR_VAR 0 8
69446: PUSH
69447: LD_VAR 0 2
69451: PPUSH
69452: CALL_OW 254
69456: ST_TO_ADDR
// r := 4 ;
69457: LD_ADDR_VAR 0 9
69461: PUSH
69462: LD_INT 4
69464: ST_TO_ADDR
// for i := 1 to 5 do
69465: LD_ADDR_VAR 0 10
69469: PUSH
69470: DOUBLE
69471: LD_INT 1
69473: DEC
69474: ST_TO_ADDR
69475: LD_INT 5
69477: PUSH
69478: FOR_TO
69479: IFFALSE 69636
// begin _x := ShiftX ( x , d , r + i ) ;
69481: LD_ADDR_VAR 0 5
69485: PUSH
69486: LD_VAR 0 4
69490: PPUSH
69491: LD_VAR 0 8
69495: PPUSH
69496: LD_VAR 0 9
69500: PUSH
69501: LD_VAR 0 10
69505: PLUS
69506: PPUSH
69507: CALL_OW 272
69511: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69512: LD_ADDR_VAR 0 7
69516: PUSH
69517: LD_VAR 0 6
69521: PPUSH
69522: LD_VAR 0 8
69526: PPUSH
69527: LD_VAR 0 9
69531: PUSH
69532: LD_VAR 0 10
69536: PLUS
69537: PPUSH
69538: CALL_OW 273
69542: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69543: LD_VAR 0 5
69547: PPUSH
69548: LD_VAR 0 7
69552: PPUSH
69553: CALL_OW 488
69557: PUSH
69558: LD_VAR 0 5
69562: PPUSH
69563: LD_VAR 0 7
69567: PPUSH
69568: CALL_OW 428
69572: PPUSH
69573: CALL_OW 247
69577: PUSH
69578: LD_INT 3
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: IN
69588: NOT
69589: AND
69590: IFFALSE 69634
// begin ComMoveXY ( unit , _x , _y ) ;
69592: LD_VAR 0 1
69596: PPUSH
69597: LD_VAR 0 5
69601: PPUSH
69602: LD_VAR 0 7
69606: PPUSH
69607: CALL_OW 111
// result := [ _x , _y ] ;
69611: LD_ADDR_VAR 0 3
69615: PUSH
69616: LD_VAR 0 5
69620: PUSH
69621: LD_VAR 0 7
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: ST_TO_ADDR
// exit ;
69630: POP
69631: POP
69632: GO 69638
// end ; end ;
69634: GO 69478
69636: POP
69637: POP
// end ;
69638: LD_VAR 0 3
69642: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69643: LD_INT 0
69645: PPUSH
69646: PPUSH
69647: PPUSH
// result := 0 ;
69648: LD_ADDR_VAR 0 3
69652: PUSH
69653: LD_INT 0
69655: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69656: LD_VAR 0 1
69660: PUSH
69661: LD_INT 0
69663: LESS
69664: PUSH
69665: LD_VAR 0 1
69669: PUSH
69670: LD_INT 8
69672: GREATER
69673: OR
69674: PUSH
69675: LD_VAR 0 2
69679: PUSH
69680: LD_INT 0
69682: LESS
69683: OR
69684: PUSH
69685: LD_VAR 0 2
69689: PUSH
69690: LD_INT 8
69692: GREATER
69693: OR
69694: IFFALSE 69698
// exit ;
69696: GO 69773
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69698: LD_ADDR_VAR 0 4
69702: PUSH
69703: LD_INT 22
69705: PUSH
69706: LD_VAR 0 2
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PPUSH
69715: CALL_OW 69
69719: PUSH
69720: FOR_IN
69721: IFFALSE 69771
// begin un := UnitShoot ( i ) ;
69723: LD_ADDR_VAR 0 5
69727: PUSH
69728: LD_VAR 0 4
69732: PPUSH
69733: CALL_OW 504
69737: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69738: LD_VAR 0 5
69742: PPUSH
69743: CALL_OW 255
69747: PUSH
69748: LD_VAR 0 1
69752: EQUAL
69753: IFFALSE 69769
// begin result := un ;
69755: LD_ADDR_VAR 0 3
69759: PUSH
69760: LD_VAR 0 5
69764: ST_TO_ADDR
// exit ;
69765: POP
69766: POP
69767: GO 69773
// end ; end ;
69769: GO 69720
69771: POP
69772: POP
// end ;
69773: LD_VAR 0 3
69777: RET
// export function GetCargoBay ( units ) ; begin
69778: LD_INT 0
69780: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69781: LD_ADDR_VAR 0 2
69785: PUSH
69786: LD_VAR 0 1
69790: PPUSH
69791: LD_INT 2
69793: PUSH
69794: LD_INT 34
69796: PUSH
69797: LD_INT 12
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 34
69806: PUSH
69807: LD_INT 51
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 34
69816: PUSH
69817: LD_INT 32
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 34
69826: PUSH
69827: LD_INT 89
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: PPUSH
69841: CALL_OW 72
69845: ST_TO_ADDR
// end ;
69846: LD_VAR 0 2
69850: RET
// export function Negate ( value ) ; begin
69851: LD_INT 0
69853: PPUSH
// result := not value ;
69854: LD_ADDR_VAR 0 2
69858: PUSH
69859: LD_VAR 0 1
69863: NOT
69864: ST_TO_ADDR
// end ;
69865: LD_VAR 0 2
69869: RET
// export function Inc ( value ) ; begin
69870: LD_INT 0
69872: PPUSH
// result := value + 1 ;
69873: LD_ADDR_VAR 0 2
69877: PUSH
69878: LD_VAR 0 1
69882: PUSH
69883: LD_INT 1
69885: PLUS
69886: ST_TO_ADDR
// end ;
69887: LD_VAR 0 2
69891: RET
// export function Dec ( value ) ; begin
69892: LD_INT 0
69894: PPUSH
// result := value - 1 ;
69895: LD_ADDR_VAR 0 2
69899: PUSH
69900: LD_VAR 0 1
69904: PUSH
69905: LD_INT 1
69907: MINUS
69908: ST_TO_ADDR
// end ;
69909: LD_VAR 0 2
69913: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69914: LD_INT 0
69916: PPUSH
69917: PPUSH
69918: PPUSH
69919: PPUSH
69920: PPUSH
69921: PPUSH
69922: PPUSH
69923: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69924: LD_VAR 0 1
69928: PPUSH
69929: LD_VAR 0 2
69933: PPUSH
69934: CALL_OW 488
69938: NOT
69939: PUSH
69940: LD_VAR 0 3
69944: PPUSH
69945: LD_VAR 0 4
69949: PPUSH
69950: CALL_OW 488
69954: NOT
69955: OR
69956: IFFALSE 69969
// begin result := - 1 ;
69958: LD_ADDR_VAR 0 5
69962: PUSH
69963: LD_INT 1
69965: NEG
69966: ST_TO_ADDR
// exit ;
69967: GO 70204
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69969: LD_ADDR_VAR 0 12
69973: PUSH
69974: LD_VAR 0 1
69978: PPUSH
69979: LD_VAR 0 2
69983: PPUSH
69984: LD_VAR 0 3
69988: PPUSH
69989: LD_VAR 0 4
69993: PPUSH
69994: CALL 69054 0 4
69998: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69999: LD_ADDR_VAR 0 11
70003: PUSH
70004: LD_VAR 0 1
70008: PPUSH
70009: LD_VAR 0 2
70013: PPUSH
70014: LD_VAR 0 12
70018: PUSH
70019: LD_INT 1
70021: ARRAY
70022: PPUSH
70023: LD_VAR 0 12
70027: PUSH
70028: LD_INT 2
70030: ARRAY
70031: PPUSH
70032: CALL_OW 298
70036: ST_TO_ADDR
// distance := 9999 ;
70037: LD_ADDR_VAR 0 10
70041: PUSH
70042: LD_INT 9999
70044: ST_TO_ADDR
// for i := 0 to 5 do
70045: LD_ADDR_VAR 0 6
70049: PUSH
70050: DOUBLE
70051: LD_INT 0
70053: DEC
70054: ST_TO_ADDR
70055: LD_INT 5
70057: PUSH
70058: FOR_TO
70059: IFFALSE 70202
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70061: LD_ADDR_VAR 0 7
70065: PUSH
70066: LD_VAR 0 1
70070: PPUSH
70071: LD_VAR 0 6
70075: PPUSH
70076: LD_VAR 0 11
70080: PPUSH
70081: CALL_OW 272
70085: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70086: LD_ADDR_VAR 0 8
70090: PUSH
70091: LD_VAR 0 2
70095: PPUSH
70096: LD_VAR 0 6
70100: PPUSH
70101: LD_VAR 0 11
70105: PPUSH
70106: CALL_OW 273
70110: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70111: LD_VAR 0 7
70115: PPUSH
70116: LD_VAR 0 8
70120: PPUSH
70121: CALL_OW 488
70125: NOT
70126: IFFALSE 70130
// continue ;
70128: GO 70058
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70130: LD_ADDR_VAR 0 9
70134: PUSH
70135: LD_VAR 0 12
70139: PUSH
70140: LD_INT 1
70142: ARRAY
70143: PPUSH
70144: LD_VAR 0 12
70148: PUSH
70149: LD_INT 2
70151: ARRAY
70152: PPUSH
70153: LD_VAR 0 7
70157: PPUSH
70158: LD_VAR 0 8
70162: PPUSH
70163: CALL_OW 298
70167: ST_TO_ADDR
// if tmp < distance then
70168: LD_VAR 0 9
70172: PUSH
70173: LD_VAR 0 10
70177: LESS
70178: IFFALSE 70200
// begin result := i ;
70180: LD_ADDR_VAR 0 5
70184: PUSH
70185: LD_VAR 0 6
70189: ST_TO_ADDR
// distance := tmp ;
70190: LD_ADDR_VAR 0 10
70194: PUSH
70195: LD_VAR 0 9
70199: ST_TO_ADDR
// end ; end ;
70200: GO 70058
70202: POP
70203: POP
// end ;
70204: LD_VAR 0 5
70208: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70209: LD_INT 0
70211: PPUSH
70212: PPUSH
// if not driver or not IsInUnit ( driver ) then
70213: LD_VAR 0 1
70217: NOT
70218: PUSH
70219: LD_VAR 0 1
70223: PPUSH
70224: CALL_OW 310
70228: NOT
70229: OR
70230: IFFALSE 70234
// exit ;
70232: GO 70324
// vehicle := IsInUnit ( driver ) ;
70234: LD_ADDR_VAR 0 3
70238: PUSH
70239: LD_VAR 0 1
70243: PPUSH
70244: CALL_OW 310
70248: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70249: LD_VAR 0 1
70253: PPUSH
70254: LD_STRING \
70256: PUSH
70257: LD_INT 0
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: LD_INT 0
70271: PUSH
70272: LD_INT 0
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: PUSH
70284: LD_STRING E
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_VAR 0 3
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PPUSH
70320: CALL_OW 446
// end ;
70324: LD_VAR 0 2
70328: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70329: LD_INT 0
70331: PPUSH
70332: PPUSH
// if not driver or not IsInUnit ( driver ) then
70333: LD_VAR 0 1
70337: NOT
70338: PUSH
70339: LD_VAR 0 1
70343: PPUSH
70344: CALL_OW 310
70348: NOT
70349: OR
70350: IFFALSE 70354
// exit ;
70352: GO 70444
// vehicle := IsInUnit ( driver ) ;
70354: LD_ADDR_VAR 0 3
70358: PUSH
70359: LD_VAR 0 1
70363: PPUSH
70364: CALL_OW 310
70368: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70369: LD_VAR 0 1
70373: PPUSH
70374: LD_STRING \
70376: PUSH
70377: LD_INT 0
70379: PUSH
70380: LD_INT 0
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: LD_INT 0
70391: PUSH
70392: LD_INT 0
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: PUSH
70404: LD_STRING E
70406: PUSH
70407: LD_INT 0
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_VAR 0 3
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: LD_INT 0
70423: PUSH
70424: LD_INT 0
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PPUSH
70440: CALL_OW 447
// end ;
70444: LD_VAR 0 2
70448: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70449: LD_INT 0
70451: PPUSH
70452: PPUSH
70453: PPUSH
// tmp := [ ] ;
70454: LD_ADDR_VAR 0 5
70458: PUSH
70459: EMPTY
70460: ST_TO_ADDR
// for i in units do
70461: LD_ADDR_VAR 0 4
70465: PUSH
70466: LD_VAR 0 1
70470: PUSH
70471: FOR_IN
70472: IFFALSE 70510
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70474: LD_ADDR_VAR 0 5
70478: PUSH
70479: LD_VAR 0 5
70483: PPUSH
70484: LD_VAR 0 5
70488: PUSH
70489: LD_INT 1
70491: PLUS
70492: PPUSH
70493: LD_VAR 0 4
70497: PPUSH
70498: CALL_OW 256
70502: PPUSH
70503: CALL_OW 2
70507: ST_TO_ADDR
70508: GO 70471
70510: POP
70511: POP
// if not tmp then
70512: LD_VAR 0 5
70516: NOT
70517: IFFALSE 70521
// exit ;
70519: GO 70569
// if asc then
70521: LD_VAR 0 2
70525: IFFALSE 70549
// result := SortListByListAsc ( units , tmp ) else
70527: LD_ADDR_VAR 0 3
70531: PUSH
70532: LD_VAR 0 1
70536: PPUSH
70537: LD_VAR 0 5
70541: PPUSH
70542: CALL_OW 76
70546: ST_TO_ADDR
70547: GO 70569
// result := SortListByListDesc ( units , tmp ) ;
70549: LD_ADDR_VAR 0 3
70553: PUSH
70554: LD_VAR 0 1
70558: PPUSH
70559: LD_VAR 0 5
70563: PPUSH
70564: CALL_OW 77
70568: ST_TO_ADDR
// end ;
70569: LD_VAR 0 3
70573: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70574: LD_INT 0
70576: PPUSH
70577: PPUSH
// task := GetTaskList ( mech ) ;
70578: LD_ADDR_VAR 0 4
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: CALL_OW 437
70592: ST_TO_ADDR
// if not task then
70593: LD_VAR 0 4
70597: NOT
70598: IFFALSE 70602
// exit ;
70600: GO 70644
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70602: LD_ADDR_VAR 0 3
70606: PUSH
70607: LD_VAR 0 4
70611: PUSH
70612: LD_INT 1
70614: ARRAY
70615: PUSH
70616: LD_INT 1
70618: ARRAY
70619: PUSH
70620: LD_STRING r
70622: EQUAL
70623: PUSH
70624: LD_VAR 0 4
70628: PUSH
70629: LD_INT 1
70631: ARRAY
70632: PUSH
70633: LD_INT 4
70635: ARRAY
70636: PUSH
70637: LD_VAR 0 2
70641: EQUAL
70642: AND
70643: ST_TO_ADDR
// end ;
70644: LD_VAR 0 3
70648: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70649: LD_INT 0
70651: PPUSH
// SetDir ( unit , d ) ;
70652: LD_VAR 0 1
70656: PPUSH
70657: LD_VAR 0 4
70661: PPUSH
70662: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70666: LD_VAR 0 1
70670: PPUSH
70671: LD_VAR 0 2
70675: PPUSH
70676: LD_VAR 0 3
70680: PPUSH
70681: LD_VAR 0 5
70685: PPUSH
70686: CALL_OW 48
// end ;
70690: LD_VAR 0 6
70694: RET
// export function ToNaturalNumber ( number ) ; begin
70695: LD_INT 0
70697: PPUSH
// result := number div 1 ;
70698: LD_ADDR_VAR 0 2
70702: PUSH
70703: LD_VAR 0 1
70707: PUSH
70708: LD_INT 1
70710: DIV
70711: ST_TO_ADDR
// if number < 0 then
70712: LD_VAR 0 1
70716: PUSH
70717: LD_INT 0
70719: LESS
70720: IFFALSE 70730
// result := 0 ;
70722: LD_ADDR_VAR 0 2
70726: PUSH
70727: LD_INT 0
70729: ST_TO_ADDR
// end ;
70730: LD_VAR 0 2
70734: RET
// export function SortByClass ( units , class ) ; var un ; begin
70735: LD_INT 0
70737: PPUSH
70738: PPUSH
// if not units or not class then
70739: LD_VAR 0 1
70743: NOT
70744: PUSH
70745: LD_VAR 0 2
70749: NOT
70750: OR
70751: IFFALSE 70755
// exit ;
70753: GO 70850
// result := [ ] ;
70755: LD_ADDR_VAR 0 3
70759: PUSH
70760: EMPTY
70761: ST_TO_ADDR
// for un in units do
70762: LD_ADDR_VAR 0 4
70766: PUSH
70767: LD_VAR 0 1
70771: PUSH
70772: FOR_IN
70773: IFFALSE 70848
// if GetClass ( un ) = class then
70775: LD_VAR 0 4
70779: PPUSH
70780: CALL_OW 257
70784: PUSH
70785: LD_VAR 0 2
70789: EQUAL
70790: IFFALSE 70817
// result := Insert ( result , 1 , un ) else
70792: LD_ADDR_VAR 0 3
70796: PUSH
70797: LD_VAR 0 3
70801: PPUSH
70802: LD_INT 1
70804: PPUSH
70805: LD_VAR 0 4
70809: PPUSH
70810: CALL_OW 2
70814: ST_TO_ADDR
70815: GO 70846
// result := Replace ( result , result + 1 , un ) ;
70817: LD_ADDR_VAR 0 3
70821: PUSH
70822: LD_VAR 0 3
70826: PPUSH
70827: LD_VAR 0 3
70831: PUSH
70832: LD_INT 1
70834: PLUS
70835: PPUSH
70836: LD_VAR 0 4
70840: PPUSH
70841: CALL_OW 1
70845: ST_TO_ADDR
70846: GO 70772
70848: POP
70849: POP
// end ;
70850: LD_VAR 0 3
70854: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70855: LD_INT 0
70857: PPUSH
70858: PPUSH
70859: PPUSH
70860: PPUSH
70861: PPUSH
70862: PPUSH
70863: PPUSH
// result := [ ] ;
70864: LD_ADDR_VAR 0 4
70868: PUSH
70869: EMPTY
70870: ST_TO_ADDR
// if x - r < 0 then
70871: LD_VAR 0 1
70875: PUSH
70876: LD_VAR 0 3
70880: MINUS
70881: PUSH
70882: LD_INT 0
70884: LESS
70885: IFFALSE 70897
// min_x := 0 else
70887: LD_ADDR_VAR 0 8
70891: PUSH
70892: LD_INT 0
70894: ST_TO_ADDR
70895: GO 70913
// min_x := x - r ;
70897: LD_ADDR_VAR 0 8
70901: PUSH
70902: LD_VAR 0 1
70906: PUSH
70907: LD_VAR 0 3
70911: MINUS
70912: ST_TO_ADDR
// if y - r < 0 then
70913: LD_VAR 0 2
70917: PUSH
70918: LD_VAR 0 3
70922: MINUS
70923: PUSH
70924: LD_INT 0
70926: LESS
70927: IFFALSE 70939
// min_y := 0 else
70929: LD_ADDR_VAR 0 7
70933: PUSH
70934: LD_INT 0
70936: ST_TO_ADDR
70937: GO 70955
// min_y := y - r ;
70939: LD_ADDR_VAR 0 7
70943: PUSH
70944: LD_VAR 0 2
70948: PUSH
70949: LD_VAR 0 3
70953: MINUS
70954: ST_TO_ADDR
// max_x := x + r ;
70955: LD_ADDR_VAR 0 9
70959: PUSH
70960: LD_VAR 0 1
70964: PUSH
70965: LD_VAR 0 3
70969: PLUS
70970: ST_TO_ADDR
// max_y := y + r ;
70971: LD_ADDR_VAR 0 10
70975: PUSH
70976: LD_VAR 0 2
70980: PUSH
70981: LD_VAR 0 3
70985: PLUS
70986: ST_TO_ADDR
// for _x = min_x to max_x do
70987: LD_ADDR_VAR 0 5
70991: PUSH
70992: DOUBLE
70993: LD_VAR 0 8
70997: DEC
70998: ST_TO_ADDR
70999: LD_VAR 0 9
71003: PUSH
71004: FOR_TO
71005: IFFALSE 71106
// for _y = min_y to max_y do
71007: LD_ADDR_VAR 0 6
71011: PUSH
71012: DOUBLE
71013: LD_VAR 0 7
71017: DEC
71018: ST_TO_ADDR
71019: LD_VAR 0 10
71023: PUSH
71024: FOR_TO
71025: IFFALSE 71102
// begin if not ValidHex ( _x , _y ) then
71027: LD_VAR 0 5
71031: PPUSH
71032: LD_VAR 0 6
71036: PPUSH
71037: CALL_OW 488
71041: NOT
71042: IFFALSE 71046
// continue ;
71044: GO 71024
// if GetResourceTypeXY ( _x , _y ) then
71046: LD_VAR 0 5
71050: PPUSH
71051: LD_VAR 0 6
71055: PPUSH
71056: CALL_OW 283
71060: IFFALSE 71100
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71062: LD_ADDR_VAR 0 4
71066: PUSH
71067: LD_VAR 0 4
71071: PPUSH
71072: LD_VAR 0 4
71076: PUSH
71077: LD_INT 1
71079: PLUS
71080: PPUSH
71081: LD_VAR 0 5
71085: PUSH
71086: LD_VAR 0 6
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PPUSH
71095: CALL_OW 1
71099: ST_TO_ADDR
// end ;
71100: GO 71024
71102: POP
71103: POP
71104: GO 71004
71106: POP
71107: POP
// end ;
71108: LD_VAR 0 4
71112: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71113: LD_INT 0
71115: PPUSH
71116: PPUSH
71117: PPUSH
71118: PPUSH
71119: PPUSH
71120: PPUSH
71121: PPUSH
71122: PPUSH
// if not units then
71123: LD_VAR 0 1
71127: NOT
71128: IFFALSE 71132
// exit ;
71130: GO 71656
// result := UnitFilter ( units , [ f_ok ] ) ;
71132: LD_ADDR_VAR 0 3
71136: PUSH
71137: LD_VAR 0 1
71141: PPUSH
71142: LD_INT 50
71144: PUSH
71145: EMPTY
71146: LIST
71147: PPUSH
71148: CALL_OW 72
71152: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71153: LD_ADDR_VAR 0 8
71157: PUSH
71158: LD_VAR 0 1
71162: PUSH
71163: LD_INT 1
71165: ARRAY
71166: PPUSH
71167: CALL_OW 255
71171: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71172: LD_ADDR_VAR 0 10
71176: PUSH
71177: LD_INT 29
71179: PUSH
71180: LD_INT 91
71182: PUSH
71183: LD_INT 49
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: LIST
71190: ST_TO_ADDR
// if not result then
71191: LD_VAR 0 3
71195: NOT
71196: IFFALSE 71200
// exit ;
71198: GO 71656
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71200: LD_ADDR_VAR 0 5
71204: PUSH
71205: LD_INT 81
71207: PUSH
71208: LD_VAR 0 8
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PPUSH
71217: CALL_OW 69
71221: ST_TO_ADDR
// for i in result do
71222: LD_ADDR_VAR 0 4
71226: PUSH
71227: LD_VAR 0 3
71231: PUSH
71232: FOR_IN
71233: IFFALSE 71654
// begin tag := GetTag ( i ) + 1 ;
71235: LD_ADDR_VAR 0 9
71239: PUSH
71240: LD_VAR 0 4
71244: PPUSH
71245: CALL_OW 110
71249: PUSH
71250: LD_INT 1
71252: PLUS
71253: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71254: LD_ADDR_VAR 0 7
71258: PUSH
71259: LD_VAR 0 4
71263: PPUSH
71264: CALL_OW 250
71268: PPUSH
71269: LD_VAR 0 4
71273: PPUSH
71274: CALL_OW 251
71278: PPUSH
71279: LD_INT 6
71281: PPUSH
71282: CALL 70855 0 3
71286: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71287: LD_VAR 0 4
71291: PPUSH
71292: CALL_OW 247
71296: PUSH
71297: LD_INT 2
71299: EQUAL
71300: PUSH
71301: LD_VAR 0 7
71305: AND
71306: PUSH
71307: LD_VAR 0 4
71311: PPUSH
71312: CALL_OW 264
71316: PUSH
71317: LD_VAR 0 10
71321: IN
71322: NOT
71323: AND
71324: IFFALSE 71363
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71326: LD_VAR 0 4
71330: PPUSH
71331: LD_VAR 0 7
71335: PUSH
71336: LD_INT 1
71338: ARRAY
71339: PUSH
71340: LD_INT 1
71342: ARRAY
71343: PPUSH
71344: LD_VAR 0 7
71348: PUSH
71349: LD_INT 1
71351: ARRAY
71352: PUSH
71353: LD_INT 2
71355: ARRAY
71356: PPUSH
71357: CALL_OW 116
71361: GO 71652
// if path > tag then
71363: LD_VAR 0 2
71367: PUSH
71368: LD_VAR 0 9
71372: GREATER
71373: IFFALSE 71581
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71375: LD_ADDR_VAR 0 6
71379: PUSH
71380: LD_VAR 0 5
71384: PPUSH
71385: LD_INT 91
71387: PUSH
71388: LD_VAR 0 4
71392: PUSH
71393: LD_INT 8
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: LIST
71400: PPUSH
71401: CALL_OW 72
71405: ST_TO_ADDR
// if nearEnemy then
71406: LD_VAR 0 6
71410: IFFALSE 71479
// begin if GetWeapon ( i ) = ru_time_lapser then
71412: LD_VAR 0 4
71416: PPUSH
71417: CALL_OW 264
71421: PUSH
71422: LD_INT 49
71424: EQUAL
71425: IFFALSE 71453
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71427: LD_VAR 0 4
71431: PPUSH
71432: LD_VAR 0 6
71436: PPUSH
71437: LD_VAR 0 4
71441: PPUSH
71442: CALL_OW 74
71446: PPUSH
71447: CALL_OW 112
71451: GO 71477
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71453: LD_VAR 0 4
71457: PPUSH
71458: LD_VAR 0 6
71462: PPUSH
71463: LD_VAR 0 4
71467: PPUSH
71468: CALL_OW 74
71472: PPUSH
71473: CALL_OW 115
// end else
71477: GO 71579
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71479: LD_VAR 0 4
71483: PPUSH
71484: LD_VAR 0 2
71488: PUSH
71489: LD_VAR 0 9
71493: ARRAY
71494: PUSH
71495: LD_INT 1
71497: ARRAY
71498: PPUSH
71499: LD_VAR 0 2
71503: PUSH
71504: LD_VAR 0 9
71508: ARRAY
71509: PUSH
71510: LD_INT 2
71512: ARRAY
71513: PPUSH
71514: CALL_OW 297
71518: PUSH
71519: LD_INT 6
71521: GREATER
71522: IFFALSE 71565
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71524: LD_VAR 0 4
71528: PPUSH
71529: LD_VAR 0 2
71533: PUSH
71534: LD_VAR 0 9
71538: ARRAY
71539: PUSH
71540: LD_INT 1
71542: ARRAY
71543: PPUSH
71544: LD_VAR 0 2
71548: PUSH
71549: LD_VAR 0 9
71553: ARRAY
71554: PUSH
71555: LD_INT 2
71557: ARRAY
71558: PPUSH
71559: CALL_OW 114
71563: GO 71579
// SetTag ( i , tag ) ;
71565: LD_VAR 0 4
71569: PPUSH
71570: LD_VAR 0 9
71574: PPUSH
71575: CALL_OW 109
// end else
71579: GO 71652
// if enemy then
71581: LD_VAR 0 5
71585: IFFALSE 71652
// begin if GetWeapon ( i ) = ru_time_lapser then
71587: LD_VAR 0 4
71591: PPUSH
71592: CALL_OW 264
71596: PUSH
71597: LD_INT 49
71599: EQUAL
71600: IFFALSE 71628
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71602: LD_VAR 0 4
71606: PPUSH
71607: LD_VAR 0 5
71611: PPUSH
71612: LD_VAR 0 4
71616: PPUSH
71617: CALL_OW 74
71621: PPUSH
71622: CALL_OW 112
71626: GO 71652
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71628: LD_VAR 0 4
71632: PPUSH
71633: LD_VAR 0 5
71637: PPUSH
71638: LD_VAR 0 4
71642: PPUSH
71643: CALL_OW 74
71647: PPUSH
71648: CALL_OW 115
// end ; end ;
71652: GO 71232
71654: POP
71655: POP
// end ;
71656: LD_VAR 0 3
71660: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71661: LD_INT 0
71663: PPUSH
71664: PPUSH
71665: PPUSH
// if not unit or IsInUnit ( unit ) then
71666: LD_VAR 0 1
71670: NOT
71671: PUSH
71672: LD_VAR 0 1
71676: PPUSH
71677: CALL_OW 310
71681: OR
71682: IFFALSE 71686
// exit ;
71684: GO 71777
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71686: LD_ADDR_VAR 0 4
71690: PUSH
71691: LD_VAR 0 1
71695: PPUSH
71696: CALL_OW 250
71700: PPUSH
71701: LD_VAR 0 2
71705: PPUSH
71706: LD_INT 1
71708: PPUSH
71709: CALL_OW 272
71713: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71714: LD_ADDR_VAR 0 5
71718: PUSH
71719: LD_VAR 0 1
71723: PPUSH
71724: CALL_OW 251
71728: PPUSH
71729: LD_VAR 0 2
71733: PPUSH
71734: LD_INT 1
71736: PPUSH
71737: CALL_OW 273
71741: ST_TO_ADDR
// if ValidHex ( x , y ) then
71742: LD_VAR 0 4
71746: PPUSH
71747: LD_VAR 0 5
71751: PPUSH
71752: CALL_OW 488
71756: IFFALSE 71777
// ComTurnXY ( unit , x , y ) ;
71758: LD_VAR 0 1
71762: PPUSH
71763: LD_VAR 0 4
71767: PPUSH
71768: LD_VAR 0 5
71772: PPUSH
71773: CALL_OW 118
// end ;
71777: LD_VAR 0 3
71781: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71782: LD_INT 0
71784: PPUSH
71785: PPUSH
// result := false ;
71786: LD_ADDR_VAR 0 3
71790: PUSH
71791: LD_INT 0
71793: ST_TO_ADDR
// if not units then
71794: LD_VAR 0 2
71798: NOT
71799: IFFALSE 71803
// exit ;
71801: GO 71848
// for i in units do
71803: LD_ADDR_VAR 0 4
71807: PUSH
71808: LD_VAR 0 2
71812: PUSH
71813: FOR_IN
71814: IFFALSE 71846
// if See ( side , i ) then
71816: LD_VAR 0 1
71820: PPUSH
71821: LD_VAR 0 4
71825: PPUSH
71826: CALL_OW 292
71830: IFFALSE 71844
// begin result := true ;
71832: LD_ADDR_VAR 0 3
71836: PUSH
71837: LD_INT 1
71839: ST_TO_ADDR
// exit ;
71840: POP
71841: POP
71842: GO 71848
// end ;
71844: GO 71813
71846: POP
71847: POP
// end ;
71848: LD_VAR 0 3
71852: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71853: LD_INT 0
71855: PPUSH
71856: PPUSH
71857: PPUSH
71858: PPUSH
// if not unit or not points then
71859: LD_VAR 0 1
71863: NOT
71864: PUSH
71865: LD_VAR 0 2
71869: NOT
71870: OR
71871: IFFALSE 71875
// exit ;
71873: GO 71965
// dist := 99999 ;
71875: LD_ADDR_VAR 0 5
71879: PUSH
71880: LD_INT 99999
71882: ST_TO_ADDR
// for i in points do
71883: LD_ADDR_VAR 0 4
71887: PUSH
71888: LD_VAR 0 2
71892: PUSH
71893: FOR_IN
71894: IFFALSE 71963
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71896: LD_ADDR_VAR 0 6
71900: PUSH
71901: LD_VAR 0 1
71905: PPUSH
71906: LD_VAR 0 4
71910: PUSH
71911: LD_INT 1
71913: ARRAY
71914: PPUSH
71915: LD_VAR 0 4
71919: PUSH
71920: LD_INT 2
71922: ARRAY
71923: PPUSH
71924: CALL_OW 297
71928: ST_TO_ADDR
// if tmpDist < dist then
71929: LD_VAR 0 6
71933: PUSH
71934: LD_VAR 0 5
71938: LESS
71939: IFFALSE 71961
// begin result := i ;
71941: LD_ADDR_VAR 0 3
71945: PUSH
71946: LD_VAR 0 4
71950: ST_TO_ADDR
// dist := tmpDist ;
71951: LD_ADDR_VAR 0 5
71955: PUSH
71956: LD_VAR 0 6
71960: ST_TO_ADDR
// end ; end ;
71961: GO 71893
71963: POP
71964: POP
// end ;
71965: LD_VAR 0 3
71969: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71970: LD_INT 0
71972: PPUSH
// uc_side := side ;
71973: LD_ADDR_OWVAR 20
71977: PUSH
71978: LD_VAR 0 1
71982: ST_TO_ADDR
// uc_nation := 3 ;
71983: LD_ADDR_OWVAR 21
71987: PUSH
71988: LD_INT 3
71990: ST_TO_ADDR
// vc_chassis := 25 ;
71991: LD_ADDR_OWVAR 37
71995: PUSH
71996: LD_INT 25
71998: ST_TO_ADDR
// vc_engine := engine_siberite ;
71999: LD_ADDR_OWVAR 39
72003: PUSH
72004: LD_INT 3
72006: ST_TO_ADDR
// vc_control := control_computer ;
72007: LD_ADDR_OWVAR 38
72011: PUSH
72012: LD_INT 3
72014: ST_TO_ADDR
// vc_weapon := 59 ;
72015: LD_ADDR_OWVAR 40
72019: PUSH
72020: LD_INT 59
72022: ST_TO_ADDR
// result := CreateVehicle ;
72023: LD_ADDR_VAR 0 5
72027: PUSH
72028: CALL_OW 45
72032: ST_TO_ADDR
// SetDir ( result , d ) ;
72033: LD_VAR 0 5
72037: PPUSH
72038: LD_VAR 0 4
72042: PPUSH
72043: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72047: LD_VAR 0 5
72051: PPUSH
72052: LD_VAR 0 2
72056: PPUSH
72057: LD_VAR 0 3
72061: PPUSH
72062: LD_INT 0
72064: PPUSH
72065: CALL_OW 48
// end ;
72069: LD_VAR 0 5
72073: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72074: LD_INT 0
72076: PPUSH
72077: PPUSH
72078: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72079: LD_ADDR_VAR 0 2
72083: PUSH
72084: LD_INT 0
72086: PUSH
72087: LD_INT 0
72089: PUSH
72090: LD_INT 0
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72102: LD_VAR 0 1
72106: NOT
72107: PUSH
72108: LD_VAR 0 1
72112: PPUSH
72113: CALL_OW 264
72117: PUSH
72118: LD_INT 12
72120: PUSH
72121: LD_INT 51
72123: PUSH
72124: LD_INT 32
72126: PUSH
72127: LD_INT 89
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: IN
72136: NOT
72137: OR
72138: IFFALSE 72142
// exit ;
72140: GO 72240
// for i := 1 to 3 do
72142: LD_ADDR_VAR 0 3
72146: PUSH
72147: DOUBLE
72148: LD_INT 1
72150: DEC
72151: ST_TO_ADDR
72152: LD_INT 3
72154: PUSH
72155: FOR_TO
72156: IFFALSE 72238
// begin tmp := GetCargo ( cargo , i ) ;
72158: LD_ADDR_VAR 0 4
72162: PUSH
72163: LD_VAR 0 1
72167: PPUSH
72168: LD_VAR 0 3
72172: PPUSH
72173: CALL_OW 289
72177: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72178: LD_ADDR_VAR 0 2
72182: PUSH
72183: LD_VAR 0 2
72187: PPUSH
72188: LD_VAR 0 3
72192: PPUSH
72193: LD_VAR 0 4
72197: PPUSH
72198: CALL_OW 1
72202: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72203: LD_ADDR_VAR 0 2
72207: PUSH
72208: LD_VAR 0 2
72212: PPUSH
72213: LD_INT 4
72215: PPUSH
72216: LD_VAR 0 2
72220: PUSH
72221: LD_INT 4
72223: ARRAY
72224: PUSH
72225: LD_VAR 0 4
72229: PLUS
72230: PPUSH
72231: CALL_OW 1
72235: ST_TO_ADDR
// end ;
72236: GO 72155
72238: POP
72239: POP
// end ;
72240: LD_VAR 0 2
72244: RET
// export function Length ( array ) ; begin
72245: LD_INT 0
72247: PPUSH
// result := array + 0 ;
72248: LD_ADDR_VAR 0 2
72252: PUSH
72253: LD_VAR 0 1
72257: PUSH
72258: LD_INT 0
72260: PLUS
72261: ST_TO_ADDR
// end ;
72262: LD_VAR 0 2
72266: RET
// export function PrepareArray ( array ) ; begin
72267: LD_INT 0
72269: PPUSH
// result := array diff 0 ;
72270: LD_ADDR_VAR 0 2
72274: PUSH
72275: LD_VAR 0 1
72279: PUSH
72280: LD_INT 0
72282: DIFF
72283: ST_TO_ADDR
// if not result [ 1 ] then
72284: LD_VAR 0 2
72288: PUSH
72289: LD_INT 1
72291: ARRAY
72292: NOT
72293: IFFALSE 72313
// result := Delete ( result , 1 ) ;
72295: LD_ADDR_VAR 0 2
72299: PUSH
72300: LD_VAR 0 2
72304: PPUSH
72305: LD_INT 1
72307: PPUSH
72308: CALL_OW 3
72312: ST_TO_ADDR
// end ;
72313: LD_VAR 0 2
72317: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72318: LD_INT 0
72320: PPUSH
72321: PPUSH
72322: PPUSH
72323: PPUSH
// sibRocketRange := 25 ;
72324: LD_ADDR_VAR 0 6
72328: PUSH
72329: LD_INT 25
72331: ST_TO_ADDR
// result := false ;
72332: LD_ADDR_VAR 0 4
72336: PUSH
72337: LD_INT 0
72339: ST_TO_ADDR
// for i := 0 to 5 do
72340: LD_ADDR_VAR 0 5
72344: PUSH
72345: DOUBLE
72346: LD_INT 0
72348: DEC
72349: ST_TO_ADDR
72350: LD_INT 5
72352: PUSH
72353: FOR_TO
72354: IFFALSE 72421
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72356: LD_VAR 0 1
72360: PPUSH
72361: LD_VAR 0 5
72365: PPUSH
72366: LD_VAR 0 6
72370: PPUSH
72371: CALL_OW 272
72375: PPUSH
72376: LD_VAR 0 2
72380: PPUSH
72381: LD_VAR 0 5
72385: PPUSH
72386: LD_VAR 0 6
72390: PPUSH
72391: CALL_OW 273
72395: PPUSH
72396: LD_VAR 0 3
72400: PPUSH
72401: CALL_OW 309
72405: IFFALSE 72419
// begin result := true ;
72407: LD_ADDR_VAR 0 4
72411: PUSH
72412: LD_INT 1
72414: ST_TO_ADDR
// exit ;
72415: POP
72416: POP
72417: GO 72423
// end ;
72419: GO 72353
72421: POP
72422: POP
// end ;
72423: LD_VAR 0 4
72427: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72428: LD_INT 0
72430: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72431: LD_VAR 0 1
72435: PPUSH
72436: LD_VAR 0 2
72440: PPUSH
72441: LD_INT 0
72443: PPUSH
72444: LD_INT 0
72446: PPUSH
72447: LD_INT 1
72449: PPUSH
72450: LD_INT 0
72452: PPUSH
72453: CALL_OW 587
// end ; end_of_file
72457: LD_VAR 0 3
72461: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72462: LD_VAR 0 1
72466: PUSH
72467: LD_INT 200
72469: DOUBLE
72470: GREATEREQUAL
72471: IFFALSE 72479
72473: LD_INT 299
72475: DOUBLE
72476: LESSEQUAL
72477: IFTRUE 72481
72479: GO 72513
72481: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72482: LD_VAR 0 1
72486: PPUSH
72487: LD_VAR 0 2
72491: PPUSH
72492: LD_VAR 0 3
72496: PPUSH
72497: LD_VAR 0 4
72501: PPUSH
72502: LD_VAR 0 5
72506: PPUSH
72507: CALL 27128 0 5
72511: GO 72590
72513: LD_INT 300
72515: DOUBLE
72516: GREATEREQUAL
72517: IFFALSE 72525
72519: LD_INT 399
72521: DOUBLE
72522: LESSEQUAL
72523: IFTRUE 72527
72525: GO 72589
72527: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72528: LD_VAR 0 1
72532: PPUSH
72533: LD_VAR 0 2
72537: PPUSH
72538: LD_VAR 0 3
72542: PPUSH
72543: LD_VAR 0 4
72547: PPUSH
72548: LD_VAR 0 5
72552: PPUSH
72553: LD_VAR 0 6
72557: PPUSH
72558: LD_VAR 0 7
72562: PPUSH
72563: LD_VAR 0 8
72567: PPUSH
72568: LD_VAR 0 9
72572: PPUSH
72573: LD_VAR 0 10
72577: PPUSH
72578: LD_VAR 0 11
72582: PPUSH
72583: CALL 23461 0 11
72587: GO 72590
72589: POP
// end ;
72590: PPOPN 11
72592: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72593: LD_VAR 0 1
72597: PPUSH
72598: LD_VAR 0 2
72602: PPUSH
72603: LD_VAR 0 3
72607: PPUSH
72608: LD_VAR 0 4
72612: PPUSH
72613: LD_VAR 0 5
72617: PPUSH
72618: CALL 26864 0 5
// end ; end_of_file
72622: PPOPN 5
72624: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72625: LD_VAR 0 1
72629: PPUSH
72630: LD_VAR 0 2
72634: PPUSH
72635: LD_VAR 0 3
72639: PPUSH
72640: LD_VAR 0 4
72644: PPUSH
72645: LD_VAR 0 5
72649: PPUSH
72650: LD_VAR 0 6
72654: PPUSH
72655: CALL 11081 0 6
// end ;
72659: PPOPN 6
72661: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72662: LD_INT 0
72664: PPUSH
// begin if not units then
72665: LD_VAR 0 1
72669: NOT
72670: IFFALSE 72674
// exit ;
72672: GO 72674
// end ;
72674: PPOPN 7
72676: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72677: CALL 10975 0 0
// end ;
72681: PPOPN 1
72683: END
