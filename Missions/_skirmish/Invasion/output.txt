// starting begin InitSettings ;
   0: CALL 2932 0 0
// InitGame ;
   4: CALL 2970 0 0
// InitDisplay ;
   8: CALL 9518 0 0
// end ; end_of_file
  12: END
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// if pos < 1 then
  19: LD_VAR 0 2
  23: PUSH
  24: LD_INT 1
  26: LESS
  27: IFFALSE 31
// exit ;
  29: GO 334
// if pos = 1 then
  31: LD_VAR 0 2
  35: PUSH
  36: LD_INT 1
  38: EQUAL
  39: IFFALSE 72
// result := Replace ( arr , pos [ 1 ] , value ) else
  41: LD_ADDR_VAR 0 4
  45: PUSH
  46: LD_VAR 0 1
  50: PPUSH
  51: LD_VAR 0 2
  55: PUSH
  56: LD_INT 1
  58: ARRAY
  59: PPUSH
  60: LD_VAR 0 3
  64: PPUSH
  65: CALL_OW 1
  69: ST_TO_ADDR
  70: GO 334
// begin tmp := arr ;
  72: LD_ADDR_VAR 0 6
  76: PUSH
  77: LD_VAR 0 1
  81: ST_TO_ADDR
// s_arr := [ tmp ] ;
  82: LD_ADDR_VAR 0 7
  86: PUSH
  87: LD_VAR 0 6
  91: PUSH
  92: EMPTY
  93: LIST
  94: ST_TO_ADDR
// for i = 1 to pos - 1 do
  95: LD_ADDR_VAR 0 5
  99: PUSH
 100: DOUBLE
 101: LD_INT 1
 103: DEC
 104: ST_TO_ADDR
 105: LD_VAR 0 2
 109: PUSH
 110: LD_INT 1
 112: MINUS
 113: PUSH
 114: FOR_TO
 115: IFFALSE 160
// begin tmp := tmp [ pos [ i ] ] ;
 117: LD_ADDR_VAR 0 6
 121: PUSH
 122: LD_VAR 0 6
 126: PUSH
 127: LD_VAR 0 2
 131: PUSH
 132: LD_VAR 0 5
 136: ARRAY
 137: ARRAY
 138: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
 139: LD_ADDR_VAR 0 7
 143: PUSH
 144: LD_VAR 0 7
 148: PUSH
 149: LD_VAR 0 6
 153: PUSH
 154: EMPTY
 155: LIST
 156: ADD
 157: ST_TO_ADDR
// end ;
 158: GO 114
 160: POP
 161: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
 162: LD_ADDR_VAR 0 6
 166: PUSH
 167: LD_VAR 0 6
 171: PPUSH
 172: LD_VAR 0 2
 176: PUSH
 177: LD_VAR 0 2
 181: ARRAY
 182: PPUSH
 183: LD_VAR 0 3
 187: PPUSH
 188: CALL_OW 1
 192: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
 193: LD_ADDR_VAR 0 7
 197: PUSH
 198: LD_VAR 0 7
 202: PPUSH
 203: LD_VAR 0 7
 207: PPUSH
 208: LD_VAR 0 6
 212: PPUSH
 213: CALL_OW 1
 217: ST_TO_ADDR
// for i = s_arr downto 2 do
 218: LD_ADDR_VAR 0 5
 222: PUSH
 223: DOUBLE
 224: LD_VAR 0 7
 228: INC
 229: ST_TO_ADDR
 230: LD_INT 2
 232: PUSH
 233: FOR_DOWNTO
 234: IFFALSE 318
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
 236: LD_ADDR_VAR 0 6
 240: PUSH
 241: LD_VAR 0 7
 245: PUSH
 246: LD_VAR 0 5
 250: PUSH
 251: LD_INT 1
 253: MINUS
 254: ARRAY
 255: PPUSH
 256: LD_VAR 0 2
 260: PUSH
 261: LD_VAR 0 5
 265: PUSH
 266: LD_INT 1
 268: MINUS
 269: ARRAY
 270: PPUSH
 271: LD_VAR 0 7
 275: PUSH
 276: LD_VAR 0 5
 280: ARRAY
 281: PPUSH
 282: CALL_OW 1
 286: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
 287: LD_ADDR_VAR 0 7
 291: PUSH
 292: LD_VAR 0 7
 296: PPUSH
 297: LD_VAR 0 5
 301: PUSH
 302: LD_INT 1
 304: MINUS
 305: PPUSH
 306: LD_VAR 0 6
 310: PPUSH
 311: CALL_OW 1
 315: ST_TO_ADDR
// end ;
 316: GO 233
 318: POP
 319: POP
// result := s_arr [ 1 ] ;
 320: LD_ADDR_VAR 0 4
 324: PUSH
 325: LD_VAR 0 7
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: ST_TO_ADDR
// end ; end ;
 334: LD_VAR 0 4
 338: RET
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// team := [ ] ;
 345: LD_ADDR_VAR 0 8
 349: PUSH
 350: EMPTY
 351: ST_TO_ADDR
// playerSquad := [ ] ;
 352: LD_ADDR_EXP 12
 356: PUSH
 357: EMPTY
 358: ST_TO_ADDR
// uc_side := nation ;
 359: LD_ADDR_OWVAR 20
 363: PUSH
 364: LD_VAR 0 1
 368: ST_TO_ADDR
// uc_nation := nation ;
 369: LD_ADDR_OWVAR 21
 373: PUSH
 374: LD_VAR 0 1
 378: ST_TO_ADDR
// hc_importance := 100 ;
 379: LD_ADDR_OWVAR 32
 383: PUSH
 384: LD_INT 100
 386: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 387: LD_INT 0
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
 402: LD_ADDR_VAR 0 8
 406: PUSH
 407: LD_VAR 0 8
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 44
 419: PPUSH
 420: CALL_OW 2
 424: ST_TO_ADDR
// hc_importance := 0 ;
 425: LD_ADDR_OWVAR 32
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to num - 1 do
 433: LD_ADDR_VAR 0 7
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 1
 450: MINUS
 451: PUSH
 452: FOR_TO
 453: IFFALSE 511
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 455: LD_INT 0
 457: PPUSH
 458: LD_VAR 0 7
 462: PUSH
 463: LD_VAR 0 3
 467: PUSH
 468: LD_INT 4
 470: DIVREAL
 471: DIV
 472: PUSH
 473: LD_INT 1
 475: PLUS
 476: PPUSH
 477: LD_VAR 0 2
 481: PPUSH
 482: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 486: LD_ADDR_VAR 0 8
 490: PUSH
 491: LD_VAR 0 8
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: CALL_OW 44
 503: PPUSH
 504: CALL_OW 2
 508: ST_TO_ADDR
// end ;
 509: GO 452
 511: POP
 512: POP
// for i in team do
 513: LD_ADDR_VAR 0 7
 517: PUSH
 518: LD_VAR 0 8
 522: PUSH
 523: FOR_IN
 524: IFFALSE 623
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 526: LD_VAR 0 7
 530: PPUSH
 531: LD_VAR 0 4
 535: PPUSH
 536: LD_VAR 0 5
 540: PPUSH
 541: LD_INT 8
 543: PPUSH
 544: LD_INT 0
 546: PPUSH
 547: CALL_OW 50
// c := c + 1 ;
 551: LD_ADDR_VAR 0 9
 555: PUSH
 556: LD_VAR 0 9
 560: PUSH
 561: LD_INT 1
 563: PLUS
 564: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 565: LD_VAR 0 7
 569: PPUSH
 570: LD_STRING grave
 572: PUSH
 573: LD_VAR 0 9
 577: STR
 578: PPUSH
 579: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 583: LD_ADDR_EXP 12
 587: PUSH
 588: LD_EXP 12
 592: PPUSH
 593: LD_VAR 0 9
 597: PPUSH
 598: LD_VAR 0 7
 602: PUSH
 603: LD_STRING grave
 605: PUSH
 606: LD_VAR 0 9
 610: STR
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PPUSH
 616: CALL_OW 2
 620: ST_TO_ADDR
// end ;
 621: GO 523
 623: POP
 624: POP
// end ;
 625: LD_VAR 0 6
 629: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// for i = 1 to type_allowed do
 635: LD_ADDR_VAR 0 7
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 790
// while ( num [ i ] > 0 ) do
 653: LD_VAR 0 1
 657: PUSH
 658: LD_VAR 0 7
 662: ARRAY
 663: PUSH
 664: LD_INT 0
 666: GREATER
 667: IFFALSE 788
// begin if num [ i ] > 5 then
 669: LD_VAR 0 1
 673: PUSH
 674: LD_VAR 0 7
 678: ARRAY
 679: PUSH
 680: LD_INT 5
 682: GREATER
 683: IFFALSE 695
// n := 5 else
 685: LD_ADDR_VAR 0 8
 689: PUSH
 690: LD_INT 5
 692: ST_TO_ADDR
 693: GO 711
// n := num [ i ] ;
 695: LD_ADDR_VAR 0 8
 699: PUSH
 700: LD_VAR 0 1
 704: PUSH
 705: LD_VAR 0 7
 709: ARRAY
 710: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 711: LD_VAR 0 2
 715: PUSH
 716: LD_VAR 0 7
 720: ARRAY
 721: PPUSH
 722: LD_VAR 0 8
 726: PPUSH
 727: LD_VAR 0 3
 731: PPUSH
 732: LD_VAR 0 4
 736: PPUSH
 737: LD_VAR 0 5
 741: PPUSH
 742: LD_INT 0
 744: PPUSH
 745: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 749: LD_ADDR_VAR 0 1
 753: PUSH
 754: LD_VAR 0 1
 758: PPUSH
 759: LD_VAR 0 7
 763: PPUSH
 764: LD_VAR 0 1
 768: PUSH
 769: LD_VAR 0 7
 773: ARRAY
 774: PUSH
 775: LD_VAR 0 8
 779: MINUS
 780: PPUSH
 781: CALL_OW 1
 785: ST_TO_ADDR
// end ;
 786: GO 653
 788: GO 650
 790: POP
 791: POP
// end ;
 792: LD_VAR 0 6
 796: RET
// export function AddPoints ( p ) ; begin
 797: LD_INT 0
 799: PPUSH
// points := points + p ;
 800: LD_ADDR_EXP 2
 804: PUSH
 805: LD_EXP 2
 809: PUSH
 810: LD_VAR 0 1
 814: PLUS
 815: ST_TO_ADDR
// end ;
 816: LD_VAR 0 2
 820: RET
// export function LoadColors ; var file ; begin
 821: LD_INT 0
 823: PPUSH
 824: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 825: CALL_OW 545
 829: PUSH
 830: LD_INT 1
 832: DOUBLE
 833: GREATEREQUAL
 834: IFFALSE 842
 836: LD_INT 3
 838: DOUBLE
 839: LESSEQUAL
 840: IFTRUE 850
 842: LD_INT 12
 844: DOUBLE
 845: EQUAL
 846: IFTRUE 850
 848: GO 861
 850: POP
// file = colors.txt ; 4 .. 5 :
 851: LD_ADDR_VAR 0 2
 855: PUSH
 856: LD_STRING colors.txt
 858: ST_TO_ADDR
 859: GO 937
 861: LD_INT 4
 863: DOUBLE
 864: GREATEREQUAL
 865: IFFALSE 873
 867: LD_INT 5
 869: DOUBLE
 870: LESSEQUAL
 871: IFTRUE 875
 873: GO 886
 875: POP
// file = colors-spring.txt ; 6 .. 8 :
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: LD_STRING colors-spring.txt
 883: ST_TO_ADDR
 884: GO 937
 886: LD_INT 6
 888: DOUBLE
 889: GREATEREQUAL
 890: IFFALSE 898
 892: LD_INT 8
 894: DOUBLE
 895: LESSEQUAL
 896: IFTRUE 900
 898: GO 911
 900: POP
// file = colors-summer.txt ; 9 .. 11 :
 901: LD_ADDR_VAR 0 2
 905: PUSH
 906: LD_STRING colors-summer.txt
 908: ST_TO_ADDR
 909: GO 937
 911: LD_INT 9
 913: DOUBLE
 914: GREATEREQUAL
 915: IFFALSE 923
 917: LD_INT 11
 919: DOUBLE
 920: LESSEQUAL
 921: IFTRUE 925
 923: GO 936
 925: POP
// file = colors-autumn.txt ; end ;
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: LD_STRING colors-autumn.txt
 933: ST_TO_ADDR
 934: GO 937
 936: POP
// LoadColorsTxt ( file ) ;
 937: LD_VAR 0 2
 941: PPUSH
 942: CALL_OW 544
// end ;
 946: LD_VAR 0 1
 950: RET
// export function TestColor ; var i ; begin
 951: LD_INT 0
 953: PPUSH
 954: PPUSH
// i = 1 ;
 955: LD_ADDR_VAR 0 2
 959: PUSH
 960: LD_INT 1
 962: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 963: LD_INT 35
 965: PPUSH
 966: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 970: LD_STRING colors-spring.txt
 972: PUSH
 973: LD_STRING colors-summer.txt
 975: PUSH
 976: LD_STRING colors-autumn.txt
 978: PUSH
 979: LD_STRING colors.txt
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 4
 995: MOD
 996: PUSH
 997: LD_INT 1
 999: PLUS
1000: ARRAY
1001: PPUSH
1002: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
1006: LD_ADDR_OWVAR 47
1010: PUSH
1011: LD_STRING Wiosna
1013: PUSH
1014: LD_STRING Lato
1016: PUSH
1017: LD_STRING Jesien
1019: PUSH
1020: LD_STRING Zima
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_VAR 0 2
1033: PUSH
1034: LD_INT 4
1036: MOD
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: ST_TO_ADDR
// i := i + 1 ;
1043: LD_ADDR_VAR 0 2
1047: PUSH
1048: LD_VAR 0 2
1052: PUSH
1053: LD_INT 1
1055: PLUS
1056: ST_TO_ADDR
// end until false ;
1057: LD_INT 0
1059: IFFALSE 963
// end ;
1061: LD_VAR 0 1
1065: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
1066: LD_INT 0
1068: PPUSH
// if x1 = x2 and y1 > y2 then
1069: LD_VAR 0 1
1073: PUSH
1074: LD_VAR 0 3
1078: EQUAL
1079: PUSH
1080: LD_VAR 0 2
1084: PUSH
1085: LD_VAR 0 4
1089: GREATER
1090: AND
1091: IFFALSE 1101
// result := 0 ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_INT 0
1100: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
1101: LD_VAR 0 1
1105: PUSH
1106: LD_VAR 0 3
1110: LESS
1111: PUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_VAR 0 4
1121: EQUAL
1122: AND
1123: IFFALSE 1133
// result := 1 ;
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_INT 1
1132: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
1133: LD_VAR 0 1
1137: PUSH
1138: LD_VAR 0 3
1142: LESS
1143: PUSH
1144: LD_VAR 0 2
1148: PUSH
1149: LD_VAR 0 4
1153: LESS
1154: AND
1155: IFFALSE 1165
// result := 2 ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 2
1164: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
1165: LD_VAR 0 1
1169: PUSH
1170: LD_VAR 0 3
1174: EQUAL
1175: PUSH
1176: LD_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: LESS
1186: AND
1187: IFFALSE 1197
// result := 3 ;
1189: LD_ADDR_VAR 0 5
1193: PUSH
1194: LD_INT 3
1196: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
1197: LD_VAR 0 1
1201: PUSH
1202: LD_VAR 0 3
1206: GREATER
1207: PUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_VAR 0 4
1217: EQUAL
1218: AND
1219: IFFALSE 1229
// result := 4 ;
1221: LD_ADDR_VAR 0 5
1225: PUSH
1226: LD_INT 4
1228: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
1229: LD_VAR 0 1
1233: PUSH
1234: LD_VAR 0 3
1238: GREATER
1239: PUSH
1240: LD_VAR 0 2
1244: PUSH
1245: LD_VAR 0 4
1249: GREATER
1250: AND
1251: IFFALSE 1261
// result := 5 ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_INT 5
1260: ST_TO_ADDR
// end ;
1261: LD_VAR 0 5
1265: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
1266: LD_INT 0
1268: PPUSH
1269: PPUSH
1270: PPUSH
1271: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_INT 22
1279: PUSH
1280: LD_OWVAR 2
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 21
1291: PUSH
1292: LD_INT 1
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: ST_TO_ADDR
// for i = 1 to amount do
1308: LD_ADDR_VAR 0 3
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 1
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1405
// begin pep := rand ( 1 , team ) ;
1326: LD_ADDR_VAR 0 5
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 4
1338: PPUSH
1339: CALL_OW 12
1343: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1344: LD_VAR 0 4
1348: PUSH
1349: LD_VAR 0 5
1353: ARRAY
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 4
1360: PPUSH
1361: CALL_OW 12
1365: PPUSH
1366: LD_INT 1000
1368: PPUSH
1369: LD_INT 10000
1371: PPUSH
1372: CALL_OW 12
1376: PPUSH
1377: CALL_OW 492
// team := team diff team [ pep ] ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_VAR 0 4
1390: PUSH
1391: LD_VAR 0 4
1395: PUSH
1396: LD_VAR 0 5
1400: ARRAY
1401: DIFF
1402: ST_TO_ADDR
// end ;
1403: GO 1323
1405: POP
1406: POP
// end ;
1407: LD_VAR 0 2
1411: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
1418: PPUSH
1419: PPUSH
1420: PPUSH
1421: PPUSH
1422: PPUSH
1423: PPUSH
1424: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1425: LD_ADDR_VAR 0 5
1429: PUSH
1430: LD_INT 7
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 517
1440: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1441: LD_ADDR_VAR 0 6
1445: PUSH
1446: LD_INT 6
1448: PPUSH
1449: LD_INT 0
1451: PPUSH
1452: CALL_OW 517
1456: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1457: LD_ADDR_VAR 0 3
1461: PUSH
1462: DOUBLE
1463: LD_INT 1
1465: DEC
1466: ST_TO_ADDR
1467: LD_VAR 0 5
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PUSH
1476: FOR_TO
1477: IFFALSE 1559
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1479: LD_ADDR_VAR 0 7
1483: PUSH
1484: LD_VAR 0 7
1488: PPUSH
1489: LD_VAR 0 7
1493: PUSH
1494: LD_INT 1
1496: PLUS
1497: PPUSH
1498: LD_VAR 0 5
1502: PUSH
1503: LD_INT 1
1505: ARRAY
1506: PUSH
1507: LD_VAR 0 3
1511: ARRAY
1512: PPUSH
1513: CALL_OW 1
1517: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1518: LD_ADDR_VAR 0 7
1522: PUSH
1523: LD_VAR 0 7
1527: PPUSH
1528: LD_VAR 0 7
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 5
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PUSH
1546: LD_VAR 0 3
1550: ARRAY
1551: PPUSH
1552: CALL_OW 1
1556: ST_TO_ADDR
// end ;
1557: GO 1476
1559: POP
1560: POP
// uc_side := 4 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 4
1568: ST_TO_ADDR
// case strenght of 1 .. 10 :
1569: LD_VAR 0 1
1573: PUSH
1574: LD_INT 1
1576: DOUBLE
1577: GREATEREQUAL
1578: IFFALSE 1586
1580: LD_INT 10
1582: DOUBLE
1583: LESSEQUAL
1584: IFTRUE 1588
1586: GO 1650
1588: POP
// begin uc_nation := 0 ;
1589: LD_ADDR_OWVAR 21
1593: PUSH
1594: LD_INT 0
1596: ST_TO_ADDR
// for i = 1 to 20 do
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 20
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1646
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1613: LD_INT 0
1615: PPUSH
1616: LD_INT 15
1618: PPUSH
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 380
// result := result ^ CreateHuman ;
1628: LD_ADDR_VAR 0 2
1632: PUSH
1633: LD_VAR 0 2
1637: PUSH
1638: CALL_OW 44
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1610
1646: POP
1647: POP
// end ; 11 .. 40 :
1648: GO 1837
1650: LD_INT 11
1652: DOUBLE
1653: GREATEREQUAL
1654: IFFALSE 1662
1656: LD_INT 40
1658: DOUBLE
1659: LESSEQUAL
1660: IFTRUE 1664
1662: GO 1743
1664: POP
// begin uc_nation := 1 ;
1665: LD_ADDR_OWVAR 21
1669: PUSH
1670: LD_INT 1
1672: ST_TO_ADDR
// for i = 1 to 20 do
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 20
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1739
// begin vc_chassis := us_medium_tracked ;
1689: LD_ADDR_OWVAR 37
1693: PUSH
1694: LD_INT 3
1696: ST_TO_ADDR
// vc_engine := engine_siberite ;
1697: LD_ADDR_OWVAR 39
1701: PUSH
1702: LD_INT 3
1704: ST_TO_ADDR
// vc_control := control_computer ;
1705: LD_ADDR_OWVAR 38
1709: PUSH
1710: LD_INT 3
1712: ST_TO_ADDR
// vc_weapon := us_laser ;
1713: LD_ADDR_OWVAR 40
1717: PUSH
1718: LD_INT 9
1720: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: LD_VAR 0 2
1730: PUSH
1731: CALL_OW 45
1735: ADD
1736: ST_TO_ADDR
// end ;
1737: GO 1686
1739: POP
1740: POP
// end ; 41 .. 100 :
1741: GO 1837
1743: LD_INT 41
1745: DOUBLE
1746: GREATEREQUAL
1747: IFFALSE 1755
1749: LD_INT 100
1751: DOUBLE
1752: LESSEQUAL
1753: IFTRUE 1757
1755: GO 1836
1757: POP
// begin uc_nation := 1 ;
1758: LD_ADDR_OWVAR 21
1762: PUSH
1763: LD_INT 1
1765: ST_TO_ADDR
// for i = 1 to 20 do
1766: LD_ADDR_VAR 0 3
1770: PUSH
1771: DOUBLE
1772: LD_INT 1
1774: DEC
1775: ST_TO_ADDR
1776: LD_INT 20
1778: PUSH
1779: FOR_TO
1780: IFFALSE 1832
// begin vc_chassis := us_morphling ;
1782: LD_ADDR_OWVAR 37
1786: PUSH
1787: LD_INT 5
1789: ST_TO_ADDR
// vc_engine := engine_siberite ;
1790: LD_ADDR_OWVAR 39
1794: PUSH
1795: LD_INT 3
1797: ST_TO_ADDR
// vc_control := control_computer ;
1798: LD_ADDR_OWVAR 38
1802: PUSH
1803: LD_INT 3
1805: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1806: LD_ADDR_OWVAR 40
1810: PUSH
1811: LD_INT 10
1813: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: LD_VAR 0 2
1823: PUSH
1824: CALL_OW 45
1828: ADD
1829: ST_TO_ADDR
// end ;
1830: GO 1779
1832: POP
1833: POP
// end ; end ;
1834: GO 1837
1836: POP
// for i in result do
1837: LD_ADDR_VAR 0 3
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: FOR_IN
1848: IFFALSE 2065
// begin x := base_area [ 1 ] [ 1 ] ;
1850: LD_ADDR_VAR 0 9
1854: PUSH
1855: LD_VAR 0 6
1859: PUSH
1860: LD_INT 1
1862: ARRAY
1863: PUSH
1864: LD_INT 1
1866: ARRAY
1867: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1868: LD_ADDR_VAR 0 10
1872: PUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_INT 2
1880: ARRAY
1881: PUSH
1882: LD_INT 1
1884: ARRAY
1885: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1886: LD_ADDR_VAR 0 8
1890: PUSH
1891: LD_VAR 0 7
1895: PPUSH
1896: LD_VAR 0 9
1900: PPUSH
1901: LD_VAR 0 10
1905: PPUSH
1906: CALL_OW 439
1910: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1911: LD_VAR 0 3
1915: PPUSH
1916: LD_VAR 0 9
1920: PPUSH
1921: LD_VAR 0 10
1925: PPUSH
1926: LD_VAR 0 8
1930: PUSH
1931: LD_INT 1
1933: ARRAY
1934: PPUSH
1935: LD_VAR 0 8
1939: PUSH
1940: LD_INT 2
1942: ARRAY
1943: PPUSH
1944: CALL 1066 0 4
1948: PPUSH
1949: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_VAR 0 9
1962: PPUSH
1963: LD_VAR 0 10
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: CALL_OW 48
// ComHold ( i ) ;
1975: LD_VAR 0 3
1979: PPUSH
1980: CALL_OW 140
// for c = 1 to 2 do
1984: LD_ADDR_VAR 0 11
1988: PUSH
1989: DOUBLE
1990: LD_INT 1
1992: DEC
1993: ST_TO_ADDR
1994: LD_INT 2
1996: PUSH
1997: FOR_TO
1998: IFFALSE 2061
// begin tmp := base_area [ c ] ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_VAR 0 6
2009: PUSH
2010: LD_VAR 0 11
2014: ARRAY
2015: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
2016: LD_ADDR_VAR 0 12
2020: PUSH
2021: LD_VAR 0 12
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: CALL_OW 3
2033: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
2034: LD_ADDR_VAR 0 6
2038: PUSH
2039: LD_VAR 0 6
2043: PPUSH
2044: LD_VAR 0 11
2048: PPUSH
2049: LD_VAR 0 12
2053: PPUSH
2054: CALL_OW 1
2058: ST_TO_ADDR
// end ;
2059: GO 1997
2061: POP
2062: POP
// end ;
2063: GO 1847
2065: POP
2066: POP
// end ;
2067: LD_VAR 0 2
2071: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
2072: LD_INT 0
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
// if graveyard = 0 then
2079: LD_EXP 8
2083: PUSH
2084: LD_INT 0
2086: EQUAL
2087: IFFALSE 2091
// exit ;
2089: GO 2254
// i := rand ( 1 , graveyard ) ;
2091: LD_ADDR_VAR 0 2
2095: PUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_EXP 8
2103: PPUSH
2104: CALL_OW 12
2108: ST_TO_ADDR
// un := graveyard [ i ] ;
2109: LD_ADDR_VAR 0 4
2113: PUSH
2114: LD_EXP 8
2118: PUSH
2119: LD_VAR 0 2
2123: ARRAY
2124: ST_TO_ADDR
// for c in playerSquad do
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 12
2134: PUSH
2135: FOR_IN
2136: IFFALSE 2172
// if un = c [ 1 ] then
2138: LD_VAR 0 4
2142: PUSH
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 1
2150: ARRAY
2151: EQUAL
2152: IFFALSE 2170
// begin new := c [ 2 ] ;
2154: LD_ADDR_VAR 0 5
2158: PUSH
2159: LD_VAR 0 3
2163: PUSH
2164: LD_INT 2
2166: ARRAY
2167: ST_TO_ADDR
// break ;
2168: GO 2172
// end ;
2170: GO 2135
2172: POP
2173: POP
// uc_side := your_side ;
2174: LD_ADDR_OWVAR 20
2178: PUSH
2179: LD_OWVAR 2
2183: ST_TO_ADDR
// uc_nation := playerNation ;
2184: LD_ADDR_OWVAR 21
2188: PUSH
2189: LD_EXP 6
2193: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
2194: LD_ADDR_VAR 0 4
2198: PUSH
2199: LD_VAR 0 5
2203: PPUSH
2204: CALL_OW 34
2208: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
2209: LD_VAR 0 4
2213: PPUSH
2214: LD_EXP 9
2218: PPUSH
2219: LD_EXP 10
2223: PPUSH
2224: LD_INT 10
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
2234: LD_ADDR_EXP 8
2238: PUSH
2239: LD_EXP 8
2243: PPUSH
2244: LD_VAR 0 2
2248: PPUSH
2249: CALL_OW 3
2253: ST_TO_ADDR
// end ;
2254: LD_VAR 0 1
2258: RET
// export function ComEspace ( un ) ; begin
2259: LD_INT 0
2261: PPUSH
// if not IsInArea ( un , zoneOut ) then
2262: LD_VAR 0 1
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: CALL_OW 308
2274: NOT
2275: IFFALSE 2291
// ComMoveToArea ( un , zoneOut ) else
2277: LD_VAR 0 1
2281: PPUSH
2282: LD_INT 4
2284: PPUSH
2285: CALL_OW 113
2289: GO 2300
// RemoveUnit ( un ) ;
2291: LD_VAR 0 1
2295: PPUSH
2296: CALL_OW 64
// end ;
2300: LD_VAR 0 2
2304: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
2305: LD_INT 0
2307: PPUSH
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// list := AreaToList ( area , 0 ) ;
2312: LD_ADDR_VAR 0 4
2316: PUSH
2317: LD_VAR 0 2
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 517
2329: ST_TO_ADDR
// if not list then
2330: LD_VAR 0 4
2334: NOT
2335: IFFALSE 2339
// exit ;
2337: GO 2501
// for i = 1 to list do
2339: LD_ADDR_VAR 0 6
2343: PUSH
2344: DOUBLE
2345: LD_INT 1
2347: DEC
2348: ST_TO_ADDR
2349: LD_VAR 0 4
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2437
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2357: LD_ADDR_VAR 0 5
2361: PUSH
2362: LD_VAR 0 5
2366: PPUSH
2367: LD_VAR 0 5
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PUSH
2385: LD_VAR 0 6
2389: ARRAY
2390: PPUSH
2391: CALL_OW 1
2395: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2396: LD_ADDR_VAR 0 5
2400: PUSH
2401: LD_VAR 0 5
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_INT 1
2413: PLUS
2414: PPUSH
2415: LD_VAR 0 4
2419: PUSH
2420: LD_INT 2
2422: ARRAY
2423: PUSH
2424: LD_VAR 0 6
2428: ARRAY
2429: PPUSH
2430: CALL_OW 1
2434: ST_TO_ADDR
// end ;
2435: GO 2354
2437: POP
2438: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2439: LD_ADDR_VAR 0 7
2443: PUSH
2444: LD_VAR 0 5
2448: PPUSH
2449: LD_VAR 0 1
2453: PPUSH
2454: CALL_OW 250
2458: PPUSH
2459: LD_VAR 0 1
2463: PPUSH
2464: CALL_OW 251
2468: PPUSH
2469: CALL_OW 439
2473: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_VAR 0 7
2483: PUSH
2484: LD_INT 1
2486: ARRAY
2487: PPUSH
2488: LD_VAR 0 7
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: CALL_OW 111
// end ;
2501: LD_VAR 0 3
2505: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2506: LD_INT 0
2508: PPUSH
2509: PPUSH
2510: PPUSH
// timer := rand ( 2 , 5 ) ;
2511: LD_ADDR_VAR 0 4
2515: PUSH
2516: LD_INT 2
2518: PPUSH
2519: LD_INT 5
2521: PPUSH
2522: CALL_OW 12
2526: ST_TO_ADDR
// while ( timer > 0 ) do
2527: LD_VAR 0 4
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: IFFALSE 2574
// begin SetUnitDisplayNumber ( un , timer ) ;
2537: LD_VAR 0 1
2541: PPUSH
2542: LD_VAR 0 4
2546: PPUSH
2547: CALL_OW 505
// timer := timer - 1 ;
2551: LD_ADDR_VAR 0 4
2555: PUSH
2556: LD_VAR 0 4
2560: PUSH
2561: LD_INT 1
2563: MINUS
2564: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// end ;
2572: GO 2527
// if timer = 0 then
2574: LD_VAR 0 4
2578: PUSH
2579: LD_INT 0
2581: EQUAL
2582: IFFALSE 2631
// for i = 1 to 3 do
2584: LD_ADDR_VAR 0 3
2588: PUSH
2589: DOUBLE
2590: LD_INT 1
2592: DEC
2593: ST_TO_ADDR
2594: LD_INT 3
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2629
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 250
2609: PPUSH
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 251
2619: PPUSH
2620: LD_INT 10
2622: PPUSH
2623: CALL_OW 453
2627: GO 2597
2629: POP
2630: POP
// end ;
2631: LD_VAR 0 2
2635: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2636: LD_INT 0
2638: PPUSH
// if unit in unreachableList then
2639: LD_VAR 0 1
2643: PUSH
2644: LD_EXP 13
2648: IN
2649: IFFALSE 2667
// unreachableList := unreachableList diff unit ;
2651: LD_ADDR_EXP 13
2655: PUSH
2656: LD_EXP 13
2660: PUSH
2661: LD_VAR 0 1
2665: DIFF
2666: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2667: LD_VAR 0 1
2671: PPUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_VAR 0 3
2681: PPUSH
2682: CALL_OW 428
2686: PPUSH
2687: CALL_OW 115
// Wait ( 1 ) ;
2691: LD_INT 1
2693: PPUSH
2694: CALL_OW 67
// if unit in unreachableList then
2698: LD_VAR 0 1
2702: PUSH
2703: LD_EXP 13
2707: IN
2708: IFFALSE 2720
// result := false else
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
2718: GO 2728
// result := true ;
2720: LD_ADDR_VAR 0 4
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// end ;
2728: LD_VAR 0 4
2732: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2741: LD_ADDR_VAR 0 4
2745: PUSH
2746: LD_INT 81
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 255
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PPUSH
2763: CALL_OW 69
2767: ST_TO_ADDR
// if not enemy then
2768: LD_VAR 0 4
2772: NOT
2773: IFFALSE 2777
// exit ;
2775: GO 2927
// if UnitFilter ( enemy , [ f_occupied ] ) then
2777: LD_VAR 0 4
2781: PPUSH
2782: LD_INT 59
2784: PUSH
2785: EMPTY
2786: LIST
2787: PPUSH
2788: CALL_OW 72
2792: IFFALSE 2903
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_VAR 0 4
2803: PPUSH
2804: LD_INT 59
2806: PUSH
2807: EMPTY
2808: LIST
2809: PPUSH
2810: CALL_OW 72
2814: PPUSH
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL_OW 74
2824: ST_TO_ADDR
// x := GetX ( t ) ;
2825: LD_ADDR_VAR 0 6
2829: PUSH
2830: LD_VAR 0 5
2834: PPUSH
2835: CALL_OW 250
2839: ST_TO_ADDR
// y := GetY ( t ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_VAR 0 5
2849: PPUSH
2850: CALL_OW 251
2854: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2855: LD_VAR 0 1
2859: PPUSH
2860: LD_VAR 0 6
2864: PPUSH
2865: LD_VAR 0 7
2869: PPUSH
2870: CALL 2636 0 3
2874: NOT
2875: IFFALSE 2901
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2877: LD_VAR 0 1
2881: PPUSH
2882: LD_VAR 0 4
2886: PPUSH
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 74
2896: PPUSH
2897: CALL_OW 115
// end else
2901: GO 2927
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 4
2912: PPUSH
2913: LD_VAR 0 1
2917: PPUSH
2918: CALL_OW 74
2922: PPUSH
2923: CALL_OW 115
// end ; end_of_file
2927: LD_VAR 0 2
2931: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2932: LD_INT 0
2934: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2935: LD_ADDR_EXP 3
2939: PUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 426
2947: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2948: LD_ADDR_EXP 6
2952: PUSH
2953: LD_INT 1
2955: PPUSH
2956: CALL_OW 426
2960: PUSH
2961: LD_INT 1
2963: MINUS
2964: ST_TO_ADDR
// end ; end_of_file
2965: LD_VAR 0 1
2969: RET
// export function InitGame ; begin
2970: LD_INT 0
2972: PPUSH
// ResetFog ;
2973: CALL_OW 335
// RandomizeAll ;
2977: CALL_OW 11
// LoadColors ;
2981: CALL 821 0 0
// debug := false ;
2985: LD_ADDR_EXP 1
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2993: LD_ADDR_EXP 18
2997: PUSH
2998: LD_INT 91
3000: ST_TO_ADDR
// us_artillery := 97 ;
3001: LD_ADDR_EXP 17
3005: PUSH
3006: LD_INT 97
3008: ST_TO_ADDR
// ru_radar := 98 ;
3009: LD_ADDR_EXP 14
3013: PUSH
3014: LD_INT 98
3016: ST_TO_ADDR
// game_started := false ;
3017: LD_ADDR_EXP 7
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// points := 0 ;
3025: LD_ADDR_EXP 2
3029: PUSH
3030: LD_INT 0
3032: ST_TO_ADDR
// waveNumber := 0 ;
3033: LD_ADDR_EXP 5
3037: PUSH
3038: LD_INT 0
3040: ST_TO_ADDR
// timeToNextAttack := 0 ;
3041: LD_ADDR_EXP 4
3045: PUSH
3046: LD_INT 0
3048: ST_TO_ADDR
// graveyard := [ ] ;
3049: LD_ADDR_EXP 8
3053: PUSH
3054: EMPTY
3055: ST_TO_ADDR
// base_x := 1 ;
3056: LD_ADDR_EXP 9
3060: PUSH
3061: LD_INT 1
3063: ST_TO_ADDR
// base_y := 1 ;
3064: LD_ADDR_EXP 10
3068: PUSH
3069: LD_INT 1
3071: ST_TO_ADDR
// if difficultyLevel > 2 then
3072: LD_EXP 3
3076: PUSH
3077: LD_INT 2
3079: GREATER
3080: IFFALSE 3095
// SetTech ( 5 , 7 , state_researched ) ;
3082: LD_INT 5
3084: PPUSH
3085: LD_INT 7
3087: PPUSH
3088: LD_INT 2
3090: PPUSH
3091: CALL_OW 322
// if not playerNation then
3095: LD_EXP 6
3099: NOT
3100: IFFALSE 3126
// begin points := 100 ;
3102: LD_ADDR_EXP 2
3106: PUSH
3107: LD_INT 100
3109: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
3110: LD_ADDR_EXP 6
3114: PUSH
3115: LD_INT 1
3117: PPUSH
3118: LD_INT 3
3120: PPUSH
3121: CALL_OW 12
3125: ST_TO_ADDR
// end ; your_side := playerNation ;
3126: LD_ADDR_OWVAR 2
3130: PUSH
3131: LD_EXP 6
3135: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
3136: LD_OWVAR 2
3140: PPUSH
3141: LD_INT 4
3143: PPUSH
3144: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
3148: LD_INT 25
3150: PUSH
3151: LD_INT 20
3153: PUSH
3154: LD_INT 15
3156: PUSH
3157: LD_INT 10
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: PUSH
3166: LD_EXP 3
3170: ARRAY
3171: PUSH
3172: LD_INT 5
3174: PUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 2
3180: PUSH
3181: LD_INT 1
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: PUSH
3190: LD_EXP 3
3194: ARRAY
3195: PUSH
3196: LD_INT 5
3198: PUSH
3199: LD_INT 3
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: PUSH
3214: LD_EXP 3
3218: ARRAY
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PPUSH
3225: LD_INT 1
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: LIST
3238: PPUSH
3239: LD_INT 88
3241: PPUSH
3242: LD_INT 76
3244: PPUSH
3245: LD_INT 6
3247: PPUSH
3248: CALL 630 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
3252: LD_EXP 6
3256: PPUSH
3257: LD_INT 9
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 5
3265: PUSH
3266: LD_INT 3
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_EXP 3
3279: ARRAY
3280: PPUSH
3281: LD_INT 24
3283: PUSH
3284: LD_INT 16
3286: PUSH
3287: LD_INT 12
3289: PUSH
3290: LD_INT 8
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: PUSH
3299: LD_EXP 3
3303: ARRAY
3304: PPUSH
3305: LD_INT 88
3307: PPUSH
3308: LD_INT 76
3310: PPUSH
3311: CALL 339 0 5
// CenterNowOnXY ( 88 , 76 ) ;
3315: LD_INT 88
3317: PPUSH
3318: LD_INT 76
3320: PPUSH
3321: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
3325: LD_INT 90
3327: PPUSH
3328: LD_INT 79
3330: PPUSH
3331: LD_OWVAR 2
3335: PPUSH
3336: LD_INT 50
3338: NEG
3339: PPUSH
3340: CALL_OW 330
// if debug then
3344: LD_EXP 1
3348: IFFALSE 3359
// FogOff ( your_side ) ;
3350: LD_OWVAR 2
3354: PPUSH
3355: CALL_OW 344
// end ;
3359: LD_VAR 0 1
3363: RET
// every 0 0$01 trigger game_started do var i ;
3364: LD_EXP 7
3368: IFFALSE 3602
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
// begin while ( game_started ) do
3376: LD_EXP 7
3380: IFFALSE 3602
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3382: LD_INT 22
3384: PUSH
3385: LD_INT 7
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PPUSH
3392: CALL_OW 69
3396: PUSH
3397: LD_INT 5
3399: LESS
3400: PUSH
3401: LD_EXP 4
3405: PUSH
3406: LD_INT 0
3408: LESSEQUAL
3409: AND
3410: IFFALSE 3593
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3412: LD_INT 22
3414: PUSH
3415: LD_INT 4
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PPUSH
3422: CALL_OW 69
3426: IFFALSE 3464
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3428: LD_ADDR_VAR 0 1
3432: PUSH
3433: LD_INT 22
3435: PUSH
3436: LD_INT 4
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 69
3447: PUSH
3448: FOR_IN
3449: IFFALSE 3462
// RemoveUnit ( i ) ;
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 64
3460: GO 3448
3462: POP
3463: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3464: LD_EXP 5
3468: PUSH
3469: LD_INT 3
3471: MOD
3472: PUSH
3473: LD_INT 0
3475: EQUAL
3476: PUSH
3477: LD_EXP 5
3481: PUSH
3482: LD_INT 10
3484: MOD
3485: PUSH
3486: LD_INT 0
3488: EQUAL
3489: OR
3490: PUSH
3491: LD_EXP 5
3495: PUSH
3496: LD_INT 0
3498: GREATER
3499: AND
3500: IFFALSE 3506
// InitBonus ;
3502: CALL 9615 0 0
// if waveNumber mod 10 = 0 then
3506: LD_EXP 5
3510: PUSH
3511: LD_INT 10
3513: MOD
3514: PUSH
3515: LD_INT 0
3517: EQUAL
3518: IFFALSE 3524
// SaveForQuickRestart ;
3520: CALL_OW 22
// if waveNumber = 100 then
3524: LD_EXP 5
3528: PUSH
3529: LD_INT 100
3531: EQUAL
3532: IFFALSE 3545
// begin FogOff ( your_side ) ;
3534: LD_OWVAR 2
3538: PPUSH
3539: CALL_OW 344
// break ;
3543: GO 3602
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3545: LD_ADDR_EXP 4
3549: PUSH
3550: LD_INT 3150
3552: PPUSH
3553: LD_INT 5250
3555: PPUSH
3556: CALL_OW 12
3560: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3561: LD_EXP 4
3565: PPUSH
3566: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3570: LD_ADDR_EXP 5
3574: PUSH
3575: LD_EXP 5
3579: PUSH
3580: LD_INT 1
3582: PLUS
3583: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3584: LD_EXP 5
3588: PPUSH
3589: CALL 4606 0 1
// end ; Wait ( 0 0$01 ) ;
3593: LD_INT 35
3595: PPUSH
3596: CALL_OW 67
// end ;
3600: GO 3376
// end ;
3602: PPOPN 1
3604: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3605: LD_EXP 4
3609: PUSH
3610: LD_INT 0
3612: GREATER
3613: IFFALSE 3633
3615: GO 3617
3617: DISABLE
// begin enable ;
3618: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3619: LD_ADDR_EXP 4
3623: PUSH
3624: LD_EXP 4
3628: PUSH
3629: LD_INT 35
3631: MINUS
3632: ST_TO_ADDR
// end ; end_of_file
3633: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3634: LD_VAR 0 1
3638: PUSH
3639: LD_EXP 13
3643: IN
3644: NOT
3645: IFFALSE 3676
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3647: LD_ADDR_EXP 13
3651: PUSH
3652: LD_EXP 13
3656: PPUSH
3657: LD_EXP 13
3661: PUSH
3662: LD_INT 1
3664: PLUS
3665: PPUSH
3666: LD_VAR 0 1
3670: PPUSH
3671: CALL_OW 2
3675: ST_TO_ADDR
// end ;
3676: PPOPN 1
3678: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL 22425 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3688: LD_VAR 0 1
3692: PPUSH
3693: CALL_OW 255
3697: PUSH
3698: LD_OWVAR 2
3702: EQUAL
3703: PUSH
3704: LD_VAR 0 1
3708: PPUSH
3709: CALL_OW 247
3713: PUSH
3714: LD_INT 1
3716: EQUAL
3717: AND
3718: IFFALSE 3749
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3720: LD_ADDR_EXP 8
3724: PUSH
3725: LD_EXP 8
3729: PPUSH
3730: LD_EXP 8
3734: PUSH
3735: LD_INT 1
3737: PLUS
3738: PPUSH
3739: LD_VAR 0 1
3743: PPUSH
3744: CALL_OW 2
3748: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3749: LD_VAR 0 1
3753: PPUSH
3754: CALL_OW 255
3758: PUSH
3759: LD_INT 7
3761: EQUAL
3762: IFFALSE 4136
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3764: LD_VAR 0 1
3768: PUSH
3769: LD_INT 34
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: PPUSH
3779: CALL_OW 69
3783: IN
3784: IFFALSE 3829
// begin if Rand ( 1 , 100 ) <= 70 then
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 100
3791: PPUSH
3792: CALL_OW 12
3796: PUSH
3797: LD_INT 70
3799: LESSEQUAL
3800: IFFALSE 3829
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3802: LD_VAR 0 1
3806: PPUSH
3807: CALL_OW 250
3811: PPUSH
3812: LD_VAR 0 1
3816: PPUSH
3817: CALL_OW 251
3821: PPUSH
3822: LD_INT 10
3824: PPUSH
3825: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3829: LD_VAR 0 1
3833: PPUSH
3834: CALL_OW 247
3838: PUSH
3839: LD_INT 1
3841: DOUBLE
3842: EQUAL
3843: IFTRUE 3847
3845: GO 3981
3847: POP
// begin case GetClass ( un ) of class_apeman :
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 257
3857: PUSH
3858: LD_INT 12
3860: DOUBLE
3861: EQUAL
3862: IFTRUE 3866
3864: GO 3876
3866: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3867: LD_INT 2
3869: PPUSH
3870: CALL 797 0 1
3874: GO 3979
3876: LD_INT 15
3878: DOUBLE
3879: EQUAL
3880: IFTRUE 3884
3882: GO 3894
3884: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3885: LD_INT 5
3887: PPUSH
3888: CALL 797 0 1
3892: GO 3979
3894: LD_INT 17
3896: DOUBLE
3897: EQUAL
3898: IFTRUE 3902
3900: GO 3912
3902: POP
// AddPoints ( 30 ) ; class_soldier :
3903: LD_INT 30
3905: PPUSH
3906: CALL 797 0 1
3910: GO 3979
3912: LD_INT 1
3914: DOUBLE
3915: EQUAL
3916: IFTRUE 3920
3918: GO 3930
3920: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3921: LD_INT 50
3923: PPUSH
3924: CALL 797 0 1
3928: GO 3979
3930: LD_INT 9
3932: DOUBLE
3933: EQUAL
3934: IFTRUE 3950
3936: LD_INT 5
3938: DOUBLE
3939: EQUAL
3940: IFTRUE 3950
3942: LD_INT 8
3944: DOUBLE
3945: EQUAL
3946: IFTRUE 3950
3948: GO 3960
3950: POP
// AddPoints ( 75 ) ; class_mechanic :
3951: LD_INT 75
3953: PPUSH
3954: CALL 797 0 1
3958: GO 3979
3960: LD_INT 3
3962: DOUBLE
3963: EQUAL
3964: IFTRUE 3968
3966: GO 3978
3968: POP
// AddPoints ( 60 ) ; end ;
3969: LD_INT 60
3971: PPUSH
3972: CALL 797 0 1
3976: GO 3979
3978: POP
// end ; unit_vehicle :
3979: GO 4136
3981: LD_INT 2
3983: DOUBLE
3984: EQUAL
3985: IFTRUE 3989
3987: GO 4135
3989: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3990: LD_VAR 0 1
3994: PPUSH
3995: CALL_OW 265
3999: PUSH
4000: LD_INT 12
4002: DOUBLE
4003: EQUAL
4004: IFTRUE 4020
4006: LD_INT 1
4008: DOUBLE
4009: EQUAL
4010: IFTRUE 4020
4012: LD_INT 11
4014: DOUBLE
4015: EQUAL
4016: IFTRUE 4020
4018: GO 4030
4020: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
4021: LD_INT 100
4023: PPUSH
4024: CALL 797 0 1
4028: GO 4133
4030: LD_INT 13
4032: DOUBLE
4033: EQUAL
4034: IFTRUE 4068
4036: LD_INT 14
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4068
4042: LD_INT 2
4044: DOUBLE
4045: EQUAL
4046: IFTRUE 4068
4048: LD_INT 3
4050: DOUBLE
4051: EQUAL
4052: IFTRUE 4068
4054: LD_INT 21
4056: DOUBLE
4057: EQUAL
4058: IFTRUE 4068
4060: LD_INT 22
4062: DOUBLE
4063: EQUAL
4064: IFTRUE 4068
4066: GO 4078
4068: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
4069: LD_INT 250
4071: PPUSH
4072: CALL 797 0 1
4076: GO 4133
4078: LD_INT 4
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4104
4084: LD_INT 5
4086: DOUBLE
4087: EQUAL
4088: IFTRUE 4104
4090: LD_INT 23
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4104
4096: LD_INT 24
4098: DOUBLE
4099: EQUAL
4100: IFTRUE 4104
4102: GO 4114
4104: POP
// AddPoints ( 500 ) ; 25 :
4105: LD_INT 500
4107: PPUSH
4108: CALL 797 0 1
4112: GO 4133
4114: LD_INT 25
4116: DOUBLE
4117: EQUAL
4118: IFTRUE 4122
4120: GO 4132
4122: POP
// AddPoints ( 1250 ) ; end ;
4123: LD_INT 1250
4125: PPUSH
4126: CALL 797 0 1
4130: GO 4133
4132: POP
// end ; end ;
4133: GO 4136
4135: POP
// end ; end ;
4136: PPOPN 1
4138: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
4139: LD_VAR 0 1
4143: PPUSH
4144: CALL_OW 266
4148: PUSH
4149: LD_INT 0
4151: EQUAL
4152: IFFALSE 4202
// begin base_x := GetX ( b ) ;
4154: LD_ADDR_EXP 9
4158: PUSH
4159: LD_VAR 0 1
4163: PPUSH
4164: CALL_OW 250
4168: ST_TO_ADDR
// base_y := GetY ( b ) ;
4169: LD_ADDR_EXP 10
4173: PUSH
4174: LD_VAR 0 1
4178: PPUSH
4179: CALL_OW 251
4183: ST_TO_ADDR
// base := b ;
4184: LD_ADDR_EXP 11
4188: PUSH
4189: LD_VAR 0 1
4193: ST_TO_ADDR
// game_started := true ;
4194: LD_ADDR_EXP 7
4198: PUSH
4199: LD_INT 1
4201: ST_TO_ADDR
// end ; end ;
4202: PPOPN 1
4204: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
4205: LD_VAR 0 1
4209: PPUSH
4210: CALL_OW 255
4214: PUSH
4215: LD_OWVAR 2
4219: EQUAL
4220: IFFALSE 4224
// exit ;
4222: GO 4371
// if GetType ( un ) = unit_vehicle then
4224: LD_VAR 0 1
4228: PPUSH
4229: CALL_OW 247
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4290
// begin KillUnit ( un ) ;
4239: LD_VAR 0 1
4243: PPUSH
4244: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
4248: LD_VAR 0 1
4252: PPUSH
4253: CALL_OW 248
4257: PUSH
4258: LD_INT 2
4260: EQUAL
4261: PUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: CALL_OW 264
4271: PUSH
4272: LD_INT 49
4274: PUSH
4275: EMPTY
4276: LIST
4277: IN
4278: OR
4279: IFFALSE 4290
// ExplodeVehicle ( un ) ;
4281: LD_VAR 0 1
4285: PPUSH
4286: CALL 2506 0 1
// end ; if GetType ( un ) = unit_human then
4290: LD_VAR 0 1
4294: PPUSH
4295: CALL_OW 247
4299: PUSH
4300: LD_INT 1
4302: EQUAL
4303: IFFALSE 4371
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
4305: LD_VAR 0 1
4309: PPUSH
4310: CALL_OW 248
4314: PUSH
4315: LD_INT 2
4317: EQUAL
4318: PUSH
4319: LD_INT 5
4321: PPUSH
4322: LD_INT 7
4324: PPUSH
4325: CALL_OW 321
4329: PUSH
4330: LD_INT 2
4332: NONEQUAL
4333: AND
4334: PUSH
4335: LD_VAR 0 1
4339: PPUSH
4340: CALL_OW 248
4344: PUSH
4345: LD_INT 0
4347: PUSH
4348: LD_INT 1
4350: PUSH
4351: LD_INT 3
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: IN
4359: OR
4360: IFFALSE 4371
// KillUnit ( un ) ;
4362: LD_VAR 0 1
4366: PPUSH
4367: CALL_OW 66
// end ; end ;
4371: PPOPN 1
4373: END
// every 0 0$1 do
4374: GO 4376
4376: DISABLE
// begin enable ;
4377: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4378: LD_INT 4
4380: PPUSH
4381: LD_INT 5
4383: PPUSH
4384: LD_INT 22
4386: PUSH
4387: LD_OWVAR 2
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 513
// end ;
4400: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4401: LD_EXP 7
4405: PUSH
4406: LD_INT 22
4408: PUSH
4409: LD_OWVAR 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: LD_INT 21
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PPUSH
4432: CALL_OW 69
4436: PUSH
4437: LD_INT 0
4439: EQUAL
4440: AND
4441: IFFALSE 4453
4443: GO 4445
4445: DISABLE
// YouLost ( die ) ;
4446: LD_STRING die
4448: PPUSH
4449: CALL_OW 104
4453: END
// every 0 0$21 trigger tick <= 15 15$00 do
4454: LD_OWVAR 1
4458: PUSH
4459: LD_INT 31500
4461: LESSEQUAL
4462: IFFALSE 4489
4464: GO 4466
4466: DISABLE
// begin enable ;
4467: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4468: LD_INT 1
4470: PPUSH
4471: LD_INT 5
4473: PPUSH
4474: CALL_OW 12
4478: PPUSH
4479: LD_INT 3
4481: PPUSH
4482: LD_INT 1
4484: PPUSH
4485: CALL_OW 55
// end ;
4489: END
// every 0 0$51 trigger tick > 15 15$00 do
4490: LD_OWVAR 1
4494: PUSH
4495: LD_INT 31500
4497: GREATER
4498: IFFALSE 4545
4500: GO 4502
4502: DISABLE
// begin enable ;
4503: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4504: LD_INT 22
4506: PUSH
4507: LD_INT 7
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PPUSH
4514: CALL_OW 69
4518: PUSH
4519: LD_INT 0
4521: EQUAL
4522: IFFALSE 4545
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4524: LD_INT 1
4526: PPUSH
4527: LD_INT 5
4529: PPUSH
4530: CALL_OW 12
4534: PPUSH
4535: LD_INT 3
4537: PPUSH
4538: LD_INT 1
4540: PPUSH
4541: CALL_OW 55
// end ;
4545: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4546: LD_VAR 0 1
4550: PPUSH
4551: LD_INT 3
4553: PPUSH
4554: CALL_OW 308
4558: IFFALSE 4569
// KillUnit ( building ) ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 66
// end ;
4569: PPOPN 2
4571: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4572: LD_VAR 0 1
4576: PPUSH
4577: LD_VAR 0 2
4581: PPUSH
4582: LD_VAR 0 3
4586: PPUSH
4587: CALL 22523 0 3
// end ;
4591: PPOPN 3
4593: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4594: LD_VAR 0 1
4598: PPUSH
4599: CALL 22531 0 1
// end ; end_of_file
4603: PPOPN 1
4605: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4606: LD_INT 0
4608: PPUSH
4609: PPUSH
4610: PPUSH
4611: PPUSH
4612: PPUSH
4613: PPUSH
4614: PPUSH
4615: PPUSH
4616: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4617: LD_ADDR_VAR 0 7
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 2
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: ST_TO_ADDR
// uc_side := 7 ;
4632: LD_ADDR_OWVAR 20
4636: PUSH
4637: LD_INT 7
4639: ST_TO_ADDR
// l := 0 ;
4640: LD_ADDR_VAR 0 9
4644: PUSH
4645: LD_INT 0
4647: ST_TO_ADDR
// case num of 1 :
4648: LD_VAR 0 1
4652: PUSH
4653: LD_INT 1
4655: DOUBLE
4656: EQUAL
4657: IFTRUE 4661
4659: GO 4680
4661: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4662: LD_ADDR_VAR 0 2
4666: PUSH
4667: LD_INT 12
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: CALL 7009 0 2
4677: ST_TO_ADDR
4678: GO 6818
4680: LD_INT 2
4682: DOUBLE
4683: EQUAL
4684: IFTRUE 4688
4686: GO 4707
4688: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4689: LD_ADDR_VAR 0 2
4693: PUSH
4694: LD_INT 12
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL 7080 0 2
4704: ST_TO_ADDR
4705: GO 6818
4707: LD_INT 3
4709: DOUBLE
4710: EQUAL
4711: IFTRUE 4715
4713: GO 4734
4715: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4716: LD_ADDR_VAR 0 2
4720: PUSH
4721: LD_INT 12
4723: PPUSH
4724: LD_INT 1
4726: PPUSH
4727: CALL 7151 0 2
4731: ST_TO_ADDR
4732: GO 6818
4734: LD_INT 4
4736: DOUBLE
4737: EQUAL
4738: IFTRUE 4742
4740: GO 4761
4742: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4743: LD_ADDR_VAR 0 2
4747: PUSH
4748: LD_INT 7
4750: PPUSH
4751: LD_INT 1
4753: PPUSH
4754: CALL 7230 0 2
4758: ST_TO_ADDR
4759: GO 6818
4761: LD_INT 5
4763: DOUBLE
4764: EQUAL
4765: IFTRUE 4769
4767: GO 4788
4769: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4770: LD_ADDR_VAR 0 2
4774: PUSH
4775: LD_INT 7
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL 7626 0 2
4785: ST_TO_ADDR
4786: GO 6818
4788: LD_INT 6
4790: DOUBLE
4791: EQUAL
4792: IFTRUE 4796
4794: GO 4815
4796: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 1
4807: PPUSH
4808: CALL 8046 0 2
4812: ST_TO_ADDR
4813: GO 6818
4815: LD_INT 7
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4823
4821: GO 4842
4823: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: LD_INT 15
4831: PPUSH
4832: LD_INT 1
4834: PPUSH
4835: CALL 8466 0 2
4839: ST_TO_ADDR
4840: GO 6818
4842: LD_INT 8
4844: DOUBLE
4845: EQUAL
4846: IFTRUE 4850
4848: GO 4869
4850: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 7
4858: PPUSH
4859: LD_INT 1
4861: PPUSH
4862: CALL 8567 0 2
4866: ST_TO_ADDR
4867: GO 6818
4869: LD_INT 9
4871: DOUBLE
4872: EQUAL
4873: IFTRUE 4877
4875: GO 4908
4877: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4878: LD_ADDR_VAR 0 2
4882: PUSH
4883: LD_INT 4
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: CALL 8567 0 2
4893: PUSH
4894: LD_INT 7
4896: PPUSH
4897: LD_INT 1
4899: PPUSH
4900: CALL 7626 0 2
4904: ADD
4905: ST_TO_ADDR
4906: GO 6818
4908: LD_INT 10
4910: DOUBLE
4911: EQUAL
4912: IFTRUE 4916
4914: GO 4947
4916: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4917: LD_ADDR_VAR 0 2
4921: PUSH
4922: LD_INT 9
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL 8466 0 2
4932: PUSH
4933: LD_INT 14
4935: PPUSH
4936: LD_INT 1
4938: PPUSH
4939: CALL 7151 0 2
4943: ADD
4944: ST_TO_ADDR
4945: GO 6818
4947: LD_INT 11
4949: DOUBLE
4950: EQUAL
4951: IFTRUE 5003
4953: LD_INT 21
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 5003
4959: LD_INT 31
4961: DOUBLE
4962: EQUAL
4963: IFTRUE 5003
4965: LD_INT 41
4967: DOUBLE
4968: EQUAL
4969: IFTRUE 5003
4971: LD_INT 51
4973: DOUBLE
4974: EQUAL
4975: IFTRUE 5003
4977: LD_INT 61
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 5003
4983: LD_INT 71
4985: DOUBLE
4986: EQUAL
4987: IFTRUE 5003
4989: LD_INT 81
4991: DOUBLE
4992: EQUAL
4993: IFTRUE 5003
4995: LD_INT 91
4997: DOUBLE
4998: EQUAL
4999: IFTRUE 5003
5001: GO 5112
5003: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
5004: LD_ADDR_VAR 0 2
5008: PUSH
5009: LD_INT 20
5011: PUSH
5012: LD_INT 30
5014: PUSH
5015: LD_INT 40
5017: PUSH
5018: LD_INT 45
5020: PUSH
5021: LD_INT 50
5023: PUSH
5024: LD_INT 60
5026: PUSH
5027: LD_INT 70
5029: PUSH
5030: LD_INT 80
5032: PUSH
5033: LD_INT 100
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: PUSH
5047: LD_VAR 0 1
5051: PUSH
5052: LD_INT 10
5054: DIV
5055: ARRAY
5056: PPUSH
5057: LD_INT 2
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: LD_INT 4
5065: PUSH
5066: LD_INT 5
5068: PUSH
5069: LD_INT 6
5071: PUSH
5072: LD_INT 7
5074: PUSH
5075: LD_INT 8
5077: PUSH
5078: LD_INT 9
5080: PUSH
5081: LD_INT 10
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: PUSH
5095: LD_VAR 0 1
5099: PUSH
5100: LD_INT 10
5102: DIV
5103: ARRAY
5104: PPUSH
5105: CALL 7009 0 2
5109: ST_TO_ADDR
5110: GO 6818
5112: LD_INT 12
5114: DOUBLE
5115: EQUAL
5116: IFTRUE 5168
5118: LD_INT 22
5120: DOUBLE
5121: EQUAL
5122: IFTRUE 5168
5124: LD_INT 32
5126: DOUBLE
5127: EQUAL
5128: IFTRUE 5168
5130: LD_INT 42
5132: DOUBLE
5133: EQUAL
5134: IFTRUE 5168
5136: LD_INT 52
5138: DOUBLE
5139: EQUAL
5140: IFTRUE 5168
5142: LD_INT 62
5144: DOUBLE
5145: EQUAL
5146: IFTRUE 5168
5148: LD_INT 72
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5168
5154: LD_INT 82
5156: DOUBLE
5157: EQUAL
5158: IFTRUE 5168
5160: LD_INT 92
5162: DOUBLE
5163: EQUAL
5164: IFTRUE 5168
5166: GO 5277
5168: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
5169: LD_ADDR_VAR 0 2
5173: PUSH
5174: LD_INT 16
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 28
5182: PUSH
5183: LD_INT 33
5185: PUSH
5186: LD_INT 39
5188: PUSH
5189: LD_INT 46
5191: PUSH
5192: LD_INT 56
5194: PUSH
5195: LD_INT 66
5197: PUSH
5198: LD_INT 80
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_VAR 0 1
5216: PUSH
5217: LD_INT 10
5219: DIV
5220: ARRAY
5221: PPUSH
5222: LD_INT 2
5224: PUSH
5225: LD_INT 3
5227: PUSH
5228: LD_INT 4
5230: PUSH
5231: LD_INT 5
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: LD_INT 7
5239: PUSH
5240: LD_INT 8
5242: PUSH
5243: LD_INT 9
5245: PUSH
5246: LD_INT 10
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: PUSH
5260: LD_VAR 0 1
5264: PUSH
5265: LD_INT 10
5267: DIV
5268: ARRAY
5269: PPUSH
5270: CALL 7080 0 2
5274: ST_TO_ADDR
5275: GO 6818
5277: LD_INT 13
5279: DOUBLE
5280: EQUAL
5281: IFTRUE 5333
5283: LD_INT 23
5285: DOUBLE
5286: EQUAL
5287: IFTRUE 5333
5289: LD_INT 33
5291: DOUBLE
5292: EQUAL
5293: IFTRUE 5333
5295: LD_INT 43
5297: DOUBLE
5298: EQUAL
5299: IFTRUE 5333
5301: LD_INT 53
5303: DOUBLE
5304: EQUAL
5305: IFTRUE 5333
5307: LD_INT 63
5309: DOUBLE
5310: EQUAL
5311: IFTRUE 5333
5313: LD_INT 73
5315: DOUBLE
5316: EQUAL
5317: IFTRUE 5333
5319: LD_INT 83
5321: DOUBLE
5322: EQUAL
5323: IFTRUE 5333
5325: LD_INT 93
5327: DOUBLE
5328: EQUAL
5329: IFTRUE 5333
5331: GO 5442
5333: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5334: LD_ADDR_VAR 0 2
5338: PUSH
5339: LD_INT 14
5341: PUSH
5342: LD_INT 18
5344: PUSH
5345: LD_INT 22
5347: PUSH
5348: LD_INT 27
5350: PUSH
5351: LD_INT 33
5353: PUSH
5354: LD_INT 39
5356: PUSH
5357: LD_INT 44
5359: PUSH
5360: LD_INT 57
5362: PUSH
5363: LD_INT 65
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PUSH
5377: LD_VAR 0 1
5381: PUSH
5382: LD_INT 10
5384: DIV
5385: ARRAY
5386: PPUSH
5387: LD_INT 2
5389: PUSH
5390: LD_INT 3
5392: PUSH
5393: LD_INT 4
5395: PUSH
5396: LD_INT 5
5398: PUSH
5399: LD_INT 6
5401: PUSH
5402: LD_INT 7
5404: PUSH
5405: LD_INT 8
5407: PUSH
5408: LD_INT 9
5410: PUSH
5411: LD_INT 10
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: LD_VAR 0 1
5429: PUSH
5430: LD_INT 10
5432: DIV
5433: ARRAY
5434: PPUSH
5435: CALL 7151 0 2
5439: ST_TO_ADDR
5440: GO 6818
5442: LD_INT 14
5444: DOUBLE
5445: EQUAL
5446: IFTRUE 5498
5448: LD_INT 24
5450: DOUBLE
5451: EQUAL
5452: IFTRUE 5498
5454: LD_INT 34
5456: DOUBLE
5457: EQUAL
5458: IFTRUE 5498
5460: LD_INT 44
5462: DOUBLE
5463: EQUAL
5464: IFTRUE 5498
5466: LD_INT 54
5468: DOUBLE
5469: EQUAL
5470: IFTRUE 5498
5472: LD_INT 64
5474: DOUBLE
5475: EQUAL
5476: IFTRUE 5498
5478: LD_INT 74
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5498
5484: LD_INT 84
5486: DOUBLE
5487: EQUAL
5488: IFTRUE 5498
5490: LD_INT 94
5492: DOUBLE
5493: EQUAL
5494: IFTRUE 5498
5496: GO 5607
5498: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5499: LD_ADDR_VAR 0 2
5503: PUSH
5504: LD_INT 9
5506: PUSH
5507: LD_INT 15
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 30
5515: PUSH
5516: LD_INT 39
5518: PUSH
5519: LD_INT 45
5521: PUSH
5522: LD_INT 56
5524: PUSH
5525: LD_INT 60
5527: PUSH
5528: LD_INT 65
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: PUSH
5542: LD_VAR 0 1
5546: PUSH
5547: LD_INT 10
5549: DIV
5550: ARRAY
5551: PPUSH
5552: LD_INT 2
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: LD_INT 4
5560: PUSH
5561: LD_INT 5
5563: PUSH
5564: LD_INT 6
5566: PUSH
5567: LD_INT 7
5569: PUSH
5570: LD_INT 8
5572: PUSH
5573: LD_INT 9
5575: PUSH
5576: LD_INT 10
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 10
5597: DIV
5598: ARRAY
5599: PPUSH
5600: CALL 7230 0 2
5604: ST_TO_ADDR
5605: GO 6818
5607: LD_INT 15
5609: DOUBLE
5610: EQUAL
5611: IFTRUE 5663
5613: LD_INT 25
5615: DOUBLE
5616: EQUAL
5617: IFTRUE 5663
5619: LD_INT 35
5621: DOUBLE
5622: EQUAL
5623: IFTRUE 5663
5625: LD_INT 45
5627: DOUBLE
5628: EQUAL
5629: IFTRUE 5663
5631: LD_INT 55
5633: DOUBLE
5634: EQUAL
5635: IFTRUE 5663
5637: LD_INT 65
5639: DOUBLE
5640: EQUAL
5641: IFTRUE 5663
5643: LD_INT 75
5645: DOUBLE
5646: EQUAL
5647: IFTRUE 5663
5649: LD_INT 85
5651: DOUBLE
5652: EQUAL
5653: IFTRUE 5663
5655: LD_INT 95
5657: DOUBLE
5658: EQUAL
5659: IFTRUE 5663
5661: GO 5772
5663: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 6
5671: PUSH
5672: LD_INT 11
5674: PUSH
5675: LD_INT 15
5677: PUSH
5678: LD_INT 20
5680: PUSH
5681: LD_INT 25
5683: PUSH
5684: LD_INT 30
5686: PUSH
5687: LD_INT 35
5689: PUSH
5690: LD_INT 40
5692: PUSH
5693: LD_INT 45
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: LD_VAR 0 1
5711: PUSH
5712: LD_INT 10
5714: DIV
5715: ARRAY
5716: PPUSH
5717: LD_INT 2
5719: PUSH
5720: LD_INT 3
5722: PUSH
5723: LD_INT 4
5725: PUSH
5726: LD_INT 5
5728: PUSH
5729: LD_INT 6
5731: PUSH
5732: LD_INT 7
5734: PUSH
5735: LD_INT 8
5737: PUSH
5738: LD_INT 9
5740: PUSH
5741: LD_INT 10
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: PUSH
5755: LD_VAR 0 1
5759: PUSH
5760: LD_INT 10
5762: DIV
5763: ARRAY
5764: PPUSH
5765: CALL 7626 0 2
5769: ST_TO_ADDR
5770: GO 6818
5772: LD_INT 16
5774: DOUBLE
5775: EQUAL
5776: IFTRUE 5828
5778: LD_INT 26
5780: DOUBLE
5781: EQUAL
5782: IFTRUE 5828
5784: LD_INT 36
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5828
5790: LD_INT 46
5792: DOUBLE
5793: EQUAL
5794: IFTRUE 5828
5796: LD_INT 56
5798: DOUBLE
5799: EQUAL
5800: IFTRUE 5828
5802: LD_INT 66
5804: DOUBLE
5805: EQUAL
5806: IFTRUE 5828
5808: LD_INT 76
5810: DOUBLE
5811: EQUAL
5812: IFTRUE 5828
5814: LD_INT 86
5816: DOUBLE
5817: EQUAL
5818: IFTRUE 5828
5820: LD_INT 96
5822: DOUBLE
5823: EQUAL
5824: IFTRUE 5828
5826: GO 5937
5828: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5829: LD_ADDR_VAR 0 2
5833: PUSH
5834: LD_INT 9
5836: PUSH
5837: LD_INT 12
5839: PUSH
5840: LD_INT 15
5842: PUSH
5843: LD_INT 18
5845: PUSH
5846: LD_INT 21
5848: PUSH
5849: LD_INT 24
5851: PUSH
5852: LD_INT 27
5854: PUSH
5855: LD_INT 30
5857: PUSH
5858: LD_INT 33
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: PUSH
5872: LD_VAR 0 1
5876: PUSH
5877: LD_INT 10
5879: DIV
5880: ARRAY
5881: PPUSH
5882: LD_INT 2
5884: PUSH
5885: LD_INT 3
5887: PUSH
5888: LD_INT 4
5890: PUSH
5891: LD_INT 5
5893: PUSH
5894: LD_INT 6
5896: PUSH
5897: LD_INT 7
5899: PUSH
5900: LD_INT 8
5902: PUSH
5903: LD_INT 9
5905: PUSH
5906: LD_INT 10
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: PUSH
5920: LD_VAR 0 1
5924: PUSH
5925: LD_INT 10
5927: DIV
5928: ARRAY
5929: PPUSH
5930: CALL 8046 0 2
5934: ST_TO_ADDR
5935: GO 6818
5937: LD_INT 17
5939: DOUBLE
5940: EQUAL
5941: IFTRUE 5993
5943: LD_INT 27
5945: DOUBLE
5946: EQUAL
5947: IFTRUE 5993
5949: LD_INT 37
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5993
5955: LD_INT 47
5957: DOUBLE
5958: EQUAL
5959: IFTRUE 5993
5961: LD_INT 57
5963: DOUBLE
5964: EQUAL
5965: IFTRUE 5993
5967: LD_INT 67
5969: DOUBLE
5970: EQUAL
5971: IFTRUE 5993
5973: LD_INT 77
5975: DOUBLE
5976: EQUAL
5977: IFTRUE 5993
5979: LD_INT 87
5981: DOUBLE
5982: EQUAL
5983: IFTRUE 5993
5985: LD_INT 97
5987: DOUBLE
5988: EQUAL
5989: IFTRUE 5993
5991: GO 6102
5993: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: LD_INT 14
6001: PUSH
6002: LD_INT 16
6004: PUSH
6005: LD_INT 18
6007: PUSH
6008: LD_INT 22
6010: PUSH
6011: LD_INT 24
6013: PUSH
6014: LD_INT 26
6016: PUSH
6017: LD_INT 28
6019: PUSH
6020: LD_INT 32
6022: PUSH
6023: LD_INT 35
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 1
6041: PUSH
6042: LD_INT 10
6044: DIV
6045: ARRAY
6046: PPUSH
6047: LD_INT 2
6049: PUSH
6050: LD_INT 3
6052: PUSH
6053: LD_INT 4
6055: PUSH
6056: LD_INT 5
6058: PUSH
6059: LD_INT 6
6061: PUSH
6062: LD_INT 7
6064: PUSH
6065: LD_INT 8
6067: PUSH
6068: LD_INT 9
6070: PUSH
6071: LD_INT 10
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_VAR 0 1
6089: PUSH
6090: LD_INT 10
6092: DIV
6093: ARRAY
6094: PPUSH
6095: CALL 8466 0 2
6099: ST_TO_ADDR
6100: GO 6818
6102: LD_INT 18
6104: DOUBLE
6105: EQUAL
6106: IFTRUE 6158
6108: LD_INT 28
6110: DOUBLE
6111: EQUAL
6112: IFTRUE 6158
6114: LD_INT 38
6116: DOUBLE
6117: EQUAL
6118: IFTRUE 6158
6120: LD_INT 48
6122: DOUBLE
6123: EQUAL
6124: IFTRUE 6158
6126: LD_INT 58
6128: DOUBLE
6129: EQUAL
6130: IFTRUE 6158
6132: LD_INT 68
6134: DOUBLE
6135: EQUAL
6136: IFTRUE 6158
6138: LD_INT 78
6140: DOUBLE
6141: EQUAL
6142: IFTRUE 6158
6144: LD_INT 88
6146: DOUBLE
6147: EQUAL
6148: IFTRUE 6158
6150: LD_INT 98
6152: DOUBLE
6153: EQUAL
6154: IFTRUE 6158
6156: GO 6267
6158: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
6159: LD_ADDR_VAR 0 2
6163: PUSH
6164: LD_INT 9
6166: PUSH
6167: LD_INT 12
6169: PUSH
6170: LD_INT 15
6172: PUSH
6173: LD_INT 18
6175: PUSH
6176: LD_INT 21
6178: PUSH
6179: LD_INT 24
6181: PUSH
6182: LD_INT 27
6184: PUSH
6185: LD_INT 30
6187: PUSH
6188: LD_INT 33
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: PUSH
6202: LD_VAR 0 1
6206: PUSH
6207: LD_INT 10
6209: DIV
6210: ARRAY
6211: PPUSH
6212: LD_INT 2
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: LD_INT 4
6220: PUSH
6221: LD_INT 5
6223: PUSH
6224: LD_INT 6
6226: PUSH
6227: LD_INT 7
6229: PUSH
6230: LD_INT 8
6232: PUSH
6233: LD_INT 9
6235: PUSH
6236: LD_INT 10
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_VAR 0 1
6254: PUSH
6255: LD_INT 10
6257: DIV
6258: ARRAY
6259: PPUSH
6260: CALL 8567 0 2
6264: ST_TO_ADDR
6265: GO 6818
6267: LD_INT 19
6269: DOUBLE
6270: EQUAL
6271: IFTRUE 6323
6273: LD_INT 29
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6323
6279: LD_INT 39
6281: DOUBLE
6282: EQUAL
6283: IFTRUE 6323
6285: LD_INT 49
6287: DOUBLE
6288: EQUAL
6289: IFTRUE 6323
6291: LD_INT 59
6293: DOUBLE
6294: EQUAL
6295: IFTRUE 6323
6297: LD_INT 69
6299: DOUBLE
6300: EQUAL
6301: IFTRUE 6323
6303: LD_INT 79
6305: DOUBLE
6306: EQUAL
6307: IFTRUE 6323
6309: LD_INT 89
6311: DOUBLE
6312: EQUAL
6313: IFTRUE 6323
6315: LD_INT 99
6317: DOUBLE
6318: EQUAL
6319: IFTRUE 6323
6321: GO 6534
6323: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: LD_INT 4
6331: PUSH
6332: LD_INT 7
6334: PUSH
6335: LD_INT 10
6337: PUSH
6338: LD_INT 13
6340: PUSH
6341: LD_INT 14
6343: PUSH
6344: LD_INT 17
6346: PUSH
6347: LD_INT 19
6349: PUSH
6350: LD_INT 21
6352: PUSH
6353: LD_INT 23
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_VAR 0 1
6371: PUSH
6372: LD_INT 10
6374: DIV
6375: ARRAY
6376: PPUSH
6377: LD_INT 2
6379: PUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: LD_INT 5
6388: PUSH
6389: LD_INT 6
6391: PUSH
6392: LD_INT 7
6394: PUSH
6395: LD_INT 8
6397: PUSH
6398: LD_INT 9
6400: PUSH
6401: LD_INT 10
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: PUSH
6415: LD_VAR 0 1
6419: PUSH
6420: LD_INT 10
6422: DIV
6423: ARRAY
6424: PPUSH
6425: CALL 8567 0 2
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 7
6435: PUSH
6436: LD_INT 10
6438: PUSH
6439: LD_INT 13
6441: PUSH
6442: LD_INT 14
6444: PUSH
6445: LD_INT 17
6447: PUSH
6448: LD_INT 19
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 25
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: LD_VAR 0 1
6472: PUSH
6473: LD_INT 10
6475: DIV
6476: ARRAY
6477: PPUSH
6478: LD_INT 2
6480: PUSH
6481: LD_INT 3
6483: PUSH
6484: LD_INT 4
6486: PUSH
6487: LD_INT 5
6489: PUSH
6490: LD_INT 6
6492: PUSH
6493: LD_INT 7
6495: PUSH
6496: LD_INT 8
6498: PUSH
6499: LD_INT 9
6501: PUSH
6502: LD_INT 10
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: PUSH
6516: LD_VAR 0 1
6520: PUSH
6521: LD_INT 10
6523: DIV
6524: ARRAY
6525: PPUSH
6526: CALL 7626 0 2
6530: ADD
6531: ST_TO_ADDR
6532: GO 6818
6534: LD_INT 20
6536: DOUBLE
6537: EQUAL
6538: IFTRUE 6590
6540: LD_INT 30
6542: DOUBLE
6543: EQUAL
6544: IFTRUE 6590
6546: LD_INT 40
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6590
6552: LD_INT 50
6554: DOUBLE
6555: EQUAL
6556: IFTRUE 6590
6558: LD_INT 60
6560: DOUBLE
6561: EQUAL
6562: IFTRUE 6590
6564: LD_INT 70
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6590
6570: LD_INT 80
6572: DOUBLE
6573: EQUAL
6574: IFTRUE 6590
6576: LD_INT 90
6578: DOUBLE
6579: EQUAL
6580: IFTRUE 6590
6582: LD_INT 100
6584: DOUBLE
6585: EQUAL
6586: IFTRUE 6590
6588: GO 6817
6590: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: LD_INT 4
6598: PUSH
6599: LD_INT 7
6601: PUSH
6602: LD_INT 10
6604: PUSH
6605: LD_INT 13
6607: PUSH
6608: LD_INT 14
6610: PUSH
6611: LD_INT 17
6613: PUSH
6614: LD_INT 19
6616: PUSH
6617: LD_INT 21
6619: PUSH
6620: LD_INT 23
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PUSH
6634: LD_VAR 0 1
6638: PUSH
6639: LD_INT 10
6641: DIVREAL
6642: PUSH
6643: LD_INT 1
6645: MINUS
6646: ARRAY
6647: PPUSH
6648: LD_INT 2
6650: PUSH
6651: LD_INT 3
6653: PUSH
6654: LD_INT 4
6656: PUSH
6657: LD_INT 5
6659: PUSH
6660: LD_INT 6
6662: PUSH
6663: LD_INT 7
6665: PUSH
6666: LD_INT 8
6668: PUSH
6669: LD_INT 9
6671: PUSH
6672: LD_INT 10
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: PUSH
6686: LD_VAR 0 1
6690: PUSH
6691: LD_INT 10
6693: DIVREAL
6694: PUSH
6695: LD_INT 1
6697: MINUS
6698: ARRAY
6699: PPUSH
6700: CALL 8466 0 2
6704: PUSH
6705: LD_INT 4
6707: PUSH
6708: LD_INT 7
6710: PUSH
6711: LD_INT 10
6713: PUSH
6714: LD_INT 13
6716: PUSH
6717: LD_INT 14
6719: PUSH
6720: LD_INT 17
6722: PUSH
6723: LD_INT 19
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 25
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: LD_VAR 0 1
6747: PUSH
6748: LD_INT 10
6750: DIVREAL
6751: PUSH
6752: LD_INT 1
6754: MINUS
6755: ARRAY
6756: PPUSH
6757: LD_INT 2
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: LD_INT 4
6765: PUSH
6766: LD_INT 5
6768: PUSH
6769: LD_INT 6
6771: PUSH
6772: LD_INT 7
6774: PUSH
6775: LD_INT 8
6777: PUSH
6778: LD_INT 9
6780: PUSH
6781: LD_INT 10
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: PUSH
6795: LD_VAR 0 1
6799: PUSH
6800: LD_INT 10
6802: DIVREAL
6803: PUSH
6804: LD_INT 1
6806: MINUS
6807: ARRAY
6808: PPUSH
6809: CALL 8046 0 2
6813: ADD
6814: ST_TO_ADDR
6815: GO 6818
6817: POP
// for i in result do
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: LD_VAR 0 2
6827: PUSH
6828: FOR_IN
6829: IFFALSE 7002
// begin a := rand ( 1 , 2 ) ;
6831: LD_ADDR_VAR 0 8
6835: PUSH
6836: LD_INT 1
6838: PPUSH
6839: LD_INT 2
6841: PPUSH
6842: CALL_OW 12
6846: ST_TO_ADDR
// if a = 1 then
6847: LD_VAR 0 8
6851: PUSH
6852: LD_INT 1
6854: EQUAL
6855: IFFALSE 6871
// SetDir ( i , 3 ) else
6857: LD_VAR 0 3
6861: PPUSH
6862: LD_INT 3
6864: PPUSH
6865: CALL_OW 233
6869: GO 6883
// SetDir ( i , 5 ) ;
6871: LD_VAR 0 3
6875: PPUSH
6876: LD_INT 5
6878: PPUSH
6879: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6883: LD_VAR 0 3
6887: PPUSH
6888: LD_VAR 0 7
6892: PUSH
6893: LD_VAR 0 8
6897: ARRAY
6898: PPUSH
6899: LD_INT 0
6901: PPUSH
6902: CALL_OW 49
// if GetControl ( i ) = control_manual then
6906: LD_VAR 0 3
6910: PPUSH
6911: CALL_OW 263
6915: PUSH
6916: LD_INT 1
6918: EQUAL
6919: IFFALSE 6965
// begin uc_nation := GetNation ( i ) ;
6921: LD_ADDR_OWVAR 21
6925: PUSH
6926: LD_VAR 0 3
6930: PPUSH
6931: CALL_OW 248
6935: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6936: LD_INT 0
6938: PPUSH
6939: LD_INT 3
6941: PPUSH
6942: LD_VAR 0 5
6946: PPUSH
6947: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6951: CALL_OW 44
6955: PPUSH
6956: LD_VAR 0 3
6960: PPUSH
6961: CALL_OW 52
// end ; l := l + 1 ;
6965: LD_ADDR_VAR 0 9
6969: PUSH
6970: LD_VAR 0 9
6974: PUSH
6975: LD_INT 1
6977: PLUS
6978: ST_TO_ADDR
// if l mod 10 = 0 then
6979: LD_VAR 0 9
6983: PUSH
6984: LD_INT 10
6986: MOD
6987: PUSH
6988: LD_INT 0
6990: EQUAL
6991: IFFALSE 7000
// Wait ( 0 0$02 ) ;
6993: LD_INT 70
6995: PPUSH
6996: CALL_OW 67
// end ;
7000: GO 6828
7002: POP
7003: POP
// end ;
7004: LD_VAR 0 2
7008: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
7009: LD_INT 0
7011: PPUSH
7012: PPUSH
7013: PPUSH
// uc_nation := nation_nature ;
7014: LD_ADDR_OWVAR 21
7018: PUSH
7019: LD_INT 0
7021: ST_TO_ADDR
// for i = 1 to n do
7022: LD_ADDR_VAR 0 4
7026: PUSH
7027: DOUBLE
7028: LD_INT 1
7030: DEC
7031: ST_TO_ADDR
7032: LD_VAR 0 1
7036: PUSH
7037: FOR_TO
7038: IFFALSE 7073
// begin PrepareHuman ( false , class_apeman , skill ) ;
7040: LD_INT 0
7042: PPUSH
7043: LD_INT 12
7045: PPUSH
7046: LD_VAR 0 2
7050: PPUSH
7051: CALL_OW 380
// result := result ^ CreateHuman ;
7055: LD_ADDR_VAR 0 3
7059: PUSH
7060: LD_VAR 0 3
7064: PUSH
7065: CALL_OW 44
7069: ADD
7070: ST_TO_ADDR
// end ;
7071: GO 7037
7073: POP
7074: POP
// end ;
7075: LD_VAR 0 3
7079: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
7080: LD_INT 0
7082: PPUSH
7083: PPUSH
7084: PPUSH
// uc_nation := nation_nature ;
7085: LD_ADDR_OWVAR 21
7089: PUSH
7090: LD_INT 0
7092: ST_TO_ADDR
// for i = 1 to n do
7093: LD_ADDR_VAR 0 4
7097: PUSH
7098: DOUBLE
7099: LD_INT 1
7101: DEC
7102: ST_TO_ADDR
7103: LD_VAR 0 1
7107: PUSH
7108: FOR_TO
7109: IFFALSE 7144
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
7111: LD_INT 0
7113: PPUSH
7114: LD_INT 15
7116: PPUSH
7117: LD_VAR 0 2
7121: PPUSH
7122: CALL_OW 380
// result := result ^ CreateHuman ;
7126: LD_ADDR_VAR 0 3
7130: PUSH
7131: LD_VAR 0 3
7135: PUSH
7136: CALL_OW 44
7140: ADD
7141: ST_TO_ADDR
// end ;
7142: GO 7108
7144: POP
7145: POP
// end ;
7146: LD_VAR 0 3
7150: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
7151: LD_INT 0
7153: PPUSH
7154: PPUSH
7155: PPUSH
// for i = 1 to n do
7156: LD_ADDR_VAR 0 4
7160: PUSH
7161: DOUBLE
7162: LD_INT 1
7164: DEC
7165: ST_TO_ADDR
7166: LD_VAR 0 1
7170: PUSH
7171: FOR_TO
7172: IFFALSE 7223
// begin uc_nation := rand ( 1 , 3 ) ;
7174: LD_ADDR_OWVAR 21
7178: PUSH
7179: LD_INT 1
7181: PPUSH
7182: LD_INT 3
7184: PPUSH
7185: CALL_OW 12
7189: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
7190: LD_INT 0
7192: PPUSH
7193: LD_INT 1
7195: PPUSH
7196: LD_VAR 0 2
7200: PPUSH
7201: CALL_OW 380
// result := result ^ CreateHuman ;
7205: LD_ADDR_VAR 0 3
7209: PUSH
7210: LD_VAR 0 3
7214: PUSH
7215: CALL_OW 44
7219: ADD
7220: ST_TO_ADDR
// end ;
7221: GO 7171
7223: POP
7224: POP
// end ;
7225: LD_VAR 0 3
7229: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7230: LD_INT 0
7232: PPUSH
7233: PPUSH
7234: PPUSH
7235: PPUSH
7236: PPUSH
7237: PPUSH
7238: PPUSH
// for i = 1 to n do
7239: LD_ADDR_VAR 0 4
7243: PUSH
7244: DOUBLE
7245: LD_INT 1
7247: DEC
7248: ST_TO_ADDR
7249: LD_VAR 0 1
7253: PUSH
7254: FOR_TO
7255: IFFALSE 7619
// begin uc_nation := rand ( 1 , 3 ) ;
7257: LD_ADDR_OWVAR 21
7261: PUSH
7262: LD_INT 1
7264: PPUSH
7265: LD_INT 3
7267: PPUSH
7268: CALL_OW 12
7272: ST_TO_ADDR
// case uc_nation of 1 :
7273: LD_OWVAR 21
7277: PUSH
7278: LD_INT 1
7280: DOUBLE
7281: EQUAL
7282: IFTRUE 7286
7284: GO 7349
7286: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
7287: LD_ADDR_VAR 0 6
7291: PUSH
7292: LD_INT 1
7294: PUSH
7295: LD_INT 2
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
7302: LD_ADDR_VAR 0 7
7306: PUSH
7307: LD_INT 2
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7317: LD_ADDR_VAR 0 8
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7332: LD_ADDR_VAR 0 9
7336: PUSH
7337: LD_INT 1
7339: PUSH
7340: LD_INT 2
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: ST_TO_ADDR
// end ; 2 :
7347: GO 7484
7349: LD_INT 2
7351: DOUBLE
7352: EQUAL
7353: IFTRUE 7357
7355: GO 7420
7357: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7358: LD_ADDR_VAR 0 6
7362: PUSH
7363: LD_INT 12
7365: PUSH
7366: LD_INT 11
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7373: LD_ADDR_VAR 0 7
7377: PUSH
7378: LD_INT 23
7380: PUSH
7381: LD_INT 24
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7388: LD_ADDR_VAR 0 8
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 5
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7403: LD_ADDR_VAR 0 9
7407: PUSH
7408: LD_INT 1
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// end ; 3 :
7418: GO 7484
7420: LD_INT 3
7422: DOUBLE
7423: EQUAL
7424: IFTRUE 7428
7426: GO 7483
7428: POP
// begin chassis := [ ru_medium_wheeled ] ;
7429: LD_ADDR_VAR 0 6
7433: PUSH
7434: LD_INT 21
7436: PUSH
7437: EMPTY
7438: LIST
7439: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7440: LD_ADDR_VAR 0 7
7444: PUSH
7445: LD_INT 42
7447: PUSH
7448: LD_INT 44
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7455: LD_ADDR_VAR 0 8
7459: PUSH
7460: LD_INT 1
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7470: LD_ADDR_VAR 0 9
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: EMPTY
7479: LIST
7480: ST_TO_ADDR
// end ; end ;
7481: GO 7484
7483: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7484: LD_ADDR_OWVAR 37
7488: PUSH
7489: LD_VAR 0 6
7493: PUSH
7494: LD_INT 1
7496: PPUSH
7497: LD_VAR 0 6
7501: PPUSH
7502: CALL_OW 12
7506: ARRAY
7507: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7508: LD_ADDR_OWVAR 39
7512: PUSH
7513: LD_VAR 0 9
7517: PUSH
7518: LD_INT 1
7520: PPUSH
7521: LD_VAR 0 9
7525: PPUSH
7526: CALL_OW 12
7530: ARRAY
7531: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7532: LD_ADDR_OWVAR 38
7536: PUSH
7537: LD_VAR 0 8
7541: PUSH
7542: LD_INT 1
7544: PPUSH
7545: LD_VAR 0 8
7549: PPUSH
7550: CALL_OW 12
7554: ARRAY
7555: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7556: LD_ADDR_OWVAR 40
7560: PUSH
7561: LD_VAR 0 7
7565: PUSH
7566: LD_INT 1
7568: PPUSH
7569: LD_VAR 0 7
7573: PPUSH
7574: CALL_OW 12
7578: ARRAY
7579: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7580: LD_ADDR_OWVAR 41
7584: PUSH
7585: LD_INT 100
7587: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7588: LD_ADDR_VAR 0 3
7592: PUSH
7593: LD_VAR 0 3
7597: PPUSH
7598: LD_VAR 0 3
7602: PUSH
7603: LD_INT 1
7605: PLUS
7606: PPUSH
7607: CALL_OW 45
7611: PPUSH
7612: CALL_OW 2
7616: ST_TO_ADDR
// end ;
7617: GO 7254
7619: POP
7620: POP
// end ;
7621: LD_VAR 0 3
7625: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7626: LD_INT 0
7628: PPUSH
7629: PPUSH
7630: PPUSH
7631: PPUSH
7632: PPUSH
7633: PPUSH
7634: PPUSH
// for i = 1 to n do
7635: LD_ADDR_VAR 0 4
7639: PUSH
7640: DOUBLE
7641: LD_INT 1
7643: DEC
7644: ST_TO_ADDR
7645: LD_VAR 0 1
7649: PUSH
7650: FOR_TO
7651: IFFALSE 8039
// begin uc_nation := rand ( 1 , 3 ) ;
7653: LD_ADDR_OWVAR 21
7657: PUSH
7658: LD_INT 1
7660: PPUSH
7661: LD_INT 3
7663: PPUSH
7664: CALL_OW 12
7668: ST_TO_ADDR
// case uc_nation of 1 :
7669: LD_OWVAR 21
7673: PUSH
7674: LD_INT 1
7676: DOUBLE
7677: EQUAL
7678: IFTRUE 7682
7680: GO 7753
7682: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7683: LD_ADDR_VAR 0 6
7687: PUSH
7688: LD_INT 2
7690: PUSH
7691: LD_INT 3
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7698: LD_ADDR_VAR 0 7
7702: PUSH
7703: LD_INT 4
7705: PUSH
7706: LD_INT 5
7708: PUSH
7709: LD_INT 9
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7717: LD_ADDR_VAR 0 8
7721: PUSH
7722: LD_INT 1
7724: PUSH
7725: LD_INT 3
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7732: LD_ADDR_VAR 0 9
7736: PUSH
7737: LD_INT 1
7739: PUSH
7740: LD_INT 2
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: ST_TO_ADDR
// end ; 2 :
7751: GO 7904
7753: LD_INT 2
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7832
7761: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7762: LD_ADDR_VAR 0 6
7766: PUSH
7767: LD_INT 13
7769: PUSH
7770: LD_INT 14
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7777: LD_ADDR_VAR 0 7
7781: PUSH
7782: LD_INT 27
7784: PUSH
7785: LD_INT 26
7787: PUSH
7788: LD_INT 25
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7796: LD_ADDR_VAR 0 8
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: LD_INT 5
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7811: LD_ADDR_VAR 0 9
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: LD_INT 2
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: ST_TO_ADDR
// end ; 3 :
7830: GO 7904
7832: LD_INT 3
7834: DOUBLE
7835: EQUAL
7836: IFTRUE 7840
7838: GO 7903
7840: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7841: LD_ADDR_VAR 0 6
7845: PUSH
7846: LD_INT 22
7848: PUSH
7849: LD_INT 21
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7856: LD_ADDR_VAR 0 7
7860: PUSH
7861: LD_INT 44
7863: PUSH
7864: LD_INT 43
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7871: LD_ADDR_VAR 0 8
7875: PUSH
7876: LD_INT 1
7878: PUSH
7879: LD_INT 3
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7886: LD_ADDR_VAR 0 9
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: ST_TO_ADDR
// end ; end ;
7901: GO 7904
7903: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7904: LD_ADDR_OWVAR 37
7908: PUSH
7909: LD_VAR 0 6
7913: PUSH
7914: LD_INT 1
7916: PPUSH
7917: LD_VAR 0 6
7921: PPUSH
7922: CALL_OW 12
7926: ARRAY
7927: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7928: LD_ADDR_OWVAR 39
7932: PUSH
7933: LD_VAR 0 9
7937: PUSH
7938: LD_INT 1
7940: PPUSH
7941: LD_VAR 0 9
7945: PPUSH
7946: CALL_OW 12
7950: ARRAY
7951: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7952: LD_ADDR_OWVAR 38
7956: PUSH
7957: LD_VAR 0 8
7961: PUSH
7962: LD_INT 1
7964: PPUSH
7965: LD_VAR 0 8
7969: PPUSH
7970: CALL_OW 12
7974: ARRAY
7975: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7976: LD_ADDR_OWVAR 40
7980: PUSH
7981: LD_VAR 0 7
7985: PUSH
7986: LD_INT 1
7988: PPUSH
7989: LD_VAR 0 7
7993: PPUSH
7994: CALL_OW 12
7998: ARRAY
7999: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8000: LD_ADDR_OWVAR 41
8004: PUSH
8005: LD_INT 100
8007: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8008: LD_ADDR_VAR 0 3
8012: PUSH
8013: LD_VAR 0 3
8017: PPUSH
8018: LD_VAR 0 3
8022: PUSH
8023: LD_INT 1
8025: PLUS
8026: PPUSH
8027: CALL_OW 45
8031: PPUSH
8032: CALL_OW 2
8036: ST_TO_ADDR
// end ;
8037: GO 7650
8039: POP
8040: POP
// end ;
8041: LD_VAR 0 3
8045: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8046: LD_INT 0
8048: PPUSH
8049: PPUSH
8050: PPUSH
8051: PPUSH
8052: PPUSH
8053: PPUSH
8054: PPUSH
// for i = 1 to n do
8055: LD_ADDR_VAR 0 4
8059: PUSH
8060: DOUBLE
8061: LD_INT 1
8063: DEC
8064: ST_TO_ADDR
8065: LD_VAR 0 1
8069: PUSH
8070: FOR_TO
8071: IFFALSE 8459
// begin uc_nation := rand ( 1 , 3 ) ;
8073: LD_ADDR_OWVAR 21
8077: PUSH
8078: LD_INT 1
8080: PPUSH
8081: LD_INT 3
8083: PPUSH
8084: CALL_OW 12
8088: ST_TO_ADDR
// case uc_nation of 1 :
8089: LD_OWVAR 21
8093: PUSH
8094: LD_INT 1
8096: DOUBLE
8097: EQUAL
8098: IFTRUE 8102
8100: GO 8169
8102: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8103: LD_ADDR_VAR 0 6
8107: PUSH
8108: LD_INT 4
8110: PUSH
8111: LD_INT 5
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
8118: LD_ADDR_VAR 0 7
8122: PUSH
8123: LD_INT 6
8125: PUSH
8126: LD_INT 7
8128: PUSH
8129: LD_INT 9
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: LIST
8136: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8137: LD_ADDR_VAR 0 8
8141: PUSH
8142: LD_INT 1
8144: PUSH
8145: LD_INT 3
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8152: LD_ADDR_VAR 0 9
8156: PUSH
8157: LD_INT 1
8159: PUSH
8160: LD_INT 3
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: ST_TO_ADDR
// end ; 2 :
8167: GO 8324
8169: LD_INT 2
8171: DOUBLE
8172: EQUAL
8173: IFTRUE 8177
8175: GO 8252
8177: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
8178: LD_ADDR_VAR 0 6
8182: PUSH
8183: LD_INT 13
8185: PUSH
8186: LD_INT 14
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8193: LD_ADDR_VAR 0 7
8197: PUSH
8198: LD_INT 27
8200: PUSH
8201: LD_INT 26
8203: PUSH
8204: LD_INT 28
8206: PUSH
8207: LD_INT 29
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8216: LD_ADDR_VAR 0 8
8220: PUSH
8221: LD_INT 1
8223: PUSH
8224: LD_INT 5
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8231: LD_ADDR_VAR 0 9
8235: PUSH
8236: LD_INT 1
8238: PUSH
8239: LD_INT 2
8241: PUSH
8242: LD_INT 3
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: ST_TO_ADDR
// end ; 3 :
8250: GO 8324
8252: LD_INT 3
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8323
8260: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8261: LD_ADDR_VAR 0 6
8265: PUSH
8266: LD_INT 23
8268: PUSH
8269: LD_INT 24
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
8276: LD_ADDR_VAR 0 7
8280: PUSH
8281: LD_INT 46
8283: PUSH
8284: LD_INT 45
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8291: LD_ADDR_VAR 0 8
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: LD_INT 3
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8306: LD_ADDR_VAR 0 9
8310: PUSH
8311: LD_INT 1
8313: PUSH
8314: LD_INT 3
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: ST_TO_ADDR
// end ; end ;
8321: GO 8324
8323: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8324: LD_ADDR_OWVAR 37
8328: PUSH
8329: LD_VAR 0 6
8333: PUSH
8334: LD_INT 1
8336: PPUSH
8337: LD_VAR 0 6
8341: PPUSH
8342: CALL_OW 12
8346: ARRAY
8347: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8348: LD_ADDR_OWVAR 39
8352: PUSH
8353: LD_VAR 0 9
8357: PUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_VAR 0 9
8365: PPUSH
8366: CALL_OW 12
8370: ARRAY
8371: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8372: LD_ADDR_OWVAR 38
8376: PUSH
8377: LD_VAR 0 8
8381: PUSH
8382: LD_INT 1
8384: PPUSH
8385: LD_VAR 0 8
8389: PPUSH
8390: CALL_OW 12
8394: ARRAY
8395: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8396: LD_ADDR_OWVAR 40
8400: PUSH
8401: LD_VAR 0 7
8405: PUSH
8406: LD_INT 1
8408: PPUSH
8409: LD_VAR 0 7
8413: PPUSH
8414: CALL_OW 12
8418: ARRAY
8419: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8420: LD_ADDR_OWVAR 41
8424: PUSH
8425: LD_INT 100
8427: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8428: LD_ADDR_VAR 0 3
8432: PUSH
8433: LD_VAR 0 3
8437: PPUSH
8438: LD_VAR 0 3
8442: PUSH
8443: LD_INT 1
8445: PLUS
8446: PPUSH
8447: CALL_OW 45
8451: PPUSH
8452: CALL_OW 2
8456: ST_TO_ADDR
// end ;
8457: GO 8070
8459: POP
8460: POP
// end ;
8461: LD_VAR 0 3
8465: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8466: LD_INT 0
8468: PPUSH
8469: PPUSH
// for i = 1 to n do
8470: LD_ADDR_VAR 0 4
8474: PUSH
8475: DOUBLE
8476: LD_INT 1
8478: DEC
8479: ST_TO_ADDR
8480: LD_VAR 0 1
8484: PUSH
8485: FOR_TO
8486: IFFALSE 8560
// begin uc_nation := rand ( 1 , 3 ) ;
8488: LD_ADDR_OWVAR 21
8492: PUSH
8493: LD_INT 1
8495: PPUSH
8496: LD_INT 3
8498: PPUSH
8499: CALL_OW 12
8503: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8504: LD_INT 0
8506: PPUSH
8507: LD_INT 8
8509: PUSH
8510: LD_INT 9
8512: PUSH
8513: LD_INT 1
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_INT 3
8526: PPUSH
8527: CALL_OW 12
8531: ARRAY
8532: PPUSH
8533: LD_VAR 0 2
8537: PPUSH
8538: CALL_OW 380
// result := result ^ CreateHuman ;
8542: LD_ADDR_VAR 0 3
8546: PUSH
8547: LD_VAR 0 3
8551: PUSH
8552: CALL_OW 44
8556: ADD
8557: ST_TO_ADDR
// end ;
8558: GO 8485
8560: POP
8561: POP
// end ;
8562: LD_VAR 0 3
8566: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8567: LD_INT 0
8569: PPUSH
8570: PPUSH
8571: PPUSH
8572: PPUSH
8573: PPUSH
8574: PPUSH
8575: PPUSH
// for i = 1 to n do
8576: LD_ADDR_VAR 0 4
8580: PUSH
8581: DOUBLE
8582: LD_INT 1
8584: DEC
8585: ST_TO_ADDR
8586: LD_VAR 0 1
8590: PUSH
8591: FOR_TO
8592: IFFALSE 8988
// begin uc_nation := rand ( 1 , 3 ) ;
8594: LD_ADDR_OWVAR 21
8598: PUSH
8599: LD_INT 1
8601: PPUSH
8602: LD_INT 3
8604: PPUSH
8605: CALL_OW 12
8609: ST_TO_ADDR
// case uc_nation of 1 :
8610: LD_OWVAR 21
8614: PUSH
8615: LD_INT 1
8617: DOUBLE
8618: EQUAL
8619: IFTRUE 8623
8621: GO 8696
8623: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8624: LD_ADDR_VAR 0 6
8628: PUSH
8629: LD_INT 4
8631: PUSH
8632: LD_INT 5
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8639: LD_ADDR_VAR 0 7
8643: PUSH
8644: LD_INT 6
8646: PUSH
8647: LD_INT 7
8649: PUSH
8650: LD_INT 10
8652: PUSH
8653: LD_EXP 17
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8664: LD_ADDR_VAR 0 8
8668: PUSH
8669: LD_INT 1
8671: PUSH
8672: LD_INT 3
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8679: LD_ADDR_VAR 0 9
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: LD_INT 3
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: ST_TO_ADDR
// end ; 2 :
8694: GO 8853
8696: LD_INT 2
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8777
8704: POP
// begin chassis := [ ar_half_tracked ] ;
8705: LD_ADDR_VAR 0 6
8709: PUSH
8710: LD_INT 14
8712: PUSH
8713: EMPTY
8714: LIST
8715: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8716: LD_ADDR_VAR 0 7
8720: PUSH
8721: LD_EXP 18
8725: PUSH
8726: LD_INT 26
8728: PUSH
8729: LD_INT 28
8731: PUSH
8732: LD_INT 29
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8741: LD_ADDR_VAR 0 8
8745: PUSH
8746: LD_INT 1
8748: PUSH
8749: LD_INT 5
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8756: LD_ADDR_VAR 0 9
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: LD_INT 2
8766: PUSH
8767: LD_INT 3
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: ST_TO_ADDR
// end ; 3 :
8775: GO 8853
8777: LD_INT 3
8779: DOUBLE
8780: EQUAL
8781: IFTRUE 8785
8783: GO 8852
8785: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8786: LD_ADDR_VAR 0 6
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 24
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8801: LD_ADDR_VAR 0 7
8805: PUSH
8806: LD_INT 46
8808: PUSH
8809: LD_INT 45
8811: PUSH
8812: LD_INT 49
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8820: LD_ADDR_VAR 0 8
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8835: LD_ADDR_VAR 0 9
8839: PUSH
8840: LD_INT 1
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: ST_TO_ADDR
// end ; end ;
8850: GO 8853
8852: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8853: LD_ADDR_OWVAR 37
8857: PUSH
8858: LD_VAR 0 6
8862: PUSH
8863: LD_INT 1
8865: PPUSH
8866: LD_VAR 0 6
8870: PPUSH
8871: CALL_OW 12
8875: ARRAY
8876: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8877: LD_ADDR_OWVAR 39
8881: PUSH
8882: LD_VAR 0 9
8886: PUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_VAR 0 9
8894: PPUSH
8895: CALL_OW 12
8899: ARRAY
8900: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8901: LD_ADDR_OWVAR 38
8905: PUSH
8906: LD_VAR 0 8
8910: PUSH
8911: LD_INT 1
8913: PPUSH
8914: LD_VAR 0 8
8918: PPUSH
8919: CALL_OW 12
8923: ARRAY
8924: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8925: LD_ADDR_OWVAR 40
8929: PUSH
8930: LD_VAR 0 7
8934: PUSH
8935: LD_INT 1
8937: PPUSH
8938: LD_VAR 0 7
8942: PPUSH
8943: CALL_OW 12
8947: ARRAY
8948: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8949: LD_ADDR_OWVAR 41
8953: PUSH
8954: LD_INT 100
8956: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8957: LD_ADDR_VAR 0 3
8961: PUSH
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_VAR 0 3
8971: PUSH
8972: LD_INT 1
8974: PLUS
8975: PPUSH
8976: CALL_OW 45
8980: PPUSH
8981: CALL_OW 2
8985: ST_TO_ADDR
// end ;
8986: GO 8591
8988: POP
8989: POP
// end ; end_of_file
8990: LD_VAR 0 3
8994: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8995: LD_INT 22
8997: PUSH
8998: LD_INT 7
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PPUSH
9005: CALL_OW 69
9009: IFFALSE 9515
9011: GO 9013
9013: DISABLE
9014: LD_INT 0
9016: PPUSH
9017: PPUSH
9018: PPUSH
// begin enable ;
9019: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
9020: LD_ADDR_VAR 0 3
9024: PUSH
9025: LD_INT 22
9027: PUSH
9028: LD_INT 7
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PPUSH
9035: CALL_OW 69
9039: ST_TO_ADDR
// for i in tmp do
9040: LD_ADDR_VAR 0 1
9044: PUSH
9045: LD_VAR 0 3
9049: PUSH
9050: FOR_IN
9051: IFFALSE 9513
// begin case GetType ( i ) of unit_human :
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 247
9062: PUSH
9063: LD_INT 1
9065: DOUBLE
9066: EQUAL
9067: IFTRUE 9071
9069: GO 9270
9071: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
9072: LD_VAR 0 1
9076: PPUSH
9077: CALL_OW 256
9081: PUSH
9082: LD_INT 250
9084: LESS
9085: PUSH
9086: LD_INT 5
9088: PPUSH
9089: LD_INT 7
9091: PPUSH
9092: CALL_OW 321
9096: PUSH
9097: LD_INT 2
9099: NONEQUAL
9100: AND
9101: IFFALSE 9105
// continue ;
9103: GO 9050
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 257
9114: PUSH
9115: LD_INT 12
9117: PUSH
9118: LD_INT 15
9120: PUSH
9121: LD_INT 16
9123: PUSH
9124: LD_INT 17
9126: PUSH
9127: LD_INT 1
9129: PUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: LD_INT 8
9141: PUSH
9142: LD_INT 9
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: IN
9157: IFFALSE 9195
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9159: LD_VAR 0 1
9163: PPUSH
9164: LD_INT 22
9166: PUSH
9167: LD_OWVAR 2
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PPUSH
9176: CALL_OW 69
9180: PPUSH
9181: LD_VAR 0 1
9185: PPUSH
9186: CALL_OW 74
9190: PPUSH
9191: CALL_OW 115
// if GetClass ( i ) = 3 then
9195: LD_VAR 0 1
9199: PPUSH
9200: CALL_OW 257
9204: PUSH
9205: LD_INT 3
9207: EQUAL
9208: IFFALSE 9268
// if IsInUnit ( i ) then
9210: LD_VAR 0 1
9214: PPUSH
9215: CALL_OW 310
9219: IFFALSE 9259
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
9221: LD_VAR 0 1
9225: PPUSH
9226: LD_INT 22
9228: PUSH
9229: LD_OWVAR 2
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 69
9242: PPUSH
9243: LD_VAR 0 1
9247: PPUSH
9248: CALL_OW 74
9252: PPUSH
9253: CALL_OW 115
9257: GO 9268
// ComEspace ( i ) ;
9259: LD_VAR 0 1
9263: PPUSH
9264: CALL 2259 0 1
// end ; unit_vehicle :
9268: GO 9511
9270: LD_INT 2
9272: DOUBLE
9273: EQUAL
9274: IFTRUE 9278
9276: GO 9510
9278: POP
// begin if GetLives ( i ) > 250 then
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 256
9288: PUSH
9289: LD_INT 250
9291: GREATER
9292: IFFALSE 9508
// begin if GetWeapon ( i ) = us_artillery then
9294: LD_VAR 0 1
9298: PPUSH
9299: CALL_OW 264
9303: PUSH
9304: LD_EXP 17
9308: EQUAL
9309: IFFALSE 9377
// begin if IsInArea ( i , zoneOut ) then
9311: LD_VAR 0 1
9315: PPUSH
9316: LD_INT 4
9318: PPUSH
9319: CALL_OW 308
9323: IFFALSE 9339
// ComMoveToArea ( i , zoneBorder ) else
9325: LD_VAR 0 1
9329: PPUSH
9330: LD_INT 9
9332: PPUSH
9333: CALL_OW 113
9337: GO 9375
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_INT 22
9346: PUSH
9347: LD_OWVAR 2
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: CALL_OW 69
9360: PPUSH
9361: LD_VAR 0 1
9365: PPUSH
9366: CALL_OW 74
9370: PPUSH
9371: CALL_OW 115
// end else
9375: GO 9508
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9377: LD_VAR 0 1
9381: PPUSH
9382: CALL_OW 264
9386: PUSH
9387: LD_INT 11
9389: PUSH
9390: LD_INT 30
9392: PUSH
9393: LD_EXP 14
9397: PUSH
9398: LD_INT 49
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: IN
9407: IFFALSE 9437
// begin if IsInArea ( i , zoneOut ) then
9409: LD_VAR 0 1
9413: PPUSH
9414: LD_INT 4
9416: PPUSH
9417: CALL_OW 308
9421: IFFALSE 9435
// ComSpecMove ( i , specPos ) ;
9423: LD_VAR 0 1
9427: PPUSH
9428: LD_INT 8
9430: PPUSH
9431: CALL 2305 0 2
// end else
9435: GO 9508
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9437: LD_VAR 0 1
9441: PPUSH
9442: CALL_OW 264
9446: PUSH
9447: LD_EXP 18
9451: PUSH
9452: LD_INT 29
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: IN
9459: IFFALSE 9472
// ComSpecAttack ( i ) else
9461: LD_VAR 0 1
9465: PPUSH
9466: CALL 2733 0 1
9470: GO 9508
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9472: LD_VAR 0 1
9476: PPUSH
9477: LD_INT 22
9479: PUSH
9480: LD_OWVAR 2
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PPUSH
9489: CALL_OW 69
9493: PPUSH
9494: LD_VAR 0 1
9498: PPUSH
9499: CALL_OW 74
9503: PPUSH
9504: CALL_OW 115
// end ; end ; end ;
9508: GO 9511
9510: POP
// end ;
9511: GO 9050
9513: POP
9514: POP
// end ; end_of_file
9515: PPOPN 3
9517: END
// export function InitDisplay ; begin
9518: LD_INT 0
9520: PPUSH
// while true do
9521: LD_INT 1
9523: IFFALSE 9610
// begin if waveNumber < 100 then
9525: LD_EXP 5
9529: PUSH
9530: LD_INT 100
9532: LESS
9533: IFFALSE 9584
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9535: LD_ADDR_OWVAR 47
9539: PUSH
9540: LD_STRING #Tick
9542: PUSH
9543: LD_OWVAR 1
9547: PUSH
9548: LD_STRING #Points
9550: PUSH
9551: LD_EXP 2
9555: PUSH
9556: LD_STRING #Attack
9558: PUSH
9559: LD_EXP 4
9563: PUSH
9564: LD_STRING #Wave
9566: PUSH
9567: LD_EXP 5
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: ST_TO_ADDR
9582: GO 9601
// Display_Strings := [ #Win , points ] ;
9584: LD_ADDR_OWVAR 47
9588: PUSH
9589: LD_STRING #Win
9591: PUSH
9592: LD_EXP 2
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9601: LD_INT 35
9603: PPUSH
9604: CALL_OW 67
// end ;
9608: GO 9521
// end ; end_of_file
9610: LD_VAR 0 1
9614: RET
// export function InitBonus ; var i , chance ; begin
9615: LD_INT 0
9617: PPUSH
9618: PPUSH
9619: PPUSH
// chance := rand ( 1 , 99 ) ;
9620: LD_ADDR_VAR 0 3
9624: PUSH
9625: LD_INT 1
9627: PPUSH
9628: LD_INT 99
9630: PPUSH
9631: CALL_OW 12
9635: ST_TO_ADDR
// case chance of 1 .. 10 :
9636: LD_VAR 0 3
9640: PUSH
9641: LD_INT 1
9643: DOUBLE
9644: GREATEREQUAL
9645: IFFALSE 9653
9647: LD_INT 10
9649: DOUBLE
9650: LESSEQUAL
9651: IFTRUE 9655
9653: GO 9666
9655: POP
// i := 5 ; 11 .. 25 :
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_INT 5
9663: ST_TO_ADDR
9664: GO 9767
9666: LD_INT 11
9668: DOUBLE
9669: GREATEREQUAL
9670: IFFALSE 9678
9672: LD_INT 25
9674: DOUBLE
9675: LESSEQUAL
9676: IFTRUE 9680
9678: GO 9691
9680: POP
// i := 3 ; 26 .. 40 :
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: LD_INT 3
9688: ST_TO_ADDR
9689: GO 9767
9691: LD_INT 26
9693: DOUBLE
9694: GREATEREQUAL
9695: IFFALSE 9703
9697: LD_INT 40
9699: DOUBLE
9700: LESSEQUAL
9701: IFTRUE 9705
9703: GO 9716
9705: POP
// i := 2 ; 41 .. 60 :
9706: LD_ADDR_VAR 0 2
9710: PUSH
9711: LD_INT 2
9713: ST_TO_ADDR
9714: GO 9767
9716: LD_INT 41
9718: DOUBLE
9719: GREATEREQUAL
9720: IFFALSE 9728
9722: LD_INT 60
9724: DOUBLE
9725: LESSEQUAL
9726: IFTRUE 9730
9728: GO 9741
9730: POP
// i := 4 ; 61 .. 99 :
9731: LD_ADDR_VAR 0 2
9735: PUSH
9736: LD_INT 4
9738: ST_TO_ADDR
9739: GO 9767
9741: LD_INT 61
9743: DOUBLE
9744: GREATEREQUAL
9745: IFFALSE 9753
9747: LD_INT 99
9749: DOUBLE
9750: LESSEQUAL
9751: IFTRUE 9755
9753: GO 9766
9755: POP
// i := 1 ; end ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_INT 1
9763: ST_TO_ADDR
9764: GO 9767
9766: POP
// case i of 1 :
9767: LD_VAR 0 2
9771: PUSH
9772: LD_INT 1
9774: DOUBLE
9775: EQUAL
9776: IFTRUE 9780
9778: GO 9869
9780: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9781: LD_INT 22
9783: PUSH
9784: LD_OWVAR 2
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 2
9795: PUSH
9796: LD_INT 25
9798: PUSH
9799: LD_INT 12
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 25
9808: PUSH
9809: LD_INT 16
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 25
9818: PUSH
9819: LD_INT 15
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 25
9828: PUSH
9829: LD_INT 17
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: PUSH
9852: LD_INT 10
9854: GREATEREQUAL
9855: IFFALSE 9863
// BonusIV else
9857: CALL 10442 0 0
9861: GO 9867
// BonusI ;
9863: CALL 9947 0 0
// end ; 2 :
9867: GO 9942
9869: LD_INT 2
9871: DOUBLE
9872: EQUAL
9873: IFTRUE 9877
9875: GO 9884
9877: POP
// begin BonusII ;
9878: CALL 10120 0 0
// end ; 3 :
9882: GO 9942
9884: LD_INT 3
9886: DOUBLE
9887: EQUAL
9888: IFTRUE 9892
9890: GO 9899
9892: POP
// begin BonusIII ;
9893: CALL 10268 0 0
// end ; 4 :
9897: GO 9942
9899: LD_INT 4
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9907
9905: GO 9914
9907: POP
// begin BonusIV ;
9908: CALL 10442 0 0
// end ; 5 :
9912: GO 9942
9914: LD_INT 5
9916: DOUBLE
9917: EQUAL
9918: IFTRUE 9922
9920: GO 9941
9922: POP
// begin if graveyard then
9923: LD_EXP 8
9927: IFFALSE 9935
// BonusV else
9929: CALL 10860 0 0
9933: GO 9939
// BonusIII ;
9935: CALL 10268 0 0
// end ; end ;
9939: GO 9942
9941: POP
// end ;
9942: LD_VAR 0 1
9946: RET
// export function BonusI ; var i ; begin
9947: LD_INT 0
9949: PPUSH
9950: PPUSH
// case Query ( AddGift1 ) of 1 :
9951: LD_STRING AddGift1
9953: PPUSH
9954: CALL_OW 97
9958: PUSH
9959: LD_INT 1
9961: DOUBLE
9962: EQUAL
9963: IFTRUE 9967
9965: GO 10046
9967: POP
// begin for i = 1 to 3 do
9968: LD_ADDR_VAR 0 2
9972: PUSH
9973: DOUBLE
9974: LD_INT 1
9976: DEC
9977: ST_TO_ADDR
9978: LD_INT 3
9980: PUSH
9981: FOR_TO
9982: IFFALSE 10042
// begin uc_side := your_side ;
9984: LD_ADDR_OWVAR 20
9988: PUSH
9989: LD_OWVAR 2
9993: ST_TO_ADDR
// uc_nation := 0 ;
9994: LD_ADDR_OWVAR 21
9998: PUSH
9999: LD_INT 0
10001: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10002: LD_INT 0
10004: PPUSH
10005: LD_INT 12
10007: PPUSH
10008: LD_INT 1
10010: PPUSH
10011: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
10015: CALL_OW 44
10019: PPUSH
10020: LD_EXP 9
10024: PPUSH
10025: LD_EXP 10
10029: PPUSH
10030: LD_INT 15
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 50
// end ;
10040: GO 9981
10042: POP
10043: POP
// end ; 2 :
10044: GO 10115
10046: LD_INT 2
10048: DOUBLE
10049: EQUAL
10050: IFTRUE 10054
10052: GO 10096
10054: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10055: LD_EXP 11
10059: PPUSH
10060: CALL_OW 274
10064: PPUSH
10065: LD_INT 1
10067: PPUSH
10068: LD_EXP 11
10072: PPUSH
10073: CALL_OW 274
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: CALL_OW 275
10085: PUSH
10086: LD_INT 100
10088: PLUS
10089: PPUSH
10090: CALL_OW 277
// end ; 3 :
10094: GO 10115
10096: LD_INT 3
10098: DOUBLE
10099: EQUAL
10100: IFTRUE 10104
10102: GO 10114
10104: POP
// begin SetTeamExp ( 2 ) ;
10105: LD_INT 2
10107: PPUSH
10108: CALL 1266 0 1
// end ; end ;
10112: GO 10115
10114: POP
// end ;
10115: LD_VAR 0 1
10119: RET
// export function BonusII ; var i ; begin
10120: LD_INT 0
10122: PPUSH
10123: PPUSH
// case Query ( AddGift2 ) of 1 :
10124: LD_STRING AddGift2
10126: PPUSH
10127: CALL_OW 97
10131: PUSH
10132: LD_INT 1
10134: DOUBLE
10135: EQUAL
10136: IFTRUE 10140
10138: GO 10182
10140: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10141: LD_EXP 11
10145: PPUSH
10146: CALL_OW 274
10150: PPUSH
10151: LD_INT 1
10153: PPUSH
10154: LD_EXP 11
10158: PPUSH
10159: CALL_OW 274
10163: PPUSH
10164: LD_INT 1
10166: PPUSH
10167: CALL_OW 275
10171: PUSH
10172: LD_INT 500
10174: PLUS
10175: PPUSH
10176: CALL_OW 277
// end ; 2 :
10180: GO 10263
10182: LD_INT 2
10184: DOUBLE
10185: EQUAL
10186: IFTRUE 10190
10188: GO 10200
10190: POP
// begin SetTeamExp ( 3 ) ;
10191: LD_INT 3
10193: PPUSH
10194: CALL 1266 0 1
// end ; 3 :
10198: GO 10263
10200: LD_INT 3
10202: DOUBLE
10203: EQUAL
10204: IFTRUE 10208
10206: GO 10262
10208: POP
// begin uc_side = your_side ;
10209: LD_ADDR_OWVAR 20
10213: PUSH
10214: LD_OWVAR 2
10218: ST_TO_ADDR
// uc_nation = nation_russian ;
10219: LD_ADDR_OWVAR 21
10223: PUSH
10224: LD_INT 3
10226: ST_TO_ADDR
// vc_chassis = 25 ;
10227: LD_ADDR_OWVAR 37
10231: PUSH
10232: LD_INT 25
10234: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10235: CALL_OW 45
10239: PPUSH
10240: LD_EXP 9
10244: PPUSH
10245: LD_EXP 10
10249: PPUSH
10250: LD_INT 15
10252: PPUSH
10253: LD_INT 1
10255: PPUSH
10256: CALL_OW 50
// end ; end ;
10260: GO 10263
10262: POP
// end ;
10263: LD_VAR 0 1
10267: RET
// export function BonusIII ; var i ; begin
10268: LD_INT 0
10270: PPUSH
10271: PPUSH
// case Query ( AddGift3 ) of 1 :
10272: LD_STRING AddGift3
10274: PPUSH
10275: CALL_OW 97
10279: PUSH
10280: LD_INT 1
10282: DOUBLE
10283: EQUAL
10284: IFTRUE 10288
10286: GO 10330
10288: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
10289: LD_EXP 11
10293: PPUSH
10294: CALL_OW 274
10298: PPUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_EXP 11
10306: PPUSH
10307: CALL_OW 274
10311: PPUSH
10312: LD_INT 1
10314: PPUSH
10315: CALL_OW 275
10319: PUSH
10320: LD_INT 1000
10322: PLUS
10323: PPUSH
10324: CALL_OW 277
// end ; 2 :
10328: GO 10437
10330: LD_INT 2
10332: DOUBLE
10333: EQUAL
10334: IFTRUE 10338
10336: GO 10350
10338: POP
// begin PrepareGuards ( waveNumber ) ;
10339: LD_EXP 5
10343: PPUSH
10344: CALL 1412 0 1
// end ; 3 :
10348: GO 10437
10350: LD_INT 3
10352: DOUBLE
10353: EQUAL
10354: IFTRUE 10358
10356: GO 10436
10358: POP
// begin uc_side = your_side ;
10359: LD_ADDR_OWVAR 20
10363: PUSH
10364: LD_OWVAR 2
10368: ST_TO_ADDR
// uc_nation = nation_american ;
10369: LD_ADDR_OWVAR 21
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
// vc_chassis = us_morphling ;
10377: LD_ADDR_OWVAR 37
10381: PUSH
10382: LD_INT 5
10384: ST_TO_ADDR
// vc_engine := engine_siberite ;
10385: LD_ADDR_OWVAR 39
10389: PUSH
10390: LD_INT 3
10392: ST_TO_ADDR
// vc_control := control_computer ;
10393: LD_ADDR_OWVAR 38
10397: PUSH
10398: LD_INT 3
10400: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10401: LD_ADDR_OWVAR 40
10405: PUSH
10406: LD_INT 8
10408: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10409: CALL_OW 45
10413: PPUSH
10414: LD_EXP 9
10418: PPUSH
10419: LD_EXP 10
10423: PPUSH
10424: LD_INT 15
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 50
// end ; end ;
10434: GO 10437
10436: POP
// end ;
10437: LD_VAR 0 1
10441: RET
// export function BonusIV ; var i ; begin
10442: LD_INT 0
10444: PPUSH
10445: PPUSH
// case Query ( AddGift4 ) of 1 :
10446: LD_STRING AddGift4
10448: PPUSH
10449: CALL_OW 97
10453: PUSH
10454: LD_INT 1
10456: DOUBLE
10457: EQUAL
10458: IFTRUE 10462
10460: GO 10786
10462: POP
// begin i := rand ( 1 , 3 ) ;
10463: LD_ADDR_VAR 0 2
10467: PUSH
10468: LD_INT 1
10470: PPUSH
10471: LD_INT 3
10473: PPUSH
10474: CALL_OW 12
10478: ST_TO_ADDR
// uc_side := your_side ;
10479: LD_ADDR_OWVAR 20
10483: PUSH
10484: LD_OWVAR 2
10488: ST_TO_ADDR
// case i of 1 :
10489: LD_VAR 0 2
10493: PUSH
10494: LD_INT 1
10496: DOUBLE
10497: EQUAL
10498: IFTRUE 10502
10500: GO 10589
10502: POP
// begin uc_nation := nation_arabian ;
10503: LD_ADDR_OWVAR 21
10507: PUSH
10508: LD_INT 2
10510: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10511: LD_ADDR_OWVAR 37
10515: PUSH
10516: LD_INT 14
10518: ST_TO_ADDR
// vc_engine := engine_combustion ;
10519: LD_ADDR_OWVAR 39
10523: PUSH
10524: LD_INT 1
10526: ST_TO_ADDR
// vc_control := control_manual ;
10527: LD_ADDR_OWVAR 38
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10535: LD_ADDR_OWVAR 40
10539: PUSH
10540: LD_INT 27
10542: PUSH
10543: LD_INT 28
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: LD_INT 1
10552: PPUSH
10553: LD_INT 2
10555: PPUSH
10556: CALL_OW 12
10560: ARRAY
10561: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10562: CALL_OW 45
10566: PPUSH
10567: LD_EXP 9
10571: PPUSH
10572: LD_EXP 10
10576: PPUSH
10577: LD_INT 15
10579: PPUSH
10580: LD_INT 1
10582: PPUSH
10583: CALL_OW 50
// end ; 2 :
10587: GO 10784
10589: LD_INT 2
10591: DOUBLE
10592: EQUAL
10593: IFTRUE 10597
10595: GO 10688
10597: POP
// begin uc_nation := nation_american ;
10598: LD_ADDR_OWVAR 21
10602: PUSH
10603: LD_INT 1
10605: ST_TO_ADDR
// vc_chassis := us_morphling ;
10606: LD_ADDR_OWVAR 37
10610: PUSH
10611: LD_INT 5
10613: ST_TO_ADDR
// vc_engine := engine_siberite ;
10614: LD_ADDR_OWVAR 39
10618: PUSH
10619: LD_INT 3
10621: ST_TO_ADDR
// vc_control := control_computer ;
10622: LD_ADDR_OWVAR 38
10626: PUSH
10627: LD_INT 3
10629: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10630: LD_ADDR_OWVAR 40
10634: PUSH
10635: LD_INT 12
10637: PUSH
10638: LD_INT 10
10640: PUSH
10641: LD_INT 7
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 1
10651: PPUSH
10652: LD_INT 3
10654: PPUSH
10655: CALL_OW 12
10659: ARRAY
10660: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10661: CALL_OW 45
10665: PPUSH
10666: LD_EXP 9
10670: PPUSH
10671: LD_EXP 10
10675: PPUSH
10676: LD_INT 15
10678: PPUSH
10679: LD_INT 1
10681: PPUSH
10682: CALL_OW 50
// end ; 3 :
10686: GO 10784
10688: LD_INT 3
10690: DOUBLE
10691: EQUAL
10692: IFTRUE 10696
10694: GO 10783
10696: POP
// begin uc_nation := nation_russian ;
10697: LD_ADDR_OWVAR 21
10701: PUSH
10702: LD_INT 3
10704: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10705: LD_ADDR_OWVAR 37
10709: PUSH
10710: LD_INT 22
10712: ST_TO_ADDR
// vc_engine := engine_combustion ;
10713: LD_ADDR_OWVAR 39
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// vc_control := control_manual ;
10721: LD_ADDR_OWVAR 38
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10729: LD_ADDR_OWVAR 40
10733: PUSH
10734: LD_INT 45
10736: PUSH
10737: LD_INT 44
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 1
10746: PPUSH
10747: LD_INT 2
10749: PPUSH
10750: CALL_OW 12
10754: ARRAY
10755: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10756: CALL_OW 45
10760: PPUSH
10761: LD_EXP 9
10765: PPUSH
10766: LD_EXP 10
10770: PPUSH
10771: LD_INT 15
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 50
// end ; end ;
10781: GO 10784
10783: POP
// end ; 2 :
10784: GO 10855
10786: LD_INT 2
10788: DOUBLE
10789: EQUAL
10790: IFTRUE 10794
10792: GO 10836
10794: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10795: LD_EXP 11
10799: PPUSH
10800: CALL_OW 274
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: LD_EXP 11
10812: PPUSH
10813: CALL_OW 274
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 275
10825: PUSH
10826: LD_INT 100
10828: PLUS
10829: PPUSH
10830: CALL_OW 277
// end ; 3 :
10834: GO 10855
10836: LD_INT 3
10838: DOUBLE
10839: EQUAL
10840: IFTRUE 10844
10842: GO 10854
10844: POP
// begin SetTeamExp ( 2 ) ;
10845: LD_INT 2
10847: PPUSH
10848: CALL 1266 0 1
// end ; end ;
10852: GO 10855
10854: POP
// end ;
10855: LD_VAR 0 1
10859: RET
// export function BonusV ; var i , j ; begin
10860: LD_INT 0
10862: PPUSH
10863: PPUSH
10864: PPUSH
// case Query ( AddGift5 ) of 1 :
10865: LD_STRING AddGift5
10867: PPUSH
10868: CALL_OW 97
10872: PUSH
10873: LD_INT 1
10875: DOUBLE
10876: EQUAL
10877: IFTRUE 10881
10879: GO 11225
10881: POP
// begin for j = 1 to 3 do
10882: LD_ADDR_VAR 0 3
10886: PUSH
10887: DOUBLE
10888: LD_INT 1
10890: DEC
10891: ST_TO_ADDR
10892: LD_INT 3
10894: PUSH
10895: FOR_TO
10896: IFFALSE 11221
// begin i := rand ( 1 , 3 ) ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_INT 1
10905: PPUSH
10906: LD_INT 3
10908: PPUSH
10909: CALL_OW 12
10913: ST_TO_ADDR
// uc_side := your_side ;
10914: LD_ADDR_OWVAR 20
10918: PUSH
10919: LD_OWVAR 2
10923: ST_TO_ADDR
// case i of 1 :
10924: LD_VAR 0 2
10928: PUSH
10929: LD_INT 1
10931: DOUBLE
10932: EQUAL
10933: IFTRUE 10937
10935: GO 11024
10937: POP
// begin uc_nation := nation_arabian ;
10938: LD_ADDR_OWVAR 21
10942: PUSH
10943: LD_INT 2
10945: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10946: LD_ADDR_OWVAR 37
10950: PUSH
10951: LD_INT 14
10953: ST_TO_ADDR
// vc_engine := engine_combustion ;
10954: LD_ADDR_OWVAR 39
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
// vc_control := control_manual ;
10962: LD_ADDR_OWVAR 38
10966: PUSH
10967: LD_INT 1
10969: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10970: LD_ADDR_OWVAR 40
10974: PUSH
10975: LD_INT 27
10977: PUSH
10978: LD_INT 28
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 1
10987: PPUSH
10988: LD_INT 2
10990: PPUSH
10991: CALL_OW 12
10995: ARRAY
10996: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10997: CALL_OW 45
11001: PPUSH
11002: LD_EXP 9
11006: PPUSH
11007: LD_EXP 10
11011: PPUSH
11012: LD_INT 15
11014: PPUSH
11015: LD_INT 1
11017: PPUSH
11018: CALL_OW 50
// end ; 2 :
11022: GO 11219
11024: LD_INT 2
11026: DOUBLE
11027: EQUAL
11028: IFTRUE 11032
11030: GO 11123
11032: POP
// begin uc_nation := nation_american ;
11033: LD_ADDR_OWVAR 21
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// vc_chassis := us_morphling ;
11041: LD_ADDR_OWVAR 37
11045: PUSH
11046: LD_INT 5
11048: ST_TO_ADDR
// vc_engine := engine_siberite ;
11049: LD_ADDR_OWVAR 39
11053: PUSH
11054: LD_INT 3
11056: ST_TO_ADDR
// vc_control := control_computer ;
11057: LD_ADDR_OWVAR 38
11061: PUSH
11062: LD_INT 3
11064: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
11065: LD_ADDR_OWVAR 40
11069: PUSH
11070: LD_INT 12
11072: PUSH
11073: LD_INT 11
11075: PUSH
11076: LD_INT 7
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 1
11086: PPUSH
11087: LD_INT 3
11089: PPUSH
11090: CALL_OW 12
11094: ARRAY
11095: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11096: CALL_OW 45
11100: PPUSH
11101: LD_EXP 9
11105: PPUSH
11106: LD_EXP 10
11110: PPUSH
11111: LD_INT 15
11113: PPUSH
11114: LD_INT 1
11116: PPUSH
11117: CALL_OW 50
// end ; 3 :
11121: GO 11219
11123: LD_INT 3
11125: DOUBLE
11126: EQUAL
11127: IFTRUE 11131
11129: GO 11218
11131: POP
// begin uc_nation := nation_russian ;
11132: LD_ADDR_OWVAR 21
11136: PUSH
11137: LD_INT 3
11139: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
11140: LD_ADDR_OWVAR 37
11144: PUSH
11145: LD_INT 22
11147: ST_TO_ADDR
// vc_engine := engine_combustion ;
11148: LD_ADDR_OWVAR 39
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
// vc_control := control_manual ;
11156: LD_ADDR_OWVAR 38
11160: PUSH
11161: LD_INT 1
11163: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
11164: LD_ADDR_OWVAR 40
11168: PUSH
11169: LD_INT 45
11171: PUSH
11172: LD_INT 44
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 1
11181: PPUSH
11182: LD_INT 2
11184: PPUSH
11185: CALL_OW 12
11189: ARRAY
11190: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11191: CALL_OW 45
11195: PPUSH
11196: LD_EXP 9
11200: PPUSH
11201: LD_EXP 10
11205: PPUSH
11206: LD_INT 15
11208: PPUSH
11209: LD_INT 1
11211: PPUSH
11212: CALL_OW 50
// end ; end ;
11216: GO 11219
11218: POP
// end ;
11219: GO 10895
11221: POP
11222: POP
// end ; 2 :
11223: GO 11291
11225: LD_INT 2
11227: DOUBLE
11228: EQUAL
11229: IFTRUE 11233
11231: GO 11275
11233: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
11234: LD_EXP 11
11238: PPUSH
11239: CALL_OW 274
11243: PPUSH
11244: LD_INT 1
11246: PPUSH
11247: LD_EXP 11
11251: PPUSH
11252: CALL_OW 274
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 275
11264: PUSH
11265: LD_INT 500
11267: PLUS
11268: PPUSH
11269: CALL_OW 277
// end ; 3 :
11273: GO 11291
11275: LD_INT 3
11277: DOUBLE
11278: EQUAL
11279: IFTRUE 11283
11281: GO 11290
11283: POP
// begin GetBack ( ) ;
11284: CALL 2072 0 0
// end ; end ;
11288: GO 11291
11290: POP
// end ; end_of_file
11291: LD_VAR 0 1
11295: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
11296: GO 11298
11298: DISABLE
// begin ru_radar := 98 ;
11299: LD_ADDR_EXP 14
11303: PUSH
11304: LD_INT 98
11306: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11307: LD_ADDR_EXP 15
11311: PUSH
11312: LD_INT 89
11314: ST_TO_ADDR
// us_hack := 99 ;
11315: LD_ADDR_EXP 16
11319: PUSH
11320: LD_INT 99
11322: ST_TO_ADDR
// us_artillery := 97 ;
11323: LD_ADDR_EXP 17
11327: PUSH
11328: LD_INT 97
11330: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11331: LD_ADDR_EXP 18
11335: PUSH
11336: LD_INT 91
11338: ST_TO_ADDR
// tech_Artillery := 80 ;
11339: LD_ADDR_EXP 19
11343: PUSH
11344: LD_INT 80
11346: ST_TO_ADDR
// tech_RadMat := 81 ;
11347: LD_ADDR_EXP 20
11351: PUSH
11352: LD_INT 81
11354: ST_TO_ADDR
// tech_BasicTools := 82 ;
11355: LD_ADDR_EXP 21
11359: PUSH
11360: LD_INT 82
11362: ST_TO_ADDR
// tech_Cargo := 83 ;
11363: LD_ADDR_EXP 22
11367: PUSH
11368: LD_INT 83
11370: ST_TO_ADDR
// tech_Track := 84 ;
11371: LD_ADDR_EXP 23
11375: PUSH
11376: LD_INT 84
11378: ST_TO_ADDR
// tech_Crane := 85 ;
11379: LD_ADDR_EXP 24
11383: PUSH
11384: LD_INT 85
11386: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11387: LD_ADDR_EXP 25
11391: PUSH
11392: LD_INT 86
11394: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11395: LD_ADDR_EXP 26
11399: PUSH
11400: LD_INT 87
11402: ST_TO_ADDR
// end ; end_of_file end_of_file
11403: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11404: GO 11406
11406: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11407: LD_STRING initStreamRollete();
11409: PPUSH
11410: CALL_OW 559
// InitStreamMode ;
11414: CALL 11423 0 0
// DefineStreamItems ( ) ;
11418: CALL 11863 0 0
// end ;
11422: END
// function InitStreamMode ; begin
11423: LD_INT 0
11425: PPUSH
// streamModeActive := false ;
11426: LD_ADDR_EXP 27
11430: PUSH
11431: LD_INT 0
11433: ST_TO_ADDR
// normalCounter := 36 ;
11434: LD_ADDR_EXP 28
11438: PUSH
11439: LD_INT 36
11441: ST_TO_ADDR
// hardcoreCounter := 16 ;
11442: LD_ADDR_EXP 29
11446: PUSH
11447: LD_INT 16
11449: ST_TO_ADDR
// sRocket := false ;
11450: LD_ADDR_EXP 32
11454: PUSH
11455: LD_INT 0
11457: ST_TO_ADDR
// sSpeed := false ;
11458: LD_ADDR_EXP 31
11462: PUSH
11463: LD_INT 0
11465: ST_TO_ADDR
// sEngine := false ;
11466: LD_ADDR_EXP 33
11470: PUSH
11471: LD_INT 0
11473: ST_TO_ADDR
// sSpec := false ;
11474: LD_ADDR_EXP 30
11478: PUSH
11479: LD_INT 0
11481: ST_TO_ADDR
// sLevel := false ;
11482: LD_ADDR_EXP 34
11486: PUSH
11487: LD_INT 0
11489: ST_TO_ADDR
// sArmoury := false ;
11490: LD_ADDR_EXP 35
11494: PUSH
11495: LD_INT 0
11497: ST_TO_ADDR
// sRadar := false ;
11498: LD_ADDR_EXP 36
11502: PUSH
11503: LD_INT 0
11505: ST_TO_ADDR
// sBunker := false ;
11506: LD_ADDR_EXP 37
11510: PUSH
11511: LD_INT 0
11513: ST_TO_ADDR
// sHack := false ;
11514: LD_ADDR_EXP 38
11518: PUSH
11519: LD_INT 0
11521: ST_TO_ADDR
// sFire := false ;
11522: LD_ADDR_EXP 39
11526: PUSH
11527: LD_INT 0
11529: ST_TO_ADDR
// sRefresh := false ;
11530: LD_ADDR_EXP 40
11534: PUSH
11535: LD_INT 0
11537: ST_TO_ADDR
// sExp := false ;
11538: LD_ADDR_EXP 41
11542: PUSH
11543: LD_INT 0
11545: ST_TO_ADDR
// sDepot := false ;
11546: LD_ADDR_EXP 42
11550: PUSH
11551: LD_INT 0
11553: ST_TO_ADDR
// sFlag := false ;
11554: LD_ADDR_EXP 43
11558: PUSH
11559: LD_INT 0
11561: ST_TO_ADDR
// sKamikadze := false ;
11562: LD_ADDR_EXP 51
11566: PUSH
11567: LD_INT 0
11569: ST_TO_ADDR
// sTroll := false ;
11570: LD_ADDR_EXP 52
11574: PUSH
11575: LD_INT 0
11577: ST_TO_ADDR
// sSlow := false ;
11578: LD_ADDR_EXP 53
11582: PUSH
11583: LD_INT 0
11585: ST_TO_ADDR
// sLack := false ;
11586: LD_ADDR_EXP 54
11590: PUSH
11591: LD_INT 0
11593: ST_TO_ADDR
// sTank := false ;
11594: LD_ADDR_EXP 56
11598: PUSH
11599: LD_INT 0
11601: ST_TO_ADDR
// sRemote := false ;
11602: LD_ADDR_EXP 57
11606: PUSH
11607: LD_INT 0
11609: ST_TO_ADDR
// sPowell := false ;
11610: LD_ADDR_EXP 58
11614: PUSH
11615: LD_INT 0
11617: ST_TO_ADDR
// sTeleport := false ;
11618: LD_ADDR_EXP 61
11622: PUSH
11623: LD_INT 0
11625: ST_TO_ADDR
// sOilTower := false ;
11626: LD_ADDR_EXP 63
11630: PUSH
11631: LD_INT 0
11633: ST_TO_ADDR
// sShovel := false ;
11634: LD_ADDR_EXP 64
11638: PUSH
11639: LD_INT 0
11641: ST_TO_ADDR
// sSheik := false ;
11642: LD_ADDR_EXP 65
11646: PUSH
11647: LD_INT 0
11649: ST_TO_ADDR
// sEarthquake := false ;
11650: LD_ADDR_EXP 67
11654: PUSH
11655: LD_INT 0
11657: ST_TO_ADDR
// sAI := false ;
11658: LD_ADDR_EXP 68
11662: PUSH
11663: LD_INT 0
11665: ST_TO_ADDR
// sCargo := false ;
11666: LD_ADDR_EXP 71
11670: PUSH
11671: LD_INT 0
11673: ST_TO_ADDR
// sDLaser := false ;
11674: LD_ADDR_EXP 72
11678: PUSH
11679: LD_INT 0
11681: ST_TO_ADDR
// sExchange := false ;
11682: LD_ADDR_EXP 73
11686: PUSH
11687: LD_INT 0
11689: ST_TO_ADDR
// sFac := false ;
11690: LD_ADDR_EXP 74
11694: PUSH
11695: LD_INT 0
11697: ST_TO_ADDR
// sPower := false ;
11698: LD_ADDR_EXP 75
11702: PUSH
11703: LD_INT 0
11705: ST_TO_ADDR
// sRandom := false ;
11706: LD_ADDR_EXP 76
11710: PUSH
11711: LD_INT 0
11713: ST_TO_ADDR
// sShield := false ;
11714: LD_ADDR_EXP 77
11718: PUSH
11719: LD_INT 0
11721: ST_TO_ADDR
// sTime := false ;
11722: LD_ADDR_EXP 78
11726: PUSH
11727: LD_INT 0
11729: ST_TO_ADDR
// sTools := false ;
11730: LD_ADDR_EXP 79
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// sSold := false ;
11738: LD_ADDR_EXP 44
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// sDiff := false ;
11746: LD_ADDR_EXP 45
11750: PUSH
11751: LD_INT 0
11753: ST_TO_ADDR
// sFog := false ;
11754: LD_ADDR_EXP 48
11758: PUSH
11759: LD_INT 0
11761: ST_TO_ADDR
// sReset := false ;
11762: LD_ADDR_EXP 49
11766: PUSH
11767: LD_INT 0
11769: ST_TO_ADDR
// sSun := false ;
11770: LD_ADDR_EXP 50
11774: PUSH
11775: LD_INT 0
11777: ST_TO_ADDR
// sTiger := false ;
11778: LD_ADDR_EXP 46
11782: PUSH
11783: LD_INT 0
11785: ST_TO_ADDR
// sBomb := false ;
11786: LD_ADDR_EXP 47
11790: PUSH
11791: LD_INT 0
11793: ST_TO_ADDR
// sWound := false ;
11794: LD_ADDR_EXP 55
11798: PUSH
11799: LD_INT 0
11801: ST_TO_ADDR
// sBetray := false ;
11802: LD_ADDR_EXP 59
11806: PUSH
11807: LD_INT 0
11809: ST_TO_ADDR
// sContamin := false ;
11810: LD_ADDR_EXP 60
11814: PUSH
11815: LD_INT 0
11817: ST_TO_ADDR
// sOil := false ;
11818: LD_ADDR_EXP 62
11822: PUSH
11823: LD_INT 0
11825: ST_TO_ADDR
// sStu := false ;
11826: LD_ADDR_EXP 66
11830: PUSH
11831: LD_INT 0
11833: ST_TO_ADDR
// sBazooka := false ;
11834: LD_ADDR_EXP 69
11838: PUSH
11839: LD_INT 0
11841: ST_TO_ADDR
// sMortar := false ;
11842: LD_ADDR_EXP 70
11846: PUSH
11847: LD_INT 0
11849: ST_TO_ADDR
// sRanger := false ;
11850: LD_ADDR_EXP 80
11854: PUSH
11855: LD_INT 0
11857: ST_TO_ADDR
// end ;
11858: LD_VAR 0 1
11862: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11863: LD_INT 0
11865: PPUSH
11866: PPUSH
11867: PPUSH
11868: PPUSH
11869: PPUSH
// result := [ ] ;
11870: LD_ADDR_VAR 0 1
11874: PUSH
11875: EMPTY
11876: ST_TO_ADDR
// if campaign_id = 1 then
11877: LD_OWVAR 69
11881: PUSH
11882: LD_INT 1
11884: EQUAL
11885: IFFALSE 14823
// begin case mission_number of 1 :
11887: LD_OWVAR 70
11891: PUSH
11892: LD_INT 1
11894: DOUBLE
11895: EQUAL
11896: IFTRUE 11900
11898: GO 11964
11900: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11901: LD_ADDR_VAR 0 1
11905: PUSH
11906: LD_INT 2
11908: PUSH
11909: LD_INT 4
11911: PUSH
11912: LD_INT 11
11914: PUSH
11915: LD_INT 12
11917: PUSH
11918: LD_INT 15
11920: PUSH
11921: LD_INT 16
11923: PUSH
11924: LD_INT 22
11926: PUSH
11927: LD_INT 23
11929: PUSH
11930: LD_INT 26
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 101
11946: PUSH
11947: LD_INT 102
11949: PUSH
11950: LD_INT 106
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: ST_TO_ADDR
11962: GO 14821
11964: LD_INT 2
11966: DOUBLE
11967: EQUAL
11968: IFTRUE 11972
11970: GO 12044
11972: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11973: LD_ADDR_VAR 0 1
11977: PUSH
11978: LD_INT 2
11980: PUSH
11981: LD_INT 4
11983: PUSH
11984: LD_INT 11
11986: PUSH
11987: LD_INT 12
11989: PUSH
11990: LD_INT 15
11992: PUSH
11993: LD_INT 16
11995: PUSH
11996: LD_INT 22
11998: PUSH
11999: LD_INT 23
12001: PUSH
12002: LD_INT 26
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 101
12018: PUSH
12019: LD_INT 102
12021: PUSH
12022: LD_INT 105
12024: PUSH
12025: LD_INT 106
12027: PUSH
12028: LD_INT 108
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: ST_TO_ADDR
12042: GO 14821
12044: LD_INT 3
12046: DOUBLE
12047: EQUAL
12048: IFTRUE 12052
12050: GO 12128
12052: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12053: LD_ADDR_VAR 0 1
12057: PUSH
12058: LD_INT 2
12060: PUSH
12061: LD_INT 4
12063: PUSH
12064: LD_INT 5
12066: PUSH
12067: LD_INT 11
12069: PUSH
12070: LD_INT 12
12072: PUSH
12073: LD_INT 15
12075: PUSH
12076: LD_INT 16
12078: PUSH
12079: LD_INT 22
12081: PUSH
12082: LD_INT 26
12084: PUSH
12085: LD_INT 36
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 101
12102: PUSH
12103: LD_INT 102
12105: PUSH
12106: LD_INT 105
12108: PUSH
12109: LD_INT 106
12111: PUSH
12112: LD_INT 108
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: ST_TO_ADDR
12126: GO 14821
12128: LD_INT 4
12130: DOUBLE
12131: EQUAL
12132: IFTRUE 12136
12134: GO 12220
12136: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12137: LD_ADDR_VAR 0 1
12141: PUSH
12142: LD_INT 2
12144: PUSH
12145: LD_INT 4
12147: PUSH
12148: LD_INT 5
12150: PUSH
12151: LD_INT 8
12153: PUSH
12154: LD_INT 11
12156: PUSH
12157: LD_INT 12
12159: PUSH
12160: LD_INT 15
12162: PUSH
12163: LD_INT 16
12165: PUSH
12166: LD_INT 22
12168: PUSH
12169: LD_INT 23
12171: PUSH
12172: LD_INT 26
12174: PUSH
12175: LD_INT 36
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 101
12194: PUSH
12195: LD_INT 102
12197: PUSH
12198: LD_INT 105
12200: PUSH
12201: LD_INT 106
12203: PUSH
12204: LD_INT 108
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: ST_TO_ADDR
12218: GO 14821
12220: LD_INT 5
12222: DOUBLE
12223: EQUAL
12224: IFTRUE 12228
12226: GO 12328
12228: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12229: LD_ADDR_VAR 0 1
12233: PUSH
12234: LD_INT 2
12236: PUSH
12237: LD_INT 4
12239: PUSH
12240: LD_INT 5
12242: PUSH
12243: LD_INT 6
12245: PUSH
12246: LD_INT 8
12248: PUSH
12249: LD_INT 11
12251: PUSH
12252: LD_INT 12
12254: PUSH
12255: LD_INT 15
12257: PUSH
12258: LD_INT 16
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: LD_INT 23
12266: PUSH
12267: LD_INT 25
12269: PUSH
12270: LD_INT 26
12272: PUSH
12273: LD_INT 36
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 101
12294: PUSH
12295: LD_INT 102
12297: PUSH
12298: LD_INT 105
12300: PUSH
12301: LD_INT 106
12303: PUSH
12304: LD_INT 108
12306: PUSH
12307: LD_INT 109
12309: PUSH
12310: LD_INT 112
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: ST_TO_ADDR
12326: GO 14821
12328: LD_INT 6
12330: DOUBLE
12331: EQUAL
12332: IFTRUE 12336
12334: GO 12456
12336: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12337: LD_ADDR_VAR 0 1
12341: PUSH
12342: LD_INT 2
12344: PUSH
12345: LD_INT 4
12347: PUSH
12348: LD_INT 5
12350: PUSH
12351: LD_INT 6
12353: PUSH
12354: LD_INT 8
12356: PUSH
12357: LD_INT 11
12359: PUSH
12360: LD_INT 12
12362: PUSH
12363: LD_INT 15
12365: PUSH
12366: LD_INT 16
12368: PUSH
12369: LD_INT 20
12371: PUSH
12372: LD_INT 21
12374: PUSH
12375: LD_INT 22
12377: PUSH
12378: LD_INT 23
12380: PUSH
12381: LD_INT 25
12383: PUSH
12384: LD_INT 26
12386: PUSH
12387: LD_INT 30
12389: PUSH
12390: LD_INT 31
12392: PUSH
12393: LD_INT 32
12395: PUSH
12396: LD_INT 36
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 101
12422: PUSH
12423: LD_INT 102
12425: PUSH
12426: LD_INT 105
12428: PUSH
12429: LD_INT 106
12431: PUSH
12432: LD_INT 108
12434: PUSH
12435: LD_INT 109
12437: PUSH
12438: LD_INT 112
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: ST_TO_ADDR
12454: GO 14821
12456: LD_INT 7
12458: DOUBLE
12459: EQUAL
12460: IFTRUE 12464
12462: GO 12564
12464: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_INT 2
12472: PUSH
12473: LD_INT 4
12475: PUSH
12476: LD_INT 5
12478: PUSH
12479: LD_INT 7
12481: PUSH
12482: LD_INT 11
12484: PUSH
12485: LD_INT 12
12487: PUSH
12488: LD_INT 15
12490: PUSH
12491: LD_INT 16
12493: PUSH
12494: LD_INT 20
12496: PUSH
12497: LD_INT 21
12499: PUSH
12500: LD_INT 22
12502: PUSH
12503: LD_INT 23
12505: PUSH
12506: LD_INT 25
12508: PUSH
12509: LD_INT 26
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 101
12530: PUSH
12531: LD_INT 102
12533: PUSH
12534: LD_INT 103
12536: PUSH
12537: LD_INT 105
12539: PUSH
12540: LD_INT 106
12542: PUSH
12543: LD_INT 108
12545: PUSH
12546: LD_INT 112
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: ST_TO_ADDR
12562: GO 14821
12564: LD_INT 8
12566: DOUBLE
12567: EQUAL
12568: IFTRUE 12572
12570: GO 12700
12572: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12573: LD_ADDR_VAR 0 1
12577: PUSH
12578: LD_INT 2
12580: PUSH
12581: LD_INT 4
12583: PUSH
12584: LD_INT 5
12586: PUSH
12587: LD_INT 6
12589: PUSH
12590: LD_INT 7
12592: PUSH
12593: LD_INT 8
12595: PUSH
12596: LD_INT 11
12598: PUSH
12599: LD_INT 12
12601: PUSH
12602: LD_INT 15
12604: PUSH
12605: LD_INT 16
12607: PUSH
12608: LD_INT 20
12610: PUSH
12611: LD_INT 21
12613: PUSH
12614: LD_INT 22
12616: PUSH
12617: LD_INT 23
12619: PUSH
12620: LD_INT 25
12622: PUSH
12623: LD_INT 26
12625: PUSH
12626: LD_INT 30
12628: PUSH
12629: LD_INT 31
12631: PUSH
12632: LD_INT 32
12634: PUSH
12635: LD_INT 36
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 101
12662: PUSH
12663: LD_INT 102
12665: PUSH
12666: LD_INT 103
12668: PUSH
12669: LD_INT 105
12671: PUSH
12672: LD_INT 106
12674: PUSH
12675: LD_INT 108
12677: PUSH
12678: LD_INT 109
12680: PUSH
12681: LD_INT 112
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: ST_TO_ADDR
12698: GO 14821
12700: LD_INT 9
12702: DOUBLE
12703: EQUAL
12704: IFTRUE 12708
12706: GO 12844
12708: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 2
12716: PUSH
12717: LD_INT 4
12719: PUSH
12720: LD_INT 5
12722: PUSH
12723: LD_INT 6
12725: PUSH
12726: LD_INT 7
12728: PUSH
12729: LD_INT 8
12731: PUSH
12732: LD_INT 11
12734: PUSH
12735: LD_INT 12
12737: PUSH
12738: LD_INT 15
12740: PUSH
12741: LD_INT 16
12743: PUSH
12744: LD_INT 20
12746: PUSH
12747: LD_INT 21
12749: PUSH
12750: LD_INT 22
12752: PUSH
12753: LD_INT 23
12755: PUSH
12756: LD_INT 25
12758: PUSH
12759: LD_INT 26
12761: PUSH
12762: LD_INT 28
12764: PUSH
12765: LD_INT 30
12767: PUSH
12768: LD_INT 31
12770: PUSH
12771: LD_INT 32
12773: PUSH
12774: LD_INT 36
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 101
12802: PUSH
12803: LD_INT 102
12805: PUSH
12806: LD_INT 103
12808: PUSH
12809: LD_INT 105
12811: PUSH
12812: LD_INT 106
12814: PUSH
12815: LD_INT 108
12817: PUSH
12818: LD_INT 109
12820: PUSH
12821: LD_INT 112
12823: PUSH
12824: LD_INT 114
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: ST_TO_ADDR
12842: GO 14821
12844: LD_INT 10
12846: DOUBLE
12847: EQUAL
12848: IFTRUE 12852
12850: GO 13036
12852: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12853: LD_ADDR_VAR 0 1
12857: PUSH
12858: LD_INT 2
12860: PUSH
12861: LD_INT 4
12863: PUSH
12864: LD_INT 5
12866: PUSH
12867: LD_INT 6
12869: PUSH
12870: LD_INT 7
12872: PUSH
12873: LD_INT 8
12875: PUSH
12876: LD_INT 9
12878: PUSH
12879: LD_INT 10
12881: PUSH
12882: LD_INT 11
12884: PUSH
12885: LD_INT 12
12887: PUSH
12888: LD_INT 13
12890: PUSH
12891: LD_INT 14
12893: PUSH
12894: LD_INT 15
12896: PUSH
12897: LD_INT 16
12899: PUSH
12900: LD_INT 17
12902: PUSH
12903: LD_INT 18
12905: PUSH
12906: LD_INT 19
12908: PUSH
12909: LD_INT 20
12911: PUSH
12912: LD_INT 21
12914: PUSH
12915: LD_INT 22
12917: PUSH
12918: LD_INT 23
12920: PUSH
12921: LD_INT 24
12923: PUSH
12924: LD_INT 25
12926: PUSH
12927: LD_INT 26
12929: PUSH
12930: LD_INT 28
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 31
12938: PUSH
12939: LD_INT 32
12941: PUSH
12942: LD_INT 36
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 101
12978: PUSH
12979: LD_INT 102
12981: PUSH
12982: LD_INT 103
12984: PUSH
12985: LD_INT 104
12987: PUSH
12988: LD_INT 105
12990: PUSH
12991: LD_INT 106
12993: PUSH
12994: LD_INT 107
12996: PUSH
12997: LD_INT 108
12999: PUSH
13000: LD_INT 109
13002: PUSH
13003: LD_INT 110
13005: PUSH
13006: LD_INT 111
13008: PUSH
13009: LD_INT 112
13011: PUSH
13012: LD_INT 114
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: ST_TO_ADDR
13034: GO 14821
13036: LD_INT 11
13038: DOUBLE
13039: EQUAL
13040: IFTRUE 13044
13042: GO 13236
13044: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13045: LD_ADDR_VAR 0 1
13049: PUSH
13050: LD_INT 2
13052: PUSH
13053: LD_INT 3
13055: PUSH
13056: LD_INT 4
13058: PUSH
13059: LD_INT 5
13061: PUSH
13062: LD_INT 6
13064: PUSH
13065: LD_INT 7
13067: PUSH
13068: LD_INT 8
13070: PUSH
13071: LD_INT 9
13073: PUSH
13074: LD_INT 10
13076: PUSH
13077: LD_INT 11
13079: PUSH
13080: LD_INT 12
13082: PUSH
13083: LD_INT 13
13085: PUSH
13086: LD_INT 14
13088: PUSH
13089: LD_INT 15
13091: PUSH
13092: LD_INT 16
13094: PUSH
13095: LD_INT 17
13097: PUSH
13098: LD_INT 18
13100: PUSH
13101: LD_INT 19
13103: PUSH
13104: LD_INT 20
13106: PUSH
13107: LD_INT 21
13109: PUSH
13110: LD_INT 22
13112: PUSH
13113: LD_INT 23
13115: PUSH
13116: LD_INT 24
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 26
13124: PUSH
13125: LD_INT 28
13127: PUSH
13128: LD_INT 30
13130: PUSH
13131: LD_INT 31
13133: PUSH
13134: LD_INT 32
13136: PUSH
13137: LD_INT 34
13139: PUSH
13140: LD_INT 36
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 101
13178: PUSH
13179: LD_INT 102
13181: PUSH
13182: LD_INT 103
13184: PUSH
13185: LD_INT 104
13187: PUSH
13188: LD_INT 105
13190: PUSH
13191: LD_INT 106
13193: PUSH
13194: LD_INT 107
13196: PUSH
13197: LD_INT 108
13199: PUSH
13200: LD_INT 109
13202: PUSH
13203: LD_INT 110
13205: PUSH
13206: LD_INT 111
13208: PUSH
13209: LD_INT 112
13211: PUSH
13212: LD_INT 114
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: ST_TO_ADDR
13234: GO 14821
13236: LD_INT 12
13238: DOUBLE
13239: EQUAL
13240: IFTRUE 13244
13242: GO 13452
13244: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13245: LD_ADDR_VAR 0 1
13249: PUSH
13250: LD_INT 1
13252: PUSH
13253: LD_INT 2
13255: PUSH
13256: LD_INT 3
13258: PUSH
13259: LD_INT 4
13261: PUSH
13262: LD_INT 5
13264: PUSH
13265: LD_INT 6
13267: PUSH
13268: LD_INT 7
13270: PUSH
13271: LD_INT 8
13273: PUSH
13274: LD_INT 9
13276: PUSH
13277: LD_INT 10
13279: PUSH
13280: LD_INT 11
13282: PUSH
13283: LD_INT 12
13285: PUSH
13286: LD_INT 13
13288: PUSH
13289: LD_INT 14
13291: PUSH
13292: LD_INT 15
13294: PUSH
13295: LD_INT 16
13297: PUSH
13298: LD_INT 17
13300: PUSH
13301: LD_INT 18
13303: PUSH
13304: LD_INT 19
13306: PUSH
13307: LD_INT 20
13309: PUSH
13310: LD_INT 21
13312: PUSH
13313: LD_INT 22
13315: PUSH
13316: LD_INT 23
13318: PUSH
13319: LD_INT 24
13321: PUSH
13322: LD_INT 25
13324: PUSH
13325: LD_INT 26
13327: PUSH
13328: LD_INT 27
13330: PUSH
13331: LD_INT 28
13333: PUSH
13334: LD_INT 30
13336: PUSH
13337: LD_INT 31
13339: PUSH
13340: LD_INT 32
13342: PUSH
13343: LD_INT 33
13345: PUSH
13346: LD_INT 34
13348: PUSH
13349: LD_INT 36
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 101
13390: PUSH
13391: LD_INT 102
13393: PUSH
13394: LD_INT 103
13396: PUSH
13397: LD_INT 104
13399: PUSH
13400: LD_INT 105
13402: PUSH
13403: LD_INT 106
13405: PUSH
13406: LD_INT 107
13408: PUSH
13409: LD_INT 108
13411: PUSH
13412: LD_INT 109
13414: PUSH
13415: LD_INT 110
13417: PUSH
13418: LD_INT 111
13420: PUSH
13421: LD_INT 112
13423: PUSH
13424: LD_INT 113
13426: PUSH
13427: LD_INT 114
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: ST_TO_ADDR
13450: GO 14821
13452: LD_INT 13
13454: DOUBLE
13455: EQUAL
13456: IFTRUE 13460
13458: GO 13656
13460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13461: LD_ADDR_VAR 0 1
13465: PUSH
13466: LD_INT 1
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: LD_INT 3
13474: PUSH
13475: LD_INT 4
13477: PUSH
13478: LD_INT 5
13480: PUSH
13481: LD_INT 8
13483: PUSH
13484: LD_INT 9
13486: PUSH
13487: LD_INT 10
13489: PUSH
13490: LD_INT 11
13492: PUSH
13493: LD_INT 12
13495: PUSH
13496: LD_INT 14
13498: PUSH
13499: LD_INT 15
13501: PUSH
13502: LD_INT 16
13504: PUSH
13505: LD_INT 17
13507: PUSH
13508: LD_INT 18
13510: PUSH
13511: LD_INT 19
13513: PUSH
13514: LD_INT 20
13516: PUSH
13517: LD_INT 21
13519: PUSH
13520: LD_INT 22
13522: PUSH
13523: LD_INT 23
13525: PUSH
13526: LD_INT 24
13528: PUSH
13529: LD_INT 25
13531: PUSH
13532: LD_INT 26
13534: PUSH
13535: LD_INT 27
13537: PUSH
13538: LD_INT 28
13540: PUSH
13541: LD_INT 30
13543: PUSH
13544: LD_INT 31
13546: PUSH
13547: LD_INT 32
13549: PUSH
13550: LD_INT 33
13552: PUSH
13553: LD_INT 34
13555: PUSH
13556: LD_INT 36
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 101
13594: PUSH
13595: LD_INT 102
13597: PUSH
13598: LD_INT 103
13600: PUSH
13601: LD_INT 104
13603: PUSH
13604: LD_INT 105
13606: PUSH
13607: LD_INT 106
13609: PUSH
13610: LD_INT 107
13612: PUSH
13613: LD_INT 108
13615: PUSH
13616: LD_INT 109
13618: PUSH
13619: LD_INT 110
13621: PUSH
13622: LD_INT 111
13624: PUSH
13625: LD_INT 112
13627: PUSH
13628: LD_INT 113
13630: PUSH
13631: LD_INT 114
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: ST_TO_ADDR
13654: GO 14821
13656: LD_INT 14
13658: DOUBLE
13659: EQUAL
13660: IFTRUE 13664
13662: GO 13876
13664: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13665: LD_ADDR_VAR 0 1
13669: PUSH
13670: LD_INT 1
13672: PUSH
13673: LD_INT 2
13675: PUSH
13676: LD_INT 3
13678: PUSH
13679: LD_INT 4
13681: PUSH
13682: LD_INT 5
13684: PUSH
13685: LD_INT 6
13687: PUSH
13688: LD_INT 7
13690: PUSH
13691: LD_INT 8
13693: PUSH
13694: LD_INT 9
13696: PUSH
13697: LD_INT 10
13699: PUSH
13700: LD_INT 11
13702: PUSH
13703: LD_INT 12
13705: PUSH
13706: LD_INT 13
13708: PUSH
13709: LD_INT 14
13711: PUSH
13712: LD_INT 15
13714: PUSH
13715: LD_INT 16
13717: PUSH
13718: LD_INT 17
13720: PUSH
13721: LD_INT 18
13723: PUSH
13724: LD_INT 19
13726: PUSH
13727: LD_INT 20
13729: PUSH
13730: LD_INT 21
13732: PUSH
13733: LD_INT 22
13735: PUSH
13736: LD_INT 23
13738: PUSH
13739: LD_INT 24
13741: PUSH
13742: LD_INT 25
13744: PUSH
13745: LD_INT 26
13747: PUSH
13748: LD_INT 27
13750: PUSH
13751: LD_INT 28
13753: PUSH
13754: LD_INT 29
13756: PUSH
13757: LD_INT 30
13759: PUSH
13760: LD_INT 31
13762: PUSH
13763: LD_INT 32
13765: PUSH
13766: LD_INT 33
13768: PUSH
13769: LD_INT 34
13771: PUSH
13772: LD_INT 36
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 101
13814: PUSH
13815: LD_INT 102
13817: PUSH
13818: LD_INT 103
13820: PUSH
13821: LD_INT 104
13823: PUSH
13824: LD_INT 105
13826: PUSH
13827: LD_INT 106
13829: PUSH
13830: LD_INT 107
13832: PUSH
13833: LD_INT 108
13835: PUSH
13836: LD_INT 109
13838: PUSH
13839: LD_INT 110
13841: PUSH
13842: LD_INT 111
13844: PUSH
13845: LD_INT 112
13847: PUSH
13848: LD_INT 113
13850: PUSH
13851: LD_INT 114
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: ST_TO_ADDR
13874: GO 14821
13876: LD_INT 15
13878: DOUBLE
13879: EQUAL
13880: IFTRUE 13884
13882: GO 14096
13884: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13885: LD_ADDR_VAR 0 1
13889: PUSH
13890: LD_INT 1
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: LD_INT 3
13898: PUSH
13899: LD_INT 4
13901: PUSH
13902: LD_INT 5
13904: PUSH
13905: LD_INT 6
13907: PUSH
13908: LD_INT 7
13910: PUSH
13911: LD_INT 8
13913: PUSH
13914: LD_INT 9
13916: PUSH
13917: LD_INT 10
13919: PUSH
13920: LD_INT 11
13922: PUSH
13923: LD_INT 12
13925: PUSH
13926: LD_INT 13
13928: PUSH
13929: LD_INT 14
13931: PUSH
13932: LD_INT 15
13934: PUSH
13935: LD_INT 16
13937: PUSH
13938: LD_INT 17
13940: PUSH
13941: LD_INT 18
13943: PUSH
13944: LD_INT 19
13946: PUSH
13947: LD_INT 20
13949: PUSH
13950: LD_INT 21
13952: PUSH
13953: LD_INT 22
13955: PUSH
13956: LD_INT 23
13958: PUSH
13959: LD_INT 24
13961: PUSH
13962: LD_INT 25
13964: PUSH
13965: LD_INT 26
13967: PUSH
13968: LD_INT 27
13970: PUSH
13971: LD_INT 28
13973: PUSH
13974: LD_INT 29
13976: PUSH
13977: LD_INT 30
13979: PUSH
13980: LD_INT 31
13982: PUSH
13983: LD_INT 32
13985: PUSH
13986: LD_INT 33
13988: PUSH
13989: LD_INT 34
13991: PUSH
13992: LD_INT 36
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 101
14034: PUSH
14035: LD_INT 102
14037: PUSH
14038: LD_INT 103
14040: PUSH
14041: LD_INT 104
14043: PUSH
14044: LD_INT 105
14046: PUSH
14047: LD_INT 106
14049: PUSH
14050: LD_INT 107
14052: PUSH
14053: LD_INT 108
14055: PUSH
14056: LD_INT 109
14058: PUSH
14059: LD_INT 110
14061: PUSH
14062: LD_INT 111
14064: PUSH
14065: LD_INT 112
14067: PUSH
14068: LD_INT 113
14070: PUSH
14071: LD_INT 114
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: ST_TO_ADDR
14094: GO 14821
14096: LD_INT 16
14098: DOUBLE
14099: EQUAL
14100: IFTRUE 14104
14102: GO 14228
14104: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: LD_INT 2
14112: PUSH
14113: LD_INT 4
14115: PUSH
14116: LD_INT 5
14118: PUSH
14119: LD_INT 7
14121: PUSH
14122: LD_INT 11
14124: PUSH
14125: LD_INT 12
14127: PUSH
14128: LD_INT 15
14130: PUSH
14131: LD_INT 16
14133: PUSH
14134: LD_INT 20
14136: PUSH
14137: LD_INT 21
14139: PUSH
14140: LD_INT 22
14142: PUSH
14143: LD_INT 23
14145: PUSH
14146: LD_INT 25
14148: PUSH
14149: LD_INT 26
14151: PUSH
14152: LD_INT 30
14154: PUSH
14155: LD_INT 31
14157: PUSH
14158: LD_INT 32
14160: PUSH
14161: LD_INT 33
14163: PUSH
14164: LD_INT 34
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 101
14190: PUSH
14191: LD_INT 102
14193: PUSH
14194: LD_INT 103
14196: PUSH
14197: LD_INT 106
14199: PUSH
14200: LD_INT 108
14202: PUSH
14203: LD_INT 112
14205: PUSH
14206: LD_INT 113
14208: PUSH
14209: LD_INT 114
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: ST_TO_ADDR
14226: GO 14821
14228: LD_INT 17
14230: DOUBLE
14231: EQUAL
14232: IFTRUE 14236
14234: GO 14448
14236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14237: LD_ADDR_VAR 0 1
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: LD_INT 2
14247: PUSH
14248: LD_INT 3
14250: PUSH
14251: LD_INT 4
14253: PUSH
14254: LD_INT 5
14256: PUSH
14257: LD_INT 6
14259: PUSH
14260: LD_INT 7
14262: PUSH
14263: LD_INT 8
14265: PUSH
14266: LD_INT 9
14268: PUSH
14269: LD_INT 10
14271: PUSH
14272: LD_INT 11
14274: PUSH
14275: LD_INT 12
14277: PUSH
14278: LD_INT 13
14280: PUSH
14281: LD_INT 14
14283: PUSH
14284: LD_INT 15
14286: PUSH
14287: LD_INT 16
14289: PUSH
14290: LD_INT 17
14292: PUSH
14293: LD_INT 18
14295: PUSH
14296: LD_INT 19
14298: PUSH
14299: LD_INT 20
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 22
14307: PUSH
14308: LD_INT 23
14310: PUSH
14311: LD_INT 24
14313: PUSH
14314: LD_INT 25
14316: PUSH
14317: LD_INT 26
14319: PUSH
14320: LD_INT 27
14322: PUSH
14323: LD_INT 28
14325: PUSH
14326: LD_INT 29
14328: PUSH
14329: LD_INT 30
14331: PUSH
14332: LD_INT 31
14334: PUSH
14335: LD_INT 32
14337: PUSH
14338: LD_INT 33
14340: PUSH
14341: LD_INT 34
14343: PUSH
14344: LD_INT 36
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 101
14386: PUSH
14387: LD_INT 102
14389: PUSH
14390: LD_INT 103
14392: PUSH
14393: LD_INT 104
14395: PUSH
14396: LD_INT 105
14398: PUSH
14399: LD_INT 106
14401: PUSH
14402: LD_INT 107
14404: PUSH
14405: LD_INT 108
14407: PUSH
14408: LD_INT 109
14410: PUSH
14411: LD_INT 110
14413: PUSH
14414: LD_INT 111
14416: PUSH
14417: LD_INT 112
14419: PUSH
14420: LD_INT 113
14422: PUSH
14423: LD_INT 114
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: ST_TO_ADDR
14446: GO 14821
14448: LD_INT 18
14450: DOUBLE
14451: EQUAL
14452: IFTRUE 14456
14454: GO 14592
14456: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14457: LD_ADDR_VAR 0 1
14461: PUSH
14462: LD_INT 2
14464: PUSH
14465: LD_INT 4
14467: PUSH
14468: LD_INT 5
14470: PUSH
14471: LD_INT 7
14473: PUSH
14474: LD_INT 11
14476: PUSH
14477: LD_INT 12
14479: PUSH
14480: LD_INT 15
14482: PUSH
14483: LD_INT 16
14485: PUSH
14486: LD_INT 20
14488: PUSH
14489: LD_INT 21
14491: PUSH
14492: LD_INT 22
14494: PUSH
14495: LD_INT 23
14497: PUSH
14498: LD_INT 25
14500: PUSH
14501: LD_INT 26
14503: PUSH
14504: LD_INT 30
14506: PUSH
14507: LD_INT 31
14509: PUSH
14510: LD_INT 32
14512: PUSH
14513: LD_INT 33
14515: PUSH
14516: LD_INT 34
14518: PUSH
14519: LD_INT 35
14521: PUSH
14522: LD_INT 36
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 101
14550: PUSH
14551: LD_INT 102
14553: PUSH
14554: LD_INT 103
14556: PUSH
14557: LD_INT 106
14559: PUSH
14560: LD_INT 108
14562: PUSH
14563: LD_INT 112
14565: PUSH
14566: LD_INT 113
14568: PUSH
14569: LD_INT 114
14571: PUSH
14572: LD_INT 115
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: ST_TO_ADDR
14590: GO 14821
14592: LD_INT 19
14594: DOUBLE
14595: EQUAL
14596: IFTRUE 14600
14598: GO 14820
14600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14601: LD_ADDR_VAR 0 1
14605: PUSH
14606: LD_INT 1
14608: PUSH
14609: LD_INT 2
14611: PUSH
14612: LD_INT 3
14614: PUSH
14615: LD_INT 4
14617: PUSH
14618: LD_INT 5
14620: PUSH
14621: LD_INT 6
14623: PUSH
14624: LD_INT 7
14626: PUSH
14627: LD_INT 8
14629: PUSH
14630: LD_INT 9
14632: PUSH
14633: LD_INT 10
14635: PUSH
14636: LD_INT 11
14638: PUSH
14639: LD_INT 12
14641: PUSH
14642: LD_INT 13
14644: PUSH
14645: LD_INT 14
14647: PUSH
14648: LD_INT 15
14650: PUSH
14651: LD_INT 16
14653: PUSH
14654: LD_INT 17
14656: PUSH
14657: LD_INT 18
14659: PUSH
14660: LD_INT 19
14662: PUSH
14663: LD_INT 20
14665: PUSH
14666: LD_INT 21
14668: PUSH
14669: LD_INT 22
14671: PUSH
14672: LD_INT 23
14674: PUSH
14675: LD_INT 24
14677: PUSH
14678: LD_INT 25
14680: PUSH
14681: LD_INT 26
14683: PUSH
14684: LD_INT 27
14686: PUSH
14687: LD_INT 28
14689: PUSH
14690: LD_INT 29
14692: PUSH
14693: LD_INT 30
14695: PUSH
14696: LD_INT 31
14698: PUSH
14699: LD_INT 32
14701: PUSH
14702: LD_INT 33
14704: PUSH
14705: LD_INT 34
14707: PUSH
14708: LD_INT 35
14710: PUSH
14711: LD_INT 36
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 101
14754: PUSH
14755: LD_INT 102
14757: PUSH
14758: LD_INT 103
14760: PUSH
14761: LD_INT 104
14763: PUSH
14764: LD_INT 105
14766: PUSH
14767: LD_INT 106
14769: PUSH
14770: LD_INT 107
14772: PUSH
14773: LD_INT 108
14775: PUSH
14776: LD_INT 109
14778: PUSH
14779: LD_INT 110
14781: PUSH
14782: LD_INT 111
14784: PUSH
14785: LD_INT 112
14787: PUSH
14788: LD_INT 113
14790: PUSH
14791: LD_INT 114
14793: PUSH
14794: LD_INT 115
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: ST_TO_ADDR
14818: GO 14821
14820: POP
// end else
14821: GO 15040
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14823: LD_ADDR_VAR 0 1
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: LD_INT 2
14833: PUSH
14834: LD_INT 3
14836: PUSH
14837: LD_INT 4
14839: PUSH
14840: LD_INT 5
14842: PUSH
14843: LD_INT 6
14845: PUSH
14846: LD_INT 7
14848: PUSH
14849: LD_INT 8
14851: PUSH
14852: LD_INT 9
14854: PUSH
14855: LD_INT 10
14857: PUSH
14858: LD_INT 11
14860: PUSH
14861: LD_INT 12
14863: PUSH
14864: LD_INT 13
14866: PUSH
14867: LD_INT 14
14869: PUSH
14870: LD_INT 15
14872: PUSH
14873: LD_INT 16
14875: PUSH
14876: LD_INT 17
14878: PUSH
14879: LD_INT 18
14881: PUSH
14882: LD_INT 19
14884: PUSH
14885: LD_INT 20
14887: PUSH
14888: LD_INT 21
14890: PUSH
14891: LD_INT 22
14893: PUSH
14894: LD_INT 23
14896: PUSH
14897: LD_INT 24
14899: PUSH
14900: LD_INT 25
14902: PUSH
14903: LD_INT 26
14905: PUSH
14906: LD_INT 27
14908: PUSH
14909: LD_INT 28
14911: PUSH
14912: LD_INT 29
14914: PUSH
14915: LD_INT 30
14917: PUSH
14918: LD_INT 31
14920: PUSH
14921: LD_INT 32
14923: PUSH
14924: LD_INT 33
14926: PUSH
14927: LD_INT 34
14929: PUSH
14930: LD_INT 35
14932: PUSH
14933: LD_INT 36
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 101
14976: PUSH
14977: LD_INT 102
14979: PUSH
14980: LD_INT 103
14982: PUSH
14983: LD_INT 104
14985: PUSH
14986: LD_INT 105
14988: PUSH
14989: LD_INT 106
14991: PUSH
14992: LD_INT 107
14994: PUSH
14995: LD_INT 108
14997: PUSH
14998: LD_INT 109
15000: PUSH
15001: LD_INT 110
15003: PUSH
15004: LD_INT 111
15006: PUSH
15007: LD_INT 112
15009: PUSH
15010: LD_INT 113
15012: PUSH
15013: LD_INT 114
15015: PUSH
15016: LD_INT 115
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: ST_TO_ADDR
// if result then
15040: LD_VAR 0 1
15044: IFFALSE 15333
// begin normal :=  ;
15046: LD_ADDR_VAR 0 3
15050: PUSH
15051: LD_STRING 
15053: ST_TO_ADDR
// hardcore :=  ;
15054: LD_ADDR_VAR 0 4
15058: PUSH
15059: LD_STRING 
15061: ST_TO_ADDR
// for i = 1 to normalCounter do
15062: LD_ADDR_VAR 0 5
15066: PUSH
15067: DOUBLE
15068: LD_INT 1
15070: DEC
15071: ST_TO_ADDR
15072: LD_EXP 28
15076: PUSH
15077: FOR_TO
15078: IFFALSE 15179
// begin tmp := 0 ;
15080: LD_ADDR_VAR 0 2
15084: PUSH
15085: LD_STRING 0
15087: ST_TO_ADDR
// if result [ 1 ] then
15088: LD_VAR 0 1
15092: PUSH
15093: LD_INT 1
15095: ARRAY
15096: IFFALSE 15161
// if result [ 1 ] [ 1 ] = i then
15098: LD_VAR 0 1
15102: PUSH
15103: LD_INT 1
15105: ARRAY
15106: PUSH
15107: LD_INT 1
15109: ARRAY
15110: PUSH
15111: LD_VAR 0 5
15115: EQUAL
15116: IFFALSE 15161
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15118: LD_ADDR_VAR 0 1
15122: PUSH
15123: LD_VAR 0 1
15127: PPUSH
15128: LD_INT 1
15130: PPUSH
15131: LD_VAR 0 1
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PPUSH
15140: LD_INT 1
15142: PPUSH
15143: CALL_OW 3
15147: PPUSH
15148: CALL_OW 1
15152: ST_TO_ADDR
// tmp := 1 ;
15153: LD_ADDR_VAR 0 2
15157: PUSH
15158: LD_STRING 1
15160: ST_TO_ADDR
// end ; normal := normal & tmp ;
15161: LD_ADDR_VAR 0 3
15165: PUSH
15166: LD_VAR 0 3
15170: PUSH
15171: LD_VAR 0 2
15175: STR
15176: ST_TO_ADDR
// end ;
15177: GO 15077
15179: POP
15180: POP
// for i = 1 to hardcoreCounter do
15181: LD_ADDR_VAR 0 5
15185: PUSH
15186: DOUBLE
15187: LD_INT 1
15189: DEC
15190: ST_TO_ADDR
15191: LD_EXP 29
15195: PUSH
15196: FOR_TO
15197: IFFALSE 15302
// begin tmp := 0 ;
15199: LD_ADDR_VAR 0 2
15203: PUSH
15204: LD_STRING 0
15206: ST_TO_ADDR
// if result [ 2 ] then
15207: LD_VAR 0 1
15211: PUSH
15212: LD_INT 2
15214: ARRAY
15215: IFFALSE 15284
// if result [ 2 ] [ 1 ] = 100 + i then
15217: LD_VAR 0 1
15221: PUSH
15222: LD_INT 2
15224: ARRAY
15225: PUSH
15226: LD_INT 1
15228: ARRAY
15229: PUSH
15230: LD_INT 100
15232: PUSH
15233: LD_VAR 0 5
15237: PLUS
15238: EQUAL
15239: IFFALSE 15284
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15241: LD_ADDR_VAR 0 1
15245: PUSH
15246: LD_VAR 0 1
15250: PPUSH
15251: LD_INT 2
15253: PPUSH
15254: LD_VAR 0 1
15258: PUSH
15259: LD_INT 2
15261: ARRAY
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: CALL_OW 3
15270: PPUSH
15271: CALL_OW 1
15275: ST_TO_ADDR
// tmp := 1 ;
15276: LD_ADDR_VAR 0 2
15280: PUSH
15281: LD_STRING 1
15283: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15284: LD_ADDR_VAR 0 4
15288: PUSH
15289: LD_VAR 0 4
15293: PUSH
15294: LD_VAR 0 2
15298: STR
15299: ST_TO_ADDR
// end ;
15300: GO 15196
15302: POP
15303: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15304: LD_STRING getStreamItemsFromMission("
15306: PUSH
15307: LD_VAR 0 3
15311: STR
15312: PUSH
15313: LD_STRING ","
15315: STR
15316: PUSH
15317: LD_VAR 0 4
15321: STR
15322: PUSH
15323: LD_STRING ")
15325: STR
15326: PPUSH
15327: CALL_OW 559
// end else
15331: GO 15340
// ToLua ( getStreamItemsFromMission("","") ) ;
15333: LD_STRING getStreamItemsFromMission("","")
15335: PPUSH
15336: CALL_OW 559
// end ;
15340: LD_VAR 0 1
15344: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15345: LD_VAR 0 2
15349: PUSH
15350: LD_INT 100
15352: EQUAL
15353: IFFALSE 16302
// begin if not StreamModeActive then
15355: LD_EXP 27
15359: NOT
15360: IFFALSE 15370
// StreamModeActive := true ;
15362: LD_ADDR_EXP 27
15366: PUSH
15367: LD_INT 1
15369: ST_TO_ADDR
// if p3 = 0 then
15370: LD_VAR 0 3
15374: PUSH
15375: LD_INT 0
15377: EQUAL
15378: IFFALSE 15384
// InitStreamMode ;
15380: CALL 11423 0 0
// if p3 = 1 then
15384: LD_VAR 0 3
15388: PUSH
15389: LD_INT 1
15391: EQUAL
15392: IFFALSE 15402
// sRocket := true ;
15394: LD_ADDR_EXP 32
15398: PUSH
15399: LD_INT 1
15401: ST_TO_ADDR
// if p3 = 2 then
15402: LD_VAR 0 3
15406: PUSH
15407: LD_INT 2
15409: EQUAL
15410: IFFALSE 15420
// sSpeed := true ;
15412: LD_ADDR_EXP 31
15416: PUSH
15417: LD_INT 1
15419: ST_TO_ADDR
// if p3 = 3 then
15420: LD_VAR 0 3
15424: PUSH
15425: LD_INT 3
15427: EQUAL
15428: IFFALSE 15438
// sEngine := true ;
15430: LD_ADDR_EXP 33
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// if p3 = 4 then
15438: LD_VAR 0 3
15442: PUSH
15443: LD_INT 4
15445: EQUAL
15446: IFFALSE 15456
// sSpec := true ;
15448: LD_ADDR_EXP 30
15452: PUSH
15453: LD_INT 1
15455: ST_TO_ADDR
// if p3 = 5 then
15456: LD_VAR 0 3
15460: PUSH
15461: LD_INT 5
15463: EQUAL
15464: IFFALSE 15474
// sLevel := true ;
15466: LD_ADDR_EXP 34
15470: PUSH
15471: LD_INT 1
15473: ST_TO_ADDR
// if p3 = 6 then
15474: LD_VAR 0 3
15478: PUSH
15479: LD_INT 6
15481: EQUAL
15482: IFFALSE 15492
// sArmoury := true ;
15484: LD_ADDR_EXP 35
15488: PUSH
15489: LD_INT 1
15491: ST_TO_ADDR
// if p3 = 7 then
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 7
15499: EQUAL
15500: IFFALSE 15510
// sRadar := true ;
15502: LD_ADDR_EXP 36
15506: PUSH
15507: LD_INT 1
15509: ST_TO_ADDR
// if p3 = 8 then
15510: LD_VAR 0 3
15514: PUSH
15515: LD_INT 8
15517: EQUAL
15518: IFFALSE 15528
// sBunker := true ;
15520: LD_ADDR_EXP 37
15524: PUSH
15525: LD_INT 1
15527: ST_TO_ADDR
// if p3 = 9 then
15528: LD_VAR 0 3
15532: PUSH
15533: LD_INT 9
15535: EQUAL
15536: IFFALSE 15546
// sHack := true ;
15538: LD_ADDR_EXP 38
15542: PUSH
15543: LD_INT 1
15545: ST_TO_ADDR
// if p3 = 10 then
15546: LD_VAR 0 3
15550: PUSH
15551: LD_INT 10
15553: EQUAL
15554: IFFALSE 15564
// sFire := true ;
15556: LD_ADDR_EXP 39
15560: PUSH
15561: LD_INT 1
15563: ST_TO_ADDR
// if p3 = 11 then
15564: LD_VAR 0 3
15568: PUSH
15569: LD_INT 11
15571: EQUAL
15572: IFFALSE 15582
// sRefresh := true ;
15574: LD_ADDR_EXP 40
15578: PUSH
15579: LD_INT 1
15581: ST_TO_ADDR
// if p3 = 12 then
15582: LD_VAR 0 3
15586: PUSH
15587: LD_INT 12
15589: EQUAL
15590: IFFALSE 15600
// sExp := true ;
15592: LD_ADDR_EXP 41
15596: PUSH
15597: LD_INT 1
15599: ST_TO_ADDR
// if p3 = 13 then
15600: LD_VAR 0 3
15604: PUSH
15605: LD_INT 13
15607: EQUAL
15608: IFFALSE 15618
// sDepot := true ;
15610: LD_ADDR_EXP 42
15614: PUSH
15615: LD_INT 1
15617: ST_TO_ADDR
// if p3 = 14 then
15618: LD_VAR 0 3
15622: PUSH
15623: LD_INT 14
15625: EQUAL
15626: IFFALSE 15636
// sFlag := true ;
15628: LD_ADDR_EXP 43
15632: PUSH
15633: LD_INT 1
15635: ST_TO_ADDR
// if p3 = 15 then
15636: LD_VAR 0 3
15640: PUSH
15641: LD_INT 15
15643: EQUAL
15644: IFFALSE 15654
// sKamikadze := true ;
15646: LD_ADDR_EXP 51
15650: PUSH
15651: LD_INT 1
15653: ST_TO_ADDR
// if p3 = 16 then
15654: LD_VAR 0 3
15658: PUSH
15659: LD_INT 16
15661: EQUAL
15662: IFFALSE 15672
// sTroll := true ;
15664: LD_ADDR_EXP 52
15668: PUSH
15669: LD_INT 1
15671: ST_TO_ADDR
// if p3 = 17 then
15672: LD_VAR 0 3
15676: PUSH
15677: LD_INT 17
15679: EQUAL
15680: IFFALSE 15690
// sSlow := true ;
15682: LD_ADDR_EXP 53
15686: PUSH
15687: LD_INT 1
15689: ST_TO_ADDR
// if p3 = 18 then
15690: LD_VAR 0 3
15694: PUSH
15695: LD_INT 18
15697: EQUAL
15698: IFFALSE 15708
// sLack := true ;
15700: LD_ADDR_EXP 54
15704: PUSH
15705: LD_INT 1
15707: ST_TO_ADDR
// if p3 = 19 then
15708: LD_VAR 0 3
15712: PUSH
15713: LD_INT 19
15715: EQUAL
15716: IFFALSE 15726
// sTank := true ;
15718: LD_ADDR_EXP 56
15722: PUSH
15723: LD_INT 1
15725: ST_TO_ADDR
// if p3 = 20 then
15726: LD_VAR 0 3
15730: PUSH
15731: LD_INT 20
15733: EQUAL
15734: IFFALSE 15744
// sRemote := true ;
15736: LD_ADDR_EXP 57
15740: PUSH
15741: LD_INT 1
15743: ST_TO_ADDR
// if p3 = 21 then
15744: LD_VAR 0 3
15748: PUSH
15749: LD_INT 21
15751: EQUAL
15752: IFFALSE 15762
// sPowell := true ;
15754: LD_ADDR_EXP 58
15758: PUSH
15759: LD_INT 1
15761: ST_TO_ADDR
// if p3 = 22 then
15762: LD_VAR 0 3
15766: PUSH
15767: LD_INT 22
15769: EQUAL
15770: IFFALSE 15780
// sTeleport := true ;
15772: LD_ADDR_EXP 61
15776: PUSH
15777: LD_INT 1
15779: ST_TO_ADDR
// if p3 = 23 then
15780: LD_VAR 0 3
15784: PUSH
15785: LD_INT 23
15787: EQUAL
15788: IFFALSE 15798
// sOilTower := true ;
15790: LD_ADDR_EXP 63
15794: PUSH
15795: LD_INT 1
15797: ST_TO_ADDR
// if p3 = 24 then
15798: LD_VAR 0 3
15802: PUSH
15803: LD_INT 24
15805: EQUAL
15806: IFFALSE 15816
// sShovel := true ;
15808: LD_ADDR_EXP 64
15812: PUSH
15813: LD_INT 1
15815: ST_TO_ADDR
// if p3 = 25 then
15816: LD_VAR 0 3
15820: PUSH
15821: LD_INT 25
15823: EQUAL
15824: IFFALSE 15834
// sSheik := true ;
15826: LD_ADDR_EXP 65
15830: PUSH
15831: LD_INT 1
15833: ST_TO_ADDR
// if p3 = 26 then
15834: LD_VAR 0 3
15838: PUSH
15839: LD_INT 26
15841: EQUAL
15842: IFFALSE 15852
// sEarthquake := true ;
15844: LD_ADDR_EXP 67
15848: PUSH
15849: LD_INT 1
15851: ST_TO_ADDR
// if p3 = 27 then
15852: LD_VAR 0 3
15856: PUSH
15857: LD_INT 27
15859: EQUAL
15860: IFFALSE 15870
// sAI := true ;
15862: LD_ADDR_EXP 68
15866: PUSH
15867: LD_INT 1
15869: ST_TO_ADDR
// if p3 = 28 then
15870: LD_VAR 0 3
15874: PUSH
15875: LD_INT 28
15877: EQUAL
15878: IFFALSE 15888
// sCargo := true ;
15880: LD_ADDR_EXP 71
15884: PUSH
15885: LD_INT 1
15887: ST_TO_ADDR
// if p3 = 29 then
15888: LD_VAR 0 3
15892: PUSH
15893: LD_INT 29
15895: EQUAL
15896: IFFALSE 15906
// sDLaser := true ;
15898: LD_ADDR_EXP 72
15902: PUSH
15903: LD_INT 1
15905: ST_TO_ADDR
// if p3 = 30 then
15906: LD_VAR 0 3
15910: PUSH
15911: LD_INT 30
15913: EQUAL
15914: IFFALSE 15924
// sExchange := true ;
15916: LD_ADDR_EXP 73
15920: PUSH
15921: LD_INT 1
15923: ST_TO_ADDR
// if p3 = 31 then
15924: LD_VAR 0 3
15928: PUSH
15929: LD_INT 31
15931: EQUAL
15932: IFFALSE 15942
// sFac := true ;
15934: LD_ADDR_EXP 74
15938: PUSH
15939: LD_INT 1
15941: ST_TO_ADDR
// if p3 = 32 then
15942: LD_VAR 0 3
15946: PUSH
15947: LD_INT 32
15949: EQUAL
15950: IFFALSE 15960
// sPower := true ;
15952: LD_ADDR_EXP 75
15956: PUSH
15957: LD_INT 1
15959: ST_TO_ADDR
// if p3 = 33 then
15960: LD_VAR 0 3
15964: PUSH
15965: LD_INT 33
15967: EQUAL
15968: IFFALSE 15978
// sRandom := true ;
15970: LD_ADDR_EXP 76
15974: PUSH
15975: LD_INT 1
15977: ST_TO_ADDR
// if p3 = 34 then
15978: LD_VAR 0 3
15982: PUSH
15983: LD_INT 34
15985: EQUAL
15986: IFFALSE 15996
// sShield := true ;
15988: LD_ADDR_EXP 77
15992: PUSH
15993: LD_INT 1
15995: ST_TO_ADDR
// if p3 = 35 then
15996: LD_VAR 0 3
16000: PUSH
16001: LD_INT 35
16003: EQUAL
16004: IFFALSE 16014
// sTime := true ;
16006: LD_ADDR_EXP 78
16010: PUSH
16011: LD_INT 1
16013: ST_TO_ADDR
// if p3 = 36 then
16014: LD_VAR 0 3
16018: PUSH
16019: LD_INT 36
16021: EQUAL
16022: IFFALSE 16032
// sTools := true ;
16024: LD_ADDR_EXP 79
16028: PUSH
16029: LD_INT 1
16031: ST_TO_ADDR
// if p3 = 101 then
16032: LD_VAR 0 3
16036: PUSH
16037: LD_INT 101
16039: EQUAL
16040: IFFALSE 16050
// sSold := true ;
16042: LD_ADDR_EXP 44
16046: PUSH
16047: LD_INT 1
16049: ST_TO_ADDR
// if p3 = 102 then
16050: LD_VAR 0 3
16054: PUSH
16055: LD_INT 102
16057: EQUAL
16058: IFFALSE 16068
// sDiff := true ;
16060: LD_ADDR_EXP 45
16064: PUSH
16065: LD_INT 1
16067: ST_TO_ADDR
// if p3 = 103 then
16068: LD_VAR 0 3
16072: PUSH
16073: LD_INT 103
16075: EQUAL
16076: IFFALSE 16086
// sFog := true ;
16078: LD_ADDR_EXP 48
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// if p3 = 104 then
16086: LD_VAR 0 3
16090: PUSH
16091: LD_INT 104
16093: EQUAL
16094: IFFALSE 16104
// sReset := true ;
16096: LD_ADDR_EXP 49
16100: PUSH
16101: LD_INT 1
16103: ST_TO_ADDR
// if p3 = 105 then
16104: LD_VAR 0 3
16108: PUSH
16109: LD_INT 105
16111: EQUAL
16112: IFFALSE 16122
// sSun := true ;
16114: LD_ADDR_EXP 50
16118: PUSH
16119: LD_INT 1
16121: ST_TO_ADDR
// if p3 = 106 then
16122: LD_VAR 0 3
16126: PUSH
16127: LD_INT 106
16129: EQUAL
16130: IFFALSE 16140
// sTiger := true ;
16132: LD_ADDR_EXP 46
16136: PUSH
16137: LD_INT 1
16139: ST_TO_ADDR
// if p3 = 107 then
16140: LD_VAR 0 3
16144: PUSH
16145: LD_INT 107
16147: EQUAL
16148: IFFALSE 16158
// sBomb := true ;
16150: LD_ADDR_EXP 47
16154: PUSH
16155: LD_INT 1
16157: ST_TO_ADDR
// if p3 = 108 then
16158: LD_VAR 0 3
16162: PUSH
16163: LD_INT 108
16165: EQUAL
16166: IFFALSE 16176
// sWound := true ;
16168: LD_ADDR_EXP 55
16172: PUSH
16173: LD_INT 1
16175: ST_TO_ADDR
// if p3 = 109 then
16176: LD_VAR 0 3
16180: PUSH
16181: LD_INT 109
16183: EQUAL
16184: IFFALSE 16194
// sBetray := true ;
16186: LD_ADDR_EXP 59
16190: PUSH
16191: LD_INT 1
16193: ST_TO_ADDR
// if p3 = 110 then
16194: LD_VAR 0 3
16198: PUSH
16199: LD_INT 110
16201: EQUAL
16202: IFFALSE 16212
// sContamin := true ;
16204: LD_ADDR_EXP 60
16208: PUSH
16209: LD_INT 1
16211: ST_TO_ADDR
// if p3 = 111 then
16212: LD_VAR 0 3
16216: PUSH
16217: LD_INT 111
16219: EQUAL
16220: IFFALSE 16230
// sOil := true ;
16222: LD_ADDR_EXP 62
16226: PUSH
16227: LD_INT 1
16229: ST_TO_ADDR
// if p3 = 112 then
16230: LD_VAR 0 3
16234: PUSH
16235: LD_INT 112
16237: EQUAL
16238: IFFALSE 16248
// sStu := true ;
16240: LD_ADDR_EXP 66
16244: PUSH
16245: LD_INT 1
16247: ST_TO_ADDR
// if p3 = 113 then
16248: LD_VAR 0 3
16252: PUSH
16253: LD_INT 113
16255: EQUAL
16256: IFFALSE 16266
// sBazooka := true ;
16258: LD_ADDR_EXP 69
16262: PUSH
16263: LD_INT 1
16265: ST_TO_ADDR
// if p3 = 114 then
16266: LD_VAR 0 3
16270: PUSH
16271: LD_INT 114
16273: EQUAL
16274: IFFALSE 16284
// sMortar := true ;
16276: LD_ADDR_EXP 70
16280: PUSH
16281: LD_INT 1
16283: ST_TO_ADDR
// if p3 = 115 then
16284: LD_VAR 0 3
16288: PUSH
16289: LD_INT 115
16291: EQUAL
16292: IFFALSE 16302
// sRanger := true ;
16294: LD_ADDR_EXP 80
16298: PUSH
16299: LD_INT 1
16301: ST_TO_ADDR
// end ; end ;
16302: PPOPN 6
16304: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16305: LD_EXP 27
16309: PUSH
16310: LD_EXP 32
16314: AND
16315: IFFALSE 16439
16317: GO 16319
16319: DISABLE
16320: LD_INT 0
16322: PPUSH
16323: PPUSH
// begin enable ;
16324: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16325: LD_ADDR_VAR 0 2
16329: PUSH
16330: LD_INT 22
16332: PUSH
16333: LD_OWVAR 2
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 2
16344: PUSH
16345: LD_INT 34
16347: PUSH
16348: LD_INT 7
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 34
16357: PUSH
16358: LD_INT 45
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 34
16367: PUSH
16368: LD_INT 28
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 34
16377: PUSH
16378: LD_INT 47
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PPUSH
16396: CALL_OW 69
16400: ST_TO_ADDR
// if not tmp then
16401: LD_VAR 0 2
16405: NOT
16406: IFFALSE 16410
// exit ;
16408: GO 16439
// for i in tmp do
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: LD_VAR 0 2
16419: PUSH
16420: FOR_IN
16421: IFFALSE 16437
// begin SetLives ( i , 0 ) ;
16423: LD_VAR 0 1
16427: PPUSH
16428: LD_INT 0
16430: PPUSH
16431: CALL_OW 234
// end ;
16435: GO 16420
16437: POP
16438: POP
// end ;
16439: PPOPN 2
16441: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16442: LD_EXP 27
16446: PUSH
16447: LD_EXP 33
16451: AND
16452: IFFALSE 16536
16454: GO 16456
16456: DISABLE
16457: LD_INT 0
16459: PPUSH
16460: PPUSH
// begin enable ;
16461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_INT 22
16469: PUSH
16470: LD_OWVAR 2
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 32
16481: PUSH
16482: LD_INT 3
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 69
16497: ST_TO_ADDR
// if not tmp then
16498: LD_VAR 0 2
16502: NOT
16503: IFFALSE 16507
// exit ;
16505: GO 16536
// for i in tmp do
16507: LD_ADDR_VAR 0 1
16511: PUSH
16512: LD_VAR 0 2
16516: PUSH
16517: FOR_IN
16518: IFFALSE 16534
// begin SetLives ( i , 0 ) ;
16520: LD_VAR 0 1
16524: PPUSH
16525: LD_INT 0
16527: PPUSH
16528: CALL_OW 234
// end ;
16532: GO 16517
16534: POP
16535: POP
// end ;
16536: PPOPN 2
16538: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16539: LD_EXP 27
16543: PUSH
16544: LD_EXP 30
16548: AND
16549: IFFALSE 16642
16551: GO 16553
16553: DISABLE
16554: LD_INT 0
16556: PPUSH
// begin enable ;
16557: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16558: LD_ADDR_VAR 0 1
16562: PUSH
16563: LD_INT 22
16565: PUSH
16566: LD_OWVAR 2
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 2
16577: PUSH
16578: LD_INT 25
16580: PUSH
16581: LD_INT 5
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 25
16590: PUSH
16591: LD_INT 9
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 25
16600: PUSH
16601: LD_INT 8
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: PUSH
16623: FOR_IN
16624: IFFALSE 16640
// begin SetClass ( i , 1 ) ;
16626: LD_VAR 0 1
16630: PPUSH
16631: LD_INT 1
16633: PPUSH
16634: CALL_OW 336
// end ;
16638: GO 16623
16640: POP
16641: POP
// end ;
16642: PPOPN 1
16644: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16645: LD_EXP 27
16649: PUSH
16650: LD_EXP 31
16654: AND
16655: PUSH
16656: LD_OWVAR 65
16660: PUSH
16661: LD_INT 7
16663: LESS
16664: AND
16665: IFFALSE 16679
16667: GO 16669
16669: DISABLE
// begin enable ;
16670: ENABLE
// game_speed := 7 ;
16671: LD_ADDR_OWVAR 65
16675: PUSH
16676: LD_INT 7
16678: ST_TO_ADDR
// end ;
16679: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16680: LD_EXP 27
16684: PUSH
16685: LD_EXP 34
16689: AND
16690: IFFALSE 16892
16692: GO 16694
16694: DISABLE
16695: LD_INT 0
16697: PPUSH
16698: PPUSH
16699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16700: LD_ADDR_VAR 0 3
16704: PUSH
16705: LD_INT 81
16707: PUSH
16708: LD_OWVAR 2
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 21
16719: PUSH
16720: LD_INT 1
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PPUSH
16731: CALL_OW 69
16735: ST_TO_ADDR
// if not tmp then
16736: LD_VAR 0 3
16740: NOT
16741: IFFALSE 16745
// exit ;
16743: GO 16892
// if tmp > 5 then
16745: LD_VAR 0 3
16749: PUSH
16750: LD_INT 5
16752: GREATER
16753: IFFALSE 16765
// k := 5 else
16755: LD_ADDR_VAR 0 2
16759: PUSH
16760: LD_INT 5
16762: ST_TO_ADDR
16763: GO 16775
// k := tmp ;
16765: LD_ADDR_VAR 0 2
16769: PUSH
16770: LD_VAR 0 3
16774: ST_TO_ADDR
// for i := 1 to k do
16775: LD_ADDR_VAR 0 1
16779: PUSH
16780: DOUBLE
16781: LD_INT 1
16783: DEC
16784: ST_TO_ADDR
16785: LD_VAR 0 2
16789: PUSH
16790: FOR_TO
16791: IFFALSE 16890
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16793: LD_VAR 0 3
16797: PUSH
16798: LD_VAR 0 1
16802: ARRAY
16803: PPUSH
16804: LD_VAR 0 1
16808: PUSH
16809: LD_INT 4
16811: MOD
16812: PUSH
16813: LD_INT 1
16815: PLUS
16816: PPUSH
16817: CALL_OW 259
16821: PUSH
16822: LD_INT 10
16824: LESS
16825: IFFALSE 16888
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16827: LD_VAR 0 3
16831: PUSH
16832: LD_VAR 0 1
16836: ARRAY
16837: PPUSH
16838: LD_VAR 0 1
16842: PUSH
16843: LD_INT 4
16845: MOD
16846: PUSH
16847: LD_INT 1
16849: PLUS
16850: PPUSH
16851: LD_VAR 0 3
16855: PUSH
16856: LD_VAR 0 1
16860: ARRAY
16861: PPUSH
16862: LD_VAR 0 1
16866: PUSH
16867: LD_INT 4
16869: MOD
16870: PUSH
16871: LD_INT 1
16873: PLUS
16874: PPUSH
16875: CALL_OW 259
16879: PUSH
16880: LD_INT 1
16882: PLUS
16883: PPUSH
16884: CALL_OW 237
16888: GO 16790
16890: POP
16891: POP
// end ;
16892: PPOPN 3
16894: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16895: LD_EXP 27
16899: PUSH
16900: LD_EXP 35
16904: AND
16905: IFFALSE 16925
16907: GO 16909
16909: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16910: LD_INT 4
16912: PPUSH
16913: LD_OWVAR 2
16917: PPUSH
16918: LD_INT 0
16920: PPUSH
16921: CALL_OW 324
16925: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16926: LD_EXP 27
16930: PUSH
16931: LD_EXP 64
16935: AND
16936: IFFALSE 16956
16938: GO 16940
16940: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16941: LD_INT 19
16943: PPUSH
16944: LD_OWVAR 2
16948: PPUSH
16949: LD_INT 0
16951: PPUSH
16952: CALL_OW 324
16956: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16957: LD_EXP 27
16961: PUSH
16962: LD_EXP 36
16966: AND
16967: IFFALSE 17069
16969: GO 16971
16971: DISABLE
16972: LD_INT 0
16974: PPUSH
16975: PPUSH
// begin enable ;
16976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: LD_INT 22
16984: PUSH
16985: LD_OWVAR 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 2
16996: PUSH
16997: LD_INT 34
16999: PUSH
17000: LD_INT 11
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 34
17009: PUSH
17010: LD_INT 30
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PPUSH
17026: CALL_OW 69
17030: ST_TO_ADDR
// if not tmp then
17031: LD_VAR 0 2
17035: NOT
17036: IFFALSE 17040
// exit ;
17038: GO 17069
// for i in tmp do
17040: LD_ADDR_VAR 0 1
17044: PUSH
17045: LD_VAR 0 2
17049: PUSH
17050: FOR_IN
17051: IFFALSE 17067
// begin SetLives ( i , 0 ) ;
17053: LD_VAR 0 1
17057: PPUSH
17058: LD_INT 0
17060: PPUSH
17061: CALL_OW 234
// end ;
17065: GO 17050
17067: POP
17068: POP
// end ;
17069: PPOPN 2
17071: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17072: LD_EXP 27
17076: PUSH
17077: LD_EXP 37
17081: AND
17082: IFFALSE 17102
17084: GO 17086
17086: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17087: LD_INT 32
17089: PPUSH
17090: LD_OWVAR 2
17094: PPUSH
17095: LD_INT 0
17097: PPUSH
17098: CALL_OW 324
17102: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17103: LD_EXP 27
17107: PUSH
17108: LD_EXP 38
17112: AND
17113: IFFALSE 17294
17115: GO 17117
17117: DISABLE
17118: LD_INT 0
17120: PPUSH
17121: PPUSH
17122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17123: LD_ADDR_VAR 0 2
17127: PUSH
17128: LD_INT 22
17130: PUSH
17131: LD_OWVAR 2
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 33
17142: PUSH
17143: LD_INT 3
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PPUSH
17154: CALL_OW 69
17158: ST_TO_ADDR
// if not tmp then
17159: LD_VAR 0 2
17163: NOT
17164: IFFALSE 17168
// exit ;
17166: GO 17294
// side := 0 ;
17168: LD_ADDR_VAR 0 3
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
// for i := 1 to 8 do
17176: LD_ADDR_VAR 0 1
17180: PUSH
17181: DOUBLE
17182: LD_INT 1
17184: DEC
17185: ST_TO_ADDR
17186: LD_INT 8
17188: PUSH
17189: FOR_TO
17190: IFFALSE 17238
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17192: LD_OWVAR 2
17196: PUSH
17197: LD_VAR 0 1
17201: NONEQUAL
17202: PUSH
17203: LD_OWVAR 2
17207: PPUSH
17208: LD_VAR 0 1
17212: PPUSH
17213: CALL_OW 81
17217: PUSH
17218: LD_INT 2
17220: EQUAL
17221: AND
17222: IFFALSE 17236
// begin side := i ;
17224: LD_ADDR_VAR 0 3
17228: PUSH
17229: LD_VAR 0 1
17233: ST_TO_ADDR
// break ;
17234: GO 17238
// end ;
17236: GO 17189
17238: POP
17239: POP
// if not side then
17240: LD_VAR 0 3
17244: NOT
17245: IFFALSE 17249
// exit ;
17247: GO 17294
// for i := 1 to tmp do
17249: LD_ADDR_VAR 0 1
17253: PUSH
17254: DOUBLE
17255: LD_INT 1
17257: DEC
17258: ST_TO_ADDR
17259: LD_VAR 0 2
17263: PUSH
17264: FOR_TO
17265: IFFALSE 17292
// if Prob ( 60 ) then
17267: LD_INT 60
17269: PPUSH
17270: CALL_OW 13
17274: IFFALSE 17290
// SetSide ( i , side ) ;
17276: LD_VAR 0 1
17280: PPUSH
17281: LD_VAR 0 3
17285: PPUSH
17286: CALL_OW 235
17290: GO 17264
17292: POP
17293: POP
// end ;
17294: PPOPN 3
17296: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17297: LD_EXP 27
17301: PUSH
17302: LD_EXP 40
17306: AND
17307: IFFALSE 17426
17309: GO 17311
17311: DISABLE
17312: LD_INT 0
17314: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17315: LD_ADDR_VAR 0 1
17319: PUSH
17320: LD_INT 22
17322: PUSH
17323: LD_OWVAR 2
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 21
17334: PUSH
17335: LD_INT 1
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 3
17344: PUSH
17345: LD_INT 23
17347: PUSH
17348: LD_INT 0
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: LIST
17363: PPUSH
17364: CALL_OW 69
17368: PUSH
17369: FOR_IN
17370: IFFALSE 17424
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17372: LD_VAR 0 1
17376: PPUSH
17377: CALL_OW 257
17381: PUSH
17382: LD_INT 1
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: LD_INT 4
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: IN
17400: IFFALSE 17422
// SetClass ( un , rand ( 1 , 4 ) ) ;
17402: LD_VAR 0 1
17406: PPUSH
17407: LD_INT 1
17409: PPUSH
17410: LD_INT 4
17412: PPUSH
17413: CALL_OW 12
17417: PPUSH
17418: CALL_OW 336
17422: GO 17369
17424: POP
17425: POP
// end ;
17426: PPOPN 1
17428: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17429: LD_EXP 27
17433: PUSH
17434: LD_EXP 39
17438: AND
17439: IFFALSE 17518
17441: GO 17443
17443: DISABLE
17444: LD_INT 0
17446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17447: LD_ADDR_VAR 0 1
17451: PUSH
17452: LD_INT 22
17454: PUSH
17455: LD_OWVAR 2
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 21
17466: PUSH
17467: LD_INT 3
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PPUSH
17478: CALL_OW 69
17482: ST_TO_ADDR
// if not tmp then
17483: LD_VAR 0 1
17487: NOT
17488: IFFALSE 17492
// exit ;
17490: GO 17518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17492: LD_VAR 0 1
17496: PUSH
17497: LD_INT 1
17499: PPUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 12
17509: ARRAY
17510: PPUSH
17511: LD_INT 100
17513: PPUSH
17514: CALL_OW 234
// end ;
17518: PPOPN 1
17520: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17521: LD_EXP 27
17525: PUSH
17526: LD_EXP 41
17530: AND
17531: IFFALSE 17629
17533: GO 17535
17535: DISABLE
17536: LD_INT 0
17538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17539: LD_ADDR_VAR 0 1
17543: PUSH
17544: LD_INT 22
17546: PUSH
17547: LD_OWVAR 2
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 21
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PPUSH
17570: CALL_OW 69
17574: ST_TO_ADDR
// if not tmp then
17575: LD_VAR 0 1
17579: NOT
17580: IFFALSE 17584
// exit ;
17582: GO 17629
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17584: LD_VAR 0 1
17588: PUSH
17589: LD_INT 1
17591: PPUSH
17592: LD_VAR 0 1
17596: PPUSH
17597: CALL_OW 12
17601: ARRAY
17602: PPUSH
17603: LD_INT 1
17605: PPUSH
17606: LD_INT 4
17608: PPUSH
17609: CALL_OW 12
17613: PPUSH
17614: LD_INT 3000
17616: PPUSH
17617: LD_INT 9000
17619: PPUSH
17620: CALL_OW 12
17624: PPUSH
17625: CALL_OW 492
// end ;
17629: PPOPN 1
17631: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17632: LD_EXP 27
17636: PUSH
17637: LD_EXP 42
17641: AND
17642: IFFALSE 17662
17644: GO 17646
17646: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17647: LD_INT 1
17649: PPUSH
17650: LD_OWVAR 2
17654: PPUSH
17655: LD_INT 0
17657: PPUSH
17658: CALL_OW 324
17662: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17663: LD_EXP 27
17667: PUSH
17668: LD_EXP 43
17672: AND
17673: IFFALSE 17756
17675: GO 17677
17677: DISABLE
17678: LD_INT 0
17680: PPUSH
17681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17682: LD_ADDR_VAR 0 2
17686: PUSH
17687: LD_INT 22
17689: PUSH
17690: LD_OWVAR 2
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 21
17701: PUSH
17702: LD_INT 3
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PPUSH
17713: CALL_OW 69
17717: ST_TO_ADDR
// if not tmp then
17718: LD_VAR 0 2
17722: NOT
17723: IFFALSE 17727
// exit ;
17725: GO 17756
// for i in tmp do
17727: LD_ADDR_VAR 0 1
17731: PUSH
17732: LD_VAR 0 2
17736: PUSH
17737: FOR_IN
17738: IFFALSE 17754
// SetBLevel ( i , 10 ) ;
17740: LD_VAR 0 1
17744: PPUSH
17745: LD_INT 10
17747: PPUSH
17748: CALL_OW 241
17752: GO 17737
17754: POP
17755: POP
// end ;
17756: PPOPN 2
17758: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17759: LD_EXP 27
17763: PUSH
17764: LD_EXP 44
17768: AND
17769: IFFALSE 17880
17771: GO 17773
17773: DISABLE
17774: LD_INT 0
17776: PPUSH
17777: PPUSH
17778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17779: LD_ADDR_VAR 0 3
17783: PUSH
17784: LD_INT 22
17786: PUSH
17787: LD_OWVAR 2
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 25
17798: PUSH
17799: LD_INT 1
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PPUSH
17810: CALL_OW 69
17814: ST_TO_ADDR
// if not tmp then
17815: LD_VAR 0 3
17819: NOT
17820: IFFALSE 17824
// exit ;
17822: GO 17880
// un := tmp [ rand ( 1 , tmp ) ] ;
17824: LD_ADDR_VAR 0 2
17828: PUSH
17829: LD_VAR 0 3
17833: PUSH
17834: LD_INT 1
17836: PPUSH
17837: LD_VAR 0 3
17841: PPUSH
17842: CALL_OW 12
17846: ARRAY
17847: ST_TO_ADDR
// if Crawls ( un ) then
17848: LD_VAR 0 2
17852: PPUSH
17853: CALL_OW 318
17857: IFFALSE 17868
// ComWalk ( un ) ;
17859: LD_VAR 0 2
17863: PPUSH
17864: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17868: LD_VAR 0 2
17872: PPUSH
17873: LD_INT 5
17875: PPUSH
17876: CALL_OW 336
// end ;
17880: PPOPN 3
17882: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17883: LD_EXP 27
17887: PUSH
17888: LD_EXP 45
17892: AND
17893: PUSH
17894: LD_OWVAR 67
17898: PUSH
17899: LD_INT 3
17901: LESS
17902: AND
17903: IFFALSE 17922
17905: GO 17907
17907: DISABLE
// Difficulty := Difficulty + 1 ;
17908: LD_ADDR_OWVAR 67
17912: PUSH
17913: LD_OWVAR 67
17917: PUSH
17918: LD_INT 1
17920: PLUS
17921: ST_TO_ADDR
17922: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17923: LD_EXP 27
17927: PUSH
17928: LD_EXP 46
17932: AND
17933: IFFALSE 18036
17935: GO 17937
17937: DISABLE
17938: LD_INT 0
17940: PPUSH
// begin for i := 1 to 5 do
17941: LD_ADDR_VAR 0 1
17945: PUSH
17946: DOUBLE
17947: LD_INT 1
17949: DEC
17950: ST_TO_ADDR
17951: LD_INT 5
17953: PUSH
17954: FOR_TO
17955: IFFALSE 18034
// begin uc_nation := nation_nature ;
17957: LD_ADDR_OWVAR 21
17961: PUSH
17962: LD_INT 0
17964: ST_TO_ADDR
// uc_side := 0 ;
17965: LD_ADDR_OWVAR 20
17969: PUSH
17970: LD_INT 0
17972: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17973: LD_ADDR_OWVAR 29
17977: PUSH
17978: LD_INT 12
17980: PUSH
17981: LD_INT 12
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: ST_TO_ADDR
// hc_agressivity := 20 ;
17988: LD_ADDR_OWVAR 35
17992: PUSH
17993: LD_INT 20
17995: ST_TO_ADDR
// hc_class := class_tiger ;
17996: LD_ADDR_OWVAR 28
18000: PUSH
18001: LD_INT 14
18003: ST_TO_ADDR
// hc_gallery :=  ;
18004: LD_ADDR_OWVAR 33
18008: PUSH
18009: LD_STRING 
18011: ST_TO_ADDR
// hc_name :=  ;
18012: LD_ADDR_OWVAR 26
18016: PUSH
18017: LD_STRING 
18019: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18020: CALL_OW 44
18024: PPUSH
18025: LD_INT 0
18027: PPUSH
18028: CALL_OW 51
// end ;
18032: GO 17954
18034: POP
18035: POP
// end ;
18036: PPOPN 1
18038: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18039: LD_EXP 27
18043: PUSH
18044: LD_EXP 47
18048: AND
18049: IFFALSE 18058
18051: GO 18053
18053: DISABLE
// StreamSibBomb ;
18054: CALL 18059 0 0
18058: END
// export function StreamSibBomb ; var i , x , y ; begin
18059: LD_INT 0
18061: PPUSH
18062: PPUSH
18063: PPUSH
18064: PPUSH
// result := false ;
18065: LD_ADDR_VAR 0 1
18069: PUSH
18070: LD_INT 0
18072: ST_TO_ADDR
// for i := 1 to 16 do
18073: LD_ADDR_VAR 0 2
18077: PUSH
18078: DOUBLE
18079: LD_INT 1
18081: DEC
18082: ST_TO_ADDR
18083: LD_INT 16
18085: PUSH
18086: FOR_TO
18087: IFFALSE 18286
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18089: LD_ADDR_VAR 0 3
18093: PUSH
18094: LD_INT 10
18096: PUSH
18097: LD_INT 20
18099: PUSH
18100: LD_INT 30
18102: PUSH
18103: LD_INT 40
18105: PUSH
18106: LD_INT 50
18108: PUSH
18109: LD_INT 60
18111: PUSH
18112: LD_INT 70
18114: PUSH
18115: LD_INT 80
18117: PUSH
18118: LD_INT 90
18120: PUSH
18121: LD_INT 100
18123: PUSH
18124: LD_INT 110
18126: PUSH
18127: LD_INT 120
18129: PUSH
18130: LD_INT 130
18132: PUSH
18133: LD_INT 140
18135: PUSH
18136: LD_INT 150
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 1
18158: PPUSH
18159: LD_INT 15
18161: PPUSH
18162: CALL_OW 12
18166: ARRAY
18167: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18168: LD_ADDR_VAR 0 4
18172: PUSH
18173: LD_INT 10
18175: PUSH
18176: LD_INT 20
18178: PUSH
18179: LD_INT 30
18181: PUSH
18182: LD_INT 40
18184: PUSH
18185: LD_INT 50
18187: PUSH
18188: LD_INT 60
18190: PUSH
18191: LD_INT 70
18193: PUSH
18194: LD_INT 80
18196: PUSH
18197: LD_INT 90
18199: PUSH
18200: LD_INT 100
18202: PUSH
18203: LD_INT 110
18205: PUSH
18206: LD_INT 120
18208: PUSH
18209: LD_INT 130
18211: PUSH
18212: LD_INT 140
18214: PUSH
18215: LD_INT 150
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 1
18237: PPUSH
18238: LD_INT 15
18240: PPUSH
18241: CALL_OW 12
18245: ARRAY
18246: ST_TO_ADDR
// if ValidHex ( x , y ) then
18247: LD_VAR 0 3
18251: PPUSH
18252: LD_VAR 0 4
18256: PPUSH
18257: CALL_OW 488
18261: IFFALSE 18284
// begin result := [ x , y ] ;
18263: LD_ADDR_VAR 0 1
18267: PUSH
18268: LD_VAR 0 3
18272: PUSH
18273: LD_VAR 0 4
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: ST_TO_ADDR
// break ;
18282: GO 18286
// end ; end ;
18284: GO 18086
18286: POP
18287: POP
// if result then
18288: LD_VAR 0 1
18292: IFFALSE 18352
// begin ToLua ( playSibBomb() ) ;
18294: LD_STRING playSibBomb()
18296: PPUSH
18297: CALL_OW 559
// wait ( 0 0$14 ) ;
18301: LD_INT 490
18303: PPUSH
18304: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18308: LD_VAR 0 1
18312: PUSH
18313: LD_INT 1
18315: ARRAY
18316: PPUSH
18317: LD_VAR 0 1
18321: PUSH
18322: LD_INT 2
18324: ARRAY
18325: PPUSH
18326: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18330: LD_VAR 0 1
18334: PUSH
18335: LD_INT 1
18337: ARRAY
18338: PPUSH
18339: LD_VAR 0 1
18343: PUSH
18344: LD_INT 2
18346: ARRAY
18347: PPUSH
18348: CALL_OW 429
// end ; end ;
18352: LD_VAR 0 1
18356: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18357: LD_EXP 27
18361: PUSH
18362: LD_EXP 49
18366: AND
18367: IFFALSE 18379
18369: GO 18371
18371: DISABLE
// YouLost (  ) ;
18372: LD_STRING 
18374: PPUSH
18375: CALL_OW 104
18379: END
// every 0 0$1 trigger StreamModeActive and sFog do
18380: LD_EXP 27
18384: PUSH
18385: LD_EXP 48
18389: AND
18390: IFFALSE 18404
18392: GO 18394
18394: DISABLE
// FogOff ( your_side ) ;
18395: LD_OWVAR 2
18399: PPUSH
18400: CALL_OW 344
18404: END
// every 0 0$1 trigger StreamModeActive and sSun do
18405: LD_EXP 27
18409: PUSH
18410: LD_EXP 50
18414: AND
18415: IFFALSE 18443
18417: GO 18419
18419: DISABLE
// begin solar_recharge_percent := 0 ;
18420: LD_ADDR_OWVAR 79
18424: PUSH
18425: LD_INT 0
18427: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18428: LD_INT 10500
18430: PPUSH
18431: CALL_OW 67
// solar_recharge_percent := 100 ;
18435: LD_ADDR_OWVAR 79
18439: PUSH
18440: LD_INT 100
18442: ST_TO_ADDR
// end ;
18443: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18444: LD_EXP 27
18448: PUSH
18449: LD_EXP 51
18453: AND
18454: IFFALSE 18693
18456: GO 18458
18458: DISABLE
18459: LD_INT 0
18461: PPUSH
18462: PPUSH
18463: PPUSH
// begin tmp := [ ] ;
18464: LD_ADDR_VAR 0 3
18468: PUSH
18469: EMPTY
18470: ST_TO_ADDR
// for i := 1 to 6 do
18471: LD_ADDR_VAR 0 1
18475: PUSH
18476: DOUBLE
18477: LD_INT 1
18479: DEC
18480: ST_TO_ADDR
18481: LD_INT 6
18483: PUSH
18484: FOR_TO
18485: IFFALSE 18590
// begin uc_nation := nation_nature ;
18487: LD_ADDR_OWVAR 21
18491: PUSH
18492: LD_INT 0
18494: ST_TO_ADDR
// uc_side := 0 ;
18495: LD_ADDR_OWVAR 20
18499: PUSH
18500: LD_INT 0
18502: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18503: LD_ADDR_OWVAR 29
18507: PUSH
18508: LD_INT 12
18510: PUSH
18511: LD_INT 12
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: ST_TO_ADDR
// hc_agressivity := 20 ;
18518: LD_ADDR_OWVAR 35
18522: PUSH
18523: LD_INT 20
18525: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18526: LD_ADDR_OWVAR 28
18530: PUSH
18531: LD_INT 17
18533: ST_TO_ADDR
// hc_gallery :=  ;
18534: LD_ADDR_OWVAR 33
18538: PUSH
18539: LD_STRING 
18541: ST_TO_ADDR
// hc_name :=  ;
18542: LD_ADDR_OWVAR 26
18546: PUSH
18547: LD_STRING 
18549: ST_TO_ADDR
// un := CreateHuman ;
18550: LD_ADDR_VAR 0 2
18554: PUSH
18555: CALL_OW 44
18559: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_INT 1
18567: PPUSH
18568: CALL_OW 51
// tmp := tmp ^ un ;
18572: LD_ADDR_VAR 0 3
18576: PUSH
18577: LD_VAR 0 3
18581: PUSH
18582: LD_VAR 0 2
18586: ADD
18587: ST_TO_ADDR
// end ;
18588: GO 18484
18590: POP
18591: POP
// repeat wait ( 0 0$1 ) ;
18592: LD_INT 35
18594: PPUSH
18595: CALL_OW 67
// for un in tmp do
18599: LD_ADDR_VAR 0 2
18603: PUSH
18604: LD_VAR 0 3
18608: PUSH
18609: FOR_IN
18610: IFFALSE 18684
// begin if IsDead ( un ) then
18612: LD_VAR 0 2
18616: PPUSH
18617: CALL_OW 301
18621: IFFALSE 18641
// begin tmp := tmp diff un ;
18623: LD_ADDR_VAR 0 3
18627: PUSH
18628: LD_VAR 0 3
18632: PUSH
18633: LD_VAR 0 2
18637: DIFF
18638: ST_TO_ADDR
// continue ;
18639: GO 18609
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18641: LD_VAR 0 2
18645: PPUSH
18646: LD_INT 3
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_INT 0
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PPUSH
18663: CALL_OW 69
18667: PPUSH
18668: LD_VAR 0 2
18672: PPUSH
18673: CALL_OW 74
18677: PPUSH
18678: CALL_OW 115
// end ;
18682: GO 18609
18684: POP
18685: POP
// until not tmp ;
18686: LD_VAR 0 3
18690: NOT
18691: IFFALSE 18592
// end ;
18693: PPOPN 3
18695: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18696: LD_EXP 27
18700: PUSH
18701: LD_EXP 52
18705: AND
18706: IFFALSE 18760
18708: GO 18710
18710: DISABLE
// begin ToLua ( displayTroll(); ) ;
18711: LD_STRING displayTroll();
18713: PPUSH
18714: CALL_OW 559
// wait ( 3 3$00 ) ;
18718: LD_INT 6300
18720: PPUSH
18721: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18725: LD_STRING hideTroll();
18727: PPUSH
18728: CALL_OW 559
// wait ( 1 1$00 ) ;
18732: LD_INT 2100
18734: PPUSH
18735: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18739: LD_STRING displayTroll();
18741: PPUSH
18742: CALL_OW 559
// wait ( 1 1$00 ) ;
18746: LD_INT 2100
18748: PPUSH
18749: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18753: LD_STRING hideTroll();
18755: PPUSH
18756: CALL_OW 559
// end ;
18760: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18761: LD_EXP 27
18765: PUSH
18766: LD_EXP 53
18770: AND
18771: IFFALSE 18834
18773: GO 18775
18775: DISABLE
18776: LD_INT 0
18778: PPUSH
// begin p := 0 ;
18779: LD_ADDR_VAR 0 1
18783: PUSH
18784: LD_INT 0
18786: ST_TO_ADDR
// repeat game_speed := 1 ;
18787: LD_ADDR_OWVAR 65
18791: PUSH
18792: LD_INT 1
18794: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18795: LD_INT 35
18797: PPUSH
18798: CALL_OW 67
// p := p + 1 ;
18802: LD_ADDR_VAR 0 1
18806: PUSH
18807: LD_VAR 0 1
18811: PUSH
18812: LD_INT 1
18814: PLUS
18815: ST_TO_ADDR
// until p >= 60 ;
18816: LD_VAR 0 1
18820: PUSH
18821: LD_INT 60
18823: GREATEREQUAL
18824: IFFALSE 18787
// game_speed := 4 ;
18826: LD_ADDR_OWVAR 65
18830: PUSH
18831: LD_INT 4
18833: ST_TO_ADDR
// end ;
18834: PPOPN 1
18836: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18837: LD_EXP 27
18841: PUSH
18842: LD_EXP 54
18846: AND
18847: IFFALSE 18993
18849: GO 18851
18851: DISABLE
18852: LD_INT 0
18854: PPUSH
18855: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18856: LD_ADDR_VAR 0 1
18860: PUSH
18861: LD_INT 22
18863: PUSH
18864: LD_OWVAR 2
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 2
18875: PUSH
18876: LD_INT 30
18878: PUSH
18879: LD_INT 0
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 30
18888: PUSH
18889: LD_INT 1
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PPUSH
18905: CALL_OW 69
18909: ST_TO_ADDR
// if not depot then
18910: LD_VAR 0 1
18914: NOT
18915: IFFALSE 18919
// exit ;
18917: GO 18993
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18919: LD_ADDR_VAR 0 2
18923: PUSH
18924: LD_VAR 0 1
18928: PUSH
18929: LD_INT 1
18931: PPUSH
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 12
18941: ARRAY
18942: PPUSH
18943: CALL_OW 274
18947: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18948: LD_VAR 0 2
18952: PPUSH
18953: LD_INT 1
18955: PPUSH
18956: LD_INT 0
18958: PPUSH
18959: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18963: LD_VAR 0 2
18967: PPUSH
18968: LD_INT 2
18970: PPUSH
18971: LD_INT 0
18973: PPUSH
18974: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18978: LD_VAR 0 2
18982: PPUSH
18983: LD_INT 3
18985: PPUSH
18986: LD_INT 0
18988: PPUSH
18989: CALL_OW 277
// end ;
18993: PPOPN 2
18995: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18996: LD_EXP 27
19000: PUSH
19001: LD_EXP 55
19005: AND
19006: IFFALSE 19103
19008: GO 19010
19010: DISABLE
19011: LD_INT 0
19013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19014: LD_ADDR_VAR 0 1
19018: PUSH
19019: LD_INT 22
19021: PUSH
19022: LD_OWVAR 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 21
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 3
19043: PUSH
19044: LD_INT 23
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL_OW 69
19067: ST_TO_ADDR
// if not tmp then
19068: LD_VAR 0 1
19072: NOT
19073: IFFALSE 19077
// exit ;
19075: GO 19103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19077: LD_VAR 0 1
19081: PUSH
19082: LD_INT 1
19084: PPUSH
19085: LD_VAR 0 1
19089: PPUSH
19090: CALL_OW 12
19094: ARRAY
19095: PPUSH
19096: LD_INT 200
19098: PPUSH
19099: CALL_OW 234
// end ;
19103: PPOPN 1
19105: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19106: LD_EXP 27
19110: PUSH
19111: LD_EXP 56
19115: AND
19116: IFFALSE 19195
19118: GO 19120
19120: DISABLE
19121: LD_INT 0
19123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19124: LD_ADDR_VAR 0 1
19128: PUSH
19129: LD_INT 22
19131: PUSH
19132: LD_OWVAR 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 21
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PPUSH
19155: CALL_OW 69
19159: ST_TO_ADDR
// if not tmp then
19160: LD_VAR 0 1
19164: NOT
19165: IFFALSE 19169
// exit ;
19167: GO 19195
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19169: LD_VAR 0 1
19173: PUSH
19174: LD_INT 1
19176: PPUSH
19177: LD_VAR 0 1
19181: PPUSH
19182: CALL_OW 12
19186: ARRAY
19187: PPUSH
19188: LD_INT 60
19190: PPUSH
19191: CALL_OW 234
// end ;
19195: PPOPN 1
19197: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19198: LD_EXP 27
19202: PUSH
19203: LD_EXP 57
19207: AND
19208: IFFALSE 19307
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
// begin enable ;
19217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19218: LD_ADDR_VAR 0 1
19222: PUSH
19223: LD_INT 22
19225: PUSH
19226: LD_OWVAR 2
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 61
19237: PUSH
19238: EMPTY
19239: LIST
19240: PUSH
19241: LD_INT 33
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: PPUSH
19256: CALL_OW 69
19260: ST_TO_ADDR
// if not tmp then
19261: LD_VAR 0 1
19265: NOT
19266: IFFALSE 19270
// exit ;
19268: GO 19307
// for i in tmp do
19270: LD_ADDR_VAR 0 2
19274: PUSH
19275: LD_VAR 0 1
19279: PUSH
19280: FOR_IN
19281: IFFALSE 19305
// if IsControledBy ( i ) then
19283: LD_VAR 0 2
19287: PPUSH
19288: CALL_OW 312
19292: IFFALSE 19303
// ComUnlink ( i ) ;
19294: LD_VAR 0 2
19298: PPUSH
19299: CALL_OW 136
19303: GO 19280
19305: POP
19306: POP
// end ;
19307: PPOPN 2
19309: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19310: LD_EXP 27
19314: PUSH
19315: LD_EXP 58
19319: AND
19320: IFFALSE 19460
19322: GO 19324
19324: DISABLE
19325: LD_INT 0
19327: PPUSH
19328: PPUSH
// begin ToLua ( displayPowell(); ) ;
19329: LD_STRING displayPowell();
19331: PPUSH
19332: CALL_OW 559
// uc_side := 0 ;
19336: LD_ADDR_OWVAR 20
19340: PUSH
19341: LD_INT 0
19343: ST_TO_ADDR
// uc_nation := 2 ;
19344: LD_ADDR_OWVAR 21
19348: PUSH
19349: LD_INT 2
19351: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19352: LD_ADDR_OWVAR 37
19356: PUSH
19357: LD_INT 14
19359: ST_TO_ADDR
// vc_engine := engine_siberite ;
19360: LD_ADDR_OWVAR 39
19364: PUSH
19365: LD_INT 3
19367: ST_TO_ADDR
// vc_control := control_apeman ;
19368: LD_ADDR_OWVAR 38
19372: PUSH
19373: LD_INT 5
19375: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19376: LD_ADDR_OWVAR 40
19380: PUSH
19381: LD_INT 29
19383: ST_TO_ADDR
// un := CreateVehicle ;
19384: LD_ADDR_VAR 0 2
19388: PUSH
19389: CALL_OW 45
19393: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19394: LD_VAR 0 2
19398: PPUSH
19399: LD_INT 1
19401: PPUSH
19402: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19406: LD_INT 35
19408: PPUSH
19409: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19413: LD_VAR 0 2
19417: PPUSH
19418: LD_INT 22
19420: PUSH
19421: LD_OWVAR 2
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PPUSH
19430: CALL_OW 69
19434: PPUSH
19435: LD_VAR 0 2
19439: PPUSH
19440: CALL_OW 74
19444: PPUSH
19445: CALL_OW 115
// until IsDead ( un ) ;
19449: LD_VAR 0 2
19453: PPUSH
19454: CALL_OW 301
19458: IFFALSE 19406
// end ;
19460: PPOPN 2
19462: END
// every 0 0$1 trigger StreamModeActive and sStu do
19463: LD_EXP 27
19467: PUSH
19468: LD_EXP 66
19472: AND
19473: IFFALSE 19489
19475: GO 19477
19477: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19478: LD_STRING displayStucuk();
19480: PPUSH
19481: CALL_OW 559
// ResetFog ;
19485: CALL_OW 335
// end ;
19489: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19490: LD_EXP 27
19494: PUSH
19495: LD_EXP 59
19499: AND
19500: IFFALSE 19641
19502: GO 19504
19504: DISABLE
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19509: LD_ADDR_VAR 0 2
19513: PUSH
19514: LD_INT 22
19516: PUSH
19517: LD_OWVAR 2
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 21
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PPUSH
19540: CALL_OW 69
19544: ST_TO_ADDR
// if not tmp then
19545: LD_VAR 0 2
19549: NOT
19550: IFFALSE 19554
// exit ;
19552: GO 19641
// un := tmp [ rand ( 1 , tmp ) ] ;
19554: LD_ADDR_VAR 0 1
19558: PUSH
19559: LD_VAR 0 2
19563: PUSH
19564: LD_INT 1
19566: PPUSH
19567: LD_VAR 0 2
19571: PPUSH
19572: CALL_OW 12
19576: ARRAY
19577: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19578: LD_VAR 0 1
19582: PPUSH
19583: LD_INT 0
19585: PPUSH
19586: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19590: LD_VAR 0 1
19594: PPUSH
19595: LD_OWVAR 3
19599: PUSH
19600: LD_VAR 0 1
19604: DIFF
19605: PPUSH
19606: LD_VAR 0 1
19610: PPUSH
19611: CALL_OW 74
19615: PPUSH
19616: CALL_OW 115
// wait ( 0 0$20 ) ;
19620: LD_INT 700
19622: PPUSH
19623: CALL_OW 67
// SetSide ( un , your_side ) ;
19627: LD_VAR 0 1
19631: PPUSH
19632: LD_OWVAR 2
19636: PPUSH
19637: CALL_OW 235
// end ;
19641: PPOPN 2
19643: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19644: LD_EXP 27
19648: PUSH
19649: LD_EXP 60
19653: AND
19654: IFFALSE 19760
19656: GO 19658
19658: DISABLE
19659: LD_INT 0
19661: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19662: LD_ADDR_VAR 0 1
19666: PUSH
19667: LD_INT 22
19669: PUSH
19670: LD_OWVAR 2
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: LD_INT 30
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 30
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: LIST
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PPUSH
19711: CALL_OW 69
19715: ST_TO_ADDR
// if not depot then
19716: LD_VAR 0 1
19720: NOT
19721: IFFALSE 19725
// exit ;
19723: GO 19760
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19725: LD_VAR 0 1
19729: PUSH
19730: LD_INT 1
19732: ARRAY
19733: PPUSH
19734: CALL_OW 250
19738: PPUSH
19739: LD_VAR 0 1
19743: PUSH
19744: LD_INT 1
19746: ARRAY
19747: PPUSH
19748: CALL_OW 251
19752: PPUSH
19753: LD_INT 70
19755: PPUSH
19756: CALL_OW 495
// end ;
19760: PPOPN 1
19762: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19763: LD_EXP 27
19767: PUSH
19768: LD_EXP 61
19772: AND
19773: IFFALSE 19984
19775: GO 19777
19777: DISABLE
19778: LD_INT 0
19780: PPUSH
19781: PPUSH
19782: PPUSH
19783: PPUSH
19784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19785: LD_ADDR_VAR 0 5
19789: PUSH
19790: LD_INT 22
19792: PUSH
19793: LD_OWVAR 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 21
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PPUSH
19816: CALL_OW 69
19820: ST_TO_ADDR
// if not tmp then
19821: LD_VAR 0 5
19825: NOT
19826: IFFALSE 19830
// exit ;
19828: GO 19984
// for i in tmp do
19830: LD_ADDR_VAR 0 1
19834: PUSH
19835: LD_VAR 0 5
19839: PUSH
19840: FOR_IN
19841: IFFALSE 19982
// begin d := rand ( 0 , 5 ) ;
19843: LD_ADDR_VAR 0 4
19847: PUSH
19848: LD_INT 0
19850: PPUSH
19851: LD_INT 5
19853: PPUSH
19854: CALL_OW 12
19858: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19859: LD_ADDR_VAR 0 2
19863: PUSH
19864: LD_VAR 0 1
19868: PPUSH
19869: CALL_OW 250
19873: PPUSH
19874: LD_VAR 0 4
19878: PPUSH
19879: LD_INT 3
19881: PPUSH
19882: LD_INT 12
19884: PPUSH
19885: CALL_OW 12
19889: PPUSH
19890: CALL_OW 272
19894: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19895: LD_ADDR_VAR 0 3
19899: PUSH
19900: LD_VAR 0 1
19904: PPUSH
19905: CALL_OW 251
19909: PPUSH
19910: LD_VAR 0 4
19914: PPUSH
19915: LD_INT 3
19917: PPUSH
19918: LD_INT 12
19920: PPUSH
19921: CALL_OW 12
19925: PPUSH
19926: CALL_OW 273
19930: ST_TO_ADDR
// if ValidHex ( x , y ) then
19931: LD_VAR 0 2
19935: PPUSH
19936: LD_VAR 0 3
19940: PPUSH
19941: CALL_OW 488
19945: IFFALSE 19980
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19947: LD_VAR 0 1
19951: PPUSH
19952: LD_VAR 0 2
19956: PPUSH
19957: LD_VAR 0 3
19961: PPUSH
19962: LD_INT 3
19964: PPUSH
19965: LD_INT 6
19967: PPUSH
19968: CALL_OW 12
19972: PPUSH
19973: LD_INT 1
19975: PPUSH
19976: CALL_OW 483
// end ;
19980: GO 19840
19982: POP
19983: POP
// end ;
19984: PPOPN 5
19986: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19987: LD_EXP 27
19991: PUSH
19992: LD_EXP 62
19996: AND
19997: IFFALSE 20091
19999: GO 20001
20001: DISABLE
20002: LD_INT 0
20004: PPUSH
20005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20006: LD_ADDR_VAR 0 2
20010: PUSH
20011: LD_INT 22
20013: PUSH
20014: LD_OWVAR 2
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 32
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 21
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: PPUSH
20048: CALL_OW 69
20052: ST_TO_ADDR
// if not tmp then
20053: LD_VAR 0 2
20057: NOT
20058: IFFALSE 20062
// exit ;
20060: GO 20091
// for i in tmp do
20062: LD_ADDR_VAR 0 1
20066: PUSH
20067: LD_VAR 0 2
20071: PUSH
20072: FOR_IN
20073: IFFALSE 20089
// SetFuel ( i , 0 ) ;
20075: LD_VAR 0 1
20079: PPUSH
20080: LD_INT 0
20082: PPUSH
20083: CALL_OW 240
20087: GO 20072
20089: POP
20090: POP
// end ;
20091: PPOPN 2
20093: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20094: LD_EXP 27
20098: PUSH
20099: LD_EXP 63
20103: AND
20104: IFFALSE 20170
20106: GO 20108
20108: DISABLE
20109: LD_INT 0
20111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20112: LD_ADDR_VAR 0 1
20116: PUSH
20117: LD_INT 22
20119: PUSH
20120: LD_OWVAR 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 30
20131: PUSH
20132: LD_INT 29
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PPUSH
20143: CALL_OW 69
20147: ST_TO_ADDR
// if not tmp then
20148: LD_VAR 0 1
20152: NOT
20153: IFFALSE 20157
// exit ;
20155: GO 20170
// DestroyUnit ( tmp [ 1 ] ) ;
20157: LD_VAR 0 1
20161: PUSH
20162: LD_INT 1
20164: ARRAY
20165: PPUSH
20166: CALL_OW 65
// end ;
20170: PPOPN 1
20172: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20173: LD_EXP 27
20177: PUSH
20178: LD_EXP 65
20182: AND
20183: IFFALSE 20312
20185: GO 20187
20187: DISABLE
20188: LD_INT 0
20190: PPUSH
// begin uc_side := 0 ;
20191: LD_ADDR_OWVAR 20
20195: PUSH
20196: LD_INT 0
20198: ST_TO_ADDR
// uc_nation := nation_arabian ;
20199: LD_ADDR_OWVAR 21
20203: PUSH
20204: LD_INT 2
20206: ST_TO_ADDR
// hc_gallery :=  ;
20207: LD_ADDR_OWVAR 33
20211: PUSH
20212: LD_STRING 
20214: ST_TO_ADDR
// hc_name :=  ;
20215: LD_ADDR_OWVAR 26
20219: PUSH
20220: LD_STRING 
20222: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20223: LD_INT 1
20225: PPUSH
20226: LD_INT 11
20228: PPUSH
20229: LD_INT 10
20231: PPUSH
20232: CALL_OW 380
// un := CreateHuman ;
20236: LD_ADDR_VAR 0 1
20240: PUSH
20241: CALL_OW 44
20245: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20246: LD_VAR 0 1
20250: PPUSH
20251: LD_INT 1
20253: PPUSH
20254: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20258: LD_INT 35
20260: PPUSH
20261: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20265: LD_VAR 0 1
20269: PPUSH
20270: LD_INT 22
20272: PUSH
20273: LD_OWVAR 2
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PPUSH
20282: CALL_OW 69
20286: PPUSH
20287: LD_VAR 0 1
20291: PPUSH
20292: CALL_OW 74
20296: PPUSH
20297: CALL_OW 115
// until IsDead ( un ) ;
20301: LD_VAR 0 1
20305: PPUSH
20306: CALL_OW 301
20310: IFFALSE 20258
// end ;
20312: PPOPN 1
20314: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20315: LD_EXP 27
20319: PUSH
20320: LD_EXP 67
20324: AND
20325: IFFALSE 20337
20327: GO 20329
20329: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20330: LD_STRING earthquake(getX(game), 0, 32)
20332: PPUSH
20333: CALL_OW 559
20337: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20338: LD_EXP 27
20342: PUSH
20343: LD_EXP 68
20347: AND
20348: IFFALSE 20439
20350: GO 20352
20352: DISABLE
20353: LD_INT 0
20355: PPUSH
// begin enable ;
20356: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20357: LD_ADDR_VAR 0 1
20361: PUSH
20362: LD_INT 22
20364: PUSH
20365: LD_OWVAR 2
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 21
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 33
20386: PUSH
20387: LD_INT 3
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: LIST
20398: PPUSH
20399: CALL_OW 69
20403: ST_TO_ADDR
// if not tmp then
20404: LD_VAR 0 1
20408: NOT
20409: IFFALSE 20413
// exit ;
20411: GO 20439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20413: LD_VAR 0 1
20417: PUSH
20418: LD_INT 1
20420: PPUSH
20421: LD_VAR 0 1
20425: PPUSH
20426: CALL_OW 12
20430: ARRAY
20431: PPUSH
20432: LD_INT 1
20434: PPUSH
20435: CALL_OW 234
// end ;
20439: PPOPN 1
20441: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20442: LD_EXP 27
20446: PUSH
20447: LD_EXP 69
20451: AND
20452: IFFALSE 20593
20454: GO 20456
20456: DISABLE
20457: LD_INT 0
20459: PPUSH
20460: PPUSH
20461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20462: LD_ADDR_VAR 0 3
20466: PUSH
20467: LD_INT 22
20469: PUSH
20470: LD_OWVAR 2
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 25
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PPUSH
20493: CALL_OW 69
20497: ST_TO_ADDR
// if not tmp then
20498: LD_VAR 0 3
20502: NOT
20503: IFFALSE 20507
// exit ;
20505: GO 20593
// un := tmp [ rand ( 1 , tmp ) ] ;
20507: LD_ADDR_VAR 0 2
20511: PUSH
20512: LD_VAR 0 3
20516: PUSH
20517: LD_INT 1
20519: PPUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: CALL_OW 12
20529: ARRAY
20530: ST_TO_ADDR
// if Crawls ( un ) then
20531: LD_VAR 0 2
20535: PPUSH
20536: CALL_OW 318
20540: IFFALSE 20551
// ComWalk ( un ) ;
20542: LD_VAR 0 2
20546: PPUSH
20547: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20551: LD_VAR 0 2
20555: PPUSH
20556: LD_INT 9
20558: PPUSH
20559: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20563: LD_INT 28
20565: PPUSH
20566: LD_OWVAR 2
20570: PPUSH
20571: LD_INT 2
20573: PPUSH
20574: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20578: LD_INT 29
20580: PPUSH
20581: LD_OWVAR 2
20585: PPUSH
20586: LD_INT 2
20588: PPUSH
20589: CALL_OW 322
// end ;
20593: PPOPN 3
20595: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20596: LD_EXP 27
20600: PUSH
20601: LD_EXP 70
20605: AND
20606: IFFALSE 20717
20608: GO 20610
20610: DISABLE
20611: LD_INT 0
20613: PPUSH
20614: PPUSH
20615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20616: LD_ADDR_VAR 0 3
20620: PUSH
20621: LD_INT 22
20623: PUSH
20624: LD_OWVAR 2
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 25
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PPUSH
20647: CALL_OW 69
20651: ST_TO_ADDR
// if not tmp then
20652: LD_VAR 0 3
20656: NOT
20657: IFFALSE 20661
// exit ;
20659: GO 20717
// un := tmp [ rand ( 1 , tmp ) ] ;
20661: LD_ADDR_VAR 0 2
20665: PUSH
20666: LD_VAR 0 3
20670: PUSH
20671: LD_INT 1
20673: PPUSH
20674: LD_VAR 0 3
20678: PPUSH
20679: CALL_OW 12
20683: ARRAY
20684: ST_TO_ADDR
// if Crawls ( un ) then
20685: LD_VAR 0 2
20689: PPUSH
20690: CALL_OW 318
20694: IFFALSE 20705
// ComWalk ( un ) ;
20696: LD_VAR 0 2
20700: PPUSH
20701: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20705: LD_VAR 0 2
20709: PPUSH
20710: LD_INT 8
20712: PPUSH
20713: CALL_OW 336
// end ;
20717: PPOPN 3
20719: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20720: LD_EXP 27
20724: PUSH
20725: LD_EXP 71
20729: AND
20730: IFFALSE 20874
20732: GO 20734
20734: DISABLE
20735: LD_INT 0
20737: PPUSH
20738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20739: LD_ADDR_VAR 0 2
20743: PUSH
20744: LD_INT 22
20746: PUSH
20747: LD_OWVAR 2
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 21
20758: PUSH
20759: LD_INT 2
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: LD_INT 34
20771: PUSH
20772: LD_INT 12
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 34
20781: PUSH
20782: LD_INT 51
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 34
20791: PUSH
20792: LD_INT 32
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: PPUSH
20810: CALL_OW 69
20814: ST_TO_ADDR
// if not tmp then
20815: LD_VAR 0 2
20819: NOT
20820: IFFALSE 20824
// exit ;
20822: GO 20874
// for i in tmp do
20824: LD_ADDR_VAR 0 1
20828: PUSH
20829: LD_VAR 0 2
20833: PUSH
20834: FOR_IN
20835: IFFALSE 20872
// if GetCargo ( i , mat_artifact ) = 0 then
20837: LD_VAR 0 1
20841: PPUSH
20842: LD_INT 4
20844: PPUSH
20845: CALL_OW 289
20849: PUSH
20850: LD_INT 0
20852: EQUAL
20853: IFFALSE 20870
// SetCargo ( i , mat_siberit , 100 ) ;
20855: LD_VAR 0 1
20859: PPUSH
20860: LD_INT 3
20862: PPUSH
20863: LD_INT 100
20865: PPUSH
20866: CALL_OW 290
20870: GO 20834
20872: POP
20873: POP
// end ;
20874: PPOPN 2
20876: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20877: LD_EXP 27
20881: PUSH
20882: LD_EXP 72
20886: AND
20887: IFFALSE 21040
20889: GO 20891
20891: DISABLE
20892: LD_INT 0
20894: PPUSH
20895: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20896: LD_ADDR_VAR 0 2
20900: PUSH
20901: LD_INT 22
20903: PUSH
20904: LD_OWVAR 2
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PPUSH
20913: CALL_OW 69
20917: ST_TO_ADDR
// if not tmp then
20918: LD_VAR 0 2
20922: NOT
20923: IFFALSE 20927
// exit ;
20925: GO 21040
// for i := 1 to 2 do
20927: LD_ADDR_VAR 0 1
20931: PUSH
20932: DOUBLE
20933: LD_INT 1
20935: DEC
20936: ST_TO_ADDR
20937: LD_INT 2
20939: PUSH
20940: FOR_TO
20941: IFFALSE 21038
// begin uc_side := your_side ;
20943: LD_ADDR_OWVAR 20
20947: PUSH
20948: LD_OWVAR 2
20952: ST_TO_ADDR
// uc_nation := nation_american ;
20953: LD_ADDR_OWVAR 21
20957: PUSH
20958: LD_INT 1
20960: ST_TO_ADDR
// vc_chassis := us_morphling ;
20961: LD_ADDR_OWVAR 37
20965: PUSH
20966: LD_INT 5
20968: ST_TO_ADDR
// vc_engine := engine_siberite ;
20969: LD_ADDR_OWVAR 39
20973: PUSH
20974: LD_INT 3
20976: ST_TO_ADDR
// vc_control := control_computer ;
20977: LD_ADDR_OWVAR 38
20981: PUSH
20982: LD_INT 3
20984: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20985: LD_ADDR_OWVAR 40
20989: PUSH
20990: LD_INT 10
20992: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
20993: CALL_OW 45
20997: PPUSH
20998: LD_VAR 0 2
21002: PUSH
21003: LD_INT 1
21005: ARRAY
21006: PPUSH
21007: CALL_OW 250
21011: PPUSH
21012: LD_VAR 0 2
21016: PUSH
21017: LD_INT 1
21019: ARRAY
21020: PPUSH
21021: CALL_OW 251
21025: PPUSH
21026: LD_INT 12
21028: PPUSH
21029: LD_INT 1
21031: PPUSH
21032: CALL_OW 50
// end ;
21036: GO 20940
21038: POP
21039: POP
// end ;
21040: PPOPN 2
21042: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21043: LD_EXP 27
21047: PUSH
21048: LD_EXP 73
21052: AND
21053: IFFALSE 21275
21055: GO 21057
21057: DISABLE
21058: LD_INT 0
21060: PPUSH
21061: PPUSH
21062: PPUSH
21063: PPUSH
21064: PPUSH
21065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21066: LD_ADDR_VAR 0 6
21070: PUSH
21071: LD_INT 22
21073: PUSH
21074: LD_OWVAR 2
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 21
21085: PUSH
21086: LD_INT 1
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 3
21095: PUSH
21096: LD_INT 23
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: LIST
21114: PPUSH
21115: CALL_OW 69
21119: ST_TO_ADDR
// if not tmp then
21120: LD_VAR 0 6
21124: NOT
21125: IFFALSE 21129
// exit ;
21127: GO 21275
// s1 := rand ( 1 , 4 ) ;
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_INT 1
21136: PPUSH
21137: LD_INT 4
21139: PPUSH
21140: CALL_OW 12
21144: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21145: LD_ADDR_VAR 0 4
21149: PUSH
21150: LD_VAR 0 6
21154: PUSH
21155: LD_INT 1
21157: ARRAY
21158: PPUSH
21159: LD_VAR 0 2
21163: PPUSH
21164: CALL_OW 259
21168: ST_TO_ADDR
// if s1 = 1 then
21169: LD_VAR 0 2
21173: PUSH
21174: LD_INT 1
21176: EQUAL
21177: IFFALSE 21197
// s2 := rand ( 2 , 4 ) else
21179: LD_ADDR_VAR 0 3
21183: PUSH
21184: LD_INT 2
21186: PPUSH
21187: LD_INT 4
21189: PPUSH
21190: CALL_OW 12
21194: ST_TO_ADDR
21195: GO 21205
// s2 := 1 ;
21197: LD_ADDR_VAR 0 3
21201: PUSH
21202: LD_INT 1
21204: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21205: LD_ADDR_VAR 0 5
21209: PUSH
21210: LD_VAR 0 6
21214: PUSH
21215: LD_INT 1
21217: ARRAY
21218: PPUSH
21219: LD_VAR 0 3
21223: PPUSH
21224: CALL_OW 259
21228: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21229: LD_VAR 0 6
21233: PUSH
21234: LD_INT 1
21236: ARRAY
21237: PPUSH
21238: LD_VAR 0 2
21242: PPUSH
21243: LD_VAR 0 5
21247: PPUSH
21248: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21252: LD_VAR 0 6
21256: PUSH
21257: LD_INT 1
21259: ARRAY
21260: PPUSH
21261: LD_VAR 0 3
21265: PPUSH
21266: LD_VAR 0 4
21270: PPUSH
21271: CALL_OW 237
// end ;
21275: PPOPN 6
21277: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21278: LD_EXP 27
21282: PUSH
21283: LD_EXP 74
21287: AND
21288: IFFALSE 21367
21290: GO 21292
21292: DISABLE
21293: LD_INT 0
21295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21296: LD_ADDR_VAR 0 1
21300: PUSH
21301: LD_INT 22
21303: PUSH
21304: LD_OWVAR 2
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 30
21315: PUSH
21316: LD_INT 3
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PPUSH
21327: CALL_OW 69
21331: ST_TO_ADDR
// if not tmp then
21332: LD_VAR 0 1
21336: NOT
21337: IFFALSE 21341
// exit ;
21339: GO 21367
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21341: LD_VAR 0 1
21345: PUSH
21346: LD_INT 1
21348: PPUSH
21349: LD_VAR 0 1
21353: PPUSH
21354: CALL_OW 12
21358: ARRAY
21359: PPUSH
21360: LD_INT 1
21362: PPUSH
21363: CALL_OW 234
// end ;
21367: PPOPN 1
21369: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21370: LD_EXP 27
21374: PUSH
21375: LD_EXP 75
21379: AND
21380: IFFALSE 21492
21382: GO 21384
21384: DISABLE
21385: LD_INT 0
21387: PPUSH
21388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21389: LD_ADDR_VAR 0 2
21393: PUSH
21394: LD_INT 22
21396: PUSH
21397: LD_OWVAR 2
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 2
21408: PUSH
21409: LD_INT 30
21411: PUSH
21412: LD_INT 27
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 30
21421: PUSH
21422: LD_INT 26
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 30
21431: PUSH
21432: LD_INT 28
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PPUSH
21449: CALL_OW 69
21453: ST_TO_ADDR
// if not tmp then
21454: LD_VAR 0 2
21458: NOT
21459: IFFALSE 21463
// exit ;
21461: GO 21492
// for i in tmp do
21463: LD_ADDR_VAR 0 1
21467: PUSH
21468: LD_VAR 0 2
21472: PUSH
21473: FOR_IN
21474: IFFALSE 21490
// SetLives ( i , 1 ) ;
21476: LD_VAR 0 1
21480: PPUSH
21481: LD_INT 1
21483: PPUSH
21484: CALL_OW 234
21488: GO 21473
21490: POP
21491: POP
// end ;
21492: PPOPN 2
21494: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21495: LD_EXP 27
21499: PUSH
21500: LD_EXP 76
21504: AND
21505: IFFALSE 21779
21507: GO 21509
21509: DISABLE
21510: LD_INT 0
21512: PPUSH
21513: PPUSH
21514: PPUSH
// begin i := rand ( 1 , 7 ) ;
21515: LD_ADDR_VAR 0 1
21519: PUSH
21520: LD_INT 1
21522: PPUSH
21523: LD_INT 7
21525: PPUSH
21526: CALL_OW 12
21530: ST_TO_ADDR
// case i of 1 :
21531: LD_VAR 0 1
21535: PUSH
21536: LD_INT 1
21538: DOUBLE
21539: EQUAL
21540: IFTRUE 21544
21542: GO 21554
21544: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21545: LD_STRING earthquake(getX(game), 0, 32)
21547: PPUSH
21548: CALL_OW 559
21552: GO 21779
21554: LD_INT 2
21556: DOUBLE
21557: EQUAL
21558: IFTRUE 21562
21560: GO 21576
21562: POP
// begin ToLua ( displayStucuk(); ) ;
21563: LD_STRING displayStucuk();
21565: PPUSH
21566: CALL_OW 559
// ResetFog ;
21570: CALL_OW 335
// end ; 3 :
21574: GO 21779
21576: LD_INT 3
21578: DOUBLE
21579: EQUAL
21580: IFTRUE 21584
21582: GO 21688
21584: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21585: LD_ADDR_VAR 0 2
21589: PUSH
21590: LD_INT 22
21592: PUSH
21593: LD_OWVAR 2
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 25
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PPUSH
21616: CALL_OW 69
21620: ST_TO_ADDR
// if not tmp then
21621: LD_VAR 0 2
21625: NOT
21626: IFFALSE 21630
// exit ;
21628: GO 21779
// un := tmp [ rand ( 1 , tmp ) ] ;
21630: LD_ADDR_VAR 0 3
21634: PUSH
21635: LD_VAR 0 2
21639: PUSH
21640: LD_INT 1
21642: PPUSH
21643: LD_VAR 0 2
21647: PPUSH
21648: CALL_OW 12
21652: ARRAY
21653: ST_TO_ADDR
// if Crawls ( un ) then
21654: LD_VAR 0 3
21658: PPUSH
21659: CALL_OW 318
21663: IFFALSE 21674
// ComWalk ( un ) ;
21665: LD_VAR 0 3
21669: PPUSH
21670: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21674: LD_VAR 0 3
21678: PPUSH
21679: LD_INT 8
21681: PPUSH
21682: CALL_OW 336
// end ; 4 :
21686: GO 21779
21688: LD_INT 4
21690: DOUBLE
21691: EQUAL
21692: IFTRUE 21696
21694: GO 21757
21696: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_INT 22
21704: PUSH
21705: LD_OWVAR 2
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 30
21716: PUSH
21717: LD_INT 29
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PPUSH
21728: CALL_OW 69
21732: ST_TO_ADDR
// if not tmp then
21733: LD_VAR 0 2
21737: NOT
21738: IFFALSE 21742
// exit ;
21740: GO 21779
// DestroyUnit ( tmp [ 1 ] ) ;
21742: LD_VAR 0 2
21746: PUSH
21747: LD_INT 1
21749: ARRAY
21750: PPUSH
21751: CALL_OW 65
// end ; 5 .. 7 :
21755: GO 21779
21757: LD_INT 5
21759: DOUBLE
21760: GREATEREQUAL
21761: IFFALSE 21769
21763: LD_INT 7
21765: DOUBLE
21766: LESSEQUAL
21767: IFTRUE 21771
21769: GO 21778
21771: POP
// StreamSibBomb ; end ;
21772: CALL 18059 0 0
21776: GO 21779
21778: POP
// end ;
21779: PPOPN 3
21781: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21782: LD_EXP 27
21786: PUSH
21787: LD_EXP 77
21791: AND
21792: IFFALSE 21948
21794: GO 21796
21796: DISABLE
21797: LD_INT 0
21799: PPUSH
21800: PPUSH
21801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21802: LD_ADDR_VAR 0 2
21806: PUSH
21807: LD_INT 81
21809: PUSH
21810: LD_OWVAR 2
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 2
21821: PUSH
21822: LD_INT 21
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 21
21834: PUSH
21835: LD_INT 2
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PPUSH
21851: CALL_OW 69
21855: ST_TO_ADDR
// if not tmp then
21856: LD_VAR 0 2
21860: NOT
21861: IFFALSE 21865
// exit ;
21863: GO 21948
// p := 0 ;
21865: LD_ADDR_VAR 0 3
21869: PUSH
21870: LD_INT 0
21872: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21873: LD_INT 35
21875: PPUSH
21876: CALL_OW 67
// p := p + 1 ;
21880: LD_ADDR_VAR 0 3
21884: PUSH
21885: LD_VAR 0 3
21889: PUSH
21890: LD_INT 1
21892: PLUS
21893: ST_TO_ADDR
// for i in tmp do
21894: LD_ADDR_VAR 0 1
21898: PUSH
21899: LD_VAR 0 2
21903: PUSH
21904: FOR_IN
21905: IFFALSE 21936
// if GetLives ( i ) < 1000 then
21907: LD_VAR 0 1
21911: PPUSH
21912: CALL_OW 256
21916: PUSH
21917: LD_INT 1000
21919: LESS
21920: IFFALSE 21934
// SetLives ( i , 1000 ) ;
21922: LD_VAR 0 1
21926: PPUSH
21927: LD_INT 1000
21929: PPUSH
21930: CALL_OW 234
21934: GO 21904
21936: POP
21937: POP
// until p > 20 ;
21938: LD_VAR 0 3
21942: PUSH
21943: LD_INT 20
21945: GREATER
21946: IFFALSE 21873
// end ;
21948: PPOPN 3
21950: END
// every 0 0$1 trigger StreamModeActive and sTime do
21951: LD_EXP 27
21955: PUSH
21956: LD_EXP 78
21960: AND
21961: IFFALSE 21996
21963: GO 21965
21965: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21966: LD_INT 28
21968: PPUSH
21969: LD_OWVAR 2
21973: PPUSH
21974: LD_INT 2
21976: PPUSH
21977: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21981: LD_INT 30
21983: PPUSH
21984: LD_OWVAR 2
21988: PPUSH
21989: LD_INT 2
21991: PPUSH
21992: CALL_OW 322
// end ;
21996: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21997: LD_EXP 27
22001: PUSH
22002: LD_EXP 79
22006: AND
22007: IFFALSE 22128
22009: GO 22011
22011: DISABLE
22012: LD_INT 0
22014: PPUSH
22015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22016: LD_ADDR_VAR 0 2
22020: PUSH
22021: LD_INT 22
22023: PUSH
22024: LD_OWVAR 2
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 21
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 3
22045: PUSH
22046: LD_INT 23
22048: PUSH
22049: LD_INT 0
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: PPUSH
22065: CALL_OW 69
22069: ST_TO_ADDR
// if not tmp then
22070: LD_VAR 0 2
22074: NOT
22075: IFFALSE 22079
// exit ;
22077: GO 22128
// for i in tmp do
22079: LD_ADDR_VAR 0 1
22083: PUSH
22084: LD_VAR 0 2
22088: PUSH
22089: FOR_IN
22090: IFFALSE 22126
// begin if Crawls ( i ) then
22092: LD_VAR 0 1
22096: PPUSH
22097: CALL_OW 318
22101: IFFALSE 22112
// ComWalk ( i ) ;
22103: LD_VAR 0 1
22107: PPUSH
22108: CALL_OW 138
// SetClass ( i , 2 ) ;
22112: LD_VAR 0 1
22116: PPUSH
22117: LD_INT 2
22119: PPUSH
22120: CALL_OW 336
// end ;
22124: GO 22089
22126: POP
22127: POP
// end ;
22128: PPOPN 2
22130: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22131: LD_EXP 27
22135: PUSH
22136: LD_EXP 80
22140: AND
22141: IFFALSE 22422
22143: GO 22145
22145: DISABLE
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
22150: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22151: LD_OWVAR 2
22155: PPUSH
22156: LD_INT 9
22158: PPUSH
22159: LD_INT 1
22161: PPUSH
22162: LD_INT 1
22164: PPUSH
22165: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22169: LD_INT 9
22171: PPUSH
22172: LD_OWVAR 2
22176: PPUSH
22177: CALL_OW 343
// uc_side := 9 ;
22181: LD_ADDR_OWVAR 20
22185: PUSH
22186: LD_INT 9
22188: ST_TO_ADDR
// uc_nation := 2 ;
22189: LD_ADDR_OWVAR 21
22193: PUSH
22194: LD_INT 2
22196: ST_TO_ADDR
// hc_name := Dark Warrior ;
22197: LD_ADDR_OWVAR 26
22201: PUSH
22202: LD_STRING Dark Warrior
22204: ST_TO_ADDR
// hc_gallery :=  ;
22205: LD_ADDR_OWVAR 33
22209: PUSH
22210: LD_STRING 
22212: ST_TO_ADDR
// hc_noskilllimit := true ;
22213: LD_ADDR_OWVAR 76
22217: PUSH
22218: LD_INT 1
22220: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22221: LD_ADDR_OWVAR 31
22225: PUSH
22226: LD_INT 30
22228: PUSH
22229: LD_INT 30
22231: PUSH
22232: LD_INT 30
22234: PUSH
22235: LD_INT 30
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: ST_TO_ADDR
// un := CreateHuman ;
22244: LD_ADDR_VAR 0 3
22248: PUSH
22249: CALL_OW 44
22253: ST_TO_ADDR
// hc_noskilllimit := false ;
22254: LD_ADDR_OWVAR 76
22258: PUSH
22259: LD_INT 0
22261: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22262: LD_VAR 0 3
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 51
// p := 0 ;
22274: LD_ADDR_VAR 0 2
22278: PUSH
22279: LD_INT 0
22281: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22282: LD_INT 35
22284: PPUSH
22285: CALL_OW 67
// p := p + 1 ;
22289: LD_ADDR_VAR 0 2
22293: PUSH
22294: LD_VAR 0 2
22298: PUSH
22299: LD_INT 1
22301: PLUS
22302: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22303: LD_VAR 0 3
22307: PPUSH
22308: CALL_OW 256
22312: PUSH
22313: LD_INT 1000
22315: LESS
22316: IFFALSE 22330
// SetLives ( un , 1000 ) ;
22318: LD_VAR 0 3
22322: PPUSH
22323: LD_INT 1000
22325: PPUSH
22326: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22330: LD_VAR 0 3
22334: PPUSH
22335: LD_INT 81
22337: PUSH
22338: LD_OWVAR 2
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 91
22349: PUSH
22350: LD_VAR 0 3
22354: PUSH
22355: LD_INT 30
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PPUSH
22367: CALL_OW 69
22371: PPUSH
22372: LD_VAR 0 3
22376: PPUSH
22377: CALL_OW 74
22381: PPUSH
22382: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22386: LD_VAR 0 2
22390: PUSH
22391: LD_INT 60
22393: GREATER
22394: PUSH
22395: LD_VAR 0 3
22399: PPUSH
22400: CALL_OW 301
22404: OR
22405: IFFALSE 22282
// if un then
22407: LD_VAR 0 3
22411: IFFALSE 22422
// RemoveUnit ( un ) ;
22413: LD_VAR 0 3
22417: PPUSH
22418: CALL_OW 64
// end ; end_of_file
22422: PPOPN 3
22424: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22425: LD_INT 0
22427: PPUSH
22428: PPUSH
22429: PPUSH
22430: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22431: LD_VAR 0 1
22435: PPUSH
22436: CALL_OW 264
22440: PUSH
22441: LD_EXP 18
22445: EQUAL
22446: IFFALSE 22518
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22448: LD_INT 68
22450: PPUSH
22451: LD_VAR 0 1
22455: PPUSH
22456: CALL_OW 255
22460: PPUSH
22461: CALL_OW 321
22465: PUSH
22466: LD_INT 2
22468: EQUAL
22469: IFFALSE 22481
// eff := 70 else
22471: LD_ADDR_VAR 0 4
22475: PUSH
22476: LD_INT 70
22478: ST_TO_ADDR
22479: GO 22489
// eff := 30 ;
22481: LD_ADDR_VAR 0 4
22485: PUSH
22486: LD_INT 30
22488: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 250
22498: PPUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 251
22508: PPUSH
22509: LD_VAR 0 4
22513: PPUSH
22514: CALL_OW 495
// end ; end ;
22518: LD_VAR 0 2
22522: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22523: LD_INT 0
22525: PPUSH
// end ;
22526: LD_VAR 0 4
22530: RET
// export function SOS_Command ( cmd ) ; begin
22531: LD_INT 0
22533: PPUSH
// end ;
22534: LD_VAR 0 2
22538: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22539: LD_VAR 0 1
22543: PUSH
22544: LD_INT 255
22546: EQUAL
22547: PUSH
22548: LD_VAR 0 2
22552: PPUSH
22553: CALL_OW 264
22557: PUSH
22558: LD_INT 14
22560: PUSH
22561: LD_INT 53
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: IN
22568: AND
22569: PUSH
22570: LD_VAR 0 4
22574: PPUSH
22575: LD_VAR 0 5
22579: PPUSH
22580: CALL_OW 488
22584: AND
22585: IFFALSE 22609
// CutTreeXYR ( unit , x , y , 12 ) ;
22587: LD_VAR 0 2
22591: PPUSH
22592: LD_VAR 0 4
22596: PPUSH
22597: LD_VAR 0 5
22601: PPUSH
22602: LD_INT 12
22604: PPUSH
22605: CALL 22612 0 4
// end ;
22609: PPOPN 5
22611: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22612: LD_INT 0
22614: PPUSH
22615: PPUSH
22616: PPUSH
22617: PPUSH
22618: PPUSH
22619: PPUSH
22620: PPUSH
22621: PPUSH
22622: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22623: LD_VAR 0 1
22627: NOT
22628: PUSH
22629: LD_VAR 0 2
22633: PPUSH
22634: LD_VAR 0 3
22638: PPUSH
22639: CALL_OW 488
22643: NOT
22644: OR
22645: PUSH
22646: LD_VAR 0 4
22650: NOT
22651: OR
22652: IFFALSE 22656
// exit ;
22654: GO 22996
// list := [ ] ;
22656: LD_ADDR_VAR 0 13
22660: PUSH
22661: EMPTY
22662: ST_TO_ADDR
// if x - r < 0 then
22663: LD_VAR 0 2
22667: PUSH
22668: LD_VAR 0 4
22672: MINUS
22673: PUSH
22674: LD_INT 0
22676: LESS
22677: IFFALSE 22689
// min_x := 0 else
22679: LD_ADDR_VAR 0 7
22683: PUSH
22684: LD_INT 0
22686: ST_TO_ADDR
22687: GO 22705
// min_x := x - r ;
22689: LD_ADDR_VAR 0 7
22693: PUSH
22694: LD_VAR 0 2
22698: PUSH
22699: LD_VAR 0 4
22703: MINUS
22704: ST_TO_ADDR
// if y - r < 0 then
22705: LD_VAR 0 3
22709: PUSH
22710: LD_VAR 0 4
22714: MINUS
22715: PUSH
22716: LD_INT 0
22718: LESS
22719: IFFALSE 22731
// min_y := 0 else
22721: LD_ADDR_VAR 0 8
22725: PUSH
22726: LD_INT 0
22728: ST_TO_ADDR
22729: GO 22747
// min_y := y - r ;
22731: LD_ADDR_VAR 0 8
22735: PUSH
22736: LD_VAR 0 3
22740: PUSH
22741: LD_VAR 0 4
22745: MINUS
22746: ST_TO_ADDR
// max_x := x + r ;
22747: LD_ADDR_VAR 0 9
22751: PUSH
22752: LD_VAR 0 2
22756: PUSH
22757: LD_VAR 0 4
22761: PLUS
22762: ST_TO_ADDR
// max_y := y + r ;
22763: LD_ADDR_VAR 0 10
22767: PUSH
22768: LD_VAR 0 3
22772: PUSH
22773: LD_VAR 0 4
22777: PLUS
22778: ST_TO_ADDR
// for _x = min_x to max_x do
22779: LD_ADDR_VAR 0 11
22783: PUSH
22784: DOUBLE
22785: LD_VAR 0 7
22789: DEC
22790: ST_TO_ADDR
22791: LD_VAR 0 9
22795: PUSH
22796: FOR_TO
22797: IFFALSE 22914
// for _y = min_y to max_y do
22799: LD_ADDR_VAR 0 12
22803: PUSH
22804: DOUBLE
22805: LD_VAR 0 8
22809: DEC
22810: ST_TO_ADDR
22811: LD_VAR 0 10
22815: PUSH
22816: FOR_TO
22817: IFFALSE 22910
// begin if not ValidHex ( _x , _y ) then
22819: LD_VAR 0 11
22823: PPUSH
22824: LD_VAR 0 12
22828: PPUSH
22829: CALL_OW 488
22833: NOT
22834: IFFALSE 22838
// continue ;
22836: GO 22816
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22838: LD_VAR 0 11
22842: PPUSH
22843: LD_VAR 0 12
22847: PPUSH
22848: CALL_OW 351
22852: PUSH
22853: LD_VAR 0 11
22857: PPUSH
22858: LD_VAR 0 12
22862: PPUSH
22863: CALL_OW 554
22867: AND
22868: IFFALSE 22908
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22870: LD_ADDR_VAR 0 13
22874: PUSH
22875: LD_VAR 0 13
22879: PPUSH
22880: LD_VAR 0 13
22884: PUSH
22885: LD_INT 1
22887: PLUS
22888: PPUSH
22889: LD_VAR 0 11
22893: PUSH
22894: LD_VAR 0 12
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PPUSH
22903: CALL_OW 2
22907: ST_TO_ADDR
// end ;
22908: GO 22816
22910: POP
22911: POP
22912: GO 22796
22914: POP
22915: POP
// if not list then
22916: LD_VAR 0 13
22920: NOT
22921: IFFALSE 22925
// exit ;
22923: GO 22996
// for i in list do
22925: LD_ADDR_VAR 0 6
22929: PUSH
22930: LD_VAR 0 13
22934: PUSH
22935: FOR_IN
22936: IFFALSE 22994
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22938: LD_VAR 0 1
22942: PPUSH
22943: LD_STRING M
22945: PUSH
22946: LD_VAR 0 6
22950: PUSH
22951: LD_INT 1
22953: ARRAY
22954: PUSH
22955: LD_VAR 0 6
22959: PUSH
22960: LD_INT 2
22962: ARRAY
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: LD_INT 0
22969: PUSH
22970: LD_INT 0
22972: PUSH
22973: LD_INT 0
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: PPUSH
22988: CALL_OW 447
22992: GO 22935
22994: POP
22995: POP
// end ;
22996: LD_VAR 0 5
23000: RET
