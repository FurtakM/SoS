// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9175 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// game_started := false ;
2667: LD_ADDR_EXP 7
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// points := 0 ;
2675: LD_ADDR_EXP 2
2679: PUSH
2680: LD_INT 0
2682: ST_TO_ADDR
// waveNumber := 0 ;
2683: LD_ADDR_EXP 5
2687: PUSH
2688: LD_INT 0
2690: ST_TO_ADDR
// timeToNextAttack := 0 ;
2691: LD_ADDR_EXP 4
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// graveyard := [ ] ;
2699: LD_ADDR_EXP 8
2703: PUSH
2704: EMPTY
2705: ST_TO_ADDR
// base_x := 1 ;
2706: LD_ADDR_EXP 9
2710: PUSH
2711: LD_INT 1
2713: ST_TO_ADDR
// base_y := 1 ;
2714: LD_ADDR_EXP 10
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// if difficultyLevel > 2 then
2722: LD_EXP 3
2726: PUSH
2727: LD_INT 2
2729: GREATER
2730: IFFALSE 2745
// SetTech ( 5 , 7 , state_researched ) ;
2732: LD_INT 5
2734: PPUSH
2735: LD_INT 7
2737: PPUSH
2738: LD_INT 2
2740: PPUSH
2741: CALL_OW 322
// if not playerNation then
2745: LD_EXP 6
2749: NOT
2750: IFFALSE 2776
// begin points := 100 ;
2752: LD_ADDR_EXP 2
2756: PUSH
2757: LD_INT 100
2759: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2760: LD_ADDR_EXP 6
2764: PUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_INT 3
2770: PPUSH
2771: CALL_OW 12
2775: ST_TO_ADDR
// end ; your_side := playerNation ;
2776: LD_ADDR_OWVAR 2
2780: PUSH
2781: LD_EXP 6
2785: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2786: LD_OWVAR 2
2790: PPUSH
2791: LD_INT 4
2793: PPUSH
2794: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2798: LD_INT 25
2800: PUSH
2801: LD_INT 20
2803: PUSH
2804: LD_INT 15
2806: PUSH
2807: LD_INT 10
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: PUSH
2816: LD_EXP 3
2820: ARRAY
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 2
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PPUSH
2875: LD_INT 1
2877: PUSH
2878: LD_INT 2
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_INT 88
2891: PPUSH
2892: LD_INT 76
2894: PPUSH
2895: LD_INT 6
2897: PPUSH
2898: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2902: LD_EXP 6
2906: PPUSH
2907: LD_INT 9
2909: PUSH
2910: LD_INT 7
2912: PUSH
2913: LD_INT 5
2915: PUSH
2916: LD_INT 3
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_EXP 3
2929: ARRAY
2930: PPUSH
2931: LD_INT 24
2933: PUSH
2934: LD_INT 16
2936: PUSH
2937: LD_INT 12
2939: PUSH
2940: LD_INT 8
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 88
2957: PPUSH
2958: LD_INT 76
2960: PPUSH
2961: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2965: LD_INT 88
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2975: LD_INT 90
2977: PPUSH
2978: LD_INT 79
2980: PPUSH
2981: LD_OWVAR 2
2985: PPUSH
2986: LD_INT 50
2988: NEG
2989: PPUSH
2990: CALL_OW 330
// if debug then
2994: LD_EXP 1
2998: IFFALSE 3009
// FogOff ( your_side ) ;
3000: LD_OWVAR 2
3004: PPUSH
3005: CALL_OW 344
// end ;
3009: LD_VAR 0 1
3013: RET
// every 0 0$01 trigger game_started do var i ;
3014: LD_EXP 7
3018: IFFALSE 3252
3020: GO 3022
3022: DISABLE
3023: LD_INT 0
3025: PPUSH
// begin while ( game_started ) do
3026: LD_EXP 7
3030: IFFALSE 3252
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3032: LD_INT 22
3034: PUSH
3035: LD_INT 7
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: PUSH
3047: LD_INT 5
3049: LESS
3050: PUSH
3051: LD_EXP 4
3055: PUSH
3056: LD_INT 0
3058: LESSEQUAL
3059: AND
3060: IFFALSE 3243
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3062: LD_INT 22
3064: PUSH
3065: LD_INT 4
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: IFFALSE 3114
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3078: LD_ADDR_VAR 0 1
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_INT 4
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PPUSH
3093: CALL_OW 69
3097: PUSH
3098: FOR_IN
3099: IFFALSE 3112
// RemoveUnit ( i ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 64
3110: GO 3098
3112: POP
3113: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3114: LD_EXP 5
3118: PUSH
3119: LD_INT 3
3121: MOD
3122: PUSH
3123: LD_INT 0
3125: EQUAL
3126: PUSH
3127: LD_EXP 5
3131: PUSH
3132: LD_INT 10
3134: MOD
3135: PUSH
3136: LD_INT 0
3138: EQUAL
3139: OR
3140: PUSH
3141: LD_EXP 5
3145: PUSH
3146: LD_INT 0
3148: GREATER
3149: AND
3150: IFFALSE 3156
// InitBonus ;
3152: CALL 9272 0 0
// if waveNumber mod 10 = 0 then
3156: LD_EXP 5
3160: PUSH
3161: LD_INT 10
3163: MOD
3164: PUSH
3165: LD_INT 0
3167: EQUAL
3168: IFFALSE 3174
// SaveForQuickRestart ;
3170: CALL_OW 22
// if waveNumber = 100 then
3174: LD_EXP 5
3178: PUSH
3179: LD_INT 100
3181: EQUAL
3182: IFFALSE 3195
// begin FogOff ( your_side ) ;
3184: LD_OWVAR 2
3188: PPUSH
3189: CALL_OW 344
// break ;
3193: GO 3252
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3195: LD_ADDR_EXP 4
3199: PUSH
3200: LD_INT 3150
3202: PPUSH
3203: LD_INT 5250
3205: PPUSH
3206: CALL_OW 12
3210: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3211: LD_EXP 4
3215: PPUSH
3216: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3220: LD_ADDR_EXP 5
3224: PUSH
3225: LD_EXP 5
3229: PUSH
3230: LD_INT 1
3232: PLUS
3233: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3234: LD_EXP 5
3238: PPUSH
3239: CALL 4273 0 1
// end ; Wait ( 0 0$01 ) ;
3243: LD_INT 35
3245: PPUSH
3246: CALL_OW 67
// end ;
3250: GO 3026
// end ;
3252: PPOPN 1
3254: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3255: LD_EXP 4
3259: PUSH
3260: LD_INT 0
3262: GREATER
3263: IFFALSE 3283
3265: GO 3267
3267: DISABLE
// begin enable ;
3268: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3269: LD_ADDR_EXP 4
3273: PUSH
3274: LD_EXP 4
3278: PUSH
3279: LD_INT 35
3281: MINUS
3282: ST_TO_ADDR
// end ; end_of_file
3283: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3284: LD_VAR 0 1
3288: PUSH
3289: LD_EXP 13
3293: IN
3294: NOT
3295: IFFALSE 3326
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3297: LD_ADDR_EXP 13
3301: PUSH
3302: LD_EXP 13
3306: PPUSH
3307: LD_EXP 13
3311: PUSH
3312: LD_INT 1
3314: PLUS
3315: PPUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 2
3325: ST_TO_ADDR
// end ;
3326: PPOPN 1
3328: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 26747 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 255
3347: PUSH
3348: LD_OWVAR 2
3352: EQUAL
3353: PUSH
3354: LD_VAR 0 1
3358: PPUSH
3359: CALL_OW 247
3363: PUSH
3364: LD_INT 1
3366: EQUAL
3367: AND
3368: IFFALSE 3399
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3370: LD_ADDR_EXP 8
3374: PUSH
3375: LD_EXP 8
3379: PPUSH
3380: LD_EXP 8
3384: PUSH
3385: LD_INT 1
3387: PLUS
3388: PPUSH
3389: LD_VAR 0 1
3393: PPUSH
3394: CALL_OW 2
3398: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3399: LD_VAR 0 1
3403: PPUSH
3404: CALL_OW 255
3408: PUSH
3409: LD_INT 7
3411: EQUAL
3412: IFFALSE 3786
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3414: LD_VAR 0 1
3418: PUSH
3419: LD_INT 34
3421: PUSH
3422: LD_INT 91
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: PPUSH
3429: CALL_OW 69
3433: IN
3434: IFFALSE 3479
// begin if Rand ( 1 , 100 ) <= 70 then
3436: LD_INT 1
3438: PPUSH
3439: LD_INT 100
3441: PPUSH
3442: CALL_OW 12
3446: PUSH
3447: LD_INT 70
3449: LESSEQUAL
3450: IFFALSE 3479
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: CALL_OW 250
3461: PPUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 251
3471: PPUSH
3472: LD_INT 10
3474: PPUSH
3475: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3479: LD_VAR 0 1
3483: PPUSH
3484: CALL_OW 247
3488: PUSH
3489: LD_INT 1
3491: DOUBLE
3492: EQUAL
3493: IFTRUE 3497
3495: GO 3631
3497: POP
// begin case GetClass ( un ) of class_apeman :
3498: LD_VAR 0 1
3502: PPUSH
3503: CALL_OW 257
3507: PUSH
3508: LD_INT 12
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3526
3516: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3517: LD_INT 2
3519: PPUSH
3520: CALL 471 0 1
3524: GO 3629
3526: LD_INT 15
3528: DOUBLE
3529: EQUAL
3530: IFTRUE 3534
3532: GO 3544
3534: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3535: LD_INT 5
3537: PPUSH
3538: CALL 471 0 1
3542: GO 3629
3544: LD_INT 17
3546: DOUBLE
3547: EQUAL
3548: IFTRUE 3552
3550: GO 3562
3552: POP
// AddPoints ( 30 ) ; class_soldier :
3553: LD_INT 30
3555: PPUSH
3556: CALL 471 0 1
3560: GO 3629
3562: LD_INT 1
3564: DOUBLE
3565: EQUAL
3566: IFTRUE 3570
3568: GO 3580
3570: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3571: LD_INT 50
3573: PPUSH
3574: CALL 471 0 1
3578: GO 3629
3580: LD_INT 9
3582: DOUBLE
3583: EQUAL
3584: IFTRUE 3600
3586: LD_INT 5
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3600
3592: LD_INT 8
3594: DOUBLE
3595: EQUAL
3596: IFTRUE 3600
3598: GO 3610
3600: POP
// AddPoints ( 75 ) ; class_mechanic :
3601: LD_INT 75
3603: PPUSH
3604: CALL 471 0 1
3608: GO 3629
3610: LD_INT 3
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3618
3616: GO 3628
3618: POP
// AddPoints ( 60 ) ; end ;
3619: LD_INT 60
3621: PPUSH
3622: CALL 471 0 1
3626: GO 3629
3628: POP
// end ; unit_vehicle :
3629: GO 3786
3631: LD_INT 2
3633: DOUBLE
3634: EQUAL
3635: IFTRUE 3639
3637: GO 3785
3639: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 265
3649: PUSH
3650: LD_INT 12
3652: DOUBLE
3653: EQUAL
3654: IFTRUE 3670
3656: LD_INT 1
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3670
3662: LD_INT 11
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3680
3670: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3671: LD_INT 100
3673: PPUSH
3674: CALL 471 0 1
3678: GO 3783
3680: LD_INT 13
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3718
3686: LD_INT 14
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3718
3692: LD_INT 2
3694: DOUBLE
3695: EQUAL
3696: IFTRUE 3718
3698: LD_INT 3
3700: DOUBLE
3701: EQUAL
3702: IFTRUE 3718
3704: LD_INT 21
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3718
3710: LD_INT 22
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3718
3716: GO 3728
3718: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3719: LD_INT 250
3721: PPUSH
3722: CALL 471 0 1
3726: GO 3783
3728: LD_INT 4
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3754
3734: LD_INT 5
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3754
3740: LD_INT 23
3742: DOUBLE
3743: EQUAL
3744: IFTRUE 3754
3746: LD_INT 24
3748: DOUBLE
3749: EQUAL
3750: IFTRUE 3754
3752: GO 3764
3754: POP
// AddPoints ( 500 ) ; 25 :
3755: LD_INT 500
3757: PPUSH
3758: CALL 471 0 1
3762: GO 3783
3764: LD_INT 25
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3782
3772: POP
// AddPoints ( 1250 ) ; end ;
3773: LD_INT 1250
3775: PPUSH
3776: CALL 471 0 1
3780: GO 3783
3782: POP
// end ; end ;
3783: GO 3786
3785: POP
// end ; end ;
3786: PPOPN 1
3788: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3789: LD_VAR 0 1
3793: PPUSH
3794: CALL_OW 266
3798: PUSH
3799: LD_INT 0
3801: EQUAL
3802: IFFALSE 3852
// begin base_x := GetX ( b ) ;
3804: LD_ADDR_EXP 9
3808: PUSH
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 250
3818: ST_TO_ADDR
// base_y := GetY ( b ) ;
3819: LD_ADDR_EXP 10
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 251
3833: ST_TO_ADDR
// base := b ;
3834: LD_ADDR_EXP 11
3838: PUSH
3839: LD_VAR 0 1
3843: ST_TO_ADDR
// game_started := true ;
3844: LD_ADDR_EXP 7
3848: PUSH
3849: LD_INT 1
3851: ST_TO_ADDR
// end ; end ;
3852: PPOPN 1
3854: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3855: LD_VAR 0 1
3859: PPUSH
3860: CALL_OW 255
3864: PUSH
3865: LD_OWVAR 2
3869: EQUAL
3870: IFFALSE 3874
// exit ;
3872: GO 4021
// if GetType ( un ) = unit_vehicle then
3874: LD_VAR 0 1
3878: PPUSH
3879: CALL_OW 247
3883: PUSH
3884: LD_INT 2
3886: EQUAL
3887: IFFALSE 3940
// begin KillUnit ( un ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 248
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: PUSH
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 264
3921: PUSH
3922: LD_INT 49
3924: PUSH
3925: EMPTY
3926: LIST
3927: IN
3928: OR
3929: IFFALSE 3940
// ExplodeVehicle ( un ) ;
3931: LD_VAR 0 1
3935: PPUSH
3936: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3940: LD_VAR 0 1
3944: PPUSH
3945: CALL_OW 247
3949: PUSH
3950: LD_INT 1
3952: EQUAL
3953: IFFALSE 4021
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 248
3964: PUSH
3965: LD_INT 2
3967: EQUAL
3968: PUSH
3969: LD_INT 5
3971: PPUSH
3972: LD_INT 7
3974: PPUSH
3975: CALL_OW 321
3979: PUSH
3980: LD_INT 2
3982: NONEQUAL
3983: AND
3984: PUSH
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 248
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: IN
4009: OR
4010: IFFALSE 4021
// KillUnit ( un ) ;
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 66
// end ; end ;
4021: PPOPN 1
4023: END
// every 0 0$1 do
4024: GO 4026
4026: DISABLE
// begin enable ;
4027: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4028: LD_INT 4
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 22
4036: PUSH
4037: LD_OWVAR 2
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 513
// end ;
4050: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4051: LD_EXP 7
4055: PUSH
4056: LD_INT 22
4058: PUSH
4059: LD_OWVAR 2
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: LD_INT 1
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PPUSH
4082: CALL_OW 69
4086: PUSH
4087: LD_INT 0
4089: EQUAL
4090: AND
4091: IFFALSE 4103
4093: GO 4095
4095: DISABLE
// YouLost ( die ) ;
4096: LD_STRING die
4098: PPUSH
4099: CALL_OW 104
4103: END
// every 0 0$21 trigger tick <= 15 15$00 do
4104: LD_OWVAR 1
4108: PUSH
4109: LD_INT 31500
4111: LESSEQUAL
4112: IFFALSE 4139
4114: GO 4116
4116: DISABLE
// begin enable ;
4117: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4118: LD_INT 1
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: CALL_OW 12
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: CALL_OW 55
// end ;
4139: END
// every 0 0$51 trigger tick > 15 15$00 do
4140: LD_OWVAR 1
4144: PUSH
4145: LD_INT 31500
4147: GREATER
4148: IFFALSE 4195
4150: GO 4152
4152: DISABLE
// begin enable ;
4153: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4154: LD_INT 22
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 69
4168: PUSH
4169: LD_INT 0
4171: EQUAL
4172: IFFALSE 4195
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4174: LD_INT 1
4176: PPUSH
4177: LD_INT 5
4179: PPUSH
4180: CALL_OW 12
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: LD_INT 1
4190: PPUSH
4191: CALL_OW 55
// end ;
4195: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 308
4208: IFFALSE 4219
// KillUnit ( building ) ;
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 66
// end ;
4219: PPOPN 2
4221: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_VAR 0 2
4231: PPUSH
4232: LD_VAR 0 3
4236: PPUSH
4237: CALL 26843 0 3
// end ;
4241: PPOPN 3
4243: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_VAR 0 2
4253: PPUSH
4254: CALL 26867 0 2
// end ;
4258: PPOPN 2
4260: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4261: LD_VAR 0 1
4265: PPUSH
4266: CALL 26851 0 1
// end ; end_of_file
4270: PPOPN 1
4272: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
4279: PPUSH
4280: PPUSH
4281: PPUSH
4282: PPUSH
4283: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4284: LD_ADDR_VAR 0 7
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: LD_INT 2
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: ST_TO_ADDR
// uc_side := 7 ;
4299: LD_ADDR_OWVAR 20
4303: PUSH
4304: LD_INT 7
4306: ST_TO_ADDR
// l := 0 ;
4307: LD_ADDR_VAR 0 9
4311: PUSH
4312: LD_INT 0
4314: ST_TO_ADDR
// case num of 1 :
4315: LD_VAR 0 1
4319: PUSH
4320: LD_INT 1
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4347
4328: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: LD_INT 12
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: CALL 6676 0 2
4344: ST_TO_ADDR
4345: GO 6485
4347: LD_INT 2
4349: DOUBLE
4350: EQUAL
4351: IFTRUE 4355
4353: GO 4374
4355: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 12
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL 6747 0 2
4371: ST_TO_ADDR
4372: GO 6485
4374: LD_INT 3
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4401
4382: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: LD_INT 12
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: CALL 6818 0 2
4398: ST_TO_ADDR
4399: GO 6485
4401: LD_INT 4
4403: DOUBLE
4404: EQUAL
4405: IFTRUE 4409
4407: GO 4428
4409: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4410: LD_ADDR_VAR 0 2
4414: PUSH
4415: LD_INT 7
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL 6897 0 2
4425: ST_TO_ADDR
4426: GO 6485
4428: LD_INT 5
4430: DOUBLE
4431: EQUAL
4432: IFTRUE 4436
4434: GO 4455
4436: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: LD_INT 7
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: CALL 7293 0 2
4452: ST_TO_ADDR
4453: GO 6485
4455: LD_INT 6
4457: DOUBLE
4458: EQUAL
4459: IFTRUE 4463
4461: GO 4482
4463: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: LD_INT 6
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL 7713 0 2
4479: ST_TO_ADDR
4480: GO 6485
4482: LD_INT 7
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4509
4490: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 15
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL 8133 0 2
4506: ST_TO_ADDR
4507: GO 6485
4509: LD_INT 8
4511: DOUBLE
4512: EQUAL
4513: IFTRUE 4517
4515: GO 4536
4517: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 7
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: CALL 8234 0 2
4533: ST_TO_ADDR
4534: GO 6485
4536: LD_INT 9
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4575
4544: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: LD_INT 4
4552: PPUSH
4553: LD_INT 1
4555: PPUSH
4556: CALL 8234 0 2
4560: PUSH
4561: LD_INT 7
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: CALL 7293 0 2
4571: ADD
4572: ST_TO_ADDR
4573: GO 6485
4575: LD_INT 10
4577: DOUBLE
4578: EQUAL
4579: IFTRUE 4583
4581: GO 4614
4583: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4584: LD_ADDR_VAR 0 2
4588: PUSH
4589: LD_INT 9
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: CALL 8133 0 2
4599: PUSH
4600: LD_INT 14
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL 6818 0 2
4610: ADD
4611: ST_TO_ADDR
4612: GO 6485
4614: LD_INT 11
4616: DOUBLE
4617: EQUAL
4618: IFTRUE 4670
4620: LD_INT 21
4622: DOUBLE
4623: EQUAL
4624: IFTRUE 4670
4626: LD_INT 31
4628: DOUBLE
4629: EQUAL
4630: IFTRUE 4670
4632: LD_INT 41
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4670
4638: LD_INT 51
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4670
4644: LD_INT 61
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4670
4650: LD_INT 71
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4670
4656: LD_INT 81
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4670
4662: LD_INT 91
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4779
4670: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_INT 20
4678: PUSH
4679: LD_INT 30
4681: PUSH
4682: LD_INT 40
4684: PUSH
4685: LD_INT 45
4687: PUSH
4688: LD_INT 50
4690: PUSH
4691: LD_INT 60
4693: PUSH
4694: LD_INT 70
4696: PUSH
4697: LD_INT 80
4699: PUSH
4700: LD_INT 100
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: PUSH
4714: LD_VAR 0 1
4718: PUSH
4719: LD_INT 10
4721: DIV
4722: ARRAY
4723: PPUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: LD_INT 6
4738: PUSH
4739: LD_INT 7
4741: PUSH
4742: LD_INT 8
4744: PUSH
4745: LD_INT 9
4747: PUSH
4748: LD_INT 10
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: LD_INT 10
4769: DIV
4770: ARRAY
4771: PPUSH
4772: CALL 6676 0 2
4776: ST_TO_ADDR
4777: GO 6485
4779: LD_INT 12
4781: DOUBLE
4782: EQUAL
4783: IFTRUE 4835
4785: LD_INT 22
4787: DOUBLE
4788: EQUAL
4789: IFTRUE 4835
4791: LD_INT 32
4793: DOUBLE
4794: EQUAL
4795: IFTRUE 4835
4797: LD_INT 42
4799: DOUBLE
4800: EQUAL
4801: IFTRUE 4835
4803: LD_INT 52
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4835
4809: LD_INT 62
4811: DOUBLE
4812: EQUAL
4813: IFTRUE 4835
4815: LD_INT 72
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4835
4821: LD_INT 82
4823: DOUBLE
4824: EQUAL
4825: IFTRUE 4835
4827: LD_INT 92
4829: DOUBLE
4830: EQUAL
4831: IFTRUE 4835
4833: GO 4944
4835: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: LD_INT 16
4843: PUSH
4844: LD_INT 21
4846: PUSH
4847: LD_INT 28
4849: PUSH
4850: LD_INT 33
4852: PUSH
4853: LD_INT 39
4855: PUSH
4856: LD_INT 46
4858: PUSH
4859: LD_INT 56
4861: PUSH
4862: LD_INT 66
4864: PUSH
4865: LD_INT 80
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_VAR 0 1
4883: PUSH
4884: LD_INT 10
4886: DIV
4887: ARRAY
4888: PPUSH
4889: LD_INT 2
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: LD_INT 5
4900: PUSH
4901: LD_INT 6
4903: PUSH
4904: LD_INT 7
4906: PUSH
4907: LD_INT 8
4909: PUSH
4910: LD_INT 9
4912: PUSH
4913: LD_INT 10
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_VAR 0 1
4931: PUSH
4932: LD_INT 10
4934: DIV
4935: ARRAY
4936: PPUSH
4937: CALL 6747 0 2
4941: ST_TO_ADDR
4942: GO 6485
4944: LD_INT 13
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 5000
4950: LD_INT 23
4952: DOUBLE
4953: EQUAL
4954: IFTRUE 5000
4956: LD_INT 33
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 5000
4962: LD_INT 43
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 5000
4968: LD_INT 53
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 5000
4974: LD_INT 63
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 5000
4980: LD_INT 73
4982: DOUBLE
4983: EQUAL
4984: IFTRUE 5000
4986: LD_INT 83
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 5000
4992: LD_INT 93
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5109
5000: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: LD_INT 14
5008: PUSH
5009: LD_INT 18
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 27
5017: PUSH
5018: LD_INT 33
5020: PUSH
5021: LD_INT 39
5023: PUSH
5024: LD_INT 44
5026: PUSH
5027: LD_INT 57
5029: PUSH
5030: LD_INT 65
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: LD_VAR 0 1
5048: PUSH
5049: LD_INT 10
5051: DIV
5052: ARRAY
5053: PPUSH
5054: LD_INT 2
5056: PUSH
5057: LD_INT 3
5059: PUSH
5060: LD_INT 4
5062: PUSH
5063: LD_INT 5
5065: PUSH
5066: LD_INT 6
5068: PUSH
5069: LD_INT 7
5071: PUSH
5072: LD_INT 8
5074: PUSH
5075: LD_INT 9
5077: PUSH
5078: LD_INT 10
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_VAR 0 1
5096: PUSH
5097: LD_INT 10
5099: DIV
5100: ARRAY
5101: PPUSH
5102: CALL 6818 0 2
5106: ST_TO_ADDR
5107: GO 6485
5109: LD_INT 14
5111: DOUBLE
5112: EQUAL
5113: IFTRUE 5165
5115: LD_INT 24
5117: DOUBLE
5118: EQUAL
5119: IFTRUE 5165
5121: LD_INT 34
5123: DOUBLE
5124: EQUAL
5125: IFTRUE 5165
5127: LD_INT 44
5129: DOUBLE
5130: EQUAL
5131: IFTRUE 5165
5133: LD_INT 54
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5165
5139: LD_INT 64
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5165
5145: LD_INT 74
5147: DOUBLE
5148: EQUAL
5149: IFTRUE 5165
5151: LD_INT 84
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5165
5157: LD_INT 94
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5274
5165: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5166: LD_ADDR_VAR 0 2
5170: PUSH
5171: LD_INT 9
5173: PUSH
5174: LD_INT 15
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 30
5182: PUSH
5183: LD_INT 39
5185: PUSH
5186: LD_INT 45
5188: PUSH
5189: LD_INT 56
5191: PUSH
5192: LD_INT 60
5194: PUSH
5195: LD_INT 65
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_VAR 0 1
5213: PUSH
5214: LD_INT 10
5216: DIV
5217: ARRAY
5218: PPUSH
5219: LD_INT 2
5221: PUSH
5222: LD_INT 3
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 6
5233: PUSH
5234: LD_INT 7
5236: PUSH
5237: LD_INT 8
5239: PUSH
5240: LD_INT 9
5242: PUSH
5243: LD_INT 10
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: LD_VAR 0 1
5261: PUSH
5262: LD_INT 10
5264: DIV
5265: ARRAY
5266: PPUSH
5267: CALL 6897 0 2
5271: ST_TO_ADDR
5272: GO 6485
5274: LD_INT 15
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5330
5280: LD_INT 25
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5330
5286: LD_INT 35
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5330
5292: LD_INT 45
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5330
5298: LD_INT 55
5300: DOUBLE
5301: EQUAL
5302: IFTRUE 5330
5304: LD_INT 65
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5330
5310: LD_INT 75
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5330
5316: LD_INT 85
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5330
5322: LD_INT 95
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5439
5330: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: LD_INT 6
5338: PUSH
5339: LD_INT 11
5341: PUSH
5342: LD_INT 15
5344: PUSH
5345: LD_INT 20
5347: PUSH
5348: LD_INT 25
5350: PUSH
5351: LD_INT 30
5353: PUSH
5354: LD_INT 35
5356: PUSH
5357: LD_INT 40
5359: PUSH
5360: LD_INT 45
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 10
5381: DIV
5382: ARRAY
5383: PPUSH
5384: LD_INT 2
5386: PUSH
5387: LD_INT 3
5389: PUSH
5390: LD_INT 4
5392: PUSH
5393: LD_INT 5
5395: PUSH
5396: LD_INT 6
5398: PUSH
5399: LD_INT 7
5401: PUSH
5402: LD_INT 8
5404: PUSH
5405: LD_INT 9
5407: PUSH
5408: LD_INT 10
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_VAR 0 1
5426: PUSH
5427: LD_INT 10
5429: DIV
5430: ARRAY
5431: PPUSH
5432: CALL 7293 0 2
5436: ST_TO_ADDR
5437: GO 6485
5439: LD_INT 16
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5495
5445: LD_INT 26
5447: DOUBLE
5448: EQUAL
5449: IFTRUE 5495
5451: LD_INT 36
5453: DOUBLE
5454: EQUAL
5455: IFTRUE 5495
5457: LD_INT 46
5459: DOUBLE
5460: EQUAL
5461: IFTRUE 5495
5463: LD_INT 56
5465: DOUBLE
5466: EQUAL
5467: IFTRUE 5495
5469: LD_INT 66
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5495
5475: LD_INT 76
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5495
5481: LD_INT 86
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5495
5487: LD_INT 96
5489: DOUBLE
5490: EQUAL
5491: IFTRUE 5495
5493: GO 5604
5495: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_INT 9
5503: PUSH
5504: LD_INT 12
5506: PUSH
5507: LD_INT 15
5509: PUSH
5510: LD_INT 18
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: LD_INT 27
5521: PUSH
5522: LD_INT 30
5524: PUSH
5525: LD_INT 33
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: LD_VAR 0 1
5543: PUSH
5544: LD_INT 10
5546: DIV
5547: ARRAY
5548: PPUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 5
5560: PUSH
5561: LD_INT 6
5563: PUSH
5564: LD_INT 7
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: LD_INT 10
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: PUSH
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 10
5594: DIV
5595: ARRAY
5596: PPUSH
5597: CALL 7713 0 2
5601: ST_TO_ADDR
5602: GO 6485
5604: LD_INT 17
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5660
5610: LD_INT 27
5612: DOUBLE
5613: EQUAL
5614: IFTRUE 5660
5616: LD_INT 37
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5660
5622: LD_INT 47
5624: DOUBLE
5625: EQUAL
5626: IFTRUE 5660
5628: LD_INT 57
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5660
5634: LD_INT 67
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5660
5640: LD_INT 77
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5660
5646: LD_INT 87
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5660
5652: LD_INT 97
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5660
5658: GO 5769
5660: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5661: LD_ADDR_VAR 0 2
5665: PUSH
5666: LD_INT 14
5668: PUSH
5669: LD_INT 16
5671: PUSH
5672: LD_INT 18
5674: PUSH
5675: LD_INT 22
5677: PUSH
5678: LD_INT 24
5680: PUSH
5681: LD_INT 26
5683: PUSH
5684: LD_INT 28
5686: PUSH
5687: LD_INT 32
5689: PUSH
5690: LD_INT 35
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 10
5711: DIV
5712: ARRAY
5713: PPUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 4
5722: PUSH
5723: LD_INT 5
5725: PUSH
5726: LD_INT 6
5728: PUSH
5729: LD_INT 7
5731: PUSH
5732: LD_INT 8
5734: PUSH
5735: LD_INT 9
5737: PUSH
5738: LD_INT 10
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_VAR 0 1
5756: PUSH
5757: LD_INT 10
5759: DIV
5760: ARRAY
5761: PPUSH
5762: CALL 8133 0 2
5766: ST_TO_ADDR
5767: GO 6485
5769: LD_INT 18
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5825
5775: LD_INT 28
5777: DOUBLE
5778: EQUAL
5779: IFTRUE 5825
5781: LD_INT 38
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5825
5787: LD_INT 48
5789: DOUBLE
5790: EQUAL
5791: IFTRUE 5825
5793: LD_INT 58
5795: DOUBLE
5796: EQUAL
5797: IFTRUE 5825
5799: LD_INT 68
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5825
5805: LD_INT 78
5807: DOUBLE
5808: EQUAL
5809: IFTRUE 5825
5811: LD_INT 88
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5825
5817: LD_INT 98
5819: DOUBLE
5820: EQUAL
5821: IFTRUE 5825
5823: GO 5934
5825: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: LD_INT 9
5833: PUSH
5834: LD_INT 12
5836: PUSH
5837: LD_INT 15
5839: PUSH
5840: LD_INT 18
5842: PUSH
5843: LD_INT 21
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: LD_INT 27
5851: PUSH
5852: LD_INT 30
5854: PUSH
5855: LD_INT 33
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: LD_VAR 0 1
5873: PUSH
5874: LD_INT 10
5876: DIV
5877: ARRAY
5878: PPUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: LD_INT 7
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: LD_INT 9
5902: PUSH
5903: LD_INT 10
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_VAR 0 1
5921: PUSH
5922: LD_INT 10
5924: DIV
5925: ARRAY
5926: PPUSH
5927: CALL 8234 0 2
5931: ST_TO_ADDR
5932: GO 6485
5934: LD_INT 19
5936: DOUBLE
5937: EQUAL
5938: IFTRUE 5990
5940: LD_INT 29
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5990
5946: LD_INT 39
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5990
5952: LD_INT 49
5954: DOUBLE
5955: EQUAL
5956: IFTRUE 5990
5958: LD_INT 59
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5990
5964: LD_INT 69
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5990
5970: LD_INT 79
5972: DOUBLE
5973: EQUAL
5974: IFTRUE 5990
5976: LD_INT 89
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5990
5982: LD_INT 99
5984: DOUBLE
5985: EQUAL
5986: IFTRUE 5990
5988: GO 6201
5990: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5991: LD_ADDR_VAR 0 2
5995: PUSH
5996: LD_INT 4
5998: PUSH
5999: LD_INT 7
6001: PUSH
6002: LD_INT 10
6004: PUSH
6005: LD_INT 13
6007: PUSH
6008: LD_INT 14
6010: PUSH
6011: LD_INT 17
6013: PUSH
6014: LD_INT 19
6016: PUSH
6017: LD_INT 21
6019: PUSH
6020: LD_INT 23
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: LD_INT 10
6041: DIV
6042: ARRAY
6043: PPUSH
6044: LD_INT 2
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: LD_INT 4
6052: PUSH
6053: LD_INT 5
6055: PUSH
6056: LD_INT 6
6058: PUSH
6059: LD_INT 7
6061: PUSH
6062: LD_INT 8
6064: PUSH
6065: LD_INT 9
6067: PUSH
6068: LD_INT 10
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: PUSH
6082: LD_VAR 0 1
6086: PUSH
6087: LD_INT 10
6089: DIV
6090: ARRAY
6091: PPUSH
6092: CALL 8234 0 2
6096: PUSH
6097: LD_INT 4
6099: PUSH
6100: LD_INT 7
6102: PUSH
6103: LD_INT 10
6105: PUSH
6106: LD_INT 13
6108: PUSH
6109: LD_INT 14
6111: PUSH
6112: LD_INT 17
6114: PUSH
6115: LD_INT 19
6117: PUSH
6118: LD_INT 22
6120: PUSH
6121: LD_INT 25
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_VAR 0 1
6139: PUSH
6140: LD_INT 10
6142: DIV
6143: ARRAY
6144: PPUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: LD_INT 6
6159: PUSH
6160: LD_INT 7
6162: PUSH
6163: LD_INT 8
6165: PUSH
6166: LD_INT 9
6168: PUSH
6169: LD_INT 10
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_VAR 0 1
6187: PUSH
6188: LD_INT 10
6190: DIV
6191: ARRAY
6192: PPUSH
6193: CALL 7293 0 2
6197: ADD
6198: ST_TO_ADDR
6199: GO 6485
6201: LD_INT 20
6203: DOUBLE
6204: EQUAL
6205: IFTRUE 6257
6207: LD_INT 30
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6257
6213: LD_INT 40
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6257
6219: LD_INT 50
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6257
6225: LD_INT 60
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6257
6231: LD_INT 70
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6257
6237: LD_INT 80
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6257
6243: LD_INT 90
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6257
6249: LD_INT 100
6251: DOUBLE
6252: EQUAL
6253: IFTRUE 6257
6255: GO 6484
6257: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6258: LD_ADDR_VAR 0 2
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 7
6268: PUSH
6269: LD_INT 10
6271: PUSH
6272: LD_INT 13
6274: PUSH
6275: LD_INT 14
6277: PUSH
6278: LD_INT 17
6280: PUSH
6281: LD_INT 19
6283: PUSH
6284: LD_INT 21
6286: PUSH
6287: LD_INT 23
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 10
6308: DIVREAL
6309: PUSH
6310: LD_INT 1
6312: MINUS
6313: ARRAY
6314: PPUSH
6315: LD_INT 2
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: LD_INT 7
6332: PUSH
6333: LD_INT 8
6335: PUSH
6336: LD_INT 9
6338: PUSH
6339: LD_INT 10
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 10
6360: DIVREAL
6361: PUSH
6362: LD_INT 1
6364: MINUS
6365: ARRAY
6366: PPUSH
6367: CALL 8133 0 2
6371: PUSH
6372: LD_INT 4
6374: PUSH
6375: LD_INT 7
6377: PUSH
6378: LD_INT 10
6380: PUSH
6381: LD_INT 13
6383: PUSH
6384: LD_INT 14
6386: PUSH
6387: LD_INT 17
6389: PUSH
6390: LD_INT 19
6392: PUSH
6393: LD_INT 22
6395: PUSH
6396: LD_INT 25
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 10
6417: DIVREAL
6418: PUSH
6419: LD_INT 1
6421: MINUS
6422: ARRAY
6423: PPUSH
6424: LD_INT 2
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: LD_INT 6
6438: PUSH
6439: LD_INT 7
6441: PUSH
6442: LD_INT 8
6444: PUSH
6445: LD_INT 9
6447: PUSH
6448: LD_INT 10
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: LD_VAR 0 1
6466: PUSH
6467: LD_INT 10
6469: DIVREAL
6470: PUSH
6471: LD_INT 1
6473: MINUS
6474: ARRAY
6475: PPUSH
6476: CALL 7713 0 2
6480: ADD
6481: ST_TO_ADDR
6482: GO 6485
6484: POP
// for i in result do
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: LD_VAR 0 2
6494: PUSH
6495: FOR_IN
6496: IFFALSE 6669
// begin a := rand ( 1 , 2 ) ;
6498: LD_ADDR_VAR 0 8
6502: PUSH
6503: LD_INT 1
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: CALL_OW 12
6513: ST_TO_ADDR
// if a = 1 then
6514: LD_VAR 0 8
6518: PUSH
6519: LD_INT 1
6521: EQUAL
6522: IFFALSE 6538
// SetDir ( i , 3 ) else
6524: LD_VAR 0 3
6528: PPUSH
6529: LD_INT 3
6531: PPUSH
6532: CALL_OW 233
6536: GO 6550
// SetDir ( i , 5 ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_INT 5
6545: PPUSH
6546: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_VAR 0 7
6559: PUSH
6560: LD_VAR 0 8
6564: ARRAY
6565: PPUSH
6566: LD_INT 0
6568: PPUSH
6569: CALL_OW 49
// if GetControl ( i ) = control_manual then
6573: LD_VAR 0 3
6577: PPUSH
6578: CALL_OW 263
6582: PUSH
6583: LD_INT 1
6585: EQUAL
6586: IFFALSE 6632
// begin uc_nation := GetNation ( i ) ;
6588: LD_ADDR_OWVAR 21
6592: PUSH
6593: LD_VAR 0 3
6597: PPUSH
6598: CALL_OW 248
6602: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6603: LD_INT 0
6605: PPUSH
6606: LD_INT 3
6608: PPUSH
6609: LD_VAR 0 5
6613: PPUSH
6614: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6618: CALL_OW 44
6622: PPUSH
6623: LD_VAR 0 3
6627: PPUSH
6628: CALL_OW 52
// end ; l := l + 1 ;
6632: LD_ADDR_VAR 0 9
6636: PUSH
6637: LD_VAR 0 9
6641: PUSH
6642: LD_INT 1
6644: PLUS
6645: ST_TO_ADDR
// if l mod 10 = 0 then
6646: LD_VAR 0 9
6650: PUSH
6651: LD_INT 10
6653: MOD
6654: PUSH
6655: LD_INT 0
6657: EQUAL
6658: IFFALSE 6667
// Wait ( 0 0$02 ) ;
6660: LD_INT 70
6662: PPUSH
6663: CALL_OW 67
// end ;
6667: GO 6495
6669: POP
6670: POP
// end ;
6671: LD_VAR 0 2
6675: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6676: LD_INT 0
6678: PPUSH
6679: PPUSH
6680: PPUSH
// uc_nation := nation_nature ;
6681: LD_ADDR_OWVAR 21
6685: PUSH
6686: LD_INT 0
6688: ST_TO_ADDR
// for i = 1 to n do
6689: LD_ADDR_VAR 0 4
6693: PUSH
6694: DOUBLE
6695: LD_INT 1
6697: DEC
6698: ST_TO_ADDR
6699: LD_VAR 0 1
6703: PUSH
6704: FOR_TO
6705: IFFALSE 6740
// begin PrepareHuman ( false , class_apeman , skill ) ;
6707: LD_INT 0
6709: PPUSH
6710: LD_INT 12
6712: PPUSH
6713: LD_VAR 0 2
6717: PPUSH
6718: CALL_OW 380
// result := result ^ CreateHuman ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_VAR 0 3
6731: PUSH
6732: CALL_OW 44
6736: ADD
6737: ST_TO_ADDR
// end ;
6738: GO 6704
6740: POP
6741: POP
// end ;
6742: LD_VAR 0 3
6746: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6747: LD_INT 0
6749: PPUSH
6750: PPUSH
6751: PPUSH
// uc_nation := nation_nature ;
6752: LD_ADDR_OWVAR 21
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// for i = 1 to n do
6760: LD_ADDR_VAR 0 4
6764: PUSH
6765: DOUBLE
6766: LD_INT 1
6768: DEC
6769: ST_TO_ADDR
6770: LD_VAR 0 1
6774: PUSH
6775: FOR_TO
6776: IFFALSE 6811
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6778: LD_INT 0
6780: PPUSH
6781: LD_INT 15
6783: PPUSH
6784: LD_VAR 0 2
6788: PPUSH
6789: CALL_OW 380
// result := result ^ CreateHuman ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_VAR 0 3
6802: PUSH
6803: CALL_OW 44
6807: ADD
6808: ST_TO_ADDR
// end ;
6809: GO 6775
6811: POP
6812: POP
// end ;
6813: LD_VAR 0 3
6817: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6818: LD_INT 0
6820: PPUSH
6821: PPUSH
6822: PPUSH
// for i = 1 to n do
6823: LD_ADDR_VAR 0 4
6827: PUSH
6828: DOUBLE
6829: LD_INT 1
6831: DEC
6832: ST_TO_ADDR
6833: LD_VAR 0 1
6837: PUSH
6838: FOR_TO
6839: IFFALSE 6890
// begin uc_nation := rand ( 1 , 3 ) ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_INT 3
6851: PPUSH
6852: CALL_OW 12
6856: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6857: LD_INT 0
6859: PPUSH
6860: LD_INT 1
6862: PPUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 380
// result := result ^ CreateHuman ;
6872: LD_ADDR_VAR 0 3
6876: PUSH
6877: LD_VAR 0 3
6881: PUSH
6882: CALL_OW 44
6886: ADD
6887: ST_TO_ADDR
// end ;
6888: GO 6838
6890: POP
6891: POP
// end ;
6892: LD_VAR 0 3
6896: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
// for i = 1 to n do
6906: LD_ADDR_VAR 0 4
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_VAR 0 1
6920: PUSH
6921: FOR_TO
6922: IFFALSE 7286
// begin uc_nation := rand ( 1 , 3 ) ;
6924: LD_ADDR_OWVAR 21
6928: PUSH
6929: LD_INT 1
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: CALL_OW 12
6939: ST_TO_ADDR
// case uc_nation of 1 :
6940: LD_OWVAR 21
6944: PUSH
6945: LD_INT 1
6947: DOUBLE
6948: EQUAL
6949: IFTRUE 6953
6951: GO 7016
6953: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6954: LD_ADDR_VAR 0 6
6958: PUSH
6959: LD_INT 1
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6969: LD_ADDR_VAR 0 7
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6984: LD_ADDR_VAR 0 8
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
6999: LD_ADDR_VAR 0 9
7003: PUSH
7004: LD_INT 1
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: ST_TO_ADDR
// end ; 2 :
7014: GO 7151
7016: LD_INT 2
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7087
7024: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_INT 12
7032: PUSH
7033: LD_INT 11
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7040: LD_ADDR_VAR 0 7
7044: PUSH
7045: LD_INT 23
7047: PUSH
7048: LD_INT 24
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7055: LD_ADDR_VAR 0 8
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 5
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_INT 1
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
// end ; 3 :
7085: GO 7151
7087: LD_INT 3
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7150
7095: POP
// begin chassis := [ ru_medium_wheeled ] ;
7096: LD_ADDR_VAR 0 6
7100: PUSH
7101: LD_INT 21
7103: PUSH
7104: EMPTY
7105: LIST
7106: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7107: LD_ADDR_VAR 0 7
7111: PUSH
7112: LD_INT 42
7114: PUSH
7115: LD_INT 44
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7122: LD_ADDR_VAR 0 8
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: LD_INT 3
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7137: LD_ADDR_VAR 0 9
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: ST_TO_ADDR
// end ; end ;
7148: GO 7151
7150: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7151: LD_ADDR_OWVAR 37
7155: PUSH
7156: LD_VAR 0 6
7160: PUSH
7161: LD_INT 1
7163: PPUSH
7164: LD_VAR 0 6
7168: PPUSH
7169: CALL_OW 12
7173: ARRAY
7174: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7175: LD_ADDR_OWVAR 39
7179: PUSH
7180: LD_VAR 0 9
7184: PUSH
7185: LD_INT 1
7187: PPUSH
7188: LD_VAR 0 9
7192: PPUSH
7193: CALL_OW 12
7197: ARRAY
7198: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7199: LD_ADDR_OWVAR 38
7203: PUSH
7204: LD_VAR 0 8
7208: PUSH
7209: LD_INT 1
7211: PPUSH
7212: LD_VAR 0 8
7216: PPUSH
7217: CALL_OW 12
7221: ARRAY
7222: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7223: LD_ADDR_OWVAR 40
7227: PUSH
7228: LD_VAR 0 7
7232: PUSH
7233: LD_INT 1
7235: PPUSH
7236: LD_VAR 0 7
7240: PPUSH
7241: CALL_OW 12
7245: ARRAY
7246: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7247: LD_ADDR_OWVAR 41
7251: PUSH
7252: LD_INT 100
7254: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7255: LD_ADDR_VAR 0 3
7259: PUSH
7260: LD_VAR 0 3
7264: PPUSH
7265: LD_VAR 0 3
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: CALL_OW 45
7278: PPUSH
7279: CALL_OW 2
7283: ST_TO_ADDR
// end ;
7284: GO 6921
7286: POP
7287: POP
// end ;
7288: LD_VAR 0 3
7292: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
7301: PPUSH
// for i = 1 to n do
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: DOUBLE
7308: LD_INT 1
7310: DEC
7311: ST_TO_ADDR
7312: LD_VAR 0 1
7316: PUSH
7317: FOR_TO
7318: IFFALSE 7706
// begin uc_nation := rand ( 1 , 3 ) ;
7320: LD_ADDR_OWVAR 21
7324: PUSH
7325: LD_INT 1
7327: PPUSH
7328: LD_INT 3
7330: PPUSH
7331: CALL_OW 12
7335: ST_TO_ADDR
// case uc_nation of 1 :
7336: LD_OWVAR 21
7340: PUSH
7341: LD_INT 1
7343: DOUBLE
7344: EQUAL
7345: IFTRUE 7349
7347: GO 7420
7349: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: LD_INT 2
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7365: LD_ADDR_VAR 0 7
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: LD_INT 5
7375: PUSH
7376: LD_INT 9
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7384: LD_ADDR_VAR 0 8
7388: PUSH
7389: LD_INT 1
7391: PUSH
7392: LD_INT 3
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7399: LD_ADDR_VAR 0 9
7403: PUSH
7404: LD_INT 1
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 3
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// end ; 2 :
7418: GO 7571
7420: LD_INT 2
7422: DOUBLE
7423: EQUAL
7424: IFTRUE 7428
7426: GO 7499
7428: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7429: LD_ADDR_VAR 0 6
7433: PUSH
7434: LD_INT 13
7436: PUSH
7437: LD_INT 14
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7444: LD_ADDR_VAR 0 7
7448: PUSH
7449: LD_INT 27
7451: PUSH
7452: LD_INT 26
7454: PUSH
7455: LD_INT 25
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7463: LD_ADDR_VAR 0 8
7467: PUSH
7468: LD_INT 1
7470: PUSH
7471: LD_INT 5
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 1
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: ST_TO_ADDR
// end ; 3 :
7497: GO 7571
7499: LD_INT 3
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7570
7507: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7508: LD_ADDR_VAR 0 6
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 21
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7523: LD_ADDR_VAR 0 7
7527: PUSH
7528: LD_INT 44
7530: PUSH
7531: LD_INT 43
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7538: LD_ADDR_VAR 0 8
7542: PUSH
7543: LD_INT 1
7545: PUSH
7546: LD_INT 3
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7553: LD_ADDR_VAR 0 9
7557: PUSH
7558: LD_INT 1
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// end ; end ;
7568: GO 7571
7570: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7571: LD_ADDR_OWVAR 37
7575: PUSH
7576: LD_VAR 0 6
7580: PUSH
7581: LD_INT 1
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 12
7593: ARRAY
7594: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7595: LD_ADDR_OWVAR 39
7599: PUSH
7600: LD_VAR 0 9
7604: PUSH
7605: LD_INT 1
7607: PPUSH
7608: LD_VAR 0 9
7612: PPUSH
7613: CALL_OW 12
7617: ARRAY
7618: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7619: LD_ADDR_OWVAR 38
7623: PUSH
7624: LD_VAR 0 8
7628: PUSH
7629: LD_INT 1
7631: PPUSH
7632: LD_VAR 0 8
7636: PPUSH
7637: CALL_OW 12
7641: ARRAY
7642: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7643: LD_ADDR_OWVAR 40
7647: PUSH
7648: LD_VAR 0 7
7652: PUSH
7653: LD_INT 1
7655: PPUSH
7656: LD_VAR 0 7
7660: PPUSH
7661: CALL_OW 12
7665: ARRAY
7666: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7667: LD_ADDR_OWVAR 41
7671: PUSH
7672: LD_INT 100
7674: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_VAR 0 3
7684: PPUSH
7685: LD_VAR 0 3
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: PPUSH
7694: CALL_OW 45
7698: PPUSH
7699: CALL_OW 2
7703: ST_TO_ADDR
// end ;
7704: GO 7317
7706: POP
7707: POP
// end ;
7708: LD_VAR 0 3
7712: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7713: LD_INT 0
7715: PPUSH
7716: PPUSH
7717: PPUSH
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
// for i = 1 to n do
7722: LD_ADDR_VAR 0 4
7726: PUSH
7727: DOUBLE
7728: LD_INT 1
7730: DEC
7731: ST_TO_ADDR
7732: LD_VAR 0 1
7736: PUSH
7737: FOR_TO
7738: IFFALSE 8126
// begin uc_nation := rand ( 1 , 3 ) ;
7740: LD_ADDR_OWVAR 21
7744: PUSH
7745: LD_INT 1
7747: PPUSH
7748: LD_INT 3
7750: PPUSH
7751: CALL_OW 12
7755: ST_TO_ADDR
// case uc_nation of 1 :
7756: LD_OWVAR 21
7760: PUSH
7761: LD_INT 1
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7836
7769: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7770: LD_ADDR_VAR 0 6
7774: PUSH
7775: LD_INT 4
7777: PUSH
7778: LD_INT 5
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7785: LD_ADDR_VAR 0 7
7789: PUSH
7790: LD_INT 6
7792: PUSH
7793: LD_INT 7
7795: PUSH
7796: LD_INT 9
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7804: LD_ADDR_VAR 0 8
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: LD_INT 3
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7819: LD_ADDR_VAR 0 9
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: ST_TO_ADDR
// end ; 2 :
7834: GO 7991
7836: LD_INT 2
7838: DOUBLE
7839: EQUAL
7840: IFTRUE 7844
7842: GO 7919
7844: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7845: LD_ADDR_VAR 0 6
7849: PUSH
7850: LD_INT 13
7852: PUSH
7853: LD_INT 14
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7860: LD_ADDR_VAR 0 7
7864: PUSH
7865: LD_INT 27
7867: PUSH
7868: LD_INT 26
7870: PUSH
7871: LD_INT 28
7873: PUSH
7874: LD_INT 29
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7883: LD_ADDR_VAR 0 8
7887: PUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 5
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7898: LD_ADDR_VAR 0 9
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: ST_TO_ADDR
// end ; 3 :
7917: GO 7991
7919: LD_INT 3
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7990
7927: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7928: LD_ADDR_VAR 0 6
7932: PUSH
7933: LD_INT 23
7935: PUSH
7936: LD_INT 24
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7943: LD_ADDR_VAR 0 7
7947: PUSH
7948: LD_INT 46
7950: PUSH
7951: LD_INT 45
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7958: LD_ADDR_VAR 0 8
7962: PUSH
7963: LD_INT 1
7965: PUSH
7966: LD_INT 3
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7973: LD_ADDR_VAR 0 9
7977: PUSH
7978: LD_INT 1
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: ST_TO_ADDR
// end ; end ;
7988: GO 7991
7990: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7991: LD_ADDR_OWVAR 37
7995: PUSH
7996: LD_VAR 0 6
8000: PUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_VAR 0 6
8008: PPUSH
8009: CALL_OW 12
8013: ARRAY
8014: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8015: LD_ADDR_OWVAR 39
8019: PUSH
8020: LD_VAR 0 9
8024: PUSH
8025: LD_INT 1
8027: PPUSH
8028: LD_VAR 0 9
8032: PPUSH
8033: CALL_OW 12
8037: ARRAY
8038: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8039: LD_ADDR_OWVAR 38
8043: PUSH
8044: LD_VAR 0 8
8048: PUSH
8049: LD_INT 1
8051: PPUSH
8052: LD_VAR 0 8
8056: PPUSH
8057: CALL_OW 12
8061: ARRAY
8062: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8063: LD_ADDR_OWVAR 40
8067: PUSH
8068: LD_VAR 0 7
8072: PUSH
8073: LD_INT 1
8075: PPUSH
8076: LD_VAR 0 7
8080: PPUSH
8081: CALL_OW 12
8085: ARRAY
8086: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8087: LD_ADDR_OWVAR 41
8091: PUSH
8092: LD_INT 100
8094: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8095: LD_ADDR_VAR 0 3
8099: PUSH
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 1
8112: PLUS
8113: PPUSH
8114: CALL_OW 45
8118: PPUSH
8119: CALL_OW 2
8123: ST_TO_ADDR
// end ;
8124: GO 7737
8126: POP
8127: POP
// end ;
8128: LD_VAR 0 3
8132: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8133: LD_INT 0
8135: PPUSH
8136: PPUSH
// for i = 1 to n do
8137: LD_ADDR_VAR 0 4
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_VAR 0 1
8151: PUSH
8152: FOR_TO
8153: IFFALSE 8227
// begin uc_nation := rand ( 1 , 3 ) ;
8155: LD_ADDR_OWVAR 21
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8171: LD_INT 0
8173: PPUSH
8174: LD_INT 8
8176: PUSH
8177: LD_INT 9
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 2
8204: PPUSH
8205: CALL_OW 380
// result := result ^ CreateHuman ;
8209: LD_ADDR_VAR 0 3
8213: PUSH
8214: LD_VAR 0 3
8218: PUSH
8219: CALL_OW 44
8223: ADD
8224: ST_TO_ADDR
// end ;
8225: GO 8152
8227: POP
8228: POP
// end ;
8229: LD_VAR 0 3
8233: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8234: LD_INT 0
8236: PPUSH
8237: PPUSH
8238: PPUSH
8239: PPUSH
8240: PPUSH
8241: PPUSH
8242: PPUSH
// for i = 1 to n do
8243: LD_ADDR_VAR 0 4
8247: PUSH
8248: DOUBLE
8249: LD_INT 1
8251: DEC
8252: ST_TO_ADDR
8253: LD_VAR 0 1
8257: PUSH
8258: FOR_TO
8259: IFFALSE 8651
// begin uc_nation := rand ( 1 , 3 ) ;
8261: LD_ADDR_OWVAR 21
8265: PUSH
8266: LD_INT 1
8268: PPUSH
8269: LD_INT 3
8271: PPUSH
8272: CALL_OW 12
8276: ST_TO_ADDR
// case uc_nation of 1 :
8277: LD_OWVAR 21
8281: PUSH
8282: LD_INT 1
8284: DOUBLE
8285: EQUAL
8286: IFTRUE 8290
8288: GO 8361
8290: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8291: LD_ADDR_VAR 0 6
8295: PUSH
8296: LD_INT 4
8298: PUSH
8299: LD_INT 5
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8306: LD_ADDR_VAR 0 7
8310: PUSH
8311: LD_INT 6
8313: PUSH
8314: LD_INT 7
8316: PUSH
8317: LD_INT 10
8319: PUSH
8320: LD_INT 97
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8329: LD_ADDR_VAR 0 8
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8344: LD_ADDR_VAR 0 9
8348: PUSH
8349: LD_INT 1
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: ST_TO_ADDR
// end ; 2 :
8359: GO 8516
8361: LD_INT 2
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8440
8369: POP
// begin chassis := [ ar_half_tracked ] ;
8370: LD_ADDR_VAR 0 6
8374: PUSH
8375: LD_INT 14
8377: PUSH
8378: EMPTY
8379: LIST
8380: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8381: LD_ADDR_VAR 0 7
8385: PUSH
8386: LD_INT 91
8388: PUSH
8389: LD_INT 26
8391: PUSH
8392: LD_INT 28
8394: PUSH
8395: LD_INT 29
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8404: LD_ADDR_VAR 0 8
8408: PUSH
8409: LD_INT 1
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 1
8426: PUSH
8427: LD_INT 2
8429: PUSH
8430: LD_INT 3
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// end ; 3 :
8438: GO 8516
8440: LD_INT 3
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8515
8448: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8449: LD_ADDR_VAR 0 6
8453: PUSH
8454: LD_INT 23
8456: PUSH
8457: LD_INT 24
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8464: LD_ADDR_VAR 0 7
8468: PUSH
8469: LD_INT 46
8471: PUSH
8472: LD_INT 45
8474: PUSH
8475: LD_INT 49
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8483: LD_ADDR_VAR 0 8
8487: PUSH
8488: LD_INT 1
8490: PUSH
8491: LD_INT 3
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: ST_TO_ADDR
// end ; end ;
8513: GO 8516
8515: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8516: LD_ADDR_OWVAR 37
8520: PUSH
8521: LD_VAR 0 6
8525: PUSH
8526: LD_INT 1
8528: PPUSH
8529: LD_VAR 0 6
8533: PPUSH
8534: CALL_OW 12
8538: ARRAY
8539: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8540: LD_ADDR_OWVAR 39
8544: PUSH
8545: LD_VAR 0 9
8549: PUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 9
8557: PPUSH
8558: CALL_OW 12
8562: ARRAY
8563: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8564: LD_ADDR_OWVAR 38
8568: PUSH
8569: LD_VAR 0 8
8573: PUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_VAR 0 8
8581: PPUSH
8582: CALL_OW 12
8586: ARRAY
8587: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8588: LD_ADDR_OWVAR 40
8592: PUSH
8593: LD_VAR 0 7
8597: PUSH
8598: LD_INT 1
8600: PPUSH
8601: LD_VAR 0 7
8605: PPUSH
8606: CALL_OW 12
8610: ARRAY
8611: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8612: LD_ADDR_OWVAR 41
8616: PUSH
8617: LD_INT 100
8619: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8620: LD_ADDR_VAR 0 3
8624: PUSH
8625: LD_VAR 0 3
8629: PPUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_INT 1
8637: PLUS
8638: PPUSH
8639: CALL_OW 45
8643: PPUSH
8644: CALL_OW 2
8648: ST_TO_ADDR
// end ;
8649: GO 8258
8651: POP
8652: POP
// end ; end_of_file
8653: LD_VAR 0 3
8657: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8658: LD_INT 22
8660: PUSH
8661: LD_INT 7
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: IFFALSE 9172
8674: GO 8676
8676: DISABLE
8677: LD_INT 0
8679: PPUSH
8680: PPUSH
8681: PPUSH
// begin enable ;
8682: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: LD_INT 22
8690: PUSH
8691: LD_INT 7
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: ST_TO_ADDR
// for i in tmp do
8703: LD_ADDR_VAR 0 1
8707: PUSH
8708: LD_VAR 0 3
8712: PUSH
8713: FOR_IN
8714: IFFALSE 9170
// begin case GetType ( i ) of unit_human :
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 247
8725: PUSH
8726: LD_INT 1
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8933
8734: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 256
8744: PUSH
8745: LD_INT 250
8747: LESS
8748: PUSH
8749: LD_INT 5
8751: PPUSH
8752: LD_INT 7
8754: PPUSH
8755: CALL_OW 321
8759: PUSH
8760: LD_INT 2
8762: NONEQUAL
8763: AND
8764: IFFALSE 8768
// continue ;
8766: GO 8713
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8768: LD_VAR 0 1
8772: PPUSH
8773: CALL_OW 257
8777: PUSH
8778: LD_INT 12
8780: PUSH
8781: LD_INT 15
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_INT 17
8789: PUSH
8790: LD_INT 1
8792: PUSH
8793: LD_INT 5
8795: PUSH
8796: LD_INT 6
8798: PUSH
8799: LD_INT 7
8801: PUSH
8802: LD_INT 8
8804: PUSH
8805: LD_INT 9
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: IN
8820: IFFALSE 8858
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8822: LD_VAR 0 1
8826: PPUSH
8827: LD_INT 22
8829: PUSH
8830: LD_OWVAR 2
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 69
8843: PPUSH
8844: LD_VAR 0 1
8848: PPUSH
8849: CALL_OW 74
8853: PPUSH
8854: CALL_OW 115
// if GetClass ( i ) = 3 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 257
8867: PUSH
8868: LD_INT 3
8870: EQUAL
8871: IFFALSE 8931
// if IsInUnit ( i ) then
8873: LD_VAR 0 1
8877: PPUSH
8878: CALL_OW 310
8882: IFFALSE 8922
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8884: LD_VAR 0 1
8888: PPUSH
8889: LD_INT 22
8891: PUSH
8892: LD_OWVAR 2
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PPUSH
8901: CALL_OW 69
8905: PPUSH
8906: LD_VAR 0 1
8910: PPUSH
8911: CALL_OW 74
8915: PPUSH
8916: CALL_OW 115
8920: GO 8931
// ComEspace ( i ) ;
8922: LD_VAR 0 1
8926: PPUSH
8927: CALL 1933 0 1
// end ; unit_vehicle :
8931: GO 9168
8933: LD_INT 2
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 9167
8941: POP
// begin if GetLives ( i ) > 250 then
8942: LD_VAR 0 1
8946: PPUSH
8947: CALL_OW 256
8951: PUSH
8952: LD_INT 250
8954: GREATER
8955: IFFALSE 9165
// begin if GetWeapon ( i ) = us_artillery then
8957: LD_VAR 0 1
8961: PPUSH
8962: CALL_OW 264
8966: PUSH
8967: LD_INT 97
8969: EQUAL
8970: IFFALSE 9038
// begin if IsInArea ( i , zoneOut ) then
8972: LD_VAR 0 1
8976: PPUSH
8977: LD_INT 4
8979: PPUSH
8980: CALL_OW 308
8984: IFFALSE 9000
// ComMoveToArea ( i , zoneBorder ) else
8986: LD_VAR 0 1
8990: PPUSH
8991: LD_INT 9
8993: PPUSH
8994: CALL_OW 113
8998: GO 9036
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9000: LD_VAR 0 1
9004: PPUSH
9005: LD_INT 22
9007: PUSH
9008: LD_OWVAR 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 69
9021: PPUSH
9022: LD_VAR 0 1
9026: PPUSH
9027: CALL_OW 74
9031: PPUSH
9032: CALL_OW 115
// end else
9036: GO 9165
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9038: LD_VAR 0 1
9042: PPUSH
9043: CALL_OW 264
9047: PUSH
9048: LD_INT 11
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 98
9056: PUSH
9057: LD_INT 49
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: IN
9066: IFFALSE 9096
// begin if IsInArea ( i , zoneOut ) then
9068: LD_VAR 0 1
9072: PPUSH
9073: LD_INT 4
9075: PPUSH
9076: CALL_OW 308
9080: IFFALSE 9094
// ComSpecMove ( i , specPos ) ;
9082: LD_VAR 0 1
9086: PPUSH
9087: LD_INT 8
9089: PPUSH
9090: CALL 1979 0 2
// end else
9094: GO 9165
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 264
9105: PUSH
9106: LD_INT 91
9108: PUSH
9109: LD_INT 29
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: IN
9116: IFFALSE 9129
// ComSpecAttack ( i ) else
9118: LD_VAR 0 1
9122: PPUSH
9123: CALL 2407 0 1
9127: GO 9165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9129: LD_VAR 0 1
9133: PPUSH
9134: LD_INT 22
9136: PUSH
9137: LD_OWVAR 2
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 74
9160: PPUSH
9161: CALL_OW 115
// end ; end ; end ;
9165: GO 9168
9167: POP
// end ;
9168: GO 8713
9170: POP
9171: POP
// end ; end_of_file
9172: PPOPN 3
9174: END
// export function InitDisplay ; begin
9175: LD_INT 0
9177: PPUSH
// while true do
9178: LD_INT 1
9180: IFFALSE 9267
// begin if waveNumber < 100 then
9182: LD_EXP 5
9186: PUSH
9187: LD_INT 100
9189: LESS
9190: IFFALSE 9241
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9192: LD_ADDR_OWVAR 47
9196: PUSH
9197: LD_STRING #Tick
9199: PUSH
9200: LD_OWVAR 1
9204: PUSH
9205: LD_STRING #Points
9207: PUSH
9208: LD_EXP 2
9212: PUSH
9213: LD_STRING #Attack
9215: PUSH
9216: LD_EXP 4
9220: PUSH
9221: LD_STRING #Wave
9223: PUSH
9224: LD_EXP 5
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: ST_TO_ADDR
9239: GO 9258
// Display_Strings := [ #Win , points ] ;
9241: LD_ADDR_OWVAR 47
9245: PUSH
9246: LD_STRING #Win
9248: PUSH
9249: LD_EXP 2
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9258: LD_INT 35
9260: PPUSH
9261: CALL_OW 67
// end ;
9265: GO 9178
// end ; end_of_file
9267: LD_VAR 0 1
9271: RET
// export function InitBonus ; var i , chance ; begin
9272: LD_INT 0
9274: PPUSH
9275: PPUSH
9276: PPUSH
// chance := rand ( 1 , 99 ) ;
9277: LD_ADDR_VAR 0 3
9281: PUSH
9282: LD_INT 1
9284: PPUSH
9285: LD_INT 99
9287: PPUSH
9288: CALL_OW 12
9292: ST_TO_ADDR
// case chance of 1 .. 10 :
9293: LD_VAR 0 3
9297: PUSH
9298: LD_INT 1
9300: DOUBLE
9301: GREATEREQUAL
9302: IFFALSE 9310
9304: LD_INT 10
9306: DOUBLE
9307: LESSEQUAL
9308: IFTRUE 9312
9310: GO 9323
9312: POP
// i := 5 ; 11 .. 25 :
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_INT 5
9320: ST_TO_ADDR
9321: GO 9424
9323: LD_INT 11
9325: DOUBLE
9326: GREATEREQUAL
9327: IFFALSE 9335
9329: LD_INT 25
9331: DOUBLE
9332: LESSEQUAL
9333: IFTRUE 9337
9335: GO 9348
9337: POP
// i := 3 ; 26 .. 40 :
9338: LD_ADDR_VAR 0 2
9342: PUSH
9343: LD_INT 3
9345: ST_TO_ADDR
9346: GO 9424
9348: LD_INT 26
9350: DOUBLE
9351: GREATEREQUAL
9352: IFFALSE 9360
9354: LD_INT 40
9356: DOUBLE
9357: LESSEQUAL
9358: IFTRUE 9362
9360: GO 9373
9362: POP
// i := 2 ; 41 .. 60 :
9363: LD_ADDR_VAR 0 2
9367: PUSH
9368: LD_INT 2
9370: ST_TO_ADDR
9371: GO 9424
9373: LD_INT 41
9375: DOUBLE
9376: GREATEREQUAL
9377: IFFALSE 9385
9379: LD_INT 60
9381: DOUBLE
9382: LESSEQUAL
9383: IFTRUE 9387
9385: GO 9398
9387: POP
// i := 4 ; 61 .. 99 :
9388: LD_ADDR_VAR 0 2
9392: PUSH
9393: LD_INT 4
9395: ST_TO_ADDR
9396: GO 9424
9398: LD_INT 61
9400: DOUBLE
9401: GREATEREQUAL
9402: IFFALSE 9410
9404: LD_INT 99
9406: DOUBLE
9407: LESSEQUAL
9408: IFTRUE 9412
9410: GO 9423
9412: POP
// i := 1 ; end ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_INT 1
9420: ST_TO_ADDR
9421: GO 9424
9423: POP
// case i of 1 :
9424: LD_VAR 0 2
9428: PUSH
9429: LD_INT 1
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9526
9437: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9438: LD_INT 22
9440: PUSH
9441: LD_OWVAR 2
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: LD_INT 25
9455: PUSH
9456: LD_INT 12
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 25
9465: PUSH
9466: LD_INT 16
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 25
9475: PUSH
9476: LD_INT 15
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 17
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PPUSH
9504: CALL_OW 69
9508: PUSH
9509: LD_INT 10
9511: GREATEREQUAL
9512: IFFALSE 9520
// BonusIV else
9514: CALL 10099 0 0
9518: GO 9524
// BonusI ;
9520: CALL 9604 0 0
// end ; 2 :
9524: GO 9599
9526: LD_INT 2
9528: DOUBLE
9529: EQUAL
9530: IFTRUE 9534
9532: GO 9541
9534: POP
// begin BonusII ;
9535: CALL 9777 0 0
// end ; 3 :
9539: GO 9599
9541: LD_INT 3
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9556
9549: POP
// begin BonusIII ;
9550: CALL 9925 0 0
// end ; 4 :
9554: GO 9599
9556: LD_INT 4
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9571
9564: POP
// begin BonusIV ;
9565: CALL 10099 0 0
// end ; 5 :
9569: GO 9599
9571: LD_INT 5
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9598
9579: POP
// begin if graveyard then
9580: LD_EXP 8
9584: IFFALSE 9592
// BonusV else
9586: CALL 10517 0 0
9590: GO 9596
// BonusIII ;
9592: CALL 9925 0 0
// end ; end ;
9596: GO 9599
9598: POP
// end ;
9599: LD_VAR 0 1
9603: RET
// export function BonusI ; var i ; begin
9604: LD_INT 0
9606: PPUSH
9607: PPUSH
// case Query ( AddGift1 ) of 1 :
9608: LD_STRING AddGift1
9610: PPUSH
9611: CALL_OW 97
9615: PUSH
9616: LD_INT 1
9618: DOUBLE
9619: EQUAL
9620: IFTRUE 9624
9622: GO 9703
9624: POP
// begin for i = 1 to 3 do
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: DOUBLE
9631: LD_INT 1
9633: DEC
9634: ST_TO_ADDR
9635: LD_INT 3
9637: PUSH
9638: FOR_TO
9639: IFFALSE 9699
// begin uc_side := your_side ;
9641: LD_ADDR_OWVAR 20
9645: PUSH
9646: LD_OWVAR 2
9650: ST_TO_ADDR
// uc_nation := 0 ;
9651: LD_ADDR_OWVAR 21
9655: PUSH
9656: LD_INT 0
9658: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9659: LD_INT 0
9661: PPUSH
9662: LD_INT 12
9664: PPUSH
9665: LD_INT 1
9667: PPUSH
9668: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9672: CALL_OW 44
9676: PPUSH
9677: LD_EXP 9
9681: PPUSH
9682: LD_EXP 10
9686: PPUSH
9687: LD_INT 15
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: CALL_OW 50
// end ;
9697: GO 9638
9699: POP
9700: POP
// end ; 2 :
9701: GO 9772
9703: LD_INT 2
9705: DOUBLE
9706: EQUAL
9707: IFTRUE 9711
9709: GO 9753
9711: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9712: LD_EXP 11
9716: PPUSH
9717: CALL_OW 274
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: LD_EXP 11
9729: PPUSH
9730: CALL_OW 274
9734: PPUSH
9735: LD_INT 1
9737: PPUSH
9738: CALL_OW 275
9742: PUSH
9743: LD_INT 100
9745: PLUS
9746: PPUSH
9747: CALL_OW 277
// end ; 3 :
9751: GO 9772
9753: LD_INT 3
9755: DOUBLE
9756: EQUAL
9757: IFTRUE 9761
9759: GO 9771
9761: POP
// begin SetTeamExp ( 2 ) ;
9762: LD_INT 2
9764: PPUSH
9765: CALL 940 0 1
// end ; end ;
9769: GO 9772
9771: POP
// end ;
9772: LD_VAR 0 1
9776: RET
// export function BonusII ; var i ; begin
9777: LD_INT 0
9779: PPUSH
9780: PPUSH
// case Query ( AddGift2 ) of 1 :
9781: LD_STRING AddGift2
9783: PPUSH
9784: CALL_OW 97
9788: PUSH
9789: LD_INT 1
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 9839
9797: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9798: LD_EXP 11
9802: PPUSH
9803: CALL_OW 274
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: LD_EXP 11
9815: PPUSH
9816: CALL_OW 274
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 275
9828: PUSH
9829: LD_INT 500
9831: PLUS
9832: PPUSH
9833: CALL_OW 277
// end ; 2 :
9837: GO 9920
9839: LD_INT 2
9841: DOUBLE
9842: EQUAL
9843: IFTRUE 9847
9845: GO 9857
9847: POP
// begin SetTeamExp ( 3 ) ;
9848: LD_INT 3
9850: PPUSH
9851: CALL 940 0 1
// end ; 3 :
9855: GO 9920
9857: LD_INT 3
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 9919
9865: POP
// begin uc_side = your_side ;
9866: LD_ADDR_OWVAR 20
9870: PUSH
9871: LD_OWVAR 2
9875: ST_TO_ADDR
// uc_nation = nation_russian ;
9876: LD_ADDR_OWVAR 21
9880: PUSH
9881: LD_INT 3
9883: ST_TO_ADDR
// vc_chassis = 25 ;
9884: LD_ADDR_OWVAR 37
9888: PUSH
9889: LD_INT 25
9891: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9892: CALL_OW 45
9896: PPUSH
9897: LD_EXP 9
9901: PPUSH
9902: LD_EXP 10
9906: PPUSH
9907: LD_INT 15
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 50
// end ; end ;
9917: GO 9920
9919: POP
// end ;
9920: LD_VAR 0 1
9924: RET
// export function BonusIII ; var i ; begin
9925: LD_INT 0
9927: PPUSH
9928: PPUSH
// case Query ( AddGift3 ) of 1 :
9929: LD_STRING AddGift3
9931: PPUSH
9932: CALL_OW 97
9936: PUSH
9937: LD_INT 1
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 9987
9945: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9946: LD_EXP 11
9950: PPUSH
9951: CALL_OW 274
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: LD_EXP 11
9963: PPUSH
9964: CALL_OW 274
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 275
9976: PUSH
9977: LD_INT 1000
9979: PLUS
9980: PPUSH
9981: CALL_OW 277
// end ; 2 :
9985: GO 10094
9987: LD_INT 2
9989: DOUBLE
9990: EQUAL
9991: IFTRUE 9995
9993: GO 10007
9995: POP
// begin PrepareGuards ( waveNumber ) ;
9996: LD_EXP 5
10000: PPUSH
10001: CALL 1086 0 1
// end ; 3 :
10005: GO 10094
10007: LD_INT 3
10009: DOUBLE
10010: EQUAL
10011: IFTRUE 10015
10013: GO 10093
10015: POP
// begin uc_side = your_side ;
10016: LD_ADDR_OWVAR 20
10020: PUSH
10021: LD_OWVAR 2
10025: ST_TO_ADDR
// uc_nation = nation_american ;
10026: LD_ADDR_OWVAR 21
10030: PUSH
10031: LD_INT 1
10033: ST_TO_ADDR
// vc_chassis = us_morphling ;
10034: LD_ADDR_OWVAR 37
10038: PUSH
10039: LD_INT 5
10041: ST_TO_ADDR
// vc_engine := engine_siberite ;
10042: LD_ADDR_OWVAR 39
10046: PUSH
10047: LD_INT 3
10049: ST_TO_ADDR
// vc_control := control_computer ;
10050: LD_ADDR_OWVAR 38
10054: PUSH
10055: LD_INT 3
10057: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10058: LD_ADDR_OWVAR 40
10062: PUSH
10063: LD_INT 8
10065: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10066: CALL_OW 45
10070: PPUSH
10071: LD_EXP 9
10075: PPUSH
10076: LD_EXP 10
10080: PPUSH
10081: LD_INT 15
10083: PPUSH
10084: LD_INT 1
10086: PPUSH
10087: CALL_OW 50
// end ; end ;
10091: GO 10094
10093: POP
// end ;
10094: LD_VAR 0 1
10098: RET
// export function BonusIV ; var i ; begin
10099: LD_INT 0
10101: PPUSH
10102: PPUSH
// case Query ( AddGift4 ) of 1 :
10103: LD_STRING AddGift4
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10443
10119: POP
// begin i := rand ( 1 , 3 ) ;
10120: LD_ADDR_VAR 0 2
10124: PUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 3
10130: PPUSH
10131: CALL_OW 12
10135: ST_TO_ADDR
// uc_side := your_side ;
10136: LD_ADDR_OWVAR 20
10140: PUSH
10141: LD_OWVAR 2
10145: ST_TO_ADDR
// case i of 1 :
10146: LD_VAR 0 2
10150: PUSH
10151: LD_INT 1
10153: DOUBLE
10154: EQUAL
10155: IFTRUE 10159
10157: GO 10246
10159: POP
// begin uc_nation := nation_arabian ;
10160: LD_ADDR_OWVAR 21
10164: PUSH
10165: LD_INT 2
10167: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10168: LD_ADDR_OWVAR 37
10172: PUSH
10173: LD_INT 14
10175: ST_TO_ADDR
// vc_engine := engine_combustion ;
10176: LD_ADDR_OWVAR 39
10180: PUSH
10181: LD_INT 1
10183: ST_TO_ADDR
// vc_control := control_manual ;
10184: LD_ADDR_OWVAR 38
10188: PUSH
10189: LD_INT 1
10191: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10192: LD_ADDR_OWVAR 40
10196: PUSH
10197: LD_INT 27
10199: PUSH
10200: LD_INT 28
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 1
10209: PPUSH
10210: LD_INT 2
10212: PPUSH
10213: CALL_OW 12
10217: ARRAY
10218: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10219: CALL_OW 45
10223: PPUSH
10224: LD_EXP 9
10228: PPUSH
10229: LD_EXP 10
10233: PPUSH
10234: LD_INT 15
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 50
// end ; 2 :
10244: GO 10441
10246: LD_INT 2
10248: DOUBLE
10249: EQUAL
10250: IFTRUE 10254
10252: GO 10345
10254: POP
// begin uc_nation := nation_american ;
10255: LD_ADDR_OWVAR 21
10259: PUSH
10260: LD_INT 1
10262: ST_TO_ADDR
// vc_chassis := us_morphling ;
10263: LD_ADDR_OWVAR 37
10267: PUSH
10268: LD_INT 5
10270: ST_TO_ADDR
// vc_engine := engine_siberite ;
10271: LD_ADDR_OWVAR 39
10275: PUSH
10276: LD_INT 3
10278: ST_TO_ADDR
// vc_control := control_computer ;
10279: LD_ADDR_OWVAR 38
10283: PUSH
10284: LD_INT 3
10286: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10287: LD_ADDR_OWVAR 40
10291: PUSH
10292: LD_INT 12
10294: PUSH
10295: LD_INT 10
10297: PUSH
10298: LD_INT 7
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 1
10308: PPUSH
10309: LD_INT 3
10311: PPUSH
10312: CALL_OW 12
10316: ARRAY
10317: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10318: CALL_OW 45
10322: PPUSH
10323: LD_EXP 9
10327: PPUSH
10328: LD_EXP 10
10332: PPUSH
10333: LD_INT 15
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 50
// end ; 3 :
10343: GO 10441
10345: LD_INT 3
10347: DOUBLE
10348: EQUAL
10349: IFTRUE 10353
10351: GO 10440
10353: POP
// begin uc_nation := nation_russian ;
10354: LD_ADDR_OWVAR 21
10358: PUSH
10359: LD_INT 3
10361: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10362: LD_ADDR_OWVAR 37
10366: PUSH
10367: LD_INT 22
10369: ST_TO_ADDR
// vc_engine := engine_combustion ;
10370: LD_ADDR_OWVAR 39
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// vc_control := control_manual ;
10378: LD_ADDR_OWVAR 38
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10386: LD_ADDR_OWVAR 40
10390: PUSH
10391: LD_INT 45
10393: PUSH
10394: LD_INT 44
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 1
10403: PPUSH
10404: LD_INT 2
10406: PPUSH
10407: CALL_OW 12
10411: ARRAY
10412: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10413: CALL_OW 45
10417: PPUSH
10418: LD_EXP 9
10422: PPUSH
10423: LD_EXP 10
10427: PPUSH
10428: LD_INT 15
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 50
// end ; end ;
10438: GO 10441
10440: POP
// end ; 2 :
10441: GO 10512
10443: LD_INT 2
10445: DOUBLE
10446: EQUAL
10447: IFTRUE 10451
10449: GO 10493
10451: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10452: LD_EXP 11
10456: PPUSH
10457: CALL_OW 274
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: LD_EXP 11
10469: PPUSH
10470: CALL_OW 274
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 275
10482: PUSH
10483: LD_INT 100
10485: PLUS
10486: PPUSH
10487: CALL_OW 277
// end ; 3 :
10491: GO 10512
10493: LD_INT 3
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10511
10501: POP
// begin SetTeamExp ( 2 ) ;
10502: LD_INT 2
10504: PPUSH
10505: CALL 940 0 1
// end ; end ;
10509: GO 10512
10511: POP
// end ;
10512: LD_VAR 0 1
10516: RET
// export function BonusV ; var i , j ; begin
10517: LD_INT 0
10519: PPUSH
10520: PPUSH
10521: PPUSH
// case Query ( AddGift5 ) of 1 :
10522: LD_STRING AddGift5
10524: PPUSH
10525: CALL_OW 97
10529: PUSH
10530: LD_INT 1
10532: DOUBLE
10533: EQUAL
10534: IFTRUE 10538
10536: GO 10882
10538: POP
// begin for j = 1 to 3 do
10539: LD_ADDR_VAR 0 3
10543: PUSH
10544: DOUBLE
10545: LD_INT 1
10547: DEC
10548: ST_TO_ADDR
10549: LD_INT 3
10551: PUSH
10552: FOR_TO
10553: IFFALSE 10878
// begin i := rand ( 1 , 3 ) ;
10555: LD_ADDR_VAR 0 2
10559: PUSH
10560: LD_INT 1
10562: PPUSH
10563: LD_INT 3
10565: PPUSH
10566: CALL_OW 12
10570: ST_TO_ADDR
// uc_side := your_side ;
10571: LD_ADDR_OWVAR 20
10575: PUSH
10576: LD_OWVAR 2
10580: ST_TO_ADDR
// case i of 1 :
10581: LD_VAR 0 2
10585: PUSH
10586: LD_INT 1
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10681
10594: POP
// begin uc_nation := nation_arabian ;
10595: LD_ADDR_OWVAR 21
10599: PUSH
10600: LD_INT 2
10602: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10603: LD_ADDR_OWVAR 37
10607: PUSH
10608: LD_INT 14
10610: ST_TO_ADDR
// vc_engine := engine_combustion ;
10611: LD_ADDR_OWVAR 39
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// vc_control := control_manual ;
10619: LD_ADDR_OWVAR 38
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10627: LD_ADDR_OWVAR 40
10631: PUSH
10632: LD_INT 27
10634: PUSH
10635: LD_INT 28
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_INT 2
10647: PPUSH
10648: CALL_OW 12
10652: ARRAY
10653: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10654: CALL_OW 45
10658: PPUSH
10659: LD_EXP 9
10663: PPUSH
10664: LD_EXP 10
10668: PPUSH
10669: LD_INT 15
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 50
// end ; 2 :
10679: GO 10876
10681: LD_INT 2
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10780
10689: POP
// begin uc_nation := nation_american ;
10690: LD_ADDR_OWVAR 21
10694: PUSH
10695: LD_INT 1
10697: ST_TO_ADDR
// vc_chassis := us_morphling ;
10698: LD_ADDR_OWVAR 37
10702: PUSH
10703: LD_INT 5
10705: ST_TO_ADDR
// vc_engine := engine_siberite ;
10706: LD_ADDR_OWVAR 39
10710: PUSH
10711: LD_INT 3
10713: ST_TO_ADDR
// vc_control := control_computer ;
10714: LD_ADDR_OWVAR 38
10718: PUSH
10719: LD_INT 3
10721: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10722: LD_ADDR_OWVAR 40
10726: PUSH
10727: LD_INT 12
10729: PUSH
10730: LD_INT 11
10732: PUSH
10733: LD_INT 7
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 1
10743: PPUSH
10744: LD_INT 3
10746: PPUSH
10747: CALL_OW 12
10751: ARRAY
10752: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10753: CALL_OW 45
10757: PPUSH
10758: LD_EXP 9
10762: PPUSH
10763: LD_EXP 10
10767: PPUSH
10768: LD_INT 15
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: CALL_OW 50
// end ; 3 :
10778: GO 10876
10780: LD_INT 3
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10875
10788: POP
// begin uc_nation := nation_russian ;
10789: LD_ADDR_OWVAR 21
10793: PUSH
10794: LD_INT 3
10796: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10797: LD_ADDR_OWVAR 37
10801: PUSH
10802: LD_INT 22
10804: ST_TO_ADDR
// vc_engine := engine_combustion ;
10805: LD_ADDR_OWVAR 39
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
// vc_control := control_manual ;
10813: LD_ADDR_OWVAR 38
10817: PUSH
10818: LD_INT 1
10820: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10821: LD_ADDR_OWVAR 40
10825: PUSH
10826: LD_INT 45
10828: PUSH
10829: LD_INT 44
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 1
10838: PPUSH
10839: LD_INT 2
10841: PPUSH
10842: CALL_OW 12
10846: ARRAY
10847: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10848: CALL_OW 45
10852: PPUSH
10853: LD_EXP 9
10857: PPUSH
10858: LD_EXP 10
10862: PPUSH
10863: LD_INT 15
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 50
// end ; end ;
10873: GO 10876
10875: POP
// end ;
10876: GO 10552
10878: POP
10879: POP
// end ; 2 :
10880: GO 10948
10882: LD_INT 2
10884: DOUBLE
10885: EQUAL
10886: IFTRUE 10890
10888: GO 10932
10890: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10891: LD_EXP 11
10895: PPUSH
10896: CALL_OW 274
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: LD_EXP 11
10908: PPUSH
10909: CALL_OW 274
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 275
10921: PUSH
10922: LD_INT 500
10924: PLUS
10925: PPUSH
10926: CALL_OW 277
// end ; 3 :
10930: GO 10948
10932: LD_INT 3
10934: DOUBLE
10935: EQUAL
10936: IFTRUE 10940
10938: GO 10947
10940: POP
// begin GetBack ( ) ;
10941: CALL 1746 0 0
// end ; end ;
10945: GO 10948
10947: POP
// end ; end_of_file end_of_file
10948: LD_VAR 0 1
10952: RET
// export globalGameSaveCounter ; every 0 0$1 do
10953: GO 10955
10955: DISABLE
// begin enable ;
10956: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10957: LD_STRING updateTimer(
10959: PUSH
10960: LD_OWVAR 1
10964: STR
10965: PUSH
10966: LD_STRING );
10968: STR
10969: PPUSH
10970: CALL_OW 559
// end ;
10974: END
// every 0 0$1 do
10975: GO 10977
10977: DISABLE
// begin globalGameSaveCounter := 0 ;
10978: LD_ADDR_EXP 14
10982: PUSH
10983: LD_INT 0
10985: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10986: LD_STRING setGameSaveCounter(0)
10988: PPUSH
10989: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10993: LD_STRING initStreamRollete();
10995: PPUSH
10996: CALL_OW 559
// InitStreamMode ;
11000: CALL 12326 0 0
// DefineStreamItems ( false ) ;
11004: LD_INT 0
11006: PPUSH
11007: CALL 12790 0 1
// end ;
11011: END
// export function SOS_MapStart ( ) ; begin
11012: LD_INT 0
11014: PPUSH
// if streamModeActive then
11015: LD_EXP 15
11019: IFFALSE 11028
// DefineStreamItems ( true ) ;
11021: LD_INT 1
11023: PPUSH
11024: CALL 12790 0 1
// UpdateLuaVariables ( ) ;
11028: CALL 11045 0 0
// UpdateFactoryWaypoints ( ) ;
11032: CALL 25651 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11036: CALL 25908 0 0
// end ;
11040: LD_VAR 0 1
11044: RET
// function UpdateLuaVariables ( ) ; begin
11045: LD_INT 0
11047: PPUSH
// if globalGameSaveCounter then
11048: LD_EXP 14
11052: IFFALSE 11086
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11054: LD_ADDR_EXP 14
11058: PUSH
11059: LD_EXP 14
11063: PPUSH
11064: CALL 69865 0 1
11068: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11069: LD_STRING setGameSaveCounter(
11071: PUSH
11072: LD_EXP 14
11076: STR
11077: PUSH
11078: LD_STRING )
11080: STR
11081: PPUSH
11082: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11086: LD_STRING setGameDifficulty(
11088: PUSH
11089: LD_OWVAR 67
11093: STR
11094: PUSH
11095: LD_STRING )
11097: STR
11098: PPUSH
11099: CALL_OW 559
// end ;
11103: LD_VAR 0 1
11107: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11108: LD_INT 0
11110: PPUSH
// if p2 = stream_mode then
11111: LD_VAR 0 2
11115: PUSH
11116: LD_INT 100
11118: EQUAL
11119: IFFALSE 12122
// begin if not StreamModeActive then
11121: LD_EXP 15
11125: NOT
11126: IFFALSE 11136
// StreamModeActive := true ;
11128: LD_ADDR_EXP 15
11132: PUSH
11133: LD_INT 1
11135: ST_TO_ADDR
// if p3 = 0 then
11136: LD_VAR 0 3
11140: PUSH
11141: LD_INT 0
11143: EQUAL
11144: IFFALSE 11150
// InitStreamMode ;
11146: CALL 12326 0 0
// if p3 = 1 then
11150: LD_VAR 0 3
11154: PUSH
11155: LD_INT 1
11157: EQUAL
11158: IFFALSE 11168
// sRocket := true ;
11160: LD_ADDR_EXP 20
11164: PUSH
11165: LD_INT 1
11167: ST_TO_ADDR
// if p3 = 2 then
11168: LD_VAR 0 3
11172: PUSH
11173: LD_INT 2
11175: EQUAL
11176: IFFALSE 11186
// sSpeed := true ;
11178: LD_ADDR_EXP 19
11182: PUSH
11183: LD_INT 1
11185: ST_TO_ADDR
// if p3 = 3 then
11186: LD_VAR 0 3
11190: PUSH
11191: LD_INT 3
11193: EQUAL
11194: IFFALSE 11204
// sEngine := true ;
11196: LD_ADDR_EXP 21
11200: PUSH
11201: LD_INT 1
11203: ST_TO_ADDR
// if p3 = 4 then
11204: LD_VAR 0 3
11208: PUSH
11209: LD_INT 4
11211: EQUAL
11212: IFFALSE 11222
// sSpec := true ;
11214: LD_ADDR_EXP 18
11218: PUSH
11219: LD_INT 1
11221: ST_TO_ADDR
// if p3 = 5 then
11222: LD_VAR 0 3
11226: PUSH
11227: LD_INT 5
11229: EQUAL
11230: IFFALSE 11240
// sLevel := true ;
11232: LD_ADDR_EXP 22
11236: PUSH
11237: LD_INT 1
11239: ST_TO_ADDR
// if p3 = 6 then
11240: LD_VAR 0 3
11244: PUSH
11245: LD_INT 6
11247: EQUAL
11248: IFFALSE 11258
// sArmoury := true ;
11250: LD_ADDR_EXP 23
11254: PUSH
11255: LD_INT 1
11257: ST_TO_ADDR
// if p3 = 7 then
11258: LD_VAR 0 3
11262: PUSH
11263: LD_INT 7
11265: EQUAL
11266: IFFALSE 11276
// sRadar := true ;
11268: LD_ADDR_EXP 24
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// if p3 = 8 then
11276: LD_VAR 0 3
11280: PUSH
11281: LD_INT 8
11283: EQUAL
11284: IFFALSE 11294
// sBunker := true ;
11286: LD_ADDR_EXP 25
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// if p3 = 9 then
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 9
11301: EQUAL
11302: IFFALSE 11312
// sHack := true ;
11304: LD_ADDR_EXP 26
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// if p3 = 10 then
11312: LD_VAR 0 3
11316: PUSH
11317: LD_INT 10
11319: EQUAL
11320: IFFALSE 11330
// sFire := true ;
11322: LD_ADDR_EXP 27
11326: PUSH
11327: LD_INT 1
11329: ST_TO_ADDR
// if p3 = 11 then
11330: LD_VAR 0 3
11334: PUSH
11335: LD_INT 11
11337: EQUAL
11338: IFFALSE 11348
// sRefresh := true ;
11340: LD_ADDR_EXP 28
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// if p3 = 12 then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 12
11355: EQUAL
11356: IFFALSE 11366
// sExp := true ;
11358: LD_ADDR_EXP 29
11362: PUSH
11363: LD_INT 1
11365: ST_TO_ADDR
// if p3 = 13 then
11366: LD_VAR 0 3
11370: PUSH
11371: LD_INT 13
11373: EQUAL
11374: IFFALSE 11384
// sDepot := true ;
11376: LD_ADDR_EXP 30
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// if p3 = 14 then
11384: LD_VAR 0 3
11388: PUSH
11389: LD_INT 14
11391: EQUAL
11392: IFFALSE 11402
// sFlag := true ;
11394: LD_ADDR_EXP 31
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// if p3 = 15 then
11402: LD_VAR 0 3
11406: PUSH
11407: LD_INT 15
11409: EQUAL
11410: IFFALSE 11420
// sKamikadze := true ;
11412: LD_ADDR_EXP 39
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
// if p3 = 16 then
11420: LD_VAR 0 3
11424: PUSH
11425: LD_INT 16
11427: EQUAL
11428: IFFALSE 11438
// sTroll := true ;
11430: LD_ADDR_EXP 40
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// if p3 = 17 then
11438: LD_VAR 0 3
11442: PUSH
11443: LD_INT 17
11445: EQUAL
11446: IFFALSE 11456
// sSlow := true ;
11448: LD_ADDR_EXP 41
11452: PUSH
11453: LD_INT 1
11455: ST_TO_ADDR
// if p3 = 18 then
11456: LD_VAR 0 3
11460: PUSH
11461: LD_INT 18
11463: EQUAL
11464: IFFALSE 11474
// sLack := true ;
11466: LD_ADDR_EXP 42
11470: PUSH
11471: LD_INT 1
11473: ST_TO_ADDR
// if p3 = 19 then
11474: LD_VAR 0 3
11478: PUSH
11479: LD_INT 19
11481: EQUAL
11482: IFFALSE 11492
// sTank := true ;
11484: LD_ADDR_EXP 44
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// if p3 = 20 then
11492: LD_VAR 0 3
11496: PUSH
11497: LD_INT 20
11499: EQUAL
11500: IFFALSE 11510
// sRemote := true ;
11502: LD_ADDR_EXP 45
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// if p3 = 21 then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_INT 21
11517: EQUAL
11518: IFFALSE 11528
// sPowell := true ;
11520: LD_ADDR_EXP 46
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if p3 = 22 then
11528: LD_VAR 0 3
11532: PUSH
11533: LD_INT 22
11535: EQUAL
11536: IFFALSE 11546
// sTeleport := true ;
11538: LD_ADDR_EXP 49
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// if p3 = 23 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 23
11553: EQUAL
11554: IFFALSE 11564
// sOilTower := true ;
11556: LD_ADDR_EXP 51
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// if p3 = 24 then
11564: LD_VAR 0 3
11568: PUSH
11569: LD_INT 24
11571: EQUAL
11572: IFFALSE 11582
// sShovel := true ;
11574: LD_ADDR_EXP 52
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// if p3 = 25 then
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 25
11589: EQUAL
11590: IFFALSE 11600
// sSheik := true ;
11592: LD_ADDR_EXP 53
11596: PUSH
11597: LD_INT 1
11599: ST_TO_ADDR
// if p3 = 26 then
11600: LD_VAR 0 3
11604: PUSH
11605: LD_INT 26
11607: EQUAL
11608: IFFALSE 11618
// sEarthquake := true ;
11610: LD_ADDR_EXP 55
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// if p3 = 27 then
11618: LD_VAR 0 3
11622: PUSH
11623: LD_INT 27
11625: EQUAL
11626: IFFALSE 11636
// sAI := true ;
11628: LD_ADDR_EXP 56
11632: PUSH
11633: LD_INT 1
11635: ST_TO_ADDR
// if p3 = 28 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 28
11643: EQUAL
11644: IFFALSE 11654
// sCargo := true ;
11646: LD_ADDR_EXP 59
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// if p3 = 29 then
11654: LD_VAR 0 3
11658: PUSH
11659: LD_INT 29
11661: EQUAL
11662: IFFALSE 11672
// sDLaser := true ;
11664: LD_ADDR_EXP 60
11668: PUSH
11669: LD_INT 1
11671: ST_TO_ADDR
// if p3 = 30 then
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 30
11679: EQUAL
11680: IFFALSE 11690
// sExchange := true ;
11682: LD_ADDR_EXP 61
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// if p3 = 31 then
11690: LD_VAR 0 3
11694: PUSH
11695: LD_INT 31
11697: EQUAL
11698: IFFALSE 11708
// sFac := true ;
11700: LD_ADDR_EXP 62
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// if p3 = 32 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 32
11715: EQUAL
11716: IFFALSE 11726
// sPower := true ;
11718: LD_ADDR_EXP 63
11722: PUSH
11723: LD_INT 1
11725: ST_TO_ADDR
// if p3 = 33 then
11726: LD_VAR 0 3
11730: PUSH
11731: LD_INT 33
11733: EQUAL
11734: IFFALSE 11744
// sRandom := true ;
11736: LD_ADDR_EXP 64
11740: PUSH
11741: LD_INT 1
11743: ST_TO_ADDR
// if p3 = 34 then
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 34
11751: EQUAL
11752: IFFALSE 11762
// sShield := true ;
11754: LD_ADDR_EXP 65
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if p3 = 35 then
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 35
11769: EQUAL
11770: IFFALSE 11780
// sTime := true ;
11772: LD_ADDR_EXP 66
11776: PUSH
11777: LD_INT 1
11779: ST_TO_ADDR
// if p3 = 36 then
11780: LD_VAR 0 3
11784: PUSH
11785: LD_INT 36
11787: EQUAL
11788: IFFALSE 11798
// sTools := true ;
11790: LD_ADDR_EXP 67
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// if p3 = 101 then
11798: LD_VAR 0 3
11802: PUSH
11803: LD_INT 101
11805: EQUAL
11806: IFFALSE 11816
// sSold := true ;
11808: LD_ADDR_EXP 32
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// if p3 = 102 then
11816: LD_VAR 0 3
11820: PUSH
11821: LD_INT 102
11823: EQUAL
11824: IFFALSE 11834
// sDiff := true ;
11826: LD_ADDR_EXP 33
11830: PUSH
11831: LD_INT 1
11833: ST_TO_ADDR
// if p3 = 103 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_INT 103
11841: EQUAL
11842: IFFALSE 11852
// sFog := true ;
11844: LD_ADDR_EXP 36
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// if p3 = 104 then
11852: LD_VAR 0 3
11856: PUSH
11857: LD_INT 104
11859: EQUAL
11860: IFFALSE 11870
// sReset := true ;
11862: LD_ADDR_EXP 37
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if p3 = 105 then
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 105
11877: EQUAL
11878: IFFALSE 11888
// sSun := true ;
11880: LD_ADDR_EXP 38
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// if p3 = 106 then
11888: LD_VAR 0 3
11892: PUSH
11893: LD_INT 106
11895: EQUAL
11896: IFFALSE 11906
// sTiger := true ;
11898: LD_ADDR_EXP 34
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// if p3 = 107 then
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 107
11913: EQUAL
11914: IFFALSE 11924
// sBomb := true ;
11916: LD_ADDR_EXP 35
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// if p3 = 108 then
11924: LD_VAR 0 3
11928: PUSH
11929: LD_INT 108
11931: EQUAL
11932: IFFALSE 11942
// sWound := true ;
11934: LD_ADDR_EXP 43
11938: PUSH
11939: LD_INT 1
11941: ST_TO_ADDR
// if p3 = 109 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 109
11949: EQUAL
11950: IFFALSE 11960
// sBetray := true ;
11952: LD_ADDR_EXP 47
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if p3 = 110 then
11960: LD_VAR 0 3
11964: PUSH
11965: LD_INT 110
11967: EQUAL
11968: IFFALSE 11978
// sContamin := true ;
11970: LD_ADDR_EXP 48
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// if p3 = 111 then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_INT 111
11985: EQUAL
11986: IFFALSE 11996
// sOil := true ;
11988: LD_ADDR_EXP 50
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// if p3 = 112 then
11996: LD_VAR 0 3
12000: PUSH
12001: LD_INT 112
12003: EQUAL
12004: IFFALSE 12014
// sStu := true ;
12006: LD_ADDR_EXP 54
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// if p3 = 113 then
12014: LD_VAR 0 3
12018: PUSH
12019: LD_INT 113
12021: EQUAL
12022: IFFALSE 12032
// sBazooka := true ;
12024: LD_ADDR_EXP 57
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// if p3 = 114 then
12032: LD_VAR 0 3
12036: PUSH
12037: LD_INT 114
12039: EQUAL
12040: IFFALSE 12050
// sMortar := true ;
12042: LD_ADDR_EXP 58
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// if p3 = 115 then
12050: LD_VAR 0 3
12054: PUSH
12055: LD_INT 115
12057: EQUAL
12058: IFFALSE 12068
// sRanger := true ;
12060: LD_ADDR_EXP 68
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// if p3 = 116 then
12068: LD_VAR 0 3
12072: PUSH
12073: LD_INT 116
12075: EQUAL
12076: IFFALSE 12086
// sComputer := true ;
12078: LD_ADDR_EXP 69
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// if p3 = 117 then
12086: LD_VAR 0 3
12090: PUSH
12091: LD_INT 117
12093: EQUAL
12094: IFFALSE 12104
// s30 := true ;
12096: LD_ADDR_EXP 70
12100: PUSH
12101: LD_INT 1
12103: ST_TO_ADDR
// if p3 = 118 then
12104: LD_VAR 0 3
12108: PUSH
12109: LD_INT 118
12111: EQUAL
12112: IFFALSE 12122
// s60 := true ;
12114: LD_ADDR_EXP 71
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ; if p2 = hack_mode then
12122: LD_VAR 0 2
12126: PUSH
12127: LD_INT 101
12129: EQUAL
12130: IFFALSE 12258
// begin case p3 of 1 :
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: DOUBLE
12140: EQUAL
12141: IFTRUE 12145
12143: GO 12152
12145: POP
// hHackUnlimitedResources ; 2 :
12146: CALL 24397 0 0
12150: GO 12258
12152: LD_INT 2
12154: DOUBLE
12155: EQUAL
12156: IFTRUE 12160
12158: GO 12167
12160: POP
// hHackSetLevel10 ; 3 :
12161: CALL 24530 0 0
12165: GO 12258
12167: LD_INT 3
12169: DOUBLE
12170: EQUAL
12171: IFTRUE 12175
12173: GO 12182
12175: POP
// hHackSetLevel10YourUnits ; 4 :
12176: CALL 24615 0 0
12180: GO 12258
12182: LD_INT 4
12184: DOUBLE
12185: EQUAL
12186: IFTRUE 12190
12188: GO 12197
12190: POP
// hHackInvincible ; 5 :
12191: CALL 25063 0 0
12195: GO 12258
12197: LD_INT 5
12199: DOUBLE
12200: EQUAL
12201: IFTRUE 12205
12203: GO 12212
12205: POP
// hHackInvisible ; 6 :
12206: CALL 25174 0 0
12210: GO 12258
12212: LD_INT 6
12214: DOUBLE
12215: EQUAL
12216: IFTRUE 12220
12218: GO 12227
12220: POP
// hHackChangeYourSide ; 7 :
12221: CALL 25231 0 0
12225: GO 12258
12227: LD_INT 7
12229: DOUBLE
12230: EQUAL
12231: IFTRUE 12235
12233: GO 12242
12235: POP
// hHackChangeUnitSide ; 8 :
12236: CALL 25273 0 0
12240: GO 12258
12242: LD_INT 8
12244: DOUBLE
12245: EQUAL
12246: IFTRUE 12250
12248: GO 12257
12250: POP
// hHackFog ; end ;
12251: CALL 25374 0 0
12255: GO 12258
12257: POP
// end ; if p2 = game_save_mode then
12258: LD_VAR 0 2
12262: PUSH
12263: LD_INT 102
12265: EQUAL
12266: IFFALSE 12321
// begin if p3 = 1 then
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 1
12275: EQUAL
12276: IFFALSE 12288
// globalGameSaveCounter := p4 ;
12278: LD_ADDR_EXP 14
12282: PUSH
12283: LD_VAR 0 4
12287: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12288: LD_VAR 0 3
12292: PUSH
12293: LD_INT 2
12295: EQUAL
12296: PUSH
12297: LD_EXP 14
12301: AND
12302: IFFALSE 12321
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12304: LD_STRING setGameSaveCounter(
12306: PUSH
12307: LD_EXP 14
12311: STR
12312: PUSH
12313: LD_STRING )
12315: STR
12316: PPUSH
12317: CALL_OW 559
// end ; end ;
12321: LD_VAR 0 7
12325: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12326: LD_INT 0
12328: PPUSH
// streamModeActive := false ;
12329: LD_ADDR_EXP 15
12333: PUSH
12334: LD_INT 0
12336: ST_TO_ADDR
// normalCounter := 36 ;
12337: LD_ADDR_EXP 16
12341: PUSH
12342: LD_INT 36
12344: ST_TO_ADDR
// hardcoreCounter := 18 ;
12345: LD_ADDR_EXP 17
12349: PUSH
12350: LD_INT 18
12352: ST_TO_ADDR
// sRocket := false ;
12353: LD_ADDR_EXP 20
12357: PUSH
12358: LD_INT 0
12360: ST_TO_ADDR
// sSpeed := false ;
12361: LD_ADDR_EXP 19
12365: PUSH
12366: LD_INT 0
12368: ST_TO_ADDR
// sEngine := false ;
12369: LD_ADDR_EXP 21
12373: PUSH
12374: LD_INT 0
12376: ST_TO_ADDR
// sSpec := false ;
12377: LD_ADDR_EXP 18
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// sLevel := false ;
12385: LD_ADDR_EXP 22
12389: PUSH
12390: LD_INT 0
12392: ST_TO_ADDR
// sArmoury := false ;
12393: LD_ADDR_EXP 23
12397: PUSH
12398: LD_INT 0
12400: ST_TO_ADDR
// sRadar := false ;
12401: LD_ADDR_EXP 24
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sBunker := false ;
12409: LD_ADDR_EXP 25
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sHack := false ;
12417: LD_ADDR_EXP 26
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sFire := false ;
12425: LD_ADDR_EXP 27
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sRefresh := false ;
12433: LD_ADDR_EXP 28
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sExp := false ;
12441: LD_ADDR_EXP 29
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sDepot := false ;
12449: LD_ADDR_EXP 30
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sFlag := false ;
12457: LD_ADDR_EXP 31
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sKamikadze := false ;
12465: LD_ADDR_EXP 39
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sTroll := false ;
12473: LD_ADDR_EXP 40
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sSlow := false ;
12481: LD_ADDR_EXP 41
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sLack := false ;
12489: LD_ADDR_EXP 42
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sTank := false ;
12497: LD_ADDR_EXP 44
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sRemote := false ;
12505: LD_ADDR_EXP 45
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sPowell := false ;
12513: LD_ADDR_EXP 46
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sTeleport := false ;
12521: LD_ADDR_EXP 49
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sOilTower := false ;
12529: LD_ADDR_EXP 51
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sShovel := false ;
12537: LD_ADDR_EXP 52
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sSheik := false ;
12545: LD_ADDR_EXP 53
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sEarthquake := false ;
12553: LD_ADDR_EXP 55
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sAI := false ;
12561: LD_ADDR_EXP 56
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sCargo := false ;
12569: LD_ADDR_EXP 59
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sDLaser := false ;
12577: LD_ADDR_EXP 60
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sExchange := false ;
12585: LD_ADDR_EXP 61
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sFac := false ;
12593: LD_ADDR_EXP 62
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sPower := false ;
12601: LD_ADDR_EXP 63
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sRandom := false ;
12609: LD_ADDR_EXP 64
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sShield := false ;
12617: LD_ADDR_EXP 65
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sTime := false ;
12625: LD_ADDR_EXP 66
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sTools := false ;
12633: LD_ADDR_EXP 67
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sSold := false ;
12641: LD_ADDR_EXP 32
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sDiff := false ;
12649: LD_ADDR_EXP 33
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sFog := false ;
12657: LD_ADDR_EXP 36
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sReset := false ;
12665: LD_ADDR_EXP 37
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sSun := false ;
12673: LD_ADDR_EXP 38
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sTiger := false ;
12681: LD_ADDR_EXP 34
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sBomb := false ;
12689: LD_ADDR_EXP 35
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sWound := false ;
12697: LD_ADDR_EXP 43
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sBetray := false ;
12705: LD_ADDR_EXP 47
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sContamin := false ;
12713: LD_ADDR_EXP 48
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sOil := false ;
12721: LD_ADDR_EXP 50
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sStu := false ;
12729: LD_ADDR_EXP 54
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sBazooka := false ;
12737: LD_ADDR_EXP 57
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sMortar := false ;
12745: LD_ADDR_EXP 58
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sRanger := false ;
12753: LD_ADDR_EXP 68
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sComputer := false ;
12761: LD_ADDR_EXP 69
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// s30 := false ;
12769: LD_ADDR_EXP 70
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// s60 := false ;
12777: LD_ADDR_EXP 71
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// end ;
12785: LD_VAR 0 1
12789: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12790: LD_INT 0
12792: PPUSH
12793: PPUSH
12794: PPUSH
12795: PPUSH
12796: PPUSH
12797: PPUSH
12798: PPUSH
// result := [ ] ;
12799: LD_ADDR_VAR 0 2
12803: PUSH
12804: EMPTY
12805: ST_TO_ADDR
// if campaign_id = 1 then
12806: LD_OWVAR 69
12810: PUSH
12811: LD_INT 1
12813: EQUAL
12814: IFFALSE 15980
// begin case mission_number of 1 :
12816: LD_OWVAR 70
12820: PUSH
12821: LD_INT 1
12823: DOUBLE
12824: EQUAL
12825: IFTRUE 12829
12827: GO 12905
12829: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12830: LD_ADDR_VAR 0 2
12834: PUSH
12835: LD_INT 2
12837: PUSH
12838: LD_INT 4
12840: PUSH
12841: LD_INT 11
12843: PUSH
12844: LD_INT 12
12846: PUSH
12847: LD_INT 15
12849: PUSH
12850: LD_INT 16
12852: PUSH
12853: LD_INT 22
12855: PUSH
12856: LD_INT 23
12858: PUSH
12859: LD_INT 26
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: PUSH
12873: LD_INT 101
12875: PUSH
12876: LD_INT 102
12878: PUSH
12879: LD_INT 106
12881: PUSH
12882: LD_INT 116
12884: PUSH
12885: LD_INT 117
12887: PUSH
12888: LD_INT 118
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: ST_TO_ADDR
12903: GO 15978
12905: LD_INT 2
12907: DOUBLE
12908: EQUAL
12909: IFTRUE 12913
12911: GO 12997
12913: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12914: LD_ADDR_VAR 0 2
12918: PUSH
12919: LD_INT 2
12921: PUSH
12922: LD_INT 4
12924: PUSH
12925: LD_INT 11
12927: PUSH
12928: LD_INT 12
12930: PUSH
12931: LD_INT 15
12933: PUSH
12934: LD_INT 16
12936: PUSH
12937: LD_INT 22
12939: PUSH
12940: LD_INT 23
12942: PUSH
12943: LD_INT 26
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 101
12959: PUSH
12960: LD_INT 102
12962: PUSH
12963: LD_INT 105
12965: PUSH
12966: LD_INT 106
12968: PUSH
12969: LD_INT 108
12971: PUSH
12972: LD_INT 116
12974: PUSH
12975: LD_INT 117
12977: PUSH
12978: LD_INT 118
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: ST_TO_ADDR
12995: GO 15978
12997: LD_INT 3
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13093
13005: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13006: LD_ADDR_VAR 0 2
13010: PUSH
13011: LD_INT 2
13013: PUSH
13014: LD_INT 4
13016: PUSH
13017: LD_INT 5
13019: PUSH
13020: LD_INT 11
13022: PUSH
13023: LD_INT 12
13025: PUSH
13026: LD_INT 15
13028: PUSH
13029: LD_INT 16
13031: PUSH
13032: LD_INT 22
13034: PUSH
13035: LD_INT 26
13037: PUSH
13038: LD_INT 36
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 101
13055: PUSH
13056: LD_INT 102
13058: PUSH
13059: LD_INT 105
13061: PUSH
13062: LD_INT 106
13064: PUSH
13065: LD_INT 108
13067: PUSH
13068: LD_INT 116
13070: PUSH
13071: LD_INT 117
13073: PUSH
13074: LD_INT 118
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: ST_TO_ADDR
13091: GO 15978
13093: LD_INT 4
13095: DOUBLE
13096: EQUAL
13097: IFTRUE 13101
13099: GO 13197
13101: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13102: LD_ADDR_VAR 0 2
13106: PUSH
13107: LD_INT 2
13109: PUSH
13110: LD_INT 4
13112: PUSH
13113: LD_INT 5
13115: PUSH
13116: LD_INT 8
13118: PUSH
13119: LD_INT 11
13121: PUSH
13122: LD_INT 12
13124: PUSH
13125: LD_INT 15
13127: PUSH
13128: LD_INT 16
13130: PUSH
13131: LD_INT 22
13133: PUSH
13134: LD_INT 23
13136: PUSH
13137: LD_INT 26
13139: PUSH
13140: LD_INT 36
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 101
13159: PUSH
13160: LD_INT 102
13162: PUSH
13163: LD_INT 105
13165: PUSH
13166: LD_INT 106
13168: PUSH
13169: LD_INT 108
13171: PUSH
13172: LD_INT 116
13174: PUSH
13175: LD_INT 117
13177: PUSH
13178: LD_INT 118
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: ST_TO_ADDR
13195: GO 15978
13197: LD_INT 5
13199: DOUBLE
13200: EQUAL
13201: IFTRUE 13205
13203: GO 13317
13205: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13206: LD_ADDR_VAR 0 2
13210: PUSH
13211: LD_INT 2
13213: PUSH
13214: LD_INT 4
13216: PUSH
13217: LD_INT 5
13219: PUSH
13220: LD_INT 6
13222: PUSH
13223: LD_INT 8
13225: PUSH
13226: LD_INT 11
13228: PUSH
13229: LD_INT 12
13231: PUSH
13232: LD_INT 15
13234: PUSH
13235: LD_INT 16
13237: PUSH
13238: LD_INT 22
13240: PUSH
13241: LD_INT 23
13243: PUSH
13244: LD_INT 25
13246: PUSH
13247: LD_INT 26
13249: PUSH
13250: LD_INT 36
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: PUSH
13269: LD_INT 101
13271: PUSH
13272: LD_INT 102
13274: PUSH
13275: LD_INT 105
13277: PUSH
13278: LD_INT 106
13280: PUSH
13281: LD_INT 108
13283: PUSH
13284: LD_INT 109
13286: PUSH
13287: LD_INT 112
13289: PUSH
13290: LD_INT 116
13292: PUSH
13293: LD_INT 117
13295: PUSH
13296: LD_INT 118
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: ST_TO_ADDR
13315: GO 15978
13317: LD_INT 6
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13457
13325: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: LD_INT 4
13336: PUSH
13337: LD_INT 5
13339: PUSH
13340: LD_INT 6
13342: PUSH
13343: LD_INT 8
13345: PUSH
13346: LD_INT 11
13348: PUSH
13349: LD_INT 12
13351: PUSH
13352: LD_INT 15
13354: PUSH
13355: LD_INT 16
13357: PUSH
13358: LD_INT 20
13360: PUSH
13361: LD_INT 21
13363: PUSH
13364: LD_INT 22
13366: PUSH
13367: LD_INT 23
13369: PUSH
13370: LD_INT 25
13372: PUSH
13373: LD_INT 26
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 31
13381: PUSH
13382: LD_INT 32
13384: PUSH
13385: LD_INT 36
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 101
13411: PUSH
13412: LD_INT 102
13414: PUSH
13415: LD_INT 105
13417: PUSH
13418: LD_INT 106
13420: PUSH
13421: LD_INT 108
13423: PUSH
13424: LD_INT 109
13426: PUSH
13427: LD_INT 112
13429: PUSH
13430: LD_INT 116
13432: PUSH
13433: LD_INT 117
13435: PUSH
13436: LD_INT 118
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: ST_TO_ADDR
13455: GO 15978
13457: LD_INT 7
13459: DOUBLE
13460: EQUAL
13461: IFTRUE 13465
13463: GO 13577
13465: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13466: LD_ADDR_VAR 0 2
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: LD_INT 4
13476: PUSH
13477: LD_INT 5
13479: PUSH
13480: LD_INT 7
13482: PUSH
13483: LD_INT 11
13485: PUSH
13486: LD_INT 12
13488: PUSH
13489: LD_INT 15
13491: PUSH
13492: LD_INT 16
13494: PUSH
13495: LD_INT 20
13497: PUSH
13498: LD_INT 21
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 23
13506: PUSH
13507: LD_INT 25
13509: PUSH
13510: LD_INT 26
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 101
13531: PUSH
13532: LD_INT 102
13534: PUSH
13535: LD_INT 103
13537: PUSH
13538: LD_INT 105
13540: PUSH
13541: LD_INT 106
13543: PUSH
13544: LD_INT 108
13546: PUSH
13547: LD_INT 112
13549: PUSH
13550: LD_INT 116
13552: PUSH
13553: LD_INT 117
13555: PUSH
13556: LD_INT 118
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: ST_TO_ADDR
13575: GO 15978
13577: LD_INT 8
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13725
13585: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13586: LD_ADDR_VAR 0 2
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 4
13596: PUSH
13597: LD_INT 5
13599: PUSH
13600: LD_INT 6
13602: PUSH
13603: LD_INT 7
13605: PUSH
13606: LD_INT 8
13608: PUSH
13609: LD_INT 11
13611: PUSH
13612: LD_INT 12
13614: PUSH
13615: LD_INT 15
13617: PUSH
13618: LD_INT 16
13620: PUSH
13621: LD_INT 20
13623: PUSH
13624: LD_INT 21
13626: PUSH
13627: LD_INT 22
13629: PUSH
13630: LD_INT 23
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 26
13638: PUSH
13639: LD_INT 30
13641: PUSH
13642: LD_INT 31
13644: PUSH
13645: LD_INT 32
13647: PUSH
13648: LD_INT 36
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 101
13675: PUSH
13676: LD_INT 102
13678: PUSH
13679: LD_INT 103
13681: PUSH
13682: LD_INT 105
13684: PUSH
13685: LD_INT 106
13687: PUSH
13688: LD_INT 108
13690: PUSH
13691: LD_INT 109
13693: PUSH
13694: LD_INT 112
13696: PUSH
13697: LD_INT 116
13699: PUSH
13700: LD_INT 117
13702: PUSH
13703: LD_INT 118
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: ST_TO_ADDR
13723: GO 15978
13725: LD_INT 9
13727: DOUBLE
13728: EQUAL
13729: IFTRUE 13733
13731: GO 13881
13733: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13734: LD_ADDR_VAR 0 2
13738: PUSH
13739: LD_INT 2
13741: PUSH
13742: LD_INT 4
13744: PUSH
13745: LD_INT 5
13747: PUSH
13748: LD_INT 6
13750: PUSH
13751: LD_INT 7
13753: PUSH
13754: LD_INT 8
13756: PUSH
13757: LD_INT 11
13759: PUSH
13760: LD_INT 12
13762: PUSH
13763: LD_INT 15
13765: PUSH
13766: LD_INT 16
13768: PUSH
13769: LD_INT 20
13771: PUSH
13772: LD_INT 21
13774: PUSH
13775: LD_INT 22
13777: PUSH
13778: LD_INT 23
13780: PUSH
13781: LD_INT 25
13783: PUSH
13784: LD_INT 26
13786: PUSH
13787: LD_INT 28
13789: PUSH
13790: LD_INT 30
13792: PUSH
13793: LD_INT 31
13795: PUSH
13796: LD_INT 32
13798: PUSH
13799: LD_INT 36
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 101
13827: PUSH
13828: LD_INT 102
13830: PUSH
13831: LD_INT 103
13833: PUSH
13834: LD_INT 105
13836: PUSH
13837: LD_INT 106
13839: PUSH
13840: LD_INT 108
13842: PUSH
13843: LD_INT 109
13845: PUSH
13846: LD_INT 112
13848: PUSH
13849: LD_INT 114
13851: PUSH
13852: LD_INT 116
13854: PUSH
13855: LD_INT 117
13857: PUSH
13858: LD_INT 118
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: ST_TO_ADDR
13879: GO 15978
13881: LD_INT 10
13883: DOUBLE
13884: EQUAL
13885: IFTRUE 13889
13887: GO 14085
13889: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13890: LD_ADDR_VAR 0 2
13894: PUSH
13895: LD_INT 2
13897: PUSH
13898: LD_INT 4
13900: PUSH
13901: LD_INT 5
13903: PUSH
13904: LD_INT 6
13906: PUSH
13907: LD_INT 7
13909: PUSH
13910: LD_INT 8
13912: PUSH
13913: LD_INT 9
13915: PUSH
13916: LD_INT 10
13918: PUSH
13919: LD_INT 11
13921: PUSH
13922: LD_INT 12
13924: PUSH
13925: LD_INT 13
13927: PUSH
13928: LD_INT 14
13930: PUSH
13931: LD_INT 15
13933: PUSH
13934: LD_INT 16
13936: PUSH
13937: LD_INT 17
13939: PUSH
13940: LD_INT 18
13942: PUSH
13943: LD_INT 19
13945: PUSH
13946: LD_INT 20
13948: PUSH
13949: LD_INT 21
13951: PUSH
13952: LD_INT 22
13954: PUSH
13955: LD_INT 23
13957: PUSH
13958: LD_INT 24
13960: PUSH
13961: LD_INT 25
13963: PUSH
13964: LD_INT 26
13966: PUSH
13967: LD_INT 28
13969: PUSH
13970: LD_INT 30
13972: PUSH
13973: LD_INT 31
13975: PUSH
13976: LD_INT 32
13978: PUSH
13979: LD_INT 36
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 101
14015: PUSH
14016: LD_INT 102
14018: PUSH
14019: LD_INT 103
14021: PUSH
14022: LD_INT 104
14024: PUSH
14025: LD_INT 105
14027: PUSH
14028: LD_INT 106
14030: PUSH
14031: LD_INT 107
14033: PUSH
14034: LD_INT 108
14036: PUSH
14037: LD_INT 109
14039: PUSH
14040: LD_INT 110
14042: PUSH
14043: LD_INT 111
14045: PUSH
14046: LD_INT 112
14048: PUSH
14049: LD_INT 114
14051: PUSH
14052: LD_INT 116
14054: PUSH
14055: LD_INT 117
14057: PUSH
14058: LD_INT 118
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: ST_TO_ADDR
14083: GO 15978
14085: LD_INT 11
14087: DOUBLE
14088: EQUAL
14089: IFTRUE 14093
14091: GO 14297
14093: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: LD_INT 3
14104: PUSH
14105: LD_INT 4
14107: PUSH
14108: LD_INT 5
14110: PUSH
14111: LD_INT 6
14113: PUSH
14114: LD_INT 7
14116: PUSH
14117: LD_INT 8
14119: PUSH
14120: LD_INT 9
14122: PUSH
14123: LD_INT 10
14125: PUSH
14126: LD_INT 11
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: LD_INT 13
14134: PUSH
14135: LD_INT 14
14137: PUSH
14138: LD_INT 15
14140: PUSH
14141: LD_INT 16
14143: PUSH
14144: LD_INT 17
14146: PUSH
14147: LD_INT 18
14149: PUSH
14150: LD_INT 19
14152: PUSH
14153: LD_INT 20
14155: PUSH
14156: LD_INT 21
14158: PUSH
14159: LD_INT 22
14161: PUSH
14162: LD_INT 23
14164: PUSH
14165: LD_INT 24
14167: PUSH
14168: LD_INT 25
14170: PUSH
14171: LD_INT 26
14173: PUSH
14174: LD_INT 28
14176: PUSH
14177: LD_INT 30
14179: PUSH
14180: LD_INT 31
14182: PUSH
14183: LD_INT 32
14185: PUSH
14186: LD_INT 34
14188: PUSH
14189: LD_INT 36
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 101
14227: PUSH
14228: LD_INT 102
14230: PUSH
14231: LD_INT 103
14233: PUSH
14234: LD_INT 104
14236: PUSH
14237: LD_INT 105
14239: PUSH
14240: LD_INT 106
14242: PUSH
14243: LD_INT 107
14245: PUSH
14246: LD_INT 108
14248: PUSH
14249: LD_INT 109
14251: PUSH
14252: LD_INT 110
14254: PUSH
14255: LD_INT 111
14257: PUSH
14258: LD_INT 112
14260: PUSH
14261: LD_INT 114
14263: PUSH
14264: LD_INT 116
14266: PUSH
14267: LD_INT 117
14269: PUSH
14270: LD_INT 118
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: ST_TO_ADDR
14295: GO 15978
14297: LD_INT 12
14299: DOUBLE
14300: EQUAL
14301: IFTRUE 14305
14303: GO 14525
14305: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14306: LD_ADDR_VAR 0 2
14310: PUSH
14311: LD_INT 1
14313: PUSH
14314: LD_INT 2
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: LD_INT 4
14322: PUSH
14323: LD_INT 5
14325: PUSH
14326: LD_INT 6
14328: PUSH
14329: LD_INT 7
14331: PUSH
14332: LD_INT 8
14334: PUSH
14335: LD_INT 9
14337: PUSH
14338: LD_INT 10
14340: PUSH
14341: LD_INT 11
14343: PUSH
14344: LD_INT 12
14346: PUSH
14347: LD_INT 13
14349: PUSH
14350: LD_INT 14
14352: PUSH
14353: LD_INT 15
14355: PUSH
14356: LD_INT 16
14358: PUSH
14359: LD_INT 17
14361: PUSH
14362: LD_INT 18
14364: PUSH
14365: LD_INT 19
14367: PUSH
14368: LD_INT 20
14370: PUSH
14371: LD_INT 21
14373: PUSH
14374: LD_INT 22
14376: PUSH
14377: LD_INT 23
14379: PUSH
14380: LD_INT 24
14382: PUSH
14383: LD_INT 25
14385: PUSH
14386: LD_INT 26
14388: PUSH
14389: LD_INT 27
14391: PUSH
14392: LD_INT 28
14394: PUSH
14395: LD_INT 30
14397: PUSH
14398: LD_INT 31
14400: PUSH
14401: LD_INT 32
14403: PUSH
14404: LD_INT 33
14406: PUSH
14407: LD_INT 34
14409: PUSH
14410: LD_INT 36
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 101
14451: PUSH
14452: LD_INT 102
14454: PUSH
14455: LD_INT 103
14457: PUSH
14458: LD_INT 104
14460: PUSH
14461: LD_INT 105
14463: PUSH
14464: LD_INT 106
14466: PUSH
14467: LD_INT 107
14469: PUSH
14470: LD_INT 108
14472: PUSH
14473: LD_INT 109
14475: PUSH
14476: LD_INT 110
14478: PUSH
14479: LD_INT 111
14481: PUSH
14482: LD_INT 112
14484: PUSH
14485: LD_INT 113
14487: PUSH
14488: LD_INT 114
14490: PUSH
14491: LD_INT 116
14493: PUSH
14494: LD_INT 117
14496: PUSH
14497: LD_INT 118
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: ST_TO_ADDR
14523: GO 15978
14525: LD_INT 13
14527: DOUBLE
14528: EQUAL
14529: IFTRUE 14533
14531: GO 14741
14533: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14534: LD_ADDR_VAR 0 2
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: LD_INT 2
14544: PUSH
14545: LD_INT 3
14547: PUSH
14548: LD_INT 4
14550: PUSH
14551: LD_INT 5
14553: PUSH
14554: LD_INT 8
14556: PUSH
14557: LD_INT 9
14559: PUSH
14560: LD_INT 10
14562: PUSH
14563: LD_INT 11
14565: PUSH
14566: LD_INT 12
14568: PUSH
14569: LD_INT 14
14571: PUSH
14572: LD_INT 15
14574: PUSH
14575: LD_INT 16
14577: PUSH
14578: LD_INT 17
14580: PUSH
14581: LD_INT 18
14583: PUSH
14584: LD_INT 19
14586: PUSH
14587: LD_INT 20
14589: PUSH
14590: LD_INT 21
14592: PUSH
14593: LD_INT 22
14595: PUSH
14596: LD_INT 23
14598: PUSH
14599: LD_INT 24
14601: PUSH
14602: LD_INT 25
14604: PUSH
14605: LD_INT 26
14607: PUSH
14608: LD_INT 27
14610: PUSH
14611: LD_INT 28
14613: PUSH
14614: LD_INT 30
14616: PUSH
14617: LD_INT 31
14619: PUSH
14620: LD_INT 32
14622: PUSH
14623: LD_INT 33
14625: PUSH
14626: LD_INT 34
14628: PUSH
14629: LD_INT 36
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 101
14667: PUSH
14668: LD_INT 102
14670: PUSH
14671: LD_INT 103
14673: PUSH
14674: LD_INT 104
14676: PUSH
14677: LD_INT 105
14679: PUSH
14680: LD_INT 106
14682: PUSH
14683: LD_INT 107
14685: PUSH
14686: LD_INT 108
14688: PUSH
14689: LD_INT 109
14691: PUSH
14692: LD_INT 110
14694: PUSH
14695: LD_INT 111
14697: PUSH
14698: LD_INT 112
14700: PUSH
14701: LD_INT 113
14703: PUSH
14704: LD_INT 114
14706: PUSH
14707: LD_INT 116
14709: PUSH
14710: LD_INT 117
14712: PUSH
14713: LD_INT 118
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: ST_TO_ADDR
14739: GO 15978
14741: LD_INT 14
14743: DOUBLE
14744: EQUAL
14745: IFTRUE 14749
14747: GO 14973
14749: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14750: LD_ADDR_VAR 0 2
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: LD_INT 2
14760: PUSH
14761: LD_INT 3
14763: PUSH
14764: LD_INT 4
14766: PUSH
14767: LD_INT 5
14769: PUSH
14770: LD_INT 6
14772: PUSH
14773: LD_INT 7
14775: PUSH
14776: LD_INT 8
14778: PUSH
14779: LD_INT 9
14781: PUSH
14782: LD_INT 10
14784: PUSH
14785: LD_INT 11
14787: PUSH
14788: LD_INT 12
14790: PUSH
14791: LD_INT 13
14793: PUSH
14794: LD_INT 14
14796: PUSH
14797: LD_INT 15
14799: PUSH
14800: LD_INT 16
14802: PUSH
14803: LD_INT 17
14805: PUSH
14806: LD_INT 18
14808: PUSH
14809: LD_INT 19
14811: PUSH
14812: LD_INT 20
14814: PUSH
14815: LD_INT 21
14817: PUSH
14818: LD_INT 22
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 24
14826: PUSH
14827: LD_INT 25
14829: PUSH
14830: LD_INT 26
14832: PUSH
14833: LD_INT 27
14835: PUSH
14836: LD_INT 28
14838: PUSH
14839: LD_INT 29
14841: PUSH
14842: LD_INT 30
14844: PUSH
14845: LD_INT 31
14847: PUSH
14848: LD_INT 32
14850: PUSH
14851: LD_INT 33
14853: PUSH
14854: LD_INT 34
14856: PUSH
14857: LD_INT 36
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 101
14899: PUSH
14900: LD_INT 102
14902: PUSH
14903: LD_INT 103
14905: PUSH
14906: LD_INT 104
14908: PUSH
14909: LD_INT 105
14911: PUSH
14912: LD_INT 106
14914: PUSH
14915: LD_INT 107
14917: PUSH
14918: LD_INT 108
14920: PUSH
14921: LD_INT 109
14923: PUSH
14924: LD_INT 110
14926: PUSH
14927: LD_INT 111
14929: PUSH
14930: LD_INT 112
14932: PUSH
14933: LD_INT 113
14935: PUSH
14936: LD_INT 114
14938: PUSH
14939: LD_INT 116
14941: PUSH
14942: LD_INT 117
14944: PUSH
14945: LD_INT 118
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: ST_TO_ADDR
14971: GO 15978
14973: LD_INT 15
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 15205
14981: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14982: LD_ADDR_VAR 0 2
14986: PUSH
14987: LD_INT 1
14989: PUSH
14990: LD_INT 2
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 4
14998: PUSH
14999: LD_INT 5
15001: PUSH
15002: LD_INT 6
15004: PUSH
15005: LD_INT 7
15007: PUSH
15008: LD_INT 8
15010: PUSH
15011: LD_INT 9
15013: PUSH
15014: LD_INT 10
15016: PUSH
15017: LD_INT 11
15019: PUSH
15020: LD_INT 12
15022: PUSH
15023: LD_INT 13
15025: PUSH
15026: LD_INT 14
15028: PUSH
15029: LD_INT 15
15031: PUSH
15032: LD_INT 16
15034: PUSH
15035: LD_INT 17
15037: PUSH
15038: LD_INT 18
15040: PUSH
15041: LD_INT 19
15043: PUSH
15044: LD_INT 20
15046: PUSH
15047: LD_INT 21
15049: PUSH
15050: LD_INT 22
15052: PUSH
15053: LD_INT 23
15055: PUSH
15056: LD_INT 24
15058: PUSH
15059: LD_INT 25
15061: PUSH
15062: LD_INT 26
15064: PUSH
15065: LD_INT 27
15067: PUSH
15068: LD_INT 28
15070: PUSH
15071: LD_INT 29
15073: PUSH
15074: LD_INT 30
15076: PUSH
15077: LD_INT 31
15079: PUSH
15080: LD_INT 32
15082: PUSH
15083: LD_INT 33
15085: PUSH
15086: LD_INT 34
15088: PUSH
15089: LD_INT 36
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 101
15131: PUSH
15132: LD_INT 102
15134: PUSH
15135: LD_INT 103
15137: PUSH
15138: LD_INT 104
15140: PUSH
15141: LD_INT 105
15143: PUSH
15144: LD_INT 106
15146: PUSH
15147: LD_INT 107
15149: PUSH
15150: LD_INT 108
15152: PUSH
15153: LD_INT 109
15155: PUSH
15156: LD_INT 110
15158: PUSH
15159: LD_INT 111
15161: PUSH
15162: LD_INT 112
15164: PUSH
15165: LD_INT 113
15167: PUSH
15168: LD_INT 114
15170: PUSH
15171: LD_INT 116
15173: PUSH
15174: LD_INT 117
15176: PUSH
15177: LD_INT 118
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: ST_TO_ADDR
15203: GO 15978
15205: LD_INT 16
15207: DOUBLE
15208: EQUAL
15209: IFTRUE 15213
15211: GO 15349
15213: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15214: LD_ADDR_VAR 0 2
15218: PUSH
15219: LD_INT 2
15221: PUSH
15222: LD_INT 4
15224: PUSH
15225: LD_INT 5
15227: PUSH
15228: LD_INT 7
15230: PUSH
15231: LD_INT 11
15233: PUSH
15234: LD_INT 12
15236: PUSH
15237: LD_INT 15
15239: PUSH
15240: LD_INT 16
15242: PUSH
15243: LD_INT 20
15245: PUSH
15246: LD_INT 21
15248: PUSH
15249: LD_INT 22
15251: PUSH
15252: LD_INT 23
15254: PUSH
15255: LD_INT 25
15257: PUSH
15258: LD_INT 26
15260: PUSH
15261: LD_INT 30
15263: PUSH
15264: LD_INT 31
15266: PUSH
15267: LD_INT 32
15269: PUSH
15270: LD_INT 33
15272: PUSH
15273: LD_INT 34
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 101
15299: PUSH
15300: LD_INT 102
15302: PUSH
15303: LD_INT 103
15305: PUSH
15306: LD_INT 106
15308: PUSH
15309: LD_INT 108
15311: PUSH
15312: LD_INT 112
15314: PUSH
15315: LD_INT 113
15317: PUSH
15318: LD_INT 114
15320: PUSH
15321: LD_INT 116
15323: PUSH
15324: LD_INT 117
15326: PUSH
15327: LD_INT 118
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: ST_TO_ADDR
15347: GO 15978
15349: LD_INT 17
15351: DOUBLE
15352: EQUAL
15353: IFTRUE 15357
15355: GO 15581
15357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: LD_INT 2
15368: PUSH
15369: LD_INT 3
15371: PUSH
15372: LD_INT 4
15374: PUSH
15375: LD_INT 5
15377: PUSH
15378: LD_INT 6
15380: PUSH
15381: LD_INT 7
15383: PUSH
15384: LD_INT 8
15386: PUSH
15387: LD_INT 9
15389: PUSH
15390: LD_INT 10
15392: PUSH
15393: LD_INT 11
15395: PUSH
15396: LD_INT 12
15398: PUSH
15399: LD_INT 13
15401: PUSH
15402: LD_INT 14
15404: PUSH
15405: LD_INT 15
15407: PUSH
15408: LD_INT 16
15410: PUSH
15411: LD_INT 17
15413: PUSH
15414: LD_INT 18
15416: PUSH
15417: LD_INT 19
15419: PUSH
15420: LD_INT 20
15422: PUSH
15423: LD_INT 21
15425: PUSH
15426: LD_INT 22
15428: PUSH
15429: LD_INT 23
15431: PUSH
15432: LD_INT 24
15434: PUSH
15435: LD_INT 25
15437: PUSH
15438: LD_INT 26
15440: PUSH
15441: LD_INT 27
15443: PUSH
15444: LD_INT 28
15446: PUSH
15447: LD_INT 29
15449: PUSH
15450: LD_INT 30
15452: PUSH
15453: LD_INT 31
15455: PUSH
15456: LD_INT 32
15458: PUSH
15459: LD_INT 33
15461: PUSH
15462: LD_INT 34
15464: PUSH
15465: LD_INT 36
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 101
15507: PUSH
15508: LD_INT 102
15510: PUSH
15511: LD_INT 103
15513: PUSH
15514: LD_INT 104
15516: PUSH
15517: LD_INT 105
15519: PUSH
15520: LD_INT 106
15522: PUSH
15523: LD_INT 107
15525: PUSH
15526: LD_INT 108
15528: PUSH
15529: LD_INT 109
15531: PUSH
15532: LD_INT 110
15534: PUSH
15535: LD_INT 111
15537: PUSH
15538: LD_INT 112
15540: PUSH
15541: LD_INT 113
15543: PUSH
15544: LD_INT 114
15546: PUSH
15547: LD_INT 116
15549: PUSH
15550: LD_INT 117
15552: PUSH
15553: LD_INT 118
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
15579: GO 15978
15581: LD_INT 18
15583: DOUBLE
15584: EQUAL
15585: IFTRUE 15589
15587: GO 15737
15589: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15590: LD_ADDR_VAR 0 2
15594: PUSH
15595: LD_INT 2
15597: PUSH
15598: LD_INT 4
15600: PUSH
15601: LD_INT 5
15603: PUSH
15604: LD_INT 7
15606: PUSH
15607: LD_INT 11
15609: PUSH
15610: LD_INT 12
15612: PUSH
15613: LD_INT 15
15615: PUSH
15616: LD_INT 16
15618: PUSH
15619: LD_INT 20
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 22
15627: PUSH
15628: LD_INT 23
15630: PUSH
15631: LD_INT 25
15633: PUSH
15634: LD_INT 26
15636: PUSH
15637: LD_INT 30
15639: PUSH
15640: LD_INT 31
15642: PUSH
15643: LD_INT 32
15645: PUSH
15646: LD_INT 33
15648: PUSH
15649: LD_INT 34
15651: PUSH
15652: LD_INT 35
15654: PUSH
15655: LD_INT 36
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 101
15683: PUSH
15684: LD_INT 102
15686: PUSH
15687: LD_INT 103
15689: PUSH
15690: LD_INT 106
15692: PUSH
15693: LD_INT 108
15695: PUSH
15696: LD_INT 112
15698: PUSH
15699: LD_INT 113
15701: PUSH
15702: LD_INT 114
15704: PUSH
15705: LD_INT 115
15707: PUSH
15708: LD_INT 116
15710: PUSH
15711: LD_INT 117
15713: PUSH
15714: LD_INT 118
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: ST_TO_ADDR
15735: GO 15978
15737: LD_INT 19
15739: DOUBLE
15740: EQUAL
15741: IFTRUE 15745
15743: GO 15977
15745: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15746: LD_ADDR_VAR 0 2
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 3
15759: PUSH
15760: LD_INT 4
15762: PUSH
15763: LD_INT 5
15765: PUSH
15766: LD_INT 6
15768: PUSH
15769: LD_INT 7
15771: PUSH
15772: LD_INT 8
15774: PUSH
15775: LD_INT 9
15777: PUSH
15778: LD_INT 10
15780: PUSH
15781: LD_INT 11
15783: PUSH
15784: LD_INT 12
15786: PUSH
15787: LD_INT 13
15789: PUSH
15790: LD_INT 14
15792: PUSH
15793: LD_INT 15
15795: PUSH
15796: LD_INT 16
15798: PUSH
15799: LD_INT 17
15801: PUSH
15802: LD_INT 18
15804: PUSH
15805: LD_INT 19
15807: PUSH
15808: LD_INT 20
15810: PUSH
15811: LD_INT 21
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_INT 23
15819: PUSH
15820: LD_INT 24
15822: PUSH
15823: LD_INT 25
15825: PUSH
15826: LD_INT 26
15828: PUSH
15829: LD_INT 27
15831: PUSH
15832: LD_INT 28
15834: PUSH
15835: LD_INT 29
15837: PUSH
15838: LD_INT 30
15840: PUSH
15841: LD_INT 31
15843: PUSH
15844: LD_INT 32
15846: PUSH
15847: LD_INT 33
15849: PUSH
15850: LD_INT 34
15852: PUSH
15853: LD_INT 35
15855: PUSH
15856: LD_INT 36
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 101
15899: PUSH
15900: LD_INT 102
15902: PUSH
15903: LD_INT 103
15905: PUSH
15906: LD_INT 104
15908: PUSH
15909: LD_INT 105
15911: PUSH
15912: LD_INT 106
15914: PUSH
15915: LD_INT 107
15917: PUSH
15918: LD_INT 108
15920: PUSH
15921: LD_INT 109
15923: PUSH
15924: LD_INT 110
15926: PUSH
15927: LD_INT 111
15929: PUSH
15930: LD_INT 112
15932: PUSH
15933: LD_INT 113
15935: PUSH
15936: LD_INT 114
15938: PUSH
15939: LD_INT 115
15941: PUSH
15942: LD_INT 116
15944: PUSH
15945: LD_INT 117
15947: PUSH
15948: LD_INT 118
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: ST_TO_ADDR
15975: GO 15978
15977: POP
// end else
15978: GO 16209
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15980: LD_ADDR_VAR 0 2
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: LD_INT 3
15993: PUSH
15994: LD_INT 4
15996: PUSH
15997: LD_INT 5
15999: PUSH
16000: LD_INT 6
16002: PUSH
16003: LD_INT 7
16005: PUSH
16006: LD_INT 8
16008: PUSH
16009: LD_INT 9
16011: PUSH
16012: LD_INT 10
16014: PUSH
16015: LD_INT 11
16017: PUSH
16018: LD_INT 12
16020: PUSH
16021: LD_INT 13
16023: PUSH
16024: LD_INT 14
16026: PUSH
16027: LD_INT 15
16029: PUSH
16030: LD_INT 16
16032: PUSH
16033: LD_INT 17
16035: PUSH
16036: LD_INT 18
16038: PUSH
16039: LD_INT 19
16041: PUSH
16042: LD_INT 20
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 22
16050: PUSH
16051: LD_INT 23
16053: PUSH
16054: LD_INT 24
16056: PUSH
16057: LD_INT 25
16059: PUSH
16060: LD_INT 26
16062: PUSH
16063: LD_INT 27
16065: PUSH
16066: LD_INT 28
16068: PUSH
16069: LD_INT 29
16071: PUSH
16072: LD_INT 30
16074: PUSH
16075: LD_INT 31
16077: PUSH
16078: LD_INT 32
16080: PUSH
16081: LD_INT 33
16083: PUSH
16084: LD_INT 34
16086: PUSH
16087: LD_INT 35
16089: PUSH
16090: LD_INT 36
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 101
16133: PUSH
16134: LD_INT 102
16136: PUSH
16137: LD_INT 103
16139: PUSH
16140: LD_INT 104
16142: PUSH
16143: LD_INT 105
16145: PUSH
16146: LD_INT 106
16148: PUSH
16149: LD_INT 107
16151: PUSH
16152: LD_INT 108
16154: PUSH
16155: LD_INT 109
16157: PUSH
16158: LD_INT 110
16160: PUSH
16161: LD_INT 111
16163: PUSH
16164: LD_INT 112
16166: PUSH
16167: LD_INT 113
16169: PUSH
16170: LD_INT 114
16172: PUSH
16173: LD_INT 115
16175: PUSH
16176: LD_INT 116
16178: PUSH
16179: LD_INT 117
16181: PUSH
16182: LD_INT 118
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: ST_TO_ADDR
// if result then
16209: LD_VAR 0 2
16213: IFFALSE 16999
// begin normal :=  ;
16215: LD_ADDR_VAR 0 5
16219: PUSH
16220: LD_STRING 
16222: ST_TO_ADDR
// hardcore :=  ;
16223: LD_ADDR_VAR 0 6
16227: PUSH
16228: LD_STRING 
16230: ST_TO_ADDR
// active :=  ;
16231: LD_ADDR_VAR 0 7
16235: PUSH
16236: LD_STRING 
16238: ST_TO_ADDR
// for i = 1 to normalCounter do
16239: LD_ADDR_VAR 0 8
16243: PUSH
16244: DOUBLE
16245: LD_INT 1
16247: DEC
16248: ST_TO_ADDR
16249: LD_EXP 16
16253: PUSH
16254: FOR_TO
16255: IFFALSE 16356
// begin tmp := 0 ;
16257: LD_ADDR_VAR 0 3
16261: PUSH
16262: LD_STRING 0
16264: ST_TO_ADDR
// if result [ 1 ] then
16265: LD_VAR 0 2
16269: PUSH
16270: LD_INT 1
16272: ARRAY
16273: IFFALSE 16338
// if result [ 1 ] [ 1 ] = i then
16275: LD_VAR 0 2
16279: PUSH
16280: LD_INT 1
16282: ARRAY
16283: PUSH
16284: LD_INT 1
16286: ARRAY
16287: PUSH
16288: LD_VAR 0 8
16292: EQUAL
16293: IFFALSE 16338
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16295: LD_ADDR_VAR 0 2
16299: PUSH
16300: LD_VAR 0 2
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_VAR 0 2
16312: PUSH
16313: LD_INT 1
16315: ARRAY
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: CALL_OW 3
16324: PPUSH
16325: CALL_OW 1
16329: ST_TO_ADDR
// tmp := 1 ;
16330: LD_ADDR_VAR 0 3
16334: PUSH
16335: LD_STRING 1
16337: ST_TO_ADDR
// end ; normal := normal & tmp ;
16338: LD_ADDR_VAR 0 5
16342: PUSH
16343: LD_VAR 0 5
16347: PUSH
16348: LD_VAR 0 3
16352: STR
16353: ST_TO_ADDR
// end ;
16354: GO 16254
16356: POP
16357: POP
// for i = 1 to hardcoreCounter do
16358: LD_ADDR_VAR 0 8
16362: PUSH
16363: DOUBLE
16364: LD_INT 1
16366: DEC
16367: ST_TO_ADDR
16368: LD_EXP 17
16372: PUSH
16373: FOR_TO
16374: IFFALSE 16479
// begin tmp := 0 ;
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: LD_STRING 0
16383: ST_TO_ADDR
// if result [ 2 ] then
16384: LD_VAR 0 2
16388: PUSH
16389: LD_INT 2
16391: ARRAY
16392: IFFALSE 16461
// if result [ 2 ] [ 1 ] = 100 + i then
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 2
16401: ARRAY
16402: PUSH
16403: LD_INT 1
16405: ARRAY
16406: PUSH
16407: LD_INT 100
16409: PUSH
16410: LD_VAR 0 8
16414: PLUS
16415: EQUAL
16416: IFFALSE 16461
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16418: LD_ADDR_VAR 0 2
16422: PUSH
16423: LD_VAR 0 2
16427: PPUSH
16428: LD_INT 2
16430: PPUSH
16431: LD_VAR 0 2
16435: PUSH
16436: LD_INT 2
16438: ARRAY
16439: PPUSH
16440: LD_INT 1
16442: PPUSH
16443: CALL_OW 3
16447: PPUSH
16448: CALL_OW 1
16452: ST_TO_ADDR
// tmp := 1 ;
16453: LD_ADDR_VAR 0 3
16457: PUSH
16458: LD_STRING 1
16460: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16461: LD_ADDR_VAR 0 6
16465: PUSH
16466: LD_VAR 0 6
16470: PUSH
16471: LD_VAR 0 3
16475: STR
16476: ST_TO_ADDR
// end ;
16477: GO 16373
16479: POP
16480: POP
// if isGameLoad then
16481: LD_VAR 0 1
16485: IFFALSE 16960
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16487: LD_ADDR_VAR 0 4
16491: PUSH
16492: LD_EXP 20
16496: PUSH
16497: LD_EXP 19
16501: PUSH
16502: LD_EXP 21
16506: PUSH
16507: LD_EXP 18
16511: PUSH
16512: LD_EXP 22
16516: PUSH
16517: LD_EXP 23
16521: PUSH
16522: LD_EXP 24
16526: PUSH
16527: LD_EXP 25
16531: PUSH
16532: LD_EXP 26
16536: PUSH
16537: LD_EXP 27
16541: PUSH
16542: LD_EXP 28
16546: PUSH
16547: LD_EXP 29
16551: PUSH
16552: LD_EXP 30
16556: PUSH
16557: LD_EXP 31
16561: PUSH
16562: LD_EXP 39
16566: PUSH
16567: LD_EXP 40
16571: PUSH
16572: LD_EXP 41
16576: PUSH
16577: LD_EXP 42
16581: PUSH
16582: LD_EXP 44
16586: PUSH
16587: LD_EXP 45
16591: PUSH
16592: LD_EXP 46
16596: PUSH
16597: LD_EXP 49
16601: PUSH
16602: LD_EXP 51
16606: PUSH
16607: LD_EXP 52
16611: PUSH
16612: LD_EXP 53
16616: PUSH
16617: LD_EXP 55
16621: PUSH
16622: LD_EXP 56
16626: PUSH
16627: LD_EXP 59
16631: PUSH
16632: LD_EXP 60
16636: PUSH
16637: LD_EXP 61
16641: PUSH
16642: LD_EXP 62
16646: PUSH
16647: LD_EXP 63
16651: PUSH
16652: LD_EXP 64
16656: PUSH
16657: LD_EXP 65
16661: PUSH
16662: LD_EXP 66
16666: PUSH
16667: LD_EXP 67
16671: PUSH
16672: LD_EXP 32
16676: PUSH
16677: LD_EXP 33
16681: PUSH
16682: LD_EXP 36
16686: PUSH
16687: LD_EXP 37
16691: PUSH
16692: LD_EXP 38
16696: PUSH
16697: LD_EXP 34
16701: PUSH
16702: LD_EXP 35
16706: PUSH
16707: LD_EXP 43
16711: PUSH
16712: LD_EXP 47
16716: PUSH
16717: LD_EXP 48
16721: PUSH
16722: LD_EXP 50
16726: PUSH
16727: LD_EXP 54
16731: PUSH
16732: LD_EXP 57
16736: PUSH
16737: LD_EXP 58
16741: PUSH
16742: LD_EXP 68
16746: PUSH
16747: LD_EXP 69
16751: PUSH
16752: LD_EXP 70
16756: PUSH
16757: LD_EXP 71
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: ST_TO_ADDR
// tmp :=  ;
16818: LD_ADDR_VAR 0 3
16822: PUSH
16823: LD_STRING 
16825: ST_TO_ADDR
// for i = 1 to normalCounter do
16826: LD_ADDR_VAR 0 8
16830: PUSH
16831: DOUBLE
16832: LD_INT 1
16834: DEC
16835: ST_TO_ADDR
16836: LD_EXP 16
16840: PUSH
16841: FOR_TO
16842: IFFALSE 16878
// begin if flags [ i ] then
16844: LD_VAR 0 4
16848: PUSH
16849: LD_VAR 0 8
16853: ARRAY
16854: IFFALSE 16876
// tmp := tmp & i & ; ;
16856: LD_ADDR_VAR 0 3
16860: PUSH
16861: LD_VAR 0 3
16865: PUSH
16866: LD_VAR 0 8
16870: STR
16871: PUSH
16872: LD_STRING ;
16874: STR
16875: ST_TO_ADDR
// end ;
16876: GO 16841
16878: POP
16879: POP
// for i = 1 to hardcoreCounter do
16880: LD_ADDR_VAR 0 8
16884: PUSH
16885: DOUBLE
16886: LD_INT 1
16888: DEC
16889: ST_TO_ADDR
16890: LD_EXP 17
16894: PUSH
16895: FOR_TO
16896: IFFALSE 16942
// begin if flags [ normalCounter + i ] then
16898: LD_VAR 0 4
16902: PUSH
16903: LD_EXP 16
16907: PUSH
16908: LD_VAR 0 8
16912: PLUS
16913: ARRAY
16914: IFFALSE 16940
// tmp := tmp & ( 100 + i ) & ; ;
16916: LD_ADDR_VAR 0 3
16920: PUSH
16921: LD_VAR 0 3
16925: PUSH
16926: LD_INT 100
16928: PUSH
16929: LD_VAR 0 8
16933: PLUS
16934: STR
16935: PUSH
16936: LD_STRING ;
16938: STR
16939: ST_TO_ADDR
// end ;
16940: GO 16895
16942: POP
16943: POP
// if tmp then
16944: LD_VAR 0 3
16948: IFFALSE 16960
// active := tmp ;
16950: LD_ADDR_VAR 0 7
16954: PUSH
16955: LD_VAR 0 3
16959: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16960: LD_STRING getStreamItemsFromMission("
16962: PUSH
16963: LD_VAR 0 5
16967: STR
16968: PUSH
16969: LD_STRING ","
16971: STR
16972: PUSH
16973: LD_VAR 0 6
16977: STR
16978: PUSH
16979: LD_STRING ","
16981: STR
16982: PUSH
16983: LD_VAR 0 7
16987: STR
16988: PUSH
16989: LD_STRING ")
16991: STR
16992: PPUSH
16993: CALL_OW 559
// end else
16997: GO 17006
// ToLua ( getStreamItemsFromMission("","","") ) ;
16999: LD_STRING getStreamItemsFromMission("","","")
17001: PPUSH
17002: CALL_OW 559
// end ;
17006: LD_VAR 0 2
17010: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17011: LD_EXP 15
17015: PUSH
17016: LD_EXP 20
17020: AND
17021: IFFALSE 17145
17023: GO 17025
17025: DISABLE
17026: LD_INT 0
17028: PPUSH
17029: PPUSH
// begin enable ;
17030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17031: LD_ADDR_VAR 0 2
17035: PUSH
17036: LD_INT 22
17038: PUSH
17039: LD_OWVAR 2
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 34
17053: PUSH
17054: LD_INT 7
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 34
17063: PUSH
17064: LD_INT 45
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 34
17073: PUSH
17074: LD_INT 28
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 34
17083: PUSH
17084: LD_INT 47
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PPUSH
17102: CALL_OW 69
17106: ST_TO_ADDR
// if not tmp then
17107: LD_VAR 0 2
17111: NOT
17112: IFFALSE 17116
// exit ;
17114: GO 17145
// for i in tmp do
17116: LD_ADDR_VAR 0 1
17120: PUSH
17121: LD_VAR 0 2
17125: PUSH
17126: FOR_IN
17127: IFFALSE 17143
// begin SetLives ( i , 0 ) ;
17129: LD_VAR 0 1
17133: PPUSH
17134: LD_INT 0
17136: PPUSH
17137: CALL_OW 234
// end ;
17141: GO 17126
17143: POP
17144: POP
// end ;
17145: PPOPN 2
17147: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17148: LD_EXP 15
17152: PUSH
17153: LD_EXP 21
17157: AND
17158: IFFALSE 17242
17160: GO 17162
17162: DISABLE
17163: LD_INT 0
17165: PPUSH
17166: PPUSH
// begin enable ;
17167: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17168: LD_ADDR_VAR 0 2
17172: PUSH
17173: LD_INT 22
17175: PUSH
17176: LD_OWVAR 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 32
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PPUSH
17199: CALL_OW 69
17203: ST_TO_ADDR
// if not tmp then
17204: LD_VAR 0 2
17208: NOT
17209: IFFALSE 17213
// exit ;
17211: GO 17242
// for i in tmp do
17213: LD_ADDR_VAR 0 1
17217: PUSH
17218: LD_VAR 0 2
17222: PUSH
17223: FOR_IN
17224: IFFALSE 17240
// begin SetLives ( i , 0 ) ;
17226: LD_VAR 0 1
17230: PPUSH
17231: LD_INT 0
17233: PPUSH
17234: CALL_OW 234
// end ;
17238: GO 17223
17240: POP
17241: POP
// end ;
17242: PPOPN 2
17244: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17245: LD_EXP 15
17249: PUSH
17250: LD_EXP 18
17254: AND
17255: IFFALSE 17348
17257: GO 17259
17259: DISABLE
17260: LD_INT 0
17262: PPUSH
// begin enable ;
17263: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: LD_INT 22
17271: PUSH
17272: LD_OWVAR 2
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 2
17283: PUSH
17284: LD_INT 25
17286: PUSH
17287: LD_INT 5
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 25
17296: PUSH
17297: LD_INT 9
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 25
17306: PUSH
17307: LD_INT 8
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PPUSH
17324: CALL_OW 69
17328: PUSH
17329: FOR_IN
17330: IFFALSE 17346
// begin SetClass ( i , 1 ) ;
17332: LD_VAR 0 1
17336: PPUSH
17337: LD_INT 1
17339: PPUSH
17340: CALL_OW 336
// end ;
17344: GO 17329
17346: POP
17347: POP
// end ;
17348: PPOPN 1
17350: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17351: LD_EXP 15
17355: PUSH
17356: LD_EXP 19
17360: AND
17361: PUSH
17362: LD_OWVAR 65
17366: PUSH
17367: LD_INT 7
17369: LESS
17370: AND
17371: IFFALSE 17385
17373: GO 17375
17375: DISABLE
// begin enable ;
17376: ENABLE
// game_speed := 7 ;
17377: LD_ADDR_OWVAR 65
17381: PUSH
17382: LD_INT 7
17384: ST_TO_ADDR
// end ;
17385: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17386: LD_EXP 15
17390: PUSH
17391: LD_EXP 22
17395: AND
17396: IFFALSE 17598
17398: GO 17400
17400: DISABLE
17401: LD_INT 0
17403: PPUSH
17404: PPUSH
17405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17406: LD_ADDR_VAR 0 3
17410: PUSH
17411: LD_INT 81
17413: PUSH
17414: LD_OWVAR 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: ST_TO_ADDR
// if not tmp then
17442: LD_VAR 0 3
17446: NOT
17447: IFFALSE 17451
// exit ;
17449: GO 17598
// if tmp > 5 then
17451: LD_VAR 0 3
17455: PUSH
17456: LD_INT 5
17458: GREATER
17459: IFFALSE 17471
// k := 5 else
17461: LD_ADDR_VAR 0 2
17465: PUSH
17466: LD_INT 5
17468: ST_TO_ADDR
17469: GO 17481
// k := tmp ;
17471: LD_ADDR_VAR 0 2
17475: PUSH
17476: LD_VAR 0 3
17480: ST_TO_ADDR
// for i := 1 to k do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: DOUBLE
17487: LD_INT 1
17489: DEC
17490: ST_TO_ADDR
17491: LD_VAR 0 2
17495: PUSH
17496: FOR_TO
17497: IFFALSE 17596
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17499: LD_VAR 0 3
17503: PUSH
17504: LD_VAR 0 1
17508: ARRAY
17509: PPUSH
17510: LD_VAR 0 1
17514: PUSH
17515: LD_INT 4
17517: MOD
17518: PUSH
17519: LD_INT 1
17521: PLUS
17522: PPUSH
17523: CALL_OW 259
17527: PUSH
17528: LD_INT 10
17530: LESS
17531: IFFALSE 17594
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17533: LD_VAR 0 3
17537: PUSH
17538: LD_VAR 0 1
17542: ARRAY
17543: PPUSH
17544: LD_VAR 0 1
17548: PUSH
17549: LD_INT 4
17551: MOD
17552: PUSH
17553: LD_INT 1
17555: PLUS
17556: PPUSH
17557: LD_VAR 0 3
17561: PUSH
17562: LD_VAR 0 1
17566: ARRAY
17567: PPUSH
17568: LD_VAR 0 1
17572: PUSH
17573: LD_INT 4
17575: MOD
17576: PUSH
17577: LD_INT 1
17579: PLUS
17580: PPUSH
17581: CALL_OW 259
17585: PUSH
17586: LD_INT 1
17588: PLUS
17589: PPUSH
17590: CALL_OW 237
17594: GO 17496
17596: POP
17597: POP
// end ;
17598: PPOPN 3
17600: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17601: LD_EXP 15
17605: PUSH
17606: LD_EXP 23
17610: AND
17611: IFFALSE 17631
17613: GO 17615
17615: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17616: LD_INT 4
17618: PPUSH
17619: LD_OWVAR 2
17623: PPUSH
17624: LD_INT 0
17626: PPUSH
17627: CALL_OW 324
17631: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17632: LD_EXP 15
17636: PUSH
17637: LD_EXP 52
17641: AND
17642: IFFALSE 17662
17644: GO 17646
17646: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17647: LD_INT 19
17649: PPUSH
17650: LD_OWVAR 2
17654: PPUSH
17655: LD_INT 0
17657: PPUSH
17658: CALL_OW 324
17662: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17663: LD_EXP 15
17667: PUSH
17668: LD_EXP 24
17672: AND
17673: IFFALSE 17775
17675: GO 17677
17677: DISABLE
17678: LD_INT 0
17680: PPUSH
17681: PPUSH
// begin enable ;
17682: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17683: LD_ADDR_VAR 0 2
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_OWVAR 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 2
17702: PUSH
17703: LD_INT 34
17705: PUSH
17706: LD_INT 11
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 34
17715: PUSH
17716: LD_INT 30
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: ST_TO_ADDR
// if not tmp then
17737: LD_VAR 0 2
17741: NOT
17742: IFFALSE 17746
// exit ;
17744: GO 17775
// for i in tmp do
17746: LD_ADDR_VAR 0 1
17750: PUSH
17751: LD_VAR 0 2
17755: PUSH
17756: FOR_IN
17757: IFFALSE 17773
// begin SetLives ( i , 0 ) ;
17759: LD_VAR 0 1
17763: PPUSH
17764: LD_INT 0
17766: PPUSH
17767: CALL_OW 234
// end ;
17771: GO 17756
17773: POP
17774: POP
// end ;
17775: PPOPN 2
17777: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17778: LD_EXP 15
17782: PUSH
17783: LD_EXP 25
17787: AND
17788: IFFALSE 17808
17790: GO 17792
17792: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17793: LD_INT 32
17795: PPUSH
17796: LD_OWVAR 2
17800: PPUSH
17801: LD_INT 0
17803: PPUSH
17804: CALL_OW 324
17808: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17809: LD_EXP 15
17813: PUSH
17814: LD_EXP 26
17818: AND
17819: IFFALSE 18000
17821: GO 17823
17823: DISABLE
17824: LD_INT 0
17826: PPUSH
17827: PPUSH
17828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17829: LD_ADDR_VAR 0 2
17833: PUSH
17834: LD_INT 22
17836: PUSH
17837: LD_OWVAR 2
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 33
17848: PUSH
17849: LD_INT 3
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PPUSH
17860: CALL_OW 69
17864: ST_TO_ADDR
// if not tmp then
17865: LD_VAR 0 2
17869: NOT
17870: IFFALSE 17874
// exit ;
17872: GO 18000
// side := 0 ;
17874: LD_ADDR_VAR 0 3
17878: PUSH
17879: LD_INT 0
17881: ST_TO_ADDR
// for i := 1 to 8 do
17882: LD_ADDR_VAR 0 1
17886: PUSH
17887: DOUBLE
17888: LD_INT 1
17890: DEC
17891: ST_TO_ADDR
17892: LD_INT 8
17894: PUSH
17895: FOR_TO
17896: IFFALSE 17944
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17898: LD_OWVAR 2
17902: PUSH
17903: LD_VAR 0 1
17907: NONEQUAL
17908: PUSH
17909: LD_OWVAR 2
17913: PPUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 81
17923: PUSH
17924: LD_INT 2
17926: EQUAL
17927: AND
17928: IFFALSE 17942
// begin side := i ;
17930: LD_ADDR_VAR 0 3
17934: PUSH
17935: LD_VAR 0 1
17939: ST_TO_ADDR
// break ;
17940: GO 17944
// end ;
17942: GO 17895
17944: POP
17945: POP
// if not side then
17946: LD_VAR 0 3
17950: NOT
17951: IFFALSE 17955
// exit ;
17953: GO 18000
// for i := 1 to tmp do
17955: LD_ADDR_VAR 0 1
17959: PUSH
17960: DOUBLE
17961: LD_INT 1
17963: DEC
17964: ST_TO_ADDR
17965: LD_VAR 0 2
17969: PUSH
17970: FOR_TO
17971: IFFALSE 17998
// if Prob ( 60 ) then
17973: LD_INT 60
17975: PPUSH
17976: CALL_OW 13
17980: IFFALSE 17996
// SetSide ( i , side ) ;
17982: LD_VAR 0 1
17986: PPUSH
17987: LD_VAR 0 3
17991: PPUSH
17992: CALL_OW 235
17996: GO 17970
17998: POP
17999: POP
// end ;
18000: PPOPN 3
18002: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18003: LD_EXP 15
18007: PUSH
18008: LD_EXP 28
18012: AND
18013: IFFALSE 18132
18015: GO 18017
18017: DISABLE
18018: LD_INT 0
18020: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18021: LD_ADDR_VAR 0 1
18025: PUSH
18026: LD_INT 22
18028: PUSH
18029: LD_OWVAR 2
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 21
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 3
18050: PUSH
18051: LD_INT 23
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18130
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 257
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: LD_INT 3
18096: PUSH
18097: LD_INT 4
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: IN
18106: IFFALSE 18128
// SetClass ( un , rand ( 1 , 4 ) ) ;
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_INT 1
18115: PPUSH
18116: LD_INT 4
18118: PPUSH
18119: CALL_OW 12
18123: PPUSH
18124: CALL_OW 336
18128: GO 18075
18130: POP
18131: POP
// end ;
18132: PPOPN 1
18134: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18135: LD_EXP 15
18139: PUSH
18140: LD_EXP 27
18144: AND
18145: IFFALSE 18224
18147: GO 18149
18149: DISABLE
18150: LD_INT 0
18152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18153: LD_ADDR_VAR 0 1
18157: PUSH
18158: LD_INT 22
18160: PUSH
18161: LD_OWVAR 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 21
18172: PUSH
18173: LD_INT 3
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PPUSH
18184: CALL_OW 69
18188: ST_TO_ADDR
// if not tmp then
18189: LD_VAR 0 1
18193: NOT
18194: IFFALSE 18198
// exit ;
18196: GO 18224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18198: LD_VAR 0 1
18202: PUSH
18203: LD_INT 1
18205: PPUSH
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 12
18215: ARRAY
18216: PPUSH
18217: LD_INT 100
18219: PPUSH
18220: CALL_OW 234
// end ;
18224: PPOPN 1
18226: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18227: LD_EXP 15
18231: PUSH
18232: LD_EXP 29
18236: AND
18237: IFFALSE 18335
18239: GO 18241
18241: DISABLE
18242: LD_INT 0
18244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18245: LD_ADDR_VAR 0 1
18249: PUSH
18250: LD_INT 22
18252: PUSH
18253: LD_OWVAR 2
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 21
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PPUSH
18276: CALL_OW 69
18280: ST_TO_ADDR
// if not tmp then
18281: LD_VAR 0 1
18285: NOT
18286: IFFALSE 18290
// exit ;
18288: GO 18335
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18290: LD_VAR 0 1
18294: PUSH
18295: LD_INT 1
18297: PPUSH
18298: LD_VAR 0 1
18302: PPUSH
18303: CALL_OW 12
18307: ARRAY
18308: PPUSH
18309: LD_INT 1
18311: PPUSH
18312: LD_INT 4
18314: PPUSH
18315: CALL_OW 12
18319: PPUSH
18320: LD_INT 3000
18322: PPUSH
18323: LD_INT 9000
18325: PPUSH
18326: CALL_OW 12
18330: PPUSH
18331: CALL_OW 492
// end ;
18335: PPOPN 1
18337: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18338: LD_EXP 15
18342: PUSH
18343: LD_EXP 30
18347: AND
18348: IFFALSE 18368
18350: GO 18352
18352: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18353: LD_INT 1
18355: PPUSH
18356: LD_OWVAR 2
18360: PPUSH
18361: LD_INT 0
18363: PPUSH
18364: CALL_OW 324
18368: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18369: LD_EXP 15
18373: PUSH
18374: LD_EXP 31
18378: AND
18379: IFFALSE 18462
18381: GO 18383
18383: DISABLE
18384: LD_INT 0
18386: PPUSH
18387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18388: LD_ADDR_VAR 0 2
18392: PUSH
18393: LD_INT 22
18395: PUSH
18396: LD_OWVAR 2
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 21
18407: PUSH
18408: LD_INT 3
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PPUSH
18419: CALL_OW 69
18423: ST_TO_ADDR
// if not tmp then
18424: LD_VAR 0 2
18428: NOT
18429: IFFALSE 18433
// exit ;
18431: GO 18462
// for i in tmp do
18433: LD_ADDR_VAR 0 1
18437: PUSH
18438: LD_VAR 0 2
18442: PUSH
18443: FOR_IN
18444: IFFALSE 18460
// SetBLevel ( i , 10 ) ;
18446: LD_VAR 0 1
18450: PPUSH
18451: LD_INT 10
18453: PPUSH
18454: CALL_OW 241
18458: GO 18443
18460: POP
18461: POP
// end ;
18462: PPOPN 2
18464: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18465: LD_EXP 15
18469: PUSH
18470: LD_EXP 32
18474: AND
18475: IFFALSE 18586
18477: GO 18479
18479: DISABLE
18480: LD_INT 0
18482: PPUSH
18483: PPUSH
18484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18485: LD_ADDR_VAR 0 3
18489: PUSH
18490: LD_INT 22
18492: PUSH
18493: LD_OWVAR 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 25
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 69
18520: ST_TO_ADDR
// if not tmp then
18521: LD_VAR 0 3
18525: NOT
18526: IFFALSE 18530
// exit ;
18528: GO 18586
// un := tmp [ rand ( 1 , tmp ) ] ;
18530: LD_ADDR_VAR 0 2
18534: PUSH
18535: LD_VAR 0 3
18539: PUSH
18540: LD_INT 1
18542: PPUSH
18543: LD_VAR 0 3
18547: PPUSH
18548: CALL_OW 12
18552: ARRAY
18553: ST_TO_ADDR
// if Crawls ( un ) then
18554: LD_VAR 0 2
18558: PPUSH
18559: CALL_OW 318
18563: IFFALSE 18574
// ComWalk ( un ) ;
18565: LD_VAR 0 2
18569: PPUSH
18570: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18574: LD_VAR 0 2
18578: PPUSH
18579: LD_INT 5
18581: PPUSH
18582: CALL_OW 336
// end ;
18586: PPOPN 3
18588: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18589: LD_EXP 15
18593: PUSH
18594: LD_EXP 33
18598: AND
18599: PUSH
18600: LD_OWVAR 67
18604: PUSH
18605: LD_INT 4
18607: LESS
18608: AND
18609: IFFALSE 18628
18611: GO 18613
18613: DISABLE
// begin Difficulty := Difficulty + 1 ;
18614: LD_ADDR_OWVAR 67
18618: PUSH
18619: LD_OWVAR 67
18623: PUSH
18624: LD_INT 1
18626: PLUS
18627: ST_TO_ADDR
// end ;
18628: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18629: LD_EXP 15
18633: PUSH
18634: LD_EXP 34
18638: AND
18639: IFFALSE 18742
18641: GO 18643
18643: DISABLE
18644: LD_INT 0
18646: PPUSH
// begin for i := 1 to 5 do
18647: LD_ADDR_VAR 0 1
18651: PUSH
18652: DOUBLE
18653: LD_INT 1
18655: DEC
18656: ST_TO_ADDR
18657: LD_INT 5
18659: PUSH
18660: FOR_TO
18661: IFFALSE 18740
// begin uc_nation := nation_nature ;
18663: LD_ADDR_OWVAR 21
18667: PUSH
18668: LD_INT 0
18670: ST_TO_ADDR
// uc_side := 0 ;
18671: LD_ADDR_OWVAR 20
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18679: LD_ADDR_OWVAR 29
18683: PUSH
18684: LD_INT 12
18686: PUSH
18687: LD_INT 12
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: ST_TO_ADDR
// hc_agressivity := 20 ;
18694: LD_ADDR_OWVAR 35
18698: PUSH
18699: LD_INT 20
18701: ST_TO_ADDR
// hc_class := class_tiger ;
18702: LD_ADDR_OWVAR 28
18706: PUSH
18707: LD_INT 14
18709: ST_TO_ADDR
// hc_gallery :=  ;
18710: LD_ADDR_OWVAR 33
18714: PUSH
18715: LD_STRING 
18717: ST_TO_ADDR
// hc_name :=  ;
18718: LD_ADDR_OWVAR 26
18722: PUSH
18723: LD_STRING 
18725: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18726: CALL_OW 44
18730: PPUSH
18731: LD_INT 0
18733: PPUSH
18734: CALL_OW 51
// end ;
18738: GO 18660
18740: POP
18741: POP
// end ;
18742: PPOPN 1
18744: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18745: LD_EXP 15
18749: PUSH
18750: LD_EXP 35
18754: AND
18755: IFFALSE 18764
18757: GO 18759
18759: DISABLE
// StreamSibBomb ;
18760: CALL 18765 0 0
18764: END
// export function StreamSibBomb ; var i , x , y ; begin
18765: LD_INT 0
18767: PPUSH
18768: PPUSH
18769: PPUSH
18770: PPUSH
// result := false ;
18771: LD_ADDR_VAR 0 1
18775: PUSH
18776: LD_INT 0
18778: ST_TO_ADDR
// for i := 1 to 16 do
18779: LD_ADDR_VAR 0 2
18783: PUSH
18784: DOUBLE
18785: LD_INT 1
18787: DEC
18788: ST_TO_ADDR
18789: LD_INT 16
18791: PUSH
18792: FOR_TO
18793: IFFALSE 18992
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18795: LD_ADDR_VAR 0 3
18799: PUSH
18800: LD_INT 10
18802: PUSH
18803: LD_INT 20
18805: PUSH
18806: LD_INT 30
18808: PUSH
18809: LD_INT 40
18811: PUSH
18812: LD_INT 50
18814: PUSH
18815: LD_INT 60
18817: PUSH
18818: LD_INT 70
18820: PUSH
18821: LD_INT 80
18823: PUSH
18824: LD_INT 90
18826: PUSH
18827: LD_INT 100
18829: PUSH
18830: LD_INT 110
18832: PUSH
18833: LD_INT 120
18835: PUSH
18836: LD_INT 130
18838: PUSH
18839: LD_INT 140
18841: PUSH
18842: LD_INT 150
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 1
18864: PPUSH
18865: LD_INT 15
18867: PPUSH
18868: CALL_OW 12
18872: ARRAY
18873: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18874: LD_ADDR_VAR 0 4
18878: PUSH
18879: LD_INT 10
18881: PUSH
18882: LD_INT 20
18884: PUSH
18885: LD_INT 30
18887: PUSH
18888: LD_INT 40
18890: PUSH
18891: LD_INT 50
18893: PUSH
18894: LD_INT 60
18896: PUSH
18897: LD_INT 70
18899: PUSH
18900: LD_INT 80
18902: PUSH
18903: LD_INT 90
18905: PUSH
18906: LD_INT 100
18908: PUSH
18909: LD_INT 110
18911: PUSH
18912: LD_INT 120
18914: PUSH
18915: LD_INT 130
18917: PUSH
18918: LD_INT 140
18920: PUSH
18921: LD_INT 150
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: PPUSH
18944: LD_INT 15
18946: PPUSH
18947: CALL_OW 12
18951: ARRAY
18952: ST_TO_ADDR
// if ValidHex ( x , y ) then
18953: LD_VAR 0 3
18957: PPUSH
18958: LD_VAR 0 4
18962: PPUSH
18963: CALL_OW 488
18967: IFFALSE 18990
// begin result := [ x , y ] ;
18969: LD_ADDR_VAR 0 1
18973: PUSH
18974: LD_VAR 0 3
18978: PUSH
18979: LD_VAR 0 4
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: ST_TO_ADDR
// break ;
18988: GO 18992
// end ; end ;
18990: GO 18792
18992: POP
18993: POP
// if result then
18994: LD_VAR 0 1
18998: IFFALSE 19058
// begin ToLua ( playSibBomb() ) ;
19000: LD_STRING playSibBomb()
19002: PPUSH
19003: CALL_OW 559
// wait ( 0 0$14 ) ;
19007: LD_INT 490
19009: PPUSH
19010: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19014: LD_VAR 0 1
19018: PUSH
19019: LD_INT 1
19021: ARRAY
19022: PPUSH
19023: LD_VAR 0 1
19027: PUSH
19028: LD_INT 2
19030: ARRAY
19031: PPUSH
19032: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19036: LD_VAR 0 1
19040: PUSH
19041: LD_INT 1
19043: ARRAY
19044: PPUSH
19045: LD_VAR 0 1
19049: PUSH
19050: LD_INT 2
19052: ARRAY
19053: PPUSH
19054: CALL_OW 429
// end ; end ;
19058: LD_VAR 0 1
19062: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19063: LD_EXP 15
19067: PUSH
19068: LD_EXP 37
19072: AND
19073: IFFALSE 19085
19075: GO 19077
19077: DISABLE
// YouLost (  ) ;
19078: LD_STRING 
19080: PPUSH
19081: CALL_OW 104
19085: END
// every 0 0$1 trigger StreamModeActive and sFog do
19086: LD_EXP 15
19090: PUSH
19091: LD_EXP 36
19095: AND
19096: IFFALSE 19110
19098: GO 19100
19100: DISABLE
// FogOff ( your_side ) ;
19101: LD_OWVAR 2
19105: PPUSH
19106: CALL_OW 344
19110: END
// every 0 0$1 trigger StreamModeActive and sSun do
19111: LD_EXP 15
19115: PUSH
19116: LD_EXP 38
19120: AND
19121: IFFALSE 19149
19123: GO 19125
19125: DISABLE
// begin solar_recharge_percent := 0 ;
19126: LD_ADDR_OWVAR 79
19130: PUSH
19131: LD_INT 0
19133: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19134: LD_INT 10500
19136: PPUSH
19137: CALL_OW 67
// solar_recharge_percent := 100 ;
19141: LD_ADDR_OWVAR 79
19145: PUSH
19146: LD_INT 100
19148: ST_TO_ADDR
// end ;
19149: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19150: LD_EXP 15
19154: PUSH
19155: LD_EXP 39
19159: AND
19160: IFFALSE 19399
19162: GO 19164
19164: DISABLE
19165: LD_INT 0
19167: PPUSH
19168: PPUSH
19169: PPUSH
// begin tmp := [ ] ;
19170: LD_ADDR_VAR 0 3
19174: PUSH
19175: EMPTY
19176: ST_TO_ADDR
// for i := 1 to 6 do
19177: LD_ADDR_VAR 0 1
19181: PUSH
19182: DOUBLE
19183: LD_INT 1
19185: DEC
19186: ST_TO_ADDR
19187: LD_INT 6
19189: PUSH
19190: FOR_TO
19191: IFFALSE 19296
// begin uc_nation := nation_nature ;
19193: LD_ADDR_OWVAR 21
19197: PUSH
19198: LD_INT 0
19200: ST_TO_ADDR
// uc_side := 0 ;
19201: LD_ADDR_OWVAR 20
19205: PUSH
19206: LD_INT 0
19208: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19209: LD_ADDR_OWVAR 29
19213: PUSH
19214: LD_INT 12
19216: PUSH
19217: LD_INT 12
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: ST_TO_ADDR
// hc_agressivity := 20 ;
19224: LD_ADDR_OWVAR 35
19228: PUSH
19229: LD_INT 20
19231: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19232: LD_ADDR_OWVAR 28
19236: PUSH
19237: LD_INT 17
19239: ST_TO_ADDR
// hc_gallery :=  ;
19240: LD_ADDR_OWVAR 33
19244: PUSH
19245: LD_STRING 
19247: ST_TO_ADDR
// hc_name :=  ;
19248: LD_ADDR_OWVAR 26
19252: PUSH
19253: LD_STRING 
19255: ST_TO_ADDR
// un := CreateHuman ;
19256: LD_ADDR_VAR 0 2
19260: PUSH
19261: CALL_OW 44
19265: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19266: LD_VAR 0 2
19270: PPUSH
19271: LD_INT 1
19273: PPUSH
19274: CALL_OW 51
// tmp := tmp ^ un ;
19278: LD_ADDR_VAR 0 3
19282: PUSH
19283: LD_VAR 0 3
19287: PUSH
19288: LD_VAR 0 2
19292: ADD
19293: ST_TO_ADDR
// end ;
19294: GO 19190
19296: POP
19297: POP
// repeat wait ( 0 0$1 ) ;
19298: LD_INT 35
19300: PPUSH
19301: CALL_OW 67
// for un in tmp do
19305: LD_ADDR_VAR 0 2
19309: PUSH
19310: LD_VAR 0 3
19314: PUSH
19315: FOR_IN
19316: IFFALSE 19390
// begin if IsDead ( un ) then
19318: LD_VAR 0 2
19322: PPUSH
19323: CALL_OW 301
19327: IFFALSE 19347
// begin tmp := tmp diff un ;
19329: LD_ADDR_VAR 0 3
19333: PUSH
19334: LD_VAR 0 3
19338: PUSH
19339: LD_VAR 0 2
19343: DIFF
19344: ST_TO_ADDR
// continue ;
19345: GO 19315
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19347: LD_VAR 0 2
19351: PPUSH
19352: LD_INT 3
19354: PUSH
19355: LD_INT 22
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PPUSH
19369: CALL_OW 69
19373: PPUSH
19374: LD_VAR 0 2
19378: PPUSH
19379: CALL_OW 74
19383: PPUSH
19384: CALL_OW 115
// end ;
19388: GO 19315
19390: POP
19391: POP
// until not tmp ;
19392: LD_VAR 0 3
19396: NOT
19397: IFFALSE 19298
// end ;
19399: PPOPN 3
19401: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19402: LD_EXP 15
19406: PUSH
19407: LD_EXP 40
19411: AND
19412: IFFALSE 19466
19414: GO 19416
19416: DISABLE
// begin ToLua ( displayTroll(); ) ;
19417: LD_STRING displayTroll();
19419: PPUSH
19420: CALL_OW 559
// wait ( 3 3$00 ) ;
19424: LD_INT 6300
19426: PPUSH
19427: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19431: LD_STRING hideTroll();
19433: PPUSH
19434: CALL_OW 559
// wait ( 1 1$00 ) ;
19438: LD_INT 2100
19440: PPUSH
19441: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19445: LD_STRING displayTroll();
19447: PPUSH
19448: CALL_OW 559
// wait ( 1 1$00 ) ;
19452: LD_INT 2100
19454: PPUSH
19455: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19459: LD_STRING hideTroll();
19461: PPUSH
19462: CALL_OW 559
// end ;
19466: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19467: LD_EXP 15
19471: PUSH
19472: LD_EXP 41
19476: AND
19477: IFFALSE 19540
19479: GO 19481
19481: DISABLE
19482: LD_INT 0
19484: PPUSH
// begin p := 0 ;
19485: LD_ADDR_VAR 0 1
19489: PUSH
19490: LD_INT 0
19492: ST_TO_ADDR
// repeat game_speed := 1 ;
19493: LD_ADDR_OWVAR 65
19497: PUSH
19498: LD_INT 1
19500: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19501: LD_INT 35
19503: PPUSH
19504: CALL_OW 67
// p := p + 1 ;
19508: LD_ADDR_VAR 0 1
19512: PUSH
19513: LD_VAR 0 1
19517: PUSH
19518: LD_INT 1
19520: PLUS
19521: ST_TO_ADDR
// until p >= 60 ;
19522: LD_VAR 0 1
19526: PUSH
19527: LD_INT 60
19529: GREATEREQUAL
19530: IFFALSE 19493
// game_speed := 4 ;
19532: LD_ADDR_OWVAR 65
19536: PUSH
19537: LD_INT 4
19539: ST_TO_ADDR
// end ;
19540: PPOPN 1
19542: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19543: LD_EXP 15
19547: PUSH
19548: LD_EXP 42
19552: AND
19553: IFFALSE 19699
19555: GO 19557
19557: DISABLE
19558: LD_INT 0
19560: PPUSH
19561: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19562: LD_ADDR_VAR 0 1
19566: PUSH
19567: LD_INT 22
19569: PUSH
19570: LD_OWVAR 2
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: LD_INT 30
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 30
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PPUSH
19611: CALL_OW 69
19615: ST_TO_ADDR
// if not depot then
19616: LD_VAR 0 1
19620: NOT
19621: IFFALSE 19625
// exit ;
19623: GO 19699
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19625: LD_ADDR_VAR 0 2
19629: PUSH
19630: LD_VAR 0 1
19634: PUSH
19635: LD_INT 1
19637: PPUSH
19638: LD_VAR 0 1
19642: PPUSH
19643: CALL_OW 12
19647: ARRAY
19648: PPUSH
19649: CALL_OW 274
19653: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19654: LD_VAR 0 2
19658: PPUSH
19659: LD_INT 1
19661: PPUSH
19662: LD_INT 0
19664: PPUSH
19665: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19669: LD_VAR 0 2
19673: PPUSH
19674: LD_INT 2
19676: PPUSH
19677: LD_INT 0
19679: PPUSH
19680: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19684: LD_VAR 0 2
19688: PPUSH
19689: LD_INT 3
19691: PPUSH
19692: LD_INT 0
19694: PPUSH
19695: CALL_OW 277
// end ;
19699: PPOPN 2
19701: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19702: LD_EXP 15
19706: PUSH
19707: LD_EXP 43
19711: AND
19712: IFFALSE 19809
19714: GO 19716
19716: DISABLE
19717: LD_INT 0
19719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19720: LD_ADDR_VAR 0 1
19724: PUSH
19725: LD_INT 22
19727: PUSH
19728: LD_OWVAR 2
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 21
19739: PUSH
19740: LD_INT 1
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 3
19749: PUSH
19750: LD_INT 23
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: PPUSH
19769: CALL_OW 69
19773: ST_TO_ADDR
// if not tmp then
19774: LD_VAR 0 1
19778: NOT
19779: IFFALSE 19783
// exit ;
19781: GO 19809
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19783: LD_VAR 0 1
19787: PUSH
19788: LD_INT 1
19790: PPUSH
19791: LD_VAR 0 1
19795: PPUSH
19796: CALL_OW 12
19800: ARRAY
19801: PPUSH
19802: LD_INT 200
19804: PPUSH
19805: CALL_OW 234
// end ;
19809: PPOPN 1
19811: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19812: LD_EXP 15
19816: PUSH
19817: LD_EXP 44
19821: AND
19822: IFFALSE 19901
19824: GO 19826
19826: DISABLE
19827: LD_INT 0
19829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19830: LD_ADDR_VAR 0 1
19834: PUSH
19835: LD_INT 22
19837: PUSH
19838: LD_OWVAR 2
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 21
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PPUSH
19861: CALL_OW 69
19865: ST_TO_ADDR
// if not tmp then
19866: LD_VAR 0 1
19870: NOT
19871: IFFALSE 19875
// exit ;
19873: GO 19901
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19875: LD_VAR 0 1
19879: PUSH
19880: LD_INT 1
19882: PPUSH
19883: LD_VAR 0 1
19887: PPUSH
19888: CALL_OW 12
19892: ARRAY
19893: PPUSH
19894: LD_INT 60
19896: PPUSH
19897: CALL_OW 234
// end ;
19901: PPOPN 1
19903: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19904: LD_EXP 15
19908: PUSH
19909: LD_EXP 45
19913: AND
19914: IFFALSE 20013
19916: GO 19918
19918: DISABLE
19919: LD_INT 0
19921: PPUSH
19922: PPUSH
// begin enable ;
19923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19924: LD_ADDR_VAR 0 1
19928: PUSH
19929: LD_INT 22
19931: PUSH
19932: LD_OWVAR 2
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 61
19943: PUSH
19944: EMPTY
19945: LIST
19946: PUSH
19947: LD_INT 33
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: LIST
19961: PPUSH
19962: CALL_OW 69
19966: ST_TO_ADDR
// if not tmp then
19967: LD_VAR 0 1
19971: NOT
19972: IFFALSE 19976
// exit ;
19974: GO 20013
// for i in tmp do
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: LD_VAR 0 1
19985: PUSH
19986: FOR_IN
19987: IFFALSE 20011
// if IsControledBy ( i ) then
19989: LD_VAR 0 2
19993: PPUSH
19994: CALL_OW 312
19998: IFFALSE 20009
// ComUnlink ( i ) ;
20000: LD_VAR 0 2
20004: PPUSH
20005: CALL_OW 136
20009: GO 19986
20011: POP
20012: POP
// end ;
20013: PPOPN 2
20015: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20016: LD_EXP 15
20020: PUSH
20021: LD_EXP 46
20025: AND
20026: IFFALSE 20166
20028: GO 20030
20030: DISABLE
20031: LD_INT 0
20033: PPUSH
20034: PPUSH
// begin ToLua ( displayPowell(); ) ;
20035: LD_STRING displayPowell();
20037: PPUSH
20038: CALL_OW 559
// uc_side := 0 ;
20042: LD_ADDR_OWVAR 20
20046: PUSH
20047: LD_INT 0
20049: ST_TO_ADDR
// uc_nation := 2 ;
20050: LD_ADDR_OWVAR 21
20054: PUSH
20055: LD_INT 2
20057: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20058: LD_ADDR_OWVAR 37
20062: PUSH
20063: LD_INT 14
20065: ST_TO_ADDR
// vc_engine := engine_siberite ;
20066: LD_ADDR_OWVAR 39
20070: PUSH
20071: LD_INT 3
20073: ST_TO_ADDR
// vc_control := control_apeman ;
20074: LD_ADDR_OWVAR 38
20078: PUSH
20079: LD_INT 5
20081: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20082: LD_ADDR_OWVAR 40
20086: PUSH
20087: LD_INT 29
20089: ST_TO_ADDR
// un := CreateVehicle ;
20090: LD_ADDR_VAR 0 2
20094: PUSH
20095: CALL_OW 45
20099: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20100: LD_VAR 0 2
20104: PPUSH
20105: LD_INT 1
20107: PPUSH
20108: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20112: LD_INT 35
20114: PPUSH
20115: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20119: LD_VAR 0 2
20123: PPUSH
20124: LD_INT 22
20126: PUSH
20127: LD_OWVAR 2
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PPUSH
20136: CALL_OW 69
20140: PPUSH
20141: LD_VAR 0 2
20145: PPUSH
20146: CALL_OW 74
20150: PPUSH
20151: CALL_OW 115
// until IsDead ( un ) ;
20155: LD_VAR 0 2
20159: PPUSH
20160: CALL_OW 301
20164: IFFALSE 20112
// end ;
20166: PPOPN 2
20168: END
// every 0 0$1 trigger StreamModeActive and sStu do
20169: LD_EXP 15
20173: PUSH
20174: LD_EXP 54
20178: AND
20179: IFFALSE 20195
20181: GO 20183
20183: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20184: LD_STRING displayStucuk();
20186: PPUSH
20187: CALL_OW 559
// ResetFog ;
20191: CALL_OW 335
// end ;
20195: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20196: LD_EXP 15
20200: PUSH
20201: LD_EXP 47
20205: AND
20206: IFFALSE 20347
20208: GO 20210
20210: DISABLE
20211: LD_INT 0
20213: PPUSH
20214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20215: LD_ADDR_VAR 0 2
20219: PUSH
20220: LD_INT 22
20222: PUSH
20223: LD_OWVAR 2
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 21
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PPUSH
20246: CALL_OW 69
20250: ST_TO_ADDR
// if not tmp then
20251: LD_VAR 0 2
20255: NOT
20256: IFFALSE 20260
// exit ;
20258: GO 20347
// un := tmp [ rand ( 1 , tmp ) ] ;
20260: LD_ADDR_VAR 0 1
20264: PUSH
20265: LD_VAR 0 2
20269: PUSH
20270: LD_INT 1
20272: PPUSH
20273: LD_VAR 0 2
20277: PPUSH
20278: CALL_OW 12
20282: ARRAY
20283: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20284: LD_VAR 0 1
20288: PPUSH
20289: LD_INT 0
20291: PPUSH
20292: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20296: LD_VAR 0 1
20300: PPUSH
20301: LD_OWVAR 3
20305: PUSH
20306: LD_VAR 0 1
20310: DIFF
20311: PPUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 74
20321: PPUSH
20322: CALL_OW 115
// wait ( 0 0$20 ) ;
20326: LD_INT 700
20328: PPUSH
20329: CALL_OW 67
// SetSide ( un , your_side ) ;
20333: LD_VAR 0 1
20337: PPUSH
20338: LD_OWVAR 2
20342: PPUSH
20343: CALL_OW 235
// end ;
20347: PPOPN 2
20349: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20350: LD_EXP 15
20354: PUSH
20355: LD_EXP 48
20359: AND
20360: IFFALSE 20466
20362: GO 20364
20364: DISABLE
20365: LD_INT 0
20367: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20368: LD_ADDR_VAR 0 1
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_OWVAR 2
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: LD_INT 30
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 30
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PPUSH
20417: CALL_OW 69
20421: ST_TO_ADDR
// if not depot then
20422: LD_VAR 0 1
20426: NOT
20427: IFFALSE 20431
// exit ;
20429: GO 20466
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20431: LD_VAR 0 1
20435: PUSH
20436: LD_INT 1
20438: ARRAY
20439: PPUSH
20440: CALL_OW 250
20444: PPUSH
20445: LD_VAR 0 1
20449: PUSH
20450: LD_INT 1
20452: ARRAY
20453: PPUSH
20454: CALL_OW 251
20458: PPUSH
20459: LD_INT 70
20461: PPUSH
20462: CALL_OW 495
// end ;
20466: PPOPN 1
20468: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20469: LD_EXP 15
20473: PUSH
20474: LD_EXP 49
20478: AND
20479: IFFALSE 20690
20481: GO 20483
20483: DISABLE
20484: LD_INT 0
20486: PPUSH
20487: PPUSH
20488: PPUSH
20489: PPUSH
20490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20491: LD_ADDR_VAR 0 5
20495: PUSH
20496: LD_INT 22
20498: PUSH
20499: LD_OWVAR 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 21
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PPUSH
20522: CALL_OW 69
20526: ST_TO_ADDR
// if not tmp then
20527: LD_VAR 0 5
20531: NOT
20532: IFFALSE 20536
// exit ;
20534: GO 20690
// for i in tmp do
20536: LD_ADDR_VAR 0 1
20540: PUSH
20541: LD_VAR 0 5
20545: PUSH
20546: FOR_IN
20547: IFFALSE 20688
// begin d := rand ( 0 , 5 ) ;
20549: LD_ADDR_VAR 0 4
20553: PUSH
20554: LD_INT 0
20556: PPUSH
20557: LD_INT 5
20559: PPUSH
20560: CALL_OW 12
20564: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20565: LD_ADDR_VAR 0 2
20569: PUSH
20570: LD_VAR 0 1
20574: PPUSH
20575: CALL_OW 250
20579: PPUSH
20580: LD_VAR 0 4
20584: PPUSH
20585: LD_INT 3
20587: PPUSH
20588: LD_INT 12
20590: PPUSH
20591: CALL_OW 12
20595: PPUSH
20596: CALL_OW 272
20600: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20601: LD_ADDR_VAR 0 3
20605: PUSH
20606: LD_VAR 0 1
20610: PPUSH
20611: CALL_OW 251
20615: PPUSH
20616: LD_VAR 0 4
20620: PPUSH
20621: LD_INT 3
20623: PPUSH
20624: LD_INT 12
20626: PPUSH
20627: CALL_OW 12
20631: PPUSH
20632: CALL_OW 273
20636: ST_TO_ADDR
// if ValidHex ( x , y ) then
20637: LD_VAR 0 2
20641: PPUSH
20642: LD_VAR 0 3
20646: PPUSH
20647: CALL_OW 488
20651: IFFALSE 20686
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20653: LD_VAR 0 1
20657: PPUSH
20658: LD_VAR 0 2
20662: PPUSH
20663: LD_VAR 0 3
20667: PPUSH
20668: LD_INT 3
20670: PPUSH
20671: LD_INT 6
20673: PPUSH
20674: CALL_OW 12
20678: PPUSH
20679: LD_INT 1
20681: PPUSH
20682: CALL_OW 483
// end ;
20686: GO 20546
20688: POP
20689: POP
// end ;
20690: PPOPN 5
20692: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20693: LD_EXP 15
20697: PUSH
20698: LD_EXP 50
20702: AND
20703: IFFALSE 20797
20705: GO 20707
20707: DISABLE
20708: LD_INT 0
20710: PPUSH
20711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20712: LD_ADDR_VAR 0 2
20716: PUSH
20717: LD_INT 22
20719: PUSH
20720: LD_OWVAR 2
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 32
20731: PUSH
20732: LD_INT 1
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 21
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: ST_TO_ADDR
// if not tmp then
20759: LD_VAR 0 2
20763: NOT
20764: IFFALSE 20768
// exit ;
20766: GO 20797
// for i in tmp do
20768: LD_ADDR_VAR 0 1
20772: PUSH
20773: LD_VAR 0 2
20777: PUSH
20778: FOR_IN
20779: IFFALSE 20795
// SetFuel ( i , 0 ) ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_INT 0
20788: PPUSH
20789: CALL_OW 240
20793: GO 20778
20795: POP
20796: POP
// end ;
20797: PPOPN 2
20799: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20800: LD_EXP 15
20804: PUSH
20805: LD_EXP 51
20809: AND
20810: IFFALSE 20876
20812: GO 20814
20814: DISABLE
20815: LD_INT 0
20817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20818: LD_ADDR_VAR 0 1
20822: PUSH
20823: LD_INT 22
20825: PUSH
20826: LD_OWVAR 2
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 30
20837: PUSH
20838: LD_INT 29
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PPUSH
20849: CALL_OW 69
20853: ST_TO_ADDR
// if not tmp then
20854: LD_VAR 0 1
20858: NOT
20859: IFFALSE 20863
// exit ;
20861: GO 20876
// DestroyUnit ( tmp [ 1 ] ) ;
20863: LD_VAR 0 1
20867: PUSH
20868: LD_INT 1
20870: ARRAY
20871: PPUSH
20872: CALL_OW 65
// end ;
20876: PPOPN 1
20878: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20879: LD_EXP 15
20883: PUSH
20884: LD_EXP 53
20888: AND
20889: IFFALSE 21018
20891: GO 20893
20893: DISABLE
20894: LD_INT 0
20896: PPUSH
// begin uc_side := 0 ;
20897: LD_ADDR_OWVAR 20
20901: PUSH
20902: LD_INT 0
20904: ST_TO_ADDR
// uc_nation := nation_arabian ;
20905: LD_ADDR_OWVAR 21
20909: PUSH
20910: LD_INT 2
20912: ST_TO_ADDR
// hc_gallery :=  ;
20913: LD_ADDR_OWVAR 33
20917: PUSH
20918: LD_STRING 
20920: ST_TO_ADDR
// hc_name :=  ;
20921: LD_ADDR_OWVAR 26
20925: PUSH
20926: LD_STRING 
20928: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20929: LD_INT 1
20931: PPUSH
20932: LD_INT 11
20934: PPUSH
20935: LD_INT 10
20937: PPUSH
20938: CALL_OW 380
// un := CreateHuman ;
20942: LD_ADDR_VAR 0 1
20946: PUSH
20947: CALL_OW 44
20951: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20952: LD_VAR 0 1
20956: PPUSH
20957: LD_INT 1
20959: PPUSH
20960: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20964: LD_INT 35
20966: PPUSH
20967: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20971: LD_VAR 0 1
20975: PPUSH
20976: LD_INT 22
20978: PUSH
20979: LD_OWVAR 2
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 69
20992: PPUSH
20993: LD_VAR 0 1
20997: PPUSH
20998: CALL_OW 74
21002: PPUSH
21003: CALL_OW 115
// until IsDead ( un ) ;
21007: LD_VAR 0 1
21011: PPUSH
21012: CALL_OW 301
21016: IFFALSE 20964
// end ;
21018: PPOPN 1
21020: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21021: LD_EXP 15
21025: PUSH
21026: LD_EXP 55
21030: AND
21031: IFFALSE 21043
21033: GO 21035
21035: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21036: LD_STRING earthquake(getX(game), 0, 32)
21038: PPUSH
21039: CALL_OW 559
21043: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21044: LD_EXP 15
21048: PUSH
21049: LD_EXP 56
21053: AND
21054: IFFALSE 21145
21056: GO 21058
21058: DISABLE
21059: LD_INT 0
21061: PPUSH
// begin enable ;
21062: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21063: LD_ADDR_VAR 0 1
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_OWVAR 2
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 21
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 33
21092: PUSH
21093: LD_INT 3
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: PPUSH
21105: CALL_OW 69
21109: ST_TO_ADDR
// if not tmp then
21110: LD_VAR 0 1
21114: NOT
21115: IFFALSE 21119
// exit ;
21117: GO 21145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21119: LD_VAR 0 1
21123: PUSH
21124: LD_INT 1
21126: PPUSH
21127: LD_VAR 0 1
21131: PPUSH
21132: CALL_OW 12
21136: ARRAY
21137: PPUSH
21138: LD_INT 1
21140: PPUSH
21141: CALL_OW 234
// end ;
21145: PPOPN 1
21147: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21148: LD_EXP 15
21152: PUSH
21153: LD_EXP 57
21157: AND
21158: IFFALSE 21299
21160: GO 21162
21162: DISABLE
21163: LD_INT 0
21165: PPUSH
21166: PPUSH
21167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21168: LD_ADDR_VAR 0 3
21172: PUSH
21173: LD_INT 22
21175: PUSH
21176: LD_OWVAR 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 25
21187: PUSH
21188: LD_INT 1
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PPUSH
21199: CALL_OW 69
21203: ST_TO_ADDR
// if not tmp then
21204: LD_VAR 0 3
21208: NOT
21209: IFFALSE 21213
// exit ;
21211: GO 21299
// un := tmp [ rand ( 1 , tmp ) ] ;
21213: LD_ADDR_VAR 0 2
21217: PUSH
21218: LD_VAR 0 3
21222: PUSH
21223: LD_INT 1
21225: PPUSH
21226: LD_VAR 0 3
21230: PPUSH
21231: CALL_OW 12
21235: ARRAY
21236: ST_TO_ADDR
// if Crawls ( un ) then
21237: LD_VAR 0 2
21241: PPUSH
21242: CALL_OW 318
21246: IFFALSE 21257
// ComWalk ( un ) ;
21248: LD_VAR 0 2
21252: PPUSH
21253: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21257: LD_VAR 0 2
21261: PPUSH
21262: LD_INT 9
21264: PPUSH
21265: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21269: LD_INT 28
21271: PPUSH
21272: LD_OWVAR 2
21276: PPUSH
21277: LD_INT 2
21279: PPUSH
21280: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21284: LD_INT 29
21286: PPUSH
21287: LD_OWVAR 2
21291: PPUSH
21292: LD_INT 2
21294: PPUSH
21295: CALL_OW 322
// end ;
21299: PPOPN 3
21301: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21302: LD_EXP 15
21306: PUSH
21307: LD_EXP 58
21311: AND
21312: IFFALSE 21423
21314: GO 21316
21316: DISABLE
21317: LD_INT 0
21319: PPUSH
21320: PPUSH
21321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 22
21329: PUSH
21330: LD_OWVAR 2
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 25
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PPUSH
21353: CALL_OW 69
21357: ST_TO_ADDR
// if not tmp then
21358: LD_VAR 0 3
21362: NOT
21363: IFFALSE 21367
// exit ;
21365: GO 21423
// un := tmp [ rand ( 1 , tmp ) ] ;
21367: LD_ADDR_VAR 0 2
21371: PUSH
21372: LD_VAR 0 3
21376: PUSH
21377: LD_INT 1
21379: PPUSH
21380: LD_VAR 0 3
21384: PPUSH
21385: CALL_OW 12
21389: ARRAY
21390: ST_TO_ADDR
// if Crawls ( un ) then
21391: LD_VAR 0 2
21395: PPUSH
21396: CALL_OW 318
21400: IFFALSE 21411
// ComWalk ( un ) ;
21402: LD_VAR 0 2
21406: PPUSH
21407: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21411: LD_VAR 0 2
21415: PPUSH
21416: LD_INT 8
21418: PPUSH
21419: CALL_OW 336
// end ;
21423: PPOPN 3
21425: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21426: LD_EXP 15
21430: PUSH
21431: LD_EXP 59
21435: AND
21436: IFFALSE 21580
21438: GO 21440
21440: DISABLE
21441: LD_INT 0
21443: PPUSH
21444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21445: LD_ADDR_VAR 0 2
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_OWVAR 2
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 21
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: LD_INT 34
21477: PUSH
21478: LD_INT 12
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 34
21487: PUSH
21488: LD_INT 51
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 34
21497: PUSH
21498: LD_INT 32
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: PPUSH
21516: CALL_OW 69
21520: ST_TO_ADDR
// if not tmp then
21521: LD_VAR 0 2
21525: NOT
21526: IFFALSE 21530
// exit ;
21528: GO 21580
// for i in tmp do
21530: LD_ADDR_VAR 0 1
21534: PUSH
21535: LD_VAR 0 2
21539: PUSH
21540: FOR_IN
21541: IFFALSE 21578
// if GetCargo ( i , mat_artifact ) = 0 then
21543: LD_VAR 0 1
21547: PPUSH
21548: LD_INT 4
21550: PPUSH
21551: CALL_OW 289
21555: PUSH
21556: LD_INT 0
21558: EQUAL
21559: IFFALSE 21576
// SetCargo ( i , mat_siberit , 100 ) ;
21561: LD_VAR 0 1
21565: PPUSH
21566: LD_INT 3
21568: PPUSH
21569: LD_INT 100
21571: PPUSH
21572: CALL_OW 290
21576: GO 21540
21578: POP
21579: POP
// end ;
21580: PPOPN 2
21582: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21583: LD_EXP 15
21587: PUSH
21588: LD_EXP 60
21592: AND
21593: IFFALSE 21776
21595: GO 21597
21597: DISABLE
21598: LD_INT 0
21600: PPUSH
21601: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21602: LD_ADDR_VAR 0 2
21606: PUSH
21607: LD_INT 22
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PPUSH
21619: CALL_OW 69
21623: ST_TO_ADDR
// if not tmp then
21624: LD_VAR 0 2
21628: NOT
21629: IFFALSE 21633
// exit ;
21631: GO 21776
// for i := 1 to 2 do
21633: LD_ADDR_VAR 0 1
21637: PUSH
21638: DOUBLE
21639: LD_INT 1
21641: DEC
21642: ST_TO_ADDR
21643: LD_INT 2
21645: PUSH
21646: FOR_TO
21647: IFFALSE 21774
// begin uc_side := your_side ;
21649: LD_ADDR_OWVAR 20
21653: PUSH
21654: LD_OWVAR 2
21658: ST_TO_ADDR
// uc_nation := nation_american ;
21659: LD_ADDR_OWVAR 21
21663: PUSH
21664: LD_INT 1
21666: ST_TO_ADDR
// vc_chassis := us_morphling ;
21667: LD_ADDR_OWVAR 37
21671: PUSH
21672: LD_INT 5
21674: ST_TO_ADDR
// vc_engine := engine_siberite ;
21675: LD_ADDR_OWVAR 39
21679: PUSH
21680: LD_INT 3
21682: ST_TO_ADDR
// vc_control := control_computer ;
21683: LD_ADDR_OWVAR 38
21687: PUSH
21688: LD_INT 3
21690: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21691: LD_ADDR_OWVAR 40
21695: PUSH
21696: LD_INT 10
21698: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21699: LD_VAR 0 2
21703: PUSH
21704: LD_INT 1
21706: ARRAY
21707: PPUSH
21708: CALL_OW 310
21712: NOT
21713: IFFALSE 21760
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21715: CALL_OW 45
21719: PPUSH
21720: LD_VAR 0 2
21724: PUSH
21725: LD_INT 1
21727: ARRAY
21728: PPUSH
21729: CALL_OW 250
21733: PPUSH
21734: LD_VAR 0 2
21738: PUSH
21739: LD_INT 1
21741: ARRAY
21742: PPUSH
21743: CALL_OW 251
21747: PPUSH
21748: LD_INT 12
21750: PPUSH
21751: LD_INT 1
21753: PPUSH
21754: CALL_OW 50
21758: GO 21772
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21760: CALL_OW 45
21764: PPUSH
21765: LD_INT 1
21767: PPUSH
21768: CALL_OW 51
// end ;
21772: GO 21646
21774: POP
21775: POP
// end ;
21776: PPOPN 2
21778: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21779: LD_EXP 15
21783: PUSH
21784: LD_EXP 61
21788: AND
21789: IFFALSE 22011
21791: GO 21793
21793: DISABLE
21794: LD_INT 0
21796: PPUSH
21797: PPUSH
21798: PPUSH
21799: PPUSH
21800: PPUSH
21801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21802: LD_ADDR_VAR 0 6
21806: PUSH
21807: LD_INT 22
21809: PUSH
21810: LD_OWVAR 2
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 21
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 3
21831: PUSH
21832: LD_INT 23
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: PPUSH
21851: CALL_OW 69
21855: ST_TO_ADDR
// if not tmp then
21856: LD_VAR 0 6
21860: NOT
21861: IFFALSE 21865
// exit ;
21863: GO 22011
// s1 := rand ( 1 , 4 ) ;
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: LD_INT 1
21872: PPUSH
21873: LD_INT 4
21875: PPUSH
21876: CALL_OW 12
21880: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21881: LD_ADDR_VAR 0 4
21885: PUSH
21886: LD_VAR 0 6
21890: PUSH
21891: LD_INT 1
21893: ARRAY
21894: PPUSH
21895: LD_VAR 0 2
21899: PPUSH
21900: CALL_OW 259
21904: ST_TO_ADDR
// if s1 = 1 then
21905: LD_VAR 0 2
21909: PUSH
21910: LD_INT 1
21912: EQUAL
21913: IFFALSE 21933
// s2 := rand ( 2 , 4 ) else
21915: LD_ADDR_VAR 0 3
21919: PUSH
21920: LD_INT 2
21922: PPUSH
21923: LD_INT 4
21925: PPUSH
21926: CALL_OW 12
21930: ST_TO_ADDR
21931: GO 21941
// s2 := 1 ;
21933: LD_ADDR_VAR 0 3
21937: PUSH
21938: LD_INT 1
21940: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21941: LD_ADDR_VAR 0 5
21945: PUSH
21946: LD_VAR 0 6
21950: PUSH
21951: LD_INT 1
21953: ARRAY
21954: PPUSH
21955: LD_VAR 0 3
21959: PPUSH
21960: CALL_OW 259
21964: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21965: LD_VAR 0 6
21969: PUSH
21970: LD_INT 1
21972: ARRAY
21973: PPUSH
21974: LD_VAR 0 2
21978: PPUSH
21979: LD_VAR 0 5
21983: PPUSH
21984: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21988: LD_VAR 0 6
21992: PUSH
21993: LD_INT 1
21995: ARRAY
21996: PPUSH
21997: LD_VAR 0 3
22001: PPUSH
22002: LD_VAR 0 4
22006: PPUSH
22007: CALL_OW 237
// end ;
22011: PPOPN 6
22013: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22014: LD_EXP 15
22018: PUSH
22019: LD_EXP 62
22023: AND
22024: IFFALSE 22103
22026: GO 22028
22028: DISABLE
22029: LD_INT 0
22031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22032: LD_ADDR_VAR 0 1
22036: PUSH
22037: LD_INT 22
22039: PUSH
22040: LD_OWVAR 2
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 30
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PPUSH
22063: CALL_OW 69
22067: ST_TO_ADDR
// if not tmp then
22068: LD_VAR 0 1
22072: NOT
22073: IFFALSE 22077
// exit ;
22075: GO 22103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22077: LD_VAR 0 1
22081: PUSH
22082: LD_INT 1
22084: PPUSH
22085: LD_VAR 0 1
22089: PPUSH
22090: CALL_OW 12
22094: ARRAY
22095: PPUSH
22096: LD_INT 1
22098: PPUSH
22099: CALL_OW 234
// end ;
22103: PPOPN 1
22105: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22106: LD_EXP 15
22110: PUSH
22111: LD_EXP 63
22115: AND
22116: IFFALSE 22228
22118: GO 22120
22120: DISABLE
22121: LD_INT 0
22123: PPUSH
22124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22125: LD_ADDR_VAR 0 2
22129: PUSH
22130: LD_INT 22
22132: PUSH
22133: LD_OWVAR 2
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 30
22147: PUSH
22148: LD_INT 27
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 30
22157: PUSH
22158: LD_INT 26
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 30
22167: PUSH
22168: LD_INT 28
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PPUSH
22185: CALL_OW 69
22189: ST_TO_ADDR
// if not tmp then
22190: LD_VAR 0 2
22194: NOT
22195: IFFALSE 22199
// exit ;
22197: GO 22228
// for i in tmp do
22199: LD_ADDR_VAR 0 1
22203: PUSH
22204: LD_VAR 0 2
22208: PUSH
22209: FOR_IN
22210: IFFALSE 22226
// SetLives ( i , 1 ) ;
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: CALL_OW 234
22224: GO 22209
22226: POP
22227: POP
// end ;
22228: PPOPN 2
22230: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22231: LD_EXP 15
22235: PUSH
22236: LD_EXP 64
22240: AND
22241: IFFALSE 22528
22243: GO 22245
22245: DISABLE
22246: LD_INT 0
22248: PPUSH
22249: PPUSH
22250: PPUSH
// begin i := rand ( 1 , 7 ) ;
22251: LD_ADDR_VAR 0 1
22255: PUSH
22256: LD_INT 1
22258: PPUSH
22259: LD_INT 7
22261: PPUSH
22262: CALL_OW 12
22266: ST_TO_ADDR
// case i of 1 :
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 1
22274: DOUBLE
22275: EQUAL
22276: IFTRUE 22280
22278: GO 22290
22280: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22281: LD_STRING earthquake(getX(game), 0, 32)
22283: PPUSH
22284: CALL_OW 559
22288: GO 22528
22290: LD_INT 2
22292: DOUBLE
22293: EQUAL
22294: IFTRUE 22298
22296: GO 22312
22298: POP
// begin ToLua ( displayStucuk(); ) ;
22299: LD_STRING displayStucuk();
22301: PPUSH
22302: CALL_OW 559
// ResetFog ;
22306: CALL_OW 335
// end ; 3 :
22310: GO 22528
22312: LD_INT 3
22314: DOUBLE
22315: EQUAL
22316: IFTRUE 22320
22318: GO 22424
22320: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22321: LD_ADDR_VAR 0 2
22325: PUSH
22326: LD_INT 22
22328: PUSH
22329: LD_OWVAR 2
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 25
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL_OW 69
22356: ST_TO_ADDR
// if not tmp then
22357: LD_VAR 0 2
22361: NOT
22362: IFFALSE 22366
// exit ;
22364: GO 22528
// un := tmp [ rand ( 1 , tmp ) ] ;
22366: LD_ADDR_VAR 0 3
22370: PUSH
22371: LD_VAR 0 2
22375: PUSH
22376: LD_INT 1
22378: PPUSH
22379: LD_VAR 0 2
22383: PPUSH
22384: CALL_OW 12
22388: ARRAY
22389: ST_TO_ADDR
// if Crawls ( un ) then
22390: LD_VAR 0 3
22394: PPUSH
22395: CALL_OW 318
22399: IFFALSE 22410
// ComWalk ( un ) ;
22401: LD_VAR 0 3
22405: PPUSH
22406: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22410: LD_VAR 0 3
22414: PPUSH
22415: LD_INT 8
22417: PPUSH
22418: CALL_OW 336
// end ; 4 :
22422: GO 22528
22424: LD_INT 4
22426: DOUBLE
22427: EQUAL
22428: IFTRUE 22432
22430: GO 22506
22432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22433: LD_ADDR_VAR 0 2
22437: PUSH
22438: LD_INT 22
22440: PUSH
22441: LD_OWVAR 2
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 30
22452: PUSH
22453: LD_INT 29
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PPUSH
22464: CALL_OW 69
22468: ST_TO_ADDR
// if not tmp then
22469: LD_VAR 0 2
22473: NOT
22474: IFFALSE 22478
// exit ;
22476: GO 22528
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22478: LD_VAR 0 2
22482: PUSH
22483: LD_INT 1
22485: ARRAY
22486: PPUSH
22487: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22491: LD_VAR 0 2
22495: PUSH
22496: LD_INT 1
22498: ARRAY
22499: PPUSH
22500: CALL_OW 65
// end ; 5 .. 7 :
22504: GO 22528
22506: LD_INT 5
22508: DOUBLE
22509: GREATEREQUAL
22510: IFFALSE 22518
22512: LD_INT 7
22514: DOUBLE
22515: LESSEQUAL
22516: IFTRUE 22520
22518: GO 22527
22520: POP
// StreamSibBomb ; end ;
22521: CALL 18765 0 0
22525: GO 22528
22527: POP
// end ;
22528: PPOPN 3
22530: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22531: LD_EXP 15
22535: PUSH
22536: LD_EXP 65
22540: AND
22541: IFFALSE 22697
22543: GO 22545
22545: DISABLE
22546: LD_INT 0
22548: PPUSH
22549: PPUSH
22550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22551: LD_ADDR_VAR 0 2
22555: PUSH
22556: LD_INT 81
22558: PUSH
22559: LD_OWVAR 2
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: LD_INT 21
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 21
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PPUSH
22600: CALL_OW 69
22604: ST_TO_ADDR
// if not tmp then
22605: LD_VAR 0 2
22609: NOT
22610: IFFALSE 22614
// exit ;
22612: GO 22697
// p := 0 ;
22614: LD_ADDR_VAR 0 3
22618: PUSH
22619: LD_INT 0
22621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22622: LD_INT 35
22624: PPUSH
22625: CALL_OW 67
// p := p + 1 ;
22629: LD_ADDR_VAR 0 3
22633: PUSH
22634: LD_VAR 0 3
22638: PUSH
22639: LD_INT 1
22641: PLUS
22642: ST_TO_ADDR
// for i in tmp do
22643: LD_ADDR_VAR 0 1
22647: PUSH
22648: LD_VAR 0 2
22652: PUSH
22653: FOR_IN
22654: IFFALSE 22685
// if GetLives ( i ) < 1000 then
22656: LD_VAR 0 1
22660: PPUSH
22661: CALL_OW 256
22665: PUSH
22666: LD_INT 1000
22668: LESS
22669: IFFALSE 22683
// SetLives ( i , 1000 ) ;
22671: LD_VAR 0 1
22675: PPUSH
22676: LD_INT 1000
22678: PPUSH
22679: CALL_OW 234
22683: GO 22653
22685: POP
22686: POP
// until p > 20 ;
22687: LD_VAR 0 3
22691: PUSH
22692: LD_INT 20
22694: GREATER
22695: IFFALSE 22622
// end ;
22697: PPOPN 3
22699: END
// every 0 0$1 trigger StreamModeActive and sTime do
22700: LD_EXP 15
22704: PUSH
22705: LD_EXP 66
22709: AND
22710: IFFALSE 22745
22712: GO 22714
22714: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22715: LD_INT 28
22717: PPUSH
22718: LD_OWVAR 2
22722: PPUSH
22723: LD_INT 2
22725: PPUSH
22726: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22730: LD_INT 30
22732: PPUSH
22733: LD_OWVAR 2
22737: PPUSH
22738: LD_INT 2
22740: PPUSH
22741: CALL_OW 322
// end ;
22745: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22746: LD_EXP 15
22750: PUSH
22751: LD_EXP 67
22755: AND
22756: IFFALSE 22877
22758: GO 22760
22760: DISABLE
22761: LD_INT 0
22763: PPUSH
22764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22765: LD_ADDR_VAR 0 2
22769: PUSH
22770: LD_INT 22
22772: PUSH
22773: LD_OWVAR 2
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 21
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 3
22794: PUSH
22795: LD_INT 23
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: PPUSH
22814: CALL_OW 69
22818: ST_TO_ADDR
// if not tmp then
22819: LD_VAR 0 2
22823: NOT
22824: IFFALSE 22828
// exit ;
22826: GO 22877
// for i in tmp do
22828: LD_ADDR_VAR 0 1
22832: PUSH
22833: LD_VAR 0 2
22837: PUSH
22838: FOR_IN
22839: IFFALSE 22875
// begin if Crawls ( i ) then
22841: LD_VAR 0 1
22845: PPUSH
22846: CALL_OW 318
22850: IFFALSE 22861
// ComWalk ( i ) ;
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 138
// SetClass ( i , 2 ) ;
22861: LD_VAR 0 1
22865: PPUSH
22866: LD_INT 2
22868: PPUSH
22869: CALL_OW 336
// end ;
22873: GO 22838
22875: POP
22876: POP
// end ;
22877: PPOPN 2
22879: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22880: LD_EXP 15
22884: PUSH
22885: LD_EXP 68
22889: AND
22890: IFFALSE 23178
22892: GO 22894
22894: DISABLE
22895: LD_INT 0
22897: PPUSH
22898: PPUSH
22899: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22900: LD_OWVAR 2
22904: PPUSH
22905: LD_INT 9
22907: PPUSH
22908: LD_INT 1
22910: PPUSH
22911: LD_INT 1
22913: PPUSH
22914: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22918: LD_INT 9
22920: PPUSH
22921: LD_OWVAR 2
22925: PPUSH
22926: CALL_OW 343
// uc_side := 9 ;
22930: LD_ADDR_OWVAR 20
22934: PUSH
22935: LD_INT 9
22937: ST_TO_ADDR
// uc_nation := 2 ;
22938: LD_ADDR_OWVAR 21
22942: PUSH
22943: LD_INT 2
22945: ST_TO_ADDR
// hc_name := Dark Warrior ;
22946: LD_ADDR_OWVAR 26
22950: PUSH
22951: LD_STRING Dark Warrior
22953: ST_TO_ADDR
// hc_gallery :=  ;
22954: LD_ADDR_OWVAR 33
22958: PUSH
22959: LD_STRING 
22961: ST_TO_ADDR
// hc_noskilllimit := true ;
22962: LD_ADDR_OWVAR 76
22966: PUSH
22967: LD_INT 1
22969: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22970: LD_ADDR_OWVAR 31
22974: PUSH
22975: LD_INT 30
22977: PUSH
22978: LD_INT 30
22980: PUSH
22981: LD_INT 30
22983: PUSH
22984: LD_INT 30
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: ST_TO_ADDR
// un := CreateHuman ;
22993: LD_ADDR_VAR 0 3
22997: PUSH
22998: CALL_OW 44
23002: ST_TO_ADDR
// hc_noskilllimit := false ;
23003: LD_ADDR_OWVAR 76
23007: PUSH
23008: LD_INT 0
23010: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23011: LD_VAR 0 3
23015: PPUSH
23016: LD_INT 1
23018: PPUSH
23019: CALL_OW 51
// ToLua ( playRanger() ) ;
23023: LD_STRING playRanger()
23025: PPUSH
23026: CALL_OW 559
// p := 0 ;
23030: LD_ADDR_VAR 0 2
23034: PUSH
23035: LD_INT 0
23037: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23038: LD_INT 35
23040: PPUSH
23041: CALL_OW 67
// p := p + 1 ;
23045: LD_ADDR_VAR 0 2
23049: PUSH
23050: LD_VAR 0 2
23054: PUSH
23055: LD_INT 1
23057: PLUS
23058: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23059: LD_VAR 0 3
23063: PPUSH
23064: CALL_OW 256
23068: PUSH
23069: LD_INT 1000
23071: LESS
23072: IFFALSE 23086
// SetLives ( un , 1000 ) ;
23074: LD_VAR 0 3
23078: PPUSH
23079: LD_INT 1000
23081: PPUSH
23082: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23086: LD_VAR 0 3
23090: PPUSH
23091: LD_INT 81
23093: PUSH
23094: LD_OWVAR 2
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 91
23105: PUSH
23106: LD_VAR 0 3
23110: PUSH
23111: LD_INT 30
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: LIST
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 69
23127: PPUSH
23128: LD_VAR 0 3
23132: PPUSH
23133: CALL_OW 74
23137: PPUSH
23138: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23142: LD_VAR 0 2
23146: PUSH
23147: LD_INT 80
23149: GREATER
23150: PUSH
23151: LD_VAR 0 3
23155: PPUSH
23156: CALL_OW 301
23160: OR
23161: IFFALSE 23038
// if un then
23163: LD_VAR 0 3
23167: IFFALSE 23178
// RemoveUnit ( un ) ;
23169: LD_VAR 0 3
23173: PPUSH
23174: CALL_OW 64
// end ;
23178: PPOPN 3
23180: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23181: LD_EXP 69
23185: IFFALSE 23301
23187: GO 23189
23189: DISABLE
23190: LD_INT 0
23192: PPUSH
23193: PPUSH
23194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23195: LD_ADDR_VAR 0 2
23199: PUSH
23200: LD_INT 81
23202: PUSH
23203: LD_OWVAR 2
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 21
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PPUSH
23226: CALL_OW 69
23230: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23231: LD_STRING playComputer()
23233: PPUSH
23234: CALL_OW 559
// if not tmp then
23238: LD_VAR 0 2
23242: NOT
23243: IFFALSE 23247
// exit ;
23245: GO 23301
// for i in tmp do
23247: LD_ADDR_VAR 0 1
23251: PUSH
23252: LD_VAR 0 2
23256: PUSH
23257: FOR_IN
23258: IFFALSE 23299
// for j := 1 to 4 do
23260: LD_ADDR_VAR 0 3
23264: PUSH
23265: DOUBLE
23266: LD_INT 1
23268: DEC
23269: ST_TO_ADDR
23270: LD_INT 4
23272: PUSH
23273: FOR_TO
23274: IFFALSE 23295
// SetSkill ( i , j , 10 ) ;
23276: LD_VAR 0 1
23280: PPUSH
23281: LD_VAR 0 3
23285: PPUSH
23286: LD_INT 10
23288: PPUSH
23289: CALL_OW 237
23293: GO 23273
23295: POP
23296: POP
23297: GO 23257
23299: POP
23300: POP
// end ;
23301: PPOPN 3
23303: END
// every 0 0$1 trigger s30 do var i , tmp ;
23304: LD_EXP 70
23308: IFFALSE 23377
23310: GO 23312
23312: DISABLE
23313: LD_INT 0
23315: PPUSH
23316: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23317: LD_ADDR_VAR 0 2
23321: PUSH
23322: LD_INT 22
23324: PUSH
23325: LD_OWVAR 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PPUSH
23334: CALL_OW 69
23338: ST_TO_ADDR
// if not tmp then
23339: LD_VAR 0 2
23343: NOT
23344: IFFALSE 23348
// exit ;
23346: GO 23377
// for i in tmp do
23348: LD_ADDR_VAR 0 1
23352: PUSH
23353: LD_VAR 0 2
23357: PUSH
23358: FOR_IN
23359: IFFALSE 23375
// SetLives ( i , 300 ) ;
23361: LD_VAR 0 1
23365: PPUSH
23366: LD_INT 300
23368: PPUSH
23369: CALL_OW 234
23373: GO 23358
23375: POP
23376: POP
// end ;
23377: PPOPN 2
23379: END
// every 0 0$1 trigger s60 do var i , tmp ;
23380: LD_EXP 71
23384: IFFALSE 23453
23386: GO 23388
23388: DISABLE
23389: LD_INT 0
23391: PPUSH
23392: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: LD_INT 22
23400: PUSH
23401: LD_OWVAR 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PPUSH
23410: CALL_OW 69
23414: ST_TO_ADDR
// if not tmp then
23415: LD_VAR 0 2
23419: NOT
23420: IFFALSE 23424
// exit ;
23422: GO 23453
// for i in tmp do
23424: LD_ADDR_VAR 0 1
23428: PUSH
23429: LD_VAR 0 2
23433: PUSH
23434: FOR_IN
23435: IFFALSE 23451
// SetLives ( i , 600 ) ;
23437: LD_VAR 0 1
23441: PPUSH
23442: LD_INT 600
23444: PPUSH
23445: CALL_OW 234
23449: GO 23434
23451: POP
23452: POP
// end ;
23453: PPOPN 2
23455: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23456: LD_INT 0
23458: PPUSH
// case cmd of 301 :
23459: LD_VAR 0 1
23463: PUSH
23464: LD_INT 301
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23504
23472: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23473: LD_VAR 0 6
23477: PPUSH
23478: LD_VAR 0 7
23482: PPUSH
23483: LD_VAR 0 8
23487: PPUSH
23488: LD_VAR 0 4
23492: PPUSH
23493: LD_VAR 0 5
23497: PPUSH
23498: CALL 24705 0 5
23502: GO 23625
23504: LD_INT 302
23506: DOUBLE
23507: EQUAL
23508: IFTRUE 23512
23510: GO 23549
23512: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23513: LD_VAR 0 6
23517: PPUSH
23518: LD_VAR 0 7
23522: PPUSH
23523: LD_VAR 0 8
23527: PPUSH
23528: LD_VAR 0 9
23532: PPUSH
23533: LD_VAR 0 4
23537: PPUSH
23538: LD_VAR 0 5
23542: PPUSH
23543: CALL 24796 0 6
23547: GO 23625
23549: LD_INT 303
23551: DOUBLE
23552: EQUAL
23553: IFTRUE 23557
23555: GO 23594
23557: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23558: LD_VAR 0 6
23562: PPUSH
23563: LD_VAR 0 7
23567: PPUSH
23568: LD_VAR 0 8
23572: PPUSH
23573: LD_VAR 0 9
23577: PPUSH
23578: LD_VAR 0 4
23582: PPUSH
23583: LD_VAR 0 5
23587: PPUSH
23588: CALL 23630 0 6
23592: GO 23625
23594: LD_INT 304
23596: DOUBLE
23597: EQUAL
23598: IFTRUE 23602
23600: GO 23624
23602: POP
// hHackTeleport ( unit , x , y ) ; end ;
23603: LD_VAR 0 2
23607: PPUSH
23608: LD_VAR 0 4
23612: PPUSH
23613: LD_VAR 0 5
23617: PPUSH
23618: CALL 25389 0 3
23622: GO 23625
23624: POP
// end ;
23625: LD_VAR 0 12
23629: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23630: LD_INT 0
23632: PPUSH
23633: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23634: LD_VAR 0 1
23638: PUSH
23639: LD_INT 1
23641: LESS
23642: PUSH
23643: LD_VAR 0 1
23647: PUSH
23648: LD_INT 3
23650: GREATER
23651: OR
23652: PUSH
23653: LD_VAR 0 5
23657: PPUSH
23658: LD_VAR 0 6
23662: PPUSH
23663: CALL_OW 428
23667: OR
23668: IFFALSE 23672
// exit ;
23670: GO 24392
// uc_side := your_side ;
23672: LD_ADDR_OWVAR 20
23676: PUSH
23677: LD_OWVAR 2
23681: ST_TO_ADDR
// uc_nation := nation ;
23682: LD_ADDR_OWVAR 21
23686: PUSH
23687: LD_VAR 0 1
23691: ST_TO_ADDR
// bc_level = 1 ;
23692: LD_ADDR_OWVAR 43
23696: PUSH
23697: LD_INT 1
23699: ST_TO_ADDR
// case btype of 1 :
23700: LD_VAR 0 2
23704: PUSH
23705: LD_INT 1
23707: DOUBLE
23708: EQUAL
23709: IFTRUE 23713
23711: GO 23724
23713: POP
// bc_type := b_depot ; 2 :
23714: LD_ADDR_OWVAR 42
23718: PUSH
23719: LD_INT 0
23721: ST_TO_ADDR
23722: GO 24336
23724: LD_INT 2
23726: DOUBLE
23727: EQUAL
23728: IFTRUE 23732
23730: GO 23743
23732: POP
// bc_type := b_warehouse ; 3 :
23733: LD_ADDR_OWVAR 42
23737: PUSH
23738: LD_INT 1
23740: ST_TO_ADDR
23741: GO 24336
23743: LD_INT 3
23745: DOUBLE
23746: EQUAL
23747: IFTRUE 23751
23749: GO 23762
23751: POP
// bc_type := b_lab ; 4 .. 9 :
23752: LD_ADDR_OWVAR 42
23756: PUSH
23757: LD_INT 6
23759: ST_TO_ADDR
23760: GO 24336
23762: LD_INT 4
23764: DOUBLE
23765: GREATEREQUAL
23766: IFFALSE 23774
23768: LD_INT 9
23770: DOUBLE
23771: LESSEQUAL
23772: IFTRUE 23776
23774: GO 23828
23776: POP
// begin bc_type := b_lab_half ;
23777: LD_ADDR_OWVAR 42
23781: PUSH
23782: LD_INT 7
23784: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23785: LD_ADDR_OWVAR 44
23789: PUSH
23790: LD_INT 10
23792: PUSH
23793: LD_INT 11
23795: PUSH
23796: LD_INT 12
23798: PUSH
23799: LD_INT 15
23801: PUSH
23802: LD_INT 14
23804: PUSH
23805: LD_INT 13
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: LD_VAR 0 2
23820: PUSH
23821: LD_INT 3
23823: MINUS
23824: ARRAY
23825: ST_TO_ADDR
// end ; 10 .. 13 :
23826: GO 24336
23828: LD_INT 10
23830: DOUBLE
23831: GREATEREQUAL
23832: IFFALSE 23840
23834: LD_INT 13
23836: DOUBLE
23837: LESSEQUAL
23838: IFTRUE 23842
23840: GO 23919
23842: POP
// begin bc_type := b_lab_full ;
23843: LD_ADDR_OWVAR 42
23847: PUSH
23848: LD_INT 8
23850: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23851: LD_ADDR_OWVAR 44
23855: PUSH
23856: LD_INT 10
23858: PUSH
23859: LD_INT 12
23861: PUSH
23862: LD_INT 14
23864: PUSH
23865: LD_INT 13
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: PUSH
23874: LD_VAR 0 2
23878: PUSH
23879: LD_INT 9
23881: MINUS
23882: ARRAY
23883: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23884: LD_ADDR_OWVAR 45
23888: PUSH
23889: LD_INT 11
23891: PUSH
23892: LD_INT 15
23894: PUSH
23895: LD_INT 12
23897: PUSH
23898: LD_INT 15
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: PUSH
23907: LD_VAR 0 2
23911: PUSH
23912: LD_INT 9
23914: MINUS
23915: ARRAY
23916: ST_TO_ADDR
// end ; 14 :
23917: GO 24336
23919: LD_INT 14
23921: DOUBLE
23922: EQUAL
23923: IFTRUE 23927
23925: GO 23938
23927: POP
// bc_type := b_workshop ; 15 :
23928: LD_ADDR_OWVAR 42
23932: PUSH
23933: LD_INT 2
23935: ST_TO_ADDR
23936: GO 24336
23938: LD_INT 15
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23946
23944: GO 23957
23946: POP
// bc_type := b_factory ; 16 :
23947: LD_ADDR_OWVAR 42
23951: PUSH
23952: LD_INT 3
23954: ST_TO_ADDR
23955: GO 24336
23957: LD_INT 16
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 23976
23965: POP
// bc_type := b_ext_gun ; 17 :
23966: LD_ADDR_OWVAR 42
23970: PUSH
23971: LD_INT 17
23973: ST_TO_ADDR
23974: GO 24336
23976: LD_INT 17
23978: DOUBLE
23979: EQUAL
23980: IFTRUE 23984
23982: GO 24012
23984: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23985: LD_ADDR_OWVAR 42
23989: PUSH
23990: LD_INT 19
23992: PUSH
23993: LD_INT 23
23995: PUSH
23996: LD_INT 19
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: PUSH
24004: LD_VAR 0 1
24008: ARRAY
24009: ST_TO_ADDR
24010: GO 24336
24012: LD_INT 18
24014: DOUBLE
24015: EQUAL
24016: IFTRUE 24020
24018: GO 24031
24020: POP
// bc_type := b_ext_radar ; 19 :
24021: LD_ADDR_OWVAR 42
24025: PUSH
24026: LD_INT 20
24028: ST_TO_ADDR
24029: GO 24336
24031: LD_INT 19
24033: DOUBLE
24034: EQUAL
24035: IFTRUE 24039
24037: GO 24050
24039: POP
// bc_type := b_ext_radio ; 20 :
24040: LD_ADDR_OWVAR 42
24044: PUSH
24045: LD_INT 22
24047: ST_TO_ADDR
24048: GO 24336
24050: LD_INT 20
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24069
24058: POP
// bc_type := b_ext_siberium ; 21 :
24059: LD_ADDR_OWVAR 42
24063: PUSH
24064: LD_INT 21
24066: ST_TO_ADDR
24067: GO 24336
24069: LD_INT 21
24071: DOUBLE
24072: EQUAL
24073: IFTRUE 24077
24075: GO 24088
24077: POP
// bc_type := b_ext_computer ; 22 :
24078: LD_ADDR_OWVAR 42
24082: PUSH
24083: LD_INT 24
24085: ST_TO_ADDR
24086: GO 24336
24088: LD_INT 22
24090: DOUBLE
24091: EQUAL
24092: IFTRUE 24096
24094: GO 24107
24096: POP
// bc_type := b_ext_track ; 23 :
24097: LD_ADDR_OWVAR 42
24101: PUSH
24102: LD_INT 16
24104: ST_TO_ADDR
24105: GO 24336
24107: LD_INT 23
24109: DOUBLE
24110: EQUAL
24111: IFTRUE 24115
24113: GO 24126
24115: POP
// bc_type := b_ext_laser ; 24 :
24116: LD_ADDR_OWVAR 42
24120: PUSH
24121: LD_INT 25
24123: ST_TO_ADDR
24124: GO 24336
24126: LD_INT 24
24128: DOUBLE
24129: EQUAL
24130: IFTRUE 24134
24132: GO 24145
24134: POP
// bc_type := b_control_tower ; 25 :
24135: LD_ADDR_OWVAR 42
24139: PUSH
24140: LD_INT 36
24142: ST_TO_ADDR
24143: GO 24336
24145: LD_INT 25
24147: DOUBLE
24148: EQUAL
24149: IFTRUE 24153
24151: GO 24164
24153: POP
// bc_type := b_breastwork ; 26 :
24154: LD_ADDR_OWVAR 42
24158: PUSH
24159: LD_INT 31
24161: ST_TO_ADDR
24162: GO 24336
24164: LD_INT 26
24166: DOUBLE
24167: EQUAL
24168: IFTRUE 24172
24170: GO 24183
24172: POP
// bc_type := b_bunker ; 27 :
24173: LD_ADDR_OWVAR 42
24177: PUSH
24178: LD_INT 32
24180: ST_TO_ADDR
24181: GO 24336
24183: LD_INT 27
24185: DOUBLE
24186: EQUAL
24187: IFTRUE 24191
24189: GO 24202
24191: POP
// bc_type := b_turret ; 28 :
24192: LD_ADDR_OWVAR 42
24196: PUSH
24197: LD_INT 33
24199: ST_TO_ADDR
24200: GO 24336
24202: LD_INT 28
24204: DOUBLE
24205: EQUAL
24206: IFTRUE 24210
24208: GO 24221
24210: POP
// bc_type := b_armoury ; 29 :
24211: LD_ADDR_OWVAR 42
24215: PUSH
24216: LD_INT 4
24218: ST_TO_ADDR
24219: GO 24336
24221: LD_INT 29
24223: DOUBLE
24224: EQUAL
24225: IFTRUE 24229
24227: GO 24240
24229: POP
// bc_type := b_barracks ; 30 :
24230: LD_ADDR_OWVAR 42
24234: PUSH
24235: LD_INT 5
24237: ST_TO_ADDR
24238: GO 24336
24240: LD_INT 30
24242: DOUBLE
24243: EQUAL
24244: IFTRUE 24248
24246: GO 24259
24248: POP
// bc_type := b_solar_power ; 31 :
24249: LD_ADDR_OWVAR 42
24253: PUSH
24254: LD_INT 27
24256: ST_TO_ADDR
24257: GO 24336
24259: LD_INT 31
24261: DOUBLE
24262: EQUAL
24263: IFTRUE 24267
24265: GO 24278
24267: POP
// bc_type := b_oil_power ; 32 :
24268: LD_ADDR_OWVAR 42
24272: PUSH
24273: LD_INT 26
24275: ST_TO_ADDR
24276: GO 24336
24278: LD_INT 32
24280: DOUBLE
24281: EQUAL
24282: IFTRUE 24286
24284: GO 24297
24286: POP
// bc_type := b_siberite_power ; 33 :
24287: LD_ADDR_OWVAR 42
24291: PUSH
24292: LD_INT 28
24294: ST_TO_ADDR
24295: GO 24336
24297: LD_INT 33
24299: DOUBLE
24300: EQUAL
24301: IFTRUE 24305
24303: GO 24316
24305: POP
// bc_type := b_oil_mine ; 34 :
24306: LD_ADDR_OWVAR 42
24310: PUSH
24311: LD_INT 29
24313: ST_TO_ADDR
24314: GO 24336
24316: LD_INT 34
24318: DOUBLE
24319: EQUAL
24320: IFTRUE 24324
24322: GO 24335
24324: POP
// bc_type := b_siberite_mine ; end ;
24325: LD_ADDR_OWVAR 42
24329: PUSH
24330: LD_INT 30
24332: ST_TO_ADDR
24333: GO 24336
24335: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24336: LD_ADDR_VAR 0 8
24340: PUSH
24341: LD_VAR 0 5
24345: PPUSH
24346: LD_VAR 0 6
24350: PPUSH
24351: LD_VAR 0 3
24355: PPUSH
24356: CALL_OW 47
24360: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24361: LD_OWVAR 42
24365: PUSH
24366: LD_INT 32
24368: PUSH
24369: LD_INT 33
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: IN
24376: IFFALSE 24392
// PlaceWeaponTurret ( b , weapon ) ;
24378: LD_VAR 0 8
24382: PPUSH
24383: LD_VAR 0 4
24387: PPUSH
24388: CALL_OW 431
// end ;
24392: LD_VAR 0 7
24396: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24397: LD_INT 0
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24403: LD_ADDR_VAR 0 4
24407: PUSH
24408: LD_INT 22
24410: PUSH
24411: LD_OWVAR 2
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 2
24422: PUSH
24423: LD_INT 30
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 30
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: LIST
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PPUSH
24452: CALL_OW 69
24456: ST_TO_ADDR
// if not tmp then
24457: LD_VAR 0 4
24461: NOT
24462: IFFALSE 24466
// exit ;
24464: GO 24525
// for i in tmp do
24466: LD_ADDR_VAR 0 2
24470: PUSH
24471: LD_VAR 0 4
24475: PUSH
24476: FOR_IN
24477: IFFALSE 24523
// for j = 1 to 3 do
24479: LD_ADDR_VAR 0 3
24483: PUSH
24484: DOUBLE
24485: LD_INT 1
24487: DEC
24488: ST_TO_ADDR
24489: LD_INT 3
24491: PUSH
24492: FOR_TO
24493: IFFALSE 24519
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24495: LD_VAR 0 2
24499: PPUSH
24500: CALL_OW 274
24504: PPUSH
24505: LD_VAR 0 3
24509: PPUSH
24510: LD_INT 99999
24512: PPUSH
24513: CALL_OW 277
24517: GO 24492
24519: POP
24520: POP
24521: GO 24476
24523: POP
24524: POP
// end ;
24525: LD_VAR 0 1
24529: RET
// export function hHackSetLevel10 ; var i , j ; begin
24530: LD_INT 0
24532: PPUSH
24533: PPUSH
24534: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24535: LD_ADDR_VAR 0 2
24539: PUSH
24540: LD_INT 21
24542: PUSH
24543: LD_INT 1
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PPUSH
24550: CALL_OW 69
24554: PUSH
24555: FOR_IN
24556: IFFALSE 24608
// if IsSelected ( i ) then
24558: LD_VAR 0 2
24562: PPUSH
24563: CALL_OW 306
24567: IFFALSE 24606
// begin for j := 1 to 4 do
24569: LD_ADDR_VAR 0 3
24573: PUSH
24574: DOUBLE
24575: LD_INT 1
24577: DEC
24578: ST_TO_ADDR
24579: LD_INT 4
24581: PUSH
24582: FOR_TO
24583: IFFALSE 24604
// SetSkill ( i , j , 10 ) ;
24585: LD_VAR 0 2
24589: PPUSH
24590: LD_VAR 0 3
24594: PPUSH
24595: LD_INT 10
24597: PPUSH
24598: CALL_OW 237
24602: GO 24582
24604: POP
24605: POP
// end ;
24606: GO 24555
24608: POP
24609: POP
// end ;
24610: LD_VAR 0 1
24614: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24615: LD_INT 0
24617: PPUSH
24618: PPUSH
24619: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24620: LD_ADDR_VAR 0 2
24624: PUSH
24625: LD_INT 22
24627: PUSH
24628: LD_OWVAR 2
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 21
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PPUSH
24651: CALL_OW 69
24655: PUSH
24656: FOR_IN
24657: IFFALSE 24698
// begin for j := 1 to 4 do
24659: LD_ADDR_VAR 0 3
24663: PUSH
24664: DOUBLE
24665: LD_INT 1
24667: DEC
24668: ST_TO_ADDR
24669: LD_INT 4
24671: PUSH
24672: FOR_TO
24673: IFFALSE 24694
// SetSkill ( i , j , 10 ) ;
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_VAR 0 3
24684: PPUSH
24685: LD_INT 10
24687: PPUSH
24688: CALL_OW 237
24692: GO 24672
24694: POP
24695: POP
// end ;
24696: GO 24656
24698: POP
24699: POP
// end ;
24700: LD_VAR 0 1
24704: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24705: LD_INT 0
24707: PPUSH
// uc_side := your_side ;
24708: LD_ADDR_OWVAR 20
24712: PUSH
24713: LD_OWVAR 2
24717: ST_TO_ADDR
// uc_nation := nation ;
24718: LD_ADDR_OWVAR 21
24722: PUSH
24723: LD_VAR 0 1
24727: ST_TO_ADDR
// InitHc ;
24728: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24732: LD_INT 0
24734: PPUSH
24735: LD_VAR 0 2
24739: PPUSH
24740: LD_VAR 0 3
24744: PPUSH
24745: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24749: LD_VAR 0 4
24753: PPUSH
24754: LD_VAR 0 5
24758: PPUSH
24759: CALL_OW 428
24763: PUSH
24764: LD_INT 0
24766: EQUAL
24767: IFFALSE 24791
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24769: CALL_OW 44
24773: PPUSH
24774: LD_VAR 0 4
24778: PPUSH
24779: LD_VAR 0 5
24783: PPUSH
24784: LD_INT 1
24786: PPUSH
24787: CALL_OW 48
// end ;
24791: LD_VAR 0 6
24795: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24796: LD_INT 0
24798: PPUSH
24799: PPUSH
// uc_side := your_side ;
24800: LD_ADDR_OWVAR 20
24804: PUSH
24805: LD_OWVAR 2
24809: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24810: LD_VAR 0 1
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: LD_INT 2
24820: PUSH
24821: LD_INT 3
24823: PUSH
24824: LD_INT 4
24826: PUSH
24827: LD_INT 5
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: IN
24837: IFFALSE 24849
// uc_nation := nation_american else
24839: LD_ADDR_OWVAR 21
24843: PUSH
24844: LD_INT 1
24846: ST_TO_ADDR
24847: GO 24892
// if chassis in [ 11 , 12 , 13 , 14 ] then
24849: LD_VAR 0 1
24853: PUSH
24854: LD_INT 11
24856: PUSH
24857: LD_INT 12
24859: PUSH
24860: LD_INT 13
24862: PUSH
24863: LD_INT 14
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: IN
24872: IFFALSE 24884
// uc_nation := nation_arabian else
24874: LD_ADDR_OWVAR 21
24878: PUSH
24879: LD_INT 2
24881: ST_TO_ADDR
24882: GO 24892
// uc_nation := nation_russian ;
24884: LD_ADDR_OWVAR 21
24888: PUSH
24889: LD_INT 3
24891: ST_TO_ADDR
// vc_chassis := chassis ;
24892: LD_ADDR_OWVAR 37
24896: PUSH
24897: LD_VAR 0 1
24901: ST_TO_ADDR
// vc_engine := engine ;
24902: LD_ADDR_OWVAR 39
24906: PUSH
24907: LD_VAR 0 2
24911: ST_TO_ADDR
// vc_control := control ;
24912: LD_ADDR_OWVAR 38
24916: PUSH
24917: LD_VAR 0 3
24921: ST_TO_ADDR
// vc_weapon := weapon ;
24922: LD_ADDR_OWVAR 40
24926: PUSH
24927: LD_VAR 0 4
24931: ST_TO_ADDR
// un := CreateVehicle ;
24932: LD_ADDR_VAR 0 8
24936: PUSH
24937: CALL_OW 45
24941: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24942: LD_VAR 0 8
24946: PPUSH
24947: LD_INT 0
24949: PPUSH
24950: LD_INT 5
24952: PPUSH
24953: CALL_OW 12
24957: PPUSH
24958: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24962: LD_VAR 0 8
24966: PPUSH
24967: LD_VAR 0 5
24971: PPUSH
24972: LD_VAR 0 6
24976: PPUSH
24977: LD_INT 1
24979: PPUSH
24980: CALL_OW 48
// end ;
24984: LD_VAR 0 7
24988: RET
// export hInvincible ; every 1 do
24989: GO 24991
24991: DISABLE
// hInvincible := [ ] ;
24992: LD_ADDR_EXP 72
24996: PUSH
24997: EMPTY
24998: ST_TO_ADDR
24999: END
// every 10 do var i ;
25000: GO 25002
25002: DISABLE
25003: LD_INT 0
25005: PPUSH
// begin enable ;
25006: ENABLE
// if not hInvincible then
25007: LD_EXP 72
25011: NOT
25012: IFFALSE 25016
// exit ;
25014: GO 25060
// for i in hInvincible do
25016: LD_ADDR_VAR 0 1
25020: PUSH
25021: LD_EXP 72
25025: PUSH
25026: FOR_IN
25027: IFFALSE 25058
// if GetLives ( i ) < 1000 then
25029: LD_VAR 0 1
25033: PPUSH
25034: CALL_OW 256
25038: PUSH
25039: LD_INT 1000
25041: LESS
25042: IFFALSE 25056
// SetLives ( i , 1000 ) ;
25044: LD_VAR 0 1
25048: PPUSH
25049: LD_INT 1000
25051: PPUSH
25052: CALL_OW 234
25056: GO 25026
25058: POP
25059: POP
// end ;
25060: PPOPN 1
25062: END
// export function hHackInvincible ; var i ; begin
25063: LD_INT 0
25065: PPUSH
25066: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25067: LD_ADDR_VAR 0 2
25071: PUSH
25072: LD_INT 2
25074: PUSH
25075: LD_INT 21
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 21
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: LIST
25099: PPUSH
25100: CALL_OW 69
25104: PUSH
25105: FOR_IN
25106: IFFALSE 25167
// if IsSelected ( i ) then
25108: LD_VAR 0 2
25112: PPUSH
25113: CALL_OW 306
25117: IFFALSE 25165
// begin if i in hInvincible then
25119: LD_VAR 0 2
25123: PUSH
25124: LD_EXP 72
25128: IN
25129: IFFALSE 25149
// hInvincible := hInvincible diff i else
25131: LD_ADDR_EXP 72
25135: PUSH
25136: LD_EXP 72
25140: PUSH
25141: LD_VAR 0 2
25145: DIFF
25146: ST_TO_ADDR
25147: GO 25165
// hInvincible := hInvincible union i ;
25149: LD_ADDR_EXP 72
25153: PUSH
25154: LD_EXP 72
25158: PUSH
25159: LD_VAR 0 2
25163: UNION
25164: ST_TO_ADDR
// end ;
25165: GO 25105
25167: POP
25168: POP
// end ;
25169: LD_VAR 0 1
25173: RET
// export function hHackInvisible ; var i , j ; begin
25174: LD_INT 0
25176: PPUSH
25177: PPUSH
25178: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25179: LD_ADDR_VAR 0 2
25183: PUSH
25184: LD_INT 21
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PPUSH
25194: CALL_OW 69
25198: PUSH
25199: FOR_IN
25200: IFFALSE 25224
// if IsSelected ( i ) then
25202: LD_VAR 0 2
25206: PPUSH
25207: CALL_OW 306
25211: IFFALSE 25222
// ComForceInvisible ( i ) ;
25213: LD_VAR 0 2
25217: PPUSH
25218: CALL_OW 496
25222: GO 25199
25224: POP
25225: POP
// end ;
25226: LD_VAR 0 1
25230: RET
// export function hHackChangeYourSide ; begin
25231: LD_INT 0
25233: PPUSH
// if your_side = 8 then
25234: LD_OWVAR 2
25238: PUSH
25239: LD_INT 8
25241: EQUAL
25242: IFFALSE 25254
// your_side := 0 else
25244: LD_ADDR_OWVAR 2
25248: PUSH
25249: LD_INT 0
25251: ST_TO_ADDR
25252: GO 25268
// your_side := your_side + 1 ;
25254: LD_ADDR_OWVAR 2
25258: PUSH
25259: LD_OWVAR 2
25263: PUSH
25264: LD_INT 1
25266: PLUS
25267: ST_TO_ADDR
// end ;
25268: LD_VAR 0 1
25272: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25273: LD_INT 0
25275: PPUSH
25276: PPUSH
25277: PPUSH
// for i in all_units do
25278: LD_ADDR_VAR 0 2
25282: PUSH
25283: LD_OWVAR 3
25287: PUSH
25288: FOR_IN
25289: IFFALSE 25367
// if IsSelected ( i ) then
25291: LD_VAR 0 2
25295: PPUSH
25296: CALL_OW 306
25300: IFFALSE 25365
// begin j := GetSide ( i ) ;
25302: LD_ADDR_VAR 0 3
25306: PUSH
25307: LD_VAR 0 2
25311: PPUSH
25312: CALL_OW 255
25316: ST_TO_ADDR
// if j = 8 then
25317: LD_VAR 0 3
25321: PUSH
25322: LD_INT 8
25324: EQUAL
25325: IFFALSE 25337
// j := 0 else
25327: LD_ADDR_VAR 0 3
25331: PUSH
25332: LD_INT 0
25334: ST_TO_ADDR
25335: GO 25351
// j := j + 1 ;
25337: LD_ADDR_VAR 0 3
25341: PUSH
25342: LD_VAR 0 3
25346: PUSH
25347: LD_INT 1
25349: PLUS
25350: ST_TO_ADDR
// SetSide ( i , j ) ;
25351: LD_VAR 0 2
25355: PPUSH
25356: LD_VAR 0 3
25360: PPUSH
25361: CALL_OW 235
// end ;
25365: GO 25288
25367: POP
25368: POP
// end ;
25369: LD_VAR 0 1
25373: RET
// export function hHackFog ; begin
25374: LD_INT 0
25376: PPUSH
// FogOff ( true ) ;
25377: LD_INT 1
25379: PPUSH
25380: CALL_OW 344
// end ;
25384: LD_VAR 0 1
25388: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25389: LD_INT 0
25391: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25392: LD_VAR 0 1
25396: PPUSH
25397: LD_VAR 0 2
25401: PPUSH
25402: LD_VAR 0 3
25406: PPUSH
25407: LD_INT 1
25409: PPUSH
25410: LD_INT 1
25412: PPUSH
25413: CALL_OW 483
// CenterOnXY ( x , y ) ;
25417: LD_VAR 0 2
25421: PPUSH
25422: LD_VAR 0 3
25426: PPUSH
25427: CALL_OW 84
// end ;
25431: LD_VAR 0 4
25435: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25436: LD_INT 0
25438: PPUSH
25439: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25440: LD_VAR 0 1
25444: NOT
25445: PUSH
25446: LD_VAR 0 2
25450: PPUSH
25451: LD_VAR 0 3
25455: PPUSH
25456: CALL_OW 488
25460: NOT
25461: OR
25462: PUSH
25463: LD_VAR 0 1
25467: PPUSH
25468: CALL_OW 266
25472: PUSH
25473: LD_INT 3
25475: NONEQUAL
25476: PUSH
25477: LD_VAR 0 1
25481: PPUSH
25482: CALL_OW 247
25486: PUSH
25487: LD_INT 1
25489: EQUAL
25490: NOT
25491: AND
25492: OR
25493: IFFALSE 25497
// exit ;
25495: GO 25646
// if GetType ( factory ) = unit_human then
25497: LD_VAR 0 1
25501: PPUSH
25502: CALL_OW 247
25506: PUSH
25507: LD_INT 1
25509: EQUAL
25510: IFFALSE 25527
// factory := IsInUnit ( factory ) ;
25512: LD_ADDR_VAR 0 1
25516: PUSH
25517: LD_VAR 0 1
25521: PPUSH
25522: CALL_OW 310
25526: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25527: LD_VAR 0 1
25531: PPUSH
25532: CALL_OW 266
25536: PUSH
25537: LD_INT 3
25539: NONEQUAL
25540: IFFALSE 25544
// exit ;
25542: GO 25646
// if HexInfo ( x , y ) = factory then
25544: LD_VAR 0 2
25548: PPUSH
25549: LD_VAR 0 3
25553: PPUSH
25554: CALL_OW 428
25558: PUSH
25559: LD_VAR 0 1
25563: EQUAL
25564: IFFALSE 25591
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25566: LD_ADDR_EXP 73
25570: PUSH
25571: LD_EXP 73
25575: PPUSH
25576: LD_VAR 0 1
25580: PPUSH
25581: LD_INT 0
25583: PPUSH
25584: CALL_OW 1
25588: ST_TO_ADDR
25589: GO 25642
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25591: LD_ADDR_EXP 73
25595: PUSH
25596: LD_EXP 73
25600: PPUSH
25601: LD_VAR 0 1
25605: PPUSH
25606: LD_VAR 0 1
25610: PPUSH
25611: CALL_OW 255
25615: PUSH
25616: LD_VAR 0 1
25620: PUSH
25621: LD_VAR 0 2
25625: PUSH
25626: LD_VAR 0 3
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: PPUSH
25637: CALL_OW 1
25641: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25642: CALL 25651 0 0
// end ;
25646: LD_VAR 0 4
25650: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25651: LD_INT 0
25653: PPUSH
25654: PPUSH
25655: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25656: LD_STRING resetFactoryWaypoint();
25658: PPUSH
25659: CALL_OW 559
// if factoryWaypoints then
25663: LD_EXP 73
25667: IFFALSE 25793
// begin list := PrepareArray ( factoryWaypoints ) ;
25669: LD_ADDR_VAR 0 3
25673: PUSH
25674: LD_EXP 73
25678: PPUSH
25679: CALL 72262 0 1
25683: ST_TO_ADDR
// for i := 1 to list do
25684: LD_ADDR_VAR 0 2
25688: PUSH
25689: DOUBLE
25690: LD_INT 1
25692: DEC
25693: ST_TO_ADDR
25694: LD_VAR 0 3
25698: PUSH
25699: FOR_TO
25700: IFFALSE 25791
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25702: LD_STRING setFactoryWaypointXY(
25704: PUSH
25705: LD_VAR 0 3
25709: PUSH
25710: LD_VAR 0 2
25714: ARRAY
25715: PUSH
25716: LD_INT 1
25718: ARRAY
25719: STR
25720: PUSH
25721: LD_STRING ,
25723: STR
25724: PUSH
25725: LD_VAR 0 3
25729: PUSH
25730: LD_VAR 0 2
25734: ARRAY
25735: PUSH
25736: LD_INT 2
25738: ARRAY
25739: STR
25740: PUSH
25741: LD_STRING ,
25743: STR
25744: PUSH
25745: LD_VAR 0 3
25749: PUSH
25750: LD_VAR 0 2
25754: ARRAY
25755: PUSH
25756: LD_INT 3
25758: ARRAY
25759: STR
25760: PUSH
25761: LD_STRING ,
25763: STR
25764: PUSH
25765: LD_VAR 0 3
25769: PUSH
25770: LD_VAR 0 2
25774: ARRAY
25775: PUSH
25776: LD_INT 4
25778: ARRAY
25779: STR
25780: PUSH
25781: LD_STRING )
25783: STR
25784: PPUSH
25785: CALL_OW 559
25789: GO 25699
25791: POP
25792: POP
// end ; end ;
25793: LD_VAR 0 1
25797: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25798: LD_INT 0
25800: PPUSH
// if HexInfo ( x , y ) = warehouse then
25801: LD_VAR 0 2
25805: PPUSH
25806: LD_VAR 0 3
25810: PPUSH
25811: CALL_OW 428
25815: PUSH
25816: LD_VAR 0 1
25820: EQUAL
25821: IFFALSE 25848
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25823: LD_ADDR_EXP 74
25827: PUSH
25828: LD_EXP 74
25832: PPUSH
25833: LD_VAR 0 1
25837: PPUSH
25838: LD_INT 0
25840: PPUSH
25841: CALL_OW 1
25845: ST_TO_ADDR
25846: GO 25899
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25848: LD_ADDR_EXP 74
25852: PUSH
25853: LD_EXP 74
25857: PPUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: LD_VAR 0 1
25867: PPUSH
25868: CALL_OW 255
25872: PUSH
25873: LD_VAR 0 1
25877: PUSH
25878: LD_VAR 0 2
25882: PUSH
25883: LD_VAR 0 3
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: PPUSH
25894: CALL_OW 1
25898: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25899: CALL 25908 0 0
// end ;
25903: LD_VAR 0 4
25907: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25908: LD_INT 0
25910: PPUSH
25911: PPUSH
25912: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25913: LD_STRING resetWarehouseGatheringPoints();
25915: PPUSH
25916: CALL_OW 559
// if warehouseGatheringPoints then
25920: LD_EXP 74
25924: IFFALSE 26050
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: LD_EXP 74
25935: PPUSH
25936: CALL 72262 0 1
25940: ST_TO_ADDR
// for i := 1 to list do
25941: LD_ADDR_VAR 0 2
25945: PUSH
25946: DOUBLE
25947: LD_INT 1
25949: DEC
25950: ST_TO_ADDR
25951: LD_VAR 0 3
25955: PUSH
25956: FOR_TO
25957: IFFALSE 26048
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25959: LD_STRING setWarehouseGatheringPointXY(
25961: PUSH
25962: LD_VAR 0 3
25966: PUSH
25967: LD_VAR 0 2
25971: ARRAY
25972: PUSH
25973: LD_INT 1
25975: ARRAY
25976: STR
25977: PUSH
25978: LD_STRING ,
25980: STR
25981: PUSH
25982: LD_VAR 0 3
25986: PUSH
25987: LD_VAR 0 2
25991: ARRAY
25992: PUSH
25993: LD_INT 2
25995: ARRAY
25996: STR
25997: PUSH
25998: LD_STRING ,
26000: STR
26001: PUSH
26002: LD_VAR 0 3
26006: PUSH
26007: LD_VAR 0 2
26011: ARRAY
26012: PUSH
26013: LD_INT 3
26015: ARRAY
26016: STR
26017: PUSH
26018: LD_STRING ,
26020: STR
26021: PUSH
26022: LD_VAR 0 3
26026: PUSH
26027: LD_VAR 0 2
26031: ARRAY
26032: PUSH
26033: LD_INT 4
26035: ARRAY
26036: STR
26037: PUSH
26038: LD_STRING )
26040: STR
26041: PPUSH
26042: CALL_OW 559
26046: GO 25956
26048: POP
26049: POP
// end ; end ;
26050: LD_VAR 0 1
26054: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26055: LD_EXP 74
26059: IFFALSE 26744
26061: GO 26063
26063: DISABLE
26064: LD_INT 0
26066: PPUSH
26067: PPUSH
26068: PPUSH
26069: PPUSH
26070: PPUSH
26071: PPUSH
26072: PPUSH
26073: PPUSH
26074: PPUSH
// begin enable ;
26075: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26076: LD_ADDR_VAR 0 3
26080: PUSH
26081: LD_EXP 74
26085: PPUSH
26086: CALL 72262 0 1
26090: ST_TO_ADDR
// if not list then
26091: LD_VAR 0 3
26095: NOT
26096: IFFALSE 26100
// exit ;
26098: GO 26744
// for i := 1 to list do
26100: LD_ADDR_VAR 0 1
26104: PUSH
26105: DOUBLE
26106: LD_INT 1
26108: DEC
26109: ST_TO_ADDR
26110: LD_VAR 0 3
26114: PUSH
26115: FOR_TO
26116: IFFALSE 26742
// begin depot := list [ i ] [ 2 ] ;
26118: LD_ADDR_VAR 0 8
26122: PUSH
26123: LD_VAR 0 3
26127: PUSH
26128: LD_VAR 0 1
26132: ARRAY
26133: PUSH
26134: LD_INT 2
26136: ARRAY
26137: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26138: LD_ADDR_VAR 0 5
26142: PUSH
26143: LD_VAR 0 3
26147: PUSH
26148: LD_VAR 0 1
26152: ARRAY
26153: PUSH
26154: LD_INT 1
26156: ARRAY
26157: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26158: LD_VAR 0 8
26162: PPUSH
26163: CALL_OW 301
26167: PUSH
26168: LD_VAR 0 5
26172: PUSH
26173: LD_VAR 0 8
26177: PPUSH
26178: CALL_OW 255
26182: NONEQUAL
26183: OR
26184: IFFALSE 26213
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26186: LD_ADDR_EXP 74
26190: PUSH
26191: LD_EXP 74
26195: PPUSH
26196: LD_VAR 0 8
26200: PPUSH
26201: LD_INT 0
26203: PPUSH
26204: CALL_OW 1
26208: ST_TO_ADDR
// exit ;
26209: POP
26210: POP
26211: GO 26744
// end ; x := list [ i ] [ 3 ] ;
26213: LD_ADDR_VAR 0 6
26217: PUSH
26218: LD_VAR 0 3
26222: PUSH
26223: LD_VAR 0 1
26227: ARRAY
26228: PUSH
26229: LD_INT 3
26231: ARRAY
26232: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26233: LD_ADDR_VAR 0 7
26237: PUSH
26238: LD_VAR 0 3
26242: PUSH
26243: LD_VAR 0 1
26247: ARRAY
26248: PUSH
26249: LD_INT 4
26251: ARRAY
26252: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26253: LD_ADDR_VAR 0 9
26257: PUSH
26258: LD_VAR 0 6
26262: PPUSH
26263: LD_VAR 0 7
26267: PPUSH
26268: LD_INT 16
26270: PPUSH
26271: CALL 70850 0 3
26275: ST_TO_ADDR
// if not cratesNearbyPoint then
26276: LD_VAR 0 9
26280: NOT
26281: IFFALSE 26287
// exit ;
26283: POP
26284: POP
26285: GO 26744
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26287: LD_ADDR_VAR 0 4
26291: PUSH
26292: LD_INT 22
26294: PUSH
26295: LD_VAR 0 5
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 3
26306: PUSH
26307: LD_INT 60
26309: PUSH
26310: EMPTY
26311: LIST
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 91
26319: PUSH
26320: LD_VAR 0 8
26324: PUSH
26325: LD_INT 6
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: LD_INT 25
26338: PUSH
26339: LD_INT 2
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 25
26348: PUSH
26349: LD_INT 16
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: PPUSH
26367: CALL_OW 69
26371: PUSH
26372: LD_VAR 0 8
26376: PPUSH
26377: CALL_OW 313
26381: PPUSH
26382: LD_INT 3
26384: PUSH
26385: LD_INT 60
26387: PUSH
26388: EMPTY
26389: LIST
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: LD_INT 25
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 25
26410: PUSH
26411: LD_INT 16
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: LIST
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PPUSH
26427: CALL_OW 72
26431: UNION
26432: ST_TO_ADDR
// if tmp then
26433: LD_VAR 0 4
26437: IFFALSE 26517
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26439: LD_ADDR_VAR 0 4
26443: PUSH
26444: LD_VAR 0 4
26448: PPUSH
26449: LD_INT 3
26451: PPUSH
26452: CALL 68819 0 2
26456: ST_TO_ADDR
// for j in tmp do
26457: LD_ADDR_VAR 0 2
26461: PUSH
26462: LD_VAR 0 4
26466: PUSH
26467: FOR_IN
26468: IFFALSE 26511
// begin if IsInUnit ( j ) then
26470: LD_VAR 0 2
26474: PPUSH
26475: CALL_OW 310
26479: IFFALSE 26490
// ComExit ( j ) ;
26481: LD_VAR 0 2
26485: PPUSH
26486: CALL 68902 0 1
// AddComCollect ( j , x , y ) ;
26490: LD_VAR 0 2
26494: PPUSH
26495: LD_VAR 0 6
26499: PPUSH
26500: LD_VAR 0 7
26504: PPUSH
26505: CALL_OW 177
// end ;
26509: GO 26467
26511: POP
26512: POP
// exit ;
26513: POP
26514: POP
26515: GO 26744
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26517: LD_ADDR_VAR 0 4
26521: PUSH
26522: LD_INT 22
26524: PUSH
26525: LD_VAR 0 5
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 91
26536: PUSH
26537: LD_VAR 0 8
26541: PUSH
26542: LD_INT 8
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 2
26552: PUSH
26553: LD_INT 34
26555: PUSH
26556: LD_INT 12
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 34
26565: PUSH
26566: LD_INT 51
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 34
26575: PUSH
26576: LD_INT 32
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 34
26585: PUSH
26586: LD_INT 89
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: PPUSH
26605: CALL_OW 69
26609: ST_TO_ADDR
// if tmp then
26610: LD_VAR 0 4
26614: IFFALSE 26740
// begin for j in tmp do
26616: LD_ADDR_VAR 0 2
26620: PUSH
26621: LD_VAR 0 4
26625: PUSH
26626: FOR_IN
26627: IFFALSE 26738
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26629: LD_VAR 0 2
26633: PPUSH
26634: CALL_OW 262
26638: PUSH
26639: LD_INT 3
26641: EQUAL
26642: PUSH
26643: LD_VAR 0 2
26647: PPUSH
26648: CALL_OW 261
26652: PUSH
26653: LD_INT 20
26655: GREATER
26656: OR
26657: PUSH
26658: LD_VAR 0 2
26662: PPUSH
26663: CALL_OW 314
26667: NOT
26668: AND
26669: PUSH
26670: LD_VAR 0 2
26674: PPUSH
26675: CALL_OW 263
26679: PUSH
26680: LD_INT 1
26682: NONEQUAL
26683: PUSH
26684: LD_VAR 0 2
26688: PPUSH
26689: CALL_OW 311
26693: OR
26694: AND
26695: IFFALSE 26736
// begin ComCollect ( j , x , y ) ;
26697: LD_VAR 0 2
26701: PPUSH
26702: LD_VAR 0 6
26706: PPUSH
26707: LD_VAR 0 7
26711: PPUSH
26712: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26716: LD_VAR 0 2
26720: PPUSH
26721: LD_VAR 0 8
26725: PPUSH
26726: CALL_OW 172
// exit ;
26730: POP
26731: POP
26732: POP
26733: POP
26734: GO 26744
// end ;
26736: GO 26626
26738: POP
26739: POP
// end ; end ;
26740: GO 26115
26742: POP
26743: POP
// end ; end_of_file
26744: PPOPN 9
26746: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26747: LD_INT 0
26749: PPUSH
26750: PPUSH
26751: PPUSH
26752: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26753: LD_VAR 0 1
26757: PPUSH
26758: CALL_OW 264
26762: PUSH
26763: LD_INT 91
26765: EQUAL
26766: IFFALSE 26838
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26768: LD_INT 68
26770: PPUSH
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 255
26780: PPUSH
26781: CALL_OW 321
26785: PUSH
26786: LD_INT 2
26788: EQUAL
26789: IFFALSE 26801
// eff := 70 else
26791: LD_ADDR_VAR 0 4
26795: PUSH
26796: LD_INT 70
26798: ST_TO_ADDR
26799: GO 26809
// eff := 30 ;
26801: LD_ADDR_VAR 0 4
26805: PUSH
26806: LD_INT 30
26808: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26809: LD_VAR 0 1
26813: PPUSH
26814: CALL_OW 250
26818: PPUSH
26819: LD_VAR 0 1
26823: PPUSH
26824: CALL_OW 251
26828: PPUSH
26829: LD_VAR 0 4
26833: PPUSH
26834: CALL_OW 495
// end ; end ;
26838: LD_VAR 0 2
26842: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26843: LD_INT 0
26845: PPUSH
// end ;
26846: LD_VAR 0 4
26850: RET
// export function SOS_Command ( cmd ) ; begin
26851: LD_INT 0
26853: PPUSH
// end ;
26854: LD_VAR 0 2
26858: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26859: LD_INT 0
26861: PPUSH
// end ;
26862: LD_VAR 0 6
26866: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26867: LD_INT 0
26869: PPUSH
26870: PPUSH
// if not vehicle or not factory then
26871: LD_VAR 0 1
26875: NOT
26876: PUSH
26877: LD_VAR 0 2
26881: NOT
26882: OR
26883: IFFALSE 26887
// exit ;
26885: GO 27118
// if factoryWaypoints >= factory then
26887: LD_EXP 73
26891: PUSH
26892: LD_VAR 0 2
26896: GREATEREQUAL
26897: IFFALSE 27118
// if factoryWaypoints [ factory ] then
26899: LD_EXP 73
26903: PUSH
26904: LD_VAR 0 2
26908: ARRAY
26909: IFFALSE 27118
// begin if GetControl ( vehicle ) = control_manual then
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL_OW 263
26920: PUSH
26921: LD_INT 1
26923: EQUAL
26924: IFFALSE 27005
// begin driver := IsDrivenBy ( vehicle ) ;
26926: LD_ADDR_VAR 0 4
26930: PUSH
26931: LD_VAR 0 1
26935: PPUSH
26936: CALL_OW 311
26940: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26941: LD_VAR 0 4
26945: PPUSH
26946: LD_EXP 73
26950: PUSH
26951: LD_VAR 0 2
26955: ARRAY
26956: PUSH
26957: LD_INT 3
26959: ARRAY
26960: PPUSH
26961: LD_EXP 73
26965: PUSH
26966: LD_VAR 0 2
26970: ARRAY
26971: PUSH
26972: LD_INT 4
26974: ARRAY
26975: PPUSH
26976: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26980: LD_VAR 0 4
26984: PPUSH
26985: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26989: LD_VAR 0 4
26993: PPUSH
26994: LD_VAR 0 2
26998: PPUSH
26999: CALL_OW 180
// end else
27003: GO 27118
// if GetControl ( vehicle ) = control_remote then
27005: LD_VAR 0 1
27009: PPUSH
27010: CALL_OW 263
27014: PUSH
27015: LD_INT 2
27017: EQUAL
27018: IFFALSE 27079
// begin wait ( 0 0$2 ) ;
27020: LD_INT 70
27022: PPUSH
27023: CALL_OW 67
// if Connect ( vehicle ) then
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL 39142 0 1
27036: IFFALSE 27077
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27038: LD_VAR 0 1
27042: PPUSH
27043: LD_EXP 73
27047: PUSH
27048: LD_VAR 0 2
27052: ARRAY
27053: PUSH
27054: LD_INT 3
27056: ARRAY
27057: PPUSH
27058: LD_EXP 73
27062: PUSH
27063: LD_VAR 0 2
27067: ARRAY
27068: PUSH
27069: LD_INT 4
27071: ARRAY
27072: PPUSH
27073: CALL_OW 171
// end else
27077: GO 27118
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27079: LD_VAR 0 1
27083: PPUSH
27084: LD_EXP 73
27088: PUSH
27089: LD_VAR 0 2
27093: ARRAY
27094: PUSH
27095: LD_INT 3
27097: ARRAY
27098: PPUSH
27099: LD_EXP 73
27103: PUSH
27104: LD_VAR 0 2
27108: ARRAY
27109: PUSH
27110: LD_INT 4
27112: ARRAY
27113: PPUSH
27114: CALL_OW 171
// end ; end ;
27118: LD_VAR 0 3
27122: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27123: LD_INT 0
27125: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27126: LD_VAR 0 1
27130: PUSH
27131: LD_INT 250
27133: EQUAL
27134: PUSH
27135: LD_VAR 0 2
27139: PPUSH
27140: CALL_OW 264
27144: PUSH
27145: LD_INT 81
27147: EQUAL
27148: AND
27149: IFFALSE 27170
// MinerPlaceMine ( unit , x , y ) ;
27151: LD_VAR 0 2
27155: PPUSH
27156: LD_VAR 0 4
27160: PPUSH
27161: LD_VAR 0 5
27165: PPUSH
27166: CALL 29555 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27170: LD_VAR 0 1
27174: PUSH
27175: LD_INT 251
27177: EQUAL
27178: PUSH
27179: LD_VAR 0 2
27183: PPUSH
27184: CALL_OW 264
27188: PUSH
27189: LD_INT 81
27191: EQUAL
27192: AND
27193: IFFALSE 27214
// MinerDetonateMine ( unit , x , y ) ;
27195: LD_VAR 0 2
27199: PPUSH
27200: LD_VAR 0 4
27204: PPUSH
27205: LD_VAR 0 5
27209: PPUSH
27210: CALL 29830 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27214: LD_VAR 0 1
27218: PUSH
27219: LD_INT 252
27221: EQUAL
27222: PUSH
27223: LD_VAR 0 2
27227: PPUSH
27228: CALL_OW 264
27232: PUSH
27233: LD_INT 81
27235: EQUAL
27236: AND
27237: IFFALSE 27258
// MinerCreateMinefield ( unit , x , y ) ;
27239: LD_VAR 0 2
27243: PPUSH
27244: LD_VAR 0 4
27248: PPUSH
27249: LD_VAR 0 5
27253: PPUSH
27254: CALL 30247 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27258: LD_VAR 0 1
27262: PUSH
27263: LD_INT 253
27265: EQUAL
27266: PUSH
27267: LD_VAR 0 2
27271: PPUSH
27272: CALL_OW 257
27276: PUSH
27277: LD_INT 5
27279: EQUAL
27280: AND
27281: IFFALSE 27302
// ComBinocular ( unit , x , y ) ;
27283: LD_VAR 0 2
27287: PPUSH
27288: LD_VAR 0 4
27292: PPUSH
27293: LD_VAR 0 5
27297: PPUSH
27298: CALL 30616 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27302: LD_VAR 0 1
27306: PUSH
27307: LD_INT 254
27309: EQUAL
27310: PUSH
27311: LD_VAR 0 2
27315: PPUSH
27316: CALL_OW 264
27320: PUSH
27321: LD_INT 99
27323: EQUAL
27324: AND
27325: PUSH
27326: LD_VAR 0 3
27330: PPUSH
27331: CALL_OW 263
27335: PUSH
27336: LD_INT 3
27338: EQUAL
27339: AND
27340: IFFALSE 27356
// HackDestroyVehicle ( unit , selectedUnit ) ;
27342: LD_VAR 0 2
27346: PPUSH
27347: LD_VAR 0 3
27351: PPUSH
27352: CALL 28919 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27356: LD_VAR 0 1
27360: PUSH
27361: LD_INT 255
27363: EQUAL
27364: PUSH
27365: LD_VAR 0 2
27369: PPUSH
27370: CALL_OW 264
27374: PUSH
27375: LD_INT 14
27377: PUSH
27378: LD_INT 53
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: IN
27385: AND
27386: PUSH
27387: LD_VAR 0 4
27391: PPUSH
27392: LD_VAR 0 5
27396: PPUSH
27397: CALL_OW 488
27401: AND
27402: IFFALSE 27426
// CutTreeXYR ( unit , x , y , 12 ) ;
27404: LD_VAR 0 2
27408: PPUSH
27409: LD_VAR 0 4
27413: PPUSH
27414: LD_VAR 0 5
27418: PPUSH
27419: LD_INT 12
27421: PPUSH
27422: CALL 27489 0 4
// if cmd = 256 then
27426: LD_VAR 0 1
27430: PUSH
27431: LD_INT 256
27433: EQUAL
27434: IFFALSE 27455
// SetFactoryWaypoint ( unit , x , y ) ;
27436: LD_VAR 0 2
27440: PPUSH
27441: LD_VAR 0 4
27445: PPUSH
27446: LD_VAR 0 5
27450: PPUSH
27451: CALL 25436 0 3
// if cmd = 257 then
27455: LD_VAR 0 1
27459: PUSH
27460: LD_INT 257
27462: EQUAL
27463: IFFALSE 27484
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27465: LD_VAR 0 2
27469: PPUSH
27470: LD_VAR 0 4
27474: PPUSH
27475: LD_VAR 0 5
27479: PPUSH
27480: CALL 25798 0 3
// end ;
27484: LD_VAR 0 6
27488: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27489: LD_INT 0
27491: PPUSH
27492: PPUSH
27493: PPUSH
27494: PPUSH
27495: PPUSH
27496: PPUSH
27497: PPUSH
27498: PPUSH
27499: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27500: LD_VAR 0 1
27504: NOT
27505: PUSH
27506: LD_VAR 0 2
27510: PPUSH
27511: LD_VAR 0 3
27515: PPUSH
27516: CALL_OW 488
27520: NOT
27521: OR
27522: PUSH
27523: LD_VAR 0 4
27527: NOT
27528: OR
27529: IFFALSE 27533
// exit ;
27531: GO 27873
// list := [ ] ;
27533: LD_ADDR_VAR 0 13
27537: PUSH
27538: EMPTY
27539: ST_TO_ADDR
// if x - r < 0 then
27540: LD_VAR 0 2
27544: PUSH
27545: LD_VAR 0 4
27549: MINUS
27550: PUSH
27551: LD_INT 0
27553: LESS
27554: IFFALSE 27566
// min_x := 0 else
27556: LD_ADDR_VAR 0 7
27560: PUSH
27561: LD_INT 0
27563: ST_TO_ADDR
27564: GO 27582
// min_x := x - r ;
27566: LD_ADDR_VAR 0 7
27570: PUSH
27571: LD_VAR 0 2
27575: PUSH
27576: LD_VAR 0 4
27580: MINUS
27581: ST_TO_ADDR
// if y - r < 0 then
27582: LD_VAR 0 3
27586: PUSH
27587: LD_VAR 0 4
27591: MINUS
27592: PUSH
27593: LD_INT 0
27595: LESS
27596: IFFALSE 27608
// min_y := 0 else
27598: LD_ADDR_VAR 0 8
27602: PUSH
27603: LD_INT 0
27605: ST_TO_ADDR
27606: GO 27624
// min_y := y - r ;
27608: LD_ADDR_VAR 0 8
27612: PUSH
27613: LD_VAR 0 3
27617: PUSH
27618: LD_VAR 0 4
27622: MINUS
27623: ST_TO_ADDR
// max_x := x + r ;
27624: LD_ADDR_VAR 0 9
27628: PUSH
27629: LD_VAR 0 2
27633: PUSH
27634: LD_VAR 0 4
27638: PLUS
27639: ST_TO_ADDR
// max_y := y + r ;
27640: LD_ADDR_VAR 0 10
27644: PUSH
27645: LD_VAR 0 3
27649: PUSH
27650: LD_VAR 0 4
27654: PLUS
27655: ST_TO_ADDR
// for _x = min_x to max_x do
27656: LD_ADDR_VAR 0 11
27660: PUSH
27661: DOUBLE
27662: LD_VAR 0 7
27666: DEC
27667: ST_TO_ADDR
27668: LD_VAR 0 9
27672: PUSH
27673: FOR_TO
27674: IFFALSE 27791
// for _y = min_y to max_y do
27676: LD_ADDR_VAR 0 12
27680: PUSH
27681: DOUBLE
27682: LD_VAR 0 8
27686: DEC
27687: ST_TO_ADDR
27688: LD_VAR 0 10
27692: PUSH
27693: FOR_TO
27694: IFFALSE 27787
// begin if not ValidHex ( _x , _y ) then
27696: LD_VAR 0 11
27700: PPUSH
27701: LD_VAR 0 12
27705: PPUSH
27706: CALL_OW 488
27710: NOT
27711: IFFALSE 27715
// continue ;
27713: GO 27693
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27715: LD_VAR 0 11
27719: PPUSH
27720: LD_VAR 0 12
27724: PPUSH
27725: CALL_OW 351
27729: PUSH
27730: LD_VAR 0 11
27734: PPUSH
27735: LD_VAR 0 12
27739: PPUSH
27740: CALL_OW 554
27744: AND
27745: IFFALSE 27785
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27747: LD_ADDR_VAR 0 13
27751: PUSH
27752: LD_VAR 0 13
27756: PPUSH
27757: LD_VAR 0 13
27761: PUSH
27762: LD_INT 1
27764: PLUS
27765: PPUSH
27766: LD_VAR 0 11
27770: PUSH
27771: LD_VAR 0 12
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PPUSH
27780: CALL_OW 2
27784: ST_TO_ADDR
// end ;
27785: GO 27693
27787: POP
27788: POP
27789: GO 27673
27791: POP
27792: POP
// if not list then
27793: LD_VAR 0 13
27797: NOT
27798: IFFALSE 27802
// exit ;
27800: GO 27873
// for i in list do
27802: LD_ADDR_VAR 0 6
27806: PUSH
27807: LD_VAR 0 13
27811: PUSH
27812: FOR_IN
27813: IFFALSE 27871
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27815: LD_VAR 0 1
27819: PPUSH
27820: LD_STRING M
27822: PUSH
27823: LD_VAR 0 6
27827: PUSH
27828: LD_INT 1
27830: ARRAY
27831: PUSH
27832: LD_VAR 0 6
27836: PUSH
27837: LD_INT 2
27839: ARRAY
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: PUSH
27862: EMPTY
27863: LIST
27864: PPUSH
27865: CALL_OW 447
27869: GO 27812
27871: POP
27872: POP
// end ;
27873: LD_VAR 0 5
27877: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27878: LD_EXP 76
27882: NOT
27883: IFFALSE 27933
27885: GO 27887
27887: DISABLE
// begin initHack := true ;
27888: LD_ADDR_EXP 76
27892: PUSH
27893: LD_INT 1
27895: ST_TO_ADDR
// hackTanks := [ ] ;
27896: LD_ADDR_EXP 77
27900: PUSH
27901: EMPTY
27902: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27903: LD_ADDR_EXP 78
27907: PUSH
27908: EMPTY
27909: ST_TO_ADDR
// hackLimit := 3 ;
27910: LD_ADDR_EXP 79
27914: PUSH
27915: LD_INT 3
27917: ST_TO_ADDR
// hackDist := 12 ;
27918: LD_ADDR_EXP 80
27922: PUSH
27923: LD_INT 12
27925: ST_TO_ADDR
// hackCounter := [ ] ;
27926: LD_ADDR_EXP 81
27930: PUSH
27931: EMPTY
27932: ST_TO_ADDR
// end ;
27933: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27934: LD_EXP 76
27938: PUSH
27939: LD_INT 34
27941: PUSH
27942: LD_INT 99
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PPUSH
27949: CALL_OW 69
27953: AND
27954: IFFALSE 28207
27956: GO 27958
27958: DISABLE
27959: LD_INT 0
27961: PPUSH
27962: PPUSH
// begin enable ;
27963: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27964: LD_ADDR_VAR 0 1
27968: PUSH
27969: LD_INT 34
27971: PUSH
27972: LD_INT 99
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PPUSH
27979: CALL_OW 69
27983: PUSH
27984: FOR_IN
27985: IFFALSE 28205
// begin if not i in hackTanks then
27987: LD_VAR 0 1
27991: PUSH
27992: LD_EXP 77
27996: IN
27997: NOT
27998: IFFALSE 28081
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28000: LD_ADDR_EXP 77
28004: PUSH
28005: LD_EXP 77
28009: PPUSH
28010: LD_EXP 77
28014: PUSH
28015: LD_INT 1
28017: PLUS
28018: PPUSH
28019: LD_VAR 0 1
28023: PPUSH
28024: CALL_OW 1
28028: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28029: LD_ADDR_EXP 78
28033: PUSH
28034: LD_EXP 78
28038: PPUSH
28039: LD_EXP 78
28043: PUSH
28044: LD_INT 1
28046: PLUS
28047: PPUSH
28048: EMPTY
28049: PPUSH
28050: CALL_OW 1
28054: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28055: LD_ADDR_EXP 81
28059: PUSH
28060: LD_EXP 81
28064: PPUSH
28065: LD_EXP 81
28069: PUSH
28070: LD_INT 1
28072: PLUS
28073: PPUSH
28074: EMPTY
28075: PPUSH
28076: CALL_OW 1
28080: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28081: LD_VAR 0 1
28085: PPUSH
28086: CALL_OW 302
28090: NOT
28091: IFFALSE 28104
// begin HackUnlinkAll ( i ) ;
28093: LD_VAR 0 1
28097: PPUSH
28098: CALL 28210 0 1
// continue ;
28102: GO 27984
// end ; HackCheckCapturedStatus ( i ) ;
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL 28653 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28113: LD_ADDR_VAR 0 2
28117: PUSH
28118: LD_INT 81
28120: PUSH
28121: LD_VAR 0 1
28125: PPUSH
28126: CALL_OW 255
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 33
28137: PUSH
28138: LD_INT 3
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 91
28147: PUSH
28148: LD_VAR 0 1
28152: PUSH
28153: LD_EXP 80
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 50
28165: PUSH
28166: EMPTY
28167: LIST
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: PPUSH
28175: CALL_OW 69
28179: ST_TO_ADDR
// if not tmp then
28180: LD_VAR 0 2
28184: NOT
28185: IFFALSE 28189
// continue ;
28187: GO 27984
// HackLink ( i , tmp ) ;
28189: LD_VAR 0 1
28193: PPUSH
28194: LD_VAR 0 2
28198: PPUSH
28199: CALL 28346 0 2
// end ;
28203: GO 27984
28205: POP
28206: POP
// end ;
28207: PPOPN 2
28209: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28210: LD_INT 0
28212: PPUSH
28213: PPUSH
28214: PPUSH
// if not hack in hackTanks then
28215: LD_VAR 0 1
28219: PUSH
28220: LD_EXP 77
28224: IN
28225: NOT
28226: IFFALSE 28230
// exit ;
28228: GO 28341
// index := GetElementIndex ( hackTanks , hack ) ;
28230: LD_ADDR_VAR 0 4
28234: PUSH
28235: LD_EXP 77
28239: PPUSH
28240: LD_VAR 0 1
28244: PPUSH
28245: CALL 35958 0 2
28249: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28250: LD_EXP 78
28254: PUSH
28255: LD_VAR 0 4
28259: ARRAY
28260: IFFALSE 28341
// begin for i in hackTanksCaptured [ index ] do
28262: LD_ADDR_VAR 0 3
28266: PUSH
28267: LD_EXP 78
28271: PUSH
28272: LD_VAR 0 4
28276: ARRAY
28277: PUSH
28278: FOR_IN
28279: IFFALSE 28305
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28281: LD_VAR 0 3
28285: PUSH
28286: LD_INT 1
28288: ARRAY
28289: PPUSH
28290: LD_VAR 0 3
28294: PUSH
28295: LD_INT 2
28297: ARRAY
28298: PPUSH
28299: CALL_OW 235
28303: GO 28278
28305: POP
28306: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28307: LD_ADDR_EXP 78
28311: PUSH
28312: LD_EXP 78
28316: PPUSH
28317: LD_VAR 0 4
28321: PPUSH
28322: EMPTY
28323: PPUSH
28324: CALL_OW 1
28328: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28329: LD_VAR 0 1
28333: PPUSH
28334: LD_INT 0
28336: PPUSH
28337: CALL_OW 505
// end ; end ;
28341: LD_VAR 0 2
28345: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28346: LD_INT 0
28348: PPUSH
28349: PPUSH
28350: PPUSH
// if not hack in hackTanks or not vehicles then
28351: LD_VAR 0 1
28355: PUSH
28356: LD_EXP 77
28360: IN
28361: NOT
28362: PUSH
28363: LD_VAR 0 2
28367: NOT
28368: OR
28369: IFFALSE 28373
// exit ;
28371: GO 28648
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28373: LD_ADDR_VAR 0 2
28377: PUSH
28378: LD_VAR 0 1
28382: PPUSH
28383: LD_VAR 0 2
28387: PPUSH
28388: LD_INT 1
28390: PPUSH
28391: LD_INT 1
28393: PPUSH
28394: CALL 36608 0 4
28398: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28399: LD_ADDR_VAR 0 5
28403: PUSH
28404: LD_EXP 77
28408: PPUSH
28409: LD_VAR 0 1
28413: PPUSH
28414: CALL 35958 0 2
28418: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28419: LD_EXP 78
28423: PUSH
28424: LD_VAR 0 5
28428: ARRAY
28429: PUSH
28430: LD_EXP 79
28434: LESS
28435: IFFALSE 28624
// begin for i := 1 to vehicles do
28437: LD_ADDR_VAR 0 4
28441: PUSH
28442: DOUBLE
28443: LD_INT 1
28445: DEC
28446: ST_TO_ADDR
28447: LD_VAR 0 2
28451: PUSH
28452: FOR_TO
28453: IFFALSE 28622
// begin if hackTanksCaptured [ index ] = hackLimit then
28455: LD_EXP 78
28459: PUSH
28460: LD_VAR 0 5
28464: ARRAY
28465: PUSH
28466: LD_EXP 79
28470: EQUAL
28471: IFFALSE 28475
// break ;
28473: GO 28622
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28475: LD_ADDR_EXP 81
28479: PUSH
28480: LD_EXP 81
28484: PPUSH
28485: LD_VAR 0 5
28489: PPUSH
28490: LD_EXP 81
28494: PUSH
28495: LD_VAR 0 5
28499: ARRAY
28500: PUSH
28501: LD_INT 1
28503: PLUS
28504: PPUSH
28505: CALL_OW 1
28509: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28510: LD_ADDR_EXP 78
28514: PUSH
28515: LD_EXP 78
28519: PPUSH
28520: LD_VAR 0 5
28524: PUSH
28525: LD_EXP 78
28529: PUSH
28530: LD_VAR 0 5
28534: ARRAY
28535: PUSH
28536: LD_INT 1
28538: PLUS
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PPUSH
28544: LD_VAR 0 2
28548: PUSH
28549: LD_VAR 0 4
28553: ARRAY
28554: PUSH
28555: LD_VAR 0 2
28559: PUSH
28560: LD_VAR 0 4
28564: ARRAY
28565: PPUSH
28566: CALL_OW 255
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PPUSH
28575: CALL 36173 0 3
28579: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28580: LD_VAR 0 2
28584: PUSH
28585: LD_VAR 0 4
28589: ARRAY
28590: PPUSH
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 255
28600: PPUSH
28601: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28605: LD_VAR 0 2
28609: PUSH
28610: LD_VAR 0 4
28614: ARRAY
28615: PPUSH
28616: CALL_OW 141
// end ;
28620: GO 28452
28622: POP
28623: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28624: LD_VAR 0 1
28628: PPUSH
28629: LD_EXP 78
28633: PUSH
28634: LD_VAR 0 5
28638: ARRAY
28639: PUSH
28640: LD_INT 0
28642: PLUS
28643: PPUSH
28644: CALL_OW 505
// end ;
28648: LD_VAR 0 3
28652: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28653: LD_INT 0
28655: PPUSH
28656: PPUSH
28657: PPUSH
28658: PPUSH
// if not hack in hackTanks then
28659: LD_VAR 0 1
28663: PUSH
28664: LD_EXP 77
28668: IN
28669: NOT
28670: IFFALSE 28674
// exit ;
28672: GO 28914
// index := GetElementIndex ( hackTanks , hack ) ;
28674: LD_ADDR_VAR 0 4
28678: PUSH
28679: LD_EXP 77
28683: PPUSH
28684: LD_VAR 0 1
28688: PPUSH
28689: CALL 35958 0 2
28693: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: DOUBLE
28700: LD_EXP 78
28704: PUSH
28705: LD_VAR 0 4
28709: ARRAY
28710: INC
28711: ST_TO_ADDR
28712: LD_INT 1
28714: PUSH
28715: FOR_DOWNTO
28716: IFFALSE 28888
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28718: LD_ADDR_VAR 0 5
28722: PUSH
28723: LD_EXP 78
28727: PUSH
28728: LD_VAR 0 4
28732: ARRAY
28733: PUSH
28734: LD_VAR 0 3
28738: ARRAY
28739: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28740: LD_VAR 0 5
28744: PUSH
28745: LD_INT 1
28747: ARRAY
28748: PPUSH
28749: CALL_OW 302
28753: NOT
28754: PUSH
28755: LD_VAR 0 5
28759: PUSH
28760: LD_INT 1
28762: ARRAY
28763: PPUSH
28764: CALL_OW 255
28768: PUSH
28769: LD_VAR 0 1
28773: PPUSH
28774: CALL_OW 255
28778: NONEQUAL
28779: OR
28780: IFFALSE 28886
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28782: LD_VAR 0 5
28786: PUSH
28787: LD_INT 1
28789: ARRAY
28790: PPUSH
28791: CALL_OW 305
28795: PUSH
28796: LD_VAR 0 5
28800: PUSH
28801: LD_INT 1
28803: ARRAY
28804: PPUSH
28805: CALL_OW 255
28809: PUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: CALL_OW 255
28819: EQUAL
28820: AND
28821: IFFALSE 28845
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28823: LD_VAR 0 5
28827: PUSH
28828: LD_INT 1
28830: ARRAY
28831: PPUSH
28832: LD_VAR 0 5
28836: PUSH
28837: LD_INT 2
28839: ARRAY
28840: PPUSH
28841: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28845: LD_ADDR_EXP 78
28849: PUSH
28850: LD_EXP 78
28854: PPUSH
28855: LD_VAR 0 4
28859: PPUSH
28860: LD_EXP 78
28864: PUSH
28865: LD_VAR 0 4
28869: ARRAY
28870: PPUSH
28871: LD_VAR 0 3
28875: PPUSH
28876: CALL_OW 3
28880: PPUSH
28881: CALL_OW 1
28885: ST_TO_ADDR
// end ; end ;
28886: GO 28715
28888: POP
28889: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28890: LD_VAR 0 1
28894: PPUSH
28895: LD_EXP 78
28899: PUSH
28900: LD_VAR 0 4
28904: ARRAY
28905: PUSH
28906: LD_INT 0
28908: PLUS
28909: PPUSH
28910: CALL_OW 505
// end ;
28914: LD_VAR 0 2
28918: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28919: LD_INT 0
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
// if not hack in hackTanks then
28925: LD_VAR 0 1
28929: PUSH
28930: LD_EXP 77
28934: IN
28935: NOT
28936: IFFALSE 28940
// exit ;
28938: GO 29025
// index := GetElementIndex ( hackTanks , hack ) ;
28940: LD_ADDR_VAR 0 5
28944: PUSH
28945: LD_EXP 77
28949: PPUSH
28950: LD_VAR 0 1
28954: PPUSH
28955: CALL 35958 0 2
28959: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28960: LD_ADDR_VAR 0 4
28964: PUSH
28965: DOUBLE
28966: LD_INT 1
28968: DEC
28969: ST_TO_ADDR
28970: LD_EXP 78
28974: PUSH
28975: LD_VAR 0 5
28979: ARRAY
28980: PUSH
28981: FOR_TO
28982: IFFALSE 29023
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28984: LD_EXP 78
28988: PUSH
28989: LD_VAR 0 5
28993: ARRAY
28994: PUSH
28995: LD_VAR 0 4
28999: ARRAY
29000: PUSH
29001: LD_INT 1
29003: ARRAY
29004: PUSH
29005: LD_VAR 0 2
29009: EQUAL
29010: IFFALSE 29021
// KillUnit ( vehicle ) ;
29012: LD_VAR 0 2
29016: PPUSH
29017: CALL_OW 66
29021: GO 28981
29023: POP
29024: POP
// end ;
29025: LD_VAR 0 3
29029: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29030: LD_EXP 82
29034: NOT
29035: IFFALSE 29070
29037: GO 29039
29039: DISABLE
// begin initMiner := true ;
29040: LD_ADDR_EXP 82
29044: PUSH
29045: LD_INT 1
29047: ST_TO_ADDR
// minersList := [ ] ;
29048: LD_ADDR_EXP 83
29052: PUSH
29053: EMPTY
29054: ST_TO_ADDR
// minerMinesList := [ ] ;
29055: LD_ADDR_EXP 84
29059: PUSH
29060: EMPTY
29061: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29062: LD_ADDR_EXP 85
29066: PUSH
29067: LD_INT 5
29069: ST_TO_ADDR
// end ;
29070: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29071: LD_EXP 82
29075: PUSH
29076: LD_INT 34
29078: PUSH
29079: LD_INT 81
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PPUSH
29086: CALL_OW 69
29090: AND
29091: IFFALSE 29552
29093: GO 29095
29095: DISABLE
29096: LD_INT 0
29098: PPUSH
29099: PPUSH
29100: PPUSH
29101: PPUSH
// begin enable ;
29102: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29103: LD_ADDR_VAR 0 1
29107: PUSH
29108: LD_INT 34
29110: PUSH
29111: LD_INT 81
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PPUSH
29118: CALL_OW 69
29122: PUSH
29123: FOR_IN
29124: IFFALSE 29196
// begin if not i in minersList then
29126: LD_VAR 0 1
29130: PUSH
29131: LD_EXP 83
29135: IN
29136: NOT
29137: IFFALSE 29194
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29139: LD_ADDR_EXP 83
29143: PUSH
29144: LD_EXP 83
29148: PPUSH
29149: LD_EXP 83
29153: PUSH
29154: LD_INT 1
29156: PLUS
29157: PPUSH
29158: LD_VAR 0 1
29162: PPUSH
29163: CALL_OW 1
29167: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29168: LD_ADDR_EXP 84
29172: PUSH
29173: LD_EXP 84
29177: PPUSH
29178: LD_EXP 84
29182: PUSH
29183: LD_INT 1
29185: PLUS
29186: PPUSH
29187: EMPTY
29188: PPUSH
29189: CALL_OW 1
29193: ST_TO_ADDR
// end end ;
29194: GO 29123
29196: POP
29197: POP
// for i := minerMinesList downto 1 do
29198: LD_ADDR_VAR 0 1
29202: PUSH
29203: DOUBLE
29204: LD_EXP 84
29208: INC
29209: ST_TO_ADDR
29210: LD_INT 1
29212: PUSH
29213: FOR_DOWNTO
29214: IFFALSE 29550
// begin if IsLive ( minersList [ i ] ) then
29216: LD_EXP 83
29220: PUSH
29221: LD_VAR 0 1
29225: ARRAY
29226: PPUSH
29227: CALL_OW 300
29231: IFFALSE 29259
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29233: LD_EXP 83
29237: PUSH
29238: LD_VAR 0 1
29242: ARRAY
29243: PPUSH
29244: LD_EXP 84
29248: PUSH
29249: LD_VAR 0 1
29253: ARRAY
29254: PPUSH
29255: CALL_OW 505
// if not minerMinesList [ i ] then
29259: LD_EXP 84
29263: PUSH
29264: LD_VAR 0 1
29268: ARRAY
29269: NOT
29270: IFFALSE 29274
// continue ;
29272: GO 29213
// for j := minerMinesList [ i ] downto 1 do
29274: LD_ADDR_VAR 0 2
29278: PUSH
29279: DOUBLE
29280: LD_EXP 84
29284: PUSH
29285: LD_VAR 0 1
29289: ARRAY
29290: INC
29291: ST_TO_ADDR
29292: LD_INT 1
29294: PUSH
29295: FOR_DOWNTO
29296: IFFALSE 29546
// begin side := GetSide ( minersList [ i ] ) ;
29298: LD_ADDR_VAR 0 3
29302: PUSH
29303: LD_EXP 83
29307: PUSH
29308: LD_VAR 0 1
29312: ARRAY
29313: PPUSH
29314: CALL_OW 255
29318: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29319: LD_ADDR_VAR 0 4
29323: PUSH
29324: LD_EXP 84
29328: PUSH
29329: LD_VAR 0 1
29333: ARRAY
29334: PUSH
29335: LD_VAR 0 2
29339: ARRAY
29340: PUSH
29341: LD_INT 1
29343: ARRAY
29344: PPUSH
29345: LD_EXP 84
29349: PUSH
29350: LD_VAR 0 1
29354: ARRAY
29355: PUSH
29356: LD_VAR 0 2
29360: ARRAY
29361: PUSH
29362: LD_INT 2
29364: ARRAY
29365: PPUSH
29366: CALL_OW 428
29370: ST_TO_ADDR
// if not tmp then
29371: LD_VAR 0 4
29375: NOT
29376: IFFALSE 29380
// continue ;
29378: GO 29295
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29380: LD_VAR 0 4
29384: PUSH
29385: LD_INT 81
29387: PUSH
29388: LD_VAR 0 3
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PPUSH
29397: CALL_OW 69
29401: IN
29402: PUSH
29403: LD_EXP 84
29407: PUSH
29408: LD_VAR 0 1
29412: ARRAY
29413: PUSH
29414: LD_VAR 0 2
29418: ARRAY
29419: PUSH
29420: LD_INT 1
29422: ARRAY
29423: PPUSH
29424: LD_EXP 84
29428: PUSH
29429: LD_VAR 0 1
29433: ARRAY
29434: PUSH
29435: LD_VAR 0 2
29439: ARRAY
29440: PUSH
29441: LD_INT 2
29443: ARRAY
29444: PPUSH
29445: CALL_OW 458
29449: AND
29450: IFFALSE 29544
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29452: LD_EXP 84
29456: PUSH
29457: LD_VAR 0 1
29461: ARRAY
29462: PUSH
29463: LD_VAR 0 2
29467: ARRAY
29468: PUSH
29469: LD_INT 1
29471: ARRAY
29472: PPUSH
29473: LD_EXP 84
29477: PUSH
29478: LD_VAR 0 1
29482: ARRAY
29483: PUSH
29484: LD_VAR 0 2
29488: ARRAY
29489: PUSH
29490: LD_INT 2
29492: ARRAY
29493: PPUSH
29494: LD_VAR 0 3
29498: PPUSH
29499: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29503: LD_ADDR_EXP 84
29507: PUSH
29508: LD_EXP 84
29512: PPUSH
29513: LD_VAR 0 1
29517: PPUSH
29518: LD_EXP 84
29522: PUSH
29523: LD_VAR 0 1
29527: ARRAY
29528: PPUSH
29529: LD_VAR 0 2
29533: PPUSH
29534: CALL_OW 3
29538: PPUSH
29539: CALL_OW 1
29543: ST_TO_ADDR
// end ; end ;
29544: GO 29295
29546: POP
29547: POP
// end ;
29548: GO 29213
29550: POP
29551: POP
// end ;
29552: PPOPN 4
29554: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29555: LD_INT 0
29557: PPUSH
29558: PPUSH
// result := false ;
29559: LD_ADDR_VAR 0 4
29563: PUSH
29564: LD_INT 0
29566: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29567: LD_VAR 0 1
29571: PPUSH
29572: CALL_OW 264
29576: PUSH
29577: LD_INT 81
29579: EQUAL
29580: NOT
29581: IFFALSE 29585
// exit ;
29583: GO 29825
// index := GetElementIndex ( minersList , unit ) ;
29585: LD_ADDR_VAR 0 5
29589: PUSH
29590: LD_EXP 83
29594: PPUSH
29595: LD_VAR 0 1
29599: PPUSH
29600: CALL 35958 0 2
29604: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29605: LD_EXP 84
29609: PUSH
29610: LD_VAR 0 5
29614: ARRAY
29615: PUSH
29616: LD_EXP 85
29620: GREATEREQUAL
29621: IFFALSE 29625
// exit ;
29623: GO 29825
// ComMoveXY ( unit , x , y ) ;
29625: LD_VAR 0 1
29629: PPUSH
29630: LD_VAR 0 2
29634: PPUSH
29635: LD_VAR 0 3
29639: PPUSH
29640: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29644: LD_INT 35
29646: PPUSH
29647: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29651: LD_VAR 0 1
29655: PPUSH
29656: LD_VAR 0 2
29660: PPUSH
29661: LD_VAR 0 3
29665: PPUSH
29666: CALL 67313 0 3
29670: NOT
29671: PUSH
29672: LD_VAR 0 1
29676: PPUSH
29677: CALL_OW 314
29681: AND
29682: IFFALSE 29686
// exit ;
29684: GO 29825
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29686: LD_VAR 0 2
29690: PPUSH
29691: LD_VAR 0 3
29695: PPUSH
29696: CALL_OW 428
29700: PUSH
29701: LD_VAR 0 1
29705: EQUAL
29706: PUSH
29707: LD_VAR 0 1
29711: PPUSH
29712: CALL_OW 314
29716: NOT
29717: AND
29718: IFFALSE 29644
// PlaySoundXY ( x , y , PlantMine ) ;
29720: LD_VAR 0 2
29724: PPUSH
29725: LD_VAR 0 3
29729: PPUSH
29730: LD_STRING PlantMine
29732: PPUSH
29733: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29737: LD_VAR 0 2
29741: PPUSH
29742: LD_VAR 0 3
29746: PPUSH
29747: LD_VAR 0 1
29751: PPUSH
29752: CALL_OW 255
29756: PPUSH
29757: LD_INT 0
29759: PPUSH
29760: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29764: LD_ADDR_EXP 84
29768: PUSH
29769: LD_EXP 84
29773: PPUSH
29774: LD_VAR 0 5
29778: PUSH
29779: LD_EXP 84
29783: PUSH
29784: LD_VAR 0 5
29788: ARRAY
29789: PUSH
29790: LD_INT 1
29792: PLUS
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PPUSH
29798: LD_VAR 0 2
29802: PUSH
29803: LD_VAR 0 3
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PPUSH
29812: CALL 36173 0 3
29816: ST_TO_ADDR
// result := true ;
29817: LD_ADDR_VAR 0 4
29821: PUSH
29822: LD_INT 1
29824: ST_TO_ADDR
// end ;
29825: LD_VAR 0 4
29829: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29830: LD_INT 0
29832: PPUSH
29833: PPUSH
29834: PPUSH
// if not unit in minersList then
29835: LD_VAR 0 1
29839: PUSH
29840: LD_EXP 83
29844: IN
29845: NOT
29846: IFFALSE 29850
// exit ;
29848: GO 30242
// index := GetElementIndex ( minersList , unit ) ;
29850: LD_ADDR_VAR 0 6
29854: PUSH
29855: LD_EXP 83
29859: PPUSH
29860: LD_VAR 0 1
29864: PPUSH
29865: CALL 35958 0 2
29869: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29870: LD_ADDR_VAR 0 5
29874: PUSH
29875: DOUBLE
29876: LD_EXP 84
29880: PUSH
29881: LD_VAR 0 6
29885: ARRAY
29886: INC
29887: ST_TO_ADDR
29888: LD_INT 1
29890: PUSH
29891: FOR_DOWNTO
29892: IFFALSE 30053
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29894: LD_EXP 84
29898: PUSH
29899: LD_VAR 0 6
29903: ARRAY
29904: PUSH
29905: LD_VAR 0 5
29909: ARRAY
29910: PUSH
29911: LD_INT 1
29913: ARRAY
29914: PUSH
29915: LD_VAR 0 2
29919: EQUAL
29920: PUSH
29921: LD_EXP 84
29925: PUSH
29926: LD_VAR 0 6
29930: ARRAY
29931: PUSH
29932: LD_VAR 0 5
29936: ARRAY
29937: PUSH
29938: LD_INT 2
29940: ARRAY
29941: PUSH
29942: LD_VAR 0 3
29946: EQUAL
29947: AND
29948: IFFALSE 30051
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29950: LD_EXP 84
29954: PUSH
29955: LD_VAR 0 6
29959: ARRAY
29960: PUSH
29961: LD_VAR 0 5
29965: ARRAY
29966: PUSH
29967: LD_INT 1
29969: ARRAY
29970: PPUSH
29971: LD_EXP 84
29975: PUSH
29976: LD_VAR 0 6
29980: ARRAY
29981: PUSH
29982: LD_VAR 0 5
29986: ARRAY
29987: PUSH
29988: LD_INT 2
29990: ARRAY
29991: PPUSH
29992: LD_VAR 0 1
29996: PPUSH
29997: CALL_OW 255
30001: PPUSH
30002: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30006: LD_ADDR_EXP 84
30010: PUSH
30011: LD_EXP 84
30015: PPUSH
30016: LD_VAR 0 6
30020: PPUSH
30021: LD_EXP 84
30025: PUSH
30026: LD_VAR 0 6
30030: ARRAY
30031: PPUSH
30032: LD_VAR 0 5
30036: PPUSH
30037: CALL_OW 3
30041: PPUSH
30042: CALL_OW 1
30046: ST_TO_ADDR
// exit ;
30047: POP
30048: POP
30049: GO 30242
// end ; end ;
30051: GO 29891
30053: POP
30054: POP
// for i := minerMinesList [ index ] downto 1 do
30055: LD_ADDR_VAR 0 5
30059: PUSH
30060: DOUBLE
30061: LD_EXP 84
30065: PUSH
30066: LD_VAR 0 6
30070: ARRAY
30071: INC
30072: ST_TO_ADDR
30073: LD_INT 1
30075: PUSH
30076: FOR_DOWNTO
30077: IFFALSE 30240
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30079: LD_EXP 84
30083: PUSH
30084: LD_VAR 0 6
30088: ARRAY
30089: PUSH
30090: LD_VAR 0 5
30094: ARRAY
30095: PUSH
30096: LD_INT 1
30098: ARRAY
30099: PPUSH
30100: LD_EXP 84
30104: PUSH
30105: LD_VAR 0 6
30109: ARRAY
30110: PUSH
30111: LD_VAR 0 5
30115: ARRAY
30116: PUSH
30117: LD_INT 2
30119: ARRAY
30120: PPUSH
30121: LD_VAR 0 2
30125: PPUSH
30126: LD_VAR 0 3
30130: PPUSH
30131: CALL_OW 298
30135: PUSH
30136: LD_INT 6
30138: LESS
30139: IFFALSE 30238
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30141: LD_EXP 84
30145: PUSH
30146: LD_VAR 0 6
30150: ARRAY
30151: PUSH
30152: LD_VAR 0 5
30156: ARRAY
30157: PUSH
30158: LD_INT 1
30160: ARRAY
30161: PPUSH
30162: LD_EXP 84
30166: PUSH
30167: LD_VAR 0 6
30171: ARRAY
30172: PUSH
30173: LD_VAR 0 5
30177: ARRAY
30178: PUSH
30179: LD_INT 2
30181: ARRAY
30182: PPUSH
30183: LD_VAR 0 1
30187: PPUSH
30188: CALL_OW 255
30192: PPUSH
30193: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30197: LD_ADDR_EXP 84
30201: PUSH
30202: LD_EXP 84
30206: PPUSH
30207: LD_VAR 0 6
30211: PPUSH
30212: LD_EXP 84
30216: PUSH
30217: LD_VAR 0 6
30221: ARRAY
30222: PPUSH
30223: LD_VAR 0 5
30227: PPUSH
30228: CALL_OW 3
30232: PPUSH
30233: CALL_OW 1
30237: ST_TO_ADDR
// end ; end ;
30238: GO 30076
30240: POP
30241: POP
// end ;
30242: LD_VAR 0 4
30246: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30247: LD_INT 0
30249: PPUSH
30250: PPUSH
30251: PPUSH
30252: PPUSH
30253: PPUSH
30254: PPUSH
30255: PPUSH
30256: PPUSH
30257: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30258: LD_VAR 0 1
30262: PPUSH
30263: CALL_OW 264
30267: PUSH
30268: LD_INT 81
30270: EQUAL
30271: NOT
30272: PUSH
30273: LD_VAR 0 1
30277: PUSH
30278: LD_EXP 83
30282: IN
30283: NOT
30284: OR
30285: IFFALSE 30289
// exit ;
30287: GO 30611
// index := GetElementIndex ( minersList , unit ) ;
30289: LD_ADDR_VAR 0 6
30293: PUSH
30294: LD_EXP 83
30298: PPUSH
30299: LD_VAR 0 1
30303: PPUSH
30304: CALL 35958 0 2
30308: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30309: LD_ADDR_VAR 0 8
30313: PUSH
30314: LD_EXP 85
30318: PUSH
30319: LD_EXP 84
30323: PUSH
30324: LD_VAR 0 6
30328: ARRAY
30329: MINUS
30330: ST_TO_ADDR
// if not minesFreeAmount then
30331: LD_VAR 0 8
30335: NOT
30336: IFFALSE 30340
// exit ;
30338: GO 30611
// tmp := [ ] ;
30340: LD_ADDR_VAR 0 7
30344: PUSH
30345: EMPTY
30346: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30347: LD_ADDR_VAR 0 5
30351: PUSH
30352: DOUBLE
30353: LD_INT 1
30355: DEC
30356: ST_TO_ADDR
30357: LD_VAR 0 8
30361: PUSH
30362: FOR_TO
30363: IFFALSE 30558
// begin _d := rand ( 0 , 5 ) ;
30365: LD_ADDR_VAR 0 11
30369: PUSH
30370: LD_INT 0
30372: PPUSH
30373: LD_INT 5
30375: PPUSH
30376: CALL_OW 12
30380: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30381: LD_ADDR_VAR 0 12
30385: PUSH
30386: LD_INT 2
30388: PPUSH
30389: LD_INT 6
30391: PPUSH
30392: CALL_OW 12
30396: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30397: LD_ADDR_VAR 0 9
30401: PUSH
30402: LD_VAR 0 2
30406: PPUSH
30407: LD_VAR 0 11
30411: PPUSH
30412: LD_VAR 0 12
30416: PPUSH
30417: CALL_OW 272
30421: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30422: LD_ADDR_VAR 0 10
30426: PUSH
30427: LD_VAR 0 3
30431: PPUSH
30432: LD_VAR 0 11
30436: PPUSH
30437: LD_VAR 0 12
30441: PPUSH
30442: CALL_OW 273
30446: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30447: LD_VAR 0 9
30451: PPUSH
30452: LD_VAR 0 10
30456: PPUSH
30457: CALL_OW 488
30461: PUSH
30462: LD_VAR 0 9
30466: PUSH
30467: LD_VAR 0 10
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_VAR 0 7
30480: IN
30481: NOT
30482: AND
30483: PUSH
30484: LD_VAR 0 9
30488: PPUSH
30489: LD_VAR 0 10
30493: PPUSH
30494: CALL_OW 458
30498: NOT
30499: AND
30500: IFFALSE 30542
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30502: LD_ADDR_VAR 0 7
30506: PUSH
30507: LD_VAR 0 7
30511: PPUSH
30512: LD_VAR 0 7
30516: PUSH
30517: LD_INT 1
30519: PLUS
30520: PPUSH
30521: LD_VAR 0 9
30525: PUSH
30526: LD_VAR 0 10
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PPUSH
30535: CALL_OW 1
30539: ST_TO_ADDR
30540: GO 30556
// i := i - 1 ;
30542: LD_ADDR_VAR 0 5
30546: PUSH
30547: LD_VAR 0 5
30551: PUSH
30552: LD_INT 1
30554: MINUS
30555: ST_TO_ADDR
// end ;
30556: GO 30362
30558: POP
30559: POP
// for i in tmp do
30560: LD_ADDR_VAR 0 5
30564: PUSH
30565: LD_VAR 0 7
30569: PUSH
30570: FOR_IN
30571: IFFALSE 30609
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30573: LD_VAR 0 1
30577: PPUSH
30578: LD_VAR 0 5
30582: PUSH
30583: LD_INT 1
30585: ARRAY
30586: PPUSH
30587: LD_VAR 0 5
30591: PUSH
30592: LD_INT 2
30594: ARRAY
30595: PPUSH
30596: CALL 29555 0 3
30600: NOT
30601: IFFALSE 30607
// exit ;
30603: POP
30604: POP
30605: GO 30611
30607: GO 30570
30609: POP
30610: POP
// end ;
30611: LD_VAR 0 4
30615: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30616: LD_INT 0
30618: PPUSH
30619: PPUSH
30620: PPUSH
30621: PPUSH
30622: PPUSH
30623: PPUSH
30624: PPUSH
// if not GetClass ( unit ) = class_sniper then
30625: LD_VAR 0 1
30629: PPUSH
30630: CALL_OW 257
30634: PUSH
30635: LD_INT 5
30637: EQUAL
30638: NOT
30639: IFFALSE 30643
// exit ;
30641: GO 31031
// dist := 8 ;
30643: LD_ADDR_VAR 0 5
30647: PUSH
30648: LD_INT 8
30650: ST_TO_ADDR
// viewRange := 12 ;
30651: LD_ADDR_VAR 0 7
30655: PUSH
30656: LD_INT 12
30658: ST_TO_ADDR
// side := GetSide ( unit ) ;
30659: LD_ADDR_VAR 0 6
30663: PUSH
30664: LD_VAR 0 1
30668: PPUSH
30669: CALL_OW 255
30673: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30674: LD_INT 61
30676: PPUSH
30677: LD_VAR 0 6
30681: PPUSH
30682: CALL_OW 321
30686: PUSH
30687: LD_INT 2
30689: EQUAL
30690: IFFALSE 30700
// viewRange := 16 ;
30692: LD_ADDR_VAR 0 7
30696: PUSH
30697: LD_INT 16
30699: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30700: LD_VAR 0 1
30704: PPUSH
30705: LD_VAR 0 2
30709: PPUSH
30710: LD_VAR 0 3
30714: PPUSH
30715: CALL_OW 297
30719: PUSH
30720: LD_VAR 0 5
30724: GREATER
30725: IFFALSE 30804
// begin ComMoveXY ( unit , x , y ) ;
30727: LD_VAR 0 1
30731: PPUSH
30732: LD_VAR 0 2
30736: PPUSH
30737: LD_VAR 0 3
30741: PPUSH
30742: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30746: LD_INT 35
30748: PPUSH
30749: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_VAR 0 2
30762: PPUSH
30763: LD_VAR 0 3
30767: PPUSH
30768: CALL 67313 0 3
30772: NOT
30773: IFFALSE 30777
// exit ;
30775: GO 31031
// until GetDistUnitXY ( unit , x , y ) < dist ;
30777: LD_VAR 0 1
30781: PPUSH
30782: LD_VAR 0 2
30786: PPUSH
30787: LD_VAR 0 3
30791: PPUSH
30792: CALL_OW 297
30796: PUSH
30797: LD_VAR 0 5
30801: LESS
30802: IFFALSE 30746
// end ; ComTurnXY ( unit , x , y ) ;
30804: LD_VAR 0 1
30808: PPUSH
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_VAR 0 3
30818: PPUSH
30819: CALL_OW 118
// wait ( 5 ) ;
30823: LD_INT 5
30825: PPUSH
30826: CALL_OW 67
// _d := GetDir ( unit ) ;
30830: LD_ADDR_VAR 0 10
30834: PUSH
30835: LD_VAR 0 1
30839: PPUSH
30840: CALL_OW 254
30844: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30845: LD_ADDR_VAR 0 8
30849: PUSH
30850: LD_VAR 0 1
30854: PPUSH
30855: CALL_OW 250
30859: PPUSH
30860: LD_VAR 0 10
30864: PPUSH
30865: LD_VAR 0 5
30869: PPUSH
30870: CALL_OW 272
30874: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30875: LD_ADDR_VAR 0 9
30879: PUSH
30880: LD_VAR 0 1
30884: PPUSH
30885: CALL_OW 251
30889: PPUSH
30890: LD_VAR 0 10
30894: PPUSH
30895: LD_VAR 0 5
30899: PPUSH
30900: CALL_OW 273
30904: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30905: LD_VAR 0 8
30909: PPUSH
30910: LD_VAR 0 9
30914: PPUSH
30915: CALL_OW 488
30919: NOT
30920: IFFALSE 30924
// exit ;
30922: GO 31031
// ComAnimCustom ( unit , 1 ) ;
30924: LD_VAR 0 1
30928: PPUSH
30929: LD_INT 1
30931: PPUSH
30932: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30936: LD_VAR 0 8
30940: PPUSH
30941: LD_VAR 0 9
30945: PPUSH
30946: LD_VAR 0 6
30950: PPUSH
30951: LD_VAR 0 7
30955: PPUSH
30956: CALL_OW 330
// repeat wait ( 1 ) ;
30960: LD_INT 1
30962: PPUSH
30963: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30967: LD_VAR 0 1
30971: PPUSH
30972: CALL_OW 316
30976: PUSH
30977: LD_VAR 0 1
30981: PPUSH
30982: CALL_OW 314
30986: OR
30987: PUSH
30988: LD_VAR 0 1
30992: PPUSH
30993: CALL_OW 302
30997: NOT
30998: OR
30999: PUSH
31000: LD_VAR 0 1
31004: PPUSH
31005: CALL_OW 301
31009: OR
31010: IFFALSE 30960
// RemoveSeeing ( _x , _y , side ) ;
31012: LD_VAR 0 8
31016: PPUSH
31017: LD_VAR 0 9
31021: PPUSH
31022: LD_VAR 0 6
31026: PPUSH
31027: CALL_OW 331
// end ; end_of_file
31031: LD_VAR 0 4
31035: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31036: LD_INT 0
31038: PPUSH
31039: PPUSH
// if exist_mode then
31040: LD_VAR 0 2
31044: IFFALSE 31069
// unit := CreateCharacter ( prefix & ident ) else
31046: LD_ADDR_VAR 0 5
31050: PUSH
31051: LD_VAR 0 3
31055: PUSH
31056: LD_VAR 0 1
31060: STR
31061: PPUSH
31062: CALL_OW 34
31066: ST_TO_ADDR
31067: GO 31084
// unit := NewCharacter ( ident ) ;
31069: LD_ADDR_VAR 0 5
31073: PUSH
31074: LD_VAR 0 1
31078: PPUSH
31079: CALL_OW 25
31083: ST_TO_ADDR
// result := unit ;
31084: LD_ADDR_VAR 0 4
31088: PUSH
31089: LD_VAR 0 5
31093: ST_TO_ADDR
// end ;
31094: LD_VAR 0 4
31098: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31099: LD_INT 0
31101: PPUSH
31102: PPUSH
// if not side or not nation then
31103: LD_VAR 0 1
31107: NOT
31108: PUSH
31109: LD_VAR 0 2
31113: NOT
31114: OR
31115: IFFALSE 31119
// exit ;
31117: GO 31887
// case nation of nation_american :
31119: LD_VAR 0 2
31123: PUSH
31124: LD_INT 1
31126: DOUBLE
31127: EQUAL
31128: IFTRUE 31132
31130: GO 31346
31132: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31133: LD_ADDR_VAR 0 4
31137: PUSH
31138: LD_INT 35
31140: PUSH
31141: LD_INT 45
31143: PUSH
31144: LD_INT 46
31146: PUSH
31147: LD_INT 47
31149: PUSH
31150: LD_INT 82
31152: PUSH
31153: LD_INT 83
31155: PUSH
31156: LD_INT 84
31158: PUSH
31159: LD_INT 85
31161: PUSH
31162: LD_INT 86
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: LD_INT 2
31170: PUSH
31171: LD_INT 6
31173: PUSH
31174: LD_INT 15
31176: PUSH
31177: LD_INT 16
31179: PUSH
31180: LD_INT 7
31182: PUSH
31183: LD_INT 12
31185: PUSH
31186: LD_INT 13
31188: PUSH
31189: LD_INT 10
31191: PUSH
31192: LD_INT 14
31194: PUSH
31195: LD_INT 20
31197: PUSH
31198: LD_INT 21
31200: PUSH
31201: LD_INT 22
31203: PUSH
31204: LD_INT 25
31206: PUSH
31207: LD_INT 32
31209: PUSH
31210: LD_INT 27
31212: PUSH
31213: LD_INT 36
31215: PUSH
31216: LD_INT 69
31218: PUSH
31219: LD_INT 39
31221: PUSH
31222: LD_INT 34
31224: PUSH
31225: LD_INT 40
31227: PUSH
31228: LD_INT 48
31230: PUSH
31231: LD_INT 49
31233: PUSH
31234: LD_INT 50
31236: PUSH
31237: LD_INT 51
31239: PUSH
31240: LD_INT 52
31242: PUSH
31243: LD_INT 53
31245: PUSH
31246: LD_INT 54
31248: PUSH
31249: LD_INT 55
31251: PUSH
31252: LD_INT 56
31254: PUSH
31255: LD_INT 57
31257: PUSH
31258: LD_INT 58
31260: PUSH
31261: LD_INT 59
31263: PUSH
31264: LD_INT 60
31266: PUSH
31267: LD_INT 61
31269: PUSH
31270: LD_INT 62
31272: PUSH
31273: LD_INT 80
31275: PUSH
31276: LD_INT 82
31278: PUSH
31279: LD_INT 83
31281: PUSH
31282: LD_INT 84
31284: PUSH
31285: LD_INT 85
31287: PUSH
31288: LD_INT 86
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
31344: GO 31811
31346: LD_INT 2
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31580
31354: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31355: LD_ADDR_VAR 0 4
31359: PUSH
31360: LD_INT 35
31362: PUSH
31363: LD_INT 45
31365: PUSH
31366: LD_INT 46
31368: PUSH
31369: LD_INT 47
31371: PUSH
31372: LD_INT 82
31374: PUSH
31375: LD_INT 83
31377: PUSH
31378: LD_INT 84
31380: PUSH
31381: LD_INT 85
31383: PUSH
31384: LD_INT 87
31386: PUSH
31387: LD_INT 70
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: LD_INT 11
31395: PUSH
31396: LD_INT 3
31398: PUSH
31399: LD_INT 4
31401: PUSH
31402: LD_INT 5
31404: PUSH
31405: LD_INT 6
31407: PUSH
31408: LD_INT 15
31410: PUSH
31411: LD_INT 18
31413: PUSH
31414: LD_INT 7
31416: PUSH
31417: LD_INT 17
31419: PUSH
31420: LD_INT 8
31422: PUSH
31423: LD_INT 20
31425: PUSH
31426: LD_INT 21
31428: PUSH
31429: LD_INT 22
31431: PUSH
31432: LD_INT 72
31434: PUSH
31435: LD_INT 26
31437: PUSH
31438: LD_INT 69
31440: PUSH
31441: LD_INT 39
31443: PUSH
31444: LD_INT 40
31446: PUSH
31447: LD_INT 41
31449: PUSH
31450: LD_INT 42
31452: PUSH
31453: LD_INT 43
31455: PUSH
31456: LD_INT 48
31458: PUSH
31459: LD_INT 49
31461: PUSH
31462: LD_INT 50
31464: PUSH
31465: LD_INT 51
31467: PUSH
31468: LD_INT 52
31470: PUSH
31471: LD_INT 53
31473: PUSH
31474: LD_INT 54
31476: PUSH
31477: LD_INT 55
31479: PUSH
31480: LD_INT 56
31482: PUSH
31483: LD_INT 60
31485: PUSH
31486: LD_INT 61
31488: PUSH
31489: LD_INT 62
31491: PUSH
31492: LD_INT 66
31494: PUSH
31495: LD_INT 67
31497: PUSH
31498: LD_INT 68
31500: PUSH
31501: LD_INT 81
31503: PUSH
31504: LD_INT 82
31506: PUSH
31507: LD_INT 83
31509: PUSH
31510: LD_INT 84
31512: PUSH
31513: LD_INT 85
31515: PUSH
31516: LD_INT 87
31518: PUSH
31519: LD_INT 88
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: ST_TO_ADDR
31578: GO 31811
31580: LD_INT 3
31582: DOUBLE
31583: EQUAL
31584: IFTRUE 31588
31586: GO 31810
31588: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31589: LD_ADDR_VAR 0 4
31593: PUSH
31594: LD_INT 46
31596: PUSH
31597: LD_INT 47
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: LD_INT 82
31608: PUSH
31609: LD_INT 83
31611: PUSH
31612: LD_INT 84
31614: PUSH
31615: LD_INT 85
31617: PUSH
31618: LD_INT 86
31620: PUSH
31621: LD_INT 11
31623: PUSH
31624: LD_INT 9
31626: PUSH
31627: LD_INT 20
31629: PUSH
31630: LD_INT 19
31632: PUSH
31633: LD_INT 21
31635: PUSH
31636: LD_INT 24
31638: PUSH
31639: LD_INT 22
31641: PUSH
31642: LD_INT 25
31644: PUSH
31645: LD_INT 28
31647: PUSH
31648: LD_INT 29
31650: PUSH
31651: LD_INT 30
31653: PUSH
31654: LD_INT 31
31656: PUSH
31657: LD_INT 37
31659: PUSH
31660: LD_INT 38
31662: PUSH
31663: LD_INT 32
31665: PUSH
31666: LD_INT 27
31668: PUSH
31669: LD_INT 33
31671: PUSH
31672: LD_INT 69
31674: PUSH
31675: LD_INT 39
31677: PUSH
31678: LD_INT 34
31680: PUSH
31681: LD_INT 40
31683: PUSH
31684: LD_INT 71
31686: PUSH
31687: LD_INT 23
31689: PUSH
31690: LD_INT 44
31692: PUSH
31693: LD_INT 48
31695: PUSH
31696: LD_INT 49
31698: PUSH
31699: LD_INT 50
31701: PUSH
31702: LD_INT 51
31704: PUSH
31705: LD_INT 52
31707: PUSH
31708: LD_INT 53
31710: PUSH
31711: LD_INT 54
31713: PUSH
31714: LD_INT 55
31716: PUSH
31717: LD_INT 56
31719: PUSH
31720: LD_INT 57
31722: PUSH
31723: LD_INT 58
31725: PUSH
31726: LD_INT 59
31728: PUSH
31729: LD_INT 63
31731: PUSH
31732: LD_INT 64
31734: PUSH
31735: LD_INT 65
31737: PUSH
31738: LD_INT 82
31740: PUSH
31741: LD_INT 83
31743: PUSH
31744: LD_INT 84
31746: PUSH
31747: LD_INT 85
31749: PUSH
31750: LD_INT 86
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: ST_TO_ADDR
31808: GO 31811
31810: POP
// if state > - 1 and state < 3 then
31811: LD_VAR 0 3
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: GREATER
31820: PUSH
31821: LD_VAR 0 3
31825: PUSH
31826: LD_INT 3
31828: LESS
31829: AND
31830: IFFALSE 31887
// for i in result do
31832: LD_ADDR_VAR 0 5
31836: PUSH
31837: LD_VAR 0 4
31841: PUSH
31842: FOR_IN
31843: IFFALSE 31885
// if GetTech ( i , side ) <> state then
31845: LD_VAR 0 5
31849: PPUSH
31850: LD_VAR 0 1
31854: PPUSH
31855: CALL_OW 321
31859: PUSH
31860: LD_VAR 0 3
31864: NONEQUAL
31865: IFFALSE 31883
// result := result diff i ;
31867: LD_ADDR_VAR 0 4
31871: PUSH
31872: LD_VAR 0 4
31876: PUSH
31877: LD_VAR 0 5
31881: DIFF
31882: ST_TO_ADDR
31883: GO 31842
31885: POP
31886: POP
// end ;
31887: LD_VAR 0 4
31891: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31892: LD_INT 0
31894: PPUSH
31895: PPUSH
31896: PPUSH
// result := true ;
31897: LD_ADDR_VAR 0 3
31901: PUSH
31902: LD_INT 1
31904: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31905: LD_ADDR_VAR 0 5
31909: PUSH
31910: LD_VAR 0 2
31914: PPUSH
31915: CALL_OW 480
31919: ST_TO_ADDR
// if not tmp then
31920: LD_VAR 0 5
31924: NOT
31925: IFFALSE 31929
// exit ;
31927: GO 31978
// for i in tmp do
31929: LD_ADDR_VAR 0 4
31933: PUSH
31934: LD_VAR 0 5
31938: PUSH
31939: FOR_IN
31940: IFFALSE 31976
// if GetTech ( i , side ) <> state_researched then
31942: LD_VAR 0 4
31946: PPUSH
31947: LD_VAR 0 1
31951: PPUSH
31952: CALL_OW 321
31956: PUSH
31957: LD_INT 2
31959: NONEQUAL
31960: IFFALSE 31974
// begin result := false ;
31962: LD_ADDR_VAR 0 3
31966: PUSH
31967: LD_INT 0
31969: ST_TO_ADDR
// exit ;
31970: POP
31971: POP
31972: GO 31978
// end ;
31974: GO 31939
31976: POP
31977: POP
// end ;
31978: LD_VAR 0 3
31982: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31983: LD_INT 0
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31998: LD_VAR 0 1
32002: NOT
32003: PUSH
32004: LD_VAR 0 1
32008: PPUSH
32009: CALL_OW 257
32013: PUSH
32014: LD_INT 9
32016: NONEQUAL
32017: OR
32018: IFFALSE 32022
// exit ;
32020: GO 32595
// side := GetSide ( unit ) ;
32022: LD_ADDR_VAR 0 9
32026: PUSH
32027: LD_VAR 0 1
32031: PPUSH
32032: CALL_OW 255
32036: ST_TO_ADDR
// tech_space := tech_spacanom ;
32037: LD_ADDR_VAR 0 12
32041: PUSH
32042: LD_INT 29
32044: ST_TO_ADDR
// tech_time := tech_taurad ;
32045: LD_ADDR_VAR 0 13
32049: PUSH
32050: LD_INT 28
32052: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32053: LD_ADDR_VAR 0 11
32057: PUSH
32058: LD_VAR 0 1
32062: PPUSH
32063: CALL_OW 310
32067: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32068: LD_VAR 0 11
32072: PPUSH
32073: CALL_OW 247
32077: PUSH
32078: LD_INT 2
32080: EQUAL
32081: IFFALSE 32085
// exit ;
32083: GO 32595
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32085: LD_ADDR_VAR 0 8
32089: PUSH
32090: LD_INT 81
32092: PUSH
32093: LD_VAR 0 9
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: LD_INT 21
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PPUSH
32123: CALL_OW 69
32127: ST_TO_ADDR
// if not tmp then
32128: LD_VAR 0 8
32132: NOT
32133: IFFALSE 32137
// exit ;
32135: GO 32595
// if in_unit then
32137: LD_VAR 0 11
32141: IFFALSE 32165
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32143: LD_ADDR_VAR 0 10
32147: PUSH
32148: LD_VAR 0 8
32152: PPUSH
32153: LD_VAR 0 11
32157: PPUSH
32158: CALL_OW 74
32162: ST_TO_ADDR
32163: GO 32185
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32165: LD_ADDR_VAR 0 10
32169: PUSH
32170: LD_VAR 0 8
32174: PPUSH
32175: LD_VAR 0 1
32179: PPUSH
32180: CALL_OW 74
32184: ST_TO_ADDR
// if not enemy then
32185: LD_VAR 0 10
32189: NOT
32190: IFFALSE 32194
// exit ;
32192: GO 32595
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32194: LD_VAR 0 11
32198: PUSH
32199: LD_VAR 0 11
32203: PPUSH
32204: LD_VAR 0 10
32208: PPUSH
32209: CALL_OW 296
32213: PUSH
32214: LD_INT 13
32216: GREATER
32217: AND
32218: PUSH
32219: LD_VAR 0 1
32223: PPUSH
32224: LD_VAR 0 10
32228: PPUSH
32229: CALL_OW 296
32233: PUSH
32234: LD_INT 12
32236: GREATER
32237: OR
32238: IFFALSE 32242
// exit ;
32240: GO 32595
// missile := [ 1 ] ;
32242: LD_ADDR_VAR 0 14
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32253: LD_VAR 0 9
32257: PPUSH
32258: LD_VAR 0 12
32262: PPUSH
32263: CALL_OW 325
32267: IFFALSE 32296
// missile := Replace ( missile , missile + 1 , 2 ) ;
32269: LD_ADDR_VAR 0 14
32273: PUSH
32274: LD_VAR 0 14
32278: PPUSH
32279: LD_VAR 0 14
32283: PUSH
32284: LD_INT 1
32286: PLUS
32287: PPUSH
32288: LD_INT 2
32290: PPUSH
32291: CALL_OW 1
32295: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32296: LD_VAR 0 9
32300: PPUSH
32301: LD_VAR 0 13
32305: PPUSH
32306: CALL_OW 325
32310: PUSH
32311: LD_VAR 0 10
32315: PPUSH
32316: CALL_OW 255
32320: PPUSH
32321: LD_VAR 0 13
32325: PPUSH
32326: CALL_OW 325
32330: NOT
32331: AND
32332: IFFALSE 32361
// missile := Replace ( missile , missile + 1 , 3 ) ;
32334: LD_ADDR_VAR 0 14
32338: PUSH
32339: LD_VAR 0 14
32343: PPUSH
32344: LD_VAR 0 14
32348: PUSH
32349: LD_INT 1
32351: PLUS
32352: PPUSH
32353: LD_INT 3
32355: PPUSH
32356: CALL_OW 1
32360: ST_TO_ADDR
// if missile < 2 then
32361: LD_VAR 0 14
32365: PUSH
32366: LD_INT 2
32368: LESS
32369: IFFALSE 32373
// exit ;
32371: GO 32595
// x := GetX ( enemy ) ;
32373: LD_ADDR_VAR 0 4
32377: PUSH
32378: LD_VAR 0 10
32382: PPUSH
32383: CALL_OW 250
32387: ST_TO_ADDR
// y := GetY ( enemy ) ;
32388: LD_ADDR_VAR 0 5
32392: PUSH
32393: LD_VAR 0 10
32397: PPUSH
32398: CALL_OW 251
32402: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32403: LD_ADDR_VAR 0 6
32407: PUSH
32408: LD_VAR 0 4
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PPUSH
32417: LD_INT 1
32419: PPUSH
32420: CALL_OW 12
32424: PLUS
32425: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32426: LD_ADDR_VAR 0 7
32430: PUSH
32431: LD_VAR 0 5
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PPUSH
32440: LD_INT 1
32442: PPUSH
32443: CALL_OW 12
32447: PLUS
32448: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32449: LD_VAR 0 6
32453: PPUSH
32454: LD_VAR 0 7
32458: PPUSH
32459: CALL_OW 488
32463: NOT
32464: IFFALSE 32486
// begin _x := x ;
32466: LD_ADDR_VAR 0 6
32470: PUSH
32471: LD_VAR 0 4
32475: ST_TO_ADDR
// _y := y ;
32476: LD_ADDR_VAR 0 7
32480: PUSH
32481: LD_VAR 0 5
32485: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32486: LD_ADDR_VAR 0 3
32490: PUSH
32491: LD_INT 1
32493: PPUSH
32494: LD_VAR 0 14
32498: PPUSH
32499: CALL_OW 12
32503: ST_TO_ADDR
// case i of 1 :
32504: LD_VAR 0 3
32508: PUSH
32509: LD_INT 1
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 32534
32517: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32518: LD_VAR 0 1
32522: PPUSH
32523: LD_VAR 0 10
32527: PPUSH
32528: CALL_OW 115
32532: GO 32595
32534: LD_INT 2
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32564
32542: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32543: LD_VAR 0 1
32547: PPUSH
32548: LD_VAR 0 6
32552: PPUSH
32553: LD_VAR 0 7
32557: PPUSH
32558: CALL_OW 153
32562: GO 32595
32564: LD_INT 3
32566: DOUBLE
32567: EQUAL
32568: IFTRUE 32572
32570: GO 32594
32572: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32573: LD_VAR 0 1
32577: PPUSH
32578: LD_VAR 0 6
32582: PPUSH
32583: LD_VAR 0 7
32587: PPUSH
32588: CALL_OW 154
32592: GO 32595
32594: POP
// end ;
32595: LD_VAR 0 2
32599: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32600: LD_INT 0
32602: PPUSH
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
// if not unit or not building then
32608: LD_VAR 0 1
32612: NOT
32613: PUSH
32614: LD_VAR 0 2
32618: NOT
32619: OR
32620: IFFALSE 32624
// exit ;
32622: GO 32782
// x := GetX ( building ) ;
32624: LD_ADDR_VAR 0 5
32628: PUSH
32629: LD_VAR 0 2
32633: PPUSH
32634: CALL_OW 250
32638: ST_TO_ADDR
// y := GetY ( building ) ;
32639: LD_ADDR_VAR 0 6
32643: PUSH
32644: LD_VAR 0 2
32648: PPUSH
32649: CALL_OW 251
32653: ST_TO_ADDR
// for i = 0 to 5 do
32654: LD_ADDR_VAR 0 4
32658: PUSH
32659: DOUBLE
32660: LD_INT 0
32662: DEC
32663: ST_TO_ADDR
32664: LD_INT 5
32666: PUSH
32667: FOR_TO
32668: IFFALSE 32780
// begin _x := ShiftX ( x , i , 3 ) ;
32670: LD_ADDR_VAR 0 7
32674: PUSH
32675: LD_VAR 0 5
32679: PPUSH
32680: LD_VAR 0 4
32684: PPUSH
32685: LD_INT 3
32687: PPUSH
32688: CALL_OW 272
32692: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32693: LD_ADDR_VAR 0 8
32697: PUSH
32698: LD_VAR 0 6
32702: PPUSH
32703: LD_VAR 0 4
32707: PPUSH
32708: LD_INT 3
32710: PPUSH
32711: CALL_OW 273
32715: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32716: LD_VAR 0 7
32720: PPUSH
32721: LD_VAR 0 8
32725: PPUSH
32726: CALL_OW 488
32730: NOT
32731: IFFALSE 32735
// continue ;
32733: GO 32667
// if HexInfo ( _x , _y ) = 0 then
32735: LD_VAR 0 7
32739: PPUSH
32740: LD_VAR 0 8
32744: PPUSH
32745: CALL_OW 428
32749: PUSH
32750: LD_INT 0
32752: EQUAL
32753: IFFALSE 32778
// begin ComMoveXY ( unit , _x , _y ) ;
32755: LD_VAR 0 1
32759: PPUSH
32760: LD_VAR 0 7
32764: PPUSH
32765: LD_VAR 0 8
32769: PPUSH
32770: CALL_OW 111
// exit ;
32774: POP
32775: POP
32776: GO 32782
// end ; end ;
32778: GO 32667
32780: POP
32781: POP
// end ;
32782: LD_VAR 0 3
32786: RET
// export function ScanBase ( side , base_area ) ; begin
32787: LD_INT 0
32789: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32790: LD_ADDR_VAR 0 3
32794: PUSH
32795: LD_VAR 0 2
32799: PPUSH
32800: LD_INT 81
32802: PUSH
32803: LD_VAR 0 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PPUSH
32812: CALL_OW 70
32816: ST_TO_ADDR
// end ;
32817: LD_VAR 0 3
32821: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32822: LD_INT 0
32824: PPUSH
32825: PPUSH
32826: PPUSH
32827: PPUSH
// result := false ;
32828: LD_ADDR_VAR 0 2
32832: PUSH
32833: LD_INT 0
32835: ST_TO_ADDR
// side := GetSide ( unit ) ;
32836: LD_ADDR_VAR 0 3
32840: PUSH
32841: LD_VAR 0 1
32845: PPUSH
32846: CALL_OW 255
32850: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32851: LD_ADDR_VAR 0 4
32855: PUSH
32856: LD_VAR 0 1
32860: PPUSH
32861: CALL_OW 248
32865: ST_TO_ADDR
// case nat of 1 :
32866: LD_VAR 0 4
32870: PUSH
32871: LD_INT 1
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32879
32877: GO 32890
32879: POP
// tech := tech_lassight ; 2 :
32880: LD_ADDR_VAR 0 5
32884: PUSH
32885: LD_INT 12
32887: ST_TO_ADDR
32888: GO 32929
32890: LD_INT 2
32892: DOUBLE
32893: EQUAL
32894: IFTRUE 32898
32896: GO 32909
32898: POP
// tech := tech_mortar ; 3 :
32899: LD_ADDR_VAR 0 5
32903: PUSH
32904: LD_INT 41
32906: ST_TO_ADDR
32907: GO 32929
32909: LD_INT 3
32911: DOUBLE
32912: EQUAL
32913: IFTRUE 32917
32915: GO 32928
32917: POP
// tech := tech_bazooka ; end ;
32918: LD_ADDR_VAR 0 5
32922: PUSH
32923: LD_INT 44
32925: ST_TO_ADDR
32926: GO 32929
32928: POP
// if Researched ( side , tech ) then
32929: LD_VAR 0 3
32933: PPUSH
32934: LD_VAR 0 5
32938: PPUSH
32939: CALL_OW 325
32943: IFFALSE 32970
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32945: LD_ADDR_VAR 0 2
32949: PUSH
32950: LD_INT 5
32952: PUSH
32953: LD_INT 8
32955: PUSH
32956: LD_INT 9
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: PUSH
32964: LD_VAR 0 4
32968: ARRAY
32969: ST_TO_ADDR
// end ;
32970: LD_VAR 0 2
32974: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32975: LD_INT 0
32977: PPUSH
32978: PPUSH
32979: PPUSH
// if not mines then
32980: LD_VAR 0 2
32984: NOT
32985: IFFALSE 32989
// exit ;
32987: GO 33133
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32989: LD_ADDR_VAR 0 5
32993: PUSH
32994: LD_INT 81
32996: PUSH
32997: LD_VAR 0 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: LD_INT 21
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PPUSH
33027: CALL_OW 69
33031: ST_TO_ADDR
// for i in mines do
33032: LD_ADDR_VAR 0 4
33036: PUSH
33037: LD_VAR 0 2
33041: PUSH
33042: FOR_IN
33043: IFFALSE 33131
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33045: LD_VAR 0 4
33049: PUSH
33050: LD_INT 1
33052: ARRAY
33053: PPUSH
33054: LD_VAR 0 4
33058: PUSH
33059: LD_INT 2
33061: ARRAY
33062: PPUSH
33063: CALL_OW 458
33067: NOT
33068: IFFALSE 33072
// continue ;
33070: GO 33042
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33072: LD_VAR 0 4
33076: PUSH
33077: LD_INT 1
33079: ARRAY
33080: PPUSH
33081: LD_VAR 0 4
33085: PUSH
33086: LD_INT 2
33088: ARRAY
33089: PPUSH
33090: CALL_OW 428
33094: PUSH
33095: LD_VAR 0 5
33099: IN
33100: IFFALSE 33129
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33102: LD_VAR 0 4
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: PPUSH
33111: LD_VAR 0 4
33115: PUSH
33116: LD_INT 2
33118: ARRAY
33119: PPUSH
33120: LD_VAR 0 1
33124: PPUSH
33125: CALL_OW 456
// end ;
33129: GO 33042
33131: POP
33132: POP
// end ;
33133: LD_VAR 0 3
33137: RET
// export function Count ( array ) ; var i ; begin
33138: LD_INT 0
33140: PPUSH
33141: PPUSH
// result := 0 ;
33142: LD_ADDR_VAR 0 2
33146: PUSH
33147: LD_INT 0
33149: ST_TO_ADDR
// for i in array do
33150: LD_ADDR_VAR 0 3
33154: PUSH
33155: LD_VAR 0 1
33159: PUSH
33160: FOR_IN
33161: IFFALSE 33185
// if i then
33163: LD_VAR 0 3
33167: IFFALSE 33183
// result := result + 1 ;
33169: LD_ADDR_VAR 0 2
33173: PUSH
33174: LD_VAR 0 2
33178: PUSH
33179: LD_INT 1
33181: PLUS
33182: ST_TO_ADDR
33183: GO 33160
33185: POP
33186: POP
// end ;
33187: LD_VAR 0 2
33191: RET
// export function IsEmpty ( building ) ; begin
33192: LD_INT 0
33194: PPUSH
// if not building then
33195: LD_VAR 0 1
33199: NOT
33200: IFFALSE 33204
// exit ;
33202: GO 33247
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33204: LD_ADDR_VAR 0 2
33208: PUSH
33209: LD_VAR 0 1
33213: PUSH
33214: LD_INT 22
33216: PUSH
33217: LD_VAR 0 1
33221: PPUSH
33222: CALL_OW 255
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 58
33233: PUSH
33234: EMPTY
33235: LIST
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PPUSH
33241: CALL_OW 69
33245: IN
33246: ST_TO_ADDR
// end ;
33247: LD_VAR 0 2
33251: RET
// export function IsNotFull ( building ) ; var places ; begin
33252: LD_INT 0
33254: PPUSH
33255: PPUSH
// if not building then
33256: LD_VAR 0 1
33260: NOT
33261: IFFALSE 33265
// exit ;
33263: GO 33436
// result := false ;
33265: LD_ADDR_VAR 0 2
33269: PUSH
33270: LD_INT 0
33272: ST_TO_ADDR
// places := 0 ;
33273: LD_ADDR_VAR 0 3
33277: PUSH
33278: LD_INT 0
33280: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33281: LD_VAR 0 1
33285: PPUSH
33286: CALL_OW 266
33290: PUSH
33291: LD_INT 0
33293: DOUBLE
33294: EQUAL
33295: IFTRUE 33353
33297: LD_INT 1
33299: DOUBLE
33300: EQUAL
33301: IFTRUE 33353
33303: LD_INT 6
33305: DOUBLE
33306: EQUAL
33307: IFTRUE 33353
33309: LD_INT 7
33311: DOUBLE
33312: EQUAL
33313: IFTRUE 33353
33315: LD_INT 8
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33353
33321: LD_INT 4
33323: DOUBLE
33324: EQUAL
33325: IFTRUE 33353
33327: LD_INT 5
33329: DOUBLE
33330: EQUAL
33331: IFTRUE 33353
33333: LD_INT 2
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33353
33339: LD_INT 3
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33353
33345: LD_INT 35
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33353
33351: GO 33364
33353: POP
// places := 6 ; b_bunker , b_breastwork :
33354: LD_ADDR_VAR 0 3
33358: PUSH
33359: LD_INT 6
33361: ST_TO_ADDR
33362: GO 33409
33364: LD_INT 32
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33378
33370: LD_INT 31
33372: DOUBLE
33373: EQUAL
33374: IFTRUE 33378
33376: GO 33389
33378: POP
// places := 1 ; b_control_tower :
33379: LD_ADDR_VAR 0 3
33383: PUSH
33384: LD_INT 1
33386: ST_TO_ADDR
33387: GO 33409
33389: LD_INT 36
33391: DOUBLE
33392: EQUAL
33393: IFTRUE 33397
33395: GO 33408
33397: POP
// places := 3 ; end ;
33398: LD_ADDR_VAR 0 3
33402: PUSH
33403: LD_INT 3
33405: ST_TO_ADDR
33406: GO 33409
33408: POP
// if places then
33409: LD_VAR 0 3
33413: IFFALSE 33436
// result := UnitsInside ( building ) < places ;
33415: LD_ADDR_VAR 0 2
33419: PUSH
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL_OW 313
33429: PUSH
33430: LD_VAR 0 3
33434: LESS
33435: ST_TO_ADDR
// end ;
33436: LD_VAR 0 2
33440: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33441: LD_INT 0
33443: PPUSH
33444: PPUSH
33445: PPUSH
33446: PPUSH
// tmp := [ ] ;
33447: LD_ADDR_VAR 0 3
33451: PUSH
33452: EMPTY
33453: ST_TO_ADDR
// list := [ ] ;
33454: LD_ADDR_VAR 0 5
33458: PUSH
33459: EMPTY
33460: ST_TO_ADDR
// for i = 16 to 25 do
33461: LD_ADDR_VAR 0 4
33465: PUSH
33466: DOUBLE
33467: LD_INT 16
33469: DEC
33470: ST_TO_ADDR
33471: LD_INT 25
33473: PUSH
33474: FOR_TO
33475: IFFALSE 33548
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33477: LD_ADDR_VAR 0 3
33481: PUSH
33482: LD_VAR 0 3
33486: PUSH
33487: LD_INT 22
33489: PUSH
33490: LD_VAR 0 1
33494: PPUSH
33495: CALL_OW 255
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 91
33506: PUSH
33507: LD_VAR 0 1
33511: PUSH
33512: LD_INT 6
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 30
33522: PUSH
33523: LD_VAR 0 4
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: PPUSH
33540: CALL_OW 69
33544: ADD
33545: ST_TO_ADDR
33546: GO 33474
33548: POP
33549: POP
// for i = 1 to tmp do
33550: LD_ADDR_VAR 0 4
33554: PUSH
33555: DOUBLE
33556: LD_INT 1
33558: DEC
33559: ST_TO_ADDR
33560: LD_VAR 0 3
33564: PUSH
33565: FOR_TO
33566: IFFALSE 33654
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33568: LD_ADDR_VAR 0 5
33572: PUSH
33573: LD_VAR 0 5
33577: PUSH
33578: LD_VAR 0 3
33582: PUSH
33583: LD_VAR 0 4
33587: ARRAY
33588: PPUSH
33589: CALL_OW 266
33593: PUSH
33594: LD_VAR 0 3
33598: PUSH
33599: LD_VAR 0 4
33603: ARRAY
33604: PPUSH
33605: CALL_OW 250
33609: PUSH
33610: LD_VAR 0 3
33614: PUSH
33615: LD_VAR 0 4
33619: ARRAY
33620: PPUSH
33621: CALL_OW 251
33625: PUSH
33626: LD_VAR 0 3
33630: PUSH
33631: LD_VAR 0 4
33635: ARRAY
33636: PPUSH
33637: CALL_OW 254
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: PUSH
33648: EMPTY
33649: LIST
33650: ADD
33651: ST_TO_ADDR
33652: GO 33565
33654: POP
33655: POP
// result := list ;
33656: LD_ADDR_VAR 0 2
33660: PUSH
33661: LD_VAR 0 5
33665: ST_TO_ADDR
// end ;
33666: LD_VAR 0 2
33670: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33671: LD_INT 0
33673: PPUSH
33674: PPUSH
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
33679: PPUSH
// if not factory then
33680: LD_VAR 0 1
33684: NOT
33685: IFFALSE 33689
// exit ;
33687: GO 34282
// if control = control_apeman then
33689: LD_VAR 0 4
33693: PUSH
33694: LD_INT 5
33696: EQUAL
33697: IFFALSE 33806
// begin tmp := UnitsInside ( factory ) ;
33699: LD_ADDR_VAR 0 8
33703: PUSH
33704: LD_VAR 0 1
33708: PPUSH
33709: CALL_OW 313
33713: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33714: LD_VAR 0 8
33718: PPUSH
33719: LD_INT 25
33721: PUSH
33722: LD_INT 12
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PPUSH
33729: CALL_OW 72
33733: NOT
33734: IFFALSE 33744
// control := control_manual ;
33736: LD_ADDR_VAR 0 4
33740: PUSH
33741: LD_INT 1
33743: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33744: LD_ADDR_VAR 0 8
33748: PUSH
33749: LD_VAR 0 1
33753: PPUSH
33754: CALL 33441 0 1
33758: ST_TO_ADDR
// if tmp then
33759: LD_VAR 0 8
33763: IFFALSE 33806
// begin for i in tmp do
33765: LD_ADDR_VAR 0 7
33769: PUSH
33770: LD_VAR 0 8
33774: PUSH
33775: FOR_IN
33776: IFFALSE 33804
// if i [ 1 ] = b_ext_radio then
33778: LD_VAR 0 7
33782: PUSH
33783: LD_INT 1
33785: ARRAY
33786: PUSH
33787: LD_INT 22
33789: EQUAL
33790: IFFALSE 33802
// begin control := control_remote ;
33792: LD_ADDR_VAR 0 4
33796: PUSH
33797: LD_INT 2
33799: ST_TO_ADDR
// break ;
33800: GO 33804
// end ;
33802: GO 33775
33804: POP
33805: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33806: LD_VAR 0 1
33810: PPUSH
33811: LD_VAR 0 2
33815: PPUSH
33816: LD_VAR 0 3
33820: PPUSH
33821: LD_VAR 0 4
33825: PPUSH
33826: LD_VAR 0 5
33830: PPUSH
33831: CALL_OW 448
33835: IFFALSE 33870
// begin result := [ chassis , engine , control , weapon ] ;
33837: LD_ADDR_VAR 0 6
33841: PUSH
33842: LD_VAR 0 2
33846: PUSH
33847: LD_VAR 0 3
33851: PUSH
33852: LD_VAR 0 4
33856: PUSH
33857: LD_VAR 0 5
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: ST_TO_ADDR
// exit ;
33868: GO 34282
// end ; _chassis := AvailableChassisList ( factory ) ;
33870: LD_ADDR_VAR 0 9
33874: PUSH
33875: LD_VAR 0 1
33879: PPUSH
33880: CALL_OW 475
33884: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33885: LD_ADDR_VAR 0 11
33889: PUSH
33890: LD_VAR 0 1
33894: PPUSH
33895: CALL_OW 476
33899: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33900: LD_ADDR_VAR 0 12
33904: PUSH
33905: LD_VAR 0 1
33909: PPUSH
33910: CALL_OW 477
33914: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33915: LD_ADDR_VAR 0 10
33919: PUSH
33920: LD_VAR 0 1
33924: PPUSH
33925: CALL_OW 478
33929: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33930: LD_VAR 0 9
33934: NOT
33935: PUSH
33936: LD_VAR 0 11
33940: NOT
33941: OR
33942: PUSH
33943: LD_VAR 0 12
33947: NOT
33948: OR
33949: PUSH
33950: LD_VAR 0 10
33954: NOT
33955: OR
33956: IFFALSE 33991
// begin result := [ chassis , engine , control , weapon ] ;
33958: LD_ADDR_VAR 0 6
33962: PUSH
33963: LD_VAR 0 2
33967: PUSH
33968: LD_VAR 0 3
33972: PUSH
33973: LD_VAR 0 4
33977: PUSH
33978: LD_VAR 0 5
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: ST_TO_ADDR
// exit ;
33989: GO 34282
// end ; if not chassis in _chassis then
33991: LD_VAR 0 2
33995: PUSH
33996: LD_VAR 0 9
34000: IN
34001: NOT
34002: IFFALSE 34028
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34004: LD_ADDR_VAR 0 2
34008: PUSH
34009: LD_VAR 0 9
34013: PUSH
34014: LD_INT 1
34016: PPUSH
34017: LD_VAR 0 9
34021: PPUSH
34022: CALL_OW 12
34026: ARRAY
34027: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34028: LD_VAR 0 2
34032: PPUSH
34033: LD_VAR 0 3
34037: PPUSH
34038: CALL 34287 0 2
34042: NOT
34043: IFFALSE 34102
// repeat engine := _engine [ 1 ] ;
34045: LD_ADDR_VAR 0 3
34049: PUSH
34050: LD_VAR 0 11
34054: PUSH
34055: LD_INT 1
34057: ARRAY
34058: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34059: LD_ADDR_VAR 0 11
34063: PUSH
34064: LD_VAR 0 11
34068: PPUSH
34069: LD_INT 1
34071: PPUSH
34072: CALL_OW 3
34076: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34077: LD_VAR 0 2
34081: PPUSH
34082: LD_VAR 0 3
34086: PPUSH
34087: CALL 34287 0 2
34091: PUSH
34092: LD_VAR 0 11
34096: PUSH
34097: EMPTY
34098: EQUAL
34099: OR
34100: IFFALSE 34045
// if not control in _control then
34102: LD_VAR 0 4
34106: PUSH
34107: LD_VAR 0 12
34111: IN
34112: NOT
34113: IFFALSE 34139
// control := _control [ rand ( 1 , _control ) ] ;
34115: LD_ADDR_VAR 0 4
34119: PUSH
34120: LD_VAR 0 12
34124: PUSH
34125: LD_INT 1
34127: PPUSH
34128: LD_VAR 0 12
34132: PPUSH
34133: CALL_OW 12
34137: ARRAY
34138: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34139: LD_VAR 0 2
34143: PPUSH
34144: LD_VAR 0 5
34148: PPUSH
34149: CALL 34507 0 2
34153: NOT
34154: IFFALSE 34213
// repeat weapon := _weapon [ 1 ] ;
34156: LD_ADDR_VAR 0 5
34160: PUSH
34161: LD_VAR 0 10
34165: PUSH
34166: LD_INT 1
34168: ARRAY
34169: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34170: LD_ADDR_VAR 0 10
34174: PUSH
34175: LD_VAR 0 10
34179: PPUSH
34180: LD_INT 1
34182: PPUSH
34183: CALL_OW 3
34187: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34188: LD_VAR 0 2
34192: PPUSH
34193: LD_VAR 0 5
34197: PPUSH
34198: CALL 34507 0 2
34202: PUSH
34203: LD_VAR 0 10
34207: PUSH
34208: EMPTY
34209: EQUAL
34210: OR
34211: IFFALSE 34156
// result := [ ] ;
34213: LD_ADDR_VAR 0 6
34217: PUSH
34218: EMPTY
34219: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34220: LD_VAR 0 1
34224: PPUSH
34225: LD_VAR 0 2
34229: PPUSH
34230: LD_VAR 0 3
34234: PPUSH
34235: LD_VAR 0 4
34239: PPUSH
34240: LD_VAR 0 5
34244: PPUSH
34245: CALL_OW 448
34249: IFFALSE 34282
// result := [ chassis , engine , control , weapon ] ;
34251: LD_ADDR_VAR 0 6
34255: PUSH
34256: LD_VAR 0 2
34260: PUSH
34261: LD_VAR 0 3
34265: PUSH
34266: LD_VAR 0 4
34270: PUSH
34271: LD_VAR 0 5
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: ST_TO_ADDR
// end ;
34282: LD_VAR 0 6
34286: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34287: LD_INT 0
34289: PPUSH
// if not chassis or not engine then
34290: LD_VAR 0 1
34294: NOT
34295: PUSH
34296: LD_VAR 0 2
34300: NOT
34301: OR
34302: IFFALSE 34306
// exit ;
34304: GO 34502
// case engine of engine_solar :
34306: LD_VAR 0 2
34310: PUSH
34311: LD_INT 2
34313: DOUBLE
34314: EQUAL
34315: IFTRUE 34319
34317: GO 34357
34319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34320: LD_ADDR_VAR 0 3
34324: PUSH
34325: LD_INT 11
34327: PUSH
34328: LD_INT 12
34330: PUSH
34331: LD_INT 13
34333: PUSH
34334: LD_INT 14
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: LD_INT 3
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: ST_TO_ADDR
34355: GO 34486
34357: LD_INT 1
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34365
34363: GO 34427
34365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34366: LD_ADDR_VAR 0 3
34370: PUSH
34371: LD_INT 11
34373: PUSH
34374: LD_INT 12
34376: PUSH
34377: LD_INT 13
34379: PUSH
34380: LD_INT 14
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 3
34391: PUSH
34392: LD_INT 4
34394: PUSH
34395: LD_INT 5
34397: PUSH
34398: LD_INT 21
34400: PUSH
34401: LD_INT 23
34403: PUSH
34404: LD_INT 22
34406: PUSH
34407: LD_INT 24
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: ST_TO_ADDR
34425: GO 34486
34427: LD_INT 3
34429: DOUBLE
34430: EQUAL
34431: IFTRUE 34435
34433: GO 34485
34435: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34436: LD_ADDR_VAR 0 3
34440: PUSH
34441: LD_INT 13
34443: PUSH
34444: LD_INT 14
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 3
34452: PUSH
34453: LD_INT 4
34455: PUSH
34456: LD_INT 5
34458: PUSH
34459: LD_INT 21
34461: PUSH
34462: LD_INT 22
34464: PUSH
34465: LD_INT 23
34467: PUSH
34468: LD_INT 24
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: ST_TO_ADDR
34483: GO 34486
34485: POP
// result := ( chassis in result ) ;
34486: LD_ADDR_VAR 0 3
34490: PUSH
34491: LD_VAR 0 1
34495: PUSH
34496: LD_VAR 0 3
34500: IN
34501: ST_TO_ADDR
// end ;
34502: LD_VAR 0 3
34506: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34507: LD_INT 0
34509: PPUSH
// if not chassis or not weapon then
34510: LD_VAR 0 1
34514: NOT
34515: PUSH
34516: LD_VAR 0 2
34520: NOT
34521: OR
34522: IFFALSE 34526
// exit ;
34524: GO 35586
// case weapon of us_machine_gun :
34526: LD_VAR 0 2
34530: PUSH
34531: LD_INT 2
34533: DOUBLE
34534: EQUAL
34535: IFTRUE 34539
34537: GO 34569
34539: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34540: LD_ADDR_VAR 0 3
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 2
34550: PUSH
34551: LD_INT 3
34553: PUSH
34554: LD_INT 4
34556: PUSH
34557: LD_INT 5
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: ST_TO_ADDR
34567: GO 35570
34569: LD_INT 3
34571: DOUBLE
34572: EQUAL
34573: IFTRUE 34577
34575: GO 34607
34577: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34578: LD_ADDR_VAR 0 3
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: LD_INT 2
34588: PUSH
34589: LD_INT 3
34591: PUSH
34592: LD_INT 4
34594: PUSH
34595: LD_INT 5
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: ST_TO_ADDR
34605: GO 35570
34607: LD_INT 11
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34615
34613: GO 34645
34615: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34616: LD_ADDR_VAR 0 3
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: LD_INT 4
34632: PUSH
34633: LD_INT 5
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: ST_TO_ADDR
34643: GO 35570
34645: LD_INT 4
34647: DOUBLE
34648: EQUAL
34649: IFTRUE 34653
34651: GO 34679
34653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34654: LD_ADDR_VAR 0 3
34658: PUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 3
34664: PUSH
34665: LD_INT 4
34667: PUSH
34668: LD_INT 5
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: ST_TO_ADDR
34677: GO 35570
34679: LD_INT 5
34681: DOUBLE
34682: EQUAL
34683: IFTRUE 34687
34685: GO 34713
34687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34688: LD_ADDR_VAR 0 3
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 3
34698: PUSH
34699: LD_INT 4
34701: PUSH
34702: LD_INT 5
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: ST_TO_ADDR
34711: GO 35570
34713: LD_INT 9
34715: DOUBLE
34716: EQUAL
34717: IFTRUE 34721
34719: GO 34747
34721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34722: LD_ADDR_VAR 0 3
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: LD_INT 3
34732: PUSH
34733: LD_INT 4
34735: PUSH
34736: LD_INT 5
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
34745: GO 35570
34747: LD_INT 7
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34781
34755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34756: LD_ADDR_VAR 0 3
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: LD_INT 4
34769: PUSH
34770: LD_INT 5
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: ST_TO_ADDR
34779: GO 35570
34781: LD_INT 12
34783: DOUBLE
34784: EQUAL
34785: IFTRUE 34789
34787: GO 34815
34789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34790: LD_ADDR_VAR 0 3
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 3
34800: PUSH
34801: LD_INT 4
34803: PUSH
34804: LD_INT 5
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: ST_TO_ADDR
34813: GO 35570
34815: LD_INT 13
34817: DOUBLE
34818: EQUAL
34819: IFTRUE 34823
34821: GO 34849
34823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34824: LD_ADDR_VAR 0 3
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: LD_INT 4
34837: PUSH
34838: LD_INT 5
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: ST_TO_ADDR
34847: GO 35570
34849: LD_INT 14
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34857
34855: GO 34875
34857: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34858: LD_ADDR_VAR 0 3
34862: PUSH
34863: LD_INT 4
34865: PUSH
34866: LD_INT 5
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: ST_TO_ADDR
34873: GO 35570
34875: LD_INT 6
34877: DOUBLE
34878: EQUAL
34879: IFTRUE 34883
34881: GO 34901
34883: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34884: LD_ADDR_VAR 0 3
34888: PUSH
34889: LD_INT 4
34891: PUSH
34892: LD_INT 5
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: ST_TO_ADDR
34899: GO 35570
34901: LD_INT 10
34903: DOUBLE
34904: EQUAL
34905: IFTRUE 34909
34907: GO 34927
34909: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34910: LD_ADDR_VAR 0 3
34914: PUSH
34915: LD_INT 4
34917: PUSH
34918: LD_INT 5
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: ST_TO_ADDR
34925: GO 35570
34927: LD_INT 22
34929: DOUBLE
34930: EQUAL
34931: IFTRUE 34935
34933: GO 34961
34935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34936: LD_ADDR_VAR 0 3
34940: PUSH
34941: LD_INT 11
34943: PUSH
34944: LD_INT 12
34946: PUSH
34947: LD_INT 13
34949: PUSH
34950: LD_INT 14
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: ST_TO_ADDR
34959: GO 35570
34961: LD_INT 23
34963: DOUBLE
34964: EQUAL
34965: IFTRUE 34969
34967: GO 34995
34969: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34970: LD_ADDR_VAR 0 3
34974: PUSH
34975: LD_INT 11
34977: PUSH
34978: LD_INT 12
34980: PUSH
34981: LD_INT 13
34983: PUSH
34984: LD_INT 14
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: ST_TO_ADDR
34993: GO 35570
34995: LD_INT 24
34997: DOUBLE
34998: EQUAL
34999: IFTRUE 35003
35001: GO 35029
35003: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35004: LD_ADDR_VAR 0 3
35008: PUSH
35009: LD_INT 11
35011: PUSH
35012: LD_INT 12
35014: PUSH
35015: LD_INT 13
35017: PUSH
35018: LD_INT 14
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: ST_TO_ADDR
35027: GO 35570
35029: LD_INT 30
35031: DOUBLE
35032: EQUAL
35033: IFTRUE 35037
35035: GO 35063
35037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35038: LD_ADDR_VAR 0 3
35042: PUSH
35043: LD_INT 11
35045: PUSH
35046: LD_INT 12
35048: PUSH
35049: LD_INT 13
35051: PUSH
35052: LD_INT 14
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: ST_TO_ADDR
35061: GO 35570
35063: LD_INT 25
35065: DOUBLE
35066: EQUAL
35067: IFTRUE 35071
35069: GO 35089
35071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35072: LD_ADDR_VAR 0 3
35076: PUSH
35077: LD_INT 13
35079: PUSH
35080: LD_INT 14
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: ST_TO_ADDR
35087: GO 35570
35089: LD_INT 27
35091: DOUBLE
35092: EQUAL
35093: IFTRUE 35097
35095: GO 35115
35097: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35098: LD_ADDR_VAR 0 3
35102: PUSH
35103: LD_INT 13
35105: PUSH
35106: LD_INT 14
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: ST_TO_ADDR
35113: GO 35570
35115: LD_INT 92
35117: DOUBLE
35118: EQUAL
35119: IFTRUE 35123
35121: GO 35149
35123: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35124: LD_ADDR_VAR 0 3
35128: PUSH
35129: LD_INT 11
35131: PUSH
35132: LD_INT 12
35134: PUSH
35135: LD_INT 13
35137: PUSH
35138: LD_INT 14
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: ST_TO_ADDR
35147: GO 35570
35149: LD_INT 28
35151: DOUBLE
35152: EQUAL
35153: IFTRUE 35157
35155: GO 35175
35157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35158: LD_ADDR_VAR 0 3
35162: PUSH
35163: LD_INT 13
35165: PUSH
35166: LD_INT 14
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: ST_TO_ADDR
35173: GO 35570
35175: LD_INT 29
35177: DOUBLE
35178: EQUAL
35179: IFTRUE 35183
35181: GO 35201
35183: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35184: LD_ADDR_VAR 0 3
35188: PUSH
35189: LD_INT 13
35191: PUSH
35192: LD_INT 14
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: ST_TO_ADDR
35199: GO 35570
35201: LD_INT 31
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35209
35207: GO 35227
35209: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_INT 13
35217: PUSH
35218: LD_INT 14
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: ST_TO_ADDR
35225: GO 35570
35227: LD_INT 26
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35235
35233: GO 35253
35235: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35236: LD_ADDR_VAR 0 3
35240: PUSH
35241: LD_INT 13
35243: PUSH
35244: LD_INT 14
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: ST_TO_ADDR
35251: GO 35570
35253: LD_INT 42
35255: DOUBLE
35256: EQUAL
35257: IFTRUE 35261
35259: GO 35287
35261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35262: LD_ADDR_VAR 0 3
35266: PUSH
35267: LD_INT 21
35269: PUSH
35270: LD_INT 22
35272: PUSH
35273: LD_INT 23
35275: PUSH
35276: LD_INT 24
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: ST_TO_ADDR
35285: GO 35570
35287: LD_INT 43
35289: DOUBLE
35290: EQUAL
35291: IFTRUE 35295
35293: GO 35321
35295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35296: LD_ADDR_VAR 0 3
35300: PUSH
35301: LD_INT 21
35303: PUSH
35304: LD_INT 22
35306: PUSH
35307: LD_INT 23
35309: PUSH
35310: LD_INT 24
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: ST_TO_ADDR
35319: GO 35570
35321: LD_INT 44
35323: DOUBLE
35324: EQUAL
35325: IFTRUE 35329
35327: GO 35355
35329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35330: LD_ADDR_VAR 0 3
35334: PUSH
35335: LD_INT 21
35337: PUSH
35338: LD_INT 22
35340: PUSH
35341: LD_INT 23
35343: PUSH
35344: LD_INT 24
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: ST_TO_ADDR
35353: GO 35570
35355: LD_INT 45
35357: DOUBLE
35358: EQUAL
35359: IFTRUE 35363
35361: GO 35389
35363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35364: LD_ADDR_VAR 0 3
35368: PUSH
35369: LD_INT 21
35371: PUSH
35372: LD_INT 22
35374: PUSH
35375: LD_INT 23
35377: PUSH
35378: LD_INT 24
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: ST_TO_ADDR
35387: GO 35570
35389: LD_INT 49
35391: DOUBLE
35392: EQUAL
35393: IFTRUE 35397
35395: GO 35423
35397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35398: LD_ADDR_VAR 0 3
35402: PUSH
35403: LD_INT 21
35405: PUSH
35406: LD_INT 22
35408: PUSH
35409: LD_INT 23
35411: PUSH
35412: LD_INT 24
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: ST_TO_ADDR
35421: GO 35570
35423: LD_INT 51
35425: DOUBLE
35426: EQUAL
35427: IFTRUE 35431
35429: GO 35457
35431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35432: LD_ADDR_VAR 0 3
35436: PUSH
35437: LD_INT 21
35439: PUSH
35440: LD_INT 22
35442: PUSH
35443: LD_INT 23
35445: PUSH
35446: LD_INT 24
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: ST_TO_ADDR
35455: GO 35570
35457: LD_INT 52
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35465
35463: GO 35491
35465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35466: LD_ADDR_VAR 0 3
35470: PUSH
35471: LD_INT 21
35473: PUSH
35474: LD_INT 22
35476: PUSH
35477: LD_INT 23
35479: PUSH
35480: LD_INT 24
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: ST_TO_ADDR
35489: GO 35570
35491: LD_INT 53
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35499
35497: GO 35517
35499: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35500: LD_ADDR_VAR 0 3
35504: PUSH
35505: LD_INT 23
35507: PUSH
35508: LD_INT 24
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: ST_TO_ADDR
35515: GO 35570
35517: LD_INT 46
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35525
35523: GO 35543
35525: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35526: LD_ADDR_VAR 0 3
35530: PUSH
35531: LD_INT 23
35533: PUSH
35534: LD_INT 24
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: ST_TO_ADDR
35541: GO 35570
35543: LD_INT 47
35545: DOUBLE
35546: EQUAL
35547: IFTRUE 35551
35549: GO 35569
35551: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35552: LD_ADDR_VAR 0 3
35556: PUSH
35557: LD_INT 23
35559: PUSH
35560: LD_INT 24
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: ST_TO_ADDR
35567: GO 35570
35569: POP
// result := ( chassis in result ) ;
35570: LD_ADDR_VAR 0 3
35574: PUSH
35575: LD_VAR 0 1
35579: PUSH
35580: LD_VAR 0 3
35584: IN
35585: ST_TO_ADDR
// end ;
35586: LD_VAR 0 3
35590: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35591: LD_INT 0
35593: PPUSH
35594: PPUSH
35595: PPUSH
35596: PPUSH
35597: PPUSH
35598: PPUSH
35599: PPUSH
// result := array ;
35600: LD_ADDR_VAR 0 5
35604: PUSH
35605: LD_VAR 0 1
35609: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35610: LD_VAR 0 1
35614: NOT
35615: PUSH
35616: LD_VAR 0 2
35620: NOT
35621: OR
35622: PUSH
35623: LD_VAR 0 3
35627: NOT
35628: OR
35629: PUSH
35630: LD_VAR 0 2
35634: PUSH
35635: LD_VAR 0 1
35639: GREATER
35640: OR
35641: PUSH
35642: LD_VAR 0 3
35646: PUSH
35647: LD_VAR 0 1
35651: GREATER
35652: OR
35653: IFFALSE 35657
// exit ;
35655: GO 35953
// if direction then
35657: LD_VAR 0 4
35661: IFFALSE 35725
// begin d := 1 ;
35663: LD_ADDR_VAR 0 9
35667: PUSH
35668: LD_INT 1
35670: ST_TO_ADDR
// if i_from > i_to then
35671: LD_VAR 0 2
35675: PUSH
35676: LD_VAR 0 3
35680: GREATER
35681: IFFALSE 35707
// length := ( array - i_from ) + i_to else
35683: LD_ADDR_VAR 0 11
35687: PUSH
35688: LD_VAR 0 1
35692: PUSH
35693: LD_VAR 0 2
35697: MINUS
35698: PUSH
35699: LD_VAR 0 3
35703: PLUS
35704: ST_TO_ADDR
35705: GO 35723
// length := i_to - i_from ;
35707: LD_ADDR_VAR 0 11
35711: PUSH
35712: LD_VAR 0 3
35716: PUSH
35717: LD_VAR 0 2
35721: MINUS
35722: ST_TO_ADDR
// end else
35723: GO 35786
// begin d := - 1 ;
35725: LD_ADDR_VAR 0 9
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: ST_TO_ADDR
// if i_from > i_to then
35734: LD_VAR 0 2
35738: PUSH
35739: LD_VAR 0 3
35743: GREATER
35744: IFFALSE 35764
// length := i_from - i_to else
35746: LD_ADDR_VAR 0 11
35750: PUSH
35751: LD_VAR 0 2
35755: PUSH
35756: LD_VAR 0 3
35760: MINUS
35761: ST_TO_ADDR
35762: GO 35786
// length := ( array - i_to ) + i_from ;
35764: LD_ADDR_VAR 0 11
35768: PUSH
35769: LD_VAR 0 1
35773: PUSH
35774: LD_VAR 0 3
35778: MINUS
35779: PUSH
35780: LD_VAR 0 2
35784: PLUS
35785: ST_TO_ADDR
// end ; if not length then
35786: LD_VAR 0 11
35790: NOT
35791: IFFALSE 35795
// exit ;
35793: GO 35953
// tmp := array ;
35795: LD_ADDR_VAR 0 10
35799: PUSH
35800: LD_VAR 0 1
35804: ST_TO_ADDR
// for i = 1 to length do
35805: LD_ADDR_VAR 0 6
35809: PUSH
35810: DOUBLE
35811: LD_INT 1
35813: DEC
35814: ST_TO_ADDR
35815: LD_VAR 0 11
35819: PUSH
35820: FOR_TO
35821: IFFALSE 35941
// begin for j = 1 to array do
35823: LD_ADDR_VAR 0 7
35827: PUSH
35828: DOUBLE
35829: LD_INT 1
35831: DEC
35832: ST_TO_ADDR
35833: LD_VAR 0 1
35837: PUSH
35838: FOR_TO
35839: IFFALSE 35927
// begin k := j + d ;
35841: LD_ADDR_VAR 0 8
35845: PUSH
35846: LD_VAR 0 7
35850: PUSH
35851: LD_VAR 0 9
35855: PLUS
35856: ST_TO_ADDR
// if k > array then
35857: LD_VAR 0 8
35861: PUSH
35862: LD_VAR 0 1
35866: GREATER
35867: IFFALSE 35877
// k := 1 ;
35869: LD_ADDR_VAR 0 8
35873: PUSH
35874: LD_INT 1
35876: ST_TO_ADDR
// if not k then
35877: LD_VAR 0 8
35881: NOT
35882: IFFALSE 35894
// k := array ;
35884: LD_ADDR_VAR 0 8
35888: PUSH
35889: LD_VAR 0 1
35893: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35894: LD_ADDR_VAR 0 10
35898: PUSH
35899: LD_VAR 0 10
35903: PPUSH
35904: LD_VAR 0 8
35908: PPUSH
35909: LD_VAR 0 1
35913: PUSH
35914: LD_VAR 0 7
35918: ARRAY
35919: PPUSH
35920: CALL_OW 1
35924: ST_TO_ADDR
// end ;
35925: GO 35838
35927: POP
35928: POP
// array := tmp ;
35929: LD_ADDR_VAR 0 1
35933: PUSH
35934: LD_VAR 0 10
35938: ST_TO_ADDR
// end ;
35939: GO 35820
35941: POP
35942: POP
// result := array ;
35943: LD_ADDR_VAR 0 5
35947: PUSH
35948: LD_VAR 0 1
35952: ST_TO_ADDR
// end ;
35953: LD_VAR 0 5
35957: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35958: LD_INT 0
35960: PPUSH
35961: PPUSH
// result := 0 ;
35962: LD_ADDR_VAR 0 3
35966: PUSH
35967: LD_INT 0
35969: ST_TO_ADDR
// if not array or not value in array then
35970: LD_VAR 0 1
35974: NOT
35975: PUSH
35976: LD_VAR 0 2
35980: PUSH
35981: LD_VAR 0 1
35985: IN
35986: NOT
35987: OR
35988: IFFALSE 35992
// exit ;
35990: GO 36046
// for i = 1 to array do
35992: LD_ADDR_VAR 0 4
35996: PUSH
35997: DOUBLE
35998: LD_INT 1
36000: DEC
36001: ST_TO_ADDR
36002: LD_VAR 0 1
36006: PUSH
36007: FOR_TO
36008: IFFALSE 36044
// if value = array [ i ] then
36010: LD_VAR 0 2
36014: PUSH
36015: LD_VAR 0 1
36019: PUSH
36020: LD_VAR 0 4
36024: ARRAY
36025: EQUAL
36026: IFFALSE 36042
// begin result := i ;
36028: LD_ADDR_VAR 0 3
36032: PUSH
36033: LD_VAR 0 4
36037: ST_TO_ADDR
// exit ;
36038: POP
36039: POP
36040: GO 36046
// end ;
36042: GO 36007
36044: POP
36045: POP
// end ;
36046: LD_VAR 0 3
36050: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36051: LD_INT 0
36053: PPUSH
// vc_chassis := chassis ;
36054: LD_ADDR_OWVAR 37
36058: PUSH
36059: LD_VAR 0 1
36063: ST_TO_ADDR
// vc_engine := engine ;
36064: LD_ADDR_OWVAR 39
36068: PUSH
36069: LD_VAR 0 2
36073: ST_TO_ADDR
// vc_control := control ;
36074: LD_ADDR_OWVAR 38
36078: PUSH
36079: LD_VAR 0 3
36083: ST_TO_ADDR
// vc_weapon := weapon ;
36084: LD_ADDR_OWVAR 40
36088: PUSH
36089: LD_VAR 0 4
36093: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36094: LD_ADDR_OWVAR 41
36098: PUSH
36099: LD_VAR 0 5
36103: ST_TO_ADDR
// end ;
36104: LD_VAR 0 6
36108: RET
// export function WantPlant ( unit ) ; var task ; begin
36109: LD_INT 0
36111: PPUSH
36112: PPUSH
// result := false ;
36113: LD_ADDR_VAR 0 2
36117: PUSH
36118: LD_INT 0
36120: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36121: LD_ADDR_VAR 0 3
36125: PUSH
36126: LD_VAR 0 1
36130: PPUSH
36131: CALL_OW 437
36135: ST_TO_ADDR
// if task then
36136: LD_VAR 0 3
36140: IFFALSE 36168
// if task [ 1 ] [ 1 ] = p then
36142: LD_VAR 0 3
36146: PUSH
36147: LD_INT 1
36149: ARRAY
36150: PUSH
36151: LD_INT 1
36153: ARRAY
36154: PUSH
36155: LD_STRING p
36157: EQUAL
36158: IFFALSE 36168
// result := true ;
36160: LD_ADDR_VAR 0 2
36164: PUSH
36165: LD_INT 1
36167: ST_TO_ADDR
// end ;
36168: LD_VAR 0 2
36172: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36173: LD_INT 0
36175: PPUSH
36176: PPUSH
36177: PPUSH
36178: PPUSH
// if pos < 1 then
36179: LD_VAR 0 2
36183: PUSH
36184: LD_INT 1
36186: LESS
36187: IFFALSE 36191
// exit ;
36189: GO 36494
// if pos = 1 then
36191: LD_VAR 0 2
36195: PUSH
36196: LD_INT 1
36198: EQUAL
36199: IFFALSE 36232
// result := Replace ( arr , pos [ 1 ] , value ) else
36201: LD_ADDR_VAR 0 4
36205: PUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: LD_VAR 0 2
36215: PUSH
36216: LD_INT 1
36218: ARRAY
36219: PPUSH
36220: LD_VAR 0 3
36224: PPUSH
36225: CALL_OW 1
36229: ST_TO_ADDR
36230: GO 36494
// begin tmp := arr ;
36232: LD_ADDR_VAR 0 6
36236: PUSH
36237: LD_VAR 0 1
36241: ST_TO_ADDR
// s_arr := [ tmp ] ;
36242: LD_ADDR_VAR 0 7
36246: PUSH
36247: LD_VAR 0 6
36251: PUSH
36252: EMPTY
36253: LIST
36254: ST_TO_ADDR
// for i = 1 to pos - 1 do
36255: LD_ADDR_VAR 0 5
36259: PUSH
36260: DOUBLE
36261: LD_INT 1
36263: DEC
36264: ST_TO_ADDR
36265: LD_VAR 0 2
36269: PUSH
36270: LD_INT 1
36272: MINUS
36273: PUSH
36274: FOR_TO
36275: IFFALSE 36320
// begin tmp := tmp [ pos [ i ] ] ;
36277: LD_ADDR_VAR 0 6
36281: PUSH
36282: LD_VAR 0 6
36286: PUSH
36287: LD_VAR 0 2
36291: PUSH
36292: LD_VAR 0 5
36296: ARRAY
36297: ARRAY
36298: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36299: LD_ADDR_VAR 0 7
36303: PUSH
36304: LD_VAR 0 7
36308: PUSH
36309: LD_VAR 0 6
36313: PUSH
36314: EMPTY
36315: LIST
36316: ADD
36317: ST_TO_ADDR
// end ;
36318: GO 36274
36320: POP
36321: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36322: LD_ADDR_VAR 0 6
36326: PUSH
36327: LD_VAR 0 6
36331: PPUSH
36332: LD_VAR 0 2
36336: PUSH
36337: LD_VAR 0 2
36341: ARRAY
36342: PPUSH
36343: LD_VAR 0 3
36347: PPUSH
36348: CALL_OW 1
36352: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36353: LD_ADDR_VAR 0 7
36357: PUSH
36358: LD_VAR 0 7
36362: PPUSH
36363: LD_VAR 0 7
36367: PPUSH
36368: LD_VAR 0 6
36372: PPUSH
36373: CALL_OW 1
36377: ST_TO_ADDR
// for i = s_arr downto 2 do
36378: LD_ADDR_VAR 0 5
36382: PUSH
36383: DOUBLE
36384: LD_VAR 0 7
36388: INC
36389: ST_TO_ADDR
36390: LD_INT 2
36392: PUSH
36393: FOR_DOWNTO
36394: IFFALSE 36478
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36396: LD_ADDR_VAR 0 6
36400: PUSH
36401: LD_VAR 0 7
36405: PUSH
36406: LD_VAR 0 5
36410: PUSH
36411: LD_INT 1
36413: MINUS
36414: ARRAY
36415: PPUSH
36416: LD_VAR 0 2
36420: PUSH
36421: LD_VAR 0 5
36425: PUSH
36426: LD_INT 1
36428: MINUS
36429: ARRAY
36430: PPUSH
36431: LD_VAR 0 7
36435: PUSH
36436: LD_VAR 0 5
36440: ARRAY
36441: PPUSH
36442: CALL_OW 1
36446: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36447: LD_ADDR_VAR 0 7
36451: PUSH
36452: LD_VAR 0 7
36456: PPUSH
36457: LD_VAR 0 5
36461: PUSH
36462: LD_INT 1
36464: MINUS
36465: PPUSH
36466: LD_VAR 0 6
36470: PPUSH
36471: CALL_OW 1
36475: ST_TO_ADDR
// end ;
36476: GO 36393
36478: POP
36479: POP
// result := s_arr [ 1 ] ;
36480: LD_ADDR_VAR 0 4
36484: PUSH
36485: LD_VAR 0 7
36489: PUSH
36490: LD_INT 1
36492: ARRAY
36493: ST_TO_ADDR
// end ; end ;
36494: LD_VAR 0 4
36498: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36499: LD_INT 0
36501: PPUSH
36502: PPUSH
// if not list then
36503: LD_VAR 0 1
36507: NOT
36508: IFFALSE 36512
// exit ;
36510: GO 36603
// i := list [ pos1 ] ;
36512: LD_ADDR_VAR 0 5
36516: PUSH
36517: LD_VAR 0 1
36521: PUSH
36522: LD_VAR 0 2
36526: ARRAY
36527: ST_TO_ADDR
// if not i then
36528: LD_VAR 0 5
36532: NOT
36533: IFFALSE 36537
// exit ;
36535: GO 36603
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36537: LD_ADDR_VAR 0 1
36541: PUSH
36542: LD_VAR 0 1
36546: PPUSH
36547: LD_VAR 0 2
36551: PPUSH
36552: LD_VAR 0 1
36556: PUSH
36557: LD_VAR 0 3
36561: ARRAY
36562: PPUSH
36563: CALL_OW 1
36567: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36568: LD_ADDR_VAR 0 1
36572: PUSH
36573: LD_VAR 0 1
36577: PPUSH
36578: LD_VAR 0 3
36582: PPUSH
36583: LD_VAR 0 5
36587: PPUSH
36588: CALL_OW 1
36592: ST_TO_ADDR
// result := list ;
36593: LD_ADDR_VAR 0 4
36597: PUSH
36598: LD_VAR 0 1
36602: ST_TO_ADDR
// end ;
36603: LD_VAR 0 4
36607: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36608: LD_INT 0
36610: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36611: LD_ADDR_VAR 0 5
36615: PUSH
36616: LD_VAR 0 1
36620: PPUSH
36621: CALL_OW 250
36625: PPUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 251
36635: PPUSH
36636: LD_VAR 0 2
36640: PPUSH
36641: LD_VAR 0 3
36645: PPUSH
36646: LD_VAR 0 4
36650: PPUSH
36651: CALL 36661 0 5
36655: ST_TO_ADDR
// end ;
36656: LD_VAR 0 5
36660: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36661: LD_INT 0
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
// if not list then
36667: LD_VAR 0 3
36671: NOT
36672: IFFALSE 36676
// exit ;
36674: GO 37064
// result := [ ] ;
36676: LD_ADDR_VAR 0 6
36680: PUSH
36681: EMPTY
36682: ST_TO_ADDR
// for i in list do
36683: LD_ADDR_VAR 0 7
36687: PUSH
36688: LD_VAR 0 3
36692: PUSH
36693: FOR_IN
36694: IFFALSE 36896
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36696: LD_ADDR_VAR 0 9
36700: PUSH
36701: LD_VAR 0 7
36705: PPUSH
36706: LD_VAR 0 1
36710: PPUSH
36711: LD_VAR 0 2
36715: PPUSH
36716: CALL_OW 297
36720: ST_TO_ADDR
// if not result then
36721: LD_VAR 0 6
36725: NOT
36726: IFFALSE 36752
// result := [ [ i , tmp ] ] else
36728: LD_ADDR_VAR 0 6
36732: PUSH
36733: LD_VAR 0 7
36737: PUSH
36738: LD_VAR 0 9
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: ST_TO_ADDR
36750: GO 36894
// begin if result [ result ] [ 2 ] < tmp then
36752: LD_VAR 0 6
36756: PUSH
36757: LD_VAR 0 6
36761: ARRAY
36762: PUSH
36763: LD_INT 2
36765: ARRAY
36766: PUSH
36767: LD_VAR 0 9
36771: LESS
36772: IFFALSE 36814
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36774: LD_ADDR_VAR 0 6
36778: PUSH
36779: LD_VAR 0 6
36783: PPUSH
36784: LD_VAR 0 6
36788: PUSH
36789: LD_INT 1
36791: PLUS
36792: PPUSH
36793: LD_VAR 0 7
36797: PUSH
36798: LD_VAR 0 9
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PPUSH
36807: CALL_OW 2
36811: ST_TO_ADDR
36812: GO 36894
// for j = 1 to result do
36814: LD_ADDR_VAR 0 8
36818: PUSH
36819: DOUBLE
36820: LD_INT 1
36822: DEC
36823: ST_TO_ADDR
36824: LD_VAR 0 6
36828: PUSH
36829: FOR_TO
36830: IFFALSE 36892
// begin if tmp < result [ j ] [ 2 ] then
36832: LD_VAR 0 9
36836: PUSH
36837: LD_VAR 0 6
36841: PUSH
36842: LD_VAR 0 8
36846: ARRAY
36847: PUSH
36848: LD_INT 2
36850: ARRAY
36851: LESS
36852: IFFALSE 36890
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36854: LD_ADDR_VAR 0 6
36858: PUSH
36859: LD_VAR 0 6
36863: PPUSH
36864: LD_VAR 0 8
36868: PPUSH
36869: LD_VAR 0 7
36873: PUSH
36874: LD_VAR 0 9
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PPUSH
36883: CALL_OW 2
36887: ST_TO_ADDR
// break ;
36888: GO 36892
// end ; end ;
36890: GO 36829
36892: POP
36893: POP
// end ; end ;
36894: GO 36693
36896: POP
36897: POP
// if result and not asc then
36898: LD_VAR 0 6
36902: PUSH
36903: LD_VAR 0 4
36907: NOT
36908: AND
36909: IFFALSE 36984
// begin tmp := result ;
36911: LD_ADDR_VAR 0 9
36915: PUSH
36916: LD_VAR 0 6
36920: ST_TO_ADDR
// for i = tmp downto 1 do
36921: LD_ADDR_VAR 0 7
36925: PUSH
36926: DOUBLE
36927: LD_VAR 0 9
36931: INC
36932: ST_TO_ADDR
36933: LD_INT 1
36935: PUSH
36936: FOR_DOWNTO
36937: IFFALSE 36982
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36939: LD_ADDR_VAR 0 6
36943: PUSH
36944: LD_VAR 0 6
36948: PPUSH
36949: LD_VAR 0 9
36953: PUSH
36954: LD_VAR 0 7
36958: MINUS
36959: PUSH
36960: LD_INT 1
36962: PLUS
36963: PPUSH
36964: LD_VAR 0 9
36968: PUSH
36969: LD_VAR 0 7
36973: ARRAY
36974: PPUSH
36975: CALL_OW 1
36979: ST_TO_ADDR
36980: GO 36936
36982: POP
36983: POP
// end ; tmp := [ ] ;
36984: LD_ADDR_VAR 0 9
36988: PUSH
36989: EMPTY
36990: ST_TO_ADDR
// if mode then
36991: LD_VAR 0 5
36995: IFFALSE 37064
// begin for i = 1 to result do
36997: LD_ADDR_VAR 0 7
37001: PUSH
37002: DOUBLE
37003: LD_INT 1
37005: DEC
37006: ST_TO_ADDR
37007: LD_VAR 0 6
37011: PUSH
37012: FOR_TO
37013: IFFALSE 37052
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37015: LD_ADDR_VAR 0 9
37019: PUSH
37020: LD_VAR 0 9
37024: PPUSH
37025: LD_VAR 0 7
37029: PPUSH
37030: LD_VAR 0 6
37034: PUSH
37035: LD_VAR 0 7
37039: ARRAY
37040: PUSH
37041: LD_INT 1
37043: ARRAY
37044: PPUSH
37045: CALL_OW 1
37049: ST_TO_ADDR
37050: GO 37012
37052: POP
37053: POP
// result := tmp ;
37054: LD_ADDR_VAR 0 6
37058: PUSH
37059: LD_VAR 0 9
37063: ST_TO_ADDR
// end ; end ;
37064: LD_VAR 0 6
37068: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37069: LD_INT 0
37071: PPUSH
37072: PPUSH
37073: PPUSH
37074: PPUSH
37075: PPUSH
37076: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37077: LD_ADDR_VAR 0 5
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: ST_TO_ADDR
// if not x or not y then
37099: LD_VAR 0 2
37103: NOT
37104: PUSH
37105: LD_VAR 0 3
37109: NOT
37110: OR
37111: IFFALSE 37115
// exit ;
37113: GO 38765
// if not range then
37115: LD_VAR 0 4
37119: NOT
37120: IFFALSE 37130
// range := 10 ;
37122: LD_ADDR_VAR 0 4
37126: PUSH
37127: LD_INT 10
37129: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37130: LD_ADDR_VAR 0 8
37134: PUSH
37135: LD_INT 81
37137: PUSH
37138: LD_VAR 0 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 92
37149: PUSH
37150: LD_VAR 0 2
37154: PUSH
37155: LD_VAR 0 3
37159: PUSH
37160: LD_VAR 0 4
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 3
37173: PUSH
37174: LD_INT 21
37176: PUSH
37177: LD_INT 3
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: PPUSH
37193: CALL_OW 69
37197: ST_TO_ADDR
// if not tmp then
37198: LD_VAR 0 8
37202: NOT
37203: IFFALSE 37207
// exit ;
37205: GO 38765
// for i in tmp do
37207: LD_ADDR_VAR 0 6
37211: PUSH
37212: LD_VAR 0 8
37216: PUSH
37217: FOR_IN
37218: IFFALSE 38740
// begin points := [ 0 , 0 , 0 ] ;
37220: LD_ADDR_VAR 0 9
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: ST_TO_ADDR
// bpoints := 1 ;
37239: LD_ADDR_VAR 0 10
37243: PUSH
37244: LD_INT 1
37246: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37247: LD_VAR 0 6
37251: PPUSH
37252: CALL_OW 247
37256: PUSH
37257: LD_INT 1
37259: DOUBLE
37260: EQUAL
37261: IFTRUE 37265
37263: GO 37843
37265: POP
// begin if GetClass ( i ) = 1 then
37266: LD_VAR 0 6
37270: PPUSH
37271: CALL_OW 257
37275: PUSH
37276: LD_INT 1
37278: EQUAL
37279: IFFALSE 37300
// points := [ 10 , 5 , 3 ] ;
37281: LD_ADDR_VAR 0 9
37285: PUSH
37286: LD_INT 10
37288: PUSH
37289: LD_INT 5
37291: PUSH
37292: LD_INT 3
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37300: LD_VAR 0 6
37304: PPUSH
37305: CALL_OW 257
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: LD_INT 4
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: IN
37324: IFFALSE 37345
// points := [ 3 , 2 , 1 ] ;
37326: LD_ADDR_VAR 0 9
37330: PUSH
37331: LD_INT 3
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37345: LD_VAR 0 6
37349: PPUSH
37350: CALL_OW 257
37354: PUSH
37355: LD_INT 5
37357: EQUAL
37358: IFFALSE 37379
// points := [ 130 , 5 , 2 ] ;
37360: LD_ADDR_VAR 0 9
37364: PUSH
37365: LD_INT 130
37367: PUSH
37368: LD_INT 5
37370: PUSH
37371: LD_INT 2
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37379: LD_VAR 0 6
37383: PPUSH
37384: CALL_OW 257
37388: PUSH
37389: LD_INT 8
37391: EQUAL
37392: IFFALSE 37413
// points := [ 35 , 35 , 30 ] ;
37394: LD_ADDR_VAR 0 9
37398: PUSH
37399: LD_INT 35
37401: PUSH
37402: LD_INT 35
37404: PUSH
37405: LD_INT 30
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37413: LD_VAR 0 6
37417: PPUSH
37418: CALL_OW 257
37422: PUSH
37423: LD_INT 9
37425: EQUAL
37426: IFFALSE 37447
// points := [ 20 , 55 , 40 ] ;
37428: LD_ADDR_VAR 0 9
37432: PUSH
37433: LD_INT 20
37435: PUSH
37436: LD_INT 55
37438: PUSH
37439: LD_INT 40
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37447: LD_VAR 0 6
37451: PPUSH
37452: CALL_OW 257
37456: PUSH
37457: LD_INT 12
37459: PUSH
37460: LD_INT 16
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: IN
37467: IFFALSE 37488
// points := [ 5 , 3 , 2 ] ;
37469: LD_ADDR_VAR 0 9
37473: PUSH
37474: LD_INT 5
37476: PUSH
37477: LD_INT 3
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37488: LD_VAR 0 6
37492: PPUSH
37493: CALL_OW 257
37497: PUSH
37498: LD_INT 17
37500: EQUAL
37501: IFFALSE 37522
// points := [ 100 , 50 , 75 ] ;
37503: LD_ADDR_VAR 0 9
37507: PUSH
37508: LD_INT 100
37510: PUSH
37511: LD_INT 50
37513: PUSH
37514: LD_INT 75
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: LIST
37521: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37522: LD_VAR 0 6
37526: PPUSH
37527: CALL_OW 257
37531: PUSH
37532: LD_INT 15
37534: EQUAL
37535: IFFALSE 37556
// points := [ 10 , 5 , 3 ] ;
37537: LD_ADDR_VAR 0 9
37541: PUSH
37542: LD_INT 10
37544: PUSH
37545: LD_INT 5
37547: PUSH
37548: LD_INT 3
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: LIST
37555: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37556: LD_VAR 0 6
37560: PPUSH
37561: CALL_OW 257
37565: PUSH
37566: LD_INT 14
37568: EQUAL
37569: IFFALSE 37590
// points := [ 10 , 0 , 0 ] ;
37571: LD_ADDR_VAR 0 9
37575: PUSH
37576: LD_INT 10
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37590: LD_VAR 0 6
37594: PPUSH
37595: CALL_OW 257
37599: PUSH
37600: LD_INT 11
37602: EQUAL
37603: IFFALSE 37624
// points := [ 30 , 10 , 5 ] ;
37605: LD_ADDR_VAR 0 9
37609: PUSH
37610: LD_INT 30
37612: PUSH
37613: LD_INT 10
37615: PUSH
37616: LD_INT 5
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37624: LD_VAR 0 1
37628: PPUSH
37629: LD_INT 5
37631: PPUSH
37632: CALL_OW 321
37636: PUSH
37637: LD_INT 2
37639: EQUAL
37640: IFFALSE 37657
// bpoints := bpoints * 1.8 ;
37642: LD_ADDR_VAR 0 10
37646: PUSH
37647: LD_VAR 0 10
37651: PUSH
37652: LD_REAL  1.80000000000000E+0000
37655: MUL
37656: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37657: LD_VAR 0 6
37661: PPUSH
37662: CALL_OW 257
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 3
37675: PUSH
37676: LD_INT 4
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: IN
37685: PUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: LD_INT 51
37693: PPUSH
37694: CALL_OW 321
37698: PUSH
37699: LD_INT 2
37701: EQUAL
37702: AND
37703: IFFALSE 37720
// bpoints := bpoints * 1.2 ;
37705: LD_ADDR_VAR 0 10
37709: PUSH
37710: LD_VAR 0 10
37714: PUSH
37715: LD_REAL  1.20000000000000E+0000
37718: MUL
37719: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37720: LD_VAR 0 6
37724: PPUSH
37725: CALL_OW 257
37729: PUSH
37730: LD_INT 5
37732: PUSH
37733: LD_INT 7
37735: PUSH
37736: LD_INT 9
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: IN
37744: PUSH
37745: LD_VAR 0 1
37749: PPUSH
37750: LD_INT 52
37752: PPUSH
37753: CALL_OW 321
37757: PUSH
37758: LD_INT 2
37760: EQUAL
37761: AND
37762: IFFALSE 37779
// bpoints := bpoints * 1.5 ;
37764: LD_ADDR_VAR 0 10
37768: PUSH
37769: LD_VAR 0 10
37773: PUSH
37774: LD_REAL  1.50000000000000E+0000
37777: MUL
37778: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37779: LD_VAR 0 1
37783: PPUSH
37784: LD_INT 66
37786: PPUSH
37787: CALL_OW 321
37791: PUSH
37792: LD_INT 2
37794: EQUAL
37795: IFFALSE 37812
// bpoints := bpoints * 1.1 ;
37797: LD_ADDR_VAR 0 10
37801: PUSH
37802: LD_VAR 0 10
37806: PUSH
37807: LD_REAL  1.10000000000000E+0000
37810: MUL
37811: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37812: LD_ADDR_VAR 0 10
37816: PUSH
37817: LD_VAR 0 10
37821: PUSH
37822: LD_VAR 0 6
37826: PPUSH
37827: LD_INT 1
37829: PPUSH
37830: CALL_OW 259
37834: PUSH
37835: LD_REAL  1.15000000000000E+0000
37838: MUL
37839: MUL
37840: ST_TO_ADDR
// end ; unit_vehicle :
37841: GO 38669
37843: LD_INT 2
37845: DOUBLE
37846: EQUAL
37847: IFTRUE 37851
37849: GO 38657
37851: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37852: LD_VAR 0 6
37856: PPUSH
37857: CALL_OW 264
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: LD_INT 42
37867: PUSH
37868: LD_INT 24
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: LIST
37875: IN
37876: IFFALSE 37897
// points := [ 25 , 5 , 3 ] ;
37878: LD_ADDR_VAR 0 9
37882: PUSH
37883: LD_INT 25
37885: PUSH
37886: LD_INT 5
37888: PUSH
37889: LD_INT 3
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37897: LD_VAR 0 6
37901: PPUSH
37902: CALL_OW 264
37906: PUSH
37907: LD_INT 4
37909: PUSH
37910: LD_INT 43
37912: PUSH
37913: LD_INT 25
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: IN
37921: IFFALSE 37942
// points := [ 40 , 15 , 5 ] ;
37923: LD_ADDR_VAR 0 9
37927: PUSH
37928: LD_INT 40
37930: PUSH
37931: LD_INT 15
37933: PUSH
37934: LD_INT 5
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37942: LD_VAR 0 6
37946: PPUSH
37947: CALL_OW 264
37951: PUSH
37952: LD_INT 3
37954: PUSH
37955: LD_INT 23
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: IN
37962: IFFALSE 37983
// points := [ 7 , 25 , 8 ] ;
37964: LD_ADDR_VAR 0 9
37968: PUSH
37969: LD_INT 7
37971: PUSH
37972: LD_INT 25
37974: PUSH
37975: LD_INT 8
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37983: LD_VAR 0 6
37987: PPUSH
37988: CALL_OW 264
37992: PUSH
37993: LD_INT 5
37995: PUSH
37996: LD_INT 27
37998: PUSH
37999: LD_INT 44
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: LIST
38006: IN
38007: IFFALSE 38028
// points := [ 14 , 50 , 16 ] ;
38009: LD_ADDR_VAR 0 9
38013: PUSH
38014: LD_INT 14
38016: PUSH
38017: LD_INT 50
38019: PUSH
38020: LD_INT 16
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38028: LD_VAR 0 6
38032: PPUSH
38033: CALL_OW 264
38037: PUSH
38038: LD_INT 6
38040: PUSH
38041: LD_INT 46
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: IN
38048: IFFALSE 38069
// points := [ 32 , 120 , 70 ] ;
38050: LD_ADDR_VAR 0 9
38054: PUSH
38055: LD_INT 32
38057: PUSH
38058: LD_INT 120
38060: PUSH
38061: LD_INT 70
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38069: LD_VAR 0 6
38073: PPUSH
38074: CALL_OW 264
38078: PUSH
38079: LD_INT 7
38081: PUSH
38082: LD_INT 28
38084: PUSH
38085: LD_INT 45
38087: PUSH
38088: LD_INT 92
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: IN
38097: IFFALSE 38118
// points := [ 35 , 20 , 45 ] ;
38099: LD_ADDR_VAR 0 9
38103: PUSH
38104: LD_INT 35
38106: PUSH
38107: LD_INT 20
38109: PUSH
38110: LD_INT 45
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38118: LD_VAR 0 6
38122: PPUSH
38123: CALL_OW 264
38127: PUSH
38128: LD_INT 47
38130: PUSH
38131: EMPTY
38132: LIST
38133: IN
38134: IFFALSE 38155
// points := [ 67 , 45 , 75 ] ;
38136: LD_ADDR_VAR 0 9
38140: PUSH
38141: LD_INT 67
38143: PUSH
38144: LD_INT 45
38146: PUSH
38147: LD_INT 75
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: LIST
38154: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38155: LD_VAR 0 6
38159: PPUSH
38160: CALL_OW 264
38164: PUSH
38165: LD_INT 26
38167: PUSH
38168: EMPTY
38169: LIST
38170: IN
38171: IFFALSE 38192
// points := [ 120 , 30 , 80 ] ;
38173: LD_ADDR_VAR 0 9
38177: PUSH
38178: LD_INT 120
38180: PUSH
38181: LD_INT 30
38183: PUSH
38184: LD_INT 80
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38192: LD_VAR 0 6
38196: PPUSH
38197: CALL_OW 264
38201: PUSH
38202: LD_INT 22
38204: PUSH
38205: EMPTY
38206: LIST
38207: IN
38208: IFFALSE 38229
// points := [ 40 , 1 , 1 ] ;
38210: LD_ADDR_VAR 0 9
38214: PUSH
38215: LD_INT 40
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38229: LD_VAR 0 6
38233: PPUSH
38234: CALL_OW 264
38238: PUSH
38239: LD_INT 29
38241: PUSH
38242: EMPTY
38243: LIST
38244: IN
38245: IFFALSE 38266
// points := [ 70 , 200 , 400 ] ;
38247: LD_ADDR_VAR 0 9
38251: PUSH
38252: LD_INT 70
38254: PUSH
38255: LD_INT 200
38257: PUSH
38258: LD_INT 400
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38266: LD_VAR 0 6
38270: PPUSH
38271: CALL_OW 264
38275: PUSH
38276: LD_INT 14
38278: PUSH
38279: LD_INT 53
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: IN
38286: IFFALSE 38307
// points := [ 40 , 10 , 20 ] ;
38288: LD_ADDR_VAR 0 9
38292: PUSH
38293: LD_INT 40
38295: PUSH
38296: LD_INT 10
38298: PUSH
38299: LD_INT 20
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38307: LD_VAR 0 6
38311: PPUSH
38312: CALL_OW 264
38316: PUSH
38317: LD_INT 9
38319: PUSH
38320: EMPTY
38321: LIST
38322: IN
38323: IFFALSE 38344
// points := [ 5 , 70 , 20 ] ;
38325: LD_ADDR_VAR 0 9
38329: PUSH
38330: LD_INT 5
38332: PUSH
38333: LD_INT 70
38335: PUSH
38336: LD_INT 20
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: LIST
38343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38344: LD_VAR 0 6
38348: PPUSH
38349: CALL_OW 264
38353: PUSH
38354: LD_INT 10
38356: PUSH
38357: EMPTY
38358: LIST
38359: IN
38360: IFFALSE 38381
// points := [ 35 , 110 , 70 ] ;
38362: LD_ADDR_VAR 0 9
38366: PUSH
38367: LD_INT 35
38369: PUSH
38370: LD_INT 110
38372: PUSH
38373: LD_INT 70
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38381: LD_VAR 0 6
38385: PPUSH
38386: CALL_OW 265
38390: PUSH
38391: LD_INT 25
38393: EQUAL
38394: IFFALSE 38415
// points := [ 80 , 65 , 100 ] ;
38396: LD_ADDR_VAR 0 9
38400: PUSH
38401: LD_INT 80
38403: PUSH
38404: LD_INT 65
38406: PUSH
38407: LD_INT 100
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38415: LD_VAR 0 6
38419: PPUSH
38420: CALL_OW 263
38424: PUSH
38425: LD_INT 1
38427: EQUAL
38428: IFFALSE 38463
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38430: LD_ADDR_VAR 0 10
38434: PUSH
38435: LD_VAR 0 10
38439: PUSH
38440: LD_VAR 0 6
38444: PPUSH
38445: CALL_OW 311
38449: PPUSH
38450: LD_INT 3
38452: PPUSH
38453: CALL_OW 259
38457: PUSH
38458: LD_INT 4
38460: MUL
38461: MUL
38462: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38463: LD_VAR 0 6
38467: PPUSH
38468: CALL_OW 263
38472: PUSH
38473: LD_INT 2
38475: EQUAL
38476: IFFALSE 38527
// begin j := IsControledBy ( i ) ;
38478: LD_ADDR_VAR 0 7
38482: PUSH
38483: LD_VAR 0 6
38487: PPUSH
38488: CALL_OW 312
38492: ST_TO_ADDR
// if j then
38493: LD_VAR 0 7
38497: IFFALSE 38527
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38499: LD_ADDR_VAR 0 10
38503: PUSH
38504: LD_VAR 0 10
38508: PUSH
38509: LD_VAR 0 7
38513: PPUSH
38514: LD_INT 3
38516: PPUSH
38517: CALL_OW 259
38521: PUSH
38522: LD_INT 3
38524: MUL
38525: MUL
38526: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38527: LD_VAR 0 6
38531: PPUSH
38532: CALL_OW 264
38536: PUSH
38537: LD_INT 5
38539: PUSH
38540: LD_INT 6
38542: PUSH
38543: LD_INT 46
38545: PUSH
38546: LD_INT 44
38548: PUSH
38549: LD_INT 47
38551: PUSH
38552: LD_INT 45
38554: PUSH
38555: LD_INT 28
38557: PUSH
38558: LD_INT 7
38560: PUSH
38561: LD_INT 27
38563: PUSH
38564: LD_INT 29
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: IN
38579: PUSH
38580: LD_VAR 0 1
38584: PPUSH
38585: LD_INT 52
38587: PPUSH
38588: CALL_OW 321
38592: PUSH
38593: LD_INT 2
38595: EQUAL
38596: AND
38597: IFFALSE 38614
// bpoints := bpoints * 1.2 ;
38599: LD_ADDR_VAR 0 10
38603: PUSH
38604: LD_VAR 0 10
38608: PUSH
38609: LD_REAL  1.20000000000000E+0000
38612: MUL
38613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38614: LD_VAR 0 6
38618: PPUSH
38619: CALL_OW 264
38623: PUSH
38624: LD_INT 6
38626: PUSH
38627: LD_INT 46
38629: PUSH
38630: LD_INT 47
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: IN
38638: IFFALSE 38655
// bpoints := bpoints * 1.2 ;
38640: LD_ADDR_VAR 0 10
38644: PUSH
38645: LD_VAR 0 10
38649: PUSH
38650: LD_REAL  1.20000000000000E+0000
38653: MUL
38654: ST_TO_ADDR
// end ; unit_building :
38655: GO 38669
38657: LD_INT 3
38659: DOUBLE
38660: EQUAL
38661: IFTRUE 38665
38663: GO 38668
38665: POP
// ; end ;
38666: GO 38669
38668: POP
// for j = 1 to 3 do
38669: LD_ADDR_VAR 0 7
38673: PUSH
38674: DOUBLE
38675: LD_INT 1
38677: DEC
38678: ST_TO_ADDR
38679: LD_INT 3
38681: PUSH
38682: FOR_TO
38683: IFFALSE 38736
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38685: LD_ADDR_VAR 0 5
38689: PUSH
38690: LD_VAR 0 5
38694: PPUSH
38695: LD_VAR 0 7
38699: PPUSH
38700: LD_VAR 0 5
38704: PUSH
38705: LD_VAR 0 7
38709: ARRAY
38710: PUSH
38711: LD_VAR 0 9
38715: PUSH
38716: LD_VAR 0 7
38720: ARRAY
38721: PUSH
38722: LD_VAR 0 10
38726: MUL
38727: PLUS
38728: PPUSH
38729: CALL_OW 1
38733: ST_TO_ADDR
38734: GO 38682
38736: POP
38737: POP
// end ;
38738: GO 37217
38740: POP
38741: POP
// result := Replace ( result , 4 , tmp ) ;
38742: LD_ADDR_VAR 0 5
38746: PUSH
38747: LD_VAR 0 5
38751: PPUSH
38752: LD_INT 4
38754: PPUSH
38755: LD_VAR 0 8
38759: PPUSH
38760: CALL_OW 1
38764: ST_TO_ADDR
// end ;
38765: LD_VAR 0 5
38769: RET
// export function DangerAtRange ( unit , range ) ; begin
38770: LD_INT 0
38772: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38773: LD_ADDR_VAR 0 3
38777: PUSH
38778: LD_VAR 0 1
38782: PPUSH
38783: CALL_OW 255
38787: PPUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: CALL_OW 250
38797: PPUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 251
38807: PPUSH
38808: LD_VAR 0 2
38812: PPUSH
38813: CALL 37069 0 4
38817: ST_TO_ADDR
// end ;
38818: LD_VAR 0 3
38822: RET
// export function DangerInArea ( side , area ) ; begin
38823: LD_INT 0
38825: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38826: LD_ADDR_VAR 0 3
38830: PUSH
38831: LD_VAR 0 2
38835: PPUSH
38836: LD_INT 81
38838: PUSH
38839: LD_VAR 0 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PPUSH
38848: CALL_OW 70
38852: ST_TO_ADDR
// end ;
38853: LD_VAR 0 3
38857: RET
// export function IsExtension ( b ) ; begin
38858: LD_INT 0
38860: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38861: LD_ADDR_VAR 0 2
38865: PUSH
38866: LD_VAR 0 1
38870: PUSH
38871: LD_INT 23
38873: PUSH
38874: LD_INT 20
38876: PUSH
38877: LD_INT 22
38879: PUSH
38880: LD_INT 17
38882: PUSH
38883: LD_INT 24
38885: PUSH
38886: LD_INT 21
38888: PUSH
38889: LD_INT 19
38891: PUSH
38892: LD_INT 16
38894: PUSH
38895: LD_INT 25
38897: PUSH
38898: LD_INT 18
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: IN
38913: ST_TO_ADDR
// end ;
38914: LD_VAR 0 2
38918: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38919: LD_INT 0
38921: PPUSH
38922: PPUSH
38923: PPUSH
// result := [ ] ;
38924: LD_ADDR_VAR 0 4
38928: PUSH
38929: EMPTY
38930: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38931: LD_ADDR_VAR 0 5
38935: PUSH
38936: LD_VAR 0 2
38940: PPUSH
38941: LD_INT 21
38943: PUSH
38944: LD_INT 3
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PPUSH
38951: CALL_OW 70
38955: ST_TO_ADDR
// if not tmp then
38956: LD_VAR 0 5
38960: NOT
38961: IFFALSE 38965
// exit ;
38963: GO 39029
// if checkLink then
38965: LD_VAR 0 3
38969: IFFALSE 39019
// begin for i in tmp do
38971: LD_ADDR_VAR 0 6
38975: PUSH
38976: LD_VAR 0 5
38980: PUSH
38981: FOR_IN
38982: IFFALSE 39017
// if GetBase ( i ) <> base then
38984: LD_VAR 0 6
38988: PPUSH
38989: CALL_OW 274
38993: PUSH
38994: LD_VAR 0 1
38998: NONEQUAL
38999: IFFALSE 39015
// ComLinkToBase ( base , i ) ;
39001: LD_VAR 0 1
39005: PPUSH
39006: LD_VAR 0 6
39010: PPUSH
39011: CALL_OW 169
39015: GO 38981
39017: POP
39018: POP
// end ; result := tmp ;
39019: LD_ADDR_VAR 0 4
39023: PUSH
39024: LD_VAR 0 5
39028: ST_TO_ADDR
// end ;
39029: LD_VAR 0 4
39033: RET
// export function ComComplete ( units , b ) ; var i ; begin
39034: LD_INT 0
39036: PPUSH
39037: PPUSH
// if not units then
39038: LD_VAR 0 1
39042: NOT
39043: IFFALSE 39047
// exit ;
39045: GO 39137
// for i in units do
39047: LD_ADDR_VAR 0 4
39051: PUSH
39052: LD_VAR 0 1
39056: PUSH
39057: FOR_IN
39058: IFFALSE 39135
// if BuildingStatus ( b ) = bs_build then
39060: LD_VAR 0 2
39064: PPUSH
39065: CALL_OW 461
39069: PUSH
39070: LD_INT 1
39072: EQUAL
39073: IFFALSE 39133
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39075: LD_VAR 0 4
39079: PPUSH
39080: LD_STRING h
39082: PUSH
39083: LD_VAR 0 2
39087: PPUSH
39088: CALL_OW 250
39092: PUSH
39093: LD_VAR 0 2
39097: PPUSH
39098: CALL_OW 251
39102: PUSH
39103: LD_VAR 0 2
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: PUSH
39126: EMPTY
39127: LIST
39128: PPUSH
39129: CALL_OW 446
39133: GO 39057
39135: POP
39136: POP
// end ;
39137: LD_VAR 0 3
39141: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39142: LD_INT 0
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39150: LD_VAR 0 1
39154: NOT
39155: PUSH
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 263
39165: PUSH
39166: LD_INT 2
39168: NONEQUAL
39169: OR
39170: IFFALSE 39174
// exit ;
39172: GO 39490
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39174: LD_ADDR_VAR 0 6
39178: PUSH
39179: LD_INT 22
39181: PUSH
39182: LD_VAR 0 1
39186: PPUSH
39187: CALL_OW 255
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: LD_INT 30
39201: PUSH
39202: LD_INT 36
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 34
39211: PUSH
39212: LD_INT 31
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PPUSH
39228: CALL_OW 69
39232: ST_TO_ADDR
// if not tmp then
39233: LD_VAR 0 6
39237: NOT
39238: IFFALSE 39242
// exit ;
39240: GO 39490
// result := [ ] ;
39242: LD_ADDR_VAR 0 2
39246: PUSH
39247: EMPTY
39248: ST_TO_ADDR
// for i in tmp do
39249: LD_ADDR_VAR 0 3
39253: PUSH
39254: LD_VAR 0 6
39258: PUSH
39259: FOR_IN
39260: IFFALSE 39331
// begin t := UnitsInside ( i ) ;
39262: LD_ADDR_VAR 0 4
39266: PUSH
39267: LD_VAR 0 3
39271: PPUSH
39272: CALL_OW 313
39276: ST_TO_ADDR
// if t then
39277: LD_VAR 0 4
39281: IFFALSE 39329
// for j in t do
39283: LD_ADDR_VAR 0 7
39287: PUSH
39288: LD_VAR 0 4
39292: PUSH
39293: FOR_IN
39294: IFFALSE 39327
// result := Replace ( result , result + 1 , j ) ;
39296: LD_ADDR_VAR 0 2
39300: PUSH
39301: LD_VAR 0 2
39305: PPUSH
39306: LD_VAR 0 2
39310: PUSH
39311: LD_INT 1
39313: PLUS
39314: PPUSH
39315: LD_VAR 0 7
39319: PPUSH
39320: CALL_OW 1
39324: ST_TO_ADDR
39325: GO 39293
39327: POP
39328: POP
// end ;
39329: GO 39259
39331: POP
39332: POP
// if not result then
39333: LD_VAR 0 2
39337: NOT
39338: IFFALSE 39342
// exit ;
39340: GO 39490
// mech := result [ 1 ] ;
39342: LD_ADDR_VAR 0 5
39346: PUSH
39347: LD_VAR 0 2
39351: PUSH
39352: LD_INT 1
39354: ARRAY
39355: ST_TO_ADDR
// if result > 1 then
39356: LD_VAR 0 2
39360: PUSH
39361: LD_INT 1
39363: GREATER
39364: IFFALSE 39476
// begin for i = 2 to result do
39366: LD_ADDR_VAR 0 3
39370: PUSH
39371: DOUBLE
39372: LD_INT 2
39374: DEC
39375: ST_TO_ADDR
39376: LD_VAR 0 2
39380: PUSH
39381: FOR_TO
39382: IFFALSE 39474
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39384: LD_ADDR_VAR 0 4
39388: PUSH
39389: LD_VAR 0 2
39393: PUSH
39394: LD_VAR 0 3
39398: ARRAY
39399: PPUSH
39400: LD_INT 3
39402: PPUSH
39403: CALL_OW 259
39407: PUSH
39408: LD_VAR 0 2
39412: PUSH
39413: LD_VAR 0 3
39417: ARRAY
39418: PPUSH
39419: CALL_OW 432
39423: MINUS
39424: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39425: LD_VAR 0 4
39429: PUSH
39430: LD_VAR 0 5
39434: PPUSH
39435: LD_INT 3
39437: PPUSH
39438: CALL_OW 259
39442: PUSH
39443: LD_VAR 0 5
39447: PPUSH
39448: CALL_OW 432
39452: MINUS
39453: GREATEREQUAL
39454: IFFALSE 39472
// mech := result [ i ] ;
39456: LD_ADDR_VAR 0 5
39460: PUSH
39461: LD_VAR 0 2
39465: PUSH
39466: LD_VAR 0 3
39470: ARRAY
39471: ST_TO_ADDR
// end ;
39472: GO 39381
39474: POP
39475: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39476: LD_VAR 0 1
39480: PPUSH
39481: LD_VAR 0 5
39485: PPUSH
39486: CALL_OW 135
// end ;
39490: LD_VAR 0 2
39494: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39495: LD_INT 0
39497: PPUSH
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
39508: PPUSH
39509: PPUSH
// result := [ ] ;
39510: LD_ADDR_VAR 0 7
39514: PUSH
39515: EMPTY
39516: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39517: LD_VAR 0 1
39521: PPUSH
39522: CALL_OW 266
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: IN
39537: NOT
39538: IFFALSE 39542
// exit ;
39540: GO 41176
// if name then
39542: LD_VAR 0 3
39546: IFFALSE 39562
// SetBName ( base_dep , name ) ;
39548: LD_VAR 0 1
39552: PPUSH
39553: LD_VAR 0 3
39557: PPUSH
39558: CALL_OW 500
// base := GetBase ( base_dep ) ;
39562: LD_ADDR_VAR 0 15
39566: PUSH
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL_OW 274
39576: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39577: LD_ADDR_VAR 0 16
39581: PUSH
39582: LD_VAR 0 1
39586: PPUSH
39587: CALL_OW 255
39591: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39592: LD_ADDR_VAR 0 17
39596: PUSH
39597: LD_VAR 0 1
39601: PPUSH
39602: CALL_OW 248
39606: ST_TO_ADDR
// if sources then
39607: LD_VAR 0 5
39611: IFFALSE 39658
// for i = 1 to 3 do
39613: LD_ADDR_VAR 0 8
39617: PUSH
39618: DOUBLE
39619: LD_INT 1
39621: DEC
39622: ST_TO_ADDR
39623: LD_INT 3
39625: PUSH
39626: FOR_TO
39627: IFFALSE 39656
// AddResourceType ( base , i , sources [ i ] ) ;
39629: LD_VAR 0 15
39633: PPUSH
39634: LD_VAR 0 8
39638: PPUSH
39639: LD_VAR 0 5
39643: PUSH
39644: LD_VAR 0 8
39648: ARRAY
39649: PPUSH
39650: CALL_OW 276
39654: GO 39626
39656: POP
39657: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39658: LD_ADDR_VAR 0 18
39662: PUSH
39663: LD_VAR 0 15
39667: PPUSH
39668: LD_VAR 0 2
39672: PPUSH
39673: LD_INT 1
39675: PPUSH
39676: CALL 38919 0 3
39680: ST_TO_ADDR
// InitHc ;
39681: CALL_OW 19
// InitUc ;
39685: CALL_OW 18
// uc_side := side ;
39689: LD_ADDR_OWVAR 20
39693: PUSH
39694: LD_VAR 0 16
39698: ST_TO_ADDR
// uc_nation := nation ;
39699: LD_ADDR_OWVAR 21
39703: PUSH
39704: LD_VAR 0 17
39708: ST_TO_ADDR
// if buildings then
39709: LD_VAR 0 18
39713: IFFALSE 41035
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39715: LD_ADDR_VAR 0 19
39719: PUSH
39720: LD_VAR 0 18
39724: PPUSH
39725: LD_INT 2
39727: PUSH
39728: LD_INT 30
39730: PUSH
39731: LD_INT 29
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 30
39740: PUSH
39741: LD_INT 30
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: LIST
39752: PPUSH
39753: CALL_OW 72
39757: ST_TO_ADDR
// if tmp then
39758: LD_VAR 0 19
39762: IFFALSE 39810
// for i in tmp do
39764: LD_ADDR_VAR 0 8
39768: PUSH
39769: LD_VAR 0 19
39773: PUSH
39774: FOR_IN
39775: IFFALSE 39808
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39777: LD_VAR 0 8
39781: PPUSH
39782: CALL_OW 250
39786: PPUSH
39787: LD_VAR 0 8
39791: PPUSH
39792: CALL_OW 251
39796: PPUSH
39797: LD_VAR 0 16
39801: PPUSH
39802: CALL_OW 441
39806: GO 39774
39808: POP
39809: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39810: LD_VAR 0 18
39814: PPUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 30
39820: PUSH
39821: LD_INT 32
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 30
39830: PUSH
39831: LD_INT 33
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: LIST
39842: PPUSH
39843: CALL_OW 72
39847: IFFALSE 39935
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39849: LD_ADDR_VAR 0 8
39853: PUSH
39854: LD_VAR 0 18
39858: PPUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 30
39864: PUSH
39865: LD_INT 32
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 30
39874: PUSH
39875: LD_INT 33
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: PPUSH
39887: CALL_OW 72
39891: PUSH
39892: FOR_IN
39893: IFFALSE 39933
// begin if not GetBWeapon ( i ) then
39895: LD_VAR 0 8
39899: PPUSH
39900: CALL_OW 269
39904: NOT
39905: IFFALSE 39931
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39907: LD_VAR 0 8
39911: PPUSH
39912: LD_VAR 0 8
39916: PPUSH
39917: LD_VAR 0 2
39921: PPUSH
39922: CALL 41181 0 2
39926: PPUSH
39927: CALL_OW 431
// end ;
39931: GO 39892
39933: POP
39934: POP
// end ; for i = 1 to personel do
39935: LD_ADDR_VAR 0 8
39939: PUSH
39940: DOUBLE
39941: LD_INT 1
39943: DEC
39944: ST_TO_ADDR
39945: LD_VAR 0 6
39949: PUSH
39950: FOR_TO
39951: IFFALSE 41015
// begin if i > 4 then
39953: LD_VAR 0 8
39957: PUSH
39958: LD_INT 4
39960: GREATER
39961: IFFALSE 39965
// break ;
39963: GO 41015
// case i of 1 :
39965: LD_VAR 0 8
39969: PUSH
39970: LD_INT 1
39972: DOUBLE
39973: EQUAL
39974: IFTRUE 39978
39976: GO 40058
39978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39979: LD_ADDR_VAR 0 12
39983: PUSH
39984: LD_VAR 0 18
39988: PPUSH
39989: LD_INT 22
39991: PUSH
39992: LD_VAR 0 16
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 58
40003: PUSH
40004: EMPTY
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: LD_INT 30
40012: PUSH
40013: LD_INT 32
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 30
40022: PUSH
40023: LD_INT 4
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 30
40032: PUSH
40033: LD_INT 5
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: PPUSH
40051: CALL_OW 72
40055: ST_TO_ADDR
40056: GO 40280
40058: LD_INT 2
40060: DOUBLE
40061: EQUAL
40062: IFTRUE 40066
40064: GO 40128
40066: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40067: LD_ADDR_VAR 0 12
40071: PUSH
40072: LD_VAR 0 18
40076: PPUSH
40077: LD_INT 22
40079: PUSH
40080: LD_VAR 0 16
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 30
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 30
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PPUSH
40121: CALL_OW 72
40125: ST_TO_ADDR
40126: GO 40280
40128: LD_INT 3
40130: DOUBLE
40131: EQUAL
40132: IFTRUE 40136
40134: GO 40198
40136: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40137: LD_ADDR_VAR 0 12
40141: PUSH
40142: LD_VAR 0 18
40146: PPUSH
40147: LD_INT 22
40149: PUSH
40150: LD_VAR 0 16
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 30
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 30
40174: PUSH
40175: LD_INT 3
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PPUSH
40191: CALL_OW 72
40195: ST_TO_ADDR
40196: GO 40280
40198: LD_INT 4
40200: DOUBLE
40201: EQUAL
40202: IFTRUE 40206
40204: GO 40279
40206: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40207: LD_ADDR_VAR 0 12
40211: PUSH
40212: LD_VAR 0 18
40216: PPUSH
40217: LD_INT 22
40219: PUSH
40220: LD_VAR 0 16
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: LD_INT 30
40234: PUSH
40235: LD_INT 6
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 30
40244: PUSH
40245: LD_INT 7
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 30
40254: PUSH
40255: LD_INT 8
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PPUSH
40272: CALL_OW 72
40276: ST_TO_ADDR
40277: GO 40280
40279: POP
// if i = 1 then
40280: LD_VAR 0 8
40284: PUSH
40285: LD_INT 1
40287: EQUAL
40288: IFFALSE 40399
// begin tmp := [ ] ;
40290: LD_ADDR_VAR 0 19
40294: PUSH
40295: EMPTY
40296: ST_TO_ADDR
// for j in f do
40297: LD_ADDR_VAR 0 9
40301: PUSH
40302: LD_VAR 0 12
40306: PUSH
40307: FOR_IN
40308: IFFALSE 40381
// if GetBType ( j ) = b_bunker then
40310: LD_VAR 0 9
40314: PPUSH
40315: CALL_OW 266
40319: PUSH
40320: LD_INT 32
40322: EQUAL
40323: IFFALSE 40350
// tmp := Insert ( tmp , 1 , j ) else
40325: LD_ADDR_VAR 0 19
40329: PUSH
40330: LD_VAR 0 19
40334: PPUSH
40335: LD_INT 1
40337: PPUSH
40338: LD_VAR 0 9
40342: PPUSH
40343: CALL_OW 2
40347: ST_TO_ADDR
40348: GO 40379
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40350: LD_ADDR_VAR 0 19
40354: PUSH
40355: LD_VAR 0 19
40359: PPUSH
40360: LD_VAR 0 19
40364: PUSH
40365: LD_INT 1
40367: PLUS
40368: PPUSH
40369: LD_VAR 0 9
40373: PPUSH
40374: CALL_OW 2
40378: ST_TO_ADDR
40379: GO 40307
40381: POP
40382: POP
// if tmp then
40383: LD_VAR 0 19
40387: IFFALSE 40399
// f := tmp ;
40389: LD_ADDR_VAR 0 12
40393: PUSH
40394: LD_VAR 0 19
40398: ST_TO_ADDR
// end ; x := personel [ i ] ;
40399: LD_ADDR_VAR 0 13
40403: PUSH
40404: LD_VAR 0 6
40408: PUSH
40409: LD_VAR 0 8
40413: ARRAY
40414: ST_TO_ADDR
// if x = - 1 then
40415: LD_VAR 0 13
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: EQUAL
40424: IFFALSE 40633
// begin for j in f do
40426: LD_ADDR_VAR 0 9
40430: PUSH
40431: LD_VAR 0 12
40435: PUSH
40436: FOR_IN
40437: IFFALSE 40629
// repeat InitHc ;
40439: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40443: LD_VAR 0 9
40447: PPUSH
40448: CALL_OW 266
40452: PUSH
40453: LD_INT 5
40455: EQUAL
40456: IFFALSE 40526
// begin if UnitsInside ( j ) < 3 then
40458: LD_VAR 0 9
40462: PPUSH
40463: CALL_OW 313
40467: PUSH
40468: LD_INT 3
40470: LESS
40471: IFFALSE 40507
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40473: LD_INT 0
40475: PPUSH
40476: LD_INT 5
40478: PUSH
40479: LD_INT 8
40481: PUSH
40482: LD_INT 9
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: LIST
40489: PUSH
40490: LD_VAR 0 17
40494: ARRAY
40495: PPUSH
40496: LD_VAR 0 4
40500: PPUSH
40501: CALL_OW 380
40505: GO 40524
// PrepareHuman ( false , i , skill ) ;
40507: LD_INT 0
40509: PPUSH
40510: LD_VAR 0 8
40514: PPUSH
40515: LD_VAR 0 4
40519: PPUSH
40520: CALL_OW 380
// end else
40524: GO 40543
// PrepareHuman ( false , i , skill ) ;
40526: LD_INT 0
40528: PPUSH
40529: LD_VAR 0 8
40533: PPUSH
40534: LD_VAR 0 4
40538: PPUSH
40539: CALL_OW 380
// un := CreateHuman ;
40543: LD_ADDR_VAR 0 14
40547: PUSH
40548: CALL_OW 44
40552: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40553: LD_ADDR_VAR 0 7
40557: PUSH
40558: LD_VAR 0 7
40562: PPUSH
40563: LD_INT 1
40565: PPUSH
40566: LD_VAR 0 14
40570: PPUSH
40571: CALL_OW 2
40575: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40576: LD_VAR 0 14
40580: PPUSH
40581: LD_VAR 0 9
40585: PPUSH
40586: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40590: LD_VAR 0 9
40594: PPUSH
40595: CALL_OW 313
40599: PUSH
40600: LD_INT 6
40602: EQUAL
40603: PUSH
40604: LD_VAR 0 9
40608: PPUSH
40609: CALL_OW 266
40613: PUSH
40614: LD_INT 32
40616: PUSH
40617: LD_INT 31
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: IN
40624: OR
40625: IFFALSE 40439
40627: GO 40436
40629: POP
40630: POP
// end else
40631: GO 41013
// for j = 1 to x do
40633: LD_ADDR_VAR 0 9
40637: PUSH
40638: DOUBLE
40639: LD_INT 1
40641: DEC
40642: ST_TO_ADDR
40643: LD_VAR 0 13
40647: PUSH
40648: FOR_TO
40649: IFFALSE 41011
// begin InitHc ;
40651: CALL_OW 19
// if not f then
40655: LD_VAR 0 12
40659: NOT
40660: IFFALSE 40749
// begin PrepareHuman ( false , i , skill ) ;
40662: LD_INT 0
40664: PPUSH
40665: LD_VAR 0 8
40669: PPUSH
40670: LD_VAR 0 4
40674: PPUSH
40675: CALL_OW 380
// un := CreateHuman ;
40679: LD_ADDR_VAR 0 14
40683: PUSH
40684: CALL_OW 44
40688: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40689: LD_ADDR_VAR 0 7
40693: PUSH
40694: LD_VAR 0 7
40698: PPUSH
40699: LD_INT 1
40701: PPUSH
40702: LD_VAR 0 14
40706: PPUSH
40707: CALL_OW 2
40711: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40712: LD_VAR 0 14
40716: PPUSH
40717: LD_VAR 0 1
40721: PPUSH
40722: CALL_OW 250
40726: PPUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 251
40736: PPUSH
40737: LD_INT 10
40739: PPUSH
40740: LD_INT 0
40742: PPUSH
40743: CALL_OW 50
// continue ;
40747: GO 40648
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40749: LD_VAR 0 12
40753: PUSH
40754: LD_INT 1
40756: ARRAY
40757: PPUSH
40758: CALL_OW 313
40762: PUSH
40763: LD_VAR 0 12
40767: PUSH
40768: LD_INT 1
40770: ARRAY
40771: PPUSH
40772: CALL_OW 266
40776: PUSH
40777: LD_INT 32
40779: PUSH
40780: LD_INT 31
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: IN
40787: AND
40788: PUSH
40789: LD_VAR 0 12
40793: PUSH
40794: LD_INT 1
40796: ARRAY
40797: PPUSH
40798: CALL_OW 313
40802: PUSH
40803: LD_INT 6
40805: EQUAL
40806: OR
40807: IFFALSE 40827
// f := Delete ( f , 1 ) ;
40809: LD_ADDR_VAR 0 12
40813: PUSH
40814: LD_VAR 0 12
40818: PPUSH
40819: LD_INT 1
40821: PPUSH
40822: CALL_OW 3
40826: ST_TO_ADDR
// if not f then
40827: LD_VAR 0 12
40831: NOT
40832: IFFALSE 40850
// begin x := x + 2 ;
40834: LD_ADDR_VAR 0 13
40838: PUSH
40839: LD_VAR 0 13
40843: PUSH
40844: LD_INT 2
40846: PLUS
40847: ST_TO_ADDR
// continue ;
40848: GO 40648
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40850: LD_VAR 0 12
40854: PUSH
40855: LD_INT 1
40857: ARRAY
40858: PPUSH
40859: CALL_OW 266
40863: PUSH
40864: LD_INT 5
40866: EQUAL
40867: IFFALSE 40941
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40869: LD_VAR 0 12
40873: PUSH
40874: LD_INT 1
40876: ARRAY
40877: PPUSH
40878: CALL_OW 313
40882: PUSH
40883: LD_INT 3
40885: LESS
40886: IFFALSE 40922
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40888: LD_INT 0
40890: PPUSH
40891: LD_INT 5
40893: PUSH
40894: LD_INT 8
40896: PUSH
40897: LD_INT 9
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: LIST
40904: PUSH
40905: LD_VAR 0 17
40909: ARRAY
40910: PPUSH
40911: LD_VAR 0 4
40915: PPUSH
40916: CALL_OW 380
40920: GO 40939
// PrepareHuman ( false , i , skill ) ;
40922: LD_INT 0
40924: PPUSH
40925: LD_VAR 0 8
40929: PPUSH
40930: LD_VAR 0 4
40934: PPUSH
40935: CALL_OW 380
// end else
40939: GO 40958
// PrepareHuman ( false , i , skill ) ;
40941: LD_INT 0
40943: PPUSH
40944: LD_VAR 0 8
40948: PPUSH
40949: LD_VAR 0 4
40953: PPUSH
40954: CALL_OW 380
// un := CreateHuman ;
40958: LD_ADDR_VAR 0 14
40962: PUSH
40963: CALL_OW 44
40967: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40968: LD_ADDR_VAR 0 7
40972: PUSH
40973: LD_VAR 0 7
40977: PPUSH
40978: LD_INT 1
40980: PPUSH
40981: LD_VAR 0 14
40985: PPUSH
40986: CALL_OW 2
40990: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40991: LD_VAR 0 14
40995: PPUSH
40996: LD_VAR 0 12
41000: PUSH
41001: LD_INT 1
41003: ARRAY
41004: PPUSH
41005: CALL_OW 52
// end ;
41009: GO 40648
41011: POP
41012: POP
// end ;
41013: GO 39950
41015: POP
41016: POP
// result := result ^ buildings ;
41017: LD_ADDR_VAR 0 7
41021: PUSH
41022: LD_VAR 0 7
41026: PUSH
41027: LD_VAR 0 18
41031: ADD
41032: ST_TO_ADDR
// end else
41033: GO 41176
// begin for i = 1 to personel do
41035: LD_ADDR_VAR 0 8
41039: PUSH
41040: DOUBLE
41041: LD_INT 1
41043: DEC
41044: ST_TO_ADDR
41045: LD_VAR 0 6
41049: PUSH
41050: FOR_TO
41051: IFFALSE 41174
// begin if i > 4 then
41053: LD_VAR 0 8
41057: PUSH
41058: LD_INT 4
41060: GREATER
41061: IFFALSE 41065
// break ;
41063: GO 41174
// x := personel [ i ] ;
41065: LD_ADDR_VAR 0 13
41069: PUSH
41070: LD_VAR 0 6
41074: PUSH
41075: LD_VAR 0 8
41079: ARRAY
41080: ST_TO_ADDR
// if x = - 1 then
41081: LD_VAR 0 13
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: EQUAL
41090: IFFALSE 41094
// continue ;
41092: GO 41050
// PrepareHuman ( false , i , skill ) ;
41094: LD_INT 0
41096: PPUSH
41097: LD_VAR 0 8
41101: PPUSH
41102: LD_VAR 0 4
41106: PPUSH
41107: CALL_OW 380
// un := CreateHuman ;
41111: LD_ADDR_VAR 0 14
41115: PUSH
41116: CALL_OW 44
41120: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41121: LD_VAR 0 14
41125: PPUSH
41126: LD_VAR 0 1
41130: PPUSH
41131: CALL_OW 250
41135: PPUSH
41136: LD_VAR 0 1
41140: PPUSH
41141: CALL_OW 251
41145: PPUSH
41146: LD_INT 10
41148: PPUSH
41149: LD_INT 0
41151: PPUSH
41152: CALL_OW 50
// result := result ^ un ;
41156: LD_ADDR_VAR 0 7
41160: PUSH
41161: LD_VAR 0 7
41165: PUSH
41166: LD_VAR 0 14
41170: ADD
41171: ST_TO_ADDR
// end ;
41172: GO 41050
41174: POP
41175: POP
// end ; end ;
41176: LD_VAR 0 7
41180: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41181: LD_INT 0
41183: PPUSH
41184: PPUSH
41185: PPUSH
41186: PPUSH
41187: PPUSH
41188: PPUSH
41189: PPUSH
41190: PPUSH
41191: PPUSH
41192: PPUSH
41193: PPUSH
41194: PPUSH
41195: PPUSH
41196: PPUSH
41197: PPUSH
41198: PPUSH
// result := false ;
41199: LD_ADDR_VAR 0 3
41203: PUSH
41204: LD_INT 0
41206: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41207: LD_VAR 0 1
41211: NOT
41212: PUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: CALL_OW 266
41222: PUSH
41223: LD_INT 32
41225: PUSH
41226: LD_INT 33
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: IN
41233: NOT
41234: OR
41235: IFFALSE 41239
// exit ;
41237: GO 42348
// nat := GetNation ( tower ) ;
41239: LD_ADDR_VAR 0 12
41243: PUSH
41244: LD_VAR 0 1
41248: PPUSH
41249: CALL_OW 248
41253: ST_TO_ADDR
// side := GetSide ( tower ) ;
41254: LD_ADDR_VAR 0 16
41258: PUSH
41259: LD_VAR 0 1
41263: PPUSH
41264: CALL_OW 255
41268: ST_TO_ADDR
// x := GetX ( tower ) ;
41269: LD_ADDR_VAR 0 10
41273: PUSH
41274: LD_VAR 0 1
41278: PPUSH
41279: CALL_OW 250
41283: ST_TO_ADDR
// y := GetY ( tower ) ;
41284: LD_ADDR_VAR 0 11
41288: PUSH
41289: LD_VAR 0 1
41293: PPUSH
41294: CALL_OW 251
41298: ST_TO_ADDR
// if not x or not y then
41299: LD_VAR 0 10
41303: NOT
41304: PUSH
41305: LD_VAR 0 11
41309: NOT
41310: OR
41311: IFFALSE 41315
// exit ;
41313: GO 42348
// weapon := 0 ;
41315: LD_ADDR_VAR 0 18
41319: PUSH
41320: LD_INT 0
41322: ST_TO_ADDR
// fac_list := [ ] ;
41323: LD_ADDR_VAR 0 17
41327: PUSH
41328: EMPTY
41329: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41330: LD_ADDR_VAR 0 6
41334: PUSH
41335: LD_VAR 0 1
41339: PPUSH
41340: CALL_OW 274
41344: PPUSH
41345: LD_VAR 0 2
41349: PPUSH
41350: LD_INT 0
41352: PPUSH
41353: CALL 38919 0 3
41357: PPUSH
41358: LD_INT 30
41360: PUSH
41361: LD_INT 3
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PPUSH
41368: CALL_OW 72
41372: ST_TO_ADDR
// if not factories then
41373: LD_VAR 0 6
41377: NOT
41378: IFFALSE 41382
// exit ;
41380: GO 42348
// for i in factories do
41382: LD_ADDR_VAR 0 8
41386: PUSH
41387: LD_VAR 0 6
41391: PUSH
41392: FOR_IN
41393: IFFALSE 41418
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41395: LD_ADDR_VAR 0 17
41399: PUSH
41400: LD_VAR 0 17
41404: PUSH
41405: LD_VAR 0 8
41409: PPUSH
41410: CALL_OW 478
41414: UNION
41415: ST_TO_ADDR
41416: GO 41392
41418: POP
41419: POP
// if not fac_list then
41420: LD_VAR 0 17
41424: NOT
41425: IFFALSE 41429
// exit ;
41427: GO 42348
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41429: LD_ADDR_VAR 0 5
41433: PUSH
41434: LD_INT 4
41436: PUSH
41437: LD_INT 5
41439: PUSH
41440: LD_INT 9
41442: PUSH
41443: LD_INT 10
41445: PUSH
41446: LD_INT 6
41448: PUSH
41449: LD_INT 7
41451: PUSH
41452: LD_INT 11
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 27
41466: PUSH
41467: LD_INT 28
41469: PUSH
41470: LD_INT 26
41472: PUSH
41473: LD_INT 30
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 43
41484: PUSH
41485: LD_INT 44
41487: PUSH
41488: LD_INT 46
41490: PUSH
41491: LD_INT 45
41493: PUSH
41494: LD_INT 47
41496: PUSH
41497: LD_INT 49
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: LIST
41512: PUSH
41513: LD_VAR 0 12
41517: ARRAY
41518: ST_TO_ADDR
// list := list isect fac_list ;
41519: LD_ADDR_VAR 0 5
41523: PUSH
41524: LD_VAR 0 5
41528: PUSH
41529: LD_VAR 0 17
41533: ISECT
41534: ST_TO_ADDR
// if not list then
41535: LD_VAR 0 5
41539: NOT
41540: IFFALSE 41544
// exit ;
41542: GO 42348
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41544: LD_VAR 0 12
41548: PUSH
41549: LD_INT 3
41551: EQUAL
41552: PUSH
41553: LD_INT 49
41555: PUSH
41556: LD_VAR 0 5
41560: IN
41561: AND
41562: PUSH
41563: LD_INT 31
41565: PPUSH
41566: LD_VAR 0 16
41570: PPUSH
41571: CALL_OW 321
41575: PUSH
41576: LD_INT 2
41578: EQUAL
41579: AND
41580: IFFALSE 41640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41582: LD_INT 22
41584: PUSH
41585: LD_VAR 0 16
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 35
41596: PUSH
41597: LD_INT 49
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 91
41606: PUSH
41607: LD_VAR 0 1
41611: PUSH
41612: LD_INT 10
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: LIST
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: PPUSH
41625: CALL_OW 69
41629: NOT
41630: IFFALSE 41640
// weapon := ru_time_lapser ;
41632: LD_ADDR_VAR 0 18
41636: PUSH
41637: LD_INT 49
41639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41640: LD_VAR 0 12
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: IN
41655: PUSH
41656: LD_INT 11
41658: PUSH
41659: LD_VAR 0 5
41663: IN
41664: PUSH
41665: LD_INT 30
41667: PUSH
41668: LD_VAR 0 5
41672: IN
41673: OR
41674: AND
41675: PUSH
41676: LD_INT 6
41678: PPUSH
41679: LD_VAR 0 16
41683: PPUSH
41684: CALL_OW 321
41688: PUSH
41689: LD_INT 2
41691: EQUAL
41692: AND
41693: IFFALSE 41858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41695: LD_INT 22
41697: PUSH
41698: LD_VAR 0 16
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: LD_INT 35
41712: PUSH
41713: LD_INT 11
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 35
41722: PUSH
41723: LD_INT 30
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 91
41737: PUSH
41738: LD_VAR 0 1
41742: PUSH
41743: LD_INT 18
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: LIST
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: LIST
41755: PPUSH
41756: CALL_OW 69
41760: NOT
41761: PUSH
41762: LD_INT 22
41764: PUSH
41765: LD_VAR 0 16
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: LD_INT 30
41779: PUSH
41780: LD_INT 32
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 30
41789: PUSH
41790: LD_INT 33
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 91
41804: PUSH
41805: LD_VAR 0 1
41809: PUSH
41810: LD_INT 12
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: PUSH
41823: EMPTY
41824: LIST
41825: PPUSH
41826: CALL_OW 69
41830: PUSH
41831: LD_INT 2
41833: GREATER
41834: AND
41835: IFFALSE 41858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41837: LD_ADDR_VAR 0 18
41841: PUSH
41842: LD_INT 11
41844: PUSH
41845: LD_INT 30
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_VAR 0 12
41856: ARRAY
41857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41858: LD_VAR 0 18
41862: NOT
41863: PUSH
41864: LD_INT 40
41866: PPUSH
41867: LD_VAR 0 16
41871: PPUSH
41872: CALL_OW 321
41876: PUSH
41877: LD_INT 2
41879: EQUAL
41880: AND
41881: PUSH
41882: LD_INT 7
41884: PUSH
41885: LD_VAR 0 5
41889: IN
41890: PUSH
41891: LD_INT 28
41893: PUSH
41894: LD_VAR 0 5
41898: IN
41899: OR
41900: PUSH
41901: LD_INT 45
41903: PUSH
41904: LD_VAR 0 5
41908: IN
41909: OR
41910: AND
41911: IFFALSE 42165
// begin hex := GetHexInfo ( x , y ) ;
41913: LD_ADDR_VAR 0 4
41917: PUSH
41918: LD_VAR 0 10
41922: PPUSH
41923: LD_VAR 0 11
41927: PPUSH
41928: CALL_OW 546
41932: ST_TO_ADDR
// if hex [ 1 ] then
41933: LD_VAR 0 4
41937: PUSH
41938: LD_INT 1
41940: ARRAY
41941: IFFALSE 41945
// exit ;
41943: GO 42348
// height := hex [ 2 ] ;
41945: LD_ADDR_VAR 0 15
41949: PUSH
41950: LD_VAR 0 4
41954: PUSH
41955: LD_INT 2
41957: ARRAY
41958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41959: LD_ADDR_VAR 0 14
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: LD_INT 3
41972: PUSH
41973: LD_INT 5
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: ST_TO_ADDR
// for i in tmp do
41982: LD_ADDR_VAR 0 8
41986: PUSH
41987: LD_VAR 0 14
41991: PUSH
41992: FOR_IN
41993: IFFALSE 42163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41995: LD_ADDR_VAR 0 9
41999: PUSH
42000: LD_VAR 0 10
42004: PPUSH
42005: LD_VAR 0 8
42009: PPUSH
42010: LD_INT 5
42012: PPUSH
42013: CALL_OW 272
42017: PUSH
42018: LD_VAR 0 11
42022: PPUSH
42023: LD_VAR 0 8
42027: PPUSH
42028: LD_INT 5
42030: PPUSH
42031: CALL_OW 273
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42040: LD_VAR 0 9
42044: PUSH
42045: LD_INT 1
42047: ARRAY
42048: PPUSH
42049: LD_VAR 0 9
42053: PUSH
42054: LD_INT 2
42056: ARRAY
42057: PPUSH
42058: CALL_OW 488
42062: IFFALSE 42161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42064: LD_ADDR_VAR 0 4
42068: PUSH
42069: LD_VAR 0 9
42073: PUSH
42074: LD_INT 1
42076: ARRAY
42077: PPUSH
42078: LD_VAR 0 9
42082: PUSH
42083: LD_INT 2
42085: ARRAY
42086: PPUSH
42087: CALL_OW 546
42091: ST_TO_ADDR
// if hex [ 1 ] then
42092: LD_VAR 0 4
42096: PUSH
42097: LD_INT 1
42099: ARRAY
42100: IFFALSE 42104
// continue ;
42102: GO 41992
// h := hex [ 2 ] ;
42104: LD_ADDR_VAR 0 13
42108: PUSH
42109: LD_VAR 0 4
42113: PUSH
42114: LD_INT 2
42116: ARRAY
42117: ST_TO_ADDR
// if h + 7 < height then
42118: LD_VAR 0 13
42122: PUSH
42123: LD_INT 7
42125: PLUS
42126: PUSH
42127: LD_VAR 0 15
42131: LESS
42132: IFFALSE 42161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42134: LD_ADDR_VAR 0 18
42138: PUSH
42139: LD_INT 7
42141: PUSH
42142: LD_INT 28
42144: PUSH
42145: LD_INT 45
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: LIST
42152: PUSH
42153: LD_VAR 0 12
42157: ARRAY
42158: ST_TO_ADDR
// break ;
42159: GO 42163
// end ; end ; end ;
42161: GO 41992
42163: POP
42164: POP
// end ; if not weapon then
42165: LD_VAR 0 18
42169: NOT
42170: IFFALSE 42230
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42172: LD_ADDR_VAR 0 5
42176: PUSH
42177: LD_VAR 0 5
42181: PUSH
42182: LD_INT 11
42184: PUSH
42185: LD_INT 30
42187: PUSH
42188: LD_INT 49
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: DIFF
42196: ST_TO_ADDR
// if not list then
42197: LD_VAR 0 5
42201: NOT
42202: IFFALSE 42206
// exit ;
42204: GO 42348
// weapon := list [ rand ( 1 , list ) ] ;
42206: LD_ADDR_VAR 0 18
42210: PUSH
42211: LD_VAR 0 5
42215: PUSH
42216: LD_INT 1
42218: PPUSH
42219: LD_VAR 0 5
42223: PPUSH
42224: CALL_OW 12
42228: ARRAY
42229: ST_TO_ADDR
// end ; if weapon then
42230: LD_VAR 0 18
42234: IFFALSE 42348
// begin tmp := CostOfWeapon ( weapon ) ;
42236: LD_ADDR_VAR 0 14
42240: PUSH
42241: LD_VAR 0 18
42245: PPUSH
42246: CALL_OW 451
42250: ST_TO_ADDR
// j := GetBase ( tower ) ;
42251: LD_ADDR_VAR 0 9
42255: PUSH
42256: LD_VAR 0 1
42260: PPUSH
42261: CALL_OW 274
42265: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42266: LD_VAR 0 9
42270: PPUSH
42271: LD_INT 1
42273: PPUSH
42274: CALL_OW 275
42278: PUSH
42279: LD_VAR 0 14
42283: PUSH
42284: LD_INT 1
42286: ARRAY
42287: GREATEREQUAL
42288: PUSH
42289: LD_VAR 0 9
42293: PPUSH
42294: LD_INT 2
42296: PPUSH
42297: CALL_OW 275
42301: PUSH
42302: LD_VAR 0 14
42306: PUSH
42307: LD_INT 2
42309: ARRAY
42310: GREATEREQUAL
42311: AND
42312: PUSH
42313: LD_VAR 0 9
42317: PPUSH
42318: LD_INT 3
42320: PPUSH
42321: CALL_OW 275
42325: PUSH
42326: LD_VAR 0 14
42330: PUSH
42331: LD_INT 3
42333: ARRAY
42334: GREATEREQUAL
42335: AND
42336: IFFALSE 42348
// result := weapon ;
42338: LD_ADDR_VAR 0 3
42342: PUSH
42343: LD_VAR 0 18
42347: ST_TO_ADDR
// end ; end ;
42348: LD_VAR 0 3
42352: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42353: LD_INT 0
42355: PPUSH
42356: PPUSH
// result := true ;
42357: LD_ADDR_VAR 0 3
42361: PUSH
42362: LD_INT 1
42364: ST_TO_ADDR
// if array1 = array2 then
42365: LD_VAR 0 1
42369: PUSH
42370: LD_VAR 0 2
42374: EQUAL
42375: IFFALSE 42435
// begin for i = 1 to array1 do
42377: LD_ADDR_VAR 0 4
42381: PUSH
42382: DOUBLE
42383: LD_INT 1
42385: DEC
42386: ST_TO_ADDR
42387: LD_VAR 0 1
42391: PUSH
42392: FOR_TO
42393: IFFALSE 42431
// if array1 [ i ] <> array2 [ i ] then
42395: LD_VAR 0 1
42399: PUSH
42400: LD_VAR 0 4
42404: ARRAY
42405: PUSH
42406: LD_VAR 0 2
42410: PUSH
42411: LD_VAR 0 4
42415: ARRAY
42416: NONEQUAL
42417: IFFALSE 42429
// begin result := false ;
42419: LD_ADDR_VAR 0 3
42423: PUSH
42424: LD_INT 0
42426: ST_TO_ADDR
// break ;
42427: GO 42431
// end ;
42429: GO 42392
42431: POP
42432: POP
// end else
42433: GO 42443
// result := false ;
42435: LD_ADDR_VAR 0 3
42439: PUSH
42440: LD_INT 0
42442: ST_TO_ADDR
// end ;
42443: LD_VAR 0 3
42447: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42448: LD_INT 0
42450: PPUSH
42451: PPUSH
// if not array1 or not array2 then
42452: LD_VAR 0 1
42456: NOT
42457: PUSH
42458: LD_VAR 0 2
42462: NOT
42463: OR
42464: IFFALSE 42468
// exit ;
42466: GO 42532
// result := true ;
42468: LD_ADDR_VAR 0 3
42472: PUSH
42473: LD_INT 1
42475: ST_TO_ADDR
// for i = 1 to array1 do
42476: LD_ADDR_VAR 0 4
42480: PUSH
42481: DOUBLE
42482: LD_INT 1
42484: DEC
42485: ST_TO_ADDR
42486: LD_VAR 0 1
42490: PUSH
42491: FOR_TO
42492: IFFALSE 42530
// if array1 [ i ] <> array2 [ i ] then
42494: LD_VAR 0 1
42498: PUSH
42499: LD_VAR 0 4
42503: ARRAY
42504: PUSH
42505: LD_VAR 0 2
42509: PUSH
42510: LD_VAR 0 4
42514: ARRAY
42515: NONEQUAL
42516: IFFALSE 42528
// begin result := false ;
42518: LD_ADDR_VAR 0 3
42522: PUSH
42523: LD_INT 0
42525: ST_TO_ADDR
// break ;
42526: GO 42530
// end ;
42528: GO 42491
42530: POP
42531: POP
// end ;
42532: LD_VAR 0 3
42536: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42537: LD_INT 0
42539: PPUSH
42540: PPUSH
42541: PPUSH
// pom := GetBase ( fac ) ;
42542: LD_ADDR_VAR 0 5
42546: PUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: CALL_OW 274
42556: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42557: LD_ADDR_VAR 0 4
42561: PUSH
42562: LD_VAR 0 2
42566: PUSH
42567: LD_INT 1
42569: ARRAY
42570: PPUSH
42571: LD_VAR 0 2
42575: PUSH
42576: LD_INT 2
42578: ARRAY
42579: PPUSH
42580: LD_VAR 0 2
42584: PUSH
42585: LD_INT 3
42587: ARRAY
42588: PPUSH
42589: LD_VAR 0 2
42593: PUSH
42594: LD_INT 4
42596: ARRAY
42597: PPUSH
42598: CALL_OW 449
42602: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42603: LD_ADDR_VAR 0 3
42607: PUSH
42608: LD_VAR 0 5
42612: PPUSH
42613: LD_INT 1
42615: PPUSH
42616: CALL_OW 275
42620: PUSH
42621: LD_VAR 0 4
42625: PUSH
42626: LD_INT 1
42628: ARRAY
42629: GREATEREQUAL
42630: PUSH
42631: LD_VAR 0 5
42635: PPUSH
42636: LD_INT 2
42638: PPUSH
42639: CALL_OW 275
42643: PUSH
42644: LD_VAR 0 4
42648: PUSH
42649: LD_INT 2
42651: ARRAY
42652: GREATEREQUAL
42653: AND
42654: PUSH
42655: LD_VAR 0 5
42659: PPUSH
42660: LD_INT 3
42662: PPUSH
42663: CALL_OW 275
42667: PUSH
42668: LD_VAR 0 4
42672: PUSH
42673: LD_INT 3
42675: ARRAY
42676: GREATEREQUAL
42677: AND
42678: ST_TO_ADDR
// end ;
42679: LD_VAR 0 3
42683: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42684: LD_INT 0
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
// pom := GetBase ( building ) ;
42690: LD_ADDR_VAR 0 3
42694: PUSH
42695: LD_VAR 0 1
42699: PPUSH
42700: CALL_OW 274
42704: ST_TO_ADDR
// if not pom then
42705: LD_VAR 0 3
42709: NOT
42710: IFFALSE 42714
// exit ;
42712: GO 42884
// btype := GetBType ( building ) ;
42714: LD_ADDR_VAR 0 5
42718: PUSH
42719: LD_VAR 0 1
42723: PPUSH
42724: CALL_OW 266
42728: ST_TO_ADDR
// if btype = b_armoury then
42729: LD_VAR 0 5
42733: PUSH
42734: LD_INT 4
42736: EQUAL
42737: IFFALSE 42747
// btype := b_barracks ;
42739: LD_ADDR_VAR 0 5
42743: PUSH
42744: LD_INT 5
42746: ST_TO_ADDR
// if btype = b_depot then
42747: LD_VAR 0 5
42751: PUSH
42752: LD_INT 0
42754: EQUAL
42755: IFFALSE 42765
// btype := b_warehouse ;
42757: LD_ADDR_VAR 0 5
42761: PUSH
42762: LD_INT 1
42764: ST_TO_ADDR
// if btype = b_workshop then
42765: LD_VAR 0 5
42769: PUSH
42770: LD_INT 2
42772: EQUAL
42773: IFFALSE 42783
// btype := b_factory ;
42775: LD_ADDR_VAR 0 5
42779: PUSH
42780: LD_INT 3
42782: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42783: LD_ADDR_VAR 0 4
42787: PUSH
42788: LD_VAR 0 5
42792: PPUSH
42793: LD_VAR 0 1
42797: PPUSH
42798: CALL_OW 248
42802: PPUSH
42803: CALL_OW 450
42807: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42808: LD_ADDR_VAR 0 2
42812: PUSH
42813: LD_VAR 0 3
42817: PPUSH
42818: LD_INT 1
42820: PPUSH
42821: CALL_OW 275
42825: PUSH
42826: LD_VAR 0 4
42830: PUSH
42831: LD_INT 1
42833: ARRAY
42834: GREATEREQUAL
42835: PUSH
42836: LD_VAR 0 3
42840: PPUSH
42841: LD_INT 2
42843: PPUSH
42844: CALL_OW 275
42848: PUSH
42849: LD_VAR 0 4
42853: PUSH
42854: LD_INT 2
42856: ARRAY
42857: GREATEREQUAL
42858: AND
42859: PUSH
42860: LD_VAR 0 3
42864: PPUSH
42865: LD_INT 3
42867: PPUSH
42868: CALL_OW 275
42872: PUSH
42873: LD_VAR 0 4
42877: PUSH
42878: LD_INT 3
42880: ARRAY
42881: GREATEREQUAL
42882: AND
42883: ST_TO_ADDR
// end ;
42884: LD_VAR 0 2
42888: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42889: LD_INT 0
42891: PPUSH
42892: PPUSH
42893: PPUSH
// pom := GetBase ( building ) ;
42894: LD_ADDR_VAR 0 4
42898: PUSH
42899: LD_VAR 0 1
42903: PPUSH
42904: CALL_OW 274
42908: ST_TO_ADDR
// if not pom then
42909: LD_VAR 0 4
42913: NOT
42914: IFFALSE 42918
// exit ;
42916: GO 43019
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42918: LD_ADDR_VAR 0 5
42922: PUSH
42923: LD_VAR 0 2
42927: PPUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: CALL_OW 248
42937: PPUSH
42938: CALL_OW 450
42942: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42943: LD_ADDR_VAR 0 3
42947: PUSH
42948: LD_VAR 0 4
42952: PPUSH
42953: LD_INT 1
42955: PPUSH
42956: CALL_OW 275
42960: PUSH
42961: LD_VAR 0 5
42965: PUSH
42966: LD_INT 1
42968: ARRAY
42969: GREATEREQUAL
42970: PUSH
42971: LD_VAR 0 4
42975: PPUSH
42976: LD_INT 2
42978: PPUSH
42979: CALL_OW 275
42983: PUSH
42984: LD_VAR 0 5
42988: PUSH
42989: LD_INT 2
42991: ARRAY
42992: GREATEREQUAL
42993: AND
42994: PUSH
42995: LD_VAR 0 4
42999: PPUSH
43000: LD_INT 3
43002: PPUSH
43003: CALL_OW 275
43007: PUSH
43008: LD_VAR 0 5
43012: PUSH
43013: LD_INT 3
43015: ARRAY
43016: GREATEREQUAL
43017: AND
43018: ST_TO_ADDR
// end ;
43019: LD_VAR 0 3
43023: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43024: LD_INT 0
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
// result := false ;
43037: LD_ADDR_VAR 0 8
43041: PUSH
43042: LD_INT 0
43044: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43045: LD_VAR 0 5
43049: NOT
43050: PUSH
43051: LD_VAR 0 1
43055: NOT
43056: OR
43057: PUSH
43058: LD_VAR 0 2
43062: NOT
43063: OR
43064: PUSH
43065: LD_VAR 0 3
43069: NOT
43070: OR
43071: IFFALSE 43075
// exit ;
43073: GO 43889
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43075: LD_ADDR_VAR 0 14
43079: PUSH
43080: LD_VAR 0 1
43084: PPUSH
43085: LD_VAR 0 2
43089: PPUSH
43090: LD_VAR 0 3
43094: PPUSH
43095: LD_VAR 0 4
43099: PPUSH
43100: LD_VAR 0 5
43104: PUSH
43105: LD_INT 1
43107: ARRAY
43108: PPUSH
43109: CALL_OW 248
43113: PPUSH
43114: LD_INT 0
43116: PPUSH
43117: CALL 45122 0 6
43121: ST_TO_ADDR
// if not hexes then
43122: LD_VAR 0 14
43126: NOT
43127: IFFALSE 43131
// exit ;
43129: GO 43889
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43131: LD_ADDR_VAR 0 17
43135: PUSH
43136: LD_VAR 0 5
43140: PPUSH
43141: LD_INT 22
43143: PUSH
43144: LD_VAR 0 13
43148: PPUSH
43149: CALL_OW 255
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 30
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 30
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: LIST
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PPUSH
43190: CALL_OW 72
43194: ST_TO_ADDR
// for i = 1 to hexes do
43195: LD_ADDR_VAR 0 9
43199: PUSH
43200: DOUBLE
43201: LD_INT 1
43203: DEC
43204: ST_TO_ADDR
43205: LD_VAR 0 14
43209: PUSH
43210: FOR_TO
43211: IFFALSE 43887
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43213: LD_ADDR_VAR 0 13
43217: PUSH
43218: LD_VAR 0 14
43222: PUSH
43223: LD_VAR 0 9
43227: ARRAY
43228: PUSH
43229: LD_INT 1
43231: ARRAY
43232: PPUSH
43233: LD_VAR 0 14
43237: PUSH
43238: LD_VAR 0 9
43242: ARRAY
43243: PUSH
43244: LD_INT 2
43246: ARRAY
43247: PPUSH
43248: CALL_OW 428
43252: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43253: LD_VAR 0 14
43257: PUSH
43258: LD_VAR 0 9
43262: ARRAY
43263: PUSH
43264: LD_INT 1
43266: ARRAY
43267: PPUSH
43268: LD_VAR 0 14
43272: PUSH
43273: LD_VAR 0 9
43277: ARRAY
43278: PUSH
43279: LD_INT 2
43281: ARRAY
43282: PPUSH
43283: CALL_OW 351
43287: PUSH
43288: LD_VAR 0 14
43292: PUSH
43293: LD_VAR 0 9
43297: ARRAY
43298: PUSH
43299: LD_INT 1
43301: ARRAY
43302: PPUSH
43303: LD_VAR 0 14
43307: PUSH
43308: LD_VAR 0 9
43312: ARRAY
43313: PUSH
43314: LD_INT 2
43316: ARRAY
43317: PPUSH
43318: CALL_OW 488
43322: NOT
43323: OR
43324: PUSH
43325: LD_VAR 0 13
43329: PPUSH
43330: CALL_OW 247
43334: PUSH
43335: LD_INT 3
43337: EQUAL
43338: OR
43339: IFFALSE 43345
// exit ;
43341: POP
43342: POP
43343: GO 43889
// if not tmp then
43345: LD_VAR 0 13
43349: NOT
43350: IFFALSE 43354
// continue ;
43352: GO 43210
// result := true ;
43354: LD_ADDR_VAR 0 8
43358: PUSH
43359: LD_INT 1
43361: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43362: LD_VAR 0 6
43366: PUSH
43367: LD_VAR 0 13
43371: PPUSH
43372: CALL_OW 247
43376: PUSH
43377: LD_INT 2
43379: EQUAL
43380: AND
43381: PUSH
43382: LD_VAR 0 13
43386: PPUSH
43387: CALL_OW 263
43391: PUSH
43392: LD_INT 1
43394: EQUAL
43395: AND
43396: IFFALSE 43560
// begin if IsDrivenBy ( tmp ) then
43398: LD_VAR 0 13
43402: PPUSH
43403: CALL_OW 311
43407: IFFALSE 43411
// continue ;
43409: GO 43210
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43411: LD_VAR 0 6
43415: PPUSH
43416: LD_INT 3
43418: PUSH
43419: LD_INT 60
43421: PUSH
43422: EMPTY
43423: LIST
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: LD_INT 55
43434: PUSH
43435: EMPTY
43436: LIST
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PPUSH
43446: CALL_OW 72
43450: IFFALSE 43558
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43452: LD_ADDR_VAR 0 18
43456: PUSH
43457: LD_VAR 0 6
43461: PPUSH
43462: LD_INT 3
43464: PUSH
43465: LD_INT 60
43467: PUSH
43468: EMPTY
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: LD_INT 55
43480: PUSH
43481: EMPTY
43482: LIST
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PPUSH
43492: CALL_OW 72
43496: PUSH
43497: LD_INT 1
43499: ARRAY
43500: ST_TO_ADDR
// if IsInUnit ( driver ) then
43501: LD_VAR 0 18
43505: PPUSH
43506: CALL_OW 310
43510: IFFALSE 43521
// ComExit ( driver ) ;
43512: LD_VAR 0 18
43516: PPUSH
43517: CALL 68902 0 1
// AddComEnterUnit ( driver , tmp ) ;
43521: LD_VAR 0 18
43525: PPUSH
43526: LD_VAR 0 13
43530: PPUSH
43531: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43535: LD_VAR 0 18
43539: PPUSH
43540: LD_VAR 0 7
43544: PPUSH
43545: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43549: LD_VAR 0 18
43553: PPUSH
43554: CALL_OW 181
// end ; continue ;
43558: GO 43210
// end ; if not cleaners or not tmp in cleaners then
43560: LD_VAR 0 6
43564: NOT
43565: PUSH
43566: LD_VAR 0 13
43570: PUSH
43571: LD_VAR 0 6
43575: IN
43576: NOT
43577: OR
43578: IFFALSE 43885
// begin if dep then
43580: LD_VAR 0 17
43584: IFFALSE 43720
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43586: LD_ADDR_VAR 0 16
43590: PUSH
43591: LD_VAR 0 17
43595: PUSH
43596: LD_INT 1
43598: ARRAY
43599: PPUSH
43600: CALL_OW 250
43604: PPUSH
43605: LD_VAR 0 17
43609: PUSH
43610: LD_INT 1
43612: ARRAY
43613: PPUSH
43614: CALL_OW 254
43618: PPUSH
43619: LD_INT 5
43621: PPUSH
43622: CALL_OW 272
43626: PUSH
43627: LD_VAR 0 17
43631: PUSH
43632: LD_INT 1
43634: ARRAY
43635: PPUSH
43636: CALL_OW 251
43640: PPUSH
43641: LD_VAR 0 17
43645: PUSH
43646: LD_INT 1
43648: ARRAY
43649: PPUSH
43650: CALL_OW 254
43654: PPUSH
43655: LD_INT 5
43657: PPUSH
43658: CALL_OW 273
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43667: LD_VAR 0 16
43671: PUSH
43672: LD_INT 1
43674: ARRAY
43675: PPUSH
43676: LD_VAR 0 16
43680: PUSH
43681: LD_INT 2
43683: ARRAY
43684: PPUSH
43685: CALL_OW 488
43689: IFFALSE 43720
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43691: LD_VAR 0 13
43695: PPUSH
43696: LD_VAR 0 16
43700: PUSH
43701: LD_INT 1
43703: ARRAY
43704: PPUSH
43705: LD_VAR 0 16
43709: PUSH
43710: LD_INT 2
43712: ARRAY
43713: PPUSH
43714: CALL_OW 111
// continue ;
43718: GO 43210
// end ; end ; r := GetDir ( tmp ) ;
43720: LD_ADDR_VAR 0 15
43724: PUSH
43725: LD_VAR 0 13
43729: PPUSH
43730: CALL_OW 254
43734: ST_TO_ADDR
// if r = 5 then
43735: LD_VAR 0 15
43739: PUSH
43740: LD_INT 5
43742: EQUAL
43743: IFFALSE 43753
// r := 0 ;
43745: LD_ADDR_VAR 0 15
43749: PUSH
43750: LD_INT 0
43752: ST_TO_ADDR
// for j = r to 5 do
43753: LD_ADDR_VAR 0 10
43757: PUSH
43758: DOUBLE
43759: LD_VAR 0 15
43763: DEC
43764: ST_TO_ADDR
43765: LD_INT 5
43767: PUSH
43768: FOR_TO
43769: IFFALSE 43883
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43771: LD_ADDR_VAR 0 11
43775: PUSH
43776: LD_VAR 0 13
43780: PPUSH
43781: CALL_OW 250
43785: PPUSH
43786: LD_VAR 0 10
43790: PPUSH
43791: LD_INT 2
43793: PPUSH
43794: CALL_OW 272
43798: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43799: LD_ADDR_VAR 0 12
43803: PUSH
43804: LD_VAR 0 13
43808: PPUSH
43809: CALL_OW 251
43813: PPUSH
43814: LD_VAR 0 10
43818: PPUSH
43819: LD_INT 2
43821: PPUSH
43822: CALL_OW 273
43826: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43827: LD_VAR 0 11
43831: PPUSH
43832: LD_VAR 0 12
43836: PPUSH
43837: CALL_OW 488
43841: PUSH
43842: LD_VAR 0 11
43846: PPUSH
43847: LD_VAR 0 12
43851: PPUSH
43852: CALL_OW 428
43856: NOT
43857: AND
43858: IFFALSE 43881
// begin ComMoveXY ( tmp , _x , _y ) ;
43860: LD_VAR 0 13
43864: PPUSH
43865: LD_VAR 0 11
43869: PPUSH
43870: LD_VAR 0 12
43874: PPUSH
43875: CALL_OW 111
// break ;
43879: GO 43883
// end ; end ;
43881: GO 43768
43883: POP
43884: POP
// end ; end ;
43885: GO 43210
43887: POP
43888: POP
// end ;
43889: LD_VAR 0 8
43893: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43894: LD_INT 0
43896: PPUSH
// result := true ;
43897: LD_ADDR_VAR 0 3
43901: PUSH
43902: LD_INT 1
43904: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43905: LD_VAR 0 2
43909: PUSH
43910: LD_INT 24
43912: DOUBLE
43913: EQUAL
43914: IFTRUE 43924
43916: LD_INT 33
43918: DOUBLE
43919: EQUAL
43920: IFTRUE 43924
43922: GO 43949
43924: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43925: LD_ADDR_VAR 0 3
43929: PUSH
43930: LD_INT 32
43932: PPUSH
43933: LD_VAR 0 1
43937: PPUSH
43938: CALL_OW 321
43942: PUSH
43943: LD_INT 2
43945: EQUAL
43946: ST_TO_ADDR
43947: GO 44265
43949: LD_INT 20
43951: DOUBLE
43952: EQUAL
43953: IFTRUE 43957
43955: GO 43982
43957: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43958: LD_ADDR_VAR 0 3
43962: PUSH
43963: LD_INT 6
43965: PPUSH
43966: LD_VAR 0 1
43970: PPUSH
43971: CALL_OW 321
43975: PUSH
43976: LD_INT 2
43978: EQUAL
43979: ST_TO_ADDR
43980: GO 44265
43982: LD_INT 22
43984: DOUBLE
43985: EQUAL
43986: IFTRUE 43996
43988: LD_INT 36
43990: DOUBLE
43991: EQUAL
43992: IFTRUE 43996
43994: GO 44021
43996: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43997: LD_ADDR_VAR 0 3
44001: PUSH
44002: LD_INT 15
44004: PPUSH
44005: LD_VAR 0 1
44009: PPUSH
44010: CALL_OW 321
44014: PUSH
44015: LD_INT 2
44017: EQUAL
44018: ST_TO_ADDR
44019: GO 44265
44021: LD_INT 30
44023: DOUBLE
44024: EQUAL
44025: IFTRUE 44029
44027: GO 44054
44029: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44030: LD_ADDR_VAR 0 3
44034: PUSH
44035: LD_INT 20
44037: PPUSH
44038: LD_VAR 0 1
44042: PPUSH
44043: CALL_OW 321
44047: PUSH
44048: LD_INT 2
44050: EQUAL
44051: ST_TO_ADDR
44052: GO 44265
44054: LD_INT 28
44056: DOUBLE
44057: EQUAL
44058: IFTRUE 44068
44060: LD_INT 21
44062: DOUBLE
44063: EQUAL
44064: IFTRUE 44068
44066: GO 44093
44068: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44069: LD_ADDR_VAR 0 3
44073: PUSH
44074: LD_INT 21
44076: PPUSH
44077: LD_VAR 0 1
44081: PPUSH
44082: CALL_OW 321
44086: PUSH
44087: LD_INT 2
44089: EQUAL
44090: ST_TO_ADDR
44091: GO 44265
44093: LD_INT 16
44095: DOUBLE
44096: EQUAL
44097: IFTRUE 44101
44099: GO 44126
44101: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44102: LD_ADDR_VAR 0 3
44106: PUSH
44107: LD_INT 84
44109: PPUSH
44110: LD_VAR 0 1
44114: PPUSH
44115: CALL_OW 321
44119: PUSH
44120: LD_INT 2
44122: EQUAL
44123: ST_TO_ADDR
44124: GO 44265
44126: LD_INT 19
44128: DOUBLE
44129: EQUAL
44130: IFTRUE 44140
44132: LD_INT 23
44134: DOUBLE
44135: EQUAL
44136: IFTRUE 44140
44138: GO 44165
44140: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44141: LD_ADDR_VAR 0 3
44145: PUSH
44146: LD_INT 83
44148: PPUSH
44149: LD_VAR 0 1
44153: PPUSH
44154: CALL_OW 321
44158: PUSH
44159: LD_INT 2
44161: EQUAL
44162: ST_TO_ADDR
44163: GO 44265
44165: LD_INT 17
44167: DOUBLE
44168: EQUAL
44169: IFTRUE 44173
44171: GO 44198
44173: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44174: LD_ADDR_VAR 0 3
44178: PUSH
44179: LD_INT 39
44181: PPUSH
44182: LD_VAR 0 1
44186: PPUSH
44187: CALL_OW 321
44191: PUSH
44192: LD_INT 2
44194: EQUAL
44195: ST_TO_ADDR
44196: GO 44265
44198: LD_INT 18
44200: DOUBLE
44201: EQUAL
44202: IFTRUE 44206
44204: GO 44231
44206: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44207: LD_ADDR_VAR 0 3
44211: PUSH
44212: LD_INT 40
44214: PPUSH
44215: LD_VAR 0 1
44219: PPUSH
44220: CALL_OW 321
44224: PUSH
44225: LD_INT 2
44227: EQUAL
44228: ST_TO_ADDR
44229: GO 44265
44231: LD_INT 27
44233: DOUBLE
44234: EQUAL
44235: IFTRUE 44239
44237: GO 44264
44239: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44240: LD_ADDR_VAR 0 3
44244: PUSH
44245: LD_INT 35
44247: PPUSH
44248: LD_VAR 0 1
44252: PPUSH
44253: CALL_OW 321
44257: PUSH
44258: LD_INT 2
44260: EQUAL
44261: ST_TO_ADDR
44262: GO 44265
44264: POP
// end ;
44265: LD_VAR 0 3
44269: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44270: LD_INT 0
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
// result := false ;
44283: LD_ADDR_VAR 0 6
44287: PUSH
44288: LD_INT 0
44290: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44291: LD_VAR 0 1
44295: NOT
44296: PUSH
44297: LD_VAR 0 1
44301: PPUSH
44302: CALL_OW 266
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: IN
44317: NOT
44318: OR
44319: PUSH
44320: LD_VAR 0 2
44324: NOT
44325: OR
44326: PUSH
44327: LD_VAR 0 5
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: LD_INT 3
44343: PUSH
44344: LD_INT 4
44346: PUSH
44347: LD_INT 5
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: IN
44358: NOT
44359: OR
44360: PUSH
44361: LD_VAR 0 3
44365: PPUSH
44366: LD_VAR 0 4
44370: PPUSH
44371: CALL_OW 488
44375: NOT
44376: OR
44377: IFFALSE 44381
// exit ;
44379: GO 45117
// side := GetSide ( depot ) ;
44381: LD_ADDR_VAR 0 9
44385: PUSH
44386: LD_VAR 0 1
44390: PPUSH
44391: CALL_OW 255
44395: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44396: LD_VAR 0 9
44400: PPUSH
44401: LD_VAR 0 2
44405: PPUSH
44406: CALL 43894 0 2
44410: NOT
44411: IFFALSE 44415
// exit ;
44413: GO 45117
// pom := GetBase ( depot ) ;
44415: LD_ADDR_VAR 0 10
44419: PUSH
44420: LD_VAR 0 1
44424: PPUSH
44425: CALL_OW 274
44429: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44430: LD_ADDR_VAR 0 11
44434: PUSH
44435: LD_VAR 0 2
44439: PPUSH
44440: LD_VAR 0 1
44444: PPUSH
44445: CALL_OW 248
44449: PPUSH
44450: CALL_OW 450
44454: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44455: LD_VAR 0 10
44459: PPUSH
44460: LD_INT 1
44462: PPUSH
44463: CALL_OW 275
44467: PUSH
44468: LD_VAR 0 11
44472: PUSH
44473: LD_INT 1
44475: ARRAY
44476: GREATEREQUAL
44477: PUSH
44478: LD_VAR 0 10
44482: PPUSH
44483: LD_INT 2
44485: PPUSH
44486: CALL_OW 275
44490: PUSH
44491: LD_VAR 0 11
44495: PUSH
44496: LD_INT 2
44498: ARRAY
44499: GREATEREQUAL
44500: AND
44501: PUSH
44502: LD_VAR 0 10
44506: PPUSH
44507: LD_INT 3
44509: PPUSH
44510: CALL_OW 275
44514: PUSH
44515: LD_VAR 0 11
44519: PUSH
44520: LD_INT 3
44522: ARRAY
44523: GREATEREQUAL
44524: AND
44525: NOT
44526: IFFALSE 44530
// exit ;
44528: GO 45117
// if GetBType ( depot ) = b_depot then
44530: LD_VAR 0 1
44534: PPUSH
44535: CALL_OW 266
44539: PUSH
44540: LD_INT 0
44542: EQUAL
44543: IFFALSE 44555
// dist := 28 else
44545: LD_ADDR_VAR 0 14
44549: PUSH
44550: LD_INT 28
44552: ST_TO_ADDR
44553: GO 44563
// dist := 36 ;
44555: LD_ADDR_VAR 0 14
44559: PUSH
44560: LD_INT 36
44562: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44563: LD_VAR 0 1
44567: PPUSH
44568: LD_VAR 0 3
44572: PPUSH
44573: LD_VAR 0 4
44577: PPUSH
44578: CALL_OW 297
44582: PUSH
44583: LD_VAR 0 14
44587: GREATER
44588: IFFALSE 44592
// exit ;
44590: GO 45117
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44592: LD_ADDR_VAR 0 12
44596: PUSH
44597: LD_VAR 0 2
44601: PPUSH
44602: LD_VAR 0 3
44606: PPUSH
44607: LD_VAR 0 4
44611: PPUSH
44612: LD_VAR 0 5
44616: PPUSH
44617: LD_VAR 0 1
44621: PPUSH
44622: CALL_OW 248
44626: PPUSH
44627: LD_INT 0
44629: PPUSH
44630: CALL 45122 0 6
44634: ST_TO_ADDR
// if not hexes then
44635: LD_VAR 0 12
44639: NOT
44640: IFFALSE 44644
// exit ;
44642: GO 45117
// hex := GetHexInfo ( x , y ) ;
44644: LD_ADDR_VAR 0 15
44648: PUSH
44649: LD_VAR 0 3
44653: PPUSH
44654: LD_VAR 0 4
44658: PPUSH
44659: CALL_OW 546
44663: ST_TO_ADDR
// if hex [ 1 ] then
44664: LD_VAR 0 15
44668: PUSH
44669: LD_INT 1
44671: ARRAY
44672: IFFALSE 44676
// exit ;
44674: GO 45117
// height := hex [ 2 ] ;
44676: LD_ADDR_VAR 0 13
44680: PUSH
44681: LD_VAR 0 15
44685: PUSH
44686: LD_INT 2
44688: ARRAY
44689: ST_TO_ADDR
// for i = 1 to hexes do
44690: LD_ADDR_VAR 0 7
44694: PUSH
44695: DOUBLE
44696: LD_INT 1
44698: DEC
44699: ST_TO_ADDR
44700: LD_VAR 0 12
44704: PUSH
44705: FOR_TO
44706: IFFALSE 45036
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44708: LD_VAR 0 12
44712: PUSH
44713: LD_VAR 0 7
44717: ARRAY
44718: PUSH
44719: LD_INT 1
44721: ARRAY
44722: PPUSH
44723: LD_VAR 0 12
44727: PUSH
44728: LD_VAR 0 7
44732: ARRAY
44733: PUSH
44734: LD_INT 2
44736: ARRAY
44737: PPUSH
44738: CALL_OW 488
44742: NOT
44743: PUSH
44744: LD_VAR 0 12
44748: PUSH
44749: LD_VAR 0 7
44753: ARRAY
44754: PUSH
44755: LD_INT 1
44757: ARRAY
44758: PPUSH
44759: LD_VAR 0 12
44763: PUSH
44764: LD_VAR 0 7
44768: ARRAY
44769: PUSH
44770: LD_INT 2
44772: ARRAY
44773: PPUSH
44774: CALL_OW 428
44778: PUSH
44779: LD_INT 0
44781: GREATER
44782: OR
44783: PUSH
44784: LD_VAR 0 12
44788: PUSH
44789: LD_VAR 0 7
44793: ARRAY
44794: PUSH
44795: LD_INT 1
44797: ARRAY
44798: PPUSH
44799: LD_VAR 0 12
44803: PUSH
44804: LD_VAR 0 7
44808: ARRAY
44809: PUSH
44810: LD_INT 2
44812: ARRAY
44813: PPUSH
44814: CALL_OW 351
44818: OR
44819: IFFALSE 44825
// exit ;
44821: POP
44822: POP
44823: GO 45117
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44825: LD_ADDR_VAR 0 8
44829: PUSH
44830: LD_VAR 0 12
44834: PUSH
44835: LD_VAR 0 7
44839: ARRAY
44840: PUSH
44841: LD_INT 1
44843: ARRAY
44844: PPUSH
44845: LD_VAR 0 12
44849: PUSH
44850: LD_VAR 0 7
44854: ARRAY
44855: PUSH
44856: LD_INT 2
44858: ARRAY
44859: PPUSH
44860: CALL_OW 546
44864: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44865: LD_VAR 0 8
44869: PUSH
44870: LD_INT 1
44872: ARRAY
44873: PUSH
44874: LD_VAR 0 8
44878: PUSH
44879: LD_INT 2
44881: ARRAY
44882: PUSH
44883: LD_VAR 0 13
44887: PUSH
44888: LD_INT 2
44890: PLUS
44891: GREATER
44892: OR
44893: PUSH
44894: LD_VAR 0 8
44898: PUSH
44899: LD_INT 2
44901: ARRAY
44902: PUSH
44903: LD_VAR 0 13
44907: PUSH
44908: LD_INT 2
44910: MINUS
44911: LESS
44912: OR
44913: PUSH
44914: LD_VAR 0 8
44918: PUSH
44919: LD_INT 3
44921: ARRAY
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 8
44928: PUSH
44929: LD_INT 9
44931: PUSH
44932: LD_INT 10
44934: PUSH
44935: LD_INT 11
44937: PUSH
44938: LD_INT 12
44940: PUSH
44941: LD_INT 13
44943: PUSH
44944: LD_INT 16
44946: PUSH
44947: LD_INT 17
44949: PUSH
44950: LD_INT 18
44952: PUSH
44953: LD_INT 19
44955: PUSH
44956: LD_INT 20
44958: PUSH
44959: LD_INT 21
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: IN
44977: NOT
44978: OR
44979: PUSH
44980: LD_VAR 0 8
44984: PUSH
44985: LD_INT 5
44987: ARRAY
44988: NOT
44989: OR
44990: PUSH
44991: LD_VAR 0 8
44995: PUSH
44996: LD_INT 6
44998: ARRAY
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 7
45008: PUSH
45009: LD_INT 9
45011: PUSH
45012: LD_INT 10
45014: PUSH
45015: LD_INT 11
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: IN
45026: NOT
45027: OR
45028: IFFALSE 45034
// exit ;
45030: POP
45031: POP
45032: GO 45117
// end ;
45034: GO 44705
45036: POP
45037: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45038: LD_VAR 0 9
45042: PPUSH
45043: LD_VAR 0 3
45047: PPUSH
45048: LD_VAR 0 4
45052: PPUSH
45053: LD_INT 20
45055: PPUSH
45056: CALL 37069 0 4
45060: PUSH
45061: LD_INT 4
45063: ARRAY
45064: IFFALSE 45068
// exit ;
45066: GO 45117
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45068: LD_VAR 0 2
45072: PUSH
45073: LD_INT 29
45075: PUSH
45076: LD_INT 30
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: IN
45083: PUSH
45084: LD_VAR 0 3
45088: PPUSH
45089: LD_VAR 0 4
45093: PPUSH
45094: LD_VAR 0 9
45098: PPUSH
45099: CALL_OW 440
45103: NOT
45104: AND
45105: IFFALSE 45109
// exit ;
45107: GO 45117
// result := true ;
45109: LD_ADDR_VAR 0 6
45113: PUSH
45114: LD_INT 1
45116: ST_TO_ADDR
// end ;
45117: LD_VAR 0 6
45121: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45122: LD_INT 0
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
45129: PPUSH
45130: PPUSH
45131: PPUSH
45132: PPUSH
45133: PPUSH
45134: PPUSH
45135: PPUSH
45136: PPUSH
45137: PPUSH
45138: PPUSH
45139: PPUSH
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
45157: PPUSH
45158: PPUSH
45159: PPUSH
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
// result = [ ] ;
45182: LD_ADDR_VAR 0 7
45186: PUSH
45187: EMPTY
45188: ST_TO_ADDR
// temp_list = [ ] ;
45189: LD_ADDR_VAR 0 9
45193: PUSH
45194: EMPTY
45195: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45196: LD_VAR 0 4
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 3
45212: PUSH
45213: LD_INT 4
45215: PUSH
45216: LD_INT 5
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: IN
45227: NOT
45228: PUSH
45229: LD_VAR 0 1
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: IN
45244: PUSH
45245: LD_VAR 0 5
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 3
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: LIST
45263: IN
45264: NOT
45265: AND
45266: OR
45267: IFFALSE 45271
// exit ;
45269: GO 63662
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45271: LD_VAR 0 1
45275: PUSH
45276: LD_INT 6
45278: PUSH
45279: LD_INT 7
45281: PUSH
45282: LD_INT 8
45284: PUSH
45285: LD_INT 13
45287: PUSH
45288: LD_INT 12
45290: PUSH
45291: LD_INT 15
45293: PUSH
45294: LD_INT 11
45296: PUSH
45297: LD_INT 14
45299: PUSH
45300: LD_INT 10
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: IN
45314: IFFALSE 45324
// btype = b_lab ;
45316: LD_ADDR_VAR 0 1
45320: PUSH
45321: LD_INT 6
45323: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45324: LD_VAR 0 6
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: LIST
45342: IN
45343: NOT
45344: PUSH
45345: LD_VAR 0 1
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 3
45361: PUSH
45362: LD_INT 6
45364: PUSH
45365: LD_INT 36
45367: PUSH
45368: LD_INT 4
45370: PUSH
45371: LD_INT 5
45373: PUSH
45374: LD_INT 31
45376: PUSH
45377: LD_INT 32
45379: PUSH
45380: LD_INT 33
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: IN
45396: NOT
45397: PUSH
45398: LD_VAR 0 6
45402: PUSH
45403: LD_INT 1
45405: EQUAL
45406: AND
45407: OR
45408: PUSH
45409: LD_VAR 0 1
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: LD_INT 3
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: IN
45424: NOT
45425: PUSH
45426: LD_VAR 0 6
45430: PUSH
45431: LD_INT 2
45433: EQUAL
45434: AND
45435: OR
45436: IFFALSE 45446
// mode = 0 ;
45438: LD_ADDR_VAR 0 6
45442: PUSH
45443: LD_INT 0
45445: ST_TO_ADDR
// case mode of 0 :
45446: LD_VAR 0 6
45450: PUSH
45451: LD_INT 0
45453: DOUBLE
45454: EQUAL
45455: IFTRUE 45459
45457: GO 56912
45459: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45460: LD_ADDR_VAR 0 11
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 3
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45653: LD_ADDR_VAR 0 12
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 3
45810: NEG
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 3
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45849: LD_ADDR_VAR 0 13
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 2
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 3
46008: NEG
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 3
46020: NEG
46021: PUSH
46022: LD_INT 3
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46048: LD_ADDR_VAR 0 14
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 3
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 3
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46244: LD_ADDR_VAR 0 15
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: NEG
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 3
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 3
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46437: LD_ADDR_VAR 0 16
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 3
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 3
46594: PUSH
46595: LD_INT 3
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46630: LD_ADDR_VAR 0 17
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46860: LD_ADDR_VAR 0 18
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47090: LD_ADDR_VAR 0 19
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47320: LD_ADDR_VAR 0 20
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 2
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47550: LD_ADDR_VAR 0 21
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47780: LD_ADDR_VAR 0 22
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48010: LD_ADDR_VAR 0 23
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 3
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48290: LD_ADDR_VAR 0 24
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 3
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 3
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48566: LD_ADDR_VAR 0 25
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 3
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 3
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48840: LD_ADDR_VAR 0 26
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49116: LD_ADDR_VAR 0 27
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49396: LD_ADDR_VAR 0 28
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49678: LD_ADDR_VAR 0 29
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 3
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: NEG
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49957: LD_ADDR_VAR 0 30
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 3
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: LD_INT 3
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 3
50200: NEG
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50235: LD_ADDR_VAR 0 31
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: LD_INT 3
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 3
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: NEG
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50513: LD_ADDR_VAR 0 32
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 3
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 3
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 3
50756: NEG
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50791: LD_ADDR_VAR 0 33
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 2
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51070: LD_ADDR_VAR 0 34
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: LD_INT 3
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 3
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51350: LD_ADDR_VAR 0 35
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51462: LD_ADDR_VAR 0 36
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51574: LD_ADDR_VAR 0 37
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51686: LD_ADDR_VAR 0 38
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51798: LD_ADDR_VAR 0 39
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51910: LD_ADDR_VAR 0 40
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52022: LD_ADDR_VAR 0 41
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 2
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 3
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 3
52331: NEG
52332: PUSH
52333: LD_INT 3
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52372: LD_ADDR_VAR 0 42
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: LD_INT 3
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 3
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 3
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 3
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 3
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 3
52669: NEG
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 3
52681: NEG
52682: PUSH
52683: LD_INT 3
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52722: LD_ADDR_VAR 0 43
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: LD_INT 3
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 3
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 3
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 3
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 3
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 3
53029: NEG
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53070: LD_ADDR_VAR 0 44
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: NEG
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: NEG
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 3
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 3
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: LD_INT 3
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: LD_INT 3
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 3
53355: NEG
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 3
53367: NEG
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 3
53379: NEG
53380: PUSH
53381: LD_INT 3
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53420: LD_ADDR_VAR 0 45
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 3
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 3
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 3
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: LD_INT 3
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53770: LD_ADDR_VAR 0 46
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 2
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 3
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 3
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 3
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 3
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 3
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54118: LD_ADDR_VAR 0 47
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54269: LD_ADDR_VAR 0 48
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54416: LD_ADDR_VAR 0 49
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54560: LD_ADDR_VAR 0 50
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54704: LD_ADDR_VAR 0 51
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: NEG
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54851: LD_ADDR_VAR 0 52
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55002: LD_ADDR_VAR 0 53
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55232: LD_ADDR_VAR 0 54
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55462: LD_ADDR_VAR 0 55
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55692: LD_ADDR_VAR 0 56
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 1
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55922: LD_ADDR_VAR 0 57
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56152: LD_ADDR_VAR 0 58
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56382: LD_ADDR_VAR 0 59
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56470: LD_ADDR_VAR 0 60
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56558: LD_ADDR_VAR 0 61
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56646: LD_ADDR_VAR 0 62
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56734: LD_ADDR_VAR 0 63
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56822: LD_ADDR_VAR 0 64
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: ST_TO_ADDR
// end ; 1 :
56910: GO 62807
56912: LD_INT 1
56914: DOUBLE
56915: EQUAL
56916: IFTRUE 56920
56918: GO 59543
56920: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56921: LD_ADDR_VAR 0 11
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: LD_INT 3
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: LIST
56964: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56965: LD_ADDR_VAR 0 12
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 3
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57006: LD_ADDR_VAR 0 13
57010: PUSH
57011: LD_INT 3
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 3
57023: PUSH
57024: LD_INT 3
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 3
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57046: LD_ADDR_VAR 0 14
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 3
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 3
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57087: LD_ADDR_VAR 0 15
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: LIST
57130: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57131: LD_ADDR_VAR 0 16
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: LD_INT 3
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 3
57150: NEG
57151: PUSH
57152: LD_INT 2
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 3
57162: NEG
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57177: LD_ADDR_VAR 0 17
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 3
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 3
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: LD_INT 2
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: LIST
57220: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57221: LD_ADDR_VAR 0 18
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 3
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57262: LD_ADDR_VAR 0 19
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 3
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57302: LD_ADDR_VAR 0 20
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: LIST
57342: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57343: LD_ADDR_VAR 0 21
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 3
57361: NEG
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57387: LD_ADDR_VAR 0 22
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 3
57406: NEG
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: LD_INT 3
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: LIST
57432: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57433: LD_ADDR_VAR 0 23
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: LD_INT 4
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: LD_INT 3
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: LIST
57476: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57477: LD_ADDR_VAR 0 24
57481: PUSH
57482: LD_INT 3
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 4
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57518: LD_ADDR_VAR 0 25
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 4
57535: PUSH
57536: LD_INT 3
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: LD_INT 4
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57558: LD_ADDR_VAR 0 26
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 3
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 4
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57599: LD_ADDR_VAR 0 27
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 4
57628: NEG
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57643: LD_ADDR_VAR 0 28
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: LD_INT 3
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: LD_INT 4
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 4
57674: NEG
57675: PUSH
57676: LD_INT 3
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: LIST
57688: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57689: LD_ADDR_VAR 0 29
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 3
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 4
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 4
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 5
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 5
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 4
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 6
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 6
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 5
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57844: LD_ADDR_VAR 0 30
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 4
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 4
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 4
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 5
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 5
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 5
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 6
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 6
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57987: LD_ADDR_VAR 0 31
57991: PUSH
57992: LD_INT 3
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 3
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 4
58024: PUSH
58025: LD_INT 3
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 4
58034: PUSH
58035: LD_INT 4
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: PUSH
58045: LD_INT 4
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 5
58054: PUSH
58055: LD_INT 4
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 5
58064: PUSH
58065: LD_INT 5
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 4
58074: PUSH
58075: LD_INT 5
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 6
58084: PUSH
58085: LD_INT 5
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 6
58094: PUSH
58095: LD_INT 6
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 5
58104: PUSH
58105: LD_INT 6
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58126: LD_ADDR_VAR 0 32
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: LD_INT 4
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: LD_INT 4
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: LD_INT 5
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 5
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: LD_INT 4
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 6
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 6
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: LD_INT 5
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58269: LD_ADDR_VAR 0 33
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: NEG
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 4
58321: NEG
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 4
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 4
58344: NEG
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 5
58355: NEG
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 5
58366: NEG
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 5
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 6
58389: NEG
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 6
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58424: LD_ADDR_VAR 0 34
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: LD_INT 4
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 4
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: NEG
58492: PUSH
58493: LD_INT 4
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 4
58503: NEG
58504: PUSH
58505: LD_INT 5
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 5
58515: NEG
58516: PUSH
58517: LD_INT 4
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 5
58527: NEG
58528: PUSH
58529: LD_INT 5
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 5
58539: NEG
58540: PUSH
58541: LD_INT 6
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 6
58551: NEG
58552: PUSH
58553: LD_INT 5
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 6
58563: NEG
58564: PUSH
58565: LD_INT 6
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58587: LD_ADDR_VAR 0 41
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: LD_INT 3
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: LIST
58630: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58631: LD_ADDR_VAR 0 42
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 3
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: LIST
58671: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58672: LD_ADDR_VAR 0 43
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: LIST
58711: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58712: LD_ADDR_VAR 0 44
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58753: LD_ADDR_VAR 0 45
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: LIST
58796: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58797: LD_ADDR_VAR 0 46
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 3
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: LIST
58842: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58843: LD_ADDR_VAR 0 47
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: LD_INT 3
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58876: LD_ADDR_VAR 0 48
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58907: LD_ADDR_VAR 0 49
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58936: LD_ADDR_VAR 0 50
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58965: LD_ADDR_VAR 0 51
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58996: LD_ADDR_VAR 0 52
59000: PUSH
59001: LD_INT 3
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59029: LD_ADDR_VAR 0 53
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 3
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 3
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59073: LD_ADDR_VAR 0 54
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: LIST
59113: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59114: LD_ADDR_VAR 0 55
59118: PUSH
59119: LD_INT 3
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 3
59131: PUSH
59132: LD_INT 3
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: LD_INT 3
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59154: LD_ADDR_VAR 0 56
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 3
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 3
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59195: LD_ADDR_VAR 0 57
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59239: LD_ADDR_VAR 0 58
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 3
59270: NEG
59271: PUSH
59272: LD_INT 3
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: LIST
59284: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59285: LD_ADDR_VAR 0 59
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 2
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59329: LD_ADDR_VAR 0 60
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59370: LD_ADDR_VAR 0 61
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: LIST
59409: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59410: LD_ADDR_VAR 0 62
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 2
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: LIST
59450: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59451: LD_ADDR_VAR 0 63
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59495: LD_ADDR_VAR 0 64
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: ST_TO_ADDR
// end ; 2 :
59541: GO 62807
59543: LD_INT 2
59545: DOUBLE
59546: EQUAL
59547: IFTRUE 59551
59549: GO 62806
59551: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59552: LD_ADDR_VAR 0 29
59556: PUSH
59557: LD_INT 4
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 4
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 5
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 5
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 4
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 5
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 3
59652: PUSH
59653: LD_INT 3
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: LD_INT 2
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 4
59672: PUSH
59673: LD_INT 3
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 4
59682: PUSH
59683: LD_INT 4
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: PUSH
59693: LD_INT 4
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: LD_INT 3
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 4
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: LD_INT 4
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: LD_INT 4
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: LD_INT 3
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 4
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 5
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 5
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 4
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 5
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: NEG
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 4
59891: NEG
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 4
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 4
59914: NEG
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 4
59937: NEG
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 4
59949: NEG
59950: PUSH
59951: LD_INT 5
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 3
59961: NEG
59962: PUSH
59963: LD_INT 4
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: NEG
59974: PUSH
59975: LD_INT 3
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 4
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 5
59997: NEG
59998: PUSH
59999: LD_INT 4
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 5
60009: NEG
60010: PUSH
60011: LD_INT 5
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: LD_INT 5
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 5
60033: NEG
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60090: LD_ADDR_VAR 0 30
60094: PUSH
60095: LD_INT 4
60097: PUSH
60098: LD_INT 4
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 4
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 5
60117: PUSH
60118: LD_INT 4
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 5
60127: PUSH
60128: LD_INT 5
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 4
60137: PUSH
60138: LD_INT 5
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: LD_INT 4
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: PUSH
60158: LD_INT 3
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 5
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: LD_INT 5
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: LD_INT 3
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: LD_INT 4
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 4
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: LD_INT 4
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 4
60280: NEG
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 4
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 5
60336: NEG
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 5
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 5
60359: NEG
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 3
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 3
60382: NEG
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 4
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 2
60418: NEG
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 3
60430: NEG
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: NEG
60443: PUSH
60444: LD_INT 3
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 4
60454: NEG
60455: PUSH
60456: LD_INT 4
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 4
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 4
60478: NEG
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 4
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 5
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: LD_INT 4
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 3
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 3
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: LD_INT 4
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 5
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 2
60569: PUSH
60570: LD_INT 3
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: LD_INT 5
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60637: LD_ADDR_VAR 0 31
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 4
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 3
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 4
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: LD_INT 5
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 5
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 4
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: LD_INT 5
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: NEG
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 2
60760: NEG
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 4
60793: NEG
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 4
60804: NEG
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 4
60816: NEG
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: NEG
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 4
60839: NEG
60840: PUSH
60841: LD_INT 4
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 4
60851: NEG
60852: PUSH
60853: LD_INT 5
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 3
60863: NEG
60864: PUSH
60865: LD_INT 4
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: NEG
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 4
60887: NEG
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 5
60899: NEG
60900: PUSH
60901: LD_INT 4
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 5
60911: NEG
60912: PUSH
60913: LD_INT 5
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: LD_INT 5
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 5
60935: NEG
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 3
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 4
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 4
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: LD_INT 4
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 4
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 4
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 5
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 5
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 4
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 3
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 5
61132: PUSH
61133: LD_INT 2
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61187: LD_ADDR_VAR 0 32
61191: PUSH
61192: LD_INT 4
61194: NEG
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 4
61205: NEG
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 3
61217: NEG
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 4
61239: NEG
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 5
61250: NEG
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 5
61261: NEG
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 5
61273: NEG
61274: PUSH
61275: LD_INT 2
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 3
61285: NEG
61286: PUSH
61287: LD_INT 2
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: NEG
61297: PUSH
61298: LD_INT 3
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: NEG
61309: PUSH
61310: LD_INT 4
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: NEG
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 4
61356: NEG
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 4
61368: NEG
61369: PUSH
61370: LD_INT 4
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 2
61380: NEG
61381: PUSH
61382: LD_INT 4
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 4
61392: NEG
61393: PUSH
61394: LD_INT 2
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 4
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 5
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: LD_INT 4
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: LD_INT 4
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 5
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 2
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: LD_INT 5
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 3
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 4
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 4
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 3
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 4
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 4
61599: PUSH
61600: LD_INT 4
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 4
61609: PUSH
61610: LD_INT 3
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 5
61619: PUSH
61620: LD_INT 4
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 5
61629: PUSH
61630: LD_INT 5
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 4
61639: PUSH
61640: LD_INT 5
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 3
61649: PUSH
61650: LD_INT 4
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 3
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 5
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 3
61679: PUSH
61680: LD_INT 5
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61734: LD_ADDR_VAR 0 33
61738: PUSH
61739: LD_INT 4
61741: NEG
61742: PUSH
61743: LD_INT 4
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 4
61753: NEG
61754: PUSH
61755: LD_INT 5
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: LD_INT 4
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: LD_INT 3
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 4
61789: NEG
61790: PUSH
61791: LD_INT 3
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 5
61801: NEG
61802: PUSH
61803: LD_INT 4
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 5
61813: NEG
61814: PUSH
61815: LD_INT 5
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 3
61825: NEG
61826: PUSH
61827: LD_INT 5
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 5
61837: NEG
61838: PUSH
61839: LD_INT 3
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 4
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: LD_INT 2
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: LD_INT 3
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 4
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: LD_INT 2
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: NEG
61940: PUSH
61941: LD_INT 4
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 4
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 4
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 5
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 5
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 4
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 3
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 3
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 3
62023: PUSH
62024: LD_INT 2
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 5
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 3
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 3
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 4
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 4
62074: PUSH
62075: LD_INT 4
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: LD_INT 4
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: LD_INT 3
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: PUSH
62105: LD_INT 2
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 4
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: LD_INT 4
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 4
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 4
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 5
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 5
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: LD_INT 4
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: LD_INT 5
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: NEG
62217: PUSH
62218: LD_INT 3
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62272: LD_ADDR_VAR 0 34
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 4
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 5
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 4
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: LD_INT 3
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: LD_INT 3
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: LD_INT 4
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 5
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 2
62369: NEG
62370: PUSH
62371: LD_INT 5
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 4
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 4
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 4
62464: PUSH
62465: LD_INT 2
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: LD_INT 4
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 4
62484: PUSH
62485: LD_INT 3
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 5
62494: PUSH
62495: LD_INT 4
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 5
62504: PUSH
62505: LD_INT 5
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 4
62514: PUSH
62515: LD_INT 5
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: LD_INT 4
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: LD_INT 3
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 5
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: LD_INT 5
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: LD_INT 3
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: LD_INT 3
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: LD_INT 4
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 4
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: LD_INT 4
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 4
62657: NEG
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 4
62668: NEG
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 3
62691: NEG
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 4
62702: NEG
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 5
62713: NEG
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 5
62724: NEG
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 5
62736: NEG
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 3
62748: NEG
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: ST_TO_ADDR
// end ; end ;
62804: GO 62807
62806: POP
// case btype of b_depot , b_warehouse :
62807: LD_VAR 0 1
62811: PUSH
62812: LD_INT 0
62814: DOUBLE
62815: EQUAL
62816: IFTRUE 62826
62818: LD_INT 1
62820: DOUBLE
62821: EQUAL
62822: IFTRUE 62826
62824: GO 63027
62826: POP
// case nation of nation_american :
62827: LD_VAR 0 5
62831: PUSH
62832: LD_INT 1
62834: DOUBLE
62835: EQUAL
62836: IFTRUE 62840
62838: GO 62896
62840: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62841: LD_ADDR_VAR 0 9
62845: PUSH
62846: LD_VAR 0 11
62850: PUSH
62851: LD_VAR 0 12
62855: PUSH
62856: LD_VAR 0 13
62860: PUSH
62861: LD_VAR 0 14
62865: PUSH
62866: LD_VAR 0 15
62870: PUSH
62871: LD_VAR 0 16
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: PUSH
62884: LD_VAR 0 4
62888: PUSH
62889: LD_INT 1
62891: PLUS
62892: ARRAY
62893: ST_TO_ADDR
62894: GO 63025
62896: LD_INT 2
62898: DOUBLE
62899: EQUAL
62900: IFTRUE 62904
62902: GO 62960
62904: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62905: LD_ADDR_VAR 0 9
62909: PUSH
62910: LD_VAR 0 17
62914: PUSH
62915: LD_VAR 0 18
62919: PUSH
62920: LD_VAR 0 19
62924: PUSH
62925: LD_VAR 0 20
62929: PUSH
62930: LD_VAR 0 21
62934: PUSH
62935: LD_VAR 0 22
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: PUSH
62948: LD_VAR 0 4
62952: PUSH
62953: LD_INT 1
62955: PLUS
62956: ARRAY
62957: ST_TO_ADDR
62958: GO 63025
62960: LD_INT 3
62962: DOUBLE
62963: EQUAL
62964: IFTRUE 62968
62966: GO 63024
62968: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62969: LD_ADDR_VAR 0 9
62973: PUSH
62974: LD_VAR 0 23
62978: PUSH
62979: LD_VAR 0 24
62983: PUSH
62984: LD_VAR 0 25
62988: PUSH
62989: LD_VAR 0 26
62993: PUSH
62994: LD_VAR 0 27
62998: PUSH
62999: LD_VAR 0 28
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: PUSH
63012: LD_VAR 0 4
63016: PUSH
63017: LD_INT 1
63019: PLUS
63020: ARRAY
63021: ST_TO_ADDR
63022: GO 63025
63024: POP
63025: GO 63580
63027: LD_INT 2
63029: DOUBLE
63030: EQUAL
63031: IFTRUE 63041
63033: LD_INT 3
63035: DOUBLE
63036: EQUAL
63037: IFTRUE 63041
63039: GO 63097
63041: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63042: LD_ADDR_VAR 0 9
63046: PUSH
63047: LD_VAR 0 29
63051: PUSH
63052: LD_VAR 0 30
63056: PUSH
63057: LD_VAR 0 31
63061: PUSH
63062: LD_VAR 0 32
63066: PUSH
63067: LD_VAR 0 33
63071: PUSH
63072: LD_VAR 0 34
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: PUSH
63085: LD_VAR 0 4
63089: PUSH
63090: LD_INT 1
63092: PLUS
63093: ARRAY
63094: ST_TO_ADDR
63095: GO 63580
63097: LD_INT 16
63099: DOUBLE
63100: EQUAL
63101: IFTRUE 63159
63103: LD_INT 17
63105: DOUBLE
63106: EQUAL
63107: IFTRUE 63159
63109: LD_INT 18
63111: DOUBLE
63112: EQUAL
63113: IFTRUE 63159
63115: LD_INT 19
63117: DOUBLE
63118: EQUAL
63119: IFTRUE 63159
63121: LD_INT 22
63123: DOUBLE
63124: EQUAL
63125: IFTRUE 63159
63127: LD_INT 20
63129: DOUBLE
63130: EQUAL
63131: IFTRUE 63159
63133: LD_INT 21
63135: DOUBLE
63136: EQUAL
63137: IFTRUE 63159
63139: LD_INT 23
63141: DOUBLE
63142: EQUAL
63143: IFTRUE 63159
63145: LD_INT 24
63147: DOUBLE
63148: EQUAL
63149: IFTRUE 63159
63151: LD_INT 25
63153: DOUBLE
63154: EQUAL
63155: IFTRUE 63159
63157: GO 63215
63159: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63160: LD_ADDR_VAR 0 9
63164: PUSH
63165: LD_VAR 0 35
63169: PUSH
63170: LD_VAR 0 36
63174: PUSH
63175: LD_VAR 0 37
63179: PUSH
63180: LD_VAR 0 38
63184: PUSH
63185: LD_VAR 0 39
63189: PUSH
63190: LD_VAR 0 40
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: PUSH
63203: LD_VAR 0 4
63207: PUSH
63208: LD_INT 1
63210: PLUS
63211: ARRAY
63212: ST_TO_ADDR
63213: GO 63580
63215: LD_INT 6
63217: DOUBLE
63218: EQUAL
63219: IFTRUE 63271
63221: LD_INT 7
63223: DOUBLE
63224: EQUAL
63225: IFTRUE 63271
63227: LD_INT 8
63229: DOUBLE
63230: EQUAL
63231: IFTRUE 63271
63233: LD_INT 13
63235: DOUBLE
63236: EQUAL
63237: IFTRUE 63271
63239: LD_INT 12
63241: DOUBLE
63242: EQUAL
63243: IFTRUE 63271
63245: LD_INT 15
63247: DOUBLE
63248: EQUAL
63249: IFTRUE 63271
63251: LD_INT 11
63253: DOUBLE
63254: EQUAL
63255: IFTRUE 63271
63257: LD_INT 14
63259: DOUBLE
63260: EQUAL
63261: IFTRUE 63271
63263: LD_INT 10
63265: DOUBLE
63266: EQUAL
63267: IFTRUE 63271
63269: GO 63327
63271: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63272: LD_ADDR_VAR 0 9
63276: PUSH
63277: LD_VAR 0 41
63281: PUSH
63282: LD_VAR 0 42
63286: PUSH
63287: LD_VAR 0 43
63291: PUSH
63292: LD_VAR 0 44
63296: PUSH
63297: LD_VAR 0 45
63301: PUSH
63302: LD_VAR 0 46
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: PUSH
63315: LD_VAR 0 4
63319: PUSH
63320: LD_INT 1
63322: PLUS
63323: ARRAY
63324: ST_TO_ADDR
63325: GO 63580
63327: LD_INT 36
63329: DOUBLE
63330: EQUAL
63331: IFTRUE 63335
63333: GO 63391
63335: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63336: LD_ADDR_VAR 0 9
63340: PUSH
63341: LD_VAR 0 47
63345: PUSH
63346: LD_VAR 0 48
63350: PUSH
63351: LD_VAR 0 49
63355: PUSH
63356: LD_VAR 0 50
63360: PUSH
63361: LD_VAR 0 51
63365: PUSH
63366: LD_VAR 0 52
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: PUSH
63379: LD_VAR 0 4
63383: PUSH
63384: LD_INT 1
63386: PLUS
63387: ARRAY
63388: ST_TO_ADDR
63389: GO 63580
63391: LD_INT 4
63393: DOUBLE
63394: EQUAL
63395: IFTRUE 63417
63397: LD_INT 5
63399: DOUBLE
63400: EQUAL
63401: IFTRUE 63417
63403: LD_INT 34
63405: DOUBLE
63406: EQUAL
63407: IFTRUE 63417
63409: LD_INT 37
63411: DOUBLE
63412: EQUAL
63413: IFTRUE 63417
63415: GO 63473
63417: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63418: LD_ADDR_VAR 0 9
63422: PUSH
63423: LD_VAR 0 53
63427: PUSH
63428: LD_VAR 0 54
63432: PUSH
63433: LD_VAR 0 55
63437: PUSH
63438: LD_VAR 0 56
63442: PUSH
63443: LD_VAR 0 57
63447: PUSH
63448: LD_VAR 0 58
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: PUSH
63461: LD_VAR 0 4
63465: PUSH
63466: LD_INT 1
63468: PLUS
63469: ARRAY
63470: ST_TO_ADDR
63471: GO 63580
63473: LD_INT 31
63475: DOUBLE
63476: EQUAL
63477: IFTRUE 63523
63479: LD_INT 32
63481: DOUBLE
63482: EQUAL
63483: IFTRUE 63523
63485: LD_INT 33
63487: DOUBLE
63488: EQUAL
63489: IFTRUE 63523
63491: LD_INT 27
63493: DOUBLE
63494: EQUAL
63495: IFTRUE 63523
63497: LD_INT 26
63499: DOUBLE
63500: EQUAL
63501: IFTRUE 63523
63503: LD_INT 28
63505: DOUBLE
63506: EQUAL
63507: IFTRUE 63523
63509: LD_INT 29
63511: DOUBLE
63512: EQUAL
63513: IFTRUE 63523
63515: LD_INT 30
63517: DOUBLE
63518: EQUAL
63519: IFTRUE 63523
63521: GO 63579
63523: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63524: LD_ADDR_VAR 0 9
63528: PUSH
63529: LD_VAR 0 59
63533: PUSH
63534: LD_VAR 0 60
63538: PUSH
63539: LD_VAR 0 61
63543: PUSH
63544: LD_VAR 0 62
63548: PUSH
63549: LD_VAR 0 63
63553: PUSH
63554: LD_VAR 0 64
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: PUSH
63567: LD_VAR 0 4
63571: PUSH
63572: LD_INT 1
63574: PLUS
63575: ARRAY
63576: ST_TO_ADDR
63577: GO 63580
63579: POP
// temp_list2 = [ ] ;
63580: LD_ADDR_VAR 0 10
63584: PUSH
63585: EMPTY
63586: ST_TO_ADDR
// for i in temp_list do
63587: LD_ADDR_VAR 0 8
63591: PUSH
63592: LD_VAR 0 9
63596: PUSH
63597: FOR_IN
63598: IFFALSE 63650
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63600: LD_ADDR_VAR 0 10
63604: PUSH
63605: LD_VAR 0 10
63609: PUSH
63610: LD_VAR 0 8
63614: PUSH
63615: LD_INT 1
63617: ARRAY
63618: PUSH
63619: LD_VAR 0 2
63623: PLUS
63624: PUSH
63625: LD_VAR 0 8
63629: PUSH
63630: LD_INT 2
63632: ARRAY
63633: PUSH
63634: LD_VAR 0 3
63638: PLUS
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: EMPTY
63645: LIST
63646: ADD
63647: ST_TO_ADDR
63648: GO 63597
63650: POP
63651: POP
// result = temp_list2 ;
63652: LD_ADDR_VAR 0 7
63656: PUSH
63657: LD_VAR 0 10
63661: ST_TO_ADDR
// end ;
63662: LD_VAR 0 7
63666: RET
// export function EnemyInRange ( unit , dist ) ; begin
63667: LD_INT 0
63669: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63670: LD_ADDR_VAR 0 3
63674: PUSH
63675: LD_VAR 0 1
63679: PPUSH
63680: CALL_OW 255
63684: PPUSH
63685: LD_VAR 0 1
63689: PPUSH
63690: CALL_OW 250
63694: PPUSH
63695: LD_VAR 0 1
63699: PPUSH
63700: CALL_OW 251
63704: PPUSH
63705: LD_VAR 0 2
63709: PPUSH
63710: CALL 37069 0 4
63714: PUSH
63715: LD_INT 4
63717: ARRAY
63718: ST_TO_ADDR
// end ;
63719: LD_VAR 0 3
63723: RET
// export function PlayerSeeMe ( unit ) ; begin
63724: LD_INT 0
63726: PPUSH
// result := See ( your_side , unit ) ;
63727: LD_ADDR_VAR 0 2
63731: PUSH
63732: LD_OWVAR 2
63736: PPUSH
63737: LD_VAR 0 1
63741: PPUSH
63742: CALL_OW 292
63746: ST_TO_ADDR
// end ;
63747: LD_VAR 0 2
63751: RET
// export function ReverseDir ( unit ) ; begin
63752: LD_INT 0
63754: PPUSH
// if not unit then
63755: LD_VAR 0 1
63759: NOT
63760: IFFALSE 63764
// exit ;
63762: GO 63787
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63764: LD_ADDR_VAR 0 2
63768: PUSH
63769: LD_VAR 0 1
63773: PPUSH
63774: CALL_OW 254
63778: PUSH
63779: LD_INT 3
63781: PLUS
63782: PUSH
63783: LD_INT 6
63785: MOD
63786: ST_TO_ADDR
// end ;
63787: LD_VAR 0 2
63791: RET
// export function ReverseArray ( array ) ; var i ; begin
63792: LD_INT 0
63794: PPUSH
63795: PPUSH
// if not array then
63796: LD_VAR 0 1
63800: NOT
63801: IFFALSE 63805
// exit ;
63803: GO 63860
// result := [ ] ;
63805: LD_ADDR_VAR 0 2
63809: PUSH
63810: EMPTY
63811: ST_TO_ADDR
// for i := array downto 1 do
63812: LD_ADDR_VAR 0 3
63816: PUSH
63817: DOUBLE
63818: LD_VAR 0 1
63822: INC
63823: ST_TO_ADDR
63824: LD_INT 1
63826: PUSH
63827: FOR_DOWNTO
63828: IFFALSE 63858
// result := Join ( result , array [ i ] ) ;
63830: LD_ADDR_VAR 0 2
63834: PUSH
63835: LD_VAR 0 2
63839: PPUSH
63840: LD_VAR 0 1
63844: PUSH
63845: LD_VAR 0 3
63849: ARRAY
63850: PPUSH
63851: CALL 68504 0 2
63855: ST_TO_ADDR
63856: GO 63827
63858: POP
63859: POP
// end ;
63860: LD_VAR 0 2
63864: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63865: LD_INT 0
63867: PPUSH
63868: PPUSH
63869: PPUSH
63870: PPUSH
63871: PPUSH
63872: PPUSH
// if not unit or not hexes then
63873: LD_VAR 0 1
63877: NOT
63878: PUSH
63879: LD_VAR 0 2
63883: NOT
63884: OR
63885: IFFALSE 63889
// exit ;
63887: GO 64012
// dist := 9999 ;
63889: LD_ADDR_VAR 0 5
63893: PUSH
63894: LD_INT 9999
63896: ST_TO_ADDR
// for i = 1 to hexes do
63897: LD_ADDR_VAR 0 4
63901: PUSH
63902: DOUBLE
63903: LD_INT 1
63905: DEC
63906: ST_TO_ADDR
63907: LD_VAR 0 2
63911: PUSH
63912: FOR_TO
63913: IFFALSE 64000
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63915: LD_ADDR_VAR 0 6
63919: PUSH
63920: LD_VAR 0 1
63924: PPUSH
63925: LD_VAR 0 2
63929: PUSH
63930: LD_VAR 0 4
63934: ARRAY
63935: PUSH
63936: LD_INT 1
63938: ARRAY
63939: PPUSH
63940: LD_VAR 0 2
63944: PUSH
63945: LD_VAR 0 4
63949: ARRAY
63950: PUSH
63951: LD_INT 2
63953: ARRAY
63954: PPUSH
63955: CALL_OW 297
63959: ST_TO_ADDR
// if tdist < dist then
63960: LD_VAR 0 6
63964: PUSH
63965: LD_VAR 0 5
63969: LESS
63970: IFFALSE 63998
// begin hex := hexes [ i ] ;
63972: LD_ADDR_VAR 0 8
63976: PUSH
63977: LD_VAR 0 2
63981: PUSH
63982: LD_VAR 0 4
63986: ARRAY
63987: ST_TO_ADDR
// dist := tdist ;
63988: LD_ADDR_VAR 0 5
63992: PUSH
63993: LD_VAR 0 6
63997: ST_TO_ADDR
// end ; end ;
63998: GO 63912
64000: POP
64001: POP
// result := hex ;
64002: LD_ADDR_VAR 0 3
64006: PUSH
64007: LD_VAR 0 8
64011: ST_TO_ADDR
// end ;
64012: LD_VAR 0 3
64016: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64017: LD_INT 0
64019: PPUSH
64020: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64021: LD_VAR 0 1
64025: NOT
64026: PUSH
64027: LD_VAR 0 1
64031: PUSH
64032: LD_INT 21
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 23
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PPUSH
64056: CALL_OW 69
64060: IN
64061: NOT
64062: OR
64063: IFFALSE 64067
// exit ;
64065: GO 64114
// for i = 1 to 3 do
64067: LD_ADDR_VAR 0 3
64071: PUSH
64072: DOUBLE
64073: LD_INT 1
64075: DEC
64076: ST_TO_ADDR
64077: LD_INT 3
64079: PUSH
64080: FOR_TO
64081: IFFALSE 64112
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64083: LD_VAR 0 1
64087: PPUSH
64088: CALL_OW 250
64092: PPUSH
64093: LD_VAR 0 1
64097: PPUSH
64098: CALL_OW 251
64102: PPUSH
64103: LD_INT 1
64105: PPUSH
64106: CALL_OW 453
64110: GO 64080
64112: POP
64113: POP
// end ;
64114: LD_VAR 0 2
64118: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64119: LD_INT 0
64121: PPUSH
64122: PPUSH
64123: PPUSH
64124: PPUSH
64125: PPUSH
64126: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64127: LD_VAR 0 1
64131: NOT
64132: PUSH
64133: LD_VAR 0 2
64137: NOT
64138: OR
64139: PUSH
64140: LD_VAR 0 1
64144: PPUSH
64145: CALL_OW 314
64149: OR
64150: IFFALSE 64154
// exit ;
64152: GO 64621
// if GetLives ( i ) < 250 then
64154: LD_VAR 0 4
64158: PPUSH
64159: CALL_OW 256
64163: PUSH
64164: LD_INT 250
64166: LESS
64167: IFFALSE 64180
// begin ComAutodestruct ( i ) ;
64169: LD_VAR 0 4
64173: PPUSH
64174: CALL 64017 0 1
// exit ;
64178: GO 64621
// end ; x := GetX ( enemy_unit ) ;
64180: LD_ADDR_VAR 0 7
64184: PUSH
64185: LD_VAR 0 2
64189: PPUSH
64190: CALL_OW 250
64194: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64195: LD_ADDR_VAR 0 8
64199: PUSH
64200: LD_VAR 0 2
64204: PPUSH
64205: CALL_OW 251
64209: ST_TO_ADDR
// if not x or not y then
64210: LD_VAR 0 7
64214: NOT
64215: PUSH
64216: LD_VAR 0 8
64220: NOT
64221: OR
64222: IFFALSE 64226
// exit ;
64224: GO 64621
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64226: LD_ADDR_VAR 0 6
64230: PUSH
64231: LD_VAR 0 7
64235: PPUSH
64236: LD_INT 0
64238: PPUSH
64239: LD_INT 4
64241: PPUSH
64242: CALL_OW 272
64246: PUSH
64247: LD_VAR 0 8
64251: PPUSH
64252: LD_INT 0
64254: PPUSH
64255: LD_INT 4
64257: PPUSH
64258: CALL_OW 273
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_VAR 0 7
64271: PPUSH
64272: LD_INT 1
64274: PPUSH
64275: LD_INT 4
64277: PPUSH
64278: CALL_OW 272
64282: PUSH
64283: LD_VAR 0 8
64287: PPUSH
64288: LD_INT 1
64290: PPUSH
64291: LD_INT 4
64293: PPUSH
64294: CALL_OW 273
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_VAR 0 7
64307: PPUSH
64308: LD_INT 2
64310: PPUSH
64311: LD_INT 4
64313: PPUSH
64314: CALL_OW 272
64318: PUSH
64319: LD_VAR 0 8
64323: PPUSH
64324: LD_INT 2
64326: PPUSH
64327: LD_INT 4
64329: PPUSH
64330: CALL_OW 273
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_VAR 0 7
64343: PPUSH
64344: LD_INT 3
64346: PPUSH
64347: LD_INT 4
64349: PPUSH
64350: CALL_OW 272
64354: PUSH
64355: LD_VAR 0 8
64359: PPUSH
64360: LD_INT 3
64362: PPUSH
64363: LD_INT 4
64365: PPUSH
64366: CALL_OW 273
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_VAR 0 7
64379: PPUSH
64380: LD_INT 4
64382: PPUSH
64383: LD_INT 4
64385: PPUSH
64386: CALL_OW 272
64390: PUSH
64391: LD_VAR 0 8
64395: PPUSH
64396: LD_INT 4
64398: PPUSH
64399: LD_INT 4
64401: PPUSH
64402: CALL_OW 273
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_VAR 0 7
64415: PPUSH
64416: LD_INT 5
64418: PPUSH
64419: LD_INT 4
64421: PPUSH
64422: CALL_OW 272
64426: PUSH
64427: LD_VAR 0 8
64431: PPUSH
64432: LD_INT 5
64434: PPUSH
64435: LD_INT 4
64437: PPUSH
64438: CALL_OW 273
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: ST_TO_ADDR
// for i = tmp downto 1 do
64455: LD_ADDR_VAR 0 4
64459: PUSH
64460: DOUBLE
64461: LD_VAR 0 6
64465: INC
64466: ST_TO_ADDR
64467: LD_INT 1
64469: PUSH
64470: FOR_DOWNTO
64471: IFFALSE 64572
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64473: LD_VAR 0 6
64477: PUSH
64478: LD_VAR 0 4
64482: ARRAY
64483: PUSH
64484: LD_INT 1
64486: ARRAY
64487: PPUSH
64488: LD_VAR 0 6
64492: PUSH
64493: LD_VAR 0 4
64497: ARRAY
64498: PUSH
64499: LD_INT 2
64501: ARRAY
64502: PPUSH
64503: CALL_OW 488
64507: NOT
64508: PUSH
64509: LD_VAR 0 6
64513: PUSH
64514: LD_VAR 0 4
64518: ARRAY
64519: PUSH
64520: LD_INT 1
64522: ARRAY
64523: PPUSH
64524: LD_VAR 0 6
64528: PUSH
64529: LD_VAR 0 4
64533: ARRAY
64534: PUSH
64535: LD_INT 2
64537: ARRAY
64538: PPUSH
64539: CALL_OW 428
64543: PUSH
64544: LD_INT 0
64546: NONEQUAL
64547: OR
64548: IFFALSE 64570
// tmp := Delete ( tmp , i ) ;
64550: LD_ADDR_VAR 0 6
64554: PUSH
64555: LD_VAR 0 6
64559: PPUSH
64560: LD_VAR 0 4
64564: PPUSH
64565: CALL_OW 3
64569: ST_TO_ADDR
64570: GO 64470
64572: POP
64573: POP
// j := GetClosestHex ( unit , tmp ) ;
64574: LD_ADDR_VAR 0 5
64578: PUSH
64579: LD_VAR 0 1
64583: PPUSH
64584: LD_VAR 0 6
64588: PPUSH
64589: CALL 63865 0 2
64593: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64594: LD_VAR 0 1
64598: PPUSH
64599: LD_VAR 0 5
64603: PUSH
64604: LD_INT 1
64606: ARRAY
64607: PPUSH
64608: LD_VAR 0 5
64612: PUSH
64613: LD_INT 2
64615: ARRAY
64616: PPUSH
64617: CALL_OW 111
// end ;
64621: LD_VAR 0 3
64625: RET
// export function PrepareApemanSoldier ( ) ; begin
64626: LD_INT 0
64628: PPUSH
// uc_nation := 0 ;
64629: LD_ADDR_OWVAR 21
64633: PUSH
64634: LD_INT 0
64636: ST_TO_ADDR
// hc_sex := sex_male ;
64637: LD_ADDR_OWVAR 27
64641: PUSH
64642: LD_INT 1
64644: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64645: LD_ADDR_OWVAR 28
64649: PUSH
64650: LD_INT 15
64652: ST_TO_ADDR
// hc_gallery :=  ;
64653: LD_ADDR_OWVAR 33
64657: PUSH
64658: LD_STRING 
64660: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64661: LD_ADDR_OWVAR 31
64665: PUSH
64666: LD_INT 0
64668: PPUSH
64669: LD_INT 3
64671: PPUSH
64672: CALL_OW 12
64676: PUSH
64677: LD_INT 0
64679: PPUSH
64680: LD_INT 3
64682: PPUSH
64683: CALL_OW 12
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: ST_TO_ADDR
// end ;
64700: LD_VAR 0 1
64704: RET
// export function PrepareApemanEngineer ( ) ; begin
64705: LD_INT 0
64707: PPUSH
// uc_nation := 0 ;
64708: LD_ADDR_OWVAR 21
64712: PUSH
64713: LD_INT 0
64715: ST_TO_ADDR
// hc_sex := sex_male ;
64716: LD_ADDR_OWVAR 27
64720: PUSH
64721: LD_INT 1
64723: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64724: LD_ADDR_OWVAR 28
64728: PUSH
64729: LD_INT 16
64731: ST_TO_ADDR
// hc_gallery :=  ;
64732: LD_ADDR_OWVAR 33
64736: PUSH
64737: LD_STRING 
64739: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64740: LD_ADDR_OWVAR 31
64744: PUSH
64745: LD_INT 0
64747: PPUSH
64748: LD_INT 3
64750: PPUSH
64751: CALL_OW 12
64755: PUSH
64756: LD_INT 0
64758: PPUSH
64759: LD_INT 3
64761: PPUSH
64762: CALL_OW 12
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: ST_TO_ADDR
// end ;
64779: LD_VAR 0 1
64783: RET
// export function PrepareApeman ( agressivity ) ; begin
64784: LD_INT 0
64786: PPUSH
// uc_side := 0 ;
64787: LD_ADDR_OWVAR 20
64791: PUSH
64792: LD_INT 0
64794: ST_TO_ADDR
// uc_nation := 0 ;
64795: LD_ADDR_OWVAR 21
64799: PUSH
64800: LD_INT 0
64802: ST_TO_ADDR
// hc_sex := sex_male ;
64803: LD_ADDR_OWVAR 27
64807: PUSH
64808: LD_INT 1
64810: ST_TO_ADDR
// hc_class := class_apeman ;
64811: LD_ADDR_OWVAR 28
64815: PUSH
64816: LD_INT 12
64818: ST_TO_ADDR
// hc_gallery :=  ;
64819: LD_ADDR_OWVAR 33
64823: PUSH
64824: LD_STRING 
64826: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64827: LD_ADDR_OWVAR 35
64831: PUSH
64832: LD_VAR 0 1
64836: NEG
64837: PPUSH
64838: LD_VAR 0 1
64842: PPUSH
64843: CALL_OW 12
64847: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64848: LD_ADDR_OWVAR 31
64852: PUSH
64853: LD_INT 0
64855: PPUSH
64856: LD_INT 3
64858: PPUSH
64859: CALL_OW 12
64863: PUSH
64864: LD_INT 0
64866: PPUSH
64867: LD_INT 3
64869: PPUSH
64870: CALL_OW 12
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: ST_TO_ADDR
// end ;
64887: LD_VAR 0 2
64891: RET
// export function PrepareTiger ( agressivity ) ; begin
64892: LD_INT 0
64894: PPUSH
// uc_side := 0 ;
64895: LD_ADDR_OWVAR 20
64899: PUSH
64900: LD_INT 0
64902: ST_TO_ADDR
// uc_nation := 0 ;
64903: LD_ADDR_OWVAR 21
64907: PUSH
64908: LD_INT 0
64910: ST_TO_ADDR
// hc_class := class_tiger ;
64911: LD_ADDR_OWVAR 28
64915: PUSH
64916: LD_INT 14
64918: ST_TO_ADDR
// hc_gallery :=  ;
64919: LD_ADDR_OWVAR 33
64923: PUSH
64924: LD_STRING 
64926: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64927: LD_ADDR_OWVAR 35
64931: PUSH
64932: LD_VAR 0 1
64936: NEG
64937: PPUSH
64938: LD_VAR 0 1
64942: PPUSH
64943: CALL_OW 12
64947: ST_TO_ADDR
// end ;
64948: LD_VAR 0 2
64952: RET
// export function PrepareEnchidna ( ) ; begin
64953: LD_INT 0
64955: PPUSH
// uc_side := 0 ;
64956: LD_ADDR_OWVAR 20
64960: PUSH
64961: LD_INT 0
64963: ST_TO_ADDR
// uc_nation := 0 ;
64964: LD_ADDR_OWVAR 21
64968: PUSH
64969: LD_INT 0
64971: ST_TO_ADDR
// hc_class := class_baggie ;
64972: LD_ADDR_OWVAR 28
64976: PUSH
64977: LD_INT 13
64979: ST_TO_ADDR
// hc_gallery :=  ;
64980: LD_ADDR_OWVAR 33
64984: PUSH
64985: LD_STRING 
64987: ST_TO_ADDR
// end ;
64988: LD_VAR 0 1
64992: RET
// export function PrepareFrog ( ) ; begin
64993: LD_INT 0
64995: PPUSH
// uc_side := 0 ;
64996: LD_ADDR_OWVAR 20
65000: PUSH
65001: LD_INT 0
65003: ST_TO_ADDR
// uc_nation := 0 ;
65004: LD_ADDR_OWVAR 21
65008: PUSH
65009: LD_INT 0
65011: ST_TO_ADDR
// hc_class := class_frog ;
65012: LD_ADDR_OWVAR 28
65016: PUSH
65017: LD_INT 19
65019: ST_TO_ADDR
// hc_gallery :=  ;
65020: LD_ADDR_OWVAR 33
65024: PUSH
65025: LD_STRING 
65027: ST_TO_ADDR
// end ;
65028: LD_VAR 0 1
65032: RET
// export function PrepareFish ( ) ; begin
65033: LD_INT 0
65035: PPUSH
// uc_side := 0 ;
65036: LD_ADDR_OWVAR 20
65040: PUSH
65041: LD_INT 0
65043: ST_TO_ADDR
// uc_nation := 0 ;
65044: LD_ADDR_OWVAR 21
65048: PUSH
65049: LD_INT 0
65051: ST_TO_ADDR
// hc_class := class_fish ;
65052: LD_ADDR_OWVAR 28
65056: PUSH
65057: LD_INT 20
65059: ST_TO_ADDR
// hc_gallery :=  ;
65060: LD_ADDR_OWVAR 33
65064: PUSH
65065: LD_STRING 
65067: ST_TO_ADDR
// end ;
65068: LD_VAR 0 1
65072: RET
// export function PrepareBird ( ) ; begin
65073: LD_INT 0
65075: PPUSH
// uc_side := 0 ;
65076: LD_ADDR_OWVAR 20
65080: PUSH
65081: LD_INT 0
65083: ST_TO_ADDR
// uc_nation := 0 ;
65084: LD_ADDR_OWVAR 21
65088: PUSH
65089: LD_INT 0
65091: ST_TO_ADDR
// hc_class := class_phororhacos ;
65092: LD_ADDR_OWVAR 28
65096: PUSH
65097: LD_INT 18
65099: ST_TO_ADDR
// hc_gallery :=  ;
65100: LD_ADDR_OWVAR 33
65104: PUSH
65105: LD_STRING 
65107: ST_TO_ADDR
// end ;
65108: LD_VAR 0 1
65112: RET
// export function PrepareHorse ( ) ; begin
65113: LD_INT 0
65115: PPUSH
// uc_side := 0 ;
65116: LD_ADDR_OWVAR 20
65120: PUSH
65121: LD_INT 0
65123: ST_TO_ADDR
// uc_nation := 0 ;
65124: LD_ADDR_OWVAR 21
65128: PUSH
65129: LD_INT 0
65131: ST_TO_ADDR
// hc_class := class_horse ;
65132: LD_ADDR_OWVAR 28
65136: PUSH
65137: LD_INT 21
65139: ST_TO_ADDR
// hc_gallery :=  ;
65140: LD_ADDR_OWVAR 33
65144: PUSH
65145: LD_STRING 
65147: ST_TO_ADDR
// end ;
65148: LD_VAR 0 1
65152: RET
// export function PrepareMastodont ( ) ; begin
65153: LD_INT 0
65155: PPUSH
// uc_side := 0 ;
65156: LD_ADDR_OWVAR 20
65160: PUSH
65161: LD_INT 0
65163: ST_TO_ADDR
// uc_nation := 0 ;
65164: LD_ADDR_OWVAR 21
65168: PUSH
65169: LD_INT 0
65171: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65172: LD_ADDR_OWVAR 37
65176: PUSH
65177: LD_INT 31
65179: ST_TO_ADDR
// vc_control := control_rider ;
65180: LD_ADDR_OWVAR 38
65184: PUSH
65185: LD_INT 4
65187: ST_TO_ADDR
// end ;
65188: LD_VAR 0 1
65192: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65193: LD_INT 0
65195: PPUSH
65196: PPUSH
65197: PPUSH
// uc_side = 0 ;
65198: LD_ADDR_OWVAR 20
65202: PUSH
65203: LD_INT 0
65205: ST_TO_ADDR
// uc_nation = 0 ;
65206: LD_ADDR_OWVAR 21
65210: PUSH
65211: LD_INT 0
65213: ST_TO_ADDR
// InitHc_All ( ) ;
65214: CALL_OW 584
// InitVc ;
65218: CALL_OW 20
// if mastodonts then
65222: LD_VAR 0 6
65226: IFFALSE 65293
// for i = 1 to mastodonts do
65228: LD_ADDR_VAR 0 11
65232: PUSH
65233: DOUBLE
65234: LD_INT 1
65236: DEC
65237: ST_TO_ADDR
65238: LD_VAR 0 6
65242: PUSH
65243: FOR_TO
65244: IFFALSE 65291
// begin vc_chassis := 31 ;
65246: LD_ADDR_OWVAR 37
65250: PUSH
65251: LD_INT 31
65253: ST_TO_ADDR
// vc_control := control_rider ;
65254: LD_ADDR_OWVAR 38
65258: PUSH
65259: LD_INT 4
65261: ST_TO_ADDR
// animal := CreateVehicle ;
65262: LD_ADDR_VAR 0 12
65266: PUSH
65267: CALL_OW 45
65271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65272: LD_VAR 0 12
65276: PPUSH
65277: LD_VAR 0 8
65281: PPUSH
65282: LD_INT 0
65284: PPUSH
65285: CALL 67421 0 3
// end ;
65289: GO 65243
65291: POP
65292: POP
// if horses then
65293: LD_VAR 0 5
65297: IFFALSE 65364
// for i = 1 to horses do
65299: LD_ADDR_VAR 0 11
65303: PUSH
65304: DOUBLE
65305: LD_INT 1
65307: DEC
65308: ST_TO_ADDR
65309: LD_VAR 0 5
65313: PUSH
65314: FOR_TO
65315: IFFALSE 65362
// begin hc_class := 21 ;
65317: LD_ADDR_OWVAR 28
65321: PUSH
65322: LD_INT 21
65324: ST_TO_ADDR
// hc_gallery :=  ;
65325: LD_ADDR_OWVAR 33
65329: PUSH
65330: LD_STRING 
65332: ST_TO_ADDR
// animal := CreateHuman ;
65333: LD_ADDR_VAR 0 12
65337: PUSH
65338: CALL_OW 44
65342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65343: LD_VAR 0 12
65347: PPUSH
65348: LD_VAR 0 8
65352: PPUSH
65353: LD_INT 0
65355: PPUSH
65356: CALL 67421 0 3
// end ;
65360: GO 65314
65362: POP
65363: POP
// if birds then
65364: LD_VAR 0 1
65368: IFFALSE 65435
// for i = 1 to birds do
65370: LD_ADDR_VAR 0 11
65374: PUSH
65375: DOUBLE
65376: LD_INT 1
65378: DEC
65379: ST_TO_ADDR
65380: LD_VAR 0 1
65384: PUSH
65385: FOR_TO
65386: IFFALSE 65433
// begin hc_class = 18 ;
65388: LD_ADDR_OWVAR 28
65392: PUSH
65393: LD_INT 18
65395: ST_TO_ADDR
// hc_gallery =  ;
65396: LD_ADDR_OWVAR 33
65400: PUSH
65401: LD_STRING 
65403: ST_TO_ADDR
// animal := CreateHuman ;
65404: LD_ADDR_VAR 0 12
65408: PUSH
65409: CALL_OW 44
65413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65414: LD_VAR 0 12
65418: PPUSH
65419: LD_VAR 0 8
65423: PPUSH
65424: LD_INT 0
65426: PPUSH
65427: CALL 67421 0 3
// end ;
65431: GO 65385
65433: POP
65434: POP
// if tigers then
65435: LD_VAR 0 2
65439: IFFALSE 65523
// for i = 1 to tigers do
65441: LD_ADDR_VAR 0 11
65445: PUSH
65446: DOUBLE
65447: LD_INT 1
65449: DEC
65450: ST_TO_ADDR
65451: LD_VAR 0 2
65455: PUSH
65456: FOR_TO
65457: IFFALSE 65521
// begin hc_class = class_tiger ;
65459: LD_ADDR_OWVAR 28
65463: PUSH
65464: LD_INT 14
65466: ST_TO_ADDR
// hc_gallery =  ;
65467: LD_ADDR_OWVAR 33
65471: PUSH
65472: LD_STRING 
65474: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65475: LD_ADDR_OWVAR 35
65479: PUSH
65480: LD_INT 7
65482: NEG
65483: PPUSH
65484: LD_INT 7
65486: PPUSH
65487: CALL_OW 12
65491: ST_TO_ADDR
// animal := CreateHuman ;
65492: LD_ADDR_VAR 0 12
65496: PUSH
65497: CALL_OW 44
65501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65502: LD_VAR 0 12
65506: PPUSH
65507: LD_VAR 0 8
65511: PPUSH
65512: LD_INT 0
65514: PPUSH
65515: CALL 67421 0 3
// end ;
65519: GO 65456
65521: POP
65522: POP
// if apemans then
65523: LD_VAR 0 3
65527: IFFALSE 65650
// for i = 1 to apemans do
65529: LD_ADDR_VAR 0 11
65533: PUSH
65534: DOUBLE
65535: LD_INT 1
65537: DEC
65538: ST_TO_ADDR
65539: LD_VAR 0 3
65543: PUSH
65544: FOR_TO
65545: IFFALSE 65648
// begin hc_class = class_apeman ;
65547: LD_ADDR_OWVAR 28
65551: PUSH
65552: LD_INT 12
65554: ST_TO_ADDR
// hc_gallery =  ;
65555: LD_ADDR_OWVAR 33
65559: PUSH
65560: LD_STRING 
65562: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65563: LD_ADDR_OWVAR 35
65567: PUSH
65568: LD_INT 2
65570: NEG
65571: PPUSH
65572: LD_INT 2
65574: PPUSH
65575: CALL_OW 12
65579: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65580: LD_ADDR_OWVAR 31
65584: PUSH
65585: LD_INT 1
65587: PPUSH
65588: LD_INT 3
65590: PPUSH
65591: CALL_OW 12
65595: PUSH
65596: LD_INT 1
65598: PPUSH
65599: LD_INT 3
65601: PPUSH
65602: CALL_OW 12
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: ST_TO_ADDR
// animal := CreateHuman ;
65619: LD_ADDR_VAR 0 12
65623: PUSH
65624: CALL_OW 44
65628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65629: LD_VAR 0 12
65633: PPUSH
65634: LD_VAR 0 8
65638: PPUSH
65639: LD_INT 0
65641: PPUSH
65642: CALL 67421 0 3
// end ;
65646: GO 65544
65648: POP
65649: POP
// if enchidnas then
65650: LD_VAR 0 4
65654: IFFALSE 65721
// for i = 1 to enchidnas do
65656: LD_ADDR_VAR 0 11
65660: PUSH
65661: DOUBLE
65662: LD_INT 1
65664: DEC
65665: ST_TO_ADDR
65666: LD_VAR 0 4
65670: PUSH
65671: FOR_TO
65672: IFFALSE 65719
// begin hc_class = 13 ;
65674: LD_ADDR_OWVAR 28
65678: PUSH
65679: LD_INT 13
65681: ST_TO_ADDR
// hc_gallery =  ;
65682: LD_ADDR_OWVAR 33
65686: PUSH
65687: LD_STRING 
65689: ST_TO_ADDR
// animal := CreateHuman ;
65690: LD_ADDR_VAR 0 12
65694: PUSH
65695: CALL_OW 44
65699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65700: LD_VAR 0 12
65704: PPUSH
65705: LD_VAR 0 8
65709: PPUSH
65710: LD_INT 0
65712: PPUSH
65713: CALL 67421 0 3
// end ;
65717: GO 65671
65719: POP
65720: POP
// if fishes then
65721: LD_VAR 0 7
65725: IFFALSE 65792
// for i = 1 to fishes do
65727: LD_ADDR_VAR 0 11
65731: PUSH
65732: DOUBLE
65733: LD_INT 1
65735: DEC
65736: ST_TO_ADDR
65737: LD_VAR 0 7
65741: PUSH
65742: FOR_TO
65743: IFFALSE 65790
// begin hc_class = 20 ;
65745: LD_ADDR_OWVAR 28
65749: PUSH
65750: LD_INT 20
65752: ST_TO_ADDR
// hc_gallery =  ;
65753: LD_ADDR_OWVAR 33
65757: PUSH
65758: LD_STRING 
65760: ST_TO_ADDR
// animal := CreateHuman ;
65761: LD_ADDR_VAR 0 12
65765: PUSH
65766: CALL_OW 44
65770: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65771: LD_VAR 0 12
65775: PPUSH
65776: LD_VAR 0 9
65780: PPUSH
65781: LD_INT 0
65783: PPUSH
65784: CALL 67421 0 3
// end ;
65788: GO 65742
65790: POP
65791: POP
// end ;
65792: LD_VAR 0 10
65796: RET
// export function WantHeal ( sci , unit ) ; begin
65797: LD_INT 0
65799: PPUSH
// if GetTaskList ( sci ) > 0 then
65800: LD_VAR 0 1
65804: PPUSH
65805: CALL_OW 437
65809: PUSH
65810: LD_INT 0
65812: GREATER
65813: IFFALSE 65883
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65815: LD_VAR 0 1
65819: PPUSH
65820: CALL_OW 437
65824: PUSH
65825: LD_INT 1
65827: ARRAY
65828: PUSH
65829: LD_INT 1
65831: ARRAY
65832: PUSH
65833: LD_STRING l
65835: EQUAL
65836: PUSH
65837: LD_VAR 0 1
65841: PPUSH
65842: CALL_OW 437
65846: PUSH
65847: LD_INT 1
65849: ARRAY
65850: PUSH
65851: LD_INT 4
65853: ARRAY
65854: PUSH
65855: LD_VAR 0 2
65859: EQUAL
65860: AND
65861: IFFALSE 65873
// result := true else
65863: LD_ADDR_VAR 0 3
65867: PUSH
65868: LD_INT 1
65870: ST_TO_ADDR
65871: GO 65881
// result := false ;
65873: LD_ADDR_VAR 0 3
65877: PUSH
65878: LD_INT 0
65880: ST_TO_ADDR
// end else
65881: GO 65891
// result := false ;
65883: LD_ADDR_VAR 0 3
65887: PUSH
65888: LD_INT 0
65890: ST_TO_ADDR
// end ;
65891: LD_VAR 0 3
65895: RET
// export function HealTarget ( sci ) ; begin
65896: LD_INT 0
65898: PPUSH
// if not sci then
65899: LD_VAR 0 1
65903: NOT
65904: IFFALSE 65908
// exit ;
65906: GO 65973
// result := 0 ;
65908: LD_ADDR_VAR 0 2
65912: PUSH
65913: LD_INT 0
65915: ST_TO_ADDR
// if GetTaskList ( sci ) then
65916: LD_VAR 0 1
65920: PPUSH
65921: CALL_OW 437
65925: IFFALSE 65973
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65927: LD_VAR 0 1
65931: PPUSH
65932: CALL_OW 437
65936: PUSH
65937: LD_INT 1
65939: ARRAY
65940: PUSH
65941: LD_INT 1
65943: ARRAY
65944: PUSH
65945: LD_STRING l
65947: EQUAL
65948: IFFALSE 65973
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65950: LD_ADDR_VAR 0 2
65954: PUSH
65955: LD_VAR 0 1
65959: PPUSH
65960: CALL_OW 437
65964: PUSH
65965: LD_INT 1
65967: ARRAY
65968: PUSH
65969: LD_INT 4
65971: ARRAY
65972: ST_TO_ADDR
// end ;
65973: LD_VAR 0 2
65977: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65978: LD_INT 0
65980: PPUSH
65981: PPUSH
65982: PPUSH
65983: PPUSH
// if not base_units then
65984: LD_VAR 0 1
65988: NOT
65989: IFFALSE 65993
// exit ;
65991: GO 66080
// result := false ;
65993: LD_ADDR_VAR 0 2
65997: PUSH
65998: LD_INT 0
66000: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66001: LD_ADDR_VAR 0 5
66005: PUSH
66006: LD_VAR 0 1
66010: PPUSH
66011: LD_INT 21
66013: PUSH
66014: LD_INT 3
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PPUSH
66021: CALL_OW 72
66025: ST_TO_ADDR
// if not tmp then
66026: LD_VAR 0 5
66030: NOT
66031: IFFALSE 66035
// exit ;
66033: GO 66080
// for i in tmp do
66035: LD_ADDR_VAR 0 3
66039: PUSH
66040: LD_VAR 0 5
66044: PUSH
66045: FOR_IN
66046: IFFALSE 66078
// begin result := EnemyInRange ( i , 22 ) ;
66048: LD_ADDR_VAR 0 2
66052: PUSH
66053: LD_VAR 0 3
66057: PPUSH
66058: LD_INT 22
66060: PPUSH
66061: CALL 63667 0 2
66065: ST_TO_ADDR
// if result then
66066: LD_VAR 0 2
66070: IFFALSE 66076
// exit ;
66072: POP
66073: POP
66074: GO 66080
// end ;
66076: GO 66045
66078: POP
66079: POP
// end ;
66080: LD_VAR 0 2
66084: RET
// export function FilterByTag ( units , tag ) ; begin
66085: LD_INT 0
66087: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66088: LD_ADDR_VAR 0 3
66092: PUSH
66093: LD_VAR 0 1
66097: PPUSH
66098: LD_INT 120
66100: PUSH
66101: LD_VAR 0 2
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PPUSH
66110: CALL_OW 72
66114: ST_TO_ADDR
// end ;
66115: LD_VAR 0 3
66119: RET
// export function IsDriver ( un ) ; begin
66120: LD_INT 0
66122: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66123: LD_ADDR_VAR 0 2
66127: PUSH
66128: LD_VAR 0 1
66132: PUSH
66133: LD_INT 55
66135: PUSH
66136: EMPTY
66137: LIST
66138: PPUSH
66139: CALL_OW 69
66143: IN
66144: ST_TO_ADDR
// end ;
66145: LD_VAR 0 2
66149: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66150: LD_INT 0
66152: PPUSH
66153: PPUSH
// list := [ ] ;
66154: LD_ADDR_VAR 0 5
66158: PUSH
66159: EMPTY
66160: ST_TO_ADDR
// case d of 0 :
66161: LD_VAR 0 3
66165: PUSH
66166: LD_INT 0
66168: DOUBLE
66169: EQUAL
66170: IFTRUE 66174
66172: GO 66307
66174: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66175: LD_ADDR_VAR 0 5
66179: PUSH
66180: LD_VAR 0 1
66184: PUSH
66185: LD_INT 4
66187: MINUS
66188: PUSH
66189: LD_VAR 0 2
66193: PUSH
66194: LD_INT 4
66196: MINUS
66197: PUSH
66198: LD_INT 2
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: PUSH
66206: LD_VAR 0 1
66210: PUSH
66211: LD_INT 3
66213: MINUS
66214: PUSH
66215: LD_VAR 0 2
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: LIST
66227: PUSH
66228: LD_VAR 0 1
66232: PUSH
66233: LD_INT 4
66235: PLUS
66236: PUSH
66237: LD_VAR 0 2
66241: PUSH
66242: LD_INT 4
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: PUSH
66250: LD_VAR 0 1
66254: PUSH
66255: LD_INT 3
66257: PLUS
66258: PUSH
66259: LD_VAR 0 2
66263: PUSH
66264: LD_INT 3
66266: PLUS
66267: PUSH
66268: LD_INT 5
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: PUSH
66276: LD_VAR 0 1
66280: PUSH
66281: LD_VAR 0 2
66285: PUSH
66286: LD_INT 4
66288: PLUS
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: LIST
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: ST_TO_ADDR
// end ; 1 :
66305: GO 67005
66307: LD_INT 1
66309: DOUBLE
66310: EQUAL
66311: IFTRUE 66315
66313: GO 66448
66315: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66316: LD_ADDR_VAR 0 5
66320: PUSH
66321: LD_VAR 0 1
66325: PUSH
66326: LD_VAR 0 2
66330: PUSH
66331: LD_INT 4
66333: MINUS
66334: PUSH
66335: LD_INT 3
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: PUSH
66343: LD_VAR 0 1
66347: PUSH
66348: LD_INT 3
66350: MINUS
66351: PUSH
66352: LD_VAR 0 2
66356: PUSH
66357: LD_INT 3
66359: MINUS
66360: PUSH
66361: LD_INT 2
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: PUSH
66369: LD_VAR 0 1
66373: PUSH
66374: LD_INT 4
66376: MINUS
66377: PUSH
66378: LD_VAR 0 2
66382: PUSH
66383: LD_INT 1
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: LIST
66390: PUSH
66391: LD_VAR 0 1
66395: PUSH
66396: LD_VAR 0 2
66400: PUSH
66401: LD_INT 3
66403: PLUS
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: PUSH
66413: LD_VAR 0 1
66417: PUSH
66418: LD_INT 4
66420: PLUS
66421: PUSH
66422: LD_VAR 0 2
66426: PUSH
66427: LD_INT 4
66429: PLUS
66430: PUSH
66431: LD_INT 5
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: LIST
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: ST_TO_ADDR
// end ; 2 :
66446: GO 67005
66448: LD_INT 2
66450: DOUBLE
66451: EQUAL
66452: IFTRUE 66456
66454: GO 66585
66456: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66457: LD_ADDR_VAR 0 5
66461: PUSH
66462: LD_VAR 0 1
66466: PUSH
66467: LD_VAR 0 2
66471: PUSH
66472: LD_INT 3
66474: MINUS
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: LIST
66483: PUSH
66484: LD_VAR 0 1
66488: PUSH
66489: LD_INT 4
66491: PLUS
66492: PUSH
66493: LD_VAR 0 2
66497: PUSH
66498: LD_INT 4
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: LIST
66505: PUSH
66506: LD_VAR 0 1
66510: PUSH
66511: LD_VAR 0 2
66515: PUSH
66516: LD_INT 4
66518: PLUS
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: LIST
66527: PUSH
66528: LD_VAR 0 1
66532: PUSH
66533: LD_INT 3
66535: MINUS
66536: PUSH
66537: LD_VAR 0 2
66541: PUSH
66542: LD_INT 1
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: PUSH
66550: LD_VAR 0 1
66554: PUSH
66555: LD_INT 4
66557: MINUS
66558: PUSH
66559: LD_VAR 0 2
66563: PUSH
66564: LD_INT 4
66566: MINUS
66567: PUSH
66568: LD_INT 2
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: LIST
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: ST_TO_ADDR
// end ; 3 :
66583: GO 67005
66585: LD_INT 3
66587: DOUBLE
66588: EQUAL
66589: IFTRUE 66593
66591: GO 66726
66593: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66594: LD_ADDR_VAR 0 5
66598: PUSH
66599: LD_VAR 0 1
66603: PUSH
66604: LD_INT 3
66606: PLUS
66607: PUSH
66608: LD_VAR 0 2
66612: PUSH
66613: LD_INT 4
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: LIST
66620: PUSH
66621: LD_VAR 0 1
66625: PUSH
66626: LD_INT 4
66628: PLUS
66629: PUSH
66630: LD_VAR 0 2
66634: PUSH
66635: LD_INT 4
66637: PLUS
66638: PUSH
66639: LD_INT 5
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: LIST
66646: PUSH
66647: LD_VAR 0 1
66651: PUSH
66652: LD_INT 4
66654: MINUS
66655: PUSH
66656: LD_VAR 0 2
66660: PUSH
66661: LD_INT 1
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: LIST
66668: PUSH
66669: LD_VAR 0 1
66673: PUSH
66674: LD_VAR 0 2
66678: PUSH
66679: LD_INT 4
66681: MINUS
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: PUSH
66691: LD_VAR 0 1
66695: PUSH
66696: LD_INT 3
66698: MINUS
66699: PUSH
66700: LD_VAR 0 2
66704: PUSH
66705: LD_INT 3
66707: MINUS
66708: PUSH
66709: LD_INT 2
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: ST_TO_ADDR
// end ; 4 :
66724: GO 67005
66726: LD_INT 4
66728: DOUBLE
66729: EQUAL
66730: IFTRUE 66734
66732: GO 66867
66734: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66735: LD_ADDR_VAR 0 5
66739: PUSH
66740: LD_VAR 0 1
66744: PUSH
66745: LD_VAR 0 2
66749: PUSH
66750: LD_INT 4
66752: PLUS
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: LIST
66761: PUSH
66762: LD_VAR 0 1
66766: PUSH
66767: LD_INT 3
66769: PLUS
66770: PUSH
66771: LD_VAR 0 2
66775: PUSH
66776: LD_INT 3
66778: PLUS
66779: PUSH
66780: LD_INT 5
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: PUSH
66788: LD_VAR 0 1
66792: PUSH
66793: LD_INT 4
66795: PLUS
66796: PUSH
66797: LD_VAR 0 2
66801: PUSH
66802: LD_INT 4
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: LIST
66809: PUSH
66810: LD_VAR 0 1
66814: PUSH
66815: LD_VAR 0 2
66819: PUSH
66820: LD_INT 3
66822: MINUS
66823: PUSH
66824: LD_INT 3
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: LIST
66831: PUSH
66832: LD_VAR 0 1
66836: PUSH
66837: LD_INT 4
66839: MINUS
66840: PUSH
66841: LD_VAR 0 2
66845: PUSH
66846: LD_INT 4
66848: MINUS
66849: PUSH
66850: LD_INT 2
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: LIST
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: ST_TO_ADDR
// end ; 5 :
66865: GO 67005
66867: LD_INT 5
66869: DOUBLE
66870: EQUAL
66871: IFTRUE 66875
66873: GO 67004
66875: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66876: LD_ADDR_VAR 0 5
66880: PUSH
66881: LD_VAR 0 1
66885: PUSH
66886: LD_INT 4
66888: MINUS
66889: PUSH
66890: LD_VAR 0 2
66894: PUSH
66895: LD_INT 1
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: LIST
66902: PUSH
66903: LD_VAR 0 1
66907: PUSH
66908: LD_VAR 0 2
66912: PUSH
66913: LD_INT 4
66915: MINUS
66916: PUSH
66917: LD_INT 3
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: LIST
66924: PUSH
66925: LD_VAR 0 1
66929: PUSH
66930: LD_INT 4
66932: PLUS
66933: PUSH
66934: LD_VAR 0 2
66938: PUSH
66939: LD_INT 4
66941: PLUS
66942: PUSH
66943: LD_INT 5
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: PUSH
66951: LD_VAR 0 1
66955: PUSH
66956: LD_INT 3
66958: PLUS
66959: PUSH
66960: LD_VAR 0 2
66964: PUSH
66965: LD_INT 4
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: LIST
66972: PUSH
66973: LD_VAR 0 1
66977: PUSH
66978: LD_VAR 0 2
66982: PUSH
66983: LD_INT 3
66985: PLUS
66986: PUSH
66987: LD_INT 0
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: ST_TO_ADDR
// end ; end ;
67002: GO 67005
67004: POP
// result := list ;
67005: LD_ADDR_VAR 0 4
67009: PUSH
67010: LD_VAR 0 5
67014: ST_TO_ADDR
// end ;
67015: LD_VAR 0 4
67019: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67020: LD_INT 0
67022: PPUSH
67023: PPUSH
67024: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67025: LD_VAR 0 1
67029: NOT
67030: PUSH
67031: LD_VAR 0 2
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: LD_INT 3
67044: PUSH
67045: LD_INT 4
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: IN
67054: NOT
67055: OR
67056: IFFALSE 67060
// exit ;
67058: GO 67143
// tmp := [ ] ;
67060: LD_ADDR_VAR 0 5
67064: PUSH
67065: EMPTY
67066: ST_TO_ADDR
// for i in units do
67067: LD_ADDR_VAR 0 4
67071: PUSH
67072: LD_VAR 0 1
67076: PUSH
67077: FOR_IN
67078: IFFALSE 67112
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67080: LD_ADDR_VAR 0 5
67084: PUSH
67085: LD_VAR 0 5
67089: PPUSH
67090: LD_VAR 0 4
67094: PPUSH
67095: LD_VAR 0 2
67099: PPUSH
67100: CALL_OW 259
67104: PPUSH
67105: CALL 68504 0 2
67109: ST_TO_ADDR
67110: GO 67077
67112: POP
67113: POP
// if not tmp then
67114: LD_VAR 0 5
67118: NOT
67119: IFFALSE 67123
// exit ;
67121: GO 67143
// result := SortListByListDesc ( units , tmp ) ;
67123: LD_ADDR_VAR 0 3
67127: PUSH
67128: LD_VAR 0 1
67132: PPUSH
67133: LD_VAR 0 5
67137: PPUSH
67138: CALL_OW 77
67142: ST_TO_ADDR
// end ;
67143: LD_VAR 0 3
67147: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67148: LD_INT 0
67150: PPUSH
67151: PPUSH
67152: PPUSH
// result := false ;
67153: LD_ADDR_VAR 0 3
67157: PUSH
67158: LD_INT 0
67160: ST_TO_ADDR
// if not building then
67161: LD_VAR 0 2
67165: NOT
67166: IFFALSE 67170
// exit ;
67168: GO 67308
// x := GetX ( building ) ;
67170: LD_ADDR_VAR 0 4
67174: PUSH
67175: LD_VAR 0 2
67179: PPUSH
67180: CALL_OW 250
67184: ST_TO_ADDR
// y := GetY ( building ) ;
67185: LD_ADDR_VAR 0 5
67189: PUSH
67190: LD_VAR 0 2
67194: PPUSH
67195: CALL_OW 251
67199: ST_TO_ADDR
// if not x or not y then
67200: LD_VAR 0 4
67204: NOT
67205: PUSH
67206: LD_VAR 0 5
67210: NOT
67211: OR
67212: IFFALSE 67216
// exit ;
67214: GO 67308
// if GetTaskList ( unit ) then
67216: LD_VAR 0 1
67220: PPUSH
67221: CALL_OW 437
67225: IFFALSE 67308
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67227: LD_STRING e
67229: PUSH
67230: LD_VAR 0 1
67234: PPUSH
67235: CALL_OW 437
67239: PUSH
67240: LD_INT 1
67242: ARRAY
67243: PUSH
67244: LD_INT 1
67246: ARRAY
67247: EQUAL
67248: PUSH
67249: LD_VAR 0 4
67253: PUSH
67254: LD_VAR 0 1
67258: PPUSH
67259: CALL_OW 437
67263: PUSH
67264: LD_INT 1
67266: ARRAY
67267: PUSH
67268: LD_INT 2
67270: ARRAY
67271: EQUAL
67272: AND
67273: PUSH
67274: LD_VAR 0 5
67278: PUSH
67279: LD_VAR 0 1
67283: PPUSH
67284: CALL_OW 437
67288: PUSH
67289: LD_INT 1
67291: ARRAY
67292: PUSH
67293: LD_INT 3
67295: ARRAY
67296: EQUAL
67297: AND
67298: IFFALSE 67308
// result := true end ;
67300: LD_ADDR_VAR 0 3
67304: PUSH
67305: LD_INT 1
67307: ST_TO_ADDR
// end ;
67308: LD_VAR 0 3
67312: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67313: LD_INT 0
67315: PPUSH
// result := false ;
67316: LD_ADDR_VAR 0 4
67320: PUSH
67321: LD_INT 0
67323: ST_TO_ADDR
// if GetTaskList ( unit ) then
67324: LD_VAR 0 1
67328: PPUSH
67329: CALL_OW 437
67333: IFFALSE 67416
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67335: LD_STRING M
67337: PUSH
67338: LD_VAR 0 1
67342: PPUSH
67343: CALL_OW 437
67347: PUSH
67348: LD_INT 1
67350: ARRAY
67351: PUSH
67352: LD_INT 1
67354: ARRAY
67355: EQUAL
67356: PUSH
67357: LD_VAR 0 2
67361: PUSH
67362: LD_VAR 0 1
67366: PPUSH
67367: CALL_OW 437
67371: PUSH
67372: LD_INT 1
67374: ARRAY
67375: PUSH
67376: LD_INT 2
67378: ARRAY
67379: EQUAL
67380: AND
67381: PUSH
67382: LD_VAR 0 3
67386: PUSH
67387: LD_VAR 0 1
67391: PPUSH
67392: CALL_OW 437
67396: PUSH
67397: LD_INT 1
67399: ARRAY
67400: PUSH
67401: LD_INT 3
67403: ARRAY
67404: EQUAL
67405: AND
67406: IFFALSE 67416
// result := true ;
67408: LD_ADDR_VAR 0 4
67412: PUSH
67413: LD_INT 1
67415: ST_TO_ADDR
// end ; end ;
67416: LD_VAR 0 4
67420: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67421: LD_INT 0
67423: PPUSH
67424: PPUSH
67425: PPUSH
67426: PPUSH
// if not unit or not area then
67427: LD_VAR 0 1
67431: NOT
67432: PUSH
67433: LD_VAR 0 2
67437: NOT
67438: OR
67439: IFFALSE 67443
// exit ;
67441: GO 67607
// tmp := AreaToList ( area , i ) ;
67443: LD_ADDR_VAR 0 6
67447: PUSH
67448: LD_VAR 0 2
67452: PPUSH
67453: LD_VAR 0 5
67457: PPUSH
67458: CALL_OW 517
67462: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67463: LD_ADDR_VAR 0 5
67467: PUSH
67468: DOUBLE
67469: LD_INT 1
67471: DEC
67472: ST_TO_ADDR
67473: LD_VAR 0 6
67477: PUSH
67478: LD_INT 1
67480: ARRAY
67481: PUSH
67482: FOR_TO
67483: IFFALSE 67605
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67485: LD_ADDR_VAR 0 7
67489: PUSH
67490: LD_VAR 0 6
67494: PUSH
67495: LD_INT 1
67497: ARRAY
67498: PUSH
67499: LD_VAR 0 5
67503: ARRAY
67504: PUSH
67505: LD_VAR 0 6
67509: PUSH
67510: LD_INT 2
67512: ARRAY
67513: PUSH
67514: LD_VAR 0 5
67518: ARRAY
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67524: LD_VAR 0 7
67528: PUSH
67529: LD_INT 1
67531: ARRAY
67532: PPUSH
67533: LD_VAR 0 7
67537: PUSH
67538: LD_INT 2
67540: ARRAY
67541: PPUSH
67542: CALL_OW 428
67546: PUSH
67547: LD_INT 0
67549: EQUAL
67550: IFFALSE 67603
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67552: LD_VAR 0 1
67556: PPUSH
67557: LD_VAR 0 7
67561: PUSH
67562: LD_INT 1
67564: ARRAY
67565: PPUSH
67566: LD_VAR 0 7
67570: PUSH
67571: LD_INT 2
67573: ARRAY
67574: PPUSH
67575: LD_VAR 0 3
67579: PPUSH
67580: CALL_OW 48
// result := IsPlaced ( unit ) ;
67584: LD_ADDR_VAR 0 4
67588: PUSH
67589: LD_VAR 0 1
67593: PPUSH
67594: CALL_OW 305
67598: ST_TO_ADDR
// exit ;
67599: POP
67600: POP
67601: GO 67607
// end ; end ;
67603: GO 67482
67605: POP
67606: POP
// end ;
67607: LD_VAR 0 4
67611: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67612: LD_INT 0
67614: PPUSH
67615: PPUSH
67616: PPUSH
// if not side or side > 8 then
67617: LD_VAR 0 1
67621: NOT
67622: PUSH
67623: LD_VAR 0 1
67627: PUSH
67628: LD_INT 8
67630: GREATER
67631: OR
67632: IFFALSE 67636
// exit ;
67634: GO 67823
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67636: LD_ADDR_VAR 0 4
67640: PUSH
67641: LD_INT 22
67643: PUSH
67644: LD_VAR 0 1
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 21
67655: PUSH
67656: LD_INT 3
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PPUSH
67667: CALL_OW 69
67671: ST_TO_ADDR
// if not tmp then
67672: LD_VAR 0 4
67676: NOT
67677: IFFALSE 67681
// exit ;
67679: GO 67823
// enable_addtolog := true ;
67681: LD_ADDR_OWVAR 81
67685: PUSH
67686: LD_INT 1
67688: ST_TO_ADDR
// AddToLog ( [ ) ;
67689: LD_STRING [
67691: PPUSH
67692: CALL_OW 561
// for i in tmp do
67696: LD_ADDR_VAR 0 3
67700: PUSH
67701: LD_VAR 0 4
67705: PUSH
67706: FOR_IN
67707: IFFALSE 67814
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67709: LD_STRING [
67711: PUSH
67712: LD_VAR 0 3
67716: PPUSH
67717: CALL_OW 266
67721: STR
67722: PUSH
67723: LD_STRING , 
67725: STR
67726: PUSH
67727: LD_VAR 0 3
67731: PPUSH
67732: CALL_OW 250
67736: STR
67737: PUSH
67738: LD_STRING , 
67740: STR
67741: PUSH
67742: LD_VAR 0 3
67746: PPUSH
67747: CALL_OW 251
67751: STR
67752: PUSH
67753: LD_STRING , 
67755: STR
67756: PUSH
67757: LD_VAR 0 3
67761: PPUSH
67762: CALL_OW 254
67766: STR
67767: PUSH
67768: LD_STRING , 
67770: STR
67771: PUSH
67772: LD_VAR 0 3
67776: PPUSH
67777: LD_INT 1
67779: PPUSH
67780: CALL_OW 268
67784: STR
67785: PUSH
67786: LD_STRING , 
67788: STR
67789: PUSH
67790: LD_VAR 0 3
67794: PPUSH
67795: LD_INT 2
67797: PPUSH
67798: CALL_OW 268
67802: STR
67803: PUSH
67804: LD_STRING ],
67806: STR
67807: PPUSH
67808: CALL_OW 561
// end ;
67812: GO 67706
67814: POP
67815: POP
// AddToLog ( ]; ) ;
67816: LD_STRING ];
67818: PPUSH
67819: CALL_OW 561
// end ;
67823: LD_VAR 0 2
67827: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67828: LD_INT 0
67830: PPUSH
67831: PPUSH
67832: PPUSH
67833: PPUSH
67834: PPUSH
// if not area or not rate or not max then
67835: LD_VAR 0 1
67839: NOT
67840: PUSH
67841: LD_VAR 0 2
67845: NOT
67846: OR
67847: PUSH
67848: LD_VAR 0 4
67852: NOT
67853: OR
67854: IFFALSE 67858
// exit ;
67856: GO 68047
// while 1 do
67858: LD_INT 1
67860: IFFALSE 68047
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67862: LD_ADDR_VAR 0 9
67866: PUSH
67867: LD_VAR 0 1
67871: PPUSH
67872: LD_INT 1
67874: PPUSH
67875: CALL_OW 287
67879: PUSH
67880: LD_INT 10
67882: MUL
67883: ST_TO_ADDR
// r := rate / 10 ;
67884: LD_ADDR_VAR 0 7
67888: PUSH
67889: LD_VAR 0 2
67893: PUSH
67894: LD_INT 10
67896: DIVREAL
67897: ST_TO_ADDR
// time := 1 1$00 ;
67898: LD_ADDR_VAR 0 8
67902: PUSH
67903: LD_INT 2100
67905: ST_TO_ADDR
// if amount < min then
67906: LD_VAR 0 9
67910: PUSH
67911: LD_VAR 0 3
67915: LESS
67916: IFFALSE 67934
// r := r * 2 else
67918: LD_ADDR_VAR 0 7
67922: PUSH
67923: LD_VAR 0 7
67927: PUSH
67928: LD_INT 2
67930: MUL
67931: ST_TO_ADDR
67932: GO 67960
// if amount > max then
67934: LD_VAR 0 9
67938: PUSH
67939: LD_VAR 0 4
67943: GREATER
67944: IFFALSE 67960
// r := r / 2 ;
67946: LD_ADDR_VAR 0 7
67950: PUSH
67951: LD_VAR 0 7
67955: PUSH
67956: LD_INT 2
67958: DIVREAL
67959: ST_TO_ADDR
// time := time / r ;
67960: LD_ADDR_VAR 0 8
67964: PUSH
67965: LD_VAR 0 8
67969: PUSH
67970: LD_VAR 0 7
67974: DIVREAL
67975: ST_TO_ADDR
// if time < 0 then
67976: LD_VAR 0 8
67980: PUSH
67981: LD_INT 0
67983: LESS
67984: IFFALSE 68001
// time := time * - 1 ;
67986: LD_ADDR_VAR 0 8
67990: PUSH
67991: LD_VAR 0 8
67995: PUSH
67996: LD_INT 1
67998: NEG
67999: MUL
68000: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68001: LD_VAR 0 8
68005: PUSH
68006: LD_INT 35
68008: PPUSH
68009: LD_INT 875
68011: PPUSH
68012: CALL_OW 12
68016: PLUS
68017: PPUSH
68018: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68022: LD_INT 1
68024: PPUSH
68025: LD_INT 5
68027: PPUSH
68028: CALL_OW 12
68032: PPUSH
68033: LD_VAR 0 1
68037: PPUSH
68038: LD_INT 1
68040: PPUSH
68041: CALL_OW 55
// end ;
68045: GO 67858
// end ;
68047: LD_VAR 0 5
68051: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68052: LD_INT 0
68054: PPUSH
68055: PPUSH
68056: PPUSH
68057: PPUSH
68058: PPUSH
68059: PPUSH
68060: PPUSH
68061: PPUSH
// if not turrets or not factories then
68062: LD_VAR 0 1
68066: NOT
68067: PUSH
68068: LD_VAR 0 2
68072: NOT
68073: OR
68074: IFFALSE 68078
// exit ;
68076: GO 68385
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68078: LD_ADDR_VAR 0 10
68082: PUSH
68083: LD_INT 5
68085: PUSH
68086: LD_INT 6
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 2
68095: PUSH
68096: LD_INT 4
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 3
68105: PUSH
68106: LD_INT 5
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 24
68120: PUSH
68121: LD_INT 25
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 23
68130: PUSH
68131: LD_INT 27
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 42
68144: PUSH
68145: LD_INT 43
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 44
68154: PUSH
68155: LD_INT 46
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 45
68164: PUSH
68165: LD_INT 47
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: LIST
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: ST_TO_ADDR
// result := [ ] ;
68182: LD_ADDR_VAR 0 3
68186: PUSH
68187: EMPTY
68188: ST_TO_ADDR
// for i in turrets do
68189: LD_ADDR_VAR 0 4
68193: PUSH
68194: LD_VAR 0 1
68198: PUSH
68199: FOR_IN
68200: IFFALSE 68383
// begin nat := GetNation ( i ) ;
68202: LD_ADDR_VAR 0 7
68206: PUSH
68207: LD_VAR 0 4
68211: PPUSH
68212: CALL_OW 248
68216: ST_TO_ADDR
// weapon := 0 ;
68217: LD_ADDR_VAR 0 8
68221: PUSH
68222: LD_INT 0
68224: ST_TO_ADDR
// if not nat then
68225: LD_VAR 0 7
68229: NOT
68230: IFFALSE 68234
// continue ;
68232: GO 68199
// for j in list [ nat ] do
68234: LD_ADDR_VAR 0 5
68238: PUSH
68239: LD_VAR 0 10
68243: PUSH
68244: LD_VAR 0 7
68248: ARRAY
68249: PUSH
68250: FOR_IN
68251: IFFALSE 68292
// if GetBWeapon ( i ) = j [ 1 ] then
68253: LD_VAR 0 4
68257: PPUSH
68258: CALL_OW 269
68262: PUSH
68263: LD_VAR 0 5
68267: PUSH
68268: LD_INT 1
68270: ARRAY
68271: EQUAL
68272: IFFALSE 68290
// begin weapon := j [ 2 ] ;
68274: LD_ADDR_VAR 0 8
68278: PUSH
68279: LD_VAR 0 5
68283: PUSH
68284: LD_INT 2
68286: ARRAY
68287: ST_TO_ADDR
// break ;
68288: GO 68292
// end ;
68290: GO 68250
68292: POP
68293: POP
// if not weapon then
68294: LD_VAR 0 8
68298: NOT
68299: IFFALSE 68303
// continue ;
68301: GO 68199
// for k in factories do
68303: LD_ADDR_VAR 0 6
68307: PUSH
68308: LD_VAR 0 2
68312: PUSH
68313: FOR_IN
68314: IFFALSE 68379
// begin weapons := AvailableWeaponList ( k ) ;
68316: LD_ADDR_VAR 0 9
68320: PUSH
68321: LD_VAR 0 6
68325: PPUSH
68326: CALL_OW 478
68330: ST_TO_ADDR
// if not weapons then
68331: LD_VAR 0 9
68335: NOT
68336: IFFALSE 68340
// continue ;
68338: GO 68313
// if weapon in weapons then
68340: LD_VAR 0 8
68344: PUSH
68345: LD_VAR 0 9
68349: IN
68350: IFFALSE 68377
// begin result := [ i , weapon ] ;
68352: LD_ADDR_VAR 0 3
68356: PUSH
68357: LD_VAR 0 4
68361: PUSH
68362: LD_VAR 0 8
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: ST_TO_ADDR
// exit ;
68371: POP
68372: POP
68373: POP
68374: POP
68375: GO 68385
// end ; end ;
68377: GO 68313
68379: POP
68380: POP
// end ;
68381: GO 68199
68383: POP
68384: POP
// end ;
68385: LD_VAR 0 3
68389: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68390: LD_INT 0
68392: PPUSH
// if not side or side > 8 then
68393: LD_VAR 0 3
68397: NOT
68398: PUSH
68399: LD_VAR 0 3
68403: PUSH
68404: LD_INT 8
68406: GREATER
68407: OR
68408: IFFALSE 68412
// exit ;
68410: GO 68471
// if not range then
68412: LD_VAR 0 4
68416: NOT
68417: IFFALSE 68428
// range := - 12 ;
68419: LD_ADDR_VAR 0 4
68423: PUSH
68424: LD_INT 12
68426: NEG
68427: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68428: LD_VAR 0 1
68432: PPUSH
68433: LD_VAR 0 2
68437: PPUSH
68438: LD_VAR 0 3
68442: PPUSH
68443: LD_VAR 0 4
68447: PPUSH
68448: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68452: LD_VAR 0 1
68456: PPUSH
68457: LD_VAR 0 2
68461: PPUSH
68462: LD_VAR 0 3
68466: PPUSH
68467: CALL_OW 331
// end ;
68471: LD_VAR 0 5
68475: RET
// export function Video ( mode ) ; begin
68476: LD_INT 0
68478: PPUSH
// ingame_video = mode ;
68479: LD_ADDR_OWVAR 52
68483: PUSH
68484: LD_VAR 0 1
68488: ST_TO_ADDR
// interface_hidden = mode ;
68489: LD_ADDR_OWVAR 54
68493: PUSH
68494: LD_VAR 0 1
68498: ST_TO_ADDR
// end ;
68499: LD_VAR 0 2
68503: RET
// export function Join ( array , element ) ; begin
68504: LD_INT 0
68506: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68507: LD_ADDR_VAR 0 3
68511: PUSH
68512: LD_VAR 0 1
68516: PPUSH
68517: LD_VAR 0 1
68521: PUSH
68522: LD_INT 1
68524: PLUS
68525: PPUSH
68526: LD_VAR 0 2
68530: PPUSH
68531: CALL_OW 1
68535: ST_TO_ADDR
// end ;
68536: LD_VAR 0 3
68540: RET
// export function JoinUnion ( array , element ) ; begin
68541: LD_INT 0
68543: PPUSH
// result := array union element ;
68544: LD_ADDR_VAR 0 3
68548: PUSH
68549: LD_VAR 0 1
68553: PUSH
68554: LD_VAR 0 2
68558: UNION
68559: ST_TO_ADDR
// end ;
68560: LD_VAR 0 3
68564: RET
// export function GetBehemoths ( side ) ; begin
68565: LD_INT 0
68567: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68568: LD_ADDR_VAR 0 2
68572: PUSH
68573: LD_INT 22
68575: PUSH
68576: LD_VAR 0 1
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 31
68587: PUSH
68588: LD_INT 25
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PPUSH
68599: CALL_OW 69
68603: ST_TO_ADDR
// end ;
68604: LD_VAR 0 2
68608: RET
// export function Shuffle ( array ) ; var i , index ; begin
68609: LD_INT 0
68611: PPUSH
68612: PPUSH
68613: PPUSH
// result := [ ] ;
68614: LD_ADDR_VAR 0 2
68618: PUSH
68619: EMPTY
68620: ST_TO_ADDR
// if not array then
68621: LD_VAR 0 1
68625: NOT
68626: IFFALSE 68630
// exit ;
68628: GO 68729
// Randomize ;
68630: CALL_OW 10
// for i = array downto 1 do
68634: LD_ADDR_VAR 0 3
68638: PUSH
68639: DOUBLE
68640: LD_VAR 0 1
68644: INC
68645: ST_TO_ADDR
68646: LD_INT 1
68648: PUSH
68649: FOR_DOWNTO
68650: IFFALSE 68727
// begin index := rand ( 1 , array ) ;
68652: LD_ADDR_VAR 0 4
68656: PUSH
68657: LD_INT 1
68659: PPUSH
68660: LD_VAR 0 1
68664: PPUSH
68665: CALL_OW 12
68669: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68670: LD_ADDR_VAR 0 2
68674: PUSH
68675: LD_VAR 0 2
68679: PPUSH
68680: LD_VAR 0 2
68684: PUSH
68685: LD_INT 1
68687: PLUS
68688: PPUSH
68689: LD_VAR 0 1
68693: PUSH
68694: LD_VAR 0 4
68698: ARRAY
68699: PPUSH
68700: CALL_OW 2
68704: ST_TO_ADDR
// array := Delete ( array , index ) ;
68705: LD_ADDR_VAR 0 1
68709: PUSH
68710: LD_VAR 0 1
68714: PPUSH
68715: LD_VAR 0 4
68719: PPUSH
68720: CALL_OW 3
68724: ST_TO_ADDR
// end ;
68725: GO 68649
68727: POP
68728: POP
// end ;
68729: LD_VAR 0 2
68733: RET
// export function GetBaseMaterials ( base ) ; begin
68734: LD_INT 0
68736: PPUSH
// result := [ 0 , 0 , 0 ] ;
68737: LD_ADDR_VAR 0 2
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: LIST
68755: ST_TO_ADDR
// if not base then
68756: LD_VAR 0 1
68760: NOT
68761: IFFALSE 68765
// exit ;
68763: GO 68814
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68765: LD_ADDR_VAR 0 2
68769: PUSH
68770: LD_VAR 0 1
68774: PPUSH
68775: LD_INT 1
68777: PPUSH
68778: CALL_OW 275
68782: PUSH
68783: LD_VAR 0 1
68787: PPUSH
68788: LD_INT 2
68790: PPUSH
68791: CALL_OW 275
68795: PUSH
68796: LD_VAR 0 1
68800: PPUSH
68801: LD_INT 3
68803: PPUSH
68804: CALL_OW 275
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: LIST
68813: ST_TO_ADDR
// end ;
68814: LD_VAR 0 2
68818: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68819: LD_INT 0
68821: PPUSH
68822: PPUSH
// result := array ;
68823: LD_ADDR_VAR 0 3
68827: PUSH
68828: LD_VAR 0 1
68832: ST_TO_ADDR
// if size >= result then
68833: LD_VAR 0 2
68837: PUSH
68838: LD_VAR 0 3
68842: GREATEREQUAL
68843: IFFALSE 68847
// exit ;
68845: GO 68897
// if size then
68847: LD_VAR 0 2
68851: IFFALSE 68897
// for i := array downto size do
68853: LD_ADDR_VAR 0 4
68857: PUSH
68858: DOUBLE
68859: LD_VAR 0 1
68863: INC
68864: ST_TO_ADDR
68865: LD_VAR 0 2
68869: PUSH
68870: FOR_DOWNTO
68871: IFFALSE 68895
// result := Delete ( result , result ) ;
68873: LD_ADDR_VAR 0 3
68877: PUSH
68878: LD_VAR 0 3
68882: PPUSH
68883: LD_VAR 0 3
68887: PPUSH
68888: CALL_OW 3
68892: ST_TO_ADDR
68893: GO 68870
68895: POP
68896: POP
// end ;
68897: LD_VAR 0 3
68901: RET
// export function ComExit ( unit ) ; var tmp ; begin
68902: LD_INT 0
68904: PPUSH
68905: PPUSH
// if not IsInUnit ( unit ) then
68906: LD_VAR 0 1
68910: PPUSH
68911: CALL_OW 310
68915: NOT
68916: IFFALSE 68920
// exit ;
68918: GO 68980
// tmp := IsInUnit ( unit ) ;
68920: LD_ADDR_VAR 0 3
68924: PUSH
68925: LD_VAR 0 1
68929: PPUSH
68930: CALL_OW 310
68934: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68935: LD_VAR 0 3
68939: PPUSH
68940: CALL_OW 247
68944: PUSH
68945: LD_INT 2
68947: EQUAL
68948: IFFALSE 68961
// ComExitVehicle ( unit ) else
68950: LD_VAR 0 1
68954: PPUSH
68955: CALL_OW 121
68959: GO 68970
// ComExitBuilding ( unit ) ;
68961: LD_VAR 0 1
68965: PPUSH
68966: CALL_OW 122
// result := tmp ;
68970: LD_ADDR_VAR 0 2
68974: PUSH
68975: LD_VAR 0 3
68979: ST_TO_ADDR
// end ;
68980: LD_VAR 0 2
68984: RET
// export function ComExitAll ( units ) ; var i ; begin
68985: LD_INT 0
68987: PPUSH
68988: PPUSH
// if not units then
68989: LD_VAR 0 1
68993: NOT
68994: IFFALSE 68998
// exit ;
68996: GO 69024
// for i in units do
68998: LD_ADDR_VAR 0 3
69002: PUSH
69003: LD_VAR 0 1
69007: PUSH
69008: FOR_IN
69009: IFFALSE 69022
// ComExit ( i ) ;
69011: LD_VAR 0 3
69015: PPUSH
69016: CALL 68902 0 1
69020: GO 69008
69022: POP
69023: POP
// end ;
69024: LD_VAR 0 2
69028: RET
// export function ResetHc ; begin
69029: LD_INT 0
69031: PPUSH
// InitHc ;
69032: CALL_OW 19
// hc_importance := 0 ;
69036: LD_ADDR_OWVAR 32
69040: PUSH
69041: LD_INT 0
69043: ST_TO_ADDR
// end ;
69044: LD_VAR 0 1
69048: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69049: LD_INT 0
69051: PPUSH
69052: PPUSH
69053: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69054: LD_ADDR_VAR 0 6
69058: PUSH
69059: LD_VAR 0 1
69063: PUSH
69064: LD_VAR 0 3
69068: PLUS
69069: PUSH
69070: LD_INT 2
69072: DIV
69073: ST_TO_ADDR
// if _x < 0 then
69074: LD_VAR 0 6
69078: PUSH
69079: LD_INT 0
69081: LESS
69082: IFFALSE 69099
// _x := _x * - 1 ;
69084: LD_ADDR_VAR 0 6
69088: PUSH
69089: LD_VAR 0 6
69093: PUSH
69094: LD_INT 1
69096: NEG
69097: MUL
69098: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69099: LD_ADDR_VAR 0 7
69103: PUSH
69104: LD_VAR 0 2
69108: PUSH
69109: LD_VAR 0 4
69113: PLUS
69114: PUSH
69115: LD_INT 2
69117: DIV
69118: ST_TO_ADDR
// if _y < 0 then
69119: LD_VAR 0 7
69123: PUSH
69124: LD_INT 0
69126: LESS
69127: IFFALSE 69144
// _y := _y * - 1 ;
69129: LD_ADDR_VAR 0 7
69133: PUSH
69134: LD_VAR 0 7
69138: PUSH
69139: LD_INT 1
69141: NEG
69142: MUL
69143: ST_TO_ADDR
// result := [ _x , _y ] ;
69144: LD_ADDR_VAR 0 5
69148: PUSH
69149: LD_VAR 0 6
69153: PUSH
69154: LD_VAR 0 7
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: ST_TO_ADDR
// end ;
69163: LD_VAR 0 5
69167: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69168: LD_INT 0
69170: PPUSH
69171: PPUSH
69172: PPUSH
69173: PPUSH
// task := GetTaskList ( unit ) ;
69174: LD_ADDR_VAR 0 7
69178: PUSH
69179: LD_VAR 0 1
69183: PPUSH
69184: CALL_OW 437
69188: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69189: LD_VAR 0 7
69193: NOT
69194: PUSH
69195: LD_VAR 0 1
69199: PPUSH
69200: LD_VAR 0 2
69204: PPUSH
69205: CALL_OW 308
69209: NOT
69210: AND
69211: IFFALSE 69215
// exit ;
69213: GO 69333
// if IsInArea ( unit , area ) then
69215: LD_VAR 0 1
69219: PPUSH
69220: LD_VAR 0 2
69224: PPUSH
69225: CALL_OW 308
69229: IFFALSE 69247
// begin ComMoveToArea ( unit , goAway ) ;
69231: LD_VAR 0 1
69235: PPUSH
69236: LD_VAR 0 3
69240: PPUSH
69241: CALL_OW 113
// exit ;
69245: GO 69333
// end ; if task [ 1 ] [ 1 ] <> M then
69247: LD_VAR 0 7
69251: PUSH
69252: LD_INT 1
69254: ARRAY
69255: PUSH
69256: LD_INT 1
69258: ARRAY
69259: PUSH
69260: LD_STRING M
69262: NONEQUAL
69263: IFFALSE 69267
// exit ;
69265: GO 69333
// x := task [ 1 ] [ 2 ] ;
69267: LD_ADDR_VAR 0 5
69271: PUSH
69272: LD_VAR 0 7
69276: PUSH
69277: LD_INT 1
69279: ARRAY
69280: PUSH
69281: LD_INT 2
69283: ARRAY
69284: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69285: LD_ADDR_VAR 0 6
69289: PUSH
69290: LD_VAR 0 7
69294: PUSH
69295: LD_INT 1
69297: ARRAY
69298: PUSH
69299: LD_INT 3
69301: ARRAY
69302: ST_TO_ADDR
// if InArea ( x , y , area ) then
69303: LD_VAR 0 5
69307: PPUSH
69308: LD_VAR 0 6
69312: PPUSH
69313: LD_VAR 0 2
69317: PPUSH
69318: CALL_OW 309
69322: IFFALSE 69333
// ComStop ( unit ) ;
69324: LD_VAR 0 1
69328: PPUSH
69329: CALL_OW 141
// end ;
69333: LD_VAR 0 4
69337: RET
// export function Abs ( value ) ; begin
69338: LD_INT 0
69340: PPUSH
// result := value ;
69341: LD_ADDR_VAR 0 2
69345: PUSH
69346: LD_VAR 0 1
69350: ST_TO_ADDR
// if value < 0 then
69351: LD_VAR 0 1
69355: PUSH
69356: LD_INT 0
69358: LESS
69359: IFFALSE 69376
// result := value * - 1 ;
69361: LD_ADDR_VAR 0 2
69365: PUSH
69366: LD_VAR 0 1
69370: PUSH
69371: LD_INT 1
69373: NEG
69374: MUL
69375: ST_TO_ADDR
// end ;
69376: LD_VAR 0 2
69380: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69381: LD_INT 0
69383: PPUSH
69384: PPUSH
69385: PPUSH
69386: PPUSH
69387: PPUSH
69388: PPUSH
69389: PPUSH
69390: PPUSH
// if not unit or not building then
69391: LD_VAR 0 1
69395: NOT
69396: PUSH
69397: LD_VAR 0 2
69401: NOT
69402: OR
69403: IFFALSE 69407
// exit ;
69405: GO 69633
// x := GetX ( building ) ;
69407: LD_ADDR_VAR 0 4
69411: PUSH
69412: LD_VAR 0 2
69416: PPUSH
69417: CALL_OW 250
69421: ST_TO_ADDR
// y := GetY ( building ) ;
69422: LD_ADDR_VAR 0 6
69426: PUSH
69427: LD_VAR 0 2
69431: PPUSH
69432: CALL_OW 251
69436: ST_TO_ADDR
// d := GetDir ( building ) ;
69437: LD_ADDR_VAR 0 8
69441: PUSH
69442: LD_VAR 0 2
69446: PPUSH
69447: CALL_OW 254
69451: ST_TO_ADDR
// r := 4 ;
69452: LD_ADDR_VAR 0 9
69456: PUSH
69457: LD_INT 4
69459: ST_TO_ADDR
// for i := 1 to 5 do
69460: LD_ADDR_VAR 0 10
69464: PUSH
69465: DOUBLE
69466: LD_INT 1
69468: DEC
69469: ST_TO_ADDR
69470: LD_INT 5
69472: PUSH
69473: FOR_TO
69474: IFFALSE 69631
// begin _x := ShiftX ( x , d , r + i ) ;
69476: LD_ADDR_VAR 0 5
69480: PUSH
69481: LD_VAR 0 4
69485: PPUSH
69486: LD_VAR 0 8
69490: PPUSH
69491: LD_VAR 0 9
69495: PUSH
69496: LD_VAR 0 10
69500: PLUS
69501: PPUSH
69502: CALL_OW 272
69506: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69507: LD_ADDR_VAR 0 7
69511: PUSH
69512: LD_VAR 0 6
69516: PPUSH
69517: LD_VAR 0 8
69521: PPUSH
69522: LD_VAR 0 9
69526: PUSH
69527: LD_VAR 0 10
69531: PLUS
69532: PPUSH
69533: CALL_OW 273
69537: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69538: LD_VAR 0 5
69542: PPUSH
69543: LD_VAR 0 7
69547: PPUSH
69548: CALL_OW 488
69552: PUSH
69553: LD_VAR 0 5
69557: PPUSH
69558: LD_VAR 0 7
69562: PPUSH
69563: CALL_OW 428
69567: PPUSH
69568: CALL_OW 247
69572: PUSH
69573: LD_INT 3
69575: PUSH
69576: LD_INT 2
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: IN
69583: NOT
69584: AND
69585: IFFALSE 69629
// begin ComMoveXY ( unit , _x , _y ) ;
69587: LD_VAR 0 1
69591: PPUSH
69592: LD_VAR 0 5
69596: PPUSH
69597: LD_VAR 0 7
69601: PPUSH
69602: CALL_OW 111
// result := [ _x , _y ] ;
69606: LD_ADDR_VAR 0 3
69610: PUSH
69611: LD_VAR 0 5
69615: PUSH
69616: LD_VAR 0 7
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: ST_TO_ADDR
// exit ;
69625: POP
69626: POP
69627: GO 69633
// end ; end ;
69629: GO 69473
69631: POP
69632: POP
// end ;
69633: LD_VAR 0 3
69637: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69638: LD_INT 0
69640: PPUSH
69641: PPUSH
69642: PPUSH
// result := 0 ;
69643: LD_ADDR_VAR 0 3
69647: PUSH
69648: LD_INT 0
69650: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69651: LD_VAR 0 1
69655: PUSH
69656: LD_INT 0
69658: LESS
69659: PUSH
69660: LD_VAR 0 1
69664: PUSH
69665: LD_INT 8
69667: GREATER
69668: OR
69669: PUSH
69670: LD_VAR 0 2
69674: PUSH
69675: LD_INT 0
69677: LESS
69678: OR
69679: PUSH
69680: LD_VAR 0 2
69684: PUSH
69685: LD_INT 8
69687: GREATER
69688: OR
69689: IFFALSE 69693
// exit ;
69691: GO 69768
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69693: LD_ADDR_VAR 0 4
69697: PUSH
69698: LD_INT 22
69700: PUSH
69701: LD_VAR 0 2
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PPUSH
69710: CALL_OW 69
69714: PUSH
69715: FOR_IN
69716: IFFALSE 69766
// begin un := UnitShoot ( i ) ;
69718: LD_ADDR_VAR 0 5
69722: PUSH
69723: LD_VAR 0 4
69727: PPUSH
69728: CALL_OW 504
69732: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69733: LD_VAR 0 5
69737: PPUSH
69738: CALL_OW 255
69742: PUSH
69743: LD_VAR 0 1
69747: EQUAL
69748: IFFALSE 69764
// begin result := un ;
69750: LD_ADDR_VAR 0 3
69754: PUSH
69755: LD_VAR 0 5
69759: ST_TO_ADDR
// exit ;
69760: POP
69761: POP
69762: GO 69768
// end ; end ;
69764: GO 69715
69766: POP
69767: POP
// end ;
69768: LD_VAR 0 3
69772: RET
// export function GetCargoBay ( units ) ; begin
69773: LD_INT 0
69775: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69776: LD_ADDR_VAR 0 2
69780: PUSH
69781: LD_VAR 0 1
69785: PPUSH
69786: LD_INT 2
69788: PUSH
69789: LD_INT 34
69791: PUSH
69792: LD_INT 12
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 34
69801: PUSH
69802: LD_INT 51
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 34
69811: PUSH
69812: LD_INT 32
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 34
69821: PUSH
69822: LD_INT 89
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: PPUSH
69836: CALL_OW 72
69840: ST_TO_ADDR
// end ;
69841: LD_VAR 0 2
69845: RET
// export function Negate ( value ) ; begin
69846: LD_INT 0
69848: PPUSH
// result := not value ;
69849: LD_ADDR_VAR 0 2
69853: PUSH
69854: LD_VAR 0 1
69858: NOT
69859: ST_TO_ADDR
// end ;
69860: LD_VAR 0 2
69864: RET
// export function Inc ( value ) ; begin
69865: LD_INT 0
69867: PPUSH
// result := value + 1 ;
69868: LD_ADDR_VAR 0 2
69872: PUSH
69873: LD_VAR 0 1
69877: PUSH
69878: LD_INT 1
69880: PLUS
69881: ST_TO_ADDR
// end ;
69882: LD_VAR 0 2
69886: RET
// export function Dec ( value ) ; begin
69887: LD_INT 0
69889: PPUSH
// result := value - 1 ;
69890: LD_ADDR_VAR 0 2
69894: PUSH
69895: LD_VAR 0 1
69899: PUSH
69900: LD_INT 1
69902: MINUS
69903: ST_TO_ADDR
// end ;
69904: LD_VAR 0 2
69908: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69909: LD_INT 0
69911: PPUSH
69912: PPUSH
69913: PPUSH
69914: PPUSH
69915: PPUSH
69916: PPUSH
69917: PPUSH
69918: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69919: LD_VAR 0 1
69923: PPUSH
69924: LD_VAR 0 2
69928: PPUSH
69929: CALL_OW 488
69933: NOT
69934: PUSH
69935: LD_VAR 0 3
69939: PPUSH
69940: LD_VAR 0 4
69944: PPUSH
69945: CALL_OW 488
69949: NOT
69950: OR
69951: IFFALSE 69964
// begin result := - 1 ;
69953: LD_ADDR_VAR 0 5
69957: PUSH
69958: LD_INT 1
69960: NEG
69961: ST_TO_ADDR
// exit ;
69962: GO 70199
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69964: LD_ADDR_VAR 0 12
69968: PUSH
69969: LD_VAR 0 1
69973: PPUSH
69974: LD_VAR 0 2
69978: PPUSH
69979: LD_VAR 0 3
69983: PPUSH
69984: LD_VAR 0 4
69988: PPUSH
69989: CALL 69049 0 4
69993: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69994: LD_ADDR_VAR 0 11
69998: PUSH
69999: LD_VAR 0 1
70003: PPUSH
70004: LD_VAR 0 2
70008: PPUSH
70009: LD_VAR 0 12
70013: PUSH
70014: LD_INT 1
70016: ARRAY
70017: PPUSH
70018: LD_VAR 0 12
70022: PUSH
70023: LD_INT 2
70025: ARRAY
70026: PPUSH
70027: CALL_OW 298
70031: ST_TO_ADDR
// distance := 9999 ;
70032: LD_ADDR_VAR 0 10
70036: PUSH
70037: LD_INT 9999
70039: ST_TO_ADDR
// for i := 0 to 5 do
70040: LD_ADDR_VAR 0 6
70044: PUSH
70045: DOUBLE
70046: LD_INT 0
70048: DEC
70049: ST_TO_ADDR
70050: LD_INT 5
70052: PUSH
70053: FOR_TO
70054: IFFALSE 70197
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70056: LD_ADDR_VAR 0 7
70060: PUSH
70061: LD_VAR 0 1
70065: PPUSH
70066: LD_VAR 0 6
70070: PPUSH
70071: LD_VAR 0 11
70075: PPUSH
70076: CALL_OW 272
70080: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70081: LD_ADDR_VAR 0 8
70085: PUSH
70086: LD_VAR 0 2
70090: PPUSH
70091: LD_VAR 0 6
70095: PPUSH
70096: LD_VAR 0 11
70100: PPUSH
70101: CALL_OW 273
70105: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70106: LD_VAR 0 7
70110: PPUSH
70111: LD_VAR 0 8
70115: PPUSH
70116: CALL_OW 488
70120: NOT
70121: IFFALSE 70125
// continue ;
70123: GO 70053
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70125: LD_ADDR_VAR 0 9
70129: PUSH
70130: LD_VAR 0 12
70134: PUSH
70135: LD_INT 1
70137: ARRAY
70138: PPUSH
70139: LD_VAR 0 12
70143: PUSH
70144: LD_INT 2
70146: ARRAY
70147: PPUSH
70148: LD_VAR 0 7
70152: PPUSH
70153: LD_VAR 0 8
70157: PPUSH
70158: CALL_OW 298
70162: ST_TO_ADDR
// if tmp < distance then
70163: LD_VAR 0 9
70167: PUSH
70168: LD_VAR 0 10
70172: LESS
70173: IFFALSE 70195
// begin result := i ;
70175: LD_ADDR_VAR 0 5
70179: PUSH
70180: LD_VAR 0 6
70184: ST_TO_ADDR
// distance := tmp ;
70185: LD_ADDR_VAR 0 10
70189: PUSH
70190: LD_VAR 0 9
70194: ST_TO_ADDR
// end ; end ;
70195: GO 70053
70197: POP
70198: POP
// end ;
70199: LD_VAR 0 5
70203: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70204: LD_INT 0
70206: PPUSH
70207: PPUSH
// if not driver or not IsInUnit ( driver ) then
70208: LD_VAR 0 1
70212: NOT
70213: PUSH
70214: LD_VAR 0 1
70218: PPUSH
70219: CALL_OW 310
70223: NOT
70224: OR
70225: IFFALSE 70229
// exit ;
70227: GO 70319
// vehicle := IsInUnit ( driver ) ;
70229: LD_ADDR_VAR 0 3
70233: PUSH
70234: LD_VAR 0 1
70238: PPUSH
70239: CALL_OW 310
70243: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70244: LD_VAR 0 1
70248: PPUSH
70249: LD_STRING \
70251: PUSH
70252: LD_INT 0
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: LD_INT 0
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: LD_INT 0
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: PUSH
70279: LD_STRING E
70281: PUSH
70282: LD_INT 0
70284: PUSH
70285: LD_INT 0
70287: PUSH
70288: LD_VAR 0 3
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PPUSH
70315: CALL_OW 446
// end ;
70319: LD_VAR 0 2
70323: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70324: LD_INT 0
70326: PPUSH
70327: PPUSH
// if not driver or not IsInUnit ( driver ) then
70328: LD_VAR 0 1
70332: NOT
70333: PUSH
70334: LD_VAR 0 1
70338: PPUSH
70339: CALL_OW 310
70343: NOT
70344: OR
70345: IFFALSE 70349
// exit ;
70347: GO 70439
// vehicle := IsInUnit ( driver ) ;
70349: LD_ADDR_VAR 0 3
70353: PUSH
70354: LD_VAR 0 1
70358: PPUSH
70359: CALL_OW 310
70363: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70364: LD_VAR 0 1
70368: PPUSH
70369: LD_STRING \
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: LD_INT 0
70380: PUSH
70381: LD_INT 0
70383: PUSH
70384: LD_INT 0
70386: PUSH
70387: LD_INT 0
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: PUSH
70399: LD_STRING E
70401: PUSH
70402: LD_INT 0
70404: PUSH
70405: LD_INT 0
70407: PUSH
70408: LD_VAR 0 3
70412: PUSH
70413: LD_INT 0
70415: PUSH
70416: LD_INT 0
70418: PUSH
70419: LD_INT 0
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PPUSH
70435: CALL_OW 447
// end ;
70439: LD_VAR 0 2
70443: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70444: LD_INT 0
70446: PPUSH
70447: PPUSH
70448: PPUSH
// tmp := [ ] ;
70449: LD_ADDR_VAR 0 5
70453: PUSH
70454: EMPTY
70455: ST_TO_ADDR
// for i in units do
70456: LD_ADDR_VAR 0 4
70460: PUSH
70461: LD_VAR 0 1
70465: PUSH
70466: FOR_IN
70467: IFFALSE 70505
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70469: LD_ADDR_VAR 0 5
70473: PUSH
70474: LD_VAR 0 5
70478: PPUSH
70479: LD_VAR 0 5
70483: PUSH
70484: LD_INT 1
70486: PLUS
70487: PPUSH
70488: LD_VAR 0 4
70492: PPUSH
70493: CALL_OW 256
70497: PPUSH
70498: CALL_OW 2
70502: ST_TO_ADDR
70503: GO 70466
70505: POP
70506: POP
// if not tmp then
70507: LD_VAR 0 5
70511: NOT
70512: IFFALSE 70516
// exit ;
70514: GO 70564
// if asc then
70516: LD_VAR 0 2
70520: IFFALSE 70544
// result := SortListByListAsc ( units , tmp ) else
70522: LD_ADDR_VAR 0 3
70526: PUSH
70527: LD_VAR 0 1
70531: PPUSH
70532: LD_VAR 0 5
70536: PPUSH
70537: CALL_OW 76
70541: ST_TO_ADDR
70542: GO 70564
// result := SortListByListDesc ( units , tmp ) ;
70544: LD_ADDR_VAR 0 3
70548: PUSH
70549: LD_VAR 0 1
70553: PPUSH
70554: LD_VAR 0 5
70558: PPUSH
70559: CALL_OW 77
70563: ST_TO_ADDR
// end ;
70564: LD_VAR 0 3
70568: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70569: LD_INT 0
70571: PPUSH
70572: PPUSH
// task := GetTaskList ( mech ) ;
70573: LD_ADDR_VAR 0 4
70577: PUSH
70578: LD_VAR 0 1
70582: PPUSH
70583: CALL_OW 437
70587: ST_TO_ADDR
// if not task then
70588: LD_VAR 0 4
70592: NOT
70593: IFFALSE 70597
// exit ;
70595: GO 70639
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70597: LD_ADDR_VAR 0 3
70601: PUSH
70602: LD_VAR 0 4
70606: PUSH
70607: LD_INT 1
70609: ARRAY
70610: PUSH
70611: LD_INT 1
70613: ARRAY
70614: PUSH
70615: LD_STRING r
70617: EQUAL
70618: PUSH
70619: LD_VAR 0 4
70623: PUSH
70624: LD_INT 1
70626: ARRAY
70627: PUSH
70628: LD_INT 4
70630: ARRAY
70631: PUSH
70632: LD_VAR 0 2
70636: EQUAL
70637: AND
70638: ST_TO_ADDR
// end ;
70639: LD_VAR 0 3
70643: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70644: LD_INT 0
70646: PPUSH
// SetDir ( unit , d ) ;
70647: LD_VAR 0 1
70651: PPUSH
70652: LD_VAR 0 4
70656: PPUSH
70657: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70661: LD_VAR 0 1
70665: PPUSH
70666: LD_VAR 0 2
70670: PPUSH
70671: LD_VAR 0 3
70675: PPUSH
70676: LD_VAR 0 5
70680: PPUSH
70681: CALL_OW 48
// end ;
70685: LD_VAR 0 6
70689: RET
// export function ToNaturalNumber ( number ) ; begin
70690: LD_INT 0
70692: PPUSH
// result := number div 1 ;
70693: LD_ADDR_VAR 0 2
70697: PUSH
70698: LD_VAR 0 1
70702: PUSH
70703: LD_INT 1
70705: DIV
70706: ST_TO_ADDR
// if number < 0 then
70707: LD_VAR 0 1
70711: PUSH
70712: LD_INT 0
70714: LESS
70715: IFFALSE 70725
// result := 0 ;
70717: LD_ADDR_VAR 0 2
70721: PUSH
70722: LD_INT 0
70724: ST_TO_ADDR
// end ;
70725: LD_VAR 0 2
70729: RET
// export function SortByClass ( units , class ) ; var un ; begin
70730: LD_INT 0
70732: PPUSH
70733: PPUSH
// if not units or not class then
70734: LD_VAR 0 1
70738: NOT
70739: PUSH
70740: LD_VAR 0 2
70744: NOT
70745: OR
70746: IFFALSE 70750
// exit ;
70748: GO 70845
// result := [ ] ;
70750: LD_ADDR_VAR 0 3
70754: PUSH
70755: EMPTY
70756: ST_TO_ADDR
// for un in units do
70757: LD_ADDR_VAR 0 4
70761: PUSH
70762: LD_VAR 0 1
70766: PUSH
70767: FOR_IN
70768: IFFALSE 70843
// if GetClass ( un ) = class then
70770: LD_VAR 0 4
70774: PPUSH
70775: CALL_OW 257
70779: PUSH
70780: LD_VAR 0 2
70784: EQUAL
70785: IFFALSE 70812
// result := Insert ( result , 1 , un ) else
70787: LD_ADDR_VAR 0 3
70791: PUSH
70792: LD_VAR 0 3
70796: PPUSH
70797: LD_INT 1
70799: PPUSH
70800: LD_VAR 0 4
70804: PPUSH
70805: CALL_OW 2
70809: ST_TO_ADDR
70810: GO 70841
// result := Replace ( result , result + 1 , un ) ;
70812: LD_ADDR_VAR 0 3
70816: PUSH
70817: LD_VAR 0 3
70821: PPUSH
70822: LD_VAR 0 3
70826: PUSH
70827: LD_INT 1
70829: PLUS
70830: PPUSH
70831: LD_VAR 0 4
70835: PPUSH
70836: CALL_OW 1
70840: ST_TO_ADDR
70841: GO 70767
70843: POP
70844: POP
// end ;
70845: LD_VAR 0 3
70849: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70850: LD_INT 0
70852: PPUSH
70853: PPUSH
70854: PPUSH
70855: PPUSH
70856: PPUSH
70857: PPUSH
70858: PPUSH
// result := [ ] ;
70859: LD_ADDR_VAR 0 4
70863: PUSH
70864: EMPTY
70865: ST_TO_ADDR
// if x - r < 0 then
70866: LD_VAR 0 1
70870: PUSH
70871: LD_VAR 0 3
70875: MINUS
70876: PUSH
70877: LD_INT 0
70879: LESS
70880: IFFALSE 70892
// min_x := 0 else
70882: LD_ADDR_VAR 0 8
70886: PUSH
70887: LD_INT 0
70889: ST_TO_ADDR
70890: GO 70908
// min_x := x - r ;
70892: LD_ADDR_VAR 0 8
70896: PUSH
70897: LD_VAR 0 1
70901: PUSH
70902: LD_VAR 0 3
70906: MINUS
70907: ST_TO_ADDR
// if y - r < 0 then
70908: LD_VAR 0 2
70912: PUSH
70913: LD_VAR 0 3
70917: MINUS
70918: PUSH
70919: LD_INT 0
70921: LESS
70922: IFFALSE 70934
// min_y := 0 else
70924: LD_ADDR_VAR 0 7
70928: PUSH
70929: LD_INT 0
70931: ST_TO_ADDR
70932: GO 70950
// min_y := y - r ;
70934: LD_ADDR_VAR 0 7
70938: PUSH
70939: LD_VAR 0 2
70943: PUSH
70944: LD_VAR 0 3
70948: MINUS
70949: ST_TO_ADDR
// max_x := x + r ;
70950: LD_ADDR_VAR 0 9
70954: PUSH
70955: LD_VAR 0 1
70959: PUSH
70960: LD_VAR 0 3
70964: PLUS
70965: ST_TO_ADDR
// max_y := y + r ;
70966: LD_ADDR_VAR 0 10
70970: PUSH
70971: LD_VAR 0 2
70975: PUSH
70976: LD_VAR 0 3
70980: PLUS
70981: ST_TO_ADDR
// for _x = min_x to max_x do
70982: LD_ADDR_VAR 0 5
70986: PUSH
70987: DOUBLE
70988: LD_VAR 0 8
70992: DEC
70993: ST_TO_ADDR
70994: LD_VAR 0 9
70998: PUSH
70999: FOR_TO
71000: IFFALSE 71101
// for _y = min_y to max_y do
71002: LD_ADDR_VAR 0 6
71006: PUSH
71007: DOUBLE
71008: LD_VAR 0 7
71012: DEC
71013: ST_TO_ADDR
71014: LD_VAR 0 10
71018: PUSH
71019: FOR_TO
71020: IFFALSE 71097
// begin if not ValidHex ( _x , _y ) then
71022: LD_VAR 0 5
71026: PPUSH
71027: LD_VAR 0 6
71031: PPUSH
71032: CALL_OW 488
71036: NOT
71037: IFFALSE 71041
// continue ;
71039: GO 71019
// if GetResourceTypeXY ( _x , _y ) then
71041: LD_VAR 0 5
71045: PPUSH
71046: LD_VAR 0 6
71050: PPUSH
71051: CALL_OW 283
71055: IFFALSE 71095
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71057: LD_ADDR_VAR 0 4
71061: PUSH
71062: LD_VAR 0 4
71066: PPUSH
71067: LD_VAR 0 4
71071: PUSH
71072: LD_INT 1
71074: PLUS
71075: PPUSH
71076: LD_VAR 0 5
71080: PUSH
71081: LD_VAR 0 6
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PPUSH
71090: CALL_OW 1
71094: ST_TO_ADDR
// end ;
71095: GO 71019
71097: POP
71098: POP
71099: GO 70999
71101: POP
71102: POP
// end ;
71103: LD_VAR 0 4
71107: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71108: LD_INT 0
71110: PPUSH
71111: PPUSH
71112: PPUSH
71113: PPUSH
71114: PPUSH
71115: PPUSH
71116: PPUSH
71117: PPUSH
// if not units then
71118: LD_VAR 0 1
71122: NOT
71123: IFFALSE 71127
// exit ;
71125: GO 71651
// result := UnitFilter ( units , [ f_ok ] ) ;
71127: LD_ADDR_VAR 0 3
71131: PUSH
71132: LD_VAR 0 1
71136: PPUSH
71137: LD_INT 50
71139: PUSH
71140: EMPTY
71141: LIST
71142: PPUSH
71143: CALL_OW 72
71147: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71148: LD_ADDR_VAR 0 8
71152: PUSH
71153: LD_VAR 0 1
71157: PUSH
71158: LD_INT 1
71160: ARRAY
71161: PPUSH
71162: CALL_OW 255
71166: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71167: LD_ADDR_VAR 0 10
71171: PUSH
71172: LD_INT 29
71174: PUSH
71175: LD_INT 91
71177: PUSH
71178: LD_INT 49
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: LIST
71185: ST_TO_ADDR
// if not result then
71186: LD_VAR 0 3
71190: NOT
71191: IFFALSE 71195
// exit ;
71193: GO 71651
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71195: LD_ADDR_VAR 0 5
71199: PUSH
71200: LD_INT 81
71202: PUSH
71203: LD_VAR 0 8
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PPUSH
71212: CALL_OW 69
71216: ST_TO_ADDR
// for i in result do
71217: LD_ADDR_VAR 0 4
71221: PUSH
71222: LD_VAR 0 3
71226: PUSH
71227: FOR_IN
71228: IFFALSE 71649
// begin tag := GetTag ( i ) + 1 ;
71230: LD_ADDR_VAR 0 9
71234: PUSH
71235: LD_VAR 0 4
71239: PPUSH
71240: CALL_OW 110
71244: PUSH
71245: LD_INT 1
71247: PLUS
71248: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71249: LD_ADDR_VAR 0 7
71253: PUSH
71254: LD_VAR 0 4
71258: PPUSH
71259: CALL_OW 250
71263: PPUSH
71264: LD_VAR 0 4
71268: PPUSH
71269: CALL_OW 251
71273: PPUSH
71274: LD_INT 6
71276: PPUSH
71277: CALL 70850 0 3
71281: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71282: LD_VAR 0 4
71286: PPUSH
71287: CALL_OW 247
71291: PUSH
71292: LD_INT 2
71294: EQUAL
71295: PUSH
71296: LD_VAR 0 7
71300: AND
71301: PUSH
71302: LD_VAR 0 4
71306: PPUSH
71307: CALL_OW 264
71311: PUSH
71312: LD_VAR 0 10
71316: IN
71317: NOT
71318: AND
71319: IFFALSE 71358
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71321: LD_VAR 0 4
71325: PPUSH
71326: LD_VAR 0 7
71330: PUSH
71331: LD_INT 1
71333: ARRAY
71334: PUSH
71335: LD_INT 1
71337: ARRAY
71338: PPUSH
71339: LD_VAR 0 7
71343: PUSH
71344: LD_INT 1
71346: ARRAY
71347: PUSH
71348: LD_INT 2
71350: ARRAY
71351: PPUSH
71352: CALL_OW 116
71356: GO 71647
// if path > tag then
71358: LD_VAR 0 2
71362: PUSH
71363: LD_VAR 0 9
71367: GREATER
71368: IFFALSE 71576
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71370: LD_ADDR_VAR 0 6
71374: PUSH
71375: LD_VAR 0 5
71379: PPUSH
71380: LD_INT 91
71382: PUSH
71383: LD_VAR 0 4
71387: PUSH
71388: LD_INT 8
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: LIST
71395: PPUSH
71396: CALL_OW 72
71400: ST_TO_ADDR
// if nearEnemy then
71401: LD_VAR 0 6
71405: IFFALSE 71474
// begin if GetWeapon ( i ) = ru_time_lapser then
71407: LD_VAR 0 4
71411: PPUSH
71412: CALL_OW 264
71416: PUSH
71417: LD_INT 49
71419: EQUAL
71420: IFFALSE 71448
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71422: LD_VAR 0 4
71426: PPUSH
71427: LD_VAR 0 6
71431: PPUSH
71432: LD_VAR 0 4
71436: PPUSH
71437: CALL_OW 74
71441: PPUSH
71442: CALL_OW 112
71446: GO 71472
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71448: LD_VAR 0 4
71452: PPUSH
71453: LD_VAR 0 6
71457: PPUSH
71458: LD_VAR 0 4
71462: PPUSH
71463: CALL_OW 74
71467: PPUSH
71468: CALL_OW 115
// end else
71472: GO 71574
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71474: LD_VAR 0 4
71478: PPUSH
71479: LD_VAR 0 2
71483: PUSH
71484: LD_VAR 0 9
71488: ARRAY
71489: PUSH
71490: LD_INT 1
71492: ARRAY
71493: PPUSH
71494: LD_VAR 0 2
71498: PUSH
71499: LD_VAR 0 9
71503: ARRAY
71504: PUSH
71505: LD_INT 2
71507: ARRAY
71508: PPUSH
71509: CALL_OW 297
71513: PUSH
71514: LD_INT 6
71516: GREATER
71517: IFFALSE 71560
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71519: LD_VAR 0 4
71523: PPUSH
71524: LD_VAR 0 2
71528: PUSH
71529: LD_VAR 0 9
71533: ARRAY
71534: PUSH
71535: LD_INT 1
71537: ARRAY
71538: PPUSH
71539: LD_VAR 0 2
71543: PUSH
71544: LD_VAR 0 9
71548: ARRAY
71549: PUSH
71550: LD_INT 2
71552: ARRAY
71553: PPUSH
71554: CALL_OW 114
71558: GO 71574
// SetTag ( i , tag ) ;
71560: LD_VAR 0 4
71564: PPUSH
71565: LD_VAR 0 9
71569: PPUSH
71570: CALL_OW 109
// end else
71574: GO 71647
// if enemy then
71576: LD_VAR 0 5
71580: IFFALSE 71647
// begin if GetWeapon ( i ) = ru_time_lapser then
71582: LD_VAR 0 4
71586: PPUSH
71587: CALL_OW 264
71591: PUSH
71592: LD_INT 49
71594: EQUAL
71595: IFFALSE 71623
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71597: LD_VAR 0 4
71601: PPUSH
71602: LD_VAR 0 5
71606: PPUSH
71607: LD_VAR 0 4
71611: PPUSH
71612: CALL_OW 74
71616: PPUSH
71617: CALL_OW 112
71621: GO 71647
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71623: LD_VAR 0 4
71627: PPUSH
71628: LD_VAR 0 5
71632: PPUSH
71633: LD_VAR 0 4
71637: PPUSH
71638: CALL_OW 74
71642: PPUSH
71643: CALL_OW 115
// end ; end ;
71647: GO 71227
71649: POP
71650: POP
// end ;
71651: LD_VAR 0 3
71655: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71656: LD_INT 0
71658: PPUSH
71659: PPUSH
71660: PPUSH
// if not unit or IsInUnit ( unit ) then
71661: LD_VAR 0 1
71665: NOT
71666: PUSH
71667: LD_VAR 0 1
71671: PPUSH
71672: CALL_OW 310
71676: OR
71677: IFFALSE 71681
// exit ;
71679: GO 71772
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71681: LD_ADDR_VAR 0 4
71685: PUSH
71686: LD_VAR 0 1
71690: PPUSH
71691: CALL_OW 250
71695: PPUSH
71696: LD_VAR 0 2
71700: PPUSH
71701: LD_INT 1
71703: PPUSH
71704: CALL_OW 272
71708: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71709: LD_ADDR_VAR 0 5
71713: PUSH
71714: LD_VAR 0 1
71718: PPUSH
71719: CALL_OW 251
71723: PPUSH
71724: LD_VAR 0 2
71728: PPUSH
71729: LD_INT 1
71731: PPUSH
71732: CALL_OW 273
71736: ST_TO_ADDR
// if ValidHex ( x , y ) then
71737: LD_VAR 0 4
71741: PPUSH
71742: LD_VAR 0 5
71746: PPUSH
71747: CALL_OW 488
71751: IFFALSE 71772
// ComTurnXY ( unit , x , y ) ;
71753: LD_VAR 0 1
71757: PPUSH
71758: LD_VAR 0 4
71762: PPUSH
71763: LD_VAR 0 5
71767: PPUSH
71768: CALL_OW 118
// end ;
71772: LD_VAR 0 3
71776: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71777: LD_INT 0
71779: PPUSH
71780: PPUSH
// result := false ;
71781: LD_ADDR_VAR 0 3
71785: PUSH
71786: LD_INT 0
71788: ST_TO_ADDR
// if not units then
71789: LD_VAR 0 2
71793: NOT
71794: IFFALSE 71798
// exit ;
71796: GO 71843
// for i in units do
71798: LD_ADDR_VAR 0 4
71802: PUSH
71803: LD_VAR 0 2
71807: PUSH
71808: FOR_IN
71809: IFFALSE 71841
// if See ( side , i ) then
71811: LD_VAR 0 1
71815: PPUSH
71816: LD_VAR 0 4
71820: PPUSH
71821: CALL_OW 292
71825: IFFALSE 71839
// begin result := true ;
71827: LD_ADDR_VAR 0 3
71831: PUSH
71832: LD_INT 1
71834: ST_TO_ADDR
// exit ;
71835: POP
71836: POP
71837: GO 71843
// end ;
71839: GO 71808
71841: POP
71842: POP
// end ;
71843: LD_VAR 0 3
71847: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71848: LD_INT 0
71850: PPUSH
71851: PPUSH
71852: PPUSH
71853: PPUSH
// if not unit or not points then
71854: LD_VAR 0 1
71858: NOT
71859: PUSH
71860: LD_VAR 0 2
71864: NOT
71865: OR
71866: IFFALSE 71870
// exit ;
71868: GO 71960
// dist := 99999 ;
71870: LD_ADDR_VAR 0 5
71874: PUSH
71875: LD_INT 99999
71877: ST_TO_ADDR
// for i in points do
71878: LD_ADDR_VAR 0 4
71882: PUSH
71883: LD_VAR 0 2
71887: PUSH
71888: FOR_IN
71889: IFFALSE 71958
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71891: LD_ADDR_VAR 0 6
71895: PUSH
71896: LD_VAR 0 1
71900: PPUSH
71901: LD_VAR 0 4
71905: PUSH
71906: LD_INT 1
71908: ARRAY
71909: PPUSH
71910: LD_VAR 0 4
71914: PUSH
71915: LD_INT 2
71917: ARRAY
71918: PPUSH
71919: CALL_OW 297
71923: ST_TO_ADDR
// if tmpDist < dist then
71924: LD_VAR 0 6
71928: PUSH
71929: LD_VAR 0 5
71933: LESS
71934: IFFALSE 71956
// begin result := i ;
71936: LD_ADDR_VAR 0 3
71940: PUSH
71941: LD_VAR 0 4
71945: ST_TO_ADDR
// dist := tmpDist ;
71946: LD_ADDR_VAR 0 5
71950: PUSH
71951: LD_VAR 0 6
71955: ST_TO_ADDR
// end ; end ;
71956: GO 71888
71958: POP
71959: POP
// end ;
71960: LD_VAR 0 3
71964: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71965: LD_INT 0
71967: PPUSH
// uc_side := side ;
71968: LD_ADDR_OWVAR 20
71972: PUSH
71973: LD_VAR 0 1
71977: ST_TO_ADDR
// uc_nation := 3 ;
71978: LD_ADDR_OWVAR 21
71982: PUSH
71983: LD_INT 3
71985: ST_TO_ADDR
// vc_chassis := 25 ;
71986: LD_ADDR_OWVAR 37
71990: PUSH
71991: LD_INT 25
71993: ST_TO_ADDR
// vc_engine := engine_siberite ;
71994: LD_ADDR_OWVAR 39
71998: PUSH
71999: LD_INT 3
72001: ST_TO_ADDR
// vc_control := control_computer ;
72002: LD_ADDR_OWVAR 38
72006: PUSH
72007: LD_INT 3
72009: ST_TO_ADDR
// vc_weapon := 59 ;
72010: LD_ADDR_OWVAR 40
72014: PUSH
72015: LD_INT 59
72017: ST_TO_ADDR
// result := CreateVehicle ;
72018: LD_ADDR_VAR 0 5
72022: PUSH
72023: CALL_OW 45
72027: ST_TO_ADDR
// SetDir ( result , d ) ;
72028: LD_VAR 0 5
72032: PPUSH
72033: LD_VAR 0 4
72037: PPUSH
72038: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72042: LD_VAR 0 5
72046: PPUSH
72047: LD_VAR 0 2
72051: PPUSH
72052: LD_VAR 0 3
72056: PPUSH
72057: LD_INT 0
72059: PPUSH
72060: CALL_OW 48
// end ;
72064: LD_VAR 0 5
72068: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72069: LD_INT 0
72071: PPUSH
72072: PPUSH
72073: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72074: LD_ADDR_VAR 0 2
72078: PUSH
72079: LD_INT 0
72081: PUSH
72082: LD_INT 0
72084: PUSH
72085: LD_INT 0
72087: PUSH
72088: LD_INT 0
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72097: LD_VAR 0 1
72101: NOT
72102: PUSH
72103: LD_VAR 0 1
72107: PPUSH
72108: CALL_OW 264
72112: PUSH
72113: LD_INT 12
72115: PUSH
72116: LD_INT 51
72118: PUSH
72119: LD_INT 32
72121: PUSH
72122: LD_INT 89
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: IN
72131: NOT
72132: OR
72133: IFFALSE 72137
// exit ;
72135: GO 72235
// for i := 1 to 3 do
72137: LD_ADDR_VAR 0 3
72141: PUSH
72142: DOUBLE
72143: LD_INT 1
72145: DEC
72146: ST_TO_ADDR
72147: LD_INT 3
72149: PUSH
72150: FOR_TO
72151: IFFALSE 72233
// begin tmp := GetCargo ( cargo , i ) ;
72153: LD_ADDR_VAR 0 4
72157: PUSH
72158: LD_VAR 0 1
72162: PPUSH
72163: LD_VAR 0 3
72167: PPUSH
72168: CALL_OW 289
72172: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72173: LD_ADDR_VAR 0 2
72177: PUSH
72178: LD_VAR 0 2
72182: PPUSH
72183: LD_VAR 0 3
72187: PPUSH
72188: LD_VAR 0 4
72192: PPUSH
72193: CALL_OW 1
72197: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72198: LD_ADDR_VAR 0 2
72202: PUSH
72203: LD_VAR 0 2
72207: PPUSH
72208: LD_INT 4
72210: PPUSH
72211: LD_VAR 0 2
72215: PUSH
72216: LD_INT 4
72218: ARRAY
72219: PUSH
72220: LD_VAR 0 4
72224: PLUS
72225: PPUSH
72226: CALL_OW 1
72230: ST_TO_ADDR
// end ;
72231: GO 72150
72233: POP
72234: POP
// end ;
72235: LD_VAR 0 2
72239: RET
// export function Length ( array ) ; begin
72240: LD_INT 0
72242: PPUSH
// result := array + 0 ;
72243: LD_ADDR_VAR 0 2
72247: PUSH
72248: LD_VAR 0 1
72252: PUSH
72253: LD_INT 0
72255: PLUS
72256: ST_TO_ADDR
// end ;
72257: LD_VAR 0 2
72261: RET
// export function PrepareArray ( array ) ; begin
72262: LD_INT 0
72264: PPUSH
// result := array diff 0 ;
72265: LD_ADDR_VAR 0 2
72269: PUSH
72270: LD_VAR 0 1
72274: PUSH
72275: LD_INT 0
72277: DIFF
72278: ST_TO_ADDR
// if not result [ 1 ] then
72279: LD_VAR 0 2
72283: PUSH
72284: LD_INT 1
72286: ARRAY
72287: NOT
72288: IFFALSE 72308
// result := Delete ( result , 1 ) ;
72290: LD_ADDR_VAR 0 2
72294: PUSH
72295: LD_VAR 0 2
72299: PPUSH
72300: LD_INT 1
72302: PPUSH
72303: CALL_OW 3
72307: ST_TO_ADDR
// end ;
72308: LD_VAR 0 2
72312: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72313: LD_INT 0
72315: PPUSH
72316: PPUSH
72317: PPUSH
72318: PPUSH
// sibRocketRange := 25 ;
72319: LD_ADDR_VAR 0 6
72323: PUSH
72324: LD_INT 25
72326: ST_TO_ADDR
// result := false ;
72327: LD_ADDR_VAR 0 4
72331: PUSH
72332: LD_INT 0
72334: ST_TO_ADDR
// for i := 0 to 5 do
72335: LD_ADDR_VAR 0 5
72339: PUSH
72340: DOUBLE
72341: LD_INT 0
72343: DEC
72344: ST_TO_ADDR
72345: LD_INT 5
72347: PUSH
72348: FOR_TO
72349: IFFALSE 72416
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72351: LD_VAR 0 1
72355: PPUSH
72356: LD_VAR 0 5
72360: PPUSH
72361: LD_VAR 0 6
72365: PPUSH
72366: CALL_OW 272
72370: PPUSH
72371: LD_VAR 0 2
72375: PPUSH
72376: LD_VAR 0 5
72380: PPUSH
72381: LD_VAR 0 6
72385: PPUSH
72386: CALL_OW 273
72390: PPUSH
72391: LD_VAR 0 3
72395: PPUSH
72396: CALL_OW 309
72400: IFFALSE 72414
// begin result := true ;
72402: LD_ADDR_VAR 0 4
72406: PUSH
72407: LD_INT 1
72409: ST_TO_ADDR
// exit ;
72410: POP
72411: POP
72412: GO 72418
// end ;
72414: GO 72348
72416: POP
72417: POP
// end ;
72418: LD_VAR 0 4
72422: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72423: LD_INT 0
72425: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72426: LD_VAR 0 1
72430: PPUSH
72431: LD_VAR 0 2
72435: PPUSH
72436: LD_INT 0
72438: PPUSH
72439: LD_INT 0
72441: PPUSH
72442: LD_INT 1
72444: PPUSH
72445: LD_INT 0
72447: PPUSH
72448: CALL_OW 587
// end ; end_of_file
72452: LD_VAR 0 3
72456: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72457: LD_VAR 0 1
72461: PUSH
72462: LD_INT 200
72464: DOUBLE
72465: GREATEREQUAL
72466: IFFALSE 72474
72468: LD_INT 299
72470: DOUBLE
72471: LESSEQUAL
72472: IFTRUE 72476
72474: GO 72508
72476: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72477: LD_VAR 0 1
72481: PPUSH
72482: LD_VAR 0 2
72486: PPUSH
72487: LD_VAR 0 3
72491: PPUSH
72492: LD_VAR 0 4
72496: PPUSH
72497: LD_VAR 0 5
72501: PPUSH
72502: CALL 27123 0 5
72506: GO 72585
72508: LD_INT 300
72510: DOUBLE
72511: GREATEREQUAL
72512: IFFALSE 72520
72514: LD_INT 399
72516: DOUBLE
72517: LESSEQUAL
72518: IFTRUE 72522
72520: GO 72584
72522: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72523: LD_VAR 0 1
72527: PPUSH
72528: LD_VAR 0 2
72532: PPUSH
72533: LD_VAR 0 3
72537: PPUSH
72538: LD_VAR 0 4
72542: PPUSH
72543: LD_VAR 0 5
72547: PPUSH
72548: LD_VAR 0 6
72552: PPUSH
72553: LD_VAR 0 7
72557: PPUSH
72558: LD_VAR 0 8
72562: PPUSH
72563: LD_VAR 0 9
72567: PPUSH
72568: LD_VAR 0 10
72572: PPUSH
72573: LD_VAR 0 11
72577: PPUSH
72578: CALL 23456 0 11
72582: GO 72585
72584: POP
// end ;
72585: PPOPN 11
72587: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72588: LD_VAR 0 1
72592: PPUSH
72593: LD_VAR 0 2
72597: PPUSH
72598: LD_VAR 0 3
72602: PPUSH
72603: LD_VAR 0 4
72607: PPUSH
72608: LD_VAR 0 5
72612: PPUSH
72613: CALL 26859 0 5
// end ; end_of_file
72617: PPOPN 5
72619: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72620: LD_VAR 0 1
72624: PPUSH
72625: LD_VAR 0 2
72629: PPUSH
72630: LD_VAR 0 3
72634: PPUSH
72635: LD_VAR 0 4
72639: PPUSH
72640: LD_VAR 0 5
72644: PPUSH
72645: LD_VAR 0 6
72649: PPUSH
72650: CALL 11108 0 6
// end ;
72654: PPOPN 6
72656: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72657: LD_INT 0
72659: PPUSH
// begin if not units then
72660: LD_VAR 0 1
72664: NOT
72665: IFFALSE 72669
// exit ;
72667: GO 72669
// end ;
72669: PPOPN 7
72671: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72672: CALL 11012 0 0
// end ;
72676: PPOPN 1
72678: END
