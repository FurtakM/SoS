// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9209 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: LD_INT 91
2674: ST_TO_ADDR
// us_artillery := 97 ;
2675: LD_ADDR_EXP 17
2679: PUSH
2680: LD_INT 97
2682: ST_TO_ADDR
// ru_radar := 98 ;
2683: LD_ADDR_EXP 14
2687: PUSH
2688: LD_INT 98
2690: ST_TO_ADDR
// game_started := false ;
2691: LD_ADDR_EXP 7
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// points := 0 ;
2699: LD_ADDR_EXP 2
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// waveNumber := 0 ;
2707: LD_ADDR_EXP 5
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// timeToNextAttack := 0 ;
2715: LD_ADDR_EXP 4
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// graveyard := [ ] ;
2723: LD_ADDR_EXP 8
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// base_x := 1 ;
2730: LD_ADDR_EXP 9
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// base_y := 1 ;
2738: LD_ADDR_EXP 10
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if difficultyLevel > 2 then
2746: LD_EXP 3
2750: PUSH
2751: LD_INT 2
2753: GREATER
2754: IFFALSE 2769
// SetTech ( 5 , 7 , state_researched ) ;
2756: LD_INT 5
2758: PPUSH
2759: LD_INT 7
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: CALL_OW 322
// if not playerNation then
2769: LD_EXP 6
2773: NOT
2774: IFFALSE 2800
// begin points := 100 ;
2776: LD_ADDR_EXP 2
2780: PUSH
2781: LD_INT 100
2783: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2784: LD_ADDR_EXP 6
2788: PUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 3
2794: PPUSH
2795: CALL_OW 12
2799: ST_TO_ADDR
// end ; your_side := playerNation ;
2800: LD_ADDR_OWVAR 2
2804: PUSH
2805: LD_EXP 6
2809: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2810: LD_OWVAR 2
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2822: LD_INT 25
2824: PUSH
2825: LD_INT 20
2827: PUSH
2828: LD_INT 15
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 3
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: LD_INT 1
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_EXP 3
2892: ARRAY
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: PPUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: LD_INT 88
2915: PPUSH
2916: LD_INT 76
2918: PPUSH
2919: LD_INT 6
2921: PPUSH
2922: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2926: LD_EXP 6
2930: PPUSH
2931: LD_INT 9
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 5
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 24
2957: PUSH
2958: LD_INT 16
2960: PUSH
2961: LD_INT 12
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_EXP 3
2977: ARRAY
2978: PPUSH
2979: LD_INT 88
2981: PPUSH
2982: LD_INT 76
2984: PPUSH
2985: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2989: LD_INT 88
2991: PPUSH
2992: LD_INT 76
2994: PPUSH
2995: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2999: LD_INT 90
3001: PPUSH
3002: LD_INT 79
3004: PPUSH
3005: LD_OWVAR 2
3009: PPUSH
3010: LD_INT 50
3012: NEG
3013: PPUSH
3014: CALL_OW 330
// if debug then
3018: LD_EXP 1
3022: IFFALSE 3033
// FogOff ( your_side ) ;
3024: LD_OWVAR 2
3028: PPUSH
3029: CALL_OW 344
// end ;
3033: LD_VAR 0 1
3037: RET
// every 0 0$01 trigger game_started do var i ;
3038: LD_EXP 7
3042: IFFALSE 3276
3044: GO 3046
3046: DISABLE
3047: LD_INT 0
3049: PPUSH
// begin while ( game_started ) do
3050: LD_EXP 7
3054: IFFALSE 3276
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3056: LD_INT 22
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PUSH
3071: LD_INT 5
3073: LESS
3074: PUSH
3075: LD_EXP 4
3079: PUSH
3080: LD_INT 0
3082: LESSEQUAL
3083: AND
3084: IFFALSE 3267
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3086: LD_INT 22
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: IFFALSE 3138
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PPUSH
3117: CALL_OW 69
3121: PUSH
3122: FOR_IN
3123: IFFALSE 3136
// RemoveUnit ( i ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 64
3134: GO 3122
3136: POP
3137: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3138: LD_EXP 5
3142: PUSH
3143: LD_INT 3
3145: MOD
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: PUSH
3151: LD_EXP 5
3155: PUSH
3156: LD_INT 10
3158: MOD
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: OR
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: AND
3174: IFFALSE 3180
// InitBonus ;
3176: CALL 9306 0 0
// if waveNumber mod 10 = 0 then
3180: LD_EXP 5
3184: PUSH
3185: LD_INT 10
3187: MOD
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3198
// SaveForQuickRestart ;
3194: CALL_OW 22
// if waveNumber = 100 then
3198: LD_EXP 5
3202: PUSH
3203: LD_INT 100
3205: EQUAL
3206: IFFALSE 3219
// begin FogOff ( your_side ) ;
3208: LD_OWVAR 2
3212: PPUSH
3213: CALL_OW 344
// break ;
3217: GO 3276
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3219: LD_ADDR_EXP 4
3223: PUSH
3224: LD_INT 3150
3226: PPUSH
3227: LD_INT 5250
3229: PPUSH
3230: CALL_OW 12
3234: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3235: LD_EXP 4
3239: PPUSH
3240: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3244: LD_ADDR_EXP 5
3248: PUSH
3249: LD_EXP 5
3253: PUSH
3254: LD_INT 1
3256: PLUS
3257: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3258: LD_EXP 5
3262: PPUSH
3263: CALL 4297 0 1
// end ; Wait ( 0 0$01 ) ;
3267: LD_INT 35
3269: PPUSH
3270: CALL_OW 67
// end ;
3274: GO 3050
// end ;
3276: PPOPN 1
3278: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3279: LD_EXP 4
3283: PUSH
3284: LD_INT 0
3286: GREATER
3287: IFFALSE 3307
3289: GO 3291
3291: DISABLE
// begin enable ;
3292: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3293: LD_ADDR_EXP 4
3297: PUSH
3298: LD_EXP 4
3302: PUSH
3303: LD_INT 35
3305: MINUS
3306: ST_TO_ADDR
// end ; end_of_file
3307: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3308: LD_VAR 0 1
3312: PUSH
3313: LD_EXP 13
3317: IN
3318: NOT
3319: IFFALSE 3350
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3321: LD_ADDR_EXP 13
3325: PUSH
3326: LD_EXP 13
3330: PPUSH
3331: LD_EXP 13
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 1
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// end ;
3350: PPOPN 1
3352: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL 25489 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 255
3371: PUSH
3372: LD_OWVAR 2
3376: EQUAL
3377: PUSH
3378: LD_VAR 0 1
3382: PPUSH
3383: CALL_OW 247
3387: PUSH
3388: LD_INT 1
3390: EQUAL
3391: AND
3392: IFFALSE 3423
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3394: LD_ADDR_EXP 8
3398: PUSH
3399: LD_EXP 8
3403: PPUSH
3404: LD_EXP 8
3408: PUSH
3409: LD_INT 1
3411: PLUS
3412: PPUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 255
3432: PUSH
3433: LD_INT 7
3435: EQUAL
3436: IFFALSE 3810
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3438: LD_VAR 0 1
3442: PUSH
3443: LD_INT 34
3445: PUSH
3446: LD_INT 91
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 69
3457: IN
3458: IFFALSE 3503
// begin if Rand ( 1 , 100 ) <= 70 then
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 100
3465: PPUSH
3466: CALL_OW 12
3470: PUSH
3471: LD_INT 70
3473: LESSEQUAL
3474: IFFALSE 3503
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 250
3485: PPUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 251
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 247
3512: PUSH
3513: LD_INT 1
3515: DOUBLE
3516: EQUAL
3517: IFTRUE 3521
3519: GO 3655
3521: POP
// begin case GetClass ( un ) of class_apeman :
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 257
3531: PUSH
3532: LD_INT 12
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3550
3540: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3541: LD_INT 2
3543: PPUSH
3544: CALL 471 0 1
3548: GO 3653
3550: LD_INT 15
3552: DOUBLE
3553: EQUAL
3554: IFTRUE 3558
3556: GO 3568
3558: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3559: LD_INT 5
3561: PPUSH
3562: CALL 471 0 1
3566: GO 3653
3568: LD_INT 17
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3586
3576: POP
// AddPoints ( 30 ) ; class_soldier :
3577: LD_INT 30
3579: PPUSH
3580: CALL 471 0 1
3584: GO 3653
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3604
3594: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3595: LD_INT 50
3597: PPUSH
3598: CALL 471 0 1
3602: GO 3653
3604: LD_INT 9
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3624
3610: LD_INT 5
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3624
3616: LD_INT 8
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3634
3624: POP
// AddPoints ( 75 ) ; class_mechanic :
3625: LD_INT 75
3627: PPUSH
3628: CALL 471 0 1
3632: GO 3653
3634: LD_INT 3
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3652
3642: POP
// AddPoints ( 60 ) ; end ;
3643: LD_INT 60
3645: PPUSH
3646: CALL 471 0 1
3650: GO 3653
3652: POP
// end ; unit_vehicle :
3653: GO 3810
3655: LD_INT 2
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3809
3663: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3664: LD_VAR 0 1
3668: PPUSH
3669: CALL_OW 265
3673: PUSH
3674: LD_INT 12
3676: DOUBLE
3677: EQUAL
3678: IFTRUE 3694
3680: LD_INT 1
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3694
3686: LD_INT 11
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3694
3692: GO 3704
3694: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3695: LD_INT 100
3697: PPUSH
3698: CALL 471 0 1
3702: GO 3807
3704: LD_INT 13
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3742
3710: LD_INT 14
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3742
3716: LD_INT 2
3718: DOUBLE
3719: EQUAL
3720: IFTRUE 3742
3722: LD_INT 3
3724: DOUBLE
3725: EQUAL
3726: IFTRUE 3742
3728: LD_INT 21
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3742
3734: LD_INT 22
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3752
3742: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3743: LD_INT 250
3745: PPUSH
3746: CALL 471 0 1
3750: GO 3807
3752: LD_INT 4
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3778
3758: LD_INT 5
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3778
3764: LD_INT 23
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3778
3770: LD_INT 24
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3788
3778: POP
// AddPoints ( 500 ) ; 25 :
3779: LD_INT 500
3781: PPUSH
3782: CALL 471 0 1
3786: GO 3807
3788: LD_INT 25
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3806
3796: POP
// AddPoints ( 1250 ) ; end ;
3797: LD_INT 1250
3799: PPUSH
3800: CALL 471 0 1
3804: GO 3807
3806: POP
// end ; end ;
3807: GO 3810
3809: POP
// end ; end ;
3810: PPOPN 1
3812: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 266
3822: PUSH
3823: LD_INT 0
3825: EQUAL
3826: IFFALSE 3876
// begin base_x := GetX ( b ) ;
3828: LD_ADDR_EXP 9
3832: PUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 250
3842: ST_TO_ADDR
// base_y := GetY ( b ) ;
3843: LD_ADDR_EXP 10
3847: PUSH
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 251
3857: ST_TO_ADDR
// base := b ;
3858: LD_ADDR_EXP 11
3862: PUSH
3863: LD_VAR 0 1
3867: ST_TO_ADDR
// game_started := true ;
3868: LD_ADDR_EXP 7
3872: PUSH
3873: LD_INT 1
3875: ST_TO_ADDR
// end ; end ;
3876: PPOPN 1
3878: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 255
3888: PUSH
3889: LD_OWVAR 2
3893: EQUAL
3894: IFFALSE 3898
// exit ;
3896: GO 4045
// if GetType ( un ) = unit_vehicle then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 247
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: IFFALSE 3964
// begin KillUnit ( un ) ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 248
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 264
3945: PUSH
3946: LD_INT 49
3948: PUSH
3949: EMPTY
3950: LIST
3951: IN
3952: OR
3953: IFFALSE 3964
// ExplodeVehicle ( un ) ;
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 247
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4045
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 248
3988: PUSH
3989: LD_INT 2
3991: EQUAL
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 248
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: IN
4033: OR
4034: IFFALSE 4045
// KillUnit ( un ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 66
// end ; end ;
4045: PPOPN 1
4047: END
// every 0 0$1 do
4048: GO 4050
4050: DISABLE
// begin enable ;
4051: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4052: LD_INT 4
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 22
4060: PUSH
4061: LD_OWVAR 2
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 513
// end ;
4074: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4075: LD_EXP 7
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_OWVAR 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PUSH
4111: LD_INT 0
4113: EQUAL
4114: AND
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( die ) ;
4120: LD_STRING die
4122: PPUSH
4123: CALL_OW 104
4127: END
// every 0 0$21 trigger tick <= 15 15$00 do
4128: LD_OWVAR 1
4132: PUSH
4133: LD_INT 31500
4135: LESSEQUAL
4136: IFFALSE 4163
4138: GO 4140
4140: DISABLE
// begin enable ;
4141: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 5
4147: PPUSH
4148: CALL_OW 12
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: CALL_OW 55
// end ;
4163: END
// every 0 0$51 trigger tick > 15 15$00 do
4164: LD_OWVAR 1
4168: PUSH
4169: LD_INT 31500
4171: GREATER
4172: IFFALSE 4219
4174: GO 4176
4176: DISABLE
// begin enable ;
4177: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4178: LD_INT 22
4180: PUSH
4181: LD_INT 7
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 69
4192: PUSH
4193: LD_INT 0
4195: EQUAL
4196: IFFALSE 4219
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 5
4203: PPUSH
4204: CALL_OW 12
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 55
// end ;
4219: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4220: LD_VAR 0 1
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: CALL_OW 308
4232: IFFALSE 4243
// KillUnit ( building ) ;
4234: LD_VAR 0 1
4238: PPUSH
4239: CALL_OW 66
// end ;
4243: PPOPN 2
4245: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL 25587 0 3
// end ;
4265: PPOPN 3
4267: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL 25611 0 2
// end ;
4282: PPOPN 2
4284: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4285: LD_VAR 0 1
4289: PPUSH
4290: CALL 25595 0 1
// end ; end_of_file
4294: PPOPN 1
4296: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4297: LD_INT 0
4299: PPUSH
4300: PPUSH
4301: PPUSH
4302: PPUSH
4303: PPUSH
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4308: LD_ADDR_VAR 0 7
4312: PUSH
4313: LD_INT 1
4315: PUSH
4316: LD_INT 2
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: ST_TO_ADDR
// uc_side := 7 ;
4323: LD_ADDR_OWVAR 20
4327: PUSH
4328: LD_INT 7
4330: ST_TO_ADDR
// l := 0 ;
4331: LD_ADDR_VAR 0 9
4335: PUSH
4336: LD_INT 0
4338: ST_TO_ADDR
// case num of 1 :
4339: LD_VAR 0 1
4343: PUSH
4344: LD_INT 1
4346: DOUBLE
4347: EQUAL
4348: IFTRUE 4352
4350: GO 4371
4352: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4353: LD_ADDR_VAR 0 2
4357: PUSH
4358: LD_INT 12
4360: PPUSH
4361: LD_INT 1
4363: PPUSH
4364: CALL 6700 0 2
4368: ST_TO_ADDR
4369: GO 6509
4371: LD_INT 2
4373: DOUBLE
4374: EQUAL
4375: IFTRUE 4379
4377: GO 4398
4379: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4380: LD_ADDR_VAR 0 2
4384: PUSH
4385: LD_INT 12
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: CALL 6771 0 2
4395: ST_TO_ADDR
4396: GO 6509
4398: LD_INT 3
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4425
4406: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4407: LD_ADDR_VAR 0 2
4411: PUSH
4412: LD_INT 12
4414: PPUSH
4415: LD_INT 1
4417: PPUSH
4418: CALL 6842 0 2
4422: ST_TO_ADDR
4423: GO 6509
4425: LD_INT 4
4427: DOUBLE
4428: EQUAL
4429: IFTRUE 4433
4431: GO 4452
4433: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: LD_INT 7
4441: PPUSH
4442: LD_INT 1
4444: PPUSH
4445: CALL 6921 0 2
4449: ST_TO_ADDR
4450: GO 6509
4452: LD_INT 5
4454: DOUBLE
4455: EQUAL
4456: IFTRUE 4460
4458: GO 4479
4460: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: LD_INT 7
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: CALL 7317 0 2
4476: ST_TO_ADDR
4477: GO 6509
4479: LD_INT 6
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4506
4487: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4488: LD_ADDR_VAR 0 2
4492: PUSH
4493: LD_INT 6
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: CALL 7737 0 2
4503: ST_TO_ADDR
4504: GO 6509
4506: LD_INT 7
4508: DOUBLE
4509: EQUAL
4510: IFTRUE 4514
4512: GO 4533
4514: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: LD_INT 15
4522: PPUSH
4523: LD_INT 1
4525: PPUSH
4526: CALL 8157 0 2
4530: ST_TO_ADDR
4531: GO 6509
4533: LD_INT 8
4535: DOUBLE
4536: EQUAL
4537: IFTRUE 4541
4539: GO 4560
4541: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: LD_INT 7
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: CALL 8258 0 2
4557: ST_TO_ADDR
4558: GO 6509
4560: LD_INT 9
4562: DOUBLE
4563: EQUAL
4564: IFTRUE 4568
4566: GO 4599
4568: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4569: LD_ADDR_VAR 0 2
4573: PUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL 8258 0 2
4584: PUSH
4585: LD_INT 7
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: CALL 7317 0 2
4595: ADD
4596: ST_TO_ADDR
4597: GO 6509
4599: LD_INT 10
4601: DOUBLE
4602: EQUAL
4603: IFTRUE 4607
4605: GO 4638
4607: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4608: LD_ADDR_VAR 0 2
4612: PUSH
4613: LD_INT 9
4615: PPUSH
4616: LD_INT 1
4618: PPUSH
4619: CALL 8157 0 2
4623: PUSH
4624: LD_INT 14
4626: PPUSH
4627: LD_INT 1
4629: PPUSH
4630: CALL 6842 0 2
4634: ADD
4635: ST_TO_ADDR
4636: GO 6509
4638: LD_INT 11
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4694
4644: LD_INT 21
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4694
4650: LD_INT 31
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4694
4656: LD_INT 41
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4694
4662: LD_INT 51
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4694
4668: LD_INT 61
4670: DOUBLE
4671: EQUAL
4672: IFTRUE 4694
4674: LD_INT 71
4676: DOUBLE
4677: EQUAL
4678: IFTRUE 4694
4680: LD_INT 81
4682: DOUBLE
4683: EQUAL
4684: IFTRUE 4694
4686: LD_INT 91
4688: DOUBLE
4689: EQUAL
4690: IFTRUE 4694
4692: GO 4803
4694: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4695: LD_ADDR_VAR 0 2
4699: PUSH
4700: LD_INT 20
4702: PUSH
4703: LD_INT 30
4705: PUSH
4706: LD_INT 40
4708: PUSH
4709: LD_INT 45
4711: PUSH
4712: LD_INT 50
4714: PUSH
4715: LD_INT 60
4717: PUSH
4718: LD_INT 70
4720: PUSH
4721: LD_INT 80
4723: PUSH
4724: LD_INT 100
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_VAR 0 1
4742: PUSH
4743: LD_INT 10
4745: DIV
4746: ARRAY
4747: PPUSH
4748: LD_INT 2
4750: PUSH
4751: LD_INT 3
4753: PUSH
4754: LD_INT 4
4756: PUSH
4757: LD_INT 5
4759: PUSH
4760: LD_INT 6
4762: PUSH
4763: LD_INT 7
4765: PUSH
4766: LD_INT 8
4768: PUSH
4769: LD_INT 9
4771: PUSH
4772: LD_INT 10
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: PUSH
4786: LD_VAR 0 1
4790: PUSH
4791: LD_INT 10
4793: DIV
4794: ARRAY
4795: PPUSH
4796: CALL 6700 0 2
4800: ST_TO_ADDR
4801: GO 6509
4803: LD_INT 12
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4859
4809: LD_INT 22
4811: DOUBLE
4812: EQUAL
4813: IFTRUE 4859
4815: LD_INT 32
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4859
4821: LD_INT 42
4823: DOUBLE
4824: EQUAL
4825: IFTRUE 4859
4827: LD_INT 52
4829: DOUBLE
4830: EQUAL
4831: IFTRUE 4859
4833: LD_INT 62
4835: DOUBLE
4836: EQUAL
4837: IFTRUE 4859
4839: LD_INT 72
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4859
4845: LD_INT 82
4847: DOUBLE
4848: EQUAL
4849: IFTRUE 4859
4851: LD_INT 92
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4968
4859: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: LD_INT 16
4867: PUSH
4868: LD_INT 21
4870: PUSH
4871: LD_INT 28
4873: PUSH
4874: LD_INT 33
4876: PUSH
4877: LD_INT 39
4879: PUSH
4880: LD_INT 46
4882: PUSH
4883: LD_INT 56
4885: PUSH
4886: LD_INT 66
4888: PUSH
4889: LD_INT 80
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_VAR 0 1
4907: PUSH
4908: LD_INT 10
4910: DIV
4911: ARRAY
4912: PPUSH
4913: LD_INT 2
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 4
4921: PUSH
4922: LD_INT 5
4924: PUSH
4925: LD_INT 6
4927: PUSH
4928: LD_INT 7
4930: PUSH
4931: LD_INT 8
4933: PUSH
4934: LD_INT 9
4936: PUSH
4937: LD_INT 10
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: PUSH
4951: LD_VAR 0 1
4955: PUSH
4956: LD_INT 10
4958: DIV
4959: ARRAY
4960: PPUSH
4961: CALL 6771 0 2
4965: ST_TO_ADDR
4966: GO 6509
4968: LD_INT 13
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 5024
4974: LD_INT 23
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 5024
4980: LD_INT 33
4982: DOUBLE
4983: EQUAL
4984: IFTRUE 5024
4986: LD_INT 43
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 5024
4992: LD_INT 53
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5024
4998: LD_INT 63
5000: DOUBLE
5001: EQUAL
5002: IFTRUE 5024
5004: LD_INT 73
5006: DOUBLE
5007: EQUAL
5008: IFTRUE 5024
5010: LD_INT 83
5012: DOUBLE
5013: EQUAL
5014: IFTRUE 5024
5016: LD_INT 93
5018: DOUBLE
5019: EQUAL
5020: IFTRUE 5024
5022: GO 5133
5024: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_INT 14
5032: PUSH
5033: LD_INT 18
5035: PUSH
5036: LD_INT 22
5038: PUSH
5039: LD_INT 27
5041: PUSH
5042: LD_INT 33
5044: PUSH
5045: LD_INT 39
5047: PUSH
5048: LD_INT 44
5050: PUSH
5051: LD_INT 57
5053: PUSH
5054: LD_INT 65
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: PUSH
5068: LD_VAR 0 1
5072: PUSH
5073: LD_INT 10
5075: DIV
5076: ARRAY
5077: PPUSH
5078: LD_INT 2
5080: PUSH
5081: LD_INT 3
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: LD_INT 5
5089: PUSH
5090: LD_INT 6
5092: PUSH
5093: LD_INT 7
5095: PUSH
5096: LD_INT 8
5098: PUSH
5099: LD_INT 9
5101: PUSH
5102: LD_INT 10
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: PUSH
5116: LD_VAR 0 1
5120: PUSH
5121: LD_INT 10
5123: DIV
5124: ARRAY
5125: PPUSH
5126: CALL 6842 0 2
5130: ST_TO_ADDR
5131: GO 6509
5133: LD_INT 14
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5189
5139: LD_INT 24
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5189
5145: LD_INT 34
5147: DOUBLE
5148: EQUAL
5149: IFTRUE 5189
5151: LD_INT 44
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5189
5157: LD_INT 54
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5189
5163: LD_INT 64
5165: DOUBLE
5166: EQUAL
5167: IFTRUE 5189
5169: LD_INT 74
5171: DOUBLE
5172: EQUAL
5173: IFTRUE 5189
5175: LD_INT 84
5177: DOUBLE
5178: EQUAL
5179: IFTRUE 5189
5181: LD_INT 94
5183: DOUBLE
5184: EQUAL
5185: IFTRUE 5189
5187: GO 5298
5189: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5190: LD_ADDR_VAR 0 2
5194: PUSH
5195: LD_INT 9
5197: PUSH
5198: LD_INT 15
5200: PUSH
5201: LD_INT 22
5203: PUSH
5204: LD_INT 30
5206: PUSH
5207: LD_INT 39
5209: PUSH
5210: LD_INT 45
5212: PUSH
5213: LD_INT 56
5215: PUSH
5216: LD_INT 60
5218: PUSH
5219: LD_INT 65
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: LD_VAR 0 1
5237: PUSH
5238: LD_INT 10
5240: DIV
5241: ARRAY
5242: PPUSH
5243: LD_INT 2
5245: PUSH
5246: LD_INT 3
5248: PUSH
5249: LD_INT 4
5251: PUSH
5252: LD_INT 5
5254: PUSH
5255: LD_INT 6
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: LD_INT 8
5263: PUSH
5264: LD_INT 9
5266: PUSH
5267: LD_INT 10
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: LD_VAR 0 1
5285: PUSH
5286: LD_INT 10
5288: DIV
5289: ARRAY
5290: PPUSH
5291: CALL 6921 0 2
5295: ST_TO_ADDR
5296: GO 6509
5298: LD_INT 15
5300: DOUBLE
5301: EQUAL
5302: IFTRUE 5354
5304: LD_INT 25
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5354
5310: LD_INT 35
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5354
5316: LD_INT 45
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5354
5322: LD_INT 55
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5354
5328: LD_INT 65
5330: DOUBLE
5331: EQUAL
5332: IFTRUE 5354
5334: LD_INT 75
5336: DOUBLE
5337: EQUAL
5338: IFTRUE 5354
5340: LD_INT 85
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5354
5346: LD_INT 95
5348: DOUBLE
5349: EQUAL
5350: IFTRUE 5354
5352: GO 5463
5354: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_INT 6
5362: PUSH
5363: LD_INT 11
5365: PUSH
5366: LD_INT 15
5368: PUSH
5369: LD_INT 20
5371: PUSH
5372: LD_INT 25
5374: PUSH
5375: LD_INT 30
5377: PUSH
5378: LD_INT 35
5380: PUSH
5381: LD_INT 40
5383: PUSH
5384: LD_INT 45
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: LD_VAR 0 1
5402: PUSH
5403: LD_INT 10
5405: DIV
5406: ARRAY
5407: PPUSH
5408: LD_INT 2
5410: PUSH
5411: LD_INT 3
5413: PUSH
5414: LD_INT 4
5416: PUSH
5417: LD_INT 5
5419: PUSH
5420: LD_INT 6
5422: PUSH
5423: LD_INT 7
5425: PUSH
5426: LD_INT 8
5428: PUSH
5429: LD_INT 9
5431: PUSH
5432: LD_INT 10
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: PUSH
5446: LD_VAR 0 1
5450: PUSH
5451: LD_INT 10
5453: DIV
5454: ARRAY
5455: PPUSH
5456: CALL 7317 0 2
5460: ST_TO_ADDR
5461: GO 6509
5463: LD_INT 16
5465: DOUBLE
5466: EQUAL
5467: IFTRUE 5519
5469: LD_INT 26
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5519
5475: LD_INT 36
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5519
5481: LD_INT 46
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5519
5487: LD_INT 56
5489: DOUBLE
5490: EQUAL
5491: IFTRUE 5519
5493: LD_INT 66
5495: DOUBLE
5496: EQUAL
5497: IFTRUE 5519
5499: LD_INT 76
5501: DOUBLE
5502: EQUAL
5503: IFTRUE 5519
5505: LD_INT 86
5507: DOUBLE
5508: EQUAL
5509: IFTRUE 5519
5511: LD_INT 96
5513: DOUBLE
5514: EQUAL
5515: IFTRUE 5519
5517: GO 5628
5519: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5520: LD_ADDR_VAR 0 2
5524: PUSH
5525: LD_INT 9
5527: PUSH
5528: LD_INT 12
5530: PUSH
5531: LD_INT 15
5533: PUSH
5534: LD_INT 18
5536: PUSH
5537: LD_INT 21
5539: PUSH
5540: LD_INT 24
5542: PUSH
5543: LD_INT 27
5545: PUSH
5546: LD_INT 30
5548: PUSH
5549: LD_INT 33
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: PUSH
5563: LD_VAR 0 1
5567: PUSH
5568: LD_INT 10
5570: DIV
5571: ARRAY
5572: PPUSH
5573: LD_INT 2
5575: PUSH
5576: LD_INT 3
5578: PUSH
5579: LD_INT 4
5581: PUSH
5582: LD_INT 5
5584: PUSH
5585: LD_INT 6
5587: PUSH
5588: LD_INT 7
5590: PUSH
5591: LD_INT 8
5593: PUSH
5594: LD_INT 9
5596: PUSH
5597: LD_INT 10
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: PUSH
5611: LD_VAR 0 1
5615: PUSH
5616: LD_INT 10
5618: DIV
5619: ARRAY
5620: PPUSH
5621: CALL 7737 0 2
5625: ST_TO_ADDR
5626: GO 6509
5628: LD_INT 17
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5684
5634: LD_INT 27
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5684
5640: LD_INT 37
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5684
5646: LD_INT 47
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5684
5652: LD_INT 57
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5684
5658: LD_INT 67
5660: DOUBLE
5661: EQUAL
5662: IFTRUE 5684
5664: LD_INT 77
5666: DOUBLE
5667: EQUAL
5668: IFTRUE 5684
5670: LD_INT 87
5672: DOUBLE
5673: EQUAL
5674: IFTRUE 5684
5676: LD_INT 97
5678: DOUBLE
5679: EQUAL
5680: IFTRUE 5684
5682: GO 5793
5684: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5685: LD_ADDR_VAR 0 2
5689: PUSH
5690: LD_INT 14
5692: PUSH
5693: LD_INT 16
5695: PUSH
5696: LD_INT 18
5698: PUSH
5699: LD_INT 22
5701: PUSH
5702: LD_INT 24
5704: PUSH
5705: LD_INT 26
5707: PUSH
5708: LD_INT 28
5710: PUSH
5711: LD_INT 32
5713: PUSH
5714: LD_INT 35
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_VAR 0 1
5732: PUSH
5733: LD_INT 10
5735: DIV
5736: ARRAY
5737: PPUSH
5738: LD_INT 2
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 4
5746: PUSH
5747: LD_INT 5
5749: PUSH
5750: LD_INT 6
5752: PUSH
5753: LD_INT 7
5755: PUSH
5756: LD_INT 8
5758: PUSH
5759: LD_INT 9
5761: PUSH
5762: LD_INT 10
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: PUSH
5776: LD_VAR 0 1
5780: PUSH
5781: LD_INT 10
5783: DIV
5784: ARRAY
5785: PPUSH
5786: CALL 8157 0 2
5790: ST_TO_ADDR
5791: GO 6509
5793: LD_INT 18
5795: DOUBLE
5796: EQUAL
5797: IFTRUE 5849
5799: LD_INT 28
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5849
5805: LD_INT 38
5807: DOUBLE
5808: EQUAL
5809: IFTRUE 5849
5811: LD_INT 48
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5849
5817: LD_INT 58
5819: DOUBLE
5820: EQUAL
5821: IFTRUE 5849
5823: LD_INT 68
5825: DOUBLE
5826: EQUAL
5827: IFTRUE 5849
5829: LD_INT 78
5831: DOUBLE
5832: EQUAL
5833: IFTRUE 5849
5835: LD_INT 88
5837: DOUBLE
5838: EQUAL
5839: IFTRUE 5849
5841: LD_INT 98
5843: DOUBLE
5844: EQUAL
5845: IFTRUE 5849
5847: GO 5958
5849: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5850: LD_ADDR_VAR 0 2
5854: PUSH
5855: LD_INT 9
5857: PUSH
5858: LD_INT 12
5860: PUSH
5861: LD_INT 15
5863: PUSH
5864: LD_INT 18
5866: PUSH
5867: LD_INT 21
5869: PUSH
5870: LD_INT 24
5872: PUSH
5873: LD_INT 27
5875: PUSH
5876: LD_INT 30
5878: PUSH
5879: LD_INT 33
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PUSH
5893: LD_VAR 0 1
5897: PUSH
5898: LD_INT 10
5900: DIV
5901: ARRAY
5902: PPUSH
5903: LD_INT 2
5905: PUSH
5906: LD_INT 3
5908: PUSH
5909: LD_INT 4
5911: PUSH
5912: LD_INT 5
5914: PUSH
5915: LD_INT 6
5917: PUSH
5918: LD_INT 7
5920: PUSH
5921: LD_INT 8
5923: PUSH
5924: LD_INT 9
5926: PUSH
5927: LD_INT 10
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: PUSH
5941: LD_VAR 0 1
5945: PUSH
5946: LD_INT 10
5948: DIV
5949: ARRAY
5950: PPUSH
5951: CALL 8258 0 2
5955: ST_TO_ADDR
5956: GO 6509
5958: LD_INT 19
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 6014
5964: LD_INT 29
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 6014
5970: LD_INT 39
5972: DOUBLE
5973: EQUAL
5974: IFTRUE 6014
5976: LD_INT 49
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 6014
5982: LD_INT 59
5984: DOUBLE
5985: EQUAL
5986: IFTRUE 6014
5988: LD_INT 69
5990: DOUBLE
5991: EQUAL
5992: IFTRUE 6014
5994: LD_INT 79
5996: DOUBLE
5997: EQUAL
5998: IFTRUE 6014
6000: LD_INT 89
6002: DOUBLE
6003: EQUAL
6004: IFTRUE 6014
6006: LD_INT 99
6008: DOUBLE
6009: EQUAL
6010: IFTRUE 6014
6012: GO 6225
6014: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
6015: LD_ADDR_VAR 0 2
6019: PUSH
6020: LD_INT 4
6022: PUSH
6023: LD_INT 7
6025: PUSH
6026: LD_INT 10
6028: PUSH
6029: LD_INT 13
6031: PUSH
6032: LD_INT 14
6034: PUSH
6035: LD_INT 17
6037: PUSH
6038: LD_INT 19
6040: PUSH
6041: LD_INT 21
6043: PUSH
6044: LD_INT 23
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: PUSH
6058: LD_VAR 0 1
6062: PUSH
6063: LD_INT 10
6065: DIV
6066: ARRAY
6067: PPUSH
6068: LD_INT 2
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 5
6079: PUSH
6080: LD_INT 6
6082: PUSH
6083: LD_INT 7
6085: PUSH
6086: LD_INT 8
6088: PUSH
6089: LD_INT 9
6091: PUSH
6092: LD_INT 10
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: PUSH
6106: LD_VAR 0 1
6110: PUSH
6111: LD_INT 10
6113: DIV
6114: ARRAY
6115: PPUSH
6116: CALL 8258 0 2
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: LD_INT 7
6126: PUSH
6127: LD_INT 10
6129: PUSH
6130: LD_INT 13
6132: PUSH
6133: LD_INT 14
6135: PUSH
6136: LD_INT 17
6138: PUSH
6139: LD_INT 19
6141: PUSH
6142: LD_INT 22
6144: PUSH
6145: LD_INT 25
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: PUSH
6159: LD_VAR 0 1
6163: PUSH
6164: LD_INT 10
6166: DIV
6167: ARRAY
6168: PPUSH
6169: LD_INT 2
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: LD_INT 4
6177: PUSH
6178: LD_INT 5
6180: PUSH
6181: LD_INT 6
6183: PUSH
6184: LD_INT 7
6186: PUSH
6187: LD_INT 8
6189: PUSH
6190: LD_INT 9
6192: PUSH
6193: LD_INT 10
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: PUSH
6207: LD_VAR 0 1
6211: PUSH
6212: LD_INT 10
6214: DIV
6215: ARRAY
6216: PPUSH
6217: CALL 7317 0 2
6221: ADD
6222: ST_TO_ADDR
6223: GO 6509
6225: LD_INT 20
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6281
6231: LD_INT 30
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6281
6237: LD_INT 40
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6281
6243: LD_INT 50
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6281
6249: LD_INT 60
6251: DOUBLE
6252: EQUAL
6253: IFTRUE 6281
6255: LD_INT 70
6257: DOUBLE
6258: EQUAL
6259: IFTRUE 6281
6261: LD_INT 80
6263: DOUBLE
6264: EQUAL
6265: IFTRUE 6281
6267: LD_INT 90
6269: DOUBLE
6270: EQUAL
6271: IFTRUE 6281
6273: LD_INT 100
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6508
6281: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6282: LD_ADDR_VAR 0 2
6286: PUSH
6287: LD_INT 4
6289: PUSH
6290: LD_INT 7
6292: PUSH
6293: LD_INT 10
6295: PUSH
6296: LD_INT 13
6298: PUSH
6299: LD_INT 14
6301: PUSH
6302: LD_INT 17
6304: PUSH
6305: LD_INT 19
6307: PUSH
6308: LD_INT 21
6310: PUSH
6311: LD_INT 23
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: PUSH
6325: LD_VAR 0 1
6329: PUSH
6330: LD_INT 10
6332: DIVREAL
6333: PUSH
6334: LD_INT 1
6336: MINUS
6337: ARRAY
6338: PPUSH
6339: LD_INT 2
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: LD_INT 4
6347: PUSH
6348: LD_INT 5
6350: PUSH
6351: LD_INT 6
6353: PUSH
6354: LD_INT 7
6356: PUSH
6357: LD_INT 8
6359: PUSH
6360: LD_INT 9
6362: PUSH
6363: LD_INT 10
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: PUSH
6377: LD_VAR 0 1
6381: PUSH
6382: LD_INT 10
6384: DIVREAL
6385: PUSH
6386: LD_INT 1
6388: MINUS
6389: ARRAY
6390: PPUSH
6391: CALL 8157 0 2
6395: PUSH
6396: LD_INT 4
6398: PUSH
6399: LD_INT 7
6401: PUSH
6402: LD_INT 10
6404: PUSH
6405: LD_INT 13
6407: PUSH
6408: LD_INT 14
6410: PUSH
6411: LD_INT 17
6413: PUSH
6414: LD_INT 19
6416: PUSH
6417: LD_INT 22
6419: PUSH
6420: LD_INT 25
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: PUSH
6434: LD_VAR 0 1
6438: PUSH
6439: LD_INT 10
6441: DIVREAL
6442: PUSH
6443: LD_INT 1
6445: MINUS
6446: ARRAY
6447: PPUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: LD_INT 5
6459: PUSH
6460: LD_INT 6
6462: PUSH
6463: LD_INT 7
6465: PUSH
6466: LD_INT 8
6468: PUSH
6469: LD_INT 9
6471: PUSH
6472: LD_INT 10
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: PUSH
6486: LD_VAR 0 1
6490: PUSH
6491: LD_INT 10
6493: DIVREAL
6494: PUSH
6495: LD_INT 1
6497: MINUS
6498: ARRAY
6499: PPUSH
6500: CALL 7737 0 2
6504: ADD
6505: ST_TO_ADDR
6506: GO 6509
6508: POP
// for i in result do
6509: LD_ADDR_VAR 0 3
6513: PUSH
6514: LD_VAR 0 2
6518: PUSH
6519: FOR_IN
6520: IFFALSE 6693
// begin a := rand ( 1 , 2 ) ;
6522: LD_ADDR_VAR 0 8
6526: PUSH
6527: LD_INT 1
6529: PPUSH
6530: LD_INT 2
6532: PPUSH
6533: CALL_OW 12
6537: ST_TO_ADDR
// if a = 1 then
6538: LD_VAR 0 8
6542: PUSH
6543: LD_INT 1
6545: EQUAL
6546: IFFALSE 6562
// SetDir ( i , 3 ) else
6548: LD_VAR 0 3
6552: PPUSH
6553: LD_INT 3
6555: PPUSH
6556: CALL_OW 233
6560: GO 6574
// SetDir ( i , 5 ) ;
6562: LD_VAR 0 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6574: LD_VAR 0 3
6578: PPUSH
6579: LD_VAR 0 7
6583: PUSH
6584: LD_VAR 0 8
6588: ARRAY
6589: PPUSH
6590: LD_INT 0
6592: PPUSH
6593: CALL_OW 49
// if GetControl ( i ) = control_manual then
6597: LD_VAR 0 3
6601: PPUSH
6602: CALL_OW 263
6606: PUSH
6607: LD_INT 1
6609: EQUAL
6610: IFFALSE 6656
// begin uc_nation := GetNation ( i ) ;
6612: LD_ADDR_OWVAR 21
6616: PUSH
6617: LD_VAR 0 3
6621: PPUSH
6622: CALL_OW 248
6626: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6627: LD_INT 0
6629: PPUSH
6630: LD_INT 3
6632: PPUSH
6633: LD_VAR 0 5
6637: PPUSH
6638: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6642: CALL_OW 44
6646: PPUSH
6647: LD_VAR 0 3
6651: PPUSH
6652: CALL_OW 52
// end ; l := l + 1 ;
6656: LD_ADDR_VAR 0 9
6660: PUSH
6661: LD_VAR 0 9
6665: PUSH
6666: LD_INT 1
6668: PLUS
6669: ST_TO_ADDR
// if l mod 10 = 0 then
6670: LD_VAR 0 9
6674: PUSH
6675: LD_INT 10
6677: MOD
6678: PUSH
6679: LD_INT 0
6681: EQUAL
6682: IFFALSE 6691
// Wait ( 0 0$02 ) ;
6684: LD_INT 70
6686: PPUSH
6687: CALL_OW 67
// end ;
6691: GO 6519
6693: POP
6694: POP
// end ;
6695: LD_VAR 0 2
6699: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6700: LD_INT 0
6702: PPUSH
6703: PPUSH
6704: PPUSH
// uc_nation := nation_nature ;
6705: LD_ADDR_OWVAR 21
6709: PUSH
6710: LD_INT 0
6712: ST_TO_ADDR
// for i = 1 to n do
6713: LD_ADDR_VAR 0 4
6717: PUSH
6718: DOUBLE
6719: LD_INT 1
6721: DEC
6722: ST_TO_ADDR
6723: LD_VAR 0 1
6727: PUSH
6728: FOR_TO
6729: IFFALSE 6764
// begin PrepareHuman ( false , class_apeman , skill ) ;
6731: LD_INT 0
6733: PPUSH
6734: LD_INT 12
6736: PPUSH
6737: LD_VAR 0 2
6741: PPUSH
6742: CALL_OW 380
// result := result ^ CreateHuman ;
6746: LD_ADDR_VAR 0 3
6750: PUSH
6751: LD_VAR 0 3
6755: PUSH
6756: CALL_OW 44
6760: ADD
6761: ST_TO_ADDR
// end ;
6762: GO 6728
6764: POP
6765: POP
// end ;
6766: LD_VAR 0 3
6770: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// uc_nation := nation_nature ;
6776: LD_ADDR_OWVAR 21
6780: PUSH
6781: LD_INT 0
6783: ST_TO_ADDR
// for i = 1 to n do
6784: LD_ADDR_VAR 0 4
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_VAR 0 1
6798: PUSH
6799: FOR_TO
6800: IFFALSE 6835
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6802: LD_INT 0
6804: PPUSH
6805: LD_INT 15
6807: PPUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 380
// result := result ^ CreateHuman ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_VAR 0 3
6826: PUSH
6827: CALL_OW 44
6831: ADD
6832: ST_TO_ADDR
// end ;
6833: GO 6799
6835: POP
6836: POP
// end ;
6837: LD_VAR 0 3
6841: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6842: LD_INT 0
6844: PPUSH
6845: PPUSH
6846: PPUSH
// for i = 1 to n do
6847: LD_ADDR_VAR 0 4
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_VAR 0 1
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6914
// begin uc_nation := rand ( 1 , 3 ) ;
6865: LD_ADDR_OWVAR 21
6869: PUSH
6870: LD_INT 1
6872: PPUSH
6873: LD_INT 3
6875: PPUSH
6876: CALL_OW 12
6880: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6881: LD_INT 0
6883: PPUSH
6884: LD_INT 1
6886: PPUSH
6887: LD_VAR 0 2
6891: PPUSH
6892: CALL_OW 380
// result := result ^ CreateHuman ;
6896: LD_ADDR_VAR 0 3
6900: PUSH
6901: LD_VAR 0 3
6905: PUSH
6906: CALL_OW 44
6910: ADD
6911: ST_TO_ADDR
// end ;
6912: GO 6862
6914: POP
6915: POP
// end ;
6916: LD_VAR 0 3
6920: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6921: LD_INT 0
6923: PPUSH
6924: PPUSH
6925: PPUSH
6926: PPUSH
6927: PPUSH
6928: PPUSH
6929: PPUSH
// for i = 1 to n do
6930: LD_ADDR_VAR 0 4
6934: PUSH
6935: DOUBLE
6936: LD_INT 1
6938: DEC
6939: ST_TO_ADDR
6940: LD_VAR 0 1
6944: PUSH
6945: FOR_TO
6946: IFFALSE 7310
// begin uc_nation := rand ( 1 , 3 ) ;
6948: LD_ADDR_OWVAR 21
6952: PUSH
6953: LD_INT 1
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: CALL_OW 12
6963: ST_TO_ADDR
// case uc_nation of 1 :
6964: LD_OWVAR 21
6968: PUSH
6969: LD_INT 1
6971: DOUBLE
6972: EQUAL
6973: IFTRUE 6977
6975: GO 7040
6977: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6978: LD_ADDR_VAR 0 6
6982: PUSH
6983: LD_INT 1
6985: PUSH
6986: LD_INT 2
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6993: LD_ADDR_VAR 0 7
6997: PUSH
6998: LD_INT 2
7000: PUSH
7001: LD_INT 3
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7008: LD_ADDR_VAR 0 8
7012: PUSH
7013: LD_INT 1
7015: PUSH
7016: LD_INT 3
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7023: LD_ADDR_VAR 0 9
7027: PUSH
7028: LD_INT 1
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: ST_TO_ADDR
// end ; 2 :
7038: GO 7175
7040: LD_INT 2
7042: DOUBLE
7043: EQUAL
7044: IFTRUE 7048
7046: GO 7111
7048: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7049: LD_ADDR_VAR 0 6
7053: PUSH
7054: LD_INT 12
7056: PUSH
7057: LD_INT 11
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7064: LD_ADDR_VAR 0 7
7068: PUSH
7069: LD_INT 23
7071: PUSH
7072: LD_INT 24
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7079: LD_ADDR_VAR 0 8
7083: PUSH
7084: LD_INT 1
7086: PUSH
7087: LD_INT 5
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7094: LD_ADDR_VAR 0 9
7098: PUSH
7099: LD_INT 1
7101: PUSH
7102: LD_INT 2
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: ST_TO_ADDR
// end ; 3 :
7109: GO 7175
7111: LD_INT 3
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7174
7119: POP
// begin chassis := [ ru_medium_wheeled ] ;
7120: LD_ADDR_VAR 0 6
7124: PUSH
7125: LD_INT 21
7127: PUSH
7128: EMPTY
7129: LIST
7130: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7131: LD_ADDR_VAR 0 7
7135: PUSH
7136: LD_INT 42
7138: PUSH
7139: LD_INT 44
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7146: LD_ADDR_VAR 0 8
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: LD_INT 3
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7161: LD_ADDR_VAR 0 9
7165: PUSH
7166: LD_INT 1
7168: PUSH
7169: EMPTY
7170: LIST
7171: ST_TO_ADDR
// end ; end ;
7172: GO 7175
7174: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7175: LD_ADDR_OWVAR 37
7179: PUSH
7180: LD_VAR 0 6
7184: PUSH
7185: LD_INT 1
7187: PPUSH
7188: LD_VAR 0 6
7192: PPUSH
7193: CALL_OW 12
7197: ARRAY
7198: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7199: LD_ADDR_OWVAR 39
7203: PUSH
7204: LD_VAR 0 9
7208: PUSH
7209: LD_INT 1
7211: PPUSH
7212: LD_VAR 0 9
7216: PPUSH
7217: CALL_OW 12
7221: ARRAY
7222: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7223: LD_ADDR_OWVAR 38
7227: PUSH
7228: LD_VAR 0 8
7232: PUSH
7233: LD_INT 1
7235: PPUSH
7236: LD_VAR 0 8
7240: PPUSH
7241: CALL_OW 12
7245: ARRAY
7246: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7247: LD_ADDR_OWVAR 40
7251: PUSH
7252: LD_VAR 0 7
7256: PUSH
7257: LD_INT 1
7259: PPUSH
7260: LD_VAR 0 7
7264: PPUSH
7265: CALL_OW 12
7269: ARRAY
7270: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7271: LD_ADDR_OWVAR 41
7275: PUSH
7276: LD_INT 100
7278: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_VAR 0 3
7288: PPUSH
7289: LD_VAR 0 3
7293: PUSH
7294: LD_INT 1
7296: PLUS
7297: PPUSH
7298: CALL_OW 45
7302: PPUSH
7303: CALL_OW 2
7307: ST_TO_ADDR
// end ;
7308: GO 6945
7310: POP
7311: POP
// end ;
7312: LD_VAR 0 3
7316: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7317: LD_INT 0
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
7325: PPUSH
// for i = 1 to n do
7326: LD_ADDR_VAR 0 4
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_VAR 0 1
7340: PUSH
7341: FOR_TO
7342: IFFALSE 7730
// begin uc_nation := rand ( 1 , 3 ) ;
7344: LD_ADDR_OWVAR 21
7348: PUSH
7349: LD_INT 1
7351: PPUSH
7352: LD_INT 3
7354: PPUSH
7355: CALL_OW 12
7359: ST_TO_ADDR
// case uc_nation of 1 :
7360: LD_OWVAR 21
7364: PUSH
7365: LD_INT 1
7367: DOUBLE
7368: EQUAL
7369: IFTRUE 7373
7371: GO 7444
7373: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7374: LD_ADDR_VAR 0 6
7378: PUSH
7379: LD_INT 2
7381: PUSH
7382: LD_INT 3
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7389: LD_ADDR_VAR 0 7
7393: PUSH
7394: LD_INT 4
7396: PUSH
7397: LD_INT 5
7399: PUSH
7400: LD_INT 9
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7408: LD_ADDR_VAR 0 8
7412: PUSH
7413: LD_INT 1
7415: PUSH
7416: LD_INT 3
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7423: LD_ADDR_VAR 0 9
7427: PUSH
7428: LD_INT 1
7430: PUSH
7431: LD_INT 2
7433: PUSH
7434: LD_INT 3
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: ST_TO_ADDR
// end ; 2 :
7442: GO 7595
7444: LD_INT 2
7446: DOUBLE
7447: EQUAL
7448: IFTRUE 7452
7450: GO 7523
7452: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7453: LD_ADDR_VAR 0 6
7457: PUSH
7458: LD_INT 13
7460: PUSH
7461: LD_INT 14
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7468: LD_ADDR_VAR 0 7
7472: PUSH
7473: LD_INT 27
7475: PUSH
7476: LD_INT 26
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7487: LD_ADDR_VAR 0 8
7491: PUSH
7492: LD_INT 1
7494: PUSH
7495: LD_INT 5
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7502: LD_ADDR_VAR 0 9
7506: PUSH
7507: LD_INT 1
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: ST_TO_ADDR
// end ; 3 :
7521: GO 7595
7523: LD_INT 3
7525: DOUBLE
7526: EQUAL
7527: IFTRUE 7531
7529: GO 7594
7531: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7532: LD_ADDR_VAR 0 6
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 21
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7547: LD_ADDR_VAR 0 7
7551: PUSH
7552: LD_INT 44
7554: PUSH
7555: LD_INT 43
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7562: LD_ADDR_VAR 0 8
7566: PUSH
7567: LD_INT 1
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7577: LD_ADDR_VAR 0 9
7581: PUSH
7582: LD_INT 1
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: ST_TO_ADDR
// end ; end ;
7592: GO 7595
7594: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7595: LD_ADDR_OWVAR 37
7599: PUSH
7600: LD_VAR 0 6
7604: PUSH
7605: LD_INT 1
7607: PPUSH
7608: LD_VAR 0 6
7612: PPUSH
7613: CALL_OW 12
7617: ARRAY
7618: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7619: LD_ADDR_OWVAR 39
7623: PUSH
7624: LD_VAR 0 9
7628: PUSH
7629: LD_INT 1
7631: PPUSH
7632: LD_VAR 0 9
7636: PPUSH
7637: CALL_OW 12
7641: ARRAY
7642: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7643: LD_ADDR_OWVAR 38
7647: PUSH
7648: LD_VAR 0 8
7652: PUSH
7653: LD_INT 1
7655: PPUSH
7656: LD_VAR 0 8
7660: PPUSH
7661: CALL_OW 12
7665: ARRAY
7666: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7667: LD_ADDR_OWVAR 40
7671: PUSH
7672: LD_VAR 0 7
7676: PUSH
7677: LD_INT 1
7679: PPUSH
7680: LD_VAR 0 7
7684: PPUSH
7685: CALL_OW 12
7689: ARRAY
7690: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7691: LD_ADDR_OWVAR 41
7695: PUSH
7696: LD_INT 100
7698: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7699: LD_ADDR_VAR 0 3
7703: PUSH
7704: LD_VAR 0 3
7708: PPUSH
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 1
7716: PLUS
7717: PPUSH
7718: CALL_OW 45
7722: PPUSH
7723: CALL_OW 2
7727: ST_TO_ADDR
// end ;
7728: GO 7341
7730: POP
7731: POP
// end ;
7732: LD_VAR 0 3
7736: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7737: LD_INT 0
7739: PPUSH
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
7744: PPUSH
7745: PPUSH
// for i = 1 to n do
7746: LD_ADDR_VAR 0 4
7750: PUSH
7751: DOUBLE
7752: LD_INT 1
7754: DEC
7755: ST_TO_ADDR
7756: LD_VAR 0 1
7760: PUSH
7761: FOR_TO
7762: IFFALSE 8150
// begin uc_nation := rand ( 1 , 3 ) ;
7764: LD_ADDR_OWVAR 21
7768: PUSH
7769: LD_INT 1
7771: PPUSH
7772: LD_INT 3
7774: PPUSH
7775: CALL_OW 12
7779: ST_TO_ADDR
// case uc_nation of 1 :
7780: LD_OWVAR 21
7784: PUSH
7785: LD_INT 1
7787: DOUBLE
7788: EQUAL
7789: IFTRUE 7793
7791: GO 7860
7793: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7794: LD_ADDR_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PUSH
7802: LD_INT 5
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7809: LD_ADDR_VAR 0 7
7813: PUSH
7814: LD_INT 6
7816: PUSH
7817: LD_INT 7
7819: PUSH
7820: LD_INT 9
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7828: LD_ADDR_VAR 0 8
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 3
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7843: LD_ADDR_VAR 0 9
7847: PUSH
7848: LD_INT 1
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: ST_TO_ADDR
// end ; 2 :
7858: GO 8015
7860: LD_INT 2
7862: DOUBLE
7863: EQUAL
7864: IFTRUE 7868
7866: GO 7943
7868: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7869: LD_ADDR_VAR 0 6
7873: PUSH
7874: LD_INT 13
7876: PUSH
7877: LD_INT 14
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7884: LD_ADDR_VAR 0 7
7888: PUSH
7889: LD_INT 27
7891: PUSH
7892: LD_INT 26
7894: PUSH
7895: LD_INT 28
7897: PUSH
7898: LD_INT 29
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7907: LD_ADDR_VAR 0 8
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 5
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7922: LD_ADDR_VAR 0 9
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: LD_INT 2
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: LIST
7940: ST_TO_ADDR
// end ; 3 :
7941: GO 8015
7943: LD_INT 3
7945: DOUBLE
7946: EQUAL
7947: IFTRUE 7951
7949: GO 8014
7951: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7952: LD_ADDR_VAR 0 6
7956: PUSH
7957: LD_INT 23
7959: PUSH
7960: LD_INT 24
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7967: LD_ADDR_VAR 0 7
7971: PUSH
7972: LD_INT 46
7974: PUSH
7975: LD_INT 45
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7982: LD_ADDR_VAR 0 8
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: LD_INT 3
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7997: LD_ADDR_VAR 0 9
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: ST_TO_ADDR
// end ; end ;
8012: GO 8015
8014: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8015: LD_ADDR_OWVAR 37
8019: PUSH
8020: LD_VAR 0 6
8024: PUSH
8025: LD_INT 1
8027: PPUSH
8028: LD_VAR 0 6
8032: PPUSH
8033: CALL_OW 12
8037: ARRAY
8038: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8039: LD_ADDR_OWVAR 39
8043: PUSH
8044: LD_VAR 0 9
8048: PUSH
8049: LD_INT 1
8051: PPUSH
8052: LD_VAR 0 9
8056: PPUSH
8057: CALL_OW 12
8061: ARRAY
8062: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8063: LD_ADDR_OWVAR 38
8067: PUSH
8068: LD_VAR 0 8
8072: PUSH
8073: LD_INT 1
8075: PPUSH
8076: LD_VAR 0 8
8080: PPUSH
8081: CALL_OW 12
8085: ARRAY
8086: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8087: LD_ADDR_OWVAR 40
8091: PUSH
8092: LD_VAR 0 7
8096: PUSH
8097: LD_INT 1
8099: PPUSH
8100: LD_VAR 0 7
8104: PPUSH
8105: CALL_OW 12
8109: ARRAY
8110: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8111: LD_ADDR_OWVAR 41
8115: PUSH
8116: LD_INT 100
8118: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8119: LD_ADDR_VAR 0 3
8123: PUSH
8124: LD_VAR 0 3
8128: PPUSH
8129: LD_VAR 0 3
8133: PUSH
8134: LD_INT 1
8136: PLUS
8137: PPUSH
8138: CALL_OW 45
8142: PPUSH
8143: CALL_OW 2
8147: ST_TO_ADDR
// end ;
8148: GO 7761
8150: POP
8151: POP
// end ;
8152: LD_VAR 0 3
8156: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8157: LD_INT 0
8159: PPUSH
8160: PPUSH
// for i = 1 to n do
8161: LD_ADDR_VAR 0 4
8165: PUSH
8166: DOUBLE
8167: LD_INT 1
8169: DEC
8170: ST_TO_ADDR
8171: LD_VAR 0 1
8175: PUSH
8176: FOR_TO
8177: IFFALSE 8251
// begin uc_nation := rand ( 1 , 3 ) ;
8179: LD_ADDR_OWVAR 21
8183: PUSH
8184: LD_INT 1
8186: PPUSH
8187: LD_INT 3
8189: PPUSH
8190: CALL_OW 12
8194: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8195: LD_INT 0
8197: PPUSH
8198: LD_INT 8
8200: PUSH
8201: LD_INT 9
8203: PUSH
8204: LD_INT 1
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 1
8214: PPUSH
8215: LD_INT 3
8217: PPUSH
8218: CALL_OW 12
8222: ARRAY
8223: PPUSH
8224: LD_VAR 0 2
8228: PPUSH
8229: CALL_OW 380
// result := result ^ CreateHuman ;
8233: LD_ADDR_VAR 0 3
8237: PUSH
8238: LD_VAR 0 3
8242: PUSH
8243: CALL_OW 44
8247: ADD
8248: ST_TO_ADDR
// end ;
8249: GO 8176
8251: POP
8252: POP
// end ;
8253: LD_VAR 0 3
8257: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8258: LD_INT 0
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
// for i = 1 to n do
8267: LD_ADDR_VAR 0 4
8271: PUSH
8272: DOUBLE
8273: LD_INT 1
8275: DEC
8276: ST_TO_ADDR
8277: LD_VAR 0 1
8281: PUSH
8282: FOR_TO
8283: IFFALSE 8679
// begin uc_nation := rand ( 1 , 3 ) ;
8285: LD_ADDR_OWVAR 21
8289: PUSH
8290: LD_INT 1
8292: PPUSH
8293: LD_INT 3
8295: PPUSH
8296: CALL_OW 12
8300: ST_TO_ADDR
// case uc_nation of 1 :
8301: LD_OWVAR 21
8305: PUSH
8306: LD_INT 1
8308: DOUBLE
8309: EQUAL
8310: IFTRUE 8314
8312: GO 8387
8314: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 4
8322: PUSH
8323: LD_INT 5
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_INT 6
8337: PUSH
8338: LD_INT 7
8340: PUSH
8341: LD_INT 10
8343: PUSH
8344: LD_EXP 17
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8355: LD_ADDR_VAR 0 8
8359: PUSH
8360: LD_INT 1
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8370: LD_ADDR_VAR 0 9
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: ST_TO_ADDR
// end ; 2 :
8385: GO 8544
8387: LD_INT 2
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8395
8393: GO 8468
8395: POP
// begin chassis := [ ar_half_tracked ] ;
8396: LD_ADDR_VAR 0 6
8400: PUSH
8401: LD_INT 14
8403: PUSH
8404: EMPTY
8405: LIST
8406: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8407: LD_ADDR_VAR 0 7
8411: PUSH
8412: LD_EXP 18
8416: PUSH
8417: LD_INT 26
8419: PUSH
8420: LD_INT 28
8422: PUSH
8423: LD_INT 29
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8432: LD_ADDR_VAR 0 8
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: LD_INT 5
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8447: LD_ADDR_VAR 0 9
8451: PUSH
8452: LD_INT 1
8454: PUSH
8455: LD_INT 2
8457: PUSH
8458: LD_INT 3
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: ST_TO_ADDR
// end ; 3 :
8466: GO 8544
8468: LD_INT 3
8470: DOUBLE
8471: EQUAL
8472: IFTRUE 8476
8474: GO 8543
8476: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8477: LD_ADDR_VAR 0 6
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 24
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8492: LD_ADDR_VAR 0 7
8496: PUSH
8497: LD_INT 46
8499: PUSH
8500: LD_INT 45
8502: PUSH
8503: LD_INT 49
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8511: LD_ADDR_VAR 0 8
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: LD_INT 3
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8526: LD_ADDR_VAR 0 9
8530: PUSH
8531: LD_INT 1
8533: PUSH
8534: LD_INT 3
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: ST_TO_ADDR
// end ; end ;
8541: GO 8544
8543: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8544: LD_ADDR_OWVAR 37
8548: PUSH
8549: LD_VAR 0 6
8553: PUSH
8554: LD_INT 1
8556: PPUSH
8557: LD_VAR 0 6
8561: PPUSH
8562: CALL_OW 12
8566: ARRAY
8567: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8568: LD_ADDR_OWVAR 39
8572: PUSH
8573: LD_VAR 0 9
8577: PUSH
8578: LD_INT 1
8580: PPUSH
8581: LD_VAR 0 9
8585: PPUSH
8586: CALL_OW 12
8590: ARRAY
8591: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8592: LD_ADDR_OWVAR 38
8596: PUSH
8597: LD_VAR 0 8
8601: PUSH
8602: LD_INT 1
8604: PPUSH
8605: LD_VAR 0 8
8609: PPUSH
8610: CALL_OW 12
8614: ARRAY
8615: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8616: LD_ADDR_OWVAR 40
8620: PUSH
8621: LD_VAR 0 7
8625: PUSH
8626: LD_INT 1
8628: PPUSH
8629: LD_VAR 0 7
8633: PPUSH
8634: CALL_OW 12
8638: ARRAY
8639: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8640: LD_ADDR_OWVAR 41
8644: PUSH
8645: LD_INT 100
8647: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_VAR 0 3
8657: PPUSH
8658: LD_VAR 0 3
8662: PUSH
8663: LD_INT 1
8665: PLUS
8666: PPUSH
8667: CALL_OW 45
8671: PPUSH
8672: CALL_OW 2
8676: ST_TO_ADDR
// end ;
8677: GO 8282
8679: POP
8680: POP
// end ; end_of_file
8681: LD_VAR 0 3
8685: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8686: LD_INT 22
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PPUSH
8696: CALL_OW 69
8700: IFFALSE 9206
8702: GO 8704
8704: DISABLE
8705: LD_INT 0
8707: PPUSH
8708: PPUSH
8709: PPUSH
// begin enable ;
8710: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8711: LD_ADDR_VAR 0 3
8715: PUSH
8716: LD_INT 22
8718: PUSH
8719: LD_INT 7
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PPUSH
8726: CALL_OW 69
8730: ST_TO_ADDR
// for i in tmp do
8731: LD_ADDR_VAR 0 1
8735: PUSH
8736: LD_VAR 0 3
8740: PUSH
8741: FOR_IN
8742: IFFALSE 9204
// begin case GetType ( i ) of unit_human :
8744: LD_VAR 0 1
8748: PPUSH
8749: CALL_OW 247
8753: PUSH
8754: LD_INT 1
8756: DOUBLE
8757: EQUAL
8758: IFTRUE 8762
8760: GO 8961
8762: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL_OW 256
8772: PUSH
8773: LD_INT 250
8775: LESS
8776: PUSH
8777: LD_INT 5
8779: PPUSH
8780: LD_INT 7
8782: PPUSH
8783: CALL_OW 321
8787: PUSH
8788: LD_INT 2
8790: NONEQUAL
8791: AND
8792: IFFALSE 8796
// continue ;
8794: GO 8741
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 257
8805: PUSH
8806: LD_INT 12
8808: PUSH
8809: LD_INT 15
8811: PUSH
8812: LD_INT 16
8814: PUSH
8815: LD_INT 17
8817: PUSH
8818: LD_INT 1
8820: PUSH
8821: LD_INT 5
8823: PUSH
8824: LD_INT 6
8826: PUSH
8827: LD_INT 7
8829: PUSH
8830: LD_INT 8
8832: PUSH
8833: LD_INT 9
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: IN
8848: IFFALSE 8886
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8850: LD_VAR 0 1
8854: PPUSH
8855: LD_INT 22
8857: PUSH
8858: LD_OWVAR 2
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PPUSH
8867: CALL_OW 69
8871: PPUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 74
8881: PPUSH
8882: CALL_OW 115
// if GetClass ( i ) = 3 then
8886: LD_VAR 0 1
8890: PPUSH
8891: CALL_OW 257
8895: PUSH
8896: LD_INT 3
8898: EQUAL
8899: IFFALSE 8959
// if IsInUnit ( i ) then
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 310
8910: IFFALSE 8950
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_INT 22
8919: PUSH
8920: LD_OWVAR 2
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PPUSH
8929: CALL_OW 69
8933: PPUSH
8934: LD_VAR 0 1
8938: PPUSH
8939: CALL_OW 74
8943: PPUSH
8944: CALL_OW 115
8948: GO 8959
// ComEspace ( i ) ;
8950: LD_VAR 0 1
8954: PPUSH
8955: CALL 1933 0 1
// end ; unit_vehicle :
8959: GO 9202
8961: LD_INT 2
8963: DOUBLE
8964: EQUAL
8965: IFTRUE 8969
8967: GO 9201
8969: POP
// begin if GetLives ( i ) > 250 then
8970: LD_VAR 0 1
8974: PPUSH
8975: CALL_OW 256
8979: PUSH
8980: LD_INT 250
8982: GREATER
8983: IFFALSE 9199
// begin if GetWeapon ( i ) = us_artillery then
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 264
8994: PUSH
8995: LD_EXP 17
8999: EQUAL
9000: IFFALSE 9068
// begin if IsInArea ( i , zoneOut ) then
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 4
9009: PPUSH
9010: CALL_OW 308
9014: IFFALSE 9030
// ComMoveToArea ( i , zoneBorder ) else
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_INT 9
9023: PPUSH
9024: CALL_OW 113
9028: GO 9066
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: LD_INT 22
9037: PUSH
9038: LD_OWVAR 2
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 69
9051: PPUSH
9052: LD_VAR 0 1
9056: PPUSH
9057: CALL_OW 74
9061: PPUSH
9062: CALL_OW 115
// end else
9066: GO 9199
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9068: LD_VAR 0 1
9072: PPUSH
9073: CALL_OW 264
9077: PUSH
9078: LD_INT 11
9080: PUSH
9081: LD_INT 30
9083: PUSH
9084: LD_EXP 14
9088: PUSH
9089: LD_INT 49
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: IN
9098: IFFALSE 9128
// begin if IsInArea ( i , zoneOut ) then
9100: LD_VAR 0 1
9104: PPUSH
9105: LD_INT 4
9107: PPUSH
9108: CALL_OW 308
9112: IFFALSE 9126
// ComSpecMove ( i , specPos ) ;
9114: LD_VAR 0 1
9118: PPUSH
9119: LD_INT 8
9121: PPUSH
9122: CALL 1979 0 2
// end else
9126: GO 9199
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9128: LD_VAR 0 1
9132: PPUSH
9133: CALL_OW 264
9137: PUSH
9138: LD_EXP 18
9142: PUSH
9143: LD_INT 29
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: IN
9150: IFFALSE 9163
// ComSpecAttack ( i ) else
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL 2407 0 1
9161: GO 9199
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9163: LD_VAR 0 1
9167: PPUSH
9168: LD_INT 22
9170: PUSH
9171: LD_OWVAR 2
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PPUSH
9180: CALL_OW 69
9184: PPUSH
9185: LD_VAR 0 1
9189: PPUSH
9190: CALL_OW 74
9194: PPUSH
9195: CALL_OW 115
// end ; end ; end ;
9199: GO 9202
9201: POP
// end ;
9202: GO 8741
9204: POP
9205: POP
// end ; end_of_file
9206: PPOPN 3
9208: END
// export function InitDisplay ; begin
9209: LD_INT 0
9211: PPUSH
// while true do
9212: LD_INT 1
9214: IFFALSE 9301
// begin if waveNumber < 100 then
9216: LD_EXP 5
9220: PUSH
9221: LD_INT 100
9223: LESS
9224: IFFALSE 9275
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9226: LD_ADDR_OWVAR 47
9230: PUSH
9231: LD_STRING #Tick
9233: PUSH
9234: LD_OWVAR 1
9238: PUSH
9239: LD_STRING #Points
9241: PUSH
9242: LD_EXP 2
9246: PUSH
9247: LD_STRING #Attack
9249: PUSH
9250: LD_EXP 4
9254: PUSH
9255: LD_STRING #Wave
9257: PUSH
9258: LD_EXP 5
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: ST_TO_ADDR
9273: GO 9292
// Display_Strings := [ #Win , points ] ;
9275: LD_ADDR_OWVAR 47
9279: PUSH
9280: LD_STRING #Win
9282: PUSH
9283: LD_EXP 2
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9292: LD_INT 35
9294: PPUSH
9295: CALL_OW 67
// end ;
9299: GO 9212
// end ; end_of_file
9301: LD_VAR 0 1
9305: RET
// export function InitBonus ; var i , chance ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
// chance := rand ( 1 , 99 ) ;
9311: LD_ADDR_VAR 0 3
9315: PUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_INT 99
9321: PPUSH
9322: CALL_OW 12
9326: ST_TO_ADDR
// case chance of 1 .. 10 :
9327: LD_VAR 0 3
9331: PUSH
9332: LD_INT 1
9334: DOUBLE
9335: GREATEREQUAL
9336: IFFALSE 9344
9338: LD_INT 10
9340: DOUBLE
9341: LESSEQUAL
9342: IFTRUE 9346
9344: GO 9357
9346: POP
// i := 5 ; 11 .. 25 :
9347: LD_ADDR_VAR 0 2
9351: PUSH
9352: LD_INT 5
9354: ST_TO_ADDR
9355: GO 9458
9357: LD_INT 11
9359: DOUBLE
9360: GREATEREQUAL
9361: IFFALSE 9369
9363: LD_INT 25
9365: DOUBLE
9366: LESSEQUAL
9367: IFTRUE 9371
9369: GO 9382
9371: POP
// i := 3 ; 26 .. 40 :
9372: LD_ADDR_VAR 0 2
9376: PUSH
9377: LD_INT 3
9379: ST_TO_ADDR
9380: GO 9458
9382: LD_INT 26
9384: DOUBLE
9385: GREATEREQUAL
9386: IFFALSE 9394
9388: LD_INT 40
9390: DOUBLE
9391: LESSEQUAL
9392: IFTRUE 9396
9394: GO 9407
9396: POP
// i := 2 ; 41 .. 60 :
9397: LD_ADDR_VAR 0 2
9401: PUSH
9402: LD_INT 2
9404: ST_TO_ADDR
9405: GO 9458
9407: LD_INT 41
9409: DOUBLE
9410: GREATEREQUAL
9411: IFFALSE 9419
9413: LD_INT 60
9415: DOUBLE
9416: LESSEQUAL
9417: IFTRUE 9421
9419: GO 9432
9421: POP
// i := 4 ; 61 .. 99 :
9422: LD_ADDR_VAR 0 2
9426: PUSH
9427: LD_INT 4
9429: ST_TO_ADDR
9430: GO 9458
9432: LD_INT 61
9434: DOUBLE
9435: GREATEREQUAL
9436: IFFALSE 9444
9438: LD_INT 99
9440: DOUBLE
9441: LESSEQUAL
9442: IFTRUE 9446
9444: GO 9457
9446: POP
// i := 1 ; end ;
9447: LD_ADDR_VAR 0 2
9451: PUSH
9452: LD_INT 1
9454: ST_TO_ADDR
9455: GO 9458
9457: POP
// case i of 1 :
9458: LD_VAR 0 2
9462: PUSH
9463: LD_INT 1
9465: DOUBLE
9466: EQUAL
9467: IFTRUE 9471
9469: GO 9560
9471: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9472: LD_INT 22
9474: PUSH
9475: LD_OWVAR 2
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 2
9486: PUSH
9487: LD_INT 25
9489: PUSH
9490: LD_INT 12
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 25
9499: PUSH
9500: LD_INT 16
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 25
9509: PUSH
9510: LD_INT 15
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 25
9519: PUSH
9520: LD_INT 17
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PPUSH
9538: CALL_OW 69
9542: PUSH
9543: LD_INT 10
9545: GREATEREQUAL
9546: IFFALSE 9554
// BonusIV else
9548: CALL 10133 0 0
9552: GO 9558
// BonusI ;
9554: CALL 9638 0 0
// end ; 2 :
9558: GO 9633
9560: LD_INT 2
9562: DOUBLE
9563: EQUAL
9564: IFTRUE 9568
9566: GO 9575
9568: POP
// begin BonusII ;
9569: CALL 9811 0 0
// end ; 3 :
9573: GO 9633
9575: LD_INT 3
9577: DOUBLE
9578: EQUAL
9579: IFTRUE 9583
9581: GO 9590
9583: POP
// begin BonusIII ;
9584: CALL 9959 0 0
// end ; 4 :
9588: GO 9633
9590: LD_INT 4
9592: DOUBLE
9593: EQUAL
9594: IFTRUE 9598
9596: GO 9605
9598: POP
// begin BonusIV ;
9599: CALL 10133 0 0
// end ; 5 :
9603: GO 9633
9605: LD_INT 5
9607: DOUBLE
9608: EQUAL
9609: IFTRUE 9613
9611: GO 9632
9613: POP
// begin if graveyard then
9614: LD_EXP 8
9618: IFFALSE 9626
// BonusV else
9620: CALL 10551 0 0
9624: GO 9630
// BonusIII ;
9626: CALL 9959 0 0
// end ; end ;
9630: GO 9633
9632: POP
// end ;
9633: LD_VAR 0 1
9637: RET
// export function BonusI ; var i ; begin
9638: LD_INT 0
9640: PPUSH
9641: PPUSH
// case Query ( AddGift1 ) of 1 :
9642: LD_STRING AddGift1
9644: PPUSH
9645: CALL_OW 97
9649: PUSH
9650: LD_INT 1
9652: DOUBLE
9653: EQUAL
9654: IFTRUE 9658
9656: GO 9737
9658: POP
// begin for i = 1 to 3 do
9659: LD_ADDR_VAR 0 2
9663: PUSH
9664: DOUBLE
9665: LD_INT 1
9667: DEC
9668: ST_TO_ADDR
9669: LD_INT 3
9671: PUSH
9672: FOR_TO
9673: IFFALSE 9733
// begin uc_side := your_side ;
9675: LD_ADDR_OWVAR 20
9679: PUSH
9680: LD_OWVAR 2
9684: ST_TO_ADDR
// uc_nation := 0 ;
9685: LD_ADDR_OWVAR 21
9689: PUSH
9690: LD_INT 0
9692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9693: LD_INT 0
9695: PPUSH
9696: LD_INT 12
9698: PPUSH
9699: LD_INT 1
9701: PPUSH
9702: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9706: CALL_OW 44
9710: PPUSH
9711: LD_EXP 9
9715: PPUSH
9716: LD_EXP 10
9720: PPUSH
9721: LD_INT 15
9723: PPUSH
9724: LD_INT 1
9726: PPUSH
9727: CALL_OW 50
// end ;
9731: GO 9672
9733: POP
9734: POP
// end ; 2 :
9735: GO 9806
9737: LD_INT 2
9739: DOUBLE
9740: EQUAL
9741: IFTRUE 9745
9743: GO 9787
9745: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9746: LD_EXP 11
9750: PPUSH
9751: CALL_OW 274
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_EXP 11
9763: PPUSH
9764: CALL_OW 274
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: CALL_OW 275
9776: PUSH
9777: LD_INT 100
9779: PLUS
9780: PPUSH
9781: CALL_OW 277
// end ; 3 :
9785: GO 9806
9787: LD_INT 3
9789: DOUBLE
9790: EQUAL
9791: IFTRUE 9795
9793: GO 9805
9795: POP
// begin SetTeamExp ( 2 ) ;
9796: LD_INT 2
9798: PPUSH
9799: CALL 940 0 1
// end ; end ;
9803: GO 9806
9805: POP
// end ;
9806: LD_VAR 0 1
9810: RET
// export function BonusII ; var i ; begin
9811: LD_INT 0
9813: PPUSH
9814: PPUSH
// case Query ( AddGift2 ) of 1 :
9815: LD_STRING AddGift2
9817: PPUSH
9818: CALL_OW 97
9822: PUSH
9823: LD_INT 1
9825: DOUBLE
9826: EQUAL
9827: IFTRUE 9831
9829: GO 9873
9831: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9832: LD_EXP 11
9836: PPUSH
9837: CALL_OW 274
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: LD_EXP 11
9849: PPUSH
9850: CALL_OW 274
9854: PPUSH
9855: LD_INT 1
9857: PPUSH
9858: CALL_OW 275
9862: PUSH
9863: LD_INT 500
9865: PLUS
9866: PPUSH
9867: CALL_OW 277
// end ; 2 :
9871: GO 9954
9873: LD_INT 2
9875: DOUBLE
9876: EQUAL
9877: IFTRUE 9881
9879: GO 9891
9881: POP
// begin SetTeamExp ( 3 ) ;
9882: LD_INT 3
9884: PPUSH
9885: CALL 940 0 1
// end ; 3 :
9889: GO 9954
9891: LD_INT 3
9893: DOUBLE
9894: EQUAL
9895: IFTRUE 9899
9897: GO 9953
9899: POP
// begin uc_side = your_side ;
9900: LD_ADDR_OWVAR 20
9904: PUSH
9905: LD_OWVAR 2
9909: ST_TO_ADDR
// uc_nation = nation_russian ;
9910: LD_ADDR_OWVAR 21
9914: PUSH
9915: LD_INT 3
9917: ST_TO_ADDR
// vc_chassis = 25 ;
9918: LD_ADDR_OWVAR 37
9922: PUSH
9923: LD_INT 25
9925: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9926: CALL_OW 45
9930: PPUSH
9931: LD_EXP 9
9935: PPUSH
9936: LD_EXP 10
9940: PPUSH
9941: LD_INT 15
9943: PPUSH
9944: LD_INT 1
9946: PPUSH
9947: CALL_OW 50
// end ; end ;
9951: GO 9954
9953: POP
// end ;
9954: LD_VAR 0 1
9958: RET
// export function BonusIII ; var i ; begin
9959: LD_INT 0
9961: PPUSH
9962: PPUSH
// case Query ( AddGift3 ) of 1 :
9963: LD_STRING AddGift3
9965: PPUSH
9966: CALL_OW 97
9970: PUSH
9971: LD_INT 1
9973: DOUBLE
9974: EQUAL
9975: IFTRUE 9979
9977: GO 10021
9979: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9980: LD_EXP 11
9984: PPUSH
9985: CALL_OW 274
9989: PPUSH
9990: LD_INT 1
9992: PPUSH
9993: LD_EXP 11
9997: PPUSH
9998: CALL_OW 274
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 275
10010: PUSH
10011: LD_INT 1000
10013: PLUS
10014: PPUSH
10015: CALL_OW 277
// end ; 2 :
10019: GO 10128
10021: LD_INT 2
10023: DOUBLE
10024: EQUAL
10025: IFTRUE 10029
10027: GO 10041
10029: POP
// begin PrepareGuards ( waveNumber ) ;
10030: LD_EXP 5
10034: PPUSH
10035: CALL 1086 0 1
// end ; 3 :
10039: GO 10128
10041: LD_INT 3
10043: DOUBLE
10044: EQUAL
10045: IFTRUE 10049
10047: GO 10127
10049: POP
// begin uc_side = your_side ;
10050: LD_ADDR_OWVAR 20
10054: PUSH
10055: LD_OWVAR 2
10059: ST_TO_ADDR
// uc_nation = nation_american ;
10060: LD_ADDR_OWVAR 21
10064: PUSH
10065: LD_INT 1
10067: ST_TO_ADDR
// vc_chassis = us_morphling ;
10068: LD_ADDR_OWVAR 37
10072: PUSH
10073: LD_INT 5
10075: ST_TO_ADDR
// vc_engine := engine_siberite ;
10076: LD_ADDR_OWVAR 39
10080: PUSH
10081: LD_INT 3
10083: ST_TO_ADDR
// vc_control := control_computer ;
10084: LD_ADDR_OWVAR 38
10088: PUSH
10089: LD_INT 3
10091: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10092: LD_ADDR_OWVAR 40
10096: PUSH
10097: LD_INT 8
10099: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10100: CALL_OW 45
10104: PPUSH
10105: LD_EXP 9
10109: PPUSH
10110: LD_EXP 10
10114: PPUSH
10115: LD_INT 15
10117: PPUSH
10118: LD_INT 1
10120: PPUSH
10121: CALL_OW 50
// end ; end ;
10125: GO 10128
10127: POP
// end ;
10128: LD_VAR 0 1
10132: RET
// export function BonusIV ; var i ; begin
10133: LD_INT 0
10135: PPUSH
10136: PPUSH
// case Query ( AddGift4 ) of 1 :
10137: LD_STRING AddGift4
10139: PPUSH
10140: CALL_OW 97
10144: PUSH
10145: LD_INT 1
10147: DOUBLE
10148: EQUAL
10149: IFTRUE 10153
10151: GO 10477
10153: POP
// begin i := rand ( 1 , 3 ) ;
10154: LD_ADDR_VAR 0 2
10158: PUSH
10159: LD_INT 1
10161: PPUSH
10162: LD_INT 3
10164: PPUSH
10165: CALL_OW 12
10169: ST_TO_ADDR
// uc_side := your_side ;
10170: LD_ADDR_OWVAR 20
10174: PUSH
10175: LD_OWVAR 2
10179: ST_TO_ADDR
// case i of 1 :
10180: LD_VAR 0 2
10184: PUSH
10185: LD_INT 1
10187: DOUBLE
10188: EQUAL
10189: IFTRUE 10193
10191: GO 10280
10193: POP
// begin uc_nation := nation_arabian ;
10194: LD_ADDR_OWVAR 21
10198: PUSH
10199: LD_INT 2
10201: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10202: LD_ADDR_OWVAR 37
10206: PUSH
10207: LD_INT 14
10209: ST_TO_ADDR
// vc_engine := engine_combustion ;
10210: LD_ADDR_OWVAR 39
10214: PUSH
10215: LD_INT 1
10217: ST_TO_ADDR
// vc_control := control_manual ;
10218: LD_ADDR_OWVAR 38
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10226: LD_ADDR_OWVAR 40
10230: PUSH
10231: LD_INT 27
10233: PUSH
10234: LD_INT 28
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 1
10243: PPUSH
10244: LD_INT 2
10246: PPUSH
10247: CALL_OW 12
10251: ARRAY
10252: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10253: CALL_OW 45
10257: PPUSH
10258: LD_EXP 9
10262: PPUSH
10263: LD_EXP 10
10267: PPUSH
10268: LD_INT 15
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: CALL_OW 50
// end ; 2 :
10278: GO 10475
10280: LD_INT 2
10282: DOUBLE
10283: EQUAL
10284: IFTRUE 10288
10286: GO 10379
10288: POP
// begin uc_nation := nation_american ;
10289: LD_ADDR_OWVAR 21
10293: PUSH
10294: LD_INT 1
10296: ST_TO_ADDR
// vc_chassis := us_morphling ;
10297: LD_ADDR_OWVAR 37
10301: PUSH
10302: LD_INT 5
10304: ST_TO_ADDR
// vc_engine := engine_siberite ;
10305: LD_ADDR_OWVAR 39
10309: PUSH
10310: LD_INT 3
10312: ST_TO_ADDR
// vc_control := control_computer ;
10313: LD_ADDR_OWVAR 38
10317: PUSH
10318: LD_INT 3
10320: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10321: LD_ADDR_OWVAR 40
10325: PUSH
10326: LD_INT 12
10328: PUSH
10329: LD_INT 10
10331: PUSH
10332: LD_INT 7
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 1
10342: PPUSH
10343: LD_INT 3
10345: PPUSH
10346: CALL_OW 12
10350: ARRAY
10351: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10352: CALL_OW 45
10356: PPUSH
10357: LD_EXP 9
10361: PPUSH
10362: LD_EXP 10
10366: PPUSH
10367: LD_INT 15
10369: PPUSH
10370: LD_INT 1
10372: PPUSH
10373: CALL_OW 50
// end ; 3 :
10377: GO 10475
10379: LD_INT 3
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10474
10387: POP
// begin uc_nation := nation_russian ;
10388: LD_ADDR_OWVAR 21
10392: PUSH
10393: LD_INT 3
10395: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10396: LD_ADDR_OWVAR 37
10400: PUSH
10401: LD_INT 22
10403: ST_TO_ADDR
// vc_engine := engine_combustion ;
10404: LD_ADDR_OWVAR 39
10408: PUSH
10409: LD_INT 1
10411: ST_TO_ADDR
// vc_control := control_manual ;
10412: LD_ADDR_OWVAR 38
10416: PUSH
10417: LD_INT 1
10419: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10420: LD_ADDR_OWVAR 40
10424: PUSH
10425: LD_INT 45
10427: PUSH
10428: LD_INT 44
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 1
10437: PPUSH
10438: LD_INT 2
10440: PPUSH
10441: CALL_OW 12
10445: ARRAY
10446: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10447: CALL_OW 45
10451: PPUSH
10452: LD_EXP 9
10456: PPUSH
10457: LD_EXP 10
10461: PPUSH
10462: LD_INT 15
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: CALL_OW 50
// end ; end ;
10472: GO 10475
10474: POP
// end ; 2 :
10475: GO 10546
10477: LD_INT 2
10479: DOUBLE
10480: EQUAL
10481: IFTRUE 10485
10483: GO 10527
10485: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10486: LD_EXP 11
10490: PPUSH
10491: CALL_OW 274
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: LD_EXP 11
10503: PPUSH
10504: CALL_OW 274
10508: PPUSH
10509: LD_INT 1
10511: PPUSH
10512: CALL_OW 275
10516: PUSH
10517: LD_INT 100
10519: PLUS
10520: PPUSH
10521: CALL_OW 277
// end ; 3 :
10525: GO 10546
10527: LD_INT 3
10529: DOUBLE
10530: EQUAL
10531: IFTRUE 10535
10533: GO 10545
10535: POP
// begin SetTeamExp ( 2 ) ;
10536: LD_INT 2
10538: PPUSH
10539: CALL 940 0 1
// end ; end ;
10543: GO 10546
10545: POP
// end ;
10546: LD_VAR 0 1
10550: RET
// export function BonusV ; var i , j ; begin
10551: LD_INT 0
10553: PPUSH
10554: PPUSH
10555: PPUSH
// case Query ( AddGift5 ) of 1 :
10556: LD_STRING AddGift5
10558: PPUSH
10559: CALL_OW 97
10563: PUSH
10564: LD_INT 1
10566: DOUBLE
10567: EQUAL
10568: IFTRUE 10572
10570: GO 10916
10572: POP
// begin for j = 1 to 3 do
10573: LD_ADDR_VAR 0 3
10577: PUSH
10578: DOUBLE
10579: LD_INT 1
10581: DEC
10582: ST_TO_ADDR
10583: LD_INT 3
10585: PUSH
10586: FOR_TO
10587: IFFALSE 10912
// begin i := rand ( 1 , 3 ) ;
10589: LD_ADDR_VAR 0 2
10593: PUSH
10594: LD_INT 1
10596: PPUSH
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 12
10604: ST_TO_ADDR
// uc_side := your_side ;
10605: LD_ADDR_OWVAR 20
10609: PUSH
10610: LD_OWVAR 2
10614: ST_TO_ADDR
// case i of 1 :
10615: LD_VAR 0 2
10619: PUSH
10620: LD_INT 1
10622: DOUBLE
10623: EQUAL
10624: IFTRUE 10628
10626: GO 10715
10628: POP
// begin uc_nation := nation_arabian ;
10629: LD_ADDR_OWVAR 21
10633: PUSH
10634: LD_INT 2
10636: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10637: LD_ADDR_OWVAR 37
10641: PUSH
10642: LD_INT 14
10644: ST_TO_ADDR
// vc_engine := engine_combustion ;
10645: LD_ADDR_OWVAR 39
10649: PUSH
10650: LD_INT 1
10652: ST_TO_ADDR
// vc_control := control_manual ;
10653: LD_ADDR_OWVAR 38
10657: PUSH
10658: LD_INT 1
10660: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10661: LD_ADDR_OWVAR 40
10665: PUSH
10666: LD_INT 27
10668: PUSH
10669: LD_INT 28
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 1
10678: PPUSH
10679: LD_INT 2
10681: PPUSH
10682: CALL_OW 12
10686: ARRAY
10687: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10688: CALL_OW 45
10692: PPUSH
10693: LD_EXP 9
10697: PPUSH
10698: LD_EXP 10
10702: PPUSH
10703: LD_INT 15
10705: PPUSH
10706: LD_INT 1
10708: PPUSH
10709: CALL_OW 50
// end ; 2 :
10713: GO 10910
10715: LD_INT 2
10717: DOUBLE
10718: EQUAL
10719: IFTRUE 10723
10721: GO 10814
10723: POP
// begin uc_nation := nation_american ;
10724: LD_ADDR_OWVAR 21
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// vc_chassis := us_morphling ;
10732: LD_ADDR_OWVAR 37
10736: PUSH
10737: LD_INT 5
10739: ST_TO_ADDR
// vc_engine := engine_siberite ;
10740: LD_ADDR_OWVAR 39
10744: PUSH
10745: LD_INT 3
10747: ST_TO_ADDR
// vc_control := control_computer ;
10748: LD_ADDR_OWVAR 38
10752: PUSH
10753: LD_INT 3
10755: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10756: LD_ADDR_OWVAR 40
10760: PUSH
10761: LD_INT 12
10763: PUSH
10764: LD_INT 11
10766: PUSH
10767: LD_INT 7
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 1
10777: PPUSH
10778: LD_INT 3
10780: PPUSH
10781: CALL_OW 12
10785: ARRAY
10786: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10787: CALL_OW 45
10791: PPUSH
10792: LD_EXP 9
10796: PPUSH
10797: LD_EXP 10
10801: PPUSH
10802: LD_INT 15
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: CALL_OW 50
// end ; 3 :
10812: GO 10910
10814: LD_INT 3
10816: DOUBLE
10817: EQUAL
10818: IFTRUE 10822
10820: GO 10909
10822: POP
// begin uc_nation := nation_russian ;
10823: LD_ADDR_OWVAR 21
10827: PUSH
10828: LD_INT 3
10830: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10831: LD_ADDR_OWVAR 37
10835: PUSH
10836: LD_INT 22
10838: ST_TO_ADDR
// vc_engine := engine_combustion ;
10839: LD_ADDR_OWVAR 39
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// vc_control := control_manual ;
10847: LD_ADDR_OWVAR 38
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10855: LD_ADDR_OWVAR 40
10859: PUSH
10860: LD_INT 45
10862: PUSH
10863: LD_INT 44
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 1
10872: PPUSH
10873: LD_INT 2
10875: PPUSH
10876: CALL_OW 12
10880: ARRAY
10881: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10882: CALL_OW 45
10886: PPUSH
10887: LD_EXP 9
10891: PPUSH
10892: LD_EXP 10
10896: PPUSH
10897: LD_INT 15
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 50
// end ; end ;
10907: GO 10910
10909: POP
// end ;
10910: GO 10586
10912: POP
10913: POP
// end ; 2 :
10914: GO 10982
10916: LD_INT 2
10918: DOUBLE
10919: EQUAL
10920: IFTRUE 10924
10922: GO 10966
10924: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10925: LD_EXP 11
10929: PPUSH
10930: CALL_OW 274
10934: PPUSH
10935: LD_INT 1
10937: PPUSH
10938: LD_EXP 11
10942: PPUSH
10943: CALL_OW 274
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 275
10955: PUSH
10956: LD_INT 500
10958: PLUS
10959: PPUSH
10960: CALL_OW 277
// end ; 3 :
10964: GO 10982
10966: LD_INT 3
10968: DOUBLE
10969: EQUAL
10970: IFTRUE 10974
10972: GO 10981
10974: POP
// begin GetBack ( ) ;
10975: CALL 1746 0 0
// end ; end ;
10979: GO 10982
10981: POP
// end ; end_of_file
10982: LD_VAR 0 1
10986: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10987: LD_INT 0
10989: PPUSH
// ar_miner := 81 ;
10990: LD_ADDR_EXP 21
10994: PUSH
10995: LD_INT 81
10997: ST_TO_ADDR
// ar_crane := 88 ;
10998: LD_ADDR_EXP 20
11002: PUSH
11003: LD_INT 88
11005: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11006: LD_ADDR_EXP 15
11010: PUSH
11011: LD_INT 89
11013: ST_TO_ADDR
// us_hack := 99 ;
11014: LD_ADDR_EXP 16
11018: PUSH
11019: LD_INT 99
11021: ST_TO_ADDR
// us_artillery := 97 ;
11022: LD_ADDR_EXP 17
11026: PUSH
11027: LD_INT 97
11029: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11030: LD_ADDR_EXP 18
11034: PUSH
11035: LD_INT 91
11037: ST_TO_ADDR
// ar_mortar := 92 ;
11038: LD_ADDR_EXP 19
11042: PUSH
11043: LD_INT 92
11045: ST_TO_ADDR
// ru_radar := 98 ;
11046: LD_ADDR_EXP 14
11050: PUSH
11051: LD_INT 98
11053: ST_TO_ADDR
// tech_Artillery := 80 ;
11054: LD_ADDR_EXP 22
11058: PUSH
11059: LD_INT 80
11061: ST_TO_ADDR
// tech_RadMat := 81 ;
11062: LD_ADDR_EXP 23
11066: PUSH
11067: LD_INT 81
11069: ST_TO_ADDR
// tech_BasicTools := 82 ;
11070: LD_ADDR_EXP 24
11074: PUSH
11075: LD_INT 82
11077: ST_TO_ADDR
// tech_Cargo := 83 ;
11078: LD_ADDR_EXP 25
11082: PUSH
11083: LD_INT 83
11085: ST_TO_ADDR
// tech_Track := 84 ;
11086: LD_ADDR_EXP 26
11090: PUSH
11091: LD_INT 84
11093: ST_TO_ADDR
// tech_Crane := 85 ;
11094: LD_ADDR_EXP 27
11098: PUSH
11099: LD_INT 85
11101: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11102: LD_ADDR_EXP 28
11106: PUSH
11107: LD_INT 86
11109: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11110: LD_ADDR_EXP 29
11114: PUSH
11115: LD_INT 87
11117: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11118: LD_ADDR_EXP 30
11122: PUSH
11123: LD_INT 88
11125: ST_TO_ADDR
// class_mastodont := 31 ;
11126: LD_ADDR_EXP 31
11130: PUSH
11131: LD_INT 31
11133: ST_TO_ADDR
// class_horse := 21 ;
11134: LD_ADDR_EXP 32
11138: PUSH
11139: LD_INT 21
11141: ST_TO_ADDR
// end ;
11142: LD_VAR 0 1
11146: RET
// every 1 do
11147: GO 11149
11149: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11150: CALL 10987 0 0
11154: END
// every 0 0$1 do
11155: GO 11157
11157: DISABLE
// begin enable ;
11158: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11159: LD_STRING updateTimer(
11161: PUSH
11162: LD_OWVAR 1
11166: STR
11167: PUSH
11168: LD_STRING );
11170: STR
11171: PPUSH
11172: CALL_OW 559
// end ;
11176: END
// export function SOS_MapStart ( ) ; begin
11177: LD_INT 0
11179: PPUSH
// if streamModeActive then
11180: LD_EXP 33
11184: IFFALSE 11193
// DefineStreamItems ( true ) ;
11186: LD_INT 1
11188: PPUSH
11189: CALL 12843 0 1
// UpdateFactoryWaypoints ( ) ;
11193: CALL 26427 0 0
// end ;
11197: LD_VAR 0 1
11201: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11202: LD_INT 0
11204: PPUSH
// if p2 = 100 then
11205: LD_VAR 0 2
11209: PUSH
11210: LD_INT 100
11212: EQUAL
11213: IFFALSE 12216
// begin if not StreamModeActive then
11215: LD_EXP 33
11219: NOT
11220: IFFALSE 11230
// StreamModeActive := true ;
11222: LD_ADDR_EXP 33
11226: PUSH
11227: LD_INT 1
11229: ST_TO_ADDR
// if p3 = 0 then
11230: LD_VAR 0 3
11234: PUSH
11235: LD_INT 0
11237: EQUAL
11238: IFFALSE 11244
// InitStreamMode ;
11240: CALL 12379 0 0
// if p3 = 1 then
11244: LD_VAR 0 3
11248: PUSH
11249: LD_INT 1
11251: EQUAL
11252: IFFALSE 11262
// sRocket := true ;
11254: LD_ADDR_EXP 38
11258: PUSH
11259: LD_INT 1
11261: ST_TO_ADDR
// if p3 = 2 then
11262: LD_VAR 0 3
11266: PUSH
11267: LD_INT 2
11269: EQUAL
11270: IFFALSE 11280
// sSpeed := true ;
11272: LD_ADDR_EXP 37
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// if p3 = 3 then
11280: LD_VAR 0 3
11284: PUSH
11285: LD_INT 3
11287: EQUAL
11288: IFFALSE 11298
// sEngine := true ;
11290: LD_ADDR_EXP 39
11294: PUSH
11295: LD_INT 1
11297: ST_TO_ADDR
// if p3 = 4 then
11298: LD_VAR 0 3
11302: PUSH
11303: LD_INT 4
11305: EQUAL
11306: IFFALSE 11316
// sSpec := true ;
11308: LD_ADDR_EXP 36
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// if p3 = 5 then
11316: LD_VAR 0 3
11320: PUSH
11321: LD_INT 5
11323: EQUAL
11324: IFFALSE 11334
// sLevel := true ;
11326: LD_ADDR_EXP 40
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// if p3 = 6 then
11334: LD_VAR 0 3
11338: PUSH
11339: LD_INT 6
11341: EQUAL
11342: IFFALSE 11352
// sArmoury := true ;
11344: LD_ADDR_EXP 41
11348: PUSH
11349: LD_INT 1
11351: ST_TO_ADDR
// if p3 = 7 then
11352: LD_VAR 0 3
11356: PUSH
11357: LD_INT 7
11359: EQUAL
11360: IFFALSE 11370
// sRadar := true ;
11362: LD_ADDR_EXP 42
11366: PUSH
11367: LD_INT 1
11369: ST_TO_ADDR
// if p3 = 8 then
11370: LD_VAR 0 3
11374: PUSH
11375: LD_INT 8
11377: EQUAL
11378: IFFALSE 11388
// sBunker := true ;
11380: LD_ADDR_EXP 43
11384: PUSH
11385: LD_INT 1
11387: ST_TO_ADDR
// if p3 = 9 then
11388: LD_VAR 0 3
11392: PUSH
11393: LD_INT 9
11395: EQUAL
11396: IFFALSE 11406
// sHack := true ;
11398: LD_ADDR_EXP 44
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// if p3 = 10 then
11406: LD_VAR 0 3
11410: PUSH
11411: LD_INT 10
11413: EQUAL
11414: IFFALSE 11424
// sFire := true ;
11416: LD_ADDR_EXP 45
11420: PUSH
11421: LD_INT 1
11423: ST_TO_ADDR
// if p3 = 11 then
11424: LD_VAR 0 3
11428: PUSH
11429: LD_INT 11
11431: EQUAL
11432: IFFALSE 11442
// sRefresh := true ;
11434: LD_ADDR_EXP 46
11438: PUSH
11439: LD_INT 1
11441: ST_TO_ADDR
// if p3 = 12 then
11442: LD_VAR 0 3
11446: PUSH
11447: LD_INT 12
11449: EQUAL
11450: IFFALSE 11460
// sExp := true ;
11452: LD_ADDR_EXP 47
11456: PUSH
11457: LD_INT 1
11459: ST_TO_ADDR
// if p3 = 13 then
11460: LD_VAR 0 3
11464: PUSH
11465: LD_INT 13
11467: EQUAL
11468: IFFALSE 11478
// sDepot := true ;
11470: LD_ADDR_EXP 48
11474: PUSH
11475: LD_INT 1
11477: ST_TO_ADDR
// if p3 = 14 then
11478: LD_VAR 0 3
11482: PUSH
11483: LD_INT 14
11485: EQUAL
11486: IFFALSE 11496
// sFlag := true ;
11488: LD_ADDR_EXP 49
11492: PUSH
11493: LD_INT 1
11495: ST_TO_ADDR
// if p3 = 15 then
11496: LD_VAR 0 3
11500: PUSH
11501: LD_INT 15
11503: EQUAL
11504: IFFALSE 11514
// sKamikadze := true ;
11506: LD_ADDR_EXP 57
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// if p3 = 16 then
11514: LD_VAR 0 3
11518: PUSH
11519: LD_INT 16
11521: EQUAL
11522: IFFALSE 11532
// sTroll := true ;
11524: LD_ADDR_EXP 58
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// if p3 = 17 then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_INT 17
11539: EQUAL
11540: IFFALSE 11550
// sSlow := true ;
11542: LD_ADDR_EXP 59
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// if p3 = 18 then
11550: LD_VAR 0 3
11554: PUSH
11555: LD_INT 18
11557: EQUAL
11558: IFFALSE 11568
// sLack := true ;
11560: LD_ADDR_EXP 60
11564: PUSH
11565: LD_INT 1
11567: ST_TO_ADDR
// if p3 = 19 then
11568: LD_VAR 0 3
11572: PUSH
11573: LD_INT 19
11575: EQUAL
11576: IFFALSE 11586
// sTank := true ;
11578: LD_ADDR_EXP 62
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
// if p3 = 20 then
11586: LD_VAR 0 3
11590: PUSH
11591: LD_INT 20
11593: EQUAL
11594: IFFALSE 11604
// sRemote := true ;
11596: LD_ADDR_EXP 63
11600: PUSH
11601: LD_INT 1
11603: ST_TO_ADDR
// if p3 = 21 then
11604: LD_VAR 0 3
11608: PUSH
11609: LD_INT 21
11611: EQUAL
11612: IFFALSE 11622
// sPowell := true ;
11614: LD_ADDR_EXP 64
11618: PUSH
11619: LD_INT 1
11621: ST_TO_ADDR
// if p3 = 22 then
11622: LD_VAR 0 3
11626: PUSH
11627: LD_INT 22
11629: EQUAL
11630: IFFALSE 11640
// sTeleport := true ;
11632: LD_ADDR_EXP 67
11636: PUSH
11637: LD_INT 1
11639: ST_TO_ADDR
// if p3 = 23 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 23
11647: EQUAL
11648: IFFALSE 11658
// sOilTower := true ;
11650: LD_ADDR_EXP 69
11654: PUSH
11655: LD_INT 1
11657: ST_TO_ADDR
// if p3 = 24 then
11658: LD_VAR 0 3
11662: PUSH
11663: LD_INT 24
11665: EQUAL
11666: IFFALSE 11676
// sShovel := true ;
11668: LD_ADDR_EXP 70
11672: PUSH
11673: LD_INT 1
11675: ST_TO_ADDR
// if p3 = 25 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 25
11683: EQUAL
11684: IFFALSE 11694
// sSheik := true ;
11686: LD_ADDR_EXP 71
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// if p3 = 26 then
11694: LD_VAR 0 3
11698: PUSH
11699: LD_INT 26
11701: EQUAL
11702: IFFALSE 11712
// sEarthquake := true ;
11704: LD_ADDR_EXP 73
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// if p3 = 27 then
11712: LD_VAR 0 3
11716: PUSH
11717: LD_INT 27
11719: EQUAL
11720: IFFALSE 11730
// sAI := true ;
11722: LD_ADDR_EXP 74
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// if p3 = 28 then
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 28
11737: EQUAL
11738: IFFALSE 11748
// sCargo := true ;
11740: LD_ADDR_EXP 77
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
// if p3 = 29 then
11748: LD_VAR 0 3
11752: PUSH
11753: LD_INT 29
11755: EQUAL
11756: IFFALSE 11766
// sDLaser := true ;
11758: LD_ADDR_EXP 78
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// if p3 = 30 then
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 30
11773: EQUAL
11774: IFFALSE 11784
// sExchange := true ;
11776: LD_ADDR_EXP 79
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// if p3 = 31 then
11784: LD_VAR 0 3
11788: PUSH
11789: LD_INT 31
11791: EQUAL
11792: IFFALSE 11802
// sFac := true ;
11794: LD_ADDR_EXP 80
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// if p3 = 32 then
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 32
11809: EQUAL
11810: IFFALSE 11820
// sPower := true ;
11812: LD_ADDR_EXP 81
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// if p3 = 33 then
11820: LD_VAR 0 3
11824: PUSH
11825: LD_INT 33
11827: EQUAL
11828: IFFALSE 11838
// sRandom := true ;
11830: LD_ADDR_EXP 82
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// if p3 = 34 then
11838: LD_VAR 0 3
11842: PUSH
11843: LD_INT 34
11845: EQUAL
11846: IFFALSE 11856
// sShield := true ;
11848: LD_ADDR_EXP 83
11852: PUSH
11853: LD_INT 1
11855: ST_TO_ADDR
// if p3 = 35 then
11856: LD_VAR 0 3
11860: PUSH
11861: LD_INT 35
11863: EQUAL
11864: IFFALSE 11874
// sTime := true ;
11866: LD_ADDR_EXP 84
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if p3 = 36 then
11874: LD_VAR 0 3
11878: PUSH
11879: LD_INT 36
11881: EQUAL
11882: IFFALSE 11892
// sTools := true ;
11884: LD_ADDR_EXP 85
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// if p3 = 101 then
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 101
11899: EQUAL
11900: IFFALSE 11910
// sSold := true ;
11902: LD_ADDR_EXP 50
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// if p3 = 102 then
11910: LD_VAR 0 3
11914: PUSH
11915: LD_INT 102
11917: EQUAL
11918: IFFALSE 11928
// sDiff := true ;
11920: LD_ADDR_EXP 51
11924: PUSH
11925: LD_INT 1
11927: ST_TO_ADDR
// if p3 = 103 then
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 103
11935: EQUAL
11936: IFFALSE 11946
// sFog := true ;
11938: LD_ADDR_EXP 54
11942: PUSH
11943: LD_INT 1
11945: ST_TO_ADDR
// if p3 = 104 then
11946: LD_VAR 0 3
11950: PUSH
11951: LD_INT 104
11953: EQUAL
11954: IFFALSE 11964
// sReset := true ;
11956: LD_ADDR_EXP 55
11960: PUSH
11961: LD_INT 1
11963: ST_TO_ADDR
// if p3 = 105 then
11964: LD_VAR 0 3
11968: PUSH
11969: LD_INT 105
11971: EQUAL
11972: IFFALSE 11982
// sSun := true ;
11974: LD_ADDR_EXP 56
11978: PUSH
11979: LD_INT 1
11981: ST_TO_ADDR
// if p3 = 106 then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 106
11989: EQUAL
11990: IFFALSE 12000
// sTiger := true ;
11992: LD_ADDR_EXP 52
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// if p3 = 107 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 107
12007: EQUAL
12008: IFFALSE 12018
// sBomb := true ;
12010: LD_ADDR_EXP 53
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// if p3 = 108 then
12018: LD_VAR 0 3
12022: PUSH
12023: LD_INT 108
12025: EQUAL
12026: IFFALSE 12036
// sWound := true ;
12028: LD_ADDR_EXP 61
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// if p3 = 109 then
12036: LD_VAR 0 3
12040: PUSH
12041: LD_INT 109
12043: EQUAL
12044: IFFALSE 12054
// sBetray := true ;
12046: LD_ADDR_EXP 65
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// if p3 = 110 then
12054: LD_VAR 0 3
12058: PUSH
12059: LD_INT 110
12061: EQUAL
12062: IFFALSE 12072
// sContamin := true ;
12064: LD_ADDR_EXP 66
12068: PUSH
12069: LD_INT 1
12071: ST_TO_ADDR
// if p3 = 111 then
12072: LD_VAR 0 3
12076: PUSH
12077: LD_INT 111
12079: EQUAL
12080: IFFALSE 12090
// sOil := true ;
12082: LD_ADDR_EXP 68
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// if p3 = 112 then
12090: LD_VAR 0 3
12094: PUSH
12095: LD_INT 112
12097: EQUAL
12098: IFFALSE 12108
// sStu := true ;
12100: LD_ADDR_EXP 72
12104: PUSH
12105: LD_INT 1
12107: ST_TO_ADDR
// if p3 = 113 then
12108: LD_VAR 0 3
12112: PUSH
12113: LD_INT 113
12115: EQUAL
12116: IFFALSE 12126
// sBazooka := true ;
12118: LD_ADDR_EXP 75
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// if p3 = 114 then
12126: LD_VAR 0 3
12130: PUSH
12131: LD_INT 114
12133: EQUAL
12134: IFFALSE 12144
// sMortar := true ;
12136: LD_ADDR_EXP 76
12140: PUSH
12141: LD_INT 1
12143: ST_TO_ADDR
// if p3 = 115 then
12144: LD_VAR 0 3
12148: PUSH
12149: LD_INT 115
12151: EQUAL
12152: IFFALSE 12162
// sRanger := true ;
12154: LD_ADDR_EXP 86
12158: PUSH
12159: LD_INT 1
12161: ST_TO_ADDR
// if p3 = 116 then
12162: LD_VAR 0 3
12166: PUSH
12167: LD_INT 116
12169: EQUAL
12170: IFFALSE 12180
// sComputer := true ;
12172: LD_ADDR_EXP 87
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// if p3 = 117 then
12180: LD_VAR 0 3
12184: PUSH
12185: LD_INT 117
12187: EQUAL
12188: IFFALSE 12198
// s30 := true ;
12190: LD_ADDR_EXP 88
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// if p3 = 118 then
12198: LD_VAR 0 3
12202: PUSH
12203: LD_INT 118
12205: EQUAL
12206: IFFALSE 12216
// s60 := true ;
12208: LD_ADDR_EXP 89
12212: PUSH
12213: LD_INT 1
12215: ST_TO_ADDR
// end ; if p2 = 101 then
12216: LD_VAR 0 2
12220: PUSH
12221: LD_INT 101
12223: EQUAL
12224: IFFALSE 12352
// begin case p3 of 1 :
12226: LD_VAR 0 3
12230: PUSH
12231: LD_INT 1
12233: DOUBLE
12234: EQUAL
12235: IFTRUE 12239
12237: GO 12246
12239: POP
// hHackUnlimitedResources ; 2 :
12240: CALL 24450 0 0
12244: GO 12352
12246: LD_INT 2
12248: DOUBLE
12249: EQUAL
12250: IFTRUE 12254
12252: GO 12261
12254: POP
// hHackSetLevel10 ; 3 :
12255: CALL 24583 0 0
12259: GO 12352
12261: LD_INT 3
12263: DOUBLE
12264: EQUAL
12265: IFTRUE 12269
12267: GO 12276
12269: POP
// hHackSetLevel10YourUnits ; 4 :
12270: CALL 24668 0 0
12274: GO 12352
12276: LD_INT 4
12278: DOUBLE
12279: EQUAL
12280: IFTRUE 12284
12282: GO 12291
12284: POP
// hHackInvincible ; 5 :
12285: CALL 25116 0 0
12289: GO 12352
12291: LD_INT 5
12293: DOUBLE
12294: EQUAL
12295: IFTRUE 12299
12297: GO 12306
12299: POP
// hHackInvisible ; 6 :
12300: CALL 25227 0 0
12304: GO 12352
12306: LD_INT 6
12308: DOUBLE
12309: EQUAL
12310: IFTRUE 12314
12312: GO 12321
12314: POP
// hHackChangeYourSide ; 7 :
12315: CALL 25284 0 0
12319: GO 12352
12321: LD_INT 7
12323: DOUBLE
12324: EQUAL
12325: IFTRUE 12329
12327: GO 12336
12329: POP
// hHackChangeUnitSide ; 8 :
12330: CALL 25326 0 0
12334: GO 12352
12336: LD_INT 8
12338: DOUBLE
12339: EQUAL
12340: IFTRUE 12344
12342: GO 12351
12344: POP
// hHackFog ; end ;
12345: CALL 25427 0 0
12349: GO 12352
12351: POP
// end ; end ;
12352: LD_VAR 0 7
12356: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12357: GO 12359
12359: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12360: LD_STRING initStreamRollete();
12362: PPUSH
12363: CALL_OW 559
// InitStreamMode ;
12367: CALL 12379 0 0
// DefineStreamItems ( false ) ;
12371: LD_INT 0
12373: PPUSH
12374: CALL 12843 0 1
// end ;
12378: END
// function InitStreamMode ; begin
12379: LD_INT 0
12381: PPUSH
// streamModeActive := false ;
12382: LD_ADDR_EXP 33
12386: PUSH
12387: LD_INT 0
12389: ST_TO_ADDR
// normalCounter := 36 ;
12390: LD_ADDR_EXP 34
12394: PUSH
12395: LD_INT 36
12397: ST_TO_ADDR
// hardcoreCounter := 18 ;
12398: LD_ADDR_EXP 35
12402: PUSH
12403: LD_INT 18
12405: ST_TO_ADDR
// sRocket := false ;
12406: LD_ADDR_EXP 38
12410: PUSH
12411: LD_INT 0
12413: ST_TO_ADDR
// sSpeed := false ;
12414: LD_ADDR_EXP 37
12418: PUSH
12419: LD_INT 0
12421: ST_TO_ADDR
// sEngine := false ;
12422: LD_ADDR_EXP 39
12426: PUSH
12427: LD_INT 0
12429: ST_TO_ADDR
// sSpec := false ;
12430: LD_ADDR_EXP 36
12434: PUSH
12435: LD_INT 0
12437: ST_TO_ADDR
// sLevel := false ;
12438: LD_ADDR_EXP 40
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// sArmoury := false ;
12446: LD_ADDR_EXP 41
12450: PUSH
12451: LD_INT 0
12453: ST_TO_ADDR
// sRadar := false ;
12454: LD_ADDR_EXP 42
12458: PUSH
12459: LD_INT 0
12461: ST_TO_ADDR
// sBunker := false ;
12462: LD_ADDR_EXP 43
12466: PUSH
12467: LD_INT 0
12469: ST_TO_ADDR
// sHack := false ;
12470: LD_ADDR_EXP 44
12474: PUSH
12475: LD_INT 0
12477: ST_TO_ADDR
// sFire := false ;
12478: LD_ADDR_EXP 45
12482: PUSH
12483: LD_INT 0
12485: ST_TO_ADDR
// sRefresh := false ;
12486: LD_ADDR_EXP 46
12490: PUSH
12491: LD_INT 0
12493: ST_TO_ADDR
// sExp := false ;
12494: LD_ADDR_EXP 47
12498: PUSH
12499: LD_INT 0
12501: ST_TO_ADDR
// sDepot := false ;
12502: LD_ADDR_EXP 48
12506: PUSH
12507: LD_INT 0
12509: ST_TO_ADDR
// sFlag := false ;
12510: LD_ADDR_EXP 49
12514: PUSH
12515: LD_INT 0
12517: ST_TO_ADDR
// sKamikadze := false ;
12518: LD_ADDR_EXP 57
12522: PUSH
12523: LD_INT 0
12525: ST_TO_ADDR
// sTroll := false ;
12526: LD_ADDR_EXP 58
12530: PUSH
12531: LD_INT 0
12533: ST_TO_ADDR
// sSlow := false ;
12534: LD_ADDR_EXP 59
12538: PUSH
12539: LD_INT 0
12541: ST_TO_ADDR
// sLack := false ;
12542: LD_ADDR_EXP 60
12546: PUSH
12547: LD_INT 0
12549: ST_TO_ADDR
// sTank := false ;
12550: LD_ADDR_EXP 62
12554: PUSH
12555: LD_INT 0
12557: ST_TO_ADDR
// sRemote := false ;
12558: LD_ADDR_EXP 63
12562: PUSH
12563: LD_INT 0
12565: ST_TO_ADDR
// sPowell := false ;
12566: LD_ADDR_EXP 64
12570: PUSH
12571: LD_INT 0
12573: ST_TO_ADDR
// sTeleport := false ;
12574: LD_ADDR_EXP 67
12578: PUSH
12579: LD_INT 0
12581: ST_TO_ADDR
// sOilTower := false ;
12582: LD_ADDR_EXP 69
12586: PUSH
12587: LD_INT 0
12589: ST_TO_ADDR
// sShovel := false ;
12590: LD_ADDR_EXP 70
12594: PUSH
12595: LD_INT 0
12597: ST_TO_ADDR
// sSheik := false ;
12598: LD_ADDR_EXP 71
12602: PUSH
12603: LD_INT 0
12605: ST_TO_ADDR
// sEarthquake := false ;
12606: LD_ADDR_EXP 73
12610: PUSH
12611: LD_INT 0
12613: ST_TO_ADDR
// sAI := false ;
12614: LD_ADDR_EXP 74
12618: PUSH
12619: LD_INT 0
12621: ST_TO_ADDR
// sCargo := false ;
12622: LD_ADDR_EXP 77
12626: PUSH
12627: LD_INT 0
12629: ST_TO_ADDR
// sDLaser := false ;
12630: LD_ADDR_EXP 78
12634: PUSH
12635: LD_INT 0
12637: ST_TO_ADDR
// sExchange := false ;
12638: LD_ADDR_EXP 79
12642: PUSH
12643: LD_INT 0
12645: ST_TO_ADDR
// sFac := false ;
12646: LD_ADDR_EXP 80
12650: PUSH
12651: LD_INT 0
12653: ST_TO_ADDR
// sPower := false ;
12654: LD_ADDR_EXP 81
12658: PUSH
12659: LD_INT 0
12661: ST_TO_ADDR
// sRandom := false ;
12662: LD_ADDR_EXP 82
12666: PUSH
12667: LD_INT 0
12669: ST_TO_ADDR
// sShield := false ;
12670: LD_ADDR_EXP 83
12674: PUSH
12675: LD_INT 0
12677: ST_TO_ADDR
// sTime := false ;
12678: LD_ADDR_EXP 84
12682: PUSH
12683: LD_INT 0
12685: ST_TO_ADDR
// sTools := false ;
12686: LD_ADDR_EXP 85
12690: PUSH
12691: LD_INT 0
12693: ST_TO_ADDR
// sSold := false ;
12694: LD_ADDR_EXP 50
12698: PUSH
12699: LD_INT 0
12701: ST_TO_ADDR
// sDiff := false ;
12702: LD_ADDR_EXP 51
12706: PUSH
12707: LD_INT 0
12709: ST_TO_ADDR
// sFog := false ;
12710: LD_ADDR_EXP 54
12714: PUSH
12715: LD_INT 0
12717: ST_TO_ADDR
// sReset := false ;
12718: LD_ADDR_EXP 55
12722: PUSH
12723: LD_INT 0
12725: ST_TO_ADDR
// sSun := false ;
12726: LD_ADDR_EXP 56
12730: PUSH
12731: LD_INT 0
12733: ST_TO_ADDR
// sTiger := false ;
12734: LD_ADDR_EXP 52
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// sBomb := false ;
12742: LD_ADDR_EXP 53
12746: PUSH
12747: LD_INT 0
12749: ST_TO_ADDR
// sWound := false ;
12750: LD_ADDR_EXP 61
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// sBetray := false ;
12758: LD_ADDR_EXP 65
12762: PUSH
12763: LD_INT 0
12765: ST_TO_ADDR
// sContamin := false ;
12766: LD_ADDR_EXP 66
12770: PUSH
12771: LD_INT 0
12773: ST_TO_ADDR
// sOil := false ;
12774: LD_ADDR_EXP 68
12778: PUSH
12779: LD_INT 0
12781: ST_TO_ADDR
// sStu := false ;
12782: LD_ADDR_EXP 72
12786: PUSH
12787: LD_INT 0
12789: ST_TO_ADDR
// sBazooka := false ;
12790: LD_ADDR_EXP 75
12794: PUSH
12795: LD_INT 0
12797: ST_TO_ADDR
// sMortar := false ;
12798: LD_ADDR_EXP 76
12802: PUSH
12803: LD_INT 0
12805: ST_TO_ADDR
// sRanger := false ;
12806: LD_ADDR_EXP 86
12810: PUSH
12811: LD_INT 0
12813: ST_TO_ADDR
// sComputer := false ;
12814: LD_ADDR_EXP 87
12818: PUSH
12819: LD_INT 0
12821: ST_TO_ADDR
// s30 := false ;
12822: LD_ADDR_EXP 88
12826: PUSH
12827: LD_INT 0
12829: ST_TO_ADDR
// s60 := false ;
12830: LD_ADDR_EXP 89
12834: PUSH
12835: LD_INT 0
12837: ST_TO_ADDR
// end ;
12838: LD_VAR 0 1
12842: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12843: LD_INT 0
12845: PPUSH
12846: PPUSH
12847: PPUSH
12848: PPUSH
12849: PPUSH
12850: PPUSH
12851: PPUSH
// result := [ ] ;
12852: LD_ADDR_VAR 0 2
12856: PUSH
12857: EMPTY
12858: ST_TO_ADDR
// if campaign_id = 1 then
12859: LD_OWVAR 69
12863: PUSH
12864: LD_INT 1
12866: EQUAL
12867: IFFALSE 16033
// begin case mission_number of 1 :
12869: LD_OWVAR 70
12873: PUSH
12874: LD_INT 1
12876: DOUBLE
12877: EQUAL
12878: IFTRUE 12882
12880: GO 12958
12882: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12883: LD_ADDR_VAR 0 2
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: LD_INT 4
12893: PUSH
12894: LD_INT 11
12896: PUSH
12897: LD_INT 12
12899: PUSH
12900: LD_INT 15
12902: PUSH
12903: LD_INT 16
12905: PUSH
12906: LD_INT 22
12908: PUSH
12909: LD_INT 23
12911: PUSH
12912: LD_INT 26
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 101
12928: PUSH
12929: LD_INT 102
12931: PUSH
12932: LD_INT 106
12934: PUSH
12935: LD_INT 116
12937: PUSH
12938: LD_INT 117
12940: PUSH
12941: LD_INT 118
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: ST_TO_ADDR
12956: GO 16031
12958: LD_INT 2
12960: DOUBLE
12961: EQUAL
12962: IFTRUE 12966
12964: GO 13050
12966: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12967: LD_ADDR_VAR 0 2
12971: PUSH
12972: LD_INT 2
12974: PUSH
12975: LD_INT 4
12977: PUSH
12978: LD_INT 11
12980: PUSH
12981: LD_INT 12
12983: PUSH
12984: LD_INT 15
12986: PUSH
12987: LD_INT 16
12989: PUSH
12990: LD_INT 22
12992: PUSH
12993: LD_INT 23
12995: PUSH
12996: LD_INT 26
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 101
13012: PUSH
13013: LD_INT 102
13015: PUSH
13016: LD_INT 105
13018: PUSH
13019: LD_INT 106
13021: PUSH
13022: LD_INT 108
13024: PUSH
13025: LD_INT 116
13027: PUSH
13028: LD_INT 117
13030: PUSH
13031: LD_INT 118
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: ST_TO_ADDR
13048: GO 16031
13050: LD_INT 3
13052: DOUBLE
13053: EQUAL
13054: IFTRUE 13058
13056: GO 13146
13058: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13059: LD_ADDR_VAR 0 2
13063: PUSH
13064: LD_INT 2
13066: PUSH
13067: LD_INT 4
13069: PUSH
13070: LD_INT 5
13072: PUSH
13073: LD_INT 11
13075: PUSH
13076: LD_INT 12
13078: PUSH
13079: LD_INT 15
13081: PUSH
13082: LD_INT 16
13084: PUSH
13085: LD_INT 22
13087: PUSH
13088: LD_INT 26
13090: PUSH
13091: LD_INT 36
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 101
13108: PUSH
13109: LD_INT 102
13111: PUSH
13112: LD_INT 105
13114: PUSH
13115: LD_INT 106
13117: PUSH
13118: LD_INT 108
13120: PUSH
13121: LD_INT 116
13123: PUSH
13124: LD_INT 117
13126: PUSH
13127: LD_INT 118
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: ST_TO_ADDR
13144: GO 16031
13146: LD_INT 4
13148: DOUBLE
13149: EQUAL
13150: IFTRUE 13154
13152: GO 13250
13154: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13155: LD_ADDR_VAR 0 2
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: LD_INT 4
13165: PUSH
13166: LD_INT 5
13168: PUSH
13169: LD_INT 8
13171: PUSH
13172: LD_INT 11
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: LD_INT 15
13180: PUSH
13181: LD_INT 16
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_INT 23
13189: PUSH
13190: LD_INT 26
13192: PUSH
13193: LD_INT 36
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 101
13212: PUSH
13213: LD_INT 102
13215: PUSH
13216: LD_INT 105
13218: PUSH
13219: LD_INT 106
13221: PUSH
13222: LD_INT 108
13224: PUSH
13225: LD_INT 116
13227: PUSH
13228: LD_INT 117
13230: PUSH
13231: LD_INT 118
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: ST_TO_ADDR
13248: GO 16031
13250: LD_INT 5
13252: DOUBLE
13253: EQUAL
13254: IFTRUE 13258
13256: GO 13370
13258: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13259: LD_ADDR_VAR 0 2
13263: PUSH
13264: LD_INT 2
13266: PUSH
13267: LD_INT 4
13269: PUSH
13270: LD_INT 5
13272: PUSH
13273: LD_INT 6
13275: PUSH
13276: LD_INT 8
13278: PUSH
13279: LD_INT 11
13281: PUSH
13282: LD_INT 12
13284: PUSH
13285: LD_INT 15
13287: PUSH
13288: LD_INT 16
13290: PUSH
13291: LD_INT 22
13293: PUSH
13294: LD_INT 23
13296: PUSH
13297: LD_INT 25
13299: PUSH
13300: LD_INT 26
13302: PUSH
13303: LD_INT 36
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 101
13324: PUSH
13325: LD_INT 102
13327: PUSH
13328: LD_INT 105
13330: PUSH
13331: LD_INT 106
13333: PUSH
13334: LD_INT 108
13336: PUSH
13337: LD_INT 109
13339: PUSH
13340: LD_INT 112
13342: PUSH
13343: LD_INT 116
13345: PUSH
13346: LD_INT 117
13348: PUSH
13349: LD_INT 118
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: ST_TO_ADDR
13368: GO 16031
13370: LD_INT 6
13372: DOUBLE
13373: EQUAL
13374: IFTRUE 13378
13376: GO 13510
13378: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13379: LD_ADDR_VAR 0 2
13383: PUSH
13384: LD_INT 2
13386: PUSH
13387: LD_INT 4
13389: PUSH
13390: LD_INT 5
13392: PUSH
13393: LD_INT 6
13395: PUSH
13396: LD_INT 8
13398: PUSH
13399: LD_INT 11
13401: PUSH
13402: LD_INT 12
13404: PUSH
13405: LD_INT 15
13407: PUSH
13408: LD_INT 16
13410: PUSH
13411: LD_INT 20
13413: PUSH
13414: LD_INT 21
13416: PUSH
13417: LD_INT 22
13419: PUSH
13420: LD_INT 23
13422: PUSH
13423: LD_INT 25
13425: PUSH
13426: LD_INT 26
13428: PUSH
13429: LD_INT 30
13431: PUSH
13432: LD_INT 31
13434: PUSH
13435: LD_INT 32
13437: PUSH
13438: LD_INT 36
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 101
13464: PUSH
13465: LD_INT 102
13467: PUSH
13468: LD_INT 105
13470: PUSH
13471: LD_INT 106
13473: PUSH
13474: LD_INT 108
13476: PUSH
13477: LD_INT 109
13479: PUSH
13480: LD_INT 112
13482: PUSH
13483: LD_INT 116
13485: PUSH
13486: LD_INT 117
13488: PUSH
13489: LD_INT 118
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: ST_TO_ADDR
13508: GO 16031
13510: LD_INT 7
13512: DOUBLE
13513: EQUAL
13514: IFTRUE 13518
13516: GO 13630
13518: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13519: LD_ADDR_VAR 0 2
13523: PUSH
13524: LD_INT 2
13526: PUSH
13527: LD_INT 4
13529: PUSH
13530: LD_INT 5
13532: PUSH
13533: LD_INT 7
13535: PUSH
13536: LD_INT 11
13538: PUSH
13539: LD_INT 12
13541: PUSH
13542: LD_INT 15
13544: PUSH
13545: LD_INT 16
13547: PUSH
13548: LD_INT 20
13550: PUSH
13551: LD_INT 21
13553: PUSH
13554: LD_INT 22
13556: PUSH
13557: LD_INT 23
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 26
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 101
13584: PUSH
13585: LD_INT 102
13587: PUSH
13588: LD_INT 103
13590: PUSH
13591: LD_INT 105
13593: PUSH
13594: LD_INT 106
13596: PUSH
13597: LD_INT 108
13599: PUSH
13600: LD_INT 112
13602: PUSH
13603: LD_INT 116
13605: PUSH
13606: LD_INT 117
13608: PUSH
13609: LD_INT 118
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: ST_TO_ADDR
13628: GO 16031
13630: LD_INT 8
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13778
13638: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13639: LD_ADDR_VAR 0 2
13643: PUSH
13644: LD_INT 2
13646: PUSH
13647: LD_INT 4
13649: PUSH
13650: LD_INT 5
13652: PUSH
13653: LD_INT 6
13655: PUSH
13656: LD_INT 7
13658: PUSH
13659: LD_INT 8
13661: PUSH
13662: LD_INT 11
13664: PUSH
13665: LD_INT 12
13667: PUSH
13668: LD_INT 15
13670: PUSH
13671: LD_INT 16
13673: PUSH
13674: LD_INT 20
13676: PUSH
13677: LD_INT 21
13679: PUSH
13680: LD_INT 22
13682: PUSH
13683: LD_INT 23
13685: PUSH
13686: LD_INT 25
13688: PUSH
13689: LD_INT 26
13691: PUSH
13692: LD_INT 30
13694: PUSH
13695: LD_INT 31
13697: PUSH
13698: LD_INT 32
13700: PUSH
13701: LD_INT 36
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 101
13728: PUSH
13729: LD_INT 102
13731: PUSH
13732: LD_INT 103
13734: PUSH
13735: LD_INT 105
13737: PUSH
13738: LD_INT 106
13740: PUSH
13741: LD_INT 108
13743: PUSH
13744: LD_INT 109
13746: PUSH
13747: LD_INT 112
13749: PUSH
13750: LD_INT 116
13752: PUSH
13753: LD_INT 117
13755: PUSH
13756: LD_INT 118
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: ST_TO_ADDR
13776: GO 16031
13778: LD_INT 9
13780: DOUBLE
13781: EQUAL
13782: IFTRUE 13786
13784: GO 13934
13786: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13787: LD_ADDR_VAR 0 2
13791: PUSH
13792: LD_INT 2
13794: PUSH
13795: LD_INT 4
13797: PUSH
13798: LD_INT 5
13800: PUSH
13801: LD_INT 6
13803: PUSH
13804: LD_INT 7
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: LD_INT 11
13812: PUSH
13813: LD_INT 12
13815: PUSH
13816: LD_INT 15
13818: PUSH
13819: LD_INT 16
13821: PUSH
13822: LD_INT 20
13824: PUSH
13825: LD_INT 21
13827: PUSH
13828: LD_INT 22
13830: PUSH
13831: LD_INT 23
13833: PUSH
13834: LD_INT 25
13836: PUSH
13837: LD_INT 26
13839: PUSH
13840: LD_INT 28
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 31
13848: PUSH
13849: LD_INT 32
13851: PUSH
13852: LD_INT 36
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 101
13880: PUSH
13881: LD_INT 102
13883: PUSH
13884: LD_INT 103
13886: PUSH
13887: LD_INT 105
13889: PUSH
13890: LD_INT 106
13892: PUSH
13893: LD_INT 108
13895: PUSH
13896: LD_INT 109
13898: PUSH
13899: LD_INT 112
13901: PUSH
13902: LD_INT 114
13904: PUSH
13905: LD_INT 116
13907: PUSH
13908: LD_INT 117
13910: PUSH
13911: LD_INT 118
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: ST_TO_ADDR
13932: GO 16031
13934: LD_INT 10
13936: DOUBLE
13937: EQUAL
13938: IFTRUE 13942
13940: GO 14138
13942: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13943: LD_ADDR_VAR 0 2
13947: PUSH
13948: LD_INT 2
13950: PUSH
13951: LD_INT 4
13953: PUSH
13954: LD_INT 5
13956: PUSH
13957: LD_INT 6
13959: PUSH
13960: LD_INT 7
13962: PUSH
13963: LD_INT 8
13965: PUSH
13966: LD_INT 9
13968: PUSH
13969: LD_INT 10
13971: PUSH
13972: LD_INT 11
13974: PUSH
13975: LD_INT 12
13977: PUSH
13978: LD_INT 13
13980: PUSH
13981: LD_INT 14
13983: PUSH
13984: LD_INT 15
13986: PUSH
13987: LD_INT 16
13989: PUSH
13990: LD_INT 17
13992: PUSH
13993: LD_INT 18
13995: PUSH
13996: LD_INT 19
13998: PUSH
13999: LD_INT 20
14001: PUSH
14002: LD_INT 21
14004: PUSH
14005: LD_INT 22
14007: PUSH
14008: LD_INT 23
14010: PUSH
14011: LD_INT 24
14013: PUSH
14014: LD_INT 25
14016: PUSH
14017: LD_INT 26
14019: PUSH
14020: LD_INT 28
14022: PUSH
14023: LD_INT 30
14025: PUSH
14026: LD_INT 31
14028: PUSH
14029: LD_INT 32
14031: PUSH
14032: LD_INT 36
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 101
14068: PUSH
14069: LD_INT 102
14071: PUSH
14072: LD_INT 103
14074: PUSH
14075: LD_INT 104
14077: PUSH
14078: LD_INT 105
14080: PUSH
14081: LD_INT 106
14083: PUSH
14084: LD_INT 107
14086: PUSH
14087: LD_INT 108
14089: PUSH
14090: LD_INT 109
14092: PUSH
14093: LD_INT 110
14095: PUSH
14096: LD_INT 111
14098: PUSH
14099: LD_INT 112
14101: PUSH
14102: LD_INT 114
14104: PUSH
14105: LD_INT 116
14107: PUSH
14108: LD_INT 117
14110: PUSH
14111: LD_INT 118
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: ST_TO_ADDR
14136: GO 16031
14138: LD_INT 11
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14350
14146: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14147: LD_ADDR_VAR 0 2
14151: PUSH
14152: LD_INT 2
14154: PUSH
14155: LD_INT 3
14157: PUSH
14158: LD_INT 4
14160: PUSH
14161: LD_INT 5
14163: PUSH
14164: LD_INT 6
14166: PUSH
14167: LD_INT 7
14169: PUSH
14170: LD_INT 8
14172: PUSH
14173: LD_INT 9
14175: PUSH
14176: LD_INT 10
14178: PUSH
14179: LD_INT 11
14181: PUSH
14182: LD_INT 12
14184: PUSH
14185: LD_INT 13
14187: PUSH
14188: LD_INT 14
14190: PUSH
14191: LD_INT 15
14193: PUSH
14194: LD_INT 16
14196: PUSH
14197: LD_INT 17
14199: PUSH
14200: LD_INT 18
14202: PUSH
14203: LD_INT 19
14205: PUSH
14206: LD_INT 20
14208: PUSH
14209: LD_INT 21
14211: PUSH
14212: LD_INT 22
14214: PUSH
14215: LD_INT 23
14217: PUSH
14218: LD_INT 24
14220: PUSH
14221: LD_INT 25
14223: PUSH
14224: LD_INT 26
14226: PUSH
14227: LD_INT 28
14229: PUSH
14230: LD_INT 30
14232: PUSH
14233: LD_INT 31
14235: PUSH
14236: LD_INT 32
14238: PUSH
14239: LD_INT 34
14241: PUSH
14242: LD_INT 36
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: LD_INT 101
14280: PUSH
14281: LD_INT 102
14283: PUSH
14284: LD_INT 103
14286: PUSH
14287: LD_INT 104
14289: PUSH
14290: LD_INT 105
14292: PUSH
14293: LD_INT 106
14295: PUSH
14296: LD_INT 107
14298: PUSH
14299: LD_INT 108
14301: PUSH
14302: LD_INT 109
14304: PUSH
14305: LD_INT 110
14307: PUSH
14308: LD_INT 111
14310: PUSH
14311: LD_INT 112
14313: PUSH
14314: LD_INT 114
14316: PUSH
14317: LD_INT 116
14319: PUSH
14320: LD_INT 117
14322: PUSH
14323: LD_INT 118
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: ST_TO_ADDR
14348: GO 16031
14350: LD_INT 12
14352: DOUBLE
14353: EQUAL
14354: IFTRUE 14358
14356: GO 14578
14358: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14359: LD_ADDR_VAR 0 2
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: LD_INT 3
14372: PUSH
14373: LD_INT 4
14375: PUSH
14376: LD_INT 5
14378: PUSH
14379: LD_INT 6
14381: PUSH
14382: LD_INT 7
14384: PUSH
14385: LD_INT 8
14387: PUSH
14388: LD_INT 9
14390: PUSH
14391: LD_INT 10
14393: PUSH
14394: LD_INT 11
14396: PUSH
14397: LD_INT 12
14399: PUSH
14400: LD_INT 13
14402: PUSH
14403: LD_INT 14
14405: PUSH
14406: LD_INT 15
14408: PUSH
14409: LD_INT 16
14411: PUSH
14412: LD_INT 17
14414: PUSH
14415: LD_INT 18
14417: PUSH
14418: LD_INT 19
14420: PUSH
14421: LD_INT 20
14423: PUSH
14424: LD_INT 21
14426: PUSH
14427: LD_INT 22
14429: PUSH
14430: LD_INT 23
14432: PUSH
14433: LD_INT 24
14435: PUSH
14436: LD_INT 25
14438: PUSH
14439: LD_INT 26
14441: PUSH
14442: LD_INT 27
14444: PUSH
14445: LD_INT 28
14447: PUSH
14448: LD_INT 30
14450: PUSH
14451: LD_INT 31
14453: PUSH
14454: LD_INT 32
14456: PUSH
14457: LD_INT 33
14459: PUSH
14460: LD_INT 34
14462: PUSH
14463: LD_INT 36
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 101
14504: PUSH
14505: LD_INT 102
14507: PUSH
14508: LD_INT 103
14510: PUSH
14511: LD_INT 104
14513: PUSH
14514: LD_INT 105
14516: PUSH
14517: LD_INT 106
14519: PUSH
14520: LD_INT 107
14522: PUSH
14523: LD_INT 108
14525: PUSH
14526: LD_INT 109
14528: PUSH
14529: LD_INT 110
14531: PUSH
14532: LD_INT 111
14534: PUSH
14535: LD_INT 112
14537: PUSH
14538: LD_INT 113
14540: PUSH
14541: LD_INT 114
14543: PUSH
14544: LD_INT 116
14546: PUSH
14547: LD_INT 117
14549: PUSH
14550: LD_INT 118
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: ST_TO_ADDR
14576: GO 16031
14578: LD_INT 13
14580: DOUBLE
14581: EQUAL
14582: IFTRUE 14586
14584: GO 14794
14586: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14587: LD_ADDR_VAR 0 2
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: LD_INT 2
14597: PUSH
14598: LD_INT 3
14600: PUSH
14601: LD_INT 4
14603: PUSH
14604: LD_INT 5
14606: PUSH
14607: LD_INT 8
14609: PUSH
14610: LD_INT 9
14612: PUSH
14613: LD_INT 10
14615: PUSH
14616: LD_INT 11
14618: PUSH
14619: LD_INT 12
14621: PUSH
14622: LD_INT 14
14624: PUSH
14625: LD_INT 15
14627: PUSH
14628: LD_INT 16
14630: PUSH
14631: LD_INT 17
14633: PUSH
14634: LD_INT 18
14636: PUSH
14637: LD_INT 19
14639: PUSH
14640: LD_INT 20
14642: PUSH
14643: LD_INT 21
14645: PUSH
14646: LD_INT 22
14648: PUSH
14649: LD_INT 23
14651: PUSH
14652: LD_INT 24
14654: PUSH
14655: LD_INT 25
14657: PUSH
14658: LD_INT 26
14660: PUSH
14661: LD_INT 27
14663: PUSH
14664: LD_INT 28
14666: PUSH
14667: LD_INT 30
14669: PUSH
14670: LD_INT 31
14672: PUSH
14673: LD_INT 32
14675: PUSH
14676: LD_INT 33
14678: PUSH
14679: LD_INT 34
14681: PUSH
14682: LD_INT 36
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 101
14720: PUSH
14721: LD_INT 102
14723: PUSH
14724: LD_INT 103
14726: PUSH
14727: LD_INT 104
14729: PUSH
14730: LD_INT 105
14732: PUSH
14733: LD_INT 106
14735: PUSH
14736: LD_INT 107
14738: PUSH
14739: LD_INT 108
14741: PUSH
14742: LD_INT 109
14744: PUSH
14745: LD_INT 110
14747: PUSH
14748: LD_INT 111
14750: PUSH
14751: LD_INT 112
14753: PUSH
14754: LD_INT 113
14756: PUSH
14757: LD_INT 114
14759: PUSH
14760: LD_INT 116
14762: PUSH
14763: LD_INT 117
14765: PUSH
14766: LD_INT 118
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: ST_TO_ADDR
14792: GO 16031
14794: LD_INT 14
14796: DOUBLE
14797: EQUAL
14798: IFTRUE 14802
14800: GO 15026
14802: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14803: LD_ADDR_VAR 0 2
14807: PUSH
14808: LD_INT 1
14810: PUSH
14811: LD_INT 2
14813: PUSH
14814: LD_INT 3
14816: PUSH
14817: LD_INT 4
14819: PUSH
14820: LD_INT 5
14822: PUSH
14823: LD_INT 6
14825: PUSH
14826: LD_INT 7
14828: PUSH
14829: LD_INT 8
14831: PUSH
14832: LD_INT 9
14834: PUSH
14835: LD_INT 10
14837: PUSH
14838: LD_INT 11
14840: PUSH
14841: LD_INT 12
14843: PUSH
14844: LD_INT 13
14846: PUSH
14847: LD_INT 14
14849: PUSH
14850: LD_INT 15
14852: PUSH
14853: LD_INT 16
14855: PUSH
14856: LD_INT 17
14858: PUSH
14859: LD_INT 18
14861: PUSH
14862: LD_INT 19
14864: PUSH
14865: LD_INT 20
14867: PUSH
14868: LD_INT 21
14870: PUSH
14871: LD_INT 22
14873: PUSH
14874: LD_INT 23
14876: PUSH
14877: LD_INT 24
14879: PUSH
14880: LD_INT 25
14882: PUSH
14883: LD_INT 26
14885: PUSH
14886: LD_INT 27
14888: PUSH
14889: LD_INT 28
14891: PUSH
14892: LD_INT 29
14894: PUSH
14895: LD_INT 30
14897: PUSH
14898: LD_INT 31
14900: PUSH
14901: LD_INT 32
14903: PUSH
14904: LD_INT 33
14906: PUSH
14907: LD_INT 34
14909: PUSH
14910: LD_INT 36
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 101
14952: PUSH
14953: LD_INT 102
14955: PUSH
14956: LD_INT 103
14958: PUSH
14959: LD_INT 104
14961: PUSH
14962: LD_INT 105
14964: PUSH
14965: LD_INT 106
14967: PUSH
14968: LD_INT 107
14970: PUSH
14971: LD_INT 108
14973: PUSH
14974: LD_INT 109
14976: PUSH
14977: LD_INT 110
14979: PUSH
14980: LD_INT 111
14982: PUSH
14983: LD_INT 112
14985: PUSH
14986: LD_INT 113
14988: PUSH
14989: LD_INT 114
14991: PUSH
14992: LD_INT 116
14994: PUSH
14995: LD_INT 117
14997: PUSH
14998: LD_INT 118
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 16031
15026: LD_INT 15
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15258
15034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15035: LD_ADDR_VAR 0 2
15039: PUSH
15040: LD_INT 1
15042: PUSH
15043: LD_INT 2
15045: PUSH
15046: LD_INT 3
15048: PUSH
15049: LD_INT 4
15051: PUSH
15052: LD_INT 5
15054: PUSH
15055: LD_INT 6
15057: PUSH
15058: LD_INT 7
15060: PUSH
15061: LD_INT 8
15063: PUSH
15064: LD_INT 9
15066: PUSH
15067: LD_INT 10
15069: PUSH
15070: LD_INT 11
15072: PUSH
15073: LD_INT 12
15075: PUSH
15076: LD_INT 13
15078: PUSH
15079: LD_INT 14
15081: PUSH
15082: LD_INT 15
15084: PUSH
15085: LD_INT 16
15087: PUSH
15088: LD_INT 17
15090: PUSH
15091: LD_INT 18
15093: PUSH
15094: LD_INT 19
15096: PUSH
15097: LD_INT 20
15099: PUSH
15100: LD_INT 21
15102: PUSH
15103: LD_INT 22
15105: PUSH
15106: LD_INT 23
15108: PUSH
15109: LD_INT 24
15111: PUSH
15112: LD_INT 25
15114: PUSH
15115: LD_INT 26
15117: PUSH
15118: LD_INT 27
15120: PUSH
15121: LD_INT 28
15123: PUSH
15124: LD_INT 29
15126: PUSH
15127: LD_INT 30
15129: PUSH
15130: LD_INT 31
15132: PUSH
15133: LD_INT 32
15135: PUSH
15136: LD_INT 33
15138: PUSH
15139: LD_INT 34
15141: PUSH
15142: LD_INT 36
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: LD_INT 101
15184: PUSH
15185: LD_INT 102
15187: PUSH
15188: LD_INT 103
15190: PUSH
15191: LD_INT 104
15193: PUSH
15194: LD_INT 105
15196: PUSH
15197: LD_INT 106
15199: PUSH
15200: LD_INT 107
15202: PUSH
15203: LD_INT 108
15205: PUSH
15206: LD_INT 109
15208: PUSH
15209: LD_INT 110
15211: PUSH
15212: LD_INT 111
15214: PUSH
15215: LD_INT 112
15217: PUSH
15218: LD_INT 113
15220: PUSH
15221: LD_INT 114
15223: PUSH
15224: LD_INT 116
15226: PUSH
15227: LD_INT 117
15229: PUSH
15230: LD_INT 118
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: ST_TO_ADDR
15256: GO 16031
15258: LD_INT 16
15260: DOUBLE
15261: EQUAL
15262: IFTRUE 15266
15264: GO 15402
15266: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15267: LD_ADDR_VAR 0 2
15271: PUSH
15272: LD_INT 2
15274: PUSH
15275: LD_INT 4
15277: PUSH
15278: LD_INT 5
15280: PUSH
15281: LD_INT 7
15283: PUSH
15284: LD_INT 11
15286: PUSH
15287: LD_INT 12
15289: PUSH
15290: LD_INT 15
15292: PUSH
15293: LD_INT 16
15295: PUSH
15296: LD_INT 20
15298: PUSH
15299: LD_INT 21
15301: PUSH
15302: LD_INT 22
15304: PUSH
15305: LD_INT 23
15307: PUSH
15308: LD_INT 25
15310: PUSH
15311: LD_INT 26
15313: PUSH
15314: LD_INT 30
15316: PUSH
15317: LD_INT 31
15319: PUSH
15320: LD_INT 32
15322: PUSH
15323: LD_INT 33
15325: PUSH
15326: LD_INT 34
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 101
15352: PUSH
15353: LD_INT 102
15355: PUSH
15356: LD_INT 103
15358: PUSH
15359: LD_INT 106
15361: PUSH
15362: LD_INT 108
15364: PUSH
15365: LD_INT 112
15367: PUSH
15368: LD_INT 113
15370: PUSH
15371: LD_INT 114
15373: PUSH
15374: LD_INT 116
15376: PUSH
15377: LD_INT 117
15379: PUSH
15380: LD_INT 118
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: ST_TO_ADDR
15400: GO 16031
15402: LD_INT 17
15404: DOUBLE
15405: EQUAL
15406: IFTRUE 15410
15408: GO 15634
15410: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15411: LD_ADDR_VAR 0 2
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: LD_INT 2
15421: PUSH
15422: LD_INT 3
15424: PUSH
15425: LD_INT 4
15427: PUSH
15428: LD_INT 5
15430: PUSH
15431: LD_INT 6
15433: PUSH
15434: LD_INT 7
15436: PUSH
15437: LD_INT 8
15439: PUSH
15440: LD_INT 9
15442: PUSH
15443: LD_INT 10
15445: PUSH
15446: LD_INT 11
15448: PUSH
15449: LD_INT 12
15451: PUSH
15452: LD_INT 13
15454: PUSH
15455: LD_INT 14
15457: PUSH
15458: LD_INT 15
15460: PUSH
15461: LD_INT 16
15463: PUSH
15464: LD_INT 17
15466: PUSH
15467: LD_INT 18
15469: PUSH
15470: LD_INT 19
15472: PUSH
15473: LD_INT 20
15475: PUSH
15476: LD_INT 21
15478: PUSH
15479: LD_INT 22
15481: PUSH
15482: LD_INT 23
15484: PUSH
15485: LD_INT 24
15487: PUSH
15488: LD_INT 25
15490: PUSH
15491: LD_INT 26
15493: PUSH
15494: LD_INT 27
15496: PUSH
15497: LD_INT 28
15499: PUSH
15500: LD_INT 29
15502: PUSH
15503: LD_INT 30
15505: PUSH
15506: LD_INT 31
15508: PUSH
15509: LD_INT 32
15511: PUSH
15512: LD_INT 33
15514: PUSH
15515: LD_INT 34
15517: PUSH
15518: LD_INT 36
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 101
15560: PUSH
15561: LD_INT 102
15563: PUSH
15564: LD_INT 103
15566: PUSH
15567: LD_INT 104
15569: PUSH
15570: LD_INT 105
15572: PUSH
15573: LD_INT 106
15575: PUSH
15576: LD_INT 107
15578: PUSH
15579: LD_INT 108
15581: PUSH
15582: LD_INT 109
15584: PUSH
15585: LD_INT 110
15587: PUSH
15588: LD_INT 111
15590: PUSH
15591: LD_INT 112
15593: PUSH
15594: LD_INT 113
15596: PUSH
15597: LD_INT 114
15599: PUSH
15600: LD_INT 116
15602: PUSH
15603: LD_INT 117
15605: PUSH
15606: LD_INT 118
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: ST_TO_ADDR
15632: GO 16031
15634: LD_INT 18
15636: DOUBLE
15637: EQUAL
15638: IFTRUE 15642
15640: GO 15790
15642: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15643: LD_ADDR_VAR 0 2
15647: PUSH
15648: LD_INT 2
15650: PUSH
15651: LD_INT 4
15653: PUSH
15654: LD_INT 5
15656: PUSH
15657: LD_INT 7
15659: PUSH
15660: LD_INT 11
15662: PUSH
15663: LD_INT 12
15665: PUSH
15666: LD_INT 15
15668: PUSH
15669: LD_INT 16
15671: PUSH
15672: LD_INT 20
15674: PUSH
15675: LD_INT 21
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_INT 23
15683: PUSH
15684: LD_INT 25
15686: PUSH
15687: LD_INT 26
15689: PUSH
15690: LD_INT 30
15692: PUSH
15693: LD_INT 31
15695: PUSH
15696: LD_INT 32
15698: PUSH
15699: LD_INT 33
15701: PUSH
15702: LD_INT 34
15704: PUSH
15705: LD_INT 35
15707: PUSH
15708: LD_INT 36
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 101
15736: PUSH
15737: LD_INT 102
15739: PUSH
15740: LD_INT 103
15742: PUSH
15743: LD_INT 106
15745: PUSH
15746: LD_INT 108
15748: PUSH
15749: LD_INT 112
15751: PUSH
15752: LD_INT 113
15754: PUSH
15755: LD_INT 114
15757: PUSH
15758: LD_INT 115
15760: PUSH
15761: LD_INT 116
15763: PUSH
15764: LD_INT 117
15766: PUSH
15767: LD_INT 118
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: ST_TO_ADDR
15788: GO 16031
15790: LD_INT 19
15792: DOUBLE
15793: EQUAL
15794: IFTRUE 15798
15796: GO 16030
15798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15799: LD_ADDR_VAR 0 2
15803: PUSH
15804: LD_INT 1
15806: PUSH
15807: LD_INT 2
15809: PUSH
15810: LD_INT 3
15812: PUSH
15813: LD_INT 4
15815: PUSH
15816: LD_INT 5
15818: PUSH
15819: LD_INT 6
15821: PUSH
15822: LD_INT 7
15824: PUSH
15825: LD_INT 8
15827: PUSH
15828: LD_INT 9
15830: PUSH
15831: LD_INT 10
15833: PUSH
15834: LD_INT 11
15836: PUSH
15837: LD_INT 12
15839: PUSH
15840: LD_INT 13
15842: PUSH
15843: LD_INT 14
15845: PUSH
15846: LD_INT 15
15848: PUSH
15849: LD_INT 16
15851: PUSH
15852: LD_INT 17
15854: PUSH
15855: LD_INT 18
15857: PUSH
15858: LD_INT 19
15860: PUSH
15861: LD_INT 20
15863: PUSH
15864: LD_INT 21
15866: PUSH
15867: LD_INT 22
15869: PUSH
15870: LD_INT 23
15872: PUSH
15873: LD_INT 24
15875: PUSH
15876: LD_INT 25
15878: PUSH
15879: LD_INT 26
15881: PUSH
15882: LD_INT 27
15884: PUSH
15885: LD_INT 28
15887: PUSH
15888: LD_INT 29
15890: PUSH
15891: LD_INT 30
15893: PUSH
15894: LD_INT 31
15896: PUSH
15897: LD_INT 32
15899: PUSH
15900: LD_INT 33
15902: PUSH
15903: LD_INT 34
15905: PUSH
15906: LD_INT 35
15908: PUSH
15909: LD_INT 36
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 101
15952: PUSH
15953: LD_INT 102
15955: PUSH
15956: LD_INT 103
15958: PUSH
15959: LD_INT 104
15961: PUSH
15962: LD_INT 105
15964: PUSH
15965: LD_INT 106
15967: PUSH
15968: LD_INT 107
15970: PUSH
15971: LD_INT 108
15973: PUSH
15974: LD_INT 109
15976: PUSH
15977: LD_INT 110
15979: PUSH
15980: LD_INT 111
15982: PUSH
15983: LD_INT 112
15985: PUSH
15986: LD_INT 113
15988: PUSH
15989: LD_INT 114
15991: PUSH
15992: LD_INT 115
15994: PUSH
15995: LD_INT 116
15997: PUSH
15998: LD_INT 117
16000: PUSH
16001: LD_INT 118
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: ST_TO_ADDR
16028: GO 16031
16030: POP
// end else
16031: GO 16262
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16033: LD_ADDR_VAR 0 2
16037: PUSH
16038: LD_INT 1
16040: PUSH
16041: LD_INT 2
16043: PUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 4
16049: PUSH
16050: LD_INT 5
16052: PUSH
16053: LD_INT 6
16055: PUSH
16056: LD_INT 7
16058: PUSH
16059: LD_INT 8
16061: PUSH
16062: LD_INT 9
16064: PUSH
16065: LD_INT 10
16067: PUSH
16068: LD_INT 11
16070: PUSH
16071: LD_INT 12
16073: PUSH
16074: LD_INT 13
16076: PUSH
16077: LD_INT 14
16079: PUSH
16080: LD_INT 15
16082: PUSH
16083: LD_INT 16
16085: PUSH
16086: LD_INT 17
16088: PUSH
16089: LD_INT 18
16091: PUSH
16092: LD_INT 19
16094: PUSH
16095: LD_INT 20
16097: PUSH
16098: LD_INT 21
16100: PUSH
16101: LD_INT 22
16103: PUSH
16104: LD_INT 23
16106: PUSH
16107: LD_INT 24
16109: PUSH
16110: LD_INT 25
16112: PUSH
16113: LD_INT 26
16115: PUSH
16116: LD_INT 27
16118: PUSH
16119: LD_INT 28
16121: PUSH
16122: LD_INT 29
16124: PUSH
16125: LD_INT 30
16127: PUSH
16128: LD_INT 31
16130: PUSH
16131: LD_INT 32
16133: PUSH
16134: LD_INT 33
16136: PUSH
16137: LD_INT 34
16139: PUSH
16140: LD_INT 35
16142: PUSH
16143: LD_INT 36
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 101
16186: PUSH
16187: LD_INT 102
16189: PUSH
16190: LD_INT 103
16192: PUSH
16193: LD_INT 104
16195: PUSH
16196: LD_INT 105
16198: PUSH
16199: LD_INT 106
16201: PUSH
16202: LD_INT 107
16204: PUSH
16205: LD_INT 108
16207: PUSH
16208: LD_INT 109
16210: PUSH
16211: LD_INT 110
16213: PUSH
16214: LD_INT 111
16216: PUSH
16217: LD_INT 112
16219: PUSH
16220: LD_INT 113
16222: PUSH
16223: LD_INT 114
16225: PUSH
16226: LD_INT 115
16228: PUSH
16229: LD_INT 116
16231: PUSH
16232: LD_INT 117
16234: PUSH
16235: LD_INT 118
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: ST_TO_ADDR
// if result then
16262: LD_VAR 0 2
16266: IFFALSE 17052
// begin normal :=  ;
16268: LD_ADDR_VAR 0 5
16272: PUSH
16273: LD_STRING 
16275: ST_TO_ADDR
// hardcore :=  ;
16276: LD_ADDR_VAR 0 6
16280: PUSH
16281: LD_STRING 
16283: ST_TO_ADDR
// active :=  ;
16284: LD_ADDR_VAR 0 7
16288: PUSH
16289: LD_STRING 
16291: ST_TO_ADDR
// for i = 1 to normalCounter do
16292: LD_ADDR_VAR 0 8
16296: PUSH
16297: DOUBLE
16298: LD_INT 1
16300: DEC
16301: ST_TO_ADDR
16302: LD_EXP 34
16306: PUSH
16307: FOR_TO
16308: IFFALSE 16409
// begin tmp := 0 ;
16310: LD_ADDR_VAR 0 3
16314: PUSH
16315: LD_STRING 0
16317: ST_TO_ADDR
// if result [ 1 ] then
16318: LD_VAR 0 2
16322: PUSH
16323: LD_INT 1
16325: ARRAY
16326: IFFALSE 16391
// if result [ 1 ] [ 1 ] = i then
16328: LD_VAR 0 2
16332: PUSH
16333: LD_INT 1
16335: ARRAY
16336: PUSH
16337: LD_INT 1
16339: ARRAY
16340: PUSH
16341: LD_VAR 0 8
16345: EQUAL
16346: IFFALSE 16391
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16348: LD_ADDR_VAR 0 2
16352: PUSH
16353: LD_VAR 0 2
16357: PPUSH
16358: LD_INT 1
16360: PPUSH
16361: LD_VAR 0 2
16365: PUSH
16366: LD_INT 1
16368: ARRAY
16369: PPUSH
16370: LD_INT 1
16372: PPUSH
16373: CALL_OW 3
16377: PPUSH
16378: CALL_OW 1
16382: ST_TO_ADDR
// tmp := 1 ;
16383: LD_ADDR_VAR 0 3
16387: PUSH
16388: LD_STRING 1
16390: ST_TO_ADDR
// end ; normal := normal & tmp ;
16391: LD_ADDR_VAR 0 5
16395: PUSH
16396: LD_VAR 0 5
16400: PUSH
16401: LD_VAR 0 3
16405: STR
16406: ST_TO_ADDR
// end ;
16407: GO 16307
16409: POP
16410: POP
// for i = 1 to hardcoreCounter do
16411: LD_ADDR_VAR 0 8
16415: PUSH
16416: DOUBLE
16417: LD_INT 1
16419: DEC
16420: ST_TO_ADDR
16421: LD_EXP 35
16425: PUSH
16426: FOR_TO
16427: IFFALSE 16532
// begin tmp := 0 ;
16429: LD_ADDR_VAR 0 3
16433: PUSH
16434: LD_STRING 0
16436: ST_TO_ADDR
// if result [ 2 ] then
16437: LD_VAR 0 2
16441: PUSH
16442: LD_INT 2
16444: ARRAY
16445: IFFALSE 16514
// if result [ 2 ] [ 1 ] = 100 + i then
16447: LD_VAR 0 2
16451: PUSH
16452: LD_INT 2
16454: ARRAY
16455: PUSH
16456: LD_INT 1
16458: ARRAY
16459: PUSH
16460: LD_INT 100
16462: PUSH
16463: LD_VAR 0 8
16467: PLUS
16468: EQUAL
16469: IFFALSE 16514
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16471: LD_ADDR_VAR 0 2
16475: PUSH
16476: LD_VAR 0 2
16480: PPUSH
16481: LD_INT 2
16483: PPUSH
16484: LD_VAR 0 2
16488: PUSH
16489: LD_INT 2
16491: ARRAY
16492: PPUSH
16493: LD_INT 1
16495: PPUSH
16496: CALL_OW 3
16500: PPUSH
16501: CALL_OW 1
16505: ST_TO_ADDR
// tmp := 1 ;
16506: LD_ADDR_VAR 0 3
16510: PUSH
16511: LD_STRING 1
16513: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16514: LD_ADDR_VAR 0 6
16518: PUSH
16519: LD_VAR 0 6
16523: PUSH
16524: LD_VAR 0 3
16528: STR
16529: ST_TO_ADDR
// end ;
16530: GO 16426
16532: POP
16533: POP
// if isGameLoad then
16534: LD_VAR 0 1
16538: IFFALSE 17013
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16540: LD_ADDR_VAR 0 4
16544: PUSH
16545: LD_EXP 38
16549: PUSH
16550: LD_EXP 37
16554: PUSH
16555: LD_EXP 39
16559: PUSH
16560: LD_EXP 36
16564: PUSH
16565: LD_EXP 40
16569: PUSH
16570: LD_EXP 41
16574: PUSH
16575: LD_EXP 42
16579: PUSH
16580: LD_EXP 43
16584: PUSH
16585: LD_EXP 44
16589: PUSH
16590: LD_EXP 45
16594: PUSH
16595: LD_EXP 46
16599: PUSH
16600: LD_EXP 47
16604: PUSH
16605: LD_EXP 48
16609: PUSH
16610: LD_EXP 49
16614: PUSH
16615: LD_EXP 57
16619: PUSH
16620: LD_EXP 58
16624: PUSH
16625: LD_EXP 59
16629: PUSH
16630: LD_EXP 60
16634: PUSH
16635: LD_EXP 62
16639: PUSH
16640: LD_EXP 63
16644: PUSH
16645: LD_EXP 64
16649: PUSH
16650: LD_EXP 67
16654: PUSH
16655: LD_EXP 69
16659: PUSH
16660: LD_EXP 70
16664: PUSH
16665: LD_EXP 71
16669: PUSH
16670: LD_EXP 73
16674: PUSH
16675: LD_EXP 74
16679: PUSH
16680: LD_EXP 77
16684: PUSH
16685: LD_EXP 78
16689: PUSH
16690: LD_EXP 79
16694: PUSH
16695: LD_EXP 80
16699: PUSH
16700: LD_EXP 81
16704: PUSH
16705: LD_EXP 82
16709: PUSH
16710: LD_EXP 83
16714: PUSH
16715: LD_EXP 84
16719: PUSH
16720: LD_EXP 85
16724: PUSH
16725: LD_EXP 50
16729: PUSH
16730: LD_EXP 51
16734: PUSH
16735: LD_EXP 54
16739: PUSH
16740: LD_EXP 55
16744: PUSH
16745: LD_EXP 56
16749: PUSH
16750: LD_EXP 52
16754: PUSH
16755: LD_EXP 53
16759: PUSH
16760: LD_EXP 61
16764: PUSH
16765: LD_EXP 65
16769: PUSH
16770: LD_EXP 66
16774: PUSH
16775: LD_EXP 68
16779: PUSH
16780: LD_EXP 72
16784: PUSH
16785: LD_EXP 75
16789: PUSH
16790: LD_EXP 76
16794: PUSH
16795: LD_EXP 86
16799: PUSH
16800: LD_EXP 87
16804: PUSH
16805: LD_EXP 88
16809: PUSH
16810: LD_EXP 89
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: ST_TO_ADDR
// tmp :=  ;
16871: LD_ADDR_VAR 0 3
16875: PUSH
16876: LD_STRING 
16878: ST_TO_ADDR
// for i = 1 to normalCounter do
16879: LD_ADDR_VAR 0 8
16883: PUSH
16884: DOUBLE
16885: LD_INT 1
16887: DEC
16888: ST_TO_ADDR
16889: LD_EXP 34
16893: PUSH
16894: FOR_TO
16895: IFFALSE 16931
// begin if flags [ i ] then
16897: LD_VAR 0 4
16901: PUSH
16902: LD_VAR 0 8
16906: ARRAY
16907: IFFALSE 16929
// tmp := tmp & i & ; ;
16909: LD_ADDR_VAR 0 3
16913: PUSH
16914: LD_VAR 0 3
16918: PUSH
16919: LD_VAR 0 8
16923: STR
16924: PUSH
16925: LD_STRING ;
16927: STR
16928: ST_TO_ADDR
// end ;
16929: GO 16894
16931: POP
16932: POP
// for i = 1 to hardcoreCounter do
16933: LD_ADDR_VAR 0 8
16937: PUSH
16938: DOUBLE
16939: LD_INT 1
16941: DEC
16942: ST_TO_ADDR
16943: LD_EXP 35
16947: PUSH
16948: FOR_TO
16949: IFFALSE 16995
// begin if flags [ normalCounter + i ] then
16951: LD_VAR 0 4
16955: PUSH
16956: LD_EXP 34
16960: PUSH
16961: LD_VAR 0 8
16965: PLUS
16966: ARRAY
16967: IFFALSE 16993
// tmp := tmp & ( 100 + i ) & ; ;
16969: LD_ADDR_VAR 0 3
16973: PUSH
16974: LD_VAR 0 3
16978: PUSH
16979: LD_INT 100
16981: PUSH
16982: LD_VAR 0 8
16986: PLUS
16987: STR
16988: PUSH
16989: LD_STRING ;
16991: STR
16992: ST_TO_ADDR
// end ;
16993: GO 16948
16995: POP
16996: POP
// if tmp then
16997: LD_VAR 0 3
17001: IFFALSE 17013
// active := tmp ;
17003: LD_ADDR_VAR 0 7
17007: PUSH
17008: LD_VAR 0 3
17012: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17013: LD_STRING getStreamItemsFromMission("
17015: PUSH
17016: LD_VAR 0 5
17020: STR
17021: PUSH
17022: LD_STRING ","
17024: STR
17025: PUSH
17026: LD_VAR 0 6
17030: STR
17031: PUSH
17032: LD_STRING ","
17034: STR
17035: PUSH
17036: LD_VAR 0 7
17040: STR
17041: PUSH
17042: LD_STRING ")
17044: STR
17045: PPUSH
17046: CALL_OW 559
// end else
17050: GO 17059
// ToLua ( getStreamItemsFromMission("","","") ) ;
17052: LD_STRING getStreamItemsFromMission("","","")
17054: PPUSH
17055: CALL_OW 559
// end ;
17059: LD_VAR 0 2
17063: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17064: LD_EXP 33
17068: PUSH
17069: LD_EXP 38
17073: AND
17074: IFFALSE 17198
17076: GO 17078
17078: DISABLE
17079: LD_INT 0
17081: PPUSH
17082: PPUSH
// begin enable ;
17083: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17084: LD_ADDR_VAR 0 2
17088: PUSH
17089: LD_INT 22
17091: PUSH
17092: LD_OWVAR 2
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 2
17103: PUSH
17104: LD_INT 34
17106: PUSH
17107: LD_INT 7
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 34
17116: PUSH
17117: LD_INT 45
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 34
17126: PUSH
17127: LD_INT 28
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 34
17136: PUSH
17137: LD_INT 47
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PPUSH
17155: CALL_OW 69
17159: ST_TO_ADDR
// if not tmp then
17160: LD_VAR 0 2
17164: NOT
17165: IFFALSE 17169
// exit ;
17167: GO 17198
// for i in tmp do
17169: LD_ADDR_VAR 0 1
17173: PUSH
17174: LD_VAR 0 2
17178: PUSH
17179: FOR_IN
17180: IFFALSE 17196
// begin SetLives ( i , 0 ) ;
17182: LD_VAR 0 1
17186: PPUSH
17187: LD_INT 0
17189: PPUSH
17190: CALL_OW 234
// end ;
17194: GO 17179
17196: POP
17197: POP
// end ;
17198: PPOPN 2
17200: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17201: LD_EXP 33
17205: PUSH
17206: LD_EXP 39
17210: AND
17211: IFFALSE 17295
17213: GO 17215
17215: DISABLE
17216: LD_INT 0
17218: PPUSH
17219: PPUSH
// begin enable ;
17220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17221: LD_ADDR_VAR 0 2
17225: PUSH
17226: LD_INT 22
17228: PUSH
17229: LD_OWVAR 2
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 32
17240: PUSH
17241: LD_INT 3
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PPUSH
17252: CALL_OW 69
17256: ST_TO_ADDR
// if not tmp then
17257: LD_VAR 0 2
17261: NOT
17262: IFFALSE 17266
// exit ;
17264: GO 17295
// for i in tmp do
17266: LD_ADDR_VAR 0 1
17270: PUSH
17271: LD_VAR 0 2
17275: PUSH
17276: FOR_IN
17277: IFFALSE 17293
// begin SetLives ( i , 0 ) ;
17279: LD_VAR 0 1
17283: PPUSH
17284: LD_INT 0
17286: PPUSH
17287: CALL_OW 234
// end ;
17291: GO 17276
17293: POP
17294: POP
// end ;
17295: PPOPN 2
17297: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17298: LD_EXP 33
17302: PUSH
17303: LD_EXP 36
17307: AND
17308: IFFALSE 17401
17310: GO 17312
17312: DISABLE
17313: LD_INT 0
17315: PPUSH
// begin enable ;
17316: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17317: LD_ADDR_VAR 0 1
17321: PUSH
17322: LD_INT 22
17324: PUSH
17325: LD_OWVAR 2
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 2
17336: PUSH
17337: LD_INT 25
17339: PUSH
17340: LD_INT 5
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 25
17349: PUSH
17350: LD_INT 9
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 25
17359: PUSH
17360: LD_INT 8
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PPUSH
17377: CALL_OW 69
17381: PUSH
17382: FOR_IN
17383: IFFALSE 17399
// begin SetClass ( i , 1 ) ;
17385: LD_VAR 0 1
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 336
// end ;
17397: GO 17382
17399: POP
17400: POP
// end ;
17401: PPOPN 1
17403: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17404: LD_EXP 33
17408: PUSH
17409: LD_EXP 37
17413: AND
17414: PUSH
17415: LD_OWVAR 65
17419: PUSH
17420: LD_INT 7
17422: LESS
17423: AND
17424: IFFALSE 17438
17426: GO 17428
17428: DISABLE
// begin enable ;
17429: ENABLE
// game_speed := 7 ;
17430: LD_ADDR_OWVAR 65
17434: PUSH
17435: LD_INT 7
17437: ST_TO_ADDR
// end ;
17438: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17439: LD_EXP 33
17443: PUSH
17444: LD_EXP 40
17448: AND
17449: IFFALSE 17651
17451: GO 17453
17453: DISABLE
17454: LD_INT 0
17456: PPUSH
17457: PPUSH
17458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17459: LD_ADDR_VAR 0 3
17463: PUSH
17464: LD_INT 81
17466: PUSH
17467: LD_OWVAR 2
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 21
17478: PUSH
17479: LD_INT 1
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PPUSH
17490: CALL_OW 69
17494: ST_TO_ADDR
// if not tmp then
17495: LD_VAR 0 3
17499: NOT
17500: IFFALSE 17504
// exit ;
17502: GO 17651
// if tmp > 5 then
17504: LD_VAR 0 3
17508: PUSH
17509: LD_INT 5
17511: GREATER
17512: IFFALSE 17524
// k := 5 else
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: LD_INT 5
17521: ST_TO_ADDR
17522: GO 17534
// k := tmp ;
17524: LD_ADDR_VAR 0 2
17528: PUSH
17529: LD_VAR 0 3
17533: ST_TO_ADDR
// for i := 1 to k do
17534: LD_ADDR_VAR 0 1
17538: PUSH
17539: DOUBLE
17540: LD_INT 1
17542: DEC
17543: ST_TO_ADDR
17544: LD_VAR 0 2
17548: PUSH
17549: FOR_TO
17550: IFFALSE 17649
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17552: LD_VAR 0 3
17556: PUSH
17557: LD_VAR 0 1
17561: ARRAY
17562: PPUSH
17563: LD_VAR 0 1
17567: PUSH
17568: LD_INT 4
17570: MOD
17571: PUSH
17572: LD_INT 1
17574: PLUS
17575: PPUSH
17576: CALL_OW 259
17580: PUSH
17581: LD_INT 10
17583: LESS
17584: IFFALSE 17647
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17586: LD_VAR 0 3
17590: PUSH
17591: LD_VAR 0 1
17595: ARRAY
17596: PPUSH
17597: LD_VAR 0 1
17601: PUSH
17602: LD_INT 4
17604: MOD
17605: PUSH
17606: LD_INT 1
17608: PLUS
17609: PPUSH
17610: LD_VAR 0 3
17614: PUSH
17615: LD_VAR 0 1
17619: ARRAY
17620: PPUSH
17621: LD_VAR 0 1
17625: PUSH
17626: LD_INT 4
17628: MOD
17629: PUSH
17630: LD_INT 1
17632: PLUS
17633: PPUSH
17634: CALL_OW 259
17638: PUSH
17639: LD_INT 1
17641: PLUS
17642: PPUSH
17643: CALL_OW 237
17647: GO 17549
17649: POP
17650: POP
// end ;
17651: PPOPN 3
17653: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17654: LD_EXP 33
17658: PUSH
17659: LD_EXP 41
17663: AND
17664: IFFALSE 17684
17666: GO 17668
17668: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17669: LD_INT 4
17671: PPUSH
17672: LD_OWVAR 2
17676: PPUSH
17677: LD_INT 0
17679: PPUSH
17680: CALL_OW 324
17684: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17685: LD_EXP 33
17689: PUSH
17690: LD_EXP 70
17694: AND
17695: IFFALSE 17715
17697: GO 17699
17699: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17700: LD_INT 19
17702: PPUSH
17703: LD_OWVAR 2
17707: PPUSH
17708: LD_INT 0
17710: PPUSH
17711: CALL_OW 324
17715: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17716: LD_EXP 33
17720: PUSH
17721: LD_EXP 42
17725: AND
17726: IFFALSE 17828
17728: GO 17730
17730: DISABLE
17731: LD_INT 0
17733: PPUSH
17734: PPUSH
// begin enable ;
17735: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17736: LD_ADDR_VAR 0 2
17740: PUSH
17741: LD_INT 22
17743: PUSH
17744: LD_OWVAR 2
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 2
17755: PUSH
17756: LD_INT 34
17758: PUSH
17759: LD_INT 11
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 34
17768: PUSH
17769: LD_INT 30
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PPUSH
17785: CALL_OW 69
17789: ST_TO_ADDR
// if not tmp then
17790: LD_VAR 0 2
17794: NOT
17795: IFFALSE 17799
// exit ;
17797: GO 17828
// for i in tmp do
17799: LD_ADDR_VAR 0 1
17803: PUSH
17804: LD_VAR 0 2
17808: PUSH
17809: FOR_IN
17810: IFFALSE 17826
// begin SetLives ( i , 0 ) ;
17812: LD_VAR 0 1
17816: PPUSH
17817: LD_INT 0
17819: PPUSH
17820: CALL_OW 234
// end ;
17824: GO 17809
17826: POP
17827: POP
// end ;
17828: PPOPN 2
17830: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17831: LD_EXP 33
17835: PUSH
17836: LD_EXP 43
17840: AND
17841: IFFALSE 17861
17843: GO 17845
17845: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17846: LD_INT 32
17848: PPUSH
17849: LD_OWVAR 2
17853: PPUSH
17854: LD_INT 0
17856: PPUSH
17857: CALL_OW 324
17861: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17862: LD_EXP 33
17866: PUSH
17867: LD_EXP 44
17871: AND
17872: IFFALSE 18053
17874: GO 17876
17876: DISABLE
17877: LD_INT 0
17879: PPUSH
17880: PPUSH
17881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17882: LD_ADDR_VAR 0 2
17886: PUSH
17887: LD_INT 22
17889: PUSH
17890: LD_OWVAR 2
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 33
17901: PUSH
17902: LD_INT 3
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PPUSH
17913: CALL_OW 69
17917: ST_TO_ADDR
// if not tmp then
17918: LD_VAR 0 2
17922: NOT
17923: IFFALSE 17927
// exit ;
17925: GO 18053
// side := 0 ;
17927: LD_ADDR_VAR 0 3
17931: PUSH
17932: LD_INT 0
17934: ST_TO_ADDR
// for i := 1 to 8 do
17935: LD_ADDR_VAR 0 1
17939: PUSH
17940: DOUBLE
17941: LD_INT 1
17943: DEC
17944: ST_TO_ADDR
17945: LD_INT 8
17947: PUSH
17948: FOR_TO
17949: IFFALSE 17997
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17951: LD_OWVAR 2
17955: PUSH
17956: LD_VAR 0 1
17960: NONEQUAL
17961: PUSH
17962: LD_OWVAR 2
17966: PPUSH
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 81
17976: PUSH
17977: LD_INT 2
17979: EQUAL
17980: AND
17981: IFFALSE 17995
// begin side := i ;
17983: LD_ADDR_VAR 0 3
17987: PUSH
17988: LD_VAR 0 1
17992: ST_TO_ADDR
// break ;
17993: GO 17997
// end ;
17995: GO 17948
17997: POP
17998: POP
// if not side then
17999: LD_VAR 0 3
18003: NOT
18004: IFFALSE 18008
// exit ;
18006: GO 18053
// for i := 1 to tmp do
18008: LD_ADDR_VAR 0 1
18012: PUSH
18013: DOUBLE
18014: LD_INT 1
18016: DEC
18017: ST_TO_ADDR
18018: LD_VAR 0 2
18022: PUSH
18023: FOR_TO
18024: IFFALSE 18051
// if Prob ( 60 ) then
18026: LD_INT 60
18028: PPUSH
18029: CALL_OW 13
18033: IFFALSE 18049
// SetSide ( i , side ) ;
18035: LD_VAR 0 1
18039: PPUSH
18040: LD_VAR 0 3
18044: PPUSH
18045: CALL_OW 235
18049: GO 18023
18051: POP
18052: POP
// end ;
18053: PPOPN 3
18055: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18056: LD_EXP 33
18060: PUSH
18061: LD_EXP 46
18065: AND
18066: IFFALSE 18185
18068: GO 18070
18070: DISABLE
18071: LD_INT 0
18073: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18074: LD_ADDR_VAR 0 1
18078: PUSH
18079: LD_INT 22
18081: PUSH
18082: LD_OWVAR 2
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 21
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 3
18103: PUSH
18104: LD_INT 23
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 69
18127: PUSH
18128: FOR_IN
18129: IFFALSE 18183
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18131: LD_VAR 0 1
18135: PPUSH
18136: CALL_OW 257
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: LD_INT 2
18146: PUSH
18147: LD_INT 3
18149: PUSH
18150: LD_INT 4
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: IN
18159: IFFALSE 18181
// SetClass ( un , rand ( 1 , 4 ) ) ;
18161: LD_VAR 0 1
18165: PPUSH
18166: LD_INT 1
18168: PPUSH
18169: LD_INT 4
18171: PPUSH
18172: CALL_OW 12
18176: PPUSH
18177: CALL_OW 336
18181: GO 18128
18183: POP
18184: POP
// end ;
18185: PPOPN 1
18187: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18188: LD_EXP 33
18192: PUSH
18193: LD_EXP 45
18197: AND
18198: IFFALSE 18277
18200: GO 18202
18202: DISABLE
18203: LD_INT 0
18205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18206: LD_ADDR_VAR 0 1
18210: PUSH
18211: LD_INT 22
18213: PUSH
18214: LD_OWVAR 2
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 21
18225: PUSH
18226: LD_INT 3
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PPUSH
18237: CALL_OW 69
18241: ST_TO_ADDR
// if not tmp then
18242: LD_VAR 0 1
18246: NOT
18247: IFFALSE 18251
// exit ;
18249: GO 18277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18251: LD_VAR 0 1
18255: PUSH
18256: LD_INT 1
18258: PPUSH
18259: LD_VAR 0 1
18263: PPUSH
18264: CALL_OW 12
18268: ARRAY
18269: PPUSH
18270: LD_INT 100
18272: PPUSH
18273: CALL_OW 234
// end ;
18277: PPOPN 1
18279: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18280: LD_EXP 33
18284: PUSH
18285: LD_EXP 47
18289: AND
18290: IFFALSE 18388
18292: GO 18294
18294: DISABLE
18295: LD_INT 0
18297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18298: LD_ADDR_VAR 0 1
18302: PUSH
18303: LD_INT 22
18305: PUSH
18306: LD_OWVAR 2
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 21
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PPUSH
18329: CALL_OW 69
18333: ST_TO_ADDR
// if not tmp then
18334: LD_VAR 0 1
18338: NOT
18339: IFFALSE 18343
// exit ;
18341: GO 18388
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18343: LD_VAR 0 1
18347: PUSH
18348: LD_INT 1
18350: PPUSH
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 12
18360: ARRAY
18361: PPUSH
18362: LD_INT 1
18364: PPUSH
18365: LD_INT 4
18367: PPUSH
18368: CALL_OW 12
18372: PPUSH
18373: LD_INT 3000
18375: PPUSH
18376: LD_INT 9000
18378: PPUSH
18379: CALL_OW 12
18383: PPUSH
18384: CALL_OW 492
// end ;
18388: PPOPN 1
18390: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18391: LD_EXP 33
18395: PUSH
18396: LD_EXP 48
18400: AND
18401: IFFALSE 18421
18403: GO 18405
18405: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18406: LD_INT 1
18408: PPUSH
18409: LD_OWVAR 2
18413: PPUSH
18414: LD_INT 0
18416: PPUSH
18417: CALL_OW 324
18421: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18422: LD_EXP 33
18426: PUSH
18427: LD_EXP 49
18431: AND
18432: IFFALSE 18515
18434: GO 18436
18436: DISABLE
18437: LD_INT 0
18439: PPUSH
18440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18441: LD_ADDR_VAR 0 2
18445: PUSH
18446: LD_INT 22
18448: PUSH
18449: LD_OWVAR 2
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 21
18460: PUSH
18461: LD_INT 3
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PPUSH
18472: CALL_OW 69
18476: ST_TO_ADDR
// if not tmp then
18477: LD_VAR 0 2
18481: NOT
18482: IFFALSE 18486
// exit ;
18484: GO 18515
// for i in tmp do
18486: LD_ADDR_VAR 0 1
18490: PUSH
18491: LD_VAR 0 2
18495: PUSH
18496: FOR_IN
18497: IFFALSE 18513
// SetBLevel ( i , 10 ) ;
18499: LD_VAR 0 1
18503: PPUSH
18504: LD_INT 10
18506: PPUSH
18507: CALL_OW 241
18511: GO 18496
18513: POP
18514: POP
// end ;
18515: PPOPN 2
18517: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18518: LD_EXP 33
18522: PUSH
18523: LD_EXP 50
18527: AND
18528: IFFALSE 18639
18530: GO 18532
18532: DISABLE
18533: LD_INT 0
18535: PPUSH
18536: PPUSH
18537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18538: LD_ADDR_VAR 0 3
18542: PUSH
18543: LD_INT 22
18545: PUSH
18546: LD_OWVAR 2
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 25
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PPUSH
18569: CALL_OW 69
18573: ST_TO_ADDR
// if not tmp then
18574: LD_VAR 0 3
18578: NOT
18579: IFFALSE 18583
// exit ;
18581: GO 18639
// un := tmp [ rand ( 1 , tmp ) ] ;
18583: LD_ADDR_VAR 0 2
18587: PUSH
18588: LD_VAR 0 3
18592: PUSH
18593: LD_INT 1
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: CALL_OW 12
18605: ARRAY
18606: ST_TO_ADDR
// if Crawls ( un ) then
18607: LD_VAR 0 2
18611: PPUSH
18612: CALL_OW 318
18616: IFFALSE 18627
// ComWalk ( un ) ;
18618: LD_VAR 0 2
18622: PPUSH
18623: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18627: LD_VAR 0 2
18631: PPUSH
18632: LD_INT 5
18634: PPUSH
18635: CALL_OW 336
// end ;
18639: PPOPN 3
18641: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18642: LD_EXP 33
18646: PUSH
18647: LD_EXP 51
18651: AND
18652: PUSH
18653: LD_OWVAR 67
18657: PUSH
18658: LD_INT 4
18660: LESS
18661: AND
18662: IFFALSE 18681
18664: GO 18666
18666: DISABLE
// begin Difficulty := Difficulty + 1 ;
18667: LD_ADDR_OWVAR 67
18671: PUSH
18672: LD_OWVAR 67
18676: PUSH
18677: LD_INT 1
18679: PLUS
18680: ST_TO_ADDR
// end ;
18681: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18682: LD_EXP 33
18686: PUSH
18687: LD_EXP 52
18691: AND
18692: IFFALSE 18795
18694: GO 18696
18696: DISABLE
18697: LD_INT 0
18699: PPUSH
// begin for i := 1 to 5 do
18700: LD_ADDR_VAR 0 1
18704: PUSH
18705: DOUBLE
18706: LD_INT 1
18708: DEC
18709: ST_TO_ADDR
18710: LD_INT 5
18712: PUSH
18713: FOR_TO
18714: IFFALSE 18793
// begin uc_nation := nation_nature ;
18716: LD_ADDR_OWVAR 21
18720: PUSH
18721: LD_INT 0
18723: ST_TO_ADDR
// uc_side := 0 ;
18724: LD_ADDR_OWVAR 20
18728: PUSH
18729: LD_INT 0
18731: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18732: LD_ADDR_OWVAR 29
18736: PUSH
18737: LD_INT 12
18739: PUSH
18740: LD_INT 12
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: ST_TO_ADDR
// hc_agressivity := 20 ;
18747: LD_ADDR_OWVAR 35
18751: PUSH
18752: LD_INT 20
18754: ST_TO_ADDR
// hc_class := class_tiger ;
18755: LD_ADDR_OWVAR 28
18759: PUSH
18760: LD_INT 14
18762: ST_TO_ADDR
// hc_gallery :=  ;
18763: LD_ADDR_OWVAR 33
18767: PUSH
18768: LD_STRING 
18770: ST_TO_ADDR
// hc_name :=  ;
18771: LD_ADDR_OWVAR 26
18775: PUSH
18776: LD_STRING 
18778: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18779: CALL_OW 44
18783: PPUSH
18784: LD_INT 0
18786: PPUSH
18787: CALL_OW 51
// end ;
18791: GO 18713
18793: POP
18794: POP
// end ;
18795: PPOPN 1
18797: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18798: LD_EXP 33
18802: PUSH
18803: LD_EXP 53
18807: AND
18808: IFFALSE 18817
18810: GO 18812
18812: DISABLE
// StreamSibBomb ;
18813: CALL 18818 0 0
18817: END
// export function StreamSibBomb ; var i , x , y ; begin
18818: LD_INT 0
18820: PPUSH
18821: PPUSH
18822: PPUSH
18823: PPUSH
// result := false ;
18824: LD_ADDR_VAR 0 1
18828: PUSH
18829: LD_INT 0
18831: ST_TO_ADDR
// for i := 1 to 16 do
18832: LD_ADDR_VAR 0 2
18836: PUSH
18837: DOUBLE
18838: LD_INT 1
18840: DEC
18841: ST_TO_ADDR
18842: LD_INT 16
18844: PUSH
18845: FOR_TO
18846: IFFALSE 19045
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18848: LD_ADDR_VAR 0 3
18852: PUSH
18853: LD_INT 10
18855: PUSH
18856: LD_INT 20
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: LD_INT 40
18864: PUSH
18865: LD_INT 50
18867: PUSH
18868: LD_INT 60
18870: PUSH
18871: LD_INT 70
18873: PUSH
18874: LD_INT 80
18876: PUSH
18877: LD_INT 90
18879: PUSH
18880: LD_INT 100
18882: PUSH
18883: LD_INT 110
18885: PUSH
18886: LD_INT 120
18888: PUSH
18889: LD_INT 130
18891: PUSH
18892: LD_INT 140
18894: PUSH
18895: LD_INT 150
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 1
18917: PPUSH
18918: LD_INT 15
18920: PPUSH
18921: CALL_OW 12
18925: ARRAY
18926: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18927: LD_ADDR_VAR 0 4
18931: PUSH
18932: LD_INT 10
18934: PUSH
18935: LD_INT 20
18937: PUSH
18938: LD_INT 30
18940: PUSH
18941: LD_INT 40
18943: PUSH
18944: LD_INT 50
18946: PUSH
18947: LD_INT 60
18949: PUSH
18950: LD_INT 70
18952: PUSH
18953: LD_INT 80
18955: PUSH
18956: LD_INT 90
18958: PUSH
18959: LD_INT 100
18961: PUSH
18962: LD_INT 110
18964: PUSH
18965: LD_INT 120
18967: PUSH
18968: LD_INT 130
18970: PUSH
18971: LD_INT 140
18973: PUSH
18974: LD_INT 150
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PPUSH
18997: LD_INT 15
18999: PPUSH
19000: CALL_OW 12
19004: ARRAY
19005: ST_TO_ADDR
// if ValidHex ( x , y ) then
19006: LD_VAR 0 3
19010: PPUSH
19011: LD_VAR 0 4
19015: PPUSH
19016: CALL_OW 488
19020: IFFALSE 19043
// begin result := [ x , y ] ;
19022: LD_ADDR_VAR 0 1
19026: PUSH
19027: LD_VAR 0 3
19031: PUSH
19032: LD_VAR 0 4
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: ST_TO_ADDR
// break ;
19041: GO 19045
// end ; end ;
19043: GO 18845
19045: POP
19046: POP
// if result then
19047: LD_VAR 0 1
19051: IFFALSE 19111
// begin ToLua ( playSibBomb() ) ;
19053: LD_STRING playSibBomb()
19055: PPUSH
19056: CALL_OW 559
// wait ( 0 0$14 ) ;
19060: LD_INT 490
19062: PPUSH
19063: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19067: LD_VAR 0 1
19071: PUSH
19072: LD_INT 1
19074: ARRAY
19075: PPUSH
19076: LD_VAR 0 1
19080: PUSH
19081: LD_INT 2
19083: ARRAY
19084: PPUSH
19085: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19089: LD_VAR 0 1
19093: PUSH
19094: LD_INT 1
19096: ARRAY
19097: PPUSH
19098: LD_VAR 0 1
19102: PUSH
19103: LD_INT 2
19105: ARRAY
19106: PPUSH
19107: CALL_OW 429
// end ; end ;
19111: LD_VAR 0 1
19115: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19116: LD_EXP 33
19120: PUSH
19121: LD_EXP 55
19125: AND
19126: IFFALSE 19138
19128: GO 19130
19130: DISABLE
// YouLost (  ) ;
19131: LD_STRING 
19133: PPUSH
19134: CALL_OW 104
19138: END
// every 0 0$1 trigger StreamModeActive and sFog do
19139: LD_EXP 33
19143: PUSH
19144: LD_EXP 54
19148: AND
19149: IFFALSE 19163
19151: GO 19153
19153: DISABLE
// FogOff ( your_side ) ;
19154: LD_OWVAR 2
19158: PPUSH
19159: CALL_OW 344
19163: END
// every 0 0$1 trigger StreamModeActive and sSun do
19164: LD_EXP 33
19168: PUSH
19169: LD_EXP 56
19173: AND
19174: IFFALSE 19202
19176: GO 19178
19178: DISABLE
// begin solar_recharge_percent := 0 ;
19179: LD_ADDR_OWVAR 79
19183: PUSH
19184: LD_INT 0
19186: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19187: LD_INT 10500
19189: PPUSH
19190: CALL_OW 67
// solar_recharge_percent := 100 ;
19194: LD_ADDR_OWVAR 79
19198: PUSH
19199: LD_INT 100
19201: ST_TO_ADDR
// end ;
19202: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19203: LD_EXP 33
19207: PUSH
19208: LD_EXP 57
19212: AND
19213: IFFALSE 19452
19215: GO 19217
19217: DISABLE
19218: LD_INT 0
19220: PPUSH
19221: PPUSH
19222: PPUSH
// begin tmp := [ ] ;
19223: LD_ADDR_VAR 0 3
19227: PUSH
19228: EMPTY
19229: ST_TO_ADDR
// for i := 1 to 6 do
19230: LD_ADDR_VAR 0 1
19234: PUSH
19235: DOUBLE
19236: LD_INT 1
19238: DEC
19239: ST_TO_ADDR
19240: LD_INT 6
19242: PUSH
19243: FOR_TO
19244: IFFALSE 19349
// begin uc_nation := nation_nature ;
19246: LD_ADDR_OWVAR 21
19250: PUSH
19251: LD_INT 0
19253: ST_TO_ADDR
// uc_side := 0 ;
19254: LD_ADDR_OWVAR 20
19258: PUSH
19259: LD_INT 0
19261: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19262: LD_ADDR_OWVAR 29
19266: PUSH
19267: LD_INT 12
19269: PUSH
19270: LD_INT 12
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: ST_TO_ADDR
// hc_agressivity := 20 ;
19277: LD_ADDR_OWVAR 35
19281: PUSH
19282: LD_INT 20
19284: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19285: LD_ADDR_OWVAR 28
19289: PUSH
19290: LD_INT 17
19292: ST_TO_ADDR
// hc_gallery :=  ;
19293: LD_ADDR_OWVAR 33
19297: PUSH
19298: LD_STRING 
19300: ST_TO_ADDR
// hc_name :=  ;
19301: LD_ADDR_OWVAR 26
19305: PUSH
19306: LD_STRING 
19308: ST_TO_ADDR
// un := CreateHuman ;
19309: LD_ADDR_VAR 0 2
19313: PUSH
19314: CALL_OW 44
19318: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19319: LD_VAR 0 2
19323: PPUSH
19324: LD_INT 1
19326: PPUSH
19327: CALL_OW 51
// tmp := tmp ^ un ;
19331: LD_ADDR_VAR 0 3
19335: PUSH
19336: LD_VAR 0 3
19340: PUSH
19341: LD_VAR 0 2
19345: ADD
19346: ST_TO_ADDR
// end ;
19347: GO 19243
19349: POP
19350: POP
// repeat wait ( 0 0$1 ) ;
19351: LD_INT 35
19353: PPUSH
19354: CALL_OW 67
// for un in tmp do
19358: LD_ADDR_VAR 0 2
19362: PUSH
19363: LD_VAR 0 3
19367: PUSH
19368: FOR_IN
19369: IFFALSE 19443
// begin if IsDead ( un ) then
19371: LD_VAR 0 2
19375: PPUSH
19376: CALL_OW 301
19380: IFFALSE 19400
// begin tmp := tmp diff un ;
19382: LD_ADDR_VAR 0 3
19386: PUSH
19387: LD_VAR 0 3
19391: PUSH
19392: LD_VAR 0 2
19396: DIFF
19397: ST_TO_ADDR
// continue ;
19398: GO 19368
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19400: LD_VAR 0 2
19404: PPUSH
19405: LD_INT 3
19407: PUSH
19408: LD_INT 22
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PPUSH
19422: CALL_OW 69
19426: PPUSH
19427: LD_VAR 0 2
19431: PPUSH
19432: CALL_OW 74
19436: PPUSH
19437: CALL_OW 115
// end ;
19441: GO 19368
19443: POP
19444: POP
// until not tmp ;
19445: LD_VAR 0 3
19449: NOT
19450: IFFALSE 19351
// end ;
19452: PPOPN 3
19454: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19455: LD_EXP 33
19459: PUSH
19460: LD_EXP 58
19464: AND
19465: IFFALSE 19519
19467: GO 19469
19469: DISABLE
// begin ToLua ( displayTroll(); ) ;
19470: LD_STRING displayTroll();
19472: PPUSH
19473: CALL_OW 559
// wait ( 3 3$00 ) ;
19477: LD_INT 6300
19479: PPUSH
19480: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19484: LD_STRING hideTroll();
19486: PPUSH
19487: CALL_OW 559
// wait ( 1 1$00 ) ;
19491: LD_INT 2100
19493: PPUSH
19494: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19498: LD_STRING displayTroll();
19500: PPUSH
19501: CALL_OW 559
// wait ( 1 1$00 ) ;
19505: LD_INT 2100
19507: PPUSH
19508: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19512: LD_STRING hideTroll();
19514: PPUSH
19515: CALL_OW 559
// end ;
19519: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19520: LD_EXP 33
19524: PUSH
19525: LD_EXP 59
19529: AND
19530: IFFALSE 19593
19532: GO 19534
19534: DISABLE
19535: LD_INT 0
19537: PPUSH
// begin p := 0 ;
19538: LD_ADDR_VAR 0 1
19542: PUSH
19543: LD_INT 0
19545: ST_TO_ADDR
// repeat game_speed := 1 ;
19546: LD_ADDR_OWVAR 65
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19554: LD_INT 35
19556: PPUSH
19557: CALL_OW 67
// p := p + 1 ;
19561: LD_ADDR_VAR 0 1
19565: PUSH
19566: LD_VAR 0 1
19570: PUSH
19571: LD_INT 1
19573: PLUS
19574: ST_TO_ADDR
// until p >= 60 ;
19575: LD_VAR 0 1
19579: PUSH
19580: LD_INT 60
19582: GREATEREQUAL
19583: IFFALSE 19546
// game_speed := 4 ;
19585: LD_ADDR_OWVAR 65
19589: PUSH
19590: LD_INT 4
19592: ST_TO_ADDR
// end ;
19593: PPOPN 1
19595: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19596: LD_EXP 33
19600: PUSH
19601: LD_EXP 60
19605: AND
19606: IFFALSE 19752
19608: GO 19610
19610: DISABLE
19611: LD_INT 0
19613: PPUSH
19614: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19615: LD_ADDR_VAR 0 1
19619: PUSH
19620: LD_INT 22
19622: PUSH
19623: LD_OWVAR 2
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 2
19634: PUSH
19635: LD_INT 30
19637: PUSH
19638: LD_INT 0
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 30
19647: PUSH
19648: LD_INT 1
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: LIST
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PPUSH
19664: CALL_OW 69
19668: ST_TO_ADDR
// if not depot then
19669: LD_VAR 0 1
19673: NOT
19674: IFFALSE 19678
// exit ;
19676: GO 19752
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_VAR 0 1
19687: PUSH
19688: LD_INT 1
19690: PPUSH
19691: LD_VAR 0 1
19695: PPUSH
19696: CALL_OW 12
19700: ARRAY
19701: PPUSH
19702: CALL_OW 274
19706: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19707: LD_VAR 0 2
19711: PPUSH
19712: LD_INT 1
19714: PPUSH
19715: LD_INT 0
19717: PPUSH
19718: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19722: LD_VAR 0 2
19726: PPUSH
19727: LD_INT 2
19729: PPUSH
19730: LD_INT 0
19732: PPUSH
19733: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19737: LD_VAR 0 2
19741: PPUSH
19742: LD_INT 3
19744: PPUSH
19745: LD_INT 0
19747: PPUSH
19748: CALL_OW 277
// end ;
19752: PPOPN 2
19754: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19755: LD_EXP 33
19759: PUSH
19760: LD_EXP 61
19764: AND
19765: IFFALSE 19862
19767: GO 19769
19769: DISABLE
19770: LD_INT 0
19772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19773: LD_ADDR_VAR 0 1
19777: PUSH
19778: LD_INT 22
19780: PUSH
19781: LD_OWVAR 2
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 21
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 3
19802: PUSH
19803: LD_INT 23
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: LIST
19821: PPUSH
19822: CALL_OW 69
19826: ST_TO_ADDR
// if not tmp then
19827: LD_VAR 0 1
19831: NOT
19832: IFFALSE 19836
// exit ;
19834: GO 19862
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19836: LD_VAR 0 1
19840: PUSH
19841: LD_INT 1
19843: PPUSH
19844: LD_VAR 0 1
19848: PPUSH
19849: CALL_OW 12
19853: ARRAY
19854: PPUSH
19855: LD_INT 200
19857: PPUSH
19858: CALL_OW 234
// end ;
19862: PPOPN 1
19864: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19865: LD_EXP 33
19869: PUSH
19870: LD_EXP 62
19874: AND
19875: IFFALSE 19954
19877: GO 19879
19879: DISABLE
19880: LD_INT 0
19882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19883: LD_ADDR_VAR 0 1
19887: PUSH
19888: LD_INT 22
19890: PUSH
19891: LD_OWVAR 2
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 21
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PPUSH
19914: CALL_OW 69
19918: ST_TO_ADDR
// if not tmp then
19919: LD_VAR 0 1
19923: NOT
19924: IFFALSE 19928
// exit ;
19926: GO 19954
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19928: LD_VAR 0 1
19932: PUSH
19933: LD_INT 1
19935: PPUSH
19936: LD_VAR 0 1
19940: PPUSH
19941: CALL_OW 12
19945: ARRAY
19946: PPUSH
19947: LD_INT 60
19949: PPUSH
19950: CALL_OW 234
// end ;
19954: PPOPN 1
19956: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19957: LD_EXP 33
19961: PUSH
19962: LD_EXP 63
19966: AND
19967: IFFALSE 20066
19969: GO 19971
19971: DISABLE
19972: LD_INT 0
19974: PPUSH
19975: PPUSH
// begin enable ;
19976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19977: LD_ADDR_VAR 0 1
19981: PUSH
19982: LD_INT 22
19984: PUSH
19985: LD_OWVAR 2
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 61
19996: PUSH
19997: EMPTY
19998: LIST
19999: PUSH
20000: LD_INT 33
20002: PUSH
20003: LD_INT 2
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: LIST
20014: PPUSH
20015: CALL_OW 69
20019: ST_TO_ADDR
// if not tmp then
20020: LD_VAR 0 1
20024: NOT
20025: IFFALSE 20029
// exit ;
20027: GO 20066
// for i in tmp do
20029: LD_ADDR_VAR 0 2
20033: PUSH
20034: LD_VAR 0 1
20038: PUSH
20039: FOR_IN
20040: IFFALSE 20064
// if IsControledBy ( i ) then
20042: LD_VAR 0 2
20046: PPUSH
20047: CALL_OW 312
20051: IFFALSE 20062
// ComUnlink ( i ) ;
20053: LD_VAR 0 2
20057: PPUSH
20058: CALL_OW 136
20062: GO 20039
20064: POP
20065: POP
// end ;
20066: PPOPN 2
20068: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20069: LD_EXP 33
20073: PUSH
20074: LD_EXP 64
20078: AND
20079: IFFALSE 20219
20081: GO 20083
20083: DISABLE
20084: LD_INT 0
20086: PPUSH
20087: PPUSH
// begin ToLua ( displayPowell(); ) ;
20088: LD_STRING displayPowell();
20090: PPUSH
20091: CALL_OW 559
// uc_side := 0 ;
20095: LD_ADDR_OWVAR 20
20099: PUSH
20100: LD_INT 0
20102: ST_TO_ADDR
// uc_nation := 2 ;
20103: LD_ADDR_OWVAR 21
20107: PUSH
20108: LD_INT 2
20110: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20111: LD_ADDR_OWVAR 37
20115: PUSH
20116: LD_INT 14
20118: ST_TO_ADDR
// vc_engine := engine_siberite ;
20119: LD_ADDR_OWVAR 39
20123: PUSH
20124: LD_INT 3
20126: ST_TO_ADDR
// vc_control := control_apeman ;
20127: LD_ADDR_OWVAR 38
20131: PUSH
20132: LD_INT 5
20134: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20135: LD_ADDR_OWVAR 40
20139: PUSH
20140: LD_INT 29
20142: ST_TO_ADDR
// un := CreateVehicle ;
20143: LD_ADDR_VAR 0 2
20147: PUSH
20148: CALL_OW 45
20152: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20153: LD_VAR 0 2
20157: PPUSH
20158: LD_INT 1
20160: PPUSH
20161: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20165: LD_INT 35
20167: PPUSH
20168: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20172: LD_VAR 0 2
20176: PPUSH
20177: LD_INT 22
20179: PUSH
20180: LD_OWVAR 2
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PPUSH
20189: CALL_OW 69
20193: PPUSH
20194: LD_VAR 0 2
20198: PPUSH
20199: CALL_OW 74
20203: PPUSH
20204: CALL_OW 115
// until IsDead ( un ) ;
20208: LD_VAR 0 2
20212: PPUSH
20213: CALL_OW 301
20217: IFFALSE 20165
// end ;
20219: PPOPN 2
20221: END
// every 0 0$1 trigger StreamModeActive and sStu do
20222: LD_EXP 33
20226: PUSH
20227: LD_EXP 72
20231: AND
20232: IFFALSE 20248
20234: GO 20236
20236: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20237: LD_STRING displayStucuk();
20239: PPUSH
20240: CALL_OW 559
// ResetFog ;
20244: CALL_OW 335
// end ;
20248: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20249: LD_EXP 33
20253: PUSH
20254: LD_EXP 65
20258: AND
20259: IFFALSE 20400
20261: GO 20263
20263: DISABLE
20264: LD_INT 0
20266: PPUSH
20267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20268: LD_ADDR_VAR 0 2
20272: PUSH
20273: LD_INT 22
20275: PUSH
20276: LD_OWVAR 2
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 21
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PPUSH
20299: CALL_OW 69
20303: ST_TO_ADDR
// if not tmp then
20304: LD_VAR 0 2
20308: NOT
20309: IFFALSE 20313
// exit ;
20311: GO 20400
// un := tmp [ rand ( 1 , tmp ) ] ;
20313: LD_ADDR_VAR 0 1
20317: PUSH
20318: LD_VAR 0 2
20322: PUSH
20323: LD_INT 1
20325: PPUSH
20326: LD_VAR 0 2
20330: PPUSH
20331: CALL_OW 12
20335: ARRAY
20336: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20337: LD_VAR 0 1
20341: PPUSH
20342: LD_INT 0
20344: PPUSH
20345: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20349: LD_VAR 0 1
20353: PPUSH
20354: LD_OWVAR 3
20358: PUSH
20359: LD_VAR 0 1
20363: DIFF
20364: PPUSH
20365: LD_VAR 0 1
20369: PPUSH
20370: CALL_OW 74
20374: PPUSH
20375: CALL_OW 115
// wait ( 0 0$20 ) ;
20379: LD_INT 700
20381: PPUSH
20382: CALL_OW 67
// SetSide ( un , your_side ) ;
20386: LD_VAR 0 1
20390: PPUSH
20391: LD_OWVAR 2
20395: PPUSH
20396: CALL_OW 235
// end ;
20400: PPOPN 2
20402: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20403: LD_EXP 33
20407: PUSH
20408: LD_EXP 66
20412: AND
20413: IFFALSE 20519
20415: GO 20417
20417: DISABLE
20418: LD_INT 0
20420: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20421: LD_ADDR_VAR 0 1
20425: PUSH
20426: LD_INT 22
20428: PUSH
20429: LD_OWVAR 2
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: LD_INT 30
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 30
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: LIST
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PPUSH
20470: CALL_OW 69
20474: ST_TO_ADDR
// if not depot then
20475: LD_VAR 0 1
20479: NOT
20480: IFFALSE 20484
// exit ;
20482: GO 20519
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20484: LD_VAR 0 1
20488: PUSH
20489: LD_INT 1
20491: ARRAY
20492: PPUSH
20493: CALL_OW 250
20497: PPUSH
20498: LD_VAR 0 1
20502: PUSH
20503: LD_INT 1
20505: ARRAY
20506: PPUSH
20507: CALL_OW 251
20511: PPUSH
20512: LD_INT 70
20514: PPUSH
20515: CALL_OW 495
// end ;
20519: PPOPN 1
20521: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20522: LD_EXP 33
20526: PUSH
20527: LD_EXP 67
20531: AND
20532: IFFALSE 20743
20534: GO 20536
20536: DISABLE
20537: LD_INT 0
20539: PPUSH
20540: PPUSH
20541: PPUSH
20542: PPUSH
20543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20544: LD_ADDR_VAR 0 5
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_OWVAR 2
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 21
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PPUSH
20575: CALL_OW 69
20579: ST_TO_ADDR
// if not tmp then
20580: LD_VAR 0 5
20584: NOT
20585: IFFALSE 20589
// exit ;
20587: GO 20743
// for i in tmp do
20589: LD_ADDR_VAR 0 1
20593: PUSH
20594: LD_VAR 0 5
20598: PUSH
20599: FOR_IN
20600: IFFALSE 20741
// begin d := rand ( 0 , 5 ) ;
20602: LD_ADDR_VAR 0 4
20606: PUSH
20607: LD_INT 0
20609: PPUSH
20610: LD_INT 5
20612: PPUSH
20613: CALL_OW 12
20617: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20618: LD_ADDR_VAR 0 2
20622: PUSH
20623: LD_VAR 0 1
20627: PPUSH
20628: CALL_OW 250
20632: PPUSH
20633: LD_VAR 0 4
20637: PPUSH
20638: LD_INT 3
20640: PPUSH
20641: LD_INT 12
20643: PPUSH
20644: CALL_OW 12
20648: PPUSH
20649: CALL_OW 272
20653: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20654: LD_ADDR_VAR 0 3
20658: PUSH
20659: LD_VAR 0 1
20663: PPUSH
20664: CALL_OW 251
20668: PPUSH
20669: LD_VAR 0 4
20673: PPUSH
20674: LD_INT 3
20676: PPUSH
20677: LD_INT 12
20679: PPUSH
20680: CALL_OW 12
20684: PPUSH
20685: CALL_OW 273
20689: ST_TO_ADDR
// if ValidHex ( x , y ) then
20690: LD_VAR 0 2
20694: PPUSH
20695: LD_VAR 0 3
20699: PPUSH
20700: CALL_OW 488
20704: IFFALSE 20739
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20706: LD_VAR 0 1
20710: PPUSH
20711: LD_VAR 0 2
20715: PPUSH
20716: LD_VAR 0 3
20720: PPUSH
20721: LD_INT 3
20723: PPUSH
20724: LD_INT 6
20726: PPUSH
20727: CALL_OW 12
20731: PPUSH
20732: LD_INT 1
20734: PPUSH
20735: CALL_OW 483
// end ;
20739: GO 20599
20741: POP
20742: POP
// end ;
20743: PPOPN 5
20745: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20746: LD_EXP 33
20750: PUSH
20751: LD_EXP 68
20755: AND
20756: IFFALSE 20850
20758: GO 20760
20760: DISABLE
20761: LD_INT 0
20763: PPUSH
20764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20765: LD_ADDR_VAR 0 2
20769: PUSH
20770: LD_INT 22
20772: PUSH
20773: LD_OWVAR 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 32
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 21
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: PPUSH
20807: CALL_OW 69
20811: ST_TO_ADDR
// if not tmp then
20812: LD_VAR 0 2
20816: NOT
20817: IFFALSE 20821
// exit ;
20819: GO 20850
// for i in tmp do
20821: LD_ADDR_VAR 0 1
20825: PUSH
20826: LD_VAR 0 2
20830: PUSH
20831: FOR_IN
20832: IFFALSE 20848
// SetFuel ( i , 0 ) ;
20834: LD_VAR 0 1
20838: PPUSH
20839: LD_INT 0
20841: PPUSH
20842: CALL_OW 240
20846: GO 20831
20848: POP
20849: POP
// end ;
20850: PPOPN 2
20852: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20853: LD_EXP 33
20857: PUSH
20858: LD_EXP 69
20862: AND
20863: IFFALSE 20929
20865: GO 20867
20867: DISABLE
20868: LD_INT 0
20870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20871: LD_ADDR_VAR 0 1
20875: PUSH
20876: LD_INT 22
20878: PUSH
20879: LD_OWVAR 2
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 30
20890: PUSH
20891: LD_INT 29
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PPUSH
20902: CALL_OW 69
20906: ST_TO_ADDR
// if not tmp then
20907: LD_VAR 0 1
20911: NOT
20912: IFFALSE 20916
// exit ;
20914: GO 20929
// DestroyUnit ( tmp [ 1 ] ) ;
20916: LD_VAR 0 1
20920: PUSH
20921: LD_INT 1
20923: ARRAY
20924: PPUSH
20925: CALL_OW 65
// end ;
20929: PPOPN 1
20931: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20932: LD_EXP 33
20936: PUSH
20937: LD_EXP 71
20941: AND
20942: IFFALSE 21071
20944: GO 20946
20946: DISABLE
20947: LD_INT 0
20949: PPUSH
// begin uc_side := 0 ;
20950: LD_ADDR_OWVAR 20
20954: PUSH
20955: LD_INT 0
20957: ST_TO_ADDR
// uc_nation := nation_arabian ;
20958: LD_ADDR_OWVAR 21
20962: PUSH
20963: LD_INT 2
20965: ST_TO_ADDR
// hc_gallery :=  ;
20966: LD_ADDR_OWVAR 33
20970: PUSH
20971: LD_STRING 
20973: ST_TO_ADDR
// hc_name :=  ;
20974: LD_ADDR_OWVAR 26
20978: PUSH
20979: LD_STRING 
20981: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20982: LD_INT 1
20984: PPUSH
20985: LD_INT 11
20987: PPUSH
20988: LD_INT 10
20990: PPUSH
20991: CALL_OW 380
// un := CreateHuman ;
20995: LD_ADDR_VAR 0 1
20999: PUSH
21000: CALL_OW 44
21004: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21005: LD_VAR 0 1
21009: PPUSH
21010: LD_INT 1
21012: PPUSH
21013: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21017: LD_INT 35
21019: PPUSH
21020: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21024: LD_VAR 0 1
21028: PPUSH
21029: LD_INT 22
21031: PUSH
21032: LD_OWVAR 2
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PPUSH
21041: CALL_OW 69
21045: PPUSH
21046: LD_VAR 0 1
21050: PPUSH
21051: CALL_OW 74
21055: PPUSH
21056: CALL_OW 115
// until IsDead ( un ) ;
21060: LD_VAR 0 1
21064: PPUSH
21065: CALL_OW 301
21069: IFFALSE 21017
// end ;
21071: PPOPN 1
21073: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21074: LD_EXP 33
21078: PUSH
21079: LD_EXP 73
21083: AND
21084: IFFALSE 21096
21086: GO 21088
21088: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21089: LD_STRING earthquake(getX(game), 0, 32)
21091: PPUSH
21092: CALL_OW 559
21096: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21097: LD_EXP 33
21101: PUSH
21102: LD_EXP 74
21106: AND
21107: IFFALSE 21198
21109: GO 21111
21111: DISABLE
21112: LD_INT 0
21114: PPUSH
// begin enable ;
21115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21116: LD_ADDR_VAR 0 1
21120: PUSH
21121: LD_INT 22
21123: PUSH
21124: LD_OWVAR 2
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 21
21135: PUSH
21136: LD_INT 2
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 33
21145: PUSH
21146: LD_INT 3
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: PPUSH
21158: CALL_OW 69
21162: ST_TO_ADDR
// if not tmp then
21163: LD_VAR 0 1
21167: NOT
21168: IFFALSE 21172
// exit ;
21170: GO 21198
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21172: LD_VAR 0 1
21176: PUSH
21177: LD_INT 1
21179: PPUSH
21180: LD_VAR 0 1
21184: PPUSH
21185: CALL_OW 12
21189: ARRAY
21190: PPUSH
21191: LD_INT 1
21193: PPUSH
21194: CALL_OW 234
// end ;
21198: PPOPN 1
21200: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21201: LD_EXP 33
21205: PUSH
21206: LD_EXP 75
21210: AND
21211: IFFALSE 21352
21213: GO 21215
21215: DISABLE
21216: LD_INT 0
21218: PPUSH
21219: PPUSH
21220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21221: LD_ADDR_VAR 0 3
21225: PUSH
21226: LD_INT 22
21228: PUSH
21229: LD_OWVAR 2
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 25
21240: PUSH
21241: LD_INT 1
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 69
21256: ST_TO_ADDR
// if not tmp then
21257: LD_VAR 0 3
21261: NOT
21262: IFFALSE 21266
// exit ;
21264: GO 21352
// un := tmp [ rand ( 1 , tmp ) ] ;
21266: LD_ADDR_VAR 0 2
21270: PUSH
21271: LD_VAR 0 3
21275: PUSH
21276: LD_INT 1
21278: PPUSH
21279: LD_VAR 0 3
21283: PPUSH
21284: CALL_OW 12
21288: ARRAY
21289: ST_TO_ADDR
// if Crawls ( un ) then
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 318
21299: IFFALSE 21310
// ComWalk ( un ) ;
21301: LD_VAR 0 2
21305: PPUSH
21306: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21310: LD_VAR 0 2
21314: PPUSH
21315: LD_INT 9
21317: PPUSH
21318: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21322: LD_INT 28
21324: PPUSH
21325: LD_OWVAR 2
21329: PPUSH
21330: LD_INT 2
21332: PPUSH
21333: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21337: LD_INT 29
21339: PPUSH
21340: LD_OWVAR 2
21344: PPUSH
21345: LD_INT 2
21347: PPUSH
21348: CALL_OW 322
// end ;
21352: PPOPN 3
21354: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21355: LD_EXP 33
21359: PUSH
21360: LD_EXP 76
21364: AND
21365: IFFALSE 21476
21367: GO 21369
21369: DISABLE
21370: LD_INT 0
21372: PPUSH
21373: PPUSH
21374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21375: LD_ADDR_VAR 0 3
21379: PUSH
21380: LD_INT 22
21382: PUSH
21383: LD_OWVAR 2
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 25
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PPUSH
21406: CALL_OW 69
21410: ST_TO_ADDR
// if not tmp then
21411: LD_VAR 0 3
21415: NOT
21416: IFFALSE 21420
// exit ;
21418: GO 21476
// un := tmp [ rand ( 1 , tmp ) ] ;
21420: LD_ADDR_VAR 0 2
21424: PUSH
21425: LD_VAR 0 3
21429: PUSH
21430: LD_INT 1
21432: PPUSH
21433: LD_VAR 0 3
21437: PPUSH
21438: CALL_OW 12
21442: ARRAY
21443: ST_TO_ADDR
// if Crawls ( un ) then
21444: LD_VAR 0 2
21448: PPUSH
21449: CALL_OW 318
21453: IFFALSE 21464
// ComWalk ( un ) ;
21455: LD_VAR 0 2
21459: PPUSH
21460: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21464: LD_VAR 0 2
21468: PPUSH
21469: LD_INT 8
21471: PPUSH
21472: CALL_OW 336
// end ;
21476: PPOPN 3
21478: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21479: LD_EXP 33
21483: PUSH
21484: LD_EXP 77
21488: AND
21489: IFFALSE 21633
21491: GO 21493
21493: DISABLE
21494: LD_INT 0
21496: PPUSH
21497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21498: LD_ADDR_VAR 0 2
21502: PUSH
21503: LD_INT 22
21505: PUSH
21506: LD_OWVAR 2
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 21
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: LD_INT 34
21530: PUSH
21531: LD_INT 12
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 34
21540: PUSH
21541: LD_INT 51
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 34
21550: PUSH
21551: LD_INT 32
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: PPUSH
21569: CALL_OW 69
21573: ST_TO_ADDR
// if not tmp then
21574: LD_VAR 0 2
21578: NOT
21579: IFFALSE 21583
// exit ;
21581: GO 21633
// for i in tmp do
21583: LD_ADDR_VAR 0 1
21587: PUSH
21588: LD_VAR 0 2
21592: PUSH
21593: FOR_IN
21594: IFFALSE 21631
// if GetCargo ( i , mat_artifact ) = 0 then
21596: LD_VAR 0 1
21600: PPUSH
21601: LD_INT 4
21603: PPUSH
21604: CALL_OW 289
21608: PUSH
21609: LD_INT 0
21611: EQUAL
21612: IFFALSE 21629
// SetCargo ( i , mat_siberit , 100 ) ;
21614: LD_VAR 0 1
21618: PPUSH
21619: LD_INT 3
21621: PPUSH
21622: LD_INT 100
21624: PPUSH
21625: CALL_OW 290
21629: GO 21593
21631: POP
21632: POP
// end ;
21633: PPOPN 2
21635: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21636: LD_EXP 33
21640: PUSH
21641: LD_EXP 78
21645: AND
21646: IFFALSE 21829
21648: GO 21650
21650: DISABLE
21651: LD_INT 0
21653: PPUSH
21654: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21655: LD_ADDR_VAR 0 2
21659: PUSH
21660: LD_INT 22
21662: PUSH
21663: LD_OWVAR 2
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PPUSH
21672: CALL_OW 69
21676: ST_TO_ADDR
// if not tmp then
21677: LD_VAR 0 2
21681: NOT
21682: IFFALSE 21686
// exit ;
21684: GO 21829
// for i := 1 to 2 do
21686: LD_ADDR_VAR 0 1
21690: PUSH
21691: DOUBLE
21692: LD_INT 1
21694: DEC
21695: ST_TO_ADDR
21696: LD_INT 2
21698: PUSH
21699: FOR_TO
21700: IFFALSE 21827
// begin uc_side := your_side ;
21702: LD_ADDR_OWVAR 20
21706: PUSH
21707: LD_OWVAR 2
21711: ST_TO_ADDR
// uc_nation := nation_american ;
21712: LD_ADDR_OWVAR 21
21716: PUSH
21717: LD_INT 1
21719: ST_TO_ADDR
// vc_chassis := us_morphling ;
21720: LD_ADDR_OWVAR 37
21724: PUSH
21725: LD_INT 5
21727: ST_TO_ADDR
// vc_engine := engine_siberite ;
21728: LD_ADDR_OWVAR 39
21732: PUSH
21733: LD_INT 3
21735: ST_TO_ADDR
// vc_control := control_computer ;
21736: LD_ADDR_OWVAR 38
21740: PUSH
21741: LD_INT 3
21743: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21744: LD_ADDR_OWVAR 40
21748: PUSH
21749: LD_INT 10
21751: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21752: LD_VAR 0 2
21756: PUSH
21757: LD_INT 1
21759: ARRAY
21760: PPUSH
21761: CALL_OW 310
21765: NOT
21766: IFFALSE 21813
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21768: CALL_OW 45
21772: PPUSH
21773: LD_VAR 0 2
21777: PUSH
21778: LD_INT 1
21780: ARRAY
21781: PPUSH
21782: CALL_OW 250
21786: PPUSH
21787: LD_VAR 0 2
21791: PUSH
21792: LD_INT 1
21794: ARRAY
21795: PPUSH
21796: CALL_OW 251
21800: PPUSH
21801: LD_INT 12
21803: PPUSH
21804: LD_INT 1
21806: PPUSH
21807: CALL_OW 50
21811: GO 21825
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21813: CALL_OW 45
21817: PPUSH
21818: LD_INT 1
21820: PPUSH
21821: CALL_OW 51
// end ;
21825: GO 21699
21827: POP
21828: POP
// end ;
21829: PPOPN 2
21831: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21832: LD_EXP 33
21836: PUSH
21837: LD_EXP 79
21841: AND
21842: IFFALSE 22064
21844: GO 21846
21846: DISABLE
21847: LD_INT 0
21849: PPUSH
21850: PPUSH
21851: PPUSH
21852: PPUSH
21853: PPUSH
21854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21855: LD_ADDR_VAR 0 6
21859: PUSH
21860: LD_INT 22
21862: PUSH
21863: LD_OWVAR 2
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 21
21874: PUSH
21875: LD_INT 1
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 3
21884: PUSH
21885: LD_INT 23
21887: PUSH
21888: LD_INT 0
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: PPUSH
21904: CALL_OW 69
21908: ST_TO_ADDR
// if not tmp then
21909: LD_VAR 0 6
21913: NOT
21914: IFFALSE 21918
// exit ;
21916: GO 22064
// s1 := rand ( 1 , 4 ) ;
21918: LD_ADDR_VAR 0 2
21922: PUSH
21923: LD_INT 1
21925: PPUSH
21926: LD_INT 4
21928: PPUSH
21929: CALL_OW 12
21933: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21934: LD_ADDR_VAR 0 4
21938: PUSH
21939: LD_VAR 0 6
21943: PUSH
21944: LD_INT 1
21946: ARRAY
21947: PPUSH
21948: LD_VAR 0 2
21952: PPUSH
21953: CALL_OW 259
21957: ST_TO_ADDR
// if s1 = 1 then
21958: LD_VAR 0 2
21962: PUSH
21963: LD_INT 1
21965: EQUAL
21966: IFFALSE 21986
// s2 := rand ( 2 , 4 ) else
21968: LD_ADDR_VAR 0 3
21972: PUSH
21973: LD_INT 2
21975: PPUSH
21976: LD_INT 4
21978: PPUSH
21979: CALL_OW 12
21983: ST_TO_ADDR
21984: GO 21994
// s2 := 1 ;
21986: LD_ADDR_VAR 0 3
21990: PUSH
21991: LD_INT 1
21993: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21994: LD_ADDR_VAR 0 5
21998: PUSH
21999: LD_VAR 0 6
22003: PUSH
22004: LD_INT 1
22006: ARRAY
22007: PPUSH
22008: LD_VAR 0 3
22012: PPUSH
22013: CALL_OW 259
22017: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22018: LD_VAR 0 6
22022: PUSH
22023: LD_INT 1
22025: ARRAY
22026: PPUSH
22027: LD_VAR 0 2
22031: PPUSH
22032: LD_VAR 0 5
22036: PPUSH
22037: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22041: LD_VAR 0 6
22045: PUSH
22046: LD_INT 1
22048: ARRAY
22049: PPUSH
22050: LD_VAR 0 3
22054: PPUSH
22055: LD_VAR 0 4
22059: PPUSH
22060: CALL_OW 237
// end ;
22064: PPOPN 6
22066: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22067: LD_EXP 33
22071: PUSH
22072: LD_EXP 80
22076: AND
22077: IFFALSE 22156
22079: GO 22081
22081: DISABLE
22082: LD_INT 0
22084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22085: LD_ADDR_VAR 0 1
22089: PUSH
22090: LD_INT 22
22092: PUSH
22093: LD_OWVAR 2
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 30
22104: PUSH
22105: LD_INT 3
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PPUSH
22116: CALL_OW 69
22120: ST_TO_ADDR
// if not tmp then
22121: LD_VAR 0 1
22125: NOT
22126: IFFALSE 22130
// exit ;
22128: GO 22156
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22130: LD_VAR 0 1
22134: PUSH
22135: LD_INT 1
22137: PPUSH
22138: LD_VAR 0 1
22142: PPUSH
22143: CALL_OW 12
22147: ARRAY
22148: PPUSH
22149: LD_INT 1
22151: PPUSH
22152: CALL_OW 234
// end ;
22156: PPOPN 1
22158: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22159: LD_EXP 33
22163: PUSH
22164: LD_EXP 81
22168: AND
22169: IFFALSE 22281
22171: GO 22173
22173: DISABLE
22174: LD_INT 0
22176: PPUSH
22177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22178: LD_ADDR_VAR 0 2
22182: PUSH
22183: LD_INT 22
22185: PUSH
22186: LD_OWVAR 2
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 2
22197: PUSH
22198: LD_INT 30
22200: PUSH
22201: LD_INT 27
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 30
22210: PUSH
22211: LD_INT 26
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 30
22220: PUSH
22221: LD_INT 28
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PPUSH
22238: CALL_OW 69
22242: ST_TO_ADDR
// if not tmp then
22243: LD_VAR 0 2
22247: NOT
22248: IFFALSE 22252
// exit ;
22250: GO 22281
// for i in tmp do
22252: LD_ADDR_VAR 0 1
22256: PUSH
22257: LD_VAR 0 2
22261: PUSH
22262: FOR_IN
22263: IFFALSE 22279
// SetLives ( i , 1 ) ;
22265: LD_VAR 0 1
22269: PPUSH
22270: LD_INT 1
22272: PPUSH
22273: CALL_OW 234
22277: GO 22262
22279: POP
22280: POP
// end ;
22281: PPOPN 2
22283: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22284: LD_EXP 33
22288: PUSH
22289: LD_EXP 82
22293: AND
22294: IFFALSE 22581
22296: GO 22298
22298: DISABLE
22299: LD_INT 0
22301: PPUSH
22302: PPUSH
22303: PPUSH
// begin i := rand ( 1 , 7 ) ;
22304: LD_ADDR_VAR 0 1
22308: PUSH
22309: LD_INT 1
22311: PPUSH
22312: LD_INT 7
22314: PPUSH
22315: CALL_OW 12
22319: ST_TO_ADDR
// case i of 1 :
22320: LD_VAR 0 1
22324: PUSH
22325: LD_INT 1
22327: DOUBLE
22328: EQUAL
22329: IFTRUE 22333
22331: GO 22343
22333: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22334: LD_STRING earthquake(getX(game), 0, 32)
22336: PPUSH
22337: CALL_OW 559
22341: GO 22581
22343: LD_INT 2
22345: DOUBLE
22346: EQUAL
22347: IFTRUE 22351
22349: GO 22365
22351: POP
// begin ToLua ( displayStucuk(); ) ;
22352: LD_STRING displayStucuk();
22354: PPUSH
22355: CALL_OW 559
// ResetFog ;
22359: CALL_OW 335
// end ; 3 :
22363: GO 22581
22365: LD_INT 3
22367: DOUBLE
22368: EQUAL
22369: IFTRUE 22373
22371: GO 22477
22373: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22374: LD_ADDR_VAR 0 2
22378: PUSH
22379: LD_INT 22
22381: PUSH
22382: LD_OWVAR 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 25
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PPUSH
22405: CALL_OW 69
22409: ST_TO_ADDR
// if not tmp then
22410: LD_VAR 0 2
22414: NOT
22415: IFFALSE 22419
// exit ;
22417: GO 22581
// un := tmp [ rand ( 1 , tmp ) ] ;
22419: LD_ADDR_VAR 0 3
22423: PUSH
22424: LD_VAR 0 2
22428: PUSH
22429: LD_INT 1
22431: PPUSH
22432: LD_VAR 0 2
22436: PPUSH
22437: CALL_OW 12
22441: ARRAY
22442: ST_TO_ADDR
// if Crawls ( un ) then
22443: LD_VAR 0 3
22447: PPUSH
22448: CALL_OW 318
22452: IFFALSE 22463
// ComWalk ( un ) ;
22454: LD_VAR 0 3
22458: PPUSH
22459: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22463: LD_VAR 0 3
22467: PPUSH
22468: LD_INT 8
22470: PPUSH
22471: CALL_OW 336
// end ; 4 :
22475: GO 22581
22477: LD_INT 4
22479: DOUBLE
22480: EQUAL
22481: IFTRUE 22485
22483: GO 22559
22485: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22486: LD_ADDR_VAR 0 2
22490: PUSH
22491: LD_INT 22
22493: PUSH
22494: LD_OWVAR 2
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 30
22505: PUSH
22506: LD_INT 29
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PPUSH
22517: CALL_OW 69
22521: ST_TO_ADDR
// if not tmp then
22522: LD_VAR 0 2
22526: NOT
22527: IFFALSE 22531
// exit ;
22529: GO 22581
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22531: LD_VAR 0 2
22535: PUSH
22536: LD_INT 1
22538: ARRAY
22539: PPUSH
22540: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22544: LD_VAR 0 2
22548: PUSH
22549: LD_INT 1
22551: ARRAY
22552: PPUSH
22553: CALL_OW 65
// end ; 5 .. 7 :
22557: GO 22581
22559: LD_INT 5
22561: DOUBLE
22562: GREATEREQUAL
22563: IFFALSE 22571
22565: LD_INT 7
22567: DOUBLE
22568: LESSEQUAL
22569: IFTRUE 22573
22571: GO 22580
22573: POP
// StreamSibBomb ; end ;
22574: CALL 18818 0 0
22578: GO 22581
22580: POP
// end ;
22581: PPOPN 3
22583: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22584: LD_EXP 33
22588: PUSH
22589: LD_EXP 83
22593: AND
22594: IFFALSE 22750
22596: GO 22598
22598: DISABLE
22599: LD_INT 0
22601: PPUSH
22602: PPUSH
22603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22604: LD_ADDR_VAR 0 2
22608: PUSH
22609: LD_INT 81
22611: PUSH
22612: LD_OWVAR 2
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 2
22623: PUSH
22624: LD_INT 21
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 21
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PPUSH
22653: CALL_OW 69
22657: ST_TO_ADDR
// if not tmp then
22658: LD_VAR 0 2
22662: NOT
22663: IFFALSE 22667
// exit ;
22665: GO 22750
// p := 0 ;
22667: LD_ADDR_VAR 0 3
22671: PUSH
22672: LD_INT 0
22674: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22675: LD_INT 35
22677: PPUSH
22678: CALL_OW 67
// p := p + 1 ;
22682: LD_ADDR_VAR 0 3
22686: PUSH
22687: LD_VAR 0 3
22691: PUSH
22692: LD_INT 1
22694: PLUS
22695: ST_TO_ADDR
// for i in tmp do
22696: LD_ADDR_VAR 0 1
22700: PUSH
22701: LD_VAR 0 2
22705: PUSH
22706: FOR_IN
22707: IFFALSE 22738
// if GetLives ( i ) < 1000 then
22709: LD_VAR 0 1
22713: PPUSH
22714: CALL_OW 256
22718: PUSH
22719: LD_INT 1000
22721: LESS
22722: IFFALSE 22736
// SetLives ( i , 1000 ) ;
22724: LD_VAR 0 1
22728: PPUSH
22729: LD_INT 1000
22731: PPUSH
22732: CALL_OW 234
22736: GO 22706
22738: POP
22739: POP
// until p > 20 ;
22740: LD_VAR 0 3
22744: PUSH
22745: LD_INT 20
22747: GREATER
22748: IFFALSE 22675
// end ;
22750: PPOPN 3
22752: END
// every 0 0$1 trigger StreamModeActive and sTime do
22753: LD_EXP 33
22757: PUSH
22758: LD_EXP 84
22762: AND
22763: IFFALSE 22798
22765: GO 22767
22767: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22768: LD_INT 28
22770: PPUSH
22771: LD_OWVAR 2
22775: PPUSH
22776: LD_INT 2
22778: PPUSH
22779: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22783: LD_INT 30
22785: PPUSH
22786: LD_OWVAR 2
22790: PPUSH
22791: LD_INT 2
22793: PPUSH
22794: CALL_OW 322
// end ;
22798: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22799: LD_EXP 33
22803: PUSH
22804: LD_EXP 85
22808: AND
22809: IFFALSE 22930
22811: GO 22813
22813: DISABLE
22814: LD_INT 0
22816: PPUSH
22817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22818: LD_ADDR_VAR 0 2
22822: PUSH
22823: LD_INT 22
22825: PUSH
22826: LD_OWVAR 2
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 21
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 3
22847: PUSH
22848: LD_INT 23
22850: PUSH
22851: LD_INT 0
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: LIST
22866: PPUSH
22867: CALL_OW 69
22871: ST_TO_ADDR
// if not tmp then
22872: LD_VAR 0 2
22876: NOT
22877: IFFALSE 22881
// exit ;
22879: GO 22930
// for i in tmp do
22881: LD_ADDR_VAR 0 1
22885: PUSH
22886: LD_VAR 0 2
22890: PUSH
22891: FOR_IN
22892: IFFALSE 22928
// begin if Crawls ( i ) then
22894: LD_VAR 0 1
22898: PPUSH
22899: CALL_OW 318
22903: IFFALSE 22914
// ComWalk ( i ) ;
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 138
// SetClass ( i , 2 ) ;
22914: LD_VAR 0 1
22918: PPUSH
22919: LD_INT 2
22921: PPUSH
22922: CALL_OW 336
// end ;
22926: GO 22891
22928: POP
22929: POP
// end ;
22930: PPOPN 2
22932: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22933: LD_EXP 33
22937: PUSH
22938: LD_EXP 86
22942: AND
22943: IFFALSE 23231
22945: GO 22947
22947: DISABLE
22948: LD_INT 0
22950: PPUSH
22951: PPUSH
22952: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22953: LD_OWVAR 2
22957: PPUSH
22958: LD_INT 9
22960: PPUSH
22961: LD_INT 1
22963: PPUSH
22964: LD_INT 1
22966: PPUSH
22967: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22971: LD_INT 9
22973: PPUSH
22974: LD_OWVAR 2
22978: PPUSH
22979: CALL_OW 343
// uc_side := 9 ;
22983: LD_ADDR_OWVAR 20
22987: PUSH
22988: LD_INT 9
22990: ST_TO_ADDR
// uc_nation := 2 ;
22991: LD_ADDR_OWVAR 21
22995: PUSH
22996: LD_INT 2
22998: ST_TO_ADDR
// hc_name := Dark Warrior ;
22999: LD_ADDR_OWVAR 26
23003: PUSH
23004: LD_STRING Dark Warrior
23006: ST_TO_ADDR
// hc_gallery :=  ;
23007: LD_ADDR_OWVAR 33
23011: PUSH
23012: LD_STRING 
23014: ST_TO_ADDR
// hc_noskilllimit := true ;
23015: LD_ADDR_OWVAR 76
23019: PUSH
23020: LD_INT 1
23022: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23023: LD_ADDR_OWVAR 31
23027: PUSH
23028: LD_INT 30
23030: PUSH
23031: LD_INT 30
23033: PUSH
23034: LD_INT 30
23036: PUSH
23037: LD_INT 30
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: ST_TO_ADDR
// un := CreateHuman ;
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: CALL_OW 44
23055: ST_TO_ADDR
// hc_noskilllimit := false ;
23056: LD_ADDR_OWVAR 76
23060: PUSH
23061: LD_INT 0
23063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23064: LD_VAR 0 3
23068: PPUSH
23069: LD_INT 1
23071: PPUSH
23072: CALL_OW 51
// ToLua ( playRanger() ) ;
23076: LD_STRING playRanger()
23078: PPUSH
23079: CALL_OW 559
// p := 0 ;
23083: LD_ADDR_VAR 0 2
23087: PUSH
23088: LD_INT 0
23090: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23091: LD_INT 35
23093: PPUSH
23094: CALL_OW 67
// p := p + 1 ;
23098: LD_ADDR_VAR 0 2
23102: PUSH
23103: LD_VAR 0 2
23107: PUSH
23108: LD_INT 1
23110: PLUS
23111: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23112: LD_VAR 0 3
23116: PPUSH
23117: CALL_OW 256
23121: PUSH
23122: LD_INT 1000
23124: LESS
23125: IFFALSE 23139
// SetLives ( un , 1000 ) ;
23127: LD_VAR 0 3
23131: PPUSH
23132: LD_INT 1000
23134: PPUSH
23135: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23139: LD_VAR 0 3
23143: PPUSH
23144: LD_INT 81
23146: PUSH
23147: LD_OWVAR 2
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 91
23158: PUSH
23159: LD_VAR 0 3
23163: PUSH
23164: LD_INT 30
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: LIST
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PPUSH
23176: CALL_OW 69
23180: PPUSH
23181: LD_VAR 0 3
23185: PPUSH
23186: CALL_OW 74
23190: PPUSH
23191: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23195: LD_VAR 0 2
23199: PUSH
23200: LD_INT 80
23202: GREATER
23203: PUSH
23204: LD_VAR 0 3
23208: PPUSH
23209: CALL_OW 301
23213: OR
23214: IFFALSE 23091
// if un then
23216: LD_VAR 0 3
23220: IFFALSE 23231
// RemoveUnit ( un ) ;
23222: LD_VAR 0 3
23226: PPUSH
23227: CALL_OW 64
// end ;
23231: PPOPN 3
23233: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23234: LD_EXP 87
23238: IFFALSE 23354
23240: GO 23242
23242: DISABLE
23243: LD_INT 0
23245: PPUSH
23246: PPUSH
23247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_INT 81
23255: PUSH
23256: LD_OWVAR 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 21
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PPUSH
23279: CALL_OW 69
23283: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23284: LD_STRING playComputer()
23286: PPUSH
23287: CALL_OW 559
// if not tmp then
23291: LD_VAR 0 2
23295: NOT
23296: IFFALSE 23300
// exit ;
23298: GO 23354
// for i in tmp do
23300: LD_ADDR_VAR 0 1
23304: PUSH
23305: LD_VAR 0 2
23309: PUSH
23310: FOR_IN
23311: IFFALSE 23352
// for j := 1 to 4 do
23313: LD_ADDR_VAR 0 3
23317: PUSH
23318: DOUBLE
23319: LD_INT 1
23321: DEC
23322: ST_TO_ADDR
23323: LD_INT 4
23325: PUSH
23326: FOR_TO
23327: IFFALSE 23348
// SetSkill ( i , j , 10 ) ;
23329: LD_VAR 0 1
23333: PPUSH
23334: LD_VAR 0 3
23338: PPUSH
23339: LD_INT 10
23341: PPUSH
23342: CALL_OW 237
23346: GO 23326
23348: POP
23349: POP
23350: GO 23310
23352: POP
23353: POP
// end ;
23354: PPOPN 3
23356: END
// every 0 0$1 trigger s30 do var i , tmp ;
23357: LD_EXP 88
23361: IFFALSE 23430
23363: GO 23365
23365: DISABLE
23366: LD_INT 0
23368: PPUSH
23369: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23370: LD_ADDR_VAR 0 2
23374: PUSH
23375: LD_INT 22
23377: PUSH
23378: LD_OWVAR 2
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PPUSH
23387: CALL_OW 69
23391: ST_TO_ADDR
// if not tmp then
23392: LD_VAR 0 2
23396: NOT
23397: IFFALSE 23401
// exit ;
23399: GO 23430
// for i in tmp do
23401: LD_ADDR_VAR 0 1
23405: PUSH
23406: LD_VAR 0 2
23410: PUSH
23411: FOR_IN
23412: IFFALSE 23428
// SetLives ( i , 300 ) ;
23414: LD_VAR 0 1
23418: PPUSH
23419: LD_INT 300
23421: PPUSH
23422: CALL_OW 234
23426: GO 23411
23428: POP
23429: POP
// end ;
23430: PPOPN 2
23432: END
// every 0 0$1 trigger s60 do var i , tmp ;
23433: LD_EXP 89
23437: IFFALSE 23506
23439: GO 23441
23441: DISABLE
23442: LD_INT 0
23444: PPUSH
23445: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23446: LD_ADDR_VAR 0 2
23450: PUSH
23451: LD_INT 22
23453: PUSH
23454: LD_OWVAR 2
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PPUSH
23463: CALL_OW 69
23467: ST_TO_ADDR
// if not tmp then
23468: LD_VAR 0 2
23472: NOT
23473: IFFALSE 23477
// exit ;
23475: GO 23506
// for i in tmp do
23477: LD_ADDR_VAR 0 1
23481: PUSH
23482: LD_VAR 0 2
23486: PUSH
23487: FOR_IN
23488: IFFALSE 23504
// SetLives ( i , 600 ) ;
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_INT 600
23497: PPUSH
23498: CALL_OW 234
23502: GO 23487
23504: POP
23505: POP
// end ;
23506: PPOPN 2
23508: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23509: LD_INT 0
23511: PPUSH
// case cmd of 301 :
23512: LD_VAR 0 1
23516: PUSH
23517: LD_INT 301
23519: DOUBLE
23520: EQUAL
23521: IFTRUE 23525
23523: GO 23557
23525: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23526: LD_VAR 0 6
23530: PPUSH
23531: LD_VAR 0 7
23535: PPUSH
23536: LD_VAR 0 8
23540: PPUSH
23541: LD_VAR 0 4
23545: PPUSH
23546: LD_VAR 0 5
23550: PPUSH
23551: CALL 24758 0 5
23555: GO 23678
23557: LD_INT 302
23559: DOUBLE
23560: EQUAL
23561: IFTRUE 23565
23563: GO 23602
23565: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23566: LD_VAR 0 6
23570: PPUSH
23571: LD_VAR 0 7
23575: PPUSH
23576: LD_VAR 0 8
23580: PPUSH
23581: LD_VAR 0 9
23585: PPUSH
23586: LD_VAR 0 4
23590: PPUSH
23591: LD_VAR 0 5
23595: PPUSH
23596: CALL 24849 0 6
23600: GO 23678
23602: LD_INT 303
23604: DOUBLE
23605: EQUAL
23606: IFTRUE 23610
23608: GO 23647
23610: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23611: LD_VAR 0 6
23615: PPUSH
23616: LD_VAR 0 7
23620: PPUSH
23621: LD_VAR 0 8
23625: PPUSH
23626: LD_VAR 0 9
23630: PPUSH
23631: LD_VAR 0 4
23635: PPUSH
23636: LD_VAR 0 5
23640: PPUSH
23641: CALL 23683 0 6
23645: GO 23678
23647: LD_INT 304
23649: DOUBLE
23650: EQUAL
23651: IFTRUE 23655
23653: GO 23677
23655: POP
// hHackTeleport ( unit , x , y ) ; end ;
23656: LD_VAR 0 2
23660: PPUSH
23661: LD_VAR 0 4
23665: PPUSH
23666: LD_VAR 0 5
23670: PPUSH
23671: CALL 25442 0 3
23675: GO 23678
23677: POP
// end ;
23678: LD_VAR 0 12
23682: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23683: LD_INT 0
23685: PPUSH
23686: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23687: LD_VAR 0 1
23691: PUSH
23692: LD_INT 1
23694: LESS
23695: PUSH
23696: LD_VAR 0 1
23700: PUSH
23701: LD_INT 3
23703: GREATER
23704: OR
23705: PUSH
23706: LD_VAR 0 5
23710: PPUSH
23711: LD_VAR 0 6
23715: PPUSH
23716: CALL_OW 428
23720: OR
23721: IFFALSE 23725
// exit ;
23723: GO 24445
// uc_side := your_side ;
23725: LD_ADDR_OWVAR 20
23729: PUSH
23730: LD_OWVAR 2
23734: ST_TO_ADDR
// uc_nation := nation ;
23735: LD_ADDR_OWVAR 21
23739: PUSH
23740: LD_VAR 0 1
23744: ST_TO_ADDR
// bc_level = 1 ;
23745: LD_ADDR_OWVAR 43
23749: PUSH
23750: LD_INT 1
23752: ST_TO_ADDR
// case btype of 1 :
23753: LD_VAR 0 2
23757: PUSH
23758: LD_INT 1
23760: DOUBLE
23761: EQUAL
23762: IFTRUE 23766
23764: GO 23777
23766: POP
// bc_type := b_depot ; 2 :
23767: LD_ADDR_OWVAR 42
23771: PUSH
23772: LD_INT 0
23774: ST_TO_ADDR
23775: GO 24389
23777: LD_INT 2
23779: DOUBLE
23780: EQUAL
23781: IFTRUE 23785
23783: GO 23796
23785: POP
// bc_type := b_warehouse ; 3 :
23786: LD_ADDR_OWVAR 42
23790: PUSH
23791: LD_INT 1
23793: ST_TO_ADDR
23794: GO 24389
23796: LD_INT 3
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23815
23804: POP
// bc_type := b_lab ; 4 .. 9 :
23805: LD_ADDR_OWVAR 42
23809: PUSH
23810: LD_INT 6
23812: ST_TO_ADDR
23813: GO 24389
23815: LD_INT 4
23817: DOUBLE
23818: GREATEREQUAL
23819: IFFALSE 23827
23821: LD_INT 9
23823: DOUBLE
23824: LESSEQUAL
23825: IFTRUE 23829
23827: GO 23881
23829: POP
// begin bc_type := b_lab_half ;
23830: LD_ADDR_OWVAR 42
23834: PUSH
23835: LD_INT 7
23837: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23838: LD_ADDR_OWVAR 44
23842: PUSH
23843: LD_INT 10
23845: PUSH
23846: LD_INT 11
23848: PUSH
23849: LD_INT 12
23851: PUSH
23852: LD_INT 15
23854: PUSH
23855: LD_INT 14
23857: PUSH
23858: LD_INT 13
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: PUSH
23869: LD_VAR 0 2
23873: PUSH
23874: LD_INT 3
23876: MINUS
23877: ARRAY
23878: ST_TO_ADDR
// end ; 10 .. 13 :
23879: GO 24389
23881: LD_INT 10
23883: DOUBLE
23884: GREATEREQUAL
23885: IFFALSE 23893
23887: LD_INT 13
23889: DOUBLE
23890: LESSEQUAL
23891: IFTRUE 23895
23893: GO 23972
23895: POP
// begin bc_type := b_lab_full ;
23896: LD_ADDR_OWVAR 42
23900: PUSH
23901: LD_INT 8
23903: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23904: LD_ADDR_OWVAR 44
23908: PUSH
23909: LD_INT 10
23911: PUSH
23912: LD_INT 12
23914: PUSH
23915: LD_INT 14
23917: PUSH
23918: LD_INT 13
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: PUSH
23927: LD_VAR 0 2
23931: PUSH
23932: LD_INT 9
23934: MINUS
23935: ARRAY
23936: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23937: LD_ADDR_OWVAR 45
23941: PUSH
23942: LD_INT 11
23944: PUSH
23945: LD_INT 15
23947: PUSH
23948: LD_INT 12
23950: PUSH
23951: LD_INT 15
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: PUSH
23960: LD_VAR 0 2
23964: PUSH
23965: LD_INT 9
23967: MINUS
23968: ARRAY
23969: ST_TO_ADDR
// end ; 14 :
23970: GO 24389
23972: LD_INT 14
23974: DOUBLE
23975: EQUAL
23976: IFTRUE 23980
23978: GO 23991
23980: POP
// bc_type := b_workshop ; 15 :
23981: LD_ADDR_OWVAR 42
23985: PUSH
23986: LD_INT 2
23988: ST_TO_ADDR
23989: GO 24389
23991: LD_INT 15
23993: DOUBLE
23994: EQUAL
23995: IFTRUE 23999
23997: GO 24010
23999: POP
// bc_type := b_factory ; 16 :
24000: LD_ADDR_OWVAR 42
24004: PUSH
24005: LD_INT 3
24007: ST_TO_ADDR
24008: GO 24389
24010: LD_INT 16
24012: DOUBLE
24013: EQUAL
24014: IFTRUE 24018
24016: GO 24029
24018: POP
// bc_type := b_ext_gun ; 17 :
24019: LD_ADDR_OWVAR 42
24023: PUSH
24024: LD_INT 17
24026: ST_TO_ADDR
24027: GO 24389
24029: LD_INT 17
24031: DOUBLE
24032: EQUAL
24033: IFTRUE 24037
24035: GO 24065
24037: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24038: LD_ADDR_OWVAR 42
24042: PUSH
24043: LD_INT 19
24045: PUSH
24046: LD_INT 23
24048: PUSH
24049: LD_INT 19
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: PUSH
24057: LD_VAR 0 1
24061: ARRAY
24062: ST_TO_ADDR
24063: GO 24389
24065: LD_INT 18
24067: DOUBLE
24068: EQUAL
24069: IFTRUE 24073
24071: GO 24084
24073: POP
// bc_type := b_ext_radar ; 19 :
24074: LD_ADDR_OWVAR 42
24078: PUSH
24079: LD_INT 20
24081: ST_TO_ADDR
24082: GO 24389
24084: LD_INT 19
24086: DOUBLE
24087: EQUAL
24088: IFTRUE 24092
24090: GO 24103
24092: POP
// bc_type := b_ext_radio ; 20 :
24093: LD_ADDR_OWVAR 42
24097: PUSH
24098: LD_INT 22
24100: ST_TO_ADDR
24101: GO 24389
24103: LD_INT 20
24105: DOUBLE
24106: EQUAL
24107: IFTRUE 24111
24109: GO 24122
24111: POP
// bc_type := b_ext_siberium ; 21 :
24112: LD_ADDR_OWVAR 42
24116: PUSH
24117: LD_INT 21
24119: ST_TO_ADDR
24120: GO 24389
24122: LD_INT 21
24124: DOUBLE
24125: EQUAL
24126: IFTRUE 24130
24128: GO 24141
24130: POP
// bc_type := b_ext_computer ; 22 :
24131: LD_ADDR_OWVAR 42
24135: PUSH
24136: LD_INT 24
24138: ST_TO_ADDR
24139: GO 24389
24141: LD_INT 22
24143: DOUBLE
24144: EQUAL
24145: IFTRUE 24149
24147: GO 24160
24149: POP
// bc_type := b_ext_track ; 23 :
24150: LD_ADDR_OWVAR 42
24154: PUSH
24155: LD_INT 16
24157: ST_TO_ADDR
24158: GO 24389
24160: LD_INT 23
24162: DOUBLE
24163: EQUAL
24164: IFTRUE 24168
24166: GO 24179
24168: POP
// bc_type := b_ext_laser ; 24 :
24169: LD_ADDR_OWVAR 42
24173: PUSH
24174: LD_INT 25
24176: ST_TO_ADDR
24177: GO 24389
24179: LD_INT 24
24181: DOUBLE
24182: EQUAL
24183: IFTRUE 24187
24185: GO 24198
24187: POP
// bc_type := b_control_tower ; 25 :
24188: LD_ADDR_OWVAR 42
24192: PUSH
24193: LD_INT 36
24195: ST_TO_ADDR
24196: GO 24389
24198: LD_INT 25
24200: DOUBLE
24201: EQUAL
24202: IFTRUE 24206
24204: GO 24217
24206: POP
// bc_type := b_breastwork ; 26 :
24207: LD_ADDR_OWVAR 42
24211: PUSH
24212: LD_INT 31
24214: ST_TO_ADDR
24215: GO 24389
24217: LD_INT 26
24219: DOUBLE
24220: EQUAL
24221: IFTRUE 24225
24223: GO 24236
24225: POP
// bc_type := b_bunker ; 27 :
24226: LD_ADDR_OWVAR 42
24230: PUSH
24231: LD_INT 32
24233: ST_TO_ADDR
24234: GO 24389
24236: LD_INT 27
24238: DOUBLE
24239: EQUAL
24240: IFTRUE 24244
24242: GO 24255
24244: POP
// bc_type := b_turret ; 28 :
24245: LD_ADDR_OWVAR 42
24249: PUSH
24250: LD_INT 33
24252: ST_TO_ADDR
24253: GO 24389
24255: LD_INT 28
24257: DOUBLE
24258: EQUAL
24259: IFTRUE 24263
24261: GO 24274
24263: POP
// bc_type := b_armoury ; 29 :
24264: LD_ADDR_OWVAR 42
24268: PUSH
24269: LD_INT 4
24271: ST_TO_ADDR
24272: GO 24389
24274: LD_INT 29
24276: DOUBLE
24277: EQUAL
24278: IFTRUE 24282
24280: GO 24293
24282: POP
// bc_type := b_barracks ; 30 :
24283: LD_ADDR_OWVAR 42
24287: PUSH
24288: LD_INT 5
24290: ST_TO_ADDR
24291: GO 24389
24293: LD_INT 30
24295: DOUBLE
24296: EQUAL
24297: IFTRUE 24301
24299: GO 24312
24301: POP
// bc_type := b_solar_power ; 31 :
24302: LD_ADDR_OWVAR 42
24306: PUSH
24307: LD_INT 27
24309: ST_TO_ADDR
24310: GO 24389
24312: LD_INT 31
24314: DOUBLE
24315: EQUAL
24316: IFTRUE 24320
24318: GO 24331
24320: POP
// bc_type := b_oil_power ; 32 :
24321: LD_ADDR_OWVAR 42
24325: PUSH
24326: LD_INT 26
24328: ST_TO_ADDR
24329: GO 24389
24331: LD_INT 32
24333: DOUBLE
24334: EQUAL
24335: IFTRUE 24339
24337: GO 24350
24339: POP
// bc_type := b_siberite_power ; 33 :
24340: LD_ADDR_OWVAR 42
24344: PUSH
24345: LD_INT 28
24347: ST_TO_ADDR
24348: GO 24389
24350: LD_INT 33
24352: DOUBLE
24353: EQUAL
24354: IFTRUE 24358
24356: GO 24369
24358: POP
// bc_type := b_oil_mine ; 34 :
24359: LD_ADDR_OWVAR 42
24363: PUSH
24364: LD_INT 29
24366: ST_TO_ADDR
24367: GO 24389
24369: LD_INT 34
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24388
24377: POP
// bc_type := b_siberite_mine ; end ;
24378: LD_ADDR_OWVAR 42
24382: PUSH
24383: LD_INT 30
24385: ST_TO_ADDR
24386: GO 24389
24388: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24389: LD_ADDR_VAR 0 8
24393: PUSH
24394: LD_VAR 0 5
24398: PPUSH
24399: LD_VAR 0 6
24403: PPUSH
24404: LD_VAR 0 3
24408: PPUSH
24409: CALL_OW 47
24413: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24414: LD_OWVAR 42
24418: PUSH
24419: LD_INT 32
24421: PUSH
24422: LD_INT 33
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: IN
24429: IFFALSE 24445
// PlaceWeaponTurret ( b , weapon ) ;
24431: LD_VAR 0 8
24435: PPUSH
24436: LD_VAR 0 4
24440: PPUSH
24441: CALL_OW 431
// end ;
24445: LD_VAR 0 7
24449: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24450: LD_INT 0
24452: PPUSH
24453: PPUSH
24454: PPUSH
24455: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24456: LD_ADDR_VAR 0 4
24460: PUSH
24461: LD_INT 22
24463: PUSH
24464: LD_OWVAR 2
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 2
24475: PUSH
24476: LD_INT 30
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 30
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PPUSH
24505: CALL_OW 69
24509: ST_TO_ADDR
// if not tmp then
24510: LD_VAR 0 4
24514: NOT
24515: IFFALSE 24519
// exit ;
24517: GO 24578
// for i in tmp do
24519: LD_ADDR_VAR 0 2
24523: PUSH
24524: LD_VAR 0 4
24528: PUSH
24529: FOR_IN
24530: IFFALSE 24576
// for j = 1 to 3 do
24532: LD_ADDR_VAR 0 3
24536: PUSH
24537: DOUBLE
24538: LD_INT 1
24540: DEC
24541: ST_TO_ADDR
24542: LD_INT 3
24544: PUSH
24545: FOR_TO
24546: IFFALSE 24572
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24548: LD_VAR 0 2
24552: PPUSH
24553: CALL_OW 274
24557: PPUSH
24558: LD_VAR 0 3
24562: PPUSH
24563: LD_INT 99999
24565: PPUSH
24566: CALL_OW 277
24570: GO 24545
24572: POP
24573: POP
24574: GO 24529
24576: POP
24577: POP
// end ;
24578: LD_VAR 0 1
24582: RET
// export function hHackSetLevel10 ; var i , j ; begin
24583: LD_INT 0
24585: PPUSH
24586: PPUSH
24587: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24588: LD_ADDR_VAR 0 2
24592: PUSH
24593: LD_INT 21
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PPUSH
24603: CALL_OW 69
24607: PUSH
24608: FOR_IN
24609: IFFALSE 24661
// if IsSelected ( i ) then
24611: LD_VAR 0 2
24615: PPUSH
24616: CALL_OW 306
24620: IFFALSE 24659
// begin for j := 1 to 4 do
24622: LD_ADDR_VAR 0 3
24626: PUSH
24627: DOUBLE
24628: LD_INT 1
24630: DEC
24631: ST_TO_ADDR
24632: LD_INT 4
24634: PUSH
24635: FOR_TO
24636: IFFALSE 24657
// SetSkill ( i , j , 10 ) ;
24638: LD_VAR 0 2
24642: PPUSH
24643: LD_VAR 0 3
24647: PPUSH
24648: LD_INT 10
24650: PPUSH
24651: CALL_OW 237
24655: GO 24635
24657: POP
24658: POP
// end ;
24659: GO 24608
24661: POP
24662: POP
// end ;
24663: LD_VAR 0 1
24667: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24668: LD_INT 0
24670: PPUSH
24671: PPUSH
24672: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24673: LD_ADDR_VAR 0 2
24677: PUSH
24678: LD_INT 22
24680: PUSH
24681: LD_OWVAR 2
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 21
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PPUSH
24704: CALL_OW 69
24708: PUSH
24709: FOR_IN
24710: IFFALSE 24751
// begin for j := 1 to 4 do
24712: LD_ADDR_VAR 0 3
24716: PUSH
24717: DOUBLE
24718: LD_INT 1
24720: DEC
24721: ST_TO_ADDR
24722: LD_INT 4
24724: PUSH
24725: FOR_TO
24726: IFFALSE 24747
// SetSkill ( i , j , 10 ) ;
24728: LD_VAR 0 2
24732: PPUSH
24733: LD_VAR 0 3
24737: PPUSH
24738: LD_INT 10
24740: PPUSH
24741: CALL_OW 237
24745: GO 24725
24747: POP
24748: POP
// end ;
24749: GO 24709
24751: POP
24752: POP
// end ;
24753: LD_VAR 0 1
24757: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24758: LD_INT 0
24760: PPUSH
// uc_side := your_side ;
24761: LD_ADDR_OWVAR 20
24765: PUSH
24766: LD_OWVAR 2
24770: ST_TO_ADDR
// uc_nation := nation ;
24771: LD_ADDR_OWVAR 21
24775: PUSH
24776: LD_VAR 0 1
24780: ST_TO_ADDR
// InitHc ;
24781: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24785: LD_INT 0
24787: PPUSH
24788: LD_VAR 0 2
24792: PPUSH
24793: LD_VAR 0 3
24797: PPUSH
24798: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24802: LD_VAR 0 4
24806: PPUSH
24807: LD_VAR 0 5
24811: PPUSH
24812: CALL_OW 428
24816: PUSH
24817: LD_INT 0
24819: EQUAL
24820: IFFALSE 24844
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24822: CALL_OW 44
24826: PPUSH
24827: LD_VAR 0 4
24831: PPUSH
24832: LD_VAR 0 5
24836: PPUSH
24837: LD_INT 1
24839: PPUSH
24840: CALL_OW 48
// end ;
24844: LD_VAR 0 6
24848: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24849: LD_INT 0
24851: PPUSH
24852: PPUSH
// uc_side := your_side ;
24853: LD_ADDR_OWVAR 20
24857: PUSH
24858: LD_OWVAR 2
24862: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24863: LD_VAR 0 1
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: LD_INT 3
24876: PUSH
24877: LD_INT 4
24879: PUSH
24880: LD_INT 5
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: IN
24890: IFFALSE 24902
// uc_nation := nation_american else
24892: LD_ADDR_OWVAR 21
24896: PUSH
24897: LD_INT 1
24899: ST_TO_ADDR
24900: GO 24945
// if chassis in [ 11 , 12 , 13 , 14 ] then
24902: LD_VAR 0 1
24906: PUSH
24907: LD_INT 11
24909: PUSH
24910: LD_INT 12
24912: PUSH
24913: LD_INT 13
24915: PUSH
24916: LD_INT 14
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: IN
24925: IFFALSE 24937
// uc_nation := nation_arabian else
24927: LD_ADDR_OWVAR 21
24931: PUSH
24932: LD_INT 2
24934: ST_TO_ADDR
24935: GO 24945
// uc_nation := nation_russian ;
24937: LD_ADDR_OWVAR 21
24941: PUSH
24942: LD_INT 3
24944: ST_TO_ADDR
// vc_chassis := chassis ;
24945: LD_ADDR_OWVAR 37
24949: PUSH
24950: LD_VAR 0 1
24954: ST_TO_ADDR
// vc_engine := engine ;
24955: LD_ADDR_OWVAR 39
24959: PUSH
24960: LD_VAR 0 2
24964: ST_TO_ADDR
// vc_control := control ;
24965: LD_ADDR_OWVAR 38
24969: PUSH
24970: LD_VAR 0 3
24974: ST_TO_ADDR
// vc_weapon := weapon ;
24975: LD_ADDR_OWVAR 40
24979: PUSH
24980: LD_VAR 0 4
24984: ST_TO_ADDR
// un := CreateVehicle ;
24985: LD_ADDR_VAR 0 8
24989: PUSH
24990: CALL_OW 45
24994: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24995: LD_VAR 0 8
24999: PPUSH
25000: LD_INT 0
25002: PPUSH
25003: LD_INT 5
25005: PPUSH
25006: CALL_OW 12
25010: PPUSH
25011: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25015: LD_VAR 0 8
25019: PPUSH
25020: LD_VAR 0 5
25024: PPUSH
25025: LD_VAR 0 6
25029: PPUSH
25030: LD_INT 1
25032: PPUSH
25033: CALL_OW 48
// end ;
25037: LD_VAR 0 7
25041: RET
// export hInvincible ; every 1 do
25042: GO 25044
25044: DISABLE
// hInvincible := [ ] ;
25045: LD_ADDR_EXP 90
25049: PUSH
25050: EMPTY
25051: ST_TO_ADDR
25052: END
// every 10 do var i ;
25053: GO 25055
25055: DISABLE
25056: LD_INT 0
25058: PPUSH
// begin enable ;
25059: ENABLE
// if not hInvincible then
25060: LD_EXP 90
25064: NOT
25065: IFFALSE 25069
// exit ;
25067: GO 25113
// for i in hInvincible do
25069: LD_ADDR_VAR 0 1
25073: PUSH
25074: LD_EXP 90
25078: PUSH
25079: FOR_IN
25080: IFFALSE 25111
// if GetLives ( i ) < 1000 then
25082: LD_VAR 0 1
25086: PPUSH
25087: CALL_OW 256
25091: PUSH
25092: LD_INT 1000
25094: LESS
25095: IFFALSE 25109
// SetLives ( i , 1000 ) ;
25097: LD_VAR 0 1
25101: PPUSH
25102: LD_INT 1000
25104: PPUSH
25105: CALL_OW 234
25109: GO 25079
25111: POP
25112: POP
// end ;
25113: PPOPN 1
25115: END
// export function hHackInvincible ; var i ; begin
25116: LD_INT 0
25118: PPUSH
25119: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25120: LD_ADDR_VAR 0 2
25124: PUSH
25125: LD_INT 2
25127: PUSH
25128: LD_INT 21
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 21
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: PPUSH
25153: CALL_OW 69
25157: PUSH
25158: FOR_IN
25159: IFFALSE 25220
// if IsSelected ( i ) then
25161: LD_VAR 0 2
25165: PPUSH
25166: CALL_OW 306
25170: IFFALSE 25218
// begin if i in hInvincible then
25172: LD_VAR 0 2
25176: PUSH
25177: LD_EXP 90
25181: IN
25182: IFFALSE 25202
// hInvincible := hInvincible diff i else
25184: LD_ADDR_EXP 90
25188: PUSH
25189: LD_EXP 90
25193: PUSH
25194: LD_VAR 0 2
25198: DIFF
25199: ST_TO_ADDR
25200: GO 25218
// hInvincible := hInvincible union i ;
25202: LD_ADDR_EXP 90
25206: PUSH
25207: LD_EXP 90
25211: PUSH
25212: LD_VAR 0 2
25216: UNION
25217: ST_TO_ADDR
// end ;
25218: GO 25158
25220: POP
25221: POP
// end ;
25222: LD_VAR 0 1
25226: RET
// export function hHackInvisible ; var i , j ; begin
25227: LD_INT 0
25229: PPUSH
25230: PPUSH
25231: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25232: LD_ADDR_VAR 0 2
25236: PUSH
25237: LD_INT 21
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PPUSH
25247: CALL_OW 69
25251: PUSH
25252: FOR_IN
25253: IFFALSE 25277
// if IsSelected ( i ) then
25255: LD_VAR 0 2
25259: PPUSH
25260: CALL_OW 306
25264: IFFALSE 25275
// ComForceInvisible ( i ) ;
25266: LD_VAR 0 2
25270: PPUSH
25271: CALL_OW 496
25275: GO 25252
25277: POP
25278: POP
// end ;
25279: LD_VAR 0 1
25283: RET
// export function hHackChangeYourSide ; begin
25284: LD_INT 0
25286: PPUSH
// if your_side = 8 then
25287: LD_OWVAR 2
25291: PUSH
25292: LD_INT 8
25294: EQUAL
25295: IFFALSE 25307
// your_side := 0 else
25297: LD_ADDR_OWVAR 2
25301: PUSH
25302: LD_INT 0
25304: ST_TO_ADDR
25305: GO 25321
// your_side := your_side + 1 ;
25307: LD_ADDR_OWVAR 2
25311: PUSH
25312: LD_OWVAR 2
25316: PUSH
25317: LD_INT 1
25319: PLUS
25320: ST_TO_ADDR
// end ;
25321: LD_VAR 0 1
25325: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25326: LD_INT 0
25328: PPUSH
25329: PPUSH
25330: PPUSH
// for i in all_units do
25331: LD_ADDR_VAR 0 2
25335: PUSH
25336: LD_OWVAR 3
25340: PUSH
25341: FOR_IN
25342: IFFALSE 25420
// if IsSelected ( i ) then
25344: LD_VAR 0 2
25348: PPUSH
25349: CALL_OW 306
25353: IFFALSE 25418
// begin j := GetSide ( i ) ;
25355: LD_ADDR_VAR 0 3
25359: PUSH
25360: LD_VAR 0 2
25364: PPUSH
25365: CALL_OW 255
25369: ST_TO_ADDR
// if j = 8 then
25370: LD_VAR 0 3
25374: PUSH
25375: LD_INT 8
25377: EQUAL
25378: IFFALSE 25390
// j := 0 else
25380: LD_ADDR_VAR 0 3
25384: PUSH
25385: LD_INT 0
25387: ST_TO_ADDR
25388: GO 25404
// j := j + 1 ;
25390: LD_ADDR_VAR 0 3
25394: PUSH
25395: LD_VAR 0 3
25399: PUSH
25400: LD_INT 1
25402: PLUS
25403: ST_TO_ADDR
// SetSide ( i , j ) ;
25404: LD_VAR 0 2
25408: PPUSH
25409: LD_VAR 0 3
25413: PPUSH
25414: CALL_OW 235
// end ;
25418: GO 25341
25420: POP
25421: POP
// end ;
25422: LD_VAR 0 1
25426: RET
// export function hHackFog ; begin
25427: LD_INT 0
25429: PPUSH
// FogOff ( true ) ;
25430: LD_INT 1
25432: PPUSH
25433: CALL_OW 344
// end ;
25437: LD_VAR 0 1
25441: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25442: LD_INT 0
25444: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25445: LD_VAR 0 1
25449: PPUSH
25450: LD_VAR 0 2
25454: PPUSH
25455: LD_VAR 0 3
25459: PPUSH
25460: LD_INT 1
25462: PPUSH
25463: LD_INT 1
25465: PPUSH
25466: CALL_OW 483
// CenterOnXY ( x , y ) ;
25470: LD_VAR 0 2
25474: PPUSH
25475: LD_VAR 0 3
25479: PPUSH
25480: CALL_OW 84
// end ; end_of_file
25484: LD_VAR 0 4
25488: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25489: LD_INT 0
25491: PPUSH
25492: PPUSH
25493: PPUSH
25494: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25495: LD_VAR 0 1
25499: PPUSH
25500: CALL_OW 264
25504: PUSH
25505: LD_EXP 18
25509: EQUAL
25510: IFFALSE 25582
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25512: LD_INT 68
25514: PPUSH
25515: LD_VAR 0 1
25519: PPUSH
25520: CALL_OW 255
25524: PPUSH
25525: CALL_OW 321
25529: PUSH
25530: LD_INT 2
25532: EQUAL
25533: IFFALSE 25545
// eff := 70 else
25535: LD_ADDR_VAR 0 4
25539: PUSH
25540: LD_INT 70
25542: ST_TO_ADDR
25543: GO 25553
// eff := 30 ;
25545: LD_ADDR_VAR 0 4
25549: PUSH
25550: LD_INT 30
25552: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25553: LD_VAR 0 1
25557: PPUSH
25558: CALL_OW 250
25562: PPUSH
25563: LD_VAR 0 1
25567: PPUSH
25568: CALL_OW 251
25572: PPUSH
25573: LD_VAR 0 4
25577: PPUSH
25578: CALL_OW 495
// end ; end ;
25582: LD_VAR 0 2
25586: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25587: LD_INT 0
25589: PPUSH
// end ;
25590: LD_VAR 0 4
25594: RET
// export function SOS_Command ( cmd ) ; begin
25595: LD_INT 0
25597: PPUSH
// end ;
25598: LD_VAR 0 2
25602: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25603: LD_INT 0
25605: PPUSH
// end ;
25606: LD_VAR 0 6
25610: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25611: LD_INT 0
25613: PPUSH
25614: PPUSH
// if not vehicle or not factory then
25615: LD_VAR 0 1
25619: NOT
25620: PUSH
25621: LD_VAR 0 2
25625: NOT
25626: OR
25627: IFFALSE 25631
// exit ;
25629: GO 25862
// if factoryWaypoints >= factory then
25631: LD_EXP 91
25635: PUSH
25636: LD_VAR 0 2
25640: GREATEREQUAL
25641: IFFALSE 25862
// if factoryWaypoints [ factory ] then
25643: LD_EXP 91
25647: PUSH
25648: LD_VAR 0 2
25652: ARRAY
25653: IFFALSE 25862
// begin if GetControl ( vehicle ) = control_manual then
25655: LD_VAR 0 1
25659: PPUSH
25660: CALL_OW 263
25664: PUSH
25665: LD_INT 1
25667: EQUAL
25668: IFFALSE 25749
// begin driver := IsDrivenBy ( vehicle ) ;
25670: LD_ADDR_VAR 0 4
25674: PUSH
25675: LD_VAR 0 1
25679: PPUSH
25680: CALL_OW 311
25684: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25685: LD_VAR 0 4
25689: PPUSH
25690: LD_EXP 91
25694: PUSH
25695: LD_VAR 0 2
25699: ARRAY
25700: PUSH
25701: LD_INT 3
25703: ARRAY
25704: PPUSH
25705: LD_EXP 91
25709: PUSH
25710: LD_VAR 0 2
25714: ARRAY
25715: PUSH
25716: LD_INT 4
25718: ARRAY
25719: PPUSH
25720: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25724: LD_VAR 0 4
25728: PPUSH
25729: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25733: LD_VAR 0 4
25737: PPUSH
25738: LD_VAR 0 2
25742: PPUSH
25743: CALL_OW 180
// end else
25747: GO 25862
// if GetControl ( vehicle ) = control_remote then
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 263
25758: PUSH
25759: LD_INT 2
25761: EQUAL
25762: IFFALSE 25823
// begin wait ( 0 0$2 ) ;
25764: LD_INT 70
25766: PPUSH
25767: CALL_OW 67
// if Connect ( vehicle ) then
25771: LD_VAR 0 1
25775: PPUSH
25776: CALL 38086 0 1
25780: IFFALSE 25821
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25782: LD_VAR 0 1
25786: PPUSH
25787: LD_EXP 91
25791: PUSH
25792: LD_VAR 0 2
25796: ARRAY
25797: PUSH
25798: LD_INT 3
25800: ARRAY
25801: PPUSH
25802: LD_EXP 91
25806: PUSH
25807: LD_VAR 0 2
25811: ARRAY
25812: PUSH
25813: LD_INT 4
25815: ARRAY
25816: PPUSH
25817: CALL_OW 171
// end else
25821: GO 25862
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25823: LD_VAR 0 1
25827: PPUSH
25828: LD_EXP 91
25832: PUSH
25833: LD_VAR 0 2
25837: ARRAY
25838: PUSH
25839: LD_INT 3
25841: ARRAY
25842: PPUSH
25843: LD_EXP 91
25847: PUSH
25848: LD_VAR 0 2
25852: ARRAY
25853: PUSH
25854: LD_INT 4
25856: ARRAY
25857: PPUSH
25858: CALL_OW 171
// end ; end ;
25862: LD_VAR 0 3
25866: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25867: LD_INT 0
25869: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25870: LD_VAR 0 1
25874: PUSH
25875: LD_INT 250
25877: EQUAL
25878: PUSH
25879: LD_VAR 0 2
25883: PPUSH
25884: CALL_OW 264
25888: PUSH
25889: LD_EXP 21
25893: EQUAL
25894: AND
25895: IFFALSE 25916
// MinerPlaceMine ( unit , x , y ) ;
25897: LD_VAR 0 2
25901: PPUSH
25902: LD_VAR 0 4
25906: PPUSH
25907: LD_VAR 0 5
25911: PPUSH
25912: CALL 28644 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25916: LD_VAR 0 1
25920: PUSH
25921: LD_INT 251
25923: EQUAL
25924: PUSH
25925: LD_VAR 0 2
25929: PPUSH
25930: CALL_OW 264
25934: PUSH
25935: LD_EXP 21
25939: EQUAL
25940: AND
25941: IFFALSE 25962
// MinerDetonateMine ( unit , x , y ) ;
25943: LD_VAR 0 2
25947: PPUSH
25948: LD_VAR 0 4
25952: PPUSH
25953: LD_VAR 0 5
25957: PPUSH
25958: CALL 28921 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25962: LD_VAR 0 1
25966: PUSH
25967: LD_INT 252
25969: EQUAL
25970: PUSH
25971: LD_VAR 0 2
25975: PPUSH
25976: CALL_OW 264
25980: PUSH
25981: LD_EXP 21
25985: EQUAL
25986: AND
25987: IFFALSE 26008
// MinerCreateMinefield ( unit , x , y ) ;
25989: LD_VAR 0 2
25993: PPUSH
25994: LD_VAR 0 4
25998: PPUSH
25999: LD_VAR 0 5
26003: PPUSH
26004: CALL 29338 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26008: LD_VAR 0 1
26012: PUSH
26013: LD_INT 253
26015: EQUAL
26016: PUSH
26017: LD_VAR 0 2
26021: PPUSH
26022: CALL_OW 257
26026: PUSH
26027: LD_INT 5
26029: EQUAL
26030: AND
26031: IFFALSE 26052
// ComBinocular ( unit , x , y ) ;
26033: LD_VAR 0 2
26037: PPUSH
26038: LD_VAR 0 4
26042: PPUSH
26043: LD_VAR 0 5
26047: PPUSH
26048: CALL 29709 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26052: LD_VAR 0 1
26056: PUSH
26057: LD_INT 254
26059: EQUAL
26060: PUSH
26061: LD_VAR 0 2
26065: PPUSH
26066: CALL_OW 264
26070: PUSH
26071: LD_EXP 16
26075: EQUAL
26076: AND
26077: PUSH
26078: LD_VAR 0 3
26082: PPUSH
26083: CALL_OW 263
26087: PUSH
26088: LD_INT 3
26090: EQUAL
26091: AND
26092: IFFALSE 26108
// HackDestroyVehicle ( unit , selectedUnit ) ;
26094: LD_VAR 0 2
26098: PPUSH
26099: LD_VAR 0 3
26103: PPUSH
26104: CALL 28004 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26108: LD_VAR 0 1
26112: PUSH
26113: LD_INT 255
26115: EQUAL
26116: PUSH
26117: LD_VAR 0 2
26121: PPUSH
26122: CALL_OW 264
26126: PUSH
26127: LD_INT 14
26129: PUSH
26130: LD_INT 53
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: IN
26137: AND
26138: PUSH
26139: LD_VAR 0 4
26143: PPUSH
26144: LD_VAR 0 5
26148: PPUSH
26149: CALL_OW 488
26153: AND
26154: IFFALSE 26178
// CutTreeXYR ( unit , x , y , 12 ) ;
26156: LD_VAR 0 2
26160: PPUSH
26161: LD_VAR 0 4
26165: PPUSH
26166: LD_VAR 0 5
26170: PPUSH
26171: LD_INT 12
26173: PPUSH
26174: CALL 26570 0 4
// if cmd = 256 then
26178: LD_VAR 0 1
26182: PUSH
26183: LD_INT 256
26185: EQUAL
26186: IFFALSE 26207
// SetFactoryWaypoint ( unit , x , y ) ;
26188: LD_VAR 0 2
26192: PPUSH
26193: LD_VAR 0 4
26197: PPUSH
26198: LD_VAR 0 5
26202: PPUSH
26203: CALL 26212 0 3
// end ;
26207: LD_VAR 0 6
26211: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26212: LD_INT 0
26214: PPUSH
26215: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26216: LD_VAR 0 1
26220: NOT
26221: PUSH
26222: LD_VAR 0 2
26226: PPUSH
26227: LD_VAR 0 3
26231: PPUSH
26232: CALL_OW 488
26236: NOT
26237: OR
26238: PUSH
26239: LD_VAR 0 1
26243: PPUSH
26244: CALL_OW 266
26248: PUSH
26249: LD_INT 3
26251: NONEQUAL
26252: PUSH
26253: LD_VAR 0 1
26257: PPUSH
26258: CALL_OW 247
26262: PUSH
26263: LD_INT 1
26265: EQUAL
26266: NOT
26267: AND
26268: OR
26269: IFFALSE 26273
// exit ;
26271: GO 26422
// if GetType ( factory ) = unit_human then
26273: LD_VAR 0 1
26277: PPUSH
26278: CALL_OW 247
26282: PUSH
26283: LD_INT 1
26285: EQUAL
26286: IFFALSE 26303
// factory := IsInUnit ( factory ) ;
26288: LD_ADDR_VAR 0 1
26292: PUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 310
26302: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26303: LD_VAR 0 1
26307: PPUSH
26308: CALL_OW 266
26312: PUSH
26313: LD_INT 3
26315: NONEQUAL
26316: IFFALSE 26320
// exit ;
26318: GO 26422
// if HexInfo ( x , y ) = factory then
26320: LD_VAR 0 2
26324: PPUSH
26325: LD_VAR 0 3
26329: PPUSH
26330: CALL_OW 428
26334: PUSH
26335: LD_VAR 0 1
26339: EQUAL
26340: IFFALSE 26367
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26342: LD_ADDR_EXP 91
26346: PUSH
26347: LD_EXP 91
26351: PPUSH
26352: LD_VAR 0 1
26356: PPUSH
26357: LD_INT 0
26359: PPUSH
26360: CALL_OW 1
26364: ST_TO_ADDR
26365: GO 26418
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26367: LD_ADDR_EXP 91
26371: PUSH
26372: LD_EXP 91
26376: PPUSH
26377: LD_VAR 0 1
26381: PPUSH
26382: LD_VAR 0 1
26386: PPUSH
26387: CALL_OW 255
26391: PUSH
26392: LD_VAR 0 1
26396: PUSH
26397: LD_VAR 0 2
26401: PUSH
26402: LD_VAR 0 3
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: PPUSH
26413: CALL_OW 1
26417: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26418: CALL 26427 0 0
// end ;
26422: LD_VAR 0 4
26426: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26427: LD_INT 0
26429: PPUSH
26430: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26431: LD_STRING resetFactoryWaypoint();
26433: PPUSH
26434: CALL_OW 559
// if factoryWaypoints then
26438: LD_EXP 91
26442: IFFALSE 26565
// begin for i := 1 to factoryWaypoints do
26444: LD_ADDR_VAR 0 2
26448: PUSH
26449: DOUBLE
26450: LD_INT 1
26452: DEC
26453: ST_TO_ADDR
26454: LD_EXP 91
26458: PUSH
26459: FOR_TO
26460: IFFALSE 26563
// if factoryWaypoints [ i ] then
26462: LD_EXP 91
26466: PUSH
26467: LD_VAR 0 2
26471: ARRAY
26472: IFFALSE 26561
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26474: LD_STRING setFactoryWaypointXY(
26476: PUSH
26477: LD_EXP 91
26481: PUSH
26482: LD_VAR 0 2
26486: ARRAY
26487: PUSH
26488: LD_INT 1
26490: ARRAY
26491: STR
26492: PUSH
26493: LD_STRING ,
26495: STR
26496: PUSH
26497: LD_EXP 91
26501: PUSH
26502: LD_VAR 0 2
26506: ARRAY
26507: PUSH
26508: LD_INT 2
26510: ARRAY
26511: STR
26512: PUSH
26513: LD_STRING ,
26515: STR
26516: PUSH
26517: LD_EXP 91
26521: PUSH
26522: LD_VAR 0 2
26526: ARRAY
26527: PUSH
26528: LD_INT 3
26530: ARRAY
26531: STR
26532: PUSH
26533: LD_STRING ,
26535: STR
26536: PUSH
26537: LD_EXP 91
26541: PUSH
26542: LD_VAR 0 2
26546: ARRAY
26547: PUSH
26548: LD_INT 4
26550: ARRAY
26551: STR
26552: PUSH
26553: LD_STRING )
26555: STR
26556: PPUSH
26557: CALL_OW 559
26561: GO 26459
26563: POP
26564: POP
// end ; end ;
26565: LD_VAR 0 1
26569: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26570: LD_INT 0
26572: PPUSH
26573: PPUSH
26574: PPUSH
26575: PPUSH
26576: PPUSH
26577: PPUSH
26578: PPUSH
26579: PPUSH
26580: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26581: LD_VAR 0 1
26585: NOT
26586: PUSH
26587: LD_VAR 0 2
26591: PPUSH
26592: LD_VAR 0 3
26596: PPUSH
26597: CALL_OW 488
26601: NOT
26602: OR
26603: PUSH
26604: LD_VAR 0 4
26608: NOT
26609: OR
26610: IFFALSE 26614
// exit ;
26612: GO 26954
// list := [ ] ;
26614: LD_ADDR_VAR 0 13
26618: PUSH
26619: EMPTY
26620: ST_TO_ADDR
// if x - r < 0 then
26621: LD_VAR 0 2
26625: PUSH
26626: LD_VAR 0 4
26630: MINUS
26631: PUSH
26632: LD_INT 0
26634: LESS
26635: IFFALSE 26647
// min_x := 0 else
26637: LD_ADDR_VAR 0 7
26641: PUSH
26642: LD_INT 0
26644: ST_TO_ADDR
26645: GO 26663
// min_x := x - r ;
26647: LD_ADDR_VAR 0 7
26651: PUSH
26652: LD_VAR 0 2
26656: PUSH
26657: LD_VAR 0 4
26661: MINUS
26662: ST_TO_ADDR
// if y - r < 0 then
26663: LD_VAR 0 3
26667: PUSH
26668: LD_VAR 0 4
26672: MINUS
26673: PUSH
26674: LD_INT 0
26676: LESS
26677: IFFALSE 26689
// min_y := 0 else
26679: LD_ADDR_VAR 0 8
26683: PUSH
26684: LD_INT 0
26686: ST_TO_ADDR
26687: GO 26705
// min_y := y - r ;
26689: LD_ADDR_VAR 0 8
26693: PUSH
26694: LD_VAR 0 3
26698: PUSH
26699: LD_VAR 0 4
26703: MINUS
26704: ST_TO_ADDR
// max_x := x + r ;
26705: LD_ADDR_VAR 0 9
26709: PUSH
26710: LD_VAR 0 2
26714: PUSH
26715: LD_VAR 0 4
26719: PLUS
26720: ST_TO_ADDR
// max_y := y + r ;
26721: LD_ADDR_VAR 0 10
26725: PUSH
26726: LD_VAR 0 3
26730: PUSH
26731: LD_VAR 0 4
26735: PLUS
26736: ST_TO_ADDR
// for _x = min_x to max_x do
26737: LD_ADDR_VAR 0 11
26741: PUSH
26742: DOUBLE
26743: LD_VAR 0 7
26747: DEC
26748: ST_TO_ADDR
26749: LD_VAR 0 9
26753: PUSH
26754: FOR_TO
26755: IFFALSE 26872
// for _y = min_y to max_y do
26757: LD_ADDR_VAR 0 12
26761: PUSH
26762: DOUBLE
26763: LD_VAR 0 8
26767: DEC
26768: ST_TO_ADDR
26769: LD_VAR 0 10
26773: PUSH
26774: FOR_TO
26775: IFFALSE 26868
// begin if not ValidHex ( _x , _y ) then
26777: LD_VAR 0 11
26781: PPUSH
26782: LD_VAR 0 12
26786: PPUSH
26787: CALL_OW 488
26791: NOT
26792: IFFALSE 26796
// continue ;
26794: GO 26774
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26796: LD_VAR 0 11
26800: PPUSH
26801: LD_VAR 0 12
26805: PPUSH
26806: CALL_OW 351
26810: PUSH
26811: LD_VAR 0 11
26815: PPUSH
26816: LD_VAR 0 12
26820: PPUSH
26821: CALL_OW 554
26825: AND
26826: IFFALSE 26866
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26828: LD_ADDR_VAR 0 13
26832: PUSH
26833: LD_VAR 0 13
26837: PPUSH
26838: LD_VAR 0 13
26842: PUSH
26843: LD_INT 1
26845: PLUS
26846: PPUSH
26847: LD_VAR 0 11
26851: PUSH
26852: LD_VAR 0 12
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PPUSH
26861: CALL_OW 2
26865: ST_TO_ADDR
// end ;
26866: GO 26774
26868: POP
26869: POP
26870: GO 26754
26872: POP
26873: POP
// if not list then
26874: LD_VAR 0 13
26878: NOT
26879: IFFALSE 26883
// exit ;
26881: GO 26954
// for i in list do
26883: LD_ADDR_VAR 0 6
26887: PUSH
26888: LD_VAR 0 13
26892: PUSH
26893: FOR_IN
26894: IFFALSE 26952
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26896: LD_VAR 0 1
26900: PPUSH
26901: LD_STRING M
26903: PUSH
26904: LD_VAR 0 6
26908: PUSH
26909: LD_INT 1
26911: ARRAY
26912: PUSH
26913: LD_VAR 0 6
26917: PUSH
26918: LD_INT 2
26920: ARRAY
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: PUSH
26943: EMPTY
26944: LIST
26945: PPUSH
26946: CALL_OW 447
26950: GO 26893
26952: POP
26953: POP
// end ;
26954: LD_VAR 0 5
26958: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26959: LD_EXP 92
26963: NOT
26964: IFFALSE 27014
26966: GO 26968
26968: DISABLE
// begin initHack := true ;
26969: LD_ADDR_EXP 92
26973: PUSH
26974: LD_INT 1
26976: ST_TO_ADDR
// hackTanks := [ ] ;
26977: LD_ADDR_EXP 93
26981: PUSH
26982: EMPTY
26983: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26984: LD_ADDR_EXP 94
26988: PUSH
26989: EMPTY
26990: ST_TO_ADDR
// hackLimit := 3 ;
26991: LD_ADDR_EXP 95
26995: PUSH
26996: LD_INT 3
26998: ST_TO_ADDR
// hackDist := 12 ;
26999: LD_ADDR_EXP 96
27003: PUSH
27004: LD_INT 12
27006: ST_TO_ADDR
// hackCounter := [ ] ;
27007: LD_ADDR_EXP 97
27011: PUSH
27012: EMPTY
27013: ST_TO_ADDR
// end ;
27014: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27015: LD_EXP 92
27019: PUSH
27020: LD_INT 34
27022: PUSH
27023: LD_EXP 16
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PPUSH
27032: CALL_OW 69
27036: AND
27037: IFFALSE 27292
27039: GO 27041
27041: DISABLE
27042: LD_INT 0
27044: PPUSH
27045: PPUSH
// begin enable ;
27046: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27047: LD_ADDR_VAR 0 1
27051: PUSH
27052: LD_INT 34
27054: PUSH
27055: LD_EXP 16
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PPUSH
27064: CALL_OW 69
27068: PUSH
27069: FOR_IN
27070: IFFALSE 27290
// begin if not i in hackTanks then
27072: LD_VAR 0 1
27076: PUSH
27077: LD_EXP 93
27081: IN
27082: NOT
27083: IFFALSE 27166
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27085: LD_ADDR_EXP 93
27089: PUSH
27090: LD_EXP 93
27094: PPUSH
27095: LD_EXP 93
27099: PUSH
27100: LD_INT 1
27102: PLUS
27103: PPUSH
27104: LD_VAR 0 1
27108: PPUSH
27109: CALL_OW 1
27113: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27114: LD_ADDR_EXP 94
27118: PUSH
27119: LD_EXP 94
27123: PPUSH
27124: LD_EXP 94
27128: PUSH
27129: LD_INT 1
27131: PLUS
27132: PPUSH
27133: EMPTY
27134: PPUSH
27135: CALL_OW 1
27139: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27140: LD_ADDR_EXP 97
27144: PUSH
27145: LD_EXP 97
27149: PPUSH
27150: LD_EXP 97
27154: PUSH
27155: LD_INT 1
27157: PLUS
27158: PPUSH
27159: EMPTY
27160: PPUSH
27161: CALL_OW 1
27165: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27166: LD_VAR 0 1
27170: PPUSH
27171: CALL_OW 302
27175: NOT
27176: IFFALSE 27189
// begin HackUnlinkAll ( i ) ;
27178: LD_VAR 0 1
27182: PPUSH
27183: CALL 27295 0 1
// continue ;
27187: GO 27069
// end ; HackCheckCapturedStatus ( i ) ;
27189: LD_VAR 0 1
27193: PPUSH
27194: CALL 27738 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27198: LD_ADDR_VAR 0 2
27202: PUSH
27203: LD_INT 81
27205: PUSH
27206: LD_VAR 0 1
27210: PPUSH
27211: CALL_OW 255
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 33
27222: PUSH
27223: LD_INT 3
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 91
27232: PUSH
27233: LD_VAR 0 1
27237: PUSH
27238: LD_EXP 96
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 50
27250: PUSH
27251: EMPTY
27252: LIST
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL_OW 69
27264: ST_TO_ADDR
// if not tmp then
27265: LD_VAR 0 2
27269: NOT
27270: IFFALSE 27274
// continue ;
27272: GO 27069
// HackLink ( i , tmp ) ;
27274: LD_VAR 0 1
27278: PPUSH
27279: LD_VAR 0 2
27283: PPUSH
27284: CALL 27431 0 2
// end ;
27288: GO 27069
27290: POP
27291: POP
// end ;
27292: PPOPN 2
27294: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27295: LD_INT 0
27297: PPUSH
27298: PPUSH
27299: PPUSH
// if not hack in hackTanks then
27300: LD_VAR 0 1
27304: PUSH
27305: LD_EXP 93
27309: IN
27310: NOT
27311: IFFALSE 27315
// exit ;
27313: GO 27426
// index := GetElementIndex ( hackTanks , hack ) ;
27315: LD_ADDR_VAR 0 4
27319: PUSH
27320: LD_EXP 93
27324: PPUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL 34900 0 2
27334: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27335: LD_EXP 94
27339: PUSH
27340: LD_VAR 0 4
27344: ARRAY
27345: IFFALSE 27426
// begin for i in hackTanksCaptured [ index ] do
27347: LD_ADDR_VAR 0 3
27351: PUSH
27352: LD_EXP 94
27356: PUSH
27357: LD_VAR 0 4
27361: ARRAY
27362: PUSH
27363: FOR_IN
27364: IFFALSE 27390
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27366: LD_VAR 0 3
27370: PUSH
27371: LD_INT 1
27373: ARRAY
27374: PPUSH
27375: LD_VAR 0 3
27379: PUSH
27380: LD_INT 2
27382: ARRAY
27383: PPUSH
27384: CALL_OW 235
27388: GO 27363
27390: POP
27391: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27392: LD_ADDR_EXP 94
27396: PUSH
27397: LD_EXP 94
27401: PPUSH
27402: LD_VAR 0 4
27406: PPUSH
27407: EMPTY
27408: PPUSH
27409: CALL_OW 1
27413: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27414: LD_VAR 0 1
27418: PPUSH
27419: LD_INT 0
27421: PPUSH
27422: CALL_OW 505
// end ; end ;
27426: LD_VAR 0 2
27430: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27431: LD_INT 0
27433: PPUSH
27434: PPUSH
27435: PPUSH
// if not hack in hackTanks or not vehicles then
27436: LD_VAR 0 1
27440: PUSH
27441: LD_EXP 93
27445: IN
27446: NOT
27447: PUSH
27448: LD_VAR 0 2
27452: NOT
27453: OR
27454: IFFALSE 27458
// exit ;
27456: GO 27733
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27458: LD_ADDR_VAR 0 2
27462: PUSH
27463: LD_VAR 0 1
27467: PPUSH
27468: LD_VAR 0 2
27472: PPUSH
27473: LD_INT 1
27475: PPUSH
27476: LD_INT 1
27478: PPUSH
27479: CALL 35550 0 4
27483: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27484: LD_ADDR_VAR 0 5
27488: PUSH
27489: LD_EXP 93
27493: PPUSH
27494: LD_VAR 0 1
27498: PPUSH
27499: CALL 34900 0 2
27503: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27504: LD_EXP 94
27508: PUSH
27509: LD_VAR 0 5
27513: ARRAY
27514: PUSH
27515: LD_EXP 95
27519: LESS
27520: IFFALSE 27709
// begin for i := 1 to vehicles do
27522: LD_ADDR_VAR 0 4
27526: PUSH
27527: DOUBLE
27528: LD_INT 1
27530: DEC
27531: ST_TO_ADDR
27532: LD_VAR 0 2
27536: PUSH
27537: FOR_TO
27538: IFFALSE 27707
// begin if hackTanksCaptured [ index ] = hackLimit then
27540: LD_EXP 94
27544: PUSH
27545: LD_VAR 0 5
27549: ARRAY
27550: PUSH
27551: LD_EXP 95
27555: EQUAL
27556: IFFALSE 27560
// break ;
27558: GO 27707
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27560: LD_ADDR_EXP 97
27564: PUSH
27565: LD_EXP 97
27569: PPUSH
27570: LD_VAR 0 5
27574: PPUSH
27575: LD_EXP 97
27579: PUSH
27580: LD_VAR 0 5
27584: ARRAY
27585: PUSH
27586: LD_INT 1
27588: PLUS
27589: PPUSH
27590: CALL_OW 1
27594: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27595: LD_ADDR_EXP 94
27599: PUSH
27600: LD_EXP 94
27604: PPUSH
27605: LD_VAR 0 5
27609: PUSH
27610: LD_EXP 94
27614: PUSH
27615: LD_VAR 0 5
27619: ARRAY
27620: PUSH
27621: LD_INT 1
27623: PLUS
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PPUSH
27629: LD_VAR 0 2
27633: PUSH
27634: LD_VAR 0 4
27638: ARRAY
27639: PUSH
27640: LD_VAR 0 2
27644: PUSH
27645: LD_VAR 0 4
27649: ARRAY
27650: PPUSH
27651: CALL_OW 255
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PPUSH
27660: CALL 35115 0 3
27664: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27665: LD_VAR 0 2
27669: PUSH
27670: LD_VAR 0 4
27674: ARRAY
27675: PPUSH
27676: LD_VAR 0 1
27680: PPUSH
27681: CALL_OW 255
27685: PPUSH
27686: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27690: LD_VAR 0 2
27694: PUSH
27695: LD_VAR 0 4
27699: ARRAY
27700: PPUSH
27701: CALL_OW 141
// end ;
27705: GO 27537
27707: POP
27708: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27709: LD_VAR 0 1
27713: PPUSH
27714: LD_EXP 94
27718: PUSH
27719: LD_VAR 0 5
27723: ARRAY
27724: PUSH
27725: LD_INT 0
27727: PLUS
27728: PPUSH
27729: CALL_OW 505
// end ;
27733: LD_VAR 0 3
27737: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27738: LD_INT 0
27740: PPUSH
27741: PPUSH
27742: PPUSH
27743: PPUSH
// if not hack in hackTanks then
27744: LD_VAR 0 1
27748: PUSH
27749: LD_EXP 93
27753: IN
27754: NOT
27755: IFFALSE 27759
// exit ;
27757: GO 27999
// index := GetElementIndex ( hackTanks , hack ) ;
27759: LD_ADDR_VAR 0 4
27763: PUSH
27764: LD_EXP 93
27768: PPUSH
27769: LD_VAR 0 1
27773: PPUSH
27774: CALL 34900 0 2
27778: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27779: LD_ADDR_VAR 0 3
27783: PUSH
27784: DOUBLE
27785: LD_EXP 94
27789: PUSH
27790: LD_VAR 0 4
27794: ARRAY
27795: INC
27796: ST_TO_ADDR
27797: LD_INT 1
27799: PUSH
27800: FOR_DOWNTO
27801: IFFALSE 27973
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27803: LD_ADDR_VAR 0 5
27807: PUSH
27808: LD_EXP 94
27812: PUSH
27813: LD_VAR 0 4
27817: ARRAY
27818: PUSH
27819: LD_VAR 0 3
27823: ARRAY
27824: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27825: LD_VAR 0 5
27829: PUSH
27830: LD_INT 1
27832: ARRAY
27833: PPUSH
27834: CALL_OW 302
27838: NOT
27839: PUSH
27840: LD_VAR 0 5
27844: PUSH
27845: LD_INT 1
27847: ARRAY
27848: PPUSH
27849: CALL_OW 255
27853: PUSH
27854: LD_VAR 0 1
27858: PPUSH
27859: CALL_OW 255
27863: NONEQUAL
27864: OR
27865: IFFALSE 27971
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27867: LD_VAR 0 5
27871: PUSH
27872: LD_INT 1
27874: ARRAY
27875: PPUSH
27876: CALL_OW 305
27880: PUSH
27881: LD_VAR 0 5
27885: PUSH
27886: LD_INT 1
27888: ARRAY
27889: PPUSH
27890: CALL_OW 255
27894: PUSH
27895: LD_VAR 0 1
27899: PPUSH
27900: CALL_OW 255
27904: EQUAL
27905: AND
27906: IFFALSE 27930
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27908: LD_VAR 0 5
27912: PUSH
27913: LD_INT 1
27915: ARRAY
27916: PPUSH
27917: LD_VAR 0 5
27921: PUSH
27922: LD_INT 2
27924: ARRAY
27925: PPUSH
27926: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27930: LD_ADDR_EXP 94
27934: PUSH
27935: LD_EXP 94
27939: PPUSH
27940: LD_VAR 0 4
27944: PPUSH
27945: LD_EXP 94
27949: PUSH
27950: LD_VAR 0 4
27954: ARRAY
27955: PPUSH
27956: LD_VAR 0 3
27960: PPUSH
27961: CALL_OW 3
27965: PPUSH
27966: CALL_OW 1
27970: ST_TO_ADDR
// end ; end ;
27971: GO 27800
27973: POP
27974: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27975: LD_VAR 0 1
27979: PPUSH
27980: LD_EXP 94
27984: PUSH
27985: LD_VAR 0 4
27989: ARRAY
27990: PUSH
27991: LD_INT 0
27993: PLUS
27994: PPUSH
27995: CALL_OW 505
// end ;
27999: LD_VAR 0 2
28003: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28004: LD_INT 0
28006: PPUSH
28007: PPUSH
28008: PPUSH
28009: PPUSH
// if not hack in hackTanks then
28010: LD_VAR 0 1
28014: PUSH
28015: LD_EXP 93
28019: IN
28020: NOT
28021: IFFALSE 28025
// exit ;
28023: GO 28110
// index := GetElementIndex ( hackTanks , hack ) ;
28025: LD_ADDR_VAR 0 5
28029: PUSH
28030: LD_EXP 93
28034: PPUSH
28035: LD_VAR 0 1
28039: PPUSH
28040: CALL 34900 0 2
28044: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28045: LD_ADDR_VAR 0 4
28049: PUSH
28050: DOUBLE
28051: LD_INT 1
28053: DEC
28054: ST_TO_ADDR
28055: LD_EXP 94
28059: PUSH
28060: LD_VAR 0 5
28064: ARRAY
28065: PUSH
28066: FOR_TO
28067: IFFALSE 28108
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28069: LD_EXP 94
28073: PUSH
28074: LD_VAR 0 5
28078: ARRAY
28079: PUSH
28080: LD_VAR 0 4
28084: ARRAY
28085: PUSH
28086: LD_INT 1
28088: ARRAY
28089: PUSH
28090: LD_VAR 0 2
28094: EQUAL
28095: IFFALSE 28106
// KillUnit ( vehicle ) ;
28097: LD_VAR 0 2
28101: PPUSH
28102: CALL_OW 66
28106: GO 28066
28108: POP
28109: POP
// end ;
28110: LD_VAR 0 3
28114: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28115: LD_EXP 98
28119: NOT
28120: IFFALSE 28155
28122: GO 28124
28124: DISABLE
// begin initMiner := true ;
28125: LD_ADDR_EXP 98
28129: PUSH
28130: LD_INT 1
28132: ST_TO_ADDR
// minersList := [ ] ;
28133: LD_ADDR_EXP 99
28137: PUSH
28138: EMPTY
28139: ST_TO_ADDR
// minerMinesList := [ ] ;
28140: LD_ADDR_EXP 100
28144: PUSH
28145: EMPTY
28146: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28147: LD_ADDR_EXP 101
28151: PUSH
28152: LD_INT 5
28154: ST_TO_ADDR
// end ;
28155: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28156: LD_EXP 98
28160: PUSH
28161: LD_INT 34
28163: PUSH
28164: LD_EXP 21
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PPUSH
28173: CALL_OW 69
28177: AND
28178: IFFALSE 28641
28180: GO 28182
28182: DISABLE
28183: LD_INT 0
28185: PPUSH
28186: PPUSH
28187: PPUSH
28188: PPUSH
// begin enable ;
28189: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28190: LD_ADDR_VAR 0 1
28194: PUSH
28195: LD_INT 34
28197: PUSH
28198: LD_EXP 21
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PPUSH
28207: CALL_OW 69
28211: PUSH
28212: FOR_IN
28213: IFFALSE 28285
// begin if not i in minersList then
28215: LD_VAR 0 1
28219: PUSH
28220: LD_EXP 99
28224: IN
28225: NOT
28226: IFFALSE 28283
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28228: LD_ADDR_EXP 99
28232: PUSH
28233: LD_EXP 99
28237: PPUSH
28238: LD_EXP 99
28242: PUSH
28243: LD_INT 1
28245: PLUS
28246: PPUSH
28247: LD_VAR 0 1
28251: PPUSH
28252: CALL_OW 1
28256: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28257: LD_ADDR_EXP 100
28261: PUSH
28262: LD_EXP 100
28266: PPUSH
28267: LD_EXP 100
28271: PUSH
28272: LD_INT 1
28274: PLUS
28275: PPUSH
28276: EMPTY
28277: PPUSH
28278: CALL_OW 1
28282: ST_TO_ADDR
// end end ;
28283: GO 28212
28285: POP
28286: POP
// for i := minerMinesList downto 1 do
28287: LD_ADDR_VAR 0 1
28291: PUSH
28292: DOUBLE
28293: LD_EXP 100
28297: INC
28298: ST_TO_ADDR
28299: LD_INT 1
28301: PUSH
28302: FOR_DOWNTO
28303: IFFALSE 28639
// begin if IsLive ( minersList [ i ] ) then
28305: LD_EXP 99
28309: PUSH
28310: LD_VAR 0 1
28314: ARRAY
28315: PPUSH
28316: CALL_OW 300
28320: IFFALSE 28348
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28322: LD_EXP 99
28326: PUSH
28327: LD_VAR 0 1
28331: ARRAY
28332: PPUSH
28333: LD_EXP 100
28337: PUSH
28338: LD_VAR 0 1
28342: ARRAY
28343: PPUSH
28344: CALL_OW 505
// if not minerMinesList [ i ] then
28348: LD_EXP 100
28352: PUSH
28353: LD_VAR 0 1
28357: ARRAY
28358: NOT
28359: IFFALSE 28363
// continue ;
28361: GO 28302
// for j := minerMinesList [ i ] downto 1 do
28363: LD_ADDR_VAR 0 2
28367: PUSH
28368: DOUBLE
28369: LD_EXP 100
28373: PUSH
28374: LD_VAR 0 1
28378: ARRAY
28379: INC
28380: ST_TO_ADDR
28381: LD_INT 1
28383: PUSH
28384: FOR_DOWNTO
28385: IFFALSE 28635
// begin side := GetSide ( minersList [ i ] ) ;
28387: LD_ADDR_VAR 0 3
28391: PUSH
28392: LD_EXP 99
28396: PUSH
28397: LD_VAR 0 1
28401: ARRAY
28402: PPUSH
28403: CALL_OW 255
28407: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28408: LD_ADDR_VAR 0 4
28412: PUSH
28413: LD_EXP 100
28417: PUSH
28418: LD_VAR 0 1
28422: ARRAY
28423: PUSH
28424: LD_VAR 0 2
28428: ARRAY
28429: PUSH
28430: LD_INT 1
28432: ARRAY
28433: PPUSH
28434: LD_EXP 100
28438: PUSH
28439: LD_VAR 0 1
28443: ARRAY
28444: PUSH
28445: LD_VAR 0 2
28449: ARRAY
28450: PUSH
28451: LD_INT 2
28453: ARRAY
28454: PPUSH
28455: CALL_OW 428
28459: ST_TO_ADDR
// if not tmp then
28460: LD_VAR 0 4
28464: NOT
28465: IFFALSE 28469
// continue ;
28467: GO 28384
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28469: LD_VAR 0 4
28473: PUSH
28474: LD_INT 81
28476: PUSH
28477: LD_VAR 0 3
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PPUSH
28486: CALL_OW 69
28490: IN
28491: PUSH
28492: LD_EXP 100
28496: PUSH
28497: LD_VAR 0 1
28501: ARRAY
28502: PUSH
28503: LD_VAR 0 2
28507: ARRAY
28508: PUSH
28509: LD_INT 1
28511: ARRAY
28512: PPUSH
28513: LD_EXP 100
28517: PUSH
28518: LD_VAR 0 1
28522: ARRAY
28523: PUSH
28524: LD_VAR 0 2
28528: ARRAY
28529: PUSH
28530: LD_INT 2
28532: ARRAY
28533: PPUSH
28534: CALL_OW 458
28538: AND
28539: IFFALSE 28633
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28541: LD_EXP 100
28545: PUSH
28546: LD_VAR 0 1
28550: ARRAY
28551: PUSH
28552: LD_VAR 0 2
28556: ARRAY
28557: PUSH
28558: LD_INT 1
28560: ARRAY
28561: PPUSH
28562: LD_EXP 100
28566: PUSH
28567: LD_VAR 0 1
28571: ARRAY
28572: PUSH
28573: LD_VAR 0 2
28577: ARRAY
28578: PUSH
28579: LD_INT 2
28581: ARRAY
28582: PPUSH
28583: LD_VAR 0 3
28587: PPUSH
28588: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28592: LD_ADDR_EXP 100
28596: PUSH
28597: LD_EXP 100
28601: PPUSH
28602: LD_VAR 0 1
28606: PPUSH
28607: LD_EXP 100
28611: PUSH
28612: LD_VAR 0 1
28616: ARRAY
28617: PPUSH
28618: LD_VAR 0 2
28622: PPUSH
28623: CALL_OW 3
28627: PPUSH
28628: CALL_OW 1
28632: ST_TO_ADDR
// end ; end ;
28633: GO 28384
28635: POP
28636: POP
// end ;
28637: GO 28302
28639: POP
28640: POP
// end ;
28641: PPOPN 4
28643: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28644: LD_INT 0
28646: PPUSH
28647: PPUSH
// result := false ;
28648: LD_ADDR_VAR 0 4
28652: PUSH
28653: LD_INT 0
28655: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28656: LD_VAR 0 1
28660: PPUSH
28661: CALL_OW 264
28665: PUSH
28666: LD_EXP 21
28670: EQUAL
28671: NOT
28672: IFFALSE 28676
// exit ;
28674: GO 28916
// index := GetElementIndex ( minersList , unit ) ;
28676: LD_ADDR_VAR 0 5
28680: PUSH
28681: LD_EXP 99
28685: PPUSH
28686: LD_VAR 0 1
28690: PPUSH
28691: CALL 34900 0 2
28695: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28696: LD_EXP 100
28700: PUSH
28701: LD_VAR 0 5
28705: ARRAY
28706: PUSH
28707: LD_EXP 101
28711: GREATEREQUAL
28712: IFFALSE 28716
// exit ;
28714: GO 28916
// ComMoveXY ( unit , x , y ) ;
28716: LD_VAR 0 1
28720: PPUSH
28721: LD_VAR 0 2
28725: PPUSH
28726: LD_VAR 0 3
28730: PPUSH
28731: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28735: LD_INT 35
28737: PPUSH
28738: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28742: LD_VAR 0 1
28746: PPUSH
28747: LD_VAR 0 2
28751: PPUSH
28752: LD_VAR 0 3
28756: PPUSH
28757: CALL 65619 0 3
28761: NOT
28762: PUSH
28763: LD_VAR 0 1
28767: PPUSH
28768: CALL_OW 314
28772: AND
28773: IFFALSE 28777
// exit ;
28775: GO 28916
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28777: LD_VAR 0 2
28781: PPUSH
28782: LD_VAR 0 3
28786: PPUSH
28787: CALL_OW 428
28791: PUSH
28792: LD_VAR 0 1
28796: EQUAL
28797: PUSH
28798: LD_VAR 0 1
28802: PPUSH
28803: CALL_OW 314
28807: NOT
28808: AND
28809: IFFALSE 28735
// PlaySoundXY ( x , y , PlantMine ) ;
28811: LD_VAR 0 2
28815: PPUSH
28816: LD_VAR 0 3
28820: PPUSH
28821: LD_STRING PlantMine
28823: PPUSH
28824: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28828: LD_VAR 0 2
28832: PPUSH
28833: LD_VAR 0 3
28837: PPUSH
28838: LD_VAR 0 1
28842: PPUSH
28843: CALL_OW 255
28847: PPUSH
28848: LD_INT 0
28850: PPUSH
28851: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28855: LD_ADDR_EXP 100
28859: PUSH
28860: LD_EXP 100
28864: PPUSH
28865: LD_VAR 0 5
28869: PUSH
28870: LD_EXP 100
28874: PUSH
28875: LD_VAR 0 5
28879: ARRAY
28880: PUSH
28881: LD_INT 1
28883: PLUS
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PPUSH
28889: LD_VAR 0 2
28893: PUSH
28894: LD_VAR 0 3
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PPUSH
28903: CALL 35115 0 3
28907: ST_TO_ADDR
// result := true ;
28908: LD_ADDR_VAR 0 4
28912: PUSH
28913: LD_INT 1
28915: ST_TO_ADDR
// end ;
28916: LD_VAR 0 4
28920: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28921: LD_INT 0
28923: PPUSH
28924: PPUSH
28925: PPUSH
// if not unit in minersList then
28926: LD_VAR 0 1
28930: PUSH
28931: LD_EXP 99
28935: IN
28936: NOT
28937: IFFALSE 28941
// exit ;
28939: GO 29333
// index := GetElementIndex ( minersList , unit ) ;
28941: LD_ADDR_VAR 0 6
28945: PUSH
28946: LD_EXP 99
28950: PPUSH
28951: LD_VAR 0 1
28955: PPUSH
28956: CALL 34900 0 2
28960: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28961: LD_ADDR_VAR 0 5
28965: PUSH
28966: DOUBLE
28967: LD_EXP 100
28971: PUSH
28972: LD_VAR 0 6
28976: ARRAY
28977: INC
28978: ST_TO_ADDR
28979: LD_INT 1
28981: PUSH
28982: FOR_DOWNTO
28983: IFFALSE 29144
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28985: LD_EXP 100
28989: PUSH
28990: LD_VAR 0 6
28994: ARRAY
28995: PUSH
28996: LD_VAR 0 5
29000: ARRAY
29001: PUSH
29002: LD_INT 1
29004: ARRAY
29005: PUSH
29006: LD_VAR 0 2
29010: EQUAL
29011: PUSH
29012: LD_EXP 100
29016: PUSH
29017: LD_VAR 0 6
29021: ARRAY
29022: PUSH
29023: LD_VAR 0 5
29027: ARRAY
29028: PUSH
29029: LD_INT 2
29031: ARRAY
29032: PUSH
29033: LD_VAR 0 3
29037: EQUAL
29038: AND
29039: IFFALSE 29142
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29041: LD_EXP 100
29045: PUSH
29046: LD_VAR 0 6
29050: ARRAY
29051: PUSH
29052: LD_VAR 0 5
29056: ARRAY
29057: PUSH
29058: LD_INT 1
29060: ARRAY
29061: PPUSH
29062: LD_EXP 100
29066: PUSH
29067: LD_VAR 0 6
29071: ARRAY
29072: PUSH
29073: LD_VAR 0 5
29077: ARRAY
29078: PUSH
29079: LD_INT 2
29081: ARRAY
29082: PPUSH
29083: LD_VAR 0 1
29087: PPUSH
29088: CALL_OW 255
29092: PPUSH
29093: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29097: LD_ADDR_EXP 100
29101: PUSH
29102: LD_EXP 100
29106: PPUSH
29107: LD_VAR 0 6
29111: PPUSH
29112: LD_EXP 100
29116: PUSH
29117: LD_VAR 0 6
29121: ARRAY
29122: PPUSH
29123: LD_VAR 0 5
29127: PPUSH
29128: CALL_OW 3
29132: PPUSH
29133: CALL_OW 1
29137: ST_TO_ADDR
// exit ;
29138: POP
29139: POP
29140: GO 29333
// end ; end ;
29142: GO 28982
29144: POP
29145: POP
// for i := minerMinesList [ index ] downto 1 do
29146: LD_ADDR_VAR 0 5
29150: PUSH
29151: DOUBLE
29152: LD_EXP 100
29156: PUSH
29157: LD_VAR 0 6
29161: ARRAY
29162: INC
29163: ST_TO_ADDR
29164: LD_INT 1
29166: PUSH
29167: FOR_DOWNTO
29168: IFFALSE 29331
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29170: LD_EXP 100
29174: PUSH
29175: LD_VAR 0 6
29179: ARRAY
29180: PUSH
29181: LD_VAR 0 5
29185: ARRAY
29186: PUSH
29187: LD_INT 1
29189: ARRAY
29190: PPUSH
29191: LD_EXP 100
29195: PUSH
29196: LD_VAR 0 6
29200: ARRAY
29201: PUSH
29202: LD_VAR 0 5
29206: ARRAY
29207: PUSH
29208: LD_INT 2
29210: ARRAY
29211: PPUSH
29212: LD_VAR 0 2
29216: PPUSH
29217: LD_VAR 0 3
29221: PPUSH
29222: CALL_OW 298
29226: PUSH
29227: LD_INT 6
29229: LESS
29230: IFFALSE 29329
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29232: LD_EXP 100
29236: PUSH
29237: LD_VAR 0 6
29241: ARRAY
29242: PUSH
29243: LD_VAR 0 5
29247: ARRAY
29248: PUSH
29249: LD_INT 1
29251: ARRAY
29252: PPUSH
29253: LD_EXP 100
29257: PUSH
29258: LD_VAR 0 6
29262: ARRAY
29263: PUSH
29264: LD_VAR 0 5
29268: ARRAY
29269: PUSH
29270: LD_INT 2
29272: ARRAY
29273: PPUSH
29274: LD_VAR 0 1
29278: PPUSH
29279: CALL_OW 255
29283: PPUSH
29284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29288: LD_ADDR_EXP 100
29292: PUSH
29293: LD_EXP 100
29297: PPUSH
29298: LD_VAR 0 6
29302: PPUSH
29303: LD_EXP 100
29307: PUSH
29308: LD_VAR 0 6
29312: ARRAY
29313: PPUSH
29314: LD_VAR 0 5
29318: PPUSH
29319: CALL_OW 3
29323: PPUSH
29324: CALL_OW 1
29328: ST_TO_ADDR
// end ; end ;
29329: GO 29167
29331: POP
29332: POP
// end ;
29333: LD_VAR 0 4
29337: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29338: LD_INT 0
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29349: LD_VAR 0 1
29353: PPUSH
29354: CALL_OW 264
29358: PUSH
29359: LD_EXP 21
29363: EQUAL
29364: NOT
29365: PUSH
29366: LD_VAR 0 1
29370: PUSH
29371: LD_EXP 99
29375: IN
29376: NOT
29377: OR
29378: IFFALSE 29382
// exit ;
29380: GO 29704
// index := GetElementIndex ( minersList , unit ) ;
29382: LD_ADDR_VAR 0 6
29386: PUSH
29387: LD_EXP 99
29391: PPUSH
29392: LD_VAR 0 1
29396: PPUSH
29397: CALL 34900 0 2
29401: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29402: LD_ADDR_VAR 0 8
29406: PUSH
29407: LD_EXP 101
29411: PUSH
29412: LD_EXP 100
29416: PUSH
29417: LD_VAR 0 6
29421: ARRAY
29422: MINUS
29423: ST_TO_ADDR
// if not minesFreeAmount then
29424: LD_VAR 0 8
29428: NOT
29429: IFFALSE 29433
// exit ;
29431: GO 29704
// tmp := [ ] ;
29433: LD_ADDR_VAR 0 7
29437: PUSH
29438: EMPTY
29439: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29440: LD_ADDR_VAR 0 5
29444: PUSH
29445: DOUBLE
29446: LD_INT 1
29448: DEC
29449: ST_TO_ADDR
29450: LD_VAR 0 8
29454: PUSH
29455: FOR_TO
29456: IFFALSE 29651
// begin _d := rand ( 0 , 5 ) ;
29458: LD_ADDR_VAR 0 11
29462: PUSH
29463: LD_INT 0
29465: PPUSH
29466: LD_INT 5
29468: PPUSH
29469: CALL_OW 12
29473: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29474: LD_ADDR_VAR 0 12
29478: PUSH
29479: LD_INT 2
29481: PPUSH
29482: LD_INT 6
29484: PPUSH
29485: CALL_OW 12
29489: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29490: LD_ADDR_VAR 0 9
29494: PUSH
29495: LD_VAR 0 2
29499: PPUSH
29500: LD_VAR 0 11
29504: PPUSH
29505: LD_VAR 0 12
29509: PPUSH
29510: CALL_OW 272
29514: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29515: LD_ADDR_VAR 0 10
29519: PUSH
29520: LD_VAR 0 3
29524: PPUSH
29525: LD_VAR 0 11
29529: PPUSH
29530: LD_VAR 0 12
29534: PPUSH
29535: CALL_OW 273
29539: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29540: LD_VAR 0 9
29544: PPUSH
29545: LD_VAR 0 10
29549: PPUSH
29550: CALL_OW 488
29554: PUSH
29555: LD_VAR 0 9
29559: PUSH
29560: LD_VAR 0 10
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_VAR 0 7
29573: IN
29574: NOT
29575: AND
29576: PUSH
29577: LD_VAR 0 9
29581: PPUSH
29582: LD_VAR 0 10
29586: PPUSH
29587: CALL_OW 458
29591: NOT
29592: AND
29593: IFFALSE 29635
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29595: LD_ADDR_VAR 0 7
29599: PUSH
29600: LD_VAR 0 7
29604: PPUSH
29605: LD_VAR 0 7
29609: PUSH
29610: LD_INT 1
29612: PLUS
29613: PPUSH
29614: LD_VAR 0 9
29618: PUSH
29619: LD_VAR 0 10
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PPUSH
29628: CALL_OW 1
29632: ST_TO_ADDR
29633: GO 29649
// i := i - 1 ;
29635: LD_ADDR_VAR 0 5
29639: PUSH
29640: LD_VAR 0 5
29644: PUSH
29645: LD_INT 1
29647: MINUS
29648: ST_TO_ADDR
// end ;
29649: GO 29455
29651: POP
29652: POP
// for i in tmp do
29653: LD_ADDR_VAR 0 5
29657: PUSH
29658: LD_VAR 0 7
29662: PUSH
29663: FOR_IN
29664: IFFALSE 29702
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29666: LD_VAR 0 1
29670: PPUSH
29671: LD_VAR 0 5
29675: PUSH
29676: LD_INT 1
29678: ARRAY
29679: PPUSH
29680: LD_VAR 0 5
29684: PUSH
29685: LD_INT 2
29687: ARRAY
29688: PPUSH
29689: CALL 28644 0 3
29693: NOT
29694: IFFALSE 29700
// exit ;
29696: POP
29697: POP
29698: GO 29704
29700: GO 29663
29702: POP
29703: POP
// end ;
29704: LD_VAR 0 4
29708: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29709: LD_INT 0
29711: PPUSH
29712: PPUSH
29713: PPUSH
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
// if not GetClass ( unit ) = class_sniper then
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL_OW 257
29727: PUSH
29728: LD_INT 5
29730: EQUAL
29731: NOT
29732: IFFALSE 29736
// exit ;
29734: GO 30124
// dist := 8 ;
29736: LD_ADDR_VAR 0 5
29740: PUSH
29741: LD_INT 8
29743: ST_TO_ADDR
// viewRange := 12 ;
29744: LD_ADDR_VAR 0 7
29748: PUSH
29749: LD_INT 12
29751: ST_TO_ADDR
// side := GetSide ( unit ) ;
29752: LD_ADDR_VAR 0 6
29756: PUSH
29757: LD_VAR 0 1
29761: PPUSH
29762: CALL_OW 255
29766: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29767: LD_INT 61
29769: PPUSH
29770: LD_VAR 0 6
29774: PPUSH
29775: CALL_OW 321
29779: PUSH
29780: LD_INT 2
29782: EQUAL
29783: IFFALSE 29793
// viewRange := 16 ;
29785: LD_ADDR_VAR 0 7
29789: PUSH
29790: LD_INT 16
29792: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29793: LD_VAR 0 1
29797: PPUSH
29798: LD_VAR 0 2
29802: PPUSH
29803: LD_VAR 0 3
29807: PPUSH
29808: CALL_OW 297
29812: PUSH
29813: LD_VAR 0 5
29817: GREATER
29818: IFFALSE 29897
// begin ComMoveXY ( unit , x , y ) ;
29820: LD_VAR 0 1
29824: PPUSH
29825: LD_VAR 0 2
29829: PPUSH
29830: LD_VAR 0 3
29834: PPUSH
29835: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29839: LD_INT 35
29841: PPUSH
29842: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29846: LD_VAR 0 1
29850: PPUSH
29851: LD_VAR 0 2
29855: PPUSH
29856: LD_VAR 0 3
29860: PPUSH
29861: CALL 65619 0 3
29865: NOT
29866: IFFALSE 29870
// exit ;
29868: GO 30124
// until GetDistUnitXY ( unit , x , y ) < dist ;
29870: LD_VAR 0 1
29874: PPUSH
29875: LD_VAR 0 2
29879: PPUSH
29880: LD_VAR 0 3
29884: PPUSH
29885: CALL_OW 297
29889: PUSH
29890: LD_VAR 0 5
29894: LESS
29895: IFFALSE 29839
// end ; ComTurnXY ( unit , x , y ) ;
29897: LD_VAR 0 1
29901: PPUSH
29902: LD_VAR 0 2
29906: PPUSH
29907: LD_VAR 0 3
29911: PPUSH
29912: CALL_OW 118
// wait ( 5 ) ;
29916: LD_INT 5
29918: PPUSH
29919: CALL_OW 67
// _d := GetDir ( unit ) ;
29923: LD_ADDR_VAR 0 10
29927: PUSH
29928: LD_VAR 0 1
29932: PPUSH
29933: CALL_OW 254
29937: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29938: LD_ADDR_VAR 0 8
29942: PUSH
29943: LD_VAR 0 1
29947: PPUSH
29948: CALL_OW 250
29952: PPUSH
29953: LD_VAR 0 10
29957: PPUSH
29958: LD_VAR 0 5
29962: PPUSH
29963: CALL_OW 272
29967: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29968: LD_ADDR_VAR 0 9
29972: PUSH
29973: LD_VAR 0 1
29977: PPUSH
29978: CALL_OW 251
29982: PPUSH
29983: LD_VAR 0 10
29987: PPUSH
29988: LD_VAR 0 5
29992: PPUSH
29993: CALL_OW 273
29997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29998: LD_VAR 0 8
30002: PPUSH
30003: LD_VAR 0 9
30007: PPUSH
30008: CALL_OW 488
30012: NOT
30013: IFFALSE 30017
// exit ;
30015: GO 30124
// ComAnimCustom ( unit , 1 ) ;
30017: LD_VAR 0 1
30021: PPUSH
30022: LD_INT 1
30024: PPUSH
30025: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30029: LD_VAR 0 8
30033: PPUSH
30034: LD_VAR 0 9
30038: PPUSH
30039: LD_VAR 0 6
30043: PPUSH
30044: LD_VAR 0 7
30048: PPUSH
30049: CALL_OW 330
// repeat wait ( 1 ) ;
30053: LD_INT 1
30055: PPUSH
30056: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 316
30069: PUSH
30070: LD_VAR 0 1
30074: PPUSH
30075: CALL_OW 314
30079: OR
30080: PUSH
30081: LD_VAR 0 1
30085: PPUSH
30086: CALL_OW 302
30090: NOT
30091: OR
30092: PUSH
30093: LD_VAR 0 1
30097: PPUSH
30098: CALL_OW 301
30102: OR
30103: IFFALSE 30053
// RemoveSeeing ( _x , _y , side ) ;
30105: LD_VAR 0 8
30109: PPUSH
30110: LD_VAR 0 9
30114: PPUSH
30115: LD_VAR 0 6
30119: PPUSH
30120: CALL_OW 331
// end ; end_of_file
30124: LD_VAR 0 4
30128: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30129: LD_INT 0
30131: PPUSH
30132: PPUSH
// if exist_mode then
30133: LD_VAR 0 2
30137: IFFALSE 30162
// unit := CreateCharacter ( prefix & ident ) else
30139: LD_ADDR_VAR 0 5
30143: PUSH
30144: LD_VAR 0 3
30148: PUSH
30149: LD_VAR 0 1
30153: STR
30154: PPUSH
30155: CALL_OW 34
30159: ST_TO_ADDR
30160: GO 30177
// unit := NewCharacter ( ident ) ;
30162: LD_ADDR_VAR 0 5
30166: PUSH
30167: LD_VAR 0 1
30171: PPUSH
30172: CALL_OW 25
30176: ST_TO_ADDR
// result := unit ;
30177: LD_ADDR_VAR 0 4
30181: PUSH
30182: LD_VAR 0 5
30186: ST_TO_ADDR
// end ;
30187: LD_VAR 0 4
30191: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30192: LD_INT 0
30194: PPUSH
30195: PPUSH
// if not side or not nation then
30196: LD_VAR 0 1
30200: NOT
30201: PUSH
30202: LD_VAR 0 2
30206: NOT
30207: OR
30208: IFFALSE 30212
// exit ;
30210: GO 30980
// case nation of nation_american :
30212: LD_VAR 0 2
30216: PUSH
30217: LD_INT 1
30219: DOUBLE
30220: EQUAL
30221: IFTRUE 30225
30223: GO 30439
30225: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30226: LD_ADDR_VAR 0 4
30230: PUSH
30231: LD_INT 35
30233: PUSH
30234: LD_INT 45
30236: PUSH
30237: LD_INT 46
30239: PUSH
30240: LD_INT 47
30242: PUSH
30243: LD_INT 82
30245: PUSH
30246: LD_INT 83
30248: PUSH
30249: LD_INT 84
30251: PUSH
30252: LD_INT 85
30254: PUSH
30255: LD_INT 86
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: LD_INT 6
30266: PUSH
30267: LD_INT 15
30269: PUSH
30270: LD_INT 16
30272: PUSH
30273: LD_INT 7
30275: PUSH
30276: LD_INT 12
30278: PUSH
30279: LD_INT 13
30281: PUSH
30282: LD_INT 10
30284: PUSH
30285: LD_INT 14
30287: PUSH
30288: LD_INT 20
30290: PUSH
30291: LD_INT 21
30293: PUSH
30294: LD_INT 22
30296: PUSH
30297: LD_INT 25
30299: PUSH
30300: LD_INT 32
30302: PUSH
30303: LD_INT 27
30305: PUSH
30306: LD_INT 36
30308: PUSH
30309: LD_INT 69
30311: PUSH
30312: LD_INT 39
30314: PUSH
30315: LD_INT 34
30317: PUSH
30318: LD_INT 40
30320: PUSH
30321: LD_INT 48
30323: PUSH
30324: LD_INT 49
30326: PUSH
30327: LD_INT 50
30329: PUSH
30330: LD_INT 51
30332: PUSH
30333: LD_INT 52
30335: PUSH
30336: LD_INT 53
30338: PUSH
30339: LD_INT 54
30341: PUSH
30342: LD_INT 55
30344: PUSH
30345: LD_INT 56
30347: PUSH
30348: LD_INT 57
30350: PUSH
30351: LD_INT 58
30353: PUSH
30354: LD_INT 59
30356: PUSH
30357: LD_INT 60
30359: PUSH
30360: LD_INT 61
30362: PUSH
30363: LD_INT 62
30365: PUSH
30366: LD_INT 80
30368: PUSH
30369: LD_INT 82
30371: PUSH
30372: LD_INT 83
30374: PUSH
30375: LD_INT 84
30377: PUSH
30378: LD_INT 85
30380: PUSH
30381: LD_INT 86
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: ST_TO_ADDR
30437: GO 30904
30439: LD_INT 2
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30673
30447: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30448: LD_ADDR_VAR 0 4
30452: PUSH
30453: LD_INT 35
30455: PUSH
30456: LD_INT 45
30458: PUSH
30459: LD_INT 46
30461: PUSH
30462: LD_INT 47
30464: PUSH
30465: LD_INT 82
30467: PUSH
30468: LD_INT 83
30470: PUSH
30471: LD_INT 84
30473: PUSH
30474: LD_INT 85
30476: PUSH
30477: LD_INT 87
30479: PUSH
30480: LD_INT 70
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: LD_INT 11
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: LD_INT 4
30494: PUSH
30495: LD_INT 5
30497: PUSH
30498: LD_INT 6
30500: PUSH
30501: LD_INT 15
30503: PUSH
30504: LD_INT 18
30506: PUSH
30507: LD_INT 7
30509: PUSH
30510: LD_INT 17
30512: PUSH
30513: LD_INT 8
30515: PUSH
30516: LD_INT 20
30518: PUSH
30519: LD_INT 21
30521: PUSH
30522: LD_INT 22
30524: PUSH
30525: LD_INT 72
30527: PUSH
30528: LD_INT 26
30530: PUSH
30531: LD_INT 69
30533: PUSH
30534: LD_INT 39
30536: PUSH
30537: LD_INT 40
30539: PUSH
30540: LD_INT 41
30542: PUSH
30543: LD_INT 42
30545: PUSH
30546: LD_INT 43
30548: PUSH
30549: LD_INT 48
30551: PUSH
30552: LD_INT 49
30554: PUSH
30555: LD_INT 50
30557: PUSH
30558: LD_INT 51
30560: PUSH
30561: LD_INT 52
30563: PUSH
30564: LD_INT 53
30566: PUSH
30567: LD_INT 54
30569: PUSH
30570: LD_INT 55
30572: PUSH
30573: LD_INT 56
30575: PUSH
30576: LD_INT 60
30578: PUSH
30579: LD_INT 61
30581: PUSH
30582: LD_INT 62
30584: PUSH
30585: LD_INT 66
30587: PUSH
30588: LD_INT 67
30590: PUSH
30591: LD_INT 68
30593: PUSH
30594: LD_INT 81
30596: PUSH
30597: LD_INT 82
30599: PUSH
30600: LD_INT 83
30602: PUSH
30603: LD_INT 84
30605: PUSH
30606: LD_INT 85
30608: PUSH
30609: LD_INT 87
30611: PUSH
30612: LD_INT 88
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: ST_TO_ADDR
30671: GO 30904
30673: LD_INT 3
30675: DOUBLE
30676: EQUAL
30677: IFTRUE 30681
30679: GO 30903
30681: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30682: LD_ADDR_VAR 0 4
30686: PUSH
30687: LD_INT 46
30689: PUSH
30690: LD_INT 47
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: LD_INT 82
30701: PUSH
30702: LD_INT 83
30704: PUSH
30705: LD_INT 84
30707: PUSH
30708: LD_INT 85
30710: PUSH
30711: LD_INT 86
30713: PUSH
30714: LD_INT 11
30716: PUSH
30717: LD_INT 9
30719: PUSH
30720: LD_INT 20
30722: PUSH
30723: LD_INT 19
30725: PUSH
30726: LD_INT 21
30728: PUSH
30729: LD_INT 24
30731: PUSH
30732: LD_INT 22
30734: PUSH
30735: LD_INT 25
30737: PUSH
30738: LD_INT 28
30740: PUSH
30741: LD_INT 29
30743: PUSH
30744: LD_INT 30
30746: PUSH
30747: LD_INT 31
30749: PUSH
30750: LD_INT 37
30752: PUSH
30753: LD_INT 38
30755: PUSH
30756: LD_INT 32
30758: PUSH
30759: LD_INT 27
30761: PUSH
30762: LD_INT 33
30764: PUSH
30765: LD_INT 69
30767: PUSH
30768: LD_INT 39
30770: PUSH
30771: LD_INT 34
30773: PUSH
30774: LD_INT 40
30776: PUSH
30777: LD_INT 71
30779: PUSH
30780: LD_INT 23
30782: PUSH
30783: LD_INT 44
30785: PUSH
30786: LD_INT 48
30788: PUSH
30789: LD_INT 49
30791: PUSH
30792: LD_INT 50
30794: PUSH
30795: LD_INT 51
30797: PUSH
30798: LD_INT 52
30800: PUSH
30801: LD_INT 53
30803: PUSH
30804: LD_INT 54
30806: PUSH
30807: LD_INT 55
30809: PUSH
30810: LD_INT 56
30812: PUSH
30813: LD_INT 57
30815: PUSH
30816: LD_INT 58
30818: PUSH
30819: LD_INT 59
30821: PUSH
30822: LD_INT 63
30824: PUSH
30825: LD_INT 64
30827: PUSH
30828: LD_INT 65
30830: PUSH
30831: LD_INT 82
30833: PUSH
30834: LD_INT 83
30836: PUSH
30837: LD_INT 84
30839: PUSH
30840: LD_INT 85
30842: PUSH
30843: LD_INT 86
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
30901: GO 30904
30903: POP
// if state > - 1 and state < 3 then
30904: LD_VAR 0 3
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: GREATER
30913: PUSH
30914: LD_VAR 0 3
30918: PUSH
30919: LD_INT 3
30921: LESS
30922: AND
30923: IFFALSE 30980
// for i in result do
30925: LD_ADDR_VAR 0 5
30929: PUSH
30930: LD_VAR 0 4
30934: PUSH
30935: FOR_IN
30936: IFFALSE 30978
// if GetTech ( i , side ) <> state then
30938: LD_VAR 0 5
30942: PPUSH
30943: LD_VAR 0 1
30947: PPUSH
30948: CALL_OW 321
30952: PUSH
30953: LD_VAR 0 3
30957: NONEQUAL
30958: IFFALSE 30976
// result := result diff i ;
30960: LD_ADDR_VAR 0 4
30964: PUSH
30965: LD_VAR 0 4
30969: PUSH
30970: LD_VAR 0 5
30974: DIFF
30975: ST_TO_ADDR
30976: GO 30935
30978: POP
30979: POP
// end ;
30980: LD_VAR 0 4
30984: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30985: LD_INT 0
30987: PPUSH
30988: PPUSH
30989: PPUSH
// result := true ;
30990: LD_ADDR_VAR 0 3
30994: PUSH
30995: LD_INT 1
30997: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30998: LD_ADDR_VAR 0 5
31002: PUSH
31003: LD_VAR 0 2
31007: PPUSH
31008: CALL_OW 480
31012: ST_TO_ADDR
// if not tmp then
31013: LD_VAR 0 5
31017: NOT
31018: IFFALSE 31022
// exit ;
31020: GO 31071
// for i in tmp do
31022: LD_ADDR_VAR 0 4
31026: PUSH
31027: LD_VAR 0 5
31031: PUSH
31032: FOR_IN
31033: IFFALSE 31069
// if GetTech ( i , side ) <> state_researched then
31035: LD_VAR 0 4
31039: PPUSH
31040: LD_VAR 0 1
31044: PPUSH
31045: CALL_OW 321
31049: PUSH
31050: LD_INT 2
31052: NONEQUAL
31053: IFFALSE 31067
// begin result := false ;
31055: LD_ADDR_VAR 0 3
31059: PUSH
31060: LD_INT 0
31062: ST_TO_ADDR
// exit ;
31063: POP
31064: POP
31065: GO 31071
// end ;
31067: GO 31032
31069: POP
31070: POP
// end ;
31071: LD_VAR 0 3
31075: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31076: LD_INT 0
31078: PPUSH
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
31083: PPUSH
31084: PPUSH
31085: PPUSH
31086: PPUSH
31087: PPUSH
31088: PPUSH
31089: PPUSH
31090: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31091: LD_VAR 0 1
31095: NOT
31096: PUSH
31097: LD_VAR 0 1
31101: PPUSH
31102: CALL_OW 257
31106: PUSH
31107: LD_INT 9
31109: NONEQUAL
31110: OR
31111: IFFALSE 31115
// exit ;
31113: GO 31688
// side := GetSide ( unit ) ;
31115: LD_ADDR_VAR 0 9
31119: PUSH
31120: LD_VAR 0 1
31124: PPUSH
31125: CALL_OW 255
31129: ST_TO_ADDR
// tech_space := tech_spacanom ;
31130: LD_ADDR_VAR 0 12
31134: PUSH
31135: LD_INT 29
31137: ST_TO_ADDR
// tech_time := tech_taurad ;
31138: LD_ADDR_VAR 0 13
31142: PUSH
31143: LD_INT 28
31145: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31146: LD_ADDR_VAR 0 11
31150: PUSH
31151: LD_VAR 0 1
31155: PPUSH
31156: CALL_OW 310
31160: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31161: LD_VAR 0 11
31165: PPUSH
31166: CALL_OW 247
31170: PUSH
31171: LD_INT 2
31173: EQUAL
31174: IFFALSE 31178
// exit ;
31176: GO 31688
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31178: LD_ADDR_VAR 0 8
31182: PUSH
31183: LD_INT 81
31185: PUSH
31186: LD_VAR 0 9
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 3
31197: PUSH
31198: LD_INT 21
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PPUSH
31216: CALL_OW 69
31220: ST_TO_ADDR
// if not tmp then
31221: LD_VAR 0 8
31225: NOT
31226: IFFALSE 31230
// exit ;
31228: GO 31688
// if in_unit then
31230: LD_VAR 0 11
31234: IFFALSE 31258
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31236: LD_ADDR_VAR 0 10
31240: PUSH
31241: LD_VAR 0 8
31245: PPUSH
31246: LD_VAR 0 11
31250: PPUSH
31251: CALL_OW 74
31255: ST_TO_ADDR
31256: GO 31278
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31258: LD_ADDR_VAR 0 10
31262: PUSH
31263: LD_VAR 0 8
31267: PPUSH
31268: LD_VAR 0 1
31272: PPUSH
31273: CALL_OW 74
31277: ST_TO_ADDR
// if not enemy then
31278: LD_VAR 0 10
31282: NOT
31283: IFFALSE 31287
// exit ;
31285: GO 31688
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31287: LD_VAR 0 11
31291: PUSH
31292: LD_VAR 0 11
31296: PPUSH
31297: LD_VAR 0 10
31301: PPUSH
31302: CALL_OW 296
31306: PUSH
31307: LD_INT 13
31309: GREATER
31310: AND
31311: PUSH
31312: LD_VAR 0 1
31316: PPUSH
31317: LD_VAR 0 10
31321: PPUSH
31322: CALL_OW 296
31326: PUSH
31327: LD_INT 12
31329: GREATER
31330: OR
31331: IFFALSE 31335
// exit ;
31333: GO 31688
// missile := [ 1 ] ;
31335: LD_ADDR_VAR 0 14
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31346: LD_VAR 0 9
31350: PPUSH
31351: LD_VAR 0 12
31355: PPUSH
31356: CALL_OW 325
31360: IFFALSE 31389
// missile := Replace ( missile , missile + 1 , 2 ) ;
31362: LD_ADDR_VAR 0 14
31366: PUSH
31367: LD_VAR 0 14
31371: PPUSH
31372: LD_VAR 0 14
31376: PUSH
31377: LD_INT 1
31379: PLUS
31380: PPUSH
31381: LD_INT 2
31383: PPUSH
31384: CALL_OW 1
31388: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31389: LD_VAR 0 9
31393: PPUSH
31394: LD_VAR 0 13
31398: PPUSH
31399: CALL_OW 325
31403: PUSH
31404: LD_VAR 0 10
31408: PPUSH
31409: CALL_OW 255
31413: PPUSH
31414: LD_VAR 0 13
31418: PPUSH
31419: CALL_OW 325
31423: NOT
31424: AND
31425: IFFALSE 31454
// missile := Replace ( missile , missile + 1 , 3 ) ;
31427: LD_ADDR_VAR 0 14
31431: PUSH
31432: LD_VAR 0 14
31436: PPUSH
31437: LD_VAR 0 14
31441: PUSH
31442: LD_INT 1
31444: PLUS
31445: PPUSH
31446: LD_INT 3
31448: PPUSH
31449: CALL_OW 1
31453: ST_TO_ADDR
// if missile < 2 then
31454: LD_VAR 0 14
31458: PUSH
31459: LD_INT 2
31461: LESS
31462: IFFALSE 31466
// exit ;
31464: GO 31688
// x := GetX ( enemy ) ;
31466: LD_ADDR_VAR 0 4
31470: PUSH
31471: LD_VAR 0 10
31475: PPUSH
31476: CALL_OW 250
31480: ST_TO_ADDR
// y := GetY ( enemy ) ;
31481: LD_ADDR_VAR 0 5
31485: PUSH
31486: LD_VAR 0 10
31490: PPUSH
31491: CALL_OW 251
31495: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31496: LD_ADDR_VAR 0 6
31500: PUSH
31501: LD_VAR 0 4
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PPUSH
31510: LD_INT 1
31512: PPUSH
31513: CALL_OW 12
31517: PLUS
31518: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31519: LD_ADDR_VAR 0 7
31523: PUSH
31524: LD_VAR 0 5
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PPUSH
31533: LD_INT 1
31535: PPUSH
31536: CALL_OW 12
31540: PLUS
31541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31542: LD_VAR 0 6
31546: PPUSH
31547: LD_VAR 0 7
31551: PPUSH
31552: CALL_OW 488
31556: NOT
31557: IFFALSE 31579
// begin _x := x ;
31559: LD_ADDR_VAR 0 6
31563: PUSH
31564: LD_VAR 0 4
31568: ST_TO_ADDR
// _y := y ;
31569: LD_ADDR_VAR 0 7
31573: PUSH
31574: LD_VAR 0 5
31578: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31579: LD_ADDR_VAR 0 3
31583: PUSH
31584: LD_INT 1
31586: PPUSH
31587: LD_VAR 0 14
31591: PPUSH
31592: CALL_OW 12
31596: ST_TO_ADDR
// case i of 1 :
31597: LD_VAR 0 3
31601: PUSH
31602: LD_INT 1
31604: DOUBLE
31605: EQUAL
31606: IFTRUE 31610
31608: GO 31627
31610: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31611: LD_VAR 0 1
31615: PPUSH
31616: LD_VAR 0 10
31620: PPUSH
31621: CALL_OW 115
31625: GO 31688
31627: LD_INT 2
31629: DOUBLE
31630: EQUAL
31631: IFTRUE 31635
31633: GO 31657
31635: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31636: LD_VAR 0 1
31640: PPUSH
31641: LD_VAR 0 6
31645: PPUSH
31646: LD_VAR 0 7
31650: PPUSH
31651: CALL_OW 153
31655: GO 31688
31657: LD_INT 3
31659: DOUBLE
31660: EQUAL
31661: IFTRUE 31665
31663: GO 31687
31665: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31666: LD_VAR 0 1
31670: PPUSH
31671: LD_VAR 0 6
31675: PPUSH
31676: LD_VAR 0 7
31680: PPUSH
31681: CALL_OW 154
31685: GO 31688
31687: POP
// end ;
31688: LD_VAR 0 2
31692: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31693: LD_INT 0
31695: PPUSH
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
31700: PPUSH
// if not unit or not building then
31701: LD_VAR 0 1
31705: NOT
31706: PUSH
31707: LD_VAR 0 2
31711: NOT
31712: OR
31713: IFFALSE 31717
// exit ;
31715: GO 31875
// x := GetX ( building ) ;
31717: LD_ADDR_VAR 0 5
31721: PUSH
31722: LD_VAR 0 2
31726: PPUSH
31727: CALL_OW 250
31731: ST_TO_ADDR
// y := GetY ( building ) ;
31732: LD_ADDR_VAR 0 6
31736: PUSH
31737: LD_VAR 0 2
31741: PPUSH
31742: CALL_OW 251
31746: ST_TO_ADDR
// for i = 0 to 5 do
31747: LD_ADDR_VAR 0 4
31751: PUSH
31752: DOUBLE
31753: LD_INT 0
31755: DEC
31756: ST_TO_ADDR
31757: LD_INT 5
31759: PUSH
31760: FOR_TO
31761: IFFALSE 31873
// begin _x := ShiftX ( x , i , 3 ) ;
31763: LD_ADDR_VAR 0 7
31767: PUSH
31768: LD_VAR 0 5
31772: PPUSH
31773: LD_VAR 0 4
31777: PPUSH
31778: LD_INT 3
31780: PPUSH
31781: CALL_OW 272
31785: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31786: LD_ADDR_VAR 0 8
31790: PUSH
31791: LD_VAR 0 6
31795: PPUSH
31796: LD_VAR 0 4
31800: PPUSH
31801: LD_INT 3
31803: PPUSH
31804: CALL_OW 273
31808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31809: LD_VAR 0 7
31813: PPUSH
31814: LD_VAR 0 8
31818: PPUSH
31819: CALL_OW 488
31823: NOT
31824: IFFALSE 31828
// continue ;
31826: GO 31760
// if HexInfo ( _x , _y ) = 0 then
31828: LD_VAR 0 7
31832: PPUSH
31833: LD_VAR 0 8
31837: PPUSH
31838: CALL_OW 428
31842: PUSH
31843: LD_INT 0
31845: EQUAL
31846: IFFALSE 31871
// begin ComMoveXY ( unit , _x , _y ) ;
31848: LD_VAR 0 1
31852: PPUSH
31853: LD_VAR 0 7
31857: PPUSH
31858: LD_VAR 0 8
31862: PPUSH
31863: CALL_OW 111
// exit ;
31867: POP
31868: POP
31869: GO 31875
// end ; end ;
31871: GO 31760
31873: POP
31874: POP
// end ;
31875: LD_VAR 0 3
31879: RET
// export function ScanBase ( side , base_area ) ; begin
31880: LD_INT 0
31882: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31883: LD_ADDR_VAR 0 3
31887: PUSH
31888: LD_VAR 0 2
31892: PPUSH
31893: LD_INT 81
31895: PUSH
31896: LD_VAR 0 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PPUSH
31905: CALL_OW 70
31909: ST_TO_ADDR
// end ;
31910: LD_VAR 0 3
31914: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31915: LD_INT 0
31917: PPUSH
31918: PPUSH
31919: PPUSH
31920: PPUSH
// result := false ;
31921: LD_ADDR_VAR 0 2
31925: PUSH
31926: LD_INT 0
31928: ST_TO_ADDR
// side := GetSide ( unit ) ;
31929: LD_ADDR_VAR 0 3
31933: PUSH
31934: LD_VAR 0 1
31938: PPUSH
31939: CALL_OW 255
31943: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31944: LD_ADDR_VAR 0 4
31948: PUSH
31949: LD_VAR 0 1
31953: PPUSH
31954: CALL_OW 248
31958: ST_TO_ADDR
// case nat of 1 :
31959: LD_VAR 0 4
31963: PUSH
31964: LD_INT 1
31966: DOUBLE
31967: EQUAL
31968: IFTRUE 31972
31970: GO 31983
31972: POP
// tech := tech_lassight ; 2 :
31973: LD_ADDR_VAR 0 5
31977: PUSH
31978: LD_INT 12
31980: ST_TO_ADDR
31981: GO 32022
31983: LD_INT 2
31985: DOUBLE
31986: EQUAL
31987: IFTRUE 31991
31989: GO 32002
31991: POP
// tech := tech_mortar ; 3 :
31992: LD_ADDR_VAR 0 5
31996: PUSH
31997: LD_INT 41
31999: ST_TO_ADDR
32000: GO 32022
32002: LD_INT 3
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32010
32008: GO 32021
32010: POP
// tech := tech_bazooka ; end ;
32011: LD_ADDR_VAR 0 5
32015: PUSH
32016: LD_INT 44
32018: ST_TO_ADDR
32019: GO 32022
32021: POP
// if Researched ( side , tech ) then
32022: LD_VAR 0 3
32026: PPUSH
32027: LD_VAR 0 5
32031: PPUSH
32032: CALL_OW 325
32036: IFFALSE 32063
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32038: LD_ADDR_VAR 0 2
32042: PUSH
32043: LD_INT 5
32045: PUSH
32046: LD_INT 8
32048: PUSH
32049: LD_INT 9
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: LIST
32056: PUSH
32057: LD_VAR 0 4
32061: ARRAY
32062: ST_TO_ADDR
// end ;
32063: LD_VAR 0 2
32067: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32068: LD_INT 0
32070: PPUSH
32071: PPUSH
32072: PPUSH
// if not mines then
32073: LD_VAR 0 2
32077: NOT
32078: IFFALSE 32082
// exit ;
32080: GO 32226
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32082: LD_ADDR_VAR 0 5
32086: PUSH
32087: LD_INT 81
32089: PUSH
32090: LD_VAR 0 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: LD_INT 21
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PPUSH
32120: CALL_OW 69
32124: ST_TO_ADDR
// for i in mines do
32125: LD_ADDR_VAR 0 4
32129: PUSH
32130: LD_VAR 0 2
32134: PUSH
32135: FOR_IN
32136: IFFALSE 32224
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32138: LD_VAR 0 4
32142: PUSH
32143: LD_INT 1
32145: ARRAY
32146: PPUSH
32147: LD_VAR 0 4
32151: PUSH
32152: LD_INT 2
32154: ARRAY
32155: PPUSH
32156: CALL_OW 458
32160: NOT
32161: IFFALSE 32165
// continue ;
32163: GO 32135
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32165: LD_VAR 0 4
32169: PUSH
32170: LD_INT 1
32172: ARRAY
32173: PPUSH
32174: LD_VAR 0 4
32178: PUSH
32179: LD_INT 2
32181: ARRAY
32182: PPUSH
32183: CALL_OW 428
32187: PUSH
32188: LD_VAR 0 5
32192: IN
32193: IFFALSE 32222
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32195: LD_VAR 0 4
32199: PUSH
32200: LD_INT 1
32202: ARRAY
32203: PPUSH
32204: LD_VAR 0 4
32208: PUSH
32209: LD_INT 2
32211: ARRAY
32212: PPUSH
32213: LD_VAR 0 1
32217: PPUSH
32218: CALL_OW 456
// end ;
32222: GO 32135
32224: POP
32225: POP
// end ;
32226: LD_VAR 0 3
32230: RET
// export function Count ( array ) ; var i ; begin
32231: LD_INT 0
32233: PPUSH
32234: PPUSH
// result := 0 ;
32235: LD_ADDR_VAR 0 2
32239: PUSH
32240: LD_INT 0
32242: ST_TO_ADDR
// for i in array do
32243: LD_ADDR_VAR 0 3
32247: PUSH
32248: LD_VAR 0 1
32252: PUSH
32253: FOR_IN
32254: IFFALSE 32278
// if i then
32256: LD_VAR 0 3
32260: IFFALSE 32276
// result := result + 1 ;
32262: LD_ADDR_VAR 0 2
32266: PUSH
32267: LD_VAR 0 2
32271: PUSH
32272: LD_INT 1
32274: PLUS
32275: ST_TO_ADDR
32276: GO 32253
32278: POP
32279: POP
// end ;
32280: LD_VAR 0 2
32284: RET
// export function IsEmpty ( building ) ; begin
32285: LD_INT 0
32287: PPUSH
// if not building then
32288: LD_VAR 0 1
32292: NOT
32293: IFFALSE 32297
// exit ;
32295: GO 32340
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32297: LD_ADDR_VAR 0 2
32301: PUSH
32302: LD_VAR 0 1
32306: PUSH
32307: LD_INT 22
32309: PUSH
32310: LD_VAR 0 1
32314: PPUSH
32315: CALL_OW 255
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 58
32326: PUSH
32327: EMPTY
32328: LIST
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PPUSH
32334: CALL_OW 69
32338: IN
32339: ST_TO_ADDR
// end ;
32340: LD_VAR 0 2
32344: RET
// export function IsNotFull ( building ) ; begin
32345: LD_INT 0
32347: PPUSH
// if not building then
32348: LD_VAR 0 1
32352: NOT
32353: IFFALSE 32357
// exit ;
32355: GO 32376
// result := UnitsInside ( building ) < 6 ;
32357: LD_ADDR_VAR 0 2
32361: PUSH
32362: LD_VAR 0 1
32366: PPUSH
32367: CALL_OW 313
32371: PUSH
32372: LD_INT 6
32374: LESS
32375: ST_TO_ADDR
// end ;
32376: LD_VAR 0 2
32380: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32381: LD_INT 0
32383: PPUSH
32384: PPUSH
32385: PPUSH
32386: PPUSH
// tmp := [ ] ;
32387: LD_ADDR_VAR 0 3
32391: PUSH
32392: EMPTY
32393: ST_TO_ADDR
// list := [ ] ;
32394: LD_ADDR_VAR 0 5
32398: PUSH
32399: EMPTY
32400: ST_TO_ADDR
// for i = 16 to 25 do
32401: LD_ADDR_VAR 0 4
32405: PUSH
32406: DOUBLE
32407: LD_INT 16
32409: DEC
32410: ST_TO_ADDR
32411: LD_INT 25
32413: PUSH
32414: FOR_TO
32415: IFFALSE 32488
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32417: LD_ADDR_VAR 0 3
32421: PUSH
32422: LD_VAR 0 3
32426: PUSH
32427: LD_INT 22
32429: PUSH
32430: LD_VAR 0 1
32434: PPUSH
32435: CALL_OW 255
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 91
32446: PUSH
32447: LD_VAR 0 1
32451: PUSH
32452: LD_INT 6
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 30
32462: PUSH
32463: LD_VAR 0 4
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: LIST
32476: PUSH
32477: EMPTY
32478: LIST
32479: PPUSH
32480: CALL_OW 69
32484: ADD
32485: ST_TO_ADDR
32486: GO 32414
32488: POP
32489: POP
// for i = 1 to tmp do
32490: LD_ADDR_VAR 0 4
32494: PUSH
32495: DOUBLE
32496: LD_INT 1
32498: DEC
32499: ST_TO_ADDR
32500: LD_VAR 0 3
32504: PUSH
32505: FOR_TO
32506: IFFALSE 32594
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32508: LD_ADDR_VAR 0 5
32512: PUSH
32513: LD_VAR 0 5
32517: PUSH
32518: LD_VAR 0 3
32522: PUSH
32523: LD_VAR 0 4
32527: ARRAY
32528: PPUSH
32529: CALL_OW 266
32533: PUSH
32534: LD_VAR 0 3
32538: PUSH
32539: LD_VAR 0 4
32543: ARRAY
32544: PPUSH
32545: CALL_OW 250
32549: PUSH
32550: LD_VAR 0 3
32554: PUSH
32555: LD_VAR 0 4
32559: ARRAY
32560: PPUSH
32561: CALL_OW 251
32565: PUSH
32566: LD_VAR 0 3
32570: PUSH
32571: LD_VAR 0 4
32575: ARRAY
32576: PPUSH
32577: CALL_OW 254
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: PUSH
32588: EMPTY
32589: LIST
32590: ADD
32591: ST_TO_ADDR
32592: GO 32505
32594: POP
32595: POP
// result := list ;
32596: LD_ADDR_VAR 0 2
32600: PUSH
32601: LD_VAR 0 5
32605: ST_TO_ADDR
// end ;
32606: LD_VAR 0 2
32610: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32611: LD_INT 0
32613: PPUSH
32614: PPUSH
32615: PPUSH
32616: PPUSH
32617: PPUSH
32618: PPUSH
32619: PPUSH
// if not factory then
32620: LD_VAR 0 1
32624: NOT
32625: IFFALSE 32629
// exit ;
32627: GO 33222
// if control = control_apeman then
32629: LD_VAR 0 4
32633: PUSH
32634: LD_INT 5
32636: EQUAL
32637: IFFALSE 32746
// begin tmp := UnitsInside ( factory ) ;
32639: LD_ADDR_VAR 0 8
32643: PUSH
32644: LD_VAR 0 1
32648: PPUSH
32649: CALL_OW 313
32653: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32654: LD_VAR 0 8
32658: PPUSH
32659: LD_INT 25
32661: PUSH
32662: LD_INT 12
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PPUSH
32669: CALL_OW 72
32673: NOT
32674: IFFALSE 32684
// control := control_manual ;
32676: LD_ADDR_VAR 0 4
32680: PUSH
32681: LD_INT 1
32683: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32684: LD_ADDR_VAR 0 8
32688: PUSH
32689: LD_VAR 0 1
32693: PPUSH
32694: CALL 32381 0 1
32698: ST_TO_ADDR
// if tmp then
32699: LD_VAR 0 8
32703: IFFALSE 32746
// begin for i in tmp do
32705: LD_ADDR_VAR 0 7
32709: PUSH
32710: LD_VAR 0 8
32714: PUSH
32715: FOR_IN
32716: IFFALSE 32744
// if i [ 1 ] = b_ext_radio then
32718: LD_VAR 0 7
32722: PUSH
32723: LD_INT 1
32725: ARRAY
32726: PUSH
32727: LD_INT 22
32729: EQUAL
32730: IFFALSE 32742
// begin control := control_remote ;
32732: LD_ADDR_VAR 0 4
32736: PUSH
32737: LD_INT 2
32739: ST_TO_ADDR
// break ;
32740: GO 32744
// end ;
32742: GO 32715
32744: POP
32745: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32746: LD_VAR 0 1
32750: PPUSH
32751: LD_VAR 0 2
32755: PPUSH
32756: LD_VAR 0 3
32760: PPUSH
32761: LD_VAR 0 4
32765: PPUSH
32766: LD_VAR 0 5
32770: PPUSH
32771: CALL_OW 448
32775: IFFALSE 32810
// begin result := [ chassis , engine , control , weapon ] ;
32777: LD_ADDR_VAR 0 6
32781: PUSH
32782: LD_VAR 0 2
32786: PUSH
32787: LD_VAR 0 3
32791: PUSH
32792: LD_VAR 0 4
32796: PUSH
32797: LD_VAR 0 5
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: ST_TO_ADDR
// exit ;
32808: GO 33222
// end ; _chassis := AvailableChassisList ( factory ) ;
32810: LD_ADDR_VAR 0 9
32814: PUSH
32815: LD_VAR 0 1
32819: PPUSH
32820: CALL_OW 475
32824: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32825: LD_ADDR_VAR 0 11
32829: PUSH
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 476
32839: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32840: LD_ADDR_VAR 0 12
32844: PUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: CALL_OW 477
32854: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32855: LD_ADDR_VAR 0 10
32859: PUSH
32860: LD_VAR 0 1
32864: PPUSH
32865: CALL_OW 478
32869: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32870: LD_VAR 0 9
32874: NOT
32875: PUSH
32876: LD_VAR 0 11
32880: NOT
32881: OR
32882: PUSH
32883: LD_VAR 0 12
32887: NOT
32888: OR
32889: PUSH
32890: LD_VAR 0 10
32894: NOT
32895: OR
32896: IFFALSE 32931
// begin result := [ chassis , engine , control , weapon ] ;
32898: LD_ADDR_VAR 0 6
32902: PUSH
32903: LD_VAR 0 2
32907: PUSH
32908: LD_VAR 0 3
32912: PUSH
32913: LD_VAR 0 4
32917: PUSH
32918: LD_VAR 0 5
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: ST_TO_ADDR
// exit ;
32929: GO 33222
// end ; if not chassis in _chassis then
32931: LD_VAR 0 2
32935: PUSH
32936: LD_VAR 0 9
32940: IN
32941: NOT
32942: IFFALSE 32968
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32944: LD_ADDR_VAR 0 2
32948: PUSH
32949: LD_VAR 0 9
32953: PUSH
32954: LD_INT 1
32956: PPUSH
32957: LD_VAR 0 9
32961: PPUSH
32962: CALL_OW 12
32966: ARRAY
32967: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32968: LD_VAR 0 2
32972: PPUSH
32973: LD_VAR 0 3
32977: PPUSH
32978: CALL 33227 0 2
32982: NOT
32983: IFFALSE 33042
// repeat engine := _engine [ 1 ] ;
32985: LD_ADDR_VAR 0 3
32989: PUSH
32990: LD_VAR 0 11
32994: PUSH
32995: LD_INT 1
32997: ARRAY
32998: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32999: LD_ADDR_VAR 0 11
33003: PUSH
33004: LD_VAR 0 11
33008: PPUSH
33009: LD_INT 1
33011: PPUSH
33012: CALL_OW 3
33016: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33017: LD_VAR 0 2
33021: PPUSH
33022: LD_VAR 0 3
33026: PPUSH
33027: CALL 33227 0 2
33031: PUSH
33032: LD_VAR 0 11
33036: PUSH
33037: EMPTY
33038: EQUAL
33039: OR
33040: IFFALSE 32985
// if not control in _control then
33042: LD_VAR 0 4
33046: PUSH
33047: LD_VAR 0 12
33051: IN
33052: NOT
33053: IFFALSE 33079
// control := _control [ rand ( 1 , _control ) ] ;
33055: LD_ADDR_VAR 0 4
33059: PUSH
33060: LD_VAR 0 12
33064: PUSH
33065: LD_INT 1
33067: PPUSH
33068: LD_VAR 0 12
33072: PPUSH
33073: CALL_OW 12
33077: ARRAY
33078: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33079: LD_VAR 0 2
33083: PPUSH
33084: LD_VAR 0 5
33088: PPUSH
33089: CALL 33447 0 2
33093: NOT
33094: IFFALSE 33153
// repeat weapon := _weapon [ 1 ] ;
33096: LD_ADDR_VAR 0 5
33100: PUSH
33101: LD_VAR 0 10
33105: PUSH
33106: LD_INT 1
33108: ARRAY
33109: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33110: LD_ADDR_VAR 0 10
33114: PUSH
33115: LD_VAR 0 10
33119: PPUSH
33120: LD_INT 1
33122: PPUSH
33123: CALL_OW 3
33127: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33128: LD_VAR 0 2
33132: PPUSH
33133: LD_VAR 0 5
33137: PPUSH
33138: CALL 33447 0 2
33142: PUSH
33143: LD_VAR 0 10
33147: PUSH
33148: EMPTY
33149: EQUAL
33150: OR
33151: IFFALSE 33096
// result := [ ] ;
33153: LD_ADDR_VAR 0 6
33157: PUSH
33158: EMPTY
33159: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33160: LD_VAR 0 1
33164: PPUSH
33165: LD_VAR 0 2
33169: PPUSH
33170: LD_VAR 0 3
33174: PPUSH
33175: LD_VAR 0 4
33179: PPUSH
33180: LD_VAR 0 5
33184: PPUSH
33185: CALL_OW 448
33189: IFFALSE 33222
// result := [ chassis , engine , control , weapon ] ;
33191: LD_ADDR_VAR 0 6
33195: PUSH
33196: LD_VAR 0 2
33200: PUSH
33201: LD_VAR 0 3
33205: PUSH
33206: LD_VAR 0 4
33210: PUSH
33211: LD_VAR 0 5
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: ST_TO_ADDR
// end ;
33222: LD_VAR 0 6
33226: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33227: LD_INT 0
33229: PPUSH
// if not chassis or not engine then
33230: LD_VAR 0 1
33234: NOT
33235: PUSH
33236: LD_VAR 0 2
33240: NOT
33241: OR
33242: IFFALSE 33246
// exit ;
33244: GO 33442
// case engine of engine_solar :
33246: LD_VAR 0 2
33250: PUSH
33251: LD_INT 2
33253: DOUBLE
33254: EQUAL
33255: IFTRUE 33259
33257: GO 33297
33259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33260: LD_ADDR_VAR 0 3
33264: PUSH
33265: LD_INT 11
33267: PUSH
33268: LD_INT 12
33270: PUSH
33271: LD_INT 13
33273: PUSH
33274: LD_INT 14
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: LD_INT 2
33282: PUSH
33283: LD_INT 3
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: ST_TO_ADDR
33295: GO 33426
33297: LD_INT 1
33299: DOUBLE
33300: EQUAL
33301: IFTRUE 33305
33303: GO 33367
33305: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33306: LD_ADDR_VAR 0 3
33310: PUSH
33311: LD_INT 11
33313: PUSH
33314: LD_INT 12
33316: PUSH
33317: LD_INT 13
33319: PUSH
33320: LD_INT 14
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: LD_INT 2
33328: PUSH
33329: LD_INT 3
33331: PUSH
33332: LD_INT 4
33334: PUSH
33335: LD_INT 5
33337: PUSH
33338: LD_INT 21
33340: PUSH
33341: LD_INT 23
33343: PUSH
33344: LD_INT 22
33346: PUSH
33347: LD_INT 24
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: ST_TO_ADDR
33365: GO 33426
33367: LD_INT 3
33369: DOUBLE
33370: EQUAL
33371: IFTRUE 33375
33373: GO 33425
33375: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33376: LD_ADDR_VAR 0 3
33380: PUSH
33381: LD_INT 13
33383: PUSH
33384: LD_INT 14
33386: PUSH
33387: LD_INT 2
33389: PUSH
33390: LD_INT 3
33392: PUSH
33393: LD_INT 4
33395: PUSH
33396: LD_INT 5
33398: PUSH
33399: LD_INT 21
33401: PUSH
33402: LD_INT 22
33404: PUSH
33405: LD_INT 23
33407: PUSH
33408: LD_INT 24
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: ST_TO_ADDR
33423: GO 33426
33425: POP
// result := ( chassis in result ) ;
33426: LD_ADDR_VAR 0 3
33430: PUSH
33431: LD_VAR 0 1
33435: PUSH
33436: LD_VAR 0 3
33440: IN
33441: ST_TO_ADDR
// end ;
33442: LD_VAR 0 3
33446: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33447: LD_INT 0
33449: PPUSH
// if not chassis or not weapon then
33450: LD_VAR 0 1
33454: NOT
33455: PUSH
33456: LD_VAR 0 2
33460: NOT
33461: OR
33462: IFFALSE 33466
// exit ;
33464: GO 34528
// case weapon of us_machine_gun :
33466: LD_VAR 0 2
33470: PUSH
33471: LD_INT 2
33473: DOUBLE
33474: EQUAL
33475: IFTRUE 33479
33477: GO 33509
33479: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33480: LD_ADDR_VAR 0 3
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: LD_INT 4
33496: PUSH
33497: LD_INT 5
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
33507: GO 34512
33509: LD_INT 3
33511: DOUBLE
33512: EQUAL
33513: IFTRUE 33517
33515: GO 33547
33517: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33518: LD_ADDR_VAR 0 3
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: LD_INT 3
33531: PUSH
33532: LD_INT 4
33534: PUSH
33535: LD_INT 5
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: ST_TO_ADDR
33545: GO 34512
33547: LD_INT 11
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 33585
33555: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33556: LD_ADDR_VAR 0 3
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: LD_INT 3
33569: PUSH
33570: LD_INT 4
33572: PUSH
33573: LD_INT 5
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: ST_TO_ADDR
33583: GO 34512
33585: LD_INT 4
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33593
33591: GO 33619
33593: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33594: LD_ADDR_VAR 0 3
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 3
33604: PUSH
33605: LD_INT 4
33607: PUSH
33608: LD_INT 5
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: ST_TO_ADDR
33617: GO 34512
33619: LD_INT 5
33621: DOUBLE
33622: EQUAL
33623: IFTRUE 33627
33625: GO 33653
33627: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33628: LD_ADDR_VAR 0 3
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: LD_INT 3
33638: PUSH
33639: LD_INT 4
33641: PUSH
33642: LD_INT 5
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: ST_TO_ADDR
33651: GO 34512
33653: LD_INT 9
33655: DOUBLE
33656: EQUAL
33657: IFTRUE 33661
33659: GO 33687
33661: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33662: LD_ADDR_VAR 0 3
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: LD_INT 3
33672: PUSH
33673: LD_INT 4
33675: PUSH
33676: LD_INT 5
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: ST_TO_ADDR
33685: GO 34512
33687: LD_INT 7
33689: DOUBLE
33690: EQUAL
33691: IFTRUE 33695
33693: GO 33721
33695: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33696: LD_ADDR_VAR 0 3
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: LD_INT 3
33706: PUSH
33707: LD_INT 4
33709: PUSH
33710: LD_INT 5
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: ST_TO_ADDR
33719: GO 34512
33721: LD_INT 12
33723: DOUBLE
33724: EQUAL
33725: IFTRUE 33729
33727: GO 33755
33729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33730: LD_ADDR_VAR 0 3
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: LD_INT 4
33743: PUSH
33744: LD_INT 5
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: ST_TO_ADDR
33753: GO 34512
33755: LD_INT 13
33757: DOUBLE
33758: EQUAL
33759: IFTRUE 33763
33761: GO 33789
33763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33764: LD_ADDR_VAR 0 3
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 3
33774: PUSH
33775: LD_INT 4
33777: PUSH
33778: LD_INT 5
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: ST_TO_ADDR
33787: GO 34512
33789: LD_INT 14
33791: DOUBLE
33792: EQUAL
33793: IFTRUE 33797
33795: GO 33815
33797: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33798: LD_ADDR_VAR 0 3
33802: PUSH
33803: LD_INT 4
33805: PUSH
33806: LD_INT 5
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: ST_TO_ADDR
33813: GO 34512
33815: LD_INT 6
33817: DOUBLE
33818: EQUAL
33819: IFTRUE 33823
33821: GO 33841
33823: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33824: LD_ADDR_VAR 0 3
33828: PUSH
33829: LD_INT 4
33831: PUSH
33832: LD_INT 5
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: ST_TO_ADDR
33839: GO 34512
33841: LD_INT 10
33843: DOUBLE
33844: EQUAL
33845: IFTRUE 33849
33847: GO 33867
33849: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33850: LD_ADDR_VAR 0 3
33854: PUSH
33855: LD_INT 4
33857: PUSH
33858: LD_INT 5
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: ST_TO_ADDR
33865: GO 34512
33867: LD_INT 22
33869: DOUBLE
33870: EQUAL
33871: IFTRUE 33875
33873: GO 33901
33875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33876: LD_ADDR_VAR 0 3
33880: PUSH
33881: LD_INT 11
33883: PUSH
33884: LD_INT 12
33886: PUSH
33887: LD_INT 13
33889: PUSH
33890: LD_INT 14
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: ST_TO_ADDR
33899: GO 34512
33901: LD_INT 23
33903: DOUBLE
33904: EQUAL
33905: IFTRUE 33909
33907: GO 33935
33909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33910: LD_ADDR_VAR 0 3
33914: PUSH
33915: LD_INT 11
33917: PUSH
33918: LD_INT 12
33920: PUSH
33921: LD_INT 13
33923: PUSH
33924: LD_INT 14
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: ST_TO_ADDR
33933: GO 34512
33935: LD_INT 24
33937: DOUBLE
33938: EQUAL
33939: IFTRUE 33943
33941: GO 33969
33943: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33944: LD_ADDR_VAR 0 3
33948: PUSH
33949: LD_INT 11
33951: PUSH
33952: LD_INT 12
33954: PUSH
33955: LD_INT 13
33957: PUSH
33958: LD_INT 14
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: ST_TO_ADDR
33967: GO 34512
33969: LD_INT 30
33971: DOUBLE
33972: EQUAL
33973: IFTRUE 33977
33975: GO 34003
33977: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33978: LD_ADDR_VAR 0 3
33982: PUSH
33983: LD_INT 11
33985: PUSH
33986: LD_INT 12
33988: PUSH
33989: LD_INT 13
33991: PUSH
33992: LD_INT 14
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: ST_TO_ADDR
34001: GO 34512
34003: LD_INT 25
34005: DOUBLE
34006: EQUAL
34007: IFTRUE 34011
34009: GO 34029
34011: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34012: LD_ADDR_VAR 0 3
34016: PUSH
34017: LD_INT 13
34019: PUSH
34020: LD_INT 14
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: ST_TO_ADDR
34027: GO 34512
34029: LD_INT 27
34031: DOUBLE
34032: EQUAL
34033: IFTRUE 34037
34035: GO 34055
34037: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34038: LD_ADDR_VAR 0 3
34042: PUSH
34043: LD_INT 13
34045: PUSH
34046: LD_INT 14
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: ST_TO_ADDR
34053: GO 34512
34055: LD_EXP 19
34059: DOUBLE
34060: EQUAL
34061: IFTRUE 34065
34063: GO 34091
34065: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: LD_INT 11
34073: PUSH
34074: LD_INT 12
34076: PUSH
34077: LD_INT 13
34079: PUSH
34080: LD_INT 14
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: ST_TO_ADDR
34089: GO 34512
34091: LD_INT 28
34093: DOUBLE
34094: EQUAL
34095: IFTRUE 34099
34097: GO 34117
34099: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34100: LD_ADDR_VAR 0 3
34104: PUSH
34105: LD_INT 13
34107: PUSH
34108: LD_INT 14
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: ST_TO_ADDR
34115: GO 34512
34117: LD_INT 29
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34125
34123: GO 34143
34125: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_INT 13
34133: PUSH
34134: LD_INT 14
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: ST_TO_ADDR
34141: GO 34512
34143: LD_INT 31
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34151
34149: GO 34169
34151: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34152: LD_ADDR_VAR 0 3
34156: PUSH
34157: LD_INT 13
34159: PUSH
34160: LD_INT 14
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: ST_TO_ADDR
34167: GO 34512
34169: LD_INT 26
34171: DOUBLE
34172: EQUAL
34173: IFTRUE 34177
34175: GO 34195
34177: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34178: LD_ADDR_VAR 0 3
34182: PUSH
34183: LD_INT 13
34185: PUSH
34186: LD_INT 14
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: ST_TO_ADDR
34193: GO 34512
34195: LD_INT 42
34197: DOUBLE
34198: EQUAL
34199: IFTRUE 34203
34201: GO 34229
34203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34204: LD_ADDR_VAR 0 3
34208: PUSH
34209: LD_INT 21
34211: PUSH
34212: LD_INT 22
34214: PUSH
34215: LD_INT 23
34217: PUSH
34218: LD_INT 24
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: ST_TO_ADDR
34227: GO 34512
34229: LD_INT 43
34231: DOUBLE
34232: EQUAL
34233: IFTRUE 34237
34235: GO 34263
34237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34238: LD_ADDR_VAR 0 3
34242: PUSH
34243: LD_INT 21
34245: PUSH
34246: LD_INT 22
34248: PUSH
34249: LD_INT 23
34251: PUSH
34252: LD_INT 24
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: ST_TO_ADDR
34261: GO 34512
34263: LD_INT 44
34265: DOUBLE
34266: EQUAL
34267: IFTRUE 34271
34269: GO 34297
34271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34272: LD_ADDR_VAR 0 3
34276: PUSH
34277: LD_INT 21
34279: PUSH
34280: LD_INT 22
34282: PUSH
34283: LD_INT 23
34285: PUSH
34286: LD_INT 24
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
34295: GO 34512
34297: LD_INT 45
34299: DOUBLE
34300: EQUAL
34301: IFTRUE 34305
34303: GO 34331
34305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34306: LD_ADDR_VAR 0 3
34310: PUSH
34311: LD_INT 21
34313: PUSH
34314: LD_INT 22
34316: PUSH
34317: LD_INT 23
34319: PUSH
34320: LD_INT 24
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: ST_TO_ADDR
34329: GO 34512
34331: LD_INT 49
34333: DOUBLE
34334: EQUAL
34335: IFTRUE 34339
34337: GO 34365
34339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34340: LD_ADDR_VAR 0 3
34344: PUSH
34345: LD_INT 21
34347: PUSH
34348: LD_INT 22
34350: PUSH
34351: LD_INT 23
34353: PUSH
34354: LD_INT 24
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: ST_TO_ADDR
34363: GO 34512
34365: LD_INT 51
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34373
34371: GO 34399
34373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34374: LD_ADDR_VAR 0 3
34378: PUSH
34379: LD_INT 21
34381: PUSH
34382: LD_INT 22
34384: PUSH
34385: LD_INT 23
34387: PUSH
34388: LD_INT 24
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: ST_TO_ADDR
34397: GO 34512
34399: LD_INT 52
34401: DOUBLE
34402: EQUAL
34403: IFTRUE 34407
34405: GO 34433
34407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34408: LD_ADDR_VAR 0 3
34412: PUSH
34413: LD_INT 21
34415: PUSH
34416: LD_INT 22
34418: PUSH
34419: LD_INT 23
34421: PUSH
34422: LD_INT 24
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: ST_TO_ADDR
34431: GO 34512
34433: LD_INT 53
34435: DOUBLE
34436: EQUAL
34437: IFTRUE 34441
34439: GO 34459
34441: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_INT 23
34449: PUSH
34450: LD_INT 24
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: ST_TO_ADDR
34457: GO 34512
34459: LD_INT 46
34461: DOUBLE
34462: EQUAL
34463: IFTRUE 34467
34465: GO 34485
34467: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34468: LD_ADDR_VAR 0 3
34472: PUSH
34473: LD_INT 23
34475: PUSH
34476: LD_INT 24
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: ST_TO_ADDR
34483: GO 34512
34485: LD_INT 47
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34493
34491: GO 34511
34493: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34494: LD_ADDR_VAR 0 3
34498: PUSH
34499: LD_INT 23
34501: PUSH
34502: LD_INT 24
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: ST_TO_ADDR
34509: GO 34512
34511: POP
// result := ( chassis in result ) ;
34512: LD_ADDR_VAR 0 3
34516: PUSH
34517: LD_VAR 0 1
34521: PUSH
34522: LD_VAR 0 3
34526: IN
34527: ST_TO_ADDR
// end ;
34528: LD_VAR 0 3
34532: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34533: LD_INT 0
34535: PPUSH
34536: PPUSH
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
// result := array ;
34542: LD_ADDR_VAR 0 5
34546: PUSH
34547: LD_VAR 0 1
34551: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34552: LD_VAR 0 1
34556: NOT
34557: PUSH
34558: LD_VAR 0 2
34562: NOT
34563: OR
34564: PUSH
34565: LD_VAR 0 3
34569: NOT
34570: OR
34571: PUSH
34572: LD_VAR 0 2
34576: PUSH
34577: LD_VAR 0 1
34581: GREATER
34582: OR
34583: PUSH
34584: LD_VAR 0 3
34588: PUSH
34589: LD_VAR 0 1
34593: GREATER
34594: OR
34595: IFFALSE 34599
// exit ;
34597: GO 34895
// if direction then
34599: LD_VAR 0 4
34603: IFFALSE 34667
// begin d := 1 ;
34605: LD_ADDR_VAR 0 9
34609: PUSH
34610: LD_INT 1
34612: ST_TO_ADDR
// if i_from > i_to then
34613: LD_VAR 0 2
34617: PUSH
34618: LD_VAR 0 3
34622: GREATER
34623: IFFALSE 34649
// length := ( array - i_from ) + i_to else
34625: LD_ADDR_VAR 0 11
34629: PUSH
34630: LD_VAR 0 1
34634: PUSH
34635: LD_VAR 0 2
34639: MINUS
34640: PUSH
34641: LD_VAR 0 3
34645: PLUS
34646: ST_TO_ADDR
34647: GO 34665
// length := i_to - i_from ;
34649: LD_ADDR_VAR 0 11
34653: PUSH
34654: LD_VAR 0 3
34658: PUSH
34659: LD_VAR 0 2
34663: MINUS
34664: ST_TO_ADDR
// end else
34665: GO 34728
// begin d := - 1 ;
34667: LD_ADDR_VAR 0 9
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: ST_TO_ADDR
// if i_from > i_to then
34676: LD_VAR 0 2
34680: PUSH
34681: LD_VAR 0 3
34685: GREATER
34686: IFFALSE 34706
// length := i_from - i_to else
34688: LD_ADDR_VAR 0 11
34692: PUSH
34693: LD_VAR 0 2
34697: PUSH
34698: LD_VAR 0 3
34702: MINUS
34703: ST_TO_ADDR
34704: GO 34728
// length := ( array - i_to ) + i_from ;
34706: LD_ADDR_VAR 0 11
34710: PUSH
34711: LD_VAR 0 1
34715: PUSH
34716: LD_VAR 0 3
34720: MINUS
34721: PUSH
34722: LD_VAR 0 2
34726: PLUS
34727: ST_TO_ADDR
// end ; if not length then
34728: LD_VAR 0 11
34732: NOT
34733: IFFALSE 34737
// exit ;
34735: GO 34895
// tmp := array ;
34737: LD_ADDR_VAR 0 10
34741: PUSH
34742: LD_VAR 0 1
34746: ST_TO_ADDR
// for i = 1 to length do
34747: LD_ADDR_VAR 0 6
34751: PUSH
34752: DOUBLE
34753: LD_INT 1
34755: DEC
34756: ST_TO_ADDR
34757: LD_VAR 0 11
34761: PUSH
34762: FOR_TO
34763: IFFALSE 34883
// begin for j = 1 to array do
34765: LD_ADDR_VAR 0 7
34769: PUSH
34770: DOUBLE
34771: LD_INT 1
34773: DEC
34774: ST_TO_ADDR
34775: LD_VAR 0 1
34779: PUSH
34780: FOR_TO
34781: IFFALSE 34869
// begin k := j + d ;
34783: LD_ADDR_VAR 0 8
34787: PUSH
34788: LD_VAR 0 7
34792: PUSH
34793: LD_VAR 0 9
34797: PLUS
34798: ST_TO_ADDR
// if k > array then
34799: LD_VAR 0 8
34803: PUSH
34804: LD_VAR 0 1
34808: GREATER
34809: IFFALSE 34819
// k := 1 ;
34811: LD_ADDR_VAR 0 8
34815: PUSH
34816: LD_INT 1
34818: ST_TO_ADDR
// if not k then
34819: LD_VAR 0 8
34823: NOT
34824: IFFALSE 34836
// k := array ;
34826: LD_ADDR_VAR 0 8
34830: PUSH
34831: LD_VAR 0 1
34835: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34836: LD_ADDR_VAR 0 10
34840: PUSH
34841: LD_VAR 0 10
34845: PPUSH
34846: LD_VAR 0 8
34850: PPUSH
34851: LD_VAR 0 1
34855: PUSH
34856: LD_VAR 0 7
34860: ARRAY
34861: PPUSH
34862: CALL_OW 1
34866: ST_TO_ADDR
// end ;
34867: GO 34780
34869: POP
34870: POP
// array := tmp ;
34871: LD_ADDR_VAR 0 1
34875: PUSH
34876: LD_VAR 0 10
34880: ST_TO_ADDR
// end ;
34881: GO 34762
34883: POP
34884: POP
// result := array ;
34885: LD_ADDR_VAR 0 5
34889: PUSH
34890: LD_VAR 0 1
34894: ST_TO_ADDR
// end ;
34895: LD_VAR 0 5
34899: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34900: LD_INT 0
34902: PPUSH
34903: PPUSH
// result := 0 ;
34904: LD_ADDR_VAR 0 3
34908: PUSH
34909: LD_INT 0
34911: ST_TO_ADDR
// if not array or not value in array then
34912: LD_VAR 0 1
34916: NOT
34917: PUSH
34918: LD_VAR 0 2
34922: PUSH
34923: LD_VAR 0 1
34927: IN
34928: NOT
34929: OR
34930: IFFALSE 34934
// exit ;
34932: GO 34988
// for i = 1 to array do
34934: LD_ADDR_VAR 0 4
34938: PUSH
34939: DOUBLE
34940: LD_INT 1
34942: DEC
34943: ST_TO_ADDR
34944: LD_VAR 0 1
34948: PUSH
34949: FOR_TO
34950: IFFALSE 34986
// if value = array [ i ] then
34952: LD_VAR 0 2
34956: PUSH
34957: LD_VAR 0 1
34961: PUSH
34962: LD_VAR 0 4
34966: ARRAY
34967: EQUAL
34968: IFFALSE 34984
// begin result := i ;
34970: LD_ADDR_VAR 0 3
34974: PUSH
34975: LD_VAR 0 4
34979: ST_TO_ADDR
// exit ;
34980: POP
34981: POP
34982: GO 34988
// end ;
34984: GO 34949
34986: POP
34987: POP
// end ;
34988: LD_VAR 0 3
34992: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34993: LD_INT 0
34995: PPUSH
// vc_chassis := chassis ;
34996: LD_ADDR_OWVAR 37
35000: PUSH
35001: LD_VAR 0 1
35005: ST_TO_ADDR
// vc_engine := engine ;
35006: LD_ADDR_OWVAR 39
35010: PUSH
35011: LD_VAR 0 2
35015: ST_TO_ADDR
// vc_control := control ;
35016: LD_ADDR_OWVAR 38
35020: PUSH
35021: LD_VAR 0 3
35025: ST_TO_ADDR
// vc_weapon := weapon ;
35026: LD_ADDR_OWVAR 40
35030: PUSH
35031: LD_VAR 0 4
35035: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35036: LD_ADDR_OWVAR 41
35040: PUSH
35041: LD_VAR 0 5
35045: ST_TO_ADDR
// end ;
35046: LD_VAR 0 6
35050: RET
// export function WantPlant ( unit ) ; var task ; begin
35051: LD_INT 0
35053: PPUSH
35054: PPUSH
// result := false ;
35055: LD_ADDR_VAR 0 2
35059: PUSH
35060: LD_INT 0
35062: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35063: LD_ADDR_VAR 0 3
35067: PUSH
35068: LD_VAR 0 1
35072: PPUSH
35073: CALL_OW 437
35077: ST_TO_ADDR
// if task then
35078: LD_VAR 0 3
35082: IFFALSE 35110
// if task [ 1 ] [ 1 ] = p then
35084: LD_VAR 0 3
35088: PUSH
35089: LD_INT 1
35091: ARRAY
35092: PUSH
35093: LD_INT 1
35095: ARRAY
35096: PUSH
35097: LD_STRING p
35099: EQUAL
35100: IFFALSE 35110
// result := true ;
35102: LD_ADDR_VAR 0 2
35106: PUSH
35107: LD_INT 1
35109: ST_TO_ADDR
// end ;
35110: LD_VAR 0 2
35114: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35115: LD_INT 0
35117: PPUSH
35118: PPUSH
35119: PPUSH
35120: PPUSH
// if pos < 1 then
35121: LD_VAR 0 2
35125: PUSH
35126: LD_INT 1
35128: LESS
35129: IFFALSE 35133
// exit ;
35131: GO 35436
// if pos = 1 then
35133: LD_VAR 0 2
35137: PUSH
35138: LD_INT 1
35140: EQUAL
35141: IFFALSE 35174
// result := Replace ( arr , pos [ 1 ] , value ) else
35143: LD_ADDR_VAR 0 4
35147: PUSH
35148: LD_VAR 0 1
35152: PPUSH
35153: LD_VAR 0 2
35157: PUSH
35158: LD_INT 1
35160: ARRAY
35161: PPUSH
35162: LD_VAR 0 3
35166: PPUSH
35167: CALL_OW 1
35171: ST_TO_ADDR
35172: GO 35436
// begin tmp := arr ;
35174: LD_ADDR_VAR 0 6
35178: PUSH
35179: LD_VAR 0 1
35183: ST_TO_ADDR
// s_arr := [ tmp ] ;
35184: LD_ADDR_VAR 0 7
35188: PUSH
35189: LD_VAR 0 6
35193: PUSH
35194: EMPTY
35195: LIST
35196: ST_TO_ADDR
// for i = 1 to pos - 1 do
35197: LD_ADDR_VAR 0 5
35201: PUSH
35202: DOUBLE
35203: LD_INT 1
35205: DEC
35206: ST_TO_ADDR
35207: LD_VAR 0 2
35211: PUSH
35212: LD_INT 1
35214: MINUS
35215: PUSH
35216: FOR_TO
35217: IFFALSE 35262
// begin tmp := tmp [ pos [ i ] ] ;
35219: LD_ADDR_VAR 0 6
35223: PUSH
35224: LD_VAR 0 6
35228: PUSH
35229: LD_VAR 0 2
35233: PUSH
35234: LD_VAR 0 5
35238: ARRAY
35239: ARRAY
35240: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35241: LD_ADDR_VAR 0 7
35245: PUSH
35246: LD_VAR 0 7
35250: PUSH
35251: LD_VAR 0 6
35255: PUSH
35256: EMPTY
35257: LIST
35258: ADD
35259: ST_TO_ADDR
// end ;
35260: GO 35216
35262: POP
35263: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35264: LD_ADDR_VAR 0 6
35268: PUSH
35269: LD_VAR 0 6
35273: PPUSH
35274: LD_VAR 0 2
35278: PUSH
35279: LD_VAR 0 2
35283: ARRAY
35284: PPUSH
35285: LD_VAR 0 3
35289: PPUSH
35290: CALL_OW 1
35294: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35295: LD_ADDR_VAR 0 7
35299: PUSH
35300: LD_VAR 0 7
35304: PPUSH
35305: LD_VAR 0 7
35309: PPUSH
35310: LD_VAR 0 6
35314: PPUSH
35315: CALL_OW 1
35319: ST_TO_ADDR
// for i = s_arr downto 2 do
35320: LD_ADDR_VAR 0 5
35324: PUSH
35325: DOUBLE
35326: LD_VAR 0 7
35330: INC
35331: ST_TO_ADDR
35332: LD_INT 2
35334: PUSH
35335: FOR_DOWNTO
35336: IFFALSE 35420
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35338: LD_ADDR_VAR 0 6
35342: PUSH
35343: LD_VAR 0 7
35347: PUSH
35348: LD_VAR 0 5
35352: PUSH
35353: LD_INT 1
35355: MINUS
35356: ARRAY
35357: PPUSH
35358: LD_VAR 0 2
35362: PUSH
35363: LD_VAR 0 5
35367: PUSH
35368: LD_INT 1
35370: MINUS
35371: ARRAY
35372: PPUSH
35373: LD_VAR 0 7
35377: PUSH
35378: LD_VAR 0 5
35382: ARRAY
35383: PPUSH
35384: CALL_OW 1
35388: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35389: LD_ADDR_VAR 0 7
35393: PUSH
35394: LD_VAR 0 7
35398: PPUSH
35399: LD_VAR 0 5
35403: PUSH
35404: LD_INT 1
35406: MINUS
35407: PPUSH
35408: LD_VAR 0 6
35412: PPUSH
35413: CALL_OW 1
35417: ST_TO_ADDR
// end ;
35418: GO 35335
35420: POP
35421: POP
// result := s_arr [ 1 ] ;
35422: LD_ADDR_VAR 0 4
35426: PUSH
35427: LD_VAR 0 7
35431: PUSH
35432: LD_INT 1
35434: ARRAY
35435: ST_TO_ADDR
// end ; end ;
35436: LD_VAR 0 4
35440: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35441: LD_INT 0
35443: PPUSH
35444: PPUSH
// if not list then
35445: LD_VAR 0 1
35449: NOT
35450: IFFALSE 35454
// exit ;
35452: GO 35545
// i := list [ pos1 ] ;
35454: LD_ADDR_VAR 0 5
35458: PUSH
35459: LD_VAR 0 1
35463: PUSH
35464: LD_VAR 0 2
35468: ARRAY
35469: ST_TO_ADDR
// if not i then
35470: LD_VAR 0 5
35474: NOT
35475: IFFALSE 35479
// exit ;
35477: GO 35545
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35479: LD_ADDR_VAR 0 1
35483: PUSH
35484: LD_VAR 0 1
35488: PPUSH
35489: LD_VAR 0 2
35493: PPUSH
35494: LD_VAR 0 1
35498: PUSH
35499: LD_VAR 0 3
35503: ARRAY
35504: PPUSH
35505: CALL_OW 1
35509: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35510: LD_ADDR_VAR 0 1
35514: PUSH
35515: LD_VAR 0 1
35519: PPUSH
35520: LD_VAR 0 3
35524: PPUSH
35525: LD_VAR 0 5
35529: PPUSH
35530: CALL_OW 1
35534: ST_TO_ADDR
// result := list ;
35535: LD_ADDR_VAR 0 4
35539: PUSH
35540: LD_VAR 0 1
35544: ST_TO_ADDR
// end ;
35545: LD_VAR 0 4
35549: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35550: LD_INT 0
35552: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35553: LD_ADDR_VAR 0 5
35557: PUSH
35558: LD_VAR 0 1
35562: PPUSH
35563: CALL_OW 250
35567: PPUSH
35568: LD_VAR 0 1
35572: PPUSH
35573: CALL_OW 251
35577: PPUSH
35578: LD_VAR 0 2
35582: PPUSH
35583: LD_VAR 0 3
35587: PPUSH
35588: LD_VAR 0 4
35592: PPUSH
35593: CALL 35603 0 5
35597: ST_TO_ADDR
// end ;
35598: LD_VAR 0 5
35602: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35603: LD_INT 0
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
// if not list then
35609: LD_VAR 0 3
35613: NOT
35614: IFFALSE 35618
// exit ;
35616: GO 36006
// result := [ ] ;
35618: LD_ADDR_VAR 0 6
35622: PUSH
35623: EMPTY
35624: ST_TO_ADDR
// for i in list do
35625: LD_ADDR_VAR 0 7
35629: PUSH
35630: LD_VAR 0 3
35634: PUSH
35635: FOR_IN
35636: IFFALSE 35838
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35638: LD_ADDR_VAR 0 9
35642: PUSH
35643: LD_VAR 0 7
35647: PPUSH
35648: LD_VAR 0 1
35652: PPUSH
35653: LD_VAR 0 2
35657: PPUSH
35658: CALL_OW 297
35662: ST_TO_ADDR
// if not result then
35663: LD_VAR 0 6
35667: NOT
35668: IFFALSE 35694
// result := [ [ i , tmp ] ] else
35670: LD_ADDR_VAR 0 6
35674: PUSH
35675: LD_VAR 0 7
35679: PUSH
35680: LD_VAR 0 9
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: EMPTY
35690: LIST
35691: ST_TO_ADDR
35692: GO 35836
// begin if result [ result ] [ 2 ] < tmp then
35694: LD_VAR 0 6
35698: PUSH
35699: LD_VAR 0 6
35703: ARRAY
35704: PUSH
35705: LD_INT 2
35707: ARRAY
35708: PUSH
35709: LD_VAR 0 9
35713: LESS
35714: IFFALSE 35756
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35716: LD_ADDR_VAR 0 6
35720: PUSH
35721: LD_VAR 0 6
35725: PPUSH
35726: LD_VAR 0 6
35730: PUSH
35731: LD_INT 1
35733: PLUS
35734: PPUSH
35735: LD_VAR 0 7
35739: PUSH
35740: LD_VAR 0 9
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PPUSH
35749: CALL_OW 2
35753: ST_TO_ADDR
35754: GO 35836
// for j = 1 to result do
35756: LD_ADDR_VAR 0 8
35760: PUSH
35761: DOUBLE
35762: LD_INT 1
35764: DEC
35765: ST_TO_ADDR
35766: LD_VAR 0 6
35770: PUSH
35771: FOR_TO
35772: IFFALSE 35834
// begin if tmp < result [ j ] [ 2 ] then
35774: LD_VAR 0 9
35778: PUSH
35779: LD_VAR 0 6
35783: PUSH
35784: LD_VAR 0 8
35788: ARRAY
35789: PUSH
35790: LD_INT 2
35792: ARRAY
35793: LESS
35794: IFFALSE 35832
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35796: LD_ADDR_VAR 0 6
35800: PUSH
35801: LD_VAR 0 6
35805: PPUSH
35806: LD_VAR 0 8
35810: PPUSH
35811: LD_VAR 0 7
35815: PUSH
35816: LD_VAR 0 9
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PPUSH
35825: CALL_OW 2
35829: ST_TO_ADDR
// break ;
35830: GO 35834
// end ; end ;
35832: GO 35771
35834: POP
35835: POP
// end ; end ;
35836: GO 35635
35838: POP
35839: POP
// if result and not asc then
35840: LD_VAR 0 6
35844: PUSH
35845: LD_VAR 0 4
35849: NOT
35850: AND
35851: IFFALSE 35926
// begin tmp := result ;
35853: LD_ADDR_VAR 0 9
35857: PUSH
35858: LD_VAR 0 6
35862: ST_TO_ADDR
// for i = tmp downto 1 do
35863: LD_ADDR_VAR 0 7
35867: PUSH
35868: DOUBLE
35869: LD_VAR 0 9
35873: INC
35874: ST_TO_ADDR
35875: LD_INT 1
35877: PUSH
35878: FOR_DOWNTO
35879: IFFALSE 35924
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35881: LD_ADDR_VAR 0 6
35885: PUSH
35886: LD_VAR 0 6
35890: PPUSH
35891: LD_VAR 0 9
35895: PUSH
35896: LD_VAR 0 7
35900: MINUS
35901: PUSH
35902: LD_INT 1
35904: PLUS
35905: PPUSH
35906: LD_VAR 0 9
35910: PUSH
35911: LD_VAR 0 7
35915: ARRAY
35916: PPUSH
35917: CALL_OW 1
35921: ST_TO_ADDR
35922: GO 35878
35924: POP
35925: POP
// end ; tmp := [ ] ;
35926: LD_ADDR_VAR 0 9
35930: PUSH
35931: EMPTY
35932: ST_TO_ADDR
// if mode then
35933: LD_VAR 0 5
35937: IFFALSE 36006
// begin for i = 1 to result do
35939: LD_ADDR_VAR 0 7
35943: PUSH
35944: DOUBLE
35945: LD_INT 1
35947: DEC
35948: ST_TO_ADDR
35949: LD_VAR 0 6
35953: PUSH
35954: FOR_TO
35955: IFFALSE 35994
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35957: LD_ADDR_VAR 0 9
35961: PUSH
35962: LD_VAR 0 9
35966: PPUSH
35967: LD_VAR 0 7
35971: PPUSH
35972: LD_VAR 0 6
35976: PUSH
35977: LD_VAR 0 7
35981: ARRAY
35982: PUSH
35983: LD_INT 1
35985: ARRAY
35986: PPUSH
35987: CALL_OW 1
35991: ST_TO_ADDR
35992: GO 35954
35994: POP
35995: POP
// result := tmp ;
35996: LD_ADDR_VAR 0 6
36000: PUSH
36001: LD_VAR 0 9
36005: ST_TO_ADDR
// end ; end ;
36006: LD_VAR 0 6
36010: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36011: LD_INT 0
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36019: LD_ADDR_VAR 0 5
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: EMPTY
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: ST_TO_ADDR
// if not x or not y then
36041: LD_VAR 0 2
36045: NOT
36046: PUSH
36047: LD_VAR 0 3
36051: NOT
36052: OR
36053: IFFALSE 36057
// exit ;
36055: GO 37709
// if not range then
36057: LD_VAR 0 4
36061: NOT
36062: IFFALSE 36072
// range := 10 ;
36064: LD_ADDR_VAR 0 4
36068: PUSH
36069: LD_INT 10
36071: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36072: LD_ADDR_VAR 0 8
36076: PUSH
36077: LD_INT 81
36079: PUSH
36080: LD_VAR 0 1
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 92
36091: PUSH
36092: LD_VAR 0 2
36096: PUSH
36097: LD_VAR 0 3
36101: PUSH
36102: LD_VAR 0 4
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 3
36115: PUSH
36116: LD_INT 21
36118: PUSH
36119: LD_INT 3
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: PPUSH
36135: CALL_OW 69
36139: ST_TO_ADDR
// if not tmp then
36140: LD_VAR 0 8
36144: NOT
36145: IFFALSE 36149
// exit ;
36147: GO 37709
// for i in tmp do
36149: LD_ADDR_VAR 0 6
36153: PUSH
36154: LD_VAR 0 8
36158: PUSH
36159: FOR_IN
36160: IFFALSE 37684
// begin points := [ 0 , 0 , 0 ] ;
36162: LD_ADDR_VAR 0 9
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: ST_TO_ADDR
// bpoints := 1 ;
36181: LD_ADDR_VAR 0 10
36185: PUSH
36186: LD_INT 1
36188: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36189: LD_VAR 0 6
36193: PPUSH
36194: CALL_OW 247
36198: PUSH
36199: LD_INT 1
36201: DOUBLE
36202: EQUAL
36203: IFTRUE 36207
36205: GO 36785
36207: POP
// begin if GetClass ( i ) = 1 then
36208: LD_VAR 0 6
36212: PPUSH
36213: CALL_OW 257
36217: PUSH
36218: LD_INT 1
36220: EQUAL
36221: IFFALSE 36242
// points := [ 10 , 5 , 3 ] ;
36223: LD_ADDR_VAR 0 9
36227: PUSH
36228: LD_INT 10
36230: PUSH
36231: LD_INT 5
36233: PUSH
36234: LD_INT 3
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36242: LD_VAR 0 6
36246: PPUSH
36247: CALL_OW 257
36251: PUSH
36252: LD_INT 2
36254: PUSH
36255: LD_INT 3
36257: PUSH
36258: LD_INT 4
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: LIST
36265: IN
36266: IFFALSE 36287
// points := [ 3 , 2 , 1 ] ;
36268: LD_ADDR_VAR 0 9
36272: PUSH
36273: LD_INT 3
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36287: LD_VAR 0 6
36291: PPUSH
36292: CALL_OW 257
36296: PUSH
36297: LD_INT 5
36299: EQUAL
36300: IFFALSE 36321
// points := [ 130 , 5 , 2 ] ;
36302: LD_ADDR_VAR 0 9
36306: PUSH
36307: LD_INT 130
36309: PUSH
36310: LD_INT 5
36312: PUSH
36313: LD_INT 2
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: LIST
36320: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36321: LD_VAR 0 6
36325: PPUSH
36326: CALL_OW 257
36330: PUSH
36331: LD_INT 8
36333: EQUAL
36334: IFFALSE 36355
// points := [ 35 , 35 , 30 ] ;
36336: LD_ADDR_VAR 0 9
36340: PUSH
36341: LD_INT 35
36343: PUSH
36344: LD_INT 35
36346: PUSH
36347: LD_INT 30
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: LIST
36354: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36355: LD_VAR 0 6
36359: PPUSH
36360: CALL_OW 257
36364: PUSH
36365: LD_INT 9
36367: EQUAL
36368: IFFALSE 36389
// points := [ 20 , 55 , 40 ] ;
36370: LD_ADDR_VAR 0 9
36374: PUSH
36375: LD_INT 20
36377: PUSH
36378: LD_INT 55
36380: PUSH
36381: LD_INT 40
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36389: LD_VAR 0 6
36393: PPUSH
36394: CALL_OW 257
36398: PUSH
36399: LD_INT 12
36401: PUSH
36402: LD_INT 16
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: IN
36409: IFFALSE 36430
// points := [ 5 , 3 , 2 ] ;
36411: LD_ADDR_VAR 0 9
36415: PUSH
36416: LD_INT 5
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36430: LD_VAR 0 6
36434: PPUSH
36435: CALL_OW 257
36439: PUSH
36440: LD_INT 17
36442: EQUAL
36443: IFFALSE 36464
// points := [ 100 , 50 , 75 ] ;
36445: LD_ADDR_VAR 0 9
36449: PUSH
36450: LD_INT 100
36452: PUSH
36453: LD_INT 50
36455: PUSH
36456: LD_INT 75
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36464: LD_VAR 0 6
36468: PPUSH
36469: CALL_OW 257
36473: PUSH
36474: LD_INT 15
36476: EQUAL
36477: IFFALSE 36498
// points := [ 10 , 5 , 3 ] ;
36479: LD_ADDR_VAR 0 9
36483: PUSH
36484: LD_INT 10
36486: PUSH
36487: LD_INT 5
36489: PUSH
36490: LD_INT 3
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36498: LD_VAR 0 6
36502: PPUSH
36503: CALL_OW 257
36507: PUSH
36508: LD_INT 14
36510: EQUAL
36511: IFFALSE 36532
// points := [ 10 , 0 , 0 ] ;
36513: LD_ADDR_VAR 0 9
36517: PUSH
36518: LD_INT 10
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36532: LD_VAR 0 6
36536: PPUSH
36537: CALL_OW 257
36541: PUSH
36542: LD_INT 11
36544: EQUAL
36545: IFFALSE 36566
// points := [ 30 , 10 , 5 ] ;
36547: LD_ADDR_VAR 0 9
36551: PUSH
36552: LD_INT 30
36554: PUSH
36555: LD_INT 10
36557: PUSH
36558: LD_INT 5
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36566: LD_VAR 0 1
36570: PPUSH
36571: LD_INT 5
36573: PPUSH
36574: CALL_OW 321
36578: PUSH
36579: LD_INT 2
36581: EQUAL
36582: IFFALSE 36599
// bpoints := bpoints * 1.8 ;
36584: LD_ADDR_VAR 0 10
36588: PUSH
36589: LD_VAR 0 10
36593: PUSH
36594: LD_REAL  1.80000000000000E+0000
36597: MUL
36598: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36599: LD_VAR 0 6
36603: PPUSH
36604: CALL_OW 257
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: LD_INT 2
36614: PUSH
36615: LD_INT 3
36617: PUSH
36618: LD_INT 4
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: IN
36627: PUSH
36628: LD_VAR 0 1
36632: PPUSH
36633: LD_INT 51
36635: PPUSH
36636: CALL_OW 321
36640: PUSH
36641: LD_INT 2
36643: EQUAL
36644: AND
36645: IFFALSE 36662
// bpoints := bpoints * 1.2 ;
36647: LD_ADDR_VAR 0 10
36651: PUSH
36652: LD_VAR 0 10
36656: PUSH
36657: LD_REAL  1.20000000000000E+0000
36660: MUL
36661: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36662: LD_VAR 0 6
36666: PPUSH
36667: CALL_OW 257
36671: PUSH
36672: LD_INT 5
36674: PUSH
36675: LD_INT 7
36677: PUSH
36678: LD_INT 9
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: IN
36686: PUSH
36687: LD_VAR 0 1
36691: PPUSH
36692: LD_INT 52
36694: PPUSH
36695: CALL_OW 321
36699: PUSH
36700: LD_INT 2
36702: EQUAL
36703: AND
36704: IFFALSE 36721
// bpoints := bpoints * 1.5 ;
36706: LD_ADDR_VAR 0 10
36710: PUSH
36711: LD_VAR 0 10
36715: PUSH
36716: LD_REAL  1.50000000000000E+0000
36719: MUL
36720: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36721: LD_VAR 0 1
36725: PPUSH
36726: LD_INT 66
36728: PPUSH
36729: CALL_OW 321
36733: PUSH
36734: LD_INT 2
36736: EQUAL
36737: IFFALSE 36754
// bpoints := bpoints * 1.1 ;
36739: LD_ADDR_VAR 0 10
36743: PUSH
36744: LD_VAR 0 10
36748: PUSH
36749: LD_REAL  1.10000000000000E+0000
36752: MUL
36753: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36754: LD_ADDR_VAR 0 10
36758: PUSH
36759: LD_VAR 0 10
36763: PUSH
36764: LD_VAR 0 6
36768: PPUSH
36769: LD_INT 1
36771: PPUSH
36772: CALL_OW 259
36776: PUSH
36777: LD_REAL  1.15000000000000E+0000
36780: MUL
36781: MUL
36782: ST_TO_ADDR
// end ; unit_vehicle :
36783: GO 37613
36785: LD_INT 2
36787: DOUBLE
36788: EQUAL
36789: IFTRUE 36793
36791: GO 37601
36793: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36794: LD_VAR 0 6
36798: PPUSH
36799: CALL_OW 264
36803: PUSH
36804: LD_INT 2
36806: PUSH
36807: LD_INT 42
36809: PUSH
36810: LD_INT 24
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: IN
36818: IFFALSE 36839
// points := [ 25 , 5 , 3 ] ;
36820: LD_ADDR_VAR 0 9
36824: PUSH
36825: LD_INT 25
36827: PUSH
36828: LD_INT 5
36830: PUSH
36831: LD_INT 3
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: LIST
36838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36839: LD_VAR 0 6
36843: PPUSH
36844: CALL_OW 264
36848: PUSH
36849: LD_INT 4
36851: PUSH
36852: LD_INT 43
36854: PUSH
36855: LD_INT 25
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: IN
36863: IFFALSE 36884
// points := [ 40 , 15 , 5 ] ;
36865: LD_ADDR_VAR 0 9
36869: PUSH
36870: LD_INT 40
36872: PUSH
36873: LD_INT 15
36875: PUSH
36876: LD_INT 5
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36884: LD_VAR 0 6
36888: PPUSH
36889: CALL_OW 264
36893: PUSH
36894: LD_INT 3
36896: PUSH
36897: LD_INT 23
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: IN
36904: IFFALSE 36925
// points := [ 7 , 25 , 8 ] ;
36906: LD_ADDR_VAR 0 9
36910: PUSH
36911: LD_INT 7
36913: PUSH
36914: LD_INT 25
36916: PUSH
36917: LD_INT 8
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36925: LD_VAR 0 6
36929: PPUSH
36930: CALL_OW 264
36934: PUSH
36935: LD_INT 5
36937: PUSH
36938: LD_INT 27
36940: PUSH
36941: LD_INT 44
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: IN
36949: IFFALSE 36970
// points := [ 14 , 50 , 16 ] ;
36951: LD_ADDR_VAR 0 9
36955: PUSH
36956: LD_INT 14
36958: PUSH
36959: LD_INT 50
36961: PUSH
36962: LD_INT 16
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36970: LD_VAR 0 6
36974: PPUSH
36975: CALL_OW 264
36979: PUSH
36980: LD_INT 6
36982: PUSH
36983: LD_INT 46
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: IN
36990: IFFALSE 37011
// points := [ 32 , 120 , 70 ] ;
36992: LD_ADDR_VAR 0 9
36996: PUSH
36997: LD_INT 32
36999: PUSH
37000: LD_INT 120
37002: PUSH
37003: LD_INT 70
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37011: LD_VAR 0 6
37015: PPUSH
37016: CALL_OW 264
37020: PUSH
37021: LD_INT 7
37023: PUSH
37024: LD_INT 28
37026: PUSH
37027: LD_INT 45
37029: PUSH
37030: LD_EXP 19
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: IN
37041: IFFALSE 37062
// points := [ 35 , 20 , 45 ] ;
37043: LD_ADDR_VAR 0 9
37047: PUSH
37048: LD_INT 35
37050: PUSH
37051: LD_INT 20
37053: PUSH
37054: LD_INT 45
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37062: LD_VAR 0 6
37066: PPUSH
37067: CALL_OW 264
37071: PUSH
37072: LD_INT 47
37074: PUSH
37075: EMPTY
37076: LIST
37077: IN
37078: IFFALSE 37099
// points := [ 67 , 45 , 75 ] ;
37080: LD_ADDR_VAR 0 9
37084: PUSH
37085: LD_INT 67
37087: PUSH
37088: LD_INT 45
37090: PUSH
37091: LD_INT 75
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37099: LD_VAR 0 6
37103: PPUSH
37104: CALL_OW 264
37108: PUSH
37109: LD_INT 26
37111: PUSH
37112: EMPTY
37113: LIST
37114: IN
37115: IFFALSE 37136
// points := [ 120 , 30 , 80 ] ;
37117: LD_ADDR_VAR 0 9
37121: PUSH
37122: LD_INT 120
37124: PUSH
37125: LD_INT 30
37127: PUSH
37128: LD_INT 80
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37136: LD_VAR 0 6
37140: PPUSH
37141: CALL_OW 264
37145: PUSH
37146: LD_INT 22
37148: PUSH
37149: EMPTY
37150: LIST
37151: IN
37152: IFFALSE 37173
// points := [ 40 , 1 , 1 ] ;
37154: LD_ADDR_VAR 0 9
37158: PUSH
37159: LD_INT 40
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37173: LD_VAR 0 6
37177: PPUSH
37178: CALL_OW 264
37182: PUSH
37183: LD_INT 29
37185: PUSH
37186: EMPTY
37187: LIST
37188: IN
37189: IFFALSE 37210
// points := [ 70 , 200 , 400 ] ;
37191: LD_ADDR_VAR 0 9
37195: PUSH
37196: LD_INT 70
37198: PUSH
37199: LD_INT 200
37201: PUSH
37202: LD_INT 400
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37210: LD_VAR 0 6
37214: PPUSH
37215: CALL_OW 264
37219: PUSH
37220: LD_INT 14
37222: PUSH
37223: LD_INT 53
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: IN
37230: IFFALSE 37251
// points := [ 40 , 10 , 20 ] ;
37232: LD_ADDR_VAR 0 9
37236: PUSH
37237: LD_INT 40
37239: PUSH
37240: LD_INT 10
37242: PUSH
37243: LD_INT 20
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37251: LD_VAR 0 6
37255: PPUSH
37256: CALL_OW 264
37260: PUSH
37261: LD_INT 9
37263: PUSH
37264: EMPTY
37265: LIST
37266: IN
37267: IFFALSE 37288
// points := [ 5 , 70 , 20 ] ;
37269: LD_ADDR_VAR 0 9
37273: PUSH
37274: LD_INT 5
37276: PUSH
37277: LD_INT 70
37279: PUSH
37280: LD_INT 20
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37288: LD_VAR 0 6
37292: PPUSH
37293: CALL_OW 264
37297: PUSH
37298: LD_INT 10
37300: PUSH
37301: EMPTY
37302: LIST
37303: IN
37304: IFFALSE 37325
// points := [ 35 , 110 , 70 ] ;
37306: LD_ADDR_VAR 0 9
37310: PUSH
37311: LD_INT 35
37313: PUSH
37314: LD_INT 110
37316: PUSH
37317: LD_INT 70
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: LIST
37324: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37325: LD_VAR 0 6
37329: PPUSH
37330: CALL_OW 265
37334: PUSH
37335: LD_INT 25
37337: EQUAL
37338: IFFALSE 37359
// points := [ 80 , 65 , 100 ] ;
37340: LD_ADDR_VAR 0 9
37344: PUSH
37345: LD_INT 80
37347: PUSH
37348: LD_INT 65
37350: PUSH
37351: LD_INT 100
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: LIST
37358: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37359: LD_VAR 0 6
37363: PPUSH
37364: CALL_OW 263
37368: PUSH
37369: LD_INT 1
37371: EQUAL
37372: IFFALSE 37407
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37374: LD_ADDR_VAR 0 10
37378: PUSH
37379: LD_VAR 0 10
37383: PUSH
37384: LD_VAR 0 6
37388: PPUSH
37389: CALL_OW 311
37393: PPUSH
37394: LD_INT 3
37396: PPUSH
37397: CALL_OW 259
37401: PUSH
37402: LD_INT 4
37404: MUL
37405: MUL
37406: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37407: LD_VAR 0 6
37411: PPUSH
37412: CALL_OW 263
37416: PUSH
37417: LD_INT 2
37419: EQUAL
37420: IFFALSE 37471
// begin j := IsControledBy ( i ) ;
37422: LD_ADDR_VAR 0 7
37426: PUSH
37427: LD_VAR 0 6
37431: PPUSH
37432: CALL_OW 312
37436: ST_TO_ADDR
// if j then
37437: LD_VAR 0 7
37441: IFFALSE 37471
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37443: LD_ADDR_VAR 0 10
37447: PUSH
37448: LD_VAR 0 10
37452: PUSH
37453: LD_VAR 0 7
37457: PPUSH
37458: LD_INT 3
37460: PPUSH
37461: CALL_OW 259
37465: PUSH
37466: LD_INT 3
37468: MUL
37469: MUL
37470: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37471: LD_VAR 0 6
37475: PPUSH
37476: CALL_OW 264
37480: PUSH
37481: LD_INT 5
37483: PUSH
37484: LD_INT 6
37486: PUSH
37487: LD_INT 46
37489: PUSH
37490: LD_INT 44
37492: PUSH
37493: LD_INT 47
37495: PUSH
37496: LD_INT 45
37498: PUSH
37499: LD_INT 28
37501: PUSH
37502: LD_INT 7
37504: PUSH
37505: LD_INT 27
37507: PUSH
37508: LD_INT 29
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: IN
37523: PUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: LD_INT 52
37531: PPUSH
37532: CALL_OW 321
37536: PUSH
37537: LD_INT 2
37539: EQUAL
37540: AND
37541: IFFALSE 37558
// bpoints := bpoints * 1.2 ;
37543: LD_ADDR_VAR 0 10
37547: PUSH
37548: LD_VAR 0 10
37552: PUSH
37553: LD_REAL  1.20000000000000E+0000
37556: MUL
37557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37558: LD_VAR 0 6
37562: PPUSH
37563: CALL_OW 264
37567: PUSH
37568: LD_INT 6
37570: PUSH
37571: LD_INT 46
37573: PUSH
37574: LD_INT 47
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: IN
37582: IFFALSE 37599
// bpoints := bpoints * 1.2 ;
37584: LD_ADDR_VAR 0 10
37588: PUSH
37589: LD_VAR 0 10
37593: PUSH
37594: LD_REAL  1.20000000000000E+0000
37597: MUL
37598: ST_TO_ADDR
// end ; unit_building :
37599: GO 37613
37601: LD_INT 3
37603: DOUBLE
37604: EQUAL
37605: IFTRUE 37609
37607: GO 37612
37609: POP
// ; end ;
37610: GO 37613
37612: POP
// for j = 1 to 3 do
37613: LD_ADDR_VAR 0 7
37617: PUSH
37618: DOUBLE
37619: LD_INT 1
37621: DEC
37622: ST_TO_ADDR
37623: LD_INT 3
37625: PUSH
37626: FOR_TO
37627: IFFALSE 37680
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37629: LD_ADDR_VAR 0 5
37633: PUSH
37634: LD_VAR 0 5
37638: PPUSH
37639: LD_VAR 0 7
37643: PPUSH
37644: LD_VAR 0 5
37648: PUSH
37649: LD_VAR 0 7
37653: ARRAY
37654: PUSH
37655: LD_VAR 0 9
37659: PUSH
37660: LD_VAR 0 7
37664: ARRAY
37665: PUSH
37666: LD_VAR 0 10
37670: MUL
37671: PLUS
37672: PPUSH
37673: CALL_OW 1
37677: ST_TO_ADDR
37678: GO 37626
37680: POP
37681: POP
// end ;
37682: GO 36159
37684: POP
37685: POP
// result := Replace ( result , 4 , tmp ) ;
37686: LD_ADDR_VAR 0 5
37690: PUSH
37691: LD_VAR 0 5
37695: PPUSH
37696: LD_INT 4
37698: PPUSH
37699: LD_VAR 0 8
37703: PPUSH
37704: CALL_OW 1
37708: ST_TO_ADDR
// end ;
37709: LD_VAR 0 5
37713: RET
// export function DangerAtRange ( unit , range ) ; begin
37714: LD_INT 0
37716: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37717: LD_ADDR_VAR 0 3
37721: PUSH
37722: LD_VAR 0 1
37726: PPUSH
37727: CALL_OW 255
37731: PPUSH
37732: LD_VAR 0 1
37736: PPUSH
37737: CALL_OW 250
37741: PPUSH
37742: LD_VAR 0 1
37746: PPUSH
37747: CALL_OW 251
37751: PPUSH
37752: LD_VAR 0 2
37756: PPUSH
37757: CALL 36011 0 4
37761: ST_TO_ADDR
// end ;
37762: LD_VAR 0 3
37766: RET
// export function DangerInArea ( side , area ) ; begin
37767: LD_INT 0
37769: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37770: LD_ADDR_VAR 0 3
37774: PUSH
37775: LD_VAR 0 2
37779: PPUSH
37780: LD_INT 81
37782: PUSH
37783: LD_VAR 0 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PPUSH
37792: CALL_OW 70
37796: ST_TO_ADDR
// end ;
37797: LD_VAR 0 3
37801: RET
// export function IsExtension ( b ) ; begin
37802: LD_INT 0
37804: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37805: LD_ADDR_VAR 0 2
37809: PUSH
37810: LD_VAR 0 1
37814: PUSH
37815: LD_INT 23
37817: PUSH
37818: LD_INT 20
37820: PUSH
37821: LD_INT 22
37823: PUSH
37824: LD_INT 17
37826: PUSH
37827: LD_INT 24
37829: PUSH
37830: LD_INT 21
37832: PUSH
37833: LD_INT 19
37835: PUSH
37836: LD_INT 16
37838: PUSH
37839: LD_INT 25
37841: PUSH
37842: LD_INT 18
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: IN
37857: ST_TO_ADDR
// end ;
37858: LD_VAR 0 2
37862: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37863: LD_INT 0
37865: PPUSH
37866: PPUSH
37867: PPUSH
// result := [ ] ;
37868: LD_ADDR_VAR 0 4
37872: PUSH
37873: EMPTY
37874: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37875: LD_ADDR_VAR 0 5
37879: PUSH
37880: LD_VAR 0 2
37884: PPUSH
37885: LD_INT 21
37887: PUSH
37888: LD_INT 3
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PPUSH
37895: CALL_OW 70
37899: ST_TO_ADDR
// if not tmp then
37900: LD_VAR 0 5
37904: NOT
37905: IFFALSE 37909
// exit ;
37907: GO 37973
// if checkLink then
37909: LD_VAR 0 3
37913: IFFALSE 37963
// begin for i in tmp do
37915: LD_ADDR_VAR 0 6
37919: PUSH
37920: LD_VAR 0 5
37924: PUSH
37925: FOR_IN
37926: IFFALSE 37961
// if GetBase ( i ) <> base then
37928: LD_VAR 0 6
37932: PPUSH
37933: CALL_OW 274
37937: PUSH
37938: LD_VAR 0 1
37942: NONEQUAL
37943: IFFALSE 37959
// ComLinkToBase ( base , i ) ;
37945: LD_VAR 0 1
37949: PPUSH
37950: LD_VAR 0 6
37954: PPUSH
37955: CALL_OW 169
37959: GO 37925
37961: POP
37962: POP
// end ; result := tmp ;
37963: LD_ADDR_VAR 0 4
37967: PUSH
37968: LD_VAR 0 5
37972: ST_TO_ADDR
// end ;
37973: LD_VAR 0 4
37977: RET
// export function ComComplete ( units , b ) ; var i ; begin
37978: LD_INT 0
37980: PPUSH
37981: PPUSH
// if not units then
37982: LD_VAR 0 1
37986: NOT
37987: IFFALSE 37991
// exit ;
37989: GO 38081
// for i in units do
37991: LD_ADDR_VAR 0 4
37995: PUSH
37996: LD_VAR 0 1
38000: PUSH
38001: FOR_IN
38002: IFFALSE 38079
// if BuildingStatus ( b ) = bs_build then
38004: LD_VAR 0 2
38008: PPUSH
38009: CALL_OW 461
38013: PUSH
38014: LD_INT 1
38016: EQUAL
38017: IFFALSE 38077
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38019: LD_VAR 0 4
38023: PPUSH
38024: LD_STRING h
38026: PUSH
38027: LD_VAR 0 2
38031: PPUSH
38032: CALL_OW 250
38036: PUSH
38037: LD_VAR 0 2
38041: PPUSH
38042: CALL_OW 251
38046: PUSH
38047: LD_VAR 0 2
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: PUSH
38070: EMPTY
38071: LIST
38072: PPUSH
38073: CALL_OW 446
38077: GO 38001
38079: POP
38080: POP
// end ;
38081: LD_VAR 0 3
38085: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38086: LD_INT 0
38088: PPUSH
38089: PPUSH
38090: PPUSH
38091: PPUSH
38092: PPUSH
38093: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38094: LD_VAR 0 1
38098: NOT
38099: PUSH
38100: LD_VAR 0 1
38104: PPUSH
38105: CALL_OW 263
38109: PUSH
38110: LD_INT 2
38112: NONEQUAL
38113: OR
38114: IFFALSE 38118
// exit ;
38116: GO 38434
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38118: LD_ADDR_VAR 0 6
38122: PUSH
38123: LD_INT 22
38125: PUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: CALL_OW 255
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: LD_INT 30
38145: PUSH
38146: LD_INT 36
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 34
38155: PUSH
38156: LD_INT 31
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PPUSH
38172: CALL_OW 69
38176: ST_TO_ADDR
// if not tmp then
38177: LD_VAR 0 6
38181: NOT
38182: IFFALSE 38186
// exit ;
38184: GO 38434
// result := [ ] ;
38186: LD_ADDR_VAR 0 2
38190: PUSH
38191: EMPTY
38192: ST_TO_ADDR
// for i in tmp do
38193: LD_ADDR_VAR 0 3
38197: PUSH
38198: LD_VAR 0 6
38202: PUSH
38203: FOR_IN
38204: IFFALSE 38275
// begin t := UnitsInside ( i ) ;
38206: LD_ADDR_VAR 0 4
38210: PUSH
38211: LD_VAR 0 3
38215: PPUSH
38216: CALL_OW 313
38220: ST_TO_ADDR
// if t then
38221: LD_VAR 0 4
38225: IFFALSE 38273
// for j in t do
38227: LD_ADDR_VAR 0 7
38231: PUSH
38232: LD_VAR 0 4
38236: PUSH
38237: FOR_IN
38238: IFFALSE 38271
// result := Replace ( result , result + 1 , j ) ;
38240: LD_ADDR_VAR 0 2
38244: PUSH
38245: LD_VAR 0 2
38249: PPUSH
38250: LD_VAR 0 2
38254: PUSH
38255: LD_INT 1
38257: PLUS
38258: PPUSH
38259: LD_VAR 0 7
38263: PPUSH
38264: CALL_OW 1
38268: ST_TO_ADDR
38269: GO 38237
38271: POP
38272: POP
// end ;
38273: GO 38203
38275: POP
38276: POP
// if not result then
38277: LD_VAR 0 2
38281: NOT
38282: IFFALSE 38286
// exit ;
38284: GO 38434
// mech := result [ 1 ] ;
38286: LD_ADDR_VAR 0 5
38290: PUSH
38291: LD_VAR 0 2
38295: PUSH
38296: LD_INT 1
38298: ARRAY
38299: ST_TO_ADDR
// if result > 1 then
38300: LD_VAR 0 2
38304: PUSH
38305: LD_INT 1
38307: GREATER
38308: IFFALSE 38420
// begin for i = 2 to result do
38310: LD_ADDR_VAR 0 3
38314: PUSH
38315: DOUBLE
38316: LD_INT 2
38318: DEC
38319: ST_TO_ADDR
38320: LD_VAR 0 2
38324: PUSH
38325: FOR_TO
38326: IFFALSE 38418
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38328: LD_ADDR_VAR 0 4
38332: PUSH
38333: LD_VAR 0 2
38337: PUSH
38338: LD_VAR 0 3
38342: ARRAY
38343: PPUSH
38344: LD_INT 3
38346: PPUSH
38347: CALL_OW 259
38351: PUSH
38352: LD_VAR 0 2
38356: PUSH
38357: LD_VAR 0 3
38361: ARRAY
38362: PPUSH
38363: CALL_OW 432
38367: MINUS
38368: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38369: LD_VAR 0 4
38373: PUSH
38374: LD_VAR 0 5
38378: PPUSH
38379: LD_INT 3
38381: PPUSH
38382: CALL_OW 259
38386: PUSH
38387: LD_VAR 0 5
38391: PPUSH
38392: CALL_OW 432
38396: MINUS
38397: GREATEREQUAL
38398: IFFALSE 38416
// mech := result [ i ] ;
38400: LD_ADDR_VAR 0 5
38404: PUSH
38405: LD_VAR 0 2
38409: PUSH
38410: LD_VAR 0 3
38414: ARRAY
38415: ST_TO_ADDR
// end ;
38416: GO 38325
38418: POP
38419: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38420: LD_VAR 0 1
38424: PPUSH
38425: LD_VAR 0 5
38429: PPUSH
38430: CALL_OW 135
// end ;
38434: LD_VAR 0 2
38438: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38439: LD_INT 0
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
// result := [ ] ;
38454: LD_ADDR_VAR 0 7
38458: PUSH
38459: EMPTY
38460: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38461: LD_VAR 0 1
38465: PPUSH
38466: CALL_OW 266
38470: PUSH
38471: LD_INT 0
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: IN
38481: NOT
38482: IFFALSE 38486
// exit ;
38484: GO 40120
// if name then
38486: LD_VAR 0 3
38490: IFFALSE 38506
// SetBName ( base_dep , name ) ;
38492: LD_VAR 0 1
38496: PPUSH
38497: LD_VAR 0 3
38501: PPUSH
38502: CALL_OW 500
// base := GetBase ( base_dep ) ;
38506: LD_ADDR_VAR 0 15
38510: PUSH
38511: LD_VAR 0 1
38515: PPUSH
38516: CALL_OW 274
38520: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38521: LD_ADDR_VAR 0 16
38525: PUSH
38526: LD_VAR 0 1
38530: PPUSH
38531: CALL_OW 255
38535: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38536: LD_ADDR_VAR 0 17
38540: PUSH
38541: LD_VAR 0 1
38545: PPUSH
38546: CALL_OW 248
38550: ST_TO_ADDR
// if sources then
38551: LD_VAR 0 5
38555: IFFALSE 38602
// for i = 1 to 3 do
38557: LD_ADDR_VAR 0 8
38561: PUSH
38562: DOUBLE
38563: LD_INT 1
38565: DEC
38566: ST_TO_ADDR
38567: LD_INT 3
38569: PUSH
38570: FOR_TO
38571: IFFALSE 38600
// AddResourceType ( base , i , sources [ i ] ) ;
38573: LD_VAR 0 15
38577: PPUSH
38578: LD_VAR 0 8
38582: PPUSH
38583: LD_VAR 0 5
38587: PUSH
38588: LD_VAR 0 8
38592: ARRAY
38593: PPUSH
38594: CALL_OW 276
38598: GO 38570
38600: POP
38601: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38602: LD_ADDR_VAR 0 18
38606: PUSH
38607: LD_VAR 0 15
38611: PPUSH
38612: LD_VAR 0 2
38616: PPUSH
38617: LD_INT 1
38619: PPUSH
38620: CALL 37863 0 3
38624: ST_TO_ADDR
// InitHc ;
38625: CALL_OW 19
// InitUc ;
38629: CALL_OW 18
// uc_side := side ;
38633: LD_ADDR_OWVAR 20
38637: PUSH
38638: LD_VAR 0 16
38642: ST_TO_ADDR
// uc_nation := nation ;
38643: LD_ADDR_OWVAR 21
38647: PUSH
38648: LD_VAR 0 17
38652: ST_TO_ADDR
// if buildings then
38653: LD_VAR 0 18
38657: IFFALSE 39979
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38659: LD_ADDR_VAR 0 19
38663: PUSH
38664: LD_VAR 0 18
38668: PPUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 30
38674: PUSH
38675: LD_INT 29
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 30
38684: PUSH
38685: LD_INT 30
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: PPUSH
38697: CALL_OW 72
38701: ST_TO_ADDR
// if tmp then
38702: LD_VAR 0 19
38706: IFFALSE 38754
// for i in tmp do
38708: LD_ADDR_VAR 0 8
38712: PUSH
38713: LD_VAR 0 19
38717: PUSH
38718: FOR_IN
38719: IFFALSE 38752
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38721: LD_VAR 0 8
38725: PPUSH
38726: CALL_OW 250
38730: PPUSH
38731: LD_VAR 0 8
38735: PPUSH
38736: CALL_OW 251
38740: PPUSH
38741: LD_VAR 0 16
38745: PPUSH
38746: CALL_OW 441
38750: GO 38718
38752: POP
38753: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38754: LD_VAR 0 18
38758: PPUSH
38759: LD_INT 2
38761: PUSH
38762: LD_INT 30
38764: PUSH
38765: LD_INT 32
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 30
38774: PUSH
38775: LD_INT 33
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: PPUSH
38787: CALL_OW 72
38791: IFFALSE 38879
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38793: LD_ADDR_VAR 0 8
38797: PUSH
38798: LD_VAR 0 18
38802: PPUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 30
38808: PUSH
38809: LD_INT 32
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 30
38818: PUSH
38819: LD_INT 33
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: LIST
38830: PPUSH
38831: CALL_OW 72
38835: PUSH
38836: FOR_IN
38837: IFFALSE 38877
// begin if not GetBWeapon ( i ) then
38839: LD_VAR 0 8
38843: PPUSH
38844: CALL_OW 269
38848: NOT
38849: IFFALSE 38875
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38851: LD_VAR 0 8
38855: PPUSH
38856: LD_VAR 0 8
38860: PPUSH
38861: LD_VAR 0 2
38865: PPUSH
38866: CALL 40125 0 2
38870: PPUSH
38871: CALL_OW 431
// end ;
38875: GO 38836
38877: POP
38878: POP
// end ; for i = 1 to personel do
38879: LD_ADDR_VAR 0 8
38883: PUSH
38884: DOUBLE
38885: LD_INT 1
38887: DEC
38888: ST_TO_ADDR
38889: LD_VAR 0 6
38893: PUSH
38894: FOR_TO
38895: IFFALSE 39959
// begin if i > 4 then
38897: LD_VAR 0 8
38901: PUSH
38902: LD_INT 4
38904: GREATER
38905: IFFALSE 38909
// break ;
38907: GO 39959
// case i of 1 :
38909: LD_VAR 0 8
38913: PUSH
38914: LD_INT 1
38916: DOUBLE
38917: EQUAL
38918: IFTRUE 38922
38920: GO 39002
38922: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38923: LD_ADDR_VAR 0 12
38927: PUSH
38928: LD_VAR 0 18
38932: PPUSH
38933: LD_INT 22
38935: PUSH
38936: LD_VAR 0 16
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 58
38947: PUSH
38948: EMPTY
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: LD_INT 30
38956: PUSH
38957: LD_INT 32
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 30
38966: PUSH
38967: LD_INT 4
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 30
38976: PUSH
38977: LD_INT 5
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: PPUSH
38995: CALL_OW 72
38999: ST_TO_ADDR
39000: GO 39224
39002: LD_INT 2
39004: DOUBLE
39005: EQUAL
39006: IFTRUE 39010
39008: GO 39072
39010: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39011: LD_ADDR_VAR 0 12
39015: PUSH
39016: LD_VAR 0 18
39020: PPUSH
39021: LD_INT 22
39023: PUSH
39024: LD_VAR 0 16
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: LD_INT 30
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 30
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: LIST
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PPUSH
39065: CALL_OW 72
39069: ST_TO_ADDR
39070: GO 39224
39072: LD_INT 3
39074: DOUBLE
39075: EQUAL
39076: IFTRUE 39080
39078: GO 39142
39080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39081: LD_ADDR_VAR 0 12
39085: PUSH
39086: LD_VAR 0 18
39090: PPUSH
39091: LD_INT 22
39093: PUSH
39094: LD_VAR 0 16
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: LD_INT 30
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 30
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PPUSH
39135: CALL_OW 72
39139: ST_TO_ADDR
39140: GO 39224
39142: LD_INT 4
39144: DOUBLE
39145: EQUAL
39146: IFTRUE 39150
39148: GO 39223
39150: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39151: LD_ADDR_VAR 0 12
39155: PUSH
39156: LD_VAR 0 18
39160: PPUSH
39161: LD_INT 22
39163: PUSH
39164: LD_VAR 0 16
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: LD_INT 30
39178: PUSH
39179: LD_INT 6
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 30
39188: PUSH
39189: LD_INT 7
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 30
39198: PUSH
39199: LD_INT 8
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PPUSH
39216: CALL_OW 72
39220: ST_TO_ADDR
39221: GO 39224
39223: POP
// if i = 1 then
39224: LD_VAR 0 8
39228: PUSH
39229: LD_INT 1
39231: EQUAL
39232: IFFALSE 39343
// begin tmp := [ ] ;
39234: LD_ADDR_VAR 0 19
39238: PUSH
39239: EMPTY
39240: ST_TO_ADDR
// for j in f do
39241: LD_ADDR_VAR 0 9
39245: PUSH
39246: LD_VAR 0 12
39250: PUSH
39251: FOR_IN
39252: IFFALSE 39325
// if GetBType ( j ) = b_bunker then
39254: LD_VAR 0 9
39258: PPUSH
39259: CALL_OW 266
39263: PUSH
39264: LD_INT 32
39266: EQUAL
39267: IFFALSE 39294
// tmp := Insert ( tmp , 1 , j ) else
39269: LD_ADDR_VAR 0 19
39273: PUSH
39274: LD_VAR 0 19
39278: PPUSH
39279: LD_INT 1
39281: PPUSH
39282: LD_VAR 0 9
39286: PPUSH
39287: CALL_OW 2
39291: ST_TO_ADDR
39292: GO 39323
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39294: LD_ADDR_VAR 0 19
39298: PUSH
39299: LD_VAR 0 19
39303: PPUSH
39304: LD_VAR 0 19
39308: PUSH
39309: LD_INT 1
39311: PLUS
39312: PPUSH
39313: LD_VAR 0 9
39317: PPUSH
39318: CALL_OW 2
39322: ST_TO_ADDR
39323: GO 39251
39325: POP
39326: POP
// if tmp then
39327: LD_VAR 0 19
39331: IFFALSE 39343
// f := tmp ;
39333: LD_ADDR_VAR 0 12
39337: PUSH
39338: LD_VAR 0 19
39342: ST_TO_ADDR
// end ; x := personel [ i ] ;
39343: LD_ADDR_VAR 0 13
39347: PUSH
39348: LD_VAR 0 6
39352: PUSH
39353: LD_VAR 0 8
39357: ARRAY
39358: ST_TO_ADDR
// if x = - 1 then
39359: LD_VAR 0 13
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: EQUAL
39368: IFFALSE 39577
// begin for j in f do
39370: LD_ADDR_VAR 0 9
39374: PUSH
39375: LD_VAR 0 12
39379: PUSH
39380: FOR_IN
39381: IFFALSE 39573
// repeat InitHc ;
39383: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39387: LD_VAR 0 9
39391: PPUSH
39392: CALL_OW 266
39396: PUSH
39397: LD_INT 5
39399: EQUAL
39400: IFFALSE 39470
// begin if UnitsInside ( j ) < 3 then
39402: LD_VAR 0 9
39406: PPUSH
39407: CALL_OW 313
39411: PUSH
39412: LD_INT 3
39414: LESS
39415: IFFALSE 39451
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39417: LD_INT 0
39419: PPUSH
39420: LD_INT 5
39422: PUSH
39423: LD_INT 8
39425: PUSH
39426: LD_INT 9
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: PUSH
39434: LD_VAR 0 17
39438: ARRAY
39439: PPUSH
39440: LD_VAR 0 4
39444: PPUSH
39445: CALL_OW 380
39449: GO 39468
// PrepareHuman ( false , i , skill ) ;
39451: LD_INT 0
39453: PPUSH
39454: LD_VAR 0 8
39458: PPUSH
39459: LD_VAR 0 4
39463: PPUSH
39464: CALL_OW 380
// end else
39468: GO 39487
// PrepareHuman ( false , i , skill ) ;
39470: LD_INT 0
39472: PPUSH
39473: LD_VAR 0 8
39477: PPUSH
39478: LD_VAR 0 4
39482: PPUSH
39483: CALL_OW 380
// un := CreateHuman ;
39487: LD_ADDR_VAR 0 14
39491: PUSH
39492: CALL_OW 44
39496: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39497: LD_ADDR_VAR 0 7
39501: PUSH
39502: LD_VAR 0 7
39506: PPUSH
39507: LD_INT 1
39509: PPUSH
39510: LD_VAR 0 14
39514: PPUSH
39515: CALL_OW 2
39519: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39520: LD_VAR 0 14
39524: PPUSH
39525: LD_VAR 0 9
39529: PPUSH
39530: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39534: LD_VAR 0 9
39538: PPUSH
39539: CALL_OW 313
39543: PUSH
39544: LD_INT 6
39546: EQUAL
39547: PUSH
39548: LD_VAR 0 9
39552: PPUSH
39553: CALL_OW 266
39557: PUSH
39558: LD_INT 32
39560: PUSH
39561: LD_INT 31
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: IN
39568: OR
39569: IFFALSE 39383
39571: GO 39380
39573: POP
39574: POP
// end else
39575: GO 39957
// for j = 1 to x do
39577: LD_ADDR_VAR 0 9
39581: PUSH
39582: DOUBLE
39583: LD_INT 1
39585: DEC
39586: ST_TO_ADDR
39587: LD_VAR 0 13
39591: PUSH
39592: FOR_TO
39593: IFFALSE 39955
// begin InitHc ;
39595: CALL_OW 19
// if not f then
39599: LD_VAR 0 12
39603: NOT
39604: IFFALSE 39693
// begin PrepareHuman ( false , i , skill ) ;
39606: LD_INT 0
39608: PPUSH
39609: LD_VAR 0 8
39613: PPUSH
39614: LD_VAR 0 4
39618: PPUSH
39619: CALL_OW 380
// un := CreateHuman ;
39623: LD_ADDR_VAR 0 14
39627: PUSH
39628: CALL_OW 44
39632: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39633: LD_ADDR_VAR 0 7
39637: PUSH
39638: LD_VAR 0 7
39642: PPUSH
39643: LD_INT 1
39645: PPUSH
39646: LD_VAR 0 14
39650: PPUSH
39651: CALL_OW 2
39655: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39656: LD_VAR 0 14
39660: PPUSH
39661: LD_VAR 0 1
39665: PPUSH
39666: CALL_OW 250
39670: PPUSH
39671: LD_VAR 0 1
39675: PPUSH
39676: CALL_OW 251
39680: PPUSH
39681: LD_INT 10
39683: PPUSH
39684: LD_INT 0
39686: PPUSH
39687: CALL_OW 50
// continue ;
39691: GO 39592
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39693: LD_VAR 0 12
39697: PUSH
39698: LD_INT 1
39700: ARRAY
39701: PPUSH
39702: CALL_OW 313
39706: PUSH
39707: LD_VAR 0 12
39711: PUSH
39712: LD_INT 1
39714: ARRAY
39715: PPUSH
39716: CALL_OW 266
39720: PUSH
39721: LD_INT 32
39723: PUSH
39724: LD_INT 31
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: IN
39731: AND
39732: PUSH
39733: LD_VAR 0 12
39737: PUSH
39738: LD_INT 1
39740: ARRAY
39741: PPUSH
39742: CALL_OW 313
39746: PUSH
39747: LD_INT 6
39749: EQUAL
39750: OR
39751: IFFALSE 39771
// f := Delete ( f , 1 ) ;
39753: LD_ADDR_VAR 0 12
39757: PUSH
39758: LD_VAR 0 12
39762: PPUSH
39763: LD_INT 1
39765: PPUSH
39766: CALL_OW 3
39770: ST_TO_ADDR
// if not f then
39771: LD_VAR 0 12
39775: NOT
39776: IFFALSE 39794
// begin x := x + 2 ;
39778: LD_ADDR_VAR 0 13
39782: PUSH
39783: LD_VAR 0 13
39787: PUSH
39788: LD_INT 2
39790: PLUS
39791: ST_TO_ADDR
// continue ;
39792: GO 39592
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39794: LD_VAR 0 12
39798: PUSH
39799: LD_INT 1
39801: ARRAY
39802: PPUSH
39803: CALL_OW 266
39807: PUSH
39808: LD_INT 5
39810: EQUAL
39811: IFFALSE 39885
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39813: LD_VAR 0 12
39817: PUSH
39818: LD_INT 1
39820: ARRAY
39821: PPUSH
39822: CALL_OW 313
39826: PUSH
39827: LD_INT 3
39829: LESS
39830: IFFALSE 39866
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39832: LD_INT 0
39834: PPUSH
39835: LD_INT 5
39837: PUSH
39838: LD_INT 8
39840: PUSH
39841: LD_INT 9
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: LIST
39848: PUSH
39849: LD_VAR 0 17
39853: ARRAY
39854: PPUSH
39855: LD_VAR 0 4
39859: PPUSH
39860: CALL_OW 380
39864: GO 39883
// PrepareHuman ( false , i , skill ) ;
39866: LD_INT 0
39868: PPUSH
39869: LD_VAR 0 8
39873: PPUSH
39874: LD_VAR 0 4
39878: PPUSH
39879: CALL_OW 380
// end else
39883: GO 39902
// PrepareHuman ( false , i , skill ) ;
39885: LD_INT 0
39887: PPUSH
39888: LD_VAR 0 8
39892: PPUSH
39893: LD_VAR 0 4
39897: PPUSH
39898: CALL_OW 380
// un := CreateHuman ;
39902: LD_ADDR_VAR 0 14
39906: PUSH
39907: CALL_OW 44
39911: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39912: LD_ADDR_VAR 0 7
39916: PUSH
39917: LD_VAR 0 7
39921: PPUSH
39922: LD_INT 1
39924: PPUSH
39925: LD_VAR 0 14
39929: PPUSH
39930: CALL_OW 2
39934: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39935: LD_VAR 0 14
39939: PPUSH
39940: LD_VAR 0 12
39944: PUSH
39945: LD_INT 1
39947: ARRAY
39948: PPUSH
39949: CALL_OW 52
// end ;
39953: GO 39592
39955: POP
39956: POP
// end ;
39957: GO 38894
39959: POP
39960: POP
// result := result ^ buildings ;
39961: LD_ADDR_VAR 0 7
39965: PUSH
39966: LD_VAR 0 7
39970: PUSH
39971: LD_VAR 0 18
39975: ADD
39976: ST_TO_ADDR
// end else
39977: GO 40120
// begin for i = 1 to personel do
39979: LD_ADDR_VAR 0 8
39983: PUSH
39984: DOUBLE
39985: LD_INT 1
39987: DEC
39988: ST_TO_ADDR
39989: LD_VAR 0 6
39993: PUSH
39994: FOR_TO
39995: IFFALSE 40118
// begin if i > 4 then
39997: LD_VAR 0 8
40001: PUSH
40002: LD_INT 4
40004: GREATER
40005: IFFALSE 40009
// break ;
40007: GO 40118
// x := personel [ i ] ;
40009: LD_ADDR_VAR 0 13
40013: PUSH
40014: LD_VAR 0 6
40018: PUSH
40019: LD_VAR 0 8
40023: ARRAY
40024: ST_TO_ADDR
// if x = - 1 then
40025: LD_VAR 0 13
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: EQUAL
40034: IFFALSE 40038
// continue ;
40036: GO 39994
// PrepareHuman ( false , i , skill ) ;
40038: LD_INT 0
40040: PPUSH
40041: LD_VAR 0 8
40045: PPUSH
40046: LD_VAR 0 4
40050: PPUSH
40051: CALL_OW 380
// un := CreateHuman ;
40055: LD_ADDR_VAR 0 14
40059: PUSH
40060: CALL_OW 44
40064: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40065: LD_VAR 0 14
40069: PPUSH
40070: LD_VAR 0 1
40074: PPUSH
40075: CALL_OW 250
40079: PPUSH
40080: LD_VAR 0 1
40084: PPUSH
40085: CALL_OW 251
40089: PPUSH
40090: LD_INT 10
40092: PPUSH
40093: LD_INT 0
40095: PPUSH
40096: CALL_OW 50
// result := result ^ un ;
40100: LD_ADDR_VAR 0 7
40104: PUSH
40105: LD_VAR 0 7
40109: PUSH
40110: LD_VAR 0 14
40114: ADD
40115: ST_TO_ADDR
// end ;
40116: GO 39994
40118: POP
40119: POP
// end ; end ;
40120: LD_VAR 0 7
40124: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40125: LD_INT 0
40127: PPUSH
40128: PPUSH
40129: PPUSH
40130: PPUSH
40131: PPUSH
40132: PPUSH
40133: PPUSH
40134: PPUSH
40135: PPUSH
40136: PPUSH
40137: PPUSH
40138: PPUSH
40139: PPUSH
40140: PPUSH
40141: PPUSH
40142: PPUSH
// result := false ;
40143: LD_ADDR_VAR 0 3
40147: PUSH
40148: LD_INT 0
40150: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40151: LD_VAR 0 1
40155: NOT
40156: PUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 266
40166: PUSH
40167: LD_INT 32
40169: PUSH
40170: LD_INT 33
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: IN
40177: NOT
40178: OR
40179: IFFALSE 40183
// exit ;
40181: GO 41292
// nat := GetNation ( tower ) ;
40183: LD_ADDR_VAR 0 12
40187: PUSH
40188: LD_VAR 0 1
40192: PPUSH
40193: CALL_OW 248
40197: ST_TO_ADDR
// side := GetSide ( tower ) ;
40198: LD_ADDR_VAR 0 16
40202: PUSH
40203: LD_VAR 0 1
40207: PPUSH
40208: CALL_OW 255
40212: ST_TO_ADDR
// x := GetX ( tower ) ;
40213: LD_ADDR_VAR 0 10
40217: PUSH
40218: LD_VAR 0 1
40222: PPUSH
40223: CALL_OW 250
40227: ST_TO_ADDR
// y := GetY ( tower ) ;
40228: LD_ADDR_VAR 0 11
40232: PUSH
40233: LD_VAR 0 1
40237: PPUSH
40238: CALL_OW 251
40242: ST_TO_ADDR
// if not x or not y then
40243: LD_VAR 0 10
40247: NOT
40248: PUSH
40249: LD_VAR 0 11
40253: NOT
40254: OR
40255: IFFALSE 40259
// exit ;
40257: GO 41292
// weapon := 0 ;
40259: LD_ADDR_VAR 0 18
40263: PUSH
40264: LD_INT 0
40266: ST_TO_ADDR
// fac_list := [ ] ;
40267: LD_ADDR_VAR 0 17
40271: PUSH
40272: EMPTY
40273: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40274: LD_ADDR_VAR 0 6
40278: PUSH
40279: LD_VAR 0 1
40283: PPUSH
40284: CALL_OW 274
40288: PPUSH
40289: LD_VAR 0 2
40293: PPUSH
40294: LD_INT 0
40296: PPUSH
40297: CALL 37863 0 3
40301: PPUSH
40302: LD_INT 30
40304: PUSH
40305: LD_INT 3
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PPUSH
40312: CALL_OW 72
40316: ST_TO_ADDR
// if not factories then
40317: LD_VAR 0 6
40321: NOT
40322: IFFALSE 40326
// exit ;
40324: GO 41292
// for i in factories do
40326: LD_ADDR_VAR 0 8
40330: PUSH
40331: LD_VAR 0 6
40335: PUSH
40336: FOR_IN
40337: IFFALSE 40362
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40339: LD_ADDR_VAR 0 17
40343: PUSH
40344: LD_VAR 0 17
40348: PUSH
40349: LD_VAR 0 8
40353: PPUSH
40354: CALL_OW 478
40358: UNION
40359: ST_TO_ADDR
40360: GO 40336
40362: POP
40363: POP
// if not fac_list then
40364: LD_VAR 0 17
40368: NOT
40369: IFFALSE 40373
// exit ;
40371: GO 41292
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40373: LD_ADDR_VAR 0 5
40377: PUSH
40378: LD_INT 4
40380: PUSH
40381: LD_INT 5
40383: PUSH
40384: LD_INT 9
40386: PUSH
40387: LD_INT 10
40389: PUSH
40390: LD_INT 6
40392: PUSH
40393: LD_INT 7
40395: PUSH
40396: LD_INT 11
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 27
40410: PUSH
40411: LD_INT 28
40413: PUSH
40414: LD_INT 26
40416: PUSH
40417: LD_INT 30
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 43
40428: PUSH
40429: LD_INT 44
40431: PUSH
40432: LD_INT 46
40434: PUSH
40435: LD_INT 45
40437: PUSH
40438: LD_INT 47
40440: PUSH
40441: LD_INT 49
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: PUSH
40457: LD_VAR 0 12
40461: ARRAY
40462: ST_TO_ADDR
// list := list isect fac_list ;
40463: LD_ADDR_VAR 0 5
40467: PUSH
40468: LD_VAR 0 5
40472: PUSH
40473: LD_VAR 0 17
40477: ISECT
40478: ST_TO_ADDR
// if not list then
40479: LD_VAR 0 5
40483: NOT
40484: IFFALSE 40488
// exit ;
40486: GO 41292
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40488: LD_VAR 0 12
40492: PUSH
40493: LD_INT 3
40495: EQUAL
40496: PUSH
40497: LD_INT 49
40499: PUSH
40500: LD_VAR 0 5
40504: IN
40505: AND
40506: PUSH
40507: LD_INT 31
40509: PPUSH
40510: LD_VAR 0 16
40514: PPUSH
40515: CALL_OW 321
40519: PUSH
40520: LD_INT 2
40522: EQUAL
40523: AND
40524: IFFALSE 40584
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40526: LD_INT 22
40528: PUSH
40529: LD_VAR 0 16
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 35
40540: PUSH
40541: LD_INT 49
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 91
40550: PUSH
40551: LD_VAR 0 1
40555: PUSH
40556: LD_INT 10
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: LIST
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: LIST
40568: PPUSH
40569: CALL_OW 69
40573: NOT
40574: IFFALSE 40584
// weapon := ru_time_lapser ;
40576: LD_ADDR_VAR 0 18
40580: PUSH
40581: LD_INT 49
40583: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40584: LD_VAR 0 12
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: IN
40599: PUSH
40600: LD_INT 11
40602: PUSH
40603: LD_VAR 0 5
40607: IN
40608: PUSH
40609: LD_INT 30
40611: PUSH
40612: LD_VAR 0 5
40616: IN
40617: OR
40618: AND
40619: PUSH
40620: LD_INT 6
40622: PPUSH
40623: LD_VAR 0 16
40627: PPUSH
40628: CALL_OW 321
40632: PUSH
40633: LD_INT 2
40635: EQUAL
40636: AND
40637: IFFALSE 40802
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40639: LD_INT 22
40641: PUSH
40642: LD_VAR 0 16
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 35
40656: PUSH
40657: LD_INT 11
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 35
40666: PUSH
40667: LD_INT 30
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 91
40681: PUSH
40682: LD_VAR 0 1
40686: PUSH
40687: LD_INT 18
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: LIST
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: LIST
40699: PPUSH
40700: CALL_OW 69
40704: NOT
40705: PUSH
40706: LD_INT 22
40708: PUSH
40709: LD_VAR 0 16
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: LD_INT 30
40723: PUSH
40724: LD_INT 32
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 30
40733: PUSH
40734: LD_INT 33
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 91
40748: PUSH
40749: LD_VAR 0 1
40753: PUSH
40754: LD_INT 12
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: LIST
40766: PUSH
40767: EMPTY
40768: LIST
40769: PPUSH
40770: CALL_OW 69
40774: PUSH
40775: LD_INT 2
40777: GREATER
40778: AND
40779: IFFALSE 40802
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40781: LD_ADDR_VAR 0 18
40785: PUSH
40786: LD_INT 11
40788: PUSH
40789: LD_INT 30
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_VAR 0 12
40800: ARRAY
40801: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40802: LD_VAR 0 18
40806: NOT
40807: PUSH
40808: LD_INT 40
40810: PPUSH
40811: LD_VAR 0 16
40815: PPUSH
40816: CALL_OW 321
40820: PUSH
40821: LD_INT 2
40823: EQUAL
40824: AND
40825: PUSH
40826: LD_INT 7
40828: PUSH
40829: LD_VAR 0 5
40833: IN
40834: PUSH
40835: LD_INT 28
40837: PUSH
40838: LD_VAR 0 5
40842: IN
40843: OR
40844: PUSH
40845: LD_INT 45
40847: PUSH
40848: LD_VAR 0 5
40852: IN
40853: OR
40854: AND
40855: IFFALSE 41109
// begin hex := GetHexInfo ( x , y ) ;
40857: LD_ADDR_VAR 0 4
40861: PUSH
40862: LD_VAR 0 10
40866: PPUSH
40867: LD_VAR 0 11
40871: PPUSH
40872: CALL_OW 546
40876: ST_TO_ADDR
// if hex [ 1 ] then
40877: LD_VAR 0 4
40881: PUSH
40882: LD_INT 1
40884: ARRAY
40885: IFFALSE 40889
// exit ;
40887: GO 41292
// height := hex [ 2 ] ;
40889: LD_ADDR_VAR 0 15
40893: PUSH
40894: LD_VAR 0 4
40898: PUSH
40899: LD_INT 2
40901: ARRAY
40902: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40903: LD_ADDR_VAR 0 14
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: LD_INT 3
40916: PUSH
40917: LD_INT 5
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: ST_TO_ADDR
// for i in tmp do
40926: LD_ADDR_VAR 0 8
40930: PUSH
40931: LD_VAR 0 14
40935: PUSH
40936: FOR_IN
40937: IFFALSE 41107
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40939: LD_ADDR_VAR 0 9
40943: PUSH
40944: LD_VAR 0 10
40948: PPUSH
40949: LD_VAR 0 8
40953: PPUSH
40954: LD_INT 5
40956: PPUSH
40957: CALL_OW 272
40961: PUSH
40962: LD_VAR 0 11
40966: PPUSH
40967: LD_VAR 0 8
40971: PPUSH
40972: LD_INT 5
40974: PPUSH
40975: CALL_OW 273
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40984: LD_VAR 0 9
40988: PUSH
40989: LD_INT 1
40991: ARRAY
40992: PPUSH
40993: LD_VAR 0 9
40997: PUSH
40998: LD_INT 2
41000: ARRAY
41001: PPUSH
41002: CALL_OW 488
41006: IFFALSE 41105
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41008: LD_ADDR_VAR 0 4
41012: PUSH
41013: LD_VAR 0 9
41017: PUSH
41018: LD_INT 1
41020: ARRAY
41021: PPUSH
41022: LD_VAR 0 9
41026: PUSH
41027: LD_INT 2
41029: ARRAY
41030: PPUSH
41031: CALL_OW 546
41035: ST_TO_ADDR
// if hex [ 1 ] then
41036: LD_VAR 0 4
41040: PUSH
41041: LD_INT 1
41043: ARRAY
41044: IFFALSE 41048
// continue ;
41046: GO 40936
// h := hex [ 2 ] ;
41048: LD_ADDR_VAR 0 13
41052: PUSH
41053: LD_VAR 0 4
41057: PUSH
41058: LD_INT 2
41060: ARRAY
41061: ST_TO_ADDR
// if h + 7 < height then
41062: LD_VAR 0 13
41066: PUSH
41067: LD_INT 7
41069: PLUS
41070: PUSH
41071: LD_VAR 0 15
41075: LESS
41076: IFFALSE 41105
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41078: LD_ADDR_VAR 0 18
41082: PUSH
41083: LD_INT 7
41085: PUSH
41086: LD_INT 28
41088: PUSH
41089: LD_INT 45
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: LIST
41096: PUSH
41097: LD_VAR 0 12
41101: ARRAY
41102: ST_TO_ADDR
// break ;
41103: GO 41107
// end ; end ; end ;
41105: GO 40936
41107: POP
41108: POP
// end ; if not weapon then
41109: LD_VAR 0 18
41113: NOT
41114: IFFALSE 41174
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41116: LD_ADDR_VAR 0 5
41120: PUSH
41121: LD_VAR 0 5
41125: PUSH
41126: LD_INT 11
41128: PUSH
41129: LD_INT 30
41131: PUSH
41132: LD_INT 49
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: LIST
41139: DIFF
41140: ST_TO_ADDR
// if not list then
41141: LD_VAR 0 5
41145: NOT
41146: IFFALSE 41150
// exit ;
41148: GO 41292
// weapon := list [ rand ( 1 , list ) ] ;
41150: LD_ADDR_VAR 0 18
41154: PUSH
41155: LD_VAR 0 5
41159: PUSH
41160: LD_INT 1
41162: PPUSH
41163: LD_VAR 0 5
41167: PPUSH
41168: CALL_OW 12
41172: ARRAY
41173: ST_TO_ADDR
// end ; if weapon then
41174: LD_VAR 0 18
41178: IFFALSE 41292
// begin tmp := CostOfWeapon ( weapon ) ;
41180: LD_ADDR_VAR 0 14
41184: PUSH
41185: LD_VAR 0 18
41189: PPUSH
41190: CALL_OW 451
41194: ST_TO_ADDR
// j := GetBase ( tower ) ;
41195: LD_ADDR_VAR 0 9
41199: PUSH
41200: LD_VAR 0 1
41204: PPUSH
41205: CALL_OW 274
41209: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41210: LD_VAR 0 9
41214: PPUSH
41215: LD_INT 1
41217: PPUSH
41218: CALL_OW 275
41222: PUSH
41223: LD_VAR 0 14
41227: PUSH
41228: LD_INT 1
41230: ARRAY
41231: GREATEREQUAL
41232: PUSH
41233: LD_VAR 0 9
41237: PPUSH
41238: LD_INT 2
41240: PPUSH
41241: CALL_OW 275
41245: PUSH
41246: LD_VAR 0 14
41250: PUSH
41251: LD_INT 2
41253: ARRAY
41254: GREATEREQUAL
41255: AND
41256: PUSH
41257: LD_VAR 0 9
41261: PPUSH
41262: LD_INT 3
41264: PPUSH
41265: CALL_OW 275
41269: PUSH
41270: LD_VAR 0 14
41274: PUSH
41275: LD_INT 3
41277: ARRAY
41278: GREATEREQUAL
41279: AND
41280: IFFALSE 41292
// result := weapon ;
41282: LD_ADDR_VAR 0 3
41286: PUSH
41287: LD_VAR 0 18
41291: ST_TO_ADDR
// end ; end ;
41292: LD_VAR 0 3
41296: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41297: LD_INT 0
41299: PPUSH
41300: PPUSH
// result := true ;
41301: LD_ADDR_VAR 0 3
41305: PUSH
41306: LD_INT 1
41308: ST_TO_ADDR
// if array1 = array2 then
41309: LD_VAR 0 1
41313: PUSH
41314: LD_VAR 0 2
41318: EQUAL
41319: IFFALSE 41379
// begin for i = 1 to array1 do
41321: LD_ADDR_VAR 0 4
41325: PUSH
41326: DOUBLE
41327: LD_INT 1
41329: DEC
41330: ST_TO_ADDR
41331: LD_VAR 0 1
41335: PUSH
41336: FOR_TO
41337: IFFALSE 41375
// if array1 [ i ] <> array2 [ i ] then
41339: LD_VAR 0 1
41343: PUSH
41344: LD_VAR 0 4
41348: ARRAY
41349: PUSH
41350: LD_VAR 0 2
41354: PUSH
41355: LD_VAR 0 4
41359: ARRAY
41360: NONEQUAL
41361: IFFALSE 41373
// begin result := false ;
41363: LD_ADDR_VAR 0 3
41367: PUSH
41368: LD_INT 0
41370: ST_TO_ADDR
// break ;
41371: GO 41375
// end ;
41373: GO 41336
41375: POP
41376: POP
// end else
41377: GO 41387
// result := false ;
41379: LD_ADDR_VAR 0 3
41383: PUSH
41384: LD_INT 0
41386: ST_TO_ADDR
// end ;
41387: LD_VAR 0 3
41391: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41392: LD_INT 0
41394: PPUSH
41395: PPUSH
// if not array1 or not array2 then
41396: LD_VAR 0 1
41400: NOT
41401: PUSH
41402: LD_VAR 0 2
41406: NOT
41407: OR
41408: IFFALSE 41412
// exit ;
41410: GO 41476
// result := true ;
41412: LD_ADDR_VAR 0 3
41416: PUSH
41417: LD_INT 1
41419: ST_TO_ADDR
// for i = 1 to array1 do
41420: LD_ADDR_VAR 0 4
41424: PUSH
41425: DOUBLE
41426: LD_INT 1
41428: DEC
41429: ST_TO_ADDR
41430: LD_VAR 0 1
41434: PUSH
41435: FOR_TO
41436: IFFALSE 41474
// if array1 [ i ] <> array2 [ i ] then
41438: LD_VAR 0 1
41442: PUSH
41443: LD_VAR 0 4
41447: ARRAY
41448: PUSH
41449: LD_VAR 0 2
41453: PUSH
41454: LD_VAR 0 4
41458: ARRAY
41459: NONEQUAL
41460: IFFALSE 41472
// begin result := false ;
41462: LD_ADDR_VAR 0 3
41466: PUSH
41467: LD_INT 0
41469: ST_TO_ADDR
// break ;
41470: GO 41474
// end ;
41472: GO 41435
41474: POP
41475: POP
// end ;
41476: LD_VAR 0 3
41480: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41481: LD_INT 0
41483: PPUSH
41484: PPUSH
41485: PPUSH
// pom := GetBase ( fac ) ;
41486: LD_ADDR_VAR 0 5
41490: PUSH
41491: LD_VAR 0 1
41495: PPUSH
41496: CALL_OW 274
41500: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41501: LD_ADDR_VAR 0 4
41505: PUSH
41506: LD_VAR 0 2
41510: PUSH
41511: LD_INT 1
41513: ARRAY
41514: PPUSH
41515: LD_VAR 0 2
41519: PUSH
41520: LD_INT 2
41522: ARRAY
41523: PPUSH
41524: LD_VAR 0 2
41528: PUSH
41529: LD_INT 3
41531: ARRAY
41532: PPUSH
41533: LD_VAR 0 2
41537: PUSH
41538: LD_INT 4
41540: ARRAY
41541: PPUSH
41542: CALL_OW 449
41546: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41547: LD_ADDR_VAR 0 3
41551: PUSH
41552: LD_VAR 0 5
41556: PPUSH
41557: LD_INT 1
41559: PPUSH
41560: CALL_OW 275
41564: PUSH
41565: LD_VAR 0 4
41569: PUSH
41570: LD_INT 1
41572: ARRAY
41573: GREATEREQUAL
41574: PUSH
41575: LD_VAR 0 5
41579: PPUSH
41580: LD_INT 2
41582: PPUSH
41583: CALL_OW 275
41587: PUSH
41588: LD_VAR 0 4
41592: PUSH
41593: LD_INT 2
41595: ARRAY
41596: GREATEREQUAL
41597: AND
41598: PUSH
41599: LD_VAR 0 5
41603: PPUSH
41604: LD_INT 3
41606: PPUSH
41607: CALL_OW 275
41611: PUSH
41612: LD_VAR 0 4
41616: PUSH
41617: LD_INT 3
41619: ARRAY
41620: GREATEREQUAL
41621: AND
41622: ST_TO_ADDR
// end ;
41623: LD_VAR 0 3
41627: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41628: LD_INT 0
41630: PPUSH
41631: PPUSH
41632: PPUSH
41633: PPUSH
// pom := GetBase ( building ) ;
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: LD_VAR 0 1
41643: PPUSH
41644: CALL_OW 274
41648: ST_TO_ADDR
// if not pom then
41649: LD_VAR 0 3
41653: NOT
41654: IFFALSE 41658
// exit ;
41656: GO 41828
// btype := GetBType ( building ) ;
41658: LD_ADDR_VAR 0 5
41662: PUSH
41663: LD_VAR 0 1
41667: PPUSH
41668: CALL_OW 266
41672: ST_TO_ADDR
// if btype = b_armoury then
41673: LD_VAR 0 5
41677: PUSH
41678: LD_INT 4
41680: EQUAL
41681: IFFALSE 41691
// btype := b_barracks ;
41683: LD_ADDR_VAR 0 5
41687: PUSH
41688: LD_INT 5
41690: ST_TO_ADDR
// if btype = b_depot then
41691: LD_VAR 0 5
41695: PUSH
41696: LD_INT 0
41698: EQUAL
41699: IFFALSE 41709
// btype := b_warehouse ;
41701: LD_ADDR_VAR 0 5
41705: PUSH
41706: LD_INT 1
41708: ST_TO_ADDR
// if btype = b_workshop then
41709: LD_VAR 0 5
41713: PUSH
41714: LD_INT 2
41716: EQUAL
41717: IFFALSE 41727
// btype := b_factory ;
41719: LD_ADDR_VAR 0 5
41723: PUSH
41724: LD_INT 3
41726: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41727: LD_ADDR_VAR 0 4
41731: PUSH
41732: LD_VAR 0 5
41736: PPUSH
41737: LD_VAR 0 1
41741: PPUSH
41742: CALL_OW 248
41746: PPUSH
41747: CALL_OW 450
41751: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41752: LD_ADDR_VAR 0 2
41756: PUSH
41757: LD_VAR 0 3
41761: PPUSH
41762: LD_INT 1
41764: PPUSH
41765: CALL_OW 275
41769: PUSH
41770: LD_VAR 0 4
41774: PUSH
41775: LD_INT 1
41777: ARRAY
41778: GREATEREQUAL
41779: PUSH
41780: LD_VAR 0 3
41784: PPUSH
41785: LD_INT 2
41787: PPUSH
41788: CALL_OW 275
41792: PUSH
41793: LD_VAR 0 4
41797: PUSH
41798: LD_INT 2
41800: ARRAY
41801: GREATEREQUAL
41802: AND
41803: PUSH
41804: LD_VAR 0 3
41808: PPUSH
41809: LD_INT 3
41811: PPUSH
41812: CALL_OW 275
41816: PUSH
41817: LD_VAR 0 4
41821: PUSH
41822: LD_INT 3
41824: ARRAY
41825: GREATEREQUAL
41826: AND
41827: ST_TO_ADDR
// end ;
41828: LD_VAR 0 2
41832: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41833: LD_INT 0
41835: PPUSH
41836: PPUSH
41837: PPUSH
// pom := GetBase ( building ) ;
41838: LD_ADDR_VAR 0 4
41842: PUSH
41843: LD_VAR 0 1
41847: PPUSH
41848: CALL_OW 274
41852: ST_TO_ADDR
// if not pom then
41853: LD_VAR 0 4
41857: NOT
41858: IFFALSE 41862
// exit ;
41860: GO 41963
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41862: LD_ADDR_VAR 0 5
41866: PUSH
41867: LD_VAR 0 2
41871: PPUSH
41872: LD_VAR 0 1
41876: PPUSH
41877: CALL_OW 248
41881: PPUSH
41882: CALL_OW 450
41886: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41887: LD_ADDR_VAR 0 3
41891: PUSH
41892: LD_VAR 0 4
41896: PPUSH
41897: LD_INT 1
41899: PPUSH
41900: CALL_OW 275
41904: PUSH
41905: LD_VAR 0 5
41909: PUSH
41910: LD_INT 1
41912: ARRAY
41913: GREATEREQUAL
41914: PUSH
41915: LD_VAR 0 4
41919: PPUSH
41920: LD_INT 2
41922: PPUSH
41923: CALL_OW 275
41927: PUSH
41928: LD_VAR 0 5
41932: PUSH
41933: LD_INT 2
41935: ARRAY
41936: GREATEREQUAL
41937: AND
41938: PUSH
41939: LD_VAR 0 4
41943: PPUSH
41944: LD_INT 3
41946: PPUSH
41947: CALL_OW 275
41951: PUSH
41952: LD_VAR 0 5
41956: PUSH
41957: LD_INT 3
41959: ARRAY
41960: GREATEREQUAL
41961: AND
41962: ST_TO_ADDR
// end ;
41963: LD_VAR 0 3
41967: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41968: LD_INT 0
41970: PPUSH
41971: PPUSH
41972: PPUSH
41973: PPUSH
41974: PPUSH
41975: PPUSH
41976: PPUSH
41977: PPUSH
41978: PPUSH
41979: PPUSH
41980: PPUSH
// result := false ;
41981: LD_ADDR_VAR 0 8
41985: PUSH
41986: LD_INT 0
41988: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41989: LD_VAR 0 5
41993: NOT
41994: PUSH
41995: LD_VAR 0 1
41999: NOT
42000: OR
42001: PUSH
42002: LD_VAR 0 2
42006: NOT
42007: OR
42008: PUSH
42009: LD_VAR 0 3
42013: NOT
42014: OR
42015: IFFALSE 42019
// exit ;
42017: GO 42833
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42019: LD_ADDR_VAR 0 14
42023: PUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: LD_VAR 0 2
42033: PPUSH
42034: LD_VAR 0 3
42038: PPUSH
42039: LD_VAR 0 4
42043: PPUSH
42044: LD_VAR 0 5
42048: PUSH
42049: LD_INT 1
42051: ARRAY
42052: PPUSH
42053: CALL_OW 248
42057: PPUSH
42058: LD_INT 0
42060: PPUSH
42061: CALL 44070 0 6
42065: ST_TO_ADDR
// if not hexes then
42066: LD_VAR 0 14
42070: NOT
42071: IFFALSE 42075
// exit ;
42073: GO 42833
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42075: LD_ADDR_VAR 0 17
42079: PUSH
42080: LD_VAR 0 5
42084: PPUSH
42085: LD_INT 22
42087: PUSH
42088: LD_VAR 0 13
42092: PPUSH
42093: CALL_OW 255
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: LD_INT 30
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 30
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PPUSH
42134: CALL_OW 72
42138: ST_TO_ADDR
// for i = 1 to hexes do
42139: LD_ADDR_VAR 0 9
42143: PUSH
42144: DOUBLE
42145: LD_INT 1
42147: DEC
42148: ST_TO_ADDR
42149: LD_VAR 0 14
42153: PUSH
42154: FOR_TO
42155: IFFALSE 42831
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42157: LD_ADDR_VAR 0 13
42161: PUSH
42162: LD_VAR 0 14
42166: PUSH
42167: LD_VAR 0 9
42171: ARRAY
42172: PUSH
42173: LD_INT 1
42175: ARRAY
42176: PPUSH
42177: LD_VAR 0 14
42181: PUSH
42182: LD_VAR 0 9
42186: ARRAY
42187: PUSH
42188: LD_INT 2
42190: ARRAY
42191: PPUSH
42192: CALL_OW 428
42196: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42197: LD_VAR 0 14
42201: PUSH
42202: LD_VAR 0 9
42206: ARRAY
42207: PUSH
42208: LD_INT 1
42210: ARRAY
42211: PPUSH
42212: LD_VAR 0 14
42216: PUSH
42217: LD_VAR 0 9
42221: ARRAY
42222: PUSH
42223: LD_INT 2
42225: ARRAY
42226: PPUSH
42227: CALL_OW 351
42231: PUSH
42232: LD_VAR 0 14
42236: PUSH
42237: LD_VAR 0 9
42241: ARRAY
42242: PUSH
42243: LD_INT 1
42245: ARRAY
42246: PPUSH
42247: LD_VAR 0 14
42251: PUSH
42252: LD_VAR 0 9
42256: ARRAY
42257: PUSH
42258: LD_INT 2
42260: ARRAY
42261: PPUSH
42262: CALL_OW 488
42266: NOT
42267: OR
42268: PUSH
42269: LD_VAR 0 13
42273: PPUSH
42274: CALL_OW 247
42278: PUSH
42279: LD_INT 3
42281: EQUAL
42282: OR
42283: IFFALSE 42289
// exit ;
42285: POP
42286: POP
42287: GO 42833
// if not tmp then
42289: LD_VAR 0 13
42293: NOT
42294: IFFALSE 42298
// continue ;
42296: GO 42154
// result := true ;
42298: LD_ADDR_VAR 0 8
42302: PUSH
42303: LD_INT 1
42305: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42306: LD_VAR 0 6
42310: PUSH
42311: LD_VAR 0 13
42315: PPUSH
42316: CALL_OW 247
42320: PUSH
42321: LD_INT 2
42323: EQUAL
42324: AND
42325: PUSH
42326: LD_VAR 0 13
42330: PPUSH
42331: CALL_OW 263
42335: PUSH
42336: LD_INT 1
42338: EQUAL
42339: AND
42340: IFFALSE 42504
// begin if IsDrivenBy ( tmp ) then
42342: LD_VAR 0 13
42346: PPUSH
42347: CALL_OW 311
42351: IFFALSE 42355
// continue ;
42353: GO 42154
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42355: LD_VAR 0 6
42359: PPUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 60
42365: PUSH
42366: EMPTY
42367: LIST
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: LD_INT 55
42378: PUSH
42379: EMPTY
42380: LIST
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PPUSH
42390: CALL_OW 72
42394: IFFALSE 42502
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42396: LD_ADDR_VAR 0 18
42400: PUSH
42401: LD_VAR 0 6
42405: PPUSH
42406: LD_INT 3
42408: PUSH
42409: LD_INT 60
42411: PUSH
42412: EMPTY
42413: LIST
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 3
42421: PUSH
42422: LD_INT 55
42424: PUSH
42425: EMPTY
42426: LIST
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PPUSH
42436: CALL_OW 72
42440: PUSH
42441: LD_INT 1
42443: ARRAY
42444: ST_TO_ADDR
// if IsInUnit ( driver ) then
42445: LD_VAR 0 18
42449: PPUSH
42450: CALL_OW 310
42454: IFFALSE 42465
// ComExit ( driver ) ;
42456: LD_VAR 0 18
42460: PPUSH
42461: CALL 67198 0 1
// AddComEnterUnit ( driver , tmp ) ;
42465: LD_VAR 0 18
42469: PPUSH
42470: LD_VAR 0 13
42474: PPUSH
42475: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42479: LD_VAR 0 18
42483: PPUSH
42484: LD_VAR 0 7
42488: PPUSH
42489: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42493: LD_VAR 0 18
42497: PPUSH
42498: CALL_OW 181
// end ; continue ;
42502: GO 42154
// end ; if not cleaners or not tmp in cleaners then
42504: LD_VAR 0 6
42508: NOT
42509: PUSH
42510: LD_VAR 0 13
42514: PUSH
42515: LD_VAR 0 6
42519: IN
42520: NOT
42521: OR
42522: IFFALSE 42829
// begin if dep then
42524: LD_VAR 0 17
42528: IFFALSE 42664
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42530: LD_ADDR_VAR 0 16
42534: PUSH
42535: LD_VAR 0 17
42539: PUSH
42540: LD_INT 1
42542: ARRAY
42543: PPUSH
42544: CALL_OW 250
42548: PPUSH
42549: LD_VAR 0 17
42553: PUSH
42554: LD_INT 1
42556: ARRAY
42557: PPUSH
42558: CALL_OW 254
42562: PPUSH
42563: LD_INT 5
42565: PPUSH
42566: CALL_OW 272
42570: PUSH
42571: LD_VAR 0 17
42575: PUSH
42576: LD_INT 1
42578: ARRAY
42579: PPUSH
42580: CALL_OW 251
42584: PPUSH
42585: LD_VAR 0 17
42589: PUSH
42590: LD_INT 1
42592: ARRAY
42593: PPUSH
42594: CALL_OW 254
42598: PPUSH
42599: LD_INT 5
42601: PPUSH
42602: CALL_OW 273
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42611: LD_VAR 0 16
42615: PUSH
42616: LD_INT 1
42618: ARRAY
42619: PPUSH
42620: LD_VAR 0 16
42624: PUSH
42625: LD_INT 2
42627: ARRAY
42628: PPUSH
42629: CALL_OW 488
42633: IFFALSE 42664
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42635: LD_VAR 0 13
42639: PPUSH
42640: LD_VAR 0 16
42644: PUSH
42645: LD_INT 1
42647: ARRAY
42648: PPUSH
42649: LD_VAR 0 16
42653: PUSH
42654: LD_INT 2
42656: ARRAY
42657: PPUSH
42658: CALL_OW 111
// continue ;
42662: GO 42154
// end ; end ; r := GetDir ( tmp ) ;
42664: LD_ADDR_VAR 0 15
42668: PUSH
42669: LD_VAR 0 13
42673: PPUSH
42674: CALL_OW 254
42678: ST_TO_ADDR
// if r = 5 then
42679: LD_VAR 0 15
42683: PUSH
42684: LD_INT 5
42686: EQUAL
42687: IFFALSE 42697
// r := 0 ;
42689: LD_ADDR_VAR 0 15
42693: PUSH
42694: LD_INT 0
42696: ST_TO_ADDR
// for j = r to 5 do
42697: LD_ADDR_VAR 0 10
42701: PUSH
42702: DOUBLE
42703: LD_VAR 0 15
42707: DEC
42708: ST_TO_ADDR
42709: LD_INT 5
42711: PUSH
42712: FOR_TO
42713: IFFALSE 42827
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42715: LD_ADDR_VAR 0 11
42719: PUSH
42720: LD_VAR 0 13
42724: PPUSH
42725: CALL_OW 250
42729: PPUSH
42730: LD_VAR 0 10
42734: PPUSH
42735: LD_INT 2
42737: PPUSH
42738: CALL_OW 272
42742: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42743: LD_ADDR_VAR 0 12
42747: PUSH
42748: LD_VAR 0 13
42752: PPUSH
42753: CALL_OW 251
42757: PPUSH
42758: LD_VAR 0 10
42762: PPUSH
42763: LD_INT 2
42765: PPUSH
42766: CALL_OW 273
42770: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42771: LD_VAR 0 11
42775: PPUSH
42776: LD_VAR 0 12
42780: PPUSH
42781: CALL_OW 488
42785: PUSH
42786: LD_VAR 0 11
42790: PPUSH
42791: LD_VAR 0 12
42795: PPUSH
42796: CALL_OW 428
42800: NOT
42801: AND
42802: IFFALSE 42825
// begin ComMoveXY ( tmp , _x , _y ) ;
42804: LD_VAR 0 13
42808: PPUSH
42809: LD_VAR 0 11
42813: PPUSH
42814: LD_VAR 0 12
42818: PPUSH
42819: CALL_OW 111
// break ;
42823: GO 42827
// end ; end ;
42825: GO 42712
42827: POP
42828: POP
// end ; end ;
42829: GO 42154
42831: POP
42832: POP
// end ;
42833: LD_VAR 0 8
42837: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42838: LD_INT 0
42840: PPUSH
// result := true ;
42841: LD_ADDR_VAR 0 3
42845: PUSH
42846: LD_INT 1
42848: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42849: LD_VAR 0 2
42853: PUSH
42854: LD_INT 24
42856: DOUBLE
42857: EQUAL
42858: IFTRUE 42868
42860: LD_INT 33
42862: DOUBLE
42863: EQUAL
42864: IFTRUE 42868
42866: GO 42893
42868: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42869: LD_ADDR_VAR 0 3
42873: PUSH
42874: LD_INT 32
42876: PPUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 321
42886: PUSH
42887: LD_INT 2
42889: EQUAL
42890: ST_TO_ADDR
42891: GO 43213
42893: LD_INT 20
42895: DOUBLE
42896: EQUAL
42897: IFTRUE 42901
42899: GO 42926
42901: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42902: LD_ADDR_VAR 0 3
42906: PUSH
42907: LD_INT 6
42909: PPUSH
42910: LD_VAR 0 1
42914: PPUSH
42915: CALL_OW 321
42919: PUSH
42920: LD_INT 2
42922: EQUAL
42923: ST_TO_ADDR
42924: GO 43213
42926: LD_INT 22
42928: DOUBLE
42929: EQUAL
42930: IFTRUE 42940
42932: LD_INT 36
42934: DOUBLE
42935: EQUAL
42936: IFTRUE 42940
42938: GO 42965
42940: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_INT 15
42948: PPUSH
42949: LD_VAR 0 1
42953: PPUSH
42954: CALL_OW 321
42958: PUSH
42959: LD_INT 2
42961: EQUAL
42962: ST_TO_ADDR
42963: GO 43213
42965: LD_INT 30
42967: DOUBLE
42968: EQUAL
42969: IFTRUE 42973
42971: GO 42998
42973: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42974: LD_ADDR_VAR 0 3
42978: PUSH
42979: LD_INT 20
42981: PPUSH
42982: LD_VAR 0 1
42986: PPUSH
42987: CALL_OW 321
42991: PUSH
42992: LD_INT 2
42994: EQUAL
42995: ST_TO_ADDR
42996: GO 43213
42998: LD_INT 28
43000: DOUBLE
43001: EQUAL
43002: IFTRUE 43012
43004: LD_INT 21
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43037
43012: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_INT 21
43020: PPUSH
43021: LD_VAR 0 1
43025: PPUSH
43026: CALL_OW 321
43030: PUSH
43031: LD_INT 2
43033: EQUAL
43034: ST_TO_ADDR
43035: GO 43213
43037: LD_INT 16
43039: DOUBLE
43040: EQUAL
43041: IFTRUE 43045
43043: GO 43072
43045: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43046: LD_ADDR_VAR 0 3
43050: PUSH
43051: LD_EXP 26
43055: PPUSH
43056: LD_VAR 0 1
43060: PPUSH
43061: CALL_OW 321
43065: PUSH
43066: LD_INT 2
43068: EQUAL
43069: ST_TO_ADDR
43070: GO 43213
43072: LD_INT 19
43074: DOUBLE
43075: EQUAL
43076: IFTRUE 43086
43078: LD_INT 23
43080: DOUBLE
43081: EQUAL
43082: IFTRUE 43086
43084: GO 43113
43086: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_EXP 25
43096: PPUSH
43097: LD_VAR 0 1
43101: PPUSH
43102: CALL_OW 321
43106: PUSH
43107: LD_INT 2
43109: EQUAL
43110: ST_TO_ADDR
43111: GO 43213
43113: LD_INT 17
43115: DOUBLE
43116: EQUAL
43117: IFTRUE 43121
43119: GO 43146
43121: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43122: LD_ADDR_VAR 0 3
43126: PUSH
43127: LD_INT 39
43129: PPUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: CALL_OW 321
43139: PUSH
43140: LD_INT 2
43142: EQUAL
43143: ST_TO_ADDR
43144: GO 43213
43146: LD_INT 18
43148: DOUBLE
43149: EQUAL
43150: IFTRUE 43154
43152: GO 43179
43154: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43155: LD_ADDR_VAR 0 3
43159: PUSH
43160: LD_INT 40
43162: PPUSH
43163: LD_VAR 0 1
43167: PPUSH
43168: CALL_OW 321
43172: PUSH
43173: LD_INT 2
43175: EQUAL
43176: ST_TO_ADDR
43177: GO 43213
43179: LD_INT 27
43181: DOUBLE
43182: EQUAL
43183: IFTRUE 43187
43185: GO 43212
43187: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43188: LD_ADDR_VAR 0 3
43192: PUSH
43193: LD_INT 35
43195: PPUSH
43196: LD_VAR 0 1
43200: PPUSH
43201: CALL_OW 321
43205: PUSH
43206: LD_INT 2
43208: EQUAL
43209: ST_TO_ADDR
43210: GO 43213
43212: POP
// end ;
43213: LD_VAR 0 3
43217: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43218: LD_INT 0
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
43229: PPUSH
43230: PPUSH
// result := false ;
43231: LD_ADDR_VAR 0 6
43235: PUSH
43236: LD_INT 0
43238: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43239: LD_VAR 0 1
43243: NOT
43244: PUSH
43245: LD_VAR 0 1
43249: PPUSH
43250: CALL_OW 266
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: IN
43265: NOT
43266: OR
43267: PUSH
43268: LD_VAR 0 2
43272: NOT
43273: OR
43274: PUSH
43275: LD_VAR 0 5
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: LD_INT 3
43291: PUSH
43292: LD_INT 4
43294: PUSH
43295: LD_INT 5
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: IN
43306: NOT
43307: OR
43308: PUSH
43309: LD_VAR 0 3
43313: PPUSH
43314: LD_VAR 0 4
43318: PPUSH
43319: CALL_OW 488
43323: NOT
43324: OR
43325: IFFALSE 43329
// exit ;
43327: GO 44065
// side := GetSide ( depot ) ;
43329: LD_ADDR_VAR 0 9
43333: PUSH
43334: LD_VAR 0 1
43338: PPUSH
43339: CALL_OW 255
43343: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43344: LD_VAR 0 9
43348: PPUSH
43349: LD_VAR 0 2
43353: PPUSH
43354: CALL 42838 0 2
43358: NOT
43359: IFFALSE 43363
// exit ;
43361: GO 44065
// pom := GetBase ( depot ) ;
43363: LD_ADDR_VAR 0 10
43367: PUSH
43368: LD_VAR 0 1
43372: PPUSH
43373: CALL_OW 274
43377: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43378: LD_ADDR_VAR 0 11
43382: PUSH
43383: LD_VAR 0 2
43387: PPUSH
43388: LD_VAR 0 1
43392: PPUSH
43393: CALL_OW 248
43397: PPUSH
43398: CALL_OW 450
43402: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43403: LD_VAR 0 10
43407: PPUSH
43408: LD_INT 1
43410: PPUSH
43411: CALL_OW 275
43415: PUSH
43416: LD_VAR 0 11
43420: PUSH
43421: LD_INT 1
43423: ARRAY
43424: GREATEREQUAL
43425: PUSH
43426: LD_VAR 0 10
43430: PPUSH
43431: LD_INT 2
43433: PPUSH
43434: CALL_OW 275
43438: PUSH
43439: LD_VAR 0 11
43443: PUSH
43444: LD_INT 2
43446: ARRAY
43447: GREATEREQUAL
43448: AND
43449: PUSH
43450: LD_VAR 0 10
43454: PPUSH
43455: LD_INT 3
43457: PPUSH
43458: CALL_OW 275
43462: PUSH
43463: LD_VAR 0 11
43467: PUSH
43468: LD_INT 3
43470: ARRAY
43471: GREATEREQUAL
43472: AND
43473: NOT
43474: IFFALSE 43478
// exit ;
43476: GO 44065
// if GetBType ( depot ) = b_depot then
43478: LD_VAR 0 1
43482: PPUSH
43483: CALL_OW 266
43487: PUSH
43488: LD_INT 0
43490: EQUAL
43491: IFFALSE 43503
// dist := 28 else
43493: LD_ADDR_VAR 0 14
43497: PUSH
43498: LD_INT 28
43500: ST_TO_ADDR
43501: GO 43511
// dist := 36 ;
43503: LD_ADDR_VAR 0 14
43507: PUSH
43508: LD_INT 36
43510: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43511: LD_VAR 0 1
43515: PPUSH
43516: LD_VAR 0 3
43520: PPUSH
43521: LD_VAR 0 4
43525: PPUSH
43526: CALL_OW 297
43530: PUSH
43531: LD_VAR 0 14
43535: GREATER
43536: IFFALSE 43540
// exit ;
43538: GO 44065
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43540: LD_ADDR_VAR 0 12
43544: PUSH
43545: LD_VAR 0 2
43549: PPUSH
43550: LD_VAR 0 3
43554: PPUSH
43555: LD_VAR 0 4
43559: PPUSH
43560: LD_VAR 0 5
43564: PPUSH
43565: LD_VAR 0 1
43569: PPUSH
43570: CALL_OW 248
43574: PPUSH
43575: LD_INT 0
43577: PPUSH
43578: CALL 44070 0 6
43582: ST_TO_ADDR
// if not hexes then
43583: LD_VAR 0 12
43587: NOT
43588: IFFALSE 43592
// exit ;
43590: GO 44065
// hex := GetHexInfo ( x , y ) ;
43592: LD_ADDR_VAR 0 15
43596: PUSH
43597: LD_VAR 0 3
43601: PPUSH
43602: LD_VAR 0 4
43606: PPUSH
43607: CALL_OW 546
43611: ST_TO_ADDR
// if hex [ 1 ] then
43612: LD_VAR 0 15
43616: PUSH
43617: LD_INT 1
43619: ARRAY
43620: IFFALSE 43624
// exit ;
43622: GO 44065
// height := hex [ 2 ] ;
43624: LD_ADDR_VAR 0 13
43628: PUSH
43629: LD_VAR 0 15
43633: PUSH
43634: LD_INT 2
43636: ARRAY
43637: ST_TO_ADDR
// for i = 1 to hexes do
43638: LD_ADDR_VAR 0 7
43642: PUSH
43643: DOUBLE
43644: LD_INT 1
43646: DEC
43647: ST_TO_ADDR
43648: LD_VAR 0 12
43652: PUSH
43653: FOR_TO
43654: IFFALSE 43984
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43656: LD_VAR 0 12
43660: PUSH
43661: LD_VAR 0 7
43665: ARRAY
43666: PUSH
43667: LD_INT 1
43669: ARRAY
43670: PPUSH
43671: LD_VAR 0 12
43675: PUSH
43676: LD_VAR 0 7
43680: ARRAY
43681: PUSH
43682: LD_INT 2
43684: ARRAY
43685: PPUSH
43686: CALL_OW 488
43690: NOT
43691: PUSH
43692: LD_VAR 0 12
43696: PUSH
43697: LD_VAR 0 7
43701: ARRAY
43702: PUSH
43703: LD_INT 1
43705: ARRAY
43706: PPUSH
43707: LD_VAR 0 12
43711: PUSH
43712: LD_VAR 0 7
43716: ARRAY
43717: PUSH
43718: LD_INT 2
43720: ARRAY
43721: PPUSH
43722: CALL_OW 428
43726: PUSH
43727: LD_INT 0
43729: GREATER
43730: OR
43731: PUSH
43732: LD_VAR 0 12
43736: PUSH
43737: LD_VAR 0 7
43741: ARRAY
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: PPUSH
43747: LD_VAR 0 12
43751: PUSH
43752: LD_VAR 0 7
43756: ARRAY
43757: PUSH
43758: LD_INT 2
43760: ARRAY
43761: PPUSH
43762: CALL_OW 351
43766: OR
43767: IFFALSE 43773
// exit ;
43769: POP
43770: POP
43771: GO 44065
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43773: LD_ADDR_VAR 0 8
43777: PUSH
43778: LD_VAR 0 12
43782: PUSH
43783: LD_VAR 0 7
43787: ARRAY
43788: PUSH
43789: LD_INT 1
43791: ARRAY
43792: PPUSH
43793: LD_VAR 0 12
43797: PUSH
43798: LD_VAR 0 7
43802: ARRAY
43803: PUSH
43804: LD_INT 2
43806: ARRAY
43807: PPUSH
43808: CALL_OW 546
43812: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43813: LD_VAR 0 8
43817: PUSH
43818: LD_INT 1
43820: ARRAY
43821: PUSH
43822: LD_VAR 0 8
43826: PUSH
43827: LD_INT 2
43829: ARRAY
43830: PUSH
43831: LD_VAR 0 13
43835: PUSH
43836: LD_INT 2
43838: PLUS
43839: GREATER
43840: OR
43841: PUSH
43842: LD_VAR 0 8
43846: PUSH
43847: LD_INT 2
43849: ARRAY
43850: PUSH
43851: LD_VAR 0 13
43855: PUSH
43856: LD_INT 2
43858: MINUS
43859: LESS
43860: OR
43861: PUSH
43862: LD_VAR 0 8
43866: PUSH
43867: LD_INT 3
43869: ARRAY
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 8
43876: PUSH
43877: LD_INT 9
43879: PUSH
43880: LD_INT 10
43882: PUSH
43883: LD_INT 11
43885: PUSH
43886: LD_INT 12
43888: PUSH
43889: LD_INT 13
43891: PUSH
43892: LD_INT 16
43894: PUSH
43895: LD_INT 17
43897: PUSH
43898: LD_INT 18
43900: PUSH
43901: LD_INT 19
43903: PUSH
43904: LD_INT 20
43906: PUSH
43907: LD_INT 21
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: IN
43925: NOT
43926: OR
43927: PUSH
43928: LD_VAR 0 8
43932: PUSH
43933: LD_INT 5
43935: ARRAY
43936: NOT
43937: OR
43938: PUSH
43939: LD_VAR 0 8
43943: PUSH
43944: LD_INT 6
43946: ARRAY
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 7
43956: PUSH
43957: LD_INT 9
43959: PUSH
43960: LD_INT 10
43962: PUSH
43963: LD_INT 11
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: IN
43974: NOT
43975: OR
43976: IFFALSE 43982
// exit ;
43978: POP
43979: POP
43980: GO 44065
// end ;
43982: GO 43653
43984: POP
43985: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43986: LD_VAR 0 9
43990: PPUSH
43991: LD_VAR 0 3
43995: PPUSH
43996: LD_VAR 0 4
44000: PPUSH
44001: LD_INT 20
44003: PPUSH
44004: CALL 36011 0 4
44008: PUSH
44009: LD_INT 4
44011: ARRAY
44012: IFFALSE 44016
// exit ;
44014: GO 44065
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44016: LD_VAR 0 2
44020: PUSH
44021: LD_INT 29
44023: PUSH
44024: LD_INT 30
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: IN
44031: PUSH
44032: LD_VAR 0 3
44036: PPUSH
44037: LD_VAR 0 4
44041: PPUSH
44042: LD_VAR 0 9
44046: PPUSH
44047: CALL_OW 440
44051: NOT
44052: AND
44053: IFFALSE 44057
// exit ;
44055: GO 44065
// result := true ;
44057: LD_ADDR_VAR 0 6
44061: PUSH
44062: LD_INT 1
44064: ST_TO_ADDR
// end ;
44065: LD_VAR 0 6
44069: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44070: LD_INT 0
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
44098: PPUSH
44099: PPUSH
44100: PPUSH
44101: PPUSH
44102: PPUSH
44103: PPUSH
44104: PPUSH
44105: PPUSH
44106: PPUSH
44107: PPUSH
44108: PPUSH
44109: PPUSH
44110: PPUSH
44111: PPUSH
44112: PPUSH
44113: PPUSH
44114: PPUSH
44115: PPUSH
44116: PPUSH
44117: PPUSH
44118: PPUSH
44119: PPUSH
44120: PPUSH
44121: PPUSH
44122: PPUSH
44123: PPUSH
44124: PPUSH
44125: PPUSH
44126: PPUSH
44127: PPUSH
44128: PPUSH
44129: PPUSH
// result = [ ] ;
44130: LD_ADDR_VAR 0 7
44134: PUSH
44135: EMPTY
44136: ST_TO_ADDR
// temp_list = [ ] ;
44137: LD_ADDR_VAR 0 9
44141: PUSH
44142: EMPTY
44143: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44144: LD_VAR 0 4
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: LD_INT 3
44160: PUSH
44161: LD_INT 4
44163: PUSH
44164: LD_INT 5
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: IN
44175: NOT
44176: PUSH
44177: LD_VAR 0 1
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: IN
44192: PUSH
44193: LD_VAR 0 5
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: LD_INT 3
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: IN
44212: NOT
44213: AND
44214: OR
44215: IFFALSE 44219
// exit ;
44217: GO 62610
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44219: LD_VAR 0 1
44223: PUSH
44224: LD_INT 6
44226: PUSH
44227: LD_INT 7
44229: PUSH
44230: LD_INT 8
44232: PUSH
44233: LD_INT 13
44235: PUSH
44236: LD_INT 12
44238: PUSH
44239: LD_INT 15
44241: PUSH
44242: LD_INT 11
44244: PUSH
44245: LD_INT 14
44247: PUSH
44248: LD_INT 10
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: IN
44262: IFFALSE 44272
// btype = b_lab ;
44264: LD_ADDR_VAR 0 1
44268: PUSH
44269: LD_INT 6
44271: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44272: LD_VAR 0 6
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: IN
44291: NOT
44292: PUSH
44293: LD_VAR 0 1
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: LD_INT 3
44309: PUSH
44310: LD_INT 6
44312: PUSH
44313: LD_INT 36
44315: PUSH
44316: LD_INT 4
44318: PUSH
44319: LD_INT 5
44321: PUSH
44322: LD_INT 31
44324: PUSH
44325: LD_INT 32
44327: PUSH
44328: LD_INT 33
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: IN
44344: NOT
44345: PUSH
44346: LD_VAR 0 6
44350: PUSH
44351: LD_INT 1
44353: EQUAL
44354: AND
44355: OR
44356: PUSH
44357: LD_VAR 0 1
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: IN
44372: NOT
44373: PUSH
44374: LD_VAR 0 6
44378: PUSH
44379: LD_INT 2
44381: EQUAL
44382: AND
44383: OR
44384: IFFALSE 44394
// mode = 0 ;
44386: LD_ADDR_VAR 0 6
44390: PUSH
44391: LD_INT 0
44393: ST_TO_ADDR
// case mode of 0 :
44394: LD_VAR 0 6
44398: PUSH
44399: LD_INT 0
44401: DOUBLE
44402: EQUAL
44403: IFTRUE 44407
44405: GO 55860
44407: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44408: LD_ADDR_VAR 0 11
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 3
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44601: LD_ADDR_VAR 0 12
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 3
44758: NEG
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 3
44769: NEG
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44797: LD_ADDR_VAR 0 13
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: LD_INT 3
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 3
44956: NEG
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 3
44968: NEG
44969: PUSH
44970: LD_INT 3
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44996: LD_ADDR_VAR 0 14
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 3
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 3
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45192: LD_ADDR_VAR 0 15
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: NEG
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 3
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45385: LD_ADDR_VAR 0 16
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 3
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 3
45542: PUSH
45543: LD_INT 3
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45578: LD_ADDR_VAR 0 17
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: NEG
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45808: LD_ADDR_VAR 0 18
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46038: LD_ADDR_VAR 0 19
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46268: LD_ADDR_VAR 0 20
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46498: LD_ADDR_VAR 0 21
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46728: LD_ADDR_VAR 0 22
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46958: LD_ADDR_VAR 0 23
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: NEG
47170: PUSH
47171: LD_INT 3
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 3
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47238: LD_ADDR_VAR 0 24
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 2
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47514: LD_ADDR_VAR 0 25
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 3
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 3
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47788: LD_ADDR_VAR 0 26
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 3
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 3
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48064: LD_ADDR_VAR 0 27
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 3
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 3
48309: NEG
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48344: LD_ADDR_VAR 0 28
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: NEG
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: NEG
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 3
48591: NEG
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48626: LD_ADDR_VAR 0 29
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 3
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 3
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 3
48870: NEG
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48905: LD_ADDR_VAR 0 30
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: LD_INT 3
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: LD_INT 3
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 3
49148: NEG
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49183: LD_ADDR_VAR 0 31
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 3
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49461: LD_ADDR_VAR 0 32
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 3
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 3
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 3
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49739: LD_ADDR_VAR 0 33
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 3
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50018: LD_ADDR_VAR 0 34
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 3
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50298: LD_ADDR_VAR 0 35
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50410: LD_ADDR_VAR 0 36
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50522: LD_ADDR_VAR 0 37
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50634: LD_ADDR_VAR 0 38
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50746: LD_ADDR_VAR 0 39
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50858: LD_ADDR_VAR 0 40
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50970: LD_ADDR_VAR 0 41
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 2
51160: NEG
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 3
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: LD_INT 3
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51320: LD_ADDR_VAR 0 42
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: NEG
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 3
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 3
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: LD_INT 3
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 3
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 3
51629: NEG
51630: PUSH
51631: LD_INT 3
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51670: LD_ADDR_VAR 0 43
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 3
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 3
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 3
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 3
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52018: LD_ADDR_VAR 0 44
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 2
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: LD_INT 3
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 3
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: NEG
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 3
52327: NEG
52328: PUSH
52329: LD_INT 3
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52368: LD_ADDR_VAR 0 45
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: NEG
52559: PUSH
52560: LD_INT 3
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 3
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: NEG
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 3
52677: NEG
52678: PUSH
52679: LD_INT 3
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52718: LD_ADDR_VAR 0 46
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 3
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 3
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53066: LD_ADDR_VAR 0 47
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53217: LD_ADDR_VAR 0 48
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53364: LD_ADDR_VAR 0 49
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53508: LD_ADDR_VAR 0 50
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53652: LD_ADDR_VAR 0 51
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53799: LD_ADDR_VAR 0 52
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53950: LD_ADDR_VAR 0 53
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54180: LD_ADDR_VAR 0 54
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 2
54367: NEG
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54410: LD_ADDR_VAR 0 55
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54640: LD_ADDR_VAR 0 56
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: NEG
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54870: LD_ADDR_VAR 0 57
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55100: LD_ADDR_VAR 0 58
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: NEG
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55330: LD_ADDR_VAR 0 59
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55418: LD_ADDR_VAR 0 60
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55506: LD_ADDR_VAR 0 61
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55594: LD_ADDR_VAR 0 62
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55682: LD_ADDR_VAR 0 63
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55770: LD_ADDR_VAR 0 64
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// end ; 1 :
55858: GO 61755
55860: LD_INT 1
55862: DOUBLE
55863: EQUAL
55864: IFTRUE 55868
55866: GO 58491
55868: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55869: LD_ADDR_VAR 0 11
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 3
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 3
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: LIST
55912: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55913: LD_ADDR_VAR 0 12
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55954: LD_ADDR_VAR 0 13
55958: PUSH
55959: LD_INT 3
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 3
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: LIST
55993: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55994: LD_ADDR_VAR 0 14
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 3
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: LIST
56034: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56035: LD_ADDR_VAR 0 15
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 3
56053: NEG
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 3
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56079: LD_ADDR_VAR 0 16
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 3
56098: NEG
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 3
56110: NEG
56111: PUSH
56112: LD_INT 3
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: LIST
56124: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56125: LD_ADDR_VAR 0 17
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 3
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56169: LD_ADDR_VAR 0 18
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56210: LD_ADDR_VAR 0 19
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: LD_INT 3
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: LD_INT 3
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56250: LD_ADDR_VAR 0 20
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 3
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: LIST
56290: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56291: LD_ADDR_VAR 0 21
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 3
56309: NEG
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56335: LD_ADDR_VAR 0 22
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: LD_INT 3
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: NEG
56367: PUSH
56368: LD_INT 3
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: LIST
56380: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56381: LD_ADDR_VAR 0 23
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 3
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 4
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56425: LD_ADDR_VAR 0 24
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 4
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56466: LD_ADDR_VAR 0 25
56470: PUSH
56471: LD_INT 3
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 4
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: LD_INT 4
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56506: LD_ADDR_VAR 0 26
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 3
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 4
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 3
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56547: LD_ADDR_VAR 0 27
56551: PUSH
56552: LD_INT 3
56554: NEG
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 4
56576: NEG
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: LIST
56590: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56591: LD_ADDR_VAR 0 28
56595: PUSH
56596: LD_INT 3
56598: NEG
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: LD_INT 4
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 4
56622: NEG
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56637: LD_ADDR_VAR 0 29
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 3
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 3
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 4
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 4
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 5
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 5
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 4
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 6
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 6
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 5
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56792: LD_ADDR_VAR 0 30
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 4
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 4
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 4
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 5
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 5
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 5
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 6
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 6
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56935: LD_ADDR_VAR 0 31
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 3
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 4
56972: PUSH
56973: LD_INT 3
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 4
56982: PUSH
56983: LD_INT 4
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: LD_INT 4
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 5
57002: PUSH
57003: LD_INT 4
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 5
57012: PUSH
57013: LD_INT 5
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 4
57022: PUSH
57023: LD_INT 5
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 6
57032: PUSH
57033: LD_INT 5
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 6
57042: PUSH
57043: LD_INT 6
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 5
57052: PUSH
57053: LD_INT 6
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57074: LD_ADDR_VAR 0 32
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 3
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 4
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 4
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 3
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 5
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 5
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: LD_INT 4
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: LD_INT 6
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: LD_INT 6
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: LD_INT 5
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57217: LD_ADDR_VAR 0 33
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 3
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 4
57269: NEG
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 4
57280: NEG
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 4
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 5
57303: NEG
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 5
57314: NEG
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 5
57326: NEG
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 6
57337: NEG
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 6
57348: NEG
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57372: LD_ADDR_VAR 0 34
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: LD_INT 4
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 4
57427: NEG
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 4
57439: NEG
57440: PUSH
57441: LD_INT 4
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 4
57451: NEG
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 5
57463: NEG
57464: PUSH
57465: LD_INT 4
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 5
57475: NEG
57476: PUSH
57477: LD_INT 5
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 5
57487: NEG
57488: PUSH
57489: LD_INT 6
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 6
57499: NEG
57500: PUSH
57501: LD_INT 5
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 6
57511: NEG
57512: PUSH
57513: LD_INT 6
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57535: LD_ADDR_VAR 0 41
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 3
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: LIST
57578: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57579: LD_ADDR_VAR 0 42
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57620: LD_ADDR_VAR 0 43
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 3
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: LD_INT 3
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: LIST
57659: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57660: LD_ADDR_VAR 0 44
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57701: LD_ADDR_VAR 0 45
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57745: LD_ADDR_VAR 0 46
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 3
57776: NEG
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: LIST
57790: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57791: LD_ADDR_VAR 0 47
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 3
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57824: LD_ADDR_VAR 0 48
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57855: LD_ADDR_VAR 0 49
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57884: LD_ADDR_VAR 0 50
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57913: LD_ADDR_VAR 0 51
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57944: LD_ADDR_VAR 0 52
57948: PUSH
57949: LD_INT 3
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 3
57963: NEG
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57977: LD_ADDR_VAR 0 53
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 3
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 3
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58021: LD_ADDR_VAR 0 54
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: LIST
58061: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58062: LD_ADDR_VAR 0 55
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: LD_INT 3
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: LIST
58101: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58102: LD_ADDR_VAR 0 56
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58143: LD_ADDR_VAR 0 57
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: NEG
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58187: LD_ADDR_VAR 0 58
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 3
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: NEG
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 3
58218: NEG
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: LIST
58232: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58233: LD_ADDR_VAR 0 59
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: LIST
58276: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58277: LD_ADDR_VAR 0 60
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58318: LD_ADDR_VAR 0 61
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58358: LD_ADDR_VAR 0 62
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: LIST
58398: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58399: LD_ADDR_VAR 0 63
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58443: LD_ADDR_VAR 0 64
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: NEG
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: LIST
58488: ST_TO_ADDR
// end ; 2 :
58489: GO 61755
58491: LD_INT 2
58493: DOUBLE
58494: EQUAL
58495: IFTRUE 58499
58497: GO 61754
58499: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58500: LD_ADDR_VAR 0 29
58504: PUSH
58505: LD_INT 4
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 4
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 5
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 5
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 4
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: LD_INT 2
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 5
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 3
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 3
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 4
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 4
58630: PUSH
58631: LD_INT 4
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 3
58640: PUSH
58641: LD_INT 4
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: LD_INT 3
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: LD_INT 4
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: LD_INT 4
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 3
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 4
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 5
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 5
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 4
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 3
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: LD_INT 5
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: NEG
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 4
58839: NEG
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 4
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 4
58862: NEG
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 4
58885: NEG
58886: PUSH
58887: LD_INT 4
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 4
58897: NEG
58898: PUSH
58899: LD_INT 5
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: LD_INT 4
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 3
58921: NEG
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 4
58933: NEG
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 5
58945: NEG
58946: PUSH
58947: LD_INT 4
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 5
58957: NEG
58958: PUSH
58959: LD_INT 5
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: NEG
58970: PUSH
58971: LD_INT 5
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 5
58981: NEG
58982: PUSH
58983: LD_INT 3
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59038: LD_ADDR_VAR 0 30
59042: PUSH
59043: LD_INT 4
59045: PUSH
59046: LD_INT 4
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 4
59055: PUSH
59056: LD_INT 3
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 5
59065: PUSH
59066: LD_INT 4
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 5
59075: PUSH
59076: LD_INT 5
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 4
59085: PUSH
59086: LD_INT 5
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: LD_INT 4
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 5
59115: PUSH
59116: LD_INT 3
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: PUSH
59126: LD_INT 5
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 3
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: LD_INT 4
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 4
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: LD_INT 3
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 4
59228: NEG
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 4
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: NEG
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 5
59284: NEG
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 5
59295: NEG
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 5
59307: NEG
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 3
59330: NEG
59331: PUSH
59332: LD_INT 3
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 3
59342: NEG
59343: PUSH
59344: LD_INT 4
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: LD_INT 3
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 2
59366: NEG
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 4
59390: NEG
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 4
59402: NEG
59403: PUSH
59404: LD_INT 4
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 4
59426: NEG
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 4
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 5
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: LD_INT 4
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 3
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: LD_INT 4
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: LD_INT 5
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: LD_INT 3
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 5
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59585: LD_ADDR_VAR 0 31
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 4
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: LD_INT 4
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 5
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 5
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: LD_INT 4
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: LD_INT 5
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 2
59674: NEG
59675: PUSH
59676: LD_INT 3
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: NEG
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: NEG
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 3
59730: NEG
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 4
59741: NEG
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 4
59752: NEG
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: NEG
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 2
59776: NEG
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 4
59787: NEG
59788: PUSH
59789: LD_INT 4
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 4
59799: NEG
59800: PUSH
59801: LD_INT 5
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: LD_INT 4
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: NEG
59824: PUSH
59825: LD_INT 3
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 4
59835: NEG
59836: PUSH
59837: LD_INT 3
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 5
59847: NEG
59848: PUSH
59849: LD_INT 4
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 5
59859: NEG
59860: PUSH
59861: LD_INT 5
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: LD_INT 5
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 5
59883: NEG
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: LD_INT 3
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 4
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 3
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: LD_INT 4
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: LD_INT 4
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 4
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 4
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 5
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 5
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 4
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 3
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 5
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60135: LD_ADDR_VAR 0 32
60139: PUSH
60140: LD_INT 4
60142: NEG
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 4
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 3
60176: NEG
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 4
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 5
60198: NEG
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 5
60209: NEG
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 5
60221: NEG
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: LD_INT 3
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: NEG
60257: PUSH
60258: LD_INT 4
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 4
60304: NEG
60305: PUSH
60306: LD_INT 3
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 4
60316: NEG
60317: PUSH
60318: LD_INT 4
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: LD_INT 4
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 4
60340: NEG
60341: PUSH
60342: LD_INT 2
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 4
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 5
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 4
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 4
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 5
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: LD_INT 3
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: LD_INT 5
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 3
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 4
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 4
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 3
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 4
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 4
60547: PUSH
60548: LD_INT 4
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 4
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 5
60567: PUSH
60568: LD_INT 4
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 5
60577: PUSH
60578: LD_INT 5
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 4
60587: PUSH
60588: LD_INT 5
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 3
60597: PUSH
60598: LD_INT 4
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: LD_INT 3
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 5
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: LD_INT 5
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60682: LD_ADDR_VAR 0 33
60686: PUSH
60687: LD_INT 4
60689: NEG
60690: PUSH
60691: LD_INT 4
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 4
60701: NEG
60702: PUSH
60703: LD_INT 5
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: LD_INT 4
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: NEG
60726: PUSH
60727: LD_INT 3
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 4
60737: NEG
60738: PUSH
60739: LD_INT 3
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 5
60749: NEG
60750: PUSH
60751: LD_INT 4
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 5
60761: NEG
60762: PUSH
60763: LD_INT 5
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: NEG
60774: PUSH
60775: LD_INT 5
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 5
60785: NEG
60786: PUSH
60787: LD_INT 3
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 3
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 4
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 3
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 3
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: LD_INT 4
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: LD_INT 4
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 4
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 4
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 5
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 5
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 4
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: LD_INT 2
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 5
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 3
60992: PUSH
60993: LD_INT 3
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 4
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 4
61022: PUSH
61023: LD_INT 4
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 3
61032: PUSH
61033: LD_INT 4
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 4
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 4
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: LD_INT 4
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: LD_INT 3
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: LD_INT 4
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: LD_INT 5
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 5
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: LD_INT 4
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: LD_INT 3
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: LD_INT 5
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: LD_INT 3
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61220: LD_ADDR_VAR 0 34
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 4
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: LD_INT 5
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: LD_INT 4
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 3
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 4
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: LD_INT 5
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: LD_INT 3
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 2
61317: NEG
61318: PUSH
61319: LD_INT 5
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 4
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 4
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 2
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: LD_INT 1
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 4
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 4
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 4
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 5
61442: PUSH
61443: LD_INT 4
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 5
61452: PUSH
61453: LD_INT 5
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 4
61462: PUSH
61463: LD_INT 5
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 3
61472: PUSH
61473: LD_INT 4
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 5
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: LD_INT 5
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 3
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: LD_INT 4
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: LD_INT 4
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 3
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: PUSH
61585: LD_INT 4
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 4
61605: NEG
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 4
61616: NEG
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 3
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 4
61650: NEG
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 5
61661: NEG
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 5
61672: NEG
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 5
61684: NEG
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 3
61696: NEG
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// end ; end ;
61752: GO 61755
61754: POP
// case btype of b_depot , b_warehouse :
61755: LD_VAR 0 1
61759: PUSH
61760: LD_INT 0
61762: DOUBLE
61763: EQUAL
61764: IFTRUE 61774
61766: LD_INT 1
61768: DOUBLE
61769: EQUAL
61770: IFTRUE 61774
61772: GO 61975
61774: POP
// case nation of nation_american :
61775: LD_VAR 0 5
61779: PUSH
61780: LD_INT 1
61782: DOUBLE
61783: EQUAL
61784: IFTRUE 61788
61786: GO 61844
61788: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61789: LD_ADDR_VAR 0 9
61793: PUSH
61794: LD_VAR 0 11
61798: PUSH
61799: LD_VAR 0 12
61803: PUSH
61804: LD_VAR 0 13
61808: PUSH
61809: LD_VAR 0 14
61813: PUSH
61814: LD_VAR 0 15
61818: PUSH
61819: LD_VAR 0 16
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: PUSH
61832: LD_VAR 0 4
61836: PUSH
61837: LD_INT 1
61839: PLUS
61840: ARRAY
61841: ST_TO_ADDR
61842: GO 61973
61844: LD_INT 2
61846: DOUBLE
61847: EQUAL
61848: IFTRUE 61852
61850: GO 61908
61852: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61853: LD_ADDR_VAR 0 9
61857: PUSH
61858: LD_VAR 0 17
61862: PUSH
61863: LD_VAR 0 18
61867: PUSH
61868: LD_VAR 0 19
61872: PUSH
61873: LD_VAR 0 20
61877: PUSH
61878: LD_VAR 0 21
61882: PUSH
61883: LD_VAR 0 22
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: PUSH
61896: LD_VAR 0 4
61900: PUSH
61901: LD_INT 1
61903: PLUS
61904: ARRAY
61905: ST_TO_ADDR
61906: GO 61973
61908: LD_INT 3
61910: DOUBLE
61911: EQUAL
61912: IFTRUE 61916
61914: GO 61972
61916: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61917: LD_ADDR_VAR 0 9
61921: PUSH
61922: LD_VAR 0 23
61926: PUSH
61927: LD_VAR 0 24
61931: PUSH
61932: LD_VAR 0 25
61936: PUSH
61937: LD_VAR 0 26
61941: PUSH
61942: LD_VAR 0 27
61946: PUSH
61947: LD_VAR 0 28
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: PUSH
61960: LD_VAR 0 4
61964: PUSH
61965: LD_INT 1
61967: PLUS
61968: ARRAY
61969: ST_TO_ADDR
61970: GO 61973
61972: POP
61973: GO 62528
61975: LD_INT 2
61977: DOUBLE
61978: EQUAL
61979: IFTRUE 61989
61981: LD_INT 3
61983: DOUBLE
61984: EQUAL
61985: IFTRUE 61989
61987: GO 62045
61989: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61990: LD_ADDR_VAR 0 9
61994: PUSH
61995: LD_VAR 0 29
61999: PUSH
62000: LD_VAR 0 30
62004: PUSH
62005: LD_VAR 0 31
62009: PUSH
62010: LD_VAR 0 32
62014: PUSH
62015: LD_VAR 0 33
62019: PUSH
62020: LD_VAR 0 34
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: PUSH
62033: LD_VAR 0 4
62037: PUSH
62038: LD_INT 1
62040: PLUS
62041: ARRAY
62042: ST_TO_ADDR
62043: GO 62528
62045: LD_INT 16
62047: DOUBLE
62048: EQUAL
62049: IFTRUE 62107
62051: LD_INT 17
62053: DOUBLE
62054: EQUAL
62055: IFTRUE 62107
62057: LD_INT 18
62059: DOUBLE
62060: EQUAL
62061: IFTRUE 62107
62063: LD_INT 19
62065: DOUBLE
62066: EQUAL
62067: IFTRUE 62107
62069: LD_INT 22
62071: DOUBLE
62072: EQUAL
62073: IFTRUE 62107
62075: LD_INT 20
62077: DOUBLE
62078: EQUAL
62079: IFTRUE 62107
62081: LD_INT 21
62083: DOUBLE
62084: EQUAL
62085: IFTRUE 62107
62087: LD_INT 23
62089: DOUBLE
62090: EQUAL
62091: IFTRUE 62107
62093: LD_INT 24
62095: DOUBLE
62096: EQUAL
62097: IFTRUE 62107
62099: LD_INT 25
62101: DOUBLE
62102: EQUAL
62103: IFTRUE 62107
62105: GO 62163
62107: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62108: LD_ADDR_VAR 0 9
62112: PUSH
62113: LD_VAR 0 35
62117: PUSH
62118: LD_VAR 0 36
62122: PUSH
62123: LD_VAR 0 37
62127: PUSH
62128: LD_VAR 0 38
62132: PUSH
62133: LD_VAR 0 39
62137: PUSH
62138: LD_VAR 0 40
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: PUSH
62151: LD_VAR 0 4
62155: PUSH
62156: LD_INT 1
62158: PLUS
62159: ARRAY
62160: ST_TO_ADDR
62161: GO 62528
62163: LD_INT 6
62165: DOUBLE
62166: EQUAL
62167: IFTRUE 62219
62169: LD_INT 7
62171: DOUBLE
62172: EQUAL
62173: IFTRUE 62219
62175: LD_INT 8
62177: DOUBLE
62178: EQUAL
62179: IFTRUE 62219
62181: LD_INT 13
62183: DOUBLE
62184: EQUAL
62185: IFTRUE 62219
62187: LD_INT 12
62189: DOUBLE
62190: EQUAL
62191: IFTRUE 62219
62193: LD_INT 15
62195: DOUBLE
62196: EQUAL
62197: IFTRUE 62219
62199: LD_INT 11
62201: DOUBLE
62202: EQUAL
62203: IFTRUE 62219
62205: LD_INT 14
62207: DOUBLE
62208: EQUAL
62209: IFTRUE 62219
62211: LD_INT 10
62213: DOUBLE
62214: EQUAL
62215: IFTRUE 62219
62217: GO 62275
62219: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62220: LD_ADDR_VAR 0 9
62224: PUSH
62225: LD_VAR 0 41
62229: PUSH
62230: LD_VAR 0 42
62234: PUSH
62235: LD_VAR 0 43
62239: PUSH
62240: LD_VAR 0 44
62244: PUSH
62245: LD_VAR 0 45
62249: PUSH
62250: LD_VAR 0 46
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: PUSH
62263: LD_VAR 0 4
62267: PUSH
62268: LD_INT 1
62270: PLUS
62271: ARRAY
62272: ST_TO_ADDR
62273: GO 62528
62275: LD_INT 36
62277: DOUBLE
62278: EQUAL
62279: IFTRUE 62283
62281: GO 62339
62283: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62284: LD_ADDR_VAR 0 9
62288: PUSH
62289: LD_VAR 0 47
62293: PUSH
62294: LD_VAR 0 48
62298: PUSH
62299: LD_VAR 0 49
62303: PUSH
62304: LD_VAR 0 50
62308: PUSH
62309: LD_VAR 0 51
62313: PUSH
62314: LD_VAR 0 52
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: PUSH
62327: LD_VAR 0 4
62331: PUSH
62332: LD_INT 1
62334: PLUS
62335: ARRAY
62336: ST_TO_ADDR
62337: GO 62528
62339: LD_INT 4
62341: DOUBLE
62342: EQUAL
62343: IFTRUE 62365
62345: LD_INT 5
62347: DOUBLE
62348: EQUAL
62349: IFTRUE 62365
62351: LD_INT 34
62353: DOUBLE
62354: EQUAL
62355: IFTRUE 62365
62357: LD_INT 37
62359: DOUBLE
62360: EQUAL
62361: IFTRUE 62365
62363: GO 62421
62365: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62366: LD_ADDR_VAR 0 9
62370: PUSH
62371: LD_VAR 0 53
62375: PUSH
62376: LD_VAR 0 54
62380: PUSH
62381: LD_VAR 0 55
62385: PUSH
62386: LD_VAR 0 56
62390: PUSH
62391: LD_VAR 0 57
62395: PUSH
62396: LD_VAR 0 58
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: PUSH
62409: LD_VAR 0 4
62413: PUSH
62414: LD_INT 1
62416: PLUS
62417: ARRAY
62418: ST_TO_ADDR
62419: GO 62528
62421: LD_INT 31
62423: DOUBLE
62424: EQUAL
62425: IFTRUE 62471
62427: LD_INT 32
62429: DOUBLE
62430: EQUAL
62431: IFTRUE 62471
62433: LD_INT 33
62435: DOUBLE
62436: EQUAL
62437: IFTRUE 62471
62439: LD_INT 27
62441: DOUBLE
62442: EQUAL
62443: IFTRUE 62471
62445: LD_INT 26
62447: DOUBLE
62448: EQUAL
62449: IFTRUE 62471
62451: LD_INT 28
62453: DOUBLE
62454: EQUAL
62455: IFTRUE 62471
62457: LD_INT 29
62459: DOUBLE
62460: EQUAL
62461: IFTRUE 62471
62463: LD_INT 30
62465: DOUBLE
62466: EQUAL
62467: IFTRUE 62471
62469: GO 62527
62471: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62472: LD_ADDR_VAR 0 9
62476: PUSH
62477: LD_VAR 0 59
62481: PUSH
62482: LD_VAR 0 60
62486: PUSH
62487: LD_VAR 0 61
62491: PUSH
62492: LD_VAR 0 62
62496: PUSH
62497: LD_VAR 0 63
62501: PUSH
62502: LD_VAR 0 64
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: PUSH
62515: LD_VAR 0 4
62519: PUSH
62520: LD_INT 1
62522: PLUS
62523: ARRAY
62524: ST_TO_ADDR
62525: GO 62528
62527: POP
// temp_list2 = [ ] ;
62528: LD_ADDR_VAR 0 10
62532: PUSH
62533: EMPTY
62534: ST_TO_ADDR
// for i in temp_list do
62535: LD_ADDR_VAR 0 8
62539: PUSH
62540: LD_VAR 0 9
62544: PUSH
62545: FOR_IN
62546: IFFALSE 62598
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62548: LD_ADDR_VAR 0 10
62552: PUSH
62553: LD_VAR 0 10
62557: PUSH
62558: LD_VAR 0 8
62562: PUSH
62563: LD_INT 1
62565: ARRAY
62566: PUSH
62567: LD_VAR 0 2
62571: PLUS
62572: PUSH
62573: LD_VAR 0 8
62577: PUSH
62578: LD_INT 2
62580: ARRAY
62581: PUSH
62582: LD_VAR 0 3
62586: PLUS
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: EMPTY
62593: LIST
62594: ADD
62595: ST_TO_ADDR
62596: GO 62545
62598: POP
62599: POP
// result = temp_list2 ;
62600: LD_ADDR_VAR 0 7
62604: PUSH
62605: LD_VAR 0 10
62609: ST_TO_ADDR
// end ;
62610: LD_VAR 0 7
62614: RET
// export function EnemyInRange ( unit , dist ) ; begin
62615: LD_INT 0
62617: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62618: LD_ADDR_VAR 0 3
62622: PUSH
62623: LD_VAR 0 1
62627: PPUSH
62628: CALL_OW 255
62632: PPUSH
62633: LD_VAR 0 1
62637: PPUSH
62638: CALL_OW 250
62642: PPUSH
62643: LD_VAR 0 1
62647: PPUSH
62648: CALL_OW 251
62652: PPUSH
62653: LD_VAR 0 2
62657: PPUSH
62658: CALL 36011 0 4
62662: PUSH
62663: LD_INT 4
62665: ARRAY
62666: ST_TO_ADDR
// end ;
62667: LD_VAR 0 3
62671: RET
// export function PlayerSeeMe ( unit ) ; begin
62672: LD_INT 0
62674: PPUSH
// result := See ( your_side , unit ) ;
62675: LD_ADDR_VAR 0 2
62679: PUSH
62680: LD_OWVAR 2
62684: PPUSH
62685: LD_VAR 0 1
62689: PPUSH
62690: CALL_OW 292
62694: ST_TO_ADDR
// end ;
62695: LD_VAR 0 2
62699: RET
// export function ReverseDir ( unit ) ; begin
62700: LD_INT 0
62702: PPUSH
// if not unit then
62703: LD_VAR 0 1
62707: NOT
62708: IFFALSE 62712
// exit ;
62710: GO 62735
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62712: LD_ADDR_VAR 0 2
62716: PUSH
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 254
62726: PUSH
62727: LD_INT 3
62729: PLUS
62730: PUSH
62731: LD_INT 6
62733: MOD
62734: ST_TO_ADDR
// end ;
62735: LD_VAR 0 2
62739: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62740: LD_INT 0
62742: PPUSH
62743: PPUSH
62744: PPUSH
62745: PPUSH
62746: PPUSH
// if not hexes then
62747: LD_VAR 0 2
62751: NOT
62752: IFFALSE 62756
// exit ;
62754: GO 62904
// dist := 9999 ;
62756: LD_ADDR_VAR 0 5
62760: PUSH
62761: LD_INT 9999
62763: ST_TO_ADDR
// for i = 1 to hexes do
62764: LD_ADDR_VAR 0 4
62768: PUSH
62769: DOUBLE
62770: LD_INT 1
62772: DEC
62773: ST_TO_ADDR
62774: LD_VAR 0 2
62778: PUSH
62779: FOR_TO
62780: IFFALSE 62892
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62782: LD_VAR 0 1
62786: PPUSH
62787: LD_VAR 0 2
62791: PUSH
62792: LD_VAR 0 4
62796: ARRAY
62797: PUSH
62798: LD_INT 1
62800: ARRAY
62801: PPUSH
62802: LD_VAR 0 2
62806: PUSH
62807: LD_VAR 0 4
62811: ARRAY
62812: PUSH
62813: LD_INT 2
62815: ARRAY
62816: PPUSH
62817: CALL_OW 297
62821: PUSH
62822: LD_VAR 0 5
62826: LESS
62827: IFFALSE 62890
// begin hex := hexes [ i ] ;
62829: LD_ADDR_VAR 0 7
62833: PUSH
62834: LD_VAR 0 2
62838: PUSH
62839: LD_VAR 0 4
62843: ARRAY
62844: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62845: LD_ADDR_VAR 0 5
62849: PUSH
62850: LD_VAR 0 1
62854: PPUSH
62855: LD_VAR 0 2
62859: PUSH
62860: LD_VAR 0 4
62864: ARRAY
62865: PUSH
62866: LD_INT 1
62868: ARRAY
62869: PPUSH
62870: LD_VAR 0 2
62874: PUSH
62875: LD_VAR 0 4
62879: ARRAY
62880: PUSH
62881: LD_INT 2
62883: ARRAY
62884: PPUSH
62885: CALL_OW 297
62889: ST_TO_ADDR
// end ; end ;
62890: GO 62779
62892: POP
62893: POP
// result := hex ;
62894: LD_ADDR_VAR 0 3
62898: PUSH
62899: LD_VAR 0 7
62903: ST_TO_ADDR
// end ;
62904: LD_VAR 0 3
62908: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62909: LD_INT 0
62911: PPUSH
62912: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62913: LD_VAR 0 1
62917: NOT
62918: PUSH
62919: LD_VAR 0 1
62923: PUSH
62924: LD_INT 21
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 23
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PPUSH
62948: CALL_OW 69
62952: IN
62953: NOT
62954: OR
62955: IFFALSE 62959
// exit ;
62957: GO 63006
// for i = 1 to 3 do
62959: LD_ADDR_VAR 0 3
62963: PUSH
62964: DOUBLE
62965: LD_INT 1
62967: DEC
62968: ST_TO_ADDR
62969: LD_INT 3
62971: PUSH
62972: FOR_TO
62973: IFFALSE 63004
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62975: LD_VAR 0 1
62979: PPUSH
62980: CALL_OW 250
62984: PPUSH
62985: LD_VAR 0 1
62989: PPUSH
62990: CALL_OW 251
62994: PPUSH
62995: LD_INT 1
62997: PPUSH
62998: CALL_OW 453
63002: GO 62972
63004: POP
63005: POP
// end ;
63006: LD_VAR 0 2
63010: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63011: LD_INT 0
63013: PPUSH
63014: PPUSH
63015: PPUSH
63016: PPUSH
63017: PPUSH
63018: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63019: LD_VAR 0 1
63023: NOT
63024: PUSH
63025: LD_VAR 0 2
63029: NOT
63030: OR
63031: PUSH
63032: LD_VAR 0 1
63036: PPUSH
63037: CALL_OW 314
63041: OR
63042: IFFALSE 63046
// exit ;
63044: GO 63487
// x := GetX ( enemy_unit ) ;
63046: LD_ADDR_VAR 0 7
63050: PUSH
63051: LD_VAR 0 2
63055: PPUSH
63056: CALL_OW 250
63060: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63061: LD_ADDR_VAR 0 8
63065: PUSH
63066: LD_VAR 0 2
63070: PPUSH
63071: CALL_OW 251
63075: ST_TO_ADDR
// if not x or not y then
63076: LD_VAR 0 7
63080: NOT
63081: PUSH
63082: LD_VAR 0 8
63086: NOT
63087: OR
63088: IFFALSE 63092
// exit ;
63090: GO 63487
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63092: LD_ADDR_VAR 0 6
63096: PUSH
63097: LD_VAR 0 7
63101: PPUSH
63102: LD_INT 0
63104: PPUSH
63105: LD_INT 4
63107: PPUSH
63108: CALL_OW 272
63112: PUSH
63113: LD_VAR 0 8
63117: PPUSH
63118: LD_INT 0
63120: PPUSH
63121: LD_INT 4
63123: PPUSH
63124: CALL_OW 273
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_VAR 0 7
63137: PPUSH
63138: LD_INT 1
63140: PPUSH
63141: LD_INT 4
63143: PPUSH
63144: CALL_OW 272
63148: PUSH
63149: LD_VAR 0 8
63153: PPUSH
63154: LD_INT 1
63156: PPUSH
63157: LD_INT 4
63159: PPUSH
63160: CALL_OW 273
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_VAR 0 7
63173: PPUSH
63174: LD_INT 2
63176: PPUSH
63177: LD_INT 4
63179: PPUSH
63180: CALL_OW 272
63184: PUSH
63185: LD_VAR 0 8
63189: PPUSH
63190: LD_INT 2
63192: PPUSH
63193: LD_INT 4
63195: PPUSH
63196: CALL_OW 273
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_VAR 0 7
63209: PPUSH
63210: LD_INT 3
63212: PPUSH
63213: LD_INT 4
63215: PPUSH
63216: CALL_OW 272
63220: PUSH
63221: LD_VAR 0 8
63225: PPUSH
63226: LD_INT 3
63228: PPUSH
63229: LD_INT 4
63231: PPUSH
63232: CALL_OW 273
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_VAR 0 7
63245: PPUSH
63246: LD_INT 4
63248: PPUSH
63249: LD_INT 4
63251: PPUSH
63252: CALL_OW 272
63256: PUSH
63257: LD_VAR 0 8
63261: PPUSH
63262: LD_INT 4
63264: PPUSH
63265: LD_INT 4
63267: PPUSH
63268: CALL_OW 273
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_VAR 0 7
63281: PPUSH
63282: LD_INT 5
63284: PPUSH
63285: LD_INT 4
63287: PPUSH
63288: CALL_OW 272
63292: PUSH
63293: LD_VAR 0 8
63297: PPUSH
63298: LD_INT 5
63300: PPUSH
63301: LD_INT 4
63303: PPUSH
63304: CALL_OW 273
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: ST_TO_ADDR
// for i = tmp downto 1 do
63321: LD_ADDR_VAR 0 4
63325: PUSH
63326: DOUBLE
63327: LD_VAR 0 6
63331: INC
63332: ST_TO_ADDR
63333: LD_INT 1
63335: PUSH
63336: FOR_DOWNTO
63337: IFFALSE 63438
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63339: LD_VAR 0 6
63343: PUSH
63344: LD_VAR 0 4
63348: ARRAY
63349: PUSH
63350: LD_INT 1
63352: ARRAY
63353: PPUSH
63354: LD_VAR 0 6
63358: PUSH
63359: LD_VAR 0 4
63363: ARRAY
63364: PUSH
63365: LD_INT 2
63367: ARRAY
63368: PPUSH
63369: CALL_OW 488
63373: NOT
63374: PUSH
63375: LD_VAR 0 6
63379: PUSH
63380: LD_VAR 0 4
63384: ARRAY
63385: PUSH
63386: LD_INT 1
63388: ARRAY
63389: PPUSH
63390: LD_VAR 0 6
63394: PUSH
63395: LD_VAR 0 4
63399: ARRAY
63400: PUSH
63401: LD_INT 2
63403: ARRAY
63404: PPUSH
63405: CALL_OW 428
63409: PUSH
63410: LD_INT 0
63412: NONEQUAL
63413: OR
63414: IFFALSE 63436
// tmp := Delete ( tmp , i ) ;
63416: LD_ADDR_VAR 0 6
63420: PUSH
63421: LD_VAR 0 6
63425: PPUSH
63426: LD_VAR 0 4
63430: PPUSH
63431: CALL_OW 3
63435: ST_TO_ADDR
63436: GO 63336
63438: POP
63439: POP
// j := GetClosestHex ( unit , tmp ) ;
63440: LD_ADDR_VAR 0 5
63444: PUSH
63445: LD_VAR 0 1
63449: PPUSH
63450: LD_VAR 0 6
63454: PPUSH
63455: CALL 62740 0 2
63459: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63460: LD_VAR 0 1
63464: PPUSH
63465: LD_VAR 0 5
63469: PUSH
63470: LD_INT 1
63472: ARRAY
63473: PPUSH
63474: LD_VAR 0 5
63478: PUSH
63479: LD_INT 2
63481: ARRAY
63482: PPUSH
63483: CALL_OW 111
// end ;
63487: LD_VAR 0 3
63491: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63492: LD_INT 0
63494: PPUSH
63495: PPUSH
63496: PPUSH
// uc_side = 0 ;
63497: LD_ADDR_OWVAR 20
63501: PUSH
63502: LD_INT 0
63504: ST_TO_ADDR
// uc_nation = 0 ;
63505: LD_ADDR_OWVAR 21
63509: PUSH
63510: LD_INT 0
63512: ST_TO_ADDR
// InitHc_All ( ) ;
63513: CALL_OW 584
// InitVc ;
63517: CALL_OW 20
// if mastodonts then
63521: LD_VAR 0 6
63525: IFFALSE 63592
// for i = 1 to mastodonts do
63527: LD_ADDR_VAR 0 11
63531: PUSH
63532: DOUBLE
63533: LD_INT 1
63535: DEC
63536: ST_TO_ADDR
63537: LD_VAR 0 6
63541: PUSH
63542: FOR_TO
63543: IFFALSE 63590
// begin vc_chassis := 31 ;
63545: LD_ADDR_OWVAR 37
63549: PUSH
63550: LD_INT 31
63552: ST_TO_ADDR
// vc_control := control_rider ;
63553: LD_ADDR_OWVAR 38
63557: PUSH
63558: LD_INT 4
63560: ST_TO_ADDR
// animal := CreateVehicle ;
63561: LD_ADDR_VAR 0 12
63565: PUSH
63566: CALL_OW 45
63570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63571: LD_VAR 0 12
63575: PPUSH
63576: LD_VAR 0 8
63580: PPUSH
63581: LD_INT 0
63583: PPUSH
63584: CALL 65727 0 3
// end ;
63588: GO 63542
63590: POP
63591: POP
// if horses then
63592: LD_VAR 0 5
63596: IFFALSE 63663
// for i = 1 to horses do
63598: LD_ADDR_VAR 0 11
63602: PUSH
63603: DOUBLE
63604: LD_INT 1
63606: DEC
63607: ST_TO_ADDR
63608: LD_VAR 0 5
63612: PUSH
63613: FOR_TO
63614: IFFALSE 63661
// begin hc_class := 21 ;
63616: LD_ADDR_OWVAR 28
63620: PUSH
63621: LD_INT 21
63623: ST_TO_ADDR
// hc_gallery :=  ;
63624: LD_ADDR_OWVAR 33
63628: PUSH
63629: LD_STRING 
63631: ST_TO_ADDR
// animal := CreateHuman ;
63632: LD_ADDR_VAR 0 12
63636: PUSH
63637: CALL_OW 44
63641: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63642: LD_VAR 0 12
63646: PPUSH
63647: LD_VAR 0 8
63651: PPUSH
63652: LD_INT 0
63654: PPUSH
63655: CALL 65727 0 3
// end ;
63659: GO 63613
63661: POP
63662: POP
// if birds then
63663: LD_VAR 0 1
63667: IFFALSE 63734
// for i = 1 to birds do
63669: LD_ADDR_VAR 0 11
63673: PUSH
63674: DOUBLE
63675: LD_INT 1
63677: DEC
63678: ST_TO_ADDR
63679: LD_VAR 0 1
63683: PUSH
63684: FOR_TO
63685: IFFALSE 63732
// begin hc_class = 18 ;
63687: LD_ADDR_OWVAR 28
63691: PUSH
63692: LD_INT 18
63694: ST_TO_ADDR
// hc_gallery =  ;
63695: LD_ADDR_OWVAR 33
63699: PUSH
63700: LD_STRING 
63702: ST_TO_ADDR
// animal := CreateHuman ;
63703: LD_ADDR_VAR 0 12
63707: PUSH
63708: CALL_OW 44
63712: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63713: LD_VAR 0 12
63717: PPUSH
63718: LD_VAR 0 8
63722: PPUSH
63723: LD_INT 0
63725: PPUSH
63726: CALL 65727 0 3
// end ;
63730: GO 63684
63732: POP
63733: POP
// if tigers then
63734: LD_VAR 0 2
63738: IFFALSE 63822
// for i = 1 to tigers do
63740: LD_ADDR_VAR 0 11
63744: PUSH
63745: DOUBLE
63746: LD_INT 1
63748: DEC
63749: ST_TO_ADDR
63750: LD_VAR 0 2
63754: PUSH
63755: FOR_TO
63756: IFFALSE 63820
// begin hc_class = class_tiger ;
63758: LD_ADDR_OWVAR 28
63762: PUSH
63763: LD_INT 14
63765: ST_TO_ADDR
// hc_gallery =  ;
63766: LD_ADDR_OWVAR 33
63770: PUSH
63771: LD_STRING 
63773: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63774: LD_ADDR_OWVAR 35
63778: PUSH
63779: LD_INT 7
63781: NEG
63782: PPUSH
63783: LD_INT 7
63785: PPUSH
63786: CALL_OW 12
63790: ST_TO_ADDR
// animal := CreateHuman ;
63791: LD_ADDR_VAR 0 12
63795: PUSH
63796: CALL_OW 44
63800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63801: LD_VAR 0 12
63805: PPUSH
63806: LD_VAR 0 8
63810: PPUSH
63811: LD_INT 0
63813: PPUSH
63814: CALL 65727 0 3
// end ;
63818: GO 63755
63820: POP
63821: POP
// if apemans then
63822: LD_VAR 0 3
63826: IFFALSE 63949
// for i = 1 to apemans do
63828: LD_ADDR_VAR 0 11
63832: PUSH
63833: DOUBLE
63834: LD_INT 1
63836: DEC
63837: ST_TO_ADDR
63838: LD_VAR 0 3
63842: PUSH
63843: FOR_TO
63844: IFFALSE 63947
// begin hc_class = class_apeman ;
63846: LD_ADDR_OWVAR 28
63850: PUSH
63851: LD_INT 12
63853: ST_TO_ADDR
// hc_gallery =  ;
63854: LD_ADDR_OWVAR 33
63858: PUSH
63859: LD_STRING 
63861: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63862: LD_ADDR_OWVAR 35
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PPUSH
63871: LD_INT 2
63873: PPUSH
63874: CALL_OW 12
63878: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63879: LD_ADDR_OWVAR 31
63883: PUSH
63884: LD_INT 1
63886: PPUSH
63887: LD_INT 3
63889: PPUSH
63890: CALL_OW 12
63894: PUSH
63895: LD_INT 1
63897: PPUSH
63898: LD_INT 3
63900: PPUSH
63901: CALL_OW 12
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: ST_TO_ADDR
// animal := CreateHuman ;
63918: LD_ADDR_VAR 0 12
63922: PUSH
63923: CALL_OW 44
63927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63928: LD_VAR 0 12
63932: PPUSH
63933: LD_VAR 0 8
63937: PPUSH
63938: LD_INT 0
63940: PPUSH
63941: CALL 65727 0 3
// end ;
63945: GO 63843
63947: POP
63948: POP
// if enchidnas then
63949: LD_VAR 0 4
63953: IFFALSE 64020
// for i = 1 to enchidnas do
63955: LD_ADDR_VAR 0 11
63959: PUSH
63960: DOUBLE
63961: LD_INT 1
63963: DEC
63964: ST_TO_ADDR
63965: LD_VAR 0 4
63969: PUSH
63970: FOR_TO
63971: IFFALSE 64018
// begin hc_class = 13 ;
63973: LD_ADDR_OWVAR 28
63977: PUSH
63978: LD_INT 13
63980: ST_TO_ADDR
// hc_gallery =  ;
63981: LD_ADDR_OWVAR 33
63985: PUSH
63986: LD_STRING 
63988: ST_TO_ADDR
// animal := CreateHuman ;
63989: LD_ADDR_VAR 0 12
63993: PUSH
63994: CALL_OW 44
63998: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63999: LD_VAR 0 12
64003: PPUSH
64004: LD_VAR 0 8
64008: PPUSH
64009: LD_INT 0
64011: PPUSH
64012: CALL 65727 0 3
// end ;
64016: GO 63970
64018: POP
64019: POP
// if fishes then
64020: LD_VAR 0 7
64024: IFFALSE 64091
// for i = 1 to fishes do
64026: LD_ADDR_VAR 0 11
64030: PUSH
64031: DOUBLE
64032: LD_INT 1
64034: DEC
64035: ST_TO_ADDR
64036: LD_VAR 0 7
64040: PUSH
64041: FOR_TO
64042: IFFALSE 64089
// begin hc_class = 20 ;
64044: LD_ADDR_OWVAR 28
64048: PUSH
64049: LD_INT 20
64051: ST_TO_ADDR
// hc_gallery =  ;
64052: LD_ADDR_OWVAR 33
64056: PUSH
64057: LD_STRING 
64059: ST_TO_ADDR
// animal := CreateHuman ;
64060: LD_ADDR_VAR 0 12
64064: PUSH
64065: CALL_OW 44
64069: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64070: LD_VAR 0 12
64074: PPUSH
64075: LD_VAR 0 9
64079: PPUSH
64080: LD_INT 0
64082: PPUSH
64083: CALL 65727 0 3
// end ;
64087: GO 64041
64089: POP
64090: POP
// end ;
64091: LD_VAR 0 10
64095: RET
// export function WantHeal ( sci , unit ) ; begin
64096: LD_INT 0
64098: PPUSH
// if GetTaskList ( sci ) > 0 then
64099: LD_VAR 0 1
64103: PPUSH
64104: CALL_OW 437
64108: PUSH
64109: LD_INT 0
64111: GREATER
64112: IFFALSE 64182
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64114: LD_VAR 0 1
64118: PPUSH
64119: CALL_OW 437
64123: PUSH
64124: LD_INT 1
64126: ARRAY
64127: PUSH
64128: LD_INT 1
64130: ARRAY
64131: PUSH
64132: LD_STRING l
64134: EQUAL
64135: PUSH
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL_OW 437
64145: PUSH
64146: LD_INT 1
64148: ARRAY
64149: PUSH
64150: LD_INT 4
64152: ARRAY
64153: PUSH
64154: LD_VAR 0 2
64158: EQUAL
64159: AND
64160: IFFALSE 64172
// result := true else
64162: LD_ADDR_VAR 0 3
64166: PUSH
64167: LD_INT 1
64169: ST_TO_ADDR
64170: GO 64180
// result := false ;
64172: LD_ADDR_VAR 0 3
64176: PUSH
64177: LD_INT 0
64179: ST_TO_ADDR
// end else
64180: GO 64190
// result := false ;
64182: LD_ADDR_VAR 0 3
64186: PUSH
64187: LD_INT 0
64189: ST_TO_ADDR
// end ;
64190: LD_VAR 0 3
64194: RET
// export function HealTarget ( sci ) ; begin
64195: LD_INT 0
64197: PPUSH
// if not sci then
64198: LD_VAR 0 1
64202: NOT
64203: IFFALSE 64207
// exit ;
64205: GO 64272
// result := 0 ;
64207: LD_ADDR_VAR 0 2
64211: PUSH
64212: LD_INT 0
64214: ST_TO_ADDR
// if GetTaskList ( sci ) then
64215: LD_VAR 0 1
64219: PPUSH
64220: CALL_OW 437
64224: IFFALSE 64272
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64226: LD_VAR 0 1
64230: PPUSH
64231: CALL_OW 437
64235: PUSH
64236: LD_INT 1
64238: ARRAY
64239: PUSH
64240: LD_INT 1
64242: ARRAY
64243: PUSH
64244: LD_STRING l
64246: EQUAL
64247: IFFALSE 64272
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64249: LD_ADDR_VAR 0 2
64253: PUSH
64254: LD_VAR 0 1
64258: PPUSH
64259: CALL_OW 437
64263: PUSH
64264: LD_INT 1
64266: ARRAY
64267: PUSH
64268: LD_INT 4
64270: ARRAY
64271: ST_TO_ADDR
// end ;
64272: LD_VAR 0 2
64276: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64277: LD_INT 0
64279: PPUSH
64280: PPUSH
64281: PPUSH
64282: PPUSH
// if not base_units then
64283: LD_VAR 0 1
64287: NOT
64288: IFFALSE 64292
// exit ;
64290: GO 64379
// result := false ;
64292: LD_ADDR_VAR 0 2
64296: PUSH
64297: LD_INT 0
64299: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64300: LD_ADDR_VAR 0 5
64304: PUSH
64305: LD_VAR 0 1
64309: PPUSH
64310: LD_INT 21
64312: PUSH
64313: LD_INT 3
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PPUSH
64320: CALL_OW 72
64324: ST_TO_ADDR
// if not tmp then
64325: LD_VAR 0 5
64329: NOT
64330: IFFALSE 64334
// exit ;
64332: GO 64379
// for i in tmp do
64334: LD_ADDR_VAR 0 3
64338: PUSH
64339: LD_VAR 0 5
64343: PUSH
64344: FOR_IN
64345: IFFALSE 64377
// begin result := EnemyInRange ( i , 22 ) ;
64347: LD_ADDR_VAR 0 2
64351: PUSH
64352: LD_VAR 0 3
64356: PPUSH
64357: LD_INT 22
64359: PPUSH
64360: CALL 62615 0 2
64364: ST_TO_ADDR
// if result then
64365: LD_VAR 0 2
64369: IFFALSE 64375
// exit ;
64371: POP
64372: POP
64373: GO 64379
// end ;
64375: GO 64344
64377: POP
64378: POP
// end ;
64379: LD_VAR 0 2
64383: RET
// export function FilterByTag ( units , tag ) ; begin
64384: LD_INT 0
64386: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64387: LD_ADDR_VAR 0 3
64391: PUSH
64392: LD_VAR 0 1
64396: PPUSH
64397: LD_INT 120
64399: PUSH
64400: LD_VAR 0 2
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PPUSH
64409: CALL_OW 72
64413: ST_TO_ADDR
// end ;
64414: LD_VAR 0 3
64418: RET
// export function IsDriver ( un ) ; begin
64419: LD_INT 0
64421: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64422: LD_ADDR_VAR 0 2
64426: PUSH
64427: LD_VAR 0 1
64431: PUSH
64432: LD_INT 55
64434: PUSH
64435: EMPTY
64436: LIST
64437: PPUSH
64438: CALL_OW 69
64442: IN
64443: ST_TO_ADDR
// end ;
64444: LD_VAR 0 2
64448: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64449: LD_INT 0
64451: PPUSH
64452: PPUSH
// list := [ ] ;
64453: LD_ADDR_VAR 0 5
64457: PUSH
64458: EMPTY
64459: ST_TO_ADDR
// case d of 0 :
64460: LD_VAR 0 3
64464: PUSH
64465: LD_INT 0
64467: DOUBLE
64468: EQUAL
64469: IFTRUE 64473
64471: GO 64606
64473: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64474: LD_ADDR_VAR 0 5
64478: PUSH
64479: LD_VAR 0 1
64483: PUSH
64484: LD_INT 4
64486: MINUS
64487: PUSH
64488: LD_VAR 0 2
64492: PUSH
64493: LD_INT 4
64495: MINUS
64496: PUSH
64497: LD_INT 2
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: LIST
64504: PUSH
64505: LD_VAR 0 1
64509: PUSH
64510: LD_INT 3
64512: MINUS
64513: PUSH
64514: LD_VAR 0 2
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: LIST
64526: PUSH
64527: LD_VAR 0 1
64531: PUSH
64532: LD_INT 4
64534: PLUS
64535: PUSH
64536: LD_VAR 0 2
64540: PUSH
64541: LD_INT 4
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: PUSH
64549: LD_VAR 0 1
64553: PUSH
64554: LD_INT 3
64556: PLUS
64557: PUSH
64558: LD_VAR 0 2
64562: PUSH
64563: LD_INT 3
64565: PLUS
64566: PUSH
64567: LD_INT 5
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: PUSH
64575: LD_VAR 0 1
64579: PUSH
64580: LD_VAR 0 2
64584: PUSH
64585: LD_INT 4
64587: PLUS
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: ST_TO_ADDR
// end ; 1 :
64604: GO 65304
64606: LD_INT 1
64608: DOUBLE
64609: EQUAL
64610: IFTRUE 64614
64612: GO 64747
64614: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64615: LD_ADDR_VAR 0 5
64619: PUSH
64620: LD_VAR 0 1
64624: PUSH
64625: LD_VAR 0 2
64629: PUSH
64630: LD_INT 4
64632: MINUS
64633: PUSH
64634: LD_INT 3
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: PUSH
64642: LD_VAR 0 1
64646: PUSH
64647: LD_INT 3
64649: MINUS
64650: PUSH
64651: LD_VAR 0 2
64655: PUSH
64656: LD_INT 3
64658: MINUS
64659: PUSH
64660: LD_INT 2
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: LIST
64667: PUSH
64668: LD_VAR 0 1
64672: PUSH
64673: LD_INT 4
64675: MINUS
64676: PUSH
64677: LD_VAR 0 2
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: LIST
64689: PUSH
64690: LD_VAR 0 1
64694: PUSH
64695: LD_VAR 0 2
64699: PUSH
64700: LD_INT 3
64702: PLUS
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: PUSH
64712: LD_VAR 0 1
64716: PUSH
64717: LD_INT 4
64719: PLUS
64720: PUSH
64721: LD_VAR 0 2
64725: PUSH
64726: LD_INT 4
64728: PLUS
64729: PUSH
64730: LD_INT 5
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: LIST
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: ST_TO_ADDR
// end ; 2 :
64745: GO 65304
64747: LD_INT 2
64749: DOUBLE
64750: EQUAL
64751: IFTRUE 64755
64753: GO 64884
64755: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64756: LD_ADDR_VAR 0 5
64760: PUSH
64761: LD_VAR 0 1
64765: PUSH
64766: LD_VAR 0 2
64770: PUSH
64771: LD_INT 3
64773: MINUS
64774: PUSH
64775: LD_INT 3
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: LIST
64782: PUSH
64783: LD_VAR 0 1
64787: PUSH
64788: LD_INT 4
64790: PLUS
64791: PUSH
64792: LD_VAR 0 2
64796: PUSH
64797: LD_INT 4
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: PUSH
64805: LD_VAR 0 1
64809: PUSH
64810: LD_VAR 0 2
64814: PUSH
64815: LD_INT 4
64817: PLUS
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: PUSH
64827: LD_VAR 0 1
64831: PUSH
64832: LD_INT 3
64834: MINUS
64835: PUSH
64836: LD_VAR 0 2
64840: PUSH
64841: LD_INT 1
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: PUSH
64849: LD_VAR 0 1
64853: PUSH
64854: LD_INT 4
64856: MINUS
64857: PUSH
64858: LD_VAR 0 2
64862: PUSH
64863: LD_INT 4
64865: MINUS
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: ST_TO_ADDR
// end ; 3 :
64882: GO 65304
64884: LD_INT 3
64886: DOUBLE
64887: EQUAL
64888: IFTRUE 64892
64890: GO 65025
64892: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64893: LD_ADDR_VAR 0 5
64897: PUSH
64898: LD_VAR 0 1
64902: PUSH
64903: LD_INT 3
64905: PLUS
64906: PUSH
64907: LD_VAR 0 2
64911: PUSH
64912: LD_INT 4
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: LIST
64919: PUSH
64920: LD_VAR 0 1
64924: PUSH
64925: LD_INT 4
64927: PLUS
64928: PUSH
64929: LD_VAR 0 2
64933: PUSH
64934: LD_INT 4
64936: PLUS
64937: PUSH
64938: LD_INT 5
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: LIST
64945: PUSH
64946: LD_VAR 0 1
64950: PUSH
64951: LD_INT 4
64953: MINUS
64954: PUSH
64955: LD_VAR 0 2
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: LIST
64967: PUSH
64968: LD_VAR 0 1
64972: PUSH
64973: LD_VAR 0 2
64977: PUSH
64978: LD_INT 4
64980: MINUS
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: PUSH
64990: LD_VAR 0 1
64994: PUSH
64995: LD_INT 3
64997: MINUS
64998: PUSH
64999: LD_VAR 0 2
65003: PUSH
65004: LD_INT 3
65006: MINUS
65007: PUSH
65008: LD_INT 2
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: ST_TO_ADDR
// end ; 4 :
65023: GO 65304
65025: LD_INT 4
65027: DOUBLE
65028: EQUAL
65029: IFTRUE 65033
65031: GO 65166
65033: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65034: LD_ADDR_VAR 0 5
65038: PUSH
65039: LD_VAR 0 1
65043: PUSH
65044: LD_VAR 0 2
65048: PUSH
65049: LD_INT 4
65051: PLUS
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: LIST
65060: PUSH
65061: LD_VAR 0 1
65065: PUSH
65066: LD_INT 3
65068: PLUS
65069: PUSH
65070: LD_VAR 0 2
65074: PUSH
65075: LD_INT 3
65077: PLUS
65078: PUSH
65079: LD_INT 5
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: PUSH
65087: LD_VAR 0 1
65091: PUSH
65092: LD_INT 4
65094: PLUS
65095: PUSH
65096: LD_VAR 0 2
65100: PUSH
65101: LD_INT 4
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: PUSH
65109: LD_VAR 0 1
65113: PUSH
65114: LD_VAR 0 2
65118: PUSH
65119: LD_INT 3
65121: MINUS
65122: PUSH
65123: LD_INT 3
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: PUSH
65131: LD_VAR 0 1
65135: PUSH
65136: LD_INT 4
65138: MINUS
65139: PUSH
65140: LD_VAR 0 2
65144: PUSH
65145: LD_INT 4
65147: MINUS
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: ST_TO_ADDR
// end ; 5 :
65164: GO 65304
65166: LD_INT 5
65168: DOUBLE
65169: EQUAL
65170: IFTRUE 65174
65172: GO 65303
65174: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65175: LD_ADDR_VAR 0 5
65179: PUSH
65180: LD_VAR 0 1
65184: PUSH
65185: LD_INT 4
65187: MINUS
65188: PUSH
65189: LD_VAR 0 2
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: LIST
65201: PUSH
65202: LD_VAR 0 1
65206: PUSH
65207: LD_VAR 0 2
65211: PUSH
65212: LD_INT 4
65214: MINUS
65215: PUSH
65216: LD_INT 3
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: PUSH
65224: LD_VAR 0 1
65228: PUSH
65229: LD_INT 4
65231: PLUS
65232: PUSH
65233: LD_VAR 0 2
65237: PUSH
65238: LD_INT 4
65240: PLUS
65241: PUSH
65242: LD_INT 5
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: PUSH
65250: LD_VAR 0 1
65254: PUSH
65255: LD_INT 3
65257: PLUS
65258: PUSH
65259: LD_VAR 0 2
65263: PUSH
65264: LD_INT 4
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_VAR 0 2
65281: PUSH
65282: LD_INT 3
65284: PLUS
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: ST_TO_ADDR
// end ; end ;
65301: GO 65304
65303: POP
// result := list ;
65304: LD_ADDR_VAR 0 4
65308: PUSH
65309: LD_VAR 0 5
65313: ST_TO_ADDR
// end ;
65314: LD_VAR 0 4
65318: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65319: LD_INT 0
65321: PPUSH
65322: PPUSH
65323: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65324: LD_VAR 0 1
65328: NOT
65329: PUSH
65330: LD_VAR 0 2
65334: PUSH
65335: LD_INT 1
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: LD_INT 3
65343: PUSH
65344: LD_INT 4
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: IN
65353: NOT
65354: OR
65355: IFFALSE 65359
// exit ;
65357: GO 65451
// tmp := [ ] ;
65359: LD_ADDR_VAR 0 5
65363: PUSH
65364: EMPTY
65365: ST_TO_ADDR
// for i in units do
65366: LD_ADDR_VAR 0 4
65370: PUSH
65371: LD_VAR 0 1
65375: PUSH
65376: FOR_IN
65377: IFFALSE 65420
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65379: LD_ADDR_VAR 0 5
65383: PUSH
65384: LD_VAR 0 5
65388: PPUSH
65389: LD_VAR 0 5
65393: PUSH
65394: LD_INT 1
65396: PLUS
65397: PPUSH
65398: LD_VAR 0 4
65402: PPUSH
65403: LD_VAR 0 2
65407: PPUSH
65408: CALL_OW 259
65412: PPUSH
65413: CALL_OW 2
65417: ST_TO_ADDR
65418: GO 65376
65420: POP
65421: POP
// if not tmp then
65422: LD_VAR 0 5
65426: NOT
65427: IFFALSE 65431
// exit ;
65429: GO 65451
// result := SortListByListDesc ( units , tmp ) ;
65431: LD_ADDR_VAR 0 3
65435: PUSH
65436: LD_VAR 0 1
65440: PPUSH
65441: LD_VAR 0 5
65445: PPUSH
65446: CALL_OW 77
65450: ST_TO_ADDR
// end ;
65451: LD_VAR 0 3
65455: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65456: LD_INT 0
65458: PPUSH
65459: PPUSH
65460: PPUSH
// result := false ;
65461: LD_ADDR_VAR 0 3
65465: PUSH
65466: LD_INT 0
65468: ST_TO_ADDR
// x := GetX ( building ) ;
65469: LD_ADDR_VAR 0 4
65473: PUSH
65474: LD_VAR 0 2
65478: PPUSH
65479: CALL_OW 250
65483: ST_TO_ADDR
// y := GetY ( building ) ;
65484: LD_ADDR_VAR 0 5
65488: PUSH
65489: LD_VAR 0 2
65493: PPUSH
65494: CALL_OW 251
65498: ST_TO_ADDR
// if not building or not x or not y then
65499: LD_VAR 0 2
65503: NOT
65504: PUSH
65505: LD_VAR 0 4
65509: NOT
65510: OR
65511: PUSH
65512: LD_VAR 0 5
65516: NOT
65517: OR
65518: IFFALSE 65522
// exit ;
65520: GO 65614
// if GetTaskList ( unit ) then
65522: LD_VAR 0 1
65526: PPUSH
65527: CALL_OW 437
65531: IFFALSE 65614
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65533: LD_STRING e
65535: PUSH
65536: LD_VAR 0 1
65540: PPUSH
65541: CALL_OW 437
65545: PUSH
65546: LD_INT 1
65548: ARRAY
65549: PUSH
65550: LD_INT 1
65552: ARRAY
65553: EQUAL
65554: PUSH
65555: LD_VAR 0 4
65559: PUSH
65560: LD_VAR 0 1
65564: PPUSH
65565: CALL_OW 437
65569: PUSH
65570: LD_INT 1
65572: ARRAY
65573: PUSH
65574: LD_INT 2
65576: ARRAY
65577: EQUAL
65578: AND
65579: PUSH
65580: LD_VAR 0 5
65584: PUSH
65585: LD_VAR 0 1
65589: PPUSH
65590: CALL_OW 437
65594: PUSH
65595: LD_INT 1
65597: ARRAY
65598: PUSH
65599: LD_INT 3
65601: ARRAY
65602: EQUAL
65603: AND
65604: IFFALSE 65614
// result := true end ;
65606: LD_ADDR_VAR 0 3
65610: PUSH
65611: LD_INT 1
65613: ST_TO_ADDR
// end ;
65614: LD_VAR 0 3
65618: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65619: LD_INT 0
65621: PPUSH
// result := false ;
65622: LD_ADDR_VAR 0 4
65626: PUSH
65627: LD_INT 0
65629: ST_TO_ADDR
// if GetTaskList ( unit ) then
65630: LD_VAR 0 1
65634: PPUSH
65635: CALL_OW 437
65639: IFFALSE 65722
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65641: LD_STRING M
65643: PUSH
65644: LD_VAR 0 1
65648: PPUSH
65649: CALL_OW 437
65653: PUSH
65654: LD_INT 1
65656: ARRAY
65657: PUSH
65658: LD_INT 1
65660: ARRAY
65661: EQUAL
65662: PUSH
65663: LD_VAR 0 2
65667: PUSH
65668: LD_VAR 0 1
65672: PPUSH
65673: CALL_OW 437
65677: PUSH
65678: LD_INT 1
65680: ARRAY
65681: PUSH
65682: LD_INT 2
65684: ARRAY
65685: EQUAL
65686: AND
65687: PUSH
65688: LD_VAR 0 3
65692: PUSH
65693: LD_VAR 0 1
65697: PPUSH
65698: CALL_OW 437
65702: PUSH
65703: LD_INT 1
65705: ARRAY
65706: PUSH
65707: LD_INT 3
65709: ARRAY
65710: EQUAL
65711: AND
65712: IFFALSE 65722
// result := true ;
65714: LD_ADDR_VAR 0 4
65718: PUSH
65719: LD_INT 1
65721: ST_TO_ADDR
// end ; end ;
65722: LD_VAR 0 4
65726: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65727: LD_INT 0
65729: PPUSH
65730: PPUSH
65731: PPUSH
65732: PPUSH
// if not unit or not area then
65733: LD_VAR 0 1
65737: NOT
65738: PUSH
65739: LD_VAR 0 2
65743: NOT
65744: OR
65745: IFFALSE 65749
// exit ;
65747: GO 65913
// tmp := AreaToList ( area , i ) ;
65749: LD_ADDR_VAR 0 6
65753: PUSH
65754: LD_VAR 0 2
65758: PPUSH
65759: LD_VAR 0 5
65763: PPUSH
65764: CALL_OW 517
65768: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65769: LD_ADDR_VAR 0 5
65773: PUSH
65774: DOUBLE
65775: LD_INT 1
65777: DEC
65778: ST_TO_ADDR
65779: LD_VAR 0 6
65783: PUSH
65784: LD_INT 1
65786: ARRAY
65787: PUSH
65788: FOR_TO
65789: IFFALSE 65911
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65791: LD_ADDR_VAR 0 7
65795: PUSH
65796: LD_VAR 0 6
65800: PUSH
65801: LD_INT 1
65803: ARRAY
65804: PUSH
65805: LD_VAR 0 5
65809: ARRAY
65810: PUSH
65811: LD_VAR 0 6
65815: PUSH
65816: LD_INT 2
65818: ARRAY
65819: PUSH
65820: LD_VAR 0 5
65824: ARRAY
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65830: LD_VAR 0 7
65834: PUSH
65835: LD_INT 1
65837: ARRAY
65838: PPUSH
65839: LD_VAR 0 7
65843: PUSH
65844: LD_INT 2
65846: ARRAY
65847: PPUSH
65848: CALL_OW 428
65852: PUSH
65853: LD_INT 0
65855: EQUAL
65856: IFFALSE 65909
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65858: LD_VAR 0 1
65862: PPUSH
65863: LD_VAR 0 7
65867: PUSH
65868: LD_INT 1
65870: ARRAY
65871: PPUSH
65872: LD_VAR 0 7
65876: PUSH
65877: LD_INT 2
65879: ARRAY
65880: PPUSH
65881: LD_VAR 0 3
65885: PPUSH
65886: CALL_OW 48
// result := IsPlaced ( unit ) ;
65890: LD_ADDR_VAR 0 4
65894: PUSH
65895: LD_VAR 0 1
65899: PPUSH
65900: CALL_OW 305
65904: ST_TO_ADDR
// exit ;
65905: POP
65906: POP
65907: GO 65913
// end ; end ;
65909: GO 65788
65911: POP
65912: POP
// end ;
65913: LD_VAR 0 4
65917: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65918: LD_INT 0
65920: PPUSH
65921: PPUSH
65922: PPUSH
// if not side or side > 8 then
65923: LD_VAR 0 1
65927: NOT
65928: PUSH
65929: LD_VAR 0 1
65933: PUSH
65934: LD_INT 8
65936: GREATER
65937: OR
65938: IFFALSE 65942
// exit ;
65940: GO 66129
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65942: LD_ADDR_VAR 0 4
65946: PUSH
65947: LD_INT 22
65949: PUSH
65950: LD_VAR 0 1
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 21
65961: PUSH
65962: LD_INT 3
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PPUSH
65973: CALL_OW 69
65977: ST_TO_ADDR
// if not tmp then
65978: LD_VAR 0 4
65982: NOT
65983: IFFALSE 65987
// exit ;
65985: GO 66129
// enable_addtolog := true ;
65987: LD_ADDR_OWVAR 81
65991: PUSH
65992: LD_INT 1
65994: ST_TO_ADDR
// AddToLog ( [ ) ;
65995: LD_STRING [
65997: PPUSH
65998: CALL_OW 561
// for i in tmp do
66002: LD_ADDR_VAR 0 3
66006: PUSH
66007: LD_VAR 0 4
66011: PUSH
66012: FOR_IN
66013: IFFALSE 66120
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66015: LD_STRING [
66017: PUSH
66018: LD_VAR 0 3
66022: PPUSH
66023: CALL_OW 266
66027: STR
66028: PUSH
66029: LD_STRING , 
66031: STR
66032: PUSH
66033: LD_VAR 0 3
66037: PPUSH
66038: CALL_OW 250
66042: STR
66043: PUSH
66044: LD_STRING , 
66046: STR
66047: PUSH
66048: LD_VAR 0 3
66052: PPUSH
66053: CALL_OW 251
66057: STR
66058: PUSH
66059: LD_STRING , 
66061: STR
66062: PUSH
66063: LD_VAR 0 3
66067: PPUSH
66068: CALL_OW 254
66072: STR
66073: PUSH
66074: LD_STRING , 
66076: STR
66077: PUSH
66078: LD_VAR 0 3
66082: PPUSH
66083: LD_INT 1
66085: PPUSH
66086: CALL_OW 268
66090: STR
66091: PUSH
66092: LD_STRING , 
66094: STR
66095: PUSH
66096: LD_VAR 0 3
66100: PPUSH
66101: LD_INT 2
66103: PPUSH
66104: CALL_OW 268
66108: STR
66109: PUSH
66110: LD_STRING ],
66112: STR
66113: PPUSH
66114: CALL_OW 561
// end ;
66118: GO 66012
66120: POP
66121: POP
// AddToLog ( ]; ) ;
66122: LD_STRING ];
66124: PPUSH
66125: CALL_OW 561
// end ;
66129: LD_VAR 0 2
66133: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66134: LD_INT 0
66136: PPUSH
66137: PPUSH
66138: PPUSH
66139: PPUSH
66140: PPUSH
// if not area or not rate or not max then
66141: LD_VAR 0 1
66145: NOT
66146: PUSH
66147: LD_VAR 0 2
66151: NOT
66152: OR
66153: PUSH
66154: LD_VAR 0 4
66158: NOT
66159: OR
66160: IFFALSE 66164
// exit ;
66162: GO 66353
// while 1 do
66164: LD_INT 1
66166: IFFALSE 66353
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66168: LD_ADDR_VAR 0 9
66172: PUSH
66173: LD_VAR 0 1
66177: PPUSH
66178: LD_INT 1
66180: PPUSH
66181: CALL_OW 287
66185: PUSH
66186: LD_INT 10
66188: MUL
66189: ST_TO_ADDR
// r := rate / 10 ;
66190: LD_ADDR_VAR 0 7
66194: PUSH
66195: LD_VAR 0 2
66199: PUSH
66200: LD_INT 10
66202: DIVREAL
66203: ST_TO_ADDR
// time := 1 1$00 ;
66204: LD_ADDR_VAR 0 8
66208: PUSH
66209: LD_INT 2100
66211: ST_TO_ADDR
// if amount < min then
66212: LD_VAR 0 9
66216: PUSH
66217: LD_VAR 0 3
66221: LESS
66222: IFFALSE 66240
// r := r * 2 else
66224: LD_ADDR_VAR 0 7
66228: PUSH
66229: LD_VAR 0 7
66233: PUSH
66234: LD_INT 2
66236: MUL
66237: ST_TO_ADDR
66238: GO 66266
// if amount > max then
66240: LD_VAR 0 9
66244: PUSH
66245: LD_VAR 0 4
66249: GREATER
66250: IFFALSE 66266
// r := r / 2 ;
66252: LD_ADDR_VAR 0 7
66256: PUSH
66257: LD_VAR 0 7
66261: PUSH
66262: LD_INT 2
66264: DIVREAL
66265: ST_TO_ADDR
// time := time / r ;
66266: LD_ADDR_VAR 0 8
66270: PUSH
66271: LD_VAR 0 8
66275: PUSH
66276: LD_VAR 0 7
66280: DIVREAL
66281: ST_TO_ADDR
// if time < 0 then
66282: LD_VAR 0 8
66286: PUSH
66287: LD_INT 0
66289: LESS
66290: IFFALSE 66307
// time := time * - 1 ;
66292: LD_ADDR_VAR 0 8
66296: PUSH
66297: LD_VAR 0 8
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: MUL
66306: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66307: LD_VAR 0 8
66311: PUSH
66312: LD_INT 35
66314: PPUSH
66315: LD_INT 875
66317: PPUSH
66318: CALL_OW 12
66322: PLUS
66323: PPUSH
66324: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66328: LD_INT 1
66330: PPUSH
66331: LD_INT 5
66333: PPUSH
66334: CALL_OW 12
66338: PPUSH
66339: LD_VAR 0 1
66343: PPUSH
66344: LD_INT 1
66346: PPUSH
66347: CALL_OW 55
// end ;
66351: GO 66164
// end ;
66353: LD_VAR 0 5
66357: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66358: LD_INT 0
66360: PPUSH
66361: PPUSH
66362: PPUSH
66363: PPUSH
66364: PPUSH
66365: PPUSH
66366: PPUSH
66367: PPUSH
// if not turrets or not factories then
66368: LD_VAR 0 1
66372: NOT
66373: PUSH
66374: LD_VAR 0 2
66378: NOT
66379: OR
66380: IFFALSE 66384
// exit ;
66382: GO 66691
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66384: LD_ADDR_VAR 0 10
66388: PUSH
66389: LD_INT 5
66391: PUSH
66392: LD_INT 6
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 2
66401: PUSH
66402: LD_INT 4
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 3
66411: PUSH
66412: LD_INT 5
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 24
66426: PUSH
66427: LD_INT 25
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 23
66436: PUSH
66437: LD_INT 27
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 42
66450: PUSH
66451: LD_INT 43
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 44
66460: PUSH
66461: LD_INT 46
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 45
66470: PUSH
66471: LD_INT 47
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: LIST
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: ST_TO_ADDR
// result := [ ] ;
66488: LD_ADDR_VAR 0 3
66492: PUSH
66493: EMPTY
66494: ST_TO_ADDR
// for i in turrets do
66495: LD_ADDR_VAR 0 4
66499: PUSH
66500: LD_VAR 0 1
66504: PUSH
66505: FOR_IN
66506: IFFALSE 66689
// begin nat := GetNation ( i ) ;
66508: LD_ADDR_VAR 0 7
66512: PUSH
66513: LD_VAR 0 4
66517: PPUSH
66518: CALL_OW 248
66522: ST_TO_ADDR
// weapon := 0 ;
66523: LD_ADDR_VAR 0 8
66527: PUSH
66528: LD_INT 0
66530: ST_TO_ADDR
// if not nat then
66531: LD_VAR 0 7
66535: NOT
66536: IFFALSE 66540
// continue ;
66538: GO 66505
// for j in list [ nat ] do
66540: LD_ADDR_VAR 0 5
66544: PUSH
66545: LD_VAR 0 10
66549: PUSH
66550: LD_VAR 0 7
66554: ARRAY
66555: PUSH
66556: FOR_IN
66557: IFFALSE 66598
// if GetBWeapon ( i ) = j [ 1 ] then
66559: LD_VAR 0 4
66563: PPUSH
66564: CALL_OW 269
66568: PUSH
66569: LD_VAR 0 5
66573: PUSH
66574: LD_INT 1
66576: ARRAY
66577: EQUAL
66578: IFFALSE 66596
// begin weapon := j [ 2 ] ;
66580: LD_ADDR_VAR 0 8
66584: PUSH
66585: LD_VAR 0 5
66589: PUSH
66590: LD_INT 2
66592: ARRAY
66593: ST_TO_ADDR
// break ;
66594: GO 66598
// end ;
66596: GO 66556
66598: POP
66599: POP
// if not weapon then
66600: LD_VAR 0 8
66604: NOT
66605: IFFALSE 66609
// continue ;
66607: GO 66505
// for k in factories do
66609: LD_ADDR_VAR 0 6
66613: PUSH
66614: LD_VAR 0 2
66618: PUSH
66619: FOR_IN
66620: IFFALSE 66685
// begin weapons := AvailableWeaponList ( k ) ;
66622: LD_ADDR_VAR 0 9
66626: PUSH
66627: LD_VAR 0 6
66631: PPUSH
66632: CALL_OW 478
66636: ST_TO_ADDR
// if not weapons then
66637: LD_VAR 0 9
66641: NOT
66642: IFFALSE 66646
// continue ;
66644: GO 66619
// if weapon in weapons then
66646: LD_VAR 0 8
66650: PUSH
66651: LD_VAR 0 9
66655: IN
66656: IFFALSE 66683
// begin result := [ i , weapon ] ;
66658: LD_ADDR_VAR 0 3
66662: PUSH
66663: LD_VAR 0 4
66667: PUSH
66668: LD_VAR 0 8
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: ST_TO_ADDR
// exit ;
66677: POP
66678: POP
66679: POP
66680: POP
66681: GO 66691
// end ; end ;
66683: GO 66619
66685: POP
66686: POP
// end ;
66687: GO 66505
66689: POP
66690: POP
// end ;
66691: LD_VAR 0 3
66695: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66696: LD_INT 0
66698: PPUSH
// if not side or side > 8 then
66699: LD_VAR 0 3
66703: NOT
66704: PUSH
66705: LD_VAR 0 3
66709: PUSH
66710: LD_INT 8
66712: GREATER
66713: OR
66714: IFFALSE 66718
// exit ;
66716: GO 66777
// if not range then
66718: LD_VAR 0 4
66722: NOT
66723: IFFALSE 66734
// range := - 12 ;
66725: LD_ADDR_VAR 0 4
66729: PUSH
66730: LD_INT 12
66732: NEG
66733: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66734: LD_VAR 0 1
66738: PPUSH
66739: LD_VAR 0 2
66743: PPUSH
66744: LD_VAR 0 3
66748: PPUSH
66749: LD_VAR 0 4
66753: PPUSH
66754: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66758: LD_VAR 0 1
66762: PPUSH
66763: LD_VAR 0 2
66767: PPUSH
66768: LD_VAR 0 3
66772: PPUSH
66773: CALL_OW 331
// end ;
66777: LD_VAR 0 5
66781: RET
// export function Video ( mode ) ; begin
66782: LD_INT 0
66784: PPUSH
// ingame_video = mode ;
66785: LD_ADDR_OWVAR 52
66789: PUSH
66790: LD_VAR 0 1
66794: ST_TO_ADDR
// interface_hidden = mode ;
66795: LD_ADDR_OWVAR 54
66799: PUSH
66800: LD_VAR 0 1
66804: ST_TO_ADDR
// end ;
66805: LD_VAR 0 2
66809: RET
// export function Join ( array , element ) ; begin
66810: LD_INT 0
66812: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66813: LD_ADDR_VAR 0 3
66817: PUSH
66818: LD_VAR 0 1
66822: PPUSH
66823: LD_VAR 0 1
66827: PUSH
66828: LD_INT 1
66830: PLUS
66831: PPUSH
66832: LD_VAR 0 2
66836: PPUSH
66837: CALL_OW 1
66841: ST_TO_ADDR
// end ;
66842: LD_VAR 0 3
66846: RET
// export function JoinUnion ( array , element ) ; begin
66847: LD_INT 0
66849: PPUSH
// result := array union element ;
66850: LD_ADDR_VAR 0 3
66854: PUSH
66855: LD_VAR 0 1
66859: PUSH
66860: LD_VAR 0 2
66864: UNION
66865: ST_TO_ADDR
// end ;
66866: LD_VAR 0 3
66870: RET
// export function GetBehemoths ( side ) ; begin
66871: LD_INT 0
66873: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66874: LD_ADDR_VAR 0 2
66878: PUSH
66879: LD_INT 22
66881: PUSH
66882: LD_VAR 0 1
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 31
66893: PUSH
66894: LD_INT 25
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PPUSH
66905: CALL_OW 69
66909: ST_TO_ADDR
// end ;
66910: LD_VAR 0 2
66914: RET
// export function Shuffle ( array ) ; var i , index ; begin
66915: LD_INT 0
66917: PPUSH
66918: PPUSH
66919: PPUSH
// result := [ ] ;
66920: LD_ADDR_VAR 0 2
66924: PUSH
66925: EMPTY
66926: ST_TO_ADDR
// if not array then
66927: LD_VAR 0 1
66931: NOT
66932: IFFALSE 66936
// exit ;
66934: GO 67035
// Randomize ;
66936: CALL_OW 10
// for i = array downto 1 do
66940: LD_ADDR_VAR 0 3
66944: PUSH
66945: DOUBLE
66946: LD_VAR 0 1
66950: INC
66951: ST_TO_ADDR
66952: LD_INT 1
66954: PUSH
66955: FOR_DOWNTO
66956: IFFALSE 67033
// begin index := rand ( 1 , array ) ;
66958: LD_ADDR_VAR 0 4
66962: PUSH
66963: LD_INT 1
66965: PPUSH
66966: LD_VAR 0 1
66970: PPUSH
66971: CALL_OW 12
66975: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66976: LD_ADDR_VAR 0 2
66980: PUSH
66981: LD_VAR 0 2
66985: PPUSH
66986: LD_VAR 0 2
66990: PUSH
66991: LD_INT 1
66993: PLUS
66994: PPUSH
66995: LD_VAR 0 1
66999: PUSH
67000: LD_VAR 0 4
67004: ARRAY
67005: PPUSH
67006: CALL_OW 2
67010: ST_TO_ADDR
// array := Delete ( array , index ) ;
67011: LD_ADDR_VAR 0 1
67015: PUSH
67016: LD_VAR 0 1
67020: PPUSH
67021: LD_VAR 0 4
67025: PPUSH
67026: CALL_OW 3
67030: ST_TO_ADDR
// end ;
67031: GO 66955
67033: POP
67034: POP
// end ;
67035: LD_VAR 0 2
67039: RET
// export function GetBaseMaterials ( base ) ; begin
67040: LD_INT 0
67042: PPUSH
// result := [ 0 , 0 , 0 ] ;
67043: LD_ADDR_VAR 0 2
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 0
67053: PUSH
67054: LD_INT 0
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: LIST
67061: ST_TO_ADDR
// if not base then
67062: LD_VAR 0 1
67066: NOT
67067: IFFALSE 67071
// exit ;
67069: GO 67120
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67071: LD_ADDR_VAR 0 2
67075: PUSH
67076: LD_VAR 0 1
67080: PPUSH
67081: LD_INT 1
67083: PPUSH
67084: CALL_OW 275
67088: PUSH
67089: LD_VAR 0 1
67093: PPUSH
67094: LD_INT 2
67096: PPUSH
67097: CALL_OW 275
67101: PUSH
67102: LD_VAR 0 1
67106: PPUSH
67107: LD_INT 3
67109: PPUSH
67110: CALL_OW 275
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: LIST
67119: ST_TO_ADDR
// end ;
67120: LD_VAR 0 2
67124: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67125: LD_INT 0
67127: PPUSH
67128: PPUSH
// result := array ;
67129: LD_ADDR_VAR 0 3
67133: PUSH
67134: LD_VAR 0 1
67138: ST_TO_ADDR
// if size > 0 then
67139: LD_VAR 0 2
67143: PUSH
67144: LD_INT 0
67146: GREATER
67147: IFFALSE 67193
// for i := array downto size do
67149: LD_ADDR_VAR 0 4
67153: PUSH
67154: DOUBLE
67155: LD_VAR 0 1
67159: INC
67160: ST_TO_ADDR
67161: LD_VAR 0 2
67165: PUSH
67166: FOR_DOWNTO
67167: IFFALSE 67191
// result := Delete ( result , result ) ;
67169: LD_ADDR_VAR 0 3
67173: PUSH
67174: LD_VAR 0 3
67178: PPUSH
67179: LD_VAR 0 3
67183: PPUSH
67184: CALL_OW 3
67188: ST_TO_ADDR
67189: GO 67166
67191: POP
67192: POP
// end ;
67193: LD_VAR 0 3
67197: RET
// export function ComExit ( unit ) ; var tmp ; begin
67198: LD_INT 0
67200: PPUSH
67201: PPUSH
// if not IsInUnit ( unit ) then
67202: LD_VAR 0 1
67206: PPUSH
67207: CALL_OW 310
67211: NOT
67212: IFFALSE 67216
// exit ;
67214: GO 67276
// tmp := IsInUnit ( unit ) ;
67216: LD_ADDR_VAR 0 3
67220: PUSH
67221: LD_VAR 0 1
67225: PPUSH
67226: CALL_OW 310
67230: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67231: LD_VAR 0 3
67235: PPUSH
67236: CALL_OW 247
67240: PUSH
67241: LD_INT 2
67243: EQUAL
67244: IFFALSE 67257
// ComExitVehicle ( unit ) else
67246: LD_VAR 0 1
67250: PPUSH
67251: CALL_OW 121
67255: GO 67266
// ComExitBuilding ( unit ) ;
67257: LD_VAR 0 1
67261: PPUSH
67262: CALL_OW 122
// result := tmp ;
67266: LD_ADDR_VAR 0 2
67270: PUSH
67271: LD_VAR 0 3
67275: ST_TO_ADDR
// end ;
67276: LD_VAR 0 2
67280: RET
// export function ComExitAll ( units ) ; var i ; begin
67281: LD_INT 0
67283: PPUSH
67284: PPUSH
// if not units then
67285: LD_VAR 0 1
67289: NOT
67290: IFFALSE 67294
// exit ;
67292: GO 67320
// for i in units do
67294: LD_ADDR_VAR 0 3
67298: PUSH
67299: LD_VAR 0 1
67303: PUSH
67304: FOR_IN
67305: IFFALSE 67318
// ComExit ( i ) ;
67307: LD_VAR 0 3
67311: PPUSH
67312: CALL 67198 0 1
67316: GO 67304
67318: POP
67319: POP
// end ;
67320: LD_VAR 0 2
67324: RET
// export function ResetHc ; begin
67325: LD_INT 0
67327: PPUSH
// InitHc ;
67328: CALL_OW 19
// hc_importance := 0 ;
67332: LD_ADDR_OWVAR 32
67336: PUSH
67337: LD_INT 0
67339: ST_TO_ADDR
// end ;
67340: LD_VAR 0 1
67344: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67345: LD_INT 0
67347: PPUSH
67348: PPUSH
67349: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67350: LD_ADDR_VAR 0 6
67354: PUSH
67355: LD_VAR 0 1
67359: PUSH
67360: LD_VAR 0 3
67364: PLUS
67365: PUSH
67366: LD_INT 2
67368: DIV
67369: ST_TO_ADDR
// if _x < 0 then
67370: LD_VAR 0 6
67374: PUSH
67375: LD_INT 0
67377: LESS
67378: IFFALSE 67395
// _x := _x * - 1 ;
67380: LD_ADDR_VAR 0 6
67384: PUSH
67385: LD_VAR 0 6
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: MUL
67394: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67395: LD_ADDR_VAR 0 7
67399: PUSH
67400: LD_VAR 0 2
67404: PUSH
67405: LD_VAR 0 4
67409: PLUS
67410: PUSH
67411: LD_INT 2
67413: DIV
67414: ST_TO_ADDR
// if _y < 0 then
67415: LD_VAR 0 7
67419: PUSH
67420: LD_INT 0
67422: LESS
67423: IFFALSE 67440
// _y := _y * - 1 ;
67425: LD_ADDR_VAR 0 7
67429: PUSH
67430: LD_VAR 0 7
67434: PUSH
67435: LD_INT 1
67437: NEG
67438: MUL
67439: ST_TO_ADDR
// result := [ _x , _y ] ;
67440: LD_ADDR_VAR 0 5
67444: PUSH
67445: LD_VAR 0 6
67449: PUSH
67450: LD_VAR 0 7
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: ST_TO_ADDR
// end ;
67459: LD_VAR 0 5
67463: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67464: LD_INT 0
67466: PPUSH
67467: PPUSH
67468: PPUSH
67469: PPUSH
// task := GetTaskList ( unit ) ;
67470: LD_ADDR_VAR 0 7
67474: PUSH
67475: LD_VAR 0 1
67479: PPUSH
67480: CALL_OW 437
67484: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67485: LD_VAR 0 7
67489: NOT
67490: PUSH
67491: LD_VAR 0 1
67495: PPUSH
67496: LD_VAR 0 2
67500: PPUSH
67501: CALL_OW 308
67505: NOT
67506: AND
67507: IFFALSE 67511
// exit ;
67509: GO 67629
// if IsInArea ( unit , area ) then
67511: LD_VAR 0 1
67515: PPUSH
67516: LD_VAR 0 2
67520: PPUSH
67521: CALL_OW 308
67525: IFFALSE 67543
// begin ComMoveToArea ( unit , goAway ) ;
67527: LD_VAR 0 1
67531: PPUSH
67532: LD_VAR 0 3
67536: PPUSH
67537: CALL_OW 113
// exit ;
67541: GO 67629
// end ; if task [ 1 ] [ 1 ] <> M then
67543: LD_VAR 0 7
67547: PUSH
67548: LD_INT 1
67550: ARRAY
67551: PUSH
67552: LD_INT 1
67554: ARRAY
67555: PUSH
67556: LD_STRING M
67558: NONEQUAL
67559: IFFALSE 67563
// exit ;
67561: GO 67629
// x := task [ 1 ] [ 2 ] ;
67563: LD_ADDR_VAR 0 5
67567: PUSH
67568: LD_VAR 0 7
67572: PUSH
67573: LD_INT 1
67575: ARRAY
67576: PUSH
67577: LD_INT 2
67579: ARRAY
67580: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67581: LD_ADDR_VAR 0 6
67585: PUSH
67586: LD_VAR 0 7
67590: PUSH
67591: LD_INT 1
67593: ARRAY
67594: PUSH
67595: LD_INT 3
67597: ARRAY
67598: ST_TO_ADDR
// if InArea ( x , y , area ) then
67599: LD_VAR 0 5
67603: PPUSH
67604: LD_VAR 0 6
67608: PPUSH
67609: LD_VAR 0 2
67613: PPUSH
67614: CALL_OW 309
67618: IFFALSE 67629
// ComStop ( unit ) ;
67620: LD_VAR 0 1
67624: PPUSH
67625: CALL_OW 141
// end ;
67629: LD_VAR 0 4
67633: RET
// export function Abs ( value ) ; begin
67634: LD_INT 0
67636: PPUSH
// result := value ;
67637: LD_ADDR_VAR 0 2
67641: PUSH
67642: LD_VAR 0 1
67646: ST_TO_ADDR
// if value < 0 then
67647: LD_VAR 0 1
67651: PUSH
67652: LD_INT 0
67654: LESS
67655: IFFALSE 67672
// result := value * - 1 ;
67657: LD_ADDR_VAR 0 2
67661: PUSH
67662: LD_VAR 0 1
67666: PUSH
67667: LD_INT 1
67669: NEG
67670: MUL
67671: ST_TO_ADDR
// end ;
67672: LD_VAR 0 2
67676: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67677: LD_INT 0
67679: PPUSH
67680: PPUSH
67681: PPUSH
67682: PPUSH
67683: PPUSH
67684: PPUSH
67685: PPUSH
67686: PPUSH
// if not unit or not building then
67687: LD_VAR 0 1
67691: NOT
67692: PUSH
67693: LD_VAR 0 2
67697: NOT
67698: OR
67699: IFFALSE 67703
// exit ;
67701: GO 67929
// x := GetX ( building ) ;
67703: LD_ADDR_VAR 0 4
67707: PUSH
67708: LD_VAR 0 2
67712: PPUSH
67713: CALL_OW 250
67717: ST_TO_ADDR
// y := GetY ( building ) ;
67718: LD_ADDR_VAR 0 6
67722: PUSH
67723: LD_VAR 0 2
67727: PPUSH
67728: CALL_OW 251
67732: ST_TO_ADDR
// d := GetDir ( building ) ;
67733: LD_ADDR_VAR 0 8
67737: PUSH
67738: LD_VAR 0 2
67742: PPUSH
67743: CALL_OW 254
67747: ST_TO_ADDR
// r := 4 ;
67748: LD_ADDR_VAR 0 9
67752: PUSH
67753: LD_INT 4
67755: ST_TO_ADDR
// for i := 1 to 5 do
67756: LD_ADDR_VAR 0 10
67760: PUSH
67761: DOUBLE
67762: LD_INT 1
67764: DEC
67765: ST_TO_ADDR
67766: LD_INT 5
67768: PUSH
67769: FOR_TO
67770: IFFALSE 67927
// begin _x := ShiftX ( x , d , r + i ) ;
67772: LD_ADDR_VAR 0 5
67776: PUSH
67777: LD_VAR 0 4
67781: PPUSH
67782: LD_VAR 0 8
67786: PPUSH
67787: LD_VAR 0 9
67791: PUSH
67792: LD_VAR 0 10
67796: PLUS
67797: PPUSH
67798: CALL_OW 272
67802: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67803: LD_ADDR_VAR 0 7
67807: PUSH
67808: LD_VAR 0 6
67812: PPUSH
67813: LD_VAR 0 8
67817: PPUSH
67818: LD_VAR 0 9
67822: PUSH
67823: LD_VAR 0 10
67827: PLUS
67828: PPUSH
67829: CALL_OW 273
67833: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67834: LD_VAR 0 5
67838: PPUSH
67839: LD_VAR 0 7
67843: PPUSH
67844: CALL_OW 488
67848: PUSH
67849: LD_VAR 0 5
67853: PPUSH
67854: LD_VAR 0 7
67858: PPUSH
67859: CALL_OW 428
67863: PPUSH
67864: CALL_OW 247
67868: PUSH
67869: LD_INT 3
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: IN
67879: NOT
67880: AND
67881: IFFALSE 67925
// begin ComMoveXY ( unit , _x , _y ) ;
67883: LD_VAR 0 1
67887: PPUSH
67888: LD_VAR 0 5
67892: PPUSH
67893: LD_VAR 0 7
67897: PPUSH
67898: CALL_OW 111
// result := [ _x , _y ] ;
67902: LD_ADDR_VAR 0 3
67906: PUSH
67907: LD_VAR 0 5
67911: PUSH
67912: LD_VAR 0 7
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: ST_TO_ADDR
// exit ;
67921: POP
67922: POP
67923: GO 67929
// end ; end ;
67925: GO 67769
67927: POP
67928: POP
// end ;
67929: LD_VAR 0 3
67933: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67934: LD_INT 0
67936: PPUSH
67937: PPUSH
67938: PPUSH
// result := 0 ;
67939: LD_ADDR_VAR 0 3
67943: PUSH
67944: LD_INT 0
67946: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67947: LD_VAR 0 1
67951: PUSH
67952: LD_INT 0
67954: LESS
67955: PUSH
67956: LD_VAR 0 1
67960: PUSH
67961: LD_INT 8
67963: GREATER
67964: OR
67965: PUSH
67966: LD_VAR 0 2
67970: PUSH
67971: LD_INT 0
67973: LESS
67974: OR
67975: PUSH
67976: LD_VAR 0 2
67980: PUSH
67981: LD_INT 8
67983: GREATER
67984: OR
67985: IFFALSE 67989
// exit ;
67987: GO 68064
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67989: LD_ADDR_VAR 0 4
67993: PUSH
67994: LD_INT 22
67996: PUSH
67997: LD_VAR 0 2
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PPUSH
68006: CALL_OW 69
68010: PUSH
68011: FOR_IN
68012: IFFALSE 68062
// begin un := UnitShoot ( i ) ;
68014: LD_ADDR_VAR 0 5
68018: PUSH
68019: LD_VAR 0 4
68023: PPUSH
68024: CALL_OW 504
68028: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68029: LD_VAR 0 5
68033: PPUSH
68034: CALL_OW 255
68038: PUSH
68039: LD_VAR 0 1
68043: EQUAL
68044: IFFALSE 68060
// begin result := un ;
68046: LD_ADDR_VAR 0 3
68050: PUSH
68051: LD_VAR 0 5
68055: ST_TO_ADDR
// exit ;
68056: POP
68057: POP
68058: GO 68064
// end ; end ;
68060: GO 68011
68062: POP
68063: POP
// end ;
68064: LD_VAR 0 3
68068: RET
// export function GetCargoBay ( units ) ; begin
68069: LD_INT 0
68071: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68072: LD_ADDR_VAR 0 2
68076: PUSH
68077: LD_VAR 0 1
68081: PPUSH
68082: LD_INT 2
68084: PUSH
68085: LD_INT 34
68087: PUSH
68088: LD_INT 12
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 34
68097: PUSH
68098: LD_INT 51
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 34
68107: PUSH
68108: LD_INT 32
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 34
68117: PUSH
68118: LD_EXP 15
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: PPUSH
68134: CALL_OW 72
68138: ST_TO_ADDR
// end ;
68139: LD_VAR 0 2
68143: RET
// export function Negate ( value ) ; begin
68144: LD_INT 0
68146: PPUSH
// result := not value ;
68147: LD_ADDR_VAR 0 2
68151: PUSH
68152: LD_VAR 0 1
68156: NOT
68157: ST_TO_ADDR
// end ;
68158: LD_VAR 0 2
68162: RET
// export function Inc ( value ) ; begin
68163: LD_INT 0
68165: PPUSH
// result := value + 1 ;
68166: LD_ADDR_VAR 0 2
68170: PUSH
68171: LD_VAR 0 1
68175: PUSH
68176: LD_INT 1
68178: PLUS
68179: ST_TO_ADDR
// end ;
68180: LD_VAR 0 2
68184: RET
// export function Dec ( value ) ; begin
68185: LD_INT 0
68187: PPUSH
// result := value - 1 ;
68188: LD_ADDR_VAR 0 2
68192: PUSH
68193: LD_VAR 0 1
68197: PUSH
68198: LD_INT 1
68200: MINUS
68201: ST_TO_ADDR
// end ;
68202: LD_VAR 0 2
68206: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68207: LD_INT 0
68209: PPUSH
68210: PPUSH
68211: PPUSH
68212: PPUSH
68213: PPUSH
68214: PPUSH
68215: PPUSH
68216: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68217: LD_VAR 0 1
68221: PPUSH
68222: LD_VAR 0 2
68226: PPUSH
68227: CALL_OW 488
68231: NOT
68232: PUSH
68233: LD_VAR 0 3
68237: PPUSH
68238: LD_VAR 0 4
68242: PPUSH
68243: CALL_OW 488
68247: NOT
68248: OR
68249: IFFALSE 68262
// begin result := - 1 ;
68251: LD_ADDR_VAR 0 5
68255: PUSH
68256: LD_INT 1
68258: NEG
68259: ST_TO_ADDR
// exit ;
68260: GO 68497
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68262: LD_ADDR_VAR 0 12
68266: PUSH
68267: LD_VAR 0 1
68271: PPUSH
68272: LD_VAR 0 2
68276: PPUSH
68277: LD_VAR 0 3
68281: PPUSH
68282: LD_VAR 0 4
68286: PPUSH
68287: CALL 67345 0 4
68291: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68292: LD_ADDR_VAR 0 11
68296: PUSH
68297: LD_VAR 0 1
68301: PPUSH
68302: LD_VAR 0 2
68306: PPUSH
68307: LD_VAR 0 12
68311: PUSH
68312: LD_INT 1
68314: ARRAY
68315: PPUSH
68316: LD_VAR 0 12
68320: PUSH
68321: LD_INT 2
68323: ARRAY
68324: PPUSH
68325: CALL_OW 298
68329: ST_TO_ADDR
// distance := 9999 ;
68330: LD_ADDR_VAR 0 10
68334: PUSH
68335: LD_INT 9999
68337: ST_TO_ADDR
// for i := 0 to 5 do
68338: LD_ADDR_VAR 0 6
68342: PUSH
68343: DOUBLE
68344: LD_INT 0
68346: DEC
68347: ST_TO_ADDR
68348: LD_INT 5
68350: PUSH
68351: FOR_TO
68352: IFFALSE 68495
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68354: LD_ADDR_VAR 0 7
68358: PUSH
68359: LD_VAR 0 1
68363: PPUSH
68364: LD_VAR 0 6
68368: PPUSH
68369: LD_VAR 0 11
68373: PPUSH
68374: CALL_OW 272
68378: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68379: LD_ADDR_VAR 0 8
68383: PUSH
68384: LD_VAR 0 2
68388: PPUSH
68389: LD_VAR 0 6
68393: PPUSH
68394: LD_VAR 0 11
68398: PPUSH
68399: CALL_OW 273
68403: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68404: LD_VAR 0 7
68408: PPUSH
68409: LD_VAR 0 8
68413: PPUSH
68414: CALL_OW 488
68418: NOT
68419: IFFALSE 68423
// continue ;
68421: GO 68351
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68423: LD_ADDR_VAR 0 9
68427: PUSH
68428: LD_VAR 0 12
68432: PUSH
68433: LD_INT 1
68435: ARRAY
68436: PPUSH
68437: LD_VAR 0 12
68441: PUSH
68442: LD_INT 2
68444: ARRAY
68445: PPUSH
68446: LD_VAR 0 7
68450: PPUSH
68451: LD_VAR 0 8
68455: PPUSH
68456: CALL_OW 298
68460: ST_TO_ADDR
// if tmp < distance then
68461: LD_VAR 0 9
68465: PUSH
68466: LD_VAR 0 10
68470: LESS
68471: IFFALSE 68493
// begin result := i ;
68473: LD_ADDR_VAR 0 5
68477: PUSH
68478: LD_VAR 0 6
68482: ST_TO_ADDR
// distance := tmp ;
68483: LD_ADDR_VAR 0 10
68487: PUSH
68488: LD_VAR 0 9
68492: ST_TO_ADDR
// end ; end ;
68493: GO 68351
68495: POP
68496: POP
// end ;
68497: LD_VAR 0 5
68501: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68502: LD_INT 0
68504: PPUSH
68505: PPUSH
// if not driver or not IsInUnit ( driver ) then
68506: LD_VAR 0 1
68510: NOT
68511: PUSH
68512: LD_VAR 0 1
68516: PPUSH
68517: CALL_OW 310
68521: NOT
68522: OR
68523: IFFALSE 68527
// exit ;
68525: GO 68617
// vehicle := IsInUnit ( driver ) ;
68527: LD_ADDR_VAR 0 3
68531: PUSH
68532: LD_VAR 0 1
68536: PPUSH
68537: CALL_OW 310
68541: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68542: LD_VAR 0 1
68546: PPUSH
68547: LD_STRING \
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: LD_INT 0
68555: PUSH
68556: LD_INT 0
68558: PUSH
68559: LD_INT 0
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: PUSH
68577: LD_STRING E
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: LD_VAR 0 3
68590: PUSH
68591: LD_INT 0
68593: PUSH
68594: LD_INT 0
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PPUSH
68613: CALL_OW 446
// end ;
68617: LD_VAR 0 2
68621: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68622: LD_INT 0
68624: PPUSH
68625: PPUSH
// if not driver or not IsInUnit ( driver ) then
68626: LD_VAR 0 1
68630: NOT
68631: PUSH
68632: LD_VAR 0 1
68636: PPUSH
68637: CALL_OW 310
68641: NOT
68642: OR
68643: IFFALSE 68647
// exit ;
68645: GO 68737
// vehicle := IsInUnit ( driver ) ;
68647: LD_ADDR_VAR 0 3
68651: PUSH
68652: LD_VAR 0 1
68656: PPUSH
68657: CALL_OW 310
68661: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68662: LD_VAR 0 1
68666: PPUSH
68667: LD_STRING \
68669: PUSH
68670: LD_INT 0
68672: PUSH
68673: LD_INT 0
68675: PUSH
68676: LD_INT 0
68678: PUSH
68679: LD_INT 0
68681: PUSH
68682: LD_INT 0
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: PUSH
68697: LD_STRING E
68699: PUSH
68700: LD_INT 0
68702: PUSH
68703: LD_INT 0
68705: PUSH
68706: LD_VAR 0 3
68710: PUSH
68711: LD_INT 0
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PPUSH
68733: CALL_OW 447
// end ;
68737: LD_VAR 0 2
68741: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68742: LD_INT 0
68744: PPUSH
68745: PPUSH
68746: PPUSH
// tmp := [ ] ;
68747: LD_ADDR_VAR 0 5
68751: PUSH
68752: EMPTY
68753: ST_TO_ADDR
// for i in units do
68754: LD_ADDR_VAR 0 4
68758: PUSH
68759: LD_VAR 0 1
68763: PUSH
68764: FOR_IN
68765: IFFALSE 68803
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68767: LD_ADDR_VAR 0 5
68771: PUSH
68772: LD_VAR 0 5
68776: PPUSH
68777: LD_VAR 0 5
68781: PUSH
68782: LD_INT 1
68784: PLUS
68785: PPUSH
68786: LD_VAR 0 4
68790: PPUSH
68791: CALL_OW 256
68795: PPUSH
68796: CALL_OW 2
68800: ST_TO_ADDR
68801: GO 68764
68803: POP
68804: POP
// if not tmp then
68805: LD_VAR 0 5
68809: NOT
68810: IFFALSE 68814
// exit ;
68812: GO 68862
// if asc then
68814: LD_VAR 0 2
68818: IFFALSE 68842
// result := SortListByListAsc ( units , tmp ) else
68820: LD_ADDR_VAR 0 3
68824: PUSH
68825: LD_VAR 0 1
68829: PPUSH
68830: LD_VAR 0 5
68834: PPUSH
68835: CALL_OW 76
68839: ST_TO_ADDR
68840: GO 68862
// result := SortListByListDesc ( units , tmp ) ;
68842: LD_ADDR_VAR 0 3
68846: PUSH
68847: LD_VAR 0 1
68851: PPUSH
68852: LD_VAR 0 5
68856: PPUSH
68857: CALL_OW 77
68861: ST_TO_ADDR
// end ;
68862: LD_VAR 0 3
68866: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68867: LD_INT 0
68869: PPUSH
68870: PPUSH
// task := GetTaskList ( mech ) ;
68871: LD_ADDR_VAR 0 4
68875: PUSH
68876: LD_VAR 0 1
68880: PPUSH
68881: CALL_OW 437
68885: ST_TO_ADDR
// if not task then
68886: LD_VAR 0 4
68890: NOT
68891: IFFALSE 68895
// exit ;
68893: GO 68937
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68895: LD_ADDR_VAR 0 3
68899: PUSH
68900: LD_VAR 0 4
68904: PUSH
68905: LD_INT 1
68907: ARRAY
68908: PUSH
68909: LD_INT 1
68911: ARRAY
68912: PUSH
68913: LD_STRING r
68915: EQUAL
68916: PUSH
68917: LD_VAR 0 4
68921: PUSH
68922: LD_INT 1
68924: ARRAY
68925: PUSH
68926: LD_INT 4
68928: ARRAY
68929: PUSH
68930: LD_VAR 0 2
68934: EQUAL
68935: AND
68936: ST_TO_ADDR
// end ;
68937: LD_VAR 0 3
68941: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68942: LD_INT 0
68944: PPUSH
// SetDir ( unit , d ) ;
68945: LD_VAR 0 1
68949: PPUSH
68950: LD_VAR 0 4
68954: PPUSH
68955: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68959: LD_VAR 0 1
68963: PPUSH
68964: LD_VAR 0 2
68968: PPUSH
68969: LD_VAR 0 3
68973: PPUSH
68974: LD_VAR 0 5
68978: PPUSH
68979: CALL_OW 48
// end ;
68983: LD_VAR 0 6
68987: RET
// export function ToNaturalNumber ( number ) ; begin
68988: LD_INT 0
68990: PPUSH
// result := number div 1 ;
68991: LD_ADDR_VAR 0 2
68995: PUSH
68996: LD_VAR 0 1
69000: PUSH
69001: LD_INT 1
69003: DIV
69004: ST_TO_ADDR
// if number < 0 then
69005: LD_VAR 0 1
69009: PUSH
69010: LD_INT 0
69012: LESS
69013: IFFALSE 69023
// result := 0 ;
69015: LD_ADDR_VAR 0 2
69019: PUSH
69020: LD_INT 0
69022: ST_TO_ADDR
// end ;
69023: LD_VAR 0 2
69027: RET
// export function SortByClass ( units , class ) ; var un ; begin
69028: LD_INT 0
69030: PPUSH
69031: PPUSH
// if not units or not class then
69032: LD_VAR 0 1
69036: NOT
69037: PUSH
69038: LD_VAR 0 2
69042: NOT
69043: OR
69044: IFFALSE 69048
// exit ;
69046: GO 69143
// result := [ ] ;
69048: LD_ADDR_VAR 0 3
69052: PUSH
69053: EMPTY
69054: ST_TO_ADDR
// for un in units do
69055: LD_ADDR_VAR 0 4
69059: PUSH
69060: LD_VAR 0 1
69064: PUSH
69065: FOR_IN
69066: IFFALSE 69141
// if GetClass ( un ) = class then
69068: LD_VAR 0 4
69072: PPUSH
69073: CALL_OW 257
69077: PUSH
69078: LD_VAR 0 2
69082: EQUAL
69083: IFFALSE 69110
// result := Insert ( result , 1 , un ) else
69085: LD_ADDR_VAR 0 3
69089: PUSH
69090: LD_VAR 0 3
69094: PPUSH
69095: LD_INT 1
69097: PPUSH
69098: LD_VAR 0 4
69102: PPUSH
69103: CALL_OW 2
69107: ST_TO_ADDR
69108: GO 69139
// result := Replace ( result , result + 1 , un ) ;
69110: LD_ADDR_VAR 0 3
69114: PUSH
69115: LD_VAR 0 3
69119: PPUSH
69120: LD_VAR 0 3
69124: PUSH
69125: LD_INT 1
69127: PLUS
69128: PPUSH
69129: LD_VAR 0 4
69133: PPUSH
69134: CALL_OW 1
69138: ST_TO_ADDR
69139: GO 69065
69141: POP
69142: POP
// end ;
69143: LD_VAR 0 3
69147: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69148: LD_INT 0
69150: PPUSH
69151: PPUSH
69152: PPUSH
69153: PPUSH
69154: PPUSH
69155: PPUSH
69156: PPUSH
// result := [ ] ;
69157: LD_ADDR_VAR 0 4
69161: PUSH
69162: EMPTY
69163: ST_TO_ADDR
// if x - r < 0 then
69164: LD_VAR 0 1
69168: PUSH
69169: LD_VAR 0 3
69173: MINUS
69174: PUSH
69175: LD_INT 0
69177: LESS
69178: IFFALSE 69190
// min_x := 0 else
69180: LD_ADDR_VAR 0 8
69184: PUSH
69185: LD_INT 0
69187: ST_TO_ADDR
69188: GO 69206
// min_x := x - r ;
69190: LD_ADDR_VAR 0 8
69194: PUSH
69195: LD_VAR 0 1
69199: PUSH
69200: LD_VAR 0 3
69204: MINUS
69205: ST_TO_ADDR
// if y - r < 0 then
69206: LD_VAR 0 2
69210: PUSH
69211: LD_VAR 0 3
69215: MINUS
69216: PUSH
69217: LD_INT 0
69219: LESS
69220: IFFALSE 69232
// min_y := 0 else
69222: LD_ADDR_VAR 0 7
69226: PUSH
69227: LD_INT 0
69229: ST_TO_ADDR
69230: GO 69248
// min_y := y - r ;
69232: LD_ADDR_VAR 0 7
69236: PUSH
69237: LD_VAR 0 2
69241: PUSH
69242: LD_VAR 0 3
69246: MINUS
69247: ST_TO_ADDR
// max_x := x + r ;
69248: LD_ADDR_VAR 0 9
69252: PUSH
69253: LD_VAR 0 1
69257: PUSH
69258: LD_VAR 0 3
69262: PLUS
69263: ST_TO_ADDR
// max_y := y + r ;
69264: LD_ADDR_VAR 0 10
69268: PUSH
69269: LD_VAR 0 2
69273: PUSH
69274: LD_VAR 0 3
69278: PLUS
69279: ST_TO_ADDR
// for _x = min_x to max_x do
69280: LD_ADDR_VAR 0 5
69284: PUSH
69285: DOUBLE
69286: LD_VAR 0 8
69290: DEC
69291: ST_TO_ADDR
69292: LD_VAR 0 9
69296: PUSH
69297: FOR_TO
69298: IFFALSE 69399
// for _y = min_y to max_y do
69300: LD_ADDR_VAR 0 6
69304: PUSH
69305: DOUBLE
69306: LD_VAR 0 7
69310: DEC
69311: ST_TO_ADDR
69312: LD_VAR 0 10
69316: PUSH
69317: FOR_TO
69318: IFFALSE 69395
// begin if not ValidHex ( _x , _y ) then
69320: LD_VAR 0 5
69324: PPUSH
69325: LD_VAR 0 6
69329: PPUSH
69330: CALL_OW 488
69334: NOT
69335: IFFALSE 69339
// continue ;
69337: GO 69317
// if GetResourceTypeXY ( _x , _y ) then
69339: LD_VAR 0 5
69343: PPUSH
69344: LD_VAR 0 6
69348: PPUSH
69349: CALL_OW 283
69353: IFFALSE 69393
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69355: LD_ADDR_VAR 0 4
69359: PUSH
69360: LD_VAR 0 4
69364: PPUSH
69365: LD_VAR 0 4
69369: PUSH
69370: LD_INT 1
69372: PLUS
69373: PPUSH
69374: LD_VAR 0 5
69378: PUSH
69379: LD_VAR 0 6
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PPUSH
69388: CALL_OW 1
69392: ST_TO_ADDR
// end ;
69393: GO 69317
69395: POP
69396: POP
69397: GO 69297
69399: POP
69400: POP
// end ;
69401: LD_VAR 0 4
69405: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69406: LD_INT 0
69408: PPUSH
69409: PPUSH
69410: PPUSH
69411: PPUSH
69412: PPUSH
69413: PPUSH
69414: PPUSH
69415: PPUSH
// if not units then
69416: LD_VAR 0 1
69420: NOT
69421: IFFALSE 69425
// exit ;
69423: GO 69850
// result := UnitFilter ( units , [ f_ok ] ) ;
69425: LD_ADDR_VAR 0 3
69429: PUSH
69430: LD_VAR 0 1
69434: PPUSH
69435: LD_INT 50
69437: PUSH
69438: EMPTY
69439: LIST
69440: PPUSH
69441: CALL_OW 72
69445: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69446: LD_ADDR_VAR 0 8
69450: PUSH
69451: LD_VAR 0 1
69455: PUSH
69456: LD_INT 1
69458: ARRAY
69459: PPUSH
69460: CALL_OW 255
69464: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69465: LD_ADDR_VAR 0 10
69469: PUSH
69470: LD_INT 29
69472: PUSH
69473: LD_EXP 18
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: ST_TO_ADDR
// if not result then
69482: LD_VAR 0 3
69486: NOT
69487: IFFALSE 69491
// exit ;
69489: GO 69850
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69491: LD_ADDR_VAR 0 5
69495: PUSH
69496: LD_INT 81
69498: PUSH
69499: LD_VAR 0 8
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PPUSH
69508: CALL_OW 69
69512: ST_TO_ADDR
// for i in result do
69513: LD_ADDR_VAR 0 4
69517: PUSH
69518: LD_VAR 0 3
69522: PUSH
69523: FOR_IN
69524: IFFALSE 69848
// begin tag := GetTag ( i ) + 1 ;
69526: LD_ADDR_VAR 0 9
69530: PUSH
69531: LD_VAR 0 4
69535: PPUSH
69536: CALL_OW 110
69540: PUSH
69541: LD_INT 1
69543: PLUS
69544: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69545: LD_ADDR_VAR 0 7
69549: PUSH
69550: LD_VAR 0 4
69554: PPUSH
69555: CALL_OW 250
69559: PPUSH
69560: LD_VAR 0 4
69564: PPUSH
69565: CALL_OW 251
69569: PPUSH
69570: LD_INT 6
69572: PPUSH
69573: CALL 69148 0 3
69577: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69578: LD_VAR 0 7
69582: PUSH
69583: LD_VAR 0 4
69587: PPUSH
69588: CALL_OW 264
69592: PUSH
69593: LD_VAR 0 10
69597: IN
69598: NOT
69599: AND
69600: IFFALSE 69639
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69602: LD_VAR 0 4
69606: PPUSH
69607: LD_VAR 0 7
69611: PUSH
69612: LD_INT 1
69614: ARRAY
69615: PUSH
69616: LD_INT 1
69618: ARRAY
69619: PPUSH
69620: LD_VAR 0 7
69624: PUSH
69625: LD_INT 1
69627: ARRAY
69628: PUSH
69629: LD_INT 2
69631: ARRAY
69632: PPUSH
69633: CALL_OW 116
69637: GO 69846
// if path > tag then
69639: LD_VAR 0 2
69643: PUSH
69644: LD_VAR 0 9
69648: GREATER
69649: IFFALSE 69816
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69651: LD_ADDR_VAR 0 6
69655: PUSH
69656: LD_VAR 0 5
69660: PPUSH
69661: LD_INT 91
69663: PUSH
69664: LD_VAR 0 4
69668: PUSH
69669: LD_INT 12
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: LIST
69676: PPUSH
69677: CALL_OW 72
69681: ST_TO_ADDR
// if nearEnemy then
69682: LD_VAR 0 6
69686: IFFALSE 69714
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69688: LD_VAR 0 4
69692: PPUSH
69693: LD_VAR 0 6
69697: PPUSH
69698: LD_VAR 0 4
69702: PPUSH
69703: CALL_OW 74
69707: PPUSH
69708: CALL_OW 115
69712: GO 69814
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69714: LD_VAR 0 4
69718: PPUSH
69719: LD_VAR 0 2
69723: PUSH
69724: LD_VAR 0 9
69728: ARRAY
69729: PUSH
69730: LD_INT 1
69732: ARRAY
69733: PPUSH
69734: LD_VAR 0 2
69738: PUSH
69739: LD_VAR 0 9
69743: ARRAY
69744: PUSH
69745: LD_INT 2
69747: ARRAY
69748: PPUSH
69749: CALL_OW 297
69753: PUSH
69754: LD_INT 6
69756: GREATER
69757: IFFALSE 69800
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69759: LD_VAR 0 4
69763: PPUSH
69764: LD_VAR 0 2
69768: PUSH
69769: LD_VAR 0 9
69773: ARRAY
69774: PUSH
69775: LD_INT 1
69777: ARRAY
69778: PPUSH
69779: LD_VAR 0 2
69783: PUSH
69784: LD_VAR 0 9
69788: ARRAY
69789: PUSH
69790: LD_INT 2
69792: ARRAY
69793: PPUSH
69794: CALL_OW 114
69798: GO 69814
// SetTag ( i , tag ) ;
69800: LD_VAR 0 4
69804: PPUSH
69805: LD_VAR 0 9
69809: PPUSH
69810: CALL_OW 109
// end else
69814: GO 69846
// if enemy then
69816: LD_VAR 0 5
69820: IFFALSE 69846
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69822: LD_VAR 0 4
69826: PPUSH
69827: LD_VAR 0 5
69831: PPUSH
69832: LD_VAR 0 4
69836: PPUSH
69837: CALL_OW 74
69841: PPUSH
69842: CALL_OW 115
// end ;
69846: GO 69523
69848: POP
69849: POP
// end ;
69850: LD_VAR 0 3
69854: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69855: LD_INT 0
69857: PPUSH
69858: PPUSH
69859: PPUSH
// if not unit or IsInUnit ( unit ) then
69860: LD_VAR 0 1
69864: NOT
69865: PUSH
69866: LD_VAR 0 1
69870: PPUSH
69871: CALL_OW 310
69875: OR
69876: IFFALSE 69880
// exit ;
69878: GO 69971
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69880: LD_ADDR_VAR 0 4
69884: PUSH
69885: LD_VAR 0 1
69889: PPUSH
69890: CALL_OW 250
69894: PPUSH
69895: LD_VAR 0 2
69899: PPUSH
69900: LD_INT 1
69902: PPUSH
69903: CALL_OW 272
69907: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69908: LD_ADDR_VAR 0 5
69912: PUSH
69913: LD_VAR 0 1
69917: PPUSH
69918: CALL_OW 251
69922: PPUSH
69923: LD_VAR 0 2
69927: PPUSH
69928: LD_INT 1
69930: PPUSH
69931: CALL_OW 273
69935: ST_TO_ADDR
// if ValidHex ( x , y ) then
69936: LD_VAR 0 4
69940: PPUSH
69941: LD_VAR 0 5
69945: PPUSH
69946: CALL_OW 488
69950: IFFALSE 69971
// ComTurnXY ( unit , x , y ) ;
69952: LD_VAR 0 1
69956: PPUSH
69957: LD_VAR 0 4
69961: PPUSH
69962: LD_VAR 0 5
69966: PPUSH
69967: CALL_OW 118
// end ;
69971: LD_VAR 0 3
69975: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69976: LD_INT 0
69978: PPUSH
69979: PPUSH
// result := false ;
69980: LD_ADDR_VAR 0 3
69984: PUSH
69985: LD_INT 0
69987: ST_TO_ADDR
// if not units then
69988: LD_VAR 0 2
69992: NOT
69993: IFFALSE 69997
// exit ;
69995: GO 70042
// for i in units do
69997: LD_ADDR_VAR 0 4
70001: PUSH
70002: LD_VAR 0 2
70006: PUSH
70007: FOR_IN
70008: IFFALSE 70040
// if See ( side , i ) then
70010: LD_VAR 0 1
70014: PPUSH
70015: LD_VAR 0 4
70019: PPUSH
70020: CALL_OW 292
70024: IFFALSE 70038
// begin result := true ;
70026: LD_ADDR_VAR 0 3
70030: PUSH
70031: LD_INT 1
70033: ST_TO_ADDR
// exit ;
70034: POP
70035: POP
70036: GO 70042
// end ;
70038: GO 70007
70040: POP
70041: POP
// end ;
70042: LD_VAR 0 3
70046: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70047: LD_INT 0
70049: PPUSH
70050: PPUSH
70051: PPUSH
70052: PPUSH
// if not unit or not points then
70053: LD_VAR 0 1
70057: NOT
70058: PUSH
70059: LD_VAR 0 2
70063: NOT
70064: OR
70065: IFFALSE 70069
// exit ;
70067: GO 70159
// dist := 99999 ;
70069: LD_ADDR_VAR 0 5
70073: PUSH
70074: LD_INT 99999
70076: ST_TO_ADDR
// for i in points do
70077: LD_ADDR_VAR 0 4
70081: PUSH
70082: LD_VAR 0 2
70086: PUSH
70087: FOR_IN
70088: IFFALSE 70157
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70090: LD_ADDR_VAR 0 6
70094: PUSH
70095: LD_VAR 0 1
70099: PPUSH
70100: LD_VAR 0 4
70104: PUSH
70105: LD_INT 1
70107: ARRAY
70108: PPUSH
70109: LD_VAR 0 4
70113: PUSH
70114: LD_INT 2
70116: ARRAY
70117: PPUSH
70118: CALL_OW 297
70122: ST_TO_ADDR
// if tmpDist < dist then
70123: LD_VAR 0 6
70127: PUSH
70128: LD_VAR 0 5
70132: LESS
70133: IFFALSE 70155
// begin result := i ;
70135: LD_ADDR_VAR 0 3
70139: PUSH
70140: LD_VAR 0 4
70144: ST_TO_ADDR
// dist := tmpDist ;
70145: LD_ADDR_VAR 0 5
70149: PUSH
70150: LD_VAR 0 6
70154: ST_TO_ADDR
// end ; end ;
70155: GO 70087
70157: POP
70158: POP
// end ; end_of_file
70159: LD_VAR 0 3
70163: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70164: LD_VAR 0 1
70168: PUSH
70169: LD_INT 200
70171: DOUBLE
70172: GREATEREQUAL
70173: IFFALSE 70181
70175: LD_INT 299
70177: DOUBLE
70178: LESSEQUAL
70179: IFTRUE 70183
70181: GO 70215
70183: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70184: LD_VAR 0 1
70188: PPUSH
70189: LD_VAR 0 2
70193: PPUSH
70194: LD_VAR 0 3
70198: PPUSH
70199: LD_VAR 0 4
70203: PPUSH
70204: LD_VAR 0 5
70208: PPUSH
70209: CALL 25867 0 5
70213: GO 70292
70215: LD_INT 300
70217: DOUBLE
70218: GREATEREQUAL
70219: IFFALSE 70227
70221: LD_INT 399
70223: DOUBLE
70224: LESSEQUAL
70225: IFTRUE 70229
70227: GO 70291
70229: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70230: LD_VAR 0 1
70234: PPUSH
70235: LD_VAR 0 2
70239: PPUSH
70240: LD_VAR 0 3
70244: PPUSH
70245: LD_VAR 0 4
70249: PPUSH
70250: LD_VAR 0 5
70254: PPUSH
70255: LD_VAR 0 6
70259: PPUSH
70260: LD_VAR 0 7
70264: PPUSH
70265: LD_VAR 0 8
70269: PPUSH
70270: LD_VAR 0 9
70274: PPUSH
70275: LD_VAR 0 10
70279: PPUSH
70280: LD_VAR 0 11
70284: PPUSH
70285: CALL 23509 0 11
70289: GO 70292
70291: POP
// end ;
70292: PPOPN 11
70294: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70295: LD_VAR 0 1
70299: PPUSH
70300: LD_VAR 0 2
70304: PPUSH
70305: LD_VAR 0 3
70309: PPUSH
70310: LD_VAR 0 4
70314: PPUSH
70315: LD_VAR 0 5
70319: PPUSH
70320: CALL 25603 0 5
// end ; end_of_file
70324: PPOPN 5
70326: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70327: LD_VAR 0 1
70331: PPUSH
70332: LD_VAR 0 2
70336: PPUSH
70337: LD_VAR 0 3
70341: PPUSH
70342: LD_VAR 0 4
70346: PPUSH
70347: LD_VAR 0 5
70351: PPUSH
70352: LD_VAR 0 6
70356: PPUSH
70357: CALL 11202 0 6
// end ;
70361: PPOPN 6
70363: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70364: CALL 11177 0 0
// end ;
70368: PPOPN 1
70370: END
