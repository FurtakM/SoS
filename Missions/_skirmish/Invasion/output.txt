// starting begin InitSettings ;
   0: CALL 2618 0 0
// InitGame ;
   4: CALL 2656 0 0
// InitDisplay ;
   8: CALL 9205 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: IFFALSE 767
 755: PUSH
 756: LD_VAR 0 2
 760: PUSH
 761: LD_VAR 0 4
 765: GREATER
 766: AND
 767: IFFALSE 777
// result := 0 ;
 769: LD_ADDR_VAR 0 5
 773: PUSH
 774: LD_INT 0
 776: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 777: LD_VAR 0 1
 781: PUSH
 782: LD_VAR 0 3
 786: LESS
 787: IFFALSE 801
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_VAR 0 4
 799: EQUAL
 800: AND
 801: IFFALSE 811
// result := 1 ;
 803: LD_ADDR_VAR 0 5
 807: PUSH
 808: LD_INT 1
 810: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 811: LD_VAR 0 1
 815: PUSH
 816: LD_VAR 0 3
 820: LESS
 821: IFFALSE 835
 823: PUSH
 824: LD_VAR 0 2
 828: PUSH
 829: LD_VAR 0 4
 833: LESS
 834: AND
 835: IFFALSE 845
// result := 2 ;
 837: LD_ADDR_VAR 0 5
 841: PUSH
 842: LD_INT 2
 844: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 845: LD_VAR 0 1
 849: PUSH
 850: LD_VAR 0 3
 854: EQUAL
 855: IFFALSE 869
 857: PUSH
 858: LD_VAR 0 2
 862: PUSH
 863: LD_VAR 0 4
 867: LESS
 868: AND
 869: IFFALSE 879
// result := 3 ;
 871: LD_ADDR_VAR 0 5
 875: PUSH
 876: LD_INT 3
 878: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_VAR 0 3
 888: GREATER
 889: IFFALSE 903
 891: PUSH
 892: LD_VAR 0 2
 896: PUSH
 897: LD_VAR 0 4
 901: EQUAL
 902: AND
 903: IFFALSE 913
// result := 4 ;
 905: LD_ADDR_VAR 0 5
 909: PUSH
 910: LD_INT 4
 912: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 913: LD_VAR 0 1
 917: PUSH
 918: LD_VAR 0 3
 922: GREATER
 923: IFFALSE 937
 925: PUSH
 926: LD_VAR 0 2
 930: PUSH
 931: LD_VAR 0 4
 935: GREATER
 936: AND
 937: IFFALSE 947
// result := 5 ;
 939: LD_ADDR_VAR 0 5
 943: PUSH
 944: LD_INT 5
 946: ST_TO_ADDR
// end ;
 947: LD_VAR 0 5
 951: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 952: LD_INT 0
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_INT 22
 965: PUSH
 966: LD_OWVAR 2
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: LD_INT 21
 977: PUSH
 978: LD_INT 1
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PPUSH
 989: CALL_OW 69
 993: ST_TO_ADDR
// for i = 1 to amount do
 994: LD_ADDR_VAR 0 3
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_VAR 0 1
1008: PUSH
1009: FOR_TO
1010: IFFALSE 1091
// begin pep := rand ( 1 , team ) ;
1012: LD_ADDR_VAR 0 5
1016: PUSH
1017: LD_INT 1
1019: PPUSH
1020: LD_VAR 0 4
1024: PPUSH
1025: CALL_OW 12
1029: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1030: LD_VAR 0 4
1034: PUSH
1035: LD_VAR 0 5
1039: ARRAY
1040: PPUSH
1041: LD_INT 1
1043: PPUSH
1044: LD_INT 4
1046: PPUSH
1047: CALL_OW 12
1051: PPUSH
1052: LD_INT 1000
1054: PPUSH
1055: LD_INT 10000
1057: PPUSH
1058: CALL_OW 12
1062: PPUSH
1063: CALL_OW 492
// team := team diff team [ pep ] ;
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: LD_VAR 0 4
1076: PUSH
1077: LD_VAR 0 4
1081: PUSH
1082: LD_VAR 0 5
1086: ARRAY
1087: DIFF
1088: ST_TO_ADDR
// end ;
1089: GO 1009
1091: POP
1092: POP
// end ;
1093: LD_VAR 0 2
1097: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
1102: PPUSH
1103: PPUSH
1104: PPUSH
1105: PPUSH
1106: PPUSH
1107: PPUSH
1108: PPUSH
1109: PPUSH
1110: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1111: LD_ADDR_VAR 0 5
1115: PUSH
1116: LD_INT 7
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: CALL_OW 517
1126: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1127: LD_ADDR_VAR 0 6
1131: PUSH
1132: LD_INT 6
1134: PPUSH
1135: LD_INT 0
1137: PPUSH
1138: CALL_OW 517
1142: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: DOUBLE
1149: LD_INT 1
1151: DEC
1152: ST_TO_ADDR
1153: LD_VAR 0 5
1157: PUSH
1158: LD_INT 1
1160: ARRAY
1161: PUSH
1162: FOR_TO
1163: IFFALSE 1245
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_VAR 0 7
1174: PPUSH
1175: LD_VAR 0 7
1179: PUSH
1180: LD_INT 1
1182: PLUS
1183: PPUSH
1184: LD_VAR 0 5
1188: PUSH
1189: LD_INT 1
1191: ARRAY
1192: PUSH
1193: LD_VAR 0 3
1197: ARRAY
1198: PPUSH
1199: CALL_OW 1
1203: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1204: LD_ADDR_VAR 0 7
1208: PUSH
1209: LD_VAR 0 7
1213: PPUSH
1214: LD_VAR 0 7
1218: PUSH
1219: LD_INT 1
1221: PLUS
1222: PPUSH
1223: LD_VAR 0 5
1227: PUSH
1228: LD_INT 2
1230: ARRAY
1231: PUSH
1232: LD_VAR 0 3
1236: ARRAY
1237: PPUSH
1238: CALL_OW 1
1242: ST_TO_ADDR
// end ;
1243: GO 1162
1245: POP
1246: POP
// uc_side := 4 ;
1247: LD_ADDR_OWVAR 20
1251: PUSH
1252: LD_INT 4
1254: ST_TO_ADDR
// case strenght of 1 .. 10 :
1255: LD_VAR 0 1
1259: PUSH
1260: LD_INT 1
1262: DOUBLE
1263: GREATEREQUAL
1264: IFFALSE 1272
1266: LD_INT 10
1268: DOUBLE
1269: LESSEQUAL
1270: IFTRUE 1274
1272: GO 1336
1274: POP
// begin uc_nation := 0 ;
1275: LD_ADDR_OWVAR 21
1279: PUSH
1280: LD_INT 0
1282: ST_TO_ADDR
// for i = 1 to 20 do
1283: LD_ADDR_VAR 0 3
1287: PUSH
1288: DOUBLE
1289: LD_INT 1
1291: DEC
1292: ST_TO_ADDR
1293: LD_INT 20
1295: PUSH
1296: FOR_TO
1297: IFFALSE 1332
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1299: LD_INT 0
1301: PPUSH
1302: LD_INT 15
1304: PPUSH
1305: LD_VAR 0 1
1309: PPUSH
1310: CALL_OW 380
// result := result ^ CreateHuman ;
1314: LD_ADDR_VAR 0 2
1318: PUSH
1319: LD_VAR 0 2
1323: PUSH
1324: CALL_OW 44
1328: ADD
1329: ST_TO_ADDR
// end ;
1330: GO 1296
1332: POP
1333: POP
// end ; 11 .. 40 :
1334: GO 1523
1336: LD_INT 11
1338: DOUBLE
1339: GREATEREQUAL
1340: IFFALSE 1348
1342: LD_INT 40
1344: DOUBLE
1345: LESSEQUAL
1346: IFTRUE 1350
1348: GO 1429
1350: POP
// begin uc_nation := 1 ;
1351: LD_ADDR_OWVAR 21
1355: PUSH
1356: LD_INT 1
1358: ST_TO_ADDR
// for i = 1 to 20 do
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_INT 20
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1425
// begin vc_chassis := us_medium_tracked ;
1375: LD_ADDR_OWVAR 37
1379: PUSH
1380: LD_INT 3
1382: ST_TO_ADDR
// vc_engine := engine_siberite ;
1383: LD_ADDR_OWVAR 39
1387: PUSH
1388: LD_INT 3
1390: ST_TO_ADDR
// vc_control := control_computer ;
1391: LD_ADDR_OWVAR 38
1395: PUSH
1396: LD_INT 3
1398: ST_TO_ADDR
// vc_weapon := us_laser ;
1399: LD_ADDR_OWVAR 40
1403: PUSH
1404: LD_INT 9
1406: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: LD_VAR 0 2
1416: PUSH
1417: CALL_OW 45
1421: ADD
1422: ST_TO_ADDR
// end ;
1423: GO 1372
1425: POP
1426: POP
// end ; 41 .. 100 :
1427: GO 1523
1429: LD_INT 41
1431: DOUBLE
1432: GREATEREQUAL
1433: IFFALSE 1441
1435: LD_INT 100
1437: DOUBLE
1438: LESSEQUAL
1439: IFTRUE 1443
1441: GO 1522
1443: POP
// begin uc_nation := 1 ;
1444: LD_ADDR_OWVAR 21
1448: PUSH
1449: LD_INT 1
1451: ST_TO_ADDR
// for i = 1 to 20 do
1452: LD_ADDR_VAR 0 3
1456: PUSH
1457: DOUBLE
1458: LD_INT 1
1460: DEC
1461: ST_TO_ADDR
1462: LD_INT 20
1464: PUSH
1465: FOR_TO
1466: IFFALSE 1518
// begin vc_chassis := us_morphling ;
1468: LD_ADDR_OWVAR 37
1472: PUSH
1473: LD_INT 5
1475: ST_TO_ADDR
// vc_engine := engine_siberite ;
1476: LD_ADDR_OWVAR 39
1480: PUSH
1481: LD_INT 3
1483: ST_TO_ADDR
// vc_control := control_computer ;
1484: LD_ADDR_OWVAR 38
1488: PUSH
1489: LD_INT 3
1491: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1492: LD_ADDR_OWVAR 40
1496: PUSH
1497: LD_INT 10
1499: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_VAR 0 2
1509: PUSH
1510: CALL_OW 45
1514: ADD
1515: ST_TO_ADDR
// end ;
1516: GO 1465
1518: POP
1519: POP
// end ; end ;
1520: GO 1523
1522: POP
// for i in result do
1523: LD_ADDR_VAR 0 3
1527: PUSH
1528: LD_VAR 0 2
1532: PUSH
1533: FOR_IN
1534: IFFALSE 1751
// begin x := base_area [ 1 ] [ 1 ] ;
1536: LD_ADDR_VAR 0 9
1540: PUSH
1541: LD_VAR 0 6
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PUSH
1550: LD_INT 1
1552: ARRAY
1553: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1554: LD_ADDR_VAR 0 10
1558: PUSH
1559: LD_VAR 0 6
1563: PUSH
1564: LD_INT 2
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1572: LD_ADDR_VAR 0 8
1576: PUSH
1577: LD_VAR 0 7
1581: PPUSH
1582: LD_VAR 0 9
1586: PPUSH
1587: LD_VAR 0 10
1591: PPUSH
1592: CALL_OW 439
1596: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1597: LD_VAR 0 3
1601: PPUSH
1602: LD_VAR 0 9
1606: PPUSH
1607: LD_VAR 0 10
1611: PPUSH
1612: LD_VAR 0 8
1616: PUSH
1617: LD_INT 1
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 8
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PPUSH
1630: CALL 740 0 4
1634: PPUSH
1635: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1639: LD_VAR 0 3
1643: PPUSH
1644: LD_VAR 0 9
1648: PPUSH
1649: LD_VAR 0 10
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 48
// ComHold ( i ) ;
1661: LD_VAR 0 3
1665: PPUSH
1666: CALL_OW 140
// for c = 1 to 2 do
1670: LD_ADDR_VAR 0 11
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 2
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1747
// begin tmp := base_area [ c ] ;
1686: LD_ADDR_VAR 0 12
1690: PUSH
1691: LD_VAR 0 6
1695: PUSH
1696: LD_VAR 0 11
1700: ARRAY
1701: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1702: LD_ADDR_VAR 0 12
1706: PUSH
1707: LD_VAR 0 12
1711: PPUSH
1712: LD_INT 1
1714: PPUSH
1715: CALL_OW 3
1719: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1720: LD_ADDR_VAR 0 6
1724: PUSH
1725: LD_VAR 0 6
1729: PPUSH
1730: LD_VAR 0 11
1734: PPUSH
1735: LD_VAR 0 12
1739: PPUSH
1740: CALL_OW 1
1744: ST_TO_ADDR
// end ;
1745: GO 1683
1747: POP
1748: POP
// end ;
1749: GO 1533
1751: POP
1752: POP
// end ;
1753: LD_VAR 0 2
1757: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1758: LD_INT 0
1760: PPUSH
1761: PPUSH
1762: PPUSH
1763: PPUSH
1764: PPUSH
// if graveyard = 0 then
1765: LD_EXP 8
1769: PUSH
1770: LD_INT 0
1772: EQUAL
1773: IFFALSE 1777
// exit ;
1775: GO 1940
// i := rand ( 1 , graveyard ) ;
1777: LD_ADDR_VAR 0 2
1781: PUSH
1782: LD_INT 1
1784: PPUSH
1785: LD_EXP 8
1789: PPUSH
1790: CALL_OW 12
1794: ST_TO_ADDR
// un := graveyard [ i ] ;
1795: LD_ADDR_VAR 0 4
1799: PUSH
1800: LD_EXP 8
1804: PUSH
1805: LD_VAR 0 2
1809: ARRAY
1810: ST_TO_ADDR
// for c in playerSquad do
1811: LD_ADDR_VAR 0 3
1815: PUSH
1816: LD_EXP 12
1820: PUSH
1821: FOR_IN
1822: IFFALSE 1858
// if un = c [ 1 ] then
1824: LD_VAR 0 4
1828: PUSH
1829: LD_VAR 0 3
1833: PUSH
1834: LD_INT 1
1836: ARRAY
1837: EQUAL
1838: IFFALSE 1856
// begin new := c [ 2 ] ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: LD_VAR 0 3
1849: PUSH
1850: LD_INT 2
1852: ARRAY
1853: ST_TO_ADDR
// break ;
1854: GO 1858
// end ;
1856: GO 1821
1858: POP
1859: POP
// uc_side := your_side ;
1860: LD_ADDR_OWVAR 20
1864: PUSH
1865: LD_OWVAR 2
1869: ST_TO_ADDR
// uc_nation := playerNation ;
1870: LD_ADDR_OWVAR 21
1874: PUSH
1875: LD_EXP 6
1879: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1880: LD_ADDR_VAR 0 4
1884: PUSH
1885: LD_VAR 0 5
1889: PPUSH
1890: CALL_OW 34
1894: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1895: LD_VAR 0 4
1899: PPUSH
1900: LD_EXP 9
1904: PPUSH
1905: LD_EXP 10
1909: PPUSH
1910: LD_INT 10
1912: PPUSH
1913: LD_INT 1
1915: PPUSH
1916: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1920: LD_ADDR_EXP 8
1924: PUSH
1925: LD_EXP 8
1929: PPUSH
1930: LD_VAR 0 2
1934: PPUSH
1935: CALL_OW 3
1939: ST_TO_ADDR
// end ;
1940: LD_VAR 0 1
1944: RET
// export function ComEspace ( un ) ; begin
1945: LD_INT 0
1947: PPUSH
// if not IsInArea ( un , zoneOut ) then
1948: LD_VAR 0 1
1952: PPUSH
1953: LD_INT 4
1955: PPUSH
1956: CALL_OW 308
1960: NOT
1961: IFFALSE 1977
// ComMoveToArea ( un , zoneOut ) else
1963: LD_VAR 0 1
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL_OW 113
1975: GO 1986
// RemoveUnit ( un ) ;
1977: LD_VAR 0 1
1981: PPUSH
1982: CALL_OW 64
// end ;
1986: LD_VAR 0 2
1990: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1991: LD_INT 0
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
// list := AreaToList ( area , 0 ) ;
1998: LD_ADDR_VAR 0 4
2002: PUSH
2003: LD_VAR 0 2
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 517
2015: ST_TO_ADDR
// if not list then
2016: LD_VAR 0 4
2020: NOT
2021: IFFALSE 2025
// exit ;
2023: GO 2187
// for i = 1 to list do
2025: LD_ADDR_VAR 0 6
2029: PUSH
2030: DOUBLE
2031: LD_INT 1
2033: DEC
2034: ST_TO_ADDR
2035: LD_VAR 0 4
2039: PUSH
2040: FOR_TO
2041: IFFALSE 2123
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2043: LD_ADDR_VAR 0 5
2047: PUSH
2048: LD_VAR 0 5
2052: PPUSH
2053: LD_VAR 0 5
2057: PUSH
2058: LD_INT 1
2060: PLUS
2061: PPUSH
2062: LD_VAR 0 4
2066: PUSH
2067: LD_INT 1
2069: ARRAY
2070: PUSH
2071: LD_VAR 0 6
2075: ARRAY
2076: PPUSH
2077: CALL_OW 1
2081: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2082: LD_ADDR_VAR 0 5
2086: PUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_INT 1
2099: PLUS
2100: PPUSH
2101: LD_VAR 0 4
2105: PUSH
2106: LD_INT 2
2108: ARRAY
2109: PUSH
2110: LD_VAR 0 6
2114: ARRAY
2115: PPUSH
2116: CALL_OW 1
2120: ST_TO_ADDR
// end ;
2121: GO 2040
2123: POP
2124: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2125: LD_ADDR_VAR 0 7
2129: PUSH
2130: LD_VAR 0 5
2134: PPUSH
2135: LD_VAR 0 1
2139: PPUSH
2140: CALL_OW 250
2144: PPUSH
2145: LD_VAR 0 1
2149: PPUSH
2150: CALL_OW 251
2154: PPUSH
2155: CALL_OW 439
2159: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2160: LD_VAR 0 1
2164: PPUSH
2165: LD_VAR 0 7
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PPUSH
2174: LD_VAR 0 7
2178: PUSH
2179: LD_INT 2
2181: ARRAY
2182: PPUSH
2183: CALL_OW 111
// end ;
2187: LD_VAR 0 3
2191: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
// timer := rand ( 2 , 5 ) ;
2197: LD_ADDR_VAR 0 4
2201: PUSH
2202: LD_INT 2
2204: PPUSH
2205: LD_INT 5
2207: PPUSH
2208: CALL_OW 12
2212: ST_TO_ADDR
// while ( timer > 0 ) do
2213: LD_VAR 0 4
2217: PUSH
2218: LD_INT 0
2220: GREATER
2221: IFFALSE 2260
// begin SetUnitDisplayNumber ( un , timer ) ;
2223: LD_VAR 0 1
2227: PPUSH
2228: LD_VAR 0 4
2232: PPUSH
2233: CALL_OW 505
// timer := timer - 1 ;
2237: LD_ADDR_VAR 0 4
2241: PUSH
2242: LD_VAR 0 4
2246: PUSH
2247: LD_INT 1
2249: MINUS
2250: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2251: LD_INT 35
2253: PPUSH
2254: CALL_OW 67
// end ;
2258: GO 2213
// if timer = 0 then
2260: LD_VAR 0 4
2264: PUSH
2265: LD_INT 0
2267: EQUAL
2268: IFFALSE 2317
// for i = 1 to 3 do
2270: LD_ADDR_VAR 0 3
2274: PUSH
2275: DOUBLE
2276: LD_INT 1
2278: DEC
2279: ST_TO_ADDR
2280: LD_INT 3
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2315
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2286: LD_VAR 0 1
2290: PPUSH
2291: CALL_OW 250
2295: PPUSH
2296: LD_VAR 0 1
2300: PPUSH
2301: CALL_OW 251
2305: PPUSH
2306: LD_INT 10
2308: PPUSH
2309: CALL_OW 453
2313: GO 2283
2315: POP
2316: POP
// end ;
2317: LD_VAR 0 2
2321: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2322: LD_INT 0
2324: PPUSH
// if unit in unreachableList then
2325: LD_VAR 0 1
2329: PUSH
2330: LD_EXP 13
2334: IN
2335: IFFALSE 2353
// unreachableList := unreachableList diff unit ;
2337: LD_ADDR_EXP 13
2341: PUSH
2342: LD_EXP 13
2346: PUSH
2347: LD_VAR 0 1
2351: DIFF
2352: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2353: LD_VAR 0 1
2357: PPUSH
2358: LD_VAR 0 2
2362: PPUSH
2363: LD_VAR 0 3
2367: PPUSH
2368: CALL_OW 428
2372: PPUSH
2373: CALL_OW 115
// Wait ( 1 ) ;
2377: LD_INT 1
2379: PPUSH
2380: CALL_OW 67
// if unit in unreachableList then
2384: LD_VAR 0 1
2388: PUSH
2389: LD_EXP 13
2393: IN
2394: IFFALSE 2406
// result := false else
2396: LD_ADDR_VAR 0 4
2400: PUSH
2401: LD_INT 0
2403: ST_TO_ADDR
2404: GO 2414
// result := true ;
2406: LD_ADDR_VAR 0 4
2410: PUSH
2411: LD_INT 1
2413: ST_TO_ADDR
// end ;
2414: LD_VAR 0 4
2418: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2419: LD_INT 0
2421: PPUSH
2422: PPUSH
2423: PPUSH
2424: PPUSH
2425: PPUSH
2426: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2427: LD_ADDR_VAR 0 4
2431: PUSH
2432: LD_INT 81
2434: PUSH
2435: LD_VAR 0 1
2439: PPUSH
2440: CALL_OW 255
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 69
2453: ST_TO_ADDR
// if not enemy then
2454: LD_VAR 0 4
2458: NOT
2459: IFFALSE 2463
// exit ;
2461: GO 2613
// if UnitFilter ( enemy , [ f_occupied ] ) then
2463: LD_VAR 0 4
2467: PPUSH
2468: LD_INT 59
2470: PUSH
2471: EMPTY
2472: LIST
2473: PPUSH
2474: CALL_OW 72
2478: IFFALSE 2589
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2480: LD_ADDR_VAR 0 5
2484: PUSH
2485: LD_VAR 0 4
2489: PPUSH
2490: LD_INT 59
2492: PUSH
2493: EMPTY
2494: LIST
2495: PPUSH
2496: CALL_OW 72
2500: PPUSH
2501: LD_VAR 0 1
2505: PPUSH
2506: CALL_OW 74
2510: ST_TO_ADDR
// x := GetX ( t ) ;
2511: LD_ADDR_VAR 0 6
2515: PUSH
2516: LD_VAR 0 5
2520: PPUSH
2521: CALL_OW 250
2525: ST_TO_ADDR
// y := GetY ( t ) ;
2526: LD_ADDR_VAR 0 7
2530: PUSH
2531: LD_VAR 0 5
2535: PPUSH
2536: CALL_OW 251
2540: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_VAR 0 6
2550: PPUSH
2551: LD_VAR 0 7
2555: PPUSH
2556: CALL 2322 0 3
2560: NOT
2561: IFFALSE 2587
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2563: LD_VAR 0 1
2567: PPUSH
2568: LD_VAR 0 4
2572: PPUSH
2573: LD_VAR 0 1
2577: PPUSH
2578: CALL_OW 74
2582: PPUSH
2583: CALL_OW 115
// end else
2587: GO 2613
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2589: LD_VAR 0 1
2593: PPUSH
2594: LD_VAR 0 4
2598: PPUSH
2599: LD_VAR 0 1
2603: PPUSH
2604: CALL_OW 74
2608: PPUSH
2609: CALL_OW 115
// end ; end_of_file
2613: LD_VAR 0 2
2617: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2618: LD_INT 0
2620: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2621: LD_ADDR_EXP 3
2625: PUSH
2626: LD_INT 0
2628: PPUSH
2629: CALL_OW 426
2633: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2634: LD_ADDR_EXP 6
2638: PUSH
2639: LD_INT 1
2641: PPUSH
2642: CALL_OW 426
2646: PUSH
2647: LD_INT 1
2649: MINUS
2650: ST_TO_ADDR
// end ; end_of_file
2651: LD_VAR 0 1
2655: RET
// export function InitGame ; begin
2656: LD_INT 0
2658: PPUSH
// ResetFog ;
2659: CALL_OW 335
// RandomizeAll ;
2663: CALL_OW 11
// LoadColors ;
2667: CALL 495 0 0
// debug := false ;
2671: LD_ADDR_EXP 1
2675: PUSH
2676: LD_INT 0
2678: ST_TO_ADDR
// game_started := false ;
2679: LD_ADDR_EXP 7
2683: PUSH
2684: LD_INT 0
2686: ST_TO_ADDR
// points := 0 ;
2687: LD_ADDR_EXP 2
2691: PUSH
2692: LD_INT 0
2694: ST_TO_ADDR
// waveNumber := 0 ;
2695: LD_ADDR_EXP 5
2699: PUSH
2700: LD_INT 0
2702: ST_TO_ADDR
// timeToNextAttack := 0 ;
2703: LD_ADDR_EXP 4
2707: PUSH
2708: LD_INT 0
2710: ST_TO_ADDR
// graveyard := [ ] ;
2711: LD_ADDR_EXP 8
2715: PUSH
2716: EMPTY
2717: ST_TO_ADDR
// base_x := 1 ;
2718: LD_ADDR_EXP 9
2722: PUSH
2723: LD_INT 1
2725: ST_TO_ADDR
// base_y := 1 ;
2726: LD_ADDR_EXP 10
2730: PUSH
2731: LD_INT 1
2733: ST_TO_ADDR
// if difficultyLevel > 2 then
2734: LD_EXP 3
2738: PUSH
2739: LD_INT 2
2741: GREATER
2742: IFFALSE 2757
// SetTech ( 5 , 7 , state_researched ) ;
2744: LD_INT 5
2746: PPUSH
2747: LD_INT 7
2749: PPUSH
2750: LD_INT 2
2752: PPUSH
2753: CALL_OW 322
// if not playerNation then
2757: LD_EXP 6
2761: NOT
2762: IFFALSE 2788
// begin points := 100 ;
2764: LD_ADDR_EXP 2
2768: PUSH
2769: LD_INT 100
2771: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2772: LD_ADDR_EXP 6
2776: PUSH
2777: LD_INT 1
2779: PPUSH
2780: LD_INT 3
2782: PPUSH
2783: CALL_OW 12
2787: ST_TO_ADDR
// end ; your_side := playerNation ;
2788: LD_ADDR_OWVAR 2
2792: PUSH
2793: LD_EXP 6
2797: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2798: LD_OWVAR 2
2802: PPUSH
2803: LD_INT 4
2805: PPUSH
2806: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2810: LD_INT 25
2812: PUSH
2813: LD_INT 20
2815: PUSH
2816: LD_INT 15
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: PUSH
2828: LD_EXP 3
2832: ARRAY
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: LD_INT 3
2839: PUSH
2840: LD_INT 2
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: PUSH
2852: LD_EXP 3
2856: ARRAY
2857: PUSH
2858: LD_INT 5
2860: PUSH
2861: LD_INT 3
2863: PUSH
2864: LD_INT 2
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: PUSH
2876: LD_EXP 3
2880: ARRAY
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: PPUSH
2887: LD_INT 1
2889: PUSH
2890: LD_INT 2
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: PPUSH
2901: LD_INT 88
2903: PPUSH
2904: LD_INT 76
2906: PPUSH
2907: LD_INT 6
2909: PPUSH
2910: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2914: LD_EXP 6
2918: PPUSH
2919: LD_INT 9
2921: PUSH
2922: LD_INT 7
2924: PUSH
2925: LD_INT 5
2927: PUSH
2928: LD_INT 3
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: PUSH
2937: LD_EXP 3
2941: ARRAY
2942: PPUSH
2943: LD_INT 24
2945: PUSH
2946: LD_INT 16
2948: PUSH
2949: LD_INT 12
2951: PUSH
2952: LD_INT 8
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: PUSH
2961: LD_EXP 3
2965: ARRAY
2966: PPUSH
2967: LD_INT 88
2969: PPUSH
2970: LD_INT 76
2972: PPUSH
2973: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2977: LD_INT 88
2979: PPUSH
2980: LD_INT 76
2982: PPUSH
2983: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2987: LD_INT 90
2989: PPUSH
2990: LD_INT 79
2992: PPUSH
2993: LD_OWVAR 2
2997: PPUSH
2998: LD_INT 50
3000: NEG
3001: PPUSH
3002: CALL_OW 330
// if debug then
3006: LD_EXP 1
3010: IFFALSE 3021
// FogOff ( your_side ) ;
3012: LD_OWVAR 2
3016: PPUSH
3017: CALL_OW 344
// end ;
3021: LD_VAR 0 1
3025: RET
// every 0 0$01 trigger game_started do var i ;
3026: LD_EXP 7
3030: IFFALSE 3270
3032: GO 3034
3034: DISABLE
3035: LD_INT 0
3037: PPUSH
// begin while ( game_started ) do
3038: LD_EXP 7
3042: IFFALSE 3270
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3044: LD_INT 22
3046: PUSH
3047: LD_INT 7
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PPUSH
3054: CALL_OW 69
3058: PUSH
3059: LD_INT 5
3061: LESS
3062: IFFALSE 3074
3064: PUSH
3065: LD_EXP 4
3069: PUSH
3070: LD_INT 0
3072: LESSEQUAL
3073: AND
3074: IFFALSE 3261
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3076: LD_INT 22
3078: PUSH
3079: LD_INT 4
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PPUSH
3086: CALL_OW 69
3090: IFFALSE 3128
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3092: LD_ADDR_VAR 0 1
3096: PUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 4
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PPUSH
3107: CALL_OW 69
3111: PUSH
3112: FOR_IN
3113: IFFALSE 3126
// RemoveUnit ( i ) ;
3115: LD_VAR 0 1
3119: PPUSH
3120: CALL_OW 64
3124: GO 3112
3126: POP
3127: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3128: LD_EXP 5
3132: PUSH
3133: LD_INT 3
3135: MOD
3136: PUSH
3137: LD_INT 0
3139: EQUAL
3140: IFTRUE 3156
3142: PUSH
3143: LD_EXP 5
3147: PUSH
3148: LD_INT 10
3150: MOD
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: OR
3156: IFFALSE 3168
3158: PUSH
3159: LD_EXP 5
3163: PUSH
3164: LD_INT 0
3166: GREATER
3167: AND
3168: IFFALSE 3174
// InitBonus ;
3170: CALL 9302 0 0
// if waveNumber mod 10 = 0 then
3174: LD_EXP 5
3178: PUSH
3179: LD_INT 10
3181: MOD
3182: PUSH
3183: LD_INT 0
3185: EQUAL
3186: IFFALSE 3192
// SaveForQuickRestart ;
3188: CALL_OW 22
// if waveNumber = 100 then
3192: LD_EXP 5
3196: PUSH
3197: LD_INT 100
3199: EQUAL
3200: IFFALSE 3213
// begin FogOff ( your_side ) ;
3202: LD_OWVAR 2
3206: PPUSH
3207: CALL_OW 344
// break ;
3211: GO 3270
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3213: LD_ADDR_EXP 4
3217: PUSH
3218: LD_INT 3150
3220: PPUSH
3221: LD_INT 5250
3223: PPUSH
3224: CALL_OW 12
3228: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3229: LD_EXP 4
3233: PPUSH
3234: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3238: LD_ADDR_EXP 5
3242: PUSH
3243: LD_EXP 5
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3252: LD_EXP 5
3256: PPUSH
3257: CALL 4301 0 1
// end ; Wait ( 0 0$01 ) ;
3261: LD_INT 35
3263: PPUSH
3264: CALL_OW 67
// end ;
3268: GO 3038
// end ;
3270: PPOPN 1
3272: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3273: LD_EXP 4
3277: PUSH
3278: LD_INT 0
3280: GREATER
3281: IFFALSE 3301
3283: GO 3285
3285: DISABLE
// begin enable ;
3286: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3287: LD_ADDR_EXP 4
3291: PUSH
3292: LD_EXP 4
3296: PUSH
3297: LD_INT 35
3299: MINUS
3300: ST_TO_ADDR
// end ; end_of_file
3301: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3302: LD_VAR 0 1
3306: PUSH
3307: LD_EXP 13
3311: IN
3312: NOT
3313: IFFALSE 3344
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3315: LD_ADDR_EXP 13
3319: PUSH
3320: LD_EXP 13
3324: PPUSH
3325: LD_EXP 13
3329: PUSH
3330: LD_INT 1
3332: PLUS
3333: PPUSH
3334: LD_VAR 0 1
3338: PPUSH
3339: CALL_OW 2
3343: ST_TO_ADDR
// end ;
3344: PPOPN 1
3346: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3347: LD_VAR 0 1
3351: PPUSH
3352: CALL 27062 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3356: LD_VAR 0 1
3360: PPUSH
3361: CALL_OW 255
3365: PUSH
3366: LD_OWVAR 2
3370: EQUAL
3371: IFFALSE 3388
3373: PUSH
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 247
3383: PUSH
3384: LD_INT 1
3386: EQUAL
3387: AND
3388: IFFALSE 3419
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3390: LD_ADDR_EXP 8
3394: PUSH
3395: LD_EXP 8
3399: PPUSH
3400: LD_EXP 8
3404: PUSH
3405: LD_INT 1
3407: PLUS
3408: PPUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 2
3418: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: LD_INT 7
3431: EQUAL
3432: IFFALSE 3806
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 34
3441: PUSH
3442: LD_INT 91
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 69
3453: IN
3454: IFFALSE 3499
// begin if Rand ( 1 , 100 ) <= 70 then
3456: LD_INT 1
3458: PPUSH
3459: LD_INT 100
3461: PPUSH
3462: CALL_OW 12
3466: PUSH
3467: LD_INT 70
3469: LESSEQUAL
3470: IFFALSE 3499
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3472: LD_VAR 0 1
3476: PPUSH
3477: CALL_OW 250
3481: PPUSH
3482: LD_VAR 0 1
3486: PPUSH
3487: CALL_OW 251
3491: PPUSH
3492: LD_INT 10
3494: PPUSH
3495: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3499: LD_VAR 0 1
3503: PPUSH
3504: CALL_OW 247
3508: PUSH
3509: LD_INT 1
3511: DOUBLE
3512: EQUAL
3513: IFTRUE 3517
3515: GO 3651
3517: POP
// begin case GetClass ( un ) of class_apeman :
3518: LD_VAR 0 1
3522: PPUSH
3523: CALL_OW 257
3527: PUSH
3528: LD_INT 12
3530: DOUBLE
3531: EQUAL
3532: IFTRUE 3536
3534: GO 3546
3536: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3537: LD_INT 2
3539: PPUSH
3540: CALL 471 0 1
3544: GO 3649
3546: LD_INT 15
3548: DOUBLE
3549: EQUAL
3550: IFTRUE 3554
3552: GO 3564
3554: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3555: LD_INT 5
3557: PPUSH
3558: CALL 471 0 1
3562: GO 3649
3564: LD_INT 17
3566: DOUBLE
3567: EQUAL
3568: IFTRUE 3572
3570: GO 3582
3572: POP
// AddPoints ( 30 ) ; class_soldier :
3573: LD_INT 30
3575: PPUSH
3576: CALL 471 0 1
3580: GO 3649
3582: LD_INT 1
3584: DOUBLE
3585: EQUAL
3586: IFTRUE 3590
3588: GO 3600
3590: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3591: LD_INT 50
3593: PPUSH
3594: CALL 471 0 1
3598: GO 3649
3600: LD_INT 9
3602: DOUBLE
3603: EQUAL
3604: IFTRUE 3620
3606: LD_INT 5
3608: DOUBLE
3609: EQUAL
3610: IFTRUE 3620
3612: LD_INT 8
3614: DOUBLE
3615: EQUAL
3616: IFTRUE 3620
3618: GO 3630
3620: POP
// AddPoints ( 75 ) ; class_mechanic :
3621: LD_INT 75
3623: PPUSH
3624: CALL 471 0 1
3628: GO 3649
3630: LD_INT 3
3632: DOUBLE
3633: EQUAL
3634: IFTRUE 3638
3636: GO 3648
3638: POP
// AddPoints ( 60 ) ; end ;
3639: LD_INT 60
3641: PPUSH
3642: CALL 471 0 1
3646: GO 3649
3648: POP
// end ; unit_vehicle :
3649: GO 3806
3651: LD_INT 2
3653: DOUBLE
3654: EQUAL
3655: IFTRUE 3659
3657: GO 3805
3659: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3660: LD_VAR 0 1
3664: PPUSH
3665: CALL_OW 265
3669: PUSH
3670: LD_INT 12
3672: DOUBLE
3673: EQUAL
3674: IFTRUE 3690
3676: LD_INT 1
3678: DOUBLE
3679: EQUAL
3680: IFTRUE 3690
3682: LD_INT 11
3684: DOUBLE
3685: EQUAL
3686: IFTRUE 3690
3688: GO 3700
3690: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3691: LD_INT 100
3693: PPUSH
3694: CALL 471 0 1
3698: GO 3803
3700: LD_INT 13
3702: DOUBLE
3703: EQUAL
3704: IFTRUE 3738
3706: LD_INT 14
3708: DOUBLE
3709: EQUAL
3710: IFTRUE 3738
3712: LD_INT 2
3714: DOUBLE
3715: EQUAL
3716: IFTRUE 3738
3718: LD_INT 3
3720: DOUBLE
3721: EQUAL
3722: IFTRUE 3738
3724: LD_INT 21
3726: DOUBLE
3727: EQUAL
3728: IFTRUE 3738
3730: LD_INT 22
3732: DOUBLE
3733: EQUAL
3734: IFTRUE 3738
3736: GO 3748
3738: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3739: LD_INT 250
3741: PPUSH
3742: CALL 471 0 1
3746: GO 3803
3748: LD_INT 4
3750: DOUBLE
3751: EQUAL
3752: IFTRUE 3774
3754: LD_INT 5
3756: DOUBLE
3757: EQUAL
3758: IFTRUE 3774
3760: LD_INT 23
3762: DOUBLE
3763: EQUAL
3764: IFTRUE 3774
3766: LD_INT 24
3768: DOUBLE
3769: EQUAL
3770: IFTRUE 3774
3772: GO 3784
3774: POP
// AddPoints ( 500 ) ; 25 :
3775: LD_INT 500
3777: PPUSH
3778: CALL 471 0 1
3782: GO 3803
3784: LD_INT 25
3786: DOUBLE
3787: EQUAL
3788: IFTRUE 3792
3790: GO 3802
3792: POP
// AddPoints ( 1250 ) ; end ;
3793: LD_INT 1250
3795: PPUSH
3796: CALL 471 0 1
3800: GO 3803
3802: POP
// end ; end ;
3803: GO 3806
3805: POP
// end ; end ;
3806: PPOPN 1
3808: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 266
3818: PUSH
3819: LD_INT 0
3821: EQUAL
3822: IFFALSE 3872
// begin base_x := GetX ( b ) ;
3824: LD_ADDR_EXP 9
3828: PUSH
3829: LD_VAR 0 1
3833: PPUSH
3834: CALL_OW 250
3838: ST_TO_ADDR
// base_y := GetY ( b ) ;
3839: LD_ADDR_EXP 10
3843: PUSH
3844: LD_VAR 0 1
3848: PPUSH
3849: CALL_OW 251
3853: ST_TO_ADDR
// base := b ;
3854: LD_ADDR_EXP 11
3858: PUSH
3859: LD_VAR 0 1
3863: ST_TO_ADDR
// game_started := true ;
3864: LD_ADDR_EXP 7
3868: PUSH
3869: LD_INT 1
3871: ST_TO_ADDR
// end ; end ;
3872: PPOPN 1
3874: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3875: LD_VAR 0 1
3879: PPUSH
3880: CALL_OW 255
3884: PUSH
3885: LD_OWVAR 2
3889: EQUAL
3890: IFFALSE 3894
// exit ;
3892: GO 4047
// if GetType ( un ) = unit_vehicle then
3894: LD_VAR 0 1
3898: PPUSH
3899: CALL_OW 247
3903: PUSH
3904: LD_INT 2
3906: EQUAL
3907: IFFALSE 3962
// begin KillUnit ( un ) ;
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 248
3927: PUSH
3928: LD_INT 2
3930: EQUAL
3931: IFTRUE 3951
3933: PUSH
3934: LD_VAR 0 1
3938: PPUSH
3939: CALL_OW 264
3943: PUSH
3944: LD_INT 49
3946: PUSH
3947: EMPTY
3948: LIST
3949: IN
3950: OR
3951: IFFALSE 3962
// ExplodeVehicle ( un ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL 2192 0 1
// end ; if GetType ( un ) = unit_human then
3962: LD_VAR 0 1
3966: PPUSH
3967: CALL_OW 247
3971: PUSH
3972: LD_INT 1
3974: EQUAL
3975: IFFALSE 4047
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3977: LD_VAR 0 1
3981: PPUSH
3982: CALL_OW 248
3986: PUSH
3987: LD_INT 2
3989: EQUAL
3990: IFFALSE 4008
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: IFTRUE 4036
4010: PUSH
4011: LD_VAR 0 1
4015: PPUSH
4016: CALL_OW 248
4020: PUSH
4021: LD_INT 0
4023: PUSH
4024: LD_INT 1
4026: PUSH
4027: LD_INT 3
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: IN
4035: OR
4036: IFFALSE 4047
// KillUnit ( un ) ;
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 66
// end ; end ;
4047: PPOPN 1
4049: END
// every 0 0$1 do
4050: GO 4052
4052: DISABLE
// begin enable ;
4053: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4054: LD_INT 4
4056: PPUSH
4057: LD_INT 5
4059: PPUSH
4060: LD_INT 22
4062: PUSH
4063: LD_OWVAR 2
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 513
// end ;
4076: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4077: LD_EXP 7
4081: IFFALSE 4119
4083: PUSH
4084: LD_INT 22
4086: PUSH
4087: LD_OWVAR 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 21
4098: PUSH
4099: LD_INT 1
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PPUSH
4110: CALL_OW 69
4114: PUSH
4115: LD_INT 0
4117: EQUAL
4118: AND
4119: IFFALSE 4131
4121: GO 4123
4123: DISABLE
// YouLost ( die ) ;
4124: LD_STRING die
4126: PPUSH
4127: CALL_OW 104
4131: END
// every 0 0$21 trigger tick <= 15 15$00 do
4132: LD_OWVAR 1
4136: PUSH
4137: LD_INT 31500
4139: LESSEQUAL
4140: IFFALSE 4167
4142: GO 4144
4144: DISABLE
// begin enable ;
4145: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 5
4151: PPUSH
4152: CALL_OW 12
4156: PPUSH
4157: LD_INT 3
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: CALL_OW 55
// end ;
4167: END
// every 0 0$51 trigger tick > 15 15$00 do
4168: LD_OWVAR 1
4172: PUSH
4173: LD_INT 31500
4175: GREATER
4176: IFFALSE 4223
4178: GO 4180
4180: DISABLE
// begin enable ;
4181: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4182: LD_INT 22
4184: PUSH
4185: LD_INT 7
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PPUSH
4192: CALL_OW 69
4196: PUSH
4197: LD_INT 0
4199: EQUAL
4200: IFFALSE 4223
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4202: LD_INT 1
4204: PPUSH
4205: LD_INT 5
4207: PPUSH
4208: CALL_OW 12
4212: PPUSH
4213: LD_INT 3
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: CALL_OW 55
// end ;
4223: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4224: LD_VAR 0 1
4228: PPUSH
4229: LD_INT 3
4231: PPUSH
4232: CALL_OW 308
4236: IFFALSE 4247
// KillUnit ( building ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: CALL_OW 66
// end ;
4247: PPOPN 2
4249: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_VAR 0 2
4259: PPUSH
4260: LD_VAR 0 3
4264: PPUSH
4265: CALL 27096 0 3
// end ;
4269: PPOPN 3
4271: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4272: LD_VAR 0 1
4276: PPUSH
4277: LD_VAR 0 2
4281: PPUSH
4282: CALL 27120 0 2
// end ;
4286: PPOPN 2
4288: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4289: LD_VAR 0 1
4293: PPUSH
4294: CALL 27104 0 1
// end ; end_of_file
4298: PPOPN 1
4300: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4301: LD_INT 0
4303: PPUSH
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
4308: PPUSH
4309: PPUSH
4310: PPUSH
4311: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4312: LD_ADDR_VAR 0 7
4316: PUSH
4317: LD_INT 1
4319: PUSH
4320: LD_INT 2
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: ST_TO_ADDR
// uc_side := 7 ;
4327: LD_ADDR_OWVAR 20
4331: PUSH
4332: LD_INT 7
4334: ST_TO_ADDR
// l := 0 ;
4335: LD_ADDR_VAR 0 9
4339: PUSH
4340: LD_INT 0
4342: ST_TO_ADDR
// case num of 1 :
4343: LD_VAR 0 1
4347: PUSH
4348: LD_INT 1
4350: DOUBLE
4351: EQUAL
4352: IFTRUE 4356
4354: GO 4375
4356: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4357: LD_ADDR_VAR 0 2
4361: PUSH
4362: LD_INT 12
4364: PPUSH
4365: LD_INT 1
4367: PPUSH
4368: CALL 6704 0 2
4372: ST_TO_ADDR
4373: GO 6513
4375: LD_INT 2
4377: DOUBLE
4378: EQUAL
4379: IFTRUE 4383
4381: GO 4402
4383: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4384: LD_ADDR_VAR 0 2
4388: PUSH
4389: LD_INT 12
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL 6775 0 2
4399: ST_TO_ADDR
4400: GO 6513
4402: LD_INT 3
4404: DOUBLE
4405: EQUAL
4406: IFTRUE 4410
4408: GO 4429
4410: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4411: LD_ADDR_VAR 0 2
4415: PUSH
4416: LD_INT 12
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL 6846 0 2
4426: ST_TO_ADDR
4427: GO 6513
4429: LD_INT 4
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 4456
4437: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: LD_INT 7
4445: PPUSH
4446: LD_INT 1
4448: PPUSH
4449: CALL 6925 0 2
4453: ST_TO_ADDR
4454: GO 6513
4456: LD_INT 5
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4483
4464: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4465: LD_ADDR_VAR 0 2
4469: PUSH
4470: LD_INT 7
4472: PPUSH
4473: LD_INT 1
4475: PPUSH
4476: CALL 7321 0 2
4480: ST_TO_ADDR
4481: GO 6513
4483: LD_INT 6
4485: DOUBLE
4486: EQUAL
4487: IFTRUE 4491
4489: GO 4510
4491: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_INT 6
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: CALL 7741 0 2
4507: ST_TO_ADDR
4508: GO 6513
4510: LD_INT 7
4512: DOUBLE
4513: EQUAL
4514: IFTRUE 4518
4516: GO 4537
4518: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4519: LD_ADDR_VAR 0 2
4523: PUSH
4524: LD_INT 15
4526: PPUSH
4527: LD_INT 1
4529: PPUSH
4530: CALL 8161 0 2
4534: ST_TO_ADDR
4535: GO 6513
4537: LD_INT 8
4539: DOUBLE
4540: EQUAL
4541: IFTRUE 4545
4543: GO 4564
4545: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4546: LD_ADDR_VAR 0 2
4550: PUSH
4551: LD_INT 7
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: CALL 8262 0 2
4561: ST_TO_ADDR
4562: GO 6513
4564: LD_INT 9
4566: DOUBLE
4567: EQUAL
4568: IFTRUE 4572
4570: GO 4603
4572: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4573: LD_ADDR_VAR 0 2
4577: PUSH
4578: LD_INT 4
4580: PPUSH
4581: LD_INT 1
4583: PPUSH
4584: CALL 8262 0 2
4588: PUSH
4589: LD_INT 7
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: CALL 7321 0 2
4599: ADD
4600: ST_TO_ADDR
4601: GO 6513
4603: LD_INT 10
4605: DOUBLE
4606: EQUAL
4607: IFTRUE 4611
4609: GO 4642
4611: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4612: LD_ADDR_VAR 0 2
4616: PUSH
4617: LD_INT 9
4619: PPUSH
4620: LD_INT 1
4622: PPUSH
4623: CALL 8161 0 2
4627: PUSH
4628: LD_INT 14
4630: PPUSH
4631: LD_INT 1
4633: PPUSH
4634: CALL 6846 0 2
4638: ADD
4639: ST_TO_ADDR
4640: GO 6513
4642: LD_INT 11
4644: DOUBLE
4645: EQUAL
4646: IFTRUE 4698
4648: LD_INT 21
4650: DOUBLE
4651: EQUAL
4652: IFTRUE 4698
4654: LD_INT 31
4656: DOUBLE
4657: EQUAL
4658: IFTRUE 4698
4660: LD_INT 41
4662: DOUBLE
4663: EQUAL
4664: IFTRUE 4698
4666: LD_INT 51
4668: DOUBLE
4669: EQUAL
4670: IFTRUE 4698
4672: LD_INT 61
4674: DOUBLE
4675: EQUAL
4676: IFTRUE 4698
4678: LD_INT 71
4680: DOUBLE
4681: EQUAL
4682: IFTRUE 4698
4684: LD_INT 81
4686: DOUBLE
4687: EQUAL
4688: IFTRUE 4698
4690: LD_INT 91
4692: DOUBLE
4693: EQUAL
4694: IFTRUE 4698
4696: GO 4807
4698: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4699: LD_ADDR_VAR 0 2
4703: PUSH
4704: LD_INT 20
4706: PUSH
4707: LD_INT 30
4709: PUSH
4710: LD_INT 40
4712: PUSH
4713: LD_INT 45
4715: PUSH
4716: LD_INT 50
4718: PUSH
4719: LD_INT 60
4721: PUSH
4722: LD_INT 70
4724: PUSH
4725: LD_INT 80
4727: PUSH
4728: LD_INT 100
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: LD_VAR 0 1
4746: PUSH
4747: LD_INT 10
4749: DIV
4750: ARRAY
4751: PPUSH
4752: LD_INT 2
4754: PUSH
4755: LD_INT 3
4757: PUSH
4758: LD_INT 4
4760: PUSH
4761: LD_INT 5
4763: PUSH
4764: LD_INT 6
4766: PUSH
4767: LD_INT 7
4769: PUSH
4770: LD_INT 8
4772: PUSH
4773: LD_INT 9
4775: PUSH
4776: LD_INT 10
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: LD_VAR 0 1
4794: PUSH
4795: LD_INT 10
4797: DIV
4798: ARRAY
4799: PPUSH
4800: CALL 6704 0 2
4804: ST_TO_ADDR
4805: GO 6513
4807: LD_INT 12
4809: DOUBLE
4810: EQUAL
4811: IFTRUE 4863
4813: LD_INT 22
4815: DOUBLE
4816: EQUAL
4817: IFTRUE 4863
4819: LD_INT 32
4821: DOUBLE
4822: EQUAL
4823: IFTRUE 4863
4825: LD_INT 42
4827: DOUBLE
4828: EQUAL
4829: IFTRUE 4863
4831: LD_INT 52
4833: DOUBLE
4834: EQUAL
4835: IFTRUE 4863
4837: LD_INT 62
4839: DOUBLE
4840: EQUAL
4841: IFTRUE 4863
4843: LD_INT 72
4845: DOUBLE
4846: EQUAL
4847: IFTRUE 4863
4849: LD_INT 82
4851: DOUBLE
4852: EQUAL
4853: IFTRUE 4863
4855: LD_INT 92
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4972
4863: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4864: LD_ADDR_VAR 0 2
4868: PUSH
4869: LD_INT 16
4871: PUSH
4872: LD_INT 21
4874: PUSH
4875: LD_INT 28
4877: PUSH
4878: LD_INT 33
4880: PUSH
4881: LD_INT 39
4883: PUSH
4884: LD_INT 46
4886: PUSH
4887: LD_INT 56
4889: PUSH
4890: LD_INT 66
4892: PUSH
4893: LD_INT 80
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: PUSH
4907: LD_VAR 0 1
4911: PUSH
4912: LD_INT 10
4914: DIV
4915: ARRAY
4916: PPUSH
4917: LD_INT 2
4919: PUSH
4920: LD_INT 3
4922: PUSH
4923: LD_INT 4
4925: PUSH
4926: LD_INT 5
4928: PUSH
4929: LD_INT 6
4931: PUSH
4932: LD_INT 7
4934: PUSH
4935: LD_INT 8
4937: PUSH
4938: LD_INT 9
4940: PUSH
4941: LD_INT 10
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: PUSH
4955: LD_VAR 0 1
4959: PUSH
4960: LD_INT 10
4962: DIV
4963: ARRAY
4964: PPUSH
4965: CALL 6775 0 2
4969: ST_TO_ADDR
4970: GO 6513
4972: LD_INT 13
4974: DOUBLE
4975: EQUAL
4976: IFTRUE 5028
4978: LD_INT 23
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 5028
4984: LD_INT 33
4986: DOUBLE
4987: EQUAL
4988: IFTRUE 5028
4990: LD_INT 43
4992: DOUBLE
4993: EQUAL
4994: IFTRUE 5028
4996: LD_INT 53
4998: DOUBLE
4999: EQUAL
5000: IFTRUE 5028
5002: LD_INT 63
5004: DOUBLE
5005: EQUAL
5006: IFTRUE 5028
5008: LD_INT 73
5010: DOUBLE
5011: EQUAL
5012: IFTRUE 5028
5014: LD_INT 83
5016: DOUBLE
5017: EQUAL
5018: IFTRUE 5028
5020: LD_INT 93
5022: DOUBLE
5023: EQUAL
5024: IFTRUE 5028
5026: GO 5137
5028: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5029: LD_ADDR_VAR 0 2
5033: PUSH
5034: LD_INT 14
5036: PUSH
5037: LD_INT 18
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 27
5045: PUSH
5046: LD_INT 33
5048: PUSH
5049: LD_INT 39
5051: PUSH
5052: LD_INT 44
5054: PUSH
5055: LD_INT 57
5057: PUSH
5058: LD_INT 65
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: PUSH
5072: LD_VAR 0 1
5076: PUSH
5077: LD_INT 10
5079: DIV
5080: ARRAY
5081: PPUSH
5082: LD_INT 2
5084: PUSH
5085: LD_INT 3
5087: PUSH
5088: LD_INT 4
5090: PUSH
5091: LD_INT 5
5093: PUSH
5094: LD_INT 6
5096: PUSH
5097: LD_INT 7
5099: PUSH
5100: LD_INT 8
5102: PUSH
5103: LD_INT 9
5105: PUSH
5106: LD_INT 10
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: PUSH
5120: LD_VAR 0 1
5124: PUSH
5125: LD_INT 10
5127: DIV
5128: ARRAY
5129: PPUSH
5130: CALL 6846 0 2
5134: ST_TO_ADDR
5135: GO 6513
5137: LD_INT 14
5139: DOUBLE
5140: EQUAL
5141: IFTRUE 5193
5143: LD_INT 24
5145: DOUBLE
5146: EQUAL
5147: IFTRUE 5193
5149: LD_INT 34
5151: DOUBLE
5152: EQUAL
5153: IFTRUE 5193
5155: LD_INT 44
5157: DOUBLE
5158: EQUAL
5159: IFTRUE 5193
5161: LD_INT 54
5163: DOUBLE
5164: EQUAL
5165: IFTRUE 5193
5167: LD_INT 64
5169: DOUBLE
5170: EQUAL
5171: IFTRUE 5193
5173: LD_INT 74
5175: DOUBLE
5176: EQUAL
5177: IFTRUE 5193
5179: LD_INT 84
5181: DOUBLE
5182: EQUAL
5183: IFTRUE 5193
5185: LD_INT 94
5187: DOUBLE
5188: EQUAL
5189: IFTRUE 5193
5191: GO 5302
5193: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5194: LD_ADDR_VAR 0 2
5198: PUSH
5199: LD_INT 9
5201: PUSH
5202: LD_INT 15
5204: PUSH
5205: LD_INT 22
5207: PUSH
5208: LD_INT 30
5210: PUSH
5211: LD_INT 39
5213: PUSH
5214: LD_INT 45
5216: PUSH
5217: LD_INT 56
5219: PUSH
5220: LD_INT 60
5222: PUSH
5223: LD_INT 65
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: PUSH
5237: LD_VAR 0 1
5241: PUSH
5242: LD_INT 10
5244: DIV
5245: ARRAY
5246: PPUSH
5247: LD_INT 2
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: LD_INT 4
5255: PUSH
5256: LD_INT 5
5258: PUSH
5259: LD_INT 6
5261: PUSH
5262: LD_INT 7
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: PUSH
5285: LD_VAR 0 1
5289: PUSH
5290: LD_INT 10
5292: DIV
5293: ARRAY
5294: PPUSH
5295: CALL 6925 0 2
5299: ST_TO_ADDR
5300: GO 6513
5302: LD_INT 15
5304: DOUBLE
5305: EQUAL
5306: IFTRUE 5358
5308: LD_INT 25
5310: DOUBLE
5311: EQUAL
5312: IFTRUE 5358
5314: LD_INT 35
5316: DOUBLE
5317: EQUAL
5318: IFTRUE 5358
5320: LD_INT 45
5322: DOUBLE
5323: EQUAL
5324: IFTRUE 5358
5326: LD_INT 55
5328: DOUBLE
5329: EQUAL
5330: IFTRUE 5358
5332: LD_INT 65
5334: DOUBLE
5335: EQUAL
5336: IFTRUE 5358
5338: LD_INT 75
5340: DOUBLE
5341: EQUAL
5342: IFTRUE 5358
5344: LD_INT 85
5346: DOUBLE
5347: EQUAL
5348: IFTRUE 5358
5350: LD_INT 95
5352: DOUBLE
5353: EQUAL
5354: IFTRUE 5358
5356: GO 5467
5358: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5359: LD_ADDR_VAR 0 2
5363: PUSH
5364: LD_INT 6
5366: PUSH
5367: LD_INT 11
5369: PUSH
5370: LD_INT 15
5372: PUSH
5373: LD_INT 20
5375: PUSH
5376: LD_INT 25
5378: PUSH
5379: LD_INT 30
5381: PUSH
5382: LD_INT 35
5384: PUSH
5385: LD_INT 40
5387: PUSH
5388: LD_INT 45
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: PUSH
5402: LD_VAR 0 1
5406: PUSH
5407: LD_INT 10
5409: DIV
5410: ARRAY
5411: PPUSH
5412: LD_INT 2
5414: PUSH
5415: LD_INT 3
5417: PUSH
5418: LD_INT 4
5420: PUSH
5421: LD_INT 5
5423: PUSH
5424: LD_INT 6
5426: PUSH
5427: LD_INT 7
5429: PUSH
5430: LD_INT 8
5432: PUSH
5433: LD_INT 9
5435: PUSH
5436: LD_INT 10
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_VAR 0 1
5454: PUSH
5455: LD_INT 10
5457: DIV
5458: ARRAY
5459: PPUSH
5460: CALL 7321 0 2
5464: ST_TO_ADDR
5465: GO 6513
5467: LD_INT 16
5469: DOUBLE
5470: EQUAL
5471: IFTRUE 5523
5473: LD_INT 26
5475: DOUBLE
5476: EQUAL
5477: IFTRUE 5523
5479: LD_INT 36
5481: DOUBLE
5482: EQUAL
5483: IFTRUE 5523
5485: LD_INT 46
5487: DOUBLE
5488: EQUAL
5489: IFTRUE 5523
5491: LD_INT 56
5493: DOUBLE
5494: EQUAL
5495: IFTRUE 5523
5497: LD_INT 66
5499: DOUBLE
5500: EQUAL
5501: IFTRUE 5523
5503: LD_INT 76
5505: DOUBLE
5506: EQUAL
5507: IFTRUE 5523
5509: LD_INT 86
5511: DOUBLE
5512: EQUAL
5513: IFTRUE 5523
5515: LD_INT 96
5517: DOUBLE
5518: EQUAL
5519: IFTRUE 5523
5521: GO 5632
5523: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5524: LD_ADDR_VAR 0 2
5528: PUSH
5529: LD_INT 9
5531: PUSH
5532: LD_INT 12
5534: PUSH
5535: LD_INT 15
5537: PUSH
5538: LD_INT 18
5540: PUSH
5541: LD_INT 21
5543: PUSH
5544: LD_INT 24
5546: PUSH
5547: LD_INT 27
5549: PUSH
5550: LD_INT 30
5552: PUSH
5553: LD_INT 33
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_VAR 0 1
5571: PUSH
5572: LD_INT 10
5574: DIV
5575: ARRAY
5576: PPUSH
5577: LD_INT 2
5579: PUSH
5580: LD_INT 3
5582: PUSH
5583: LD_INT 4
5585: PUSH
5586: LD_INT 5
5588: PUSH
5589: LD_INT 6
5591: PUSH
5592: LD_INT 7
5594: PUSH
5595: LD_INT 8
5597: PUSH
5598: LD_INT 9
5600: PUSH
5601: LD_INT 10
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: PUSH
5615: LD_VAR 0 1
5619: PUSH
5620: LD_INT 10
5622: DIV
5623: ARRAY
5624: PPUSH
5625: CALL 7741 0 2
5629: ST_TO_ADDR
5630: GO 6513
5632: LD_INT 17
5634: DOUBLE
5635: EQUAL
5636: IFTRUE 5688
5638: LD_INT 27
5640: DOUBLE
5641: EQUAL
5642: IFTRUE 5688
5644: LD_INT 37
5646: DOUBLE
5647: EQUAL
5648: IFTRUE 5688
5650: LD_INT 47
5652: DOUBLE
5653: EQUAL
5654: IFTRUE 5688
5656: LD_INT 57
5658: DOUBLE
5659: EQUAL
5660: IFTRUE 5688
5662: LD_INT 67
5664: DOUBLE
5665: EQUAL
5666: IFTRUE 5688
5668: LD_INT 77
5670: DOUBLE
5671: EQUAL
5672: IFTRUE 5688
5674: LD_INT 87
5676: DOUBLE
5677: EQUAL
5678: IFTRUE 5688
5680: LD_INT 97
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5797
5688: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5689: LD_ADDR_VAR 0 2
5693: PUSH
5694: LD_INT 14
5696: PUSH
5697: LD_INT 16
5699: PUSH
5700: LD_INT 18
5702: PUSH
5703: LD_INT 22
5705: PUSH
5706: LD_INT 24
5708: PUSH
5709: LD_INT 26
5711: PUSH
5712: LD_INT 28
5714: PUSH
5715: LD_INT 32
5717: PUSH
5718: LD_INT 35
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: PUSH
5732: LD_VAR 0 1
5736: PUSH
5737: LD_INT 10
5739: DIV
5740: ARRAY
5741: PPUSH
5742: LD_INT 2
5744: PUSH
5745: LD_INT 3
5747: PUSH
5748: LD_INT 4
5750: PUSH
5751: LD_INT 5
5753: PUSH
5754: LD_INT 6
5756: PUSH
5757: LD_INT 7
5759: PUSH
5760: LD_INT 8
5762: PUSH
5763: LD_INT 9
5765: PUSH
5766: LD_INT 10
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: PUSH
5780: LD_VAR 0 1
5784: PUSH
5785: LD_INT 10
5787: DIV
5788: ARRAY
5789: PPUSH
5790: CALL 8161 0 2
5794: ST_TO_ADDR
5795: GO 6513
5797: LD_INT 18
5799: DOUBLE
5800: EQUAL
5801: IFTRUE 5853
5803: LD_INT 28
5805: DOUBLE
5806: EQUAL
5807: IFTRUE 5853
5809: LD_INT 38
5811: DOUBLE
5812: EQUAL
5813: IFTRUE 5853
5815: LD_INT 48
5817: DOUBLE
5818: EQUAL
5819: IFTRUE 5853
5821: LD_INT 58
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5853
5827: LD_INT 68
5829: DOUBLE
5830: EQUAL
5831: IFTRUE 5853
5833: LD_INT 78
5835: DOUBLE
5836: EQUAL
5837: IFTRUE 5853
5839: LD_INT 88
5841: DOUBLE
5842: EQUAL
5843: IFTRUE 5853
5845: LD_INT 98
5847: DOUBLE
5848: EQUAL
5849: IFTRUE 5853
5851: GO 5962
5853: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5854: LD_ADDR_VAR 0 2
5858: PUSH
5859: LD_INT 9
5861: PUSH
5862: LD_INT 12
5864: PUSH
5865: LD_INT 15
5867: PUSH
5868: LD_INT 18
5870: PUSH
5871: LD_INT 21
5873: PUSH
5874: LD_INT 24
5876: PUSH
5877: LD_INT 27
5879: PUSH
5880: LD_INT 30
5882: PUSH
5883: LD_INT 33
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PUSH
5897: LD_VAR 0 1
5901: PUSH
5902: LD_INT 10
5904: DIV
5905: ARRAY
5906: PPUSH
5907: LD_INT 2
5909: PUSH
5910: LD_INT 3
5912: PUSH
5913: LD_INT 4
5915: PUSH
5916: LD_INT 5
5918: PUSH
5919: LD_INT 6
5921: PUSH
5922: LD_INT 7
5924: PUSH
5925: LD_INT 8
5927: PUSH
5928: LD_INT 9
5930: PUSH
5931: LD_INT 10
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: PUSH
5945: LD_VAR 0 1
5949: PUSH
5950: LD_INT 10
5952: DIV
5953: ARRAY
5954: PPUSH
5955: CALL 8262 0 2
5959: ST_TO_ADDR
5960: GO 6513
5962: LD_INT 19
5964: DOUBLE
5965: EQUAL
5966: IFTRUE 6018
5968: LD_INT 29
5970: DOUBLE
5971: EQUAL
5972: IFTRUE 6018
5974: LD_INT 39
5976: DOUBLE
5977: EQUAL
5978: IFTRUE 6018
5980: LD_INT 49
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 6018
5986: LD_INT 59
5988: DOUBLE
5989: EQUAL
5990: IFTRUE 6018
5992: LD_INT 69
5994: DOUBLE
5995: EQUAL
5996: IFTRUE 6018
5998: LD_INT 79
6000: DOUBLE
6001: EQUAL
6002: IFTRUE 6018
6004: LD_INT 89
6006: DOUBLE
6007: EQUAL
6008: IFTRUE 6018
6010: LD_INT 99
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6229
6018: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
6019: LD_ADDR_VAR 0 2
6023: PUSH
6024: LD_INT 4
6026: PUSH
6027: LD_INT 7
6029: PUSH
6030: LD_INT 10
6032: PUSH
6033: LD_INT 13
6035: PUSH
6036: LD_INT 14
6038: PUSH
6039: LD_INT 17
6041: PUSH
6042: LD_INT 19
6044: PUSH
6045: LD_INT 21
6047: PUSH
6048: LD_INT 23
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PUSH
6062: LD_VAR 0 1
6066: PUSH
6067: LD_INT 10
6069: DIV
6070: ARRAY
6071: PPUSH
6072: LD_INT 2
6074: PUSH
6075: LD_INT 3
6077: PUSH
6078: LD_INT 4
6080: PUSH
6081: LD_INT 5
6083: PUSH
6084: LD_INT 6
6086: PUSH
6087: LD_INT 7
6089: PUSH
6090: LD_INT 8
6092: PUSH
6093: LD_INT 9
6095: PUSH
6096: LD_INT 10
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_VAR 0 1
6114: PUSH
6115: LD_INT 10
6117: DIV
6118: ARRAY
6119: PPUSH
6120: CALL 8262 0 2
6124: PUSH
6125: LD_INT 4
6127: PUSH
6128: LD_INT 7
6130: PUSH
6131: LD_INT 10
6133: PUSH
6134: LD_INT 13
6136: PUSH
6137: LD_INT 14
6139: PUSH
6140: LD_INT 17
6142: PUSH
6143: LD_INT 19
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 25
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_VAR 0 1
6167: PUSH
6168: LD_INT 10
6170: DIV
6171: ARRAY
6172: PPUSH
6173: LD_INT 2
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: LD_INT 4
6181: PUSH
6182: LD_INT 5
6184: PUSH
6185: LD_INT 6
6187: PUSH
6188: LD_INT 7
6190: PUSH
6191: LD_INT 8
6193: PUSH
6194: LD_INT 9
6196: PUSH
6197: LD_INT 10
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_VAR 0 1
6215: PUSH
6216: LD_INT 10
6218: DIV
6219: ARRAY
6220: PPUSH
6221: CALL 7321 0 2
6225: ADD
6226: ST_TO_ADDR
6227: GO 6513
6229: LD_INT 20
6231: DOUBLE
6232: EQUAL
6233: IFTRUE 6285
6235: LD_INT 30
6237: DOUBLE
6238: EQUAL
6239: IFTRUE 6285
6241: LD_INT 40
6243: DOUBLE
6244: EQUAL
6245: IFTRUE 6285
6247: LD_INT 50
6249: DOUBLE
6250: EQUAL
6251: IFTRUE 6285
6253: LD_INT 60
6255: DOUBLE
6256: EQUAL
6257: IFTRUE 6285
6259: LD_INT 70
6261: DOUBLE
6262: EQUAL
6263: IFTRUE 6285
6265: LD_INT 80
6267: DOUBLE
6268: EQUAL
6269: IFTRUE 6285
6271: LD_INT 90
6273: DOUBLE
6274: EQUAL
6275: IFTRUE 6285
6277: LD_INT 100
6279: DOUBLE
6280: EQUAL
6281: IFTRUE 6285
6283: GO 6512
6285: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6286: LD_ADDR_VAR 0 2
6290: PUSH
6291: LD_INT 4
6293: PUSH
6294: LD_INT 7
6296: PUSH
6297: LD_INT 10
6299: PUSH
6300: LD_INT 13
6302: PUSH
6303: LD_INT 14
6305: PUSH
6306: LD_INT 17
6308: PUSH
6309: LD_INT 19
6311: PUSH
6312: LD_INT 21
6314: PUSH
6315: LD_INT 23
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_VAR 0 1
6333: PUSH
6334: LD_INT 10
6336: DIVREAL
6337: PUSH
6338: LD_INT 1
6340: MINUS
6341: ARRAY
6342: PPUSH
6343: LD_INT 2
6345: PUSH
6346: LD_INT 3
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 5
6354: PUSH
6355: LD_INT 6
6357: PUSH
6358: LD_INT 7
6360: PUSH
6361: LD_INT 8
6363: PUSH
6364: LD_INT 9
6366: PUSH
6367: LD_INT 10
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: PUSH
6381: LD_VAR 0 1
6385: PUSH
6386: LD_INT 10
6388: DIVREAL
6389: PUSH
6390: LD_INT 1
6392: MINUS
6393: ARRAY
6394: PPUSH
6395: CALL 8161 0 2
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: LD_INT 7
6405: PUSH
6406: LD_INT 10
6408: PUSH
6409: LD_INT 13
6411: PUSH
6412: LD_INT 14
6414: PUSH
6415: LD_INT 17
6417: PUSH
6418: LD_INT 19
6420: PUSH
6421: LD_INT 22
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_VAR 0 1
6442: PUSH
6443: LD_INT 10
6445: DIVREAL
6446: PUSH
6447: LD_INT 1
6449: MINUS
6450: ARRAY
6451: PPUSH
6452: LD_INT 2
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: LD_INT 4
6460: PUSH
6461: LD_INT 5
6463: PUSH
6464: LD_INT 6
6466: PUSH
6467: LD_INT 7
6469: PUSH
6470: LD_INT 8
6472: PUSH
6473: LD_INT 9
6475: PUSH
6476: LD_INT 10
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: LD_VAR 0 1
6494: PUSH
6495: LD_INT 10
6497: DIVREAL
6498: PUSH
6499: LD_INT 1
6501: MINUS
6502: ARRAY
6503: PPUSH
6504: CALL 7741 0 2
6508: ADD
6509: ST_TO_ADDR
6510: GO 6513
6512: POP
// for i in result do
6513: LD_ADDR_VAR 0 3
6517: PUSH
6518: LD_VAR 0 2
6522: PUSH
6523: FOR_IN
6524: IFFALSE 6697
// begin a := rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 8
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if a = 1 then
6542: LD_VAR 0 8
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( i , 3 ) else
6552: LD_VAR 0 3
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( i , 5 ) ;
6566: LD_VAR 0 3
6570: PPUSH
6571: LD_INT 5
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6578: LD_VAR 0 3
6582: PPUSH
6583: LD_VAR 0 7
6587: PUSH
6588: LD_VAR 0 8
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// if GetControl ( i ) = control_manual then
6601: LD_VAR 0 3
6605: PPUSH
6606: CALL_OW 263
6610: PUSH
6611: LD_INT 1
6613: EQUAL
6614: IFFALSE 6660
// begin uc_nation := GetNation ( i ) ;
6616: LD_ADDR_OWVAR 21
6620: PUSH
6621: LD_VAR 0 3
6625: PPUSH
6626: CALL_OW 248
6630: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6631: LD_INT 0
6633: PPUSH
6634: LD_INT 3
6636: PPUSH
6637: LD_VAR 0 5
6641: PPUSH
6642: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6646: CALL_OW 44
6650: PPUSH
6651: LD_VAR 0 3
6655: PPUSH
6656: CALL_OW 52
// end ; l := l + 1 ;
6660: LD_ADDR_VAR 0 9
6664: PUSH
6665: LD_VAR 0 9
6669: PUSH
6670: LD_INT 1
6672: PLUS
6673: ST_TO_ADDR
// if l mod 10 = 0 then
6674: LD_VAR 0 9
6678: PUSH
6679: LD_INT 10
6681: MOD
6682: PUSH
6683: LD_INT 0
6685: EQUAL
6686: IFFALSE 6695
// Wait ( 0 0$02 ) ;
6688: LD_INT 70
6690: PPUSH
6691: CALL_OW 67
// end ;
6695: GO 6523
6697: POP
6698: POP
// end ;
6699: LD_VAR 0 2
6703: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6704: LD_INT 0
6706: PPUSH
6707: PPUSH
6708: PPUSH
// uc_nation := nation_nature ;
6709: LD_ADDR_OWVAR 21
6713: PUSH
6714: LD_INT 0
6716: ST_TO_ADDR
// for i = 1 to n do
6717: LD_ADDR_VAR 0 4
6721: PUSH
6722: DOUBLE
6723: LD_INT 1
6725: DEC
6726: ST_TO_ADDR
6727: LD_VAR 0 1
6731: PUSH
6732: FOR_TO
6733: IFFALSE 6768
// begin PrepareHuman ( false , class_apeman , skill ) ;
6735: LD_INT 0
6737: PPUSH
6738: LD_INT 12
6740: PPUSH
6741: LD_VAR 0 2
6745: PPUSH
6746: CALL_OW 380
// result := result ^ CreateHuman ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 3
6759: PUSH
6760: CALL_OW 44
6764: ADD
6765: ST_TO_ADDR
// end ;
6766: GO 6732
6768: POP
6769: POP
// end ;
6770: LD_VAR 0 3
6774: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6775: LD_INT 0
6777: PPUSH
6778: PPUSH
6779: PPUSH
// uc_nation := nation_nature ;
6780: LD_ADDR_OWVAR 21
6784: PUSH
6785: LD_INT 0
6787: ST_TO_ADDR
// for i = 1 to n do
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: DOUBLE
6794: LD_INT 1
6796: DEC
6797: ST_TO_ADDR
6798: LD_VAR 0 1
6802: PUSH
6803: FOR_TO
6804: IFFALSE 6839
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6806: LD_INT 0
6808: PPUSH
6809: LD_INT 15
6811: PPUSH
6812: LD_VAR 0 2
6816: PPUSH
6817: CALL_OW 380
// result := result ^ CreateHuman ;
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_VAR 0 3
6830: PUSH
6831: CALL_OW 44
6835: ADD
6836: ST_TO_ADDR
// end ;
6837: GO 6803
6839: POP
6840: POP
// end ;
6841: LD_VAR 0 3
6845: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6846: LD_INT 0
6848: PPUSH
6849: PPUSH
6850: PPUSH
// for i = 1 to n do
6851: LD_ADDR_VAR 0 4
6855: PUSH
6856: DOUBLE
6857: LD_INT 1
6859: DEC
6860: ST_TO_ADDR
6861: LD_VAR 0 1
6865: PUSH
6866: FOR_TO
6867: IFFALSE 6918
// begin uc_nation := rand ( 1 , 3 ) ;
6869: LD_ADDR_OWVAR 21
6873: PUSH
6874: LD_INT 1
6876: PPUSH
6877: LD_INT 3
6879: PPUSH
6880: CALL_OW 12
6884: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6885: LD_INT 0
6887: PPUSH
6888: LD_INT 1
6890: PPUSH
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 380
// result := result ^ CreateHuman ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_VAR 0 3
6909: PUSH
6910: CALL_OW 44
6914: ADD
6915: ST_TO_ADDR
// end ;
6916: GO 6866
6918: POP
6919: POP
// end ;
6920: LD_VAR 0 3
6924: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6925: LD_INT 0
6927: PPUSH
6928: PPUSH
6929: PPUSH
6930: PPUSH
6931: PPUSH
6932: PPUSH
6933: PPUSH
// for i = 1 to n do
6934: LD_ADDR_VAR 0 4
6938: PUSH
6939: DOUBLE
6940: LD_INT 1
6942: DEC
6943: ST_TO_ADDR
6944: LD_VAR 0 1
6948: PUSH
6949: FOR_TO
6950: IFFALSE 7314
// begin uc_nation := rand ( 1 , 3 ) ;
6952: LD_ADDR_OWVAR 21
6956: PUSH
6957: LD_INT 1
6959: PPUSH
6960: LD_INT 3
6962: PPUSH
6963: CALL_OW 12
6967: ST_TO_ADDR
// case uc_nation of 1 :
6968: LD_OWVAR 21
6972: PUSH
6973: LD_INT 1
6975: DOUBLE
6976: EQUAL
6977: IFTRUE 6981
6979: GO 7044
6981: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6982: LD_ADDR_VAR 0 6
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6997: LD_ADDR_VAR 0 7
7001: PUSH
7002: LD_INT 2
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7012: LD_ADDR_VAR 0 8
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: LD_INT 3
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7027: LD_ADDR_VAR 0 9
7031: PUSH
7032: LD_INT 1
7034: PUSH
7035: LD_INT 2
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: ST_TO_ADDR
// end ; 2 :
7042: GO 7179
7044: LD_INT 2
7046: DOUBLE
7047: EQUAL
7048: IFTRUE 7052
7050: GO 7115
7052: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7053: LD_ADDR_VAR 0 6
7057: PUSH
7058: LD_INT 12
7060: PUSH
7061: LD_INT 11
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7068: LD_ADDR_VAR 0 7
7072: PUSH
7073: LD_INT 23
7075: PUSH
7076: LD_INT 24
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7083: LD_ADDR_VAR 0 8
7087: PUSH
7088: LD_INT 1
7090: PUSH
7091: LD_INT 5
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7098: LD_ADDR_VAR 0 9
7102: PUSH
7103: LD_INT 1
7105: PUSH
7106: LD_INT 2
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: ST_TO_ADDR
// end ; 3 :
7113: GO 7179
7115: LD_INT 3
7117: DOUBLE
7118: EQUAL
7119: IFTRUE 7123
7121: GO 7178
7123: POP
// begin chassis := [ ru_medium_wheeled ] ;
7124: LD_ADDR_VAR 0 6
7128: PUSH
7129: LD_INT 21
7131: PUSH
7132: EMPTY
7133: LIST
7134: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7135: LD_ADDR_VAR 0 7
7139: PUSH
7140: LD_INT 42
7142: PUSH
7143: LD_INT 44
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7150: LD_ADDR_VAR 0 8
7154: PUSH
7155: LD_INT 1
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7165: LD_ADDR_VAR 0 9
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: ST_TO_ADDR
// end ; end ;
7176: GO 7179
7178: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7179: LD_ADDR_OWVAR 37
7183: PUSH
7184: LD_VAR 0 6
7188: PUSH
7189: LD_INT 1
7191: PPUSH
7192: LD_VAR 0 6
7196: PPUSH
7197: CALL_OW 12
7201: ARRAY
7202: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7203: LD_ADDR_OWVAR 39
7207: PUSH
7208: LD_VAR 0 9
7212: PUSH
7213: LD_INT 1
7215: PPUSH
7216: LD_VAR 0 9
7220: PPUSH
7221: CALL_OW 12
7225: ARRAY
7226: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7227: LD_ADDR_OWVAR 38
7231: PUSH
7232: LD_VAR 0 8
7236: PUSH
7237: LD_INT 1
7239: PPUSH
7240: LD_VAR 0 8
7244: PPUSH
7245: CALL_OW 12
7249: ARRAY
7250: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7251: LD_ADDR_OWVAR 40
7255: PUSH
7256: LD_VAR 0 7
7260: PUSH
7261: LD_INT 1
7263: PPUSH
7264: LD_VAR 0 7
7268: PPUSH
7269: CALL_OW 12
7273: ARRAY
7274: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7275: LD_ADDR_OWVAR 41
7279: PUSH
7280: LD_INT 100
7282: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: LD_VAR 0 3
7292: PPUSH
7293: LD_VAR 0 3
7297: PUSH
7298: LD_INT 1
7300: PLUS
7301: PPUSH
7302: CALL_OW 45
7306: PPUSH
7307: CALL_OW 2
7311: ST_TO_ADDR
// end ;
7312: GO 6949
7314: POP
7315: POP
// end ;
7316: LD_VAR 0 3
7320: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7321: LD_INT 0
7323: PPUSH
7324: PPUSH
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
// for i = 1 to n do
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: DOUBLE
7336: LD_INT 1
7338: DEC
7339: ST_TO_ADDR
7340: LD_VAR 0 1
7344: PUSH
7345: FOR_TO
7346: IFFALSE 7734
// begin uc_nation := rand ( 1 , 3 ) ;
7348: LD_ADDR_OWVAR 21
7352: PUSH
7353: LD_INT 1
7355: PPUSH
7356: LD_INT 3
7358: PPUSH
7359: CALL_OW 12
7363: ST_TO_ADDR
// case uc_nation of 1 :
7364: LD_OWVAR 21
7368: PUSH
7369: LD_INT 1
7371: DOUBLE
7372: EQUAL
7373: IFTRUE 7377
7375: GO 7448
7377: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_INT 2
7385: PUSH
7386: LD_INT 3
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_INT 4
7400: PUSH
7401: LD_INT 5
7403: PUSH
7404: LD_INT 9
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: LIST
7411: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7412: LD_ADDR_VAR 0 8
7416: PUSH
7417: LD_INT 1
7419: PUSH
7420: LD_INT 3
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7427: LD_ADDR_VAR 0 9
7431: PUSH
7432: LD_INT 1
7434: PUSH
7435: LD_INT 2
7437: PUSH
7438: LD_INT 3
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: ST_TO_ADDR
// end ; 2 :
7446: GO 7599
7448: LD_INT 2
7450: DOUBLE
7451: EQUAL
7452: IFTRUE 7456
7454: GO 7527
7456: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7457: LD_ADDR_VAR 0 6
7461: PUSH
7462: LD_INT 13
7464: PUSH
7465: LD_INT 14
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7472: LD_ADDR_VAR 0 7
7476: PUSH
7477: LD_INT 27
7479: PUSH
7480: LD_INT 26
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: LIST
7490: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7491: LD_ADDR_VAR 0 8
7495: PUSH
7496: LD_INT 1
7498: PUSH
7499: LD_INT 5
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7506: LD_ADDR_VAR 0 9
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 3
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: ST_TO_ADDR
// end ; 3 :
7525: GO 7599
7527: LD_INT 3
7529: DOUBLE
7530: EQUAL
7531: IFTRUE 7535
7533: GO 7598
7535: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7536: LD_ADDR_VAR 0 6
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 21
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7551: LD_ADDR_VAR 0 7
7555: PUSH
7556: LD_INT 44
7558: PUSH
7559: LD_INT 43
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7566: LD_ADDR_VAR 0 8
7570: PUSH
7571: LD_INT 1
7573: PUSH
7574: LD_INT 3
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7581: LD_ADDR_VAR 0 9
7585: PUSH
7586: LD_INT 1
7588: PUSH
7589: LD_INT 3
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: ST_TO_ADDR
// end ; end ;
7596: GO 7599
7598: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7599: LD_ADDR_OWVAR 37
7603: PUSH
7604: LD_VAR 0 6
7608: PUSH
7609: LD_INT 1
7611: PPUSH
7612: LD_VAR 0 6
7616: PPUSH
7617: CALL_OW 12
7621: ARRAY
7622: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7623: LD_ADDR_OWVAR 39
7627: PUSH
7628: LD_VAR 0 9
7632: PUSH
7633: LD_INT 1
7635: PPUSH
7636: LD_VAR 0 9
7640: PPUSH
7641: CALL_OW 12
7645: ARRAY
7646: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7647: LD_ADDR_OWVAR 38
7651: PUSH
7652: LD_VAR 0 8
7656: PUSH
7657: LD_INT 1
7659: PPUSH
7660: LD_VAR 0 8
7664: PPUSH
7665: CALL_OW 12
7669: ARRAY
7670: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7671: LD_ADDR_OWVAR 40
7675: PUSH
7676: LD_VAR 0 7
7680: PUSH
7681: LD_INT 1
7683: PPUSH
7684: LD_VAR 0 7
7688: PPUSH
7689: CALL_OW 12
7693: ARRAY
7694: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7695: LD_ADDR_OWVAR 41
7699: PUSH
7700: LD_INT 100
7702: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7703: LD_ADDR_VAR 0 3
7707: PUSH
7708: LD_VAR 0 3
7712: PPUSH
7713: LD_VAR 0 3
7717: PUSH
7718: LD_INT 1
7720: PLUS
7721: PPUSH
7722: CALL_OW 45
7726: PPUSH
7727: CALL_OW 2
7731: ST_TO_ADDR
// end ;
7732: GO 7345
7734: POP
7735: POP
// end ;
7736: LD_VAR 0 3
7740: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7741: LD_INT 0
7743: PPUSH
7744: PPUSH
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
7749: PPUSH
// for i = 1 to n do
7750: LD_ADDR_VAR 0 4
7754: PUSH
7755: DOUBLE
7756: LD_INT 1
7758: DEC
7759: ST_TO_ADDR
7760: LD_VAR 0 1
7764: PUSH
7765: FOR_TO
7766: IFFALSE 8154
// begin uc_nation := rand ( 1 , 3 ) ;
7768: LD_ADDR_OWVAR 21
7772: PUSH
7773: LD_INT 1
7775: PPUSH
7776: LD_INT 3
7778: PPUSH
7779: CALL_OW 12
7783: ST_TO_ADDR
// case uc_nation of 1 :
7784: LD_OWVAR 21
7788: PUSH
7789: LD_INT 1
7791: DOUBLE
7792: EQUAL
7793: IFTRUE 7797
7795: GO 7864
7797: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7798: LD_ADDR_VAR 0 6
7802: PUSH
7803: LD_INT 4
7805: PUSH
7806: LD_INT 5
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7813: LD_ADDR_VAR 0 7
7817: PUSH
7818: LD_INT 6
7820: PUSH
7821: LD_INT 7
7823: PUSH
7824: LD_INT 9
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7832: LD_ADDR_VAR 0 8
7836: PUSH
7837: LD_INT 1
7839: PUSH
7840: LD_INT 3
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7847: LD_ADDR_VAR 0 9
7851: PUSH
7852: LD_INT 1
7854: PUSH
7855: LD_INT 3
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: ST_TO_ADDR
// end ; 2 :
7862: GO 8019
7864: LD_INT 2
7866: DOUBLE
7867: EQUAL
7868: IFTRUE 7872
7870: GO 7947
7872: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7873: LD_ADDR_VAR 0 6
7877: PUSH
7878: LD_INT 13
7880: PUSH
7881: LD_INT 14
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7888: LD_ADDR_VAR 0 7
7892: PUSH
7893: LD_INT 27
7895: PUSH
7896: LD_INT 26
7898: PUSH
7899: LD_INT 28
7901: PUSH
7902: LD_INT 29
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7911: LD_ADDR_VAR 0 8
7915: PUSH
7916: LD_INT 1
7918: PUSH
7919: LD_INT 5
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7926: LD_ADDR_VAR 0 9
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: LD_INT 2
7936: PUSH
7937: LD_INT 3
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: LIST
7944: ST_TO_ADDR
// end ; 3 :
7945: GO 8019
7947: LD_INT 3
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 8018
7955: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7956: LD_ADDR_VAR 0 6
7960: PUSH
7961: LD_INT 23
7963: PUSH
7964: LD_INT 24
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7971: LD_ADDR_VAR 0 7
7975: PUSH
7976: LD_INT 46
7978: PUSH
7979: LD_INT 45
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7986: LD_ADDR_VAR 0 8
7990: PUSH
7991: LD_INT 1
7993: PUSH
7994: LD_INT 3
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8001: LD_ADDR_VAR 0 9
8005: PUSH
8006: LD_INT 1
8008: PUSH
8009: LD_INT 3
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: ST_TO_ADDR
// end ; end ;
8016: GO 8019
8018: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8019: LD_ADDR_OWVAR 37
8023: PUSH
8024: LD_VAR 0 6
8028: PUSH
8029: LD_INT 1
8031: PPUSH
8032: LD_VAR 0 6
8036: PPUSH
8037: CALL_OW 12
8041: ARRAY
8042: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8043: LD_ADDR_OWVAR 39
8047: PUSH
8048: LD_VAR 0 9
8052: PUSH
8053: LD_INT 1
8055: PPUSH
8056: LD_VAR 0 9
8060: PPUSH
8061: CALL_OW 12
8065: ARRAY
8066: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8067: LD_ADDR_OWVAR 38
8071: PUSH
8072: LD_VAR 0 8
8076: PUSH
8077: LD_INT 1
8079: PPUSH
8080: LD_VAR 0 8
8084: PPUSH
8085: CALL_OW 12
8089: ARRAY
8090: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8091: LD_ADDR_OWVAR 40
8095: PUSH
8096: LD_VAR 0 7
8100: PUSH
8101: LD_INT 1
8103: PPUSH
8104: LD_VAR 0 7
8108: PPUSH
8109: CALL_OW 12
8113: ARRAY
8114: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8115: LD_ADDR_OWVAR 41
8119: PUSH
8120: LD_INT 100
8122: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8123: LD_ADDR_VAR 0 3
8127: PUSH
8128: LD_VAR 0 3
8132: PPUSH
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 1
8140: PLUS
8141: PPUSH
8142: CALL_OW 45
8146: PPUSH
8147: CALL_OW 2
8151: ST_TO_ADDR
// end ;
8152: GO 7765
8154: POP
8155: POP
// end ;
8156: LD_VAR 0 3
8160: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8161: LD_INT 0
8163: PPUSH
8164: PPUSH
// for i = 1 to n do
8165: LD_ADDR_VAR 0 4
8169: PUSH
8170: DOUBLE
8171: LD_INT 1
8173: DEC
8174: ST_TO_ADDR
8175: LD_VAR 0 1
8179: PUSH
8180: FOR_TO
8181: IFFALSE 8255
// begin uc_nation := rand ( 1 , 3 ) ;
8183: LD_ADDR_OWVAR 21
8187: PUSH
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8199: LD_INT 0
8201: PPUSH
8202: LD_INT 8
8204: PUSH
8205: LD_INT 9
8207: PUSH
8208: LD_INT 1
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 1
8218: PPUSH
8219: LD_INT 3
8221: PPUSH
8222: CALL_OW 12
8226: ARRAY
8227: PPUSH
8228: LD_VAR 0 2
8232: PPUSH
8233: CALL_OW 380
// result := result ^ CreateHuman ;
8237: LD_ADDR_VAR 0 3
8241: PUSH
8242: LD_VAR 0 3
8246: PUSH
8247: CALL_OW 44
8251: ADD
8252: ST_TO_ADDR
// end ;
8253: GO 8180
8255: POP
8256: POP
// end ;
8257: LD_VAR 0 3
8261: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// for i = 1 to n do
8271: LD_ADDR_VAR 0 4
8275: PUSH
8276: DOUBLE
8277: LD_INT 1
8279: DEC
8280: ST_TO_ADDR
8281: LD_VAR 0 1
8285: PUSH
8286: FOR_TO
8287: IFFALSE 8679
// begin uc_nation := rand ( 1 , 3 ) ;
8289: LD_ADDR_OWVAR 21
8293: PUSH
8294: LD_INT 1
8296: PPUSH
8297: LD_INT 3
8299: PPUSH
8300: CALL_OW 12
8304: ST_TO_ADDR
// case uc_nation of 1 :
8305: LD_OWVAR 21
8309: PUSH
8310: LD_INT 1
8312: DOUBLE
8313: EQUAL
8314: IFTRUE 8318
8316: GO 8389
8318: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8319: LD_ADDR_VAR 0 6
8323: PUSH
8324: LD_INT 4
8326: PUSH
8327: LD_INT 5
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8334: LD_ADDR_VAR 0 7
8338: PUSH
8339: LD_INT 6
8341: PUSH
8342: LD_INT 7
8344: PUSH
8345: LD_INT 10
8347: PUSH
8348: LD_INT 97
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8357: LD_ADDR_VAR 0 8
8361: PUSH
8362: LD_INT 1
8364: PUSH
8365: LD_INT 3
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8372: LD_ADDR_VAR 0 9
8376: PUSH
8377: LD_INT 1
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: ST_TO_ADDR
// end ; 2 :
8387: GO 8544
8389: LD_INT 2
8391: DOUBLE
8392: EQUAL
8393: IFTRUE 8397
8395: GO 8468
8397: POP
// begin chassis := [ ar_half_tracked ] ;
8398: LD_ADDR_VAR 0 6
8402: PUSH
8403: LD_INT 14
8405: PUSH
8406: EMPTY
8407: LIST
8408: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8409: LD_ADDR_VAR 0 7
8413: PUSH
8414: LD_INT 91
8416: PUSH
8417: LD_INT 26
8419: PUSH
8420: LD_INT 28
8422: PUSH
8423: LD_INT 29
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8432: LD_ADDR_VAR 0 8
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: LD_INT 5
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8447: LD_ADDR_VAR 0 9
8451: PUSH
8452: LD_INT 1
8454: PUSH
8455: LD_INT 2
8457: PUSH
8458: LD_INT 3
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: ST_TO_ADDR
// end ; 3 :
8466: GO 8544
8468: LD_INT 3
8470: DOUBLE
8471: EQUAL
8472: IFTRUE 8476
8474: GO 8543
8476: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8477: LD_ADDR_VAR 0 6
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 24
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8492: LD_ADDR_VAR 0 7
8496: PUSH
8497: LD_INT 46
8499: PUSH
8500: LD_INT 45
8502: PUSH
8503: LD_INT 49
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8511: LD_ADDR_VAR 0 8
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: LD_INT 3
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8526: LD_ADDR_VAR 0 9
8530: PUSH
8531: LD_INT 1
8533: PUSH
8534: LD_INT 3
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: ST_TO_ADDR
// end ; end ;
8541: GO 8544
8543: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8544: LD_ADDR_OWVAR 37
8548: PUSH
8549: LD_VAR 0 6
8553: PUSH
8554: LD_INT 1
8556: PPUSH
8557: LD_VAR 0 6
8561: PPUSH
8562: CALL_OW 12
8566: ARRAY
8567: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8568: LD_ADDR_OWVAR 39
8572: PUSH
8573: LD_VAR 0 9
8577: PUSH
8578: LD_INT 1
8580: PPUSH
8581: LD_VAR 0 9
8585: PPUSH
8586: CALL_OW 12
8590: ARRAY
8591: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8592: LD_ADDR_OWVAR 38
8596: PUSH
8597: LD_VAR 0 8
8601: PUSH
8602: LD_INT 1
8604: PPUSH
8605: LD_VAR 0 8
8609: PPUSH
8610: CALL_OW 12
8614: ARRAY
8615: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8616: LD_ADDR_OWVAR 40
8620: PUSH
8621: LD_VAR 0 7
8625: PUSH
8626: LD_INT 1
8628: PPUSH
8629: LD_VAR 0 7
8633: PPUSH
8634: CALL_OW 12
8638: ARRAY
8639: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8640: LD_ADDR_OWVAR 41
8644: PUSH
8645: LD_INT 100
8647: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_VAR 0 3
8657: PPUSH
8658: LD_VAR 0 3
8662: PUSH
8663: LD_INT 1
8665: PLUS
8666: PPUSH
8667: CALL_OW 45
8671: PPUSH
8672: CALL_OW 2
8676: ST_TO_ADDR
// end ;
8677: GO 8286
8679: POP
8680: POP
// end ; end_of_file
8681: LD_VAR 0 3
8685: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8686: LD_INT 22
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PPUSH
8696: CALL_OW 69
8700: IFFALSE 9202
8702: GO 8704
8704: DISABLE
8705: LD_INT 0
8707: PPUSH
8708: PPUSH
8709: PPUSH
// begin enable ;
8710: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8711: LD_ADDR_VAR 0 3
8715: PUSH
8716: LD_INT 22
8718: PUSH
8719: LD_INT 7
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PPUSH
8726: CALL_OW 69
8730: ST_TO_ADDR
// for i in tmp do
8731: LD_ADDR_VAR 0 1
8735: PUSH
8736: LD_VAR 0 3
8740: PUSH
8741: FOR_IN
8742: IFFALSE 9200
// begin case GetType ( i ) of unit_human :
8744: LD_VAR 0 1
8748: PPUSH
8749: CALL_OW 247
8753: PUSH
8754: LD_INT 1
8756: DOUBLE
8757: EQUAL
8758: IFTRUE 8762
8760: GO 8963
8762: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL_OW 256
8772: PUSH
8773: LD_INT 250
8775: LESS
8776: IFFALSE 8794
8778: PUSH
8779: LD_INT 5
8781: PPUSH
8782: LD_INT 7
8784: PPUSH
8785: CALL_OW 321
8789: PUSH
8790: LD_INT 2
8792: NONEQUAL
8793: AND
8794: IFFALSE 8798
// continue ;
8796: GO 8741
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL_OW 257
8807: PUSH
8808: LD_INT 12
8810: PUSH
8811: LD_INT 15
8813: PUSH
8814: LD_INT 16
8816: PUSH
8817: LD_INT 17
8819: PUSH
8820: LD_INT 1
8822: PUSH
8823: LD_INT 5
8825: PUSH
8826: LD_INT 6
8828: PUSH
8829: LD_INT 7
8831: PUSH
8832: LD_INT 8
8834: PUSH
8835: LD_INT 9
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: IN
8850: IFFALSE 8888
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8852: LD_VAR 0 1
8856: PPUSH
8857: LD_INT 22
8859: PUSH
8860: LD_OWVAR 2
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 69
8873: PPUSH
8874: LD_VAR 0 1
8878: PPUSH
8879: CALL_OW 74
8883: PPUSH
8884: CALL_OW 115
// if GetClass ( i ) = 3 then
8888: LD_VAR 0 1
8892: PPUSH
8893: CALL_OW 257
8897: PUSH
8898: LD_INT 3
8900: EQUAL
8901: IFFALSE 8961
// if IsInUnit ( i ) then
8903: LD_VAR 0 1
8907: PPUSH
8908: CALL_OW 310
8912: IFFALSE 8952
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8914: LD_VAR 0 1
8918: PPUSH
8919: LD_INT 22
8921: PUSH
8922: LD_OWVAR 2
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 69
8935: PPUSH
8936: LD_VAR 0 1
8940: PPUSH
8941: CALL_OW 74
8945: PPUSH
8946: CALL_OW 115
8950: GO 8961
// ComEspace ( i ) ;
8952: LD_VAR 0 1
8956: PPUSH
8957: CALL 1945 0 1
// end ; unit_vehicle :
8961: GO 9198
8963: LD_INT 2
8965: DOUBLE
8966: EQUAL
8967: IFTRUE 8971
8969: GO 9197
8971: POP
// begin if GetLives ( i ) > 250 then
8972: LD_VAR 0 1
8976: PPUSH
8977: CALL_OW 256
8981: PUSH
8982: LD_INT 250
8984: GREATER
8985: IFFALSE 9195
// begin if GetWeapon ( i ) = us_artillery then
8987: LD_VAR 0 1
8991: PPUSH
8992: CALL_OW 264
8996: PUSH
8997: LD_INT 97
8999: EQUAL
9000: IFFALSE 9068
// begin if IsInArea ( i , zoneOut ) then
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 4
9009: PPUSH
9010: CALL_OW 308
9014: IFFALSE 9030
// ComMoveToArea ( i , zoneBorder ) else
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_INT 9
9023: PPUSH
9024: CALL_OW 113
9028: GO 9066
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: LD_INT 22
9037: PUSH
9038: LD_OWVAR 2
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 69
9051: PPUSH
9052: LD_VAR 0 1
9056: PPUSH
9057: CALL_OW 74
9061: PPUSH
9062: CALL_OW 115
// end else
9066: GO 9195
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9068: LD_VAR 0 1
9072: PPUSH
9073: CALL_OW 264
9077: PUSH
9078: LD_INT 11
9080: PUSH
9081: LD_INT 30
9083: PUSH
9084: LD_INT 98
9086: PUSH
9087: LD_INT 49
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: IN
9096: IFFALSE 9126
// begin if IsInArea ( i , zoneOut ) then
9098: LD_VAR 0 1
9102: PPUSH
9103: LD_INT 4
9105: PPUSH
9106: CALL_OW 308
9110: IFFALSE 9124
// ComSpecMove ( i , specPos ) ;
9112: LD_VAR 0 1
9116: PPUSH
9117: LD_INT 8
9119: PPUSH
9120: CALL 1991 0 2
// end else
9124: GO 9195
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9126: LD_VAR 0 1
9130: PPUSH
9131: CALL_OW 264
9135: PUSH
9136: LD_INT 91
9138: PUSH
9139: LD_INT 29
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: IN
9146: IFFALSE 9159
// ComSpecAttack ( i ) else
9148: LD_VAR 0 1
9152: PPUSH
9153: CALL 2419 0 1
9157: GO 9195
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9159: LD_VAR 0 1
9163: PPUSH
9164: LD_INT 22
9166: PUSH
9167: LD_OWVAR 2
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PPUSH
9176: CALL_OW 69
9180: PPUSH
9181: LD_VAR 0 1
9185: PPUSH
9186: CALL_OW 74
9190: PPUSH
9191: CALL_OW 115
// end ; end ; end ;
9195: GO 9198
9197: POP
// end ;
9198: GO 8741
9200: POP
9201: POP
// end ; end_of_file
9202: PPOPN 3
9204: END
// export function InitDisplay ; begin
9205: LD_INT 0
9207: PPUSH
// while true do
9208: LD_INT 1
9210: IFFALSE 9297
// begin if waveNumber < 100 then
9212: LD_EXP 5
9216: PUSH
9217: LD_INT 100
9219: LESS
9220: IFFALSE 9271
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9222: LD_ADDR_OWVAR 47
9226: PUSH
9227: LD_STRING #Tick
9229: PUSH
9230: LD_OWVAR 1
9234: PUSH
9235: LD_STRING #Points
9237: PUSH
9238: LD_EXP 2
9242: PUSH
9243: LD_STRING #Attack
9245: PUSH
9246: LD_EXP 4
9250: PUSH
9251: LD_STRING #Wave
9253: PUSH
9254: LD_EXP 5
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: ST_TO_ADDR
9269: GO 9288
// Display_Strings := [ #Win , points ] ;
9271: LD_ADDR_OWVAR 47
9275: PUSH
9276: LD_STRING #Win
9278: PUSH
9279: LD_EXP 2
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9288: LD_INT 35
9290: PPUSH
9291: CALL_OW 67
// end ;
9295: GO 9208
// end ; end_of_file
9297: LD_VAR 0 1
9301: RET
// export function InitBonus ; var i , chance ; begin
9302: LD_INT 0
9304: PPUSH
9305: PPUSH
9306: PPUSH
// chance := rand ( 1 , 99 ) ;
9307: LD_ADDR_VAR 0 3
9311: PUSH
9312: LD_INT 1
9314: PPUSH
9315: LD_INT 99
9317: PPUSH
9318: CALL_OW 12
9322: ST_TO_ADDR
// case chance of 1 .. 10 :
9323: LD_VAR 0 3
9327: PUSH
9328: LD_INT 1
9330: DOUBLE
9331: GREATEREQUAL
9332: IFFALSE 9340
9334: LD_INT 10
9336: DOUBLE
9337: LESSEQUAL
9338: IFTRUE 9342
9340: GO 9353
9342: POP
// i := 5 ; 11 .. 25 :
9343: LD_ADDR_VAR 0 2
9347: PUSH
9348: LD_INT 5
9350: ST_TO_ADDR
9351: GO 9454
9353: LD_INT 11
9355: DOUBLE
9356: GREATEREQUAL
9357: IFFALSE 9365
9359: LD_INT 25
9361: DOUBLE
9362: LESSEQUAL
9363: IFTRUE 9367
9365: GO 9378
9367: POP
// i := 3 ; 26 .. 40 :
9368: LD_ADDR_VAR 0 2
9372: PUSH
9373: LD_INT 3
9375: ST_TO_ADDR
9376: GO 9454
9378: LD_INT 26
9380: DOUBLE
9381: GREATEREQUAL
9382: IFFALSE 9390
9384: LD_INT 40
9386: DOUBLE
9387: LESSEQUAL
9388: IFTRUE 9392
9390: GO 9403
9392: POP
// i := 2 ; 41 .. 60 :
9393: LD_ADDR_VAR 0 2
9397: PUSH
9398: LD_INT 2
9400: ST_TO_ADDR
9401: GO 9454
9403: LD_INT 41
9405: DOUBLE
9406: GREATEREQUAL
9407: IFFALSE 9415
9409: LD_INT 60
9411: DOUBLE
9412: LESSEQUAL
9413: IFTRUE 9417
9415: GO 9428
9417: POP
// i := 4 ; 61 .. 99 :
9418: LD_ADDR_VAR 0 2
9422: PUSH
9423: LD_INT 4
9425: ST_TO_ADDR
9426: GO 9454
9428: LD_INT 61
9430: DOUBLE
9431: GREATEREQUAL
9432: IFFALSE 9440
9434: LD_INT 99
9436: DOUBLE
9437: LESSEQUAL
9438: IFTRUE 9442
9440: GO 9453
9442: POP
// i := 1 ; end ;
9443: LD_ADDR_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ST_TO_ADDR
9451: GO 9454
9453: POP
// case i of 1 :
9454: LD_VAR 0 2
9458: PUSH
9459: LD_INT 1
9461: DOUBLE
9462: EQUAL
9463: IFTRUE 9467
9465: GO 9556
9467: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9468: LD_INT 22
9470: PUSH
9471: LD_OWVAR 2
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 12
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 25
9495: PUSH
9496: LD_INT 16
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: LD_INT 25
9505: PUSH
9506: LD_INT 15
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: LD_INT 25
9515: PUSH
9516: LD_INT 17
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 69
9538: PUSH
9539: LD_INT 10
9541: GREATEREQUAL
9542: IFFALSE 9550
// BonusIV else
9544: CALL 10129 0 0
9548: GO 9554
// BonusI ;
9550: CALL 9634 0 0
// end ; 2 :
9554: GO 9629
9556: LD_INT 2
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9571
9564: POP
// begin BonusII ;
9565: CALL 9807 0 0
// end ; 3 :
9569: GO 9629
9571: LD_INT 3
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9586
9579: POP
// begin BonusIII ;
9580: CALL 9955 0 0
// end ; 4 :
9584: GO 9629
9586: LD_INT 4
9588: DOUBLE
9589: EQUAL
9590: IFTRUE 9594
9592: GO 9601
9594: POP
// begin BonusIV ;
9595: CALL 10129 0 0
// end ; 5 :
9599: GO 9629
9601: LD_INT 5
9603: DOUBLE
9604: EQUAL
9605: IFTRUE 9609
9607: GO 9628
9609: POP
// begin if graveyard then
9610: LD_EXP 8
9614: IFFALSE 9622
// BonusV else
9616: CALL 10547 0 0
9620: GO 9626
// BonusIII ;
9622: CALL 9955 0 0
// end ; end ;
9626: GO 9629
9628: POP
// end ;
9629: LD_VAR 0 1
9633: RET
// export function BonusI ; var i ; begin
9634: LD_INT 0
9636: PPUSH
9637: PPUSH
// case Query ( AddGift1 ) of 1 :
9638: LD_STRING AddGift1
9640: PPUSH
9641: CALL_OW 97
9645: PUSH
9646: LD_INT 1
9648: DOUBLE
9649: EQUAL
9650: IFTRUE 9654
9652: GO 9733
9654: POP
// begin for i = 1 to 3 do
9655: LD_ADDR_VAR 0 2
9659: PUSH
9660: DOUBLE
9661: LD_INT 1
9663: DEC
9664: ST_TO_ADDR
9665: LD_INT 3
9667: PUSH
9668: FOR_TO
9669: IFFALSE 9729
// begin uc_side := your_side ;
9671: LD_ADDR_OWVAR 20
9675: PUSH
9676: LD_OWVAR 2
9680: ST_TO_ADDR
// uc_nation := 0 ;
9681: LD_ADDR_OWVAR 21
9685: PUSH
9686: LD_INT 0
9688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9689: LD_INT 0
9691: PPUSH
9692: LD_INT 12
9694: PPUSH
9695: LD_INT 1
9697: PPUSH
9698: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9702: CALL_OW 44
9706: PPUSH
9707: LD_EXP 9
9711: PPUSH
9712: LD_EXP 10
9716: PPUSH
9717: LD_INT 15
9719: PPUSH
9720: LD_INT 1
9722: PPUSH
9723: CALL_OW 50
// end ;
9727: GO 9668
9729: POP
9730: POP
// end ; 2 :
9731: GO 9802
9733: LD_INT 2
9735: DOUBLE
9736: EQUAL
9737: IFTRUE 9741
9739: GO 9783
9741: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9742: LD_EXP 11
9746: PPUSH
9747: CALL_OW 274
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: LD_EXP 11
9759: PPUSH
9760: CALL_OW 274
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 275
9772: PUSH
9773: LD_INT 100
9775: PLUS
9776: PPUSH
9777: CALL_OW 277
// end ; 3 :
9781: GO 9802
9783: LD_INT 3
9785: DOUBLE
9786: EQUAL
9787: IFTRUE 9791
9789: GO 9801
9791: POP
// begin SetTeamExp ( 2 ) ;
9792: LD_INT 2
9794: PPUSH
9795: CALL 952 0 1
// end ; end ;
9799: GO 9802
9801: POP
// end ;
9802: LD_VAR 0 1
9806: RET
// export function BonusII ; var i ; begin
9807: LD_INT 0
9809: PPUSH
9810: PPUSH
// case Query ( AddGift2 ) of 1 :
9811: LD_STRING AddGift2
9813: PPUSH
9814: CALL_OW 97
9818: PUSH
9819: LD_INT 1
9821: DOUBLE
9822: EQUAL
9823: IFTRUE 9827
9825: GO 9869
9827: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9828: LD_EXP 11
9832: PPUSH
9833: CALL_OW 274
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: LD_EXP 11
9845: PPUSH
9846: CALL_OW 274
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: CALL_OW 275
9858: PUSH
9859: LD_INT 500
9861: PLUS
9862: PPUSH
9863: CALL_OW 277
// end ; 2 :
9867: GO 9950
9869: LD_INT 2
9871: DOUBLE
9872: EQUAL
9873: IFTRUE 9877
9875: GO 9887
9877: POP
// begin SetTeamExp ( 3 ) ;
9878: LD_INT 3
9880: PPUSH
9881: CALL 952 0 1
// end ; 3 :
9885: GO 9950
9887: LD_INT 3
9889: DOUBLE
9890: EQUAL
9891: IFTRUE 9895
9893: GO 9949
9895: POP
// begin uc_side = your_side ;
9896: LD_ADDR_OWVAR 20
9900: PUSH
9901: LD_OWVAR 2
9905: ST_TO_ADDR
// uc_nation = nation_russian ;
9906: LD_ADDR_OWVAR 21
9910: PUSH
9911: LD_INT 3
9913: ST_TO_ADDR
// vc_chassis = 25 ;
9914: LD_ADDR_OWVAR 37
9918: PUSH
9919: LD_INT 25
9921: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9922: CALL_OW 45
9926: PPUSH
9927: LD_EXP 9
9931: PPUSH
9932: LD_EXP 10
9936: PPUSH
9937: LD_INT 15
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 50
// end ; end ;
9947: GO 9950
9949: POP
// end ;
9950: LD_VAR 0 1
9954: RET
// export function BonusIII ; var i ; begin
9955: LD_INT 0
9957: PPUSH
9958: PPUSH
// case Query ( AddGift3 ) of 1 :
9959: LD_STRING AddGift3
9961: PPUSH
9962: CALL_OW 97
9966: PUSH
9967: LD_INT 1
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 10017
9975: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9976: LD_EXP 11
9980: PPUSH
9981: CALL_OW 274
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: LD_EXP 11
9993: PPUSH
9994: CALL_OW 274
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 275
10006: PUSH
10007: LD_INT 1000
10009: PLUS
10010: PPUSH
10011: CALL_OW 277
// end ; 2 :
10015: GO 10124
10017: LD_INT 2
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10037
10025: POP
// begin PrepareGuards ( waveNumber ) ;
10026: LD_EXP 5
10030: PPUSH
10031: CALL 1098 0 1
// end ; 3 :
10035: GO 10124
10037: LD_INT 3
10039: DOUBLE
10040: EQUAL
10041: IFTRUE 10045
10043: GO 10123
10045: POP
// begin uc_side = your_side ;
10046: LD_ADDR_OWVAR 20
10050: PUSH
10051: LD_OWVAR 2
10055: ST_TO_ADDR
// uc_nation = nation_american ;
10056: LD_ADDR_OWVAR 21
10060: PUSH
10061: LD_INT 1
10063: ST_TO_ADDR
// vc_chassis = us_morphling ;
10064: LD_ADDR_OWVAR 37
10068: PUSH
10069: LD_INT 5
10071: ST_TO_ADDR
// vc_engine := engine_siberite ;
10072: LD_ADDR_OWVAR 39
10076: PUSH
10077: LD_INT 3
10079: ST_TO_ADDR
// vc_control := control_computer ;
10080: LD_ADDR_OWVAR 38
10084: PUSH
10085: LD_INT 3
10087: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10088: LD_ADDR_OWVAR 40
10092: PUSH
10093: LD_INT 8
10095: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10096: CALL_OW 45
10100: PPUSH
10101: LD_EXP 9
10105: PPUSH
10106: LD_EXP 10
10110: PPUSH
10111: LD_INT 15
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 50
// end ; end ;
10121: GO 10124
10123: POP
// end ;
10124: LD_VAR 0 1
10128: RET
// export function BonusIV ; var i ; begin
10129: LD_INT 0
10131: PPUSH
10132: PPUSH
// case Query ( AddGift4 ) of 1 :
10133: LD_STRING AddGift4
10135: PPUSH
10136: CALL_OW 97
10140: PUSH
10141: LD_INT 1
10143: DOUBLE
10144: EQUAL
10145: IFTRUE 10149
10147: GO 10473
10149: POP
// begin i := rand ( 1 , 3 ) ;
10150: LD_ADDR_VAR 0 2
10154: PUSH
10155: LD_INT 1
10157: PPUSH
10158: LD_INT 3
10160: PPUSH
10161: CALL_OW 12
10165: ST_TO_ADDR
// uc_side := your_side ;
10166: LD_ADDR_OWVAR 20
10170: PUSH
10171: LD_OWVAR 2
10175: ST_TO_ADDR
// case i of 1 :
10176: LD_VAR 0 2
10180: PUSH
10181: LD_INT 1
10183: DOUBLE
10184: EQUAL
10185: IFTRUE 10189
10187: GO 10276
10189: POP
// begin uc_nation := nation_arabian ;
10190: LD_ADDR_OWVAR 21
10194: PUSH
10195: LD_INT 2
10197: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10198: LD_ADDR_OWVAR 37
10202: PUSH
10203: LD_INT 14
10205: ST_TO_ADDR
// vc_engine := engine_combustion ;
10206: LD_ADDR_OWVAR 39
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// vc_control := control_manual ;
10214: LD_ADDR_OWVAR 38
10218: PUSH
10219: LD_INT 1
10221: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10222: LD_ADDR_OWVAR 40
10226: PUSH
10227: LD_INT 27
10229: PUSH
10230: LD_INT 28
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 1
10239: PPUSH
10240: LD_INT 2
10242: PPUSH
10243: CALL_OW 12
10247: ARRAY
10248: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10249: CALL_OW 45
10253: PPUSH
10254: LD_EXP 9
10258: PPUSH
10259: LD_EXP 10
10263: PPUSH
10264: LD_INT 15
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: CALL_OW 50
// end ; 2 :
10274: GO 10471
10276: LD_INT 2
10278: DOUBLE
10279: EQUAL
10280: IFTRUE 10284
10282: GO 10375
10284: POP
// begin uc_nation := nation_american ;
10285: LD_ADDR_OWVAR 21
10289: PUSH
10290: LD_INT 1
10292: ST_TO_ADDR
// vc_chassis := us_morphling ;
10293: LD_ADDR_OWVAR 37
10297: PUSH
10298: LD_INT 5
10300: ST_TO_ADDR
// vc_engine := engine_siberite ;
10301: LD_ADDR_OWVAR 39
10305: PUSH
10306: LD_INT 3
10308: ST_TO_ADDR
// vc_control := control_computer ;
10309: LD_ADDR_OWVAR 38
10313: PUSH
10314: LD_INT 3
10316: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10317: LD_ADDR_OWVAR 40
10321: PUSH
10322: LD_INT 12
10324: PUSH
10325: LD_INT 10
10327: PUSH
10328: LD_INT 7
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 1
10338: PPUSH
10339: LD_INT 3
10341: PPUSH
10342: CALL_OW 12
10346: ARRAY
10347: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10348: CALL_OW 45
10352: PPUSH
10353: LD_EXP 9
10357: PPUSH
10358: LD_EXP 10
10362: PPUSH
10363: LD_INT 15
10365: PPUSH
10366: LD_INT 1
10368: PPUSH
10369: CALL_OW 50
// end ; 3 :
10373: GO 10471
10375: LD_INT 3
10377: DOUBLE
10378: EQUAL
10379: IFTRUE 10383
10381: GO 10470
10383: POP
// begin uc_nation := nation_russian ;
10384: LD_ADDR_OWVAR 21
10388: PUSH
10389: LD_INT 3
10391: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10392: LD_ADDR_OWVAR 37
10396: PUSH
10397: LD_INT 22
10399: ST_TO_ADDR
// vc_engine := engine_combustion ;
10400: LD_ADDR_OWVAR 39
10404: PUSH
10405: LD_INT 1
10407: ST_TO_ADDR
// vc_control := control_manual ;
10408: LD_ADDR_OWVAR 38
10412: PUSH
10413: LD_INT 1
10415: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10416: LD_ADDR_OWVAR 40
10420: PUSH
10421: LD_INT 45
10423: PUSH
10424: LD_INT 44
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 1
10433: PPUSH
10434: LD_INT 2
10436: PPUSH
10437: CALL_OW 12
10441: ARRAY
10442: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10443: CALL_OW 45
10447: PPUSH
10448: LD_EXP 9
10452: PPUSH
10453: LD_EXP 10
10457: PPUSH
10458: LD_INT 15
10460: PPUSH
10461: LD_INT 1
10463: PPUSH
10464: CALL_OW 50
// end ; end ;
10468: GO 10471
10470: POP
// end ; 2 :
10471: GO 10542
10473: LD_INT 2
10475: DOUBLE
10476: EQUAL
10477: IFTRUE 10481
10479: GO 10523
10481: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10482: LD_EXP 11
10486: PPUSH
10487: CALL_OW 274
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: LD_EXP 11
10499: PPUSH
10500: CALL_OW 274
10504: PPUSH
10505: LD_INT 1
10507: PPUSH
10508: CALL_OW 275
10512: PUSH
10513: LD_INT 100
10515: PLUS
10516: PPUSH
10517: CALL_OW 277
// end ; 3 :
10521: GO 10542
10523: LD_INT 3
10525: DOUBLE
10526: EQUAL
10527: IFTRUE 10531
10529: GO 10541
10531: POP
// begin SetTeamExp ( 2 ) ;
10532: LD_INT 2
10534: PPUSH
10535: CALL 952 0 1
// end ; end ;
10539: GO 10542
10541: POP
// end ;
10542: LD_VAR 0 1
10546: RET
// export function BonusV ; var i , j ; begin
10547: LD_INT 0
10549: PPUSH
10550: PPUSH
10551: PPUSH
// case Query ( AddGift5 ) of 1 :
10552: LD_STRING AddGift5
10554: PPUSH
10555: CALL_OW 97
10559: PUSH
10560: LD_INT 1
10562: DOUBLE
10563: EQUAL
10564: IFTRUE 10568
10566: GO 10912
10568: POP
// begin for j = 1 to 3 do
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: DOUBLE
10575: LD_INT 1
10577: DEC
10578: ST_TO_ADDR
10579: LD_INT 3
10581: PUSH
10582: FOR_TO
10583: IFFALSE 10908
// begin i := rand ( 1 , 3 ) ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 1
10592: PPUSH
10593: LD_INT 3
10595: PPUSH
10596: CALL_OW 12
10600: ST_TO_ADDR
// uc_side := your_side ;
10601: LD_ADDR_OWVAR 20
10605: PUSH
10606: LD_OWVAR 2
10610: ST_TO_ADDR
// case i of 1 :
10611: LD_VAR 0 2
10615: PUSH
10616: LD_INT 1
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10711
10624: POP
// begin uc_nation := nation_arabian ;
10625: LD_ADDR_OWVAR 21
10629: PUSH
10630: LD_INT 2
10632: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10633: LD_ADDR_OWVAR 37
10637: PUSH
10638: LD_INT 14
10640: ST_TO_ADDR
// vc_engine := engine_combustion ;
10641: LD_ADDR_OWVAR 39
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// vc_control := control_manual ;
10649: LD_ADDR_OWVAR 38
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10657: LD_ADDR_OWVAR 40
10661: PUSH
10662: LD_INT 27
10664: PUSH
10665: LD_INT 28
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 1
10674: PPUSH
10675: LD_INT 2
10677: PPUSH
10678: CALL_OW 12
10682: ARRAY
10683: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10684: CALL_OW 45
10688: PPUSH
10689: LD_EXP 9
10693: PPUSH
10694: LD_EXP 10
10698: PPUSH
10699: LD_INT 15
10701: PPUSH
10702: LD_INT 1
10704: PPUSH
10705: CALL_OW 50
// end ; 2 :
10709: GO 10906
10711: LD_INT 2
10713: DOUBLE
10714: EQUAL
10715: IFTRUE 10719
10717: GO 10810
10719: POP
// begin uc_nation := nation_american ;
10720: LD_ADDR_OWVAR 21
10724: PUSH
10725: LD_INT 1
10727: ST_TO_ADDR
// vc_chassis := us_morphling ;
10728: LD_ADDR_OWVAR 37
10732: PUSH
10733: LD_INT 5
10735: ST_TO_ADDR
// vc_engine := engine_siberite ;
10736: LD_ADDR_OWVAR 39
10740: PUSH
10741: LD_INT 3
10743: ST_TO_ADDR
// vc_control := control_computer ;
10744: LD_ADDR_OWVAR 38
10748: PUSH
10749: LD_INT 3
10751: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10752: LD_ADDR_OWVAR 40
10756: PUSH
10757: LD_INT 12
10759: PUSH
10760: LD_INT 11
10762: PUSH
10763: LD_INT 7
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 1
10773: PPUSH
10774: LD_INT 3
10776: PPUSH
10777: CALL_OW 12
10781: ARRAY
10782: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10783: CALL_OW 45
10787: PPUSH
10788: LD_EXP 9
10792: PPUSH
10793: LD_EXP 10
10797: PPUSH
10798: LD_INT 15
10800: PPUSH
10801: LD_INT 1
10803: PPUSH
10804: CALL_OW 50
// end ; 3 :
10808: GO 10906
10810: LD_INT 3
10812: DOUBLE
10813: EQUAL
10814: IFTRUE 10818
10816: GO 10905
10818: POP
// begin uc_nation := nation_russian ;
10819: LD_ADDR_OWVAR 21
10823: PUSH
10824: LD_INT 3
10826: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10827: LD_ADDR_OWVAR 37
10831: PUSH
10832: LD_INT 22
10834: ST_TO_ADDR
// vc_engine := engine_combustion ;
10835: LD_ADDR_OWVAR 39
10839: PUSH
10840: LD_INT 1
10842: ST_TO_ADDR
// vc_control := control_manual ;
10843: LD_ADDR_OWVAR 38
10847: PUSH
10848: LD_INT 1
10850: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10851: LD_ADDR_OWVAR 40
10855: PUSH
10856: LD_INT 45
10858: PUSH
10859: LD_INT 44
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 1
10868: PPUSH
10869: LD_INT 2
10871: PPUSH
10872: CALL_OW 12
10876: ARRAY
10877: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10878: CALL_OW 45
10882: PPUSH
10883: LD_EXP 9
10887: PPUSH
10888: LD_EXP 10
10892: PPUSH
10893: LD_INT 15
10895: PPUSH
10896: LD_INT 1
10898: PPUSH
10899: CALL_OW 50
// end ; end ;
10903: GO 10906
10905: POP
// end ;
10906: GO 10582
10908: POP
10909: POP
// end ; 2 :
10910: GO 10978
10912: LD_INT 2
10914: DOUBLE
10915: EQUAL
10916: IFTRUE 10920
10918: GO 10962
10920: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10921: LD_EXP 11
10925: PPUSH
10926: CALL_OW 274
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: LD_EXP 11
10938: PPUSH
10939: CALL_OW 274
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 275
10951: PUSH
10952: LD_INT 500
10954: PLUS
10955: PPUSH
10956: CALL_OW 277
// end ; 3 :
10960: GO 10978
10962: LD_INT 3
10964: DOUBLE
10965: EQUAL
10966: IFTRUE 10970
10968: GO 10977
10970: POP
// begin GetBack ( ) ;
10971: CALL 1758 0 0
// end ; end ;
10975: GO 10978
10977: POP
// end ; end_of_file end_of_file
10978: LD_VAR 0 1
10982: RET
// export globalGameSaveCounter ; every 0 0$1 do
10983: GO 10985
10985: DISABLE
// begin enable ;
10986: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10987: LD_STRING updateTimer(
10989: PUSH
10990: LD_OWVAR 1
10994: STR
10995: PUSH
10996: LD_STRING );
10998: STR
10999: PPUSH
11000: CALL_OW 559
// end ;
11004: END
// every 0 0$1 do
11005: GO 11007
11007: DISABLE
// begin globalGameSaveCounter := 0 ;
11008: LD_ADDR_EXP 14
11012: PUSH
11013: LD_INT 0
11015: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11016: LD_STRING setGameSaveCounter(0)
11018: PPUSH
11019: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11023: LD_STRING initStreamRollete();
11025: PPUSH
11026: CALL_OW 559
// InitStreamMode ;
11030: CALL 12375 0 0
// DefineStreamItems ( false ) ;
11034: LD_INT 0
11036: PPUSH
11037: CALL 12839 0 1
// end ;
11041: END
// export function SOS_MapStart ( ) ; begin
11042: LD_INT 0
11044: PPUSH
// if streamModeActive then
11045: LD_EXP 15
11049: IFFALSE 11058
// DefineStreamItems ( true ) ;
11051: LD_INT 1
11053: PPUSH
11054: CALL 12839 0 1
// UpdateLuaVariables ( ) ;
11058: CALL 11075 0 0
// UpdateFactoryWaypoints ( ) ;
11062: CALL 25961 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11066: CALL 26213 0 0
// end ;
11070: LD_VAR 0 1
11074: RET
// function UpdateLuaVariables ( ) ; begin
11075: LD_INT 0
11077: PPUSH
// if globalGameSaveCounter then
11078: LD_EXP 14
11082: IFFALSE 11116
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11084: LD_ADDR_EXP 14
11088: PUSH
11089: LD_EXP 14
11093: PPUSH
11094: CALL 72794 0 1
11098: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11099: LD_STRING setGameSaveCounter(
11101: PUSH
11102: LD_EXP 14
11106: STR
11107: PUSH
11108: LD_STRING )
11110: STR
11111: PPUSH
11112: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11116: LD_STRING setGameDifficulty(
11118: PUSH
11119: LD_OWVAR 67
11123: STR
11124: PUSH
11125: LD_STRING )
11127: STR
11128: PPUSH
11129: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11133: LD_STRING displayDifficulty(
11135: PUSH
11136: LD_OWVAR 67
11140: STR
11141: PUSH
11142: LD_STRING )
11144: STR
11145: PPUSH
11146: CALL_OW 559
// end ;
11150: LD_VAR 0 1
11154: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11155: LD_INT 0
11157: PPUSH
// if p2 = stream_mode then
11158: LD_VAR 0 2
11162: PUSH
11163: LD_INT 100
11165: EQUAL
11166: IFFALSE 12169
// begin if not StreamModeActive then
11168: LD_EXP 15
11172: NOT
11173: IFFALSE 11183
// StreamModeActive := true ;
11175: LD_ADDR_EXP 15
11179: PUSH
11180: LD_INT 1
11182: ST_TO_ADDR
// if p3 = 0 then
11183: LD_VAR 0 3
11187: PUSH
11188: LD_INT 0
11190: EQUAL
11191: IFFALSE 11197
// InitStreamMode ;
11193: CALL 12375 0 0
// if p3 = 1 then
11197: LD_VAR 0 3
11201: PUSH
11202: LD_INT 1
11204: EQUAL
11205: IFFALSE 11215
// sRocket := true ;
11207: LD_ADDR_EXP 20
11211: PUSH
11212: LD_INT 1
11214: ST_TO_ADDR
// if p3 = 2 then
11215: LD_VAR 0 3
11219: PUSH
11220: LD_INT 2
11222: EQUAL
11223: IFFALSE 11233
// sSpeed := true ;
11225: LD_ADDR_EXP 19
11229: PUSH
11230: LD_INT 1
11232: ST_TO_ADDR
// if p3 = 3 then
11233: LD_VAR 0 3
11237: PUSH
11238: LD_INT 3
11240: EQUAL
11241: IFFALSE 11251
// sEngine := true ;
11243: LD_ADDR_EXP 21
11247: PUSH
11248: LD_INT 1
11250: ST_TO_ADDR
// if p3 = 4 then
11251: LD_VAR 0 3
11255: PUSH
11256: LD_INT 4
11258: EQUAL
11259: IFFALSE 11269
// sSpec := true ;
11261: LD_ADDR_EXP 18
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// if p3 = 5 then
11269: LD_VAR 0 3
11273: PUSH
11274: LD_INT 5
11276: EQUAL
11277: IFFALSE 11287
// sLevel := true ;
11279: LD_ADDR_EXP 22
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// if p3 = 6 then
11287: LD_VAR 0 3
11291: PUSH
11292: LD_INT 6
11294: EQUAL
11295: IFFALSE 11305
// sArmoury := true ;
11297: LD_ADDR_EXP 23
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// if p3 = 7 then
11305: LD_VAR 0 3
11309: PUSH
11310: LD_INT 7
11312: EQUAL
11313: IFFALSE 11323
// sRadar := true ;
11315: LD_ADDR_EXP 24
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// if p3 = 8 then
11323: LD_VAR 0 3
11327: PUSH
11328: LD_INT 8
11330: EQUAL
11331: IFFALSE 11341
// sBunker := true ;
11333: LD_ADDR_EXP 25
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// if p3 = 9 then
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 9
11348: EQUAL
11349: IFFALSE 11359
// sHack := true ;
11351: LD_ADDR_EXP 26
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// if p3 = 10 then
11359: LD_VAR 0 3
11363: PUSH
11364: LD_INT 10
11366: EQUAL
11367: IFFALSE 11377
// sFire := true ;
11369: LD_ADDR_EXP 27
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// if p3 = 11 then
11377: LD_VAR 0 3
11381: PUSH
11382: LD_INT 11
11384: EQUAL
11385: IFFALSE 11395
// sRefresh := true ;
11387: LD_ADDR_EXP 28
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// if p3 = 12 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 12
11402: EQUAL
11403: IFFALSE 11413
// sExp := true ;
11405: LD_ADDR_EXP 29
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// if p3 = 13 then
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 13
11420: EQUAL
11421: IFFALSE 11431
// sDepot := true ;
11423: LD_ADDR_EXP 30
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// if p3 = 14 then
11431: LD_VAR 0 3
11435: PUSH
11436: LD_INT 14
11438: EQUAL
11439: IFFALSE 11449
// sFlag := true ;
11441: LD_ADDR_EXP 31
11445: PUSH
11446: LD_INT 1
11448: ST_TO_ADDR
// if p3 = 15 then
11449: LD_VAR 0 3
11453: PUSH
11454: LD_INT 15
11456: EQUAL
11457: IFFALSE 11467
// sKamikadze := true ;
11459: LD_ADDR_EXP 39
11463: PUSH
11464: LD_INT 1
11466: ST_TO_ADDR
// if p3 = 16 then
11467: LD_VAR 0 3
11471: PUSH
11472: LD_INT 16
11474: EQUAL
11475: IFFALSE 11485
// sTroll := true ;
11477: LD_ADDR_EXP 40
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// if p3 = 17 then
11485: LD_VAR 0 3
11489: PUSH
11490: LD_INT 17
11492: EQUAL
11493: IFFALSE 11503
// sSlow := true ;
11495: LD_ADDR_EXP 41
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// if p3 = 18 then
11503: LD_VAR 0 3
11507: PUSH
11508: LD_INT 18
11510: EQUAL
11511: IFFALSE 11521
// sLack := true ;
11513: LD_ADDR_EXP 42
11517: PUSH
11518: LD_INT 1
11520: ST_TO_ADDR
// if p3 = 19 then
11521: LD_VAR 0 3
11525: PUSH
11526: LD_INT 19
11528: EQUAL
11529: IFFALSE 11539
// sTank := true ;
11531: LD_ADDR_EXP 44
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// if p3 = 20 then
11539: LD_VAR 0 3
11543: PUSH
11544: LD_INT 20
11546: EQUAL
11547: IFFALSE 11557
// sRemote := true ;
11549: LD_ADDR_EXP 45
11553: PUSH
11554: LD_INT 1
11556: ST_TO_ADDR
// if p3 = 21 then
11557: LD_VAR 0 3
11561: PUSH
11562: LD_INT 21
11564: EQUAL
11565: IFFALSE 11575
// sPowell := true ;
11567: LD_ADDR_EXP 46
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
// if p3 = 22 then
11575: LD_VAR 0 3
11579: PUSH
11580: LD_INT 22
11582: EQUAL
11583: IFFALSE 11593
// sTeleport := true ;
11585: LD_ADDR_EXP 49
11589: PUSH
11590: LD_INT 1
11592: ST_TO_ADDR
// if p3 = 23 then
11593: LD_VAR 0 3
11597: PUSH
11598: LD_INT 23
11600: EQUAL
11601: IFFALSE 11611
// sOilTower := true ;
11603: LD_ADDR_EXP 51
11607: PUSH
11608: LD_INT 1
11610: ST_TO_ADDR
// if p3 = 24 then
11611: LD_VAR 0 3
11615: PUSH
11616: LD_INT 24
11618: EQUAL
11619: IFFALSE 11629
// sShovel := true ;
11621: LD_ADDR_EXP 52
11625: PUSH
11626: LD_INT 1
11628: ST_TO_ADDR
// if p3 = 25 then
11629: LD_VAR 0 3
11633: PUSH
11634: LD_INT 25
11636: EQUAL
11637: IFFALSE 11647
// sSheik := true ;
11639: LD_ADDR_EXP 53
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// if p3 = 26 then
11647: LD_VAR 0 3
11651: PUSH
11652: LD_INT 26
11654: EQUAL
11655: IFFALSE 11665
// sEarthquake := true ;
11657: LD_ADDR_EXP 55
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// if p3 = 27 then
11665: LD_VAR 0 3
11669: PUSH
11670: LD_INT 27
11672: EQUAL
11673: IFFALSE 11683
// sAI := true ;
11675: LD_ADDR_EXP 56
11679: PUSH
11680: LD_INT 1
11682: ST_TO_ADDR
// if p3 = 28 then
11683: LD_VAR 0 3
11687: PUSH
11688: LD_INT 28
11690: EQUAL
11691: IFFALSE 11701
// sCargo := true ;
11693: LD_ADDR_EXP 59
11697: PUSH
11698: LD_INT 1
11700: ST_TO_ADDR
// if p3 = 29 then
11701: LD_VAR 0 3
11705: PUSH
11706: LD_INT 29
11708: EQUAL
11709: IFFALSE 11719
// sDLaser := true ;
11711: LD_ADDR_EXP 60
11715: PUSH
11716: LD_INT 1
11718: ST_TO_ADDR
// if p3 = 30 then
11719: LD_VAR 0 3
11723: PUSH
11724: LD_INT 30
11726: EQUAL
11727: IFFALSE 11737
// sExchange := true ;
11729: LD_ADDR_EXP 61
11733: PUSH
11734: LD_INT 1
11736: ST_TO_ADDR
// if p3 = 31 then
11737: LD_VAR 0 3
11741: PUSH
11742: LD_INT 31
11744: EQUAL
11745: IFFALSE 11755
// sFac := true ;
11747: LD_ADDR_EXP 62
11751: PUSH
11752: LD_INT 1
11754: ST_TO_ADDR
// if p3 = 32 then
11755: LD_VAR 0 3
11759: PUSH
11760: LD_INT 32
11762: EQUAL
11763: IFFALSE 11773
// sPower := true ;
11765: LD_ADDR_EXP 63
11769: PUSH
11770: LD_INT 1
11772: ST_TO_ADDR
// if p3 = 33 then
11773: LD_VAR 0 3
11777: PUSH
11778: LD_INT 33
11780: EQUAL
11781: IFFALSE 11791
// sRandom := true ;
11783: LD_ADDR_EXP 64
11787: PUSH
11788: LD_INT 1
11790: ST_TO_ADDR
// if p3 = 34 then
11791: LD_VAR 0 3
11795: PUSH
11796: LD_INT 34
11798: EQUAL
11799: IFFALSE 11809
// sShield := true ;
11801: LD_ADDR_EXP 65
11805: PUSH
11806: LD_INT 1
11808: ST_TO_ADDR
// if p3 = 35 then
11809: LD_VAR 0 3
11813: PUSH
11814: LD_INT 35
11816: EQUAL
11817: IFFALSE 11827
// sTime := true ;
11819: LD_ADDR_EXP 66
11823: PUSH
11824: LD_INT 1
11826: ST_TO_ADDR
// if p3 = 36 then
11827: LD_VAR 0 3
11831: PUSH
11832: LD_INT 36
11834: EQUAL
11835: IFFALSE 11845
// sTools := true ;
11837: LD_ADDR_EXP 67
11841: PUSH
11842: LD_INT 1
11844: ST_TO_ADDR
// if p3 = 101 then
11845: LD_VAR 0 3
11849: PUSH
11850: LD_INT 101
11852: EQUAL
11853: IFFALSE 11863
// sSold := true ;
11855: LD_ADDR_EXP 32
11859: PUSH
11860: LD_INT 1
11862: ST_TO_ADDR
// if p3 = 102 then
11863: LD_VAR 0 3
11867: PUSH
11868: LD_INT 102
11870: EQUAL
11871: IFFALSE 11881
// sDiff := true ;
11873: LD_ADDR_EXP 33
11877: PUSH
11878: LD_INT 1
11880: ST_TO_ADDR
// if p3 = 103 then
11881: LD_VAR 0 3
11885: PUSH
11886: LD_INT 103
11888: EQUAL
11889: IFFALSE 11899
// sFog := true ;
11891: LD_ADDR_EXP 36
11895: PUSH
11896: LD_INT 1
11898: ST_TO_ADDR
// if p3 = 104 then
11899: LD_VAR 0 3
11903: PUSH
11904: LD_INT 104
11906: EQUAL
11907: IFFALSE 11917
// sReset := true ;
11909: LD_ADDR_EXP 37
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// if p3 = 105 then
11917: LD_VAR 0 3
11921: PUSH
11922: LD_INT 105
11924: EQUAL
11925: IFFALSE 11935
// sSun := true ;
11927: LD_ADDR_EXP 38
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// if p3 = 106 then
11935: LD_VAR 0 3
11939: PUSH
11940: LD_INT 106
11942: EQUAL
11943: IFFALSE 11953
// sTiger := true ;
11945: LD_ADDR_EXP 34
11949: PUSH
11950: LD_INT 1
11952: ST_TO_ADDR
// if p3 = 107 then
11953: LD_VAR 0 3
11957: PUSH
11958: LD_INT 107
11960: EQUAL
11961: IFFALSE 11971
// sBomb := true ;
11963: LD_ADDR_EXP 35
11967: PUSH
11968: LD_INT 1
11970: ST_TO_ADDR
// if p3 = 108 then
11971: LD_VAR 0 3
11975: PUSH
11976: LD_INT 108
11978: EQUAL
11979: IFFALSE 11989
// sWound := true ;
11981: LD_ADDR_EXP 43
11985: PUSH
11986: LD_INT 1
11988: ST_TO_ADDR
// if p3 = 109 then
11989: LD_VAR 0 3
11993: PUSH
11994: LD_INT 109
11996: EQUAL
11997: IFFALSE 12007
// sBetray := true ;
11999: LD_ADDR_EXP 47
12003: PUSH
12004: LD_INT 1
12006: ST_TO_ADDR
// if p3 = 110 then
12007: LD_VAR 0 3
12011: PUSH
12012: LD_INT 110
12014: EQUAL
12015: IFFALSE 12025
// sContamin := true ;
12017: LD_ADDR_EXP 48
12021: PUSH
12022: LD_INT 1
12024: ST_TO_ADDR
// if p3 = 111 then
12025: LD_VAR 0 3
12029: PUSH
12030: LD_INT 111
12032: EQUAL
12033: IFFALSE 12043
// sOil := true ;
12035: LD_ADDR_EXP 50
12039: PUSH
12040: LD_INT 1
12042: ST_TO_ADDR
// if p3 = 112 then
12043: LD_VAR 0 3
12047: PUSH
12048: LD_INT 112
12050: EQUAL
12051: IFFALSE 12061
// sStu := true ;
12053: LD_ADDR_EXP 54
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// if p3 = 113 then
12061: LD_VAR 0 3
12065: PUSH
12066: LD_INT 113
12068: EQUAL
12069: IFFALSE 12079
// sBazooka := true ;
12071: LD_ADDR_EXP 57
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// if p3 = 114 then
12079: LD_VAR 0 3
12083: PUSH
12084: LD_INT 114
12086: EQUAL
12087: IFFALSE 12097
// sMortar := true ;
12089: LD_ADDR_EXP 58
12093: PUSH
12094: LD_INT 1
12096: ST_TO_ADDR
// if p3 = 115 then
12097: LD_VAR 0 3
12101: PUSH
12102: LD_INT 115
12104: EQUAL
12105: IFFALSE 12115
// sRanger := true ;
12107: LD_ADDR_EXP 68
12111: PUSH
12112: LD_INT 1
12114: ST_TO_ADDR
// if p3 = 116 then
12115: LD_VAR 0 3
12119: PUSH
12120: LD_INT 116
12122: EQUAL
12123: IFFALSE 12133
// sComputer := true ;
12125: LD_ADDR_EXP 69
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
// if p3 = 117 then
12133: LD_VAR 0 3
12137: PUSH
12138: LD_INT 117
12140: EQUAL
12141: IFFALSE 12151
// s30 := true ;
12143: LD_ADDR_EXP 70
12147: PUSH
12148: LD_INT 1
12150: ST_TO_ADDR
// if p3 = 118 then
12151: LD_VAR 0 3
12155: PUSH
12156: LD_INT 118
12158: EQUAL
12159: IFFALSE 12169
// s60 := true ;
12161: LD_ADDR_EXP 71
12165: PUSH
12166: LD_INT 1
12168: ST_TO_ADDR
// end ; if p2 = hack_mode then
12169: LD_VAR 0 2
12173: PUSH
12174: LD_INT 101
12176: EQUAL
12177: IFFALSE 12305
// begin case p3 of 1 :
12179: LD_VAR 0 3
12183: PUSH
12184: LD_INT 1
12186: DOUBLE
12187: EQUAL
12188: IFTRUE 12192
12190: GO 12199
12192: POP
// hHackUnlimitedResources ; 2 :
12193: CALL 24568 0 0
12197: GO 12305
12199: LD_INT 2
12201: DOUBLE
12202: EQUAL
12203: IFTRUE 12207
12205: GO 12214
12207: POP
// hHackSetLevel10 ; 3 :
12208: CALL 24701 0 0
12212: GO 12305
12214: LD_INT 3
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12229
12222: POP
// hHackSetLevel10YourUnits ; 4 :
12223: CALL 24786 0 0
12227: GO 12305
12229: LD_INT 4
12231: DOUBLE
12232: EQUAL
12233: IFTRUE 12237
12235: GO 12244
12237: POP
// hHackInvincible ; 5 :
12238: CALL 25234 0 0
12242: GO 12305
12244: LD_INT 5
12246: DOUBLE
12247: EQUAL
12248: IFTRUE 12252
12250: GO 12259
12252: POP
// hHackInvisible ; 6 :
12253: CALL 25345 0 0
12257: GO 12305
12259: LD_INT 6
12261: DOUBLE
12262: EQUAL
12263: IFTRUE 12267
12265: GO 12274
12267: POP
// hHackChangeYourSide ; 7 :
12268: CALL 25402 0 0
12272: GO 12305
12274: LD_INT 7
12276: DOUBLE
12277: EQUAL
12278: IFTRUE 12282
12280: GO 12289
12282: POP
// hHackChangeUnitSide ; 8 :
12283: CALL 25444 0 0
12287: GO 12305
12289: LD_INT 8
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12304
12297: POP
// hHackFog ; end ;
12298: CALL 25545 0 0
12302: GO 12305
12304: POP
// end ; if p2 = game_save_mode then
12305: LD_VAR 0 2
12309: PUSH
12310: LD_INT 102
12312: EQUAL
12313: IFFALSE 12370
// begin if p3 = 1 then
12315: LD_VAR 0 3
12319: PUSH
12320: LD_INT 1
12322: EQUAL
12323: IFFALSE 12335
// globalGameSaveCounter := p4 ;
12325: LD_ADDR_EXP 14
12329: PUSH
12330: LD_VAR 0 4
12334: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12335: LD_VAR 0 3
12339: PUSH
12340: LD_INT 2
12342: EQUAL
12343: IFFALSE 12351
12345: PUSH
12346: LD_EXP 14
12350: AND
12351: IFFALSE 12370
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12353: LD_STRING setGameSaveCounter(
12355: PUSH
12356: LD_EXP 14
12360: STR
12361: PUSH
12362: LD_STRING )
12364: STR
12365: PPUSH
12366: CALL_OW 559
// end ; end ;
12370: LD_VAR 0 7
12374: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12375: LD_INT 0
12377: PPUSH
// streamModeActive := false ;
12378: LD_ADDR_EXP 15
12382: PUSH
12383: LD_INT 0
12385: ST_TO_ADDR
// normalCounter := 36 ;
12386: LD_ADDR_EXP 16
12390: PUSH
12391: LD_INT 36
12393: ST_TO_ADDR
// hardcoreCounter := 18 ;
12394: LD_ADDR_EXP 17
12398: PUSH
12399: LD_INT 18
12401: ST_TO_ADDR
// sRocket := false ;
12402: LD_ADDR_EXP 20
12406: PUSH
12407: LD_INT 0
12409: ST_TO_ADDR
// sSpeed := false ;
12410: LD_ADDR_EXP 19
12414: PUSH
12415: LD_INT 0
12417: ST_TO_ADDR
// sEngine := false ;
12418: LD_ADDR_EXP 21
12422: PUSH
12423: LD_INT 0
12425: ST_TO_ADDR
// sSpec := false ;
12426: LD_ADDR_EXP 18
12430: PUSH
12431: LD_INT 0
12433: ST_TO_ADDR
// sLevel := false ;
12434: LD_ADDR_EXP 22
12438: PUSH
12439: LD_INT 0
12441: ST_TO_ADDR
// sArmoury := false ;
12442: LD_ADDR_EXP 23
12446: PUSH
12447: LD_INT 0
12449: ST_TO_ADDR
// sRadar := false ;
12450: LD_ADDR_EXP 24
12454: PUSH
12455: LD_INT 0
12457: ST_TO_ADDR
// sBunker := false ;
12458: LD_ADDR_EXP 25
12462: PUSH
12463: LD_INT 0
12465: ST_TO_ADDR
// sHack := false ;
12466: LD_ADDR_EXP 26
12470: PUSH
12471: LD_INT 0
12473: ST_TO_ADDR
// sFire := false ;
12474: LD_ADDR_EXP 27
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// sRefresh := false ;
12482: LD_ADDR_EXP 28
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
// sExp := false ;
12490: LD_ADDR_EXP 29
12494: PUSH
12495: LD_INT 0
12497: ST_TO_ADDR
// sDepot := false ;
12498: LD_ADDR_EXP 30
12502: PUSH
12503: LD_INT 0
12505: ST_TO_ADDR
// sFlag := false ;
12506: LD_ADDR_EXP 31
12510: PUSH
12511: LD_INT 0
12513: ST_TO_ADDR
// sKamikadze := false ;
12514: LD_ADDR_EXP 39
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// sTroll := false ;
12522: LD_ADDR_EXP 40
12526: PUSH
12527: LD_INT 0
12529: ST_TO_ADDR
// sSlow := false ;
12530: LD_ADDR_EXP 41
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// sLack := false ;
12538: LD_ADDR_EXP 42
12542: PUSH
12543: LD_INT 0
12545: ST_TO_ADDR
// sTank := false ;
12546: LD_ADDR_EXP 44
12550: PUSH
12551: LD_INT 0
12553: ST_TO_ADDR
// sRemote := false ;
12554: LD_ADDR_EXP 45
12558: PUSH
12559: LD_INT 0
12561: ST_TO_ADDR
// sPowell := false ;
12562: LD_ADDR_EXP 46
12566: PUSH
12567: LD_INT 0
12569: ST_TO_ADDR
// sTeleport := false ;
12570: LD_ADDR_EXP 49
12574: PUSH
12575: LD_INT 0
12577: ST_TO_ADDR
// sOilTower := false ;
12578: LD_ADDR_EXP 51
12582: PUSH
12583: LD_INT 0
12585: ST_TO_ADDR
// sShovel := false ;
12586: LD_ADDR_EXP 52
12590: PUSH
12591: LD_INT 0
12593: ST_TO_ADDR
// sSheik := false ;
12594: LD_ADDR_EXP 53
12598: PUSH
12599: LD_INT 0
12601: ST_TO_ADDR
// sEarthquake := false ;
12602: LD_ADDR_EXP 55
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// sAI := false ;
12610: LD_ADDR_EXP 56
12614: PUSH
12615: LD_INT 0
12617: ST_TO_ADDR
// sCargo := false ;
12618: LD_ADDR_EXP 59
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// sDLaser := false ;
12626: LD_ADDR_EXP 60
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// sExchange := false ;
12634: LD_ADDR_EXP 61
12638: PUSH
12639: LD_INT 0
12641: ST_TO_ADDR
// sFac := false ;
12642: LD_ADDR_EXP 62
12646: PUSH
12647: LD_INT 0
12649: ST_TO_ADDR
// sPower := false ;
12650: LD_ADDR_EXP 63
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
// sRandom := false ;
12658: LD_ADDR_EXP 64
12662: PUSH
12663: LD_INT 0
12665: ST_TO_ADDR
// sShield := false ;
12666: LD_ADDR_EXP 65
12670: PUSH
12671: LD_INT 0
12673: ST_TO_ADDR
// sTime := false ;
12674: LD_ADDR_EXP 66
12678: PUSH
12679: LD_INT 0
12681: ST_TO_ADDR
// sTools := false ;
12682: LD_ADDR_EXP 67
12686: PUSH
12687: LD_INT 0
12689: ST_TO_ADDR
// sSold := false ;
12690: LD_ADDR_EXP 32
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// sDiff := false ;
12698: LD_ADDR_EXP 33
12702: PUSH
12703: LD_INT 0
12705: ST_TO_ADDR
// sFog := false ;
12706: LD_ADDR_EXP 36
12710: PUSH
12711: LD_INT 0
12713: ST_TO_ADDR
// sReset := false ;
12714: LD_ADDR_EXP 37
12718: PUSH
12719: LD_INT 0
12721: ST_TO_ADDR
// sSun := false ;
12722: LD_ADDR_EXP 38
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// sTiger := false ;
12730: LD_ADDR_EXP 34
12734: PUSH
12735: LD_INT 0
12737: ST_TO_ADDR
// sBomb := false ;
12738: LD_ADDR_EXP 35
12742: PUSH
12743: LD_INT 0
12745: ST_TO_ADDR
// sWound := false ;
12746: LD_ADDR_EXP 43
12750: PUSH
12751: LD_INT 0
12753: ST_TO_ADDR
// sBetray := false ;
12754: LD_ADDR_EXP 47
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// sContamin := false ;
12762: LD_ADDR_EXP 48
12766: PUSH
12767: LD_INT 0
12769: ST_TO_ADDR
// sOil := false ;
12770: LD_ADDR_EXP 50
12774: PUSH
12775: LD_INT 0
12777: ST_TO_ADDR
// sStu := false ;
12778: LD_ADDR_EXP 54
12782: PUSH
12783: LD_INT 0
12785: ST_TO_ADDR
// sBazooka := false ;
12786: LD_ADDR_EXP 57
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// sMortar := false ;
12794: LD_ADDR_EXP 58
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// sRanger := false ;
12802: LD_ADDR_EXP 68
12806: PUSH
12807: LD_INT 0
12809: ST_TO_ADDR
// sComputer := false ;
12810: LD_ADDR_EXP 69
12814: PUSH
12815: LD_INT 0
12817: ST_TO_ADDR
// s30 := false ;
12818: LD_ADDR_EXP 70
12822: PUSH
12823: LD_INT 0
12825: ST_TO_ADDR
// s60 := false ;
12826: LD_ADDR_EXP 71
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// end ;
12834: LD_VAR 0 1
12838: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12839: LD_INT 0
12841: PPUSH
12842: PPUSH
12843: PPUSH
12844: PPUSH
12845: PPUSH
12846: PPUSH
12847: PPUSH
// result := [ ] ;
12848: LD_ADDR_VAR 0 2
12852: PUSH
12853: EMPTY
12854: ST_TO_ADDR
// if campaign_id = 1 then
12855: LD_OWVAR 69
12859: PUSH
12860: LD_INT 1
12862: EQUAL
12863: IFFALSE 16029
// begin case mission_number of 1 :
12865: LD_OWVAR 70
12869: PUSH
12870: LD_INT 1
12872: DOUBLE
12873: EQUAL
12874: IFTRUE 12878
12876: GO 12954
12878: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12879: LD_ADDR_VAR 0 2
12883: PUSH
12884: LD_INT 2
12886: PUSH
12887: LD_INT 4
12889: PUSH
12890: LD_INT 11
12892: PUSH
12893: LD_INT 12
12895: PUSH
12896: LD_INT 15
12898: PUSH
12899: LD_INT 16
12901: PUSH
12902: LD_INT 22
12904: PUSH
12905: LD_INT 23
12907: PUSH
12908: LD_INT 26
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: PUSH
12922: LD_INT 101
12924: PUSH
12925: LD_INT 102
12927: PUSH
12928: LD_INT 106
12930: PUSH
12931: LD_INT 116
12933: PUSH
12934: LD_INT 117
12936: PUSH
12937: LD_INT 118
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: ST_TO_ADDR
12952: GO 16027
12954: LD_INT 2
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 13046
12962: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12963: LD_ADDR_VAR 0 2
12967: PUSH
12968: LD_INT 2
12970: PUSH
12971: LD_INT 4
12973: PUSH
12974: LD_INT 11
12976: PUSH
12977: LD_INT 12
12979: PUSH
12980: LD_INT 15
12982: PUSH
12983: LD_INT 16
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_INT 23
12991: PUSH
12992: LD_INT 26
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: PUSH
13006: LD_INT 101
13008: PUSH
13009: LD_INT 102
13011: PUSH
13012: LD_INT 105
13014: PUSH
13015: LD_INT 106
13017: PUSH
13018: LD_INT 108
13020: PUSH
13021: LD_INT 116
13023: PUSH
13024: LD_INT 117
13026: PUSH
13027: LD_INT 118
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: ST_TO_ADDR
13044: GO 16027
13046: LD_INT 3
13048: DOUBLE
13049: EQUAL
13050: IFTRUE 13054
13052: GO 13142
13054: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13055: LD_ADDR_VAR 0 2
13059: PUSH
13060: LD_INT 2
13062: PUSH
13063: LD_INT 4
13065: PUSH
13066: LD_INT 5
13068: PUSH
13069: LD_INT 11
13071: PUSH
13072: LD_INT 12
13074: PUSH
13075: LD_INT 15
13077: PUSH
13078: LD_INT 16
13080: PUSH
13081: LD_INT 22
13083: PUSH
13084: LD_INT 26
13086: PUSH
13087: LD_INT 36
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 101
13104: PUSH
13105: LD_INT 102
13107: PUSH
13108: LD_INT 105
13110: PUSH
13111: LD_INT 106
13113: PUSH
13114: LD_INT 108
13116: PUSH
13117: LD_INT 116
13119: PUSH
13120: LD_INT 117
13122: PUSH
13123: LD_INT 118
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: ST_TO_ADDR
13140: GO 16027
13142: LD_INT 4
13144: DOUBLE
13145: EQUAL
13146: IFTRUE 13150
13148: GO 13246
13150: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13151: LD_ADDR_VAR 0 2
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: LD_INT 4
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: LD_INT 8
13167: PUSH
13168: LD_INT 11
13170: PUSH
13171: LD_INT 12
13173: PUSH
13174: LD_INT 15
13176: PUSH
13177: LD_INT 16
13179: PUSH
13180: LD_INT 22
13182: PUSH
13183: LD_INT 23
13185: PUSH
13186: LD_INT 26
13188: PUSH
13189: LD_INT 36
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 101
13208: PUSH
13209: LD_INT 102
13211: PUSH
13212: LD_INT 105
13214: PUSH
13215: LD_INT 106
13217: PUSH
13218: LD_INT 108
13220: PUSH
13221: LD_INT 116
13223: PUSH
13224: LD_INT 117
13226: PUSH
13227: LD_INT 118
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: ST_TO_ADDR
13244: GO 16027
13246: LD_INT 5
13248: DOUBLE
13249: EQUAL
13250: IFTRUE 13254
13252: GO 13366
13254: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: LD_INT 4
13265: PUSH
13266: LD_INT 5
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: LD_INT 8
13274: PUSH
13275: LD_INT 11
13277: PUSH
13278: LD_INT 12
13280: PUSH
13281: LD_INT 15
13283: PUSH
13284: LD_INT 16
13286: PUSH
13287: LD_INT 22
13289: PUSH
13290: LD_INT 23
13292: PUSH
13293: LD_INT 25
13295: PUSH
13296: LD_INT 26
13298: PUSH
13299: LD_INT 36
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 101
13320: PUSH
13321: LD_INT 102
13323: PUSH
13324: LD_INT 105
13326: PUSH
13327: LD_INT 106
13329: PUSH
13330: LD_INT 108
13332: PUSH
13333: LD_INT 109
13335: PUSH
13336: LD_INT 112
13338: PUSH
13339: LD_INT 116
13341: PUSH
13342: LD_INT 117
13344: PUSH
13345: LD_INT 118
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: ST_TO_ADDR
13364: GO 16027
13366: LD_INT 6
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13506
13374: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13375: LD_ADDR_VAR 0 2
13379: PUSH
13380: LD_INT 2
13382: PUSH
13383: LD_INT 4
13385: PUSH
13386: LD_INT 5
13388: PUSH
13389: LD_INT 6
13391: PUSH
13392: LD_INT 8
13394: PUSH
13395: LD_INT 11
13397: PUSH
13398: LD_INT 12
13400: PUSH
13401: LD_INT 15
13403: PUSH
13404: LD_INT 16
13406: PUSH
13407: LD_INT 20
13409: PUSH
13410: LD_INT 21
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_INT 23
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 26
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: LD_INT 31
13430: PUSH
13431: LD_INT 32
13433: PUSH
13434: LD_INT 36
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 101
13460: PUSH
13461: LD_INT 102
13463: PUSH
13464: LD_INT 105
13466: PUSH
13467: LD_INT 106
13469: PUSH
13470: LD_INT 108
13472: PUSH
13473: LD_INT 109
13475: PUSH
13476: LD_INT 112
13478: PUSH
13479: LD_INT 116
13481: PUSH
13482: LD_INT 117
13484: PUSH
13485: LD_INT 118
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: ST_TO_ADDR
13504: GO 16027
13506: LD_INT 7
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13626
13514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13515: LD_ADDR_VAR 0 2
13519: PUSH
13520: LD_INT 2
13522: PUSH
13523: LD_INT 4
13525: PUSH
13526: LD_INT 5
13528: PUSH
13529: LD_INT 7
13531: PUSH
13532: LD_INT 11
13534: PUSH
13535: LD_INT 12
13537: PUSH
13538: LD_INT 15
13540: PUSH
13541: LD_INT 16
13543: PUSH
13544: LD_INT 20
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 22
13552: PUSH
13553: LD_INT 23
13555: PUSH
13556: LD_INT 25
13558: PUSH
13559: LD_INT 26
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 101
13580: PUSH
13581: LD_INT 102
13583: PUSH
13584: LD_INT 103
13586: PUSH
13587: LD_INT 105
13589: PUSH
13590: LD_INT 106
13592: PUSH
13593: LD_INT 108
13595: PUSH
13596: LD_INT 112
13598: PUSH
13599: LD_INT 116
13601: PUSH
13602: LD_INT 117
13604: PUSH
13605: LD_INT 118
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: ST_TO_ADDR
13624: GO 16027
13626: LD_INT 8
13628: DOUBLE
13629: EQUAL
13630: IFTRUE 13634
13632: GO 13774
13634: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13635: LD_ADDR_VAR 0 2
13639: PUSH
13640: LD_INT 2
13642: PUSH
13643: LD_INT 4
13645: PUSH
13646: LD_INT 5
13648: PUSH
13649: LD_INT 6
13651: PUSH
13652: LD_INT 7
13654: PUSH
13655: LD_INT 8
13657: PUSH
13658: LD_INT 11
13660: PUSH
13661: LD_INT 12
13663: PUSH
13664: LD_INT 15
13666: PUSH
13667: LD_INT 16
13669: PUSH
13670: LD_INT 20
13672: PUSH
13673: LD_INT 21
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_INT 23
13681: PUSH
13682: LD_INT 25
13684: PUSH
13685: LD_INT 26
13687: PUSH
13688: LD_INT 30
13690: PUSH
13691: LD_INT 31
13693: PUSH
13694: LD_INT 32
13696: PUSH
13697: LD_INT 36
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 101
13724: PUSH
13725: LD_INT 102
13727: PUSH
13728: LD_INT 103
13730: PUSH
13731: LD_INT 105
13733: PUSH
13734: LD_INT 106
13736: PUSH
13737: LD_INT 108
13739: PUSH
13740: LD_INT 109
13742: PUSH
13743: LD_INT 112
13745: PUSH
13746: LD_INT 116
13748: PUSH
13749: LD_INT 117
13751: PUSH
13752: LD_INT 118
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: ST_TO_ADDR
13772: GO 16027
13774: LD_INT 9
13776: DOUBLE
13777: EQUAL
13778: IFTRUE 13782
13780: GO 13930
13782: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13783: LD_ADDR_VAR 0 2
13787: PUSH
13788: LD_INT 2
13790: PUSH
13791: LD_INT 4
13793: PUSH
13794: LD_INT 5
13796: PUSH
13797: LD_INT 6
13799: PUSH
13800: LD_INT 7
13802: PUSH
13803: LD_INT 8
13805: PUSH
13806: LD_INT 11
13808: PUSH
13809: LD_INT 12
13811: PUSH
13812: LD_INT 15
13814: PUSH
13815: LD_INT 16
13817: PUSH
13818: LD_INT 20
13820: PUSH
13821: LD_INT 21
13823: PUSH
13824: LD_INT 22
13826: PUSH
13827: LD_INT 23
13829: PUSH
13830: LD_INT 25
13832: PUSH
13833: LD_INT 26
13835: PUSH
13836: LD_INT 28
13838: PUSH
13839: LD_INT 30
13841: PUSH
13842: LD_INT 31
13844: PUSH
13845: LD_INT 32
13847: PUSH
13848: LD_INT 36
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 101
13876: PUSH
13877: LD_INT 102
13879: PUSH
13880: LD_INT 103
13882: PUSH
13883: LD_INT 105
13885: PUSH
13886: LD_INT 106
13888: PUSH
13889: LD_INT 108
13891: PUSH
13892: LD_INT 109
13894: PUSH
13895: LD_INT 112
13897: PUSH
13898: LD_INT 114
13900: PUSH
13901: LD_INT 116
13903: PUSH
13904: LD_INT 117
13906: PUSH
13907: LD_INT 118
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: ST_TO_ADDR
13928: GO 16027
13930: LD_INT 10
13932: DOUBLE
13933: EQUAL
13934: IFTRUE 13938
13936: GO 14134
13938: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13939: LD_ADDR_VAR 0 2
13943: PUSH
13944: LD_INT 2
13946: PUSH
13947: LD_INT 4
13949: PUSH
13950: LD_INT 5
13952: PUSH
13953: LD_INT 6
13955: PUSH
13956: LD_INT 7
13958: PUSH
13959: LD_INT 8
13961: PUSH
13962: LD_INT 9
13964: PUSH
13965: LD_INT 10
13967: PUSH
13968: LD_INT 11
13970: PUSH
13971: LD_INT 12
13973: PUSH
13974: LD_INT 13
13976: PUSH
13977: LD_INT 14
13979: PUSH
13980: LD_INT 15
13982: PUSH
13983: LD_INT 16
13985: PUSH
13986: LD_INT 17
13988: PUSH
13989: LD_INT 18
13991: PUSH
13992: LD_INT 19
13994: PUSH
13995: LD_INT 20
13997: PUSH
13998: LD_INT 21
14000: PUSH
14001: LD_INT 22
14003: PUSH
14004: LD_INT 23
14006: PUSH
14007: LD_INT 24
14009: PUSH
14010: LD_INT 25
14012: PUSH
14013: LD_INT 26
14015: PUSH
14016: LD_INT 28
14018: PUSH
14019: LD_INT 30
14021: PUSH
14022: LD_INT 31
14024: PUSH
14025: LD_INT 32
14027: PUSH
14028: LD_INT 36
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 101
14064: PUSH
14065: LD_INT 102
14067: PUSH
14068: LD_INT 103
14070: PUSH
14071: LD_INT 104
14073: PUSH
14074: LD_INT 105
14076: PUSH
14077: LD_INT 106
14079: PUSH
14080: LD_INT 107
14082: PUSH
14083: LD_INT 108
14085: PUSH
14086: LD_INT 109
14088: PUSH
14089: LD_INT 110
14091: PUSH
14092: LD_INT 111
14094: PUSH
14095: LD_INT 112
14097: PUSH
14098: LD_INT 114
14100: PUSH
14101: LD_INT 116
14103: PUSH
14104: LD_INT 117
14106: PUSH
14107: LD_INT 118
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
14132: GO 16027
14134: LD_INT 11
14136: DOUBLE
14137: EQUAL
14138: IFTRUE 14142
14140: GO 14346
14142: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14143: LD_ADDR_VAR 0 2
14147: PUSH
14148: LD_INT 2
14150: PUSH
14151: LD_INT 3
14153: PUSH
14154: LD_INT 4
14156: PUSH
14157: LD_INT 5
14159: PUSH
14160: LD_INT 6
14162: PUSH
14163: LD_INT 7
14165: PUSH
14166: LD_INT 8
14168: PUSH
14169: LD_INT 9
14171: PUSH
14172: LD_INT 10
14174: PUSH
14175: LD_INT 11
14177: PUSH
14178: LD_INT 12
14180: PUSH
14181: LD_INT 13
14183: PUSH
14184: LD_INT 14
14186: PUSH
14187: LD_INT 15
14189: PUSH
14190: LD_INT 16
14192: PUSH
14193: LD_INT 17
14195: PUSH
14196: LD_INT 18
14198: PUSH
14199: LD_INT 19
14201: PUSH
14202: LD_INT 20
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 22
14210: PUSH
14211: LD_INT 23
14213: PUSH
14214: LD_INT 24
14216: PUSH
14217: LD_INT 25
14219: PUSH
14220: LD_INT 26
14222: PUSH
14223: LD_INT 28
14225: PUSH
14226: LD_INT 30
14228: PUSH
14229: LD_INT 31
14231: PUSH
14232: LD_INT 32
14234: PUSH
14235: LD_INT 34
14237: PUSH
14238: LD_INT 36
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 101
14276: PUSH
14277: LD_INT 102
14279: PUSH
14280: LD_INT 103
14282: PUSH
14283: LD_INT 104
14285: PUSH
14286: LD_INT 105
14288: PUSH
14289: LD_INT 106
14291: PUSH
14292: LD_INT 107
14294: PUSH
14295: LD_INT 108
14297: PUSH
14298: LD_INT 109
14300: PUSH
14301: LD_INT 110
14303: PUSH
14304: LD_INT 111
14306: PUSH
14307: LD_INT 112
14309: PUSH
14310: LD_INT 114
14312: PUSH
14313: LD_INT 116
14315: PUSH
14316: LD_INT 117
14318: PUSH
14319: LD_INT 118
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: ST_TO_ADDR
14344: GO 16027
14346: LD_INT 12
14348: DOUBLE
14349: EQUAL
14350: IFTRUE 14354
14352: GO 14574
14354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14355: LD_ADDR_VAR 0 2
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: LD_INT 3
14368: PUSH
14369: LD_INT 4
14371: PUSH
14372: LD_INT 5
14374: PUSH
14375: LD_INT 6
14377: PUSH
14378: LD_INT 7
14380: PUSH
14381: LD_INT 8
14383: PUSH
14384: LD_INT 9
14386: PUSH
14387: LD_INT 10
14389: PUSH
14390: LD_INT 11
14392: PUSH
14393: LD_INT 12
14395: PUSH
14396: LD_INT 13
14398: PUSH
14399: LD_INT 14
14401: PUSH
14402: LD_INT 15
14404: PUSH
14405: LD_INT 16
14407: PUSH
14408: LD_INT 17
14410: PUSH
14411: LD_INT 18
14413: PUSH
14414: LD_INT 19
14416: PUSH
14417: LD_INT 20
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 22
14425: PUSH
14426: LD_INT 23
14428: PUSH
14429: LD_INT 24
14431: PUSH
14432: LD_INT 25
14434: PUSH
14435: LD_INT 26
14437: PUSH
14438: LD_INT 27
14440: PUSH
14441: LD_INT 28
14443: PUSH
14444: LD_INT 30
14446: PUSH
14447: LD_INT 31
14449: PUSH
14450: LD_INT 32
14452: PUSH
14453: LD_INT 33
14455: PUSH
14456: LD_INT 34
14458: PUSH
14459: LD_INT 36
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 101
14500: PUSH
14501: LD_INT 102
14503: PUSH
14504: LD_INT 103
14506: PUSH
14507: LD_INT 104
14509: PUSH
14510: LD_INT 105
14512: PUSH
14513: LD_INT 106
14515: PUSH
14516: LD_INT 107
14518: PUSH
14519: LD_INT 108
14521: PUSH
14522: LD_INT 109
14524: PUSH
14525: LD_INT 110
14527: PUSH
14528: LD_INT 111
14530: PUSH
14531: LD_INT 112
14533: PUSH
14534: LD_INT 113
14536: PUSH
14537: LD_INT 114
14539: PUSH
14540: LD_INT 116
14542: PUSH
14543: LD_INT 117
14545: PUSH
14546: LD_INT 118
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: ST_TO_ADDR
14572: GO 16027
14574: LD_INT 13
14576: DOUBLE
14577: EQUAL
14578: IFTRUE 14582
14580: GO 14790
14582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14583: LD_ADDR_VAR 0 2
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: LD_INT 2
14593: PUSH
14594: LD_INT 3
14596: PUSH
14597: LD_INT 4
14599: PUSH
14600: LD_INT 5
14602: PUSH
14603: LD_INT 8
14605: PUSH
14606: LD_INT 9
14608: PUSH
14609: LD_INT 10
14611: PUSH
14612: LD_INT 11
14614: PUSH
14615: LD_INT 12
14617: PUSH
14618: LD_INT 14
14620: PUSH
14621: LD_INT 15
14623: PUSH
14624: LD_INT 16
14626: PUSH
14627: LD_INT 17
14629: PUSH
14630: LD_INT 18
14632: PUSH
14633: LD_INT 19
14635: PUSH
14636: LD_INT 20
14638: PUSH
14639: LD_INT 21
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_INT 23
14647: PUSH
14648: LD_INT 24
14650: PUSH
14651: LD_INT 25
14653: PUSH
14654: LD_INT 26
14656: PUSH
14657: LD_INT 27
14659: PUSH
14660: LD_INT 28
14662: PUSH
14663: LD_INT 30
14665: PUSH
14666: LD_INT 31
14668: PUSH
14669: LD_INT 32
14671: PUSH
14672: LD_INT 33
14674: PUSH
14675: LD_INT 34
14677: PUSH
14678: LD_INT 36
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 101
14716: PUSH
14717: LD_INT 102
14719: PUSH
14720: LD_INT 103
14722: PUSH
14723: LD_INT 104
14725: PUSH
14726: LD_INT 105
14728: PUSH
14729: LD_INT 106
14731: PUSH
14732: LD_INT 107
14734: PUSH
14735: LD_INT 108
14737: PUSH
14738: LD_INT 109
14740: PUSH
14741: LD_INT 110
14743: PUSH
14744: LD_INT 111
14746: PUSH
14747: LD_INT 112
14749: PUSH
14750: LD_INT 113
14752: PUSH
14753: LD_INT 114
14755: PUSH
14756: LD_INT 116
14758: PUSH
14759: LD_INT 117
14761: PUSH
14762: LD_INT 118
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: ST_TO_ADDR
14788: GO 16027
14790: LD_INT 14
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14798
14796: GO 15022
14798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14799: LD_ADDR_VAR 0 2
14803: PUSH
14804: LD_INT 1
14806: PUSH
14807: LD_INT 2
14809: PUSH
14810: LD_INT 3
14812: PUSH
14813: LD_INT 4
14815: PUSH
14816: LD_INT 5
14818: PUSH
14819: LD_INT 6
14821: PUSH
14822: LD_INT 7
14824: PUSH
14825: LD_INT 8
14827: PUSH
14828: LD_INT 9
14830: PUSH
14831: LD_INT 10
14833: PUSH
14834: LD_INT 11
14836: PUSH
14837: LD_INT 12
14839: PUSH
14840: LD_INT 13
14842: PUSH
14843: LD_INT 14
14845: PUSH
14846: LD_INT 15
14848: PUSH
14849: LD_INT 16
14851: PUSH
14852: LD_INT 17
14854: PUSH
14855: LD_INT 18
14857: PUSH
14858: LD_INT 19
14860: PUSH
14861: LD_INT 20
14863: PUSH
14864: LD_INT 21
14866: PUSH
14867: LD_INT 22
14869: PUSH
14870: LD_INT 23
14872: PUSH
14873: LD_INT 24
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 26
14881: PUSH
14882: LD_INT 27
14884: PUSH
14885: LD_INT 28
14887: PUSH
14888: LD_INT 29
14890: PUSH
14891: LD_INT 30
14893: PUSH
14894: LD_INT 31
14896: PUSH
14897: LD_INT 32
14899: PUSH
14900: LD_INT 33
14902: PUSH
14903: LD_INT 34
14905: PUSH
14906: LD_INT 36
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 101
14948: PUSH
14949: LD_INT 102
14951: PUSH
14952: LD_INT 103
14954: PUSH
14955: LD_INT 104
14957: PUSH
14958: LD_INT 105
14960: PUSH
14961: LD_INT 106
14963: PUSH
14964: LD_INT 107
14966: PUSH
14967: LD_INT 108
14969: PUSH
14970: LD_INT 109
14972: PUSH
14973: LD_INT 110
14975: PUSH
14976: LD_INT 111
14978: PUSH
14979: LD_INT 112
14981: PUSH
14982: LD_INT 113
14984: PUSH
14985: LD_INT 114
14987: PUSH
14988: LD_INT 116
14990: PUSH
14991: LD_INT 117
14993: PUSH
14994: LD_INT 118
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: ST_TO_ADDR
15020: GO 16027
15022: LD_INT 15
15024: DOUBLE
15025: EQUAL
15026: IFTRUE 15030
15028: GO 15254
15030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15031: LD_ADDR_VAR 0 2
15035: PUSH
15036: LD_INT 1
15038: PUSH
15039: LD_INT 2
15041: PUSH
15042: LD_INT 3
15044: PUSH
15045: LD_INT 4
15047: PUSH
15048: LD_INT 5
15050: PUSH
15051: LD_INT 6
15053: PUSH
15054: LD_INT 7
15056: PUSH
15057: LD_INT 8
15059: PUSH
15060: LD_INT 9
15062: PUSH
15063: LD_INT 10
15065: PUSH
15066: LD_INT 11
15068: PUSH
15069: LD_INT 12
15071: PUSH
15072: LD_INT 13
15074: PUSH
15075: LD_INT 14
15077: PUSH
15078: LD_INT 15
15080: PUSH
15081: LD_INT 16
15083: PUSH
15084: LD_INT 17
15086: PUSH
15087: LD_INT 18
15089: PUSH
15090: LD_INT 19
15092: PUSH
15093: LD_INT 20
15095: PUSH
15096: LD_INT 21
15098: PUSH
15099: LD_INT 22
15101: PUSH
15102: LD_INT 23
15104: PUSH
15105: LD_INT 24
15107: PUSH
15108: LD_INT 25
15110: PUSH
15111: LD_INT 26
15113: PUSH
15114: LD_INT 27
15116: PUSH
15117: LD_INT 28
15119: PUSH
15120: LD_INT 29
15122: PUSH
15123: LD_INT 30
15125: PUSH
15126: LD_INT 31
15128: PUSH
15129: LD_INT 32
15131: PUSH
15132: LD_INT 33
15134: PUSH
15135: LD_INT 34
15137: PUSH
15138: LD_INT 36
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 101
15180: PUSH
15181: LD_INT 102
15183: PUSH
15184: LD_INT 103
15186: PUSH
15187: LD_INT 104
15189: PUSH
15190: LD_INT 105
15192: PUSH
15193: LD_INT 106
15195: PUSH
15196: LD_INT 107
15198: PUSH
15199: LD_INT 108
15201: PUSH
15202: LD_INT 109
15204: PUSH
15205: LD_INT 110
15207: PUSH
15208: LD_INT 111
15210: PUSH
15211: LD_INT 112
15213: PUSH
15214: LD_INT 113
15216: PUSH
15217: LD_INT 114
15219: PUSH
15220: LD_INT 116
15222: PUSH
15223: LD_INT 117
15225: PUSH
15226: LD_INT 118
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: ST_TO_ADDR
15252: GO 16027
15254: LD_INT 16
15256: DOUBLE
15257: EQUAL
15258: IFTRUE 15262
15260: GO 15398
15262: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15263: LD_ADDR_VAR 0 2
15267: PUSH
15268: LD_INT 2
15270: PUSH
15271: LD_INT 4
15273: PUSH
15274: LD_INT 5
15276: PUSH
15277: LD_INT 7
15279: PUSH
15280: LD_INT 11
15282: PUSH
15283: LD_INT 12
15285: PUSH
15286: LD_INT 15
15288: PUSH
15289: LD_INT 16
15291: PUSH
15292: LD_INT 20
15294: PUSH
15295: LD_INT 21
15297: PUSH
15298: LD_INT 22
15300: PUSH
15301: LD_INT 23
15303: PUSH
15304: LD_INT 25
15306: PUSH
15307: LD_INT 26
15309: PUSH
15310: LD_INT 30
15312: PUSH
15313: LD_INT 31
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: LD_INT 33
15321: PUSH
15322: LD_INT 34
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 101
15348: PUSH
15349: LD_INT 102
15351: PUSH
15352: LD_INT 103
15354: PUSH
15355: LD_INT 106
15357: PUSH
15358: LD_INT 108
15360: PUSH
15361: LD_INT 112
15363: PUSH
15364: LD_INT 113
15366: PUSH
15367: LD_INT 114
15369: PUSH
15370: LD_INT 116
15372: PUSH
15373: LD_INT 117
15375: PUSH
15376: LD_INT 118
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: ST_TO_ADDR
15396: GO 16027
15398: LD_INT 17
15400: DOUBLE
15401: EQUAL
15402: IFTRUE 15406
15404: GO 15630
15406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15407: LD_ADDR_VAR 0 2
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: LD_INT 5
15426: PUSH
15427: LD_INT 6
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 8
15435: PUSH
15436: LD_INT 9
15438: PUSH
15439: LD_INT 10
15441: PUSH
15442: LD_INT 11
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: LD_INT 13
15450: PUSH
15451: LD_INT 14
15453: PUSH
15454: LD_INT 15
15456: PUSH
15457: LD_INT 16
15459: PUSH
15460: LD_INT 17
15462: PUSH
15463: LD_INT 18
15465: PUSH
15466: LD_INT 19
15468: PUSH
15469: LD_INT 20
15471: PUSH
15472: LD_INT 21
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 23
15480: PUSH
15481: LD_INT 24
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 26
15489: PUSH
15490: LD_INT 27
15492: PUSH
15493: LD_INT 28
15495: PUSH
15496: LD_INT 29
15498: PUSH
15499: LD_INT 30
15501: PUSH
15502: LD_INT 31
15504: PUSH
15505: LD_INT 32
15507: PUSH
15508: LD_INT 33
15510: PUSH
15511: LD_INT 34
15513: PUSH
15514: LD_INT 36
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 101
15556: PUSH
15557: LD_INT 102
15559: PUSH
15560: LD_INT 103
15562: PUSH
15563: LD_INT 104
15565: PUSH
15566: LD_INT 105
15568: PUSH
15569: LD_INT 106
15571: PUSH
15572: LD_INT 107
15574: PUSH
15575: LD_INT 108
15577: PUSH
15578: LD_INT 109
15580: PUSH
15581: LD_INT 110
15583: PUSH
15584: LD_INT 111
15586: PUSH
15587: LD_INT 112
15589: PUSH
15590: LD_INT 113
15592: PUSH
15593: LD_INT 114
15595: PUSH
15596: LD_INT 116
15598: PUSH
15599: LD_INT 117
15601: PUSH
15602: LD_INT 118
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: ST_TO_ADDR
15628: GO 16027
15630: LD_INT 18
15632: DOUBLE
15633: EQUAL
15634: IFTRUE 15638
15636: GO 15786
15638: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15639: LD_ADDR_VAR 0 2
15643: PUSH
15644: LD_INT 2
15646: PUSH
15647: LD_INT 4
15649: PUSH
15650: LD_INT 5
15652: PUSH
15653: LD_INT 7
15655: PUSH
15656: LD_INT 11
15658: PUSH
15659: LD_INT 12
15661: PUSH
15662: LD_INT 15
15664: PUSH
15665: LD_INT 16
15667: PUSH
15668: LD_INT 20
15670: PUSH
15671: LD_INT 21
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_INT 23
15679: PUSH
15680: LD_INT 25
15682: PUSH
15683: LD_INT 26
15685: PUSH
15686: LD_INT 30
15688: PUSH
15689: LD_INT 31
15691: PUSH
15692: LD_INT 32
15694: PUSH
15695: LD_INT 33
15697: PUSH
15698: LD_INT 34
15700: PUSH
15701: LD_INT 35
15703: PUSH
15704: LD_INT 36
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 101
15732: PUSH
15733: LD_INT 102
15735: PUSH
15736: LD_INT 103
15738: PUSH
15739: LD_INT 106
15741: PUSH
15742: LD_INT 108
15744: PUSH
15745: LD_INT 112
15747: PUSH
15748: LD_INT 113
15750: PUSH
15751: LD_INT 114
15753: PUSH
15754: LD_INT 115
15756: PUSH
15757: LD_INT 116
15759: PUSH
15760: LD_INT 117
15762: PUSH
15763: LD_INT 118
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: ST_TO_ADDR
15784: GO 16027
15786: LD_INT 19
15788: DOUBLE
15789: EQUAL
15790: IFTRUE 15794
15792: GO 16026
15794: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15795: LD_ADDR_VAR 0 2
15799: PUSH
15800: LD_INT 1
15802: PUSH
15803: LD_INT 2
15805: PUSH
15806: LD_INT 3
15808: PUSH
15809: LD_INT 4
15811: PUSH
15812: LD_INT 5
15814: PUSH
15815: LD_INT 6
15817: PUSH
15818: LD_INT 7
15820: PUSH
15821: LD_INT 8
15823: PUSH
15824: LD_INT 9
15826: PUSH
15827: LD_INT 10
15829: PUSH
15830: LD_INT 11
15832: PUSH
15833: LD_INT 12
15835: PUSH
15836: LD_INT 13
15838: PUSH
15839: LD_INT 14
15841: PUSH
15842: LD_INT 15
15844: PUSH
15845: LD_INT 16
15847: PUSH
15848: LD_INT 17
15850: PUSH
15851: LD_INT 18
15853: PUSH
15854: LD_INT 19
15856: PUSH
15857: LD_INT 20
15859: PUSH
15860: LD_INT 21
15862: PUSH
15863: LD_INT 22
15865: PUSH
15866: LD_INT 23
15868: PUSH
15869: LD_INT 24
15871: PUSH
15872: LD_INT 25
15874: PUSH
15875: LD_INT 26
15877: PUSH
15878: LD_INT 27
15880: PUSH
15881: LD_INT 28
15883: PUSH
15884: LD_INT 29
15886: PUSH
15887: LD_INT 30
15889: PUSH
15890: LD_INT 31
15892: PUSH
15893: LD_INT 32
15895: PUSH
15896: LD_INT 33
15898: PUSH
15899: LD_INT 34
15901: PUSH
15902: LD_INT 35
15904: PUSH
15905: LD_INT 36
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 101
15948: PUSH
15949: LD_INT 102
15951: PUSH
15952: LD_INT 103
15954: PUSH
15955: LD_INT 104
15957: PUSH
15958: LD_INT 105
15960: PUSH
15961: LD_INT 106
15963: PUSH
15964: LD_INT 107
15966: PUSH
15967: LD_INT 108
15969: PUSH
15970: LD_INT 109
15972: PUSH
15973: LD_INT 110
15975: PUSH
15976: LD_INT 111
15978: PUSH
15979: LD_INT 112
15981: PUSH
15982: LD_INT 113
15984: PUSH
15985: LD_INT 114
15987: PUSH
15988: LD_INT 115
15990: PUSH
15991: LD_INT 116
15993: PUSH
15994: LD_INT 117
15996: PUSH
15997: LD_INT 118
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: ST_TO_ADDR
16024: GO 16027
16026: POP
// end else
16027: GO 16258
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16029: LD_ADDR_VAR 0 2
16033: PUSH
16034: LD_INT 1
16036: PUSH
16037: LD_INT 2
16039: PUSH
16040: LD_INT 3
16042: PUSH
16043: LD_INT 4
16045: PUSH
16046: LD_INT 5
16048: PUSH
16049: LD_INT 6
16051: PUSH
16052: LD_INT 7
16054: PUSH
16055: LD_INT 8
16057: PUSH
16058: LD_INT 9
16060: PUSH
16061: LD_INT 10
16063: PUSH
16064: LD_INT 11
16066: PUSH
16067: LD_INT 12
16069: PUSH
16070: LD_INT 13
16072: PUSH
16073: LD_INT 14
16075: PUSH
16076: LD_INT 15
16078: PUSH
16079: LD_INT 16
16081: PUSH
16082: LD_INT 17
16084: PUSH
16085: LD_INT 18
16087: PUSH
16088: LD_INT 19
16090: PUSH
16091: LD_INT 20
16093: PUSH
16094: LD_INT 21
16096: PUSH
16097: LD_INT 22
16099: PUSH
16100: LD_INT 23
16102: PUSH
16103: LD_INT 24
16105: PUSH
16106: LD_INT 25
16108: PUSH
16109: LD_INT 26
16111: PUSH
16112: LD_INT 27
16114: PUSH
16115: LD_INT 28
16117: PUSH
16118: LD_INT 29
16120: PUSH
16121: LD_INT 30
16123: PUSH
16124: LD_INT 31
16126: PUSH
16127: LD_INT 32
16129: PUSH
16130: LD_INT 33
16132: PUSH
16133: LD_INT 34
16135: PUSH
16136: LD_INT 35
16138: PUSH
16139: LD_INT 36
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 101
16182: PUSH
16183: LD_INT 102
16185: PUSH
16186: LD_INT 103
16188: PUSH
16189: LD_INT 104
16191: PUSH
16192: LD_INT 105
16194: PUSH
16195: LD_INT 106
16197: PUSH
16198: LD_INT 107
16200: PUSH
16201: LD_INT 108
16203: PUSH
16204: LD_INT 109
16206: PUSH
16207: LD_INT 110
16209: PUSH
16210: LD_INT 111
16212: PUSH
16213: LD_INT 112
16215: PUSH
16216: LD_INT 113
16218: PUSH
16219: LD_INT 114
16221: PUSH
16222: LD_INT 115
16224: PUSH
16225: LD_INT 116
16227: PUSH
16228: LD_INT 117
16230: PUSH
16231: LD_INT 118
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: ST_TO_ADDR
// if result then
16258: LD_VAR 0 2
16262: IFFALSE 17048
// begin normal :=  ;
16264: LD_ADDR_VAR 0 5
16268: PUSH
16269: LD_STRING 
16271: ST_TO_ADDR
// hardcore :=  ;
16272: LD_ADDR_VAR 0 6
16276: PUSH
16277: LD_STRING 
16279: ST_TO_ADDR
// active :=  ;
16280: LD_ADDR_VAR 0 7
16284: PUSH
16285: LD_STRING 
16287: ST_TO_ADDR
// for i = 1 to normalCounter do
16288: LD_ADDR_VAR 0 8
16292: PUSH
16293: DOUBLE
16294: LD_INT 1
16296: DEC
16297: ST_TO_ADDR
16298: LD_EXP 16
16302: PUSH
16303: FOR_TO
16304: IFFALSE 16405
// begin tmp := 0 ;
16306: LD_ADDR_VAR 0 3
16310: PUSH
16311: LD_STRING 0
16313: ST_TO_ADDR
// if result [ 1 ] then
16314: LD_VAR 0 2
16318: PUSH
16319: LD_INT 1
16321: ARRAY
16322: IFFALSE 16387
// if result [ 1 ] [ 1 ] = i then
16324: LD_VAR 0 2
16328: PUSH
16329: LD_INT 1
16331: ARRAY
16332: PUSH
16333: LD_INT 1
16335: ARRAY
16336: PUSH
16337: LD_VAR 0 8
16341: EQUAL
16342: IFFALSE 16387
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16344: LD_ADDR_VAR 0 2
16348: PUSH
16349: LD_VAR 0 2
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_VAR 0 2
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: LD_INT 1
16368: PPUSH
16369: CALL_OW 3
16373: PPUSH
16374: CALL_OW 1
16378: ST_TO_ADDR
// tmp := 1 ;
16379: LD_ADDR_VAR 0 3
16383: PUSH
16384: LD_STRING 1
16386: ST_TO_ADDR
// end ; normal := normal & tmp ;
16387: LD_ADDR_VAR 0 5
16391: PUSH
16392: LD_VAR 0 5
16396: PUSH
16397: LD_VAR 0 3
16401: STR
16402: ST_TO_ADDR
// end ;
16403: GO 16303
16405: POP
16406: POP
// for i = 1 to hardcoreCounter do
16407: LD_ADDR_VAR 0 8
16411: PUSH
16412: DOUBLE
16413: LD_INT 1
16415: DEC
16416: ST_TO_ADDR
16417: LD_EXP 17
16421: PUSH
16422: FOR_TO
16423: IFFALSE 16528
// begin tmp := 0 ;
16425: LD_ADDR_VAR 0 3
16429: PUSH
16430: LD_STRING 0
16432: ST_TO_ADDR
// if result [ 2 ] then
16433: LD_VAR 0 2
16437: PUSH
16438: LD_INT 2
16440: ARRAY
16441: IFFALSE 16510
// if result [ 2 ] [ 1 ] = 100 + i then
16443: LD_VAR 0 2
16447: PUSH
16448: LD_INT 2
16450: ARRAY
16451: PUSH
16452: LD_INT 1
16454: ARRAY
16455: PUSH
16456: LD_INT 100
16458: PUSH
16459: LD_VAR 0 8
16463: PLUS
16464: EQUAL
16465: IFFALSE 16510
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: LD_VAR 0 2
16476: PPUSH
16477: LD_INT 2
16479: PPUSH
16480: LD_VAR 0 2
16484: PUSH
16485: LD_INT 2
16487: ARRAY
16488: PPUSH
16489: LD_INT 1
16491: PPUSH
16492: CALL_OW 3
16496: PPUSH
16497: CALL_OW 1
16501: ST_TO_ADDR
// tmp := 1 ;
16502: LD_ADDR_VAR 0 3
16506: PUSH
16507: LD_STRING 1
16509: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16510: LD_ADDR_VAR 0 6
16514: PUSH
16515: LD_VAR 0 6
16519: PUSH
16520: LD_VAR 0 3
16524: STR
16525: ST_TO_ADDR
// end ;
16526: GO 16422
16528: POP
16529: POP
// if isGameLoad then
16530: LD_VAR 0 1
16534: IFFALSE 17009
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16536: LD_ADDR_VAR 0 4
16540: PUSH
16541: LD_EXP 20
16545: PUSH
16546: LD_EXP 19
16550: PUSH
16551: LD_EXP 21
16555: PUSH
16556: LD_EXP 18
16560: PUSH
16561: LD_EXP 22
16565: PUSH
16566: LD_EXP 23
16570: PUSH
16571: LD_EXP 24
16575: PUSH
16576: LD_EXP 25
16580: PUSH
16581: LD_EXP 26
16585: PUSH
16586: LD_EXP 27
16590: PUSH
16591: LD_EXP 28
16595: PUSH
16596: LD_EXP 29
16600: PUSH
16601: LD_EXP 30
16605: PUSH
16606: LD_EXP 31
16610: PUSH
16611: LD_EXP 39
16615: PUSH
16616: LD_EXP 40
16620: PUSH
16621: LD_EXP 41
16625: PUSH
16626: LD_EXP 42
16630: PUSH
16631: LD_EXP 44
16635: PUSH
16636: LD_EXP 45
16640: PUSH
16641: LD_EXP 46
16645: PUSH
16646: LD_EXP 49
16650: PUSH
16651: LD_EXP 51
16655: PUSH
16656: LD_EXP 52
16660: PUSH
16661: LD_EXP 53
16665: PUSH
16666: LD_EXP 55
16670: PUSH
16671: LD_EXP 56
16675: PUSH
16676: LD_EXP 59
16680: PUSH
16681: LD_EXP 60
16685: PUSH
16686: LD_EXP 61
16690: PUSH
16691: LD_EXP 62
16695: PUSH
16696: LD_EXP 63
16700: PUSH
16701: LD_EXP 64
16705: PUSH
16706: LD_EXP 65
16710: PUSH
16711: LD_EXP 66
16715: PUSH
16716: LD_EXP 67
16720: PUSH
16721: LD_EXP 32
16725: PUSH
16726: LD_EXP 33
16730: PUSH
16731: LD_EXP 36
16735: PUSH
16736: LD_EXP 37
16740: PUSH
16741: LD_EXP 38
16745: PUSH
16746: LD_EXP 34
16750: PUSH
16751: LD_EXP 35
16755: PUSH
16756: LD_EXP 43
16760: PUSH
16761: LD_EXP 47
16765: PUSH
16766: LD_EXP 48
16770: PUSH
16771: LD_EXP 50
16775: PUSH
16776: LD_EXP 54
16780: PUSH
16781: LD_EXP 57
16785: PUSH
16786: LD_EXP 58
16790: PUSH
16791: LD_EXP 68
16795: PUSH
16796: LD_EXP 69
16800: PUSH
16801: LD_EXP 70
16805: PUSH
16806: LD_EXP 71
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: ST_TO_ADDR
// tmp :=  ;
16867: LD_ADDR_VAR 0 3
16871: PUSH
16872: LD_STRING 
16874: ST_TO_ADDR
// for i = 1 to normalCounter do
16875: LD_ADDR_VAR 0 8
16879: PUSH
16880: DOUBLE
16881: LD_INT 1
16883: DEC
16884: ST_TO_ADDR
16885: LD_EXP 16
16889: PUSH
16890: FOR_TO
16891: IFFALSE 16927
// begin if flags [ i ] then
16893: LD_VAR 0 4
16897: PUSH
16898: LD_VAR 0 8
16902: ARRAY
16903: IFFALSE 16925
// tmp := tmp & i & ; ;
16905: LD_ADDR_VAR 0 3
16909: PUSH
16910: LD_VAR 0 3
16914: PUSH
16915: LD_VAR 0 8
16919: STR
16920: PUSH
16921: LD_STRING ;
16923: STR
16924: ST_TO_ADDR
// end ;
16925: GO 16890
16927: POP
16928: POP
// for i = 1 to hardcoreCounter do
16929: LD_ADDR_VAR 0 8
16933: PUSH
16934: DOUBLE
16935: LD_INT 1
16937: DEC
16938: ST_TO_ADDR
16939: LD_EXP 17
16943: PUSH
16944: FOR_TO
16945: IFFALSE 16991
// begin if flags [ normalCounter + i ] then
16947: LD_VAR 0 4
16951: PUSH
16952: LD_EXP 16
16956: PUSH
16957: LD_VAR 0 8
16961: PLUS
16962: ARRAY
16963: IFFALSE 16989
// tmp := tmp & ( 100 + i ) & ; ;
16965: LD_ADDR_VAR 0 3
16969: PUSH
16970: LD_VAR 0 3
16974: PUSH
16975: LD_INT 100
16977: PUSH
16978: LD_VAR 0 8
16982: PLUS
16983: STR
16984: PUSH
16985: LD_STRING ;
16987: STR
16988: ST_TO_ADDR
// end ;
16989: GO 16944
16991: POP
16992: POP
// if tmp then
16993: LD_VAR 0 3
16997: IFFALSE 17009
// active := tmp ;
16999: LD_ADDR_VAR 0 7
17003: PUSH
17004: LD_VAR 0 3
17008: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17009: LD_STRING getStreamItemsFromMission("
17011: PUSH
17012: LD_VAR 0 5
17016: STR
17017: PUSH
17018: LD_STRING ","
17020: STR
17021: PUSH
17022: LD_VAR 0 6
17026: STR
17027: PUSH
17028: LD_STRING ","
17030: STR
17031: PUSH
17032: LD_VAR 0 7
17036: STR
17037: PUSH
17038: LD_STRING ")
17040: STR
17041: PPUSH
17042: CALL_OW 559
// end else
17046: GO 17055
// ToLua ( getStreamItemsFromMission("","","") ) ;
17048: LD_STRING getStreamItemsFromMission("","","")
17050: PPUSH
17051: CALL_OW 559
// end ;
17055: LD_VAR 0 2
17059: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17060: LD_EXP 15
17064: IFFALSE 17072
17066: PUSH
17067: LD_EXP 20
17071: AND
17072: IFFALSE 17196
17074: GO 17076
17076: DISABLE
17077: LD_INT 0
17079: PPUSH
17080: PPUSH
// begin enable ;
17081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17082: LD_ADDR_VAR 0 2
17086: PUSH
17087: LD_INT 22
17089: PUSH
17090: LD_OWVAR 2
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 2
17101: PUSH
17102: LD_INT 34
17104: PUSH
17105: LD_INT 7
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 34
17114: PUSH
17115: LD_INT 45
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 34
17124: PUSH
17125: LD_INT 28
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 34
17134: PUSH
17135: LD_INT 47
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PPUSH
17153: CALL_OW 69
17157: ST_TO_ADDR
// if not tmp then
17158: LD_VAR 0 2
17162: NOT
17163: IFFALSE 17167
// exit ;
17165: GO 17196
// for i in tmp do
17167: LD_ADDR_VAR 0 1
17171: PUSH
17172: LD_VAR 0 2
17176: PUSH
17177: FOR_IN
17178: IFFALSE 17194
// begin SetLives ( i , 0 ) ;
17180: LD_VAR 0 1
17184: PPUSH
17185: LD_INT 0
17187: PPUSH
17188: CALL_OW 234
// end ;
17192: GO 17177
17194: POP
17195: POP
// end ;
17196: PPOPN 2
17198: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17199: LD_EXP 15
17203: IFFALSE 17211
17205: PUSH
17206: LD_EXP 21
17210: AND
17211: IFFALSE 17295
17213: GO 17215
17215: DISABLE
17216: LD_INT 0
17218: PPUSH
17219: PPUSH
// begin enable ;
17220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17221: LD_ADDR_VAR 0 2
17225: PUSH
17226: LD_INT 22
17228: PUSH
17229: LD_OWVAR 2
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 32
17240: PUSH
17241: LD_INT 3
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PPUSH
17252: CALL_OW 69
17256: ST_TO_ADDR
// if not tmp then
17257: LD_VAR 0 2
17261: NOT
17262: IFFALSE 17266
// exit ;
17264: GO 17295
// for i in tmp do
17266: LD_ADDR_VAR 0 1
17270: PUSH
17271: LD_VAR 0 2
17275: PUSH
17276: FOR_IN
17277: IFFALSE 17293
// begin SetLives ( i , 0 ) ;
17279: LD_VAR 0 1
17283: PPUSH
17284: LD_INT 0
17286: PPUSH
17287: CALL_OW 234
// end ;
17291: GO 17276
17293: POP
17294: POP
// end ;
17295: PPOPN 2
17297: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17298: LD_EXP 15
17302: IFFALSE 17310
17304: PUSH
17305: LD_EXP 18
17309: AND
17310: IFFALSE 17403
17312: GO 17314
17314: DISABLE
17315: LD_INT 0
17317: PPUSH
// begin enable ;
17318: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17319: LD_ADDR_VAR 0 1
17323: PUSH
17324: LD_INT 22
17326: PUSH
17327: LD_OWVAR 2
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 2
17338: PUSH
17339: LD_INT 25
17341: PUSH
17342: LD_INT 5
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 25
17351: PUSH
17352: LD_INT 9
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 25
17361: PUSH
17362: LD_INT 8
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: PUSH
17384: FOR_IN
17385: IFFALSE 17401
// begin SetClass ( i , 1 ) ;
17387: LD_VAR 0 1
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 336
// end ;
17399: GO 17384
17401: POP
17402: POP
// end ;
17403: PPOPN 1
17405: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17406: LD_EXP 15
17410: IFFALSE 17418
17412: PUSH
17413: LD_EXP 19
17417: AND
17418: IFFALSE 17430
17420: PUSH
17421: LD_OWVAR 65
17425: PUSH
17426: LD_INT 7
17428: LESS
17429: AND
17430: IFFALSE 17444
17432: GO 17434
17434: DISABLE
// begin enable ;
17435: ENABLE
// game_speed := 7 ;
17436: LD_ADDR_OWVAR 65
17440: PUSH
17441: LD_INT 7
17443: ST_TO_ADDR
// end ;
17444: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17445: LD_EXP 15
17449: IFFALSE 17457
17451: PUSH
17452: LD_EXP 22
17456: AND
17457: IFFALSE 17659
17459: GO 17461
17461: DISABLE
17462: LD_INT 0
17464: PPUSH
17465: PPUSH
17466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17467: LD_ADDR_VAR 0 3
17471: PUSH
17472: LD_INT 81
17474: PUSH
17475: LD_OWVAR 2
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 21
17486: PUSH
17487: LD_INT 1
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PPUSH
17498: CALL_OW 69
17502: ST_TO_ADDR
// if not tmp then
17503: LD_VAR 0 3
17507: NOT
17508: IFFALSE 17512
// exit ;
17510: GO 17659
// if tmp > 5 then
17512: LD_VAR 0 3
17516: PUSH
17517: LD_INT 5
17519: GREATER
17520: IFFALSE 17532
// k := 5 else
17522: LD_ADDR_VAR 0 2
17526: PUSH
17527: LD_INT 5
17529: ST_TO_ADDR
17530: GO 17542
// k := tmp ;
17532: LD_ADDR_VAR 0 2
17536: PUSH
17537: LD_VAR 0 3
17541: ST_TO_ADDR
// for i := 1 to k do
17542: LD_ADDR_VAR 0 1
17546: PUSH
17547: DOUBLE
17548: LD_INT 1
17550: DEC
17551: ST_TO_ADDR
17552: LD_VAR 0 2
17556: PUSH
17557: FOR_TO
17558: IFFALSE 17657
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17560: LD_VAR 0 3
17564: PUSH
17565: LD_VAR 0 1
17569: ARRAY
17570: PPUSH
17571: LD_VAR 0 1
17575: PUSH
17576: LD_INT 4
17578: MOD
17579: PUSH
17580: LD_INT 1
17582: PLUS
17583: PPUSH
17584: CALL_OW 259
17588: PUSH
17589: LD_INT 10
17591: LESS
17592: IFFALSE 17655
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17594: LD_VAR 0 3
17598: PUSH
17599: LD_VAR 0 1
17603: ARRAY
17604: PPUSH
17605: LD_VAR 0 1
17609: PUSH
17610: LD_INT 4
17612: MOD
17613: PUSH
17614: LD_INT 1
17616: PLUS
17617: PPUSH
17618: LD_VAR 0 3
17622: PUSH
17623: LD_VAR 0 1
17627: ARRAY
17628: PPUSH
17629: LD_VAR 0 1
17633: PUSH
17634: LD_INT 4
17636: MOD
17637: PUSH
17638: LD_INT 1
17640: PLUS
17641: PPUSH
17642: CALL_OW 259
17646: PUSH
17647: LD_INT 1
17649: PLUS
17650: PPUSH
17651: CALL_OW 237
17655: GO 17557
17657: POP
17658: POP
// end ;
17659: PPOPN 3
17661: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17662: LD_EXP 15
17666: IFFALSE 17674
17668: PUSH
17669: LD_EXP 23
17673: AND
17674: IFFALSE 17694
17676: GO 17678
17678: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17679: LD_INT 4
17681: PPUSH
17682: LD_OWVAR 2
17686: PPUSH
17687: LD_INT 0
17689: PPUSH
17690: CALL_OW 324
17694: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17695: LD_EXP 15
17699: IFFALSE 17707
17701: PUSH
17702: LD_EXP 52
17706: AND
17707: IFFALSE 17727
17709: GO 17711
17711: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17712: LD_INT 19
17714: PPUSH
17715: LD_OWVAR 2
17719: PPUSH
17720: LD_INT 0
17722: PPUSH
17723: CALL_OW 324
17727: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17728: LD_EXP 15
17732: IFFALSE 17740
17734: PUSH
17735: LD_EXP 24
17739: AND
17740: IFFALSE 17842
17742: GO 17744
17744: DISABLE
17745: LD_INT 0
17747: PPUSH
17748: PPUSH
// begin enable ;
17749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17750: LD_ADDR_VAR 0 2
17754: PUSH
17755: LD_INT 22
17757: PUSH
17758: LD_OWVAR 2
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 2
17769: PUSH
17770: LD_INT 34
17772: PUSH
17773: LD_INT 11
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 34
17782: PUSH
17783: LD_INT 30
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: ST_TO_ADDR
// if not tmp then
17804: LD_VAR 0 2
17808: NOT
17809: IFFALSE 17813
// exit ;
17811: GO 17842
// for i in tmp do
17813: LD_ADDR_VAR 0 1
17817: PUSH
17818: LD_VAR 0 2
17822: PUSH
17823: FOR_IN
17824: IFFALSE 17840
// begin SetLives ( i , 0 ) ;
17826: LD_VAR 0 1
17830: PPUSH
17831: LD_INT 0
17833: PPUSH
17834: CALL_OW 234
// end ;
17838: GO 17823
17840: POP
17841: POP
// end ;
17842: PPOPN 2
17844: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17845: LD_EXP 15
17849: IFFALSE 17857
17851: PUSH
17852: LD_EXP 25
17856: AND
17857: IFFALSE 17877
17859: GO 17861
17861: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17862: LD_INT 32
17864: PPUSH
17865: LD_OWVAR 2
17869: PPUSH
17870: LD_INT 0
17872: PPUSH
17873: CALL_OW 324
17877: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17878: LD_EXP 15
17882: IFFALSE 17890
17884: PUSH
17885: LD_EXP 26
17889: AND
17890: IFFALSE 18073
17892: GO 17894
17894: DISABLE
17895: LD_INT 0
17897: PPUSH
17898: PPUSH
17899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17900: LD_ADDR_VAR 0 2
17904: PUSH
17905: LD_INT 22
17907: PUSH
17908: LD_OWVAR 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 33
17919: PUSH
17920: LD_INT 3
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PPUSH
17931: CALL_OW 69
17935: ST_TO_ADDR
// if not tmp then
17936: LD_VAR 0 2
17940: NOT
17941: IFFALSE 17945
// exit ;
17943: GO 18073
// side := 0 ;
17945: LD_ADDR_VAR 0 3
17949: PUSH
17950: LD_INT 0
17952: ST_TO_ADDR
// for i := 1 to 8 do
17953: LD_ADDR_VAR 0 1
17957: PUSH
17958: DOUBLE
17959: LD_INT 1
17961: DEC
17962: ST_TO_ADDR
17963: LD_INT 8
17965: PUSH
17966: FOR_TO
17967: IFFALSE 18017
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17969: LD_OWVAR 2
17973: PUSH
17974: LD_VAR 0 1
17978: NONEQUAL
17979: IFFALSE 18001
17981: PUSH
17982: LD_OWVAR 2
17986: PPUSH
17987: LD_VAR 0 1
17991: PPUSH
17992: CALL_OW 81
17996: PUSH
17997: LD_INT 2
17999: EQUAL
18000: AND
18001: IFFALSE 18015
// begin side := i ;
18003: LD_ADDR_VAR 0 3
18007: PUSH
18008: LD_VAR 0 1
18012: ST_TO_ADDR
// break ;
18013: GO 18017
// end ;
18015: GO 17966
18017: POP
18018: POP
// if not side then
18019: LD_VAR 0 3
18023: NOT
18024: IFFALSE 18028
// exit ;
18026: GO 18073
// for i := 1 to tmp do
18028: LD_ADDR_VAR 0 1
18032: PUSH
18033: DOUBLE
18034: LD_INT 1
18036: DEC
18037: ST_TO_ADDR
18038: LD_VAR 0 2
18042: PUSH
18043: FOR_TO
18044: IFFALSE 18071
// if Prob ( 60 ) then
18046: LD_INT 60
18048: PPUSH
18049: CALL_OW 13
18053: IFFALSE 18069
// SetSide ( i , side ) ;
18055: LD_VAR 0 1
18059: PPUSH
18060: LD_VAR 0 3
18064: PPUSH
18065: CALL_OW 235
18069: GO 18043
18071: POP
18072: POP
// end ;
18073: PPOPN 3
18075: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18076: LD_EXP 15
18080: IFFALSE 18088
18082: PUSH
18083: LD_EXP 28
18087: AND
18088: IFFALSE 18207
18090: GO 18092
18092: DISABLE
18093: LD_INT 0
18095: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18096: LD_ADDR_VAR 0 1
18100: PUSH
18101: LD_INT 22
18103: PUSH
18104: LD_OWVAR 2
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 21
18115: PUSH
18116: LD_INT 1
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 3
18125: PUSH
18126: LD_INT 23
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: PUSH
18150: FOR_IN
18151: IFFALSE 18205
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18153: LD_VAR 0 1
18157: PPUSH
18158: CALL_OW 257
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 3
18171: PUSH
18172: LD_INT 4
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: IN
18181: IFFALSE 18203
// SetClass ( un , rand ( 1 , 4 ) ) ;
18183: LD_VAR 0 1
18187: PPUSH
18188: LD_INT 1
18190: PPUSH
18191: LD_INT 4
18193: PPUSH
18194: CALL_OW 12
18198: PPUSH
18199: CALL_OW 336
18203: GO 18150
18205: POP
18206: POP
// end ;
18207: PPOPN 1
18209: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18210: LD_EXP 15
18214: IFFALSE 18222
18216: PUSH
18217: LD_EXP 27
18221: AND
18222: IFFALSE 18301
18224: GO 18226
18226: DISABLE
18227: LD_INT 0
18229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18230: LD_ADDR_VAR 0 1
18234: PUSH
18235: LD_INT 22
18237: PUSH
18238: LD_OWVAR 2
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 21
18249: PUSH
18250: LD_INT 3
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PPUSH
18261: CALL_OW 69
18265: ST_TO_ADDR
// if not tmp then
18266: LD_VAR 0 1
18270: NOT
18271: IFFALSE 18275
// exit ;
18273: GO 18301
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18275: LD_VAR 0 1
18279: PUSH
18280: LD_INT 1
18282: PPUSH
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 12
18292: ARRAY
18293: PPUSH
18294: LD_INT 100
18296: PPUSH
18297: CALL_OW 234
// end ;
18301: PPOPN 1
18303: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18304: LD_EXP 15
18308: IFFALSE 18316
18310: PUSH
18311: LD_EXP 29
18315: AND
18316: IFFALSE 18414
18318: GO 18320
18320: DISABLE
18321: LD_INT 0
18323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18324: LD_ADDR_VAR 0 1
18328: PUSH
18329: LD_INT 22
18331: PUSH
18332: LD_OWVAR 2
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 21
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PPUSH
18355: CALL_OW 69
18359: ST_TO_ADDR
// if not tmp then
18360: LD_VAR 0 1
18364: NOT
18365: IFFALSE 18369
// exit ;
18367: GO 18414
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18369: LD_VAR 0 1
18373: PUSH
18374: LD_INT 1
18376: PPUSH
18377: LD_VAR 0 1
18381: PPUSH
18382: CALL_OW 12
18386: ARRAY
18387: PPUSH
18388: LD_INT 1
18390: PPUSH
18391: LD_INT 4
18393: PPUSH
18394: CALL_OW 12
18398: PPUSH
18399: LD_INT 3000
18401: PPUSH
18402: LD_INT 9000
18404: PPUSH
18405: CALL_OW 12
18409: PPUSH
18410: CALL_OW 492
// end ;
18414: PPOPN 1
18416: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18417: LD_EXP 15
18421: IFFALSE 18429
18423: PUSH
18424: LD_EXP 30
18428: AND
18429: IFFALSE 18449
18431: GO 18433
18433: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18434: LD_INT 1
18436: PPUSH
18437: LD_OWVAR 2
18441: PPUSH
18442: LD_INT 0
18444: PPUSH
18445: CALL_OW 324
18449: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18450: LD_EXP 15
18454: IFFALSE 18462
18456: PUSH
18457: LD_EXP 31
18461: AND
18462: IFFALSE 18545
18464: GO 18466
18466: DISABLE
18467: LD_INT 0
18469: PPUSH
18470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18471: LD_ADDR_VAR 0 2
18475: PUSH
18476: LD_INT 22
18478: PUSH
18479: LD_OWVAR 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 21
18490: PUSH
18491: LD_INT 3
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PPUSH
18502: CALL_OW 69
18506: ST_TO_ADDR
// if not tmp then
18507: LD_VAR 0 2
18511: NOT
18512: IFFALSE 18516
// exit ;
18514: GO 18545
// for i in tmp do
18516: LD_ADDR_VAR 0 1
18520: PUSH
18521: LD_VAR 0 2
18525: PUSH
18526: FOR_IN
18527: IFFALSE 18543
// SetBLevel ( i , 10 ) ;
18529: LD_VAR 0 1
18533: PPUSH
18534: LD_INT 10
18536: PPUSH
18537: CALL_OW 241
18541: GO 18526
18543: POP
18544: POP
// end ;
18545: PPOPN 2
18547: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18548: LD_EXP 15
18552: IFFALSE 18560
18554: PUSH
18555: LD_EXP 32
18559: AND
18560: IFFALSE 18671
18562: GO 18564
18564: DISABLE
18565: LD_INT 0
18567: PPUSH
18568: PPUSH
18569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18570: LD_ADDR_VAR 0 3
18574: PUSH
18575: LD_INT 22
18577: PUSH
18578: LD_OWVAR 2
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 25
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PPUSH
18601: CALL_OW 69
18605: ST_TO_ADDR
// if not tmp then
18606: LD_VAR 0 3
18610: NOT
18611: IFFALSE 18615
// exit ;
18613: GO 18671
// un := tmp [ rand ( 1 , tmp ) ] ;
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_VAR 0 3
18624: PUSH
18625: LD_INT 1
18627: PPUSH
18628: LD_VAR 0 3
18632: PPUSH
18633: CALL_OW 12
18637: ARRAY
18638: ST_TO_ADDR
// if Crawls ( un ) then
18639: LD_VAR 0 2
18643: PPUSH
18644: CALL_OW 318
18648: IFFALSE 18659
// ComWalk ( un ) ;
18650: LD_VAR 0 2
18654: PPUSH
18655: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18659: LD_VAR 0 2
18663: PPUSH
18664: LD_INT 5
18666: PPUSH
18667: CALL_OW 336
// end ;
18671: PPOPN 3
18673: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18674: LD_EXP 15
18678: IFFALSE 18686
18680: PUSH
18681: LD_EXP 33
18685: AND
18686: IFFALSE 18698
18688: PUSH
18689: LD_OWVAR 67
18693: PUSH
18694: LD_INT 4
18696: LESS
18697: AND
18698: IFFALSE 18717
18700: GO 18702
18702: DISABLE
// begin Difficulty := Difficulty + 1 ;
18703: LD_ADDR_OWVAR 67
18707: PUSH
18708: LD_OWVAR 67
18712: PUSH
18713: LD_INT 1
18715: PLUS
18716: ST_TO_ADDR
// end ;
18717: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18718: LD_EXP 15
18722: IFFALSE 18730
18724: PUSH
18725: LD_EXP 34
18729: AND
18730: IFFALSE 18833
18732: GO 18734
18734: DISABLE
18735: LD_INT 0
18737: PPUSH
// begin for i := 1 to 5 do
18738: LD_ADDR_VAR 0 1
18742: PUSH
18743: DOUBLE
18744: LD_INT 1
18746: DEC
18747: ST_TO_ADDR
18748: LD_INT 5
18750: PUSH
18751: FOR_TO
18752: IFFALSE 18831
// begin uc_nation := nation_nature ;
18754: LD_ADDR_OWVAR 21
18758: PUSH
18759: LD_INT 0
18761: ST_TO_ADDR
// uc_side := 0 ;
18762: LD_ADDR_OWVAR 20
18766: PUSH
18767: LD_INT 0
18769: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18770: LD_ADDR_OWVAR 29
18774: PUSH
18775: LD_INT 12
18777: PUSH
18778: LD_INT 12
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: ST_TO_ADDR
// hc_agressivity := 20 ;
18785: LD_ADDR_OWVAR 35
18789: PUSH
18790: LD_INT 20
18792: ST_TO_ADDR
// hc_class := class_tiger ;
18793: LD_ADDR_OWVAR 28
18797: PUSH
18798: LD_INT 14
18800: ST_TO_ADDR
// hc_gallery :=  ;
18801: LD_ADDR_OWVAR 33
18805: PUSH
18806: LD_STRING 
18808: ST_TO_ADDR
// hc_name :=  ;
18809: LD_ADDR_OWVAR 26
18813: PUSH
18814: LD_STRING 
18816: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18817: CALL_OW 44
18821: PPUSH
18822: LD_INT 0
18824: PPUSH
18825: CALL_OW 51
// end ;
18829: GO 18751
18831: POP
18832: POP
// end ;
18833: PPOPN 1
18835: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18836: LD_EXP 15
18840: IFFALSE 18848
18842: PUSH
18843: LD_EXP 35
18847: AND
18848: IFFALSE 18857
18850: GO 18852
18852: DISABLE
// StreamSibBomb ;
18853: CALL 18858 0 0
18857: END
// export function StreamSibBomb ; var i , x , y ; begin
18858: LD_INT 0
18860: PPUSH
18861: PPUSH
18862: PPUSH
18863: PPUSH
// result := false ;
18864: LD_ADDR_VAR 0 1
18868: PUSH
18869: LD_INT 0
18871: ST_TO_ADDR
// for i := 1 to 16 do
18872: LD_ADDR_VAR 0 2
18876: PUSH
18877: DOUBLE
18878: LD_INT 1
18880: DEC
18881: ST_TO_ADDR
18882: LD_INT 16
18884: PUSH
18885: FOR_TO
18886: IFFALSE 19085
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18888: LD_ADDR_VAR 0 3
18892: PUSH
18893: LD_INT 10
18895: PUSH
18896: LD_INT 20
18898: PUSH
18899: LD_INT 30
18901: PUSH
18902: LD_INT 40
18904: PUSH
18905: LD_INT 50
18907: PUSH
18908: LD_INT 60
18910: PUSH
18911: LD_INT 70
18913: PUSH
18914: LD_INT 80
18916: PUSH
18917: LD_INT 90
18919: PUSH
18920: LD_INT 100
18922: PUSH
18923: LD_INT 110
18925: PUSH
18926: LD_INT 120
18928: PUSH
18929: LD_INT 130
18931: PUSH
18932: LD_INT 140
18934: PUSH
18935: LD_INT 150
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 1
18957: PPUSH
18958: LD_INT 15
18960: PPUSH
18961: CALL_OW 12
18965: ARRAY
18966: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18967: LD_ADDR_VAR 0 4
18971: PUSH
18972: LD_INT 10
18974: PUSH
18975: LD_INT 20
18977: PUSH
18978: LD_INT 30
18980: PUSH
18981: LD_INT 40
18983: PUSH
18984: LD_INT 50
18986: PUSH
18987: LD_INT 60
18989: PUSH
18990: LD_INT 70
18992: PUSH
18993: LD_INT 80
18995: PUSH
18996: LD_INT 90
18998: PUSH
18999: LD_INT 100
19001: PUSH
19002: LD_INT 110
19004: PUSH
19005: LD_INT 120
19007: PUSH
19008: LD_INT 130
19010: PUSH
19011: LD_INT 140
19013: PUSH
19014: LD_INT 150
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 1
19036: PPUSH
19037: LD_INT 15
19039: PPUSH
19040: CALL_OW 12
19044: ARRAY
19045: ST_TO_ADDR
// if ValidHex ( x , y ) then
19046: LD_VAR 0 3
19050: PPUSH
19051: LD_VAR 0 4
19055: PPUSH
19056: CALL_OW 488
19060: IFFALSE 19083
// begin result := [ x , y ] ;
19062: LD_ADDR_VAR 0 1
19066: PUSH
19067: LD_VAR 0 3
19071: PUSH
19072: LD_VAR 0 4
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: ST_TO_ADDR
// break ;
19081: GO 19085
// end ; end ;
19083: GO 18885
19085: POP
19086: POP
// if result then
19087: LD_VAR 0 1
19091: IFFALSE 19151
// begin ToLua ( playSibBomb() ) ;
19093: LD_STRING playSibBomb()
19095: PPUSH
19096: CALL_OW 559
// wait ( 0 0$14 ) ;
19100: LD_INT 490
19102: PPUSH
19103: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19107: LD_VAR 0 1
19111: PUSH
19112: LD_INT 1
19114: ARRAY
19115: PPUSH
19116: LD_VAR 0 1
19120: PUSH
19121: LD_INT 2
19123: ARRAY
19124: PPUSH
19125: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19129: LD_VAR 0 1
19133: PUSH
19134: LD_INT 1
19136: ARRAY
19137: PPUSH
19138: LD_VAR 0 1
19142: PUSH
19143: LD_INT 2
19145: ARRAY
19146: PPUSH
19147: CALL_OW 429
// end ; end ;
19151: LD_VAR 0 1
19155: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19156: LD_EXP 15
19160: IFFALSE 19168
19162: PUSH
19163: LD_EXP 37
19167: AND
19168: IFFALSE 19180
19170: GO 19172
19172: DISABLE
// YouLost (  ) ;
19173: LD_STRING 
19175: PPUSH
19176: CALL_OW 104
19180: END
// every 0 0$1 trigger StreamModeActive and sFog do
19181: LD_EXP 15
19185: IFFALSE 19193
19187: PUSH
19188: LD_EXP 36
19192: AND
19193: IFFALSE 19207
19195: GO 19197
19197: DISABLE
// FogOff ( your_side ) ;
19198: LD_OWVAR 2
19202: PPUSH
19203: CALL_OW 344
19207: END
// every 0 0$1 trigger StreamModeActive and sSun do
19208: LD_EXP 15
19212: IFFALSE 19220
19214: PUSH
19215: LD_EXP 38
19219: AND
19220: IFFALSE 19248
19222: GO 19224
19224: DISABLE
// begin solar_recharge_percent := 0 ;
19225: LD_ADDR_OWVAR 79
19229: PUSH
19230: LD_INT 0
19232: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19233: LD_INT 10500
19235: PPUSH
19236: CALL_OW 67
// solar_recharge_percent := 100 ;
19240: LD_ADDR_OWVAR 79
19244: PUSH
19245: LD_INT 100
19247: ST_TO_ADDR
// end ;
19248: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19249: LD_EXP 15
19253: IFFALSE 19261
19255: PUSH
19256: LD_EXP 39
19260: AND
19261: IFFALSE 19500
19263: GO 19265
19265: DISABLE
19266: LD_INT 0
19268: PPUSH
19269: PPUSH
19270: PPUSH
// begin tmp := [ ] ;
19271: LD_ADDR_VAR 0 3
19275: PUSH
19276: EMPTY
19277: ST_TO_ADDR
// for i := 1 to 6 do
19278: LD_ADDR_VAR 0 1
19282: PUSH
19283: DOUBLE
19284: LD_INT 1
19286: DEC
19287: ST_TO_ADDR
19288: LD_INT 6
19290: PUSH
19291: FOR_TO
19292: IFFALSE 19397
// begin uc_nation := nation_nature ;
19294: LD_ADDR_OWVAR 21
19298: PUSH
19299: LD_INT 0
19301: ST_TO_ADDR
// uc_side := 0 ;
19302: LD_ADDR_OWVAR 20
19306: PUSH
19307: LD_INT 0
19309: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19310: LD_ADDR_OWVAR 29
19314: PUSH
19315: LD_INT 12
19317: PUSH
19318: LD_INT 12
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: ST_TO_ADDR
// hc_agressivity := 20 ;
19325: LD_ADDR_OWVAR 35
19329: PUSH
19330: LD_INT 20
19332: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19333: LD_ADDR_OWVAR 28
19337: PUSH
19338: LD_INT 17
19340: ST_TO_ADDR
// hc_gallery :=  ;
19341: LD_ADDR_OWVAR 33
19345: PUSH
19346: LD_STRING 
19348: ST_TO_ADDR
// hc_name :=  ;
19349: LD_ADDR_OWVAR 26
19353: PUSH
19354: LD_STRING 
19356: ST_TO_ADDR
// un := CreateHuman ;
19357: LD_ADDR_VAR 0 2
19361: PUSH
19362: CALL_OW 44
19366: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19367: LD_VAR 0 2
19371: PPUSH
19372: LD_INT 1
19374: PPUSH
19375: CALL_OW 51
// tmp := tmp ^ un ;
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_VAR 0 3
19388: PUSH
19389: LD_VAR 0 2
19393: ADD
19394: ST_TO_ADDR
// end ;
19395: GO 19291
19397: POP
19398: POP
// repeat wait ( 0 0$1 ) ;
19399: LD_INT 35
19401: PPUSH
19402: CALL_OW 67
// for un in tmp do
19406: LD_ADDR_VAR 0 2
19410: PUSH
19411: LD_VAR 0 3
19415: PUSH
19416: FOR_IN
19417: IFFALSE 19491
// begin if IsDead ( un ) then
19419: LD_VAR 0 2
19423: PPUSH
19424: CALL_OW 301
19428: IFFALSE 19448
// begin tmp := tmp diff un ;
19430: LD_ADDR_VAR 0 3
19434: PUSH
19435: LD_VAR 0 3
19439: PUSH
19440: LD_VAR 0 2
19444: DIFF
19445: ST_TO_ADDR
// continue ;
19446: GO 19416
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19448: LD_VAR 0 2
19452: PPUSH
19453: LD_INT 3
19455: PUSH
19456: LD_INT 22
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PPUSH
19470: CALL_OW 69
19474: PPUSH
19475: LD_VAR 0 2
19479: PPUSH
19480: CALL_OW 74
19484: PPUSH
19485: CALL_OW 115
// end ;
19489: GO 19416
19491: POP
19492: POP
// until not tmp ;
19493: LD_VAR 0 3
19497: NOT
19498: IFFALSE 19399
// end ;
19500: PPOPN 3
19502: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19503: LD_EXP 15
19507: IFFALSE 19515
19509: PUSH
19510: LD_EXP 40
19514: AND
19515: IFFALSE 19569
19517: GO 19519
19519: DISABLE
// begin ToLua ( displayTroll(); ) ;
19520: LD_STRING displayTroll();
19522: PPUSH
19523: CALL_OW 559
// wait ( 3 3$00 ) ;
19527: LD_INT 6300
19529: PPUSH
19530: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19534: LD_STRING hideTroll();
19536: PPUSH
19537: CALL_OW 559
// wait ( 1 1$00 ) ;
19541: LD_INT 2100
19543: PPUSH
19544: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19548: LD_STRING displayTroll();
19550: PPUSH
19551: CALL_OW 559
// wait ( 1 1$00 ) ;
19555: LD_INT 2100
19557: PPUSH
19558: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19562: LD_STRING hideTroll();
19564: PPUSH
19565: CALL_OW 559
// end ;
19569: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19570: LD_EXP 15
19574: IFFALSE 19582
19576: PUSH
19577: LD_EXP 41
19581: AND
19582: IFFALSE 19645
19584: GO 19586
19586: DISABLE
19587: LD_INT 0
19589: PPUSH
// begin p := 0 ;
19590: LD_ADDR_VAR 0 1
19594: PUSH
19595: LD_INT 0
19597: ST_TO_ADDR
// repeat game_speed := 1 ;
19598: LD_ADDR_OWVAR 65
19602: PUSH
19603: LD_INT 1
19605: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19606: LD_INT 35
19608: PPUSH
19609: CALL_OW 67
// p := p + 1 ;
19613: LD_ADDR_VAR 0 1
19617: PUSH
19618: LD_VAR 0 1
19622: PUSH
19623: LD_INT 1
19625: PLUS
19626: ST_TO_ADDR
// until p >= 60 ;
19627: LD_VAR 0 1
19631: PUSH
19632: LD_INT 60
19634: GREATEREQUAL
19635: IFFALSE 19598
// game_speed := 4 ;
19637: LD_ADDR_OWVAR 65
19641: PUSH
19642: LD_INT 4
19644: ST_TO_ADDR
// end ;
19645: PPOPN 1
19647: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19648: LD_EXP 15
19652: IFFALSE 19660
19654: PUSH
19655: LD_EXP 42
19659: AND
19660: IFFALSE 19806
19662: GO 19664
19664: DISABLE
19665: LD_INT 0
19667: PPUSH
19668: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19669: LD_ADDR_VAR 0 1
19673: PUSH
19674: LD_INT 22
19676: PUSH
19677: LD_OWVAR 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: LD_INT 30
19691: PUSH
19692: LD_INT 0
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 30
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: LIST
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PPUSH
19718: CALL_OW 69
19722: ST_TO_ADDR
// if not depot then
19723: LD_VAR 0 1
19727: NOT
19728: IFFALSE 19732
// exit ;
19730: GO 19806
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19732: LD_ADDR_VAR 0 2
19736: PUSH
19737: LD_VAR 0 1
19741: PUSH
19742: LD_INT 1
19744: PPUSH
19745: LD_VAR 0 1
19749: PPUSH
19750: CALL_OW 12
19754: ARRAY
19755: PPUSH
19756: CALL_OW 274
19760: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19761: LD_VAR 0 2
19765: PPUSH
19766: LD_INT 1
19768: PPUSH
19769: LD_INT 0
19771: PPUSH
19772: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19776: LD_VAR 0 2
19780: PPUSH
19781: LD_INT 2
19783: PPUSH
19784: LD_INT 0
19786: PPUSH
19787: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19791: LD_VAR 0 2
19795: PPUSH
19796: LD_INT 3
19798: PPUSH
19799: LD_INT 0
19801: PPUSH
19802: CALL_OW 277
// end ;
19806: PPOPN 2
19808: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19809: LD_EXP 15
19813: IFFALSE 19821
19815: PUSH
19816: LD_EXP 43
19820: AND
19821: IFFALSE 19918
19823: GO 19825
19825: DISABLE
19826: LD_INT 0
19828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19829: LD_ADDR_VAR 0 1
19833: PUSH
19834: LD_INT 22
19836: PUSH
19837: LD_OWVAR 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 21
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 3
19858: PUSH
19859: LD_INT 23
19861: PUSH
19862: LD_INT 0
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: PPUSH
19878: CALL_OW 69
19882: ST_TO_ADDR
// if not tmp then
19883: LD_VAR 0 1
19887: NOT
19888: IFFALSE 19892
// exit ;
19890: GO 19918
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19892: LD_VAR 0 1
19896: PUSH
19897: LD_INT 1
19899: PPUSH
19900: LD_VAR 0 1
19904: PPUSH
19905: CALL_OW 12
19909: ARRAY
19910: PPUSH
19911: LD_INT 200
19913: PPUSH
19914: CALL_OW 234
// end ;
19918: PPOPN 1
19920: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19921: LD_EXP 15
19925: IFFALSE 19933
19927: PUSH
19928: LD_EXP 44
19932: AND
19933: IFFALSE 20012
19935: GO 19937
19937: DISABLE
19938: LD_INT 0
19940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19941: LD_ADDR_VAR 0 1
19945: PUSH
19946: LD_INT 22
19948: PUSH
19949: LD_OWVAR 2
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 21
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PPUSH
19972: CALL_OW 69
19976: ST_TO_ADDR
// if not tmp then
19977: LD_VAR 0 1
19981: NOT
19982: IFFALSE 19986
// exit ;
19984: GO 20012
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19986: LD_VAR 0 1
19990: PUSH
19991: LD_INT 1
19993: PPUSH
19994: LD_VAR 0 1
19998: PPUSH
19999: CALL_OW 12
20003: ARRAY
20004: PPUSH
20005: LD_INT 60
20007: PPUSH
20008: CALL_OW 234
// end ;
20012: PPOPN 1
20014: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20015: LD_EXP 15
20019: IFFALSE 20027
20021: PUSH
20022: LD_EXP 45
20026: AND
20027: IFFALSE 20126
20029: GO 20031
20031: DISABLE
20032: LD_INT 0
20034: PPUSH
20035: PPUSH
// begin enable ;
20036: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20037: LD_ADDR_VAR 0 1
20041: PUSH
20042: LD_INT 22
20044: PUSH
20045: LD_OWVAR 2
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 61
20056: PUSH
20057: EMPTY
20058: LIST
20059: PUSH
20060: LD_INT 33
20062: PUSH
20063: LD_INT 2
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: LIST
20074: PPUSH
20075: CALL_OW 69
20079: ST_TO_ADDR
// if not tmp then
20080: LD_VAR 0 1
20084: NOT
20085: IFFALSE 20089
// exit ;
20087: GO 20126
// for i in tmp do
20089: LD_ADDR_VAR 0 2
20093: PUSH
20094: LD_VAR 0 1
20098: PUSH
20099: FOR_IN
20100: IFFALSE 20124
// if IsControledBy ( i ) then
20102: LD_VAR 0 2
20106: PPUSH
20107: CALL_OW 312
20111: IFFALSE 20122
// ComUnlink ( i ) ;
20113: LD_VAR 0 2
20117: PPUSH
20118: CALL_OW 136
20122: GO 20099
20124: POP
20125: POP
// end ;
20126: PPOPN 2
20128: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20129: LD_EXP 15
20133: IFFALSE 20141
20135: PUSH
20136: LD_EXP 46
20140: AND
20141: IFFALSE 20281
20143: GO 20145
20145: DISABLE
20146: LD_INT 0
20148: PPUSH
20149: PPUSH
// begin ToLua ( displayPowell(); ) ;
20150: LD_STRING displayPowell();
20152: PPUSH
20153: CALL_OW 559
// uc_side := 0 ;
20157: LD_ADDR_OWVAR 20
20161: PUSH
20162: LD_INT 0
20164: ST_TO_ADDR
// uc_nation := 2 ;
20165: LD_ADDR_OWVAR 21
20169: PUSH
20170: LD_INT 2
20172: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20173: LD_ADDR_OWVAR 37
20177: PUSH
20178: LD_INT 14
20180: ST_TO_ADDR
// vc_engine := engine_siberite ;
20181: LD_ADDR_OWVAR 39
20185: PUSH
20186: LD_INT 3
20188: ST_TO_ADDR
// vc_control := control_apeman ;
20189: LD_ADDR_OWVAR 38
20193: PUSH
20194: LD_INT 5
20196: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20197: LD_ADDR_OWVAR 40
20201: PUSH
20202: LD_INT 29
20204: ST_TO_ADDR
// un := CreateVehicle ;
20205: LD_ADDR_VAR 0 2
20209: PUSH
20210: CALL_OW 45
20214: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20215: LD_VAR 0 2
20219: PPUSH
20220: LD_INT 1
20222: PPUSH
20223: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20227: LD_INT 35
20229: PPUSH
20230: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20234: LD_VAR 0 2
20238: PPUSH
20239: LD_INT 22
20241: PUSH
20242: LD_OWVAR 2
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PPUSH
20251: CALL_OW 69
20255: PPUSH
20256: LD_VAR 0 2
20260: PPUSH
20261: CALL_OW 74
20265: PPUSH
20266: CALL_OW 115
// until IsDead ( un ) ;
20270: LD_VAR 0 2
20274: PPUSH
20275: CALL_OW 301
20279: IFFALSE 20227
// end ;
20281: PPOPN 2
20283: END
// every 0 0$1 trigger StreamModeActive and sStu do
20284: LD_EXP 15
20288: IFFALSE 20296
20290: PUSH
20291: LD_EXP 54
20295: AND
20296: IFFALSE 20312
20298: GO 20300
20300: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20301: LD_STRING displayStucuk();
20303: PPUSH
20304: CALL_OW 559
// ResetFog ;
20308: CALL_OW 335
// end ;
20312: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20313: LD_EXP 15
20317: IFFALSE 20325
20319: PUSH
20320: LD_EXP 47
20324: AND
20325: IFFALSE 20466
20327: GO 20329
20329: DISABLE
20330: LD_INT 0
20332: PPUSH
20333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20334: LD_ADDR_VAR 0 2
20338: PUSH
20339: LD_INT 22
20341: PUSH
20342: LD_OWVAR 2
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 21
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PPUSH
20365: CALL_OW 69
20369: ST_TO_ADDR
// if not tmp then
20370: LD_VAR 0 2
20374: NOT
20375: IFFALSE 20379
// exit ;
20377: GO 20466
// un := tmp [ rand ( 1 , tmp ) ] ;
20379: LD_ADDR_VAR 0 1
20383: PUSH
20384: LD_VAR 0 2
20388: PUSH
20389: LD_INT 1
20391: PPUSH
20392: LD_VAR 0 2
20396: PPUSH
20397: CALL_OW 12
20401: ARRAY
20402: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20403: LD_VAR 0 1
20407: PPUSH
20408: LD_INT 0
20410: PPUSH
20411: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20415: LD_VAR 0 1
20419: PPUSH
20420: LD_OWVAR 3
20424: PUSH
20425: LD_VAR 0 1
20429: DIFF
20430: PPUSH
20431: LD_VAR 0 1
20435: PPUSH
20436: CALL_OW 74
20440: PPUSH
20441: CALL_OW 115
// wait ( 0 0$20 ) ;
20445: LD_INT 700
20447: PPUSH
20448: CALL_OW 67
// SetSide ( un , your_side ) ;
20452: LD_VAR 0 1
20456: PPUSH
20457: LD_OWVAR 2
20461: PPUSH
20462: CALL_OW 235
// end ;
20466: PPOPN 2
20468: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20469: LD_EXP 15
20473: IFFALSE 20481
20475: PUSH
20476: LD_EXP 48
20480: AND
20481: IFFALSE 20587
20483: GO 20485
20485: DISABLE
20486: LD_INT 0
20488: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20489: LD_ADDR_VAR 0 1
20493: PUSH
20494: LD_INT 22
20496: PUSH
20497: LD_OWVAR 2
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 2
20508: PUSH
20509: LD_INT 30
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 30
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PPUSH
20538: CALL_OW 69
20542: ST_TO_ADDR
// if not depot then
20543: LD_VAR 0 1
20547: NOT
20548: IFFALSE 20552
// exit ;
20550: GO 20587
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20552: LD_VAR 0 1
20556: PUSH
20557: LD_INT 1
20559: ARRAY
20560: PPUSH
20561: CALL_OW 250
20565: PPUSH
20566: LD_VAR 0 1
20570: PUSH
20571: LD_INT 1
20573: ARRAY
20574: PPUSH
20575: CALL_OW 251
20579: PPUSH
20580: LD_INT 70
20582: PPUSH
20583: CALL_OW 495
// end ;
20587: PPOPN 1
20589: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20590: LD_EXP 15
20594: IFFALSE 20602
20596: PUSH
20597: LD_EXP 49
20601: AND
20602: IFFALSE 20813
20604: GO 20606
20606: DISABLE
20607: LD_INT 0
20609: PPUSH
20610: PPUSH
20611: PPUSH
20612: PPUSH
20613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20614: LD_ADDR_VAR 0 5
20618: PUSH
20619: LD_INT 22
20621: PUSH
20622: LD_OWVAR 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 21
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PPUSH
20645: CALL_OW 69
20649: ST_TO_ADDR
// if not tmp then
20650: LD_VAR 0 5
20654: NOT
20655: IFFALSE 20659
// exit ;
20657: GO 20813
// for i in tmp do
20659: LD_ADDR_VAR 0 1
20663: PUSH
20664: LD_VAR 0 5
20668: PUSH
20669: FOR_IN
20670: IFFALSE 20811
// begin d := rand ( 0 , 5 ) ;
20672: LD_ADDR_VAR 0 4
20676: PUSH
20677: LD_INT 0
20679: PPUSH
20680: LD_INT 5
20682: PPUSH
20683: CALL_OW 12
20687: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20688: LD_ADDR_VAR 0 2
20692: PUSH
20693: LD_VAR 0 1
20697: PPUSH
20698: CALL_OW 250
20702: PPUSH
20703: LD_VAR 0 4
20707: PPUSH
20708: LD_INT 3
20710: PPUSH
20711: LD_INT 12
20713: PPUSH
20714: CALL_OW 12
20718: PPUSH
20719: CALL_OW 272
20723: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20724: LD_ADDR_VAR 0 3
20728: PUSH
20729: LD_VAR 0 1
20733: PPUSH
20734: CALL_OW 251
20738: PPUSH
20739: LD_VAR 0 4
20743: PPUSH
20744: LD_INT 3
20746: PPUSH
20747: LD_INT 12
20749: PPUSH
20750: CALL_OW 12
20754: PPUSH
20755: CALL_OW 273
20759: ST_TO_ADDR
// if ValidHex ( x , y ) then
20760: LD_VAR 0 2
20764: PPUSH
20765: LD_VAR 0 3
20769: PPUSH
20770: CALL_OW 488
20774: IFFALSE 20809
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20776: LD_VAR 0 1
20780: PPUSH
20781: LD_VAR 0 2
20785: PPUSH
20786: LD_VAR 0 3
20790: PPUSH
20791: LD_INT 3
20793: PPUSH
20794: LD_INT 6
20796: PPUSH
20797: CALL_OW 12
20801: PPUSH
20802: LD_INT 1
20804: PPUSH
20805: CALL_OW 483
// end ;
20809: GO 20669
20811: POP
20812: POP
// end ;
20813: PPOPN 5
20815: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20816: LD_EXP 15
20820: IFFALSE 20828
20822: PUSH
20823: LD_EXP 50
20827: AND
20828: IFFALSE 20922
20830: GO 20832
20832: DISABLE
20833: LD_INT 0
20835: PPUSH
20836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20837: LD_ADDR_VAR 0 2
20841: PUSH
20842: LD_INT 22
20844: PUSH
20845: LD_OWVAR 2
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 32
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 21
20866: PUSH
20867: LD_INT 2
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: LIST
20878: PPUSH
20879: CALL_OW 69
20883: ST_TO_ADDR
// if not tmp then
20884: LD_VAR 0 2
20888: NOT
20889: IFFALSE 20893
// exit ;
20891: GO 20922
// for i in tmp do
20893: LD_ADDR_VAR 0 1
20897: PUSH
20898: LD_VAR 0 2
20902: PUSH
20903: FOR_IN
20904: IFFALSE 20920
// SetFuel ( i , 0 ) ;
20906: LD_VAR 0 1
20910: PPUSH
20911: LD_INT 0
20913: PPUSH
20914: CALL_OW 240
20918: GO 20903
20920: POP
20921: POP
// end ;
20922: PPOPN 2
20924: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20925: LD_EXP 15
20929: IFFALSE 20937
20931: PUSH
20932: LD_EXP 51
20936: AND
20937: IFFALSE 21003
20939: GO 20941
20941: DISABLE
20942: LD_INT 0
20944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20945: LD_ADDR_VAR 0 1
20949: PUSH
20950: LD_INT 22
20952: PUSH
20953: LD_OWVAR 2
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 30
20964: PUSH
20965: LD_INT 29
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PPUSH
20976: CALL_OW 69
20980: ST_TO_ADDR
// if not tmp then
20981: LD_VAR 0 1
20985: NOT
20986: IFFALSE 20990
// exit ;
20988: GO 21003
// DestroyUnit ( tmp [ 1 ] ) ;
20990: LD_VAR 0 1
20994: PUSH
20995: LD_INT 1
20997: ARRAY
20998: PPUSH
20999: CALL_OW 65
// end ;
21003: PPOPN 1
21005: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21006: LD_EXP 15
21010: IFFALSE 21018
21012: PUSH
21013: LD_EXP 53
21017: AND
21018: IFFALSE 21147
21020: GO 21022
21022: DISABLE
21023: LD_INT 0
21025: PPUSH
// begin uc_side := 0 ;
21026: LD_ADDR_OWVAR 20
21030: PUSH
21031: LD_INT 0
21033: ST_TO_ADDR
// uc_nation := nation_arabian ;
21034: LD_ADDR_OWVAR 21
21038: PUSH
21039: LD_INT 2
21041: ST_TO_ADDR
// hc_gallery :=  ;
21042: LD_ADDR_OWVAR 33
21046: PUSH
21047: LD_STRING 
21049: ST_TO_ADDR
// hc_name :=  ;
21050: LD_ADDR_OWVAR 26
21054: PUSH
21055: LD_STRING 
21057: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21058: LD_INT 1
21060: PPUSH
21061: LD_INT 11
21063: PPUSH
21064: LD_INT 10
21066: PPUSH
21067: CALL_OW 380
// un := CreateHuman ;
21071: LD_ADDR_VAR 0 1
21075: PUSH
21076: CALL_OW 44
21080: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21081: LD_VAR 0 1
21085: PPUSH
21086: LD_INT 1
21088: PPUSH
21089: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21093: LD_INT 35
21095: PPUSH
21096: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21100: LD_VAR 0 1
21104: PPUSH
21105: LD_INT 22
21107: PUSH
21108: LD_OWVAR 2
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PPUSH
21117: CALL_OW 69
21121: PPUSH
21122: LD_VAR 0 1
21126: PPUSH
21127: CALL_OW 74
21131: PPUSH
21132: CALL_OW 115
// until IsDead ( un ) ;
21136: LD_VAR 0 1
21140: PPUSH
21141: CALL_OW 301
21145: IFFALSE 21093
// end ;
21147: PPOPN 1
21149: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21150: LD_EXP 15
21154: IFFALSE 21162
21156: PUSH
21157: LD_EXP 55
21161: AND
21162: IFFALSE 21174
21164: GO 21166
21166: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21167: LD_STRING earthquake(getX(game), 0, 32)
21169: PPUSH
21170: CALL_OW 559
21174: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21175: LD_EXP 15
21179: IFFALSE 21187
21181: PUSH
21182: LD_EXP 56
21186: AND
21187: IFFALSE 21278
21189: GO 21191
21191: DISABLE
21192: LD_INT 0
21194: PPUSH
// begin enable ;
21195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21196: LD_ADDR_VAR 0 1
21200: PUSH
21201: LD_INT 22
21203: PUSH
21204: LD_OWVAR 2
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 21
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 33
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: PPUSH
21238: CALL_OW 69
21242: ST_TO_ADDR
// if not tmp then
21243: LD_VAR 0 1
21247: NOT
21248: IFFALSE 21252
// exit ;
21250: GO 21278
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21252: LD_VAR 0 1
21256: PUSH
21257: LD_INT 1
21259: PPUSH
21260: LD_VAR 0 1
21264: PPUSH
21265: CALL_OW 12
21269: ARRAY
21270: PPUSH
21271: LD_INT 1
21273: PPUSH
21274: CALL_OW 234
// end ;
21278: PPOPN 1
21280: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21281: LD_EXP 15
21285: IFFALSE 21293
21287: PUSH
21288: LD_EXP 57
21292: AND
21293: IFFALSE 21434
21295: GO 21297
21297: DISABLE
21298: LD_INT 0
21300: PPUSH
21301: PPUSH
21302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21303: LD_ADDR_VAR 0 3
21307: PUSH
21308: LD_INT 22
21310: PUSH
21311: LD_OWVAR 2
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 25
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PPUSH
21334: CALL_OW 69
21338: ST_TO_ADDR
// if not tmp then
21339: LD_VAR 0 3
21343: NOT
21344: IFFALSE 21348
// exit ;
21346: GO 21434
// un := tmp [ rand ( 1 , tmp ) ] ;
21348: LD_ADDR_VAR 0 2
21352: PUSH
21353: LD_VAR 0 3
21357: PUSH
21358: LD_INT 1
21360: PPUSH
21361: LD_VAR 0 3
21365: PPUSH
21366: CALL_OW 12
21370: ARRAY
21371: ST_TO_ADDR
// if Crawls ( un ) then
21372: LD_VAR 0 2
21376: PPUSH
21377: CALL_OW 318
21381: IFFALSE 21392
// ComWalk ( un ) ;
21383: LD_VAR 0 2
21387: PPUSH
21388: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21392: LD_VAR 0 2
21396: PPUSH
21397: LD_INT 9
21399: PPUSH
21400: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21404: LD_INT 28
21406: PPUSH
21407: LD_OWVAR 2
21411: PPUSH
21412: LD_INT 2
21414: PPUSH
21415: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21419: LD_INT 29
21421: PPUSH
21422: LD_OWVAR 2
21426: PPUSH
21427: LD_INT 2
21429: PPUSH
21430: CALL_OW 322
// end ;
21434: PPOPN 3
21436: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21437: LD_EXP 15
21441: IFFALSE 21449
21443: PUSH
21444: LD_EXP 58
21448: AND
21449: IFFALSE 21560
21451: GO 21453
21453: DISABLE
21454: LD_INT 0
21456: PPUSH
21457: PPUSH
21458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21459: LD_ADDR_VAR 0 3
21463: PUSH
21464: LD_INT 22
21466: PUSH
21467: LD_OWVAR 2
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 25
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PPUSH
21490: CALL_OW 69
21494: ST_TO_ADDR
// if not tmp then
21495: LD_VAR 0 3
21499: NOT
21500: IFFALSE 21504
// exit ;
21502: GO 21560
// un := tmp [ rand ( 1 , tmp ) ] ;
21504: LD_ADDR_VAR 0 2
21508: PUSH
21509: LD_VAR 0 3
21513: PUSH
21514: LD_INT 1
21516: PPUSH
21517: LD_VAR 0 3
21521: PPUSH
21522: CALL_OW 12
21526: ARRAY
21527: ST_TO_ADDR
// if Crawls ( un ) then
21528: LD_VAR 0 2
21532: PPUSH
21533: CALL_OW 318
21537: IFFALSE 21548
// ComWalk ( un ) ;
21539: LD_VAR 0 2
21543: PPUSH
21544: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21548: LD_VAR 0 2
21552: PPUSH
21553: LD_INT 8
21555: PPUSH
21556: CALL_OW 336
// end ;
21560: PPOPN 3
21562: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21563: LD_EXP 15
21567: IFFALSE 21575
21569: PUSH
21570: LD_EXP 59
21574: AND
21575: IFFALSE 21719
21577: GO 21579
21579: DISABLE
21580: LD_INT 0
21582: PPUSH
21583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21584: LD_ADDR_VAR 0 2
21588: PUSH
21589: LD_INT 22
21591: PUSH
21592: LD_OWVAR 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 21
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: LD_INT 34
21616: PUSH
21617: LD_INT 12
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 34
21626: PUSH
21627: LD_INT 51
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 34
21636: PUSH
21637: LD_INT 32
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: LIST
21654: PPUSH
21655: CALL_OW 69
21659: ST_TO_ADDR
// if not tmp then
21660: LD_VAR 0 2
21664: NOT
21665: IFFALSE 21669
// exit ;
21667: GO 21719
// for i in tmp do
21669: LD_ADDR_VAR 0 1
21673: PUSH
21674: LD_VAR 0 2
21678: PUSH
21679: FOR_IN
21680: IFFALSE 21717
// if GetCargo ( i , mat_artifact ) = 0 then
21682: LD_VAR 0 1
21686: PPUSH
21687: LD_INT 4
21689: PPUSH
21690: CALL_OW 289
21694: PUSH
21695: LD_INT 0
21697: EQUAL
21698: IFFALSE 21715
// SetCargo ( i , mat_siberit , 100 ) ;
21700: LD_VAR 0 1
21704: PPUSH
21705: LD_INT 3
21707: PPUSH
21708: LD_INT 100
21710: PPUSH
21711: CALL_OW 290
21715: GO 21679
21717: POP
21718: POP
// end ;
21719: PPOPN 2
21721: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21722: LD_EXP 15
21726: IFFALSE 21734
21728: PUSH
21729: LD_EXP 60
21733: AND
21734: IFFALSE 21917
21736: GO 21738
21738: DISABLE
21739: LD_INT 0
21741: PPUSH
21742: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21743: LD_ADDR_VAR 0 2
21747: PUSH
21748: LD_INT 22
21750: PUSH
21751: LD_OWVAR 2
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PPUSH
21760: CALL_OW 69
21764: ST_TO_ADDR
// if not tmp then
21765: LD_VAR 0 2
21769: NOT
21770: IFFALSE 21774
// exit ;
21772: GO 21917
// for i := 1 to 2 do
21774: LD_ADDR_VAR 0 1
21778: PUSH
21779: DOUBLE
21780: LD_INT 1
21782: DEC
21783: ST_TO_ADDR
21784: LD_INT 2
21786: PUSH
21787: FOR_TO
21788: IFFALSE 21915
// begin uc_side := your_side ;
21790: LD_ADDR_OWVAR 20
21794: PUSH
21795: LD_OWVAR 2
21799: ST_TO_ADDR
// uc_nation := nation_american ;
21800: LD_ADDR_OWVAR 21
21804: PUSH
21805: LD_INT 1
21807: ST_TO_ADDR
// vc_chassis := us_morphling ;
21808: LD_ADDR_OWVAR 37
21812: PUSH
21813: LD_INT 5
21815: ST_TO_ADDR
// vc_engine := engine_siberite ;
21816: LD_ADDR_OWVAR 39
21820: PUSH
21821: LD_INT 3
21823: ST_TO_ADDR
// vc_control := control_computer ;
21824: LD_ADDR_OWVAR 38
21828: PUSH
21829: LD_INT 3
21831: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21832: LD_ADDR_OWVAR 40
21836: PUSH
21837: LD_INT 10
21839: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21840: LD_VAR 0 2
21844: PUSH
21845: LD_INT 1
21847: ARRAY
21848: PPUSH
21849: CALL_OW 310
21853: NOT
21854: IFFALSE 21901
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21856: CALL_OW 45
21860: PPUSH
21861: LD_VAR 0 2
21865: PUSH
21866: LD_INT 1
21868: ARRAY
21869: PPUSH
21870: CALL_OW 250
21874: PPUSH
21875: LD_VAR 0 2
21879: PUSH
21880: LD_INT 1
21882: ARRAY
21883: PPUSH
21884: CALL_OW 251
21888: PPUSH
21889: LD_INT 12
21891: PPUSH
21892: LD_INT 1
21894: PPUSH
21895: CALL_OW 50
21899: GO 21913
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21901: CALL_OW 45
21905: PPUSH
21906: LD_INT 1
21908: PPUSH
21909: CALL_OW 51
// end ;
21913: GO 21787
21915: POP
21916: POP
// end ;
21917: PPOPN 2
21919: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21920: LD_EXP 15
21924: IFFALSE 21932
21926: PUSH
21927: LD_EXP 61
21931: AND
21932: IFFALSE 22154
21934: GO 21936
21936: DISABLE
21937: LD_INT 0
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
21943: PPUSH
21944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21945: LD_ADDR_VAR 0 6
21949: PUSH
21950: LD_INT 22
21952: PUSH
21953: LD_OWVAR 2
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 21
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 3
21974: PUSH
21975: LD_INT 23
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: PPUSH
21994: CALL_OW 69
21998: ST_TO_ADDR
// if not tmp then
21999: LD_VAR 0 6
22003: NOT
22004: IFFALSE 22008
// exit ;
22006: GO 22154
// s1 := rand ( 1 , 4 ) ;
22008: LD_ADDR_VAR 0 2
22012: PUSH
22013: LD_INT 1
22015: PPUSH
22016: LD_INT 4
22018: PPUSH
22019: CALL_OW 12
22023: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22024: LD_ADDR_VAR 0 4
22028: PUSH
22029: LD_VAR 0 6
22033: PUSH
22034: LD_INT 1
22036: ARRAY
22037: PPUSH
22038: LD_VAR 0 2
22042: PPUSH
22043: CALL_OW 259
22047: ST_TO_ADDR
// if s1 = 1 then
22048: LD_VAR 0 2
22052: PUSH
22053: LD_INT 1
22055: EQUAL
22056: IFFALSE 22076
// s2 := rand ( 2 , 4 ) else
22058: LD_ADDR_VAR 0 3
22062: PUSH
22063: LD_INT 2
22065: PPUSH
22066: LD_INT 4
22068: PPUSH
22069: CALL_OW 12
22073: ST_TO_ADDR
22074: GO 22084
// s2 := 1 ;
22076: LD_ADDR_VAR 0 3
22080: PUSH
22081: LD_INT 1
22083: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22084: LD_ADDR_VAR 0 5
22088: PUSH
22089: LD_VAR 0 6
22093: PUSH
22094: LD_INT 1
22096: ARRAY
22097: PPUSH
22098: LD_VAR 0 3
22102: PPUSH
22103: CALL_OW 259
22107: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22108: LD_VAR 0 6
22112: PUSH
22113: LD_INT 1
22115: ARRAY
22116: PPUSH
22117: LD_VAR 0 2
22121: PPUSH
22122: LD_VAR 0 5
22126: PPUSH
22127: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22131: LD_VAR 0 6
22135: PUSH
22136: LD_INT 1
22138: ARRAY
22139: PPUSH
22140: LD_VAR 0 3
22144: PPUSH
22145: LD_VAR 0 4
22149: PPUSH
22150: CALL_OW 237
// end ;
22154: PPOPN 6
22156: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22157: LD_EXP 15
22161: IFFALSE 22169
22163: PUSH
22164: LD_EXP 62
22168: AND
22169: IFFALSE 22248
22171: GO 22173
22173: DISABLE
22174: LD_INT 0
22176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22177: LD_ADDR_VAR 0 1
22181: PUSH
22182: LD_INT 22
22184: PUSH
22185: LD_OWVAR 2
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 30
22196: PUSH
22197: LD_INT 3
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PPUSH
22208: CALL_OW 69
22212: ST_TO_ADDR
// if not tmp then
22213: LD_VAR 0 1
22217: NOT
22218: IFFALSE 22222
// exit ;
22220: GO 22248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22222: LD_VAR 0 1
22226: PUSH
22227: LD_INT 1
22229: PPUSH
22230: LD_VAR 0 1
22234: PPUSH
22235: CALL_OW 12
22239: ARRAY
22240: PPUSH
22241: LD_INT 1
22243: PPUSH
22244: CALL_OW 234
// end ;
22248: PPOPN 1
22250: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22251: LD_EXP 15
22255: IFFALSE 22263
22257: PUSH
22258: LD_EXP 63
22262: AND
22263: IFFALSE 22375
22265: GO 22267
22267: DISABLE
22268: LD_INT 0
22270: PPUSH
22271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22272: LD_ADDR_VAR 0 2
22276: PUSH
22277: LD_INT 22
22279: PUSH
22280: LD_OWVAR 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: LD_INT 30
22294: PUSH
22295: LD_INT 27
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 30
22304: PUSH
22305: LD_INT 26
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 30
22314: PUSH
22315: LD_INT 28
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PPUSH
22332: CALL_OW 69
22336: ST_TO_ADDR
// if not tmp then
22337: LD_VAR 0 2
22341: NOT
22342: IFFALSE 22346
// exit ;
22344: GO 22375
// for i in tmp do
22346: LD_ADDR_VAR 0 1
22350: PUSH
22351: LD_VAR 0 2
22355: PUSH
22356: FOR_IN
22357: IFFALSE 22373
// SetLives ( i , 1 ) ;
22359: LD_VAR 0 1
22363: PPUSH
22364: LD_INT 1
22366: PPUSH
22367: CALL_OW 234
22371: GO 22356
22373: POP
22374: POP
// end ;
22375: PPOPN 2
22377: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22378: LD_EXP 15
22382: IFFALSE 22390
22384: PUSH
22385: LD_EXP 64
22389: AND
22390: IFFALSE 22677
22392: GO 22394
22394: DISABLE
22395: LD_INT 0
22397: PPUSH
22398: PPUSH
22399: PPUSH
// begin i := rand ( 1 , 7 ) ;
22400: LD_ADDR_VAR 0 1
22404: PUSH
22405: LD_INT 1
22407: PPUSH
22408: LD_INT 7
22410: PPUSH
22411: CALL_OW 12
22415: ST_TO_ADDR
// case i of 1 :
22416: LD_VAR 0 1
22420: PUSH
22421: LD_INT 1
22423: DOUBLE
22424: EQUAL
22425: IFTRUE 22429
22427: GO 22439
22429: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22430: LD_STRING earthquake(getX(game), 0, 32)
22432: PPUSH
22433: CALL_OW 559
22437: GO 22677
22439: LD_INT 2
22441: DOUBLE
22442: EQUAL
22443: IFTRUE 22447
22445: GO 22461
22447: POP
// begin ToLua ( displayStucuk(); ) ;
22448: LD_STRING displayStucuk();
22450: PPUSH
22451: CALL_OW 559
// ResetFog ;
22455: CALL_OW 335
// end ; 3 :
22459: GO 22677
22461: LD_INT 3
22463: DOUBLE
22464: EQUAL
22465: IFTRUE 22469
22467: GO 22573
22469: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22470: LD_ADDR_VAR 0 2
22474: PUSH
22475: LD_INT 22
22477: PUSH
22478: LD_OWVAR 2
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 25
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PPUSH
22501: CALL_OW 69
22505: ST_TO_ADDR
// if not tmp then
22506: LD_VAR 0 2
22510: NOT
22511: IFFALSE 22515
// exit ;
22513: GO 22677
// un := tmp [ rand ( 1 , tmp ) ] ;
22515: LD_ADDR_VAR 0 3
22519: PUSH
22520: LD_VAR 0 2
22524: PUSH
22525: LD_INT 1
22527: PPUSH
22528: LD_VAR 0 2
22532: PPUSH
22533: CALL_OW 12
22537: ARRAY
22538: ST_TO_ADDR
// if Crawls ( un ) then
22539: LD_VAR 0 3
22543: PPUSH
22544: CALL_OW 318
22548: IFFALSE 22559
// ComWalk ( un ) ;
22550: LD_VAR 0 3
22554: PPUSH
22555: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22559: LD_VAR 0 3
22563: PPUSH
22564: LD_INT 8
22566: PPUSH
22567: CALL_OW 336
// end ; 4 :
22571: GO 22677
22573: LD_INT 4
22575: DOUBLE
22576: EQUAL
22577: IFTRUE 22581
22579: GO 22655
22581: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22582: LD_ADDR_VAR 0 2
22586: PUSH
22587: LD_INT 22
22589: PUSH
22590: LD_OWVAR 2
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 30
22601: PUSH
22602: LD_INT 29
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PPUSH
22613: CALL_OW 69
22617: ST_TO_ADDR
// if not tmp then
22618: LD_VAR 0 2
22622: NOT
22623: IFFALSE 22627
// exit ;
22625: GO 22677
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22627: LD_VAR 0 2
22631: PUSH
22632: LD_INT 1
22634: ARRAY
22635: PPUSH
22636: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22640: LD_VAR 0 2
22644: PUSH
22645: LD_INT 1
22647: ARRAY
22648: PPUSH
22649: CALL_OW 65
// end ; 5 .. 7 :
22653: GO 22677
22655: LD_INT 5
22657: DOUBLE
22658: GREATEREQUAL
22659: IFFALSE 22667
22661: LD_INT 7
22663: DOUBLE
22664: LESSEQUAL
22665: IFTRUE 22669
22667: GO 22676
22669: POP
// StreamSibBomb ; end ;
22670: CALL 18858 0 0
22674: GO 22677
22676: POP
// end ;
22677: PPOPN 3
22679: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22680: LD_EXP 15
22684: IFFALSE 22692
22686: PUSH
22687: LD_EXP 65
22691: AND
22692: IFFALSE 22848
22694: GO 22696
22696: DISABLE
22697: LD_INT 0
22699: PPUSH
22700: PPUSH
22701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22702: LD_ADDR_VAR 0 2
22706: PUSH
22707: LD_INT 81
22709: PUSH
22710: LD_OWVAR 2
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 2
22721: PUSH
22722: LD_INT 21
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 21
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: LIST
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PPUSH
22751: CALL_OW 69
22755: ST_TO_ADDR
// if not tmp then
22756: LD_VAR 0 2
22760: NOT
22761: IFFALSE 22765
// exit ;
22763: GO 22848
// p := 0 ;
22765: LD_ADDR_VAR 0 3
22769: PUSH
22770: LD_INT 0
22772: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22773: LD_INT 35
22775: PPUSH
22776: CALL_OW 67
// p := p + 1 ;
22780: LD_ADDR_VAR 0 3
22784: PUSH
22785: LD_VAR 0 3
22789: PUSH
22790: LD_INT 1
22792: PLUS
22793: ST_TO_ADDR
// for i in tmp do
22794: LD_ADDR_VAR 0 1
22798: PUSH
22799: LD_VAR 0 2
22803: PUSH
22804: FOR_IN
22805: IFFALSE 22836
// if GetLives ( i ) < 1000 then
22807: LD_VAR 0 1
22811: PPUSH
22812: CALL_OW 256
22816: PUSH
22817: LD_INT 1000
22819: LESS
22820: IFFALSE 22834
// SetLives ( i , 1000 ) ;
22822: LD_VAR 0 1
22826: PPUSH
22827: LD_INT 1000
22829: PPUSH
22830: CALL_OW 234
22834: GO 22804
22836: POP
22837: POP
// until p > 20 ;
22838: LD_VAR 0 3
22842: PUSH
22843: LD_INT 20
22845: GREATER
22846: IFFALSE 22773
// end ;
22848: PPOPN 3
22850: END
// every 0 0$1 trigger StreamModeActive and sTime do
22851: LD_EXP 15
22855: IFFALSE 22863
22857: PUSH
22858: LD_EXP 66
22862: AND
22863: IFFALSE 22898
22865: GO 22867
22867: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22868: LD_INT 28
22870: PPUSH
22871: LD_OWVAR 2
22875: PPUSH
22876: LD_INT 2
22878: PPUSH
22879: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22883: LD_INT 30
22885: PPUSH
22886: LD_OWVAR 2
22890: PPUSH
22891: LD_INT 2
22893: PPUSH
22894: CALL_OW 322
// end ;
22898: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22899: LD_EXP 15
22903: IFFALSE 22911
22905: PUSH
22906: LD_EXP 67
22910: AND
22911: IFFALSE 23032
22913: GO 22915
22915: DISABLE
22916: LD_INT 0
22918: PPUSH
22919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22920: LD_ADDR_VAR 0 2
22924: PUSH
22925: LD_INT 22
22927: PUSH
22928: LD_OWVAR 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 21
22939: PUSH
22940: LD_INT 1
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 3
22949: PUSH
22950: LD_INT 23
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 69
22973: ST_TO_ADDR
// if not tmp then
22974: LD_VAR 0 2
22978: NOT
22979: IFFALSE 22983
// exit ;
22981: GO 23032
// for i in tmp do
22983: LD_ADDR_VAR 0 1
22987: PUSH
22988: LD_VAR 0 2
22992: PUSH
22993: FOR_IN
22994: IFFALSE 23030
// begin if Crawls ( i ) then
22996: LD_VAR 0 1
23000: PPUSH
23001: CALL_OW 318
23005: IFFALSE 23016
// ComWalk ( i ) ;
23007: LD_VAR 0 1
23011: PPUSH
23012: CALL_OW 138
// SetClass ( i , 2 ) ;
23016: LD_VAR 0 1
23020: PPUSH
23021: LD_INT 2
23023: PPUSH
23024: CALL_OW 336
// end ;
23028: GO 22993
23030: POP
23031: POP
// end ;
23032: PPOPN 2
23034: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23035: LD_EXP 15
23039: IFFALSE 23047
23041: PUSH
23042: LD_EXP 68
23046: AND
23047: IFFALSE 23337
23049: GO 23051
23051: DISABLE
23052: LD_INT 0
23054: PPUSH
23055: PPUSH
23056: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23057: LD_OWVAR 2
23061: PPUSH
23062: LD_INT 9
23064: PPUSH
23065: LD_INT 1
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23075: LD_INT 9
23077: PPUSH
23078: LD_OWVAR 2
23082: PPUSH
23083: CALL_OW 343
// uc_side := 9 ;
23087: LD_ADDR_OWVAR 20
23091: PUSH
23092: LD_INT 9
23094: ST_TO_ADDR
// uc_nation := 2 ;
23095: LD_ADDR_OWVAR 21
23099: PUSH
23100: LD_INT 2
23102: ST_TO_ADDR
// hc_name := Dark Warrior ;
23103: LD_ADDR_OWVAR 26
23107: PUSH
23108: LD_STRING Dark Warrior
23110: ST_TO_ADDR
// hc_gallery :=  ;
23111: LD_ADDR_OWVAR 33
23115: PUSH
23116: LD_STRING 
23118: ST_TO_ADDR
// hc_noskilllimit := true ;
23119: LD_ADDR_OWVAR 76
23123: PUSH
23124: LD_INT 1
23126: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23127: LD_ADDR_OWVAR 31
23131: PUSH
23132: LD_INT 30
23134: PUSH
23135: LD_INT 30
23137: PUSH
23138: LD_INT 30
23140: PUSH
23141: LD_INT 30
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: ST_TO_ADDR
// un := CreateHuman ;
23150: LD_ADDR_VAR 0 3
23154: PUSH
23155: CALL_OW 44
23159: ST_TO_ADDR
// hc_noskilllimit := false ;
23160: LD_ADDR_OWVAR 76
23164: PUSH
23165: LD_INT 0
23167: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23168: LD_VAR 0 3
23172: PPUSH
23173: LD_INT 1
23175: PPUSH
23176: CALL_OW 51
// ToLua ( playRanger() ) ;
23180: LD_STRING playRanger()
23182: PPUSH
23183: CALL_OW 559
// p := 0 ;
23187: LD_ADDR_VAR 0 2
23191: PUSH
23192: LD_INT 0
23194: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23195: LD_INT 35
23197: PPUSH
23198: CALL_OW 67
// p := p + 1 ;
23202: LD_ADDR_VAR 0 2
23206: PUSH
23207: LD_VAR 0 2
23211: PUSH
23212: LD_INT 1
23214: PLUS
23215: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23216: LD_VAR 0 3
23220: PPUSH
23221: CALL_OW 256
23225: PUSH
23226: LD_INT 1000
23228: LESS
23229: IFFALSE 23243
// SetLives ( un , 1000 ) ;
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_INT 1000
23238: PPUSH
23239: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23243: LD_VAR 0 3
23247: PPUSH
23248: LD_INT 81
23250: PUSH
23251: LD_OWVAR 2
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 91
23262: PUSH
23263: LD_VAR 0 3
23267: PUSH
23268: LD_INT 30
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PPUSH
23280: CALL_OW 69
23284: PPUSH
23285: LD_VAR 0 3
23289: PPUSH
23290: CALL_OW 74
23294: PPUSH
23295: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23299: LD_VAR 0 2
23303: PUSH
23304: LD_INT 80
23306: GREATER
23307: IFTRUE 23320
23309: PUSH
23310: LD_VAR 0 3
23314: PPUSH
23315: CALL_OW 301
23319: OR
23320: IFFALSE 23195
// if un then
23322: LD_VAR 0 3
23326: IFFALSE 23337
// RemoveUnit ( un ) ;
23328: LD_VAR 0 3
23332: PPUSH
23333: CALL_OW 64
// end ;
23337: PPOPN 3
23339: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23340: LD_EXP 69
23344: IFFALSE 23460
23346: GO 23348
23348: DISABLE
23349: LD_INT 0
23351: PPUSH
23352: PPUSH
23353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_INT 81
23361: PUSH
23362: LD_OWVAR 2
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 21
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PPUSH
23385: CALL_OW 69
23389: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23390: LD_STRING playComputer()
23392: PPUSH
23393: CALL_OW 559
// if not tmp then
23397: LD_VAR 0 2
23401: NOT
23402: IFFALSE 23406
// exit ;
23404: GO 23460
// for i in tmp do
23406: LD_ADDR_VAR 0 1
23410: PUSH
23411: LD_VAR 0 2
23415: PUSH
23416: FOR_IN
23417: IFFALSE 23458
// for j := 1 to 4 do
23419: LD_ADDR_VAR 0 3
23423: PUSH
23424: DOUBLE
23425: LD_INT 1
23427: DEC
23428: ST_TO_ADDR
23429: LD_INT 4
23431: PUSH
23432: FOR_TO
23433: IFFALSE 23454
// SetSkill ( i , j , 10 ) ;
23435: LD_VAR 0 1
23439: PPUSH
23440: LD_VAR 0 3
23444: PPUSH
23445: LD_INT 10
23447: PPUSH
23448: CALL_OW 237
23452: GO 23432
23454: POP
23455: POP
23456: GO 23416
23458: POP
23459: POP
// end ;
23460: PPOPN 3
23462: END
// every 0 0$1 trigger s30 do var i , tmp ;
23463: LD_EXP 70
23467: IFFALSE 23536
23469: GO 23471
23471: DISABLE
23472: LD_INT 0
23474: PPUSH
23475: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23476: LD_ADDR_VAR 0 2
23480: PUSH
23481: LD_INT 22
23483: PUSH
23484: LD_OWVAR 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PPUSH
23493: CALL_OW 69
23497: ST_TO_ADDR
// if not tmp then
23498: LD_VAR 0 2
23502: NOT
23503: IFFALSE 23507
// exit ;
23505: GO 23536
// for i in tmp do
23507: LD_ADDR_VAR 0 1
23511: PUSH
23512: LD_VAR 0 2
23516: PUSH
23517: FOR_IN
23518: IFFALSE 23534
// SetLives ( i , 300 ) ;
23520: LD_VAR 0 1
23524: PPUSH
23525: LD_INT 300
23527: PPUSH
23528: CALL_OW 234
23532: GO 23517
23534: POP
23535: POP
// end ;
23536: PPOPN 2
23538: END
// every 0 0$1 trigger s60 do var i , tmp ;
23539: LD_EXP 71
23543: IFFALSE 23612
23545: GO 23547
23547: DISABLE
23548: LD_INT 0
23550: PPUSH
23551: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23552: LD_ADDR_VAR 0 2
23556: PUSH
23557: LD_INT 22
23559: PUSH
23560: LD_OWVAR 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PPUSH
23569: CALL_OW 69
23573: ST_TO_ADDR
// if not tmp then
23574: LD_VAR 0 2
23578: NOT
23579: IFFALSE 23583
// exit ;
23581: GO 23612
// for i in tmp do
23583: LD_ADDR_VAR 0 1
23587: PUSH
23588: LD_VAR 0 2
23592: PUSH
23593: FOR_IN
23594: IFFALSE 23610
// SetLives ( i , 600 ) ;
23596: LD_VAR 0 1
23600: PPUSH
23601: LD_INT 600
23603: PPUSH
23604: CALL_OW 234
23608: GO 23593
23610: POP
23611: POP
// end ;
23612: PPOPN 2
23614: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23615: LD_INT 0
23617: PPUSH
// case cmd of 301 :
23618: LD_VAR 0 1
23622: PUSH
23623: LD_INT 301
23625: DOUBLE
23626: EQUAL
23627: IFTRUE 23631
23629: GO 23663
23631: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23632: LD_VAR 0 6
23636: PPUSH
23637: LD_VAR 0 7
23641: PPUSH
23642: LD_VAR 0 8
23646: PPUSH
23647: LD_VAR 0 4
23651: PPUSH
23652: LD_VAR 0 5
23656: PPUSH
23657: CALL 24876 0 5
23661: GO 23784
23663: LD_INT 302
23665: DOUBLE
23666: EQUAL
23667: IFTRUE 23671
23669: GO 23708
23671: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23672: LD_VAR 0 6
23676: PPUSH
23677: LD_VAR 0 7
23681: PPUSH
23682: LD_VAR 0 8
23686: PPUSH
23687: LD_VAR 0 9
23691: PPUSH
23692: LD_VAR 0 4
23696: PPUSH
23697: LD_VAR 0 5
23701: PPUSH
23702: CALL 24967 0 6
23706: GO 23784
23708: LD_INT 303
23710: DOUBLE
23711: EQUAL
23712: IFTRUE 23716
23714: GO 23753
23716: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23717: LD_VAR 0 6
23721: PPUSH
23722: LD_VAR 0 7
23726: PPUSH
23727: LD_VAR 0 8
23731: PPUSH
23732: LD_VAR 0 9
23736: PPUSH
23737: LD_VAR 0 4
23741: PPUSH
23742: LD_VAR 0 5
23746: PPUSH
23747: CALL 23789 0 6
23751: GO 23784
23753: LD_INT 304
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23783
23761: POP
// hHackTeleport ( unit , x , y ) ; end ;
23762: LD_VAR 0 2
23766: PPUSH
23767: LD_VAR 0 4
23771: PPUSH
23772: LD_VAR 0 5
23776: PPUSH
23777: CALL 25560 0 3
23781: GO 23784
23783: POP
// end ;
23784: LD_VAR 0 12
23788: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23789: LD_INT 0
23791: PPUSH
23792: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23793: LD_VAR 0 1
23797: PUSH
23798: LD_INT 1
23800: LESS
23801: IFTRUE 23813
23803: PUSH
23804: LD_VAR 0 1
23808: PUSH
23809: LD_INT 3
23811: GREATER
23812: OR
23813: IFTRUE 23831
23815: PUSH
23816: LD_VAR 0 5
23820: PPUSH
23821: LD_VAR 0 6
23825: PPUSH
23826: CALL_OW 428
23830: OR
23831: IFFALSE 23835
// exit ;
23833: GO 24563
// uc_side := your_side ;
23835: LD_ADDR_OWVAR 20
23839: PUSH
23840: LD_OWVAR 2
23844: ST_TO_ADDR
// uc_nation := nation ;
23845: LD_ADDR_OWVAR 21
23849: PUSH
23850: LD_VAR 0 1
23854: ST_TO_ADDR
// bc_level = 1 ;
23855: LD_ADDR_OWVAR 43
23859: PUSH
23860: LD_INT 1
23862: ST_TO_ADDR
// case btype of 1 :
23863: LD_VAR 0 2
23867: PUSH
23868: LD_INT 1
23870: DOUBLE
23871: EQUAL
23872: IFTRUE 23876
23874: GO 23887
23876: POP
// bc_type := b_depot ; 2 :
23877: LD_ADDR_OWVAR 42
23881: PUSH
23882: LD_INT 0
23884: ST_TO_ADDR
23885: GO 24507
23887: LD_INT 2
23889: DOUBLE
23890: EQUAL
23891: IFTRUE 23895
23893: GO 23906
23895: POP
// bc_type := b_warehouse ; 3 :
23896: LD_ADDR_OWVAR 42
23900: PUSH
23901: LD_INT 1
23903: ST_TO_ADDR
23904: GO 24507
23906: LD_INT 3
23908: DOUBLE
23909: EQUAL
23910: IFTRUE 23914
23912: GO 23925
23914: POP
// bc_type := b_lab ; 4 .. 9 :
23915: LD_ADDR_OWVAR 42
23919: PUSH
23920: LD_INT 6
23922: ST_TO_ADDR
23923: GO 24507
23925: LD_INT 4
23927: DOUBLE
23928: GREATEREQUAL
23929: IFFALSE 23937
23931: LD_INT 9
23933: DOUBLE
23934: LESSEQUAL
23935: IFTRUE 23939
23937: GO 23999
23939: POP
// begin bc_type := b_lab_half ;
23940: LD_ADDR_OWVAR 42
23944: PUSH
23945: LD_INT 7
23947: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23948: LD_ADDR_OWVAR 44
23952: PUSH
23953: LD_INT 10
23955: PUSH
23956: LD_INT 11
23958: PUSH
23959: LD_INT 12
23961: PUSH
23962: LD_INT 15
23964: PUSH
23965: LD_INT 14
23967: PUSH
23968: LD_INT 13
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: PUSH
23979: LD_VAR 0 2
23983: PUSH
23984: LD_INT 3
23986: MINUS
23987: ARRAY
23988: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23989: LD_ADDR_OWVAR 45
23993: PUSH
23994: LD_INT 9
23996: ST_TO_ADDR
// end ; 10 .. 13 :
23997: GO 24507
23999: LD_INT 10
24001: DOUBLE
24002: GREATEREQUAL
24003: IFFALSE 24011
24005: LD_INT 13
24007: DOUBLE
24008: LESSEQUAL
24009: IFTRUE 24013
24011: GO 24090
24013: POP
// begin bc_type := b_lab_full ;
24014: LD_ADDR_OWVAR 42
24018: PUSH
24019: LD_INT 8
24021: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24022: LD_ADDR_OWVAR 44
24026: PUSH
24027: LD_INT 10
24029: PUSH
24030: LD_INT 12
24032: PUSH
24033: LD_INT 14
24035: PUSH
24036: LD_INT 13
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: PUSH
24045: LD_VAR 0 2
24049: PUSH
24050: LD_INT 9
24052: MINUS
24053: ARRAY
24054: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24055: LD_ADDR_OWVAR 45
24059: PUSH
24060: LD_INT 11
24062: PUSH
24063: LD_INT 15
24065: PUSH
24066: LD_INT 12
24068: PUSH
24069: LD_INT 15
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: PUSH
24078: LD_VAR 0 2
24082: PUSH
24083: LD_INT 9
24085: MINUS
24086: ARRAY
24087: ST_TO_ADDR
// end ; 14 :
24088: GO 24507
24090: LD_INT 14
24092: DOUBLE
24093: EQUAL
24094: IFTRUE 24098
24096: GO 24109
24098: POP
// bc_type := b_workshop ; 15 :
24099: LD_ADDR_OWVAR 42
24103: PUSH
24104: LD_INT 2
24106: ST_TO_ADDR
24107: GO 24507
24109: LD_INT 15
24111: DOUBLE
24112: EQUAL
24113: IFTRUE 24117
24115: GO 24128
24117: POP
// bc_type := b_factory ; 16 :
24118: LD_ADDR_OWVAR 42
24122: PUSH
24123: LD_INT 3
24125: ST_TO_ADDR
24126: GO 24507
24128: LD_INT 16
24130: DOUBLE
24131: EQUAL
24132: IFTRUE 24136
24134: GO 24147
24136: POP
// bc_type := b_ext_gun ; 17 :
24137: LD_ADDR_OWVAR 42
24141: PUSH
24142: LD_INT 17
24144: ST_TO_ADDR
24145: GO 24507
24147: LD_INT 17
24149: DOUBLE
24150: EQUAL
24151: IFTRUE 24155
24153: GO 24183
24155: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24156: LD_ADDR_OWVAR 42
24160: PUSH
24161: LD_INT 19
24163: PUSH
24164: LD_INT 23
24166: PUSH
24167: LD_INT 19
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: PUSH
24175: LD_VAR 0 1
24179: ARRAY
24180: ST_TO_ADDR
24181: GO 24507
24183: LD_INT 18
24185: DOUBLE
24186: EQUAL
24187: IFTRUE 24191
24189: GO 24202
24191: POP
// bc_type := b_ext_radar ; 19 :
24192: LD_ADDR_OWVAR 42
24196: PUSH
24197: LD_INT 20
24199: ST_TO_ADDR
24200: GO 24507
24202: LD_INT 19
24204: DOUBLE
24205: EQUAL
24206: IFTRUE 24210
24208: GO 24221
24210: POP
// bc_type := b_ext_radio ; 20 :
24211: LD_ADDR_OWVAR 42
24215: PUSH
24216: LD_INT 22
24218: ST_TO_ADDR
24219: GO 24507
24221: LD_INT 20
24223: DOUBLE
24224: EQUAL
24225: IFTRUE 24229
24227: GO 24240
24229: POP
// bc_type := b_ext_siberium ; 21 :
24230: LD_ADDR_OWVAR 42
24234: PUSH
24235: LD_INT 21
24237: ST_TO_ADDR
24238: GO 24507
24240: LD_INT 21
24242: DOUBLE
24243: EQUAL
24244: IFTRUE 24248
24246: GO 24259
24248: POP
// bc_type := b_ext_computer ; 22 :
24249: LD_ADDR_OWVAR 42
24253: PUSH
24254: LD_INT 24
24256: ST_TO_ADDR
24257: GO 24507
24259: LD_INT 22
24261: DOUBLE
24262: EQUAL
24263: IFTRUE 24267
24265: GO 24278
24267: POP
// bc_type := b_ext_track ; 23 :
24268: LD_ADDR_OWVAR 42
24272: PUSH
24273: LD_INT 16
24275: ST_TO_ADDR
24276: GO 24507
24278: LD_INT 23
24280: DOUBLE
24281: EQUAL
24282: IFTRUE 24286
24284: GO 24297
24286: POP
// bc_type := b_ext_laser ; 24 :
24287: LD_ADDR_OWVAR 42
24291: PUSH
24292: LD_INT 25
24294: ST_TO_ADDR
24295: GO 24507
24297: LD_INT 24
24299: DOUBLE
24300: EQUAL
24301: IFTRUE 24305
24303: GO 24316
24305: POP
// bc_type := b_control_tower ; 25 :
24306: LD_ADDR_OWVAR 42
24310: PUSH
24311: LD_INT 36
24313: ST_TO_ADDR
24314: GO 24507
24316: LD_INT 25
24318: DOUBLE
24319: EQUAL
24320: IFTRUE 24324
24322: GO 24335
24324: POP
// bc_type := b_breastwork ; 26 :
24325: LD_ADDR_OWVAR 42
24329: PUSH
24330: LD_INT 31
24332: ST_TO_ADDR
24333: GO 24507
24335: LD_INT 26
24337: DOUBLE
24338: EQUAL
24339: IFTRUE 24343
24341: GO 24354
24343: POP
// bc_type := b_bunker ; 27 :
24344: LD_ADDR_OWVAR 42
24348: PUSH
24349: LD_INT 32
24351: ST_TO_ADDR
24352: GO 24507
24354: LD_INT 27
24356: DOUBLE
24357: EQUAL
24358: IFTRUE 24362
24360: GO 24373
24362: POP
// bc_type := b_turret ; 28 :
24363: LD_ADDR_OWVAR 42
24367: PUSH
24368: LD_INT 33
24370: ST_TO_ADDR
24371: GO 24507
24373: LD_INT 28
24375: DOUBLE
24376: EQUAL
24377: IFTRUE 24381
24379: GO 24392
24381: POP
// bc_type := b_armoury ; 29 :
24382: LD_ADDR_OWVAR 42
24386: PUSH
24387: LD_INT 4
24389: ST_TO_ADDR
24390: GO 24507
24392: LD_INT 29
24394: DOUBLE
24395: EQUAL
24396: IFTRUE 24400
24398: GO 24411
24400: POP
// bc_type := b_barracks ; 30 :
24401: LD_ADDR_OWVAR 42
24405: PUSH
24406: LD_INT 5
24408: ST_TO_ADDR
24409: GO 24507
24411: LD_INT 30
24413: DOUBLE
24414: EQUAL
24415: IFTRUE 24419
24417: GO 24430
24419: POP
// bc_type := b_solar_power ; 31 :
24420: LD_ADDR_OWVAR 42
24424: PUSH
24425: LD_INT 27
24427: ST_TO_ADDR
24428: GO 24507
24430: LD_INT 31
24432: DOUBLE
24433: EQUAL
24434: IFTRUE 24438
24436: GO 24449
24438: POP
// bc_type := b_oil_power ; 32 :
24439: LD_ADDR_OWVAR 42
24443: PUSH
24444: LD_INT 26
24446: ST_TO_ADDR
24447: GO 24507
24449: LD_INT 32
24451: DOUBLE
24452: EQUAL
24453: IFTRUE 24457
24455: GO 24468
24457: POP
// bc_type := b_siberite_power ; 33 :
24458: LD_ADDR_OWVAR 42
24462: PUSH
24463: LD_INT 28
24465: ST_TO_ADDR
24466: GO 24507
24468: LD_INT 33
24470: DOUBLE
24471: EQUAL
24472: IFTRUE 24476
24474: GO 24487
24476: POP
// bc_type := b_oil_mine ; 34 :
24477: LD_ADDR_OWVAR 42
24481: PUSH
24482: LD_INT 29
24484: ST_TO_ADDR
24485: GO 24507
24487: LD_INT 34
24489: DOUBLE
24490: EQUAL
24491: IFTRUE 24495
24493: GO 24506
24495: POP
// bc_type := b_siberite_mine ; end ;
24496: LD_ADDR_OWVAR 42
24500: PUSH
24501: LD_INT 30
24503: ST_TO_ADDR
24504: GO 24507
24506: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24507: LD_ADDR_VAR 0 8
24511: PUSH
24512: LD_VAR 0 5
24516: PPUSH
24517: LD_VAR 0 6
24521: PPUSH
24522: LD_VAR 0 3
24526: PPUSH
24527: CALL_OW 47
24531: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24532: LD_OWVAR 42
24536: PUSH
24537: LD_INT 32
24539: PUSH
24540: LD_INT 33
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: IN
24547: IFFALSE 24563
// PlaceWeaponTurret ( b , weapon ) ;
24549: LD_VAR 0 8
24553: PPUSH
24554: LD_VAR 0 4
24558: PPUSH
24559: CALL_OW 431
// end ;
24563: LD_VAR 0 7
24567: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24568: LD_INT 0
24570: PPUSH
24571: PPUSH
24572: PPUSH
24573: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24574: LD_ADDR_VAR 0 4
24578: PUSH
24579: LD_INT 22
24581: PUSH
24582: LD_OWVAR 2
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: LD_INT 30
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 30
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: LIST
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PPUSH
24623: CALL_OW 69
24627: ST_TO_ADDR
// if not tmp then
24628: LD_VAR 0 4
24632: NOT
24633: IFFALSE 24637
// exit ;
24635: GO 24696
// for i in tmp do
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: LD_VAR 0 4
24646: PUSH
24647: FOR_IN
24648: IFFALSE 24694
// for j = 1 to 3 do
24650: LD_ADDR_VAR 0 3
24654: PUSH
24655: DOUBLE
24656: LD_INT 1
24658: DEC
24659: ST_TO_ADDR
24660: LD_INT 3
24662: PUSH
24663: FOR_TO
24664: IFFALSE 24690
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24666: LD_VAR 0 2
24670: PPUSH
24671: CALL_OW 274
24675: PPUSH
24676: LD_VAR 0 3
24680: PPUSH
24681: LD_INT 99999
24683: PPUSH
24684: CALL_OW 277
24688: GO 24663
24690: POP
24691: POP
24692: GO 24647
24694: POP
24695: POP
// end ;
24696: LD_VAR 0 1
24700: RET
// export function hHackSetLevel10 ; var i , j ; begin
24701: LD_INT 0
24703: PPUSH
24704: PPUSH
24705: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24706: LD_ADDR_VAR 0 2
24710: PUSH
24711: LD_INT 21
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PPUSH
24721: CALL_OW 69
24725: PUSH
24726: FOR_IN
24727: IFFALSE 24779
// if IsSelected ( i ) then
24729: LD_VAR 0 2
24733: PPUSH
24734: CALL_OW 306
24738: IFFALSE 24777
// begin for j := 1 to 4 do
24740: LD_ADDR_VAR 0 3
24744: PUSH
24745: DOUBLE
24746: LD_INT 1
24748: DEC
24749: ST_TO_ADDR
24750: LD_INT 4
24752: PUSH
24753: FOR_TO
24754: IFFALSE 24775
// SetSkill ( i , j , 10 ) ;
24756: LD_VAR 0 2
24760: PPUSH
24761: LD_VAR 0 3
24765: PPUSH
24766: LD_INT 10
24768: PPUSH
24769: CALL_OW 237
24773: GO 24753
24775: POP
24776: POP
// end ;
24777: GO 24726
24779: POP
24780: POP
// end ;
24781: LD_VAR 0 1
24785: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24786: LD_INT 0
24788: PPUSH
24789: PPUSH
24790: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24791: LD_ADDR_VAR 0 2
24795: PUSH
24796: LD_INT 22
24798: PUSH
24799: LD_OWVAR 2
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 21
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 69
24826: PUSH
24827: FOR_IN
24828: IFFALSE 24869
// begin for j := 1 to 4 do
24830: LD_ADDR_VAR 0 3
24834: PUSH
24835: DOUBLE
24836: LD_INT 1
24838: DEC
24839: ST_TO_ADDR
24840: LD_INT 4
24842: PUSH
24843: FOR_TO
24844: IFFALSE 24865
// SetSkill ( i , j , 10 ) ;
24846: LD_VAR 0 2
24850: PPUSH
24851: LD_VAR 0 3
24855: PPUSH
24856: LD_INT 10
24858: PPUSH
24859: CALL_OW 237
24863: GO 24843
24865: POP
24866: POP
// end ;
24867: GO 24827
24869: POP
24870: POP
// end ;
24871: LD_VAR 0 1
24875: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24876: LD_INT 0
24878: PPUSH
// uc_side := your_side ;
24879: LD_ADDR_OWVAR 20
24883: PUSH
24884: LD_OWVAR 2
24888: ST_TO_ADDR
// uc_nation := nation ;
24889: LD_ADDR_OWVAR 21
24893: PUSH
24894: LD_VAR 0 1
24898: ST_TO_ADDR
// InitHc ;
24899: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24903: LD_INT 0
24905: PPUSH
24906: LD_VAR 0 2
24910: PPUSH
24911: LD_VAR 0 3
24915: PPUSH
24916: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24920: LD_VAR 0 4
24924: PPUSH
24925: LD_VAR 0 5
24929: PPUSH
24930: CALL_OW 428
24934: PUSH
24935: LD_INT 0
24937: EQUAL
24938: IFFALSE 24962
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24940: CALL_OW 44
24944: PPUSH
24945: LD_VAR 0 4
24949: PPUSH
24950: LD_VAR 0 5
24954: PPUSH
24955: LD_INT 1
24957: PPUSH
24958: CALL_OW 48
// end ;
24962: LD_VAR 0 6
24966: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24967: LD_INT 0
24969: PPUSH
24970: PPUSH
// uc_side := your_side ;
24971: LD_ADDR_OWVAR 20
24975: PUSH
24976: LD_OWVAR 2
24980: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24981: LD_VAR 0 1
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: LD_INT 2
24991: PUSH
24992: LD_INT 3
24994: PUSH
24995: LD_INT 4
24997: PUSH
24998: LD_INT 5
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: IN
25008: IFFALSE 25020
// uc_nation := nation_american else
25010: LD_ADDR_OWVAR 21
25014: PUSH
25015: LD_INT 1
25017: ST_TO_ADDR
25018: GO 25063
// if chassis in [ 11 , 12 , 13 , 14 ] then
25020: LD_VAR 0 1
25024: PUSH
25025: LD_INT 11
25027: PUSH
25028: LD_INT 12
25030: PUSH
25031: LD_INT 13
25033: PUSH
25034: LD_INT 14
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: IN
25043: IFFALSE 25055
// uc_nation := nation_arabian else
25045: LD_ADDR_OWVAR 21
25049: PUSH
25050: LD_INT 2
25052: ST_TO_ADDR
25053: GO 25063
// uc_nation := nation_russian ;
25055: LD_ADDR_OWVAR 21
25059: PUSH
25060: LD_INT 3
25062: ST_TO_ADDR
// vc_chassis := chassis ;
25063: LD_ADDR_OWVAR 37
25067: PUSH
25068: LD_VAR 0 1
25072: ST_TO_ADDR
// vc_engine := engine ;
25073: LD_ADDR_OWVAR 39
25077: PUSH
25078: LD_VAR 0 2
25082: ST_TO_ADDR
// vc_control := control ;
25083: LD_ADDR_OWVAR 38
25087: PUSH
25088: LD_VAR 0 3
25092: ST_TO_ADDR
// vc_weapon := weapon ;
25093: LD_ADDR_OWVAR 40
25097: PUSH
25098: LD_VAR 0 4
25102: ST_TO_ADDR
// un := CreateVehicle ;
25103: LD_ADDR_VAR 0 8
25107: PUSH
25108: CALL_OW 45
25112: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25113: LD_VAR 0 8
25117: PPUSH
25118: LD_INT 0
25120: PPUSH
25121: LD_INT 5
25123: PPUSH
25124: CALL_OW 12
25128: PPUSH
25129: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25133: LD_VAR 0 8
25137: PPUSH
25138: LD_VAR 0 5
25142: PPUSH
25143: LD_VAR 0 6
25147: PPUSH
25148: LD_INT 1
25150: PPUSH
25151: CALL_OW 48
// end ;
25155: LD_VAR 0 7
25159: RET
// export hInvincible ; every 1 do
25160: GO 25162
25162: DISABLE
// hInvincible := [ ] ;
25163: LD_ADDR_EXP 72
25167: PUSH
25168: EMPTY
25169: ST_TO_ADDR
25170: END
// every 10 do var i ;
25171: GO 25173
25173: DISABLE
25174: LD_INT 0
25176: PPUSH
// begin enable ;
25177: ENABLE
// if not hInvincible then
25178: LD_EXP 72
25182: NOT
25183: IFFALSE 25187
// exit ;
25185: GO 25231
// for i in hInvincible do
25187: LD_ADDR_VAR 0 1
25191: PUSH
25192: LD_EXP 72
25196: PUSH
25197: FOR_IN
25198: IFFALSE 25229
// if GetLives ( i ) < 1000 then
25200: LD_VAR 0 1
25204: PPUSH
25205: CALL_OW 256
25209: PUSH
25210: LD_INT 1000
25212: LESS
25213: IFFALSE 25227
// SetLives ( i , 1000 ) ;
25215: LD_VAR 0 1
25219: PPUSH
25220: LD_INT 1000
25222: PPUSH
25223: CALL_OW 234
25227: GO 25197
25229: POP
25230: POP
// end ;
25231: PPOPN 1
25233: END
// export function hHackInvincible ; var i ; begin
25234: LD_INT 0
25236: PPUSH
25237: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25238: LD_ADDR_VAR 0 2
25242: PUSH
25243: LD_INT 2
25245: PUSH
25246: LD_INT 21
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 21
25258: PUSH
25259: LD_INT 2
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: LIST
25270: PPUSH
25271: CALL_OW 69
25275: PUSH
25276: FOR_IN
25277: IFFALSE 25338
// if IsSelected ( i ) then
25279: LD_VAR 0 2
25283: PPUSH
25284: CALL_OW 306
25288: IFFALSE 25336
// begin if i in hInvincible then
25290: LD_VAR 0 2
25294: PUSH
25295: LD_EXP 72
25299: IN
25300: IFFALSE 25320
// hInvincible := hInvincible diff i else
25302: LD_ADDR_EXP 72
25306: PUSH
25307: LD_EXP 72
25311: PUSH
25312: LD_VAR 0 2
25316: DIFF
25317: ST_TO_ADDR
25318: GO 25336
// hInvincible := hInvincible union i ;
25320: LD_ADDR_EXP 72
25324: PUSH
25325: LD_EXP 72
25329: PUSH
25330: LD_VAR 0 2
25334: UNION
25335: ST_TO_ADDR
// end ;
25336: GO 25276
25338: POP
25339: POP
// end ;
25340: LD_VAR 0 1
25344: RET
// export function hHackInvisible ; var i , j ; begin
25345: LD_INT 0
25347: PPUSH
25348: PPUSH
25349: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25350: LD_ADDR_VAR 0 2
25354: PUSH
25355: LD_INT 21
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PPUSH
25365: CALL_OW 69
25369: PUSH
25370: FOR_IN
25371: IFFALSE 25395
// if IsSelected ( i ) then
25373: LD_VAR 0 2
25377: PPUSH
25378: CALL_OW 306
25382: IFFALSE 25393
// ComForceInvisible ( i ) ;
25384: LD_VAR 0 2
25388: PPUSH
25389: CALL_OW 496
25393: GO 25370
25395: POP
25396: POP
// end ;
25397: LD_VAR 0 1
25401: RET
// export function hHackChangeYourSide ; begin
25402: LD_INT 0
25404: PPUSH
// if your_side = 8 then
25405: LD_OWVAR 2
25409: PUSH
25410: LD_INT 8
25412: EQUAL
25413: IFFALSE 25425
// your_side := 0 else
25415: LD_ADDR_OWVAR 2
25419: PUSH
25420: LD_INT 0
25422: ST_TO_ADDR
25423: GO 25439
// your_side := your_side + 1 ;
25425: LD_ADDR_OWVAR 2
25429: PUSH
25430: LD_OWVAR 2
25434: PUSH
25435: LD_INT 1
25437: PLUS
25438: ST_TO_ADDR
// end ;
25439: LD_VAR 0 1
25443: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25444: LD_INT 0
25446: PPUSH
25447: PPUSH
25448: PPUSH
// for i in all_units do
25449: LD_ADDR_VAR 0 2
25453: PUSH
25454: LD_OWVAR 3
25458: PUSH
25459: FOR_IN
25460: IFFALSE 25538
// if IsSelected ( i ) then
25462: LD_VAR 0 2
25466: PPUSH
25467: CALL_OW 306
25471: IFFALSE 25536
// begin j := GetSide ( i ) ;
25473: LD_ADDR_VAR 0 3
25477: PUSH
25478: LD_VAR 0 2
25482: PPUSH
25483: CALL_OW 255
25487: ST_TO_ADDR
// if j = 8 then
25488: LD_VAR 0 3
25492: PUSH
25493: LD_INT 8
25495: EQUAL
25496: IFFALSE 25508
// j := 0 else
25498: LD_ADDR_VAR 0 3
25502: PUSH
25503: LD_INT 0
25505: ST_TO_ADDR
25506: GO 25522
// j := j + 1 ;
25508: LD_ADDR_VAR 0 3
25512: PUSH
25513: LD_VAR 0 3
25517: PUSH
25518: LD_INT 1
25520: PLUS
25521: ST_TO_ADDR
// SetSide ( i , j ) ;
25522: LD_VAR 0 2
25526: PPUSH
25527: LD_VAR 0 3
25531: PPUSH
25532: CALL_OW 235
// end ;
25536: GO 25459
25538: POP
25539: POP
// end ;
25540: LD_VAR 0 1
25544: RET
// export function hHackFog ; begin
25545: LD_INT 0
25547: PPUSH
// FogOff ( true ) ;
25548: LD_INT 1
25550: PPUSH
25551: CALL_OW 344
// end ;
25555: LD_VAR 0 1
25559: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25560: LD_INT 0
25562: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25563: LD_VAR 0 1
25567: PPUSH
25568: LD_VAR 0 2
25572: PPUSH
25573: LD_VAR 0 3
25577: PPUSH
25578: LD_INT 1
25580: PPUSH
25581: LD_INT 1
25583: PPUSH
25584: CALL_OW 483
// CenterOnXY ( x , y ) ;
25588: LD_VAR 0 2
25592: PPUSH
25593: LD_VAR 0 3
25597: PPUSH
25598: CALL_OW 84
// end ;
25602: LD_VAR 0 4
25606: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25607: LD_INT 0
25609: PPUSH
25610: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25611: LD_VAR 0 1
25615: NOT
25616: IFTRUE 25635
25618: PUSH
25619: LD_VAR 0 2
25623: PPUSH
25624: LD_VAR 0 3
25628: PPUSH
25629: CALL_OW 488
25633: NOT
25634: OR
25635: IFTRUE 25670
25637: PUSH
25638: LD_VAR 0 1
25642: PPUSH
25643: CALL_OW 266
25647: PUSH
25648: LD_INT 3
25650: NONEQUAL
25651: IFFALSE 25669
25653: PUSH
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 247
25663: PUSH
25664: LD_INT 1
25666: EQUAL
25667: NOT
25668: AND
25669: OR
25670: IFFALSE 25674
// exit ;
25672: GO 25956
// if GetType ( factory ) = unit_human then
25674: LD_VAR 0 1
25678: PPUSH
25679: CALL_OW 247
25683: PUSH
25684: LD_INT 1
25686: EQUAL
25687: IFFALSE 25704
// factory := IsInUnit ( factory ) ;
25689: LD_ADDR_VAR 0 1
25693: PUSH
25694: LD_VAR 0 1
25698: PPUSH
25699: CALL_OW 310
25703: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25704: LD_VAR 0 1
25708: PPUSH
25709: CALL_OW 266
25713: PUSH
25714: LD_INT 3
25716: NONEQUAL
25717: IFFALSE 25721
// exit ;
25719: GO 25956
// for i := 1 to Count ( factoryWaypoints ) do
25721: LD_ADDR_VAR 0 5
25725: PUSH
25726: DOUBLE
25727: LD_INT 1
25729: DEC
25730: ST_TO_ADDR
25731: LD_EXP 73
25735: PPUSH
25736: CALL 35489 0 1
25740: PUSH
25741: FOR_TO
25742: IFFALSE 25904
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
25744: LD_VAR 0 2
25748: PPUSH
25749: LD_VAR 0 3
25753: PPUSH
25754: CALL_OW 428
25758: PUSH
25759: LD_EXP 73
25763: PUSH
25764: LD_VAR 0 5
25768: ARRAY
25769: PUSH
25770: LD_INT 2
25772: ARRAY
25773: EQUAL
25774: IFFALSE 25806
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25776: LD_ADDR_EXP 73
25780: PUSH
25781: LD_EXP 73
25785: PPUSH
25786: LD_VAR 0 5
25790: PPUSH
25791: CALL_OW 3
25795: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25796: CALL 25961 0 0
// exit ;
25800: POP
25801: POP
25802: GO 25956
// end else
25804: GO 25902
// if factory = factoryWaypoints [ i ] [ 2 ] then
25806: LD_VAR 0 1
25810: PUSH
25811: LD_EXP 73
25815: PUSH
25816: LD_VAR 0 5
25820: ARRAY
25821: PUSH
25822: LD_INT 2
25824: ARRAY
25825: EQUAL
25826: IFFALSE 25902
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25828: LD_ADDR_EXP 73
25832: PUSH
25833: LD_EXP 73
25837: PPUSH
25838: LD_VAR 0 5
25842: PPUSH
25843: CALL_OW 3
25847: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25848: LD_ADDR_EXP 73
25852: PUSH
25853: LD_EXP 73
25857: PPUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: CALL_OW 255
25867: PUSH
25868: LD_VAR 0 1
25872: PUSH
25873: LD_VAR 0 2
25877: PUSH
25878: LD_VAR 0 3
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: PPUSH
25889: CALL 71421 0 2
25893: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25894: CALL 25961 0 0
// exit ;
25898: POP
25899: POP
25900: GO 25956
// end ; end ;
25902: GO 25741
25904: POP
25905: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25906: LD_ADDR_EXP 73
25910: PUSH
25911: LD_EXP 73
25915: PPUSH
25916: LD_VAR 0 1
25920: PPUSH
25921: CALL_OW 255
25925: PUSH
25926: LD_VAR 0 1
25930: PUSH
25931: LD_VAR 0 2
25935: PUSH
25936: LD_VAR 0 3
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: PPUSH
25947: CALL 71421 0 2
25951: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25952: CALL 25961 0 0
// end ;
25956: LD_VAR 0 4
25960: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25961: LD_INT 0
25963: PPUSH
25964: PPUSH
25965: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25966: LD_STRING resetFactoryWaypoint();
25968: PPUSH
25969: CALL_OW 559
// if factoryWaypoints then
25973: LD_EXP 73
25977: IFFALSE 26098
// begin list := factoryWaypoints ;
25979: LD_ADDR_VAR 0 3
25983: PUSH
25984: LD_EXP 73
25988: ST_TO_ADDR
// for i := 1 to list do
25989: LD_ADDR_VAR 0 2
25993: PUSH
25994: DOUBLE
25995: LD_INT 1
25997: DEC
25998: ST_TO_ADDR
25999: LD_VAR 0 3
26003: PUSH
26004: FOR_TO
26005: IFFALSE 26096
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26007: LD_STRING setFactoryWaypointXY(
26009: PUSH
26010: LD_VAR 0 3
26014: PUSH
26015: LD_VAR 0 2
26019: ARRAY
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: STR
26025: PUSH
26026: LD_STRING ,
26028: STR
26029: PUSH
26030: LD_VAR 0 3
26034: PUSH
26035: LD_VAR 0 2
26039: ARRAY
26040: PUSH
26041: LD_INT 2
26043: ARRAY
26044: STR
26045: PUSH
26046: LD_STRING ,
26048: STR
26049: PUSH
26050: LD_VAR 0 3
26054: PUSH
26055: LD_VAR 0 2
26059: ARRAY
26060: PUSH
26061: LD_INT 3
26063: ARRAY
26064: STR
26065: PUSH
26066: LD_STRING ,
26068: STR
26069: PUSH
26070: LD_VAR 0 3
26074: PUSH
26075: LD_VAR 0 2
26079: ARRAY
26080: PUSH
26081: LD_INT 4
26083: ARRAY
26084: STR
26085: PUSH
26086: LD_STRING )
26088: STR
26089: PPUSH
26090: CALL_OW 559
26094: GO 26004
26096: POP
26097: POP
// end ; end ;
26098: LD_VAR 0 1
26102: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26103: LD_INT 0
26105: PPUSH
// if HexInfo ( x , y ) = warehouse then
26106: LD_VAR 0 2
26110: PPUSH
26111: LD_VAR 0 3
26115: PPUSH
26116: CALL_OW 428
26120: PUSH
26121: LD_VAR 0 1
26125: EQUAL
26126: IFFALSE 26153
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26128: LD_ADDR_EXP 75
26132: PUSH
26133: LD_EXP 75
26137: PPUSH
26138: LD_VAR 0 1
26142: PPUSH
26143: LD_INT 0
26145: PPUSH
26146: CALL_OW 1
26150: ST_TO_ADDR
26151: GO 26204
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26153: LD_ADDR_EXP 75
26157: PUSH
26158: LD_EXP 75
26162: PPUSH
26163: LD_VAR 0 1
26167: PPUSH
26168: LD_VAR 0 1
26172: PPUSH
26173: CALL_OW 255
26177: PUSH
26178: LD_VAR 0 1
26182: PUSH
26183: LD_VAR 0 2
26187: PUSH
26188: LD_VAR 0 3
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: PPUSH
26199: CALL_OW 1
26203: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26204: CALL 26213 0 0
// end ;
26208: LD_VAR 0 4
26212: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26213: LD_INT 0
26215: PPUSH
26216: PPUSH
26217: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26218: LD_STRING resetWarehouseGatheringPoints();
26220: PPUSH
26221: CALL_OW 559
// if warehouseGatheringPoints then
26225: LD_EXP 75
26229: IFFALSE 26355
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26231: LD_ADDR_VAR 0 3
26235: PUSH
26236: LD_EXP 75
26240: PPUSH
26241: CALL 75355 0 1
26245: ST_TO_ADDR
// for i := 1 to list do
26246: LD_ADDR_VAR 0 2
26250: PUSH
26251: DOUBLE
26252: LD_INT 1
26254: DEC
26255: ST_TO_ADDR
26256: LD_VAR 0 3
26260: PUSH
26261: FOR_TO
26262: IFFALSE 26353
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26264: LD_STRING setWarehouseGatheringPointXY(
26266: PUSH
26267: LD_VAR 0 3
26271: PUSH
26272: LD_VAR 0 2
26276: ARRAY
26277: PUSH
26278: LD_INT 1
26280: ARRAY
26281: STR
26282: PUSH
26283: LD_STRING ,
26285: STR
26286: PUSH
26287: LD_VAR 0 3
26291: PUSH
26292: LD_VAR 0 2
26296: ARRAY
26297: PUSH
26298: LD_INT 2
26300: ARRAY
26301: STR
26302: PUSH
26303: LD_STRING ,
26305: STR
26306: PUSH
26307: LD_VAR 0 3
26311: PUSH
26312: LD_VAR 0 2
26316: ARRAY
26317: PUSH
26318: LD_INT 3
26320: ARRAY
26321: STR
26322: PUSH
26323: LD_STRING ,
26325: STR
26326: PUSH
26327: LD_VAR 0 3
26331: PUSH
26332: LD_VAR 0 2
26336: ARRAY
26337: PUSH
26338: LD_INT 4
26340: ARRAY
26341: STR
26342: PUSH
26343: LD_STRING )
26345: STR
26346: PPUSH
26347: CALL_OW 559
26351: GO 26261
26353: POP
26354: POP
// end ; end ;
26355: LD_VAR 0 1
26359: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26360: LD_EXP 75
26364: IFFALSE 27059
26366: GO 26368
26368: DISABLE
26369: LD_INT 0
26371: PPUSH
26372: PPUSH
26373: PPUSH
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
26378: PPUSH
26379: PPUSH
// begin enable ;
26380: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26381: LD_ADDR_VAR 0 3
26385: PUSH
26386: LD_EXP 75
26390: PPUSH
26391: CALL 75355 0 1
26395: ST_TO_ADDR
// if not list then
26396: LD_VAR 0 3
26400: NOT
26401: IFFALSE 26405
// exit ;
26403: GO 27059
// for i := 1 to list do
26405: LD_ADDR_VAR 0 1
26409: PUSH
26410: DOUBLE
26411: LD_INT 1
26413: DEC
26414: ST_TO_ADDR
26415: LD_VAR 0 3
26419: PUSH
26420: FOR_TO
26421: IFFALSE 27057
// begin depot := list [ i ] [ 2 ] ;
26423: LD_ADDR_VAR 0 8
26427: PUSH
26428: LD_VAR 0 3
26432: PUSH
26433: LD_VAR 0 1
26437: ARRAY
26438: PUSH
26439: LD_INT 2
26441: ARRAY
26442: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26443: LD_ADDR_VAR 0 5
26447: PUSH
26448: LD_VAR 0 3
26452: PUSH
26453: LD_VAR 0 1
26457: ARRAY
26458: PUSH
26459: LD_INT 1
26461: ARRAY
26462: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26463: LD_VAR 0 8
26467: PPUSH
26468: CALL_OW 301
26472: IFTRUE 26491
26474: PUSH
26475: LD_VAR 0 5
26479: PUSH
26480: LD_VAR 0 8
26484: PPUSH
26485: CALL_OW 255
26489: NONEQUAL
26490: OR
26491: IFFALSE 26520
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26493: LD_ADDR_EXP 75
26497: PUSH
26498: LD_EXP 75
26502: PPUSH
26503: LD_VAR 0 8
26507: PPUSH
26508: LD_INT 0
26510: PPUSH
26511: CALL_OW 1
26515: ST_TO_ADDR
// exit ;
26516: POP
26517: POP
26518: GO 27059
// end ; x := list [ i ] [ 3 ] ;
26520: LD_ADDR_VAR 0 6
26524: PUSH
26525: LD_VAR 0 3
26529: PUSH
26530: LD_VAR 0 1
26534: ARRAY
26535: PUSH
26536: LD_INT 3
26538: ARRAY
26539: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26540: LD_ADDR_VAR 0 7
26544: PUSH
26545: LD_VAR 0 3
26549: PUSH
26550: LD_VAR 0 1
26554: ARRAY
26555: PUSH
26556: LD_INT 4
26558: ARRAY
26559: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26560: LD_ADDR_VAR 0 9
26564: PUSH
26565: LD_VAR 0 6
26569: PPUSH
26570: LD_VAR 0 7
26574: PPUSH
26575: LD_INT 16
26577: PPUSH
26578: CALL 73929 0 3
26582: ST_TO_ADDR
// if not cratesNearbyPoint then
26583: LD_VAR 0 9
26587: NOT
26588: IFFALSE 26594
// exit ;
26590: POP
26591: POP
26592: GO 27059
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26594: LD_ADDR_VAR 0 4
26598: PUSH
26599: LD_INT 22
26601: PUSH
26602: LD_VAR 0 5
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 3
26613: PUSH
26614: LD_INT 60
26616: PUSH
26617: EMPTY
26618: LIST
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 91
26626: PUSH
26627: LD_VAR 0 8
26631: PUSH
26632: LD_INT 6
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 2
26642: PUSH
26643: LD_INT 25
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 25
26655: PUSH
26656: LD_INT 16
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: LIST
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: PPUSH
26674: CALL_OW 69
26678: PUSH
26679: LD_VAR 0 8
26683: PPUSH
26684: CALL_OW 313
26688: PPUSH
26689: LD_INT 3
26691: PUSH
26692: LD_INT 60
26694: PUSH
26695: EMPTY
26696: LIST
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 2
26704: PUSH
26705: LD_INT 25
26707: PUSH
26708: LD_INT 2
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 25
26717: PUSH
26718: LD_INT 16
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PPUSH
26734: CALL_OW 72
26738: UNION
26739: ST_TO_ADDR
// if tmp then
26740: LD_VAR 0 4
26744: IFFALSE 26824
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26746: LD_ADDR_VAR 0 4
26750: PUSH
26751: LD_VAR 0 4
26755: PPUSH
26756: LD_INT 3
26758: PPUSH
26759: CALL 71736 0 2
26763: ST_TO_ADDR
// for j in tmp do
26764: LD_ADDR_VAR 0 2
26768: PUSH
26769: LD_VAR 0 4
26773: PUSH
26774: FOR_IN
26775: IFFALSE 26818
// begin if IsInUnit ( j ) then
26777: LD_VAR 0 2
26781: PPUSH
26782: CALL_OW 310
26786: IFFALSE 26797
// ComExit ( j ) ;
26788: LD_VAR 0 2
26792: PPUSH
26793: CALL 71819 0 1
// AddComCollect ( j , x , y ) ;
26797: LD_VAR 0 2
26801: PPUSH
26802: LD_VAR 0 6
26806: PPUSH
26807: LD_VAR 0 7
26811: PPUSH
26812: CALL_OW 177
// end ;
26816: GO 26774
26818: POP
26819: POP
// exit ;
26820: POP
26821: POP
26822: GO 27059
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26824: LD_ADDR_VAR 0 4
26828: PUSH
26829: LD_INT 22
26831: PUSH
26832: LD_VAR 0 5
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 91
26843: PUSH
26844: LD_VAR 0 8
26848: PUSH
26849: LD_INT 8
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 2
26859: PUSH
26860: LD_INT 34
26862: PUSH
26863: LD_INT 12
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 34
26872: PUSH
26873: LD_INT 51
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 34
26882: PUSH
26883: LD_INT 32
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 34
26892: PUSH
26893: LD_INT 89
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: LIST
26911: PPUSH
26912: CALL_OW 69
26916: ST_TO_ADDR
// if tmp then
26917: LD_VAR 0 4
26921: IFFALSE 27055
// begin for j in tmp do
26923: LD_ADDR_VAR 0 2
26927: PUSH
26928: LD_VAR 0 4
26932: PUSH
26933: FOR_IN
26934: IFFALSE 27053
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26936: LD_VAR 0 2
26940: PPUSH
26941: CALL_OW 262
26945: PUSH
26946: LD_INT 3
26948: EQUAL
26949: IFTRUE 26966
26951: PUSH
26952: LD_VAR 0 2
26956: PPUSH
26957: CALL_OW 261
26961: PUSH
26962: LD_INT 20
26964: GREATER
26965: OR
26966: IFFALSE 26980
26968: PUSH
26969: LD_VAR 0 2
26973: PPUSH
26974: CALL_OW 314
26978: NOT
26979: AND
26980: IFFALSE 27010
26982: PUSH
26983: LD_VAR 0 2
26987: PPUSH
26988: CALL_OW 263
26992: PUSH
26993: LD_INT 1
26995: NONEQUAL
26996: IFTRUE 27009
26998: PUSH
26999: LD_VAR 0 2
27003: PPUSH
27004: CALL_OW 311
27008: OR
27009: AND
27010: IFFALSE 27051
// begin ComCollect ( j , x , y ) ;
27012: LD_VAR 0 2
27016: PPUSH
27017: LD_VAR 0 6
27021: PPUSH
27022: LD_VAR 0 7
27026: PPUSH
27027: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27031: LD_VAR 0 2
27035: PPUSH
27036: LD_VAR 0 8
27040: PPUSH
27041: CALL_OW 172
// exit ;
27045: POP
27046: POP
27047: POP
27048: POP
27049: GO 27059
// end ;
27051: GO 26933
27053: POP
27054: POP
// end ; end ;
27055: GO 26420
27057: POP
27058: POP
// end ; end_of_file
27059: PPOPN 9
27061: END
// export function SOS_UnitDestroyed ( un ) ; begin
27062: LD_INT 0
27064: PPUSH
// ComRadiation ( un ) ;
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL 28151 0 1
// end ;
27074: LD_VAR 0 2
27078: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27079: LD_INT 0
27081: PPUSH
// ComRadiation ( un ) ;
27082: LD_VAR 0 1
27086: PPUSH
27087: CALL 28151 0 1
// end ;
27091: LD_VAR 0 2
27095: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27096: LD_INT 0
27098: PPUSH
// end ;
27099: LD_VAR 0 4
27103: RET
// export function SOS_Command ( cmd ) ; begin
27104: LD_INT 0
27106: PPUSH
// end ;
27107: LD_VAR 0 2
27111: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27112: LD_INT 0
27114: PPUSH
// end ;
27115: LD_VAR 0 6
27119: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
27120: LD_INT 0
27122: PPUSH
27123: PPUSH
27124: PPUSH
27125: PPUSH
// if not vehicle or not factory then
27126: LD_VAR 0 1
27130: NOT
27131: IFTRUE 27140
27133: PUSH
27134: LD_VAR 0 2
27138: NOT
27139: OR
27140: IFFALSE 27144
// exit ;
27142: GO 27726
// if not factoryWaypoints then
27144: LD_EXP 73
27148: NOT
27149: IFFALSE 27153
// exit ;
27151: GO 27726
// for i := 1 to Count ( factoryWaypoints ) do
27153: LD_ADDR_VAR 0 4
27157: PUSH
27158: DOUBLE
27159: LD_INT 1
27161: DEC
27162: ST_TO_ADDR
27163: LD_EXP 73
27167: PPUSH
27168: CALL 35489 0 1
27172: PUSH
27173: FOR_TO
27174: IFFALSE 27724
// if factoryWaypoints [ i ] [ 2 ] = factory then
27176: LD_EXP 73
27180: PUSH
27181: LD_VAR 0 4
27185: ARRAY
27186: PUSH
27187: LD_INT 2
27189: ARRAY
27190: PUSH
27191: LD_VAR 0 2
27195: EQUAL
27196: IFFALSE 27722
// begin if GetControl ( vehicle ) = control_manual then
27198: LD_VAR 0 1
27202: PPUSH
27203: CALL_OW 263
27207: PUSH
27208: LD_INT 1
27210: EQUAL
27211: IFFALSE 27575
// begin driver := IsDrivenBy ( vehicle ) ;
27213: LD_ADDR_VAR 0 5
27217: PUSH
27218: LD_VAR 0 1
27222: PPUSH
27223: CALL_OW 311
27227: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27228: LD_VAR 0 5
27232: PUSH
27233: LD_EXP 74
27237: IN
27238: IFTRUE 27252
27240: PUSH
27241: LD_VAR 0 1
27245: PUSH
27246: LD_EXP 74
27250: IN
27251: OR
27252: IFFALSE 27258
// exit ;
27254: POP
27255: POP
27256: GO 27726
// if not HasTask ( driver ) then
27258: LD_VAR 0 5
27262: PPUSH
27263: CALL_OW 314
27267: NOT
27268: IFFALSE 27573
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27270: LD_ADDR_EXP 74
27274: PUSH
27275: LD_EXP 74
27279: PPUSH
27280: LD_VAR 0 5
27284: PPUSH
27285: CALL 71421 0 2
27289: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27290: LD_ADDR_EXP 74
27294: PUSH
27295: LD_EXP 74
27299: PPUSH
27300: LD_VAR 0 1
27304: PPUSH
27305: CALL 71421 0 2
27309: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27310: LD_ADDR_VAR 0 6
27314: PUSH
27315: LD_EXP 73
27319: PUSH
27320: LD_VAR 0 4
27324: ARRAY
27325: PUSH
27326: LD_INT 3
27328: ARRAY
27329: PPUSH
27330: LD_EXP 73
27334: PUSH
27335: LD_VAR 0 4
27339: ARRAY
27340: PUSH
27341: LD_INT 4
27343: ARRAY
27344: PPUSH
27345: CALL_OW 428
27349: ST_TO_ADDR
// if hex then
27350: LD_VAR 0 6
27354: IFFALSE 27372
// ComMoveUnit ( driver , hex ) else
27356: LD_VAR 0 5
27360: PPUSH
27361: LD_VAR 0 6
27365: PPUSH
27366: CALL_OW 112
27370: GO 27456
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27372: LD_VAR 0 1
27376: PPUSH
27377: LD_EXP 73
27381: PUSH
27382: LD_VAR 0 4
27386: ARRAY
27387: PUSH
27388: LD_INT 3
27390: ARRAY
27391: PPUSH
27392: LD_EXP 73
27396: PUSH
27397: LD_VAR 0 4
27401: ARRAY
27402: PUSH
27403: LD_INT 4
27405: ARRAY
27406: PPUSH
27407: CALL_OW 297
27411: PUSH
27412: LD_INT 0
27414: GREATER
27415: IFFALSE 27456
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27417: LD_VAR 0 5
27421: PPUSH
27422: LD_EXP 73
27426: PUSH
27427: LD_VAR 0 4
27431: ARRAY
27432: PUSH
27433: LD_INT 3
27435: ARRAY
27436: PPUSH
27437: LD_EXP 73
27441: PUSH
27442: LD_VAR 0 4
27446: ARRAY
27447: PUSH
27448: LD_INT 4
27450: ARRAY
27451: PPUSH
27452: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27456: LD_VAR 0 5
27460: PPUSH
27461: CALL_OW 181
// if Multiplayer then
27465: LD_OWVAR 4
27469: IFFALSE 27518
// begin repeat wait ( 10 ) ;
27471: LD_INT 10
27473: PPUSH
27474: CALL_OW 67
// until not IsInUnit ( driver ) ;
27478: LD_VAR 0 5
27482: PPUSH
27483: CALL_OW 310
27487: NOT
27488: IFFALSE 27471
// if not HasTask ( driver ) then
27490: LD_VAR 0 5
27494: PPUSH
27495: CALL_OW 314
27499: NOT
27500: IFFALSE 27516
// ComEnterUnit ( driver , factory ) ;
27502: LD_VAR 0 5
27506: PPUSH
27507: LD_VAR 0 2
27511: PPUSH
27512: CALL_OW 120
// end else
27516: GO 27532
// AddComEnterUnit ( driver , factory ) ;
27518: LD_VAR 0 5
27522: PPUSH
27523: LD_VAR 0 2
27527: PPUSH
27528: CALL_OW 180
// wait ( 0 0$1 ) ;
27532: LD_INT 35
27534: PPUSH
27535: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27539: LD_ADDR_EXP 74
27543: PUSH
27544: LD_EXP 74
27548: PUSH
27549: LD_VAR 0 5
27553: DIFF
27554: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27555: LD_ADDR_EXP 74
27559: PUSH
27560: LD_EXP 74
27564: PUSH
27565: LD_VAR 0 1
27569: DIFF
27570: ST_TO_ADDR
// break ;
27571: GO 27724
// end ; end else
27573: GO 27722
// if GetControl ( vehicle ) = control_remote then
27575: LD_VAR 0 1
27579: PPUSH
27580: CALL_OW 263
27584: PUSH
27585: LD_INT 2
27587: EQUAL
27588: IFFALSE 27674
// begin wait ( 0 0$2 ) ;
27590: LD_INT 70
27592: PPUSH
27593: CALL_OW 67
// repeat wait ( 10 ) ;
27597: LD_INT 10
27599: PPUSH
27600: CALL_OW 67
// Connect ( vehicle ) ;
27604: LD_VAR 0 1
27608: PPUSH
27609: CALL 41733 0 1
// until IsControledBy ( vehicle ) ;
27613: LD_VAR 0 1
27617: PPUSH
27618: CALL_OW 312
27622: IFFALSE 27597
// wait ( 10 ) ;
27624: LD_INT 10
27626: PPUSH
27627: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27631: LD_VAR 0 1
27635: PPUSH
27636: LD_EXP 73
27640: PUSH
27641: LD_VAR 0 4
27645: ARRAY
27646: PUSH
27647: LD_INT 3
27649: ARRAY
27650: PPUSH
27651: LD_EXP 73
27655: PUSH
27656: LD_VAR 0 4
27660: ARRAY
27661: PUSH
27662: LD_INT 4
27664: ARRAY
27665: PPUSH
27666: CALL_OW 111
// break ;
27670: GO 27724
// end else
27672: GO 27722
// begin wait ( 0 0$3 ) ;
27674: LD_INT 105
27676: PPUSH
27677: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27681: LD_VAR 0 1
27685: PPUSH
27686: LD_EXP 73
27690: PUSH
27691: LD_VAR 0 4
27695: ARRAY
27696: PUSH
27697: LD_INT 3
27699: ARRAY
27700: PPUSH
27701: LD_EXP 73
27705: PUSH
27706: LD_VAR 0 4
27710: ARRAY
27711: PUSH
27712: LD_INT 4
27714: ARRAY
27715: PPUSH
27716: CALL_OW 111
// break ;
27720: GO 27724
// end ; end ;
27722: GO 27173
27724: POP
27725: POP
// end ;
27726: LD_VAR 0 3
27730: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27731: LD_INT 0
27733: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27734: LD_VAR 0 1
27738: PUSH
27739: LD_INT 250
27741: EQUAL
27742: IFFALSE 27759
27744: PUSH
27745: LD_VAR 0 2
27749: PPUSH
27750: CALL_OW 264
27754: PUSH
27755: LD_INT 81
27757: EQUAL
27758: AND
27759: IFFALSE 27780
// MinerPlaceMine ( unit , x , y ) ;
27761: LD_VAR 0 2
27765: PPUSH
27766: LD_VAR 0 4
27770: PPUSH
27771: LD_VAR 0 5
27775: PPUSH
27776: CALL 30912 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27780: LD_VAR 0 1
27784: PUSH
27785: LD_INT 251
27787: EQUAL
27788: IFFALSE 27805
27790: PUSH
27791: LD_VAR 0 2
27795: PPUSH
27796: CALL_OW 264
27800: PUSH
27801: LD_INT 81
27803: EQUAL
27804: AND
27805: IFFALSE 27826
// MinerDetonateMine ( unit , x , y ) ;
27807: LD_VAR 0 2
27811: PPUSH
27812: LD_VAR 0 4
27816: PPUSH
27817: LD_VAR 0 5
27821: PPUSH
27822: CALL 31191 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27826: LD_VAR 0 1
27830: PUSH
27831: LD_INT 252
27833: EQUAL
27834: IFFALSE 27851
27836: PUSH
27837: LD_VAR 0 2
27841: PPUSH
27842: CALL_OW 264
27846: PUSH
27847: LD_INT 81
27849: EQUAL
27850: AND
27851: IFFALSE 27872
// MinerCreateMinefield ( unit , x , y ) ;
27853: LD_VAR 0 2
27857: PPUSH
27858: LD_VAR 0 4
27862: PPUSH
27863: LD_VAR 0 5
27867: PPUSH
27868: CALL 31610 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27872: LD_VAR 0 1
27876: PUSH
27877: LD_INT 253
27879: EQUAL
27880: IFFALSE 27897
27882: PUSH
27883: LD_VAR 0 2
27887: PPUSH
27888: CALL_OW 257
27892: PUSH
27893: LD_INT 5
27895: EQUAL
27896: AND
27897: IFFALSE 27918
// ComBinocular ( unit , x , y ) ;
27899: LD_VAR 0 2
27903: PPUSH
27904: LD_VAR 0 4
27908: PPUSH
27909: LD_VAR 0 5
27913: PPUSH
27914: CALL 31985 0 3
// if selectedUnit then
27918: LD_VAR 0 3
27922: IFFALSE 27982
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27924: LD_VAR 0 1
27928: PUSH
27929: LD_INT 254
27931: EQUAL
27932: IFFALSE 27949
27934: PUSH
27935: LD_VAR 0 2
27939: PPUSH
27940: CALL_OW 264
27944: PUSH
27945: LD_INT 99
27947: EQUAL
27948: AND
27949: IFFALSE 27966
27951: PUSH
27952: LD_VAR 0 3
27956: PPUSH
27957: CALL_OW 263
27961: PUSH
27962: LD_INT 3
27964: EQUAL
27965: AND
27966: IFFALSE 27982
// HackDestroyVehicle ( unit , selectedUnit ) ;
27968: LD_VAR 0 2
27972: PPUSH
27973: LD_VAR 0 3
27977: PPUSH
27978: CALL 30272 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27982: LD_VAR 0 1
27986: PUSH
27987: LD_INT 255
27989: EQUAL
27990: IFFALSE 28014
27992: PUSH
27993: LD_VAR 0 2
27997: PPUSH
27998: CALL_OW 264
28002: PUSH
28003: LD_INT 14
28005: PUSH
28006: LD_INT 53
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: IN
28013: AND
28014: IFFALSE 28032
28016: PUSH
28017: LD_VAR 0 4
28021: PPUSH
28022: LD_VAR 0 5
28026: PPUSH
28027: CALL_OW 488
28031: AND
28032: IFFALSE 28056
// CutTreeXYR ( unit , x , y , 12 ) ;
28034: LD_VAR 0 2
28038: PPUSH
28039: LD_VAR 0 4
28043: PPUSH
28044: LD_VAR 0 5
28048: PPUSH
28049: LD_INT 12
28051: PPUSH
28052: CALL 28247 0 4
// if cmd = 256 then
28056: LD_VAR 0 1
28060: PUSH
28061: LD_INT 256
28063: EQUAL
28064: IFFALSE 28085
// SetFactoryWaypoint ( unit , x , y ) ;
28066: LD_VAR 0 2
28070: PPUSH
28071: LD_VAR 0 4
28075: PPUSH
28076: LD_VAR 0 5
28080: PPUSH
28081: CALL 25607 0 3
// if cmd = 257 then
28085: LD_VAR 0 1
28089: PUSH
28090: LD_INT 257
28092: EQUAL
28093: IFFALSE 28114
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28095: LD_VAR 0 2
28099: PPUSH
28100: LD_VAR 0 4
28104: PPUSH
28105: LD_VAR 0 5
28109: PPUSH
28110: CALL 26103 0 3
// if cmd = 258 then
28114: LD_VAR 0 1
28118: PUSH
28119: LD_INT 258
28121: EQUAL
28122: IFFALSE 28146
// BurnTreeXYR ( unit , x , y , 8 ) ;
28124: LD_VAR 0 2
28128: PPUSH
28129: LD_VAR 0 4
28133: PPUSH
28134: LD_VAR 0 5
28138: PPUSH
28139: LD_INT 8
28141: PPUSH
28142: CALL 28647 0 4
// end ;
28146: LD_VAR 0 6
28150: RET
// export function ComRadiation ( un ) ; var eff ; begin
28151: LD_INT 0
28153: PPUSH
28154: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28155: LD_VAR 0 1
28159: PPUSH
28160: CALL_OW 264
28164: PUSH
28165: LD_INT 91
28167: NONEQUAL
28168: IFFALSE 28172
// exit ;
28170: GO 28242
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28172: LD_INT 68
28174: PPUSH
28175: LD_VAR 0 1
28179: PPUSH
28180: CALL_OW 255
28184: PPUSH
28185: CALL_OW 321
28189: PUSH
28190: LD_INT 2
28192: EQUAL
28193: IFFALSE 28205
// eff := 50 else
28195: LD_ADDR_VAR 0 3
28199: PUSH
28200: LD_INT 50
28202: ST_TO_ADDR
28203: GO 28213
// eff := 25 ;
28205: LD_ADDR_VAR 0 3
28209: PUSH
28210: LD_INT 25
28212: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28213: LD_VAR 0 1
28217: PPUSH
28218: CALL_OW 250
28222: PPUSH
28223: LD_VAR 0 1
28227: PPUSH
28228: CALL_OW 251
28232: PPUSH
28233: LD_VAR 0 3
28237: PPUSH
28238: CALL_OW 495
// end ;
28242: LD_VAR 0 2
28246: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28247: LD_INT 0
28249: PPUSH
28250: PPUSH
28251: PPUSH
28252: PPUSH
28253: PPUSH
28254: PPUSH
28255: PPUSH
28256: PPUSH
28257: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28258: LD_VAR 0 1
28262: PPUSH
28263: CALL_OW 302
28267: NOT
28268: IFTRUE 28287
28270: PUSH
28271: LD_VAR 0 2
28275: PPUSH
28276: LD_VAR 0 3
28280: PPUSH
28281: CALL_OW 488
28285: NOT
28286: OR
28287: IFTRUE 28296
28289: PUSH
28290: LD_VAR 0 4
28294: NOT
28295: OR
28296: IFFALSE 28300
// exit ;
28298: GO 28642
// list := [ ] ;
28300: LD_ADDR_VAR 0 13
28304: PUSH
28305: EMPTY
28306: ST_TO_ADDR
// if x - r < 0 then
28307: LD_VAR 0 2
28311: PUSH
28312: LD_VAR 0 4
28316: MINUS
28317: PUSH
28318: LD_INT 0
28320: LESS
28321: IFFALSE 28333
// min_x := 0 else
28323: LD_ADDR_VAR 0 7
28327: PUSH
28328: LD_INT 0
28330: ST_TO_ADDR
28331: GO 28349
// min_x := x - r ;
28333: LD_ADDR_VAR 0 7
28337: PUSH
28338: LD_VAR 0 2
28342: PUSH
28343: LD_VAR 0 4
28347: MINUS
28348: ST_TO_ADDR
// if y - r < 0 then
28349: LD_VAR 0 3
28353: PUSH
28354: LD_VAR 0 4
28358: MINUS
28359: PUSH
28360: LD_INT 0
28362: LESS
28363: IFFALSE 28375
// min_y := 0 else
28365: LD_ADDR_VAR 0 8
28369: PUSH
28370: LD_INT 0
28372: ST_TO_ADDR
28373: GO 28391
// min_y := y - r ;
28375: LD_ADDR_VAR 0 8
28379: PUSH
28380: LD_VAR 0 3
28384: PUSH
28385: LD_VAR 0 4
28389: MINUS
28390: ST_TO_ADDR
// max_x := x + r ;
28391: LD_ADDR_VAR 0 9
28395: PUSH
28396: LD_VAR 0 2
28400: PUSH
28401: LD_VAR 0 4
28405: PLUS
28406: ST_TO_ADDR
// max_y := y + r ;
28407: LD_ADDR_VAR 0 10
28411: PUSH
28412: LD_VAR 0 3
28416: PUSH
28417: LD_VAR 0 4
28421: PLUS
28422: ST_TO_ADDR
// for _x = min_x to max_x do
28423: LD_ADDR_VAR 0 11
28427: PUSH
28428: DOUBLE
28429: LD_VAR 0 7
28433: DEC
28434: ST_TO_ADDR
28435: LD_VAR 0 9
28439: PUSH
28440: FOR_TO
28441: IFFALSE 28560
// for _y = min_y to max_y do
28443: LD_ADDR_VAR 0 12
28447: PUSH
28448: DOUBLE
28449: LD_VAR 0 8
28453: DEC
28454: ST_TO_ADDR
28455: LD_VAR 0 10
28459: PUSH
28460: FOR_TO
28461: IFFALSE 28556
// begin if not ValidHex ( _x , _y ) then
28463: LD_VAR 0 11
28467: PPUSH
28468: LD_VAR 0 12
28472: PPUSH
28473: CALL_OW 488
28477: NOT
28478: IFFALSE 28482
// continue ;
28480: GO 28460
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28482: LD_VAR 0 11
28486: PPUSH
28487: LD_VAR 0 12
28491: PPUSH
28492: CALL_OW 351
28496: IFFALSE 28514
28498: PUSH
28499: LD_VAR 0 11
28503: PPUSH
28504: LD_VAR 0 12
28508: PPUSH
28509: CALL_OW 554
28513: AND
28514: IFFALSE 28554
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28516: LD_ADDR_VAR 0 13
28520: PUSH
28521: LD_VAR 0 13
28525: PPUSH
28526: LD_VAR 0 13
28530: PUSH
28531: LD_INT 1
28533: PLUS
28534: PPUSH
28535: LD_VAR 0 11
28539: PUSH
28540: LD_VAR 0 12
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PPUSH
28549: CALL_OW 2
28553: ST_TO_ADDR
// end ;
28554: GO 28460
28556: POP
28557: POP
28558: GO 28440
28560: POP
28561: POP
// if not list then
28562: LD_VAR 0 13
28566: NOT
28567: IFFALSE 28571
// exit ;
28569: GO 28642
// for i in list do
28571: LD_ADDR_VAR 0 6
28575: PUSH
28576: LD_VAR 0 13
28580: PUSH
28581: FOR_IN
28582: IFFALSE 28640
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28584: LD_VAR 0 1
28588: PPUSH
28589: LD_STRING M
28591: PUSH
28592: LD_VAR 0 6
28596: PUSH
28597: LD_INT 1
28599: ARRAY
28600: PUSH
28601: LD_VAR 0 6
28605: PUSH
28606: LD_INT 2
28608: ARRAY
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: PUSH
28631: EMPTY
28632: LIST
28633: PPUSH
28634: CALL_OW 447
28638: GO 28581
28640: POP
28641: POP
// end ;
28642: LD_VAR 0 5
28646: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28647: LD_INT 0
28649: PPUSH
28650: PPUSH
28651: PPUSH
28652: PPUSH
28653: PPUSH
28654: PPUSH
28655: PPUSH
28656: PPUSH
28657: PPUSH
28658: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28659: LD_VAR 0 1
28663: PPUSH
28664: CALL_OW 302
28668: NOT
28669: IFTRUE 28688
28671: PUSH
28672: LD_VAR 0 2
28676: PPUSH
28677: LD_VAR 0 3
28681: PPUSH
28682: CALL_OW 488
28686: NOT
28687: OR
28688: IFTRUE 28697
28690: PUSH
28691: LD_VAR 0 4
28695: NOT
28696: OR
28697: IFFALSE 28701
// exit ;
28699: GO 29218
// list := [ ] ;
28701: LD_ADDR_VAR 0 13
28705: PUSH
28706: EMPTY
28707: ST_TO_ADDR
// if x - r < 0 then
28708: LD_VAR 0 2
28712: PUSH
28713: LD_VAR 0 4
28717: MINUS
28718: PUSH
28719: LD_INT 0
28721: LESS
28722: IFFALSE 28734
// min_x := 0 else
28724: LD_ADDR_VAR 0 7
28728: PUSH
28729: LD_INT 0
28731: ST_TO_ADDR
28732: GO 28750
// min_x := x - r ;
28734: LD_ADDR_VAR 0 7
28738: PUSH
28739: LD_VAR 0 2
28743: PUSH
28744: LD_VAR 0 4
28748: MINUS
28749: ST_TO_ADDR
// if y - r < 0 then
28750: LD_VAR 0 3
28754: PUSH
28755: LD_VAR 0 4
28759: MINUS
28760: PUSH
28761: LD_INT 0
28763: LESS
28764: IFFALSE 28776
// min_y := 0 else
28766: LD_ADDR_VAR 0 8
28770: PUSH
28771: LD_INT 0
28773: ST_TO_ADDR
28774: GO 28792
// min_y := y - r ;
28776: LD_ADDR_VAR 0 8
28780: PUSH
28781: LD_VAR 0 3
28785: PUSH
28786: LD_VAR 0 4
28790: MINUS
28791: ST_TO_ADDR
// max_x := x + r ;
28792: LD_ADDR_VAR 0 9
28796: PUSH
28797: LD_VAR 0 2
28801: PUSH
28802: LD_VAR 0 4
28806: PLUS
28807: ST_TO_ADDR
// max_y := y + r ;
28808: LD_ADDR_VAR 0 10
28812: PUSH
28813: LD_VAR 0 3
28817: PUSH
28818: LD_VAR 0 4
28822: PLUS
28823: ST_TO_ADDR
// for _x = min_x to max_x do
28824: LD_ADDR_VAR 0 11
28828: PUSH
28829: DOUBLE
28830: LD_VAR 0 7
28834: DEC
28835: ST_TO_ADDR
28836: LD_VAR 0 9
28840: PUSH
28841: FOR_TO
28842: IFFALSE 28961
// for _y = min_y to max_y do
28844: LD_ADDR_VAR 0 12
28848: PUSH
28849: DOUBLE
28850: LD_VAR 0 8
28854: DEC
28855: ST_TO_ADDR
28856: LD_VAR 0 10
28860: PUSH
28861: FOR_TO
28862: IFFALSE 28957
// begin if not ValidHex ( _x , _y ) then
28864: LD_VAR 0 11
28868: PPUSH
28869: LD_VAR 0 12
28873: PPUSH
28874: CALL_OW 488
28878: NOT
28879: IFFALSE 28883
// continue ;
28881: GO 28861
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28883: LD_VAR 0 11
28887: PPUSH
28888: LD_VAR 0 12
28892: PPUSH
28893: CALL_OW 351
28897: IFFALSE 28915
28899: PUSH
28900: LD_VAR 0 11
28904: PPUSH
28905: LD_VAR 0 12
28909: PPUSH
28910: CALL_OW 554
28914: AND
28915: IFFALSE 28955
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28917: LD_ADDR_VAR 0 13
28921: PUSH
28922: LD_VAR 0 13
28926: PPUSH
28927: LD_VAR 0 13
28931: PUSH
28932: LD_INT 1
28934: PLUS
28935: PPUSH
28936: LD_VAR 0 11
28940: PUSH
28941: LD_VAR 0 12
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PPUSH
28950: CALL_OW 2
28954: ST_TO_ADDR
// end ;
28955: GO 28861
28957: POP
28958: POP
28959: GO 28841
28961: POP
28962: POP
// if not list then
28963: LD_VAR 0 13
28967: NOT
28968: IFFALSE 28972
// exit ;
28970: GO 29218
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28972: LD_ADDR_VAR 0 13
28976: PUSH
28977: LD_VAR 0 1
28981: PPUSH
28982: LD_VAR 0 13
28986: PPUSH
28987: LD_INT 1
28989: PPUSH
28990: LD_INT 1
28992: PPUSH
28993: CALL 38861 0 4
28997: ST_TO_ADDR
// ComStop ( flame ) ;
28998: LD_VAR 0 1
29002: PPUSH
29003: CALL_OW 141
// for i in list do
29007: LD_ADDR_VAR 0 6
29011: PUSH
29012: LD_VAR 0 13
29016: PUSH
29017: FOR_IN
29018: IFFALSE 29049
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29020: LD_VAR 0 1
29024: PPUSH
29025: LD_VAR 0 6
29029: PUSH
29030: LD_INT 1
29032: ARRAY
29033: PPUSH
29034: LD_VAR 0 6
29038: PUSH
29039: LD_INT 2
29041: ARRAY
29042: PPUSH
29043: CALL_OW 176
29047: GO 29017
29049: POP
29050: POP
// repeat wait ( 0 0$1 ) ;
29051: LD_INT 35
29053: PPUSH
29054: CALL_OW 67
// task := GetTaskList ( flame ) ;
29058: LD_ADDR_VAR 0 14
29062: PUSH
29063: LD_VAR 0 1
29067: PPUSH
29068: CALL_OW 437
29072: ST_TO_ADDR
// if not task then
29073: LD_VAR 0 14
29077: NOT
29078: IFFALSE 29082
// exit ;
29080: GO 29218
// if task [ 1 ] [ 1 ] <> | then
29082: LD_VAR 0 14
29086: PUSH
29087: LD_INT 1
29089: ARRAY
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PUSH
29095: LD_STRING |
29097: NONEQUAL
29098: IFFALSE 29102
// exit ;
29100: GO 29218
// _x := task [ 1 ] [ 2 ] ;
29102: LD_ADDR_VAR 0 11
29106: PUSH
29107: LD_VAR 0 14
29111: PUSH
29112: LD_INT 1
29114: ARRAY
29115: PUSH
29116: LD_INT 2
29118: ARRAY
29119: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29120: LD_ADDR_VAR 0 12
29124: PUSH
29125: LD_VAR 0 14
29129: PUSH
29130: LD_INT 1
29132: ARRAY
29133: PUSH
29134: LD_INT 3
29136: ARRAY
29137: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29138: LD_VAR 0 11
29142: PPUSH
29143: LD_VAR 0 12
29147: PPUSH
29148: CALL_OW 351
29152: NOT
29153: IFTRUE 29172
29155: PUSH
29156: LD_VAR 0 11
29160: PPUSH
29161: LD_VAR 0 12
29165: PPUSH
29166: CALL_OW 554
29170: NOT
29171: OR
29172: IFFALSE 29206
// begin task := Delete ( task , 1 ) ;
29174: LD_ADDR_VAR 0 14
29178: PUSH
29179: LD_VAR 0 14
29183: PPUSH
29184: LD_INT 1
29186: PPUSH
29187: CALL_OW 3
29191: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29192: LD_VAR 0 1
29196: PPUSH
29197: LD_VAR 0 14
29201: PPUSH
29202: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29206: LD_VAR 0 1
29210: PPUSH
29211: CALL_OW 314
29215: NOT
29216: IFFALSE 29051
// end ;
29218: LD_VAR 0 5
29222: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29223: LD_EXP 77
29227: NOT
29228: IFFALSE 29278
29230: GO 29232
29232: DISABLE
// begin initHack := true ;
29233: LD_ADDR_EXP 77
29237: PUSH
29238: LD_INT 1
29240: ST_TO_ADDR
// hackTanks := [ ] ;
29241: LD_ADDR_EXP 78
29245: PUSH
29246: EMPTY
29247: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29248: LD_ADDR_EXP 79
29252: PUSH
29253: EMPTY
29254: ST_TO_ADDR
// hackLimit := 3 ;
29255: LD_ADDR_EXP 80
29259: PUSH
29260: LD_INT 3
29262: ST_TO_ADDR
// hackDist := 12 ;
29263: LD_ADDR_EXP 81
29267: PUSH
29268: LD_INT 12
29270: ST_TO_ADDR
// hackCounter := [ ] ;
29271: LD_ADDR_EXP 82
29275: PUSH
29276: EMPTY
29277: ST_TO_ADDR
// end ;
29278: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29279: LD_EXP 77
29283: IFFALSE 29301
29285: PUSH
29286: LD_INT 34
29288: PUSH
29289: LD_INT 99
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PPUSH
29296: CALL_OW 69
29300: AND
29301: IFFALSE 29554
29303: GO 29305
29305: DISABLE
29306: LD_INT 0
29308: PPUSH
29309: PPUSH
// begin enable ;
29310: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29311: LD_ADDR_VAR 0 1
29315: PUSH
29316: LD_INT 34
29318: PUSH
29319: LD_INT 99
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PPUSH
29326: CALL_OW 69
29330: PUSH
29331: FOR_IN
29332: IFFALSE 29552
// begin if not i in hackTanks then
29334: LD_VAR 0 1
29338: PUSH
29339: LD_EXP 78
29343: IN
29344: NOT
29345: IFFALSE 29428
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29347: LD_ADDR_EXP 78
29351: PUSH
29352: LD_EXP 78
29356: PPUSH
29357: LD_EXP 78
29361: PUSH
29362: LD_INT 1
29364: PLUS
29365: PPUSH
29366: LD_VAR 0 1
29370: PPUSH
29371: CALL_OW 1
29375: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29376: LD_ADDR_EXP 79
29380: PUSH
29381: LD_EXP 79
29385: PPUSH
29386: LD_EXP 79
29390: PUSH
29391: LD_INT 1
29393: PLUS
29394: PPUSH
29395: EMPTY
29396: PPUSH
29397: CALL_OW 1
29401: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29402: LD_ADDR_EXP 82
29406: PUSH
29407: LD_EXP 82
29411: PPUSH
29412: LD_EXP 82
29416: PUSH
29417: LD_INT 1
29419: PLUS
29420: PPUSH
29421: EMPTY
29422: PPUSH
29423: CALL_OW 1
29427: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 302
29437: NOT
29438: IFFALSE 29451
// begin HackUnlinkAll ( i ) ;
29440: LD_VAR 0 1
29444: PPUSH
29445: CALL 29557 0 1
// continue ;
29449: GO 29331
// end ; HackCheckCapturedStatus ( i ) ;
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL 30002 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29460: LD_ADDR_VAR 0 2
29464: PUSH
29465: LD_INT 81
29467: PUSH
29468: LD_VAR 0 1
29472: PPUSH
29473: CALL_OW 255
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 33
29484: PUSH
29485: LD_INT 3
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 91
29494: PUSH
29495: LD_VAR 0 1
29499: PUSH
29500: LD_EXP 81
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 50
29512: PUSH
29513: EMPTY
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: PPUSH
29522: CALL_OW 69
29526: ST_TO_ADDR
// if not tmp then
29527: LD_VAR 0 2
29531: NOT
29532: IFFALSE 29536
// continue ;
29534: GO 29331
// HackLink ( i , tmp ) ;
29536: LD_VAR 0 1
29540: PPUSH
29541: LD_VAR 0 2
29545: PPUSH
29546: CALL 29693 0 2
// end ;
29550: GO 29331
29552: POP
29553: POP
// end ;
29554: PPOPN 2
29556: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29557: LD_INT 0
29559: PPUSH
29560: PPUSH
29561: PPUSH
// if not hack in hackTanks then
29562: LD_VAR 0 1
29566: PUSH
29567: LD_EXP 78
29571: IN
29572: NOT
29573: IFFALSE 29577
// exit ;
29575: GO 29688
// index := GetElementIndex ( hackTanks , hack ) ;
29577: LD_ADDR_VAR 0 4
29581: PUSH
29582: LD_EXP 78
29586: PPUSH
29587: LD_VAR 0 1
29591: PPUSH
29592: CALL 38156 0 2
29596: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29597: LD_EXP 79
29601: PUSH
29602: LD_VAR 0 4
29606: ARRAY
29607: IFFALSE 29688
// begin for i in hackTanksCaptured [ index ] do
29609: LD_ADDR_VAR 0 3
29613: PUSH
29614: LD_EXP 79
29618: PUSH
29619: LD_VAR 0 4
29623: ARRAY
29624: PUSH
29625: FOR_IN
29626: IFFALSE 29652
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29628: LD_VAR 0 3
29632: PUSH
29633: LD_INT 1
29635: ARRAY
29636: PPUSH
29637: LD_VAR 0 3
29641: PUSH
29642: LD_INT 2
29644: ARRAY
29645: PPUSH
29646: CALL_OW 235
29650: GO 29625
29652: POP
29653: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29654: LD_ADDR_EXP 79
29658: PUSH
29659: LD_EXP 79
29663: PPUSH
29664: LD_VAR 0 4
29668: PPUSH
29669: EMPTY
29670: PPUSH
29671: CALL_OW 1
29675: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29676: LD_VAR 0 1
29680: PPUSH
29681: LD_INT 0
29683: PPUSH
29684: CALL_OW 505
// end ; end ;
29688: LD_VAR 0 2
29692: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29693: LD_INT 0
29695: PPUSH
29696: PPUSH
29697: PPUSH
// if not hack in hackTanks or not vehicles then
29698: LD_VAR 0 1
29702: PUSH
29703: LD_EXP 78
29707: IN
29708: NOT
29709: IFTRUE 29718
29711: PUSH
29712: LD_VAR 0 2
29716: NOT
29717: OR
29718: IFFALSE 29722
// exit ;
29720: GO 29997
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29722: LD_ADDR_VAR 0 2
29726: PUSH
29727: LD_VAR 0 1
29731: PPUSH
29732: LD_VAR 0 2
29736: PPUSH
29737: LD_INT 1
29739: PPUSH
29740: LD_INT 1
29742: PPUSH
29743: CALL 38808 0 4
29747: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29748: LD_ADDR_VAR 0 5
29752: PUSH
29753: LD_EXP 78
29757: PPUSH
29758: LD_VAR 0 1
29762: PPUSH
29763: CALL 38156 0 2
29767: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29768: LD_EXP 79
29772: PUSH
29773: LD_VAR 0 5
29777: ARRAY
29778: PUSH
29779: LD_EXP 80
29783: LESS
29784: IFFALSE 29973
// begin for i := 1 to vehicles do
29786: LD_ADDR_VAR 0 4
29790: PUSH
29791: DOUBLE
29792: LD_INT 1
29794: DEC
29795: ST_TO_ADDR
29796: LD_VAR 0 2
29800: PUSH
29801: FOR_TO
29802: IFFALSE 29971
// begin if hackTanksCaptured [ index ] = hackLimit then
29804: LD_EXP 79
29808: PUSH
29809: LD_VAR 0 5
29813: ARRAY
29814: PUSH
29815: LD_EXP 80
29819: EQUAL
29820: IFFALSE 29824
// break ;
29822: GO 29971
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29824: LD_ADDR_EXP 82
29828: PUSH
29829: LD_EXP 82
29833: PPUSH
29834: LD_VAR 0 5
29838: PPUSH
29839: LD_EXP 82
29843: PUSH
29844: LD_VAR 0 5
29848: ARRAY
29849: PUSH
29850: LD_INT 1
29852: PLUS
29853: PPUSH
29854: CALL_OW 1
29858: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29859: LD_ADDR_EXP 79
29863: PUSH
29864: LD_EXP 79
29868: PPUSH
29869: LD_VAR 0 5
29873: PUSH
29874: LD_EXP 79
29878: PUSH
29879: LD_VAR 0 5
29883: ARRAY
29884: PUSH
29885: LD_INT 1
29887: PLUS
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PPUSH
29893: LD_VAR 0 2
29897: PUSH
29898: LD_VAR 0 4
29902: ARRAY
29903: PUSH
29904: LD_VAR 0 2
29908: PUSH
29909: LD_VAR 0 4
29913: ARRAY
29914: PPUSH
29915: CALL_OW 255
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PPUSH
29924: CALL 38373 0 3
29928: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29929: LD_VAR 0 2
29933: PUSH
29934: LD_VAR 0 4
29938: ARRAY
29939: PPUSH
29940: LD_VAR 0 1
29944: PPUSH
29945: CALL_OW 255
29949: PPUSH
29950: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29954: LD_VAR 0 2
29958: PUSH
29959: LD_VAR 0 4
29963: ARRAY
29964: PPUSH
29965: CALL_OW 141
// end ;
29969: GO 29801
29971: POP
29972: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29973: LD_VAR 0 1
29977: PPUSH
29978: LD_EXP 79
29982: PUSH
29983: LD_VAR 0 5
29987: ARRAY
29988: PUSH
29989: LD_INT 0
29991: PLUS
29992: PPUSH
29993: CALL_OW 505
// end ;
29997: LD_VAR 0 3
30001: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30002: LD_INT 0
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
// if not hack in hackTanks then
30008: LD_VAR 0 1
30012: PUSH
30013: LD_EXP 78
30017: IN
30018: NOT
30019: IFFALSE 30023
// exit ;
30021: GO 30267
// index := GetElementIndex ( hackTanks , hack ) ;
30023: LD_ADDR_VAR 0 4
30027: PUSH
30028: LD_EXP 78
30032: PPUSH
30033: LD_VAR 0 1
30037: PPUSH
30038: CALL 38156 0 2
30042: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30043: LD_ADDR_VAR 0 3
30047: PUSH
30048: DOUBLE
30049: LD_EXP 79
30053: PUSH
30054: LD_VAR 0 4
30058: ARRAY
30059: INC
30060: ST_TO_ADDR
30061: LD_INT 1
30063: PUSH
30064: FOR_DOWNTO
30065: IFFALSE 30241
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30067: LD_ADDR_VAR 0 5
30071: PUSH
30072: LD_EXP 79
30076: PUSH
30077: LD_VAR 0 4
30081: ARRAY
30082: PUSH
30083: LD_VAR 0 3
30087: ARRAY
30088: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30089: LD_VAR 0 5
30093: PUSH
30094: LD_INT 1
30096: ARRAY
30097: PPUSH
30098: CALL_OW 302
30102: NOT
30103: IFTRUE 30131
30105: PUSH
30106: LD_VAR 0 5
30110: PUSH
30111: LD_INT 1
30113: ARRAY
30114: PPUSH
30115: CALL_OW 255
30119: PUSH
30120: LD_VAR 0 1
30124: PPUSH
30125: CALL_OW 255
30129: NONEQUAL
30130: OR
30131: IFFALSE 30239
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30133: LD_VAR 0 5
30137: PUSH
30138: LD_INT 1
30140: ARRAY
30141: PPUSH
30142: CALL_OW 305
30146: IFFALSE 30174
30148: PUSH
30149: LD_VAR 0 5
30153: PUSH
30154: LD_INT 1
30156: ARRAY
30157: PPUSH
30158: CALL_OW 255
30162: PUSH
30163: LD_VAR 0 1
30167: PPUSH
30168: CALL_OW 255
30172: EQUAL
30173: AND
30174: IFFALSE 30198
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30176: LD_VAR 0 5
30180: PUSH
30181: LD_INT 1
30183: ARRAY
30184: PPUSH
30185: LD_VAR 0 5
30189: PUSH
30190: LD_INT 2
30192: ARRAY
30193: PPUSH
30194: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30198: LD_ADDR_EXP 79
30202: PUSH
30203: LD_EXP 79
30207: PPUSH
30208: LD_VAR 0 4
30212: PPUSH
30213: LD_EXP 79
30217: PUSH
30218: LD_VAR 0 4
30222: ARRAY
30223: PPUSH
30224: LD_VAR 0 3
30228: PPUSH
30229: CALL_OW 3
30233: PPUSH
30234: CALL_OW 1
30238: ST_TO_ADDR
// end ; end ;
30239: GO 30064
30241: POP
30242: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30243: LD_VAR 0 1
30247: PPUSH
30248: LD_EXP 79
30252: PUSH
30253: LD_VAR 0 4
30257: ARRAY
30258: PUSH
30259: LD_INT 0
30261: PLUS
30262: PPUSH
30263: CALL_OW 505
// end ;
30267: LD_VAR 0 2
30271: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30272: LD_INT 0
30274: PPUSH
30275: PPUSH
30276: PPUSH
30277: PPUSH
// if not hack in hackTanks then
30278: LD_VAR 0 1
30282: PUSH
30283: LD_EXP 78
30287: IN
30288: NOT
30289: IFFALSE 30293
// exit ;
30291: GO 30378
// index := GetElementIndex ( hackTanks , hack ) ;
30293: LD_ADDR_VAR 0 5
30297: PUSH
30298: LD_EXP 78
30302: PPUSH
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL 38156 0 2
30312: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30313: LD_ADDR_VAR 0 4
30317: PUSH
30318: DOUBLE
30319: LD_INT 1
30321: DEC
30322: ST_TO_ADDR
30323: LD_EXP 79
30327: PUSH
30328: LD_VAR 0 5
30332: ARRAY
30333: PUSH
30334: FOR_TO
30335: IFFALSE 30376
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30337: LD_EXP 79
30341: PUSH
30342: LD_VAR 0 5
30346: ARRAY
30347: PUSH
30348: LD_VAR 0 4
30352: ARRAY
30353: PUSH
30354: LD_INT 1
30356: ARRAY
30357: PUSH
30358: LD_VAR 0 2
30362: EQUAL
30363: IFFALSE 30374
// KillUnit ( vehicle ) ;
30365: LD_VAR 0 2
30369: PPUSH
30370: CALL_OW 66
30374: GO 30334
30376: POP
30377: POP
// end ;
30378: LD_VAR 0 3
30382: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30383: LD_EXP 83
30387: NOT
30388: IFFALSE 30423
30390: GO 30392
30392: DISABLE
// begin initMiner := true ;
30393: LD_ADDR_EXP 83
30397: PUSH
30398: LD_INT 1
30400: ST_TO_ADDR
// minersList := [ ] ;
30401: LD_ADDR_EXP 84
30405: PUSH
30406: EMPTY
30407: ST_TO_ADDR
// minerMinesList := [ ] ;
30408: LD_ADDR_EXP 85
30412: PUSH
30413: EMPTY
30414: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30415: LD_ADDR_EXP 86
30419: PUSH
30420: LD_INT 5
30422: ST_TO_ADDR
// end ;
30423: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30424: LD_EXP 83
30428: IFFALSE 30446
30430: PUSH
30431: LD_INT 34
30433: PUSH
30434: LD_INT 81
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PPUSH
30441: CALL_OW 69
30445: AND
30446: IFFALSE 30909
30448: GO 30450
30450: DISABLE
30451: LD_INT 0
30453: PPUSH
30454: PPUSH
30455: PPUSH
30456: PPUSH
// begin enable ;
30457: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30458: LD_ADDR_VAR 0 1
30462: PUSH
30463: LD_INT 34
30465: PUSH
30466: LD_INT 81
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PPUSH
30473: CALL_OW 69
30477: PUSH
30478: FOR_IN
30479: IFFALSE 30551
// begin if not i in minersList then
30481: LD_VAR 0 1
30485: PUSH
30486: LD_EXP 84
30490: IN
30491: NOT
30492: IFFALSE 30549
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30494: LD_ADDR_EXP 84
30498: PUSH
30499: LD_EXP 84
30503: PPUSH
30504: LD_EXP 84
30508: PUSH
30509: LD_INT 1
30511: PLUS
30512: PPUSH
30513: LD_VAR 0 1
30517: PPUSH
30518: CALL_OW 1
30522: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30523: LD_ADDR_EXP 85
30527: PUSH
30528: LD_EXP 85
30532: PPUSH
30533: LD_EXP 85
30537: PUSH
30538: LD_INT 1
30540: PLUS
30541: PPUSH
30542: EMPTY
30543: PPUSH
30544: CALL_OW 1
30548: ST_TO_ADDR
// end end ;
30549: GO 30478
30551: POP
30552: POP
// for i := minerMinesList downto 1 do
30553: LD_ADDR_VAR 0 1
30557: PUSH
30558: DOUBLE
30559: LD_EXP 85
30563: INC
30564: ST_TO_ADDR
30565: LD_INT 1
30567: PUSH
30568: FOR_DOWNTO
30569: IFFALSE 30907
// begin if IsLive ( minersList [ i ] ) then
30571: LD_EXP 84
30575: PUSH
30576: LD_VAR 0 1
30580: ARRAY
30581: PPUSH
30582: CALL_OW 300
30586: IFFALSE 30614
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30588: LD_EXP 84
30592: PUSH
30593: LD_VAR 0 1
30597: ARRAY
30598: PPUSH
30599: LD_EXP 85
30603: PUSH
30604: LD_VAR 0 1
30608: ARRAY
30609: PPUSH
30610: CALL_OW 505
// if not minerMinesList [ i ] then
30614: LD_EXP 85
30618: PUSH
30619: LD_VAR 0 1
30623: ARRAY
30624: NOT
30625: IFFALSE 30629
// continue ;
30627: GO 30568
// for j := minerMinesList [ i ] downto 1 do
30629: LD_ADDR_VAR 0 2
30633: PUSH
30634: DOUBLE
30635: LD_EXP 85
30639: PUSH
30640: LD_VAR 0 1
30644: ARRAY
30645: INC
30646: ST_TO_ADDR
30647: LD_INT 1
30649: PUSH
30650: FOR_DOWNTO
30651: IFFALSE 30903
// begin side := GetSide ( minersList [ i ] ) ;
30653: LD_ADDR_VAR 0 3
30657: PUSH
30658: LD_EXP 84
30662: PUSH
30663: LD_VAR 0 1
30667: ARRAY
30668: PPUSH
30669: CALL_OW 255
30673: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30674: LD_ADDR_VAR 0 4
30678: PUSH
30679: LD_EXP 85
30683: PUSH
30684: LD_VAR 0 1
30688: ARRAY
30689: PUSH
30690: LD_VAR 0 2
30694: ARRAY
30695: PUSH
30696: LD_INT 1
30698: ARRAY
30699: PPUSH
30700: LD_EXP 85
30704: PUSH
30705: LD_VAR 0 1
30709: ARRAY
30710: PUSH
30711: LD_VAR 0 2
30715: ARRAY
30716: PUSH
30717: LD_INT 2
30719: ARRAY
30720: PPUSH
30721: CALL_OW 428
30725: ST_TO_ADDR
// if not tmp then
30726: LD_VAR 0 4
30730: NOT
30731: IFFALSE 30735
// continue ;
30733: GO 30650
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30735: LD_VAR 0 4
30739: PUSH
30740: LD_INT 81
30742: PUSH
30743: LD_VAR 0 3
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PPUSH
30752: CALL_OW 69
30756: IN
30757: IFFALSE 30807
30759: PUSH
30760: LD_EXP 85
30764: PUSH
30765: LD_VAR 0 1
30769: ARRAY
30770: PUSH
30771: LD_VAR 0 2
30775: ARRAY
30776: PUSH
30777: LD_INT 1
30779: ARRAY
30780: PPUSH
30781: LD_EXP 85
30785: PUSH
30786: LD_VAR 0 1
30790: ARRAY
30791: PUSH
30792: LD_VAR 0 2
30796: ARRAY
30797: PUSH
30798: LD_INT 2
30800: ARRAY
30801: PPUSH
30802: CALL_OW 458
30806: AND
30807: IFFALSE 30901
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30809: LD_EXP 85
30813: PUSH
30814: LD_VAR 0 1
30818: ARRAY
30819: PUSH
30820: LD_VAR 0 2
30824: ARRAY
30825: PUSH
30826: LD_INT 1
30828: ARRAY
30829: PPUSH
30830: LD_EXP 85
30834: PUSH
30835: LD_VAR 0 1
30839: ARRAY
30840: PUSH
30841: LD_VAR 0 2
30845: ARRAY
30846: PUSH
30847: LD_INT 2
30849: ARRAY
30850: PPUSH
30851: LD_VAR 0 3
30855: PPUSH
30856: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30860: LD_ADDR_EXP 85
30864: PUSH
30865: LD_EXP 85
30869: PPUSH
30870: LD_VAR 0 1
30874: PPUSH
30875: LD_EXP 85
30879: PUSH
30880: LD_VAR 0 1
30884: ARRAY
30885: PPUSH
30886: LD_VAR 0 2
30890: PPUSH
30891: CALL_OW 3
30895: PPUSH
30896: CALL_OW 1
30900: ST_TO_ADDR
// end ; end ;
30901: GO 30650
30903: POP
30904: POP
// end ;
30905: GO 30568
30907: POP
30908: POP
// end ;
30909: PPOPN 4
30911: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30912: LD_INT 0
30914: PPUSH
30915: PPUSH
// result := false ;
30916: LD_ADDR_VAR 0 4
30920: PUSH
30921: LD_INT 0
30923: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30924: LD_VAR 0 1
30928: PPUSH
30929: CALL_OW 264
30933: PUSH
30934: LD_INT 81
30936: EQUAL
30937: NOT
30938: IFFALSE 30942
// exit ;
30940: GO 31186
// index := GetElementIndex ( minersList , unit ) ;
30942: LD_ADDR_VAR 0 5
30946: PUSH
30947: LD_EXP 84
30951: PPUSH
30952: LD_VAR 0 1
30956: PPUSH
30957: CALL 38156 0 2
30961: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30962: LD_EXP 85
30966: PUSH
30967: LD_VAR 0 5
30971: ARRAY
30972: PUSH
30973: LD_EXP 86
30977: GREATEREQUAL
30978: IFFALSE 30982
// exit ;
30980: GO 31186
// ComMoveXY ( unit , x , y ) ;
30982: LD_VAR 0 1
30986: PPUSH
30987: LD_VAR 0 2
30991: PPUSH
30992: LD_VAR 0 3
30996: PPUSH
30997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31001: LD_INT 35
31003: PPUSH
31004: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31008: LD_VAR 0 1
31012: PPUSH
31013: LD_VAR 0 2
31017: PPUSH
31018: LD_VAR 0 3
31022: PPUSH
31023: CALL 70202 0 3
31027: NOT
31028: IFFALSE 31041
31030: PUSH
31031: LD_VAR 0 1
31035: PPUSH
31036: CALL_OW 314
31040: AND
31041: IFFALSE 31045
// exit ;
31043: GO 31186
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31045: LD_VAR 0 2
31049: PPUSH
31050: LD_VAR 0 3
31054: PPUSH
31055: CALL_OW 428
31059: PUSH
31060: LD_VAR 0 1
31064: EQUAL
31065: IFFALSE 31079
31067: PUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: CALL_OW 314
31077: NOT
31078: AND
31079: IFFALSE 31001
// PlaySoundXY ( x , y , PlantMine ) ;
31081: LD_VAR 0 2
31085: PPUSH
31086: LD_VAR 0 3
31090: PPUSH
31091: LD_STRING PlantMine
31093: PPUSH
31094: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31098: LD_VAR 0 2
31102: PPUSH
31103: LD_VAR 0 3
31107: PPUSH
31108: LD_VAR 0 1
31112: PPUSH
31113: CALL_OW 255
31117: PPUSH
31118: LD_INT 0
31120: PPUSH
31121: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31125: LD_ADDR_EXP 85
31129: PUSH
31130: LD_EXP 85
31134: PPUSH
31135: LD_VAR 0 5
31139: PUSH
31140: LD_EXP 85
31144: PUSH
31145: LD_VAR 0 5
31149: ARRAY
31150: PUSH
31151: LD_INT 1
31153: PLUS
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PPUSH
31159: LD_VAR 0 2
31163: PUSH
31164: LD_VAR 0 3
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PPUSH
31173: CALL 38373 0 3
31177: ST_TO_ADDR
// result := true ;
31178: LD_ADDR_VAR 0 4
31182: PUSH
31183: LD_INT 1
31185: ST_TO_ADDR
// end ;
31186: LD_VAR 0 4
31190: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31191: LD_INT 0
31193: PPUSH
31194: PPUSH
31195: PPUSH
// if not unit in minersList then
31196: LD_VAR 0 1
31200: PUSH
31201: LD_EXP 84
31205: IN
31206: NOT
31207: IFFALSE 31211
// exit ;
31209: GO 31605
// index := GetElementIndex ( minersList , unit ) ;
31211: LD_ADDR_VAR 0 6
31215: PUSH
31216: LD_EXP 84
31220: PPUSH
31221: LD_VAR 0 1
31225: PPUSH
31226: CALL 38156 0 2
31230: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31231: LD_ADDR_VAR 0 5
31235: PUSH
31236: DOUBLE
31237: LD_EXP 85
31241: PUSH
31242: LD_VAR 0 6
31246: ARRAY
31247: INC
31248: ST_TO_ADDR
31249: LD_INT 1
31251: PUSH
31252: FOR_DOWNTO
31253: IFFALSE 31416
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31255: LD_EXP 85
31259: PUSH
31260: LD_VAR 0 6
31264: ARRAY
31265: PUSH
31266: LD_VAR 0 5
31270: ARRAY
31271: PUSH
31272: LD_INT 1
31274: ARRAY
31275: PUSH
31276: LD_VAR 0 2
31280: EQUAL
31281: IFFALSE 31311
31283: PUSH
31284: LD_EXP 85
31288: PUSH
31289: LD_VAR 0 6
31293: ARRAY
31294: PUSH
31295: LD_VAR 0 5
31299: ARRAY
31300: PUSH
31301: LD_INT 2
31303: ARRAY
31304: PUSH
31305: LD_VAR 0 3
31309: EQUAL
31310: AND
31311: IFFALSE 31414
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31313: LD_EXP 85
31317: PUSH
31318: LD_VAR 0 6
31322: ARRAY
31323: PUSH
31324: LD_VAR 0 5
31328: ARRAY
31329: PUSH
31330: LD_INT 1
31332: ARRAY
31333: PPUSH
31334: LD_EXP 85
31338: PUSH
31339: LD_VAR 0 6
31343: ARRAY
31344: PUSH
31345: LD_VAR 0 5
31349: ARRAY
31350: PUSH
31351: LD_INT 2
31353: ARRAY
31354: PPUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL_OW 255
31364: PPUSH
31365: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31369: LD_ADDR_EXP 85
31373: PUSH
31374: LD_EXP 85
31378: PPUSH
31379: LD_VAR 0 6
31383: PPUSH
31384: LD_EXP 85
31388: PUSH
31389: LD_VAR 0 6
31393: ARRAY
31394: PPUSH
31395: LD_VAR 0 5
31399: PPUSH
31400: CALL_OW 3
31404: PPUSH
31405: CALL_OW 1
31409: ST_TO_ADDR
// exit ;
31410: POP
31411: POP
31412: GO 31605
// end ; end ;
31414: GO 31252
31416: POP
31417: POP
// for i := minerMinesList [ index ] downto 1 do
31418: LD_ADDR_VAR 0 5
31422: PUSH
31423: DOUBLE
31424: LD_EXP 85
31428: PUSH
31429: LD_VAR 0 6
31433: ARRAY
31434: INC
31435: ST_TO_ADDR
31436: LD_INT 1
31438: PUSH
31439: FOR_DOWNTO
31440: IFFALSE 31603
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31442: LD_EXP 85
31446: PUSH
31447: LD_VAR 0 6
31451: ARRAY
31452: PUSH
31453: LD_VAR 0 5
31457: ARRAY
31458: PUSH
31459: LD_INT 1
31461: ARRAY
31462: PPUSH
31463: LD_EXP 85
31467: PUSH
31468: LD_VAR 0 6
31472: ARRAY
31473: PUSH
31474: LD_VAR 0 5
31478: ARRAY
31479: PUSH
31480: LD_INT 2
31482: ARRAY
31483: PPUSH
31484: LD_VAR 0 2
31488: PPUSH
31489: LD_VAR 0 3
31493: PPUSH
31494: CALL_OW 298
31498: PUSH
31499: LD_INT 6
31501: LESS
31502: IFFALSE 31601
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31504: LD_EXP 85
31508: PUSH
31509: LD_VAR 0 6
31513: ARRAY
31514: PUSH
31515: LD_VAR 0 5
31519: ARRAY
31520: PUSH
31521: LD_INT 1
31523: ARRAY
31524: PPUSH
31525: LD_EXP 85
31529: PUSH
31530: LD_VAR 0 6
31534: ARRAY
31535: PUSH
31536: LD_VAR 0 5
31540: ARRAY
31541: PUSH
31542: LD_INT 2
31544: ARRAY
31545: PPUSH
31546: LD_VAR 0 1
31550: PPUSH
31551: CALL_OW 255
31555: PPUSH
31556: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31560: LD_ADDR_EXP 85
31564: PUSH
31565: LD_EXP 85
31569: PPUSH
31570: LD_VAR 0 6
31574: PPUSH
31575: LD_EXP 85
31579: PUSH
31580: LD_VAR 0 6
31584: ARRAY
31585: PPUSH
31586: LD_VAR 0 5
31590: PPUSH
31591: CALL_OW 3
31595: PPUSH
31596: CALL_OW 1
31600: ST_TO_ADDR
// end ; end ;
31601: GO 31439
31603: POP
31604: POP
// end ;
31605: LD_VAR 0 4
31609: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31610: LD_INT 0
31612: PPUSH
31613: PPUSH
31614: PPUSH
31615: PPUSH
31616: PPUSH
31617: PPUSH
31618: PPUSH
31619: PPUSH
31620: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31621: LD_VAR 0 1
31625: PPUSH
31626: CALL_OW 264
31630: PUSH
31631: LD_INT 81
31633: EQUAL
31634: NOT
31635: IFTRUE 31650
31637: PUSH
31638: LD_VAR 0 1
31642: PUSH
31643: LD_EXP 84
31647: IN
31648: NOT
31649: OR
31650: IFFALSE 31654
// exit ;
31652: GO 31980
// index := GetElementIndex ( minersList , unit ) ;
31654: LD_ADDR_VAR 0 6
31658: PUSH
31659: LD_EXP 84
31663: PPUSH
31664: LD_VAR 0 1
31668: PPUSH
31669: CALL 38156 0 2
31673: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31674: LD_ADDR_VAR 0 8
31678: PUSH
31679: LD_EXP 86
31683: PUSH
31684: LD_EXP 85
31688: PUSH
31689: LD_VAR 0 6
31693: ARRAY
31694: MINUS
31695: ST_TO_ADDR
// if not minesFreeAmount then
31696: LD_VAR 0 8
31700: NOT
31701: IFFALSE 31705
// exit ;
31703: GO 31980
// tmp := [ ] ;
31705: LD_ADDR_VAR 0 7
31709: PUSH
31710: EMPTY
31711: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31712: LD_ADDR_VAR 0 5
31716: PUSH
31717: DOUBLE
31718: LD_INT 1
31720: DEC
31721: ST_TO_ADDR
31722: LD_VAR 0 8
31726: PUSH
31727: FOR_TO
31728: IFFALSE 31927
// begin _d := rand ( 0 , 5 ) ;
31730: LD_ADDR_VAR 0 11
31734: PUSH
31735: LD_INT 0
31737: PPUSH
31738: LD_INT 5
31740: PPUSH
31741: CALL_OW 12
31745: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31746: LD_ADDR_VAR 0 12
31750: PUSH
31751: LD_INT 2
31753: PPUSH
31754: LD_INT 6
31756: PPUSH
31757: CALL_OW 12
31761: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31762: LD_ADDR_VAR 0 9
31766: PUSH
31767: LD_VAR 0 2
31771: PPUSH
31772: LD_VAR 0 11
31776: PPUSH
31777: LD_VAR 0 12
31781: PPUSH
31782: CALL_OW 272
31786: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31787: LD_ADDR_VAR 0 10
31791: PUSH
31792: LD_VAR 0 3
31796: PPUSH
31797: LD_VAR 0 11
31801: PPUSH
31802: LD_VAR 0 12
31806: PPUSH
31807: CALL_OW 273
31811: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31812: LD_VAR 0 9
31816: PPUSH
31817: LD_VAR 0 10
31821: PPUSH
31822: CALL_OW 488
31826: IFFALSE 31850
31828: PUSH
31829: LD_VAR 0 9
31833: PUSH
31834: LD_VAR 0 10
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_VAR 0 7
31847: IN
31848: NOT
31849: AND
31850: IFFALSE 31869
31852: PUSH
31853: LD_VAR 0 9
31857: PPUSH
31858: LD_VAR 0 10
31862: PPUSH
31863: CALL_OW 458
31867: NOT
31868: AND
31869: IFFALSE 31911
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31871: LD_ADDR_VAR 0 7
31875: PUSH
31876: LD_VAR 0 7
31880: PPUSH
31881: LD_VAR 0 7
31885: PUSH
31886: LD_INT 1
31888: PLUS
31889: PPUSH
31890: LD_VAR 0 9
31894: PUSH
31895: LD_VAR 0 10
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PPUSH
31904: CALL_OW 1
31908: ST_TO_ADDR
31909: GO 31925
// i := i - 1 ;
31911: LD_ADDR_VAR 0 5
31915: PUSH
31916: LD_VAR 0 5
31920: PUSH
31921: LD_INT 1
31923: MINUS
31924: ST_TO_ADDR
// end ;
31925: GO 31727
31927: POP
31928: POP
// for i in tmp do
31929: LD_ADDR_VAR 0 5
31933: PUSH
31934: LD_VAR 0 7
31938: PUSH
31939: FOR_IN
31940: IFFALSE 31978
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31942: LD_VAR 0 1
31946: PPUSH
31947: LD_VAR 0 5
31951: PUSH
31952: LD_INT 1
31954: ARRAY
31955: PPUSH
31956: LD_VAR 0 5
31960: PUSH
31961: LD_INT 2
31963: ARRAY
31964: PPUSH
31965: CALL 30912 0 3
31969: NOT
31970: IFFALSE 31976
// exit ;
31972: POP
31973: POP
31974: GO 31980
31976: GO 31939
31978: POP
31979: POP
// end ;
31980: LD_VAR 0 4
31984: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
31985: LD_INT 0
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
// if GetClass ( unit ) <> class_sniper then
31996: LD_VAR 0 1
32000: PPUSH
32001: CALL_OW 257
32005: PUSH
32006: LD_INT 5
32008: NONEQUAL
32009: IFFALSE 32013
// exit ;
32011: GO 32483
// dist := 8 ;
32013: LD_ADDR_VAR 0 5
32017: PUSH
32018: LD_INT 8
32020: ST_TO_ADDR
// viewRange := 12 ;
32021: LD_ADDR_VAR 0 8
32025: PUSH
32026: LD_INT 12
32028: ST_TO_ADDR
// side := GetSide ( unit ) ;
32029: LD_ADDR_VAR 0 6
32033: PUSH
32034: LD_VAR 0 1
32038: PPUSH
32039: CALL_OW 255
32043: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32044: LD_INT 61
32046: PPUSH
32047: LD_VAR 0 6
32051: PPUSH
32052: CALL_OW 321
32056: PUSH
32057: LD_INT 2
32059: EQUAL
32060: IFFALSE 32070
// viewRange := 16 ;
32062: LD_ADDR_VAR 0 8
32066: PUSH
32067: LD_INT 16
32069: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32070: LD_VAR 0 1
32074: PPUSH
32075: LD_VAR 0 2
32079: PPUSH
32080: LD_VAR 0 3
32084: PPUSH
32085: CALL_OW 297
32089: PUSH
32090: LD_VAR 0 5
32094: GREATER
32095: IFFALSE 32174
// begin ComMoveXY ( unit , x , y ) ;
32097: LD_VAR 0 1
32101: PPUSH
32102: LD_VAR 0 2
32106: PPUSH
32107: LD_VAR 0 3
32111: PPUSH
32112: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32116: LD_INT 35
32118: PPUSH
32119: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32123: LD_VAR 0 1
32127: PPUSH
32128: LD_VAR 0 2
32132: PPUSH
32133: LD_VAR 0 3
32137: PPUSH
32138: CALL 70202 0 3
32142: NOT
32143: IFFALSE 32147
// exit ;
32145: GO 32483
// until GetDistUnitXY ( unit , x , y ) < dist ;
32147: LD_VAR 0 1
32151: PPUSH
32152: LD_VAR 0 2
32156: PPUSH
32157: LD_VAR 0 3
32161: PPUSH
32162: CALL_OW 297
32166: PUSH
32167: LD_VAR 0 5
32171: LESS
32172: IFFALSE 32116
// end ; ComTurnXY ( unit , x , y ) ;
32174: LD_VAR 0 1
32178: PPUSH
32179: LD_VAR 0 2
32183: PPUSH
32184: LD_VAR 0 3
32188: PPUSH
32189: CALL_OW 118
// repeat if Multiplayer then
32193: LD_OWVAR 4
32197: IFFALSE 32208
// wait ( 35 ) else
32199: LD_INT 35
32201: PPUSH
32202: CALL_OW 67
32206: GO 32215
// wait ( 5 ) ;
32208: LD_INT 5
32210: PPUSH
32211: CALL_OW 67
// _d := GetDir ( unit ) ;
32215: LD_ADDR_VAR 0 11
32219: PUSH
32220: LD_VAR 0 1
32224: PPUSH
32225: CALL_OW 254
32229: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32230: LD_ADDR_VAR 0 7
32234: PUSH
32235: LD_VAR 0 1
32239: PPUSH
32240: CALL_OW 250
32244: PPUSH
32245: LD_VAR 0 1
32249: PPUSH
32250: CALL_OW 251
32254: PPUSH
32255: LD_VAR 0 2
32259: PPUSH
32260: LD_VAR 0 3
32264: PPUSH
32265: CALL 72838 0 4
32269: ST_TO_ADDR
// until dir = _d ;
32270: LD_VAR 0 7
32274: PUSH
32275: LD_VAR 0 11
32279: EQUAL
32280: IFFALSE 32193
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32282: LD_ADDR_VAR 0 9
32286: PUSH
32287: LD_VAR 0 1
32291: PPUSH
32292: CALL_OW 250
32296: PPUSH
32297: LD_VAR 0 7
32301: PPUSH
32302: LD_VAR 0 5
32306: PPUSH
32307: CALL_OW 272
32311: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32312: LD_ADDR_VAR 0 10
32316: PUSH
32317: LD_VAR 0 1
32321: PPUSH
32322: CALL_OW 251
32326: PPUSH
32327: LD_VAR 0 7
32331: PPUSH
32332: LD_VAR 0 5
32336: PPUSH
32337: CALL_OW 273
32341: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32342: LD_VAR 0 9
32346: PPUSH
32347: LD_VAR 0 10
32351: PPUSH
32352: CALL_OW 488
32356: NOT
32357: IFFALSE 32361
// exit ;
32359: GO 32483
// ComAnimCustom ( unit , 1 ) ;
32361: LD_VAR 0 1
32365: PPUSH
32366: LD_INT 1
32368: PPUSH
32369: CALL_OW 592
// p := 0 ;
32373: LD_ADDR_VAR 0 12
32377: PUSH
32378: LD_INT 0
32380: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32381: LD_VAR 0 9
32385: PPUSH
32386: LD_VAR 0 10
32390: PPUSH
32391: LD_VAR 0 6
32395: PPUSH
32396: LD_VAR 0 8
32400: PPUSH
32401: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32405: LD_INT 35
32407: PPUSH
32408: CALL_OW 67
// p := Inc ( p ) ;
32412: LD_ADDR_VAR 0 12
32416: PUSH
32417: LD_VAR 0 12
32421: PPUSH
32422: CALL 72794 0 1
32426: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32427: LD_VAR 0 12
32431: PUSH
32432: LD_INT 3
32434: EQUAL
32435: IFTRUE 32449
32437: PUSH
32438: LD_VAR 0 1
32442: PPUSH
32443: CALL_OW 302
32447: NOT
32448: OR
32449: IFTRUE 32462
32451: PUSH
32452: LD_VAR 0 1
32456: PPUSH
32457: CALL_OW 301
32461: OR
32462: IFFALSE 32405
// RemoveSeeing ( _x , _y , side ) ;
32464: LD_VAR 0 9
32468: PPUSH
32469: LD_VAR 0 10
32473: PPUSH
32474: LD_VAR 0 6
32478: PPUSH
32479: CALL_OW 331
// end ;
32483: LD_VAR 0 4
32487: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
32488: LD_INT 0
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
32498: PPUSH
32499: PPUSH
32500: PPUSH
// if not unit then
32501: LD_VAR 0 1
32505: NOT
32506: IFFALSE 32510
// exit ;
32508: GO 32781
// side := GetSide ( unit ) ;
32510: LD_ADDR_VAR 0 3
32514: PUSH
32515: LD_VAR 0 1
32519: PPUSH
32520: CALL_OW 255
32524: ST_TO_ADDR
// x := GetX ( unit ) ;
32525: LD_ADDR_VAR 0 5
32529: PUSH
32530: LD_VAR 0 1
32534: PPUSH
32535: CALL_OW 250
32539: ST_TO_ADDR
// y := GetY ( unit ) ;
32540: LD_ADDR_VAR 0 6
32544: PUSH
32545: LD_VAR 0 1
32549: PPUSH
32550: CALL_OW 251
32554: ST_TO_ADDR
// r := 8 ;
32555: LD_ADDR_VAR 0 4
32559: PUSH
32560: LD_INT 8
32562: ST_TO_ADDR
// if x - r < 0 then
32563: LD_VAR 0 5
32567: PUSH
32568: LD_VAR 0 4
32572: MINUS
32573: PUSH
32574: LD_INT 0
32576: LESS
32577: IFFALSE 32589
// min_x := 0 else
32579: LD_ADDR_VAR 0 7
32583: PUSH
32584: LD_INT 0
32586: ST_TO_ADDR
32587: GO 32605
// min_x := x - r ;
32589: LD_ADDR_VAR 0 7
32593: PUSH
32594: LD_VAR 0 5
32598: PUSH
32599: LD_VAR 0 4
32603: MINUS
32604: ST_TO_ADDR
// if y - r < 0 then
32605: LD_VAR 0 6
32609: PUSH
32610: LD_VAR 0 4
32614: MINUS
32615: PUSH
32616: LD_INT 0
32618: LESS
32619: IFFALSE 32631
// min_y := 0 else
32621: LD_ADDR_VAR 0 8
32625: PUSH
32626: LD_INT 0
32628: ST_TO_ADDR
32629: GO 32647
// min_y := y - r ;
32631: LD_ADDR_VAR 0 8
32635: PUSH
32636: LD_VAR 0 6
32640: PUSH
32641: LD_VAR 0 4
32645: MINUS
32646: ST_TO_ADDR
// max_x := x + r ;
32647: LD_ADDR_VAR 0 9
32651: PUSH
32652: LD_VAR 0 5
32656: PUSH
32657: LD_VAR 0 4
32661: PLUS
32662: ST_TO_ADDR
// max_y := y + r ;
32663: LD_ADDR_VAR 0 10
32667: PUSH
32668: LD_VAR 0 6
32672: PUSH
32673: LD_VAR 0 4
32677: PLUS
32678: ST_TO_ADDR
// for _x = min_x to max_x do
32679: LD_ADDR_VAR 0 11
32683: PUSH
32684: DOUBLE
32685: LD_VAR 0 7
32689: DEC
32690: ST_TO_ADDR
32691: LD_VAR 0 9
32695: PUSH
32696: FOR_TO
32697: IFFALSE 32779
// for _y = min_y to max_y do
32699: LD_ADDR_VAR 0 12
32703: PUSH
32704: DOUBLE
32705: LD_VAR 0 8
32709: DEC
32710: ST_TO_ADDR
32711: LD_VAR 0 10
32715: PUSH
32716: FOR_TO
32717: IFFALSE 32775
// begin if not ValidHex ( _x , _y ) then
32719: LD_VAR 0 11
32723: PPUSH
32724: LD_VAR 0 12
32728: PPUSH
32729: CALL_OW 488
32733: NOT
32734: IFFALSE 32738
// continue ;
32736: GO 32716
// if MineAtPos ( _x , _y ) then
32738: LD_VAR 0 11
32742: PPUSH
32743: LD_VAR 0 12
32747: PPUSH
32748: CALL_OW 458
32752: IFFALSE 32773
// ViewMineAtPos ( _x , _y , side ) ;
32754: LD_VAR 0 11
32758: PPUSH
32759: LD_VAR 0 12
32763: PPUSH
32764: LD_VAR 0 3
32768: PPUSH
32769: CALL_OW 457
// end ;
32773: GO 32716
32775: POP
32776: POP
32777: GO 32696
32779: POP
32780: POP
// end ;
32781: LD_VAR 0 2
32785: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
32786: LD_INT 0
32788: PPUSH
32789: PPUSH
32790: PPUSH
32791: PPUSH
32792: PPUSH
32793: PPUSH
// if not units then
32794: LD_VAR 0 1
32798: NOT
32799: IFFALSE 32803
// exit ;
32801: GO 33233
// scaners := [ ] ;
32803: LD_ADDR_VAR 0 6
32807: PUSH
32808: EMPTY
32809: ST_TO_ADDR
// for i in units do
32810: LD_ADDR_VAR 0 3
32814: PUSH
32815: LD_VAR 0 1
32819: PUSH
32820: FOR_IN
32821: IFFALSE 32978
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
32823: LD_VAR 0 3
32827: PPUSH
32828: CALL_OW 264
32832: PUSH
32833: LD_INT 11
32835: NONEQUAL
32836: IFTRUE 32850
32838: PUSH
32839: LD_VAR 0 3
32843: PPUSH
32844: CALL_OW 302
32848: NOT
32849: OR
32850: IFTRUE 32867
32852: PUSH
32853: LD_VAR 0 3
32857: PPUSH
32858: CALL_OW 110
32862: PUSH
32863: LD_INT 502
32865: EQUAL
32866: OR
32867: IFFALSE 32871
// continue ;
32869: GO 32820
// ComStop ( i ) ;
32871: LD_VAR 0 3
32875: PPUSH
32876: CALL_OW 141
// x := GetX ( i ) ;
32880: LD_ADDR_VAR 0 4
32884: PUSH
32885: LD_VAR 0 3
32889: PPUSH
32890: CALL_OW 250
32894: ST_TO_ADDR
// y := GetY ( i ) ;
32895: LD_ADDR_VAR 0 5
32899: PUSH
32900: LD_VAR 0 3
32904: PPUSH
32905: CALL_OW 251
32909: ST_TO_ADDR
// if GetSide ( i ) = your_side then
32910: LD_VAR 0 3
32914: PPUSH
32915: CALL_OW 255
32919: PUSH
32920: LD_OWVAR 2
32924: EQUAL
32925: IFFALSE 32944
// PlaySoundXY ( x , y , mineDetector ) ;
32927: LD_VAR 0 4
32931: PPUSH
32932: LD_VAR 0 5
32936: PPUSH
32937: LD_STRING mineDetector
32939: PPUSH
32940: CALL_OW 366
// scaners := Join ( scaners , i ) ;
32944: LD_ADDR_VAR 0 6
32948: PUSH
32949: LD_VAR 0 6
32953: PPUSH
32954: LD_VAR 0 3
32958: PPUSH
32959: CALL 71421 0 2
32963: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
32964: LD_VAR 0 3
32968: PPUSH
32969: LD_INT 502
32971: PPUSH
32972: CALL_OW 109
// end ;
32976: GO 32820
32978: POP
32979: POP
// if not scaners then
32980: LD_VAR 0 6
32984: NOT
32985: IFFALSE 32989
// exit ;
32987: GO 33233
// wait ( 3 ) ;
32989: LD_INT 3
32991: PPUSH
32992: CALL_OW 67
// timer := 6 ;
32996: LD_ADDR_VAR 0 7
33000: PUSH
33001: LD_INT 6
33003: ST_TO_ADDR
// repeat for i in scaners do
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: LD_VAR 0 6
33013: PUSH
33014: FOR_IN
33015: IFFALSE 33131
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33017: LD_VAR 0 3
33021: PPUSH
33022: CALL_OW 302
33026: NOT
33027: IFTRUE 33040
33029: PUSH
33030: LD_VAR 0 3
33034: PPUSH
33035: CALL_OW 314
33039: OR
33040: IFTRUE 33071
33042: PUSH
33043: LD_VAR 0 3
33047: PPUSH
33048: CALL_OW 263
33052: PUSH
33053: LD_INT 1
33055: EQUAL
33056: IFFALSE 33070
33058: PUSH
33059: LD_VAR 0 3
33063: PPUSH
33064: CALL_OW 311
33068: NOT
33069: AND
33070: OR
33071: IFFALSE 33115
// begin SetUnitDisplayNumber ( i , 0 ) ;
33073: LD_VAR 0 3
33077: PPUSH
33078: LD_INT 0
33080: PPUSH
33081: CALL_OW 505
// SetTag ( i , 0 ) ;
33085: LD_VAR 0 3
33089: PPUSH
33090: LD_INT 0
33092: PPUSH
33093: CALL_OW 109
// scaners := scaners diff i ;
33097: LD_ADDR_VAR 0 6
33101: PUSH
33102: LD_VAR 0 6
33106: PUSH
33107: LD_VAR 0 3
33111: DIFF
33112: ST_TO_ADDR
// continue ;
33113: GO 33014
// end ; SetUnitDisplayNumber ( i , timer ) ;
33115: LD_VAR 0 3
33119: PPUSH
33120: LD_VAR 0 7
33124: PPUSH
33125: CALL_OW 505
// end ;
33129: GO 33014
33131: POP
33132: POP
// if not scaners then
33133: LD_VAR 0 6
33137: NOT
33138: IFFALSE 33142
// exit ;
33140: GO 33233
// timer := Dec ( timer ) ;
33142: LD_ADDR_VAR 0 7
33146: PUSH
33147: LD_VAR 0 7
33151: PPUSH
33152: CALL 72816 0 1
33156: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33157: LD_INT 35
33159: PPUSH
33160: CALL_OW 67
// until timer = 0 ;
33164: LD_VAR 0 7
33168: PUSH
33169: LD_INT 0
33171: EQUAL
33172: IFFALSE 33004
// if not scaners then
33174: LD_VAR 0 6
33178: NOT
33179: IFFALSE 33183
// exit ;
33181: GO 33233
// for i in scaners do
33183: LD_ADDR_VAR 0 3
33187: PUSH
33188: LD_VAR 0 6
33192: PUSH
33193: FOR_IN
33194: IFFALSE 33231
// begin SetUnitDisplayNumber ( i , 0 ) ;
33196: LD_VAR 0 3
33200: PPUSH
33201: LD_INT 0
33203: PPUSH
33204: CALL_OW 505
// SetTag ( i , 0 ) ;
33208: LD_VAR 0 3
33212: PPUSH
33213: LD_INT 0
33215: PPUSH
33216: CALL_OW 109
// RevealDetectorMine ( i ) ;
33220: LD_VAR 0 3
33224: PPUSH
33225: CALL 32488 0 1
// end ;
33229: GO 33193
33231: POP
33232: POP
// end ;
33233: LD_VAR 0 2
33237: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33238: LD_INT 0
33240: PPUSH
// if p1 = mine_detector_mode then
33241: LD_VAR 0 2
33245: PUSH
33246: LD_INT 103
33248: EQUAL
33249: IFFALSE 33260
// DetectMine ( units ) ;
33251: LD_VAR 0 1
33255: PPUSH
33256: CALL 32786 0 1
// end ; end_of_file
33260: LD_VAR 0 7
33264: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33265: LD_INT 0
33267: PPUSH
33268: PPUSH
// if exist_mode then
33269: LD_VAR 0 2
33273: IFFALSE 33319
// begin unit := CreateCharacter ( prefix & ident ) ;
33275: LD_ADDR_VAR 0 5
33279: PUSH
33280: LD_VAR 0 3
33284: PUSH
33285: LD_VAR 0 1
33289: STR
33290: PPUSH
33291: CALL_OW 34
33295: ST_TO_ADDR
// if unit then
33296: LD_VAR 0 5
33300: IFFALSE 33317
// DeleteCharacters ( prefix & ident ) ;
33302: LD_VAR 0 3
33306: PUSH
33307: LD_VAR 0 1
33311: STR
33312: PPUSH
33313: CALL_OW 40
// end else
33317: GO 33334
// unit := NewCharacter ( ident ) ;
33319: LD_ADDR_VAR 0 5
33323: PUSH
33324: LD_VAR 0 1
33328: PPUSH
33329: CALL_OW 25
33333: ST_TO_ADDR
// result := unit ;
33334: LD_ADDR_VAR 0 4
33338: PUSH
33339: LD_VAR 0 5
33343: ST_TO_ADDR
// end ;
33344: LD_VAR 0 4
33348: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33349: LD_INT 0
33351: PPUSH
33352: PPUSH
// if exist_mode then
33353: LD_VAR 0 2
33357: IFFALSE 33382
// unit := CreateCharacter ( prefix & ident ) else
33359: LD_ADDR_VAR 0 5
33363: PUSH
33364: LD_VAR 0 3
33368: PUSH
33369: LD_VAR 0 1
33373: STR
33374: PPUSH
33375: CALL_OW 34
33379: ST_TO_ADDR
33380: GO 33397
// unit := NewCharacter ( ident ) ;
33382: LD_ADDR_VAR 0 5
33386: PUSH
33387: LD_VAR 0 1
33391: PPUSH
33392: CALL_OW 25
33396: ST_TO_ADDR
// result := unit ;
33397: LD_ADDR_VAR 0 4
33401: PUSH
33402: LD_VAR 0 5
33406: ST_TO_ADDR
// end ;
33407: LD_VAR 0 4
33411: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33412: LD_INT 0
33414: PPUSH
33415: PPUSH
// if not side or not nation then
33416: LD_VAR 0 1
33420: NOT
33421: IFTRUE 33430
33423: PUSH
33424: LD_VAR 0 2
33428: NOT
33429: OR
33430: IFFALSE 33434
// exit ;
33432: GO 34228
// case nation of nation_american :
33434: LD_VAR 0 2
33438: PUSH
33439: LD_INT 1
33441: DOUBLE
33442: EQUAL
33443: IFTRUE 33447
33445: GO 33669
33447: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33448: LD_ADDR_VAR 0 4
33452: PUSH
33453: LD_INT 35
33455: PUSH
33456: LD_INT 45
33458: PUSH
33459: LD_INT 46
33461: PUSH
33462: LD_INT 47
33464: PUSH
33465: LD_INT 82
33467: PUSH
33468: LD_INT 83
33470: PUSH
33471: LD_INT 84
33473: PUSH
33474: LD_INT 85
33476: PUSH
33477: LD_INT 86
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: LD_INT 6
33488: PUSH
33489: LD_INT 15
33491: PUSH
33492: LD_INT 16
33494: PUSH
33495: LD_INT 7
33497: PUSH
33498: LD_INT 12
33500: PUSH
33501: LD_INT 13
33503: PUSH
33504: LD_INT 10
33506: PUSH
33507: LD_INT 14
33509: PUSH
33510: LD_INT 20
33512: PUSH
33513: LD_INT 21
33515: PUSH
33516: LD_INT 22
33518: PUSH
33519: LD_INT 25
33521: PUSH
33522: LD_INT 32
33524: PUSH
33525: LD_INT 27
33527: PUSH
33528: LD_INT 36
33530: PUSH
33531: LD_INT 69
33533: PUSH
33534: LD_INT 39
33536: PUSH
33537: LD_INT 34
33539: PUSH
33540: LD_INT 40
33542: PUSH
33543: LD_INT 48
33545: PUSH
33546: LD_INT 49
33548: PUSH
33549: LD_INT 50
33551: PUSH
33552: LD_INT 51
33554: PUSH
33555: LD_INT 52
33557: PUSH
33558: LD_INT 53
33560: PUSH
33561: LD_INT 54
33563: PUSH
33564: LD_INT 55
33566: PUSH
33567: LD_INT 56
33569: PUSH
33570: LD_INT 57
33572: PUSH
33573: LD_INT 58
33575: PUSH
33576: LD_INT 59
33578: PUSH
33579: LD_INT 60
33581: PUSH
33582: LD_INT 61
33584: PUSH
33585: LD_INT 62
33587: PUSH
33588: LD_INT 80
33590: PUSH
33591: LD_INT 82
33593: PUSH
33594: LD_INT 83
33596: PUSH
33597: LD_INT 84
33599: PUSH
33600: LD_INT 85
33602: PUSH
33603: LD_INT 86
33605: PUSH
33606: LD_INT 90
33608: PUSH
33609: LD_INT 93
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: ST_TO_ADDR
33667: GO 34150
33669: LD_INT 2
33671: DOUBLE
33672: EQUAL
33673: IFTRUE 33677
33675: GO 33911
33677: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
33678: LD_ADDR_VAR 0 4
33682: PUSH
33683: LD_INT 35
33685: PUSH
33686: LD_INT 45
33688: PUSH
33689: LD_INT 46
33691: PUSH
33692: LD_INT 47
33694: PUSH
33695: LD_INT 82
33697: PUSH
33698: LD_INT 83
33700: PUSH
33701: LD_INT 84
33703: PUSH
33704: LD_INT 85
33706: PUSH
33707: LD_INT 87
33709: PUSH
33710: LD_INT 70
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: LD_INT 11
33718: PUSH
33719: LD_INT 3
33721: PUSH
33722: LD_INT 4
33724: PUSH
33725: LD_INT 5
33727: PUSH
33728: LD_INT 6
33730: PUSH
33731: LD_INT 15
33733: PUSH
33734: LD_INT 18
33736: PUSH
33737: LD_INT 7
33739: PUSH
33740: LD_INT 17
33742: PUSH
33743: LD_INT 8
33745: PUSH
33746: LD_INT 20
33748: PUSH
33749: LD_INT 21
33751: PUSH
33752: LD_INT 22
33754: PUSH
33755: LD_INT 72
33757: PUSH
33758: LD_INT 26
33760: PUSH
33761: LD_INT 69
33763: PUSH
33764: LD_INT 39
33766: PUSH
33767: LD_INT 40
33769: PUSH
33770: LD_INT 41
33772: PUSH
33773: LD_INT 42
33775: PUSH
33776: LD_INT 43
33778: PUSH
33779: LD_INT 48
33781: PUSH
33782: LD_INT 49
33784: PUSH
33785: LD_INT 50
33787: PUSH
33788: LD_INT 51
33790: PUSH
33791: LD_INT 52
33793: PUSH
33794: LD_INT 53
33796: PUSH
33797: LD_INT 54
33799: PUSH
33800: LD_INT 55
33802: PUSH
33803: LD_INT 56
33805: PUSH
33806: LD_INT 60
33808: PUSH
33809: LD_INT 61
33811: PUSH
33812: LD_INT 62
33814: PUSH
33815: LD_INT 66
33817: PUSH
33818: LD_INT 67
33820: PUSH
33821: LD_INT 68
33823: PUSH
33824: LD_INT 81
33826: PUSH
33827: LD_INT 82
33829: PUSH
33830: LD_INT 83
33832: PUSH
33833: LD_INT 84
33835: PUSH
33836: LD_INT 85
33838: PUSH
33839: LD_INT 87
33841: PUSH
33842: LD_INT 88
33844: PUSH
33845: LD_INT 92
33847: PUSH
33848: LD_INT 94
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: ST_TO_ADDR
33909: GO 34150
33911: LD_INT 3
33913: DOUBLE
33914: EQUAL
33915: IFTRUE 33919
33917: GO 34149
33919: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
33920: LD_ADDR_VAR 0 4
33924: PUSH
33925: LD_INT 46
33927: PUSH
33928: LD_INT 47
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: LD_INT 2
33936: PUSH
33937: LD_INT 82
33939: PUSH
33940: LD_INT 83
33942: PUSH
33943: LD_INT 84
33945: PUSH
33946: LD_INT 85
33948: PUSH
33949: LD_INT 86
33951: PUSH
33952: LD_INT 11
33954: PUSH
33955: LD_INT 9
33957: PUSH
33958: LD_INT 20
33960: PUSH
33961: LD_INT 19
33963: PUSH
33964: LD_INT 21
33966: PUSH
33967: LD_INT 24
33969: PUSH
33970: LD_INT 22
33972: PUSH
33973: LD_INT 25
33975: PUSH
33976: LD_INT 28
33978: PUSH
33979: LD_INT 29
33981: PUSH
33982: LD_INT 30
33984: PUSH
33985: LD_INT 31
33987: PUSH
33988: LD_INT 37
33990: PUSH
33991: LD_INT 38
33993: PUSH
33994: LD_INT 32
33996: PUSH
33997: LD_INT 27
33999: PUSH
34000: LD_INT 33
34002: PUSH
34003: LD_INT 69
34005: PUSH
34006: LD_INT 39
34008: PUSH
34009: LD_INT 34
34011: PUSH
34012: LD_INT 40
34014: PUSH
34015: LD_INT 71
34017: PUSH
34018: LD_INT 23
34020: PUSH
34021: LD_INT 44
34023: PUSH
34024: LD_INT 48
34026: PUSH
34027: LD_INT 49
34029: PUSH
34030: LD_INT 50
34032: PUSH
34033: LD_INT 51
34035: PUSH
34036: LD_INT 52
34038: PUSH
34039: LD_INT 53
34041: PUSH
34042: LD_INT 54
34044: PUSH
34045: LD_INT 55
34047: PUSH
34048: LD_INT 56
34050: PUSH
34051: LD_INT 57
34053: PUSH
34054: LD_INT 58
34056: PUSH
34057: LD_INT 59
34059: PUSH
34060: LD_INT 63
34062: PUSH
34063: LD_INT 64
34065: PUSH
34066: LD_INT 65
34068: PUSH
34069: LD_INT 82
34071: PUSH
34072: LD_INT 83
34074: PUSH
34075: LD_INT 84
34077: PUSH
34078: LD_INT 85
34080: PUSH
34081: LD_INT 86
34083: PUSH
34084: LD_INT 89
34086: PUSH
34087: LD_INT 91
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: ST_TO_ADDR
34147: GO 34150
34149: POP
// if state > - 1 and state < 3 then
34150: LD_VAR 0 3
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: GREATER
34159: IFFALSE 34171
34161: PUSH
34162: LD_VAR 0 3
34166: PUSH
34167: LD_INT 3
34169: LESS
34170: AND
34171: IFFALSE 34228
// for i in result do
34173: LD_ADDR_VAR 0 5
34177: PUSH
34178: LD_VAR 0 4
34182: PUSH
34183: FOR_IN
34184: IFFALSE 34226
// if GetTech ( i , side ) <> state then
34186: LD_VAR 0 5
34190: PPUSH
34191: LD_VAR 0 1
34195: PPUSH
34196: CALL_OW 321
34200: PUSH
34201: LD_VAR 0 3
34205: NONEQUAL
34206: IFFALSE 34224
// result := result diff i ;
34208: LD_ADDR_VAR 0 4
34212: PUSH
34213: LD_VAR 0 4
34217: PUSH
34218: LD_VAR 0 5
34222: DIFF
34223: ST_TO_ADDR
34224: GO 34183
34226: POP
34227: POP
// end ;
34228: LD_VAR 0 4
34232: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34233: LD_INT 0
34235: PPUSH
34236: PPUSH
34237: PPUSH
// result := true ;
34238: LD_ADDR_VAR 0 3
34242: PUSH
34243: LD_INT 1
34245: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34246: LD_ADDR_VAR 0 5
34250: PUSH
34251: LD_VAR 0 2
34255: PPUSH
34256: CALL_OW 480
34260: ST_TO_ADDR
// if not tmp then
34261: LD_VAR 0 5
34265: NOT
34266: IFFALSE 34270
// exit ;
34268: GO 34319
// for i in tmp do
34270: LD_ADDR_VAR 0 4
34274: PUSH
34275: LD_VAR 0 5
34279: PUSH
34280: FOR_IN
34281: IFFALSE 34317
// if GetTech ( i , side ) <> state_researched then
34283: LD_VAR 0 4
34287: PPUSH
34288: LD_VAR 0 1
34292: PPUSH
34293: CALL_OW 321
34297: PUSH
34298: LD_INT 2
34300: NONEQUAL
34301: IFFALSE 34315
// begin result := false ;
34303: LD_ADDR_VAR 0 3
34307: PUSH
34308: LD_INT 0
34310: ST_TO_ADDR
// exit ;
34311: POP
34312: POP
34313: GO 34319
// end ;
34315: GO 34280
34317: POP
34318: POP
// end ;
34319: LD_VAR 0 3
34323: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34324: LD_INT 0
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34339: LD_VAR 0 1
34343: NOT
34344: IFTRUE 34361
34346: PUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: CALL_OW 257
34356: PUSH
34357: LD_INT 9
34359: NONEQUAL
34360: OR
34361: IFFALSE 34365
// exit ;
34363: GO 34944
// side := GetSide ( unit ) ;
34365: LD_ADDR_VAR 0 9
34369: PUSH
34370: LD_VAR 0 1
34374: PPUSH
34375: CALL_OW 255
34379: ST_TO_ADDR
// tech_space := tech_spacanom ;
34380: LD_ADDR_VAR 0 12
34384: PUSH
34385: LD_INT 29
34387: ST_TO_ADDR
// tech_time := tech_taurad ;
34388: LD_ADDR_VAR 0 13
34392: PUSH
34393: LD_INT 28
34395: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34396: LD_ADDR_VAR 0 11
34400: PUSH
34401: LD_VAR 0 1
34405: PPUSH
34406: CALL_OW 310
34410: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34411: LD_VAR 0 11
34415: PPUSH
34416: CALL_OW 247
34420: PUSH
34421: LD_INT 2
34423: EQUAL
34424: IFFALSE 34428
// exit ;
34426: GO 34944
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34428: LD_ADDR_VAR 0 8
34432: PUSH
34433: LD_INT 81
34435: PUSH
34436: LD_VAR 0 9
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 3
34447: PUSH
34448: LD_INT 21
34450: PUSH
34451: LD_INT 3
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PPUSH
34466: CALL_OW 69
34470: ST_TO_ADDR
// if not tmp then
34471: LD_VAR 0 8
34475: NOT
34476: IFFALSE 34480
// exit ;
34478: GO 34944
// if in_unit then
34480: LD_VAR 0 11
34484: IFFALSE 34508
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34486: LD_ADDR_VAR 0 10
34490: PUSH
34491: LD_VAR 0 8
34495: PPUSH
34496: LD_VAR 0 11
34500: PPUSH
34501: CALL_OW 74
34505: ST_TO_ADDR
34506: GO 34528
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34508: LD_ADDR_VAR 0 10
34512: PUSH
34513: LD_VAR 0 8
34517: PPUSH
34518: LD_VAR 0 1
34522: PPUSH
34523: CALL_OW 74
34527: ST_TO_ADDR
// if not enemy then
34528: LD_VAR 0 10
34532: NOT
34533: IFFALSE 34537
// exit ;
34535: GO 34944
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34537: LD_VAR 0 11
34541: IFFALSE 34563
34543: PUSH
34544: LD_VAR 0 11
34548: PPUSH
34549: LD_VAR 0 10
34553: PPUSH
34554: CALL_OW 296
34558: PUSH
34559: LD_INT 13
34561: GREATER
34562: AND
34563: IFTRUE 34585
34565: PUSH
34566: LD_VAR 0 1
34570: PPUSH
34571: LD_VAR 0 10
34575: PPUSH
34576: CALL_OW 296
34580: PUSH
34581: LD_INT 12
34583: GREATER
34584: OR
34585: IFFALSE 34589
// exit ;
34587: GO 34944
// missile := [ 1 ] ;
34589: LD_ADDR_VAR 0 14
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: EMPTY
34598: LIST
34599: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34600: LD_VAR 0 9
34604: PPUSH
34605: LD_VAR 0 12
34609: PPUSH
34610: CALL_OW 325
34614: IFFALSE 34643
// missile := Replace ( missile , missile + 1 , 2 ) ;
34616: LD_ADDR_VAR 0 14
34620: PUSH
34621: LD_VAR 0 14
34625: PPUSH
34626: LD_VAR 0 14
34630: PUSH
34631: LD_INT 1
34633: PLUS
34634: PPUSH
34635: LD_INT 2
34637: PPUSH
34638: CALL_OW 1
34642: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34643: LD_VAR 0 9
34647: PPUSH
34648: LD_VAR 0 13
34652: PPUSH
34653: CALL_OW 325
34657: IFFALSE 34681
34659: PUSH
34660: LD_VAR 0 10
34664: PPUSH
34665: CALL_OW 255
34669: PPUSH
34670: LD_VAR 0 13
34674: PPUSH
34675: CALL_OW 325
34679: NOT
34680: AND
34681: IFFALSE 34710
// missile := Replace ( missile , missile + 1 , 3 ) ;
34683: LD_ADDR_VAR 0 14
34687: PUSH
34688: LD_VAR 0 14
34692: PPUSH
34693: LD_VAR 0 14
34697: PUSH
34698: LD_INT 1
34700: PLUS
34701: PPUSH
34702: LD_INT 3
34704: PPUSH
34705: CALL_OW 1
34709: ST_TO_ADDR
// if missile < 2 then
34710: LD_VAR 0 14
34714: PUSH
34715: LD_INT 2
34717: LESS
34718: IFFALSE 34722
// exit ;
34720: GO 34944
// x := GetX ( enemy ) ;
34722: LD_ADDR_VAR 0 4
34726: PUSH
34727: LD_VAR 0 10
34731: PPUSH
34732: CALL_OW 250
34736: ST_TO_ADDR
// y := GetY ( enemy ) ;
34737: LD_ADDR_VAR 0 5
34741: PUSH
34742: LD_VAR 0 10
34746: PPUSH
34747: CALL_OW 251
34751: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34752: LD_ADDR_VAR 0 6
34756: PUSH
34757: LD_VAR 0 4
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PPUSH
34766: LD_INT 1
34768: PPUSH
34769: CALL_OW 12
34773: PLUS
34774: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34775: LD_ADDR_VAR 0 7
34779: PUSH
34780: LD_VAR 0 5
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PPUSH
34789: LD_INT 1
34791: PPUSH
34792: CALL_OW 12
34796: PLUS
34797: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34798: LD_VAR 0 6
34802: PPUSH
34803: LD_VAR 0 7
34807: PPUSH
34808: CALL_OW 488
34812: NOT
34813: IFFALSE 34835
// begin _x := x ;
34815: LD_ADDR_VAR 0 6
34819: PUSH
34820: LD_VAR 0 4
34824: ST_TO_ADDR
// _y := y ;
34825: LD_ADDR_VAR 0 7
34829: PUSH
34830: LD_VAR 0 5
34834: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34835: LD_ADDR_VAR 0 3
34839: PUSH
34840: LD_INT 1
34842: PPUSH
34843: LD_VAR 0 14
34847: PPUSH
34848: CALL_OW 12
34852: ST_TO_ADDR
// case i of 1 :
34853: LD_VAR 0 3
34857: PUSH
34858: LD_INT 1
34860: DOUBLE
34861: EQUAL
34862: IFTRUE 34866
34864: GO 34883
34866: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34867: LD_VAR 0 1
34871: PPUSH
34872: LD_VAR 0 10
34876: PPUSH
34877: CALL_OW 115
34881: GO 34944
34883: LD_INT 2
34885: DOUBLE
34886: EQUAL
34887: IFTRUE 34891
34889: GO 34913
34891: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34892: LD_VAR 0 1
34896: PPUSH
34897: LD_VAR 0 6
34901: PPUSH
34902: LD_VAR 0 7
34906: PPUSH
34907: CALL_OW 153
34911: GO 34944
34913: LD_INT 3
34915: DOUBLE
34916: EQUAL
34917: IFTRUE 34921
34919: GO 34943
34921: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34922: LD_VAR 0 1
34926: PPUSH
34927: LD_VAR 0 6
34931: PPUSH
34932: LD_VAR 0 7
34936: PPUSH
34937: CALL_OW 154
34941: GO 34944
34943: POP
// end ;
34944: LD_VAR 0 2
34948: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34949: LD_INT 0
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
// if not unit or not building then
34957: LD_VAR 0 1
34961: NOT
34962: IFTRUE 34971
34964: PUSH
34965: LD_VAR 0 2
34969: NOT
34970: OR
34971: IFFALSE 34975
// exit ;
34973: GO 35133
// x := GetX ( building ) ;
34975: LD_ADDR_VAR 0 5
34979: PUSH
34980: LD_VAR 0 2
34984: PPUSH
34985: CALL_OW 250
34989: ST_TO_ADDR
// y := GetY ( building ) ;
34990: LD_ADDR_VAR 0 6
34994: PUSH
34995: LD_VAR 0 2
34999: PPUSH
35000: CALL_OW 251
35004: ST_TO_ADDR
// for i := 0 to 5 do
35005: LD_ADDR_VAR 0 4
35009: PUSH
35010: DOUBLE
35011: LD_INT 0
35013: DEC
35014: ST_TO_ADDR
35015: LD_INT 5
35017: PUSH
35018: FOR_TO
35019: IFFALSE 35131
// begin _x := ShiftX ( x , i , 3 ) ;
35021: LD_ADDR_VAR 0 7
35025: PUSH
35026: LD_VAR 0 5
35030: PPUSH
35031: LD_VAR 0 4
35035: PPUSH
35036: LD_INT 3
35038: PPUSH
35039: CALL_OW 272
35043: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35044: LD_ADDR_VAR 0 8
35048: PUSH
35049: LD_VAR 0 6
35053: PPUSH
35054: LD_VAR 0 4
35058: PPUSH
35059: LD_INT 3
35061: PPUSH
35062: CALL_OW 273
35066: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35067: LD_VAR 0 7
35071: PPUSH
35072: LD_VAR 0 8
35076: PPUSH
35077: CALL_OW 488
35081: NOT
35082: IFFALSE 35086
// continue ;
35084: GO 35018
// if HexInfo ( _x , _y ) = 0 then
35086: LD_VAR 0 7
35090: PPUSH
35091: LD_VAR 0 8
35095: PPUSH
35096: CALL_OW 428
35100: PUSH
35101: LD_INT 0
35103: EQUAL
35104: IFFALSE 35129
// begin ComMoveXY ( unit , _x , _y ) ;
35106: LD_VAR 0 1
35110: PPUSH
35111: LD_VAR 0 7
35115: PPUSH
35116: LD_VAR 0 8
35120: PPUSH
35121: CALL_OW 111
// exit ;
35125: POP
35126: POP
35127: GO 35133
// end ; end ;
35129: GO 35018
35131: POP
35132: POP
// end ;
35133: LD_VAR 0 3
35137: RET
// export function ScanBase ( side , base_area ) ; begin
35138: LD_INT 0
35140: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35141: LD_ADDR_VAR 0 3
35145: PUSH
35146: LD_VAR 0 2
35150: PPUSH
35151: LD_INT 81
35153: PUSH
35154: LD_VAR 0 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PPUSH
35163: CALL_OW 70
35167: ST_TO_ADDR
// end ;
35168: LD_VAR 0 3
35172: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35173: LD_INT 0
35175: PPUSH
35176: PPUSH
35177: PPUSH
35178: PPUSH
// result := false ;
35179: LD_ADDR_VAR 0 2
35183: PUSH
35184: LD_INT 0
35186: ST_TO_ADDR
// side := GetSide ( unit ) ;
35187: LD_ADDR_VAR 0 3
35191: PUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: CALL_OW 255
35201: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35202: LD_ADDR_VAR 0 4
35206: PUSH
35207: LD_VAR 0 1
35211: PPUSH
35212: CALL_OW 248
35216: ST_TO_ADDR
// case nat of 1 :
35217: LD_VAR 0 4
35221: PUSH
35222: LD_INT 1
35224: DOUBLE
35225: EQUAL
35226: IFTRUE 35230
35228: GO 35241
35230: POP
// tech := tech_lassight ; 2 :
35231: LD_ADDR_VAR 0 5
35235: PUSH
35236: LD_INT 12
35238: ST_TO_ADDR
35239: GO 35280
35241: LD_INT 2
35243: DOUBLE
35244: EQUAL
35245: IFTRUE 35249
35247: GO 35260
35249: POP
// tech := tech_mortar ; 3 :
35250: LD_ADDR_VAR 0 5
35254: PUSH
35255: LD_INT 41
35257: ST_TO_ADDR
35258: GO 35280
35260: LD_INT 3
35262: DOUBLE
35263: EQUAL
35264: IFTRUE 35268
35266: GO 35279
35268: POP
// tech := tech_bazooka ; end ;
35269: LD_ADDR_VAR 0 5
35273: PUSH
35274: LD_INT 44
35276: ST_TO_ADDR
35277: GO 35280
35279: POP
// if Researched ( side , tech ) then
35280: LD_VAR 0 3
35284: PPUSH
35285: LD_VAR 0 5
35289: PPUSH
35290: CALL_OW 325
35294: IFFALSE 35321
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35296: LD_ADDR_VAR 0 2
35300: PUSH
35301: LD_INT 5
35303: PUSH
35304: LD_INT 8
35306: PUSH
35307: LD_INT 9
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: LIST
35314: PUSH
35315: LD_VAR 0 4
35319: ARRAY
35320: ST_TO_ADDR
// end ;
35321: LD_VAR 0 2
35325: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35326: LD_INT 0
35328: PPUSH
35329: PPUSH
35330: PPUSH
// if not mines then
35331: LD_VAR 0 2
35335: NOT
35336: IFFALSE 35340
// exit ;
35338: GO 35484
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35340: LD_ADDR_VAR 0 5
35344: PUSH
35345: LD_INT 81
35347: PUSH
35348: LD_VAR 0 1
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 3
35359: PUSH
35360: LD_INT 21
35362: PUSH
35363: LD_INT 3
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PPUSH
35378: CALL_OW 69
35382: ST_TO_ADDR
// for i in mines do
35383: LD_ADDR_VAR 0 4
35387: PUSH
35388: LD_VAR 0 2
35392: PUSH
35393: FOR_IN
35394: IFFALSE 35482
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35396: LD_VAR 0 4
35400: PUSH
35401: LD_INT 1
35403: ARRAY
35404: PPUSH
35405: LD_VAR 0 4
35409: PUSH
35410: LD_INT 2
35412: ARRAY
35413: PPUSH
35414: CALL_OW 458
35418: NOT
35419: IFFALSE 35423
// continue ;
35421: GO 35393
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35423: LD_VAR 0 4
35427: PUSH
35428: LD_INT 1
35430: ARRAY
35431: PPUSH
35432: LD_VAR 0 4
35436: PUSH
35437: LD_INT 2
35439: ARRAY
35440: PPUSH
35441: CALL_OW 428
35445: PUSH
35446: LD_VAR 0 5
35450: IN
35451: IFFALSE 35480
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35453: LD_VAR 0 4
35457: PUSH
35458: LD_INT 1
35460: ARRAY
35461: PPUSH
35462: LD_VAR 0 4
35466: PUSH
35467: LD_INT 2
35469: ARRAY
35470: PPUSH
35471: LD_VAR 0 1
35475: PPUSH
35476: CALL_OW 456
// end ;
35480: GO 35393
35482: POP
35483: POP
// end ;
35484: LD_VAR 0 3
35488: RET
// export function Count ( array ) ; begin
35489: LD_INT 0
35491: PPUSH
// result := array + 0 ;
35492: LD_ADDR_VAR 0 2
35496: PUSH
35497: LD_VAR 0 1
35501: PUSH
35502: LD_INT 0
35504: PLUS
35505: ST_TO_ADDR
// end ;
35506: LD_VAR 0 2
35510: RET
// export function IsEmpty ( building ) ; begin
35511: LD_INT 0
35513: PPUSH
// if not building then
35514: LD_VAR 0 1
35518: NOT
35519: IFFALSE 35523
// exit ;
35521: GO 35566
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35523: LD_ADDR_VAR 0 2
35527: PUSH
35528: LD_VAR 0 1
35532: PUSH
35533: LD_INT 22
35535: PUSH
35536: LD_VAR 0 1
35540: PPUSH
35541: CALL_OW 255
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 58
35552: PUSH
35553: EMPTY
35554: LIST
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PPUSH
35560: CALL_OW 69
35564: IN
35565: ST_TO_ADDR
// end ;
35566: LD_VAR 0 2
35570: RET
// export function IsNotFull ( building ) ; var places ; begin
35571: LD_INT 0
35573: PPUSH
35574: PPUSH
// if not building then
35575: LD_VAR 0 1
35579: NOT
35580: IFFALSE 35584
// exit ;
35582: GO 35612
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35584: LD_ADDR_VAR 0 2
35588: PUSH
35589: LD_VAR 0 1
35593: PPUSH
35594: LD_INT 3
35596: PUSH
35597: LD_INT 62
35599: PUSH
35600: EMPTY
35601: LIST
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PPUSH
35607: CALL_OW 72
35611: ST_TO_ADDR
// end ;
35612: LD_VAR 0 2
35616: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35617: LD_INT 0
35619: PPUSH
35620: PPUSH
35621: PPUSH
35622: PPUSH
// tmp := [ ] ;
35623: LD_ADDR_VAR 0 3
35627: PUSH
35628: EMPTY
35629: ST_TO_ADDR
// list := [ ] ;
35630: LD_ADDR_VAR 0 5
35634: PUSH
35635: EMPTY
35636: ST_TO_ADDR
// for i = 16 to 25 do
35637: LD_ADDR_VAR 0 4
35641: PUSH
35642: DOUBLE
35643: LD_INT 16
35645: DEC
35646: ST_TO_ADDR
35647: LD_INT 25
35649: PUSH
35650: FOR_TO
35651: IFFALSE 35724
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35653: LD_ADDR_VAR 0 3
35657: PUSH
35658: LD_VAR 0 3
35662: PUSH
35663: LD_INT 22
35665: PUSH
35666: LD_VAR 0 1
35670: PPUSH
35671: CALL_OW 255
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 91
35682: PUSH
35683: LD_VAR 0 1
35687: PUSH
35688: LD_INT 6
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 30
35698: PUSH
35699: LD_VAR 0 4
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: PUSH
35713: EMPTY
35714: LIST
35715: PPUSH
35716: CALL_OW 69
35720: ADD
35721: ST_TO_ADDR
35722: GO 35650
35724: POP
35725: POP
// for i = 1 to tmp do
35726: LD_ADDR_VAR 0 4
35730: PUSH
35731: DOUBLE
35732: LD_INT 1
35734: DEC
35735: ST_TO_ADDR
35736: LD_VAR 0 3
35740: PUSH
35741: FOR_TO
35742: IFFALSE 35830
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35744: LD_ADDR_VAR 0 5
35748: PUSH
35749: LD_VAR 0 5
35753: PUSH
35754: LD_VAR 0 3
35758: PUSH
35759: LD_VAR 0 4
35763: ARRAY
35764: PPUSH
35765: CALL_OW 266
35769: PUSH
35770: LD_VAR 0 3
35774: PUSH
35775: LD_VAR 0 4
35779: ARRAY
35780: PPUSH
35781: CALL_OW 250
35785: PUSH
35786: LD_VAR 0 3
35790: PUSH
35791: LD_VAR 0 4
35795: ARRAY
35796: PPUSH
35797: CALL_OW 251
35801: PUSH
35802: LD_VAR 0 3
35806: PUSH
35807: LD_VAR 0 4
35811: ARRAY
35812: PPUSH
35813: CALL_OW 254
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: PUSH
35824: EMPTY
35825: LIST
35826: ADD
35827: ST_TO_ADDR
35828: GO 35741
35830: POP
35831: POP
// result := list ;
35832: LD_ADDR_VAR 0 2
35836: PUSH
35837: LD_VAR 0 5
35841: ST_TO_ADDR
// end ;
35842: LD_VAR 0 2
35846: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35847: LD_INT 0
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
// if not factory then
35856: LD_VAR 0 1
35860: NOT
35861: IFFALSE 35865
// exit ;
35863: GO 36468
// if control = control_apeman then
35865: LD_VAR 0 4
35869: PUSH
35870: LD_INT 5
35872: EQUAL
35873: IFFALSE 35982
// begin tmp := UnitsInside ( factory ) ;
35875: LD_ADDR_VAR 0 8
35879: PUSH
35880: LD_VAR 0 1
35884: PPUSH
35885: CALL_OW 313
35889: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35890: LD_VAR 0 8
35894: PPUSH
35895: LD_INT 25
35897: PUSH
35898: LD_INT 12
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PPUSH
35905: CALL_OW 72
35909: NOT
35910: IFFALSE 35920
// control := control_manual ;
35912: LD_ADDR_VAR 0 4
35916: PUSH
35917: LD_INT 1
35919: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35920: LD_ADDR_VAR 0 8
35924: PUSH
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL 35617 0 1
35934: ST_TO_ADDR
// if tmp then
35935: LD_VAR 0 8
35939: IFFALSE 35982
// begin for i in tmp do
35941: LD_ADDR_VAR 0 7
35945: PUSH
35946: LD_VAR 0 8
35950: PUSH
35951: FOR_IN
35952: IFFALSE 35980
// if i [ 1 ] = b_ext_radio then
35954: LD_VAR 0 7
35958: PUSH
35959: LD_INT 1
35961: ARRAY
35962: PUSH
35963: LD_INT 22
35965: EQUAL
35966: IFFALSE 35978
// begin control := control_remote ;
35968: LD_ADDR_VAR 0 4
35972: PUSH
35973: LD_INT 2
35975: ST_TO_ADDR
// break ;
35976: GO 35980
// end ;
35978: GO 35951
35980: POP
35981: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35982: LD_VAR 0 1
35986: PPUSH
35987: LD_VAR 0 2
35991: PPUSH
35992: LD_VAR 0 3
35996: PPUSH
35997: LD_VAR 0 4
36001: PPUSH
36002: LD_VAR 0 5
36006: PPUSH
36007: CALL_OW 448
36011: IFFALSE 36046
// begin result := [ chassis , engine , control , weapon ] ;
36013: LD_ADDR_VAR 0 6
36017: PUSH
36018: LD_VAR 0 2
36022: PUSH
36023: LD_VAR 0 3
36027: PUSH
36028: LD_VAR 0 4
36032: PUSH
36033: LD_VAR 0 5
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: ST_TO_ADDR
// exit ;
36044: GO 36468
// end ; _chassis := AvailableChassisList ( factory ) ;
36046: LD_ADDR_VAR 0 9
36050: PUSH
36051: LD_VAR 0 1
36055: PPUSH
36056: CALL_OW 475
36060: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36061: LD_ADDR_VAR 0 11
36065: PUSH
36066: LD_VAR 0 1
36070: PPUSH
36071: CALL_OW 476
36075: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36076: LD_ADDR_VAR 0 12
36080: PUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL_OW 477
36090: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36091: LD_ADDR_VAR 0 10
36095: PUSH
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 478
36105: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36106: LD_VAR 0 9
36110: NOT
36111: IFTRUE 36120
36113: PUSH
36114: LD_VAR 0 11
36118: NOT
36119: OR
36120: IFTRUE 36129
36122: PUSH
36123: LD_VAR 0 12
36127: NOT
36128: OR
36129: IFTRUE 36138
36131: PUSH
36132: LD_VAR 0 10
36136: NOT
36137: OR
36138: IFFALSE 36173
// begin result := [ chassis , engine , control , weapon ] ;
36140: LD_ADDR_VAR 0 6
36144: PUSH
36145: LD_VAR 0 2
36149: PUSH
36150: LD_VAR 0 3
36154: PUSH
36155: LD_VAR 0 4
36159: PUSH
36160: LD_VAR 0 5
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: ST_TO_ADDR
// exit ;
36171: GO 36468
// end ; if not chassis in _chassis then
36173: LD_VAR 0 2
36177: PUSH
36178: LD_VAR 0 9
36182: IN
36183: NOT
36184: IFFALSE 36210
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36186: LD_ADDR_VAR 0 2
36190: PUSH
36191: LD_VAR 0 9
36195: PUSH
36196: LD_INT 1
36198: PPUSH
36199: LD_VAR 0 9
36203: PPUSH
36204: CALL_OW 12
36208: ARRAY
36209: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36210: LD_VAR 0 2
36214: PPUSH
36215: LD_VAR 0 3
36219: PPUSH
36220: CALL 36473 0 2
36224: NOT
36225: IFFALSE 36286
// repeat engine := _engine [ 1 ] ;
36227: LD_ADDR_VAR 0 3
36231: PUSH
36232: LD_VAR 0 11
36236: PUSH
36237: LD_INT 1
36239: ARRAY
36240: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36241: LD_ADDR_VAR 0 11
36245: PUSH
36246: LD_VAR 0 11
36250: PPUSH
36251: LD_INT 1
36253: PPUSH
36254: CALL_OW 3
36258: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36259: LD_VAR 0 2
36263: PPUSH
36264: LD_VAR 0 3
36268: PPUSH
36269: CALL 36473 0 2
36273: IFTRUE 36284
36275: PUSH
36276: LD_VAR 0 11
36280: PUSH
36281: EMPTY
36282: EQUAL
36283: OR
36284: IFFALSE 36227
// if not control in _control then
36286: LD_VAR 0 4
36290: PUSH
36291: LD_VAR 0 12
36295: IN
36296: NOT
36297: IFFALSE 36323
// control := _control [ rand ( 1 , _control ) ] ;
36299: LD_ADDR_VAR 0 4
36303: PUSH
36304: LD_VAR 0 12
36308: PUSH
36309: LD_INT 1
36311: PPUSH
36312: LD_VAR 0 12
36316: PPUSH
36317: CALL_OW 12
36321: ARRAY
36322: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36323: LD_VAR 0 2
36327: PPUSH
36328: LD_VAR 0 5
36332: PPUSH
36333: CALL 36695 0 2
36337: NOT
36338: IFFALSE 36399
// repeat weapon := _weapon [ 1 ] ;
36340: LD_ADDR_VAR 0 5
36344: PUSH
36345: LD_VAR 0 10
36349: PUSH
36350: LD_INT 1
36352: ARRAY
36353: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36354: LD_ADDR_VAR 0 10
36358: PUSH
36359: LD_VAR 0 10
36363: PPUSH
36364: LD_INT 1
36366: PPUSH
36367: CALL_OW 3
36371: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36372: LD_VAR 0 2
36376: PPUSH
36377: LD_VAR 0 5
36381: PPUSH
36382: CALL 36695 0 2
36386: IFTRUE 36397
36388: PUSH
36389: LD_VAR 0 10
36393: PUSH
36394: EMPTY
36395: EQUAL
36396: OR
36397: IFFALSE 36340
// result := [ ] ;
36399: LD_ADDR_VAR 0 6
36403: PUSH
36404: EMPTY
36405: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36406: LD_VAR 0 1
36410: PPUSH
36411: LD_VAR 0 2
36415: PPUSH
36416: LD_VAR 0 3
36420: PPUSH
36421: LD_VAR 0 4
36425: PPUSH
36426: LD_VAR 0 5
36430: PPUSH
36431: CALL_OW 448
36435: IFFALSE 36468
// result := [ chassis , engine , control , weapon ] ;
36437: LD_ADDR_VAR 0 6
36441: PUSH
36442: LD_VAR 0 2
36446: PUSH
36447: LD_VAR 0 3
36451: PUSH
36452: LD_VAR 0 4
36456: PUSH
36457: LD_VAR 0 5
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: ST_TO_ADDR
// end ;
36468: LD_VAR 0 6
36472: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36473: LD_INT 0
36475: PPUSH
// if not chassis or not engine then
36476: LD_VAR 0 1
36480: NOT
36481: IFTRUE 36490
36483: PUSH
36484: LD_VAR 0 2
36488: NOT
36489: OR
36490: IFFALSE 36494
// exit ;
36492: GO 36690
// case engine of engine_solar :
36494: LD_VAR 0 2
36498: PUSH
36499: LD_INT 2
36501: DOUBLE
36502: EQUAL
36503: IFTRUE 36507
36505: GO 36545
36507: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36508: LD_ADDR_VAR 0 3
36512: PUSH
36513: LD_INT 11
36515: PUSH
36516: LD_INT 12
36518: PUSH
36519: LD_INT 13
36521: PUSH
36522: LD_INT 14
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: LD_INT 3
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: ST_TO_ADDR
36543: GO 36674
36545: LD_INT 1
36547: DOUBLE
36548: EQUAL
36549: IFTRUE 36553
36551: GO 36615
36553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36554: LD_ADDR_VAR 0 3
36558: PUSH
36559: LD_INT 11
36561: PUSH
36562: LD_INT 12
36564: PUSH
36565: LD_INT 13
36567: PUSH
36568: LD_INT 14
36570: PUSH
36571: LD_INT 1
36573: PUSH
36574: LD_INT 2
36576: PUSH
36577: LD_INT 3
36579: PUSH
36580: LD_INT 4
36582: PUSH
36583: LD_INT 5
36585: PUSH
36586: LD_INT 21
36588: PUSH
36589: LD_INT 23
36591: PUSH
36592: LD_INT 22
36594: PUSH
36595: LD_INT 24
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: ST_TO_ADDR
36613: GO 36674
36615: LD_INT 3
36617: DOUBLE
36618: EQUAL
36619: IFTRUE 36623
36621: GO 36673
36623: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36624: LD_ADDR_VAR 0 3
36628: PUSH
36629: LD_INT 13
36631: PUSH
36632: LD_INT 14
36634: PUSH
36635: LD_INT 2
36637: PUSH
36638: LD_INT 3
36640: PUSH
36641: LD_INT 4
36643: PUSH
36644: LD_INT 5
36646: PUSH
36647: LD_INT 21
36649: PUSH
36650: LD_INT 22
36652: PUSH
36653: LD_INT 23
36655: PUSH
36656: LD_INT 24
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: ST_TO_ADDR
36671: GO 36674
36673: POP
// result := ( chassis in result ) ;
36674: LD_ADDR_VAR 0 3
36678: PUSH
36679: LD_VAR 0 1
36683: PUSH
36684: LD_VAR 0 3
36688: IN
36689: ST_TO_ADDR
// end ;
36690: LD_VAR 0 3
36694: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36695: LD_INT 0
36697: PPUSH
// if not chassis or not weapon then
36698: LD_VAR 0 1
36702: NOT
36703: IFTRUE 36712
36705: PUSH
36706: LD_VAR 0 2
36710: NOT
36711: OR
36712: IFFALSE 36716
// exit ;
36714: GO 37776
// case weapon of us_machine_gun :
36716: LD_VAR 0 2
36720: PUSH
36721: LD_INT 2
36723: DOUBLE
36724: EQUAL
36725: IFTRUE 36729
36727: GO 36759
36729: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36730: LD_ADDR_VAR 0 3
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: LD_INT 3
36743: PUSH
36744: LD_INT 4
36746: PUSH
36747: LD_INT 5
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: ST_TO_ADDR
36757: GO 37760
36759: LD_INT 3
36761: DOUBLE
36762: EQUAL
36763: IFTRUE 36767
36765: GO 36797
36767: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36768: LD_ADDR_VAR 0 3
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: LD_INT 2
36778: PUSH
36779: LD_INT 3
36781: PUSH
36782: LD_INT 4
36784: PUSH
36785: LD_INT 5
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: ST_TO_ADDR
36795: GO 37760
36797: LD_INT 11
36799: DOUBLE
36800: EQUAL
36801: IFTRUE 36805
36803: GO 36835
36805: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36806: LD_ADDR_VAR 0 3
36810: PUSH
36811: LD_INT 1
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: LD_INT 3
36819: PUSH
36820: LD_INT 4
36822: PUSH
36823: LD_INT 5
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
36833: GO 37760
36835: LD_INT 4
36837: DOUBLE
36838: EQUAL
36839: IFTRUE 36843
36841: GO 36869
36843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36844: LD_ADDR_VAR 0 3
36848: PUSH
36849: LD_INT 2
36851: PUSH
36852: LD_INT 3
36854: PUSH
36855: LD_INT 4
36857: PUSH
36858: LD_INT 5
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: ST_TO_ADDR
36867: GO 37760
36869: LD_INT 5
36871: DOUBLE
36872: EQUAL
36873: IFTRUE 36877
36875: GO 36903
36877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36878: LD_ADDR_VAR 0 3
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: LD_INT 3
36888: PUSH
36889: LD_INT 4
36891: PUSH
36892: LD_INT 5
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
36901: GO 37760
36903: LD_INT 9
36905: DOUBLE
36906: EQUAL
36907: IFTRUE 36911
36909: GO 36937
36911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36912: LD_ADDR_VAR 0 3
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: LD_INT 3
36922: PUSH
36923: LD_INT 4
36925: PUSH
36926: LD_INT 5
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: ST_TO_ADDR
36935: GO 37760
36937: LD_INT 7
36939: DOUBLE
36940: EQUAL
36941: IFTRUE 36945
36943: GO 36971
36945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36946: LD_ADDR_VAR 0 3
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: LD_INT 3
36956: PUSH
36957: LD_INT 4
36959: PUSH
36960: LD_INT 5
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
36969: GO 37760
36971: LD_INT 12
36973: DOUBLE
36974: EQUAL
36975: IFTRUE 36979
36977: GO 37005
36979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36980: LD_ADDR_VAR 0 3
36984: PUSH
36985: LD_INT 2
36987: PUSH
36988: LD_INT 3
36990: PUSH
36991: LD_INT 4
36993: PUSH
36994: LD_INT 5
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: ST_TO_ADDR
37003: GO 37760
37005: LD_INT 13
37007: DOUBLE
37008: EQUAL
37009: IFTRUE 37013
37011: GO 37039
37013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37014: LD_ADDR_VAR 0 3
37018: PUSH
37019: LD_INT 2
37021: PUSH
37022: LD_INT 3
37024: PUSH
37025: LD_INT 4
37027: PUSH
37028: LD_INT 5
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: ST_TO_ADDR
37037: GO 37760
37039: LD_INT 14
37041: DOUBLE
37042: EQUAL
37043: IFTRUE 37047
37045: GO 37065
37047: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37048: LD_ADDR_VAR 0 3
37052: PUSH
37053: LD_INT 4
37055: PUSH
37056: LD_INT 5
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: ST_TO_ADDR
37063: GO 37760
37065: LD_INT 6
37067: DOUBLE
37068: EQUAL
37069: IFTRUE 37073
37071: GO 37091
37073: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37074: LD_ADDR_VAR 0 3
37078: PUSH
37079: LD_INT 4
37081: PUSH
37082: LD_INT 5
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: ST_TO_ADDR
37089: GO 37760
37091: LD_INT 10
37093: DOUBLE
37094: EQUAL
37095: IFTRUE 37099
37097: GO 37117
37099: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37100: LD_ADDR_VAR 0 3
37104: PUSH
37105: LD_INT 4
37107: PUSH
37108: LD_INT 5
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: ST_TO_ADDR
37115: GO 37760
37117: LD_INT 22
37119: DOUBLE
37120: EQUAL
37121: IFTRUE 37125
37123: GO 37151
37125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_INT 11
37133: PUSH
37134: LD_INT 12
37136: PUSH
37137: LD_INT 13
37139: PUSH
37140: LD_INT 14
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: ST_TO_ADDR
37149: GO 37760
37151: LD_INT 23
37153: DOUBLE
37154: EQUAL
37155: IFTRUE 37159
37157: GO 37185
37159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37160: LD_ADDR_VAR 0 3
37164: PUSH
37165: LD_INT 11
37167: PUSH
37168: LD_INT 12
37170: PUSH
37171: LD_INT 13
37173: PUSH
37174: LD_INT 14
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: ST_TO_ADDR
37183: GO 37760
37185: LD_INT 24
37187: DOUBLE
37188: EQUAL
37189: IFTRUE 37193
37191: GO 37219
37193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37194: LD_ADDR_VAR 0 3
37198: PUSH
37199: LD_INT 11
37201: PUSH
37202: LD_INT 12
37204: PUSH
37205: LD_INT 13
37207: PUSH
37208: LD_INT 14
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: ST_TO_ADDR
37217: GO 37760
37219: LD_INT 30
37221: DOUBLE
37222: EQUAL
37223: IFTRUE 37227
37225: GO 37253
37227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37228: LD_ADDR_VAR 0 3
37232: PUSH
37233: LD_INT 11
37235: PUSH
37236: LD_INT 12
37238: PUSH
37239: LD_INT 13
37241: PUSH
37242: LD_INT 14
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: ST_TO_ADDR
37251: GO 37760
37253: LD_INT 25
37255: DOUBLE
37256: EQUAL
37257: IFTRUE 37261
37259: GO 37279
37261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37262: LD_ADDR_VAR 0 3
37266: PUSH
37267: LD_INT 13
37269: PUSH
37270: LD_INT 14
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: ST_TO_ADDR
37277: GO 37760
37279: LD_INT 27
37281: DOUBLE
37282: EQUAL
37283: IFTRUE 37287
37285: GO 37305
37287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37288: LD_ADDR_VAR 0 3
37292: PUSH
37293: LD_INT 13
37295: PUSH
37296: LD_INT 14
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: ST_TO_ADDR
37303: GO 37760
37305: LD_INT 92
37307: DOUBLE
37308: EQUAL
37309: IFTRUE 37313
37311: GO 37339
37313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37314: LD_ADDR_VAR 0 3
37318: PUSH
37319: LD_INT 11
37321: PUSH
37322: LD_INT 12
37324: PUSH
37325: LD_INT 13
37327: PUSH
37328: LD_INT 14
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: ST_TO_ADDR
37337: GO 37760
37339: LD_INT 28
37341: DOUBLE
37342: EQUAL
37343: IFTRUE 37347
37345: GO 37365
37347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37348: LD_ADDR_VAR 0 3
37352: PUSH
37353: LD_INT 13
37355: PUSH
37356: LD_INT 14
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: ST_TO_ADDR
37363: GO 37760
37365: LD_INT 29
37367: DOUBLE
37368: EQUAL
37369: IFTRUE 37373
37371: GO 37391
37373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37374: LD_ADDR_VAR 0 3
37378: PUSH
37379: LD_INT 13
37381: PUSH
37382: LD_INT 14
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: ST_TO_ADDR
37389: GO 37760
37391: LD_INT 31
37393: DOUBLE
37394: EQUAL
37395: IFTRUE 37399
37397: GO 37417
37399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37400: LD_ADDR_VAR 0 3
37404: PUSH
37405: LD_INT 13
37407: PUSH
37408: LD_INT 14
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: ST_TO_ADDR
37415: GO 37760
37417: LD_INT 26
37419: DOUBLE
37420: EQUAL
37421: IFTRUE 37425
37423: GO 37443
37425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37426: LD_ADDR_VAR 0 3
37430: PUSH
37431: LD_INT 13
37433: PUSH
37434: LD_INT 14
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: ST_TO_ADDR
37441: GO 37760
37443: LD_INT 42
37445: DOUBLE
37446: EQUAL
37447: IFTRUE 37451
37449: GO 37477
37451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37452: LD_ADDR_VAR 0 3
37456: PUSH
37457: LD_INT 21
37459: PUSH
37460: LD_INT 22
37462: PUSH
37463: LD_INT 23
37465: PUSH
37466: LD_INT 24
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: ST_TO_ADDR
37475: GO 37760
37477: LD_INT 43
37479: DOUBLE
37480: EQUAL
37481: IFTRUE 37485
37483: GO 37511
37485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37486: LD_ADDR_VAR 0 3
37490: PUSH
37491: LD_INT 21
37493: PUSH
37494: LD_INT 22
37496: PUSH
37497: LD_INT 23
37499: PUSH
37500: LD_INT 24
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: ST_TO_ADDR
37509: GO 37760
37511: LD_INT 44
37513: DOUBLE
37514: EQUAL
37515: IFTRUE 37519
37517: GO 37545
37519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37520: LD_ADDR_VAR 0 3
37524: PUSH
37525: LD_INT 21
37527: PUSH
37528: LD_INT 22
37530: PUSH
37531: LD_INT 23
37533: PUSH
37534: LD_INT 24
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: ST_TO_ADDR
37543: GO 37760
37545: LD_INT 45
37547: DOUBLE
37548: EQUAL
37549: IFTRUE 37553
37551: GO 37579
37553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37554: LD_ADDR_VAR 0 3
37558: PUSH
37559: LD_INT 21
37561: PUSH
37562: LD_INT 22
37564: PUSH
37565: LD_INT 23
37567: PUSH
37568: LD_INT 24
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: ST_TO_ADDR
37577: GO 37760
37579: LD_INT 49
37581: DOUBLE
37582: EQUAL
37583: IFTRUE 37587
37585: GO 37613
37587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37588: LD_ADDR_VAR 0 3
37592: PUSH
37593: LD_INT 21
37595: PUSH
37596: LD_INT 22
37598: PUSH
37599: LD_INT 23
37601: PUSH
37602: LD_INT 24
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: ST_TO_ADDR
37611: GO 37760
37613: LD_INT 51
37615: DOUBLE
37616: EQUAL
37617: IFTRUE 37621
37619: GO 37647
37621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37622: LD_ADDR_VAR 0 3
37626: PUSH
37627: LD_INT 21
37629: PUSH
37630: LD_INT 22
37632: PUSH
37633: LD_INT 23
37635: PUSH
37636: LD_INT 24
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: ST_TO_ADDR
37645: GO 37760
37647: LD_INT 52
37649: DOUBLE
37650: EQUAL
37651: IFTRUE 37655
37653: GO 37681
37655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37656: LD_ADDR_VAR 0 3
37660: PUSH
37661: LD_INT 21
37663: PUSH
37664: LD_INT 22
37666: PUSH
37667: LD_INT 23
37669: PUSH
37670: LD_INT 24
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: ST_TO_ADDR
37679: GO 37760
37681: LD_INT 53
37683: DOUBLE
37684: EQUAL
37685: IFTRUE 37689
37687: GO 37707
37689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37690: LD_ADDR_VAR 0 3
37694: PUSH
37695: LD_INT 23
37697: PUSH
37698: LD_INT 24
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: ST_TO_ADDR
37705: GO 37760
37707: LD_INT 46
37709: DOUBLE
37710: EQUAL
37711: IFTRUE 37715
37713: GO 37733
37715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37716: LD_ADDR_VAR 0 3
37720: PUSH
37721: LD_INT 23
37723: PUSH
37724: LD_INT 24
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: ST_TO_ADDR
37731: GO 37760
37733: LD_INT 47
37735: DOUBLE
37736: EQUAL
37737: IFTRUE 37741
37739: GO 37759
37741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37742: LD_ADDR_VAR 0 3
37746: PUSH
37747: LD_INT 23
37749: PUSH
37750: LD_INT 24
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: ST_TO_ADDR
37757: GO 37760
37759: POP
// result := ( chassis in result ) ;
37760: LD_ADDR_VAR 0 3
37764: PUSH
37765: LD_VAR 0 1
37769: PUSH
37770: LD_VAR 0 3
37774: IN
37775: ST_TO_ADDR
// end ;
37776: LD_VAR 0 3
37780: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37781: LD_INT 0
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
// result := array ;
37790: LD_ADDR_VAR 0 5
37794: PUSH
37795: LD_VAR 0 1
37799: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37800: LD_VAR 0 1
37804: NOT
37805: IFTRUE 37814
37807: PUSH
37808: LD_VAR 0 2
37812: NOT
37813: OR
37814: IFTRUE 37823
37816: PUSH
37817: LD_VAR 0 3
37821: NOT
37822: OR
37823: IFTRUE 37837
37825: PUSH
37826: LD_VAR 0 2
37830: PUSH
37831: LD_VAR 0 1
37835: GREATER
37836: OR
37837: IFTRUE 37851
37839: PUSH
37840: LD_VAR 0 3
37844: PUSH
37845: LD_VAR 0 1
37849: GREATER
37850: OR
37851: IFFALSE 37855
// exit ;
37853: GO 38151
// if direction then
37855: LD_VAR 0 4
37859: IFFALSE 37923
// begin d := 1 ;
37861: LD_ADDR_VAR 0 9
37865: PUSH
37866: LD_INT 1
37868: ST_TO_ADDR
// if i_from > i_to then
37869: LD_VAR 0 2
37873: PUSH
37874: LD_VAR 0 3
37878: GREATER
37879: IFFALSE 37905
// length := ( array - i_from ) + i_to else
37881: LD_ADDR_VAR 0 11
37885: PUSH
37886: LD_VAR 0 1
37890: PUSH
37891: LD_VAR 0 2
37895: MINUS
37896: PUSH
37897: LD_VAR 0 3
37901: PLUS
37902: ST_TO_ADDR
37903: GO 37921
// length := i_to - i_from ;
37905: LD_ADDR_VAR 0 11
37909: PUSH
37910: LD_VAR 0 3
37914: PUSH
37915: LD_VAR 0 2
37919: MINUS
37920: ST_TO_ADDR
// end else
37921: GO 37984
// begin d := - 1 ;
37923: LD_ADDR_VAR 0 9
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: ST_TO_ADDR
// if i_from > i_to then
37932: LD_VAR 0 2
37936: PUSH
37937: LD_VAR 0 3
37941: GREATER
37942: IFFALSE 37962
// length := i_from - i_to else
37944: LD_ADDR_VAR 0 11
37948: PUSH
37949: LD_VAR 0 2
37953: PUSH
37954: LD_VAR 0 3
37958: MINUS
37959: ST_TO_ADDR
37960: GO 37984
// length := ( array - i_to ) + i_from ;
37962: LD_ADDR_VAR 0 11
37966: PUSH
37967: LD_VAR 0 1
37971: PUSH
37972: LD_VAR 0 3
37976: MINUS
37977: PUSH
37978: LD_VAR 0 2
37982: PLUS
37983: ST_TO_ADDR
// end ; if not length then
37984: LD_VAR 0 11
37988: NOT
37989: IFFALSE 37993
// exit ;
37991: GO 38151
// tmp := array ;
37993: LD_ADDR_VAR 0 10
37997: PUSH
37998: LD_VAR 0 1
38002: ST_TO_ADDR
// for i = 1 to length do
38003: LD_ADDR_VAR 0 6
38007: PUSH
38008: DOUBLE
38009: LD_INT 1
38011: DEC
38012: ST_TO_ADDR
38013: LD_VAR 0 11
38017: PUSH
38018: FOR_TO
38019: IFFALSE 38139
// begin for j = 1 to array do
38021: LD_ADDR_VAR 0 7
38025: PUSH
38026: DOUBLE
38027: LD_INT 1
38029: DEC
38030: ST_TO_ADDR
38031: LD_VAR 0 1
38035: PUSH
38036: FOR_TO
38037: IFFALSE 38125
// begin k := j + d ;
38039: LD_ADDR_VAR 0 8
38043: PUSH
38044: LD_VAR 0 7
38048: PUSH
38049: LD_VAR 0 9
38053: PLUS
38054: ST_TO_ADDR
// if k > array then
38055: LD_VAR 0 8
38059: PUSH
38060: LD_VAR 0 1
38064: GREATER
38065: IFFALSE 38075
// k := 1 ;
38067: LD_ADDR_VAR 0 8
38071: PUSH
38072: LD_INT 1
38074: ST_TO_ADDR
// if not k then
38075: LD_VAR 0 8
38079: NOT
38080: IFFALSE 38092
// k := array ;
38082: LD_ADDR_VAR 0 8
38086: PUSH
38087: LD_VAR 0 1
38091: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38092: LD_ADDR_VAR 0 10
38096: PUSH
38097: LD_VAR 0 10
38101: PPUSH
38102: LD_VAR 0 8
38106: PPUSH
38107: LD_VAR 0 1
38111: PUSH
38112: LD_VAR 0 7
38116: ARRAY
38117: PPUSH
38118: CALL_OW 1
38122: ST_TO_ADDR
// end ;
38123: GO 38036
38125: POP
38126: POP
// array := tmp ;
38127: LD_ADDR_VAR 0 1
38131: PUSH
38132: LD_VAR 0 10
38136: ST_TO_ADDR
// end ;
38137: GO 38018
38139: POP
38140: POP
// result := array ;
38141: LD_ADDR_VAR 0 5
38145: PUSH
38146: LD_VAR 0 1
38150: ST_TO_ADDR
// end ;
38151: LD_VAR 0 5
38155: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38156: LD_INT 0
38158: PPUSH
38159: PPUSH
// result := 0 ;
38160: LD_ADDR_VAR 0 3
38164: PUSH
38165: LD_INT 0
38167: ST_TO_ADDR
// if not array or not value in array then
38168: LD_VAR 0 1
38172: NOT
38173: IFTRUE 38188
38175: PUSH
38176: LD_VAR 0 2
38180: PUSH
38181: LD_VAR 0 1
38185: IN
38186: NOT
38187: OR
38188: IFFALSE 38192
// exit ;
38190: GO 38246
// for i = 1 to array do
38192: LD_ADDR_VAR 0 4
38196: PUSH
38197: DOUBLE
38198: LD_INT 1
38200: DEC
38201: ST_TO_ADDR
38202: LD_VAR 0 1
38206: PUSH
38207: FOR_TO
38208: IFFALSE 38244
// if value = array [ i ] then
38210: LD_VAR 0 2
38214: PUSH
38215: LD_VAR 0 1
38219: PUSH
38220: LD_VAR 0 4
38224: ARRAY
38225: EQUAL
38226: IFFALSE 38242
// begin result := i ;
38228: LD_ADDR_VAR 0 3
38232: PUSH
38233: LD_VAR 0 4
38237: ST_TO_ADDR
// exit ;
38238: POP
38239: POP
38240: GO 38246
// end ;
38242: GO 38207
38244: POP
38245: POP
// end ;
38246: LD_VAR 0 3
38250: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38251: LD_INT 0
38253: PPUSH
// vc_chassis := chassis ;
38254: LD_ADDR_OWVAR 37
38258: PUSH
38259: LD_VAR 0 1
38263: ST_TO_ADDR
// vc_engine := engine ;
38264: LD_ADDR_OWVAR 39
38268: PUSH
38269: LD_VAR 0 2
38273: ST_TO_ADDR
// vc_control := control ;
38274: LD_ADDR_OWVAR 38
38278: PUSH
38279: LD_VAR 0 3
38283: ST_TO_ADDR
// vc_weapon := weapon ;
38284: LD_ADDR_OWVAR 40
38288: PUSH
38289: LD_VAR 0 4
38293: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38294: LD_ADDR_OWVAR 41
38298: PUSH
38299: LD_VAR 0 5
38303: ST_TO_ADDR
// end ;
38304: LD_VAR 0 6
38308: RET
// export function WantPlant ( unit ) ; var task ; begin
38309: LD_INT 0
38311: PPUSH
38312: PPUSH
// result := false ;
38313: LD_ADDR_VAR 0 2
38317: PUSH
38318: LD_INT 0
38320: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38321: LD_ADDR_VAR 0 3
38325: PUSH
38326: LD_VAR 0 1
38330: PPUSH
38331: CALL_OW 437
38335: ST_TO_ADDR
// if task then
38336: LD_VAR 0 3
38340: IFFALSE 38368
// if task [ 1 ] [ 1 ] = p then
38342: LD_VAR 0 3
38346: PUSH
38347: LD_INT 1
38349: ARRAY
38350: PUSH
38351: LD_INT 1
38353: ARRAY
38354: PUSH
38355: LD_STRING p
38357: EQUAL
38358: IFFALSE 38368
// result := true ;
38360: LD_ADDR_VAR 0 2
38364: PUSH
38365: LD_INT 1
38367: ST_TO_ADDR
// end ;
38368: LD_VAR 0 2
38372: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38373: LD_INT 0
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
// if pos < 1 then
38379: LD_VAR 0 2
38383: PUSH
38384: LD_INT 1
38386: LESS
38387: IFFALSE 38391
// exit ;
38389: GO 38694
// if pos = 1 then
38391: LD_VAR 0 2
38395: PUSH
38396: LD_INT 1
38398: EQUAL
38399: IFFALSE 38432
// result := Replace ( arr , pos [ 1 ] , value ) else
38401: LD_ADDR_VAR 0 4
38405: PUSH
38406: LD_VAR 0 1
38410: PPUSH
38411: LD_VAR 0 2
38415: PUSH
38416: LD_INT 1
38418: ARRAY
38419: PPUSH
38420: LD_VAR 0 3
38424: PPUSH
38425: CALL_OW 1
38429: ST_TO_ADDR
38430: GO 38694
// begin tmp := arr ;
38432: LD_ADDR_VAR 0 6
38436: PUSH
38437: LD_VAR 0 1
38441: ST_TO_ADDR
// s_arr := [ tmp ] ;
38442: LD_ADDR_VAR 0 7
38446: PUSH
38447: LD_VAR 0 6
38451: PUSH
38452: EMPTY
38453: LIST
38454: ST_TO_ADDR
// for i = 1 to pos - 1 do
38455: LD_ADDR_VAR 0 5
38459: PUSH
38460: DOUBLE
38461: LD_INT 1
38463: DEC
38464: ST_TO_ADDR
38465: LD_VAR 0 2
38469: PUSH
38470: LD_INT 1
38472: MINUS
38473: PUSH
38474: FOR_TO
38475: IFFALSE 38520
// begin tmp := tmp [ pos [ i ] ] ;
38477: LD_ADDR_VAR 0 6
38481: PUSH
38482: LD_VAR 0 6
38486: PUSH
38487: LD_VAR 0 2
38491: PUSH
38492: LD_VAR 0 5
38496: ARRAY
38497: ARRAY
38498: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38499: LD_ADDR_VAR 0 7
38503: PUSH
38504: LD_VAR 0 7
38508: PUSH
38509: LD_VAR 0 6
38513: PUSH
38514: EMPTY
38515: LIST
38516: ADD
38517: ST_TO_ADDR
// end ;
38518: GO 38474
38520: POP
38521: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38522: LD_ADDR_VAR 0 6
38526: PUSH
38527: LD_VAR 0 6
38531: PPUSH
38532: LD_VAR 0 2
38536: PUSH
38537: LD_VAR 0 2
38541: ARRAY
38542: PPUSH
38543: LD_VAR 0 3
38547: PPUSH
38548: CALL_OW 1
38552: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38553: LD_ADDR_VAR 0 7
38557: PUSH
38558: LD_VAR 0 7
38562: PPUSH
38563: LD_VAR 0 7
38567: PPUSH
38568: LD_VAR 0 6
38572: PPUSH
38573: CALL_OW 1
38577: ST_TO_ADDR
// for i = s_arr downto 2 do
38578: LD_ADDR_VAR 0 5
38582: PUSH
38583: DOUBLE
38584: LD_VAR 0 7
38588: INC
38589: ST_TO_ADDR
38590: LD_INT 2
38592: PUSH
38593: FOR_DOWNTO
38594: IFFALSE 38678
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38596: LD_ADDR_VAR 0 6
38600: PUSH
38601: LD_VAR 0 7
38605: PUSH
38606: LD_VAR 0 5
38610: PUSH
38611: LD_INT 1
38613: MINUS
38614: ARRAY
38615: PPUSH
38616: LD_VAR 0 2
38620: PUSH
38621: LD_VAR 0 5
38625: PUSH
38626: LD_INT 1
38628: MINUS
38629: ARRAY
38630: PPUSH
38631: LD_VAR 0 7
38635: PUSH
38636: LD_VAR 0 5
38640: ARRAY
38641: PPUSH
38642: CALL_OW 1
38646: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38647: LD_ADDR_VAR 0 7
38651: PUSH
38652: LD_VAR 0 7
38656: PPUSH
38657: LD_VAR 0 5
38661: PUSH
38662: LD_INT 1
38664: MINUS
38665: PPUSH
38666: LD_VAR 0 6
38670: PPUSH
38671: CALL_OW 1
38675: ST_TO_ADDR
// end ;
38676: GO 38593
38678: POP
38679: POP
// result := s_arr [ 1 ] ;
38680: LD_ADDR_VAR 0 4
38684: PUSH
38685: LD_VAR 0 7
38689: PUSH
38690: LD_INT 1
38692: ARRAY
38693: ST_TO_ADDR
// end ; end ;
38694: LD_VAR 0 4
38698: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38699: LD_INT 0
38701: PPUSH
38702: PPUSH
// if not list then
38703: LD_VAR 0 1
38707: NOT
38708: IFFALSE 38712
// exit ;
38710: GO 38803
// i := list [ pos1 ] ;
38712: LD_ADDR_VAR 0 5
38716: PUSH
38717: LD_VAR 0 1
38721: PUSH
38722: LD_VAR 0 2
38726: ARRAY
38727: ST_TO_ADDR
// if not i then
38728: LD_VAR 0 5
38732: NOT
38733: IFFALSE 38737
// exit ;
38735: GO 38803
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38737: LD_ADDR_VAR 0 1
38741: PUSH
38742: LD_VAR 0 1
38746: PPUSH
38747: LD_VAR 0 2
38751: PPUSH
38752: LD_VAR 0 1
38756: PUSH
38757: LD_VAR 0 3
38761: ARRAY
38762: PPUSH
38763: CALL_OW 1
38767: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38768: LD_ADDR_VAR 0 1
38772: PUSH
38773: LD_VAR 0 1
38777: PPUSH
38778: LD_VAR 0 3
38782: PPUSH
38783: LD_VAR 0 5
38787: PPUSH
38788: CALL_OW 1
38792: ST_TO_ADDR
// result := list ;
38793: LD_ADDR_VAR 0 4
38797: PUSH
38798: LD_VAR 0 1
38802: ST_TO_ADDR
// end ;
38803: LD_VAR 0 4
38807: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38808: LD_INT 0
38810: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38811: LD_ADDR_VAR 0 5
38815: PUSH
38816: LD_VAR 0 1
38820: PPUSH
38821: CALL_OW 250
38825: PPUSH
38826: LD_VAR 0 1
38830: PPUSH
38831: CALL_OW 251
38835: PPUSH
38836: LD_VAR 0 2
38840: PPUSH
38841: LD_VAR 0 3
38845: PPUSH
38846: LD_VAR 0 4
38850: PPUSH
38851: CALL 39233 0 5
38855: ST_TO_ADDR
// end ;
38856: LD_VAR 0 5
38860: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38861: LD_INT 0
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
// if not list or not unit then
38867: LD_VAR 0 2
38871: NOT
38872: IFTRUE 38881
38874: PUSH
38875: LD_VAR 0 1
38879: NOT
38880: OR
38881: IFFALSE 38885
// exit ;
38883: GO 39228
// result := [ ] ;
38885: LD_ADDR_VAR 0 5
38889: PUSH
38890: EMPTY
38891: ST_TO_ADDR
// for i in list do
38892: LD_ADDR_VAR 0 6
38896: PUSH
38897: LD_VAR 0 2
38901: PUSH
38902: FOR_IN
38903: IFFALSE 39121
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38905: LD_ADDR_VAR 0 8
38909: PUSH
38910: LD_VAR 0 1
38914: PPUSH
38915: LD_VAR 0 6
38919: PUSH
38920: LD_INT 1
38922: ARRAY
38923: PPUSH
38924: LD_VAR 0 6
38928: PUSH
38929: LD_INT 2
38931: ARRAY
38932: PPUSH
38933: CALL_OW 297
38937: ST_TO_ADDR
// if not Count ( result ) then
38938: LD_VAR 0 5
38942: PPUSH
38943: CALL 35489 0 1
38947: NOT
38948: IFFALSE 38981
// begin result := Join ( result , [ i , tmp ] ) ;
38950: LD_ADDR_VAR 0 5
38954: PUSH
38955: LD_VAR 0 5
38959: PPUSH
38960: LD_VAR 0 6
38964: PUSH
38965: LD_VAR 0 8
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PPUSH
38974: CALL 71421 0 2
38978: ST_TO_ADDR
// continue ;
38979: GO 38902
// end ; if result [ result ] [ 2 ] <= tmp then
38981: LD_VAR 0 5
38985: PUSH
38986: LD_VAR 0 5
38990: ARRAY
38991: PUSH
38992: LD_INT 2
38994: ARRAY
38995: PUSH
38996: LD_VAR 0 8
39000: LESSEQUAL
39001: IFFALSE 39034
// result := Join ( result , [ i , tmp ] ) else
39003: LD_ADDR_VAR 0 5
39007: PUSH
39008: LD_VAR 0 5
39012: PPUSH
39013: LD_VAR 0 6
39017: PUSH
39018: LD_VAR 0 8
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PPUSH
39027: CALL 71421 0 2
39031: ST_TO_ADDR
39032: GO 39119
// begin for j := 1 to Count ( result ) do
39034: LD_ADDR_VAR 0 7
39038: PUSH
39039: DOUBLE
39040: LD_INT 1
39042: DEC
39043: ST_TO_ADDR
39044: LD_VAR 0 5
39048: PPUSH
39049: CALL 35489 0 1
39053: PUSH
39054: FOR_TO
39055: IFFALSE 39117
// begin if tmp < result [ j ] [ 2 ] then
39057: LD_VAR 0 8
39061: PUSH
39062: LD_VAR 0 5
39066: PUSH
39067: LD_VAR 0 7
39071: ARRAY
39072: PUSH
39073: LD_INT 2
39075: ARRAY
39076: LESS
39077: IFFALSE 39115
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39079: LD_ADDR_VAR 0 5
39083: PUSH
39084: LD_VAR 0 5
39088: PPUSH
39089: LD_VAR 0 7
39093: PPUSH
39094: LD_VAR 0 6
39098: PUSH
39099: LD_VAR 0 8
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PPUSH
39108: CALL_OW 2
39112: ST_TO_ADDR
// break ;
39113: GO 39117
// end ; end ;
39115: GO 39054
39117: POP
39118: POP
// end ; end ;
39119: GO 38902
39121: POP
39122: POP
// if result and not asc then
39123: LD_VAR 0 5
39127: IFFALSE 39136
39129: PUSH
39130: LD_VAR 0 3
39134: NOT
39135: AND
39136: IFFALSE 39153
// result := ReverseArray ( result ) ;
39138: LD_ADDR_VAR 0 5
39142: PUSH
39143: LD_VAR 0 5
39147: PPUSH
39148: CALL 66511 0 1
39152: ST_TO_ADDR
// tmp := [ ] ;
39153: LD_ADDR_VAR 0 8
39157: PUSH
39158: EMPTY
39159: ST_TO_ADDR
// if mode then
39160: LD_VAR 0 4
39164: IFFALSE 39228
// begin for i := 1 to result do
39166: LD_ADDR_VAR 0 6
39170: PUSH
39171: DOUBLE
39172: LD_INT 1
39174: DEC
39175: ST_TO_ADDR
39176: LD_VAR 0 5
39180: PUSH
39181: FOR_TO
39182: IFFALSE 39216
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39184: LD_ADDR_VAR 0 8
39188: PUSH
39189: LD_VAR 0 8
39193: PPUSH
39194: LD_VAR 0 5
39198: PUSH
39199: LD_VAR 0 6
39203: ARRAY
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PPUSH
39209: CALL 71421 0 2
39213: ST_TO_ADDR
39214: GO 39181
39216: POP
39217: POP
// result := tmp ;
39218: LD_ADDR_VAR 0 5
39222: PUSH
39223: LD_VAR 0 8
39227: ST_TO_ADDR
// end ; end ;
39228: LD_VAR 0 5
39232: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39233: LD_INT 0
39235: PPUSH
39236: PPUSH
39237: PPUSH
39238: PPUSH
// if not list then
39239: LD_VAR 0 3
39243: NOT
39244: IFFALSE 39248
// exit ;
39246: GO 39638
// result := [ ] ;
39248: LD_ADDR_VAR 0 6
39252: PUSH
39253: EMPTY
39254: ST_TO_ADDR
// for i in list do
39255: LD_ADDR_VAR 0 7
39259: PUSH
39260: LD_VAR 0 3
39264: PUSH
39265: FOR_IN
39266: IFFALSE 39468
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39268: LD_ADDR_VAR 0 9
39272: PUSH
39273: LD_VAR 0 7
39277: PPUSH
39278: LD_VAR 0 1
39282: PPUSH
39283: LD_VAR 0 2
39287: PPUSH
39288: CALL_OW 297
39292: ST_TO_ADDR
// if not result then
39293: LD_VAR 0 6
39297: NOT
39298: IFFALSE 39324
// result := [ [ i , tmp ] ] else
39300: LD_ADDR_VAR 0 6
39304: PUSH
39305: LD_VAR 0 7
39309: PUSH
39310: LD_VAR 0 9
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: ST_TO_ADDR
39322: GO 39466
// begin if result [ result ] [ 2 ] <= tmp then
39324: LD_VAR 0 6
39328: PUSH
39329: LD_VAR 0 6
39333: ARRAY
39334: PUSH
39335: LD_INT 2
39337: ARRAY
39338: PUSH
39339: LD_VAR 0 9
39343: LESSEQUAL
39344: IFFALSE 39386
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39346: LD_ADDR_VAR 0 6
39350: PUSH
39351: LD_VAR 0 6
39355: PPUSH
39356: LD_VAR 0 6
39360: PUSH
39361: LD_INT 1
39363: PLUS
39364: PPUSH
39365: LD_VAR 0 7
39369: PUSH
39370: LD_VAR 0 9
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PPUSH
39379: CALL_OW 2
39383: ST_TO_ADDR
39384: GO 39466
// for j := 1 to result do
39386: LD_ADDR_VAR 0 8
39390: PUSH
39391: DOUBLE
39392: LD_INT 1
39394: DEC
39395: ST_TO_ADDR
39396: LD_VAR 0 6
39400: PUSH
39401: FOR_TO
39402: IFFALSE 39464
// begin if tmp < result [ j ] [ 2 ] then
39404: LD_VAR 0 9
39408: PUSH
39409: LD_VAR 0 6
39413: PUSH
39414: LD_VAR 0 8
39418: ARRAY
39419: PUSH
39420: LD_INT 2
39422: ARRAY
39423: LESS
39424: IFFALSE 39462
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39426: LD_ADDR_VAR 0 6
39430: PUSH
39431: LD_VAR 0 6
39435: PPUSH
39436: LD_VAR 0 8
39440: PPUSH
39441: LD_VAR 0 7
39445: PUSH
39446: LD_VAR 0 9
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PPUSH
39455: CALL_OW 2
39459: ST_TO_ADDR
// break ;
39460: GO 39464
// end ; end ;
39462: GO 39401
39464: POP
39465: POP
// end ; end ;
39466: GO 39265
39468: POP
39469: POP
// if result and not asc then
39470: LD_VAR 0 6
39474: IFFALSE 39483
39476: PUSH
39477: LD_VAR 0 4
39481: NOT
39482: AND
39483: IFFALSE 39558
// begin tmp := result ;
39485: LD_ADDR_VAR 0 9
39489: PUSH
39490: LD_VAR 0 6
39494: ST_TO_ADDR
// for i = tmp downto 1 do
39495: LD_ADDR_VAR 0 7
39499: PUSH
39500: DOUBLE
39501: LD_VAR 0 9
39505: INC
39506: ST_TO_ADDR
39507: LD_INT 1
39509: PUSH
39510: FOR_DOWNTO
39511: IFFALSE 39556
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39513: LD_ADDR_VAR 0 6
39517: PUSH
39518: LD_VAR 0 6
39522: PPUSH
39523: LD_VAR 0 9
39527: PUSH
39528: LD_VAR 0 7
39532: MINUS
39533: PUSH
39534: LD_INT 1
39536: PLUS
39537: PPUSH
39538: LD_VAR 0 9
39542: PUSH
39543: LD_VAR 0 7
39547: ARRAY
39548: PPUSH
39549: CALL_OW 1
39553: ST_TO_ADDR
39554: GO 39510
39556: POP
39557: POP
// end ; tmp := [ ] ;
39558: LD_ADDR_VAR 0 9
39562: PUSH
39563: EMPTY
39564: ST_TO_ADDR
// if mode then
39565: LD_VAR 0 5
39569: IFFALSE 39638
// begin for i = 1 to result do
39571: LD_ADDR_VAR 0 7
39575: PUSH
39576: DOUBLE
39577: LD_INT 1
39579: DEC
39580: ST_TO_ADDR
39581: LD_VAR 0 6
39585: PUSH
39586: FOR_TO
39587: IFFALSE 39626
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39589: LD_ADDR_VAR 0 9
39593: PUSH
39594: LD_VAR 0 9
39598: PPUSH
39599: LD_VAR 0 7
39603: PPUSH
39604: LD_VAR 0 6
39608: PUSH
39609: LD_VAR 0 7
39613: ARRAY
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: PPUSH
39619: CALL_OW 1
39623: ST_TO_ADDR
39624: GO 39586
39626: POP
39627: POP
// result := tmp ;
39628: LD_ADDR_VAR 0 6
39632: PUSH
39633: LD_VAR 0 9
39637: ST_TO_ADDR
// end ; end ;
39638: LD_VAR 0 6
39642: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39643: LD_INT 0
39645: PPUSH
39646: PPUSH
39647: PPUSH
39648: PPUSH
39649: PPUSH
39650: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39651: LD_ADDR_VAR 0 5
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: ST_TO_ADDR
// if not x or not y then
39673: LD_VAR 0 2
39677: NOT
39678: IFTRUE 39687
39680: PUSH
39681: LD_VAR 0 3
39685: NOT
39686: OR
39687: IFFALSE 39691
// exit ;
39689: GO 41347
// if not range then
39691: LD_VAR 0 4
39695: NOT
39696: IFFALSE 39706
// range := 10 ;
39698: LD_ADDR_VAR 0 4
39702: PUSH
39703: LD_INT 10
39705: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39706: LD_ADDR_VAR 0 8
39710: PUSH
39711: LD_INT 81
39713: PUSH
39714: LD_VAR 0 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 92
39725: PUSH
39726: LD_VAR 0 2
39730: PUSH
39731: LD_VAR 0 3
39735: PUSH
39736: LD_VAR 0 4
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 3
39749: PUSH
39750: LD_INT 21
39752: PUSH
39753: LD_INT 3
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: PPUSH
39769: CALL_OW 69
39773: ST_TO_ADDR
// if not tmp then
39774: LD_VAR 0 8
39778: NOT
39779: IFFALSE 39783
// exit ;
39781: GO 41347
// for i in tmp do
39783: LD_ADDR_VAR 0 6
39787: PUSH
39788: LD_VAR 0 8
39792: PUSH
39793: FOR_IN
39794: IFFALSE 41322
// begin points := [ 0 , 0 , 0 ] ;
39796: LD_ADDR_VAR 0 9
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: ST_TO_ADDR
// bpoints := 1 ;
39815: LD_ADDR_VAR 0 10
39819: PUSH
39820: LD_INT 1
39822: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39823: LD_VAR 0 6
39827: PPUSH
39828: CALL_OW 247
39832: PUSH
39833: LD_INT 1
39835: DOUBLE
39836: EQUAL
39837: IFTRUE 39841
39839: GO 40423
39841: POP
// begin if GetClass ( i ) = 1 then
39842: LD_VAR 0 6
39846: PPUSH
39847: CALL_OW 257
39851: PUSH
39852: LD_INT 1
39854: EQUAL
39855: IFFALSE 39876
// points := [ 10 , 5 , 3 ] ;
39857: LD_ADDR_VAR 0 9
39861: PUSH
39862: LD_INT 10
39864: PUSH
39865: LD_INT 5
39867: PUSH
39868: LD_INT 3
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39876: LD_VAR 0 6
39880: PPUSH
39881: CALL_OW 257
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: LD_INT 3
39891: PUSH
39892: LD_INT 4
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: LIST
39899: IN
39900: IFFALSE 39921
// points := [ 3 , 2 , 1 ] ;
39902: LD_ADDR_VAR 0 9
39906: PUSH
39907: LD_INT 3
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: LIST
39920: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39921: LD_VAR 0 6
39925: PPUSH
39926: CALL_OW 257
39930: PUSH
39931: LD_INT 5
39933: EQUAL
39934: IFFALSE 39955
// points := [ 130 , 5 , 2 ] ;
39936: LD_ADDR_VAR 0 9
39940: PUSH
39941: LD_INT 130
39943: PUSH
39944: LD_INT 5
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39955: LD_VAR 0 6
39959: PPUSH
39960: CALL_OW 257
39964: PUSH
39965: LD_INT 8
39967: EQUAL
39968: IFFALSE 39989
// points := [ 35 , 35 , 30 ] ;
39970: LD_ADDR_VAR 0 9
39974: PUSH
39975: LD_INT 35
39977: PUSH
39978: LD_INT 35
39980: PUSH
39981: LD_INT 30
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39989: LD_VAR 0 6
39993: PPUSH
39994: CALL_OW 257
39998: PUSH
39999: LD_INT 9
40001: EQUAL
40002: IFFALSE 40023
// points := [ 20 , 55 , 40 ] ;
40004: LD_ADDR_VAR 0 9
40008: PUSH
40009: LD_INT 20
40011: PUSH
40012: LD_INT 55
40014: PUSH
40015: LD_INT 40
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: LIST
40022: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40023: LD_VAR 0 6
40027: PPUSH
40028: CALL_OW 257
40032: PUSH
40033: LD_INT 12
40035: PUSH
40036: LD_INT 16
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: IN
40043: IFFALSE 40064
// points := [ 5 , 3 , 2 ] ;
40045: LD_ADDR_VAR 0 9
40049: PUSH
40050: LD_INT 5
40052: PUSH
40053: LD_INT 3
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40064: LD_VAR 0 6
40068: PPUSH
40069: CALL_OW 257
40073: PUSH
40074: LD_INT 17
40076: EQUAL
40077: IFFALSE 40098
// points := [ 100 , 50 , 75 ] ;
40079: LD_ADDR_VAR 0 9
40083: PUSH
40084: LD_INT 100
40086: PUSH
40087: LD_INT 50
40089: PUSH
40090: LD_INT 75
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40098: LD_VAR 0 6
40102: PPUSH
40103: CALL_OW 257
40107: PUSH
40108: LD_INT 15
40110: EQUAL
40111: IFFALSE 40132
// points := [ 10 , 5 , 3 ] ;
40113: LD_ADDR_VAR 0 9
40117: PUSH
40118: LD_INT 10
40120: PUSH
40121: LD_INT 5
40123: PUSH
40124: LD_INT 3
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: LIST
40131: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40132: LD_VAR 0 6
40136: PPUSH
40137: CALL_OW 257
40141: PUSH
40142: LD_INT 14
40144: EQUAL
40145: IFFALSE 40166
// points := [ 10 , 0 , 0 ] ;
40147: LD_ADDR_VAR 0 9
40151: PUSH
40152: LD_INT 10
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40166: LD_VAR 0 6
40170: PPUSH
40171: CALL_OW 257
40175: PUSH
40176: LD_INT 11
40178: EQUAL
40179: IFFALSE 40200
// points := [ 30 , 10 , 5 ] ;
40181: LD_ADDR_VAR 0 9
40185: PUSH
40186: LD_INT 30
40188: PUSH
40189: LD_INT 10
40191: PUSH
40192: LD_INT 5
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40200: LD_VAR 0 1
40204: PPUSH
40205: LD_INT 5
40207: PPUSH
40208: CALL_OW 321
40212: PUSH
40213: LD_INT 2
40215: EQUAL
40216: IFFALSE 40233
// bpoints := bpoints * 1.8 ;
40218: LD_ADDR_VAR 0 10
40222: PUSH
40223: LD_VAR 0 10
40227: PUSH
40228: LD_REAL  1.80000000000000E+0000
40231: MUL
40232: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40233: LD_VAR 0 6
40237: PPUSH
40238: CALL_OW 257
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: LD_INT 3
40251: PUSH
40252: LD_INT 4
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: IN
40261: IFFALSE 40281
40263: PUSH
40264: LD_VAR 0 1
40268: PPUSH
40269: LD_INT 51
40271: PPUSH
40272: CALL_OW 321
40276: PUSH
40277: LD_INT 2
40279: EQUAL
40280: AND
40281: IFFALSE 40298
// bpoints := bpoints * 1.2 ;
40283: LD_ADDR_VAR 0 10
40287: PUSH
40288: LD_VAR 0 10
40292: PUSH
40293: LD_REAL  1.20000000000000E+0000
40296: MUL
40297: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40298: LD_VAR 0 6
40302: PPUSH
40303: CALL_OW 257
40307: PUSH
40308: LD_INT 5
40310: PUSH
40311: LD_INT 7
40313: PUSH
40314: LD_INT 9
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: IN
40322: IFFALSE 40342
40324: PUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: LD_INT 52
40332: PPUSH
40333: CALL_OW 321
40337: PUSH
40338: LD_INT 2
40340: EQUAL
40341: AND
40342: IFFALSE 40359
// bpoints := bpoints * 1.5 ;
40344: LD_ADDR_VAR 0 10
40348: PUSH
40349: LD_VAR 0 10
40353: PUSH
40354: LD_REAL  1.50000000000000E+0000
40357: MUL
40358: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40359: LD_VAR 0 1
40363: PPUSH
40364: LD_INT 66
40366: PPUSH
40367: CALL_OW 321
40371: PUSH
40372: LD_INT 2
40374: EQUAL
40375: IFFALSE 40392
// bpoints := bpoints * 1.1 ;
40377: LD_ADDR_VAR 0 10
40381: PUSH
40382: LD_VAR 0 10
40386: PUSH
40387: LD_REAL  1.10000000000000E+0000
40390: MUL
40391: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40392: LD_ADDR_VAR 0 10
40396: PUSH
40397: LD_VAR 0 10
40401: PUSH
40402: LD_VAR 0 6
40406: PPUSH
40407: LD_INT 1
40409: PPUSH
40410: CALL_OW 259
40414: PUSH
40415: LD_REAL  1.15000000000000E+0000
40418: MUL
40419: MUL
40420: ST_TO_ADDR
// end ; unit_vehicle :
40421: GO 41251
40423: LD_INT 2
40425: DOUBLE
40426: EQUAL
40427: IFTRUE 40431
40429: GO 41239
40431: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40432: LD_VAR 0 6
40436: PPUSH
40437: CALL_OW 264
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: LD_INT 42
40447: PUSH
40448: LD_INT 24
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: LIST
40455: IN
40456: IFFALSE 40477
// points := [ 25 , 5 , 3 ] ;
40458: LD_ADDR_VAR 0 9
40462: PUSH
40463: LD_INT 25
40465: PUSH
40466: LD_INT 5
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: LIST
40476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40477: LD_VAR 0 6
40481: PPUSH
40482: CALL_OW 264
40486: PUSH
40487: LD_INT 4
40489: PUSH
40490: LD_INT 43
40492: PUSH
40493: LD_INT 25
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: LIST
40500: IN
40501: IFFALSE 40522
// points := [ 40 , 15 , 5 ] ;
40503: LD_ADDR_VAR 0 9
40507: PUSH
40508: LD_INT 40
40510: PUSH
40511: LD_INT 15
40513: PUSH
40514: LD_INT 5
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40522: LD_VAR 0 6
40526: PPUSH
40527: CALL_OW 264
40531: PUSH
40532: LD_INT 3
40534: PUSH
40535: LD_INT 23
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: IN
40542: IFFALSE 40563
// points := [ 7 , 25 , 8 ] ;
40544: LD_ADDR_VAR 0 9
40548: PUSH
40549: LD_INT 7
40551: PUSH
40552: LD_INT 25
40554: PUSH
40555: LD_INT 8
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40563: LD_VAR 0 6
40567: PPUSH
40568: CALL_OW 264
40572: PUSH
40573: LD_INT 5
40575: PUSH
40576: LD_INT 27
40578: PUSH
40579: LD_INT 44
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: IN
40587: IFFALSE 40608
// points := [ 14 , 50 , 16 ] ;
40589: LD_ADDR_VAR 0 9
40593: PUSH
40594: LD_INT 14
40596: PUSH
40597: LD_INT 50
40599: PUSH
40600: LD_INT 16
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40608: LD_VAR 0 6
40612: PPUSH
40613: CALL_OW 264
40617: PUSH
40618: LD_INT 6
40620: PUSH
40621: LD_INT 46
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: IN
40628: IFFALSE 40649
// points := [ 32 , 120 , 70 ] ;
40630: LD_ADDR_VAR 0 9
40634: PUSH
40635: LD_INT 32
40637: PUSH
40638: LD_INT 120
40640: PUSH
40641: LD_INT 70
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40649: LD_VAR 0 6
40653: PPUSH
40654: CALL_OW 264
40658: PUSH
40659: LD_INT 7
40661: PUSH
40662: LD_INT 28
40664: PUSH
40665: LD_INT 45
40667: PUSH
40668: LD_INT 92
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: IN
40677: IFFALSE 40698
// points := [ 35 , 20 , 45 ] ;
40679: LD_ADDR_VAR 0 9
40683: PUSH
40684: LD_INT 35
40686: PUSH
40687: LD_INT 20
40689: PUSH
40690: LD_INT 45
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40698: LD_VAR 0 6
40702: PPUSH
40703: CALL_OW 264
40707: PUSH
40708: LD_INT 47
40710: PUSH
40711: EMPTY
40712: LIST
40713: IN
40714: IFFALSE 40735
// points := [ 67 , 45 , 75 ] ;
40716: LD_ADDR_VAR 0 9
40720: PUSH
40721: LD_INT 67
40723: PUSH
40724: LD_INT 45
40726: PUSH
40727: LD_INT 75
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: LIST
40734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40735: LD_VAR 0 6
40739: PPUSH
40740: CALL_OW 264
40744: PUSH
40745: LD_INT 26
40747: PUSH
40748: EMPTY
40749: LIST
40750: IN
40751: IFFALSE 40772
// points := [ 120 , 30 , 80 ] ;
40753: LD_ADDR_VAR 0 9
40757: PUSH
40758: LD_INT 120
40760: PUSH
40761: LD_INT 30
40763: PUSH
40764: LD_INT 80
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: LIST
40771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40772: LD_VAR 0 6
40776: PPUSH
40777: CALL_OW 264
40781: PUSH
40782: LD_INT 22
40784: PUSH
40785: EMPTY
40786: LIST
40787: IN
40788: IFFALSE 40809
// points := [ 40 , 1 , 1 ] ;
40790: LD_ADDR_VAR 0 9
40794: PUSH
40795: LD_INT 40
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40809: LD_VAR 0 6
40813: PPUSH
40814: CALL_OW 264
40818: PUSH
40819: LD_INT 29
40821: PUSH
40822: EMPTY
40823: LIST
40824: IN
40825: IFFALSE 40846
// points := [ 70 , 200 , 400 ] ;
40827: LD_ADDR_VAR 0 9
40831: PUSH
40832: LD_INT 70
40834: PUSH
40835: LD_INT 200
40837: PUSH
40838: LD_INT 400
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: LIST
40845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40846: LD_VAR 0 6
40850: PPUSH
40851: CALL_OW 264
40855: PUSH
40856: LD_INT 14
40858: PUSH
40859: LD_INT 53
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: IN
40866: IFFALSE 40887
// points := [ 40 , 10 , 20 ] ;
40868: LD_ADDR_VAR 0 9
40872: PUSH
40873: LD_INT 40
40875: PUSH
40876: LD_INT 10
40878: PUSH
40879: LD_INT 20
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40887: LD_VAR 0 6
40891: PPUSH
40892: CALL_OW 264
40896: PUSH
40897: LD_INT 9
40899: PUSH
40900: EMPTY
40901: LIST
40902: IN
40903: IFFALSE 40924
// points := [ 5 , 70 , 20 ] ;
40905: LD_ADDR_VAR 0 9
40909: PUSH
40910: LD_INT 5
40912: PUSH
40913: LD_INT 70
40915: PUSH
40916: LD_INT 20
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40924: LD_VAR 0 6
40928: PPUSH
40929: CALL_OW 264
40933: PUSH
40934: LD_INT 10
40936: PUSH
40937: EMPTY
40938: LIST
40939: IN
40940: IFFALSE 40961
// points := [ 35 , 110 , 70 ] ;
40942: LD_ADDR_VAR 0 9
40946: PUSH
40947: LD_INT 35
40949: PUSH
40950: LD_INT 110
40952: PUSH
40953: LD_INT 70
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: LIST
40960: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40961: LD_VAR 0 6
40965: PPUSH
40966: CALL_OW 265
40970: PUSH
40971: LD_INT 25
40973: EQUAL
40974: IFFALSE 40995
// points := [ 80 , 65 , 100 ] ;
40976: LD_ADDR_VAR 0 9
40980: PUSH
40981: LD_INT 80
40983: PUSH
40984: LD_INT 65
40986: PUSH
40987: LD_INT 100
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: LIST
40994: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40995: LD_VAR 0 6
40999: PPUSH
41000: CALL_OW 263
41004: PUSH
41005: LD_INT 1
41007: EQUAL
41008: IFFALSE 41043
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41010: LD_ADDR_VAR 0 10
41014: PUSH
41015: LD_VAR 0 10
41019: PUSH
41020: LD_VAR 0 6
41024: PPUSH
41025: CALL_OW 311
41029: PPUSH
41030: LD_INT 3
41032: PPUSH
41033: CALL_OW 259
41037: PUSH
41038: LD_INT 4
41040: MUL
41041: MUL
41042: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41043: LD_VAR 0 6
41047: PPUSH
41048: CALL_OW 263
41052: PUSH
41053: LD_INT 2
41055: EQUAL
41056: IFFALSE 41107
// begin j := IsControledBy ( i ) ;
41058: LD_ADDR_VAR 0 7
41062: PUSH
41063: LD_VAR 0 6
41067: PPUSH
41068: CALL_OW 312
41072: ST_TO_ADDR
// if j then
41073: LD_VAR 0 7
41077: IFFALSE 41107
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41079: LD_ADDR_VAR 0 10
41083: PUSH
41084: LD_VAR 0 10
41088: PUSH
41089: LD_VAR 0 7
41093: PPUSH
41094: LD_INT 3
41096: PPUSH
41097: CALL_OW 259
41101: PUSH
41102: LD_INT 3
41104: MUL
41105: MUL
41106: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41107: LD_VAR 0 6
41111: PPUSH
41112: CALL_OW 264
41116: PUSH
41117: LD_INT 5
41119: PUSH
41120: LD_INT 6
41122: PUSH
41123: LD_INT 46
41125: PUSH
41126: LD_INT 44
41128: PUSH
41129: LD_INT 47
41131: PUSH
41132: LD_INT 45
41134: PUSH
41135: LD_INT 28
41137: PUSH
41138: LD_INT 7
41140: PUSH
41141: LD_INT 27
41143: PUSH
41144: LD_INT 29
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: IN
41159: IFFALSE 41179
41161: PUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: LD_INT 52
41169: PPUSH
41170: CALL_OW 321
41174: PUSH
41175: LD_INT 2
41177: EQUAL
41178: AND
41179: IFFALSE 41196
// bpoints := bpoints * 1.2 ;
41181: LD_ADDR_VAR 0 10
41185: PUSH
41186: LD_VAR 0 10
41190: PUSH
41191: LD_REAL  1.20000000000000E+0000
41194: MUL
41195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41196: LD_VAR 0 6
41200: PPUSH
41201: CALL_OW 264
41205: PUSH
41206: LD_INT 6
41208: PUSH
41209: LD_INT 46
41211: PUSH
41212: LD_INT 47
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: LIST
41219: IN
41220: IFFALSE 41237
// bpoints := bpoints * 1.2 ;
41222: LD_ADDR_VAR 0 10
41226: PUSH
41227: LD_VAR 0 10
41231: PUSH
41232: LD_REAL  1.20000000000000E+0000
41235: MUL
41236: ST_TO_ADDR
// end ; unit_building :
41237: GO 41251
41239: LD_INT 3
41241: DOUBLE
41242: EQUAL
41243: IFTRUE 41247
41245: GO 41250
41247: POP
// ; end ;
41248: GO 41251
41250: POP
// for j = 1 to 3 do
41251: LD_ADDR_VAR 0 7
41255: PUSH
41256: DOUBLE
41257: LD_INT 1
41259: DEC
41260: ST_TO_ADDR
41261: LD_INT 3
41263: PUSH
41264: FOR_TO
41265: IFFALSE 41318
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41267: LD_ADDR_VAR 0 5
41271: PUSH
41272: LD_VAR 0 5
41276: PPUSH
41277: LD_VAR 0 7
41281: PPUSH
41282: LD_VAR 0 5
41286: PUSH
41287: LD_VAR 0 7
41291: ARRAY
41292: PUSH
41293: LD_VAR 0 9
41297: PUSH
41298: LD_VAR 0 7
41302: ARRAY
41303: PUSH
41304: LD_VAR 0 10
41308: MUL
41309: PLUS
41310: PPUSH
41311: CALL_OW 1
41315: ST_TO_ADDR
41316: GO 41264
41318: POP
41319: POP
// end ;
41320: GO 39793
41322: POP
41323: POP
// result := Replace ( result , 4 , tmp ) ;
41324: LD_ADDR_VAR 0 5
41328: PUSH
41329: LD_VAR 0 5
41333: PPUSH
41334: LD_INT 4
41336: PPUSH
41337: LD_VAR 0 8
41341: PPUSH
41342: CALL_OW 1
41346: ST_TO_ADDR
// end ;
41347: LD_VAR 0 5
41351: RET
// export function DangerAtRange ( unit , range ) ; begin
41352: LD_INT 0
41354: PPUSH
// if not unit then
41355: LD_VAR 0 1
41359: NOT
41360: IFFALSE 41364
// exit ;
41362: GO 41409
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41364: LD_ADDR_VAR 0 3
41368: PUSH
41369: LD_VAR 0 1
41373: PPUSH
41374: CALL_OW 255
41378: PPUSH
41379: LD_VAR 0 1
41383: PPUSH
41384: CALL_OW 250
41388: PPUSH
41389: LD_VAR 0 1
41393: PPUSH
41394: CALL_OW 251
41398: PPUSH
41399: LD_VAR 0 2
41403: PPUSH
41404: CALL 39643 0 4
41408: ST_TO_ADDR
// end ;
41409: LD_VAR 0 3
41413: RET
// export function DangerInArea ( side , area ) ; begin
41414: LD_INT 0
41416: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41417: LD_ADDR_VAR 0 3
41421: PUSH
41422: LD_VAR 0 2
41426: PPUSH
41427: LD_INT 81
41429: PUSH
41430: LD_VAR 0 1
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PPUSH
41439: CALL_OW 70
41443: ST_TO_ADDR
// end ;
41444: LD_VAR 0 3
41448: RET
// export function IsExtension ( b ) ; begin
41449: LD_INT 0
41451: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41452: LD_ADDR_VAR 0 2
41456: PUSH
41457: LD_VAR 0 1
41461: PUSH
41462: LD_INT 23
41464: PUSH
41465: LD_INT 20
41467: PUSH
41468: LD_INT 22
41470: PUSH
41471: LD_INT 17
41473: PUSH
41474: LD_INT 24
41476: PUSH
41477: LD_INT 21
41479: PUSH
41480: LD_INT 19
41482: PUSH
41483: LD_INT 16
41485: PUSH
41486: LD_INT 25
41488: PUSH
41489: LD_INT 18
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: IN
41504: ST_TO_ADDR
// end ;
41505: LD_VAR 0 2
41509: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41510: LD_INT 0
41512: PPUSH
41513: PPUSH
41514: PPUSH
// result := [ ] ;
41515: LD_ADDR_VAR 0 4
41519: PUSH
41520: EMPTY
41521: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41522: LD_ADDR_VAR 0 5
41526: PUSH
41527: LD_VAR 0 2
41531: PPUSH
41532: LD_INT 21
41534: PUSH
41535: LD_INT 3
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PPUSH
41542: CALL_OW 70
41546: ST_TO_ADDR
// if not tmp then
41547: LD_VAR 0 5
41551: NOT
41552: IFFALSE 41556
// exit ;
41554: GO 41620
// if checkLink then
41556: LD_VAR 0 3
41560: IFFALSE 41610
// begin for i in tmp do
41562: LD_ADDR_VAR 0 6
41566: PUSH
41567: LD_VAR 0 5
41571: PUSH
41572: FOR_IN
41573: IFFALSE 41608
// if GetBase ( i ) <> base then
41575: LD_VAR 0 6
41579: PPUSH
41580: CALL_OW 274
41584: PUSH
41585: LD_VAR 0 1
41589: NONEQUAL
41590: IFFALSE 41606
// ComLinkToBase ( base , i ) ;
41592: LD_VAR 0 1
41596: PPUSH
41597: LD_VAR 0 6
41601: PPUSH
41602: CALL_OW 169
41606: GO 41572
41608: POP
41609: POP
// end ; result := tmp ;
41610: LD_ADDR_VAR 0 4
41614: PUSH
41615: LD_VAR 0 5
41619: ST_TO_ADDR
// end ;
41620: LD_VAR 0 4
41624: RET
// export function ComComplete ( units , b ) ; var i ; begin
41625: LD_INT 0
41627: PPUSH
41628: PPUSH
// if not units then
41629: LD_VAR 0 1
41633: NOT
41634: IFFALSE 41638
// exit ;
41636: GO 41728
// for i in units do
41638: LD_ADDR_VAR 0 4
41642: PUSH
41643: LD_VAR 0 1
41647: PUSH
41648: FOR_IN
41649: IFFALSE 41726
// if BuildingStatus ( b ) = bs_build then
41651: LD_VAR 0 2
41655: PPUSH
41656: CALL_OW 461
41660: PUSH
41661: LD_INT 1
41663: EQUAL
41664: IFFALSE 41724
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41666: LD_VAR 0 4
41670: PPUSH
41671: LD_STRING h
41673: PUSH
41674: LD_VAR 0 2
41678: PPUSH
41679: CALL_OW 250
41683: PUSH
41684: LD_VAR 0 2
41688: PPUSH
41689: CALL_OW 251
41693: PUSH
41694: LD_VAR 0 2
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: PUSH
41717: EMPTY
41718: LIST
41719: PPUSH
41720: CALL_OW 446
41724: GO 41648
41726: POP
41727: POP
// end ;
41728: LD_VAR 0 3
41732: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41733: LD_INT 0
41735: PPUSH
41736: PPUSH
41737: PPUSH
41738: PPUSH
41739: PPUSH
41740: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41741: LD_VAR 0 1
41745: NOT
41746: IFTRUE 41763
41748: PUSH
41749: LD_VAR 0 1
41753: PPUSH
41754: CALL_OW 263
41758: PUSH
41759: LD_INT 2
41761: NONEQUAL
41762: OR
41763: IFFALSE 41767
// exit ;
41765: GO 42083
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41767: LD_ADDR_VAR 0 6
41771: PUSH
41772: LD_INT 22
41774: PUSH
41775: LD_VAR 0 1
41779: PPUSH
41780: CALL_OW 255
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 30
41794: PUSH
41795: LD_INT 36
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 34
41804: PUSH
41805: LD_INT 31
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PPUSH
41821: CALL_OW 69
41825: ST_TO_ADDR
// if not tmp then
41826: LD_VAR 0 6
41830: NOT
41831: IFFALSE 41835
// exit ;
41833: GO 42083
// result := [ ] ;
41835: LD_ADDR_VAR 0 2
41839: PUSH
41840: EMPTY
41841: ST_TO_ADDR
// for i in tmp do
41842: LD_ADDR_VAR 0 3
41846: PUSH
41847: LD_VAR 0 6
41851: PUSH
41852: FOR_IN
41853: IFFALSE 41924
// begin t := UnitsInside ( i ) ;
41855: LD_ADDR_VAR 0 4
41859: PUSH
41860: LD_VAR 0 3
41864: PPUSH
41865: CALL_OW 313
41869: ST_TO_ADDR
// if t then
41870: LD_VAR 0 4
41874: IFFALSE 41922
// for j in t do
41876: LD_ADDR_VAR 0 7
41880: PUSH
41881: LD_VAR 0 4
41885: PUSH
41886: FOR_IN
41887: IFFALSE 41920
// result := Replace ( result , result + 1 , j ) ;
41889: LD_ADDR_VAR 0 2
41893: PUSH
41894: LD_VAR 0 2
41898: PPUSH
41899: LD_VAR 0 2
41903: PUSH
41904: LD_INT 1
41906: PLUS
41907: PPUSH
41908: LD_VAR 0 7
41912: PPUSH
41913: CALL_OW 1
41917: ST_TO_ADDR
41918: GO 41886
41920: POP
41921: POP
// end ;
41922: GO 41852
41924: POP
41925: POP
// if not result then
41926: LD_VAR 0 2
41930: NOT
41931: IFFALSE 41935
// exit ;
41933: GO 42083
// mech := result [ 1 ] ;
41935: LD_ADDR_VAR 0 5
41939: PUSH
41940: LD_VAR 0 2
41944: PUSH
41945: LD_INT 1
41947: ARRAY
41948: ST_TO_ADDR
// if result > 1 then
41949: LD_VAR 0 2
41953: PUSH
41954: LD_INT 1
41956: GREATER
41957: IFFALSE 42069
// begin for i = 2 to result do
41959: LD_ADDR_VAR 0 3
41963: PUSH
41964: DOUBLE
41965: LD_INT 2
41967: DEC
41968: ST_TO_ADDR
41969: LD_VAR 0 2
41973: PUSH
41974: FOR_TO
41975: IFFALSE 42067
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41977: LD_ADDR_VAR 0 4
41981: PUSH
41982: LD_VAR 0 2
41986: PUSH
41987: LD_VAR 0 3
41991: ARRAY
41992: PPUSH
41993: LD_INT 3
41995: PPUSH
41996: CALL_OW 259
42000: PUSH
42001: LD_VAR 0 2
42005: PUSH
42006: LD_VAR 0 3
42010: ARRAY
42011: PPUSH
42012: CALL_OW 432
42016: MINUS
42017: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42018: LD_VAR 0 4
42022: PUSH
42023: LD_VAR 0 5
42027: PPUSH
42028: LD_INT 3
42030: PPUSH
42031: CALL_OW 259
42035: PUSH
42036: LD_VAR 0 5
42040: PPUSH
42041: CALL_OW 432
42045: MINUS
42046: GREATEREQUAL
42047: IFFALSE 42065
// mech := result [ i ] ;
42049: LD_ADDR_VAR 0 5
42053: PUSH
42054: LD_VAR 0 2
42058: PUSH
42059: LD_VAR 0 3
42063: ARRAY
42064: ST_TO_ADDR
// end ;
42065: GO 41974
42067: POP
42068: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42069: LD_VAR 0 1
42073: PPUSH
42074: LD_VAR 0 5
42078: PPUSH
42079: CALL_OW 135
// end ;
42083: LD_VAR 0 2
42087: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42088: LD_INT 0
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
// result := [ ] ;
42103: LD_ADDR_VAR 0 7
42107: PUSH
42108: EMPTY
42109: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42110: LD_VAR 0 1
42114: PPUSH
42115: CALL_OW 266
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: IN
42130: NOT
42131: IFFALSE 42135
// exit ;
42133: GO 43775
// if name then
42135: LD_VAR 0 3
42139: IFFALSE 42155
// SetBName ( base_dep , name ) ;
42141: LD_VAR 0 1
42145: PPUSH
42146: LD_VAR 0 3
42150: PPUSH
42151: CALL_OW 500
// base := GetBase ( base_dep ) ;
42155: LD_ADDR_VAR 0 15
42159: PUSH
42160: LD_VAR 0 1
42164: PPUSH
42165: CALL_OW 274
42169: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42170: LD_ADDR_VAR 0 16
42174: PUSH
42175: LD_VAR 0 1
42179: PPUSH
42180: CALL_OW 255
42184: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42185: LD_ADDR_VAR 0 17
42189: PUSH
42190: LD_VAR 0 1
42194: PPUSH
42195: CALL_OW 248
42199: ST_TO_ADDR
// if sources then
42200: LD_VAR 0 5
42204: IFFALSE 42251
// for i = 1 to 3 do
42206: LD_ADDR_VAR 0 8
42210: PUSH
42211: DOUBLE
42212: LD_INT 1
42214: DEC
42215: ST_TO_ADDR
42216: LD_INT 3
42218: PUSH
42219: FOR_TO
42220: IFFALSE 42249
// AddResourceType ( base , i , sources [ i ] ) ;
42222: LD_VAR 0 15
42226: PPUSH
42227: LD_VAR 0 8
42231: PPUSH
42232: LD_VAR 0 5
42236: PUSH
42237: LD_VAR 0 8
42241: ARRAY
42242: PPUSH
42243: CALL_OW 276
42247: GO 42219
42249: POP
42250: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42251: LD_ADDR_VAR 0 18
42255: PUSH
42256: LD_VAR 0 15
42260: PPUSH
42261: LD_VAR 0 2
42265: PPUSH
42266: LD_INT 1
42268: PPUSH
42269: CALL 41510 0 3
42273: ST_TO_ADDR
// InitHc ;
42274: CALL_OW 19
// InitUc ;
42278: CALL_OW 18
// uc_side := side ;
42282: LD_ADDR_OWVAR 20
42286: PUSH
42287: LD_VAR 0 16
42291: ST_TO_ADDR
// uc_nation := nation ;
42292: LD_ADDR_OWVAR 21
42296: PUSH
42297: LD_VAR 0 17
42301: ST_TO_ADDR
// if buildings then
42302: LD_VAR 0 18
42306: IFFALSE 43634
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42308: LD_ADDR_VAR 0 19
42312: PUSH
42313: LD_VAR 0 18
42317: PPUSH
42318: LD_INT 2
42320: PUSH
42321: LD_INT 30
42323: PUSH
42324: LD_INT 29
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 30
42333: PUSH
42334: LD_INT 30
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: PPUSH
42346: CALL_OW 72
42350: ST_TO_ADDR
// if tmp then
42351: LD_VAR 0 19
42355: IFFALSE 42403
// for i in tmp do
42357: LD_ADDR_VAR 0 8
42361: PUSH
42362: LD_VAR 0 19
42366: PUSH
42367: FOR_IN
42368: IFFALSE 42401
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42370: LD_VAR 0 8
42374: PPUSH
42375: CALL_OW 250
42379: PPUSH
42380: LD_VAR 0 8
42384: PPUSH
42385: CALL_OW 251
42389: PPUSH
42390: LD_VAR 0 16
42394: PPUSH
42395: CALL_OW 441
42399: GO 42367
42401: POP
42402: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42403: LD_VAR 0 18
42407: PPUSH
42408: LD_INT 2
42410: PUSH
42411: LD_INT 30
42413: PUSH
42414: LD_INT 32
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 30
42423: PUSH
42424: LD_INT 33
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: PPUSH
42436: CALL_OW 72
42440: IFFALSE 42528
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42442: LD_ADDR_VAR 0 8
42446: PUSH
42447: LD_VAR 0 18
42451: PPUSH
42452: LD_INT 2
42454: PUSH
42455: LD_INT 30
42457: PUSH
42458: LD_INT 32
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 30
42467: PUSH
42468: LD_INT 33
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: PPUSH
42480: CALL_OW 72
42484: PUSH
42485: FOR_IN
42486: IFFALSE 42526
// begin if not GetBWeapon ( i ) then
42488: LD_VAR 0 8
42492: PPUSH
42493: CALL_OW 269
42497: NOT
42498: IFFALSE 42524
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42500: LD_VAR 0 8
42504: PPUSH
42505: LD_VAR 0 8
42509: PPUSH
42510: LD_VAR 0 2
42514: PPUSH
42515: CALL 43780 0 2
42519: PPUSH
42520: CALL_OW 431
// end ;
42524: GO 42485
42526: POP
42527: POP
// end ; for i = 1 to personel do
42528: LD_ADDR_VAR 0 8
42532: PUSH
42533: DOUBLE
42534: LD_INT 1
42536: DEC
42537: ST_TO_ADDR
42538: LD_VAR 0 6
42542: PUSH
42543: FOR_TO
42544: IFFALSE 43614
// begin if i > 4 then
42546: LD_VAR 0 8
42550: PUSH
42551: LD_INT 4
42553: GREATER
42554: IFFALSE 42558
// break ;
42556: GO 43614
// case i of 1 :
42558: LD_VAR 0 8
42562: PUSH
42563: LD_INT 1
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42571
42569: GO 42651
42571: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42572: LD_ADDR_VAR 0 12
42576: PUSH
42577: LD_VAR 0 18
42581: PPUSH
42582: LD_INT 22
42584: PUSH
42585: LD_VAR 0 16
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 58
42596: PUSH
42597: EMPTY
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 30
42605: PUSH
42606: LD_INT 32
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 30
42615: PUSH
42616: LD_INT 4
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 30
42625: PUSH
42626: LD_INT 5
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: PPUSH
42644: CALL_OW 72
42648: ST_TO_ADDR
42649: GO 42873
42651: LD_INT 2
42653: DOUBLE
42654: EQUAL
42655: IFTRUE 42659
42657: GO 42721
42659: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42660: LD_ADDR_VAR 0 12
42664: PUSH
42665: LD_VAR 0 18
42669: PPUSH
42670: LD_INT 22
42672: PUSH
42673: LD_VAR 0 16
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 30
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 30
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PPUSH
42714: CALL_OW 72
42718: ST_TO_ADDR
42719: GO 42873
42721: LD_INT 3
42723: DOUBLE
42724: EQUAL
42725: IFTRUE 42729
42727: GO 42791
42729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42730: LD_ADDR_VAR 0 12
42734: PUSH
42735: LD_VAR 0 18
42739: PPUSH
42740: LD_INT 22
42742: PUSH
42743: LD_VAR 0 16
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 30
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 30
42767: PUSH
42768: LD_INT 3
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PPUSH
42784: CALL_OW 72
42788: ST_TO_ADDR
42789: GO 42873
42791: LD_INT 4
42793: DOUBLE
42794: EQUAL
42795: IFTRUE 42799
42797: GO 42872
42799: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42800: LD_ADDR_VAR 0 12
42804: PUSH
42805: LD_VAR 0 18
42809: PPUSH
42810: LD_INT 22
42812: PUSH
42813: LD_VAR 0 16
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: LD_INT 30
42827: PUSH
42828: LD_INT 6
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 30
42837: PUSH
42838: LD_INT 7
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 30
42847: PUSH
42848: LD_INT 8
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PPUSH
42865: CALL_OW 72
42869: ST_TO_ADDR
42870: GO 42873
42872: POP
// if i = 1 then
42873: LD_VAR 0 8
42877: PUSH
42878: LD_INT 1
42880: EQUAL
42881: IFFALSE 42992
// begin tmp := [ ] ;
42883: LD_ADDR_VAR 0 19
42887: PUSH
42888: EMPTY
42889: ST_TO_ADDR
// for j in f do
42890: LD_ADDR_VAR 0 9
42894: PUSH
42895: LD_VAR 0 12
42899: PUSH
42900: FOR_IN
42901: IFFALSE 42974
// if GetBType ( j ) = b_bunker then
42903: LD_VAR 0 9
42907: PPUSH
42908: CALL_OW 266
42912: PUSH
42913: LD_INT 32
42915: EQUAL
42916: IFFALSE 42943
// tmp := Insert ( tmp , 1 , j ) else
42918: LD_ADDR_VAR 0 19
42922: PUSH
42923: LD_VAR 0 19
42927: PPUSH
42928: LD_INT 1
42930: PPUSH
42931: LD_VAR 0 9
42935: PPUSH
42936: CALL_OW 2
42940: ST_TO_ADDR
42941: GO 42972
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42943: LD_ADDR_VAR 0 19
42947: PUSH
42948: LD_VAR 0 19
42952: PPUSH
42953: LD_VAR 0 19
42957: PUSH
42958: LD_INT 1
42960: PLUS
42961: PPUSH
42962: LD_VAR 0 9
42966: PPUSH
42967: CALL_OW 2
42971: ST_TO_ADDR
42972: GO 42900
42974: POP
42975: POP
// if tmp then
42976: LD_VAR 0 19
42980: IFFALSE 42992
// f := tmp ;
42982: LD_ADDR_VAR 0 12
42986: PUSH
42987: LD_VAR 0 19
42991: ST_TO_ADDR
// end ; x := personel [ i ] ;
42992: LD_ADDR_VAR 0 13
42996: PUSH
42997: LD_VAR 0 6
43001: PUSH
43002: LD_VAR 0 8
43006: ARRAY
43007: ST_TO_ADDR
// if x = - 1 then
43008: LD_VAR 0 13
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: EQUAL
43017: IFFALSE 43228
// begin for j in f do
43019: LD_ADDR_VAR 0 9
43023: PUSH
43024: LD_VAR 0 12
43028: PUSH
43029: FOR_IN
43030: IFFALSE 43224
// repeat InitHc ;
43032: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43036: LD_VAR 0 9
43040: PPUSH
43041: CALL_OW 266
43045: PUSH
43046: LD_INT 5
43048: EQUAL
43049: IFFALSE 43119
// begin if UnitsInside ( j ) < 3 then
43051: LD_VAR 0 9
43055: PPUSH
43056: CALL_OW 313
43060: PUSH
43061: LD_INT 3
43063: LESS
43064: IFFALSE 43100
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43066: LD_INT 0
43068: PPUSH
43069: LD_INT 5
43071: PUSH
43072: LD_INT 8
43074: PUSH
43075: LD_INT 9
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: PUSH
43083: LD_VAR 0 17
43087: ARRAY
43088: PPUSH
43089: LD_VAR 0 4
43093: PPUSH
43094: CALL_OW 380
43098: GO 43117
// PrepareHuman ( false , i , skill ) ;
43100: LD_INT 0
43102: PPUSH
43103: LD_VAR 0 8
43107: PPUSH
43108: LD_VAR 0 4
43112: PPUSH
43113: CALL_OW 380
// end else
43117: GO 43136
// PrepareHuman ( false , i , skill ) ;
43119: LD_INT 0
43121: PPUSH
43122: LD_VAR 0 8
43126: PPUSH
43127: LD_VAR 0 4
43131: PPUSH
43132: CALL_OW 380
// un := CreateHuman ;
43136: LD_ADDR_VAR 0 14
43140: PUSH
43141: CALL_OW 44
43145: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43146: LD_ADDR_VAR 0 7
43150: PUSH
43151: LD_VAR 0 7
43155: PPUSH
43156: LD_INT 1
43158: PPUSH
43159: LD_VAR 0 14
43163: PPUSH
43164: CALL_OW 2
43168: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43169: LD_VAR 0 14
43173: PPUSH
43174: LD_VAR 0 9
43178: PPUSH
43179: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43183: LD_VAR 0 9
43187: PPUSH
43188: CALL_OW 313
43192: PUSH
43193: LD_INT 6
43195: EQUAL
43196: IFTRUE 43220
43198: PUSH
43199: LD_VAR 0 9
43203: PPUSH
43204: CALL_OW 266
43208: PUSH
43209: LD_INT 32
43211: PUSH
43212: LD_INT 31
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: IN
43219: OR
43220: IFFALSE 43032
43222: GO 43029
43224: POP
43225: POP
// end else
43226: GO 43612
// for j = 1 to x do
43228: LD_ADDR_VAR 0 9
43232: PUSH
43233: DOUBLE
43234: LD_INT 1
43236: DEC
43237: ST_TO_ADDR
43238: LD_VAR 0 13
43242: PUSH
43243: FOR_TO
43244: IFFALSE 43610
// begin InitHc ;
43246: CALL_OW 19
// if not f then
43250: LD_VAR 0 12
43254: NOT
43255: IFFALSE 43344
// begin PrepareHuman ( false , i , skill ) ;
43257: LD_INT 0
43259: PPUSH
43260: LD_VAR 0 8
43264: PPUSH
43265: LD_VAR 0 4
43269: PPUSH
43270: CALL_OW 380
// un := CreateHuman ;
43274: LD_ADDR_VAR 0 14
43278: PUSH
43279: CALL_OW 44
43283: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43284: LD_ADDR_VAR 0 7
43288: PUSH
43289: LD_VAR 0 7
43293: PPUSH
43294: LD_INT 1
43296: PPUSH
43297: LD_VAR 0 14
43301: PPUSH
43302: CALL_OW 2
43306: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43307: LD_VAR 0 14
43311: PPUSH
43312: LD_VAR 0 1
43316: PPUSH
43317: CALL_OW 250
43321: PPUSH
43322: LD_VAR 0 1
43326: PPUSH
43327: CALL_OW 251
43331: PPUSH
43332: LD_INT 10
43334: PPUSH
43335: LD_INT 0
43337: PPUSH
43338: CALL_OW 50
// continue ;
43342: GO 43243
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43344: LD_VAR 0 12
43348: PUSH
43349: LD_INT 1
43351: ARRAY
43352: PPUSH
43353: CALL_OW 313
43357: IFFALSE 43385
43359: PUSH
43360: LD_VAR 0 12
43364: PUSH
43365: LD_INT 1
43367: ARRAY
43368: PPUSH
43369: CALL_OW 266
43373: PUSH
43374: LD_INT 32
43376: PUSH
43377: LD_INT 31
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: IN
43384: AND
43385: IFTRUE 43406
43387: PUSH
43388: LD_VAR 0 12
43392: PUSH
43393: LD_INT 1
43395: ARRAY
43396: PPUSH
43397: CALL_OW 313
43401: PUSH
43402: LD_INT 6
43404: EQUAL
43405: OR
43406: IFFALSE 43426
// f := Delete ( f , 1 ) ;
43408: LD_ADDR_VAR 0 12
43412: PUSH
43413: LD_VAR 0 12
43417: PPUSH
43418: LD_INT 1
43420: PPUSH
43421: CALL_OW 3
43425: ST_TO_ADDR
// if not f then
43426: LD_VAR 0 12
43430: NOT
43431: IFFALSE 43449
// begin x := x + 2 ;
43433: LD_ADDR_VAR 0 13
43437: PUSH
43438: LD_VAR 0 13
43442: PUSH
43443: LD_INT 2
43445: PLUS
43446: ST_TO_ADDR
// continue ;
43447: GO 43243
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43449: LD_VAR 0 12
43453: PUSH
43454: LD_INT 1
43456: ARRAY
43457: PPUSH
43458: CALL_OW 266
43462: PUSH
43463: LD_INT 5
43465: EQUAL
43466: IFFALSE 43540
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43468: LD_VAR 0 12
43472: PUSH
43473: LD_INT 1
43475: ARRAY
43476: PPUSH
43477: CALL_OW 313
43481: PUSH
43482: LD_INT 3
43484: LESS
43485: IFFALSE 43521
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43487: LD_INT 0
43489: PPUSH
43490: LD_INT 5
43492: PUSH
43493: LD_INT 8
43495: PUSH
43496: LD_INT 9
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: PUSH
43504: LD_VAR 0 17
43508: ARRAY
43509: PPUSH
43510: LD_VAR 0 4
43514: PPUSH
43515: CALL_OW 380
43519: GO 43538
// PrepareHuman ( false , i , skill ) ;
43521: LD_INT 0
43523: PPUSH
43524: LD_VAR 0 8
43528: PPUSH
43529: LD_VAR 0 4
43533: PPUSH
43534: CALL_OW 380
// end else
43538: GO 43557
// PrepareHuman ( false , i , skill ) ;
43540: LD_INT 0
43542: PPUSH
43543: LD_VAR 0 8
43547: PPUSH
43548: LD_VAR 0 4
43552: PPUSH
43553: CALL_OW 380
// un := CreateHuman ;
43557: LD_ADDR_VAR 0 14
43561: PUSH
43562: CALL_OW 44
43566: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43567: LD_ADDR_VAR 0 7
43571: PUSH
43572: LD_VAR 0 7
43576: PPUSH
43577: LD_INT 1
43579: PPUSH
43580: LD_VAR 0 14
43584: PPUSH
43585: CALL_OW 2
43589: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43590: LD_VAR 0 14
43594: PPUSH
43595: LD_VAR 0 12
43599: PUSH
43600: LD_INT 1
43602: ARRAY
43603: PPUSH
43604: CALL_OW 52
// end ;
43608: GO 43243
43610: POP
43611: POP
// end ;
43612: GO 42543
43614: POP
43615: POP
// result := result ^ buildings ;
43616: LD_ADDR_VAR 0 7
43620: PUSH
43621: LD_VAR 0 7
43625: PUSH
43626: LD_VAR 0 18
43630: ADD
43631: ST_TO_ADDR
// end else
43632: GO 43775
// begin for i = 1 to personel do
43634: LD_ADDR_VAR 0 8
43638: PUSH
43639: DOUBLE
43640: LD_INT 1
43642: DEC
43643: ST_TO_ADDR
43644: LD_VAR 0 6
43648: PUSH
43649: FOR_TO
43650: IFFALSE 43773
// begin if i > 4 then
43652: LD_VAR 0 8
43656: PUSH
43657: LD_INT 4
43659: GREATER
43660: IFFALSE 43664
// break ;
43662: GO 43773
// x := personel [ i ] ;
43664: LD_ADDR_VAR 0 13
43668: PUSH
43669: LD_VAR 0 6
43673: PUSH
43674: LD_VAR 0 8
43678: ARRAY
43679: ST_TO_ADDR
// if x = - 1 then
43680: LD_VAR 0 13
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: EQUAL
43689: IFFALSE 43693
// continue ;
43691: GO 43649
// PrepareHuman ( false , i , skill ) ;
43693: LD_INT 0
43695: PPUSH
43696: LD_VAR 0 8
43700: PPUSH
43701: LD_VAR 0 4
43705: PPUSH
43706: CALL_OW 380
// un := CreateHuman ;
43710: LD_ADDR_VAR 0 14
43714: PUSH
43715: CALL_OW 44
43719: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43720: LD_VAR 0 14
43724: PPUSH
43725: LD_VAR 0 1
43729: PPUSH
43730: CALL_OW 250
43734: PPUSH
43735: LD_VAR 0 1
43739: PPUSH
43740: CALL_OW 251
43744: PPUSH
43745: LD_INT 10
43747: PPUSH
43748: LD_INT 0
43750: PPUSH
43751: CALL_OW 50
// result := result ^ un ;
43755: LD_ADDR_VAR 0 7
43759: PUSH
43760: LD_VAR 0 7
43764: PUSH
43765: LD_VAR 0 14
43769: ADD
43770: ST_TO_ADDR
// end ;
43771: GO 43649
43773: POP
43774: POP
// end ; end ;
43775: LD_VAR 0 7
43779: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43780: LD_INT 0
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
// result := false ;
43798: LD_ADDR_VAR 0 3
43802: PUSH
43803: LD_INT 0
43805: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43806: LD_VAR 0 1
43810: NOT
43811: IFTRUE 43836
43813: PUSH
43814: LD_VAR 0 1
43818: PPUSH
43819: CALL_OW 266
43823: PUSH
43824: LD_INT 32
43826: PUSH
43827: LD_INT 33
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: IN
43834: NOT
43835: OR
43836: IFFALSE 43840
// exit ;
43838: GO 44975
// nat := GetNation ( tower ) ;
43840: LD_ADDR_VAR 0 12
43844: PUSH
43845: LD_VAR 0 1
43849: PPUSH
43850: CALL_OW 248
43854: ST_TO_ADDR
// side := GetSide ( tower ) ;
43855: LD_ADDR_VAR 0 16
43859: PUSH
43860: LD_VAR 0 1
43864: PPUSH
43865: CALL_OW 255
43869: ST_TO_ADDR
// x := GetX ( tower ) ;
43870: LD_ADDR_VAR 0 10
43874: PUSH
43875: LD_VAR 0 1
43879: PPUSH
43880: CALL_OW 250
43884: ST_TO_ADDR
// y := GetY ( tower ) ;
43885: LD_ADDR_VAR 0 11
43889: PUSH
43890: LD_VAR 0 1
43894: PPUSH
43895: CALL_OW 251
43899: ST_TO_ADDR
// if not x or not y then
43900: LD_VAR 0 10
43904: NOT
43905: IFTRUE 43914
43907: PUSH
43908: LD_VAR 0 11
43912: NOT
43913: OR
43914: IFFALSE 43918
// exit ;
43916: GO 44975
// weapon := 0 ;
43918: LD_ADDR_VAR 0 18
43922: PUSH
43923: LD_INT 0
43925: ST_TO_ADDR
// fac_list := [ ] ;
43926: LD_ADDR_VAR 0 17
43930: PUSH
43931: EMPTY
43932: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43933: LD_ADDR_VAR 0 6
43937: PUSH
43938: LD_VAR 0 1
43942: PPUSH
43943: CALL_OW 274
43947: PPUSH
43948: LD_VAR 0 2
43952: PPUSH
43953: LD_INT 0
43955: PPUSH
43956: CALL 41510 0 3
43960: PPUSH
43961: LD_INT 30
43963: PUSH
43964: LD_INT 3
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PPUSH
43971: CALL_OW 72
43975: ST_TO_ADDR
// if not factories then
43976: LD_VAR 0 6
43980: NOT
43981: IFFALSE 43985
// exit ;
43983: GO 44975
// for i in factories do
43985: LD_ADDR_VAR 0 8
43989: PUSH
43990: LD_VAR 0 6
43994: PUSH
43995: FOR_IN
43996: IFFALSE 44021
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43998: LD_ADDR_VAR 0 17
44002: PUSH
44003: LD_VAR 0 17
44007: PUSH
44008: LD_VAR 0 8
44012: PPUSH
44013: CALL_OW 478
44017: UNION
44018: ST_TO_ADDR
44019: GO 43995
44021: POP
44022: POP
// if not fac_list then
44023: LD_VAR 0 17
44027: NOT
44028: IFFALSE 44032
// exit ;
44030: GO 44975
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44032: LD_ADDR_VAR 0 5
44036: PUSH
44037: LD_INT 4
44039: PUSH
44040: LD_INT 5
44042: PUSH
44043: LD_INT 9
44045: PUSH
44046: LD_INT 10
44048: PUSH
44049: LD_INT 6
44051: PUSH
44052: LD_INT 7
44054: PUSH
44055: LD_INT 11
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 27
44069: PUSH
44070: LD_INT 28
44072: PUSH
44073: LD_INT 26
44075: PUSH
44076: LD_INT 30
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 43
44087: PUSH
44088: LD_INT 44
44090: PUSH
44091: LD_INT 46
44093: PUSH
44094: LD_INT 45
44096: PUSH
44097: LD_INT 47
44099: PUSH
44100: LD_INT 49
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: LIST
44115: PUSH
44116: LD_VAR 0 12
44120: ARRAY
44121: ST_TO_ADDR
// list := list isect fac_list ;
44122: LD_ADDR_VAR 0 5
44126: PUSH
44127: LD_VAR 0 5
44131: PUSH
44132: LD_VAR 0 17
44136: ISECT
44137: ST_TO_ADDR
// if not list then
44138: LD_VAR 0 5
44142: NOT
44143: IFFALSE 44147
// exit ;
44145: GO 44975
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44147: LD_VAR 0 12
44151: PUSH
44152: LD_INT 3
44154: EQUAL
44155: IFFALSE 44167
44157: PUSH
44158: LD_INT 49
44160: PUSH
44161: LD_VAR 0 5
44165: IN
44166: AND
44167: IFFALSE 44187
44169: PUSH
44170: LD_INT 31
44172: PPUSH
44173: LD_VAR 0 16
44177: PPUSH
44178: CALL_OW 321
44182: PUSH
44183: LD_INT 2
44185: EQUAL
44186: AND
44187: IFFALSE 44247
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44189: LD_INT 22
44191: PUSH
44192: LD_VAR 0 16
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 35
44203: PUSH
44204: LD_INT 49
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 91
44213: PUSH
44214: LD_VAR 0 1
44218: PUSH
44219: LD_INT 10
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: PPUSH
44232: CALL_OW 69
44236: NOT
44237: IFFALSE 44247
// weapon := ru_time_lapser ;
44239: LD_ADDR_VAR 0 18
44243: PUSH
44244: LD_INT 49
44246: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44247: LD_VAR 0 12
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: IN
44262: IFFALSE 44286
44264: PUSH
44265: LD_INT 11
44267: PUSH
44268: LD_VAR 0 5
44272: IN
44273: IFTRUE 44285
44275: PUSH
44276: LD_INT 30
44278: PUSH
44279: LD_VAR 0 5
44283: IN
44284: OR
44285: AND
44286: IFFALSE 44306
44288: PUSH
44289: LD_INT 6
44291: PPUSH
44292: LD_VAR 0 16
44296: PPUSH
44297: CALL_OW 321
44301: PUSH
44302: LD_INT 2
44304: EQUAL
44305: AND
44306: IFFALSE 44473
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44308: LD_INT 22
44310: PUSH
44311: LD_VAR 0 16
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 35
44325: PUSH
44326: LD_INT 11
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 35
44335: PUSH
44336: LD_INT 30
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 91
44350: PUSH
44351: LD_VAR 0 1
44355: PUSH
44356: LD_INT 18
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: PPUSH
44369: CALL_OW 69
44373: NOT
44374: IFFALSE 44450
44376: PUSH
44377: LD_INT 22
44379: PUSH
44380: LD_VAR 0 16
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 30
44394: PUSH
44395: LD_INT 32
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 30
44404: PUSH
44405: LD_INT 33
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 91
44419: PUSH
44420: LD_VAR 0 1
44424: PUSH
44425: LD_INT 12
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: PUSH
44438: EMPTY
44439: LIST
44440: PPUSH
44441: CALL_OW 69
44445: PUSH
44446: LD_INT 2
44448: GREATER
44449: AND
44450: IFFALSE 44473
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44452: LD_ADDR_VAR 0 18
44456: PUSH
44457: LD_INT 11
44459: PUSH
44460: LD_INT 30
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_VAR 0 12
44471: ARRAY
44472: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44473: LD_VAR 0 18
44477: NOT
44478: IFFALSE 44498
44480: PUSH
44481: LD_INT 40
44483: PPUSH
44484: LD_VAR 0 16
44488: PPUSH
44489: CALL_OW 321
44493: PUSH
44494: LD_INT 2
44496: EQUAL
44497: AND
44498: IFFALSE 44534
44500: PUSH
44501: LD_INT 7
44503: PUSH
44504: LD_VAR 0 5
44508: IN
44509: IFTRUE 44521
44511: PUSH
44512: LD_INT 28
44514: PUSH
44515: LD_VAR 0 5
44519: IN
44520: OR
44521: IFTRUE 44533
44523: PUSH
44524: LD_INT 45
44526: PUSH
44527: LD_VAR 0 5
44531: IN
44532: OR
44533: AND
44534: IFFALSE 44788
// begin hex := GetHexInfo ( x , y ) ;
44536: LD_ADDR_VAR 0 4
44540: PUSH
44541: LD_VAR 0 10
44545: PPUSH
44546: LD_VAR 0 11
44550: PPUSH
44551: CALL_OW 546
44555: ST_TO_ADDR
// if hex [ 1 ] then
44556: LD_VAR 0 4
44560: PUSH
44561: LD_INT 1
44563: ARRAY
44564: IFFALSE 44568
// exit ;
44566: GO 44975
// height := hex [ 2 ] ;
44568: LD_ADDR_VAR 0 15
44572: PUSH
44573: LD_VAR 0 4
44577: PUSH
44578: LD_INT 2
44580: ARRAY
44581: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44582: LD_ADDR_VAR 0 14
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: LD_INT 5
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: ST_TO_ADDR
// for i in tmp do
44605: LD_ADDR_VAR 0 8
44609: PUSH
44610: LD_VAR 0 14
44614: PUSH
44615: FOR_IN
44616: IFFALSE 44786
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44618: LD_ADDR_VAR 0 9
44622: PUSH
44623: LD_VAR 0 10
44627: PPUSH
44628: LD_VAR 0 8
44632: PPUSH
44633: LD_INT 5
44635: PPUSH
44636: CALL_OW 272
44640: PUSH
44641: LD_VAR 0 11
44645: PPUSH
44646: LD_VAR 0 8
44650: PPUSH
44651: LD_INT 5
44653: PPUSH
44654: CALL_OW 273
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44663: LD_VAR 0 9
44667: PUSH
44668: LD_INT 1
44670: ARRAY
44671: PPUSH
44672: LD_VAR 0 9
44676: PUSH
44677: LD_INT 2
44679: ARRAY
44680: PPUSH
44681: CALL_OW 488
44685: IFFALSE 44784
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44687: LD_ADDR_VAR 0 4
44691: PUSH
44692: LD_VAR 0 9
44696: PUSH
44697: LD_INT 1
44699: ARRAY
44700: PPUSH
44701: LD_VAR 0 9
44705: PUSH
44706: LD_INT 2
44708: ARRAY
44709: PPUSH
44710: CALL_OW 546
44714: ST_TO_ADDR
// if hex [ 1 ] then
44715: LD_VAR 0 4
44719: PUSH
44720: LD_INT 1
44722: ARRAY
44723: IFFALSE 44727
// continue ;
44725: GO 44615
// h := hex [ 2 ] ;
44727: LD_ADDR_VAR 0 13
44731: PUSH
44732: LD_VAR 0 4
44736: PUSH
44737: LD_INT 2
44739: ARRAY
44740: ST_TO_ADDR
// if h + 7 < height then
44741: LD_VAR 0 13
44745: PUSH
44746: LD_INT 7
44748: PLUS
44749: PUSH
44750: LD_VAR 0 15
44754: LESS
44755: IFFALSE 44784
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44757: LD_ADDR_VAR 0 18
44761: PUSH
44762: LD_INT 7
44764: PUSH
44765: LD_INT 28
44767: PUSH
44768: LD_INT 45
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: PUSH
44776: LD_VAR 0 12
44780: ARRAY
44781: ST_TO_ADDR
// break ;
44782: GO 44786
// end ; end ; end ;
44784: GO 44615
44786: POP
44787: POP
// end ; if not weapon then
44788: LD_VAR 0 18
44792: NOT
44793: IFFALSE 44853
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44795: LD_ADDR_VAR 0 5
44799: PUSH
44800: LD_VAR 0 5
44804: PUSH
44805: LD_INT 11
44807: PUSH
44808: LD_INT 30
44810: PUSH
44811: LD_INT 49
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: LIST
44818: DIFF
44819: ST_TO_ADDR
// if not list then
44820: LD_VAR 0 5
44824: NOT
44825: IFFALSE 44829
// exit ;
44827: GO 44975
// weapon := list [ rand ( 1 , list ) ] ;
44829: LD_ADDR_VAR 0 18
44833: PUSH
44834: LD_VAR 0 5
44838: PUSH
44839: LD_INT 1
44841: PPUSH
44842: LD_VAR 0 5
44846: PPUSH
44847: CALL_OW 12
44851: ARRAY
44852: ST_TO_ADDR
// end ; if weapon then
44853: LD_VAR 0 18
44857: IFFALSE 44975
// begin tmp := CostOfWeapon ( weapon ) ;
44859: LD_ADDR_VAR 0 14
44863: PUSH
44864: LD_VAR 0 18
44868: PPUSH
44869: CALL_OW 451
44873: ST_TO_ADDR
// j := GetBase ( tower ) ;
44874: LD_ADDR_VAR 0 9
44878: PUSH
44879: LD_VAR 0 1
44883: PPUSH
44884: CALL_OW 274
44888: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44889: LD_VAR 0 9
44893: PPUSH
44894: LD_INT 1
44896: PPUSH
44897: CALL_OW 275
44901: PUSH
44902: LD_VAR 0 14
44906: PUSH
44907: LD_INT 1
44909: ARRAY
44910: GREATEREQUAL
44911: IFFALSE 44937
44913: PUSH
44914: LD_VAR 0 9
44918: PPUSH
44919: LD_INT 2
44921: PPUSH
44922: CALL_OW 275
44926: PUSH
44927: LD_VAR 0 14
44931: PUSH
44932: LD_INT 2
44934: ARRAY
44935: GREATEREQUAL
44936: AND
44937: IFFALSE 44963
44939: PUSH
44940: LD_VAR 0 9
44944: PPUSH
44945: LD_INT 3
44947: PPUSH
44948: CALL_OW 275
44952: PUSH
44953: LD_VAR 0 14
44957: PUSH
44958: LD_INT 3
44960: ARRAY
44961: GREATEREQUAL
44962: AND
44963: IFFALSE 44975
// result := weapon ;
44965: LD_ADDR_VAR 0 3
44969: PUSH
44970: LD_VAR 0 18
44974: ST_TO_ADDR
// end ; end ;
44975: LD_VAR 0 3
44979: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44980: LD_INT 0
44982: PPUSH
44983: PPUSH
// result := true ;
44984: LD_ADDR_VAR 0 3
44988: PUSH
44989: LD_INT 1
44991: ST_TO_ADDR
// if array1 = array2 then
44992: LD_VAR 0 1
44996: PUSH
44997: LD_VAR 0 2
45001: EQUAL
45002: IFFALSE 45062
// begin for i = 1 to array1 do
45004: LD_ADDR_VAR 0 4
45008: PUSH
45009: DOUBLE
45010: LD_INT 1
45012: DEC
45013: ST_TO_ADDR
45014: LD_VAR 0 1
45018: PUSH
45019: FOR_TO
45020: IFFALSE 45058
// if array1 [ i ] <> array2 [ i ] then
45022: LD_VAR 0 1
45026: PUSH
45027: LD_VAR 0 4
45031: ARRAY
45032: PUSH
45033: LD_VAR 0 2
45037: PUSH
45038: LD_VAR 0 4
45042: ARRAY
45043: NONEQUAL
45044: IFFALSE 45056
// begin result := false ;
45046: LD_ADDR_VAR 0 3
45050: PUSH
45051: LD_INT 0
45053: ST_TO_ADDR
// break ;
45054: GO 45058
// end ;
45056: GO 45019
45058: POP
45059: POP
// end else
45060: GO 45070
// result := false ;
45062: LD_ADDR_VAR 0 3
45066: PUSH
45067: LD_INT 0
45069: ST_TO_ADDR
// end ;
45070: LD_VAR 0 3
45074: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45075: LD_INT 0
45077: PPUSH
45078: PPUSH
// if not array1 or not array2 then
45079: LD_VAR 0 1
45083: NOT
45084: IFTRUE 45093
45086: PUSH
45087: LD_VAR 0 2
45091: NOT
45092: OR
45093: IFFALSE 45097
// exit ;
45095: GO 45161
// result := true ;
45097: LD_ADDR_VAR 0 3
45101: PUSH
45102: LD_INT 1
45104: ST_TO_ADDR
// for i = 1 to array1 do
45105: LD_ADDR_VAR 0 4
45109: PUSH
45110: DOUBLE
45111: LD_INT 1
45113: DEC
45114: ST_TO_ADDR
45115: LD_VAR 0 1
45119: PUSH
45120: FOR_TO
45121: IFFALSE 45159
// if array1 [ i ] <> array2 [ i ] then
45123: LD_VAR 0 1
45127: PUSH
45128: LD_VAR 0 4
45132: ARRAY
45133: PUSH
45134: LD_VAR 0 2
45138: PUSH
45139: LD_VAR 0 4
45143: ARRAY
45144: NONEQUAL
45145: IFFALSE 45157
// begin result := false ;
45147: LD_ADDR_VAR 0 3
45151: PUSH
45152: LD_INT 0
45154: ST_TO_ADDR
// break ;
45155: GO 45159
// end ;
45157: GO 45120
45159: POP
45160: POP
// end ;
45161: LD_VAR 0 3
45165: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45166: LD_INT 0
45168: PPUSH
45169: PPUSH
45170: PPUSH
// pom := GetBase ( fac ) ;
45171: LD_ADDR_VAR 0 5
45175: PUSH
45176: LD_VAR 0 1
45180: PPUSH
45181: CALL_OW 274
45185: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45186: LD_ADDR_VAR 0 4
45190: PUSH
45191: LD_VAR 0 2
45195: PUSH
45196: LD_INT 1
45198: ARRAY
45199: PPUSH
45200: LD_VAR 0 2
45204: PUSH
45205: LD_INT 2
45207: ARRAY
45208: PPUSH
45209: LD_VAR 0 2
45213: PUSH
45214: LD_INT 3
45216: ARRAY
45217: PPUSH
45218: LD_VAR 0 2
45222: PUSH
45223: LD_INT 4
45225: ARRAY
45226: PPUSH
45227: CALL_OW 449
45231: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45232: LD_ADDR_VAR 0 3
45236: PUSH
45237: LD_VAR 0 5
45241: PPUSH
45242: LD_INT 1
45244: PPUSH
45245: CALL_OW 275
45249: PUSH
45250: LD_VAR 0 4
45254: PUSH
45255: LD_INT 1
45257: ARRAY
45258: GREATEREQUAL
45259: IFFALSE 45285
45261: PUSH
45262: LD_VAR 0 5
45266: PPUSH
45267: LD_INT 2
45269: PPUSH
45270: CALL_OW 275
45274: PUSH
45275: LD_VAR 0 4
45279: PUSH
45280: LD_INT 2
45282: ARRAY
45283: GREATEREQUAL
45284: AND
45285: IFFALSE 45311
45287: PUSH
45288: LD_VAR 0 5
45292: PPUSH
45293: LD_INT 3
45295: PPUSH
45296: CALL_OW 275
45300: PUSH
45301: LD_VAR 0 4
45305: PUSH
45306: LD_INT 3
45308: ARRAY
45309: GREATEREQUAL
45310: AND
45311: ST_TO_ADDR
// end ;
45312: LD_VAR 0 3
45316: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45317: LD_INT 0
45319: PPUSH
45320: PPUSH
45321: PPUSH
45322: PPUSH
// pom := GetBase ( building ) ;
45323: LD_ADDR_VAR 0 3
45327: PUSH
45328: LD_VAR 0 1
45332: PPUSH
45333: CALL_OW 274
45337: ST_TO_ADDR
// if not pom then
45338: LD_VAR 0 3
45342: NOT
45343: IFFALSE 45347
// exit ;
45345: GO 45521
// btype := GetBType ( building ) ;
45347: LD_ADDR_VAR 0 5
45351: PUSH
45352: LD_VAR 0 1
45356: PPUSH
45357: CALL_OW 266
45361: ST_TO_ADDR
// if btype = b_armoury then
45362: LD_VAR 0 5
45366: PUSH
45367: LD_INT 4
45369: EQUAL
45370: IFFALSE 45380
// btype := b_barracks ;
45372: LD_ADDR_VAR 0 5
45376: PUSH
45377: LD_INT 5
45379: ST_TO_ADDR
// if btype = b_depot then
45380: LD_VAR 0 5
45384: PUSH
45385: LD_INT 0
45387: EQUAL
45388: IFFALSE 45398
// btype := b_warehouse ;
45390: LD_ADDR_VAR 0 5
45394: PUSH
45395: LD_INT 1
45397: ST_TO_ADDR
// if btype = b_workshop then
45398: LD_VAR 0 5
45402: PUSH
45403: LD_INT 2
45405: EQUAL
45406: IFFALSE 45416
// btype := b_factory ;
45408: LD_ADDR_VAR 0 5
45412: PUSH
45413: LD_INT 3
45415: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45416: LD_ADDR_VAR 0 4
45420: PUSH
45421: LD_VAR 0 5
45425: PPUSH
45426: LD_VAR 0 1
45430: PPUSH
45431: CALL_OW 248
45435: PPUSH
45436: CALL_OW 450
45440: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45441: LD_ADDR_VAR 0 2
45445: PUSH
45446: LD_VAR 0 3
45450: PPUSH
45451: LD_INT 1
45453: PPUSH
45454: CALL_OW 275
45458: PUSH
45459: LD_VAR 0 4
45463: PUSH
45464: LD_INT 1
45466: ARRAY
45467: GREATEREQUAL
45468: IFFALSE 45494
45470: PUSH
45471: LD_VAR 0 3
45475: PPUSH
45476: LD_INT 2
45478: PPUSH
45479: CALL_OW 275
45483: PUSH
45484: LD_VAR 0 4
45488: PUSH
45489: LD_INT 2
45491: ARRAY
45492: GREATEREQUAL
45493: AND
45494: IFFALSE 45520
45496: PUSH
45497: LD_VAR 0 3
45501: PPUSH
45502: LD_INT 3
45504: PPUSH
45505: CALL_OW 275
45509: PUSH
45510: LD_VAR 0 4
45514: PUSH
45515: LD_INT 3
45517: ARRAY
45518: GREATEREQUAL
45519: AND
45520: ST_TO_ADDR
// end ;
45521: LD_VAR 0 2
45525: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45526: LD_INT 0
45528: PPUSH
45529: PPUSH
45530: PPUSH
// pom := GetBase ( building ) ;
45531: LD_ADDR_VAR 0 4
45535: PUSH
45536: LD_VAR 0 1
45540: PPUSH
45541: CALL_OW 274
45545: ST_TO_ADDR
// if not pom then
45546: LD_VAR 0 4
45550: NOT
45551: IFFALSE 45555
// exit ;
45553: GO 45660
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45555: LD_ADDR_VAR 0 5
45559: PUSH
45560: LD_VAR 0 2
45564: PPUSH
45565: LD_VAR 0 1
45569: PPUSH
45570: CALL_OW 248
45574: PPUSH
45575: CALL_OW 450
45579: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45580: LD_ADDR_VAR 0 3
45584: PUSH
45585: LD_VAR 0 4
45589: PPUSH
45590: LD_INT 1
45592: PPUSH
45593: CALL_OW 275
45597: PUSH
45598: LD_VAR 0 5
45602: PUSH
45603: LD_INT 1
45605: ARRAY
45606: GREATEREQUAL
45607: IFFALSE 45633
45609: PUSH
45610: LD_VAR 0 4
45614: PPUSH
45615: LD_INT 2
45617: PPUSH
45618: CALL_OW 275
45622: PUSH
45623: LD_VAR 0 5
45627: PUSH
45628: LD_INT 2
45630: ARRAY
45631: GREATEREQUAL
45632: AND
45633: IFFALSE 45659
45635: PUSH
45636: LD_VAR 0 4
45640: PPUSH
45641: LD_INT 3
45643: PPUSH
45644: CALL_OW 275
45648: PUSH
45649: LD_VAR 0 5
45653: PUSH
45654: LD_INT 3
45656: ARRAY
45657: GREATEREQUAL
45658: AND
45659: ST_TO_ADDR
// end ;
45660: LD_VAR 0 3
45664: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45665: LD_INT 0
45667: PPUSH
45668: PPUSH
45669: PPUSH
45670: PPUSH
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
45675: PPUSH
45676: PPUSH
45677: PPUSH
// result := false ;
45678: LD_ADDR_VAR 0 8
45682: PUSH
45683: LD_INT 0
45685: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45686: LD_VAR 0 5
45690: NOT
45691: IFTRUE 45700
45693: PUSH
45694: LD_VAR 0 1
45698: NOT
45699: OR
45700: IFTRUE 45709
45702: PUSH
45703: LD_VAR 0 2
45707: NOT
45708: OR
45709: IFTRUE 45718
45711: PUSH
45712: LD_VAR 0 3
45716: NOT
45717: OR
45718: IFFALSE 45722
// exit ;
45720: GO 46548
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45722: LD_ADDR_VAR 0 14
45726: PUSH
45727: LD_VAR 0 1
45731: PPUSH
45732: LD_VAR 0 2
45736: PPUSH
45737: LD_VAR 0 3
45741: PPUSH
45742: LD_VAR 0 4
45746: PPUSH
45747: LD_VAR 0 5
45751: PUSH
45752: LD_INT 1
45754: ARRAY
45755: PPUSH
45756: CALL_OW 248
45760: PPUSH
45761: LD_INT 0
45763: PPUSH
45764: CALL 47829 0 6
45768: ST_TO_ADDR
// if not hexes then
45769: LD_VAR 0 14
45773: NOT
45774: IFFALSE 45778
// exit ;
45776: GO 46548
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45778: LD_ADDR_VAR 0 17
45782: PUSH
45783: LD_VAR 0 5
45787: PPUSH
45788: LD_INT 22
45790: PUSH
45791: LD_VAR 0 13
45795: PPUSH
45796: CALL_OW 255
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: LD_INT 30
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 30
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PPUSH
45837: CALL_OW 72
45841: ST_TO_ADDR
// for i = 1 to hexes do
45842: LD_ADDR_VAR 0 9
45846: PUSH
45847: DOUBLE
45848: LD_INT 1
45850: DEC
45851: ST_TO_ADDR
45852: LD_VAR 0 14
45856: PUSH
45857: FOR_TO
45858: IFFALSE 46546
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45860: LD_ADDR_VAR 0 13
45864: PUSH
45865: LD_VAR 0 14
45869: PUSH
45870: LD_VAR 0 9
45874: ARRAY
45875: PUSH
45876: LD_INT 1
45878: ARRAY
45879: PPUSH
45880: LD_VAR 0 14
45884: PUSH
45885: LD_VAR 0 9
45889: ARRAY
45890: PUSH
45891: LD_INT 2
45893: ARRAY
45894: PPUSH
45895: CALL_OW 428
45899: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45900: LD_VAR 0 14
45904: PUSH
45905: LD_VAR 0 9
45909: ARRAY
45910: PUSH
45911: LD_INT 1
45913: ARRAY
45914: PPUSH
45915: LD_VAR 0 14
45919: PUSH
45920: LD_VAR 0 9
45924: ARRAY
45925: PUSH
45926: LD_INT 2
45928: ARRAY
45929: PPUSH
45930: CALL_OW 351
45934: IFTRUE 45973
45936: PUSH
45937: LD_VAR 0 14
45941: PUSH
45942: LD_VAR 0 9
45946: ARRAY
45947: PUSH
45948: LD_INT 1
45950: ARRAY
45951: PPUSH
45952: LD_VAR 0 14
45956: PUSH
45957: LD_VAR 0 9
45961: ARRAY
45962: PUSH
45963: LD_INT 2
45965: ARRAY
45966: PPUSH
45967: CALL_OW 488
45971: NOT
45972: OR
45973: IFTRUE 45990
45975: PUSH
45976: LD_VAR 0 13
45980: PPUSH
45981: CALL_OW 247
45985: PUSH
45986: LD_INT 3
45988: EQUAL
45989: OR
45990: IFFALSE 45996
// exit ;
45992: POP
45993: POP
45994: GO 46548
// if not tmp then
45996: LD_VAR 0 13
46000: NOT
46001: IFFALSE 46005
// continue ;
46003: GO 45857
// result := true ;
46005: LD_ADDR_VAR 0 8
46009: PUSH
46010: LD_INT 1
46012: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46013: LD_VAR 0 6
46017: IFFALSE 46034
46019: PUSH
46020: LD_VAR 0 13
46024: PPUSH
46025: CALL_OW 247
46029: PUSH
46030: LD_INT 2
46032: EQUAL
46033: AND
46034: IFFALSE 46051
46036: PUSH
46037: LD_VAR 0 13
46041: PPUSH
46042: CALL_OW 263
46046: PUSH
46047: LD_INT 1
46049: EQUAL
46050: AND
46051: IFFALSE 46215
// begin if IsDrivenBy ( tmp ) then
46053: LD_VAR 0 13
46057: PPUSH
46058: CALL_OW 311
46062: IFFALSE 46066
// continue ;
46064: GO 45857
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46066: LD_VAR 0 6
46070: PPUSH
46071: LD_INT 3
46073: PUSH
46074: LD_INT 60
46076: PUSH
46077: EMPTY
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 3
46086: PUSH
46087: LD_INT 55
46089: PUSH
46090: EMPTY
46091: LIST
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PPUSH
46101: CALL_OW 72
46105: IFFALSE 46213
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46107: LD_ADDR_VAR 0 18
46111: PUSH
46112: LD_VAR 0 6
46116: PPUSH
46117: LD_INT 3
46119: PUSH
46120: LD_INT 60
46122: PUSH
46123: EMPTY
46124: LIST
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: LD_INT 55
46135: PUSH
46136: EMPTY
46137: LIST
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PPUSH
46147: CALL_OW 72
46151: PUSH
46152: LD_INT 1
46154: ARRAY
46155: ST_TO_ADDR
// if IsInUnit ( driver ) then
46156: LD_VAR 0 18
46160: PPUSH
46161: CALL_OW 310
46165: IFFALSE 46176
// ComExit ( driver ) ;
46167: LD_VAR 0 18
46171: PPUSH
46172: CALL 71819 0 1
// AddComEnterUnit ( driver , tmp ) ;
46176: LD_VAR 0 18
46180: PPUSH
46181: LD_VAR 0 13
46185: PPUSH
46186: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46190: LD_VAR 0 18
46194: PPUSH
46195: LD_VAR 0 7
46199: PPUSH
46200: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46204: LD_VAR 0 18
46208: PPUSH
46209: CALL_OW 181
// end ; continue ;
46213: GO 45857
// end ; if not cleaners or not tmp in cleaners then
46215: LD_VAR 0 6
46219: NOT
46220: IFTRUE 46235
46222: PUSH
46223: LD_VAR 0 13
46227: PUSH
46228: LD_VAR 0 6
46232: IN
46233: NOT
46234: OR
46235: IFFALSE 46544
// begin if dep then
46237: LD_VAR 0 17
46241: IFFALSE 46377
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46243: LD_ADDR_VAR 0 16
46247: PUSH
46248: LD_VAR 0 17
46252: PUSH
46253: LD_INT 1
46255: ARRAY
46256: PPUSH
46257: CALL_OW 250
46261: PPUSH
46262: LD_VAR 0 17
46266: PUSH
46267: LD_INT 1
46269: ARRAY
46270: PPUSH
46271: CALL_OW 254
46275: PPUSH
46276: LD_INT 5
46278: PPUSH
46279: CALL_OW 272
46283: PUSH
46284: LD_VAR 0 17
46288: PUSH
46289: LD_INT 1
46291: ARRAY
46292: PPUSH
46293: CALL_OW 251
46297: PPUSH
46298: LD_VAR 0 17
46302: PUSH
46303: LD_INT 1
46305: ARRAY
46306: PPUSH
46307: CALL_OW 254
46311: PPUSH
46312: LD_INT 5
46314: PPUSH
46315: CALL_OW 273
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46324: LD_VAR 0 16
46328: PUSH
46329: LD_INT 1
46331: ARRAY
46332: PPUSH
46333: LD_VAR 0 16
46337: PUSH
46338: LD_INT 2
46340: ARRAY
46341: PPUSH
46342: CALL_OW 488
46346: IFFALSE 46377
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46348: LD_VAR 0 13
46352: PPUSH
46353: LD_VAR 0 16
46357: PUSH
46358: LD_INT 1
46360: ARRAY
46361: PPUSH
46362: LD_VAR 0 16
46366: PUSH
46367: LD_INT 2
46369: ARRAY
46370: PPUSH
46371: CALL_OW 111
// continue ;
46375: GO 45857
// end ; end ; r := GetDir ( tmp ) ;
46377: LD_ADDR_VAR 0 15
46381: PUSH
46382: LD_VAR 0 13
46386: PPUSH
46387: CALL_OW 254
46391: ST_TO_ADDR
// if r = 5 then
46392: LD_VAR 0 15
46396: PUSH
46397: LD_INT 5
46399: EQUAL
46400: IFFALSE 46410
// r := 0 ;
46402: LD_ADDR_VAR 0 15
46406: PUSH
46407: LD_INT 0
46409: ST_TO_ADDR
// for j = r to 5 do
46410: LD_ADDR_VAR 0 10
46414: PUSH
46415: DOUBLE
46416: LD_VAR 0 15
46420: DEC
46421: ST_TO_ADDR
46422: LD_INT 5
46424: PUSH
46425: FOR_TO
46426: IFFALSE 46542
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46428: LD_ADDR_VAR 0 11
46432: PUSH
46433: LD_VAR 0 13
46437: PPUSH
46438: CALL_OW 250
46442: PPUSH
46443: LD_VAR 0 10
46447: PPUSH
46448: LD_INT 2
46450: PPUSH
46451: CALL_OW 272
46455: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46456: LD_ADDR_VAR 0 12
46460: PUSH
46461: LD_VAR 0 13
46465: PPUSH
46466: CALL_OW 251
46470: PPUSH
46471: LD_VAR 0 10
46475: PPUSH
46476: LD_INT 2
46478: PPUSH
46479: CALL_OW 273
46483: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46484: LD_VAR 0 11
46488: PPUSH
46489: LD_VAR 0 12
46493: PPUSH
46494: CALL_OW 488
46498: IFFALSE 46517
46500: PUSH
46501: LD_VAR 0 11
46505: PPUSH
46506: LD_VAR 0 12
46510: PPUSH
46511: CALL_OW 428
46515: NOT
46516: AND
46517: IFFALSE 46540
// begin ComMoveXY ( tmp , _x , _y ) ;
46519: LD_VAR 0 13
46523: PPUSH
46524: LD_VAR 0 11
46528: PPUSH
46529: LD_VAR 0 12
46533: PPUSH
46534: CALL_OW 111
// break ;
46538: GO 46542
// end ; end ;
46540: GO 46425
46542: POP
46543: POP
// end ; end ;
46544: GO 45857
46546: POP
46547: POP
// end ;
46548: LD_VAR 0 8
46552: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46553: LD_INT 0
46555: PPUSH
// result := true ;
46556: LD_ADDR_VAR 0 3
46560: PUSH
46561: LD_INT 1
46563: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46564: LD_VAR 0 2
46568: PUSH
46569: LD_INT 24
46571: DOUBLE
46572: EQUAL
46573: IFTRUE 46583
46575: LD_INT 33
46577: DOUBLE
46578: EQUAL
46579: IFTRUE 46583
46581: GO 46608
46583: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46584: LD_ADDR_VAR 0 3
46588: PUSH
46589: LD_INT 32
46591: PPUSH
46592: LD_VAR 0 1
46596: PPUSH
46597: CALL_OW 321
46601: PUSH
46602: LD_INT 2
46604: EQUAL
46605: ST_TO_ADDR
46606: GO 46924
46608: LD_INT 20
46610: DOUBLE
46611: EQUAL
46612: IFTRUE 46616
46614: GO 46641
46616: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46617: LD_ADDR_VAR 0 3
46621: PUSH
46622: LD_INT 6
46624: PPUSH
46625: LD_VAR 0 1
46629: PPUSH
46630: CALL_OW 321
46634: PUSH
46635: LD_INT 2
46637: EQUAL
46638: ST_TO_ADDR
46639: GO 46924
46641: LD_INT 22
46643: DOUBLE
46644: EQUAL
46645: IFTRUE 46655
46647: LD_INT 36
46649: DOUBLE
46650: EQUAL
46651: IFTRUE 46655
46653: GO 46680
46655: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46656: LD_ADDR_VAR 0 3
46660: PUSH
46661: LD_INT 15
46663: PPUSH
46664: LD_VAR 0 1
46668: PPUSH
46669: CALL_OW 321
46673: PUSH
46674: LD_INT 2
46676: EQUAL
46677: ST_TO_ADDR
46678: GO 46924
46680: LD_INT 30
46682: DOUBLE
46683: EQUAL
46684: IFTRUE 46688
46686: GO 46713
46688: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46689: LD_ADDR_VAR 0 3
46693: PUSH
46694: LD_INT 20
46696: PPUSH
46697: LD_VAR 0 1
46701: PPUSH
46702: CALL_OW 321
46706: PUSH
46707: LD_INT 2
46709: EQUAL
46710: ST_TO_ADDR
46711: GO 46924
46713: LD_INT 28
46715: DOUBLE
46716: EQUAL
46717: IFTRUE 46727
46719: LD_INT 21
46721: DOUBLE
46722: EQUAL
46723: IFTRUE 46727
46725: GO 46752
46727: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46728: LD_ADDR_VAR 0 3
46732: PUSH
46733: LD_INT 21
46735: PPUSH
46736: LD_VAR 0 1
46740: PPUSH
46741: CALL_OW 321
46745: PUSH
46746: LD_INT 2
46748: EQUAL
46749: ST_TO_ADDR
46750: GO 46924
46752: LD_INT 16
46754: DOUBLE
46755: EQUAL
46756: IFTRUE 46760
46758: GO 46785
46760: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46761: LD_ADDR_VAR 0 3
46765: PUSH
46766: LD_INT 84
46768: PPUSH
46769: LD_VAR 0 1
46773: PPUSH
46774: CALL_OW 321
46778: PUSH
46779: LD_INT 2
46781: EQUAL
46782: ST_TO_ADDR
46783: GO 46924
46785: LD_INT 19
46787: DOUBLE
46788: EQUAL
46789: IFTRUE 46799
46791: LD_INT 23
46793: DOUBLE
46794: EQUAL
46795: IFTRUE 46799
46797: GO 46824
46799: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46800: LD_ADDR_VAR 0 3
46804: PUSH
46805: LD_INT 83
46807: PPUSH
46808: LD_VAR 0 1
46812: PPUSH
46813: CALL_OW 321
46817: PUSH
46818: LD_INT 2
46820: EQUAL
46821: ST_TO_ADDR
46822: GO 46924
46824: LD_INT 17
46826: DOUBLE
46827: EQUAL
46828: IFTRUE 46832
46830: GO 46857
46832: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46833: LD_ADDR_VAR 0 3
46837: PUSH
46838: LD_INT 39
46840: PPUSH
46841: LD_VAR 0 1
46845: PPUSH
46846: CALL_OW 321
46850: PUSH
46851: LD_INT 2
46853: EQUAL
46854: ST_TO_ADDR
46855: GO 46924
46857: LD_INT 18
46859: DOUBLE
46860: EQUAL
46861: IFTRUE 46865
46863: GO 46890
46865: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46866: LD_ADDR_VAR 0 3
46870: PUSH
46871: LD_INT 40
46873: PPUSH
46874: LD_VAR 0 1
46878: PPUSH
46879: CALL_OW 321
46883: PUSH
46884: LD_INT 2
46886: EQUAL
46887: ST_TO_ADDR
46888: GO 46924
46890: LD_INT 27
46892: DOUBLE
46893: EQUAL
46894: IFTRUE 46898
46896: GO 46923
46898: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46899: LD_ADDR_VAR 0 3
46903: PUSH
46904: LD_INT 35
46906: PPUSH
46907: LD_VAR 0 1
46911: PPUSH
46912: CALL_OW 321
46916: PUSH
46917: LD_INT 2
46919: EQUAL
46920: ST_TO_ADDR
46921: GO 46924
46923: POP
// end ;
46924: LD_VAR 0 3
46928: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46929: LD_INT 0
46931: PPUSH
46932: PPUSH
46933: PPUSH
46934: PPUSH
46935: PPUSH
46936: PPUSH
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
// result := false ;
46942: LD_ADDR_VAR 0 6
46946: PUSH
46947: LD_INT 0
46949: ST_TO_ADDR
// if btype = b_depot then
46950: LD_VAR 0 2
46954: PUSH
46955: LD_INT 0
46957: EQUAL
46958: IFFALSE 46970
// begin result := true ;
46960: LD_ADDR_VAR 0 6
46964: PUSH
46965: LD_INT 1
46967: ST_TO_ADDR
// exit ;
46968: GO 47824
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46970: LD_VAR 0 1
46974: NOT
46975: IFTRUE 47000
46977: PUSH
46978: LD_VAR 0 1
46982: PPUSH
46983: CALL_OW 266
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: IN
46998: NOT
46999: OR
47000: IFTRUE 47009
47002: PUSH
47003: LD_VAR 0 2
47007: NOT
47008: OR
47009: IFTRUE 47045
47011: PUSH
47012: LD_VAR 0 5
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 3
47028: PUSH
47029: LD_INT 4
47031: PUSH
47032: LD_INT 5
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: IN
47043: NOT
47044: OR
47045: IFTRUE 47064
47047: PUSH
47048: LD_VAR 0 3
47052: PPUSH
47053: LD_VAR 0 4
47057: PPUSH
47058: CALL_OW 488
47062: NOT
47063: OR
47064: IFFALSE 47068
// exit ;
47066: GO 47824
// side := GetSide ( depot ) ;
47068: LD_ADDR_VAR 0 9
47072: PUSH
47073: LD_VAR 0 1
47077: PPUSH
47078: CALL_OW 255
47082: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47083: LD_VAR 0 9
47087: PPUSH
47088: LD_VAR 0 2
47092: PPUSH
47093: CALL 46553 0 2
47097: NOT
47098: IFFALSE 47102
// exit ;
47100: GO 47824
// pom := GetBase ( depot ) ;
47102: LD_ADDR_VAR 0 10
47106: PUSH
47107: LD_VAR 0 1
47111: PPUSH
47112: CALL_OW 274
47116: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47117: LD_ADDR_VAR 0 11
47121: PUSH
47122: LD_VAR 0 2
47126: PPUSH
47127: LD_VAR 0 1
47131: PPUSH
47132: CALL_OW 248
47136: PPUSH
47137: CALL_OW 450
47141: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47142: LD_VAR 0 10
47146: PPUSH
47147: LD_INT 1
47149: PPUSH
47150: CALL_OW 275
47154: PUSH
47155: LD_VAR 0 11
47159: PUSH
47160: LD_INT 1
47162: ARRAY
47163: GREATEREQUAL
47164: IFFALSE 47190
47166: PUSH
47167: LD_VAR 0 10
47171: PPUSH
47172: LD_INT 2
47174: PPUSH
47175: CALL_OW 275
47179: PUSH
47180: LD_VAR 0 11
47184: PUSH
47185: LD_INT 2
47187: ARRAY
47188: GREATEREQUAL
47189: AND
47190: IFFALSE 47216
47192: PUSH
47193: LD_VAR 0 10
47197: PPUSH
47198: LD_INT 3
47200: PPUSH
47201: CALL_OW 275
47205: PUSH
47206: LD_VAR 0 11
47210: PUSH
47211: LD_INT 3
47213: ARRAY
47214: GREATEREQUAL
47215: AND
47216: NOT
47217: IFFALSE 47221
// exit ;
47219: GO 47824
// if GetBType ( depot ) = b_depot then
47221: LD_VAR 0 1
47225: PPUSH
47226: CALL_OW 266
47230: PUSH
47231: LD_INT 0
47233: EQUAL
47234: IFFALSE 47246
// dist := 28 else
47236: LD_ADDR_VAR 0 14
47240: PUSH
47241: LD_INT 28
47243: ST_TO_ADDR
47244: GO 47254
// dist := 36 ;
47246: LD_ADDR_VAR 0 14
47250: PUSH
47251: LD_INT 36
47253: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47254: LD_VAR 0 1
47258: PPUSH
47259: LD_VAR 0 3
47263: PPUSH
47264: LD_VAR 0 4
47268: PPUSH
47269: CALL_OW 297
47273: PUSH
47274: LD_VAR 0 14
47278: GREATER
47279: IFFALSE 47283
// exit ;
47281: GO 47824
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47283: LD_ADDR_VAR 0 12
47287: PUSH
47288: LD_VAR 0 2
47292: PPUSH
47293: LD_VAR 0 3
47297: PPUSH
47298: LD_VAR 0 4
47302: PPUSH
47303: LD_VAR 0 5
47307: PPUSH
47308: LD_VAR 0 1
47312: PPUSH
47313: CALL_OW 248
47317: PPUSH
47318: LD_INT 0
47320: PPUSH
47321: CALL 47829 0 6
47325: ST_TO_ADDR
// if not hexes then
47326: LD_VAR 0 12
47330: NOT
47331: IFFALSE 47335
// exit ;
47333: GO 47824
// hex := GetHexInfo ( x , y ) ;
47335: LD_ADDR_VAR 0 15
47339: PUSH
47340: LD_VAR 0 3
47344: PPUSH
47345: LD_VAR 0 4
47349: PPUSH
47350: CALL_OW 546
47354: ST_TO_ADDR
// if hex [ 1 ] then
47355: LD_VAR 0 15
47359: PUSH
47360: LD_INT 1
47362: ARRAY
47363: IFFALSE 47367
// exit ;
47365: GO 47824
// height := hex [ 2 ] ;
47367: LD_ADDR_VAR 0 13
47371: PUSH
47372: LD_VAR 0 15
47376: PUSH
47377: LD_INT 2
47379: ARRAY
47380: ST_TO_ADDR
// for i = 1 to hexes do
47381: LD_ADDR_VAR 0 7
47385: PUSH
47386: DOUBLE
47387: LD_INT 1
47389: DEC
47390: ST_TO_ADDR
47391: LD_VAR 0 12
47395: PUSH
47396: FOR_TO
47397: IFFALSE 47741
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47399: LD_VAR 0 12
47403: PUSH
47404: LD_VAR 0 7
47408: ARRAY
47409: PUSH
47410: LD_INT 1
47412: ARRAY
47413: PPUSH
47414: LD_VAR 0 12
47418: PUSH
47419: LD_VAR 0 7
47423: ARRAY
47424: PUSH
47425: LD_INT 2
47427: ARRAY
47428: PPUSH
47429: CALL_OW 488
47433: NOT
47434: IFTRUE 47476
47436: PUSH
47437: LD_VAR 0 12
47441: PUSH
47442: LD_VAR 0 7
47446: ARRAY
47447: PUSH
47448: LD_INT 1
47450: ARRAY
47451: PPUSH
47452: LD_VAR 0 12
47456: PUSH
47457: LD_VAR 0 7
47461: ARRAY
47462: PUSH
47463: LD_INT 2
47465: ARRAY
47466: PPUSH
47467: CALL_OW 428
47471: PUSH
47472: LD_INT 0
47474: GREATER
47475: OR
47476: IFTRUE 47514
47478: PUSH
47479: LD_VAR 0 12
47483: PUSH
47484: LD_VAR 0 7
47488: ARRAY
47489: PUSH
47490: LD_INT 1
47492: ARRAY
47493: PPUSH
47494: LD_VAR 0 12
47498: PUSH
47499: LD_VAR 0 7
47503: ARRAY
47504: PUSH
47505: LD_INT 2
47507: ARRAY
47508: PPUSH
47509: CALL_OW 351
47513: OR
47514: IFFALSE 47520
// exit ;
47516: POP
47517: POP
47518: GO 47824
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47520: LD_ADDR_VAR 0 8
47524: PUSH
47525: LD_VAR 0 12
47529: PUSH
47530: LD_VAR 0 7
47534: ARRAY
47535: PUSH
47536: LD_INT 1
47538: ARRAY
47539: PPUSH
47540: LD_VAR 0 12
47544: PUSH
47545: LD_VAR 0 7
47549: ARRAY
47550: PUSH
47551: LD_INT 2
47553: ARRAY
47554: PPUSH
47555: CALL_OW 546
47559: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47560: LD_VAR 0 8
47564: PUSH
47565: LD_INT 1
47567: ARRAY
47568: IFTRUE 47590
47570: PUSH
47571: LD_VAR 0 8
47575: PUSH
47576: LD_INT 2
47578: ARRAY
47579: PUSH
47580: LD_VAR 0 13
47584: PUSH
47585: LD_INT 2
47587: PLUS
47588: GREATER
47589: OR
47590: IFTRUE 47612
47592: PUSH
47593: LD_VAR 0 8
47597: PUSH
47598: LD_INT 2
47600: ARRAY
47601: PUSH
47602: LD_VAR 0 13
47606: PUSH
47607: LD_INT 2
47609: MINUS
47610: LESS
47611: OR
47612: IFTRUE 47680
47614: PUSH
47615: LD_VAR 0 8
47619: PUSH
47620: LD_INT 3
47622: ARRAY
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 8
47629: PUSH
47630: LD_INT 9
47632: PUSH
47633: LD_INT 10
47635: PUSH
47636: LD_INT 11
47638: PUSH
47639: LD_INT 12
47641: PUSH
47642: LD_INT 13
47644: PUSH
47645: LD_INT 16
47647: PUSH
47648: LD_INT 17
47650: PUSH
47651: LD_INT 18
47653: PUSH
47654: LD_INT 19
47656: PUSH
47657: LD_INT 20
47659: PUSH
47660: LD_INT 21
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: IN
47678: NOT
47679: OR
47680: IFTRUE 47693
47682: PUSH
47683: LD_VAR 0 8
47687: PUSH
47688: LD_INT 5
47690: ARRAY
47691: NOT
47692: OR
47693: IFTRUE 47733
47695: PUSH
47696: LD_VAR 0 8
47700: PUSH
47701: LD_INT 6
47703: ARRAY
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: LD_INT 7
47713: PUSH
47714: LD_INT 9
47716: PUSH
47717: LD_INT 10
47719: PUSH
47720: LD_INT 11
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: IN
47731: NOT
47732: OR
47733: IFFALSE 47739
// exit ;
47735: POP
47736: POP
47737: GO 47824
// end ;
47739: GO 47396
47741: POP
47742: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47743: LD_VAR 0 9
47747: PPUSH
47748: LD_VAR 0 3
47752: PPUSH
47753: LD_VAR 0 4
47757: PPUSH
47758: LD_INT 20
47760: PPUSH
47761: CALL 39643 0 4
47765: PUSH
47766: LD_INT 4
47768: ARRAY
47769: IFFALSE 47773
// exit ;
47771: GO 47824
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47773: LD_VAR 0 2
47777: PUSH
47778: LD_INT 29
47780: PUSH
47781: LD_INT 30
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: IN
47788: IFFALSE 47812
47790: PUSH
47791: LD_VAR 0 3
47795: PPUSH
47796: LD_VAR 0 4
47800: PPUSH
47801: LD_VAR 0 9
47805: PPUSH
47806: CALL_OW 440
47810: NOT
47811: AND
47812: IFFALSE 47816
// exit ;
47814: GO 47824
// result := true ;
47816: LD_ADDR_VAR 0 6
47820: PUSH
47821: LD_INT 1
47823: ST_TO_ADDR
// end ;
47824: LD_VAR 0 6
47828: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47829: LD_INT 0
47831: PPUSH
47832: PPUSH
47833: PPUSH
47834: PPUSH
47835: PPUSH
47836: PPUSH
47837: PPUSH
47838: PPUSH
47839: PPUSH
47840: PPUSH
47841: PPUSH
47842: PPUSH
47843: PPUSH
47844: PPUSH
47845: PPUSH
47846: PPUSH
47847: PPUSH
47848: PPUSH
47849: PPUSH
47850: PPUSH
47851: PPUSH
47852: PPUSH
47853: PPUSH
47854: PPUSH
47855: PPUSH
47856: PPUSH
47857: PPUSH
47858: PPUSH
47859: PPUSH
47860: PPUSH
47861: PPUSH
47862: PPUSH
47863: PPUSH
47864: PPUSH
47865: PPUSH
47866: PPUSH
47867: PPUSH
47868: PPUSH
47869: PPUSH
47870: PPUSH
47871: PPUSH
47872: PPUSH
47873: PPUSH
47874: PPUSH
47875: PPUSH
47876: PPUSH
47877: PPUSH
47878: PPUSH
47879: PPUSH
47880: PPUSH
47881: PPUSH
47882: PPUSH
47883: PPUSH
47884: PPUSH
47885: PPUSH
47886: PPUSH
47887: PPUSH
47888: PPUSH
// result = [ ] ;
47889: LD_ADDR_VAR 0 7
47893: PUSH
47894: EMPTY
47895: ST_TO_ADDR
// temp_list = [ ] ;
47896: LD_ADDR_VAR 0 9
47900: PUSH
47901: EMPTY
47902: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47903: LD_VAR 0 4
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: LD_INT 4
47922: PUSH
47923: LD_INT 5
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: IN
47934: NOT
47935: IFTRUE 47978
47937: PUSH
47938: LD_VAR 0 1
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: IN
47953: IFFALSE 47977
47955: PUSH
47956: LD_VAR 0 5
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: LIST
47974: IN
47975: NOT
47976: AND
47977: OR
47978: IFFALSE 47982
// exit ;
47980: GO 66381
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47982: LD_VAR 0 1
47986: PUSH
47987: LD_INT 6
47989: PUSH
47990: LD_INT 7
47992: PUSH
47993: LD_INT 8
47995: PUSH
47996: LD_INT 13
47998: PUSH
47999: LD_INT 12
48001: PUSH
48002: LD_INT 15
48004: PUSH
48005: LD_INT 11
48007: PUSH
48008: LD_INT 14
48010: PUSH
48011: LD_INT 10
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: IN
48025: IFFALSE 48035
// btype = b_lab ;
48027: LD_ADDR_VAR 0 1
48031: PUSH
48032: LD_INT 6
48034: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48035: LD_VAR 0 6
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: IN
48054: NOT
48055: IFTRUE 48123
48057: PUSH
48058: LD_VAR 0 1
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: LD_INT 6
48077: PUSH
48078: LD_INT 36
48080: PUSH
48081: LD_INT 4
48083: PUSH
48084: LD_INT 5
48086: PUSH
48087: LD_INT 31
48089: PUSH
48090: LD_INT 32
48092: PUSH
48093: LD_INT 33
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: IN
48109: NOT
48110: IFFALSE 48122
48112: PUSH
48113: LD_VAR 0 6
48117: PUSH
48118: LD_INT 1
48120: EQUAL
48121: AND
48122: OR
48123: IFTRUE 48155
48125: PUSH
48126: LD_VAR 0 1
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 3
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: IN
48141: NOT
48142: IFFALSE 48154
48144: PUSH
48145: LD_VAR 0 6
48149: PUSH
48150: LD_INT 2
48152: EQUAL
48153: AND
48154: OR
48155: IFFALSE 48165
// mode = 0 ;
48157: LD_ADDR_VAR 0 6
48161: PUSH
48162: LD_INT 0
48164: ST_TO_ADDR
// case mode of 0 :
48165: LD_VAR 0 6
48169: PUSH
48170: LD_INT 0
48172: DOUBLE
48173: EQUAL
48174: IFTRUE 48178
48176: GO 59631
48178: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48179: LD_ADDR_VAR 0 11
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 3
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48372: LD_ADDR_VAR 0 12
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: NEG
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: NEG
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48568: LD_ADDR_VAR 0 13
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 3
48739: NEG
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48767: LD_ADDR_VAR 0 14
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 3
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: LD_INT 3
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48963: LD_ADDR_VAR 0 15
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 3
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 3
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49156: LD_ADDR_VAR 0 16
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 3
49313: PUSH
49314: LD_INT 3
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: LD_INT 3
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49349: LD_ADDR_VAR 0 17
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49579: LD_ADDR_VAR 0 18
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49809: LD_ADDR_VAR 0 19
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50039: LD_ADDR_VAR 0 20
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50269: LD_ADDR_VAR 0 21
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50499: LD_ADDR_VAR 0 22
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50729: LD_ADDR_VAR 0 23
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51009: LD_ADDR_VAR 0 24
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: LD_INT 2
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51285: LD_ADDR_VAR 0 25
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 3
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51559: LD_ADDR_VAR 0 26
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51835: LD_ADDR_VAR 0 27
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: NEG
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52115: LD_ADDR_VAR 0 28
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: NEG
52327: PUSH
52328: LD_INT 3
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: LD_INT 3
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52397: LD_ADDR_VAR 0 29
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 2
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: NEG
52588: PUSH
52589: LD_INT 3
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 3
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 3
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52676: LD_ADDR_VAR 0 30
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 3
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: LD_INT 3
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 3
52919: NEG
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52954: LD_ADDR_VAR 0 31
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: LD_INT 3
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 3
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53232: LD_ADDR_VAR 0 32
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: NEG
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: LD_INT 3
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 3
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53510: LD_ADDR_VAR 0 33
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 3
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 3
53754: NEG
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53789: LD_ADDR_VAR 0 34
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 2
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 3
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 3
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54069: LD_ADDR_VAR 0 35
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54181: LD_ADDR_VAR 0 36
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54293: LD_ADDR_VAR 0 37
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54405: LD_ADDR_VAR 0 38
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54517: LD_ADDR_VAR 0 39
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54629: LD_ADDR_VAR 0 40
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54741: LD_ADDR_VAR 0 41
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 3
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 3
54984: PUSH
54985: LD_INT 3
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 3
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 3
55015: NEG
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 3
55026: NEG
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: NEG
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: LD_INT 3
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55091: LD_ADDR_VAR 0 42
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: LD_INT 2
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: LD_INT 3
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 3
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 3
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 3
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 3
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 3
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 3
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: NEG
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55441: LD_ADDR_VAR 0 43
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 3
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 3
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 3
55737: NEG
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 3
55748: NEG
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55789: LD_ADDR_VAR 0 44
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: LD_INT 3
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 3
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: LD_INT 3
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 3
56098: NEG
56099: PUSH
56100: LD_INT 3
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56139: LD_ADDR_VAR 0 45
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: LD_INT 3
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 3
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: NEG
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 3
56448: NEG
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56489: LD_ADDR_VAR 0 46
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 3
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 3
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 3
56785: NEG
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 3
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56837: LD_ADDR_VAR 0 47
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56988: LD_ADDR_VAR 0 48
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57135: LD_ADDR_VAR 0 49
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57279: LD_ADDR_VAR 0 50
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57423: LD_ADDR_VAR 0 51
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57570: LD_ADDR_VAR 0 52
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57721: LD_ADDR_VAR 0 53
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: NEG
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57951: LD_ADDR_VAR 0 54
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58181: LD_ADDR_VAR 0 55
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58411: LD_ADDR_VAR 0 56
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58641: LD_ADDR_VAR 0 57
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: NEG
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58871: LD_ADDR_VAR 0 58
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 2
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 2
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59101: LD_ADDR_VAR 0 59
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59189: LD_ADDR_VAR 0 60
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59277: LD_ADDR_VAR 0 61
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59365: LD_ADDR_VAR 0 62
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59453: LD_ADDR_VAR 0 63
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59541: LD_ADDR_VAR 0 64
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: ST_TO_ADDR
// end ; 1 :
59629: GO 65526
59631: LD_INT 1
59633: DOUBLE
59634: EQUAL
59635: IFTRUE 59639
59637: GO 62262
59639: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59640: LD_ADDR_VAR 0 11
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59684: LD_ADDR_VAR 0 12
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 3
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: LIST
59724: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59725: LD_ADDR_VAR 0 13
59729: PUSH
59730: LD_INT 3
59732: PUSH
59733: LD_INT 2
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: PUSH
59743: LD_INT 3
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: LD_INT 3
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: LIST
59764: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59765: LD_ADDR_VAR 0 14
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 3
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 3
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59806: LD_ADDR_VAR 0 15
59810: PUSH
59811: LD_INT 2
59813: NEG
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: LIST
59849: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59850: LD_ADDR_VAR 0 16
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 3
59869: NEG
59870: PUSH
59871: LD_INT 2
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 3
59881: NEG
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59896: LD_ADDR_VAR 0 17
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: LIST
59939: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59940: LD_ADDR_VAR 0 18
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 3
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 3
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59981: LD_ADDR_VAR 0 19
59985: PUSH
59986: LD_INT 3
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 3
59998: PUSH
59999: LD_INT 3
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: LD_INT 3
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60021: LD_ADDR_VAR 0 20
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 3
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 2
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: LIST
60061: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60062: LD_ADDR_VAR 0 21
60066: PUSH
60067: LD_INT 2
60069: NEG
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 3
60080: NEG
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: LIST
60105: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60106: LD_ADDR_VAR 0 22
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 3
60125: NEG
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 3
60137: NEG
60138: PUSH
60139: LD_INT 3
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: LIST
60151: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60152: LD_ADDR_VAR 0 23
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 4
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: LIST
60195: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60196: LD_ADDR_VAR 0 24
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 4
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: LIST
60236: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60237: LD_ADDR_VAR 0 25
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: LD_INT 3
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 4
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: LD_INT 4
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60277: LD_ADDR_VAR 0 26
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 4
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60318: LD_ADDR_VAR 0 27
60322: PUSH
60323: LD_INT 3
60325: NEG
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 4
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: LIST
60361: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60362: LD_ADDR_VAR 0 28
60366: PUSH
60367: LD_INT 3
60369: NEG
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: LD_INT 4
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 4
60393: NEG
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60408: LD_ADDR_VAR 0 29
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: LD_INT 3
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: LD_INT 3
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 4
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 4
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 5
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 5
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 4
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: LD_INT 6
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 6
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: LD_INT 5
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60563: LD_ADDR_VAR 0 30
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 3
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 4
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 4
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 4
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 5
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 5
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 5
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 6
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 6
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60706: LD_ADDR_VAR 0 31
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 4
60743: PUSH
60744: LD_INT 3
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 4
60753: PUSH
60754: LD_INT 4
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: PUSH
60764: LD_INT 4
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 5
60773: PUSH
60774: LD_INT 4
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 5
60783: PUSH
60784: LD_INT 5
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 4
60793: PUSH
60794: LD_INT 5
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 6
60803: PUSH
60804: LD_INT 5
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 6
60813: PUSH
60814: LD_INT 6
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 5
60823: PUSH
60824: LD_INT 6
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60845: LD_ADDR_VAR 0 32
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: LD_INT 4
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 4
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 3
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: LD_INT 5
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 5
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 4
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: LD_INT 6
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: LD_INT 6
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: LD_INT 5
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60988: LD_ADDR_VAR 0 33
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: NEG
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 4
61040: NEG
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 4
61051: NEG
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 4
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 5
61074: NEG
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 5
61085: NEG
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 5
61097: NEG
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 6
61108: NEG
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 6
61119: NEG
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61143: LD_ADDR_VAR 0 34
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: LD_INT 3
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 3
61162: NEG
61163: PUSH
61164: LD_INT 2
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: LD_INT 3
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: LD_INT 4
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 4
61198: NEG
61199: PUSH
61200: LD_INT 3
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 4
61210: NEG
61211: PUSH
61212: LD_INT 4
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 4
61222: NEG
61223: PUSH
61224: LD_INT 5
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 5
61234: NEG
61235: PUSH
61236: LD_INT 4
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 5
61246: NEG
61247: PUSH
61248: LD_INT 5
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 5
61258: NEG
61259: PUSH
61260: LD_INT 6
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 6
61270: NEG
61271: PUSH
61272: LD_INT 5
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 6
61282: NEG
61283: PUSH
61284: LD_INT 6
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61306: LD_ADDR_VAR 0 41
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: LD_INT 3
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61350: LD_ADDR_VAR 0 42
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: LIST
61390: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61391: LD_ADDR_VAR 0 43
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 3
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61431: LD_ADDR_VAR 0 44
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: LD_INT 3
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: LIST
61471: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61472: LD_ADDR_VAR 0 45
61476: PUSH
61477: LD_INT 2
61479: NEG
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 2
61490: NEG
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 3
61501: NEG
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: LIST
61515: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61516: LD_ADDR_VAR 0 46
61520: PUSH
61521: LD_INT 2
61523: NEG
61524: PUSH
61525: LD_INT 2
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: NEG
61536: PUSH
61537: LD_INT 3
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 3
61547: NEG
61548: PUSH
61549: LD_INT 2
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61562: LD_ADDR_VAR 0 47
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: LD_INT 3
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61595: LD_ADDR_VAR 0 48
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61626: LD_ADDR_VAR 0 49
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61655: LD_ADDR_VAR 0 50
61659: PUSH
61660: LD_INT 2
61662: PUSH
61663: LD_INT 3
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61684: LD_ADDR_VAR 0 51
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61715: LD_ADDR_VAR 0 52
61719: PUSH
61720: LD_INT 3
61722: NEG
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 3
61734: NEG
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61748: LD_ADDR_VAR 0 53
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: LD_INT 3
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: LD_INT 2
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: LIST
61791: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61792: LD_ADDR_VAR 0 54
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 3
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61833: LD_ADDR_VAR 0 55
61837: PUSH
61838: LD_INT 3
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 3
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: LD_INT 3
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: LIST
61872: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61873: LD_ADDR_VAR 0 56
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: LD_INT 3
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: LIST
61913: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61914: LD_ADDR_VAR 0 57
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 3
61932: NEG
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 3
61943: NEG
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: LIST
61957: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61958: LD_ADDR_VAR 0 58
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: LD_INT 3
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 3
61977: NEG
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 3
61989: NEG
61990: PUSH
61991: LD_INT 3
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62004: LD_ADDR_VAR 0 59
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 2
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: LIST
62047: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62048: LD_ADDR_VAR 0 60
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62089: LD_ADDR_VAR 0 61
62093: PUSH
62094: LD_INT 2
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: LIST
62128: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62129: LD_ADDR_VAR 0 62
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: LIST
62169: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62170: LD_ADDR_VAR 0 63
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 2
62188: NEG
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 2
62199: NEG
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62214: LD_ADDR_VAR 0 64
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: LD_INT 2
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 2
62233: NEG
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: NEG
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: ST_TO_ADDR
// end ; 2 :
62260: GO 65526
62262: LD_INT 2
62264: DOUBLE
62265: EQUAL
62266: IFTRUE 62270
62268: GO 65525
62270: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62271: LD_ADDR_VAR 0 29
62275: PUSH
62276: LD_INT 4
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 4
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 5
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 5
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 4
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 3
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 3
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 3
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 5
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: LD_INT 3
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 4
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 4
62401: PUSH
62402: LD_INT 4
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 3
62411: PUSH
62412: LD_INT 4
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 2
62431: PUSH
62432: LD_INT 2
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 4
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: LD_INT 4
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: LD_INT 4
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 3
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: LD_INT 4
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 1
62491: PUSH
62492: LD_INT 5
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 5
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: LD_INT 4
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: LD_INT 3
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: LD_INT 5
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 3
62554: NEG
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 3
62565: NEG
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 2
62577: NEG
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 2
62588: NEG
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: NEG
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 4
62610: NEG
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 4
62621: NEG
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 4
62633: NEG
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 4
62656: NEG
62657: PUSH
62658: LD_INT 4
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 4
62668: NEG
62669: PUSH
62670: LD_INT 5
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: LD_INT 4
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: LD_INT 3
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 4
62704: NEG
62705: PUSH
62706: LD_INT 3
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 5
62716: NEG
62717: PUSH
62718: LD_INT 4
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 5
62728: NEG
62729: PUSH
62730: LD_INT 5
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 3
62740: NEG
62741: PUSH
62742: LD_INT 5
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 5
62752: NEG
62753: PUSH
62754: LD_INT 3
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62809: LD_ADDR_VAR 0 30
62813: PUSH
62814: LD_INT 4
62816: PUSH
62817: LD_INT 4
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 4
62826: PUSH
62827: LD_INT 3
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 5
62836: PUSH
62837: LD_INT 4
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 5
62846: PUSH
62847: LD_INT 5
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 4
62856: PUSH
62857: LD_INT 5
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 3
62866: PUSH
62867: LD_INT 4
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 3
62876: PUSH
62877: LD_INT 3
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 5
62886: PUSH
62887: LD_INT 3
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 3
62896: PUSH
62897: LD_INT 5
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_INT 3
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: LD_INT 3
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: LD_INT 4
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 4
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: LD_INT 3
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: LD_INT 4
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: NEG
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 4
62999: NEG
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 4
63010: NEG
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 3
63022: NEG
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 3
63033: NEG
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 4
63044: NEG
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 5
63055: NEG
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 5
63066: NEG
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 5
63078: NEG
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 3
63090: NEG
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: NEG
63102: PUSH
63103: LD_INT 3
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 3
63113: NEG
63114: PUSH
63115: LD_INT 4
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 3
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 2
63137: NEG
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 3
63149: NEG
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 4
63161: NEG
63162: PUSH
63163: LD_INT 3
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 4
63173: NEG
63174: PUSH
63175: LD_INT 4
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: NEG
63186: PUSH
63187: LD_INT 4
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 4
63197: NEG
63198: PUSH
63199: LD_INT 2
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 4
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: LD_INT 5
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: LD_INT 4
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: LD_INT 3
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: LD_INT 3
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: LD_INT 4
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: LD_INT 5
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 3
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: LD_INT 5
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63356: LD_ADDR_VAR 0 31
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: LD_INT 4
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: LD_INT 3
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: LD_INT 4
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: LD_INT 5
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 5
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: LD_INT 4
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: LD_INT 3
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: LD_INT 5
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: LD_INT 3
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 3
63456: NEG
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 3
63467: NEG
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 2
63490: NEG
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: NEG
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 4
63512: NEG
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 4
63523: NEG
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 4
63535: NEG
63536: PUSH
63537: LD_INT 2
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: LD_INT 2
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 4
63558: NEG
63559: PUSH
63560: LD_INT 4
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 4
63570: NEG
63571: PUSH
63572: LD_INT 5
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: LD_INT 4
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: LD_INT 3
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 4
63606: NEG
63607: PUSH
63608: LD_INT 3
63610: NEG
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 5
63618: NEG
63619: PUSH
63620: LD_INT 4
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 5
63630: NEG
63631: PUSH
63632: LD_INT 5
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 3
63642: NEG
63643: PUSH
63644: LD_INT 5
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 5
63654: NEG
63655: PUSH
63656: LD_INT 3
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: LD_INT 3
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: LD_INT 4
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: LD_INT 3
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: LD_INT 2
63702: NEG
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: LD_INT 2
63713: NEG
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: LD_INT 3
63725: NEG
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: LD_INT 4
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 2
63745: PUSH
63746: LD_INT 2
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: LD_INT 4
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 4
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 4
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 5
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 5
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 4
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 3
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: LD_INT 2
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 5
63851: PUSH
63852: LD_INT 2
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63906: LD_ADDR_VAR 0 32
63910: PUSH
63911: LD_INT 4
63913: NEG
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 4
63924: NEG
63925: PUSH
63926: LD_INT 1
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 3
63936: NEG
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 3
63947: NEG
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 4
63958: NEG
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 5
63969: NEG
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 5
63980: NEG
63981: PUSH
63982: LD_INT 1
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 5
63992: NEG
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 3
64004: NEG
64005: PUSH
64006: LD_INT 2
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 3
64015: NEG
64016: PUSH
64017: LD_INT 3
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 3
64027: NEG
64028: PUSH
64029: LD_INT 4
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 2
64039: NEG
64040: PUSH
64041: LD_INT 3
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PUSH
64053: LD_INT 2
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 3
64063: NEG
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 4
64075: NEG
64076: PUSH
64077: LD_INT 3
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 4
64087: NEG
64088: PUSH
64089: LD_INT 4
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 2
64099: NEG
64100: PUSH
64101: LD_INT 4
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 4
64111: NEG
64112: PUSH
64113: LD_INT 2
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: LD_INT 4
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: LD_INT 5
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 4
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: PUSH
64157: LD_INT 3
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: LD_INT 3
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 1
64178: NEG
64179: PUSH
64180: LD_INT 4
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: LD_INT 5
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 2
64202: PUSH
64203: LD_INT 3
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: LD_INT 5
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 3
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 3
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 4
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 4
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 3
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 2
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 2
64297: PUSH
64298: LD_INT 2
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 4
64308: PUSH
64309: LD_INT 2
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 4
64318: PUSH
64319: LD_INT 4
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 4
64328: PUSH
64329: LD_INT 3
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 5
64338: PUSH
64339: LD_INT 4
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 5
64348: PUSH
64349: LD_INT 5
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 4
64358: PUSH
64359: LD_INT 5
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 3
64368: PUSH
64369: LD_INT 4
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 3
64378: PUSH
64379: LD_INT 3
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 5
64388: PUSH
64389: LD_INT 3
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: PUSH
64399: LD_INT 5
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64453: LD_ADDR_VAR 0 33
64457: PUSH
64458: LD_INT 4
64460: NEG
64461: PUSH
64462: LD_INT 4
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 4
64472: NEG
64473: PUSH
64474: LD_INT 5
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 3
64484: NEG
64485: PUSH
64486: LD_INT 4
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 3
64496: NEG
64497: PUSH
64498: LD_INT 3
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 4
64508: NEG
64509: PUSH
64510: LD_INT 3
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 5
64520: NEG
64521: PUSH
64522: LD_INT 4
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 5
64532: NEG
64533: PUSH
64534: LD_INT 5
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: NEG
64545: PUSH
64546: LD_INT 5
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 5
64556: NEG
64557: PUSH
64558: LD_INT 3
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: LD_INT 3
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 4
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: LD_INT 3
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 2
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: LD_INT 3
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 4
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: LD_INT 2
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 2
64658: NEG
64659: PUSH
64660: LD_INT 4
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 4
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 4
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 5
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 5
64701: PUSH
64702: LD_INT 1
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 4
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 3
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 3
64742: PUSH
64743: LD_INT 2
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 5
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 3
64763: PUSH
64764: LD_INT 3
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 3
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 4
64783: PUSH
64784: LD_INT 3
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 4
64793: PUSH
64794: LD_INT 4
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 3
64803: PUSH
64804: LD_INT 4
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 2
64813: PUSH
64814: LD_INT 3
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 2
64823: PUSH
64824: LD_INT 2
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 4
64833: PUSH
64834: LD_INT 2
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 2
64843: PUSH
64844: LD_INT 4
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: LD_INT 4
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: LD_INT 4
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: LD_INT 5
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: LD_INT 5
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 1
64903: NEG
64904: PUSH
64905: LD_INT 4
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: LD_INT 3
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 2
64925: PUSH
64926: LD_INT 5
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 2
64935: NEG
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64991: LD_ADDR_VAR 0 34
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: LD_INT 4
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: LD_INT 5
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: LD_INT 4
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 3
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: LD_INT 3
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: LD_INT 4
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: NEG
65066: PUSH
65067: LD_INT 5
65069: NEG
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 2
65077: PUSH
65078: LD_INT 3
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 2
65088: NEG
65089: PUSH
65090: LD_INT 5
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 3
65110: PUSH
65111: LD_INT 1
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 4
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 4
65131: PUSH
65132: LD_INT 1
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 3
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 2
65161: PUSH
65162: LD_INT 1
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 2
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 4
65183: PUSH
65184: LD_INT 2
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 4
65193: PUSH
65194: LD_INT 4
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 4
65203: PUSH
65204: LD_INT 3
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 5
65213: PUSH
65214: LD_INT 4
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 5
65223: PUSH
65224: LD_INT 5
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 4
65233: PUSH
65234: LD_INT 5
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 3
65243: PUSH
65244: LD_INT 4
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 3
65253: PUSH
65254: LD_INT 3
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 5
65263: PUSH
65264: LD_INT 3
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 3
65273: PUSH
65274: LD_INT 5
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: LD_INT 3
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: LD_INT 2
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: LD_INT 3
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 1
65313: PUSH
65314: LD_INT 4
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: LD_INT 4
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: LD_INT 3
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: LD_INT 4
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 2
65365: NEG
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 4
65376: NEG
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 4
65387: NEG
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 3
65399: NEG
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 3
65410: NEG
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 4
65421: NEG
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 5
65432: NEG
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 5
65443: NEG
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 5
65455: NEG
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 3
65467: NEG
65468: PUSH
65469: LD_INT 2
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: ST_TO_ADDR
// end ; end ;
65523: GO 65526
65525: POP
// case btype of b_depot , b_warehouse :
65526: LD_VAR 0 1
65530: PUSH
65531: LD_INT 0
65533: DOUBLE
65534: EQUAL
65535: IFTRUE 65545
65537: LD_INT 1
65539: DOUBLE
65540: EQUAL
65541: IFTRUE 65545
65543: GO 65746
65545: POP
// case nation of nation_american :
65546: LD_VAR 0 5
65550: PUSH
65551: LD_INT 1
65553: DOUBLE
65554: EQUAL
65555: IFTRUE 65559
65557: GO 65615
65559: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65560: LD_ADDR_VAR 0 9
65564: PUSH
65565: LD_VAR 0 11
65569: PUSH
65570: LD_VAR 0 12
65574: PUSH
65575: LD_VAR 0 13
65579: PUSH
65580: LD_VAR 0 14
65584: PUSH
65585: LD_VAR 0 15
65589: PUSH
65590: LD_VAR 0 16
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: PUSH
65603: LD_VAR 0 4
65607: PUSH
65608: LD_INT 1
65610: PLUS
65611: ARRAY
65612: ST_TO_ADDR
65613: GO 65744
65615: LD_INT 2
65617: DOUBLE
65618: EQUAL
65619: IFTRUE 65623
65621: GO 65679
65623: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65624: LD_ADDR_VAR 0 9
65628: PUSH
65629: LD_VAR 0 17
65633: PUSH
65634: LD_VAR 0 18
65638: PUSH
65639: LD_VAR 0 19
65643: PUSH
65644: LD_VAR 0 20
65648: PUSH
65649: LD_VAR 0 21
65653: PUSH
65654: LD_VAR 0 22
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: PUSH
65667: LD_VAR 0 4
65671: PUSH
65672: LD_INT 1
65674: PLUS
65675: ARRAY
65676: ST_TO_ADDR
65677: GO 65744
65679: LD_INT 3
65681: DOUBLE
65682: EQUAL
65683: IFTRUE 65687
65685: GO 65743
65687: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65688: LD_ADDR_VAR 0 9
65692: PUSH
65693: LD_VAR 0 23
65697: PUSH
65698: LD_VAR 0 24
65702: PUSH
65703: LD_VAR 0 25
65707: PUSH
65708: LD_VAR 0 26
65712: PUSH
65713: LD_VAR 0 27
65717: PUSH
65718: LD_VAR 0 28
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: PUSH
65731: LD_VAR 0 4
65735: PUSH
65736: LD_INT 1
65738: PLUS
65739: ARRAY
65740: ST_TO_ADDR
65741: GO 65744
65743: POP
65744: GO 66299
65746: LD_INT 2
65748: DOUBLE
65749: EQUAL
65750: IFTRUE 65760
65752: LD_INT 3
65754: DOUBLE
65755: EQUAL
65756: IFTRUE 65760
65758: GO 65816
65760: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65761: LD_ADDR_VAR 0 9
65765: PUSH
65766: LD_VAR 0 29
65770: PUSH
65771: LD_VAR 0 30
65775: PUSH
65776: LD_VAR 0 31
65780: PUSH
65781: LD_VAR 0 32
65785: PUSH
65786: LD_VAR 0 33
65790: PUSH
65791: LD_VAR 0 34
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: PUSH
65804: LD_VAR 0 4
65808: PUSH
65809: LD_INT 1
65811: PLUS
65812: ARRAY
65813: ST_TO_ADDR
65814: GO 66299
65816: LD_INT 16
65818: DOUBLE
65819: EQUAL
65820: IFTRUE 65878
65822: LD_INT 17
65824: DOUBLE
65825: EQUAL
65826: IFTRUE 65878
65828: LD_INT 18
65830: DOUBLE
65831: EQUAL
65832: IFTRUE 65878
65834: LD_INT 19
65836: DOUBLE
65837: EQUAL
65838: IFTRUE 65878
65840: LD_INT 22
65842: DOUBLE
65843: EQUAL
65844: IFTRUE 65878
65846: LD_INT 20
65848: DOUBLE
65849: EQUAL
65850: IFTRUE 65878
65852: LD_INT 21
65854: DOUBLE
65855: EQUAL
65856: IFTRUE 65878
65858: LD_INT 23
65860: DOUBLE
65861: EQUAL
65862: IFTRUE 65878
65864: LD_INT 24
65866: DOUBLE
65867: EQUAL
65868: IFTRUE 65878
65870: LD_INT 25
65872: DOUBLE
65873: EQUAL
65874: IFTRUE 65878
65876: GO 65934
65878: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65879: LD_ADDR_VAR 0 9
65883: PUSH
65884: LD_VAR 0 35
65888: PUSH
65889: LD_VAR 0 36
65893: PUSH
65894: LD_VAR 0 37
65898: PUSH
65899: LD_VAR 0 38
65903: PUSH
65904: LD_VAR 0 39
65908: PUSH
65909: LD_VAR 0 40
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: PUSH
65922: LD_VAR 0 4
65926: PUSH
65927: LD_INT 1
65929: PLUS
65930: ARRAY
65931: ST_TO_ADDR
65932: GO 66299
65934: LD_INT 6
65936: DOUBLE
65937: EQUAL
65938: IFTRUE 65990
65940: LD_INT 7
65942: DOUBLE
65943: EQUAL
65944: IFTRUE 65990
65946: LD_INT 8
65948: DOUBLE
65949: EQUAL
65950: IFTRUE 65990
65952: LD_INT 13
65954: DOUBLE
65955: EQUAL
65956: IFTRUE 65990
65958: LD_INT 12
65960: DOUBLE
65961: EQUAL
65962: IFTRUE 65990
65964: LD_INT 15
65966: DOUBLE
65967: EQUAL
65968: IFTRUE 65990
65970: LD_INT 11
65972: DOUBLE
65973: EQUAL
65974: IFTRUE 65990
65976: LD_INT 14
65978: DOUBLE
65979: EQUAL
65980: IFTRUE 65990
65982: LD_INT 10
65984: DOUBLE
65985: EQUAL
65986: IFTRUE 65990
65988: GO 66046
65990: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65991: LD_ADDR_VAR 0 9
65995: PUSH
65996: LD_VAR 0 41
66000: PUSH
66001: LD_VAR 0 42
66005: PUSH
66006: LD_VAR 0 43
66010: PUSH
66011: LD_VAR 0 44
66015: PUSH
66016: LD_VAR 0 45
66020: PUSH
66021: LD_VAR 0 46
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: PUSH
66034: LD_VAR 0 4
66038: PUSH
66039: LD_INT 1
66041: PLUS
66042: ARRAY
66043: ST_TO_ADDR
66044: GO 66299
66046: LD_INT 36
66048: DOUBLE
66049: EQUAL
66050: IFTRUE 66054
66052: GO 66110
66054: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66055: LD_ADDR_VAR 0 9
66059: PUSH
66060: LD_VAR 0 47
66064: PUSH
66065: LD_VAR 0 48
66069: PUSH
66070: LD_VAR 0 49
66074: PUSH
66075: LD_VAR 0 50
66079: PUSH
66080: LD_VAR 0 51
66084: PUSH
66085: LD_VAR 0 52
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: PUSH
66098: LD_VAR 0 4
66102: PUSH
66103: LD_INT 1
66105: PLUS
66106: ARRAY
66107: ST_TO_ADDR
66108: GO 66299
66110: LD_INT 4
66112: DOUBLE
66113: EQUAL
66114: IFTRUE 66136
66116: LD_INT 5
66118: DOUBLE
66119: EQUAL
66120: IFTRUE 66136
66122: LD_INT 34
66124: DOUBLE
66125: EQUAL
66126: IFTRUE 66136
66128: LD_INT 37
66130: DOUBLE
66131: EQUAL
66132: IFTRUE 66136
66134: GO 66192
66136: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66137: LD_ADDR_VAR 0 9
66141: PUSH
66142: LD_VAR 0 53
66146: PUSH
66147: LD_VAR 0 54
66151: PUSH
66152: LD_VAR 0 55
66156: PUSH
66157: LD_VAR 0 56
66161: PUSH
66162: LD_VAR 0 57
66166: PUSH
66167: LD_VAR 0 58
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: PUSH
66180: LD_VAR 0 4
66184: PUSH
66185: LD_INT 1
66187: PLUS
66188: ARRAY
66189: ST_TO_ADDR
66190: GO 66299
66192: LD_INT 31
66194: DOUBLE
66195: EQUAL
66196: IFTRUE 66242
66198: LD_INT 32
66200: DOUBLE
66201: EQUAL
66202: IFTRUE 66242
66204: LD_INT 33
66206: DOUBLE
66207: EQUAL
66208: IFTRUE 66242
66210: LD_INT 27
66212: DOUBLE
66213: EQUAL
66214: IFTRUE 66242
66216: LD_INT 26
66218: DOUBLE
66219: EQUAL
66220: IFTRUE 66242
66222: LD_INT 28
66224: DOUBLE
66225: EQUAL
66226: IFTRUE 66242
66228: LD_INT 29
66230: DOUBLE
66231: EQUAL
66232: IFTRUE 66242
66234: LD_INT 30
66236: DOUBLE
66237: EQUAL
66238: IFTRUE 66242
66240: GO 66298
66242: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66243: LD_ADDR_VAR 0 9
66247: PUSH
66248: LD_VAR 0 59
66252: PUSH
66253: LD_VAR 0 60
66257: PUSH
66258: LD_VAR 0 61
66262: PUSH
66263: LD_VAR 0 62
66267: PUSH
66268: LD_VAR 0 63
66272: PUSH
66273: LD_VAR 0 64
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: PUSH
66286: LD_VAR 0 4
66290: PUSH
66291: LD_INT 1
66293: PLUS
66294: ARRAY
66295: ST_TO_ADDR
66296: GO 66299
66298: POP
// temp_list2 = [ ] ;
66299: LD_ADDR_VAR 0 10
66303: PUSH
66304: EMPTY
66305: ST_TO_ADDR
// for i in temp_list do
66306: LD_ADDR_VAR 0 8
66310: PUSH
66311: LD_VAR 0 9
66315: PUSH
66316: FOR_IN
66317: IFFALSE 66369
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66319: LD_ADDR_VAR 0 10
66323: PUSH
66324: LD_VAR 0 10
66328: PUSH
66329: LD_VAR 0 8
66333: PUSH
66334: LD_INT 1
66336: ARRAY
66337: PUSH
66338: LD_VAR 0 2
66342: PLUS
66343: PUSH
66344: LD_VAR 0 8
66348: PUSH
66349: LD_INT 2
66351: ARRAY
66352: PUSH
66353: LD_VAR 0 3
66357: PLUS
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: EMPTY
66364: LIST
66365: ADD
66366: ST_TO_ADDR
66367: GO 66316
66369: POP
66370: POP
// result = temp_list2 ;
66371: LD_ADDR_VAR 0 7
66375: PUSH
66376: LD_VAR 0 10
66380: ST_TO_ADDR
// end ;
66381: LD_VAR 0 7
66385: RET
// export function EnemyInRange ( unit , dist ) ; begin
66386: LD_INT 0
66388: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66389: LD_ADDR_VAR 0 3
66393: PUSH
66394: LD_VAR 0 1
66398: PPUSH
66399: CALL_OW 255
66403: PPUSH
66404: LD_VAR 0 1
66408: PPUSH
66409: CALL_OW 250
66413: PPUSH
66414: LD_VAR 0 1
66418: PPUSH
66419: CALL_OW 251
66423: PPUSH
66424: LD_VAR 0 2
66428: PPUSH
66429: CALL 39643 0 4
66433: PUSH
66434: LD_INT 4
66436: ARRAY
66437: ST_TO_ADDR
// end ;
66438: LD_VAR 0 3
66442: RET
// export function PlayerSeeMe ( unit ) ; begin
66443: LD_INT 0
66445: PPUSH
// result := See ( your_side , unit ) ;
66446: LD_ADDR_VAR 0 2
66450: PUSH
66451: LD_OWVAR 2
66455: PPUSH
66456: LD_VAR 0 1
66460: PPUSH
66461: CALL_OW 292
66465: ST_TO_ADDR
// end ;
66466: LD_VAR 0 2
66470: RET
// export function ReverseDir ( unit ) ; begin
66471: LD_INT 0
66473: PPUSH
// if not unit then
66474: LD_VAR 0 1
66478: NOT
66479: IFFALSE 66483
// exit ;
66481: GO 66506
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66483: LD_ADDR_VAR 0 2
66487: PUSH
66488: LD_VAR 0 1
66492: PPUSH
66493: CALL_OW 254
66497: PUSH
66498: LD_INT 3
66500: PLUS
66501: PUSH
66502: LD_INT 6
66504: MOD
66505: ST_TO_ADDR
// end ;
66506: LD_VAR 0 2
66510: RET
// export function ReverseArray ( array ) ; var i ; begin
66511: LD_INT 0
66513: PPUSH
66514: PPUSH
// if not array then
66515: LD_VAR 0 1
66519: NOT
66520: IFFALSE 66524
// exit ;
66522: GO 66579
// result := [ ] ;
66524: LD_ADDR_VAR 0 2
66528: PUSH
66529: EMPTY
66530: ST_TO_ADDR
// for i := array downto 1 do
66531: LD_ADDR_VAR 0 3
66535: PUSH
66536: DOUBLE
66537: LD_VAR 0 1
66541: INC
66542: ST_TO_ADDR
66543: LD_INT 1
66545: PUSH
66546: FOR_DOWNTO
66547: IFFALSE 66577
// result := Join ( result , array [ i ] ) ;
66549: LD_ADDR_VAR 0 2
66553: PUSH
66554: LD_VAR 0 2
66558: PPUSH
66559: LD_VAR 0 1
66563: PUSH
66564: LD_VAR 0 3
66568: ARRAY
66569: PPUSH
66570: CALL 71421 0 2
66574: ST_TO_ADDR
66575: GO 66546
66577: POP
66578: POP
// end ;
66579: LD_VAR 0 2
66583: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66584: LD_INT 0
66586: PPUSH
66587: PPUSH
66588: PPUSH
66589: PPUSH
66590: PPUSH
66591: PPUSH
// if not unit or not hexes then
66592: LD_VAR 0 1
66596: NOT
66597: IFTRUE 66606
66599: PUSH
66600: LD_VAR 0 2
66604: NOT
66605: OR
66606: IFFALSE 66610
// exit ;
66608: GO 66733
// dist := 9999 ;
66610: LD_ADDR_VAR 0 5
66614: PUSH
66615: LD_INT 9999
66617: ST_TO_ADDR
// for i = 1 to hexes do
66618: LD_ADDR_VAR 0 4
66622: PUSH
66623: DOUBLE
66624: LD_INT 1
66626: DEC
66627: ST_TO_ADDR
66628: LD_VAR 0 2
66632: PUSH
66633: FOR_TO
66634: IFFALSE 66721
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66636: LD_ADDR_VAR 0 6
66640: PUSH
66641: LD_VAR 0 1
66645: PPUSH
66646: LD_VAR 0 2
66650: PUSH
66651: LD_VAR 0 4
66655: ARRAY
66656: PUSH
66657: LD_INT 1
66659: ARRAY
66660: PPUSH
66661: LD_VAR 0 2
66665: PUSH
66666: LD_VAR 0 4
66670: ARRAY
66671: PUSH
66672: LD_INT 2
66674: ARRAY
66675: PPUSH
66676: CALL_OW 297
66680: ST_TO_ADDR
// if tdist < dist then
66681: LD_VAR 0 6
66685: PUSH
66686: LD_VAR 0 5
66690: LESS
66691: IFFALSE 66719
// begin hex := hexes [ i ] ;
66693: LD_ADDR_VAR 0 8
66697: PUSH
66698: LD_VAR 0 2
66702: PUSH
66703: LD_VAR 0 4
66707: ARRAY
66708: ST_TO_ADDR
// dist := tdist ;
66709: LD_ADDR_VAR 0 5
66713: PUSH
66714: LD_VAR 0 6
66718: ST_TO_ADDR
// end ; end ;
66719: GO 66633
66721: POP
66722: POP
// result := hex ;
66723: LD_ADDR_VAR 0 3
66727: PUSH
66728: LD_VAR 0 8
66732: ST_TO_ADDR
// end ;
66733: LD_VAR 0 3
66737: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66738: LD_INT 0
66740: PPUSH
66741: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66742: LD_VAR 0 1
66746: NOT
66747: IFTRUE 66786
66749: PUSH
66750: LD_VAR 0 1
66754: PUSH
66755: LD_INT 21
66757: PUSH
66758: LD_INT 2
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 23
66767: PUSH
66768: LD_INT 2
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PPUSH
66779: CALL_OW 69
66783: IN
66784: NOT
66785: OR
66786: IFFALSE 66790
// exit ;
66788: GO 66837
// for i = 1 to 3 do
66790: LD_ADDR_VAR 0 3
66794: PUSH
66795: DOUBLE
66796: LD_INT 1
66798: DEC
66799: ST_TO_ADDR
66800: LD_INT 3
66802: PUSH
66803: FOR_TO
66804: IFFALSE 66835
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66806: LD_VAR 0 1
66810: PPUSH
66811: CALL_OW 250
66815: PPUSH
66816: LD_VAR 0 1
66820: PPUSH
66821: CALL_OW 251
66825: PPUSH
66826: LD_INT 1
66828: PPUSH
66829: CALL_OW 453
66833: GO 66803
66835: POP
66836: POP
// end ;
66837: LD_VAR 0 2
66841: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66842: LD_INT 0
66844: PPUSH
66845: PPUSH
66846: PPUSH
66847: PPUSH
66848: PPUSH
66849: PPUSH
// if not unit or not enemy_unit then
66850: LD_VAR 0 1
66854: NOT
66855: IFTRUE 66864
66857: PUSH
66858: LD_VAR 0 2
66862: NOT
66863: OR
66864: IFFALSE 66868
// exit ;
66866: GO 67339
// if GetLives ( i ) < 250 then
66868: LD_VAR 0 4
66872: PPUSH
66873: CALL_OW 256
66877: PUSH
66878: LD_INT 250
66880: LESS
66881: IFFALSE 66894
// begin ComAutodestruct ( i ) ;
66883: LD_VAR 0 4
66887: PPUSH
66888: CALL 66738 0 1
// exit ;
66892: GO 67339
// end ; x := GetX ( enemy_unit ) ;
66894: LD_ADDR_VAR 0 7
66898: PUSH
66899: LD_VAR 0 2
66903: PPUSH
66904: CALL_OW 250
66908: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66909: LD_ADDR_VAR 0 8
66913: PUSH
66914: LD_VAR 0 2
66918: PPUSH
66919: CALL_OW 251
66923: ST_TO_ADDR
// if not x or not y then
66924: LD_VAR 0 7
66928: NOT
66929: IFTRUE 66938
66931: PUSH
66932: LD_VAR 0 8
66936: NOT
66937: OR
66938: IFFALSE 66942
// exit ;
66940: GO 67339
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66942: LD_ADDR_VAR 0 6
66946: PUSH
66947: LD_VAR 0 7
66951: PPUSH
66952: LD_INT 0
66954: PPUSH
66955: LD_INT 4
66957: PPUSH
66958: CALL_OW 272
66962: PUSH
66963: LD_VAR 0 8
66967: PPUSH
66968: LD_INT 0
66970: PPUSH
66971: LD_INT 4
66973: PPUSH
66974: CALL_OW 273
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_VAR 0 7
66987: PPUSH
66988: LD_INT 1
66990: PPUSH
66991: LD_INT 4
66993: PPUSH
66994: CALL_OW 272
66998: PUSH
66999: LD_VAR 0 8
67003: PPUSH
67004: LD_INT 1
67006: PPUSH
67007: LD_INT 4
67009: PPUSH
67010: CALL_OW 273
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_VAR 0 7
67023: PPUSH
67024: LD_INT 2
67026: PPUSH
67027: LD_INT 4
67029: PPUSH
67030: CALL_OW 272
67034: PUSH
67035: LD_VAR 0 8
67039: PPUSH
67040: LD_INT 2
67042: PPUSH
67043: LD_INT 4
67045: PPUSH
67046: CALL_OW 273
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_VAR 0 7
67059: PPUSH
67060: LD_INT 3
67062: PPUSH
67063: LD_INT 4
67065: PPUSH
67066: CALL_OW 272
67070: PUSH
67071: LD_VAR 0 8
67075: PPUSH
67076: LD_INT 3
67078: PPUSH
67079: LD_INT 4
67081: PPUSH
67082: CALL_OW 273
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_VAR 0 7
67095: PPUSH
67096: LD_INT 4
67098: PPUSH
67099: LD_INT 4
67101: PPUSH
67102: CALL_OW 272
67106: PUSH
67107: LD_VAR 0 8
67111: PPUSH
67112: LD_INT 4
67114: PPUSH
67115: LD_INT 4
67117: PPUSH
67118: CALL_OW 273
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_VAR 0 7
67131: PPUSH
67132: LD_INT 5
67134: PPUSH
67135: LD_INT 4
67137: PPUSH
67138: CALL_OW 272
67142: PUSH
67143: LD_VAR 0 8
67147: PPUSH
67148: LD_INT 5
67150: PPUSH
67151: LD_INT 4
67153: PPUSH
67154: CALL_OW 273
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: ST_TO_ADDR
// for i = tmp downto 1 do
67171: LD_ADDR_VAR 0 4
67175: PUSH
67176: DOUBLE
67177: LD_VAR 0 6
67181: INC
67182: ST_TO_ADDR
67183: LD_INT 1
67185: PUSH
67186: FOR_DOWNTO
67187: IFFALSE 67290
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67189: LD_VAR 0 6
67193: PUSH
67194: LD_VAR 0 4
67198: ARRAY
67199: PUSH
67200: LD_INT 1
67202: ARRAY
67203: PPUSH
67204: LD_VAR 0 6
67208: PUSH
67209: LD_VAR 0 4
67213: ARRAY
67214: PUSH
67215: LD_INT 2
67217: ARRAY
67218: PPUSH
67219: CALL_OW 488
67223: NOT
67224: IFTRUE 67266
67226: PUSH
67227: LD_VAR 0 6
67231: PUSH
67232: LD_VAR 0 4
67236: ARRAY
67237: PUSH
67238: LD_INT 1
67240: ARRAY
67241: PPUSH
67242: LD_VAR 0 6
67246: PUSH
67247: LD_VAR 0 4
67251: ARRAY
67252: PUSH
67253: LD_INT 2
67255: ARRAY
67256: PPUSH
67257: CALL_OW 428
67261: PUSH
67262: LD_INT 0
67264: NONEQUAL
67265: OR
67266: IFFALSE 67288
// tmp := Delete ( tmp , i ) ;
67268: LD_ADDR_VAR 0 6
67272: PUSH
67273: LD_VAR 0 6
67277: PPUSH
67278: LD_VAR 0 4
67282: PPUSH
67283: CALL_OW 3
67287: ST_TO_ADDR
67288: GO 67186
67290: POP
67291: POP
// j := GetClosestHex ( unit , tmp ) ;
67292: LD_ADDR_VAR 0 5
67296: PUSH
67297: LD_VAR 0 1
67301: PPUSH
67302: LD_VAR 0 6
67306: PPUSH
67307: CALL 66584 0 2
67311: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67312: LD_VAR 0 1
67316: PPUSH
67317: LD_VAR 0 5
67321: PUSH
67322: LD_INT 1
67324: ARRAY
67325: PPUSH
67326: LD_VAR 0 5
67330: PUSH
67331: LD_INT 2
67333: ARRAY
67334: PPUSH
67335: CALL_OW 111
// end ;
67339: LD_VAR 0 3
67343: RET
// export function PrepareApemanSoldier ( ) ; begin
67344: LD_INT 0
67346: PPUSH
// uc_nation := 0 ;
67347: LD_ADDR_OWVAR 21
67351: PUSH
67352: LD_INT 0
67354: ST_TO_ADDR
// hc_sex := sex_male ;
67355: LD_ADDR_OWVAR 27
67359: PUSH
67360: LD_INT 1
67362: ST_TO_ADDR
// hc_name :=  ;
67363: LD_ADDR_OWVAR 26
67367: PUSH
67368: LD_STRING 
67370: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67371: LD_ADDR_OWVAR 28
67375: PUSH
67376: LD_INT 15
67378: ST_TO_ADDR
// hc_gallery :=  ;
67379: LD_ADDR_OWVAR 33
67383: PUSH
67384: LD_STRING 
67386: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67387: LD_ADDR_OWVAR 31
67391: PUSH
67392: LD_INT 0
67394: PPUSH
67395: LD_INT 3
67397: PPUSH
67398: CALL_OW 12
67402: PUSH
67403: LD_INT 0
67405: PPUSH
67406: LD_INT 3
67408: PPUSH
67409: CALL_OW 12
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67426: LD_ADDR_OWVAR 29
67430: PUSH
67431: LD_INT 12
67433: PUSH
67434: LD_INT 12
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: ST_TO_ADDR
// end ;
67441: LD_VAR 0 1
67445: RET
// export function PrepareApemanEngineer ( ) ; begin
67446: LD_INT 0
67448: PPUSH
// uc_nation := 0 ;
67449: LD_ADDR_OWVAR 21
67453: PUSH
67454: LD_INT 0
67456: ST_TO_ADDR
// hc_sex := sex_male ;
67457: LD_ADDR_OWVAR 27
67461: PUSH
67462: LD_INT 1
67464: ST_TO_ADDR
// hc_name :=  ;
67465: LD_ADDR_OWVAR 26
67469: PUSH
67470: LD_STRING 
67472: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67473: LD_ADDR_OWVAR 28
67477: PUSH
67478: LD_INT 16
67480: ST_TO_ADDR
// hc_gallery :=  ;
67481: LD_ADDR_OWVAR 33
67485: PUSH
67486: LD_STRING 
67488: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67489: LD_ADDR_OWVAR 31
67493: PUSH
67494: LD_INT 0
67496: PPUSH
67497: LD_INT 3
67499: PPUSH
67500: CALL_OW 12
67504: PUSH
67505: LD_INT 0
67507: PPUSH
67508: LD_INT 3
67510: PPUSH
67511: CALL_OW 12
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: LD_INT 0
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67528: LD_ADDR_OWVAR 29
67532: PUSH
67533: LD_INT 12
67535: PUSH
67536: LD_INT 12
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: ST_TO_ADDR
// end ;
67543: LD_VAR 0 1
67547: RET
// export function PrepareApeman ( agressivity ) ; begin
67548: LD_INT 0
67550: PPUSH
// uc_side := 0 ;
67551: LD_ADDR_OWVAR 20
67555: PUSH
67556: LD_INT 0
67558: ST_TO_ADDR
// uc_nation := 0 ;
67559: LD_ADDR_OWVAR 21
67563: PUSH
67564: LD_INT 0
67566: ST_TO_ADDR
// hc_sex := sex_male ;
67567: LD_ADDR_OWVAR 27
67571: PUSH
67572: LD_INT 1
67574: ST_TO_ADDR
// hc_class := class_apeman ;
67575: LD_ADDR_OWVAR 28
67579: PUSH
67580: LD_INT 12
67582: ST_TO_ADDR
// hc_gallery :=  ;
67583: LD_ADDR_OWVAR 33
67587: PUSH
67588: LD_STRING 
67590: ST_TO_ADDR
// hc_name :=  ;
67591: LD_ADDR_OWVAR 26
67595: PUSH
67596: LD_STRING 
67598: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67599: LD_ADDR_OWVAR 29
67603: PUSH
67604: LD_INT 12
67606: PUSH
67607: LD_INT 12
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: ST_TO_ADDR
// if agressivity = 0 then
67614: LD_VAR 0 1
67618: PUSH
67619: LD_INT 0
67621: EQUAL
67622: IFFALSE 67634
// hc_agressivity := 0 else
67624: LD_ADDR_OWVAR 35
67628: PUSH
67629: LD_INT 0
67631: ST_TO_ADDR
67632: GO 67655
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67634: LD_ADDR_OWVAR 35
67638: PUSH
67639: LD_VAR 0 1
67643: NEG
67644: PPUSH
67645: LD_VAR 0 1
67649: PPUSH
67650: CALL_OW 12
67654: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67655: LD_ADDR_OWVAR 31
67659: PUSH
67660: LD_INT 0
67662: PPUSH
67663: LD_INT 3
67665: PPUSH
67666: CALL_OW 12
67670: PUSH
67671: LD_INT 0
67673: PPUSH
67674: LD_INT 3
67676: PPUSH
67677: CALL_OW 12
67681: PUSH
67682: LD_INT 0
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: ST_TO_ADDR
// end ;
67694: LD_VAR 0 2
67698: RET
// export function PrepareTiger ( agressivity ) ; begin
67699: LD_INT 0
67701: PPUSH
// uc_side := 0 ;
67702: LD_ADDR_OWVAR 20
67706: PUSH
67707: LD_INT 0
67709: ST_TO_ADDR
// uc_nation := 0 ;
67710: LD_ADDR_OWVAR 21
67714: PUSH
67715: LD_INT 0
67717: ST_TO_ADDR
// InitHc ;
67718: CALL_OW 19
// hc_class := class_tiger ;
67722: LD_ADDR_OWVAR 28
67726: PUSH
67727: LD_INT 14
67729: ST_TO_ADDR
// hc_gallery :=  ;
67730: LD_ADDR_OWVAR 33
67734: PUSH
67735: LD_STRING 
67737: ST_TO_ADDR
// hc_name :=  ;
67738: LD_ADDR_OWVAR 26
67742: PUSH
67743: LD_STRING 
67745: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67746: LD_ADDR_OWVAR 35
67750: PUSH
67751: LD_VAR 0 1
67755: NEG
67756: PPUSH
67757: LD_VAR 0 1
67761: PPUSH
67762: CALL_OW 12
67766: ST_TO_ADDR
// end ;
67767: LD_VAR 0 2
67771: RET
// export function PrepareEnchidna ( ) ; begin
67772: LD_INT 0
67774: PPUSH
// uc_side := 0 ;
67775: LD_ADDR_OWVAR 20
67779: PUSH
67780: LD_INT 0
67782: ST_TO_ADDR
// uc_nation := 0 ;
67783: LD_ADDR_OWVAR 21
67787: PUSH
67788: LD_INT 0
67790: ST_TO_ADDR
// InitHc ;
67791: CALL_OW 19
// hc_class := class_baggie ;
67795: LD_ADDR_OWVAR 28
67799: PUSH
67800: LD_INT 13
67802: ST_TO_ADDR
// hc_gallery :=  ;
67803: LD_ADDR_OWVAR 33
67807: PUSH
67808: LD_STRING 
67810: ST_TO_ADDR
// hc_name :=  ;
67811: LD_ADDR_OWVAR 26
67815: PUSH
67816: LD_STRING 
67818: ST_TO_ADDR
// end ;
67819: LD_VAR 0 1
67823: RET
// export function PrepareFrog ( ) ; begin
67824: LD_INT 0
67826: PPUSH
// uc_side := 0 ;
67827: LD_ADDR_OWVAR 20
67831: PUSH
67832: LD_INT 0
67834: ST_TO_ADDR
// uc_nation := 0 ;
67835: LD_ADDR_OWVAR 21
67839: PUSH
67840: LD_INT 0
67842: ST_TO_ADDR
// InitHc ;
67843: CALL_OW 19
// hc_class := class_frog ;
67847: LD_ADDR_OWVAR 28
67851: PUSH
67852: LD_INT 19
67854: ST_TO_ADDR
// hc_gallery :=  ;
67855: LD_ADDR_OWVAR 33
67859: PUSH
67860: LD_STRING 
67862: ST_TO_ADDR
// hc_name :=  ;
67863: LD_ADDR_OWVAR 26
67867: PUSH
67868: LD_STRING 
67870: ST_TO_ADDR
// end ;
67871: LD_VAR 0 1
67875: RET
// export function PrepareFish ( ) ; begin
67876: LD_INT 0
67878: PPUSH
// uc_side := 0 ;
67879: LD_ADDR_OWVAR 20
67883: PUSH
67884: LD_INT 0
67886: ST_TO_ADDR
// uc_nation := 0 ;
67887: LD_ADDR_OWVAR 21
67891: PUSH
67892: LD_INT 0
67894: ST_TO_ADDR
// InitHc ;
67895: CALL_OW 19
// hc_class := class_fish ;
67899: LD_ADDR_OWVAR 28
67903: PUSH
67904: LD_INT 20
67906: ST_TO_ADDR
// hc_gallery :=  ;
67907: LD_ADDR_OWVAR 33
67911: PUSH
67912: LD_STRING 
67914: ST_TO_ADDR
// hc_name :=  ;
67915: LD_ADDR_OWVAR 26
67919: PUSH
67920: LD_STRING 
67922: ST_TO_ADDR
// end ;
67923: LD_VAR 0 1
67927: RET
// export function PrepareBird ( ) ; begin
67928: LD_INT 0
67930: PPUSH
// uc_side := 0 ;
67931: LD_ADDR_OWVAR 20
67935: PUSH
67936: LD_INT 0
67938: ST_TO_ADDR
// uc_nation := 0 ;
67939: LD_ADDR_OWVAR 21
67943: PUSH
67944: LD_INT 0
67946: ST_TO_ADDR
// InitHc ;
67947: CALL_OW 19
// hc_class := class_phororhacos ;
67951: LD_ADDR_OWVAR 28
67955: PUSH
67956: LD_INT 18
67958: ST_TO_ADDR
// hc_gallery :=  ;
67959: LD_ADDR_OWVAR 33
67963: PUSH
67964: LD_STRING 
67966: ST_TO_ADDR
// hc_name :=  ;
67967: LD_ADDR_OWVAR 26
67971: PUSH
67972: LD_STRING 
67974: ST_TO_ADDR
// end ;
67975: LD_VAR 0 1
67979: RET
// export function PrepareHorse ( ) ; begin
67980: LD_INT 0
67982: PPUSH
// uc_side := 0 ;
67983: LD_ADDR_OWVAR 20
67987: PUSH
67988: LD_INT 0
67990: ST_TO_ADDR
// uc_nation := 0 ;
67991: LD_ADDR_OWVAR 21
67995: PUSH
67996: LD_INT 0
67998: ST_TO_ADDR
// InitHc ;
67999: CALL_OW 19
// hc_class := class_horse ;
68003: LD_ADDR_OWVAR 28
68007: PUSH
68008: LD_INT 21
68010: ST_TO_ADDR
// hc_gallery :=  ;
68011: LD_ADDR_OWVAR 33
68015: PUSH
68016: LD_STRING 
68018: ST_TO_ADDR
// hc_name :=  ;
68019: LD_ADDR_OWVAR 26
68023: PUSH
68024: LD_STRING 
68026: ST_TO_ADDR
// end ;
68027: LD_VAR 0 1
68031: RET
// export function PrepareMastodont ( ) ; begin
68032: LD_INT 0
68034: PPUSH
// uc_side := 0 ;
68035: LD_ADDR_OWVAR 20
68039: PUSH
68040: LD_INT 0
68042: ST_TO_ADDR
// uc_nation := 0 ;
68043: LD_ADDR_OWVAR 21
68047: PUSH
68048: LD_INT 0
68050: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68051: LD_ADDR_OWVAR 37
68055: PUSH
68056: LD_INT 31
68058: ST_TO_ADDR
// vc_control := control_rider ;
68059: LD_ADDR_OWVAR 38
68063: PUSH
68064: LD_INT 4
68066: ST_TO_ADDR
// end ;
68067: LD_VAR 0 1
68071: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68072: LD_INT 0
68074: PPUSH
68075: PPUSH
68076: PPUSH
// uc_side = 0 ;
68077: LD_ADDR_OWVAR 20
68081: PUSH
68082: LD_INT 0
68084: ST_TO_ADDR
// uc_nation = 0 ;
68085: LD_ADDR_OWVAR 21
68089: PUSH
68090: LD_INT 0
68092: ST_TO_ADDR
// InitHc_All ( ) ;
68093: CALL_OW 584
// InitVc ;
68097: CALL_OW 20
// if mastodonts then
68101: LD_VAR 0 6
68105: IFFALSE 68172
// for i = 1 to mastodonts do
68107: LD_ADDR_VAR 0 11
68111: PUSH
68112: DOUBLE
68113: LD_INT 1
68115: DEC
68116: ST_TO_ADDR
68117: LD_VAR 0 6
68121: PUSH
68122: FOR_TO
68123: IFFALSE 68170
// begin vc_chassis := 31 ;
68125: LD_ADDR_OWVAR 37
68129: PUSH
68130: LD_INT 31
68132: ST_TO_ADDR
// vc_control := control_rider ;
68133: LD_ADDR_OWVAR 38
68137: PUSH
68138: LD_INT 4
68140: ST_TO_ADDR
// animal := CreateVehicle ;
68141: LD_ADDR_VAR 0 12
68145: PUSH
68146: CALL_OW 45
68150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68151: LD_VAR 0 12
68155: PPUSH
68156: LD_VAR 0 8
68160: PPUSH
68161: LD_INT 0
68163: PPUSH
68164: CALL 70314 0 3
// end ;
68168: GO 68122
68170: POP
68171: POP
// if horses then
68172: LD_VAR 0 5
68176: IFFALSE 68243
// for i = 1 to horses do
68178: LD_ADDR_VAR 0 11
68182: PUSH
68183: DOUBLE
68184: LD_INT 1
68186: DEC
68187: ST_TO_ADDR
68188: LD_VAR 0 5
68192: PUSH
68193: FOR_TO
68194: IFFALSE 68241
// begin hc_class := 21 ;
68196: LD_ADDR_OWVAR 28
68200: PUSH
68201: LD_INT 21
68203: ST_TO_ADDR
// hc_gallery :=  ;
68204: LD_ADDR_OWVAR 33
68208: PUSH
68209: LD_STRING 
68211: ST_TO_ADDR
// animal := CreateHuman ;
68212: LD_ADDR_VAR 0 12
68216: PUSH
68217: CALL_OW 44
68221: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68222: LD_VAR 0 12
68226: PPUSH
68227: LD_VAR 0 8
68231: PPUSH
68232: LD_INT 0
68234: PPUSH
68235: CALL 70314 0 3
// end ;
68239: GO 68193
68241: POP
68242: POP
// if birds then
68243: LD_VAR 0 1
68247: IFFALSE 68314
// for i = 1 to birds do
68249: LD_ADDR_VAR 0 11
68253: PUSH
68254: DOUBLE
68255: LD_INT 1
68257: DEC
68258: ST_TO_ADDR
68259: LD_VAR 0 1
68263: PUSH
68264: FOR_TO
68265: IFFALSE 68312
// begin hc_class := 18 ;
68267: LD_ADDR_OWVAR 28
68271: PUSH
68272: LD_INT 18
68274: ST_TO_ADDR
// hc_gallery =  ;
68275: LD_ADDR_OWVAR 33
68279: PUSH
68280: LD_STRING 
68282: ST_TO_ADDR
// animal := CreateHuman ;
68283: LD_ADDR_VAR 0 12
68287: PUSH
68288: CALL_OW 44
68292: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68293: LD_VAR 0 12
68297: PPUSH
68298: LD_VAR 0 8
68302: PPUSH
68303: LD_INT 0
68305: PPUSH
68306: CALL 70314 0 3
// end ;
68310: GO 68264
68312: POP
68313: POP
// if tigers then
68314: LD_VAR 0 2
68318: IFFALSE 68402
// for i = 1 to tigers do
68320: LD_ADDR_VAR 0 11
68324: PUSH
68325: DOUBLE
68326: LD_INT 1
68328: DEC
68329: ST_TO_ADDR
68330: LD_VAR 0 2
68334: PUSH
68335: FOR_TO
68336: IFFALSE 68400
// begin hc_class = class_tiger ;
68338: LD_ADDR_OWVAR 28
68342: PUSH
68343: LD_INT 14
68345: ST_TO_ADDR
// hc_gallery =  ;
68346: LD_ADDR_OWVAR 33
68350: PUSH
68351: LD_STRING 
68353: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68354: LD_ADDR_OWVAR 35
68358: PUSH
68359: LD_INT 7
68361: NEG
68362: PPUSH
68363: LD_INT 7
68365: PPUSH
68366: CALL_OW 12
68370: ST_TO_ADDR
// animal := CreateHuman ;
68371: LD_ADDR_VAR 0 12
68375: PUSH
68376: CALL_OW 44
68380: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68381: LD_VAR 0 12
68385: PPUSH
68386: LD_VAR 0 8
68390: PPUSH
68391: LD_INT 0
68393: PPUSH
68394: CALL 70314 0 3
// end ;
68398: GO 68335
68400: POP
68401: POP
// if apemans then
68402: LD_VAR 0 3
68406: IFFALSE 68529
// for i = 1 to apemans do
68408: LD_ADDR_VAR 0 11
68412: PUSH
68413: DOUBLE
68414: LD_INT 1
68416: DEC
68417: ST_TO_ADDR
68418: LD_VAR 0 3
68422: PUSH
68423: FOR_TO
68424: IFFALSE 68527
// begin hc_class = class_apeman ;
68426: LD_ADDR_OWVAR 28
68430: PUSH
68431: LD_INT 12
68433: ST_TO_ADDR
// hc_gallery =  ;
68434: LD_ADDR_OWVAR 33
68438: PUSH
68439: LD_STRING 
68441: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68442: LD_ADDR_OWVAR 35
68446: PUSH
68447: LD_INT 2
68449: NEG
68450: PPUSH
68451: LD_INT 2
68453: PPUSH
68454: CALL_OW 12
68458: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68459: LD_ADDR_OWVAR 31
68463: PUSH
68464: LD_INT 1
68466: PPUSH
68467: LD_INT 3
68469: PPUSH
68470: CALL_OW 12
68474: PUSH
68475: LD_INT 1
68477: PPUSH
68478: LD_INT 3
68480: PPUSH
68481: CALL_OW 12
68485: PUSH
68486: LD_INT 0
68488: PUSH
68489: LD_INT 0
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: ST_TO_ADDR
// animal := CreateHuman ;
68498: LD_ADDR_VAR 0 12
68502: PUSH
68503: CALL_OW 44
68507: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68508: LD_VAR 0 12
68512: PPUSH
68513: LD_VAR 0 8
68517: PPUSH
68518: LD_INT 0
68520: PPUSH
68521: CALL 70314 0 3
// end ;
68525: GO 68423
68527: POP
68528: POP
// if enchidnas then
68529: LD_VAR 0 4
68533: IFFALSE 68600
// for i = 1 to enchidnas do
68535: LD_ADDR_VAR 0 11
68539: PUSH
68540: DOUBLE
68541: LD_INT 1
68543: DEC
68544: ST_TO_ADDR
68545: LD_VAR 0 4
68549: PUSH
68550: FOR_TO
68551: IFFALSE 68598
// begin hc_class = 13 ;
68553: LD_ADDR_OWVAR 28
68557: PUSH
68558: LD_INT 13
68560: ST_TO_ADDR
// hc_gallery =  ;
68561: LD_ADDR_OWVAR 33
68565: PUSH
68566: LD_STRING 
68568: ST_TO_ADDR
// animal := CreateHuman ;
68569: LD_ADDR_VAR 0 12
68573: PUSH
68574: CALL_OW 44
68578: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68579: LD_VAR 0 12
68583: PPUSH
68584: LD_VAR 0 8
68588: PPUSH
68589: LD_INT 0
68591: PPUSH
68592: CALL 70314 0 3
// end ;
68596: GO 68550
68598: POP
68599: POP
// if fishes then
68600: LD_VAR 0 7
68604: IFFALSE 68671
// for i = 1 to fishes do
68606: LD_ADDR_VAR 0 11
68610: PUSH
68611: DOUBLE
68612: LD_INT 1
68614: DEC
68615: ST_TO_ADDR
68616: LD_VAR 0 7
68620: PUSH
68621: FOR_TO
68622: IFFALSE 68669
// begin hc_class = 20 ;
68624: LD_ADDR_OWVAR 28
68628: PUSH
68629: LD_INT 20
68631: ST_TO_ADDR
// hc_gallery =  ;
68632: LD_ADDR_OWVAR 33
68636: PUSH
68637: LD_STRING 
68639: ST_TO_ADDR
// animal := CreateHuman ;
68640: LD_ADDR_VAR 0 12
68644: PUSH
68645: CALL_OW 44
68649: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68650: LD_VAR 0 12
68654: PPUSH
68655: LD_VAR 0 9
68659: PPUSH
68660: LD_INT 0
68662: PPUSH
68663: CALL 70314 0 3
// end ;
68667: GO 68621
68669: POP
68670: POP
// end ;
68671: LD_VAR 0 10
68675: RET
// export function WantHeal ( sci , unit ) ; begin
68676: LD_INT 0
68678: PPUSH
// if GetTaskList ( sci ) > 0 then
68679: LD_VAR 0 1
68683: PPUSH
68684: CALL_OW 437
68688: PUSH
68689: LD_INT 0
68691: GREATER
68692: IFFALSE 68764
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68694: LD_VAR 0 1
68698: PPUSH
68699: CALL_OW 437
68703: PUSH
68704: LD_INT 1
68706: ARRAY
68707: PUSH
68708: LD_INT 1
68710: ARRAY
68711: PUSH
68712: LD_STRING l
68714: EQUAL
68715: IFFALSE 68742
68717: PUSH
68718: LD_VAR 0 1
68722: PPUSH
68723: CALL_OW 437
68727: PUSH
68728: LD_INT 1
68730: ARRAY
68731: PUSH
68732: LD_INT 4
68734: ARRAY
68735: PUSH
68736: LD_VAR 0 2
68740: EQUAL
68741: AND
68742: IFFALSE 68754
// result := true else
68744: LD_ADDR_VAR 0 3
68748: PUSH
68749: LD_INT 1
68751: ST_TO_ADDR
68752: GO 68762
// result := false ;
68754: LD_ADDR_VAR 0 3
68758: PUSH
68759: LD_INT 0
68761: ST_TO_ADDR
// end else
68762: GO 68772
// result := false ;
68764: LD_ADDR_VAR 0 3
68768: PUSH
68769: LD_INT 0
68771: ST_TO_ADDR
// end ;
68772: LD_VAR 0 3
68776: RET
// export function HealTarget ( sci ) ; begin
68777: LD_INT 0
68779: PPUSH
// if not sci then
68780: LD_VAR 0 1
68784: NOT
68785: IFFALSE 68789
// exit ;
68787: GO 68854
// result := 0 ;
68789: LD_ADDR_VAR 0 2
68793: PUSH
68794: LD_INT 0
68796: ST_TO_ADDR
// if GetTaskList ( sci ) then
68797: LD_VAR 0 1
68801: PPUSH
68802: CALL_OW 437
68806: IFFALSE 68854
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68808: LD_VAR 0 1
68812: PPUSH
68813: CALL_OW 437
68817: PUSH
68818: LD_INT 1
68820: ARRAY
68821: PUSH
68822: LD_INT 1
68824: ARRAY
68825: PUSH
68826: LD_STRING l
68828: EQUAL
68829: IFFALSE 68854
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68831: LD_ADDR_VAR 0 2
68835: PUSH
68836: LD_VAR 0 1
68840: PPUSH
68841: CALL_OW 437
68845: PUSH
68846: LD_INT 1
68848: ARRAY
68849: PUSH
68850: LD_INT 4
68852: ARRAY
68853: ST_TO_ADDR
// end ;
68854: LD_VAR 0 2
68858: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68859: LD_INT 0
68861: PPUSH
68862: PPUSH
68863: PPUSH
68864: PPUSH
// if not base_units then
68865: LD_VAR 0 1
68869: NOT
68870: IFFALSE 68874
// exit ;
68872: GO 68961
// result := false ;
68874: LD_ADDR_VAR 0 2
68878: PUSH
68879: LD_INT 0
68881: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68882: LD_ADDR_VAR 0 5
68886: PUSH
68887: LD_VAR 0 1
68891: PPUSH
68892: LD_INT 21
68894: PUSH
68895: LD_INT 3
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PPUSH
68902: CALL_OW 72
68906: ST_TO_ADDR
// if not tmp then
68907: LD_VAR 0 5
68911: NOT
68912: IFFALSE 68916
// exit ;
68914: GO 68961
// for i in tmp do
68916: LD_ADDR_VAR 0 3
68920: PUSH
68921: LD_VAR 0 5
68925: PUSH
68926: FOR_IN
68927: IFFALSE 68959
// begin result := EnemyInRange ( i , 22 ) ;
68929: LD_ADDR_VAR 0 2
68933: PUSH
68934: LD_VAR 0 3
68938: PPUSH
68939: LD_INT 22
68941: PPUSH
68942: CALL 66386 0 2
68946: ST_TO_ADDR
// if result then
68947: LD_VAR 0 2
68951: IFFALSE 68957
// exit ;
68953: POP
68954: POP
68955: GO 68961
// end ;
68957: GO 68926
68959: POP
68960: POP
// end ;
68961: LD_VAR 0 2
68965: RET
// export function FilterByTag ( units , tag ) ; begin
68966: LD_INT 0
68968: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68969: LD_ADDR_VAR 0 3
68973: PUSH
68974: LD_VAR 0 1
68978: PPUSH
68979: LD_INT 120
68981: PUSH
68982: LD_VAR 0 2
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PPUSH
68991: CALL_OW 72
68995: ST_TO_ADDR
// end ;
68996: LD_VAR 0 3
69000: RET
// export function IsDriver ( un ) ; begin
69001: LD_INT 0
69003: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69004: LD_ADDR_VAR 0 2
69008: PUSH
69009: LD_VAR 0 1
69013: PUSH
69014: LD_INT 55
69016: PUSH
69017: EMPTY
69018: LIST
69019: PPUSH
69020: CALL_OW 69
69024: IN
69025: ST_TO_ADDR
// end ;
69026: LD_VAR 0 2
69030: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69031: LD_INT 0
69033: PPUSH
69034: PPUSH
// list := [ ] ;
69035: LD_ADDR_VAR 0 5
69039: PUSH
69040: EMPTY
69041: ST_TO_ADDR
// case d of 0 :
69042: LD_VAR 0 3
69046: PUSH
69047: LD_INT 0
69049: DOUBLE
69050: EQUAL
69051: IFTRUE 69055
69053: GO 69188
69055: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69056: LD_ADDR_VAR 0 5
69060: PUSH
69061: LD_VAR 0 1
69065: PUSH
69066: LD_INT 4
69068: MINUS
69069: PUSH
69070: LD_VAR 0 2
69074: PUSH
69075: LD_INT 4
69077: MINUS
69078: PUSH
69079: LD_INT 2
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: LIST
69086: PUSH
69087: LD_VAR 0 1
69091: PUSH
69092: LD_INT 3
69094: MINUS
69095: PUSH
69096: LD_VAR 0 2
69100: PUSH
69101: LD_INT 1
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: LIST
69108: PUSH
69109: LD_VAR 0 1
69113: PUSH
69114: LD_INT 4
69116: PLUS
69117: PUSH
69118: LD_VAR 0 2
69122: PUSH
69123: LD_INT 4
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: LIST
69130: PUSH
69131: LD_VAR 0 1
69135: PUSH
69136: LD_INT 3
69138: PLUS
69139: PUSH
69140: LD_VAR 0 2
69144: PUSH
69145: LD_INT 3
69147: PLUS
69148: PUSH
69149: LD_INT 5
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: PUSH
69157: LD_VAR 0 1
69161: PUSH
69162: LD_VAR 0 2
69166: PUSH
69167: LD_INT 4
69169: PLUS
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: LIST
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: ST_TO_ADDR
// end ; 1 :
69186: GO 69886
69188: LD_INT 1
69190: DOUBLE
69191: EQUAL
69192: IFTRUE 69196
69194: GO 69329
69196: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69197: LD_ADDR_VAR 0 5
69201: PUSH
69202: LD_VAR 0 1
69206: PUSH
69207: LD_VAR 0 2
69211: PUSH
69212: LD_INT 4
69214: MINUS
69215: PUSH
69216: LD_INT 3
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: LIST
69223: PUSH
69224: LD_VAR 0 1
69228: PUSH
69229: LD_INT 3
69231: MINUS
69232: PUSH
69233: LD_VAR 0 2
69237: PUSH
69238: LD_INT 3
69240: MINUS
69241: PUSH
69242: LD_INT 2
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: LIST
69249: PUSH
69250: LD_VAR 0 1
69254: PUSH
69255: LD_INT 4
69257: MINUS
69258: PUSH
69259: LD_VAR 0 2
69263: PUSH
69264: LD_INT 1
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: LIST
69271: PUSH
69272: LD_VAR 0 1
69276: PUSH
69277: LD_VAR 0 2
69281: PUSH
69282: LD_INT 3
69284: PLUS
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: LIST
69293: PUSH
69294: LD_VAR 0 1
69298: PUSH
69299: LD_INT 4
69301: PLUS
69302: PUSH
69303: LD_VAR 0 2
69307: PUSH
69308: LD_INT 4
69310: PLUS
69311: PUSH
69312: LD_INT 5
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: LIST
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: ST_TO_ADDR
// end ; 2 :
69327: GO 69886
69329: LD_INT 2
69331: DOUBLE
69332: EQUAL
69333: IFTRUE 69337
69335: GO 69466
69337: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69338: LD_ADDR_VAR 0 5
69342: PUSH
69343: LD_VAR 0 1
69347: PUSH
69348: LD_VAR 0 2
69352: PUSH
69353: LD_INT 3
69355: MINUS
69356: PUSH
69357: LD_INT 3
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: LIST
69364: PUSH
69365: LD_VAR 0 1
69369: PUSH
69370: LD_INT 4
69372: PLUS
69373: PUSH
69374: LD_VAR 0 2
69378: PUSH
69379: LD_INT 4
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: LIST
69386: PUSH
69387: LD_VAR 0 1
69391: PUSH
69392: LD_VAR 0 2
69396: PUSH
69397: LD_INT 4
69399: PLUS
69400: PUSH
69401: LD_INT 0
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: LIST
69408: PUSH
69409: LD_VAR 0 1
69413: PUSH
69414: LD_INT 3
69416: MINUS
69417: PUSH
69418: LD_VAR 0 2
69422: PUSH
69423: LD_INT 1
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: LIST
69430: PUSH
69431: LD_VAR 0 1
69435: PUSH
69436: LD_INT 4
69438: MINUS
69439: PUSH
69440: LD_VAR 0 2
69444: PUSH
69445: LD_INT 4
69447: MINUS
69448: PUSH
69449: LD_INT 2
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: LIST
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: ST_TO_ADDR
// end ; 3 :
69464: GO 69886
69466: LD_INT 3
69468: DOUBLE
69469: EQUAL
69470: IFTRUE 69474
69472: GO 69607
69474: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69475: LD_ADDR_VAR 0 5
69479: PUSH
69480: LD_VAR 0 1
69484: PUSH
69485: LD_INT 3
69487: PLUS
69488: PUSH
69489: LD_VAR 0 2
69493: PUSH
69494: LD_INT 4
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: LIST
69501: PUSH
69502: LD_VAR 0 1
69506: PUSH
69507: LD_INT 4
69509: PLUS
69510: PUSH
69511: LD_VAR 0 2
69515: PUSH
69516: LD_INT 4
69518: PLUS
69519: PUSH
69520: LD_INT 5
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: LIST
69527: PUSH
69528: LD_VAR 0 1
69532: PUSH
69533: LD_INT 4
69535: MINUS
69536: PUSH
69537: LD_VAR 0 2
69541: PUSH
69542: LD_INT 1
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: LIST
69549: PUSH
69550: LD_VAR 0 1
69554: PUSH
69555: LD_VAR 0 2
69559: PUSH
69560: LD_INT 4
69562: MINUS
69563: PUSH
69564: LD_INT 3
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: LIST
69571: PUSH
69572: LD_VAR 0 1
69576: PUSH
69577: LD_INT 3
69579: MINUS
69580: PUSH
69581: LD_VAR 0 2
69585: PUSH
69586: LD_INT 3
69588: MINUS
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: LIST
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: ST_TO_ADDR
// end ; 4 :
69605: GO 69886
69607: LD_INT 4
69609: DOUBLE
69610: EQUAL
69611: IFTRUE 69615
69613: GO 69748
69615: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69616: LD_ADDR_VAR 0 5
69620: PUSH
69621: LD_VAR 0 1
69625: PUSH
69626: LD_VAR 0 2
69630: PUSH
69631: LD_INT 4
69633: PLUS
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: LIST
69642: PUSH
69643: LD_VAR 0 1
69647: PUSH
69648: LD_INT 3
69650: PLUS
69651: PUSH
69652: LD_VAR 0 2
69656: PUSH
69657: LD_INT 3
69659: PLUS
69660: PUSH
69661: LD_INT 5
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: LIST
69668: PUSH
69669: LD_VAR 0 1
69673: PUSH
69674: LD_INT 4
69676: PLUS
69677: PUSH
69678: LD_VAR 0 2
69682: PUSH
69683: LD_INT 4
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: LIST
69690: PUSH
69691: LD_VAR 0 1
69695: PUSH
69696: LD_VAR 0 2
69700: PUSH
69701: LD_INT 3
69703: MINUS
69704: PUSH
69705: LD_INT 3
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: LIST
69712: PUSH
69713: LD_VAR 0 1
69717: PUSH
69718: LD_INT 4
69720: MINUS
69721: PUSH
69722: LD_VAR 0 2
69726: PUSH
69727: LD_INT 4
69729: MINUS
69730: PUSH
69731: LD_INT 2
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: LIST
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: ST_TO_ADDR
// end ; 5 :
69746: GO 69886
69748: LD_INT 5
69750: DOUBLE
69751: EQUAL
69752: IFTRUE 69756
69754: GO 69885
69756: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69757: LD_ADDR_VAR 0 5
69761: PUSH
69762: LD_VAR 0 1
69766: PUSH
69767: LD_INT 4
69769: MINUS
69770: PUSH
69771: LD_VAR 0 2
69775: PUSH
69776: LD_INT 1
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: LIST
69783: PUSH
69784: LD_VAR 0 1
69788: PUSH
69789: LD_VAR 0 2
69793: PUSH
69794: LD_INT 4
69796: MINUS
69797: PUSH
69798: LD_INT 3
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: LIST
69805: PUSH
69806: LD_VAR 0 1
69810: PUSH
69811: LD_INT 4
69813: PLUS
69814: PUSH
69815: LD_VAR 0 2
69819: PUSH
69820: LD_INT 4
69822: PLUS
69823: PUSH
69824: LD_INT 5
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: LIST
69831: PUSH
69832: LD_VAR 0 1
69836: PUSH
69837: LD_INT 3
69839: PLUS
69840: PUSH
69841: LD_VAR 0 2
69845: PUSH
69846: LD_INT 4
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: LIST
69853: PUSH
69854: LD_VAR 0 1
69858: PUSH
69859: LD_VAR 0 2
69863: PUSH
69864: LD_INT 3
69866: PLUS
69867: PUSH
69868: LD_INT 0
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: LIST
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: ST_TO_ADDR
// end ; end ;
69883: GO 69886
69885: POP
// result := list ;
69886: LD_ADDR_VAR 0 4
69890: PUSH
69891: LD_VAR 0 5
69895: ST_TO_ADDR
// end ;
69896: LD_VAR 0 4
69900: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69901: LD_INT 0
69903: PPUSH
69904: PPUSH
69905: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69906: LD_VAR 0 1
69910: NOT
69911: IFTRUE 69939
69913: PUSH
69914: LD_VAR 0 2
69918: PUSH
69919: LD_INT 1
69921: PUSH
69922: LD_INT 2
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: LD_INT 4
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: IN
69937: NOT
69938: OR
69939: IFFALSE 69943
// exit ;
69941: GO 70026
// tmp := [ ] ;
69943: LD_ADDR_VAR 0 5
69947: PUSH
69948: EMPTY
69949: ST_TO_ADDR
// for i in units do
69950: LD_ADDR_VAR 0 4
69954: PUSH
69955: LD_VAR 0 1
69959: PUSH
69960: FOR_IN
69961: IFFALSE 69995
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69963: LD_ADDR_VAR 0 5
69967: PUSH
69968: LD_VAR 0 5
69972: PPUSH
69973: LD_VAR 0 4
69977: PPUSH
69978: LD_VAR 0 2
69982: PPUSH
69983: CALL_OW 259
69987: PPUSH
69988: CALL 71421 0 2
69992: ST_TO_ADDR
69993: GO 69960
69995: POP
69996: POP
// if not tmp then
69997: LD_VAR 0 5
70001: NOT
70002: IFFALSE 70006
// exit ;
70004: GO 70026
// result := SortListByListDesc ( units , tmp ) ;
70006: LD_ADDR_VAR 0 3
70010: PUSH
70011: LD_VAR 0 1
70015: PPUSH
70016: LD_VAR 0 5
70020: PPUSH
70021: CALL_OW 77
70025: ST_TO_ADDR
// end ;
70026: LD_VAR 0 3
70030: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70031: LD_INT 0
70033: PPUSH
70034: PPUSH
70035: PPUSH
// result := false ;
70036: LD_ADDR_VAR 0 3
70040: PUSH
70041: LD_INT 0
70043: ST_TO_ADDR
// if not building then
70044: LD_VAR 0 2
70048: NOT
70049: IFFALSE 70053
// exit ;
70051: GO 70197
// x := GetX ( building ) ;
70053: LD_ADDR_VAR 0 4
70057: PUSH
70058: LD_VAR 0 2
70062: PPUSH
70063: CALL_OW 250
70067: ST_TO_ADDR
// y := GetY ( building ) ;
70068: LD_ADDR_VAR 0 5
70072: PUSH
70073: LD_VAR 0 2
70077: PPUSH
70078: CALL_OW 251
70082: ST_TO_ADDR
// if not x or not y then
70083: LD_VAR 0 4
70087: NOT
70088: IFTRUE 70097
70090: PUSH
70091: LD_VAR 0 5
70095: NOT
70096: OR
70097: IFFALSE 70101
// exit ;
70099: GO 70197
// if GetTaskList ( unit ) then
70101: LD_VAR 0 1
70105: PPUSH
70106: CALL_OW 437
70110: IFFALSE 70197
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70112: LD_STRING e
70114: PUSH
70115: LD_VAR 0 1
70119: PPUSH
70120: CALL_OW 437
70124: PUSH
70125: LD_INT 1
70127: ARRAY
70128: PUSH
70129: LD_INT 1
70131: ARRAY
70132: EQUAL
70133: IFFALSE 70160
70135: PUSH
70136: LD_VAR 0 4
70140: PUSH
70141: LD_VAR 0 1
70145: PPUSH
70146: CALL_OW 437
70150: PUSH
70151: LD_INT 1
70153: ARRAY
70154: PUSH
70155: LD_INT 2
70157: ARRAY
70158: EQUAL
70159: AND
70160: IFFALSE 70187
70162: PUSH
70163: LD_VAR 0 5
70167: PUSH
70168: LD_VAR 0 1
70172: PPUSH
70173: CALL_OW 437
70177: PUSH
70178: LD_INT 1
70180: ARRAY
70181: PUSH
70182: LD_INT 3
70184: ARRAY
70185: EQUAL
70186: AND
70187: IFFALSE 70197
// result := true end ;
70189: LD_ADDR_VAR 0 3
70193: PUSH
70194: LD_INT 1
70196: ST_TO_ADDR
// end ;
70197: LD_VAR 0 3
70201: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70202: LD_INT 0
70204: PPUSH
// result := false ;
70205: LD_ADDR_VAR 0 4
70209: PUSH
70210: LD_INT 0
70212: ST_TO_ADDR
// if GetTaskList ( unit ) then
70213: LD_VAR 0 1
70217: PPUSH
70218: CALL_OW 437
70222: IFFALSE 70309
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70224: LD_STRING M
70226: PUSH
70227: LD_VAR 0 1
70231: PPUSH
70232: CALL_OW 437
70236: PUSH
70237: LD_INT 1
70239: ARRAY
70240: PUSH
70241: LD_INT 1
70243: ARRAY
70244: EQUAL
70245: IFFALSE 70272
70247: PUSH
70248: LD_VAR 0 2
70252: PUSH
70253: LD_VAR 0 1
70257: PPUSH
70258: CALL_OW 437
70262: PUSH
70263: LD_INT 1
70265: ARRAY
70266: PUSH
70267: LD_INT 2
70269: ARRAY
70270: EQUAL
70271: AND
70272: IFFALSE 70299
70274: PUSH
70275: LD_VAR 0 3
70279: PUSH
70280: LD_VAR 0 1
70284: PPUSH
70285: CALL_OW 437
70289: PUSH
70290: LD_INT 1
70292: ARRAY
70293: PUSH
70294: LD_INT 3
70296: ARRAY
70297: EQUAL
70298: AND
70299: IFFALSE 70309
// result := true ;
70301: LD_ADDR_VAR 0 4
70305: PUSH
70306: LD_INT 1
70308: ST_TO_ADDR
// end ; end ;
70309: LD_VAR 0 4
70313: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70314: LD_INT 0
70316: PPUSH
70317: PPUSH
70318: PPUSH
70319: PPUSH
// if not unit or not area then
70320: LD_VAR 0 1
70324: NOT
70325: IFTRUE 70334
70327: PUSH
70328: LD_VAR 0 2
70332: NOT
70333: OR
70334: IFFALSE 70338
// exit ;
70336: GO 70514
// tmp := AreaToList ( area , i ) ;
70338: LD_ADDR_VAR 0 6
70342: PUSH
70343: LD_VAR 0 2
70347: PPUSH
70348: LD_VAR 0 5
70352: PPUSH
70353: CALL_OW 517
70357: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70358: LD_ADDR_VAR 0 5
70362: PUSH
70363: DOUBLE
70364: LD_INT 1
70366: DEC
70367: ST_TO_ADDR
70368: LD_VAR 0 6
70372: PUSH
70373: LD_INT 1
70375: ARRAY
70376: PUSH
70377: FOR_TO
70378: IFFALSE 70512
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70380: LD_ADDR_VAR 0 7
70384: PUSH
70385: LD_VAR 0 6
70389: PUSH
70390: LD_INT 1
70392: ARRAY
70393: PUSH
70394: LD_VAR 0 5
70398: ARRAY
70399: PUSH
70400: LD_VAR 0 6
70404: PUSH
70405: LD_INT 2
70407: ARRAY
70408: PUSH
70409: LD_VAR 0 5
70413: ARRAY
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70419: LD_INT 92
70421: PUSH
70422: LD_VAR 0 7
70426: PUSH
70427: LD_INT 1
70429: ARRAY
70430: PUSH
70431: LD_VAR 0 7
70435: PUSH
70436: LD_INT 2
70438: ARRAY
70439: PUSH
70440: LD_INT 2
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: PPUSH
70449: CALL_OW 69
70453: PUSH
70454: LD_INT 0
70456: EQUAL
70457: IFFALSE 70510
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70459: LD_VAR 0 1
70463: PPUSH
70464: LD_VAR 0 7
70468: PUSH
70469: LD_INT 1
70471: ARRAY
70472: PPUSH
70473: LD_VAR 0 7
70477: PUSH
70478: LD_INT 2
70480: ARRAY
70481: PPUSH
70482: LD_VAR 0 3
70486: PPUSH
70487: CALL_OW 48
// result := IsPlaced ( unit ) ;
70491: LD_ADDR_VAR 0 4
70495: PUSH
70496: LD_VAR 0 1
70500: PPUSH
70501: CALL_OW 305
70505: ST_TO_ADDR
// exit ;
70506: POP
70507: POP
70508: GO 70514
// end ; end ;
70510: GO 70377
70512: POP
70513: POP
// end ;
70514: LD_VAR 0 4
70518: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70519: LD_INT 0
70521: PPUSH
70522: PPUSH
70523: PPUSH
// if not side or side > 8 then
70524: LD_VAR 0 1
70528: NOT
70529: IFTRUE 70541
70531: PUSH
70532: LD_VAR 0 1
70536: PUSH
70537: LD_INT 8
70539: GREATER
70540: OR
70541: IFFALSE 70545
// exit ;
70543: GO 70732
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70545: LD_ADDR_VAR 0 4
70549: PUSH
70550: LD_INT 22
70552: PUSH
70553: LD_VAR 0 1
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 21
70564: PUSH
70565: LD_INT 3
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PPUSH
70576: CALL_OW 69
70580: ST_TO_ADDR
// if not tmp then
70581: LD_VAR 0 4
70585: NOT
70586: IFFALSE 70590
// exit ;
70588: GO 70732
// enable_addtolog := true ;
70590: LD_ADDR_OWVAR 81
70594: PUSH
70595: LD_INT 1
70597: ST_TO_ADDR
// AddToLog ( [ ) ;
70598: LD_STRING [
70600: PPUSH
70601: CALL_OW 561
// for i in tmp do
70605: LD_ADDR_VAR 0 3
70609: PUSH
70610: LD_VAR 0 4
70614: PUSH
70615: FOR_IN
70616: IFFALSE 70723
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70618: LD_STRING [
70620: PUSH
70621: LD_VAR 0 3
70625: PPUSH
70626: CALL_OW 266
70630: STR
70631: PUSH
70632: LD_STRING , 
70634: STR
70635: PUSH
70636: LD_VAR 0 3
70640: PPUSH
70641: CALL_OW 250
70645: STR
70646: PUSH
70647: LD_STRING , 
70649: STR
70650: PUSH
70651: LD_VAR 0 3
70655: PPUSH
70656: CALL_OW 251
70660: STR
70661: PUSH
70662: LD_STRING , 
70664: STR
70665: PUSH
70666: LD_VAR 0 3
70670: PPUSH
70671: CALL_OW 254
70675: STR
70676: PUSH
70677: LD_STRING , 
70679: STR
70680: PUSH
70681: LD_VAR 0 3
70685: PPUSH
70686: LD_INT 1
70688: PPUSH
70689: CALL_OW 268
70693: STR
70694: PUSH
70695: LD_STRING , 
70697: STR
70698: PUSH
70699: LD_VAR 0 3
70703: PPUSH
70704: LD_INT 2
70706: PPUSH
70707: CALL_OW 268
70711: STR
70712: PUSH
70713: LD_STRING ],
70715: STR
70716: PPUSH
70717: CALL_OW 561
// end ;
70721: GO 70615
70723: POP
70724: POP
// AddToLog ( ]; ) ;
70725: LD_STRING ];
70727: PPUSH
70728: CALL_OW 561
// end ;
70732: LD_VAR 0 2
70736: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70737: LD_INT 0
70739: PPUSH
70740: PPUSH
70741: PPUSH
70742: PPUSH
70743: PPUSH
// if not area or not rate or not max then
70744: LD_VAR 0 1
70748: NOT
70749: IFTRUE 70758
70751: PUSH
70752: LD_VAR 0 2
70756: NOT
70757: OR
70758: IFTRUE 70767
70760: PUSH
70761: LD_VAR 0 4
70765: NOT
70766: OR
70767: IFFALSE 70771
// exit ;
70769: GO 70960
// while 1 do
70771: LD_INT 1
70773: IFFALSE 70960
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70775: LD_ADDR_VAR 0 9
70779: PUSH
70780: LD_VAR 0 1
70784: PPUSH
70785: LD_INT 1
70787: PPUSH
70788: CALL_OW 287
70792: PUSH
70793: LD_INT 10
70795: MUL
70796: ST_TO_ADDR
// r := rate / 10 ;
70797: LD_ADDR_VAR 0 7
70801: PUSH
70802: LD_VAR 0 2
70806: PUSH
70807: LD_INT 10
70809: DIVREAL
70810: ST_TO_ADDR
// time := 1 1$00 ;
70811: LD_ADDR_VAR 0 8
70815: PUSH
70816: LD_INT 2100
70818: ST_TO_ADDR
// if amount < min then
70819: LD_VAR 0 9
70823: PUSH
70824: LD_VAR 0 3
70828: LESS
70829: IFFALSE 70847
// r := r * 2 else
70831: LD_ADDR_VAR 0 7
70835: PUSH
70836: LD_VAR 0 7
70840: PUSH
70841: LD_INT 2
70843: MUL
70844: ST_TO_ADDR
70845: GO 70873
// if amount > max then
70847: LD_VAR 0 9
70851: PUSH
70852: LD_VAR 0 4
70856: GREATER
70857: IFFALSE 70873
// r := r / 2 ;
70859: LD_ADDR_VAR 0 7
70863: PUSH
70864: LD_VAR 0 7
70868: PUSH
70869: LD_INT 2
70871: DIVREAL
70872: ST_TO_ADDR
// time := time / r ;
70873: LD_ADDR_VAR 0 8
70877: PUSH
70878: LD_VAR 0 8
70882: PUSH
70883: LD_VAR 0 7
70887: DIVREAL
70888: ST_TO_ADDR
// if time < 0 then
70889: LD_VAR 0 8
70893: PUSH
70894: LD_INT 0
70896: LESS
70897: IFFALSE 70914
// time := time * - 1 ;
70899: LD_ADDR_VAR 0 8
70903: PUSH
70904: LD_VAR 0 8
70908: PUSH
70909: LD_INT 1
70911: NEG
70912: MUL
70913: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70914: LD_VAR 0 8
70918: PUSH
70919: LD_INT 35
70921: PPUSH
70922: LD_INT 875
70924: PPUSH
70925: CALL_OW 12
70929: PLUS
70930: PPUSH
70931: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70935: LD_INT 1
70937: PPUSH
70938: LD_INT 5
70940: PPUSH
70941: CALL_OW 12
70945: PPUSH
70946: LD_VAR 0 1
70950: PPUSH
70951: LD_INT 1
70953: PPUSH
70954: CALL_OW 55
// end ;
70958: GO 70771
// end ;
70960: LD_VAR 0 5
70964: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70965: LD_INT 0
70967: PPUSH
70968: PPUSH
70969: PPUSH
70970: PPUSH
70971: PPUSH
70972: PPUSH
70973: PPUSH
70974: PPUSH
// if not turrets or not factories then
70975: LD_VAR 0 1
70979: NOT
70980: IFTRUE 70989
70982: PUSH
70983: LD_VAR 0 2
70987: NOT
70988: OR
70989: IFFALSE 70993
// exit ;
70991: GO 71300
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70993: LD_ADDR_VAR 0 10
70997: PUSH
70998: LD_INT 5
71000: PUSH
71001: LD_INT 6
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 2
71010: PUSH
71011: LD_INT 4
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 3
71020: PUSH
71021: LD_INT 5
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 24
71035: PUSH
71036: LD_INT 25
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 23
71045: PUSH
71046: LD_INT 27
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 42
71059: PUSH
71060: LD_INT 43
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 44
71069: PUSH
71070: LD_INT 46
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 45
71079: PUSH
71080: LD_INT 47
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: LIST
71096: ST_TO_ADDR
// result := [ ] ;
71097: LD_ADDR_VAR 0 3
71101: PUSH
71102: EMPTY
71103: ST_TO_ADDR
// for i in turrets do
71104: LD_ADDR_VAR 0 4
71108: PUSH
71109: LD_VAR 0 1
71113: PUSH
71114: FOR_IN
71115: IFFALSE 71298
// begin nat := GetNation ( i ) ;
71117: LD_ADDR_VAR 0 7
71121: PUSH
71122: LD_VAR 0 4
71126: PPUSH
71127: CALL_OW 248
71131: ST_TO_ADDR
// weapon := 0 ;
71132: LD_ADDR_VAR 0 8
71136: PUSH
71137: LD_INT 0
71139: ST_TO_ADDR
// if not nat then
71140: LD_VAR 0 7
71144: NOT
71145: IFFALSE 71149
// continue ;
71147: GO 71114
// for j in list [ nat ] do
71149: LD_ADDR_VAR 0 5
71153: PUSH
71154: LD_VAR 0 10
71158: PUSH
71159: LD_VAR 0 7
71163: ARRAY
71164: PUSH
71165: FOR_IN
71166: IFFALSE 71207
// if GetBWeapon ( i ) = j [ 1 ] then
71168: LD_VAR 0 4
71172: PPUSH
71173: CALL_OW 269
71177: PUSH
71178: LD_VAR 0 5
71182: PUSH
71183: LD_INT 1
71185: ARRAY
71186: EQUAL
71187: IFFALSE 71205
// begin weapon := j [ 2 ] ;
71189: LD_ADDR_VAR 0 8
71193: PUSH
71194: LD_VAR 0 5
71198: PUSH
71199: LD_INT 2
71201: ARRAY
71202: ST_TO_ADDR
// break ;
71203: GO 71207
// end ;
71205: GO 71165
71207: POP
71208: POP
// if not weapon then
71209: LD_VAR 0 8
71213: NOT
71214: IFFALSE 71218
// continue ;
71216: GO 71114
// for k in factories do
71218: LD_ADDR_VAR 0 6
71222: PUSH
71223: LD_VAR 0 2
71227: PUSH
71228: FOR_IN
71229: IFFALSE 71294
// begin weapons := AvailableWeaponList ( k ) ;
71231: LD_ADDR_VAR 0 9
71235: PUSH
71236: LD_VAR 0 6
71240: PPUSH
71241: CALL_OW 478
71245: ST_TO_ADDR
// if not weapons then
71246: LD_VAR 0 9
71250: NOT
71251: IFFALSE 71255
// continue ;
71253: GO 71228
// if weapon in weapons then
71255: LD_VAR 0 8
71259: PUSH
71260: LD_VAR 0 9
71264: IN
71265: IFFALSE 71292
// begin result := [ i , weapon ] ;
71267: LD_ADDR_VAR 0 3
71271: PUSH
71272: LD_VAR 0 4
71276: PUSH
71277: LD_VAR 0 8
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: ST_TO_ADDR
// exit ;
71286: POP
71287: POP
71288: POP
71289: POP
71290: GO 71300
// end ; end ;
71292: GO 71228
71294: POP
71295: POP
// end ;
71296: GO 71114
71298: POP
71299: POP
// end ;
71300: LD_VAR 0 3
71304: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71305: LD_INT 0
71307: PPUSH
// if not side or side > 8 then
71308: LD_VAR 0 3
71312: NOT
71313: IFTRUE 71325
71315: PUSH
71316: LD_VAR 0 3
71320: PUSH
71321: LD_INT 8
71323: GREATER
71324: OR
71325: IFFALSE 71329
// exit ;
71327: GO 71388
// if not range then
71329: LD_VAR 0 4
71333: NOT
71334: IFFALSE 71345
// range := - 12 ;
71336: LD_ADDR_VAR 0 4
71340: PUSH
71341: LD_INT 12
71343: NEG
71344: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71345: LD_VAR 0 1
71349: PPUSH
71350: LD_VAR 0 2
71354: PPUSH
71355: LD_VAR 0 3
71359: PPUSH
71360: LD_VAR 0 4
71364: PPUSH
71365: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71369: LD_VAR 0 1
71373: PPUSH
71374: LD_VAR 0 2
71378: PPUSH
71379: LD_VAR 0 3
71383: PPUSH
71384: CALL_OW 331
// end ;
71388: LD_VAR 0 5
71392: RET
// export function Video ( mode ) ; begin
71393: LD_INT 0
71395: PPUSH
// ingame_video = mode ;
71396: LD_ADDR_OWVAR 52
71400: PUSH
71401: LD_VAR 0 1
71405: ST_TO_ADDR
// interface_hidden = mode ;
71406: LD_ADDR_OWVAR 54
71410: PUSH
71411: LD_VAR 0 1
71415: ST_TO_ADDR
// end ;
71416: LD_VAR 0 2
71420: RET
// export function Join ( array , element ) ; begin
71421: LD_INT 0
71423: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71424: LD_ADDR_VAR 0 3
71428: PUSH
71429: LD_VAR 0 1
71433: PPUSH
71434: LD_VAR 0 1
71438: PUSH
71439: LD_INT 1
71441: PLUS
71442: PPUSH
71443: LD_VAR 0 2
71447: PPUSH
71448: CALL_OW 1
71452: ST_TO_ADDR
// end ;
71453: LD_VAR 0 3
71457: RET
// export function JoinUnion ( array , element ) ; begin
71458: LD_INT 0
71460: PPUSH
// result := array union element ;
71461: LD_ADDR_VAR 0 3
71465: PUSH
71466: LD_VAR 0 1
71470: PUSH
71471: LD_VAR 0 2
71475: UNION
71476: ST_TO_ADDR
// end ;
71477: LD_VAR 0 3
71481: RET
// export function GetBehemoths ( side ) ; begin
71482: LD_INT 0
71484: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71485: LD_ADDR_VAR 0 2
71489: PUSH
71490: LD_INT 22
71492: PUSH
71493: LD_VAR 0 1
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 31
71504: PUSH
71505: LD_INT 25
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PPUSH
71516: CALL_OW 69
71520: ST_TO_ADDR
// end ;
71521: LD_VAR 0 2
71525: RET
// export function Shuffle ( array ) ; var i , index ; begin
71526: LD_INT 0
71528: PPUSH
71529: PPUSH
71530: PPUSH
// result := [ ] ;
71531: LD_ADDR_VAR 0 2
71535: PUSH
71536: EMPTY
71537: ST_TO_ADDR
// if not array then
71538: LD_VAR 0 1
71542: NOT
71543: IFFALSE 71547
// exit ;
71545: GO 71646
// Randomize ;
71547: CALL_OW 10
// for i = array downto 1 do
71551: LD_ADDR_VAR 0 3
71555: PUSH
71556: DOUBLE
71557: LD_VAR 0 1
71561: INC
71562: ST_TO_ADDR
71563: LD_INT 1
71565: PUSH
71566: FOR_DOWNTO
71567: IFFALSE 71644
// begin index := rand ( 1 , array ) ;
71569: LD_ADDR_VAR 0 4
71573: PUSH
71574: LD_INT 1
71576: PPUSH
71577: LD_VAR 0 1
71581: PPUSH
71582: CALL_OW 12
71586: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71587: LD_ADDR_VAR 0 2
71591: PUSH
71592: LD_VAR 0 2
71596: PPUSH
71597: LD_VAR 0 2
71601: PUSH
71602: LD_INT 1
71604: PLUS
71605: PPUSH
71606: LD_VAR 0 1
71610: PUSH
71611: LD_VAR 0 4
71615: ARRAY
71616: PPUSH
71617: CALL_OW 2
71621: ST_TO_ADDR
// array := Delete ( array , index ) ;
71622: LD_ADDR_VAR 0 1
71626: PUSH
71627: LD_VAR 0 1
71631: PPUSH
71632: LD_VAR 0 4
71636: PPUSH
71637: CALL_OW 3
71641: ST_TO_ADDR
// end ;
71642: GO 71566
71644: POP
71645: POP
// end ;
71646: LD_VAR 0 2
71650: RET
// export function GetBaseMaterials ( base ) ; begin
71651: LD_INT 0
71653: PPUSH
// result := [ 0 , 0 , 0 ] ;
71654: LD_ADDR_VAR 0 2
71658: PUSH
71659: LD_INT 0
71661: PUSH
71662: LD_INT 0
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: LIST
71672: ST_TO_ADDR
// if not base then
71673: LD_VAR 0 1
71677: NOT
71678: IFFALSE 71682
// exit ;
71680: GO 71731
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71682: LD_ADDR_VAR 0 2
71686: PUSH
71687: LD_VAR 0 1
71691: PPUSH
71692: LD_INT 1
71694: PPUSH
71695: CALL_OW 275
71699: PUSH
71700: LD_VAR 0 1
71704: PPUSH
71705: LD_INT 2
71707: PPUSH
71708: CALL_OW 275
71712: PUSH
71713: LD_VAR 0 1
71717: PPUSH
71718: LD_INT 3
71720: PPUSH
71721: CALL_OW 275
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: LIST
71730: ST_TO_ADDR
// end ;
71731: LD_VAR 0 2
71735: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71736: LD_INT 0
71738: PPUSH
71739: PPUSH
// result := array ;
71740: LD_ADDR_VAR 0 3
71744: PUSH
71745: LD_VAR 0 1
71749: ST_TO_ADDR
// if size >= result then
71750: LD_VAR 0 2
71754: PUSH
71755: LD_VAR 0 3
71759: GREATEREQUAL
71760: IFFALSE 71764
// exit ;
71762: GO 71814
// if size then
71764: LD_VAR 0 2
71768: IFFALSE 71814
// for i := array downto size do
71770: LD_ADDR_VAR 0 4
71774: PUSH
71775: DOUBLE
71776: LD_VAR 0 1
71780: INC
71781: ST_TO_ADDR
71782: LD_VAR 0 2
71786: PUSH
71787: FOR_DOWNTO
71788: IFFALSE 71812
// result := Delete ( result , result ) ;
71790: LD_ADDR_VAR 0 3
71794: PUSH
71795: LD_VAR 0 3
71799: PPUSH
71800: LD_VAR 0 3
71804: PPUSH
71805: CALL_OW 3
71809: ST_TO_ADDR
71810: GO 71787
71812: POP
71813: POP
// end ;
71814: LD_VAR 0 3
71818: RET
// export function ComExit ( unit ) ; var tmp ; begin
71819: LD_INT 0
71821: PPUSH
71822: PPUSH
// if not IsInUnit ( unit ) then
71823: LD_VAR 0 1
71827: PPUSH
71828: CALL_OW 310
71832: NOT
71833: IFFALSE 71837
// exit ;
71835: GO 71897
// tmp := IsInUnit ( unit ) ;
71837: LD_ADDR_VAR 0 3
71841: PUSH
71842: LD_VAR 0 1
71846: PPUSH
71847: CALL_OW 310
71851: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71852: LD_VAR 0 3
71856: PPUSH
71857: CALL_OW 247
71861: PUSH
71862: LD_INT 2
71864: EQUAL
71865: IFFALSE 71878
// ComExitVehicle ( unit ) else
71867: LD_VAR 0 1
71871: PPUSH
71872: CALL_OW 121
71876: GO 71887
// ComExitBuilding ( unit ) ;
71878: LD_VAR 0 1
71882: PPUSH
71883: CALL_OW 122
// result := tmp ;
71887: LD_ADDR_VAR 0 2
71891: PUSH
71892: LD_VAR 0 3
71896: ST_TO_ADDR
// end ;
71897: LD_VAR 0 2
71901: RET
// export function ComExitAll ( units ) ; var i ; begin
71902: LD_INT 0
71904: PPUSH
71905: PPUSH
// if not units then
71906: LD_VAR 0 1
71910: NOT
71911: IFFALSE 71915
// exit ;
71913: GO 71941
// for i in units do
71915: LD_ADDR_VAR 0 3
71919: PUSH
71920: LD_VAR 0 1
71924: PUSH
71925: FOR_IN
71926: IFFALSE 71939
// ComExit ( i ) ;
71928: LD_VAR 0 3
71932: PPUSH
71933: CALL 71819 0 1
71937: GO 71925
71939: POP
71940: POP
// end ;
71941: LD_VAR 0 2
71945: RET
// export function ResetHc ; begin
71946: LD_INT 0
71948: PPUSH
// InitHc ;
71949: CALL_OW 19
// hc_importance := 0 ;
71953: LD_ADDR_OWVAR 32
71957: PUSH
71958: LD_INT 0
71960: ST_TO_ADDR
// end ;
71961: LD_VAR 0 1
71965: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71966: LD_INT 0
71968: PPUSH
71969: PPUSH
71970: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71971: LD_ADDR_VAR 0 6
71975: PUSH
71976: LD_VAR 0 1
71980: PUSH
71981: LD_VAR 0 3
71985: PLUS
71986: PUSH
71987: LD_INT 2
71989: DIV
71990: ST_TO_ADDR
// if _x < 0 then
71991: LD_VAR 0 6
71995: PUSH
71996: LD_INT 0
71998: LESS
71999: IFFALSE 72016
// _x := _x * - 1 ;
72001: LD_ADDR_VAR 0 6
72005: PUSH
72006: LD_VAR 0 6
72010: PUSH
72011: LD_INT 1
72013: NEG
72014: MUL
72015: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72016: LD_ADDR_VAR 0 7
72020: PUSH
72021: LD_VAR 0 2
72025: PUSH
72026: LD_VAR 0 4
72030: PLUS
72031: PUSH
72032: LD_INT 2
72034: DIV
72035: ST_TO_ADDR
// if _y < 0 then
72036: LD_VAR 0 7
72040: PUSH
72041: LD_INT 0
72043: LESS
72044: IFFALSE 72061
// _y := _y * - 1 ;
72046: LD_ADDR_VAR 0 7
72050: PUSH
72051: LD_VAR 0 7
72055: PUSH
72056: LD_INT 1
72058: NEG
72059: MUL
72060: ST_TO_ADDR
// result := [ _x , _y ] ;
72061: LD_ADDR_VAR 0 5
72065: PUSH
72066: LD_VAR 0 6
72070: PUSH
72071: LD_VAR 0 7
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: ST_TO_ADDR
// end ;
72080: LD_VAR 0 5
72084: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72085: LD_INT 0
72087: PPUSH
72088: PPUSH
72089: PPUSH
72090: PPUSH
// task := GetTaskList ( unit ) ;
72091: LD_ADDR_VAR 0 7
72095: PUSH
72096: LD_VAR 0 1
72100: PPUSH
72101: CALL_OW 437
72105: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72106: LD_VAR 0 7
72110: NOT
72111: IFFALSE 72130
72113: PUSH
72114: LD_VAR 0 1
72118: PPUSH
72119: LD_VAR 0 2
72123: PPUSH
72124: CALL_OW 308
72128: NOT
72129: AND
72130: IFFALSE 72134
// exit ;
72132: GO 72252
// if IsInArea ( unit , area ) then
72134: LD_VAR 0 1
72138: PPUSH
72139: LD_VAR 0 2
72143: PPUSH
72144: CALL_OW 308
72148: IFFALSE 72166
// begin ComMoveToArea ( unit , goAway ) ;
72150: LD_VAR 0 1
72154: PPUSH
72155: LD_VAR 0 3
72159: PPUSH
72160: CALL_OW 113
// exit ;
72164: GO 72252
// end ; if task [ 1 ] [ 1 ] <> M then
72166: LD_VAR 0 7
72170: PUSH
72171: LD_INT 1
72173: ARRAY
72174: PUSH
72175: LD_INT 1
72177: ARRAY
72178: PUSH
72179: LD_STRING M
72181: NONEQUAL
72182: IFFALSE 72186
// exit ;
72184: GO 72252
// x := task [ 1 ] [ 2 ] ;
72186: LD_ADDR_VAR 0 5
72190: PUSH
72191: LD_VAR 0 7
72195: PUSH
72196: LD_INT 1
72198: ARRAY
72199: PUSH
72200: LD_INT 2
72202: ARRAY
72203: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72204: LD_ADDR_VAR 0 6
72208: PUSH
72209: LD_VAR 0 7
72213: PUSH
72214: LD_INT 1
72216: ARRAY
72217: PUSH
72218: LD_INT 3
72220: ARRAY
72221: ST_TO_ADDR
// if InArea ( x , y , area ) then
72222: LD_VAR 0 5
72226: PPUSH
72227: LD_VAR 0 6
72231: PPUSH
72232: LD_VAR 0 2
72236: PPUSH
72237: CALL_OW 309
72241: IFFALSE 72252
// ComStop ( unit ) ;
72243: LD_VAR 0 1
72247: PPUSH
72248: CALL_OW 141
// end ;
72252: LD_VAR 0 4
72256: RET
// export function Abs ( value ) ; begin
72257: LD_INT 0
72259: PPUSH
// result := value ;
72260: LD_ADDR_VAR 0 2
72264: PUSH
72265: LD_VAR 0 1
72269: ST_TO_ADDR
// if value < 0 then
72270: LD_VAR 0 1
72274: PUSH
72275: LD_INT 0
72277: LESS
72278: IFFALSE 72295
// result := value * - 1 ;
72280: LD_ADDR_VAR 0 2
72284: PUSH
72285: LD_VAR 0 1
72289: PUSH
72290: LD_INT 1
72292: NEG
72293: MUL
72294: ST_TO_ADDR
// end ;
72295: LD_VAR 0 2
72299: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72300: LD_INT 0
72302: PPUSH
72303: PPUSH
72304: PPUSH
72305: PPUSH
72306: PPUSH
72307: PPUSH
72308: PPUSH
72309: PPUSH
// if not unit or not building then
72310: LD_VAR 0 1
72314: NOT
72315: IFTRUE 72324
72317: PUSH
72318: LD_VAR 0 2
72322: NOT
72323: OR
72324: IFFALSE 72328
// exit ;
72326: GO 72556
// x := GetX ( building ) ;
72328: LD_ADDR_VAR 0 4
72332: PUSH
72333: LD_VAR 0 2
72337: PPUSH
72338: CALL_OW 250
72342: ST_TO_ADDR
// y := GetY ( building ) ;
72343: LD_ADDR_VAR 0 6
72347: PUSH
72348: LD_VAR 0 2
72352: PPUSH
72353: CALL_OW 251
72357: ST_TO_ADDR
// d := GetDir ( building ) ;
72358: LD_ADDR_VAR 0 8
72362: PUSH
72363: LD_VAR 0 2
72367: PPUSH
72368: CALL_OW 254
72372: ST_TO_ADDR
// r := 4 ;
72373: LD_ADDR_VAR 0 9
72377: PUSH
72378: LD_INT 4
72380: ST_TO_ADDR
// for i := 1 to 5 do
72381: LD_ADDR_VAR 0 10
72385: PUSH
72386: DOUBLE
72387: LD_INT 1
72389: DEC
72390: ST_TO_ADDR
72391: LD_INT 5
72393: PUSH
72394: FOR_TO
72395: IFFALSE 72554
// begin _x := ShiftX ( x , d , r + i ) ;
72397: LD_ADDR_VAR 0 5
72401: PUSH
72402: LD_VAR 0 4
72406: PPUSH
72407: LD_VAR 0 8
72411: PPUSH
72412: LD_VAR 0 9
72416: PUSH
72417: LD_VAR 0 10
72421: PLUS
72422: PPUSH
72423: CALL_OW 272
72427: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72428: LD_ADDR_VAR 0 7
72432: PUSH
72433: LD_VAR 0 6
72437: PPUSH
72438: LD_VAR 0 8
72442: PPUSH
72443: LD_VAR 0 9
72447: PUSH
72448: LD_VAR 0 10
72452: PLUS
72453: PPUSH
72454: CALL_OW 273
72458: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72459: LD_VAR 0 5
72463: PPUSH
72464: LD_VAR 0 7
72468: PPUSH
72469: CALL_OW 488
72473: IFFALSE 72508
72475: PUSH
72476: LD_VAR 0 5
72480: PPUSH
72481: LD_VAR 0 7
72485: PPUSH
72486: CALL_OW 428
72490: PPUSH
72491: CALL_OW 247
72495: PUSH
72496: LD_INT 3
72498: PUSH
72499: LD_INT 2
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: IN
72506: NOT
72507: AND
72508: IFFALSE 72552
// begin ComMoveXY ( unit , _x , _y ) ;
72510: LD_VAR 0 1
72514: PPUSH
72515: LD_VAR 0 5
72519: PPUSH
72520: LD_VAR 0 7
72524: PPUSH
72525: CALL_OW 111
// result := [ _x , _y ] ;
72529: LD_ADDR_VAR 0 3
72533: PUSH
72534: LD_VAR 0 5
72538: PUSH
72539: LD_VAR 0 7
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: ST_TO_ADDR
// exit ;
72548: POP
72549: POP
72550: GO 72556
// end ; end ;
72552: GO 72394
72554: POP
72555: POP
// end ;
72556: LD_VAR 0 3
72560: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72561: LD_INT 0
72563: PPUSH
72564: PPUSH
72565: PPUSH
// result := 0 ;
72566: LD_ADDR_VAR 0 3
72570: PUSH
72571: LD_INT 0
72573: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72574: LD_VAR 0 1
72578: PUSH
72579: LD_INT 0
72581: LESS
72582: IFTRUE 72594
72584: PUSH
72585: LD_VAR 0 1
72589: PUSH
72590: LD_INT 8
72592: GREATER
72593: OR
72594: IFTRUE 72606
72596: PUSH
72597: LD_VAR 0 2
72601: PUSH
72602: LD_INT 0
72604: LESS
72605: OR
72606: IFTRUE 72618
72608: PUSH
72609: LD_VAR 0 2
72613: PUSH
72614: LD_INT 8
72616: GREATER
72617: OR
72618: IFFALSE 72622
// exit ;
72620: GO 72697
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72622: LD_ADDR_VAR 0 4
72626: PUSH
72627: LD_INT 22
72629: PUSH
72630: LD_VAR 0 2
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PPUSH
72639: CALL_OW 69
72643: PUSH
72644: FOR_IN
72645: IFFALSE 72695
// begin un := UnitShoot ( i ) ;
72647: LD_ADDR_VAR 0 5
72651: PUSH
72652: LD_VAR 0 4
72656: PPUSH
72657: CALL_OW 504
72661: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72662: LD_VAR 0 5
72666: PPUSH
72667: CALL_OW 255
72671: PUSH
72672: LD_VAR 0 1
72676: EQUAL
72677: IFFALSE 72693
// begin result := un ;
72679: LD_ADDR_VAR 0 3
72683: PUSH
72684: LD_VAR 0 5
72688: ST_TO_ADDR
// exit ;
72689: POP
72690: POP
72691: GO 72697
// end ; end ;
72693: GO 72644
72695: POP
72696: POP
// end ;
72697: LD_VAR 0 3
72701: RET
// export function GetCargoBay ( units ) ; begin
72702: LD_INT 0
72704: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72705: LD_ADDR_VAR 0 2
72709: PUSH
72710: LD_VAR 0 1
72714: PPUSH
72715: LD_INT 2
72717: PUSH
72718: LD_INT 34
72720: PUSH
72721: LD_INT 12
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 34
72730: PUSH
72731: LD_INT 51
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 34
72740: PUSH
72741: LD_INT 32
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 34
72750: PUSH
72751: LD_INT 89
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: PPUSH
72765: CALL_OW 72
72769: ST_TO_ADDR
// end ;
72770: LD_VAR 0 2
72774: RET
// export function Negate ( value ) ; begin
72775: LD_INT 0
72777: PPUSH
// result := not value ;
72778: LD_ADDR_VAR 0 2
72782: PUSH
72783: LD_VAR 0 1
72787: NOT
72788: ST_TO_ADDR
// end ;
72789: LD_VAR 0 2
72793: RET
// export function Inc ( value ) ; begin
72794: LD_INT 0
72796: PPUSH
// result := value + 1 ;
72797: LD_ADDR_VAR 0 2
72801: PUSH
72802: LD_VAR 0 1
72806: PUSH
72807: LD_INT 1
72809: PLUS
72810: ST_TO_ADDR
// end ;
72811: LD_VAR 0 2
72815: RET
// export function Dec ( value ) ; begin
72816: LD_INT 0
72818: PPUSH
// result := value - 1 ;
72819: LD_ADDR_VAR 0 2
72823: PUSH
72824: LD_VAR 0 1
72828: PUSH
72829: LD_INT 1
72831: MINUS
72832: ST_TO_ADDR
// end ;
72833: LD_VAR 0 2
72837: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72838: LD_INT 0
72840: PPUSH
72841: PPUSH
72842: PPUSH
72843: PPUSH
72844: PPUSH
72845: PPUSH
72846: PPUSH
72847: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72848: LD_VAR 0 1
72852: PPUSH
72853: LD_VAR 0 2
72857: PPUSH
72858: CALL_OW 488
72862: NOT
72863: IFTRUE 72882
72865: PUSH
72866: LD_VAR 0 3
72870: PPUSH
72871: LD_VAR 0 4
72875: PPUSH
72876: CALL_OW 488
72880: NOT
72881: OR
72882: IFFALSE 72895
// begin result := - 1 ;
72884: LD_ADDR_VAR 0 5
72888: PUSH
72889: LD_INT 1
72891: NEG
72892: ST_TO_ADDR
// exit ;
72893: GO 73130
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72895: LD_ADDR_VAR 0 12
72899: PUSH
72900: LD_VAR 0 1
72904: PPUSH
72905: LD_VAR 0 2
72909: PPUSH
72910: LD_VAR 0 3
72914: PPUSH
72915: LD_VAR 0 4
72919: PPUSH
72920: CALL 71966 0 4
72924: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72925: LD_ADDR_VAR 0 11
72929: PUSH
72930: LD_VAR 0 1
72934: PPUSH
72935: LD_VAR 0 2
72939: PPUSH
72940: LD_VAR 0 12
72944: PUSH
72945: LD_INT 1
72947: ARRAY
72948: PPUSH
72949: LD_VAR 0 12
72953: PUSH
72954: LD_INT 2
72956: ARRAY
72957: PPUSH
72958: CALL_OW 298
72962: ST_TO_ADDR
// distance := 9999 ;
72963: LD_ADDR_VAR 0 10
72967: PUSH
72968: LD_INT 9999
72970: ST_TO_ADDR
// for i := 0 to 5 do
72971: LD_ADDR_VAR 0 6
72975: PUSH
72976: DOUBLE
72977: LD_INT 0
72979: DEC
72980: ST_TO_ADDR
72981: LD_INT 5
72983: PUSH
72984: FOR_TO
72985: IFFALSE 73128
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72987: LD_ADDR_VAR 0 7
72991: PUSH
72992: LD_VAR 0 1
72996: PPUSH
72997: LD_VAR 0 6
73001: PPUSH
73002: LD_VAR 0 11
73006: PPUSH
73007: CALL_OW 272
73011: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73012: LD_ADDR_VAR 0 8
73016: PUSH
73017: LD_VAR 0 2
73021: PPUSH
73022: LD_VAR 0 6
73026: PPUSH
73027: LD_VAR 0 11
73031: PPUSH
73032: CALL_OW 273
73036: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73037: LD_VAR 0 7
73041: PPUSH
73042: LD_VAR 0 8
73046: PPUSH
73047: CALL_OW 488
73051: NOT
73052: IFFALSE 73056
// continue ;
73054: GO 72984
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73056: LD_ADDR_VAR 0 9
73060: PUSH
73061: LD_VAR 0 12
73065: PUSH
73066: LD_INT 1
73068: ARRAY
73069: PPUSH
73070: LD_VAR 0 12
73074: PUSH
73075: LD_INT 2
73077: ARRAY
73078: PPUSH
73079: LD_VAR 0 7
73083: PPUSH
73084: LD_VAR 0 8
73088: PPUSH
73089: CALL_OW 298
73093: ST_TO_ADDR
// if tmp < distance then
73094: LD_VAR 0 9
73098: PUSH
73099: LD_VAR 0 10
73103: LESS
73104: IFFALSE 73126
// begin result := i ;
73106: LD_ADDR_VAR 0 5
73110: PUSH
73111: LD_VAR 0 6
73115: ST_TO_ADDR
// distance := tmp ;
73116: LD_ADDR_VAR 0 10
73120: PUSH
73121: LD_VAR 0 9
73125: ST_TO_ADDR
// end ; end ;
73126: GO 72984
73128: POP
73129: POP
// end ;
73130: LD_VAR 0 5
73134: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73135: LD_INT 0
73137: PPUSH
73138: PPUSH
// if not driver or not IsInUnit ( driver ) then
73139: LD_VAR 0 1
73143: NOT
73144: IFTRUE 73158
73146: PUSH
73147: LD_VAR 0 1
73151: PPUSH
73152: CALL_OW 310
73156: NOT
73157: OR
73158: IFFALSE 73162
// exit ;
73160: GO 73252
// vehicle := IsInUnit ( driver ) ;
73162: LD_ADDR_VAR 0 3
73166: PUSH
73167: LD_VAR 0 1
73171: PPUSH
73172: CALL_OW 310
73176: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73177: LD_VAR 0 1
73181: PPUSH
73182: LD_STRING \
73184: PUSH
73185: LD_INT 0
73187: PUSH
73188: LD_INT 0
73190: PUSH
73191: LD_INT 0
73193: PUSH
73194: LD_INT 0
73196: PUSH
73197: LD_INT 0
73199: PUSH
73200: LD_INT 0
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: PUSH
73212: LD_STRING E
73214: PUSH
73215: LD_INT 0
73217: PUSH
73218: LD_INT 0
73220: PUSH
73221: LD_VAR 0 3
73225: PUSH
73226: LD_INT 0
73228: PUSH
73229: LD_INT 0
73231: PUSH
73232: LD_INT 0
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PPUSH
73248: CALL_OW 446
// end ;
73252: LD_VAR 0 2
73256: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73257: LD_INT 0
73259: PPUSH
73260: PPUSH
// if not driver or not IsInUnit ( driver ) then
73261: LD_VAR 0 1
73265: NOT
73266: IFTRUE 73280
73268: PUSH
73269: LD_VAR 0 1
73273: PPUSH
73274: CALL_OW 310
73278: NOT
73279: OR
73280: IFFALSE 73284
// exit ;
73282: GO 73374
// vehicle := IsInUnit ( driver ) ;
73284: LD_ADDR_VAR 0 3
73288: PUSH
73289: LD_VAR 0 1
73293: PPUSH
73294: CALL_OW 310
73298: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73299: LD_VAR 0 1
73303: PPUSH
73304: LD_STRING \
73306: PUSH
73307: LD_INT 0
73309: PUSH
73310: LD_INT 0
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: LD_INT 0
73318: PUSH
73319: LD_INT 0
73321: PUSH
73322: LD_INT 0
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: PUSH
73334: LD_STRING E
73336: PUSH
73337: LD_INT 0
73339: PUSH
73340: LD_INT 0
73342: PUSH
73343: LD_VAR 0 3
73347: PUSH
73348: LD_INT 0
73350: PUSH
73351: LD_INT 0
73353: PUSH
73354: LD_INT 0
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PPUSH
73370: CALL_OW 447
// end ;
73374: LD_VAR 0 2
73378: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73379: LD_INT 0
73381: PPUSH
73382: PPUSH
73383: PPUSH
// tmp := [ ] ;
73384: LD_ADDR_VAR 0 5
73388: PUSH
73389: EMPTY
73390: ST_TO_ADDR
// for i in units do
73391: LD_ADDR_VAR 0 4
73395: PUSH
73396: LD_VAR 0 1
73400: PUSH
73401: FOR_IN
73402: IFFALSE 73440
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73404: LD_ADDR_VAR 0 5
73408: PUSH
73409: LD_VAR 0 5
73413: PPUSH
73414: LD_VAR 0 5
73418: PUSH
73419: LD_INT 1
73421: PLUS
73422: PPUSH
73423: LD_VAR 0 4
73427: PPUSH
73428: CALL_OW 256
73432: PPUSH
73433: CALL_OW 2
73437: ST_TO_ADDR
73438: GO 73401
73440: POP
73441: POP
// if not tmp then
73442: LD_VAR 0 5
73446: NOT
73447: IFFALSE 73451
// exit ;
73449: GO 73499
// if asc then
73451: LD_VAR 0 2
73455: IFFALSE 73479
// result := SortListByListAsc ( units , tmp ) else
73457: LD_ADDR_VAR 0 3
73461: PUSH
73462: LD_VAR 0 1
73466: PPUSH
73467: LD_VAR 0 5
73471: PPUSH
73472: CALL_OW 76
73476: ST_TO_ADDR
73477: GO 73499
// result := SortListByListDesc ( units , tmp ) ;
73479: LD_ADDR_VAR 0 3
73483: PUSH
73484: LD_VAR 0 1
73488: PPUSH
73489: LD_VAR 0 5
73493: PPUSH
73494: CALL_OW 77
73498: ST_TO_ADDR
// end ;
73499: LD_VAR 0 3
73503: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73504: LD_INT 0
73506: PPUSH
73507: PPUSH
// task := GetTaskList ( mech ) ;
73508: LD_ADDR_VAR 0 4
73512: PUSH
73513: LD_VAR 0 1
73517: PPUSH
73518: CALL_OW 437
73522: ST_TO_ADDR
// if not task then
73523: LD_VAR 0 4
73527: NOT
73528: IFFALSE 73532
// exit ;
73530: GO 73576
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73532: LD_ADDR_VAR 0 3
73536: PUSH
73537: LD_VAR 0 4
73541: PUSH
73542: LD_INT 1
73544: ARRAY
73545: PUSH
73546: LD_INT 1
73548: ARRAY
73549: PUSH
73550: LD_STRING r
73552: EQUAL
73553: IFFALSE 73575
73555: PUSH
73556: LD_VAR 0 4
73560: PUSH
73561: LD_INT 1
73563: ARRAY
73564: PUSH
73565: LD_INT 4
73567: ARRAY
73568: PUSH
73569: LD_VAR 0 2
73573: EQUAL
73574: AND
73575: ST_TO_ADDR
// end ;
73576: LD_VAR 0 3
73580: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73581: LD_INT 0
73583: PPUSH
// SetDir ( unit , d ) ;
73584: LD_VAR 0 1
73588: PPUSH
73589: LD_VAR 0 4
73593: PPUSH
73594: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73598: LD_ADDR_VAR 0 6
73602: PUSH
73603: LD_VAR 0 1
73607: PPUSH
73608: LD_VAR 0 2
73612: PPUSH
73613: LD_VAR 0 3
73617: PPUSH
73618: LD_VAR 0 5
73622: PPUSH
73623: CALL_OW 48
73627: ST_TO_ADDR
// end ;
73628: LD_VAR 0 6
73632: RET
// export function ToNaturalNumber ( number ) ; begin
73633: LD_INT 0
73635: PPUSH
// result := number div 1 ;
73636: LD_ADDR_VAR 0 2
73640: PUSH
73641: LD_VAR 0 1
73645: PUSH
73646: LD_INT 1
73648: DIV
73649: ST_TO_ADDR
// if number < 0 then
73650: LD_VAR 0 1
73654: PUSH
73655: LD_INT 0
73657: LESS
73658: IFFALSE 73668
// result := 0 ;
73660: LD_ADDR_VAR 0 2
73664: PUSH
73665: LD_INT 0
73667: ST_TO_ADDR
// end ;
73668: LD_VAR 0 2
73672: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73673: LD_INT 0
73675: PPUSH
73676: PPUSH
73677: PPUSH
// if not buildings then
73678: LD_VAR 0 1
73682: NOT
73683: IFFALSE 73687
// exit ;
73685: GO 73802
// tmp := [ ] ;
73687: LD_ADDR_VAR 0 5
73691: PUSH
73692: EMPTY
73693: ST_TO_ADDR
// for b in buildings do
73694: LD_ADDR_VAR 0 4
73698: PUSH
73699: LD_VAR 0 1
73703: PUSH
73704: FOR_IN
73705: IFFALSE 73743
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73707: LD_ADDR_VAR 0 5
73711: PUSH
73712: LD_VAR 0 5
73716: PPUSH
73717: LD_VAR 0 5
73721: PUSH
73722: LD_INT 1
73724: PLUS
73725: PPUSH
73726: LD_VAR 0 4
73730: PPUSH
73731: CALL_OW 266
73735: PPUSH
73736: CALL_OW 1
73740: ST_TO_ADDR
73741: GO 73704
73743: POP
73744: POP
// if not tmp then
73745: LD_VAR 0 5
73749: NOT
73750: IFFALSE 73754
// exit ;
73752: GO 73802
// if asc then
73754: LD_VAR 0 2
73758: IFFALSE 73782
// result := SortListByListAsc ( buildings , tmp ) else
73760: LD_ADDR_VAR 0 3
73764: PUSH
73765: LD_VAR 0 1
73769: PPUSH
73770: LD_VAR 0 5
73774: PPUSH
73775: CALL_OW 76
73779: ST_TO_ADDR
73780: GO 73802
// result := SortListByListDesc ( buildings , tmp ) ;
73782: LD_ADDR_VAR 0 3
73786: PUSH
73787: LD_VAR 0 1
73791: PPUSH
73792: LD_VAR 0 5
73796: PPUSH
73797: CALL_OW 77
73801: ST_TO_ADDR
// end ;
73802: LD_VAR 0 3
73806: RET
// export function SortByClass ( units , class ) ; var un ; begin
73807: LD_INT 0
73809: PPUSH
73810: PPUSH
// if not units or not class then
73811: LD_VAR 0 1
73815: NOT
73816: IFTRUE 73825
73818: PUSH
73819: LD_VAR 0 2
73823: NOT
73824: OR
73825: IFFALSE 73829
// exit ;
73827: GO 73924
// result := [ ] ;
73829: LD_ADDR_VAR 0 3
73833: PUSH
73834: EMPTY
73835: ST_TO_ADDR
// for un in units do
73836: LD_ADDR_VAR 0 4
73840: PUSH
73841: LD_VAR 0 1
73845: PUSH
73846: FOR_IN
73847: IFFALSE 73922
// if GetClass ( un ) = class then
73849: LD_VAR 0 4
73853: PPUSH
73854: CALL_OW 257
73858: PUSH
73859: LD_VAR 0 2
73863: EQUAL
73864: IFFALSE 73891
// result := Insert ( result , 1 , un ) else
73866: LD_ADDR_VAR 0 3
73870: PUSH
73871: LD_VAR 0 3
73875: PPUSH
73876: LD_INT 1
73878: PPUSH
73879: LD_VAR 0 4
73883: PPUSH
73884: CALL_OW 2
73888: ST_TO_ADDR
73889: GO 73920
// result := Replace ( result , result + 1 , un ) ;
73891: LD_ADDR_VAR 0 3
73895: PUSH
73896: LD_VAR 0 3
73900: PPUSH
73901: LD_VAR 0 3
73905: PUSH
73906: LD_INT 1
73908: PLUS
73909: PPUSH
73910: LD_VAR 0 4
73914: PPUSH
73915: CALL_OW 1
73919: ST_TO_ADDR
73920: GO 73846
73922: POP
73923: POP
// end ;
73924: LD_VAR 0 3
73928: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73929: LD_INT 0
73931: PPUSH
73932: PPUSH
73933: PPUSH
73934: PPUSH
73935: PPUSH
73936: PPUSH
73937: PPUSH
// result := [ ] ;
73938: LD_ADDR_VAR 0 4
73942: PUSH
73943: EMPTY
73944: ST_TO_ADDR
// if x - r < 0 then
73945: LD_VAR 0 1
73949: PUSH
73950: LD_VAR 0 3
73954: MINUS
73955: PUSH
73956: LD_INT 0
73958: LESS
73959: IFFALSE 73971
// min_x := 0 else
73961: LD_ADDR_VAR 0 8
73965: PUSH
73966: LD_INT 0
73968: ST_TO_ADDR
73969: GO 73987
// min_x := x - r ;
73971: LD_ADDR_VAR 0 8
73975: PUSH
73976: LD_VAR 0 1
73980: PUSH
73981: LD_VAR 0 3
73985: MINUS
73986: ST_TO_ADDR
// if y - r < 0 then
73987: LD_VAR 0 2
73991: PUSH
73992: LD_VAR 0 3
73996: MINUS
73997: PUSH
73998: LD_INT 0
74000: LESS
74001: IFFALSE 74013
// min_y := 0 else
74003: LD_ADDR_VAR 0 7
74007: PUSH
74008: LD_INT 0
74010: ST_TO_ADDR
74011: GO 74029
// min_y := y - r ;
74013: LD_ADDR_VAR 0 7
74017: PUSH
74018: LD_VAR 0 2
74022: PUSH
74023: LD_VAR 0 3
74027: MINUS
74028: ST_TO_ADDR
// max_x := x + r ;
74029: LD_ADDR_VAR 0 9
74033: PUSH
74034: LD_VAR 0 1
74038: PUSH
74039: LD_VAR 0 3
74043: PLUS
74044: ST_TO_ADDR
// max_y := y + r ;
74045: LD_ADDR_VAR 0 10
74049: PUSH
74050: LD_VAR 0 2
74054: PUSH
74055: LD_VAR 0 3
74059: PLUS
74060: ST_TO_ADDR
// for _x = min_x to max_x do
74061: LD_ADDR_VAR 0 5
74065: PUSH
74066: DOUBLE
74067: LD_VAR 0 8
74071: DEC
74072: ST_TO_ADDR
74073: LD_VAR 0 9
74077: PUSH
74078: FOR_TO
74079: IFFALSE 74180
// for _y = min_y to max_y do
74081: LD_ADDR_VAR 0 6
74085: PUSH
74086: DOUBLE
74087: LD_VAR 0 7
74091: DEC
74092: ST_TO_ADDR
74093: LD_VAR 0 10
74097: PUSH
74098: FOR_TO
74099: IFFALSE 74176
// begin if not ValidHex ( _x , _y ) then
74101: LD_VAR 0 5
74105: PPUSH
74106: LD_VAR 0 6
74110: PPUSH
74111: CALL_OW 488
74115: NOT
74116: IFFALSE 74120
// continue ;
74118: GO 74098
// if GetResourceTypeXY ( _x , _y ) then
74120: LD_VAR 0 5
74124: PPUSH
74125: LD_VAR 0 6
74129: PPUSH
74130: CALL_OW 283
74134: IFFALSE 74174
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74136: LD_ADDR_VAR 0 4
74140: PUSH
74141: LD_VAR 0 4
74145: PPUSH
74146: LD_VAR 0 4
74150: PUSH
74151: LD_INT 1
74153: PLUS
74154: PPUSH
74155: LD_VAR 0 5
74159: PUSH
74160: LD_VAR 0 6
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PPUSH
74169: CALL_OW 1
74173: ST_TO_ADDR
// end ;
74174: GO 74098
74176: POP
74177: POP
74178: GO 74078
74180: POP
74181: POP
// end ;
74182: LD_VAR 0 4
74186: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74187: LD_INT 0
74189: PPUSH
74190: PPUSH
74191: PPUSH
74192: PPUSH
74193: PPUSH
74194: PPUSH
74195: PPUSH
74196: PPUSH
// if not units then
74197: LD_VAR 0 1
74201: NOT
74202: IFFALSE 74206
// exit ;
74204: GO 74738
// result := UnitFilter ( units , [ f_ok ] ) ;
74206: LD_ADDR_VAR 0 3
74210: PUSH
74211: LD_VAR 0 1
74215: PPUSH
74216: LD_INT 50
74218: PUSH
74219: EMPTY
74220: LIST
74221: PPUSH
74222: CALL_OW 72
74226: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74227: LD_ADDR_VAR 0 8
74231: PUSH
74232: LD_VAR 0 1
74236: PUSH
74237: LD_INT 1
74239: ARRAY
74240: PPUSH
74241: CALL_OW 255
74245: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74246: LD_ADDR_VAR 0 10
74250: PUSH
74251: LD_INT 29
74253: PUSH
74254: LD_INT 91
74256: PUSH
74257: LD_INT 49
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: LIST
74264: ST_TO_ADDR
// if not result then
74265: LD_VAR 0 3
74269: NOT
74270: IFFALSE 74274
// exit ;
74272: GO 74738
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74274: LD_ADDR_VAR 0 5
74278: PUSH
74279: LD_INT 81
74281: PUSH
74282: LD_VAR 0 8
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PPUSH
74291: CALL_OW 69
74295: ST_TO_ADDR
// for i in result do
74296: LD_ADDR_VAR 0 4
74300: PUSH
74301: LD_VAR 0 3
74305: PUSH
74306: FOR_IN
74307: IFFALSE 74736
// begin tag := GetTag ( i ) + 1 ;
74309: LD_ADDR_VAR 0 9
74313: PUSH
74314: LD_VAR 0 4
74318: PPUSH
74319: CALL_OW 110
74323: PUSH
74324: LD_INT 1
74326: PLUS
74327: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74328: LD_ADDR_VAR 0 7
74332: PUSH
74333: LD_VAR 0 4
74337: PPUSH
74338: CALL_OW 250
74342: PPUSH
74343: LD_VAR 0 4
74347: PPUSH
74348: CALL_OW 251
74352: PPUSH
74353: LD_INT 4
74355: PPUSH
74356: CALL 73929 0 3
74360: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74361: LD_VAR 0 4
74365: PPUSH
74366: CALL_OW 247
74370: PUSH
74371: LD_INT 2
74373: EQUAL
74374: IFFALSE 74386
74376: PUSH
74377: LD_VAR 0 7
74381: PUSH
74382: LD_INT 2
74384: GREATER
74385: AND
74386: IFFALSE 74406
74388: PUSH
74389: LD_VAR 0 4
74393: PPUSH
74394: CALL_OW 264
74398: PUSH
74399: LD_VAR 0 10
74403: IN
74404: NOT
74405: AND
74406: IFFALSE 74445
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74408: LD_VAR 0 4
74412: PPUSH
74413: LD_VAR 0 7
74417: PUSH
74418: LD_INT 1
74420: ARRAY
74421: PUSH
74422: LD_INT 1
74424: ARRAY
74425: PPUSH
74426: LD_VAR 0 7
74430: PUSH
74431: LD_INT 1
74433: ARRAY
74434: PUSH
74435: LD_INT 2
74437: ARRAY
74438: PPUSH
74439: CALL_OW 116
74443: GO 74734
// if path > tag then
74445: LD_VAR 0 2
74449: PUSH
74450: LD_VAR 0 9
74454: GREATER
74455: IFFALSE 74663
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74457: LD_ADDR_VAR 0 6
74461: PUSH
74462: LD_VAR 0 5
74466: PPUSH
74467: LD_INT 91
74469: PUSH
74470: LD_VAR 0 4
74474: PUSH
74475: LD_INT 8
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: LIST
74482: PPUSH
74483: CALL_OW 72
74487: ST_TO_ADDR
// if nearEnemy then
74488: LD_VAR 0 6
74492: IFFALSE 74561
// begin if GetWeapon ( i ) = ru_time_lapser then
74494: LD_VAR 0 4
74498: PPUSH
74499: CALL_OW 264
74503: PUSH
74504: LD_INT 49
74506: EQUAL
74507: IFFALSE 74535
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74509: LD_VAR 0 4
74513: PPUSH
74514: LD_VAR 0 6
74518: PPUSH
74519: LD_VAR 0 4
74523: PPUSH
74524: CALL_OW 74
74528: PPUSH
74529: CALL_OW 112
74533: GO 74559
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74535: LD_VAR 0 4
74539: PPUSH
74540: LD_VAR 0 6
74544: PPUSH
74545: LD_VAR 0 4
74549: PPUSH
74550: CALL_OW 74
74554: PPUSH
74555: CALL 75819 0 2
// end else
74559: GO 74661
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74561: LD_VAR 0 4
74565: PPUSH
74566: LD_VAR 0 2
74570: PUSH
74571: LD_VAR 0 9
74575: ARRAY
74576: PUSH
74577: LD_INT 1
74579: ARRAY
74580: PPUSH
74581: LD_VAR 0 2
74585: PUSH
74586: LD_VAR 0 9
74590: ARRAY
74591: PUSH
74592: LD_INT 2
74594: ARRAY
74595: PPUSH
74596: CALL_OW 297
74600: PUSH
74601: LD_INT 6
74603: GREATER
74604: IFFALSE 74647
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74606: LD_VAR 0 4
74610: PPUSH
74611: LD_VAR 0 2
74615: PUSH
74616: LD_VAR 0 9
74620: ARRAY
74621: PUSH
74622: LD_INT 1
74624: ARRAY
74625: PPUSH
74626: LD_VAR 0 2
74630: PUSH
74631: LD_VAR 0 9
74635: ARRAY
74636: PUSH
74637: LD_INT 2
74639: ARRAY
74640: PPUSH
74641: CALL_OW 114
74645: GO 74661
// SetTag ( i , tag ) ;
74647: LD_VAR 0 4
74651: PPUSH
74652: LD_VAR 0 9
74656: PPUSH
74657: CALL_OW 109
// end else
74661: GO 74734
// if enemy then
74663: LD_VAR 0 5
74667: IFFALSE 74734
// begin if GetWeapon ( i ) = ru_time_lapser then
74669: LD_VAR 0 4
74673: PPUSH
74674: CALL_OW 264
74678: PUSH
74679: LD_INT 49
74681: EQUAL
74682: IFFALSE 74710
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74684: LD_VAR 0 4
74688: PPUSH
74689: LD_VAR 0 5
74693: PPUSH
74694: LD_VAR 0 4
74698: PPUSH
74699: CALL_OW 74
74703: PPUSH
74704: CALL_OW 112
74708: GO 74734
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74710: LD_VAR 0 4
74714: PPUSH
74715: LD_VAR 0 5
74719: PPUSH
74720: LD_VAR 0 4
74724: PPUSH
74725: CALL_OW 74
74729: PPUSH
74730: CALL 75819 0 2
// end ; end ;
74734: GO 74306
74736: POP
74737: POP
// end ;
74738: LD_VAR 0 3
74742: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74743: LD_INT 0
74745: PPUSH
74746: PPUSH
74747: PPUSH
// if not unit or IsInUnit ( unit ) then
74748: LD_VAR 0 1
74752: NOT
74753: IFTRUE 74766
74755: PUSH
74756: LD_VAR 0 1
74760: PPUSH
74761: CALL_OW 310
74765: OR
74766: IFFALSE 74770
// exit ;
74768: GO 74861
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74770: LD_ADDR_VAR 0 4
74774: PUSH
74775: LD_VAR 0 1
74779: PPUSH
74780: CALL_OW 250
74784: PPUSH
74785: LD_VAR 0 2
74789: PPUSH
74790: LD_INT 1
74792: PPUSH
74793: CALL_OW 272
74797: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74798: LD_ADDR_VAR 0 5
74802: PUSH
74803: LD_VAR 0 1
74807: PPUSH
74808: CALL_OW 251
74812: PPUSH
74813: LD_VAR 0 2
74817: PPUSH
74818: LD_INT 1
74820: PPUSH
74821: CALL_OW 273
74825: ST_TO_ADDR
// if ValidHex ( x , y ) then
74826: LD_VAR 0 4
74830: PPUSH
74831: LD_VAR 0 5
74835: PPUSH
74836: CALL_OW 488
74840: IFFALSE 74861
// ComTurnXY ( unit , x , y ) ;
74842: LD_VAR 0 1
74846: PPUSH
74847: LD_VAR 0 4
74851: PPUSH
74852: LD_VAR 0 5
74856: PPUSH
74857: CALL_OW 118
// end ;
74861: LD_VAR 0 3
74865: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74866: LD_INT 0
74868: PPUSH
74869: PPUSH
// result := false ;
74870: LD_ADDR_VAR 0 3
74874: PUSH
74875: LD_INT 0
74877: ST_TO_ADDR
// if not units then
74878: LD_VAR 0 2
74882: NOT
74883: IFFALSE 74887
// exit ;
74885: GO 74932
// for i in units do
74887: LD_ADDR_VAR 0 4
74891: PUSH
74892: LD_VAR 0 2
74896: PUSH
74897: FOR_IN
74898: IFFALSE 74930
// if See ( side , i ) then
74900: LD_VAR 0 1
74904: PPUSH
74905: LD_VAR 0 4
74909: PPUSH
74910: CALL_OW 292
74914: IFFALSE 74928
// begin result := true ;
74916: LD_ADDR_VAR 0 3
74920: PUSH
74921: LD_INT 1
74923: ST_TO_ADDR
// exit ;
74924: POP
74925: POP
74926: GO 74932
// end ;
74928: GO 74897
74930: POP
74931: POP
// end ;
74932: LD_VAR 0 3
74936: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74937: LD_INT 0
74939: PPUSH
74940: PPUSH
74941: PPUSH
74942: PPUSH
// if not unit or not points then
74943: LD_VAR 0 1
74947: NOT
74948: IFTRUE 74957
74950: PUSH
74951: LD_VAR 0 2
74955: NOT
74956: OR
74957: IFFALSE 74961
// exit ;
74959: GO 75051
// dist := 99999 ;
74961: LD_ADDR_VAR 0 5
74965: PUSH
74966: LD_INT 99999
74968: ST_TO_ADDR
// for i in points do
74969: LD_ADDR_VAR 0 4
74973: PUSH
74974: LD_VAR 0 2
74978: PUSH
74979: FOR_IN
74980: IFFALSE 75049
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74982: LD_ADDR_VAR 0 6
74986: PUSH
74987: LD_VAR 0 1
74991: PPUSH
74992: LD_VAR 0 4
74996: PUSH
74997: LD_INT 1
74999: ARRAY
75000: PPUSH
75001: LD_VAR 0 4
75005: PUSH
75006: LD_INT 2
75008: ARRAY
75009: PPUSH
75010: CALL_OW 297
75014: ST_TO_ADDR
// if tmpDist < dist then
75015: LD_VAR 0 6
75019: PUSH
75020: LD_VAR 0 5
75024: LESS
75025: IFFALSE 75047
// begin result := i ;
75027: LD_ADDR_VAR 0 3
75031: PUSH
75032: LD_VAR 0 4
75036: ST_TO_ADDR
// dist := tmpDist ;
75037: LD_ADDR_VAR 0 5
75041: PUSH
75042: LD_VAR 0 6
75046: ST_TO_ADDR
// end ; end ;
75047: GO 74979
75049: POP
75050: POP
// end ;
75051: LD_VAR 0 3
75055: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75056: LD_INT 0
75058: PPUSH
// uc_side := side ;
75059: LD_ADDR_OWVAR 20
75063: PUSH
75064: LD_VAR 0 1
75068: ST_TO_ADDR
// uc_nation := 3 ;
75069: LD_ADDR_OWVAR 21
75073: PUSH
75074: LD_INT 3
75076: ST_TO_ADDR
// vc_chassis := 25 ;
75077: LD_ADDR_OWVAR 37
75081: PUSH
75082: LD_INT 25
75084: ST_TO_ADDR
// vc_engine := engine_siberite ;
75085: LD_ADDR_OWVAR 39
75089: PUSH
75090: LD_INT 3
75092: ST_TO_ADDR
// vc_control := control_computer ;
75093: LD_ADDR_OWVAR 38
75097: PUSH
75098: LD_INT 3
75100: ST_TO_ADDR
// vc_weapon := 59 ;
75101: LD_ADDR_OWVAR 40
75105: PUSH
75106: LD_INT 59
75108: ST_TO_ADDR
// result := CreateVehicle ;
75109: LD_ADDR_VAR 0 5
75113: PUSH
75114: CALL_OW 45
75118: ST_TO_ADDR
// SetDir ( result , d ) ;
75119: LD_VAR 0 5
75123: PPUSH
75124: LD_VAR 0 4
75128: PPUSH
75129: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75133: LD_VAR 0 5
75137: PPUSH
75138: LD_VAR 0 2
75142: PPUSH
75143: LD_VAR 0 3
75147: PPUSH
75148: LD_INT 0
75150: PPUSH
75151: CALL_OW 48
// end ;
75155: LD_VAR 0 5
75159: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75160: LD_INT 0
75162: PPUSH
75163: PPUSH
75164: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75165: LD_ADDR_VAR 0 2
75169: PUSH
75170: LD_INT 0
75172: PUSH
75173: LD_INT 0
75175: PUSH
75176: LD_INT 0
75178: PUSH
75179: LD_INT 0
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75188: LD_VAR 0 1
75192: NOT
75193: IFTRUE 75226
75195: PUSH
75196: LD_VAR 0 1
75200: PPUSH
75201: CALL_OW 264
75205: PUSH
75206: LD_INT 12
75208: PUSH
75209: LD_INT 51
75211: PUSH
75212: LD_INT 32
75214: PUSH
75215: LD_INT 89
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: IN
75224: NOT
75225: OR
75226: IFFALSE 75230
// exit ;
75228: GO 75328
// for i := 1 to 3 do
75230: LD_ADDR_VAR 0 3
75234: PUSH
75235: DOUBLE
75236: LD_INT 1
75238: DEC
75239: ST_TO_ADDR
75240: LD_INT 3
75242: PUSH
75243: FOR_TO
75244: IFFALSE 75326
// begin tmp := GetCargo ( cargo , i ) ;
75246: LD_ADDR_VAR 0 4
75250: PUSH
75251: LD_VAR 0 1
75255: PPUSH
75256: LD_VAR 0 3
75260: PPUSH
75261: CALL_OW 289
75265: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75266: LD_ADDR_VAR 0 2
75270: PUSH
75271: LD_VAR 0 2
75275: PPUSH
75276: LD_VAR 0 3
75280: PPUSH
75281: LD_VAR 0 4
75285: PPUSH
75286: CALL_OW 1
75290: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75291: LD_ADDR_VAR 0 2
75295: PUSH
75296: LD_VAR 0 2
75300: PPUSH
75301: LD_INT 4
75303: PPUSH
75304: LD_VAR 0 2
75308: PUSH
75309: LD_INT 4
75311: ARRAY
75312: PUSH
75313: LD_VAR 0 4
75317: PLUS
75318: PPUSH
75319: CALL_OW 1
75323: ST_TO_ADDR
// end ;
75324: GO 75243
75326: POP
75327: POP
// end ;
75328: LD_VAR 0 2
75332: RET
// export function Length ( array ) ; begin
75333: LD_INT 0
75335: PPUSH
// result := array + 0 ;
75336: LD_ADDR_VAR 0 2
75340: PUSH
75341: LD_VAR 0 1
75345: PUSH
75346: LD_INT 0
75348: PLUS
75349: ST_TO_ADDR
// end ;
75350: LD_VAR 0 2
75354: RET
// export function PrepareArray ( array ) ; begin
75355: LD_INT 0
75357: PPUSH
// result := array diff 0 ;
75358: LD_ADDR_VAR 0 2
75362: PUSH
75363: LD_VAR 0 1
75367: PUSH
75368: LD_INT 0
75370: DIFF
75371: ST_TO_ADDR
// if not result [ 1 ] then
75372: LD_VAR 0 2
75376: PUSH
75377: LD_INT 1
75379: ARRAY
75380: NOT
75381: IFFALSE 75401
// result := Delete ( result , 1 ) ;
75383: LD_ADDR_VAR 0 2
75387: PUSH
75388: LD_VAR 0 2
75392: PPUSH
75393: LD_INT 1
75395: PPUSH
75396: CALL_OW 3
75400: ST_TO_ADDR
// end ;
75401: LD_VAR 0 2
75405: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75406: LD_INT 0
75408: PPUSH
75409: PPUSH
75410: PPUSH
75411: PPUSH
// sibRocketRange := 25 ;
75412: LD_ADDR_VAR 0 6
75416: PUSH
75417: LD_INT 25
75419: ST_TO_ADDR
// result := false ;
75420: LD_ADDR_VAR 0 4
75424: PUSH
75425: LD_INT 0
75427: ST_TO_ADDR
// for i := 0 to 5 do
75428: LD_ADDR_VAR 0 5
75432: PUSH
75433: DOUBLE
75434: LD_INT 0
75436: DEC
75437: ST_TO_ADDR
75438: LD_INT 5
75440: PUSH
75441: FOR_TO
75442: IFFALSE 75509
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75444: LD_VAR 0 1
75448: PPUSH
75449: LD_VAR 0 5
75453: PPUSH
75454: LD_VAR 0 6
75458: PPUSH
75459: CALL_OW 272
75463: PPUSH
75464: LD_VAR 0 2
75468: PPUSH
75469: LD_VAR 0 5
75473: PPUSH
75474: LD_VAR 0 6
75478: PPUSH
75479: CALL_OW 273
75483: PPUSH
75484: LD_VAR 0 3
75488: PPUSH
75489: CALL_OW 309
75493: IFFALSE 75507
// begin result := true ;
75495: LD_ADDR_VAR 0 4
75499: PUSH
75500: LD_INT 1
75502: ST_TO_ADDR
// exit ;
75503: POP
75504: POP
75505: GO 75511
// end ;
75507: GO 75441
75509: POP
75510: POP
// end ;
75511: LD_VAR 0 4
75515: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75516: LD_INT 0
75518: PPUSH
75519: PPUSH
75520: PPUSH
// if btype = b_depot then
75521: LD_VAR 0 2
75525: PUSH
75526: LD_INT 0
75528: EQUAL
75529: IFFALSE 75541
// begin result := true ;
75531: LD_ADDR_VAR 0 3
75535: PUSH
75536: LD_INT 1
75538: ST_TO_ADDR
// exit ;
75539: GO 75661
// end ; pom := GetBase ( depot ) ;
75541: LD_ADDR_VAR 0 4
75545: PUSH
75546: LD_VAR 0 1
75550: PPUSH
75551: CALL_OW 274
75555: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75556: LD_ADDR_VAR 0 5
75560: PUSH
75561: LD_VAR 0 2
75565: PPUSH
75566: LD_VAR 0 1
75570: PPUSH
75571: CALL_OW 248
75575: PPUSH
75576: CALL_OW 450
75580: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75581: LD_ADDR_VAR 0 3
75585: PUSH
75586: LD_VAR 0 4
75590: PPUSH
75591: LD_INT 1
75593: PPUSH
75594: CALL_OW 275
75598: PUSH
75599: LD_VAR 0 5
75603: PUSH
75604: LD_INT 1
75606: ARRAY
75607: GREATEREQUAL
75608: IFFALSE 75634
75610: PUSH
75611: LD_VAR 0 4
75615: PPUSH
75616: LD_INT 2
75618: PPUSH
75619: CALL_OW 275
75623: PUSH
75624: LD_VAR 0 5
75628: PUSH
75629: LD_INT 2
75631: ARRAY
75632: GREATEREQUAL
75633: AND
75634: IFFALSE 75660
75636: PUSH
75637: LD_VAR 0 4
75641: PPUSH
75642: LD_INT 3
75644: PPUSH
75645: CALL_OW 275
75649: PUSH
75650: LD_VAR 0 5
75654: PUSH
75655: LD_INT 3
75657: ARRAY
75658: GREATEREQUAL
75659: AND
75660: ST_TO_ADDR
// end ;
75661: LD_VAR 0 3
75665: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75666: LD_INT 0
75668: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75669: LD_VAR 0 1
75673: PPUSH
75674: LD_VAR 0 2
75678: PPUSH
75679: LD_INT 0
75681: PPUSH
75682: LD_INT 0
75684: PPUSH
75685: LD_INT 1
75687: PPUSH
75688: LD_INT 0
75690: PPUSH
75691: CALL_OW 587
// end ;
75695: LD_VAR 0 3
75699: RET
// export function CenterOnNow ( unit ) ; begin
75700: LD_INT 0
75702: PPUSH
// result := IsInUnit ( unit ) ;
75703: LD_ADDR_VAR 0 2
75707: PUSH
75708: LD_VAR 0 1
75712: PPUSH
75713: CALL_OW 310
75717: ST_TO_ADDR
// if not result then
75718: LD_VAR 0 2
75722: NOT
75723: IFFALSE 75735
// result := unit ;
75725: LD_ADDR_VAR 0 2
75729: PUSH
75730: LD_VAR 0 1
75734: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75735: LD_VAR 0 1
75739: PPUSH
75740: CALL_OW 87
// end ;
75744: LD_VAR 0 2
75748: RET
// export function ComMoveHex ( unit , hex ) ; begin
75749: LD_INT 0
75751: PPUSH
// if not hex then
75752: LD_VAR 0 2
75756: NOT
75757: IFFALSE 75761
// exit ;
75759: GO 75814
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75761: LD_VAR 0 2
75765: PUSH
75766: LD_INT 1
75768: ARRAY
75769: PPUSH
75770: LD_VAR 0 2
75774: PUSH
75775: LD_INT 2
75777: ARRAY
75778: PPUSH
75779: CALL_OW 428
75783: IFFALSE 75787
// exit ;
75785: GO 75814
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75787: LD_VAR 0 1
75791: PPUSH
75792: LD_VAR 0 2
75796: PUSH
75797: LD_INT 1
75799: ARRAY
75800: PPUSH
75801: LD_VAR 0 2
75805: PUSH
75806: LD_INT 2
75808: ARRAY
75809: PPUSH
75810: CALL_OW 111
// end ;
75814: LD_VAR 0 3
75818: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75819: LD_INT 0
75821: PPUSH
75822: PPUSH
75823: PPUSH
// if not unit or not enemy then
75824: LD_VAR 0 1
75828: NOT
75829: IFTRUE 75838
75831: PUSH
75832: LD_VAR 0 2
75836: NOT
75837: OR
75838: IFFALSE 75842
// exit ;
75840: GO 75968
// x := GetX ( enemy ) ;
75842: LD_ADDR_VAR 0 4
75846: PUSH
75847: LD_VAR 0 2
75851: PPUSH
75852: CALL_OW 250
75856: ST_TO_ADDR
// y := GetY ( enemy ) ;
75857: LD_ADDR_VAR 0 5
75861: PUSH
75862: LD_VAR 0 2
75866: PPUSH
75867: CALL_OW 251
75871: ST_TO_ADDR
// if ValidHex ( x , y ) then
75872: LD_VAR 0 4
75876: PPUSH
75877: LD_VAR 0 5
75881: PPUSH
75882: CALL_OW 488
75886: IFFALSE 75968
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75888: LD_VAR 0 2
75892: PPUSH
75893: CALL_OW 247
75897: PUSH
75898: LD_INT 3
75900: PUSH
75901: LD_INT 2
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: IN
75908: IFTRUE 75931
75910: PUSH
75911: LD_VAR 0 1
75915: PPUSH
75916: CALL_OW 255
75920: PPUSH
75921: LD_VAR 0 2
75925: PPUSH
75926: CALL_OW 292
75930: OR
75931: IFFALSE 75949
// ComAttackUnit ( unit , enemy ) else
75933: LD_VAR 0 1
75937: PPUSH
75938: LD_VAR 0 2
75942: PPUSH
75943: CALL_OW 115
75947: GO 75968
// ComAgressiveMove ( unit , x , y ) ;
75949: LD_VAR 0 1
75953: PPUSH
75954: LD_VAR 0 4
75958: PPUSH
75959: LD_VAR 0 5
75963: PPUSH
75964: CALL_OW 114
// end ;
75968: LD_VAR 0 3
75972: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75973: LD_INT 0
75975: PPUSH
75976: PPUSH
75977: PPUSH
// list := AreaToList ( area , 0 ) ;
75978: LD_ADDR_VAR 0 5
75982: PUSH
75983: LD_VAR 0 1
75987: PPUSH
75988: LD_INT 0
75990: PPUSH
75991: CALL_OW 517
75995: ST_TO_ADDR
// if not list then
75996: LD_VAR 0 5
76000: NOT
76001: IFFALSE 76005
// exit ;
76003: GO 76135
// if all then
76005: LD_VAR 0 2
76009: IFFALSE 76097
// begin for i := 1 to list [ 1 ] do
76011: LD_ADDR_VAR 0 4
76015: PUSH
76016: DOUBLE
76017: LD_INT 1
76019: DEC
76020: ST_TO_ADDR
76021: LD_VAR 0 5
76025: PUSH
76026: LD_INT 1
76028: ARRAY
76029: PUSH
76030: FOR_TO
76031: IFFALSE 76093
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76033: LD_ADDR_VAR 0 3
76037: PUSH
76038: LD_VAR 0 3
76042: PPUSH
76043: LD_VAR 0 3
76047: PUSH
76048: LD_INT 1
76050: PLUS
76051: PPUSH
76052: LD_VAR 0 5
76056: PUSH
76057: LD_INT 1
76059: ARRAY
76060: PUSH
76061: LD_VAR 0 4
76065: ARRAY
76066: PUSH
76067: LD_VAR 0 5
76071: PUSH
76072: LD_INT 2
76074: ARRAY
76075: PUSH
76076: LD_VAR 0 4
76080: ARRAY
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: PPUSH
76086: CALL_OW 1
76090: ST_TO_ADDR
76091: GO 76030
76093: POP
76094: POP
// exit ;
76095: GO 76135
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76097: LD_ADDR_VAR 0 3
76101: PUSH
76102: LD_VAR 0 5
76106: PUSH
76107: LD_INT 1
76109: ARRAY
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PUSH
76115: LD_VAR 0 5
76119: PUSH
76120: LD_INT 2
76122: ARRAY
76123: PUSH
76124: LD_INT 1
76126: ARRAY
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PUSH
76132: EMPTY
76133: LIST
76134: ST_TO_ADDR
// end ;
76135: LD_VAR 0 3
76139: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76140: LD_INT 0
76142: PPUSH
76143: PPUSH
// list := AreaToList ( area , 0 ) ;
76144: LD_ADDR_VAR 0 4
76148: PUSH
76149: LD_VAR 0 1
76153: PPUSH
76154: LD_INT 0
76156: PPUSH
76157: CALL_OW 517
76161: ST_TO_ADDR
// if not list then
76162: LD_VAR 0 4
76166: NOT
76167: IFFALSE 76171
// exit ;
76169: GO 76212
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76171: LD_ADDR_VAR 0 3
76175: PUSH
76176: LD_VAR 0 4
76180: PUSH
76181: LD_INT 1
76183: ARRAY
76184: PUSH
76185: LD_INT 1
76187: ARRAY
76188: PUSH
76189: LD_VAR 0 4
76193: PUSH
76194: LD_INT 2
76196: ARRAY
76197: PUSH
76198: LD_INT 1
76200: ARRAY
76201: PUSH
76202: LD_VAR 0 2
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: LIST
76211: ST_TO_ADDR
// end ;
76212: LD_VAR 0 3
76216: RET
// export function First ( array ) ; begin
76217: LD_INT 0
76219: PPUSH
// if not array then
76220: LD_VAR 0 1
76224: NOT
76225: IFFALSE 76229
// exit ;
76227: GO 76243
// result := array [ 1 ] ;
76229: LD_ADDR_VAR 0 2
76233: PUSH
76234: LD_VAR 0 1
76238: PUSH
76239: LD_INT 1
76241: ARRAY
76242: ST_TO_ADDR
// end ;
76243: LD_VAR 0 2
76247: RET
// export function Last ( array ) ; begin
76248: LD_INT 0
76250: PPUSH
// if not array then
76251: LD_VAR 0 1
76255: NOT
76256: IFFALSE 76260
// exit ;
76258: GO 76276
// result := array [ array ] ;
76260: LD_ADDR_VAR 0 2
76264: PUSH
76265: LD_VAR 0 1
76269: PUSH
76270: LD_VAR 0 1
76274: ARRAY
76275: ST_TO_ADDR
// end ;
76276: LD_VAR 0 2
76280: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76281: LD_INT 0
76283: PPUSH
76284: PPUSH
// result := [ ] ;
76285: LD_ADDR_VAR 0 5
76289: PUSH
76290: EMPTY
76291: ST_TO_ADDR
// if not array then
76292: LD_VAR 0 1
76296: NOT
76297: IFFALSE 76301
// exit ;
76299: GO 76413
// for i := 1 to array do
76301: LD_ADDR_VAR 0 6
76305: PUSH
76306: DOUBLE
76307: LD_INT 1
76309: DEC
76310: ST_TO_ADDR
76311: LD_VAR 0 1
76315: PUSH
76316: FOR_TO
76317: IFFALSE 76411
// if array [ i ] [ index ] = value then
76319: LD_VAR 0 1
76323: PUSH
76324: LD_VAR 0 6
76328: ARRAY
76329: PUSH
76330: LD_VAR 0 2
76334: ARRAY
76335: PUSH
76336: LD_VAR 0 3
76340: EQUAL
76341: IFFALSE 76409
// begin if indexColumn then
76343: LD_VAR 0 4
76347: IFFALSE 76383
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76349: LD_ADDR_VAR 0 5
76353: PUSH
76354: LD_VAR 0 5
76358: PPUSH
76359: LD_VAR 0 1
76363: PUSH
76364: LD_VAR 0 6
76368: ARRAY
76369: PUSH
76370: LD_VAR 0 4
76374: ARRAY
76375: PPUSH
76376: CALL 71421 0 2
76380: ST_TO_ADDR
76381: GO 76409
// result := Join ( result , array [ i ] ) ;
76383: LD_ADDR_VAR 0 5
76387: PUSH
76388: LD_VAR 0 5
76392: PPUSH
76393: LD_VAR 0 1
76397: PUSH
76398: LD_VAR 0 6
76402: ARRAY
76403: PPUSH
76404: CALL 71421 0 2
76408: ST_TO_ADDR
// end ;
76409: GO 76316
76411: POP
76412: POP
// end ;
76413: LD_VAR 0 5
76417: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76418: LD_INT 0
76420: PPUSH
// if not vehicles or not parkingPoint then
76421: LD_VAR 0 1
76425: NOT
76426: IFTRUE 76435
76428: PUSH
76429: LD_VAR 0 2
76433: NOT
76434: OR
76435: IFFALSE 76439
// exit ;
76437: GO 76537
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76439: LD_ADDR_VAR 0 1
76443: PUSH
76444: LD_VAR 0 1
76448: PPUSH
76449: LD_INT 50
76451: PUSH
76452: EMPTY
76453: LIST
76454: PUSH
76455: LD_INT 3
76457: PUSH
76458: LD_INT 92
76460: PUSH
76461: LD_VAR 0 2
76465: PUSH
76466: LD_INT 1
76468: ARRAY
76469: PUSH
76470: LD_VAR 0 2
76474: PUSH
76475: LD_INT 2
76477: ARRAY
76478: PUSH
76479: LD_INT 8
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PUSH
76492: EMPTY
76493: LIST
76494: LIST
76495: PPUSH
76496: CALL_OW 72
76500: ST_TO_ADDR
// if not vehicles then
76501: LD_VAR 0 1
76505: NOT
76506: IFFALSE 76510
// exit ;
76508: GO 76537
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76510: LD_VAR 0 1
76514: PPUSH
76515: LD_VAR 0 2
76519: PUSH
76520: LD_INT 1
76522: ARRAY
76523: PPUSH
76524: LD_VAR 0 2
76528: PUSH
76529: LD_INT 2
76531: ARRAY
76532: PPUSH
76533: CALL_OW 111
// end ;
76537: LD_VAR 0 3
76541: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76542: LD_INT 0
76544: PPUSH
76545: PPUSH
76546: PPUSH
// if not side or not area then
76547: LD_VAR 0 1
76551: NOT
76552: IFTRUE 76561
76554: PUSH
76555: LD_VAR 0 2
76559: NOT
76560: OR
76561: IFFALSE 76565
// exit ;
76563: GO 76684
// tmp := AreaToList ( area , 0 ) ;
76565: LD_ADDR_VAR 0 5
76569: PUSH
76570: LD_VAR 0 2
76574: PPUSH
76575: LD_INT 0
76577: PPUSH
76578: CALL_OW 517
76582: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76583: LD_ADDR_VAR 0 4
76587: PUSH
76588: DOUBLE
76589: LD_INT 1
76591: DEC
76592: ST_TO_ADDR
76593: LD_VAR 0 5
76597: PUSH
76598: LD_INT 1
76600: ARRAY
76601: PUSH
76602: FOR_TO
76603: IFFALSE 76682
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76605: LD_VAR 0 5
76609: PUSH
76610: LD_INT 1
76612: ARRAY
76613: PUSH
76614: LD_VAR 0 4
76618: ARRAY
76619: PPUSH
76620: LD_VAR 0 5
76624: PUSH
76625: LD_INT 2
76627: ARRAY
76628: PUSH
76629: LD_VAR 0 4
76633: ARRAY
76634: PPUSH
76635: CALL_OW 351
76639: IFFALSE 76680
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76641: LD_VAR 0 5
76645: PUSH
76646: LD_INT 1
76648: ARRAY
76649: PUSH
76650: LD_VAR 0 4
76654: ARRAY
76655: PPUSH
76656: LD_VAR 0 5
76660: PUSH
76661: LD_INT 2
76663: ARRAY
76664: PUSH
76665: LD_VAR 0 4
76669: ARRAY
76670: PPUSH
76671: LD_VAR 0 1
76675: PPUSH
76676: CALL_OW 244
// end ;
76680: GO 76602
76682: POP
76683: POP
// end ;
76684: LD_VAR 0 3
76688: RET
// export function UniqueArray ( array ) ; var i ; begin
76689: LD_INT 0
76691: PPUSH
76692: PPUSH
// result := [ ] ;
76693: LD_ADDR_VAR 0 2
76697: PUSH
76698: EMPTY
76699: ST_TO_ADDR
// if not array then
76700: LD_VAR 0 1
76704: NOT
76705: IFFALSE 76709
// exit ;
76707: GO 76770
// for i := 1 to array do
76709: LD_ADDR_VAR 0 3
76713: PUSH
76714: DOUBLE
76715: LD_INT 1
76717: DEC
76718: ST_TO_ADDR
76719: LD_VAR 0 1
76723: PUSH
76724: FOR_TO
76725: IFFALSE 76768
// if not array [ i ] in result then
76727: LD_VAR 0 1
76731: PUSH
76732: LD_VAR 0 3
76736: ARRAY
76737: PUSH
76738: LD_VAR 0 2
76742: IN
76743: NOT
76744: IFFALSE 76766
// result := Join ( result , i ) ;
76746: LD_ADDR_VAR 0 2
76750: PUSH
76751: LD_VAR 0 2
76755: PPUSH
76756: LD_VAR 0 3
76760: PPUSH
76761: CALL 71421 0 2
76765: ST_TO_ADDR
76766: GO 76724
76768: POP
76769: POP
// end ; end_of_file
76770: LD_VAR 0 2
76774: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76775: LD_VAR 0 1
76779: PUSH
76780: LD_INT 200
76782: DOUBLE
76783: GREATEREQUAL
76784: IFFALSE 76792
76786: LD_INT 299
76788: DOUBLE
76789: LESSEQUAL
76790: IFTRUE 76794
76792: GO 76826
76794: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76795: LD_VAR 0 1
76799: PPUSH
76800: LD_VAR 0 2
76804: PPUSH
76805: LD_VAR 0 3
76809: PPUSH
76810: LD_VAR 0 4
76814: PPUSH
76815: LD_VAR 0 5
76819: PPUSH
76820: CALL 27731 0 5
76824: GO 76903
76826: LD_INT 300
76828: DOUBLE
76829: GREATEREQUAL
76830: IFFALSE 76838
76832: LD_INT 399
76834: DOUBLE
76835: LESSEQUAL
76836: IFTRUE 76840
76838: GO 76902
76840: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76841: LD_VAR 0 1
76845: PPUSH
76846: LD_VAR 0 2
76850: PPUSH
76851: LD_VAR 0 3
76855: PPUSH
76856: LD_VAR 0 4
76860: PPUSH
76861: LD_VAR 0 5
76865: PPUSH
76866: LD_VAR 0 6
76870: PPUSH
76871: LD_VAR 0 7
76875: PPUSH
76876: LD_VAR 0 8
76880: PPUSH
76881: LD_VAR 0 9
76885: PPUSH
76886: LD_VAR 0 10
76890: PPUSH
76891: LD_VAR 0 11
76895: PPUSH
76896: CALL 23615 0 11
76900: GO 76903
76902: POP
// end ;
76903: PPOPN 11
76905: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76906: LD_VAR 0 1
76910: PPUSH
76911: LD_VAR 0 2
76915: PPUSH
76916: LD_VAR 0 3
76920: PPUSH
76921: LD_VAR 0 4
76925: PPUSH
76926: LD_VAR 0 5
76930: PPUSH
76931: CALL 27112 0 5
// end ; end_of_file
76935: PPOPN 5
76937: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76938: LD_VAR 0 1
76942: PPUSH
76943: LD_VAR 0 2
76947: PPUSH
76948: LD_VAR 0 3
76952: PPUSH
76953: LD_VAR 0 4
76957: PPUSH
76958: LD_VAR 0 5
76962: PPUSH
76963: LD_VAR 0 6
76967: PPUSH
76968: CALL 11155 0 6
// end ;
76972: PPOPN 6
76974: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76975: LD_INT 0
76977: PPUSH
// begin if not units then
76978: LD_VAR 0 1
76982: NOT
76983: IFFALSE 76987
// exit ;
76985: GO 77021
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
76987: LD_VAR 0 1
76991: PPUSH
76992: LD_VAR 0 2
76996: PPUSH
76997: LD_VAR 0 3
77001: PPUSH
77002: LD_VAR 0 4
77006: PPUSH
77007: LD_VAR 0 5
77011: PPUSH
77012: LD_VAR 0 6
77016: PPUSH
77017: CALL 33238 0 6
// end ;
77021: PPOPN 7
77023: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77024: CALL 11042 0 0
// end ;
77028: PPOPN 1
77030: END
