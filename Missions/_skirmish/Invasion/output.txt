// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9192 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: LD_INT 91
2674: ST_TO_ADDR
// us_artillery := 97 ;
2675: LD_ADDR_EXP 17
2679: PUSH
2680: LD_INT 97
2682: ST_TO_ADDR
// ru_radar := 98 ;
2683: LD_ADDR_EXP 14
2687: PUSH
2688: LD_INT 98
2690: ST_TO_ADDR
// game_started := false ;
2691: LD_ADDR_EXP 7
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// points := 0 ;
2699: LD_ADDR_EXP 2
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// waveNumber := 0 ;
2707: LD_ADDR_EXP 5
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// timeToNextAttack := 0 ;
2715: LD_ADDR_EXP 4
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// graveyard := [ ] ;
2723: LD_ADDR_EXP 8
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// base_x := 1 ;
2730: LD_ADDR_EXP 9
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// base_y := 1 ;
2738: LD_ADDR_EXP 10
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if difficultyLevel > 2 then
2746: LD_EXP 3
2750: PUSH
2751: LD_INT 2
2753: GREATER
2754: IFFALSE 2769
// SetTech ( 5 , 7 , state_researched ) ;
2756: LD_INT 5
2758: PPUSH
2759: LD_INT 7
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: CALL_OW 322
// if not playerNation then
2769: LD_EXP 6
2773: NOT
2774: IFFALSE 2800
// begin points := 100 ;
2776: LD_ADDR_EXP 2
2780: PUSH
2781: LD_INT 100
2783: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2784: LD_ADDR_EXP 6
2788: PUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 3
2794: PPUSH
2795: CALL_OW 12
2799: ST_TO_ADDR
// end ; your_side := playerNation ;
2800: LD_ADDR_OWVAR 2
2804: PUSH
2805: LD_EXP 6
2809: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2810: LD_OWVAR 2
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2822: LD_INT 25
2824: PUSH
2825: LD_INT 20
2827: PUSH
2828: LD_INT 15
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 3
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: LD_INT 1
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_EXP 3
2892: ARRAY
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: PPUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: LD_INT 88
2915: PPUSH
2916: LD_INT 76
2918: PPUSH
2919: LD_INT 6
2921: PPUSH
2922: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2926: LD_EXP 6
2930: PPUSH
2931: LD_INT 9
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 5
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 24
2957: PUSH
2958: LD_INT 16
2960: PUSH
2961: LD_INT 12
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_EXP 3
2977: ARRAY
2978: PPUSH
2979: LD_INT 88
2981: PPUSH
2982: LD_INT 76
2984: PPUSH
2985: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2989: LD_INT 88
2991: PPUSH
2992: LD_INT 76
2994: PPUSH
2995: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2999: LD_INT 90
3001: PPUSH
3002: LD_INT 79
3004: PPUSH
3005: LD_OWVAR 2
3009: PPUSH
3010: LD_INT 50
3012: NEG
3013: PPUSH
3014: CALL_OW 330
// if debug then
3018: LD_EXP 1
3022: IFFALSE 3033
// FogOff ( your_side ) ;
3024: LD_OWVAR 2
3028: PPUSH
3029: CALL_OW 344
// end ;
3033: LD_VAR 0 1
3037: RET
// every 0 0$01 trigger game_started do var i ;
3038: LD_EXP 7
3042: IFFALSE 3276
3044: GO 3046
3046: DISABLE
3047: LD_INT 0
3049: PPUSH
// begin while ( game_started ) do
3050: LD_EXP 7
3054: IFFALSE 3276
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3056: LD_INT 22
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PUSH
3071: LD_INT 5
3073: LESS
3074: PUSH
3075: LD_EXP 4
3079: PUSH
3080: LD_INT 0
3082: LESSEQUAL
3083: AND
3084: IFFALSE 3267
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3086: LD_INT 22
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: IFFALSE 3138
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PPUSH
3117: CALL_OW 69
3121: PUSH
3122: FOR_IN
3123: IFFALSE 3136
// RemoveUnit ( i ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 64
3134: GO 3122
3136: POP
3137: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3138: LD_EXP 5
3142: PUSH
3143: LD_INT 3
3145: MOD
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: PUSH
3151: LD_EXP 5
3155: PUSH
3156: LD_INT 10
3158: MOD
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: OR
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: AND
3174: IFFALSE 3180
// InitBonus ;
3176: CALL 9289 0 0
// if waveNumber mod 10 = 0 then
3180: LD_EXP 5
3184: PUSH
3185: LD_INT 10
3187: MOD
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3198
// SaveForQuickRestart ;
3194: CALL_OW 22
// if waveNumber = 100 then
3198: LD_EXP 5
3202: PUSH
3203: LD_INT 100
3205: EQUAL
3206: IFFALSE 3219
// begin FogOff ( your_side ) ;
3208: LD_OWVAR 2
3212: PPUSH
3213: CALL_OW 344
// break ;
3217: GO 3276
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3219: LD_ADDR_EXP 4
3223: PUSH
3224: LD_INT 3150
3226: PPUSH
3227: LD_INT 5250
3229: PPUSH
3230: CALL_OW 12
3234: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3235: LD_EXP 4
3239: PPUSH
3240: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3244: LD_ADDR_EXP 5
3248: PUSH
3249: LD_EXP 5
3253: PUSH
3254: LD_INT 1
3256: PLUS
3257: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3258: LD_EXP 5
3262: PPUSH
3263: CALL 4280 0 1
// end ; Wait ( 0 0$01 ) ;
3267: LD_INT 35
3269: PPUSH
3270: CALL_OW 67
// end ;
3274: GO 3050
// end ;
3276: PPOPN 1
3278: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3279: LD_EXP 4
3283: PUSH
3284: LD_INT 0
3286: GREATER
3287: IFFALSE 3307
3289: GO 3291
3291: DISABLE
// begin enable ;
3292: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3293: LD_ADDR_EXP 4
3297: PUSH
3298: LD_EXP 4
3302: PUSH
3303: LD_INT 35
3305: MINUS
3306: ST_TO_ADDR
// end ; end_of_file
3307: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3308: LD_VAR 0 1
3312: PUSH
3313: LD_EXP 13
3317: IN
3318: NOT
3319: IFFALSE 3350
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3321: LD_ADDR_EXP 13
3325: PUSH
3326: LD_EXP 13
3330: PPUSH
3331: LD_EXP 13
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 1
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// end ;
3350: PPOPN 1
3352: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL 24281 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 255
3371: PUSH
3372: LD_OWVAR 2
3376: EQUAL
3377: PUSH
3378: LD_VAR 0 1
3382: PPUSH
3383: CALL_OW 247
3387: PUSH
3388: LD_INT 1
3390: EQUAL
3391: AND
3392: IFFALSE 3423
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3394: LD_ADDR_EXP 8
3398: PUSH
3399: LD_EXP 8
3403: PPUSH
3404: LD_EXP 8
3408: PUSH
3409: LD_INT 1
3411: PLUS
3412: PPUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 255
3432: PUSH
3433: LD_INT 7
3435: EQUAL
3436: IFFALSE 3810
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3438: LD_VAR 0 1
3442: PUSH
3443: LD_INT 34
3445: PUSH
3446: LD_INT 91
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 69
3457: IN
3458: IFFALSE 3503
// begin if Rand ( 1 , 100 ) <= 70 then
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 100
3465: PPUSH
3466: CALL_OW 12
3470: PUSH
3471: LD_INT 70
3473: LESSEQUAL
3474: IFFALSE 3503
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 250
3485: PPUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 251
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 247
3512: PUSH
3513: LD_INT 1
3515: DOUBLE
3516: EQUAL
3517: IFTRUE 3521
3519: GO 3655
3521: POP
// begin case GetClass ( un ) of class_apeman :
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 257
3531: PUSH
3532: LD_INT 12
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3550
3540: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3541: LD_INT 2
3543: PPUSH
3544: CALL 471 0 1
3548: GO 3653
3550: LD_INT 15
3552: DOUBLE
3553: EQUAL
3554: IFTRUE 3558
3556: GO 3568
3558: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3559: LD_INT 5
3561: PPUSH
3562: CALL 471 0 1
3566: GO 3653
3568: LD_INT 17
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3586
3576: POP
// AddPoints ( 30 ) ; class_soldier :
3577: LD_INT 30
3579: PPUSH
3580: CALL 471 0 1
3584: GO 3653
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3604
3594: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3595: LD_INT 50
3597: PPUSH
3598: CALL 471 0 1
3602: GO 3653
3604: LD_INT 9
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3624
3610: LD_INT 5
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3624
3616: LD_INT 8
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3634
3624: POP
// AddPoints ( 75 ) ; class_mechanic :
3625: LD_INT 75
3627: PPUSH
3628: CALL 471 0 1
3632: GO 3653
3634: LD_INT 3
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3652
3642: POP
// AddPoints ( 60 ) ; end ;
3643: LD_INT 60
3645: PPUSH
3646: CALL 471 0 1
3650: GO 3653
3652: POP
// end ; unit_vehicle :
3653: GO 3810
3655: LD_INT 2
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3809
3663: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3664: LD_VAR 0 1
3668: PPUSH
3669: CALL_OW 265
3673: PUSH
3674: LD_INT 12
3676: DOUBLE
3677: EQUAL
3678: IFTRUE 3694
3680: LD_INT 1
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3694
3686: LD_INT 11
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3694
3692: GO 3704
3694: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3695: LD_INT 100
3697: PPUSH
3698: CALL 471 0 1
3702: GO 3807
3704: LD_INT 13
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3742
3710: LD_INT 14
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3742
3716: LD_INT 2
3718: DOUBLE
3719: EQUAL
3720: IFTRUE 3742
3722: LD_INT 3
3724: DOUBLE
3725: EQUAL
3726: IFTRUE 3742
3728: LD_INT 21
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3742
3734: LD_INT 22
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3752
3742: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3743: LD_INT 250
3745: PPUSH
3746: CALL 471 0 1
3750: GO 3807
3752: LD_INT 4
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3778
3758: LD_INT 5
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3778
3764: LD_INT 23
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3778
3770: LD_INT 24
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3788
3778: POP
// AddPoints ( 500 ) ; 25 :
3779: LD_INT 500
3781: PPUSH
3782: CALL 471 0 1
3786: GO 3807
3788: LD_INT 25
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3806
3796: POP
// AddPoints ( 1250 ) ; end ;
3797: LD_INT 1250
3799: PPUSH
3800: CALL 471 0 1
3804: GO 3807
3806: POP
// end ; end ;
3807: GO 3810
3809: POP
// end ; end ;
3810: PPOPN 1
3812: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 266
3822: PUSH
3823: LD_INT 0
3825: EQUAL
3826: IFFALSE 3876
// begin base_x := GetX ( b ) ;
3828: LD_ADDR_EXP 9
3832: PUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 250
3842: ST_TO_ADDR
// base_y := GetY ( b ) ;
3843: LD_ADDR_EXP 10
3847: PUSH
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 251
3857: ST_TO_ADDR
// base := b ;
3858: LD_ADDR_EXP 11
3862: PUSH
3863: LD_VAR 0 1
3867: ST_TO_ADDR
// game_started := true ;
3868: LD_ADDR_EXP 7
3872: PUSH
3873: LD_INT 1
3875: ST_TO_ADDR
// end ; end ;
3876: PPOPN 1
3878: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 255
3888: PUSH
3889: LD_OWVAR 2
3893: EQUAL
3894: IFFALSE 3898
// exit ;
3896: GO 4045
// if GetType ( un ) = unit_vehicle then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 247
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: IFFALSE 3964
// begin KillUnit ( un ) ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 248
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 264
3945: PUSH
3946: LD_INT 49
3948: PUSH
3949: EMPTY
3950: LIST
3951: IN
3952: OR
3953: IFFALSE 3964
// ExplodeVehicle ( un ) ;
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 247
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4045
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 248
3988: PUSH
3989: LD_INT 2
3991: EQUAL
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 248
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: IN
4033: OR
4034: IFFALSE 4045
// KillUnit ( un ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 66
// end ; end ;
4045: PPOPN 1
4047: END
// every 0 0$1 do
4048: GO 4050
4050: DISABLE
// begin enable ;
4051: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4052: LD_INT 4
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 22
4060: PUSH
4061: LD_OWVAR 2
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 513
// end ;
4074: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4075: LD_EXP 7
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_OWVAR 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PUSH
4111: LD_INT 0
4113: EQUAL
4114: AND
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( die ) ;
4120: LD_STRING die
4122: PPUSH
4123: CALL_OW 104
4127: END
// every 0 0$21 trigger tick <= 15 15$00 do
4128: LD_OWVAR 1
4132: PUSH
4133: LD_INT 31500
4135: LESSEQUAL
4136: IFFALSE 4163
4138: GO 4140
4140: DISABLE
// begin enable ;
4141: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 5
4147: PPUSH
4148: CALL_OW 12
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: CALL_OW 55
// end ;
4163: END
// every 0 0$51 trigger tick > 15 15$00 do
4164: LD_OWVAR 1
4168: PUSH
4169: LD_INT 31500
4171: GREATER
4172: IFFALSE 4219
4174: GO 4176
4176: DISABLE
// begin enable ;
4177: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4178: LD_INT 22
4180: PUSH
4181: LD_INT 7
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 69
4192: PUSH
4193: LD_INT 0
4195: EQUAL
4196: IFFALSE 4219
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 5
4203: PPUSH
4204: CALL_OW 12
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 55
// end ;
4219: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4220: LD_VAR 0 1
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: CALL_OW 308
4232: IFFALSE 4243
// KillUnit ( building ) ;
4234: LD_VAR 0 1
4238: PPUSH
4239: CALL_OW 66
// end ;
4243: PPOPN 2
4245: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL 24379 0 3
// end ;
4265: PPOPN 3
4267: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL 24387 0 1
// end ; end_of_file
4277: PPOPN 1
4279: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4280: LD_INT 0
4282: PPUSH
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4291: LD_ADDR_VAR 0 7
4295: PUSH
4296: LD_INT 1
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: ST_TO_ADDR
// uc_side := 7 ;
4306: LD_ADDR_OWVAR 20
4310: PUSH
4311: LD_INT 7
4313: ST_TO_ADDR
// l := 0 ;
4314: LD_ADDR_VAR 0 9
4318: PUSH
4319: LD_INT 0
4321: ST_TO_ADDR
// case num of 1 :
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 1
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4354
4335: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4336: LD_ADDR_VAR 0 2
4340: PUSH
4341: LD_INT 12
4343: PPUSH
4344: LD_INT 1
4346: PPUSH
4347: CALL 6683 0 2
4351: ST_TO_ADDR
4352: GO 6492
4354: LD_INT 2
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4381
4362: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: LD_INT 12
4370: PPUSH
4371: LD_INT 1
4373: PPUSH
4374: CALL 6754 0 2
4378: ST_TO_ADDR
4379: GO 6492
4381: LD_INT 3
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4408
4389: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4390: LD_ADDR_VAR 0 2
4394: PUSH
4395: LD_INT 12
4397: PPUSH
4398: LD_INT 1
4400: PPUSH
4401: CALL 6825 0 2
4405: ST_TO_ADDR
4406: GO 6492
4408: LD_INT 4
4410: DOUBLE
4411: EQUAL
4412: IFTRUE 4416
4414: GO 4435
4416: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: LD_INT 7
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL 6904 0 2
4432: ST_TO_ADDR
4433: GO 6492
4435: LD_INT 5
4437: DOUBLE
4438: EQUAL
4439: IFTRUE 4443
4441: GO 4462
4443: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4444: LD_ADDR_VAR 0 2
4448: PUSH
4449: LD_INT 7
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: CALL 7300 0 2
4459: ST_TO_ADDR
4460: GO 6492
4462: LD_INT 6
4464: DOUBLE
4465: EQUAL
4466: IFTRUE 4470
4468: GO 4489
4470: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 6
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: CALL 7720 0 2
4486: ST_TO_ADDR
4487: GO 6492
4489: LD_INT 7
4491: DOUBLE
4492: EQUAL
4493: IFTRUE 4497
4495: GO 4516
4497: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: LD_INT 15
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL 8140 0 2
4513: ST_TO_ADDR
4514: GO 6492
4516: LD_INT 8
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4543
4524: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 7
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL 8241 0 2
4540: ST_TO_ADDR
4541: GO 6492
4543: LD_INT 9
4545: DOUBLE
4546: EQUAL
4547: IFTRUE 4551
4549: GO 4582
4551: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4552: LD_ADDR_VAR 0 2
4556: PUSH
4557: LD_INT 4
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: CALL 8241 0 2
4567: PUSH
4568: LD_INT 7
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL 7300 0 2
4578: ADD
4579: ST_TO_ADDR
4580: GO 6492
4582: LD_INT 10
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4621
4590: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4591: LD_ADDR_VAR 0 2
4595: PUSH
4596: LD_INT 9
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: CALL 8140 0 2
4606: PUSH
4607: LD_INT 14
4609: PPUSH
4610: LD_INT 1
4612: PPUSH
4613: CALL 6825 0 2
4617: ADD
4618: ST_TO_ADDR
4619: GO 6492
4621: LD_INT 11
4623: DOUBLE
4624: EQUAL
4625: IFTRUE 4677
4627: LD_INT 21
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4677
4633: LD_INT 31
4635: DOUBLE
4636: EQUAL
4637: IFTRUE 4677
4639: LD_INT 41
4641: DOUBLE
4642: EQUAL
4643: IFTRUE 4677
4645: LD_INT 51
4647: DOUBLE
4648: EQUAL
4649: IFTRUE 4677
4651: LD_INT 61
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4677
4657: LD_INT 71
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4677
4663: LD_INT 81
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4677
4669: LD_INT 91
4671: DOUBLE
4672: EQUAL
4673: IFTRUE 4677
4675: GO 4786
4677: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: LD_INT 20
4685: PUSH
4686: LD_INT 30
4688: PUSH
4689: LD_INT 40
4691: PUSH
4692: LD_INT 45
4694: PUSH
4695: LD_INT 50
4697: PUSH
4698: LD_INT 60
4700: PUSH
4701: LD_INT 70
4703: PUSH
4704: LD_INT 80
4706: PUSH
4707: LD_INT 100
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: LD_VAR 0 1
4725: PUSH
4726: LD_INT 10
4728: DIV
4729: ARRAY
4730: PPUSH
4731: LD_INT 2
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 4
4739: PUSH
4740: LD_INT 5
4742: PUSH
4743: LD_INT 6
4745: PUSH
4746: LD_INT 7
4748: PUSH
4749: LD_INT 8
4751: PUSH
4752: LD_INT 9
4754: PUSH
4755: LD_INT 10
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 1
4773: PUSH
4774: LD_INT 10
4776: DIV
4777: ARRAY
4778: PPUSH
4779: CALL 6683 0 2
4783: ST_TO_ADDR
4784: GO 6492
4786: LD_INT 12
4788: DOUBLE
4789: EQUAL
4790: IFTRUE 4842
4792: LD_INT 22
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4842
4798: LD_INT 32
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4842
4804: LD_INT 42
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4842
4810: LD_INT 52
4812: DOUBLE
4813: EQUAL
4814: IFTRUE 4842
4816: LD_INT 62
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4842
4822: LD_INT 72
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4842
4828: LD_INT 82
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4842
4834: LD_INT 92
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4951
4842: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 16
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 28
4856: PUSH
4857: LD_INT 33
4859: PUSH
4860: LD_INT 39
4862: PUSH
4863: LD_INT 46
4865: PUSH
4866: LD_INT 56
4868: PUSH
4869: LD_INT 66
4871: PUSH
4872: LD_INT 80
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: PUSH
4891: LD_INT 10
4893: DIV
4894: ARRAY
4895: PPUSH
4896: LD_INT 2
4898: PUSH
4899: LD_INT 3
4901: PUSH
4902: LD_INT 4
4904: PUSH
4905: LD_INT 5
4907: PUSH
4908: LD_INT 6
4910: PUSH
4911: LD_INT 7
4913: PUSH
4914: LD_INT 8
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: LD_INT 10
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 10
4941: DIV
4942: ARRAY
4943: PPUSH
4944: CALL 6754 0 2
4948: ST_TO_ADDR
4949: GO 6492
4951: LD_INT 13
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 5007
4957: LD_INT 23
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 5007
4963: LD_INT 33
4965: DOUBLE
4966: EQUAL
4967: IFTRUE 5007
4969: LD_INT 43
4971: DOUBLE
4972: EQUAL
4973: IFTRUE 5007
4975: LD_INT 53
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 5007
4981: LD_INT 63
4983: DOUBLE
4984: EQUAL
4985: IFTRUE 5007
4987: LD_INT 73
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 5007
4993: LD_INT 83
4995: DOUBLE
4996: EQUAL
4997: IFTRUE 5007
4999: LD_INT 93
5001: DOUBLE
5002: EQUAL
5003: IFTRUE 5007
5005: GO 5116
5007: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_INT 14
5015: PUSH
5016: LD_INT 18
5018: PUSH
5019: LD_INT 22
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 33
5027: PUSH
5028: LD_INT 39
5030: PUSH
5031: LD_INT 44
5033: PUSH
5034: LD_INT 57
5036: PUSH
5037: LD_INT 65
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_VAR 0 1
5055: PUSH
5056: LD_INT 10
5058: DIV
5059: ARRAY
5060: PPUSH
5061: LD_INT 2
5063: PUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 4
5069: PUSH
5070: LD_INT 5
5072: PUSH
5073: LD_INT 6
5075: PUSH
5076: LD_INT 7
5078: PUSH
5079: LD_INT 8
5081: PUSH
5082: LD_INT 9
5084: PUSH
5085: LD_INT 10
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 10
5106: DIV
5107: ARRAY
5108: PPUSH
5109: CALL 6825 0 2
5113: ST_TO_ADDR
5114: GO 6492
5116: LD_INT 14
5118: DOUBLE
5119: EQUAL
5120: IFTRUE 5172
5122: LD_INT 24
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5172
5128: LD_INT 34
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5172
5134: LD_INT 44
5136: DOUBLE
5137: EQUAL
5138: IFTRUE 5172
5140: LD_INT 54
5142: DOUBLE
5143: EQUAL
5144: IFTRUE 5172
5146: LD_INT 64
5148: DOUBLE
5149: EQUAL
5150: IFTRUE 5172
5152: LD_INT 74
5154: DOUBLE
5155: EQUAL
5156: IFTRUE 5172
5158: LD_INT 84
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5172
5164: LD_INT 94
5166: DOUBLE
5167: EQUAL
5168: IFTRUE 5172
5170: GO 5281
5172: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: LD_INT 9
5180: PUSH
5181: LD_INT 15
5183: PUSH
5184: LD_INT 22
5186: PUSH
5187: LD_INT 30
5189: PUSH
5190: LD_INT 39
5192: PUSH
5193: LD_INT 45
5195: PUSH
5196: LD_INT 56
5198: PUSH
5199: LD_INT 60
5201: PUSH
5202: LD_INT 65
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_VAR 0 1
5220: PUSH
5221: LD_INT 10
5223: DIV
5224: ARRAY
5225: PPUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 4
5234: PUSH
5235: LD_INT 5
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: LD_INT 7
5243: PUSH
5244: LD_INT 8
5246: PUSH
5247: LD_INT 9
5249: PUSH
5250: LD_INT 10
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_VAR 0 1
5268: PUSH
5269: LD_INT 10
5271: DIV
5272: ARRAY
5273: PPUSH
5274: CALL 6904 0 2
5278: ST_TO_ADDR
5279: GO 6492
5281: LD_INT 15
5283: DOUBLE
5284: EQUAL
5285: IFTRUE 5337
5287: LD_INT 25
5289: DOUBLE
5290: EQUAL
5291: IFTRUE 5337
5293: LD_INT 35
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5337
5299: LD_INT 45
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5337
5305: LD_INT 55
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5337
5311: LD_INT 65
5313: DOUBLE
5314: EQUAL
5315: IFTRUE 5337
5317: LD_INT 75
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5337
5323: LD_INT 85
5325: DOUBLE
5326: EQUAL
5327: IFTRUE 5337
5329: LD_INT 95
5331: DOUBLE
5332: EQUAL
5333: IFTRUE 5337
5335: GO 5446
5337: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 6
5345: PUSH
5346: LD_INT 11
5348: PUSH
5349: LD_INT 15
5351: PUSH
5352: LD_INT 20
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 30
5360: PUSH
5361: LD_INT 35
5363: PUSH
5364: LD_INT 40
5366: PUSH
5367: LD_INT 45
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_VAR 0 1
5385: PUSH
5386: LD_INT 10
5388: DIV
5389: ARRAY
5390: PPUSH
5391: LD_INT 2
5393: PUSH
5394: LD_INT 3
5396: PUSH
5397: LD_INT 4
5399: PUSH
5400: LD_INT 5
5402: PUSH
5403: LD_INT 6
5405: PUSH
5406: LD_INT 7
5408: PUSH
5409: LD_INT 8
5411: PUSH
5412: LD_INT 9
5414: PUSH
5415: LD_INT 10
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: LD_VAR 0 1
5433: PUSH
5434: LD_INT 10
5436: DIV
5437: ARRAY
5438: PPUSH
5439: CALL 7300 0 2
5443: ST_TO_ADDR
5444: GO 6492
5446: LD_INT 16
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5502
5452: LD_INT 26
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5502
5458: LD_INT 36
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5502
5464: LD_INT 46
5466: DOUBLE
5467: EQUAL
5468: IFTRUE 5502
5470: LD_INT 56
5472: DOUBLE
5473: EQUAL
5474: IFTRUE 5502
5476: LD_INT 66
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5502
5482: LD_INT 76
5484: DOUBLE
5485: EQUAL
5486: IFTRUE 5502
5488: LD_INT 86
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5502
5494: LD_INT 96
5496: DOUBLE
5497: EQUAL
5498: IFTRUE 5502
5500: GO 5611
5502: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5503: LD_ADDR_VAR 0 2
5507: PUSH
5508: LD_INT 9
5510: PUSH
5511: LD_INT 12
5513: PUSH
5514: LD_INT 15
5516: PUSH
5517: LD_INT 18
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 24
5525: PUSH
5526: LD_INT 27
5528: PUSH
5529: LD_INT 30
5531: PUSH
5532: LD_INT 33
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 10
5553: DIV
5554: ARRAY
5555: PPUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 3
5561: PUSH
5562: LD_INT 4
5564: PUSH
5565: LD_INT 5
5567: PUSH
5568: LD_INT 6
5570: PUSH
5571: LD_INT 7
5573: PUSH
5574: LD_INT 8
5576: PUSH
5577: LD_INT 9
5579: PUSH
5580: LD_INT 10
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: PUSH
5594: LD_VAR 0 1
5598: PUSH
5599: LD_INT 10
5601: DIV
5602: ARRAY
5603: PPUSH
5604: CALL 7720 0 2
5608: ST_TO_ADDR
5609: GO 6492
5611: LD_INT 17
5613: DOUBLE
5614: EQUAL
5615: IFTRUE 5667
5617: LD_INT 27
5619: DOUBLE
5620: EQUAL
5621: IFTRUE 5667
5623: LD_INT 37
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5667
5629: LD_INT 47
5631: DOUBLE
5632: EQUAL
5633: IFTRUE 5667
5635: LD_INT 57
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5667
5641: LD_INT 67
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5667
5647: LD_INT 77
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5667
5653: LD_INT 87
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5667
5659: LD_INT 97
5661: DOUBLE
5662: EQUAL
5663: IFTRUE 5667
5665: GO 5776
5667: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_INT 14
5675: PUSH
5676: LD_INT 16
5678: PUSH
5679: LD_INT 18
5681: PUSH
5682: LD_INT 22
5684: PUSH
5685: LD_INT 24
5687: PUSH
5688: LD_INT 26
5690: PUSH
5691: LD_INT 28
5693: PUSH
5694: LD_INT 32
5696: PUSH
5697: LD_INT 35
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_INT 10
5718: DIV
5719: ARRAY
5720: PPUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 3
5726: PUSH
5727: LD_INT 4
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: LD_INT 6
5735: PUSH
5736: LD_INT 7
5738: PUSH
5739: LD_INT 8
5741: PUSH
5742: LD_INT 9
5744: PUSH
5745: LD_INT 10
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: PUSH
5759: LD_VAR 0 1
5763: PUSH
5764: LD_INT 10
5766: DIV
5767: ARRAY
5768: PPUSH
5769: CALL 8140 0 2
5773: ST_TO_ADDR
5774: GO 6492
5776: LD_INT 18
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5832
5782: LD_INT 28
5784: DOUBLE
5785: EQUAL
5786: IFTRUE 5832
5788: LD_INT 38
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5832
5794: LD_INT 48
5796: DOUBLE
5797: EQUAL
5798: IFTRUE 5832
5800: LD_INT 58
5802: DOUBLE
5803: EQUAL
5804: IFTRUE 5832
5806: LD_INT 68
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5832
5812: LD_INT 78
5814: DOUBLE
5815: EQUAL
5816: IFTRUE 5832
5818: LD_INT 88
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5832
5824: LD_INT 98
5826: DOUBLE
5827: EQUAL
5828: IFTRUE 5832
5830: GO 5941
5832: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5833: LD_ADDR_VAR 0 2
5837: PUSH
5838: LD_INT 9
5840: PUSH
5841: LD_INT 12
5843: PUSH
5844: LD_INT 15
5846: PUSH
5847: LD_INT 18
5849: PUSH
5850: LD_INT 21
5852: PUSH
5853: LD_INT 24
5855: PUSH
5856: LD_INT 27
5858: PUSH
5859: LD_INT 30
5861: PUSH
5862: LD_INT 33
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_VAR 0 1
5880: PUSH
5881: LD_INT 10
5883: DIV
5884: ARRAY
5885: PPUSH
5886: LD_INT 2
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 4
5894: PUSH
5895: LD_INT 5
5897: PUSH
5898: LD_INT 6
5900: PUSH
5901: LD_INT 7
5903: PUSH
5904: LD_INT 8
5906: PUSH
5907: LD_INT 9
5909: PUSH
5910: LD_INT 10
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: LD_INT 10
5931: DIV
5932: ARRAY
5933: PPUSH
5934: CALL 8241 0 2
5938: ST_TO_ADDR
5939: GO 6492
5941: LD_INT 19
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5997
5947: LD_INT 29
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5997
5953: LD_INT 39
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5997
5959: LD_INT 49
5961: DOUBLE
5962: EQUAL
5963: IFTRUE 5997
5965: LD_INT 59
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5997
5971: LD_INT 69
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5997
5977: LD_INT 79
5979: DOUBLE
5980: EQUAL
5981: IFTRUE 5997
5983: LD_INT 89
5985: DOUBLE
5986: EQUAL
5987: IFTRUE 5997
5989: LD_INT 99
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6208
5997: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: LD_INT 10
6011: PUSH
6012: LD_INT 13
6014: PUSH
6015: LD_INT 14
6017: PUSH
6018: LD_INT 17
6020: PUSH
6021: LD_INT 19
6023: PUSH
6024: LD_INT 21
6026: PUSH
6027: LD_INT 23
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 10
6048: DIV
6049: ARRAY
6050: PPUSH
6051: LD_INT 2
6053: PUSH
6054: LD_INT 3
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 5
6062: PUSH
6063: LD_INT 6
6065: PUSH
6066: LD_INT 7
6068: PUSH
6069: LD_INT 8
6071: PUSH
6072: LD_INT 9
6074: PUSH
6075: LD_INT 10
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_VAR 0 1
6093: PUSH
6094: LD_INT 10
6096: DIV
6097: ARRAY
6098: PPUSH
6099: CALL 8241 0 2
6103: PUSH
6104: LD_INT 4
6106: PUSH
6107: LD_INT 7
6109: PUSH
6110: LD_INT 10
6112: PUSH
6113: LD_INT 13
6115: PUSH
6116: LD_INT 14
6118: PUSH
6119: LD_INT 17
6121: PUSH
6122: LD_INT 19
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 25
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PUSH
6142: LD_VAR 0 1
6146: PUSH
6147: LD_INT 10
6149: DIV
6150: ARRAY
6151: PPUSH
6152: LD_INT 2
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 4
6160: PUSH
6161: LD_INT 5
6163: PUSH
6164: LD_INT 6
6166: PUSH
6167: LD_INT 7
6169: PUSH
6170: LD_INT 8
6172: PUSH
6173: LD_INT 9
6175: PUSH
6176: LD_INT 10
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: LD_INT 10
6197: DIV
6198: ARRAY
6199: PPUSH
6200: CALL 7300 0 2
6204: ADD
6205: ST_TO_ADDR
6206: GO 6492
6208: LD_INT 20
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6264
6214: LD_INT 30
6216: DOUBLE
6217: EQUAL
6218: IFTRUE 6264
6220: LD_INT 40
6222: DOUBLE
6223: EQUAL
6224: IFTRUE 6264
6226: LD_INT 50
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6264
6232: LD_INT 60
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6264
6238: LD_INT 70
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6264
6244: LD_INT 80
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6264
6250: LD_INT 90
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6264
6256: LD_INT 100
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6491
6264: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 4
6272: PUSH
6273: LD_INT 7
6275: PUSH
6276: LD_INT 10
6278: PUSH
6279: LD_INT 13
6281: PUSH
6282: LD_INT 14
6284: PUSH
6285: LD_INT 17
6287: PUSH
6288: LD_INT 19
6290: PUSH
6291: LD_INT 21
6293: PUSH
6294: LD_INT 23
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_VAR 0 1
6312: PUSH
6313: LD_INT 10
6315: DIVREAL
6316: PUSH
6317: LD_INT 1
6319: MINUS
6320: ARRAY
6321: PPUSH
6322: LD_INT 2
6324: PUSH
6325: LD_INT 3
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 5
6333: PUSH
6334: LD_INT 6
6336: PUSH
6337: LD_INT 7
6339: PUSH
6340: LD_INT 8
6342: PUSH
6343: LD_INT 9
6345: PUSH
6346: LD_INT 10
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_VAR 0 1
6364: PUSH
6365: LD_INT 10
6367: DIVREAL
6368: PUSH
6369: LD_INT 1
6371: MINUS
6372: ARRAY
6373: PPUSH
6374: CALL 8140 0 2
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 7
6384: PUSH
6385: LD_INT 10
6387: PUSH
6388: LD_INT 13
6390: PUSH
6391: LD_INT 14
6393: PUSH
6394: LD_INT 17
6396: PUSH
6397: LD_INT 19
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_VAR 0 1
6421: PUSH
6422: LD_INT 10
6424: DIVREAL
6425: PUSH
6426: LD_INT 1
6428: MINUS
6429: ARRAY
6430: PPUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 7
6448: PUSH
6449: LD_INT 8
6451: PUSH
6452: LD_INT 9
6454: PUSH
6455: LD_INT 10
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: LD_INT 10
6476: DIVREAL
6477: PUSH
6478: LD_INT 1
6480: MINUS
6481: ARRAY
6482: PPUSH
6483: CALL 7720 0 2
6487: ADD
6488: ST_TO_ADDR
6489: GO 6492
6491: POP
// for i in result do
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: LD_VAR 0 2
6501: PUSH
6502: FOR_IN
6503: IFFALSE 6676
// begin a := rand ( 1 , 2 ) ;
6505: LD_ADDR_VAR 0 8
6509: PUSH
6510: LD_INT 1
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: CALL_OW 12
6520: ST_TO_ADDR
// if a = 1 then
6521: LD_VAR 0 8
6525: PUSH
6526: LD_INT 1
6528: EQUAL
6529: IFFALSE 6545
// SetDir ( i , 3 ) else
6531: LD_VAR 0 3
6535: PPUSH
6536: LD_INT 3
6538: PPUSH
6539: CALL_OW 233
6543: GO 6557
// SetDir ( i , 5 ) ;
6545: LD_VAR 0 3
6549: PPUSH
6550: LD_INT 5
6552: PPUSH
6553: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6557: LD_VAR 0 3
6561: PPUSH
6562: LD_VAR 0 7
6566: PUSH
6567: LD_VAR 0 8
6571: ARRAY
6572: PPUSH
6573: LD_INT 0
6575: PPUSH
6576: CALL_OW 49
// if GetControl ( i ) = control_manual then
6580: LD_VAR 0 3
6584: PPUSH
6585: CALL_OW 263
6589: PUSH
6590: LD_INT 1
6592: EQUAL
6593: IFFALSE 6639
// begin uc_nation := GetNation ( i ) ;
6595: LD_ADDR_OWVAR 21
6599: PUSH
6600: LD_VAR 0 3
6604: PPUSH
6605: CALL_OW 248
6609: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6610: LD_INT 0
6612: PPUSH
6613: LD_INT 3
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6625: CALL_OW 44
6629: PPUSH
6630: LD_VAR 0 3
6634: PPUSH
6635: CALL_OW 52
// end ; l := l + 1 ;
6639: LD_ADDR_VAR 0 9
6643: PUSH
6644: LD_VAR 0 9
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: ST_TO_ADDR
// if l mod 10 = 0 then
6653: LD_VAR 0 9
6657: PUSH
6658: LD_INT 10
6660: MOD
6661: PUSH
6662: LD_INT 0
6664: EQUAL
6665: IFFALSE 6674
// Wait ( 0 0$02 ) ;
6667: LD_INT 70
6669: PPUSH
6670: CALL_OW 67
// end ;
6674: GO 6502
6676: POP
6677: POP
// end ;
6678: LD_VAR 0 2
6682: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
// uc_nation := nation_nature ;
6688: LD_ADDR_OWVAR 21
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// for i = 1 to n do
6696: LD_ADDR_VAR 0 4
6700: PUSH
6701: DOUBLE
6702: LD_INT 1
6704: DEC
6705: ST_TO_ADDR
6706: LD_VAR 0 1
6710: PUSH
6711: FOR_TO
6712: IFFALSE 6747
// begin PrepareHuman ( false , class_apeman , skill ) ;
6714: LD_INT 0
6716: PPUSH
6717: LD_INT 12
6719: PPUSH
6720: LD_VAR 0 2
6724: PPUSH
6725: CALL_OW 380
// result := result ^ CreateHuman ;
6729: LD_ADDR_VAR 0 3
6733: PUSH
6734: LD_VAR 0 3
6738: PUSH
6739: CALL_OW 44
6743: ADD
6744: ST_TO_ADDR
// end ;
6745: GO 6711
6747: POP
6748: POP
// end ;
6749: LD_VAR 0 3
6753: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
6758: PPUSH
// uc_nation := nation_nature ;
6759: LD_ADDR_OWVAR 21
6763: PUSH
6764: LD_INT 0
6766: ST_TO_ADDR
// for i = 1 to n do
6767: LD_ADDR_VAR 0 4
6771: PUSH
6772: DOUBLE
6773: LD_INT 1
6775: DEC
6776: ST_TO_ADDR
6777: LD_VAR 0 1
6781: PUSH
6782: FOR_TO
6783: IFFALSE 6818
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6785: LD_INT 0
6787: PPUSH
6788: LD_INT 15
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 380
// result := result ^ CreateHuman ;
6800: LD_ADDR_VAR 0 3
6804: PUSH
6805: LD_VAR 0 3
6809: PUSH
6810: CALL_OW 44
6814: ADD
6815: ST_TO_ADDR
// end ;
6816: GO 6782
6818: POP
6819: POP
// end ;
6820: LD_VAR 0 3
6824: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
6829: PPUSH
// for i = 1 to n do
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: DOUBLE
6836: LD_INT 1
6838: DEC
6839: ST_TO_ADDR
6840: LD_VAR 0 1
6844: PUSH
6845: FOR_TO
6846: IFFALSE 6897
// begin uc_nation := rand ( 1 , 3 ) ;
6848: LD_ADDR_OWVAR 21
6852: PUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 3
6858: PPUSH
6859: CALL_OW 12
6863: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6864: LD_INT 0
6866: PPUSH
6867: LD_INT 1
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 380
// result := result ^ CreateHuman ;
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: LD_VAR 0 3
6888: PUSH
6889: CALL_OW 44
6893: ADD
6894: ST_TO_ADDR
// end ;
6895: GO 6845
6897: POP
6898: POP
// end ;
6899: LD_VAR 0 3
6903: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
// for i = 1 to n do
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 1
6927: PUSH
6928: FOR_TO
6929: IFFALSE 7293
// begin uc_nation := rand ( 1 , 3 ) ;
6931: LD_ADDR_OWVAR 21
6935: PUSH
6936: LD_INT 1
6938: PPUSH
6939: LD_INT 3
6941: PPUSH
6942: CALL_OW 12
6946: ST_TO_ADDR
// case uc_nation of 1 :
6947: LD_OWVAR 21
6951: PUSH
6952: LD_INT 1
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7023
6960: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6961: LD_ADDR_VAR 0 6
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6976: LD_ADDR_VAR 0 7
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6991: LD_ADDR_VAR 0 8
6995: PUSH
6996: LD_INT 1
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7006: LD_ADDR_VAR 0 9
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; 2 :
7021: GO 7158
7023: LD_INT 2
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7094
7031: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: LD_INT 12
7039: PUSH
7040: LD_INT 11
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7047: LD_ADDR_VAR 0 7
7051: PUSH
7052: LD_INT 23
7054: PUSH
7055: LD_INT 24
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7062: LD_ADDR_VAR 0 8
7066: PUSH
7067: LD_INT 1
7069: PUSH
7070: LD_INT 5
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7077: LD_ADDR_VAR 0 9
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: LD_INT 2
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: ST_TO_ADDR
// end ; 3 :
7092: GO 7158
7094: LD_INT 3
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7157
7102: POP
// begin chassis := [ ru_medium_wheeled ] ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: EMPTY
7112: LIST
7113: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7114: LD_ADDR_VAR 0 7
7118: PUSH
7119: LD_INT 42
7121: PUSH
7122: LD_INT 44
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7129: LD_ADDR_VAR 0 8
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: LD_INT 3
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: LD_INT 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: ST_TO_ADDR
// end ; end ;
7155: GO 7158
7157: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7158: LD_ADDR_OWVAR 37
7162: PUSH
7163: LD_VAR 0 6
7167: PUSH
7168: LD_INT 1
7170: PPUSH
7171: LD_VAR 0 6
7175: PPUSH
7176: CALL_OW 12
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_VAR 0 9
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_VAR 0 9
7199: PPUSH
7200: CALL_OW 12
7204: ARRAY
7205: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7206: LD_ADDR_OWVAR 38
7210: PUSH
7211: LD_VAR 0 8
7215: PUSH
7216: LD_INT 1
7218: PPUSH
7219: LD_VAR 0 8
7223: PPUSH
7224: CALL_OW 12
7228: ARRAY
7229: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7230: LD_ADDR_OWVAR 40
7234: PUSH
7235: LD_VAR 0 7
7239: PUSH
7240: LD_INT 1
7242: PPUSH
7243: LD_VAR 0 7
7247: PPUSH
7248: CALL_OW 12
7252: ARRAY
7253: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7254: LD_ADDR_OWVAR 41
7258: PUSH
7259: LD_INT 100
7261: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 1
7279: PLUS
7280: PPUSH
7281: CALL_OW 45
7285: PPUSH
7286: CALL_OW 2
7290: ST_TO_ADDR
// end ;
7291: GO 6928
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 3
7299: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
// for i = 1 to n do
7309: LD_ADDR_VAR 0 4
7313: PUSH
7314: DOUBLE
7315: LD_INT 1
7317: DEC
7318: ST_TO_ADDR
7319: LD_VAR 0 1
7323: PUSH
7324: FOR_TO
7325: IFFALSE 7713
// begin uc_nation := rand ( 1 , 3 ) ;
7327: LD_ADDR_OWVAR 21
7331: PUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 3
7337: PPUSH
7338: CALL_OW 12
7342: ST_TO_ADDR
// case uc_nation of 1 :
7343: LD_OWVAR 21
7347: PUSH
7348: LD_INT 1
7350: DOUBLE
7351: EQUAL
7352: IFTRUE 7356
7354: GO 7427
7356: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7357: LD_ADDR_VAR 0 6
7361: PUSH
7362: LD_INT 2
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7372: LD_ADDR_VAR 0 7
7376: PUSH
7377: LD_INT 4
7379: PUSH
7380: LD_INT 5
7382: PUSH
7383: LD_INT 9
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7391: LD_ADDR_VAR 0 8
7395: PUSH
7396: LD_INT 1
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 1
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// end ; 2 :
7425: GO 7578
7427: LD_INT 2
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7506
7435: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_INT 13
7443: PUSH
7444: LD_INT 14
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7451: LD_ADDR_VAR 0 7
7455: PUSH
7456: LD_INT 27
7458: PUSH
7459: LD_INT 26
7461: PUSH
7462: LD_INT 25
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7470: LD_ADDR_VAR 0 8
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: LD_INT 5
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7485: LD_ADDR_VAR 0 9
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
// end ; 3 :
7504: GO 7578
7506: LD_INT 3
7508: DOUBLE
7509: EQUAL
7510: IFTRUE 7514
7512: GO 7577
7514: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7515: LD_ADDR_VAR 0 6
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 21
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7530: LD_ADDR_VAR 0 7
7534: PUSH
7535: LD_INT 44
7537: PUSH
7538: LD_INT 43
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7545: LD_ADDR_VAR 0 8
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7560: LD_ADDR_VAR 0 9
7564: PUSH
7565: LD_INT 1
7567: PUSH
7568: LD_INT 3
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7578: LD_ADDR_OWVAR 37
7582: PUSH
7583: LD_VAR 0 6
7587: PUSH
7588: LD_INT 1
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 12
7600: ARRAY
7601: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7602: LD_ADDR_OWVAR 39
7606: PUSH
7607: LD_VAR 0 9
7611: PUSH
7612: LD_INT 1
7614: PPUSH
7615: LD_VAR 0 9
7619: PPUSH
7620: CALL_OW 12
7624: ARRAY
7625: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7626: LD_ADDR_OWVAR 38
7630: PUSH
7631: LD_VAR 0 8
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_VAR 0 8
7643: PPUSH
7644: CALL_OW 12
7648: ARRAY
7649: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7650: LD_ADDR_OWVAR 40
7654: PUSH
7655: LD_VAR 0 7
7659: PUSH
7660: LD_INT 1
7662: PPUSH
7663: LD_VAR 0 7
7667: PPUSH
7668: CALL_OW 12
7672: ARRAY
7673: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7674: LD_ADDR_OWVAR 41
7678: PUSH
7679: LD_INT 100
7681: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7682: LD_ADDR_VAR 0 3
7686: PUSH
7687: LD_VAR 0 3
7691: PPUSH
7692: LD_VAR 0 3
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: PPUSH
7701: CALL_OW 45
7705: PPUSH
7706: CALL_OW 2
7710: ST_TO_ADDR
// end ;
7711: GO 7324
7713: POP
7714: POP
// end ;
7715: LD_VAR 0 3
7719: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// for i = 1 to n do
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: DOUBLE
7735: LD_INT 1
7737: DEC
7738: ST_TO_ADDR
7739: LD_VAR 0 1
7743: PUSH
7744: FOR_TO
7745: IFFALSE 8133
// begin uc_nation := rand ( 1 , 3 ) ;
7747: LD_ADDR_OWVAR 21
7751: PUSH
7752: LD_INT 1
7754: PPUSH
7755: LD_INT 3
7757: PPUSH
7758: CALL_OW 12
7762: ST_TO_ADDR
// case uc_nation of 1 :
7763: LD_OWVAR 21
7767: PUSH
7768: LD_INT 1
7770: DOUBLE
7771: EQUAL
7772: IFTRUE 7776
7774: GO 7843
7776: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7777: LD_ADDR_VAR 0 6
7781: PUSH
7782: LD_INT 4
7784: PUSH
7785: LD_INT 5
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7792: LD_ADDR_VAR 0 7
7796: PUSH
7797: LD_INT 6
7799: PUSH
7800: LD_INT 7
7802: PUSH
7803: LD_INT 9
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7811: LD_ADDR_VAR 0 8
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7826: LD_ADDR_VAR 0 9
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: ST_TO_ADDR
// end ; 2 :
7841: GO 7998
7843: LD_INT 2
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 7926
7851: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7852: LD_ADDR_VAR 0 6
7856: PUSH
7857: LD_INT 13
7859: PUSH
7860: LD_INT 14
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7867: LD_ADDR_VAR 0 7
7871: PUSH
7872: LD_INT 27
7874: PUSH
7875: LD_INT 26
7877: PUSH
7878: LD_INT 28
7880: PUSH
7881: LD_INT 29
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7890: LD_ADDR_VAR 0 8
7894: PUSH
7895: LD_INT 1
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7905: LD_ADDR_VAR 0 9
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: ST_TO_ADDR
// end ; 3 :
7924: GO 7998
7926: LD_INT 3
7928: DOUBLE
7929: EQUAL
7930: IFTRUE 7934
7932: GO 7997
7934: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7950: LD_ADDR_VAR 0 7
7954: PUSH
7955: LD_INT 46
7957: PUSH
7958: LD_INT 45
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7965: LD_ADDR_VAR 0 8
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: LD_INT 3
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: ST_TO_ADDR
// end ; end ;
7995: GO 7998
7997: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7998: LD_ADDR_OWVAR 37
8002: PUSH
8003: LD_VAR 0 6
8007: PUSH
8008: LD_INT 1
8010: PPUSH
8011: LD_VAR 0 6
8015: PPUSH
8016: CALL_OW 12
8020: ARRAY
8021: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8022: LD_ADDR_OWVAR 39
8026: PUSH
8027: LD_VAR 0 9
8031: PUSH
8032: LD_INT 1
8034: PPUSH
8035: LD_VAR 0 9
8039: PPUSH
8040: CALL_OW 12
8044: ARRAY
8045: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8046: LD_ADDR_OWVAR 38
8050: PUSH
8051: LD_VAR 0 8
8055: PUSH
8056: LD_INT 1
8058: PPUSH
8059: LD_VAR 0 8
8063: PPUSH
8064: CALL_OW 12
8068: ARRAY
8069: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8070: LD_ADDR_OWVAR 40
8074: PUSH
8075: LD_VAR 0 7
8079: PUSH
8080: LD_INT 1
8082: PPUSH
8083: LD_VAR 0 7
8087: PPUSH
8088: CALL_OW 12
8092: ARRAY
8093: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8094: LD_ADDR_OWVAR 41
8098: PUSH
8099: LD_INT 100
8101: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8102: LD_ADDR_VAR 0 3
8106: PUSH
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 1
8119: PLUS
8120: PPUSH
8121: CALL_OW 45
8125: PPUSH
8126: CALL_OW 2
8130: ST_TO_ADDR
// end ;
8131: GO 7744
8133: POP
8134: POP
// end ;
8135: LD_VAR 0 3
8139: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
// for i = 1 to n do
8144: LD_ADDR_VAR 0 4
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_VAR 0 1
8158: PUSH
8159: FOR_TO
8160: IFFALSE 8234
// begin uc_nation := rand ( 1 , 3 ) ;
8162: LD_ADDR_OWVAR 21
8166: PUSH
8167: LD_INT 1
8169: PPUSH
8170: LD_INT 3
8172: PPUSH
8173: CALL_OW 12
8177: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8178: LD_INT 0
8180: PPUSH
8181: LD_INT 8
8183: PUSH
8184: LD_INT 9
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 1
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: CALL_OW 12
8205: ARRAY
8206: PPUSH
8207: LD_VAR 0 2
8211: PPUSH
8212: CALL_OW 380
// result := result ^ CreateHuman ;
8216: LD_ADDR_VAR 0 3
8220: PUSH
8221: LD_VAR 0 3
8225: PUSH
8226: CALL_OW 44
8230: ADD
8231: ST_TO_ADDR
// end ;
8232: GO 8159
8234: POP
8235: POP
// end ;
8236: LD_VAR 0 3
8240: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
8247: PPUSH
8248: PPUSH
8249: PPUSH
// for i = 1 to n do
8250: LD_ADDR_VAR 0 4
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_VAR 0 1
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8662
// begin uc_nation := rand ( 1 , 3 ) ;
8268: LD_ADDR_OWVAR 21
8272: PUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_INT 3
8278: PPUSH
8279: CALL_OW 12
8283: ST_TO_ADDR
// case uc_nation of 1 :
8284: LD_OWVAR 21
8288: PUSH
8289: LD_INT 1
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8370
8297: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8313: LD_ADDR_VAR 0 7
8317: PUSH
8318: LD_INT 6
8320: PUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 10
8326: PUSH
8327: LD_EXP 17
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8338: LD_ADDR_VAR 0 8
8342: PUSH
8343: LD_INT 1
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8353: LD_ADDR_VAR 0 9
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: LD_INT 3
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// end ; 2 :
8368: GO 8527
8370: LD_INT 2
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8451
8378: POP
// begin chassis := [ ar_half_tracked ] ;
8379: LD_ADDR_VAR 0 6
8383: PUSH
8384: LD_INT 14
8386: PUSH
8387: EMPTY
8388: LIST
8389: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8390: LD_ADDR_VAR 0 7
8394: PUSH
8395: LD_EXP 18
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 28
8405: PUSH
8406: LD_INT 29
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8415: LD_ADDR_VAR 0 8
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8430: LD_ADDR_VAR 0 9
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: ST_TO_ADDR
// end ; 3 :
8449: GO 8527
8451: LD_INT 3
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8526
8459: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8460: LD_ADDR_VAR 0 6
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 24
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8475: LD_ADDR_VAR 0 7
8479: PUSH
8480: LD_INT 46
8482: PUSH
8483: LD_INT 45
8485: PUSH
8486: LD_INT 49
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8494: LD_ADDR_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: LD_INT 3
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8509: LD_ADDR_VAR 0 9
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: ST_TO_ADDR
// end ; end ;
8524: GO 8527
8526: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8527: LD_ADDR_OWVAR 37
8531: PUSH
8532: LD_VAR 0 6
8536: PUSH
8537: LD_INT 1
8539: PPUSH
8540: LD_VAR 0 6
8544: PPUSH
8545: CALL_OW 12
8549: ARRAY
8550: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8551: LD_ADDR_OWVAR 39
8555: PUSH
8556: LD_VAR 0 9
8560: PUSH
8561: LD_INT 1
8563: PPUSH
8564: LD_VAR 0 9
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8575: LD_ADDR_OWVAR 38
8579: PUSH
8580: LD_VAR 0 8
8584: PUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_VAR 0 8
8592: PPUSH
8593: CALL_OW 12
8597: ARRAY
8598: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8599: LD_ADDR_OWVAR 40
8603: PUSH
8604: LD_VAR 0 7
8608: PUSH
8609: LD_INT 1
8611: PPUSH
8612: LD_VAR 0 7
8616: PPUSH
8617: CALL_OW 12
8621: ARRAY
8622: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8623: LD_ADDR_OWVAR 41
8627: PUSH
8628: LD_INT 100
8630: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_VAR 0 3
8640: PPUSH
8641: LD_VAR 0 3
8645: PUSH
8646: LD_INT 1
8648: PLUS
8649: PPUSH
8650: CALL_OW 45
8654: PPUSH
8655: CALL_OW 2
8659: ST_TO_ADDR
// end ;
8660: GO 8265
8662: POP
8663: POP
// end ; end_of_file
8664: LD_VAR 0 3
8668: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8669: LD_INT 22
8671: PUSH
8672: LD_INT 7
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: IFFALSE 9189
8685: GO 8687
8687: DISABLE
8688: LD_INT 0
8690: PPUSH
8691: PPUSH
8692: PPUSH
// begin enable ;
8693: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8694: LD_ADDR_VAR 0 3
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 7
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 69
8713: ST_TO_ADDR
// for i in tmp do
8714: LD_ADDR_VAR 0 1
8718: PUSH
8719: LD_VAR 0 3
8723: PUSH
8724: FOR_IN
8725: IFFALSE 9187
// begin case GetType ( i ) of unit_human :
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 247
8736: PUSH
8737: LD_INT 1
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8944
8745: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 256
8755: PUSH
8756: LD_INT 250
8758: LESS
8759: PUSH
8760: LD_INT 5
8762: PPUSH
8763: LD_INT 7
8765: PPUSH
8766: CALL_OW 321
8770: PUSH
8771: LD_INT 2
8773: NONEQUAL
8774: AND
8775: IFFALSE 8779
// continue ;
8777: GO 8724
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 257
8788: PUSH
8789: LD_INT 12
8791: PUSH
8792: LD_INT 15
8794: PUSH
8795: LD_INT 16
8797: PUSH
8798: LD_INT 17
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 8
8815: PUSH
8816: LD_INT 9
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: IN
8831: IFFALSE 8869
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_INT 22
8840: PUSH
8841: LD_OWVAR 2
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: PPUSH
8855: LD_VAR 0 1
8859: PPUSH
8860: CALL_OW 74
8864: PPUSH
8865: CALL_OW 115
// if GetClass ( i ) = 3 then
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 257
8878: PUSH
8879: LD_INT 3
8881: EQUAL
8882: IFFALSE 8942
// if IsInUnit ( i ) then
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 310
8893: IFFALSE 8933
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8895: LD_VAR 0 1
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_OWVAR 2
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PPUSH
8917: LD_VAR 0 1
8921: PPUSH
8922: CALL_OW 74
8926: PPUSH
8927: CALL_OW 115
8931: GO 8942
// ComEspace ( i ) ;
8933: LD_VAR 0 1
8937: PPUSH
8938: CALL 1933 0 1
// end ; unit_vehicle :
8942: GO 9185
8944: LD_INT 2
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 9184
8952: POP
// begin if GetLives ( i ) > 250 then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 256
8962: PUSH
8963: LD_INT 250
8965: GREATER
8966: IFFALSE 9182
// begin if GetWeapon ( i ) = us_artillery then
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 264
8977: PUSH
8978: LD_EXP 17
8982: EQUAL
8983: IFFALSE 9051
// begin if IsInArea ( i , zoneOut ) then
8985: LD_VAR 0 1
8989: PPUSH
8990: LD_INT 4
8992: PPUSH
8993: CALL_OW 308
8997: IFFALSE 9013
// ComMoveToArea ( i , zoneBorder ) else
8999: LD_VAR 0 1
9003: PPUSH
9004: LD_INT 9
9006: PPUSH
9007: CALL_OW 113
9011: GO 9049
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_INT 22
9020: PUSH
9021: LD_OWVAR 2
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 1
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end else
9049: GO 9182
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 264
9060: PUSH
9061: LD_INT 11
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_EXP 14
9071: PUSH
9072: LD_INT 49
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: IN
9081: IFFALSE 9111
// begin if IsInArea ( i , zoneOut ) then
9083: LD_VAR 0 1
9087: PPUSH
9088: LD_INT 4
9090: PPUSH
9091: CALL_OW 308
9095: IFFALSE 9109
// ComSpecMove ( i , specPos ) ;
9097: LD_VAR 0 1
9101: PPUSH
9102: LD_INT 8
9104: PPUSH
9105: CALL 1979 0 2
// end else
9109: GO 9182
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 264
9120: PUSH
9121: LD_EXP 18
9125: PUSH
9126: LD_INT 29
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: IN
9133: IFFALSE 9146
// ComSpecAttack ( i ) else
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL 2407 0 1
9144: GO 9182
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9146: LD_VAR 0 1
9150: PPUSH
9151: LD_INT 22
9153: PUSH
9154: LD_OWVAR 2
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: PPUSH
9178: CALL_OW 115
// end ; end ; end ;
9182: GO 9185
9184: POP
// end ;
9185: GO 8724
9187: POP
9188: POP
// end ; end_of_file
9189: PPOPN 3
9191: END
// export function InitDisplay ; begin
9192: LD_INT 0
9194: PPUSH
// while true do
9195: LD_INT 1
9197: IFFALSE 9284
// begin if waveNumber < 100 then
9199: LD_EXP 5
9203: PUSH
9204: LD_INT 100
9206: LESS
9207: IFFALSE 9258
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9209: LD_ADDR_OWVAR 47
9213: PUSH
9214: LD_STRING #Tick
9216: PUSH
9217: LD_OWVAR 1
9221: PUSH
9222: LD_STRING #Points
9224: PUSH
9225: LD_EXP 2
9229: PUSH
9230: LD_STRING #Attack
9232: PUSH
9233: LD_EXP 4
9237: PUSH
9238: LD_STRING #Wave
9240: PUSH
9241: LD_EXP 5
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
9256: GO 9275
// Display_Strings := [ #Win , points ] ;
9258: LD_ADDR_OWVAR 47
9262: PUSH
9263: LD_STRING #Win
9265: PUSH
9266: LD_EXP 2
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9275: LD_INT 35
9277: PPUSH
9278: CALL_OW 67
// end ;
9282: GO 9195
// end ; end_of_file
9284: LD_VAR 0 1
9288: RET
// export function InitBonus ; var i , chance ; begin
9289: LD_INT 0
9291: PPUSH
9292: PPUSH
9293: PPUSH
// chance := rand ( 1 , 99 ) ;
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: LD_INT 1
9301: PPUSH
9302: LD_INT 99
9304: PPUSH
9305: CALL_OW 12
9309: ST_TO_ADDR
// case chance of 1 .. 10 :
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 1
9317: DOUBLE
9318: GREATEREQUAL
9319: IFFALSE 9327
9321: LD_INT 10
9323: DOUBLE
9324: LESSEQUAL
9325: IFTRUE 9329
9327: GO 9340
9329: POP
// i := 5 ; 11 .. 25 :
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_INT 5
9337: ST_TO_ADDR
9338: GO 9441
9340: LD_INT 11
9342: DOUBLE
9343: GREATEREQUAL
9344: IFFALSE 9352
9346: LD_INT 25
9348: DOUBLE
9349: LESSEQUAL
9350: IFTRUE 9354
9352: GO 9365
9354: POP
// i := 3 ; 26 .. 40 :
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: LD_INT 3
9362: ST_TO_ADDR
9363: GO 9441
9365: LD_INT 26
9367: DOUBLE
9368: GREATEREQUAL
9369: IFFALSE 9377
9371: LD_INT 40
9373: DOUBLE
9374: LESSEQUAL
9375: IFTRUE 9379
9377: GO 9390
9379: POP
// i := 2 ; 41 .. 60 :
9380: LD_ADDR_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ST_TO_ADDR
9388: GO 9441
9390: LD_INT 41
9392: DOUBLE
9393: GREATEREQUAL
9394: IFFALSE 9402
9396: LD_INT 60
9398: DOUBLE
9399: LESSEQUAL
9400: IFTRUE 9404
9402: GO 9415
9404: POP
// i := 4 ; 61 .. 99 :
9405: LD_ADDR_VAR 0 2
9409: PUSH
9410: LD_INT 4
9412: ST_TO_ADDR
9413: GO 9441
9415: LD_INT 61
9417: DOUBLE
9418: GREATEREQUAL
9419: IFFALSE 9427
9421: LD_INT 99
9423: DOUBLE
9424: LESSEQUAL
9425: IFTRUE 9429
9427: GO 9440
9429: POP
// i := 1 ; end ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
9438: GO 9441
9440: POP
// case i of 1 :
9441: LD_VAR 0 2
9445: PUSH
9446: LD_INT 1
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9543
9454: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9455: LD_INT 22
9457: PUSH
9458: LD_OWVAR 2
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 25
9472: PUSH
9473: LD_INT 12
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 25
9482: PUSH
9483: LD_INT 16
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 25
9492: PUSH
9493: LD_INT 15
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 25
9502: PUSH
9503: LD_INT 17
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 69
9525: PUSH
9526: LD_INT 10
9528: GREATEREQUAL
9529: IFFALSE 9537
// BonusIV else
9531: CALL 10116 0 0
9535: GO 9541
// BonusI ;
9537: CALL 9621 0 0
// end ; 2 :
9541: GO 9616
9543: LD_INT 2
9545: DOUBLE
9546: EQUAL
9547: IFTRUE 9551
9549: GO 9558
9551: POP
// begin BonusII ;
9552: CALL 9794 0 0
// end ; 3 :
9556: GO 9616
9558: LD_INT 3
9560: DOUBLE
9561: EQUAL
9562: IFTRUE 9566
9564: GO 9573
9566: POP
// begin BonusIII ;
9567: CALL 9942 0 0
// end ; 4 :
9571: GO 9616
9573: LD_INT 4
9575: DOUBLE
9576: EQUAL
9577: IFTRUE 9581
9579: GO 9588
9581: POP
// begin BonusIV ;
9582: CALL 10116 0 0
// end ; 5 :
9586: GO 9616
9588: LD_INT 5
9590: DOUBLE
9591: EQUAL
9592: IFTRUE 9596
9594: GO 9615
9596: POP
// begin if graveyard then
9597: LD_EXP 8
9601: IFFALSE 9609
// BonusV else
9603: CALL 10534 0 0
9607: GO 9613
// BonusIII ;
9609: CALL 9942 0 0
// end ; end ;
9613: GO 9616
9615: POP
// end ;
9616: LD_VAR 0 1
9620: RET
// export function BonusI ; var i ; begin
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
// case Query ( AddGift1 ) of 1 :
9625: LD_STRING AddGift1
9627: PPUSH
9628: CALL_OW 97
9632: PUSH
9633: LD_INT 1
9635: DOUBLE
9636: EQUAL
9637: IFTRUE 9641
9639: GO 9720
9641: POP
// begin for i = 1 to 3 do
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: DOUBLE
9648: LD_INT 1
9650: DEC
9651: ST_TO_ADDR
9652: LD_INT 3
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9716
// begin uc_side := your_side ;
9658: LD_ADDR_OWVAR 20
9662: PUSH
9663: LD_OWVAR 2
9667: ST_TO_ADDR
// uc_nation := 0 ;
9668: LD_ADDR_OWVAR 21
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9676: LD_INT 0
9678: PPUSH
9679: LD_INT 12
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9689: CALL_OW 44
9693: PPUSH
9694: LD_EXP 9
9698: PPUSH
9699: LD_EXP 10
9703: PPUSH
9704: LD_INT 15
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 50
// end ;
9714: GO 9655
9716: POP
9717: POP
// end ; 2 :
9718: GO 9789
9720: LD_INT 2
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9770
9728: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9729: LD_EXP 11
9733: PPUSH
9734: CALL_OW 274
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: LD_EXP 11
9746: PPUSH
9747: CALL_OW 274
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 275
9759: PUSH
9760: LD_INT 100
9762: PLUS
9763: PPUSH
9764: CALL_OW 277
// end ; 3 :
9768: GO 9789
9770: LD_INT 3
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 9788
9778: POP
// begin SetTeamExp ( 2 ) ;
9779: LD_INT 2
9781: PPUSH
9782: CALL 940 0 1
// end ; end ;
9786: GO 9789
9788: POP
// end ;
9789: LD_VAR 0 1
9793: RET
// export function BonusII ; var i ; begin
9794: LD_INT 0
9796: PPUSH
9797: PPUSH
// case Query ( AddGift2 ) of 1 :
9798: LD_STRING AddGift2
9800: PPUSH
9801: CALL_OW 97
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9856
9814: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9815: LD_EXP 11
9819: PPUSH
9820: CALL_OW 274
9824: PPUSH
9825: LD_INT 1
9827: PPUSH
9828: LD_EXP 11
9832: PPUSH
9833: CALL_OW 274
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 275
9845: PUSH
9846: LD_INT 500
9848: PLUS
9849: PPUSH
9850: CALL_OW 277
// end ; 2 :
9854: GO 9937
9856: LD_INT 2
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9874
9864: POP
// begin SetTeamExp ( 3 ) ;
9865: LD_INT 3
9867: PPUSH
9868: CALL 940 0 1
// end ; 3 :
9872: GO 9937
9874: LD_INT 3
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 9936
9882: POP
// begin uc_side = your_side ;
9883: LD_ADDR_OWVAR 20
9887: PUSH
9888: LD_OWVAR 2
9892: ST_TO_ADDR
// uc_nation = nation_russian ;
9893: LD_ADDR_OWVAR 21
9897: PUSH
9898: LD_INT 3
9900: ST_TO_ADDR
// vc_chassis = 25 ;
9901: LD_ADDR_OWVAR 37
9905: PUSH
9906: LD_INT 25
9908: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9909: CALL_OW 45
9913: PPUSH
9914: LD_EXP 9
9918: PPUSH
9919: LD_EXP 10
9923: PPUSH
9924: LD_INT 15
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 50
// end ; end ;
9934: GO 9937
9936: POP
// end ;
9937: LD_VAR 0 1
9941: RET
// export function BonusIII ; var i ; begin
9942: LD_INT 0
9944: PPUSH
9945: PPUSH
// case Query ( AddGift3 ) of 1 :
9946: LD_STRING AddGift3
9948: PPUSH
9949: CALL_OW 97
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 10004
9962: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9963: LD_EXP 11
9967: PPUSH
9968: CALL_OW 274
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_EXP 11
9980: PPUSH
9981: CALL_OW 274
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 275
9993: PUSH
9994: LD_INT 1000
9996: PLUS
9997: PPUSH
9998: CALL_OW 277
// end ; 2 :
10002: GO 10111
10004: LD_INT 2
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10024
10012: POP
// begin PrepareGuards ( waveNumber ) ;
10013: LD_EXP 5
10017: PPUSH
10018: CALL 1086 0 1
// end ; 3 :
10022: GO 10111
10024: LD_INT 3
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10110
10032: POP
// begin uc_side = your_side ;
10033: LD_ADDR_OWVAR 20
10037: PUSH
10038: LD_OWVAR 2
10042: ST_TO_ADDR
// uc_nation = nation_american ;
10043: LD_ADDR_OWVAR 21
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// vc_chassis = us_morphling ;
10051: LD_ADDR_OWVAR 37
10055: PUSH
10056: LD_INT 5
10058: ST_TO_ADDR
// vc_engine := engine_siberite ;
10059: LD_ADDR_OWVAR 39
10063: PUSH
10064: LD_INT 3
10066: ST_TO_ADDR
// vc_control := control_computer ;
10067: LD_ADDR_OWVAR 38
10071: PUSH
10072: LD_INT 3
10074: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10075: LD_ADDR_OWVAR 40
10079: PUSH
10080: LD_INT 8
10082: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10083: CALL_OW 45
10087: PPUSH
10088: LD_EXP 9
10092: PPUSH
10093: LD_EXP 10
10097: PPUSH
10098: LD_INT 15
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 50
// end ; end ;
10108: GO 10111
10110: POP
// end ;
10111: LD_VAR 0 1
10115: RET
// export function BonusIV ; var i ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
// case Query ( AddGift4 ) of 1 :
10120: LD_STRING AddGift4
10122: PPUSH
10123: CALL_OW 97
10127: PUSH
10128: LD_INT 1
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 10460
10136: POP
// begin i := rand ( 1 , 3 ) ;
10137: LD_ADDR_VAR 0 2
10141: PUSH
10142: LD_INT 1
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: CALL_OW 12
10152: ST_TO_ADDR
// uc_side := your_side ;
10153: LD_ADDR_OWVAR 20
10157: PUSH
10158: LD_OWVAR 2
10162: ST_TO_ADDR
// case i of 1 :
10163: LD_VAR 0 2
10167: PUSH
10168: LD_INT 1
10170: DOUBLE
10171: EQUAL
10172: IFTRUE 10176
10174: GO 10263
10176: POP
// begin uc_nation := nation_arabian ;
10177: LD_ADDR_OWVAR 21
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10185: LD_ADDR_OWVAR 37
10189: PUSH
10190: LD_INT 14
10192: ST_TO_ADDR
// vc_engine := engine_combustion ;
10193: LD_ADDR_OWVAR 39
10197: PUSH
10198: LD_INT 1
10200: ST_TO_ADDR
// vc_control := control_manual ;
10201: LD_ADDR_OWVAR 38
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10209: LD_ADDR_OWVAR 40
10213: PUSH
10214: LD_INT 27
10216: PUSH
10217: LD_INT 28
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 1
10226: PPUSH
10227: LD_INT 2
10229: PPUSH
10230: CALL_OW 12
10234: ARRAY
10235: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10236: CALL_OW 45
10240: PPUSH
10241: LD_EXP 9
10245: PPUSH
10246: LD_EXP 10
10250: PPUSH
10251: LD_INT 15
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 50
// end ; 2 :
10261: GO 10458
10263: LD_INT 2
10265: DOUBLE
10266: EQUAL
10267: IFTRUE 10271
10269: GO 10362
10271: POP
// begin uc_nation := nation_american ;
10272: LD_ADDR_OWVAR 21
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// vc_chassis := us_morphling ;
10280: LD_ADDR_OWVAR 37
10284: PUSH
10285: LD_INT 5
10287: ST_TO_ADDR
// vc_engine := engine_siberite ;
10288: LD_ADDR_OWVAR 39
10292: PUSH
10293: LD_INT 3
10295: ST_TO_ADDR
// vc_control := control_computer ;
10296: LD_ADDR_OWVAR 38
10300: PUSH
10301: LD_INT 3
10303: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10304: LD_ADDR_OWVAR 40
10308: PUSH
10309: LD_INT 12
10311: PUSH
10312: LD_INT 10
10314: PUSH
10315: LD_INT 7
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_INT 3
10328: PPUSH
10329: CALL_OW 12
10333: ARRAY
10334: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10335: CALL_OW 45
10339: PPUSH
10340: LD_EXP 9
10344: PPUSH
10345: LD_EXP 10
10349: PPUSH
10350: LD_INT 15
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 50
// end ; 3 :
10360: GO 10458
10362: LD_INT 3
10364: DOUBLE
10365: EQUAL
10366: IFTRUE 10370
10368: GO 10457
10370: POP
// begin uc_nation := nation_russian ;
10371: LD_ADDR_OWVAR 21
10375: PUSH
10376: LD_INT 3
10378: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10379: LD_ADDR_OWVAR 37
10383: PUSH
10384: LD_INT 22
10386: ST_TO_ADDR
// vc_engine := engine_combustion ;
10387: LD_ADDR_OWVAR 39
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// vc_control := control_manual ;
10395: LD_ADDR_OWVAR 38
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10403: LD_ADDR_OWVAR 40
10407: PUSH
10408: LD_INT 45
10410: PUSH
10411: LD_INT 44
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 1
10420: PPUSH
10421: LD_INT 2
10423: PPUSH
10424: CALL_OW 12
10428: ARRAY
10429: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10430: CALL_OW 45
10434: PPUSH
10435: LD_EXP 9
10439: PPUSH
10440: LD_EXP 10
10444: PPUSH
10445: LD_INT 15
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 50
// end ; end ;
10455: GO 10458
10457: POP
// end ; 2 :
10458: GO 10529
10460: LD_INT 2
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10510
10468: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10469: LD_EXP 11
10473: PPUSH
10474: CALL_OW 274
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: LD_EXP 11
10486: PPUSH
10487: CALL_OW 274
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 275
10499: PUSH
10500: LD_INT 100
10502: PLUS
10503: PPUSH
10504: CALL_OW 277
// end ; 3 :
10508: GO 10529
10510: LD_INT 3
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10528
10518: POP
// begin SetTeamExp ( 2 ) ;
10519: LD_INT 2
10521: PPUSH
10522: CALL 940 0 1
// end ; end ;
10526: GO 10529
10528: POP
// end ;
10529: LD_VAR 0 1
10533: RET
// export function BonusV ; var i , j ; begin
10534: LD_INT 0
10536: PPUSH
10537: PPUSH
10538: PPUSH
// case Query ( AddGift5 ) of 1 :
10539: LD_STRING AddGift5
10541: PPUSH
10542: CALL_OW 97
10546: PUSH
10547: LD_INT 1
10549: DOUBLE
10550: EQUAL
10551: IFTRUE 10555
10553: GO 10899
10555: POP
// begin for j = 1 to 3 do
10556: LD_ADDR_VAR 0 3
10560: PUSH
10561: DOUBLE
10562: LD_INT 1
10564: DEC
10565: ST_TO_ADDR
10566: LD_INT 3
10568: PUSH
10569: FOR_TO
10570: IFFALSE 10895
// begin i := rand ( 1 , 3 ) ;
10572: LD_ADDR_VAR 0 2
10576: PUSH
10577: LD_INT 1
10579: PPUSH
10580: LD_INT 3
10582: PPUSH
10583: CALL_OW 12
10587: ST_TO_ADDR
// uc_side := your_side ;
10588: LD_ADDR_OWVAR 20
10592: PUSH
10593: LD_OWVAR 2
10597: ST_TO_ADDR
// case i of 1 :
10598: LD_VAR 0 2
10602: PUSH
10603: LD_INT 1
10605: DOUBLE
10606: EQUAL
10607: IFTRUE 10611
10609: GO 10698
10611: POP
// begin uc_nation := nation_arabian ;
10612: LD_ADDR_OWVAR 21
10616: PUSH
10617: LD_INT 2
10619: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10620: LD_ADDR_OWVAR 37
10624: PUSH
10625: LD_INT 14
10627: ST_TO_ADDR
// vc_engine := engine_combustion ;
10628: LD_ADDR_OWVAR 39
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// vc_control := control_manual ;
10636: LD_ADDR_OWVAR 38
10640: PUSH
10641: LD_INT 1
10643: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10644: LD_ADDR_OWVAR 40
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: LD_INT 28
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 2
10664: PPUSH
10665: CALL_OW 12
10669: ARRAY
10670: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10671: CALL_OW 45
10675: PPUSH
10676: LD_EXP 9
10680: PPUSH
10681: LD_EXP 10
10685: PPUSH
10686: LD_INT 15
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 50
// end ; 2 :
10696: GO 10893
10698: LD_INT 2
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10797
10706: POP
// begin uc_nation := nation_american ;
10707: LD_ADDR_OWVAR 21
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
// vc_chassis := us_morphling ;
10715: LD_ADDR_OWVAR 37
10719: PUSH
10720: LD_INT 5
10722: ST_TO_ADDR
// vc_engine := engine_siberite ;
10723: LD_ADDR_OWVAR 39
10727: PUSH
10728: LD_INT 3
10730: ST_TO_ADDR
// vc_control := control_computer ;
10731: LD_ADDR_OWVAR 38
10735: PUSH
10736: LD_INT 3
10738: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10739: LD_ADDR_OWVAR 40
10743: PUSH
10744: LD_INT 12
10746: PUSH
10747: LD_INT 11
10749: PUSH
10750: LD_INT 7
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 1
10760: PPUSH
10761: LD_INT 3
10763: PPUSH
10764: CALL_OW 12
10768: ARRAY
10769: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10770: CALL_OW 45
10774: PPUSH
10775: LD_EXP 9
10779: PPUSH
10780: LD_EXP 10
10784: PPUSH
10785: LD_INT 15
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 50
// end ; 3 :
10795: GO 10893
10797: LD_INT 3
10799: DOUBLE
10800: EQUAL
10801: IFTRUE 10805
10803: GO 10892
10805: POP
// begin uc_nation := nation_russian ;
10806: LD_ADDR_OWVAR 21
10810: PUSH
10811: LD_INT 3
10813: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10814: LD_ADDR_OWVAR 37
10818: PUSH
10819: LD_INT 22
10821: ST_TO_ADDR
// vc_engine := engine_combustion ;
10822: LD_ADDR_OWVAR 39
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// vc_control := control_manual ;
10830: LD_ADDR_OWVAR 38
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10838: LD_ADDR_OWVAR 40
10842: PUSH
10843: LD_INT 45
10845: PUSH
10846: LD_INT 44
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 1
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: CALL_OW 12
10863: ARRAY
10864: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10865: CALL_OW 45
10869: PPUSH
10870: LD_EXP 9
10874: PPUSH
10875: LD_EXP 10
10879: PPUSH
10880: LD_INT 15
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 50
// end ; end ;
10890: GO 10893
10892: POP
// end ;
10893: GO 10569
10895: POP
10896: POP
// end ; 2 :
10897: GO 10965
10899: LD_INT 2
10901: DOUBLE
10902: EQUAL
10903: IFTRUE 10907
10905: GO 10949
10907: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10908: LD_EXP 11
10912: PPUSH
10913: CALL_OW 274
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: LD_EXP 11
10925: PPUSH
10926: CALL_OW 274
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 275
10938: PUSH
10939: LD_INT 500
10941: PLUS
10942: PPUSH
10943: CALL_OW 277
// end ; 3 :
10947: GO 10965
10949: LD_INT 3
10951: DOUBLE
10952: EQUAL
10953: IFTRUE 10957
10955: GO 10964
10957: POP
// begin GetBack ( ) ;
10958: CALL 1746 0 0
// end ; end ;
10962: GO 10965
10964: POP
// end ; end_of_file
10965: LD_VAR 0 1
10969: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
10970: LD_INT 0
10972: PPUSH
// ar_miner := 81 ;
10973: LD_ADDR_EXP 21
10977: PUSH
10978: LD_INT 81
10980: ST_TO_ADDR
// ar_crane := 88 ;
10981: LD_ADDR_EXP 20
10985: PUSH
10986: LD_INT 88
10988: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10989: LD_ADDR_EXP 15
10993: PUSH
10994: LD_INT 89
10996: ST_TO_ADDR
// us_hack := 99 ;
10997: LD_ADDR_EXP 16
11001: PUSH
11002: LD_INT 99
11004: ST_TO_ADDR
// us_artillery := 97 ;
11005: LD_ADDR_EXP 17
11009: PUSH
11010: LD_INT 97
11012: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11013: LD_ADDR_EXP 18
11017: PUSH
11018: LD_INT 91
11020: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11021: LD_ADDR_EXP 19
11025: PUSH
11026: LD_INT 92
11028: ST_TO_ADDR
// ru_radar := 98 ;
11029: LD_ADDR_EXP 14
11033: PUSH
11034: LD_INT 98
11036: ST_TO_ADDR
// tech_Artillery := 80 ;
11037: LD_ADDR_EXP 22
11041: PUSH
11042: LD_INT 80
11044: ST_TO_ADDR
// tech_RadMat := 81 ;
11045: LD_ADDR_EXP 23
11049: PUSH
11050: LD_INT 81
11052: ST_TO_ADDR
// tech_BasicTools := 82 ;
11053: LD_ADDR_EXP 24
11057: PUSH
11058: LD_INT 82
11060: ST_TO_ADDR
// tech_Cargo := 83 ;
11061: LD_ADDR_EXP 25
11065: PUSH
11066: LD_INT 83
11068: ST_TO_ADDR
// tech_Track := 84 ;
11069: LD_ADDR_EXP 26
11073: PUSH
11074: LD_INT 84
11076: ST_TO_ADDR
// tech_Crane := 85 ;
11077: LD_ADDR_EXP 27
11081: PUSH
11082: LD_INT 85
11084: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11085: LD_ADDR_EXP 28
11089: PUSH
11090: LD_INT 86
11092: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11093: LD_ADDR_EXP 29
11097: PUSH
11098: LD_INT 87
11100: ST_TO_ADDR
// end ;
11101: LD_VAR 0 1
11105: RET
// every 1 do
11106: GO 11108
11108: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11109: CALL 10970 0 0
11113: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11114: LD_VAR 0 2
11118: PUSH
11119: LD_INT 100
11121: EQUAL
11122: IFFALSE 12071
// begin if not StreamModeActive then
11124: LD_EXP 30
11128: NOT
11129: IFFALSE 11139
// StreamModeActive := true ;
11131: LD_ADDR_EXP 30
11135: PUSH
11136: LD_INT 1
11138: ST_TO_ADDR
// if p3 = 0 then
11139: LD_VAR 0 3
11143: PUSH
11144: LD_INT 0
11146: EQUAL
11147: IFFALSE 11153
// InitStreamMode ;
11149: CALL 12229 0 0
// if p3 = 1 then
11153: LD_VAR 0 3
11157: PUSH
11158: LD_INT 1
11160: EQUAL
11161: IFFALSE 11171
// sRocket := true ;
11163: LD_ADDR_EXP 35
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// if p3 = 2 then
11171: LD_VAR 0 3
11175: PUSH
11176: LD_INT 2
11178: EQUAL
11179: IFFALSE 11189
// sSpeed := true ;
11181: LD_ADDR_EXP 34
11185: PUSH
11186: LD_INT 1
11188: ST_TO_ADDR
// if p3 = 3 then
11189: LD_VAR 0 3
11193: PUSH
11194: LD_INT 3
11196: EQUAL
11197: IFFALSE 11207
// sEngine := true ;
11199: LD_ADDR_EXP 36
11203: PUSH
11204: LD_INT 1
11206: ST_TO_ADDR
// if p3 = 4 then
11207: LD_VAR 0 3
11211: PUSH
11212: LD_INT 4
11214: EQUAL
11215: IFFALSE 11225
// sSpec := true ;
11217: LD_ADDR_EXP 33
11221: PUSH
11222: LD_INT 1
11224: ST_TO_ADDR
// if p3 = 5 then
11225: LD_VAR 0 3
11229: PUSH
11230: LD_INT 5
11232: EQUAL
11233: IFFALSE 11243
// sLevel := true ;
11235: LD_ADDR_EXP 37
11239: PUSH
11240: LD_INT 1
11242: ST_TO_ADDR
// if p3 = 6 then
11243: LD_VAR 0 3
11247: PUSH
11248: LD_INT 6
11250: EQUAL
11251: IFFALSE 11261
// sArmoury := true ;
11253: LD_ADDR_EXP 38
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// if p3 = 7 then
11261: LD_VAR 0 3
11265: PUSH
11266: LD_INT 7
11268: EQUAL
11269: IFFALSE 11279
// sRadar := true ;
11271: LD_ADDR_EXP 39
11275: PUSH
11276: LD_INT 1
11278: ST_TO_ADDR
// if p3 = 8 then
11279: LD_VAR 0 3
11283: PUSH
11284: LD_INT 8
11286: EQUAL
11287: IFFALSE 11297
// sBunker := true ;
11289: LD_ADDR_EXP 40
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// if p3 = 9 then
11297: LD_VAR 0 3
11301: PUSH
11302: LD_INT 9
11304: EQUAL
11305: IFFALSE 11315
// sHack := true ;
11307: LD_ADDR_EXP 41
11311: PUSH
11312: LD_INT 1
11314: ST_TO_ADDR
// if p3 = 10 then
11315: LD_VAR 0 3
11319: PUSH
11320: LD_INT 10
11322: EQUAL
11323: IFFALSE 11333
// sFire := true ;
11325: LD_ADDR_EXP 42
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// if p3 = 11 then
11333: LD_VAR 0 3
11337: PUSH
11338: LD_INT 11
11340: EQUAL
11341: IFFALSE 11351
// sRefresh := true ;
11343: LD_ADDR_EXP 43
11347: PUSH
11348: LD_INT 1
11350: ST_TO_ADDR
// if p3 = 12 then
11351: LD_VAR 0 3
11355: PUSH
11356: LD_INT 12
11358: EQUAL
11359: IFFALSE 11369
// sExp := true ;
11361: LD_ADDR_EXP 44
11365: PUSH
11366: LD_INT 1
11368: ST_TO_ADDR
// if p3 = 13 then
11369: LD_VAR 0 3
11373: PUSH
11374: LD_INT 13
11376: EQUAL
11377: IFFALSE 11387
// sDepot := true ;
11379: LD_ADDR_EXP 45
11383: PUSH
11384: LD_INT 1
11386: ST_TO_ADDR
// if p3 = 14 then
11387: LD_VAR 0 3
11391: PUSH
11392: LD_INT 14
11394: EQUAL
11395: IFFALSE 11405
// sFlag := true ;
11397: LD_ADDR_EXP 46
11401: PUSH
11402: LD_INT 1
11404: ST_TO_ADDR
// if p3 = 15 then
11405: LD_VAR 0 3
11409: PUSH
11410: LD_INT 15
11412: EQUAL
11413: IFFALSE 11423
// sKamikadze := true ;
11415: LD_ADDR_EXP 54
11419: PUSH
11420: LD_INT 1
11422: ST_TO_ADDR
// if p3 = 16 then
11423: LD_VAR 0 3
11427: PUSH
11428: LD_INT 16
11430: EQUAL
11431: IFFALSE 11441
// sTroll := true ;
11433: LD_ADDR_EXP 55
11437: PUSH
11438: LD_INT 1
11440: ST_TO_ADDR
// if p3 = 17 then
11441: LD_VAR 0 3
11445: PUSH
11446: LD_INT 17
11448: EQUAL
11449: IFFALSE 11459
// sSlow := true ;
11451: LD_ADDR_EXP 56
11455: PUSH
11456: LD_INT 1
11458: ST_TO_ADDR
// if p3 = 18 then
11459: LD_VAR 0 3
11463: PUSH
11464: LD_INT 18
11466: EQUAL
11467: IFFALSE 11477
// sLack := true ;
11469: LD_ADDR_EXP 57
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// if p3 = 19 then
11477: LD_VAR 0 3
11481: PUSH
11482: LD_INT 19
11484: EQUAL
11485: IFFALSE 11495
// sTank := true ;
11487: LD_ADDR_EXP 59
11491: PUSH
11492: LD_INT 1
11494: ST_TO_ADDR
// if p3 = 20 then
11495: LD_VAR 0 3
11499: PUSH
11500: LD_INT 20
11502: EQUAL
11503: IFFALSE 11513
// sRemote := true ;
11505: LD_ADDR_EXP 60
11509: PUSH
11510: LD_INT 1
11512: ST_TO_ADDR
// if p3 = 21 then
11513: LD_VAR 0 3
11517: PUSH
11518: LD_INT 21
11520: EQUAL
11521: IFFALSE 11531
// sPowell := true ;
11523: LD_ADDR_EXP 61
11527: PUSH
11528: LD_INT 1
11530: ST_TO_ADDR
// if p3 = 22 then
11531: LD_VAR 0 3
11535: PUSH
11536: LD_INT 22
11538: EQUAL
11539: IFFALSE 11549
// sTeleport := true ;
11541: LD_ADDR_EXP 64
11545: PUSH
11546: LD_INT 1
11548: ST_TO_ADDR
// if p3 = 23 then
11549: LD_VAR 0 3
11553: PUSH
11554: LD_INT 23
11556: EQUAL
11557: IFFALSE 11567
// sOilTower := true ;
11559: LD_ADDR_EXP 66
11563: PUSH
11564: LD_INT 1
11566: ST_TO_ADDR
// if p3 = 24 then
11567: LD_VAR 0 3
11571: PUSH
11572: LD_INT 24
11574: EQUAL
11575: IFFALSE 11585
// sShovel := true ;
11577: LD_ADDR_EXP 67
11581: PUSH
11582: LD_INT 1
11584: ST_TO_ADDR
// if p3 = 25 then
11585: LD_VAR 0 3
11589: PUSH
11590: LD_INT 25
11592: EQUAL
11593: IFFALSE 11603
// sSheik := true ;
11595: LD_ADDR_EXP 68
11599: PUSH
11600: LD_INT 1
11602: ST_TO_ADDR
// if p3 = 26 then
11603: LD_VAR 0 3
11607: PUSH
11608: LD_INT 26
11610: EQUAL
11611: IFFALSE 11621
// sEarthquake := true ;
11613: LD_ADDR_EXP 70
11617: PUSH
11618: LD_INT 1
11620: ST_TO_ADDR
// if p3 = 27 then
11621: LD_VAR 0 3
11625: PUSH
11626: LD_INT 27
11628: EQUAL
11629: IFFALSE 11639
// sAI := true ;
11631: LD_ADDR_EXP 71
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// if p3 = 28 then
11639: LD_VAR 0 3
11643: PUSH
11644: LD_INT 28
11646: EQUAL
11647: IFFALSE 11657
// sCargo := true ;
11649: LD_ADDR_EXP 74
11653: PUSH
11654: LD_INT 1
11656: ST_TO_ADDR
// if p3 = 29 then
11657: LD_VAR 0 3
11661: PUSH
11662: LD_INT 29
11664: EQUAL
11665: IFFALSE 11675
// sDLaser := true ;
11667: LD_ADDR_EXP 75
11671: PUSH
11672: LD_INT 1
11674: ST_TO_ADDR
// if p3 = 30 then
11675: LD_VAR 0 3
11679: PUSH
11680: LD_INT 30
11682: EQUAL
11683: IFFALSE 11693
// sExchange := true ;
11685: LD_ADDR_EXP 76
11689: PUSH
11690: LD_INT 1
11692: ST_TO_ADDR
// if p3 = 31 then
11693: LD_VAR 0 3
11697: PUSH
11698: LD_INT 31
11700: EQUAL
11701: IFFALSE 11711
// sFac := true ;
11703: LD_ADDR_EXP 77
11707: PUSH
11708: LD_INT 1
11710: ST_TO_ADDR
// if p3 = 32 then
11711: LD_VAR 0 3
11715: PUSH
11716: LD_INT 32
11718: EQUAL
11719: IFFALSE 11729
// sPower := true ;
11721: LD_ADDR_EXP 78
11725: PUSH
11726: LD_INT 1
11728: ST_TO_ADDR
// if p3 = 33 then
11729: LD_VAR 0 3
11733: PUSH
11734: LD_INT 33
11736: EQUAL
11737: IFFALSE 11747
// sRandom := true ;
11739: LD_ADDR_EXP 79
11743: PUSH
11744: LD_INT 1
11746: ST_TO_ADDR
// if p3 = 34 then
11747: LD_VAR 0 3
11751: PUSH
11752: LD_INT 34
11754: EQUAL
11755: IFFALSE 11765
// sShield := true ;
11757: LD_ADDR_EXP 80
11761: PUSH
11762: LD_INT 1
11764: ST_TO_ADDR
// if p3 = 35 then
11765: LD_VAR 0 3
11769: PUSH
11770: LD_INT 35
11772: EQUAL
11773: IFFALSE 11783
// sTime := true ;
11775: LD_ADDR_EXP 81
11779: PUSH
11780: LD_INT 1
11782: ST_TO_ADDR
// if p3 = 36 then
11783: LD_VAR 0 3
11787: PUSH
11788: LD_INT 36
11790: EQUAL
11791: IFFALSE 11801
// sTools := true ;
11793: LD_ADDR_EXP 82
11797: PUSH
11798: LD_INT 1
11800: ST_TO_ADDR
// if p3 = 101 then
11801: LD_VAR 0 3
11805: PUSH
11806: LD_INT 101
11808: EQUAL
11809: IFFALSE 11819
// sSold := true ;
11811: LD_ADDR_EXP 47
11815: PUSH
11816: LD_INT 1
11818: ST_TO_ADDR
// if p3 = 102 then
11819: LD_VAR 0 3
11823: PUSH
11824: LD_INT 102
11826: EQUAL
11827: IFFALSE 11837
// sDiff := true ;
11829: LD_ADDR_EXP 48
11833: PUSH
11834: LD_INT 1
11836: ST_TO_ADDR
// if p3 = 103 then
11837: LD_VAR 0 3
11841: PUSH
11842: LD_INT 103
11844: EQUAL
11845: IFFALSE 11855
// sFog := true ;
11847: LD_ADDR_EXP 51
11851: PUSH
11852: LD_INT 1
11854: ST_TO_ADDR
// if p3 = 104 then
11855: LD_VAR 0 3
11859: PUSH
11860: LD_INT 104
11862: EQUAL
11863: IFFALSE 11873
// sReset := true ;
11865: LD_ADDR_EXP 52
11869: PUSH
11870: LD_INT 1
11872: ST_TO_ADDR
// if p3 = 105 then
11873: LD_VAR 0 3
11877: PUSH
11878: LD_INT 105
11880: EQUAL
11881: IFFALSE 11891
// sSun := true ;
11883: LD_ADDR_EXP 53
11887: PUSH
11888: LD_INT 1
11890: ST_TO_ADDR
// if p3 = 106 then
11891: LD_VAR 0 3
11895: PUSH
11896: LD_INT 106
11898: EQUAL
11899: IFFALSE 11909
// sTiger := true ;
11901: LD_ADDR_EXP 49
11905: PUSH
11906: LD_INT 1
11908: ST_TO_ADDR
// if p3 = 107 then
11909: LD_VAR 0 3
11913: PUSH
11914: LD_INT 107
11916: EQUAL
11917: IFFALSE 11927
// sBomb := true ;
11919: LD_ADDR_EXP 50
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// if p3 = 108 then
11927: LD_VAR 0 3
11931: PUSH
11932: LD_INT 108
11934: EQUAL
11935: IFFALSE 11945
// sWound := true ;
11937: LD_ADDR_EXP 58
11941: PUSH
11942: LD_INT 1
11944: ST_TO_ADDR
// if p3 = 109 then
11945: LD_VAR 0 3
11949: PUSH
11950: LD_INT 109
11952: EQUAL
11953: IFFALSE 11963
// sBetray := true ;
11955: LD_ADDR_EXP 62
11959: PUSH
11960: LD_INT 1
11962: ST_TO_ADDR
// if p3 = 110 then
11963: LD_VAR 0 3
11967: PUSH
11968: LD_INT 110
11970: EQUAL
11971: IFFALSE 11981
// sContamin := true ;
11973: LD_ADDR_EXP 63
11977: PUSH
11978: LD_INT 1
11980: ST_TO_ADDR
// if p3 = 111 then
11981: LD_VAR 0 3
11985: PUSH
11986: LD_INT 111
11988: EQUAL
11989: IFFALSE 11999
// sOil := true ;
11991: LD_ADDR_EXP 65
11995: PUSH
11996: LD_INT 1
11998: ST_TO_ADDR
// if p3 = 112 then
11999: LD_VAR 0 3
12003: PUSH
12004: LD_INT 112
12006: EQUAL
12007: IFFALSE 12017
// sStu := true ;
12009: LD_ADDR_EXP 69
12013: PUSH
12014: LD_INT 1
12016: ST_TO_ADDR
// if p3 = 113 then
12017: LD_VAR 0 3
12021: PUSH
12022: LD_INT 113
12024: EQUAL
12025: IFFALSE 12035
// sBazooka := true ;
12027: LD_ADDR_EXP 72
12031: PUSH
12032: LD_INT 1
12034: ST_TO_ADDR
// if p3 = 114 then
12035: LD_VAR 0 3
12039: PUSH
12040: LD_INT 114
12042: EQUAL
12043: IFFALSE 12053
// sMortar := true ;
12045: LD_ADDR_EXP 73
12049: PUSH
12050: LD_INT 1
12052: ST_TO_ADDR
// if p3 = 115 then
12053: LD_VAR 0 3
12057: PUSH
12058: LD_INT 115
12060: EQUAL
12061: IFFALSE 12071
// sRanger := true ;
12063: LD_ADDR_EXP 83
12067: PUSH
12068: LD_INT 1
12070: ST_TO_ADDR
// end ; if p2 = 101 then
12071: LD_VAR 0 2
12075: PUSH
12076: LD_INT 101
12078: EQUAL
12079: IFFALSE 12207
// begin case p3 of 1 :
12081: LD_VAR 0 3
12085: PUSH
12086: LD_INT 1
12088: DOUBLE
12089: EQUAL
12090: IFTRUE 12094
12092: GO 12101
12094: POP
// hHackUnlimitedResources ; 2 :
12095: CALL 23242 0 0
12099: GO 12207
12101: LD_INT 2
12103: DOUBLE
12104: EQUAL
12105: IFTRUE 12109
12107: GO 12116
12109: POP
// hHackSetLevel10 ; 3 :
12110: CALL 23375 0 0
12114: GO 12207
12116: LD_INT 3
12118: DOUBLE
12119: EQUAL
12120: IFTRUE 12124
12122: GO 12131
12124: POP
// hHackSetLevel10YourUnits ; 4 :
12125: CALL 23460 0 0
12129: GO 12207
12131: LD_INT 4
12133: DOUBLE
12134: EQUAL
12135: IFTRUE 12139
12137: GO 12146
12139: POP
// hHackInvincible ; 5 :
12140: CALL 23908 0 0
12144: GO 12207
12146: LD_INT 5
12148: DOUBLE
12149: EQUAL
12150: IFTRUE 12154
12152: GO 12161
12154: POP
// hHackInvisible ; 6 :
12155: CALL 24019 0 0
12159: GO 12207
12161: LD_INT 6
12163: DOUBLE
12164: EQUAL
12165: IFTRUE 12169
12167: GO 12176
12169: POP
// hHackChangeYourSide ; 7 :
12170: CALL 24076 0 0
12174: GO 12207
12176: LD_INT 7
12178: DOUBLE
12179: EQUAL
12180: IFTRUE 12184
12182: GO 12191
12184: POP
// hHackChangeUnitSide ; 8 :
12185: CALL 24118 0 0
12189: GO 12207
12191: LD_INT 8
12193: DOUBLE
12194: EQUAL
12195: IFTRUE 12199
12197: GO 12206
12199: POP
// hHackFog ; end ;
12200: CALL 24219 0 0
12204: GO 12207
12206: POP
// end ; end ;
12207: PPOPN 6
12209: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12210: GO 12212
12212: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12213: LD_STRING initStreamRollete();
12215: PPUSH
12216: CALL_OW 559
// InitStreamMode ;
12220: CALL 12229 0 0
// DefineStreamItems ( ) ;
12224: CALL 12669 0 0
// end ;
12228: END
// function InitStreamMode ; begin
12229: LD_INT 0
12231: PPUSH
// streamModeActive := false ;
12232: LD_ADDR_EXP 30
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// normalCounter := 36 ;
12240: LD_ADDR_EXP 31
12244: PUSH
12245: LD_INT 36
12247: ST_TO_ADDR
// hardcoreCounter := 16 ;
12248: LD_ADDR_EXP 32
12252: PUSH
12253: LD_INT 16
12255: ST_TO_ADDR
// sRocket := false ;
12256: LD_ADDR_EXP 35
12260: PUSH
12261: LD_INT 0
12263: ST_TO_ADDR
// sSpeed := false ;
12264: LD_ADDR_EXP 34
12268: PUSH
12269: LD_INT 0
12271: ST_TO_ADDR
// sEngine := false ;
12272: LD_ADDR_EXP 36
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// sSpec := false ;
12280: LD_ADDR_EXP 33
12284: PUSH
12285: LD_INT 0
12287: ST_TO_ADDR
// sLevel := false ;
12288: LD_ADDR_EXP 37
12292: PUSH
12293: LD_INT 0
12295: ST_TO_ADDR
// sArmoury := false ;
12296: LD_ADDR_EXP 38
12300: PUSH
12301: LD_INT 0
12303: ST_TO_ADDR
// sRadar := false ;
12304: LD_ADDR_EXP 39
12308: PUSH
12309: LD_INT 0
12311: ST_TO_ADDR
// sBunker := false ;
12312: LD_ADDR_EXP 40
12316: PUSH
12317: LD_INT 0
12319: ST_TO_ADDR
// sHack := false ;
12320: LD_ADDR_EXP 41
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// sFire := false ;
12328: LD_ADDR_EXP 42
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// sRefresh := false ;
12336: LD_ADDR_EXP 43
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// sExp := false ;
12344: LD_ADDR_EXP 44
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// sDepot := false ;
12352: LD_ADDR_EXP 45
12356: PUSH
12357: LD_INT 0
12359: ST_TO_ADDR
// sFlag := false ;
12360: LD_ADDR_EXP 46
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// sKamikadze := false ;
12368: LD_ADDR_EXP 54
12372: PUSH
12373: LD_INT 0
12375: ST_TO_ADDR
// sTroll := false ;
12376: LD_ADDR_EXP 55
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// sSlow := false ;
12384: LD_ADDR_EXP 56
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// sLack := false ;
12392: LD_ADDR_EXP 57
12396: PUSH
12397: LD_INT 0
12399: ST_TO_ADDR
// sTank := false ;
12400: LD_ADDR_EXP 59
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// sRemote := false ;
12408: LD_ADDR_EXP 60
12412: PUSH
12413: LD_INT 0
12415: ST_TO_ADDR
// sPowell := false ;
12416: LD_ADDR_EXP 61
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// sTeleport := false ;
12424: LD_ADDR_EXP 64
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// sOilTower := false ;
12432: LD_ADDR_EXP 66
12436: PUSH
12437: LD_INT 0
12439: ST_TO_ADDR
// sShovel := false ;
12440: LD_ADDR_EXP 67
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// sSheik := false ;
12448: LD_ADDR_EXP 68
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// sEarthquake := false ;
12456: LD_ADDR_EXP 70
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// sAI := false ;
12464: LD_ADDR_EXP 71
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// sCargo := false ;
12472: LD_ADDR_EXP 74
12476: PUSH
12477: LD_INT 0
12479: ST_TO_ADDR
// sDLaser := false ;
12480: LD_ADDR_EXP 75
12484: PUSH
12485: LD_INT 0
12487: ST_TO_ADDR
// sExchange := false ;
12488: LD_ADDR_EXP 76
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// sFac := false ;
12496: LD_ADDR_EXP 77
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// sPower := false ;
12504: LD_ADDR_EXP 78
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// sRandom := false ;
12512: LD_ADDR_EXP 79
12516: PUSH
12517: LD_INT 0
12519: ST_TO_ADDR
// sShield := false ;
12520: LD_ADDR_EXP 80
12524: PUSH
12525: LD_INT 0
12527: ST_TO_ADDR
// sTime := false ;
12528: LD_ADDR_EXP 81
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// sTools := false ;
12536: LD_ADDR_EXP 82
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// sSold := false ;
12544: LD_ADDR_EXP 47
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// sDiff := false ;
12552: LD_ADDR_EXP 48
12556: PUSH
12557: LD_INT 0
12559: ST_TO_ADDR
// sFog := false ;
12560: LD_ADDR_EXP 51
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// sReset := false ;
12568: LD_ADDR_EXP 52
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// sSun := false ;
12576: LD_ADDR_EXP 53
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// sTiger := false ;
12584: LD_ADDR_EXP 49
12588: PUSH
12589: LD_INT 0
12591: ST_TO_ADDR
// sBomb := false ;
12592: LD_ADDR_EXP 50
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// sWound := false ;
12600: LD_ADDR_EXP 58
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// sBetray := false ;
12608: LD_ADDR_EXP 62
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// sContamin := false ;
12616: LD_ADDR_EXP 63
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// sOil := false ;
12624: LD_ADDR_EXP 65
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// sStu := false ;
12632: LD_ADDR_EXP 69
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// sBazooka := false ;
12640: LD_ADDR_EXP 72
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// sMortar := false ;
12648: LD_ADDR_EXP 73
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// sRanger := false ;
12656: LD_ADDR_EXP 83
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// end ;
12664: LD_VAR 0 1
12668: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12669: LD_INT 0
12671: PPUSH
12672: PPUSH
12673: PPUSH
12674: PPUSH
12675: PPUSH
// result := [ ] ;
12676: LD_ADDR_VAR 0 1
12680: PUSH
12681: EMPTY
12682: ST_TO_ADDR
// if campaign_id = 1 then
12683: LD_OWVAR 69
12687: PUSH
12688: LD_INT 1
12690: EQUAL
12691: IFFALSE 15629
// begin case mission_number of 1 :
12693: LD_OWVAR 70
12697: PUSH
12698: LD_INT 1
12700: DOUBLE
12701: EQUAL
12702: IFTRUE 12706
12704: GO 12770
12706: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12707: LD_ADDR_VAR 0 1
12711: PUSH
12712: LD_INT 2
12714: PUSH
12715: LD_INT 4
12717: PUSH
12718: LD_INT 11
12720: PUSH
12721: LD_INT 12
12723: PUSH
12724: LD_INT 15
12726: PUSH
12727: LD_INT 16
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 23
12735: PUSH
12736: LD_INT 26
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 101
12752: PUSH
12753: LD_INT 102
12755: PUSH
12756: LD_INT 106
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: LIST
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: ST_TO_ADDR
12768: GO 15627
12770: LD_INT 2
12772: DOUBLE
12773: EQUAL
12774: IFTRUE 12778
12776: GO 12850
12778: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12779: LD_ADDR_VAR 0 1
12783: PUSH
12784: LD_INT 2
12786: PUSH
12787: LD_INT 4
12789: PUSH
12790: LD_INT 11
12792: PUSH
12793: LD_INT 12
12795: PUSH
12796: LD_INT 15
12798: PUSH
12799: LD_INT 16
12801: PUSH
12802: LD_INT 22
12804: PUSH
12805: LD_INT 23
12807: PUSH
12808: LD_INT 26
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 101
12824: PUSH
12825: LD_INT 102
12827: PUSH
12828: LD_INT 105
12830: PUSH
12831: LD_INT 106
12833: PUSH
12834: LD_INT 108
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: ST_TO_ADDR
12848: GO 15627
12850: LD_INT 3
12852: DOUBLE
12853: EQUAL
12854: IFTRUE 12858
12856: GO 12934
12858: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12859: LD_ADDR_VAR 0 1
12863: PUSH
12864: LD_INT 2
12866: PUSH
12867: LD_INT 4
12869: PUSH
12870: LD_INT 5
12872: PUSH
12873: LD_INT 11
12875: PUSH
12876: LD_INT 12
12878: PUSH
12879: LD_INT 15
12881: PUSH
12882: LD_INT 16
12884: PUSH
12885: LD_INT 22
12887: PUSH
12888: LD_INT 26
12890: PUSH
12891: LD_INT 36
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 101
12908: PUSH
12909: LD_INT 102
12911: PUSH
12912: LD_INT 105
12914: PUSH
12915: LD_INT 106
12917: PUSH
12918: LD_INT 108
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: ST_TO_ADDR
12932: GO 15627
12934: LD_INT 4
12936: DOUBLE
12937: EQUAL
12938: IFTRUE 12942
12940: GO 13026
12942: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12943: LD_ADDR_VAR 0 1
12947: PUSH
12948: LD_INT 2
12950: PUSH
12951: LD_INT 4
12953: PUSH
12954: LD_INT 5
12956: PUSH
12957: LD_INT 8
12959: PUSH
12960: LD_INT 11
12962: PUSH
12963: LD_INT 12
12965: PUSH
12966: LD_INT 15
12968: PUSH
12969: LD_INT 16
12971: PUSH
12972: LD_INT 22
12974: PUSH
12975: LD_INT 23
12977: PUSH
12978: LD_INT 26
12980: PUSH
12981: LD_INT 36
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 101
13000: PUSH
13001: LD_INT 102
13003: PUSH
13004: LD_INT 105
13006: PUSH
13007: LD_INT 106
13009: PUSH
13010: LD_INT 108
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: ST_TO_ADDR
13024: GO 15627
13026: LD_INT 5
13028: DOUBLE
13029: EQUAL
13030: IFTRUE 13034
13032: GO 13134
13034: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13035: LD_ADDR_VAR 0 1
13039: PUSH
13040: LD_INT 2
13042: PUSH
13043: LD_INT 4
13045: PUSH
13046: LD_INT 5
13048: PUSH
13049: LD_INT 6
13051: PUSH
13052: LD_INT 8
13054: PUSH
13055: LD_INT 11
13057: PUSH
13058: LD_INT 12
13060: PUSH
13061: LD_INT 15
13063: PUSH
13064: LD_INT 16
13066: PUSH
13067: LD_INT 22
13069: PUSH
13070: LD_INT 23
13072: PUSH
13073: LD_INT 25
13075: PUSH
13076: LD_INT 26
13078: PUSH
13079: LD_INT 36
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: PUSH
13098: LD_INT 101
13100: PUSH
13101: LD_INT 102
13103: PUSH
13104: LD_INT 105
13106: PUSH
13107: LD_INT 106
13109: PUSH
13110: LD_INT 108
13112: PUSH
13113: LD_INT 109
13115: PUSH
13116: LD_INT 112
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: ST_TO_ADDR
13132: GO 15627
13134: LD_INT 6
13136: DOUBLE
13137: EQUAL
13138: IFTRUE 13142
13140: GO 13262
13142: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13143: LD_ADDR_VAR 0 1
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 4
13153: PUSH
13154: LD_INT 5
13156: PUSH
13157: LD_INT 6
13159: PUSH
13160: LD_INT 8
13162: PUSH
13163: LD_INT 11
13165: PUSH
13166: LD_INT 12
13168: PUSH
13169: LD_INT 15
13171: PUSH
13172: LD_INT 16
13174: PUSH
13175: LD_INT 20
13177: PUSH
13178: LD_INT 21
13180: PUSH
13181: LD_INT 22
13183: PUSH
13184: LD_INT 23
13186: PUSH
13187: LD_INT 25
13189: PUSH
13190: LD_INT 26
13192: PUSH
13193: LD_INT 30
13195: PUSH
13196: LD_INT 31
13198: PUSH
13199: LD_INT 32
13201: PUSH
13202: LD_INT 36
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 101
13228: PUSH
13229: LD_INT 102
13231: PUSH
13232: LD_INT 105
13234: PUSH
13235: LD_INT 106
13237: PUSH
13238: LD_INT 108
13240: PUSH
13241: LD_INT 109
13243: PUSH
13244: LD_INT 112
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: ST_TO_ADDR
13260: GO 15627
13262: LD_INT 7
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13370
13270: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: LD_INT 2
13278: PUSH
13279: LD_INT 4
13281: PUSH
13282: LD_INT 5
13284: PUSH
13285: LD_INT 7
13287: PUSH
13288: LD_INT 11
13290: PUSH
13291: LD_INT 12
13293: PUSH
13294: LD_INT 15
13296: PUSH
13297: LD_INT 16
13299: PUSH
13300: LD_INT 20
13302: PUSH
13303: LD_INT 21
13305: PUSH
13306: LD_INT 22
13308: PUSH
13309: LD_INT 23
13311: PUSH
13312: LD_INT 25
13314: PUSH
13315: LD_INT 26
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: LD_INT 101
13336: PUSH
13337: LD_INT 102
13339: PUSH
13340: LD_INT 103
13342: PUSH
13343: LD_INT 105
13345: PUSH
13346: LD_INT 106
13348: PUSH
13349: LD_INT 108
13351: PUSH
13352: LD_INT 112
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: ST_TO_ADDR
13368: GO 15627
13370: LD_INT 8
13372: DOUBLE
13373: EQUAL
13374: IFTRUE 13378
13376: GO 13506
13378: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13379: LD_ADDR_VAR 0 1
13383: PUSH
13384: LD_INT 2
13386: PUSH
13387: LD_INT 4
13389: PUSH
13390: LD_INT 5
13392: PUSH
13393: LD_INT 6
13395: PUSH
13396: LD_INT 7
13398: PUSH
13399: LD_INT 8
13401: PUSH
13402: LD_INT 11
13404: PUSH
13405: LD_INT 12
13407: PUSH
13408: LD_INT 15
13410: PUSH
13411: LD_INT 16
13413: PUSH
13414: LD_INT 20
13416: PUSH
13417: LD_INT 21
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_INT 23
13425: PUSH
13426: LD_INT 25
13428: PUSH
13429: LD_INT 26
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 31
13437: PUSH
13438: LD_INT 32
13440: PUSH
13441: LD_INT 36
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 101
13468: PUSH
13469: LD_INT 102
13471: PUSH
13472: LD_INT 103
13474: PUSH
13475: LD_INT 105
13477: PUSH
13478: LD_INT 106
13480: PUSH
13481: LD_INT 108
13483: PUSH
13484: LD_INT 109
13486: PUSH
13487: LD_INT 112
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: ST_TO_ADDR
13504: GO 15627
13506: LD_INT 9
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13650
13514: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13515: LD_ADDR_VAR 0 1
13519: PUSH
13520: LD_INT 2
13522: PUSH
13523: LD_INT 4
13525: PUSH
13526: LD_INT 5
13528: PUSH
13529: LD_INT 6
13531: PUSH
13532: LD_INT 7
13534: PUSH
13535: LD_INT 8
13537: PUSH
13538: LD_INT 11
13540: PUSH
13541: LD_INT 12
13543: PUSH
13544: LD_INT 15
13546: PUSH
13547: LD_INT 16
13549: PUSH
13550: LD_INT 20
13552: PUSH
13553: LD_INT 21
13555: PUSH
13556: LD_INT 22
13558: PUSH
13559: LD_INT 23
13561: PUSH
13562: LD_INT 25
13564: PUSH
13565: LD_INT 26
13567: PUSH
13568: LD_INT 28
13570: PUSH
13571: LD_INT 30
13573: PUSH
13574: LD_INT 31
13576: PUSH
13577: LD_INT 32
13579: PUSH
13580: LD_INT 36
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 101
13608: PUSH
13609: LD_INT 102
13611: PUSH
13612: LD_INT 103
13614: PUSH
13615: LD_INT 105
13617: PUSH
13618: LD_INT 106
13620: PUSH
13621: LD_INT 108
13623: PUSH
13624: LD_INT 109
13626: PUSH
13627: LD_INT 112
13629: PUSH
13630: LD_INT 114
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: ST_TO_ADDR
13648: GO 15627
13650: LD_INT 10
13652: DOUBLE
13653: EQUAL
13654: IFTRUE 13658
13656: GO 13842
13658: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13659: LD_ADDR_VAR 0 1
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 4
13669: PUSH
13670: LD_INT 5
13672: PUSH
13673: LD_INT 6
13675: PUSH
13676: LD_INT 7
13678: PUSH
13679: LD_INT 8
13681: PUSH
13682: LD_INT 9
13684: PUSH
13685: LD_INT 10
13687: PUSH
13688: LD_INT 11
13690: PUSH
13691: LD_INT 12
13693: PUSH
13694: LD_INT 13
13696: PUSH
13697: LD_INT 14
13699: PUSH
13700: LD_INT 15
13702: PUSH
13703: LD_INT 16
13705: PUSH
13706: LD_INT 17
13708: PUSH
13709: LD_INT 18
13711: PUSH
13712: LD_INT 19
13714: PUSH
13715: LD_INT 20
13717: PUSH
13718: LD_INT 21
13720: PUSH
13721: LD_INT 22
13723: PUSH
13724: LD_INT 23
13726: PUSH
13727: LD_INT 24
13729: PUSH
13730: LD_INT 25
13732: PUSH
13733: LD_INT 26
13735: PUSH
13736: LD_INT 28
13738: PUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 31
13744: PUSH
13745: LD_INT 32
13747: PUSH
13748: LD_INT 36
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 101
13784: PUSH
13785: LD_INT 102
13787: PUSH
13788: LD_INT 103
13790: PUSH
13791: LD_INT 104
13793: PUSH
13794: LD_INT 105
13796: PUSH
13797: LD_INT 106
13799: PUSH
13800: LD_INT 107
13802: PUSH
13803: LD_INT 108
13805: PUSH
13806: LD_INT 109
13808: PUSH
13809: LD_INT 110
13811: PUSH
13812: LD_INT 111
13814: PUSH
13815: LD_INT 112
13817: PUSH
13818: LD_INT 114
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: ST_TO_ADDR
13840: GO 15627
13842: LD_INT 11
13844: DOUBLE
13845: EQUAL
13846: IFTRUE 13850
13848: GO 14042
13850: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13851: LD_ADDR_VAR 0 1
13855: PUSH
13856: LD_INT 2
13858: PUSH
13859: LD_INT 3
13861: PUSH
13862: LD_INT 4
13864: PUSH
13865: LD_INT 5
13867: PUSH
13868: LD_INT 6
13870: PUSH
13871: LD_INT 7
13873: PUSH
13874: LD_INT 8
13876: PUSH
13877: LD_INT 9
13879: PUSH
13880: LD_INT 10
13882: PUSH
13883: LD_INT 11
13885: PUSH
13886: LD_INT 12
13888: PUSH
13889: LD_INT 13
13891: PUSH
13892: LD_INT 14
13894: PUSH
13895: LD_INT 15
13897: PUSH
13898: LD_INT 16
13900: PUSH
13901: LD_INT 17
13903: PUSH
13904: LD_INT 18
13906: PUSH
13907: LD_INT 19
13909: PUSH
13910: LD_INT 20
13912: PUSH
13913: LD_INT 21
13915: PUSH
13916: LD_INT 22
13918: PUSH
13919: LD_INT 23
13921: PUSH
13922: LD_INT 24
13924: PUSH
13925: LD_INT 25
13927: PUSH
13928: LD_INT 26
13930: PUSH
13931: LD_INT 28
13933: PUSH
13934: LD_INT 30
13936: PUSH
13937: LD_INT 31
13939: PUSH
13940: LD_INT 32
13942: PUSH
13943: LD_INT 34
13945: PUSH
13946: LD_INT 36
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 101
13984: PUSH
13985: LD_INT 102
13987: PUSH
13988: LD_INT 103
13990: PUSH
13991: LD_INT 104
13993: PUSH
13994: LD_INT 105
13996: PUSH
13997: LD_INT 106
13999: PUSH
14000: LD_INT 107
14002: PUSH
14003: LD_INT 108
14005: PUSH
14006: LD_INT 109
14008: PUSH
14009: LD_INT 110
14011: PUSH
14012: LD_INT 111
14014: PUSH
14015: LD_INT 112
14017: PUSH
14018: LD_INT 114
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: ST_TO_ADDR
14040: GO 15627
14042: LD_INT 12
14044: DOUBLE
14045: EQUAL
14046: IFTRUE 14050
14048: GO 14258
14050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14051: LD_ADDR_VAR 0 1
14055: PUSH
14056: LD_INT 1
14058: PUSH
14059: LD_INT 2
14061: PUSH
14062: LD_INT 3
14064: PUSH
14065: LD_INT 4
14067: PUSH
14068: LD_INT 5
14070: PUSH
14071: LD_INT 6
14073: PUSH
14074: LD_INT 7
14076: PUSH
14077: LD_INT 8
14079: PUSH
14080: LD_INT 9
14082: PUSH
14083: LD_INT 10
14085: PUSH
14086: LD_INT 11
14088: PUSH
14089: LD_INT 12
14091: PUSH
14092: LD_INT 13
14094: PUSH
14095: LD_INT 14
14097: PUSH
14098: LD_INT 15
14100: PUSH
14101: LD_INT 16
14103: PUSH
14104: LD_INT 17
14106: PUSH
14107: LD_INT 18
14109: PUSH
14110: LD_INT 19
14112: PUSH
14113: LD_INT 20
14115: PUSH
14116: LD_INT 21
14118: PUSH
14119: LD_INT 22
14121: PUSH
14122: LD_INT 23
14124: PUSH
14125: LD_INT 24
14127: PUSH
14128: LD_INT 25
14130: PUSH
14131: LD_INT 26
14133: PUSH
14134: LD_INT 27
14136: PUSH
14137: LD_INT 28
14139: PUSH
14140: LD_INT 30
14142: PUSH
14143: LD_INT 31
14145: PUSH
14146: LD_INT 32
14148: PUSH
14149: LD_INT 33
14151: PUSH
14152: LD_INT 34
14154: PUSH
14155: LD_INT 36
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 101
14196: PUSH
14197: LD_INT 102
14199: PUSH
14200: LD_INT 103
14202: PUSH
14203: LD_INT 104
14205: PUSH
14206: LD_INT 105
14208: PUSH
14209: LD_INT 106
14211: PUSH
14212: LD_INT 107
14214: PUSH
14215: LD_INT 108
14217: PUSH
14218: LD_INT 109
14220: PUSH
14221: LD_INT 110
14223: PUSH
14224: LD_INT 111
14226: PUSH
14227: LD_INT 112
14229: PUSH
14230: LD_INT 113
14232: PUSH
14233: LD_INT 114
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: ST_TO_ADDR
14256: GO 15627
14258: LD_INT 13
14260: DOUBLE
14261: EQUAL
14262: IFTRUE 14266
14264: GO 14462
14266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14267: LD_ADDR_VAR 0 1
14271: PUSH
14272: LD_INT 1
14274: PUSH
14275: LD_INT 2
14277: PUSH
14278: LD_INT 3
14280: PUSH
14281: LD_INT 4
14283: PUSH
14284: LD_INT 5
14286: PUSH
14287: LD_INT 8
14289: PUSH
14290: LD_INT 9
14292: PUSH
14293: LD_INT 10
14295: PUSH
14296: LD_INT 11
14298: PUSH
14299: LD_INT 12
14301: PUSH
14302: LD_INT 14
14304: PUSH
14305: LD_INT 15
14307: PUSH
14308: LD_INT 16
14310: PUSH
14311: LD_INT 17
14313: PUSH
14314: LD_INT 18
14316: PUSH
14317: LD_INT 19
14319: PUSH
14320: LD_INT 20
14322: PUSH
14323: LD_INT 21
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_INT 23
14331: PUSH
14332: LD_INT 24
14334: PUSH
14335: LD_INT 25
14337: PUSH
14338: LD_INT 26
14340: PUSH
14341: LD_INT 27
14343: PUSH
14344: LD_INT 28
14346: PUSH
14347: LD_INT 30
14349: PUSH
14350: LD_INT 31
14352: PUSH
14353: LD_INT 32
14355: PUSH
14356: LD_INT 33
14358: PUSH
14359: LD_INT 34
14361: PUSH
14362: LD_INT 36
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 101
14400: PUSH
14401: LD_INT 102
14403: PUSH
14404: LD_INT 103
14406: PUSH
14407: LD_INT 104
14409: PUSH
14410: LD_INT 105
14412: PUSH
14413: LD_INT 106
14415: PUSH
14416: LD_INT 107
14418: PUSH
14419: LD_INT 108
14421: PUSH
14422: LD_INT 109
14424: PUSH
14425: LD_INT 110
14427: PUSH
14428: LD_INT 111
14430: PUSH
14431: LD_INT 112
14433: PUSH
14434: LD_INT 113
14436: PUSH
14437: LD_INT 114
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: ST_TO_ADDR
14460: GO 15627
14462: LD_INT 14
14464: DOUBLE
14465: EQUAL
14466: IFTRUE 14470
14468: GO 14682
14470: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14471: LD_ADDR_VAR 0 1
14475: PUSH
14476: LD_INT 1
14478: PUSH
14479: LD_INT 2
14481: PUSH
14482: LD_INT 3
14484: PUSH
14485: LD_INT 4
14487: PUSH
14488: LD_INT 5
14490: PUSH
14491: LD_INT 6
14493: PUSH
14494: LD_INT 7
14496: PUSH
14497: LD_INT 8
14499: PUSH
14500: LD_INT 9
14502: PUSH
14503: LD_INT 10
14505: PUSH
14506: LD_INT 11
14508: PUSH
14509: LD_INT 12
14511: PUSH
14512: LD_INT 13
14514: PUSH
14515: LD_INT 14
14517: PUSH
14518: LD_INT 15
14520: PUSH
14521: LD_INT 16
14523: PUSH
14524: LD_INT 17
14526: PUSH
14527: LD_INT 18
14529: PUSH
14530: LD_INT 19
14532: PUSH
14533: LD_INT 20
14535: PUSH
14536: LD_INT 21
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_INT 23
14544: PUSH
14545: LD_INT 24
14547: PUSH
14548: LD_INT 25
14550: PUSH
14551: LD_INT 26
14553: PUSH
14554: LD_INT 27
14556: PUSH
14557: LD_INT 28
14559: PUSH
14560: LD_INT 29
14562: PUSH
14563: LD_INT 30
14565: PUSH
14566: LD_INT 31
14568: PUSH
14569: LD_INT 32
14571: PUSH
14572: LD_INT 33
14574: PUSH
14575: LD_INT 34
14577: PUSH
14578: LD_INT 36
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 101
14620: PUSH
14621: LD_INT 102
14623: PUSH
14624: LD_INT 103
14626: PUSH
14627: LD_INT 104
14629: PUSH
14630: LD_INT 105
14632: PUSH
14633: LD_INT 106
14635: PUSH
14636: LD_INT 107
14638: PUSH
14639: LD_INT 108
14641: PUSH
14642: LD_INT 109
14644: PUSH
14645: LD_INT 110
14647: PUSH
14648: LD_INT 111
14650: PUSH
14651: LD_INT 112
14653: PUSH
14654: LD_INT 113
14656: PUSH
14657: LD_INT 114
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: ST_TO_ADDR
14680: GO 15627
14682: LD_INT 15
14684: DOUBLE
14685: EQUAL
14686: IFTRUE 14690
14688: GO 14902
14690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14691: LD_ADDR_VAR 0 1
14695: PUSH
14696: LD_INT 1
14698: PUSH
14699: LD_INT 2
14701: PUSH
14702: LD_INT 3
14704: PUSH
14705: LD_INT 4
14707: PUSH
14708: LD_INT 5
14710: PUSH
14711: LD_INT 6
14713: PUSH
14714: LD_INT 7
14716: PUSH
14717: LD_INT 8
14719: PUSH
14720: LD_INT 9
14722: PUSH
14723: LD_INT 10
14725: PUSH
14726: LD_INT 11
14728: PUSH
14729: LD_INT 12
14731: PUSH
14732: LD_INT 13
14734: PUSH
14735: LD_INT 14
14737: PUSH
14738: LD_INT 15
14740: PUSH
14741: LD_INT 16
14743: PUSH
14744: LD_INT 17
14746: PUSH
14747: LD_INT 18
14749: PUSH
14750: LD_INT 19
14752: PUSH
14753: LD_INT 20
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 22
14761: PUSH
14762: LD_INT 23
14764: PUSH
14765: LD_INT 24
14767: PUSH
14768: LD_INT 25
14770: PUSH
14771: LD_INT 26
14773: PUSH
14774: LD_INT 27
14776: PUSH
14777: LD_INT 28
14779: PUSH
14780: LD_INT 29
14782: PUSH
14783: LD_INT 30
14785: PUSH
14786: LD_INT 31
14788: PUSH
14789: LD_INT 32
14791: PUSH
14792: LD_INT 33
14794: PUSH
14795: LD_INT 34
14797: PUSH
14798: LD_INT 36
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 101
14840: PUSH
14841: LD_INT 102
14843: PUSH
14844: LD_INT 103
14846: PUSH
14847: LD_INT 104
14849: PUSH
14850: LD_INT 105
14852: PUSH
14853: LD_INT 106
14855: PUSH
14856: LD_INT 107
14858: PUSH
14859: LD_INT 108
14861: PUSH
14862: LD_INT 109
14864: PUSH
14865: LD_INT 110
14867: PUSH
14868: LD_INT 111
14870: PUSH
14871: LD_INT 112
14873: PUSH
14874: LD_INT 113
14876: PUSH
14877: LD_INT 114
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: ST_TO_ADDR
14900: GO 15627
14902: LD_INT 16
14904: DOUBLE
14905: EQUAL
14906: IFTRUE 14910
14908: GO 15034
14910: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14911: LD_ADDR_VAR 0 1
14915: PUSH
14916: LD_INT 2
14918: PUSH
14919: LD_INT 4
14921: PUSH
14922: LD_INT 5
14924: PUSH
14925: LD_INT 7
14927: PUSH
14928: LD_INT 11
14930: PUSH
14931: LD_INT 12
14933: PUSH
14934: LD_INT 15
14936: PUSH
14937: LD_INT 16
14939: PUSH
14940: LD_INT 20
14942: PUSH
14943: LD_INT 21
14945: PUSH
14946: LD_INT 22
14948: PUSH
14949: LD_INT 23
14951: PUSH
14952: LD_INT 25
14954: PUSH
14955: LD_INT 26
14957: PUSH
14958: LD_INT 30
14960: PUSH
14961: LD_INT 31
14963: PUSH
14964: LD_INT 32
14966: PUSH
14967: LD_INT 33
14969: PUSH
14970: LD_INT 34
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 101
14996: PUSH
14997: LD_INT 102
14999: PUSH
15000: LD_INT 103
15002: PUSH
15003: LD_INT 106
15005: PUSH
15006: LD_INT 108
15008: PUSH
15009: LD_INT 112
15011: PUSH
15012: LD_INT 113
15014: PUSH
15015: LD_INT 114
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: ST_TO_ADDR
15032: GO 15627
15034: LD_INT 17
15036: DOUBLE
15037: EQUAL
15038: IFTRUE 15042
15040: GO 15254
15042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: LD_INT 1
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: LD_INT 3
15056: PUSH
15057: LD_INT 4
15059: PUSH
15060: LD_INT 5
15062: PUSH
15063: LD_INT 6
15065: PUSH
15066: LD_INT 7
15068: PUSH
15069: LD_INT 8
15071: PUSH
15072: LD_INT 9
15074: PUSH
15075: LD_INT 10
15077: PUSH
15078: LD_INT 11
15080: PUSH
15081: LD_INT 12
15083: PUSH
15084: LD_INT 13
15086: PUSH
15087: LD_INT 14
15089: PUSH
15090: LD_INT 15
15092: PUSH
15093: LD_INT 16
15095: PUSH
15096: LD_INT 17
15098: PUSH
15099: LD_INT 18
15101: PUSH
15102: LD_INT 19
15104: PUSH
15105: LD_INT 20
15107: PUSH
15108: LD_INT 21
15110: PUSH
15111: LD_INT 22
15113: PUSH
15114: LD_INT 23
15116: PUSH
15117: LD_INT 24
15119: PUSH
15120: LD_INT 25
15122: PUSH
15123: LD_INT 26
15125: PUSH
15126: LD_INT 27
15128: PUSH
15129: LD_INT 28
15131: PUSH
15132: LD_INT 29
15134: PUSH
15135: LD_INT 30
15137: PUSH
15138: LD_INT 31
15140: PUSH
15141: LD_INT 32
15143: PUSH
15144: LD_INT 33
15146: PUSH
15147: LD_INT 34
15149: PUSH
15150: LD_INT 36
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 101
15192: PUSH
15193: LD_INT 102
15195: PUSH
15196: LD_INT 103
15198: PUSH
15199: LD_INT 104
15201: PUSH
15202: LD_INT 105
15204: PUSH
15205: LD_INT 106
15207: PUSH
15208: LD_INT 107
15210: PUSH
15211: LD_INT 108
15213: PUSH
15214: LD_INT 109
15216: PUSH
15217: LD_INT 110
15219: PUSH
15220: LD_INT 111
15222: PUSH
15223: LD_INT 112
15225: PUSH
15226: LD_INT 113
15228: PUSH
15229: LD_INT 114
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: ST_TO_ADDR
15252: GO 15627
15254: LD_INT 18
15256: DOUBLE
15257: EQUAL
15258: IFTRUE 15262
15260: GO 15398
15262: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15263: LD_ADDR_VAR 0 1
15267: PUSH
15268: LD_INT 2
15270: PUSH
15271: LD_INT 4
15273: PUSH
15274: LD_INT 5
15276: PUSH
15277: LD_INT 7
15279: PUSH
15280: LD_INT 11
15282: PUSH
15283: LD_INT 12
15285: PUSH
15286: LD_INT 15
15288: PUSH
15289: LD_INT 16
15291: PUSH
15292: LD_INT 20
15294: PUSH
15295: LD_INT 21
15297: PUSH
15298: LD_INT 22
15300: PUSH
15301: LD_INT 23
15303: PUSH
15304: LD_INT 25
15306: PUSH
15307: LD_INT 26
15309: PUSH
15310: LD_INT 30
15312: PUSH
15313: LD_INT 31
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: LD_INT 33
15321: PUSH
15322: LD_INT 34
15324: PUSH
15325: LD_INT 35
15327: PUSH
15328: LD_INT 36
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 101
15356: PUSH
15357: LD_INT 102
15359: PUSH
15360: LD_INT 103
15362: PUSH
15363: LD_INT 106
15365: PUSH
15366: LD_INT 108
15368: PUSH
15369: LD_INT 112
15371: PUSH
15372: LD_INT 113
15374: PUSH
15375: LD_INT 114
15377: PUSH
15378: LD_INT 115
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: ST_TO_ADDR
15396: GO 15627
15398: LD_INT 19
15400: DOUBLE
15401: EQUAL
15402: IFTRUE 15406
15404: GO 15626
15406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15407: LD_ADDR_VAR 0 1
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: LD_INT 5
15426: PUSH
15427: LD_INT 6
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 8
15435: PUSH
15436: LD_INT 9
15438: PUSH
15439: LD_INT 10
15441: PUSH
15442: LD_INT 11
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: LD_INT 13
15450: PUSH
15451: LD_INT 14
15453: PUSH
15454: LD_INT 15
15456: PUSH
15457: LD_INT 16
15459: PUSH
15460: LD_INT 17
15462: PUSH
15463: LD_INT 18
15465: PUSH
15466: LD_INT 19
15468: PUSH
15469: LD_INT 20
15471: PUSH
15472: LD_INT 21
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 23
15480: PUSH
15481: LD_INT 24
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 26
15489: PUSH
15490: LD_INT 27
15492: PUSH
15493: LD_INT 28
15495: PUSH
15496: LD_INT 29
15498: PUSH
15499: LD_INT 30
15501: PUSH
15502: LD_INT 31
15504: PUSH
15505: LD_INT 32
15507: PUSH
15508: LD_INT 33
15510: PUSH
15511: LD_INT 34
15513: PUSH
15514: LD_INT 35
15516: PUSH
15517: LD_INT 36
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 101
15560: PUSH
15561: LD_INT 102
15563: PUSH
15564: LD_INT 103
15566: PUSH
15567: LD_INT 104
15569: PUSH
15570: LD_INT 105
15572: PUSH
15573: LD_INT 106
15575: PUSH
15576: LD_INT 107
15578: PUSH
15579: LD_INT 108
15581: PUSH
15582: LD_INT 109
15584: PUSH
15585: LD_INT 110
15587: PUSH
15588: LD_INT 111
15590: PUSH
15591: LD_INT 112
15593: PUSH
15594: LD_INT 113
15596: PUSH
15597: LD_INT 114
15599: PUSH
15600: LD_INT 115
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: ST_TO_ADDR
15624: GO 15627
15626: POP
// end else
15627: GO 15846
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15629: LD_ADDR_VAR 0 1
15633: PUSH
15634: LD_INT 1
15636: PUSH
15637: LD_INT 2
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: LD_INT 4
15645: PUSH
15646: LD_INT 5
15648: PUSH
15649: LD_INT 6
15651: PUSH
15652: LD_INT 7
15654: PUSH
15655: LD_INT 8
15657: PUSH
15658: LD_INT 9
15660: PUSH
15661: LD_INT 10
15663: PUSH
15664: LD_INT 11
15666: PUSH
15667: LD_INT 12
15669: PUSH
15670: LD_INT 13
15672: PUSH
15673: LD_INT 14
15675: PUSH
15676: LD_INT 15
15678: PUSH
15679: LD_INT 16
15681: PUSH
15682: LD_INT 17
15684: PUSH
15685: LD_INT 18
15687: PUSH
15688: LD_INT 19
15690: PUSH
15691: LD_INT 20
15693: PUSH
15694: LD_INT 21
15696: PUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 23
15702: PUSH
15703: LD_INT 24
15705: PUSH
15706: LD_INT 25
15708: PUSH
15709: LD_INT 26
15711: PUSH
15712: LD_INT 27
15714: PUSH
15715: LD_INT 28
15717: PUSH
15718: LD_INT 29
15720: PUSH
15721: LD_INT 30
15723: PUSH
15724: LD_INT 31
15726: PUSH
15727: LD_INT 32
15729: PUSH
15730: LD_INT 33
15732: PUSH
15733: LD_INT 34
15735: PUSH
15736: LD_INT 35
15738: PUSH
15739: LD_INT 36
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 101
15782: PUSH
15783: LD_INT 102
15785: PUSH
15786: LD_INT 103
15788: PUSH
15789: LD_INT 104
15791: PUSH
15792: LD_INT 105
15794: PUSH
15795: LD_INT 106
15797: PUSH
15798: LD_INT 107
15800: PUSH
15801: LD_INT 108
15803: PUSH
15804: LD_INT 109
15806: PUSH
15807: LD_INT 110
15809: PUSH
15810: LD_INT 111
15812: PUSH
15813: LD_INT 112
15815: PUSH
15816: LD_INT 113
15818: PUSH
15819: LD_INT 114
15821: PUSH
15822: LD_INT 115
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: ST_TO_ADDR
// if result then
15846: LD_VAR 0 1
15850: IFFALSE 16139
// begin normal :=  ;
15852: LD_ADDR_VAR 0 3
15856: PUSH
15857: LD_STRING 
15859: ST_TO_ADDR
// hardcore :=  ;
15860: LD_ADDR_VAR 0 4
15864: PUSH
15865: LD_STRING 
15867: ST_TO_ADDR
// for i = 1 to normalCounter do
15868: LD_ADDR_VAR 0 5
15872: PUSH
15873: DOUBLE
15874: LD_INT 1
15876: DEC
15877: ST_TO_ADDR
15878: LD_EXP 31
15882: PUSH
15883: FOR_TO
15884: IFFALSE 15985
// begin tmp := 0 ;
15886: LD_ADDR_VAR 0 2
15890: PUSH
15891: LD_STRING 0
15893: ST_TO_ADDR
// if result [ 1 ] then
15894: LD_VAR 0 1
15898: PUSH
15899: LD_INT 1
15901: ARRAY
15902: IFFALSE 15967
// if result [ 1 ] [ 1 ] = i then
15904: LD_VAR 0 1
15908: PUSH
15909: LD_INT 1
15911: ARRAY
15912: PUSH
15913: LD_INT 1
15915: ARRAY
15916: PUSH
15917: LD_VAR 0 5
15921: EQUAL
15922: IFFALSE 15967
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15924: LD_ADDR_VAR 0 1
15928: PUSH
15929: LD_VAR 0 1
15933: PPUSH
15934: LD_INT 1
15936: PPUSH
15937: LD_VAR 0 1
15941: PUSH
15942: LD_INT 1
15944: ARRAY
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 3
15953: PPUSH
15954: CALL_OW 1
15958: ST_TO_ADDR
// tmp := 1 ;
15959: LD_ADDR_VAR 0 2
15963: PUSH
15964: LD_STRING 1
15966: ST_TO_ADDR
// end ; normal := normal & tmp ;
15967: LD_ADDR_VAR 0 3
15971: PUSH
15972: LD_VAR 0 3
15976: PUSH
15977: LD_VAR 0 2
15981: STR
15982: ST_TO_ADDR
// end ;
15983: GO 15883
15985: POP
15986: POP
// for i = 1 to hardcoreCounter do
15987: LD_ADDR_VAR 0 5
15991: PUSH
15992: DOUBLE
15993: LD_INT 1
15995: DEC
15996: ST_TO_ADDR
15997: LD_EXP 32
16001: PUSH
16002: FOR_TO
16003: IFFALSE 16108
// begin tmp := 0 ;
16005: LD_ADDR_VAR 0 2
16009: PUSH
16010: LD_STRING 0
16012: ST_TO_ADDR
// if result [ 2 ] then
16013: LD_VAR 0 1
16017: PUSH
16018: LD_INT 2
16020: ARRAY
16021: IFFALSE 16090
// if result [ 2 ] [ 1 ] = 100 + i then
16023: LD_VAR 0 1
16027: PUSH
16028: LD_INT 2
16030: ARRAY
16031: PUSH
16032: LD_INT 1
16034: ARRAY
16035: PUSH
16036: LD_INT 100
16038: PUSH
16039: LD_VAR 0 5
16043: PLUS
16044: EQUAL
16045: IFFALSE 16090
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16047: LD_ADDR_VAR 0 1
16051: PUSH
16052: LD_VAR 0 1
16056: PPUSH
16057: LD_INT 2
16059: PPUSH
16060: LD_VAR 0 1
16064: PUSH
16065: LD_INT 2
16067: ARRAY
16068: PPUSH
16069: LD_INT 1
16071: PPUSH
16072: CALL_OW 3
16076: PPUSH
16077: CALL_OW 1
16081: ST_TO_ADDR
// tmp := 1 ;
16082: LD_ADDR_VAR 0 2
16086: PUSH
16087: LD_STRING 1
16089: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16090: LD_ADDR_VAR 0 4
16094: PUSH
16095: LD_VAR 0 4
16099: PUSH
16100: LD_VAR 0 2
16104: STR
16105: ST_TO_ADDR
// end ;
16106: GO 16002
16108: POP
16109: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16110: LD_STRING getStreamItemsFromMission("
16112: PUSH
16113: LD_VAR 0 3
16117: STR
16118: PUSH
16119: LD_STRING ","
16121: STR
16122: PUSH
16123: LD_VAR 0 4
16127: STR
16128: PUSH
16129: LD_STRING ")
16131: STR
16132: PPUSH
16133: CALL_OW 559
// end else
16137: GO 16146
// ToLua ( getStreamItemsFromMission("","") ) ;
16139: LD_STRING getStreamItemsFromMission("","")
16141: PPUSH
16142: CALL_OW 559
// end ;
16146: LD_VAR 0 1
16150: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16151: LD_EXP 30
16155: PUSH
16156: LD_EXP 35
16160: AND
16161: IFFALSE 16285
16163: GO 16165
16165: DISABLE
16166: LD_INT 0
16168: PPUSH
16169: PPUSH
// begin enable ;
16170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_INT 22
16178: PUSH
16179: LD_OWVAR 2
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: LD_INT 34
16193: PUSH
16194: LD_INT 7
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 34
16203: PUSH
16204: LD_INT 45
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 34
16213: PUSH
16214: LD_INT 28
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 34
16223: PUSH
16224: LD_INT 47
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PPUSH
16242: CALL_OW 69
16246: ST_TO_ADDR
// if not tmp then
16247: LD_VAR 0 2
16251: NOT
16252: IFFALSE 16256
// exit ;
16254: GO 16285
// for i in tmp do
16256: LD_ADDR_VAR 0 1
16260: PUSH
16261: LD_VAR 0 2
16265: PUSH
16266: FOR_IN
16267: IFFALSE 16283
// begin SetLives ( i , 0 ) ;
16269: LD_VAR 0 1
16273: PPUSH
16274: LD_INT 0
16276: PPUSH
16277: CALL_OW 234
// end ;
16281: GO 16266
16283: POP
16284: POP
// end ;
16285: PPOPN 2
16287: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16288: LD_EXP 30
16292: PUSH
16293: LD_EXP 36
16297: AND
16298: IFFALSE 16382
16300: GO 16302
16302: DISABLE
16303: LD_INT 0
16305: PPUSH
16306: PPUSH
// begin enable ;
16307: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16308: LD_ADDR_VAR 0 2
16312: PUSH
16313: LD_INT 22
16315: PUSH
16316: LD_OWVAR 2
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 32
16327: PUSH
16328: LD_INT 3
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 69
16343: ST_TO_ADDR
// if not tmp then
16344: LD_VAR 0 2
16348: NOT
16349: IFFALSE 16353
// exit ;
16351: GO 16382
// for i in tmp do
16353: LD_ADDR_VAR 0 1
16357: PUSH
16358: LD_VAR 0 2
16362: PUSH
16363: FOR_IN
16364: IFFALSE 16380
// begin SetLives ( i , 0 ) ;
16366: LD_VAR 0 1
16370: PPUSH
16371: LD_INT 0
16373: PPUSH
16374: CALL_OW 234
// end ;
16378: GO 16363
16380: POP
16381: POP
// end ;
16382: PPOPN 2
16384: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16385: LD_EXP 30
16389: PUSH
16390: LD_EXP 33
16394: AND
16395: IFFALSE 16488
16397: GO 16399
16399: DISABLE
16400: LD_INT 0
16402: PPUSH
// begin enable ;
16403: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16404: LD_ADDR_VAR 0 1
16408: PUSH
16409: LD_INT 22
16411: PUSH
16412: LD_OWVAR 2
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 2
16423: PUSH
16424: LD_INT 25
16426: PUSH
16427: LD_INT 5
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 25
16436: PUSH
16437: LD_INT 9
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 25
16446: PUSH
16447: LD_INT 8
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PPUSH
16464: CALL_OW 69
16468: PUSH
16469: FOR_IN
16470: IFFALSE 16486
// begin SetClass ( i , 1 ) ;
16472: LD_VAR 0 1
16476: PPUSH
16477: LD_INT 1
16479: PPUSH
16480: CALL_OW 336
// end ;
16484: GO 16469
16486: POP
16487: POP
// end ;
16488: PPOPN 1
16490: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16491: LD_EXP 30
16495: PUSH
16496: LD_EXP 34
16500: AND
16501: PUSH
16502: LD_OWVAR 65
16506: PUSH
16507: LD_INT 7
16509: LESS
16510: AND
16511: IFFALSE 16525
16513: GO 16515
16515: DISABLE
// begin enable ;
16516: ENABLE
// game_speed := 7 ;
16517: LD_ADDR_OWVAR 65
16521: PUSH
16522: LD_INT 7
16524: ST_TO_ADDR
// end ;
16525: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16526: LD_EXP 30
16530: PUSH
16531: LD_EXP 37
16535: AND
16536: IFFALSE 16738
16538: GO 16540
16540: DISABLE
16541: LD_INT 0
16543: PPUSH
16544: PPUSH
16545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16546: LD_ADDR_VAR 0 3
16550: PUSH
16551: LD_INT 81
16553: PUSH
16554: LD_OWVAR 2
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 21
16565: PUSH
16566: LD_INT 1
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PPUSH
16577: CALL_OW 69
16581: ST_TO_ADDR
// if not tmp then
16582: LD_VAR 0 3
16586: NOT
16587: IFFALSE 16591
// exit ;
16589: GO 16738
// if tmp > 5 then
16591: LD_VAR 0 3
16595: PUSH
16596: LD_INT 5
16598: GREATER
16599: IFFALSE 16611
// k := 5 else
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: LD_INT 5
16608: ST_TO_ADDR
16609: GO 16621
// k := tmp ;
16611: LD_ADDR_VAR 0 2
16615: PUSH
16616: LD_VAR 0 3
16620: ST_TO_ADDR
// for i := 1 to k do
16621: LD_ADDR_VAR 0 1
16625: PUSH
16626: DOUBLE
16627: LD_INT 1
16629: DEC
16630: ST_TO_ADDR
16631: LD_VAR 0 2
16635: PUSH
16636: FOR_TO
16637: IFFALSE 16736
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16639: LD_VAR 0 3
16643: PUSH
16644: LD_VAR 0 1
16648: ARRAY
16649: PPUSH
16650: LD_VAR 0 1
16654: PUSH
16655: LD_INT 4
16657: MOD
16658: PUSH
16659: LD_INT 1
16661: PLUS
16662: PPUSH
16663: CALL_OW 259
16667: PUSH
16668: LD_INT 10
16670: LESS
16671: IFFALSE 16734
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16673: LD_VAR 0 3
16677: PUSH
16678: LD_VAR 0 1
16682: ARRAY
16683: PPUSH
16684: LD_VAR 0 1
16688: PUSH
16689: LD_INT 4
16691: MOD
16692: PUSH
16693: LD_INT 1
16695: PLUS
16696: PPUSH
16697: LD_VAR 0 3
16701: PUSH
16702: LD_VAR 0 1
16706: ARRAY
16707: PPUSH
16708: LD_VAR 0 1
16712: PUSH
16713: LD_INT 4
16715: MOD
16716: PUSH
16717: LD_INT 1
16719: PLUS
16720: PPUSH
16721: CALL_OW 259
16725: PUSH
16726: LD_INT 1
16728: PLUS
16729: PPUSH
16730: CALL_OW 237
16734: GO 16636
16736: POP
16737: POP
// end ;
16738: PPOPN 3
16740: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16741: LD_EXP 30
16745: PUSH
16746: LD_EXP 38
16750: AND
16751: IFFALSE 16771
16753: GO 16755
16755: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16756: LD_INT 4
16758: PPUSH
16759: LD_OWVAR 2
16763: PPUSH
16764: LD_INT 0
16766: PPUSH
16767: CALL_OW 324
16771: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16772: LD_EXP 30
16776: PUSH
16777: LD_EXP 67
16781: AND
16782: IFFALSE 16802
16784: GO 16786
16786: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16787: LD_INT 19
16789: PPUSH
16790: LD_OWVAR 2
16794: PPUSH
16795: LD_INT 0
16797: PPUSH
16798: CALL_OW 324
16802: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16803: LD_EXP 30
16807: PUSH
16808: LD_EXP 39
16812: AND
16813: IFFALSE 16915
16815: GO 16817
16817: DISABLE
16818: LD_INT 0
16820: PPUSH
16821: PPUSH
// begin enable ;
16822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16823: LD_ADDR_VAR 0 2
16827: PUSH
16828: LD_INT 22
16830: PUSH
16831: LD_OWVAR 2
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: LD_INT 34
16845: PUSH
16846: LD_INT 11
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 34
16855: PUSH
16856: LD_INT 30
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PPUSH
16872: CALL_OW 69
16876: ST_TO_ADDR
// if not tmp then
16877: LD_VAR 0 2
16881: NOT
16882: IFFALSE 16886
// exit ;
16884: GO 16915
// for i in tmp do
16886: LD_ADDR_VAR 0 1
16890: PUSH
16891: LD_VAR 0 2
16895: PUSH
16896: FOR_IN
16897: IFFALSE 16913
// begin SetLives ( i , 0 ) ;
16899: LD_VAR 0 1
16903: PPUSH
16904: LD_INT 0
16906: PPUSH
16907: CALL_OW 234
// end ;
16911: GO 16896
16913: POP
16914: POP
// end ;
16915: PPOPN 2
16917: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16918: LD_EXP 30
16922: PUSH
16923: LD_EXP 40
16927: AND
16928: IFFALSE 16948
16930: GO 16932
16932: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16933: LD_INT 32
16935: PPUSH
16936: LD_OWVAR 2
16940: PPUSH
16941: LD_INT 0
16943: PPUSH
16944: CALL_OW 324
16948: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16949: LD_EXP 30
16953: PUSH
16954: LD_EXP 41
16958: AND
16959: IFFALSE 17140
16961: GO 16963
16963: DISABLE
16964: LD_INT 0
16966: PPUSH
16967: PPUSH
16968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16969: LD_ADDR_VAR 0 2
16973: PUSH
16974: LD_INT 22
16976: PUSH
16977: LD_OWVAR 2
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 33
16988: PUSH
16989: LD_INT 3
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PPUSH
17000: CALL_OW 69
17004: ST_TO_ADDR
// if not tmp then
17005: LD_VAR 0 2
17009: NOT
17010: IFFALSE 17014
// exit ;
17012: GO 17140
// side := 0 ;
17014: LD_ADDR_VAR 0 3
17018: PUSH
17019: LD_INT 0
17021: ST_TO_ADDR
// for i := 1 to 8 do
17022: LD_ADDR_VAR 0 1
17026: PUSH
17027: DOUBLE
17028: LD_INT 1
17030: DEC
17031: ST_TO_ADDR
17032: LD_INT 8
17034: PUSH
17035: FOR_TO
17036: IFFALSE 17084
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17038: LD_OWVAR 2
17042: PUSH
17043: LD_VAR 0 1
17047: NONEQUAL
17048: PUSH
17049: LD_OWVAR 2
17053: PPUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 81
17063: PUSH
17064: LD_INT 2
17066: EQUAL
17067: AND
17068: IFFALSE 17082
// begin side := i ;
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_VAR 0 1
17079: ST_TO_ADDR
// break ;
17080: GO 17084
// end ;
17082: GO 17035
17084: POP
17085: POP
// if not side then
17086: LD_VAR 0 3
17090: NOT
17091: IFFALSE 17095
// exit ;
17093: GO 17140
// for i := 1 to tmp do
17095: LD_ADDR_VAR 0 1
17099: PUSH
17100: DOUBLE
17101: LD_INT 1
17103: DEC
17104: ST_TO_ADDR
17105: LD_VAR 0 2
17109: PUSH
17110: FOR_TO
17111: IFFALSE 17138
// if Prob ( 60 ) then
17113: LD_INT 60
17115: PPUSH
17116: CALL_OW 13
17120: IFFALSE 17136
// SetSide ( i , side ) ;
17122: LD_VAR 0 1
17126: PPUSH
17127: LD_VAR 0 3
17131: PPUSH
17132: CALL_OW 235
17136: GO 17110
17138: POP
17139: POP
// end ;
17140: PPOPN 3
17142: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17143: LD_EXP 30
17147: PUSH
17148: LD_EXP 43
17152: AND
17153: IFFALSE 17272
17155: GO 17157
17157: DISABLE
17158: LD_INT 0
17160: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17161: LD_ADDR_VAR 0 1
17165: PUSH
17166: LD_INT 22
17168: PUSH
17169: LD_OWVAR 2
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 21
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: LD_INT 23
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: PUSH
17215: FOR_IN
17216: IFFALSE 17270
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 257
17227: PUSH
17228: LD_INT 1
17230: PUSH
17231: LD_INT 2
17233: PUSH
17234: LD_INT 3
17236: PUSH
17237: LD_INT 4
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: IN
17246: IFFALSE 17268
// SetClass ( un , rand ( 1 , 4 ) ) ;
17248: LD_VAR 0 1
17252: PPUSH
17253: LD_INT 1
17255: PPUSH
17256: LD_INT 4
17258: PPUSH
17259: CALL_OW 12
17263: PPUSH
17264: CALL_OW 336
17268: GO 17215
17270: POP
17271: POP
// end ;
17272: PPOPN 1
17274: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17275: LD_EXP 30
17279: PUSH
17280: LD_EXP 42
17284: AND
17285: IFFALSE 17364
17287: GO 17289
17289: DISABLE
17290: LD_INT 0
17292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17293: LD_ADDR_VAR 0 1
17297: PUSH
17298: LD_INT 22
17300: PUSH
17301: LD_OWVAR 2
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 21
17312: PUSH
17313: LD_INT 3
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PPUSH
17324: CALL_OW 69
17328: ST_TO_ADDR
// if not tmp then
17329: LD_VAR 0 1
17333: NOT
17334: IFFALSE 17338
// exit ;
17336: GO 17364
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17338: LD_VAR 0 1
17342: PUSH
17343: LD_INT 1
17345: PPUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: CALL_OW 12
17355: ARRAY
17356: PPUSH
17357: LD_INT 100
17359: PPUSH
17360: CALL_OW 234
// end ;
17364: PPOPN 1
17366: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17367: LD_EXP 30
17371: PUSH
17372: LD_EXP 44
17376: AND
17377: IFFALSE 17475
17379: GO 17381
17381: DISABLE
17382: LD_INT 0
17384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17385: LD_ADDR_VAR 0 1
17389: PUSH
17390: LD_INT 22
17392: PUSH
17393: LD_OWVAR 2
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 21
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PPUSH
17416: CALL_OW 69
17420: ST_TO_ADDR
// if not tmp then
17421: LD_VAR 0 1
17425: NOT
17426: IFFALSE 17430
// exit ;
17428: GO 17475
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17430: LD_VAR 0 1
17434: PUSH
17435: LD_INT 1
17437: PPUSH
17438: LD_VAR 0 1
17442: PPUSH
17443: CALL_OW 12
17447: ARRAY
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: LD_INT 4
17454: PPUSH
17455: CALL_OW 12
17459: PPUSH
17460: LD_INT 3000
17462: PPUSH
17463: LD_INT 9000
17465: PPUSH
17466: CALL_OW 12
17470: PPUSH
17471: CALL_OW 492
// end ;
17475: PPOPN 1
17477: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17478: LD_EXP 30
17482: PUSH
17483: LD_EXP 45
17487: AND
17488: IFFALSE 17508
17490: GO 17492
17492: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17493: LD_INT 1
17495: PPUSH
17496: LD_OWVAR 2
17500: PPUSH
17501: LD_INT 0
17503: PPUSH
17504: CALL_OW 324
17508: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17509: LD_EXP 30
17513: PUSH
17514: LD_EXP 46
17518: AND
17519: IFFALSE 17602
17521: GO 17523
17523: DISABLE
17524: LD_INT 0
17526: PPUSH
17527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17528: LD_ADDR_VAR 0 2
17532: PUSH
17533: LD_INT 22
17535: PUSH
17536: LD_OWVAR 2
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 21
17547: PUSH
17548: LD_INT 3
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL_OW 69
17563: ST_TO_ADDR
// if not tmp then
17564: LD_VAR 0 2
17568: NOT
17569: IFFALSE 17573
// exit ;
17571: GO 17602
// for i in tmp do
17573: LD_ADDR_VAR 0 1
17577: PUSH
17578: LD_VAR 0 2
17582: PUSH
17583: FOR_IN
17584: IFFALSE 17600
// SetBLevel ( i , 10 ) ;
17586: LD_VAR 0 1
17590: PPUSH
17591: LD_INT 10
17593: PPUSH
17594: CALL_OW 241
17598: GO 17583
17600: POP
17601: POP
// end ;
17602: PPOPN 2
17604: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17605: LD_EXP 30
17609: PUSH
17610: LD_EXP 47
17614: AND
17615: IFFALSE 17726
17617: GO 17619
17619: DISABLE
17620: LD_INT 0
17622: PPUSH
17623: PPUSH
17624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17625: LD_ADDR_VAR 0 3
17629: PUSH
17630: LD_INT 22
17632: PUSH
17633: LD_OWVAR 2
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 25
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PPUSH
17656: CALL_OW 69
17660: ST_TO_ADDR
// if not tmp then
17661: LD_VAR 0 3
17665: NOT
17666: IFFALSE 17670
// exit ;
17668: GO 17726
// un := tmp [ rand ( 1 , tmp ) ] ;
17670: LD_ADDR_VAR 0 2
17674: PUSH
17675: LD_VAR 0 3
17679: PUSH
17680: LD_INT 1
17682: PPUSH
17683: LD_VAR 0 3
17687: PPUSH
17688: CALL_OW 12
17692: ARRAY
17693: ST_TO_ADDR
// if Crawls ( un ) then
17694: LD_VAR 0 2
17698: PPUSH
17699: CALL_OW 318
17703: IFFALSE 17714
// ComWalk ( un ) ;
17705: LD_VAR 0 2
17709: PPUSH
17710: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17714: LD_VAR 0 2
17718: PPUSH
17719: LD_INT 5
17721: PPUSH
17722: CALL_OW 336
// end ;
17726: PPOPN 3
17728: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17729: LD_EXP 30
17733: PUSH
17734: LD_EXP 48
17738: AND
17739: PUSH
17740: LD_OWVAR 67
17744: PUSH
17745: LD_INT 3
17747: LESS
17748: AND
17749: IFFALSE 17768
17751: GO 17753
17753: DISABLE
// Difficulty := Difficulty + 1 ;
17754: LD_ADDR_OWVAR 67
17758: PUSH
17759: LD_OWVAR 67
17763: PUSH
17764: LD_INT 1
17766: PLUS
17767: ST_TO_ADDR
17768: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17769: LD_EXP 30
17773: PUSH
17774: LD_EXP 49
17778: AND
17779: IFFALSE 17882
17781: GO 17783
17783: DISABLE
17784: LD_INT 0
17786: PPUSH
// begin for i := 1 to 5 do
17787: LD_ADDR_VAR 0 1
17791: PUSH
17792: DOUBLE
17793: LD_INT 1
17795: DEC
17796: ST_TO_ADDR
17797: LD_INT 5
17799: PUSH
17800: FOR_TO
17801: IFFALSE 17880
// begin uc_nation := nation_nature ;
17803: LD_ADDR_OWVAR 21
17807: PUSH
17808: LD_INT 0
17810: ST_TO_ADDR
// uc_side := 0 ;
17811: LD_ADDR_OWVAR 20
17815: PUSH
17816: LD_INT 0
17818: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17819: LD_ADDR_OWVAR 29
17823: PUSH
17824: LD_INT 12
17826: PUSH
17827: LD_INT 12
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: ST_TO_ADDR
// hc_agressivity := 20 ;
17834: LD_ADDR_OWVAR 35
17838: PUSH
17839: LD_INT 20
17841: ST_TO_ADDR
// hc_class := class_tiger ;
17842: LD_ADDR_OWVAR 28
17846: PUSH
17847: LD_INT 14
17849: ST_TO_ADDR
// hc_gallery :=  ;
17850: LD_ADDR_OWVAR 33
17854: PUSH
17855: LD_STRING 
17857: ST_TO_ADDR
// hc_name :=  ;
17858: LD_ADDR_OWVAR 26
17862: PUSH
17863: LD_STRING 
17865: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17866: CALL_OW 44
17870: PPUSH
17871: LD_INT 0
17873: PPUSH
17874: CALL_OW 51
// end ;
17878: GO 17800
17880: POP
17881: POP
// end ;
17882: PPOPN 1
17884: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17885: LD_EXP 30
17889: PUSH
17890: LD_EXP 50
17894: AND
17895: IFFALSE 17904
17897: GO 17899
17899: DISABLE
// StreamSibBomb ;
17900: CALL 17905 0 0
17904: END
// export function StreamSibBomb ; var i , x , y ; begin
17905: LD_INT 0
17907: PPUSH
17908: PPUSH
17909: PPUSH
17910: PPUSH
// result := false ;
17911: LD_ADDR_VAR 0 1
17915: PUSH
17916: LD_INT 0
17918: ST_TO_ADDR
// for i := 1 to 16 do
17919: LD_ADDR_VAR 0 2
17923: PUSH
17924: DOUBLE
17925: LD_INT 1
17927: DEC
17928: ST_TO_ADDR
17929: LD_INT 16
17931: PUSH
17932: FOR_TO
17933: IFFALSE 18132
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17935: LD_ADDR_VAR 0 3
17939: PUSH
17940: LD_INT 10
17942: PUSH
17943: LD_INT 20
17945: PUSH
17946: LD_INT 30
17948: PUSH
17949: LD_INT 40
17951: PUSH
17952: LD_INT 50
17954: PUSH
17955: LD_INT 60
17957: PUSH
17958: LD_INT 70
17960: PUSH
17961: LD_INT 80
17963: PUSH
17964: LD_INT 90
17966: PUSH
17967: LD_INT 100
17969: PUSH
17970: LD_INT 110
17972: PUSH
17973: LD_INT 120
17975: PUSH
17976: LD_INT 130
17978: PUSH
17979: LD_INT 140
17981: PUSH
17982: LD_INT 150
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 1
18004: PPUSH
18005: LD_INT 15
18007: PPUSH
18008: CALL_OW 12
18012: ARRAY
18013: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18014: LD_ADDR_VAR 0 4
18018: PUSH
18019: LD_INT 10
18021: PUSH
18022: LD_INT 20
18024: PUSH
18025: LD_INT 30
18027: PUSH
18028: LD_INT 40
18030: PUSH
18031: LD_INT 50
18033: PUSH
18034: LD_INT 60
18036: PUSH
18037: LD_INT 70
18039: PUSH
18040: LD_INT 80
18042: PUSH
18043: LD_INT 90
18045: PUSH
18046: LD_INT 100
18048: PUSH
18049: LD_INT 110
18051: PUSH
18052: LD_INT 120
18054: PUSH
18055: LD_INT 130
18057: PUSH
18058: LD_INT 140
18060: PUSH
18061: LD_INT 150
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: PPUSH
18084: LD_INT 15
18086: PPUSH
18087: CALL_OW 12
18091: ARRAY
18092: ST_TO_ADDR
// if ValidHex ( x , y ) then
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_VAR 0 4
18102: PPUSH
18103: CALL_OW 488
18107: IFFALSE 18130
// begin result := [ x , y ] ;
18109: LD_ADDR_VAR 0 1
18113: PUSH
18114: LD_VAR 0 3
18118: PUSH
18119: LD_VAR 0 4
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: ST_TO_ADDR
// break ;
18128: GO 18132
// end ; end ;
18130: GO 17932
18132: POP
18133: POP
// if result then
18134: LD_VAR 0 1
18138: IFFALSE 18198
// begin ToLua ( playSibBomb() ) ;
18140: LD_STRING playSibBomb()
18142: PPUSH
18143: CALL_OW 559
// wait ( 0 0$14 ) ;
18147: LD_INT 490
18149: PPUSH
18150: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18154: LD_VAR 0 1
18158: PUSH
18159: LD_INT 1
18161: ARRAY
18162: PPUSH
18163: LD_VAR 0 1
18167: PUSH
18168: LD_INT 2
18170: ARRAY
18171: PPUSH
18172: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18176: LD_VAR 0 1
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: PPUSH
18185: LD_VAR 0 1
18189: PUSH
18190: LD_INT 2
18192: ARRAY
18193: PPUSH
18194: CALL_OW 429
// end ; end ;
18198: LD_VAR 0 1
18202: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18203: LD_EXP 30
18207: PUSH
18208: LD_EXP 52
18212: AND
18213: IFFALSE 18225
18215: GO 18217
18217: DISABLE
// YouLost (  ) ;
18218: LD_STRING 
18220: PPUSH
18221: CALL_OW 104
18225: END
// every 0 0$1 trigger StreamModeActive and sFog do
18226: LD_EXP 30
18230: PUSH
18231: LD_EXP 51
18235: AND
18236: IFFALSE 18250
18238: GO 18240
18240: DISABLE
// FogOff ( your_side ) ;
18241: LD_OWVAR 2
18245: PPUSH
18246: CALL_OW 344
18250: END
// every 0 0$1 trigger StreamModeActive and sSun do
18251: LD_EXP 30
18255: PUSH
18256: LD_EXP 53
18260: AND
18261: IFFALSE 18289
18263: GO 18265
18265: DISABLE
// begin solar_recharge_percent := 0 ;
18266: LD_ADDR_OWVAR 79
18270: PUSH
18271: LD_INT 0
18273: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18274: LD_INT 10500
18276: PPUSH
18277: CALL_OW 67
// solar_recharge_percent := 100 ;
18281: LD_ADDR_OWVAR 79
18285: PUSH
18286: LD_INT 100
18288: ST_TO_ADDR
// end ;
18289: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18290: LD_EXP 30
18294: PUSH
18295: LD_EXP 54
18299: AND
18300: IFFALSE 18539
18302: GO 18304
18304: DISABLE
18305: LD_INT 0
18307: PPUSH
18308: PPUSH
18309: PPUSH
// begin tmp := [ ] ;
18310: LD_ADDR_VAR 0 3
18314: PUSH
18315: EMPTY
18316: ST_TO_ADDR
// for i := 1 to 6 do
18317: LD_ADDR_VAR 0 1
18321: PUSH
18322: DOUBLE
18323: LD_INT 1
18325: DEC
18326: ST_TO_ADDR
18327: LD_INT 6
18329: PUSH
18330: FOR_TO
18331: IFFALSE 18436
// begin uc_nation := nation_nature ;
18333: LD_ADDR_OWVAR 21
18337: PUSH
18338: LD_INT 0
18340: ST_TO_ADDR
// uc_side := 0 ;
18341: LD_ADDR_OWVAR 20
18345: PUSH
18346: LD_INT 0
18348: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18349: LD_ADDR_OWVAR 29
18353: PUSH
18354: LD_INT 12
18356: PUSH
18357: LD_INT 12
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: ST_TO_ADDR
// hc_agressivity := 20 ;
18364: LD_ADDR_OWVAR 35
18368: PUSH
18369: LD_INT 20
18371: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18372: LD_ADDR_OWVAR 28
18376: PUSH
18377: LD_INT 17
18379: ST_TO_ADDR
// hc_gallery :=  ;
18380: LD_ADDR_OWVAR 33
18384: PUSH
18385: LD_STRING 
18387: ST_TO_ADDR
// hc_name :=  ;
18388: LD_ADDR_OWVAR 26
18392: PUSH
18393: LD_STRING 
18395: ST_TO_ADDR
// un := CreateHuman ;
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: CALL_OW 44
18405: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18406: LD_VAR 0 2
18410: PPUSH
18411: LD_INT 1
18413: PPUSH
18414: CALL_OW 51
// tmp := tmp ^ un ;
18418: LD_ADDR_VAR 0 3
18422: PUSH
18423: LD_VAR 0 3
18427: PUSH
18428: LD_VAR 0 2
18432: ADD
18433: ST_TO_ADDR
// end ;
18434: GO 18330
18436: POP
18437: POP
// repeat wait ( 0 0$1 ) ;
18438: LD_INT 35
18440: PPUSH
18441: CALL_OW 67
// for un in tmp do
18445: LD_ADDR_VAR 0 2
18449: PUSH
18450: LD_VAR 0 3
18454: PUSH
18455: FOR_IN
18456: IFFALSE 18530
// begin if IsDead ( un ) then
18458: LD_VAR 0 2
18462: PPUSH
18463: CALL_OW 301
18467: IFFALSE 18487
// begin tmp := tmp diff un ;
18469: LD_ADDR_VAR 0 3
18473: PUSH
18474: LD_VAR 0 3
18478: PUSH
18479: LD_VAR 0 2
18483: DIFF
18484: ST_TO_ADDR
// continue ;
18485: GO 18455
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18487: LD_VAR 0 2
18491: PPUSH
18492: LD_INT 3
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PPUSH
18509: CALL_OW 69
18513: PPUSH
18514: LD_VAR 0 2
18518: PPUSH
18519: CALL_OW 74
18523: PPUSH
18524: CALL_OW 115
// end ;
18528: GO 18455
18530: POP
18531: POP
// until not tmp ;
18532: LD_VAR 0 3
18536: NOT
18537: IFFALSE 18438
// end ;
18539: PPOPN 3
18541: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18542: LD_EXP 30
18546: PUSH
18547: LD_EXP 55
18551: AND
18552: IFFALSE 18606
18554: GO 18556
18556: DISABLE
// begin ToLua ( displayTroll(); ) ;
18557: LD_STRING displayTroll();
18559: PPUSH
18560: CALL_OW 559
// wait ( 3 3$00 ) ;
18564: LD_INT 6300
18566: PPUSH
18567: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18571: LD_STRING hideTroll();
18573: PPUSH
18574: CALL_OW 559
// wait ( 1 1$00 ) ;
18578: LD_INT 2100
18580: PPUSH
18581: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18585: LD_STRING displayTroll();
18587: PPUSH
18588: CALL_OW 559
// wait ( 1 1$00 ) ;
18592: LD_INT 2100
18594: PPUSH
18595: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18599: LD_STRING hideTroll();
18601: PPUSH
18602: CALL_OW 559
// end ;
18606: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18607: LD_EXP 30
18611: PUSH
18612: LD_EXP 56
18616: AND
18617: IFFALSE 18680
18619: GO 18621
18621: DISABLE
18622: LD_INT 0
18624: PPUSH
// begin p := 0 ;
18625: LD_ADDR_VAR 0 1
18629: PUSH
18630: LD_INT 0
18632: ST_TO_ADDR
// repeat game_speed := 1 ;
18633: LD_ADDR_OWVAR 65
18637: PUSH
18638: LD_INT 1
18640: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18641: LD_INT 35
18643: PPUSH
18644: CALL_OW 67
// p := p + 1 ;
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: LD_VAR 0 1
18657: PUSH
18658: LD_INT 1
18660: PLUS
18661: ST_TO_ADDR
// until p >= 60 ;
18662: LD_VAR 0 1
18666: PUSH
18667: LD_INT 60
18669: GREATEREQUAL
18670: IFFALSE 18633
// game_speed := 4 ;
18672: LD_ADDR_OWVAR 65
18676: PUSH
18677: LD_INT 4
18679: ST_TO_ADDR
// end ;
18680: PPOPN 1
18682: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18683: LD_EXP 30
18687: PUSH
18688: LD_EXP 57
18692: AND
18693: IFFALSE 18839
18695: GO 18697
18697: DISABLE
18698: LD_INT 0
18700: PPUSH
18701: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18702: LD_ADDR_VAR 0 1
18706: PUSH
18707: LD_INT 22
18709: PUSH
18710: LD_OWVAR 2
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: LD_INT 30
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 30
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PPUSH
18751: CALL_OW 69
18755: ST_TO_ADDR
// if not depot then
18756: LD_VAR 0 1
18760: NOT
18761: IFFALSE 18765
// exit ;
18763: GO 18839
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: LD_VAR 0 1
18774: PUSH
18775: LD_INT 1
18777: PPUSH
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 12
18787: ARRAY
18788: PPUSH
18789: CALL_OW 274
18793: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18794: LD_VAR 0 2
18798: PPUSH
18799: LD_INT 1
18801: PPUSH
18802: LD_INT 0
18804: PPUSH
18805: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18809: LD_VAR 0 2
18813: PPUSH
18814: LD_INT 2
18816: PPUSH
18817: LD_INT 0
18819: PPUSH
18820: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18824: LD_VAR 0 2
18828: PPUSH
18829: LD_INT 3
18831: PPUSH
18832: LD_INT 0
18834: PPUSH
18835: CALL_OW 277
// end ;
18839: PPOPN 2
18841: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18842: LD_EXP 30
18846: PUSH
18847: LD_EXP 58
18851: AND
18852: IFFALSE 18949
18854: GO 18856
18856: DISABLE
18857: LD_INT 0
18859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18860: LD_ADDR_VAR 0 1
18864: PUSH
18865: LD_INT 22
18867: PUSH
18868: LD_OWVAR 2
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 21
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 3
18889: PUSH
18890: LD_INT 23
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: ST_TO_ADDR
// if not tmp then
18914: LD_VAR 0 1
18918: NOT
18919: IFFALSE 18923
// exit ;
18921: GO 18949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18923: LD_VAR 0 1
18927: PUSH
18928: LD_INT 1
18930: PPUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 12
18940: ARRAY
18941: PPUSH
18942: LD_INT 200
18944: PPUSH
18945: CALL_OW 234
// end ;
18949: PPOPN 1
18951: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18952: LD_EXP 30
18956: PUSH
18957: LD_EXP 59
18961: AND
18962: IFFALSE 19041
18964: GO 18966
18966: DISABLE
18967: LD_INT 0
18969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18970: LD_ADDR_VAR 0 1
18974: PUSH
18975: LD_INT 22
18977: PUSH
18978: LD_OWVAR 2
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 21
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PPUSH
19001: CALL_OW 69
19005: ST_TO_ADDR
// if not tmp then
19006: LD_VAR 0 1
19010: NOT
19011: IFFALSE 19015
// exit ;
19013: GO 19041
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 1
19022: PPUSH
19023: LD_VAR 0 1
19027: PPUSH
19028: CALL_OW 12
19032: ARRAY
19033: PPUSH
19034: LD_INT 60
19036: PPUSH
19037: CALL_OW 234
// end ;
19041: PPOPN 1
19043: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19044: LD_EXP 30
19048: PUSH
19049: LD_EXP 60
19053: AND
19054: IFFALSE 19153
19056: GO 19058
19058: DISABLE
19059: LD_INT 0
19061: PPUSH
19062: PPUSH
// begin enable ;
19063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19064: LD_ADDR_VAR 0 1
19068: PUSH
19069: LD_INT 22
19071: PUSH
19072: LD_OWVAR 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 61
19083: PUSH
19084: EMPTY
19085: LIST
19086: PUSH
19087: LD_INT 33
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: LIST
19101: PPUSH
19102: CALL_OW 69
19106: ST_TO_ADDR
// if not tmp then
19107: LD_VAR 0 1
19111: NOT
19112: IFFALSE 19116
// exit ;
19114: GO 19153
// for i in tmp do
19116: LD_ADDR_VAR 0 2
19120: PUSH
19121: LD_VAR 0 1
19125: PUSH
19126: FOR_IN
19127: IFFALSE 19151
// if IsControledBy ( i ) then
19129: LD_VAR 0 2
19133: PPUSH
19134: CALL_OW 312
19138: IFFALSE 19149
// ComUnlink ( i ) ;
19140: LD_VAR 0 2
19144: PPUSH
19145: CALL_OW 136
19149: GO 19126
19151: POP
19152: POP
// end ;
19153: PPOPN 2
19155: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19156: LD_EXP 30
19160: PUSH
19161: LD_EXP 61
19165: AND
19166: IFFALSE 19306
19168: GO 19170
19170: DISABLE
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
// begin ToLua ( displayPowell(); ) ;
19175: LD_STRING displayPowell();
19177: PPUSH
19178: CALL_OW 559
// uc_side := 0 ;
19182: LD_ADDR_OWVAR 20
19186: PUSH
19187: LD_INT 0
19189: ST_TO_ADDR
// uc_nation := 2 ;
19190: LD_ADDR_OWVAR 21
19194: PUSH
19195: LD_INT 2
19197: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19198: LD_ADDR_OWVAR 37
19202: PUSH
19203: LD_INT 14
19205: ST_TO_ADDR
// vc_engine := engine_siberite ;
19206: LD_ADDR_OWVAR 39
19210: PUSH
19211: LD_INT 3
19213: ST_TO_ADDR
// vc_control := control_apeman ;
19214: LD_ADDR_OWVAR 38
19218: PUSH
19219: LD_INT 5
19221: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19222: LD_ADDR_OWVAR 40
19226: PUSH
19227: LD_INT 29
19229: ST_TO_ADDR
// un := CreateVehicle ;
19230: LD_ADDR_VAR 0 2
19234: PUSH
19235: CALL_OW 45
19239: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19240: LD_VAR 0 2
19244: PPUSH
19245: LD_INT 1
19247: PPUSH
19248: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19252: LD_INT 35
19254: PPUSH
19255: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19259: LD_VAR 0 2
19263: PPUSH
19264: LD_INT 22
19266: PUSH
19267: LD_OWVAR 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PPUSH
19276: CALL_OW 69
19280: PPUSH
19281: LD_VAR 0 2
19285: PPUSH
19286: CALL_OW 74
19290: PPUSH
19291: CALL_OW 115
// until IsDead ( un ) ;
19295: LD_VAR 0 2
19299: PPUSH
19300: CALL_OW 301
19304: IFFALSE 19252
// end ;
19306: PPOPN 2
19308: END
// every 0 0$1 trigger StreamModeActive and sStu do
19309: LD_EXP 30
19313: PUSH
19314: LD_EXP 69
19318: AND
19319: IFFALSE 19335
19321: GO 19323
19323: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19324: LD_STRING displayStucuk();
19326: PPUSH
19327: CALL_OW 559
// ResetFog ;
19331: CALL_OW 335
// end ;
19335: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19336: LD_EXP 30
19340: PUSH
19341: LD_EXP 62
19345: AND
19346: IFFALSE 19487
19348: GO 19350
19350: DISABLE
19351: LD_INT 0
19353: PPUSH
19354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19355: LD_ADDR_VAR 0 2
19359: PUSH
19360: LD_INT 22
19362: PUSH
19363: LD_OWVAR 2
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 21
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PPUSH
19386: CALL_OW 69
19390: ST_TO_ADDR
// if not tmp then
19391: LD_VAR 0 2
19395: NOT
19396: IFFALSE 19400
// exit ;
19398: GO 19487
// un := tmp [ rand ( 1 , tmp ) ] ;
19400: LD_ADDR_VAR 0 1
19404: PUSH
19405: LD_VAR 0 2
19409: PUSH
19410: LD_INT 1
19412: PPUSH
19413: LD_VAR 0 2
19417: PPUSH
19418: CALL_OW 12
19422: ARRAY
19423: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19424: LD_VAR 0 1
19428: PPUSH
19429: LD_INT 0
19431: PPUSH
19432: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19436: LD_VAR 0 1
19440: PPUSH
19441: LD_OWVAR 3
19445: PUSH
19446: LD_VAR 0 1
19450: DIFF
19451: PPUSH
19452: LD_VAR 0 1
19456: PPUSH
19457: CALL_OW 74
19461: PPUSH
19462: CALL_OW 115
// wait ( 0 0$20 ) ;
19466: LD_INT 700
19468: PPUSH
19469: CALL_OW 67
// SetSide ( un , your_side ) ;
19473: LD_VAR 0 1
19477: PPUSH
19478: LD_OWVAR 2
19482: PPUSH
19483: CALL_OW 235
// end ;
19487: PPOPN 2
19489: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19490: LD_EXP 30
19494: PUSH
19495: LD_EXP 63
19499: AND
19500: IFFALSE 19606
19502: GO 19504
19504: DISABLE
19505: LD_INT 0
19507: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19508: LD_ADDR_VAR 0 1
19512: PUSH
19513: LD_INT 22
19515: PUSH
19516: LD_OWVAR 2
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 2
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 0
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 30
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PPUSH
19557: CALL_OW 69
19561: ST_TO_ADDR
// if not depot then
19562: LD_VAR 0 1
19566: NOT
19567: IFFALSE 19571
// exit ;
19569: GO 19606
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19571: LD_VAR 0 1
19575: PUSH
19576: LD_INT 1
19578: ARRAY
19579: PPUSH
19580: CALL_OW 250
19584: PPUSH
19585: LD_VAR 0 1
19589: PUSH
19590: LD_INT 1
19592: ARRAY
19593: PPUSH
19594: CALL_OW 251
19598: PPUSH
19599: LD_INT 70
19601: PPUSH
19602: CALL_OW 495
// end ;
19606: PPOPN 1
19608: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19609: LD_EXP 30
19613: PUSH
19614: LD_EXP 64
19618: AND
19619: IFFALSE 19830
19621: GO 19623
19623: DISABLE
19624: LD_INT 0
19626: PPUSH
19627: PPUSH
19628: PPUSH
19629: PPUSH
19630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19631: LD_ADDR_VAR 0 5
19635: PUSH
19636: LD_INT 22
19638: PUSH
19639: LD_OWVAR 2
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 21
19650: PUSH
19651: LD_INT 1
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PPUSH
19662: CALL_OW 69
19666: ST_TO_ADDR
// if not tmp then
19667: LD_VAR 0 5
19671: NOT
19672: IFFALSE 19676
// exit ;
19674: GO 19830
// for i in tmp do
19676: LD_ADDR_VAR 0 1
19680: PUSH
19681: LD_VAR 0 5
19685: PUSH
19686: FOR_IN
19687: IFFALSE 19828
// begin d := rand ( 0 , 5 ) ;
19689: LD_ADDR_VAR 0 4
19693: PUSH
19694: LD_INT 0
19696: PPUSH
19697: LD_INT 5
19699: PPUSH
19700: CALL_OW 12
19704: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19705: LD_ADDR_VAR 0 2
19709: PUSH
19710: LD_VAR 0 1
19714: PPUSH
19715: CALL_OW 250
19719: PPUSH
19720: LD_VAR 0 4
19724: PPUSH
19725: LD_INT 3
19727: PPUSH
19728: LD_INT 12
19730: PPUSH
19731: CALL_OW 12
19735: PPUSH
19736: CALL_OW 272
19740: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19741: LD_ADDR_VAR 0 3
19745: PUSH
19746: LD_VAR 0 1
19750: PPUSH
19751: CALL_OW 251
19755: PPUSH
19756: LD_VAR 0 4
19760: PPUSH
19761: LD_INT 3
19763: PPUSH
19764: LD_INT 12
19766: PPUSH
19767: CALL_OW 12
19771: PPUSH
19772: CALL_OW 273
19776: ST_TO_ADDR
// if ValidHex ( x , y ) then
19777: LD_VAR 0 2
19781: PPUSH
19782: LD_VAR 0 3
19786: PPUSH
19787: CALL_OW 488
19791: IFFALSE 19826
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19793: LD_VAR 0 1
19797: PPUSH
19798: LD_VAR 0 2
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: LD_INT 3
19810: PPUSH
19811: LD_INT 6
19813: PPUSH
19814: CALL_OW 12
19818: PPUSH
19819: LD_INT 1
19821: PPUSH
19822: CALL_OW 483
// end ;
19826: GO 19686
19828: POP
19829: POP
// end ;
19830: PPOPN 5
19832: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19833: LD_EXP 30
19837: PUSH
19838: LD_EXP 65
19842: AND
19843: IFFALSE 19937
19845: GO 19847
19847: DISABLE
19848: LD_INT 0
19850: PPUSH
19851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19852: LD_ADDR_VAR 0 2
19856: PUSH
19857: LD_INT 22
19859: PUSH
19860: LD_OWVAR 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 32
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 21
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: LIST
19893: PPUSH
19894: CALL_OW 69
19898: ST_TO_ADDR
// if not tmp then
19899: LD_VAR 0 2
19903: NOT
19904: IFFALSE 19908
// exit ;
19906: GO 19937
// for i in tmp do
19908: LD_ADDR_VAR 0 1
19912: PUSH
19913: LD_VAR 0 2
19917: PUSH
19918: FOR_IN
19919: IFFALSE 19935
// SetFuel ( i , 0 ) ;
19921: LD_VAR 0 1
19925: PPUSH
19926: LD_INT 0
19928: PPUSH
19929: CALL_OW 240
19933: GO 19918
19935: POP
19936: POP
// end ;
19937: PPOPN 2
19939: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19940: LD_EXP 30
19944: PUSH
19945: LD_EXP 66
19949: AND
19950: IFFALSE 20016
19952: GO 19954
19954: DISABLE
19955: LD_INT 0
19957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19958: LD_ADDR_VAR 0 1
19962: PUSH
19963: LD_INT 22
19965: PUSH
19966: LD_OWVAR 2
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 30
19977: PUSH
19978: LD_INT 29
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PPUSH
19989: CALL_OW 69
19993: ST_TO_ADDR
// if not tmp then
19994: LD_VAR 0 1
19998: NOT
19999: IFFALSE 20003
// exit ;
20001: GO 20016
// DestroyUnit ( tmp [ 1 ] ) ;
20003: LD_VAR 0 1
20007: PUSH
20008: LD_INT 1
20010: ARRAY
20011: PPUSH
20012: CALL_OW 65
// end ;
20016: PPOPN 1
20018: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20019: LD_EXP 30
20023: PUSH
20024: LD_EXP 68
20028: AND
20029: IFFALSE 20158
20031: GO 20033
20033: DISABLE
20034: LD_INT 0
20036: PPUSH
// begin uc_side := 0 ;
20037: LD_ADDR_OWVAR 20
20041: PUSH
20042: LD_INT 0
20044: ST_TO_ADDR
// uc_nation := nation_arabian ;
20045: LD_ADDR_OWVAR 21
20049: PUSH
20050: LD_INT 2
20052: ST_TO_ADDR
// hc_gallery :=  ;
20053: LD_ADDR_OWVAR 33
20057: PUSH
20058: LD_STRING 
20060: ST_TO_ADDR
// hc_name :=  ;
20061: LD_ADDR_OWVAR 26
20065: PUSH
20066: LD_STRING 
20068: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20069: LD_INT 1
20071: PPUSH
20072: LD_INT 11
20074: PPUSH
20075: LD_INT 10
20077: PPUSH
20078: CALL_OW 380
// un := CreateHuman ;
20082: LD_ADDR_VAR 0 1
20086: PUSH
20087: CALL_OW 44
20091: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20092: LD_VAR 0 1
20096: PPUSH
20097: LD_INT 1
20099: PPUSH
20100: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20104: LD_INT 35
20106: PPUSH
20107: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20111: LD_VAR 0 1
20115: PPUSH
20116: LD_INT 22
20118: PUSH
20119: LD_OWVAR 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PPUSH
20128: CALL_OW 69
20132: PPUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 74
20142: PPUSH
20143: CALL_OW 115
// until IsDead ( un ) ;
20147: LD_VAR 0 1
20151: PPUSH
20152: CALL_OW 301
20156: IFFALSE 20104
// end ;
20158: PPOPN 1
20160: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20161: LD_EXP 30
20165: PUSH
20166: LD_EXP 70
20170: AND
20171: IFFALSE 20183
20173: GO 20175
20175: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20176: LD_STRING earthquake(getX(game), 0, 32)
20178: PPUSH
20179: CALL_OW 559
20183: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20184: LD_EXP 30
20188: PUSH
20189: LD_EXP 71
20193: AND
20194: IFFALSE 20285
20196: GO 20198
20198: DISABLE
20199: LD_INT 0
20201: PPUSH
// begin enable ;
20202: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20203: LD_ADDR_VAR 0 1
20207: PUSH
20208: LD_INT 22
20210: PUSH
20211: LD_OWVAR 2
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 21
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 33
20232: PUSH
20233: LD_INT 3
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: LIST
20244: PPUSH
20245: CALL_OW 69
20249: ST_TO_ADDR
// if not tmp then
20250: LD_VAR 0 1
20254: NOT
20255: IFFALSE 20259
// exit ;
20257: GO 20285
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20259: LD_VAR 0 1
20263: PUSH
20264: LD_INT 1
20266: PPUSH
20267: LD_VAR 0 1
20271: PPUSH
20272: CALL_OW 12
20276: ARRAY
20277: PPUSH
20278: LD_INT 1
20280: PPUSH
20281: CALL_OW 234
// end ;
20285: PPOPN 1
20287: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20288: LD_EXP 30
20292: PUSH
20293: LD_EXP 72
20297: AND
20298: IFFALSE 20439
20300: GO 20302
20302: DISABLE
20303: LD_INT 0
20305: PPUSH
20306: PPUSH
20307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20308: LD_ADDR_VAR 0 3
20312: PUSH
20313: LD_INT 22
20315: PUSH
20316: LD_OWVAR 2
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 25
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 69
20343: ST_TO_ADDR
// if not tmp then
20344: LD_VAR 0 3
20348: NOT
20349: IFFALSE 20353
// exit ;
20351: GO 20439
// un := tmp [ rand ( 1 , tmp ) ] ;
20353: LD_ADDR_VAR 0 2
20357: PUSH
20358: LD_VAR 0 3
20362: PUSH
20363: LD_INT 1
20365: PPUSH
20366: LD_VAR 0 3
20370: PPUSH
20371: CALL_OW 12
20375: ARRAY
20376: ST_TO_ADDR
// if Crawls ( un ) then
20377: LD_VAR 0 2
20381: PPUSH
20382: CALL_OW 318
20386: IFFALSE 20397
// ComWalk ( un ) ;
20388: LD_VAR 0 2
20392: PPUSH
20393: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20397: LD_VAR 0 2
20401: PPUSH
20402: LD_INT 9
20404: PPUSH
20405: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20409: LD_INT 28
20411: PPUSH
20412: LD_OWVAR 2
20416: PPUSH
20417: LD_INT 2
20419: PPUSH
20420: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20424: LD_INT 29
20426: PPUSH
20427: LD_OWVAR 2
20431: PPUSH
20432: LD_INT 2
20434: PPUSH
20435: CALL_OW 322
// end ;
20439: PPOPN 3
20441: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20442: LD_EXP 30
20446: PUSH
20447: LD_EXP 73
20451: AND
20452: IFFALSE 20563
20454: GO 20456
20456: DISABLE
20457: LD_INT 0
20459: PPUSH
20460: PPUSH
20461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20462: LD_ADDR_VAR 0 3
20466: PUSH
20467: LD_INT 22
20469: PUSH
20470: LD_OWVAR 2
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 25
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PPUSH
20493: CALL_OW 69
20497: ST_TO_ADDR
// if not tmp then
20498: LD_VAR 0 3
20502: NOT
20503: IFFALSE 20507
// exit ;
20505: GO 20563
// un := tmp [ rand ( 1 , tmp ) ] ;
20507: LD_ADDR_VAR 0 2
20511: PUSH
20512: LD_VAR 0 3
20516: PUSH
20517: LD_INT 1
20519: PPUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: CALL_OW 12
20529: ARRAY
20530: ST_TO_ADDR
// if Crawls ( un ) then
20531: LD_VAR 0 2
20535: PPUSH
20536: CALL_OW 318
20540: IFFALSE 20551
// ComWalk ( un ) ;
20542: LD_VAR 0 2
20546: PPUSH
20547: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20551: LD_VAR 0 2
20555: PPUSH
20556: LD_INT 8
20558: PPUSH
20559: CALL_OW 336
// end ;
20563: PPOPN 3
20565: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20566: LD_EXP 30
20570: PUSH
20571: LD_EXP 74
20575: AND
20576: IFFALSE 20720
20578: GO 20580
20580: DISABLE
20581: LD_INT 0
20583: PPUSH
20584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20585: LD_ADDR_VAR 0 2
20589: PUSH
20590: LD_INT 22
20592: PUSH
20593: LD_OWVAR 2
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 21
20604: PUSH
20605: LD_INT 2
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 2
20614: PUSH
20615: LD_INT 34
20617: PUSH
20618: LD_INT 12
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 34
20627: PUSH
20628: LD_INT 51
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 34
20637: PUSH
20638: LD_INT 32
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: PPUSH
20656: CALL_OW 69
20660: ST_TO_ADDR
// if not tmp then
20661: LD_VAR 0 2
20665: NOT
20666: IFFALSE 20670
// exit ;
20668: GO 20720
// for i in tmp do
20670: LD_ADDR_VAR 0 1
20674: PUSH
20675: LD_VAR 0 2
20679: PUSH
20680: FOR_IN
20681: IFFALSE 20718
// if GetCargo ( i , mat_artifact ) = 0 then
20683: LD_VAR 0 1
20687: PPUSH
20688: LD_INT 4
20690: PPUSH
20691: CALL_OW 289
20695: PUSH
20696: LD_INT 0
20698: EQUAL
20699: IFFALSE 20716
// SetCargo ( i , mat_siberit , 100 ) ;
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_INT 3
20708: PPUSH
20709: LD_INT 100
20711: PPUSH
20712: CALL_OW 290
20716: GO 20680
20718: POP
20719: POP
// end ;
20720: PPOPN 2
20722: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20723: LD_EXP 30
20727: PUSH
20728: LD_EXP 75
20732: AND
20733: IFFALSE 20916
20735: GO 20737
20737: DISABLE
20738: LD_INT 0
20740: PPUSH
20741: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20742: LD_ADDR_VAR 0 2
20746: PUSH
20747: LD_INT 22
20749: PUSH
20750: LD_OWVAR 2
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 69
20763: ST_TO_ADDR
// if not tmp then
20764: LD_VAR 0 2
20768: NOT
20769: IFFALSE 20773
// exit ;
20771: GO 20916
// for i := 1 to 2 do
20773: LD_ADDR_VAR 0 1
20777: PUSH
20778: DOUBLE
20779: LD_INT 1
20781: DEC
20782: ST_TO_ADDR
20783: LD_INT 2
20785: PUSH
20786: FOR_TO
20787: IFFALSE 20914
// begin uc_side := your_side ;
20789: LD_ADDR_OWVAR 20
20793: PUSH
20794: LD_OWVAR 2
20798: ST_TO_ADDR
// uc_nation := nation_american ;
20799: LD_ADDR_OWVAR 21
20803: PUSH
20804: LD_INT 1
20806: ST_TO_ADDR
// vc_chassis := us_morphling ;
20807: LD_ADDR_OWVAR 37
20811: PUSH
20812: LD_INT 5
20814: ST_TO_ADDR
// vc_engine := engine_siberite ;
20815: LD_ADDR_OWVAR 39
20819: PUSH
20820: LD_INT 3
20822: ST_TO_ADDR
// vc_control := control_computer ;
20823: LD_ADDR_OWVAR 38
20827: PUSH
20828: LD_INT 3
20830: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20831: LD_ADDR_OWVAR 40
20835: PUSH
20836: LD_INT 10
20838: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20839: LD_VAR 0 2
20843: PUSH
20844: LD_INT 1
20846: ARRAY
20847: PPUSH
20848: CALL_OW 310
20852: NOT
20853: IFFALSE 20900
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20855: CALL_OW 45
20859: PPUSH
20860: LD_VAR 0 2
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: CALL_OW 250
20873: PPUSH
20874: LD_VAR 0 2
20878: PUSH
20879: LD_INT 1
20881: ARRAY
20882: PPUSH
20883: CALL_OW 251
20887: PPUSH
20888: LD_INT 12
20890: PPUSH
20891: LD_INT 1
20893: PPUSH
20894: CALL_OW 50
20898: GO 20912
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20900: CALL_OW 45
20904: PPUSH
20905: LD_INT 1
20907: PPUSH
20908: CALL_OW 51
// end ;
20912: GO 20786
20914: POP
20915: POP
// end ;
20916: PPOPN 2
20918: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20919: LD_EXP 30
20923: PUSH
20924: LD_EXP 76
20928: AND
20929: IFFALSE 21151
20931: GO 20933
20933: DISABLE
20934: LD_INT 0
20936: PPUSH
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
20941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20942: LD_ADDR_VAR 0 6
20946: PUSH
20947: LD_INT 22
20949: PUSH
20950: LD_OWVAR 2
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 21
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 3
20971: PUSH
20972: LD_INT 23
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: PPUSH
20991: CALL_OW 69
20995: ST_TO_ADDR
// if not tmp then
20996: LD_VAR 0 6
21000: NOT
21001: IFFALSE 21005
// exit ;
21003: GO 21151
// s1 := rand ( 1 , 4 ) ;
21005: LD_ADDR_VAR 0 2
21009: PUSH
21010: LD_INT 1
21012: PPUSH
21013: LD_INT 4
21015: PPUSH
21016: CALL_OW 12
21020: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21021: LD_ADDR_VAR 0 4
21025: PUSH
21026: LD_VAR 0 6
21030: PUSH
21031: LD_INT 1
21033: ARRAY
21034: PPUSH
21035: LD_VAR 0 2
21039: PPUSH
21040: CALL_OW 259
21044: ST_TO_ADDR
// if s1 = 1 then
21045: LD_VAR 0 2
21049: PUSH
21050: LD_INT 1
21052: EQUAL
21053: IFFALSE 21073
// s2 := rand ( 2 , 4 ) else
21055: LD_ADDR_VAR 0 3
21059: PUSH
21060: LD_INT 2
21062: PPUSH
21063: LD_INT 4
21065: PPUSH
21066: CALL_OW 12
21070: ST_TO_ADDR
21071: GO 21081
// s2 := 1 ;
21073: LD_ADDR_VAR 0 3
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21081: LD_ADDR_VAR 0 5
21085: PUSH
21086: LD_VAR 0 6
21090: PUSH
21091: LD_INT 1
21093: ARRAY
21094: PPUSH
21095: LD_VAR 0 3
21099: PPUSH
21100: CALL_OW 259
21104: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21105: LD_VAR 0 6
21109: PUSH
21110: LD_INT 1
21112: ARRAY
21113: PPUSH
21114: LD_VAR 0 2
21118: PPUSH
21119: LD_VAR 0 5
21123: PPUSH
21124: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21128: LD_VAR 0 6
21132: PUSH
21133: LD_INT 1
21135: ARRAY
21136: PPUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: LD_VAR 0 4
21146: PPUSH
21147: CALL_OW 237
// end ;
21151: PPOPN 6
21153: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21154: LD_EXP 30
21158: PUSH
21159: LD_EXP 77
21163: AND
21164: IFFALSE 21243
21166: GO 21168
21168: DISABLE
21169: LD_INT 0
21171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21172: LD_ADDR_VAR 0 1
21176: PUSH
21177: LD_INT 22
21179: PUSH
21180: LD_OWVAR 2
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 30
21191: PUSH
21192: LD_INT 3
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PPUSH
21203: CALL_OW 69
21207: ST_TO_ADDR
// if not tmp then
21208: LD_VAR 0 1
21212: NOT
21213: IFFALSE 21217
// exit ;
21215: GO 21243
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21217: LD_VAR 0 1
21221: PUSH
21222: LD_INT 1
21224: PPUSH
21225: LD_VAR 0 1
21229: PPUSH
21230: CALL_OW 12
21234: ARRAY
21235: PPUSH
21236: LD_INT 1
21238: PPUSH
21239: CALL_OW 234
// end ;
21243: PPOPN 1
21245: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21246: LD_EXP 30
21250: PUSH
21251: LD_EXP 78
21255: AND
21256: IFFALSE 21368
21258: GO 21260
21260: DISABLE
21261: LD_INT 0
21263: PPUSH
21264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21265: LD_ADDR_VAR 0 2
21269: PUSH
21270: LD_INT 22
21272: PUSH
21273: LD_OWVAR 2
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: PUSH
21285: LD_INT 30
21287: PUSH
21288: LD_INT 27
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 30
21297: PUSH
21298: LD_INT 26
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 30
21307: PUSH
21308: LD_INT 28
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PPUSH
21325: CALL_OW 69
21329: ST_TO_ADDR
// if not tmp then
21330: LD_VAR 0 2
21334: NOT
21335: IFFALSE 21339
// exit ;
21337: GO 21368
// for i in tmp do
21339: LD_ADDR_VAR 0 1
21343: PUSH
21344: LD_VAR 0 2
21348: PUSH
21349: FOR_IN
21350: IFFALSE 21366
// SetLives ( i , 1 ) ;
21352: LD_VAR 0 1
21356: PPUSH
21357: LD_INT 1
21359: PPUSH
21360: CALL_OW 234
21364: GO 21349
21366: POP
21367: POP
// end ;
21368: PPOPN 2
21370: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21371: LD_EXP 30
21375: PUSH
21376: LD_EXP 79
21380: AND
21381: IFFALSE 21655
21383: GO 21385
21385: DISABLE
21386: LD_INT 0
21388: PPUSH
21389: PPUSH
21390: PPUSH
// begin i := rand ( 1 , 7 ) ;
21391: LD_ADDR_VAR 0 1
21395: PUSH
21396: LD_INT 1
21398: PPUSH
21399: LD_INT 7
21401: PPUSH
21402: CALL_OW 12
21406: ST_TO_ADDR
// case i of 1 :
21407: LD_VAR 0 1
21411: PUSH
21412: LD_INT 1
21414: DOUBLE
21415: EQUAL
21416: IFTRUE 21420
21418: GO 21430
21420: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21421: LD_STRING earthquake(getX(game), 0, 32)
21423: PPUSH
21424: CALL_OW 559
21428: GO 21655
21430: LD_INT 2
21432: DOUBLE
21433: EQUAL
21434: IFTRUE 21438
21436: GO 21452
21438: POP
// begin ToLua ( displayStucuk(); ) ;
21439: LD_STRING displayStucuk();
21441: PPUSH
21442: CALL_OW 559
// ResetFog ;
21446: CALL_OW 335
// end ; 3 :
21450: GO 21655
21452: LD_INT 3
21454: DOUBLE
21455: EQUAL
21456: IFTRUE 21460
21458: GO 21564
21460: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21461: LD_ADDR_VAR 0 2
21465: PUSH
21466: LD_INT 22
21468: PUSH
21469: LD_OWVAR 2
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 25
21480: PUSH
21481: LD_INT 1
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PPUSH
21492: CALL_OW 69
21496: ST_TO_ADDR
// if not tmp then
21497: LD_VAR 0 2
21501: NOT
21502: IFFALSE 21506
// exit ;
21504: GO 21655
// un := tmp [ rand ( 1 , tmp ) ] ;
21506: LD_ADDR_VAR 0 3
21510: PUSH
21511: LD_VAR 0 2
21515: PUSH
21516: LD_INT 1
21518: PPUSH
21519: LD_VAR 0 2
21523: PPUSH
21524: CALL_OW 12
21528: ARRAY
21529: ST_TO_ADDR
// if Crawls ( un ) then
21530: LD_VAR 0 3
21534: PPUSH
21535: CALL_OW 318
21539: IFFALSE 21550
// ComWalk ( un ) ;
21541: LD_VAR 0 3
21545: PPUSH
21546: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21550: LD_VAR 0 3
21554: PPUSH
21555: LD_INT 8
21557: PPUSH
21558: CALL_OW 336
// end ; 4 :
21562: GO 21655
21564: LD_INT 4
21566: DOUBLE
21567: EQUAL
21568: IFTRUE 21572
21570: GO 21633
21572: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21573: LD_ADDR_VAR 0 2
21577: PUSH
21578: LD_INT 22
21580: PUSH
21581: LD_OWVAR 2
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 30
21592: PUSH
21593: LD_INT 29
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PPUSH
21604: CALL_OW 69
21608: ST_TO_ADDR
// if not tmp then
21609: LD_VAR 0 2
21613: NOT
21614: IFFALSE 21618
// exit ;
21616: GO 21655
// DestroyUnit ( tmp [ 1 ] ) ;
21618: LD_VAR 0 2
21622: PUSH
21623: LD_INT 1
21625: ARRAY
21626: PPUSH
21627: CALL_OW 65
// end ; 5 .. 7 :
21631: GO 21655
21633: LD_INT 5
21635: DOUBLE
21636: GREATEREQUAL
21637: IFFALSE 21645
21639: LD_INT 7
21641: DOUBLE
21642: LESSEQUAL
21643: IFTRUE 21647
21645: GO 21654
21647: POP
// StreamSibBomb ; end ;
21648: CALL 17905 0 0
21652: GO 21655
21654: POP
// end ;
21655: PPOPN 3
21657: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21658: LD_EXP 30
21662: PUSH
21663: LD_EXP 80
21667: AND
21668: IFFALSE 21824
21670: GO 21672
21672: DISABLE
21673: LD_INT 0
21675: PPUSH
21676: PPUSH
21677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21678: LD_ADDR_VAR 0 2
21682: PUSH
21683: LD_INT 81
21685: PUSH
21686: LD_OWVAR 2
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 2
21697: PUSH
21698: LD_INT 21
21700: PUSH
21701: LD_INT 1
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 21
21710: PUSH
21711: LD_INT 2
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: LIST
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PPUSH
21727: CALL_OW 69
21731: ST_TO_ADDR
// if not tmp then
21732: LD_VAR 0 2
21736: NOT
21737: IFFALSE 21741
// exit ;
21739: GO 21824
// p := 0 ;
21741: LD_ADDR_VAR 0 3
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21749: LD_INT 35
21751: PPUSH
21752: CALL_OW 67
// p := p + 1 ;
21756: LD_ADDR_VAR 0 3
21760: PUSH
21761: LD_VAR 0 3
21765: PUSH
21766: LD_INT 1
21768: PLUS
21769: ST_TO_ADDR
// for i in tmp do
21770: LD_ADDR_VAR 0 1
21774: PUSH
21775: LD_VAR 0 2
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21812
// if GetLives ( i ) < 1000 then
21783: LD_VAR 0 1
21787: PPUSH
21788: CALL_OW 256
21792: PUSH
21793: LD_INT 1000
21795: LESS
21796: IFFALSE 21810
// SetLives ( i , 1000 ) ;
21798: LD_VAR 0 1
21802: PPUSH
21803: LD_INT 1000
21805: PPUSH
21806: CALL_OW 234
21810: GO 21780
21812: POP
21813: POP
// until p > 20 ;
21814: LD_VAR 0 3
21818: PUSH
21819: LD_INT 20
21821: GREATER
21822: IFFALSE 21749
// end ;
21824: PPOPN 3
21826: END
// every 0 0$1 trigger StreamModeActive and sTime do
21827: LD_EXP 30
21831: PUSH
21832: LD_EXP 81
21836: AND
21837: IFFALSE 21872
21839: GO 21841
21841: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21842: LD_INT 28
21844: PPUSH
21845: LD_OWVAR 2
21849: PPUSH
21850: LD_INT 2
21852: PPUSH
21853: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21857: LD_INT 30
21859: PPUSH
21860: LD_OWVAR 2
21864: PPUSH
21865: LD_INT 2
21867: PPUSH
21868: CALL_OW 322
// end ;
21872: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21873: LD_EXP 30
21877: PUSH
21878: LD_EXP 82
21882: AND
21883: IFFALSE 22004
21885: GO 21887
21887: DISABLE
21888: LD_INT 0
21890: PPUSH
21891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21892: LD_ADDR_VAR 0 2
21896: PUSH
21897: LD_INT 22
21899: PUSH
21900: LD_OWVAR 2
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 21
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 3
21921: PUSH
21922: LD_INT 23
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: PPUSH
21941: CALL_OW 69
21945: ST_TO_ADDR
// if not tmp then
21946: LD_VAR 0 2
21950: NOT
21951: IFFALSE 21955
// exit ;
21953: GO 22004
// for i in tmp do
21955: LD_ADDR_VAR 0 1
21959: PUSH
21960: LD_VAR 0 2
21964: PUSH
21965: FOR_IN
21966: IFFALSE 22002
// begin if Crawls ( i ) then
21968: LD_VAR 0 1
21972: PPUSH
21973: CALL_OW 318
21977: IFFALSE 21988
// ComWalk ( i ) ;
21979: LD_VAR 0 1
21983: PPUSH
21984: CALL_OW 138
// SetClass ( i , 2 ) ;
21988: LD_VAR 0 1
21992: PPUSH
21993: LD_INT 2
21995: PPUSH
21996: CALL_OW 336
// end ;
22000: GO 21965
22002: POP
22003: POP
// end ;
22004: PPOPN 2
22006: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22007: LD_EXP 30
22011: PUSH
22012: LD_EXP 83
22016: AND
22017: IFFALSE 22298
22019: GO 22021
22021: DISABLE
22022: LD_INT 0
22024: PPUSH
22025: PPUSH
22026: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22027: LD_OWVAR 2
22031: PPUSH
22032: LD_INT 9
22034: PPUSH
22035: LD_INT 1
22037: PPUSH
22038: LD_INT 1
22040: PPUSH
22041: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22045: LD_INT 9
22047: PPUSH
22048: LD_OWVAR 2
22052: PPUSH
22053: CALL_OW 343
// uc_side := 9 ;
22057: LD_ADDR_OWVAR 20
22061: PUSH
22062: LD_INT 9
22064: ST_TO_ADDR
// uc_nation := 2 ;
22065: LD_ADDR_OWVAR 21
22069: PUSH
22070: LD_INT 2
22072: ST_TO_ADDR
// hc_name := Dark Warrior ;
22073: LD_ADDR_OWVAR 26
22077: PUSH
22078: LD_STRING Dark Warrior
22080: ST_TO_ADDR
// hc_gallery :=  ;
22081: LD_ADDR_OWVAR 33
22085: PUSH
22086: LD_STRING 
22088: ST_TO_ADDR
// hc_noskilllimit := true ;
22089: LD_ADDR_OWVAR 76
22093: PUSH
22094: LD_INT 1
22096: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22097: LD_ADDR_OWVAR 31
22101: PUSH
22102: LD_INT 30
22104: PUSH
22105: LD_INT 30
22107: PUSH
22108: LD_INT 30
22110: PUSH
22111: LD_INT 30
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: ST_TO_ADDR
// un := CreateHuman ;
22120: LD_ADDR_VAR 0 3
22124: PUSH
22125: CALL_OW 44
22129: ST_TO_ADDR
// hc_noskilllimit := false ;
22130: LD_ADDR_OWVAR 76
22134: PUSH
22135: LD_INT 0
22137: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22138: LD_VAR 0 3
22142: PPUSH
22143: LD_INT 1
22145: PPUSH
22146: CALL_OW 51
// p := 0 ;
22150: LD_ADDR_VAR 0 2
22154: PUSH
22155: LD_INT 0
22157: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22158: LD_INT 35
22160: PPUSH
22161: CALL_OW 67
// p := p + 1 ;
22165: LD_ADDR_VAR 0 2
22169: PUSH
22170: LD_VAR 0 2
22174: PUSH
22175: LD_INT 1
22177: PLUS
22178: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22179: LD_VAR 0 3
22183: PPUSH
22184: CALL_OW 256
22188: PUSH
22189: LD_INT 1000
22191: LESS
22192: IFFALSE 22206
// SetLives ( un , 1000 ) ;
22194: LD_VAR 0 3
22198: PPUSH
22199: LD_INT 1000
22201: PPUSH
22202: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22206: LD_VAR 0 3
22210: PPUSH
22211: LD_INT 81
22213: PUSH
22214: LD_OWVAR 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 91
22225: PUSH
22226: LD_VAR 0 3
22230: PUSH
22231: LD_INT 30
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PPUSH
22243: CALL_OW 69
22247: PPUSH
22248: LD_VAR 0 3
22252: PPUSH
22253: CALL_OW 74
22257: PPUSH
22258: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22262: LD_VAR 0 2
22266: PUSH
22267: LD_INT 60
22269: GREATER
22270: PUSH
22271: LD_VAR 0 3
22275: PPUSH
22276: CALL_OW 301
22280: OR
22281: IFFALSE 22158
// if un then
22283: LD_VAR 0 3
22287: IFFALSE 22298
// RemoveUnit ( un ) ;
22289: LD_VAR 0 3
22293: PPUSH
22294: CALL_OW 64
// end ;
22298: PPOPN 3
22300: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22301: LD_INT 0
22303: PPUSH
// case cmd of 301 :
22304: LD_VAR 0 1
22308: PUSH
22309: LD_INT 301
22311: DOUBLE
22312: EQUAL
22313: IFTRUE 22317
22315: GO 22349
22317: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22318: LD_VAR 0 6
22322: PPUSH
22323: LD_VAR 0 7
22327: PPUSH
22328: LD_VAR 0 8
22332: PPUSH
22333: LD_VAR 0 4
22337: PPUSH
22338: LD_VAR 0 5
22342: PPUSH
22343: CALL 23550 0 5
22347: GO 22470
22349: LD_INT 302
22351: DOUBLE
22352: EQUAL
22353: IFTRUE 22357
22355: GO 22394
22357: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22358: LD_VAR 0 6
22362: PPUSH
22363: LD_VAR 0 7
22367: PPUSH
22368: LD_VAR 0 8
22372: PPUSH
22373: LD_VAR 0 9
22377: PPUSH
22378: LD_VAR 0 4
22382: PPUSH
22383: LD_VAR 0 5
22387: PPUSH
22388: CALL 23641 0 6
22392: GO 22470
22394: LD_INT 303
22396: DOUBLE
22397: EQUAL
22398: IFTRUE 22402
22400: GO 22439
22402: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22403: LD_VAR 0 6
22407: PPUSH
22408: LD_VAR 0 7
22412: PPUSH
22413: LD_VAR 0 8
22417: PPUSH
22418: LD_VAR 0 9
22422: PPUSH
22423: LD_VAR 0 4
22427: PPUSH
22428: LD_VAR 0 5
22432: PPUSH
22433: CALL 22475 0 6
22437: GO 22470
22439: LD_INT 304
22441: DOUBLE
22442: EQUAL
22443: IFTRUE 22447
22445: GO 22469
22447: POP
// hHackTeleport ( unit , x , y ) ; end ;
22448: LD_VAR 0 2
22452: PPUSH
22453: LD_VAR 0 4
22457: PPUSH
22458: LD_VAR 0 5
22462: PPUSH
22463: CALL 24234 0 3
22467: GO 22470
22469: POP
// end ;
22470: LD_VAR 0 12
22474: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22475: LD_INT 0
22477: PPUSH
22478: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22479: LD_VAR 0 1
22483: PUSH
22484: LD_INT 1
22486: LESS
22487: PUSH
22488: LD_VAR 0 1
22492: PUSH
22493: LD_INT 3
22495: GREATER
22496: OR
22497: PUSH
22498: LD_VAR 0 5
22502: PPUSH
22503: LD_VAR 0 6
22507: PPUSH
22508: CALL_OW 428
22512: OR
22513: IFFALSE 22517
// exit ;
22515: GO 23237
// uc_side := your_side ;
22517: LD_ADDR_OWVAR 20
22521: PUSH
22522: LD_OWVAR 2
22526: ST_TO_ADDR
// uc_nation := nation ;
22527: LD_ADDR_OWVAR 21
22531: PUSH
22532: LD_VAR 0 1
22536: ST_TO_ADDR
// bc_level = 1 ;
22537: LD_ADDR_OWVAR 43
22541: PUSH
22542: LD_INT 1
22544: ST_TO_ADDR
// case btype of 1 :
22545: LD_VAR 0 2
22549: PUSH
22550: LD_INT 1
22552: DOUBLE
22553: EQUAL
22554: IFTRUE 22558
22556: GO 22569
22558: POP
// bc_type := b_depot ; 2 :
22559: LD_ADDR_OWVAR 42
22563: PUSH
22564: LD_INT 0
22566: ST_TO_ADDR
22567: GO 23181
22569: LD_INT 2
22571: DOUBLE
22572: EQUAL
22573: IFTRUE 22577
22575: GO 22588
22577: POP
// bc_type := b_warehouse ; 3 :
22578: LD_ADDR_OWVAR 42
22582: PUSH
22583: LD_INT 1
22585: ST_TO_ADDR
22586: GO 23181
22588: LD_INT 3
22590: DOUBLE
22591: EQUAL
22592: IFTRUE 22596
22594: GO 22607
22596: POP
// bc_type := b_lab ; 4 .. 9 :
22597: LD_ADDR_OWVAR 42
22601: PUSH
22602: LD_INT 6
22604: ST_TO_ADDR
22605: GO 23181
22607: LD_INT 4
22609: DOUBLE
22610: GREATEREQUAL
22611: IFFALSE 22619
22613: LD_INT 9
22615: DOUBLE
22616: LESSEQUAL
22617: IFTRUE 22621
22619: GO 22673
22621: POP
// begin bc_type := b_lab_half ;
22622: LD_ADDR_OWVAR 42
22626: PUSH
22627: LD_INT 7
22629: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22630: LD_ADDR_OWVAR 44
22634: PUSH
22635: LD_INT 10
22637: PUSH
22638: LD_INT 11
22640: PUSH
22641: LD_INT 12
22643: PUSH
22644: LD_INT 15
22646: PUSH
22647: LD_INT 14
22649: PUSH
22650: LD_INT 13
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: PUSH
22661: LD_VAR 0 2
22665: PUSH
22666: LD_INT 3
22668: MINUS
22669: ARRAY
22670: ST_TO_ADDR
// end ; 10 .. 13 :
22671: GO 23181
22673: LD_INT 10
22675: DOUBLE
22676: GREATEREQUAL
22677: IFFALSE 22685
22679: LD_INT 13
22681: DOUBLE
22682: LESSEQUAL
22683: IFTRUE 22687
22685: GO 22764
22687: POP
// begin bc_type := b_lab_full ;
22688: LD_ADDR_OWVAR 42
22692: PUSH
22693: LD_INT 8
22695: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22696: LD_ADDR_OWVAR 44
22700: PUSH
22701: LD_INT 10
22703: PUSH
22704: LD_INT 12
22706: PUSH
22707: LD_INT 14
22709: PUSH
22710: LD_INT 13
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: PUSH
22719: LD_VAR 0 2
22723: PUSH
22724: LD_INT 9
22726: MINUS
22727: ARRAY
22728: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22729: LD_ADDR_OWVAR 45
22733: PUSH
22734: LD_INT 11
22736: PUSH
22737: LD_INT 15
22739: PUSH
22740: LD_INT 12
22742: PUSH
22743: LD_INT 15
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: PUSH
22752: LD_VAR 0 2
22756: PUSH
22757: LD_INT 9
22759: MINUS
22760: ARRAY
22761: ST_TO_ADDR
// end ; 14 :
22762: GO 23181
22764: LD_INT 14
22766: DOUBLE
22767: EQUAL
22768: IFTRUE 22772
22770: GO 22783
22772: POP
// bc_type := b_workshop ; 15 :
22773: LD_ADDR_OWVAR 42
22777: PUSH
22778: LD_INT 2
22780: ST_TO_ADDR
22781: GO 23181
22783: LD_INT 15
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22802
22791: POP
// bc_type := b_factory ; 16 :
22792: LD_ADDR_OWVAR 42
22796: PUSH
22797: LD_INT 3
22799: ST_TO_ADDR
22800: GO 23181
22802: LD_INT 16
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22821
22810: POP
// bc_type := b_ext_gun ; 17 :
22811: LD_ADDR_OWVAR 42
22815: PUSH
22816: LD_INT 17
22818: ST_TO_ADDR
22819: GO 23181
22821: LD_INT 17
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 22857
22829: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22830: LD_ADDR_OWVAR 42
22834: PUSH
22835: LD_INT 19
22837: PUSH
22838: LD_INT 23
22840: PUSH
22841: LD_INT 19
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: PUSH
22849: LD_VAR 0 1
22853: ARRAY
22854: ST_TO_ADDR
22855: GO 23181
22857: LD_INT 18
22859: DOUBLE
22860: EQUAL
22861: IFTRUE 22865
22863: GO 22876
22865: POP
// bc_type := b_ext_radar ; 19 :
22866: LD_ADDR_OWVAR 42
22870: PUSH
22871: LD_INT 20
22873: ST_TO_ADDR
22874: GO 23181
22876: LD_INT 19
22878: DOUBLE
22879: EQUAL
22880: IFTRUE 22884
22882: GO 22895
22884: POP
// bc_type := b_ext_radio ; 20 :
22885: LD_ADDR_OWVAR 42
22889: PUSH
22890: LD_INT 22
22892: ST_TO_ADDR
22893: GO 23181
22895: LD_INT 20
22897: DOUBLE
22898: EQUAL
22899: IFTRUE 22903
22901: GO 22914
22903: POP
// bc_type := b_ext_siberium ; 21 :
22904: LD_ADDR_OWVAR 42
22908: PUSH
22909: LD_INT 21
22911: ST_TO_ADDR
22912: GO 23181
22914: LD_INT 21
22916: DOUBLE
22917: EQUAL
22918: IFTRUE 22922
22920: GO 22933
22922: POP
// bc_type := b_ext_computer ; 22 :
22923: LD_ADDR_OWVAR 42
22927: PUSH
22928: LD_INT 24
22930: ST_TO_ADDR
22931: GO 23181
22933: LD_INT 22
22935: DOUBLE
22936: EQUAL
22937: IFTRUE 22941
22939: GO 22952
22941: POP
// bc_type := b_ext_track ; 23 :
22942: LD_ADDR_OWVAR 42
22946: PUSH
22947: LD_INT 16
22949: ST_TO_ADDR
22950: GO 23181
22952: LD_INT 23
22954: DOUBLE
22955: EQUAL
22956: IFTRUE 22960
22958: GO 22971
22960: POP
// bc_type := b_ext_laser ; 24 :
22961: LD_ADDR_OWVAR 42
22965: PUSH
22966: LD_INT 25
22968: ST_TO_ADDR
22969: GO 23181
22971: LD_INT 24
22973: DOUBLE
22974: EQUAL
22975: IFTRUE 22979
22977: GO 22990
22979: POP
// bc_type := b_control_tower ; 25 :
22980: LD_ADDR_OWVAR 42
22984: PUSH
22985: LD_INT 36
22987: ST_TO_ADDR
22988: GO 23181
22990: LD_INT 25
22992: DOUBLE
22993: EQUAL
22994: IFTRUE 22998
22996: GO 23009
22998: POP
// bc_type := b_breastwork ; 26 :
22999: LD_ADDR_OWVAR 42
23003: PUSH
23004: LD_INT 31
23006: ST_TO_ADDR
23007: GO 23181
23009: LD_INT 26
23011: DOUBLE
23012: EQUAL
23013: IFTRUE 23017
23015: GO 23028
23017: POP
// bc_type := b_bunker ; 27 :
23018: LD_ADDR_OWVAR 42
23022: PUSH
23023: LD_INT 32
23025: ST_TO_ADDR
23026: GO 23181
23028: LD_INT 27
23030: DOUBLE
23031: EQUAL
23032: IFTRUE 23036
23034: GO 23047
23036: POP
// bc_type := b_turret ; 28 :
23037: LD_ADDR_OWVAR 42
23041: PUSH
23042: LD_INT 33
23044: ST_TO_ADDR
23045: GO 23181
23047: LD_INT 28
23049: DOUBLE
23050: EQUAL
23051: IFTRUE 23055
23053: GO 23066
23055: POP
// bc_type := b_armoury ; 29 :
23056: LD_ADDR_OWVAR 42
23060: PUSH
23061: LD_INT 4
23063: ST_TO_ADDR
23064: GO 23181
23066: LD_INT 29
23068: DOUBLE
23069: EQUAL
23070: IFTRUE 23074
23072: GO 23085
23074: POP
// bc_type := b_barracks ; 30 :
23075: LD_ADDR_OWVAR 42
23079: PUSH
23080: LD_INT 5
23082: ST_TO_ADDR
23083: GO 23181
23085: LD_INT 30
23087: DOUBLE
23088: EQUAL
23089: IFTRUE 23093
23091: GO 23104
23093: POP
// bc_type := b_solar_power ; 31 :
23094: LD_ADDR_OWVAR 42
23098: PUSH
23099: LD_INT 27
23101: ST_TO_ADDR
23102: GO 23181
23104: LD_INT 31
23106: DOUBLE
23107: EQUAL
23108: IFTRUE 23112
23110: GO 23123
23112: POP
// bc_type := b_oil_power ; 32 :
23113: LD_ADDR_OWVAR 42
23117: PUSH
23118: LD_INT 26
23120: ST_TO_ADDR
23121: GO 23181
23123: LD_INT 32
23125: DOUBLE
23126: EQUAL
23127: IFTRUE 23131
23129: GO 23142
23131: POP
// bc_type := b_siberite_power ; 33 :
23132: LD_ADDR_OWVAR 42
23136: PUSH
23137: LD_INT 28
23139: ST_TO_ADDR
23140: GO 23181
23142: LD_INT 33
23144: DOUBLE
23145: EQUAL
23146: IFTRUE 23150
23148: GO 23161
23150: POP
// bc_type := b_oil_mine ; 34 :
23151: LD_ADDR_OWVAR 42
23155: PUSH
23156: LD_INT 29
23158: ST_TO_ADDR
23159: GO 23181
23161: LD_INT 34
23163: DOUBLE
23164: EQUAL
23165: IFTRUE 23169
23167: GO 23180
23169: POP
// bc_type := b_siberite_mine ; end ;
23170: LD_ADDR_OWVAR 42
23174: PUSH
23175: LD_INT 30
23177: ST_TO_ADDR
23178: GO 23181
23180: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23181: LD_ADDR_VAR 0 8
23185: PUSH
23186: LD_VAR 0 5
23190: PPUSH
23191: LD_VAR 0 6
23195: PPUSH
23196: LD_VAR 0 3
23200: PPUSH
23201: CALL_OW 47
23205: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23206: LD_OWVAR 42
23210: PUSH
23211: LD_INT 32
23213: PUSH
23214: LD_INT 33
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: IN
23221: IFFALSE 23237
// PlaceWeaponTurret ( b , weapon ) ;
23223: LD_VAR 0 8
23227: PPUSH
23228: LD_VAR 0 4
23232: PPUSH
23233: CALL_OW 431
// end ;
23237: LD_VAR 0 7
23241: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23242: LD_INT 0
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23248: LD_ADDR_VAR 0 4
23252: PUSH
23253: LD_INT 22
23255: PUSH
23256: LD_OWVAR 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: LD_INT 30
23270: PUSH
23271: LD_INT 0
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 30
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: ST_TO_ADDR
// if not tmp then
23302: LD_VAR 0 4
23306: NOT
23307: IFFALSE 23311
// exit ;
23309: GO 23370
// for i in tmp do
23311: LD_ADDR_VAR 0 2
23315: PUSH
23316: LD_VAR 0 4
23320: PUSH
23321: FOR_IN
23322: IFFALSE 23368
// for j = 1 to 3 do
23324: LD_ADDR_VAR 0 3
23328: PUSH
23329: DOUBLE
23330: LD_INT 1
23332: DEC
23333: ST_TO_ADDR
23334: LD_INT 3
23336: PUSH
23337: FOR_TO
23338: IFFALSE 23364
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 274
23349: PPUSH
23350: LD_VAR 0 3
23354: PPUSH
23355: LD_INT 99999
23357: PPUSH
23358: CALL_OW 277
23362: GO 23337
23364: POP
23365: POP
23366: GO 23321
23368: POP
23369: POP
// end ;
23370: LD_VAR 0 1
23374: RET
// export function hHackSetLevel10 ; var i , j ; begin
23375: LD_INT 0
23377: PPUSH
23378: PPUSH
23379: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23380: LD_ADDR_VAR 0 2
23384: PUSH
23385: LD_INT 21
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PPUSH
23395: CALL_OW 69
23399: PUSH
23400: FOR_IN
23401: IFFALSE 23453
// if IsSelected ( i ) then
23403: LD_VAR 0 2
23407: PPUSH
23408: CALL_OW 306
23412: IFFALSE 23451
// begin for j := 1 to 4 do
23414: LD_ADDR_VAR 0 3
23418: PUSH
23419: DOUBLE
23420: LD_INT 1
23422: DEC
23423: ST_TO_ADDR
23424: LD_INT 4
23426: PUSH
23427: FOR_TO
23428: IFFALSE 23449
// SetSkill ( i , j , 10 ) ;
23430: LD_VAR 0 2
23434: PPUSH
23435: LD_VAR 0 3
23439: PPUSH
23440: LD_INT 10
23442: PPUSH
23443: CALL_OW 237
23447: GO 23427
23449: POP
23450: POP
// end ;
23451: GO 23400
23453: POP
23454: POP
// end ;
23455: LD_VAR 0 1
23459: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23460: LD_INT 0
23462: PPUSH
23463: PPUSH
23464: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23465: LD_ADDR_VAR 0 2
23469: PUSH
23470: LD_INT 22
23472: PUSH
23473: LD_OWVAR 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 21
23484: PUSH
23485: LD_INT 1
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PPUSH
23496: CALL_OW 69
23500: PUSH
23501: FOR_IN
23502: IFFALSE 23543
// begin for j := 1 to 4 do
23504: LD_ADDR_VAR 0 3
23508: PUSH
23509: DOUBLE
23510: LD_INT 1
23512: DEC
23513: ST_TO_ADDR
23514: LD_INT 4
23516: PUSH
23517: FOR_TO
23518: IFFALSE 23539
// SetSkill ( i , j , 10 ) ;
23520: LD_VAR 0 2
23524: PPUSH
23525: LD_VAR 0 3
23529: PPUSH
23530: LD_INT 10
23532: PPUSH
23533: CALL_OW 237
23537: GO 23517
23539: POP
23540: POP
// end ;
23541: GO 23501
23543: POP
23544: POP
// end ;
23545: LD_VAR 0 1
23549: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23550: LD_INT 0
23552: PPUSH
// uc_side := your_side ;
23553: LD_ADDR_OWVAR 20
23557: PUSH
23558: LD_OWVAR 2
23562: ST_TO_ADDR
// uc_nation := nation ;
23563: LD_ADDR_OWVAR 21
23567: PUSH
23568: LD_VAR 0 1
23572: ST_TO_ADDR
// InitHc ;
23573: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23577: LD_INT 0
23579: PPUSH
23580: LD_VAR 0 2
23584: PPUSH
23585: LD_VAR 0 3
23589: PPUSH
23590: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23594: LD_VAR 0 4
23598: PPUSH
23599: LD_VAR 0 5
23603: PPUSH
23604: CALL_OW 428
23608: PUSH
23609: LD_INT 0
23611: EQUAL
23612: IFFALSE 23636
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23614: CALL_OW 44
23618: PPUSH
23619: LD_VAR 0 4
23623: PPUSH
23624: LD_VAR 0 5
23628: PPUSH
23629: LD_INT 1
23631: PPUSH
23632: CALL_OW 48
// end ;
23636: LD_VAR 0 6
23640: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23641: LD_INT 0
23643: PPUSH
23644: PPUSH
// uc_side := your_side ;
23645: LD_ADDR_OWVAR 20
23649: PUSH
23650: LD_OWVAR 2
23654: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23655: LD_VAR 0 1
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: LD_INT 2
23665: PUSH
23666: LD_INT 3
23668: PUSH
23669: LD_INT 4
23671: PUSH
23672: LD_INT 5
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: IN
23682: IFFALSE 23694
// uc_nation := nation_american else
23684: LD_ADDR_OWVAR 21
23688: PUSH
23689: LD_INT 1
23691: ST_TO_ADDR
23692: GO 23737
// if chassis in [ 11 , 12 , 13 , 14 ] then
23694: LD_VAR 0 1
23698: PUSH
23699: LD_INT 11
23701: PUSH
23702: LD_INT 12
23704: PUSH
23705: LD_INT 13
23707: PUSH
23708: LD_INT 14
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: IN
23717: IFFALSE 23729
// uc_nation := nation_arabian else
23719: LD_ADDR_OWVAR 21
23723: PUSH
23724: LD_INT 2
23726: ST_TO_ADDR
23727: GO 23737
// uc_nation := nation_russian ;
23729: LD_ADDR_OWVAR 21
23733: PUSH
23734: LD_INT 3
23736: ST_TO_ADDR
// vc_chassis := chassis ;
23737: LD_ADDR_OWVAR 37
23741: PUSH
23742: LD_VAR 0 1
23746: ST_TO_ADDR
// vc_engine := engine ;
23747: LD_ADDR_OWVAR 39
23751: PUSH
23752: LD_VAR 0 2
23756: ST_TO_ADDR
// vc_control := control ;
23757: LD_ADDR_OWVAR 38
23761: PUSH
23762: LD_VAR 0 3
23766: ST_TO_ADDR
// vc_weapon := weapon ;
23767: LD_ADDR_OWVAR 40
23771: PUSH
23772: LD_VAR 0 4
23776: ST_TO_ADDR
// un := CreateVehicle ;
23777: LD_ADDR_VAR 0 8
23781: PUSH
23782: CALL_OW 45
23786: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23787: LD_VAR 0 8
23791: PPUSH
23792: LD_INT 0
23794: PPUSH
23795: LD_INT 5
23797: PPUSH
23798: CALL_OW 12
23802: PPUSH
23803: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23807: LD_VAR 0 8
23811: PPUSH
23812: LD_VAR 0 5
23816: PPUSH
23817: LD_VAR 0 6
23821: PPUSH
23822: LD_INT 1
23824: PPUSH
23825: CALL_OW 48
// end ;
23829: LD_VAR 0 7
23833: RET
// export hInvincible ; every 1 do
23834: GO 23836
23836: DISABLE
// hInvincible := [ ] ;
23837: LD_ADDR_EXP 84
23841: PUSH
23842: EMPTY
23843: ST_TO_ADDR
23844: END
// every 10 do var i ;
23845: GO 23847
23847: DISABLE
23848: LD_INT 0
23850: PPUSH
// begin enable ;
23851: ENABLE
// if not hInvincible then
23852: LD_EXP 84
23856: NOT
23857: IFFALSE 23861
// exit ;
23859: GO 23905
// for i in hInvincible do
23861: LD_ADDR_VAR 0 1
23865: PUSH
23866: LD_EXP 84
23870: PUSH
23871: FOR_IN
23872: IFFALSE 23903
// if GetLives ( i ) < 1000 then
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 256
23883: PUSH
23884: LD_INT 1000
23886: LESS
23887: IFFALSE 23901
// SetLives ( i , 1000 ) ;
23889: LD_VAR 0 1
23893: PPUSH
23894: LD_INT 1000
23896: PPUSH
23897: CALL_OW 234
23901: GO 23871
23903: POP
23904: POP
// end ;
23905: PPOPN 1
23907: END
// export function hHackInvincible ; var i ; begin
23908: LD_INT 0
23910: PPUSH
23911: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23912: LD_ADDR_VAR 0 2
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: LD_INT 21
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 21
23932: PUSH
23933: LD_INT 2
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: PPUSH
23945: CALL_OW 69
23949: PUSH
23950: FOR_IN
23951: IFFALSE 24012
// if IsSelected ( i ) then
23953: LD_VAR 0 2
23957: PPUSH
23958: CALL_OW 306
23962: IFFALSE 24010
// begin if i in hInvincible then
23964: LD_VAR 0 2
23968: PUSH
23969: LD_EXP 84
23973: IN
23974: IFFALSE 23994
// hInvincible := hInvincible diff i else
23976: LD_ADDR_EXP 84
23980: PUSH
23981: LD_EXP 84
23985: PUSH
23986: LD_VAR 0 2
23990: DIFF
23991: ST_TO_ADDR
23992: GO 24010
// hInvincible := hInvincible union i ;
23994: LD_ADDR_EXP 84
23998: PUSH
23999: LD_EXP 84
24003: PUSH
24004: LD_VAR 0 2
24008: UNION
24009: ST_TO_ADDR
// end ;
24010: GO 23950
24012: POP
24013: POP
// end ;
24014: LD_VAR 0 1
24018: RET
// export function hHackInvisible ; var i , j ; begin
24019: LD_INT 0
24021: PPUSH
24022: PPUSH
24023: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24024: LD_ADDR_VAR 0 2
24028: PUSH
24029: LD_INT 21
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PPUSH
24039: CALL_OW 69
24043: PUSH
24044: FOR_IN
24045: IFFALSE 24069
// if IsSelected ( i ) then
24047: LD_VAR 0 2
24051: PPUSH
24052: CALL_OW 306
24056: IFFALSE 24067
// ComForceInvisible ( i ) ;
24058: LD_VAR 0 2
24062: PPUSH
24063: CALL_OW 496
24067: GO 24044
24069: POP
24070: POP
// end ;
24071: LD_VAR 0 1
24075: RET
// export function hHackChangeYourSide ; begin
24076: LD_INT 0
24078: PPUSH
// if your_side = 8 then
24079: LD_OWVAR 2
24083: PUSH
24084: LD_INT 8
24086: EQUAL
24087: IFFALSE 24099
// your_side := 0 else
24089: LD_ADDR_OWVAR 2
24093: PUSH
24094: LD_INT 0
24096: ST_TO_ADDR
24097: GO 24113
// your_side := your_side + 1 ;
24099: LD_ADDR_OWVAR 2
24103: PUSH
24104: LD_OWVAR 2
24108: PUSH
24109: LD_INT 1
24111: PLUS
24112: ST_TO_ADDR
// end ;
24113: LD_VAR 0 1
24117: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24118: LD_INT 0
24120: PPUSH
24121: PPUSH
24122: PPUSH
// for i in all_units do
24123: LD_ADDR_VAR 0 2
24127: PUSH
24128: LD_OWVAR 3
24132: PUSH
24133: FOR_IN
24134: IFFALSE 24212
// if IsSelected ( i ) then
24136: LD_VAR 0 2
24140: PPUSH
24141: CALL_OW 306
24145: IFFALSE 24210
// begin j := GetSide ( i ) ;
24147: LD_ADDR_VAR 0 3
24151: PUSH
24152: LD_VAR 0 2
24156: PPUSH
24157: CALL_OW 255
24161: ST_TO_ADDR
// if j = 8 then
24162: LD_VAR 0 3
24166: PUSH
24167: LD_INT 8
24169: EQUAL
24170: IFFALSE 24182
// j := 0 else
24172: LD_ADDR_VAR 0 3
24176: PUSH
24177: LD_INT 0
24179: ST_TO_ADDR
24180: GO 24196
// j := j + 1 ;
24182: LD_ADDR_VAR 0 3
24186: PUSH
24187: LD_VAR 0 3
24191: PUSH
24192: LD_INT 1
24194: PLUS
24195: ST_TO_ADDR
// SetSide ( i , j ) ;
24196: LD_VAR 0 2
24200: PPUSH
24201: LD_VAR 0 3
24205: PPUSH
24206: CALL_OW 235
// end ;
24210: GO 24133
24212: POP
24213: POP
// end ;
24214: LD_VAR 0 1
24218: RET
// export function hHackFog ; begin
24219: LD_INT 0
24221: PPUSH
// FogOff ( true ) ;
24222: LD_INT 1
24224: PPUSH
24225: CALL_OW 344
// end ;
24229: LD_VAR 0 1
24233: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24234: LD_INT 0
24236: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24237: LD_VAR 0 1
24241: PPUSH
24242: LD_VAR 0 2
24246: PPUSH
24247: LD_VAR 0 3
24251: PPUSH
24252: LD_INT 1
24254: PPUSH
24255: LD_INT 1
24257: PPUSH
24258: CALL_OW 483
// CenterOnXY ( x , y ) ;
24262: LD_VAR 0 2
24266: PPUSH
24267: LD_VAR 0 3
24271: PPUSH
24272: CALL_OW 84
// end ; end_of_file
24276: LD_VAR 0 4
24280: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24281: LD_INT 0
24283: PPUSH
24284: PPUSH
24285: PPUSH
24286: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24287: LD_VAR 0 1
24291: PPUSH
24292: CALL_OW 264
24296: PUSH
24297: LD_EXP 18
24301: EQUAL
24302: IFFALSE 24374
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24304: LD_INT 68
24306: PPUSH
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 255
24316: PPUSH
24317: CALL_OW 321
24321: PUSH
24322: LD_INT 2
24324: EQUAL
24325: IFFALSE 24337
// eff := 70 else
24327: LD_ADDR_VAR 0 4
24331: PUSH
24332: LD_INT 70
24334: ST_TO_ADDR
24335: GO 24345
// eff := 30 ;
24337: LD_ADDR_VAR 0 4
24341: PUSH
24342: LD_INT 30
24344: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL_OW 250
24354: PPUSH
24355: LD_VAR 0 1
24359: PPUSH
24360: CALL_OW 251
24364: PPUSH
24365: LD_VAR 0 4
24369: PPUSH
24370: CALL_OW 495
// end ; end ;
24374: LD_VAR 0 2
24378: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24379: LD_INT 0
24381: PPUSH
// end ;
24382: LD_VAR 0 4
24386: RET
// export function SOS_Command ( cmd ) ; begin
24387: LD_INT 0
24389: PPUSH
// end ;
24390: LD_VAR 0 2
24394: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24395: LD_INT 0
24397: PPUSH
// if cmd = 121 then
24398: LD_VAR 0 1
24402: PUSH
24403: LD_INT 121
24405: EQUAL
24406: IFFALSE 24408
// end ;
24408: LD_VAR 0 6
24412: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24413: LD_INT 0
24415: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24416: LD_VAR 0 1
24420: PUSH
24421: LD_INT 250
24423: EQUAL
24424: PUSH
24425: LD_VAR 0 2
24429: PPUSH
24430: CALL_OW 264
24434: PUSH
24435: LD_EXP 21
24439: EQUAL
24440: AND
24441: IFFALSE 24462
// MinerPlaceMine ( unit , x , y ) ;
24443: LD_VAR 0 2
24447: PPUSH
24448: LD_VAR 0 4
24452: PPUSH
24453: LD_VAR 0 5
24457: PPUSH
24458: CALL 26811 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24462: LD_VAR 0 1
24466: PUSH
24467: LD_INT 251
24469: EQUAL
24470: PUSH
24471: LD_VAR 0 2
24475: PPUSH
24476: CALL_OW 264
24480: PUSH
24481: LD_EXP 21
24485: EQUAL
24486: AND
24487: IFFALSE 24508
// MinerDetonateMine ( unit , x , y ) ;
24489: LD_VAR 0 2
24493: PPUSH
24494: LD_VAR 0 4
24498: PPUSH
24499: LD_VAR 0 5
24503: PPUSH
24504: CALL 27088 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24508: LD_VAR 0 1
24512: PUSH
24513: LD_INT 252
24515: EQUAL
24516: PUSH
24517: LD_VAR 0 2
24521: PPUSH
24522: CALL_OW 264
24526: PUSH
24527: LD_EXP 21
24531: EQUAL
24532: AND
24533: IFFALSE 24554
// MinerCreateMinefield ( unit , x , y ) ;
24535: LD_VAR 0 2
24539: PPUSH
24540: LD_VAR 0 4
24544: PPUSH
24545: LD_VAR 0 5
24549: PPUSH
24550: CALL 27505 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24554: LD_VAR 0 1
24558: PUSH
24559: LD_INT 253
24561: EQUAL
24562: PUSH
24563: LD_VAR 0 2
24567: PPUSH
24568: CALL_OW 257
24572: PUSH
24573: LD_INT 5
24575: EQUAL
24576: AND
24577: IFFALSE 24598
// ComBinocular ( unit , x , y ) ;
24579: LD_VAR 0 2
24583: PPUSH
24584: LD_VAR 0 4
24588: PPUSH
24589: LD_VAR 0 5
24593: PPUSH
24594: CALL 27876 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24598: LD_VAR 0 1
24602: PUSH
24603: LD_INT 254
24605: EQUAL
24606: PUSH
24607: LD_VAR 0 2
24611: PPUSH
24612: CALL_OW 264
24616: PUSH
24617: LD_EXP 16
24621: EQUAL
24622: AND
24623: PUSH
24624: LD_VAR 0 3
24628: PPUSH
24629: CALL_OW 263
24633: PUSH
24634: LD_INT 3
24636: EQUAL
24637: AND
24638: IFFALSE 24654
// HackDestroyVehicle ( unit , selectedUnit ) ;
24640: LD_VAR 0 2
24644: PPUSH
24645: LD_VAR 0 3
24649: PPUSH
24650: CALL 26171 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24654: LD_VAR 0 1
24658: PUSH
24659: LD_INT 255
24661: EQUAL
24662: PUSH
24663: LD_VAR 0 2
24667: PPUSH
24668: CALL_OW 264
24672: PUSH
24673: LD_INT 14
24675: PUSH
24676: LD_INT 53
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: IN
24683: AND
24684: PUSH
24685: LD_VAR 0 4
24689: PPUSH
24690: LD_VAR 0 5
24694: PPUSH
24695: CALL_OW 488
24699: AND
24700: IFFALSE 24724
// CutTreeXYR ( unit , x , y , 12 ) ;
24702: LD_VAR 0 2
24706: PPUSH
24707: LD_VAR 0 4
24711: PPUSH
24712: LD_VAR 0 5
24716: PPUSH
24717: LD_INT 12
24719: PPUSH
24720: CALL 24737 0 4
// end ;
24724: LD_VAR 0 6
24728: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24729: LD_INT 0
24731: PPUSH
// end ;
24732: LD_VAR 0 4
24736: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24737: LD_INT 0
24739: PPUSH
24740: PPUSH
24741: PPUSH
24742: PPUSH
24743: PPUSH
24744: PPUSH
24745: PPUSH
24746: PPUSH
24747: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24748: LD_VAR 0 1
24752: NOT
24753: PUSH
24754: LD_VAR 0 2
24758: PPUSH
24759: LD_VAR 0 3
24763: PPUSH
24764: CALL_OW 488
24768: NOT
24769: OR
24770: PUSH
24771: LD_VAR 0 4
24775: NOT
24776: OR
24777: IFFALSE 24781
// exit ;
24779: GO 25121
// list := [ ] ;
24781: LD_ADDR_VAR 0 13
24785: PUSH
24786: EMPTY
24787: ST_TO_ADDR
// if x - r < 0 then
24788: LD_VAR 0 2
24792: PUSH
24793: LD_VAR 0 4
24797: MINUS
24798: PUSH
24799: LD_INT 0
24801: LESS
24802: IFFALSE 24814
// min_x := 0 else
24804: LD_ADDR_VAR 0 7
24808: PUSH
24809: LD_INT 0
24811: ST_TO_ADDR
24812: GO 24830
// min_x := x - r ;
24814: LD_ADDR_VAR 0 7
24818: PUSH
24819: LD_VAR 0 2
24823: PUSH
24824: LD_VAR 0 4
24828: MINUS
24829: ST_TO_ADDR
// if y - r < 0 then
24830: LD_VAR 0 3
24834: PUSH
24835: LD_VAR 0 4
24839: MINUS
24840: PUSH
24841: LD_INT 0
24843: LESS
24844: IFFALSE 24856
// min_y := 0 else
24846: LD_ADDR_VAR 0 8
24850: PUSH
24851: LD_INT 0
24853: ST_TO_ADDR
24854: GO 24872
// min_y := y - r ;
24856: LD_ADDR_VAR 0 8
24860: PUSH
24861: LD_VAR 0 3
24865: PUSH
24866: LD_VAR 0 4
24870: MINUS
24871: ST_TO_ADDR
// max_x := x + r ;
24872: LD_ADDR_VAR 0 9
24876: PUSH
24877: LD_VAR 0 2
24881: PUSH
24882: LD_VAR 0 4
24886: PLUS
24887: ST_TO_ADDR
// max_y := y + r ;
24888: LD_ADDR_VAR 0 10
24892: PUSH
24893: LD_VAR 0 3
24897: PUSH
24898: LD_VAR 0 4
24902: PLUS
24903: ST_TO_ADDR
// for _x = min_x to max_x do
24904: LD_ADDR_VAR 0 11
24908: PUSH
24909: DOUBLE
24910: LD_VAR 0 7
24914: DEC
24915: ST_TO_ADDR
24916: LD_VAR 0 9
24920: PUSH
24921: FOR_TO
24922: IFFALSE 25039
// for _y = min_y to max_y do
24924: LD_ADDR_VAR 0 12
24928: PUSH
24929: DOUBLE
24930: LD_VAR 0 8
24934: DEC
24935: ST_TO_ADDR
24936: LD_VAR 0 10
24940: PUSH
24941: FOR_TO
24942: IFFALSE 25035
// begin if not ValidHex ( _x , _y ) then
24944: LD_VAR 0 11
24948: PPUSH
24949: LD_VAR 0 12
24953: PPUSH
24954: CALL_OW 488
24958: NOT
24959: IFFALSE 24963
// continue ;
24961: GO 24941
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24963: LD_VAR 0 11
24967: PPUSH
24968: LD_VAR 0 12
24972: PPUSH
24973: CALL_OW 351
24977: PUSH
24978: LD_VAR 0 11
24982: PPUSH
24983: LD_VAR 0 12
24987: PPUSH
24988: CALL_OW 554
24992: AND
24993: IFFALSE 25033
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24995: LD_ADDR_VAR 0 13
24999: PUSH
25000: LD_VAR 0 13
25004: PPUSH
25005: LD_VAR 0 13
25009: PUSH
25010: LD_INT 1
25012: PLUS
25013: PPUSH
25014: LD_VAR 0 11
25018: PUSH
25019: LD_VAR 0 12
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PPUSH
25028: CALL_OW 2
25032: ST_TO_ADDR
// end ;
25033: GO 24941
25035: POP
25036: POP
25037: GO 24921
25039: POP
25040: POP
// if not list then
25041: LD_VAR 0 13
25045: NOT
25046: IFFALSE 25050
// exit ;
25048: GO 25121
// for i in list do
25050: LD_ADDR_VAR 0 6
25054: PUSH
25055: LD_VAR 0 13
25059: PUSH
25060: FOR_IN
25061: IFFALSE 25119
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25063: LD_VAR 0 1
25067: PPUSH
25068: LD_STRING M
25070: PUSH
25071: LD_VAR 0 6
25075: PUSH
25076: LD_INT 1
25078: ARRAY
25079: PUSH
25080: LD_VAR 0 6
25084: PUSH
25085: LD_INT 2
25087: ARRAY
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: PPUSH
25113: CALL_OW 447
25117: GO 25060
25119: POP
25120: POP
// end ;
25121: LD_VAR 0 5
25125: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25126: LD_EXP 87
25130: NOT
25131: IFFALSE 25181
25133: GO 25135
25135: DISABLE
// begin initHack := true ;
25136: LD_ADDR_EXP 87
25140: PUSH
25141: LD_INT 1
25143: ST_TO_ADDR
// hackTanks := [ ] ;
25144: LD_ADDR_EXP 88
25148: PUSH
25149: EMPTY
25150: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25151: LD_ADDR_EXP 89
25155: PUSH
25156: EMPTY
25157: ST_TO_ADDR
// hackLimit := 3 ;
25158: LD_ADDR_EXP 90
25162: PUSH
25163: LD_INT 3
25165: ST_TO_ADDR
// hackDist := 12 ;
25166: LD_ADDR_EXP 91
25170: PUSH
25171: LD_INT 12
25173: ST_TO_ADDR
// hackCounter := [ ] ;
25174: LD_ADDR_EXP 92
25178: PUSH
25179: EMPTY
25180: ST_TO_ADDR
// end ;
25181: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25182: LD_EXP 87
25186: PUSH
25187: LD_INT 34
25189: PUSH
25190: LD_EXP 16
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PPUSH
25199: CALL_OW 69
25203: AND
25204: IFFALSE 25459
25206: GO 25208
25208: DISABLE
25209: LD_INT 0
25211: PPUSH
25212: PPUSH
// begin enable ;
25213: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25214: LD_ADDR_VAR 0 1
25218: PUSH
25219: LD_INT 34
25221: PUSH
25222: LD_EXP 16
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: PUSH
25236: FOR_IN
25237: IFFALSE 25457
// begin if not i in hackTanks then
25239: LD_VAR 0 1
25243: PUSH
25244: LD_EXP 88
25248: IN
25249: NOT
25250: IFFALSE 25333
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25252: LD_ADDR_EXP 88
25256: PUSH
25257: LD_EXP 88
25261: PPUSH
25262: LD_EXP 88
25266: PUSH
25267: LD_INT 1
25269: PLUS
25270: PPUSH
25271: LD_VAR 0 1
25275: PPUSH
25276: CALL_OW 1
25280: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25281: LD_ADDR_EXP 89
25285: PUSH
25286: LD_EXP 89
25290: PPUSH
25291: LD_EXP 89
25295: PUSH
25296: LD_INT 1
25298: PLUS
25299: PPUSH
25300: EMPTY
25301: PPUSH
25302: CALL_OW 1
25306: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25307: LD_ADDR_EXP 92
25311: PUSH
25312: LD_EXP 92
25316: PPUSH
25317: LD_EXP 92
25321: PUSH
25322: LD_INT 1
25324: PLUS
25325: PPUSH
25326: EMPTY
25327: PPUSH
25328: CALL_OW 1
25332: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25333: LD_VAR 0 1
25337: PPUSH
25338: CALL_OW 302
25342: NOT
25343: IFFALSE 25356
// begin HackUnlinkAll ( i ) ;
25345: LD_VAR 0 1
25349: PPUSH
25350: CALL 25462 0 1
// continue ;
25354: GO 25236
// end ; HackCheckCapturedStatus ( i ) ;
25356: LD_VAR 0 1
25360: PPUSH
25361: CALL 25905 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25365: LD_ADDR_VAR 0 2
25369: PUSH
25370: LD_INT 81
25372: PUSH
25373: LD_VAR 0 1
25377: PPUSH
25378: CALL_OW 255
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 33
25389: PUSH
25390: LD_INT 3
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 91
25399: PUSH
25400: LD_VAR 0 1
25404: PUSH
25405: LD_EXP 91
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 50
25417: PUSH
25418: EMPTY
25419: LIST
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: PPUSH
25427: CALL_OW 69
25431: ST_TO_ADDR
// if not tmp then
25432: LD_VAR 0 2
25436: NOT
25437: IFFALSE 25441
// continue ;
25439: GO 25236
// HackLink ( i , tmp ) ;
25441: LD_VAR 0 1
25445: PPUSH
25446: LD_VAR 0 2
25450: PPUSH
25451: CALL 25598 0 2
// end ;
25455: GO 25236
25457: POP
25458: POP
// end ;
25459: PPOPN 2
25461: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25462: LD_INT 0
25464: PPUSH
25465: PPUSH
25466: PPUSH
// if not hack in hackTanks then
25467: LD_VAR 0 1
25471: PUSH
25472: LD_EXP 88
25476: IN
25477: NOT
25478: IFFALSE 25482
// exit ;
25480: GO 25593
// index := GetElementIndex ( hackTanks , hack ) ;
25482: LD_ADDR_VAR 0 4
25486: PUSH
25487: LD_EXP 88
25491: PPUSH
25492: LD_VAR 0 1
25496: PPUSH
25497: CALL 33027 0 2
25501: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25502: LD_EXP 89
25506: PUSH
25507: LD_VAR 0 4
25511: ARRAY
25512: IFFALSE 25593
// begin for i in hackTanksCaptured [ index ] do
25514: LD_ADDR_VAR 0 3
25518: PUSH
25519: LD_EXP 89
25523: PUSH
25524: LD_VAR 0 4
25528: ARRAY
25529: PUSH
25530: FOR_IN
25531: IFFALSE 25557
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25533: LD_VAR 0 3
25537: PUSH
25538: LD_INT 1
25540: ARRAY
25541: PPUSH
25542: LD_VAR 0 3
25546: PUSH
25547: LD_INT 2
25549: ARRAY
25550: PPUSH
25551: CALL_OW 235
25555: GO 25530
25557: POP
25558: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25559: LD_ADDR_EXP 89
25563: PUSH
25564: LD_EXP 89
25568: PPUSH
25569: LD_VAR 0 4
25573: PPUSH
25574: EMPTY
25575: PPUSH
25576: CALL_OW 1
25580: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25581: LD_VAR 0 1
25585: PPUSH
25586: LD_INT 0
25588: PPUSH
25589: CALL_OW 505
// end ; end ;
25593: LD_VAR 0 2
25597: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25598: LD_INT 0
25600: PPUSH
25601: PPUSH
25602: PPUSH
// if not hack in hackTanks or not vehicles then
25603: LD_VAR 0 1
25607: PUSH
25608: LD_EXP 88
25612: IN
25613: NOT
25614: PUSH
25615: LD_VAR 0 2
25619: NOT
25620: OR
25621: IFFALSE 25625
// exit ;
25623: GO 25900
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25625: LD_ADDR_VAR 0 2
25629: PUSH
25630: LD_VAR 0 1
25634: PPUSH
25635: LD_VAR 0 2
25639: PPUSH
25640: LD_INT 1
25642: PPUSH
25643: LD_INT 1
25645: PPUSH
25646: CALL 33677 0 4
25650: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25651: LD_ADDR_VAR 0 5
25655: PUSH
25656: LD_EXP 88
25660: PPUSH
25661: LD_VAR 0 1
25665: PPUSH
25666: CALL 33027 0 2
25670: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25671: LD_EXP 89
25675: PUSH
25676: LD_VAR 0 5
25680: ARRAY
25681: PUSH
25682: LD_EXP 90
25686: LESS
25687: IFFALSE 25876
// begin for i := 1 to vehicles do
25689: LD_ADDR_VAR 0 4
25693: PUSH
25694: DOUBLE
25695: LD_INT 1
25697: DEC
25698: ST_TO_ADDR
25699: LD_VAR 0 2
25703: PUSH
25704: FOR_TO
25705: IFFALSE 25874
// begin if hackTanksCaptured [ index ] = hackLimit then
25707: LD_EXP 89
25711: PUSH
25712: LD_VAR 0 5
25716: ARRAY
25717: PUSH
25718: LD_EXP 90
25722: EQUAL
25723: IFFALSE 25727
// break ;
25725: GO 25874
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25727: LD_ADDR_EXP 92
25731: PUSH
25732: LD_EXP 92
25736: PPUSH
25737: LD_VAR 0 5
25741: PPUSH
25742: LD_EXP 92
25746: PUSH
25747: LD_VAR 0 5
25751: ARRAY
25752: PUSH
25753: LD_INT 1
25755: PLUS
25756: PPUSH
25757: CALL_OW 1
25761: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25762: LD_ADDR_EXP 89
25766: PUSH
25767: LD_EXP 89
25771: PPUSH
25772: LD_VAR 0 5
25776: PUSH
25777: LD_EXP 89
25781: PUSH
25782: LD_VAR 0 5
25786: ARRAY
25787: PUSH
25788: LD_INT 1
25790: PLUS
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PPUSH
25796: LD_VAR 0 2
25800: PUSH
25801: LD_VAR 0 4
25805: ARRAY
25806: PUSH
25807: LD_VAR 0 2
25811: PUSH
25812: LD_VAR 0 4
25816: ARRAY
25817: PPUSH
25818: CALL_OW 255
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PPUSH
25827: CALL 33242 0 3
25831: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25832: LD_VAR 0 2
25836: PUSH
25837: LD_VAR 0 4
25841: ARRAY
25842: PPUSH
25843: LD_VAR 0 1
25847: PPUSH
25848: CALL_OW 255
25852: PPUSH
25853: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25857: LD_VAR 0 2
25861: PUSH
25862: LD_VAR 0 4
25866: ARRAY
25867: PPUSH
25868: CALL_OW 141
// end ;
25872: GO 25704
25874: POP
25875: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25876: LD_VAR 0 1
25880: PPUSH
25881: LD_EXP 89
25885: PUSH
25886: LD_VAR 0 5
25890: ARRAY
25891: PUSH
25892: LD_INT 0
25894: PLUS
25895: PPUSH
25896: CALL_OW 505
// end ;
25900: LD_VAR 0 3
25904: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25905: LD_INT 0
25907: PPUSH
25908: PPUSH
25909: PPUSH
25910: PPUSH
// if not hack in hackTanks then
25911: LD_VAR 0 1
25915: PUSH
25916: LD_EXP 88
25920: IN
25921: NOT
25922: IFFALSE 25926
// exit ;
25924: GO 26166
// index := GetElementIndex ( hackTanks , hack ) ;
25926: LD_ADDR_VAR 0 4
25930: PUSH
25931: LD_EXP 88
25935: PPUSH
25936: LD_VAR 0 1
25940: PPUSH
25941: CALL 33027 0 2
25945: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25946: LD_ADDR_VAR 0 3
25950: PUSH
25951: DOUBLE
25952: LD_EXP 89
25956: PUSH
25957: LD_VAR 0 4
25961: ARRAY
25962: INC
25963: ST_TO_ADDR
25964: LD_INT 1
25966: PUSH
25967: FOR_DOWNTO
25968: IFFALSE 26140
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25970: LD_ADDR_VAR 0 5
25974: PUSH
25975: LD_EXP 89
25979: PUSH
25980: LD_VAR 0 4
25984: ARRAY
25985: PUSH
25986: LD_VAR 0 3
25990: ARRAY
25991: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25992: LD_VAR 0 5
25996: PUSH
25997: LD_INT 1
25999: ARRAY
26000: PPUSH
26001: CALL_OW 302
26005: NOT
26006: PUSH
26007: LD_VAR 0 5
26011: PUSH
26012: LD_INT 1
26014: ARRAY
26015: PPUSH
26016: CALL_OW 255
26020: PUSH
26021: LD_VAR 0 1
26025: PPUSH
26026: CALL_OW 255
26030: NONEQUAL
26031: OR
26032: IFFALSE 26138
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26034: LD_VAR 0 5
26038: PUSH
26039: LD_INT 1
26041: ARRAY
26042: PPUSH
26043: CALL_OW 305
26047: PUSH
26048: LD_VAR 0 5
26052: PUSH
26053: LD_INT 1
26055: ARRAY
26056: PPUSH
26057: CALL_OW 255
26061: PUSH
26062: LD_VAR 0 1
26066: PPUSH
26067: CALL_OW 255
26071: EQUAL
26072: AND
26073: IFFALSE 26097
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26075: LD_VAR 0 5
26079: PUSH
26080: LD_INT 1
26082: ARRAY
26083: PPUSH
26084: LD_VAR 0 5
26088: PUSH
26089: LD_INT 2
26091: ARRAY
26092: PPUSH
26093: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26097: LD_ADDR_EXP 89
26101: PUSH
26102: LD_EXP 89
26106: PPUSH
26107: LD_VAR 0 4
26111: PPUSH
26112: LD_EXP 89
26116: PUSH
26117: LD_VAR 0 4
26121: ARRAY
26122: PPUSH
26123: LD_VAR 0 3
26127: PPUSH
26128: CALL_OW 3
26132: PPUSH
26133: CALL_OW 1
26137: ST_TO_ADDR
// end ; end ;
26138: GO 25967
26140: POP
26141: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26142: LD_VAR 0 1
26146: PPUSH
26147: LD_EXP 89
26151: PUSH
26152: LD_VAR 0 4
26156: ARRAY
26157: PUSH
26158: LD_INT 0
26160: PLUS
26161: PPUSH
26162: CALL_OW 505
// end ;
26166: LD_VAR 0 2
26170: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26171: LD_INT 0
26173: PPUSH
26174: PPUSH
26175: PPUSH
26176: PPUSH
// if not hack in hackTanks then
26177: LD_VAR 0 1
26181: PUSH
26182: LD_EXP 88
26186: IN
26187: NOT
26188: IFFALSE 26192
// exit ;
26190: GO 26277
// index := GetElementIndex ( hackTanks , hack ) ;
26192: LD_ADDR_VAR 0 5
26196: PUSH
26197: LD_EXP 88
26201: PPUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL 33027 0 2
26211: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26212: LD_ADDR_VAR 0 4
26216: PUSH
26217: DOUBLE
26218: LD_INT 1
26220: DEC
26221: ST_TO_ADDR
26222: LD_EXP 89
26226: PUSH
26227: LD_VAR 0 5
26231: ARRAY
26232: PUSH
26233: FOR_TO
26234: IFFALSE 26275
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26236: LD_EXP 89
26240: PUSH
26241: LD_VAR 0 5
26245: ARRAY
26246: PUSH
26247: LD_VAR 0 4
26251: ARRAY
26252: PUSH
26253: LD_INT 1
26255: ARRAY
26256: PUSH
26257: LD_VAR 0 2
26261: EQUAL
26262: IFFALSE 26273
// KillUnit ( vehicle ) ;
26264: LD_VAR 0 2
26268: PPUSH
26269: CALL_OW 66
26273: GO 26233
26275: POP
26276: POP
// end ;
26277: LD_VAR 0 3
26281: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26282: LD_EXP 93
26286: NOT
26287: IFFALSE 26322
26289: GO 26291
26291: DISABLE
// begin initMiner := true ;
26292: LD_ADDR_EXP 93
26296: PUSH
26297: LD_INT 1
26299: ST_TO_ADDR
// minersList := [ ] ;
26300: LD_ADDR_EXP 94
26304: PUSH
26305: EMPTY
26306: ST_TO_ADDR
// minerMinesList := [ ] ;
26307: LD_ADDR_EXP 95
26311: PUSH
26312: EMPTY
26313: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26314: LD_ADDR_EXP 96
26318: PUSH
26319: LD_INT 5
26321: ST_TO_ADDR
// end ;
26322: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26323: LD_EXP 93
26327: PUSH
26328: LD_INT 34
26330: PUSH
26331: LD_EXP 21
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PPUSH
26340: CALL_OW 69
26344: AND
26345: IFFALSE 26808
26347: GO 26349
26349: DISABLE
26350: LD_INT 0
26352: PPUSH
26353: PPUSH
26354: PPUSH
26355: PPUSH
// begin enable ;
26356: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26357: LD_ADDR_VAR 0 1
26361: PUSH
26362: LD_INT 34
26364: PUSH
26365: LD_EXP 21
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PPUSH
26374: CALL_OW 69
26378: PUSH
26379: FOR_IN
26380: IFFALSE 26452
// begin if not i in minersList then
26382: LD_VAR 0 1
26386: PUSH
26387: LD_EXP 94
26391: IN
26392: NOT
26393: IFFALSE 26450
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26395: LD_ADDR_EXP 94
26399: PUSH
26400: LD_EXP 94
26404: PPUSH
26405: LD_EXP 94
26409: PUSH
26410: LD_INT 1
26412: PLUS
26413: PPUSH
26414: LD_VAR 0 1
26418: PPUSH
26419: CALL_OW 1
26423: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26424: LD_ADDR_EXP 95
26428: PUSH
26429: LD_EXP 95
26433: PPUSH
26434: LD_EXP 95
26438: PUSH
26439: LD_INT 1
26441: PLUS
26442: PPUSH
26443: EMPTY
26444: PPUSH
26445: CALL_OW 1
26449: ST_TO_ADDR
// end end ;
26450: GO 26379
26452: POP
26453: POP
// for i := minerMinesList downto 1 do
26454: LD_ADDR_VAR 0 1
26458: PUSH
26459: DOUBLE
26460: LD_EXP 95
26464: INC
26465: ST_TO_ADDR
26466: LD_INT 1
26468: PUSH
26469: FOR_DOWNTO
26470: IFFALSE 26806
// begin if IsLive ( minersList [ i ] ) then
26472: LD_EXP 94
26476: PUSH
26477: LD_VAR 0 1
26481: ARRAY
26482: PPUSH
26483: CALL_OW 300
26487: IFFALSE 26515
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26489: LD_EXP 94
26493: PUSH
26494: LD_VAR 0 1
26498: ARRAY
26499: PPUSH
26500: LD_EXP 95
26504: PUSH
26505: LD_VAR 0 1
26509: ARRAY
26510: PPUSH
26511: CALL_OW 505
// if not minerMinesList [ i ] then
26515: LD_EXP 95
26519: PUSH
26520: LD_VAR 0 1
26524: ARRAY
26525: NOT
26526: IFFALSE 26530
// continue ;
26528: GO 26469
// for j := minerMinesList [ i ] downto 1 do
26530: LD_ADDR_VAR 0 2
26534: PUSH
26535: DOUBLE
26536: LD_EXP 95
26540: PUSH
26541: LD_VAR 0 1
26545: ARRAY
26546: INC
26547: ST_TO_ADDR
26548: LD_INT 1
26550: PUSH
26551: FOR_DOWNTO
26552: IFFALSE 26802
// begin side := GetSide ( minersList [ i ] ) ;
26554: LD_ADDR_VAR 0 3
26558: PUSH
26559: LD_EXP 94
26563: PUSH
26564: LD_VAR 0 1
26568: ARRAY
26569: PPUSH
26570: CALL_OW 255
26574: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26575: LD_ADDR_VAR 0 4
26579: PUSH
26580: LD_EXP 95
26584: PUSH
26585: LD_VAR 0 1
26589: ARRAY
26590: PUSH
26591: LD_VAR 0 2
26595: ARRAY
26596: PUSH
26597: LD_INT 1
26599: ARRAY
26600: PPUSH
26601: LD_EXP 95
26605: PUSH
26606: LD_VAR 0 1
26610: ARRAY
26611: PUSH
26612: LD_VAR 0 2
26616: ARRAY
26617: PUSH
26618: LD_INT 2
26620: ARRAY
26621: PPUSH
26622: CALL_OW 428
26626: ST_TO_ADDR
// if not tmp then
26627: LD_VAR 0 4
26631: NOT
26632: IFFALSE 26636
// continue ;
26634: GO 26551
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26636: LD_VAR 0 4
26640: PUSH
26641: LD_INT 81
26643: PUSH
26644: LD_VAR 0 3
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PPUSH
26653: CALL_OW 69
26657: IN
26658: PUSH
26659: LD_EXP 95
26663: PUSH
26664: LD_VAR 0 1
26668: ARRAY
26669: PUSH
26670: LD_VAR 0 2
26674: ARRAY
26675: PUSH
26676: LD_INT 1
26678: ARRAY
26679: PPUSH
26680: LD_EXP 95
26684: PUSH
26685: LD_VAR 0 1
26689: ARRAY
26690: PUSH
26691: LD_VAR 0 2
26695: ARRAY
26696: PUSH
26697: LD_INT 2
26699: ARRAY
26700: PPUSH
26701: CALL_OW 458
26705: AND
26706: IFFALSE 26800
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26708: LD_EXP 95
26712: PUSH
26713: LD_VAR 0 1
26717: ARRAY
26718: PUSH
26719: LD_VAR 0 2
26723: ARRAY
26724: PUSH
26725: LD_INT 1
26727: ARRAY
26728: PPUSH
26729: LD_EXP 95
26733: PUSH
26734: LD_VAR 0 1
26738: ARRAY
26739: PUSH
26740: LD_VAR 0 2
26744: ARRAY
26745: PUSH
26746: LD_INT 2
26748: ARRAY
26749: PPUSH
26750: LD_VAR 0 3
26754: PPUSH
26755: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26759: LD_ADDR_EXP 95
26763: PUSH
26764: LD_EXP 95
26768: PPUSH
26769: LD_VAR 0 1
26773: PPUSH
26774: LD_EXP 95
26778: PUSH
26779: LD_VAR 0 1
26783: ARRAY
26784: PPUSH
26785: LD_VAR 0 2
26789: PPUSH
26790: CALL_OW 3
26794: PPUSH
26795: CALL_OW 1
26799: ST_TO_ADDR
// end ; end ;
26800: GO 26551
26802: POP
26803: POP
// end ;
26804: GO 26469
26806: POP
26807: POP
// end ;
26808: PPOPN 4
26810: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26811: LD_INT 0
26813: PPUSH
26814: PPUSH
// result := false ;
26815: LD_ADDR_VAR 0 4
26819: PUSH
26820: LD_INT 0
26822: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26823: LD_VAR 0 1
26827: PPUSH
26828: CALL_OW 264
26832: PUSH
26833: LD_EXP 21
26837: EQUAL
26838: NOT
26839: IFFALSE 26843
// exit ;
26841: GO 27083
// index := GetElementIndex ( minersList , unit ) ;
26843: LD_ADDR_VAR 0 5
26847: PUSH
26848: LD_EXP 94
26852: PPUSH
26853: LD_VAR 0 1
26857: PPUSH
26858: CALL 33027 0 2
26862: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26863: LD_EXP 95
26867: PUSH
26868: LD_VAR 0 5
26872: ARRAY
26873: PUSH
26874: LD_EXP 96
26878: GREATEREQUAL
26879: IFFALSE 26883
// exit ;
26881: GO 27083
// ComMoveXY ( unit , x , y ) ;
26883: LD_VAR 0 1
26887: PPUSH
26888: LD_VAR 0 2
26892: PPUSH
26893: LD_VAR 0 3
26897: PPUSH
26898: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26902: LD_INT 35
26904: PPUSH
26905: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26909: LD_VAR 0 1
26913: PPUSH
26914: LD_VAR 0 2
26918: PPUSH
26919: LD_VAR 0 3
26923: PPUSH
26924: CALL 63424 0 3
26928: NOT
26929: PUSH
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL_OW 314
26939: AND
26940: IFFALSE 26944
// exit ;
26942: GO 27083
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26944: LD_VAR 0 2
26948: PPUSH
26949: LD_VAR 0 3
26953: PPUSH
26954: CALL_OW 428
26958: PUSH
26959: LD_VAR 0 1
26963: EQUAL
26964: PUSH
26965: LD_VAR 0 1
26969: PPUSH
26970: CALL_OW 314
26974: NOT
26975: AND
26976: IFFALSE 26902
// PlaySoundXY ( x , y , PlantMine ) ;
26978: LD_VAR 0 2
26982: PPUSH
26983: LD_VAR 0 3
26987: PPUSH
26988: LD_STRING PlantMine
26990: PPUSH
26991: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26995: LD_VAR 0 2
26999: PPUSH
27000: LD_VAR 0 3
27004: PPUSH
27005: LD_VAR 0 1
27009: PPUSH
27010: CALL_OW 255
27014: PPUSH
27015: LD_INT 0
27017: PPUSH
27018: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27022: LD_ADDR_EXP 95
27026: PUSH
27027: LD_EXP 95
27031: PPUSH
27032: LD_VAR 0 5
27036: PUSH
27037: LD_EXP 95
27041: PUSH
27042: LD_VAR 0 5
27046: ARRAY
27047: PUSH
27048: LD_INT 1
27050: PLUS
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PPUSH
27056: LD_VAR 0 2
27060: PUSH
27061: LD_VAR 0 3
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PPUSH
27070: CALL 33242 0 3
27074: ST_TO_ADDR
// result := true ;
27075: LD_ADDR_VAR 0 4
27079: PUSH
27080: LD_INT 1
27082: ST_TO_ADDR
// end ;
27083: LD_VAR 0 4
27087: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27088: LD_INT 0
27090: PPUSH
27091: PPUSH
27092: PPUSH
// if not unit in minersList then
27093: LD_VAR 0 1
27097: PUSH
27098: LD_EXP 94
27102: IN
27103: NOT
27104: IFFALSE 27108
// exit ;
27106: GO 27500
// index := GetElementIndex ( minersList , unit ) ;
27108: LD_ADDR_VAR 0 6
27112: PUSH
27113: LD_EXP 94
27117: PPUSH
27118: LD_VAR 0 1
27122: PPUSH
27123: CALL 33027 0 2
27127: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27128: LD_ADDR_VAR 0 5
27132: PUSH
27133: DOUBLE
27134: LD_EXP 95
27138: PUSH
27139: LD_VAR 0 6
27143: ARRAY
27144: INC
27145: ST_TO_ADDR
27146: LD_INT 1
27148: PUSH
27149: FOR_DOWNTO
27150: IFFALSE 27311
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27152: LD_EXP 95
27156: PUSH
27157: LD_VAR 0 6
27161: ARRAY
27162: PUSH
27163: LD_VAR 0 5
27167: ARRAY
27168: PUSH
27169: LD_INT 1
27171: ARRAY
27172: PUSH
27173: LD_VAR 0 2
27177: EQUAL
27178: PUSH
27179: LD_EXP 95
27183: PUSH
27184: LD_VAR 0 6
27188: ARRAY
27189: PUSH
27190: LD_VAR 0 5
27194: ARRAY
27195: PUSH
27196: LD_INT 2
27198: ARRAY
27199: PUSH
27200: LD_VAR 0 3
27204: EQUAL
27205: AND
27206: IFFALSE 27309
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27208: LD_EXP 95
27212: PUSH
27213: LD_VAR 0 6
27217: ARRAY
27218: PUSH
27219: LD_VAR 0 5
27223: ARRAY
27224: PUSH
27225: LD_INT 1
27227: ARRAY
27228: PPUSH
27229: LD_EXP 95
27233: PUSH
27234: LD_VAR 0 6
27238: ARRAY
27239: PUSH
27240: LD_VAR 0 5
27244: ARRAY
27245: PUSH
27246: LD_INT 2
27248: ARRAY
27249: PPUSH
27250: LD_VAR 0 1
27254: PPUSH
27255: CALL_OW 255
27259: PPUSH
27260: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27264: LD_ADDR_EXP 95
27268: PUSH
27269: LD_EXP 95
27273: PPUSH
27274: LD_VAR 0 6
27278: PPUSH
27279: LD_EXP 95
27283: PUSH
27284: LD_VAR 0 6
27288: ARRAY
27289: PPUSH
27290: LD_VAR 0 5
27294: PPUSH
27295: CALL_OW 3
27299: PPUSH
27300: CALL_OW 1
27304: ST_TO_ADDR
// exit ;
27305: POP
27306: POP
27307: GO 27500
// end ; end ;
27309: GO 27149
27311: POP
27312: POP
// for i := minerMinesList [ index ] downto 1 do
27313: LD_ADDR_VAR 0 5
27317: PUSH
27318: DOUBLE
27319: LD_EXP 95
27323: PUSH
27324: LD_VAR 0 6
27328: ARRAY
27329: INC
27330: ST_TO_ADDR
27331: LD_INT 1
27333: PUSH
27334: FOR_DOWNTO
27335: IFFALSE 27498
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27337: LD_EXP 95
27341: PUSH
27342: LD_VAR 0 6
27346: ARRAY
27347: PUSH
27348: LD_VAR 0 5
27352: ARRAY
27353: PUSH
27354: LD_INT 1
27356: ARRAY
27357: PPUSH
27358: LD_EXP 95
27362: PUSH
27363: LD_VAR 0 6
27367: ARRAY
27368: PUSH
27369: LD_VAR 0 5
27373: ARRAY
27374: PUSH
27375: LD_INT 2
27377: ARRAY
27378: PPUSH
27379: LD_VAR 0 2
27383: PPUSH
27384: LD_VAR 0 3
27388: PPUSH
27389: CALL_OW 298
27393: PUSH
27394: LD_INT 6
27396: LESS
27397: IFFALSE 27496
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27399: LD_EXP 95
27403: PUSH
27404: LD_VAR 0 6
27408: ARRAY
27409: PUSH
27410: LD_VAR 0 5
27414: ARRAY
27415: PUSH
27416: LD_INT 1
27418: ARRAY
27419: PPUSH
27420: LD_EXP 95
27424: PUSH
27425: LD_VAR 0 6
27429: ARRAY
27430: PUSH
27431: LD_VAR 0 5
27435: ARRAY
27436: PUSH
27437: LD_INT 2
27439: ARRAY
27440: PPUSH
27441: LD_VAR 0 1
27445: PPUSH
27446: CALL_OW 255
27450: PPUSH
27451: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27455: LD_ADDR_EXP 95
27459: PUSH
27460: LD_EXP 95
27464: PPUSH
27465: LD_VAR 0 6
27469: PPUSH
27470: LD_EXP 95
27474: PUSH
27475: LD_VAR 0 6
27479: ARRAY
27480: PPUSH
27481: LD_VAR 0 5
27485: PPUSH
27486: CALL_OW 3
27490: PPUSH
27491: CALL_OW 1
27495: ST_TO_ADDR
// end ; end ;
27496: GO 27334
27498: POP
27499: POP
// end ;
27500: LD_VAR 0 4
27504: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27505: LD_INT 0
27507: PPUSH
27508: PPUSH
27509: PPUSH
27510: PPUSH
27511: PPUSH
27512: PPUSH
27513: PPUSH
27514: PPUSH
27515: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27516: LD_VAR 0 1
27520: PPUSH
27521: CALL_OW 264
27525: PUSH
27526: LD_EXP 21
27530: EQUAL
27531: NOT
27532: PUSH
27533: LD_VAR 0 1
27537: PUSH
27538: LD_EXP 94
27542: IN
27543: NOT
27544: OR
27545: IFFALSE 27549
// exit ;
27547: GO 27871
// index := GetElementIndex ( minersList , unit ) ;
27549: LD_ADDR_VAR 0 6
27553: PUSH
27554: LD_EXP 94
27558: PPUSH
27559: LD_VAR 0 1
27563: PPUSH
27564: CALL 33027 0 2
27568: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27569: LD_ADDR_VAR 0 8
27573: PUSH
27574: LD_EXP 96
27578: PUSH
27579: LD_EXP 95
27583: PUSH
27584: LD_VAR 0 6
27588: ARRAY
27589: MINUS
27590: ST_TO_ADDR
// if not minesFreeAmount then
27591: LD_VAR 0 8
27595: NOT
27596: IFFALSE 27600
// exit ;
27598: GO 27871
// tmp := [ ] ;
27600: LD_ADDR_VAR 0 7
27604: PUSH
27605: EMPTY
27606: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27607: LD_ADDR_VAR 0 5
27611: PUSH
27612: DOUBLE
27613: LD_INT 1
27615: DEC
27616: ST_TO_ADDR
27617: LD_VAR 0 8
27621: PUSH
27622: FOR_TO
27623: IFFALSE 27818
// begin _d := rand ( 0 , 5 ) ;
27625: LD_ADDR_VAR 0 11
27629: PUSH
27630: LD_INT 0
27632: PPUSH
27633: LD_INT 5
27635: PPUSH
27636: CALL_OW 12
27640: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27641: LD_ADDR_VAR 0 12
27645: PUSH
27646: LD_INT 2
27648: PPUSH
27649: LD_INT 6
27651: PPUSH
27652: CALL_OW 12
27656: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27657: LD_ADDR_VAR 0 9
27661: PUSH
27662: LD_VAR 0 2
27666: PPUSH
27667: LD_VAR 0 11
27671: PPUSH
27672: LD_VAR 0 12
27676: PPUSH
27677: CALL_OW 272
27681: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27682: LD_ADDR_VAR 0 10
27686: PUSH
27687: LD_VAR 0 3
27691: PPUSH
27692: LD_VAR 0 11
27696: PPUSH
27697: LD_VAR 0 12
27701: PPUSH
27702: CALL_OW 273
27706: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27707: LD_VAR 0 9
27711: PPUSH
27712: LD_VAR 0 10
27716: PPUSH
27717: CALL_OW 488
27721: PUSH
27722: LD_VAR 0 9
27726: PUSH
27727: LD_VAR 0 10
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_VAR 0 7
27740: IN
27741: NOT
27742: AND
27743: PUSH
27744: LD_VAR 0 9
27748: PPUSH
27749: LD_VAR 0 10
27753: PPUSH
27754: CALL_OW 458
27758: NOT
27759: AND
27760: IFFALSE 27802
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27762: LD_ADDR_VAR 0 7
27766: PUSH
27767: LD_VAR 0 7
27771: PPUSH
27772: LD_VAR 0 7
27776: PUSH
27777: LD_INT 1
27779: PLUS
27780: PPUSH
27781: LD_VAR 0 9
27785: PUSH
27786: LD_VAR 0 10
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PPUSH
27795: CALL_OW 1
27799: ST_TO_ADDR
27800: GO 27816
// i := i - 1 ;
27802: LD_ADDR_VAR 0 5
27806: PUSH
27807: LD_VAR 0 5
27811: PUSH
27812: LD_INT 1
27814: MINUS
27815: ST_TO_ADDR
// end ;
27816: GO 27622
27818: POP
27819: POP
// for i in tmp do
27820: LD_ADDR_VAR 0 5
27824: PUSH
27825: LD_VAR 0 7
27829: PUSH
27830: FOR_IN
27831: IFFALSE 27869
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27833: LD_VAR 0 1
27837: PPUSH
27838: LD_VAR 0 5
27842: PUSH
27843: LD_INT 1
27845: ARRAY
27846: PPUSH
27847: LD_VAR 0 5
27851: PUSH
27852: LD_INT 2
27854: ARRAY
27855: PPUSH
27856: CALL 26811 0 3
27860: NOT
27861: IFFALSE 27867
// exit ;
27863: POP
27864: POP
27865: GO 27871
27867: GO 27830
27869: POP
27870: POP
// end ;
27871: LD_VAR 0 4
27875: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27876: LD_INT 0
27878: PPUSH
27879: PPUSH
27880: PPUSH
27881: PPUSH
27882: PPUSH
27883: PPUSH
27884: PPUSH
// if not GetClass ( unit ) = class_sniper then
27885: LD_VAR 0 1
27889: PPUSH
27890: CALL_OW 257
27894: PUSH
27895: LD_INT 5
27897: EQUAL
27898: NOT
27899: IFFALSE 27903
// exit ;
27901: GO 28291
// dist := 8 ;
27903: LD_ADDR_VAR 0 5
27907: PUSH
27908: LD_INT 8
27910: ST_TO_ADDR
// viewRange := 12 ;
27911: LD_ADDR_VAR 0 7
27915: PUSH
27916: LD_INT 12
27918: ST_TO_ADDR
// side := GetSide ( unit ) ;
27919: LD_ADDR_VAR 0 6
27923: PUSH
27924: LD_VAR 0 1
27928: PPUSH
27929: CALL_OW 255
27933: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27934: LD_INT 61
27936: PPUSH
27937: LD_VAR 0 6
27941: PPUSH
27942: CALL_OW 321
27946: PUSH
27947: LD_INT 2
27949: EQUAL
27950: IFFALSE 27960
// viewRange := 16 ;
27952: LD_ADDR_VAR 0 7
27956: PUSH
27957: LD_INT 16
27959: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27960: LD_VAR 0 1
27964: PPUSH
27965: LD_VAR 0 2
27969: PPUSH
27970: LD_VAR 0 3
27974: PPUSH
27975: CALL_OW 297
27979: PUSH
27980: LD_VAR 0 5
27984: GREATER
27985: IFFALSE 28064
// begin ComMoveXY ( unit , x , y ) ;
27987: LD_VAR 0 1
27991: PPUSH
27992: LD_VAR 0 2
27996: PPUSH
27997: LD_VAR 0 3
28001: PPUSH
28002: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28006: LD_INT 35
28008: PPUSH
28009: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28013: LD_VAR 0 1
28017: PPUSH
28018: LD_VAR 0 2
28022: PPUSH
28023: LD_VAR 0 3
28027: PPUSH
28028: CALL 63424 0 3
28032: NOT
28033: IFFALSE 28037
// exit ;
28035: GO 28291
// until GetDistUnitXY ( unit , x , y ) < dist ;
28037: LD_VAR 0 1
28041: PPUSH
28042: LD_VAR 0 2
28046: PPUSH
28047: LD_VAR 0 3
28051: PPUSH
28052: CALL_OW 297
28056: PUSH
28057: LD_VAR 0 5
28061: LESS
28062: IFFALSE 28006
// end ; ComTurnXY ( unit , x , y ) ;
28064: LD_VAR 0 1
28068: PPUSH
28069: LD_VAR 0 2
28073: PPUSH
28074: LD_VAR 0 3
28078: PPUSH
28079: CALL_OW 118
// wait ( 5 ) ;
28083: LD_INT 5
28085: PPUSH
28086: CALL_OW 67
// _d := GetDir ( unit ) ;
28090: LD_ADDR_VAR 0 10
28094: PUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL_OW 254
28104: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28105: LD_ADDR_VAR 0 8
28109: PUSH
28110: LD_VAR 0 1
28114: PPUSH
28115: CALL_OW 250
28119: PPUSH
28120: LD_VAR 0 10
28124: PPUSH
28125: LD_VAR 0 5
28129: PPUSH
28130: CALL_OW 272
28134: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28135: LD_ADDR_VAR 0 9
28139: PUSH
28140: LD_VAR 0 1
28144: PPUSH
28145: CALL_OW 251
28149: PPUSH
28150: LD_VAR 0 10
28154: PPUSH
28155: LD_VAR 0 5
28159: PPUSH
28160: CALL_OW 273
28164: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28165: LD_VAR 0 8
28169: PPUSH
28170: LD_VAR 0 9
28174: PPUSH
28175: CALL_OW 488
28179: NOT
28180: IFFALSE 28184
// exit ;
28182: GO 28291
// ComAnimCustom ( unit , 1 ) ;
28184: LD_VAR 0 1
28188: PPUSH
28189: LD_INT 1
28191: PPUSH
28192: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28196: LD_VAR 0 8
28200: PPUSH
28201: LD_VAR 0 9
28205: PPUSH
28206: LD_VAR 0 6
28210: PPUSH
28211: LD_VAR 0 7
28215: PPUSH
28216: CALL_OW 330
// repeat wait ( 1 ) ;
28220: LD_INT 1
28222: PPUSH
28223: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28227: LD_VAR 0 1
28231: PPUSH
28232: CALL_OW 316
28236: PUSH
28237: LD_VAR 0 1
28241: PPUSH
28242: CALL_OW 314
28246: OR
28247: PUSH
28248: LD_VAR 0 1
28252: PPUSH
28253: CALL_OW 302
28257: NOT
28258: OR
28259: PUSH
28260: LD_VAR 0 1
28264: PPUSH
28265: CALL_OW 301
28269: OR
28270: IFFALSE 28220
// RemoveSeeing ( _x , _y , side ) ;
28272: LD_VAR 0 8
28276: PPUSH
28277: LD_VAR 0 9
28281: PPUSH
28282: LD_VAR 0 6
28286: PPUSH
28287: CALL_OW 331
// end ; end_of_file
28291: LD_VAR 0 4
28295: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28296: LD_INT 0
28298: PPUSH
28299: PPUSH
// if exist_mode then
28300: LD_VAR 0 2
28304: IFFALSE 28329
// unit := CreateCharacter ( prefix & ident ) else
28306: LD_ADDR_VAR 0 5
28310: PUSH
28311: LD_VAR 0 3
28315: PUSH
28316: LD_VAR 0 1
28320: STR
28321: PPUSH
28322: CALL_OW 34
28326: ST_TO_ADDR
28327: GO 28344
// unit := NewCharacter ( ident ) ;
28329: LD_ADDR_VAR 0 5
28333: PUSH
28334: LD_VAR 0 1
28338: PPUSH
28339: CALL_OW 25
28343: ST_TO_ADDR
// result := unit ;
28344: LD_ADDR_VAR 0 4
28348: PUSH
28349: LD_VAR 0 5
28353: ST_TO_ADDR
// end ;
28354: LD_VAR 0 4
28358: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28359: LD_INT 0
28361: PPUSH
28362: PPUSH
// if not side or not nation then
28363: LD_VAR 0 1
28367: NOT
28368: PUSH
28369: LD_VAR 0 2
28373: NOT
28374: OR
28375: IFFALSE 28379
// exit ;
28377: GO 29143
// case nation of nation_american :
28379: LD_VAR 0 2
28383: PUSH
28384: LD_INT 1
28386: DOUBLE
28387: EQUAL
28388: IFTRUE 28392
28390: GO 28606
28392: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28393: LD_ADDR_VAR 0 4
28397: PUSH
28398: LD_INT 35
28400: PUSH
28401: LD_INT 45
28403: PUSH
28404: LD_INT 46
28406: PUSH
28407: LD_INT 47
28409: PUSH
28410: LD_INT 82
28412: PUSH
28413: LD_INT 83
28415: PUSH
28416: LD_INT 84
28418: PUSH
28419: LD_INT 85
28421: PUSH
28422: LD_INT 86
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: LD_INT 2
28430: PUSH
28431: LD_INT 6
28433: PUSH
28434: LD_INT 15
28436: PUSH
28437: LD_INT 16
28439: PUSH
28440: LD_INT 7
28442: PUSH
28443: LD_INT 12
28445: PUSH
28446: LD_INT 13
28448: PUSH
28449: LD_INT 10
28451: PUSH
28452: LD_INT 14
28454: PUSH
28455: LD_INT 20
28457: PUSH
28458: LD_INT 21
28460: PUSH
28461: LD_INT 22
28463: PUSH
28464: LD_INT 25
28466: PUSH
28467: LD_INT 32
28469: PUSH
28470: LD_INT 27
28472: PUSH
28473: LD_INT 36
28475: PUSH
28476: LD_INT 69
28478: PUSH
28479: LD_INT 39
28481: PUSH
28482: LD_INT 34
28484: PUSH
28485: LD_INT 40
28487: PUSH
28488: LD_INT 48
28490: PUSH
28491: LD_INT 49
28493: PUSH
28494: LD_INT 50
28496: PUSH
28497: LD_INT 51
28499: PUSH
28500: LD_INT 52
28502: PUSH
28503: LD_INT 53
28505: PUSH
28506: LD_INT 54
28508: PUSH
28509: LD_INT 55
28511: PUSH
28512: LD_INT 56
28514: PUSH
28515: LD_INT 57
28517: PUSH
28518: LD_INT 58
28520: PUSH
28521: LD_INT 59
28523: PUSH
28524: LD_INT 60
28526: PUSH
28527: LD_INT 61
28529: PUSH
28530: LD_INT 62
28532: PUSH
28533: LD_INT 80
28535: PUSH
28536: LD_INT 82
28538: PUSH
28539: LD_INT 83
28541: PUSH
28542: LD_INT 84
28544: PUSH
28545: LD_INT 85
28547: PUSH
28548: LD_INT 86
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: ST_TO_ADDR
28604: GO 29067
28606: LD_INT 2
28608: DOUBLE
28609: EQUAL
28610: IFTRUE 28614
28612: GO 28836
28614: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28615: LD_ADDR_VAR 0 4
28619: PUSH
28620: LD_INT 35
28622: PUSH
28623: LD_INT 45
28625: PUSH
28626: LD_INT 46
28628: PUSH
28629: LD_INT 47
28631: PUSH
28632: LD_INT 82
28634: PUSH
28635: LD_INT 83
28637: PUSH
28638: LD_INT 84
28640: PUSH
28641: LD_INT 85
28643: PUSH
28644: LD_INT 87
28646: PUSH
28647: LD_INT 70
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 11
28655: PUSH
28656: LD_INT 3
28658: PUSH
28659: LD_INT 4
28661: PUSH
28662: LD_INT 5
28664: PUSH
28665: LD_INT 6
28667: PUSH
28668: LD_INT 15
28670: PUSH
28671: LD_INT 18
28673: PUSH
28674: LD_INT 7
28676: PUSH
28677: LD_INT 17
28679: PUSH
28680: LD_INT 8
28682: PUSH
28683: LD_INT 20
28685: PUSH
28686: LD_INT 21
28688: PUSH
28689: LD_INT 22
28691: PUSH
28692: LD_INT 72
28694: PUSH
28695: LD_INT 26
28697: PUSH
28698: LD_INT 69
28700: PUSH
28701: LD_INT 39
28703: PUSH
28704: LD_INT 40
28706: PUSH
28707: LD_INT 41
28709: PUSH
28710: LD_INT 42
28712: PUSH
28713: LD_INT 43
28715: PUSH
28716: LD_INT 48
28718: PUSH
28719: LD_INT 49
28721: PUSH
28722: LD_INT 50
28724: PUSH
28725: LD_INT 51
28727: PUSH
28728: LD_INT 52
28730: PUSH
28731: LD_INT 53
28733: PUSH
28734: LD_INT 54
28736: PUSH
28737: LD_INT 55
28739: PUSH
28740: LD_INT 56
28742: PUSH
28743: LD_INT 60
28745: PUSH
28746: LD_INT 61
28748: PUSH
28749: LD_INT 62
28751: PUSH
28752: LD_INT 66
28754: PUSH
28755: LD_INT 67
28757: PUSH
28758: LD_INT 68
28760: PUSH
28761: LD_INT 81
28763: PUSH
28764: LD_INT 82
28766: PUSH
28767: LD_INT 83
28769: PUSH
28770: LD_INT 84
28772: PUSH
28773: LD_INT 85
28775: PUSH
28776: LD_INT 87
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: ST_TO_ADDR
28834: GO 29067
28836: LD_INT 3
28838: DOUBLE
28839: EQUAL
28840: IFTRUE 28844
28842: GO 29066
28844: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28845: LD_ADDR_VAR 0 4
28849: PUSH
28850: LD_INT 46
28852: PUSH
28853: LD_INT 47
28855: PUSH
28856: LD_INT 1
28858: PUSH
28859: LD_INT 2
28861: PUSH
28862: LD_INT 82
28864: PUSH
28865: LD_INT 83
28867: PUSH
28868: LD_INT 84
28870: PUSH
28871: LD_INT 85
28873: PUSH
28874: LD_INT 86
28876: PUSH
28877: LD_INT 11
28879: PUSH
28880: LD_INT 9
28882: PUSH
28883: LD_INT 20
28885: PUSH
28886: LD_INT 19
28888: PUSH
28889: LD_INT 21
28891: PUSH
28892: LD_INT 24
28894: PUSH
28895: LD_INT 22
28897: PUSH
28898: LD_INT 25
28900: PUSH
28901: LD_INT 28
28903: PUSH
28904: LD_INT 29
28906: PUSH
28907: LD_INT 30
28909: PUSH
28910: LD_INT 31
28912: PUSH
28913: LD_INT 37
28915: PUSH
28916: LD_INT 38
28918: PUSH
28919: LD_INT 32
28921: PUSH
28922: LD_INT 27
28924: PUSH
28925: LD_INT 33
28927: PUSH
28928: LD_INT 69
28930: PUSH
28931: LD_INT 39
28933: PUSH
28934: LD_INT 34
28936: PUSH
28937: LD_INT 40
28939: PUSH
28940: LD_INT 71
28942: PUSH
28943: LD_INT 23
28945: PUSH
28946: LD_INT 44
28948: PUSH
28949: LD_INT 48
28951: PUSH
28952: LD_INT 49
28954: PUSH
28955: LD_INT 50
28957: PUSH
28958: LD_INT 51
28960: PUSH
28961: LD_INT 52
28963: PUSH
28964: LD_INT 53
28966: PUSH
28967: LD_INT 54
28969: PUSH
28970: LD_INT 55
28972: PUSH
28973: LD_INT 56
28975: PUSH
28976: LD_INT 57
28978: PUSH
28979: LD_INT 58
28981: PUSH
28982: LD_INT 59
28984: PUSH
28985: LD_INT 63
28987: PUSH
28988: LD_INT 64
28990: PUSH
28991: LD_INT 65
28993: PUSH
28994: LD_INT 82
28996: PUSH
28997: LD_INT 83
28999: PUSH
29000: LD_INT 84
29002: PUSH
29003: LD_INT 85
29005: PUSH
29006: LD_INT 86
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: ST_TO_ADDR
29064: GO 29067
29066: POP
// if state > - 1 and state < 3 then
29067: LD_VAR 0 3
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: GREATER
29076: PUSH
29077: LD_VAR 0 3
29081: PUSH
29082: LD_INT 3
29084: LESS
29085: AND
29086: IFFALSE 29143
// for i in result do
29088: LD_ADDR_VAR 0 5
29092: PUSH
29093: LD_VAR 0 4
29097: PUSH
29098: FOR_IN
29099: IFFALSE 29141
// if GetTech ( i , side ) <> state then
29101: LD_VAR 0 5
29105: PPUSH
29106: LD_VAR 0 1
29110: PPUSH
29111: CALL_OW 321
29115: PUSH
29116: LD_VAR 0 3
29120: NONEQUAL
29121: IFFALSE 29139
// result := result diff i ;
29123: LD_ADDR_VAR 0 4
29127: PUSH
29128: LD_VAR 0 4
29132: PUSH
29133: LD_VAR 0 5
29137: DIFF
29138: ST_TO_ADDR
29139: GO 29098
29141: POP
29142: POP
// end ;
29143: LD_VAR 0 4
29147: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29148: LD_INT 0
29150: PPUSH
29151: PPUSH
29152: PPUSH
// result := true ;
29153: LD_ADDR_VAR 0 3
29157: PUSH
29158: LD_INT 1
29160: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29161: LD_ADDR_VAR 0 5
29165: PUSH
29166: LD_VAR 0 2
29170: PPUSH
29171: CALL_OW 480
29175: ST_TO_ADDR
// if not tmp then
29176: LD_VAR 0 5
29180: NOT
29181: IFFALSE 29185
// exit ;
29183: GO 29234
// for i in tmp do
29185: LD_ADDR_VAR 0 4
29189: PUSH
29190: LD_VAR 0 5
29194: PUSH
29195: FOR_IN
29196: IFFALSE 29232
// if GetTech ( i , side ) <> state_researched then
29198: LD_VAR 0 4
29202: PPUSH
29203: LD_VAR 0 1
29207: PPUSH
29208: CALL_OW 321
29212: PUSH
29213: LD_INT 2
29215: NONEQUAL
29216: IFFALSE 29230
// begin result := false ;
29218: LD_ADDR_VAR 0 3
29222: PUSH
29223: LD_INT 0
29225: ST_TO_ADDR
// exit ;
29226: POP
29227: POP
29228: GO 29234
// end ;
29230: GO 29195
29232: POP
29233: POP
// end ;
29234: LD_VAR 0 3
29238: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29239: LD_INT 0
29241: PPUSH
29242: PPUSH
29243: PPUSH
29244: PPUSH
29245: PPUSH
29246: PPUSH
29247: PPUSH
29248: PPUSH
29249: PPUSH
29250: PPUSH
29251: PPUSH
29252: PPUSH
29253: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29254: LD_VAR 0 1
29258: NOT
29259: PUSH
29260: LD_VAR 0 1
29264: PPUSH
29265: CALL_OW 257
29269: PUSH
29270: LD_INT 9
29272: NONEQUAL
29273: OR
29274: IFFALSE 29278
// exit ;
29276: GO 29851
// side := GetSide ( unit ) ;
29278: LD_ADDR_VAR 0 9
29282: PUSH
29283: LD_VAR 0 1
29287: PPUSH
29288: CALL_OW 255
29292: ST_TO_ADDR
// tech_space := tech_spacanom ;
29293: LD_ADDR_VAR 0 12
29297: PUSH
29298: LD_INT 29
29300: ST_TO_ADDR
// tech_time := tech_taurad ;
29301: LD_ADDR_VAR 0 13
29305: PUSH
29306: LD_INT 28
29308: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29309: LD_ADDR_VAR 0 11
29313: PUSH
29314: LD_VAR 0 1
29318: PPUSH
29319: CALL_OW 310
29323: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29324: LD_VAR 0 11
29328: PPUSH
29329: CALL_OW 247
29333: PUSH
29334: LD_INT 2
29336: EQUAL
29337: IFFALSE 29341
// exit ;
29339: GO 29851
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29341: LD_ADDR_VAR 0 8
29345: PUSH
29346: LD_INT 81
29348: PUSH
29349: LD_VAR 0 9
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: LD_INT 21
29363: PUSH
29364: LD_INT 3
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PPUSH
29379: CALL_OW 69
29383: ST_TO_ADDR
// if not tmp then
29384: LD_VAR 0 8
29388: NOT
29389: IFFALSE 29393
// exit ;
29391: GO 29851
// if in_unit then
29393: LD_VAR 0 11
29397: IFFALSE 29421
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29399: LD_ADDR_VAR 0 10
29403: PUSH
29404: LD_VAR 0 8
29408: PPUSH
29409: LD_VAR 0 11
29413: PPUSH
29414: CALL_OW 74
29418: ST_TO_ADDR
29419: GO 29441
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29421: LD_ADDR_VAR 0 10
29425: PUSH
29426: LD_VAR 0 8
29430: PPUSH
29431: LD_VAR 0 1
29435: PPUSH
29436: CALL_OW 74
29440: ST_TO_ADDR
// if not enemy then
29441: LD_VAR 0 10
29445: NOT
29446: IFFALSE 29450
// exit ;
29448: GO 29851
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29450: LD_VAR 0 11
29454: PUSH
29455: LD_VAR 0 11
29459: PPUSH
29460: LD_VAR 0 10
29464: PPUSH
29465: CALL_OW 296
29469: PUSH
29470: LD_INT 13
29472: GREATER
29473: AND
29474: PUSH
29475: LD_VAR 0 1
29479: PPUSH
29480: LD_VAR 0 10
29484: PPUSH
29485: CALL_OW 296
29489: PUSH
29490: LD_INT 12
29492: GREATER
29493: OR
29494: IFFALSE 29498
// exit ;
29496: GO 29851
// missile := [ 1 ] ;
29498: LD_ADDR_VAR 0 14
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: EMPTY
29507: LIST
29508: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29509: LD_VAR 0 9
29513: PPUSH
29514: LD_VAR 0 12
29518: PPUSH
29519: CALL_OW 325
29523: IFFALSE 29552
// missile := Insert ( missile , missile + 1 , 2 ) ;
29525: LD_ADDR_VAR 0 14
29529: PUSH
29530: LD_VAR 0 14
29534: PPUSH
29535: LD_VAR 0 14
29539: PUSH
29540: LD_INT 1
29542: PLUS
29543: PPUSH
29544: LD_INT 2
29546: PPUSH
29547: CALL_OW 2
29551: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29552: LD_VAR 0 9
29556: PPUSH
29557: LD_VAR 0 13
29561: PPUSH
29562: CALL_OW 325
29566: PUSH
29567: LD_VAR 0 10
29571: PPUSH
29572: CALL_OW 255
29576: PPUSH
29577: LD_VAR 0 13
29581: PPUSH
29582: CALL_OW 325
29586: NOT
29587: AND
29588: IFFALSE 29617
// missile := Insert ( missile , missile + 1 , 3 ) ;
29590: LD_ADDR_VAR 0 14
29594: PUSH
29595: LD_VAR 0 14
29599: PPUSH
29600: LD_VAR 0 14
29604: PUSH
29605: LD_INT 1
29607: PLUS
29608: PPUSH
29609: LD_INT 3
29611: PPUSH
29612: CALL_OW 2
29616: ST_TO_ADDR
// if missile < 2 then
29617: LD_VAR 0 14
29621: PUSH
29622: LD_INT 2
29624: LESS
29625: IFFALSE 29629
// exit ;
29627: GO 29851
// x := GetX ( enemy ) ;
29629: LD_ADDR_VAR 0 4
29633: PUSH
29634: LD_VAR 0 10
29638: PPUSH
29639: CALL_OW 250
29643: ST_TO_ADDR
// y := GetY ( enemy ) ;
29644: LD_ADDR_VAR 0 5
29648: PUSH
29649: LD_VAR 0 10
29653: PPUSH
29654: CALL_OW 251
29658: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29659: LD_ADDR_VAR 0 6
29663: PUSH
29664: LD_VAR 0 4
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PPUSH
29673: LD_INT 1
29675: PPUSH
29676: CALL_OW 12
29680: PLUS
29681: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29682: LD_ADDR_VAR 0 7
29686: PUSH
29687: LD_VAR 0 5
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PPUSH
29696: LD_INT 1
29698: PPUSH
29699: CALL_OW 12
29703: PLUS
29704: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29705: LD_VAR 0 6
29709: PPUSH
29710: LD_VAR 0 7
29714: PPUSH
29715: CALL_OW 488
29719: NOT
29720: IFFALSE 29742
// begin _x := x ;
29722: LD_ADDR_VAR 0 6
29726: PUSH
29727: LD_VAR 0 4
29731: ST_TO_ADDR
// _y := y ;
29732: LD_ADDR_VAR 0 7
29736: PUSH
29737: LD_VAR 0 5
29741: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29742: LD_ADDR_VAR 0 3
29746: PUSH
29747: LD_INT 1
29749: PPUSH
29750: LD_VAR 0 14
29754: PPUSH
29755: CALL_OW 12
29759: ST_TO_ADDR
// case i of 1 :
29760: LD_VAR 0 3
29764: PUSH
29765: LD_INT 1
29767: DOUBLE
29768: EQUAL
29769: IFTRUE 29773
29771: GO 29790
29773: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29774: LD_VAR 0 1
29778: PPUSH
29779: LD_VAR 0 10
29783: PPUSH
29784: CALL_OW 115
29788: GO 29851
29790: LD_INT 2
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29820
29798: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29799: LD_VAR 0 1
29803: PPUSH
29804: LD_VAR 0 6
29808: PPUSH
29809: LD_VAR 0 7
29813: PPUSH
29814: CALL_OW 153
29818: GO 29851
29820: LD_INT 3
29822: DOUBLE
29823: EQUAL
29824: IFTRUE 29828
29826: GO 29850
29828: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29829: LD_VAR 0 1
29833: PPUSH
29834: LD_VAR 0 6
29838: PPUSH
29839: LD_VAR 0 7
29843: PPUSH
29844: CALL_OW 154
29848: GO 29851
29850: POP
// end ;
29851: LD_VAR 0 2
29855: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29856: LD_INT 0
29858: PPUSH
29859: PPUSH
29860: PPUSH
29861: PPUSH
29862: PPUSH
29863: PPUSH
// if not unit or not building then
29864: LD_VAR 0 1
29868: NOT
29869: PUSH
29870: LD_VAR 0 2
29874: NOT
29875: OR
29876: IFFALSE 29880
// exit ;
29878: GO 30038
// x := GetX ( building ) ;
29880: LD_ADDR_VAR 0 5
29884: PUSH
29885: LD_VAR 0 2
29889: PPUSH
29890: CALL_OW 250
29894: ST_TO_ADDR
// y := GetY ( building ) ;
29895: LD_ADDR_VAR 0 6
29899: PUSH
29900: LD_VAR 0 2
29904: PPUSH
29905: CALL_OW 251
29909: ST_TO_ADDR
// for i = 0 to 5 do
29910: LD_ADDR_VAR 0 4
29914: PUSH
29915: DOUBLE
29916: LD_INT 0
29918: DEC
29919: ST_TO_ADDR
29920: LD_INT 5
29922: PUSH
29923: FOR_TO
29924: IFFALSE 30036
// begin _x := ShiftX ( x , i , 3 ) ;
29926: LD_ADDR_VAR 0 7
29930: PUSH
29931: LD_VAR 0 5
29935: PPUSH
29936: LD_VAR 0 4
29940: PPUSH
29941: LD_INT 3
29943: PPUSH
29944: CALL_OW 272
29948: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29949: LD_ADDR_VAR 0 8
29953: PUSH
29954: LD_VAR 0 6
29958: PPUSH
29959: LD_VAR 0 4
29963: PPUSH
29964: LD_INT 3
29966: PPUSH
29967: CALL_OW 273
29971: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29972: LD_VAR 0 7
29976: PPUSH
29977: LD_VAR 0 8
29981: PPUSH
29982: CALL_OW 488
29986: NOT
29987: IFFALSE 29991
// continue ;
29989: GO 29923
// if HexInfo ( _x , _y ) = 0 then
29991: LD_VAR 0 7
29995: PPUSH
29996: LD_VAR 0 8
30000: PPUSH
30001: CALL_OW 428
30005: PUSH
30006: LD_INT 0
30008: EQUAL
30009: IFFALSE 30034
// begin ComMoveXY ( unit , _x , _y ) ;
30011: LD_VAR 0 1
30015: PPUSH
30016: LD_VAR 0 7
30020: PPUSH
30021: LD_VAR 0 8
30025: PPUSH
30026: CALL_OW 111
// exit ;
30030: POP
30031: POP
30032: GO 30038
// end ; end ;
30034: GO 29923
30036: POP
30037: POP
// end ;
30038: LD_VAR 0 3
30042: RET
// export function ScanBase ( side , base_area ) ; begin
30043: LD_INT 0
30045: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30046: LD_ADDR_VAR 0 3
30050: PUSH
30051: LD_VAR 0 2
30055: PPUSH
30056: LD_INT 81
30058: PUSH
30059: LD_VAR 0 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PPUSH
30068: CALL_OW 70
30072: ST_TO_ADDR
// end ;
30073: LD_VAR 0 3
30077: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30078: LD_INT 0
30080: PPUSH
30081: PPUSH
30082: PPUSH
30083: PPUSH
// result := false ;
30084: LD_ADDR_VAR 0 2
30088: PUSH
30089: LD_INT 0
30091: ST_TO_ADDR
// side := GetSide ( unit ) ;
30092: LD_ADDR_VAR 0 3
30096: PUSH
30097: LD_VAR 0 1
30101: PPUSH
30102: CALL_OW 255
30106: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30107: LD_ADDR_VAR 0 4
30111: PUSH
30112: LD_VAR 0 1
30116: PPUSH
30117: CALL_OW 248
30121: ST_TO_ADDR
// case nat of 1 :
30122: LD_VAR 0 4
30126: PUSH
30127: LD_INT 1
30129: DOUBLE
30130: EQUAL
30131: IFTRUE 30135
30133: GO 30146
30135: POP
// tech := tech_lassight ; 2 :
30136: LD_ADDR_VAR 0 5
30140: PUSH
30141: LD_INT 12
30143: ST_TO_ADDR
30144: GO 30185
30146: LD_INT 2
30148: DOUBLE
30149: EQUAL
30150: IFTRUE 30154
30152: GO 30165
30154: POP
// tech := tech_mortar ; 3 :
30155: LD_ADDR_VAR 0 5
30159: PUSH
30160: LD_INT 41
30162: ST_TO_ADDR
30163: GO 30185
30165: LD_INT 3
30167: DOUBLE
30168: EQUAL
30169: IFTRUE 30173
30171: GO 30184
30173: POP
// tech := tech_bazooka ; end ;
30174: LD_ADDR_VAR 0 5
30178: PUSH
30179: LD_INT 44
30181: ST_TO_ADDR
30182: GO 30185
30184: POP
// if Researched ( side , tech ) then
30185: LD_VAR 0 3
30189: PPUSH
30190: LD_VAR 0 5
30194: PPUSH
30195: CALL_OW 325
30199: IFFALSE 30226
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30201: LD_ADDR_VAR 0 2
30205: PUSH
30206: LD_INT 5
30208: PUSH
30209: LD_INT 8
30211: PUSH
30212: LD_INT 9
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: PUSH
30220: LD_VAR 0 4
30224: ARRAY
30225: ST_TO_ADDR
// end ;
30226: LD_VAR 0 2
30230: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30231: LD_INT 0
30233: PPUSH
30234: PPUSH
30235: PPUSH
// if not mines then
30236: LD_VAR 0 2
30240: NOT
30241: IFFALSE 30245
// exit ;
30243: GO 30389
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30245: LD_ADDR_VAR 0 5
30249: PUSH
30250: LD_INT 81
30252: PUSH
30253: LD_VAR 0 1
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 3
30264: PUSH
30265: LD_INT 21
30267: PUSH
30268: LD_INT 3
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PPUSH
30283: CALL_OW 69
30287: ST_TO_ADDR
// for i in mines do
30288: LD_ADDR_VAR 0 4
30292: PUSH
30293: LD_VAR 0 2
30297: PUSH
30298: FOR_IN
30299: IFFALSE 30387
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30301: LD_VAR 0 4
30305: PUSH
30306: LD_INT 1
30308: ARRAY
30309: PPUSH
30310: LD_VAR 0 4
30314: PUSH
30315: LD_INT 2
30317: ARRAY
30318: PPUSH
30319: CALL_OW 458
30323: NOT
30324: IFFALSE 30328
// continue ;
30326: GO 30298
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30328: LD_VAR 0 4
30332: PUSH
30333: LD_INT 1
30335: ARRAY
30336: PPUSH
30337: LD_VAR 0 4
30341: PUSH
30342: LD_INT 2
30344: ARRAY
30345: PPUSH
30346: CALL_OW 428
30350: PUSH
30351: LD_VAR 0 5
30355: IN
30356: IFFALSE 30385
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30358: LD_VAR 0 4
30362: PUSH
30363: LD_INT 1
30365: ARRAY
30366: PPUSH
30367: LD_VAR 0 4
30371: PUSH
30372: LD_INT 2
30374: ARRAY
30375: PPUSH
30376: LD_VAR 0 1
30380: PPUSH
30381: CALL_OW 456
// end ;
30385: GO 30298
30387: POP
30388: POP
// end ;
30389: LD_VAR 0 3
30393: RET
// export function Count ( array ) ; var i ; begin
30394: LD_INT 0
30396: PPUSH
30397: PPUSH
// result := 0 ;
30398: LD_ADDR_VAR 0 2
30402: PUSH
30403: LD_INT 0
30405: ST_TO_ADDR
// for i in array do
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: LD_VAR 0 1
30415: PUSH
30416: FOR_IN
30417: IFFALSE 30441
// if i then
30419: LD_VAR 0 3
30423: IFFALSE 30439
// result := result + 1 ;
30425: LD_ADDR_VAR 0 2
30429: PUSH
30430: LD_VAR 0 2
30434: PUSH
30435: LD_INT 1
30437: PLUS
30438: ST_TO_ADDR
30439: GO 30416
30441: POP
30442: POP
// end ;
30443: LD_VAR 0 2
30447: RET
// export function IsEmpty ( building ) ; begin
30448: LD_INT 0
30450: PPUSH
// if not building then
30451: LD_VAR 0 1
30455: NOT
30456: IFFALSE 30460
// exit ;
30458: GO 30503
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30460: LD_ADDR_VAR 0 2
30464: PUSH
30465: LD_VAR 0 1
30469: PUSH
30470: LD_INT 22
30472: PUSH
30473: LD_VAR 0 1
30477: PPUSH
30478: CALL_OW 255
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 58
30489: PUSH
30490: EMPTY
30491: LIST
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PPUSH
30497: CALL_OW 69
30501: IN
30502: ST_TO_ADDR
// end ;
30503: LD_VAR 0 2
30507: RET
// export function IsNotFull ( building ) ; begin
30508: LD_INT 0
30510: PPUSH
// if not building then
30511: LD_VAR 0 1
30515: NOT
30516: IFFALSE 30520
// exit ;
30518: GO 30539
// result := UnitsInside ( building ) < 6 ;
30520: LD_ADDR_VAR 0 2
30524: PUSH
30525: LD_VAR 0 1
30529: PPUSH
30530: CALL_OW 313
30534: PUSH
30535: LD_INT 6
30537: LESS
30538: ST_TO_ADDR
// end ;
30539: LD_VAR 0 2
30543: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30544: LD_INT 0
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
// tmp := [ ] ;
30550: LD_ADDR_VAR 0 3
30554: PUSH
30555: EMPTY
30556: ST_TO_ADDR
// list := [ ] ;
30557: LD_ADDR_VAR 0 5
30561: PUSH
30562: EMPTY
30563: ST_TO_ADDR
// for i = 16 to 25 do
30564: LD_ADDR_VAR 0 4
30568: PUSH
30569: DOUBLE
30570: LD_INT 16
30572: DEC
30573: ST_TO_ADDR
30574: LD_INT 25
30576: PUSH
30577: FOR_TO
30578: IFFALSE 30651
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30580: LD_ADDR_VAR 0 3
30584: PUSH
30585: LD_VAR 0 3
30589: PUSH
30590: LD_INT 22
30592: PUSH
30593: LD_VAR 0 1
30597: PPUSH
30598: CALL_OW 255
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 91
30609: PUSH
30610: LD_VAR 0 1
30614: PUSH
30615: LD_INT 6
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 30
30625: PUSH
30626: LD_VAR 0 4
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: PPUSH
30643: CALL_OW 69
30647: ADD
30648: ST_TO_ADDR
30649: GO 30577
30651: POP
30652: POP
// for i = 1 to tmp do
30653: LD_ADDR_VAR 0 4
30657: PUSH
30658: DOUBLE
30659: LD_INT 1
30661: DEC
30662: ST_TO_ADDR
30663: LD_VAR 0 3
30667: PUSH
30668: FOR_TO
30669: IFFALSE 30757
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30671: LD_ADDR_VAR 0 5
30675: PUSH
30676: LD_VAR 0 5
30680: PUSH
30681: LD_VAR 0 3
30685: PUSH
30686: LD_VAR 0 4
30690: ARRAY
30691: PPUSH
30692: CALL_OW 266
30696: PUSH
30697: LD_VAR 0 3
30701: PUSH
30702: LD_VAR 0 4
30706: ARRAY
30707: PPUSH
30708: CALL_OW 250
30712: PUSH
30713: LD_VAR 0 3
30717: PUSH
30718: LD_VAR 0 4
30722: ARRAY
30723: PPUSH
30724: CALL_OW 251
30728: PUSH
30729: LD_VAR 0 3
30733: PUSH
30734: LD_VAR 0 4
30738: ARRAY
30739: PPUSH
30740: CALL_OW 254
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: PUSH
30751: EMPTY
30752: LIST
30753: ADD
30754: ST_TO_ADDR
30755: GO 30668
30757: POP
30758: POP
// result := list ;
30759: LD_ADDR_VAR 0 2
30763: PUSH
30764: LD_VAR 0 5
30768: ST_TO_ADDR
// end ;
30769: LD_VAR 0 2
30773: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30774: LD_INT 0
30776: PPUSH
30777: PPUSH
30778: PPUSH
30779: PPUSH
30780: PPUSH
30781: PPUSH
30782: PPUSH
// if not factory then
30783: LD_VAR 0 1
30787: NOT
30788: IFFALSE 30792
// exit ;
30790: GO 31385
// if control = control_apeman then
30792: LD_VAR 0 4
30796: PUSH
30797: LD_INT 5
30799: EQUAL
30800: IFFALSE 30909
// begin tmp := UnitsInside ( factory ) ;
30802: LD_ADDR_VAR 0 8
30806: PUSH
30807: LD_VAR 0 1
30811: PPUSH
30812: CALL_OW 313
30816: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30817: LD_VAR 0 8
30821: PPUSH
30822: LD_INT 25
30824: PUSH
30825: LD_INT 12
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PPUSH
30832: CALL_OW 72
30836: NOT
30837: IFFALSE 30847
// control := control_manual ;
30839: LD_ADDR_VAR 0 4
30843: PUSH
30844: LD_INT 1
30846: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30847: LD_ADDR_VAR 0 8
30851: PUSH
30852: LD_VAR 0 1
30856: PPUSH
30857: CALL 30544 0 1
30861: ST_TO_ADDR
// if tmp then
30862: LD_VAR 0 8
30866: IFFALSE 30909
// begin for i in tmp do
30868: LD_ADDR_VAR 0 7
30872: PUSH
30873: LD_VAR 0 8
30877: PUSH
30878: FOR_IN
30879: IFFALSE 30907
// if i [ 1 ] = b_ext_radio then
30881: LD_VAR 0 7
30885: PUSH
30886: LD_INT 1
30888: ARRAY
30889: PUSH
30890: LD_INT 22
30892: EQUAL
30893: IFFALSE 30905
// begin control := control_remote ;
30895: LD_ADDR_VAR 0 4
30899: PUSH
30900: LD_INT 2
30902: ST_TO_ADDR
// break ;
30903: GO 30907
// end ;
30905: GO 30878
30907: POP
30908: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30909: LD_VAR 0 1
30913: PPUSH
30914: LD_VAR 0 2
30918: PPUSH
30919: LD_VAR 0 3
30923: PPUSH
30924: LD_VAR 0 4
30928: PPUSH
30929: LD_VAR 0 5
30933: PPUSH
30934: CALL_OW 448
30938: IFFALSE 30973
// begin result := [ chassis , engine , control , weapon ] ;
30940: LD_ADDR_VAR 0 6
30944: PUSH
30945: LD_VAR 0 2
30949: PUSH
30950: LD_VAR 0 3
30954: PUSH
30955: LD_VAR 0 4
30959: PUSH
30960: LD_VAR 0 5
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: ST_TO_ADDR
// exit ;
30971: GO 31385
// end ; _chassis := AvailableChassisList ( factory ) ;
30973: LD_ADDR_VAR 0 9
30977: PUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 475
30987: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30988: LD_ADDR_VAR 0 11
30992: PUSH
30993: LD_VAR 0 1
30997: PPUSH
30998: CALL_OW 476
31002: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31003: LD_ADDR_VAR 0 12
31007: PUSH
31008: LD_VAR 0 1
31012: PPUSH
31013: CALL_OW 477
31017: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31018: LD_ADDR_VAR 0 10
31022: PUSH
31023: LD_VAR 0 1
31027: PPUSH
31028: CALL_OW 478
31032: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31033: LD_VAR 0 9
31037: NOT
31038: PUSH
31039: LD_VAR 0 11
31043: NOT
31044: OR
31045: PUSH
31046: LD_VAR 0 12
31050: NOT
31051: OR
31052: PUSH
31053: LD_VAR 0 10
31057: NOT
31058: OR
31059: IFFALSE 31094
// begin result := [ chassis , engine , control , weapon ] ;
31061: LD_ADDR_VAR 0 6
31065: PUSH
31066: LD_VAR 0 2
31070: PUSH
31071: LD_VAR 0 3
31075: PUSH
31076: LD_VAR 0 4
31080: PUSH
31081: LD_VAR 0 5
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: ST_TO_ADDR
// exit ;
31092: GO 31385
// end ; if not chassis in _chassis then
31094: LD_VAR 0 2
31098: PUSH
31099: LD_VAR 0 9
31103: IN
31104: NOT
31105: IFFALSE 31131
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31107: LD_ADDR_VAR 0 2
31111: PUSH
31112: LD_VAR 0 9
31116: PUSH
31117: LD_INT 1
31119: PPUSH
31120: LD_VAR 0 9
31124: PPUSH
31125: CALL_OW 12
31129: ARRAY
31130: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31131: LD_VAR 0 2
31135: PPUSH
31136: LD_VAR 0 3
31140: PPUSH
31141: CALL 31390 0 2
31145: NOT
31146: IFFALSE 31205
// repeat engine := _engine [ 1 ] ;
31148: LD_ADDR_VAR 0 3
31152: PUSH
31153: LD_VAR 0 11
31157: PUSH
31158: LD_INT 1
31160: ARRAY
31161: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31162: LD_ADDR_VAR 0 11
31166: PUSH
31167: LD_VAR 0 11
31171: PPUSH
31172: LD_INT 1
31174: PPUSH
31175: CALL_OW 3
31179: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31180: LD_VAR 0 2
31184: PPUSH
31185: LD_VAR 0 3
31189: PPUSH
31190: CALL 31390 0 2
31194: PUSH
31195: LD_VAR 0 11
31199: PUSH
31200: EMPTY
31201: EQUAL
31202: OR
31203: IFFALSE 31148
// if not control in _control then
31205: LD_VAR 0 4
31209: PUSH
31210: LD_VAR 0 12
31214: IN
31215: NOT
31216: IFFALSE 31242
// control := _control [ rand ( 1 , _control ) ] ;
31218: LD_ADDR_VAR 0 4
31222: PUSH
31223: LD_VAR 0 12
31227: PUSH
31228: LD_INT 1
31230: PPUSH
31231: LD_VAR 0 12
31235: PPUSH
31236: CALL_OW 12
31240: ARRAY
31241: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31242: LD_VAR 0 2
31246: PPUSH
31247: LD_VAR 0 5
31251: PPUSH
31252: CALL 31610 0 2
31256: NOT
31257: IFFALSE 31316
// repeat weapon := _weapon [ 1 ] ;
31259: LD_ADDR_VAR 0 5
31263: PUSH
31264: LD_VAR 0 10
31268: PUSH
31269: LD_INT 1
31271: ARRAY
31272: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31273: LD_ADDR_VAR 0 10
31277: PUSH
31278: LD_VAR 0 10
31282: PPUSH
31283: LD_INT 1
31285: PPUSH
31286: CALL_OW 3
31290: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31291: LD_VAR 0 2
31295: PPUSH
31296: LD_VAR 0 5
31300: PPUSH
31301: CALL 31610 0 2
31305: PUSH
31306: LD_VAR 0 10
31310: PUSH
31311: EMPTY
31312: EQUAL
31313: OR
31314: IFFALSE 31259
// result := [ ] ;
31316: LD_ADDR_VAR 0 6
31320: PUSH
31321: EMPTY
31322: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31323: LD_VAR 0 1
31327: PPUSH
31328: LD_VAR 0 2
31332: PPUSH
31333: LD_VAR 0 3
31337: PPUSH
31338: LD_VAR 0 4
31342: PPUSH
31343: LD_VAR 0 5
31347: PPUSH
31348: CALL_OW 448
31352: IFFALSE 31385
// result := [ chassis , engine , control , weapon ] ;
31354: LD_ADDR_VAR 0 6
31358: PUSH
31359: LD_VAR 0 2
31363: PUSH
31364: LD_VAR 0 3
31368: PUSH
31369: LD_VAR 0 4
31373: PUSH
31374: LD_VAR 0 5
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: ST_TO_ADDR
// end ;
31385: LD_VAR 0 6
31389: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31390: LD_INT 0
31392: PPUSH
// if not chassis or not engine then
31393: LD_VAR 0 1
31397: NOT
31398: PUSH
31399: LD_VAR 0 2
31403: NOT
31404: OR
31405: IFFALSE 31409
// exit ;
31407: GO 31605
// case engine of engine_solar :
31409: LD_VAR 0 2
31413: PUSH
31414: LD_INT 2
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31460
31422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31423: LD_ADDR_VAR 0 3
31427: PUSH
31428: LD_INT 11
31430: PUSH
31431: LD_INT 12
31433: PUSH
31434: LD_INT 13
31436: PUSH
31437: LD_INT 14
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: LD_INT 3
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: ST_TO_ADDR
31458: GO 31589
31460: LD_INT 1
31462: DOUBLE
31463: EQUAL
31464: IFTRUE 31468
31466: GO 31530
31468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31469: LD_ADDR_VAR 0 3
31473: PUSH
31474: LD_INT 11
31476: PUSH
31477: LD_INT 12
31479: PUSH
31480: LD_INT 13
31482: PUSH
31483: LD_INT 14
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: LD_INT 4
31497: PUSH
31498: LD_INT 5
31500: PUSH
31501: LD_INT 21
31503: PUSH
31504: LD_INT 23
31506: PUSH
31507: LD_INT 22
31509: PUSH
31510: LD_INT 24
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
31528: GO 31589
31530: LD_INT 3
31532: DOUBLE
31533: EQUAL
31534: IFTRUE 31538
31536: GO 31588
31538: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31539: LD_ADDR_VAR 0 3
31543: PUSH
31544: LD_INT 13
31546: PUSH
31547: LD_INT 14
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: LD_INT 3
31555: PUSH
31556: LD_INT 4
31558: PUSH
31559: LD_INT 5
31561: PUSH
31562: LD_INT 21
31564: PUSH
31565: LD_INT 22
31567: PUSH
31568: LD_INT 23
31570: PUSH
31571: LD_INT 24
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: ST_TO_ADDR
31586: GO 31589
31588: POP
// result := ( chassis in result ) ;
31589: LD_ADDR_VAR 0 3
31593: PUSH
31594: LD_VAR 0 1
31598: PUSH
31599: LD_VAR 0 3
31603: IN
31604: ST_TO_ADDR
// end ;
31605: LD_VAR 0 3
31609: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31610: LD_INT 0
31612: PPUSH
// if not chassis or not weapon then
31613: LD_VAR 0 1
31617: NOT
31618: PUSH
31619: LD_VAR 0 2
31623: NOT
31624: OR
31625: IFFALSE 31629
// exit ;
31627: GO 32655
// case weapon of us_machine_gun :
31629: LD_VAR 0 2
31633: PUSH
31634: LD_INT 2
31636: DOUBLE
31637: EQUAL
31638: IFTRUE 31642
31640: GO 31672
31642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31643: LD_ADDR_VAR 0 3
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: LD_INT 3
31656: PUSH
31657: LD_INT 4
31659: PUSH
31660: LD_INT 5
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: ST_TO_ADDR
31670: GO 32639
31672: LD_INT 3
31674: DOUBLE
31675: EQUAL
31676: IFTRUE 31680
31678: GO 31710
31680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31681: LD_ADDR_VAR 0 3
31685: PUSH
31686: LD_INT 1
31688: PUSH
31689: LD_INT 2
31691: PUSH
31692: LD_INT 3
31694: PUSH
31695: LD_INT 4
31697: PUSH
31698: LD_INT 5
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: ST_TO_ADDR
31708: GO 32639
31710: LD_INT 11
31712: DOUBLE
31713: EQUAL
31714: IFTRUE 31718
31716: GO 31748
31718: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31719: LD_ADDR_VAR 0 3
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: LD_INT 4
31735: PUSH
31736: LD_INT 5
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: ST_TO_ADDR
31746: GO 32639
31748: LD_INT 4
31750: DOUBLE
31751: EQUAL
31752: IFTRUE 31756
31754: GO 31782
31756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31757: LD_ADDR_VAR 0 3
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: LD_INT 3
31767: PUSH
31768: LD_INT 4
31770: PUSH
31771: LD_INT 5
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: ST_TO_ADDR
31780: GO 32639
31782: LD_INT 5
31784: DOUBLE
31785: EQUAL
31786: IFTRUE 31790
31788: GO 31816
31790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31791: LD_ADDR_VAR 0 3
31795: PUSH
31796: LD_INT 2
31798: PUSH
31799: LD_INT 3
31801: PUSH
31802: LD_INT 4
31804: PUSH
31805: LD_INT 5
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: ST_TO_ADDR
31814: GO 32639
31816: LD_INT 9
31818: DOUBLE
31819: EQUAL
31820: IFTRUE 31824
31822: GO 31850
31824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31825: LD_ADDR_VAR 0 3
31829: PUSH
31830: LD_INT 2
31832: PUSH
31833: LD_INT 3
31835: PUSH
31836: LD_INT 4
31838: PUSH
31839: LD_INT 5
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: ST_TO_ADDR
31848: GO 32639
31850: LD_INT 7
31852: DOUBLE
31853: EQUAL
31854: IFTRUE 31858
31856: GO 31884
31858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31859: LD_ADDR_VAR 0 3
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: LD_INT 3
31869: PUSH
31870: LD_INT 4
31872: PUSH
31873: LD_INT 5
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: ST_TO_ADDR
31882: GO 32639
31884: LD_INT 12
31886: DOUBLE
31887: EQUAL
31888: IFTRUE 31892
31890: GO 31918
31892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31893: LD_ADDR_VAR 0 3
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: LD_INT 3
31903: PUSH
31904: LD_INT 4
31906: PUSH
31907: LD_INT 5
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: ST_TO_ADDR
31916: GO 32639
31918: LD_INT 13
31920: DOUBLE
31921: EQUAL
31922: IFTRUE 31926
31924: GO 31952
31926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31927: LD_ADDR_VAR 0 3
31931: PUSH
31932: LD_INT 2
31934: PUSH
31935: LD_INT 3
31937: PUSH
31938: LD_INT 4
31940: PUSH
31941: LD_INT 5
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: ST_TO_ADDR
31950: GO 32639
31952: LD_INT 14
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31978
31960: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31961: LD_ADDR_VAR 0 3
31965: PUSH
31966: LD_INT 4
31968: PUSH
31969: LD_INT 5
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: ST_TO_ADDR
31976: GO 32639
31978: LD_INT 6
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 32004
31986: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: ST_TO_ADDR
32002: GO 32639
32004: LD_INT 10
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32030
32012: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32013: LD_ADDR_VAR 0 3
32017: PUSH
32018: LD_INT 4
32020: PUSH
32021: LD_INT 5
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: ST_TO_ADDR
32028: GO 32639
32030: LD_INT 22
32032: DOUBLE
32033: EQUAL
32034: IFTRUE 32038
32036: GO 32064
32038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32039: LD_ADDR_VAR 0 3
32043: PUSH
32044: LD_INT 11
32046: PUSH
32047: LD_INT 12
32049: PUSH
32050: LD_INT 13
32052: PUSH
32053: LD_INT 14
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: ST_TO_ADDR
32062: GO 32639
32064: LD_INT 23
32066: DOUBLE
32067: EQUAL
32068: IFTRUE 32072
32070: GO 32098
32072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32073: LD_ADDR_VAR 0 3
32077: PUSH
32078: LD_INT 11
32080: PUSH
32081: LD_INT 12
32083: PUSH
32084: LD_INT 13
32086: PUSH
32087: LD_INT 14
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: ST_TO_ADDR
32096: GO 32639
32098: LD_INT 24
32100: DOUBLE
32101: EQUAL
32102: IFTRUE 32106
32104: GO 32132
32106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32107: LD_ADDR_VAR 0 3
32111: PUSH
32112: LD_INT 11
32114: PUSH
32115: LD_INT 12
32117: PUSH
32118: LD_INT 13
32120: PUSH
32121: LD_INT 14
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: ST_TO_ADDR
32130: GO 32639
32132: LD_INT 30
32134: DOUBLE
32135: EQUAL
32136: IFTRUE 32140
32138: GO 32166
32140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32141: LD_ADDR_VAR 0 3
32145: PUSH
32146: LD_INT 11
32148: PUSH
32149: LD_INT 12
32151: PUSH
32152: LD_INT 13
32154: PUSH
32155: LD_INT 14
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
32164: GO 32639
32166: LD_INT 25
32168: DOUBLE
32169: EQUAL
32170: IFTRUE 32174
32172: GO 32192
32174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32175: LD_ADDR_VAR 0 3
32179: PUSH
32180: LD_INT 13
32182: PUSH
32183: LD_INT 14
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: ST_TO_ADDR
32190: GO 32639
32192: LD_INT 27
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32218
32200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32201: LD_ADDR_VAR 0 3
32205: PUSH
32206: LD_INT 13
32208: PUSH
32209: LD_INT 14
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: ST_TO_ADDR
32216: GO 32639
32218: LD_INT 28
32220: DOUBLE
32221: EQUAL
32222: IFTRUE 32226
32224: GO 32244
32226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32227: LD_ADDR_VAR 0 3
32231: PUSH
32232: LD_INT 13
32234: PUSH
32235: LD_INT 14
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: ST_TO_ADDR
32242: GO 32639
32244: LD_INT 29
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32270
32252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32253: LD_ADDR_VAR 0 3
32257: PUSH
32258: LD_INT 13
32260: PUSH
32261: LD_INT 14
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: ST_TO_ADDR
32268: GO 32639
32270: LD_INT 31
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32296
32278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32279: LD_ADDR_VAR 0 3
32283: PUSH
32284: LD_INT 13
32286: PUSH
32287: LD_INT 14
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: ST_TO_ADDR
32294: GO 32639
32296: LD_INT 26
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32322
32304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32305: LD_ADDR_VAR 0 3
32309: PUSH
32310: LD_INT 13
32312: PUSH
32313: LD_INT 14
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: ST_TO_ADDR
32320: GO 32639
32322: LD_INT 42
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32356
32330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32331: LD_ADDR_VAR 0 3
32335: PUSH
32336: LD_INT 21
32338: PUSH
32339: LD_INT 22
32341: PUSH
32342: LD_INT 23
32344: PUSH
32345: LD_INT 24
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: ST_TO_ADDR
32354: GO 32639
32356: LD_INT 43
32358: DOUBLE
32359: EQUAL
32360: IFTRUE 32364
32362: GO 32390
32364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32365: LD_ADDR_VAR 0 3
32369: PUSH
32370: LD_INT 21
32372: PUSH
32373: LD_INT 22
32375: PUSH
32376: LD_INT 23
32378: PUSH
32379: LD_INT 24
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: ST_TO_ADDR
32388: GO 32639
32390: LD_INT 44
32392: DOUBLE
32393: EQUAL
32394: IFTRUE 32398
32396: GO 32424
32398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32399: LD_ADDR_VAR 0 3
32403: PUSH
32404: LD_INT 21
32406: PUSH
32407: LD_INT 22
32409: PUSH
32410: LD_INT 23
32412: PUSH
32413: LD_INT 24
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: ST_TO_ADDR
32422: GO 32639
32424: LD_INT 45
32426: DOUBLE
32427: EQUAL
32428: IFTRUE 32432
32430: GO 32458
32432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32433: LD_ADDR_VAR 0 3
32437: PUSH
32438: LD_INT 21
32440: PUSH
32441: LD_INT 22
32443: PUSH
32444: LD_INT 23
32446: PUSH
32447: LD_INT 24
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
32456: GO 32639
32458: LD_INT 49
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32466
32464: GO 32492
32466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32467: LD_ADDR_VAR 0 3
32471: PUSH
32472: LD_INT 21
32474: PUSH
32475: LD_INT 22
32477: PUSH
32478: LD_INT 23
32480: PUSH
32481: LD_INT 24
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: ST_TO_ADDR
32490: GO 32639
32492: LD_INT 51
32494: DOUBLE
32495: EQUAL
32496: IFTRUE 32500
32498: GO 32526
32500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32501: LD_ADDR_VAR 0 3
32505: PUSH
32506: LD_INT 21
32508: PUSH
32509: LD_INT 22
32511: PUSH
32512: LD_INT 23
32514: PUSH
32515: LD_INT 24
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: ST_TO_ADDR
32524: GO 32639
32526: LD_INT 52
32528: DOUBLE
32529: EQUAL
32530: IFTRUE 32534
32532: GO 32560
32534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32535: LD_ADDR_VAR 0 3
32539: PUSH
32540: LD_INT 21
32542: PUSH
32543: LD_INT 22
32545: PUSH
32546: LD_INT 23
32548: PUSH
32549: LD_INT 24
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: ST_TO_ADDR
32558: GO 32639
32560: LD_INT 53
32562: DOUBLE
32563: EQUAL
32564: IFTRUE 32568
32566: GO 32586
32568: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32569: LD_ADDR_VAR 0 3
32573: PUSH
32574: LD_INT 23
32576: PUSH
32577: LD_INT 24
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: ST_TO_ADDR
32584: GO 32639
32586: LD_INT 46
32588: DOUBLE
32589: EQUAL
32590: IFTRUE 32594
32592: GO 32612
32594: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32595: LD_ADDR_VAR 0 3
32599: PUSH
32600: LD_INT 23
32602: PUSH
32603: LD_INT 24
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: ST_TO_ADDR
32610: GO 32639
32612: LD_INT 47
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32620
32618: GO 32638
32620: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32621: LD_ADDR_VAR 0 3
32625: PUSH
32626: LD_INT 23
32628: PUSH
32629: LD_INT 24
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: ST_TO_ADDR
32636: GO 32639
32638: POP
// result := ( chassis in result ) ;
32639: LD_ADDR_VAR 0 3
32643: PUSH
32644: LD_VAR 0 1
32648: PUSH
32649: LD_VAR 0 3
32653: IN
32654: ST_TO_ADDR
// end ;
32655: LD_VAR 0 3
32659: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32660: LD_INT 0
32662: PPUSH
32663: PPUSH
32664: PPUSH
32665: PPUSH
32666: PPUSH
32667: PPUSH
32668: PPUSH
// result := array ;
32669: LD_ADDR_VAR 0 5
32673: PUSH
32674: LD_VAR 0 1
32678: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32679: LD_VAR 0 1
32683: NOT
32684: PUSH
32685: LD_VAR 0 2
32689: NOT
32690: OR
32691: PUSH
32692: LD_VAR 0 3
32696: NOT
32697: OR
32698: PUSH
32699: LD_VAR 0 2
32703: PUSH
32704: LD_VAR 0 1
32708: GREATER
32709: OR
32710: PUSH
32711: LD_VAR 0 3
32715: PUSH
32716: LD_VAR 0 1
32720: GREATER
32721: OR
32722: IFFALSE 32726
// exit ;
32724: GO 33022
// if direction then
32726: LD_VAR 0 4
32730: IFFALSE 32794
// begin d := 1 ;
32732: LD_ADDR_VAR 0 9
32736: PUSH
32737: LD_INT 1
32739: ST_TO_ADDR
// if i_from > i_to then
32740: LD_VAR 0 2
32744: PUSH
32745: LD_VAR 0 3
32749: GREATER
32750: IFFALSE 32776
// length := ( array - i_from ) + i_to else
32752: LD_ADDR_VAR 0 11
32756: PUSH
32757: LD_VAR 0 1
32761: PUSH
32762: LD_VAR 0 2
32766: MINUS
32767: PUSH
32768: LD_VAR 0 3
32772: PLUS
32773: ST_TO_ADDR
32774: GO 32792
// length := i_to - i_from ;
32776: LD_ADDR_VAR 0 11
32780: PUSH
32781: LD_VAR 0 3
32785: PUSH
32786: LD_VAR 0 2
32790: MINUS
32791: ST_TO_ADDR
// end else
32792: GO 32855
// begin d := - 1 ;
32794: LD_ADDR_VAR 0 9
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: ST_TO_ADDR
// if i_from > i_to then
32803: LD_VAR 0 2
32807: PUSH
32808: LD_VAR 0 3
32812: GREATER
32813: IFFALSE 32833
// length := i_from - i_to else
32815: LD_ADDR_VAR 0 11
32819: PUSH
32820: LD_VAR 0 2
32824: PUSH
32825: LD_VAR 0 3
32829: MINUS
32830: ST_TO_ADDR
32831: GO 32855
// length := ( array - i_to ) + i_from ;
32833: LD_ADDR_VAR 0 11
32837: PUSH
32838: LD_VAR 0 1
32842: PUSH
32843: LD_VAR 0 3
32847: MINUS
32848: PUSH
32849: LD_VAR 0 2
32853: PLUS
32854: ST_TO_ADDR
// end ; if not length then
32855: LD_VAR 0 11
32859: NOT
32860: IFFALSE 32864
// exit ;
32862: GO 33022
// tmp := array ;
32864: LD_ADDR_VAR 0 10
32868: PUSH
32869: LD_VAR 0 1
32873: ST_TO_ADDR
// for i = 1 to length do
32874: LD_ADDR_VAR 0 6
32878: PUSH
32879: DOUBLE
32880: LD_INT 1
32882: DEC
32883: ST_TO_ADDR
32884: LD_VAR 0 11
32888: PUSH
32889: FOR_TO
32890: IFFALSE 33010
// begin for j = 1 to array do
32892: LD_ADDR_VAR 0 7
32896: PUSH
32897: DOUBLE
32898: LD_INT 1
32900: DEC
32901: ST_TO_ADDR
32902: LD_VAR 0 1
32906: PUSH
32907: FOR_TO
32908: IFFALSE 32996
// begin k := j + d ;
32910: LD_ADDR_VAR 0 8
32914: PUSH
32915: LD_VAR 0 7
32919: PUSH
32920: LD_VAR 0 9
32924: PLUS
32925: ST_TO_ADDR
// if k > array then
32926: LD_VAR 0 8
32930: PUSH
32931: LD_VAR 0 1
32935: GREATER
32936: IFFALSE 32946
// k := 1 ;
32938: LD_ADDR_VAR 0 8
32942: PUSH
32943: LD_INT 1
32945: ST_TO_ADDR
// if not k then
32946: LD_VAR 0 8
32950: NOT
32951: IFFALSE 32963
// k := array ;
32953: LD_ADDR_VAR 0 8
32957: PUSH
32958: LD_VAR 0 1
32962: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32963: LD_ADDR_VAR 0 10
32967: PUSH
32968: LD_VAR 0 10
32972: PPUSH
32973: LD_VAR 0 8
32977: PPUSH
32978: LD_VAR 0 1
32982: PUSH
32983: LD_VAR 0 7
32987: ARRAY
32988: PPUSH
32989: CALL_OW 1
32993: ST_TO_ADDR
// end ;
32994: GO 32907
32996: POP
32997: POP
// array := tmp ;
32998: LD_ADDR_VAR 0 1
33002: PUSH
33003: LD_VAR 0 10
33007: ST_TO_ADDR
// end ;
33008: GO 32889
33010: POP
33011: POP
// result := array ;
33012: LD_ADDR_VAR 0 5
33016: PUSH
33017: LD_VAR 0 1
33021: ST_TO_ADDR
// end ;
33022: LD_VAR 0 5
33026: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33027: LD_INT 0
33029: PPUSH
33030: PPUSH
// result := 0 ;
33031: LD_ADDR_VAR 0 3
33035: PUSH
33036: LD_INT 0
33038: ST_TO_ADDR
// if not array or not value in array then
33039: LD_VAR 0 1
33043: NOT
33044: PUSH
33045: LD_VAR 0 2
33049: PUSH
33050: LD_VAR 0 1
33054: IN
33055: NOT
33056: OR
33057: IFFALSE 33061
// exit ;
33059: GO 33115
// for i = 1 to array do
33061: LD_ADDR_VAR 0 4
33065: PUSH
33066: DOUBLE
33067: LD_INT 1
33069: DEC
33070: ST_TO_ADDR
33071: LD_VAR 0 1
33075: PUSH
33076: FOR_TO
33077: IFFALSE 33113
// if value = array [ i ] then
33079: LD_VAR 0 2
33083: PUSH
33084: LD_VAR 0 1
33088: PUSH
33089: LD_VAR 0 4
33093: ARRAY
33094: EQUAL
33095: IFFALSE 33111
// begin result := i ;
33097: LD_ADDR_VAR 0 3
33101: PUSH
33102: LD_VAR 0 4
33106: ST_TO_ADDR
// exit ;
33107: POP
33108: POP
33109: GO 33115
// end ;
33111: GO 33076
33113: POP
33114: POP
// end ;
33115: LD_VAR 0 3
33119: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33120: LD_INT 0
33122: PPUSH
// vc_chassis := chassis ;
33123: LD_ADDR_OWVAR 37
33127: PUSH
33128: LD_VAR 0 1
33132: ST_TO_ADDR
// vc_engine := engine ;
33133: LD_ADDR_OWVAR 39
33137: PUSH
33138: LD_VAR 0 2
33142: ST_TO_ADDR
// vc_control := control ;
33143: LD_ADDR_OWVAR 38
33147: PUSH
33148: LD_VAR 0 3
33152: ST_TO_ADDR
// vc_weapon := weapon ;
33153: LD_ADDR_OWVAR 40
33157: PUSH
33158: LD_VAR 0 4
33162: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33163: LD_ADDR_OWVAR 41
33167: PUSH
33168: LD_VAR 0 5
33172: ST_TO_ADDR
// end ;
33173: LD_VAR 0 6
33177: RET
// export function WantPlant ( unit ) ; var task ; begin
33178: LD_INT 0
33180: PPUSH
33181: PPUSH
// result := false ;
33182: LD_ADDR_VAR 0 2
33186: PUSH
33187: LD_INT 0
33189: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33190: LD_ADDR_VAR 0 3
33194: PUSH
33195: LD_VAR 0 1
33199: PPUSH
33200: CALL_OW 437
33204: ST_TO_ADDR
// if task then
33205: LD_VAR 0 3
33209: IFFALSE 33237
// if task [ 1 ] [ 1 ] = p then
33211: LD_VAR 0 3
33215: PUSH
33216: LD_INT 1
33218: ARRAY
33219: PUSH
33220: LD_INT 1
33222: ARRAY
33223: PUSH
33224: LD_STRING p
33226: EQUAL
33227: IFFALSE 33237
// result := true ;
33229: LD_ADDR_VAR 0 2
33233: PUSH
33234: LD_INT 1
33236: ST_TO_ADDR
// end ;
33237: LD_VAR 0 2
33241: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33242: LD_INT 0
33244: PPUSH
33245: PPUSH
33246: PPUSH
33247: PPUSH
// if pos < 1 then
33248: LD_VAR 0 2
33252: PUSH
33253: LD_INT 1
33255: LESS
33256: IFFALSE 33260
// exit ;
33258: GO 33563
// if pos = 1 then
33260: LD_VAR 0 2
33264: PUSH
33265: LD_INT 1
33267: EQUAL
33268: IFFALSE 33301
// result := Replace ( arr , pos [ 1 ] , value ) else
33270: LD_ADDR_VAR 0 4
33274: PUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: LD_VAR 0 2
33284: PUSH
33285: LD_INT 1
33287: ARRAY
33288: PPUSH
33289: LD_VAR 0 3
33293: PPUSH
33294: CALL_OW 1
33298: ST_TO_ADDR
33299: GO 33563
// begin tmp := arr ;
33301: LD_ADDR_VAR 0 6
33305: PUSH
33306: LD_VAR 0 1
33310: ST_TO_ADDR
// s_arr := [ tmp ] ;
33311: LD_ADDR_VAR 0 7
33315: PUSH
33316: LD_VAR 0 6
33320: PUSH
33321: EMPTY
33322: LIST
33323: ST_TO_ADDR
// for i = 1 to pos - 1 do
33324: LD_ADDR_VAR 0 5
33328: PUSH
33329: DOUBLE
33330: LD_INT 1
33332: DEC
33333: ST_TO_ADDR
33334: LD_VAR 0 2
33338: PUSH
33339: LD_INT 1
33341: MINUS
33342: PUSH
33343: FOR_TO
33344: IFFALSE 33389
// begin tmp := tmp [ pos [ i ] ] ;
33346: LD_ADDR_VAR 0 6
33350: PUSH
33351: LD_VAR 0 6
33355: PUSH
33356: LD_VAR 0 2
33360: PUSH
33361: LD_VAR 0 5
33365: ARRAY
33366: ARRAY
33367: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33368: LD_ADDR_VAR 0 7
33372: PUSH
33373: LD_VAR 0 7
33377: PUSH
33378: LD_VAR 0 6
33382: PUSH
33383: EMPTY
33384: LIST
33385: ADD
33386: ST_TO_ADDR
// end ;
33387: GO 33343
33389: POP
33390: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33391: LD_ADDR_VAR 0 6
33395: PUSH
33396: LD_VAR 0 6
33400: PPUSH
33401: LD_VAR 0 2
33405: PUSH
33406: LD_VAR 0 2
33410: ARRAY
33411: PPUSH
33412: LD_VAR 0 3
33416: PPUSH
33417: CALL_OW 1
33421: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33422: LD_ADDR_VAR 0 7
33426: PUSH
33427: LD_VAR 0 7
33431: PPUSH
33432: LD_VAR 0 7
33436: PPUSH
33437: LD_VAR 0 6
33441: PPUSH
33442: CALL_OW 1
33446: ST_TO_ADDR
// for i = s_arr downto 2 do
33447: LD_ADDR_VAR 0 5
33451: PUSH
33452: DOUBLE
33453: LD_VAR 0 7
33457: INC
33458: ST_TO_ADDR
33459: LD_INT 2
33461: PUSH
33462: FOR_DOWNTO
33463: IFFALSE 33547
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33465: LD_ADDR_VAR 0 6
33469: PUSH
33470: LD_VAR 0 7
33474: PUSH
33475: LD_VAR 0 5
33479: PUSH
33480: LD_INT 1
33482: MINUS
33483: ARRAY
33484: PPUSH
33485: LD_VAR 0 2
33489: PUSH
33490: LD_VAR 0 5
33494: PUSH
33495: LD_INT 1
33497: MINUS
33498: ARRAY
33499: PPUSH
33500: LD_VAR 0 7
33504: PUSH
33505: LD_VAR 0 5
33509: ARRAY
33510: PPUSH
33511: CALL_OW 1
33515: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33516: LD_ADDR_VAR 0 7
33520: PUSH
33521: LD_VAR 0 7
33525: PPUSH
33526: LD_VAR 0 5
33530: PUSH
33531: LD_INT 1
33533: MINUS
33534: PPUSH
33535: LD_VAR 0 6
33539: PPUSH
33540: CALL_OW 1
33544: ST_TO_ADDR
// end ;
33545: GO 33462
33547: POP
33548: POP
// result := s_arr [ 1 ] ;
33549: LD_ADDR_VAR 0 4
33553: PUSH
33554: LD_VAR 0 7
33558: PUSH
33559: LD_INT 1
33561: ARRAY
33562: ST_TO_ADDR
// end ; end ;
33563: LD_VAR 0 4
33567: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33568: LD_INT 0
33570: PPUSH
33571: PPUSH
// if not list then
33572: LD_VAR 0 1
33576: NOT
33577: IFFALSE 33581
// exit ;
33579: GO 33672
// i := list [ pos1 ] ;
33581: LD_ADDR_VAR 0 5
33585: PUSH
33586: LD_VAR 0 1
33590: PUSH
33591: LD_VAR 0 2
33595: ARRAY
33596: ST_TO_ADDR
// if not i then
33597: LD_VAR 0 5
33601: NOT
33602: IFFALSE 33606
// exit ;
33604: GO 33672
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33606: LD_ADDR_VAR 0 1
33610: PUSH
33611: LD_VAR 0 1
33615: PPUSH
33616: LD_VAR 0 2
33620: PPUSH
33621: LD_VAR 0 1
33625: PUSH
33626: LD_VAR 0 3
33630: ARRAY
33631: PPUSH
33632: CALL_OW 1
33636: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33637: LD_ADDR_VAR 0 1
33641: PUSH
33642: LD_VAR 0 1
33646: PPUSH
33647: LD_VAR 0 3
33651: PPUSH
33652: LD_VAR 0 5
33656: PPUSH
33657: CALL_OW 1
33661: ST_TO_ADDR
// result := list ;
33662: LD_ADDR_VAR 0 4
33666: PUSH
33667: LD_VAR 0 1
33671: ST_TO_ADDR
// end ;
33672: LD_VAR 0 4
33676: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33677: LD_INT 0
33679: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33680: LD_ADDR_VAR 0 5
33684: PUSH
33685: LD_VAR 0 1
33689: PPUSH
33690: CALL_OW 250
33694: PPUSH
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 251
33704: PPUSH
33705: LD_VAR 0 2
33709: PPUSH
33710: LD_VAR 0 3
33714: PPUSH
33715: LD_VAR 0 4
33719: PPUSH
33720: CALL 33730 0 5
33724: ST_TO_ADDR
// end ;
33725: LD_VAR 0 5
33729: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33730: LD_INT 0
33732: PPUSH
33733: PPUSH
33734: PPUSH
33735: PPUSH
// if not list then
33736: LD_VAR 0 3
33740: NOT
33741: IFFALSE 33745
// exit ;
33743: GO 34133
// result := [ ] ;
33745: LD_ADDR_VAR 0 6
33749: PUSH
33750: EMPTY
33751: ST_TO_ADDR
// for i in list do
33752: LD_ADDR_VAR 0 7
33756: PUSH
33757: LD_VAR 0 3
33761: PUSH
33762: FOR_IN
33763: IFFALSE 33965
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33765: LD_ADDR_VAR 0 9
33769: PUSH
33770: LD_VAR 0 7
33774: PPUSH
33775: LD_VAR 0 1
33779: PPUSH
33780: LD_VAR 0 2
33784: PPUSH
33785: CALL_OW 297
33789: ST_TO_ADDR
// if not result then
33790: LD_VAR 0 6
33794: NOT
33795: IFFALSE 33821
// result := [ [ i , tmp ] ] else
33797: LD_ADDR_VAR 0 6
33801: PUSH
33802: LD_VAR 0 7
33806: PUSH
33807: LD_VAR 0 9
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: EMPTY
33817: LIST
33818: ST_TO_ADDR
33819: GO 33963
// begin if result [ result ] [ 2 ] < tmp then
33821: LD_VAR 0 6
33825: PUSH
33826: LD_VAR 0 6
33830: ARRAY
33831: PUSH
33832: LD_INT 2
33834: ARRAY
33835: PUSH
33836: LD_VAR 0 9
33840: LESS
33841: IFFALSE 33883
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33843: LD_ADDR_VAR 0 6
33847: PUSH
33848: LD_VAR 0 6
33852: PPUSH
33853: LD_VAR 0 6
33857: PUSH
33858: LD_INT 1
33860: PLUS
33861: PPUSH
33862: LD_VAR 0 7
33866: PUSH
33867: LD_VAR 0 9
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PPUSH
33876: CALL_OW 2
33880: ST_TO_ADDR
33881: GO 33963
// for j = 1 to result do
33883: LD_ADDR_VAR 0 8
33887: PUSH
33888: DOUBLE
33889: LD_INT 1
33891: DEC
33892: ST_TO_ADDR
33893: LD_VAR 0 6
33897: PUSH
33898: FOR_TO
33899: IFFALSE 33961
// begin if tmp < result [ j ] [ 2 ] then
33901: LD_VAR 0 9
33905: PUSH
33906: LD_VAR 0 6
33910: PUSH
33911: LD_VAR 0 8
33915: ARRAY
33916: PUSH
33917: LD_INT 2
33919: ARRAY
33920: LESS
33921: IFFALSE 33959
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33923: LD_ADDR_VAR 0 6
33927: PUSH
33928: LD_VAR 0 6
33932: PPUSH
33933: LD_VAR 0 8
33937: PPUSH
33938: LD_VAR 0 7
33942: PUSH
33943: LD_VAR 0 9
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PPUSH
33952: CALL_OW 2
33956: ST_TO_ADDR
// break ;
33957: GO 33961
// end ; end ;
33959: GO 33898
33961: POP
33962: POP
// end ; end ;
33963: GO 33762
33965: POP
33966: POP
// if result and not asc then
33967: LD_VAR 0 6
33971: PUSH
33972: LD_VAR 0 4
33976: NOT
33977: AND
33978: IFFALSE 34053
// begin tmp := result ;
33980: LD_ADDR_VAR 0 9
33984: PUSH
33985: LD_VAR 0 6
33989: ST_TO_ADDR
// for i = tmp downto 1 do
33990: LD_ADDR_VAR 0 7
33994: PUSH
33995: DOUBLE
33996: LD_VAR 0 9
34000: INC
34001: ST_TO_ADDR
34002: LD_INT 1
34004: PUSH
34005: FOR_DOWNTO
34006: IFFALSE 34051
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34008: LD_ADDR_VAR 0 6
34012: PUSH
34013: LD_VAR 0 6
34017: PPUSH
34018: LD_VAR 0 9
34022: PUSH
34023: LD_VAR 0 7
34027: MINUS
34028: PUSH
34029: LD_INT 1
34031: PLUS
34032: PPUSH
34033: LD_VAR 0 9
34037: PUSH
34038: LD_VAR 0 7
34042: ARRAY
34043: PPUSH
34044: CALL_OW 1
34048: ST_TO_ADDR
34049: GO 34005
34051: POP
34052: POP
// end ; tmp := [ ] ;
34053: LD_ADDR_VAR 0 9
34057: PUSH
34058: EMPTY
34059: ST_TO_ADDR
// if mode then
34060: LD_VAR 0 5
34064: IFFALSE 34133
// begin for i = 1 to result do
34066: LD_ADDR_VAR 0 7
34070: PUSH
34071: DOUBLE
34072: LD_INT 1
34074: DEC
34075: ST_TO_ADDR
34076: LD_VAR 0 6
34080: PUSH
34081: FOR_TO
34082: IFFALSE 34121
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34084: LD_ADDR_VAR 0 9
34088: PUSH
34089: LD_VAR 0 9
34093: PPUSH
34094: LD_VAR 0 7
34098: PPUSH
34099: LD_VAR 0 6
34103: PUSH
34104: LD_VAR 0 7
34108: ARRAY
34109: PUSH
34110: LD_INT 1
34112: ARRAY
34113: PPUSH
34114: CALL_OW 1
34118: ST_TO_ADDR
34119: GO 34081
34121: POP
34122: POP
// result := tmp ;
34123: LD_ADDR_VAR 0 6
34127: PUSH
34128: LD_VAR 0 9
34132: ST_TO_ADDR
// end ; end ;
34133: LD_VAR 0 6
34137: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34138: LD_INT 0
34140: PPUSH
34141: PPUSH
34142: PPUSH
34143: PPUSH
34144: PPUSH
34145: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34146: LD_ADDR_VAR 0 5
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: EMPTY
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: ST_TO_ADDR
// if not x or not y then
34168: LD_VAR 0 2
34172: NOT
34173: PUSH
34174: LD_VAR 0 3
34178: NOT
34179: OR
34180: IFFALSE 34184
// exit ;
34182: GO 35830
// if not range then
34184: LD_VAR 0 4
34188: NOT
34189: IFFALSE 34199
// range := 10 ;
34191: LD_ADDR_VAR 0 4
34195: PUSH
34196: LD_INT 10
34198: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34199: LD_ADDR_VAR 0 8
34203: PUSH
34204: LD_INT 81
34206: PUSH
34207: LD_VAR 0 1
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 92
34218: PUSH
34219: LD_VAR 0 2
34223: PUSH
34224: LD_VAR 0 3
34228: PUSH
34229: LD_VAR 0 4
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 3
34242: PUSH
34243: LD_INT 21
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: PPUSH
34262: CALL_OW 69
34266: ST_TO_ADDR
// if not tmp then
34267: LD_VAR 0 8
34271: NOT
34272: IFFALSE 34276
// exit ;
34274: GO 35830
// for i in tmp do
34276: LD_ADDR_VAR 0 6
34280: PUSH
34281: LD_VAR 0 8
34285: PUSH
34286: FOR_IN
34287: IFFALSE 35805
// begin points := [ 0 , 0 , 0 ] ;
34289: LD_ADDR_VAR 0 9
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: ST_TO_ADDR
// bpoints := 1 ;
34308: LD_ADDR_VAR 0 10
34312: PUSH
34313: LD_INT 1
34315: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34316: LD_VAR 0 6
34320: PPUSH
34321: CALL_OW 247
34325: PUSH
34326: LD_INT 1
34328: DOUBLE
34329: EQUAL
34330: IFTRUE 34334
34332: GO 34912
34334: POP
// begin if GetClass ( i ) = 1 then
34335: LD_VAR 0 6
34339: PPUSH
34340: CALL_OW 257
34344: PUSH
34345: LD_INT 1
34347: EQUAL
34348: IFFALSE 34369
// points := [ 10 , 5 , 3 ] ;
34350: LD_ADDR_VAR 0 9
34354: PUSH
34355: LD_INT 10
34357: PUSH
34358: LD_INT 5
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: LIST
34368: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34369: LD_VAR 0 6
34373: PPUSH
34374: CALL_OW 257
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: LD_INT 4
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: LIST
34392: IN
34393: IFFALSE 34414
// points := [ 3 , 2 , 1 ] ;
34395: LD_ADDR_VAR 0 9
34399: PUSH
34400: LD_INT 3
34402: PUSH
34403: LD_INT 2
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34414: LD_VAR 0 6
34418: PPUSH
34419: CALL_OW 257
34423: PUSH
34424: LD_INT 5
34426: EQUAL
34427: IFFALSE 34448
// points := [ 130 , 5 , 2 ] ;
34429: LD_ADDR_VAR 0 9
34433: PUSH
34434: LD_INT 130
34436: PUSH
34437: LD_INT 5
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34448: LD_VAR 0 6
34452: PPUSH
34453: CALL_OW 257
34457: PUSH
34458: LD_INT 8
34460: EQUAL
34461: IFFALSE 34482
// points := [ 35 , 35 , 30 ] ;
34463: LD_ADDR_VAR 0 9
34467: PUSH
34468: LD_INT 35
34470: PUSH
34471: LD_INT 35
34473: PUSH
34474: LD_INT 30
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: LIST
34481: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34482: LD_VAR 0 6
34486: PPUSH
34487: CALL_OW 257
34491: PUSH
34492: LD_INT 9
34494: EQUAL
34495: IFFALSE 34516
// points := [ 20 , 55 , 40 ] ;
34497: LD_ADDR_VAR 0 9
34501: PUSH
34502: LD_INT 20
34504: PUSH
34505: LD_INT 55
34507: PUSH
34508: LD_INT 40
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: LIST
34515: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34516: LD_VAR 0 6
34520: PPUSH
34521: CALL_OW 257
34525: PUSH
34526: LD_INT 12
34528: PUSH
34529: LD_INT 16
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: IN
34536: IFFALSE 34557
// points := [ 5 , 3 , 2 ] ;
34538: LD_ADDR_VAR 0 9
34542: PUSH
34543: LD_INT 5
34545: PUSH
34546: LD_INT 3
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34557: LD_VAR 0 6
34561: PPUSH
34562: CALL_OW 257
34566: PUSH
34567: LD_INT 17
34569: EQUAL
34570: IFFALSE 34591
// points := [ 100 , 50 , 75 ] ;
34572: LD_ADDR_VAR 0 9
34576: PUSH
34577: LD_INT 100
34579: PUSH
34580: LD_INT 50
34582: PUSH
34583: LD_INT 75
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: LIST
34590: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34591: LD_VAR 0 6
34595: PPUSH
34596: CALL_OW 257
34600: PUSH
34601: LD_INT 15
34603: EQUAL
34604: IFFALSE 34625
// points := [ 10 , 5 , 3 ] ;
34606: LD_ADDR_VAR 0 9
34610: PUSH
34611: LD_INT 10
34613: PUSH
34614: LD_INT 5
34616: PUSH
34617: LD_INT 3
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34625: LD_VAR 0 6
34629: PPUSH
34630: CALL_OW 257
34634: PUSH
34635: LD_INT 14
34637: EQUAL
34638: IFFALSE 34659
// points := [ 10 , 0 , 0 ] ;
34640: LD_ADDR_VAR 0 9
34644: PUSH
34645: LD_INT 10
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: LIST
34658: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34659: LD_VAR 0 6
34663: PPUSH
34664: CALL_OW 257
34668: PUSH
34669: LD_INT 11
34671: EQUAL
34672: IFFALSE 34693
// points := [ 30 , 10 , 5 ] ;
34674: LD_ADDR_VAR 0 9
34678: PUSH
34679: LD_INT 30
34681: PUSH
34682: LD_INT 10
34684: PUSH
34685: LD_INT 5
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34693: LD_VAR 0 1
34697: PPUSH
34698: LD_INT 5
34700: PPUSH
34701: CALL_OW 321
34705: PUSH
34706: LD_INT 2
34708: EQUAL
34709: IFFALSE 34726
// bpoints := bpoints * 1.8 ;
34711: LD_ADDR_VAR 0 10
34715: PUSH
34716: LD_VAR 0 10
34720: PUSH
34721: LD_REAL  1.80000000000000E+0000
34724: MUL
34725: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34726: LD_VAR 0 6
34730: PPUSH
34731: CALL_OW 257
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: LD_INT 3
34744: PUSH
34745: LD_INT 4
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: IN
34754: PUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: LD_INT 51
34762: PPUSH
34763: CALL_OW 321
34767: PUSH
34768: LD_INT 2
34770: EQUAL
34771: AND
34772: IFFALSE 34789
// bpoints := bpoints * 1.2 ;
34774: LD_ADDR_VAR 0 10
34778: PUSH
34779: LD_VAR 0 10
34783: PUSH
34784: LD_REAL  1.20000000000000E+0000
34787: MUL
34788: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34789: LD_VAR 0 6
34793: PPUSH
34794: CALL_OW 257
34798: PUSH
34799: LD_INT 5
34801: PUSH
34802: LD_INT 7
34804: PUSH
34805: LD_INT 9
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: IN
34813: PUSH
34814: LD_VAR 0 1
34818: PPUSH
34819: LD_INT 52
34821: PPUSH
34822: CALL_OW 321
34826: PUSH
34827: LD_INT 2
34829: EQUAL
34830: AND
34831: IFFALSE 34848
// bpoints := bpoints * 1.5 ;
34833: LD_ADDR_VAR 0 10
34837: PUSH
34838: LD_VAR 0 10
34842: PUSH
34843: LD_REAL  1.50000000000000E+0000
34846: MUL
34847: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34848: LD_VAR 0 1
34852: PPUSH
34853: LD_INT 66
34855: PPUSH
34856: CALL_OW 321
34860: PUSH
34861: LD_INT 2
34863: EQUAL
34864: IFFALSE 34881
// bpoints := bpoints * 1.1 ;
34866: LD_ADDR_VAR 0 10
34870: PUSH
34871: LD_VAR 0 10
34875: PUSH
34876: LD_REAL  1.10000000000000E+0000
34879: MUL
34880: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34881: LD_ADDR_VAR 0 10
34885: PUSH
34886: LD_VAR 0 10
34890: PUSH
34891: LD_VAR 0 6
34895: PPUSH
34896: LD_INT 1
34898: PPUSH
34899: CALL_OW 259
34903: PUSH
34904: LD_REAL  1.15000000000000E+0000
34907: MUL
34908: MUL
34909: ST_TO_ADDR
// end ; unit_vehicle :
34910: GO 35734
34912: LD_INT 2
34914: DOUBLE
34915: EQUAL
34916: IFTRUE 34920
34918: GO 35722
34920: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34921: LD_VAR 0 6
34925: PPUSH
34926: CALL_OW 264
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 42
34936: PUSH
34937: LD_INT 24
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: IN
34945: IFFALSE 34966
// points := [ 25 , 5 , 3 ] ;
34947: LD_ADDR_VAR 0 9
34951: PUSH
34952: LD_INT 25
34954: PUSH
34955: LD_INT 5
34957: PUSH
34958: LD_INT 3
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34966: LD_VAR 0 6
34970: PPUSH
34971: CALL_OW 264
34975: PUSH
34976: LD_INT 4
34978: PUSH
34979: LD_INT 43
34981: PUSH
34982: LD_INT 25
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: IN
34990: IFFALSE 35011
// points := [ 40 , 15 , 5 ] ;
34992: LD_ADDR_VAR 0 9
34996: PUSH
34997: LD_INT 40
34999: PUSH
35000: LD_INT 15
35002: PUSH
35003: LD_INT 5
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: LIST
35010: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35011: LD_VAR 0 6
35015: PPUSH
35016: CALL_OW 264
35020: PUSH
35021: LD_INT 3
35023: PUSH
35024: LD_INT 23
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: IN
35031: IFFALSE 35052
// points := [ 7 , 25 , 8 ] ;
35033: LD_ADDR_VAR 0 9
35037: PUSH
35038: LD_INT 7
35040: PUSH
35041: LD_INT 25
35043: PUSH
35044: LD_INT 8
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35052: LD_VAR 0 6
35056: PPUSH
35057: CALL_OW 264
35061: PUSH
35062: LD_INT 5
35064: PUSH
35065: LD_INT 27
35067: PUSH
35068: LD_INT 44
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: IN
35076: IFFALSE 35097
// points := [ 14 , 50 , 16 ] ;
35078: LD_ADDR_VAR 0 9
35082: PUSH
35083: LD_INT 14
35085: PUSH
35086: LD_INT 50
35088: PUSH
35089: LD_INT 16
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35097: LD_VAR 0 6
35101: PPUSH
35102: CALL_OW 264
35106: PUSH
35107: LD_INT 6
35109: PUSH
35110: LD_INT 46
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: IN
35117: IFFALSE 35138
// points := [ 32 , 120 , 70 ] ;
35119: LD_ADDR_VAR 0 9
35123: PUSH
35124: LD_INT 32
35126: PUSH
35127: LD_INT 120
35129: PUSH
35130: LD_INT 70
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35138: LD_VAR 0 6
35142: PPUSH
35143: CALL_OW 264
35147: PUSH
35148: LD_INT 7
35150: PUSH
35151: LD_INT 28
35153: PUSH
35154: LD_INT 45
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: LIST
35161: IN
35162: IFFALSE 35183
// points := [ 35 , 20 , 45 ] ;
35164: LD_ADDR_VAR 0 9
35168: PUSH
35169: LD_INT 35
35171: PUSH
35172: LD_INT 20
35174: PUSH
35175: LD_INT 45
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35183: LD_VAR 0 6
35187: PPUSH
35188: CALL_OW 264
35192: PUSH
35193: LD_INT 47
35195: PUSH
35196: EMPTY
35197: LIST
35198: IN
35199: IFFALSE 35220
// points := [ 67 , 45 , 75 ] ;
35201: LD_ADDR_VAR 0 9
35205: PUSH
35206: LD_INT 67
35208: PUSH
35209: LD_INT 45
35211: PUSH
35212: LD_INT 75
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: LIST
35219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35220: LD_VAR 0 6
35224: PPUSH
35225: CALL_OW 264
35229: PUSH
35230: LD_INT 26
35232: PUSH
35233: EMPTY
35234: LIST
35235: IN
35236: IFFALSE 35257
// points := [ 120 , 30 , 80 ] ;
35238: LD_ADDR_VAR 0 9
35242: PUSH
35243: LD_INT 120
35245: PUSH
35246: LD_INT 30
35248: PUSH
35249: LD_INT 80
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: LIST
35256: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35257: LD_VAR 0 6
35261: PPUSH
35262: CALL_OW 264
35266: PUSH
35267: LD_INT 22
35269: PUSH
35270: EMPTY
35271: LIST
35272: IN
35273: IFFALSE 35294
// points := [ 40 , 1 , 1 ] ;
35275: LD_ADDR_VAR 0 9
35279: PUSH
35280: LD_INT 40
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35294: LD_VAR 0 6
35298: PPUSH
35299: CALL_OW 264
35303: PUSH
35304: LD_INT 29
35306: PUSH
35307: EMPTY
35308: LIST
35309: IN
35310: IFFALSE 35331
// points := [ 70 , 200 , 400 ] ;
35312: LD_ADDR_VAR 0 9
35316: PUSH
35317: LD_INT 70
35319: PUSH
35320: LD_INT 200
35322: PUSH
35323: LD_INT 400
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35331: LD_VAR 0 6
35335: PPUSH
35336: CALL_OW 264
35340: PUSH
35341: LD_INT 14
35343: PUSH
35344: LD_INT 53
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: IN
35351: IFFALSE 35372
// points := [ 40 , 10 , 20 ] ;
35353: LD_ADDR_VAR 0 9
35357: PUSH
35358: LD_INT 40
35360: PUSH
35361: LD_INT 10
35363: PUSH
35364: LD_INT 20
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35372: LD_VAR 0 6
35376: PPUSH
35377: CALL_OW 264
35381: PUSH
35382: LD_INT 9
35384: PUSH
35385: EMPTY
35386: LIST
35387: IN
35388: IFFALSE 35409
// points := [ 5 , 70 , 20 ] ;
35390: LD_ADDR_VAR 0 9
35394: PUSH
35395: LD_INT 5
35397: PUSH
35398: LD_INT 70
35400: PUSH
35401: LD_INT 20
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35409: LD_VAR 0 6
35413: PPUSH
35414: CALL_OW 264
35418: PUSH
35419: LD_INT 10
35421: PUSH
35422: EMPTY
35423: LIST
35424: IN
35425: IFFALSE 35446
// points := [ 35 , 110 , 70 ] ;
35427: LD_ADDR_VAR 0 9
35431: PUSH
35432: LD_INT 35
35434: PUSH
35435: LD_INT 110
35437: PUSH
35438: LD_INT 70
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: LIST
35445: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35446: LD_VAR 0 6
35450: PPUSH
35451: CALL_OW 265
35455: PUSH
35456: LD_INT 25
35458: EQUAL
35459: IFFALSE 35480
// points := [ 80 , 65 , 100 ] ;
35461: LD_ADDR_VAR 0 9
35465: PUSH
35466: LD_INT 80
35468: PUSH
35469: LD_INT 65
35471: PUSH
35472: LD_INT 100
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: LIST
35479: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35480: LD_VAR 0 6
35484: PPUSH
35485: CALL_OW 263
35489: PUSH
35490: LD_INT 1
35492: EQUAL
35493: IFFALSE 35528
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35495: LD_ADDR_VAR 0 10
35499: PUSH
35500: LD_VAR 0 10
35504: PUSH
35505: LD_VAR 0 6
35509: PPUSH
35510: CALL_OW 311
35514: PPUSH
35515: LD_INT 3
35517: PPUSH
35518: CALL_OW 259
35522: PUSH
35523: LD_INT 4
35525: MUL
35526: MUL
35527: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35528: LD_VAR 0 6
35532: PPUSH
35533: CALL_OW 263
35537: PUSH
35538: LD_INT 2
35540: EQUAL
35541: IFFALSE 35592
// begin j := IsControledBy ( i ) ;
35543: LD_ADDR_VAR 0 7
35547: PUSH
35548: LD_VAR 0 6
35552: PPUSH
35553: CALL_OW 312
35557: ST_TO_ADDR
// if j then
35558: LD_VAR 0 7
35562: IFFALSE 35592
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35564: LD_ADDR_VAR 0 10
35568: PUSH
35569: LD_VAR 0 10
35573: PUSH
35574: LD_VAR 0 7
35578: PPUSH
35579: LD_INT 3
35581: PPUSH
35582: CALL_OW 259
35586: PUSH
35587: LD_INT 3
35589: MUL
35590: MUL
35591: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35592: LD_VAR 0 6
35596: PPUSH
35597: CALL_OW 264
35601: PUSH
35602: LD_INT 5
35604: PUSH
35605: LD_INT 6
35607: PUSH
35608: LD_INT 46
35610: PUSH
35611: LD_INT 44
35613: PUSH
35614: LD_INT 47
35616: PUSH
35617: LD_INT 45
35619: PUSH
35620: LD_INT 28
35622: PUSH
35623: LD_INT 7
35625: PUSH
35626: LD_INT 27
35628: PUSH
35629: LD_INT 29
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: IN
35644: PUSH
35645: LD_VAR 0 1
35649: PPUSH
35650: LD_INT 52
35652: PPUSH
35653: CALL_OW 321
35657: PUSH
35658: LD_INT 2
35660: EQUAL
35661: AND
35662: IFFALSE 35679
// bpoints := bpoints * 1.2 ;
35664: LD_ADDR_VAR 0 10
35668: PUSH
35669: LD_VAR 0 10
35673: PUSH
35674: LD_REAL  1.20000000000000E+0000
35677: MUL
35678: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35679: LD_VAR 0 6
35683: PPUSH
35684: CALL_OW 264
35688: PUSH
35689: LD_INT 6
35691: PUSH
35692: LD_INT 46
35694: PUSH
35695: LD_INT 47
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: IN
35703: IFFALSE 35720
// bpoints := bpoints * 1.2 ;
35705: LD_ADDR_VAR 0 10
35709: PUSH
35710: LD_VAR 0 10
35714: PUSH
35715: LD_REAL  1.20000000000000E+0000
35718: MUL
35719: ST_TO_ADDR
// end ; unit_building :
35720: GO 35734
35722: LD_INT 3
35724: DOUBLE
35725: EQUAL
35726: IFTRUE 35730
35728: GO 35733
35730: POP
// ; end ;
35731: GO 35734
35733: POP
// for j = 1 to 3 do
35734: LD_ADDR_VAR 0 7
35738: PUSH
35739: DOUBLE
35740: LD_INT 1
35742: DEC
35743: ST_TO_ADDR
35744: LD_INT 3
35746: PUSH
35747: FOR_TO
35748: IFFALSE 35801
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35750: LD_ADDR_VAR 0 5
35754: PUSH
35755: LD_VAR 0 5
35759: PPUSH
35760: LD_VAR 0 7
35764: PPUSH
35765: LD_VAR 0 5
35769: PUSH
35770: LD_VAR 0 7
35774: ARRAY
35775: PUSH
35776: LD_VAR 0 9
35780: PUSH
35781: LD_VAR 0 7
35785: ARRAY
35786: PUSH
35787: LD_VAR 0 10
35791: MUL
35792: PLUS
35793: PPUSH
35794: CALL_OW 1
35798: ST_TO_ADDR
35799: GO 35747
35801: POP
35802: POP
// end ;
35803: GO 34286
35805: POP
35806: POP
// result := Replace ( result , 4 , tmp ) ;
35807: LD_ADDR_VAR 0 5
35811: PUSH
35812: LD_VAR 0 5
35816: PPUSH
35817: LD_INT 4
35819: PPUSH
35820: LD_VAR 0 8
35824: PPUSH
35825: CALL_OW 1
35829: ST_TO_ADDR
// end ;
35830: LD_VAR 0 5
35834: RET
// export function DangerAtRange ( unit , range ) ; begin
35835: LD_INT 0
35837: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35838: LD_ADDR_VAR 0 3
35842: PUSH
35843: LD_VAR 0 1
35847: PPUSH
35848: CALL_OW 255
35852: PPUSH
35853: LD_VAR 0 1
35857: PPUSH
35858: CALL_OW 250
35862: PPUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 251
35872: PPUSH
35873: LD_VAR 0 2
35877: PPUSH
35878: CALL 34138 0 4
35882: ST_TO_ADDR
// end ;
35883: LD_VAR 0 3
35887: RET
// export function DangerInArea ( side , area ) ; begin
35888: LD_INT 0
35890: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35891: LD_ADDR_VAR 0 3
35895: PUSH
35896: LD_VAR 0 2
35900: PPUSH
35901: LD_INT 81
35903: PUSH
35904: LD_VAR 0 1
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PPUSH
35913: CALL_OW 70
35917: ST_TO_ADDR
// end ;
35918: LD_VAR 0 3
35922: RET
// export function IsExtension ( b ) ; begin
35923: LD_INT 0
35925: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35926: LD_ADDR_VAR 0 2
35930: PUSH
35931: LD_VAR 0 1
35935: PUSH
35936: LD_INT 23
35938: PUSH
35939: LD_INT 20
35941: PUSH
35942: LD_INT 22
35944: PUSH
35945: LD_INT 17
35947: PUSH
35948: LD_INT 24
35950: PUSH
35951: LD_INT 21
35953: PUSH
35954: LD_INT 19
35956: PUSH
35957: LD_INT 16
35959: PUSH
35960: LD_INT 25
35962: PUSH
35963: LD_INT 18
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: IN
35978: ST_TO_ADDR
// end ;
35979: LD_VAR 0 2
35983: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35984: LD_INT 0
35986: PPUSH
35987: PPUSH
35988: PPUSH
// result := [ ] ;
35989: LD_ADDR_VAR 0 4
35993: PUSH
35994: EMPTY
35995: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35996: LD_ADDR_VAR 0 5
36000: PUSH
36001: LD_VAR 0 2
36005: PPUSH
36006: LD_INT 21
36008: PUSH
36009: LD_INT 3
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PPUSH
36016: CALL_OW 70
36020: ST_TO_ADDR
// if not tmp then
36021: LD_VAR 0 5
36025: NOT
36026: IFFALSE 36030
// exit ;
36028: GO 36094
// if checkLink then
36030: LD_VAR 0 3
36034: IFFALSE 36084
// begin for i in tmp do
36036: LD_ADDR_VAR 0 6
36040: PUSH
36041: LD_VAR 0 5
36045: PUSH
36046: FOR_IN
36047: IFFALSE 36082
// if GetBase ( i ) <> base then
36049: LD_VAR 0 6
36053: PPUSH
36054: CALL_OW 274
36058: PUSH
36059: LD_VAR 0 1
36063: NONEQUAL
36064: IFFALSE 36080
// ComLinkToBase ( base , i ) ;
36066: LD_VAR 0 1
36070: PPUSH
36071: LD_VAR 0 6
36075: PPUSH
36076: CALL_OW 169
36080: GO 36046
36082: POP
36083: POP
// end ; result := tmp ;
36084: LD_ADDR_VAR 0 4
36088: PUSH
36089: LD_VAR 0 5
36093: ST_TO_ADDR
// end ;
36094: LD_VAR 0 4
36098: RET
// export function ComComplete ( units , b ) ; var i ; begin
36099: LD_INT 0
36101: PPUSH
36102: PPUSH
// if not units then
36103: LD_VAR 0 1
36107: NOT
36108: IFFALSE 36112
// exit ;
36110: GO 36202
// for i in units do
36112: LD_ADDR_VAR 0 4
36116: PUSH
36117: LD_VAR 0 1
36121: PUSH
36122: FOR_IN
36123: IFFALSE 36200
// if BuildingStatus ( b ) = bs_build then
36125: LD_VAR 0 2
36129: PPUSH
36130: CALL_OW 461
36134: PUSH
36135: LD_INT 1
36137: EQUAL
36138: IFFALSE 36198
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36140: LD_VAR 0 4
36144: PPUSH
36145: LD_STRING h
36147: PUSH
36148: LD_VAR 0 2
36152: PPUSH
36153: CALL_OW 250
36157: PUSH
36158: LD_VAR 0 2
36162: PPUSH
36163: CALL_OW 251
36167: PUSH
36168: LD_VAR 0 2
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: PUSH
36191: EMPTY
36192: LIST
36193: PPUSH
36194: CALL_OW 446
36198: GO 36122
36200: POP
36201: POP
// end ;
36202: LD_VAR 0 3
36206: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36207: LD_INT 0
36209: PPUSH
36210: PPUSH
36211: PPUSH
36212: PPUSH
36213: PPUSH
36214: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36215: LD_VAR 0 1
36219: NOT
36220: PUSH
36221: LD_VAR 0 1
36225: PPUSH
36226: CALL_OW 263
36230: PUSH
36231: LD_INT 2
36233: EQUAL
36234: NOT
36235: OR
36236: IFFALSE 36240
// exit ;
36238: GO 36556
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36240: LD_ADDR_VAR 0 6
36244: PUSH
36245: LD_INT 22
36247: PUSH
36248: LD_VAR 0 1
36252: PPUSH
36253: CALL_OW 255
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: LD_INT 30
36267: PUSH
36268: LD_INT 36
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 34
36277: PUSH
36278: LD_INT 31
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PPUSH
36294: CALL_OW 69
36298: ST_TO_ADDR
// if not tmp then
36299: LD_VAR 0 6
36303: NOT
36304: IFFALSE 36308
// exit ;
36306: GO 36556
// result := [ ] ;
36308: LD_ADDR_VAR 0 2
36312: PUSH
36313: EMPTY
36314: ST_TO_ADDR
// for i in tmp do
36315: LD_ADDR_VAR 0 3
36319: PUSH
36320: LD_VAR 0 6
36324: PUSH
36325: FOR_IN
36326: IFFALSE 36397
// begin t := UnitsInside ( i ) ;
36328: LD_ADDR_VAR 0 4
36332: PUSH
36333: LD_VAR 0 3
36337: PPUSH
36338: CALL_OW 313
36342: ST_TO_ADDR
// if t then
36343: LD_VAR 0 4
36347: IFFALSE 36395
// for j in t do
36349: LD_ADDR_VAR 0 7
36353: PUSH
36354: LD_VAR 0 4
36358: PUSH
36359: FOR_IN
36360: IFFALSE 36393
// result := Insert ( result , result + 1 , j ) ;
36362: LD_ADDR_VAR 0 2
36366: PUSH
36367: LD_VAR 0 2
36371: PPUSH
36372: LD_VAR 0 2
36376: PUSH
36377: LD_INT 1
36379: PLUS
36380: PPUSH
36381: LD_VAR 0 7
36385: PPUSH
36386: CALL_OW 2
36390: ST_TO_ADDR
36391: GO 36359
36393: POP
36394: POP
// end ;
36395: GO 36325
36397: POP
36398: POP
// if not result then
36399: LD_VAR 0 2
36403: NOT
36404: IFFALSE 36408
// exit ;
36406: GO 36556
// mech := result [ 1 ] ;
36408: LD_ADDR_VAR 0 5
36412: PUSH
36413: LD_VAR 0 2
36417: PUSH
36418: LD_INT 1
36420: ARRAY
36421: ST_TO_ADDR
// if result > 1 then
36422: LD_VAR 0 2
36426: PUSH
36427: LD_INT 1
36429: GREATER
36430: IFFALSE 36542
// for i = 2 to result do
36432: LD_ADDR_VAR 0 3
36436: PUSH
36437: DOUBLE
36438: LD_INT 2
36440: DEC
36441: ST_TO_ADDR
36442: LD_VAR 0 2
36446: PUSH
36447: FOR_TO
36448: IFFALSE 36540
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36450: LD_ADDR_VAR 0 4
36454: PUSH
36455: LD_VAR 0 2
36459: PUSH
36460: LD_VAR 0 3
36464: ARRAY
36465: PPUSH
36466: LD_INT 3
36468: PPUSH
36469: CALL_OW 259
36473: PUSH
36474: LD_VAR 0 2
36478: PUSH
36479: LD_VAR 0 3
36483: ARRAY
36484: PPUSH
36485: CALL_OW 432
36489: MINUS
36490: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36491: LD_VAR 0 4
36495: PUSH
36496: LD_VAR 0 5
36500: PPUSH
36501: LD_INT 3
36503: PPUSH
36504: CALL_OW 259
36508: PUSH
36509: LD_VAR 0 5
36513: PPUSH
36514: CALL_OW 432
36518: MINUS
36519: GREATEREQUAL
36520: IFFALSE 36538
// mech := result [ i ] ;
36522: LD_ADDR_VAR 0 5
36526: PUSH
36527: LD_VAR 0 2
36531: PUSH
36532: LD_VAR 0 3
36536: ARRAY
36537: ST_TO_ADDR
// end ;
36538: GO 36447
36540: POP
36541: POP
// ComLinkTo ( vehicle , mech ) ;
36542: LD_VAR 0 1
36546: PPUSH
36547: LD_VAR 0 5
36551: PPUSH
36552: CALL_OW 135
// end ;
36556: LD_VAR 0 2
36560: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36561: LD_INT 0
36563: PPUSH
36564: PPUSH
36565: PPUSH
36566: PPUSH
36567: PPUSH
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
// result := [ ] ;
36576: LD_ADDR_VAR 0 7
36580: PUSH
36581: EMPTY
36582: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36583: LD_VAR 0 1
36587: PPUSH
36588: CALL_OW 266
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: IN
36603: NOT
36604: IFFALSE 36608
// exit ;
36606: GO 38242
// if name then
36608: LD_VAR 0 3
36612: IFFALSE 36628
// SetBName ( base_dep , name ) ;
36614: LD_VAR 0 1
36618: PPUSH
36619: LD_VAR 0 3
36623: PPUSH
36624: CALL_OW 500
// base := GetBase ( base_dep ) ;
36628: LD_ADDR_VAR 0 15
36632: PUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: CALL_OW 274
36642: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36643: LD_ADDR_VAR 0 16
36647: PUSH
36648: LD_VAR 0 1
36652: PPUSH
36653: CALL_OW 255
36657: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36658: LD_ADDR_VAR 0 17
36662: PUSH
36663: LD_VAR 0 1
36667: PPUSH
36668: CALL_OW 248
36672: ST_TO_ADDR
// if sources then
36673: LD_VAR 0 5
36677: IFFALSE 36724
// for i = 1 to 3 do
36679: LD_ADDR_VAR 0 8
36683: PUSH
36684: DOUBLE
36685: LD_INT 1
36687: DEC
36688: ST_TO_ADDR
36689: LD_INT 3
36691: PUSH
36692: FOR_TO
36693: IFFALSE 36722
// AddResourceType ( base , i , sources [ i ] ) ;
36695: LD_VAR 0 15
36699: PPUSH
36700: LD_VAR 0 8
36704: PPUSH
36705: LD_VAR 0 5
36709: PUSH
36710: LD_VAR 0 8
36714: ARRAY
36715: PPUSH
36716: CALL_OW 276
36720: GO 36692
36722: POP
36723: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36724: LD_ADDR_VAR 0 18
36728: PUSH
36729: LD_VAR 0 15
36733: PPUSH
36734: LD_VAR 0 2
36738: PPUSH
36739: LD_INT 1
36741: PPUSH
36742: CALL 35984 0 3
36746: ST_TO_ADDR
// InitHc ;
36747: CALL_OW 19
// InitUc ;
36751: CALL_OW 18
// uc_side := side ;
36755: LD_ADDR_OWVAR 20
36759: PUSH
36760: LD_VAR 0 16
36764: ST_TO_ADDR
// uc_nation := nation ;
36765: LD_ADDR_OWVAR 21
36769: PUSH
36770: LD_VAR 0 17
36774: ST_TO_ADDR
// if buildings then
36775: LD_VAR 0 18
36779: IFFALSE 38101
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36781: LD_ADDR_VAR 0 19
36785: PUSH
36786: LD_VAR 0 18
36790: PPUSH
36791: LD_INT 2
36793: PUSH
36794: LD_INT 30
36796: PUSH
36797: LD_INT 29
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 30
36806: PUSH
36807: LD_INT 30
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: PPUSH
36819: CALL_OW 72
36823: ST_TO_ADDR
// if tmp then
36824: LD_VAR 0 19
36828: IFFALSE 36876
// for i in tmp do
36830: LD_ADDR_VAR 0 8
36834: PUSH
36835: LD_VAR 0 19
36839: PUSH
36840: FOR_IN
36841: IFFALSE 36874
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36843: LD_VAR 0 8
36847: PPUSH
36848: CALL_OW 250
36852: PPUSH
36853: LD_VAR 0 8
36857: PPUSH
36858: CALL_OW 251
36862: PPUSH
36863: LD_VAR 0 16
36867: PPUSH
36868: CALL_OW 441
36872: GO 36840
36874: POP
36875: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36876: LD_VAR 0 18
36880: PPUSH
36881: LD_INT 2
36883: PUSH
36884: LD_INT 30
36886: PUSH
36887: LD_INT 32
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 30
36896: PUSH
36897: LD_INT 33
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: PPUSH
36909: CALL_OW 72
36913: IFFALSE 37001
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36915: LD_ADDR_VAR 0 8
36919: PUSH
36920: LD_VAR 0 18
36924: PPUSH
36925: LD_INT 2
36927: PUSH
36928: LD_INT 30
36930: PUSH
36931: LD_INT 32
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 30
36940: PUSH
36941: LD_INT 33
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: PPUSH
36953: CALL_OW 72
36957: PUSH
36958: FOR_IN
36959: IFFALSE 36999
// begin if not GetBWeapon ( i ) then
36961: LD_VAR 0 8
36965: PPUSH
36966: CALL_OW 269
36970: NOT
36971: IFFALSE 36997
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36973: LD_VAR 0 8
36977: PPUSH
36978: LD_VAR 0 8
36982: PPUSH
36983: LD_VAR 0 2
36987: PPUSH
36988: CALL 38247 0 2
36992: PPUSH
36993: CALL_OW 431
// end ;
36997: GO 36958
36999: POP
37000: POP
// end ; for i = 1 to personel do
37001: LD_ADDR_VAR 0 8
37005: PUSH
37006: DOUBLE
37007: LD_INT 1
37009: DEC
37010: ST_TO_ADDR
37011: LD_VAR 0 6
37015: PUSH
37016: FOR_TO
37017: IFFALSE 38081
// begin if i > 4 then
37019: LD_VAR 0 8
37023: PUSH
37024: LD_INT 4
37026: GREATER
37027: IFFALSE 37031
// break ;
37029: GO 38081
// case i of 1 :
37031: LD_VAR 0 8
37035: PUSH
37036: LD_INT 1
37038: DOUBLE
37039: EQUAL
37040: IFTRUE 37044
37042: GO 37124
37044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37045: LD_ADDR_VAR 0 12
37049: PUSH
37050: LD_VAR 0 18
37054: PPUSH
37055: LD_INT 22
37057: PUSH
37058: LD_VAR 0 16
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 58
37069: PUSH
37070: EMPTY
37071: LIST
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: LD_INT 30
37078: PUSH
37079: LD_INT 32
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 30
37088: PUSH
37089: LD_INT 4
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 30
37098: PUSH
37099: LD_INT 5
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: PPUSH
37117: CALL_OW 72
37121: ST_TO_ADDR
37122: GO 37346
37124: LD_INT 2
37126: DOUBLE
37127: EQUAL
37128: IFTRUE 37132
37130: GO 37194
37132: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37133: LD_ADDR_VAR 0 12
37137: PUSH
37138: LD_VAR 0 18
37142: PPUSH
37143: LD_INT 22
37145: PUSH
37146: LD_VAR 0 16
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: LD_INT 30
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 30
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: LIST
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PPUSH
37187: CALL_OW 72
37191: ST_TO_ADDR
37192: GO 37346
37194: LD_INT 3
37196: DOUBLE
37197: EQUAL
37198: IFTRUE 37202
37200: GO 37264
37202: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37203: LD_ADDR_VAR 0 12
37207: PUSH
37208: LD_VAR 0 18
37212: PPUSH
37213: LD_INT 22
37215: PUSH
37216: LD_VAR 0 16
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 2
37227: PUSH
37228: LD_INT 30
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 30
37240: PUSH
37241: LD_INT 3
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PPUSH
37257: CALL_OW 72
37261: ST_TO_ADDR
37262: GO 37346
37264: LD_INT 4
37266: DOUBLE
37267: EQUAL
37268: IFTRUE 37272
37270: GO 37345
37272: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37273: LD_ADDR_VAR 0 12
37277: PUSH
37278: LD_VAR 0 18
37282: PPUSH
37283: LD_INT 22
37285: PUSH
37286: LD_VAR 0 16
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: PUSH
37298: LD_INT 30
37300: PUSH
37301: LD_INT 6
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 30
37310: PUSH
37311: LD_INT 7
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 30
37320: PUSH
37321: LD_INT 8
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PPUSH
37338: CALL_OW 72
37342: ST_TO_ADDR
37343: GO 37346
37345: POP
// if i = 1 then
37346: LD_VAR 0 8
37350: PUSH
37351: LD_INT 1
37353: EQUAL
37354: IFFALSE 37465
// begin tmp := [ ] ;
37356: LD_ADDR_VAR 0 19
37360: PUSH
37361: EMPTY
37362: ST_TO_ADDR
// for j in f do
37363: LD_ADDR_VAR 0 9
37367: PUSH
37368: LD_VAR 0 12
37372: PUSH
37373: FOR_IN
37374: IFFALSE 37447
// if GetBType ( j ) = b_bunker then
37376: LD_VAR 0 9
37380: PPUSH
37381: CALL_OW 266
37385: PUSH
37386: LD_INT 32
37388: EQUAL
37389: IFFALSE 37416
// tmp := Insert ( tmp , 1 , j ) else
37391: LD_ADDR_VAR 0 19
37395: PUSH
37396: LD_VAR 0 19
37400: PPUSH
37401: LD_INT 1
37403: PPUSH
37404: LD_VAR 0 9
37408: PPUSH
37409: CALL_OW 2
37413: ST_TO_ADDR
37414: GO 37445
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37416: LD_ADDR_VAR 0 19
37420: PUSH
37421: LD_VAR 0 19
37425: PPUSH
37426: LD_VAR 0 19
37430: PUSH
37431: LD_INT 1
37433: PLUS
37434: PPUSH
37435: LD_VAR 0 9
37439: PPUSH
37440: CALL_OW 2
37444: ST_TO_ADDR
37445: GO 37373
37447: POP
37448: POP
// if tmp then
37449: LD_VAR 0 19
37453: IFFALSE 37465
// f := tmp ;
37455: LD_ADDR_VAR 0 12
37459: PUSH
37460: LD_VAR 0 19
37464: ST_TO_ADDR
// end ; x := personel [ i ] ;
37465: LD_ADDR_VAR 0 13
37469: PUSH
37470: LD_VAR 0 6
37474: PUSH
37475: LD_VAR 0 8
37479: ARRAY
37480: ST_TO_ADDR
// if x = - 1 then
37481: LD_VAR 0 13
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: EQUAL
37490: IFFALSE 37699
// begin for j in f do
37492: LD_ADDR_VAR 0 9
37496: PUSH
37497: LD_VAR 0 12
37501: PUSH
37502: FOR_IN
37503: IFFALSE 37695
// repeat InitHc ;
37505: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37509: LD_VAR 0 9
37513: PPUSH
37514: CALL_OW 266
37518: PUSH
37519: LD_INT 5
37521: EQUAL
37522: IFFALSE 37592
// begin if UnitsInside ( j ) < 3 then
37524: LD_VAR 0 9
37528: PPUSH
37529: CALL_OW 313
37533: PUSH
37534: LD_INT 3
37536: LESS
37537: IFFALSE 37573
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37539: LD_INT 0
37541: PPUSH
37542: LD_INT 5
37544: PUSH
37545: LD_INT 8
37547: PUSH
37548: LD_INT 9
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: LIST
37555: PUSH
37556: LD_VAR 0 17
37560: ARRAY
37561: PPUSH
37562: LD_VAR 0 4
37566: PPUSH
37567: CALL_OW 380
37571: GO 37590
// PrepareHuman ( false , i , skill ) ;
37573: LD_INT 0
37575: PPUSH
37576: LD_VAR 0 8
37580: PPUSH
37581: LD_VAR 0 4
37585: PPUSH
37586: CALL_OW 380
// end else
37590: GO 37609
// PrepareHuman ( false , i , skill ) ;
37592: LD_INT 0
37594: PPUSH
37595: LD_VAR 0 8
37599: PPUSH
37600: LD_VAR 0 4
37604: PPUSH
37605: CALL_OW 380
// un := CreateHuman ;
37609: LD_ADDR_VAR 0 14
37613: PUSH
37614: CALL_OW 44
37618: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37619: LD_ADDR_VAR 0 7
37623: PUSH
37624: LD_VAR 0 7
37628: PPUSH
37629: LD_INT 1
37631: PPUSH
37632: LD_VAR 0 14
37636: PPUSH
37637: CALL_OW 2
37641: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37642: LD_VAR 0 14
37646: PPUSH
37647: LD_VAR 0 9
37651: PPUSH
37652: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37656: LD_VAR 0 9
37660: PPUSH
37661: CALL_OW 313
37665: PUSH
37666: LD_INT 6
37668: EQUAL
37669: PUSH
37670: LD_VAR 0 9
37674: PPUSH
37675: CALL_OW 266
37679: PUSH
37680: LD_INT 32
37682: PUSH
37683: LD_INT 31
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: IN
37690: OR
37691: IFFALSE 37505
37693: GO 37502
37695: POP
37696: POP
// end else
37697: GO 38079
// for j = 1 to x do
37699: LD_ADDR_VAR 0 9
37703: PUSH
37704: DOUBLE
37705: LD_INT 1
37707: DEC
37708: ST_TO_ADDR
37709: LD_VAR 0 13
37713: PUSH
37714: FOR_TO
37715: IFFALSE 38077
// begin InitHc ;
37717: CALL_OW 19
// if not f then
37721: LD_VAR 0 12
37725: NOT
37726: IFFALSE 37815
// begin PrepareHuman ( false , i , skill ) ;
37728: LD_INT 0
37730: PPUSH
37731: LD_VAR 0 8
37735: PPUSH
37736: LD_VAR 0 4
37740: PPUSH
37741: CALL_OW 380
// un := CreateHuman ;
37745: LD_ADDR_VAR 0 14
37749: PUSH
37750: CALL_OW 44
37754: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37755: LD_ADDR_VAR 0 7
37759: PUSH
37760: LD_VAR 0 7
37764: PPUSH
37765: LD_INT 1
37767: PPUSH
37768: LD_VAR 0 14
37772: PPUSH
37773: CALL_OW 2
37777: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37778: LD_VAR 0 14
37782: PPUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 250
37792: PPUSH
37793: LD_VAR 0 1
37797: PPUSH
37798: CALL_OW 251
37802: PPUSH
37803: LD_INT 10
37805: PPUSH
37806: LD_INT 0
37808: PPUSH
37809: CALL_OW 50
// continue ;
37813: GO 37714
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37815: LD_VAR 0 12
37819: PUSH
37820: LD_INT 1
37822: ARRAY
37823: PPUSH
37824: CALL_OW 313
37828: PUSH
37829: LD_VAR 0 12
37833: PUSH
37834: LD_INT 1
37836: ARRAY
37837: PPUSH
37838: CALL_OW 266
37842: PUSH
37843: LD_INT 32
37845: PUSH
37846: LD_INT 31
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: IN
37853: AND
37854: PUSH
37855: LD_VAR 0 12
37859: PUSH
37860: LD_INT 1
37862: ARRAY
37863: PPUSH
37864: CALL_OW 313
37868: PUSH
37869: LD_INT 6
37871: EQUAL
37872: OR
37873: IFFALSE 37893
// f := Delete ( f , 1 ) ;
37875: LD_ADDR_VAR 0 12
37879: PUSH
37880: LD_VAR 0 12
37884: PPUSH
37885: LD_INT 1
37887: PPUSH
37888: CALL_OW 3
37892: ST_TO_ADDR
// if not f then
37893: LD_VAR 0 12
37897: NOT
37898: IFFALSE 37916
// begin x := x + 2 ;
37900: LD_ADDR_VAR 0 13
37904: PUSH
37905: LD_VAR 0 13
37909: PUSH
37910: LD_INT 2
37912: PLUS
37913: ST_TO_ADDR
// continue ;
37914: GO 37714
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37916: LD_VAR 0 12
37920: PUSH
37921: LD_INT 1
37923: ARRAY
37924: PPUSH
37925: CALL_OW 266
37929: PUSH
37930: LD_INT 5
37932: EQUAL
37933: IFFALSE 38007
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37935: LD_VAR 0 12
37939: PUSH
37940: LD_INT 1
37942: ARRAY
37943: PPUSH
37944: CALL_OW 313
37948: PUSH
37949: LD_INT 3
37951: LESS
37952: IFFALSE 37988
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37954: LD_INT 0
37956: PPUSH
37957: LD_INT 5
37959: PUSH
37960: LD_INT 8
37962: PUSH
37963: LD_INT 9
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: PUSH
37971: LD_VAR 0 17
37975: ARRAY
37976: PPUSH
37977: LD_VAR 0 4
37981: PPUSH
37982: CALL_OW 380
37986: GO 38005
// PrepareHuman ( false , i , skill ) ;
37988: LD_INT 0
37990: PPUSH
37991: LD_VAR 0 8
37995: PPUSH
37996: LD_VAR 0 4
38000: PPUSH
38001: CALL_OW 380
// end else
38005: GO 38024
// PrepareHuman ( false , i , skill ) ;
38007: LD_INT 0
38009: PPUSH
38010: LD_VAR 0 8
38014: PPUSH
38015: LD_VAR 0 4
38019: PPUSH
38020: CALL_OW 380
// un := CreateHuman ;
38024: LD_ADDR_VAR 0 14
38028: PUSH
38029: CALL_OW 44
38033: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38034: LD_ADDR_VAR 0 7
38038: PUSH
38039: LD_VAR 0 7
38043: PPUSH
38044: LD_INT 1
38046: PPUSH
38047: LD_VAR 0 14
38051: PPUSH
38052: CALL_OW 2
38056: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38057: LD_VAR 0 14
38061: PPUSH
38062: LD_VAR 0 12
38066: PUSH
38067: LD_INT 1
38069: ARRAY
38070: PPUSH
38071: CALL_OW 52
// end ;
38075: GO 37714
38077: POP
38078: POP
// end ;
38079: GO 37016
38081: POP
38082: POP
// result := result ^ buildings ;
38083: LD_ADDR_VAR 0 7
38087: PUSH
38088: LD_VAR 0 7
38092: PUSH
38093: LD_VAR 0 18
38097: ADD
38098: ST_TO_ADDR
// end else
38099: GO 38242
// begin for i = 1 to personel do
38101: LD_ADDR_VAR 0 8
38105: PUSH
38106: DOUBLE
38107: LD_INT 1
38109: DEC
38110: ST_TO_ADDR
38111: LD_VAR 0 6
38115: PUSH
38116: FOR_TO
38117: IFFALSE 38240
// begin if i > 4 then
38119: LD_VAR 0 8
38123: PUSH
38124: LD_INT 4
38126: GREATER
38127: IFFALSE 38131
// break ;
38129: GO 38240
// x := personel [ i ] ;
38131: LD_ADDR_VAR 0 13
38135: PUSH
38136: LD_VAR 0 6
38140: PUSH
38141: LD_VAR 0 8
38145: ARRAY
38146: ST_TO_ADDR
// if x = - 1 then
38147: LD_VAR 0 13
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: EQUAL
38156: IFFALSE 38160
// continue ;
38158: GO 38116
// PrepareHuman ( false , i , skill ) ;
38160: LD_INT 0
38162: PPUSH
38163: LD_VAR 0 8
38167: PPUSH
38168: LD_VAR 0 4
38172: PPUSH
38173: CALL_OW 380
// un := CreateHuman ;
38177: LD_ADDR_VAR 0 14
38181: PUSH
38182: CALL_OW 44
38186: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38187: LD_VAR 0 14
38191: PPUSH
38192: LD_VAR 0 1
38196: PPUSH
38197: CALL_OW 250
38201: PPUSH
38202: LD_VAR 0 1
38206: PPUSH
38207: CALL_OW 251
38211: PPUSH
38212: LD_INT 10
38214: PPUSH
38215: LD_INT 0
38217: PPUSH
38218: CALL_OW 50
// result := result ^ un ;
38222: LD_ADDR_VAR 0 7
38226: PUSH
38227: LD_VAR 0 7
38231: PUSH
38232: LD_VAR 0 14
38236: ADD
38237: ST_TO_ADDR
// end ;
38238: GO 38116
38240: POP
38241: POP
// end ; end ;
38242: LD_VAR 0 7
38246: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38247: LD_INT 0
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
38253: PPUSH
38254: PPUSH
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
38259: PPUSH
38260: PPUSH
38261: PPUSH
38262: PPUSH
38263: PPUSH
38264: PPUSH
// result := false ;
38265: LD_ADDR_VAR 0 3
38269: PUSH
38270: LD_INT 0
38272: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38273: LD_VAR 0 1
38277: NOT
38278: PUSH
38279: LD_VAR 0 1
38283: PPUSH
38284: CALL_OW 266
38288: PUSH
38289: LD_INT 32
38291: PUSH
38292: LD_INT 33
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: IN
38299: NOT
38300: OR
38301: IFFALSE 38305
// exit ;
38303: GO 39444
// nat := GetNation ( tower ) ;
38305: LD_ADDR_VAR 0 12
38309: PUSH
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 248
38319: ST_TO_ADDR
// side := GetSide ( tower ) ;
38320: LD_ADDR_VAR 0 16
38324: PUSH
38325: LD_VAR 0 1
38329: PPUSH
38330: CALL_OW 255
38334: ST_TO_ADDR
// x := GetX ( tower ) ;
38335: LD_ADDR_VAR 0 10
38339: PUSH
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 250
38349: ST_TO_ADDR
// y := GetY ( tower ) ;
38350: LD_ADDR_VAR 0 11
38354: PUSH
38355: LD_VAR 0 1
38359: PPUSH
38360: CALL_OW 251
38364: ST_TO_ADDR
// if not x or not y then
38365: LD_VAR 0 10
38369: NOT
38370: PUSH
38371: LD_VAR 0 11
38375: NOT
38376: OR
38377: IFFALSE 38381
// exit ;
38379: GO 39444
// weapon := 0 ;
38381: LD_ADDR_VAR 0 18
38385: PUSH
38386: LD_INT 0
38388: ST_TO_ADDR
// fac_list := [ ] ;
38389: LD_ADDR_VAR 0 17
38393: PUSH
38394: EMPTY
38395: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38396: LD_ADDR_VAR 0 6
38400: PUSH
38401: LD_VAR 0 1
38405: PPUSH
38406: CALL_OW 274
38410: PPUSH
38411: LD_VAR 0 2
38415: PPUSH
38416: LD_INT 0
38418: PPUSH
38419: CALL 35984 0 3
38423: PPUSH
38424: LD_INT 30
38426: PUSH
38427: LD_INT 3
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PPUSH
38434: CALL_OW 72
38438: ST_TO_ADDR
// if not factories then
38439: LD_VAR 0 6
38443: NOT
38444: IFFALSE 38448
// exit ;
38446: GO 39444
// for i in factories do
38448: LD_ADDR_VAR 0 8
38452: PUSH
38453: LD_VAR 0 6
38457: PUSH
38458: FOR_IN
38459: IFFALSE 38484
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38461: LD_ADDR_VAR 0 17
38465: PUSH
38466: LD_VAR 0 17
38470: PUSH
38471: LD_VAR 0 8
38475: PPUSH
38476: CALL_OW 478
38480: UNION
38481: ST_TO_ADDR
38482: GO 38458
38484: POP
38485: POP
// if not fac_list then
38486: LD_VAR 0 17
38490: NOT
38491: IFFALSE 38495
// exit ;
38493: GO 39444
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38495: LD_ADDR_VAR 0 5
38499: PUSH
38500: LD_INT 4
38502: PUSH
38503: LD_INT 5
38505: PUSH
38506: LD_INT 9
38508: PUSH
38509: LD_INT 10
38511: PUSH
38512: LD_INT 6
38514: PUSH
38515: LD_INT 7
38517: PUSH
38518: LD_INT 11
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 27
38532: PUSH
38533: LD_INT 28
38535: PUSH
38536: LD_INT 26
38538: PUSH
38539: LD_INT 30
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 43
38550: PUSH
38551: LD_INT 44
38553: PUSH
38554: LD_INT 46
38556: PUSH
38557: LD_INT 45
38559: PUSH
38560: LD_INT 47
38562: PUSH
38563: LD_INT 49
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: LIST
38578: PUSH
38579: LD_VAR 0 12
38583: ARRAY
38584: ST_TO_ADDR
// for i in list do
38585: LD_ADDR_VAR 0 8
38589: PUSH
38590: LD_VAR 0 5
38594: PUSH
38595: FOR_IN
38596: IFFALSE 38629
// if not i in fac_list then
38598: LD_VAR 0 8
38602: PUSH
38603: LD_VAR 0 17
38607: IN
38608: NOT
38609: IFFALSE 38627
// list := list diff i ;
38611: LD_ADDR_VAR 0 5
38615: PUSH
38616: LD_VAR 0 5
38620: PUSH
38621: LD_VAR 0 8
38625: DIFF
38626: ST_TO_ADDR
38627: GO 38595
38629: POP
38630: POP
// if not list then
38631: LD_VAR 0 5
38635: NOT
38636: IFFALSE 38640
// exit ;
38638: GO 39444
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38640: LD_VAR 0 12
38644: PUSH
38645: LD_INT 3
38647: EQUAL
38648: PUSH
38649: LD_INT 49
38651: PUSH
38652: LD_VAR 0 5
38656: IN
38657: AND
38658: PUSH
38659: LD_INT 31
38661: PPUSH
38662: LD_VAR 0 16
38666: PPUSH
38667: CALL_OW 321
38671: PUSH
38672: LD_INT 2
38674: EQUAL
38675: AND
38676: IFFALSE 38736
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38678: LD_INT 22
38680: PUSH
38681: LD_VAR 0 16
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 35
38692: PUSH
38693: LD_INT 49
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 91
38702: PUSH
38703: LD_VAR 0 1
38707: PUSH
38708: LD_INT 10
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: PPUSH
38721: CALL_OW 69
38725: NOT
38726: IFFALSE 38736
// weapon := ru_time_lapser ;
38728: LD_ADDR_VAR 0 18
38732: PUSH
38733: LD_INT 49
38735: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38736: LD_VAR 0 12
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: IN
38751: PUSH
38752: LD_INT 11
38754: PUSH
38755: LD_VAR 0 5
38759: IN
38760: PUSH
38761: LD_INT 30
38763: PUSH
38764: LD_VAR 0 5
38768: IN
38769: OR
38770: AND
38771: PUSH
38772: LD_INT 6
38774: PPUSH
38775: LD_VAR 0 16
38779: PPUSH
38780: CALL_OW 321
38784: PUSH
38785: LD_INT 2
38787: EQUAL
38788: AND
38789: IFFALSE 38954
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38791: LD_INT 22
38793: PUSH
38794: LD_VAR 0 16
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 35
38808: PUSH
38809: LD_INT 11
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 35
38818: PUSH
38819: LD_INT 30
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 91
38833: PUSH
38834: LD_VAR 0 1
38838: PUSH
38839: LD_INT 18
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: PPUSH
38852: CALL_OW 69
38856: NOT
38857: PUSH
38858: LD_INT 22
38860: PUSH
38861: LD_VAR 0 16
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: LD_INT 30
38875: PUSH
38876: LD_INT 32
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 30
38885: PUSH
38886: LD_INT 33
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 91
38900: PUSH
38901: LD_VAR 0 1
38905: PUSH
38906: LD_INT 12
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: PUSH
38919: EMPTY
38920: LIST
38921: PPUSH
38922: CALL_OW 69
38926: PUSH
38927: LD_INT 2
38929: GREATER
38930: AND
38931: IFFALSE 38954
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38933: LD_ADDR_VAR 0 18
38937: PUSH
38938: LD_INT 11
38940: PUSH
38941: LD_INT 30
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_VAR 0 12
38952: ARRAY
38953: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38954: LD_VAR 0 18
38958: NOT
38959: PUSH
38960: LD_INT 40
38962: PPUSH
38963: LD_VAR 0 16
38967: PPUSH
38968: CALL_OW 321
38972: PUSH
38973: LD_INT 2
38975: EQUAL
38976: AND
38977: PUSH
38978: LD_INT 7
38980: PUSH
38981: LD_VAR 0 5
38985: IN
38986: PUSH
38987: LD_INT 28
38989: PUSH
38990: LD_VAR 0 5
38994: IN
38995: OR
38996: PUSH
38997: LD_INT 45
38999: PUSH
39000: LD_VAR 0 5
39004: IN
39005: OR
39006: AND
39007: IFFALSE 39261
// begin hex := GetHexInfo ( x , y ) ;
39009: LD_ADDR_VAR 0 4
39013: PUSH
39014: LD_VAR 0 10
39018: PPUSH
39019: LD_VAR 0 11
39023: PPUSH
39024: CALL_OW 546
39028: ST_TO_ADDR
// if hex [ 1 ] then
39029: LD_VAR 0 4
39033: PUSH
39034: LD_INT 1
39036: ARRAY
39037: IFFALSE 39041
// exit ;
39039: GO 39444
// height := hex [ 2 ] ;
39041: LD_ADDR_VAR 0 15
39045: PUSH
39046: LD_VAR 0 4
39050: PUSH
39051: LD_INT 2
39053: ARRAY
39054: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39055: LD_ADDR_VAR 0 14
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: LD_INT 5
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: ST_TO_ADDR
// for i in tmp do
39078: LD_ADDR_VAR 0 8
39082: PUSH
39083: LD_VAR 0 14
39087: PUSH
39088: FOR_IN
39089: IFFALSE 39259
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39091: LD_ADDR_VAR 0 9
39095: PUSH
39096: LD_VAR 0 10
39100: PPUSH
39101: LD_VAR 0 8
39105: PPUSH
39106: LD_INT 5
39108: PPUSH
39109: CALL_OW 272
39113: PUSH
39114: LD_VAR 0 11
39118: PPUSH
39119: LD_VAR 0 8
39123: PPUSH
39124: LD_INT 5
39126: PPUSH
39127: CALL_OW 273
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39136: LD_VAR 0 9
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: PPUSH
39145: LD_VAR 0 9
39149: PUSH
39150: LD_INT 2
39152: ARRAY
39153: PPUSH
39154: CALL_OW 488
39158: IFFALSE 39257
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39160: LD_ADDR_VAR 0 4
39164: PUSH
39165: LD_VAR 0 9
39169: PUSH
39170: LD_INT 1
39172: ARRAY
39173: PPUSH
39174: LD_VAR 0 9
39178: PUSH
39179: LD_INT 2
39181: ARRAY
39182: PPUSH
39183: CALL_OW 546
39187: ST_TO_ADDR
// if hex [ 1 ] then
39188: LD_VAR 0 4
39192: PUSH
39193: LD_INT 1
39195: ARRAY
39196: IFFALSE 39200
// continue ;
39198: GO 39088
// h := hex [ 2 ] ;
39200: LD_ADDR_VAR 0 13
39204: PUSH
39205: LD_VAR 0 4
39209: PUSH
39210: LD_INT 2
39212: ARRAY
39213: ST_TO_ADDR
// if h + 7 < height then
39214: LD_VAR 0 13
39218: PUSH
39219: LD_INT 7
39221: PLUS
39222: PUSH
39223: LD_VAR 0 15
39227: LESS
39228: IFFALSE 39257
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39230: LD_ADDR_VAR 0 18
39234: PUSH
39235: LD_INT 7
39237: PUSH
39238: LD_INT 28
39240: PUSH
39241: LD_INT 45
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: PUSH
39249: LD_VAR 0 12
39253: ARRAY
39254: ST_TO_ADDR
// break ;
39255: GO 39259
// end ; end ; end ;
39257: GO 39088
39259: POP
39260: POP
// end ; if not weapon then
39261: LD_VAR 0 18
39265: NOT
39266: IFFALSE 39326
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39268: LD_ADDR_VAR 0 5
39272: PUSH
39273: LD_VAR 0 5
39277: PUSH
39278: LD_INT 11
39280: PUSH
39281: LD_INT 30
39283: PUSH
39284: LD_INT 49
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: LIST
39291: DIFF
39292: ST_TO_ADDR
// if not list then
39293: LD_VAR 0 5
39297: NOT
39298: IFFALSE 39302
// exit ;
39300: GO 39444
// weapon := list [ rand ( 1 , list ) ] ;
39302: LD_ADDR_VAR 0 18
39306: PUSH
39307: LD_VAR 0 5
39311: PUSH
39312: LD_INT 1
39314: PPUSH
39315: LD_VAR 0 5
39319: PPUSH
39320: CALL_OW 12
39324: ARRAY
39325: ST_TO_ADDR
// end ; if weapon then
39326: LD_VAR 0 18
39330: IFFALSE 39444
// begin tmp := CostOfWeapon ( weapon ) ;
39332: LD_ADDR_VAR 0 14
39336: PUSH
39337: LD_VAR 0 18
39341: PPUSH
39342: CALL_OW 451
39346: ST_TO_ADDR
// j := GetBase ( tower ) ;
39347: LD_ADDR_VAR 0 9
39351: PUSH
39352: LD_VAR 0 1
39356: PPUSH
39357: CALL_OW 274
39361: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39362: LD_VAR 0 9
39366: PPUSH
39367: LD_INT 1
39369: PPUSH
39370: CALL_OW 275
39374: PUSH
39375: LD_VAR 0 14
39379: PUSH
39380: LD_INT 1
39382: ARRAY
39383: GREATEREQUAL
39384: PUSH
39385: LD_VAR 0 9
39389: PPUSH
39390: LD_INT 2
39392: PPUSH
39393: CALL_OW 275
39397: PUSH
39398: LD_VAR 0 14
39402: PUSH
39403: LD_INT 2
39405: ARRAY
39406: GREATEREQUAL
39407: AND
39408: PUSH
39409: LD_VAR 0 9
39413: PPUSH
39414: LD_INT 3
39416: PPUSH
39417: CALL_OW 275
39421: PUSH
39422: LD_VAR 0 14
39426: PUSH
39427: LD_INT 3
39429: ARRAY
39430: GREATEREQUAL
39431: AND
39432: IFFALSE 39444
// result := weapon ;
39434: LD_ADDR_VAR 0 3
39438: PUSH
39439: LD_VAR 0 18
39443: ST_TO_ADDR
// end ; end ;
39444: LD_VAR 0 3
39448: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39449: LD_INT 0
39451: PPUSH
39452: PPUSH
// result := true ;
39453: LD_ADDR_VAR 0 3
39457: PUSH
39458: LD_INT 1
39460: ST_TO_ADDR
// if array1 = array2 then
39461: LD_VAR 0 1
39465: PUSH
39466: LD_VAR 0 2
39470: EQUAL
39471: IFFALSE 39531
// begin for i = 1 to array1 do
39473: LD_ADDR_VAR 0 4
39477: PUSH
39478: DOUBLE
39479: LD_INT 1
39481: DEC
39482: ST_TO_ADDR
39483: LD_VAR 0 1
39487: PUSH
39488: FOR_TO
39489: IFFALSE 39527
// if array1 [ i ] <> array2 [ i ] then
39491: LD_VAR 0 1
39495: PUSH
39496: LD_VAR 0 4
39500: ARRAY
39501: PUSH
39502: LD_VAR 0 2
39506: PUSH
39507: LD_VAR 0 4
39511: ARRAY
39512: NONEQUAL
39513: IFFALSE 39525
// begin result := false ;
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: LD_INT 0
39522: ST_TO_ADDR
// break ;
39523: GO 39527
// end ;
39525: GO 39488
39527: POP
39528: POP
// end else
39529: GO 39539
// result := false ;
39531: LD_ADDR_VAR 0 3
39535: PUSH
39536: LD_INT 0
39538: ST_TO_ADDR
// end ;
39539: LD_VAR 0 3
39543: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39544: LD_INT 0
39546: PPUSH
39547: PPUSH
// if not array1 or not array2 then
39548: LD_VAR 0 1
39552: NOT
39553: PUSH
39554: LD_VAR 0 2
39558: NOT
39559: OR
39560: IFFALSE 39564
// exit ;
39562: GO 39628
// result := true ;
39564: LD_ADDR_VAR 0 3
39568: PUSH
39569: LD_INT 1
39571: ST_TO_ADDR
// for i = 1 to array1 do
39572: LD_ADDR_VAR 0 4
39576: PUSH
39577: DOUBLE
39578: LD_INT 1
39580: DEC
39581: ST_TO_ADDR
39582: LD_VAR 0 1
39586: PUSH
39587: FOR_TO
39588: IFFALSE 39626
// if array1 [ i ] <> array2 [ i ] then
39590: LD_VAR 0 1
39594: PUSH
39595: LD_VAR 0 4
39599: ARRAY
39600: PUSH
39601: LD_VAR 0 2
39605: PUSH
39606: LD_VAR 0 4
39610: ARRAY
39611: NONEQUAL
39612: IFFALSE 39624
// begin result := false ;
39614: LD_ADDR_VAR 0 3
39618: PUSH
39619: LD_INT 0
39621: ST_TO_ADDR
// break ;
39622: GO 39626
// end ;
39624: GO 39587
39626: POP
39627: POP
// end ;
39628: LD_VAR 0 3
39632: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39633: LD_INT 0
39635: PPUSH
39636: PPUSH
39637: PPUSH
// pom := GetBase ( fac ) ;
39638: LD_ADDR_VAR 0 5
39642: PUSH
39643: LD_VAR 0 1
39647: PPUSH
39648: CALL_OW 274
39652: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39653: LD_ADDR_VAR 0 4
39657: PUSH
39658: LD_VAR 0 2
39662: PUSH
39663: LD_INT 1
39665: ARRAY
39666: PPUSH
39667: LD_VAR 0 2
39671: PUSH
39672: LD_INT 2
39674: ARRAY
39675: PPUSH
39676: LD_VAR 0 2
39680: PUSH
39681: LD_INT 3
39683: ARRAY
39684: PPUSH
39685: LD_VAR 0 2
39689: PUSH
39690: LD_INT 4
39692: ARRAY
39693: PPUSH
39694: CALL_OW 449
39698: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39699: LD_ADDR_VAR 0 3
39703: PUSH
39704: LD_VAR 0 5
39708: PPUSH
39709: LD_INT 1
39711: PPUSH
39712: CALL_OW 275
39716: PUSH
39717: LD_VAR 0 4
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: GREATEREQUAL
39726: PUSH
39727: LD_VAR 0 5
39731: PPUSH
39732: LD_INT 2
39734: PPUSH
39735: CALL_OW 275
39739: PUSH
39740: LD_VAR 0 4
39744: PUSH
39745: LD_INT 2
39747: ARRAY
39748: GREATEREQUAL
39749: AND
39750: PUSH
39751: LD_VAR 0 5
39755: PPUSH
39756: LD_INT 3
39758: PPUSH
39759: CALL_OW 275
39763: PUSH
39764: LD_VAR 0 4
39768: PUSH
39769: LD_INT 3
39771: ARRAY
39772: GREATEREQUAL
39773: AND
39774: ST_TO_ADDR
// end ;
39775: LD_VAR 0 3
39779: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39780: LD_INT 0
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
// pom := GetBase ( building ) ;
39786: LD_ADDR_VAR 0 3
39790: PUSH
39791: LD_VAR 0 1
39795: PPUSH
39796: CALL_OW 274
39800: ST_TO_ADDR
// if not pom then
39801: LD_VAR 0 3
39805: NOT
39806: IFFALSE 39810
// exit ;
39808: GO 39980
// btype := GetBType ( building ) ;
39810: LD_ADDR_VAR 0 5
39814: PUSH
39815: LD_VAR 0 1
39819: PPUSH
39820: CALL_OW 266
39824: ST_TO_ADDR
// if btype = b_armoury then
39825: LD_VAR 0 5
39829: PUSH
39830: LD_INT 4
39832: EQUAL
39833: IFFALSE 39843
// btype := b_barracks ;
39835: LD_ADDR_VAR 0 5
39839: PUSH
39840: LD_INT 5
39842: ST_TO_ADDR
// if btype = b_depot then
39843: LD_VAR 0 5
39847: PUSH
39848: LD_INT 0
39850: EQUAL
39851: IFFALSE 39861
// btype := b_warehouse ;
39853: LD_ADDR_VAR 0 5
39857: PUSH
39858: LD_INT 1
39860: ST_TO_ADDR
// if btype = b_workshop then
39861: LD_VAR 0 5
39865: PUSH
39866: LD_INT 2
39868: EQUAL
39869: IFFALSE 39879
// btype := b_factory ;
39871: LD_ADDR_VAR 0 5
39875: PUSH
39876: LD_INT 3
39878: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39879: LD_ADDR_VAR 0 4
39883: PUSH
39884: LD_VAR 0 5
39888: PPUSH
39889: LD_VAR 0 1
39893: PPUSH
39894: CALL_OW 248
39898: PPUSH
39899: CALL_OW 450
39903: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39904: LD_ADDR_VAR 0 2
39908: PUSH
39909: LD_VAR 0 3
39913: PPUSH
39914: LD_INT 1
39916: PPUSH
39917: CALL_OW 275
39921: PUSH
39922: LD_VAR 0 4
39926: PUSH
39927: LD_INT 1
39929: ARRAY
39930: GREATEREQUAL
39931: PUSH
39932: LD_VAR 0 3
39936: PPUSH
39937: LD_INT 2
39939: PPUSH
39940: CALL_OW 275
39944: PUSH
39945: LD_VAR 0 4
39949: PUSH
39950: LD_INT 2
39952: ARRAY
39953: GREATEREQUAL
39954: AND
39955: PUSH
39956: LD_VAR 0 3
39960: PPUSH
39961: LD_INT 3
39963: PPUSH
39964: CALL_OW 275
39968: PUSH
39969: LD_VAR 0 4
39973: PUSH
39974: LD_INT 3
39976: ARRAY
39977: GREATEREQUAL
39978: AND
39979: ST_TO_ADDR
// end ;
39980: LD_VAR 0 2
39984: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39985: LD_INT 0
39987: PPUSH
39988: PPUSH
39989: PPUSH
// pom := GetBase ( building ) ;
39990: LD_ADDR_VAR 0 4
39994: PUSH
39995: LD_VAR 0 1
39999: PPUSH
40000: CALL_OW 274
40004: ST_TO_ADDR
// if not pom then
40005: LD_VAR 0 4
40009: NOT
40010: IFFALSE 40014
// exit ;
40012: GO 40115
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40014: LD_ADDR_VAR 0 5
40018: PUSH
40019: LD_VAR 0 2
40023: PPUSH
40024: LD_VAR 0 1
40028: PPUSH
40029: CALL_OW 248
40033: PPUSH
40034: CALL_OW 450
40038: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40039: LD_ADDR_VAR 0 3
40043: PUSH
40044: LD_VAR 0 4
40048: PPUSH
40049: LD_INT 1
40051: PPUSH
40052: CALL_OW 275
40056: PUSH
40057: LD_VAR 0 5
40061: PUSH
40062: LD_INT 1
40064: ARRAY
40065: GREATEREQUAL
40066: PUSH
40067: LD_VAR 0 4
40071: PPUSH
40072: LD_INT 2
40074: PPUSH
40075: CALL_OW 275
40079: PUSH
40080: LD_VAR 0 5
40084: PUSH
40085: LD_INT 2
40087: ARRAY
40088: GREATEREQUAL
40089: AND
40090: PUSH
40091: LD_VAR 0 4
40095: PPUSH
40096: LD_INT 3
40098: PPUSH
40099: CALL_OW 275
40103: PUSH
40104: LD_VAR 0 5
40108: PUSH
40109: LD_INT 3
40111: ARRAY
40112: GREATEREQUAL
40113: AND
40114: ST_TO_ADDR
// end ;
40115: LD_VAR 0 3
40119: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40120: LD_INT 0
40122: PPUSH
40123: PPUSH
40124: PPUSH
40125: PPUSH
40126: PPUSH
40127: PPUSH
40128: PPUSH
40129: PPUSH
40130: PPUSH
40131: PPUSH
40132: PPUSH
// result := false ;
40133: LD_ADDR_VAR 0 8
40137: PUSH
40138: LD_INT 0
40140: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40141: LD_VAR 0 5
40145: NOT
40146: PUSH
40147: LD_VAR 0 1
40151: NOT
40152: OR
40153: PUSH
40154: LD_VAR 0 2
40158: NOT
40159: OR
40160: PUSH
40161: LD_VAR 0 3
40165: NOT
40166: OR
40167: IFFALSE 40171
// exit ;
40169: GO 40985
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40171: LD_ADDR_VAR 0 14
40175: PUSH
40176: LD_VAR 0 1
40180: PPUSH
40181: LD_VAR 0 2
40185: PPUSH
40186: LD_VAR 0 3
40190: PPUSH
40191: LD_VAR 0 4
40195: PPUSH
40196: LD_VAR 0 5
40200: PUSH
40201: LD_INT 1
40203: ARRAY
40204: PPUSH
40205: CALL_OW 248
40209: PPUSH
40210: LD_INT 0
40212: PPUSH
40213: CALL 41822 0 6
40217: ST_TO_ADDR
// if not hexes then
40218: LD_VAR 0 14
40222: NOT
40223: IFFALSE 40227
// exit ;
40225: GO 40985
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40227: LD_ADDR_VAR 0 17
40231: PUSH
40232: LD_VAR 0 5
40236: PPUSH
40237: LD_INT 22
40239: PUSH
40240: LD_VAR 0 13
40244: PPUSH
40245: CALL_OW 255
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: LD_INT 30
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 30
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PPUSH
40286: CALL_OW 72
40290: ST_TO_ADDR
// for i = 1 to hexes do
40291: LD_ADDR_VAR 0 9
40295: PUSH
40296: DOUBLE
40297: LD_INT 1
40299: DEC
40300: ST_TO_ADDR
40301: LD_VAR 0 14
40305: PUSH
40306: FOR_TO
40307: IFFALSE 40983
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40309: LD_ADDR_VAR 0 13
40313: PUSH
40314: LD_VAR 0 14
40318: PUSH
40319: LD_VAR 0 9
40323: ARRAY
40324: PUSH
40325: LD_INT 1
40327: ARRAY
40328: PPUSH
40329: LD_VAR 0 14
40333: PUSH
40334: LD_VAR 0 9
40338: ARRAY
40339: PUSH
40340: LD_INT 2
40342: ARRAY
40343: PPUSH
40344: CALL_OW 428
40348: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40349: LD_VAR 0 14
40353: PUSH
40354: LD_VAR 0 9
40358: ARRAY
40359: PUSH
40360: LD_INT 1
40362: ARRAY
40363: PPUSH
40364: LD_VAR 0 14
40368: PUSH
40369: LD_VAR 0 9
40373: ARRAY
40374: PUSH
40375: LD_INT 2
40377: ARRAY
40378: PPUSH
40379: CALL_OW 351
40383: PUSH
40384: LD_VAR 0 14
40388: PUSH
40389: LD_VAR 0 9
40393: ARRAY
40394: PUSH
40395: LD_INT 1
40397: ARRAY
40398: PPUSH
40399: LD_VAR 0 14
40403: PUSH
40404: LD_VAR 0 9
40408: ARRAY
40409: PUSH
40410: LD_INT 2
40412: ARRAY
40413: PPUSH
40414: CALL_OW 488
40418: NOT
40419: OR
40420: PUSH
40421: LD_VAR 0 13
40425: PPUSH
40426: CALL_OW 247
40430: PUSH
40431: LD_INT 3
40433: EQUAL
40434: OR
40435: IFFALSE 40441
// exit ;
40437: POP
40438: POP
40439: GO 40985
// if not tmp then
40441: LD_VAR 0 13
40445: NOT
40446: IFFALSE 40450
// continue ;
40448: GO 40306
// result := true ;
40450: LD_ADDR_VAR 0 8
40454: PUSH
40455: LD_INT 1
40457: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40458: LD_VAR 0 6
40462: PUSH
40463: LD_VAR 0 13
40467: PPUSH
40468: CALL_OW 247
40472: PUSH
40473: LD_INT 2
40475: EQUAL
40476: AND
40477: PUSH
40478: LD_VAR 0 13
40482: PPUSH
40483: CALL_OW 263
40487: PUSH
40488: LD_INT 1
40490: EQUAL
40491: AND
40492: IFFALSE 40656
// begin if IsDrivenBy ( tmp ) then
40494: LD_VAR 0 13
40498: PPUSH
40499: CALL_OW 311
40503: IFFALSE 40507
// continue ;
40505: GO 40306
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40507: LD_VAR 0 6
40511: PPUSH
40512: LD_INT 3
40514: PUSH
40515: LD_INT 60
40517: PUSH
40518: EMPTY
40519: LIST
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 3
40527: PUSH
40528: LD_INT 55
40530: PUSH
40531: EMPTY
40532: LIST
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PPUSH
40542: CALL_OW 72
40546: IFFALSE 40654
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40548: LD_ADDR_VAR 0 18
40552: PUSH
40553: LD_VAR 0 6
40557: PPUSH
40558: LD_INT 3
40560: PUSH
40561: LD_INT 60
40563: PUSH
40564: EMPTY
40565: LIST
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 3
40573: PUSH
40574: LD_INT 55
40576: PUSH
40577: EMPTY
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PPUSH
40588: CALL_OW 72
40592: PUSH
40593: LD_INT 1
40595: ARRAY
40596: ST_TO_ADDR
// if IsInUnit ( driver ) then
40597: LD_VAR 0 18
40601: PPUSH
40602: CALL_OW 310
40606: IFFALSE 40617
// ComExit ( driver ) ;
40608: LD_VAR 0 18
40612: PPUSH
40613: CALL 65006 0 1
// AddComEnterUnit ( driver , tmp ) ;
40617: LD_VAR 0 18
40621: PPUSH
40622: LD_VAR 0 13
40626: PPUSH
40627: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40631: LD_VAR 0 18
40635: PPUSH
40636: LD_VAR 0 7
40640: PPUSH
40641: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40645: LD_VAR 0 18
40649: PPUSH
40650: CALL_OW 181
// end ; continue ;
40654: GO 40306
// end ; if not cleaners or not tmp in cleaners then
40656: LD_VAR 0 6
40660: NOT
40661: PUSH
40662: LD_VAR 0 13
40666: PUSH
40667: LD_VAR 0 6
40671: IN
40672: NOT
40673: OR
40674: IFFALSE 40981
// begin if dep then
40676: LD_VAR 0 17
40680: IFFALSE 40816
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40682: LD_ADDR_VAR 0 16
40686: PUSH
40687: LD_VAR 0 17
40691: PUSH
40692: LD_INT 1
40694: ARRAY
40695: PPUSH
40696: CALL_OW 250
40700: PPUSH
40701: LD_VAR 0 17
40705: PUSH
40706: LD_INT 1
40708: ARRAY
40709: PPUSH
40710: CALL_OW 254
40714: PPUSH
40715: LD_INT 5
40717: PPUSH
40718: CALL_OW 272
40722: PUSH
40723: LD_VAR 0 17
40727: PUSH
40728: LD_INT 1
40730: ARRAY
40731: PPUSH
40732: CALL_OW 251
40736: PPUSH
40737: LD_VAR 0 17
40741: PUSH
40742: LD_INT 1
40744: ARRAY
40745: PPUSH
40746: CALL_OW 254
40750: PPUSH
40751: LD_INT 5
40753: PPUSH
40754: CALL_OW 273
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40763: LD_VAR 0 16
40767: PUSH
40768: LD_INT 1
40770: ARRAY
40771: PPUSH
40772: LD_VAR 0 16
40776: PUSH
40777: LD_INT 2
40779: ARRAY
40780: PPUSH
40781: CALL_OW 488
40785: IFFALSE 40816
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40787: LD_VAR 0 13
40791: PPUSH
40792: LD_VAR 0 16
40796: PUSH
40797: LD_INT 1
40799: ARRAY
40800: PPUSH
40801: LD_VAR 0 16
40805: PUSH
40806: LD_INT 2
40808: ARRAY
40809: PPUSH
40810: CALL_OW 111
// continue ;
40814: GO 40306
// end ; end ; r := GetDir ( tmp ) ;
40816: LD_ADDR_VAR 0 15
40820: PUSH
40821: LD_VAR 0 13
40825: PPUSH
40826: CALL_OW 254
40830: ST_TO_ADDR
// if r = 5 then
40831: LD_VAR 0 15
40835: PUSH
40836: LD_INT 5
40838: EQUAL
40839: IFFALSE 40849
// r := 0 ;
40841: LD_ADDR_VAR 0 15
40845: PUSH
40846: LD_INT 0
40848: ST_TO_ADDR
// for j = r to 5 do
40849: LD_ADDR_VAR 0 10
40853: PUSH
40854: DOUBLE
40855: LD_VAR 0 15
40859: DEC
40860: ST_TO_ADDR
40861: LD_INT 5
40863: PUSH
40864: FOR_TO
40865: IFFALSE 40979
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40867: LD_ADDR_VAR 0 11
40871: PUSH
40872: LD_VAR 0 13
40876: PPUSH
40877: CALL_OW 250
40881: PPUSH
40882: LD_VAR 0 10
40886: PPUSH
40887: LD_INT 2
40889: PPUSH
40890: CALL_OW 272
40894: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40895: LD_ADDR_VAR 0 12
40899: PUSH
40900: LD_VAR 0 13
40904: PPUSH
40905: CALL_OW 251
40909: PPUSH
40910: LD_VAR 0 10
40914: PPUSH
40915: LD_INT 2
40917: PPUSH
40918: CALL_OW 273
40922: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40923: LD_VAR 0 11
40927: PPUSH
40928: LD_VAR 0 12
40932: PPUSH
40933: CALL_OW 488
40937: PUSH
40938: LD_VAR 0 11
40942: PPUSH
40943: LD_VAR 0 12
40947: PPUSH
40948: CALL_OW 428
40952: NOT
40953: AND
40954: IFFALSE 40977
// begin ComMoveXY ( tmp , _x , _y ) ;
40956: LD_VAR 0 13
40960: PPUSH
40961: LD_VAR 0 11
40965: PPUSH
40966: LD_VAR 0 12
40970: PPUSH
40971: CALL_OW 111
// break ;
40975: GO 40979
// end ; end ;
40977: GO 40864
40979: POP
40980: POP
// end ; end ;
40981: GO 40306
40983: POP
40984: POP
// end ;
40985: LD_VAR 0 8
40989: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40990: LD_INT 0
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
// result := false ;
41002: LD_ADDR_VAR 0 6
41006: PUSH
41007: LD_INT 0
41009: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41010: LD_VAR 0 1
41014: NOT
41015: PUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: CALL_OW 266
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: IN
41036: NOT
41037: OR
41038: PUSH
41039: LD_VAR 0 2
41043: NOT
41044: OR
41045: PUSH
41046: LD_VAR 0 5
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: LD_INT 4
41065: PUSH
41066: LD_INT 5
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: IN
41077: NOT
41078: OR
41079: PUSH
41080: LD_VAR 0 3
41084: PPUSH
41085: LD_VAR 0 4
41089: PPUSH
41090: CALL_OW 488
41094: NOT
41095: OR
41096: IFFALSE 41100
// exit ;
41098: GO 41817
// pom := GetBase ( depot ) ;
41100: LD_ADDR_VAR 0 10
41104: PUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: CALL_OW 274
41114: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41115: LD_ADDR_VAR 0 11
41119: PUSH
41120: LD_VAR 0 2
41124: PPUSH
41125: LD_VAR 0 1
41129: PPUSH
41130: CALL_OW 248
41134: PPUSH
41135: CALL_OW 450
41139: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41140: LD_VAR 0 10
41144: PPUSH
41145: LD_INT 1
41147: PPUSH
41148: CALL_OW 275
41152: PUSH
41153: LD_VAR 0 11
41157: PUSH
41158: LD_INT 1
41160: ARRAY
41161: GREATEREQUAL
41162: PUSH
41163: LD_VAR 0 10
41167: PPUSH
41168: LD_INT 2
41170: PPUSH
41171: CALL_OW 275
41175: PUSH
41176: LD_VAR 0 11
41180: PUSH
41181: LD_INT 2
41183: ARRAY
41184: GREATEREQUAL
41185: AND
41186: PUSH
41187: LD_VAR 0 10
41191: PPUSH
41192: LD_INT 3
41194: PPUSH
41195: CALL_OW 275
41199: PUSH
41200: LD_VAR 0 11
41204: PUSH
41205: LD_INT 3
41207: ARRAY
41208: GREATEREQUAL
41209: AND
41210: NOT
41211: IFFALSE 41215
// exit ;
41213: GO 41817
// if GetBType ( depot ) = b_depot then
41215: LD_VAR 0 1
41219: PPUSH
41220: CALL_OW 266
41224: PUSH
41225: LD_INT 0
41227: EQUAL
41228: IFFALSE 41240
// dist := 28 else
41230: LD_ADDR_VAR 0 14
41234: PUSH
41235: LD_INT 28
41237: ST_TO_ADDR
41238: GO 41248
// dist := 36 ;
41240: LD_ADDR_VAR 0 14
41244: PUSH
41245: LD_INT 36
41247: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41248: LD_VAR 0 1
41252: PPUSH
41253: LD_VAR 0 3
41257: PPUSH
41258: LD_VAR 0 4
41262: PPUSH
41263: CALL_OW 297
41267: PUSH
41268: LD_VAR 0 14
41272: GREATER
41273: IFFALSE 41277
// exit ;
41275: GO 41817
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41277: LD_ADDR_VAR 0 12
41281: PUSH
41282: LD_VAR 0 2
41286: PPUSH
41287: LD_VAR 0 3
41291: PPUSH
41292: LD_VAR 0 4
41296: PPUSH
41297: LD_VAR 0 5
41301: PPUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 248
41311: PPUSH
41312: LD_INT 0
41314: PPUSH
41315: CALL 41822 0 6
41319: ST_TO_ADDR
// if not hexes then
41320: LD_VAR 0 12
41324: NOT
41325: IFFALSE 41329
// exit ;
41327: GO 41817
// hex := GetHexInfo ( x , y ) ;
41329: LD_ADDR_VAR 0 15
41333: PUSH
41334: LD_VAR 0 3
41338: PPUSH
41339: LD_VAR 0 4
41343: PPUSH
41344: CALL_OW 546
41348: ST_TO_ADDR
// if hex [ 1 ] then
41349: LD_VAR 0 15
41353: PUSH
41354: LD_INT 1
41356: ARRAY
41357: IFFALSE 41361
// exit ;
41359: GO 41817
// height := hex [ 2 ] ;
41361: LD_ADDR_VAR 0 13
41365: PUSH
41366: LD_VAR 0 15
41370: PUSH
41371: LD_INT 2
41373: ARRAY
41374: ST_TO_ADDR
// for i = 1 to hexes do
41375: LD_ADDR_VAR 0 7
41379: PUSH
41380: DOUBLE
41381: LD_INT 1
41383: DEC
41384: ST_TO_ADDR
41385: LD_VAR 0 12
41389: PUSH
41390: FOR_TO
41391: IFFALSE 41721
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41393: LD_VAR 0 12
41397: PUSH
41398: LD_VAR 0 7
41402: ARRAY
41403: PUSH
41404: LD_INT 1
41406: ARRAY
41407: PPUSH
41408: LD_VAR 0 12
41412: PUSH
41413: LD_VAR 0 7
41417: ARRAY
41418: PUSH
41419: LD_INT 2
41421: ARRAY
41422: PPUSH
41423: CALL_OW 488
41427: NOT
41428: PUSH
41429: LD_VAR 0 12
41433: PUSH
41434: LD_VAR 0 7
41438: ARRAY
41439: PUSH
41440: LD_INT 1
41442: ARRAY
41443: PPUSH
41444: LD_VAR 0 12
41448: PUSH
41449: LD_VAR 0 7
41453: ARRAY
41454: PUSH
41455: LD_INT 2
41457: ARRAY
41458: PPUSH
41459: CALL_OW 428
41463: PUSH
41464: LD_INT 0
41466: GREATER
41467: OR
41468: PUSH
41469: LD_VAR 0 12
41473: PUSH
41474: LD_VAR 0 7
41478: ARRAY
41479: PUSH
41480: LD_INT 1
41482: ARRAY
41483: PPUSH
41484: LD_VAR 0 12
41488: PUSH
41489: LD_VAR 0 7
41493: ARRAY
41494: PUSH
41495: LD_INT 2
41497: ARRAY
41498: PPUSH
41499: CALL_OW 351
41503: OR
41504: IFFALSE 41510
// exit ;
41506: POP
41507: POP
41508: GO 41817
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41510: LD_ADDR_VAR 0 8
41514: PUSH
41515: LD_VAR 0 12
41519: PUSH
41520: LD_VAR 0 7
41524: ARRAY
41525: PUSH
41526: LD_INT 1
41528: ARRAY
41529: PPUSH
41530: LD_VAR 0 12
41534: PUSH
41535: LD_VAR 0 7
41539: ARRAY
41540: PUSH
41541: LD_INT 2
41543: ARRAY
41544: PPUSH
41545: CALL_OW 546
41549: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41550: LD_VAR 0 8
41554: PUSH
41555: LD_INT 1
41557: ARRAY
41558: PUSH
41559: LD_VAR 0 8
41563: PUSH
41564: LD_INT 2
41566: ARRAY
41567: PUSH
41568: LD_VAR 0 13
41572: PUSH
41573: LD_INT 2
41575: PLUS
41576: GREATER
41577: OR
41578: PUSH
41579: LD_VAR 0 8
41583: PUSH
41584: LD_INT 2
41586: ARRAY
41587: PUSH
41588: LD_VAR 0 13
41592: PUSH
41593: LD_INT 2
41595: MINUS
41596: LESS
41597: OR
41598: PUSH
41599: LD_VAR 0 8
41603: PUSH
41604: LD_INT 3
41606: ARRAY
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 8
41613: PUSH
41614: LD_INT 9
41616: PUSH
41617: LD_INT 10
41619: PUSH
41620: LD_INT 11
41622: PUSH
41623: LD_INT 12
41625: PUSH
41626: LD_INT 13
41628: PUSH
41629: LD_INT 16
41631: PUSH
41632: LD_INT 17
41634: PUSH
41635: LD_INT 18
41637: PUSH
41638: LD_INT 19
41640: PUSH
41641: LD_INT 20
41643: PUSH
41644: LD_INT 21
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: IN
41662: NOT
41663: OR
41664: PUSH
41665: LD_VAR 0 8
41669: PUSH
41670: LD_INT 5
41672: ARRAY
41673: NOT
41674: OR
41675: PUSH
41676: LD_VAR 0 8
41680: PUSH
41681: LD_INT 6
41683: ARRAY
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 7
41693: PUSH
41694: LD_INT 9
41696: PUSH
41697: LD_INT 10
41699: PUSH
41700: LD_INT 11
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: IN
41711: NOT
41712: OR
41713: IFFALSE 41719
// exit ;
41715: POP
41716: POP
41717: GO 41817
// end ;
41719: GO 41390
41721: POP
41722: POP
// side := GetSide ( depot ) ;
41723: LD_ADDR_VAR 0 9
41727: PUSH
41728: LD_VAR 0 1
41732: PPUSH
41733: CALL_OW 255
41737: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41738: LD_VAR 0 9
41742: PPUSH
41743: LD_VAR 0 3
41747: PPUSH
41748: LD_VAR 0 4
41752: PPUSH
41753: LD_INT 20
41755: PPUSH
41756: CALL 34138 0 4
41760: PUSH
41761: LD_INT 4
41763: ARRAY
41764: IFFALSE 41768
// exit ;
41766: GO 41817
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41768: LD_VAR 0 2
41772: PUSH
41773: LD_INT 29
41775: PUSH
41776: LD_INT 30
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: IN
41783: PUSH
41784: LD_VAR 0 3
41788: PPUSH
41789: LD_VAR 0 4
41793: PPUSH
41794: LD_VAR 0 9
41798: PPUSH
41799: CALL_OW 440
41803: NOT
41804: AND
41805: IFFALSE 41809
// exit ;
41807: GO 41817
// result := true ;
41809: LD_ADDR_VAR 0 6
41813: PUSH
41814: LD_INT 1
41816: ST_TO_ADDR
// end ;
41817: LD_VAR 0 6
41821: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41822: LD_INT 0
41824: PPUSH
41825: PPUSH
41826: PPUSH
41827: PPUSH
41828: PPUSH
41829: PPUSH
41830: PPUSH
41831: PPUSH
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
41838: PPUSH
41839: PPUSH
41840: PPUSH
41841: PPUSH
41842: PPUSH
41843: PPUSH
41844: PPUSH
41845: PPUSH
41846: PPUSH
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
41854: PPUSH
41855: PPUSH
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
41861: PPUSH
41862: PPUSH
41863: PPUSH
41864: PPUSH
41865: PPUSH
41866: PPUSH
41867: PPUSH
41868: PPUSH
41869: PPUSH
41870: PPUSH
41871: PPUSH
41872: PPUSH
41873: PPUSH
41874: PPUSH
41875: PPUSH
41876: PPUSH
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
// result = [ ] ;
41882: LD_ADDR_VAR 0 7
41886: PUSH
41887: EMPTY
41888: ST_TO_ADDR
// temp_list = [ ] ;
41889: LD_ADDR_VAR 0 9
41893: PUSH
41894: EMPTY
41895: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41896: LD_VAR 0 4
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: LD_INT 3
41912: PUSH
41913: LD_INT 4
41915: PUSH
41916: LD_INT 5
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: IN
41927: NOT
41928: PUSH
41929: LD_VAR 0 1
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: IN
41944: PUSH
41945: LD_VAR 0 5
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: LD_INT 3
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: IN
41964: NOT
41965: AND
41966: OR
41967: IFFALSE 41971
// exit ;
41969: GO 60362
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41971: LD_VAR 0 1
41975: PUSH
41976: LD_INT 6
41978: PUSH
41979: LD_INT 7
41981: PUSH
41982: LD_INT 8
41984: PUSH
41985: LD_INT 13
41987: PUSH
41988: LD_INT 12
41990: PUSH
41991: LD_INT 15
41993: PUSH
41994: LD_INT 11
41996: PUSH
41997: LD_INT 14
41999: PUSH
42000: LD_INT 10
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: IN
42014: IFFALSE 42024
// btype = b_lab ;
42016: LD_ADDR_VAR 0 1
42020: PUSH
42021: LD_INT 6
42023: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42024: LD_VAR 0 6
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: LD_INT 2
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: LIST
42042: IN
42043: NOT
42044: PUSH
42045: LD_VAR 0 1
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 3
42061: PUSH
42062: LD_INT 6
42064: PUSH
42065: LD_INT 36
42067: PUSH
42068: LD_INT 4
42070: PUSH
42071: LD_INT 5
42073: PUSH
42074: LD_INT 31
42076: PUSH
42077: LD_INT 32
42079: PUSH
42080: LD_INT 33
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: IN
42096: NOT
42097: PUSH
42098: LD_VAR 0 6
42102: PUSH
42103: LD_INT 1
42105: EQUAL
42106: AND
42107: OR
42108: PUSH
42109: LD_VAR 0 1
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: IN
42124: NOT
42125: PUSH
42126: LD_VAR 0 6
42130: PUSH
42131: LD_INT 2
42133: EQUAL
42134: AND
42135: OR
42136: IFFALSE 42146
// mode = 0 ;
42138: LD_ADDR_VAR 0 6
42142: PUSH
42143: LD_INT 0
42145: ST_TO_ADDR
// case mode of 0 :
42146: LD_VAR 0 6
42150: PUSH
42151: LD_INT 0
42153: DOUBLE
42154: EQUAL
42155: IFTRUE 42159
42157: GO 53612
42159: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42160: LD_ADDR_VAR 0 11
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 2
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: LD_INT 3
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 3
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42353: LD_ADDR_VAR 0 12
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: NEG
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: NEG
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 3
42510: NEG
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 3
42521: NEG
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42549: LD_ADDR_VAR 0 13
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: NEG
42697: PUSH
42698: LD_INT 3
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 3
42708: NEG
42709: PUSH
42710: LD_INT 2
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 3
42720: NEG
42721: PUSH
42722: LD_INT 3
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42748: LD_ADDR_VAR 0 14
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 3
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 3
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42944: LD_ADDR_VAR 0 15
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 3
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43137: LD_ADDR_VAR 0 16
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 3
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 3
43294: PUSH
43295: LD_INT 3
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: LD_INT 3
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43330: LD_ADDR_VAR 0 17
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43560: LD_ADDR_VAR 0 18
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43790: LD_ADDR_VAR 0 19
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: LD_INT 2
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 2
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 2
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: NEG
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44020: LD_ADDR_VAR 0 20
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 2
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: NEG
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44250: LD_ADDR_VAR 0 21
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 2
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44480: LD_ADDR_VAR 0 22
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: NEG
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44710: LD_ADDR_VAR 0 23
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: LD_INT 3
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 3
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44990: LD_ADDR_VAR 0 24
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 3
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45266: LD_ADDR_VAR 0 25
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 3
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 3
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45540: LD_ADDR_VAR 0 26
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: NEG
45740: PUSH
45741: LD_INT 2
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: LD_INT 3
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 3
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45816: LD_ADDR_VAR 0 27
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 3
46049: NEG
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 3
46061: NEG
46062: PUSH
46063: LD_INT 2
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46096: LD_ADDR_VAR 0 28
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 2
46295: NEG
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 3
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: NEG
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: NEG
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46378: LD_ADDR_VAR 0 29
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: LD_INT 3
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 3
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46657: LD_ADDR_VAR 0 30
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 3
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 3
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46935: LD_ADDR_VAR 0 31
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: LD_INT 3
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 3
47178: NEG
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47213: LD_ADDR_VAR 0 32
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 3
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 3
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 3
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 3
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47491: LD_ADDR_VAR 0 33
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: LD_INT 3
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 3
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 3
47735: NEG
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47770: LD_ADDR_VAR 0 34
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: LD_INT 3
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: NEG
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48050: LD_ADDR_VAR 0 35
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48162: LD_ADDR_VAR 0 36
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48274: LD_ADDR_VAR 0 37
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48386: LD_ADDR_VAR 0 38
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48498: LD_ADDR_VAR 0 39
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48610: LD_ADDR_VAR 0 40
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48722: LD_ADDR_VAR 0 41
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 2
48877: NEG
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 3
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 3
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 3
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 3
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 3
48996: NEG
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 3
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: NEG
49032: PUSH
49033: LD_INT 3
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49072: LD_ADDR_VAR 0 42
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 3
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 3
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 3
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: LD_INT 3
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 3
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 3
49369: NEG
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 3
49381: NEG
49382: PUSH
49383: LD_INT 3
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49422: LD_ADDR_VAR 0 43
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 3
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 3
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 3
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 3
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 3
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 3
49718: NEG
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: NEG
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49770: LD_ADDR_VAR 0 44
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 3
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 3
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 3
50013: PUSH
50014: LD_INT 3
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 3
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 3
50044: NEG
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 3
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 3
50079: NEG
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50120: LD_ADDR_VAR 0 45
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 2
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 3
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 3
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: PUSH
50367: LD_INT 3
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: LD_INT 3
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 3
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 3
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 3
50417: NEG
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 3
50429: NEG
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50470: LD_ADDR_VAR 0 46
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 3
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 3
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 3
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 3
50777: NEG
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50818: LD_ADDR_VAR 0 47
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50969: LD_ADDR_VAR 0 48
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51116: LD_ADDR_VAR 0 49
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51260: LD_ADDR_VAR 0 50
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51404: LD_ADDR_VAR 0 51
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51551: LD_ADDR_VAR 0 52
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 2
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51702: LD_ADDR_VAR 0 53
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51932: LD_ADDR_VAR 0 54
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52162: LD_ADDR_VAR 0 55
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52392: LD_ADDR_VAR 0 56
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52622: LD_ADDR_VAR 0 57
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52852: LD_ADDR_VAR 0 58
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53082: LD_ADDR_VAR 0 59
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53170: LD_ADDR_VAR 0 60
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53258: LD_ADDR_VAR 0 61
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53346: LD_ADDR_VAR 0 62
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53434: LD_ADDR_VAR 0 63
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53522: LD_ADDR_VAR 0 64
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: ST_TO_ADDR
// end ; 1 :
53610: GO 59507
53612: LD_INT 1
53614: DOUBLE
53615: EQUAL
53616: IFTRUE 53620
53618: GO 56243
53620: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53621: LD_ADDR_VAR 0 11
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 3
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53665: LD_ADDR_VAR 0 12
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53706: LD_ADDR_VAR 0 13
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: LD_INT 3
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: LIST
53745: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53746: LD_ADDR_VAR 0 14
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 3
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 3
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53787: LD_ADDR_VAR 0 15
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 3
53816: NEG
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: LIST
53830: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53831: LD_ADDR_VAR 0 16
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 3
53850: NEG
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 3
53862: NEG
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: LIST
53876: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53877: LD_ADDR_VAR 0 17
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 3
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: LIST
53920: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53921: LD_ADDR_VAR 0 18
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53962: LD_ADDR_VAR 0 19
53966: PUSH
53967: LD_INT 3
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 3
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54002: LD_ADDR_VAR 0 20
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54043: LD_ADDR_VAR 0 21
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: LIST
54086: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54087: LD_ADDR_VAR 0 22
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 3
54118: NEG
54119: PUSH
54120: LD_INT 3
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54133: LD_ADDR_VAR 0 23
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 4
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 3
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54177: LD_ADDR_VAR 0 24
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 3
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 4
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54218: LD_ADDR_VAR 0 25
54222: PUSH
54223: LD_INT 3
54225: PUSH
54226: LD_INT 3
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 4
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 3
54245: PUSH
54246: LD_INT 4
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54258: LD_ADDR_VAR 0 26
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 3
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 4
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54299: LD_ADDR_VAR 0 27
54303: PUSH
54304: LD_INT 3
54306: NEG
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 4
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54343: LD_ADDR_VAR 0 28
54347: PUSH
54348: LD_INT 3
54350: NEG
54351: PUSH
54352: LD_INT 3
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 3
54362: NEG
54363: PUSH
54364: LD_INT 4
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 4
54374: NEG
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54389: LD_ADDR_VAR 0 29
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 3
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 2
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 4
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 4
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 3
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 5
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 5
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: LD_INT 4
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 6
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 6
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 5
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54544: LD_ADDR_VAR 0 30
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 4
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 4
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 4
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 5
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 5
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 5
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 6
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 6
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54687: LD_ADDR_VAR 0 31
54691: PUSH
54692: LD_INT 3
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: LD_INT 3
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 3
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 4
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 4
54734: PUSH
54735: LD_INT 4
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: LD_INT 4
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 5
54754: PUSH
54755: LD_INT 4
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 5
54764: PUSH
54765: LD_INT 5
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 4
54774: PUSH
54775: LD_INT 5
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 6
54784: PUSH
54785: LD_INT 5
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 6
54794: PUSH
54795: LD_INT 6
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 5
54804: PUSH
54805: LD_INT 6
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54826: LD_ADDR_VAR 0 32
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 4
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 4
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 3
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 5
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 5
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 4
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 6
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 6
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 5
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54969: LD_ADDR_VAR 0 33
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 3
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 4
55021: NEG
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 4
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 4
55044: NEG
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 5
55055: NEG
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 5
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 5
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 6
55089: NEG
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 6
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55124: LD_ADDR_VAR 0 34
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: NEG
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: LD_INT 4
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 4
55179: NEG
55180: PUSH
55181: LD_INT 3
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 4
55191: NEG
55192: PUSH
55193: LD_INT 4
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 4
55203: NEG
55204: PUSH
55205: LD_INT 5
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 5
55215: NEG
55216: PUSH
55217: LD_INT 4
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 5
55227: NEG
55228: PUSH
55229: LD_INT 5
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 5
55239: NEG
55240: PUSH
55241: LD_INT 6
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 6
55251: NEG
55252: PUSH
55253: LD_INT 5
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 6
55263: NEG
55264: PUSH
55265: LD_INT 6
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55287: LD_ADDR_VAR 0 41
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: LD_INT 3
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: LIST
55330: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55331: LD_ADDR_VAR 0 42
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55372: LD_ADDR_VAR 0 43
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 3
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 3
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: LIST
55411: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55412: LD_ADDR_VAR 0 44
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: LIST
55452: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55453: LD_ADDR_VAR 0 45
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 3
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55497: LD_ADDR_VAR 0 46
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 3
55528: NEG
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55543: LD_ADDR_VAR 0 47
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55576: LD_ADDR_VAR 0 48
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55607: LD_ADDR_VAR 0 49
55611: PUSH
55612: LD_INT 3
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55636: LD_ADDR_VAR 0 50
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55665: LD_ADDR_VAR 0 51
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55696: LD_ADDR_VAR 0 52
55700: PUSH
55701: LD_INT 3
55703: NEG
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 3
55715: NEG
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55729: LD_ADDR_VAR 0 53
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 3
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55773: LD_ADDR_VAR 0 54
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: LIST
55813: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55814: LD_ADDR_VAR 0 55
55818: PUSH
55819: LD_INT 3
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: LD_INT 3
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55854: LD_ADDR_VAR 0 56
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: LIST
55894: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55895: LD_ADDR_VAR 0 57
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55939: LD_ADDR_VAR 0 58
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: LD_INT 3
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: NEG
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 3
55970: NEG
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55985: LD_ADDR_VAR 0 59
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: LIST
56028: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56029: LD_ADDR_VAR 0 60
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56070: LD_ADDR_VAR 0 61
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56110: LD_ADDR_VAR 0 62
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: LIST
56150: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56151: LD_ADDR_VAR 0 63
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56195: LD_ADDR_VAR 0 64
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: LIST
56240: ST_TO_ADDR
// end ; 2 :
56241: GO 59507
56243: LD_INT 2
56245: DOUBLE
56246: EQUAL
56247: IFTRUE 56251
56249: GO 59506
56251: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56252: LD_ADDR_VAR 0 29
56256: PUSH
56257: LD_INT 4
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 4
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 5
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 5
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 4
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 5
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 3
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 4
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 4
56382: PUSH
56383: LD_INT 4
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: LD_INT 4
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 4
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: LD_INT 4
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 4
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 3
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 4
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 5
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 5
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 4
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: LD_INT 5
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 3
56535: NEG
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 4
56591: NEG
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 4
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 4
56614: NEG
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 4
56637: NEG
56638: PUSH
56639: LD_INT 4
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 4
56649: NEG
56650: PUSH
56651: LD_INT 5
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: NEG
56662: PUSH
56663: LD_INT 4
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 3
56673: NEG
56674: PUSH
56675: LD_INT 3
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 4
56685: NEG
56686: PUSH
56687: LD_INT 3
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 5
56697: NEG
56698: PUSH
56699: LD_INT 4
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 5
56709: NEG
56710: PUSH
56711: LD_INT 5
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 3
56721: NEG
56722: PUSH
56723: LD_INT 5
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 5
56733: NEG
56734: PUSH
56735: LD_INT 3
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56790: LD_ADDR_VAR 0 30
56794: PUSH
56795: LD_INT 4
56797: PUSH
56798: LD_INT 4
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 4
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 5
56817: PUSH
56818: LD_INT 4
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 5
56827: PUSH
56828: LD_INT 5
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 4
56837: PUSH
56838: LD_INT 5
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: LD_INT 4
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: LD_INT 3
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 5
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: LD_INT 5
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: LD_INT 4
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 4
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: LD_INT 4
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 4
56980: NEG
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 4
56991: NEG
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 3
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 4
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 5
57036: NEG
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 5
57047: NEG
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 5
57059: NEG
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 3
57082: NEG
57083: PUSH
57084: LD_INT 3
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 3
57094: NEG
57095: PUSH
57096: LD_INT 4
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: LD_INT 3
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 4
57142: NEG
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 4
57154: NEG
57155: PUSH
57156: LD_INT 4
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: LD_INT 4
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 4
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 4
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 5
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 4
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: LD_INT 4
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 5
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: LD_INT 5
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57337: LD_ADDR_VAR 0 31
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 4
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: LD_INT 4
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 5
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 5
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 4
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 5
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: LD_INT 3
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 3
57437: NEG
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 4
57493: NEG
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 4
57504: NEG
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: NEG
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 4
57539: NEG
57540: PUSH
57541: LD_INT 4
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 4
57551: NEG
57552: PUSH
57553: LD_INT 5
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: LD_INT 4
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 4
57587: NEG
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 5
57599: NEG
57600: PUSH
57601: LD_INT 4
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 5
57611: NEG
57612: PUSH
57613: LD_INT 5
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 3
57623: NEG
57624: PUSH
57625: LD_INT 5
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 5
57635: NEG
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 4
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 4
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: LD_INT 4
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 4
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 4
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 5
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 5
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 4
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 3
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 5
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57887: LD_ADDR_VAR 0 32
57891: PUSH
57892: LD_INT 4
57894: NEG
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 4
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 3
57928: NEG
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 4
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 5
57950: NEG
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 5
57961: NEG
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 5
57973: NEG
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 3
57985: NEG
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 3
57996: NEG
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: LD_INT 4
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 4
58056: NEG
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 4
58068: NEG
58069: PUSH
58070: LD_INT 4
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: LD_INT 4
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 4
58092: NEG
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 4
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 5
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 4
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 4
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 5
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 5
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 4
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 4
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 4
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 4
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 4
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 5
58319: PUSH
58320: LD_INT 4
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 5
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 4
58339: PUSH
58340: LD_INT 5
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: LD_INT 4
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 5
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: LD_INT 5
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58434: LD_ADDR_VAR 0 33
58438: PUSH
58439: LD_INT 4
58441: NEG
58442: PUSH
58443: LD_INT 4
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 4
58453: NEG
58454: PUSH
58455: LD_INT 5
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 4
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 4
58489: NEG
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 5
58501: NEG
58502: PUSH
58503: LD_INT 4
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 5
58513: NEG
58514: PUSH
58515: LD_INT 5
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: NEG
58526: PUSH
58527: LD_INT 5
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 5
58537: NEG
58538: PUSH
58539: LD_INT 3
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 4
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: LD_INT 3
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: LD_INT 2
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 4
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: LD_INT 4
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 4
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 4
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 5
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 5
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 4
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 3
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 5
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: LD_INT 3
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 4
58764: PUSH
58765: LD_INT 3
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 4
58774: PUSH
58775: LD_INT 4
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: LD_INT 4
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: LD_INT 3
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 4
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: LD_INT 4
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 4
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: LD_INT 4
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: LD_INT 5
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 5
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 4
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 5
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58972: LD_ADDR_VAR 0 34
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 4
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 5
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: LD_INT 4
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 3
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 4
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: LD_INT 5
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 3
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: LD_INT 5
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 4
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 4
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 3
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 4
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 4
59174: PUSH
59175: LD_INT 4
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 4
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 5
59194: PUSH
59195: LD_INT 4
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 5
59204: PUSH
59205: LD_INT 5
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 4
59214: PUSH
59215: LD_INT 5
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: LD_INT 4
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: LD_INT 3
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 5
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: LD_INT 5
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: LD_INT 4
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 4
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: LD_INT 4
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 4
59357: NEG
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 4
59368: NEG
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 4
59402: NEG
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 5
59413: NEG
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 5
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 5
59436: NEG
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 3
59448: NEG
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: ST_TO_ADDR
// end ; end ;
59504: GO 59507
59506: POP
// case btype of b_depot , b_warehouse :
59507: LD_VAR 0 1
59511: PUSH
59512: LD_INT 0
59514: DOUBLE
59515: EQUAL
59516: IFTRUE 59526
59518: LD_INT 1
59520: DOUBLE
59521: EQUAL
59522: IFTRUE 59526
59524: GO 59727
59526: POP
// case nation of nation_american :
59527: LD_VAR 0 5
59531: PUSH
59532: LD_INT 1
59534: DOUBLE
59535: EQUAL
59536: IFTRUE 59540
59538: GO 59596
59540: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59541: LD_ADDR_VAR 0 9
59545: PUSH
59546: LD_VAR 0 11
59550: PUSH
59551: LD_VAR 0 12
59555: PUSH
59556: LD_VAR 0 13
59560: PUSH
59561: LD_VAR 0 14
59565: PUSH
59566: LD_VAR 0 15
59570: PUSH
59571: LD_VAR 0 16
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: PUSH
59584: LD_VAR 0 4
59588: PUSH
59589: LD_INT 1
59591: PLUS
59592: ARRAY
59593: ST_TO_ADDR
59594: GO 59725
59596: LD_INT 2
59598: DOUBLE
59599: EQUAL
59600: IFTRUE 59604
59602: GO 59660
59604: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59605: LD_ADDR_VAR 0 9
59609: PUSH
59610: LD_VAR 0 17
59614: PUSH
59615: LD_VAR 0 18
59619: PUSH
59620: LD_VAR 0 19
59624: PUSH
59625: LD_VAR 0 20
59629: PUSH
59630: LD_VAR 0 21
59634: PUSH
59635: LD_VAR 0 22
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: PUSH
59648: LD_VAR 0 4
59652: PUSH
59653: LD_INT 1
59655: PLUS
59656: ARRAY
59657: ST_TO_ADDR
59658: GO 59725
59660: LD_INT 3
59662: DOUBLE
59663: EQUAL
59664: IFTRUE 59668
59666: GO 59724
59668: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59669: LD_ADDR_VAR 0 9
59673: PUSH
59674: LD_VAR 0 23
59678: PUSH
59679: LD_VAR 0 24
59683: PUSH
59684: LD_VAR 0 25
59688: PUSH
59689: LD_VAR 0 26
59693: PUSH
59694: LD_VAR 0 27
59698: PUSH
59699: LD_VAR 0 28
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: PUSH
59712: LD_VAR 0 4
59716: PUSH
59717: LD_INT 1
59719: PLUS
59720: ARRAY
59721: ST_TO_ADDR
59722: GO 59725
59724: POP
59725: GO 60280
59727: LD_INT 2
59729: DOUBLE
59730: EQUAL
59731: IFTRUE 59741
59733: LD_INT 3
59735: DOUBLE
59736: EQUAL
59737: IFTRUE 59741
59739: GO 59797
59741: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59742: LD_ADDR_VAR 0 9
59746: PUSH
59747: LD_VAR 0 29
59751: PUSH
59752: LD_VAR 0 30
59756: PUSH
59757: LD_VAR 0 31
59761: PUSH
59762: LD_VAR 0 32
59766: PUSH
59767: LD_VAR 0 33
59771: PUSH
59772: LD_VAR 0 34
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: PUSH
59785: LD_VAR 0 4
59789: PUSH
59790: LD_INT 1
59792: PLUS
59793: ARRAY
59794: ST_TO_ADDR
59795: GO 60280
59797: LD_INT 16
59799: DOUBLE
59800: EQUAL
59801: IFTRUE 59859
59803: LD_INT 17
59805: DOUBLE
59806: EQUAL
59807: IFTRUE 59859
59809: LD_INT 18
59811: DOUBLE
59812: EQUAL
59813: IFTRUE 59859
59815: LD_INT 19
59817: DOUBLE
59818: EQUAL
59819: IFTRUE 59859
59821: LD_INT 22
59823: DOUBLE
59824: EQUAL
59825: IFTRUE 59859
59827: LD_INT 20
59829: DOUBLE
59830: EQUAL
59831: IFTRUE 59859
59833: LD_INT 21
59835: DOUBLE
59836: EQUAL
59837: IFTRUE 59859
59839: LD_INT 23
59841: DOUBLE
59842: EQUAL
59843: IFTRUE 59859
59845: LD_INT 24
59847: DOUBLE
59848: EQUAL
59849: IFTRUE 59859
59851: LD_INT 25
59853: DOUBLE
59854: EQUAL
59855: IFTRUE 59859
59857: GO 59915
59859: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59860: LD_ADDR_VAR 0 9
59864: PUSH
59865: LD_VAR 0 35
59869: PUSH
59870: LD_VAR 0 36
59874: PUSH
59875: LD_VAR 0 37
59879: PUSH
59880: LD_VAR 0 38
59884: PUSH
59885: LD_VAR 0 39
59889: PUSH
59890: LD_VAR 0 40
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: PUSH
59903: LD_VAR 0 4
59907: PUSH
59908: LD_INT 1
59910: PLUS
59911: ARRAY
59912: ST_TO_ADDR
59913: GO 60280
59915: LD_INT 6
59917: DOUBLE
59918: EQUAL
59919: IFTRUE 59971
59921: LD_INT 7
59923: DOUBLE
59924: EQUAL
59925: IFTRUE 59971
59927: LD_INT 8
59929: DOUBLE
59930: EQUAL
59931: IFTRUE 59971
59933: LD_INT 13
59935: DOUBLE
59936: EQUAL
59937: IFTRUE 59971
59939: LD_INT 12
59941: DOUBLE
59942: EQUAL
59943: IFTRUE 59971
59945: LD_INT 15
59947: DOUBLE
59948: EQUAL
59949: IFTRUE 59971
59951: LD_INT 11
59953: DOUBLE
59954: EQUAL
59955: IFTRUE 59971
59957: LD_INT 14
59959: DOUBLE
59960: EQUAL
59961: IFTRUE 59971
59963: LD_INT 10
59965: DOUBLE
59966: EQUAL
59967: IFTRUE 59971
59969: GO 60027
59971: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59972: LD_ADDR_VAR 0 9
59976: PUSH
59977: LD_VAR 0 41
59981: PUSH
59982: LD_VAR 0 42
59986: PUSH
59987: LD_VAR 0 43
59991: PUSH
59992: LD_VAR 0 44
59996: PUSH
59997: LD_VAR 0 45
60001: PUSH
60002: LD_VAR 0 46
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: PUSH
60015: LD_VAR 0 4
60019: PUSH
60020: LD_INT 1
60022: PLUS
60023: ARRAY
60024: ST_TO_ADDR
60025: GO 60280
60027: LD_INT 36
60029: DOUBLE
60030: EQUAL
60031: IFTRUE 60035
60033: GO 60091
60035: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60036: LD_ADDR_VAR 0 9
60040: PUSH
60041: LD_VAR 0 47
60045: PUSH
60046: LD_VAR 0 48
60050: PUSH
60051: LD_VAR 0 49
60055: PUSH
60056: LD_VAR 0 50
60060: PUSH
60061: LD_VAR 0 51
60065: PUSH
60066: LD_VAR 0 52
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: PUSH
60079: LD_VAR 0 4
60083: PUSH
60084: LD_INT 1
60086: PLUS
60087: ARRAY
60088: ST_TO_ADDR
60089: GO 60280
60091: LD_INT 4
60093: DOUBLE
60094: EQUAL
60095: IFTRUE 60117
60097: LD_INT 5
60099: DOUBLE
60100: EQUAL
60101: IFTRUE 60117
60103: LD_INT 34
60105: DOUBLE
60106: EQUAL
60107: IFTRUE 60117
60109: LD_INT 37
60111: DOUBLE
60112: EQUAL
60113: IFTRUE 60117
60115: GO 60173
60117: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60118: LD_ADDR_VAR 0 9
60122: PUSH
60123: LD_VAR 0 53
60127: PUSH
60128: LD_VAR 0 54
60132: PUSH
60133: LD_VAR 0 55
60137: PUSH
60138: LD_VAR 0 56
60142: PUSH
60143: LD_VAR 0 57
60147: PUSH
60148: LD_VAR 0 58
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: PUSH
60161: LD_VAR 0 4
60165: PUSH
60166: LD_INT 1
60168: PLUS
60169: ARRAY
60170: ST_TO_ADDR
60171: GO 60280
60173: LD_INT 31
60175: DOUBLE
60176: EQUAL
60177: IFTRUE 60223
60179: LD_INT 32
60181: DOUBLE
60182: EQUAL
60183: IFTRUE 60223
60185: LD_INT 33
60187: DOUBLE
60188: EQUAL
60189: IFTRUE 60223
60191: LD_INT 27
60193: DOUBLE
60194: EQUAL
60195: IFTRUE 60223
60197: LD_INT 26
60199: DOUBLE
60200: EQUAL
60201: IFTRUE 60223
60203: LD_INT 28
60205: DOUBLE
60206: EQUAL
60207: IFTRUE 60223
60209: LD_INT 29
60211: DOUBLE
60212: EQUAL
60213: IFTRUE 60223
60215: LD_INT 30
60217: DOUBLE
60218: EQUAL
60219: IFTRUE 60223
60221: GO 60279
60223: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60224: LD_ADDR_VAR 0 9
60228: PUSH
60229: LD_VAR 0 59
60233: PUSH
60234: LD_VAR 0 60
60238: PUSH
60239: LD_VAR 0 61
60243: PUSH
60244: LD_VAR 0 62
60248: PUSH
60249: LD_VAR 0 63
60253: PUSH
60254: LD_VAR 0 64
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: PUSH
60267: LD_VAR 0 4
60271: PUSH
60272: LD_INT 1
60274: PLUS
60275: ARRAY
60276: ST_TO_ADDR
60277: GO 60280
60279: POP
// temp_list2 = [ ] ;
60280: LD_ADDR_VAR 0 10
60284: PUSH
60285: EMPTY
60286: ST_TO_ADDR
// for i in temp_list do
60287: LD_ADDR_VAR 0 8
60291: PUSH
60292: LD_VAR 0 9
60296: PUSH
60297: FOR_IN
60298: IFFALSE 60350
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60300: LD_ADDR_VAR 0 10
60304: PUSH
60305: LD_VAR 0 10
60309: PUSH
60310: LD_VAR 0 8
60314: PUSH
60315: LD_INT 1
60317: ARRAY
60318: PUSH
60319: LD_VAR 0 2
60323: PLUS
60324: PUSH
60325: LD_VAR 0 8
60329: PUSH
60330: LD_INT 2
60332: ARRAY
60333: PUSH
60334: LD_VAR 0 3
60338: PLUS
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: EMPTY
60345: LIST
60346: ADD
60347: ST_TO_ADDR
60348: GO 60297
60350: POP
60351: POP
// result = temp_list2 ;
60352: LD_ADDR_VAR 0 7
60356: PUSH
60357: LD_VAR 0 10
60361: ST_TO_ADDR
// end ;
60362: LD_VAR 0 7
60366: RET
// export function EnemyInRange ( unit , dist ) ; begin
60367: LD_INT 0
60369: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60370: LD_ADDR_VAR 0 3
60374: PUSH
60375: LD_VAR 0 1
60379: PPUSH
60380: CALL_OW 255
60384: PPUSH
60385: LD_VAR 0 1
60389: PPUSH
60390: CALL_OW 250
60394: PPUSH
60395: LD_VAR 0 1
60399: PPUSH
60400: CALL_OW 251
60404: PPUSH
60405: LD_VAR 0 2
60409: PPUSH
60410: CALL 34138 0 4
60414: PUSH
60415: LD_INT 4
60417: ARRAY
60418: ST_TO_ADDR
// end ;
60419: LD_VAR 0 3
60423: RET
// export function PlayerSeeMe ( unit ) ; begin
60424: LD_INT 0
60426: PPUSH
// result := See ( your_side , unit ) ;
60427: LD_ADDR_VAR 0 2
60431: PUSH
60432: LD_OWVAR 2
60436: PPUSH
60437: LD_VAR 0 1
60441: PPUSH
60442: CALL_OW 292
60446: ST_TO_ADDR
// end ;
60447: LD_VAR 0 2
60451: RET
// export function ReverseDir ( unit ) ; begin
60452: LD_INT 0
60454: PPUSH
// if not unit then
60455: LD_VAR 0 1
60459: NOT
60460: IFFALSE 60464
// exit ;
60462: GO 60487
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60464: LD_ADDR_VAR 0 2
60468: PUSH
60469: LD_VAR 0 1
60473: PPUSH
60474: CALL_OW 254
60478: PUSH
60479: LD_INT 3
60481: PLUS
60482: PUSH
60483: LD_INT 6
60485: MOD
60486: ST_TO_ADDR
// end ;
60487: LD_VAR 0 2
60491: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60492: LD_INT 0
60494: PPUSH
60495: PPUSH
60496: PPUSH
60497: PPUSH
60498: PPUSH
// if not hexes then
60499: LD_VAR 0 2
60503: NOT
60504: IFFALSE 60508
// exit ;
60506: GO 60656
// dist := 9999 ;
60508: LD_ADDR_VAR 0 5
60512: PUSH
60513: LD_INT 9999
60515: ST_TO_ADDR
// for i = 1 to hexes do
60516: LD_ADDR_VAR 0 4
60520: PUSH
60521: DOUBLE
60522: LD_INT 1
60524: DEC
60525: ST_TO_ADDR
60526: LD_VAR 0 2
60530: PUSH
60531: FOR_TO
60532: IFFALSE 60644
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60534: LD_VAR 0 1
60538: PPUSH
60539: LD_VAR 0 2
60543: PUSH
60544: LD_VAR 0 4
60548: ARRAY
60549: PUSH
60550: LD_INT 1
60552: ARRAY
60553: PPUSH
60554: LD_VAR 0 2
60558: PUSH
60559: LD_VAR 0 4
60563: ARRAY
60564: PUSH
60565: LD_INT 2
60567: ARRAY
60568: PPUSH
60569: CALL_OW 297
60573: PUSH
60574: LD_VAR 0 5
60578: LESS
60579: IFFALSE 60642
// begin hex := hexes [ i ] ;
60581: LD_ADDR_VAR 0 7
60585: PUSH
60586: LD_VAR 0 2
60590: PUSH
60591: LD_VAR 0 4
60595: ARRAY
60596: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60597: LD_ADDR_VAR 0 5
60601: PUSH
60602: LD_VAR 0 1
60606: PPUSH
60607: LD_VAR 0 2
60611: PUSH
60612: LD_VAR 0 4
60616: ARRAY
60617: PUSH
60618: LD_INT 1
60620: ARRAY
60621: PPUSH
60622: LD_VAR 0 2
60626: PUSH
60627: LD_VAR 0 4
60631: ARRAY
60632: PUSH
60633: LD_INT 2
60635: ARRAY
60636: PPUSH
60637: CALL_OW 297
60641: ST_TO_ADDR
// end ; end ;
60642: GO 60531
60644: POP
60645: POP
// result := hex ;
60646: LD_ADDR_VAR 0 3
60650: PUSH
60651: LD_VAR 0 7
60655: ST_TO_ADDR
// end ;
60656: LD_VAR 0 3
60660: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60661: LD_INT 0
60663: PPUSH
60664: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60665: LD_VAR 0 1
60669: NOT
60670: PUSH
60671: LD_VAR 0 1
60675: PUSH
60676: LD_INT 21
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 23
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PPUSH
60700: CALL_OW 69
60704: IN
60705: NOT
60706: OR
60707: IFFALSE 60711
// exit ;
60709: GO 60758
// for i = 1 to 3 do
60711: LD_ADDR_VAR 0 3
60715: PUSH
60716: DOUBLE
60717: LD_INT 1
60719: DEC
60720: ST_TO_ADDR
60721: LD_INT 3
60723: PUSH
60724: FOR_TO
60725: IFFALSE 60756
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60727: LD_VAR 0 1
60731: PPUSH
60732: CALL_OW 250
60736: PPUSH
60737: LD_VAR 0 1
60741: PPUSH
60742: CALL_OW 251
60746: PPUSH
60747: LD_INT 1
60749: PPUSH
60750: CALL_OW 453
60754: GO 60724
60756: POP
60757: POP
// end ;
60758: LD_VAR 0 2
60762: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60763: LD_INT 0
60765: PPUSH
60766: PPUSH
60767: PPUSH
60768: PPUSH
60769: PPUSH
60770: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60771: LD_VAR 0 1
60775: NOT
60776: PUSH
60777: LD_VAR 0 2
60781: NOT
60782: OR
60783: PUSH
60784: LD_VAR 0 1
60788: PPUSH
60789: CALL_OW 314
60793: OR
60794: IFFALSE 60798
// exit ;
60796: GO 61239
// x := GetX ( enemy_unit ) ;
60798: LD_ADDR_VAR 0 7
60802: PUSH
60803: LD_VAR 0 2
60807: PPUSH
60808: CALL_OW 250
60812: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60813: LD_ADDR_VAR 0 8
60817: PUSH
60818: LD_VAR 0 2
60822: PPUSH
60823: CALL_OW 251
60827: ST_TO_ADDR
// if not x or not y then
60828: LD_VAR 0 7
60832: NOT
60833: PUSH
60834: LD_VAR 0 8
60838: NOT
60839: OR
60840: IFFALSE 60844
// exit ;
60842: GO 61239
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60844: LD_ADDR_VAR 0 6
60848: PUSH
60849: LD_VAR 0 7
60853: PPUSH
60854: LD_INT 0
60856: PPUSH
60857: LD_INT 4
60859: PPUSH
60860: CALL_OW 272
60864: PUSH
60865: LD_VAR 0 8
60869: PPUSH
60870: LD_INT 0
60872: PPUSH
60873: LD_INT 4
60875: PPUSH
60876: CALL_OW 273
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_VAR 0 7
60889: PPUSH
60890: LD_INT 1
60892: PPUSH
60893: LD_INT 4
60895: PPUSH
60896: CALL_OW 272
60900: PUSH
60901: LD_VAR 0 8
60905: PPUSH
60906: LD_INT 1
60908: PPUSH
60909: LD_INT 4
60911: PPUSH
60912: CALL_OW 273
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_VAR 0 7
60925: PPUSH
60926: LD_INT 2
60928: PPUSH
60929: LD_INT 4
60931: PPUSH
60932: CALL_OW 272
60936: PUSH
60937: LD_VAR 0 8
60941: PPUSH
60942: LD_INT 2
60944: PPUSH
60945: LD_INT 4
60947: PPUSH
60948: CALL_OW 273
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_VAR 0 7
60961: PPUSH
60962: LD_INT 3
60964: PPUSH
60965: LD_INT 4
60967: PPUSH
60968: CALL_OW 272
60972: PUSH
60973: LD_VAR 0 8
60977: PPUSH
60978: LD_INT 3
60980: PPUSH
60981: LD_INT 4
60983: PPUSH
60984: CALL_OW 273
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_VAR 0 7
60997: PPUSH
60998: LD_INT 4
61000: PPUSH
61001: LD_INT 4
61003: PPUSH
61004: CALL_OW 272
61008: PUSH
61009: LD_VAR 0 8
61013: PPUSH
61014: LD_INT 4
61016: PPUSH
61017: LD_INT 4
61019: PPUSH
61020: CALL_OW 273
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_VAR 0 7
61033: PPUSH
61034: LD_INT 5
61036: PPUSH
61037: LD_INT 4
61039: PPUSH
61040: CALL_OW 272
61044: PUSH
61045: LD_VAR 0 8
61049: PPUSH
61050: LD_INT 5
61052: PPUSH
61053: LD_INT 4
61055: PPUSH
61056: CALL_OW 273
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: ST_TO_ADDR
// for i = tmp downto 1 do
61073: LD_ADDR_VAR 0 4
61077: PUSH
61078: DOUBLE
61079: LD_VAR 0 6
61083: INC
61084: ST_TO_ADDR
61085: LD_INT 1
61087: PUSH
61088: FOR_DOWNTO
61089: IFFALSE 61190
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61091: LD_VAR 0 6
61095: PUSH
61096: LD_VAR 0 4
61100: ARRAY
61101: PUSH
61102: LD_INT 1
61104: ARRAY
61105: PPUSH
61106: LD_VAR 0 6
61110: PUSH
61111: LD_VAR 0 4
61115: ARRAY
61116: PUSH
61117: LD_INT 2
61119: ARRAY
61120: PPUSH
61121: CALL_OW 488
61125: NOT
61126: PUSH
61127: LD_VAR 0 6
61131: PUSH
61132: LD_VAR 0 4
61136: ARRAY
61137: PUSH
61138: LD_INT 1
61140: ARRAY
61141: PPUSH
61142: LD_VAR 0 6
61146: PUSH
61147: LD_VAR 0 4
61151: ARRAY
61152: PUSH
61153: LD_INT 2
61155: ARRAY
61156: PPUSH
61157: CALL_OW 428
61161: PUSH
61162: LD_INT 0
61164: NONEQUAL
61165: OR
61166: IFFALSE 61188
// tmp := Delete ( tmp , i ) ;
61168: LD_ADDR_VAR 0 6
61172: PUSH
61173: LD_VAR 0 6
61177: PPUSH
61178: LD_VAR 0 4
61182: PPUSH
61183: CALL_OW 3
61187: ST_TO_ADDR
61188: GO 61088
61190: POP
61191: POP
// j := GetClosestHex ( unit , tmp ) ;
61192: LD_ADDR_VAR 0 5
61196: PUSH
61197: LD_VAR 0 1
61201: PPUSH
61202: LD_VAR 0 6
61206: PPUSH
61207: CALL 60492 0 2
61211: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61212: LD_VAR 0 1
61216: PPUSH
61217: LD_VAR 0 5
61221: PUSH
61222: LD_INT 1
61224: ARRAY
61225: PPUSH
61226: LD_VAR 0 5
61230: PUSH
61231: LD_INT 2
61233: ARRAY
61234: PPUSH
61235: CALL_OW 111
// end ;
61239: LD_VAR 0 3
61243: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61244: LD_INT 0
61246: PPUSH
61247: PPUSH
61248: PPUSH
// uc_side = 0 ;
61249: LD_ADDR_OWVAR 20
61253: PUSH
61254: LD_INT 0
61256: ST_TO_ADDR
// uc_nation = 0 ;
61257: LD_ADDR_OWVAR 21
61261: PUSH
61262: LD_INT 0
61264: ST_TO_ADDR
// InitHc_All ( ) ;
61265: CALL_OW 584
// InitVc ;
61269: CALL_OW 20
// if mastodonts then
61273: LD_VAR 0 6
61277: IFFALSE 61344
// for i = 1 to mastodonts do
61279: LD_ADDR_VAR 0 11
61283: PUSH
61284: DOUBLE
61285: LD_INT 1
61287: DEC
61288: ST_TO_ADDR
61289: LD_VAR 0 6
61293: PUSH
61294: FOR_TO
61295: IFFALSE 61342
// begin vc_chassis := 31 ;
61297: LD_ADDR_OWVAR 37
61301: PUSH
61302: LD_INT 31
61304: ST_TO_ADDR
// vc_control := control_rider ;
61305: LD_ADDR_OWVAR 38
61309: PUSH
61310: LD_INT 4
61312: ST_TO_ADDR
// animal := CreateVehicle ;
61313: LD_ADDR_VAR 0 12
61317: PUSH
61318: CALL_OW 45
61322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61323: LD_VAR 0 12
61327: PPUSH
61328: LD_VAR 0 8
61332: PPUSH
61333: LD_INT 0
61335: PPUSH
61336: CALL 63532 0 3
// end ;
61340: GO 61294
61342: POP
61343: POP
// if horses then
61344: LD_VAR 0 5
61348: IFFALSE 61415
// for i = 1 to horses do
61350: LD_ADDR_VAR 0 11
61354: PUSH
61355: DOUBLE
61356: LD_INT 1
61358: DEC
61359: ST_TO_ADDR
61360: LD_VAR 0 5
61364: PUSH
61365: FOR_TO
61366: IFFALSE 61413
// begin hc_class := 21 ;
61368: LD_ADDR_OWVAR 28
61372: PUSH
61373: LD_INT 21
61375: ST_TO_ADDR
// hc_gallery :=  ;
61376: LD_ADDR_OWVAR 33
61380: PUSH
61381: LD_STRING 
61383: ST_TO_ADDR
// animal := CreateHuman ;
61384: LD_ADDR_VAR 0 12
61388: PUSH
61389: CALL_OW 44
61393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61394: LD_VAR 0 12
61398: PPUSH
61399: LD_VAR 0 8
61403: PPUSH
61404: LD_INT 0
61406: PPUSH
61407: CALL 63532 0 3
// end ;
61411: GO 61365
61413: POP
61414: POP
// if birds then
61415: LD_VAR 0 1
61419: IFFALSE 61486
// for i = 1 to birds do
61421: LD_ADDR_VAR 0 11
61425: PUSH
61426: DOUBLE
61427: LD_INT 1
61429: DEC
61430: ST_TO_ADDR
61431: LD_VAR 0 1
61435: PUSH
61436: FOR_TO
61437: IFFALSE 61484
// begin hc_class = 18 ;
61439: LD_ADDR_OWVAR 28
61443: PUSH
61444: LD_INT 18
61446: ST_TO_ADDR
// hc_gallery =  ;
61447: LD_ADDR_OWVAR 33
61451: PUSH
61452: LD_STRING 
61454: ST_TO_ADDR
// animal := CreateHuman ;
61455: LD_ADDR_VAR 0 12
61459: PUSH
61460: CALL_OW 44
61464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61465: LD_VAR 0 12
61469: PPUSH
61470: LD_VAR 0 8
61474: PPUSH
61475: LD_INT 0
61477: PPUSH
61478: CALL 63532 0 3
// end ;
61482: GO 61436
61484: POP
61485: POP
// if tigers then
61486: LD_VAR 0 2
61490: IFFALSE 61574
// for i = 1 to tigers do
61492: LD_ADDR_VAR 0 11
61496: PUSH
61497: DOUBLE
61498: LD_INT 1
61500: DEC
61501: ST_TO_ADDR
61502: LD_VAR 0 2
61506: PUSH
61507: FOR_TO
61508: IFFALSE 61572
// begin hc_class = class_tiger ;
61510: LD_ADDR_OWVAR 28
61514: PUSH
61515: LD_INT 14
61517: ST_TO_ADDR
// hc_gallery =  ;
61518: LD_ADDR_OWVAR 33
61522: PUSH
61523: LD_STRING 
61525: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61526: LD_ADDR_OWVAR 35
61530: PUSH
61531: LD_INT 7
61533: NEG
61534: PPUSH
61535: LD_INT 7
61537: PPUSH
61538: CALL_OW 12
61542: ST_TO_ADDR
// animal := CreateHuman ;
61543: LD_ADDR_VAR 0 12
61547: PUSH
61548: CALL_OW 44
61552: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61553: LD_VAR 0 12
61557: PPUSH
61558: LD_VAR 0 8
61562: PPUSH
61563: LD_INT 0
61565: PPUSH
61566: CALL 63532 0 3
// end ;
61570: GO 61507
61572: POP
61573: POP
// if apemans then
61574: LD_VAR 0 3
61578: IFFALSE 61701
// for i = 1 to apemans do
61580: LD_ADDR_VAR 0 11
61584: PUSH
61585: DOUBLE
61586: LD_INT 1
61588: DEC
61589: ST_TO_ADDR
61590: LD_VAR 0 3
61594: PUSH
61595: FOR_TO
61596: IFFALSE 61699
// begin hc_class = class_apeman ;
61598: LD_ADDR_OWVAR 28
61602: PUSH
61603: LD_INT 12
61605: ST_TO_ADDR
// hc_gallery =  ;
61606: LD_ADDR_OWVAR 33
61610: PUSH
61611: LD_STRING 
61613: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61614: LD_ADDR_OWVAR 35
61618: PUSH
61619: LD_INT 5
61621: NEG
61622: PPUSH
61623: LD_INT 5
61625: PPUSH
61626: CALL_OW 12
61630: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61631: LD_ADDR_OWVAR 31
61635: PUSH
61636: LD_INT 1
61638: PPUSH
61639: LD_INT 3
61641: PPUSH
61642: CALL_OW 12
61646: PUSH
61647: LD_INT 1
61649: PPUSH
61650: LD_INT 3
61652: PPUSH
61653: CALL_OW 12
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: ST_TO_ADDR
// animal := CreateHuman ;
61670: LD_ADDR_VAR 0 12
61674: PUSH
61675: CALL_OW 44
61679: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61680: LD_VAR 0 12
61684: PPUSH
61685: LD_VAR 0 8
61689: PPUSH
61690: LD_INT 0
61692: PPUSH
61693: CALL 63532 0 3
// end ;
61697: GO 61595
61699: POP
61700: POP
// if enchidnas then
61701: LD_VAR 0 4
61705: IFFALSE 61772
// for i = 1 to enchidnas do
61707: LD_ADDR_VAR 0 11
61711: PUSH
61712: DOUBLE
61713: LD_INT 1
61715: DEC
61716: ST_TO_ADDR
61717: LD_VAR 0 4
61721: PUSH
61722: FOR_TO
61723: IFFALSE 61770
// begin hc_class = 13 ;
61725: LD_ADDR_OWVAR 28
61729: PUSH
61730: LD_INT 13
61732: ST_TO_ADDR
// hc_gallery =  ;
61733: LD_ADDR_OWVAR 33
61737: PUSH
61738: LD_STRING 
61740: ST_TO_ADDR
// animal := CreateHuman ;
61741: LD_ADDR_VAR 0 12
61745: PUSH
61746: CALL_OW 44
61750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61751: LD_VAR 0 12
61755: PPUSH
61756: LD_VAR 0 8
61760: PPUSH
61761: LD_INT 0
61763: PPUSH
61764: CALL 63532 0 3
// end ;
61768: GO 61722
61770: POP
61771: POP
// if fishes then
61772: LD_VAR 0 7
61776: IFFALSE 61843
// for i = 1 to fishes do
61778: LD_ADDR_VAR 0 11
61782: PUSH
61783: DOUBLE
61784: LD_INT 1
61786: DEC
61787: ST_TO_ADDR
61788: LD_VAR 0 7
61792: PUSH
61793: FOR_TO
61794: IFFALSE 61841
// begin hc_class = 20 ;
61796: LD_ADDR_OWVAR 28
61800: PUSH
61801: LD_INT 20
61803: ST_TO_ADDR
// hc_gallery =  ;
61804: LD_ADDR_OWVAR 33
61808: PUSH
61809: LD_STRING 
61811: ST_TO_ADDR
// animal := CreateHuman ;
61812: LD_ADDR_VAR 0 12
61816: PUSH
61817: CALL_OW 44
61821: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61822: LD_VAR 0 12
61826: PPUSH
61827: LD_VAR 0 9
61831: PPUSH
61832: LD_INT 0
61834: PPUSH
61835: CALL 63532 0 3
// end ;
61839: GO 61793
61841: POP
61842: POP
// end ;
61843: LD_VAR 0 10
61847: RET
// export function WantHeal ( sci , unit ) ; begin
61848: LD_INT 0
61850: PPUSH
// if GetTaskList ( sci ) > 0 then
61851: LD_VAR 0 1
61855: PPUSH
61856: CALL_OW 437
61860: PUSH
61861: LD_INT 0
61863: GREATER
61864: IFFALSE 61934
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61866: LD_VAR 0 1
61870: PPUSH
61871: CALL_OW 437
61875: PUSH
61876: LD_INT 1
61878: ARRAY
61879: PUSH
61880: LD_INT 1
61882: ARRAY
61883: PUSH
61884: LD_STRING l
61886: EQUAL
61887: PUSH
61888: LD_VAR 0 1
61892: PPUSH
61893: CALL_OW 437
61897: PUSH
61898: LD_INT 1
61900: ARRAY
61901: PUSH
61902: LD_INT 4
61904: ARRAY
61905: PUSH
61906: LD_VAR 0 2
61910: EQUAL
61911: AND
61912: IFFALSE 61924
// result := true else
61914: LD_ADDR_VAR 0 3
61918: PUSH
61919: LD_INT 1
61921: ST_TO_ADDR
61922: GO 61932
// result := false ;
61924: LD_ADDR_VAR 0 3
61928: PUSH
61929: LD_INT 0
61931: ST_TO_ADDR
// end else
61932: GO 61942
// result := false ;
61934: LD_ADDR_VAR 0 3
61938: PUSH
61939: LD_INT 0
61941: ST_TO_ADDR
// end ;
61942: LD_VAR 0 3
61946: RET
// export function HealTarget ( sci ) ; begin
61947: LD_INT 0
61949: PPUSH
// if not sci then
61950: LD_VAR 0 1
61954: NOT
61955: IFFALSE 61959
// exit ;
61957: GO 62024
// result := 0 ;
61959: LD_ADDR_VAR 0 2
61963: PUSH
61964: LD_INT 0
61966: ST_TO_ADDR
// if GetTaskList ( sci ) then
61967: LD_VAR 0 1
61971: PPUSH
61972: CALL_OW 437
61976: IFFALSE 62024
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61978: LD_VAR 0 1
61982: PPUSH
61983: CALL_OW 437
61987: PUSH
61988: LD_INT 1
61990: ARRAY
61991: PUSH
61992: LD_INT 1
61994: ARRAY
61995: PUSH
61996: LD_STRING l
61998: EQUAL
61999: IFFALSE 62024
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62001: LD_ADDR_VAR 0 2
62005: PUSH
62006: LD_VAR 0 1
62010: PPUSH
62011: CALL_OW 437
62015: PUSH
62016: LD_INT 1
62018: ARRAY
62019: PUSH
62020: LD_INT 4
62022: ARRAY
62023: ST_TO_ADDR
// end ;
62024: LD_VAR 0 2
62028: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62029: LD_INT 0
62031: PPUSH
62032: PPUSH
62033: PPUSH
62034: PPUSH
// if not base_units then
62035: LD_VAR 0 1
62039: NOT
62040: IFFALSE 62044
// exit ;
62042: GO 62131
// result := false ;
62044: LD_ADDR_VAR 0 2
62048: PUSH
62049: LD_INT 0
62051: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62052: LD_ADDR_VAR 0 5
62056: PUSH
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_INT 21
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PPUSH
62072: CALL_OW 72
62076: ST_TO_ADDR
// if not tmp then
62077: LD_VAR 0 5
62081: NOT
62082: IFFALSE 62086
// exit ;
62084: GO 62131
// for i in tmp do
62086: LD_ADDR_VAR 0 3
62090: PUSH
62091: LD_VAR 0 5
62095: PUSH
62096: FOR_IN
62097: IFFALSE 62129
// begin result := EnemyInRange ( i , 22 ) ;
62099: LD_ADDR_VAR 0 2
62103: PUSH
62104: LD_VAR 0 3
62108: PPUSH
62109: LD_INT 22
62111: PPUSH
62112: CALL 60367 0 2
62116: ST_TO_ADDR
// if result then
62117: LD_VAR 0 2
62121: IFFALSE 62127
// exit ;
62123: POP
62124: POP
62125: GO 62131
// end ;
62127: GO 62096
62129: POP
62130: POP
// end ;
62131: LD_VAR 0 2
62135: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62136: LD_INT 0
62138: PPUSH
62139: PPUSH
// if not units then
62140: LD_VAR 0 1
62144: NOT
62145: IFFALSE 62149
// exit ;
62147: GO 62219
// result := [ ] ;
62149: LD_ADDR_VAR 0 3
62153: PUSH
62154: EMPTY
62155: ST_TO_ADDR
// for i in units do
62156: LD_ADDR_VAR 0 4
62160: PUSH
62161: LD_VAR 0 1
62165: PUSH
62166: FOR_IN
62167: IFFALSE 62217
// if GetTag ( i ) = tag then
62169: LD_VAR 0 4
62173: PPUSH
62174: CALL_OW 110
62178: PUSH
62179: LD_VAR 0 2
62183: EQUAL
62184: IFFALSE 62215
// result := Insert ( result , result + 1 , i ) ;
62186: LD_ADDR_VAR 0 3
62190: PUSH
62191: LD_VAR 0 3
62195: PPUSH
62196: LD_VAR 0 3
62200: PUSH
62201: LD_INT 1
62203: PLUS
62204: PPUSH
62205: LD_VAR 0 4
62209: PPUSH
62210: CALL_OW 2
62214: ST_TO_ADDR
62215: GO 62166
62217: POP
62218: POP
// end ;
62219: LD_VAR 0 3
62223: RET
// export function IsDriver ( un ) ; begin
62224: LD_INT 0
62226: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62227: LD_ADDR_VAR 0 2
62231: PUSH
62232: LD_VAR 0 1
62236: PUSH
62237: LD_INT 55
62239: PUSH
62240: EMPTY
62241: LIST
62242: PPUSH
62243: CALL_OW 69
62247: IN
62248: ST_TO_ADDR
// end ;
62249: LD_VAR 0 2
62253: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62254: LD_INT 0
62256: PPUSH
62257: PPUSH
// list := [ ] ;
62258: LD_ADDR_VAR 0 5
62262: PUSH
62263: EMPTY
62264: ST_TO_ADDR
// case d of 0 :
62265: LD_VAR 0 3
62269: PUSH
62270: LD_INT 0
62272: DOUBLE
62273: EQUAL
62274: IFTRUE 62278
62276: GO 62411
62278: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62279: LD_ADDR_VAR 0 5
62283: PUSH
62284: LD_VAR 0 1
62288: PUSH
62289: LD_INT 4
62291: MINUS
62292: PUSH
62293: LD_VAR 0 2
62297: PUSH
62298: LD_INT 4
62300: MINUS
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: LIST
62309: PUSH
62310: LD_VAR 0 1
62314: PUSH
62315: LD_INT 3
62317: MINUS
62318: PUSH
62319: LD_VAR 0 2
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: PUSH
62332: LD_VAR 0 1
62336: PUSH
62337: LD_INT 4
62339: PLUS
62340: PUSH
62341: LD_VAR 0 2
62345: PUSH
62346: LD_INT 4
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: LIST
62353: PUSH
62354: LD_VAR 0 1
62358: PUSH
62359: LD_INT 3
62361: PLUS
62362: PUSH
62363: LD_VAR 0 2
62367: PUSH
62368: LD_INT 3
62370: PLUS
62371: PUSH
62372: LD_INT 5
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: PUSH
62380: LD_VAR 0 1
62384: PUSH
62385: LD_VAR 0 2
62389: PUSH
62390: LD_INT 4
62392: PLUS
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: LIST
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: ST_TO_ADDR
// end ; 1 :
62409: GO 63109
62411: LD_INT 1
62413: DOUBLE
62414: EQUAL
62415: IFTRUE 62419
62417: GO 62552
62419: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62420: LD_ADDR_VAR 0 5
62424: PUSH
62425: LD_VAR 0 1
62429: PUSH
62430: LD_VAR 0 2
62434: PUSH
62435: LD_INT 4
62437: MINUS
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: LIST
62446: PUSH
62447: LD_VAR 0 1
62451: PUSH
62452: LD_INT 3
62454: MINUS
62455: PUSH
62456: LD_VAR 0 2
62460: PUSH
62461: LD_INT 3
62463: MINUS
62464: PUSH
62465: LD_INT 2
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: PUSH
62473: LD_VAR 0 1
62477: PUSH
62478: LD_INT 4
62480: MINUS
62481: PUSH
62482: LD_VAR 0 2
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: LIST
62494: PUSH
62495: LD_VAR 0 1
62499: PUSH
62500: LD_VAR 0 2
62504: PUSH
62505: LD_INT 3
62507: PLUS
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: PUSH
62517: LD_VAR 0 1
62521: PUSH
62522: LD_INT 4
62524: PLUS
62525: PUSH
62526: LD_VAR 0 2
62530: PUSH
62531: LD_INT 4
62533: PLUS
62534: PUSH
62535: LD_INT 5
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: LIST
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: ST_TO_ADDR
// end ; 2 :
62550: GO 63109
62552: LD_INT 2
62554: DOUBLE
62555: EQUAL
62556: IFTRUE 62560
62558: GO 62689
62560: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62561: LD_ADDR_VAR 0 5
62565: PUSH
62566: LD_VAR 0 1
62570: PUSH
62571: LD_VAR 0 2
62575: PUSH
62576: LD_INT 3
62578: MINUS
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: LIST
62587: PUSH
62588: LD_VAR 0 1
62592: PUSH
62593: LD_INT 4
62595: PLUS
62596: PUSH
62597: LD_VAR 0 2
62601: PUSH
62602: LD_INT 4
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: PUSH
62610: LD_VAR 0 1
62614: PUSH
62615: LD_VAR 0 2
62619: PUSH
62620: LD_INT 4
62622: PLUS
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: PUSH
62632: LD_VAR 0 1
62636: PUSH
62637: LD_INT 3
62639: MINUS
62640: PUSH
62641: LD_VAR 0 2
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: PUSH
62654: LD_VAR 0 1
62658: PUSH
62659: LD_INT 4
62661: MINUS
62662: PUSH
62663: LD_VAR 0 2
62667: PUSH
62668: LD_INT 4
62670: MINUS
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: LIST
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: ST_TO_ADDR
// end ; 3 :
62687: GO 63109
62689: LD_INT 3
62691: DOUBLE
62692: EQUAL
62693: IFTRUE 62697
62695: GO 62830
62697: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62698: LD_ADDR_VAR 0 5
62702: PUSH
62703: LD_VAR 0 1
62707: PUSH
62708: LD_INT 3
62710: PLUS
62711: PUSH
62712: LD_VAR 0 2
62716: PUSH
62717: LD_INT 4
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: LIST
62724: PUSH
62725: LD_VAR 0 1
62729: PUSH
62730: LD_INT 4
62732: PLUS
62733: PUSH
62734: LD_VAR 0 2
62738: PUSH
62739: LD_INT 4
62741: PLUS
62742: PUSH
62743: LD_INT 5
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: LIST
62750: PUSH
62751: LD_VAR 0 1
62755: PUSH
62756: LD_INT 4
62758: MINUS
62759: PUSH
62760: LD_VAR 0 2
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: LIST
62772: PUSH
62773: LD_VAR 0 1
62777: PUSH
62778: LD_VAR 0 2
62782: PUSH
62783: LD_INT 4
62785: MINUS
62786: PUSH
62787: LD_INT 3
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: LIST
62794: PUSH
62795: LD_VAR 0 1
62799: PUSH
62800: LD_INT 3
62802: MINUS
62803: PUSH
62804: LD_VAR 0 2
62808: PUSH
62809: LD_INT 3
62811: MINUS
62812: PUSH
62813: LD_INT 2
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: LIST
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: ST_TO_ADDR
// end ; 4 :
62828: GO 63109
62830: LD_INT 4
62832: DOUBLE
62833: EQUAL
62834: IFTRUE 62838
62836: GO 62971
62838: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62839: LD_ADDR_VAR 0 5
62843: PUSH
62844: LD_VAR 0 1
62848: PUSH
62849: LD_VAR 0 2
62853: PUSH
62854: LD_INT 4
62856: PLUS
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: PUSH
62866: LD_VAR 0 1
62870: PUSH
62871: LD_INT 3
62873: PLUS
62874: PUSH
62875: LD_VAR 0 2
62879: PUSH
62880: LD_INT 3
62882: PLUS
62883: PUSH
62884: LD_INT 5
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: LIST
62891: PUSH
62892: LD_VAR 0 1
62896: PUSH
62897: LD_INT 4
62899: PLUS
62900: PUSH
62901: LD_VAR 0 2
62905: PUSH
62906: LD_INT 4
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: LIST
62913: PUSH
62914: LD_VAR 0 1
62918: PUSH
62919: LD_VAR 0 2
62923: PUSH
62924: LD_INT 3
62926: MINUS
62927: PUSH
62928: LD_INT 3
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: PUSH
62936: LD_VAR 0 1
62940: PUSH
62941: LD_INT 4
62943: MINUS
62944: PUSH
62945: LD_VAR 0 2
62949: PUSH
62950: LD_INT 4
62952: MINUS
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: ST_TO_ADDR
// end ; 5 :
62969: GO 63109
62971: LD_INT 5
62973: DOUBLE
62974: EQUAL
62975: IFTRUE 62979
62977: GO 63108
62979: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62980: LD_ADDR_VAR 0 5
62984: PUSH
62985: LD_VAR 0 1
62989: PUSH
62990: LD_INT 4
62992: MINUS
62993: PUSH
62994: LD_VAR 0 2
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: LIST
63006: PUSH
63007: LD_VAR 0 1
63011: PUSH
63012: LD_VAR 0 2
63016: PUSH
63017: LD_INT 4
63019: MINUS
63020: PUSH
63021: LD_INT 3
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: PUSH
63029: LD_VAR 0 1
63033: PUSH
63034: LD_INT 4
63036: PLUS
63037: PUSH
63038: LD_VAR 0 2
63042: PUSH
63043: LD_INT 4
63045: PLUS
63046: PUSH
63047: LD_INT 5
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: LIST
63054: PUSH
63055: LD_VAR 0 1
63059: PUSH
63060: LD_INT 3
63062: PLUS
63063: PUSH
63064: LD_VAR 0 2
63068: PUSH
63069: LD_INT 4
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: LIST
63076: PUSH
63077: LD_VAR 0 1
63081: PUSH
63082: LD_VAR 0 2
63086: PUSH
63087: LD_INT 3
63089: PLUS
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: LIST
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: ST_TO_ADDR
// end ; end ;
63106: GO 63109
63108: POP
// result := list ;
63109: LD_ADDR_VAR 0 4
63113: PUSH
63114: LD_VAR 0 5
63118: ST_TO_ADDR
// end ;
63119: LD_VAR 0 4
63123: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63124: LD_INT 0
63126: PPUSH
63127: PPUSH
63128: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63129: LD_VAR 0 1
63133: NOT
63134: PUSH
63135: LD_VAR 0 2
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: LD_INT 3
63148: PUSH
63149: LD_INT 4
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: IN
63158: NOT
63159: OR
63160: IFFALSE 63164
// exit ;
63162: GO 63256
// tmp := [ ] ;
63164: LD_ADDR_VAR 0 5
63168: PUSH
63169: EMPTY
63170: ST_TO_ADDR
// for i in units do
63171: LD_ADDR_VAR 0 4
63175: PUSH
63176: LD_VAR 0 1
63180: PUSH
63181: FOR_IN
63182: IFFALSE 63225
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63184: LD_ADDR_VAR 0 5
63188: PUSH
63189: LD_VAR 0 5
63193: PPUSH
63194: LD_VAR 0 5
63198: PUSH
63199: LD_INT 1
63201: PLUS
63202: PPUSH
63203: LD_VAR 0 4
63207: PPUSH
63208: LD_VAR 0 2
63212: PPUSH
63213: CALL_OW 259
63217: PPUSH
63218: CALL_OW 2
63222: ST_TO_ADDR
63223: GO 63181
63225: POP
63226: POP
// if not tmp then
63227: LD_VAR 0 5
63231: NOT
63232: IFFALSE 63236
// exit ;
63234: GO 63256
// result := SortListByListDesc ( units , tmp ) ;
63236: LD_ADDR_VAR 0 3
63240: PUSH
63241: LD_VAR 0 1
63245: PPUSH
63246: LD_VAR 0 5
63250: PPUSH
63251: CALL_OW 77
63255: ST_TO_ADDR
// end ;
63256: LD_VAR 0 3
63260: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63261: LD_INT 0
63263: PPUSH
63264: PPUSH
63265: PPUSH
// result := false ;
63266: LD_ADDR_VAR 0 3
63270: PUSH
63271: LD_INT 0
63273: ST_TO_ADDR
// x := GetX ( building ) ;
63274: LD_ADDR_VAR 0 4
63278: PUSH
63279: LD_VAR 0 2
63283: PPUSH
63284: CALL_OW 250
63288: ST_TO_ADDR
// y := GetY ( building ) ;
63289: LD_ADDR_VAR 0 5
63293: PUSH
63294: LD_VAR 0 2
63298: PPUSH
63299: CALL_OW 251
63303: ST_TO_ADDR
// if not building or not x or not y then
63304: LD_VAR 0 2
63308: NOT
63309: PUSH
63310: LD_VAR 0 4
63314: NOT
63315: OR
63316: PUSH
63317: LD_VAR 0 5
63321: NOT
63322: OR
63323: IFFALSE 63327
// exit ;
63325: GO 63419
// if GetTaskList ( unit ) then
63327: LD_VAR 0 1
63331: PPUSH
63332: CALL_OW 437
63336: IFFALSE 63419
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63338: LD_STRING e
63340: PUSH
63341: LD_VAR 0 1
63345: PPUSH
63346: CALL_OW 437
63350: PUSH
63351: LD_INT 1
63353: ARRAY
63354: PUSH
63355: LD_INT 1
63357: ARRAY
63358: EQUAL
63359: PUSH
63360: LD_VAR 0 4
63364: PUSH
63365: LD_VAR 0 1
63369: PPUSH
63370: CALL_OW 437
63374: PUSH
63375: LD_INT 1
63377: ARRAY
63378: PUSH
63379: LD_INT 2
63381: ARRAY
63382: EQUAL
63383: AND
63384: PUSH
63385: LD_VAR 0 5
63389: PUSH
63390: LD_VAR 0 1
63394: PPUSH
63395: CALL_OW 437
63399: PUSH
63400: LD_INT 1
63402: ARRAY
63403: PUSH
63404: LD_INT 3
63406: ARRAY
63407: EQUAL
63408: AND
63409: IFFALSE 63419
// result := true end ;
63411: LD_ADDR_VAR 0 3
63415: PUSH
63416: LD_INT 1
63418: ST_TO_ADDR
// end ;
63419: LD_VAR 0 3
63423: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63424: LD_INT 0
63426: PPUSH
// result := false ;
63427: LD_ADDR_VAR 0 4
63431: PUSH
63432: LD_INT 0
63434: ST_TO_ADDR
// if GetTaskList ( unit ) then
63435: LD_VAR 0 1
63439: PPUSH
63440: CALL_OW 437
63444: IFFALSE 63527
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63446: LD_STRING M
63448: PUSH
63449: LD_VAR 0 1
63453: PPUSH
63454: CALL_OW 437
63458: PUSH
63459: LD_INT 1
63461: ARRAY
63462: PUSH
63463: LD_INT 1
63465: ARRAY
63466: EQUAL
63467: PUSH
63468: LD_VAR 0 2
63472: PUSH
63473: LD_VAR 0 1
63477: PPUSH
63478: CALL_OW 437
63482: PUSH
63483: LD_INT 1
63485: ARRAY
63486: PUSH
63487: LD_INT 2
63489: ARRAY
63490: EQUAL
63491: AND
63492: PUSH
63493: LD_VAR 0 3
63497: PUSH
63498: LD_VAR 0 1
63502: PPUSH
63503: CALL_OW 437
63507: PUSH
63508: LD_INT 1
63510: ARRAY
63511: PUSH
63512: LD_INT 3
63514: ARRAY
63515: EQUAL
63516: AND
63517: IFFALSE 63527
// result := true ;
63519: LD_ADDR_VAR 0 4
63523: PUSH
63524: LD_INT 1
63526: ST_TO_ADDR
// end ; end ;
63527: LD_VAR 0 4
63531: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63532: LD_INT 0
63534: PPUSH
63535: PPUSH
63536: PPUSH
63537: PPUSH
// if not unit or not area then
63538: LD_VAR 0 1
63542: NOT
63543: PUSH
63544: LD_VAR 0 2
63548: NOT
63549: OR
63550: IFFALSE 63554
// exit ;
63552: GO 63718
// tmp := AreaToList ( area , i ) ;
63554: LD_ADDR_VAR 0 6
63558: PUSH
63559: LD_VAR 0 2
63563: PPUSH
63564: LD_VAR 0 5
63568: PPUSH
63569: CALL_OW 517
63573: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63574: LD_ADDR_VAR 0 5
63578: PUSH
63579: DOUBLE
63580: LD_INT 1
63582: DEC
63583: ST_TO_ADDR
63584: LD_VAR 0 6
63588: PUSH
63589: LD_INT 1
63591: ARRAY
63592: PUSH
63593: FOR_TO
63594: IFFALSE 63716
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63596: LD_ADDR_VAR 0 7
63600: PUSH
63601: LD_VAR 0 6
63605: PUSH
63606: LD_INT 1
63608: ARRAY
63609: PUSH
63610: LD_VAR 0 5
63614: ARRAY
63615: PUSH
63616: LD_VAR 0 6
63620: PUSH
63621: LD_INT 2
63623: ARRAY
63624: PUSH
63625: LD_VAR 0 5
63629: ARRAY
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63635: LD_VAR 0 7
63639: PUSH
63640: LD_INT 1
63642: ARRAY
63643: PPUSH
63644: LD_VAR 0 7
63648: PUSH
63649: LD_INT 2
63651: ARRAY
63652: PPUSH
63653: CALL_OW 428
63657: PUSH
63658: LD_INT 0
63660: EQUAL
63661: IFFALSE 63714
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63663: LD_VAR 0 1
63667: PPUSH
63668: LD_VAR 0 7
63672: PUSH
63673: LD_INT 1
63675: ARRAY
63676: PPUSH
63677: LD_VAR 0 7
63681: PUSH
63682: LD_INT 2
63684: ARRAY
63685: PPUSH
63686: LD_VAR 0 3
63690: PPUSH
63691: CALL_OW 48
// result := IsPlaced ( unit ) ;
63695: LD_ADDR_VAR 0 4
63699: PUSH
63700: LD_VAR 0 1
63704: PPUSH
63705: CALL_OW 305
63709: ST_TO_ADDR
// exit ;
63710: POP
63711: POP
63712: GO 63718
// end ; end ;
63714: GO 63593
63716: POP
63717: POP
// end ;
63718: LD_VAR 0 4
63722: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63723: LD_INT 0
63725: PPUSH
63726: PPUSH
63727: PPUSH
// if not side or side > 8 then
63728: LD_VAR 0 1
63732: NOT
63733: PUSH
63734: LD_VAR 0 1
63738: PUSH
63739: LD_INT 8
63741: GREATER
63742: OR
63743: IFFALSE 63747
// exit ;
63745: GO 63934
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63747: LD_ADDR_VAR 0 4
63751: PUSH
63752: LD_INT 22
63754: PUSH
63755: LD_VAR 0 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 21
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PPUSH
63778: CALL_OW 69
63782: ST_TO_ADDR
// if not tmp then
63783: LD_VAR 0 4
63787: NOT
63788: IFFALSE 63792
// exit ;
63790: GO 63934
// enable_addtolog := true ;
63792: LD_ADDR_OWVAR 81
63796: PUSH
63797: LD_INT 1
63799: ST_TO_ADDR
// AddToLog ( [ ) ;
63800: LD_STRING [
63802: PPUSH
63803: CALL_OW 561
// for i in tmp do
63807: LD_ADDR_VAR 0 3
63811: PUSH
63812: LD_VAR 0 4
63816: PUSH
63817: FOR_IN
63818: IFFALSE 63925
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63820: LD_STRING [
63822: PUSH
63823: LD_VAR 0 3
63827: PPUSH
63828: CALL_OW 266
63832: STR
63833: PUSH
63834: LD_STRING , 
63836: STR
63837: PUSH
63838: LD_VAR 0 3
63842: PPUSH
63843: CALL_OW 250
63847: STR
63848: PUSH
63849: LD_STRING , 
63851: STR
63852: PUSH
63853: LD_VAR 0 3
63857: PPUSH
63858: CALL_OW 251
63862: STR
63863: PUSH
63864: LD_STRING , 
63866: STR
63867: PUSH
63868: LD_VAR 0 3
63872: PPUSH
63873: CALL_OW 254
63877: STR
63878: PUSH
63879: LD_STRING , 
63881: STR
63882: PUSH
63883: LD_VAR 0 3
63887: PPUSH
63888: LD_INT 1
63890: PPUSH
63891: CALL_OW 268
63895: STR
63896: PUSH
63897: LD_STRING , 
63899: STR
63900: PUSH
63901: LD_VAR 0 3
63905: PPUSH
63906: LD_INT 2
63908: PPUSH
63909: CALL_OW 268
63913: STR
63914: PUSH
63915: LD_STRING ],
63917: STR
63918: PPUSH
63919: CALL_OW 561
// end ;
63923: GO 63817
63925: POP
63926: POP
// AddToLog ( ]; ) ;
63927: LD_STRING ];
63929: PPUSH
63930: CALL_OW 561
// end ;
63934: LD_VAR 0 2
63938: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63939: LD_INT 0
63941: PPUSH
63942: PPUSH
63943: PPUSH
63944: PPUSH
63945: PPUSH
// if not area or not rate or not max then
63946: LD_VAR 0 1
63950: NOT
63951: PUSH
63952: LD_VAR 0 2
63956: NOT
63957: OR
63958: PUSH
63959: LD_VAR 0 4
63963: NOT
63964: OR
63965: IFFALSE 63969
// exit ;
63967: GO 64161
// while 1 do
63969: LD_INT 1
63971: IFFALSE 64161
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63973: LD_ADDR_VAR 0 9
63977: PUSH
63978: LD_VAR 0 1
63982: PPUSH
63983: LD_INT 1
63985: PPUSH
63986: CALL_OW 287
63990: PUSH
63991: LD_INT 10
63993: MUL
63994: ST_TO_ADDR
// r := rate / 10 ;
63995: LD_ADDR_VAR 0 7
63999: PUSH
64000: LD_VAR 0 2
64004: PUSH
64005: LD_INT 10
64007: DIVREAL
64008: ST_TO_ADDR
// time := 1 1$00 ;
64009: LD_ADDR_VAR 0 8
64013: PUSH
64014: LD_INT 2100
64016: ST_TO_ADDR
// if amount < min then
64017: LD_VAR 0 9
64021: PUSH
64022: LD_VAR 0 3
64026: LESS
64027: IFFALSE 64045
// r := r * 2 else
64029: LD_ADDR_VAR 0 7
64033: PUSH
64034: LD_VAR 0 7
64038: PUSH
64039: LD_INT 2
64041: MUL
64042: ST_TO_ADDR
64043: GO 64071
// if amount > max then
64045: LD_VAR 0 9
64049: PUSH
64050: LD_VAR 0 4
64054: GREATER
64055: IFFALSE 64071
// r := r / 2 ;
64057: LD_ADDR_VAR 0 7
64061: PUSH
64062: LD_VAR 0 7
64066: PUSH
64067: LD_INT 2
64069: DIVREAL
64070: ST_TO_ADDR
// time := time / r ;
64071: LD_ADDR_VAR 0 8
64075: PUSH
64076: LD_VAR 0 8
64080: PUSH
64081: LD_VAR 0 7
64085: DIVREAL
64086: ST_TO_ADDR
// if time < 0 then
64087: LD_VAR 0 8
64091: PUSH
64092: LD_INT 0
64094: LESS
64095: IFFALSE 64112
// time := time * - 1 ;
64097: LD_ADDR_VAR 0 8
64101: PUSH
64102: LD_VAR 0 8
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: MUL
64111: ST_TO_ADDR
// wait ( time ) ;
64112: LD_VAR 0 8
64116: PPUSH
64117: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64121: LD_INT 35
64123: PPUSH
64124: LD_INT 875
64126: PPUSH
64127: CALL_OW 12
64131: PPUSH
64132: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64136: LD_INT 1
64138: PPUSH
64139: LD_INT 5
64141: PPUSH
64142: CALL_OW 12
64146: PPUSH
64147: LD_VAR 0 1
64151: PPUSH
64152: LD_INT 1
64154: PPUSH
64155: CALL_OW 55
// end ;
64159: GO 63969
// end ;
64161: LD_VAR 0 5
64165: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64166: LD_INT 0
64168: PPUSH
64169: PPUSH
64170: PPUSH
64171: PPUSH
64172: PPUSH
64173: PPUSH
64174: PPUSH
64175: PPUSH
// if not turrets or not factories then
64176: LD_VAR 0 1
64180: NOT
64181: PUSH
64182: LD_VAR 0 2
64186: NOT
64187: OR
64188: IFFALSE 64192
// exit ;
64190: GO 64499
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64192: LD_ADDR_VAR 0 10
64196: PUSH
64197: LD_INT 5
64199: PUSH
64200: LD_INT 6
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: LD_INT 4
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: LD_INT 5
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 24
64234: PUSH
64235: LD_INT 25
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 23
64244: PUSH
64245: LD_INT 27
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 42
64258: PUSH
64259: LD_INT 43
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 44
64268: PUSH
64269: LD_INT 46
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 45
64278: PUSH
64279: LD_INT 47
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: LIST
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: LIST
64295: ST_TO_ADDR
// result := [ ] ;
64296: LD_ADDR_VAR 0 3
64300: PUSH
64301: EMPTY
64302: ST_TO_ADDR
// for i in turrets do
64303: LD_ADDR_VAR 0 4
64307: PUSH
64308: LD_VAR 0 1
64312: PUSH
64313: FOR_IN
64314: IFFALSE 64497
// begin nat := GetNation ( i ) ;
64316: LD_ADDR_VAR 0 7
64320: PUSH
64321: LD_VAR 0 4
64325: PPUSH
64326: CALL_OW 248
64330: ST_TO_ADDR
// weapon := 0 ;
64331: LD_ADDR_VAR 0 8
64335: PUSH
64336: LD_INT 0
64338: ST_TO_ADDR
// if not nat then
64339: LD_VAR 0 7
64343: NOT
64344: IFFALSE 64348
// continue ;
64346: GO 64313
// for j in list [ nat ] do
64348: LD_ADDR_VAR 0 5
64352: PUSH
64353: LD_VAR 0 10
64357: PUSH
64358: LD_VAR 0 7
64362: ARRAY
64363: PUSH
64364: FOR_IN
64365: IFFALSE 64406
// if GetBWeapon ( i ) = j [ 1 ] then
64367: LD_VAR 0 4
64371: PPUSH
64372: CALL_OW 269
64376: PUSH
64377: LD_VAR 0 5
64381: PUSH
64382: LD_INT 1
64384: ARRAY
64385: EQUAL
64386: IFFALSE 64404
// begin weapon := j [ 2 ] ;
64388: LD_ADDR_VAR 0 8
64392: PUSH
64393: LD_VAR 0 5
64397: PUSH
64398: LD_INT 2
64400: ARRAY
64401: ST_TO_ADDR
// break ;
64402: GO 64406
// end ;
64404: GO 64364
64406: POP
64407: POP
// if not weapon then
64408: LD_VAR 0 8
64412: NOT
64413: IFFALSE 64417
// continue ;
64415: GO 64313
// for k in factories do
64417: LD_ADDR_VAR 0 6
64421: PUSH
64422: LD_VAR 0 2
64426: PUSH
64427: FOR_IN
64428: IFFALSE 64493
// begin weapons := AvailableWeaponList ( k ) ;
64430: LD_ADDR_VAR 0 9
64434: PUSH
64435: LD_VAR 0 6
64439: PPUSH
64440: CALL_OW 478
64444: ST_TO_ADDR
// if not weapons then
64445: LD_VAR 0 9
64449: NOT
64450: IFFALSE 64454
// continue ;
64452: GO 64427
// if weapon in weapons then
64454: LD_VAR 0 8
64458: PUSH
64459: LD_VAR 0 9
64463: IN
64464: IFFALSE 64491
// begin result := [ i , weapon ] ;
64466: LD_ADDR_VAR 0 3
64470: PUSH
64471: LD_VAR 0 4
64475: PUSH
64476: LD_VAR 0 8
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: ST_TO_ADDR
// exit ;
64485: POP
64486: POP
64487: POP
64488: POP
64489: GO 64499
// end ; end ;
64491: GO 64427
64493: POP
64494: POP
// end ;
64495: GO 64313
64497: POP
64498: POP
// end ;
64499: LD_VAR 0 3
64503: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64504: LD_INT 0
64506: PPUSH
// if not side or side > 8 then
64507: LD_VAR 0 3
64511: NOT
64512: PUSH
64513: LD_VAR 0 3
64517: PUSH
64518: LD_INT 8
64520: GREATER
64521: OR
64522: IFFALSE 64526
// exit ;
64524: GO 64585
// if not range then
64526: LD_VAR 0 4
64530: NOT
64531: IFFALSE 64542
// range := - 12 ;
64533: LD_ADDR_VAR 0 4
64537: PUSH
64538: LD_INT 12
64540: NEG
64541: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64542: LD_VAR 0 1
64546: PPUSH
64547: LD_VAR 0 2
64551: PPUSH
64552: LD_VAR 0 3
64556: PPUSH
64557: LD_VAR 0 4
64561: PPUSH
64562: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64566: LD_VAR 0 1
64570: PPUSH
64571: LD_VAR 0 2
64575: PPUSH
64576: LD_VAR 0 3
64580: PPUSH
64581: CALL_OW 331
// end ;
64585: LD_VAR 0 5
64589: RET
// export function Video ( mode ) ; begin
64590: LD_INT 0
64592: PPUSH
// ingame_video = mode ;
64593: LD_ADDR_OWVAR 52
64597: PUSH
64598: LD_VAR 0 1
64602: ST_TO_ADDR
// interface_hidden = mode ;
64603: LD_ADDR_OWVAR 54
64607: PUSH
64608: LD_VAR 0 1
64612: ST_TO_ADDR
// end ;
64613: LD_VAR 0 2
64617: RET
// export function Join ( array , element ) ; begin
64618: LD_INT 0
64620: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64621: LD_ADDR_VAR 0 3
64625: PUSH
64626: LD_VAR 0 1
64630: PPUSH
64631: LD_VAR 0 1
64635: PUSH
64636: LD_INT 1
64638: PLUS
64639: PPUSH
64640: LD_VAR 0 2
64644: PPUSH
64645: CALL_OW 1
64649: ST_TO_ADDR
// end ;
64650: LD_VAR 0 3
64654: RET
// export function JoinUnion ( array , element ) ; begin
64655: LD_INT 0
64657: PPUSH
// result := array union element ;
64658: LD_ADDR_VAR 0 3
64662: PUSH
64663: LD_VAR 0 1
64667: PUSH
64668: LD_VAR 0 2
64672: UNION
64673: ST_TO_ADDR
// end ;
64674: LD_VAR 0 3
64678: RET
// export function GetBehemoths ( side ) ; begin
64679: LD_INT 0
64681: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64682: LD_ADDR_VAR 0 2
64686: PUSH
64687: LD_INT 22
64689: PUSH
64690: LD_VAR 0 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 31
64701: PUSH
64702: LD_INT 25
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PPUSH
64713: CALL_OW 69
64717: ST_TO_ADDR
// end ;
64718: LD_VAR 0 2
64722: RET
// export function Shuffle ( array ) ; var i , index ; begin
64723: LD_INT 0
64725: PPUSH
64726: PPUSH
64727: PPUSH
// result := [ ] ;
64728: LD_ADDR_VAR 0 2
64732: PUSH
64733: EMPTY
64734: ST_TO_ADDR
// if not array then
64735: LD_VAR 0 1
64739: NOT
64740: IFFALSE 64744
// exit ;
64742: GO 64843
// Randomize ;
64744: CALL_OW 10
// for i = array downto 1 do
64748: LD_ADDR_VAR 0 3
64752: PUSH
64753: DOUBLE
64754: LD_VAR 0 1
64758: INC
64759: ST_TO_ADDR
64760: LD_INT 1
64762: PUSH
64763: FOR_DOWNTO
64764: IFFALSE 64841
// begin index := rand ( 1 , array ) ;
64766: LD_ADDR_VAR 0 4
64770: PUSH
64771: LD_INT 1
64773: PPUSH
64774: LD_VAR 0 1
64778: PPUSH
64779: CALL_OW 12
64783: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64784: LD_ADDR_VAR 0 2
64788: PUSH
64789: LD_VAR 0 2
64793: PPUSH
64794: LD_VAR 0 2
64798: PUSH
64799: LD_INT 1
64801: PLUS
64802: PPUSH
64803: LD_VAR 0 1
64807: PUSH
64808: LD_VAR 0 4
64812: ARRAY
64813: PPUSH
64814: CALL_OW 2
64818: ST_TO_ADDR
// array := Delete ( array , index ) ;
64819: LD_ADDR_VAR 0 1
64823: PUSH
64824: LD_VAR 0 1
64828: PPUSH
64829: LD_VAR 0 4
64833: PPUSH
64834: CALL_OW 3
64838: ST_TO_ADDR
// end ;
64839: GO 64763
64841: POP
64842: POP
// end ;
64843: LD_VAR 0 2
64847: RET
// export function GetBaseMaterials ( base ) ; begin
64848: LD_INT 0
64850: PPUSH
// result := [ 0 , 0 , 0 ] ;
64851: LD_ADDR_VAR 0 2
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: ST_TO_ADDR
// if not base then
64870: LD_VAR 0 1
64874: NOT
64875: IFFALSE 64879
// exit ;
64877: GO 64928
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64879: LD_ADDR_VAR 0 2
64883: PUSH
64884: LD_VAR 0 1
64888: PPUSH
64889: LD_INT 1
64891: PPUSH
64892: CALL_OW 275
64896: PUSH
64897: LD_VAR 0 1
64901: PPUSH
64902: LD_INT 2
64904: PPUSH
64905: CALL_OW 275
64909: PUSH
64910: LD_VAR 0 1
64914: PPUSH
64915: LD_INT 3
64917: PPUSH
64918: CALL_OW 275
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: LIST
64927: ST_TO_ADDR
// end ;
64928: LD_VAR 0 2
64932: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64933: LD_INT 0
64935: PPUSH
64936: PPUSH
// result := array ;
64937: LD_ADDR_VAR 0 3
64941: PUSH
64942: LD_VAR 0 1
64946: ST_TO_ADDR
// if size > 0 then
64947: LD_VAR 0 2
64951: PUSH
64952: LD_INT 0
64954: GREATER
64955: IFFALSE 65001
// for i := array downto size do
64957: LD_ADDR_VAR 0 4
64961: PUSH
64962: DOUBLE
64963: LD_VAR 0 1
64967: INC
64968: ST_TO_ADDR
64969: LD_VAR 0 2
64973: PUSH
64974: FOR_DOWNTO
64975: IFFALSE 64999
// result := Delete ( result , result ) ;
64977: LD_ADDR_VAR 0 3
64981: PUSH
64982: LD_VAR 0 3
64986: PPUSH
64987: LD_VAR 0 3
64991: PPUSH
64992: CALL_OW 3
64996: ST_TO_ADDR
64997: GO 64974
64999: POP
65000: POP
// end ;
65001: LD_VAR 0 3
65005: RET
// export function ComExit ( unit ) ; var tmp ; begin
65006: LD_INT 0
65008: PPUSH
65009: PPUSH
// if not IsInUnit ( unit ) then
65010: LD_VAR 0 1
65014: PPUSH
65015: CALL_OW 310
65019: NOT
65020: IFFALSE 65024
// exit ;
65022: GO 65084
// tmp := IsInUnit ( unit ) ;
65024: LD_ADDR_VAR 0 3
65028: PUSH
65029: LD_VAR 0 1
65033: PPUSH
65034: CALL_OW 310
65038: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65039: LD_VAR 0 3
65043: PPUSH
65044: CALL_OW 247
65048: PUSH
65049: LD_INT 2
65051: EQUAL
65052: IFFALSE 65065
// ComExitVehicle ( unit ) else
65054: LD_VAR 0 1
65058: PPUSH
65059: CALL_OW 121
65063: GO 65074
// ComExitBuilding ( unit ) ;
65065: LD_VAR 0 1
65069: PPUSH
65070: CALL_OW 122
// result := tmp ;
65074: LD_ADDR_VAR 0 2
65078: PUSH
65079: LD_VAR 0 3
65083: ST_TO_ADDR
// end ;
65084: LD_VAR 0 2
65088: RET
// export function ComExitAll ( units ) ; var i ; begin
65089: LD_INT 0
65091: PPUSH
65092: PPUSH
// if not units then
65093: LD_VAR 0 1
65097: NOT
65098: IFFALSE 65102
// exit ;
65100: GO 65128
// for i in units do
65102: LD_ADDR_VAR 0 3
65106: PUSH
65107: LD_VAR 0 1
65111: PUSH
65112: FOR_IN
65113: IFFALSE 65126
// ComExit ( i ) ;
65115: LD_VAR 0 3
65119: PPUSH
65120: CALL 65006 0 1
65124: GO 65112
65126: POP
65127: POP
// end ;
65128: LD_VAR 0 2
65132: RET
// export function ResetHc ; begin
65133: LD_INT 0
65135: PPUSH
// InitHc ;
65136: CALL_OW 19
// hc_importance := 0 ;
65140: LD_ADDR_OWVAR 32
65144: PUSH
65145: LD_INT 0
65147: ST_TO_ADDR
// end ;
65148: LD_VAR 0 1
65152: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65153: LD_INT 0
65155: PPUSH
65156: PPUSH
65157: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65158: LD_ADDR_VAR 0 6
65162: PUSH
65163: LD_VAR 0 1
65167: PUSH
65168: LD_VAR 0 3
65172: PLUS
65173: PUSH
65174: LD_INT 2
65176: DIV
65177: ST_TO_ADDR
// if _x < 0 then
65178: LD_VAR 0 6
65182: PUSH
65183: LD_INT 0
65185: LESS
65186: IFFALSE 65203
// _x := _x * - 1 ;
65188: LD_ADDR_VAR 0 6
65192: PUSH
65193: LD_VAR 0 6
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: MUL
65202: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65203: LD_ADDR_VAR 0 7
65207: PUSH
65208: LD_VAR 0 2
65212: PUSH
65213: LD_VAR 0 4
65217: PLUS
65218: PUSH
65219: LD_INT 2
65221: DIV
65222: ST_TO_ADDR
// if _y < 0 then
65223: LD_VAR 0 7
65227: PUSH
65228: LD_INT 0
65230: LESS
65231: IFFALSE 65248
// _y := _y * - 1 ;
65233: LD_ADDR_VAR 0 7
65237: PUSH
65238: LD_VAR 0 7
65242: PUSH
65243: LD_INT 1
65245: NEG
65246: MUL
65247: ST_TO_ADDR
// result := [ _x , _y ] ;
65248: LD_ADDR_VAR 0 5
65252: PUSH
65253: LD_VAR 0 6
65257: PUSH
65258: LD_VAR 0 7
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: ST_TO_ADDR
// end ;
65267: LD_VAR 0 5
65271: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65272: LD_INT 0
65274: PPUSH
65275: PPUSH
65276: PPUSH
65277: PPUSH
// task := GetTaskList ( unit ) ;
65278: LD_ADDR_VAR 0 7
65282: PUSH
65283: LD_VAR 0 1
65287: PPUSH
65288: CALL_OW 437
65292: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65293: LD_VAR 0 7
65297: NOT
65298: PUSH
65299: LD_VAR 0 1
65303: PPUSH
65304: LD_VAR 0 2
65308: PPUSH
65309: CALL_OW 308
65313: NOT
65314: AND
65315: IFFALSE 65319
// exit ;
65317: GO 65437
// if IsInArea ( unit , area ) then
65319: LD_VAR 0 1
65323: PPUSH
65324: LD_VAR 0 2
65328: PPUSH
65329: CALL_OW 308
65333: IFFALSE 65351
// begin ComMoveToArea ( unit , goAway ) ;
65335: LD_VAR 0 1
65339: PPUSH
65340: LD_VAR 0 3
65344: PPUSH
65345: CALL_OW 113
// exit ;
65349: GO 65437
// end ; if task [ 1 ] [ 1 ] <> M then
65351: LD_VAR 0 7
65355: PUSH
65356: LD_INT 1
65358: ARRAY
65359: PUSH
65360: LD_INT 1
65362: ARRAY
65363: PUSH
65364: LD_STRING M
65366: NONEQUAL
65367: IFFALSE 65371
// exit ;
65369: GO 65437
// x := task [ 1 ] [ 2 ] ;
65371: LD_ADDR_VAR 0 5
65375: PUSH
65376: LD_VAR 0 7
65380: PUSH
65381: LD_INT 1
65383: ARRAY
65384: PUSH
65385: LD_INT 2
65387: ARRAY
65388: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65389: LD_ADDR_VAR 0 6
65393: PUSH
65394: LD_VAR 0 7
65398: PUSH
65399: LD_INT 1
65401: ARRAY
65402: PUSH
65403: LD_INT 3
65405: ARRAY
65406: ST_TO_ADDR
// if InArea ( x , y , area ) then
65407: LD_VAR 0 5
65411: PPUSH
65412: LD_VAR 0 6
65416: PPUSH
65417: LD_VAR 0 2
65421: PPUSH
65422: CALL_OW 309
65426: IFFALSE 65437
// ComStop ( unit ) ;
65428: LD_VAR 0 1
65432: PPUSH
65433: CALL_OW 141
// end ;
65437: LD_VAR 0 4
65441: RET
// export function Abs ( value ) ; begin
65442: LD_INT 0
65444: PPUSH
// result := value ;
65445: LD_ADDR_VAR 0 2
65449: PUSH
65450: LD_VAR 0 1
65454: ST_TO_ADDR
// if value < 0 then
65455: LD_VAR 0 1
65459: PUSH
65460: LD_INT 0
65462: LESS
65463: IFFALSE 65480
// result := value * - 1 ;
65465: LD_ADDR_VAR 0 2
65469: PUSH
65470: LD_VAR 0 1
65474: PUSH
65475: LD_INT 1
65477: NEG
65478: MUL
65479: ST_TO_ADDR
// end ;
65480: LD_VAR 0 2
65484: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65485: LD_INT 0
65487: PPUSH
65488: PPUSH
65489: PPUSH
65490: PPUSH
65491: PPUSH
65492: PPUSH
65493: PPUSH
65494: PPUSH
// if not unit or not building then
65495: LD_VAR 0 1
65499: NOT
65500: PUSH
65501: LD_VAR 0 2
65505: NOT
65506: OR
65507: IFFALSE 65511
// exit ;
65509: GO 65737
// x := GetX ( building ) ;
65511: LD_ADDR_VAR 0 4
65515: PUSH
65516: LD_VAR 0 2
65520: PPUSH
65521: CALL_OW 250
65525: ST_TO_ADDR
// y := GetY ( building ) ;
65526: LD_ADDR_VAR 0 6
65530: PUSH
65531: LD_VAR 0 2
65535: PPUSH
65536: CALL_OW 251
65540: ST_TO_ADDR
// d := GetDir ( building ) ;
65541: LD_ADDR_VAR 0 8
65545: PUSH
65546: LD_VAR 0 2
65550: PPUSH
65551: CALL_OW 254
65555: ST_TO_ADDR
// r := 4 ;
65556: LD_ADDR_VAR 0 9
65560: PUSH
65561: LD_INT 4
65563: ST_TO_ADDR
// for i := 1 to 5 do
65564: LD_ADDR_VAR 0 10
65568: PUSH
65569: DOUBLE
65570: LD_INT 1
65572: DEC
65573: ST_TO_ADDR
65574: LD_INT 5
65576: PUSH
65577: FOR_TO
65578: IFFALSE 65735
// begin _x := ShiftX ( x , d , r + i ) ;
65580: LD_ADDR_VAR 0 5
65584: PUSH
65585: LD_VAR 0 4
65589: PPUSH
65590: LD_VAR 0 8
65594: PPUSH
65595: LD_VAR 0 9
65599: PUSH
65600: LD_VAR 0 10
65604: PLUS
65605: PPUSH
65606: CALL_OW 272
65610: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65611: LD_ADDR_VAR 0 7
65615: PUSH
65616: LD_VAR 0 6
65620: PPUSH
65621: LD_VAR 0 8
65625: PPUSH
65626: LD_VAR 0 9
65630: PUSH
65631: LD_VAR 0 10
65635: PLUS
65636: PPUSH
65637: CALL_OW 273
65641: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65642: LD_VAR 0 5
65646: PPUSH
65647: LD_VAR 0 7
65651: PPUSH
65652: CALL_OW 488
65656: PUSH
65657: LD_VAR 0 5
65661: PPUSH
65662: LD_VAR 0 7
65666: PPUSH
65667: CALL_OW 428
65671: PPUSH
65672: CALL_OW 247
65676: PUSH
65677: LD_INT 3
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: IN
65687: NOT
65688: AND
65689: IFFALSE 65733
// begin ComMoveXY ( unit , _x , _y ) ;
65691: LD_VAR 0 1
65695: PPUSH
65696: LD_VAR 0 5
65700: PPUSH
65701: LD_VAR 0 7
65705: PPUSH
65706: CALL_OW 111
// result := [ _x , _y ] ;
65710: LD_ADDR_VAR 0 3
65714: PUSH
65715: LD_VAR 0 5
65719: PUSH
65720: LD_VAR 0 7
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: ST_TO_ADDR
// exit ;
65729: POP
65730: POP
65731: GO 65737
// end ; end ;
65733: GO 65577
65735: POP
65736: POP
// end ;
65737: LD_VAR 0 3
65741: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65742: LD_INT 0
65744: PPUSH
65745: PPUSH
65746: PPUSH
// result := 0 ;
65747: LD_ADDR_VAR 0 3
65751: PUSH
65752: LD_INT 0
65754: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65755: LD_VAR 0 1
65759: PUSH
65760: LD_INT 0
65762: LESS
65763: PUSH
65764: LD_VAR 0 1
65768: PUSH
65769: LD_INT 8
65771: GREATER
65772: OR
65773: PUSH
65774: LD_VAR 0 2
65778: PUSH
65779: LD_INT 0
65781: LESS
65782: OR
65783: PUSH
65784: LD_VAR 0 2
65788: PUSH
65789: LD_INT 8
65791: GREATER
65792: OR
65793: IFFALSE 65797
// exit ;
65795: GO 65872
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65797: LD_ADDR_VAR 0 4
65801: PUSH
65802: LD_INT 22
65804: PUSH
65805: LD_VAR 0 2
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PPUSH
65814: CALL_OW 69
65818: PUSH
65819: FOR_IN
65820: IFFALSE 65870
// begin un := UnitShoot ( i ) ;
65822: LD_ADDR_VAR 0 5
65826: PUSH
65827: LD_VAR 0 4
65831: PPUSH
65832: CALL_OW 504
65836: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65837: LD_VAR 0 5
65841: PPUSH
65842: CALL_OW 255
65846: PUSH
65847: LD_VAR 0 1
65851: EQUAL
65852: IFFALSE 65868
// begin result := un ;
65854: LD_ADDR_VAR 0 3
65858: PUSH
65859: LD_VAR 0 5
65863: ST_TO_ADDR
// exit ;
65864: POP
65865: POP
65866: GO 65872
// end ; end ;
65868: GO 65819
65870: POP
65871: POP
// end ;
65872: LD_VAR 0 3
65876: RET
// export function GetCargoBay ( units ) ; begin
65877: LD_INT 0
65879: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65880: LD_ADDR_VAR 0 2
65884: PUSH
65885: LD_VAR 0 1
65889: PPUSH
65890: LD_INT 2
65892: PUSH
65893: LD_INT 34
65895: PUSH
65896: LD_INT 12
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 34
65905: PUSH
65906: LD_INT 51
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 34
65915: PUSH
65916: LD_INT 32
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 34
65925: PUSH
65926: LD_EXP 15
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: PPUSH
65942: CALL_OW 72
65946: ST_TO_ADDR
// end ;
65947: LD_VAR 0 2
65951: RET
