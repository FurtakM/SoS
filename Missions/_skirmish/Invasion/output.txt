// starting begin InitSettings ;
   0: CALL 2932 0 0
// InitGame ;
   4: CALL 2970 0 0
// InitDisplay ;
   8: CALL 9518 0 0
// end ; end_of_file
  12: END
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// if pos < 1 then
  19: LD_VAR 0 2
  23: PUSH
  24: LD_INT 1
  26: LESS
  27: IFFALSE 31
// exit ;
  29: GO 334
// if pos = 1 then
  31: LD_VAR 0 2
  35: PUSH
  36: LD_INT 1
  38: EQUAL
  39: IFFALSE 72
// result := Replace ( arr , pos [ 1 ] , value ) else
  41: LD_ADDR_VAR 0 4
  45: PUSH
  46: LD_VAR 0 1
  50: PPUSH
  51: LD_VAR 0 2
  55: PUSH
  56: LD_INT 1
  58: ARRAY
  59: PPUSH
  60: LD_VAR 0 3
  64: PPUSH
  65: CALL_OW 1
  69: ST_TO_ADDR
  70: GO 334
// begin tmp := arr ;
  72: LD_ADDR_VAR 0 6
  76: PUSH
  77: LD_VAR 0 1
  81: ST_TO_ADDR
// s_arr := [ tmp ] ;
  82: LD_ADDR_VAR 0 7
  86: PUSH
  87: LD_VAR 0 6
  91: PUSH
  92: EMPTY
  93: LIST
  94: ST_TO_ADDR
// for i = 1 to pos - 1 do
  95: LD_ADDR_VAR 0 5
  99: PUSH
 100: DOUBLE
 101: LD_INT 1
 103: DEC
 104: ST_TO_ADDR
 105: LD_VAR 0 2
 109: PUSH
 110: LD_INT 1
 112: MINUS
 113: PUSH
 114: FOR_TO
 115: IFFALSE 160
// begin tmp := tmp [ pos [ i ] ] ;
 117: LD_ADDR_VAR 0 6
 121: PUSH
 122: LD_VAR 0 6
 126: PUSH
 127: LD_VAR 0 2
 131: PUSH
 132: LD_VAR 0 5
 136: ARRAY
 137: ARRAY
 138: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
 139: LD_ADDR_VAR 0 7
 143: PUSH
 144: LD_VAR 0 7
 148: PUSH
 149: LD_VAR 0 6
 153: PUSH
 154: EMPTY
 155: LIST
 156: ADD
 157: ST_TO_ADDR
// end ;
 158: GO 114
 160: POP
 161: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
 162: LD_ADDR_VAR 0 6
 166: PUSH
 167: LD_VAR 0 6
 171: PPUSH
 172: LD_VAR 0 2
 176: PUSH
 177: LD_VAR 0 2
 181: ARRAY
 182: PPUSH
 183: LD_VAR 0 3
 187: PPUSH
 188: CALL_OW 1
 192: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
 193: LD_ADDR_VAR 0 7
 197: PUSH
 198: LD_VAR 0 7
 202: PPUSH
 203: LD_VAR 0 7
 207: PPUSH
 208: LD_VAR 0 6
 212: PPUSH
 213: CALL_OW 1
 217: ST_TO_ADDR
// for i = s_arr downto 2 do
 218: LD_ADDR_VAR 0 5
 222: PUSH
 223: DOUBLE
 224: LD_VAR 0 7
 228: INC
 229: ST_TO_ADDR
 230: LD_INT 2
 232: PUSH
 233: FOR_DOWNTO
 234: IFFALSE 318
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
 236: LD_ADDR_VAR 0 6
 240: PUSH
 241: LD_VAR 0 7
 245: PUSH
 246: LD_VAR 0 5
 250: PUSH
 251: LD_INT 1
 253: MINUS
 254: ARRAY
 255: PPUSH
 256: LD_VAR 0 2
 260: PUSH
 261: LD_VAR 0 5
 265: PUSH
 266: LD_INT 1
 268: MINUS
 269: ARRAY
 270: PPUSH
 271: LD_VAR 0 7
 275: PUSH
 276: LD_VAR 0 5
 280: ARRAY
 281: PPUSH
 282: CALL_OW 1
 286: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
 287: LD_ADDR_VAR 0 7
 291: PUSH
 292: LD_VAR 0 7
 296: PPUSH
 297: LD_VAR 0 5
 301: PUSH
 302: LD_INT 1
 304: MINUS
 305: PPUSH
 306: LD_VAR 0 6
 310: PPUSH
 311: CALL_OW 1
 315: ST_TO_ADDR
// end ;
 316: GO 233
 318: POP
 319: POP
// result := s_arr [ 1 ] ;
 320: LD_ADDR_VAR 0 4
 324: PUSH
 325: LD_VAR 0 7
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: ST_TO_ADDR
// end ; end ;
 334: LD_VAR 0 4
 338: RET
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// team := [ ] ;
 345: LD_ADDR_VAR 0 8
 349: PUSH
 350: EMPTY
 351: ST_TO_ADDR
// playerSquad := [ ] ;
 352: LD_ADDR_EXP 12
 356: PUSH
 357: EMPTY
 358: ST_TO_ADDR
// uc_side := nation ;
 359: LD_ADDR_OWVAR 20
 363: PUSH
 364: LD_VAR 0 1
 368: ST_TO_ADDR
// uc_nation := nation ;
 369: LD_ADDR_OWVAR 21
 373: PUSH
 374: LD_VAR 0 1
 378: ST_TO_ADDR
// hc_importance := 100 ;
 379: LD_ADDR_OWVAR 32
 383: PUSH
 384: LD_INT 100
 386: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 387: LD_INT 0
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
 402: LD_ADDR_VAR 0 8
 406: PUSH
 407: LD_VAR 0 8
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 44
 419: PPUSH
 420: CALL_OW 2
 424: ST_TO_ADDR
// hc_importance := 0 ;
 425: LD_ADDR_OWVAR 32
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to num - 1 do
 433: LD_ADDR_VAR 0 7
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 1
 450: MINUS
 451: PUSH
 452: FOR_TO
 453: IFFALSE 511
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 455: LD_INT 0
 457: PPUSH
 458: LD_VAR 0 7
 462: PUSH
 463: LD_VAR 0 3
 467: PUSH
 468: LD_INT 4
 470: DIVREAL
 471: DIV
 472: PUSH
 473: LD_INT 1
 475: PLUS
 476: PPUSH
 477: LD_VAR 0 2
 481: PPUSH
 482: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 486: LD_ADDR_VAR 0 8
 490: PUSH
 491: LD_VAR 0 8
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: CALL_OW 44
 503: PPUSH
 504: CALL_OW 2
 508: ST_TO_ADDR
// end ;
 509: GO 452
 511: POP
 512: POP
// for i in team do
 513: LD_ADDR_VAR 0 7
 517: PUSH
 518: LD_VAR 0 8
 522: PUSH
 523: FOR_IN
 524: IFFALSE 623
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 526: LD_VAR 0 7
 530: PPUSH
 531: LD_VAR 0 4
 535: PPUSH
 536: LD_VAR 0 5
 540: PPUSH
 541: LD_INT 8
 543: PPUSH
 544: LD_INT 0
 546: PPUSH
 547: CALL_OW 50
// c := c + 1 ;
 551: LD_ADDR_VAR 0 9
 555: PUSH
 556: LD_VAR 0 9
 560: PUSH
 561: LD_INT 1
 563: PLUS
 564: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 565: LD_VAR 0 7
 569: PPUSH
 570: LD_STRING grave
 572: PUSH
 573: LD_VAR 0 9
 577: STR
 578: PPUSH
 579: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 583: LD_ADDR_EXP 12
 587: PUSH
 588: LD_EXP 12
 592: PPUSH
 593: LD_VAR 0 9
 597: PPUSH
 598: LD_VAR 0 7
 602: PUSH
 603: LD_STRING grave
 605: PUSH
 606: LD_VAR 0 9
 610: STR
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PPUSH
 616: CALL_OW 2
 620: ST_TO_ADDR
// end ;
 621: GO 523
 623: POP
 624: POP
// end ;
 625: LD_VAR 0 6
 629: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// for i = 1 to type_allowed do
 635: LD_ADDR_VAR 0 7
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 790
// while ( num [ i ] > 0 ) do
 653: LD_VAR 0 1
 657: PUSH
 658: LD_VAR 0 7
 662: ARRAY
 663: PUSH
 664: LD_INT 0
 666: GREATER
 667: IFFALSE 788
// begin if num [ i ] > 5 then
 669: LD_VAR 0 1
 673: PUSH
 674: LD_VAR 0 7
 678: ARRAY
 679: PUSH
 680: LD_INT 5
 682: GREATER
 683: IFFALSE 695
// n := 5 else
 685: LD_ADDR_VAR 0 8
 689: PUSH
 690: LD_INT 5
 692: ST_TO_ADDR
 693: GO 711
// n := num [ i ] ;
 695: LD_ADDR_VAR 0 8
 699: PUSH
 700: LD_VAR 0 1
 704: PUSH
 705: LD_VAR 0 7
 709: ARRAY
 710: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 711: LD_VAR 0 2
 715: PUSH
 716: LD_VAR 0 7
 720: ARRAY
 721: PPUSH
 722: LD_VAR 0 8
 726: PPUSH
 727: LD_VAR 0 3
 731: PPUSH
 732: LD_VAR 0 4
 736: PPUSH
 737: LD_VAR 0 5
 741: PPUSH
 742: LD_INT 0
 744: PPUSH
 745: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 749: LD_ADDR_VAR 0 1
 753: PUSH
 754: LD_VAR 0 1
 758: PPUSH
 759: LD_VAR 0 7
 763: PPUSH
 764: LD_VAR 0 1
 768: PUSH
 769: LD_VAR 0 7
 773: ARRAY
 774: PUSH
 775: LD_VAR 0 8
 779: MINUS
 780: PPUSH
 781: CALL_OW 1
 785: ST_TO_ADDR
// end ;
 786: GO 653
 788: GO 650
 790: POP
 791: POP
// end ;
 792: LD_VAR 0 6
 796: RET
// export function AddPoints ( p ) ; begin
 797: LD_INT 0
 799: PPUSH
// points := points + p ;
 800: LD_ADDR_EXP 2
 804: PUSH
 805: LD_EXP 2
 809: PUSH
 810: LD_VAR 0 1
 814: PLUS
 815: ST_TO_ADDR
// end ;
 816: LD_VAR 0 2
 820: RET
// export function LoadColors ; var file ; begin
 821: LD_INT 0
 823: PPUSH
 824: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 825: CALL_OW 545
 829: PUSH
 830: LD_INT 1
 832: DOUBLE
 833: GREATEREQUAL
 834: IFFALSE 842
 836: LD_INT 3
 838: DOUBLE
 839: LESSEQUAL
 840: IFTRUE 850
 842: LD_INT 12
 844: DOUBLE
 845: EQUAL
 846: IFTRUE 850
 848: GO 861
 850: POP
// file = colors.txt ; 4 .. 5 :
 851: LD_ADDR_VAR 0 2
 855: PUSH
 856: LD_STRING colors.txt
 858: ST_TO_ADDR
 859: GO 937
 861: LD_INT 4
 863: DOUBLE
 864: GREATEREQUAL
 865: IFFALSE 873
 867: LD_INT 5
 869: DOUBLE
 870: LESSEQUAL
 871: IFTRUE 875
 873: GO 886
 875: POP
// file = colors-spring.txt ; 6 .. 8 :
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: LD_STRING colors-spring.txt
 883: ST_TO_ADDR
 884: GO 937
 886: LD_INT 6
 888: DOUBLE
 889: GREATEREQUAL
 890: IFFALSE 898
 892: LD_INT 8
 894: DOUBLE
 895: LESSEQUAL
 896: IFTRUE 900
 898: GO 911
 900: POP
// file = colors-summer.txt ; 9 .. 11 :
 901: LD_ADDR_VAR 0 2
 905: PUSH
 906: LD_STRING colors-summer.txt
 908: ST_TO_ADDR
 909: GO 937
 911: LD_INT 9
 913: DOUBLE
 914: GREATEREQUAL
 915: IFFALSE 923
 917: LD_INT 11
 919: DOUBLE
 920: LESSEQUAL
 921: IFTRUE 925
 923: GO 936
 925: POP
// file = colors-autumn.txt ; end ;
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: LD_STRING colors-autumn.txt
 933: ST_TO_ADDR
 934: GO 937
 936: POP
// LoadColorsTxt ( file ) ;
 937: LD_VAR 0 2
 941: PPUSH
 942: CALL_OW 544
// end ;
 946: LD_VAR 0 1
 950: RET
// export function TestColor ; var i ; begin
 951: LD_INT 0
 953: PPUSH
 954: PPUSH
// i = 1 ;
 955: LD_ADDR_VAR 0 2
 959: PUSH
 960: LD_INT 1
 962: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 963: LD_INT 35
 965: PPUSH
 966: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 970: LD_STRING colors-spring.txt
 972: PUSH
 973: LD_STRING colors-summer.txt
 975: PUSH
 976: LD_STRING colors-autumn.txt
 978: PUSH
 979: LD_STRING colors.txt
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 4
 995: MOD
 996: PUSH
 997: LD_INT 1
 999: PLUS
1000: ARRAY
1001: PPUSH
1002: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
1006: LD_ADDR_OWVAR 47
1010: PUSH
1011: LD_STRING Wiosna
1013: PUSH
1014: LD_STRING Lato
1016: PUSH
1017: LD_STRING Jesien
1019: PUSH
1020: LD_STRING Zima
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_VAR 0 2
1033: PUSH
1034: LD_INT 4
1036: MOD
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: ST_TO_ADDR
// i := i + 1 ;
1043: LD_ADDR_VAR 0 2
1047: PUSH
1048: LD_VAR 0 2
1052: PUSH
1053: LD_INT 1
1055: PLUS
1056: ST_TO_ADDR
// end until false ;
1057: LD_INT 0
1059: IFFALSE 963
// end ;
1061: LD_VAR 0 1
1065: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
1066: LD_INT 0
1068: PPUSH
// if x1 = x2 and y1 > y2 then
1069: LD_VAR 0 1
1073: PUSH
1074: LD_VAR 0 3
1078: EQUAL
1079: PUSH
1080: LD_VAR 0 2
1084: PUSH
1085: LD_VAR 0 4
1089: GREATER
1090: AND
1091: IFFALSE 1101
// result := 0 ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_INT 0
1100: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
1101: LD_VAR 0 1
1105: PUSH
1106: LD_VAR 0 3
1110: LESS
1111: PUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_VAR 0 4
1121: EQUAL
1122: AND
1123: IFFALSE 1133
// result := 1 ;
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_INT 1
1132: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
1133: LD_VAR 0 1
1137: PUSH
1138: LD_VAR 0 3
1142: LESS
1143: PUSH
1144: LD_VAR 0 2
1148: PUSH
1149: LD_VAR 0 4
1153: LESS
1154: AND
1155: IFFALSE 1165
// result := 2 ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 2
1164: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
1165: LD_VAR 0 1
1169: PUSH
1170: LD_VAR 0 3
1174: EQUAL
1175: PUSH
1176: LD_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: LESS
1186: AND
1187: IFFALSE 1197
// result := 3 ;
1189: LD_ADDR_VAR 0 5
1193: PUSH
1194: LD_INT 3
1196: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
1197: LD_VAR 0 1
1201: PUSH
1202: LD_VAR 0 3
1206: GREATER
1207: PUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_VAR 0 4
1217: EQUAL
1218: AND
1219: IFFALSE 1229
// result := 4 ;
1221: LD_ADDR_VAR 0 5
1225: PUSH
1226: LD_INT 4
1228: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
1229: LD_VAR 0 1
1233: PUSH
1234: LD_VAR 0 3
1238: GREATER
1239: PUSH
1240: LD_VAR 0 2
1244: PUSH
1245: LD_VAR 0 4
1249: GREATER
1250: AND
1251: IFFALSE 1261
// result := 5 ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_INT 5
1260: ST_TO_ADDR
// end ;
1261: LD_VAR 0 5
1265: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
1266: LD_INT 0
1268: PPUSH
1269: PPUSH
1270: PPUSH
1271: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_INT 22
1279: PUSH
1280: LD_OWVAR 2
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 21
1291: PUSH
1292: LD_INT 1
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: ST_TO_ADDR
// for i = 1 to amount do
1308: LD_ADDR_VAR 0 3
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 1
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1405
// begin pep := rand ( 1 , team ) ;
1326: LD_ADDR_VAR 0 5
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 4
1338: PPUSH
1339: CALL_OW 12
1343: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1344: LD_VAR 0 4
1348: PUSH
1349: LD_VAR 0 5
1353: ARRAY
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 4
1360: PPUSH
1361: CALL_OW 12
1365: PPUSH
1366: LD_INT 1000
1368: PPUSH
1369: LD_INT 10000
1371: PPUSH
1372: CALL_OW 12
1376: PPUSH
1377: CALL_OW 492
// team := team diff team [ pep ] ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_VAR 0 4
1390: PUSH
1391: LD_VAR 0 4
1395: PUSH
1396: LD_VAR 0 5
1400: ARRAY
1401: DIFF
1402: ST_TO_ADDR
// end ;
1403: GO 1323
1405: POP
1406: POP
// end ;
1407: LD_VAR 0 2
1411: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
1418: PPUSH
1419: PPUSH
1420: PPUSH
1421: PPUSH
1422: PPUSH
1423: PPUSH
1424: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1425: LD_ADDR_VAR 0 5
1429: PUSH
1430: LD_INT 7
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 517
1440: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1441: LD_ADDR_VAR 0 6
1445: PUSH
1446: LD_INT 6
1448: PPUSH
1449: LD_INT 0
1451: PPUSH
1452: CALL_OW 517
1456: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1457: LD_ADDR_VAR 0 3
1461: PUSH
1462: DOUBLE
1463: LD_INT 1
1465: DEC
1466: ST_TO_ADDR
1467: LD_VAR 0 5
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PUSH
1476: FOR_TO
1477: IFFALSE 1559
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1479: LD_ADDR_VAR 0 7
1483: PUSH
1484: LD_VAR 0 7
1488: PPUSH
1489: LD_VAR 0 7
1493: PUSH
1494: LD_INT 1
1496: PLUS
1497: PPUSH
1498: LD_VAR 0 5
1502: PUSH
1503: LD_INT 1
1505: ARRAY
1506: PUSH
1507: LD_VAR 0 3
1511: ARRAY
1512: PPUSH
1513: CALL_OW 1
1517: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1518: LD_ADDR_VAR 0 7
1522: PUSH
1523: LD_VAR 0 7
1527: PPUSH
1528: LD_VAR 0 7
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 5
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PUSH
1546: LD_VAR 0 3
1550: ARRAY
1551: PPUSH
1552: CALL_OW 1
1556: ST_TO_ADDR
// end ;
1557: GO 1476
1559: POP
1560: POP
// uc_side := 4 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 4
1568: ST_TO_ADDR
// case strenght of 1 .. 10 :
1569: LD_VAR 0 1
1573: PUSH
1574: LD_INT 1
1576: DOUBLE
1577: GREATEREQUAL
1578: IFFALSE 1586
1580: LD_INT 10
1582: DOUBLE
1583: LESSEQUAL
1584: IFTRUE 1588
1586: GO 1650
1588: POP
// begin uc_nation := 0 ;
1589: LD_ADDR_OWVAR 21
1593: PUSH
1594: LD_INT 0
1596: ST_TO_ADDR
// for i = 1 to 20 do
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 20
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1646
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1613: LD_INT 0
1615: PPUSH
1616: LD_INT 15
1618: PPUSH
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 380
// result := result ^ CreateHuman ;
1628: LD_ADDR_VAR 0 2
1632: PUSH
1633: LD_VAR 0 2
1637: PUSH
1638: CALL_OW 44
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1610
1646: POP
1647: POP
// end ; 11 .. 40 :
1648: GO 1837
1650: LD_INT 11
1652: DOUBLE
1653: GREATEREQUAL
1654: IFFALSE 1662
1656: LD_INT 40
1658: DOUBLE
1659: LESSEQUAL
1660: IFTRUE 1664
1662: GO 1743
1664: POP
// begin uc_nation := 1 ;
1665: LD_ADDR_OWVAR 21
1669: PUSH
1670: LD_INT 1
1672: ST_TO_ADDR
// for i = 1 to 20 do
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 20
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1739
// begin vc_chassis := us_medium_tracked ;
1689: LD_ADDR_OWVAR 37
1693: PUSH
1694: LD_INT 3
1696: ST_TO_ADDR
// vc_engine := engine_siberite ;
1697: LD_ADDR_OWVAR 39
1701: PUSH
1702: LD_INT 3
1704: ST_TO_ADDR
// vc_control := control_computer ;
1705: LD_ADDR_OWVAR 38
1709: PUSH
1710: LD_INT 3
1712: ST_TO_ADDR
// vc_weapon := us_laser ;
1713: LD_ADDR_OWVAR 40
1717: PUSH
1718: LD_INT 9
1720: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: LD_VAR 0 2
1730: PUSH
1731: CALL_OW 45
1735: ADD
1736: ST_TO_ADDR
// end ;
1737: GO 1686
1739: POP
1740: POP
// end ; 41 .. 100 :
1741: GO 1837
1743: LD_INT 41
1745: DOUBLE
1746: GREATEREQUAL
1747: IFFALSE 1755
1749: LD_INT 100
1751: DOUBLE
1752: LESSEQUAL
1753: IFTRUE 1757
1755: GO 1836
1757: POP
// begin uc_nation := 1 ;
1758: LD_ADDR_OWVAR 21
1762: PUSH
1763: LD_INT 1
1765: ST_TO_ADDR
// for i = 1 to 20 do
1766: LD_ADDR_VAR 0 3
1770: PUSH
1771: DOUBLE
1772: LD_INT 1
1774: DEC
1775: ST_TO_ADDR
1776: LD_INT 20
1778: PUSH
1779: FOR_TO
1780: IFFALSE 1832
// begin vc_chassis := us_morphling ;
1782: LD_ADDR_OWVAR 37
1786: PUSH
1787: LD_INT 5
1789: ST_TO_ADDR
// vc_engine := engine_siberite ;
1790: LD_ADDR_OWVAR 39
1794: PUSH
1795: LD_INT 3
1797: ST_TO_ADDR
// vc_control := control_computer ;
1798: LD_ADDR_OWVAR 38
1802: PUSH
1803: LD_INT 3
1805: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1806: LD_ADDR_OWVAR 40
1810: PUSH
1811: LD_INT 10
1813: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: LD_VAR 0 2
1823: PUSH
1824: CALL_OW 45
1828: ADD
1829: ST_TO_ADDR
// end ;
1830: GO 1779
1832: POP
1833: POP
// end ; end ;
1834: GO 1837
1836: POP
// for i in result do
1837: LD_ADDR_VAR 0 3
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: FOR_IN
1848: IFFALSE 2065
// begin x := base_area [ 1 ] [ 1 ] ;
1850: LD_ADDR_VAR 0 9
1854: PUSH
1855: LD_VAR 0 6
1859: PUSH
1860: LD_INT 1
1862: ARRAY
1863: PUSH
1864: LD_INT 1
1866: ARRAY
1867: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1868: LD_ADDR_VAR 0 10
1872: PUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_INT 2
1880: ARRAY
1881: PUSH
1882: LD_INT 1
1884: ARRAY
1885: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1886: LD_ADDR_VAR 0 8
1890: PUSH
1891: LD_VAR 0 7
1895: PPUSH
1896: LD_VAR 0 9
1900: PPUSH
1901: LD_VAR 0 10
1905: PPUSH
1906: CALL_OW 439
1910: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1911: LD_VAR 0 3
1915: PPUSH
1916: LD_VAR 0 9
1920: PPUSH
1921: LD_VAR 0 10
1925: PPUSH
1926: LD_VAR 0 8
1930: PUSH
1931: LD_INT 1
1933: ARRAY
1934: PPUSH
1935: LD_VAR 0 8
1939: PUSH
1940: LD_INT 2
1942: ARRAY
1943: PPUSH
1944: CALL 1066 0 4
1948: PPUSH
1949: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_VAR 0 9
1962: PPUSH
1963: LD_VAR 0 10
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: CALL_OW 48
// ComHold ( i ) ;
1975: LD_VAR 0 3
1979: PPUSH
1980: CALL_OW 140
// for c = 1 to 2 do
1984: LD_ADDR_VAR 0 11
1988: PUSH
1989: DOUBLE
1990: LD_INT 1
1992: DEC
1993: ST_TO_ADDR
1994: LD_INT 2
1996: PUSH
1997: FOR_TO
1998: IFFALSE 2061
// begin tmp := base_area [ c ] ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_VAR 0 6
2009: PUSH
2010: LD_VAR 0 11
2014: ARRAY
2015: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
2016: LD_ADDR_VAR 0 12
2020: PUSH
2021: LD_VAR 0 12
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: CALL_OW 3
2033: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
2034: LD_ADDR_VAR 0 6
2038: PUSH
2039: LD_VAR 0 6
2043: PPUSH
2044: LD_VAR 0 11
2048: PPUSH
2049: LD_VAR 0 12
2053: PPUSH
2054: CALL_OW 1
2058: ST_TO_ADDR
// end ;
2059: GO 1997
2061: POP
2062: POP
// end ;
2063: GO 1847
2065: POP
2066: POP
// end ;
2067: LD_VAR 0 2
2071: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
2072: LD_INT 0
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
// if graveyard = 0 then
2079: LD_EXP 8
2083: PUSH
2084: LD_INT 0
2086: EQUAL
2087: IFFALSE 2091
// exit ;
2089: GO 2254
// i := rand ( 1 , graveyard ) ;
2091: LD_ADDR_VAR 0 2
2095: PUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_EXP 8
2103: PPUSH
2104: CALL_OW 12
2108: ST_TO_ADDR
// un := graveyard [ i ] ;
2109: LD_ADDR_VAR 0 4
2113: PUSH
2114: LD_EXP 8
2118: PUSH
2119: LD_VAR 0 2
2123: ARRAY
2124: ST_TO_ADDR
// for c in playerSquad do
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 12
2134: PUSH
2135: FOR_IN
2136: IFFALSE 2172
// if un = c [ 1 ] then
2138: LD_VAR 0 4
2142: PUSH
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 1
2150: ARRAY
2151: EQUAL
2152: IFFALSE 2170
// begin new := c [ 2 ] ;
2154: LD_ADDR_VAR 0 5
2158: PUSH
2159: LD_VAR 0 3
2163: PUSH
2164: LD_INT 2
2166: ARRAY
2167: ST_TO_ADDR
// break ;
2168: GO 2172
// end ;
2170: GO 2135
2172: POP
2173: POP
// uc_side := your_side ;
2174: LD_ADDR_OWVAR 20
2178: PUSH
2179: LD_OWVAR 2
2183: ST_TO_ADDR
// uc_nation := playerNation ;
2184: LD_ADDR_OWVAR 21
2188: PUSH
2189: LD_EXP 6
2193: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
2194: LD_ADDR_VAR 0 4
2198: PUSH
2199: LD_VAR 0 5
2203: PPUSH
2204: CALL_OW 34
2208: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
2209: LD_VAR 0 4
2213: PPUSH
2214: LD_EXP 9
2218: PPUSH
2219: LD_EXP 10
2223: PPUSH
2224: LD_INT 10
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
2234: LD_ADDR_EXP 8
2238: PUSH
2239: LD_EXP 8
2243: PPUSH
2244: LD_VAR 0 2
2248: PPUSH
2249: CALL_OW 3
2253: ST_TO_ADDR
// end ;
2254: LD_VAR 0 1
2258: RET
// export function ComEspace ( un ) ; begin
2259: LD_INT 0
2261: PPUSH
// if not IsInArea ( un , zoneOut ) then
2262: LD_VAR 0 1
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: CALL_OW 308
2274: NOT
2275: IFFALSE 2291
// ComMoveToArea ( un , zoneOut ) else
2277: LD_VAR 0 1
2281: PPUSH
2282: LD_INT 4
2284: PPUSH
2285: CALL_OW 113
2289: GO 2300
// RemoveUnit ( un ) ;
2291: LD_VAR 0 1
2295: PPUSH
2296: CALL_OW 64
// end ;
2300: LD_VAR 0 2
2304: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
2305: LD_INT 0
2307: PPUSH
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// list := AreaToList ( area , 0 ) ;
2312: LD_ADDR_VAR 0 4
2316: PUSH
2317: LD_VAR 0 2
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 517
2329: ST_TO_ADDR
// if not list then
2330: LD_VAR 0 4
2334: NOT
2335: IFFALSE 2339
// exit ;
2337: GO 2501
// for i = 1 to list do
2339: LD_ADDR_VAR 0 6
2343: PUSH
2344: DOUBLE
2345: LD_INT 1
2347: DEC
2348: ST_TO_ADDR
2349: LD_VAR 0 4
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2437
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2357: LD_ADDR_VAR 0 5
2361: PUSH
2362: LD_VAR 0 5
2366: PPUSH
2367: LD_VAR 0 5
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PUSH
2385: LD_VAR 0 6
2389: ARRAY
2390: PPUSH
2391: CALL_OW 1
2395: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2396: LD_ADDR_VAR 0 5
2400: PUSH
2401: LD_VAR 0 5
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_INT 1
2413: PLUS
2414: PPUSH
2415: LD_VAR 0 4
2419: PUSH
2420: LD_INT 2
2422: ARRAY
2423: PUSH
2424: LD_VAR 0 6
2428: ARRAY
2429: PPUSH
2430: CALL_OW 1
2434: ST_TO_ADDR
// end ;
2435: GO 2354
2437: POP
2438: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2439: LD_ADDR_VAR 0 7
2443: PUSH
2444: LD_VAR 0 5
2448: PPUSH
2449: LD_VAR 0 1
2453: PPUSH
2454: CALL_OW 250
2458: PPUSH
2459: LD_VAR 0 1
2463: PPUSH
2464: CALL_OW 251
2468: PPUSH
2469: CALL_OW 439
2473: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_VAR 0 7
2483: PUSH
2484: LD_INT 1
2486: ARRAY
2487: PPUSH
2488: LD_VAR 0 7
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: CALL_OW 111
// end ;
2501: LD_VAR 0 3
2505: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2506: LD_INT 0
2508: PPUSH
2509: PPUSH
2510: PPUSH
// timer := rand ( 2 , 5 ) ;
2511: LD_ADDR_VAR 0 4
2515: PUSH
2516: LD_INT 2
2518: PPUSH
2519: LD_INT 5
2521: PPUSH
2522: CALL_OW 12
2526: ST_TO_ADDR
// while ( timer > 0 ) do
2527: LD_VAR 0 4
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: IFFALSE 2574
// begin SetUnitDisplayNumber ( un , timer ) ;
2537: LD_VAR 0 1
2541: PPUSH
2542: LD_VAR 0 4
2546: PPUSH
2547: CALL_OW 505
// timer := timer - 1 ;
2551: LD_ADDR_VAR 0 4
2555: PUSH
2556: LD_VAR 0 4
2560: PUSH
2561: LD_INT 1
2563: MINUS
2564: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// end ;
2572: GO 2527
// if timer = 0 then
2574: LD_VAR 0 4
2578: PUSH
2579: LD_INT 0
2581: EQUAL
2582: IFFALSE 2631
// for i = 1 to 3 do
2584: LD_ADDR_VAR 0 3
2588: PUSH
2589: DOUBLE
2590: LD_INT 1
2592: DEC
2593: ST_TO_ADDR
2594: LD_INT 3
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2629
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 250
2609: PPUSH
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 251
2619: PPUSH
2620: LD_INT 10
2622: PPUSH
2623: CALL_OW 453
2627: GO 2597
2629: POP
2630: POP
// end ;
2631: LD_VAR 0 2
2635: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2636: LD_INT 0
2638: PPUSH
// if unit in unreachableList then
2639: LD_VAR 0 1
2643: PUSH
2644: LD_EXP 13
2648: IN
2649: IFFALSE 2667
// unreachableList := unreachableList diff unit ;
2651: LD_ADDR_EXP 13
2655: PUSH
2656: LD_EXP 13
2660: PUSH
2661: LD_VAR 0 1
2665: DIFF
2666: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2667: LD_VAR 0 1
2671: PPUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_VAR 0 3
2681: PPUSH
2682: CALL_OW 428
2686: PPUSH
2687: CALL_OW 115
// Wait ( 1 ) ;
2691: LD_INT 1
2693: PPUSH
2694: CALL_OW 67
// if unit in unreachableList then
2698: LD_VAR 0 1
2702: PUSH
2703: LD_EXP 13
2707: IN
2708: IFFALSE 2720
// result := false else
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
2718: GO 2728
// result := true ;
2720: LD_ADDR_VAR 0 4
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// end ;
2728: LD_VAR 0 4
2732: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2741: LD_ADDR_VAR 0 4
2745: PUSH
2746: LD_INT 81
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 255
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PPUSH
2763: CALL_OW 69
2767: ST_TO_ADDR
// if not enemy then
2768: LD_VAR 0 4
2772: NOT
2773: IFFALSE 2777
// exit ;
2775: GO 2927
// if UnitFilter ( enemy , [ f_occupied ] ) then
2777: LD_VAR 0 4
2781: PPUSH
2782: LD_INT 59
2784: PUSH
2785: EMPTY
2786: LIST
2787: PPUSH
2788: CALL_OW 72
2792: IFFALSE 2903
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_VAR 0 4
2803: PPUSH
2804: LD_INT 59
2806: PUSH
2807: EMPTY
2808: LIST
2809: PPUSH
2810: CALL_OW 72
2814: PPUSH
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL_OW 74
2824: ST_TO_ADDR
// x := GetX ( t ) ;
2825: LD_ADDR_VAR 0 6
2829: PUSH
2830: LD_VAR 0 5
2834: PPUSH
2835: CALL_OW 250
2839: ST_TO_ADDR
// y := GetY ( t ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_VAR 0 5
2849: PPUSH
2850: CALL_OW 251
2854: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2855: LD_VAR 0 1
2859: PPUSH
2860: LD_VAR 0 6
2864: PPUSH
2865: LD_VAR 0 7
2869: PPUSH
2870: CALL 2636 0 3
2874: NOT
2875: IFFALSE 2901
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2877: LD_VAR 0 1
2881: PPUSH
2882: LD_VAR 0 4
2886: PPUSH
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 74
2896: PPUSH
2897: CALL_OW 115
// end else
2901: GO 2927
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 4
2912: PPUSH
2913: LD_VAR 0 1
2917: PPUSH
2918: CALL_OW 74
2922: PPUSH
2923: CALL_OW 115
// end ; end_of_file
2927: LD_VAR 0 2
2931: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2932: LD_INT 0
2934: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2935: LD_ADDR_EXP 3
2939: PUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 426
2947: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2948: LD_ADDR_EXP 6
2952: PUSH
2953: LD_INT 1
2955: PPUSH
2956: CALL_OW 426
2960: PUSH
2961: LD_INT 1
2963: MINUS
2964: ST_TO_ADDR
// end ; end_of_file
2965: LD_VAR 0 1
2969: RET
// export function InitGame ; begin
2970: LD_INT 0
2972: PPUSH
// ResetFog ;
2973: CALL_OW 335
// RandomizeAll ;
2977: CALL_OW 11
// LoadColors ;
2981: CALL 821 0 0
// debug := false ;
2985: LD_ADDR_EXP 1
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2993: LD_ADDR_EXP 18
2997: PUSH
2998: LD_INT 91
3000: ST_TO_ADDR
// us_artillery := 97 ;
3001: LD_ADDR_EXP 17
3005: PUSH
3006: LD_INT 97
3008: ST_TO_ADDR
// ru_radar := 98 ;
3009: LD_ADDR_EXP 14
3013: PUSH
3014: LD_INT 98
3016: ST_TO_ADDR
// game_started := false ;
3017: LD_ADDR_EXP 7
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// points := 0 ;
3025: LD_ADDR_EXP 2
3029: PUSH
3030: LD_INT 0
3032: ST_TO_ADDR
// waveNumber := 0 ;
3033: LD_ADDR_EXP 5
3037: PUSH
3038: LD_INT 0
3040: ST_TO_ADDR
// timeToNextAttack := 0 ;
3041: LD_ADDR_EXP 4
3045: PUSH
3046: LD_INT 0
3048: ST_TO_ADDR
// graveyard := [ ] ;
3049: LD_ADDR_EXP 8
3053: PUSH
3054: EMPTY
3055: ST_TO_ADDR
// base_x := 1 ;
3056: LD_ADDR_EXP 9
3060: PUSH
3061: LD_INT 1
3063: ST_TO_ADDR
// base_y := 1 ;
3064: LD_ADDR_EXP 10
3068: PUSH
3069: LD_INT 1
3071: ST_TO_ADDR
// if difficultyLevel > 2 then
3072: LD_EXP 3
3076: PUSH
3077: LD_INT 2
3079: GREATER
3080: IFFALSE 3095
// SetTech ( 5 , 7 , state_researched ) ;
3082: LD_INT 5
3084: PPUSH
3085: LD_INT 7
3087: PPUSH
3088: LD_INT 2
3090: PPUSH
3091: CALL_OW 322
// if not playerNation then
3095: LD_EXP 6
3099: NOT
3100: IFFALSE 3126
// begin points := 100 ;
3102: LD_ADDR_EXP 2
3106: PUSH
3107: LD_INT 100
3109: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
3110: LD_ADDR_EXP 6
3114: PUSH
3115: LD_INT 1
3117: PPUSH
3118: LD_INT 3
3120: PPUSH
3121: CALL_OW 12
3125: ST_TO_ADDR
// end ; your_side := playerNation ;
3126: LD_ADDR_OWVAR 2
3130: PUSH
3131: LD_EXP 6
3135: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
3136: LD_OWVAR 2
3140: PPUSH
3141: LD_INT 4
3143: PPUSH
3144: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
3148: LD_INT 25
3150: PUSH
3151: LD_INT 20
3153: PUSH
3154: LD_INT 15
3156: PUSH
3157: LD_INT 10
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: PUSH
3166: LD_EXP 3
3170: ARRAY
3171: PUSH
3172: LD_INT 5
3174: PUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 2
3180: PUSH
3181: LD_INT 1
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: PUSH
3190: LD_EXP 3
3194: ARRAY
3195: PUSH
3196: LD_INT 5
3198: PUSH
3199: LD_INT 3
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: PUSH
3214: LD_EXP 3
3218: ARRAY
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PPUSH
3225: LD_INT 1
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: LIST
3238: PPUSH
3239: LD_INT 88
3241: PPUSH
3242: LD_INT 76
3244: PPUSH
3245: LD_INT 6
3247: PPUSH
3248: CALL 630 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
3252: LD_EXP 6
3256: PPUSH
3257: LD_INT 9
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 5
3265: PUSH
3266: LD_INT 3
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_EXP 3
3279: ARRAY
3280: PPUSH
3281: LD_INT 24
3283: PUSH
3284: LD_INT 16
3286: PUSH
3287: LD_INT 12
3289: PUSH
3290: LD_INT 8
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: PUSH
3299: LD_EXP 3
3303: ARRAY
3304: PPUSH
3305: LD_INT 88
3307: PPUSH
3308: LD_INT 76
3310: PPUSH
3311: CALL 339 0 5
// CenterNowOnXY ( 88 , 76 ) ;
3315: LD_INT 88
3317: PPUSH
3318: LD_INT 76
3320: PPUSH
3321: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
3325: LD_INT 90
3327: PPUSH
3328: LD_INT 79
3330: PPUSH
3331: LD_OWVAR 2
3335: PPUSH
3336: LD_INT 50
3338: NEG
3339: PPUSH
3340: CALL_OW 330
// if debug then
3344: LD_EXP 1
3348: IFFALSE 3359
// FogOff ( your_side ) ;
3350: LD_OWVAR 2
3354: PPUSH
3355: CALL_OW 344
// end ;
3359: LD_VAR 0 1
3363: RET
// every 0 0$01 trigger game_started do var i ;
3364: LD_EXP 7
3368: IFFALSE 3602
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
// begin while ( game_started ) do
3376: LD_EXP 7
3380: IFFALSE 3602
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3382: LD_INT 22
3384: PUSH
3385: LD_INT 7
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PPUSH
3392: CALL_OW 69
3396: PUSH
3397: LD_INT 5
3399: LESS
3400: PUSH
3401: LD_EXP 4
3405: PUSH
3406: LD_INT 0
3408: LESSEQUAL
3409: AND
3410: IFFALSE 3593
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3412: LD_INT 22
3414: PUSH
3415: LD_INT 4
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PPUSH
3422: CALL_OW 69
3426: IFFALSE 3464
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3428: LD_ADDR_VAR 0 1
3432: PUSH
3433: LD_INT 22
3435: PUSH
3436: LD_INT 4
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 69
3447: PUSH
3448: FOR_IN
3449: IFFALSE 3462
// RemoveUnit ( i ) ;
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 64
3460: GO 3448
3462: POP
3463: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3464: LD_EXP 5
3468: PUSH
3469: LD_INT 3
3471: MOD
3472: PUSH
3473: LD_INT 0
3475: EQUAL
3476: PUSH
3477: LD_EXP 5
3481: PUSH
3482: LD_INT 10
3484: MOD
3485: PUSH
3486: LD_INT 0
3488: EQUAL
3489: OR
3490: PUSH
3491: LD_EXP 5
3495: PUSH
3496: LD_INT 0
3498: GREATER
3499: AND
3500: IFFALSE 3506
// InitBonus ;
3502: CALL 9615 0 0
// if waveNumber mod 10 = 0 then
3506: LD_EXP 5
3510: PUSH
3511: LD_INT 10
3513: MOD
3514: PUSH
3515: LD_INT 0
3517: EQUAL
3518: IFFALSE 3524
// SaveForQuickRestart ;
3520: CALL_OW 22
// if waveNumber = 100 then
3524: LD_EXP 5
3528: PUSH
3529: LD_INT 100
3531: EQUAL
3532: IFFALSE 3545
// begin FogOff ( your_side ) ;
3534: LD_OWVAR 2
3538: PPUSH
3539: CALL_OW 344
// break ;
3543: GO 3602
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3545: LD_ADDR_EXP 4
3549: PUSH
3550: LD_INT 3150
3552: PPUSH
3553: LD_INT 5250
3555: PPUSH
3556: CALL_OW 12
3560: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3561: LD_EXP 4
3565: PPUSH
3566: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3570: LD_ADDR_EXP 5
3574: PUSH
3575: LD_EXP 5
3579: PUSH
3580: LD_INT 1
3582: PLUS
3583: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3584: LD_EXP 5
3588: PPUSH
3589: CALL 4606 0 1
// end ; Wait ( 0 0$01 ) ;
3593: LD_INT 35
3595: PPUSH
3596: CALL_OW 67
// end ;
3600: GO 3376
// end ;
3602: PPOPN 1
3604: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3605: LD_EXP 4
3609: PUSH
3610: LD_INT 0
3612: GREATER
3613: IFFALSE 3633
3615: GO 3617
3617: DISABLE
// begin enable ;
3618: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3619: LD_ADDR_EXP 4
3623: PUSH
3624: LD_EXP 4
3628: PUSH
3629: LD_INT 35
3631: MINUS
3632: ST_TO_ADDR
// end ; end_of_file
3633: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3634: LD_VAR 0 1
3638: PUSH
3639: LD_EXP 13
3643: IN
3644: NOT
3645: IFFALSE 3676
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3647: LD_ADDR_EXP 13
3651: PUSH
3652: LD_EXP 13
3656: PPUSH
3657: LD_EXP 13
3661: PUSH
3662: LD_INT 1
3664: PLUS
3665: PPUSH
3666: LD_VAR 0 1
3670: PPUSH
3671: CALL_OW 2
3675: ST_TO_ADDR
// end ;
3676: PPOPN 1
3678: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL 22179 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3688: LD_VAR 0 1
3692: PPUSH
3693: CALL_OW 255
3697: PUSH
3698: LD_OWVAR 2
3702: EQUAL
3703: PUSH
3704: LD_VAR 0 1
3708: PPUSH
3709: CALL_OW 247
3713: PUSH
3714: LD_INT 1
3716: EQUAL
3717: AND
3718: IFFALSE 3749
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3720: LD_ADDR_EXP 8
3724: PUSH
3725: LD_EXP 8
3729: PPUSH
3730: LD_EXP 8
3734: PUSH
3735: LD_INT 1
3737: PLUS
3738: PPUSH
3739: LD_VAR 0 1
3743: PPUSH
3744: CALL_OW 2
3748: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3749: LD_VAR 0 1
3753: PPUSH
3754: CALL_OW 255
3758: PUSH
3759: LD_INT 7
3761: EQUAL
3762: IFFALSE 4136
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3764: LD_VAR 0 1
3768: PUSH
3769: LD_INT 34
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: PPUSH
3779: CALL_OW 69
3783: IN
3784: IFFALSE 3829
// begin if Rand ( 1 , 100 ) <= 70 then
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 100
3791: PPUSH
3792: CALL_OW 12
3796: PUSH
3797: LD_INT 70
3799: LESSEQUAL
3800: IFFALSE 3829
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3802: LD_VAR 0 1
3806: PPUSH
3807: CALL_OW 250
3811: PPUSH
3812: LD_VAR 0 1
3816: PPUSH
3817: CALL_OW 251
3821: PPUSH
3822: LD_INT 10
3824: PPUSH
3825: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3829: LD_VAR 0 1
3833: PPUSH
3834: CALL_OW 247
3838: PUSH
3839: LD_INT 1
3841: DOUBLE
3842: EQUAL
3843: IFTRUE 3847
3845: GO 3981
3847: POP
// begin case GetClass ( un ) of class_apeman :
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 257
3857: PUSH
3858: LD_INT 12
3860: DOUBLE
3861: EQUAL
3862: IFTRUE 3866
3864: GO 3876
3866: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3867: LD_INT 2
3869: PPUSH
3870: CALL 797 0 1
3874: GO 3979
3876: LD_INT 15
3878: DOUBLE
3879: EQUAL
3880: IFTRUE 3884
3882: GO 3894
3884: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3885: LD_INT 5
3887: PPUSH
3888: CALL 797 0 1
3892: GO 3979
3894: LD_INT 17
3896: DOUBLE
3897: EQUAL
3898: IFTRUE 3902
3900: GO 3912
3902: POP
// AddPoints ( 30 ) ; class_soldier :
3903: LD_INT 30
3905: PPUSH
3906: CALL 797 0 1
3910: GO 3979
3912: LD_INT 1
3914: DOUBLE
3915: EQUAL
3916: IFTRUE 3920
3918: GO 3930
3920: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3921: LD_INT 50
3923: PPUSH
3924: CALL 797 0 1
3928: GO 3979
3930: LD_INT 9
3932: DOUBLE
3933: EQUAL
3934: IFTRUE 3950
3936: LD_INT 5
3938: DOUBLE
3939: EQUAL
3940: IFTRUE 3950
3942: LD_INT 8
3944: DOUBLE
3945: EQUAL
3946: IFTRUE 3950
3948: GO 3960
3950: POP
// AddPoints ( 75 ) ; class_mechanic :
3951: LD_INT 75
3953: PPUSH
3954: CALL 797 0 1
3958: GO 3979
3960: LD_INT 3
3962: DOUBLE
3963: EQUAL
3964: IFTRUE 3968
3966: GO 3978
3968: POP
// AddPoints ( 60 ) ; end ;
3969: LD_INT 60
3971: PPUSH
3972: CALL 797 0 1
3976: GO 3979
3978: POP
// end ; unit_vehicle :
3979: GO 4136
3981: LD_INT 2
3983: DOUBLE
3984: EQUAL
3985: IFTRUE 3989
3987: GO 4135
3989: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3990: LD_VAR 0 1
3994: PPUSH
3995: CALL_OW 265
3999: PUSH
4000: LD_INT 12
4002: DOUBLE
4003: EQUAL
4004: IFTRUE 4020
4006: LD_INT 1
4008: DOUBLE
4009: EQUAL
4010: IFTRUE 4020
4012: LD_INT 11
4014: DOUBLE
4015: EQUAL
4016: IFTRUE 4020
4018: GO 4030
4020: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
4021: LD_INT 100
4023: PPUSH
4024: CALL 797 0 1
4028: GO 4133
4030: LD_INT 13
4032: DOUBLE
4033: EQUAL
4034: IFTRUE 4068
4036: LD_INT 14
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4068
4042: LD_INT 2
4044: DOUBLE
4045: EQUAL
4046: IFTRUE 4068
4048: LD_INT 3
4050: DOUBLE
4051: EQUAL
4052: IFTRUE 4068
4054: LD_INT 21
4056: DOUBLE
4057: EQUAL
4058: IFTRUE 4068
4060: LD_INT 22
4062: DOUBLE
4063: EQUAL
4064: IFTRUE 4068
4066: GO 4078
4068: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
4069: LD_INT 250
4071: PPUSH
4072: CALL 797 0 1
4076: GO 4133
4078: LD_INT 4
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4104
4084: LD_INT 5
4086: DOUBLE
4087: EQUAL
4088: IFTRUE 4104
4090: LD_INT 23
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4104
4096: LD_INT 24
4098: DOUBLE
4099: EQUAL
4100: IFTRUE 4104
4102: GO 4114
4104: POP
// AddPoints ( 500 ) ; 25 :
4105: LD_INT 500
4107: PPUSH
4108: CALL 797 0 1
4112: GO 4133
4114: LD_INT 25
4116: DOUBLE
4117: EQUAL
4118: IFTRUE 4122
4120: GO 4132
4122: POP
// AddPoints ( 1250 ) ; end ;
4123: LD_INT 1250
4125: PPUSH
4126: CALL 797 0 1
4130: GO 4133
4132: POP
// end ; end ;
4133: GO 4136
4135: POP
// end ; end ;
4136: PPOPN 1
4138: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
4139: LD_VAR 0 1
4143: PPUSH
4144: CALL_OW 266
4148: PUSH
4149: LD_INT 0
4151: EQUAL
4152: IFFALSE 4202
// begin base_x := GetX ( b ) ;
4154: LD_ADDR_EXP 9
4158: PUSH
4159: LD_VAR 0 1
4163: PPUSH
4164: CALL_OW 250
4168: ST_TO_ADDR
// base_y := GetY ( b ) ;
4169: LD_ADDR_EXP 10
4173: PUSH
4174: LD_VAR 0 1
4178: PPUSH
4179: CALL_OW 251
4183: ST_TO_ADDR
// base := b ;
4184: LD_ADDR_EXP 11
4188: PUSH
4189: LD_VAR 0 1
4193: ST_TO_ADDR
// game_started := true ;
4194: LD_ADDR_EXP 7
4198: PUSH
4199: LD_INT 1
4201: ST_TO_ADDR
// end ; end ;
4202: PPOPN 1
4204: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
4205: LD_VAR 0 1
4209: PPUSH
4210: CALL_OW 255
4214: PUSH
4215: LD_OWVAR 2
4219: EQUAL
4220: IFFALSE 4224
// exit ;
4222: GO 4371
// if GetType ( un ) = unit_vehicle then
4224: LD_VAR 0 1
4228: PPUSH
4229: CALL_OW 247
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4290
// begin KillUnit ( un ) ;
4239: LD_VAR 0 1
4243: PPUSH
4244: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
4248: LD_VAR 0 1
4252: PPUSH
4253: CALL_OW 248
4257: PUSH
4258: LD_INT 2
4260: EQUAL
4261: PUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: CALL_OW 264
4271: PUSH
4272: LD_INT 49
4274: PUSH
4275: EMPTY
4276: LIST
4277: IN
4278: OR
4279: IFFALSE 4290
// ExplodeVehicle ( un ) ;
4281: LD_VAR 0 1
4285: PPUSH
4286: CALL 2506 0 1
// end ; if GetType ( un ) = unit_human then
4290: LD_VAR 0 1
4294: PPUSH
4295: CALL_OW 247
4299: PUSH
4300: LD_INT 1
4302: EQUAL
4303: IFFALSE 4371
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
4305: LD_VAR 0 1
4309: PPUSH
4310: CALL_OW 248
4314: PUSH
4315: LD_INT 2
4317: EQUAL
4318: PUSH
4319: LD_INT 5
4321: PPUSH
4322: LD_INT 7
4324: PPUSH
4325: CALL_OW 321
4329: PUSH
4330: LD_INT 2
4332: NONEQUAL
4333: AND
4334: PUSH
4335: LD_VAR 0 1
4339: PPUSH
4340: CALL_OW 248
4344: PUSH
4345: LD_INT 0
4347: PUSH
4348: LD_INT 1
4350: PUSH
4351: LD_INT 3
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: IN
4359: OR
4360: IFFALSE 4371
// KillUnit ( un ) ;
4362: LD_VAR 0 1
4366: PPUSH
4367: CALL_OW 66
// end ; end ;
4371: PPOPN 1
4373: END
// every 0 0$1 do
4374: GO 4376
4376: DISABLE
// begin enable ;
4377: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4378: LD_INT 4
4380: PPUSH
4381: LD_INT 5
4383: PPUSH
4384: LD_INT 22
4386: PUSH
4387: LD_OWVAR 2
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 513
// end ;
4400: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4401: LD_EXP 7
4405: PUSH
4406: LD_INT 22
4408: PUSH
4409: LD_OWVAR 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: LD_INT 21
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PPUSH
4432: CALL_OW 69
4436: PUSH
4437: LD_INT 0
4439: EQUAL
4440: AND
4441: IFFALSE 4453
4443: GO 4445
4445: DISABLE
// YouLost ( die ) ;
4446: LD_STRING die
4448: PPUSH
4449: CALL_OW 104
4453: END
// every 0 0$21 trigger tick <= 15 15$00 do
4454: LD_OWVAR 1
4458: PUSH
4459: LD_INT 31500
4461: LESSEQUAL
4462: IFFALSE 4489
4464: GO 4466
4466: DISABLE
// begin enable ;
4467: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4468: LD_INT 1
4470: PPUSH
4471: LD_INT 5
4473: PPUSH
4474: CALL_OW 12
4478: PPUSH
4479: LD_INT 3
4481: PPUSH
4482: LD_INT 1
4484: PPUSH
4485: CALL_OW 55
// end ;
4489: END
// every 0 0$51 trigger tick > 15 15$00 do
4490: LD_OWVAR 1
4494: PUSH
4495: LD_INT 31500
4497: GREATER
4498: IFFALSE 4545
4500: GO 4502
4502: DISABLE
// begin enable ;
4503: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4504: LD_INT 22
4506: PUSH
4507: LD_INT 7
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PPUSH
4514: CALL_OW 69
4518: PUSH
4519: LD_INT 0
4521: EQUAL
4522: IFFALSE 4545
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4524: LD_INT 1
4526: PPUSH
4527: LD_INT 5
4529: PPUSH
4530: CALL_OW 12
4534: PPUSH
4535: LD_INT 3
4537: PPUSH
4538: LD_INT 1
4540: PPUSH
4541: CALL_OW 55
// end ;
4545: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4546: LD_VAR 0 1
4550: PPUSH
4551: LD_INT 3
4553: PPUSH
4554: CALL_OW 308
4558: IFFALSE 4569
// KillUnit ( building ) ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 66
// end ;
4569: PPOPN 2
4571: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4572: LD_VAR 0 1
4576: PPUSH
4577: LD_VAR 0 2
4581: PPUSH
4582: LD_VAR 0 3
4586: PPUSH
4587: CALL 22277 0 3
// end ;
4591: PPOPN 3
4593: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4594: LD_VAR 0 1
4598: PPUSH
4599: CALL 22285 0 1
// end ; end_of_file
4603: PPOPN 1
4605: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4606: LD_INT 0
4608: PPUSH
4609: PPUSH
4610: PPUSH
4611: PPUSH
4612: PPUSH
4613: PPUSH
4614: PPUSH
4615: PPUSH
4616: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4617: LD_ADDR_VAR 0 7
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 2
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: ST_TO_ADDR
// uc_side := 7 ;
4632: LD_ADDR_OWVAR 20
4636: PUSH
4637: LD_INT 7
4639: ST_TO_ADDR
// l := 0 ;
4640: LD_ADDR_VAR 0 9
4644: PUSH
4645: LD_INT 0
4647: ST_TO_ADDR
// case num of 1 :
4648: LD_VAR 0 1
4652: PUSH
4653: LD_INT 1
4655: DOUBLE
4656: EQUAL
4657: IFTRUE 4661
4659: GO 4680
4661: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4662: LD_ADDR_VAR 0 2
4666: PUSH
4667: LD_INT 12
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: CALL 7009 0 2
4677: ST_TO_ADDR
4678: GO 6818
4680: LD_INT 2
4682: DOUBLE
4683: EQUAL
4684: IFTRUE 4688
4686: GO 4707
4688: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4689: LD_ADDR_VAR 0 2
4693: PUSH
4694: LD_INT 12
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL 7080 0 2
4704: ST_TO_ADDR
4705: GO 6818
4707: LD_INT 3
4709: DOUBLE
4710: EQUAL
4711: IFTRUE 4715
4713: GO 4734
4715: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4716: LD_ADDR_VAR 0 2
4720: PUSH
4721: LD_INT 12
4723: PPUSH
4724: LD_INT 1
4726: PPUSH
4727: CALL 7151 0 2
4731: ST_TO_ADDR
4732: GO 6818
4734: LD_INT 4
4736: DOUBLE
4737: EQUAL
4738: IFTRUE 4742
4740: GO 4761
4742: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4743: LD_ADDR_VAR 0 2
4747: PUSH
4748: LD_INT 7
4750: PPUSH
4751: LD_INT 1
4753: PPUSH
4754: CALL 7230 0 2
4758: ST_TO_ADDR
4759: GO 6818
4761: LD_INT 5
4763: DOUBLE
4764: EQUAL
4765: IFTRUE 4769
4767: GO 4788
4769: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4770: LD_ADDR_VAR 0 2
4774: PUSH
4775: LD_INT 7
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL 7626 0 2
4785: ST_TO_ADDR
4786: GO 6818
4788: LD_INT 6
4790: DOUBLE
4791: EQUAL
4792: IFTRUE 4796
4794: GO 4815
4796: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 1
4807: PPUSH
4808: CALL 8046 0 2
4812: ST_TO_ADDR
4813: GO 6818
4815: LD_INT 7
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4823
4821: GO 4842
4823: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: LD_INT 15
4831: PPUSH
4832: LD_INT 1
4834: PPUSH
4835: CALL 8466 0 2
4839: ST_TO_ADDR
4840: GO 6818
4842: LD_INT 8
4844: DOUBLE
4845: EQUAL
4846: IFTRUE 4850
4848: GO 4869
4850: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 7
4858: PPUSH
4859: LD_INT 1
4861: PPUSH
4862: CALL 8567 0 2
4866: ST_TO_ADDR
4867: GO 6818
4869: LD_INT 9
4871: DOUBLE
4872: EQUAL
4873: IFTRUE 4877
4875: GO 4908
4877: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4878: LD_ADDR_VAR 0 2
4882: PUSH
4883: LD_INT 4
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: CALL 8567 0 2
4893: PUSH
4894: LD_INT 7
4896: PPUSH
4897: LD_INT 1
4899: PPUSH
4900: CALL 7626 0 2
4904: ADD
4905: ST_TO_ADDR
4906: GO 6818
4908: LD_INT 10
4910: DOUBLE
4911: EQUAL
4912: IFTRUE 4916
4914: GO 4947
4916: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4917: LD_ADDR_VAR 0 2
4921: PUSH
4922: LD_INT 9
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL 8466 0 2
4932: PUSH
4933: LD_INT 14
4935: PPUSH
4936: LD_INT 1
4938: PPUSH
4939: CALL 7151 0 2
4943: ADD
4944: ST_TO_ADDR
4945: GO 6818
4947: LD_INT 11
4949: DOUBLE
4950: EQUAL
4951: IFTRUE 5003
4953: LD_INT 21
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 5003
4959: LD_INT 31
4961: DOUBLE
4962: EQUAL
4963: IFTRUE 5003
4965: LD_INT 41
4967: DOUBLE
4968: EQUAL
4969: IFTRUE 5003
4971: LD_INT 51
4973: DOUBLE
4974: EQUAL
4975: IFTRUE 5003
4977: LD_INT 61
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 5003
4983: LD_INT 71
4985: DOUBLE
4986: EQUAL
4987: IFTRUE 5003
4989: LD_INT 81
4991: DOUBLE
4992: EQUAL
4993: IFTRUE 5003
4995: LD_INT 91
4997: DOUBLE
4998: EQUAL
4999: IFTRUE 5003
5001: GO 5112
5003: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
5004: LD_ADDR_VAR 0 2
5008: PUSH
5009: LD_INT 20
5011: PUSH
5012: LD_INT 30
5014: PUSH
5015: LD_INT 40
5017: PUSH
5018: LD_INT 45
5020: PUSH
5021: LD_INT 50
5023: PUSH
5024: LD_INT 60
5026: PUSH
5027: LD_INT 70
5029: PUSH
5030: LD_INT 80
5032: PUSH
5033: LD_INT 100
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: PUSH
5047: LD_VAR 0 1
5051: PUSH
5052: LD_INT 10
5054: DIV
5055: ARRAY
5056: PPUSH
5057: LD_INT 2
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: LD_INT 4
5065: PUSH
5066: LD_INT 5
5068: PUSH
5069: LD_INT 6
5071: PUSH
5072: LD_INT 7
5074: PUSH
5075: LD_INT 8
5077: PUSH
5078: LD_INT 9
5080: PUSH
5081: LD_INT 10
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: PUSH
5095: LD_VAR 0 1
5099: PUSH
5100: LD_INT 10
5102: DIV
5103: ARRAY
5104: PPUSH
5105: CALL 7009 0 2
5109: ST_TO_ADDR
5110: GO 6818
5112: LD_INT 12
5114: DOUBLE
5115: EQUAL
5116: IFTRUE 5168
5118: LD_INT 22
5120: DOUBLE
5121: EQUAL
5122: IFTRUE 5168
5124: LD_INT 32
5126: DOUBLE
5127: EQUAL
5128: IFTRUE 5168
5130: LD_INT 42
5132: DOUBLE
5133: EQUAL
5134: IFTRUE 5168
5136: LD_INT 52
5138: DOUBLE
5139: EQUAL
5140: IFTRUE 5168
5142: LD_INT 62
5144: DOUBLE
5145: EQUAL
5146: IFTRUE 5168
5148: LD_INT 72
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5168
5154: LD_INT 82
5156: DOUBLE
5157: EQUAL
5158: IFTRUE 5168
5160: LD_INT 92
5162: DOUBLE
5163: EQUAL
5164: IFTRUE 5168
5166: GO 5277
5168: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
5169: LD_ADDR_VAR 0 2
5173: PUSH
5174: LD_INT 16
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 28
5182: PUSH
5183: LD_INT 33
5185: PUSH
5186: LD_INT 39
5188: PUSH
5189: LD_INT 46
5191: PUSH
5192: LD_INT 56
5194: PUSH
5195: LD_INT 66
5197: PUSH
5198: LD_INT 80
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_VAR 0 1
5216: PUSH
5217: LD_INT 10
5219: DIV
5220: ARRAY
5221: PPUSH
5222: LD_INT 2
5224: PUSH
5225: LD_INT 3
5227: PUSH
5228: LD_INT 4
5230: PUSH
5231: LD_INT 5
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: LD_INT 7
5239: PUSH
5240: LD_INT 8
5242: PUSH
5243: LD_INT 9
5245: PUSH
5246: LD_INT 10
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: PUSH
5260: LD_VAR 0 1
5264: PUSH
5265: LD_INT 10
5267: DIV
5268: ARRAY
5269: PPUSH
5270: CALL 7080 0 2
5274: ST_TO_ADDR
5275: GO 6818
5277: LD_INT 13
5279: DOUBLE
5280: EQUAL
5281: IFTRUE 5333
5283: LD_INT 23
5285: DOUBLE
5286: EQUAL
5287: IFTRUE 5333
5289: LD_INT 33
5291: DOUBLE
5292: EQUAL
5293: IFTRUE 5333
5295: LD_INT 43
5297: DOUBLE
5298: EQUAL
5299: IFTRUE 5333
5301: LD_INT 53
5303: DOUBLE
5304: EQUAL
5305: IFTRUE 5333
5307: LD_INT 63
5309: DOUBLE
5310: EQUAL
5311: IFTRUE 5333
5313: LD_INT 73
5315: DOUBLE
5316: EQUAL
5317: IFTRUE 5333
5319: LD_INT 83
5321: DOUBLE
5322: EQUAL
5323: IFTRUE 5333
5325: LD_INT 93
5327: DOUBLE
5328: EQUAL
5329: IFTRUE 5333
5331: GO 5442
5333: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5334: LD_ADDR_VAR 0 2
5338: PUSH
5339: LD_INT 14
5341: PUSH
5342: LD_INT 18
5344: PUSH
5345: LD_INT 22
5347: PUSH
5348: LD_INT 27
5350: PUSH
5351: LD_INT 33
5353: PUSH
5354: LD_INT 39
5356: PUSH
5357: LD_INT 44
5359: PUSH
5360: LD_INT 57
5362: PUSH
5363: LD_INT 65
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PUSH
5377: LD_VAR 0 1
5381: PUSH
5382: LD_INT 10
5384: DIV
5385: ARRAY
5386: PPUSH
5387: LD_INT 2
5389: PUSH
5390: LD_INT 3
5392: PUSH
5393: LD_INT 4
5395: PUSH
5396: LD_INT 5
5398: PUSH
5399: LD_INT 6
5401: PUSH
5402: LD_INT 7
5404: PUSH
5405: LD_INT 8
5407: PUSH
5408: LD_INT 9
5410: PUSH
5411: LD_INT 10
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: LD_VAR 0 1
5429: PUSH
5430: LD_INT 10
5432: DIV
5433: ARRAY
5434: PPUSH
5435: CALL 7151 0 2
5439: ST_TO_ADDR
5440: GO 6818
5442: LD_INT 14
5444: DOUBLE
5445: EQUAL
5446: IFTRUE 5498
5448: LD_INT 24
5450: DOUBLE
5451: EQUAL
5452: IFTRUE 5498
5454: LD_INT 34
5456: DOUBLE
5457: EQUAL
5458: IFTRUE 5498
5460: LD_INT 44
5462: DOUBLE
5463: EQUAL
5464: IFTRUE 5498
5466: LD_INT 54
5468: DOUBLE
5469: EQUAL
5470: IFTRUE 5498
5472: LD_INT 64
5474: DOUBLE
5475: EQUAL
5476: IFTRUE 5498
5478: LD_INT 74
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5498
5484: LD_INT 84
5486: DOUBLE
5487: EQUAL
5488: IFTRUE 5498
5490: LD_INT 94
5492: DOUBLE
5493: EQUAL
5494: IFTRUE 5498
5496: GO 5607
5498: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5499: LD_ADDR_VAR 0 2
5503: PUSH
5504: LD_INT 9
5506: PUSH
5507: LD_INT 15
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 30
5515: PUSH
5516: LD_INT 39
5518: PUSH
5519: LD_INT 45
5521: PUSH
5522: LD_INT 56
5524: PUSH
5525: LD_INT 60
5527: PUSH
5528: LD_INT 65
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: PUSH
5542: LD_VAR 0 1
5546: PUSH
5547: LD_INT 10
5549: DIV
5550: ARRAY
5551: PPUSH
5552: LD_INT 2
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: LD_INT 4
5560: PUSH
5561: LD_INT 5
5563: PUSH
5564: LD_INT 6
5566: PUSH
5567: LD_INT 7
5569: PUSH
5570: LD_INT 8
5572: PUSH
5573: LD_INT 9
5575: PUSH
5576: LD_INT 10
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 10
5597: DIV
5598: ARRAY
5599: PPUSH
5600: CALL 7230 0 2
5604: ST_TO_ADDR
5605: GO 6818
5607: LD_INT 15
5609: DOUBLE
5610: EQUAL
5611: IFTRUE 5663
5613: LD_INT 25
5615: DOUBLE
5616: EQUAL
5617: IFTRUE 5663
5619: LD_INT 35
5621: DOUBLE
5622: EQUAL
5623: IFTRUE 5663
5625: LD_INT 45
5627: DOUBLE
5628: EQUAL
5629: IFTRUE 5663
5631: LD_INT 55
5633: DOUBLE
5634: EQUAL
5635: IFTRUE 5663
5637: LD_INT 65
5639: DOUBLE
5640: EQUAL
5641: IFTRUE 5663
5643: LD_INT 75
5645: DOUBLE
5646: EQUAL
5647: IFTRUE 5663
5649: LD_INT 85
5651: DOUBLE
5652: EQUAL
5653: IFTRUE 5663
5655: LD_INT 95
5657: DOUBLE
5658: EQUAL
5659: IFTRUE 5663
5661: GO 5772
5663: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 6
5671: PUSH
5672: LD_INT 11
5674: PUSH
5675: LD_INT 15
5677: PUSH
5678: LD_INT 20
5680: PUSH
5681: LD_INT 25
5683: PUSH
5684: LD_INT 30
5686: PUSH
5687: LD_INT 35
5689: PUSH
5690: LD_INT 40
5692: PUSH
5693: LD_INT 45
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: LD_VAR 0 1
5711: PUSH
5712: LD_INT 10
5714: DIV
5715: ARRAY
5716: PPUSH
5717: LD_INT 2
5719: PUSH
5720: LD_INT 3
5722: PUSH
5723: LD_INT 4
5725: PUSH
5726: LD_INT 5
5728: PUSH
5729: LD_INT 6
5731: PUSH
5732: LD_INT 7
5734: PUSH
5735: LD_INT 8
5737: PUSH
5738: LD_INT 9
5740: PUSH
5741: LD_INT 10
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: PUSH
5755: LD_VAR 0 1
5759: PUSH
5760: LD_INT 10
5762: DIV
5763: ARRAY
5764: PPUSH
5765: CALL 7626 0 2
5769: ST_TO_ADDR
5770: GO 6818
5772: LD_INT 16
5774: DOUBLE
5775: EQUAL
5776: IFTRUE 5828
5778: LD_INT 26
5780: DOUBLE
5781: EQUAL
5782: IFTRUE 5828
5784: LD_INT 36
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5828
5790: LD_INT 46
5792: DOUBLE
5793: EQUAL
5794: IFTRUE 5828
5796: LD_INT 56
5798: DOUBLE
5799: EQUAL
5800: IFTRUE 5828
5802: LD_INT 66
5804: DOUBLE
5805: EQUAL
5806: IFTRUE 5828
5808: LD_INT 76
5810: DOUBLE
5811: EQUAL
5812: IFTRUE 5828
5814: LD_INT 86
5816: DOUBLE
5817: EQUAL
5818: IFTRUE 5828
5820: LD_INT 96
5822: DOUBLE
5823: EQUAL
5824: IFTRUE 5828
5826: GO 5937
5828: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5829: LD_ADDR_VAR 0 2
5833: PUSH
5834: LD_INT 9
5836: PUSH
5837: LD_INT 12
5839: PUSH
5840: LD_INT 15
5842: PUSH
5843: LD_INT 18
5845: PUSH
5846: LD_INT 21
5848: PUSH
5849: LD_INT 24
5851: PUSH
5852: LD_INT 27
5854: PUSH
5855: LD_INT 30
5857: PUSH
5858: LD_INT 33
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: PUSH
5872: LD_VAR 0 1
5876: PUSH
5877: LD_INT 10
5879: DIV
5880: ARRAY
5881: PPUSH
5882: LD_INT 2
5884: PUSH
5885: LD_INT 3
5887: PUSH
5888: LD_INT 4
5890: PUSH
5891: LD_INT 5
5893: PUSH
5894: LD_INT 6
5896: PUSH
5897: LD_INT 7
5899: PUSH
5900: LD_INT 8
5902: PUSH
5903: LD_INT 9
5905: PUSH
5906: LD_INT 10
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: PUSH
5920: LD_VAR 0 1
5924: PUSH
5925: LD_INT 10
5927: DIV
5928: ARRAY
5929: PPUSH
5930: CALL 8046 0 2
5934: ST_TO_ADDR
5935: GO 6818
5937: LD_INT 17
5939: DOUBLE
5940: EQUAL
5941: IFTRUE 5993
5943: LD_INT 27
5945: DOUBLE
5946: EQUAL
5947: IFTRUE 5993
5949: LD_INT 37
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5993
5955: LD_INT 47
5957: DOUBLE
5958: EQUAL
5959: IFTRUE 5993
5961: LD_INT 57
5963: DOUBLE
5964: EQUAL
5965: IFTRUE 5993
5967: LD_INT 67
5969: DOUBLE
5970: EQUAL
5971: IFTRUE 5993
5973: LD_INT 77
5975: DOUBLE
5976: EQUAL
5977: IFTRUE 5993
5979: LD_INT 87
5981: DOUBLE
5982: EQUAL
5983: IFTRUE 5993
5985: LD_INT 97
5987: DOUBLE
5988: EQUAL
5989: IFTRUE 5993
5991: GO 6102
5993: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: LD_INT 14
6001: PUSH
6002: LD_INT 16
6004: PUSH
6005: LD_INT 18
6007: PUSH
6008: LD_INT 22
6010: PUSH
6011: LD_INT 24
6013: PUSH
6014: LD_INT 26
6016: PUSH
6017: LD_INT 28
6019: PUSH
6020: LD_INT 32
6022: PUSH
6023: LD_INT 35
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 1
6041: PUSH
6042: LD_INT 10
6044: DIV
6045: ARRAY
6046: PPUSH
6047: LD_INT 2
6049: PUSH
6050: LD_INT 3
6052: PUSH
6053: LD_INT 4
6055: PUSH
6056: LD_INT 5
6058: PUSH
6059: LD_INT 6
6061: PUSH
6062: LD_INT 7
6064: PUSH
6065: LD_INT 8
6067: PUSH
6068: LD_INT 9
6070: PUSH
6071: LD_INT 10
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_VAR 0 1
6089: PUSH
6090: LD_INT 10
6092: DIV
6093: ARRAY
6094: PPUSH
6095: CALL 8466 0 2
6099: ST_TO_ADDR
6100: GO 6818
6102: LD_INT 18
6104: DOUBLE
6105: EQUAL
6106: IFTRUE 6158
6108: LD_INT 28
6110: DOUBLE
6111: EQUAL
6112: IFTRUE 6158
6114: LD_INT 38
6116: DOUBLE
6117: EQUAL
6118: IFTRUE 6158
6120: LD_INT 48
6122: DOUBLE
6123: EQUAL
6124: IFTRUE 6158
6126: LD_INT 58
6128: DOUBLE
6129: EQUAL
6130: IFTRUE 6158
6132: LD_INT 68
6134: DOUBLE
6135: EQUAL
6136: IFTRUE 6158
6138: LD_INT 78
6140: DOUBLE
6141: EQUAL
6142: IFTRUE 6158
6144: LD_INT 88
6146: DOUBLE
6147: EQUAL
6148: IFTRUE 6158
6150: LD_INT 98
6152: DOUBLE
6153: EQUAL
6154: IFTRUE 6158
6156: GO 6267
6158: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
6159: LD_ADDR_VAR 0 2
6163: PUSH
6164: LD_INT 9
6166: PUSH
6167: LD_INT 12
6169: PUSH
6170: LD_INT 15
6172: PUSH
6173: LD_INT 18
6175: PUSH
6176: LD_INT 21
6178: PUSH
6179: LD_INT 24
6181: PUSH
6182: LD_INT 27
6184: PUSH
6185: LD_INT 30
6187: PUSH
6188: LD_INT 33
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: PUSH
6202: LD_VAR 0 1
6206: PUSH
6207: LD_INT 10
6209: DIV
6210: ARRAY
6211: PPUSH
6212: LD_INT 2
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: LD_INT 4
6220: PUSH
6221: LD_INT 5
6223: PUSH
6224: LD_INT 6
6226: PUSH
6227: LD_INT 7
6229: PUSH
6230: LD_INT 8
6232: PUSH
6233: LD_INT 9
6235: PUSH
6236: LD_INT 10
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_VAR 0 1
6254: PUSH
6255: LD_INT 10
6257: DIV
6258: ARRAY
6259: PPUSH
6260: CALL 8567 0 2
6264: ST_TO_ADDR
6265: GO 6818
6267: LD_INT 19
6269: DOUBLE
6270: EQUAL
6271: IFTRUE 6323
6273: LD_INT 29
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6323
6279: LD_INT 39
6281: DOUBLE
6282: EQUAL
6283: IFTRUE 6323
6285: LD_INT 49
6287: DOUBLE
6288: EQUAL
6289: IFTRUE 6323
6291: LD_INT 59
6293: DOUBLE
6294: EQUAL
6295: IFTRUE 6323
6297: LD_INT 69
6299: DOUBLE
6300: EQUAL
6301: IFTRUE 6323
6303: LD_INT 79
6305: DOUBLE
6306: EQUAL
6307: IFTRUE 6323
6309: LD_INT 89
6311: DOUBLE
6312: EQUAL
6313: IFTRUE 6323
6315: LD_INT 99
6317: DOUBLE
6318: EQUAL
6319: IFTRUE 6323
6321: GO 6534
6323: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: LD_INT 4
6331: PUSH
6332: LD_INT 7
6334: PUSH
6335: LD_INT 10
6337: PUSH
6338: LD_INT 13
6340: PUSH
6341: LD_INT 14
6343: PUSH
6344: LD_INT 17
6346: PUSH
6347: LD_INT 19
6349: PUSH
6350: LD_INT 21
6352: PUSH
6353: LD_INT 23
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_VAR 0 1
6371: PUSH
6372: LD_INT 10
6374: DIV
6375: ARRAY
6376: PPUSH
6377: LD_INT 2
6379: PUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: LD_INT 5
6388: PUSH
6389: LD_INT 6
6391: PUSH
6392: LD_INT 7
6394: PUSH
6395: LD_INT 8
6397: PUSH
6398: LD_INT 9
6400: PUSH
6401: LD_INT 10
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: PUSH
6415: LD_VAR 0 1
6419: PUSH
6420: LD_INT 10
6422: DIV
6423: ARRAY
6424: PPUSH
6425: CALL 8567 0 2
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 7
6435: PUSH
6436: LD_INT 10
6438: PUSH
6439: LD_INT 13
6441: PUSH
6442: LD_INT 14
6444: PUSH
6445: LD_INT 17
6447: PUSH
6448: LD_INT 19
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 25
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: LD_VAR 0 1
6472: PUSH
6473: LD_INT 10
6475: DIV
6476: ARRAY
6477: PPUSH
6478: LD_INT 2
6480: PUSH
6481: LD_INT 3
6483: PUSH
6484: LD_INT 4
6486: PUSH
6487: LD_INT 5
6489: PUSH
6490: LD_INT 6
6492: PUSH
6493: LD_INT 7
6495: PUSH
6496: LD_INT 8
6498: PUSH
6499: LD_INT 9
6501: PUSH
6502: LD_INT 10
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: PUSH
6516: LD_VAR 0 1
6520: PUSH
6521: LD_INT 10
6523: DIV
6524: ARRAY
6525: PPUSH
6526: CALL 7626 0 2
6530: ADD
6531: ST_TO_ADDR
6532: GO 6818
6534: LD_INT 20
6536: DOUBLE
6537: EQUAL
6538: IFTRUE 6590
6540: LD_INT 30
6542: DOUBLE
6543: EQUAL
6544: IFTRUE 6590
6546: LD_INT 40
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6590
6552: LD_INT 50
6554: DOUBLE
6555: EQUAL
6556: IFTRUE 6590
6558: LD_INT 60
6560: DOUBLE
6561: EQUAL
6562: IFTRUE 6590
6564: LD_INT 70
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6590
6570: LD_INT 80
6572: DOUBLE
6573: EQUAL
6574: IFTRUE 6590
6576: LD_INT 90
6578: DOUBLE
6579: EQUAL
6580: IFTRUE 6590
6582: LD_INT 100
6584: DOUBLE
6585: EQUAL
6586: IFTRUE 6590
6588: GO 6817
6590: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: LD_INT 4
6598: PUSH
6599: LD_INT 7
6601: PUSH
6602: LD_INT 10
6604: PUSH
6605: LD_INT 13
6607: PUSH
6608: LD_INT 14
6610: PUSH
6611: LD_INT 17
6613: PUSH
6614: LD_INT 19
6616: PUSH
6617: LD_INT 21
6619: PUSH
6620: LD_INT 23
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PUSH
6634: LD_VAR 0 1
6638: PUSH
6639: LD_INT 10
6641: DIVREAL
6642: PUSH
6643: LD_INT 1
6645: MINUS
6646: ARRAY
6647: PPUSH
6648: LD_INT 2
6650: PUSH
6651: LD_INT 3
6653: PUSH
6654: LD_INT 4
6656: PUSH
6657: LD_INT 5
6659: PUSH
6660: LD_INT 6
6662: PUSH
6663: LD_INT 7
6665: PUSH
6666: LD_INT 8
6668: PUSH
6669: LD_INT 9
6671: PUSH
6672: LD_INT 10
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: PUSH
6686: LD_VAR 0 1
6690: PUSH
6691: LD_INT 10
6693: DIVREAL
6694: PUSH
6695: LD_INT 1
6697: MINUS
6698: ARRAY
6699: PPUSH
6700: CALL 8466 0 2
6704: PUSH
6705: LD_INT 4
6707: PUSH
6708: LD_INT 7
6710: PUSH
6711: LD_INT 10
6713: PUSH
6714: LD_INT 13
6716: PUSH
6717: LD_INT 14
6719: PUSH
6720: LD_INT 17
6722: PUSH
6723: LD_INT 19
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 25
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: LD_VAR 0 1
6747: PUSH
6748: LD_INT 10
6750: DIVREAL
6751: PUSH
6752: LD_INT 1
6754: MINUS
6755: ARRAY
6756: PPUSH
6757: LD_INT 2
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: LD_INT 4
6765: PUSH
6766: LD_INT 5
6768: PUSH
6769: LD_INT 6
6771: PUSH
6772: LD_INT 7
6774: PUSH
6775: LD_INT 8
6777: PUSH
6778: LD_INT 9
6780: PUSH
6781: LD_INT 10
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: PUSH
6795: LD_VAR 0 1
6799: PUSH
6800: LD_INT 10
6802: DIVREAL
6803: PUSH
6804: LD_INT 1
6806: MINUS
6807: ARRAY
6808: PPUSH
6809: CALL 8046 0 2
6813: ADD
6814: ST_TO_ADDR
6815: GO 6818
6817: POP
// for i in result do
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: LD_VAR 0 2
6827: PUSH
6828: FOR_IN
6829: IFFALSE 7002
// begin a := rand ( 1 , 2 ) ;
6831: LD_ADDR_VAR 0 8
6835: PUSH
6836: LD_INT 1
6838: PPUSH
6839: LD_INT 2
6841: PPUSH
6842: CALL_OW 12
6846: ST_TO_ADDR
// if a = 1 then
6847: LD_VAR 0 8
6851: PUSH
6852: LD_INT 1
6854: EQUAL
6855: IFFALSE 6871
// SetDir ( i , 3 ) else
6857: LD_VAR 0 3
6861: PPUSH
6862: LD_INT 3
6864: PPUSH
6865: CALL_OW 233
6869: GO 6883
// SetDir ( i , 5 ) ;
6871: LD_VAR 0 3
6875: PPUSH
6876: LD_INT 5
6878: PPUSH
6879: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6883: LD_VAR 0 3
6887: PPUSH
6888: LD_VAR 0 7
6892: PUSH
6893: LD_VAR 0 8
6897: ARRAY
6898: PPUSH
6899: LD_INT 0
6901: PPUSH
6902: CALL_OW 49
// if GetControl ( i ) = control_manual then
6906: LD_VAR 0 3
6910: PPUSH
6911: CALL_OW 263
6915: PUSH
6916: LD_INT 1
6918: EQUAL
6919: IFFALSE 6965
// begin uc_nation := GetNation ( i ) ;
6921: LD_ADDR_OWVAR 21
6925: PUSH
6926: LD_VAR 0 3
6930: PPUSH
6931: CALL_OW 248
6935: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6936: LD_INT 0
6938: PPUSH
6939: LD_INT 3
6941: PPUSH
6942: LD_VAR 0 5
6946: PPUSH
6947: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6951: CALL_OW 44
6955: PPUSH
6956: LD_VAR 0 3
6960: PPUSH
6961: CALL_OW 52
// end ; l := l + 1 ;
6965: LD_ADDR_VAR 0 9
6969: PUSH
6970: LD_VAR 0 9
6974: PUSH
6975: LD_INT 1
6977: PLUS
6978: ST_TO_ADDR
// if l mod 10 = 0 then
6979: LD_VAR 0 9
6983: PUSH
6984: LD_INT 10
6986: MOD
6987: PUSH
6988: LD_INT 0
6990: EQUAL
6991: IFFALSE 7000
// Wait ( 0 0$02 ) ;
6993: LD_INT 70
6995: PPUSH
6996: CALL_OW 67
// end ;
7000: GO 6828
7002: POP
7003: POP
// end ;
7004: LD_VAR 0 2
7008: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
7009: LD_INT 0
7011: PPUSH
7012: PPUSH
7013: PPUSH
// uc_nation := nation_nature ;
7014: LD_ADDR_OWVAR 21
7018: PUSH
7019: LD_INT 0
7021: ST_TO_ADDR
// for i = 1 to n do
7022: LD_ADDR_VAR 0 4
7026: PUSH
7027: DOUBLE
7028: LD_INT 1
7030: DEC
7031: ST_TO_ADDR
7032: LD_VAR 0 1
7036: PUSH
7037: FOR_TO
7038: IFFALSE 7073
// begin PrepareHuman ( false , class_apeman , skill ) ;
7040: LD_INT 0
7042: PPUSH
7043: LD_INT 12
7045: PPUSH
7046: LD_VAR 0 2
7050: PPUSH
7051: CALL_OW 380
// result := result ^ CreateHuman ;
7055: LD_ADDR_VAR 0 3
7059: PUSH
7060: LD_VAR 0 3
7064: PUSH
7065: CALL_OW 44
7069: ADD
7070: ST_TO_ADDR
// end ;
7071: GO 7037
7073: POP
7074: POP
// end ;
7075: LD_VAR 0 3
7079: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
7080: LD_INT 0
7082: PPUSH
7083: PPUSH
7084: PPUSH
// uc_nation := nation_nature ;
7085: LD_ADDR_OWVAR 21
7089: PUSH
7090: LD_INT 0
7092: ST_TO_ADDR
// for i = 1 to n do
7093: LD_ADDR_VAR 0 4
7097: PUSH
7098: DOUBLE
7099: LD_INT 1
7101: DEC
7102: ST_TO_ADDR
7103: LD_VAR 0 1
7107: PUSH
7108: FOR_TO
7109: IFFALSE 7144
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
7111: LD_INT 0
7113: PPUSH
7114: LD_INT 15
7116: PPUSH
7117: LD_VAR 0 2
7121: PPUSH
7122: CALL_OW 380
// result := result ^ CreateHuman ;
7126: LD_ADDR_VAR 0 3
7130: PUSH
7131: LD_VAR 0 3
7135: PUSH
7136: CALL_OW 44
7140: ADD
7141: ST_TO_ADDR
// end ;
7142: GO 7108
7144: POP
7145: POP
// end ;
7146: LD_VAR 0 3
7150: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
7151: LD_INT 0
7153: PPUSH
7154: PPUSH
7155: PPUSH
// for i = 1 to n do
7156: LD_ADDR_VAR 0 4
7160: PUSH
7161: DOUBLE
7162: LD_INT 1
7164: DEC
7165: ST_TO_ADDR
7166: LD_VAR 0 1
7170: PUSH
7171: FOR_TO
7172: IFFALSE 7223
// begin uc_nation := rand ( 1 , 3 ) ;
7174: LD_ADDR_OWVAR 21
7178: PUSH
7179: LD_INT 1
7181: PPUSH
7182: LD_INT 3
7184: PPUSH
7185: CALL_OW 12
7189: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
7190: LD_INT 0
7192: PPUSH
7193: LD_INT 1
7195: PPUSH
7196: LD_VAR 0 2
7200: PPUSH
7201: CALL_OW 380
// result := result ^ CreateHuman ;
7205: LD_ADDR_VAR 0 3
7209: PUSH
7210: LD_VAR 0 3
7214: PUSH
7215: CALL_OW 44
7219: ADD
7220: ST_TO_ADDR
// end ;
7221: GO 7171
7223: POP
7224: POP
// end ;
7225: LD_VAR 0 3
7229: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7230: LD_INT 0
7232: PPUSH
7233: PPUSH
7234: PPUSH
7235: PPUSH
7236: PPUSH
7237: PPUSH
7238: PPUSH
// for i = 1 to n do
7239: LD_ADDR_VAR 0 4
7243: PUSH
7244: DOUBLE
7245: LD_INT 1
7247: DEC
7248: ST_TO_ADDR
7249: LD_VAR 0 1
7253: PUSH
7254: FOR_TO
7255: IFFALSE 7619
// begin uc_nation := rand ( 1 , 3 ) ;
7257: LD_ADDR_OWVAR 21
7261: PUSH
7262: LD_INT 1
7264: PPUSH
7265: LD_INT 3
7267: PPUSH
7268: CALL_OW 12
7272: ST_TO_ADDR
// case uc_nation of 1 :
7273: LD_OWVAR 21
7277: PUSH
7278: LD_INT 1
7280: DOUBLE
7281: EQUAL
7282: IFTRUE 7286
7284: GO 7349
7286: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
7287: LD_ADDR_VAR 0 6
7291: PUSH
7292: LD_INT 1
7294: PUSH
7295: LD_INT 2
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
7302: LD_ADDR_VAR 0 7
7306: PUSH
7307: LD_INT 2
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7317: LD_ADDR_VAR 0 8
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7332: LD_ADDR_VAR 0 9
7336: PUSH
7337: LD_INT 1
7339: PUSH
7340: LD_INT 2
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: ST_TO_ADDR
// end ; 2 :
7347: GO 7484
7349: LD_INT 2
7351: DOUBLE
7352: EQUAL
7353: IFTRUE 7357
7355: GO 7420
7357: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7358: LD_ADDR_VAR 0 6
7362: PUSH
7363: LD_INT 12
7365: PUSH
7366: LD_INT 11
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7373: LD_ADDR_VAR 0 7
7377: PUSH
7378: LD_INT 23
7380: PUSH
7381: LD_INT 24
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7388: LD_ADDR_VAR 0 8
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 5
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7403: LD_ADDR_VAR 0 9
7407: PUSH
7408: LD_INT 1
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// end ; 3 :
7418: GO 7484
7420: LD_INT 3
7422: DOUBLE
7423: EQUAL
7424: IFTRUE 7428
7426: GO 7483
7428: POP
// begin chassis := [ ru_medium_wheeled ] ;
7429: LD_ADDR_VAR 0 6
7433: PUSH
7434: LD_INT 21
7436: PUSH
7437: EMPTY
7438: LIST
7439: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7440: LD_ADDR_VAR 0 7
7444: PUSH
7445: LD_INT 42
7447: PUSH
7448: LD_INT 44
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7455: LD_ADDR_VAR 0 8
7459: PUSH
7460: LD_INT 1
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7470: LD_ADDR_VAR 0 9
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: EMPTY
7479: LIST
7480: ST_TO_ADDR
// end ; end ;
7481: GO 7484
7483: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7484: LD_ADDR_OWVAR 37
7488: PUSH
7489: LD_VAR 0 6
7493: PUSH
7494: LD_INT 1
7496: PPUSH
7497: LD_VAR 0 6
7501: PPUSH
7502: CALL_OW 12
7506: ARRAY
7507: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7508: LD_ADDR_OWVAR 39
7512: PUSH
7513: LD_VAR 0 9
7517: PUSH
7518: LD_INT 1
7520: PPUSH
7521: LD_VAR 0 9
7525: PPUSH
7526: CALL_OW 12
7530: ARRAY
7531: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7532: LD_ADDR_OWVAR 38
7536: PUSH
7537: LD_VAR 0 8
7541: PUSH
7542: LD_INT 1
7544: PPUSH
7545: LD_VAR 0 8
7549: PPUSH
7550: CALL_OW 12
7554: ARRAY
7555: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7556: LD_ADDR_OWVAR 40
7560: PUSH
7561: LD_VAR 0 7
7565: PUSH
7566: LD_INT 1
7568: PPUSH
7569: LD_VAR 0 7
7573: PPUSH
7574: CALL_OW 12
7578: ARRAY
7579: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7580: LD_ADDR_OWVAR 41
7584: PUSH
7585: LD_INT 100
7587: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7588: LD_ADDR_VAR 0 3
7592: PUSH
7593: LD_VAR 0 3
7597: PPUSH
7598: LD_VAR 0 3
7602: PUSH
7603: LD_INT 1
7605: PLUS
7606: PPUSH
7607: CALL_OW 45
7611: PPUSH
7612: CALL_OW 2
7616: ST_TO_ADDR
// end ;
7617: GO 7254
7619: POP
7620: POP
// end ;
7621: LD_VAR 0 3
7625: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7626: LD_INT 0
7628: PPUSH
7629: PPUSH
7630: PPUSH
7631: PPUSH
7632: PPUSH
7633: PPUSH
7634: PPUSH
// for i = 1 to n do
7635: LD_ADDR_VAR 0 4
7639: PUSH
7640: DOUBLE
7641: LD_INT 1
7643: DEC
7644: ST_TO_ADDR
7645: LD_VAR 0 1
7649: PUSH
7650: FOR_TO
7651: IFFALSE 8039
// begin uc_nation := rand ( 1 , 3 ) ;
7653: LD_ADDR_OWVAR 21
7657: PUSH
7658: LD_INT 1
7660: PPUSH
7661: LD_INT 3
7663: PPUSH
7664: CALL_OW 12
7668: ST_TO_ADDR
// case uc_nation of 1 :
7669: LD_OWVAR 21
7673: PUSH
7674: LD_INT 1
7676: DOUBLE
7677: EQUAL
7678: IFTRUE 7682
7680: GO 7753
7682: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7683: LD_ADDR_VAR 0 6
7687: PUSH
7688: LD_INT 2
7690: PUSH
7691: LD_INT 3
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7698: LD_ADDR_VAR 0 7
7702: PUSH
7703: LD_INT 4
7705: PUSH
7706: LD_INT 5
7708: PUSH
7709: LD_INT 9
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7717: LD_ADDR_VAR 0 8
7721: PUSH
7722: LD_INT 1
7724: PUSH
7725: LD_INT 3
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7732: LD_ADDR_VAR 0 9
7736: PUSH
7737: LD_INT 1
7739: PUSH
7740: LD_INT 2
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: ST_TO_ADDR
// end ; 2 :
7751: GO 7904
7753: LD_INT 2
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7832
7761: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7762: LD_ADDR_VAR 0 6
7766: PUSH
7767: LD_INT 13
7769: PUSH
7770: LD_INT 14
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7777: LD_ADDR_VAR 0 7
7781: PUSH
7782: LD_INT 27
7784: PUSH
7785: LD_INT 26
7787: PUSH
7788: LD_INT 25
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7796: LD_ADDR_VAR 0 8
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: LD_INT 5
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7811: LD_ADDR_VAR 0 9
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: LD_INT 2
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: ST_TO_ADDR
// end ; 3 :
7830: GO 7904
7832: LD_INT 3
7834: DOUBLE
7835: EQUAL
7836: IFTRUE 7840
7838: GO 7903
7840: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7841: LD_ADDR_VAR 0 6
7845: PUSH
7846: LD_INT 22
7848: PUSH
7849: LD_INT 21
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7856: LD_ADDR_VAR 0 7
7860: PUSH
7861: LD_INT 44
7863: PUSH
7864: LD_INT 43
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7871: LD_ADDR_VAR 0 8
7875: PUSH
7876: LD_INT 1
7878: PUSH
7879: LD_INT 3
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7886: LD_ADDR_VAR 0 9
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: ST_TO_ADDR
// end ; end ;
7901: GO 7904
7903: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7904: LD_ADDR_OWVAR 37
7908: PUSH
7909: LD_VAR 0 6
7913: PUSH
7914: LD_INT 1
7916: PPUSH
7917: LD_VAR 0 6
7921: PPUSH
7922: CALL_OW 12
7926: ARRAY
7927: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7928: LD_ADDR_OWVAR 39
7932: PUSH
7933: LD_VAR 0 9
7937: PUSH
7938: LD_INT 1
7940: PPUSH
7941: LD_VAR 0 9
7945: PPUSH
7946: CALL_OW 12
7950: ARRAY
7951: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7952: LD_ADDR_OWVAR 38
7956: PUSH
7957: LD_VAR 0 8
7961: PUSH
7962: LD_INT 1
7964: PPUSH
7965: LD_VAR 0 8
7969: PPUSH
7970: CALL_OW 12
7974: ARRAY
7975: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7976: LD_ADDR_OWVAR 40
7980: PUSH
7981: LD_VAR 0 7
7985: PUSH
7986: LD_INT 1
7988: PPUSH
7989: LD_VAR 0 7
7993: PPUSH
7994: CALL_OW 12
7998: ARRAY
7999: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8000: LD_ADDR_OWVAR 41
8004: PUSH
8005: LD_INT 100
8007: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8008: LD_ADDR_VAR 0 3
8012: PUSH
8013: LD_VAR 0 3
8017: PPUSH
8018: LD_VAR 0 3
8022: PUSH
8023: LD_INT 1
8025: PLUS
8026: PPUSH
8027: CALL_OW 45
8031: PPUSH
8032: CALL_OW 2
8036: ST_TO_ADDR
// end ;
8037: GO 7650
8039: POP
8040: POP
// end ;
8041: LD_VAR 0 3
8045: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8046: LD_INT 0
8048: PPUSH
8049: PPUSH
8050: PPUSH
8051: PPUSH
8052: PPUSH
8053: PPUSH
8054: PPUSH
// for i = 1 to n do
8055: LD_ADDR_VAR 0 4
8059: PUSH
8060: DOUBLE
8061: LD_INT 1
8063: DEC
8064: ST_TO_ADDR
8065: LD_VAR 0 1
8069: PUSH
8070: FOR_TO
8071: IFFALSE 8459
// begin uc_nation := rand ( 1 , 3 ) ;
8073: LD_ADDR_OWVAR 21
8077: PUSH
8078: LD_INT 1
8080: PPUSH
8081: LD_INT 3
8083: PPUSH
8084: CALL_OW 12
8088: ST_TO_ADDR
// case uc_nation of 1 :
8089: LD_OWVAR 21
8093: PUSH
8094: LD_INT 1
8096: DOUBLE
8097: EQUAL
8098: IFTRUE 8102
8100: GO 8169
8102: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8103: LD_ADDR_VAR 0 6
8107: PUSH
8108: LD_INT 4
8110: PUSH
8111: LD_INT 5
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
8118: LD_ADDR_VAR 0 7
8122: PUSH
8123: LD_INT 6
8125: PUSH
8126: LD_INT 7
8128: PUSH
8129: LD_INT 9
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: LIST
8136: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8137: LD_ADDR_VAR 0 8
8141: PUSH
8142: LD_INT 1
8144: PUSH
8145: LD_INT 3
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8152: LD_ADDR_VAR 0 9
8156: PUSH
8157: LD_INT 1
8159: PUSH
8160: LD_INT 3
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: ST_TO_ADDR
// end ; 2 :
8167: GO 8324
8169: LD_INT 2
8171: DOUBLE
8172: EQUAL
8173: IFTRUE 8177
8175: GO 8252
8177: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
8178: LD_ADDR_VAR 0 6
8182: PUSH
8183: LD_INT 13
8185: PUSH
8186: LD_INT 14
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8193: LD_ADDR_VAR 0 7
8197: PUSH
8198: LD_INT 27
8200: PUSH
8201: LD_INT 26
8203: PUSH
8204: LD_INT 28
8206: PUSH
8207: LD_INT 29
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8216: LD_ADDR_VAR 0 8
8220: PUSH
8221: LD_INT 1
8223: PUSH
8224: LD_INT 5
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8231: LD_ADDR_VAR 0 9
8235: PUSH
8236: LD_INT 1
8238: PUSH
8239: LD_INT 2
8241: PUSH
8242: LD_INT 3
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: ST_TO_ADDR
// end ; 3 :
8250: GO 8324
8252: LD_INT 3
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8323
8260: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8261: LD_ADDR_VAR 0 6
8265: PUSH
8266: LD_INT 23
8268: PUSH
8269: LD_INT 24
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
8276: LD_ADDR_VAR 0 7
8280: PUSH
8281: LD_INT 46
8283: PUSH
8284: LD_INT 45
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8291: LD_ADDR_VAR 0 8
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: LD_INT 3
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8306: LD_ADDR_VAR 0 9
8310: PUSH
8311: LD_INT 1
8313: PUSH
8314: LD_INT 3
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: ST_TO_ADDR
// end ; end ;
8321: GO 8324
8323: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8324: LD_ADDR_OWVAR 37
8328: PUSH
8329: LD_VAR 0 6
8333: PUSH
8334: LD_INT 1
8336: PPUSH
8337: LD_VAR 0 6
8341: PPUSH
8342: CALL_OW 12
8346: ARRAY
8347: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8348: LD_ADDR_OWVAR 39
8352: PUSH
8353: LD_VAR 0 9
8357: PUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_VAR 0 9
8365: PPUSH
8366: CALL_OW 12
8370: ARRAY
8371: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8372: LD_ADDR_OWVAR 38
8376: PUSH
8377: LD_VAR 0 8
8381: PUSH
8382: LD_INT 1
8384: PPUSH
8385: LD_VAR 0 8
8389: PPUSH
8390: CALL_OW 12
8394: ARRAY
8395: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8396: LD_ADDR_OWVAR 40
8400: PUSH
8401: LD_VAR 0 7
8405: PUSH
8406: LD_INT 1
8408: PPUSH
8409: LD_VAR 0 7
8413: PPUSH
8414: CALL_OW 12
8418: ARRAY
8419: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8420: LD_ADDR_OWVAR 41
8424: PUSH
8425: LD_INT 100
8427: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8428: LD_ADDR_VAR 0 3
8432: PUSH
8433: LD_VAR 0 3
8437: PPUSH
8438: LD_VAR 0 3
8442: PUSH
8443: LD_INT 1
8445: PLUS
8446: PPUSH
8447: CALL_OW 45
8451: PPUSH
8452: CALL_OW 2
8456: ST_TO_ADDR
// end ;
8457: GO 8070
8459: POP
8460: POP
// end ;
8461: LD_VAR 0 3
8465: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8466: LD_INT 0
8468: PPUSH
8469: PPUSH
// for i = 1 to n do
8470: LD_ADDR_VAR 0 4
8474: PUSH
8475: DOUBLE
8476: LD_INT 1
8478: DEC
8479: ST_TO_ADDR
8480: LD_VAR 0 1
8484: PUSH
8485: FOR_TO
8486: IFFALSE 8560
// begin uc_nation := rand ( 1 , 3 ) ;
8488: LD_ADDR_OWVAR 21
8492: PUSH
8493: LD_INT 1
8495: PPUSH
8496: LD_INT 3
8498: PPUSH
8499: CALL_OW 12
8503: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8504: LD_INT 0
8506: PPUSH
8507: LD_INT 8
8509: PUSH
8510: LD_INT 9
8512: PUSH
8513: LD_INT 1
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_INT 3
8526: PPUSH
8527: CALL_OW 12
8531: ARRAY
8532: PPUSH
8533: LD_VAR 0 2
8537: PPUSH
8538: CALL_OW 380
// result := result ^ CreateHuman ;
8542: LD_ADDR_VAR 0 3
8546: PUSH
8547: LD_VAR 0 3
8551: PUSH
8552: CALL_OW 44
8556: ADD
8557: ST_TO_ADDR
// end ;
8558: GO 8485
8560: POP
8561: POP
// end ;
8562: LD_VAR 0 3
8566: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8567: LD_INT 0
8569: PPUSH
8570: PPUSH
8571: PPUSH
8572: PPUSH
8573: PPUSH
8574: PPUSH
8575: PPUSH
// for i = 1 to n do
8576: LD_ADDR_VAR 0 4
8580: PUSH
8581: DOUBLE
8582: LD_INT 1
8584: DEC
8585: ST_TO_ADDR
8586: LD_VAR 0 1
8590: PUSH
8591: FOR_TO
8592: IFFALSE 8988
// begin uc_nation := rand ( 1 , 3 ) ;
8594: LD_ADDR_OWVAR 21
8598: PUSH
8599: LD_INT 1
8601: PPUSH
8602: LD_INT 3
8604: PPUSH
8605: CALL_OW 12
8609: ST_TO_ADDR
// case uc_nation of 1 :
8610: LD_OWVAR 21
8614: PUSH
8615: LD_INT 1
8617: DOUBLE
8618: EQUAL
8619: IFTRUE 8623
8621: GO 8696
8623: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8624: LD_ADDR_VAR 0 6
8628: PUSH
8629: LD_INT 4
8631: PUSH
8632: LD_INT 5
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8639: LD_ADDR_VAR 0 7
8643: PUSH
8644: LD_INT 6
8646: PUSH
8647: LD_INT 7
8649: PUSH
8650: LD_INT 10
8652: PUSH
8653: LD_EXP 17
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8664: LD_ADDR_VAR 0 8
8668: PUSH
8669: LD_INT 1
8671: PUSH
8672: LD_INT 3
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8679: LD_ADDR_VAR 0 9
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: LD_INT 3
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: ST_TO_ADDR
// end ; 2 :
8694: GO 8853
8696: LD_INT 2
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8777
8704: POP
// begin chassis := [ ar_half_tracked ] ;
8705: LD_ADDR_VAR 0 6
8709: PUSH
8710: LD_INT 14
8712: PUSH
8713: EMPTY
8714: LIST
8715: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8716: LD_ADDR_VAR 0 7
8720: PUSH
8721: LD_EXP 18
8725: PUSH
8726: LD_INT 26
8728: PUSH
8729: LD_INT 28
8731: PUSH
8732: LD_INT 29
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8741: LD_ADDR_VAR 0 8
8745: PUSH
8746: LD_INT 1
8748: PUSH
8749: LD_INT 5
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8756: LD_ADDR_VAR 0 9
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: LD_INT 2
8766: PUSH
8767: LD_INT 3
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: ST_TO_ADDR
// end ; 3 :
8775: GO 8853
8777: LD_INT 3
8779: DOUBLE
8780: EQUAL
8781: IFTRUE 8785
8783: GO 8852
8785: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8786: LD_ADDR_VAR 0 6
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 24
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8801: LD_ADDR_VAR 0 7
8805: PUSH
8806: LD_INT 46
8808: PUSH
8809: LD_INT 45
8811: PUSH
8812: LD_INT 49
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8820: LD_ADDR_VAR 0 8
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8835: LD_ADDR_VAR 0 9
8839: PUSH
8840: LD_INT 1
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: ST_TO_ADDR
// end ; end ;
8850: GO 8853
8852: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8853: LD_ADDR_OWVAR 37
8857: PUSH
8858: LD_VAR 0 6
8862: PUSH
8863: LD_INT 1
8865: PPUSH
8866: LD_VAR 0 6
8870: PPUSH
8871: CALL_OW 12
8875: ARRAY
8876: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8877: LD_ADDR_OWVAR 39
8881: PUSH
8882: LD_VAR 0 9
8886: PUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_VAR 0 9
8894: PPUSH
8895: CALL_OW 12
8899: ARRAY
8900: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8901: LD_ADDR_OWVAR 38
8905: PUSH
8906: LD_VAR 0 8
8910: PUSH
8911: LD_INT 1
8913: PPUSH
8914: LD_VAR 0 8
8918: PPUSH
8919: CALL_OW 12
8923: ARRAY
8924: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8925: LD_ADDR_OWVAR 40
8929: PUSH
8930: LD_VAR 0 7
8934: PUSH
8935: LD_INT 1
8937: PPUSH
8938: LD_VAR 0 7
8942: PPUSH
8943: CALL_OW 12
8947: ARRAY
8948: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8949: LD_ADDR_OWVAR 41
8953: PUSH
8954: LD_INT 100
8956: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8957: LD_ADDR_VAR 0 3
8961: PUSH
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_VAR 0 3
8971: PUSH
8972: LD_INT 1
8974: PLUS
8975: PPUSH
8976: CALL_OW 45
8980: PPUSH
8981: CALL_OW 2
8985: ST_TO_ADDR
// end ;
8986: GO 8591
8988: POP
8989: POP
// end ; end_of_file
8990: LD_VAR 0 3
8994: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8995: LD_INT 22
8997: PUSH
8998: LD_INT 7
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PPUSH
9005: CALL_OW 69
9009: IFFALSE 9515
9011: GO 9013
9013: DISABLE
9014: LD_INT 0
9016: PPUSH
9017: PPUSH
9018: PPUSH
// begin enable ;
9019: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
9020: LD_ADDR_VAR 0 3
9024: PUSH
9025: LD_INT 22
9027: PUSH
9028: LD_INT 7
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PPUSH
9035: CALL_OW 69
9039: ST_TO_ADDR
// for i in tmp do
9040: LD_ADDR_VAR 0 1
9044: PUSH
9045: LD_VAR 0 3
9049: PUSH
9050: FOR_IN
9051: IFFALSE 9513
// begin case GetType ( i ) of unit_human :
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 247
9062: PUSH
9063: LD_INT 1
9065: DOUBLE
9066: EQUAL
9067: IFTRUE 9071
9069: GO 9270
9071: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
9072: LD_VAR 0 1
9076: PPUSH
9077: CALL_OW 256
9081: PUSH
9082: LD_INT 250
9084: LESS
9085: PUSH
9086: LD_INT 5
9088: PPUSH
9089: LD_INT 7
9091: PPUSH
9092: CALL_OW 321
9096: PUSH
9097: LD_INT 2
9099: NONEQUAL
9100: AND
9101: IFFALSE 9105
// continue ;
9103: GO 9050
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 257
9114: PUSH
9115: LD_INT 12
9117: PUSH
9118: LD_INT 15
9120: PUSH
9121: LD_INT 16
9123: PUSH
9124: LD_INT 17
9126: PUSH
9127: LD_INT 1
9129: PUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: LD_INT 8
9141: PUSH
9142: LD_INT 9
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: IN
9157: IFFALSE 9195
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9159: LD_VAR 0 1
9163: PPUSH
9164: LD_INT 22
9166: PUSH
9167: LD_OWVAR 2
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PPUSH
9176: CALL_OW 69
9180: PPUSH
9181: LD_VAR 0 1
9185: PPUSH
9186: CALL_OW 74
9190: PPUSH
9191: CALL_OW 115
// if GetClass ( i ) = 3 then
9195: LD_VAR 0 1
9199: PPUSH
9200: CALL_OW 257
9204: PUSH
9205: LD_INT 3
9207: EQUAL
9208: IFFALSE 9268
// if IsInUnit ( i ) then
9210: LD_VAR 0 1
9214: PPUSH
9215: CALL_OW 310
9219: IFFALSE 9259
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
9221: LD_VAR 0 1
9225: PPUSH
9226: LD_INT 22
9228: PUSH
9229: LD_OWVAR 2
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 69
9242: PPUSH
9243: LD_VAR 0 1
9247: PPUSH
9248: CALL_OW 74
9252: PPUSH
9253: CALL_OW 115
9257: GO 9268
// ComEspace ( i ) ;
9259: LD_VAR 0 1
9263: PPUSH
9264: CALL 2259 0 1
// end ; unit_vehicle :
9268: GO 9511
9270: LD_INT 2
9272: DOUBLE
9273: EQUAL
9274: IFTRUE 9278
9276: GO 9510
9278: POP
// begin if GetLives ( i ) > 250 then
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 256
9288: PUSH
9289: LD_INT 250
9291: GREATER
9292: IFFALSE 9508
// begin if GetWeapon ( i ) = us_artillery then
9294: LD_VAR 0 1
9298: PPUSH
9299: CALL_OW 264
9303: PUSH
9304: LD_EXP 17
9308: EQUAL
9309: IFFALSE 9377
// begin if IsInArea ( i , zoneOut ) then
9311: LD_VAR 0 1
9315: PPUSH
9316: LD_INT 4
9318: PPUSH
9319: CALL_OW 308
9323: IFFALSE 9339
// ComMoveToArea ( i , zoneBorder ) else
9325: LD_VAR 0 1
9329: PPUSH
9330: LD_INT 9
9332: PPUSH
9333: CALL_OW 113
9337: GO 9375
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_INT 22
9346: PUSH
9347: LD_OWVAR 2
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: CALL_OW 69
9360: PPUSH
9361: LD_VAR 0 1
9365: PPUSH
9366: CALL_OW 74
9370: PPUSH
9371: CALL_OW 115
// end else
9375: GO 9508
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9377: LD_VAR 0 1
9381: PPUSH
9382: CALL_OW 264
9386: PUSH
9387: LD_INT 11
9389: PUSH
9390: LD_INT 30
9392: PUSH
9393: LD_EXP 14
9397: PUSH
9398: LD_INT 49
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: IN
9407: IFFALSE 9437
// begin if IsInArea ( i , zoneOut ) then
9409: LD_VAR 0 1
9413: PPUSH
9414: LD_INT 4
9416: PPUSH
9417: CALL_OW 308
9421: IFFALSE 9435
// ComSpecMove ( i , specPos ) ;
9423: LD_VAR 0 1
9427: PPUSH
9428: LD_INT 8
9430: PPUSH
9431: CALL 2305 0 2
// end else
9435: GO 9508
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9437: LD_VAR 0 1
9441: PPUSH
9442: CALL_OW 264
9446: PUSH
9447: LD_EXP 18
9451: PUSH
9452: LD_INT 29
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: IN
9459: IFFALSE 9472
// ComSpecAttack ( i ) else
9461: LD_VAR 0 1
9465: PPUSH
9466: CALL 2733 0 1
9470: GO 9508
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9472: LD_VAR 0 1
9476: PPUSH
9477: LD_INT 22
9479: PUSH
9480: LD_OWVAR 2
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PPUSH
9489: CALL_OW 69
9493: PPUSH
9494: LD_VAR 0 1
9498: PPUSH
9499: CALL_OW 74
9503: PPUSH
9504: CALL_OW 115
// end ; end ; end ;
9508: GO 9511
9510: POP
// end ;
9511: GO 9050
9513: POP
9514: POP
// end ; end_of_file
9515: PPOPN 3
9517: END
// export function InitDisplay ; begin
9518: LD_INT 0
9520: PPUSH
// while true do
9521: LD_INT 1
9523: IFFALSE 9610
// begin if waveNumber < 100 then
9525: LD_EXP 5
9529: PUSH
9530: LD_INT 100
9532: LESS
9533: IFFALSE 9584
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9535: LD_ADDR_OWVAR 47
9539: PUSH
9540: LD_STRING #Tick
9542: PUSH
9543: LD_OWVAR 1
9547: PUSH
9548: LD_STRING #Points
9550: PUSH
9551: LD_EXP 2
9555: PUSH
9556: LD_STRING #Attack
9558: PUSH
9559: LD_EXP 4
9563: PUSH
9564: LD_STRING #Wave
9566: PUSH
9567: LD_EXP 5
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: ST_TO_ADDR
9582: GO 9601
// Display_Strings := [ #Win , points ] ;
9584: LD_ADDR_OWVAR 47
9588: PUSH
9589: LD_STRING #Win
9591: PUSH
9592: LD_EXP 2
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9601: LD_INT 35
9603: PPUSH
9604: CALL_OW 67
// end ;
9608: GO 9521
// end ; end_of_file
9610: LD_VAR 0 1
9614: RET
// export function InitBonus ; var i , chance ; begin
9615: LD_INT 0
9617: PPUSH
9618: PPUSH
9619: PPUSH
// chance := rand ( 1 , 99 ) ;
9620: LD_ADDR_VAR 0 3
9624: PUSH
9625: LD_INT 1
9627: PPUSH
9628: LD_INT 99
9630: PPUSH
9631: CALL_OW 12
9635: ST_TO_ADDR
// case chance of 1 .. 10 :
9636: LD_VAR 0 3
9640: PUSH
9641: LD_INT 1
9643: DOUBLE
9644: GREATEREQUAL
9645: IFFALSE 9653
9647: LD_INT 10
9649: DOUBLE
9650: LESSEQUAL
9651: IFTRUE 9655
9653: GO 9666
9655: POP
// i := 5 ; 11 .. 25 :
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_INT 5
9663: ST_TO_ADDR
9664: GO 9767
9666: LD_INT 11
9668: DOUBLE
9669: GREATEREQUAL
9670: IFFALSE 9678
9672: LD_INT 25
9674: DOUBLE
9675: LESSEQUAL
9676: IFTRUE 9680
9678: GO 9691
9680: POP
// i := 3 ; 26 .. 40 :
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: LD_INT 3
9688: ST_TO_ADDR
9689: GO 9767
9691: LD_INT 26
9693: DOUBLE
9694: GREATEREQUAL
9695: IFFALSE 9703
9697: LD_INT 40
9699: DOUBLE
9700: LESSEQUAL
9701: IFTRUE 9705
9703: GO 9716
9705: POP
// i := 2 ; 41 .. 60 :
9706: LD_ADDR_VAR 0 2
9710: PUSH
9711: LD_INT 2
9713: ST_TO_ADDR
9714: GO 9767
9716: LD_INT 41
9718: DOUBLE
9719: GREATEREQUAL
9720: IFFALSE 9728
9722: LD_INT 60
9724: DOUBLE
9725: LESSEQUAL
9726: IFTRUE 9730
9728: GO 9741
9730: POP
// i := 4 ; 61 .. 99 :
9731: LD_ADDR_VAR 0 2
9735: PUSH
9736: LD_INT 4
9738: ST_TO_ADDR
9739: GO 9767
9741: LD_INT 61
9743: DOUBLE
9744: GREATEREQUAL
9745: IFFALSE 9753
9747: LD_INT 99
9749: DOUBLE
9750: LESSEQUAL
9751: IFTRUE 9755
9753: GO 9766
9755: POP
// i := 1 ; end ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_INT 1
9763: ST_TO_ADDR
9764: GO 9767
9766: POP
// case i of 1 :
9767: LD_VAR 0 2
9771: PUSH
9772: LD_INT 1
9774: DOUBLE
9775: EQUAL
9776: IFTRUE 9780
9778: GO 9869
9780: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9781: LD_INT 22
9783: PUSH
9784: LD_OWVAR 2
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 2
9795: PUSH
9796: LD_INT 25
9798: PUSH
9799: LD_INT 12
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 25
9808: PUSH
9809: LD_INT 16
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 25
9818: PUSH
9819: LD_INT 15
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 25
9828: PUSH
9829: LD_INT 17
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: PUSH
9852: LD_INT 10
9854: GREATEREQUAL
9855: IFFALSE 9863
// BonusIV else
9857: CALL 10442 0 0
9861: GO 9867
// BonusI ;
9863: CALL 9947 0 0
// end ; 2 :
9867: GO 9942
9869: LD_INT 2
9871: DOUBLE
9872: EQUAL
9873: IFTRUE 9877
9875: GO 9884
9877: POP
// begin BonusII ;
9878: CALL 10120 0 0
// end ; 3 :
9882: GO 9942
9884: LD_INT 3
9886: DOUBLE
9887: EQUAL
9888: IFTRUE 9892
9890: GO 9899
9892: POP
// begin BonusIII ;
9893: CALL 10268 0 0
// end ; 4 :
9897: GO 9942
9899: LD_INT 4
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9907
9905: GO 9914
9907: POP
// begin BonusIV ;
9908: CALL 10442 0 0
// end ; 5 :
9912: GO 9942
9914: LD_INT 5
9916: DOUBLE
9917: EQUAL
9918: IFTRUE 9922
9920: GO 9941
9922: POP
// begin if graveyard then
9923: LD_EXP 8
9927: IFFALSE 9935
// BonusV else
9929: CALL 10860 0 0
9933: GO 9939
// BonusIII ;
9935: CALL 10268 0 0
// end ; end ;
9939: GO 9942
9941: POP
// end ;
9942: LD_VAR 0 1
9946: RET
// export function BonusI ; var i ; begin
9947: LD_INT 0
9949: PPUSH
9950: PPUSH
// case Query ( AddGift1 ) of 1 :
9951: LD_STRING AddGift1
9953: PPUSH
9954: CALL_OW 97
9958: PUSH
9959: LD_INT 1
9961: DOUBLE
9962: EQUAL
9963: IFTRUE 9967
9965: GO 10046
9967: POP
// begin for i = 1 to 3 do
9968: LD_ADDR_VAR 0 2
9972: PUSH
9973: DOUBLE
9974: LD_INT 1
9976: DEC
9977: ST_TO_ADDR
9978: LD_INT 3
9980: PUSH
9981: FOR_TO
9982: IFFALSE 10042
// begin uc_side := your_side ;
9984: LD_ADDR_OWVAR 20
9988: PUSH
9989: LD_OWVAR 2
9993: ST_TO_ADDR
// uc_nation := 0 ;
9994: LD_ADDR_OWVAR 21
9998: PUSH
9999: LD_INT 0
10001: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10002: LD_INT 0
10004: PPUSH
10005: LD_INT 12
10007: PPUSH
10008: LD_INT 1
10010: PPUSH
10011: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
10015: CALL_OW 44
10019: PPUSH
10020: LD_EXP 9
10024: PPUSH
10025: LD_EXP 10
10029: PPUSH
10030: LD_INT 15
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 50
// end ;
10040: GO 9981
10042: POP
10043: POP
// end ; 2 :
10044: GO 10115
10046: LD_INT 2
10048: DOUBLE
10049: EQUAL
10050: IFTRUE 10054
10052: GO 10096
10054: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10055: LD_EXP 11
10059: PPUSH
10060: CALL_OW 274
10064: PPUSH
10065: LD_INT 1
10067: PPUSH
10068: LD_EXP 11
10072: PPUSH
10073: CALL_OW 274
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: CALL_OW 275
10085: PUSH
10086: LD_INT 100
10088: PLUS
10089: PPUSH
10090: CALL_OW 277
// end ; 3 :
10094: GO 10115
10096: LD_INT 3
10098: DOUBLE
10099: EQUAL
10100: IFTRUE 10104
10102: GO 10114
10104: POP
// begin SetTeamExp ( 2 ) ;
10105: LD_INT 2
10107: PPUSH
10108: CALL 1266 0 1
// end ; end ;
10112: GO 10115
10114: POP
// end ;
10115: LD_VAR 0 1
10119: RET
// export function BonusII ; var i ; begin
10120: LD_INT 0
10122: PPUSH
10123: PPUSH
// case Query ( AddGift2 ) of 1 :
10124: LD_STRING AddGift2
10126: PPUSH
10127: CALL_OW 97
10131: PUSH
10132: LD_INT 1
10134: DOUBLE
10135: EQUAL
10136: IFTRUE 10140
10138: GO 10182
10140: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10141: LD_EXP 11
10145: PPUSH
10146: CALL_OW 274
10150: PPUSH
10151: LD_INT 1
10153: PPUSH
10154: LD_EXP 11
10158: PPUSH
10159: CALL_OW 274
10163: PPUSH
10164: LD_INT 1
10166: PPUSH
10167: CALL_OW 275
10171: PUSH
10172: LD_INT 500
10174: PLUS
10175: PPUSH
10176: CALL_OW 277
// end ; 2 :
10180: GO 10263
10182: LD_INT 2
10184: DOUBLE
10185: EQUAL
10186: IFTRUE 10190
10188: GO 10200
10190: POP
// begin SetTeamExp ( 3 ) ;
10191: LD_INT 3
10193: PPUSH
10194: CALL 1266 0 1
// end ; 3 :
10198: GO 10263
10200: LD_INT 3
10202: DOUBLE
10203: EQUAL
10204: IFTRUE 10208
10206: GO 10262
10208: POP
// begin uc_side = your_side ;
10209: LD_ADDR_OWVAR 20
10213: PUSH
10214: LD_OWVAR 2
10218: ST_TO_ADDR
// uc_nation = nation_russian ;
10219: LD_ADDR_OWVAR 21
10223: PUSH
10224: LD_INT 3
10226: ST_TO_ADDR
// vc_chassis = 25 ;
10227: LD_ADDR_OWVAR 37
10231: PUSH
10232: LD_INT 25
10234: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10235: CALL_OW 45
10239: PPUSH
10240: LD_EXP 9
10244: PPUSH
10245: LD_EXP 10
10249: PPUSH
10250: LD_INT 15
10252: PPUSH
10253: LD_INT 1
10255: PPUSH
10256: CALL_OW 50
// end ; end ;
10260: GO 10263
10262: POP
// end ;
10263: LD_VAR 0 1
10267: RET
// export function BonusIII ; var i ; begin
10268: LD_INT 0
10270: PPUSH
10271: PPUSH
// case Query ( AddGift3 ) of 1 :
10272: LD_STRING AddGift3
10274: PPUSH
10275: CALL_OW 97
10279: PUSH
10280: LD_INT 1
10282: DOUBLE
10283: EQUAL
10284: IFTRUE 10288
10286: GO 10330
10288: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
10289: LD_EXP 11
10293: PPUSH
10294: CALL_OW 274
10298: PPUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_EXP 11
10306: PPUSH
10307: CALL_OW 274
10311: PPUSH
10312: LD_INT 1
10314: PPUSH
10315: CALL_OW 275
10319: PUSH
10320: LD_INT 1000
10322: PLUS
10323: PPUSH
10324: CALL_OW 277
// end ; 2 :
10328: GO 10437
10330: LD_INT 2
10332: DOUBLE
10333: EQUAL
10334: IFTRUE 10338
10336: GO 10350
10338: POP
// begin PrepareGuards ( waveNumber ) ;
10339: LD_EXP 5
10343: PPUSH
10344: CALL 1412 0 1
// end ; 3 :
10348: GO 10437
10350: LD_INT 3
10352: DOUBLE
10353: EQUAL
10354: IFTRUE 10358
10356: GO 10436
10358: POP
// begin uc_side = your_side ;
10359: LD_ADDR_OWVAR 20
10363: PUSH
10364: LD_OWVAR 2
10368: ST_TO_ADDR
// uc_nation = nation_american ;
10369: LD_ADDR_OWVAR 21
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
// vc_chassis = us_morphling ;
10377: LD_ADDR_OWVAR 37
10381: PUSH
10382: LD_INT 5
10384: ST_TO_ADDR
// vc_engine := engine_siberite ;
10385: LD_ADDR_OWVAR 39
10389: PUSH
10390: LD_INT 3
10392: ST_TO_ADDR
// vc_control := control_computer ;
10393: LD_ADDR_OWVAR 38
10397: PUSH
10398: LD_INT 3
10400: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10401: LD_ADDR_OWVAR 40
10405: PUSH
10406: LD_INT 8
10408: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10409: CALL_OW 45
10413: PPUSH
10414: LD_EXP 9
10418: PPUSH
10419: LD_EXP 10
10423: PPUSH
10424: LD_INT 15
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 50
// end ; end ;
10434: GO 10437
10436: POP
// end ;
10437: LD_VAR 0 1
10441: RET
// export function BonusIV ; var i ; begin
10442: LD_INT 0
10444: PPUSH
10445: PPUSH
// case Query ( AddGift4 ) of 1 :
10446: LD_STRING AddGift4
10448: PPUSH
10449: CALL_OW 97
10453: PUSH
10454: LD_INT 1
10456: DOUBLE
10457: EQUAL
10458: IFTRUE 10462
10460: GO 10786
10462: POP
// begin i := rand ( 1 , 3 ) ;
10463: LD_ADDR_VAR 0 2
10467: PUSH
10468: LD_INT 1
10470: PPUSH
10471: LD_INT 3
10473: PPUSH
10474: CALL_OW 12
10478: ST_TO_ADDR
// uc_side := your_side ;
10479: LD_ADDR_OWVAR 20
10483: PUSH
10484: LD_OWVAR 2
10488: ST_TO_ADDR
// case i of 1 :
10489: LD_VAR 0 2
10493: PUSH
10494: LD_INT 1
10496: DOUBLE
10497: EQUAL
10498: IFTRUE 10502
10500: GO 10589
10502: POP
// begin uc_nation := nation_arabian ;
10503: LD_ADDR_OWVAR 21
10507: PUSH
10508: LD_INT 2
10510: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10511: LD_ADDR_OWVAR 37
10515: PUSH
10516: LD_INT 14
10518: ST_TO_ADDR
// vc_engine := engine_combustion ;
10519: LD_ADDR_OWVAR 39
10523: PUSH
10524: LD_INT 1
10526: ST_TO_ADDR
// vc_control := control_manual ;
10527: LD_ADDR_OWVAR 38
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10535: LD_ADDR_OWVAR 40
10539: PUSH
10540: LD_INT 27
10542: PUSH
10543: LD_INT 28
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: LD_INT 1
10552: PPUSH
10553: LD_INT 2
10555: PPUSH
10556: CALL_OW 12
10560: ARRAY
10561: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10562: CALL_OW 45
10566: PPUSH
10567: LD_EXP 9
10571: PPUSH
10572: LD_EXP 10
10576: PPUSH
10577: LD_INT 15
10579: PPUSH
10580: LD_INT 1
10582: PPUSH
10583: CALL_OW 50
// end ; 2 :
10587: GO 10784
10589: LD_INT 2
10591: DOUBLE
10592: EQUAL
10593: IFTRUE 10597
10595: GO 10688
10597: POP
// begin uc_nation := nation_american ;
10598: LD_ADDR_OWVAR 21
10602: PUSH
10603: LD_INT 1
10605: ST_TO_ADDR
// vc_chassis := us_morphling ;
10606: LD_ADDR_OWVAR 37
10610: PUSH
10611: LD_INT 5
10613: ST_TO_ADDR
// vc_engine := engine_siberite ;
10614: LD_ADDR_OWVAR 39
10618: PUSH
10619: LD_INT 3
10621: ST_TO_ADDR
// vc_control := control_computer ;
10622: LD_ADDR_OWVAR 38
10626: PUSH
10627: LD_INT 3
10629: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10630: LD_ADDR_OWVAR 40
10634: PUSH
10635: LD_INT 12
10637: PUSH
10638: LD_INT 10
10640: PUSH
10641: LD_INT 7
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 1
10651: PPUSH
10652: LD_INT 3
10654: PPUSH
10655: CALL_OW 12
10659: ARRAY
10660: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10661: CALL_OW 45
10665: PPUSH
10666: LD_EXP 9
10670: PPUSH
10671: LD_EXP 10
10675: PPUSH
10676: LD_INT 15
10678: PPUSH
10679: LD_INT 1
10681: PPUSH
10682: CALL_OW 50
// end ; 3 :
10686: GO 10784
10688: LD_INT 3
10690: DOUBLE
10691: EQUAL
10692: IFTRUE 10696
10694: GO 10783
10696: POP
// begin uc_nation := nation_russian ;
10697: LD_ADDR_OWVAR 21
10701: PUSH
10702: LD_INT 3
10704: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10705: LD_ADDR_OWVAR 37
10709: PUSH
10710: LD_INT 22
10712: ST_TO_ADDR
// vc_engine := engine_combustion ;
10713: LD_ADDR_OWVAR 39
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// vc_control := control_manual ;
10721: LD_ADDR_OWVAR 38
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10729: LD_ADDR_OWVAR 40
10733: PUSH
10734: LD_INT 45
10736: PUSH
10737: LD_INT 44
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 1
10746: PPUSH
10747: LD_INT 2
10749: PPUSH
10750: CALL_OW 12
10754: ARRAY
10755: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10756: CALL_OW 45
10760: PPUSH
10761: LD_EXP 9
10765: PPUSH
10766: LD_EXP 10
10770: PPUSH
10771: LD_INT 15
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 50
// end ; end ;
10781: GO 10784
10783: POP
// end ; 2 :
10784: GO 10855
10786: LD_INT 2
10788: DOUBLE
10789: EQUAL
10790: IFTRUE 10794
10792: GO 10836
10794: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10795: LD_EXP 11
10799: PPUSH
10800: CALL_OW 274
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: LD_EXP 11
10812: PPUSH
10813: CALL_OW 274
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 275
10825: PUSH
10826: LD_INT 100
10828: PLUS
10829: PPUSH
10830: CALL_OW 277
// end ; 3 :
10834: GO 10855
10836: LD_INT 3
10838: DOUBLE
10839: EQUAL
10840: IFTRUE 10844
10842: GO 10854
10844: POP
// begin SetTeamExp ( 2 ) ;
10845: LD_INT 2
10847: PPUSH
10848: CALL 1266 0 1
// end ; end ;
10852: GO 10855
10854: POP
// end ;
10855: LD_VAR 0 1
10859: RET
// export function BonusV ; var i , j ; begin
10860: LD_INT 0
10862: PPUSH
10863: PPUSH
10864: PPUSH
// case Query ( AddGift5 ) of 1 :
10865: LD_STRING AddGift5
10867: PPUSH
10868: CALL_OW 97
10872: PUSH
10873: LD_INT 1
10875: DOUBLE
10876: EQUAL
10877: IFTRUE 10881
10879: GO 11225
10881: POP
// begin for j = 1 to 3 do
10882: LD_ADDR_VAR 0 3
10886: PUSH
10887: DOUBLE
10888: LD_INT 1
10890: DEC
10891: ST_TO_ADDR
10892: LD_INT 3
10894: PUSH
10895: FOR_TO
10896: IFFALSE 11221
// begin i := rand ( 1 , 3 ) ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_INT 1
10905: PPUSH
10906: LD_INT 3
10908: PPUSH
10909: CALL_OW 12
10913: ST_TO_ADDR
// uc_side := your_side ;
10914: LD_ADDR_OWVAR 20
10918: PUSH
10919: LD_OWVAR 2
10923: ST_TO_ADDR
// case i of 1 :
10924: LD_VAR 0 2
10928: PUSH
10929: LD_INT 1
10931: DOUBLE
10932: EQUAL
10933: IFTRUE 10937
10935: GO 11024
10937: POP
// begin uc_nation := nation_arabian ;
10938: LD_ADDR_OWVAR 21
10942: PUSH
10943: LD_INT 2
10945: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10946: LD_ADDR_OWVAR 37
10950: PUSH
10951: LD_INT 14
10953: ST_TO_ADDR
// vc_engine := engine_combustion ;
10954: LD_ADDR_OWVAR 39
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
// vc_control := control_manual ;
10962: LD_ADDR_OWVAR 38
10966: PUSH
10967: LD_INT 1
10969: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10970: LD_ADDR_OWVAR 40
10974: PUSH
10975: LD_INT 27
10977: PUSH
10978: LD_INT 28
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 1
10987: PPUSH
10988: LD_INT 2
10990: PPUSH
10991: CALL_OW 12
10995: ARRAY
10996: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10997: CALL_OW 45
11001: PPUSH
11002: LD_EXP 9
11006: PPUSH
11007: LD_EXP 10
11011: PPUSH
11012: LD_INT 15
11014: PPUSH
11015: LD_INT 1
11017: PPUSH
11018: CALL_OW 50
// end ; 2 :
11022: GO 11219
11024: LD_INT 2
11026: DOUBLE
11027: EQUAL
11028: IFTRUE 11032
11030: GO 11123
11032: POP
// begin uc_nation := nation_american ;
11033: LD_ADDR_OWVAR 21
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// vc_chassis := us_morphling ;
11041: LD_ADDR_OWVAR 37
11045: PUSH
11046: LD_INT 5
11048: ST_TO_ADDR
// vc_engine := engine_siberite ;
11049: LD_ADDR_OWVAR 39
11053: PUSH
11054: LD_INT 3
11056: ST_TO_ADDR
// vc_control := control_computer ;
11057: LD_ADDR_OWVAR 38
11061: PUSH
11062: LD_INT 3
11064: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
11065: LD_ADDR_OWVAR 40
11069: PUSH
11070: LD_INT 12
11072: PUSH
11073: LD_INT 11
11075: PUSH
11076: LD_INT 7
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 1
11086: PPUSH
11087: LD_INT 3
11089: PPUSH
11090: CALL_OW 12
11094: ARRAY
11095: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11096: CALL_OW 45
11100: PPUSH
11101: LD_EXP 9
11105: PPUSH
11106: LD_EXP 10
11110: PPUSH
11111: LD_INT 15
11113: PPUSH
11114: LD_INT 1
11116: PPUSH
11117: CALL_OW 50
// end ; 3 :
11121: GO 11219
11123: LD_INT 3
11125: DOUBLE
11126: EQUAL
11127: IFTRUE 11131
11129: GO 11218
11131: POP
// begin uc_nation := nation_russian ;
11132: LD_ADDR_OWVAR 21
11136: PUSH
11137: LD_INT 3
11139: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
11140: LD_ADDR_OWVAR 37
11144: PUSH
11145: LD_INT 22
11147: ST_TO_ADDR
// vc_engine := engine_combustion ;
11148: LD_ADDR_OWVAR 39
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
// vc_control := control_manual ;
11156: LD_ADDR_OWVAR 38
11160: PUSH
11161: LD_INT 1
11163: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
11164: LD_ADDR_OWVAR 40
11168: PUSH
11169: LD_INT 45
11171: PUSH
11172: LD_INT 44
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 1
11181: PPUSH
11182: LD_INT 2
11184: PPUSH
11185: CALL_OW 12
11189: ARRAY
11190: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11191: CALL_OW 45
11195: PPUSH
11196: LD_EXP 9
11200: PPUSH
11201: LD_EXP 10
11205: PPUSH
11206: LD_INT 15
11208: PPUSH
11209: LD_INT 1
11211: PPUSH
11212: CALL_OW 50
// end ; end ;
11216: GO 11219
11218: POP
// end ;
11219: GO 10895
11221: POP
11222: POP
// end ; 2 :
11223: GO 11291
11225: LD_INT 2
11227: DOUBLE
11228: EQUAL
11229: IFTRUE 11233
11231: GO 11275
11233: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
11234: LD_EXP 11
11238: PPUSH
11239: CALL_OW 274
11243: PPUSH
11244: LD_INT 1
11246: PPUSH
11247: LD_EXP 11
11251: PPUSH
11252: CALL_OW 274
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 275
11264: PUSH
11265: LD_INT 500
11267: PLUS
11268: PPUSH
11269: CALL_OW 277
// end ; 3 :
11273: GO 11291
11275: LD_INT 3
11277: DOUBLE
11278: EQUAL
11279: IFTRUE 11283
11281: GO 11290
11283: POP
// begin GetBack ( ) ;
11284: CALL 2072 0 0
// end ; end ;
11288: GO 11291
11290: POP
// end ; end_of_file
11291: LD_VAR 0 1
11295: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
11296: GO 11298
11298: DISABLE
// begin ru_radar := 98 ;
11299: LD_ADDR_EXP 14
11303: PUSH
11304: LD_INT 98
11306: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11307: LD_ADDR_EXP 15
11311: PUSH
11312: LD_INT 89
11314: ST_TO_ADDR
// us_hack := 99 ;
11315: LD_ADDR_EXP 16
11319: PUSH
11320: LD_INT 99
11322: ST_TO_ADDR
// us_artillery := 97 ;
11323: LD_ADDR_EXP 17
11327: PUSH
11328: LD_INT 97
11330: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11331: LD_ADDR_EXP 18
11335: PUSH
11336: LD_INT 91
11338: ST_TO_ADDR
// end ; end_of_file end_of_file
11339: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11340: GO 11342
11342: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11343: LD_STRING initStreamRollete();
11345: PPUSH
11346: CALL_OW 559
// InitStreamMode ;
11350: CALL 11359 0 0
// DefineStreamItems ( ) ;
11354: CALL 11799 0 0
// end ;
11358: END
// function InitStreamMode ; begin
11359: LD_INT 0
11361: PPUSH
// streamModeActive := false ;
11362: LD_ADDR_EXP 19
11366: PUSH
11367: LD_INT 0
11369: ST_TO_ADDR
// normalCounter := 36 ;
11370: LD_ADDR_EXP 20
11374: PUSH
11375: LD_INT 36
11377: ST_TO_ADDR
// hardcoreCounter := 16 ;
11378: LD_ADDR_EXP 21
11382: PUSH
11383: LD_INT 16
11385: ST_TO_ADDR
// sRocket := false ;
11386: LD_ADDR_EXP 24
11390: PUSH
11391: LD_INT 0
11393: ST_TO_ADDR
// sSpeed := false ;
11394: LD_ADDR_EXP 23
11398: PUSH
11399: LD_INT 0
11401: ST_TO_ADDR
// sEngine := false ;
11402: LD_ADDR_EXP 25
11406: PUSH
11407: LD_INT 0
11409: ST_TO_ADDR
// sSpec := false ;
11410: LD_ADDR_EXP 22
11414: PUSH
11415: LD_INT 0
11417: ST_TO_ADDR
// sLevel := false ;
11418: LD_ADDR_EXP 26
11422: PUSH
11423: LD_INT 0
11425: ST_TO_ADDR
// sArmoury := false ;
11426: LD_ADDR_EXP 27
11430: PUSH
11431: LD_INT 0
11433: ST_TO_ADDR
// sRadar := false ;
11434: LD_ADDR_EXP 28
11438: PUSH
11439: LD_INT 0
11441: ST_TO_ADDR
// sBunker := false ;
11442: LD_ADDR_EXP 29
11446: PUSH
11447: LD_INT 0
11449: ST_TO_ADDR
// sHack := false ;
11450: LD_ADDR_EXP 30
11454: PUSH
11455: LD_INT 0
11457: ST_TO_ADDR
// sFire := false ;
11458: LD_ADDR_EXP 31
11462: PUSH
11463: LD_INT 0
11465: ST_TO_ADDR
// sRefresh := false ;
11466: LD_ADDR_EXP 32
11470: PUSH
11471: LD_INT 0
11473: ST_TO_ADDR
// sExp := false ;
11474: LD_ADDR_EXP 33
11478: PUSH
11479: LD_INT 0
11481: ST_TO_ADDR
// sDepot := false ;
11482: LD_ADDR_EXP 34
11486: PUSH
11487: LD_INT 0
11489: ST_TO_ADDR
// sFlag := false ;
11490: LD_ADDR_EXP 35
11494: PUSH
11495: LD_INT 0
11497: ST_TO_ADDR
// sKamikadze := false ;
11498: LD_ADDR_EXP 43
11502: PUSH
11503: LD_INT 0
11505: ST_TO_ADDR
// sTroll := false ;
11506: LD_ADDR_EXP 44
11510: PUSH
11511: LD_INT 0
11513: ST_TO_ADDR
// sSlow := false ;
11514: LD_ADDR_EXP 45
11518: PUSH
11519: LD_INT 0
11521: ST_TO_ADDR
// sLack := false ;
11522: LD_ADDR_EXP 46
11526: PUSH
11527: LD_INT 0
11529: ST_TO_ADDR
// sTank := false ;
11530: LD_ADDR_EXP 48
11534: PUSH
11535: LD_INT 0
11537: ST_TO_ADDR
// sRemote := false ;
11538: LD_ADDR_EXP 49
11542: PUSH
11543: LD_INT 0
11545: ST_TO_ADDR
// sPowell := false ;
11546: LD_ADDR_EXP 50
11550: PUSH
11551: LD_INT 0
11553: ST_TO_ADDR
// sTeleport := false ;
11554: LD_ADDR_EXP 53
11558: PUSH
11559: LD_INT 0
11561: ST_TO_ADDR
// sOilTower := false ;
11562: LD_ADDR_EXP 55
11566: PUSH
11567: LD_INT 0
11569: ST_TO_ADDR
// sShovel := false ;
11570: LD_ADDR_EXP 56
11574: PUSH
11575: LD_INT 0
11577: ST_TO_ADDR
// sSheik := false ;
11578: LD_ADDR_EXP 57
11582: PUSH
11583: LD_INT 0
11585: ST_TO_ADDR
// sEarthquake := false ;
11586: LD_ADDR_EXP 59
11590: PUSH
11591: LD_INT 0
11593: ST_TO_ADDR
// sAI := false ;
11594: LD_ADDR_EXP 60
11598: PUSH
11599: LD_INT 0
11601: ST_TO_ADDR
// sCargo := false ;
11602: LD_ADDR_EXP 63
11606: PUSH
11607: LD_INT 0
11609: ST_TO_ADDR
// sDLaser := false ;
11610: LD_ADDR_EXP 64
11614: PUSH
11615: LD_INT 0
11617: ST_TO_ADDR
// sExchange := false ;
11618: LD_ADDR_EXP 65
11622: PUSH
11623: LD_INT 0
11625: ST_TO_ADDR
// sFac := false ;
11626: LD_ADDR_EXP 66
11630: PUSH
11631: LD_INT 0
11633: ST_TO_ADDR
// sPower := false ;
11634: LD_ADDR_EXP 67
11638: PUSH
11639: LD_INT 0
11641: ST_TO_ADDR
// sRandom := false ;
11642: LD_ADDR_EXP 68
11646: PUSH
11647: LD_INT 0
11649: ST_TO_ADDR
// sShield := false ;
11650: LD_ADDR_EXP 69
11654: PUSH
11655: LD_INT 0
11657: ST_TO_ADDR
// sTime := false ;
11658: LD_ADDR_EXP 70
11662: PUSH
11663: LD_INT 0
11665: ST_TO_ADDR
// sTools := false ;
11666: LD_ADDR_EXP 71
11670: PUSH
11671: LD_INT 0
11673: ST_TO_ADDR
// sSold := false ;
11674: LD_ADDR_EXP 36
11678: PUSH
11679: LD_INT 0
11681: ST_TO_ADDR
// sDiff := false ;
11682: LD_ADDR_EXP 37
11686: PUSH
11687: LD_INT 0
11689: ST_TO_ADDR
// sFog := false ;
11690: LD_ADDR_EXP 40
11694: PUSH
11695: LD_INT 0
11697: ST_TO_ADDR
// sReset := false ;
11698: LD_ADDR_EXP 41
11702: PUSH
11703: LD_INT 0
11705: ST_TO_ADDR
// sSun := false ;
11706: LD_ADDR_EXP 42
11710: PUSH
11711: LD_INT 0
11713: ST_TO_ADDR
// sTiger := false ;
11714: LD_ADDR_EXP 38
11718: PUSH
11719: LD_INT 0
11721: ST_TO_ADDR
// sBomb := false ;
11722: LD_ADDR_EXP 39
11726: PUSH
11727: LD_INT 0
11729: ST_TO_ADDR
// sWound := false ;
11730: LD_ADDR_EXP 47
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// sBetray := false ;
11738: LD_ADDR_EXP 51
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// sContamin := false ;
11746: LD_ADDR_EXP 52
11750: PUSH
11751: LD_INT 0
11753: ST_TO_ADDR
// sOil := false ;
11754: LD_ADDR_EXP 54
11758: PUSH
11759: LD_INT 0
11761: ST_TO_ADDR
// sStu := false ;
11762: LD_ADDR_EXP 58
11766: PUSH
11767: LD_INT 0
11769: ST_TO_ADDR
// sBazooka := false ;
11770: LD_ADDR_EXP 61
11774: PUSH
11775: LD_INT 0
11777: ST_TO_ADDR
// sMortar := false ;
11778: LD_ADDR_EXP 62
11782: PUSH
11783: LD_INT 0
11785: ST_TO_ADDR
// sRanger := false ;
11786: LD_ADDR_EXP 72
11790: PUSH
11791: LD_INT 0
11793: ST_TO_ADDR
// end ;
11794: LD_VAR 0 1
11798: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11799: LD_INT 0
11801: PPUSH
11802: PPUSH
11803: PPUSH
11804: PPUSH
11805: PPUSH
// result := [ ] ;
11806: LD_ADDR_VAR 0 1
11810: PUSH
11811: EMPTY
11812: ST_TO_ADDR
// if campaign_id = 1 then
11813: LD_OWVAR 69
11817: PUSH
11818: LD_INT 1
11820: EQUAL
11821: IFFALSE 14759
// begin case mission_number of 1 :
11823: LD_OWVAR 70
11827: PUSH
11828: LD_INT 1
11830: DOUBLE
11831: EQUAL
11832: IFTRUE 11836
11834: GO 11900
11836: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11837: LD_ADDR_VAR 0 1
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: LD_INT 4
11847: PUSH
11848: LD_INT 11
11850: PUSH
11851: LD_INT 12
11853: PUSH
11854: LD_INT 15
11856: PUSH
11857: LD_INT 16
11859: PUSH
11860: LD_INT 22
11862: PUSH
11863: LD_INT 23
11865: PUSH
11866: LD_INT 26
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 101
11882: PUSH
11883: LD_INT 102
11885: PUSH
11886: LD_INT 106
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: LIST
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: ST_TO_ADDR
11898: GO 14757
11900: LD_INT 2
11902: DOUBLE
11903: EQUAL
11904: IFTRUE 11908
11906: GO 11980
11908: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11909: LD_ADDR_VAR 0 1
11913: PUSH
11914: LD_INT 2
11916: PUSH
11917: LD_INT 4
11919: PUSH
11920: LD_INT 11
11922: PUSH
11923: LD_INT 12
11925: PUSH
11926: LD_INT 15
11928: PUSH
11929: LD_INT 16
11931: PUSH
11932: LD_INT 22
11934: PUSH
11935: LD_INT 23
11937: PUSH
11938: LD_INT 26
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 101
11954: PUSH
11955: LD_INT 102
11957: PUSH
11958: LD_INT 105
11960: PUSH
11961: LD_INT 106
11963: PUSH
11964: LD_INT 108
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: ST_TO_ADDR
11978: GO 14757
11980: LD_INT 3
11982: DOUBLE
11983: EQUAL
11984: IFTRUE 11988
11986: GO 12064
11988: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11989: LD_ADDR_VAR 0 1
11993: PUSH
11994: LD_INT 2
11996: PUSH
11997: LD_INT 4
11999: PUSH
12000: LD_INT 5
12002: PUSH
12003: LD_INT 11
12005: PUSH
12006: LD_INT 12
12008: PUSH
12009: LD_INT 15
12011: PUSH
12012: LD_INT 16
12014: PUSH
12015: LD_INT 22
12017: PUSH
12018: LD_INT 26
12020: PUSH
12021: LD_INT 36
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 101
12038: PUSH
12039: LD_INT 102
12041: PUSH
12042: LD_INT 105
12044: PUSH
12045: LD_INT 106
12047: PUSH
12048: LD_INT 108
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: ST_TO_ADDR
12062: GO 14757
12064: LD_INT 4
12066: DOUBLE
12067: EQUAL
12068: IFTRUE 12072
12070: GO 12156
12072: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12073: LD_ADDR_VAR 0 1
12077: PUSH
12078: LD_INT 2
12080: PUSH
12081: LD_INT 4
12083: PUSH
12084: LD_INT 5
12086: PUSH
12087: LD_INT 8
12089: PUSH
12090: LD_INT 11
12092: PUSH
12093: LD_INT 12
12095: PUSH
12096: LD_INT 15
12098: PUSH
12099: LD_INT 16
12101: PUSH
12102: LD_INT 22
12104: PUSH
12105: LD_INT 23
12107: PUSH
12108: LD_INT 26
12110: PUSH
12111: LD_INT 36
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 101
12130: PUSH
12131: LD_INT 102
12133: PUSH
12134: LD_INT 105
12136: PUSH
12137: LD_INT 106
12139: PUSH
12140: LD_INT 108
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: ST_TO_ADDR
12154: GO 14757
12156: LD_INT 5
12158: DOUBLE
12159: EQUAL
12160: IFTRUE 12164
12162: GO 12264
12164: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12165: LD_ADDR_VAR 0 1
12169: PUSH
12170: LD_INT 2
12172: PUSH
12173: LD_INT 4
12175: PUSH
12176: LD_INT 5
12178: PUSH
12179: LD_INT 6
12181: PUSH
12182: LD_INT 8
12184: PUSH
12185: LD_INT 11
12187: PUSH
12188: LD_INT 12
12190: PUSH
12191: LD_INT 15
12193: PUSH
12194: LD_INT 16
12196: PUSH
12197: LD_INT 22
12199: PUSH
12200: LD_INT 23
12202: PUSH
12203: LD_INT 25
12205: PUSH
12206: LD_INT 26
12208: PUSH
12209: LD_INT 36
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 101
12230: PUSH
12231: LD_INT 102
12233: PUSH
12234: LD_INT 105
12236: PUSH
12237: LD_INT 106
12239: PUSH
12240: LD_INT 108
12242: PUSH
12243: LD_INT 109
12245: PUSH
12246: LD_INT 112
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: ST_TO_ADDR
12262: GO 14757
12264: LD_INT 6
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12392
12272: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12273: LD_ADDR_VAR 0 1
12277: PUSH
12278: LD_INT 2
12280: PUSH
12281: LD_INT 4
12283: PUSH
12284: LD_INT 5
12286: PUSH
12287: LD_INT 6
12289: PUSH
12290: LD_INT 8
12292: PUSH
12293: LD_INT 11
12295: PUSH
12296: LD_INT 12
12298: PUSH
12299: LD_INT 15
12301: PUSH
12302: LD_INT 16
12304: PUSH
12305: LD_INT 20
12307: PUSH
12308: LD_INT 21
12310: PUSH
12311: LD_INT 22
12313: PUSH
12314: LD_INT 23
12316: PUSH
12317: LD_INT 25
12319: PUSH
12320: LD_INT 26
12322: PUSH
12323: LD_INT 30
12325: PUSH
12326: LD_INT 31
12328: PUSH
12329: LD_INT 32
12331: PUSH
12332: LD_INT 36
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 101
12358: PUSH
12359: LD_INT 102
12361: PUSH
12362: LD_INT 105
12364: PUSH
12365: LD_INT 106
12367: PUSH
12368: LD_INT 108
12370: PUSH
12371: LD_INT 109
12373: PUSH
12374: LD_INT 112
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: ST_TO_ADDR
12390: GO 14757
12392: LD_INT 7
12394: DOUBLE
12395: EQUAL
12396: IFTRUE 12400
12398: GO 12500
12400: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12401: LD_ADDR_VAR 0 1
12405: PUSH
12406: LD_INT 2
12408: PUSH
12409: LD_INT 4
12411: PUSH
12412: LD_INT 5
12414: PUSH
12415: LD_INT 7
12417: PUSH
12418: LD_INT 11
12420: PUSH
12421: LD_INT 12
12423: PUSH
12424: LD_INT 15
12426: PUSH
12427: LD_INT 16
12429: PUSH
12430: LD_INT 20
12432: PUSH
12433: LD_INT 21
12435: PUSH
12436: LD_INT 22
12438: PUSH
12439: LD_INT 23
12441: PUSH
12442: LD_INT 25
12444: PUSH
12445: LD_INT 26
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 101
12466: PUSH
12467: LD_INT 102
12469: PUSH
12470: LD_INT 103
12472: PUSH
12473: LD_INT 105
12475: PUSH
12476: LD_INT 106
12478: PUSH
12479: LD_INT 108
12481: PUSH
12482: LD_INT 112
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: ST_TO_ADDR
12498: GO 14757
12500: LD_INT 8
12502: DOUBLE
12503: EQUAL
12504: IFTRUE 12508
12506: GO 12636
12508: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12509: LD_ADDR_VAR 0 1
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: LD_INT 4
12519: PUSH
12520: LD_INT 5
12522: PUSH
12523: LD_INT 6
12525: PUSH
12526: LD_INT 7
12528: PUSH
12529: LD_INT 8
12531: PUSH
12532: LD_INT 11
12534: PUSH
12535: LD_INT 12
12537: PUSH
12538: LD_INT 15
12540: PUSH
12541: LD_INT 16
12543: PUSH
12544: LD_INT 20
12546: PUSH
12547: LD_INT 21
12549: PUSH
12550: LD_INT 22
12552: PUSH
12553: LD_INT 23
12555: PUSH
12556: LD_INT 25
12558: PUSH
12559: LD_INT 26
12561: PUSH
12562: LD_INT 30
12564: PUSH
12565: LD_INT 31
12567: PUSH
12568: LD_INT 32
12570: PUSH
12571: LD_INT 36
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 101
12598: PUSH
12599: LD_INT 102
12601: PUSH
12602: LD_INT 103
12604: PUSH
12605: LD_INT 105
12607: PUSH
12608: LD_INT 106
12610: PUSH
12611: LD_INT 108
12613: PUSH
12614: LD_INT 109
12616: PUSH
12617: LD_INT 112
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: ST_TO_ADDR
12634: GO 14757
12636: LD_INT 9
12638: DOUBLE
12639: EQUAL
12640: IFTRUE 12644
12642: GO 12780
12644: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12645: LD_ADDR_VAR 0 1
12649: PUSH
12650: LD_INT 2
12652: PUSH
12653: LD_INT 4
12655: PUSH
12656: LD_INT 5
12658: PUSH
12659: LD_INT 6
12661: PUSH
12662: LD_INT 7
12664: PUSH
12665: LD_INT 8
12667: PUSH
12668: LD_INT 11
12670: PUSH
12671: LD_INT 12
12673: PUSH
12674: LD_INT 15
12676: PUSH
12677: LD_INT 16
12679: PUSH
12680: LD_INT 20
12682: PUSH
12683: LD_INT 21
12685: PUSH
12686: LD_INT 22
12688: PUSH
12689: LD_INT 23
12691: PUSH
12692: LD_INT 25
12694: PUSH
12695: LD_INT 26
12697: PUSH
12698: LD_INT 28
12700: PUSH
12701: LD_INT 30
12703: PUSH
12704: LD_INT 31
12706: PUSH
12707: LD_INT 32
12709: PUSH
12710: LD_INT 36
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 101
12738: PUSH
12739: LD_INT 102
12741: PUSH
12742: LD_INT 103
12744: PUSH
12745: LD_INT 105
12747: PUSH
12748: LD_INT 106
12750: PUSH
12751: LD_INT 108
12753: PUSH
12754: LD_INT 109
12756: PUSH
12757: LD_INT 112
12759: PUSH
12760: LD_INT 114
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: ST_TO_ADDR
12778: GO 14757
12780: LD_INT 10
12782: DOUBLE
12783: EQUAL
12784: IFTRUE 12788
12786: GO 12972
12788: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12789: LD_ADDR_VAR 0 1
12793: PUSH
12794: LD_INT 2
12796: PUSH
12797: LD_INT 4
12799: PUSH
12800: LD_INT 5
12802: PUSH
12803: LD_INT 6
12805: PUSH
12806: LD_INT 7
12808: PUSH
12809: LD_INT 8
12811: PUSH
12812: LD_INT 9
12814: PUSH
12815: LD_INT 10
12817: PUSH
12818: LD_INT 11
12820: PUSH
12821: LD_INT 12
12823: PUSH
12824: LD_INT 13
12826: PUSH
12827: LD_INT 14
12829: PUSH
12830: LD_INT 15
12832: PUSH
12833: LD_INT 16
12835: PUSH
12836: LD_INT 17
12838: PUSH
12839: LD_INT 18
12841: PUSH
12842: LD_INT 19
12844: PUSH
12845: LD_INT 20
12847: PUSH
12848: LD_INT 21
12850: PUSH
12851: LD_INT 22
12853: PUSH
12854: LD_INT 23
12856: PUSH
12857: LD_INT 24
12859: PUSH
12860: LD_INT 25
12862: PUSH
12863: LD_INT 26
12865: PUSH
12866: LD_INT 28
12868: PUSH
12869: LD_INT 30
12871: PUSH
12872: LD_INT 31
12874: PUSH
12875: LD_INT 32
12877: PUSH
12878: LD_INT 36
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 101
12914: PUSH
12915: LD_INT 102
12917: PUSH
12918: LD_INT 103
12920: PUSH
12921: LD_INT 104
12923: PUSH
12924: LD_INT 105
12926: PUSH
12927: LD_INT 106
12929: PUSH
12930: LD_INT 107
12932: PUSH
12933: LD_INT 108
12935: PUSH
12936: LD_INT 109
12938: PUSH
12939: LD_INT 110
12941: PUSH
12942: LD_INT 111
12944: PUSH
12945: LD_INT 112
12947: PUSH
12948: LD_INT 114
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: ST_TO_ADDR
12970: GO 14757
12972: LD_INT 11
12974: DOUBLE
12975: EQUAL
12976: IFTRUE 12980
12978: GO 13172
12980: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12981: LD_ADDR_VAR 0 1
12985: PUSH
12986: LD_INT 2
12988: PUSH
12989: LD_INT 3
12991: PUSH
12992: LD_INT 4
12994: PUSH
12995: LD_INT 5
12997: PUSH
12998: LD_INT 6
13000: PUSH
13001: LD_INT 7
13003: PUSH
13004: LD_INT 8
13006: PUSH
13007: LD_INT 9
13009: PUSH
13010: LD_INT 10
13012: PUSH
13013: LD_INT 11
13015: PUSH
13016: LD_INT 12
13018: PUSH
13019: LD_INT 13
13021: PUSH
13022: LD_INT 14
13024: PUSH
13025: LD_INT 15
13027: PUSH
13028: LD_INT 16
13030: PUSH
13031: LD_INT 17
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 19
13039: PUSH
13040: LD_INT 20
13042: PUSH
13043: LD_INT 21
13045: PUSH
13046: LD_INT 22
13048: PUSH
13049: LD_INT 23
13051: PUSH
13052: LD_INT 24
13054: PUSH
13055: LD_INT 25
13057: PUSH
13058: LD_INT 26
13060: PUSH
13061: LD_INT 28
13063: PUSH
13064: LD_INT 30
13066: PUSH
13067: LD_INT 31
13069: PUSH
13070: LD_INT 32
13072: PUSH
13073: LD_INT 34
13075: PUSH
13076: LD_INT 36
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: PUSH
13112: LD_INT 101
13114: PUSH
13115: LD_INT 102
13117: PUSH
13118: LD_INT 103
13120: PUSH
13121: LD_INT 104
13123: PUSH
13124: LD_INT 105
13126: PUSH
13127: LD_INT 106
13129: PUSH
13130: LD_INT 107
13132: PUSH
13133: LD_INT 108
13135: PUSH
13136: LD_INT 109
13138: PUSH
13139: LD_INT 110
13141: PUSH
13142: LD_INT 111
13144: PUSH
13145: LD_INT 112
13147: PUSH
13148: LD_INT 114
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: ST_TO_ADDR
13170: GO 14757
13172: LD_INT 12
13174: DOUBLE
13175: EQUAL
13176: IFTRUE 13180
13178: GO 13388
13180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13181: LD_ADDR_VAR 0 1
13185: PUSH
13186: LD_INT 1
13188: PUSH
13189: LD_INT 2
13191: PUSH
13192: LD_INT 3
13194: PUSH
13195: LD_INT 4
13197: PUSH
13198: LD_INT 5
13200: PUSH
13201: LD_INT 6
13203: PUSH
13204: LD_INT 7
13206: PUSH
13207: LD_INT 8
13209: PUSH
13210: LD_INT 9
13212: PUSH
13213: LD_INT 10
13215: PUSH
13216: LD_INT 11
13218: PUSH
13219: LD_INT 12
13221: PUSH
13222: LD_INT 13
13224: PUSH
13225: LD_INT 14
13227: PUSH
13228: LD_INT 15
13230: PUSH
13231: LD_INT 16
13233: PUSH
13234: LD_INT 17
13236: PUSH
13237: LD_INT 18
13239: PUSH
13240: LD_INT 19
13242: PUSH
13243: LD_INT 20
13245: PUSH
13246: LD_INT 21
13248: PUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 23
13254: PUSH
13255: LD_INT 24
13257: PUSH
13258: LD_INT 25
13260: PUSH
13261: LD_INT 26
13263: PUSH
13264: LD_INT 27
13266: PUSH
13267: LD_INT 28
13269: PUSH
13270: LD_INT 30
13272: PUSH
13273: LD_INT 31
13275: PUSH
13276: LD_INT 32
13278: PUSH
13279: LD_INT 33
13281: PUSH
13282: LD_INT 34
13284: PUSH
13285: LD_INT 36
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 101
13326: PUSH
13327: LD_INT 102
13329: PUSH
13330: LD_INT 103
13332: PUSH
13333: LD_INT 104
13335: PUSH
13336: LD_INT 105
13338: PUSH
13339: LD_INT 106
13341: PUSH
13342: LD_INT 107
13344: PUSH
13345: LD_INT 108
13347: PUSH
13348: LD_INT 109
13350: PUSH
13351: LD_INT 110
13353: PUSH
13354: LD_INT 111
13356: PUSH
13357: LD_INT 112
13359: PUSH
13360: LD_INT 113
13362: PUSH
13363: LD_INT 114
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: ST_TO_ADDR
13386: GO 14757
13388: LD_INT 13
13390: DOUBLE
13391: EQUAL
13392: IFTRUE 13396
13394: GO 13592
13396: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13397: LD_ADDR_VAR 0 1
13401: PUSH
13402: LD_INT 1
13404: PUSH
13405: LD_INT 2
13407: PUSH
13408: LD_INT 3
13410: PUSH
13411: LD_INT 4
13413: PUSH
13414: LD_INT 5
13416: PUSH
13417: LD_INT 8
13419: PUSH
13420: LD_INT 9
13422: PUSH
13423: LD_INT 10
13425: PUSH
13426: LD_INT 11
13428: PUSH
13429: LD_INT 12
13431: PUSH
13432: LD_INT 14
13434: PUSH
13435: LD_INT 15
13437: PUSH
13438: LD_INT 16
13440: PUSH
13441: LD_INT 17
13443: PUSH
13444: LD_INT 18
13446: PUSH
13447: LD_INT 19
13449: PUSH
13450: LD_INT 20
13452: PUSH
13453: LD_INT 21
13455: PUSH
13456: LD_INT 22
13458: PUSH
13459: LD_INT 23
13461: PUSH
13462: LD_INT 24
13464: PUSH
13465: LD_INT 25
13467: PUSH
13468: LD_INT 26
13470: PUSH
13471: LD_INT 27
13473: PUSH
13474: LD_INT 28
13476: PUSH
13477: LD_INT 30
13479: PUSH
13480: LD_INT 31
13482: PUSH
13483: LD_INT 32
13485: PUSH
13486: LD_INT 33
13488: PUSH
13489: LD_INT 34
13491: PUSH
13492: LD_INT 36
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 101
13530: PUSH
13531: LD_INT 102
13533: PUSH
13534: LD_INT 103
13536: PUSH
13537: LD_INT 104
13539: PUSH
13540: LD_INT 105
13542: PUSH
13543: LD_INT 106
13545: PUSH
13546: LD_INT 107
13548: PUSH
13549: LD_INT 108
13551: PUSH
13552: LD_INT 109
13554: PUSH
13555: LD_INT 110
13557: PUSH
13558: LD_INT 111
13560: PUSH
13561: LD_INT 112
13563: PUSH
13564: LD_INT 113
13566: PUSH
13567: LD_INT 114
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: ST_TO_ADDR
13590: GO 14757
13592: LD_INT 14
13594: DOUBLE
13595: EQUAL
13596: IFTRUE 13600
13598: GO 13812
13600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13601: LD_ADDR_VAR 0 1
13605: PUSH
13606: LD_INT 1
13608: PUSH
13609: LD_INT 2
13611: PUSH
13612: LD_INT 3
13614: PUSH
13615: LD_INT 4
13617: PUSH
13618: LD_INT 5
13620: PUSH
13621: LD_INT 6
13623: PUSH
13624: LD_INT 7
13626: PUSH
13627: LD_INT 8
13629: PUSH
13630: LD_INT 9
13632: PUSH
13633: LD_INT 10
13635: PUSH
13636: LD_INT 11
13638: PUSH
13639: LD_INT 12
13641: PUSH
13642: LD_INT 13
13644: PUSH
13645: LD_INT 14
13647: PUSH
13648: LD_INT 15
13650: PUSH
13651: LD_INT 16
13653: PUSH
13654: LD_INT 17
13656: PUSH
13657: LD_INT 18
13659: PUSH
13660: LD_INT 19
13662: PUSH
13663: LD_INT 20
13665: PUSH
13666: LD_INT 21
13668: PUSH
13669: LD_INT 22
13671: PUSH
13672: LD_INT 23
13674: PUSH
13675: LD_INT 24
13677: PUSH
13678: LD_INT 25
13680: PUSH
13681: LD_INT 26
13683: PUSH
13684: LD_INT 27
13686: PUSH
13687: LD_INT 28
13689: PUSH
13690: LD_INT 29
13692: PUSH
13693: LD_INT 30
13695: PUSH
13696: LD_INT 31
13698: PUSH
13699: LD_INT 32
13701: PUSH
13702: LD_INT 33
13704: PUSH
13705: LD_INT 34
13707: PUSH
13708: LD_INT 36
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 101
13750: PUSH
13751: LD_INT 102
13753: PUSH
13754: LD_INT 103
13756: PUSH
13757: LD_INT 104
13759: PUSH
13760: LD_INT 105
13762: PUSH
13763: LD_INT 106
13765: PUSH
13766: LD_INT 107
13768: PUSH
13769: LD_INT 108
13771: PUSH
13772: LD_INT 109
13774: PUSH
13775: LD_INT 110
13777: PUSH
13778: LD_INT 111
13780: PUSH
13781: LD_INT 112
13783: PUSH
13784: LD_INT 113
13786: PUSH
13787: LD_INT 114
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: ST_TO_ADDR
13810: GO 14757
13812: LD_INT 15
13814: DOUBLE
13815: EQUAL
13816: IFTRUE 13820
13818: GO 14032
13820: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13821: LD_ADDR_VAR 0 1
13825: PUSH
13826: LD_INT 1
13828: PUSH
13829: LD_INT 2
13831: PUSH
13832: LD_INT 3
13834: PUSH
13835: LD_INT 4
13837: PUSH
13838: LD_INT 5
13840: PUSH
13841: LD_INT 6
13843: PUSH
13844: LD_INT 7
13846: PUSH
13847: LD_INT 8
13849: PUSH
13850: LD_INT 9
13852: PUSH
13853: LD_INT 10
13855: PUSH
13856: LD_INT 11
13858: PUSH
13859: LD_INT 12
13861: PUSH
13862: LD_INT 13
13864: PUSH
13865: LD_INT 14
13867: PUSH
13868: LD_INT 15
13870: PUSH
13871: LD_INT 16
13873: PUSH
13874: LD_INT 17
13876: PUSH
13877: LD_INT 18
13879: PUSH
13880: LD_INT 19
13882: PUSH
13883: LD_INT 20
13885: PUSH
13886: LD_INT 21
13888: PUSH
13889: LD_INT 22
13891: PUSH
13892: LD_INT 23
13894: PUSH
13895: LD_INT 24
13897: PUSH
13898: LD_INT 25
13900: PUSH
13901: LD_INT 26
13903: PUSH
13904: LD_INT 27
13906: PUSH
13907: LD_INT 28
13909: PUSH
13910: LD_INT 29
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_INT 31
13918: PUSH
13919: LD_INT 32
13921: PUSH
13922: LD_INT 33
13924: PUSH
13925: LD_INT 34
13927: PUSH
13928: LD_INT 36
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 101
13970: PUSH
13971: LD_INT 102
13973: PUSH
13974: LD_INT 103
13976: PUSH
13977: LD_INT 104
13979: PUSH
13980: LD_INT 105
13982: PUSH
13983: LD_INT 106
13985: PUSH
13986: LD_INT 107
13988: PUSH
13989: LD_INT 108
13991: PUSH
13992: LD_INT 109
13994: PUSH
13995: LD_INT 110
13997: PUSH
13998: LD_INT 111
14000: PUSH
14001: LD_INT 112
14003: PUSH
14004: LD_INT 113
14006: PUSH
14007: LD_INT 114
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: ST_TO_ADDR
14030: GO 14757
14032: LD_INT 16
14034: DOUBLE
14035: EQUAL
14036: IFTRUE 14040
14038: GO 14164
14040: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14041: LD_ADDR_VAR 0 1
14045: PUSH
14046: LD_INT 2
14048: PUSH
14049: LD_INT 4
14051: PUSH
14052: LD_INT 5
14054: PUSH
14055: LD_INT 7
14057: PUSH
14058: LD_INT 11
14060: PUSH
14061: LD_INT 12
14063: PUSH
14064: LD_INT 15
14066: PUSH
14067: LD_INT 16
14069: PUSH
14070: LD_INT 20
14072: PUSH
14073: LD_INT 21
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_INT 23
14081: PUSH
14082: LD_INT 25
14084: PUSH
14085: LD_INT 26
14087: PUSH
14088: LD_INT 30
14090: PUSH
14091: LD_INT 31
14093: PUSH
14094: LD_INT 32
14096: PUSH
14097: LD_INT 33
14099: PUSH
14100: LD_INT 34
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 101
14126: PUSH
14127: LD_INT 102
14129: PUSH
14130: LD_INT 103
14132: PUSH
14133: LD_INT 106
14135: PUSH
14136: LD_INT 108
14138: PUSH
14139: LD_INT 112
14141: PUSH
14142: LD_INT 113
14144: PUSH
14145: LD_INT 114
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: ST_TO_ADDR
14162: GO 14757
14164: LD_INT 17
14166: DOUBLE
14167: EQUAL
14168: IFTRUE 14172
14170: GO 14384
14172: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14173: LD_ADDR_VAR 0 1
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: LD_INT 2
14183: PUSH
14184: LD_INT 3
14186: PUSH
14187: LD_INT 4
14189: PUSH
14190: LD_INT 5
14192: PUSH
14193: LD_INT 6
14195: PUSH
14196: LD_INT 7
14198: PUSH
14199: LD_INT 8
14201: PUSH
14202: LD_INT 9
14204: PUSH
14205: LD_INT 10
14207: PUSH
14208: LD_INT 11
14210: PUSH
14211: LD_INT 12
14213: PUSH
14214: LD_INT 13
14216: PUSH
14217: LD_INT 14
14219: PUSH
14220: LD_INT 15
14222: PUSH
14223: LD_INT 16
14225: PUSH
14226: LD_INT 17
14228: PUSH
14229: LD_INT 18
14231: PUSH
14232: LD_INT 19
14234: PUSH
14235: LD_INT 20
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 22
14243: PUSH
14244: LD_INT 23
14246: PUSH
14247: LD_INT 24
14249: PUSH
14250: LD_INT 25
14252: PUSH
14253: LD_INT 26
14255: PUSH
14256: LD_INT 27
14258: PUSH
14259: LD_INT 28
14261: PUSH
14262: LD_INT 29
14264: PUSH
14265: LD_INT 30
14267: PUSH
14268: LD_INT 31
14270: PUSH
14271: LD_INT 32
14273: PUSH
14274: LD_INT 33
14276: PUSH
14277: LD_INT 34
14279: PUSH
14280: LD_INT 36
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 101
14322: PUSH
14323: LD_INT 102
14325: PUSH
14326: LD_INT 103
14328: PUSH
14329: LD_INT 104
14331: PUSH
14332: LD_INT 105
14334: PUSH
14335: LD_INT 106
14337: PUSH
14338: LD_INT 107
14340: PUSH
14341: LD_INT 108
14343: PUSH
14344: LD_INT 109
14346: PUSH
14347: LD_INT 110
14349: PUSH
14350: LD_INT 111
14352: PUSH
14353: LD_INT 112
14355: PUSH
14356: LD_INT 113
14358: PUSH
14359: LD_INT 114
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: ST_TO_ADDR
14382: GO 14757
14384: LD_INT 18
14386: DOUBLE
14387: EQUAL
14388: IFTRUE 14392
14390: GO 14528
14392: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14393: LD_ADDR_VAR 0 1
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: LD_INT 4
14403: PUSH
14404: LD_INT 5
14406: PUSH
14407: LD_INT 7
14409: PUSH
14410: LD_INT 11
14412: PUSH
14413: LD_INT 12
14415: PUSH
14416: LD_INT 15
14418: PUSH
14419: LD_INT 16
14421: PUSH
14422: LD_INT 20
14424: PUSH
14425: LD_INT 21
14427: PUSH
14428: LD_INT 22
14430: PUSH
14431: LD_INT 23
14433: PUSH
14434: LD_INT 25
14436: PUSH
14437: LD_INT 26
14439: PUSH
14440: LD_INT 30
14442: PUSH
14443: LD_INT 31
14445: PUSH
14446: LD_INT 32
14448: PUSH
14449: LD_INT 33
14451: PUSH
14452: LD_INT 34
14454: PUSH
14455: LD_INT 35
14457: PUSH
14458: LD_INT 36
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 101
14486: PUSH
14487: LD_INT 102
14489: PUSH
14490: LD_INT 103
14492: PUSH
14493: LD_INT 106
14495: PUSH
14496: LD_INT 108
14498: PUSH
14499: LD_INT 112
14501: PUSH
14502: LD_INT 113
14504: PUSH
14505: LD_INT 114
14507: PUSH
14508: LD_INT 115
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: ST_TO_ADDR
14526: GO 14757
14528: LD_INT 19
14530: DOUBLE
14531: EQUAL
14532: IFTRUE 14536
14534: GO 14756
14536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14537: LD_ADDR_VAR 0 1
14541: PUSH
14542: LD_INT 1
14544: PUSH
14545: LD_INT 2
14547: PUSH
14548: LD_INT 3
14550: PUSH
14551: LD_INT 4
14553: PUSH
14554: LD_INT 5
14556: PUSH
14557: LD_INT 6
14559: PUSH
14560: LD_INT 7
14562: PUSH
14563: LD_INT 8
14565: PUSH
14566: LD_INT 9
14568: PUSH
14569: LD_INT 10
14571: PUSH
14572: LD_INT 11
14574: PUSH
14575: LD_INT 12
14577: PUSH
14578: LD_INT 13
14580: PUSH
14581: LD_INT 14
14583: PUSH
14584: LD_INT 15
14586: PUSH
14587: LD_INT 16
14589: PUSH
14590: LD_INT 17
14592: PUSH
14593: LD_INT 18
14595: PUSH
14596: LD_INT 19
14598: PUSH
14599: LD_INT 20
14601: PUSH
14602: LD_INT 21
14604: PUSH
14605: LD_INT 22
14607: PUSH
14608: LD_INT 23
14610: PUSH
14611: LD_INT 24
14613: PUSH
14614: LD_INT 25
14616: PUSH
14617: LD_INT 26
14619: PUSH
14620: LD_INT 27
14622: PUSH
14623: LD_INT 28
14625: PUSH
14626: LD_INT 29
14628: PUSH
14629: LD_INT 30
14631: PUSH
14632: LD_INT 31
14634: PUSH
14635: LD_INT 32
14637: PUSH
14638: LD_INT 33
14640: PUSH
14641: LD_INT 34
14643: PUSH
14644: LD_INT 35
14646: PUSH
14647: LD_INT 36
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 101
14690: PUSH
14691: LD_INT 102
14693: PUSH
14694: LD_INT 103
14696: PUSH
14697: LD_INT 104
14699: PUSH
14700: LD_INT 105
14702: PUSH
14703: LD_INT 106
14705: PUSH
14706: LD_INT 107
14708: PUSH
14709: LD_INT 108
14711: PUSH
14712: LD_INT 109
14714: PUSH
14715: LD_INT 110
14717: PUSH
14718: LD_INT 111
14720: PUSH
14721: LD_INT 112
14723: PUSH
14724: LD_INT 113
14726: PUSH
14727: LD_INT 114
14729: PUSH
14730: LD_INT 115
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: ST_TO_ADDR
14754: GO 14757
14756: POP
// end else
14757: GO 14794
// if campaign_id = 5 then
14759: LD_OWVAR 69
14763: PUSH
14764: LD_INT 5
14766: EQUAL
14767: IFFALSE 14794
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
14769: LD_ADDR_VAR 0 1
14773: PUSH
14774: LD_INT 1
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 100
14786: PUSH
14787: EMPTY
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: ST_TO_ADDR
// end ; if result then
14794: LD_VAR 0 1
14798: IFFALSE 15087
// begin normal :=  ;
14800: LD_ADDR_VAR 0 3
14804: PUSH
14805: LD_STRING 
14807: ST_TO_ADDR
// hardcore :=  ;
14808: LD_ADDR_VAR 0 4
14812: PUSH
14813: LD_STRING 
14815: ST_TO_ADDR
// for i = 1 to normalCounter do
14816: LD_ADDR_VAR 0 5
14820: PUSH
14821: DOUBLE
14822: LD_INT 1
14824: DEC
14825: ST_TO_ADDR
14826: LD_EXP 20
14830: PUSH
14831: FOR_TO
14832: IFFALSE 14933
// begin tmp := 0 ;
14834: LD_ADDR_VAR 0 2
14838: PUSH
14839: LD_STRING 0
14841: ST_TO_ADDR
// if result [ 1 ] then
14842: LD_VAR 0 1
14846: PUSH
14847: LD_INT 1
14849: ARRAY
14850: IFFALSE 14915
// if result [ 1 ] [ 1 ] = i then
14852: LD_VAR 0 1
14856: PUSH
14857: LD_INT 1
14859: ARRAY
14860: PUSH
14861: LD_INT 1
14863: ARRAY
14864: PUSH
14865: LD_VAR 0 5
14869: EQUAL
14870: IFFALSE 14915
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14872: LD_ADDR_VAR 0 1
14876: PUSH
14877: LD_VAR 0 1
14881: PPUSH
14882: LD_INT 1
14884: PPUSH
14885: LD_VAR 0 1
14889: PUSH
14890: LD_INT 1
14892: ARRAY
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: CALL_OW 3
14901: PPUSH
14902: CALL_OW 1
14906: ST_TO_ADDR
// tmp := 1 ;
14907: LD_ADDR_VAR 0 2
14911: PUSH
14912: LD_STRING 1
14914: ST_TO_ADDR
// end ; normal := normal & tmp ;
14915: LD_ADDR_VAR 0 3
14919: PUSH
14920: LD_VAR 0 3
14924: PUSH
14925: LD_VAR 0 2
14929: STR
14930: ST_TO_ADDR
// end ;
14931: GO 14831
14933: POP
14934: POP
// for i = 1 to hardcoreCounter do
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: DOUBLE
14941: LD_INT 1
14943: DEC
14944: ST_TO_ADDR
14945: LD_EXP 21
14949: PUSH
14950: FOR_TO
14951: IFFALSE 15056
// begin tmp := 0 ;
14953: LD_ADDR_VAR 0 2
14957: PUSH
14958: LD_STRING 0
14960: ST_TO_ADDR
// if result [ 2 ] then
14961: LD_VAR 0 1
14965: PUSH
14966: LD_INT 2
14968: ARRAY
14969: IFFALSE 15038
// if result [ 2 ] [ 1 ] = 100 + i then
14971: LD_VAR 0 1
14975: PUSH
14976: LD_INT 2
14978: ARRAY
14979: PUSH
14980: LD_INT 1
14982: ARRAY
14983: PUSH
14984: LD_INT 100
14986: PUSH
14987: LD_VAR 0 5
14991: PLUS
14992: EQUAL
14993: IFFALSE 15038
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14995: LD_ADDR_VAR 0 1
14999: PUSH
15000: LD_VAR 0 1
15004: PPUSH
15005: LD_INT 2
15007: PPUSH
15008: LD_VAR 0 1
15012: PUSH
15013: LD_INT 2
15015: ARRAY
15016: PPUSH
15017: LD_INT 1
15019: PPUSH
15020: CALL_OW 3
15024: PPUSH
15025: CALL_OW 1
15029: ST_TO_ADDR
// tmp := 1 ;
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: LD_STRING 1
15037: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15038: LD_ADDR_VAR 0 4
15042: PUSH
15043: LD_VAR 0 4
15047: PUSH
15048: LD_VAR 0 2
15052: STR
15053: ST_TO_ADDR
// end ;
15054: GO 14950
15056: POP
15057: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15058: LD_STRING getStreamItemsFromMission("
15060: PUSH
15061: LD_VAR 0 3
15065: STR
15066: PUSH
15067: LD_STRING ","
15069: STR
15070: PUSH
15071: LD_VAR 0 4
15075: STR
15076: PUSH
15077: LD_STRING ")
15079: STR
15080: PPUSH
15081: CALL_OW 559
// end else
15085: GO 15094
// ToLua ( getStreamItemsFromMission("","") ) ;
15087: LD_STRING getStreamItemsFromMission("","")
15089: PPUSH
15090: CALL_OW 559
// end ;
15094: LD_VAR 0 1
15098: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15099: LD_VAR 0 2
15103: PUSH
15104: LD_INT 100
15106: EQUAL
15107: IFFALSE 16056
// begin if not StreamModeActive then
15109: LD_EXP 19
15113: NOT
15114: IFFALSE 15124
// StreamModeActive := true ;
15116: LD_ADDR_EXP 19
15120: PUSH
15121: LD_INT 1
15123: ST_TO_ADDR
// if p3 = 0 then
15124: LD_VAR 0 3
15128: PUSH
15129: LD_INT 0
15131: EQUAL
15132: IFFALSE 15138
// InitStreamMode ;
15134: CALL 11359 0 0
// if p3 = 1 then
15138: LD_VAR 0 3
15142: PUSH
15143: LD_INT 1
15145: EQUAL
15146: IFFALSE 15156
// sRocket := true ;
15148: LD_ADDR_EXP 24
15152: PUSH
15153: LD_INT 1
15155: ST_TO_ADDR
// if p3 = 2 then
15156: LD_VAR 0 3
15160: PUSH
15161: LD_INT 2
15163: EQUAL
15164: IFFALSE 15174
// sSpeed := true ;
15166: LD_ADDR_EXP 23
15170: PUSH
15171: LD_INT 1
15173: ST_TO_ADDR
// if p3 = 3 then
15174: LD_VAR 0 3
15178: PUSH
15179: LD_INT 3
15181: EQUAL
15182: IFFALSE 15192
// sEngine := true ;
15184: LD_ADDR_EXP 25
15188: PUSH
15189: LD_INT 1
15191: ST_TO_ADDR
// if p3 = 4 then
15192: LD_VAR 0 3
15196: PUSH
15197: LD_INT 4
15199: EQUAL
15200: IFFALSE 15210
// sSpec := true ;
15202: LD_ADDR_EXP 22
15206: PUSH
15207: LD_INT 1
15209: ST_TO_ADDR
// if p3 = 5 then
15210: LD_VAR 0 3
15214: PUSH
15215: LD_INT 5
15217: EQUAL
15218: IFFALSE 15228
// sLevel := true ;
15220: LD_ADDR_EXP 26
15224: PUSH
15225: LD_INT 1
15227: ST_TO_ADDR
// if p3 = 6 then
15228: LD_VAR 0 3
15232: PUSH
15233: LD_INT 6
15235: EQUAL
15236: IFFALSE 15246
// sArmoury := true ;
15238: LD_ADDR_EXP 27
15242: PUSH
15243: LD_INT 1
15245: ST_TO_ADDR
// if p3 = 7 then
15246: LD_VAR 0 3
15250: PUSH
15251: LD_INT 7
15253: EQUAL
15254: IFFALSE 15264
// sRadar := true ;
15256: LD_ADDR_EXP 28
15260: PUSH
15261: LD_INT 1
15263: ST_TO_ADDR
// if p3 = 8 then
15264: LD_VAR 0 3
15268: PUSH
15269: LD_INT 8
15271: EQUAL
15272: IFFALSE 15282
// sBunker := true ;
15274: LD_ADDR_EXP 29
15278: PUSH
15279: LD_INT 1
15281: ST_TO_ADDR
// if p3 = 9 then
15282: LD_VAR 0 3
15286: PUSH
15287: LD_INT 9
15289: EQUAL
15290: IFFALSE 15300
// sHack := true ;
15292: LD_ADDR_EXP 30
15296: PUSH
15297: LD_INT 1
15299: ST_TO_ADDR
// if p3 = 10 then
15300: LD_VAR 0 3
15304: PUSH
15305: LD_INT 10
15307: EQUAL
15308: IFFALSE 15318
// sFire := true ;
15310: LD_ADDR_EXP 31
15314: PUSH
15315: LD_INT 1
15317: ST_TO_ADDR
// if p3 = 11 then
15318: LD_VAR 0 3
15322: PUSH
15323: LD_INT 11
15325: EQUAL
15326: IFFALSE 15336
// sRefresh := true ;
15328: LD_ADDR_EXP 32
15332: PUSH
15333: LD_INT 1
15335: ST_TO_ADDR
// if p3 = 12 then
15336: LD_VAR 0 3
15340: PUSH
15341: LD_INT 12
15343: EQUAL
15344: IFFALSE 15354
// sExp := true ;
15346: LD_ADDR_EXP 33
15350: PUSH
15351: LD_INT 1
15353: ST_TO_ADDR
// if p3 = 13 then
15354: LD_VAR 0 3
15358: PUSH
15359: LD_INT 13
15361: EQUAL
15362: IFFALSE 15372
// sDepot := true ;
15364: LD_ADDR_EXP 34
15368: PUSH
15369: LD_INT 1
15371: ST_TO_ADDR
// if p3 = 14 then
15372: LD_VAR 0 3
15376: PUSH
15377: LD_INT 14
15379: EQUAL
15380: IFFALSE 15390
// sFlag := true ;
15382: LD_ADDR_EXP 35
15386: PUSH
15387: LD_INT 1
15389: ST_TO_ADDR
// if p3 = 15 then
15390: LD_VAR 0 3
15394: PUSH
15395: LD_INT 15
15397: EQUAL
15398: IFFALSE 15408
// sKamikadze := true ;
15400: LD_ADDR_EXP 43
15404: PUSH
15405: LD_INT 1
15407: ST_TO_ADDR
// if p3 = 16 then
15408: LD_VAR 0 3
15412: PUSH
15413: LD_INT 16
15415: EQUAL
15416: IFFALSE 15426
// sTroll := true ;
15418: LD_ADDR_EXP 44
15422: PUSH
15423: LD_INT 1
15425: ST_TO_ADDR
// if p3 = 17 then
15426: LD_VAR 0 3
15430: PUSH
15431: LD_INT 17
15433: EQUAL
15434: IFFALSE 15444
// sSlow := true ;
15436: LD_ADDR_EXP 45
15440: PUSH
15441: LD_INT 1
15443: ST_TO_ADDR
// if p3 = 18 then
15444: LD_VAR 0 3
15448: PUSH
15449: LD_INT 18
15451: EQUAL
15452: IFFALSE 15462
// sLack := true ;
15454: LD_ADDR_EXP 46
15458: PUSH
15459: LD_INT 1
15461: ST_TO_ADDR
// if p3 = 19 then
15462: LD_VAR 0 3
15466: PUSH
15467: LD_INT 19
15469: EQUAL
15470: IFFALSE 15480
// sTank := true ;
15472: LD_ADDR_EXP 48
15476: PUSH
15477: LD_INT 1
15479: ST_TO_ADDR
// if p3 = 20 then
15480: LD_VAR 0 3
15484: PUSH
15485: LD_INT 20
15487: EQUAL
15488: IFFALSE 15498
// sRemote := true ;
15490: LD_ADDR_EXP 49
15494: PUSH
15495: LD_INT 1
15497: ST_TO_ADDR
// if p3 = 21 then
15498: LD_VAR 0 3
15502: PUSH
15503: LD_INT 21
15505: EQUAL
15506: IFFALSE 15516
// sPowell := true ;
15508: LD_ADDR_EXP 50
15512: PUSH
15513: LD_INT 1
15515: ST_TO_ADDR
// if p3 = 22 then
15516: LD_VAR 0 3
15520: PUSH
15521: LD_INT 22
15523: EQUAL
15524: IFFALSE 15534
// sTeleport := true ;
15526: LD_ADDR_EXP 53
15530: PUSH
15531: LD_INT 1
15533: ST_TO_ADDR
// if p3 = 23 then
15534: LD_VAR 0 3
15538: PUSH
15539: LD_INT 23
15541: EQUAL
15542: IFFALSE 15552
// sOilTower := true ;
15544: LD_ADDR_EXP 55
15548: PUSH
15549: LD_INT 1
15551: ST_TO_ADDR
// if p3 = 24 then
15552: LD_VAR 0 3
15556: PUSH
15557: LD_INT 24
15559: EQUAL
15560: IFFALSE 15570
// sShovel := true ;
15562: LD_ADDR_EXP 56
15566: PUSH
15567: LD_INT 1
15569: ST_TO_ADDR
// if p3 = 25 then
15570: LD_VAR 0 3
15574: PUSH
15575: LD_INT 25
15577: EQUAL
15578: IFFALSE 15588
// sSheik := true ;
15580: LD_ADDR_EXP 57
15584: PUSH
15585: LD_INT 1
15587: ST_TO_ADDR
// if p3 = 26 then
15588: LD_VAR 0 3
15592: PUSH
15593: LD_INT 26
15595: EQUAL
15596: IFFALSE 15606
// sEarthquake := true ;
15598: LD_ADDR_EXP 59
15602: PUSH
15603: LD_INT 1
15605: ST_TO_ADDR
// if p3 = 27 then
15606: LD_VAR 0 3
15610: PUSH
15611: LD_INT 27
15613: EQUAL
15614: IFFALSE 15624
// sAI := true ;
15616: LD_ADDR_EXP 60
15620: PUSH
15621: LD_INT 1
15623: ST_TO_ADDR
// if p3 = 28 then
15624: LD_VAR 0 3
15628: PUSH
15629: LD_INT 28
15631: EQUAL
15632: IFFALSE 15642
// sCargo := true ;
15634: LD_ADDR_EXP 63
15638: PUSH
15639: LD_INT 1
15641: ST_TO_ADDR
// if p3 = 29 then
15642: LD_VAR 0 3
15646: PUSH
15647: LD_INT 29
15649: EQUAL
15650: IFFALSE 15660
// sDLaser := true ;
15652: LD_ADDR_EXP 64
15656: PUSH
15657: LD_INT 1
15659: ST_TO_ADDR
// if p3 = 30 then
15660: LD_VAR 0 3
15664: PUSH
15665: LD_INT 30
15667: EQUAL
15668: IFFALSE 15678
// sExchange := true ;
15670: LD_ADDR_EXP 65
15674: PUSH
15675: LD_INT 1
15677: ST_TO_ADDR
// if p3 = 31 then
15678: LD_VAR 0 3
15682: PUSH
15683: LD_INT 31
15685: EQUAL
15686: IFFALSE 15696
// sFac := true ;
15688: LD_ADDR_EXP 66
15692: PUSH
15693: LD_INT 1
15695: ST_TO_ADDR
// if p3 = 32 then
15696: LD_VAR 0 3
15700: PUSH
15701: LD_INT 32
15703: EQUAL
15704: IFFALSE 15714
// sPower := true ;
15706: LD_ADDR_EXP 67
15710: PUSH
15711: LD_INT 1
15713: ST_TO_ADDR
// if p3 = 33 then
15714: LD_VAR 0 3
15718: PUSH
15719: LD_INT 33
15721: EQUAL
15722: IFFALSE 15732
// sRandom := true ;
15724: LD_ADDR_EXP 68
15728: PUSH
15729: LD_INT 1
15731: ST_TO_ADDR
// if p3 = 34 then
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 34
15739: EQUAL
15740: IFFALSE 15750
// sShield := true ;
15742: LD_ADDR_EXP 69
15746: PUSH
15747: LD_INT 1
15749: ST_TO_ADDR
// if p3 = 35 then
15750: LD_VAR 0 3
15754: PUSH
15755: LD_INT 35
15757: EQUAL
15758: IFFALSE 15768
// sTime := true ;
15760: LD_ADDR_EXP 70
15764: PUSH
15765: LD_INT 1
15767: ST_TO_ADDR
// if p3 = 36 then
15768: LD_VAR 0 3
15772: PUSH
15773: LD_INT 36
15775: EQUAL
15776: IFFALSE 15786
// sTools := true ;
15778: LD_ADDR_EXP 71
15782: PUSH
15783: LD_INT 1
15785: ST_TO_ADDR
// if p3 = 101 then
15786: LD_VAR 0 3
15790: PUSH
15791: LD_INT 101
15793: EQUAL
15794: IFFALSE 15804
// sSold := true ;
15796: LD_ADDR_EXP 36
15800: PUSH
15801: LD_INT 1
15803: ST_TO_ADDR
// if p3 = 102 then
15804: LD_VAR 0 3
15808: PUSH
15809: LD_INT 102
15811: EQUAL
15812: IFFALSE 15822
// sDiff := true ;
15814: LD_ADDR_EXP 37
15818: PUSH
15819: LD_INT 1
15821: ST_TO_ADDR
// if p3 = 103 then
15822: LD_VAR 0 3
15826: PUSH
15827: LD_INT 103
15829: EQUAL
15830: IFFALSE 15840
// sFog := true ;
15832: LD_ADDR_EXP 40
15836: PUSH
15837: LD_INT 1
15839: ST_TO_ADDR
// if p3 = 104 then
15840: LD_VAR 0 3
15844: PUSH
15845: LD_INT 104
15847: EQUAL
15848: IFFALSE 15858
// sReset := true ;
15850: LD_ADDR_EXP 41
15854: PUSH
15855: LD_INT 1
15857: ST_TO_ADDR
// if p3 = 105 then
15858: LD_VAR 0 3
15862: PUSH
15863: LD_INT 105
15865: EQUAL
15866: IFFALSE 15876
// sSun := true ;
15868: LD_ADDR_EXP 42
15872: PUSH
15873: LD_INT 1
15875: ST_TO_ADDR
// if p3 = 106 then
15876: LD_VAR 0 3
15880: PUSH
15881: LD_INT 106
15883: EQUAL
15884: IFFALSE 15894
// sTiger := true ;
15886: LD_ADDR_EXP 38
15890: PUSH
15891: LD_INT 1
15893: ST_TO_ADDR
// if p3 = 107 then
15894: LD_VAR 0 3
15898: PUSH
15899: LD_INT 107
15901: EQUAL
15902: IFFALSE 15912
// sBomb := true ;
15904: LD_ADDR_EXP 39
15908: PUSH
15909: LD_INT 1
15911: ST_TO_ADDR
// if p3 = 108 then
15912: LD_VAR 0 3
15916: PUSH
15917: LD_INT 108
15919: EQUAL
15920: IFFALSE 15930
// sWound := true ;
15922: LD_ADDR_EXP 47
15926: PUSH
15927: LD_INT 1
15929: ST_TO_ADDR
// if p3 = 109 then
15930: LD_VAR 0 3
15934: PUSH
15935: LD_INT 109
15937: EQUAL
15938: IFFALSE 15948
// sBetray := true ;
15940: LD_ADDR_EXP 51
15944: PUSH
15945: LD_INT 1
15947: ST_TO_ADDR
// if p3 = 110 then
15948: LD_VAR 0 3
15952: PUSH
15953: LD_INT 110
15955: EQUAL
15956: IFFALSE 15966
// sContamin := true ;
15958: LD_ADDR_EXP 52
15962: PUSH
15963: LD_INT 1
15965: ST_TO_ADDR
// if p3 = 111 then
15966: LD_VAR 0 3
15970: PUSH
15971: LD_INT 111
15973: EQUAL
15974: IFFALSE 15984
// sOil := true ;
15976: LD_ADDR_EXP 54
15980: PUSH
15981: LD_INT 1
15983: ST_TO_ADDR
// if p3 = 112 then
15984: LD_VAR 0 3
15988: PUSH
15989: LD_INT 112
15991: EQUAL
15992: IFFALSE 16002
// sStu := true ;
15994: LD_ADDR_EXP 58
15998: PUSH
15999: LD_INT 1
16001: ST_TO_ADDR
// if p3 = 113 then
16002: LD_VAR 0 3
16006: PUSH
16007: LD_INT 113
16009: EQUAL
16010: IFFALSE 16020
// sBazooka := true ;
16012: LD_ADDR_EXP 61
16016: PUSH
16017: LD_INT 1
16019: ST_TO_ADDR
// if p3 = 114 then
16020: LD_VAR 0 3
16024: PUSH
16025: LD_INT 114
16027: EQUAL
16028: IFFALSE 16038
// sMortar := true ;
16030: LD_ADDR_EXP 62
16034: PUSH
16035: LD_INT 1
16037: ST_TO_ADDR
// if p3 = 115 then
16038: LD_VAR 0 3
16042: PUSH
16043: LD_INT 115
16045: EQUAL
16046: IFFALSE 16056
// sRanger := true ;
16048: LD_ADDR_EXP 72
16052: PUSH
16053: LD_INT 1
16055: ST_TO_ADDR
// end ; end ;
16056: PPOPN 6
16058: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16059: LD_EXP 19
16063: PUSH
16064: LD_EXP 24
16068: AND
16069: IFFALSE 16193
16071: GO 16073
16073: DISABLE
16074: LD_INT 0
16076: PPUSH
16077: PPUSH
// begin enable ;
16078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16079: LD_ADDR_VAR 0 2
16083: PUSH
16084: LD_INT 22
16086: PUSH
16087: LD_OWVAR 2
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: LD_INT 34
16101: PUSH
16102: LD_INT 7
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 34
16111: PUSH
16112: LD_INT 45
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 34
16121: PUSH
16122: LD_INT 28
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 34
16131: PUSH
16132: LD_INT 47
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PPUSH
16150: CALL_OW 69
16154: ST_TO_ADDR
// if not tmp then
16155: LD_VAR 0 2
16159: NOT
16160: IFFALSE 16164
// exit ;
16162: GO 16193
// for i in tmp do
16164: LD_ADDR_VAR 0 1
16168: PUSH
16169: LD_VAR 0 2
16173: PUSH
16174: FOR_IN
16175: IFFALSE 16191
// begin SetLives ( i , 0 ) ;
16177: LD_VAR 0 1
16181: PPUSH
16182: LD_INT 0
16184: PPUSH
16185: CALL_OW 234
// end ;
16189: GO 16174
16191: POP
16192: POP
// end ;
16193: PPOPN 2
16195: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16196: LD_EXP 19
16200: PUSH
16201: LD_EXP 25
16205: AND
16206: IFFALSE 16290
16208: GO 16210
16210: DISABLE
16211: LD_INT 0
16213: PPUSH
16214: PPUSH
// begin enable ;
16215: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16216: LD_ADDR_VAR 0 2
16220: PUSH
16221: LD_INT 22
16223: PUSH
16224: LD_OWVAR 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 32
16235: PUSH
16236: LD_INT 3
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PPUSH
16247: CALL_OW 69
16251: ST_TO_ADDR
// if not tmp then
16252: LD_VAR 0 2
16256: NOT
16257: IFFALSE 16261
// exit ;
16259: GO 16290
// for i in tmp do
16261: LD_ADDR_VAR 0 1
16265: PUSH
16266: LD_VAR 0 2
16270: PUSH
16271: FOR_IN
16272: IFFALSE 16288
// begin SetLives ( i , 0 ) ;
16274: LD_VAR 0 1
16278: PPUSH
16279: LD_INT 0
16281: PPUSH
16282: CALL_OW 234
// end ;
16286: GO 16271
16288: POP
16289: POP
// end ;
16290: PPOPN 2
16292: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16293: LD_EXP 19
16297: PUSH
16298: LD_EXP 22
16302: AND
16303: IFFALSE 16396
16305: GO 16307
16307: DISABLE
16308: LD_INT 0
16310: PPUSH
// begin enable ;
16311: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16312: LD_ADDR_VAR 0 1
16316: PUSH
16317: LD_INT 22
16319: PUSH
16320: LD_OWVAR 2
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 2
16331: PUSH
16332: LD_INT 25
16334: PUSH
16335: LD_INT 5
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 25
16344: PUSH
16345: LD_INT 9
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 25
16354: PUSH
16355: LD_INT 8
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PPUSH
16372: CALL_OW 69
16376: PUSH
16377: FOR_IN
16378: IFFALSE 16394
// begin SetClass ( i , 1 ) ;
16380: LD_VAR 0 1
16384: PPUSH
16385: LD_INT 1
16387: PPUSH
16388: CALL_OW 336
// end ;
16392: GO 16377
16394: POP
16395: POP
// end ;
16396: PPOPN 1
16398: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16399: LD_EXP 19
16403: PUSH
16404: LD_EXP 23
16408: AND
16409: PUSH
16410: LD_OWVAR 65
16414: PUSH
16415: LD_INT 7
16417: LESS
16418: AND
16419: IFFALSE 16433
16421: GO 16423
16423: DISABLE
// begin enable ;
16424: ENABLE
// game_speed := 7 ;
16425: LD_ADDR_OWVAR 65
16429: PUSH
16430: LD_INT 7
16432: ST_TO_ADDR
// end ;
16433: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16434: LD_EXP 19
16438: PUSH
16439: LD_EXP 26
16443: AND
16444: IFFALSE 16646
16446: GO 16448
16448: DISABLE
16449: LD_INT 0
16451: PPUSH
16452: PPUSH
16453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16454: LD_ADDR_VAR 0 3
16458: PUSH
16459: LD_INT 81
16461: PUSH
16462: LD_OWVAR 2
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 21
16473: PUSH
16474: LD_INT 1
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PPUSH
16485: CALL_OW 69
16489: ST_TO_ADDR
// if not tmp then
16490: LD_VAR 0 3
16494: NOT
16495: IFFALSE 16499
// exit ;
16497: GO 16646
// if tmp > 5 then
16499: LD_VAR 0 3
16503: PUSH
16504: LD_INT 5
16506: GREATER
16507: IFFALSE 16519
// k := 5 else
16509: LD_ADDR_VAR 0 2
16513: PUSH
16514: LD_INT 5
16516: ST_TO_ADDR
16517: GO 16529
// k := tmp ;
16519: LD_ADDR_VAR 0 2
16523: PUSH
16524: LD_VAR 0 3
16528: ST_TO_ADDR
// for i := 1 to k do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_VAR 0 2
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16644
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16547: LD_VAR 0 3
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_VAR 0 1
16562: PUSH
16563: LD_INT 4
16565: MOD
16566: PUSH
16567: LD_INT 1
16569: PLUS
16570: PPUSH
16571: CALL_OW 259
16575: PUSH
16576: LD_INT 10
16578: LESS
16579: IFFALSE 16642
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16581: LD_VAR 0 3
16585: PUSH
16586: LD_VAR 0 1
16590: ARRAY
16591: PPUSH
16592: LD_VAR 0 1
16596: PUSH
16597: LD_INT 4
16599: MOD
16600: PUSH
16601: LD_INT 1
16603: PLUS
16604: PPUSH
16605: LD_VAR 0 3
16609: PUSH
16610: LD_VAR 0 1
16614: ARRAY
16615: PPUSH
16616: LD_VAR 0 1
16620: PUSH
16621: LD_INT 4
16623: MOD
16624: PUSH
16625: LD_INT 1
16627: PLUS
16628: PPUSH
16629: CALL_OW 259
16633: PUSH
16634: LD_INT 1
16636: PLUS
16637: PPUSH
16638: CALL_OW 237
16642: GO 16544
16644: POP
16645: POP
// end ;
16646: PPOPN 3
16648: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16649: LD_EXP 19
16653: PUSH
16654: LD_EXP 27
16658: AND
16659: IFFALSE 16679
16661: GO 16663
16663: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16664: LD_INT 4
16666: PPUSH
16667: LD_OWVAR 2
16671: PPUSH
16672: LD_INT 0
16674: PPUSH
16675: CALL_OW 324
16679: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16680: LD_EXP 19
16684: PUSH
16685: LD_EXP 56
16689: AND
16690: IFFALSE 16710
16692: GO 16694
16694: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16695: LD_INT 19
16697: PPUSH
16698: LD_OWVAR 2
16702: PPUSH
16703: LD_INT 0
16705: PPUSH
16706: CALL_OW 324
16710: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16711: LD_EXP 19
16715: PUSH
16716: LD_EXP 28
16720: AND
16721: IFFALSE 16823
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
16729: PPUSH
// begin enable ;
16730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16731: LD_ADDR_VAR 0 2
16735: PUSH
16736: LD_INT 22
16738: PUSH
16739: LD_OWVAR 2
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 2
16750: PUSH
16751: LD_INT 34
16753: PUSH
16754: LD_INT 11
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 34
16763: PUSH
16764: LD_INT 30
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: LIST
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PPUSH
16780: CALL_OW 69
16784: ST_TO_ADDR
// if not tmp then
16785: LD_VAR 0 2
16789: NOT
16790: IFFALSE 16794
// exit ;
16792: GO 16823
// for i in tmp do
16794: LD_ADDR_VAR 0 1
16798: PUSH
16799: LD_VAR 0 2
16803: PUSH
16804: FOR_IN
16805: IFFALSE 16821
// begin SetLives ( i , 0 ) ;
16807: LD_VAR 0 1
16811: PPUSH
16812: LD_INT 0
16814: PPUSH
16815: CALL_OW 234
// end ;
16819: GO 16804
16821: POP
16822: POP
// end ;
16823: PPOPN 2
16825: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16826: LD_EXP 19
16830: PUSH
16831: LD_EXP 29
16835: AND
16836: IFFALSE 16856
16838: GO 16840
16840: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16841: LD_INT 32
16843: PPUSH
16844: LD_OWVAR 2
16848: PPUSH
16849: LD_INT 0
16851: PPUSH
16852: CALL_OW 324
16856: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16857: LD_EXP 19
16861: PUSH
16862: LD_EXP 30
16866: AND
16867: IFFALSE 17048
16869: GO 16871
16871: DISABLE
16872: LD_INT 0
16874: PPUSH
16875: PPUSH
16876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16877: LD_ADDR_VAR 0 2
16881: PUSH
16882: LD_INT 22
16884: PUSH
16885: LD_OWVAR 2
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 33
16896: PUSH
16897: LD_INT 3
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PPUSH
16908: CALL_OW 69
16912: ST_TO_ADDR
// if not tmp then
16913: LD_VAR 0 2
16917: NOT
16918: IFFALSE 16922
// exit ;
16920: GO 17048
// side := 0 ;
16922: LD_ADDR_VAR 0 3
16926: PUSH
16927: LD_INT 0
16929: ST_TO_ADDR
// for i := 1 to 8 do
16930: LD_ADDR_VAR 0 1
16934: PUSH
16935: DOUBLE
16936: LD_INT 1
16938: DEC
16939: ST_TO_ADDR
16940: LD_INT 8
16942: PUSH
16943: FOR_TO
16944: IFFALSE 16992
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16946: LD_OWVAR 2
16950: PUSH
16951: LD_VAR 0 1
16955: NONEQUAL
16956: PUSH
16957: LD_OWVAR 2
16961: PPUSH
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 81
16971: PUSH
16972: LD_INT 2
16974: EQUAL
16975: AND
16976: IFFALSE 16990
// begin side := i ;
16978: LD_ADDR_VAR 0 3
16982: PUSH
16983: LD_VAR 0 1
16987: ST_TO_ADDR
// break ;
16988: GO 16992
// end ;
16990: GO 16943
16992: POP
16993: POP
// if not side then
16994: LD_VAR 0 3
16998: NOT
16999: IFFALSE 17003
// exit ;
17001: GO 17048
// for i := 1 to tmp do
17003: LD_ADDR_VAR 0 1
17007: PUSH
17008: DOUBLE
17009: LD_INT 1
17011: DEC
17012: ST_TO_ADDR
17013: LD_VAR 0 2
17017: PUSH
17018: FOR_TO
17019: IFFALSE 17046
// if Prob ( 60 ) then
17021: LD_INT 60
17023: PPUSH
17024: CALL_OW 13
17028: IFFALSE 17044
// SetSide ( i , side ) ;
17030: LD_VAR 0 1
17034: PPUSH
17035: LD_VAR 0 3
17039: PPUSH
17040: CALL_OW 235
17044: GO 17018
17046: POP
17047: POP
// end ;
17048: PPOPN 3
17050: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17051: LD_EXP 19
17055: PUSH
17056: LD_EXP 32
17060: AND
17061: IFFALSE 17180
17063: GO 17065
17065: DISABLE
17066: LD_INT 0
17068: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17069: LD_ADDR_VAR 0 1
17073: PUSH
17074: LD_INT 22
17076: PUSH
17077: LD_OWVAR 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 21
17088: PUSH
17089: LD_INT 1
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 3
17098: PUSH
17099: LD_INT 23
17101: PUSH
17102: LD_INT 0
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: PPUSH
17118: CALL_OW 69
17122: PUSH
17123: FOR_IN
17124: IFFALSE 17178
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17126: LD_VAR 0 1
17130: PPUSH
17131: CALL_OW 257
17135: PUSH
17136: LD_INT 1
17138: PUSH
17139: LD_INT 2
17141: PUSH
17142: LD_INT 3
17144: PUSH
17145: LD_INT 4
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: IN
17154: IFFALSE 17176
// SetClass ( un , rand ( 1 , 4 ) ) ;
17156: LD_VAR 0 1
17160: PPUSH
17161: LD_INT 1
17163: PPUSH
17164: LD_INT 4
17166: PPUSH
17167: CALL_OW 12
17171: PPUSH
17172: CALL_OW 336
17176: GO 17123
17178: POP
17179: POP
// end ;
17180: PPOPN 1
17182: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17183: LD_EXP 19
17187: PUSH
17188: LD_EXP 31
17192: AND
17193: IFFALSE 17272
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17201: LD_ADDR_VAR 0 1
17205: PUSH
17206: LD_INT 22
17208: PUSH
17209: LD_OWVAR 2
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 21
17220: PUSH
17221: LD_INT 3
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// if not tmp then
17237: LD_VAR 0 1
17241: NOT
17242: IFFALSE 17246
// exit ;
17244: GO 17272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17246: LD_VAR 0 1
17250: PUSH
17251: LD_INT 1
17253: PPUSH
17254: LD_VAR 0 1
17258: PPUSH
17259: CALL_OW 12
17263: ARRAY
17264: PPUSH
17265: LD_INT 100
17267: PPUSH
17268: CALL_OW 234
// end ;
17272: PPOPN 1
17274: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17275: LD_EXP 19
17279: PUSH
17280: LD_EXP 33
17284: AND
17285: IFFALSE 17383
17287: GO 17289
17289: DISABLE
17290: LD_INT 0
17292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17293: LD_ADDR_VAR 0 1
17297: PUSH
17298: LD_INT 22
17300: PUSH
17301: LD_OWVAR 2
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 21
17312: PUSH
17313: LD_INT 1
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PPUSH
17324: CALL_OW 69
17328: ST_TO_ADDR
// if not tmp then
17329: LD_VAR 0 1
17333: NOT
17334: IFFALSE 17338
// exit ;
17336: GO 17383
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17338: LD_VAR 0 1
17342: PUSH
17343: LD_INT 1
17345: PPUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: CALL_OW 12
17355: ARRAY
17356: PPUSH
17357: LD_INT 1
17359: PPUSH
17360: LD_INT 4
17362: PPUSH
17363: CALL_OW 12
17367: PPUSH
17368: LD_INT 3000
17370: PPUSH
17371: LD_INT 9000
17373: PPUSH
17374: CALL_OW 12
17378: PPUSH
17379: CALL_OW 492
// end ;
17383: PPOPN 1
17385: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17386: LD_EXP 19
17390: PUSH
17391: LD_EXP 34
17395: AND
17396: IFFALSE 17416
17398: GO 17400
17400: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17401: LD_INT 1
17403: PPUSH
17404: LD_OWVAR 2
17408: PPUSH
17409: LD_INT 0
17411: PPUSH
17412: CALL_OW 324
17416: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17417: LD_EXP 19
17421: PUSH
17422: LD_EXP 35
17426: AND
17427: IFFALSE 17510
17429: GO 17431
17431: DISABLE
17432: LD_INT 0
17434: PPUSH
17435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17436: LD_ADDR_VAR 0 2
17440: PUSH
17441: LD_INT 22
17443: PUSH
17444: LD_OWVAR 2
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 21
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PPUSH
17467: CALL_OW 69
17471: ST_TO_ADDR
// if not tmp then
17472: LD_VAR 0 2
17476: NOT
17477: IFFALSE 17481
// exit ;
17479: GO 17510
// for i in tmp do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: LD_VAR 0 2
17490: PUSH
17491: FOR_IN
17492: IFFALSE 17508
// SetBLevel ( i , 10 ) ;
17494: LD_VAR 0 1
17498: PPUSH
17499: LD_INT 10
17501: PPUSH
17502: CALL_OW 241
17506: GO 17491
17508: POP
17509: POP
// end ;
17510: PPOPN 2
17512: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17513: LD_EXP 19
17517: PUSH
17518: LD_EXP 36
17522: AND
17523: IFFALSE 17634
17525: GO 17527
17527: DISABLE
17528: LD_INT 0
17530: PPUSH
17531: PPUSH
17532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17533: LD_ADDR_VAR 0 3
17537: PUSH
17538: LD_INT 22
17540: PUSH
17541: LD_OWVAR 2
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 25
17552: PUSH
17553: LD_INT 1
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PPUSH
17564: CALL_OW 69
17568: ST_TO_ADDR
// if not tmp then
17569: LD_VAR 0 3
17573: NOT
17574: IFFALSE 17578
// exit ;
17576: GO 17634
// un := tmp [ rand ( 1 , tmp ) ] ;
17578: LD_ADDR_VAR 0 2
17582: PUSH
17583: LD_VAR 0 3
17587: PUSH
17588: LD_INT 1
17590: PPUSH
17591: LD_VAR 0 3
17595: PPUSH
17596: CALL_OW 12
17600: ARRAY
17601: ST_TO_ADDR
// if Crawls ( un ) then
17602: LD_VAR 0 2
17606: PPUSH
17607: CALL_OW 318
17611: IFFALSE 17622
// ComWalk ( un ) ;
17613: LD_VAR 0 2
17617: PPUSH
17618: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17622: LD_VAR 0 2
17626: PPUSH
17627: LD_INT 5
17629: PPUSH
17630: CALL_OW 336
// end ;
17634: PPOPN 3
17636: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17637: LD_EXP 19
17641: PUSH
17642: LD_EXP 37
17646: AND
17647: PUSH
17648: LD_OWVAR 67
17652: PUSH
17653: LD_INT 3
17655: LESS
17656: AND
17657: IFFALSE 17676
17659: GO 17661
17661: DISABLE
// Difficulty := Difficulty + 1 ;
17662: LD_ADDR_OWVAR 67
17666: PUSH
17667: LD_OWVAR 67
17671: PUSH
17672: LD_INT 1
17674: PLUS
17675: ST_TO_ADDR
17676: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17677: LD_EXP 19
17681: PUSH
17682: LD_EXP 38
17686: AND
17687: IFFALSE 17790
17689: GO 17691
17691: DISABLE
17692: LD_INT 0
17694: PPUSH
// begin for i := 1 to 5 do
17695: LD_ADDR_VAR 0 1
17699: PUSH
17700: DOUBLE
17701: LD_INT 1
17703: DEC
17704: ST_TO_ADDR
17705: LD_INT 5
17707: PUSH
17708: FOR_TO
17709: IFFALSE 17788
// begin uc_nation := nation_nature ;
17711: LD_ADDR_OWVAR 21
17715: PUSH
17716: LD_INT 0
17718: ST_TO_ADDR
// uc_side := 0 ;
17719: LD_ADDR_OWVAR 20
17723: PUSH
17724: LD_INT 0
17726: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17727: LD_ADDR_OWVAR 29
17731: PUSH
17732: LD_INT 12
17734: PUSH
17735: LD_INT 12
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: ST_TO_ADDR
// hc_agressivity := 20 ;
17742: LD_ADDR_OWVAR 35
17746: PUSH
17747: LD_INT 20
17749: ST_TO_ADDR
// hc_class := class_tiger ;
17750: LD_ADDR_OWVAR 28
17754: PUSH
17755: LD_INT 14
17757: ST_TO_ADDR
// hc_gallery :=  ;
17758: LD_ADDR_OWVAR 33
17762: PUSH
17763: LD_STRING 
17765: ST_TO_ADDR
// hc_name :=  ;
17766: LD_ADDR_OWVAR 26
17770: PUSH
17771: LD_STRING 
17773: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17774: CALL_OW 44
17778: PPUSH
17779: LD_INT 0
17781: PPUSH
17782: CALL_OW 51
// end ;
17786: GO 17708
17788: POP
17789: POP
// end ;
17790: PPOPN 1
17792: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17793: LD_EXP 19
17797: PUSH
17798: LD_EXP 39
17802: AND
17803: IFFALSE 17812
17805: GO 17807
17807: DISABLE
// StreamSibBomb ;
17808: CALL 17813 0 0
17812: END
// export function StreamSibBomb ; var i , x , y ; begin
17813: LD_INT 0
17815: PPUSH
17816: PPUSH
17817: PPUSH
17818: PPUSH
// result := false ;
17819: LD_ADDR_VAR 0 1
17823: PUSH
17824: LD_INT 0
17826: ST_TO_ADDR
// for i := 1 to 16 do
17827: LD_ADDR_VAR 0 2
17831: PUSH
17832: DOUBLE
17833: LD_INT 1
17835: DEC
17836: ST_TO_ADDR
17837: LD_INT 16
17839: PUSH
17840: FOR_TO
17841: IFFALSE 18040
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17843: LD_ADDR_VAR 0 3
17847: PUSH
17848: LD_INT 10
17850: PUSH
17851: LD_INT 20
17853: PUSH
17854: LD_INT 30
17856: PUSH
17857: LD_INT 40
17859: PUSH
17860: LD_INT 50
17862: PUSH
17863: LD_INT 60
17865: PUSH
17866: LD_INT 70
17868: PUSH
17869: LD_INT 80
17871: PUSH
17872: LD_INT 90
17874: PUSH
17875: LD_INT 100
17877: PUSH
17878: LD_INT 110
17880: PUSH
17881: LD_INT 120
17883: PUSH
17884: LD_INT 130
17886: PUSH
17887: LD_INT 140
17889: PUSH
17890: LD_INT 150
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: PPUSH
17913: LD_INT 15
17915: PPUSH
17916: CALL_OW 12
17920: ARRAY
17921: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17922: LD_ADDR_VAR 0 4
17926: PUSH
17927: LD_INT 10
17929: PUSH
17930: LD_INT 20
17932: PUSH
17933: LD_INT 30
17935: PUSH
17936: LD_INT 40
17938: PUSH
17939: LD_INT 50
17941: PUSH
17942: LD_INT 60
17944: PUSH
17945: LD_INT 70
17947: PUSH
17948: LD_INT 80
17950: PUSH
17951: LD_INT 90
17953: PUSH
17954: LD_INT 100
17956: PUSH
17957: LD_INT 110
17959: PUSH
17960: LD_INT 120
17962: PUSH
17963: LD_INT 130
17965: PUSH
17966: LD_INT 140
17968: PUSH
17969: LD_INT 150
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 1
17991: PPUSH
17992: LD_INT 15
17994: PPUSH
17995: CALL_OW 12
17999: ARRAY
18000: ST_TO_ADDR
// if ValidHex ( x , y ) then
18001: LD_VAR 0 3
18005: PPUSH
18006: LD_VAR 0 4
18010: PPUSH
18011: CALL_OW 488
18015: IFFALSE 18038
// begin result := [ x , y ] ;
18017: LD_ADDR_VAR 0 1
18021: PUSH
18022: LD_VAR 0 3
18026: PUSH
18027: LD_VAR 0 4
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: ST_TO_ADDR
// break ;
18036: GO 18040
// end ; end ;
18038: GO 17840
18040: POP
18041: POP
// if result then
18042: LD_VAR 0 1
18046: IFFALSE 18106
// begin ToLua ( playSibBomb() ) ;
18048: LD_STRING playSibBomb()
18050: PPUSH
18051: CALL_OW 559
// wait ( 0 0$14 ) ;
18055: LD_INT 490
18057: PPUSH
18058: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18062: LD_VAR 0 1
18066: PUSH
18067: LD_INT 1
18069: ARRAY
18070: PPUSH
18071: LD_VAR 0 1
18075: PUSH
18076: LD_INT 2
18078: ARRAY
18079: PPUSH
18080: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18084: LD_VAR 0 1
18088: PUSH
18089: LD_INT 1
18091: ARRAY
18092: PPUSH
18093: LD_VAR 0 1
18097: PUSH
18098: LD_INT 2
18100: ARRAY
18101: PPUSH
18102: CALL_OW 429
// end ; end ;
18106: LD_VAR 0 1
18110: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18111: LD_EXP 19
18115: PUSH
18116: LD_EXP 41
18120: AND
18121: IFFALSE 18133
18123: GO 18125
18125: DISABLE
// YouLost (  ) ;
18126: LD_STRING 
18128: PPUSH
18129: CALL_OW 104
18133: END
// every 0 0$1 trigger StreamModeActive and sFog do
18134: LD_EXP 19
18138: PUSH
18139: LD_EXP 40
18143: AND
18144: IFFALSE 18158
18146: GO 18148
18148: DISABLE
// FogOff ( your_side ) ;
18149: LD_OWVAR 2
18153: PPUSH
18154: CALL_OW 344
18158: END
// every 0 0$1 trigger StreamModeActive and sSun do
18159: LD_EXP 19
18163: PUSH
18164: LD_EXP 42
18168: AND
18169: IFFALSE 18197
18171: GO 18173
18173: DISABLE
// begin solar_recharge_percent := 0 ;
18174: LD_ADDR_OWVAR 79
18178: PUSH
18179: LD_INT 0
18181: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18182: LD_INT 10500
18184: PPUSH
18185: CALL_OW 67
// solar_recharge_percent := 100 ;
18189: LD_ADDR_OWVAR 79
18193: PUSH
18194: LD_INT 100
18196: ST_TO_ADDR
// end ;
18197: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18198: LD_EXP 19
18202: PUSH
18203: LD_EXP 43
18207: AND
18208: IFFALSE 18447
18210: GO 18212
18212: DISABLE
18213: LD_INT 0
18215: PPUSH
18216: PPUSH
18217: PPUSH
// begin tmp := [ ] ;
18218: LD_ADDR_VAR 0 3
18222: PUSH
18223: EMPTY
18224: ST_TO_ADDR
// for i := 1 to 6 do
18225: LD_ADDR_VAR 0 1
18229: PUSH
18230: DOUBLE
18231: LD_INT 1
18233: DEC
18234: ST_TO_ADDR
18235: LD_INT 6
18237: PUSH
18238: FOR_TO
18239: IFFALSE 18344
// begin uc_nation := nation_nature ;
18241: LD_ADDR_OWVAR 21
18245: PUSH
18246: LD_INT 0
18248: ST_TO_ADDR
// uc_side := 0 ;
18249: LD_ADDR_OWVAR 20
18253: PUSH
18254: LD_INT 0
18256: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18257: LD_ADDR_OWVAR 29
18261: PUSH
18262: LD_INT 12
18264: PUSH
18265: LD_INT 12
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: ST_TO_ADDR
// hc_agressivity := 20 ;
18272: LD_ADDR_OWVAR 35
18276: PUSH
18277: LD_INT 20
18279: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18280: LD_ADDR_OWVAR 28
18284: PUSH
18285: LD_INT 17
18287: ST_TO_ADDR
// hc_gallery :=  ;
18288: LD_ADDR_OWVAR 33
18292: PUSH
18293: LD_STRING 
18295: ST_TO_ADDR
// hc_name :=  ;
18296: LD_ADDR_OWVAR 26
18300: PUSH
18301: LD_STRING 
18303: ST_TO_ADDR
// un := CreateHuman ;
18304: LD_ADDR_VAR 0 2
18308: PUSH
18309: CALL_OW 44
18313: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18314: LD_VAR 0 2
18318: PPUSH
18319: LD_INT 1
18321: PPUSH
18322: CALL_OW 51
// tmp := tmp ^ un ;
18326: LD_ADDR_VAR 0 3
18330: PUSH
18331: LD_VAR 0 3
18335: PUSH
18336: LD_VAR 0 2
18340: ADD
18341: ST_TO_ADDR
// end ;
18342: GO 18238
18344: POP
18345: POP
// repeat wait ( 0 0$1 ) ;
18346: LD_INT 35
18348: PPUSH
18349: CALL_OW 67
// for un in tmp do
18353: LD_ADDR_VAR 0 2
18357: PUSH
18358: LD_VAR 0 3
18362: PUSH
18363: FOR_IN
18364: IFFALSE 18438
// begin if IsDead ( un ) then
18366: LD_VAR 0 2
18370: PPUSH
18371: CALL_OW 301
18375: IFFALSE 18395
// begin tmp := tmp diff un ;
18377: LD_ADDR_VAR 0 3
18381: PUSH
18382: LD_VAR 0 3
18386: PUSH
18387: LD_VAR 0 2
18391: DIFF
18392: ST_TO_ADDR
// continue ;
18393: GO 18363
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18395: LD_VAR 0 2
18399: PPUSH
18400: LD_INT 3
18402: PUSH
18403: LD_INT 22
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: PPUSH
18422: LD_VAR 0 2
18426: PPUSH
18427: CALL_OW 74
18431: PPUSH
18432: CALL_OW 115
// end ;
18436: GO 18363
18438: POP
18439: POP
// until not tmp ;
18440: LD_VAR 0 3
18444: NOT
18445: IFFALSE 18346
// end ;
18447: PPOPN 3
18449: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18450: LD_EXP 19
18454: PUSH
18455: LD_EXP 44
18459: AND
18460: IFFALSE 18514
18462: GO 18464
18464: DISABLE
// begin ToLua ( displayTroll(); ) ;
18465: LD_STRING displayTroll();
18467: PPUSH
18468: CALL_OW 559
// wait ( 3 3$00 ) ;
18472: LD_INT 6300
18474: PPUSH
18475: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18479: LD_STRING hideTroll();
18481: PPUSH
18482: CALL_OW 559
// wait ( 1 1$00 ) ;
18486: LD_INT 2100
18488: PPUSH
18489: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18493: LD_STRING displayTroll();
18495: PPUSH
18496: CALL_OW 559
// wait ( 1 1$00 ) ;
18500: LD_INT 2100
18502: PPUSH
18503: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18507: LD_STRING hideTroll();
18509: PPUSH
18510: CALL_OW 559
// end ;
18514: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18515: LD_EXP 19
18519: PUSH
18520: LD_EXP 45
18524: AND
18525: IFFALSE 18588
18527: GO 18529
18529: DISABLE
18530: LD_INT 0
18532: PPUSH
// begin p := 0 ;
18533: LD_ADDR_VAR 0 1
18537: PUSH
18538: LD_INT 0
18540: ST_TO_ADDR
// repeat game_speed := 1 ;
18541: LD_ADDR_OWVAR 65
18545: PUSH
18546: LD_INT 1
18548: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18549: LD_INT 35
18551: PPUSH
18552: CALL_OW 67
// p := p + 1 ;
18556: LD_ADDR_VAR 0 1
18560: PUSH
18561: LD_VAR 0 1
18565: PUSH
18566: LD_INT 1
18568: PLUS
18569: ST_TO_ADDR
// until p >= 60 ;
18570: LD_VAR 0 1
18574: PUSH
18575: LD_INT 60
18577: GREATEREQUAL
18578: IFFALSE 18541
// game_speed := 4 ;
18580: LD_ADDR_OWVAR 65
18584: PUSH
18585: LD_INT 4
18587: ST_TO_ADDR
// end ;
18588: PPOPN 1
18590: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18591: LD_EXP 19
18595: PUSH
18596: LD_EXP 46
18600: AND
18601: IFFALSE 18747
18603: GO 18605
18605: DISABLE
18606: LD_INT 0
18608: PPUSH
18609: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18610: LD_ADDR_VAR 0 1
18614: PUSH
18615: LD_INT 22
18617: PUSH
18618: LD_OWVAR 2
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 2
18629: PUSH
18630: LD_INT 30
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 30
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PPUSH
18659: CALL_OW 69
18663: ST_TO_ADDR
// if not depot then
18664: LD_VAR 0 1
18668: NOT
18669: IFFALSE 18673
// exit ;
18671: GO 18747
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18673: LD_ADDR_VAR 0 2
18677: PUSH
18678: LD_VAR 0 1
18682: PUSH
18683: LD_INT 1
18685: PPUSH
18686: LD_VAR 0 1
18690: PPUSH
18691: CALL_OW 12
18695: ARRAY
18696: PPUSH
18697: CALL_OW 274
18701: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18702: LD_VAR 0 2
18706: PPUSH
18707: LD_INT 1
18709: PPUSH
18710: LD_INT 0
18712: PPUSH
18713: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18717: LD_VAR 0 2
18721: PPUSH
18722: LD_INT 2
18724: PPUSH
18725: LD_INT 0
18727: PPUSH
18728: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18732: LD_VAR 0 2
18736: PPUSH
18737: LD_INT 3
18739: PPUSH
18740: LD_INT 0
18742: PPUSH
18743: CALL_OW 277
// end ;
18747: PPOPN 2
18749: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18750: LD_EXP 19
18754: PUSH
18755: LD_EXP 47
18759: AND
18760: IFFALSE 18857
18762: GO 18764
18764: DISABLE
18765: LD_INT 0
18767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18768: LD_ADDR_VAR 0 1
18772: PUSH
18773: LD_INT 22
18775: PUSH
18776: LD_OWVAR 2
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 21
18787: PUSH
18788: LD_INT 1
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 3
18797: PUSH
18798: LD_INT 23
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: LIST
18816: PPUSH
18817: CALL_OW 69
18821: ST_TO_ADDR
// if not tmp then
18822: LD_VAR 0 1
18826: NOT
18827: IFFALSE 18831
// exit ;
18829: GO 18857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18831: LD_VAR 0 1
18835: PUSH
18836: LD_INT 1
18838: PPUSH
18839: LD_VAR 0 1
18843: PPUSH
18844: CALL_OW 12
18848: ARRAY
18849: PPUSH
18850: LD_INT 200
18852: PPUSH
18853: CALL_OW 234
// end ;
18857: PPOPN 1
18859: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18860: LD_EXP 19
18864: PUSH
18865: LD_EXP 48
18869: AND
18870: IFFALSE 18949
18872: GO 18874
18874: DISABLE
18875: LD_INT 0
18877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18878: LD_ADDR_VAR 0 1
18882: PUSH
18883: LD_INT 22
18885: PUSH
18886: LD_OWVAR 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 21
18897: PUSH
18898: LD_INT 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: ST_TO_ADDR
// if not tmp then
18914: LD_VAR 0 1
18918: NOT
18919: IFFALSE 18923
// exit ;
18921: GO 18949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18923: LD_VAR 0 1
18927: PUSH
18928: LD_INT 1
18930: PPUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 12
18940: ARRAY
18941: PPUSH
18942: LD_INT 60
18944: PPUSH
18945: CALL_OW 234
// end ;
18949: PPOPN 1
18951: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18952: LD_EXP 19
18956: PUSH
18957: LD_EXP 49
18961: AND
18962: IFFALSE 19061
18964: GO 18966
18966: DISABLE
18967: LD_INT 0
18969: PPUSH
18970: PPUSH
// begin enable ;
18971: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18972: LD_ADDR_VAR 0 1
18976: PUSH
18977: LD_INT 22
18979: PUSH
18980: LD_OWVAR 2
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 61
18991: PUSH
18992: EMPTY
18993: LIST
18994: PUSH
18995: LD_INT 33
18997: PUSH
18998: LD_INT 2
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: LIST
19009: PPUSH
19010: CALL_OW 69
19014: ST_TO_ADDR
// if not tmp then
19015: LD_VAR 0 1
19019: NOT
19020: IFFALSE 19024
// exit ;
19022: GO 19061
// for i in tmp do
19024: LD_ADDR_VAR 0 2
19028: PUSH
19029: LD_VAR 0 1
19033: PUSH
19034: FOR_IN
19035: IFFALSE 19059
// if IsControledBy ( i ) then
19037: LD_VAR 0 2
19041: PPUSH
19042: CALL_OW 312
19046: IFFALSE 19057
// ComUnlink ( i ) ;
19048: LD_VAR 0 2
19052: PPUSH
19053: CALL_OW 136
19057: GO 19034
19059: POP
19060: POP
// end ;
19061: PPOPN 2
19063: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19064: LD_EXP 19
19068: PUSH
19069: LD_EXP 50
19073: AND
19074: IFFALSE 19214
19076: GO 19078
19078: DISABLE
19079: LD_INT 0
19081: PPUSH
19082: PPUSH
// begin ToLua ( displayPowell(); ) ;
19083: LD_STRING displayPowell();
19085: PPUSH
19086: CALL_OW 559
// uc_side := 0 ;
19090: LD_ADDR_OWVAR 20
19094: PUSH
19095: LD_INT 0
19097: ST_TO_ADDR
// uc_nation := 2 ;
19098: LD_ADDR_OWVAR 21
19102: PUSH
19103: LD_INT 2
19105: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19106: LD_ADDR_OWVAR 37
19110: PUSH
19111: LD_INT 14
19113: ST_TO_ADDR
// vc_engine := engine_siberite ;
19114: LD_ADDR_OWVAR 39
19118: PUSH
19119: LD_INT 3
19121: ST_TO_ADDR
// vc_control := control_apeman ;
19122: LD_ADDR_OWVAR 38
19126: PUSH
19127: LD_INT 5
19129: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19130: LD_ADDR_OWVAR 40
19134: PUSH
19135: LD_INT 29
19137: ST_TO_ADDR
// un := CreateVehicle ;
19138: LD_ADDR_VAR 0 2
19142: PUSH
19143: CALL_OW 45
19147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19148: LD_VAR 0 2
19152: PPUSH
19153: LD_INT 1
19155: PPUSH
19156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19160: LD_INT 35
19162: PPUSH
19163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19167: LD_VAR 0 2
19171: PPUSH
19172: LD_INT 22
19174: PUSH
19175: LD_OWVAR 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PPUSH
19184: CALL_OW 69
19188: PPUSH
19189: LD_VAR 0 2
19193: PPUSH
19194: CALL_OW 74
19198: PPUSH
19199: CALL_OW 115
// until IsDead ( un ) ;
19203: LD_VAR 0 2
19207: PPUSH
19208: CALL_OW 301
19212: IFFALSE 19160
// end ;
19214: PPOPN 2
19216: END
// every 0 0$1 trigger StreamModeActive and sStu do
19217: LD_EXP 19
19221: PUSH
19222: LD_EXP 58
19226: AND
19227: IFFALSE 19243
19229: GO 19231
19231: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19232: LD_STRING displayStucuk();
19234: PPUSH
19235: CALL_OW 559
// ResetFog ;
19239: CALL_OW 335
// end ;
19243: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19244: LD_EXP 19
19248: PUSH
19249: LD_EXP 51
19253: AND
19254: IFFALSE 19395
19256: GO 19258
19258: DISABLE
19259: LD_INT 0
19261: PPUSH
19262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19263: LD_ADDR_VAR 0 2
19267: PUSH
19268: LD_INT 22
19270: PUSH
19271: LD_OWVAR 2
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 21
19282: PUSH
19283: LD_INT 1
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PPUSH
19294: CALL_OW 69
19298: ST_TO_ADDR
// if not tmp then
19299: LD_VAR 0 2
19303: NOT
19304: IFFALSE 19308
// exit ;
19306: GO 19395
// un := tmp [ rand ( 1 , tmp ) ] ;
19308: LD_ADDR_VAR 0 1
19312: PUSH
19313: LD_VAR 0 2
19317: PUSH
19318: LD_INT 1
19320: PPUSH
19321: LD_VAR 0 2
19325: PPUSH
19326: CALL_OW 12
19330: ARRAY
19331: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19332: LD_VAR 0 1
19336: PPUSH
19337: LD_INT 0
19339: PPUSH
19340: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19344: LD_VAR 0 1
19348: PPUSH
19349: LD_OWVAR 3
19353: PUSH
19354: LD_VAR 0 1
19358: DIFF
19359: PPUSH
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL_OW 74
19369: PPUSH
19370: CALL_OW 115
// wait ( 0 0$20 ) ;
19374: LD_INT 700
19376: PPUSH
19377: CALL_OW 67
// SetSide ( un , your_side ) ;
19381: LD_VAR 0 1
19385: PPUSH
19386: LD_OWVAR 2
19390: PPUSH
19391: CALL_OW 235
// end ;
19395: PPOPN 2
19397: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19398: LD_EXP 19
19402: PUSH
19403: LD_EXP 52
19407: AND
19408: IFFALSE 19514
19410: GO 19412
19412: DISABLE
19413: LD_INT 0
19415: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19416: LD_ADDR_VAR 0 1
19420: PUSH
19421: LD_INT 22
19423: PUSH
19424: LD_OWVAR 2
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: LD_INT 30
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 30
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: LIST
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PPUSH
19465: CALL_OW 69
19469: ST_TO_ADDR
// if not depot then
19470: LD_VAR 0 1
19474: NOT
19475: IFFALSE 19479
// exit ;
19477: GO 19514
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19479: LD_VAR 0 1
19483: PUSH
19484: LD_INT 1
19486: ARRAY
19487: PPUSH
19488: CALL_OW 250
19492: PPUSH
19493: LD_VAR 0 1
19497: PUSH
19498: LD_INT 1
19500: ARRAY
19501: PPUSH
19502: CALL_OW 251
19506: PPUSH
19507: LD_INT 70
19509: PPUSH
19510: CALL_OW 495
// end ;
19514: PPOPN 1
19516: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19517: LD_EXP 19
19521: PUSH
19522: LD_EXP 53
19526: AND
19527: IFFALSE 19738
19529: GO 19531
19531: DISABLE
19532: LD_INT 0
19534: PPUSH
19535: PPUSH
19536: PPUSH
19537: PPUSH
19538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19539: LD_ADDR_VAR 0 5
19543: PUSH
19544: LD_INT 22
19546: PUSH
19547: LD_OWVAR 2
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 21
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PPUSH
19570: CALL_OW 69
19574: ST_TO_ADDR
// if not tmp then
19575: LD_VAR 0 5
19579: NOT
19580: IFFALSE 19584
// exit ;
19582: GO 19738
// for i in tmp do
19584: LD_ADDR_VAR 0 1
19588: PUSH
19589: LD_VAR 0 5
19593: PUSH
19594: FOR_IN
19595: IFFALSE 19736
// begin d := rand ( 0 , 5 ) ;
19597: LD_ADDR_VAR 0 4
19601: PUSH
19602: LD_INT 0
19604: PPUSH
19605: LD_INT 5
19607: PPUSH
19608: CALL_OW 12
19612: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_VAR 0 1
19622: PPUSH
19623: CALL_OW 250
19627: PPUSH
19628: LD_VAR 0 4
19632: PPUSH
19633: LD_INT 3
19635: PPUSH
19636: LD_INT 12
19638: PPUSH
19639: CALL_OW 12
19643: PPUSH
19644: CALL_OW 272
19648: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19649: LD_ADDR_VAR 0 3
19653: PUSH
19654: LD_VAR 0 1
19658: PPUSH
19659: CALL_OW 251
19663: PPUSH
19664: LD_VAR 0 4
19668: PPUSH
19669: LD_INT 3
19671: PPUSH
19672: LD_INT 12
19674: PPUSH
19675: CALL_OW 12
19679: PPUSH
19680: CALL_OW 273
19684: ST_TO_ADDR
// if ValidHex ( x , y ) then
19685: LD_VAR 0 2
19689: PPUSH
19690: LD_VAR 0 3
19694: PPUSH
19695: CALL_OW 488
19699: IFFALSE 19734
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19701: LD_VAR 0 1
19705: PPUSH
19706: LD_VAR 0 2
19710: PPUSH
19711: LD_VAR 0 3
19715: PPUSH
19716: LD_INT 3
19718: PPUSH
19719: LD_INT 6
19721: PPUSH
19722: CALL_OW 12
19726: PPUSH
19727: LD_INT 1
19729: PPUSH
19730: CALL_OW 483
// end ;
19734: GO 19594
19736: POP
19737: POP
// end ;
19738: PPOPN 5
19740: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19741: LD_EXP 19
19745: PUSH
19746: LD_EXP 54
19750: AND
19751: IFFALSE 19845
19753: GO 19755
19755: DISABLE
19756: LD_INT 0
19758: PPUSH
19759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19760: LD_ADDR_VAR 0 2
19764: PUSH
19765: LD_INT 22
19767: PUSH
19768: LD_OWVAR 2
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 32
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 21
19789: PUSH
19790: LD_INT 2
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: LIST
19801: PPUSH
19802: CALL_OW 69
19806: ST_TO_ADDR
// if not tmp then
19807: LD_VAR 0 2
19811: NOT
19812: IFFALSE 19816
// exit ;
19814: GO 19845
// for i in tmp do
19816: LD_ADDR_VAR 0 1
19820: PUSH
19821: LD_VAR 0 2
19825: PUSH
19826: FOR_IN
19827: IFFALSE 19843
// SetFuel ( i , 0 ) ;
19829: LD_VAR 0 1
19833: PPUSH
19834: LD_INT 0
19836: PPUSH
19837: CALL_OW 240
19841: GO 19826
19843: POP
19844: POP
// end ;
19845: PPOPN 2
19847: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19848: LD_EXP 19
19852: PUSH
19853: LD_EXP 55
19857: AND
19858: IFFALSE 19924
19860: GO 19862
19862: DISABLE
19863: LD_INT 0
19865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19866: LD_ADDR_VAR 0 1
19870: PUSH
19871: LD_INT 22
19873: PUSH
19874: LD_OWVAR 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 30
19885: PUSH
19886: LD_INT 29
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PPUSH
19897: CALL_OW 69
19901: ST_TO_ADDR
// if not tmp then
19902: LD_VAR 0 1
19906: NOT
19907: IFFALSE 19911
// exit ;
19909: GO 19924
// DestroyUnit ( tmp [ 1 ] ) ;
19911: LD_VAR 0 1
19915: PUSH
19916: LD_INT 1
19918: ARRAY
19919: PPUSH
19920: CALL_OW 65
// end ;
19924: PPOPN 1
19926: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19927: LD_EXP 19
19931: PUSH
19932: LD_EXP 57
19936: AND
19937: IFFALSE 20066
19939: GO 19941
19941: DISABLE
19942: LD_INT 0
19944: PPUSH
// begin uc_side := 0 ;
19945: LD_ADDR_OWVAR 20
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// uc_nation := nation_arabian ;
19953: LD_ADDR_OWVAR 21
19957: PUSH
19958: LD_INT 2
19960: ST_TO_ADDR
// hc_gallery :=  ;
19961: LD_ADDR_OWVAR 33
19965: PUSH
19966: LD_STRING 
19968: ST_TO_ADDR
// hc_name :=  ;
19969: LD_ADDR_OWVAR 26
19973: PUSH
19974: LD_STRING 
19976: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19977: LD_INT 1
19979: PPUSH
19980: LD_INT 11
19982: PPUSH
19983: LD_INT 10
19985: PPUSH
19986: CALL_OW 380
// un := CreateHuman ;
19990: LD_ADDR_VAR 0 1
19994: PUSH
19995: CALL_OW 44
19999: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20000: LD_VAR 0 1
20004: PPUSH
20005: LD_INT 1
20007: PPUSH
20008: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20012: LD_INT 35
20014: PPUSH
20015: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20019: LD_VAR 0 1
20023: PPUSH
20024: LD_INT 22
20026: PUSH
20027: LD_OWVAR 2
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PPUSH
20036: CALL_OW 69
20040: PPUSH
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL_OW 74
20050: PPUSH
20051: CALL_OW 115
// until IsDead ( un ) ;
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 301
20064: IFFALSE 20012
// end ;
20066: PPOPN 1
20068: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20069: LD_EXP 19
20073: PUSH
20074: LD_EXP 59
20078: AND
20079: IFFALSE 20091
20081: GO 20083
20083: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20084: LD_STRING earthquake(getX(game), 0, 32)
20086: PPUSH
20087: CALL_OW 559
20091: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20092: LD_EXP 19
20096: PUSH
20097: LD_EXP 60
20101: AND
20102: IFFALSE 20193
20104: GO 20106
20106: DISABLE
20107: LD_INT 0
20109: PPUSH
// begin enable ;
20110: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20111: LD_ADDR_VAR 0 1
20115: PUSH
20116: LD_INT 22
20118: PUSH
20119: LD_OWVAR 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 21
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 33
20140: PUSH
20141: LD_INT 3
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: LIST
20152: PPUSH
20153: CALL_OW 69
20157: ST_TO_ADDR
// if not tmp then
20158: LD_VAR 0 1
20162: NOT
20163: IFFALSE 20167
// exit ;
20165: GO 20193
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20167: LD_VAR 0 1
20171: PUSH
20172: LD_INT 1
20174: PPUSH
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL_OW 12
20184: ARRAY
20185: PPUSH
20186: LD_INT 1
20188: PPUSH
20189: CALL_OW 234
// end ;
20193: PPOPN 1
20195: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20196: LD_EXP 19
20200: PUSH
20201: LD_EXP 61
20205: AND
20206: IFFALSE 20347
20208: GO 20210
20210: DISABLE
20211: LD_INT 0
20213: PPUSH
20214: PPUSH
20215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20216: LD_ADDR_VAR 0 3
20220: PUSH
20221: LD_INT 22
20223: PUSH
20224: LD_OWVAR 2
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 25
20235: PUSH
20236: LD_INT 1
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PPUSH
20247: CALL_OW 69
20251: ST_TO_ADDR
// if not tmp then
20252: LD_VAR 0 3
20256: NOT
20257: IFFALSE 20261
// exit ;
20259: GO 20347
// un := tmp [ rand ( 1 , tmp ) ] ;
20261: LD_ADDR_VAR 0 2
20265: PUSH
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 1
20273: PPUSH
20274: LD_VAR 0 3
20278: PPUSH
20279: CALL_OW 12
20283: ARRAY
20284: ST_TO_ADDR
// if Crawls ( un ) then
20285: LD_VAR 0 2
20289: PPUSH
20290: CALL_OW 318
20294: IFFALSE 20305
// ComWalk ( un ) ;
20296: LD_VAR 0 2
20300: PPUSH
20301: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20305: LD_VAR 0 2
20309: PPUSH
20310: LD_INT 9
20312: PPUSH
20313: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20317: LD_INT 28
20319: PPUSH
20320: LD_OWVAR 2
20324: PPUSH
20325: LD_INT 2
20327: PPUSH
20328: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20332: LD_INT 29
20334: PPUSH
20335: LD_OWVAR 2
20339: PPUSH
20340: LD_INT 2
20342: PPUSH
20343: CALL_OW 322
// end ;
20347: PPOPN 3
20349: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20350: LD_EXP 19
20354: PUSH
20355: LD_EXP 62
20359: AND
20360: IFFALSE 20471
20362: GO 20364
20364: DISABLE
20365: LD_INT 0
20367: PPUSH
20368: PPUSH
20369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20370: LD_ADDR_VAR 0 3
20374: PUSH
20375: LD_INT 22
20377: PUSH
20378: LD_OWVAR 2
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 25
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PPUSH
20401: CALL_OW 69
20405: ST_TO_ADDR
// if not tmp then
20406: LD_VAR 0 3
20410: NOT
20411: IFFALSE 20415
// exit ;
20413: GO 20471
// un := tmp [ rand ( 1 , tmp ) ] ;
20415: LD_ADDR_VAR 0 2
20419: PUSH
20420: LD_VAR 0 3
20424: PUSH
20425: LD_INT 1
20427: PPUSH
20428: LD_VAR 0 3
20432: PPUSH
20433: CALL_OW 12
20437: ARRAY
20438: ST_TO_ADDR
// if Crawls ( un ) then
20439: LD_VAR 0 2
20443: PPUSH
20444: CALL_OW 318
20448: IFFALSE 20459
// ComWalk ( un ) ;
20450: LD_VAR 0 2
20454: PPUSH
20455: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20459: LD_VAR 0 2
20463: PPUSH
20464: LD_INT 8
20466: PPUSH
20467: CALL_OW 336
// end ;
20471: PPOPN 3
20473: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20474: LD_EXP 19
20478: PUSH
20479: LD_EXP 63
20483: AND
20484: IFFALSE 20628
20486: GO 20488
20488: DISABLE
20489: LD_INT 0
20491: PPUSH
20492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20493: LD_ADDR_VAR 0 2
20497: PUSH
20498: LD_INT 22
20500: PUSH
20501: LD_OWVAR 2
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 21
20512: PUSH
20513: LD_INT 2
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: LD_INT 34
20525: PUSH
20526: LD_INT 12
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 34
20535: PUSH
20536: LD_INT 51
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 34
20545: PUSH
20546: LD_INT 32
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: PPUSH
20564: CALL_OW 69
20568: ST_TO_ADDR
// if not tmp then
20569: LD_VAR 0 2
20573: NOT
20574: IFFALSE 20578
// exit ;
20576: GO 20628
// for i in tmp do
20578: LD_ADDR_VAR 0 1
20582: PUSH
20583: LD_VAR 0 2
20587: PUSH
20588: FOR_IN
20589: IFFALSE 20626
// if GetCargo ( i , mat_artifact ) = 0 then
20591: LD_VAR 0 1
20595: PPUSH
20596: LD_INT 4
20598: PPUSH
20599: CALL_OW 289
20603: PUSH
20604: LD_INT 0
20606: EQUAL
20607: IFFALSE 20624
// SetCargo ( i , mat_siberit , 100 ) ;
20609: LD_VAR 0 1
20613: PPUSH
20614: LD_INT 3
20616: PPUSH
20617: LD_INT 100
20619: PPUSH
20620: CALL_OW 290
20624: GO 20588
20626: POP
20627: POP
// end ;
20628: PPOPN 2
20630: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20631: LD_EXP 19
20635: PUSH
20636: LD_EXP 64
20640: AND
20641: IFFALSE 20794
20643: GO 20645
20645: DISABLE
20646: LD_INT 0
20648: PPUSH
20649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20650: LD_ADDR_VAR 0 2
20654: PUSH
20655: LD_INT 22
20657: PUSH
20658: LD_OWVAR 2
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PPUSH
20667: CALL_OW 69
20671: ST_TO_ADDR
// if not tmp then
20672: LD_VAR 0 2
20676: NOT
20677: IFFALSE 20681
// exit ;
20679: GO 20794
// for i := 1 to 2 do
20681: LD_ADDR_VAR 0 1
20685: PUSH
20686: DOUBLE
20687: LD_INT 1
20689: DEC
20690: ST_TO_ADDR
20691: LD_INT 2
20693: PUSH
20694: FOR_TO
20695: IFFALSE 20792
// begin uc_side := your_side ;
20697: LD_ADDR_OWVAR 20
20701: PUSH
20702: LD_OWVAR 2
20706: ST_TO_ADDR
// uc_nation := nation_american ;
20707: LD_ADDR_OWVAR 21
20711: PUSH
20712: LD_INT 1
20714: ST_TO_ADDR
// vc_chassis := us_morphling ;
20715: LD_ADDR_OWVAR 37
20719: PUSH
20720: LD_INT 5
20722: ST_TO_ADDR
// vc_engine := engine_siberite ;
20723: LD_ADDR_OWVAR 39
20727: PUSH
20728: LD_INT 3
20730: ST_TO_ADDR
// vc_control := control_computer ;
20731: LD_ADDR_OWVAR 38
20735: PUSH
20736: LD_INT 3
20738: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20739: LD_ADDR_OWVAR 40
20743: PUSH
20744: LD_INT 10
20746: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
20747: CALL_OW 45
20751: PPUSH
20752: LD_VAR 0 2
20756: PUSH
20757: LD_INT 1
20759: ARRAY
20760: PPUSH
20761: CALL_OW 250
20765: PPUSH
20766: LD_VAR 0 2
20770: PUSH
20771: LD_INT 1
20773: ARRAY
20774: PPUSH
20775: CALL_OW 251
20779: PPUSH
20780: LD_INT 12
20782: PPUSH
20783: LD_INT 1
20785: PPUSH
20786: CALL_OW 50
// end ;
20790: GO 20694
20792: POP
20793: POP
// end ;
20794: PPOPN 2
20796: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20797: LD_EXP 19
20801: PUSH
20802: LD_EXP 65
20806: AND
20807: IFFALSE 21029
20809: GO 20811
20811: DISABLE
20812: LD_INT 0
20814: PPUSH
20815: PPUSH
20816: PPUSH
20817: PPUSH
20818: PPUSH
20819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20820: LD_ADDR_VAR 0 6
20824: PUSH
20825: LD_INT 22
20827: PUSH
20828: LD_OWVAR 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 21
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 3
20849: PUSH
20850: LD_INT 23
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: LIST
20868: PPUSH
20869: CALL_OW 69
20873: ST_TO_ADDR
// if not tmp then
20874: LD_VAR 0 6
20878: NOT
20879: IFFALSE 20883
// exit ;
20881: GO 21029
// s1 := rand ( 1 , 4 ) ;
20883: LD_ADDR_VAR 0 2
20887: PUSH
20888: LD_INT 1
20890: PPUSH
20891: LD_INT 4
20893: PPUSH
20894: CALL_OW 12
20898: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20899: LD_ADDR_VAR 0 4
20903: PUSH
20904: LD_VAR 0 6
20908: PUSH
20909: LD_INT 1
20911: ARRAY
20912: PPUSH
20913: LD_VAR 0 2
20917: PPUSH
20918: CALL_OW 259
20922: ST_TO_ADDR
// if s1 = 1 then
20923: LD_VAR 0 2
20927: PUSH
20928: LD_INT 1
20930: EQUAL
20931: IFFALSE 20951
// s2 := rand ( 2 , 4 ) else
20933: LD_ADDR_VAR 0 3
20937: PUSH
20938: LD_INT 2
20940: PPUSH
20941: LD_INT 4
20943: PPUSH
20944: CALL_OW 12
20948: ST_TO_ADDR
20949: GO 20959
// s2 := 1 ;
20951: LD_ADDR_VAR 0 3
20955: PUSH
20956: LD_INT 1
20958: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20959: LD_ADDR_VAR 0 5
20963: PUSH
20964: LD_VAR 0 6
20968: PUSH
20969: LD_INT 1
20971: ARRAY
20972: PPUSH
20973: LD_VAR 0 3
20977: PPUSH
20978: CALL_OW 259
20982: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20983: LD_VAR 0 6
20987: PUSH
20988: LD_INT 1
20990: ARRAY
20991: PPUSH
20992: LD_VAR 0 2
20996: PPUSH
20997: LD_VAR 0 5
21001: PPUSH
21002: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21006: LD_VAR 0 6
21010: PUSH
21011: LD_INT 1
21013: ARRAY
21014: PPUSH
21015: LD_VAR 0 3
21019: PPUSH
21020: LD_VAR 0 4
21024: PPUSH
21025: CALL_OW 237
// end ;
21029: PPOPN 6
21031: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21032: LD_EXP 19
21036: PUSH
21037: LD_EXP 66
21041: AND
21042: IFFALSE 21121
21044: GO 21046
21046: DISABLE
21047: LD_INT 0
21049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21050: LD_ADDR_VAR 0 1
21054: PUSH
21055: LD_INT 22
21057: PUSH
21058: LD_OWVAR 2
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 30
21069: PUSH
21070: LD_INT 3
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PPUSH
21081: CALL_OW 69
21085: ST_TO_ADDR
// if not tmp then
21086: LD_VAR 0 1
21090: NOT
21091: IFFALSE 21095
// exit ;
21093: GO 21121
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21095: LD_VAR 0 1
21099: PUSH
21100: LD_INT 1
21102: PPUSH
21103: LD_VAR 0 1
21107: PPUSH
21108: CALL_OW 12
21112: ARRAY
21113: PPUSH
21114: LD_INT 1
21116: PPUSH
21117: CALL_OW 234
// end ;
21121: PPOPN 1
21123: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21124: LD_EXP 19
21128: PUSH
21129: LD_EXP 67
21133: AND
21134: IFFALSE 21246
21136: GO 21138
21138: DISABLE
21139: LD_INT 0
21141: PPUSH
21142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21143: LD_ADDR_VAR 0 2
21147: PUSH
21148: LD_INT 22
21150: PUSH
21151: LD_OWVAR 2
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 2
21162: PUSH
21163: LD_INT 30
21165: PUSH
21166: LD_INT 27
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 30
21175: PUSH
21176: LD_INT 26
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 30
21185: PUSH
21186: LD_INT 28
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PPUSH
21203: CALL_OW 69
21207: ST_TO_ADDR
// if not tmp then
21208: LD_VAR 0 2
21212: NOT
21213: IFFALSE 21217
// exit ;
21215: GO 21246
// for i in tmp do
21217: LD_ADDR_VAR 0 1
21221: PUSH
21222: LD_VAR 0 2
21226: PUSH
21227: FOR_IN
21228: IFFALSE 21244
// SetLives ( i , 1 ) ;
21230: LD_VAR 0 1
21234: PPUSH
21235: LD_INT 1
21237: PPUSH
21238: CALL_OW 234
21242: GO 21227
21244: POP
21245: POP
// end ;
21246: PPOPN 2
21248: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21249: LD_EXP 19
21253: PUSH
21254: LD_EXP 68
21258: AND
21259: IFFALSE 21533
21261: GO 21263
21263: DISABLE
21264: LD_INT 0
21266: PPUSH
21267: PPUSH
21268: PPUSH
// begin i := rand ( 1 , 7 ) ;
21269: LD_ADDR_VAR 0 1
21273: PUSH
21274: LD_INT 1
21276: PPUSH
21277: LD_INT 7
21279: PPUSH
21280: CALL_OW 12
21284: ST_TO_ADDR
// case i of 1 :
21285: LD_VAR 0 1
21289: PUSH
21290: LD_INT 1
21292: DOUBLE
21293: EQUAL
21294: IFTRUE 21298
21296: GO 21308
21298: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21299: LD_STRING earthquake(getX(game), 0, 32)
21301: PPUSH
21302: CALL_OW 559
21306: GO 21533
21308: LD_INT 2
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21330
21316: POP
// begin ToLua ( displayStucuk(); ) ;
21317: LD_STRING displayStucuk();
21319: PPUSH
21320: CALL_OW 559
// ResetFog ;
21324: CALL_OW 335
// end ; 3 :
21328: GO 21533
21330: LD_INT 3
21332: DOUBLE
21333: EQUAL
21334: IFTRUE 21338
21336: GO 21442
21338: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21339: LD_ADDR_VAR 0 2
21343: PUSH
21344: LD_INT 22
21346: PUSH
21347: LD_OWVAR 2
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 25
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PPUSH
21370: CALL_OW 69
21374: ST_TO_ADDR
// if not tmp then
21375: LD_VAR 0 2
21379: NOT
21380: IFFALSE 21384
// exit ;
21382: GO 21533
// un := tmp [ rand ( 1 , tmp ) ] ;
21384: LD_ADDR_VAR 0 3
21388: PUSH
21389: LD_VAR 0 2
21393: PUSH
21394: LD_INT 1
21396: PPUSH
21397: LD_VAR 0 2
21401: PPUSH
21402: CALL_OW 12
21406: ARRAY
21407: ST_TO_ADDR
// if Crawls ( un ) then
21408: LD_VAR 0 3
21412: PPUSH
21413: CALL_OW 318
21417: IFFALSE 21428
// ComWalk ( un ) ;
21419: LD_VAR 0 3
21423: PPUSH
21424: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21428: LD_VAR 0 3
21432: PPUSH
21433: LD_INT 8
21435: PPUSH
21436: CALL_OW 336
// end ; 4 :
21440: GO 21533
21442: LD_INT 4
21444: DOUBLE
21445: EQUAL
21446: IFTRUE 21450
21448: GO 21511
21450: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21451: LD_ADDR_VAR 0 2
21455: PUSH
21456: LD_INT 22
21458: PUSH
21459: LD_OWVAR 2
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 30
21470: PUSH
21471: LD_INT 29
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PPUSH
21482: CALL_OW 69
21486: ST_TO_ADDR
// if not tmp then
21487: LD_VAR 0 2
21491: NOT
21492: IFFALSE 21496
// exit ;
21494: GO 21533
// DestroyUnit ( tmp [ 1 ] ) ;
21496: LD_VAR 0 2
21500: PUSH
21501: LD_INT 1
21503: ARRAY
21504: PPUSH
21505: CALL_OW 65
// end ; 5 .. 7 :
21509: GO 21533
21511: LD_INT 5
21513: DOUBLE
21514: GREATEREQUAL
21515: IFFALSE 21523
21517: LD_INT 7
21519: DOUBLE
21520: LESSEQUAL
21521: IFTRUE 21525
21523: GO 21532
21525: POP
// StreamSibBomb ; end ;
21526: CALL 17813 0 0
21530: GO 21533
21532: POP
// end ;
21533: PPOPN 3
21535: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21536: LD_EXP 19
21540: PUSH
21541: LD_EXP 69
21545: AND
21546: IFFALSE 21702
21548: GO 21550
21550: DISABLE
21551: LD_INT 0
21553: PPUSH
21554: PPUSH
21555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21556: LD_ADDR_VAR 0 2
21560: PUSH
21561: LD_INT 81
21563: PUSH
21564: LD_OWVAR 2
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 2
21575: PUSH
21576: LD_INT 21
21578: PUSH
21579: LD_INT 1
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 21
21588: PUSH
21589: LD_INT 2
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PPUSH
21605: CALL_OW 69
21609: ST_TO_ADDR
// if not tmp then
21610: LD_VAR 0 2
21614: NOT
21615: IFFALSE 21619
// exit ;
21617: GO 21702
// p := 0 ;
21619: LD_ADDR_VAR 0 3
21623: PUSH
21624: LD_INT 0
21626: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21627: LD_INT 35
21629: PPUSH
21630: CALL_OW 67
// p := p + 1 ;
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: LD_VAR 0 3
21643: PUSH
21644: LD_INT 1
21646: PLUS
21647: ST_TO_ADDR
// for i in tmp do
21648: LD_ADDR_VAR 0 1
21652: PUSH
21653: LD_VAR 0 2
21657: PUSH
21658: FOR_IN
21659: IFFALSE 21690
// if GetLives ( i ) < 1000 then
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL_OW 256
21670: PUSH
21671: LD_INT 1000
21673: LESS
21674: IFFALSE 21688
// SetLives ( i , 1000 ) ;
21676: LD_VAR 0 1
21680: PPUSH
21681: LD_INT 1000
21683: PPUSH
21684: CALL_OW 234
21688: GO 21658
21690: POP
21691: POP
// until p > 20 ;
21692: LD_VAR 0 3
21696: PUSH
21697: LD_INT 20
21699: GREATER
21700: IFFALSE 21627
// end ;
21702: PPOPN 3
21704: END
// every 0 0$1 trigger StreamModeActive and sTime do
21705: LD_EXP 19
21709: PUSH
21710: LD_EXP 70
21714: AND
21715: IFFALSE 21750
21717: GO 21719
21719: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21720: LD_INT 28
21722: PPUSH
21723: LD_OWVAR 2
21727: PPUSH
21728: LD_INT 2
21730: PPUSH
21731: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21735: LD_INT 30
21737: PPUSH
21738: LD_OWVAR 2
21742: PPUSH
21743: LD_INT 2
21745: PPUSH
21746: CALL_OW 322
// end ;
21750: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21751: LD_EXP 19
21755: PUSH
21756: LD_EXP 71
21760: AND
21761: IFFALSE 21882
21763: GO 21765
21765: DISABLE
21766: LD_INT 0
21768: PPUSH
21769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21770: LD_ADDR_VAR 0 2
21774: PUSH
21775: LD_INT 22
21777: PUSH
21778: LD_OWVAR 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 21
21789: PUSH
21790: LD_INT 1
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 3
21799: PUSH
21800: LD_INT 23
21802: PUSH
21803: LD_INT 0
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: LIST
21818: PPUSH
21819: CALL_OW 69
21823: ST_TO_ADDR
// if not tmp then
21824: LD_VAR 0 2
21828: NOT
21829: IFFALSE 21833
// exit ;
21831: GO 21882
// for i in tmp do
21833: LD_ADDR_VAR 0 1
21837: PUSH
21838: LD_VAR 0 2
21842: PUSH
21843: FOR_IN
21844: IFFALSE 21880
// begin if Crawls ( i ) then
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 318
21855: IFFALSE 21866
// ComWalk ( i ) ;
21857: LD_VAR 0 1
21861: PPUSH
21862: CALL_OW 138
// SetClass ( i , 2 ) ;
21866: LD_VAR 0 1
21870: PPUSH
21871: LD_INT 2
21873: PPUSH
21874: CALL_OW 336
// end ;
21878: GO 21843
21880: POP
21881: POP
// end ;
21882: PPOPN 2
21884: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21885: LD_EXP 19
21889: PUSH
21890: LD_EXP 72
21894: AND
21895: IFFALSE 22176
21897: GO 21899
21899: DISABLE
21900: LD_INT 0
21902: PPUSH
21903: PPUSH
21904: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21905: LD_OWVAR 2
21909: PPUSH
21910: LD_INT 9
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: LD_INT 1
21918: PPUSH
21919: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21923: LD_INT 9
21925: PPUSH
21926: LD_OWVAR 2
21930: PPUSH
21931: CALL_OW 343
// uc_side := 9 ;
21935: LD_ADDR_OWVAR 20
21939: PUSH
21940: LD_INT 9
21942: ST_TO_ADDR
// uc_nation := 2 ;
21943: LD_ADDR_OWVAR 21
21947: PUSH
21948: LD_INT 2
21950: ST_TO_ADDR
// hc_name := Dark Warrior ;
21951: LD_ADDR_OWVAR 26
21955: PUSH
21956: LD_STRING Dark Warrior
21958: ST_TO_ADDR
// hc_gallery :=  ;
21959: LD_ADDR_OWVAR 33
21963: PUSH
21964: LD_STRING 
21966: ST_TO_ADDR
// hc_noskilllimit := true ;
21967: LD_ADDR_OWVAR 76
21971: PUSH
21972: LD_INT 1
21974: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21975: LD_ADDR_OWVAR 31
21979: PUSH
21980: LD_INT 30
21982: PUSH
21983: LD_INT 30
21985: PUSH
21986: LD_INT 30
21988: PUSH
21989: LD_INT 30
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: ST_TO_ADDR
// un := CreateHuman ;
21998: LD_ADDR_VAR 0 3
22002: PUSH
22003: CALL_OW 44
22007: ST_TO_ADDR
// hc_noskilllimit := false ;
22008: LD_ADDR_OWVAR 76
22012: PUSH
22013: LD_INT 0
22015: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22016: LD_VAR 0 3
22020: PPUSH
22021: LD_INT 1
22023: PPUSH
22024: CALL_OW 51
// p := 0 ;
22028: LD_ADDR_VAR 0 2
22032: PUSH
22033: LD_INT 0
22035: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22036: LD_INT 35
22038: PPUSH
22039: CALL_OW 67
// p := p + 1 ;
22043: LD_ADDR_VAR 0 2
22047: PUSH
22048: LD_VAR 0 2
22052: PUSH
22053: LD_INT 1
22055: PLUS
22056: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22057: LD_VAR 0 3
22061: PPUSH
22062: CALL_OW 256
22066: PUSH
22067: LD_INT 1000
22069: LESS
22070: IFFALSE 22084
// SetLives ( un , 1000 ) ;
22072: LD_VAR 0 3
22076: PPUSH
22077: LD_INT 1000
22079: PPUSH
22080: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22084: LD_VAR 0 3
22088: PPUSH
22089: LD_INT 81
22091: PUSH
22092: LD_OWVAR 2
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 91
22103: PUSH
22104: LD_VAR 0 3
22108: PUSH
22109: LD_INT 30
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PPUSH
22121: CALL_OW 69
22125: PPUSH
22126: LD_VAR 0 3
22130: PPUSH
22131: CALL_OW 74
22135: PPUSH
22136: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22140: LD_VAR 0 2
22144: PUSH
22145: LD_INT 60
22147: GREATER
22148: PUSH
22149: LD_VAR 0 3
22153: PPUSH
22154: CALL_OW 301
22158: OR
22159: IFFALSE 22036
// if un then
22161: LD_VAR 0 3
22165: IFFALSE 22176
// RemoveUnit ( un ) ;
22167: LD_VAR 0 3
22171: PPUSH
22172: CALL_OW 64
// end ; end_of_file
22176: PPOPN 3
22178: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22179: LD_INT 0
22181: PPUSH
22182: PPUSH
22183: PPUSH
22184: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22185: LD_VAR 0 1
22189: PPUSH
22190: CALL_OW 264
22194: PUSH
22195: LD_EXP 18
22199: EQUAL
22200: IFFALSE 22272
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22202: LD_INT 68
22204: PPUSH
22205: LD_VAR 0 1
22209: PPUSH
22210: CALL_OW 255
22214: PPUSH
22215: CALL_OW 321
22219: PUSH
22220: LD_INT 2
22222: EQUAL
22223: IFFALSE 22235
// eff := 70 else
22225: LD_ADDR_VAR 0 4
22229: PUSH
22230: LD_INT 70
22232: ST_TO_ADDR
22233: GO 22243
// eff := 30 ;
22235: LD_ADDR_VAR 0 4
22239: PUSH
22240: LD_INT 30
22242: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22243: LD_VAR 0 1
22247: PPUSH
22248: CALL_OW 250
22252: PPUSH
22253: LD_VAR 0 1
22257: PPUSH
22258: CALL_OW 251
22262: PPUSH
22263: LD_VAR 0 4
22267: PPUSH
22268: CALL_OW 495
// end ; end ;
22272: LD_VAR 0 2
22276: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22277: LD_INT 0
22279: PPUSH
// end ;
22280: LD_VAR 0 4
22284: RET
// export function SOS_Command ( cmd ) ; begin
22285: LD_INT 0
22287: PPUSH
// end ;
22288: LD_VAR 0 2
22292: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22293: LD_VAR 0 1
22297: PUSH
22298: LD_INT 255
22300: EQUAL
22301: PUSH
22302: LD_VAR 0 2
22306: PPUSH
22307: CALL_OW 264
22311: PUSH
22312: LD_INT 14
22314: PUSH
22315: LD_INT 53
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: IN
22322: AND
22323: PUSH
22324: LD_VAR 0 4
22328: PPUSH
22329: LD_VAR 0 5
22333: PPUSH
22334: CALL_OW 488
22338: AND
22339: IFFALSE 22363
// CutTreeXYR ( unit , x , y , 12 ) ;
22341: LD_VAR 0 2
22345: PPUSH
22346: LD_VAR 0 4
22350: PPUSH
22351: LD_VAR 0 5
22355: PPUSH
22356: LD_INT 12
22358: PPUSH
22359: CALL 22366 0 4
// end ;
22363: PPOPN 5
22365: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22366: LD_INT 0
22368: PPUSH
22369: PPUSH
22370: PPUSH
22371: PPUSH
22372: PPUSH
22373: PPUSH
22374: PPUSH
22375: PPUSH
22376: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22377: LD_VAR 0 1
22381: NOT
22382: PUSH
22383: LD_VAR 0 2
22387: PPUSH
22388: LD_VAR 0 3
22392: PPUSH
22393: CALL_OW 488
22397: NOT
22398: OR
22399: PUSH
22400: LD_VAR 0 4
22404: NOT
22405: OR
22406: IFFALSE 22410
// exit ;
22408: GO 22750
// list := [ ] ;
22410: LD_ADDR_VAR 0 13
22414: PUSH
22415: EMPTY
22416: ST_TO_ADDR
// if x - r < 0 then
22417: LD_VAR 0 2
22421: PUSH
22422: LD_VAR 0 4
22426: MINUS
22427: PUSH
22428: LD_INT 0
22430: LESS
22431: IFFALSE 22443
// min_x := 0 else
22433: LD_ADDR_VAR 0 7
22437: PUSH
22438: LD_INT 0
22440: ST_TO_ADDR
22441: GO 22459
// min_x := x - r ;
22443: LD_ADDR_VAR 0 7
22447: PUSH
22448: LD_VAR 0 2
22452: PUSH
22453: LD_VAR 0 4
22457: MINUS
22458: ST_TO_ADDR
// if y - r < 0 then
22459: LD_VAR 0 3
22463: PUSH
22464: LD_VAR 0 4
22468: MINUS
22469: PUSH
22470: LD_INT 0
22472: LESS
22473: IFFALSE 22485
// min_y := 0 else
22475: LD_ADDR_VAR 0 8
22479: PUSH
22480: LD_INT 0
22482: ST_TO_ADDR
22483: GO 22501
// min_y := y - r ;
22485: LD_ADDR_VAR 0 8
22489: PUSH
22490: LD_VAR 0 3
22494: PUSH
22495: LD_VAR 0 4
22499: MINUS
22500: ST_TO_ADDR
// max_x := x + r ;
22501: LD_ADDR_VAR 0 9
22505: PUSH
22506: LD_VAR 0 2
22510: PUSH
22511: LD_VAR 0 4
22515: PLUS
22516: ST_TO_ADDR
// max_y := y + r ;
22517: LD_ADDR_VAR 0 10
22521: PUSH
22522: LD_VAR 0 3
22526: PUSH
22527: LD_VAR 0 4
22531: PLUS
22532: ST_TO_ADDR
// for _x = min_x to max_x do
22533: LD_ADDR_VAR 0 11
22537: PUSH
22538: DOUBLE
22539: LD_VAR 0 7
22543: DEC
22544: ST_TO_ADDR
22545: LD_VAR 0 9
22549: PUSH
22550: FOR_TO
22551: IFFALSE 22668
// for _y = min_y to max_y do
22553: LD_ADDR_VAR 0 12
22557: PUSH
22558: DOUBLE
22559: LD_VAR 0 8
22563: DEC
22564: ST_TO_ADDR
22565: LD_VAR 0 10
22569: PUSH
22570: FOR_TO
22571: IFFALSE 22664
// begin if not ValidHex ( _x , _y ) then
22573: LD_VAR 0 11
22577: PPUSH
22578: LD_VAR 0 12
22582: PPUSH
22583: CALL_OW 488
22587: NOT
22588: IFFALSE 22592
// continue ;
22590: GO 22570
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22592: LD_VAR 0 11
22596: PPUSH
22597: LD_VAR 0 12
22601: PPUSH
22602: CALL_OW 351
22606: PUSH
22607: LD_VAR 0 11
22611: PPUSH
22612: LD_VAR 0 12
22616: PPUSH
22617: CALL_OW 554
22621: AND
22622: IFFALSE 22662
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22624: LD_ADDR_VAR 0 13
22628: PUSH
22629: LD_VAR 0 13
22633: PPUSH
22634: LD_VAR 0 13
22638: PUSH
22639: LD_INT 1
22641: PLUS
22642: PPUSH
22643: LD_VAR 0 11
22647: PUSH
22648: LD_VAR 0 12
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PPUSH
22657: CALL_OW 2
22661: ST_TO_ADDR
// end ;
22662: GO 22570
22664: POP
22665: POP
22666: GO 22550
22668: POP
22669: POP
// if not list then
22670: LD_VAR 0 13
22674: NOT
22675: IFFALSE 22679
// exit ;
22677: GO 22750
// for i in list do
22679: LD_ADDR_VAR 0 6
22683: PUSH
22684: LD_VAR 0 13
22688: PUSH
22689: FOR_IN
22690: IFFALSE 22748
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22692: LD_VAR 0 1
22696: PPUSH
22697: LD_STRING M
22699: PUSH
22700: LD_VAR 0 6
22704: PUSH
22705: LD_INT 1
22707: ARRAY
22708: PUSH
22709: LD_VAR 0 6
22713: PUSH
22714: LD_INT 2
22716: ARRAY
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: LD_INT 0
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: LD_INT 0
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: PUSH
22739: EMPTY
22740: LIST
22741: PPUSH
22742: CALL_OW 447
22746: GO 22689
22748: POP
22749: POP
// end ;
22750: LD_VAR 0 5
22754: RET
