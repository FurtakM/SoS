// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9192 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: LD_INT 91
2674: ST_TO_ADDR
// us_artillery := 97 ;
2675: LD_ADDR_EXP 17
2679: PUSH
2680: LD_INT 97
2682: ST_TO_ADDR
// ru_radar := 98 ;
2683: LD_ADDR_EXP 14
2687: PUSH
2688: LD_INT 98
2690: ST_TO_ADDR
// game_started := false ;
2691: LD_ADDR_EXP 7
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// points := 0 ;
2699: LD_ADDR_EXP 2
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// waveNumber := 0 ;
2707: LD_ADDR_EXP 5
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// timeToNextAttack := 0 ;
2715: LD_ADDR_EXP 4
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// graveyard := [ ] ;
2723: LD_ADDR_EXP 8
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// base_x := 1 ;
2730: LD_ADDR_EXP 9
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// base_y := 1 ;
2738: LD_ADDR_EXP 10
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if difficultyLevel > 2 then
2746: LD_EXP 3
2750: PUSH
2751: LD_INT 2
2753: GREATER
2754: IFFALSE 2769
// SetTech ( 5 , 7 , state_researched ) ;
2756: LD_INT 5
2758: PPUSH
2759: LD_INT 7
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: CALL_OW 322
// if not playerNation then
2769: LD_EXP 6
2773: NOT
2774: IFFALSE 2800
// begin points := 100 ;
2776: LD_ADDR_EXP 2
2780: PUSH
2781: LD_INT 100
2783: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2784: LD_ADDR_EXP 6
2788: PUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 3
2794: PPUSH
2795: CALL_OW 12
2799: ST_TO_ADDR
// end ; your_side := playerNation ;
2800: LD_ADDR_OWVAR 2
2804: PUSH
2805: LD_EXP 6
2809: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2810: LD_OWVAR 2
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2822: LD_INT 25
2824: PUSH
2825: LD_INT 20
2827: PUSH
2828: LD_INT 15
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 3
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: LD_INT 1
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_EXP 3
2892: ARRAY
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: PPUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: LD_INT 88
2915: PPUSH
2916: LD_INT 76
2918: PPUSH
2919: LD_INT 6
2921: PPUSH
2922: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2926: LD_EXP 6
2930: PPUSH
2931: LD_INT 9
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 5
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 24
2957: PUSH
2958: LD_INT 16
2960: PUSH
2961: LD_INT 12
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_EXP 3
2977: ARRAY
2978: PPUSH
2979: LD_INT 88
2981: PPUSH
2982: LD_INT 76
2984: PPUSH
2985: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2989: LD_INT 88
2991: PPUSH
2992: LD_INT 76
2994: PPUSH
2995: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2999: LD_INT 90
3001: PPUSH
3002: LD_INT 79
3004: PPUSH
3005: LD_OWVAR 2
3009: PPUSH
3010: LD_INT 50
3012: NEG
3013: PPUSH
3014: CALL_OW 330
// if debug then
3018: LD_EXP 1
3022: IFFALSE 3033
// FogOff ( your_side ) ;
3024: LD_OWVAR 2
3028: PPUSH
3029: CALL_OW 344
// end ;
3033: LD_VAR 0 1
3037: RET
// every 0 0$01 trigger game_started do var i ;
3038: LD_EXP 7
3042: IFFALSE 3276
3044: GO 3046
3046: DISABLE
3047: LD_INT 0
3049: PPUSH
// begin while ( game_started ) do
3050: LD_EXP 7
3054: IFFALSE 3276
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3056: LD_INT 22
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PUSH
3071: LD_INT 5
3073: LESS
3074: PUSH
3075: LD_EXP 4
3079: PUSH
3080: LD_INT 0
3082: LESSEQUAL
3083: AND
3084: IFFALSE 3267
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3086: LD_INT 22
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: IFFALSE 3138
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PPUSH
3117: CALL_OW 69
3121: PUSH
3122: FOR_IN
3123: IFFALSE 3136
// RemoveUnit ( i ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 64
3134: GO 3122
3136: POP
3137: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3138: LD_EXP 5
3142: PUSH
3143: LD_INT 3
3145: MOD
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: PUSH
3151: LD_EXP 5
3155: PUSH
3156: LD_INT 10
3158: MOD
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: OR
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: AND
3174: IFFALSE 3180
// InitBonus ;
3176: CALL 9289 0 0
// if waveNumber mod 10 = 0 then
3180: LD_EXP 5
3184: PUSH
3185: LD_INT 10
3187: MOD
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3198
// SaveForQuickRestart ;
3194: CALL_OW 22
// if waveNumber = 100 then
3198: LD_EXP 5
3202: PUSH
3203: LD_INT 100
3205: EQUAL
3206: IFFALSE 3219
// begin FogOff ( your_side ) ;
3208: LD_OWVAR 2
3212: PPUSH
3213: CALL_OW 344
// break ;
3217: GO 3276
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3219: LD_ADDR_EXP 4
3223: PUSH
3224: LD_INT 3150
3226: PPUSH
3227: LD_INT 5250
3229: PPUSH
3230: CALL_OW 12
3234: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3235: LD_EXP 4
3239: PPUSH
3240: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3244: LD_ADDR_EXP 5
3248: PUSH
3249: LD_EXP 5
3253: PUSH
3254: LD_INT 1
3256: PLUS
3257: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3258: LD_EXP 5
3262: PPUSH
3263: CALL 4280 0 1
// end ; Wait ( 0 0$01 ) ;
3267: LD_INT 35
3269: PPUSH
3270: CALL_OW 67
// end ;
3274: GO 3050
// end ;
3276: PPOPN 1
3278: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3279: LD_EXP 4
3283: PUSH
3284: LD_INT 0
3286: GREATER
3287: IFFALSE 3307
3289: GO 3291
3291: DISABLE
// begin enable ;
3292: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3293: LD_ADDR_EXP 4
3297: PUSH
3298: LD_EXP 4
3302: PUSH
3303: LD_INT 35
3305: MINUS
3306: ST_TO_ADDR
// end ; end_of_file
3307: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3308: LD_VAR 0 1
3312: PUSH
3313: LD_EXP 13
3317: IN
3318: NOT
3319: IFFALSE 3350
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3321: LD_ADDR_EXP 13
3325: PUSH
3326: LD_EXP 13
3330: PPUSH
3331: LD_EXP 13
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 1
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// end ;
3350: PPOPN 1
3352: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL 25467 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 255
3371: PUSH
3372: LD_OWVAR 2
3376: EQUAL
3377: PUSH
3378: LD_VAR 0 1
3382: PPUSH
3383: CALL_OW 247
3387: PUSH
3388: LD_INT 1
3390: EQUAL
3391: AND
3392: IFFALSE 3423
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3394: LD_ADDR_EXP 8
3398: PUSH
3399: LD_EXP 8
3403: PPUSH
3404: LD_EXP 8
3408: PUSH
3409: LD_INT 1
3411: PLUS
3412: PPUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 255
3432: PUSH
3433: LD_INT 7
3435: EQUAL
3436: IFFALSE 3810
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3438: LD_VAR 0 1
3442: PUSH
3443: LD_INT 34
3445: PUSH
3446: LD_INT 91
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 69
3457: IN
3458: IFFALSE 3503
// begin if Rand ( 1 , 100 ) <= 70 then
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 100
3465: PPUSH
3466: CALL_OW 12
3470: PUSH
3471: LD_INT 70
3473: LESSEQUAL
3474: IFFALSE 3503
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 250
3485: PPUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 251
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 247
3512: PUSH
3513: LD_INT 1
3515: DOUBLE
3516: EQUAL
3517: IFTRUE 3521
3519: GO 3655
3521: POP
// begin case GetClass ( un ) of class_apeman :
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 257
3531: PUSH
3532: LD_INT 12
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3550
3540: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3541: LD_INT 2
3543: PPUSH
3544: CALL 471 0 1
3548: GO 3653
3550: LD_INT 15
3552: DOUBLE
3553: EQUAL
3554: IFTRUE 3558
3556: GO 3568
3558: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3559: LD_INT 5
3561: PPUSH
3562: CALL 471 0 1
3566: GO 3653
3568: LD_INT 17
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3586
3576: POP
// AddPoints ( 30 ) ; class_soldier :
3577: LD_INT 30
3579: PPUSH
3580: CALL 471 0 1
3584: GO 3653
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3604
3594: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3595: LD_INT 50
3597: PPUSH
3598: CALL 471 0 1
3602: GO 3653
3604: LD_INT 9
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3624
3610: LD_INT 5
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3624
3616: LD_INT 8
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3634
3624: POP
// AddPoints ( 75 ) ; class_mechanic :
3625: LD_INT 75
3627: PPUSH
3628: CALL 471 0 1
3632: GO 3653
3634: LD_INT 3
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3652
3642: POP
// AddPoints ( 60 ) ; end ;
3643: LD_INT 60
3645: PPUSH
3646: CALL 471 0 1
3650: GO 3653
3652: POP
// end ; unit_vehicle :
3653: GO 3810
3655: LD_INT 2
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3809
3663: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3664: LD_VAR 0 1
3668: PPUSH
3669: CALL_OW 265
3673: PUSH
3674: LD_INT 12
3676: DOUBLE
3677: EQUAL
3678: IFTRUE 3694
3680: LD_INT 1
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3694
3686: LD_INT 11
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3694
3692: GO 3704
3694: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3695: LD_INT 100
3697: PPUSH
3698: CALL 471 0 1
3702: GO 3807
3704: LD_INT 13
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3742
3710: LD_INT 14
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3742
3716: LD_INT 2
3718: DOUBLE
3719: EQUAL
3720: IFTRUE 3742
3722: LD_INT 3
3724: DOUBLE
3725: EQUAL
3726: IFTRUE 3742
3728: LD_INT 21
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3742
3734: LD_INT 22
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3752
3742: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3743: LD_INT 250
3745: PPUSH
3746: CALL 471 0 1
3750: GO 3807
3752: LD_INT 4
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3778
3758: LD_INT 5
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3778
3764: LD_INT 23
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3778
3770: LD_INT 24
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3788
3778: POP
// AddPoints ( 500 ) ; 25 :
3779: LD_INT 500
3781: PPUSH
3782: CALL 471 0 1
3786: GO 3807
3788: LD_INT 25
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3806
3796: POP
// AddPoints ( 1250 ) ; end ;
3797: LD_INT 1250
3799: PPUSH
3800: CALL 471 0 1
3804: GO 3807
3806: POP
// end ; end ;
3807: GO 3810
3809: POP
// end ; end ;
3810: PPOPN 1
3812: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 266
3822: PUSH
3823: LD_INT 0
3825: EQUAL
3826: IFFALSE 3876
// begin base_x := GetX ( b ) ;
3828: LD_ADDR_EXP 9
3832: PUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 250
3842: ST_TO_ADDR
// base_y := GetY ( b ) ;
3843: LD_ADDR_EXP 10
3847: PUSH
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 251
3857: ST_TO_ADDR
// base := b ;
3858: LD_ADDR_EXP 11
3862: PUSH
3863: LD_VAR 0 1
3867: ST_TO_ADDR
// game_started := true ;
3868: LD_ADDR_EXP 7
3872: PUSH
3873: LD_INT 1
3875: ST_TO_ADDR
// end ; end ;
3876: PPOPN 1
3878: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 255
3888: PUSH
3889: LD_OWVAR 2
3893: EQUAL
3894: IFFALSE 3898
// exit ;
3896: GO 4045
// if GetType ( un ) = unit_vehicle then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 247
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: IFFALSE 3964
// begin KillUnit ( un ) ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 248
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 264
3945: PUSH
3946: LD_INT 49
3948: PUSH
3949: EMPTY
3950: LIST
3951: IN
3952: OR
3953: IFFALSE 3964
// ExplodeVehicle ( un ) ;
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 247
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4045
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 248
3988: PUSH
3989: LD_INT 2
3991: EQUAL
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 248
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: IN
4033: OR
4034: IFFALSE 4045
// KillUnit ( un ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 66
// end ; end ;
4045: PPOPN 1
4047: END
// every 0 0$1 do
4048: GO 4050
4050: DISABLE
// begin enable ;
4051: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4052: LD_INT 4
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 22
4060: PUSH
4061: LD_OWVAR 2
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 513
// end ;
4074: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4075: LD_EXP 7
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_OWVAR 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PUSH
4111: LD_INT 0
4113: EQUAL
4114: AND
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( die ) ;
4120: LD_STRING die
4122: PPUSH
4123: CALL_OW 104
4127: END
// every 0 0$21 trigger tick <= 15 15$00 do
4128: LD_OWVAR 1
4132: PUSH
4133: LD_INT 31500
4135: LESSEQUAL
4136: IFFALSE 4163
4138: GO 4140
4140: DISABLE
// begin enable ;
4141: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 5
4147: PPUSH
4148: CALL_OW 12
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: CALL_OW 55
// end ;
4163: END
// every 0 0$51 trigger tick > 15 15$00 do
4164: LD_OWVAR 1
4168: PUSH
4169: LD_INT 31500
4171: GREATER
4172: IFFALSE 4219
4174: GO 4176
4176: DISABLE
// begin enable ;
4177: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4178: LD_INT 22
4180: PUSH
4181: LD_INT 7
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 69
4192: PUSH
4193: LD_INT 0
4195: EQUAL
4196: IFFALSE 4219
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 5
4203: PPUSH
4204: CALL_OW 12
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 55
// end ;
4219: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4220: LD_VAR 0 1
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: CALL_OW 308
4232: IFFALSE 4243
// KillUnit ( building ) ;
4234: LD_VAR 0 1
4238: PPUSH
4239: CALL_OW 66
// end ;
4243: PPOPN 2
4245: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL 25565 0 3
// end ;
4265: PPOPN 3
4267: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL 25573 0 1
// end ; end_of_file
4277: PPOPN 1
4279: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4280: LD_INT 0
4282: PPUSH
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4291: LD_ADDR_VAR 0 7
4295: PUSH
4296: LD_INT 1
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: ST_TO_ADDR
// uc_side := 7 ;
4306: LD_ADDR_OWVAR 20
4310: PUSH
4311: LD_INT 7
4313: ST_TO_ADDR
// l := 0 ;
4314: LD_ADDR_VAR 0 9
4318: PUSH
4319: LD_INT 0
4321: ST_TO_ADDR
// case num of 1 :
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 1
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4354
4335: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4336: LD_ADDR_VAR 0 2
4340: PUSH
4341: LD_INT 12
4343: PPUSH
4344: LD_INT 1
4346: PPUSH
4347: CALL 6683 0 2
4351: ST_TO_ADDR
4352: GO 6492
4354: LD_INT 2
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4381
4362: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: LD_INT 12
4370: PPUSH
4371: LD_INT 1
4373: PPUSH
4374: CALL 6754 0 2
4378: ST_TO_ADDR
4379: GO 6492
4381: LD_INT 3
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4408
4389: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4390: LD_ADDR_VAR 0 2
4394: PUSH
4395: LD_INT 12
4397: PPUSH
4398: LD_INT 1
4400: PPUSH
4401: CALL 6825 0 2
4405: ST_TO_ADDR
4406: GO 6492
4408: LD_INT 4
4410: DOUBLE
4411: EQUAL
4412: IFTRUE 4416
4414: GO 4435
4416: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: LD_INT 7
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL 6904 0 2
4432: ST_TO_ADDR
4433: GO 6492
4435: LD_INT 5
4437: DOUBLE
4438: EQUAL
4439: IFTRUE 4443
4441: GO 4462
4443: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4444: LD_ADDR_VAR 0 2
4448: PUSH
4449: LD_INT 7
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: CALL 7300 0 2
4459: ST_TO_ADDR
4460: GO 6492
4462: LD_INT 6
4464: DOUBLE
4465: EQUAL
4466: IFTRUE 4470
4468: GO 4489
4470: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 6
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: CALL 7720 0 2
4486: ST_TO_ADDR
4487: GO 6492
4489: LD_INT 7
4491: DOUBLE
4492: EQUAL
4493: IFTRUE 4497
4495: GO 4516
4497: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: LD_INT 15
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL 8140 0 2
4513: ST_TO_ADDR
4514: GO 6492
4516: LD_INT 8
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4543
4524: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 7
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL 8241 0 2
4540: ST_TO_ADDR
4541: GO 6492
4543: LD_INT 9
4545: DOUBLE
4546: EQUAL
4547: IFTRUE 4551
4549: GO 4582
4551: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4552: LD_ADDR_VAR 0 2
4556: PUSH
4557: LD_INT 4
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: CALL 8241 0 2
4567: PUSH
4568: LD_INT 7
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL 7300 0 2
4578: ADD
4579: ST_TO_ADDR
4580: GO 6492
4582: LD_INT 10
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4621
4590: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4591: LD_ADDR_VAR 0 2
4595: PUSH
4596: LD_INT 9
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: CALL 8140 0 2
4606: PUSH
4607: LD_INT 14
4609: PPUSH
4610: LD_INT 1
4612: PPUSH
4613: CALL 6825 0 2
4617: ADD
4618: ST_TO_ADDR
4619: GO 6492
4621: LD_INT 11
4623: DOUBLE
4624: EQUAL
4625: IFTRUE 4677
4627: LD_INT 21
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4677
4633: LD_INT 31
4635: DOUBLE
4636: EQUAL
4637: IFTRUE 4677
4639: LD_INT 41
4641: DOUBLE
4642: EQUAL
4643: IFTRUE 4677
4645: LD_INT 51
4647: DOUBLE
4648: EQUAL
4649: IFTRUE 4677
4651: LD_INT 61
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4677
4657: LD_INT 71
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4677
4663: LD_INT 81
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4677
4669: LD_INT 91
4671: DOUBLE
4672: EQUAL
4673: IFTRUE 4677
4675: GO 4786
4677: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: LD_INT 20
4685: PUSH
4686: LD_INT 30
4688: PUSH
4689: LD_INT 40
4691: PUSH
4692: LD_INT 45
4694: PUSH
4695: LD_INT 50
4697: PUSH
4698: LD_INT 60
4700: PUSH
4701: LD_INT 70
4703: PUSH
4704: LD_INT 80
4706: PUSH
4707: LD_INT 100
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: LD_VAR 0 1
4725: PUSH
4726: LD_INT 10
4728: DIV
4729: ARRAY
4730: PPUSH
4731: LD_INT 2
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 4
4739: PUSH
4740: LD_INT 5
4742: PUSH
4743: LD_INT 6
4745: PUSH
4746: LD_INT 7
4748: PUSH
4749: LD_INT 8
4751: PUSH
4752: LD_INT 9
4754: PUSH
4755: LD_INT 10
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 1
4773: PUSH
4774: LD_INT 10
4776: DIV
4777: ARRAY
4778: PPUSH
4779: CALL 6683 0 2
4783: ST_TO_ADDR
4784: GO 6492
4786: LD_INT 12
4788: DOUBLE
4789: EQUAL
4790: IFTRUE 4842
4792: LD_INT 22
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4842
4798: LD_INT 32
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4842
4804: LD_INT 42
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4842
4810: LD_INT 52
4812: DOUBLE
4813: EQUAL
4814: IFTRUE 4842
4816: LD_INT 62
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4842
4822: LD_INT 72
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4842
4828: LD_INT 82
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4842
4834: LD_INT 92
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4951
4842: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 16
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 28
4856: PUSH
4857: LD_INT 33
4859: PUSH
4860: LD_INT 39
4862: PUSH
4863: LD_INT 46
4865: PUSH
4866: LD_INT 56
4868: PUSH
4869: LD_INT 66
4871: PUSH
4872: LD_INT 80
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: PUSH
4891: LD_INT 10
4893: DIV
4894: ARRAY
4895: PPUSH
4896: LD_INT 2
4898: PUSH
4899: LD_INT 3
4901: PUSH
4902: LD_INT 4
4904: PUSH
4905: LD_INT 5
4907: PUSH
4908: LD_INT 6
4910: PUSH
4911: LD_INT 7
4913: PUSH
4914: LD_INT 8
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: LD_INT 10
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 10
4941: DIV
4942: ARRAY
4943: PPUSH
4944: CALL 6754 0 2
4948: ST_TO_ADDR
4949: GO 6492
4951: LD_INT 13
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 5007
4957: LD_INT 23
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 5007
4963: LD_INT 33
4965: DOUBLE
4966: EQUAL
4967: IFTRUE 5007
4969: LD_INT 43
4971: DOUBLE
4972: EQUAL
4973: IFTRUE 5007
4975: LD_INT 53
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 5007
4981: LD_INT 63
4983: DOUBLE
4984: EQUAL
4985: IFTRUE 5007
4987: LD_INT 73
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 5007
4993: LD_INT 83
4995: DOUBLE
4996: EQUAL
4997: IFTRUE 5007
4999: LD_INT 93
5001: DOUBLE
5002: EQUAL
5003: IFTRUE 5007
5005: GO 5116
5007: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_INT 14
5015: PUSH
5016: LD_INT 18
5018: PUSH
5019: LD_INT 22
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 33
5027: PUSH
5028: LD_INT 39
5030: PUSH
5031: LD_INT 44
5033: PUSH
5034: LD_INT 57
5036: PUSH
5037: LD_INT 65
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_VAR 0 1
5055: PUSH
5056: LD_INT 10
5058: DIV
5059: ARRAY
5060: PPUSH
5061: LD_INT 2
5063: PUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 4
5069: PUSH
5070: LD_INT 5
5072: PUSH
5073: LD_INT 6
5075: PUSH
5076: LD_INT 7
5078: PUSH
5079: LD_INT 8
5081: PUSH
5082: LD_INT 9
5084: PUSH
5085: LD_INT 10
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 10
5106: DIV
5107: ARRAY
5108: PPUSH
5109: CALL 6825 0 2
5113: ST_TO_ADDR
5114: GO 6492
5116: LD_INT 14
5118: DOUBLE
5119: EQUAL
5120: IFTRUE 5172
5122: LD_INT 24
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5172
5128: LD_INT 34
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5172
5134: LD_INT 44
5136: DOUBLE
5137: EQUAL
5138: IFTRUE 5172
5140: LD_INT 54
5142: DOUBLE
5143: EQUAL
5144: IFTRUE 5172
5146: LD_INT 64
5148: DOUBLE
5149: EQUAL
5150: IFTRUE 5172
5152: LD_INT 74
5154: DOUBLE
5155: EQUAL
5156: IFTRUE 5172
5158: LD_INT 84
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5172
5164: LD_INT 94
5166: DOUBLE
5167: EQUAL
5168: IFTRUE 5172
5170: GO 5281
5172: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: LD_INT 9
5180: PUSH
5181: LD_INT 15
5183: PUSH
5184: LD_INT 22
5186: PUSH
5187: LD_INT 30
5189: PUSH
5190: LD_INT 39
5192: PUSH
5193: LD_INT 45
5195: PUSH
5196: LD_INT 56
5198: PUSH
5199: LD_INT 60
5201: PUSH
5202: LD_INT 65
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_VAR 0 1
5220: PUSH
5221: LD_INT 10
5223: DIV
5224: ARRAY
5225: PPUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 4
5234: PUSH
5235: LD_INT 5
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: LD_INT 7
5243: PUSH
5244: LD_INT 8
5246: PUSH
5247: LD_INT 9
5249: PUSH
5250: LD_INT 10
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_VAR 0 1
5268: PUSH
5269: LD_INT 10
5271: DIV
5272: ARRAY
5273: PPUSH
5274: CALL 6904 0 2
5278: ST_TO_ADDR
5279: GO 6492
5281: LD_INT 15
5283: DOUBLE
5284: EQUAL
5285: IFTRUE 5337
5287: LD_INT 25
5289: DOUBLE
5290: EQUAL
5291: IFTRUE 5337
5293: LD_INT 35
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5337
5299: LD_INT 45
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5337
5305: LD_INT 55
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5337
5311: LD_INT 65
5313: DOUBLE
5314: EQUAL
5315: IFTRUE 5337
5317: LD_INT 75
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5337
5323: LD_INT 85
5325: DOUBLE
5326: EQUAL
5327: IFTRUE 5337
5329: LD_INT 95
5331: DOUBLE
5332: EQUAL
5333: IFTRUE 5337
5335: GO 5446
5337: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 6
5345: PUSH
5346: LD_INT 11
5348: PUSH
5349: LD_INT 15
5351: PUSH
5352: LD_INT 20
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 30
5360: PUSH
5361: LD_INT 35
5363: PUSH
5364: LD_INT 40
5366: PUSH
5367: LD_INT 45
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_VAR 0 1
5385: PUSH
5386: LD_INT 10
5388: DIV
5389: ARRAY
5390: PPUSH
5391: LD_INT 2
5393: PUSH
5394: LD_INT 3
5396: PUSH
5397: LD_INT 4
5399: PUSH
5400: LD_INT 5
5402: PUSH
5403: LD_INT 6
5405: PUSH
5406: LD_INT 7
5408: PUSH
5409: LD_INT 8
5411: PUSH
5412: LD_INT 9
5414: PUSH
5415: LD_INT 10
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: LD_VAR 0 1
5433: PUSH
5434: LD_INT 10
5436: DIV
5437: ARRAY
5438: PPUSH
5439: CALL 7300 0 2
5443: ST_TO_ADDR
5444: GO 6492
5446: LD_INT 16
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5502
5452: LD_INT 26
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5502
5458: LD_INT 36
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5502
5464: LD_INT 46
5466: DOUBLE
5467: EQUAL
5468: IFTRUE 5502
5470: LD_INT 56
5472: DOUBLE
5473: EQUAL
5474: IFTRUE 5502
5476: LD_INT 66
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5502
5482: LD_INT 76
5484: DOUBLE
5485: EQUAL
5486: IFTRUE 5502
5488: LD_INT 86
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5502
5494: LD_INT 96
5496: DOUBLE
5497: EQUAL
5498: IFTRUE 5502
5500: GO 5611
5502: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5503: LD_ADDR_VAR 0 2
5507: PUSH
5508: LD_INT 9
5510: PUSH
5511: LD_INT 12
5513: PUSH
5514: LD_INT 15
5516: PUSH
5517: LD_INT 18
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 24
5525: PUSH
5526: LD_INT 27
5528: PUSH
5529: LD_INT 30
5531: PUSH
5532: LD_INT 33
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 10
5553: DIV
5554: ARRAY
5555: PPUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 3
5561: PUSH
5562: LD_INT 4
5564: PUSH
5565: LD_INT 5
5567: PUSH
5568: LD_INT 6
5570: PUSH
5571: LD_INT 7
5573: PUSH
5574: LD_INT 8
5576: PUSH
5577: LD_INT 9
5579: PUSH
5580: LD_INT 10
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: PUSH
5594: LD_VAR 0 1
5598: PUSH
5599: LD_INT 10
5601: DIV
5602: ARRAY
5603: PPUSH
5604: CALL 7720 0 2
5608: ST_TO_ADDR
5609: GO 6492
5611: LD_INT 17
5613: DOUBLE
5614: EQUAL
5615: IFTRUE 5667
5617: LD_INT 27
5619: DOUBLE
5620: EQUAL
5621: IFTRUE 5667
5623: LD_INT 37
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5667
5629: LD_INT 47
5631: DOUBLE
5632: EQUAL
5633: IFTRUE 5667
5635: LD_INT 57
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5667
5641: LD_INT 67
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5667
5647: LD_INT 77
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5667
5653: LD_INT 87
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5667
5659: LD_INT 97
5661: DOUBLE
5662: EQUAL
5663: IFTRUE 5667
5665: GO 5776
5667: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_INT 14
5675: PUSH
5676: LD_INT 16
5678: PUSH
5679: LD_INT 18
5681: PUSH
5682: LD_INT 22
5684: PUSH
5685: LD_INT 24
5687: PUSH
5688: LD_INT 26
5690: PUSH
5691: LD_INT 28
5693: PUSH
5694: LD_INT 32
5696: PUSH
5697: LD_INT 35
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_INT 10
5718: DIV
5719: ARRAY
5720: PPUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 3
5726: PUSH
5727: LD_INT 4
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: LD_INT 6
5735: PUSH
5736: LD_INT 7
5738: PUSH
5739: LD_INT 8
5741: PUSH
5742: LD_INT 9
5744: PUSH
5745: LD_INT 10
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: PUSH
5759: LD_VAR 0 1
5763: PUSH
5764: LD_INT 10
5766: DIV
5767: ARRAY
5768: PPUSH
5769: CALL 8140 0 2
5773: ST_TO_ADDR
5774: GO 6492
5776: LD_INT 18
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5832
5782: LD_INT 28
5784: DOUBLE
5785: EQUAL
5786: IFTRUE 5832
5788: LD_INT 38
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5832
5794: LD_INT 48
5796: DOUBLE
5797: EQUAL
5798: IFTRUE 5832
5800: LD_INT 58
5802: DOUBLE
5803: EQUAL
5804: IFTRUE 5832
5806: LD_INT 68
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5832
5812: LD_INT 78
5814: DOUBLE
5815: EQUAL
5816: IFTRUE 5832
5818: LD_INT 88
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5832
5824: LD_INT 98
5826: DOUBLE
5827: EQUAL
5828: IFTRUE 5832
5830: GO 5941
5832: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5833: LD_ADDR_VAR 0 2
5837: PUSH
5838: LD_INT 9
5840: PUSH
5841: LD_INT 12
5843: PUSH
5844: LD_INT 15
5846: PUSH
5847: LD_INT 18
5849: PUSH
5850: LD_INT 21
5852: PUSH
5853: LD_INT 24
5855: PUSH
5856: LD_INT 27
5858: PUSH
5859: LD_INT 30
5861: PUSH
5862: LD_INT 33
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_VAR 0 1
5880: PUSH
5881: LD_INT 10
5883: DIV
5884: ARRAY
5885: PPUSH
5886: LD_INT 2
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 4
5894: PUSH
5895: LD_INT 5
5897: PUSH
5898: LD_INT 6
5900: PUSH
5901: LD_INT 7
5903: PUSH
5904: LD_INT 8
5906: PUSH
5907: LD_INT 9
5909: PUSH
5910: LD_INT 10
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: LD_INT 10
5931: DIV
5932: ARRAY
5933: PPUSH
5934: CALL 8241 0 2
5938: ST_TO_ADDR
5939: GO 6492
5941: LD_INT 19
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5997
5947: LD_INT 29
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5997
5953: LD_INT 39
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5997
5959: LD_INT 49
5961: DOUBLE
5962: EQUAL
5963: IFTRUE 5997
5965: LD_INT 59
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5997
5971: LD_INT 69
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5997
5977: LD_INT 79
5979: DOUBLE
5980: EQUAL
5981: IFTRUE 5997
5983: LD_INT 89
5985: DOUBLE
5986: EQUAL
5987: IFTRUE 5997
5989: LD_INT 99
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6208
5997: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: LD_INT 10
6011: PUSH
6012: LD_INT 13
6014: PUSH
6015: LD_INT 14
6017: PUSH
6018: LD_INT 17
6020: PUSH
6021: LD_INT 19
6023: PUSH
6024: LD_INT 21
6026: PUSH
6027: LD_INT 23
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 10
6048: DIV
6049: ARRAY
6050: PPUSH
6051: LD_INT 2
6053: PUSH
6054: LD_INT 3
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 5
6062: PUSH
6063: LD_INT 6
6065: PUSH
6066: LD_INT 7
6068: PUSH
6069: LD_INT 8
6071: PUSH
6072: LD_INT 9
6074: PUSH
6075: LD_INT 10
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_VAR 0 1
6093: PUSH
6094: LD_INT 10
6096: DIV
6097: ARRAY
6098: PPUSH
6099: CALL 8241 0 2
6103: PUSH
6104: LD_INT 4
6106: PUSH
6107: LD_INT 7
6109: PUSH
6110: LD_INT 10
6112: PUSH
6113: LD_INT 13
6115: PUSH
6116: LD_INT 14
6118: PUSH
6119: LD_INT 17
6121: PUSH
6122: LD_INT 19
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 25
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PUSH
6142: LD_VAR 0 1
6146: PUSH
6147: LD_INT 10
6149: DIV
6150: ARRAY
6151: PPUSH
6152: LD_INT 2
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 4
6160: PUSH
6161: LD_INT 5
6163: PUSH
6164: LD_INT 6
6166: PUSH
6167: LD_INT 7
6169: PUSH
6170: LD_INT 8
6172: PUSH
6173: LD_INT 9
6175: PUSH
6176: LD_INT 10
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: LD_INT 10
6197: DIV
6198: ARRAY
6199: PPUSH
6200: CALL 7300 0 2
6204: ADD
6205: ST_TO_ADDR
6206: GO 6492
6208: LD_INT 20
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6264
6214: LD_INT 30
6216: DOUBLE
6217: EQUAL
6218: IFTRUE 6264
6220: LD_INT 40
6222: DOUBLE
6223: EQUAL
6224: IFTRUE 6264
6226: LD_INT 50
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6264
6232: LD_INT 60
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6264
6238: LD_INT 70
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6264
6244: LD_INT 80
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6264
6250: LD_INT 90
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6264
6256: LD_INT 100
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6491
6264: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 4
6272: PUSH
6273: LD_INT 7
6275: PUSH
6276: LD_INT 10
6278: PUSH
6279: LD_INT 13
6281: PUSH
6282: LD_INT 14
6284: PUSH
6285: LD_INT 17
6287: PUSH
6288: LD_INT 19
6290: PUSH
6291: LD_INT 21
6293: PUSH
6294: LD_INT 23
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_VAR 0 1
6312: PUSH
6313: LD_INT 10
6315: DIVREAL
6316: PUSH
6317: LD_INT 1
6319: MINUS
6320: ARRAY
6321: PPUSH
6322: LD_INT 2
6324: PUSH
6325: LD_INT 3
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 5
6333: PUSH
6334: LD_INT 6
6336: PUSH
6337: LD_INT 7
6339: PUSH
6340: LD_INT 8
6342: PUSH
6343: LD_INT 9
6345: PUSH
6346: LD_INT 10
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_VAR 0 1
6364: PUSH
6365: LD_INT 10
6367: DIVREAL
6368: PUSH
6369: LD_INT 1
6371: MINUS
6372: ARRAY
6373: PPUSH
6374: CALL 8140 0 2
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 7
6384: PUSH
6385: LD_INT 10
6387: PUSH
6388: LD_INT 13
6390: PUSH
6391: LD_INT 14
6393: PUSH
6394: LD_INT 17
6396: PUSH
6397: LD_INT 19
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_VAR 0 1
6421: PUSH
6422: LD_INT 10
6424: DIVREAL
6425: PUSH
6426: LD_INT 1
6428: MINUS
6429: ARRAY
6430: PPUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 7
6448: PUSH
6449: LD_INT 8
6451: PUSH
6452: LD_INT 9
6454: PUSH
6455: LD_INT 10
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: LD_INT 10
6476: DIVREAL
6477: PUSH
6478: LD_INT 1
6480: MINUS
6481: ARRAY
6482: PPUSH
6483: CALL 7720 0 2
6487: ADD
6488: ST_TO_ADDR
6489: GO 6492
6491: POP
// for i in result do
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: LD_VAR 0 2
6501: PUSH
6502: FOR_IN
6503: IFFALSE 6676
// begin a := rand ( 1 , 2 ) ;
6505: LD_ADDR_VAR 0 8
6509: PUSH
6510: LD_INT 1
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: CALL_OW 12
6520: ST_TO_ADDR
// if a = 1 then
6521: LD_VAR 0 8
6525: PUSH
6526: LD_INT 1
6528: EQUAL
6529: IFFALSE 6545
// SetDir ( i , 3 ) else
6531: LD_VAR 0 3
6535: PPUSH
6536: LD_INT 3
6538: PPUSH
6539: CALL_OW 233
6543: GO 6557
// SetDir ( i , 5 ) ;
6545: LD_VAR 0 3
6549: PPUSH
6550: LD_INT 5
6552: PPUSH
6553: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6557: LD_VAR 0 3
6561: PPUSH
6562: LD_VAR 0 7
6566: PUSH
6567: LD_VAR 0 8
6571: ARRAY
6572: PPUSH
6573: LD_INT 0
6575: PPUSH
6576: CALL_OW 49
// if GetControl ( i ) = control_manual then
6580: LD_VAR 0 3
6584: PPUSH
6585: CALL_OW 263
6589: PUSH
6590: LD_INT 1
6592: EQUAL
6593: IFFALSE 6639
// begin uc_nation := GetNation ( i ) ;
6595: LD_ADDR_OWVAR 21
6599: PUSH
6600: LD_VAR 0 3
6604: PPUSH
6605: CALL_OW 248
6609: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6610: LD_INT 0
6612: PPUSH
6613: LD_INT 3
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6625: CALL_OW 44
6629: PPUSH
6630: LD_VAR 0 3
6634: PPUSH
6635: CALL_OW 52
// end ; l := l + 1 ;
6639: LD_ADDR_VAR 0 9
6643: PUSH
6644: LD_VAR 0 9
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: ST_TO_ADDR
// if l mod 10 = 0 then
6653: LD_VAR 0 9
6657: PUSH
6658: LD_INT 10
6660: MOD
6661: PUSH
6662: LD_INT 0
6664: EQUAL
6665: IFFALSE 6674
// Wait ( 0 0$02 ) ;
6667: LD_INT 70
6669: PPUSH
6670: CALL_OW 67
// end ;
6674: GO 6502
6676: POP
6677: POP
// end ;
6678: LD_VAR 0 2
6682: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
// uc_nation := nation_nature ;
6688: LD_ADDR_OWVAR 21
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// for i = 1 to n do
6696: LD_ADDR_VAR 0 4
6700: PUSH
6701: DOUBLE
6702: LD_INT 1
6704: DEC
6705: ST_TO_ADDR
6706: LD_VAR 0 1
6710: PUSH
6711: FOR_TO
6712: IFFALSE 6747
// begin PrepareHuman ( false , class_apeman , skill ) ;
6714: LD_INT 0
6716: PPUSH
6717: LD_INT 12
6719: PPUSH
6720: LD_VAR 0 2
6724: PPUSH
6725: CALL_OW 380
// result := result ^ CreateHuman ;
6729: LD_ADDR_VAR 0 3
6733: PUSH
6734: LD_VAR 0 3
6738: PUSH
6739: CALL_OW 44
6743: ADD
6744: ST_TO_ADDR
// end ;
6745: GO 6711
6747: POP
6748: POP
// end ;
6749: LD_VAR 0 3
6753: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
6758: PPUSH
// uc_nation := nation_nature ;
6759: LD_ADDR_OWVAR 21
6763: PUSH
6764: LD_INT 0
6766: ST_TO_ADDR
// for i = 1 to n do
6767: LD_ADDR_VAR 0 4
6771: PUSH
6772: DOUBLE
6773: LD_INT 1
6775: DEC
6776: ST_TO_ADDR
6777: LD_VAR 0 1
6781: PUSH
6782: FOR_TO
6783: IFFALSE 6818
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6785: LD_INT 0
6787: PPUSH
6788: LD_INT 15
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 380
// result := result ^ CreateHuman ;
6800: LD_ADDR_VAR 0 3
6804: PUSH
6805: LD_VAR 0 3
6809: PUSH
6810: CALL_OW 44
6814: ADD
6815: ST_TO_ADDR
// end ;
6816: GO 6782
6818: POP
6819: POP
// end ;
6820: LD_VAR 0 3
6824: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
6829: PPUSH
// for i = 1 to n do
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: DOUBLE
6836: LD_INT 1
6838: DEC
6839: ST_TO_ADDR
6840: LD_VAR 0 1
6844: PUSH
6845: FOR_TO
6846: IFFALSE 6897
// begin uc_nation := rand ( 1 , 3 ) ;
6848: LD_ADDR_OWVAR 21
6852: PUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 3
6858: PPUSH
6859: CALL_OW 12
6863: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6864: LD_INT 0
6866: PPUSH
6867: LD_INT 1
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 380
// result := result ^ CreateHuman ;
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: LD_VAR 0 3
6888: PUSH
6889: CALL_OW 44
6893: ADD
6894: ST_TO_ADDR
// end ;
6895: GO 6845
6897: POP
6898: POP
// end ;
6899: LD_VAR 0 3
6903: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
// for i = 1 to n do
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 1
6927: PUSH
6928: FOR_TO
6929: IFFALSE 7293
// begin uc_nation := rand ( 1 , 3 ) ;
6931: LD_ADDR_OWVAR 21
6935: PUSH
6936: LD_INT 1
6938: PPUSH
6939: LD_INT 3
6941: PPUSH
6942: CALL_OW 12
6946: ST_TO_ADDR
// case uc_nation of 1 :
6947: LD_OWVAR 21
6951: PUSH
6952: LD_INT 1
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7023
6960: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6961: LD_ADDR_VAR 0 6
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6976: LD_ADDR_VAR 0 7
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6991: LD_ADDR_VAR 0 8
6995: PUSH
6996: LD_INT 1
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7006: LD_ADDR_VAR 0 9
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; 2 :
7021: GO 7158
7023: LD_INT 2
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7094
7031: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: LD_INT 12
7039: PUSH
7040: LD_INT 11
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7047: LD_ADDR_VAR 0 7
7051: PUSH
7052: LD_INT 23
7054: PUSH
7055: LD_INT 24
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7062: LD_ADDR_VAR 0 8
7066: PUSH
7067: LD_INT 1
7069: PUSH
7070: LD_INT 5
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7077: LD_ADDR_VAR 0 9
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: LD_INT 2
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: ST_TO_ADDR
// end ; 3 :
7092: GO 7158
7094: LD_INT 3
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7157
7102: POP
// begin chassis := [ ru_medium_wheeled ] ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: EMPTY
7112: LIST
7113: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7114: LD_ADDR_VAR 0 7
7118: PUSH
7119: LD_INT 42
7121: PUSH
7122: LD_INT 44
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7129: LD_ADDR_VAR 0 8
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: LD_INT 3
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: LD_INT 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: ST_TO_ADDR
// end ; end ;
7155: GO 7158
7157: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7158: LD_ADDR_OWVAR 37
7162: PUSH
7163: LD_VAR 0 6
7167: PUSH
7168: LD_INT 1
7170: PPUSH
7171: LD_VAR 0 6
7175: PPUSH
7176: CALL_OW 12
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_VAR 0 9
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_VAR 0 9
7199: PPUSH
7200: CALL_OW 12
7204: ARRAY
7205: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7206: LD_ADDR_OWVAR 38
7210: PUSH
7211: LD_VAR 0 8
7215: PUSH
7216: LD_INT 1
7218: PPUSH
7219: LD_VAR 0 8
7223: PPUSH
7224: CALL_OW 12
7228: ARRAY
7229: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7230: LD_ADDR_OWVAR 40
7234: PUSH
7235: LD_VAR 0 7
7239: PUSH
7240: LD_INT 1
7242: PPUSH
7243: LD_VAR 0 7
7247: PPUSH
7248: CALL_OW 12
7252: ARRAY
7253: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7254: LD_ADDR_OWVAR 41
7258: PUSH
7259: LD_INT 100
7261: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 1
7279: PLUS
7280: PPUSH
7281: CALL_OW 45
7285: PPUSH
7286: CALL_OW 2
7290: ST_TO_ADDR
// end ;
7291: GO 6928
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 3
7299: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
// for i = 1 to n do
7309: LD_ADDR_VAR 0 4
7313: PUSH
7314: DOUBLE
7315: LD_INT 1
7317: DEC
7318: ST_TO_ADDR
7319: LD_VAR 0 1
7323: PUSH
7324: FOR_TO
7325: IFFALSE 7713
// begin uc_nation := rand ( 1 , 3 ) ;
7327: LD_ADDR_OWVAR 21
7331: PUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 3
7337: PPUSH
7338: CALL_OW 12
7342: ST_TO_ADDR
// case uc_nation of 1 :
7343: LD_OWVAR 21
7347: PUSH
7348: LD_INT 1
7350: DOUBLE
7351: EQUAL
7352: IFTRUE 7356
7354: GO 7427
7356: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7357: LD_ADDR_VAR 0 6
7361: PUSH
7362: LD_INT 2
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7372: LD_ADDR_VAR 0 7
7376: PUSH
7377: LD_INT 4
7379: PUSH
7380: LD_INT 5
7382: PUSH
7383: LD_INT 9
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7391: LD_ADDR_VAR 0 8
7395: PUSH
7396: LD_INT 1
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 1
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// end ; 2 :
7425: GO 7578
7427: LD_INT 2
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7506
7435: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_INT 13
7443: PUSH
7444: LD_INT 14
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7451: LD_ADDR_VAR 0 7
7455: PUSH
7456: LD_INT 27
7458: PUSH
7459: LD_INT 26
7461: PUSH
7462: LD_INT 25
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7470: LD_ADDR_VAR 0 8
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: LD_INT 5
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7485: LD_ADDR_VAR 0 9
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
// end ; 3 :
7504: GO 7578
7506: LD_INT 3
7508: DOUBLE
7509: EQUAL
7510: IFTRUE 7514
7512: GO 7577
7514: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7515: LD_ADDR_VAR 0 6
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 21
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7530: LD_ADDR_VAR 0 7
7534: PUSH
7535: LD_INT 44
7537: PUSH
7538: LD_INT 43
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7545: LD_ADDR_VAR 0 8
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7560: LD_ADDR_VAR 0 9
7564: PUSH
7565: LD_INT 1
7567: PUSH
7568: LD_INT 3
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7578: LD_ADDR_OWVAR 37
7582: PUSH
7583: LD_VAR 0 6
7587: PUSH
7588: LD_INT 1
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 12
7600: ARRAY
7601: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7602: LD_ADDR_OWVAR 39
7606: PUSH
7607: LD_VAR 0 9
7611: PUSH
7612: LD_INT 1
7614: PPUSH
7615: LD_VAR 0 9
7619: PPUSH
7620: CALL_OW 12
7624: ARRAY
7625: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7626: LD_ADDR_OWVAR 38
7630: PUSH
7631: LD_VAR 0 8
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_VAR 0 8
7643: PPUSH
7644: CALL_OW 12
7648: ARRAY
7649: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7650: LD_ADDR_OWVAR 40
7654: PUSH
7655: LD_VAR 0 7
7659: PUSH
7660: LD_INT 1
7662: PPUSH
7663: LD_VAR 0 7
7667: PPUSH
7668: CALL_OW 12
7672: ARRAY
7673: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7674: LD_ADDR_OWVAR 41
7678: PUSH
7679: LD_INT 100
7681: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7682: LD_ADDR_VAR 0 3
7686: PUSH
7687: LD_VAR 0 3
7691: PPUSH
7692: LD_VAR 0 3
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: PPUSH
7701: CALL_OW 45
7705: PPUSH
7706: CALL_OW 2
7710: ST_TO_ADDR
// end ;
7711: GO 7324
7713: POP
7714: POP
// end ;
7715: LD_VAR 0 3
7719: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// for i = 1 to n do
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: DOUBLE
7735: LD_INT 1
7737: DEC
7738: ST_TO_ADDR
7739: LD_VAR 0 1
7743: PUSH
7744: FOR_TO
7745: IFFALSE 8133
// begin uc_nation := rand ( 1 , 3 ) ;
7747: LD_ADDR_OWVAR 21
7751: PUSH
7752: LD_INT 1
7754: PPUSH
7755: LD_INT 3
7757: PPUSH
7758: CALL_OW 12
7762: ST_TO_ADDR
// case uc_nation of 1 :
7763: LD_OWVAR 21
7767: PUSH
7768: LD_INT 1
7770: DOUBLE
7771: EQUAL
7772: IFTRUE 7776
7774: GO 7843
7776: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7777: LD_ADDR_VAR 0 6
7781: PUSH
7782: LD_INT 4
7784: PUSH
7785: LD_INT 5
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7792: LD_ADDR_VAR 0 7
7796: PUSH
7797: LD_INT 6
7799: PUSH
7800: LD_INT 7
7802: PUSH
7803: LD_INT 9
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7811: LD_ADDR_VAR 0 8
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7826: LD_ADDR_VAR 0 9
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: ST_TO_ADDR
// end ; 2 :
7841: GO 7998
7843: LD_INT 2
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 7926
7851: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7852: LD_ADDR_VAR 0 6
7856: PUSH
7857: LD_INT 13
7859: PUSH
7860: LD_INT 14
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7867: LD_ADDR_VAR 0 7
7871: PUSH
7872: LD_INT 27
7874: PUSH
7875: LD_INT 26
7877: PUSH
7878: LD_INT 28
7880: PUSH
7881: LD_INT 29
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7890: LD_ADDR_VAR 0 8
7894: PUSH
7895: LD_INT 1
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7905: LD_ADDR_VAR 0 9
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: ST_TO_ADDR
// end ; 3 :
7924: GO 7998
7926: LD_INT 3
7928: DOUBLE
7929: EQUAL
7930: IFTRUE 7934
7932: GO 7997
7934: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7950: LD_ADDR_VAR 0 7
7954: PUSH
7955: LD_INT 46
7957: PUSH
7958: LD_INT 45
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7965: LD_ADDR_VAR 0 8
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: LD_INT 3
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: ST_TO_ADDR
// end ; end ;
7995: GO 7998
7997: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7998: LD_ADDR_OWVAR 37
8002: PUSH
8003: LD_VAR 0 6
8007: PUSH
8008: LD_INT 1
8010: PPUSH
8011: LD_VAR 0 6
8015: PPUSH
8016: CALL_OW 12
8020: ARRAY
8021: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8022: LD_ADDR_OWVAR 39
8026: PUSH
8027: LD_VAR 0 9
8031: PUSH
8032: LD_INT 1
8034: PPUSH
8035: LD_VAR 0 9
8039: PPUSH
8040: CALL_OW 12
8044: ARRAY
8045: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8046: LD_ADDR_OWVAR 38
8050: PUSH
8051: LD_VAR 0 8
8055: PUSH
8056: LD_INT 1
8058: PPUSH
8059: LD_VAR 0 8
8063: PPUSH
8064: CALL_OW 12
8068: ARRAY
8069: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8070: LD_ADDR_OWVAR 40
8074: PUSH
8075: LD_VAR 0 7
8079: PUSH
8080: LD_INT 1
8082: PPUSH
8083: LD_VAR 0 7
8087: PPUSH
8088: CALL_OW 12
8092: ARRAY
8093: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8094: LD_ADDR_OWVAR 41
8098: PUSH
8099: LD_INT 100
8101: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8102: LD_ADDR_VAR 0 3
8106: PUSH
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 1
8119: PLUS
8120: PPUSH
8121: CALL_OW 45
8125: PPUSH
8126: CALL_OW 2
8130: ST_TO_ADDR
// end ;
8131: GO 7744
8133: POP
8134: POP
// end ;
8135: LD_VAR 0 3
8139: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
// for i = 1 to n do
8144: LD_ADDR_VAR 0 4
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_VAR 0 1
8158: PUSH
8159: FOR_TO
8160: IFFALSE 8234
// begin uc_nation := rand ( 1 , 3 ) ;
8162: LD_ADDR_OWVAR 21
8166: PUSH
8167: LD_INT 1
8169: PPUSH
8170: LD_INT 3
8172: PPUSH
8173: CALL_OW 12
8177: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8178: LD_INT 0
8180: PPUSH
8181: LD_INT 8
8183: PUSH
8184: LD_INT 9
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 1
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: CALL_OW 12
8205: ARRAY
8206: PPUSH
8207: LD_VAR 0 2
8211: PPUSH
8212: CALL_OW 380
// result := result ^ CreateHuman ;
8216: LD_ADDR_VAR 0 3
8220: PUSH
8221: LD_VAR 0 3
8225: PUSH
8226: CALL_OW 44
8230: ADD
8231: ST_TO_ADDR
// end ;
8232: GO 8159
8234: POP
8235: POP
// end ;
8236: LD_VAR 0 3
8240: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
8247: PPUSH
8248: PPUSH
8249: PPUSH
// for i = 1 to n do
8250: LD_ADDR_VAR 0 4
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_VAR 0 1
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8662
// begin uc_nation := rand ( 1 , 3 ) ;
8268: LD_ADDR_OWVAR 21
8272: PUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_INT 3
8278: PPUSH
8279: CALL_OW 12
8283: ST_TO_ADDR
// case uc_nation of 1 :
8284: LD_OWVAR 21
8288: PUSH
8289: LD_INT 1
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8370
8297: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8313: LD_ADDR_VAR 0 7
8317: PUSH
8318: LD_INT 6
8320: PUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 10
8326: PUSH
8327: LD_EXP 17
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8338: LD_ADDR_VAR 0 8
8342: PUSH
8343: LD_INT 1
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8353: LD_ADDR_VAR 0 9
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: LD_INT 3
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// end ; 2 :
8368: GO 8527
8370: LD_INT 2
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8451
8378: POP
// begin chassis := [ ar_half_tracked ] ;
8379: LD_ADDR_VAR 0 6
8383: PUSH
8384: LD_INT 14
8386: PUSH
8387: EMPTY
8388: LIST
8389: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8390: LD_ADDR_VAR 0 7
8394: PUSH
8395: LD_EXP 18
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 28
8405: PUSH
8406: LD_INT 29
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8415: LD_ADDR_VAR 0 8
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8430: LD_ADDR_VAR 0 9
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: ST_TO_ADDR
// end ; 3 :
8449: GO 8527
8451: LD_INT 3
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8526
8459: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8460: LD_ADDR_VAR 0 6
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 24
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8475: LD_ADDR_VAR 0 7
8479: PUSH
8480: LD_INT 46
8482: PUSH
8483: LD_INT 45
8485: PUSH
8486: LD_INT 49
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8494: LD_ADDR_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: LD_INT 3
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8509: LD_ADDR_VAR 0 9
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: ST_TO_ADDR
// end ; end ;
8524: GO 8527
8526: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8527: LD_ADDR_OWVAR 37
8531: PUSH
8532: LD_VAR 0 6
8536: PUSH
8537: LD_INT 1
8539: PPUSH
8540: LD_VAR 0 6
8544: PPUSH
8545: CALL_OW 12
8549: ARRAY
8550: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8551: LD_ADDR_OWVAR 39
8555: PUSH
8556: LD_VAR 0 9
8560: PUSH
8561: LD_INT 1
8563: PPUSH
8564: LD_VAR 0 9
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8575: LD_ADDR_OWVAR 38
8579: PUSH
8580: LD_VAR 0 8
8584: PUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_VAR 0 8
8592: PPUSH
8593: CALL_OW 12
8597: ARRAY
8598: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8599: LD_ADDR_OWVAR 40
8603: PUSH
8604: LD_VAR 0 7
8608: PUSH
8609: LD_INT 1
8611: PPUSH
8612: LD_VAR 0 7
8616: PPUSH
8617: CALL_OW 12
8621: ARRAY
8622: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8623: LD_ADDR_OWVAR 41
8627: PUSH
8628: LD_INT 100
8630: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_VAR 0 3
8640: PPUSH
8641: LD_VAR 0 3
8645: PUSH
8646: LD_INT 1
8648: PLUS
8649: PPUSH
8650: CALL_OW 45
8654: PPUSH
8655: CALL_OW 2
8659: ST_TO_ADDR
// end ;
8660: GO 8265
8662: POP
8663: POP
// end ; end_of_file
8664: LD_VAR 0 3
8668: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8669: LD_INT 22
8671: PUSH
8672: LD_INT 7
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: IFFALSE 9189
8685: GO 8687
8687: DISABLE
8688: LD_INT 0
8690: PPUSH
8691: PPUSH
8692: PPUSH
// begin enable ;
8693: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8694: LD_ADDR_VAR 0 3
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 7
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 69
8713: ST_TO_ADDR
// for i in tmp do
8714: LD_ADDR_VAR 0 1
8718: PUSH
8719: LD_VAR 0 3
8723: PUSH
8724: FOR_IN
8725: IFFALSE 9187
// begin case GetType ( i ) of unit_human :
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 247
8736: PUSH
8737: LD_INT 1
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8944
8745: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 256
8755: PUSH
8756: LD_INT 250
8758: LESS
8759: PUSH
8760: LD_INT 5
8762: PPUSH
8763: LD_INT 7
8765: PPUSH
8766: CALL_OW 321
8770: PUSH
8771: LD_INT 2
8773: NONEQUAL
8774: AND
8775: IFFALSE 8779
// continue ;
8777: GO 8724
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 257
8788: PUSH
8789: LD_INT 12
8791: PUSH
8792: LD_INT 15
8794: PUSH
8795: LD_INT 16
8797: PUSH
8798: LD_INT 17
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 8
8815: PUSH
8816: LD_INT 9
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: IN
8831: IFFALSE 8869
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_INT 22
8840: PUSH
8841: LD_OWVAR 2
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: PPUSH
8855: LD_VAR 0 1
8859: PPUSH
8860: CALL_OW 74
8864: PPUSH
8865: CALL_OW 115
// if GetClass ( i ) = 3 then
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 257
8878: PUSH
8879: LD_INT 3
8881: EQUAL
8882: IFFALSE 8942
// if IsInUnit ( i ) then
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 310
8893: IFFALSE 8933
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8895: LD_VAR 0 1
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_OWVAR 2
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PPUSH
8917: LD_VAR 0 1
8921: PPUSH
8922: CALL_OW 74
8926: PPUSH
8927: CALL_OW 115
8931: GO 8942
// ComEspace ( i ) ;
8933: LD_VAR 0 1
8937: PPUSH
8938: CALL 1933 0 1
// end ; unit_vehicle :
8942: GO 9185
8944: LD_INT 2
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 9184
8952: POP
// begin if GetLives ( i ) > 250 then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 256
8962: PUSH
8963: LD_INT 250
8965: GREATER
8966: IFFALSE 9182
// begin if GetWeapon ( i ) = us_artillery then
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 264
8977: PUSH
8978: LD_EXP 17
8982: EQUAL
8983: IFFALSE 9051
// begin if IsInArea ( i , zoneOut ) then
8985: LD_VAR 0 1
8989: PPUSH
8990: LD_INT 4
8992: PPUSH
8993: CALL_OW 308
8997: IFFALSE 9013
// ComMoveToArea ( i , zoneBorder ) else
8999: LD_VAR 0 1
9003: PPUSH
9004: LD_INT 9
9006: PPUSH
9007: CALL_OW 113
9011: GO 9049
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_INT 22
9020: PUSH
9021: LD_OWVAR 2
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 1
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end else
9049: GO 9182
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 264
9060: PUSH
9061: LD_INT 11
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_EXP 14
9071: PUSH
9072: LD_INT 49
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: IN
9081: IFFALSE 9111
// begin if IsInArea ( i , zoneOut ) then
9083: LD_VAR 0 1
9087: PPUSH
9088: LD_INT 4
9090: PPUSH
9091: CALL_OW 308
9095: IFFALSE 9109
// ComSpecMove ( i , specPos ) ;
9097: LD_VAR 0 1
9101: PPUSH
9102: LD_INT 8
9104: PPUSH
9105: CALL 1979 0 2
// end else
9109: GO 9182
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 264
9120: PUSH
9121: LD_EXP 18
9125: PUSH
9126: LD_INT 29
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: IN
9133: IFFALSE 9146
// ComSpecAttack ( i ) else
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL 2407 0 1
9144: GO 9182
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9146: LD_VAR 0 1
9150: PPUSH
9151: LD_INT 22
9153: PUSH
9154: LD_OWVAR 2
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: PPUSH
9178: CALL_OW 115
// end ; end ; end ;
9182: GO 9185
9184: POP
// end ;
9185: GO 8724
9187: POP
9188: POP
// end ; end_of_file
9189: PPOPN 3
9191: END
// export function InitDisplay ; begin
9192: LD_INT 0
9194: PPUSH
// while true do
9195: LD_INT 1
9197: IFFALSE 9284
// begin if waveNumber < 100 then
9199: LD_EXP 5
9203: PUSH
9204: LD_INT 100
9206: LESS
9207: IFFALSE 9258
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9209: LD_ADDR_OWVAR 47
9213: PUSH
9214: LD_STRING #Tick
9216: PUSH
9217: LD_OWVAR 1
9221: PUSH
9222: LD_STRING #Points
9224: PUSH
9225: LD_EXP 2
9229: PUSH
9230: LD_STRING #Attack
9232: PUSH
9233: LD_EXP 4
9237: PUSH
9238: LD_STRING #Wave
9240: PUSH
9241: LD_EXP 5
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
9256: GO 9275
// Display_Strings := [ #Win , points ] ;
9258: LD_ADDR_OWVAR 47
9262: PUSH
9263: LD_STRING #Win
9265: PUSH
9266: LD_EXP 2
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9275: LD_INT 35
9277: PPUSH
9278: CALL_OW 67
// end ;
9282: GO 9195
// end ; end_of_file
9284: LD_VAR 0 1
9288: RET
// export function InitBonus ; var i , chance ; begin
9289: LD_INT 0
9291: PPUSH
9292: PPUSH
9293: PPUSH
// chance := rand ( 1 , 99 ) ;
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: LD_INT 1
9301: PPUSH
9302: LD_INT 99
9304: PPUSH
9305: CALL_OW 12
9309: ST_TO_ADDR
// case chance of 1 .. 10 :
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 1
9317: DOUBLE
9318: GREATEREQUAL
9319: IFFALSE 9327
9321: LD_INT 10
9323: DOUBLE
9324: LESSEQUAL
9325: IFTRUE 9329
9327: GO 9340
9329: POP
// i := 5 ; 11 .. 25 :
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_INT 5
9337: ST_TO_ADDR
9338: GO 9441
9340: LD_INT 11
9342: DOUBLE
9343: GREATEREQUAL
9344: IFFALSE 9352
9346: LD_INT 25
9348: DOUBLE
9349: LESSEQUAL
9350: IFTRUE 9354
9352: GO 9365
9354: POP
// i := 3 ; 26 .. 40 :
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: LD_INT 3
9362: ST_TO_ADDR
9363: GO 9441
9365: LD_INT 26
9367: DOUBLE
9368: GREATEREQUAL
9369: IFFALSE 9377
9371: LD_INT 40
9373: DOUBLE
9374: LESSEQUAL
9375: IFTRUE 9379
9377: GO 9390
9379: POP
// i := 2 ; 41 .. 60 :
9380: LD_ADDR_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ST_TO_ADDR
9388: GO 9441
9390: LD_INT 41
9392: DOUBLE
9393: GREATEREQUAL
9394: IFFALSE 9402
9396: LD_INT 60
9398: DOUBLE
9399: LESSEQUAL
9400: IFTRUE 9404
9402: GO 9415
9404: POP
// i := 4 ; 61 .. 99 :
9405: LD_ADDR_VAR 0 2
9409: PUSH
9410: LD_INT 4
9412: ST_TO_ADDR
9413: GO 9441
9415: LD_INT 61
9417: DOUBLE
9418: GREATEREQUAL
9419: IFFALSE 9427
9421: LD_INT 99
9423: DOUBLE
9424: LESSEQUAL
9425: IFTRUE 9429
9427: GO 9440
9429: POP
// i := 1 ; end ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
9438: GO 9441
9440: POP
// case i of 1 :
9441: LD_VAR 0 2
9445: PUSH
9446: LD_INT 1
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9543
9454: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9455: LD_INT 22
9457: PUSH
9458: LD_OWVAR 2
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 25
9472: PUSH
9473: LD_INT 12
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 25
9482: PUSH
9483: LD_INT 16
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 25
9492: PUSH
9493: LD_INT 15
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 25
9502: PUSH
9503: LD_INT 17
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 69
9525: PUSH
9526: LD_INT 10
9528: GREATEREQUAL
9529: IFFALSE 9537
// BonusIV else
9531: CALL 10116 0 0
9535: GO 9541
// BonusI ;
9537: CALL 9621 0 0
// end ; 2 :
9541: GO 9616
9543: LD_INT 2
9545: DOUBLE
9546: EQUAL
9547: IFTRUE 9551
9549: GO 9558
9551: POP
// begin BonusII ;
9552: CALL 9794 0 0
// end ; 3 :
9556: GO 9616
9558: LD_INT 3
9560: DOUBLE
9561: EQUAL
9562: IFTRUE 9566
9564: GO 9573
9566: POP
// begin BonusIII ;
9567: CALL 9942 0 0
// end ; 4 :
9571: GO 9616
9573: LD_INT 4
9575: DOUBLE
9576: EQUAL
9577: IFTRUE 9581
9579: GO 9588
9581: POP
// begin BonusIV ;
9582: CALL 10116 0 0
// end ; 5 :
9586: GO 9616
9588: LD_INT 5
9590: DOUBLE
9591: EQUAL
9592: IFTRUE 9596
9594: GO 9615
9596: POP
// begin if graveyard then
9597: LD_EXP 8
9601: IFFALSE 9609
// BonusV else
9603: CALL 10534 0 0
9607: GO 9613
// BonusIII ;
9609: CALL 9942 0 0
// end ; end ;
9613: GO 9616
9615: POP
// end ;
9616: LD_VAR 0 1
9620: RET
// export function BonusI ; var i ; begin
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
// case Query ( AddGift1 ) of 1 :
9625: LD_STRING AddGift1
9627: PPUSH
9628: CALL_OW 97
9632: PUSH
9633: LD_INT 1
9635: DOUBLE
9636: EQUAL
9637: IFTRUE 9641
9639: GO 9720
9641: POP
// begin for i = 1 to 3 do
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: DOUBLE
9648: LD_INT 1
9650: DEC
9651: ST_TO_ADDR
9652: LD_INT 3
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9716
// begin uc_side := your_side ;
9658: LD_ADDR_OWVAR 20
9662: PUSH
9663: LD_OWVAR 2
9667: ST_TO_ADDR
// uc_nation := 0 ;
9668: LD_ADDR_OWVAR 21
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9676: LD_INT 0
9678: PPUSH
9679: LD_INT 12
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9689: CALL_OW 44
9693: PPUSH
9694: LD_EXP 9
9698: PPUSH
9699: LD_EXP 10
9703: PPUSH
9704: LD_INT 15
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 50
// end ;
9714: GO 9655
9716: POP
9717: POP
// end ; 2 :
9718: GO 9789
9720: LD_INT 2
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9770
9728: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9729: LD_EXP 11
9733: PPUSH
9734: CALL_OW 274
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: LD_EXP 11
9746: PPUSH
9747: CALL_OW 274
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 275
9759: PUSH
9760: LD_INT 100
9762: PLUS
9763: PPUSH
9764: CALL_OW 277
// end ; 3 :
9768: GO 9789
9770: LD_INT 3
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 9788
9778: POP
// begin SetTeamExp ( 2 ) ;
9779: LD_INT 2
9781: PPUSH
9782: CALL 940 0 1
// end ; end ;
9786: GO 9789
9788: POP
// end ;
9789: LD_VAR 0 1
9793: RET
// export function BonusII ; var i ; begin
9794: LD_INT 0
9796: PPUSH
9797: PPUSH
// case Query ( AddGift2 ) of 1 :
9798: LD_STRING AddGift2
9800: PPUSH
9801: CALL_OW 97
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9856
9814: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9815: LD_EXP 11
9819: PPUSH
9820: CALL_OW 274
9824: PPUSH
9825: LD_INT 1
9827: PPUSH
9828: LD_EXP 11
9832: PPUSH
9833: CALL_OW 274
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 275
9845: PUSH
9846: LD_INT 500
9848: PLUS
9849: PPUSH
9850: CALL_OW 277
// end ; 2 :
9854: GO 9937
9856: LD_INT 2
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9874
9864: POP
// begin SetTeamExp ( 3 ) ;
9865: LD_INT 3
9867: PPUSH
9868: CALL 940 0 1
// end ; 3 :
9872: GO 9937
9874: LD_INT 3
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 9936
9882: POP
// begin uc_side = your_side ;
9883: LD_ADDR_OWVAR 20
9887: PUSH
9888: LD_OWVAR 2
9892: ST_TO_ADDR
// uc_nation = nation_russian ;
9893: LD_ADDR_OWVAR 21
9897: PUSH
9898: LD_INT 3
9900: ST_TO_ADDR
// vc_chassis = 25 ;
9901: LD_ADDR_OWVAR 37
9905: PUSH
9906: LD_INT 25
9908: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9909: CALL_OW 45
9913: PPUSH
9914: LD_EXP 9
9918: PPUSH
9919: LD_EXP 10
9923: PPUSH
9924: LD_INT 15
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 50
// end ; end ;
9934: GO 9937
9936: POP
// end ;
9937: LD_VAR 0 1
9941: RET
// export function BonusIII ; var i ; begin
9942: LD_INT 0
9944: PPUSH
9945: PPUSH
// case Query ( AddGift3 ) of 1 :
9946: LD_STRING AddGift3
9948: PPUSH
9949: CALL_OW 97
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 10004
9962: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9963: LD_EXP 11
9967: PPUSH
9968: CALL_OW 274
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_EXP 11
9980: PPUSH
9981: CALL_OW 274
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 275
9993: PUSH
9994: LD_INT 1000
9996: PLUS
9997: PPUSH
9998: CALL_OW 277
// end ; 2 :
10002: GO 10111
10004: LD_INT 2
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10024
10012: POP
// begin PrepareGuards ( waveNumber ) ;
10013: LD_EXP 5
10017: PPUSH
10018: CALL 1086 0 1
// end ; 3 :
10022: GO 10111
10024: LD_INT 3
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10110
10032: POP
// begin uc_side = your_side ;
10033: LD_ADDR_OWVAR 20
10037: PUSH
10038: LD_OWVAR 2
10042: ST_TO_ADDR
// uc_nation = nation_american ;
10043: LD_ADDR_OWVAR 21
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// vc_chassis = us_morphling ;
10051: LD_ADDR_OWVAR 37
10055: PUSH
10056: LD_INT 5
10058: ST_TO_ADDR
// vc_engine := engine_siberite ;
10059: LD_ADDR_OWVAR 39
10063: PUSH
10064: LD_INT 3
10066: ST_TO_ADDR
// vc_control := control_computer ;
10067: LD_ADDR_OWVAR 38
10071: PUSH
10072: LD_INT 3
10074: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10075: LD_ADDR_OWVAR 40
10079: PUSH
10080: LD_INT 8
10082: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10083: CALL_OW 45
10087: PPUSH
10088: LD_EXP 9
10092: PPUSH
10093: LD_EXP 10
10097: PPUSH
10098: LD_INT 15
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 50
// end ; end ;
10108: GO 10111
10110: POP
// end ;
10111: LD_VAR 0 1
10115: RET
// export function BonusIV ; var i ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
// case Query ( AddGift4 ) of 1 :
10120: LD_STRING AddGift4
10122: PPUSH
10123: CALL_OW 97
10127: PUSH
10128: LD_INT 1
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 10460
10136: POP
// begin i := rand ( 1 , 3 ) ;
10137: LD_ADDR_VAR 0 2
10141: PUSH
10142: LD_INT 1
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: CALL_OW 12
10152: ST_TO_ADDR
// uc_side := your_side ;
10153: LD_ADDR_OWVAR 20
10157: PUSH
10158: LD_OWVAR 2
10162: ST_TO_ADDR
// case i of 1 :
10163: LD_VAR 0 2
10167: PUSH
10168: LD_INT 1
10170: DOUBLE
10171: EQUAL
10172: IFTRUE 10176
10174: GO 10263
10176: POP
// begin uc_nation := nation_arabian ;
10177: LD_ADDR_OWVAR 21
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10185: LD_ADDR_OWVAR 37
10189: PUSH
10190: LD_INT 14
10192: ST_TO_ADDR
// vc_engine := engine_combustion ;
10193: LD_ADDR_OWVAR 39
10197: PUSH
10198: LD_INT 1
10200: ST_TO_ADDR
// vc_control := control_manual ;
10201: LD_ADDR_OWVAR 38
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10209: LD_ADDR_OWVAR 40
10213: PUSH
10214: LD_INT 27
10216: PUSH
10217: LD_INT 28
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 1
10226: PPUSH
10227: LD_INT 2
10229: PPUSH
10230: CALL_OW 12
10234: ARRAY
10235: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10236: CALL_OW 45
10240: PPUSH
10241: LD_EXP 9
10245: PPUSH
10246: LD_EXP 10
10250: PPUSH
10251: LD_INT 15
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 50
// end ; 2 :
10261: GO 10458
10263: LD_INT 2
10265: DOUBLE
10266: EQUAL
10267: IFTRUE 10271
10269: GO 10362
10271: POP
// begin uc_nation := nation_american ;
10272: LD_ADDR_OWVAR 21
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// vc_chassis := us_morphling ;
10280: LD_ADDR_OWVAR 37
10284: PUSH
10285: LD_INT 5
10287: ST_TO_ADDR
// vc_engine := engine_siberite ;
10288: LD_ADDR_OWVAR 39
10292: PUSH
10293: LD_INT 3
10295: ST_TO_ADDR
// vc_control := control_computer ;
10296: LD_ADDR_OWVAR 38
10300: PUSH
10301: LD_INT 3
10303: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10304: LD_ADDR_OWVAR 40
10308: PUSH
10309: LD_INT 12
10311: PUSH
10312: LD_INT 10
10314: PUSH
10315: LD_INT 7
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_INT 3
10328: PPUSH
10329: CALL_OW 12
10333: ARRAY
10334: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10335: CALL_OW 45
10339: PPUSH
10340: LD_EXP 9
10344: PPUSH
10345: LD_EXP 10
10349: PPUSH
10350: LD_INT 15
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 50
// end ; 3 :
10360: GO 10458
10362: LD_INT 3
10364: DOUBLE
10365: EQUAL
10366: IFTRUE 10370
10368: GO 10457
10370: POP
// begin uc_nation := nation_russian ;
10371: LD_ADDR_OWVAR 21
10375: PUSH
10376: LD_INT 3
10378: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10379: LD_ADDR_OWVAR 37
10383: PUSH
10384: LD_INT 22
10386: ST_TO_ADDR
// vc_engine := engine_combustion ;
10387: LD_ADDR_OWVAR 39
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// vc_control := control_manual ;
10395: LD_ADDR_OWVAR 38
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10403: LD_ADDR_OWVAR 40
10407: PUSH
10408: LD_INT 45
10410: PUSH
10411: LD_INT 44
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 1
10420: PPUSH
10421: LD_INT 2
10423: PPUSH
10424: CALL_OW 12
10428: ARRAY
10429: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10430: CALL_OW 45
10434: PPUSH
10435: LD_EXP 9
10439: PPUSH
10440: LD_EXP 10
10444: PPUSH
10445: LD_INT 15
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 50
// end ; end ;
10455: GO 10458
10457: POP
// end ; 2 :
10458: GO 10529
10460: LD_INT 2
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10510
10468: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10469: LD_EXP 11
10473: PPUSH
10474: CALL_OW 274
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: LD_EXP 11
10486: PPUSH
10487: CALL_OW 274
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 275
10499: PUSH
10500: LD_INT 100
10502: PLUS
10503: PPUSH
10504: CALL_OW 277
// end ; 3 :
10508: GO 10529
10510: LD_INT 3
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10528
10518: POP
// begin SetTeamExp ( 2 ) ;
10519: LD_INT 2
10521: PPUSH
10522: CALL 940 0 1
// end ; end ;
10526: GO 10529
10528: POP
// end ;
10529: LD_VAR 0 1
10533: RET
// export function BonusV ; var i , j ; begin
10534: LD_INT 0
10536: PPUSH
10537: PPUSH
10538: PPUSH
// case Query ( AddGift5 ) of 1 :
10539: LD_STRING AddGift5
10541: PPUSH
10542: CALL_OW 97
10546: PUSH
10547: LD_INT 1
10549: DOUBLE
10550: EQUAL
10551: IFTRUE 10555
10553: GO 10899
10555: POP
// begin for j = 1 to 3 do
10556: LD_ADDR_VAR 0 3
10560: PUSH
10561: DOUBLE
10562: LD_INT 1
10564: DEC
10565: ST_TO_ADDR
10566: LD_INT 3
10568: PUSH
10569: FOR_TO
10570: IFFALSE 10895
// begin i := rand ( 1 , 3 ) ;
10572: LD_ADDR_VAR 0 2
10576: PUSH
10577: LD_INT 1
10579: PPUSH
10580: LD_INT 3
10582: PPUSH
10583: CALL_OW 12
10587: ST_TO_ADDR
// uc_side := your_side ;
10588: LD_ADDR_OWVAR 20
10592: PUSH
10593: LD_OWVAR 2
10597: ST_TO_ADDR
// case i of 1 :
10598: LD_VAR 0 2
10602: PUSH
10603: LD_INT 1
10605: DOUBLE
10606: EQUAL
10607: IFTRUE 10611
10609: GO 10698
10611: POP
// begin uc_nation := nation_arabian ;
10612: LD_ADDR_OWVAR 21
10616: PUSH
10617: LD_INT 2
10619: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10620: LD_ADDR_OWVAR 37
10624: PUSH
10625: LD_INT 14
10627: ST_TO_ADDR
// vc_engine := engine_combustion ;
10628: LD_ADDR_OWVAR 39
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// vc_control := control_manual ;
10636: LD_ADDR_OWVAR 38
10640: PUSH
10641: LD_INT 1
10643: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10644: LD_ADDR_OWVAR 40
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: LD_INT 28
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 2
10664: PPUSH
10665: CALL_OW 12
10669: ARRAY
10670: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10671: CALL_OW 45
10675: PPUSH
10676: LD_EXP 9
10680: PPUSH
10681: LD_EXP 10
10685: PPUSH
10686: LD_INT 15
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 50
// end ; 2 :
10696: GO 10893
10698: LD_INT 2
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10797
10706: POP
// begin uc_nation := nation_american ;
10707: LD_ADDR_OWVAR 21
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
// vc_chassis := us_morphling ;
10715: LD_ADDR_OWVAR 37
10719: PUSH
10720: LD_INT 5
10722: ST_TO_ADDR
// vc_engine := engine_siberite ;
10723: LD_ADDR_OWVAR 39
10727: PUSH
10728: LD_INT 3
10730: ST_TO_ADDR
// vc_control := control_computer ;
10731: LD_ADDR_OWVAR 38
10735: PUSH
10736: LD_INT 3
10738: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10739: LD_ADDR_OWVAR 40
10743: PUSH
10744: LD_INT 12
10746: PUSH
10747: LD_INT 11
10749: PUSH
10750: LD_INT 7
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 1
10760: PPUSH
10761: LD_INT 3
10763: PPUSH
10764: CALL_OW 12
10768: ARRAY
10769: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10770: CALL_OW 45
10774: PPUSH
10775: LD_EXP 9
10779: PPUSH
10780: LD_EXP 10
10784: PPUSH
10785: LD_INT 15
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 50
// end ; 3 :
10795: GO 10893
10797: LD_INT 3
10799: DOUBLE
10800: EQUAL
10801: IFTRUE 10805
10803: GO 10892
10805: POP
// begin uc_nation := nation_russian ;
10806: LD_ADDR_OWVAR 21
10810: PUSH
10811: LD_INT 3
10813: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10814: LD_ADDR_OWVAR 37
10818: PUSH
10819: LD_INT 22
10821: ST_TO_ADDR
// vc_engine := engine_combustion ;
10822: LD_ADDR_OWVAR 39
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// vc_control := control_manual ;
10830: LD_ADDR_OWVAR 38
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10838: LD_ADDR_OWVAR 40
10842: PUSH
10843: LD_INT 45
10845: PUSH
10846: LD_INT 44
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 1
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: CALL_OW 12
10863: ARRAY
10864: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10865: CALL_OW 45
10869: PPUSH
10870: LD_EXP 9
10874: PPUSH
10875: LD_EXP 10
10879: PPUSH
10880: LD_INT 15
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 50
// end ; end ;
10890: GO 10893
10892: POP
// end ;
10893: GO 10569
10895: POP
10896: POP
// end ; 2 :
10897: GO 10965
10899: LD_INT 2
10901: DOUBLE
10902: EQUAL
10903: IFTRUE 10907
10905: GO 10949
10907: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10908: LD_EXP 11
10912: PPUSH
10913: CALL_OW 274
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: LD_EXP 11
10925: PPUSH
10926: CALL_OW 274
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 275
10938: PUSH
10939: LD_INT 500
10941: PLUS
10942: PPUSH
10943: CALL_OW 277
// end ; 3 :
10947: GO 10965
10949: LD_INT 3
10951: DOUBLE
10952: EQUAL
10953: IFTRUE 10957
10955: GO 10964
10957: POP
// begin GetBack ( ) ;
10958: CALL 1746 0 0
// end ; end ;
10962: GO 10965
10964: POP
// end ; end_of_file
10965: LD_VAR 0 1
10969: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10970: LD_INT 0
10972: PPUSH
// ar_miner := 81 ;
10973: LD_ADDR_EXP 21
10977: PUSH
10978: LD_INT 81
10980: ST_TO_ADDR
// ar_crane := 88 ;
10981: LD_ADDR_EXP 20
10985: PUSH
10986: LD_INT 88
10988: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10989: LD_ADDR_EXP 15
10993: PUSH
10994: LD_INT 89
10996: ST_TO_ADDR
// us_hack := 99 ;
10997: LD_ADDR_EXP 16
11001: PUSH
11002: LD_INT 99
11004: ST_TO_ADDR
// us_artillery := 97 ;
11005: LD_ADDR_EXP 17
11009: PUSH
11010: LD_INT 97
11012: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11013: LD_ADDR_EXP 18
11017: PUSH
11018: LD_INT 91
11020: ST_TO_ADDR
// ar_mortar := 92 ;
11021: LD_ADDR_EXP 19
11025: PUSH
11026: LD_INT 92
11028: ST_TO_ADDR
// ru_radar := 98 ;
11029: LD_ADDR_EXP 14
11033: PUSH
11034: LD_INT 98
11036: ST_TO_ADDR
// tech_Artillery := 80 ;
11037: LD_ADDR_EXP 22
11041: PUSH
11042: LD_INT 80
11044: ST_TO_ADDR
// tech_RadMat := 81 ;
11045: LD_ADDR_EXP 23
11049: PUSH
11050: LD_INT 81
11052: ST_TO_ADDR
// tech_BasicTools := 82 ;
11053: LD_ADDR_EXP 24
11057: PUSH
11058: LD_INT 82
11060: ST_TO_ADDR
// tech_Cargo := 83 ;
11061: LD_ADDR_EXP 25
11065: PUSH
11066: LD_INT 83
11068: ST_TO_ADDR
// tech_Track := 84 ;
11069: LD_ADDR_EXP 26
11073: PUSH
11074: LD_INT 84
11076: ST_TO_ADDR
// tech_Crane := 85 ;
11077: LD_ADDR_EXP 27
11081: PUSH
11082: LD_INT 85
11084: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11085: LD_ADDR_EXP 28
11089: PUSH
11090: LD_INT 86
11092: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11093: LD_ADDR_EXP 29
11097: PUSH
11098: LD_INT 87
11100: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11101: LD_ADDR_EXP 30
11105: PUSH
11106: LD_INT 88
11108: ST_TO_ADDR
// class_mastodont := 31 ;
11109: LD_ADDR_EXP 31
11113: PUSH
11114: LD_INT 31
11116: ST_TO_ADDR
// class_horse := 21 ;
11117: LD_ADDR_EXP 32
11121: PUSH
11122: LD_INT 21
11124: ST_TO_ADDR
// end ;
11125: LD_VAR 0 1
11129: RET
// every 1 do
11130: GO 11132
11132: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11133: CALL 10970 0 0
11137: END
// every 0 0$1 do
11138: GO 11140
11140: DISABLE
// begin enable ;
11141: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11142: LD_STRING updateTimer(
11144: PUSH
11145: LD_OWVAR 1
11149: STR
11150: PUSH
11151: LD_STRING );
11153: STR
11154: PPUSH
11155: CALL_OW 559
// end ;
11159: END
// on MapStart ( p ) do begin if streamModeActive then
11160: LD_EXP 33
11164: IFFALSE 11173
// DefineStreamItems ( true ) ;
11166: LD_INT 1
11168: PPUSH
11169: CALL 12821 0 1
// UpdateFactoryWaypoints ( ) ;
11173: CALL 26405 0 0
// end ;
11177: PPOPN 1
11179: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11180: LD_INT 0
11182: PPUSH
// if p2 = 100 then
11183: LD_VAR 0 2
11187: PUSH
11188: LD_INT 100
11190: EQUAL
11191: IFFALSE 12194
// begin if not StreamModeActive then
11193: LD_EXP 33
11197: NOT
11198: IFFALSE 11208
// StreamModeActive := true ;
11200: LD_ADDR_EXP 33
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// if p3 = 0 then
11208: LD_VAR 0 3
11212: PUSH
11213: LD_INT 0
11215: EQUAL
11216: IFFALSE 11222
// InitStreamMode ;
11218: CALL 12357 0 0
// if p3 = 1 then
11222: LD_VAR 0 3
11226: PUSH
11227: LD_INT 1
11229: EQUAL
11230: IFFALSE 11240
// sRocket := true ;
11232: LD_ADDR_EXP 38
11236: PUSH
11237: LD_INT 1
11239: ST_TO_ADDR
// if p3 = 2 then
11240: LD_VAR 0 3
11244: PUSH
11245: LD_INT 2
11247: EQUAL
11248: IFFALSE 11258
// sSpeed := true ;
11250: LD_ADDR_EXP 37
11254: PUSH
11255: LD_INT 1
11257: ST_TO_ADDR
// if p3 = 3 then
11258: LD_VAR 0 3
11262: PUSH
11263: LD_INT 3
11265: EQUAL
11266: IFFALSE 11276
// sEngine := true ;
11268: LD_ADDR_EXP 39
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// if p3 = 4 then
11276: LD_VAR 0 3
11280: PUSH
11281: LD_INT 4
11283: EQUAL
11284: IFFALSE 11294
// sSpec := true ;
11286: LD_ADDR_EXP 36
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// if p3 = 5 then
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 5
11301: EQUAL
11302: IFFALSE 11312
// sLevel := true ;
11304: LD_ADDR_EXP 40
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// if p3 = 6 then
11312: LD_VAR 0 3
11316: PUSH
11317: LD_INT 6
11319: EQUAL
11320: IFFALSE 11330
// sArmoury := true ;
11322: LD_ADDR_EXP 41
11326: PUSH
11327: LD_INT 1
11329: ST_TO_ADDR
// if p3 = 7 then
11330: LD_VAR 0 3
11334: PUSH
11335: LD_INT 7
11337: EQUAL
11338: IFFALSE 11348
// sRadar := true ;
11340: LD_ADDR_EXP 42
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// if p3 = 8 then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 8
11355: EQUAL
11356: IFFALSE 11366
// sBunker := true ;
11358: LD_ADDR_EXP 43
11362: PUSH
11363: LD_INT 1
11365: ST_TO_ADDR
// if p3 = 9 then
11366: LD_VAR 0 3
11370: PUSH
11371: LD_INT 9
11373: EQUAL
11374: IFFALSE 11384
// sHack := true ;
11376: LD_ADDR_EXP 44
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// if p3 = 10 then
11384: LD_VAR 0 3
11388: PUSH
11389: LD_INT 10
11391: EQUAL
11392: IFFALSE 11402
// sFire := true ;
11394: LD_ADDR_EXP 45
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// if p3 = 11 then
11402: LD_VAR 0 3
11406: PUSH
11407: LD_INT 11
11409: EQUAL
11410: IFFALSE 11420
// sRefresh := true ;
11412: LD_ADDR_EXP 46
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
// if p3 = 12 then
11420: LD_VAR 0 3
11424: PUSH
11425: LD_INT 12
11427: EQUAL
11428: IFFALSE 11438
// sExp := true ;
11430: LD_ADDR_EXP 47
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// if p3 = 13 then
11438: LD_VAR 0 3
11442: PUSH
11443: LD_INT 13
11445: EQUAL
11446: IFFALSE 11456
// sDepot := true ;
11448: LD_ADDR_EXP 48
11452: PUSH
11453: LD_INT 1
11455: ST_TO_ADDR
// if p3 = 14 then
11456: LD_VAR 0 3
11460: PUSH
11461: LD_INT 14
11463: EQUAL
11464: IFFALSE 11474
// sFlag := true ;
11466: LD_ADDR_EXP 49
11470: PUSH
11471: LD_INT 1
11473: ST_TO_ADDR
// if p3 = 15 then
11474: LD_VAR 0 3
11478: PUSH
11479: LD_INT 15
11481: EQUAL
11482: IFFALSE 11492
// sKamikadze := true ;
11484: LD_ADDR_EXP 57
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// if p3 = 16 then
11492: LD_VAR 0 3
11496: PUSH
11497: LD_INT 16
11499: EQUAL
11500: IFFALSE 11510
// sTroll := true ;
11502: LD_ADDR_EXP 58
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// if p3 = 17 then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_INT 17
11517: EQUAL
11518: IFFALSE 11528
// sSlow := true ;
11520: LD_ADDR_EXP 59
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if p3 = 18 then
11528: LD_VAR 0 3
11532: PUSH
11533: LD_INT 18
11535: EQUAL
11536: IFFALSE 11546
// sLack := true ;
11538: LD_ADDR_EXP 60
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// if p3 = 19 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 19
11553: EQUAL
11554: IFFALSE 11564
// sTank := true ;
11556: LD_ADDR_EXP 62
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// if p3 = 20 then
11564: LD_VAR 0 3
11568: PUSH
11569: LD_INT 20
11571: EQUAL
11572: IFFALSE 11582
// sRemote := true ;
11574: LD_ADDR_EXP 63
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// if p3 = 21 then
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 21
11589: EQUAL
11590: IFFALSE 11600
// sPowell := true ;
11592: LD_ADDR_EXP 64
11596: PUSH
11597: LD_INT 1
11599: ST_TO_ADDR
// if p3 = 22 then
11600: LD_VAR 0 3
11604: PUSH
11605: LD_INT 22
11607: EQUAL
11608: IFFALSE 11618
// sTeleport := true ;
11610: LD_ADDR_EXP 67
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// if p3 = 23 then
11618: LD_VAR 0 3
11622: PUSH
11623: LD_INT 23
11625: EQUAL
11626: IFFALSE 11636
// sOilTower := true ;
11628: LD_ADDR_EXP 69
11632: PUSH
11633: LD_INT 1
11635: ST_TO_ADDR
// if p3 = 24 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 24
11643: EQUAL
11644: IFFALSE 11654
// sShovel := true ;
11646: LD_ADDR_EXP 70
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// if p3 = 25 then
11654: LD_VAR 0 3
11658: PUSH
11659: LD_INT 25
11661: EQUAL
11662: IFFALSE 11672
// sSheik := true ;
11664: LD_ADDR_EXP 71
11668: PUSH
11669: LD_INT 1
11671: ST_TO_ADDR
// if p3 = 26 then
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 26
11679: EQUAL
11680: IFFALSE 11690
// sEarthquake := true ;
11682: LD_ADDR_EXP 73
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// if p3 = 27 then
11690: LD_VAR 0 3
11694: PUSH
11695: LD_INT 27
11697: EQUAL
11698: IFFALSE 11708
// sAI := true ;
11700: LD_ADDR_EXP 74
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// if p3 = 28 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 28
11715: EQUAL
11716: IFFALSE 11726
// sCargo := true ;
11718: LD_ADDR_EXP 77
11722: PUSH
11723: LD_INT 1
11725: ST_TO_ADDR
// if p3 = 29 then
11726: LD_VAR 0 3
11730: PUSH
11731: LD_INT 29
11733: EQUAL
11734: IFFALSE 11744
// sDLaser := true ;
11736: LD_ADDR_EXP 78
11740: PUSH
11741: LD_INT 1
11743: ST_TO_ADDR
// if p3 = 30 then
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 30
11751: EQUAL
11752: IFFALSE 11762
// sExchange := true ;
11754: LD_ADDR_EXP 79
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if p3 = 31 then
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 31
11769: EQUAL
11770: IFFALSE 11780
// sFac := true ;
11772: LD_ADDR_EXP 80
11776: PUSH
11777: LD_INT 1
11779: ST_TO_ADDR
// if p3 = 32 then
11780: LD_VAR 0 3
11784: PUSH
11785: LD_INT 32
11787: EQUAL
11788: IFFALSE 11798
// sPower := true ;
11790: LD_ADDR_EXP 81
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// if p3 = 33 then
11798: LD_VAR 0 3
11802: PUSH
11803: LD_INT 33
11805: EQUAL
11806: IFFALSE 11816
// sRandom := true ;
11808: LD_ADDR_EXP 82
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// if p3 = 34 then
11816: LD_VAR 0 3
11820: PUSH
11821: LD_INT 34
11823: EQUAL
11824: IFFALSE 11834
// sShield := true ;
11826: LD_ADDR_EXP 83
11830: PUSH
11831: LD_INT 1
11833: ST_TO_ADDR
// if p3 = 35 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_INT 35
11841: EQUAL
11842: IFFALSE 11852
// sTime := true ;
11844: LD_ADDR_EXP 84
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// if p3 = 36 then
11852: LD_VAR 0 3
11856: PUSH
11857: LD_INT 36
11859: EQUAL
11860: IFFALSE 11870
// sTools := true ;
11862: LD_ADDR_EXP 85
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if p3 = 101 then
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 101
11877: EQUAL
11878: IFFALSE 11888
// sSold := true ;
11880: LD_ADDR_EXP 50
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// if p3 = 102 then
11888: LD_VAR 0 3
11892: PUSH
11893: LD_INT 102
11895: EQUAL
11896: IFFALSE 11906
// sDiff := true ;
11898: LD_ADDR_EXP 51
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// if p3 = 103 then
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 103
11913: EQUAL
11914: IFFALSE 11924
// sFog := true ;
11916: LD_ADDR_EXP 54
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// if p3 = 104 then
11924: LD_VAR 0 3
11928: PUSH
11929: LD_INT 104
11931: EQUAL
11932: IFFALSE 11942
// sReset := true ;
11934: LD_ADDR_EXP 55
11938: PUSH
11939: LD_INT 1
11941: ST_TO_ADDR
// if p3 = 105 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 105
11949: EQUAL
11950: IFFALSE 11960
// sSun := true ;
11952: LD_ADDR_EXP 56
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if p3 = 106 then
11960: LD_VAR 0 3
11964: PUSH
11965: LD_INT 106
11967: EQUAL
11968: IFFALSE 11978
// sTiger := true ;
11970: LD_ADDR_EXP 52
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// if p3 = 107 then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_INT 107
11985: EQUAL
11986: IFFALSE 11996
// sBomb := true ;
11988: LD_ADDR_EXP 53
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// if p3 = 108 then
11996: LD_VAR 0 3
12000: PUSH
12001: LD_INT 108
12003: EQUAL
12004: IFFALSE 12014
// sWound := true ;
12006: LD_ADDR_EXP 61
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// if p3 = 109 then
12014: LD_VAR 0 3
12018: PUSH
12019: LD_INT 109
12021: EQUAL
12022: IFFALSE 12032
// sBetray := true ;
12024: LD_ADDR_EXP 65
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// if p3 = 110 then
12032: LD_VAR 0 3
12036: PUSH
12037: LD_INT 110
12039: EQUAL
12040: IFFALSE 12050
// sContamin := true ;
12042: LD_ADDR_EXP 66
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// if p3 = 111 then
12050: LD_VAR 0 3
12054: PUSH
12055: LD_INT 111
12057: EQUAL
12058: IFFALSE 12068
// sOil := true ;
12060: LD_ADDR_EXP 68
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// if p3 = 112 then
12068: LD_VAR 0 3
12072: PUSH
12073: LD_INT 112
12075: EQUAL
12076: IFFALSE 12086
// sStu := true ;
12078: LD_ADDR_EXP 72
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// if p3 = 113 then
12086: LD_VAR 0 3
12090: PUSH
12091: LD_INT 113
12093: EQUAL
12094: IFFALSE 12104
// sBazooka := true ;
12096: LD_ADDR_EXP 75
12100: PUSH
12101: LD_INT 1
12103: ST_TO_ADDR
// if p3 = 114 then
12104: LD_VAR 0 3
12108: PUSH
12109: LD_INT 114
12111: EQUAL
12112: IFFALSE 12122
// sMortar := true ;
12114: LD_ADDR_EXP 76
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// if p3 = 115 then
12122: LD_VAR 0 3
12126: PUSH
12127: LD_INT 115
12129: EQUAL
12130: IFFALSE 12140
// sRanger := true ;
12132: LD_ADDR_EXP 86
12136: PUSH
12137: LD_INT 1
12139: ST_TO_ADDR
// if p3 = 116 then
12140: LD_VAR 0 3
12144: PUSH
12145: LD_INT 116
12147: EQUAL
12148: IFFALSE 12158
// sComputer := true ;
12150: LD_ADDR_EXP 87
12154: PUSH
12155: LD_INT 1
12157: ST_TO_ADDR
// if p3 = 117 then
12158: LD_VAR 0 3
12162: PUSH
12163: LD_INT 117
12165: EQUAL
12166: IFFALSE 12176
// s30 := true ;
12168: LD_ADDR_EXP 88
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// if p3 = 118 then
12176: LD_VAR 0 3
12180: PUSH
12181: LD_INT 118
12183: EQUAL
12184: IFFALSE 12194
// s60 := true ;
12186: LD_ADDR_EXP 89
12190: PUSH
12191: LD_INT 1
12193: ST_TO_ADDR
// end ; if p2 = 101 then
12194: LD_VAR 0 2
12198: PUSH
12199: LD_INT 101
12201: EQUAL
12202: IFFALSE 12330
// begin case p3 of 1 :
12204: LD_VAR 0 3
12208: PUSH
12209: LD_INT 1
12211: DOUBLE
12212: EQUAL
12213: IFTRUE 12217
12215: GO 12224
12217: POP
// hHackUnlimitedResources ; 2 :
12218: CALL 24428 0 0
12222: GO 12330
12224: LD_INT 2
12226: DOUBLE
12227: EQUAL
12228: IFTRUE 12232
12230: GO 12239
12232: POP
// hHackSetLevel10 ; 3 :
12233: CALL 24561 0 0
12237: GO 12330
12239: LD_INT 3
12241: DOUBLE
12242: EQUAL
12243: IFTRUE 12247
12245: GO 12254
12247: POP
// hHackSetLevel10YourUnits ; 4 :
12248: CALL 24646 0 0
12252: GO 12330
12254: LD_INT 4
12256: DOUBLE
12257: EQUAL
12258: IFTRUE 12262
12260: GO 12269
12262: POP
// hHackInvincible ; 5 :
12263: CALL 25094 0 0
12267: GO 12330
12269: LD_INT 5
12271: DOUBLE
12272: EQUAL
12273: IFTRUE 12277
12275: GO 12284
12277: POP
// hHackInvisible ; 6 :
12278: CALL 25205 0 0
12282: GO 12330
12284: LD_INT 6
12286: DOUBLE
12287: EQUAL
12288: IFTRUE 12292
12290: GO 12299
12292: POP
// hHackChangeYourSide ; 7 :
12293: CALL 25262 0 0
12297: GO 12330
12299: LD_INT 7
12301: DOUBLE
12302: EQUAL
12303: IFTRUE 12307
12305: GO 12314
12307: POP
// hHackChangeUnitSide ; 8 :
12308: CALL 25304 0 0
12312: GO 12330
12314: LD_INT 8
12316: DOUBLE
12317: EQUAL
12318: IFTRUE 12322
12320: GO 12329
12322: POP
// hHackFog ; end ;
12323: CALL 25405 0 0
12327: GO 12330
12329: POP
// end ; end ;
12330: LD_VAR 0 7
12334: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12335: GO 12337
12337: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12338: LD_STRING initStreamRollete();
12340: PPUSH
12341: CALL_OW 559
// InitStreamMode ;
12345: CALL 12357 0 0
// DefineStreamItems ( false ) ;
12349: LD_INT 0
12351: PPUSH
12352: CALL 12821 0 1
// end ;
12356: END
// function InitStreamMode ; begin
12357: LD_INT 0
12359: PPUSH
// streamModeActive := false ;
12360: LD_ADDR_EXP 33
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// normalCounter := 36 ;
12368: LD_ADDR_EXP 34
12372: PUSH
12373: LD_INT 36
12375: ST_TO_ADDR
// hardcoreCounter := 18 ;
12376: LD_ADDR_EXP 35
12380: PUSH
12381: LD_INT 18
12383: ST_TO_ADDR
// sRocket := false ;
12384: LD_ADDR_EXP 38
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// sSpeed := false ;
12392: LD_ADDR_EXP 37
12396: PUSH
12397: LD_INT 0
12399: ST_TO_ADDR
// sEngine := false ;
12400: LD_ADDR_EXP 39
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// sSpec := false ;
12408: LD_ADDR_EXP 36
12412: PUSH
12413: LD_INT 0
12415: ST_TO_ADDR
// sLevel := false ;
12416: LD_ADDR_EXP 40
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// sArmoury := false ;
12424: LD_ADDR_EXP 41
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// sRadar := false ;
12432: LD_ADDR_EXP 42
12436: PUSH
12437: LD_INT 0
12439: ST_TO_ADDR
// sBunker := false ;
12440: LD_ADDR_EXP 43
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// sHack := false ;
12448: LD_ADDR_EXP 44
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// sFire := false ;
12456: LD_ADDR_EXP 45
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// sRefresh := false ;
12464: LD_ADDR_EXP 46
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// sExp := false ;
12472: LD_ADDR_EXP 47
12476: PUSH
12477: LD_INT 0
12479: ST_TO_ADDR
// sDepot := false ;
12480: LD_ADDR_EXP 48
12484: PUSH
12485: LD_INT 0
12487: ST_TO_ADDR
// sFlag := false ;
12488: LD_ADDR_EXP 49
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// sKamikadze := false ;
12496: LD_ADDR_EXP 57
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// sTroll := false ;
12504: LD_ADDR_EXP 58
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// sSlow := false ;
12512: LD_ADDR_EXP 59
12516: PUSH
12517: LD_INT 0
12519: ST_TO_ADDR
// sLack := false ;
12520: LD_ADDR_EXP 60
12524: PUSH
12525: LD_INT 0
12527: ST_TO_ADDR
// sTank := false ;
12528: LD_ADDR_EXP 62
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// sRemote := false ;
12536: LD_ADDR_EXP 63
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// sPowell := false ;
12544: LD_ADDR_EXP 64
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// sTeleport := false ;
12552: LD_ADDR_EXP 67
12556: PUSH
12557: LD_INT 0
12559: ST_TO_ADDR
// sOilTower := false ;
12560: LD_ADDR_EXP 69
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// sShovel := false ;
12568: LD_ADDR_EXP 70
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// sSheik := false ;
12576: LD_ADDR_EXP 71
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// sEarthquake := false ;
12584: LD_ADDR_EXP 73
12588: PUSH
12589: LD_INT 0
12591: ST_TO_ADDR
// sAI := false ;
12592: LD_ADDR_EXP 74
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// sCargo := false ;
12600: LD_ADDR_EXP 77
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// sDLaser := false ;
12608: LD_ADDR_EXP 78
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// sExchange := false ;
12616: LD_ADDR_EXP 79
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// sFac := false ;
12624: LD_ADDR_EXP 80
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// sPower := false ;
12632: LD_ADDR_EXP 81
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// sRandom := false ;
12640: LD_ADDR_EXP 82
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// sShield := false ;
12648: LD_ADDR_EXP 83
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// sTime := false ;
12656: LD_ADDR_EXP 84
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// sTools := false ;
12664: LD_ADDR_EXP 85
12668: PUSH
12669: LD_INT 0
12671: ST_TO_ADDR
// sSold := false ;
12672: LD_ADDR_EXP 50
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// sDiff := false ;
12680: LD_ADDR_EXP 51
12684: PUSH
12685: LD_INT 0
12687: ST_TO_ADDR
// sFog := false ;
12688: LD_ADDR_EXP 54
12692: PUSH
12693: LD_INT 0
12695: ST_TO_ADDR
// sReset := false ;
12696: LD_ADDR_EXP 55
12700: PUSH
12701: LD_INT 0
12703: ST_TO_ADDR
// sSun := false ;
12704: LD_ADDR_EXP 56
12708: PUSH
12709: LD_INT 0
12711: ST_TO_ADDR
// sTiger := false ;
12712: LD_ADDR_EXP 52
12716: PUSH
12717: LD_INT 0
12719: ST_TO_ADDR
// sBomb := false ;
12720: LD_ADDR_EXP 53
12724: PUSH
12725: LD_INT 0
12727: ST_TO_ADDR
// sWound := false ;
12728: LD_ADDR_EXP 61
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// sBetray := false ;
12736: LD_ADDR_EXP 65
12740: PUSH
12741: LD_INT 0
12743: ST_TO_ADDR
// sContamin := false ;
12744: LD_ADDR_EXP 66
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// sOil := false ;
12752: LD_ADDR_EXP 68
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// sStu := false ;
12760: LD_ADDR_EXP 72
12764: PUSH
12765: LD_INT 0
12767: ST_TO_ADDR
// sBazooka := false ;
12768: LD_ADDR_EXP 75
12772: PUSH
12773: LD_INT 0
12775: ST_TO_ADDR
// sMortar := false ;
12776: LD_ADDR_EXP 76
12780: PUSH
12781: LD_INT 0
12783: ST_TO_ADDR
// sRanger := false ;
12784: LD_ADDR_EXP 86
12788: PUSH
12789: LD_INT 0
12791: ST_TO_ADDR
// sComputer := false ;
12792: LD_ADDR_EXP 87
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// s30 := false ;
12800: LD_ADDR_EXP 88
12804: PUSH
12805: LD_INT 0
12807: ST_TO_ADDR
// s60 := false ;
12808: LD_ADDR_EXP 89
12812: PUSH
12813: LD_INT 0
12815: ST_TO_ADDR
// end ;
12816: LD_VAR 0 1
12820: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12821: LD_INT 0
12823: PPUSH
12824: PPUSH
12825: PPUSH
12826: PPUSH
12827: PPUSH
12828: PPUSH
12829: PPUSH
// result := [ ] ;
12830: LD_ADDR_VAR 0 2
12834: PUSH
12835: EMPTY
12836: ST_TO_ADDR
// if campaign_id = 1 then
12837: LD_OWVAR 69
12841: PUSH
12842: LD_INT 1
12844: EQUAL
12845: IFFALSE 16011
// begin case mission_number of 1 :
12847: LD_OWVAR 70
12851: PUSH
12852: LD_INT 1
12854: DOUBLE
12855: EQUAL
12856: IFTRUE 12860
12858: GO 12936
12860: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12861: LD_ADDR_VAR 0 2
12865: PUSH
12866: LD_INT 2
12868: PUSH
12869: LD_INT 4
12871: PUSH
12872: LD_INT 11
12874: PUSH
12875: LD_INT 12
12877: PUSH
12878: LD_INT 15
12880: PUSH
12881: LD_INT 16
12883: PUSH
12884: LD_INT 22
12886: PUSH
12887: LD_INT 23
12889: PUSH
12890: LD_INT 26
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 101
12906: PUSH
12907: LD_INT 102
12909: PUSH
12910: LD_INT 106
12912: PUSH
12913: LD_INT 116
12915: PUSH
12916: LD_INT 117
12918: PUSH
12919: LD_INT 118
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: ST_TO_ADDR
12934: GO 16009
12936: LD_INT 2
12938: DOUBLE
12939: EQUAL
12940: IFTRUE 12944
12942: GO 13028
12944: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12945: LD_ADDR_VAR 0 2
12949: PUSH
12950: LD_INT 2
12952: PUSH
12953: LD_INT 4
12955: PUSH
12956: LD_INT 11
12958: PUSH
12959: LD_INT 12
12961: PUSH
12962: LD_INT 15
12964: PUSH
12965: LD_INT 16
12967: PUSH
12968: LD_INT 22
12970: PUSH
12971: LD_INT 23
12973: PUSH
12974: LD_INT 26
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 101
12990: PUSH
12991: LD_INT 102
12993: PUSH
12994: LD_INT 105
12996: PUSH
12997: LD_INT 106
12999: PUSH
13000: LD_INT 108
13002: PUSH
13003: LD_INT 116
13005: PUSH
13006: LD_INT 117
13008: PUSH
13009: LD_INT 118
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: ST_TO_ADDR
13026: GO 16009
13028: LD_INT 3
13030: DOUBLE
13031: EQUAL
13032: IFTRUE 13036
13034: GO 13124
13036: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13037: LD_ADDR_VAR 0 2
13041: PUSH
13042: LD_INT 2
13044: PUSH
13045: LD_INT 4
13047: PUSH
13048: LD_INT 5
13050: PUSH
13051: LD_INT 11
13053: PUSH
13054: LD_INT 12
13056: PUSH
13057: LD_INT 15
13059: PUSH
13060: LD_INT 16
13062: PUSH
13063: LD_INT 22
13065: PUSH
13066: LD_INT 26
13068: PUSH
13069: LD_INT 36
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_INT 101
13086: PUSH
13087: LD_INT 102
13089: PUSH
13090: LD_INT 105
13092: PUSH
13093: LD_INT 106
13095: PUSH
13096: LD_INT 108
13098: PUSH
13099: LD_INT 116
13101: PUSH
13102: LD_INT 117
13104: PUSH
13105: LD_INT 118
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: ST_TO_ADDR
13122: GO 16009
13124: LD_INT 4
13126: DOUBLE
13127: EQUAL
13128: IFTRUE 13132
13130: GO 13228
13132: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13133: LD_ADDR_VAR 0 2
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: LD_INT 4
13143: PUSH
13144: LD_INT 5
13146: PUSH
13147: LD_INT 8
13149: PUSH
13150: LD_INT 11
13152: PUSH
13153: LD_INT 12
13155: PUSH
13156: LD_INT 15
13158: PUSH
13159: LD_INT 16
13161: PUSH
13162: LD_INT 22
13164: PUSH
13165: LD_INT 23
13167: PUSH
13168: LD_INT 26
13170: PUSH
13171: LD_INT 36
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 101
13190: PUSH
13191: LD_INT 102
13193: PUSH
13194: LD_INT 105
13196: PUSH
13197: LD_INT 106
13199: PUSH
13200: LD_INT 108
13202: PUSH
13203: LD_INT 116
13205: PUSH
13206: LD_INT 117
13208: PUSH
13209: LD_INT 118
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: ST_TO_ADDR
13226: GO 16009
13228: LD_INT 5
13230: DOUBLE
13231: EQUAL
13232: IFTRUE 13236
13234: GO 13348
13236: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13237: LD_ADDR_VAR 0 2
13241: PUSH
13242: LD_INT 2
13244: PUSH
13245: LD_INT 4
13247: PUSH
13248: LD_INT 5
13250: PUSH
13251: LD_INT 6
13253: PUSH
13254: LD_INT 8
13256: PUSH
13257: LD_INT 11
13259: PUSH
13260: LD_INT 12
13262: PUSH
13263: LD_INT 15
13265: PUSH
13266: LD_INT 16
13268: PUSH
13269: LD_INT 22
13271: PUSH
13272: LD_INT 23
13274: PUSH
13275: LD_INT 25
13277: PUSH
13278: LD_INT 26
13280: PUSH
13281: LD_INT 36
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 101
13302: PUSH
13303: LD_INT 102
13305: PUSH
13306: LD_INT 105
13308: PUSH
13309: LD_INT 106
13311: PUSH
13312: LD_INT 108
13314: PUSH
13315: LD_INT 109
13317: PUSH
13318: LD_INT 112
13320: PUSH
13321: LD_INT 116
13323: PUSH
13324: LD_INT 117
13326: PUSH
13327: LD_INT 118
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: ST_TO_ADDR
13346: GO 16009
13348: LD_INT 6
13350: DOUBLE
13351: EQUAL
13352: IFTRUE 13356
13354: GO 13488
13356: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13357: LD_ADDR_VAR 0 2
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: LD_INT 4
13367: PUSH
13368: LD_INT 5
13370: PUSH
13371: LD_INT 6
13373: PUSH
13374: LD_INT 8
13376: PUSH
13377: LD_INT 11
13379: PUSH
13380: LD_INT 12
13382: PUSH
13383: LD_INT 15
13385: PUSH
13386: LD_INT 16
13388: PUSH
13389: LD_INT 20
13391: PUSH
13392: LD_INT 21
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_INT 23
13400: PUSH
13401: LD_INT 25
13403: PUSH
13404: LD_INT 26
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 31
13412: PUSH
13413: LD_INT 32
13415: PUSH
13416: LD_INT 36
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 101
13442: PUSH
13443: LD_INT 102
13445: PUSH
13446: LD_INT 105
13448: PUSH
13449: LD_INT 106
13451: PUSH
13452: LD_INT 108
13454: PUSH
13455: LD_INT 109
13457: PUSH
13458: LD_INT 112
13460: PUSH
13461: LD_INT 116
13463: PUSH
13464: LD_INT 117
13466: PUSH
13467: LD_INT 118
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: ST_TO_ADDR
13486: GO 16009
13488: LD_INT 7
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13608
13496: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13497: LD_ADDR_VAR 0 2
13501: PUSH
13502: LD_INT 2
13504: PUSH
13505: LD_INT 4
13507: PUSH
13508: LD_INT 5
13510: PUSH
13511: LD_INT 7
13513: PUSH
13514: LD_INT 11
13516: PUSH
13517: LD_INT 12
13519: PUSH
13520: LD_INT 15
13522: PUSH
13523: LD_INT 16
13525: PUSH
13526: LD_INT 20
13528: PUSH
13529: LD_INT 21
13531: PUSH
13532: LD_INT 22
13534: PUSH
13535: LD_INT 23
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 26
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 101
13562: PUSH
13563: LD_INT 102
13565: PUSH
13566: LD_INT 103
13568: PUSH
13569: LD_INT 105
13571: PUSH
13572: LD_INT 106
13574: PUSH
13575: LD_INT 108
13577: PUSH
13578: LD_INT 112
13580: PUSH
13581: LD_INT 116
13583: PUSH
13584: LD_INT 117
13586: PUSH
13587: LD_INT 118
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: ST_TO_ADDR
13606: GO 16009
13608: LD_INT 8
13610: DOUBLE
13611: EQUAL
13612: IFTRUE 13616
13614: GO 13756
13616: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13617: LD_ADDR_VAR 0 2
13621: PUSH
13622: LD_INT 2
13624: PUSH
13625: LD_INT 4
13627: PUSH
13628: LD_INT 5
13630: PUSH
13631: LD_INT 6
13633: PUSH
13634: LD_INT 7
13636: PUSH
13637: LD_INT 8
13639: PUSH
13640: LD_INT 11
13642: PUSH
13643: LD_INT 12
13645: PUSH
13646: LD_INT 15
13648: PUSH
13649: LD_INT 16
13651: PUSH
13652: LD_INT 20
13654: PUSH
13655: LD_INT 21
13657: PUSH
13658: LD_INT 22
13660: PUSH
13661: LD_INT 23
13663: PUSH
13664: LD_INT 25
13666: PUSH
13667: LD_INT 26
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 31
13675: PUSH
13676: LD_INT 32
13678: PUSH
13679: LD_INT 36
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 101
13706: PUSH
13707: LD_INT 102
13709: PUSH
13710: LD_INT 103
13712: PUSH
13713: LD_INT 105
13715: PUSH
13716: LD_INT 106
13718: PUSH
13719: LD_INT 108
13721: PUSH
13722: LD_INT 109
13724: PUSH
13725: LD_INT 112
13727: PUSH
13728: LD_INT 116
13730: PUSH
13731: LD_INT 117
13733: PUSH
13734: LD_INT 118
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: ST_TO_ADDR
13754: GO 16009
13756: LD_INT 9
13758: DOUBLE
13759: EQUAL
13760: IFTRUE 13764
13762: GO 13912
13764: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13765: LD_ADDR_VAR 0 2
13769: PUSH
13770: LD_INT 2
13772: PUSH
13773: LD_INT 4
13775: PUSH
13776: LD_INT 5
13778: PUSH
13779: LD_INT 6
13781: PUSH
13782: LD_INT 7
13784: PUSH
13785: LD_INT 8
13787: PUSH
13788: LD_INT 11
13790: PUSH
13791: LD_INT 12
13793: PUSH
13794: LD_INT 15
13796: PUSH
13797: LD_INT 16
13799: PUSH
13800: LD_INT 20
13802: PUSH
13803: LD_INT 21
13805: PUSH
13806: LD_INT 22
13808: PUSH
13809: LD_INT 23
13811: PUSH
13812: LD_INT 25
13814: PUSH
13815: LD_INT 26
13817: PUSH
13818: LD_INT 28
13820: PUSH
13821: LD_INT 30
13823: PUSH
13824: LD_INT 31
13826: PUSH
13827: LD_INT 32
13829: PUSH
13830: LD_INT 36
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 101
13858: PUSH
13859: LD_INT 102
13861: PUSH
13862: LD_INT 103
13864: PUSH
13865: LD_INT 105
13867: PUSH
13868: LD_INT 106
13870: PUSH
13871: LD_INT 108
13873: PUSH
13874: LD_INT 109
13876: PUSH
13877: LD_INT 112
13879: PUSH
13880: LD_INT 114
13882: PUSH
13883: LD_INT 116
13885: PUSH
13886: LD_INT 117
13888: PUSH
13889: LD_INT 118
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: ST_TO_ADDR
13910: GO 16009
13912: LD_INT 10
13914: DOUBLE
13915: EQUAL
13916: IFTRUE 13920
13918: GO 14116
13920: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13921: LD_ADDR_VAR 0 2
13925: PUSH
13926: LD_INT 2
13928: PUSH
13929: LD_INT 4
13931: PUSH
13932: LD_INT 5
13934: PUSH
13935: LD_INT 6
13937: PUSH
13938: LD_INT 7
13940: PUSH
13941: LD_INT 8
13943: PUSH
13944: LD_INT 9
13946: PUSH
13947: LD_INT 10
13949: PUSH
13950: LD_INT 11
13952: PUSH
13953: LD_INT 12
13955: PUSH
13956: LD_INT 13
13958: PUSH
13959: LD_INT 14
13961: PUSH
13962: LD_INT 15
13964: PUSH
13965: LD_INT 16
13967: PUSH
13968: LD_INT 17
13970: PUSH
13971: LD_INT 18
13973: PUSH
13974: LD_INT 19
13976: PUSH
13977: LD_INT 20
13979: PUSH
13980: LD_INT 21
13982: PUSH
13983: LD_INT 22
13985: PUSH
13986: LD_INT 23
13988: PUSH
13989: LD_INT 24
13991: PUSH
13992: LD_INT 25
13994: PUSH
13995: LD_INT 26
13997: PUSH
13998: LD_INT 28
14000: PUSH
14001: LD_INT 30
14003: PUSH
14004: LD_INT 31
14006: PUSH
14007: LD_INT 32
14009: PUSH
14010: LD_INT 36
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 101
14046: PUSH
14047: LD_INT 102
14049: PUSH
14050: LD_INT 103
14052: PUSH
14053: LD_INT 104
14055: PUSH
14056: LD_INT 105
14058: PUSH
14059: LD_INT 106
14061: PUSH
14062: LD_INT 107
14064: PUSH
14065: LD_INT 108
14067: PUSH
14068: LD_INT 109
14070: PUSH
14071: LD_INT 110
14073: PUSH
14074: LD_INT 111
14076: PUSH
14077: LD_INT 112
14079: PUSH
14080: LD_INT 114
14082: PUSH
14083: LD_INT 116
14085: PUSH
14086: LD_INT 117
14088: PUSH
14089: LD_INT 118
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: ST_TO_ADDR
14114: GO 16009
14116: LD_INT 11
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14328
14124: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14125: LD_ADDR_VAR 0 2
14129: PUSH
14130: LD_INT 2
14132: PUSH
14133: LD_INT 3
14135: PUSH
14136: LD_INT 4
14138: PUSH
14139: LD_INT 5
14141: PUSH
14142: LD_INT 6
14144: PUSH
14145: LD_INT 7
14147: PUSH
14148: LD_INT 8
14150: PUSH
14151: LD_INT 9
14153: PUSH
14154: LD_INT 10
14156: PUSH
14157: LD_INT 11
14159: PUSH
14160: LD_INT 12
14162: PUSH
14163: LD_INT 13
14165: PUSH
14166: LD_INT 14
14168: PUSH
14169: LD_INT 15
14171: PUSH
14172: LD_INT 16
14174: PUSH
14175: LD_INT 17
14177: PUSH
14178: LD_INT 18
14180: PUSH
14181: LD_INT 19
14183: PUSH
14184: LD_INT 20
14186: PUSH
14187: LD_INT 21
14189: PUSH
14190: LD_INT 22
14192: PUSH
14193: LD_INT 23
14195: PUSH
14196: LD_INT 24
14198: PUSH
14199: LD_INT 25
14201: PUSH
14202: LD_INT 26
14204: PUSH
14205: LD_INT 28
14207: PUSH
14208: LD_INT 30
14210: PUSH
14211: LD_INT 31
14213: PUSH
14214: LD_INT 32
14216: PUSH
14217: LD_INT 34
14219: PUSH
14220: LD_INT 36
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 101
14258: PUSH
14259: LD_INT 102
14261: PUSH
14262: LD_INT 103
14264: PUSH
14265: LD_INT 104
14267: PUSH
14268: LD_INT 105
14270: PUSH
14271: LD_INT 106
14273: PUSH
14274: LD_INT 107
14276: PUSH
14277: LD_INT 108
14279: PUSH
14280: LD_INT 109
14282: PUSH
14283: LD_INT 110
14285: PUSH
14286: LD_INT 111
14288: PUSH
14289: LD_INT 112
14291: PUSH
14292: LD_INT 114
14294: PUSH
14295: LD_INT 116
14297: PUSH
14298: LD_INT 117
14300: PUSH
14301: LD_INT 118
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: ST_TO_ADDR
14326: GO 16009
14328: LD_INT 12
14330: DOUBLE
14331: EQUAL
14332: IFTRUE 14336
14334: GO 14556
14336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14337: LD_ADDR_VAR 0 2
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: LD_INT 2
14347: PUSH
14348: LD_INT 3
14350: PUSH
14351: LD_INT 4
14353: PUSH
14354: LD_INT 5
14356: PUSH
14357: LD_INT 6
14359: PUSH
14360: LD_INT 7
14362: PUSH
14363: LD_INT 8
14365: PUSH
14366: LD_INT 9
14368: PUSH
14369: LD_INT 10
14371: PUSH
14372: LD_INT 11
14374: PUSH
14375: LD_INT 12
14377: PUSH
14378: LD_INT 13
14380: PUSH
14381: LD_INT 14
14383: PUSH
14384: LD_INT 15
14386: PUSH
14387: LD_INT 16
14389: PUSH
14390: LD_INT 17
14392: PUSH
14393: LD_INT 18
14395: PUSH
14396: LD_INT 19
14398: PUSH
14399: LD_INT 20
14401: PUSH
14402: LD_INT 21
14404: PUSH
14405: LD_INT 22
14407: PUSH
14408: LD_INT 23
14410: PUSH
14411: LD_INT 24
14413: PUSH
14414: LD_INT 25
14416: PUSH
14417: LD_INT 26
14419: PUSH
14420: LD_INT 27
14422: PUSH
14423: LD_INT 28
14425: PUSH
14426: LD_INT 30
14428: PUSH
14429: LD_INT 31
14431: PUSH
14432: LD_INT 32
14434: PUSH
14435: LD_INT 33
14437: PUSH
14438: LD_INT 34
14440: PUSH
14441: LD_INT 36
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: PUSH
14480: LD_INT 101
14482: PUSH
14483: LD_INT 102
14485: PUSH
14486: LD_INT 103
14488: PUSH
14489: LD_INT 104
14491: PUSH
14492: LD_INT 105
14494: PUSH
14495: LD_INT 106
14497: PUSH
14498: LD_INT 107
14500: PUSH
14501: LD_INT 108
14503: PUSH
14504: LD_INT 109
14506: PUSH
14507: LD_INT 110
14509: PUSH
14510: LD_INT 111
14512: PUSH
14513: LD_INT 112
14515: PUSH
14516: LD_INT 113
14518: PUSH
14519: LD_INT 114
14521: PUSH
14522: LD_INT 116
14524: PUSH
14525: LD_INT 117
14527: PUSH
14528: LD_INT 118
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: ST_TO_ADDR
14554: GO 16009
14556: LD_INT 13
14558: DOUBLE
14559: EQUAL
14560: IFTRUE 14564
14562: GO 14772
14564: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14565: LD_ADDR_VAR 0 2
14569: PUSH
14570: LD_INT 1
14572: PUSH
14573: LD_INT 2
14575: PUSH
14576: LD_INT 3
14578: PUSH
14579: LD_INT 4
14581: PUSH
14582: LD_INT 5
14584: PUSH
14585: LD_INT 8
14587: PUSH
14588: LD_INT 9
14590: PUSH
14591: LD_INT 10
14593: PUSH
14594: LD_INT 11
14596: PUSH
14597: LD_INT 12
14599: PUSH
14600: LD_INT 14
14602: PUSH
14603: LD_INT 15
14605: PUSH
14606: LD_INT 16
14608: PUSH
14609: LD_INT 17
14611: PUSH
14612: LD_INT 18
14614: PUSH
14615: LD_INT 19
14617: PUSH
14618: LD_INT 20
14620: PUSH
14621: LD_INT 21
14623: PUSH
14624: LD_INT 22
14626: PUSH
14627: LD_INT 23
14629: PUSH
14630: LD_INT 24
14632: PUSH
14633: LD_INT 25
14635: PUSH
14636: LD_INT 26
14638: PUSH
14639: LD_INT 27
14641: PUSH
14642: LD_INT 28
14644: PUSH
14645: LD_INT 30
14647: PUSH
14648: LD_INT 31
14650: PUSH
14651: LD_INT 32
14653: PUSH
14654: LD_INT 33
14656: PUSH
14657: LD_INT 34
14659: PUSH
14660: LD_INT 36
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 101
14698: PUSH
14699: LD_INT 102
14701: PUSH
14702: LD_INT 103
14704: PUSH
14705: LD_INT 104
14707: PUSH
14708: LD_INT 105
14710: PUSH
14711: LD_INT 106
14713: PUSH
14714: LD_INT 107
14716: PUSH
14717: LD_INT 108
14719: PUSH
14720: LD_INT 109
14722: PUSH
14723: LD_INT 110
14725: PUSH
14726: LD_INT 111
14728: PUSH
14729: LD_INT 112
14731: PUSH
14732: LD_INT 113
14734: PUSH
14735: LD_INT 114
14737: PUSH
14738: LD_INT 116
14740: PUSH
14741: LD_INT 117
14743: PUSH
14744: LD_INT 118
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: ST_TO_ADDR
14770: GO 16009
14772: LD_INT 14
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 15004
14780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14781: LD_ADDR_VAR 0 2
14785: PUSH
14786: LD_INT 1
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: LD_INT 3
14794: PUSH
14795: LD_INT 4
14797: PUSH
14798: LD_INT 5
14800: PUSH
14801: LD_INT 6
14803: PUSH
14804: LD_INT 7
14806: PUSH
14807: LD_INT 8
14809: PUSH
14810: LD_INT 9
14812: PUSH
14813: LD_INT 10
14815: PUSH
14816: LD_INT 11
14818: PUSH
14819: LD_INT 12
14821: PUSH
14822: LD_INT 13
14824: PUSH
14825: LD_INT 14
14827: PUSH
14828: LD_INT 15
14830: PUSH
14831: LD_INT 16
14833: PUSH
14834: LD_INT 17
14836: PUSH
14837: LD_INT 18
14839: PUSH
14840: LD_INT 19
14842: PUSH
14843: LD_INT 20
14845: PUSH
14846: LD_INT 21
14848: PUSH
14849: LD_INT 22
14851: PUSH
14852: LD_INT 23
14854: PUSH
14855: LD_INT 24
14857: PUSH
14858: LD_INT 25
14860: PUSH
14861: LD_INT 26
14863: PUSH
14864: LD_INT 27
14866: PUSH
14867: LD_INT 28
14869: PUSH
14870: LD_INT 29
14872: PUSH
14873: LD_INT 30
14875: PUSH
14876: LD_INT 31
14878: PUSH
14879: LD_INT 32
14881: PUSH
14882: LD_INT 33
14884: PUSH
14885: LD_INT 34
14887: PUSH
14888: LD_INT 36
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 101
14930: PUSH
14931: LD_INT 102
14933: PUSH
14934: LD_INT 103
14936: PUSH
14937: LD_INT 104
14939: PUSH
14940: LD_INT 105
14942: PUSH
14943: LD_INT 106
14945: PUSH
14946: LD_INT 107
14948: PUSH
14949: LD_INT 108
14951: PUSH
14952: LD_INT 109
14954: PUSH
14955: LD_INT 110
14957: PUSH
14958: LD_INT 111
14960: PUSH
14961: LD_INT 112
14963: PUSH
14964: LD_INT 113
14966: PUSH
14967: LD_INT 114
14969: PUSH
14970: LD_INT 116
14972: PUSH
14973: LD_INT 117
14975: PUSH
14976: LD_INT 118
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: ST_TO_ADDR
15002: GO 16009
15004: LD_INT 15
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15236
15012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: LD_INT 2
15023: PUSH
15024: LD_INT 3
15026: PUSH
15027: LD_INT 4
15029: PUSH
15030: LD_INT 5
15032: PUSH
15033: LD_INT 6
15035: PUSH
15036: LD_INT 7
15038: PUSH
15039: LD_INT 8
15041: PUSH
15042: LD_INT 9
15044: PUSH
15045: LD_INT 10
15047: PUSH
15048: LD_INT 11
15050: PUSH
15051: LD_INT 12
15053: PUSH
15054: LD_INT 13
15056: PUSH
15057: LD_INT 14
15059: PUSH
15060: LD_INT 15
15062: PUSH
15063: LD_INT 16
15065: PUSH
15066: LD_INT 17
15068: PUSH
15069: LD_INT 18
15071: PUSH
15072: LD_INT 19
15074: PUSH
15075: LD_INT 20
15077: PUSH
15078: LD_INT 21
15080: PUSH
15081: LD_INT 22
15083: PUSH
15084: LD_INT 23
15086: PUSH
15087: LD_INT 24
15089: PUSH
15090: LD_INT 25
15092: PUSH
15093: LD_INT 26
15095: PUSH
15096: LD_INT 27
15098: PUSH
15099: LD_INT 28
15101: PUSH
15102: LD_INT 29
15104: PUSH
15105: LD_INT 30
15107: PUSH
15108: LD_INT 31
15110: PUSH
15111: LD_INT 32
15113: PUSH
15114: LD_INT 33
15116: PUSH
15117: LD_INT 34
15119: PUSH
15120: LD_INT 36
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 101
15162: PUSH
15163: LD_INT 102
15165: PUSH
15166: LD_INT 103
15168: PUSH
15169: LD_INT 104
15171: PUSH
15172: LD_INT 105
15174: PUSH
15175: LD_INT 106
15177: PUSH
15178: LD_INT 107
15180: PUSH
15181: LD_INT 108
15183: PUSH
15184: LD_INT 109
15186: PUSH
15187: LD_INT 110
15189: PUSH
15190: LD_INT 111
15192: PUSH
15193: LD_INT 112
15195: PUSH
15196: LD_INT 113
15198: PUSH
15199: LD_INT 114
15201: PUSH
15202: LD_INT 116
15204: PUSH
15205: LD_INT 117
15207: PUSH
15208: LD_INT 118
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: ST_TO_ADDR
15234: GO 16009
15236: LD_INT 16
15238: DOUBLE
15239: EQUAL
15240: IFTRUE 15244
15242: GO 15380
15244: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15245: LD_ADDR_VAR 0 2
15249: PUSH
15250: LD_INT 2
15252: PUSH
15253: LD_INT 4
15255: PUSH
15256: LD_INT 5
15258: PUSH
15259: LD_INT 7
15261: PUSH
15262: LD_INT 11
15264: PUSH
15265: LD_INT 12
15267: PUSH
15268: LD_INT 15
15270: PUSH
15271: LD_INT 16
15273: PUSH
15274: LD_INT 20
15276: PUSH
15277: LD_INT 21
15279: PUSH
15280: LD_INT 22
15282: PUSH
15283: LD_INT 23
15285: PUSH
15286: LD_INT 25
15288: PUSH
15289: LD_INT 26
15291: PUSH
15292: LD_INT 30
15294: PUSH
15295: LD_INT 31
15297: PUSH
15298: LD_INT 32
15300: PUSH
15301: LD_INT 33
15303: PUSH
15304: LD_INT 34
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 101
15330: PUSH
15331: LD_INT 102
15333: PUSH
15334: LD_INT 103
15336: PUSH
15337: LD_INT 106
15339: PUSH
15340: LD_INT 108
15342: PUSH
15343: LD_INT 112
15345: PUSH
15346: LD_INT 113
15348: PUSH
15349: LD_INT 114
15351: PUSH
15352: LD_INT 116
15354: PUSH
15355: LD_INT 117
15357: PUSH
15358: LD_INT 118
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: ST_TO_ADDR
15378: GO 16009
15380: LD_INT 17
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15612
15388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15389: LD_ADDR_VAR 0 2
15393: PUSH
15394: LD_INT 1
15396: PUSH
15397: LD_INT 2
15399: PUSH
15400: LD_INT 3
15402: PUSH
15403: LD_INT 4
15405: PUSH
15406: LD_INT 5
15408: PUSH
15409: LD_INT 6
15411: PUSH
15412: LD_INT 7
15414: PUSH
15415: LD_INT 8
15417: PUSH
15418: LD_INT 9
15420: PUSH
15421: LD_INT 10
15423: PUSH
15424: LD_INT 11
15426: PUSH
15427: LD_INT 12
15429: PUSH
15430: LD_INT 13
15432: PUSH
15433: LD_INT 14
15435: PUSH
15436: LD_INT 15
15438: PUSH
15439: LD_INT 16
15441: PUSH
15442: LD_INT 17
15444: PUSH
15445: LD_INT 18
15447: PUSH
15448: LD_INT 19
15450: PUSH
15451: LD_INT 20
15453: PUSH
15454: LD_INT 21
15456: PUSH
15457: LD_INT 22
15459: PUSH
15460: LD_INT 23
15462: PUSH
15463: LD_INT 24
15465: PUSH
15466: LD_INT 25
15468: PUSH
15469: LD_INT 26
15471: PUSH
15472: LD_INT 27
15474: PUSH
15475: LD_INT 28
15477: PUSH
15478: LD_INT 29
15480: PUSH
15481: LD_INT 30
15483: PUSH
15484: LD_INT 31
15486: PUSH
15487: LD_INT 32
15489: PUSH
15490: LD_INT 33
15492: PUSH
15493: LD_INT 34
15495: PUSH
15496: LD_INT 36
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 101
15538: PUSH
15539: LD_INT 102
15541: PUSH
15542: LD_INT 103
15544: PUSH
15545: LD_INT 104
15547: PUSH
15548: LD_INT 105
15550: PUSH
15551: LD_INT 106
15553: PUSH
15554: LD_INT 107
15556: PUSH
15557: LD_INT 108
15559: PUSH
15560: LD_INT 109
15562: PUSH
15563: LD_INT 110
15565: PUSH
15566: LD_INT 111
15568: PUSH
15569: LD_INT 112
15571: PUSH
15572: LD_INT 113
15574: PUSH
15575: LD_INT 114
15577: PUSH
15578: LD_INT 116
15580: PUSH
15581: LD_INT 117
15583: PUSH
15584: LD_INT 118
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: ST_TO_ADDR
15610: GO 16009
15612: LD_INT 18
15614: DOUBLE
15615: EQUAL
15616: IFTRUE 15620
15618: GO 15768
15620: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15621: LD_ADDR_VAR 0 2
15625: PUSH
15626: LD_INT 2
15628: PUSH
15629: LD_INT 4
15631: PUSH
15632: LD_INT 5
15634: PUSH
15635: LD_INT 7
15637: PUSH
15638: LD_INT 11
15640: PUSH
15641: LD_INT 12
15643: PUSH
15644: LD_INT 15
15646: PUSH
15647: LD_INT 16
15649: PUSH
15650: LD_INT 20
15652: PUSH
15653: LD_INT 21
15655: PUSH
15656: LD_INT 22
15658: PUSH
15659: LD_INT 23
15661: PUSH
15662: LD_INT 25
15664: PUSH
15665: LD_INT 26
15667: PUSH
15668: LD_INT 30
15670: PUSH
15671: LD_INT 31
15673: PUSH
15674: LD_INT 32
15676: PUSH
15677: LD_INT 33
15679: PUSH
15680: LD_INT 34
15682: PUSH
15683: LD_INT 35
15685: PUSH
15686: LD_INT 36
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 101
15714: PUSH
15715: LD_INT 102
15717: PUSH
15718: LD_INT 103
15720: PUSH
15721: LD_INT 106
15723: PUSH
15724: LD_INT 108
15726: PUSH
15727: LD_INT 112
15729: PUSH
15730: LD_INT 113
15732: PUSH
15733: LD_INT 114
15735: PUSH
15736: LD_INT 115
15738: PUSH
15739: LD_INT 116
15741: PUSH
15742: LD_INT 117
15744: PUSH
15745: LD_INT 118
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: ST_TO_ADDR
15766: GO 16009
15768: LD_INT 19
15770: DOUBLE
15771: EQUAL
15772: IFTRUE 15776
15774: GO 16008
15776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15777: LD_ADDR_VAR 0 2
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: LD_INT 2
15787: PUSH
15788: LD_INT 3
15790: PUSH
15791: LD_INT 4
15793: PUSH
15794: LD_INT 5
15796: PUSH
15797: LD_INT 6
15799: PUSH
15800: LD_INT 7
15802: PUSH
15803: LD_INT 8
15805: PUSH
15806: LD_INT 9
15808: PUSH
15809: LD_INT 10
15811: PUSH
15812: LD_INT 11
15814: PUSH
15815: LD_INT 12
15817: PUSH
15818: LD_INT 13
15820: PUSH
15821: LD_INT 14
15823: PUSH
15824: LD_INT 15
15826: PUSH
15827: LD_INT 16
15829: PUSH
15830: LD_INT 17
15832: PUSH
15833: LD_INT 18
15835: PUSH
15836: LD_INT 19
15838: PUSH
15839: LD_INT 20
15841: PUSH
15842: LD_INT 21
15844: PUSH
15845: LD_INT 22
15847: PUSH
15848: LD_INT 23
15850: PUSH
15851: LD_INT 24
15853: PUSH
15854: LD_INT 25
15856: PUSH
15857: LD_INT 26
15859: PUSH
15860: LD_INT 27
15862: PUSH
15863: LD_INT 28
15865: PUSH
15866: LD_INT 29
15868: PUSH
15869: LD_INT 30
15871: PUSH
15872: LD_INT 31
15874: PUSH
15875: LD_INT 32
15877: PUSH
15878: LD_INT 33
15880: PUSH
15881: LD_INT 34
15883: PUSH
15884: LD_INT 35
15886: PUSH
15887: LD_INT 36
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 101
15930: PUSH
15931: LD_INT 102
15933: PUSH
15934: LD_INT 103
15936: PUSH
15937: LD_INT 104
15939: PUSH
15940: LD_INT 105
15942: PUSH
15943: LD_INT 106
15945: PUSH
15946: LD_INT 107
15948: PUSH
15949: LD_INT 108
15951: PUSH
15952: LD_INT 109
15954: PUSH
15955: LD_INT 110
15957: PUSH
15958: LD_INT 111
15960: PUSH
15961: LD_INT 112
15963: PUSH
15964: LD_INT 113
15966: PUSH
15967: LD_INT 114
15969: PUSH
15970: LD_INT 115
15972: PUSH
15973: LD_INT 116
15975: PUSH
15976: LD_INT 117
15978: PUSH
15979: LD_INT 118
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: ST_TO_ADDR
16006: GO 16009
16008: POP
// end else
16009: GO 16240
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16011: LD_ADDR_VAR 0 2
16015: PUSH
16016: LD_INT 1
16018: PUSH
16019: LD_INT 2
16021: PUSH
16022: LD_INT 3
16024: PUSH
16025: LD_INT 4
16027: PUSH
16028: LD_INT 5
16030: PUSH
16031: LD_INT 6
16033: PUSH
16034: LD_INT 7
16036: PUSH
16037: LD_INT 8
16039: PUSH
16040: LD_INT 9
16042: PUSH
16043: LD_INT 10
16045: PUSH
16046: LD_INT 11
16048: PUSH
16049: LD_INT 12
16051: PUSH
16052: LD_INT 13
16054: PUSH
16055: LD_INT 14
16057: PUSH
16058: LD_INT 15
16060: PUSH
16061: LD_INT 16
16063: PUSH
16064: LD_INT 17
16066: PUSH
16067: LD_INT 18
16069: PUSH
16070: LD_INT 19
16072: PUSH
16073: LD_INT 20
16075: PUSH
16076: LD_INT 21
16078: PUSH
16079: LD_INT 22
16081: PUSH
16082: LD_INT 23
16084: PUSH
16085: LD_INT 24
16087: PUSH
16088: LD_INT 25
16090: PUSH
16091: LD_INT 26
16093: PUSH
16094: LD_INT 27
16096: PUSH
16097: LD_INT 28
16099: PUSH
16100: LD_INT 29
16102: PUSH
16103: LD_INT 30
16105: PUSH
16106: LD_INT 31
16108: PUSH
16109: LD_INT 32
16111: PUSH
16112: LD_INT 33
16114: PUSH
16115: LD_INT 34
16117: PUSH
16118: LD_INT 35
16120: PUSH
16121: LD_INT 36
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 101
16164: PUSH
16165: LD_INT 102
16167: PUSH
16168: LD_INT 103
16170: PUSH
16171: LD_INT 104
16173: PUSH
16174: LD_INT 105
16176: PUSH
16177: LD_INT 106
16179: PUSH
16180: LD_INT 107
16182: PUSH
16183: LD_INT 108
16185: PUSH
16186: LD_INT 109
16188: PUSH
16189: LD_INT 110
16191: PUSH
16192: LD_INT 111
16194: PUSH
16195: LD_INT 112
16197: PUSH
16198: LD_INT 113
16200: PUSH
16201: LD_INT 114
16203: PUSH
16204: LD_INT 115
16206: PUSH
16207: LD_INT 116
16209: PUSH
16210: LD_INT 117
16212: PUSH
16213: LD_INT 118
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: ST_TO_ADDR
// if result then
16240: LD_VAR 0 2
16244: IFFALSE 17030
// begin normal :=  ;
16246: LD_ADDR_VAR 0 5
16250: PUSH
16251: LD_STRING 
16253: ST_TO_ADDR
// hardcore :=  ;
16254: LD_ADDR_VAR 0 6
16258: PUSH
16259: LD_STRING 
16261: ST_TO_ADDR
// active :=  ;
16262: LD_ADDR_VAR 0 7
16266: PUSH
16267: LD_STRING 
16269: ST_TO_ADDR
// for i = 1 to normalCounter do
16270: LD_ADDR_VAR 0 8
16274: PUSH
16275: DOUBLE
16276: LD_INT 1
16278: DEC
16279: ST_TO_ADDR
16280: LD_EXP 34
16284: PUSH
16285: FOR_TO
16286: IFFALSE 16387
// begin tmp := 0 ;
16288: LD_ADDR_VAR 0 3
16292: PUSH
16293: LD_STRING 0
16295: ST_TO_ADDR
// if result [ 1 ] then
16296: LD_VAR 0 2
16300: PUSH
16301: LD_INT 1
16303: ARRAY
16304: IFFALSE 16369
// if result [ 1 ] [ 1 ] = i then
16306: LD_VAR 0 2
16310: PUSH
16311: LD_INT 1
16313: ARRAY
16314: PUSH
16315: LD_INT 1
16317: ARRAY
16318: PUSH
16319: LD_VAR 0 8
16323: EQUAL
16324: IFFALSE 16369
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16326: LD_ADDR_VAR 0 2
16330: PUSH
16331: LD_VAR 0 2
16335: PPUSH
16336: LD_INT 1
16338: PPUSH
16339: LD_VAR 0 2
16343: PUSH
16344: LD_INT 1
16346: ARRAY
16347: PPUSH
16348: LD_INT 1
16350: PPUSH
16351: CALL_OW 3
16355: PPUSH
16356: CALL_OW 1
16360: ST_TO_ADDR
// tmp := 1 ;
16361: LD_ADDR_VAR 0 3
16365: PUSH
16366: LD_STRING 1
16368: ST_TO_ADDR
// end ; normal := normal & tmp ;
16369: LD_ADDR_VAR 0 5
16373: PUSH
16374: LD_VAR 0 5
16378: PUSH
16379: LD_VAR 0 3
16383: STR
16384: ST_TO_ADDR
// end ;
16385: GO 16285
16387: POP
16388: POP
// for i = 1 to hardcoreCounter do
16389: LD_ADDR_VAR 0 8
16393: PUSH
16394: DOUBLE
16395: LD_INT 1
16397: DEC
16398: ST_TO_ADDR
16399: LD_EXP 35
16403: PUSH
16404: FOR_TO
16405: IFFALSE 16510
// begin tmp := 0 ;
16407: LD_ADDR_VAR 0 3
16411: PUSH
16412: LD_STRING 0
16414: ST_TO_ADDR
// if result [ 2 ] then
16415: LD_VAR 0 2
16419: PUSH
16420: LD_INT 2
16422: ARRAY
16423: IFFALSE 16492
// if result [ 2 ] [ 1 ] = 100 + i then
16425: LD_VAR 0 2
16429: PUSH
16430: LD_INT 2
16432: ARRAY
16433: PUSH
16434: LD_INT 1
16436: ARRAY
16437: PUSH
16438: LD_INT 100
16440: PUSH
16441: LD_VAR 0 8
16445: PLUS
16446: EQUAL
16447: IFFALSE 16492
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16449: LD_ADDR_VAR 0 2
16453: PUSH
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 2
16461: PPUSH
16462: LD_VAR 0 2
16466: PUSH
16467: LD_INT 2
16469: ARRAY
16470: PPUSH
16471: LD_INT 1
16473: PPUSH
16474: CALL_OW 3
16478: PPUSH
16479: CALL_OW 1
16483: ST_TO_ADDR
// tmp := 1 ;
16484: LD_ADDR_VAR 0 3
16488: PUSH
16489: LD_STRING 1
16491: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16492: LD_ADDR_VAR 0 6
16496: PUSH
16497: LD_VAR 0 6
16501: PUSH
16502: LD_VAR 0 3
16506: STR
16507: ST_TO_ADDR
// end ;
16508: GO 16404
16510: POP
16511: POP
// if isGameLoad then
16512: LD_VAR 0 1
16516: IFFALSE 16991
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16518: LD_ADDR_VAR 0 4
16522: PUSH
16523: LD_EXP 38
16527: PUSH
16528: LD_EXP 37
16532: PUSH
16533: LD_EXP 39
16537: PUSH
16538: LD_EXP 36
16542: PUSH
16543: LD_EXP 40
16547: PUSH
16548: LD_EXP 41
16552: PUSH
16553: LD_EXP 42
16557: PUSH
16558: LD_EXP 43
16562: PUSH
16563: LD_EXP 44
16567: PUSH
16568: LD_EXP 45
16572: PUSH
16573: LD_EXP 46
16577: PUSH
16578: LD_EXP 47
16582: PUSH
16583: LD_EXP 48
16587: PUSH
16588: LD_EXP 49
16592: PUSH
16593: LD_EXP 57
16597: PUSH
16598: LD_EXP 58
16602: PUSH
16603: LD_EXP 59
16607: PUSH
16608: LD_EXP 60
16612: PUSH
16613: LD_EXP 62
16617: PUSH
16618: LD_EXP 63
16622: PUSH
16623: LD_EXP 64
16627: PUSH
16628: LD_EXP 67
16632: PUSH
16633: LD_EXP 69
16637: PUSH
16638: LD_EXP 70
16642: PUSH
16643: LD_EXP 71
16647: PUSH
16648: LD_EXP 73
16652: PUSH
16653: LD_EXP 74
16657: PUSH
16658: LD_EXP 77
16662: PUSH
16663: LD_EXP 78
16667: PUSH
16668: LD_EXP 79
16672: PUSH
16673: LD_EXP 80
16677: PUSH
16678: LD_EXP 81
16682: PUSH
16683: LD_EXP 82
16687: PUSH
16688: LD_EXP 83
16692: PUSH
16693: LD_EXP 84
16697: PUSH
16698: LD_EXP 85
16702: PUSH
16703: LD_EXP 50
16707: PUSH
16708: LD_EXP 51
16712: PUSH
16713: LD_EXP 54
16717: PUSH
16718: LD_EXP 55
16722: PUSH
16723: LD_EXP 56
16727: PUSH
16728: LD_EXP 52
16732: PUSH
16733: LD_EXP 53
16737: PUSH
16738: LD_EXP 61
16742: PUSH
16743: LD_EXP 65
16747: PUSH
16748: LD_EXP 66
16752: PUSH
16753: LD_EXP 68
16757: PUSH
16758: LD_EXP 72
16762: PUSH
16763: LD_EXP 75
16767: PUSH
16768: LD_EXP 76
16772: PUSH
16773: LD_EXP 86
16777: PUSH
16778: LD_EXP 87
16782: PUSH
16783: LD_EXP 88
16787: PUSH
16788: LD_EXP 89
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: ST_TO_ADDR
// tmp :=  ;
16849: LD_ADDR_VAR 0 3
16853: PUSH
16854: LD_STRING 
16856: ST_TO_ADDR
// for i = 1 to normalCounter do
16857: LD_ADDR_VAR 0 8
16861: PUSH
16862: DOUBLE
16863: LD_INT 1
16865: DEC
16866: ST_TO_ADDR
16867: LD_EXP 34
16871: PUSH
16872: FOR_TO
16873: IFFALSE 16909
// begin if flags [ i ] then
16875: LD_VAR 0 4
16879: PUSH
16880: LD_VAR 0 8
16884: ARRAY
16885: IFFALSE 16907
// tmp := tmp & i & ; ;
16887: LD_ADDR_VAR 0 3
16891: PUSH
16892: LD_VAR 0 3
16896: PUSH
16897: LD_VAR 0 8
16901: STR
16902: PUSH
16903: LD_STRING ;
16905: STR
16906: ST_TO_ADDR
// end ;
16907: GO 16872
16909: POP
16910: POP
// for i = 1 to hardcoreCounter do
16911: LD_ADDR_VAR 0 8
16915: PUSH
16916: DOUBLE
16917: LD_INT 1
16919: DEC
16920: ST_TO_ADDR
16921: LD_EXP 35
16925: PUSH
16926: FOR_TO
16927: IFFALSE 16973
// begin if flags [ normalCounter + i ] then
16929: LD_VAR 0 4
16933: PUSH
16934: LD_EXP 34
16938: PUSH
16939: LD_VAR 0 8
16943: PLUS
16944: ARRAY
16945: IFFALSE 16971
// tmp := tmp & ( 100 + i ) & ; ;
16947: LD_ADDR_VAR 0 3
16951: PUSH
16952: LD_VAR 0 3
16956: PUSH
16957: LD_INT 100
16959: PUSH
16960: LD_VAR 0 8
16964: PLUS
16965: STR
16966: PUSH
16967: LD_STRING ;
16969: STR
16970: ST_TO_ADDR
// end ;
16971: GO 16926
16973: POP
16974: POP
// if tmp then
16975: LD_VAR 0 3
16979: IFFALSE 16991
// active := tmp ;
16981: LD_ADDR_VAR 0 7
16985: PUSH
16986: LD_VAR 0 3
16990: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16991: LD_STRING getStreamItemsFromMission("
16993: PUSH
16994: LD_VAR 0 5
16998: STR
16999: PUSH
17000: LD_STRING ","
17002: STR
17003: PUSH
17004: LD_VAR 0 6
17008: STR
17009: PUSH
17010: LD_STRING ","
17012: STR
17013: PUSH
17014: LD_VAR 0 7
17018: STR
17019: PUSH
17020: LD_STRING ")
17022: STR
17023: PPUSH
17024: CALL_OW 559
// end else
17028: GO 17037
// ToLua ( getStreamItemsFromMission("","","") ) ;
17030: LD_STRING getStreamItemsFromMission("","","")
17032: PPUSH
17033: CALL_OW 559
// end ;
17037: LD_VAR 0 2
17041: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17042: LD_EXP 33
17046: PUSH
17047: LD_EXP 38
17051: AND
17052: IFFALSE 17176
17054: GO 17056
17056: DISABLE
17057: LD_INT 0
17059: PPUSH
17060: PPUSH
// begin enable ;
17061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17062: LD_ADDR_VAR 0 2
17066: PUSH
17067: LD_INT 22
17069: PUSH
17070: LD_OWVAR 2
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: LD_INT 34
17084: PUSH
17085: LD_INT 7
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 34
17094: PUSH
17095: LD_INT 45
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 34
17104: PUSH
17105: LD_INT 28
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 34
17114: PUSH
17115: LD_INT 47
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PPUSH
17133: CALL_OW 69
17137: ST_TO_ADDR
// if not tmp then
17138: LD_VAR 0 2
17142: NOT
17143: IFFALSE 17147
// exit ;
17145: GO 17176
// for i in tmp do
17147: LD_ADDR_VAR 0 1
17151: PUSH
17152: LD_VAR 0 2
17156: PUSH
17157: FOR_IN
17158: IFFALSE 17174
// begin SetLives ( i , 0 ) ;
17160: LD_VAR 0 1
17164: PPUSH
17165: LD_INT 0
17167: PPUSH
17168: CALL_OW 234
// end ;
17172: GO 17157
17174: POP
17175: POP
// end ;
17176: PPOPN 2
17178: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17179: LD_EXP 33
17183: PUSH
17184: LD_EXP 39
17188: AND
17189: IFFALSE 17273
17191: GO 17193
17193: DISABLE
17194: LD_INT 0
17196: PPUSH
17197: PPUSH
// begin enable ;
17198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17199: LD_ADDR_VAR 0 2
17203: PUSH
17204: LD_INT 22
17206: PUSH
17207: LD_OWVAR 2
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 32
17218: PUSH
17219: LD_INT 3
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PPUSH
17230: CALL_OW 69
17234: ST_TO_ADDR
// if not tmp then
17235: LD_VAR 0 2
17239: NOT
17240: IFFALSE 17244
// exit ;
17242: GO 17273
// for i in tmp do
17244: LD_ADDR_VAR 0 1
17248: PUSH
17249: LD_VAR 0 2
17253: PUSH
17254: FOR_IN
17255: IFFALSE 17271
// begin SetLives ( i , 0 ) ;
17257: LD_VAR 0 1
17261: PPUSH
17262: LD_INT 0
17264: PPUSH
17265: CALL_OW 234
// end ;
17269: GO 17254
17271: POP
17272: POP
// end ;
17273: PPOPN 2
17275: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17276: LD_EXP 33
17280: PUSH
17281: LD_EXP 36
17285: AND
17286: IFFALSE 17379
17288: GO 17290
17290: DISABLE
17291: LD_INT 0
17293: PPUSH
// begin enable ;
17294: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17295: LD_ADDR_VAR 0 1
17299: PUSH
17300: LD_INT 22
17302: PUSH
17303: LD_OWVAR 2
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 25
17317: PUSH
17318: LD_INT 5
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 25
17327: PUSH
17328: LD_INT 9
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 25
17337: PUSH
17338: LD_INT 8
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PPUSH
17355: CALL_OW 69
17359: PUSH
17360: FOR_IN
17361: IFFALSE 17377
// begin SetClass ( i , 1 ) ;
17363: LD_VAR 0 1
17367: PPUSH
17368: LD_INT 1
17370: PPUSH
17371: CALL_OW 336
// end ;
17375: GO 17360
17377: POP
17378: POP
// end ;
17379: PPOPN 1
17381: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17382: LD_EXP 33
17386: PUSH
17387: LD_EXP 37
17391: AND
17392: PUSH
17393: LD_OWVAR 65
17397: PUSH
17398: LD_INT 7
17400: LESS
17401: AND
17402: IFFALSE 17416
17404: GO 17406
17406: DISABLE
// begin enable ;
17407: ENABLE
// game_speed := 7 ;
17408: LD_ADDR_OWVAR 65
17412: PUSH
17413: LD_INT 7
17415: ST_TO_ADDR
// end ;
17416: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17417: LD_EXP 33
17421: PUSH
17422: LD_EXP 40
17426: AND
17427: IFFALSE 17629
17429: GO 17431
17431: DISABLE
17432: LD_INT 0
17434: PPUSH
17435: PPUSH
17436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17437: LD_ADDR_VAR 0 3
17441: PUSH
17442: LD_INT 81
17444: PUSH
17445: LD_OWVAR 2
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 21
17456: PUSH
17457: LD_INT 1
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PPUSH
17468: CALL_OW 69
17472: ST_TO_ADDR
// if not tmp then
17473: LD_VAR 0 3
17477: NOT
17478: IFFALSE 17482
// exit ;
17480: GO 17629
// if tmp > 5 then
17482: LD_VAR 0 3
17486: PUSH
17487: LD_INT 5
17489: GREATER
17490: IFFALSE 17502
// k := 5 else
17492: LD_ADDR_VAR 0 2
17496: PUSH
17497: LD_INT 5
17499: ST_TO_ADDR
17500: GO 17512
// k := tmp ;
17502: LD_ADDR_VAR 0 2
17506: PUSH
17507: LD_VAR 0 3
17511: ST_TO_ADDR
// for i := 1 to k do
17512: LD_ADDR_VAR 0 1
17516: PUSH
17517: DOUBLE
17518: LD_INT 1
17520: DEC
17521: ST_TO_ADDR
17522: LD_VAR 0 2
17526: PUSH
17527: FOR_TO
17528: IFFALSE 17627
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17530: LD_VAR 0 3
17534: PUSH
17535: LD_VAR 0 1
17539: ARRAY
17540: PPUSH
17541: LD_VAR 0 1
17545: PUSH
17546: LD_INT 4
17548: MOD
17549: PUSH
17550: LD_INT 1
17552: PLUS
17553: PPUSH
17554: CALL_OW 259
17558: PUSH
17559: LD_INT 10
17561: LESS
17562: IFFALSE 17625
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17564: LD_VAR 0 3
17568: PUSH
17569: LD_VAR 0 1
17573: ARRAY
17574: PPUSH
17575: LD_VAR 0 1
17579: PUSH
17580: LD_INT 4
17582: MOD
17583: PUSH
17584: LD_INT 1
17586: PLUS
17587: PPUSH
17588: LD_VAR 0 3
17592: PUSH
17593: LD_VAR 0 1
17597: ARRAY
17598: PPUSH
17599: LD_VAR 0 1
17603: PUSH
17604: LD_INT 4
17606: MOD
17607: PUSH
17608: LD_INT 1
17610: PLUS
17611: PPUSH
17612: CALL_OW 259
17616: PUSH
17617: LD_INT 1
17619: PLUS
17620: PPUSH
17621: CALL_OW 237
17625: GO 17527
17627: POP
17628: POP
// end ;
17629: PPOPN 3
17631: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17632: LD_EXP 33
17636: PUSH
17637: LD_EXP 41
17641: AND
17642: IFFALSE 17662
17644: GO 17646
17646: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17647: LD_INT 4
17649: PPUSH
17650: LD_OWVAR 2
17654: PPUSH
17655: LD_INT 0
17657: PPUSH
17658: CALL_OW 324
17662: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17663: LD_EXP 33
17667: PUSH
17668: LD_EXP 70
17672: AND
17673: IFFALSE 17693
17675: GO 17677
17677: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17678: LD_INT 19
17680: PPUSH
17681: LD_OWVAR 2
17685: PPUSH
17686: LD_INT 0
17688: PPUSH
17689: CALL_OW 324
17693: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17694: LD_EXP 33
17698: PUSH
17699: LD_EXP 42
17703: AND
17704: IFFALSE 17806
17706: GO 17708
17708: DISABLE
17709: LD_INT 0
17711: PPUSH
17712: PPUSH
// begin enable ;
17713: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17714: LD_ADDR_VAR 0 2
17718: PUSH
17719: LD_INT 22
17721: PUSH
17722: LD_OWVAR 2
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 2
17733: PUSH
17734: LD_INT 34
17736: PUSH
17737: LD_INT 11
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 34
17746: PUSH
17747: LD_INT 30
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PPUSH
17763: CALL_OW 69
17767: ST_TO_ADDR
// if not tmp then
17768: LD_VAR 0 2
17772: NOT
17773: IFFALSE 17777
// exit ;
17775: GO 17806
// for i in tmp do
17777: LD_ADDR_VAR 0 1
17781: PUSH
17782: LD_VAR 0 2
17786: PUSH
17787: FOR_IN
17788: IFFALSE 17804
// begin SetLives ( i , 0 ) ;
17790: LD_VAR 0 1
17794: PPUSH
17795: LD_INT 0
17797: PPUSH
17798: CALL_OW 234
// end ;
17802: GO 17787
17804: POP
17805: POP
// end ;
17806: PPOPN 2
17808: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17809: LD_EXP 33
17813: PUSH
17814: LD_EXP 43
17818: AND
17819: IFFALSE 17839
17821: GO 17823
17823: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17824: LD_INT 32
17826: PPUSH
17827: LD_OWVAR 2
17831: PPUSH
17832: LD_INT 0
17834: PPUSH
17835: CALL_OW 324
17839: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17840: LD_EXP 33
17844: PUSH
17845: LD_EXP 44
17849: AND
17850: IFFALSE 18031
17852: GO 17854
17854: DISABLE
17855: LD_INT 0
17857: PPUSH
17858: PPUSH
17859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17860: LD_ADDR_VAR 0 2
17864: PUSH
17865: LD_INT 22
17867: PUSH
17868: LD_OWVAR 2
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 33
17879: PUSH
17880: LD_INT 3
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PPUSH
17891: CALL_OW 69
17895: ST_TO_ADDR
// if not tmp then
17896: LD_VAR 0 2
17900: NOT
17901: IFFALSE 17905
// exit ;
17903: GO 18031
// side := 0 ;
17905: LD_ADDR_VAR 0 3
17909: PUSH
17910: LD_INT 0
17912: ST_TO_ADDR
// for i := 1 to 8 do
17913: LD_ADDR_VAR 0 1
17917: PUSH
17918: DOUBLE
17919: LD_INT 1
17921: DEC
17922: ST_TO_ADDR
17923: LD_INT 8
17925: PUSH
17926: FOR_TO
17927: IFFALSE 17975
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17929: LD_OWVAR 2
17933: PUSH
17934: LD_VAR 0 1
17938: NONEQUAL
17939: PUSH
17940: LD_OWVAR 2
17944: PPUSH
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 81
17954: PUSH
17955: LD_INT 2
17957: EQUAL
17958: AND
17959: IFFALSE 17973
// begin side := i ;
17961: LD_ADDR_VAR 0 3
17965: PUSH
17966: LD_VAR 0 1
17970: ST_TO_ADDR
// break ;
17971: GO 17975
// end ;
17973: GO 17926
17975: POP
17976: POP
// if not side then
17977: LD_VAR 0 3
17981: NOT
17982: IFFALSE 17986
// exit ;
17984: GO 18031
// for i := 1 to tmp do
17986: LD_ADDR_VAR 0 1
17990: PUSH
17991: DOUBLE
17992: LD_INT 1
17994: DEC
17995: ST_TO_ADDR
17996: LD_VAR 0 2
18000: PUSH
18001: FOR_TO
18002: IFFALSE 18029
// if Prob ( 60 ) then
18004: LD_INT 60
18006: PPUSH
18007: CALL_OW 13
18011: IFFALSE 18027
// SetSide ( i , side ) ;
18013: LD_VAR 0 1
18017: PPUSH
18018: LD_VAR 0 3
18022: PPUSH
18023: CALL_OW 235
18027: GO 18001
18029: POP
18030: POP
// end ;
18031: PPOPN 3
18033: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18034: LD_EXP 33
18038: PUSH
18039: LD_EXP 46
18043: AND
18044: IFFALSE 18163
18046: GO 18048
18048: DISABLE
18049: LD_INT 0
18051: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18052: LD_ADDR_VAR 0 1
18056: PUSH
18057: LD_INT 22
18059: PUSH
18060: LD_OWVAR 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 21
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 3
18081: PUSH
18082: LD_INT 23
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: PPUSH
18101: CALL_OW 69
18105: PUSH
18106: FOR_IN
18107: IFFALSE 18161
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18109: LD_VAR 0 1
18113: PPUSH
18114: CALL_OW 257
18118: PUSH
18119: LD_INT 1
18121: PUSH
18122: LD_INT 2
18124: PUSH
18125: LD_INT 3
18127: PUSH
18128: LD_INT 4
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: IN
18137: IFFALSE 18159
// SetClass ( un , rand ( 1 , 4 ) ) ;
18139: LD_VAR 0 1
18143: PPUSH
18144: LD_INT 1
18146: PPUSH
18147: LD_INT 4
18149: PPUSH
18150: CALL_OW 12
18154: PPUSH
18155: CALL_OW 336
18159: GO 18106
18161: POP
18162: POP
// end ;
18163: PPOPN 1
18165: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18166: LD_EXP 33
18170: PUSH
18171: LD_EXP 45
18175: AND
18176: IFFALSE 18255
18178: GO 18180
18180: DISABLE
18181: LD_INT 0
18183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18184: LD_ADDR_VAR 0 1
18188: PUSH
18189: LD_INT 22
18191: PUSH
18192: LD_OWVAR 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 21
18203: PUSH
18204: LD_INT 3
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 69
18219: ST_TO_ADDR
// if not tmp then
18220: LD_VAR 0 1
18224: NOT
18225: IFFALSE 18229
// exit ;
18227: GO 18255
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18229: LD_VAR 0 1
18233: PUSH
18234: LD_INT 1
18236: PPUSH
18237: LD_VAR 0 1
18241: PPUSH
18242: CALL_OW 12
18246: ARRAY
18247: PPUSH
18248: LD_INT 100
18250: PPUSH
18251: CALL_OW 234
// end ;
18255: PPOPN 1
18257: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18258: LD_EXP 33
18262: PUSH
18263: LD_EXP 47
18267: AND
18268: IFFALSE 18366
18270: GO 18272
18272: DISABLE
18273: LD_INT 0
18275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18276: LD_ADDR_VAR 0 1
18280: PUSH
18281: LD_INT 22
18283: PUSH
18284: LD_OWVAR 2
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 21
18295: PUSH
18296: LD_INT 1
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PPUSH
18307: CALL_OW 69
18311: ST_TO_ADDR
// if not tmp then
18312: LD_VAR 0 1
18316: NOT
18317: IFFALSE 18321
// exit ;
18319: GO 18366
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18321: LD_VAR 0 1
18325: PUSH
18326: LD_INT 1
18328: PPUSH
18329: LD_VAR 0 1
18333: PPUSH
18334: CALL_OW 12
18338: ARRAY
18339: PPUSH
18340: LD_INT 1
18342: PPUSH
18343: LD_INT 4
18345: PPUSH
18346: CALL_OW 12
18350: PPUSH
18351: LD_INT 3000
18353: PPUSH
18354: LD_INT 9000
18356: PPUSH
18357: CALL_OW 12
18361: PPUSH
18362: CALL_OW 492
// end ;
18366: PPOPN 1
18368: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18369: LD_EXP 33
18373: PUSH
18374: LD_EXP 48
18378: AND
18379: IFFALSE 18399
18381: GO 18383
18383: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18384: LD_INT 1
18386: PPUSH
18387: LD_OWVAR 2
18391: PPUSH
18392: LD_INT 0
18394: PPUSH
18395: CALL_OW 324
18399: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18400: LD_EXP 33
18404: PUSH
18405: LD_EXP 49
18409: AND
18410: IFFALSE 18493
18412: GO 18414
18414: DISABLE
18415: LD_INT 0
18417: PPUSH
18418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18419: LD_ADDR_VAR 0 2
18423: PUSH
18424: LD_INT 22
18426: PUSH
18427: LD_OWVAR 2
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 21
18438: PUSH
18439: LD_INT 3
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PPUSH
18450: CALL_OW 69
18454: ST_TO_ADDR
// if not tmp then
18455: LD_VAR 0 2
18459: NOT
18460: IFFALSE 18464
// exit ;
18462: GO 18493
// for i in tmp do
18464: LD_ADDR_VAR 0 1
18468: PUSH
18469: LD_VAR 0 2
18473: PUSH
18474: FOR_IN
18475: IFFALSE 18491
// SetBLevel ( i , 10 ) ;
18477: LD_VAR 0 1
18481: PPUSH
18482: LD_INT 10
18484: PPUSH
18485: CALL_OW 241
18489: GO 18474
18491: POP
18492: POP
// end ;
18493: PPOPN 2
18495: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18496: LD_EXP 33
18500: PUSH
18501: LD_EXP 50
18505: AND
18506: IFFALSE 18617
18508: GO 18510
18510: DISABLE
18511: LD_INT 0
18513: PPUSH
18514: PPUSH
18515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18516: LD_ADDR_VAR 0 3
18520: PUSH
18521: LD_INT 22
18523: PUSH
18524: LD_OWVAR 2
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 25
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PPUSH
18547: CALL_OW 69
18551: ST_TO_ADDR
// if not tmp then
18552: LD_VAR 0 3
18556: NOT
18557: IFFALSE 18561
// exit ;
18559: GO 18617
// un := tmp [ rand ( 1 , tmp ) ] ;
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_VAR 0 3
18570: PUSH
18571: LD_INT 1
18573: PPUSH
18574: LD_VAR 0 3
18578: PPUSH
18579: CALL_OW 12
18583: ARRAY
18584: ST_TO_ADDR
// if Crawls ( un ) then
18585: LD_VAR 0 2
18589: PPUSH
18590: CALL_OW 318
18594: IFFALSE 18605
// ComWalk ( un ) ;
18596: LD_VAR 0 2
18600: PPUSH
18601: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18605: LD_VAR 0 2
18609: PPUSH
18610: LD_INT 5
18612: PPUSH
18613: CALL_OW 336
// end ;
18617: PPOPN 3
18619: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18620: LD_EXP 33
18624: PUSH
18625: LD_EXP 51
18629: AND
18630: PUSH
18631: LD_OWVAR 67
18635: PUSH
18636: LD_INT 4
18638: LESS
18639: AND
18640: IFFALSE 18659
18642: GO 18644
18644: DISABLE
// begin Difficulty := Difficulty + 1 ;
18645: LD_ADDR_OWVAR 67
18649: PUSH
18650: LD_OWVAR 67
18654: PUSH
18655: LD_INT 1
18657: PLUS
18658: ST_TO_ADDR
// end ;
18659: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18660: LD_EXP 33
18664: PUSH
18665: LD_EXP 52
18669: AND
18670: IFFALSE 18773
18672: GO 18674
18674: DISABLE
18675: LD_INT 0
18677: PPUSH
// begin for i := 1 to 5 do
18678: LD_ADDR_VAR 0 1
18682: PUSH
18683: DOUBLE
18684: LD_INT 1
18686: DEC
18687: ST_TO_ADDR
18688: LD_INT 5
18690: PUSH
18691: FOR_TO
18692: IFFALSE 18771
// begin uc_nation := nation_nature ;
18694: LD_ADDR_OWVAR 21
18698: PUSH
18699: LD_INT 0
18701: ST_TO_ADDR
// uc_side := 0 ;
18702: LD_ADDR_OWVAR 20
18706: PUSH
18707: LD_INT 0
18709: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18710: LD_ADDR_OWVAR 29
18714: PUSH
18715: LD_INT 12
18717: PUSH
18718: LD_INT 12
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: ST_TO_ADDR
// hc_agressivity := 20 ;
18725: LD_ADDR_OWVAR 35
18729: PUSH
18730: LD_INT 20
18732: ST_TO_ADDR
// hc_class := class_tiger ;
18733: LD_ADDR_OWVAR 28
18737: PUSH
18738: LD_INT 14
18740: ST_TO_ADDR
// hc_gallery :=  ;
18741: LD_ADDR_OWVAR 33
18745: PUSH
18746: LD_STRING 
18748: ST_TO_ADDR
// hc_name :=  ;
18749: LD_ADDR_OWVAR 26
18753: PUSH
18754: LD_STRING 
18756: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18757: CALL_OW 44
18761: PPUSH
18762: LD_INT 0
18764: PPUSH
18765: CALL_OW 51
// end ;
18769: GO 18691
18771: POP
18772: POP
// end ;
18773: PPOPN 1
18775: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18776: LD_EXP 33
18780: PUSH
18781: LD_EXP 53
18785: AND
18786: IFFALSE 18795
18788: GO 18790
18790: DISABLE
// StreamSibBomb ;
18791: CALL 18796 0 0
18795: END
// export function StreamSibBomb ; var i , x , y ; begin
18796: LD_INT 0
18798: PPUSH
18799: PPUSH
18800: PPUSH
18801: PPUSH
// result := false ;
18802: LD_ADDR_VAR 0 1
18806: PUSH
18807: LD_INT 0
18809: ST_TO_ADDR
// for i := 1 to 16 do
18810: LD_ADDR_VAR 0 2
18814: PUSH
18815: DOUBLE
18816: LD_INT 1
18818: DEC
18819: ST_TO_ADDR
18820: LD_INT 16
18822: PUSH
18823: FOR_TO
18824: IFFALSE 19023
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18826: LD_ADDR_VAR 0 3
18830: PUSH
18831: LD_INT 10
18833: PUSH
18834: LD_INT 20
18836: PUSH
18837: LD_INT 30
18839: PUSH
18840: LD_INT 40
18842: PUSH
18843: LD_INT 50
18845: PUSH
18846: LD_INT 60
18848: PUSH
18849: LD_INT 70
18851: PUSH
18852: LD_INT 80
18854: PUSH
18855: LD_INT 90
18857: PUSH
18858: LD_INT 100
18860: PUSH
18861: LD_INT 110
18863: PUSH
18864: LD_INT 120
18866: PUSH
18867: LD_INT 130
18869: PUSH
18870: LD_INT 140
18872: PUSH
18873: LD_INT 150
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 1
18895: PPUSH
18896: LD_INT 15
18898: PPUSH
18899: CALL_OW 12
18903: ARRAY
18904: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18905: LD_ADDR_VAR 0 4
18909: PUSH
18910: LD_INT 10
18912: PUSH
18913: LD_INT 20
18915: PUSH
18916: LD_INT 30
18918: PUSH
18919: LD_INT 40
18921: PUSH
18922: LD_INT 50
18924: PUSH
18925: LD_INT 60
18927: PUSH
18928: LD_INT 70
18930: PUSH
18931: LD_INT 80
18933: PUSH
18934: LD_INT 90
18936: PUSH
18937: LD_INT 100
18939: PUSH
18940: LD_INT 110
18942: PUSH
18943: LD_INT 120
18945: PUSH
18946: LD_INT 130
18948: PUSH
18949: LD_INT 140
18951: PUSH
18952: LD_INT 150
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: PPUSH
18975: LD_INT 15
18977: PPUSH
18978: CALL_OW 12
18982: ARRAY
18983: ST_TO_ADDR
// if ValidHex ( x , y ) then
18984: LD_VAR 0 3
18988: PPUSH
18989: LD_VAR 0 4
18993: PPUSH
18994: CALL_OW 488
18998: IFFALSE 19021
// begin result := [ x , y ] ;
19000: LD_ADDR_VAR 0 1
19004: PUSH
19005: LD_VAR 0 3
19009: PUSH
19010: LD_VAR 0 4
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: ST_TO_ADDR
// break ;
19019: GO 19023
// end ; end ;
19021: GO 18823
19023: POP
19024: POP
// if result then
19025: LD_VAR 0 1
19029: IFFALSE 19089
// begin ToLua ( playSibBomb() ) ;
19031: LD_STRING playSibBomb()
19033: PPUSH
19034: CALL_OW 559
// wait ( 0 0$14 ) ;
19038: LD_INT 490
19040: PPUSH
19041: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19045: LD_VAR 0 1
19049: PUSH
19050: LD_INT 1
19052: ARRAY
19053: PPUSH
19054: LD_VAR 0 1
19058: PUSH
19059: LD_INT 2
19061: ARRAY
19062: PPUSH
19063: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19067: LD_VAR 0 1
19071: PUSH
19072: LD_INT 1
19074: ARRAY
19075: PPUSH
19076: LD_VAR 0 1
19080: PUSH
19081: LD_INT 2
19083: ARRAY
19084: PPUSH
19085: CALL_OW 429
// end ; end ;
19089: LD_VAR 0 1
19093: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19094: LD_EXP 33
19098: PUSH
19099: LD_EXP 55
19103: AND
19104: IFFALSE 19116
19106: GO 19108
19108: DISABLE
// YouLost (  ) ;
19109: LD_STRING 
19111: PPUSH
19112: CALL_OW 104
19116: END
// every 0 0$1 trigger StreamModeActive and sFog do
19117: LD_EXP 33
19121: PUSH
19122: LD_EXP 54
19126: AND
19127: IFFALSE 19141
19129: GO 19131
19131: DISABLE
// FogOff ( your_side ) ;
19132: LD_OWVAR 2
19136: PPUSH
19137: CALL_OW 344
19141: END
// every 0 0$1 trigger StreamModeActive and sSun do
19142: LD_EXP 33
19146: PUSH
19147: LD_EXP 56
19151: AND
19152: IFFALSE 19180
19154: GO 19156
19156: DISABLE
// begin solar_recharge_percent := 0 ;
19157: LD_ADDR_OWVAR 79
19161: PUSH
19162: LD_INT 0
19164: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19165: LD_INT 10500
19167: PPUSH
19168: CALL_OW 67
// solar_recharge_percent := 100 ;
19172: LD_ADDR_OWVAR 79
19176: PUSH
19177: LD_INT 100
19179: ST_TO_ADDR
// end ;
19180: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19181: LD_EXP 33
19185: PUSH
19186: LD_EXP 57
19190: AND
19191: IFFALSE 19430
19193: GO 19195
19195: DISABLE
19196: LD_INT 0
19198: PPUSH
19199: PPUSH
19200: PPUSH
// begin tmp := [ ] ;
19201: LD_ADDR_VAR 0 3
19205: PUSH
19206: EMPTY
19207: ST_TO_ADDR
// for i := 1 to 6 do
19208: LD_ADDR_VAR 0 1
19212: PUSH
19213: DOUBLE
19214: LD_INT 1
19216: DEC
19217: ST_TO_ADDR
19218: LD_INT 6
19220: PUSH
19221: FOR_TO
19222: IFFALSE 19327
// begin uc_nation := nation_nature ;
19224: LD_ADDR_OWVAR 21
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// uc_side := 0 ;
19232: LD_ADDR_OWVAR 20
19236: PUSH
19237: LD_INT 0
19239: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19240: LD_ADDR_OWVAR 29
19244: PUSH
19245: LD_INT 12
19247: PUSH
19248: LD_INT 12
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: ST_TO_ADDR
// hc_agressivity := 20 ;
19255: LD_ADDR_OWVAR 35
19259: PUSH
19260: LD_INT 20
19262: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19263: LD_ADDR_OWVAR 28
19267: PUSH
19268: LD_INT 17
19270: ST_TO_ADDR
// hc_gallery :=  ;
19271: LD_ADDR_OWVAR 33
19275: PUSH
19276: LD_STRING 
19278: ST_TO_ADDR
// hc_name :=  ;
19279: LD_ADDR_OWVAR 26
19283: PUSH
19284: LD_STRING 
19286: ST_TO_ADDR
// un := CreateHuman ;
19287: LD_ADDR_VAR 0 2
19291: PUSH
19292: CALL_OW 44
19296: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19297: LD_VAR 0 2
19301: PPUSH
19302: LD_INT 1
19304: PPUSH
19305: CALL_OW 51
// tmp := tmp ^ un ;
19309: LD_ADDR_VAR 0 3
19313: PUSH
19314: LD_VAR 0 3
19318: PUSH
19319: LD_VAR 0 2
19323: ADD
19324: ST_TO_ADDR
// end ;
19325: GO 19221
19327: POP
19328: POP
// repeat wait ( 0 0$1 ) ;
19329: LD_INT 35
19331: PPUSH
19332: CALL_OW 67
// for un in tmp do
19336: LD_ADDR_VAR 0 2
19340: PUSH
19341: LD_VAR 0 3
19345: PUSH
19346: FOR_IN
19347: IFFALSE 19421
// begin if IsDead ( un ) then
19349: LD_VAR 0 2
19353: PPUSH
19354: CALL_OW 301
19358: IFFALSE 19378
// begin tmp := tmp diff un ;
19360: LD_ADDR_VAR 0 3
19364: PUSH
19365: LD_VAR 0 3
19369: PUSH
19370: LD_VAR 0 2
19374: DIFF
19375: ST_TO_ADDR
// continue ;
19376: GO 19346
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19378: LD_VAR 0 2
19382: PPUSH
19383: LD_INT 3
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_INT 0
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PPUSH
19400: CALL_OW 69
19404: PPUSH
19405: LD_VAR 0 2
19409: PPUSH
19410: CALL_OW 74
19414: PPUSH
19415: CALL_OW 115
// end ;
19419: GO 19346
19421: POP
19422: POP
// until not tmp ;
19423: LD_VAR 0 3
19427: NOT
19428: IFFALSE 19329
// end ;
19430: PPOPN 3
19432: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19433: LD_EXP 33
19437: PUSH
19438: LD_EXP 58
19442: AND
19443: IFFALSE 19497
19445: GO 19447
19447: DISABLE
// begin ToLua ( displayTroll(); ) ;
19448: LD_STRING displayTroll();
19450: PPUSH
19451: CALL_OW 559
// wait ( 3 3$00 ) ;
19455: LD_INT 6300
19457: PPUSH
19458: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19462: LD_STRING hideTroll();
19464: PPUSH
19465: CALL_OW 559
// wait ( 1 1$00 ) ;
19469: LD_INT 2100
19471: PPUSH
19472: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19476: LD_STRING displayTroll();
19478: PPUSH
19479: CALL_OW 559
// wait ( 1 1$00 ) ;
19483: LD_INT 2100
19485: PPUSH
19486: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19490: LD_STRING hideTroll();
19492: PPUSH
19493: CALL_OW 559
// end ;
19497: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19498: LD_EXP 33
19502: PUSH
19503: LD_EXP 59
19507: AND
19508: IFFALSE 19571
19510: GO 19512
19512: DISABLE
19513: LD_INT 0
19515: PPUSH
// begin p := 0 ;
19516: LD_ADDR_VAR 0 1
19520: PUSH
19521: LD_INT 0
19523: ST_TO_ADDR
// repeat game_speed := 1 ;
19524: LD_ADDR_OWVAR 65
19528: PUSH
19529: LD_INT 1
19531: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19532: LD_INT 35
19534: PPUSH
19535: CALL_OW 67
// p := p + 1 ;
19539: LD_ADDR_VAR 0 1
19543: PUSH
19544: LD_VAR 0 1
19548: PUSH
19549: LD_INT 1
19551: PLUS
19552: ST_TO_ADDR
// until p >= 60 ;
19553: LD_VAR 0 1
19557: PUSH
19558: LD_INT 60
19560: GREATEREQUAL
19561: IFFALSE 19524
// game_speed := 4 ;
19563: LD_ADDR_OWVAR 65
19567: PUSH
19568: LD_INT 4
19570: ST_TO_ADDR
// end ;
19571: PPOPN 1
19573: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19574: LD_EXP 33
19578: PUSH
19579: LD_EXP 60
19583: AND
19584: IFFALSE 19730
19586: GO 19588
19588: DISABLE
19589: LD_INT 0
19591: PPUSH
19592: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19593: LD_ADDR_VAR 0 1
19597: PUSH
19598: LD_INT 22
19600: PUSH
19601: LD_OWVAR 2
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: LD_INT 30
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 30
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PPUSH
19642: CALL_OW 69
19646: ST_TO_ADDR
// if not depot then
19647: LD_VAR 0 1
19651: NOT
19652: IFFALSE 19656
// exit ;
19654: GO 19730
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19656: LD_ADDR_VAR 0 2
19660: PUSH
19661: LD_VAR 0 1
19665: PUSH
19666: LD_INT 1
19668: PPUSH
19669: LD_VAR 0 1
19673: PPUSH
19674: CALL_OW 12
19678: ARRAY
19679: PPUSH
19680: CALL_OW 274
19684: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19685: LD_VAR 0 2
19689: PPUSH
19690: LD_INT 1
19692: PPUSH
19693: LD_INT 0
19695: PPUSH
19696: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19700: LD_VAR 0 2
19704: PPUSH
19705: LD_INT 2
19707: PPUSH
19708: LD_INT 0
19710: PPUSH
19711: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19715: LD_VAR 0 2
19719: PPUSH
19720: LD_INT 3
19722: PPUSH
19723: LD_INT 0
19725: PPUSH
19726: CALL_OW 277
// end ;
19730: PPOPN 2
19732: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19733: LD_EXP 33
19737: PUSH
19738: LD_EXP 61
19742: AND
19743: IFFALSE 19840
19745: GO 19747
19747: DISABLE
19748: LD_INT 0
19750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19751: LD_ADDR_VAR 0 1
19755: PUSH
19756: LD_INT 22
19758: PUSH
19759: LD_OWVAR 2
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 21
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 3
19780: PUSH
19781: LD_INT 23
19783: PUSH
19784: LD_INT 0
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: PPUSH
19800: CALL_OW 69
19804: ST_TO_ADDR
// if not tmp then
19805: LD_VAR 0 1
19809: NOT
19810: IFFALSE 19814
// exit ;
19812: GO 19840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19814: LD_VAR 0 1
19818: PUSH
19819: LD_INT 1
19821: PPUSH
19822: LD_VAR 0 1
19826: PPUSH
19827: CALL_OW 12
19831: ARRAY
19832: PPUSH
19833: LD_INT 200
19835: PPUSH
19836: CALL_OW 234
// end ;
19840: PPOPN 1
19842: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19843: LD_EXP 33
19847: PUSH
19848: LD_EXP 62
19852: AND
19853: IFFALSE 19932
19855: GO 19857
19857: DISABLE
19858: LD_INT 0
19860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19861: LD_ADDR_VAR 0 1
19865: PUSH
19866: LD_INT 22
19868: PUSH
19869: LD_OWVAR 2
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 21
19880: PUSH
19881: LD_INT 2
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PPUSH
19892: CALL_OW 69
19896: ST_TO_ADDR
// if not tmp then
19897: LD_VAR 0 1
19901: NOT
19902: IFFALSE 19906
// exit ;
19904: GO 19932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19906: LD_VAR 0 1
19910: PUSH
19911: LD_INT 1
19913: PPUSH
19914: LD_VAR 0 1
19918: PPUSH
19919: CALL_OW 12
19923: ARRAY
19924: PPUSH
19925: LD_INT 60
19927: PPUSH
19928: CALL_OW 234
// end ;
19932: PPOPN 1
19934: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19935: LD_EXP 33
19939: PUSH
19940: LD_EXP 63
19944: AND
19945: IFFALSE 20044
19947: GO 19949
19949: DISABLE
19950: LD_INT 0
19952: PPUSH
19953: PPUSH
// begin enable ;
19954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19955: LD_ADDR_VAR 0 1
19959: PUSH
19960: LD_INT 22
19962: PUSH
19963: LD_OWVAR 2
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 61
19974: PUSH
19975: EMPTY
19976: LIST
19977: PUSH
19978: LD_INT 33
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: PPUSH
19993: CALL_OW 69
19997: ST_TO_ADDR
// if not tmp then
19998: LD_VAR 0 1
20002: NOT
20003: IFFALSE 20007
// exit ;
20005: GO 20044
// for i in tmp do
20007: LD_ADDR_VAR 0 2
20011: PUSH
20012: LD_VAR 0 1
20016: PUSH
20017: FOR_IN
20018: IFFALSE 20042
// if IsControledBy ( i ) then
20020: LD_VAR 0 2
20024: PPUSH
20025: CALL_OW 312
20029: IFFALSE 20040
// ComUnlink ( i ) ;
20031: LD_VAR 0 2
20035: PPUSH
20036: CALL_OW 136
20040: GO 20017
20042: POP
20043: POP
// end ;
20044: PPOPN 2
20046: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20047: LD_EXP 33
20051: PUSH
20052: LD_EXP 64
20056: AND
20057: IFFALSE 20197
20059: GO 20061
20061: DISABLE
20062: LD_INT 0
20064: PPUSH
20065: PPUSH
// begin ToLua ( displayPowell(); ) ;
20066: LD_STRING displayPowell();
20068: PPUSH
20069: CALL_OW 559
// uc_side := 0 ;
20073: LD_ADDR_OWVAR 20
20077: PUSH
20078: LD_INT 0
20080: ST_TO_ADDR
// uc_nation := 2 ;
20081: LD_ADDR_OWVAR 21
20085: PUSH
20086: LD_INT 2
20088: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20089: LD_ADDR_OWVAR 37
20093: PUSH
20094: LD_INT 14
20096: ST_TO_ADDR
// vc_engine := engine_siberite ;
20097: LD_ADDR_OWVAR 39
20101: PUSH
20102: LD_INT 3
20104: ST_TO_ADDR
// vc_control := control_apeman ;
20105: LD_ADDR_OWVAR 38
20109: PUSH
20110: LD_INT 5
20112: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20113: LD_ADDR_OWVAR 40
20117: PUSH
20118: LD_INT 29
20120: ST_TO_ADDR
// un := CreateVehicle ;
20121: LD_ADDR_VAR 0 2
20125: PUSH
20126: CALL_OW 45
20130: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20131: LD_VAR 0 2
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20143: LD_INT 35
20145: PPUSH
20146: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20150: LD_VAR 0 2
20154: PPUSH
20155: LD_INT 22
20157: PUSH
20158: LD_OWVAR 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PPUSH
20167: CALL_OW 69
20171: PPUSH
20172: LD_VAR 0 2
20176: PPUSH
20177: CALL_OW 74
20181: PPUSH
20182: CALL_OW 115
// until IsDead ( un ) ;
20186: LD_VAR 0 2
20190: PPUSH
20191: CALL_OW 301
20195: IFFALSE 20143
// end ;
20197: PPOPN 2
20199: END
// every 0 0$1 trigger StreamModeActive and sStu do
20200: LD_EXP 33
20204: PUSH
20205: LD_EXP 72
20209: AND
20210: IFFALSE 20226
20212: GO 20214
20214: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20215: LD_STRING displayStucuk();
20217: PPUSH
20218: CALL_OW 559
// ResetFog ;
20222: CALL_OW 335
// end ;
20226: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20227: LD_EXP 33
20231: PUSH
20232: LD_EXP 65
20236: AND
20237: IFFALSE 20378
20239: GO 20241
20241: DISABLE
20242: LD_INT 0
20244: PPUSH
20245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20246: LD_ADDR_VAR 0 2
20250: PUSH
20251: LD_INT 22
20253: PUSH
20254: LD_OWVAR 2
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 21
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PPUSH
20277: CALL_OW 69
20281: ST_TO_ADDR
// if not tmp then
20282: LD_VAR 0 2
20286: NOT
20287: IFFALSE 20291
// exit ;
20289: GO 20378
// un := tmp [ rand ( 1 , tmp ) ] ;
20291: LD_ADDR_VAR 0 1
20295: PUSH
20296: LD_VAR 0 2
20300: PUSH
20301: LD_INT 1
20303: PPUSH
20304: LD_VAR 0 2
20308: PPUSH
20309: CALL_OW 12
20313: ARRAY
20314: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20315: LD_VAR 0 1
20319: PPUSH
20320: LD_INT 0
20322: PPUSH
20323: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20327: LD_VAR 0 1
20331: PPUSH
20332: LD_OWVAR 3
20336: PUSH
20337: LD_VAR 0 1
20341: DIFF
20342: PPUSH
20343: LD_VAR 0 1
20347: PPUSH
20348: CALL_OW 74
20352: PPUSH
20353: CALL_OW 115
// wait ( 0 0$20 ) ;
20357: LD_INT 700
20359: PPUSH
20360: CALL_OW 67
// SetSide ( un , your_side ) ;
20364: LD_VAR 0 1
20368: PPUSH
20369: LD_OWVAR 2
20373: PPUSH
20374: CALL_OW 235
// end ;
20378: PPOPN 2
20380: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20381: LD_EXP 33
20385: PUSH
20386: LD_EXP 66
20390: AND
20391: IFFALSE 20497
20393: GO 20395
20395: DISABLE
20396: LD_INT 0
20398: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20399: LD_ADDR_VAR 0 1
20403: PUSH
20404: LD_INT 22
20406: PUSH
20407: LD_OWVAR 2
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: LD_INT 30
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 30
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: LIST
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PPUSH
20448: CALL_OW 69
20452: ST_TO_ADDR
// if not depot then
20453: LD_VAR 0 1
20457: NOT
20458: IFFALSE 20462
// exit ;
20460: GO 20497
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20462: LD_VAR 0 1
20466: PUSH
20467: LD_INT 1
20469: ARRAY
20470: PPUSH
20471: CALL_OW 250
20475: PPUSH
20476: LD_VAR 0 1
20480: PUSH
20481: LD_INT 1
20483: ARRAY
20484: PPUSH
20485: CALL_OW 251
20489: PPUSH
20490: LD_INT 70
20492: PPUSH
20493: CALL_OW 495
// end ;
20497: PPOPN 1
20499: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20500: LD_EXP 33
20504: PUSH
20505: LD_EXP 67
20509: AND
20510: IFFALSE 20721
20512: GO 20514
20514: DISABLE
20515: LD_INT 0
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20522: LD_ADDR_VAR 0 5
20526: PUSH
20527: LD_INT 22
20529: PUSH
20530: LD_OWVAR 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 21
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PPUSH
20553: CALL_OW 69
20557: ST_TO_ADDR
// if not tmp then
20558: LD_VAR 0 5
20562: NOT
20563: IFFALSE 20567
// exit ;
20565: GO 20721
// for i in tmp do
20567: LD_ADDR_VAR 0 1
20571: PUSH
20572: LD_VAR 0 5
20576: PUSH
20577: FOR_IN
20578: IFFALSE 20719
// begin d := rand ( 0 , 5 ) ;
20580: LD_ADDR_VAR 0 4
20584: PUSH
20585: LD_INT 0
20587: PPUSH
20588: LD_INT 5
20590: PPUSH
20591: CALL_OW 12
20595: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20596: LD_ADDR_VAR 0 2
20600: PUSH
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 250
20610: PPUSH
20611: LD_VAR 0 4
20615: PPUSH
20616: LD_INT 3
20618: PPUSH
20619: LD_INT 12
20621: PPUSH
20622: CALL_OW 12
20626: PPUSH
20627: CALL_OW 272
20631: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20632: LD_ADDR_VAR 0 3
20636: PUSH
20637: LD_VAR 0 1
20641: PPUSH
20642: CALL_OW 251
20646: PPUSH
20647: LD_VAR 0 4
20651: PPUSH
20652: LD_INT 3
20654: PPUSH
20655: LD_INT 12
20657: PPUSH
20658: CALL_OW 12
20662: PPUSH
20663: CALL_OW 273
20667: ST_TO_ADDR
// if ValidHex ( x , y ) then
20668: LD_VAR 0 2
20672: PPUSH
20673: LD_VAR 0 3
20677: PPUSH
20678: CALL_OW 488
20682: IFFALSE 20717
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20684: LD_VAR 0 1
20688: PPUSH
20689: LD_VAR 0 2
20693: PPUSH
20694: LD_VAR 0 3
20698: PPUSH
20699: LD_INT 3
20701: PPUSH
20702: LD_INT 6
20704: PPUSH
20705: CALL_OW 12
20709: PPUSH
20710: LD_INT 1
20712: PPUSH
20713: CALL_OW 483
// end ;
20717: GO 20577
20719: POP
20720: POP
// end ;
20721: PPOPN 5
20723: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20724: LD_EXP 33
20728: PUSH
20729: LD_EXP 68
20733: AND
20734: IFFALSE 20828
20736: GO 20738
20738: DISABLE
20739: LD_INT 0
20741: PPUSH
20742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20743: LD_ADDR_VAR 0 2
20747: PUSH
20748: LD_INT 22
20750: PUSH
20751: LD_OWVAR 2
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 32
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 21
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: LIST
20784: PPUSH
20785: CALL_OW 69
20789: ST_TO_ADDR
// if not tmp then
20790: LD_VAR 0 2
20794: NOT
20795: IFFALSE 20799
// exit ;
20797: GO 20828
// for i in tmp do
20799: LD_ADDR_VAR 0 1
20803: PUSH
20804: LD_VAR 0 2
20808: PUSH
20809: FOR_IN
20810: IFFALSE 20826
// SetFuel ( i , 0 ) ;
20812: LD_VAR 0 1
20816: PPUSH
20817: LD_INT 0
20819: PPUSH
20820: CALL_OW 240
20824: GO 20809
20826: POP
20827: POP
// end ;
20828: PPOPN 2
20830: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20831: LD_EXP 33
20835: PUSH
20836: LD_EXP 69
20840: AND
20841: IFFALSE 20907
20843: GO 20845
20845: DISABLE
20846: LD_INT 0
20848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20849: LD_ADDR_VAR 0 1
20853: PUSH
20854: LD_INT 22
20856: PUSH
20857: LD_OWVAR 2
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 30
20868: PUSH
20869: LD_INT 29
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PPUSH
20880: CALL_OW 69
20884: ST_TO_ADDR
// if not tmp then
20885: LD_VAR 0 1
20889: NOT
20890: IFFALSE 20894
// exit ;
20892: GO 20907
// DestroyUnit ( tmp [ 1 ] ) ;
20894: LD_VAR 0 1
20898: PUSH
20899: LD_INT 1
20901: ARRAY
20902: PPUSH
20903: CALL_OW 65
// end ;
20907: PPOPN 1
20909: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20910: LD_EXP 33
20914: PUSH
20915: LD_EXP 71
20919: AND
20920: IFFALSE 21049
20922: GO 20924
20924: DISABLE
20925: LD_INT 0
20927: PPUSH
// begin uc_side := 0 ;
20928: LD_ADDR_OWVAR 20
20932: PUSH
20933: LD_INT 0
20935: ST_TO_ADDR
// uc_nation := nation_arabian ;
20936: LD_ADDR_OWVAR 21
20940: PUSH
20941: LD_INT 2
20943: ST_TO_ADDR
// hc_gallery :=  ;
20944: LD_ADDR_OWVAR 33
20948: PUSH
20949: LD_STRING 
20951: ST_TO_ADDR
// hc_name :=  ;
20952: LD_ADDR_OWVAR 26
20956: PUSH
20957: LD_STRING 
20959: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20960: LD_INT 1
20962: PPUSH
20963: LD_INT 11
20965: PPUSH
20966: LD_INT 10
20968: PPUSH
20969: CALL_OW 380
// un := CreateHuman ;
20973: LD_ADDR_VAR 0 1
20977: PUSH
20978: CALL_OW 44
20982: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20983: LD_VAR 0 1
20987: PPUSH
20988: LD_INT 1
20990: PPUSH
20991: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20995: LD_INT 35
20997: PPUSH
20998: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21002: LD_VAR 0 1
21006: PPUSH
21007: LD_INT 22
21009: PUSH
21010: LD_OWVAR 2
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PPUSH
21019: CALL_OW 69
21023: PPUSH
21024: LD_VAR 0 1
21028: PPUSH
21029: CALL_OW 74
21033: PPUSH
21034: CALL_OW 115
// until IsDead ( un ) ;
21038: LD_VAR 0 1
21042: PPUSH
21043: CALL_OW 301
21047: IFFALSE 20995
// end ;
21049: PPOPN 1
21051: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21052: LD_EXP 33
21056: PUSH
21057: LD_EXP 73
21061: AND
21062: IFFALSE 21074
21064: GO 21066
21066: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21067: LD_STRING earthquake(getX(game), 0, 32)
21069: PPUSH
21070: CALL_OW 559
21074: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21075: LD_EXP 33
21079: PUSH
21080: LD_EXP 74
21084: AND
21085: IFFALSE 21176
21087: GO 21089
21089: DISABLE
21090: LD_INT 0
21092: PPUSH
// begin enable ;
21093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21094: LD_ADDR_VAR 0 1
21098: PUSH
21099: LD_INT 22
21101: PUSH
21102: LD_OWVAR 2
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 21
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 33
21123: PUSH
21124: LD_INT 3
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: PPUSH
21136: CALL_OW 69
21140: ST_TO_ADDR
// if not tmp then
21141: LD_VAR 0 1
21145: NOT
21146: IFFALSE 21150
// exit ;
21148: GO 21176
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21150: LD_VAR 0 1
21154: PUSH
21155: LD_INT 1
21157: PPUSH
21158: LD_VAR 0 1
21162: PPUSH
21163: CALL_OW 12
21167: ARRAY
21168: PPUSH
21169: LD_INT 1
21171: PPUSH
21172: CALL_OW 234
// end ;
21176: PPOPN 1
21178: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21179: LD_EXP 33
21183: PUSH
21184: LD_EXP 75
21188: AND
21189: IFFALSE 21330
21191: GO 21193
21193: DISABLE
21194: LD_INT 0
21196: PPUSH
21197: PPUSH
21198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21199: LD_ADDR_VAR 0 3
21203: PUSH
21204: LD_INT 22
21206: PUSH
21207: LD_OWVAR 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 25
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PPUSH
21230: CALL_OW 69
21234: ST_TO_ADDR
// if not tmp then
21235: LD_VAR 0 3
21239: NOT
21240: IFFALSE 21244
// exit ;
21242: GO 21330
// un := tmp [ rand ( 1 , tmp ) ] ;
21244: LD_ADDR_VAR 0 2
21248: PUSH
21249: LD_VAR 0 3
21253: PUSH
21254: LD_INT 1
21256: PPUSH
21257: LD_VAR 0 3
21261: PPUSH
21262: CALL_OW 12
21266: ARRAY
21267: ST_TO_ADDR
// if Crawls ( un ) then
21268: LD_VAR 0 2
21272: PPUSH
21273: CALL_OW 318
21277: IFFALSE 21288
// ComWalk ( un ) ;
21279: LD_VAR 0 2
21283: PPUSH
21284: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21288: LD_VAR 0 2
21292: PPUSH
21293: LD_INT 9
21295: PPUSH
21296: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21300: LD_INT 28
21302: PPUSH
21303: LD_OWVAR 2
21307: PPUSH
21308: LD_INT 2
21310: PPUSH
21311: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21315: LD_INT 29
21317: PPUSH
21318: LD_OWVAR 2
21322: PPUSH
21323: LD_INT 2
21325: PPUSH
21326: CALL_OW 322
// end ;
21330: PPOPN 3
21332: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21333: LD_EXP 33
21337: PUSH
21338: LD_EXP 76
21342: AND
21343: IFFALSE 21454
21345: GO 21347
21347: DISABLE
21348: LD_INT 0
21350: PPUSH
21351: PPUSH
21352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21353: LD_ADDR_VAR 0 3
21357: PUSH
21358: LD_INT 22
21360: PUSH
21361: LD_OWVAR 2
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 25
21372: PUSH
21373: LD_INT 1
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PPUSH
21384: CALL_OW 69
21388: ST_TO_ADDR
// if not tmp then
21389: LD_VAR 0 3
21393: NOT
21394: IFFALSE 21398
// exit ;
21396: GO 21454
// un := tmp [ rand ( 1 , tmp ) ] ;
21398: LD_ADDR_VAR 0 2
21402: PUSH
21403: LD_VAR 0 3
21407: PUSH
21408: LD_INT 1
21410: PPUSH
21411: LD_VAR 0 3
21415: PPUSH
21416: CALL_OW 12
21420: ARRAY
21421: ST_TO_ADDR
// if Crawls ( un ) then
21422: LD_VAR 0 2
21426: PPUSH
21427: CALL_OW 318
21431: IFFALSE 21442
// ComWalk ( un ) ;
21433: LD_VAR 0 2
21437: PPUSH
21438: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21442: LD_VAR 0 2
21446: PPUSH
21447: LD_INT 8
21449: PPUSH
21450: CALL_OW 336
// end ;
21454: PPOPN 3
21456: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21457: LD_EXP 33
21461: PUSH
21462: LD_EXP 77
21466: AND
21467: IFFALSE 21611
21469: GO 21471
21471: DISABLE
21472: LD_INT 0
21474: PPUSH
21475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21476: LD_ADDR_VAR 0 2
21480: PUSH
21481: LD_INT 22
21483: PUSH
21484: LD_OWVAR 2
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 21
21495: PUSH
21496: LD_INT 2
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 2
21505: PUSH
21506: LD_INT 34
21508: PUSH
21509: LD_INT 12
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 34
21518: PUSH
21519: LD_INT 51
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 34
21528: PUSH
21529: LD_INT 32
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: PPUSH
21547: CALL_OW 69
21551: ST_TO_ADDR
// if not tmp then
21552: LD_VAR 0 2
21556: NOT
21557: IFFALSE 21561
// exit ;
21559: GO 21611
// for i in tmp do
21561: LD_ADDR_VAR 0 1
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: FOR_IN
21572: IFFALSE 21609
// if GetCargo ( i , mat_artifact ) = 0 then
21574: LD_VAR 0 1
21578: PPUSH
21579: LD_INT 4
21581: PPUSH
21582: CALL_OW 289
21586: PUSH
21587: LD_INT 0
21589: EQUAL
21590: IFFALSE 21607
// SetCargo ( i , mat_siberit , 100 ) ;
21592: LD_VAR 0 1
21596: PPUSH
21597: LD_INT 3
21599: PPUSH
21600: LD_INT 100
21602: PPUSH
21603: CALL_OW 290
21607: GO 21571
21609: POP
21610: POP
// end ;
21611: PPOPN 2
21613: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21614: LD_EXP 33
21618: PUSH
21619: LD_EXP 78
21623: AND
21624: IFFALSE 21807
21626: GO 21628
21628: DISABLE
21629: LD_INT 0
21631: PPUSH
21632: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21633: LD_ADDR_VAR 0 2
21637: PUSH
21638: LD_INT 22
21640: PUSH
21641: LD_OWVAR 2
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PPUSH
21650: CALL_OW 69
21654: ST_TO_ADDR
// if not tmp then
21655: LD_VAR 0 2
21659: NOT
21660: IFFALSE 21664
// exit ;
21662: GO 21807
// for i := 1 to 2 do
21664: LD_ADDR_VAR 0 1
21668: PUSH
21669: DOUBLE
21670: LD_INT 1
21672: DEC
21673: ST_TO_ADDR
21674: LD_INT 2
21676: PUSH
21677: FOR_TO
21678: IFFALSE 21805
// begin uc_side := your_side ;
21680: LD_ADDR_OWVAR 20
21684: PUSH
21685: LD_OWVAR 2
21689: ST_TO_ADDR
// uc_nation := nation_american ;
21690: LD_ADDR_OWVAR 21
21694: PUSH
21695: LD_INT 1
21697: ST_TO_ADDR
// vc_chassis := us_morphling ;
21698: LD_ADDR_OWVAR 37
21702: PUSH
21703: LD_INT 5
21705: ST_TO_ADDR
// vc_engine := engine_siberite ;
21706: LD_ADDR_OWVAR 39
21710: PUSH
21711: LD_INT 3
21713: ST_TO_ADDR
// vc_control := control_computer ;
21714: LD_ADDR_OWVAR 38
21718: PUSH
21719: LD_INT 3
21721: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21722: LD_ADDR_OWVAR 40
21726: PUSH
21727: LD_INT 10
21729: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21730: LD_VAR 0 2
21734: PUSH
21735: LD_INT 1
21737: ARRAY
21738: PPUSH
21739: CALL_OW 310
21743: NOT
21744: IFFALSE 21791
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21746: CALL_OW 45
21750: PPUSH
21751: LD_VAR 0 2
21755: PUSH
21756: LD_INT 1
21758: ARRAY
21759: PPUSH
21760: CALL_OW 250
21764: PPUSH
21765: LD_VAR 0 2
21769: PUSH
21770: LD_INT 1
21772: ARRAY
21773: PPUSH
21774: CALL_OW 251
21778: PPUSH
21779: LD_INT 12
21781: PPUSH
21782: LD_INT 1
21784: PPUSH
21785: CALL_OW 50
21789: GO 21803
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21791: CALL_OW 45
21795: PPUSH
21796: LD_INT 1
21798: PPUSH
21799: CALL_OW 51
// end ;
21803: GO 21677
21805: POP
21806: POP
// end ;
21807: PPOPN 2
21809: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21810: LD_EXP 33
21814: PUSH
21815: LD_EXP 79
21819: AND
21820: IFFALSE 22042
21822: GO 21824
21824: DISABLE
21825: LD_INT 0
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21833: LD_ADDR_VAR 0 6
21837: PUSH
21838: LD_INT 22
21840: PUSH
21841: LD_OWVAR 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 21
21852: PUSH
21853: LD_INT 1
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 3
21862: PUSH
21863: LD_INT 23
21865: PUSH
21866: LD_INT 0
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: PPUSH
21882: CALL_OW 69
21886: ST_TO_ADDR
// if not tmp then
21887: LD_VAR 0 6
21891: NOT
21892: IFFALSE 21896
// exit ;
21894: GO 22042
// s1 := rand ( 1 , 4 ) ;
21896: LD_ADDR_VAR 0 2
21900: PUSH
21901: LD_INT 1
21903: PPUSH
21904: LD_INT 4
21906: PPUSH
21907: CALL_OW 12
21911: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21912: LD_ADDR_VAR 0 4
21916: PUSH
21917: LD_VAR 0 6
21921: PUSH
21922: LD_INT 1
21924: ARRAY
21925: PPUSH
21926: LD_VAR 0 2
21930: PPUSH
21931: CALL_OW 259
21935: ST_TO_ADDR
// if s1 = 1 then
21936: LD_VAR 0 2
21940: PUSH
21941: LD_INT 1
21943: EQUAL
21944: IFFALSE 21964
// s2 := rand ( 2 , 4 ) else
21946: LD_ADDR_VAR 0 3
21950: PUSH
21951: LD_INT 2
21953: PPUSH
21954: LD_INT 4
21956: PPUSH
21957: CALL_OW 12
21961: ST_TO_ADDR
21962: GO 21972
// s2 := 1 ;
21964: LD_ADDR_VAR 0 3
21968: PUSH
21969: LD_INT 1
21971: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21972: LD_ADDR_VAR 0 5
21976: PUSH
21977: LD_VAR 0 6
21981: PUSH
21982: LD_INT 1
21984: ARRAY
21985: PPUSH
21986: LD_VAR 0 3
21990: PPUSH
21991: CALL_OW 259
21995: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21996: LD_VAR 0 6
22000: PUSH
22001: LD_INT 1
22003: ARRAY
22004: PPUSH
22005: LD_VAR 0 2
22009: PPUSH
22010: LD_VAR 0 5
22014: PPUSH
22015: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22019: LD_VAR 0 6
22023: PUSH
22024: LD_INT 1
22026: ARRAY
22027: PPUSH
22028: LD_VAR 0 3
22032: PPUSH
22033: LD_VAR 0 4
22037: PPUSH
22038: CALL_OW 237
// end ;
22042: PPOPN 6
22044: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22045: LD_EXP 33
22049: PUSH
22050: LD_EXP 80
22054: AND
22055: IFFALSE 22134
22057: GO 22059
22059: DISABLE
22060: LD_INT 0
22062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22063: LD_ADDR_VAR 0 1
22067: PUSH
22068: LD_INT 22
22070: PUSH
22071: LD_OWVAR 2
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 30
22082: PUSH
22083: LD_INT 3
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PPUSH
22094: CALL_OW 69
22098: ST_TO_ADDR
// if not tmp then
22099: LD_VAR 0 1
22103: NOT
22104: IFFALSE 22108
// exit ;
22106: GO 22134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22108: LD_VAR 0 1
22112: PUSH
22113: LD_INT 1
22115: PPUSH
22116: LD_VAR 0 1
22120: PPUSH
22121: CALL_OW 12
22125: ARRAY
22126: PPUSH
22127: LD_INT 1
22129: PPUSH
22130: CALL_OW 234
// end ;
22134: PPOPN 1
22136: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22137: LD_EXP 33
22141: PUSH
22142: LD_EXP 81
22146: AND
22147: IFFALSE 22259
22149: GO 22151
22151: DISABLE
22152: LD_INT 0
22154: PPUSH
22155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22156: LD_ADDR_VAR 0 2
22160: PUSH
22161: LD_INT 22
22163: PUSH
22164: LD_OWVAR 2
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 2
22175: PUSH
22176: LD_INT 30
22178: PUSH
22179: LD_INT 27
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 30
22188: PUSH
22189: LD_INT 26
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 30
22198: PUSH
22199: LD_INT 28
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PPUSH
22216: CALL_OW 69
22220: ST_TO_ADDR
// if not tmp then
22221: LD_VAR 0 2
22225: NOT
22226: IFFALSE 22230
// exit ;
22228: GO 22259
// for i in tmp do
22230: LD_ADDR_VAR 0 1
22234: PUSH
22235: LD_VAR 0 2
22239: PUSH
22240: FOR_IN
22241: IFFALSE 22257
// SetLives ( i , 1 ) ;
22243: LD_VAR 0 1
22247: PPUSH
22248: LD_INT 1
22250: PPUSH
22251: CALL_OW 234
22255: GO 22240
22257: POP
22258: POP
// end ;
22259: PPOPN 2
22261: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22262: LD_EXP 33
22266: PUSH
22267: LD_EXP 82
22271: AND
22272: IFFALSE 22559
22274: GO 22276
22276: DISABLE
22277: LD_INT 0
22279: PPUSH
22280: PPUSH
22281: PPUSH
// begin i := rand ( 1 , 7 ) ;
22282: LD_ADDR_VAR 0 1
22286: PUSH
22287: LD_INT 1
22289: PPUSH
22290: LD_INT 7
22292: PPUSH
22293: CALL_OW 12
22297: ST_TO_ADDR
// case i of 1 :
22298: LD_VAR 0 1
22302: PUSH
22303: LD_INT 1
22305: DOUBLE
22306: EQUAL
22307: IFTRUE 22311
22309: GO 22321
22311: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22312: LD_STRING earthquake(getX(game), 0, 32)
22314: PPUSH
22315: CALL_OW 559
22319: GO 22559
22321: LD_INT 2
22323: DOUBLE
22324: EQUAL
22325: IFTRUE 22329
22327: GO 22343
22329: POP
// begin ToLua ( displayStucuk(); ) ;
22330: LD_STRING displayStucuk();
22332: PPUSH
22333: CALL_OW 559
// ResetFog ;
22337: CALL_OW 335
// end ; 3 :
22341: GO 22559
22343: LD_INT 3
22345: DOUBLE
22346: EQUAL
22347: IFTRUE 22351
22349: GO 22455
22351: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22352: LD_ADDR_VAR 0 2
22356: PUSH
22357: LD_INT 22
22359: PUSH
22360: LD_OWVAR 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 25
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PPUSH
22383: CALL_OW 69
22387: ST_TO_ADDR
// if not tmp then
22388: LD_VAR 0 2
22392: NOT
22393: IFFALSE 22397
// exit ;
22395: GO 22559
// un := tmp [ rand ( 1 , tmp ) ] ;
22397: LD_ADDR_VAR 0 3
22401: PUSH
22402: LD_VAR 0 2
22406: PUSH
22407: LD_INT 1
22409: PPUSH
22410: LD_VAR 0 2
22414: PPUSH
22415: CALL_OW 12
22419: ARRAY
22420: ST_TO_ADDR
// if Crawls ( un ) then
22421: LD_VAR 0 3
22425: PPUSH
22426: CALL_OW 318
22430: IFFALSE 22441
// ComWalk ( un ) ;
22432: LD_VAR 0 3
22436: PPUSH
22437: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22441: LD_VAR 0 3
22445: PPUSH
22446: LD_INT 8
22448: PPUSH
22449: CALL_OW 336
// end ; 4 :
22453: GO 22559
22455: LD_INT 4
22457: DOUBLE
22458: EQUAL
22459: IFTRUE 22463
22461: GO 22537
22463: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22464: LD_ADDR_VAR 0 2
22468: PUSH
22469: LD_INT 22
22471: PUSH
22472: LD_OWVAR 2
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 30
22483: PUSH
22484: LD_INT 29
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PPUSH
22495: CALL_OW 69
22499: ST_TO_ADDR
// if not tmp then
22500: LD_VAR 0 2
22504: NOT
22505: IFFALSE 22509
// exit ;
22507: GO 22559
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22509: LD_VAR 0 2
22513: PUSH
22514: LD_INT 1
22516: ARRAY
22517: PPUSH
22518: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22522: LD_VAR 0 2
22526: PUSH
22527: LD_INT 1
22529: ARRAY
22530: PPUSH
22531: CALL_OW 65
// end ; 5 .. 7 :
22535: GO 22559
22537: LD_INT 5
22539: DOUBLE
22540: GREATEREQUAL
22541: IFFALSE 22549
22543: LD_INT 7
22545: DOUBLE
22546: LESSEQUAL
22547: IFTRUE 22551
22549: GO 22558
22551: POP
// StreamSibBomb ; end ;
22552: CALL 18796 0 0
22556: GO 22559
22558: POP
// end ;
22559: PPOPN 3
22561: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22562: LD_EXP 33
22566: PUSH
22567: LD_EXP 83
22571: AND
22572: IFFALSE 22728
22574: GO 22576
22576: DISABLE
22577: LD_INT 0
22579: PPUSH
22580: PPUSH
22581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22582: LD_ADDR_VAR 0 2
22586: PUSH
22587: LD_INT 81
22589: PUSH
22590: LD_OWVAR 2
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 21
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 21
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PPUSH
22631: CALL_OW 69
22635: ST_TO_ADDR
// if not tmp then
22636: LD_VAR 0 2
22640: NOT
22641: IFFALSE 22645
// exit ;
22643: GO 22728
// p := 0 ;
22645: LD_ADDR_VAR 0 3
22649: PUSH
22650: LD_INT 0
22652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22653: LD_INT 35
22655: PPUSH
22656: CALL_OW 67
// p := p + 1 ;
22660: LD_ADDR_VAR 0 3
22664: PUSH
22665: LD_VAR 0 3
22669: PUSH
22670: LD_INT 1
22672: PLUS
22673: ST_TO_ADDR
// for i in tmp do
22674: LD_ADDR_VAR 0 1
22678: PUSH
22679: LD_VAR 0 2
22683: PUSH
22684: FOR_IN
22685: IFFALSE 22716
// if GetLives ( i ) < 1000 then
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL_OW 256
22696: PUSH
22697: LD_INT 1000
22699: LESS
22700: IFFALSE 22714
// SetLives ( i , 1000 ) ;
22702: LD_VAR 0 1
22706: PPUSH
22707: LD_INT 1000
22709: PPUSH
22710: CALL_OW 234
22714: GO 22684
22716: POP
22717: POP
// until p > 20 ;
22718: LD_VAR 0 3
22722: PUSH
22723: LD_INT 20
22725: GREATER
22726: IFFALSE 22653
// end ;
22728: PPOPN 3
22730: END
// every 0 0$1 trigger StreamModeActive and sTime do
22731: LD_EXP 33
22735: PUSH
22736: LD_EXP 84
22740: AND
22741: IFFALSE 22776
22743: GO 22745
22745: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22746: LD_INT 28
22748: PPUSH
22749: LD_OWVAR 2
22753: PPUSH
22754: LD_INT 2
22756: PPUSH
22757: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22761: LD_INT 30
22763: PPUSH
22764: LD_OWVAR 2
22768: PPUSH
22769: LD_INT 2
22771: PPUSH
22772: CALL_OW 322
// end ;
22776: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22777: LD_EXP 33
22781: PUSH
22782: LD_EXP 85
22786: AND
22787: IFFALSE 22908
22789: GO 22791
22791: DISABLE
22792: LD_INT 0
22794: PPUSH
22795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22796: LD_ADDR_VAR 0 2
22800: PUSH
22801: LD_INT 22
22803: PUSH
22804: LD_OWVAR 2
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 21
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 3
22825: PUSH
22826: LD_INT 23
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: LIST
22844: PPUSH
22845: CALL_OW 69
22849: ST_TO_ADDR
// if not tmp then
22850: LD_VAR 0 2
22854: NOT
22855: IFFALSE 22859
// exit ;
22857: GO 22908
// for i in tmp do
22859: LD_ADDR_VAR 0 1
22863: PUSH
22864: LD_VAR 0 2
22868: PUSH
22869: FOR_IN
22870: IFFALSE 22906
// begin if Crawls ( i ) then
22872: LD_VAR 0 1
22876: PPUSH
22877: CALL_OW 318
22881: IFFALSE 22892
// ComWalk ( i ) ;
22883: LD_VAR 0 1
22887: PPUSH
22888: CALL_OW 138
// SetClass ( i , 2 ) ;
22892: LD_VAR 0 1
22896: PPUSH
22897: LD_INT 2
22899: PPUSH
22900: CALL_OW 336
// end ;
22904: GO 22869
22906: POP
22907: POP
// end ;
22908: PPOPN 2
22910: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22911: LD_EXP 33
22915: PUSH
22916: LD_EXP 86
22920: AND
22921: IFFALSE 23209
22923: GO 22925
22925: DISABLE
22926: LD_INT 0
22928: PPUSH
22929: PPUSH
22930: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22931: LD_OWVAR 2
22935: PPUSH
22936: LD_INT 9
22938: PPUSH
22939: LD_INT 1
22941: PPUSH
22942: LD_INT 1
22944: PPUSH
22945: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22949: LD_INT 9
22951: PPUSH
22952: LD_OWVAR 2
22956: PPUSH
22957: CALL_OW 343
// uc_side := 9 ;
22961: LD_ADDR_OWVAR 20
22965: PUSH
22966: LD_INT 9
22968: ST_TO_ADDR
// uc_nation := 2 ;
22969: LD_ADDR_OWVAR 21
22973: PUSH
22974: LD_INT 2
22976: ST_TO_ADDR
// hc_name := Dark Warrior ;
22977: LD_ADDR_OWVAR 26
22981: PUSH
22982: LD_STRING Dark Warrior
22984: ST_TO_ADDR
// hc_gallery :=  ;
22985: LD_ADDR_OWVAR 33
22989: PUSH
22990: LD_STRING 
22992: ST_TO_ADDR
// hc_noskilllimit := true ;
22993: LD_ADDR_OWVAR 76
22997: PUSH
22998: LD_INT 1
23000: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23001: LD_ADDR_OWVAR 31
23005: PUSH
23006: LD_INT 30
23008: PUSH
23009: LD_INT 30
23011: PUSH
23012: LD_INT 30
23014: PUSH
23015: LD_INT 30
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: ST_TO_ADDR
// un := CreateHuman ;
23024: LD_ADDR_VAR 0 3
23028: PUSH
23029: CALL_OW 44
23033: ST_TO_ADDR
// hc_noskilllimit := false ;
23034: LD_ADDR_OWVAR 76
23038: PUSH
23039: LD_INT 0
23041: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23042: LD_VAR 0 3
23046: PPUSH
23047: LD_INT 1
23049: PPUSH
23050: CALL_OW 51
// ToLua ( playRanger() ) ;
23054: LD_STRING playRanger()
23056: PPUSH
23057: CALL_OW 559
// p := 0 ;
23061: LD_ADDR_VAR 0 2
23065: PUSH
23066: LD_INT 0
23068: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23069: LD_INT 35
23071: PPUSH
23072: CALL_OW 67
// p := p + 1 ;
23076: LD_ADDR_VAR 0 2
23080: PUSH
23081: LD_VAR 0 2
23085: PUSH
23086: LD_INT 1
23088: PLUS
23089: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23090: LD_VAR 0 3
23094: PPUSH
23095: CALL_OW 256
23099: PUSH
23100: LD_INT 1000
23102: LESS
23103: IFFALSE 23117
// SetLives ( un , 1000 ) ;
23105: LD_VAR 0 3
23109: PPUSH
23110: LD_INT 1000
23112: PPUSH
23113: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23117: LD_VAR 0 3
23121: PPUSH
23122: LD_INT 81
23124: PUSH
23125: LD_OWVAR 2
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 91
23136: PUSH
23137: LD_VAR 0 3
23141: PUSH
23142: LD_INT 30
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PPUSH
23154: CALL_OW 69
23158: PPUSH
23159: LD_VAR 0 3
23163: PPUSH
23164: CALL_OW 74
23168: PPUSH
23169: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23173: LD_VAR 0 2
23177: PUSH
23178: LD_INT 80
23180: GREATER
23181: PUSH
23182: LD_VAR 0 3
23186: PPUSH
23187: CALL_OW 301
23191: OR
23192: IFFALSE 23069
// if un then
23194: LD_VAR 0 3
23198: IFFALSE 23209
// RemoveUnit ( un ) ;
23200: LD_VAR 0 3
23204: PPUSH
23205: CALL_OW 64
// end ;
23209: PPOPN 3
23211: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23212: LD_EXP 87
23216: IFFALSE 23332
23218: GO 23220
23220: DISABLE
23221: LD_INT 0
23223: PPUSH
23224: PPUSH
23225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23226: LD_ADDR_VAR 0 2
23230: PUSH
23231: LD_INT 81
23233: PUSH
23234: LD_OWVAR 2
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 21
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PPUSH
23257: CALL_OW 69
23261: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23262: LD_STRING playComputer()
23264: PPUSH
23265: CALL_OW 559
// if not tmp then
23269: LD_VAR 0 2
23273: NOT
23274: IFFALSE 23278
// exit ;
23276: GO 23332
// for i in tmp do
23278: LD_ADDR_VAR 0 1
23282: PUSH
23283: LD_VAR 0 2
23287: PUSH
23288: FOR_IN
23289: IFFALSE 23330
// for j := 1 to 4 do
23291: LD_ADDR_VAR 0 3
23295: PUSH
23296: DOUBLE
23297: LD_INT 1
23299: DEC
23300: ST_TO_ADDR
23301: LD_INT 4
23303: PUSH
23304: FOR_TO
23305: IFFALSE 23326
// SetSkill ( i , j , 10 ) ;
23307: LD_VAR 0 1
23311: PPUSH
23312: LD_VAR 0 3
23316: PPUSH
23317: LD_INT 10
23319: PPUSH
23320: CALL_OW 237
23324: GO 23304
23326: POP
23327: POP
23328: GO 23288
23330: POP
23331: POP
// end ;
23332: PPOPN 3
23334: END
// every 0 0$1 trigger s30 do var i , tmp ;
23335: LD_EXP 88
23339: IFFALSE 23408
23341: GO 23343
23343: DISABLE
23344: LD_INT 0
23346: PPUSH
23347: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23348: LD_ADDR_VAR 0 2
23352: PUSH
23353: LD_INT 22
23355: PUSH
23356: LD_OWVAR 2
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PPUSH
23365: CALL_OW 69
23369: ST_TO_ADDR
// if not tmp then
23370: LD_VAR 0 2
23374: NOT
23375: IFFALSE 23379
// exit ;
23377: GO 23408
// for i in tmp do
23379: LD_ADDR_VAR 0 1
23383: PUSH
23384: LD_VAR 0 2
23388: PUSH
23389: FOR_IN
23390: IFFALSE 23406
// SetLives ( i , 300 ) ;
23392: LD_VAR 0 1
23396: PPUSH
23397: LD_INT 300
23399: PPUSH
23400: CALL_OW 234
23404: GO 23389
23406: POP
23407: POP
// end ;
23408: PPOPN 2
23410: END
// every 0 0$1 trigger s60 do var i , tmp ;
23411: LD_EXP 89
23415: IFFALSE 23484
23417: GO 23419
23419: DISABLE
23420: LD_INT 0
23422: PPUSH
23423: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23424: LD_ADDR_VAR 0 2
23428: PUSH
23429: LD_INT 22
23431: PUSH
23432: LD_OWVAR 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PPUSH
23441: CALL_OW 69
23445: ST_TO_ADDR
// if not tmp then
23446: LD_VAR 0 2
23450: NOT
23451: IFFALSE 23455
// exit ;
23453: GO 23484
// for i in tmp do
23455: LD_ADDR_VAR 0 1
23459: PUSH
23460: LD_VAR 0 2
23464: PUSH
23465: FOR_IN
23466: IFFALSE 23482
// SetLives ( i , 600 ) ;
23468: LD_VAR 0 1
23472: PPUSH
23473: LD_INT 600
23475: PPUSH
23476: CALL_OW 234
23480: GO 23465
23482: POP
23483: POP
// end ;
23484: PPOPN 2
23486: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23487: LD_INT 0
23489: PPUSH
// case cmd of 301 :
23490: LD_VAR 0 1
23494: PUSH
23495: LD_INT 301
23497: DOUBLE
23498: EQUAL
23499: IFTRUE 23503
23501: GO 23535
23503: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23504: LD_VAR 0 6
23508: PPUSH
23509: LD_VAR 0 7
23513: PPUSH
23514: LD_VAR 0 8
23518: PPUSH
23519: LD_VAR 0 4
23523: PPUSH
23524: LD_VAR 0 5
23528: PPUSH
23529: CALL 24736 0 5
23533: GO 23656
23535: LD_INT 302
23537: DOUBLE
23538: EQUAL
23539: IFTRUE 23543
23541: GO 23580
23543: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23544: LD_VAR 0 6
23548: PPUSH
23549: LD_VAR 0 7
23553: PPUSH
23554: LD_VAR 0 8
23558: PPUSH
23559: LD_VAR 0 9
23563: PPUSH
23564: LD_VAR 0 4
23568: PPUSH
23569: LD_VAR 0 5
23573: PPUSH
23574: CALL 24827 0 6
23578: GO 23656
23580: LD_INT 303
23582: DOUBLE
23583: EQUAL
23584: IFTRUE 23588
23586: GO 23625
23588: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23589: LD_VAR 0 6
23593: PPUSH
23594: LD_VAR 0 7
23598: PPUSH
23599: LD_VAR 0 8
23603: PPUSH
23604: LD_VAR 0 9
23608: PPUSH
23609: LD_VAR 0 4
23613: PPUSH
23614: LD_VAR 0 5
23618: PPUSH
23619: CALL 23661 0 6
23623: GO 23656
23625: LD_INT 304
23627: DOUBLE
23628: EQUAL
23629: IFTRUE 23633
23631: GO 23655
23633: POP
// hHackTeleport ( unit , x , y ) ; end ;
23634: LD_VAR 0 2
23638: PPUSH
23639: LD_VAR 0 4
23643: PPUSH
23644: LD_VAR 0 5
23648: PPUSH
23649: CALL 25420 0 3
23653: GO 23656
23655: POP
// end ;
23656: LD_VAR 0 12
23660: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23661: LD_INT 0
23663: PPUSH
23664: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23665: LD_VAR 0 1
23669: PUSH
23670: LD_INT 1
23672: LESS
23673: PUSH
23674: LD_VAR 0 1
23678: PUSH
23679: LD_INT 3
23681: GREATER
23682: OR
23683: PUSH
23684: LD_VAR 0 5
23688: PPUSH
23689: LD_VAR 0 6
23693: PPUSH
23694: CALL_OW 428
23698: OR
23699: IFFALSE 23703
// exit ;
23701: GO 24423
// uc_side := your_side ;
23703: LD_ADDR_OWVAR 20
23707: PUSH
23708: LD_OWVAR 2
23712: ST_TO_ADDR
// uc_nation := nation ;
23713: LD_ADDR_OWVAR 21
23717: PUSH
23718: LD_VAR 0 1
23722: ST_TO_ADDR
// bc_level = 1 ;
23723: LD_ADDR_OWVAR 43
23727: PUSH
23728: LD_INT 1
23730: ST_TO_ADDR
// case btype of 1 :
23731: LD_VAR 0 2
23735: PUSH
23736: LD_INT 1
23738: DOUBLE
23739: EQUAL
23740: IFTRUE 23744
23742: GO 23755
23744: POP
// bc_type := b_depot ; 2 :
23745: LD_ADDR_OWVAR 42
23749: PUSH
23750: LD_INT 0
23752: ST_TO_ADDR
23753: GO 24367
23755: LD_INT 2
23757: DOUBLE
23758: EQUAL
23759: IFTRUE 23763
23761: GO 23774
23763: POP
// bc_type := b_warehouse ; 3 :
23764: LD_ADDR_OWVAR 42
23768: PUSH
23769: LD_INT 1
23771: ST_TO_ADDR
23772: GO 24367
23774: LD_INT 3
23776: DOUBLE
23777: EQUAL
23778: IFTRUE 23782
23780: GO 23793
23782: POP
// bc_type := b_lab ; 4 .. 9 :
23783: LD_ADDR_OWVAR 42
23787: PUSH
23788: LD_INT 6
23790: ST_TO_ADDR
23791: GO 24367
23793: LD_INT 4
23795: DOUBLE
23796: GREATEREQUAL
23797: IFFALSE 23805
23799: LD_INT 9
23801: DOUBLE
23802: LESSEQUAL
23803: IFTRUE 23807
23805: GO 23859
23807: POP
// begin bc_type := b_lab_half ;
23808: LD_ADDR_OWVAR 42
23812: PUSH
23813: LD_INT 7
23815: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23816: LD_ADDR_OWVAR 44
23820: PUSH
23821: LD_INT 10
23823: PUSH
23824: LD_INT 11
23826: PUSH
23827: LD_INT 12
23829: PUSH
23830: LD_INT 15
23832: PUSH
23833: LD_INT 14
23835: PUSH
23836: LD_INT 13
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: PUSH
23847: LD_VAR 0 2
23851: PUSH
23852: LD_INT 3
23854: MINUS
23855: ARRAY
23856: ST_TO_ADDR
// end ; 10 .. 13 :
23857: GO 24367
23859: LD_INT 10
23861: DOUBLE
23862: GREATEREQUAL
23863: IFFALSE 23871
23865: LD_INT 13
23867: DOUBLE
23868: LESSEQUAL
23869: IFTRUE 23873
23871: GO 23950
23873: POP
// begin bc_type := b_lab_full ;
23874: LD_ADDR_OWVAR 42
23878: PUSH
23879: LD_INT 8
23881: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23882: LD_ADDR_OWVAR 44
23886: PUSH
23887: LD_INT 10
23889: PUSH
23890: LD_INT 12
23892: PUSH
23893: LD_INT 14
23895: PUSH
23896: LD_INT 13
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: PUSH
23905: LD_VAR 0 2
23909: PUSH
23910: LD_INT 9
23912: MINUS
23913: ARRAY
23914: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23915: LD_ADDR_OWVAR 45
23919: PUSH
23920: LD_INT 11
23922: PUSH
23923: LD_INT 15
23925: PUSH
23926: LD_INT 12
23928: PUSH
23929: LD_INT 15
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: PUSH
23938: LD_VAR 0 2
23942: PUSH
23943: LD_INT 9
23945: MINUS
23946: ARRAY
23947: ST_TO_ADDR
// end ; 14 :
23948: GO 24367
23950: LD_INT 14
23952: DOUBLE
23953: EQUAL
23954: IFTRUE 23958
23956: GO 23969
23958: POP
// bc_type := b_workshop ; 15 :
23959: LD_ADDR_OWVAR 42
23963: PUSH
23964: LD_INT 2
23966: ST_TO_ADDR
23967: GO 24367
23969: LD_INT 15
23971: DOUBLE
23972: EQUAL
23973: IFTRUE 23977
23975: GO 23988
23977: POP
// bc_type := b_factory ; 16 :
23978: LD_ADDR_OWVAR 42
23982: PUSH
23983: LD_INT 3
23985: ST_TO_ADDR
23986: GO 24367
23988: LD_INT 16
23990: DOUBLE
23991: EQUAL
23992: IFTRUE 23996
23994: GO 24007
23996: POP
// bc_type := b_ext_gun ; 17 :
23997: LD_ADDR_OWVAR 42
24001: PUSH
24002: LD_INT 17
24004: ST_TO_ADDR
24005: GO 24367
24007: LD_INT 17
24009: DOUBLE
24010: EQUAL
24011: IFTRUE 24015
24013: GO 24043
24015: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24016: LD_ADDR_OWVAR 42
24020: PUSH
24021: LD_INT 19
24023: PUSH
24024: LD_INT 23
24026: PUSH
24027: LD_INT 19
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: LD_VAR 0 1
24039: ARRAY
24040: ST_TO_ADDR
24041: GO 24367
24043: LD_INT 18
24045: DOUBLE
24046: EQUAL
24047: IFTRUE 24051
24049: GO 24062
24051: POP
// bc_type := b_ext_radar ; 19 :
24052: LD_ADDR_OWVAR 42
24056: PUSH
24057: LD_INT 20
24059: ST_TO_ADDR
24060: GO 24367
24062: LD_INT 19
24064: DOUBLE
24065: EQUAL
24066: IFTRUE 24070
24068: GO 24081
24070: POP
// bc_type := b_ext_radio ; 20 :
24071: LD_ADDR_OWVAR 42
24075: PUSH
24076: LD_INT 22
24078: ST_TO_ADDR
24079: GO 24367
24081: LD_INT 20
24083: DOUBLE
24084: EQUAL
24085: IFTRUE 24089
24087: GO 24100
24089: POP
// bc_type := b_ext_siberium ; 21 :
24090: LD_ADDR_OWVAR 42
24094: PUSH
24095: LD_INT 21
24097: ST_TO_ADDR
24098: GO 24367
24100: LD_INT 21
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24119
24108: POP
// bc_type := b_ext_computer ; 22 :
24109: LD_ADDR_OWVAR 42
24113: PUSH
24114: LD_INT 24
24116: ST_TO_ADDR
24117: GO 24367
24119: LD_INT 22
24121: DOUBLE
24122: EQUAL
24123: IFTRUE 24127
24125: GO 24138
24127: POP
// bc_type := b_ext_track ; 23 :
24128: LD_ADDR_OWVAR 42
24132: PUSH
24133: LD_INT 16
24135: ST_TO_ADDR
24136: GO 24367
24138: LD_INT 23
24140: DOUBLE
24141: EQUAL
24142: IFTRUE 24146
24144: GO 24157
24146: POP
// bc_type := b_ext_laser ; 24 :
24147: LD_ADDR_OWVAR 42
24151: PUSH
24152: LD_INT 25
24154: ST_TO_ADDR
24155: GO 24367
24157: LD_INT 24
24159: DOUBLE
24160: EQUAL
24161: IFTRUE 24165
24163: GO 24176
24165: POP
// bc_type := b_control_tower ; 25 :
24166: LD_ADDR_OWVAR 42
24170: PUSH
24171: LD_INT 36
24173: ST_TO_ADDR
24174: GO 24367
24176: LD_INT 25
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24195
24184: POP
// bc_type := b_breastwork ; 26 :
24185: LD_ADDR_OWVAR 42
24189: PUSH
24190: LD_INT 31
24192: ST_TO_ADDR
24193: GO 24367
24195: LD_INT 26
24197: DOUBLE
24198: EQUAL
24199: IFTRUE 24203
24201: GO 24214
24203: POP
// bc_type := b_bunker ; 27 :
24204: LD_ADDR_OWVAR 42
24208: PUSH
24209: LD_INT 32
24211: ST_TO_ADDR
24212: GO 24367
24214: LD_INT 27
24216: DOUBLE
24217: EQUAL
24218: IFTRUE 24222
24220: GO 24233
24222: POP
// bc_type := b_turret ; 28 :
24223: LD_ADDR_OWVAR 42
24227: PUSH
24228: LD_INT 33
24230: ST_TO_ADDR
24231: GO 24367
24233: LD_INT 28
24235: DOUBLE
24236: EQUAL
24237: IFTRUE 24241
24239: GO 24252
24241: POP
// bc_type := b_armoury ; 29 :
24242: LD_ADDR_OWVAR 42
24246: PUSH
24247: LD_INT 4
24249: ST_TO_ADDR
24250: GO 24367
24252: LD_INT 29
24254: DOUBLE
24255: EQUAL
24256: IFTRUE 24260
24258: GO 24271
24260: POP
// bc_type := b_barracks ; 30 :
24261: LD_ADDR_OWVAR 42
24265: PUSH
24266: LD_INT 5
24268: ST_TO_ADDR
24269: GO 24367
24271: LD_INT 30
24273: DOUBLE
24274: EQUAL
24275: IFTRUE 24279
24277: GO 24290
24279: POP
// bc_type := b_solar_power ; 31 :
24280: LD_ADDR_OWVAR 42
24284: PUSH
24285: LD_INT 27
24287: ST_TO_ADDR
24288: GO 24367
24290: LD_INT 31
24292: DOUBLE
24293: EQUAL
24294: IFTRUE 24298
24296: GO 24309
24298: POP
// bc_type := b_oil_power ; 32 :
24299: LD_ADDR_OWVAR 42
24303: PUSH
24304: LD_INT 26
24306: ST_TO_ADDR
24307: GO 24367
24309: LD_INT 32
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24328
24317: POP
// bc_type := b_siberite_power ; 33 :
24318: LD_ADDR_OWVAR 42
24322: PUSH
24323: LD_INT 28
24325: ST_TO_ADDR
24326: GO 24367
24328: LD_INT 33
24330: DOUBLE
24331: EQUAL
24332: IFTRUE 24336
24334: GO 24347
24336: POP
// bc_type := b_oil_mine ; 34 :
24337: LD_ADDR_OWVAR 42
24341: PUSH
24342: LD_INT 29
24344: ST_TO_ADDR
24345: GO 24367
24347: LD_INT 34
24349: DOUBLE
24350: EQUAL
24351: IFTRUE 24355
24353: GO 24366
24355: POP
// bc_type := b_siberite_mine ; end ;
24356: LD_ADDR_OWVAR 42
24360: PUSH
24361: LD_INT 30
24363: ST_TO_ADDR
24364: GO 24367
24366: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24367: LD_ADDR_VAR 0 8
24371: PUSH
24372: LD_VAR 0 5
24376: PPUSH
24377: LD_VAR 0 6
24381: PPUSH
24382: LD_VAR 0 3
24386: PPUSH
24387: CALL_OW 47
24391: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24392: LD_OWVAR 42
24396: PUSH
24397: LD_INT 32
24399: PUSH
24400: LD_INT 33
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: IN
24407: IFFALSE 24423
// PlaceWeaponTurret ( b , weapon ) ;
24409: LD_VAR 0 8
24413: PPUSH
24414: LD_VAR 0 4
24418: PPUSH
24419: CALL_OW 431
// end ;
24423: LD_VAR 0 7
24427: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24428: LD_INT 0
24430: PPUSH
24431: PPUSH
24432: PPUSH
24433: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24434: LD_ADDR_VAR 0 4
24438: PUSH
24439: LD_INT 22
24441: PUSH
24442: LD_OWVAR 2
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 30
24456: PUSH
24457: LD_INT 0
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 30
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PPUSH
24483: CALL_OW 69
24487: ST_TO_ADDR
// if not tmp then
24488: LD_VAR 0 4
24492: NOT
24493: IFFALSE 24497
// exit ;
24495: GO 24556
// for i in tmp do
24497: LD_ADDR_VAR 0 2
24501: PUSH
24502: LD_VAR 0 4
24506: PUSH
24507: FOR_IN
24508: IFFALSE 24554
// for j = 1 to 3 do
24510: LD_ADDR_VAR 0 3
24514: PUSH
24515: DOUBLE
24516: LD_INT 1
24518: DEC
24519: ST_TO_ADDR
24520: LD_INT 3
24522: PUSH
24523: FOR_TO
24524: IFFALSE 24550
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24526: LD_VAR 0 2
24530: PPUSH
24531: CALL_OW 274
24535: PPUSH
24536: LD_VAR 0 3
24540: PPUSH
24541: LD_INT 99999
24543: PPUSH
24544: CALL_OW 277
24548: GO 24523
24550: POP
24551: POP
24552: GO 24507
24554: POP
24555: POP
// end ;
24556: LD_VAR 0 1
24560: RET
// export function hHackSetLevel10 ; var i , j ; begin
24561: LD_INT 0
24563: PPUSH
24564: PPUSH
24565: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24566: LD_ADDR_VAR 0 2
24570: PUSH
24571: LD_INT 21
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PPUSH
24581: CALL_OW 69
24585: PUSH
24586: FOR_IN
24587: IFFALSE 24639
// if IsSelected ( i ) then
24589: LD_VAR 0 2
24593: PPUSH
24594: CALL_OW 306
24598: IFFALSE 24637
// begin for j := 1 to 4 do
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: DOUBLE
24606: LD_INT 1
24608: DEC
24609: ST_TO_ADDR
24610: LD_INT 4
24612: PUSH
24613: FOR_TO
24614: IFFALSE 24635
// SetSkill ( i , j , 10 ) ;
24616: LD_VAR 0 2
24620: PPUSH
24621: LD_VAR 0 3
24625: PPUSH
24626: LD_INT 10
24628: PPUSH
24629: CALL_OW 237
24633: GO 24613
24635: POP
24636: POP
// end ;
24637: GO 24586
24639: POP
24640: POP
// end ;
24641: LD_VAR 0 1
24645: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24646: LD_INT 0
24648: PPUSH
24649: PPUSH
24650: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24651: LD_ADDR_VAR 0 2
24655: PUSH
24656: LD_INT 22
24658: PUSH
24659: LD_OWVAR 2
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 21
24670: PUSH
24671: LD_INT 1
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PPUSH
24682: CALL_OW 69
24686: PUSH
24687: FOR_IN
24688: IFFALSE 24729
// begin for j := 1 to 4 do
24690: LD_ADDR_VAR 0 3
24694: PUSH
24695: DOUBLE
24696: LD_INT 1
24698: DEC
24699: ST_TO_ADDR
24700: LD_INT 4
24702: PUSH
24703: FOR_TO
24704: IFFALSE 24725
// SetSkill ( i , j , 10 ) ;
24706: LD_VAR 0 2
24710: PPUSH
24711: LD_VAR 0 3
24715: PPUSH
24716: LD_INT 10
24718: PPUSH
24719: CALL_OW 237
24723: GO 24703
24725: POP
24726: POP
// end ;
24727: GO 24687
24729: POP
24730: POP
// end ;
24731: LD_VAR 0 1
24735: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24736: LD_INT 0
24738: PPUSH
// uc_side := your_side ;
24739: LD_ADDR_OWVAR 20
24743: PUSH
24744: LD_OWVAR 2
24748: ST_TO_ADDR
// uc_nation := nation ;
24749: LD_ADDR_OWVAR 21
24753: PUSH
24754: LD_VAR 0 1
24758: ST_TO_ADDR
// InitHc ;
24759: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24763: LD_INT 0
24765: PPUSH
24766: LD_VAR 0 2
24770: PPUSH
24771: LD_VAR 0 3
24775: PPUSH
24776: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24780: LD_VAR 0 4
24784: PPUSH
24785: LD_VAR 0 5
24789: PPUSH
24790: CALL_OW 428
24794: PUSH
24795: LD_INT 0
24797: EQUAL
24798: IFFALSE 24822
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24800: CALL_OW 44
24804: PPUSH
24805: LD_VAR 0 4
24809: PPUSH
24810: LD_VAR 0 5
24814: PPUSH
24815: LD_INT 1
24817: PPUSH
24818: CALL_OW 48
// end ;
24822: LD_VAR 0 6
24826: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24827: LD_INT 0
24829: PPUSH
24830: PPUSH
// uc_side := your_side ;
24831: LD_ADDR_OWVAR 20
24835: PUSH
24836: LD_OWVAR 2
24840: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24841: LD_VAR 0 1
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 2
24851: PUSH
24852: LD_INT 3
24854: PUSH
24855: LD_INT 4
24857: PUSH
24858: LD_INT 5
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: IN
24868: IFFALSE 24880
// uc_nation := nation_american else
24870: LD_ADDR_OWVAR 21
24874: PUSH
24875: LD_INT 1
24877: ST_TO_ADDR
24878: GO 24923
// if chassis in [ 11 , 12 , 13 , 14 ] then
24880: LD_VAR 0 1
24884: PUSH
24885: LD_INT 11
24887: PUSH
24888: LD_INT 12
24890: PUSH
24891: LD_INT 13
24893: PUSH
24894: LD_INT 14
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: IN
24903: IFFALSE 24915
// uc_nation := nation_arabian else
24905: LD_ADDR_OWVAR 21
24909: PUSH
24910: LD_INT 2
24912: ST_TO_ADDR
24913: GO 24923
// uc_nation := nation_russian ;
24915: LD_ADDR_OWVAR 21
24919: PUSH
24920: LD_INT 3
24922: ST_TO_ADDR
// vc_chassis := chassis ;
24923: LD_ADDR_OWVAR 37
24927: PUSH
24928: LD_VAR 0 1
24932: ST_TO_ADDR
// vc_engine := engine ;
24933: LD_ADDR_OWVAR 39
24937: PUSH
24938: LD_VAR 0 2
24942: ST_TO_ADDR
// vc_control := control ;
24943: LD_ADDR_OWVAR 38
24947: PUSH
24948: LD_VAR 0 3
24952: ST_TO_ADDR
// vc_weapon := weapon ;
24953: LD_ADDR_OWVAR 40
24957: PUSH
24958: LD_VAR 0 4
24962: ST_TO_ADDR
// un := CreateVehicle ;
24963: LD_ADDR_VAR 0 8
24967: PUSH
24968: CALL_OW 45
24972: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24973: LD_VAR 0 8
24977: PPUSH
24978: LD_INT 0
24980: PPUSH
24981: LD_INT 5
24983: PPUSH
24984: CALL_OW 12
24988: PPUSH
24989: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24993: LD_VAR 0 8
24997: PPUSH
24998: LD_VAR 0 5
25002: PPUSH
25003: LD_VAR 0 6
25007: PPUSH
25008: LD_INT 1
25010: PPUSH
25011: CALL_OW 48
// end ;
25015: LD_VAR 0 7
25019: RET
// export hInvincible ; every 1 do
25020: GO 25022
25022: DISABLE
// hInvincible := [ ] ;
25023: LD_ADDR_EXP 90
25027: PUSH
25028: EMPTY
25029: ST_TO_ADDR
25030: END
// every 10 do var i ;
25031: GO 25033
25033: DISABLE
25034: LD_INT 0
25036: PPUSH
// begin enable ;
25037: ENABLE
// if not hInvincible then
25038: LD_EXP 90
25042: NOT
25043: IFFALSE 25047
// exit ;
25045: GO 25091
// for i in hInvincible do
25047: LD_ADDR_VAR 0 1
25051: PUSH
25052: LD_EXP 90
25056: PUSH
25057: FOR_IN
25058: IFFALSE 25089
// if GetLives ( i ) < 1000 then
25060: LD_VAR 0 1
25064: PPUSH
25065: CALL_OW 256
25069: PUSH
25070: LD_INT 1000
25072: LESS
25073: IFFALSE 25087
// SetLives ( i , 1000 ) ;
25075: LD_VAR 0 1
25079: PPUSH
25080: LD_INT 1000
25082: PPUSH
25083: CALL_OW 234
25087: GO 25057
25089: POP
25090: POP
// end ;
25091: PPOPN 1
25093: END
// export function hHackInvincible ; var i ; begin
25094: LD_INT 0
25096: PPUSH
25097: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25098: LD_ADDR_VAR 0 2
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: LD_INT 21
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 21
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: LIST
25130: PPUSH
25131: CALL_OW 69
25135: PUSH
25136: FOR_IN
25137: IFFALSE 25198
// if IsSelected ( i ) then
25139: LD_VAR 0 2
25143: PPUSH
25144: CALL_OW 306
25148: IFFALSE 25196
// begin if i in hInvincible then
25150: LD_VAR 0 2
25154: PUSH
25155: LD_EXP 90
25159: IN
25160: IFFALSE 25180
// hInvincible := hInvincible diff i else
25162: LD_ADDR_EXP 90
25166: PUSH
25167: LD_EXP 90
25171: PUSH
25172: LD_VAR 0 2
25176: DIFF
25177: ST_TO_ADDR
25178: GO 25196
// hInvincible := hInvincible union i ;
25180: LD_ADDR_EXP 90
25184: PUSH
25185: LD_EXP 90
25189: PUSH
25190: LD_VAR 0 2
25194: UNION
25195: ST_TO_ADDR
// end ;
25196: GO 25136
25198: POP
25199: POP
// end ;
25200: LD_VAR 0 1
25204: RET
// export function hHackInvisible ; var i , j ; begin
25205: LD_INT 0
25207: PPUSH
25208: PPUSH
25209: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25210: LD_ADDR_VAR 0 2
25214: PUSH
25215: LD_INT 21
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PPUSH
25225: CALL_OW 69
25229: PUSH
25230: FOR_IN
25231: IFFALSE 25255
// if IsSelected ( i ) then
25233: LD_VAR 0 2
25237: PPUSH
25238: CALL_OW 306
25242: IFFALSE 25253
// ComForceInvisible ( i ) ;
25244: LD_VAR 0 2
25248: PPUSH
25249: CALL_OW 496
25253: GO 25230
25255: POP
25256: POP
// end ;
25257: LD_VAR 0 1
25261: RET
// export function hHackChangeYourSide ; begin
25262: LD_INT 0
25264: PPUSH
// if your_side = 8 then
25265: LD_OWVAR 2
25269: PUSH
25270: LD_INT 8
25272: EQUAL
25273: IFFALSE 25285
// your_side := 0 else
25275: LD_ADDR_OWVAR 2
25279: PUSH
25280: LD_INT 0
25282: ST_TO_ADDR
25283: GO 25299
// your_side := your_side + 1 ;
25285: LD_ADDR_OWVAR 2
25289: PUSH
25290: LD_OWVAR 2
25294: PUSH
25295: LD_INT 1
25297: PLUS
25298: ST_TO_ADDR
// end ;
25299: LD_VAR 0 1
25303: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25304: LD_INT 0
25306: PPUSH
25307: PPUSH
25308: PPUSH
// for i in all_units do
25309: LD_ADDR_VAR 0 2
25313: PUSH
25314: LD_OWVAR 3
25318: PUSH
25319: FOR_IN
25320: IFFALSE 25398
// if IsSelected ( i ) then
25322: LD_VAR 0 2
25326: PPUSH
25327: CALL_OW 306
25331: IFFALSE 25396
// begin j := GetSide ( i ) ;
25333: LD_ADDR_VAR 0 3
25337: PUSH
25338: LD_VAR 0 2
25342: PPUSH
25343: CALL_OW 255
25347: ST_TO_ADDR
// if j = 8 then
25348: LD_VAR 0 3
25352: PUSH
25353: LD_INT 8
25355: EQUAL
25356: IFFALSE 25368
// j := 0 else
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_INT 0
25365: ST_TO_ADDR
25366: GO 25382
// j := j + 1 ;
25368: LD_ADDR_VAR 0 3
25372: PUSH
25373: LD_VAR 0 3
25377: PUSH
25378: LD_INT 1
25380: PLUS
25381: ST_TO_ADDR
// SetSide ( i , j ) ;
25382: LD_VAR 0 2
25386: PPUSH
25387: LD_VAR 0 3
25391: PPUSH
25392: CALL_OW 235
// end ;
25396: GO 25319
25398: POP
25399: POP
// end ;
25400: LD_VAR 0 1
25404: RET
// export function hHackFog ; begin
25405: LD_INT 0
25407: PPUSH
// FogOff ( true ) ;
25408: LD_INT 1
25410: PPUSH
25411: CALL_OW 344
// end ;
25415: LD_VAR 0 1
25419: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25420: LD_INT 0
25422: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25423: LD_VAR 0 1
25427: PPUSH
25428: LD_VAR 0 2
25432: PPUSH
25433: LD_VAR 0 3
25437: PPUSH
25438: LD_INT 1
25440: PPUSH
25441: LD_INT 1
25443: PPUSH
25444: CALL_OW 483
// CenterOnXY ( x , y ) ;
25448: LD_VAR 0 2
25452: PPUSH
25453: LD_VAR 0 3
25457: PPUSH
25458: CALL_OW 84
// end ; end_of_file
25462: LD_VAR 0 4
25466: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25467: LD_INT 0
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25473: LD_VAR 0 1
25477: PPUSH
25478: CALL_OW 264
25482: PUSH
25483: LD_EXP 18
25487: EQUAL
25488: IFFALSE 25560
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25490: LD_INT 68
25492: PPUSH
25493: LD_VAR 0 1
25497: PPUSH
25498: CALL_OW 255
25502: PPUSH
25503: CALL_OW 321
25507: PUSH
25508: LD_INT 2
25510: EQUAL
25511: IFFALSE 25523
// eff := 70 else
25513: LD_ADDR_VAR 0 4
25517: PUSH
25518: LD_INT 70
25520: ST_TO_ADDR
25521: GO 25531
// eff := 30 ;
25523: LD_ADDR_VAR 0 4
25527: PUSH
25528: LD_INT 30
25530: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25531: LD_VAR 0 1
25535: PPUSH
25536: CALL_OW 250
25540: PPUSH
25541: LD_VAR 0 1
25545: PPUSH
25546: CALL_OW 251
25550: PPUSH
25551: LD_VAR 0 4
25555: PPUSH
25556: CALL_OW 495
// end ; end ;
25560: LD_VAR 0 2
25564: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25565: LD_INT 0
25567: PPUSH
// end ;
25568: LD_VAR 0 4
25572: RET
// export function SOS_Command ( cmd ) ; begin
25573: LD_INT 0
25575: PPUSH
// end ;
25576: LD_VAR 0 2
25580: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25581: LD_INT 0
25583: PPUSH
// end ;
25584: LD_VAR 0 6
25588: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25589: LD_INT 0
25591: PPUSH
25592: PPUSH
// if not vehicle or not factory then
25593: LD_VAR 0 1
25597: NOT
25598: PUSH
25599: LD_VAR 0 2
25603: NOT
25604: OR
25605: IFFALSE 25609
// exit ;
25607: GO 25840
// if factoryWaypoints >= factory then
25609: LD_EXP 91
25613: PUSH
25614: LD_VAR 0 2
25618: GREATEREQUAL
25619: IFFALSE 25840
// if factoryWaypoints [ factory ] then
25621: LD_EXP 91
25625: PUSH
25626: LD_VAR 0 2
25630: ARRAY
25631: IFFALSE 25840
// begin if GetControl ( vehicle ) = control_manual then
25633: LD_VAR 0 1
25637: PPUSH
25638: CALL_OW 263
25642: PUSH
25643: LD_INT 1
25645: EQUAL
25646: IFFALSE 25727
// begin driver := IsDrivenBy ( vehicle ) ;
25648: LD_ADDR_VAR 0 4
25652: PUSH
25653: LD_VAR 0 1
25657: PPUSH
25658: CALL_OW 311
25662: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
25663: LD_VAR 0 4
25667: PPUSH
25668: LD_EXP 91
25672: PUSH
25673: LD_VAR 0 2
25677: ARRAY
25678: PUSH
25679: LD_INT 1
25681: ARRAY
25682: PPUSH
25683: LD_EXP 91
25687: PUSH
25688: LD_VAR 0 2
25692: ARRAY
25693: PUSH
25694: LD_INT 2
25696: ARRAY
25697: PPUSH
25698: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25702: LD_VAR 0 4
25706: PPUSH
25707: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25711: LD_VAR 0 4
25715: PPUSH
25716: LD_VAR 0 2
25720: PPUSH
25721: CALL_OW 180
// end else
25725: GO 25840
// if GetControl ( vehicle ) = control_remote then
25727: LD_VAR 0 1
25731: PPUSH
25732: CALL_OW 263
25736: PUSH
25737: LD_INT 2
25739: EQUAL
25740: IFFALSE 25801
// begin wait ( 0 0$2 ) ;
25742: LD_INT 70
25744: PPUSH
25745: CALL_OW 67
// if Connect ( vehicle ) then
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL 38064 0 1
25758: IFFALSE 25799
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
25760: LD_VAR 0 1
25764: PPUSH
25765: LD_EXP 91
25769: PUSH
25770: LD_VAR 0 2
25774: ARRAY
25775: PUSH
25776: LD_INT 1
25778: ARRAY
25779: PPUSH
25780: LD_EXP 91
25784: PUSH
25785: LD_VAR 0 2
25789: ARRAY
25790: PUSH
25791: LD_INT 2
25793: ARRAY
25794: PPUSH
25795: CALL_OW 171
// end else
25799: GO 25840
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
25801: LD_VAR 0 1
25805: PPUSH
25806: LD_EXP 91
25810: PUSH
25811: LD_VAR 0 2
25815: ARRAY
25816: PUSH
25817: LD_INT 1
25819: ARRAY
25820: PPUSH
25821: LD_EXP 91
25825: PUSH
25826: LD_VAR 0 2
25830: ARRAY
25831: PUSH
25832: LD_INT 2
25834: ARRAY
25835: PPUSH
25836: CALL_OW 171
// end ; end ;
25840: LD_VAR 0 3
25844: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25845: LD_INT 0
25847: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25848: LD_VAR 0 1
25852: PUSH
25853: LD_INT 250
25855: EQUAL
25856: PUSH
25857: LD_VAR 0 2
25861: PPUSH
25862: CALL_OW 264
25866: PUSH
25867: LD_EXP 21
25871: EQUAL
25872: AND
25873: IFFALSE 25894
// MinerPlaceMine ( unit , x , y ) ;
25875: LD_VAR 0 2
25879: PPUSH
25880: LD_VAR 0 4
25884: PPUSH
25885: LD_VAR 0 5
25889: PPUSH
25890: CALL 28622 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25894: LD_VAR 0 1
25898: PUSH
25899: LD_INT 251
25901: EQUAL
25902: PUSH
25903: LD_VAR 0 2
25907: PPUSH
25908: CALL_OW 264
25912: PUSH
25913: LD_EXP 21
25917: EQUAL
25918: AND
25919: IFFALSE 25940
// MinerDetonateMine ( unit , x , y ) ;
25921: LD_VAR 0 2
25925: PPUSH
25926: LD_VAR 0 4
25930: PPUSH
25931: LD_VAR 0 5
25935: PPUSH
25936: CALL 28899 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25940: LD_VAR 0 1
25944: PUSH
25945: LD_INT 252
25947: EQUAL
25948: PUSH
25949: LD_VAR 0 2
25953: PPUSH
25954: CALL_OW 264
25958: PUSH
25959: LD_EXP 21
25963: EQUAL
25964: AND
25965: IFFALSE 25986
// MinerCreateMinefield ( unit , x , y ) ;
25967: LD_VAR 0 2
25971: PPUSH
25972: LD_VAR 0 4
25976: PPUSH
25977: LD_VAR 0 5
25981: PPUSH
25982: CALL 29316 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25986: LD_VAR 0 1
25990: PUSH
25991: LD_INT 253
25993: EQUAL
25994: PUSH
25995: LD_VAR 0 2
25999: PPUSH
26000: CALL_OW 257
26004: PUSH
26005: LD_INT 5
26007: EQUAL
26008: AND
26009: IFFALSE 26030
// ComBinocular ( unit , x , y ) ;
26011: LD_VAR 0 2
26015: PPUSH
26016: LD_VAR 0 4
26020: PPUSH
26021: LD_VAR 0 5
26025: PPUSH
26026: CALL 29687 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26030: LD_VAR 0 1
26034: PUSH
26035: LD_INT 254
26037: EQUAL
26038: PUSH
26039: LD_VAR 0 2
26043: PPUSH
26044: CALL_OW 264
26048: PUSH
26049: LD_EXP 16
26053: EQUAL
26054: AND
26055: PUSH
26056: LD_VAR 0 3
26060: PPUSH
26061: CALL_OW 263
26065: PUSH
26066: LD_INT 3
26068: EQUAL
26069: AND
26070: IFFALSE 26086
// HackDestroyVehicle ( unit , selectedUnit ) ;
26072: LD_VAR 0 2
26076: PPUSH
26077: LD_VAR 0 3
26081: PPUSH
26082: CALL 27982 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26086: LD_VAR 0 1
26090: PUSH
26091: LD_INT 255
26093: EQUAL
26094: PUSH
26095: LD_VAR 0 2
26099: PPUSH
26100: CALL_OW 264
26104: PUSH
26105: LD_INT 14
26107: PUSH
26108: LD_INT 53
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: IN
26115: AND
26116: PUSH
26117: LD_VAR 0 4
26121: PPUSH
26122: LD_VAR 0 5
26126: PPUSH
26127: CALL_OW 488
26131: AND
26132: IFFALSE 26156
// CutTreeXYR ( unit , x , y , 12 ) ;
26134: LD_VAR 0 2
26138: PPUSH
26139: LD_VAR 0 4
26143: PPUSH
26144: LD_VAR 0 5
26148: PPUSH
26149: LD_INT 12
26151: PPUSH
26152: CALL 26548 0 4
// if cmd = 256 then
26156: LD_VAR 0 1
26160: PUSH
26161: LD_INT 256
26163: EQUAL
26164: IFFALSE 26185
// SetFactoryWaypoint ( unit , x , y ) ;
26166: LD_VAR 0 2
26170: PPUSH
26171: LD_VAR 0 4
26175: PPUSH
26176: LD_VAR 0 5
26180: PPUSH
26181: CALL 26190 0 3
// end ;
26185: LD_VAR 0 6
26189: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26190: LD_INT 0
26192: PPUSH
26193: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26194: LD_VAR 0 1
26198: NOT
26199: PUSH
26200: LD_VAR 0 2
26204: PPUSH
26205: LD_VAR 0 3
26209: PPUSH
26210: CALL_OW 488
26214: NOT
26215: OR
26216: PUSH
26217: LD_VAR 0 1
26221: PPUSH
26222: CALL_OW 266
26226: PUSH
26227: LD_INT 3
26229: NONEQUAL
26230: PUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL_OW 247
26240: PUSH
26241: LD_INT 1
26243: EQUAL
26244: NOT
26245: AND
26246: OR
26247: IFFALSE 26251
// exit ;
26249: GO 26400
// if GetType ( factory ) = unit_human then
26251: LD_VAR 0 1
26255: PPUSH
26256: CALL_OW 247
26260: PUSH
26261: LD_INT 1
26263: EQUAL
26264: IFFALSE 26281
// factory := IsInUnit ( factory ) ;
26266: LD_ADDR_VAR 0 1
26270: PUSH
26271: LD_VAR 0 1
26275: PPUSH
26276: CALL_OW 310
26280: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL_OW 266
26290: PUSH
26291: LD_INT 3
26293: NONEQUAL
26294: IFFALSE 26298
// exit ;
26296: GO 26400
// if HexInfo ( x , y ) = factory then
26298: LD_VAR 0 2
26302: PPUSH
26303: LD_VAR 0 3
26307: PPUSH
26308: CALL_OW 428
26312: PUSH
26313: LD_VAR 0 1
26317: EQUAL
26318: IFFALSE 26345
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26320: LD_ADDR_EXP 91
26324: PUSH
26325: LD_EXP 91
26329: PPUSH
26330: LD_VAR 0 1
26334: PPUSH
26335: LD_INT 0
26337: PPUSH
26338: CALL_OW 1
26342: ST_TO_ADDR
26343: GO 26396
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26345: LD_ADDR_EXP 91
26349: PUSH
26350: LD_EXP 91
26354: PPUSH
26355: LD_VAR 0 1
26359: PPUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 255
26369: PUSH
26370: LD_VAR 0 1
26374: PUSH
26375: LD_VAR 0 2
26379: PUSH
26380: LD_VAR 0 3
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: PPUSH
26391: CALL_OW 1
26395: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26396: CALL 26405 0 0
// end ;
26400: LD_VAR 0 4
26404: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26405: LD_INT 0
26407: PPUSH
26408: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26409: LD_STRING resetFactoryWaypoint();
26411: PPUSH
26412: CALL_OW 559
// if factoryWaypoints then
26416: LD_EXP 91
26420: IFFALSE 26543
// begin for i := 1 to factoryWaypoints do
26422: LD_ADDR_VAR 0 2
26426: PUSH
26427: DOUBLE
26428: LD_INT 1
26430: DEC
26431: ST_TO_ADDR
26432: LD_EXP 91
26436: PUSH
26437: FOR_TO
26438: IFFALSE 26541
// if factoryWaypoints [ i ] then
26440: LD_EXP 91
26444: PUSH
26445: LD_VAR 0 2
26449: ARRAY
26450: IFFALSE 26539
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26452: LD_STRING setFactoryWaypointXY(
26454: PUSH
26455: LD_EXP 91
26459: PUSH
26460: LD_VAR 0 2
26464: ARRAY
26465: PUSH
26466: LD_INT 1
26468: ARRAY
26469: STR
26470: PUSH
26471: LD_STRING ,
26473: STR
26474: PUSH
26475: LD_EXP 91
26479: PUSH
26480: LD_VAR 0 2
26484: ARRAY
26485: PUSH
26486: LD_INT 2
26488: ARRAY
26489: STR
26490: PUSH
26491: LD_STRING ,
26493: STR
26494: PUSH
26495: LD_EXP 91
26499: PUSH
26500: LD_VAR 0 2
26504: ARRAY
26505: PUSH
26506: LD_INT 3
26508: ARRAY
26509: STR
26510: PUSH
26511: LD_STRING ,
26513: STR
26514: PUSH
26515: LD_EXP 91
26519: PUSH
26520: LD_VAR 0 2
26524: ARRAY
26525: PUSH
26526: LD_INT 4
26528: ARRAY
26529: STR
26530: PUSH
26531: LD_STRING )
26533: STR
26534: PPUSH
26535: CALL_OW 559
26539: GO 26437
26541: POP
26542: POP
// end ; end ;
26543: LD_VAR 0 1
26547: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26548: LD_INT 0
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
26554: PPUSH
26555: PPUSH
26556: PPUSH
26557: PPUSH
26558: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26559: LD_VAR 0 1
26563: NOT
26564: PUSH
26565: LD_VAR 0 2
26569: PPUSH
26570: LD_VAR 0 3
26574: PPUSH
26575: CALL_OW 488
26579: NOT
26580: OR
26581: PUSH
26582: LD_VAR 0 4
26586: NOT
26587: OR
26588: IFFALSE 26592
// exit ;
26590: GO 26932
// list := [ ] ;
26592: LD_ADDR_VAR 0 13
26596: PUSH
26597: EMPTY
26598: ST_TO_ADDR
// if x - r < 0 then
26599: LD_VAR 0 2
26603: PUSH
26604: LD_VAR 0 4
26608: MINUS
26609: PUSH
26610: LD_INT 0
26612: LESS
26613: IFFALSE 26625
// min_x := 0 else
26615: LD_ADDR_VAR 0 7
26619: PUSH
26620: LD_INT 0
26622: ST_TO_ADDR
26623: GO 26641
// min_x := x - r ;
26625: LD_ADDR_VAR 0 7
26629: PUSH
26630: LD_VAR 0 2
26634: PUSH
26635: LD_VAR 0 4
26639: MINUS
26640: ST_TO_ADDR
// if y - r < 0 then
26641: LD_VAR 0 3
26645: PUSH
26646: LD_VAR 0 4
26650: MINUS
26651: PUSH
26652: LD_INT 0
26654: LESS
26655: IFFALSE 26667
// min_y := 0 else
26657: LD_ADDR_VAR 0 8
26661: PUSH
26662: LD_INT 0
26664: ST_TO_ADDR
26665: GO 26683
// min_y := y - r ;
26667: LD_ADDR_VAR 0 8
26671: PUSH
26672: LD_VAR 0 3
26676: PUSH
26677: LD_VAR 0 4
26681: MINUS
26682: ST_TO_ADDR
// max_x := x + r ;
26683: LD_ADDR_VAR 0 9
26687: PUSH
26688: LD_VAR 0 2
26692: PUSH
26693: LD_VAR 0 4
26697: PLUS
26698: ST_TO_ADDR
// max_y := y + r ;
26699: LD_ADDR_VAR 0 10
26703: PUSH
26704: LD_VAR 0 3
26708: PUSH
26709: LD_VAR 0 4
26713: PLUS
26714: ST_TO_ADDR
// for _x = min_x to max_x do
26715: LD_ADDR_VAR 0 11
26719: PUSH
26720: DOUBLE
26721: LD_VAR 0 7
26725: DEC
26726: ST_TO_ADDR
26727: LD_VAR 0 9
26731: PUSH
26732: FOR_TO
26733: IFFALSE 26850
// for _y = min_y to max_y do
26735: LD_ADDR_VAR 0 12
26739: PUSH
26740: DOUBLE
26741: LD_VAR 0 8
26745: DEC
26746: ST_TO_ADDR
26747: LD_VAR 0 10
26751: PUSH
26752: FOR_TO
26753: IFFALSE 26846
// begin if not ValidHex ( _x , _y ) then
26755: LD_VAR 0 11
26759: PPUSH
26760: LD_VAR 0 12
26764: PPUSH
26765: CALL_OW 488
26769: NOT
26770: IFFALSE 26774
// continue ;
26772: GO 26752
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26774: LD_VAR 0 11
26778: PPUSH
26779: LD_VAR 0 12
26783: PPUSH
26784: CALL_OW 351
26788: PUSH
26789: LD_VAR 0 11
26793: PPUSH
26794: LD_VAR 0 12
26798: PPUSH
26799: CALL_OW 554
26803: AND
26804: IFFALSE 26844
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26806: LD_ADDR_VAR 0 13
26810: PUSH
26811: LD_VAR 0 13
26815: PPUSH
26816: LD_VAR 0 13
26820: PUSH
26821: LD_INT 1
26823: PLUS
26824: PPUSH
26825: LD_VAR 0 11
26829: PUSH
26830: LD_VAR 0 12
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PPUSH
26839: CALL_OW 2
26843: ST_TO_ADDR
// end ;
26844: GO 26752
26846: POP
26847: POP
26848: GO 26732
26850: POP
26851: POP
// if not list then
26852: LD_VAR 0 13
26856: NOT
26857: IFFALSE 26861
// exit ;
26859: GO 26932
// for i in list do
26861: LD_ADDR_VAR 0 6
26865: PUSH
26866: LD_VAR 0 13
26870: PUSH
26871: FOR_IN
26872: IFFALSE 26930
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26874: LD_VAR 0 1
26878: PPUSH
26879: LD_STRING M
26881: PUSH
26882: LD_VAR 0 6
26886: PUSH
26887: LD_INT 1
26889: ARRAY
26890: PUSH
26891: LD_VAR 0 6
26895: PUSH
26896: LD_INT 2
26898: ARRAY
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: PUSH
26921: EMPTY
26922: LIST
26923: PPUSH
26924: CALL_OW 447
26928: GO 26871
26930: POP
26931: POP
// end ;
26932: LD_VAR 0 5
26936: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26937: LD_EXP 92
26941: NOT
26942: IFFALSE 26992
26944: GO 26946
26946: DISABLE
// begin initHack := true ;
26947: LD_ADDR_EXP 92
26951: PUSH
26952: LD_INT 1
26954: ST_TO_ADDR
// hackTanks := [ ] ;
26955: LD_ADDR_EXP 93
26959: PUSH
26960: EMPTY
26961: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26962: LD_ADDR_EXP 94
26966: PUSH
26967: EMPTY
26968: ST_TO_ADDR
// hackLimit := 3 ;
26969: LD_ADDR_EXP 95
26973: PUSH
26974: LD_INT 3
26976: ST_TO_ADDR
// hackDist := 12 ;
26977: LD_ADDR_EXP 96
26981: PUSH
26982: LD_INT 12
26984: ST_TO_ADDR
// hackCounter := [ ] ;
26985: LD_ADDR_EXP 97
26989: PUSH
26990: EMPTY
26991: ST_TO_ADDR
// end ;
26992: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26993: LD_EXP 92
26997: PUSH
26998: LD_INT 34
27000: PUSH
27001: LD_EXP 16
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PPUSH
27010: CALL_OW 69
27014: AND
27015: IFFALSE 27270
27017: GO 27019
27019: DISABLE
27020: LD_INT 0
27022: PPUSH
27023: PPUSH
// begin enable ;
27024: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27025: LD_ADDR_VAR 0 1
27029: PUSH
27030: LD_INT 34
27032: PUSH
27033: LD_EXP 16
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PPUSH
27042: CALL_OW 69
27046: PUSH
27047: FOR_IN
27048: IFFALSE 27268
// begin if not i in hackTanks then
27050: LD_VAR 0 1
27054: PUSH
27055: LD_EXP 93
27059: IN
27060: NOT
27061: IFFALSE 27144
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27063: LD_ADDR_EXP 93
27067: PUSH
27068: LD_EXP 93
27072: PPUSH
27073: LD_EXP 93
27077: PUSH
27078: LD_INT 1
27080: PLUS
27081: PPUSH
27082: LD_VAR 0 1
27086: PPUSH
27087: CALL_OW 1
27091: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27092: LD_ADDR_EXP 94
27096: PUSH
27097: LD_EXP 94
27101: PPUSH
27102: LD_EXP 94
27106: PUSH
27107: LD_INT 1
27109: PLUS
27110: PPUSH
27111: EMPTY
27112: PPUSH
27113: CALL_OW 1
27117: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27118: LD_ADDR_EXP 97
27122: PUSH
27123: LD_EXP 97
27127: PPUSH
27128: LD_EXP 97
27132: PUSH
27133: LD_INT 1
27135: PLUS
27136: PPUSH
27137: EMPTY
27138: PPUSH
27139: CALL_OW 1
27143: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27144: LD_VAR 0 1
27148: PPUSH
27149: CALL_OW 302
27153: NOT
27154: IFFALSE 27167
// begin HackUnlinkAll ( i ) ;
27156: LD_VAR 0 1
27160: PPUSH
27161: CALL 27273 0 1
// continue ;
27165: GO 27047
// end ; HackCheckCapturedStatus ( i ) ;
27167: LD_VAR 0 1
27171: PPUSH
27172: CALL 27716 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_INT 81
27183: PUSH
27184: LD_VAR 0 1
27188: PPUSH
27189: CALL_OW 255
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 33
27200: PUSH
27201: LD_INT 3
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 91
27210: PUSH
27211: LD_VAR 0 1
27215: PUSH
27216: LD_EXP 96
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 50
27228: PUSH
27229: EMPTY
27230: LIST
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: PPUSH
27238: CALL_OW 69
27242: ST_TO_ADDR
// if not tmp then
27243: LD_VAR 0 2
27247: NOT
27248: IFFALSE 27252
// continue ;
27250: GO 27047
// HackLink ( i , tmp ) ;
27252: LD_VAR 0 1
27256: PPUSH
27257: LD_VAR 0 2
27261: PPUSH
27262: CALL 27409 0 2
// end ;
27266: GO 27047
27268: POP
27269: POP
// end ;
27270: PPOPN 2
27272: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27273: LD_INT 0
27275: PPUSH
27276: PPUSH
27277: PPUSH
// if not hack in hackTanks then
27278: LD_VAR 0 1
27282: PUSH
27283: LD_EXP 93
27287: IN
27288: NOT
27289: IFFALSE 27293
// exit ;
27291: GO 27404
// index := GetElementIndex ( hackTanks , hack ) ;
27293: LD_ADDR_VAR 0 4
27297: PUSH
27298: LD_EXP 93
27302: PPUSH
27303: LD_VAR 0 1
27307: PPUSH
27308: CALL 34878 0 2
27312: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27313: LD_EXP 94
27317: PUSH
27318: LD_VAR 0 4
27322: ARRAY
27323: IFFALSE 27404
// begin for i in hackTanksCaptured [ index ] do
27325: LD_ADDR_VAR 0 3
27329: PUSH
27330: LD_EXP 94
27334: PUSH
27335: LD_VAR 0 4
27339: ARRAY
27340: PUSH
27341: FOR_IN
27342: IFFALSE 27368
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27344: LD_VAR 0 3
27348: PUSH
27349: LD_INT 1
27351: ARRAY
27352: PPUSH
27353: LD_VAR 0 3
27357: PUSH
27358: LD_INT 2
27360: ARRAY
27361: PPUSH
27362: CALL_OW 235
27366: GO 27341
27368: POP
27369: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27370: LD_ADDR_EXP 94
27374: PUSH
27375: LD_EXP 94
27379: PPUSH
27380: LD_VAR 0 4
27384: PPUSH
27385: EMPTY
27386: PPUSH
27387: CALL_OW 1
27391: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27392: LD_VAR 0 1
27396: PPUSH
27397: LD_INT 0
27399: PPUSH
27400: CALL_OW 505
// end ; end ;
27404: LD_VAR 0 2
27408: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27409: LD_INT 0
27411: PPUSH
27412: PPUSH
27413: PPUSH
// if not hack in hackTanks or not vehicles then
27414: LD_VAR 0 1
27418: PUSH
27419: LD_EXP 93
27423: IN
27424: NOT
27425: PUSH
27426: LD_VAR 0 2
27430: NOT
27431: OR
27432: IFFALSE 27436
// exit ;
27434: GO 27711
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27436: LD_ADDR_VAR 0 2
27440: PUSH
27441: LD_VAR 0 1
27445: PPUSH
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_INT 1
27453: PPUSH
27454: LD_INT 1
27456: PPUSH
27457: CALL 35528 0 4
27461: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27462: LD_ADDR_VAR 0 5
27466: PUSH
27467: LD_EXP 93
27471: PPUSH
27472: LD_VAR 0 1
27476: PPUSH
27477: CALL 34878 0 2
27481: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27482: LD_EXP 94
27486: PUSH
27487: LD_VAR 0 5
27491: ARRAY
27492: PUSH
27493: LD_EXP 95
27497: LESS
27498: IFFALSE 27687
// begin for i := 1 to vehicles do
27500: LD_ADDR_VAR 0 4
27504: PUSH
27505: DOUBLE
27506: LD_INT 1
27508: DEC
27509: ST_TO_ADDR
27510: LD_VAR 0 2
27514: PUSH
27515: FOR_TO
27516: IFFALSE 27685
// begin if hackTanksCaptured [ index ] = hackLimit then
27518: LD_EXP 94
27522: PUSH
27523: LD_VAR 0 5
27527: ARRAY
27528: PUSH
27529: LD_EXP 95
27533: EQUAL
27534: IFFALSE 27538
// break ;
27536: GO 27685
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27538: LD_ADDR_EXP 97
27542: PUSH
27543: LD_EXP 97
27547: PPUSH
27548: LD_VAR 0 5
27552: PPUSH
27553: LD_EXP 97
27557: PUSH
27558: LD_VAR 0 5
27562: ARRAY
27563: PUSH
27564: LD_INT 1
27566: PLUS
27567: PPUSH
27568: CALL_OW 1
27572: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27573: LD_ADDR_EXP 94
27577: PUSH
27578: LD_EXP 94
27582: PPUSH
27583: LD_VAR 0 5
27587: PUSH
27588: LD_EXP 94
27592: PUSH
27593: LD_VAR 0 5
27597: ARRAY
27598: PUSH
27599: LD_INT 1
27601: PLUS
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PPUSH
27607: LD_VAR 0 2
27611: PUSH
27612: LD_VAR 0 4
27616: ARRAY
27617: PUSH
27618: LD_VAR 0 2
27622: PUSH
27623: LD_VAR 0 4
27627: ARRAY
27628: PPUSH
27629: CALL_OW 255
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PPUSH
27638: CALL 35093 0 3
27642: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27643: LD_VAR 0 2
27647: PUSH
27648: LD_VAR 0 4
27652: ARRAY
27653: PPUSH
27654: LD_VAR 0 1
27658: PPUSH
27659: CALL_OW 255
27663: PPUSH
27664: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27668: LD_VAR 0 2
27672: PUSH
27673: LD_VAR 0 4
27677: ARRAY
27678: PPUSH
27679: CALL_OW 141
// end ;
27683: GO 27515
27685: POP
27686: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27687: LD_VAR 0 1
27691: PPUSH
27692: LD_EXP 94
27696: PUSH
27697: LD_VAR 0 5
27701: ARRAY
27702: PUSH
27703: LD_INT 0
27705: PLUS
27706: PPUSH
27707: CALL_OW 505
// end ;
27711: LD_VAR 0 3
27715: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27716: LD_INT 0
27718: PPUSH
27719: PPUSH
27720: PPUSH
27721: PPUSH
// if not hack in hackTanks then
27722: LD_VAR 0 1
27726: PUSH
27727: LD_EXP 93
27731: IN
27732: NOT
27733: IFFALSE 27737
// exit ;
27735: GO 27977
// index := GetElementIndex ( hackTanks , hack ) ;
27737: LD_ADDR_VAR 0 4
27741: PUSH
27742: LD_EXP 93
27746: PPUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: CALL 34878 0 2
27756: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27757: LD_ADDR_VAR 0 3
27761: PUSH
27762: DOUBLE
27763: LD_EXP 94
27767: PUSH
27768: LD_VAR 0 4
27772: ARRAY
27773: INC
27774: ST_TO_ADDR
27775: LD_INT 1
27777: PUSH
27778: FOR_DOWNTO
27779: IFFALSE 27951
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27781: LD_ADDR_VAR 0 5
27785: PUSH
27786: LD_EXP 94
27790: PUSH
27791: LD_VAR 0 4
27795: ARRAY
27796: PUSH
27797: LD_VAR 0 3
27801: ARRAY
27802: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27803: LD_VAR 0 5
27807: PUSH
27808: LD_INT 1
27810: ARRAY
27811: PPUSH
27812: CALL_OW 302
27816: NOT
27817: PUSH
27818: LD_VAR 0 5
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: PPUSH
27827: CALL_OW 255
27831: PUSH
27832: LD_VAR 0 1
27836: PPUSH
27837: CALL_OW 255
27841: NONEQUAL
27842: OR
27843: IFFALSE 27949
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27845: LD_VAR 0 5
27849: PUSH
27850: LD_INT 1
27852: ARRAY
27853: PPUSH
27854: CALL_OW 305
27858: PUSH
27859: LD_VAR 0 5
27863: PUSH
27864: LD_INT 1
27866: ARRAY
27867: PPUSH
27868: CALL_OW 255
27872: PUSH
27873: LD_VAR 0 1
27877: PPUSH
27878: CALL_OW 255
27882: EQUAL
27883: AND
27884: IFFALSE 27908
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27886: LD_VAR 0 5
27890: PUSH
27891: LD_INT 1
27893: ARRAY
27894: PPUSH
27895: LD_VAR 0 5
27899: PUSH
27900: LD_INT 2
27902: ARRAY
27903: PPUSH
27904: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27908: LD_ADDR_EXP 94
27912: PUSH
27913: LD_EXP 94
27917: PPUSH
27918: LD_VAR 0 4
27922: PPUSH
27923: LD_EXP 94
27927: PUSH
27928: LD_VAR 0 4
27932: ARRAY
27933: PPUSH
27934: LD_VAR 0 3
27938: PPUSH
27939: CALL_OW 3
27943: PPUSH
27944: CALL_OW 1
27948: ST_TO_ADDR
// end ; end ;
27949: GO 27778
27951: POP
27952: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27953: LD_VAR 0 1
27957: PPUSH
27958: LD_EXP 94
27962: PUSH
27963: LD_VAR 0 4
27967: ARRAY
27968: PUSH
27969: LD_INT 0
27971: PLUS
27972: PPUSH
27973: CALL_OW 505
// end ;
27977: LD_VAR 0 2
27981: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27982: LD_INT 0
27984: PPUSH
27985: PPUSH
27986: PPUSH
27987: PPUSH
// if not hack in hackTanks then
27988: LD_VAR 0 1
27992: PUSH
27993: LD_EXP 93
27997: IN
27998: NOT
27999: IFFALSE 28003
// exit ;
28001: GO 28088
// index := GetElementIndex ( hackTanks , hack ) ;
28003: LD_ADDR_VAR 0 5
28007: PUSH
28008: LD_EXP 93
28012: PPUSH
28013: LD_VAR 0 1
28017: PPUSH
28018: CALL 34878 0 2
28022: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28023: LD_ADDR_VAR 0 4
28027: PUSH
28028: DOUBLE
28029: LD_INT 1
28031: DEC
28032: ST_TO_ADDR
28033: LD_EXP 94
28037: PUSH
28038: LD_VAR 0 5
28042: ARRAY
28043: PUSH
28044: FOR_TO
28045: IFFALSE 28086
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28047: LD_EXP 94
28051: PUSH
28052: LD_VAR 0 5
28056: ARRAY
28057: PUSH
28058: LD_VAR 0 4
28062: ARRAY
28063: PUSH
28064: LD_INT 1
28066: ARRAY
28067: PUSH
28068: LD_VAR 0 2
28072: EQUAL
28073: IFFALSE 28084
// KillUnit ( vehicle ) ;
28075: LD_VAR 0 2
28079: PPUSH
28080: CALL_OW 66
28084: GO 28044
28086: POP
28087: POP
// end ;
28088: LD_VAR 0 3
28092: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28093: LD_EXP 98
28097: NOT
28098: IFFALSE 28133
28100: GO 28102
28102: DISABLE
// begin initMiner := true ;
28103: LD_ADDR_EXP 98
28107: PUSH
28108: LD_INT 1
28110: ST_TO_ADDR
// minersList := [ ] ;
28111: LD_ADDR_EXP 99
28115: PUSH
28116: EMPTY
28117: ST_TO_ADDR
// minerMinesList := [ ] ;
28118: LD_ADDR_EXP 100
28122: PUSH
28123: EMPTY
28124: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28125: LD_ADDR_EXP 101
28129: PUSH
28130: LD_INT 5
28132: ST_TO_ADDR
// end ;
28133: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28134: LD_EXP 98
28138: PUSH
28139: LD_INT 34
28141: PUSH
28142: LD_EXP 21
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PPUSH
28151: CALL_OW 69
28155: AND
28156: IFFALSE 28619
28158: GO 28160
28160: DISABLE
28161: LD_INT 0
28163: PPUSH
28164: PPUSH
28165: PPUSH
28166: PPUSH
// begin enable ;
28167: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28168: LD_ADDR_VAR 0 1
28172: PUSH
28173: LD_INT 34
28175: PUSH
28176: LD_EXP 21
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PPUSH
28185: CALL_OW 69
28189: PUSH
28190: FOR_IN
28191: IFFALSE 28263
// begin if not i in minersList then
28193: LD_VAR 0 1
28197: PUSH
28198: LD_EXP 99
28202: IN
28203: NOT
28204: IFFALSE 28261
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28206: LD_ADDR_EXP 99
28210: PUSH
28211: LD_EXP 99
28215: PPUSH
28216: LD_EXP 99
28220: PUSH
28221: LD_INT 1
28223: PLUS
28224: PPUSH
28225: LD_VAR 0 1
28229: PPUSH
28230: CALL_OW 1
28234: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28235: LD_ADDR_EXP 100
28239: PUSH
28240: LD_EXP 100
28244: PPUSH
28245: LD_EXP 100
28249: PUSH
28250: LD_INT 1
28252: PLUS
28253: PPUSH
28254: EMPTY
28255: PPUSH
28256: CALL_OW 1
28260: ST_TO_ADDR
// end end ;
28261: GO 28190
28263: POP
28264: POP
// for i := minerMinesList downto 1 do
28265: LD_ADDR_VAR 0 1
28269: PUSH
28270: DOUBLE
28271: LD_EXP 100
28275: INC
28276: ST_TO_ADDR
28277: LD_INT 1
28279: PUSH
28280: FOR_DOWNTO
28281: IFFALSE 28617
// begin if IsLive ( minersList [ i ] ) then
28283: LD_EXP 99
28287: PUSH
28288: LD_VAR 0 1
28292: ARRAY
28293: PPUSH
28294: CALL_OW 300
28298: IFFALSE 28326
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28300: LD_EXP 99
28304: PUSH
28305: LD_VAR 0 1
28309: ARRAY
28310: PPUSH
28311: LD_EXP 100
28315: PUSH
28316: LD_VAR 0 1
28320: ARRAY
28321: PPUSH
28322: CALL_OW 505
// if not minerMinesList [ i ] then
28326: LD_EXP 100
28330: PUSH
28331: LD_VAR 0 1
28335: ARRAY
28336: NOT
28337: IFFALSE 28341
// continue ;
28339: GO 28280
// for j := minerMinesList [ i ] downto 1 do
28341: LD_ADDR_VAR 0 2
28345: PUSH
28346: DOUBLE
28347: LD_EXP 100
28351: PUSH
28352: LD_VAR 0 1
28356: ARRAY
28357: INC
28358: ST_TO_ADDR
28359: LD_INT 1
28361: PUSH
28362: FOR_DOWNTO
28363: IFFALSE 28613
// begin side := GetSide ( minersList [ i ] ) ;
28365: LD_ADDR_VAR 0 3
28369: PUSH
28370: LD_EXP 99
28374: PUSH
28375: LD_VAR 0 1
28379: ARRAY
28380: PPUSH
28381: CALL_OW 255
28385: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28386: LD_ADDR_VAR 0 4
28390: PUSH
28391: LD_EXP 100
28395: PUSH
28396: LD_VAR 0 1
28400: ARRAY
28401: PUSH
28402: LD_VAR 0 2
28406: ARRAY
28407: PUSH
28408: LD_INT 1
28410: ARRAY
28411: PPUSH
28412: LD_EXP 100
28416: PUSH
28417: LD_VAR 0 1
28421: ARRAY
28422: PUSH
28423: LD_VAR 0 2
28427: ARRAY
28428: PUSH
28429: LD_INT 2
28431: ARRAY
28432: PPUSH
28433: CALL_OW 428
28437: ST_TO_ADDR
// if not tmp then
28438: LD_VAR 0 4
28442: NOT
28443: IFFALSE 28447
// continue ;
28445: GO 28362
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28447: LD_VAR 0 4
28451: PUSH
28452: LD_INT 81
28454: PUSH
28455: LD_VAR 0 3
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PPUSH
28464: CALL_OW 69
28468: IN
28469: PUSH
28470: LD_EXP 100
28474: PUSH
28475: LD_VAR 0 1
28479: ARRAY
28480: PUSH
28481: LD_VAR 0 2
28485: ARRAY
28486: PUSH
28487: LD_INT 1
28489: ARRAY
28490: PPUSH
28491: LD_EXP 100
28495: PUSH
28496: LD_VAR 0 1
28500: ARRAY
28501: PUSH
28502: LD_VAR 0 2
28506: ARRAY
28507: PUSH
28508: LD_INT 2
28510: ARRAY
28511: PPUSH
28512: CALL_OW 458
28516: AND
28517: IFFALSE 28611
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28519: LD_EXP 100
28523: PUSH
28524: LD_VAR 0 1
28528: ARRAY
28529: PUSH
28530: LD_VAR 0 2
28534: ARRAY
28535: PUSH
28536: LD_INT 1
28538: ARRAY
28539: PPUSH
28540: LD_EXP 100
28544: PUSH
28545: LD_VAR 0 1
28549: ARRAY
28550: PUSH
28551: LD_VAR 0 2
28555: ARRAY
28556: PUSH
28557: LD_INT 2
28559: ARRAY
28560: PPUSH
28561: LD_VAR 0 3
28565: PPUSH
28566: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28570: LD_ADDR_EXP 100
28574: PUSH
28575: LD_EXP 100
28579: PPUSH
28580: LD_VAR 0 1
28584: PPUSH
28585: LD_EXP 100
28589: PUSH
28590: LD_VAR 0 1
28594: ARRAY
28595: PPUSH
28596: LD_VAR 0 2
28600: PPUSH
28601: CALL_OW 3
28605: PPUSH
28606: CALL_OW 1
28610: ST_TO_ADDR
// end ; end ;
28611: GO 28362
28613: POP
28614: POP
// end ;
28615: GO 28280
28617: POP
28618: POP
// end ;
28619: PPOPN 4
28621: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28622: LD_INT 0
28624: PPUSH
28625: PPUSH
// result := false ;
28626: LD_ADDR_VAR 0 4
28630: PUSH
28631: LD_INT 0
28633: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 264
28643: PUSH
28644: LD_EXP 21
28648: EQUAL
28649: NOT
28650: IFFALSE 28654
// exit ;
28652: GO 28894
// index := GetElementIndex ( minersList , unit ) ;
28654: LD_ADDR_VAR 0 5
28658: PUSH
28659: LD_EXP 99
28663: PPUSH
28664: LD_VAR 0 1
28668: PPUSH
28669: CALL 34878 0 2
28673: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28674: LD_EXP 100
28678: PUSH
28679: LD_VAR 0 5
28683: ARRAY
28684: PUSH
28685: LD_EXP 101
28689: GREATEREQUAL
28690: IFFALSE 28694
// exit ;
28692: GO 28894
// ComMoveXY ( unit , x , y ) ;
28694: LD_VAR 0 1
28698: PPUSH
28699: LD_VAR 0 2
28703: PPUSH
28704: LD_VAR 0 3
28708: PPUSH
28709: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28713: LD_INT 35
28715: PPUSH
28716: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28720: LD_VAR 0 1
28724: PPUSH
28725: LD_VAR 0 2
28729: PPUSH
28730: LD_VAR 0 3
28734: PPUSH
28735: CALL 65650 0 3
28739: NOT
28740: PUSH
28741: LD_VAR 0 1
28745: PPUSH
28746: CALL_OW 314
28750: AND
28751: IFFALSE 28755
// exit ;
28753: GO 28894
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28755: LD_VAR 0 2
28759: PPUSH
28760: LD_VAR 0 3
28764: PPUSH
28765: CALL_OW 428
28769: PUSH
28770: LD_VAR 0 1
28774: EQUAL
28775: PUSH
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL_OW 314
28785: NOT
28786: AND
28787: IFFALSE 28713
// PlaySoundXY ( x , y , PlantMine ) ;
28789: LD_VAR 0 2
28793: PPUSH
28794: LD_VAR 0 3
28798: PPUSH
28799: LD_STRING PlantMine
28801: PPUSH
28802: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28806: LD_VAR 0 2
28810: PPUSH
28811: LD_VAR 0 3
28815: PPUSH
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL_OW 255
28825: PPUSH
28826: LD_INT 0
28828: PPUSH
28829: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28833: LD_ADDR_EXP 100
28837: PUSH
28838: LD_EXP 100
28842: PPUSH
28843: LD_VAR 0 5
28847: PUSH
28848: LD_EXP 100
28852: PUSH
28853: LD_VAR 0 5
28857: ARRAY
28858: PUSH
28859: LD_INT 1
28861: PLUS
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PPUSH
28867: LD_VAR 0 2
28871: PUSH
28872: LD_VAR 0 3
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PPUSH
28881: CALL 35093 0 3
28885: ST_TO_ADDR
// result := true ;
28886: LD_ADDR_VAR 0 4
28890: PUSH
28891: LD_INT 1
28893: ST_TO_ADDR
// end ;
28894: LD_VAR 0 4
28898: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28899: LD_INT 0
28901: PPUSH
28902: PPUSH
28903: PPUSH
// if not unit in minersList then
28904: LD_VAR 0 1
28908: PUSH
28909: LD_EXP 99
28913: IN
28914: NOT
28915: IFFALSE 28919
// exit ;
28917: GO 29311
// index := GetElementIndex ( minersList , unit ) ;
28919: LD_ADDR_VAR 0 6
28923: PUSH
28924: LD_EXP 99
28928: PPUSH
28929: LD_VAR 0 1
28933: PPUSH
28934: CALL 34878 0 2
28938: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28939: LD_ADDR_VAR 0 5
28943: PUSH
28944: DOUBLE
28945: LD_EXP 100
28949: PUSH
28950: LD_VAR 0 6
28954: ARRAY
28955: INC
28956: ST_TO_ADDR
28957: LD_INT 1
28959: PUSH
28960: FOR_DOWNTO
28961: IFFALSE 29122
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28963: LD_EXP 100
28967: PUSH
28968: LD_VAR 0 6
28972: ARRAY
28973: PUSH
28974: LD_VAR 0 5
28978: ARRAY
28979: PUSH
28980: LD_INT 1
28982: ARRAY
28983: PUSH
28984: LD_VAR 0 2
28988: EQUAL
28989: PUSH
28990: LD_EXP 100
28994: PUSH
28995: LD_VAR 0 6
28999: ARRAY
29000: PUSH
29001: LD_VAR 0 5
29005: ARRAY
29006: PUSH
29007: LD_INT 2
29009: ARRAY
29010: PUSH
29011: LD_VAR 0 3
29015: EQUAL
29016: AND
29017: IFFALSE 29120
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29019: LD_EXP 100
29023: PUSH
29024: LD_VAR 0 6
29028: ARRAY
29029: PUSH
29030: LD_VAR 0 5
29034: ARRAY
29035: PUSH
29036: LD_INT 1
29038: ARRAY
29039: PPUSH
29040: LD_EXP 100
29044: PUSH
29045: LD_VAR 0 6
29049: ARRAY
29050: PUSH
29051: LD_VAR 0 5
29055: ARRAY
29056: PUSH
29057: LD_INT 2
29059: ARRAY
29060: PPUSH
29061: LD_VAR 0 1
29065: PPUSH
29066: CALL_OW 255
29070: PPUSH
29071: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29075: LD_ADDR_EXP 100
29079: PUSH
29080: LD_EXP 100
29084: PPUSH
29085: LD_VAR 0 6
29089: PPUSH
29090: LD_EXP 100
29094: PUSH
29095: LD_VAR 0 6
29099: ARRAY
29100: PPUSH
29101: LD_VAR 0 5
29105: PPUSH
29106: CALL_OW 3
29110: PPUSH
29111: CALL_OW 1
29115: ST_TO_ADDR
// exit ;
29116: POP
29117: POP
29118: GO 29311
// end ; end ;
29120: GO 28960
29122: POP
29123: POP
// for i := minerMinesList [ index ] downto 1 do
29124: LD_ADDR_VAR 0 5
29128: PUSH
29129: DOUBLE
29130: LD_EXP 100
29134: PUSH
29135: LD_VAR 0 6
29139: ARRAY
29140: INC
29141: ST_TO_ADDR
29142: LD_INT 1
29144: PUSH
29145: FOR_DOWNTO
29146: IFFALSE 29309
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29148: LD_EXP 100
29152: PUSH
29153: LD_VAR 0 6
29157: ARRAY
29158: PUSH
29159: LD_VAR 0 5
29163: ARRAY
29164: PUSH
29165: LD_INT 1
29167: ARRAY
29168: PPUSH
29169: LD_EXP 100
29173: PUSH
29174: LD_VAR 0 6
29178: ARRAY
29179: PUSH
29180: LD_VAR 0 5
29184: ARRAY
29185: PUSH
29186: LD_INT 2
29188: ARRAY
29189: PPUSH
29190: LD_VAR 0 2
29194: PPUSH
29195: LD_VAR 0 3
29199: PPUSH
29200: CALL_OW 298
29204: PUSH
29205: LD_INT 6
29207: LESS
29208: IFFALSE 29307
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29210: LD_EXP 100
29214: PUSH
29215: LD_VAR 0 6
29219: ARRAY
29220: PUSH
29221: LD_VAR 0 5
29225: ARRAY
29226: PUSH
29227: LD_INT 1
29229: ARRAY
29230: PPUSH
29231: LD_EXP 100
29235: PUSH
29236: LD_VAR 0 6
29240: ARRAY
29241: PUSH
29242: LD_VAR 0 5
29246: ARRAY
29247: PUSH
29248: LD_INT 2
29250: ARRAY
29251: PPUSH
29252: LD_VAR 0 1
29256: PPUSH
29257: CALL_OW 255
29261: PPUSH
29262: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29266: LD_ADDR_EXP 100
29270: PUSH
29271: LD_EXP 100
29275: PPUSH
29276: LD_VAR 0 6
29280: PPUSH
29281: LD_EXP 100
29285: PUSH
29286: LD_VAR 0 6
29290: ARRAY
29291: PPUSH
29292: LD_VAR 0 5
29296: PPUSH
29297: CALL_OW 3
29301: PPUSH
29302: CALL_OW 1
29306: ST_TO_ADDR
// end ; end ;
29307: GO 29145
29309: POP
29310: POP
// end ;
29311: LD_VAR 0 4
29315: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29316: LD_INT 0
29318: PPUSH
29319: PPUSH
29320: PPUSH
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
29326: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29327: LD_VAR 0 1
29331: PPUSH
29332: CALL_OW 264
29336: PUSH
29337: LD_EXP 21
29341: EQUAL
29342: NOT
29343: PUSH
29344: LD_VAR 0 1
29348: PUSH
29349: LD_EXP 99
29353: IN
29354: NOT
29355: OR
29356: IFFALSE 29360
// exit ;
29358: GO 29682
// index := GetElementIndex ( minersList , unit ) ;
29360: LD_ADDR_VAR 0 6
29364: PUSH
29365: LD_EXP 99
29369: PPUSH
29370: LD_VAR 0 1
29374: PPUSH
29375: CALL 34878 0 2
29379: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29380: LD_ADDR_VAR 0 8
29384: PUSH
29385: LD_EXP 101
29389: PUSH
29390: LD_EXP 100
29394: PUSH
29395: LD_VAR 0 6
29399: ARRAY
29400: MINUS
29401: ST_TO_ADDR
// if not minesFreeAmount then
29402: LD_VAR 0 8
29406: NOT
29407: IFFALSE 29411
// exit ;
29409: GO 29682
// tmp := [ ] ;
29411: LD_ADDR_VAR 0 7
29415: PUSH
29416: EMPTY
29417: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29418: LD_ADDR_VAR 0 5
29422: PUSH
29423: DOUBLE
29424: LD_INT 1
29426: DEC
29427: ST_TO_ADDR
29428: LD_VAR 0 8
29432: PUSH
29433: FOR_TO
29434: IFFALSE 29629
// begin _d := rand ( 0 , 5 ) ;
29436: LD_ADDR_VAR 0 11
29440: PUSH
29441: LD_INT 0
29443: PPUSH
29444: LD_INT 5
29446: PPUSH
29447: CALL_OW 12
29451: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29452: LD_ADDR_VAR 0 12
29456: PUSH
29457: LD_INT 2
29459: PPUSH
29460: LD_INT 6
29462: PPUSH
29463: CALL_OW 12
29467: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29468: LD_ADDR_VAR 0 9
29472: PUSH
29473: LD_VAR 0 2
29477: PPUSH
29478: LD_VAR 0 11
29482: PPUSH
29483: LD_VAR 0 12
29487: PPUSH
29488: CALL_OW 272
29492: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29493: LD_ADDR_VAR 0 10
29497: PUSH
29498: LD_VAR 0 3
29502: PPUSH
29503: LD_VAR 0 11
29507: PPUSH
29508: LD_VAR 0 12
29512: PPUSH
29513: CALL_OW 273
29517: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29518: LD_VAR 0 9
29522: PPUSH
29523: LD_VAR 0 10
29527: PPUSH
29528: CALL_OW 488
29532: PUSH
29533: LD_VAR 0 9
29537: PUSH
29538: LD_VAR 0 10
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_VAR 0 7
29551: IN
29552: NOT
29553: AND
29554: PUSH
29555: LD_VAR 0 9
29559: PPUSH
29560: LD_VAR 0 10
29564: PPUSH
29565: CALL_OW 458
29569: NOT
29570: AND
29571: IFFALSE 29613
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29573: LD_ADDR_VAR 0 7
29577: PUSH
29578: LD_VAR 0 7
29582: PPUSH
29583: LD_VAR 0 7
29587: PUSH
29588: LD_INT 1
29590: PLUS
29591: PPUSH
29592: LD_VAR 0 9
29596: PUSH
29597: LD_VAR 0 10
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PPUSH
29606: CALL_OW 1
29610: ST_TO_ADDR
29611: GO 29627
// i := i - 1 ;
29613: LD_ADDR_VAR 0 5
29617: PUSH
29618: LD_VAR 0 5
29622: PUSH
29623: LD_INT 1
29625: MINUS
29626: ST_TO_ADDR
// end ;
29627: GO 29433
29629: POP
29630: POP
// for i in tmp do
29631: LD_ADDR_VAR 0 5
29635: PUSH
29636: LD_VAR 0 7
29640: PUSH
29641: FOR_IN
29642: IFFALSE 29680
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29644: LD_VAR 0 1
29648: PPUSH
29649: LD_VAR 0 5
29653: PUSH
29654: LD_INT 1
29656: ARRAY
29657: PPUSH
29658: LD_VAR 0 5
29662: PUSH
29663: LD_INT 2
29665: ARRAY
29666: PPUSH
29667: CALL 28622 0 3
29671: NOT
29672: IFFALSE 29678
// exit ;
29674: POP
29675: POP
29676: GO 29682
29678: GO 29641
29680: POP
29681: POP
// end ;
29682: LD_VAR 0 4
29686: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29687: LD_INT 0
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
29693: PPUSH
29694: PPUSH
29695: PPUSH
// if not GetClass ( unit ) = class_sniper then
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 257
29705: PUSH
29706: LD_INT 5
29708: EQUAL
29709: NOT
29710: IFFALSE 29714
// exit ;
29712: GO 30102
// dist := 8 ;
29714: LD_ADDR_VAR 0 5
29718: PUSH
29719: LD_INT 8
29721: ST_TO_ADDR
// viewRange := 12 ;
29722: LD_ADDR_VAR 0 7
29726: PUSH
29727: LD_INT 12
29729: ST_TO_ADDR
// side := GetSide ( unit ) ;
29730: LD_ADDR_VAR 0 6
29734: PUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 255
29744: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29745: LD_INT 61
29747: PPUSH
29748: LD_VAR 0 6
29752: PPUSH
29753: CALL_OW 321
29757: PUSH
29758: LD_INT 2
29760: EQUAL
29761: IFFALSE 29771
// viewRange := 16 ;
29763: LD_ADDR_VAR 0 7
29767: PUSH
29768: LD_INT 16
29770: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29771: LD_VAR 0 1
29775: PPUSH
29776: LD_VAR 0 2
29780: PPUSH
29781: LD_VAR 0 3
29785: PPUSH
29786: CALL_OW 297
29790: PUSH
29791: LD_VAR 0 5
29795: GREATER
29796: IFFALSE 29875
// begin ComMoveXY ( unit , x , y ) ;
29798: LD_VAR 0 1
29802: PPUSH
29803: LD_VAR 0 2
29807: PPUSH
29808: LD_VAR 0 3
29812: PPUSH
29813: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29817: LD_INT 35
29819: PPUSH
29820: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29824: LD_VAR 0 1
29828: PPUSH
29829: LD_VAR 0 2
29833: PPUSH
29834: LD_VAR 0 3
29838: PPUSH
29839: CALL 65650 0 3
29843: NOT
29844: IFFALSE 29848
// exit ;
29846: GO 30102
// until GetDistUnitXY ( unit , x , y ) < dist ;
29848: LD_VAR 0 1
29852: PPUSH
29853: LD_VAR 0 2
29857: PPUSH
29858: LD_VAR 0 3
29862: PPUSH
29863: CALL_OW 297
29867: PUSH
29868: LD_VAR 0 5
29872: LESS
29873: IFFALSE 29817
// end ; ComTurnXY ( unit , x , y ) ;
29875: LD_VAR 0 1
29879: PPUSH
29880: LD_VAR 0 2
29884: PPUSH
29885: LD_VAR 0 3
29889: PPUSH
29890: CALL_OW 118
// wait ( 5 ) ;
29894: LD_INT 5
29896: PPUSH
29897: CALL_OW 67
// _d := GetDir ( unit ) ;
29901: LD_ADDR_VAR 0 10
29905: PUSH
29906: LD_VAR 0 1
29910: PPUSH
29911: CALL_OW 254
29915: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29916: LD_ADDR_VAR 0 8
29920: PUSH
29921: LD_VAR 0 1
29925: PPUSH
29926: CALL_OW 250
29930: PPUSH
29931: LD_VAR 0 10
29935: PPUSH
29936: LD_VAR 0 5
29940: PPUSH
29941: CALL_OW 272
29945: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29946: LD_ADDR_VAR 0 9
29950: PUSH
29951: LD_VAR 0 1
29955: PPUSH
29956: CALL_OW 251
29960: PPUSH
29961: LD_VAR 0 10
29965: PPUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: CALL_OW 273
29975: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29976: LD_VAR 0 8
29980: PPUSH
29981: LD_VAR 0 9
29985: PPUSH
29986: CALL_OW 488
29990: NOT
29991: IFFALSE 29995
// exit ;
29993: GO 30102
// ComAnimCustom ( unit , 1 ) ;
29995: LD_VAR 0 1
29999: PPUSH
30000: LD_INT 1
30002: PPUSH
30003: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30007: LD_VAR 0 8
30011: PPUSH
30012: LD_VAR 0 9
30016: PPUSH
30017: LD_VAR 0 6
30021: PPUSH
30022: LD_VAR 0 7
30026: PPUSH
30027: CALL_OW 330
// repeat wait ( 1 ) ;
30031: LD_INT 1
30033: PPUSH
30034: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30038: LD_VAR 0 1
30042: PPUSH
30043: CALL_OW 316
30047: PUSH
30048: LD_VAR 0 1
30052: PPUSH
30053: CALL_OW 314
30057: OR
30058: PUSH
30059: LD_VAR 0 1
30063: PPUSH
30064: CALL_OW 302
30068: NOT
30069: OR
30070: PUSH
30071: LD_VAR 0 1
30075: PPUSH
30076: CALL_OW 301
30080: OR
30081: IFFALSE 30031
// RemoveSeeing ( _x , _y , side ) ;
30083: LD_VAR 0 8
30087: PPUSH
30088: LD_VAR 0 9
30092: PPUSH
30093: LD_VAR 0 6
30097: PPUSH
30098: CALL_OW 331
// end ; end_of_file
30102: LD_VAR 0 4
30106: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30107: LD_INT 0
30109: PPUSH
30110: PPUSH
// if exist_mode then
30111: LD_VAR 0 2
30115: IFFALSE 30140
// unit := CreateCharacter ( prefix & ident ) else
30117: LD_ADDR_VAR 0 5
30121: PUSH
30122: LD_VAR 0 3
30126: PUSH
30127: LD_VAR 0 1
30131: STR
30132: PPUSH
30133: CALL_OW 34
30137: ST_TO_ADDR
30138: GO 30155
// unit := NewCharacter ( ident ) ;
30140: LD_ADDR_VAR 0 5
30144: PUSH
30145: LD_VAR 0 1
30149: PPUSH
30150: CALL_OW 25
30154: ST_TO_ADDR
// result := unit ;
30155: LD_ADDR_VAR 0 4
30159: PUSH
30160: LD_VAR 0 5
30164: ST_TO_ADDR
// end ;
30165: LD_VAR 0 4
30169: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30170: LD_INT 0
30172: PPUSH
30173: PPUSH
// if not side or not nation then
30174: LD_VAR 0 1
30178: NOT
30179: PUSH
30180: LD_VAR 0 2
30184: NOT
30185: OR
30186: IFFALSE 30190
// exit ;
30188: GO 30958
// case nation of nation_american :
30190: LD_VAR 0 2
30194: PUSH
30195: LD_INT 1
30197: DOUBLE
30198: EQUAL
30199: IFTRUE 30203
30201: GO 30417
30203: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30204: LD_ADDR_VAR 0 4
30208: PUSH
30209: LD_INT 35
30211: PUSH
30212: LD_INT 45
30214: PUSH
30215: LD_INT 46
30217: PUSH
30218: LD_INT 47
30220: PUSH
30221: LD_INT 82
30223: PUSH
30224: LD_INT 83
30226: PUSH
30227: LD_INT 84
30229: PUSH
30230: LD_INT 85
30232: PUSH
30233: LD_INT 86
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: LD_INT 6
30244: PUSH
30245: LD_INT 15
30247: PUSH
30248: LD_INT 16
30250: PUSH
30251: LD_INT 7
30253: PUSH
30254: LD_INT 12
30256: PUSH
30257: LD_INT 13
30259: PUSH
30260: LD_INT 10
30262: PUSH
30263: LD_INT 14
30265: PUSH
30266: LD_INT 20
30268: PUSH
30269: LD_INT 21
30271: PUSH
30272: LD_INT 22
30274: PUSH
30275: LD_INT 25
30277: PUSH
30278: LD_INT 32
30280: PUSH
30281: LD_INT 27
30283: PUSH
30284: LD_INT 36
30286: PUSH
30287: LD_INT 69
30289: PUSH
30290: LD_INT 39
30292: PUSH
30293: LD_INT 34
30295: PUSH
30296: LD_INT 40
30298: PUSH
30299: LD_INT 48
30301: PUSH
30302: LD_INT 49
30304: PUSH
30305: LD_INT 50
30307: PUSH
30308: LD_INT 51
30310: PUSH
30311: LD_INT 52
30313: PUSH
30314: LD_INT 53
30316: PUSH
30317: LD_INT 54
30319: PUSH
30320: LD_INT 55
30322: PUSH
30323: LD_INT 56
30325: PUSH
30326: LD_INT 57
30328: PUSH
30329: LD_INT 58
30331: PUSH
30332: LD_INT 59
30334: PUSH
30335: LD_INT 60
30337: PUSH
30338: LD_INT 61
30340: PUSH
30341: LD_INT 62
30343: PUSH
30344: LD_INT 80
30346: PUSH
30347: LD_INT 82
30349: PUSH
30350: LD_INT 83
30352: PUSH
30353: LD_INT 84
30355: PUSH
30356: LD_INT 85
30358: PUSH
30359: LD_INT 86
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: ST_TO_ADDR
30415: GO 30882
30417: LD_INT 2
30419: DOUBLE
30420: EQUAL
30421: IFTRUE 30425
30423: GO 30651
30425: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30426: LD_ADDR_VAR 0 4
30430: PUSH
30431: LD_INT 35
30433: PUSH
30434: LD_INT 45
30436: PUSH
30437: LD_INT 46
30439: PUSH
30440: LD_INT 47
30442: PUSH
30443: LD_INT 82
30445: PUSH
30446: LD_INT 83
30448: PUSH
30449: LD_INT 84
30451: PUSH
30452: LD_INT 85
30454: PUSH
30455: LD_INT 87
30457: PUSH
30458: LD_INT 70
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: LD_INT 11
30466: PUSH
30467: LD_INT 3
30469: PUSH
30470: LD_INT 4
30472: PUSH
30473: LD_INT 5
30475: PUSH
30476: LD_INT 6
30478: PUSH
30479: LD_INT 15
30481: PUSH
30482: LD_INT 18
30484: PUSH
30485: LD_INT 7
30487: PUSH
30488: LD_INT 17
30490: PUSH
30491: LD_INT 8
30493: PUSH
30494: LD_INT 20
30496: PUSH
30497: LD_INT 21
30499: PUSH
30500: LD_INT 22
30502: PUSH
30503: LD_INT 72
30505: PUSH
30506: LD_INT 26
30508: PUSH
30509: LD_INT 69
30511: PUSH
30512: LD_INT 39
30514: PUSH
30515: LD_INT 40
30517: PUSH
30518: LD_INT 41
30520: PUSH
30521: LD_INT 42
30523: PUSH
30524: LD_INT 43
30526: PUSH
30527: LD_INT 48
30529: PUSH
30530: LD_INT 49
30532: PUSH
30533: LD_INT 50
30535: PUSH
30536: LD_INT 51
30538: PUSH
30539: LD_INT 52
30541: PUSH
30542: LD_INT 53
30544: PUSH
30545: LD_INT 54
30547: PUSH
30548: LD_INT 55
30550: PUSH
30551: LD_INT 56
30553: PUSH
30554: LD_INT 60
30556: PUSH
30557: LD_INT 61
30559: PUSH
30560: LD_INT 62
30562: PUSH
30563: LD_INT 66
30565: PUSH
30566: LD_INT 67
30568: PUSH
30569: LD_INT 68
30571: PUSH
30572: LD_INT 81
30574: PUSH
30575: LD_INT 82
30577: PUSH
30578: LD_INT 83
30580: PUSH
30581: LD_INT 84
30583: PUSH
30584: LD_INT 85
30586: PUSH
30587: LD_INT 87
30589: PUSH
30590: LD_INT 88
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
30649: GO 30882
30651: LD_INT 3
30653: DOUBLE
30654: EQUAL
30655: IFTRUE 30659
30657: GO 30881
30659: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30660: LD_ADDR_VAR 0 4
30664: PUSH
30665: LD_INT 46
30667: PUSH
30668: LD_INT 47
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: LD_INT 82
30679: PUSH
30680: LD_INT 83
30682: PUSH
30683: LD_INT 84
30685: PUSH
30686: LD_INT 85
30688: PUSH
30689: LD_INT 86
30691: PUSH
30692: LD_INT 11
30694: PUSH
30695: LD_INT 9
30697: PUSH
30698: LD_INT 20
30700: PUSH
30701: LD_INT 19
30703: PUSH
30704: LD_INT 21
30706: PUSH
30707: LD_INT 24
30709: PUSH
30710: LD_INT 22
30712: PUSH
30713: LD_INT 25
30715: PUSH
30716: LD_INT 28
30718: PUSH
30719: LD_INT 29
30721: PUSH
30722: LD_INT 30
30724: PUSH
30725: LD_INT 31
30727: PUSH
30728: LD_INT 37
30730: PUSH
30731: LD_INT 38
30733: PUSH
30734: LD_INT 32
30736: PUSH
30737: LD_INT 27
30739: PUSH
30740: LD_INT 33
30742: PUSH
30743: LD_INT 69
30745: PUSH
30746: LD_INT 39
30748: PUSH
30749: LD_INT 34
30751: PUSH
30752: LD_INT 40
30754: PUSH
30755: LD_INT 71
30757: PUSH
30758: LD_INT 23
30760: PUSH
30761: LD_INT 44
30763: PUSH
30764: LD_INT 48
30766: PUSH
30767: LD_INT 49
30769: PUSH
30770: LD_INT 50
30772: PUSH
30773: LD_INT 51
30775: PUSH
30776: LD_INT 52
30778: PUSH
30779: LD_INT 53
30781: PUSH
30782: LD_INT 54
30784: PUSH
30785: LD_INT 55
30787: PUSH
30788: LD_INT 56
30790: PUSH
30791: LD_INT 57
30793: PUSH
30794: LD_INT 58
30796: PUSH
30797: LD_INT 59
30799: PUSH
30800: LD_INT 63
30802: PUSH
30803: LD_INT 64
30805: PUSH
30806: LD_INT 65
30808: PUSH
30809: LD_INT 82
30811: PUSH
30812: LD_INT 83
30814: PUSH
30815: LD_INT 84
30817: PUSH
30818: LD_INT 85
30820: PUSH
30821: LD_INT 86
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: ST_TO_ADDR
30879: GO 30882
30881: POP
// if state > - 1 and state < 3 then
30882: LD_VAR 0 3
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: GREATER
30891: PUSH
30892: LD_VAR 0 3
30896: PUSH
30897: LD_INT 3
30899: LESS
30900: AND
30901: IFFALSE 30958
// for i in result do
30903: LD_ADDR_VAR 0 5
30907: PUSH
30908: LD_VAR 0 4
30912: PUSH
30913: FOR_IN
30914: IFFALSE 30956
// if GetTech ( i , side ) <> state then
30916: LD_VAR 0 5
30920: PPUSH
30921: LD_VAR 0 1
30925: PPUSH
30926: CALL_OW 321
30930: PUSH
30931: LD_VAR 0 3
30935: NONEQUAL
30936: IFFALSE 30954
// result := result diff i ;
30938: LD_ADDR_VAR 0 4
30942: PUSH
30943: LD_VAR 0 4
30947: PUSH
30948: LD_VAR 0 5
30952: DIFF
30953: ST_TO_ADDR
30954: GO 30913
30956: POP
30957: POP
// end ;
30958: LD_VAR 0 4
30962: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30963: LD_INT 0
30965: PPUSH
30966: PPUSH
30967: PPUSH
// result := true ;
30968: LD_ADDR_VAR 0 3
30972: PUSH
30973: LD_INT 1
30975: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30976: LD_ADDR_VAR 0 5
30980: PUSH
30981: LD_VAR 0 2
30985: PPUSH
30986: CALL_OW 480
30990: ST_TO_ADDR
// if not tmp then
30991: LD_VAR 0 5
30995: NOT
30996: IFFALSE 31000
// exit ;
30998: GO 31049
// for i in tmp do
31000: LD_ADDR_VAR 0 4
31004: PUSH
31005: LD_VAR 0 5
31009: PUSH
31010: FOR_IN
31011: IFFALSE 31047
// if GetTech ( i , side ) <> state_researched then
31013: LD_VAR 0 4
31017: PPUSH
31018: LD_VAR 0 1
31022: PPUSH
31023: CALL_OW 321
31027: PUSH
31028: LD_INT 2
31030: NONEQUAL
31031: IFFALSE 31045
// begin result := false ;
31033: LD_ADDR_VAR 0 3
31037: PUSH
31038: LD_INT 0
31040: ST_TO_ADDR
// exit ;
31041: POP
31042: POP
31043: GO 31049
// end ;
31045: GO 31010
31047: POP
31048: POP
// end ;
31049: LD_VAR 0 3
31053: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31054: LD_INT 0
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31069: LD_VAR 0 1
31073: NOT
31074: PUSH
31075: LD_VAR 0 1
31079: PPUSH
31080: CALL_OW 257
31084: PUSH
31085: LD_INT 9
31087: NONEQUAL
31088: OR
31089: IFFALSE 31093
// exit ;
31091: GO 31666
// side := GetSide ( unit ) ;
31093: LD_ADDR_VAR 0 9
31097: PUSH
31098: LD_VAR 0 1
31102: PPUSH
31103: CALL_OW 255
31107: ST_TO_ADDR
// tech_space := tech_spacanom ;
31108: LD_ADDR_VAR 0 12
31112: PUSH
31113: LD_INT 29
31115: ST_TO_ADDR
// tech_time := tech_taurad ;
31116: LD_ADDR_VAR 0 13
31120: PUSH
31121: LD_INT 28
31123: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31124: LD_ADDR_VAR 0 11
31128: PUSH
31129: LD_VAR 0 1
31133: PPUSH
31134: CALL_OW 310
31138: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31139: LD_VAR 0 11
31143: PPUSH
31144: CALL_OW 247
31148: PUSH
31149: LD_INT 2
31151: EQUAL
31152: IFFALSE 31156
// exit ;
31154: GO 31666
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31156: LD_ADDR_VAR 0 8
31160: PUSH
31161: LD_INT 81
31163: PUSH
31164: LD_VAR 0 9
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 3
31175: PUSH
31176: LD_INT 21
31178: PUSH
31179: LD_INT 3
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PPUSH
31194: CALL_OW 69
31198: ST_TO_ADDR
// if not tmp then
31199: LD_VAR 0 8
31203: NOT
31204: IFFALSE 31208
// exit ;
31206: GO 31666
// if in_unit then
31208: LD_VAR 0 11
31212: IFFALSE 31236
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31214: LD_ADDR_VAR 0 10
31218: PUSH
31219: LD_VAR 0 8
31223: PPUSH
31224: LD_VAR 0 11
31228: PPUSH
31229: CALL_OW 74
31233: ST_TO_ADDR
31234: GO 31256
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31236: LD_ADDR_VAR 0 10
31240: PUSH
31241: LD_VAR 0 8
31245: PPUSH
31246: LD_VAR 0 1
31250: PPUSH
31251: CALL_OW 74
31255: ST_TO_ADDR
// if not enemy then
31256: LD_VAR 0 10
31260: NOT
31261: IFFALSE 31265
// exit ;
31263: GO 31666
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31265: LD_VAR 0 11
31269: PUSH
31270: LD_VAR 0 11
31274: PPUSH
31275: LD_VAR 0 10
31279: PPUSH
31280: CALL_OW 296
31284: PUSH
31285: LD_INT 13
31287: GREATER
31288: AND
31289: PUSH
31290: LD_VAR 0 1
31294: PPUSH
31295: LD_VAR 0 10
31299: PPUSH
31300: CALL_OW 296
31304: PUSH
31305: LD_INT 12
31307: GREATER
31308: OR
31309: IFFALSE 31313
// exit ;
31311: GO 31666
// missile := [ 1 ] ;
31313: LD_ADDR_VAR 0 14
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: EMPTY
31322: LIST
31323: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31324: LD_VAR 0 9
31328: PPUSH
31329: LD_VAR 0 12
31333: PPUSH
31334: CALL_OW 325
31338: IFFALSE 31367
// missile := Insert ( missile , missile + 1 , 2 ) ;
31340: LD_ADDR_VAR 0 14
31344: PUSH
31345: LD_VAR 0 14
31349: PPUSH
31350: LD_VAR 0 14
31354: PUSH
31355: LD_INT 1
31357: PLUS
31358: PPUSH
31359: LD_INT 2
31361: PPUSH
31362: CALL_OW 2
31366: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31367: LD_VAR 0 9
31371: PPUSH
31372: LD_VAR 0 13
31376: PPUSH
31377: CALL_OW 325
31381: PUSH
31382: LD_VAR 0 10
31386: PPUSH
31387: CALL_OW 255
31391: PPUSH
31392: LD_VAR 0 13
31396: PPUSH
31397: CALL_OW 325
31401: NOT
31402: AND
31403: IFFALSE 31432
// missile := Insert ( missile , missile + 1 , 3 ) ;
31405: LD_ADDR_VAR 0 14
31409: PUSH
31410: LD_VAR 0 14
31414: PPUSH
31415: LD_VAR 0 14
31419: PUSH
31420: LD_INT 1
31422: PLUS
31423: PPUSH
31424: LD_INT 3
31426: PPUSH
31427: CALL_OW 2
31431: ST_TO_ADDR
// if missile < 2 then
31432: LD_VAR 0 14
31436: PUSH
31437: LD_INT 2
31439: LESS
31440: IFFALSE 31444
// exit ;
31442: GO 31666
// x := GetX ( enemy ) ;
31444: LD_ADDR_VAR 0 4
31448: PUSH
31449: LD_VAR 0 10
31453: PPUSH
31454: CALL_OW 250
31458: ST_TO_ADDR
// y := GetY ( enemy ) ;
31459: LD_ADDR_VAR 0 5
31463: PUSH
31464: LD_VAR 0 10
31468: PPUSH
31469: CALL_OW 251
31473: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31474: LD_ADDR_VAR 0 6
31478: PUSH
31479: LD_VAR 0 4
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PPUSH
31488: LD_INT 1
31490: PPUSH
31491: CALL_OW 12
31495: PLUS
31496: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31497: LD_ADDR_VAR 0 7
31501: PUSH
31502: LD_VAR 0 5
31506: PUSH
31507: LD_INT 1
31509: NEG
31510: PPUSH
31511: LD_INT 1
31513: PPUSH
31514: CALL_OW 12
31518: PLUS
31519: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31520: LD_VAR 0 6
31524: PPUSH
31525: LD_VAR 0 7
31529: PPUSH
31530: CALL_OW 488
31534: NOT
31535: IFFALSE 31557
// begin _x := x ;
31537: LD_ADDR_VAR 0 6
31541: PUSH
31542: LD_VAR 0 4
31546: ST_TO_ADDR
// _y := y ;
31547: LD_ADDR_VAR 0 7
31551: PUSH
31552: LD_VAR 0 5
31556: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31557: LD_ADDR_VAR 0 3
31561: PUSH
31562: LD_INT 1
31564: PPUSH
31565: LD_VAR 0 14
31569: PPUSH
31570: CALL_OW 12
31574: ST_TO_ADDR
// case i of 1 :
31575: LD_VAR 0 3
31579: PUSH
31580: LD_INT 1
31582: DOUBLE
31583: EQUAL
31584: IFTRUE 31588
31586: GO 31605
31588: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31589: LD_VAR 0 1
31593: PPUSH
31594: LD_VAR 0 10
31598: PPUSH
31599: CALL_OW 115
31603: GO 31666
31605: LD_INT 2
31607: DOUBLE
31608: EQUAL
31609: IFTRUE 31613
31611: GO 31635
31613: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31614: LD_VAR 0 1
31618: PPUSH
31619: LD_VAR 0 6
31623: PPUSH
31624: LD_VAR 0 7
31628: PPUSH
31629: CALL_OW 153
31633: GO 31666
31635: LD_INT 3
31637: DOUBLE
31638: EQUAL
31639: IFTRUE 31643
31641: GO 31665
31643: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31644: LD_VAR 0 1
31648: PPUSH
31649: LD_VAR 0 6
31653: PPUSH
31654: LD_VAR 0 7
31658: PPUSH
31659: CALL_OW 154
31663: GO 31666
31665: POP
// end ;
31666: LD_VAR 0 2
31670: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31671: LD_INT 0
31673: PPUSH
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
// if not unit or not building then
31679: LD_VAR 0 1
31683: NOT
31684: PUSH
31685: LD_VAR 0 2
31689: NOT
31690: OR
31691: IFFALSE 31695
// exit ;
31693: GO 31853
// x := GetX ( building ) ;
31695: LD_ADDR_VAR 0 5
31699: PUSH
31700: LD_VAR 0 2
31704: PPUSH
31705: CALL_OW 250
31709: ST_TO_ADDR
// y := GetY ( building ) ;
31710: LD_ADDR_VAR 0 6
31714: PUSH
31715: LD_VAR 0 2
31719: PPUSH
31720: CALL_OW 251
31724: ST_TO_ADDR
// for i = 0 to 5 do
31725: LD_ADDR_VAR 0 4
31729: PUSH
31730: DOUBLE
31731: LD_INT 0
31733: DEC
31734: ST_TO_ADDR
31735: LD_INT 5
31737: PUSH
31738: FOR_TO
31739: IFFALSE 31851
// begin _x := ShiftX ( x , i , 3 ) ;
31741: LD_ADDR_VAR 0 7
31745: PUSH
31746: LD_VAR 0 5
31750: PPUSH
31751: LD_VAR 0 4
31755: PPUSH
31756: LD_INT 3
31758: PPUSH
31759: CALL_OW 272
31763: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31764: LD_ADDR_VAR 0 8
31768: PUSH
31769: LD_VAR 0 6
31773: PPUSH
31774: LD_VAR 0 4
31778: PPUSH
31779: LD_INT 3
31781: PPUSH
31782: CALL_OW 273
31786: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31787: LD_VAR 0 7
31791: PPUSH
31792: LD_VAR 0 8
31796: PPUSH
31797: CALL_OW 488
31801: NOT
31802: IFFALSE 31806
// continue ;
31804: GO 31738
// if HexInfo ( _x , _y ) = 0 then
31806: LD_VAR 0 7
31810: PPUSH
31811: LD_VAR 0 8
31815: PPUSH
31816: CALL_OW 428
31820: PUSH
31821: LD_INT 0
31823: EQUAL
31824: IFFALSE 31849
// begin ComMoveXY ( unit , _x , _y ) ;
31826: LD_VAR 0 1
31830: PPUSH
31831: LD_VAR 0 7
31835: PPUSH
31836: LD_VAR 0 8
31840: PPUSH
31841: CALL_OW 111
// exit ;
31845: POP
31846: POP
31847: GO 31853
// end ; end ;
31849: GO 31738
31851: POP
31852: POP
// end ;
31853: LD_VAR 0 3
31857: RET
// export function ScanBase ( side , base_area ) ; begin
31858: LD_INT 0
31860: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31861: LD_ADDR_VAR 0 3
31865: PUSH
31866: LD_VAR 0 2
31870: PPUSH
31871: LD_INT 81
31873: PUSH
31874: LD_VAR 0 1
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PPUSH
31883: CALL_OW 70
31887: ST_TO_ADDR
// end ;
31888: LD_VAR 0 3
31892: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31893: LD_INT 0
31895: PPUSH
31896: PPUSH
31897: PPUSH
31898: PPUSH
// result := false ;
31899: LD_ADDR_VAR 0 2
31903: PUSH
31904: LD_INT 0
31906: ST_TO_ADDR
// side := GetSide ( unit ) ;
31907: LD_ADDR_VAR 0 3
31911: PUSH
31912: LD_VAR 0 1
31916: PPUSH
31917: CALL_OW 255
31921: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31922: LD_ADDR_VAR 0 4
31926: PUSH
31927: LD_VAR 0 1
31931: PPUSH
31932: CALL_OW 248
31936: ST_TO_ADDR
// case nat of 1 :
31937: LD_VAR 0 4
31941: PUSH
31942: LD_INT 1
31944: DOUBLE
31945: EQUAL
31946: IFTRUE 31950
31948: GO 31961
31950: POP
// tech := tech_lassight ; 2 :
31951: LD_ADDR_VAR 0 5
31955: PUSH
31956: LD_INT 12
31958: ST_TO_ADDR
31959: GO 32000
31961: LD_INT 2
31963: DOUBLE
31964: EQUAL
31965: IFTRUE 31969
31967: GO 31980
31969: POP
// tech := tech_mortar ; 3 :
31970: LD_ADDR_VAR 0 5
31974: PUSH
31975: LD_INT 41
31977: ST_TO_ADDR
31978: GO 32000
31980: LD_INT 3
31982: DOUBLE
31983: EQUAL
31984: IFTRUE 31988
31986: GO 31999
31988: POP
// tech := tech_bazooka ; end ;
31989: LD_ADDR_VAR 0 5
31993: PUSH
31994: LD_INT 44
31996: ST_TO_ADDR
31997: GO 32000
31999: POP
// if Researched ( side , tech ) then
32000: LD_VAR 0 3
32004: PPUSH
32005: LD_VAR 0 5
32009: PPUSH
32010: CALL_OW 325
32014: IFFALSE 32041
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32016: LD_ADDR_VAR 0 2
32020: PUSH
32021: LD_INT 5
32023: PUSH
32024: LD_INT 8
32026: PUSH
32027: LD_INT 9
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: PUSH
32035: LD_VAR 0 4
32039: ARRAY
32040: ST_TO_ADDR
// end ;
32041: LD_VAR 0 2
32045: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32046: LD_INT 0
32048: PPUSH
32049: PPUSH
32050: PPUSH
// if not mines then
32051: LD_VAR 0 2
32055: NOT
32056: IFFALSE 32060
// exit ;
32058: GO 32204
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32060: LD_ADDR_VAR 0 5
32064: PUSH
32065: LD_INT 81
32067: PUSH
32068: LD_VAR 0 1
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: LD_INT 21
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PPUSH
32098: CALL_OW 69
32102: ST_TO_ADDR
// for i in mines do
32103: LD_ADDR_VAR 0 4
32107: PUSH
32108: LD_VAR 0 2
32112: PUSH
32113: FOR_IN
32114: IFFALSE 32202
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32116: LD_VAR 0 4
32120: PUSH
32121: LD_INT 1
32123: ARRAY
32124: PPUSH
32125: LD_VAR 0 4
32129: PUSH
32130: LD_INT 2
32132: ARRAY
32133: PPUSH
32134: CALL_OW 458
32138: NOT
32139: IFFALSE 32143
// continue ;
32141: GO 32113
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32143: LD_VAR 0 4
32147: PUSH
32148: LD_INT 1
32150: ARRAY
32151: PPUSH
32152: LD_VAR 0 4
32156: PUSH
32157: LD_INT 2
32159: ARRAY
32160: PPUSH
32161: CALL_OW 428
32165: PUSH
32166: LD_VAR 0 5
32170: IN
32171: IFFALSE 32200
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32173: LD_VAR 0 4
32177: PUSH
32178: LD_INT 1
32180: ARRAY
32181: PPUSH
32182: LD_VAR 0 4
32186: PUSH
32187: LD_INT 2
32189: ARRAY
32190: PPUSH
32191: LD_VAR 0 1
32195: PPUSH
32196: CALL_OW 456
// end ;
32200: GO 32113
32202: POP
32203: POP
// end ;
32204: LD_VAR 0 3
32208: RET
// export function Count ( array ) ; var i ; begin
32209: LD_INT 0
32211: PPUSH
32212: PPUSH
// result := 0 ;
32213: LD_ADDR_VAR 0 2
32217: PUSH
32218: LD_INT 0
32220: ST_TO_ADDR
// for i in array do
32221: LD_ADDR_VAR 0 3
32225: PUSH
32226: LD_VAR 0 1
32230: PUSH
32231: FOR_IN
32232: IFFALSE 32256
// if i then
32234: LD_VAR 0 3
32238: IFFALSE 32254
// result := result + 1 ;
32240: LD_ADDR_VAR 0 2
32244: PUSH
32245: LD_VAR 0 2
32249: PUSH
32250: LD_INT 1
32252: PLUS
32253: ST_TO_ADDR
32254: GO 32231
32256: POP
32257: POP
// end ;
32258: LD_VAR 0 2
32262: RET
// export function IsEmpty ( building ) ; begin
32263: LD_INT 0
32265: PPUSH
// if not building then
32266: LD_VAR 0 1
32270: NOT
32271: IFFALSE 32275
// exit ;
32273: GO 32318
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32275: LD_ADDR_VAR 0 2
32279: PUSH
32280: LD_VAR 0 1
32284: PUSH
32285: LD_INT 22
32287: PUSH
32288: LD_VAR 0 1
32292: PPUSH
32293: CALL_OW 255
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 58
32304: PUSH
32305: EMPTY
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PPUSH
32312: CALL_OW 69
32316: IN
32317: ST_TO_ADDR
// end ;
32318: LD_VAR 0 2
32322: RET
// export function IsNotFull ( building ) ; begin
32323: LD_INT 0
32325: PPUSH
// if not building then
32326: LD_VAR 0 1
32330: NOT
32331: IFFALSE 32335
// exit ;
32333: GO 32354
// result := UnitsInside ( building ) < 6 ;
32335: LD_ADDR_VAR 0 2
32339: PUSH
32340: LD_VAR 0 1
32344: PPUSH
32345: CALL_OW 313
32349: PUSH
32350: LD_INT 6
32352: LESS
32353: ST_TO_ADDR
// end ;
32354: LD_VAR 0 2
32358: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32359: LD_INT 0
32361: PPUSH
32362: PPUSH
32363: PPUSH
32364: PPUSH
// tmp := [ ] ;
32365: LD_ADDR_VAR 0 3
32369: PUSH
32370: EMPTY
32371: ST_TO_ADDR
// list := [ ] ;
32372: LD_ADDR_VAR 0 5
32376: PUSH
32377: EMPTY
32378: ST_TO_ADDR
// for i = 16 to 25 do
32379: LD_ADDR_VAR 0 4
32383: PUSH
32384: DOUBLE
32385: LD_INT 16
32387: DEC
32388: ST_TO_ADDR
32389: LD_INT 25
32391: PUSH
32392: FOR_TO
32393: IFFALSE 32466
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32395: LD_ADDR_VAR 0 3
32399: PUSH
32400: LD_VAR 0 3
32404: PUSH
32405: LD_INT 22
32407: PUSH
32408: LD_VAR 0 1
32412: PPUSH
32413: CALL_OW 255
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 91
32424: PUSH
32425: LD_VAR 0 1
32429: PUSH
32430: LD_INT 6
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 30
32440: PUSH
32441: LD_VAR 0 4
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: PUSH
32455: EMPTY
32456: LIST
32457: PPUSH
32458: CALL_OW 69
32462: ADD
32463: ST_TO_ADDR
32464: GO 32392
32466: POP
32467: POP
// for i = 1 to tmp do
32468: LD_ADDR_VAR 0 4
32472: PUSH
32473: DOUBLE
32474: LD_INT 1
32476: DEC
32477: ST_TO_ADDR
32478: LD_VAR 0 3
32482: PUSH
32483: FOR_TO
32484: IFFALSE 32572
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32486: LD_ADDR_VAR 0 5
32490: PUSH
32491: LD_VAR 0 5
32495: PUSH
32496: LD_VAR 0 3
32500: PUSH
32501: LD_VAR 0 4
32505: ARRAY
32506: PPUSH
32507: CALL_OW 266
32511: PUSH
32512: LD_VAR 0 3
32516: PUSH
32517: LD_VAR 0 4
32521: ARRAY
32522: PPUSH
32523: CALL_OW 250
32527: PUSH
32528: LD_VAR 0 3
32532: PUSH
32533: LD_VAR 0 4
32537: ARRAY
32538: PPUSH
32539: CALL_OW 251
32543: PUSH
32544: LD_VAR 0 3
32548: PUSH
32549: LD_VAR 0 4
32553: ARRAY
32554: PPUSH
32555: CALL_OW 254
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: PUSH
32566: EMPTY
32567: LIST
32568: ADD
32569: ST_TO_ADDR
32570: GO 32483
32572: POP
32573: POP
// result := list ;
32574: LD_ADDR_VAR 0 2
32578: PUSH
32579: LD_VAR 0 5
32583: ST_TO_ADDR
// end ;
32584: LD_VAR 0 2
32588: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32589: LD_INT 0
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
// if not factory then
32598: LD_VAR 0 1
32602: NOT
32603: IFFALSE 32607
// exit ;
32605: GO 33200
// if control = control_apeman then
32607: LD_VAR 0 4
32611: PUSH
32612: LD_INT 5
32614: EQUAL
32615: IFFALSE 32724
// begin tmp := UnitsInside ( factory ) ;
32617: LD_ADDR_VAR 0 8
32621: PUSH
32622: LD_VAR 0 1
32626: PPUSH
32627: CALL_OW 313
32631: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32632: LD_VAR 0 8
32636: PPUSH
32637: LD_INT 25
32639: PUSH
32640: LD_INT 12
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PPUSH
32647: CALL_OW 72
32651: NOT
32652: IFFALSE 32662
// control := control_manual ;
32654: LD_ADDR_VAR 0 4
32658: PUSH
32659: LD_INT 1
32661: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32662: LD_ADDR_VAR 0 8
32666: PUSH
32667: LD_VAR 0 1
32671: PPUSH
32672: CALL 32359 0 1
32676: ST_TO_ADDR
// if tmp then
32677: LD_VAR 0 8
32681: IFFALSE 32724
// begin for i in tmp do
32683: LD_ADDR_VAR 0 7
32687: PUSH
32688: LD_VAR 0 8
32692: PUSH
32693: FOR_IN
32694: IFFALSE 32722
// if i [ 1 ] = b_ext_radio then
32696: LD_VAR 0 7
32700: PUSH
32701: LD_INT 1
32703: ARRAY
32704: PUSH
32705: LD_INT 22
32707: EQUAL
32708: IFFALSE 32720
// begin control := control_remote ;
32710: LD_ADDR_VAR 0 4
32714: PUSH
32715: LD_INT 2
32717: ST_TO_ADDR
// break ;
32718: GO 32722
// end ;
32720: GO 32693
32722: POP
32723: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32724: LD_VAR 0 1
32728: PPUSH
32729: LD_VAR 0 2
32733: PPUSH
32734: LD_VAR 0 3
32738: PPUSH
32739: LD_VAR 0 4
32743: PPUSH
32744: LD_VAR 0 5
32748: PPUSH
32749: CALL_OW 448
32753: IFFALSE 32788
// begin result := [ chassis , engine , control , weapon ] ;
32755: LD_ADDR_VAR 0 6
32759: PUSH
32760: LD_VAR 0 2
32764: PUSH
32765: LD_VAR 0 3
32769: PUSH
32770: LD_VAR 0 4
32774: PUSH
32775: LD_VAR 0 5
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: ST_TO_ADDR
// exit ;
32786: GO 33200
// end ; _chassis := AvailableChassisList ( factory ) ;
32788: LD_ADDR_VAR 0 9
32792: PUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 475
32802: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32803: LD_ADDR_VAR 0 11
32807: PUSH
32808: LD_VAR 0 1
32812: PPUSH
32813: CALL_OW 476
32817: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32818: LD_ADDR_VAR 0 12
32822: PUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: CALL_OW 477
32832: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32833: LD_ADDR_VAR 0 10
32837: PUSH
32838: LD_VAR 0 1
32842: PPUSH
32843: CALL_OW 478
32847: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32848: LD_VAR 0 9
32852: NOT
32853: PUSH
32854: LD_VAR 0 11
32858: NOT
32859: OR
32860: PUSH
32861: LD_VAR 0 12
32865: NOT
32866: OR
32867: PUSH
32868: LD_VAR 0 10
32872: NOT
32873: OR
32874: IFFALSE 32909
// begin result := [ chassis , engine , control , weapon ] ;
32876: LD_ADDR_VAR 0 6
32880: PUSH
32881: LD_VAR 0 2
32885: PUSH
32886: LD_VAR 0 3
32890: PUSH
32891: LD_VAR 0 4
32895: PUSH
32896: LD_VAR 0 5
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: ST_TO_ADDR
// exit ;
32907: GO 33200
// end ; if not chassis in _chassis then
32909: LD_VAR 0 2
32913: PUSH
32914: LD_VAR 0 9
32918: IN
32919: NOT
32920: IFFALSE 32946
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32922: LD_ADDR_VAR 0 2
32926: PUSH
32927: LD_VAR 0 9
32931: PUSH
32932: LD_INT 1
32934: PPUSH
32935: LD_VAR 0 9
32939: PPUSH
32940: CALL_OW 12
32944: ARRAY
32945: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32946: LD_VAR 0 2
32950: PPUSH
32951: LD_VAR 0 3
32955: PPUSH
32956: CALL 33205 0 2
32960: NOT
32961: IFFALSE 33020
// repeat engine := _engine [ 1 ] ;
32963: LD_ADDR_VAR 0 3
32967: PUSH
32968: LD_VAR 0 11
32972: PUSH
32973: LD_INT 1
32975: ARRAY
32976: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32977: LD_ADDR_VAR 0 11
32981: PUSH
32982: LD_VAR 0 11
32986: PPUSH
32987: LD_INT 1
32989: PPUSH
32990: CALL_OW 3
32994: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32995: LD_VAR 0 2
32999: PPUSH
33000: LD_VAR 0 3
33004: PPUSH
33005: CALL 33205 0 2
33009: PUSH
33010: LD_VAR 0 11
33014: PUSH
33015: EMPTY
33016: EQUAL
33017: OR
33018: IFFALSE 32963
// if not control in _control then
33020: LD_VAR 0 4
33024: PUSH
33025: LD_VAR 0 12
33029: IN
33030: NOT
33031: IFFALSE 33057
// control := _control [ rand ( 1 , _control ) ] ;
33033: LD_ADDR_VAR 0 4
33037: PUSH
33038: LD_VAR 0 12
33042: PUSH
33043: LD_INT 1
33045: PPUSH
33046: LD_VAR 0 12
33050: PPUSH
33051: CALL_OW 12
33055: ARRAY
33056: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33057: LD_VAR 0 2
33061: PPUSH
33062: LD_VAR 0 5
33066: PPUSH
33067: CALL 33425 0 2
33071: NOT
33072: IFFALSE 33131
// repeat weapon := _weapon [ 1 ] ;
33074: LD_ADDR_VAR 0 5
33078: PUSH
33079: LD_VAR 0 10
33083: PUSH
33084: LD_INT 1
33086: ARRAY
33087: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33088: LD_ADDR_VAR 0 10
33092: PUSH
33093: LD_VAR 0 10
33097: PPUSH
33098: LD_INT 1
33100: PPUSH
33101: CALL_OW 3
33105: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33106: LD_VAR 0 2
33110: PPUSH
33111: LD_VAR 0 5
33115: PPUSH
33116: CALL 33425 0 2
33120: PUSH
33121: LD_VAR 0 10
33125: PUSH
33126: EMPTY
33127: EQUAL
33128: OR
33129: IFFALSE 33074
// result := [ ] ;
33131: LD_ADDR_VAR 0 6
33135: PUSH
33136: EMPTY
33137: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33138: LD_VAR 0 1
33142: PPUSH
33143: LD_VAR 0 2
33147: PPUSH
33148: LD_VAR 0 3
33152: PPUSH
33153: LD_VAR 0 4
33157: PPUSH
33158: LD_VAR 0 5
33162: PPUSH
33163: CALL_OW 448
33167: IFFALSE 33200
// result := [ chassis , engine , control , weapon ] ;
33169: LD_ADDR_VAR 0 6
33173: PUSH
33174: LD_VAR 0 2
33178: PUSH
33179: LD_VAR 0 3
33183: PUSH
33184: LD_VAR 0 4
33188: PUSH
33189: LD_VAR 0 5
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: ST_TO_ADDR
// end ;
33200: LD_VAR 0 6
33204: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33205: LD_INT 0
33207: PPUSH
// if not chassis or not engine then
33208: LD_VAR 0 1
33212: NOT
33213: PUSH
33214: LD_VAR 0 2
33218: NOT
33219: OR
33220: IFFALSE 33224
// exit ;
33222: GO 33420
// case engine of engine_solar :
33224: LD_VAR 0 2
33228: PUSH
33229: LD_INT 2
33231: DOUBLE
33232: EQUAL
33233: IFTRUE 33237
33235: GO 33275
33237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33238: LD_ADDR_VAR 0 3
33242: PUSH
33243: LD_INT 11
33245: PUSH
33246: LD_INT 12
33248: PUSH
33249: LD_INT 13
33251: PUSH
33252: LD_INT 14
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: LD_INT 3
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: ST_TO_ADDR
33273: GO 33404
33275: LD_INT 1
33277: DOUBLE
33278: EQUAL
33279: IFTRUE 33283
33281: GO 33345
33283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33284: LD_ADDR_VAR 0 3
33288: PUSH
33289: LD_INT 11
33291: PUSH
33292: LD_INT 12
33294: PUSH
33295: LD_INT 13
33297: PUSH
33298: LD_INT 14
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 2
33306: PUSH
33307: LD_INT 3
33309: PUSH
33310: LD_INT 4
33312: PUSH
33313: LD_INT 5
33315: PUSH
33316: LD_INT 21
33318: PUSH
33319: LD_INT 23
33321: PUSH
33322: LD_INT 22
33324: PUSH
33325: LD_INT 24
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: ST_TO_ADDR
33343: GO 33404
33345: LD_INT 3
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33353
33351: GO 33403
33353: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33354: LD_ADDR_VAR 0 3
33358: PUSH
33359: LD_INT 13
33361: PUSH
33362: LD_INT 14
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: LD_INT 3
33370: PUSH
33371: LD_INT 4
33373: PUSH
33374: LD_INT 5
33376: PUSH
33377: LD_INT 21
33379: PUSH
33380: LD_INT 22
33382: PUSH
33383: LD_INT 23
33385: PUSH
33386: LD_INT 24
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
33401: GO 33404
33403: POP
// result := ( chassis in result ) ;
33404: LD_ADDR_VAR 0 3
33408: PUSH
33409: LD_VAR 0 1
33413: PUSH
33414: LD_VAR 0 3
33418: IN
33419: ST_TO_ADDR
// end ;
33420: LD_VAR 0 3
33424: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33425: LD_INT 0
33427: PPUSH
// if not chassis or not weapon then
33428: LD_VAR 0 1
33432: NOT
33433: PUSH
33434: LD_VAR 0 2
33438: NOT
33439: OR
33440: IFFALSE 33444
// exit ;
33442: GO 34506
// case weapon of us_machine_gun :
33444: LD_VAR 0 2
33448: PUSH
33449: LD_INT 2
33451: DOUBLE
33452: EQUAL
33453: IFTRUE 33457
33455: GO 33487
33457: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33458: LD_ADDR_VAR 0 3
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 2
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: LD_INT 4
33474: PUSH
33475: LD_INT 5
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: ST_TO_ADDR
33485: GO 34490
33487: LD_INT 3
33489: DOUBLE
33490: EQUAL
33491: IFTRUE 33495
33493: GO 33525
33495: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33496: LD_ADDR_VAR 0 3
33500: PUSH
33501: LD_INT 1
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: LD_INT 4
33512: PUSH
33513: LD_INT 5
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: ST_TO_ADDR
33523: GO 34490
33525: LD_INT 11
33527: DOUBLE
33528: EQUAL
33529: IFTRUE 33533
33531: GO 33563
33533: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33534: LD_ADDR_VAR 0 3
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: LD_INT 3
33547: PUSH
33548: LD_INT 4
33550: PUSH
33551: LD_INT 5
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: ST_TO_ADDR
33561: GO 34490
33563: LD_INT 4
33565: DOUBLE
33566: EQUAL
33567: IFTRUE 33571
33569: GO 33597
33571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33572: LD_ADDR_VAR 0 3
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: LD_INT 3
33582: PUSH
33583: LD_INT 4
33585: PUSH
33586: LD_INT 5
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: ST_TO_ADDR
33595: GO 34490
33597: LD_INT 5
33599: DOUBLE
33600: EQUAL
33601: IFTRUE 33605
33603: GO 33631
33605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33606: LD_ADDR_VAR 0 3
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: LD_INT 3
33616: PUSH
33617: LD_INT 4
33619: PUSH
33620: LD_INT 5
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: ST_TO_ADDR
33629: GO 34490
33631: LD_INT 9
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33639
33637: GO 33665
33639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33640: LD_ADDR_VAR 0 3
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: LD_INT 4
33653: PUSH
33654: LD_INT 5
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
33663: GO 34490
33665: LD_INT 7
33667: DOUBLE
33668: EQUAL
33669: IFTRUE 33673
33671: GO 33699
33673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33674: LD_ADDR_VAR 0 3
33678: PUSH
33679: LD_INT 2
33681: PUSH
33682: LD_INT 3
33684: PUSH
33685: LD_INT 4
33687: PUSH
33688: LD_INT 5
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: ST_TO_ADDR
33697: GO 34490
33699: LD_INT 12
33701: DOUBLE
33702: EQUAL
33703: IFTRUE 33707
33705: GO 33733
33707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33708: LD_ADDR_VAR 0 3
33712: PUSH
33713: LD_INT 2
33715: PUSH
33716: LD_INT 3
33718: PUSH
33719: LD_INT 4
33721: PUSH
33722: LD_INT 5
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: ST_TO_ADDR
33731: GO 34490
33733: LD_INT 13
33735: DOUBLE
33736: EQUAL
33737: IFTRUE 33741
33739: GO 33767
33741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33742: LD_ADDR_VAR 0 3
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: LD_INT 3
33752: PUSH
33753: LD_INT 4
33755: PUSH
33756: LD_INT 5
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: ST_TO_ADDR
33765: GO 34490
33767: LD_INT 14
33769: DOUBLE
33770: EQUAL
33771: IFTRUE 33775
33773: GO 33793
33775: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33776: LD_ADDR_VAR 0 3
33780: PUSH
33781: LD_INT 4
33783: PUSH
33784: LD_INT 5
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: ST_TO_ADDR
33791: GO 34490
33793: LD_INT 6
33795: DOUBLE
33796: EQUAL
33797: IFTRUE 33801
33799: GO 33819
33801: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33802: LD_ADDR_VAR 0 3
33806: PUSH
33807: LD_INT 4
33809: PUSH
33810: LD_INT 5
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: ST_TO_ADDR
33817: GO 34490
33819: LD_INT 10
33821: DOUBLE
33822: EQUAL
33823: IFTRUE 33827
33825: GO 33845
33827: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33828: LD_ADDR_VAR 0 3
33832: PUSH
33833: LD_INT 4
33835: PUSH
33836: LD_INT 5
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: ST_TO_ADDR
33843: GO 34490
33845: LD_INT 22
33847: DOUBLE
33848: EQUAL
33849: IFTRUE 33853
33851: GO 33879
33853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33854: LD_ADDR_VAR 0 3
33858: PUSH
33859: LD_INT 11
33861: PUSH
33862: LD_INT 12
33864: PUSH
33865: LD_INT 13
33867: PUSH
33868: LD_INT 14
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: ST_TO_ADDR
33877: GO 34490
33879: LD_INT 23
33881: DOUBLE
33882: EQUAL
33883: IFTRUE 33887
33885: GO 33913
33887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33888: LD_ADDR_VAR 0 3
33892: PUSH
33893: LD_INT 11
33895: PUSH
33896: LD_INT 12
33898: PUSH
33899: LD_INT 13
33901: PUSH
33902: LD_INT 14
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: ST_TO_ADDR
33911: GO 34490
33913: LD_INT 24
33915: DOUBLE
33916: EQUAL
33917: IFTRUE 33921
33919: GO 33947
33921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33922: LD_ADDR_VAR 0 3
33926: PUSH
33927: LD_INT 11
33929: PUSH
33930: LD_INT 12
33932: PUSH
33933: LD_INT 13
33935: PUSH
33936: LD_INT 14
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: ST_TO_ADDR
33945: GO 34490
33947: LD_INT 30
33949: DOUBLE
33950: EQUAL
33951: IFTRUE 33955
33953: GO 33981
33955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33956: LD_ADDR_VAR 0 3
33960: PUSH
33961: LD_INT 11
33963: PUSH
33964: LD_INT 12
33966: PUSH
33967: LD_INT 13
33969: PUSH
33970: LD_INT 14
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: ST_TO_ADDR
33979: GO 34490
33981: LD_INT 25
33983: DOUBLE
33984: EQUAL
33985: IFTRUE 33989
33987: GO 34007
33989: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33990: LD_ADDR_VAR 0 3
33994: PUSH
33995: LD_INT 13
33997: PUSH
33998: LD_INT 14
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: ST_TO_ADDR
34005: GO 34490
34007: LD_INT 27
34009: DOUBLE
34010: EQUAL
34011: IFTRUE 34015
34013: GO 34033
34015: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34016: LD_ADDR_VAR 0 3
34020: PUSH
34021: LD_INT 13
34023: PUSH
34024: LD_INT 14
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: ST_TO_ADDR
34031: GO 34490
34033: LD_EXP 19
34037: DOUBLE
34038: EQUAL
34039: IFTRUE 34043
34041: GO 34069
34043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34044: LD_ADDR_VAR 0 3
34048: PUSH
34049: LD_INT 11
34051: PUSH
34052: LD_INT 12
34054: PUSH
34055: LD_INT 13
34057: PUSH
34058: LD_INT 14
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: ST_TO_ADDR
34067: GO 34490
34069: LD_INT 28
34071: DOUBLE
34072: EQUAL
34073: IFTRUE 34077
34075: GO 34095
34077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34078: LD_ADDR_VAR 0 3
34082: PUSH
34083: LD_INT 13
34085: PUSH
34086: LD_INT 14
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: ST_TO_ADDR
34093: GO 34490
34095: LD_INT 29
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34103
34101: GO 34121
34103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34104: LD_ADDR_VAR 0 3
34108: PUSH
34109: LD_INT 13
34111: PUSH
34112: LD_INT 14
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: ST_TO_ADDR
34119: GO 34490
34121: LD_INT 31
34123: DOUBLE
34124: EQUAL
34125: IFTRUE 34129
34127: GO 34147
34129: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34130: LD_ADDR_VAR 0 3
34134: PUSH
34135: LD_INT 13
34137: PUSH
34138: LD_INT 14
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: ST_TO_ADDR
34145: GO 34490
34147: LD_INT 26
34149: DOUBLE
34150: EQUAL
34151: IFTRUE 34155
34153: GO 34173
34155: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34156: LD_ADDR_VAR 0 3
34160: PUSH
34161: LD_INT 13
34163: PUSH
34164: LD_INT 14
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: ST_TO_ADDR
34171: GO 34490
34173: LD_INT 42
34175: DOUBLE
34176: EQUAL
34177: IFTRUE 34181
34179: GO 34207
34181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34182: LD_ADDR_VAR 0 3
34186: PUSH
34187: LD_INT 21
34189: PUSH
34190: LD_INT 22
34192: PUSH
34193: LD_INT 23
34195: PUSH
34196: LD_INT 24
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: ST_TO_ADDR
34205: GO 34490
34207: LD_INT 43
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34241
34215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34216: LD_ADDR_VAR 0 3
34220: PUSH
34221: LD_INT 21
34223: PUSH
34224: LD_INT 22
34226: PUSH
34227: LD_INT 23
34229: PUSH
34230: LD_INT 24
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: ST_TO_ADDR
34239: GO 34490
34241: LD_INT 44
34243: DOUBLE
34244: EQUAL
34245: IFTRUE 34249
34247: GO 34275
34249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34250: LD_ADDR_VAR 0 3
34254: PUSH
34255: LD_INT 21
34257: PUSH
34258: LD_INT 22
34260: PUSH
34261: LD_INT 23
34263: PUSH
34264: LD_INT 24
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: ST_TO_ADDR
34273: GO 34490
34275: LD_INT 45
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34283
34281: GO 34309
34283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34284: LD_ADDR_VAR 0 3
34288: PUSH
34289: LD_INT 21
34291: PUSH
34292: LD_INT 22
34294: PUSH
34295: LD_INT 23
34297: PUSH
34298: LD_INT 24
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: ST_TO_ADDR
34307: GO 34490
34309: LD_INT 49
34311: DOUBLE
34312: EQUAL
34313: IFTRUE 34317
34315: GO 34343
34317: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: LD_INT 21
34325: PUSH
34326: LD_INT 22
34328: PUSH
34329: LD_INT 23
34331: PUSH
34332: LD_INT 24
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: ST_TO_ADDR
34341: GO 34490
34343: LD_INT 51
34345: DOUBLE
34346: EQUAL
34347: IFTRUE 34351
34349: GO 34377
34351: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34352: LD_ADDR_VAR 0 3
34356: PUSH
34357: LD_INT 21
34359: PUSH
34360: LD_INT 22
34362: PUSH
34363: LD_INT 23
34365: PUSH
34366: LD_INT 24
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: ST_TO_ADDR
34375: GO 34490
34377: LD_INT 52
34379: DOUBLE
34380: EQUAL
34381: IFTRUE 34385
34383: GO 34411
34385: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34386: LD_ADDR_VAR 0 3
34390: PUSH
34391: LD_INT 21
34393: PUSH
34394: LD_INT 22
34396: PUSH
34397: LD_INT 23
34399: PUSH
34400: LD_INT 24
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: ST_TO_ADDR
34409: GO 34490
34411: LD_INT 53
34413: DOUBLE
34414: EQUAL
34415: IFTRUE 34419
34417: GO 34437
34419: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34420: LD_ADDR_VAR 0 3
34424: PUSH
34425: LD_INT 23
34427: PUSH
34428: LD_INT 24
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: ST_TO_ADDR
34435: GO 34490
34437: LD_INT 46
34439: DOUBLE
34440: EQUAL
34441: IFTRUE 34445
34443: GO 34463
34445: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34446: LD_ADDR_VAR 0 3
34450: PUSH
34451: LD_INT 23
34453: PUSH
34454: LD_INT 24
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: ST_TO_ADDR
34461: GO 34490
34463: LD_INT 47
34465: DOUBLE
34466: EQUAL
34467: IFTRUE 34471
34469: GO 34489
34471: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34472: LD_ADDR_VAR 0 3
34476: PUSH
34477: LD_INT 23
34479: PUSH
34480: LD_INT 24
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: ST_TO_ADDR
34487: GO 34490
34489: POP
// result := ( chassis in result ) ;
34490: LD_ADDR_VAR 0 3
34494: PUSH
34495: LD_VAR 0 1
34499: PUSH
34500: LD_VAR 0 3
34504: IN
34505: ST_TO_ADDR
// end ;
34506: LD_VAR 0 3
34510: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34511: LD_INT 0
34513: PPUSH
34514: PPUSH
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
// result := array ;
34520: LD_ADDR_VAR 0 5
34524: PUSH
34525: LD_VAR 0 1
34529: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34530: LD_VAR 0 1
34534: NOT
34535: PUSH
34536: LD_VAR 0 2
34540: NOT
34541: OR
34542: PUSH
34543: LD_VAR 0 3
34547: NOT
34548: OR
34549: PUSH
34550: LD_VAR 0 2
34554: PUSH
34555: LD_VAR 0 1
34559: GREATER
34560: OR
34561: PUSH
34562: LD_VAR 0 3
34566: PUSH
34567: LD_VAR 0 1
34571: GREATER
34572: OR
34573: IFFALSE 34577
// exit ;
34575: GO 34873
// if direction then
34577: LD_VAR 0 4
34581: IFFALSE 34645
// begin d := 1 ;
34583: LD_ADDR_VAR 0 9
34587: PUSH
34588: LD_INT 1
34590: ST_TO_ADDR
// if i_from > i_to then
34591: LD_VAR 0 2
34595: PUSH
34596: LD_VAR 0 3
34600: GREATER
34601: IFFALSE 34627
// length := ( array - i_from ) + i_to else
34603: LD_ADDR_VAR 0 11
34607: PUSH
34608: LD_VAR 0 1
34612: PUSH
34613: LD_VAR 0 2
34617: MINUS
34618: PUSH
34619: LD_VAR 0 3
34623: PLUS
34624: ST_TO_ADDR
34625: GO 34643
// length := i_to - i_from ;
34627: LD_ADDR_VAR 0 11
34631: PUSH
34632: LD_VAR 0 3
34636: PUSH
34637: LD_VAR 0 2
34641: MINUS
34642: ST_TO_ADDR
// end else
34643: GO 34706
// begin d := - 1 ;
34645: LD_ADDR_VAR 0 9
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: ST_TO_ADDR
// if i_from > i_to then
34654: LD_VAR 0 2
34658: PUSH
34659: LD_VAR 0 3
34663: GREATER
34664: IFFALSE 34684
// length := i_from - i_to else
34666: LD_ADDR_VAR 0 11
34670: PUSH
34671: LD_VAR 0 2
34675: PUSH
34676: LD_VAR 0 3
34680: MINUS
34681: ST_TO_ADDR
34682: GO 34706
// length := ( array - i_to ) + i_from ;
34684: LD_ADDR_VAR 0 11
34688: PUSH
34689: LD_VAR 0 1
34693: PUSH
34694: LD_VAR 0 3
34698: MINUS
34699: PUSH
34700: LD_VAR 0 2
34704: PLUS
34705: ST_TO_ADDR
// end ; if not length then
34706: LD_VAR 0 11
34710: NOT
34711: IFFALSE 34715
// exit ;
34713: GO 34873
// tmp := array ;
34715: LD_ADDR_VAR 0 10
34719: PUSH
34720: LD_VAR 0 1
34724: ST_TO_ADDR
// for i = 1 to length do
34725: LD_ADDR_VAR 0 6
34729: PUSH
34730: DOUBLE
34731: LD_INT 1
34733: DEC
34734: ST_TO_ADDR
34735: LD_VAR 0 11
34739: PUSH
34740: FOR_TO
34741: IFFALSE 34861
// begin for j = 1 to array do
34743: LD_ADDR_VAR 0 7
34747: PUSH
34748: DOUBLE
34749: LD_INT 1
34751: DEC
34752: ST_TO_ADDR
34753: LD_VAR 0 1
34757: PUSH
34758: FOR_TO
34759: IFFALSE 34847
// begin k := j + d ;
34761: LD_ADDR_VAR 0 8
34765: PUSH
34766: LD_VAR 0 7
34770: PUSH
34771: LD_VAR 0 9
34775: PLUS
34776: ST_TO_ADDR
// if k > array then
34777: LD_VAR 0 8
34781: PUSH
34782: LD_VAR 0 1
34786: GREATER
34787: IFFALSE 34797
// k := 1 ;
34789: LD_ADDR_VAR 0 8
34793: PUSH
34794: LD_INT 1
34796: ST_TO_ADDR
// if not k then
34797: LD_VAR 0 8
34801: NOT
34802: IFFALSE 34814
// k := array ;
34804: LD_ADDR_VAR 0 8
34808: PUSH
34809: LD_VAR 0 1
34813: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34814: LD_ADDR_VAR 0 10
34818: PUSH
34819: LD_VAR 0 10
34823: PPUSH
34824: LD_VAR 0 8
34828: PPUSH
34829: LD_VAR 0 1
34833: PUSH
34834: LD_VAR 0 7
34838: ARRAY
34839: PPUSH
34840: CALL_OW 1
34844: ST_TO_ADDR
// end ;
34845: GO 34758
34847: POP
34848: POP
// array := tmp ;
34849: LD_ADDR_VAR 0 1
34853: PUSH
34854: LD_VAR 0 10
34858: ST_TO_ADDR
// end ;
34859: GO 34740
34861: POP
34862: POP
// result := array ;
34863: LD_ADDR_VAR 0 5
34867: PUSH
34868: LD_VAR 0 1
34872: ST_TO_ADDR
// end ;
34873: LD_VAR 0 5
34877: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34878: LD_INT 0
34880: PPUSH
34881: PPUSH
// result := 0 ;
34882: LD_ADDR_VAR 0 3
34886: PUSH
34887: LD_INT 0
34889: ST_TO_ADDR
// if not array or not value in array then
34890: LD_VAR 0 1
34894: NOT
34895: PUSH
34896: LD_VAR 0 2
34900: PUSH
34901: LD_VAR 0 1
34905: IN
34906: NOT
34907: OR
34908: IFFALSE 34912
// exit ;
34910: GO 34966
// for i = 1 to array do
34912: LD_ADDR_VAR 0 4
34916: PUSH
34917: DOUBLE
34918: LD_INT 1
34920: DEC
34921: ST_TO_ADDR
34922: LD_VAR 0 1
34926: PUSH
34927: FOR_TO
34928: IFFALSE 34964
// if value = array [ i ] then
34930: LD_VAR 0 2
34934: PUSH
34935: LD_VAR 0 1
34939: PUSH
34940: LD_VAR 0 4
34944: ARRAY
34945: EQUAL
34946: IFFALSE 34962
// begin result := i ;
34948: LD_ADDR_VAR 0 3
34952: PUSH
34953: LD_VAR 0 4
34957: ST_TO_ADDR
// exit ;
34958: POP
34959: POP
34960: GO 34966
// end ;
34962: GO 34927
34964: POP
34965: POP
// end ;
34966: LD_VAR 0 3
34970: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34971: LD_INT 0
34973: PPUSH
// vc_chassis := chassis ;
34974: LD_ADDR_OWVAR 37
34978: PUSH
34979: LD_VAR 0 1
34983: ST_TO_ADDR
// vc_engine := engine ;
34984: LD_ADDR_OWVAR 39
34988: PUSH
34989: LD_VAR 0 2
34993: ST_TO_ADDR
// vc_control := control ;
34994: LD_ADDR_OWVAR 38
34998: PUSH
34999: LD_VAR 0 3
35003: ST_TO_ADDR
// vc_weapon := weapon ;
35004: LD_ADDR_OWVAR 40
35008: PUSH
35009: LD_VAR 0 4
35013: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35014: LD_ADDR_OWVAR 41
35018: PUSH
35019: LD_VAR 0 5
35023: ST_TO_ADDR
// end ;
35024: LD_VAR 0 6
35028: RET
// export function WantPlant ( unit ) ; var task ; begin
35029: LD_INT 0
35031: PPUSH
35032: PPUSH
// result := false ;
35033: LD_ADDR_VAR 0 2
35037: PUSH
35038: LD_INT 0
35040: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35041: LD_ADDR_VAR 0 3
35045: PUSH
35046: LD_VAR 0 1
35050: PPUSH
35051: CALL_OW 437
35055: ST_TO_ADDR
// if task then
35056: LD_VAR 0 3
35060: IFFALSE 35088
// if task [ 1 ] [ 1 ] = p then
35062: LD_VAR 0 3
35066: PUSH
35067: LD_INT 1
35069: ARRAY
35070: PUSH
35071: LD_INT 1
35073: ARRAY
35074: PUSH
35075: LD_STRING p
35077: EQUAL
35078: IFFALSE 35088
// result := true ;
35080: LD_ADDR_VAR 0 2
35084: PUSH
35085: LD_INT 1
35087: ST_TO_ADDR
// end ;
35088: LD_VAR 0 2
35092: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35093: LD_INT 0
35095: PPUSH
35096: PPUSH
35097: PPUSH
35098: PPUSH
// if pos < 1 then
35099: LD_VAR 0 2
35103: PUSH
35104: LD_INT 1
35106: LESS
35107: IFFALSE 35111
// exit ;
35109: GO 35414
// if pos = 1 then
35111: LD_VAR 0 2
35115: PUSH
35116: LD_INT 1
35118: EQUAL
35119: IFFALSE 35152
// result := Replace ( arr , pos [ 1 ] , value ) else
35121: LD_ADDR_VAR 0 4
35125: PUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: LD_VAR 0 2
35135: PUSH
35136: LD_INT 1
35138: ARRAY
35139: PPUSH
35140: LD_VAR 0 3
35144: PPUSH
35145: CALL_OW 1
35149: ST_TO_ADDR
35150: GO 35414
// begin tmp := arr ;
35152: LD_ADDR_VAR 0 6
35156: PUSH
35157: LD_VAR 0 1
35161: ST_TO_ADDR
// s_arr := [ tmp ] ;
35162: LD_ADDR_VAR 0 7
35166: PUSH
35167: LD_VAR 0 6
35171: PUSH
35172: EMPTY
35173: LIST
35174: ST_TO_ADDR
// for i = 1 to pos - 1 do
35175: LD_ADDR_VAR 0 5
35179: PUSH
35180: DOUBLE
35181: LD_INT 1
35183: DEC
35184: ST_TO_ADDR
35185: LD_VAR 0 2
35189: PUSH
35190: LD_INT 1
35192: MINUS
35193: PUSH
35194: FOR_TO
35195: IFFALSE 35240
// begin tmp := tmp [ pos [ i ] ] ;
35197: LD_ADDR_VAR 0 6
35201: PUSH
35202: LD_VAR 0 6
35206: PUSH
35207: LD_VAR 0 2
35211: PUSH
35212: LD_VAR 0 5
35216: ARRAY
35217: ARRAY
35218: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35219: LD_ADDR_VAR 0 7
35223: PUSH
35224: LD_VAR 0 7
35228: PUSH
35229: LD_VAR 0 6
35233: PUSH
35234: EMPTY
35235: LIST
35236: ADD
35237: ST_TO_ADDR
// end ;
35238: GO 35194
35240: POP
35241: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35242: LD_ADDR_VAR 0 6
35246: PUSH
35247: LD_VAR 0 6
35251: PPUSH
35252: LD_VAR 0 2
35256: PUSH
35257: LD_VAR 0 2
35261: ARRAY
35262: PPUSH
35263: LD_VAR 0 3
35267: PPUSH
35268: CALL_OW 1
35272: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35273: LD_ADDR_VAR 0 7
35277: PUSH
35278: LD_VAR 0 7
35282: PPUSH
35283: LD_VAR 0 7
35287: PPUSH
35288: LD_VAR 0 6
35292: PPUSH
35293: CALL_OW 1
35297: ST_TO_ADDR
// for i = s_arr downto 2 do
35298: LD_ADDR_VAR 0 5
35302: PUSH
35303: DOUBLE
35304: LD_VAR 0 7
35308: INC
35309: ST_TO_ADDR
35310: LD_INT 2
35312: PUSH
35313: FOR_DOWNTO
35314: IFFALSE 35398
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35316: LD_ADDR_VAR 0 6
35320: PUSH
35321: LD_VAR 0 7
35325: PUSH
35326: LD_VAR 0 5
35330: PUSH
35331: LD_INT 1
35333: MINUS
35334: ARRAY
35335: PPUSH
35336: LD_VAR 0 2
35340: PUSH
35341: LD_VAR 0 5
35345: PUSH
35346: LD_INT 1
35348: MINUS
35349: ARRAY
35350: PPUSH
35351: LD_VAR 0 7
35355: PUSH
35356: LD_VAR 0 5
35360: ARRAY
35361: PPUSH
35362: CALL_OW 1
35366: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35367: LD_ADDR_VAR 0 7
35371: PUSH
35372: LD_VAR 0 7
35376: PPUSH
35377: LD_VAR 0 5
35381: PUSH
35382: LD_INT 1
35384: MINUS
35385: PPUSH
35386: LD_VAR 0 6
35390: PPUSH
35391: CALL_OW 1
35395: ST_TO_ADDR
// end ;
35396: GO 35313
35398: POP
35399: POP
// result := s_arr [ 1 ] ;
35400: LD_ADDR_VAR 0 4
35404: PUSH
35405: LD_VAR 0 7
35409: PUSH
35410: LD_INT 1
35412: ARRAY
35413: ST_TO_ADDR
// end ; end ;
35414: LD_VAR 0 4
35418: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35419: LD_INT 0
35421: PPUSH
35422: PPUSH
// if not list then
35423: LD_VAR 0 1
35427: NOT
35428: IFFALSE 35432
// exit ;
35430: GO 35523
// i := list [ pos1 ] ;
35432: LD_ADDR_VAR 0 5
35436: PUSH
35437: LD_VAR 0 1
35441: PUSH
35442: LD_VAR 0 2
35446: ARRAY
35447: ST_TO_ADDR
// if not i then
35448: LD_VAR 0 5
35452: NOT
35453: IFFALSE 35457
// exit ;
35455: GO 35523
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35457: LD_ADDR_VAR 0 1
35461: PUSH
35462: LD_VAR 0 1
35466: PPUSH
35467: LD_VAR 0 2
35471: PPUSH
35472: LD_VAR 0 1
35476: PUSH
35477: LD_VAR 0 3
35481: ARRAY
35482: PPUSH
35483: CALL_OW 1
35487: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35488: LD_ADDR_VAR 0 1
35492: PUSH
35493: LD_VAR 0 1
35497: PPUSH
35498: LD_VAR 0 3
35502: PPUSH
35503: LD_VAR 0 5
35507: PPUSH
35508: CALL_OW 1
35512: ST_TO_ADDR
// result := list ;
35513: LD_ADDR_VAR 0 4
35517: PUSH
35518: LD_VAR 0 1
35522: ST_TO_ADDR
// end ;
35523: LD_VAR 0 4
35527: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35528: LD_INT 0
35530: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35531: LD_ADDR_VAR 0 5
35535: PUSH
35536: LD_VAR 0 1
35540: PPUSH
35541: CALL_OW 250
35545: PPUSH
35546: LD_VAR 0 1
35550: PPUSH
35551: CALL_OW 251
35555: PPUSH
35556: LD_VAR 0 2
35560: PPUSH
35561: LD_VAR 0 3
35565: PPUSH
35566: LD_VAR 0 4
35570: PPUSH
35571: CALL 35581 0 5
35575: ST_TO_ADDR
// end ;
35576: LD_VAR 0 5
35580: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35581: LD_INT 0
35583: PPUSH
35584: PPUSH
35585: PPUSH
35586: PPUSH
// if not list then
35587: LD_VAR 0 3
35591: NOT
35592: IFFALSE 35596
// exit ;
35594: GO 35984
// result := [ ] ;
35596: LD_ADDR_VAR 0 6
35600: PUSH
35601: EMPTY
35602: ST_TO_ADDR
// for i in list do
35603: LD_ADDR_VAR 0 7
35607: PUSH
35608: LD_VAR 0 3
35612: PUSH
35613: FOR_IN
35614: IFFALSE 35816
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35616: LD_ADDR_VAR 0 9
35620: PUSH
35621: LD_VAR 0 7
35625: PPUSH
35626: LD_VAR 0 1
35630: PPUSH
35631: LD_VAR 0 2
35635: PPUSH
35636: CALL_OW 297
35640: ST_TO_ADDR
// if not result then
35641: LD_VAR 0 6
35645: NOT
35646: IFFALSE 35672
// result := [ [ i , tmp ] ] else
35648: LD_ADDR_VAR 0 6
35652: PUSH
35653: LD_VAR 0 7
35657: PUSH
35658: LD_VAR 0 9
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: EMPTY
35668: LIST
35669: ST_TO_ADDR
35670: GO 35814
// begin if result [ result ] [ 2 ] < tmp then
35672: LD_VAR 0 6
35676: PUSH
35677: LD_VAR 0 6
35681: ARRAY
35682: PUSH
35683: LD_INT 2
35685: ARRAY
35686: PUSH
35687: LD_VAR 0 9
35691: LESS
35692: IFFALSE 35734
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35694: LD_ADDR_VAR 0 6
35698: PUSH
35699: LD_VAR 0 6
35703: PPUSH
35704: LD_VAR 0 6
35708: PUSH
35709: LD_INT 1
35711: PLUS
35712: PPUSH
35713: LD_VAR 0 7
35717: PUSH
35718: LD_VAR 0 9
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PPUSH
35727: CALL_OW 2
35731: ST_TO_ADDR
35732: GO 35814
// for j = 1 to result do
35734: LD_ADDR_VAR 0 8
35738: PUSH
35739: DOUBLE
35740: LD_INT 1
35742: DEC
35743: ST_TO_ADDR
35744: LD_VAR 0 6
35748: PUSH
35749: FOR_TO
35750: IFFALSE 35812
// begin if tmp < result [ j ] [ 2 ] then
35752: LD_VAR 0 9
35756: PUSH
35757: LD_VAR 0 6
35761: PUSH
35762: LD_VAR 0 8
35766: ARRAY
35767: PUSH
35768: LD_INT 2
35770: ARRAY
35771: LESS
35772: IFFALSE 35810
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35774: LD_ADDR_VAR 0 6
35778: PUSH
35779: LD_VAR 0 6
35783: PPUSH
35784: LD_VAR 0 8
35788: PPUSH
35789: LD_VAR 0 7
35793: PUSH
35794: LD_VAR 0 9
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PPUSH
35803: CALL_OW 2
35807: ST_TO_ADDR
// break ;
35808: GO 35812
// end ; end ;
35810: GO 35749
35812: POP
35813: POP
// end ; end ;
35814: GO 35613
35816: POP
35817: POP
// if result and not asc then
35818: LD_VAR 0 6
35822: PUSH
35823: LD_VAR 0 4
35827: NOT
35828: AND
35829: IFFALSE 35904
// begin tmp := result ;
35831: LD_ADDR_VAR 0 9
35835: PUSH
35836: LD_VAR 0 6
35840: ST_TO_ADDR
// for i = tmp downto 1 do
35841: LD_ADDR_VAR 0 7
35845: PUSH
35846: DOUBLE
35847: LD_VAR 0 9
35851: INC
35852: ST_TO_ADDR
35853: LD_INT 1
35855: PUSH
35856: FOR_DOWNTO
35857: IFFALSE 35902
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35859: LD_ADDR_VAR 0 6
35863: PUSH
35864: LD_VAR 0 6
35868: PPUSH
35869: LD_VAR 0 9
35873: PUSH
35874: LD_VAR 0 7
35878: MINUS
35879: PUSH
35880: LD_INT 1
35882: PLUS
35883: PPUSH
35884: LD_VAR 0 9
35888: PUSH
35889: LD_VAR 0 7
35893: ARRAY
35894: PPUSH
35895: CALL_OW 1
35899: ST_TO_ADDR
35900: GO 35856
35902: POP
35903: POP
// end ; tmp := [ ] ;
35904: LD_ADDR_VAR 0 9
35908: PUSH
35909: EMPTY
35910: ST_TO_ADDR
// if mode then
35911: LD_VAR 0 5
35915: IFFALSE 35984
// begin for i = 1 to result do
35917: LD_ADDR_VAR 0 7
35921: PUSH
35922: DOUBLE
35923: LD_INT 1
35925: DEC
35926: ST_TO_ADDR
35927: LD_VAR 0 6
35931: PUSH
35932: FOR_TO
35933: IFFALSE 35972
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35935: LD_ADDR_VAR 0 9
35939: PUSH
35940: LD_VAR 0 9
35944: PPUSH
35945: LD_VAR 0 7
35949: PPUSH
35950: LD_VAR 0 6
35954: PUSH
35955: LD_VAR 0 7
35959: ARRAY
35960: PUSH
35961: LD_INT 1
35963: ARRAY
35964: PPUSH
35965: CALL_OW 1
35969: ST_TO_ADDR
35970: GO 35932
35972: POP
35973: POP
// result := tmp ;
35974: LD_ADDR_VAR 0 6
35978: PUSH
35979: LD_VAR 0 9
35983: ST_TO_ADDR
// end ; end ;
35984: LD_VAR 0 6
35988: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35989: LD_INT 0
35991: PPUSH
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35997: LD_ADDR_VAR 0 5
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: ST_TO_ADDR
// if not x or not y then
36019: LD_VAR 0 2
36023: NOT
36024: PUSH
36025: LD_VAR 0 3
36029: NOT
36030: OR
36031: IFFALSE 36035
// exit ;
36033: GO 37687
// if not range then
36035: LD_VAR 0 4
36039: NOT
36040: IFFALSE 36050
// range := 10 ;
36042: LD_ADDR_VAR 0 4
36046: PUSH
36047: LD_INT 10
36049: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36050: LD_ADDR_VAR 0 8
36054: PUSH
36055: LD_INT 81
36057: PUSH
36058: LD_VAR 0 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 92
36069: PUSH
36070: LD_VAR 0 2
36074: PUSH
36075: LD_VAR 0 3
36079: PUSH
36080: LD_VAR 0 4
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 3
36093: PUSH
36094: LD_INT 21
36096: PUSH
36097: LD_INT 3
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: PPUSH
36113: CALL_OW 69
36117: ST_TO_ADDR
// if not tmp then
36118: LD_VAR 0 8
36122: NOT
36123: IFFALSE 36127
// exit ;
36125: GO 37687
// for i in tmp do
36127: LD_ADDR_VAR 0 6
36131: PUSH
36132: LD_VAR 0 8
36136: PUSH
36137: FOR_IN
36138: IFFALSE 37662
// begin points := [ 0 , 0 , 0 ] ;
36140: LD_ADDR_VAR 0 9
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: ST_TO_ADDR
// bpoints := 1 ;
36159: LD_ADDR_VAR 0 10
36163: PUSH
36164: LD_INT 1
36166: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36167: LD_VAR 0 6
36171: PPUSH
36172: CALL_OW 247
36176: PUSH
36177: LD_INT 1
36179: DOUBLE
36180: EQUAL
36181: IFTRUE 36185
36183: GO 36763
36185: POP
// begin if GetClass ( i ) = 1 then
36186: LD_VAR 0 6
36190: PPUSH
36191: CALL_OW 257
36195: PUSH
36196: LD_INT 1
36198: EQUAL
36199: IFFALSE 36220
// points := [ 10 , 5 , 3 ] ;
36201: LD_ADDR_VAR 0 9
36205: PUSH
36206: LD_INT 10
36208: PUSH
36209: LD_INT 5
36211: PUSH
36212: LD_INT 3
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36220: LD_VAR 0 6
36224: PPUSH
36225: CALL_OW 257
36229: PUSH
36230: LD_INT 2
36232: PUSH
36233: LD_INT 3
36235: PUSH
36236: LD_INT 4
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: LIST
36243: IN
36244: IFFALSE 36265
// points := [ 3 , 2 , 1 ] ;
36246: LD_ADDR_VAR 0 9
36250: PUSH
36251: LD_INT 3
36253: PUSH
36254: LD_INT 2
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36265: LD_VAR 0 6
36269: PPUSH
36270: CALL_OW 257
36274: PUSH
36275: LD_INT 5
36277: EQUAL
36278: IFFALSE 36299
// points := [ 130 , 5 , 2 ] ;
36280: LD_ADDR_VAR 0 9
36284: PUSH
36285: LD_INT 130
36287: PUSH
36288: LD_INT 5
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36299: LD_VAR 0 6
36303: PPUSH
36304: CALL_OW 257
36308: PUSH
36309: LD_INT 8
36311: EQUAL
36312: IFFALSE 36333
// points := [ 35 , 35 , 30 ] ;
36314: LD_ADDR_VAR 0 9
36318: PUSH
36319: LD_INT 35
36321: PUSH
36322: LD_INT 35
36324: PUSH
36325: LD_INT 30
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36333: LD_VAR 0 6
36337: PPUSH
36338: CALL_OW 257
36342: PUSH
36343: LD_INT 9
36345: EQUAL
36346: IFFALSE 36367
// points := [ 20 , 55 , 40 ] ;
36348: LD_ADDR_VAR 0 9
36352: PUSH
36353: LD_INT 20
36355: PUSH
36356: LD_INT 55
36358: PUSH
36359: LD_INT 40
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36367: LD_VAR 0 6
36371: PPUSH
36372: CALL_OW 257
36376: PUSH
36377: LD_INT 12
36379: PUSH
36380: LD_INT 16
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: IN
36387: IFFALSE 36408
// points := [ 5 , 3 , 2 ] ;
36389: LD_ADDR_VAR 0 9
36393: PUSH
36394: LD_INT 5
36396: PUSH
36397: LD_INT 3
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36408: LD_VAR 0 6
36412: PPUSH
36413: CALL_OW 257
36417: PUSH
36418: LD_INT 17
36420: EQUAL
36421: IFFALSE 36442
// points := [ 100 , 50 , 75 ] ;
36423: LD_ADDR_VAR 0 9
36427: PUSH
36428: LD_INT 100
36430: PUSH
36431: LD_INT 50
36433: PUSH
36434: LD_INT 75
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36442: LD_VAR 0 6
36446: PPUSH
36447: CALL_OW 257
36451: PUSH
36452: LD_INT 15
36454: EQUAL
36455: IFFALSE 36476
// points := [ 10 , 5 , 3 ] ;
36457: LD_ADDR_VAR 0 9
36461: PUSH
36462: LD_INT 10
36464: PUSH
36465: LD_INT 5
36467: PUSH
36468: LD_INT 3
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36476: LD_VAR 0 6
36480: PPUSH
36481: CALL_OW 257
36485: PUSH
36486: LD_INT 14
36488: EQUAL
36489: IFFALSE 36510
// points := [ 10 , 0 , 0 ] ;
36491: LD_ADDR_VAR 0 9
36495: PUSH
36496: LD_INT 10
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36510: LD_VAR 0 6
36514: PPUSH
36515: CALL_OW 257
36519: PUSH
36520: LD_INT 11
36522: EQUAL
36523: IFFALSE 36544
// points := [ 30 , 10 , 5 ] ;
36525: LD_ADDR_VAR 0 9
36529: PUSH
36530: LD_INT 30
36532: PUSH
36533: LD_INT 10
36535: PUSH
36536: LD_INT 5
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36544: LD_VAR 0 1
36548: PPUSH
36549: LD_INT 5
36551: PPUSH
36552: CALL_OW 321
36556: PUSH
36557: LD_INT 2
36559: EQUAL
36560: IFFALSE 36577
// bpoints := bpoints * 1.8 ;
36562: LD_ADDR_VAR 0 10
36566: PUSH
36567: LD_VAR 0 10
36571: PUSH
36572: LD_REAL  1.80000000000000E+0000
36575: MUL
36576: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36577: LD_VAR 0 6
36581: PPUSH
36582: CALL_OW 257
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: LD_INT 2
36592: PUSH
36593: LD_INT 3
36595: PUSH
36596: LD_INT 4
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: IN
36605: PUSH
36606: LD_VAR 0 1
36610: PPUSH
36611: LD_INT 51
36613: PPUSH
36614: CALL_OW 321
36618: PUSH
36619: LD_INT 2
36621: EQUAL
36622: AND
36623: IFFALSE 36640
// bpoints := bpoints * 1.2 ;
36625: LD_ADDR_VAR 0 10
36629: PUSH
36630: LD_VAR 0 10
36634: PUSH
36635: LD_REAL  1.20000000000000E+0000
36638: MUL
36639: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36640: LD_VAR 0 6
36644: PPUSH
36645: CALL_OW 257
36649: PUSH
36650: LD_INT 5
36652: PUSH
36653: LD_INT 7
36655: PUSH
36656: LD_INT 9
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: IN
36664: PUSH
36665: LD_VAR 0 1
36669: PPUSH
36670: LD_INT 52
36672: PPUSH
36673: CALL_OW 321
36677: PUSH
36678: LD_INT 2
36680: EQUAL
36681: AND
36682: IFFALSE 36699
// bpoints := bpoints * 1.5 ;
36684: LD_ADDR_VAR 0 10
36688: PUSH
36689: LD_VAR 0 10
36693: PUSH
36694: LD_REAL  1.50000000000000E+0000
36697: MUL
36698: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36699: LD_VAR 0 1
36703: PPUSH
36704: LD_INT 66
36706: PPUSH
36707: CALL_OW 321
36711: PUSH
36712: LD_INT 2
36714: EQUAL
36715: IFFALSE 36732
// bpoints := bpoints * 1.1 ;
36717: LD_ADDR_VAR 0 10
36721: PUSH
36722: LD_VAR 0 10
36726: PUSH
36727: LD_REAL  1.10000000000000E+0000
36730: MUL
36731: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36732: LD_ADDR_VAR 0 10
36736: PUSH
36737: LD_VAR 0 10
36741: PUSH
36742: LD_VAR 0 6
36746: PPUSH
36747: LD_INT 1
36749: PPUSH
36750: CALL_OW 259
36754: PUSH
36755: LD_REAL  1.15000000000000E+0000
36758: MUL
36759: MUL
36760: ST_TO_ADDR
// end ; unit_vehicle :
36761: GO 37591
36763: LD_INT 2
36765: DOUBLE
36766: EQUAL
36767: IFTRUE 36771
36769: GO 37579
36771: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36772: LD_VAR 0 6
36776: PPUSH
36777: CALL_OW 264
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: LD_INT 42
36787: PUSH
36788: LD_INT 24
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: IN
36796: IFFALSE 36817
// points := [ 25 , 5 , 3 ] ;
36798: LD_ADDR_VAR 0 9
36802: PUSH
36803: LD_INT 25
36805: PUSH
36806: LD_INT 5
36808: PUSH
36809: LD_INT 3
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36817: LD_VAR 0 6
36821: PPUSH
36822: CALL_OW 264
36826: PUSH
36827: LD_INT 4
36829: PUSH
36830: LD_INT 43
36832: PUSH
36833: LD_INT 25
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: IN
36841: IFFALSE 36862
// points := [ 40 , 15 , 5 ] ;
36843: LD_ADDR_VAR 0 9
36847: PUSH
36848: LD_INT 40
36850: PUSH
36851: LD_INT 15
36853: PUSH
36854: LD_INT 5
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36862: LD_VAR 0 6
36866: PPUSH
36867: CALL_OW 264
36871: PUSH
36872: LD_INT 3
36874: PUSH
36875: LD_INT 23
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: IN
36882: IFFALSE 36903
// points := [ 7 , 25 , 8 ] ;
36884: LD_ADDR_VAR 0 9
36888: PUSH
36889: LD_INT 7
36891: PUSH
36892: LD_INT 25
36894: PUSH
36895: LD_INT 8
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36903: LD_VAR 0 6
36907: PPUSH
36908: CALL_OW 264
36912: PUSH
36913: LD_INT 5
36915: PUSH
36916: LD_INT 27
36918: PUSH
36919: LD_INT 44
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: IN
36927: IFFALSE 36948
// points := [ 14 , 50 , 16 ] ;
36929: LD_ADDR_VAR 0 9
36933: PUSH
36934: LD_INT 14
36936: PUSH
36937: LD_INT 50
36939: PUSH
36940: LD_INT 16
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36948: LD_VAR 0 6
36952: PPUSH
36953: CALL_OW 264
36957: PUSH
36958: LD_INT 6
36960: PUSH
36961: LD_INT 46
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: IN
36968: IFFALSE 36989
// points := [ 32 , 120 , 70 ] ;
36970: LD_ADDR_VAR 0 9
36974: PUSH
36975: LD_INT 32
36977: PUSH
36978: LD_INT 120
36980: PUSH
36981: LD_INT 70
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: LIST
36988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36989: LD_VAR 0 6
36993: PPUSH
36994: CALL_OW 264
36998: PUSH
36999: LD_INT 7
37001: PUSH
37002: LD_INT 28
37004: PUSH
37005: LD_INT 45
37007: PUSH
37008: LD_EXP 19
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: IN
37019: IFFALSE 37040
// points := [ 35 , 20 , 45 ] ;
37021: LD_ADDR_VAR 0 9
37025: PUSH
37026: LD_INT 35
37028: PUSH
37029: LD_INT 20
37031: PUSH
37032: LD_INT 45
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37040: LD_VAR 0 6
37044: PPUSH
37045: CALL_OW 264
37049: PUSH
37050: LD_INT 47
37052: PUSH
37053: EMPTY
37054: LIST
37055: IN
37056: IFFALSE 37077
// points := [ 67 , 45 , 75 ] ;
37058: LD_ADDR_VAR 0 9
37062: PUSH
37063: LD_INT 67
37065: PUSH
37066: LD_INT 45
37068: PUSH
37069: LD_INT 75
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37077: LD_VAR 0 6
37081: PPUSH
37082: CALL_OW 264
37086: PUSH
37087: LD_INT 26
37089: PUSH
37090: EMPTY
37091: LIST
37092: IN
37093: IFFALSE 37114
// points := [ 120 , 30 , 80 ] ;
37095: LD_ADDR_VAR 0 9
37099: PUSH
37100: LD_INT 120
37102: PUSH
37103: LD_INT 30
37105: PUSH
37106: LD_INT 80
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37114: LD_VAR 0 6
37118: PPUSH
37119: CALL_OW 264
37123: PUSH
37124: LD_INT 22
37126: PUSH
37127: EMPTY
37128: LIST
37129: IN
37130: IFFALSE 37151
// points := [ 40 , 1 , 1 ] ;
37132: LD_ADDR_VAR 0 9
37136: PUSH
37137: LD_INT 40
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37151: LD_VAR 0 6
37155: PPUSH
37156: CALL_OW 264
37160: PUSH
37161: LD_INT 29
37163: PUSH
37164: EMPTY
37165: LIST
37166: IN
37167: IFFALSE 37188
// points := [ 70 , 200 , 400 ] ;
37169: LD_ADDR_VAR 0 9
37173: PUSH
37174: LD_INT 70
37176: PUSH
37177: LD_INT 200
37179: PUSH
37180: LD_INT 400
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37188: LD_VAR 0 6
37192: PPUSH
37193: CALL_OW 264
37197: PUSH
37198: LD_INT 14
37200: PUSH
37201: LD_INT 53
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: IN
37208: IFFALSE 37229
// points := [ 40 , 10 , 20 ] ;
37210: LD_ADDR_VAR 0 9
37214: PUSH
37215: LD_INT 40
37217: PUSH
37218: LD_INT 10
37220: PUSH
37221: LD_INT 20
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37229: LD_VAR 0 6
37233: PPUSH
37234: CALL_OW 264
37238: PUSH
37239: LD_INT 9
37241: PUSH
37242: EMPTY
37243: LIST
37244: IN
37245: IFFALSE 37266
// points := [ 5 , 70 , 20 ] ;
37247: LD_ADDR_VAR 0 9
37251: PUSH
37252: LD_INT 5
37254: PUSH
37255: LD_INT 70
37257: PUSH
37258: LD_INT 20
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37266: LD_VAR 0 6
37270: PPUSH
37271: CALL_OW 264
37275: PUSH
37276: LD_INT 10
37278: PUSH
37279: EMPTY
37280: LIST
37281: IN
37282: IFFALSE 37303
// points := [ 35 , 110 , 70 ] ;
37284: LD_ADDR_VAR 0 9
37288: PUSH
37289: LD_INT 35
37291: PUSH
37292: LD_INT 110
37294: PUSH
37295: LD_INT 70
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37303: LD_VAR 0 6
37307: PPUSH
37308: CALL_OW 265
37312: PUSH
37313: LD_INT 25
37315: EQUAL
37316: IFFALSE 37337
// points := [ 80 , 65 , 100 ] ;
37318: LD_ADDR_VAR 0 9
37322: PUSH
37323: LD_INT 80
37325: PUSH
37326: LD_INT 65
37328: PUSH
37329: LD_INT 100
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37337: LD_VAR 0 6
37341: PPUSH
37342: CALL_OW 263
37346: PUSH
37347: LD_INT 1
37349: EQUAL
37350: IFFALSE 37385
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37352: LD_ADDR_VAR 0 10
37356: PUSH
37357: LD_VAR 0 10
37361: PUSH
37362: LD_VAR 0 6
37366: PPUSH
37367: CALL_OW 311
37371: PPUSH
37372: LD_INT 3
37374: PPUSH
37375: CALL_OW 259
37379: PUSH
37380: LD_INT 4
37382: MUL
37383: MUL
37384: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37385: LD_VAR 0 6
37389: PPUSH
37390: CALL_OW 263
37394: PUSH
37395: LD_INT 2
37397: EQUAL
37398: IFFALSE 37449
// begin j := IsControledBy ( i ) ;
37400: LD_ADDR_VAR 0 7
37404: PUSH
37405: LD_VAR 0 6
37409: PPUSH
37410: CALL_OW 312
37414: ST_TO_ADDR
// if j then
37415: LD_VAR 0 7
37419: IFFALSE 37449
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37421: LD_ADDR_VAR 0 10
37425: PUSH
37426: LD_VAR 0 10
37430: PUSH
37431: LD_VAR 0 7
37435: PPUSH
37436: LD_INT 3
37438: PPUSH
37439: CALL_OW 259
37443: PUSH
37444: LD_INT 3
37446: MUL
37447: MUL
37448: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37449: LD_VAR 0 6
37453: PPUSH
37454: CALL_OW 264
37458: PUSH
37459: LD_INT 5
37461: PUSH
37462: LD_INT 6
37464: PUSH
37465: LD_INT 46
37467: PUSH
37468: LD_INT 44
37470: PUSH
37471: LD_INT 47
37473: PUSH
37474: LD_INT 45
37476: PUSH
37477: LD_INT 28
37479: PUSH
37480: LD_INT 7
37482: PUSH
37483: LD_INT 27
37485: PUSH
37486: LD_INT 29
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: IN
37501: PUSH
37502: LD_VAR 0 1
37506: PPUSH
37507: LD_INT 52
37509: PPUSH
37510: CALL_OW 321
37514: PUSH
37515: LD_INT 2
37517: EQUAL
37518: AND
37519: IFFALSE 37536
// bpoints := bpoints * 1.2 ;
37521: LD_ADDR_VAR 0 10
37525: PUSH
37526: LD_VAR 0 10
37530: PUSH
37531: LD_REAL  1.20000000000000E+0000
37534: MUL
37535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37536: LD_VAR 0 6
37540: PPUSH
37541: CALL_OW 264
37545: PUSH
37546: LD_INT 6
37548: PUSH
37549: LD_INT 46
37551: PUSH
37552: LD_INT 47
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: IN
37560: IFFALSE 37577
// bpoints := bpoints * 1.2 ;
37562: LD_ADDR_VAR 0 10
37566: PUSH
37567: LD_VAR 0 10
37571: PUSH
37572: LD_REAL  1.20000000000000E+0000
37575: MUL
37576: ST_TO_ADDR
// end ; unit_building :
37577: GO 37591
37579: LD_INT 3
37581: DOUBLE
37582: EQUAL
37583: IFTRUE 37587
37585: GO 37590
37587: POP
// ; end ;
37588: GO 37591
37590: POP
// for j = 1 to 3 do
37591: LD_ADDR_VAR 0 7
37595: PUSH
37596: DOUBLE
37597: LD_INT 1
37599: DEC
37600: ST_TO_ADDR
37601: LD_INT 3
37603: PUSH
37604: FOR_TO
37605: IFFALSE 37658
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37607: LD_ADDR_VAR 0 5
37611: PUSH
37612: LD_VAR 0 5
37616: PPUSH
37617: LD_VAR 0 7
37621: PPUSH
37622: LD_VAR 0 5
37626: PUSH
37627: LD_VAR 0 7
37631: ARRAY
37632: PUSH
37633: LD_VAR 0 9
37637: PUSH
37638: LD_VAR 0 7
37642: ARRAY
37643: PUSH
37644: LD_VAR 0 10
37648: MUL
37649: PLUS
37650: PPUSH
37651: CALL_OW 1
37655: ST_TO_ADDR
37656: GO 37604
37658: POP
37659: POP
// end ;
37660: GO 36137
37662: POP
37663: POP
// result := Replace ( result , 4 , tmp ) ;
37664: LD_ADDR_VAR 0 5
37668: PUSH
37669: LD_VAR 0 5
37673: PPUSH
37674: LD_INT 4
37676: PPUSH
37677: LD_VAR 0 8
37681: PPUSH
37682: CALL_OW 1
37686: ST_TO_ADDR
// end ;
37687: LD_VAR 0 5
37691: RET
// export function DangerAtRange ( unit , range ) ; begin
37692: LD_INT 0
37694: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: LD_VAR 0 1
37704: PPUSH
37705: CALL_OW 255
37709: PPUSH
37710: LD_VAR 0 1
37714: PPUSH
37715: CALL_OW 250
37719: PPUSH
37720: LD_VAR 0 1
37724: PPUSH
37725: CALL_OW 251
37729: PPUSH
37730: LD_VAR 0 2
37734: PPUSH
37735: CALL 35989 0 4
37739: ST_TO_ADDR
// end ;
37740: LD_VAR 0 3
37744: RET
// export function DangerInArea ( side , area ) ; begin
37745: LD_INT 0
37747: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37748: LD_ADDR_VAR 0 3
37752: PUSH
37753: LD_VAR 0 2
37757: PPUSH
37758: LD_INT 81
37760: PUSH
37761: LD_VAR 0 1
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PPUSH
37770: CALL_OW 70
37774: ST_TO_ADDR
// end ;
37775: LD_VAR 0 3
37779: RET
// export function IsExtension ( b ) ; begin
37780: LD_INT 0
37782: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37783: LD_ADDR_VAR 0 2
37787: PUSH
37788: LD_VAR 0 1
37792: PUSH
37793: LD_INT 23
37795: PUSH
37796: LD_INT 20
37798: PUSH
37799: LD_INT 22
37801: PUSH
37802: LD_INT 17
37804: PUSH
37805: LD_INT 24
37807: PUSH
37808: LD_INT 21
37810: PUSH
37811: LD_INT 19
37813: PUSH
37814: LD_INT 16
37816: PUSH
37817: LD_INT 25
37819: PUSH
37820: LD_INT 18
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: IN
37835: ST_TO_ADDR
// end ;
37836: LD_VAR 0 2
37840: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37841: LD_INT 0
37843: PPUSH
37844: PPUSH
37845: PPUSH
// result := [ ] ;
37846: LD_ADDR_VAR 0 4
37850: PUSH
37851: EMPTY
37852: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37853: LD_ADDR_VAR 0 5
37857: PUSH
37858: LD_VAR 0 2
37862: PPUSH
37863: LD_INT 21
37865: PUSH
37866: LD_INT 3
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PPUSH
37873: CALL_OW 70
37877: ST_TO_ADDR
// if not tmp then
37878: LD_VAR 0 5
37882: NOT
37883: IFFALSE 37887
// exit ;
37885: GO 37951
// if checkLink then
37887: LD_VAR 0 3
37891: IFFALSE 37941
// begin for i in tmp do
37893: LD_ADDR_VAR 0 6
37897: PUSH
37898: LD_VAR 0 5
37902: PUSH
37903: FOR_IN
37904: IFFALSE 37939
// if GetBase ( i ) <> base then
37906: LD_VAR 0 6
37910: PPUSH
37911: CALL_OW 274
37915: PUSH
37916: LD_VAR 0 1
37920: NONEQUAL
37921: IFFALSE 37937
// ComLinkToBase ( base , i ) ;
37923: LD_VAR 0 1
37927: PPUSH
37928: LD_VAR 0 6
37932: PPUSH
37933: CALL_OW 169
37937: GO 37903
37939: POP
37940: POP
// end ; result := tmp ;
37941: LD_ADDR_VAR 0 4
37945: PUSH
37946: LD_VAR 0 5
37950: ST_TO_ADDR
// end ;
37951: LD_VAR 0 4
37955: RET
// export function ComComplete ( units , b ) ; var i ; begin
37956: LD_INT 0
37958: PPUSH
37959: PPUSH
// if not units then
37960: LD_VAR 0 1
37964: NOT
37965: IFFALSE 37969
// exit ;
37967: GO 38059
// for i in units do
37969: LD_ADDR_VAR 0 4
37973: PUSH
37974: LD_VAR 0 1
37978: PUSH
37979: FOR_IN
37980: IFFALSE 38057
// if BuildingStatus ( b ) = bs_build then
37982: LD_VAR 0 2
37986: PPUSH
37987: CALL_OW 461
37991: PUSH
37992: LD_INT 1
37994: EQUAL
37995: IFFALSE 38055
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37997: LD_VAR 0 4
38001: PPUSH
38002: LD_STRING h
38004: PUSH
38005: LD_VAR 0 2
38009: PPUSH
38010: CALL_OW 250
38014: PUSH
38015: LD_VAR 0 2
38019: PPUSH
38020: CALL_OW 251
38024: PUSH
38025: LD_VAR 0 2
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: PUSH
38048: EMPTY
38049: LIST
38050: PPUSH
38051: CALL_OW 446
38055: GO 37979
38057: POP
38058: POP
// end ;
38059: LD_VAR 0 3
38063: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38064: LD_INT 0
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
38071: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38072: LD_VAR 0 1
38076: NOT
38077: PUSH
38078: LD_VAR 0 1
38082: PPUSH
38083: CALL_OW 263
38087: PUSH
38088: LD_INT 2
38090: NONEQUAL
38091: OR
38092: IFFALSE 38096
// exit ;
38094: GO 38412
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38096: LD_ADDR_VAR 0 6
38100: PUSH
38101: LD_INT 22
38103: PUSH
38104: LD_VAR 0 1
38108: PPUSH
38109: CALL_OW 255
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 2
38120: PUSH
38121: LD_INT 30
38123: PUSH
38124: LD_INT 36
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 34
38133: PUSH
38134: LD_INT 31
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: LIST
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PPUSH
38150: CALL_OW 69
38154: ST_TO_ADDR
// if not tmp then
38155: LD_VAR 0 6
38159: NOT
38160: IFFALSE 38164
// exit ;
38162: GO 38412
// result := [ ] ;
38164: LD_ADDR_VAR 0 2
38168: PUSH
38169: EMPTY
38170: ST_TO_ADDR
// for i in tmp do
38171: LD_ADDR_VAR 0 3
38175: PUSH
38176: LD_VAR 0 6
38180: PUSH
38181: FOR_IN
38182: IFFALSE 38253
// begin t := UnitsInside ( i ) ;
38184: LD_ADDR_VAR 0 4
38188: PUSH
38189: LD_VAR 0 3
38193: PPUSH
38194: CALL_OW 313
38198: ST_TO_ADDR
// if t then
38199: LD_VAR 0 4
38203: IFFALSE 38251
// for j in t do
38205: LD_ADDR_VAR 0 7
38209: PUSH
38210: LD_VAR 0 4
38214: PUSH
38215: FOR_IN
38216: IFFALSE 38249
// result := Replace ( result , result + 1 , j ) ;
38218: LD_ADDR_VAR 0 2
38222: PUSH
38223: LD_VAR 0 2
38227: PPUSH
38228: LD_VAR 0 2
38232: PUSH
38233: LD_INT 1
38235: PLUS
38236: PPUSH
38237: LD_VAR 0 7
38241: PPUSH
38242: CALL_OW 1
38246: ST_TO_ADDR
38247: GO 38215
38249: POP
38250: POP
// end ;
38251: GO 38181
38253: POP
38254: POP
// if not result then
38255: LD_VAR 0 2
38259: NOT
38260: IFFALSE 38264
// exit ;
38262: GO 38412
// mech := result [ 1 ] ;
38264: LD_ADDR_VAR 0 5
38268: PUSH
38269: LD_VAR 0 2
38273: PUSH
38274: LD_INT 1
38276: ARRAY
38277: ST_TO_ADDR
// if result > 1 then
38278: LD_VAR 0 2
38282: PUSH
38283: LD_INT 1
38285: GREATER
38286: IFFALSE 38398
// begin for i = 2 to result do
38288: LD_ADDR_VAR 0 3
38292: PUSH
38293: DOUBLE
38294: LD_INT 2
38296: DEC
38297: ST_TO_ADDR
38298: LD_VAR 0 2
38302: PUSH
38303: FOR_TO
38304: IFFALSE 38396
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38306: LD_ADDR_VAR 0 4
38310: PUSH
38311: LD_VAR 0 2
38315: PUSH
38316: LD_VAR 0 3
38320: ARRAY
38321: PPUSH
38322: LD_INT 3
38324: PPUSH
38325: CALL_OW 259
38329: PUSH
38330: LD_VAR 0 2
38334: PUSH
38335: LD_VAR 0 3
38339: ARRAY
38340: PPUSH
38341: CALL_OW 432
38345: MINUS
38346: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38347: LD_VAR 0 4
38351: PUSH
38352: LD_VAR 0 5
38356: PPUSH
38357: LD_INT 3
38359: PPUSH
38360: CALL_OW 259
38364: PUSH
38365: LD_VAR 0 5
38369: PPUSH
38370: CALL_OW 432
38374: MINUS
38375: GREATEREQUAL
38376: IFFALSE 38394
// mech := result [ i ] ;
38378: LD_ADDR_VAR 0 5
38382: PUSH
38383: LD_VAR 0 2
38387: PUSH
38388: LD_VAR 0 3
38392: ARRAY
38393: ST_TO_ADDR
// end ;
38394: GO 38303
38396: POP
38397: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38398: LD_VAR 0 1
38402: PPUSH
38403: LD_VAR 0 5
38407: PPUSH
38408: CALL_OW 135
// end ;
38412: LD_VAR 0 2
38416: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38417: LD_INT 0
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
38427: PPUSH
38428: PPUSH
38429: PPUSH
38430: PPUSH
38431: PPUSH
// result := [ ] ;
38432: LD_ADDR_VAR 0 7
38436: PUSH
38437: EMPTY
38438: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 266
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: IN
38459: NOT
38460: IFFALSE 38464
// exit ;
38462: GO 40098
// if name then
38464: LD_VAR 0 3
38468: IFFALSE 38484
// SetBName ( base_dep , name ) ;
38470: LD_VAR 0 1
38474: PPUSH
38475: LD_VAR 0 3
38479: PPUSH
38480: CALL_OW 500
// base := GetBase ( base_dep ) ;
38484: LD_ADDR_VAR 0 15
38488: PUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL_OW 274
38498: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38499: LD_ADDR_VAR 0 16
38503: PUSH
38504: LD_VAR 0 1
38508: PPUSH
38509: CALL_OW 255
38513: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38514: LD_ADDR_VAR 0 17
38518: PUSH
38519: LD_VAR 0 1
38523: PPUSH
38524: CALL_OW 248
38528: ST_TO_ADDR
// if sources then
38529: LD_VAR 0 5
38533: IFFALSE 38580
// for i = 1 to 3 do
38535: LD_ADDR_VAR 0 8
38539: PUSH
38540: DOUBLE
38541: LD_INT 1
38543: DEC
38544: ST_TO_ADDR
38545: LD_INT 3
38547: PUSH
38548: FOR_TO
38549: IFFALSE 38578
// AddResourceType ( base , i , sources [ i ] ) ;
38551: LD_VAR 0 15
38555: PPUSH
38556: LD_VAR 0 8
38560: PPUSH
38561: LD_VAR 0 5
38565: PUSH
38566: LD_VAR 0 8
38570: ARRAY
38571: PPUSH
38572: CALL_OW 276
38576: GO 38548
38578: POP
38579: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38580: LD_ADDR_VAR 0 18
38584: PUSH
38585: LD_VAR 0 15
38589: PPUSH
38590: LD_VAR 0 2
38594: PPUSH
38595: LD_INT 1
38597: PPUSH
38598: CALL 37841 0 3
38602: ST_TO_ADDR
// InitHc ;
38603: CALL_OW 19
// InitUc ;
38607: CALL_OW 18
// uc_side := side ;
38611: LD_ADDR_OWVAR 20
38615: PUSH
38616: LD_VAR 0 16
38620: ST_TO_ADDR
// uc_nation := nation ;
38621: LD_ADDR_OWVAR 21
38625: PUSH
38626: LD_VAR 0 17
38630: ST_TO_ADDR
// if buildings then
38631: LD_VAR 0 18
38635: IFFALSE 39957
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38637: LD_ADDR_VAR 0 19
38641: PUSH
38642: LD_VAR 0 18
38646: PPUSH
38647: LD_INT 2
38649: PUSH
38650: LD_INT 30
38652: PUSH
38653: LD_INT 29
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 30
38662: PUSH
38663: LD_INT 30
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: PPUSH
38675: CALL_OW 72
38679: ST_TO_ADDR
// if tmp then
38680: LD_VAR 0 19
38684: IFFALSE 38732
// for i in tmp do
38686: LD_ADDR_VAR 0 8
38690: PUSH
38691: LD_VAR 0 19
38695: PUSH
38696: FOR_IN
38697: IFFALSE 38730
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38699: LD_VAR 0 8
38703: PPUSH
38704: CALL_OW 250
38708: PPUSH
38709: LD_VAR 0 8
38713: PPUSH
38714: CALL_OW 251
38718: PPUSH
38719: LD_VAR 0 16
38723: PPUSH
38724: CALL_OW 441
38728: GO 38696
38730: POP
38731: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38732: LD_VAR 0 18
38736: PPUSH
38737: LD_INT 2
38739: PUSH
38740: LD_INT 30
38742: PUSH
38743: LD_INT 32
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 30
38752: PUSH
38753: LD_INT 33
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: PPUSH
38765: CALL_OW 72
38769: IFFALSE 38857
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38771: LD_ADDR_VAR 0 8
38775: PUSH
38776: LD_VAR 0 18
38780: PPUSH
38781: LD_INT 2
38783: PUSH
38784: LD_INT 30
38786: PUSH
38787: LD_INT 32
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 30
38796: PUSH
38797: LD_INT 33
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: PPUSH
38809: CALL_OW 72
38813: PUSH
38814: FOR_IN
38815: IFFALSE 38855
// begin if not GetBWeapon ( i ) then
38817: LD_VAR 0 8
38821: PPUSH
38822: CALL_OW 269
38826: NOT
38827: IFFALSE 38853
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38829: LD_VAR 0 8
38833: PPUSH
38834: LD_VAR 0 8
38838: PPUSH
38839: LD_VAR 0 2
38843: PPUSH
38844: CALL 40103 0 2
38848: PPUSH
38849: CALL_OW 431
// end ;
38853: GO 38814
38855: POP
38856: POP
// end ; for i = 1 to personel do
38857: LD_ADDR_VAR 0 8
38861: PUSH
38862: DOUBLE
38863: LD_INT 1
38865: DEC
38866: ST_TO_ADDR
38867: LD_VAR 0 6
38871: PUSH
38872: FOR_TO
38873: IFFALSE 39937
// begin if i > 4 then
38875: LD_VAR 0 8
38879: PUSH
38880: LD_INT 4
38882: GREATER
38883: IFFALSE 38887
// break ;
38885: GO 39937
// case i of 1 :
38887: LD_VAR 0 8
38891: PUSH
38892: LD_INT 1
38894: DOUBLE
38895: EQUAL
38896: IFTRUE 38900
38898: GO 38980
38900: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38901: LD_ADDR_VAR 0 12
38905: PUSH
38906: LD_VAR 0 18
38910: PPUSH
38911: LD_INT 22
38913: PUSH
38914: LD_VAR 0 16
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 58
38925: PUSH
38926: EMPTY
38927: LIST
38928: PUSH
38929: LD_INT 2
38931: PUSH
38932: LD_INT 30
38934: PUSH
38935: LD_INT 32
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 30
38944: PUSH
38945: LD_INT 4
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 30
38954: PUSH
38955: LD_INT 5
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: PPUSH
38973: CALL_OW 72
38977: ST_TO_ADDR
38978: GO 39202
38980: LD_INT 2
38982: DOUBLE
38983: EQUAL
38984: IFTRUE 38988
38986: GO 39050
38988: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38989: LD_ADDR_VAR 0 12
38993: PUSH
38994: LD_VAR 0 18
38998: PPUSH
38999: LD_INT 22
39001: PUSH
39002: LD_VAR 0 16
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 30
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 30
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PPUSH
39043: CALL_OW 72
39047: ST_TO_ADDR
39048: GO 39202
39050: LD_INT 3
39052: DOUBLE
39053: EQUAL
39054: IFTRUE 39058
39056: GO 39120
39058: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39059: LD_ADDR_VAR 0 12
39063: PUSH
39064: LD_VAR 0 18
39068: PPUSH
39069: LD_INT 22
39071: PUSH
39072: LD_VAR 0 16
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 30
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 30
39096: PUSH
39097: LD_INT 3
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PPUSH
39113: CALL_OW 72
39117: ST_TO_ADDR
39118: GO 39202
39120: LD_INT 4
39122: DOUBLE
39123: EQUAL
39124: IFTRUE 39128
39126: GO 39201
39128: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39129: LD_ADDR_VAR 0 12
39133: PUSH
39134: LD_VAR 0 18
39138: PPUSH
39139: LD_INT 22
39141: PUSH
39142: LD_VAR 0 16
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: LD_INT 30
39156: PUSH
39157: LD_INT 6
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 30
39166: PUSH
39167: LD_INT 7
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 30
39176: PUSH
39177: LD_INT 8
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PPUSH
39194: CALL_OW 72
39198: ST_TO_ADDR
39199: GO 39202
39201: POP
// if i = 1 then
39202: LD_VAR 0 8
39206: PUSH
39207: LD_INT 1
39209: EQUAL
39210: IFFALSE 39321
// begin tmp := [ ] ;
39212: LD_ADDR_VAR 0 19
39216: PUSH
39217: EMPTY
39218: ST_TO_ADDR
// for j in f do
39219: LD_ADDR_VAR 0 9
39223: PUSH
39224: LD_VAR 0 12
39228: PUSH
39229: FOR_IN
39230: IFFALSE 39303
// if GetBType ( j ) = b_bunker then
39232: LD_VAR 0 9
39236: PPUSH
39237: CALL_OW 266
39241: PUSH
39242: LD_INT 32
39244: EQUAL
39245: IFFALSE 39272
// tmp := Insert ( tmp , 1 , j ) else
39247: LD_ADDR_VAR 0 19
39251: PUSH
39252: LD_VAR 0 19
39256: PPUSH
39257: LD_INT 1
39259: PPUSH
39260: LD_VAR 0 9
39264: PPUSH
39265: CALL_OW 2
39269: ST_TO_ADDR
39270: GO 39301
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39272: LD_ADDR_VAR 0 19
39276: PUSH
39277: LD_VAR 0 19
39281: PPUSH
39282: LD_VAR 0 19
39286: PUSH
39287: LD_INT 1
39289: PLUS
39290: PPUSH
39291: LD_VAR 0 9
39295: PPUSH
39296: CALL_OW 2
39300: ST_TO_ADDR
39301: GO 39229
39303: POP
39304: POP
// if tmp then
39305: LD_VAR 0 19
39309: IFFALSE 39321
// f := tmp ;
39311: LD_ADDR_VAR 0 12
39315: PUSH
39316: LD_VAR 0 19
39320: ST_TO_ADDR
// end ; x := personel [ i ] ;
39321: LD_ADDR_VAR 0 13
39325: PUSH
39326: LD_VAR 0 6
39330: PUSH
39331: LD_VAR 0 8
39335: ARRAY
39336: ST_TO_ADDR
// if x = - 1 then
39337: LD_VAR 0 13
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: EQUAL
39346: IFFALSE 39555
// begin for j in f do
39348: LD_ADDR_VAR 0 9
39352: PUSH
39353: LD_VAR 0 12
39357: PUSH
39358: FOR_IN
39359: IFFALSE 39551
// repeat InitHc ;
39361: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39365: LD_VAR 0 9
39369: PPUSH
39370: CALL_OW 266
39374: PUSH
39375: LD_INT 5
39377: EQUAL
39378: IFFALSE 39448
// begin if UnitsInside ( j ) < 3 then
39380: LD_VAR 0 9
39384: PPUSH
39385: CALL_OW 313
39389: PUSH
39390: LD_INT 3
39392: LESS
39393: IFFALSE 39429
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39395: LD_INT 0
39397: PPUSH
39398: LD_INT 5
39400: PUSH
39401: LD_INT 8
39403: PUSH
39404: LD_INT 9
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: PUSH
39412: LD_VAR 0 17
39416: ARRAY
39417: PPUSH
39418: LD_VAR 0 4
39422: PPUSH
39423: CALL_OW 380
39427: GO 39446
// PrepareHuman ( false , i , skill ) ;
39429: LD_INT 0
39431: PPUSH
39432: LD_VAR 0 8
39436: PPUSH
39437: LD_VAR 0 4
39441: PPUSH
39442: CALL_OW 380
// end else
39446: GO 39465
// PrepareHuman ( false , i , skill ) ;
39448: LD_INT 0
39450: PPUSH
39451: LD_VAR 0 8
39455: PPUSH
39456: LD_VAR 0 4
39460: PPUSH
39461: CALL_OW 380
// un := CreateHuman ;
39465: LD_ADDR_VAR 0 14
39469: PUSH
39470: CALL_OW 44
39474: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39475: LD_ADDR_VAR 0 7
39479: PUSH
39480: LD_VAR 0 7
39484: PPUSH
39485: LD_INT 1
39487: PPUSH
39488: LD_VAR 0 14
39492: PPUSH
39493: CALL_OW 2
39497: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39498: LD_VAR 0 14
39502: PPUSH
39503: LD_VAR 0 9
39507: PPUSH
39508: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39512: LD_VAR 0 9
39516: PPUSH
39517: CALL_OW 313
39521: PUSH
39522: LD_INT 6
39524: EQUAL
39525: PUSH
39526: LD_VAR 0 9
39530: PPUSH
39531: CALL_OW 266
39535: PUSH
39536: LD_INT 32
39538: PUSH
39539: LD_INT 31
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: IN
39546: OR
39547: IFFALSE 39361
39549: GO 39358
39551: POP
39552: POP
// end else
39553: GO 39935
// for j = 1 to x do
39555: LD_ADDR_VAR 0 9
39559: PUSH
39560: DOUBLE
39561: LD_INT 1
39563: DEC
39564: ST_TO_ADDR
39565: LD_VAR 0 13
39569: PUSH
39570: FOR_TO
39571: IFFALSE 39933
// begin InitHc ;
39573: CALL_OW 19
// if not f then
39577: LD_VAR 0 12
39581: NOT
39582: IFFALSE 39671
// begin PrepareHuman ( false , i , skill ) ;
39584: LD_INT 0
39586: PPUSH
39587: LD_VAR 0 8
39591: PPUSH
39592: LD_VAR 0 4
39596: PPUSH
39597: CALL_OW 380
// un := CreateHuman ;
39601: LD_ADDR_VAR 0 14
39605: PUSH
39606: CALL_OW 44
39610: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39611: LD_ADDR_VAR 0 7
39615: PUSH
39616: LD_VAR 0 7
39620: PPUSH
39621: LD_INT 1
39623: PPUSH
39624: LD_VAR 0 14
39628: PPUSH
39629: CALL_OW 2
39633: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39634: LD_VAR 0 14
39638: PPUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL_OW 250
39648: PPUSH
39649: LD_VAR 0 1
39653: PPUSH
39654: CALL_OW 251
39658: PPUSH
39659: LD_INT 10
39661: PPUSH
39662: LD_INT 0
39664: PPUSH
39665: CALL_OW 50
// continue ;
39669: GO 39570
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39671: LD_VAR 0 12
39675: PUSH
39676: LD_INT 1
39678: ARRAY
39679: PPUSH
39680: CALL_OW 313
39684: PUSH
39685: LD_VAR 0 12
39689: PUSH
39690: LD_INT 1
39692: ARRAY
39693: PPUSH
39694: CALL_OW 266
39698: PUSH
39699: LD_INT 32
39701: PUSH
39702: LD_INT 31
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: IN
39709: AND
39710: PUSH
39711: LD_VAR 0 12
39715: PUSH
39716: LD_INT 1
39718: ARRAY
39719: PPUSH
39720: CALL_OW 313
39724: PUSH
39725: LD_INT 6
39727: EQUAL
39728: OR
39729: IFFALSE 39749
// f := Delete ( f , 1 ) ;
39731: LD_ADDR_VAR 0 12
39735: PUSH
39736: LD_VAR 0 12
39740: PPUSH
39741: LD_INT 1
39743: PPUSH
39744: CALL_OW 3
39748: ST_TO_ADDR
// if not f then
39749: LD_VAR 0 12
39753: NOT
39754: IFFALSE 39772
// begin x := x + 2 ;
39756: LD_ADDR_VAR 0 13
39760: PUSH
39761: LD_VAR 0 13
39765: PUSH
39766: LD_INT 2
39768: PLUS
39769: ST_TO_ADDR
// continue ;
39770: GO 39570
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39772: LD_VAR 0 12
39776: PUSH
39777: LD_INT 1
39779: ARRAY
39780: PPUSH
39781: CALL_OW 266
39785: PUSH
39786: LD_INT 5
39788: EQUAL
39789: IFFALSE 39863
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39791: LD_VAR 0 12
39795: PUSH
39796: LD_INT 1
39798: ARRAY
39799: PPUSH
39800: CALL_OW 313
39804: PUSH
39805: LD_INT 3
39807: LESS
39808: IFFALSE 39844
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39810: LD_INT 0
39812: PPUSH
39813: LD_INT 5
39815: PUSH
39816: LD_INT 8
39818: PUSH
39819: LD_INT 9
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: LIST
39826: PUSH
39827: LD_VAR 0 17
39831: ARRAY
39832: PPUSH
39833: LD_VAR 0 4
39837: PPUSH
39838: CALL_OW 380
39842: GO 39861
// PrepareHuman ( false , i , skill ) ;
39844: LD_INT 0
39846: PPUSH
39847: LD_VAR 0 8
39851: PPUSH
39852: LD_VAR 0 4
39856: PPUSH
39857: CALL_OW 380
// end else
39861: GO 39880
// PrepareHuman ( false , i , skill ) ;
39863: LD_INT 0
39865: PPUSH
39866: LD_VAR 0 8
39870: PPUSH
39871: LD_VAR 0 4
39875: PPUSH
39876: CALL_OW 380
// un := CreateHuman ;
39880: LD_ADDR_VAR 0 14
39884: PUSH
39885: CALL_OW 44
39889: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39890: LD_ADDR_VAR 0 7
39894: PUSH
39895: LD_VAR 0 7
39899: PPUSH
39900: LD_INT 1
39902: PPUSH
39903: LD_VAR 0 14
39907: PPUSH
39908: CALL_OW 2
39912: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39913: LD_VAR 0 14
39917: PPUSH
39918: LD_VAR 0 12
39922: PUSH
39923: LD_INT 1
39925: ARRAY
39926: PPUSH
39927: CALL_OW 52
// end ;
39931: GO 39570
39933: POP
39934: POP
// end ;
39935: GO 38872
39937: POP
39938: POP
// result := result ^ buildings ;
39939: LD_ADDR_VAR 0 7
39943: PUSH
39944: LD_VAR 0 7
39948: PUSH
39949: LD_VAR 0 18
39953: ADD
39954: ST_TO_ADDR
// end else
39955: GO 40098
// begin for i = 1 to personel do
39957: LD_ADDR_VAR 0 8
39961: PUSH
39962: DOUBLE
39963: LD_INT 1
39965: DEC
39966: ST_TO_ADDR
39967: LD_VAR 0 6
39971: PUSH
39972: FOR_TO
39973: IFFALSE 40096
// begin if i > 4 then
39975: LD_VAR 0 8
39979: PUSH
39980: LD_INT 4
39982: GREATER
39983: IFFALSE 39987
// break ;
39985: GO 40096
// x := personel [ i ] ;
39987: LD_ADDR_VAR 0 13
39991: PUSH
39992: LD_VAR 0 6
39996: PUSH
39997: LD_VAR 0 8
40001: ARRAY
40002: ST_TO_ADDR
// if x = - 1 then
40003: LD_VAR 0 13
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: EQUAL
40012: IFFALSE 40016
// continue ;
40014: GO 39972
// PrepareHuman ( false , i , skill ) ;
40016: LD_INT 0
40018: PPUSH
40019: LD_VAR 0 8
40023: PPUSH
40024: LD_VAR 0 4
40028: PPUSH
40029: CALL_OW 380
// un := CreateHuman ;
40033: LD_ADDR_VAR 0 14
40037: PUSH
40038: CALL_OW 44
40042: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40043: LD_VAR 0 14
40047: PPUSH
40048: LD_VAR 0 1
40052: PPUSH
40053: CALL_OW 250
40057: PPUSH
40058: LD_VAR 0 1
40062: PPUSH
40063: CALL_OW 251
40067: PPUSH
40068: LD_INT 10
40070: PPUSH
40071: LD_INT 0
40073: PPUSH
40074: CALL_OW 50
// result := result ^ un ;
40078: LD_ADDR_VAR 0 7
40082: PUSH
40083: LD_VAR 0 7
40087: PUSH
40088: LD_VAR 0 14
40092: ADD
40093: ST_TO_ADDR
// end ;
40094: GO 39972
40096: POP
40097: POP
// end ; end ;
40098: LD_VAR 0 7
40102: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40103: LD_INT 0
40105: PPUSH
40106: PPUSH
40107: PPUSH
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
40118: PPUSH
40119: PPUSH
40120: PPUSH
// result := false ;
40121: LD_ADDR_VAR 0 3
40125: PUSH
40126: LD_INT 0
40128: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40129: LD_VAR 0 1
40133: NOT
40134: PUSH
40135: LD_VAR 0 1
40139: PPUSH
40140: CALL_OW 266
40144: PUSH
40145: LD_INT 32
40147: PUSH
40148: LD_INT 33
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: IN
40155: NOT
40156: OR
40157: IFFALSE 40161
// exit ;
40159: GO 41270
// nat := GetNation ( tower ) ;
40161: LD_ADDR_VAR 0 12
40165: PUSH
40166: LD_VAR 0 1
40170: PPUSH
40171: CALL_OW 248
40175: ST_TO_ADDR
// side := GetSide ( tower ) ;
40176: LD_ADDR_VAR 0 16
40180: PUSH
40181: LD_VAR 0 1
40185: PPUSH
40186: CALL_OW 255
40190: ST_TO_ADDR
// x := GetX ( tower ) ;
40191: LD_ADDR_VAR 0 10
40195: PUSH
40196: LD_VAR 0 1
40200: PPUSH
40201: CALL_OW 250
40205: ST_TO_ADDR
// y := GetY ( tower ) ;
40206: LD_ADDR_VAR 0 11
40210: PUSH
40211: LD_VAR 0 1
40215: PPUSH
40216: CALL_OW 251
40220: ST_TO_ADDR
// if not x or not y then
40221: LD_VAR 0 10
40225: NOT
40226: PUSH
40227: LD_VAR 0 11
40231: NOT
40232: OR
40233: IFFALSE 40237
// exit ;
40235: GO 41270
// weapon := 0 ;
40237: LD_ADDR_VAR 0 18
40241: PUSH
40242: LD_INT 0
40244: ST_TO_ADDR
// fac_list := [ ] ;
40245: LD_ADDR_VAR 0 17
40249: PUSH
40250: EMPTY
40251: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40252: LD_ADDR_VAR 0 6
40256: PUSH
40257: LD_VAR 0 1
40261: PPUSH
40262: CALL_OW 274
40266: PPUSH
40267: LD_VAR 0 2
40271: PPUSH
40272: LD_INT 0
40274: PPUSH
40275: CALL 37841 0 3
40279: PPUSH
40280: LD_INT 30
40282: PUSH
40283: LD_INT 3
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PPUSH
40290: CALL_OW 72
40294: ST_TO_ADDR
// if not factories then
40295: LD_VAR 0 6
40299: NOT
40300: IFFALSE 40304
// exit ;
40302: GO 41270
// for i in factories do
40304: LD_ADDR_VAR 0 8
40308: PUSH
40309: LD_VAR 0 6
40313: PUSH
40314: FOR_IN
40315: IFFALSE 40340
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40317: LD_ADDR_VAR 0 17
40321: PUSH
40322: LD_VAR 0 17
40326: PUSH
40327: LD_VAR 0 8
40331: PPUSH
40332: CALL_OW 478
40336: UNION
40337: ST_TO_ADDR
40338: GO 40314
40340: POP
40341: POP
// if not fac_list then
40342: LD_VAR 0 17
40346: NOT
40347: IFFALSE 40351
// exit ;
40349: GO 41270
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40351: LD_ADDR_VAR 0 5
40355: PUSH
40356: LD_INT 4
40358: PUSH
40359: LD_INT 5
40361: PUSH
40362: LD_INT 9
40364: PUSH
40365: LD_INT 10
40367: PUSH
40368: LD_INT 6
40370: PUSH
40371: LD_INT 7
40373: PUSH
40374: LD_INT 11
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 27
40388: PUSH
40389: LD_INT 28
40391: PUSH
40392: LD_INT 26
40394: PUSH
40395: LD_INT 30
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 43
40406: PUSH
40407: LD_INT 44
40409: PUSH
40410: LD_INT 46
40412: PUSH
40413: LD_INT 45
40415: PUSH
40416: LD_INT 47
40418: PUSH
40419: LD_INT 49
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: LIST
40434: PUSH
40435: LD_VAR 0 12
40439: ARRAY
40440: ST_TO_ADDR
// list := list isect fac_list ;
40441: LD_ADDR_VAR 0 5
40445: PUSH
40446: LD_VAR 0 5
40450: PUSH
40451: LD_VAR 0 17
40455: ISECT
40456: ST_TO_ADDR
// if not list then
40457: LD_VAR 0 5
40461: NOT
40462: IFFALSE 40466
// exit ;
40464: GO 41270
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40466: LD_VAR 0 12
40470: PUSH
40471: LD_INT 3
40473: EQUAL
40474: PUSH
40475: LD_INT 49
40477: PUSH
40478: LD_VAR 0 5
40482: IN
40483: AND
40484: PUSH
40485: LD_INT 31
40487: PPUSH
40488: LD_VAR 0 16
40492: PPUSH
40493: CALL_OW 321
40497: PUSH
40498: LD_INT 2
40500: EQUAL
40501: AND
40502: IFFALSE 40562
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40504: LD_INT 22
40506: PUSH
40507: LD_VAR 0 16
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 35
40518: PUSH
40519: LD_INT 49
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 91
40528: PUSH
40529: LD_VAR 0 1
40533: PUSH
40534: LD_INT 10
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: LIST
40546: PPUSH
40547: CALL_OW 69
40551: NOT
40552: IFFALSE 40562
// weapon := ru_time_lapser ;
40554: LD_ADDR_VAR 0 18
40558: PUSH
40559: LD_INT 49
40561: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40562: LD_VAR 0 12
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: IN
40577: PUSH
40578: LD_INT 11
40580: PUSH
40581: LD_VAR 0 5
40585: IN
40586: PUSH
40587: LD_INT 30
40589: PUSH
40590: LD_VAR 0 5
40594: IN
40595: OR
40596: AND
40597: PUSH
40598: LD_INT 6
40600: PPUSH
40601: LD_VAR 0 16
40605: PPUSH
40606: CALL_OW 321
40610: PUSH
40611: LD_INT 2
40613: EQUAL
40614: AND
40615: IFFALSE 40780
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40617: LD_INT 22
40619: PUSH
40620: LD_VAR 0 16
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: LD_INT 35
40634: PUSH
40635: LD_INT 11
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 35
40644: PUSH
40645: LD_INT 30
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 91
40659: PUSH
40660: LD_VAR 0 1
40664: PUSH
40665: LD_INT 18
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: LIST
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: PPUSH
40678: CALL_OW 69
40682: NOT
40683: PUSH
40684: LD_INT 22
40686: PUSH
40687: LD_VAR 0 16
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 30
40701: PUSH
40702: LD_INT 32
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 30
40711: PUSH
40712: LD_INT 33
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 91
40726: PUSH
40727: LD_VAR 0 1
40731: PUSH
40732: LD_INT 12
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: LIST
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: PUSH
40745: EMPTY
40746: LIST
40747: PPUSH
40748: CALL_OW 69
40752: PUSH
40753: LD_INT 2
40755: GREATER
40756: AND
40757: IFFALSE 40780
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40759: LD_ADDR_VAR 0 18
40763: PUSH
40764: LD_INT 11
40766: PUSH
40767: LD_INT 30
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_VAR 0 12
40778: ARRAY
40779: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40780: LD_VAR 0 18
40784: NOT
40785: PUSH
40786: LD_INT 40
40788: PPUSH
40789: LD_VAR 0 16
40793: PPUSH
40794: CALL_OW 321
40798: PUSH
40799: LD_INT 2
40801: EQUAL
40802: AND
40803: PUSH
40804: LD_INT 7
40806: PUSH
40807: LD_VAR 0 5
40811: IN
40812: PUSH
40813: LD_INT 28
40815: PUSH
40816: LD_VAR 0 5
40820: IN
40821: OR
40822: PUSH
40823: LD_INT 45
40825: PUSH
40826: LD_VAR 0 5
40830: IN
40831: OR
40832: AND
40833: IFFALSE 41087
// begin hex := GetHexInfo ( x , y ) ;
40835: LD_ADDR_VAR 0 4
40839: PUSH
40840: LD_VAR 0 10
40844: PPUSH
40845: LD_VAR 0 11
40849: PPUSH
40850: CALL_OW 546
40854: ST_TO_ADDR
// if hex [ 1 ] then
40855: LD_VAR 0 4
40859: PUSH
40860: LD_INT 1
40862: ARRAY
40863: IFFALSE 40867
// exit ;
40865: GO 41270
// height := hex [ 2 ] ;
40867: LD_ADDR_VAR 0 15
40871: PUSH
40872: LD_VAR 0 4
40876: PUSH
40877: LD_INT 2
40879: ARRAY
40880: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40881: LD_ADDR_VAR 0 14
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 3
40894: PUSH
40895: LD_INT 5
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: ST_TO_ADDR
// for i in tmp do
40904: LD_ADDR_VAR 0 8
40908: PUSH
40909: LD_VAR 0 14
40913: PUSH
40914: FOR_IN
40915: IFFALSE 41085
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40917: LD_ADDR_VAR 0 9
40921: PUSH
40922: LD_VAR 0 10
40926: PPUSH
40927: LD_VAR 0 8
40931: PPUSH
40932: LD_INT 5
40934: PPUSH
40935: CALL_OW 272
40939: PUSH
40940: LD_VAR 0 11
40944: PPUSH
40945: LD_VAR 0 8
40949: PPUSH
40950: LD_INT 5
40952: PPUSH
40953: CALL_OW 273
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40962: LD_VAR 0 9
40966: PUSH
40967: LD_INT 1
40969: ARRAY
40970: PPUSH
40971: LD_VAR 0 9
40975: PUSH
40976: LD_INT 2
40978: ARRAY
40979: PPUSH
40980: CALL_OW 488
40984: IFFALSE 41083
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40986: LD_ADDR_VAR 0 4
40990: PUSH
40991: LD_VAR 0 9
40995: PUSH
40996: LD_INT 1
40998: ARRAY
40999: PPUSH
41000: LD_VAR 0 9
41004: PUSH
41005: LD_INT 2
41007: ARRAY
41008: PPUSH
41009: CALL_OW 546
41013: ST_TO_ADDR
// if hex [ 1 ] then
41014: LD_VAR 0 4
41018: PUSH
41019: LD_INT 1
41021: ARRAY
41022: IFFALSE 41026
// continue ;
41024: GO 40914
// h := hex [ 2 ] ;
41026: LD_ADDR_VAR 0 13
41030: PUSH
41031: LD_VAR 0 4
41035: PUSH
41036: LD_INT 2
41038: ARRAY
41039: ST_TO_ADDR
// if h + 7 < height then
41040: LD_VAR 0 13
41044: PUSH
41045: LD_INT 7
41047: PLUS
41048: PUSH
41049: LD_VAR 0 15
41053: LESS
41054: IFFALSE 41083
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41056: LD_ADDR_VAR 0 18
41060: PUSH
41061: LD_INT 7
41063: PUSH
41064: LD_INT 28
41066: PUSH
41067: LD_INT 45
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: LIST
41074: PUSH
41075: LD_VAR 0 12
41079: ARRAY
41080: ST_TO_ADDR
// break ;
41081: GO 41085
// end ; end ; end ;
41083: GO 40914
41085: POP
41086: POP
// end ; if not weapon then
41087: LD_VAR 0 18
41091: NOT
41092: IFFALSE 41152
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41094: LD_ADDR_VAR 0 5
41098: PUSH
41099: LD_VAR 0 5
41103: PUSH
41104: LD_INT 11
41106: PUSH
41107: LD_INT 30
41109: PUSH
41110: LD_INT 49
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: LIST
41117: DIFF
41118: ST_TO_ADDR
// if not list then
41119: LD_VAR 0 5
41123: NOT
41124: IFFALSE 41128
// exit ;
41126: GO 41270
// weapon := list [ rand ( 1 , list ) ] ;
41128: LD_ADDR_VAR 0 18
41132: PUSH
41133: LD_VAR 0 5
41137: PUSH
41138: LD_INT 1
41140: PPUSH
41141: LD_VAR 0 5
41145: PPUSH
41146: CALL_OW 12
41150: ARRAY
41151: ST_TO_ADDR
// end ; if weapon then
41152: LD_VAR 0 18
41156: IFFALSE 41270
// begin tmp := CostOfWeapon ( weapon ) ;
41158: LD_ADDR_VAR 0 14
41162: PUSH
41163: LD_VAR 0 18
41167: PPUSH
41168: CALL_OW 451
41172: ST_TO_ADDR
// j := GetBase ( tower ) ;
41173: LD_ADDR_VAR 0 9
41177: PUSH
41178: LD_VAR 0 1
41182: PPUSH
41183: CALL_OW 274
41187: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41188: LD_VAR 0 9
41192: PPUSH
41193: LD_INT 1
41195: PPUSH
41196: CALL_OW 275
41200: PUSH
41201: LD_VAR 0 14
41205: PUSH
41206: LD_INT 1
41208: ARRAY
41209: GREATEREQUAL
41210: PUSH
41211: LD_VAR 0 9
41215: PPUSH
41216: LD_INT 2
41218: PPUSH
41219: CALL_OW 275
41223: PUSH
41224: LD_VAR 0 14
41228: PUSH
41229: LD_INT 2
41231: ARRAY
41232: GREATEREQUAL
41233: AND
41234: PUSH
41235: LD_VAR 0 9
41239: PPUSH
41240: LD_INT 3
41242: PPUSH
41243: CALL_OW 275
41247: PUSH
41248: LD_VAR 0 14
41252: PUSH
41253: LD_INT 3
41255: ARRAY
41256: GREATEREQUAL
41257: AND
41258: IFFALSE 41270
// result := weapon ;
41260: LD_ADDR_VAR 0 3
41264: PUSH
41265: LD_VAR 0 18
41269: ST_TO_ADDR
// end ; end ;
41270: LD_VAR 0 3
41274: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41275: LD_INT 0
41277: PPUSH
41278: PPUSH
// result := true ;
41279: LD_ADDR_VAR 0 3
41283: PUSH
41284: LD_INT 1
41286: ST_TO_ADDR
// if array1 = array2 then
41287: LD_VAR 0 1
41291: PUSH
41292: LD_VAR 0 2
41296: EQUAL
41297: IFFALSE 41357
// begin for i = 1 to array1 do
41299: LD_ADDR_VAR 0 4
41303: PUSH
41304: DOUBLE
41305: LD_INT 1
41307: DEC
41308: ST_TO_ADDR
41309: LD_VAR 0 1
41313: PUSH
41314: FOR_TO
41315: IFFALSE 41353
// if array1 [ i ] <> array2 [ i ] then
41317: LD_VAR 0 1
41321: PUSH
41322: LD_VAR 0 4
41326: ARRAY
41327: PUSH
41328: LD_VAR 0 2
41332: PUSH
41333: LD_VAR 0 4
41337: ARRAY
41338: NONEQUAL
41339: IFFALSE 41351
// begin result := false ;
41341: LD_ADDR_VAR 0 3
41345: PUSH
41346: LD_INT 0
41348: ST_TO_ADDR
// break ;
41349: GO 41353
// end ;
41351: GO 41314
41353: POP
41354: POP
// end else
41355: GO 41365
// result := false ;
41357: LD_ADDR_VAR 0 3
41361: PUSH
41362: LD_INT 0
41364: ST_TO_ADDR
// end ;
41365: LD_VAR 0 3
41369: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41370: LD_INT 0
41372: PPUSH
41373: PPUSH
// if not array1 or not array2 then
41374: LD_VAR 0 1
41378: NOT
41379: PUSH
41380: LD_VAR 0 2
41384: NOT
41385: OR
41386: IFFALSE 41390
// exit ;
41388: GO 41454
// result := true ;
41390: LD_ADDR_VAR 0 3
41394: PUSH
41395: LD_INT 1
41397: ST_TO_ADDR
// for i = 1 to array1 do
41398: LD_ADDR_VAR 0 4
41402: PUSH
41403: DOUBLE
41404: LD_INT 1
41406: DEC
41407: ST_TO_ADDR
41408: LD_VAR 0 1
41412: PUSH
41413: FOR_TO
41414: IFFALSE 41452
// if array1 [ i ] <> array2 [ i ] then
41416: LD_VAR 0 1
41420: PUSH
41421: LD_VAR 0 4
41425: ARRAY
41426: PUSH
41427: LD_VAR 0 2
41431: PUSH
41432: LD_VAR 0 4
41436: ARRAY
41437: NONEQUAL
41438: IFFALSE 41450
// begin result := false ;
41440: LD_ADDR_VAR 0 3
41444: PUSH
41445: LD_INT 0
41447: ST_TO_ADDR
// break ;
41448: GO 41452
// end ;
41450: GO 41413
41452: POP
41453: POP
// end ;
41454: LD_VAR 0 3
41458: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41459: LD_INT 0
41461: PPUSH
41462: PPUSH
41463: PPUSH
// pom := GetBase ( fac ) ;
41464: LD_ADDR_VAR 0 5
41468: PUSH
41469: LD_VAR 0 1
41473: PPUSH
41474: CALL_OW 274
41478: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41479: LD_ADDR_VAR 0 4
41483: PUSH
41484: LD_VAR 0 2
41488: PUSH
41489: LD_INT 1
41491: ARRAY
41492: PPUSH
41493: LD_VAR 0 2
41497: PUSH
41498: LD_INT 2
41500: ARRAY
41501: PPUSH
41502: LD_VAR 0 2
41506: PUSH
41507: LD_INT 3
41509: ARRAY
41510: PPUSH
41511: LD_VAR 0 2
41515: PUSH
41516: LD_INT 4
41518: ARRAY
41519: PPUSH
41520: CALL_OW 449
41524: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41525: LD_ADDR_VAR 0 3
41529: PUSH
41530: LD_VAR 0 5
41534: PPUSH
41535: LD_INT 1
41537: PPUSH
41538: CALL_OW 275
41542: PUSH
41543: LD_VAR 0 4
41547: PUSH
41548: LD_INT 1
41550: ARRAY
41551: GREATEREQUAL
41552: PUSH
41553: LD_VAR 0 5
41557: PPUSH
41558: LD_INT 2
41560: PPUSH
41561: CALL_OW 275
41565: PUSH
41566: LD_VAR 0 4
41570: PUSH
41571: LD_INT 2
41573: ARRAY
41574: GREATEREQUAL
41575: AND
41576: PUSH
41577: LD_VAR 0 5
41581: PPUSH
41582: LD_INT 3
41584: PPUSH
41585: CALL_OW 275
41589: PUSH
41590: LD_VAR 0 4
41594: PUSH
41595: LD_INT 3
41597: ARRAY
41598: GREATEREQUAL
41599: AND
41600: ST_TO_ADDR
// end ;
41601: LD_VAR 0 3
41605: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41606: LD_INT 0
41608: PPUSH
41609: PPUSH
41610: PPUSH
41611: PPUSH
// pom := GetBase ( building ) ;
41612: LD_ADDR_VAR 0 3
41616: PUSH
41617: LD_VAR 0 1
41621: PPUSH
41622: CALL_OW 274
41626: ST_TO_ADDR
// if not pom then
41627: LD_VAR 0 3
41631: NOT
41632: IFFALSE 41636
// exit ;
41634: GO 41806
// btype := GetBType ( building ) ;
41636: LD_ADDR_VAR 0 5
41640: PUSH
41641: LD_VAR 0 1
41645: PPUSH
41646: CALL_OW 266
41650: ST_TO_ADDR
// if btype = b_armoury then
41651: LD_VAR 0 5
41655: PUSH
41656: LD_INT 4
41658: EQUAL
41659: IFFALSE 41669
// btype := b_barracks ;
41661: LD_ADDR_VAR 0 5
41665: PUSH
41666: LD_INT 5
41668: ST_TO_ADDR
// if btype = b_depot then
41669: LD_VAR 0 5
41673: PUSH
41674: LD_INT 0
41676: EQUAL
41677: IFFALSE 41687
// btype := b_warehouse ;
41679: LD_ADDR_VAR 0 5
41683: PUSH
41684: LD_INT 1
41686: ST_TO_ADDR
// if btype = b_workshop then
41687: LD_VAR 0 5
41691: PUSH
41692: LD_INT 2
41694: EQUAL
41695: IFFALSE 41705
// btype := b_factory ;
41697: LD_ADDR_VAR 0 5
41701: PUSH
41702: LD_INT 3
41704: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41705: LD_ADDR_VAR 0 4
41709: PUSH
41710: LD_VAR 0 5
41714: PPUSH
41715: LD_VAR 0 1
41719: PPUSH
41720: CALL_OW 248
41724: PPUSH
41725: CALL_OW 450
41729: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41730: LD_ADDR_VAR 0 2
41734: PUSH
41735: LD_VAR 0 3
41739: PPUSH
41740: LD_INT 1
41742: PPUSH
41743: CALL_OW 275
41747: PUSH
41748: LD_VAR 0 4
41752: PUSH
41753: LD_INT 1
41755: ARRAY
41756: GREATEREQUAL
41757: PUSH
41758: LD_VAR 0 3
41762: PPUSH
41763: LD_INT 2
41765: PPUSH
41766: CALL_OW 275
41770: PUSH
41771: LD_VAR 0 4
41775: PUSH
41776: LD_INT 2
41778: ARRAY
41779: GREATEREQUAL
41780: AND
41781: PUSH
41782: LD_VAR 0 3
41786: PPUSH
41787: LD_INT 3
41789: PPUSH
41790: CALL_OW 275
41794: PUSH
41795: LD_VAR 0 4
41799: PUSH
41800: LD_INT 3
41802: ARRAY
41803: GREATEREQUAL
41804: AND
41805: ST_TO_ADDR
// end ;
41806: LD_VAR 0 2
41810: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41811: LD_INT 0
41813: PPUSH
41814: PPUSH
41815: PPUSH
// pom := GetBase ( building ) ;
41816: LD_ADDR_VAR 0 4
41820: PUSH
41821: LD_VAR 0 1
41825: PPUSH
41826: CALL_OW 274
41830: ST_TO_ADDR
// if not pom then
41831: LD_VAR 0 4
41835: NOT
41836: IFFALSE 41840
// exit ;
41838: GO 41941
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41840: LD_ADDR_VAR 0 5
41844: PUSH
41845: LD_VAR 0 2
41849: PPUSH
41850: LD_VAR 0 1
41854: PPUSH
41855: CALL_OW 248
41859: PPUSH
41860: CALL_OW 450
41864: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41865: LD_ADDR_VAR 0 3
41869: PUSH
41870: LD_VAR 0 4
41874: PPUSH
41875: LD_INT 1
41877: PPUSH
41878: CALL_OW 275
41882: PUSH
41883: LD_VAR 0 5
41887: PUSH
41888: LD_INT 1
41890: ARRAY
41891: GREATEREQUAL
41892: PUSH
41893: LD_VAR 0 4
41897: PPUSH
41898: LD_INT 2
41900: PPUSH
41901: CALL_OW 275
41905: PUSH
41906: LD_VAR 0 5
41910: PUSH
41911: LD_INT 2
41913: ARRAY
41914: GREATEREQUAL
41915: AND
41916: PUSH
41917: LD_VAR 0 4
41921: PPUSH
41922: LD_INT 3
41924: PPUSH
41925: CALL_OW 275
41929: PUSH
41930: LD_VAR 0 5
41934: PUSH
41935: LD_INT 3
41937: ARRAY
41938: GREATEREQUAL
41939: AND
41940: ST_TO_ADDR
// end ;
41941: LD_VAR 0 3
41945: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41946: LD_INT 0
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
// result := false ;
41959: LD_ADDR_VAR 0 8
41963: PUSH
41964: LD_INT 0
41966: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41967: LD_VAR 0 5
41971: NOT
41972: PUSH
41973: LD_VAR 0 1
41977: NOT
41978: OR
41979: PUSH
41980: LD_VAR 0 2
41984: NOT
41985: OR
41986: PUSH
41987: LD_VAR 0 3
41991: NOT
41992: OR
41993: IFFALSE 41997
// exit ;
41995: GO 42811
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41997: LD_ADDR_VAR 0 14
42001: PUSH
42002: LD_VAR 0 1
42006: PPUSH
42007: LD_VAR 0 2
42011: PPUSH
42012: LD_VAR 0 3
42016: PPUSH
42017: LD_VAR 0 4
42021: PPUSH
42022: LD_VAR 0 5
42026: PUSH
42027: LD_INT 1
42029: ARRAY
42030: PPUSH
42031: CALL_OW 248
42035: PPUSH
42036: LD_INT 0
42038: PPUSH
42039: CALL 44048 0 6
42043: ST_TO_ADDR
// if not hexes then
42044: LD_VAR 0 14
42048: NOT
42049: IFFALSE 42053
// exit ;
42051: GO 42811
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42053: LD_ADDR_VAR 0 17
42057: PUSH
42058: LD_VAR 0 5
42062: PPUSH
42063: LD_INT 22
42065: PUSH
42066: LD_VAR 0 13
42070: PPUSH
42071: CALL_OW 255
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: LD_INT 30
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 30
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PPUSH
42112: CALL_OW 72
42116: ST_TO_ADDR
// for i = 1 to hexes do
42117: LD_ADDR_VAR 0 9
42121: PUSH
42122: DOUBLE
42123: LD_INT 1
42125: DEC
42126: ST_TO_ADDR
42127: LD_VAR 0 14
42131: PUSH
42132: FOR_TO
42133: IFFALSE 42809
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42135: LD_ADDR_VAR 0 13
42139: PUSH
42140: LD_VAR 0 14
42144: PUSH
42145: LD_VAR 0 9
42149: ARRAY
42150: PUSH
42151: LD_INT 1
42153: ARRAY
42154: PPUSH
42155: LD_VAR 0 14
42159: PUSH
42160: LD_VAR 0 9
42164: ARRAY
42165: PUSH
42166: LD_INT 2
42168: ARRAY
42169: PPUSH
42170: CALL_OW 428
42174: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42175: LD_VAR 0 14
42179: PUSH
42180: LD_VAR 0 9
42184: ARRAY
42185: PUSH
42186: LD_INT 1
42188: ARRAY
42189: PPUSH
42190: LD_VAR 0 14
42194: PUSH
42195: LD_VAR 0 9
42199: ARRAY
42200: PUSH
42201: LD_INT 2
42203: ARRAY
42204: PPUSH
42205: CALL_OW 351
42209: PUSH
42210: LD_VAR 0 14
42214: PUSH
42215: LD_VAR 0 9
42219: ARRAY
42220: PUSH
42221: LD_INT 1
42223: ARRAY
42224: PPUSH
42225: LD_VAR 0 14
42229: PUSH
42230: LD_VAR 0 9
42234: ARRAY
42235: PUSH
42236: LD_INT 2
42238: ARRAY
42239: PPUSH
42240: CALL_OW 488
42244: NOT
42245: OR
42246: PUSH
42247: LD_VAR 0 13
42251: PPUSH
42252: CALL_OW 247
42256: PUSH
42257: LD_INT 3
42259: EQUAL
42260: OR
42261: IFFALSE 42267
// exit ;
42263: POP
42264: POP
42265: GO 42811
// if not tmp then
42267: LD_VAR 0 13
42271: NOT
42272: IFFALSE 42276
// continue ;
42274: GO 42132
// result := true ;
42276: LD_ADDR_VAR 0 8
42280: PUSH
42281: LD_INT 1
42283: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42284: LD_VAR 0 6
42288: PUSH
42289: LD_VAR 0 13
42293: PPUSH
42294: CALL_OW 247
42298: PUSH
42299: LD_INT 2
42301: EQUAL
42302: AND
42303: PUSH
42304: LD_VAR 0 13
42308: PPUSH
42309: CALL_OW 263
42313: PUSH
42314: LD_INT 1
42316: EQUAL
42317: AND
42318: IFFALSE 42482
// begin if IsDrivenBy ( tmp ) then
42320: LD_VAR 0 13
42324: PPUSH
42325: CALL_OW 311
42329: IFFALSE 42333
// continue ;
42331: GO 42132
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42333: LD_VAR 0 6
42337: PPUSH
42338: LD_INT 3
42340: PUSH
42341: LD_INT 60
42343: PUSH
42344: EMPTY
42345: LIST
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 3
42353: PUSH
42354: LD_INT 55
42356: PUSH
42357: EMPTY
42358: LIST
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PPUSH
42368: CALL_OW 72
42372: IFFALSE 42480
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42374: LD_ADDR_VAR 0 18
42378: PUSH
42379: LD_VAR 0 6
42383: PPUSH
42384: LD_INT 3
42386: PUSH
42387: LD_INT 60
42389: PUSH
42390: EMPTY
42391: LIST
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: LD_INT 55
42402: PUSH
42403: EMPTY
42404: LIST
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PPUSH
42414: CALL_OW 72
42418: PUSH
42419: LD_INT 1
42421: ARRAY
42422: ST_TO_ADDR
// if IsInUnit ( driver ) then
42423: LD_VAR 0 18
42427: PPUSH
42428: CALL_OW 310
42432: IFFALSE 42443
// ComExit ( driver ) ;
42434: LD_VAR 0 18
42438: PPUSH
42439: CALL 67232 0 1
// AddComEnterUnit ( driver , tmp ) ;
42443: LD_VAR 0 18
42447: PPUSH
42448: LD_VAR 0 13
42452: PPUSH
42453: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42457: LD_VAR 0 18
42461: PPUSH
42462: LD_VAR 0 7
42466: PPUSH
42467: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42471: LD_VAR 0 18
42475: PPUSH
42476: CALL_OW 181
// end ; continue ;
42480: GO 42132
// end ; if not cleaners or not tmp in cleaners then
42482: LD_VAR 0 6
42486: NOT
42487: PUSH
42488: LD_VAR 0 13
42492: PUSH
42493: LD_VAR 0 6
42497: IN
42498: NOT
42499: OR
42500: IFFALSE 42807
// begin if dep then
42502: LD_VAR 0 17
42506: IFFALSE 42642
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42508: LD_ADDR_VAR 0 16
42512: PUSH
42513: LD_VAR 0 17
42517: PUSH
42518: LD_INT 1
42520: ARRAY
42521: PPUSH
42522: CALL_OW 250
42526: PPUSH
42527: LD_VAR 0 17
42531: PUSH
42532: LD_INT 1
42534: ARRAY
42535: PPUSH
42536: CALL_OW 254
42540: PPUSH
42541: LD_INT 5
42543: PPUSH
42544: CALL_OW 272
42548: PUSH
42549: LD_VAR 0 17
42553: PUSH
42554: LD_INT 1
42556: ARRAY
42557: PPUSH
42558: CALL_OW 251
42562: PPUSH
42563: LD_VAR 0 17
42567: PUSH
42568: LD_INT 1
42570: ARRAY
42571: PPUSH
42572: CALL_OW 254
42576: PPUSH
42577: LD_INT 5
42579: PPUSH
42580: CALL_OW 273
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42589: LD_VAR 0 16
42593: PUSH
42594: LD_INT 1
42596: ARRAY
42597: PPUSH
42598: LD_VAR 0 16
42602: PUSH
42603: LD_INT 2
42605: ARRAY
42606: PPUSH
42607: CALL_OW 488
42611: IFFALSE 42642
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42613: LD_VAR 0 13
42617: PPUSH
42618: LD_VAR 0 16
42622: PUSH
42623: LD_INT 1
42625: ARRAY
42626: PPUSH
42627: LD_VAR 0 16
42631: PUSH
42632: LD_INT 2
42634: ARRAY
42635: PPUSH
42636: CALL_OW 111
// continue ;
42640: GO 42132
// end ; end ; r := GetDir ( tmp ) ;
42642: LD_ADDR_VAR 0 15
42646: PUSH
42647: LD_VAR 0 13
42651: PPUSH
42652: CALL_OW 254
42656: ST_TO_ADDR
// if r = 5 then
42657: LD_VAR 0 15
42661: PUSH
42662: LD_INT 5
42664: EQUAL
42665: IFFALSE 42675
// r := 0 ;
42667: LD_ADDR_VAR 0 15
42671: PUSH
42672: LD_INT 0
42674: ST_TO_ADDR
// for j = r to 5 do
42675: LD_ADDR_VAR 0 10
42679: PUSH
42680: DOUBLE
42681: LD_VAR 0 15
42685: DEC
42686: ST_TO_ADDR
42687: LD_INT 5
42689: PUSH
42690: FOR_TO
42691: IFFALSE 42805
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42693: LD_ADDR_VAR 0 11
42697: PUSH
42698: LD_VAR 0 13
42702: PPUSH
42703: CALL_OW 250
42707: PPUSH
42708: LD_VAR 0 10
42712: PPUSH
42713: LD_INT 2
42715: PPUSH
42716: CALL_OW 272
42720: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42721: LD_ADDR_VAR 0 12
42725: PUSH
42726: LD_VAR 0 13
42730: PPUSH
42731: CALL_OW 251
42735: PPUSH
42736: LD_VAR 0 10
42740: PPUSH
42741: LD_INT 2
42743: PPUSH
42744: CALL_OW 273
42748: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42749: LD_VAR 0 11
42753: PPUSH
42754: LD_VAR 0 12
42758: PPUSH
42759: CALL_OW 488
42763: PUSH
42764: LD_VAR 0 11
42768: PPUSH
42769: LD_VAR 0 12
42773: PPUSH
42774: CALL_OW 428
42778: NOT
42779: AND
42780: IFFALSE 42803
// begin ComMoveXY ( tmp , _x , _y ) ;
42782: LD_VAR 0 13
42786: PPUSH
42787: LD_VAR 0 11
42791: PPUSH
42792: LD_VAR 0 12
42796: PPUSH
42797: CALL_OW 111
// break ;
42801: GO 42805
// end ; end ;
42803: GO 42690
42805: POP
42806: POP
// end ; end ;
42807: GO 42132
42809: POP
42810: POP
// end ;
42811: LD_VAR 0 8
42815: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42816: LD_INT 0
42818: PPUSH
// result := true ;
42819: LD_ADDR_VAR 0 3
42823: PUSH
42824: LD_INT 1
42826: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42827: LD_VAR 0 2
42831: PUSH
42832: LD_INT 24
42834: DOUBLE
42835: EQUAL
42836: IFTRUE 42846
42838: LD_INT 33
42840: DOUBLE
42841: EQUAL
42842: IFTRUE 42846
42844: GO 42871
42846: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42847: LD_ADDR_VAR 0 3
42851: PUSH
42852: LD_INT 32
42854: PPUSH
42855: LD_VAR 0 1
42859: PPUSH
42860: CALL_OW 321
42864: PUSH
42865: LD_INT 2
42867: EQUAL
42868: ST_TO_ADDR
42869: GO 43191
42871: LD_INT 20
42873: DOUBLE
42874: EQUAL
42875: IFTRUE 42879
42877: GO 42904
42879: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42880: LD_ADDR_VAR 0 3
42884: PUSH
42885: LD_INT 6
42887: PPUSH
42888: LD_VAR 0 1
42892: PPUSH
42893: CALL_OW 321
42897: PUSH
42898: LD_INT 2
42900: EQUAL
42901: ST_TO_ADDR
42902: GO 43191
42904: LD_INT 22
42906: DOUBLE
42907: EQUAL
42908: IFTRUE 42918
42910: LD_INT 36
42912: DOUBLE
42913: EQUAL
42914: IFTRUE 42918
42916: GO 42943
42918: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42919: LD_ADDR_VAR 0 3
42923: PUSH
42924: LD_INT 15
42926: PPUSH
42927: LD_VAR 0 1
42931: PPUSH
42932: CALL_OW 321
42936: PUSH
42937: LD_INT 2
42939: EQUAL
42940: ST_TO_ADDR
42941: GO 43191
42943: LD_INT 30
42945: DOUBLE
42946: EQUAL
42947: IFTRUE 42951
42949: GO 42976
42951: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42952: LD_ADDR_VAR 0 3
42956: PUSH
42957: LD_INT 20
42959: PPUSH
42960: LD_VAR 0 1
42964: PPUSH
42965: CALL_OW 321
42969: PUSH
42970: LD_INT 2
42972: EQUAL
42973: ST_TO_ADDR
42974: GO 43191
42976: LD_INT 28
42978: DOUBLE
42979: EQUAL
42980: IFTRUE 42990
42982: LD_INT 21
42984: DOUBLE
42985: EQUAL
42986: IFTRUE 42990
42988: GO 43015
42990: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_INT 21
42998: PPUSH
42999: LD_VAR 0 1
43003: PPUSH
43004: CALL_OW 321
43008: PUSH
43009: LD_INT 2
43011: EQUAL
43012: ST_TO_ADDR
43013: GO 43191
43015: LD_INT 16
43017: DOUBLE
43018: EQUAL
43019: IFTRUE 43023
43021: GO 43050
43023: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43024: LD_ADDR_VAR 0 3
43028: PUSH
43029: LD_EXP 26
43033: PPUSH
43034: LD_VAR 0 1
43038: PPUSH
43039: CALL_OW 321
43043: PUSH
43044: LD_INT 2
43046: EQUAL
43047: ST_TO_ADDR
43048: GO 43191
43050: LD_INT 19
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43064
43056: LD_INT 23
43058: DOUBLE
43059: EQUAL
43060: IFTRUE 43064
43062: GO 43091
43064: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43065: LD_ADDR_VAR 0 3
43069: PUSH
43070: LD_EXP 25
43074: PPUSH
43075: LD_VAR 0 1
43079: PPUSH
43080: CALL_OW 321
43084: PUSH
43085: LD_INT 2
43087: EQUAL
43088: ST_TO_ADDR
43089: GO 43191
43091: LD_INT 17
43093: DOUBLE
43094: EQUAL
43095: IFTRUE 43099
43097: GO 43124
43099: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43100: LD_ADDR_VAR 0 3
43104: PUSH
43105: LD_INT 39
43107: PPUSH
43108: LD_VAR 0 1
43112: PPUSH
43113: CALL_OW 321
43117: PUSH
43118: LD_INT 2
43120: EQUAL
43121: ST_TO_ADDR
43122: GO 43191
43124: LD_INT 18
43126: DOUBLE
43127: EQUAL
43128: IFTRUE 43132
43130: GO 43157
43132: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43133: LD_ADDR_VAR 0 3
43137: PUSH
43138: LD_INT 40
43140: PPUSH
43141: LD_VAR 0 1
43145: PPUSH
43146: CALL_OW 321
43150: PUSH
43151: LD_INT 2
43153: EQUAL
43154: ST_TO_ADDR
43155: GO 43191
43157: LD_INT 27
43159: DOUBLE
43160: EQUAL
43161: IFTRUE 43165
43163: GO 43190
43165: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43166: LD_ADDR_VAR 0 3
43170: PUSH
43171: LD_INT 35
43173: PPUSH
43174: LD_VAR 0 1
43178: PPUSH
43179: CALL_OW 321
43183: PUSH
43184: LD_INT 2
43186: EQUAL
43187: ST_TO_ADDR
43188: GO 43191
43190: POP
// end ;
43191: LD_VAR 0 3
43195: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43196: LD_INT 0
43198: PPUSH
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
// result := false ;
43209: LD_ADDR_VAR 0 6
43213: PUSH
43214: LD_INT 0
43216: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43217: LD_VAR 0 1
43221: NOT
43222: PUSH
43223: LD_VAR 0 1
43227: PPUSH
43228: CALL_OW 266
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: IN
43243: NOT
43244: OR
43245: PUSH
43246: LD_VAR 0 2
43250: NOT
43251: OR
43252: PUSH
43253: LD_VAR 0 5
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 3
43269: PUSH
43270: LD_INT 4
43272: PUSH
43273: LD_INT 5
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: IN
43284: NOT
43285: OR
43286: PUSH
43287: LD_VAR 0 3
43291: PPUSH
43292: LD_VAR 0 4
43296: PPUSH
43297: CALL_OW 488
43301: NOT
43302: OR
43303: IFFALSE 43307
// exit ;
43305: GO 44043
// side := GetSide ( depot ) ;
43307: LD_ADDR_VAR 0 9
43311: PUSH
43312: LD_VAR 0 1
43316: PPUSH
43317: CALL_OW 255
43321: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43322: LD_VAR 0 9
43326: PPUSH
43327: LD_VAR 0 2
43331: PPUSH
43332: CALL 42816 0 2
43336: NOT
43337: IFFALSE 43341
// exit ;
43339: GO 44043
// pom := GetBase ( depot ) ;
43341: LD_ADDR_VAR 0 10
43345: PUSH
43346: LD_VAR 0 1
43350: PPUSH
43351: CALL_OW 274
43355: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43356: LD_ADDR_VAR 0 11
43360: PUSH
43361: LD_VAR 0 2
43365: PPUSH
43366: LD_VAR 0 1
43370: PPUSH
43371: CALL_OW 248
43375: PPUSH
43376: CALL_OW 450
43380: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43381: LD_VAR 0 10
43385: PPUSH
43386: LD_INT 1
43388: PPUSH
43389: CALL_OW 275
43393: PUSH
43394: LD_VAR 0 11
43398: PUSH
43399: LD_INT 1
43401: ARRAY
43402: GREATEREQUAL
43403: PUSH
43404: LD_VAR 0 10
43408: PPUSH
43409: LD_INT 2
43411: PPUSH
43412: CALL_OW 275
43416: PUSH
43417: LD_VAR 0 11
43421: PUSH
43422: LD_INT 2
43424: ARRAY
43425: GREATEREQUAL
43426: AND
43427: PUSH
43428: LD_VAR 0 10
43432: PPUSH
43433: LD_INT 3
43435: PPUSH
43436: CALL_OW 275
43440: PUSH
43441: LD_VAR 0 11
43445: PUSH
43446: LD_INT 3
43448: ARRAY
43449: GREATEREQUAL
43450: AND
43451: NOT
43452: IFFALSE 43456
// exit ;
43454: GO 44043
// if GetBType ( depot ) = b_depot then
43456: LD_VAR 0 1
43460: PPUSH
43461: CALL_OW 266
43465: PUSH
43466: LD_INT 0
43468: EQUAL
43469: IFFALSE 43481
// dist := 28 else
43471: LD_ADDR_VAR 0 14
43475: PUSH
43476: LD_INT 28
43478: ST_TO_ADDR
43479: GO 43489
// dist := 36 ;
43481: LD_ADDR_VAR 0 14
43485: PUSH
43486: LD_INT 36
43488: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43489: LD_VAR 0 1
43493: PPUSH
43494: LD_VAR 0 3
43498: PPUSH
43499: LD_VAR 0 4
43503: PPUSH
43504: CALL_OW 297
43508: PUSH
43509: LD_VAR 0 14
43513: GREATER
43514: IFFALSE 43518
// exit ;
43516: GO 44043
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43518: LD_ADDR_VAR 0 12
43522: PUSH
43523: LD_VAR 0 2
43527: PPUSH
43528: LD_VAR 0 3
43532: PPUSH
43533: LD_VAR 0 4
43537: PPUSH
43538: LD_VAR 0 5
43542: PPUSH
43543: LD_VAR 0 1
43547: PPUSH
43548: CALL_OW 248
43552: PPUSH
43553: LD_INT 0
43555: PPUSH
43556: CALL 44048 0 6
43560: ST_TO_ADDR
// if not hexes then
43561: LD_VAR 0 12
43565: NOT
43566: IFFALSE 43570
// exit ;
43568: GO 44043
// hex := GetHexInfo ( x , y ) ;
43570: LD_ADDR_VAR 0 15
43574: PUSH
43575: LD_VAR 0 3
43579: PPUSH
43580: LD_VAR 0 4
43584: PPUSH
43585: CALL_OW 546
43589: ST_TO_ADDR
// if hex [ 1 ] then
43590: LD_VAR 0 15
43594: PUSH
43595: LD_INT 1
43597: ARRAY
43598: IFFALSE 43602
// exit ;
43600: GO 44043
// height := hex [ 2 ] ;
43602: LD_ADDR_VAR 0 13
43606: PUSH
43607: LD_VAR 0 15
43611: PUSH
43612: LD_INT 2
43614: ARRAY
43615: ST_TO_ADDR
// for i = 1 to hexes do
43616: LD_ADDR_VAR 0 7
43620: PUSH
43621: DOUBLE
43622: LD_INT 1
43624: DEC
43625: ST_TO_ADDR
43626: LD_VAR 0 12
43630: PUSH
43631: FOR_TO
43632: IFFALSE 43962
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43634: LD_VAR 0 12
43638: PUSH
43639: LD_VAR 0 7
43643: ARRAY
43644: PUSH
43645: LD_INT 1
43647: ARRAY
43648: PPUSH
43649: LD_VAR 0 12
43653: PUSH
43654: LD_VAR 0 7
43658: ARRAY
43659: PUSH
43660: LD_INT 2
43662: ARRAY
43663: PPUSH
43664: CALL_OW 488
43668: NOT
43669: PUSH
43670: LD_VAR 0 12
43674: PUSH
43675: LD_VAR 0 7
43679: ARRAY
43680: PUSH
43681: LD_INT 1
43683: ARRAY
43684: PPUSH
43685: LD_VAR 0 12
43689: PUSH
43690: LD_VAR 0 7
43694: ARRAY
43695: PUSH
43696: LD_INT 2
43698: ARRAY
43699: PPUSH
43700: CALL_OW 428
43704: PUSH
43705: LD_INT 0
43707: GREATER
43708: OR
43709: PUSH
43710: LD_VAR 0 12
43714: PUSH
43715: LD_VAR 0 7
43719: ARRAY
43720: PUSH
43721: LD_INT 1
43723: ARRAY
43724: PPUSH
43725: LD_VAR 0 12
43729: PUSH
43730: LD_VAR 0 7
43734: ARRAY
43735: PUSH
43736: LD_INT 2
43738: ARRAY
43739: PPUSH
43740: CALL_OW 351
43744: OR
43745: IFFALSE 43751
// exit ;
43747: POP
43748: POP
43749: GO 44043
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43751: LD_ADDR_VAR 0 8
43755: PUSH
43756: LD_VAR 0 12
43760: PUSH
43761: LD_VAR 0 7
43765: ARRAY
43766: PUSH
43767: LD_INT 1
43769: ARRAY
43770: PPUSH
43771: LD_VAR 0 12
43775: PUSH
43776: LD_VAR 0 7
43780: ARRAY
43781: PUSH
43782: LD_INT 2
43784: ARRAY
43785: PPUSH
43786: CALL_OW 546
43790: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43791: LD_VAR 0 8
43795: PUSH
43796: LD_INT 1
43798: ARRAY
43799: PUSH
43800: LD_VAR 0 8
43804: PUSH
43805: LD_INT 2
43807: ARRAY
43808: PUSH
43809: LD_VAR 0 13
43813: PUSH
43814: LD_INT 2
43816: PLUS
43817: GREATER
43818: OR
43819: PUSH
43820: LD_VAR 0 8
43824: PUSH
43825: LD_INT 2
43827: ARRAY
43828: PUSH
43829: LD_VAR 0 13
43833: PUSH
43834: LD_INT 2
43836: MINUS
43837: LESS
43838: OR
43839: PUSH
43840: LD_VAR 0 8
43844: PUSH
43845: LD_INT 3
43847: ARRAY
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 8
43854: PUSH
43855: LD_INT 9
43857: PUSH
43858: LD_INT 10
43860: PUSH
43861: LD_INT 11
43863: PUSH
43864: LD_INT 12
43866: PUSH
43867: LD_INT 13
43869: PUSH
43870: LD_INT 16
43872: PUSH
43873: LD_INT 17
43875: PUSH
43876: LD_INT 18
43878: PUSH
43879: LD_INT 19
43881: PUSH
43882: LD_INT 20
43884: PUSH
43885: LD_INT 21
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: IN
43903: NOT
43904: OR
43905: PUSH
43906: LD_VAR 0 8
43910: PUSH
43911: LD_INT 5
43913: ARRAY
43914: NOT
43915: OR
43916: PUSH
43917: LD_VAR 0 8
43921: PUSH
43922: LD_INT 6
43924: ARRAY
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: LD_INT 7
43934: PUSH
43935: LD_INT 9
43937: PUSH
43938: LD_INT 10
43940: PUSH
43941: LD_INT 11
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: IN
43952: NOT
43953: OR
43954: IFFALSE 43960
// exit ;
43956: POP
43957: POP
43958: GO 44043
// end ;
43960: GO 43631
43962: POP
43963: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43964: LD_VAR 0 9
43968: PPUSH
43969: LD_VAR 0 3
43973: PPUSH
43974: LD_VAR 0 4
43978: PPUSH
43979: LD_INT 20
43981: PPUSH
43982: CALL 35989 0 4
43986: PUSH
43987: LD_INT 4
43989: ARRAY
43990: IFFALSE 43994
// exit ;
43992: GO 44043
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43994: LD_VAR 0 2
43998: PUSH
43999: LD_INT 29
44001: PUSH
44002: LD_INT 30
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: IN
44009: PUSH
44010: LD_VAR 0 3
44014: PPUSH
44015: LD_VAR 0 4
44019: PPUSH
44020: LD_VAR 0 9
44024: PPUSH
44025: CALL_OW 440
44029: NOT
44030: AND
44031: IFFALSE 44035
// exit ;
44033: GO 44043
// result := true ;
44035: LD_ADDR_VAR 0 6
44039: PUSH
44040: LD_INT 1
44042: ST_TO_ADDR
// end ;
44043: LD_VAR 0 6
44047: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44048: LD_INT 0
44050: PPUSH
44051: PPUSH
44052: PPUSH
44053: PPUSH
44054: PPUSH
44055: PPUSH
44056: PPUSH
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
44068: PPUSH
44069: PPUSH
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
44098: PPUSH
44099: PPUSH
44100: PPUSH
44101: PPUSH
44102: PPUSH
44103: PPUSH
44104: PPUSH
44105: PPUSH
44106: PPUSH
44107: PPUSH
// result = [ ] ;
44108: LD_ADDR_VAR 0 7
44112: PUSH
44113: EMPTY
44114: ST_TO_ADDR
// temp_list = [ ] ;
44115: LD_ADDR_VAR 0 9
44119: PUSH
44120: EMPTY
44121: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44122: LD_VAR 0 4
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 3
44138: PUSH
44139: LD_INT 4
44141: PUSH
44142: LD_INT 5
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: IN
44153: NOT
44154: PUSH
44155: LD_VAR 0 1
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: IN
44170: PUSH
44171: LD_VAR 0 5
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 3
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: IN
44190: NOT
44191: AND
44192: OR
44193: IFFALSE 44197
// exit ;
44195: GO 62588
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44197: LD_VAR 0 1
44201: PUSH
44202: LD_INT 6
44204: PUSH
44205: LD_INT 7
44207: PUSH
44208: LD_INT 8
44210: PUSH
44211: LD_INT 13
44213: PUSH
44214: LD_INT 12
44216: PUSH
44217: LD_INT 15
44219: PUSH
44220: LD_INT 11
44222: PUSH
44223: LD_INT 14
44225: PUSH
44226: LD_INT 10
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: IN
44240: IFFALSE 44250
// btype = b_lab ;
44242: LD_ADDR_VAR 0 1
44246: PUSH
44247: LD_INT 6
44249: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44250: LD_VAR 0 6
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: IN
44269: NOT
44270: PUSH
44271: LD_VAR 0 1
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: LD_INT 3
44287: PUSH
44288: LD_INT 6
44290: PUSH
44291: LD_INT 36
44293: PUSH
44294: LD_INT 4
44296: PUSH
44297: LD_INT 5
44299: PUSH
44300: LD_INT 31
44302: PUSH
44303: LD_INT 32
44305: PUSH
44306: LD_INT 33
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: IN
44322: NOT
44323: PUSH
44324: LD_VAR 0 6
44328: PUSH
44329: LD_INT 1
44331: EQUAL
44332: AND
44333: OR
44334: PUSH
44335: LD_VAR 0 1
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: LD_INT 3
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: IN
44350: NOT
44351: PUSH
44352: LD_VAR 0 6
44356: PUSH
44357: LD_INT 2
44359: EQUAL
44360: AND
44361: OR
44362: IFFALSE 44372
// mode = 0 ;
44364: LD_ADDR_VAR 0 6
44368: PUSH
44369: LD_INT 0
44371: ST_TO_ADDR
// case mode of 0 :
44372: LD_VAR 0 6
44376: PUSH
44377: LD_INT 0
44379: DOUBLE
44380: EQUAL
44381: IFTRUE 44385
44383: GO 55838
44385: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44386: LD_ADDR_VAR 0 11
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 3
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44579: LD_ADDR_VAR 0 12
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: NEG
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 3
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44775: LD_ADDR_VAR 0 13
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 3
44934: NEG
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 3
44946: NEG
44947: PUSH
44948: LD_INT 3
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44974: LD_ADDR_VAR 0 14
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 3
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 3
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45170: LD_ADDR_VAR 0 15
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 3
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45363: LD_ADDR_VAR 0 16
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 3
45520: PUSH
45521: LD_INT 3
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: LD_INT 3
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45556: LD_ADDR_VAR 0 17
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: LD_INT 2
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: NEG
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45786: LD_ADDR_VAR 0 18
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: NEG
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46016: LD_ADDR_VAR 0 19
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46246: LD_ADDR_VAR 0 20
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46476: LD_ADDR_VAR 0 21
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46706: LD_ADDR_VAR 0 22
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46936: LD_ADDR_VAR 0 23
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: LD_INT 3
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 2
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47216: LD_ADDR_VAR 0 24
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: NEG
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 3
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47492: LD_ADDR_VAR 0 25
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 3
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: LD_INT 3
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: LD_INT 3
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47766: LD_ADDR_VAR 0 26
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 3
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48042: LD_ADDR_VAR 0 27
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 3
48287: NEG
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48322: LD_ADDR_VAR 0 28
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: LD_INT 3
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 3
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 3
48557: NEG
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: NEG
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48604: LD_ADDR_VAR 0 29
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: LD_INT 3
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 3
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: NEG
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48883: LD_ADDR_VAR 0 30
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: LD_INT 3
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 3
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: LD_INT 3
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 3
49126: NEG
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49161: LD_ADDR_VAR 0 31
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: LD_INT 3
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 3
49404: NEG
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49439: LD_ADDR_VAR 0 32
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: LD_INT 3
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 3
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 3
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49717: LD_ADDR_VAR 0 33
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 3
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49996: LD_ADDR_VAR 0 34
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 2
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: NEG
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 3
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 2
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 3
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 3
50241: NEG
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50276: LD_ADDR_VAR 0 35
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50388: LD_ADDR_VAR 0 36
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50500: LD_ADDR_VAR 0 37
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50612: LD_ADDR_VAR 0 38
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50724: LD_ADDR_VAR 0 39
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50836: LD_ADDR_VAR 0 40
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50948: LD_ADDR_VAR 0 41
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 3
51222: NEG
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 3
51245: NEG
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 3
51257: NEG
51258: PUSH
51259: LD_INT 3
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51298: LD_ADDR_VAR 0 42
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 3
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: LD_INT 3
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 3
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 3
51607: NEG
51608: PUSH
51609: LD_INT 3
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51648: LD_ADDR_VAR 0 43
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 3
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 3
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51996: LD_ADDR_VAR 0 44
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 3
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 2
52249: PUSH
52250: LD_INT 3
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 3
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 3
52293: NEG
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 3
52305: NEG
52306: PUSH
52307: LD_INT 3
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52346: LD_ADDR_VAR 0 45
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 3
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 3
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 3
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 3
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: LD_INT 2
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 3
52655: NEG
52656: PUSH
52657: LD_INT 3
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52696: LD_ADDR_VAR 0 46
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 3
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 3
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 3
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 3
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: NEG
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53044: LD_ADDR_VAR 0 47
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53195: LD_ADDR_VAR 0 48
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53342: LD_ADDR_VAR 0 49
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53486: LD_ADDR_VAR 0 50
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53630: LD_ADDR_VAR 0 51
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53777: LD_ADDR_VAR 0 52
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53928: LD_ADDR_VAR 0 53
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54158: LD_ADDR_VAR 0 54
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 2
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54388: LD_ADDR_VAR 0 55
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54618: LD_ADDR_VAR 0 56
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54848: LD_ADDR_VAR 0 57
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55078: LD_ADDR_VAR 0 58
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55308: LD_ADDR_VAR 0 59
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55396: LD_ADDR_VAR 0 60
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55484: LD_ADDR_VAR 0 61
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55572: LD_ADDR_VAR 0 62
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55660: LD_ADDR_VAR 0 63
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55748: LD_ADDR_VAR 0 64
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: ST_TO_ADDR
// end ; 1 :
55836: GO 61733
55838: LD_INT 1
55840: DOUBLE
55841: EQUAL
55842: IFTRUE 55846
55844: GO 58469
55846: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55847: LD_ADDR_VAR 0 11
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: LD_INT 3
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 3
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55891: LD_ADDR_VAR 0 12
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: LIST
55931: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55932: LD_ADDR_VAR 0 13
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55972: LD_ADDR_VAR 0 14
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: LIST
56012: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56013: LD_ADDR_VAR 0 15
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 3
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56057: LD_ADDR_VAR 0 16
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 3
56088: NEG
56089: PUSH
56090: LD_INT 3
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56103: LD_ADDR_VAR 0 17
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 3
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 3
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56147: LD_ADDR_VAR 0 18
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: LIST
56187: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56188: LD_ADDR_VAR 0 19
56192: PUSH
56193: LD_INT 3
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56228: LD_ADDR_VAR 0 20
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56269: LD_ADDR_VAR 0 21
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 3
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: LIST
56312: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56313: LD_ADDR_VAR 0 22
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 3
56332: NEG
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 3
56344: NEG
56345: PUSH
56346: LD_INT 3
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56359: LD_ADDR_VAR 0 23
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 3
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 4
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 3
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: LIST
56402: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56403: LD_ADDR_VAR 0 24
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 4
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: LIST
56443: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56444: LD_ADDR_VAR 0 25
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 4
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: LD_INT 4
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56484: LD_ADDR_VAR 0 26
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: LD_INT 4
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56525: LD_ADDR_VAR 0 27
56529: PUSH
56530: LD_INT 3
56532: NEG
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: NEG
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 4
56554: NEG
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56569: LD_ADDR_VAR 0 28
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 3
56588: NEG
56589: PUSH
56590: LD_INT 4
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 4
56600: NEG
56601: PUSH
56602: LD_INT 3
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56615: LD_ADDR_VAR 0 29
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: LD_INT 4
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 4
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 3
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 5
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 5
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 4
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 6
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 6
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 5
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56770: LD_ADDR_VAR 0 30
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 3
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 3
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 4
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 4
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 4
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 5
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 5
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 5
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 6
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 6
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56913: LD_ADDR_VAR 0 31
56917: PUSH
56918: LD_INT 3
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 3
56930: PUSH
56931: LD_INT 3
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 4
56950: PUSH
56951: LD_INT 3
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 4
56960: PUSH
56961: LD_INT 4
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: PUSH
56971: LD_INT 4
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 5
56980: PUSH
56981: LD_INT 4
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 5
56990: PUSH
56991: LD_INT 5
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 4
57000: PUSH
57001: LD_INT 5
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 6
57010: PUSH
57011: LD_INT 5
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 6
57020: PUSH
57021: LD_INT 6
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 5
57030: PUSH
57031: LD_INT 6
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57052: LD_ADDR_VAR 0 32
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 3
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 4
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 4
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 5
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 5
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: LD_INT 4
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 6
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: LD_INT 6
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: LD_INT 5
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57195: LD_ADDR_VAR 0 33
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 4
57247: NEG
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 4
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 4
57270: NEG
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 5
57281: NEG
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 5
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 5
57304: NEG
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 6
57315: NEG
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 6
57326: NEG
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57350: LD_ADDR_VAR 0 34
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: LD_INT 3
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: NEG
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: LD_INT 4
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 4
57405: NEG
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 4
57417: NEG
57418: PUSH
57419: LD_INT 4
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 4
57429: NEG
57430: PUSH
57431: LD_INT 5
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 5
57441: NEG
57442: PUSH
57443: LD_INT 4
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 5
57453: NEG
57454: PUSH
57455: LD_INT 5
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 5
57465: NEG
57466: PUSH
57467: LD_INT 6
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 6
57477: NEG
57478: PUSH
57479: LD_INT 5
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 6
57489: NEG
57490: PUSH
57491: LD_INT 6
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57513: LD_ADDR_VAR 0 41
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 3
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57557: LD_ADDR_VAR 0 42
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 3
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57598: LD_ADDR_VAR 0 43
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 3
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: LD_INT 3
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: LIST
57637: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57638: LD_ADDR_VAR 0 44
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: LD_INT 3
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57679: LD_ADDR_VAR 0 45
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57723: LD_ADDR_VAR 0 46
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 3
57754: NEG
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: LIST
57768: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57769: LD_ADDR_VAR 0 47
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: LD_INT 3
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57802: LD_ADDR_VAR 0 48
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57833: LD_ADDR_VAR 0 49
57837: PUSH
57838: LD_INT 3
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 3
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57862: LD_ADDR_VAR 0 50
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57891: LD_ADDR_VAR 0 51
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 2
57909: NEG
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57922: LD_ADDR_VAR 0 52
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57955: LD_ADDR_VAR 0 53
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57999: LD_ADDR_VAR 0 54
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 3
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58040: LD_ADDR_VAR 0 55
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: LD_INT 3
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: LIST
58079: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58080: LD_ADDR_VAR 0 56
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: LD_INT 3
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58121: LD_ADDR_VAR 0 57
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58165: LD_ADDR_VAR 0 58
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: LD_INT 2
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: NEG
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: LIST
58210: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58211: LD_ADDR_VAR 0 59
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: LIST
58254: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58255: LD_ADDR_VAR 0 60
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: LIST
58295: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58296: LD_ADDR_VAR 0 61
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: LIST
58335: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58336: LD_ADDR_VAR 0 62
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: LIST
58376: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58377: LD_ADDR_VAR 0 63
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: LIST
58420: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58421: LD_ADDR_VAR 0 64
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: LIST
58466: ST_TO_ADDR
// end ; 2 :
58467: GO 61733
58469: LD_INT 2
58471: DOUBLE
58472: EQUAL
58473: IFTRUE 58477
58475: GO 61732
58477: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58478: LD_ADDR_VAR 0 29
58482: PUSH
58483: LD_INT 4
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 4
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 5
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 5
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 4
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 5
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: PUSH
58579: LD_INT 3
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 4
58598: PUSH
58599: LD_INT 3
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 4
58608: PUSH
58609: LD_INT 4
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: LD_INT 3
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: LD_INT 2
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 4
58648: PUSH
58649: LD_INT 2
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: LD_INT 4
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 4
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: LD_INT 4
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 5
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 5
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: LD_INT 4
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 5
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: NEG
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 4
58817: NEG
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 4
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 4
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 4
58863: NEG
58864: PUSH
58865: LD_INT 4
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 4
58875: NEG
58876: PUSH
58877: LD_INT 5
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: LD_INT 4
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 4
58911: NEG
58912: PUSH
58913: LD_INT 3
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 5
58923: NEG
58924: PUSH
58925: LD_INT 4
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 5
58935: NEG
58936: PUSH
58937: LD_INT 5
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 3
58947: NEG
58948: PUSH
58949: LD_INT 5
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 5
58959: NEG
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59016: LD_ADDR_VAR 0 30
59020: PUSH
59021: LD_INT 4
59023: PUSH
59024: LD_INT 4
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 4
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 5
59043: PUSH
59044: LD_INT 4
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 5
59053: PUSH
59054: LD_INT 5
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 4
59063: PUSH
59064: LD_INT 5
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 3
59073: PUSH
59074: LD_INT 4
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 3
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 5
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 5
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 4
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 4
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: LD_INT 4
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 4
59206: NEG
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 4
59217: NEG
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 3
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 4
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 5
59262: NEG
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 5
59273: NEG
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 5
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: LD_INT 4
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 3
59356: NEG
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 4
59368: NEG
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 4
59380: NEG
59381: PUSH
59382: LD_INT 4
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: LD_INT 4
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 4
59404: NEG
59405: PUSH
59406: LD_INT 2
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 4
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 5
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 4
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: LD_INT 3
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 4
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: LD_INT 5
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: PUSH
59496: LD_INT 3
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 5
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59563: LD_ADDR_VAR 0 31
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 4
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 3
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: LD_INT 4
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: LD_INT 5
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 5
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 4
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: LD_INT 3
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 5
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 2
59652: NEG
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: NEG
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 4
59719: NEG
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 4
59730: NEG
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 4
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 4
59765: NEG
59766: PUSH
59767: LD_INT 4
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 4
59777: NEG
59778: PUSH
59779: LD_INT 5
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: LD_INT 4
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: LD_INT 3
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 4
59813: NEG
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 5
59825: NEG
59826: PUSH
59827: LD_INT 4
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 5
59837: NEG
59838: PUSH
59839: LD_INT 5
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 3
59849: NEG
59850: PUSH
59851: LD_INT 5
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 5
59861: NEG
59862: PUSH
59863: LD_INT 3
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 3
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 4
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: LD_INT 3
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: LD_INT 4
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: LD_INT 4
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 4
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 4
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 5
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 5
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 4
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: LD_INT 2
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 5
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60113: LD_ADDR_VAR 0 32
60117: PUSH
60118: LD_INT 4
60120: NEG
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 4
60131: NEG
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 4
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 5
60176: NEG
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 5
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 5
60199: NEG
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 3
60211: NEG
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: LD_INT 3
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: LD_INT 4
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: LD_INT 2
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 3
60270: NEG
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 4
60282: NEG
60283: PUSH
60284: LD_INT 3
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 4
60294: NEG
60295: PUSH
60296: LD_INT 4
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 2
60306: NEG
60307: PUSH
60308: LD_INT 4
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 4
60318: NEG
60319: PUSH
60320: LD_INT 2
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: LD_INT 4
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 5
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: LD_INT 4
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 4
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 5
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: LD_INT 3
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: LD_INT 5
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 3
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 3
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 4
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 4
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 3
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: LD_INT 2
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 4
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 4
60525: PUSH
60526: LD_INT 4
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 4
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 5
60545: PUSH
60546: LD_INT 4
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 5
60555: PUSH
60556: LD_INT 5
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 4
60565: PUSH
60566: LD_INT 5
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 3
60575: PUSH
60576: LD_INT 4
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 3
60585: PUSH
60586: LD_INT 3
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 5
60595: PUSH
60596: LD_INT 3
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 3
60605: PUSH
60606: LD_INT 5
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60660: LD_ADDR_VAR 0 33
60664: PUSH
60665: LD_INT 4
60667: NEG
60668: PUSH
60669: LD_INT 4
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 4
60679: NEG
60680: PUSH
60681: LD_INT 5
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 3
60691: NEG
60692: PUSH
60693: LD_INT 4
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 3
60703: NEG
60704: PUSH
60705: LD_INT 3
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 4
60715: NEG
60716: PUSH
60717: LD_INT 3
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 5
60727: NEG
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 5
60739: NEG
60740: PUSH
60741: LD_INT 5
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: LD_INT 5
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 5
60763: NEG
60764: PUSH
60765: LD_INT 3
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: LD_INT 3
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 4
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 3
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: LD_INT 3
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: LD_INT 4
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: NEG
60866: PUSH
60867: LD_INT 4
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 4
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 4
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 5
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 5
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 4
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 5
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: LD_INT 3
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 4
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 4
61000: PUSH
61001: LD_INT 4
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: LD_INT 4
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: LD_INT 3
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 4
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 4
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 4
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: LD_INT 3
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 4
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: LD_INT 5
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 5
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 4
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 3
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: LD_INT 5
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61198: LD_ADDR_VAR 0 34
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 4
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 5
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: LD_INT 4
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 3
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: LD_INT 4
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: LD_INT 5
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 2
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: LD_INT 5
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 3
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 4
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 4
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 3
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 4
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 4
61400: PUSH
61401: LD_INT 4
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 5
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 5
61430: PUSH
61431: LD_INT 5
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 4
61440: PUSH
61441: LD_INT 5
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: LD_INT 4
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 5
61470: PUSH
61471: LD_INT 3
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: LD_INT 5
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: LD_INT 2
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: LD_INT 3
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: LD_INT 4
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: LD_INT 4
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: LD_INT 3
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 4
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 4
61583: NEG
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 4
61594: NEG
61595: PUSH
61596: LD_INT 1
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: NEG
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 4
61628: NEG
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 5
61639: NEG
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 5
61650: NEG
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 5
61662: NEG
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 3
61674: NEG
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: ST_TO_ADDR
// end ; end ;
61730: GO 61733
61732: POP
// case btype of b_depot , b_warehouse :
61733: LD_VAR 0 1
61737: PUSH
61738: LD_INT 0
61740: DOUBLE
61741: EQUAL
61742: IFTRUE 61752
61744: LD_INT 1
61746: DOUBLE
61747: EQUAL
61748: IFTRUE 61752
61750: GO 61953
61752: POP
// case nation of nation_american :
61753: LD_VAR 0 5
61757: PUSH
61758: LD_INT 1
61760: DOUBLE
61761: EQUAL
61762: IFTRUE 61766
61764: GO 61822
61766: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61767: LD_ADDR_VAR 0 9
61771: PUSH
61772: LD_VAR 0 11
61776: PUSH
61777: LD_VAR 0 12
61781: PUSH
61782: LD_VAR 0 13
61786: PUSH
61787: LD_VAR 0 14
61791: PUSH
61792: LD_VAR 0 15
61796: PUSH
61797: LD_VAR 0 16
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: PUSH
61810: LD_VAR 0 4
61814: PUSH
61815: LD_INT 1
61817: PLUS
61818: ARRAY
61819: ST_TO_ADDR
61820: GO 61951
61822: LD_INT 2
61824: DOUBLE
61825: EQUAL
61826: IFTRUE 61830
61828: GO 61886
61830: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61831: LD_ADDR_VAR 0 9
61835: PUSH
61836: LD_VAR 0 17
61840: PUSH
61841: LD_VAR 0 18
61845: PUSH
61846: LD_VAR 0 19
61850: PUSH
61851: LD_VAR 0 20
61855: PUSH
61856: LD_VAR 0 21
61860: PUSH
61861: LD_VAR 0 22
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: PUSH
61874: LD_VAR 0 4
61878: PUSH
61879: LD_INT 1
61881: PLUS
61882: ARRAY
61883: ST_TO_ADDR
61884: GO 61951
61886: LD_INT 3
61888: DOUBLE
61889: EQUAL
61890: IFTRUE 61894
61892: GO 61950
61894: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61895: LD_ADDR_VAR 0 9
61899: PUSH
61900: LD_VAR 0 23
61904: PUSH
61905: LD_VAR 0 24
61909: PUSH
61910: LD_VAR 0 25
61914: PUSH
61915: LD_VAR 0 26
61919: PUSH
61920: LD_VAR 0 27
61924: PUSH
61925: LD_VAR 0 28
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: PUSH
61938: LD_VAR 0 4
61942: PUSH
61943: LD_INT 1
61945: PLUS
61946: ARRAY
61947: ST_TO_ADDR
61948: GO 61951
61950: POP
61951: GO 62506
61953: LD_INT 2
61955: DOUBLE
61956: EQUAL
61957: IFTRUE 61967
61959: LD_INT 3
61961: DOUBLE
61962: EQUAL
61963: IFTRUE 61967
61965: GO 62023
61967: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61968: LD_ADDR_VAR 0 9
61972: PUSH
61973: LD_VAR 0 29
61977: PUSH
61978: LD_VAR 0 30
61982: PUSH
61983: LD_VAR 0 31
61987: PUSH
61988: LD_VAR 0 32
61992: PUSH
61993: LD_VAR 0 33
61997: PUSH
61998: LD_VAR 0 34
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: PUSH
62011: LD_VAR 0 4
62015: PUSH
62016: LD_INT 1
62018: PLUS
62019: ARRAY
62020: ST_TO_ADDR
62021: GO 62506
62023: LD_INT 16
62025: DOUBLE
62026: EQUAL
62027: IFTRUE 62085
62029: LD_INT 17
62031: DOUBLE
62032: EQUAL
62033: IFTRUE 62085
62035: LD_INT 18
62037: DOUBLE
62038: EQUAL
62039: IFTRUE 62085
62041: LD_INT 19
62043: DOUBLE
62044: EQUAL
62045: IFTRUE 62085
62047: LD_INT 22
62049: DOUBLE
62050: EQUAL
62051: IFTRUE 62085
62053: LD_INT 20
62055: DOUBLE
62056: EQUAL
62057: IFTRUE 62085
62059: LD_INT 21
62061: DOUBLE
62062: EQUAL
62063: IFTRUE 62085
62065: LD_INT 23
62067: DOUBLE
62068: EQUAL
62069: IFTRUE 62085
62071: LD_INT 24
62073: DOUBLE
62074: EQUAL
62075: IFTRUE 62085
62077: LD_INT 25
62079: DOUBLE
62080: EQUAL
62081: IFTRUE 62085
62083: GO 62141
62085: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62086: LD_ADDR_VAR 0 9
62090: PUSH
62091: LD_VAR 0 35
62095: PUSH
62096: LD_VAR 0 36
62100: PUSH
62101: LD_VAR 0 37
62105: PUSH
62106: LD_VAR 0 38
62110: PUSH
62111: LD_VAR 0 39
62115: PUSH
62116: LD_VAR 0 40
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: PUSH
62129: LD_VAR 0 4
62133: PUSH
62134: LD_INT 1
62136: PLUS
62137: ARRAY
62138: ST_TO_ADDR
62139: GO 62506
62141: LD_INT 6
62143: DOUBLE
62144: EQUAL
62145: IFTRUE 62197
62147: LD_INT 7
62149: DOUBLE
62150: EQUAL
62151: IFTRUE 62197
62153: LD_INT 8
62155: DOUBLE
62156: EQUAL
62157: IFTRUE 62197
62159: LD_INT 13
62161: DOUBLE
62162: EQUAL
62163: IFTRUE 62197
62165: LD_INT 12
62167: DOUBLE
62168: EQUAL
62169: IFTRUE 62197
62171: LD_INT 15
62173: DOUBLE
62174: EQUAL
62175: IFTRUE 62197
62177: LD_INT 11
62179: DOUBLE
62180: EQUAL
62181: IFTRUE 62197
62183: LD_INT 14
62185: DOUBLE
62186: EQUAL
62187: IFTRUE 62197
62189: LD_INT 10
62191: DOUBLE
62192: EQUAL
62193: IFTRUE 62197
62195: GO 62253
62197: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62198: LD_ADDR_VAR 0 9
62202: PUSH
62203: LD_VAR 0 41
62207: PUSH
62208: LD_VAR 0 42
62212: PUSH
62213: LD_VAR 0 43
62217: PUSH
62218: LD_VAR 0 44
62222: PUSH
62223: LD_VAR 0 45
62227: PUSH
62228: LD_VAR 0 46
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: PUSH
62241: LD_VAR 0 4
62245: PUSH
62246: LD_INT 1
62248: PLUS
62249: ARRAY
62250: ST_TO_ADDR
62251: GO 62506
62253: LD_INT 36
62255: DOUBLE
62256: EQUAL
62257: IFTRUE 62261
62259: GO 62317
62261: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62262: LD_ADDR_VAR 0 9
62266: PUSH
62267: LD_VAR 0 47
62271: PUSH
62272: LD_VAR 0 48
62276: PUSH
62277: LD_VAR 0 49
62281: PUSH
62282: LD_VAR 0 50
62286: PUSH
62287: LD_VAR 0 51
62291: PUSH
62292: LD_VAR 0 52
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: PUSH
62305: LD_VAR 0 4
62309: PUSH
62310: LD_INT 1
62312: PLUS
62313: ARRAY
62314: ST_TO_ADDR
62315: GO 62506
62317: LD_INT 4
62319: DOUBLE
62320: EQUAL
62321: IFTRUE 62343
62323: LD_INT 5
62325: DOUBLE
62326: EQUAL
62327: IFTRUE 62343
62329: LD_INT 34
62331: DOUBLE
62332: EQUAL
62333: IFTRUE 62343
62335: LD_INT 37
62337: DOUBLE
62338: EQUAL
62339: IFTRUE 62343
62341: GO 62399
62343: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62344: LD_ADDR_VAR 0 9
62348: PUSH
62349: LD_VAR 0 53
62353: PUSH
62354: LD_VAR 0 54
62358: PUSH
62359: LD_VAR 0 55
62363: PUSH
62364: LD_VAR 0 56
62368: PUSH
62369: LD_VAR 0 57
62373: PUSH
62374: LD_VAR 0 58
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: PUSH
62387: LD_VAR 0 4
62391: PUSH
62392: LD_INT 1
62394: PLUS
62395: ARRAY
62396: ST_TO_ADDR
62397: GO 62506
62399: LD_INT 31
62401: DOUBLE
62402: EQUAL
62403: IFTRUE 62449
62405: LD_INT 32
62407: DOUBLE
62408: EQUAL
62409: IFTRUE 62449
62411: LD_INT 33
62413: DOUBLE
62414: EQUAL
62415: IFTRUE 62449
62417: LD_INT 27
62419: DOUBLE
62420: EQUAL
62421: IFTRUE 62449
62423: LD_INT 26
62425: DOUBLE
62426: EQUAL
62427: IFTRUE 62449
62429: LD_INT 28
62431: DOUBLE
62432: EQUAL
62433: IFTRUE 62449
62435: LD_INT 29
62437: DOUBLE
62438: EQUAL
62439: IFTRUE 62449
62441: LD_INT 30
62443: DOUBLE
62444: EQUAL
62445: IFTRUE 62449
62447: GO 62505
62449: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62450: LD_ADDR_VAR 0 9
62454: PUSH
62455: LD_VAR 0 59
62459: PUSH
62460: LD_VAR 0 60
62464: PUSH
62465: LD_VAR 0 61
62469: PUSH
62470: LD_VAR 0 62
62474: PUSH
62475: LD_VAR 0 63
62479: PUSH
62480: LD_VAR 0 64
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: PUSH
62493: LD_VAR 0 4
62497: PUSH
62498: LD_INT 1
62500: PLUS
62501: ARRAY
62502: ST_TO_ADDR
62503: GO 62506
62505: POP
// temp_list2 = [ ] ;
62506: LD_ADDR_VAR 0 10
62510: PUSH
62511: EMPTY
62512: ST_TO_ADDR
// for i in temp_list do
62513: LD_ADDR_VAR 0 8
62517: PUSH
62518: LD_VAR 0 9
62522: PUSH
62523: FOR_IN
62524: IFFALSE 62576
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62526: LD_ADDR_VAR 0 10
62530: PUSH
62531: LD_VAR 0 10
62535: PUSH
62536: LD_VAR 0 8
62540: PUSH
62541: LD_INT 1
62543: ARRAY
62544: PUSH
62545: LD_VAR 0 2
62549: PLUS
62550: PUSH
62551: LD_VAR 0 8
62555: PUSH
62556: LD_INT 2
62558: ARRAY
62559: PUSH
62560: LD_VAR 0 3
62564: PLUS
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: EMPTY
62571: LIST
62572: ADD
62573: ST_TO_ADDR
62574: GO 62523
62576: POP
62577: POP
// result = temp_list2 ;
62578: LD_ADDR_VAR 0 7
62582: PUSH
62583: LD_VAR 0 10
62587: ST_TO_ADDR
// end ;
62588: LD_VAR 0 7
62592: RET
// export function EnemyInRange ( unit , dist ) ; begin
62593: LD_INT 0
62595: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62596: LD_ADDR_VAR 0 3
62600: PUSH
62601: LD_VAR 0 1
62605: PPUSH
62606: CALL_OW 255
62610: PPUSH
62611: LD_VAR 0 1
62615: PPUSH
62616: CALL_OW 250
62620: PPUSH
62621: LD_VAR 0 1
62625: PPUSH
62626: CALL_OW 251
62630: PPUSH
62631: LD_VAR 0 2
62635: PPUSH
62636: CALL 35989 0 4
62640: PUSH
62641: LD_INT 4
62643: ARRAY
62644: ST_TO_ADDR
// end ;
62645: LD_VAR 0 3
62649: RET
// export function PlayerSeeMe ( unit ) ; begin
62650: LD_INT 0
62652: PPUSH
// result := See ( your_side , unit ) ;
62653: LD_ADDR_VAR 0 2
62657: PUSH
62658: LD_OWVAR 2
62662: PPUSH
62663: LD_VAR 0 1
62667: PPUSH
62668: CALL_OW 292
62672: ST_TO_ADDR
// end ;
62673: LD_VAR 0 2
62677: RET
// export function ReverseDir ( unit ) ; begin
62678: LD_INT 0
62680: PPUSH
// if not unit then
62681: LD_VAR 0 1
62685: NOT
62686: IFFALSE 62690
// exit ;
62688: GO 62713
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62690: LD_ADDR_VAR 0 2
62694: PUSH
62695: LD_VAR 0 1
62699: PPUSH
62700: CALL_OW 254
62704: PUSH
62705: LD_INT 3
62707: PLUS
62708: PUSH
62709: LD_INT 6
62711: MOD
62712: ST_TO_ADDR
// end ;
62713: LD_VAR 0 2
62717: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62718: LD_INT 0
62720: PPUSH
62721: PPUSH
62722: PPUSH
62723: PPUSH
62724: PPUSH
// if not hexes then
62725: LD_VAR 0 2
62729: NOT
62730: IFFALSE 62734
// exit ;
62732: GO 62882
// dist := 9999 ;
62734: LD_ADDR_VAR 0 5
62738: PUSH
62739: LD_INT 9999
62741: ST_TO_ADDR
// for i = 1 to hexes do
62742: LD_ADDR_VAR 0 4
62746: PUSH
62747: DOUBLE
62748: LD_INT 1
62750: DEC
62751: ST_TO_ADDR
62752: LD_VAR 0 2
62756: PUSH
62757: FOR_TO
62758: IFFALSE 62870
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62760: LD_VAR 0 1
62764: PPUSH
62765: LD_VAR 0 2
62769: PUSH
62770: LD_VAR 0 4
62774: ARRAY
62775: PUSH
62776: LD_INT 1
62778: ARRAY
62779: PPUSH
62780: LD_VAR 0 2
62784: PUSH
62785: LD_VAR 0 4
62789: ARRAY
62790: PUSH
62791: LD_INT 2
62793: ARRAY
62794: PPUSH
62795: CALL_OW 297
62799: PUSH
62800: LD_VAR 0 5
62804: LESS
62805: IFFALSE 62868
// begin hex := hexes [ i ] ;
62807: LD_ADDR_VAR 0 7
62811: PUSH
62812: LD_VAR 0 2
62816: PUSH
62817: LD_VAR 0 4
62821: ARRAY
62822: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62823: LD_ADDR_VAR 0 5
62827: PUSH
62828: LD_VAR 0 1
62832: PPUSH
62833: LD_VAR 0 2
62837: PUSH
62838: LD_VAR 0 4
62842: ARRAY
62843: PUSH
62844: LD_INT 1
62846: ARRAY
62847: PPUSH
62848: LD_VAR 0 2
62852: PUSH
62853: LD_VAR 0 4
62857: ARRAY
62858: PUSH
62859: LD_INT 2
62861: ARRAY
62862: PPUSH
62863: CALL_OW 297
62867: ST_TO_ADDR
// end ; end ;
62868: GO 62757
62870: POP
62871: POP
// result := hex ;
62872: LD_ADDR_VAR 0 3
62876: PUSH
62877: LD_VAR 0 7
62881: ST_TO_ADDR
// end ;
62882: LD_VAR 0 3
62886: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62887: LD_INT 0
62889: PPUSH
62890: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62891: LD_VAR 0 1
62895: NOT
62896: PUSH
62897: LD_VAR 0 1
62901: PUSH
62902: LD_INT 21
62904: PUSH
62905: LD_INT 2
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 23
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PPUSH
62926: CALL_OW 69
62930: IN
62931: NOT
62932: OR
62933: IFFALSE 62937
// exit ;
62935: GO 62984
// for i = 1 to 3 do
62937: LD_ADDR_VAR 0 3
62941: PUSH
62942: DOUBLE
62943: LD_INT 1
62945: DEC
62946: ST_TO_ADDR
62947: LD_INT 3
62949: PUSH
62950: FOR_TO
62951: IFFALSE 62982
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62953: LD_VAR 0 1
62957: PPUSH
62958: CALL_OW 250
62962: PPUSH
62963: LD_VAR 0 1
62967: PPUSH
62968: CALL_OW 251
62972: PPUSH
62973: LD_INT 1
62975: PPUSH
62976: CALL_OW 453
62980: GO 62950
62982: POP
62983: POP
// end ;
62984: LD_VAR 0 2
62988: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62989: LD_INT 0
62991: PPUSH
62992: PPUSH
62993: PPUSH
62994: PPUSH
62995: PPUSH
62996: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62997: LD_VAR 0 1
63001: NOT
63002: PUSH
63003: LD_VAR 0 2
63007: NOT
63008: OR
63009: PUSH
63010: LD_VAR 0 1
63014: PPUSH
63015: CALL_OW 314
63019: OR
63020: IFFALSE 63024
// exit ;
63022: GO 63465
// x := GetX ( enemy_unit ) ;
63024: LD_ADDR_VAR 0 7
63028: PUSH
63029: LD_VAR 0 2
63033: PPUSH
63034: CALL_OW 250
63038: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63039: LD_ADDR_VAR 0 8
63043: PUSH
63044: LD_VAR 0 2
63048: PPUSH
63049: CALL_OW 251
63053: ST_TO_ADDR
// if not x or not y then
63054: LD_VAR 0 7
63058: NOT
63059: PUSH
63060: LD_VAR 0 8
63064: NOT
63065: OR
63066: IFFALSE 63070
// exit ;
63068: GO 63465
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63070: LD_ADDR_VAR 0 6
63074: PUSH
63075: LD_VAR 0 7
63079: PPUSH
63080: LD_INT 0
63082: PPUSH
63083: LD_INT 4
63085: PPUSH
63086: CALL_OW 272
63090: PUSH
63091: LD_VAR 0 8
63095: PPUSH
63096: LD_INT 0
63098: PPUSH
63099: LD_INT 4
63101: PPUSH
63102: CALL_OW 273
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_VAR 0 7
63115: PPUSH
63116: LD_INT 1
63118: PPUSH
63119: LD_INT 4
63121: PPUSH
63122: CALL_OW 272
63126: PUSH
63127: LD_VAR 0 8
63131: PPUSH
63132: LD_INT 1
63134: PPUSH
63135: LD_INT 4
63137: PPUSH
63138: CALL_OW 273
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_VAR 0 7
63151: PPUSH
63152: LD_INT 2
63154: PPUSH
63155: LD_INT 4
63157: PPUSH
63158: CALL_OW 272
63162: PUSH
63163: LD_VAR 0 8
63167: PPUSH
63168: LD_INT 2
63170: PPUSH
63171: LD_INT 4
63173: PPUSH
63174: CALL_OW 273
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_VAR 0 7
63187: PPUSH
63188: LD_INT 3
63190: PPUSH
63191: LD_INT 4
63193: PPUSH
63194: CALL_OW 272
63198: PUSH
63199: LD_VAR 0 8
63203: PPUSH
63204: LD_INT 3
63206: PPUSH
63207: LD_INT 4
63209: PPUSH
63210: CALL_OW 273
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_VAR 0 7
63223: PPUSH
63224: LD_INT 4
63226: PPUSH
63227: LD_INT 4
63229: PPUSH
63230: CALL_OW 272
63234: PUSH
63235: LD_VAR 0 8
63239: PPUSH
63240: LD_INT 4
63242: PPUSH
63243: LD_INT 4
63245: PPUSH
63246: CALL_OW 273
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_VAR 0 7
63259: PPUSH
63260: LD_INT 5
63262: PPUSH
63263: LD_INT 4
63265: PPUSH
63266: CALL_OW 272
63270: PUSH
63271: LD_VAR 0 8
63275: PPUSH
63276: LD_INT 5
63278: PPUSH
63279: LD_INT 4
63281: PPUSH
63282: CALL_OW 273
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: ST_TO_ADDR
// for i = tmp downto 1 do
63299: LD_ADDR_VAR 0 4
63303: PUSH
63304: DOUBLE
63305: LD_VAR 0 6
63309: INC
63310: ST_TO_ADDR
63311: LD_INT 1
63313: PUSH
63314: FOR_DOWNTO
63315: IFFALSE 63416
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63317: LD_VAR 0 6
63321: PUSH
63322: LD_VAR 0 4
63326: ARRAY
63327: PUSH
63328: LD_INT 1
63330: ARRAY
63331: PPUSH
63332: LD_VAR 0 6
63336: PUSH
63337: LD_VAR 0 4
63341: ARRAY
63342: PUSH
63343: LD_INT 2
63345: ARRAY
63346: PPUSH
63347: CALL_OW 488
63351: NOT
63352: PUSH
63353: LD_VAR 0 6
63357: PUSH
63358: LD_VAR 0 4
63362: ARRAY
63363: PUSH
63364: LD_INT 1
63366: ARRAY
63367: PPUSH
63368: LD_VAR 0 6
63372: PUSH
63373: LD_VAR 0 4
63377: ARRAY
63378: PUSH
63379: LD_INT 2
63381: ARRAY
63382: PPUSH
63383: CALL_OW 428
63387: PUSH
63388: LD_INT 0
63390: NONEQUAL
63391: OR
63392: IFFALSE 63414
// tmp := Delete ( tmp , i ) ;
63394: LD_ADDR_VAR 0 6
63398: PUSH
63399: LD_VAR 0 6
63403: PPUSH
63404: LD_VAR 0 4
63408: PPUSH
63409: CALL_OW 3
63413: ST_TO_ADDR
63414: GO 63314
63416: POP
63417: POP
// j := GetClosestHex ( unit , tmp ) ;
63418: LD_ADDR_VAR 0 5
63422: PUSH
63423: LD_VAR 0 1
63427: PPUSH
63428: LD_VAR 0 6
63432: PPUSH
63433: CALL 62718 0 2
63437: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63438: LD_VAR 0 1
63442: PPUSH
63443: LD_VAR 0 5
63447: PUSH
63448: LD_INT 1
63450: ARRAY
63451: PPUSH
63452: LD_VAR 0 5
63456: PUSH
63457: LD_INT 2
63459: ARRAY
63460: PPUSH
63461: CALL_OW 111
// end ;
63465: LD_VAR 0 3
63469: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63470: LD_INT 0
63472: PPUSH
63473: PPUSH
63474: PPUSH
// uc_side = 0 ;
63475: LD_ADDR_OWVAR 20
63479: PUSH
63480: LD_INT 0
63482: ST_TO_ADDR
// uc_nation = 0 ;
63483: LD_ADDR_OWVAR 21
63487: PUSH
63488: LD_INT 0
63490: ST_TO_ADDR
// InitHc_All ( ) ;
63491: CALL_OW 584
// InitVc ;
63495: CALL_OW 20
// if mastodonts then
63499: LD_VAR 0 6
63503: IFFALSE 63570
// for i = 1 to mastodonts do
63505: LD_ADDR_VAR 0 11
63509: PUSH
63510: DOUBLE
63511: LD_INT 1
63513: DEC
63514: ST_TO_ADDR
63515: LD_VAR 0 6
63519: PUSH
63520: FOR_TO
63521: IFFALSE 63568
// begin vc_chassis := 31 ;
63523: LD_ADDR_OWVAR 37
63527: PUSH
63528: LD_INT 31
63530: ST_TO_ADDR
// vc_control := control_rider ;
63531: LD_ADDR_OWVAR 38
63535: PUSH
63536: LD_INT 4
63538: ST_TO_ADDR
// animal := CreateVehicle ;
63539: LD_ADDR_VAR 0 12
63543: PUSH
63544: CALL_OW 45
63548: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63549: LD_VAR 0 12
63553: PPUSH
63554: LD_VAR 0 8
63558: PPUSH
63559: LD_INT 0
63561: PPUSH
63562: CALL 65758 0 3
// end ;
63566: GO 63520
63568: POP
63569: POP
// if horses then
63570: LD_VAR 0 5
63574: IFFALSE 63641
// for i = 1 to horses do
63576: LD_ADDR_VAR 0 11
63580: PUSH
63581: DOUBLE
63582: LD_INT 1
63584: DEC
63585: ST_TO_ADDR
63586: LD_VAR 0 5
63590: PUSH
63591: FOR_TO
63592: IFFALSE 63639
// begin hc_class := 21 ;
63594: LD_ADDR_OWVAR 28
63598: PUSH
63599: LD_INT 21
63601: ST_TO_ADDR
// hc_gallery :=  ;
63602: LD_ADDR_OWVAR 33
63606: PUSH
63607: LD_STRING 
63609: ST_TO_ADDR
// animal := CreateHuman ;
63610: LD_ADDR_VAR 0 12
63614: PUSH
63615: CALL_OW 44
63619: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63620: LD_VAR 0 12
63624: PPUSH
63625: LD_VAR 0 8
63629: PPUSH
63630: LD_INT 0
63632: PPUSH
63633: CALL 65758 0 3
// end ;
63637: GO 63591
63639: POP
63640: POP
// if birds then
63641: LD_VAR 0 1
63645: IFFALSE 63712
// for i = 1 to birds do
63647: LD_ADDR_VAR 0 11
63651: PUSH
63652: DOUBLE
63653: LD_INT 1
63655: DEC
63656: ST_TO_ADDR
63657: LD_VAR 0 1
63661: PUSH
63662: FOR_TO
63663: IFFALSE 63710
// begin hc_class = 18 ;
63665: LD_ADDR_OWVAR 28
63669: PUSH
63670: LD_INT 18
63672: ST_TO_ADDR
// hc_gallery =  ;
63673: LD_ADDR_OWVAR 33
63677: PUSH
63678: LD_STRING 
63680: ST_TO_ADDR
// animal := CreateHuman ;
63681: LD_ADDR_VAR 0 12
63685: PUSH
63686: CALL_OW 44
63690: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63691: LD_VAR 0 12
63695: PPUSH
63696: LD_VAR 0 8
63700: PPUSH
63701: LD_INT 0
63703: PPUSH
63704: CALL 65758 0 3
// end ;
63708: GO 63662
63710: POP
63711: POP
// if tigers then
63712: LD_VAR 0 2
63716: IFFALSE 63800
// for i = 1 to tigers do
63718: LD_ADDR_VAR 0 11
63722: PUSH
63723: DOUBLE
63724: LD_INT 1
63726: DEC
63727: ST_TO_ADDR
63728: LD_VAR 0 2
63732: PUSH
63733: FOR_TO
63734: IFFALSE 63798
// begin hc_class = class_tiger ;
63736: LD_ADDR_OWVAR 28
63740: PUSH
63741: LD_INT 14
63743: ST_TO_ADDR
// hc_gallery =  ;
63744: LD_ADDR_OWVAR 33
63748: PUSH
63749: LD_STRING 
63751: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63752: LD_ADDR_OWVAR 35
63756: PUSH
63757: LD_INT 7
63759: NEG
63760: PPUSH
63761: LD_INT 7
63763: PPUSH
63764: CALL_OW 12
63768: ST_TO_ADDR
// animal := CreateHuman ;
63769: LD_ADDR_VAR 0 12
63773: PUSH
63774: CALL_OW 44
63778: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63779: LD_VAR 0 12
63783: PPUSH
63784: LD_VAR 0 8
63788: PPUSH
63789: LD_INT 0
63791: PPUSH
63792: CALL 65758 0 3
// end ;
63796: GO 63733
63798: POP
63799: POP
// if apemans then
63800: LD_VAR 0 3
63804: IFFALSE 63927
// for i = 1 to apemans do
63806: LD_ADDR_VAR 0 11
63810: PUSH
63811: DOUBLE
63812: LD_INT 1
63814: DEC
63815: ST_TO_ADDR
63816: LD_VAR 0 3
63820: PUSH
63821: FOR_TO
63822: IFFALSE 63925
// begin hc_class = class_apeman ;
63824: LD_ADDR_OWVAR 28
63828: PUSH
63829: LD_INT 12
63831: ST_TO_ADDR
// hc_gallery =  ;
63832: LD_ADDR_OWVAR 33
63836: PUSH
63837: LD_STRING 
63839: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63840: LD_ADDR_OWVAR 35
63844: PUSH
63845: LD_INT 2
63847: NEG
63848: PPUSH
63849: LD_INT 2
63851: PPUSH
63852: CALL_OW 12
63856: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63857: LD_ADDR_OWVAR 31
63861: PUSH
63862: LD_INT 1
63864: PPUSH
63865: LD_INT 3
63867: PPUSH
63868: CALL_OW 12
63872: PUSH
63873: LD_INT 1
63875: PPUSH
63876: LD_INT 3
63878: PPUSH
63879: CALL_OW 12
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: ST_TO_ADDR
// animal := CreateHuman ;
63896: LD_ADDR_VAR 0 12
63900: PUSH
63901: CALL_OW 44
63905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63906: LD_VAR 0 12
63910: PPUSH
63911: LD_VAR 0 8
63915: PPUSH
63916: LD_INT 0
63918: PPUSH
63919: CALL 65758 0 3
// end ;
63923: GO 63821
63925: POP
63926: POP
// if enchidnas then
63927: LD_VAR 0 4
63931: IFFALSE 63998
// for i = 1 to enchidnas do
63933: LD_ADDR_VAR 0 11
63937: PUSH
63938: DOUBLE
63939: LD_INT 1
63941: DEC
63942: ST_TO_ADDR
63943: LD_VAR 0 4
63947: PUSH
63948: FOR_TO
63949: IFFALSE 63996
// begin hc_class = 13 ;
63951: LD_ADDR_OWVAR 28
63955: PUSH
63956: LD_INT 13
63958: ST_TO_ADDR
// hc_gallery =  ;
63959: LD_ADDR_OWVAR 33
63963: PUSH
63964: LD_STRING 
63966: ST_TO_ADDR
// animal := CreateHuman ;
63967: LD_ADDR_VAR 0 12
63971: PUSH
63972: CALL_OW 44
63976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63977: LD_VAR 0 12
63981: PPUSH
63982: LD_VAR 0 8
63986: PPUSH
63987: LD_INT 0
63989: PPUSH
63990: CALL 65758 0 3
// end ;
63994: GO 63948
63996: POP
63997: POP
// if fishes then
63998: LD_VAR 0 7
64002: IFFALSE 64069
// for i = 1 to fishes do
64004: LD_ADDR_VAR 0 11
64008: PUSH
64009: DOUBLE
64010: LD_INT 1
64012: DEC
64013: ST_TO_ADDR
64014: LD_VAR 0 7
64018: PUSH
64019: FOR_TO
64020: IFFALSE 64067
// begin hc_class = 20 ;
64022: LD_ADDR_OWVAR 28
64026: PUSH
64027: LD_INT 20
64029: ST_TO_ADDR
// hc_gallery =  ;
64030: LD_ADDR_OWVAR 33
64034: PUSH
64035: LD_STRING 
64037: ST_TO_ADDR
// animal := CreateHuman ;
64038: LD_ADDR_VAR 0 12
64042: PUSH
64043: CALL_OW 44
64047: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64048: LD_VAR 0 12
64052: PPUSH
64053: LD_VAR 0 9
64057: PPUSH
64058: LD_INT 0
64060: PPUSH
64061: CALL 65758 0 3
// end ;
64065: GO 64019
64067: POP
64068: POP
// end ;
64069: LD_VAR 0 10
64073: RET
// export function WantHeal ( sci , unit ) ; begin
64074: LD_INT 0
64076: PPUSH
// if GetTaskList ( sci ) > 0 then
64077: LD_VAR 0 1
64081: PPUSH
64082: CALL_OW 437
64086: PUSH
64087: LD_INT 0
64089: GREATER
64090: IFFALSE 64160
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64092: LD_VAR 0 1
64096: PPUSH
64097: CALL_OW 437
64101: PUSH
64102: LD_INT 1
64104: ARRAY
64105: PUSH
64106: LD_INT 1
64108: ARRAY
64109: PUSH
64110: LD_STRING l
64112: EQUAL
64113: PUSH
64114: LD_VAR 0 1
64118: PPUSH
64119: CALL_OW 437
64123: PUSH
64124: LD_INT 1
64126: ARRAY
64127: PUSH
64128: LD_INT 4
64130: ARRAY
64131: PUSH
64132: LD_VAR 0 2
64136: EQUAL
64137: AND
64138: IFFALSE 64150
// result := true else
64140: LD_ADDR_VAR 0 3
64144: PUSH
64145: LD_INT 1
64147: ST_TO_ADDR
64148: GO 64158
// result := false ;
64150: LD_ADDR_VAR 0 3
64154: PUSH
64155: LD_INT 0
64157: ST_TO_ADDR
// end else
64158: GO 64168
// result := false ;
64160: LD_ADDR_VAR 0 3
64164: PUSH
64165: LD_INT 0
64167: ST_TO_ADDR
// end ;
64168: LD_VAR 0 3
64172: RET
// export function HealTarget ( sci ) ; begin
64173: LD_INT 0
64175: PPUSH
// if not sci then
64176: LD_VAR 0 1
64180: NOT
64181: IFFALSE 64185
// exit ;
64183: GO 64250
// result := 0 ;
64185: LD_ADDR_VAR 0 2
64189: PUSH
64190: LD_INT 0
64192: ST_TO_ADDR
// if GetTaskList ( sci ) then
64193: LD_VAR 0 1
64197: PPUSH
64198: CALL_OW 437
64202: IFFALSE 64250
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64204: LD_VAR 0 1
64208: PPUSH
64209: CALL_OW 437
64213: PUSH
64214: LD_INT 1
64216: ARRAY
64217: PUSH
64218: LD_INT 1
64220: ARRAY
64221: PUSH
64222: LD_STRING l
64224: EQUAL
64225: IFFALSE 64250
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64227: LD_ADDR_VAR 0 2
64231: PUSH
64232: LD_VAR 0 1
64236: PPUSH
64237: CALL_OW 437
64241: PUSH
64242: LD_INT 1
64244: ARRAY
64245: PUSH
64246: LD_INT 4
64248: ARRAY
64249: ST_TO_ADDR
// end ;
64250: LD_VAR 0 2
64254: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64255: LD_INT 0
64257: PPUSH
64258: PPUSH
64259: PPUSH
64260: PPUSH
// if not base_units then
64261: LD_VAR 0 1
64265: NOT
64266: IFFALSE 64270
// exit ;
64268: GO 64357
// result := false ;
64270: LD_ADDR_VAR 0 2
64274: PUSH
64275: LD_INT 0
64277: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64278: LD_ADDR_VAR 0 5
64282: PUSH
64283: LD_VAR 0 1
64287: PPUSH
64288: LD_INT 21
64290: PUSH
64291: LD_INT 3
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PPUSH
64298: CALL_OW 72
64302: ST_TO_ADDR
// if not tmp then
64303: LD_VAR 0 5
64307: NOT
64308: IFFALSE 64312
// exit ;
64310: GO 64357
// for i in tmp do
64312: LD_ADDR_VAR 0 3
64316: PUSH
64317: LD_VAR 0 5
64321: PUSH
64322: FOR_IN
64323: IFFALSE 64355
// begin result := EnemyInRange ( i , 22 ) ;
64325: LD_ADDR_VAR 0 2
64329: PUSH
64330: LD_VAR 0 3
64334: PPUSH
64335: LD_INT 22
64337: PPUSH
64338: CALL 62593 0 2
64342: ST_TO_ADDR
// if result then
64343: LD_VAR 0 2
64347: IFFALSE 64353
// exit ;
64349: POP
64350: POP
64351: GO 64357
// end ;
64353: GO 64322
64355: POP
64356: POP
// end ;
64357: LD_VAR 0 2
64361: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64362: LD_INT 0
64364: PPUSH
64365: PPUSH
// if not units then
64366: LD_VAR 0 1
64370: NOT
64371: IFFALSE 64375
// exit ;
64373: GO 64445
// result := [ ] ;
64375: LD_ADDR_VAR 0 3
64379: PUSH
64380: EMPTY
64381: ST_TO_ADDR
// for i in units do
64382: LD_ADDR_VAR 0 4
64386: PUSH
64387: LD_VAR 0 1
64391: PUSH
64392: FOR_IN
64393: IFFALSE 64443
// if GetTag ( i ) = tag then
64395: LD_VAR 0 4
64399: PPUSH
64400: CALL_OW 110
64404: PUSH
64405: LD_VAR 0 2
64409: EQUAL
64410: IFFALSE 64441
// result := Replace ( result , result + 1 , i ) ;
64412: LD_ADDR_VAR 0 3
64416: PUSH
64417: LD_VAR 0 3
64421: PPUSH
64422: LD_VAR 0 3
64426: PUSH
64427: LD_INT 1
64429: PLUS
64430: PPUSH
64431: LD_VAR 0 4
64435: PPUSH
64436: CALL_OW 1
64440: ST_TO_ADDR
64441: GO 64392
64443: POP
64444: POP
// end ;
64445: LD_VAR 0 3
64449: RET
// export function IsDriver ( un ) ; begin
64450: LD_INT 0
64452: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64453: LD_ADDR_VAR 0 2
64457: PUSH
64458: LD_VAR 0 1
64462: PUSH
64463: LD_INT 55
64465: PUSH
64466: EMPTY
64467: LIST
64468: PPUSH
64469: CALL_OW 69
64473: IN
64474: ST_TO_ADDR
// end ;
64475: LD_VAR 0 2
64479: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64480: LD_INT 0
64482: PPUSH
64483: PPUSH
// list := [ ] ;
64484: LD_ADDR_VAR 0 5
64488: PUSH
64489: EMPTY
64490: ST_TO_ADDR
// case d of 0 :
64491: LD_VAR 0 3
64495: PUSH
64496: LD_INT 0
64498: DOUBLE
64499: EQUAL
64500: IFTRUE 64504
64502: GO 64637
64504: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64505: LD_ADDR_VAR 0 5
64509: PUSH
64510: LD_VAR 0 1
64514: PUSH
64515: LD_INT 4
64517: MINUS
64518: PUSH
64519: LD_VAR 0 2
64523: PUSH
64524: LD_INT 4
64526: MINUS
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: PUSH
64536: LD_VAR 0 1
64540: PUSH
64541: LD_INT 3
64543: MINUS
64544: PUSH
64545: LD_VAR 0 2
64549: PUSH
64550: LD_INT 1
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: LIST
64557: PUSH
64558: LD_VAR 0 1
64562: PUSH
64563: LD_INT 4
64565: PLUS
64566: PUSH
64567: LD_VAR 0 2
64571: PUSH
64572: LD_INT 4
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: LIST
64579: PUSH
64580: LD_VAR 0 1
64584: PUSH
64585: LD_INT 3
64587: PLUS
64588: PUSH
64589: LD_VAR 0 2
64593: PUSH
64594: LD_INT 3
64596: PLUS
64597: PUSH
64598: LD_INT 5
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: LIST
64605: PUSH
64606: LD_VAR 0 1
64610: PUSH
64611: LD_VAR 0 2
64615: PUSH
64616: LD_INT 4
64618: PLUS
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: LIST
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: ST_TO_ADDR
// end ; 1 :
64635: GO 65335
64637: LD_INT 1
64639: DOUBLE
64640: EQUAL
64641: IFTRUE 64645
64643: GO 64778
64645: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64646: LD_ADDR_VAR 0 5
64650: PUSH
64651: LD_VAR 0 1
64655: PUSH
64656: LD_VAR 0 2
64660: PUSH
64661: LD_INT 4
64663: MINUS
64664: PUSH
64665: LD_INT 3
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: LIST
64672: PUSH
64673: LD_VAR 0 1
64677: PUSH
64678: LD_INT 3
64680: MINUS
64681: PUSH
64682: LD_VAR 0 2
64686: PUSH
64687: LD_INT 3
64689: MINUS
64690: PUSH
64691: LD_INT 2
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: LIST
64698: PUSH
64699: LD_VAR 0 1
64703: PUSH
64704: LD_INT 4
64706: MINUS
64707: PUSH
64708: LD_VAR 0 2
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: LIST
64720: PUSH
64721: LD_VAR 0 1
64725: PUSH
64726: LD_VAR 0 2
64730: PUSH
64731: LD_INT 3
64733: PLUS
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: PUSH
64743: LD_VAR 0 1
64747: PUSH
64748: LD_INT 4
64750: PLUS
64751: PUSH
64752: LD_VAR 0 2
64756: PUSH
64757: LD_INT 4
64759: PLUS
64760: PUSH
64761: LD_INT 5
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: LIST
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: ST_TO_ADDR
// end ; 2 :
64776: GO 65335
64778: LD_INT 2
64780: DOUBLE
64781: EQUAL
64782: IFTRUE 64786
64784: GO 64915
64786: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64787: LD_ADDR_VAR 0 5
64791: PUSH
64792: LD_VAR 0 1
64796: PUSH
64797: LD_VAR 0 2
64801: PUSH
64802: LD_INT 3
64804: MINUS
64805: PUSH
64806: LD_INT 3
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: LIST
64813: PUSH
64814: LD_VAR 0 1
64818: PUSH
64819: LD_INT 4
64821: PLUS
64822: PUSH
64823: LD_VAR 0 2
64827: PUSH
64828: LD_INT 4
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: LIST
64835: PUSH
64836: LD_VAR 0 1
64840: PUSH
64841: LD_VAR 0 2
64845: PUSH
64846: LD_INT 4
64848: PLUS
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: LIST
64857: PUSH
64858: LD_VAR 0 1
64862: PUSH
64863: LD_INT 3
64865: MINUS
64866: PUSH
64867: LD_VAR 0 2
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: LIST
64879: PUSH
64880: LD_VAR 0 1
64884: PUSH
64885: LD_INT 4
64887: MINUS
64888: PUSH
64889: LD_VAR 0 2
64893: PUSH
64894: LD_INT 4
64896: MINUS
64897: PUSH
64898: LD_INT 2
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: ST_TO_ADDR
// end ; 3 :
64913: GO 65335
64915: LD_INT 3
64917: DOUBLE
64918: EQUAL
64919: IFTRUE 64923
64921: GO 65056
64923: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64924: LD_ADDR_VAR 0 5
64928: PUSH
64929: LD_VAR 0 1
64933: PUSH
64934: LD_INT 3
64936: PLUS
64937: PUSH
64938: LD_VAR 0 2
64942: PUSH
64943: LD_INT 4
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: LIST
64950: PUSH
64951: LD_VAR 0 1
64955: PUSH
64956: LD_INT 4
64958: PLUS
64959: PUSH
64960: LD_VAR 0 2
64964: PUSH
64965: LD_INT 4
64967: PLUS
64968: PUSH
64969: LD_INT 5
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: PUSH
64977: LD_VAR 0 1
64981: PUSH
64982: LD_INT 4
64984: MINUS
64985: PUSH
64986: LD_VAR 0 2
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: LIST
64998: PUSH
64999: LD_VAR 0 1
65003: PUSH
65004: LD_VAR 0 2
65008: PUSH
65009: LD_INT 4
65011: MINUS
65012: PUSH
65013: LD_INT 3
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: PUSH
65021: LD_VAR 0 1
65025: PUSH
65026: LD_INT 3
65028: MINUS
65029: PUSH
65030: LD_VAR 0 2
65034: PUSH
65035: LD_INT 3
65037: MINUS
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: ST_TO_ADDR
// end ; 4 :
65054: GO 65335
65056: LD_INT 4
65058: DOUBLE
65059: EQUAL
65060: IFTRUE 65064
65062: GO 65197
65064: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65065: LD_ADDR_VAR 0 5
65069: PUSH
65070: LD_VAR 0 1
65074: PUSH
65075: LD_VAR 0 2
65079: PUSH
65080: LD_INT 4
65082: PLUS
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: LIST
65091: PUSH
65092: LD_VAR 0 1
65096: PUSH
65097: LD_INT 3
65099: PLUS
65100: PUSH
65101: LD_VAR 0 2
65105: PUSH
65106: LD_INT 3
65108: PLUS
65109: PUSH
65110: LD_INT 5
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: PUSH
65118: LD_VAR 0 1
65122: PUSH
65123: LD_INT 4
65125: PLUS
65126: PUSH
65127: LD_VAR 0 2
65131: PUSH
65132: LD_INT 4
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: PUSH
65140: LD_VAR 0 1
65144: PUSH
65145: LD_VAR 0 2
65149: PUSH
65150: LD_INT 3
65152: MINUS
65153: PUSH
65154: LD_INT 3
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: LIST
65161: PUSH
65162: LD_VAR 0 1
65166: PUSH
65167: LD_INT 4
65169: MINUS
65170: PUSH
65171: LD_VAR 0 2
65175: PUSH
65176: LD_INT 4
65178: MINUS
65179: PUSH
65180: LD_INT 2
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: ST_TO_ADDR
// end ; 5 :
65195: GO 65335
65197: LD_INT 5
65199: DOUBLE
65200: EQUAL
65201: IFTRUE 65205
65203: GO 65334
65205: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65206: LD_ADDR_VAR 0 5
65210: PUSH
65211: LD_VAR 0 1
65215: PUSH
65216: LD_INT 4
65218: MINUS
65219: PUSH
65220: LD_VAR 0 2
65224: PUSH
65225: LD_INT 1
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: LIST
65232: PUSH
65233: LD_VAR 0 1
65237: PUSH
65238: LD_VAR 0 2
65242: PUSH
65243: LD_INT 4
65245: MINUS
65246: PUSH
65247: LD_INT 3
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: LIST
65254: PUSH
65255: LD_VAR 0 1
65259: PUSH
65260: LD_INT 4
65262: PLUS
65263: PUSH
65264: LD_VAR 0 2
65268: PUSH
65269: LD_INT 4
65271: PLUS
65272: PUSH
65273: LD_INT 5
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: LIST
65280: PUSH
65281: LD_VAR 0 1
65285: PUSH
65286: LD_INT 3
65288: PLUS
65289: PUSH
65290: LD_VAR 0 2
65294: PUSH
65295: LD_INT 4
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: LIST
65302: PUSH
65303: LD_VAR 0 1
65307: PUSH
65308: LD_VAR 0 2
65312: PUSH
65313: LD_INT 3
65315: PLUS
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: ST_TO_ADDR
// end ; end ;
65332: GO 65335
65334: POP
// result := list ;
65335: LD_ADDR_VAR 0 4
65339: PUSH
65340: LD_VAR 0 5
65344: ST_TO_ADDR
// end ;
65345: LD_VAR 0 4
65349: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65350: LD_INT 0
65352: PPUSH
65353: PPUSH
65354: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65355: LD_VAR 0 1
65359: NOT
65360: PUSH
65361: LD_VAR 0 2
65365: PUSH
65366: LD_INT 1
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: LD_INT 3
65374: PUSH
65375: LD_INT 4
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: IN
65384: NOT
65385: OR
65386: IFFALSE 65390
// exit ;
65388: GO 65482
// tmp := [ ] ;
65390: LD_ADDR_VAR 0 5
65394: PUSH
65395: EMPTY
65396: ST_TO_ADDR
// for i in units do
65397: LD_ADDR_VAR 0 4
65401: PUSH
65402: LD_VAR 0 1
65406: PUSH
65407: FOR_IN
65408: IFFALSE 65451
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65410: LD_ADDR_VAR 0 5
65414: PUSH
65415: LD_VAR 0 5
65419: PPUSH
65420: LD_VAR 0 5
65424: PUSH
65425: LD_INT 1
65427: PLUS
65428: PPUSH
65429: LD_VAR 0 4
65433: PPUSH
65434: LD_VAR 0 2
65438: PPUSH
65439: CALL_OW 259
65443: PPUSH
65444: CALL_OW 2
65448: ST_TO_ADDR
65449: GO 65407
65451: POP
65452: POP
// if not tmp then
65453: LD_VAR 0 5
65457: NOT
65458: IFFALSE 65462
// exit ;
65460: GO 65482
// result := SortListByListDesc ( units , tmp ) ;
65462: LD_ADDR_VAR 0 3
65466: PUSH
65467: LD_VAR 0 1
65471: PPUSH
65472: LD_VAR 0 5
65476: PPUSH
65477: CALL_OW 77
65481: ST_TO_ADDR
// end ;
65482: LD_VAR 0 3
65486: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65487: LD_INT 0
65489: PPUSH
65490: PPUSH
65491: PPUSH
// result := false ;
65492: LD_ADDR_VAR 0 3
65496: PUSH
65497: LD_INT 0
65499: ST_TO_ADDR
// x := GetX ( building ) ;
65500: LD_ADDR_VAR 0 4
65504: PUSH
65505: LD_VAR 0 2
65509: PPUSH
65510: CALL_OW 250
65514: ST_TO_ADDR
// y := GetY ( building ) ;
65515: LD_ADDR_VAR 0 5
65519: PUSH
65520: LD_VAR 0 2
65524: PPUSH
65525: CALL_OW 251
65529: ST_TO_ADDR
// if not building or not x or not y then
65530: LD_VAR 0 2
65534: NOT
65535: PUSH
65536: LD_VAR 0 4
65540: NOT
65541: OR
65542: PUSH
65543: LD_VAR 0 5
65547: NOT
65548: OR
65549: IFFALSE 65553
// exit ;
65551: GO 65645
// if GetTaskList ( unit ) then
65553: LD_VAR 0 1
65557: PPUSH
65558: CALL_OW 437
65562: IFFALSE 65645
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65564: LD_STRING e
65566: PUSH
65567: LD_VAR 0 1
65571: PPUSH
65572: CALL_OW 437
65576: PUSH
65577: LD_INT 1
65579: ARRAY
65580: PUSH
65581: LD_INT 1
65583: ARRAY
65584: EQUAL
65585: PUSH
65586: LD_VAR 0 4
65590: PUSH
65591: LD_VAR 0 1
65595: PPUSH
65596: CALL_OW 437
65600: PUSH
65601: LD_INT 1
65603: ARRAY
65604: PUSH
65605: LD_INT 2
65607: ARRAY
65608: EQUAL
65609: AND
65610: PUSH
65611: LD_VAR 0 5
65615: PUSH
65616: LD_VAR 0 1
65620: PPUSH
65621: CALL_OW 437
65625: PUSH
65626: LD_INT 1
65628: ARRAY
65629: PUSH
65630: LD_INT 3
65632: ARRAY
65633: EQUAL
65634: AND
65635: IFFALSE 65645
// result := true end ;
65637: LD_ADDR_VAR 0 3
65641: PUSH
65642: LD_INT 1
65644: ST_TO_ADDR
// end ;
65645: LD_VAR 0 3
65649: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65650: LD_INT 0
65652: PPUSH
// result := false ;
65653: LD_ADDR_VAR 0 4
65657: PUSH
65658: LD_INT 0
65660: ST_TO_ADDR
// if GetTaskList ( unit ) then
65661: LD_VAR 0 1
65665: PPUSH
65666: CALL_OW 437
65670: IFFALSE 65753
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65672: LD_STRING M
65674: PUSH
65675: LD_VAR 0 1
65679: PPUSH
65680: CALL_OW 437
65684: PUSH
65685: LD_INT 1
65687: ARRAY
65688: PUSH
65689: LD_INT 1
65691: ARRAY
65692: EQUAL
65693: PUSH
65694: LD_VAR 0 2
65698: PUSH
65699: LD_VAR 0 1
65703: PPUSH
65704: CALL_OW 437
65708: PUSH
65709: LD_INT 1
65711: ARRAY
65712: PUSH
65713: LD_INT 2
65715: ARRAY
65716: EQUAL
65717: AND
65718: PUSH
65719: LD_VAR 0 3
65723: PUSH
65724: LD_VAR 0 1
65728: PPUSH
65729: CALL_OW 437
65733: PUSH
65734: LD_INT 1
65736: ARRAY
65737: PUSH
65738: LD_INT 3
65740: ARRAY
65741: EQUAL
65742: AND
65743: IFFALSE 65753
// result := true ;
65745: LD_ADDR_VAR 0 4
65749: PUSH
65750: LD_INT 1
65752: ST_TO_ADDR
// end ; end ;
65753: LD_VAR 0 4
65757: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65758: LD_INT 0
65760: PPUSH
65761: PPUSH
65762: PPUSH
65763: PPUSH
// if not unit or not area then
65764: LD_VAR 0 1
65768: NOT
65769: PUSH
65770: LD_VAR 0 2
65774: NOT
65775: OR
65776: IFFALSE 65780
// exit ;
65778: GO 65944
// tmp := AreaToList ( area , i ) ;
65780: LD_ADDR_VAR 0 6
65784: PUSH
65785: LD_VAR 0 2
65789: PPUSH
65790: LD_VAR 0 5
65794: PPUSH
65795: CALL_OW 517
65799: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65800: LD_ADDR_VAR 0 5
65804: PUSH
65805: DOUBLE
65806: LD_INT 1
65808: DEC
65809: ST_TO_ADDR
65810: LD_VAR 0 6
65814: PUSH
65815: LD_INT 1
65817: ARRAY
65818: PUSH
65819: FOR_TO
65820: IFFALSE 65942
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65822: LD_ADDR_VAR 0 7
65826: PUSH
65827: LD_VAR 0 6
65831: PUSH
65832: LD_INT 1
65834: ARRAY
65835: PUSH
65836: LD_VAR 0 5
65840: ARRAY
65841: PUSH
65842: LD_VAR 0 6
65846: PUSH
65847: LD_INT 2
65849: ARRAY
65850: PUSH
65851: LD_VAR 0 5
65855: ARRAY
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65861: LD_VAR 0 7
65865: PUSH
65866: LD_INT 1
65868: ARRAY
65869: PPUSH
65870: LD_VAR 0 7
65874: PUSH
65875: LD_INT 2
65877: ARRAY
65878: PPUSH
65879: CALL_OW 428
65883: PUSH
65884: LD_INT 0
65886: EQUAL
65887: IFFALSE 65940
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65889: LD_VAR 0 1
65893: PPUSH
65894: LD_VAR 0 7
65898: PUSH
65899: LD_INT 1
65901: ARRAY
65902: PPUSH
65903: LD_VAR 0 7
65907: PUSH
65908: LD_INT 2
65910: ARRAY
65911: PPUSH
65912: LD_VAR 0 3
65916: PPUSH
65917: CALL_OW 48
// result := IsPlaced ( unit ) ;
65921: LD_ADDR_VAR 0 4
65925: PUSH
65926: LD_VAR 0 1
65930: PPUSH
65931: CALL_OW 305
65935: ST_TO_ADDR
// exit ;
65936: POP
65937: POP
65938: GO 65944
// end ; end ;
65940: GO 65819
65942: POP
65943: POP
// end ;
65944: LD_VAR 0 4
65948: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65949: LD_INT 0
65951: PPUSH
65952: PPUSH
65953: PPUSH
// if not side or side > 8 then
65954: LD_VAR 0 1
65958: NOT
65959: PUSH
65960: LD_VAR 0 1
65964: PUSH
65965: LD_INT 8
65967: GREATER
65968: OR
65969: IFFALSE 65973
// exit ;
65971: GO 66160
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65973: LD_ADDR_VAR 0 4
65977: PUSH
65978: LD_INT 22
65980: PUSH
65981: LD_VAR 0 1
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 21
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PPUSH
66004: CALL_OW 69
66008: ST_TO_ADDR
// if not tmp then
66009: LD_VAR 0 4
66013: NOT
66014: IFFALSE 66018
// exit ;
66016: GO 66160
// enable_addtolog := true ;
66018: LD_ADDR_OWVAR 81
66022: PUSH
66023: LD_INT 1
66025: ST_TO_ADDR
// AddToLog ( [ ) ;
66026: LD_STRING [
66028: PPUSH
66029: CALL_OW 561
// for i in tmp do
66033: LD_ADDR_VAR 0 3
66037: PUSH
66038: LD_VAR 0 4
66042: PUSH
66043: FOR_IN
66044: IFFALSE 66151
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66046: LD_STRING [
66048: PUSH
66049: LD_VAR 0 3
66053: PPUSH
66054: CALL_OW 266
66058: STR
66059: PUSH
66060: LD_STRING , 
66062: STR
66063: PUSH
66064: LD_VAR 0 3
66068: PPUSH
66069: CALL_OW 250
66073: STR
66074: PUSH
66075: LD_STRING , 
66077: STR
66078: PUSH
66079: LD_VAR 0 3
66083: PPUSH
66084: CALL_OW 251
66088: STR
66089: PUSH
66090: LD_STRING , 
66092: STR
66093: PUSH
66094: LD_VAR 0 3
66098: PPUSH
66099: CALL_OW 254
66103: STR
66104: PUSH
66105: LD_STRING , 
66107: STR
66108: PUSH
66109: LD_VAR 0 3
66113: PPUSH
66114: LD_INT 1
66116: PPUSH
66117: CALL_OW 268
66121: STR
66122: PUSH
66123: LD_STRING , 
66125: STR
66126: PUSH
66127: LD_VAR 0 3
66131: PPUSH
66132: LD_INT 2
66134: PPUSH
66135: CALL_OW 268
66139: STR
66140: PUSH
66141: LD_STRING ],
66143: STR
66144: PPUSH
66145: CALL_OW 561
// end ;
66149: GO 66043
66151: POP
66152: POP
// AddToLog ( ]; ) ;
66153: LD_STRING ];
66155: PPUSH
66156: CALL_OW 561
// end ;
66160: LD_VAR 0 2
66164: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66165: LD_INT 0
66167: PPUSH
66168: PPUSH
66169: PPUSH
66170: PPUSH
66171: PPUSH
// if not area or not rate or not max then
66172: LD_VAR 0 1
66176: NOT
66177: PUSH
66178: LD_VAR 0 2
66182: NOT
66183: OR
66184: PUSH
66185: LD_VAR 0 4
66189: NOT
66190: OR
66191: IFFALSE 66195
// exit ;
66193: GO 66387
// while 1 do
66195: LD_INT 1
66197: IFFALSE 66387
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66199: LD_ADDR_VAR 0 9
66203: PUSH
66204: LD_VAR 0 1
66208: PPUSH
66209: LD_INT 1
66211: PPUSH
66212: CALL_OW 287
66216: PUSH
66217: LD_INT 10
66219: MUL
66220: ST_TO_ADDR
// r := rate / 10 ;
66221: LD_ADDR_VAR 0 7
66225: PUSH
66226: LD_VAR 0 2
66230: PUSH
66231: LD_INT 10
66233: DIVREAL
66234: ST_TO_ADDR
// time := 1 1$00 ;
66235: LD_ADDR_VAR 0 8
66239: PUSH
66240: LD_INT 2100
66242: ST_TO_ADDR
// if amount < min then
66243: LD_VAR 0 9
66247: PUSH
66248: LD_VAR 0 3
66252: LESS
66253: IFFALSE 66271
// r := r * 2 else
66255: LD_ADDR_VAR 0 7
66259: PUSH
66260: LD_VAR 0 7
66264: PUSH
66265: LD_INT 2
66267: MUL
66268: ST_TO_ADDR
66269: GO 66297
// if amount > max then
66271: LD_VAR 0 9
66275: PUSH
66276: LD_VAR 0 4
66280: GREATER
66281: IFFALSE 66297
// r := r / 2 ;
66283: LD_ADDR_VAR 0 7
66287: PUSH
66288: LD_VAR 0 7
66292: PUSH
66293: LD_INT 2
66295: DIVREAL
66296: ST_TO_ADDR
// time := time / r ;
66297: LD_ADDR_VAR 0 8
66301: PUSH
66302: LD_VAR 0 8
66306: PUSH
66307: LD_VAR 0 7
66311: DIVREAL
66312: ST_TO_ADDR
// if time < 0 then
66313: LD_VAR 0 8
66317: PUSH
66318: LD_INT 0
66320: LESS
66321: IFFALSE 66338
// time := time * - 1 ;
66323: LD_ADDR_VAR 0 8
66327: PUSH
66328: LD_VAR 0 8
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: MUL
66337: ST_TO_ADDR
// wait ( time ) ;
66338: LD_VAR 0 8
66342: PPUSH
66343: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66347: LD_INT 35
66349: PPUSH
66350: LD_INT 875
66352: PPUSH
66353: CALL_OW 12
66357: PPUSH
66358: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66362: LD_INT 1
66364: PPUSH
66365: LD_INT 5
66367: PPUSH
66368: CALL_OW 12
66372: PPUSH
66373: LD_VAR 0 1
66377: PPUSH
66378: LD_INT 1
66380: PPUSH
66381: CALL_OW 55
// end ;
66385: GO 66195
// end ;
66387: LD_VAR 0 5
66391: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66392: LD_INT 0
66394: PPUSH
66395: PPUSH
66396: PPUSH
66397: PPUSH
66398: PPUSH
66399: PPUSH
66400: PPUSH
66401: PPUSH
// if not turrets or not factories then
66402: LD_VAR 0 1
66406: NOT
66407: PUSH
66408: LD_VAR 0 2
66412: NOT
66413: OR
66414: IFFALSE 66418
// exit ;
66416: GO 66725
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66418: LD_ADDR_VAR 0 10
66422: PUSH
66423: LD_INT 5
66425: PUSH
66426: LD_INT 6
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 2
66435: PUSH
66436: LD_INT 4
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: PUSH
66446: LD_INT 5
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 24
66460: PUSH
66461: LD_INT 25
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 23
66470: PUSH
66471: LD_INT 27
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 42
66484: PUSH
66485: LD_INT 43
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 44
66494: PUSH
66495: LD_INT 46
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 45
66504: PUSH
66505: LD_INT 47
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: LIST
66521: ST_TO_ADDR
// result := [ ] ;
66522: LD_ADDR_VAR 0 3
66526: PUSH
66527: EMPTY
66528: ST_TO_ADDR
// for i in turrets do
66529: LD_ADDR_VAR 0 4
66533: PUSH
66534: LD_VAR 0 1
66538: PUSH
66539: FOR_IN
66540: IFFALSE 66723
// begin nat := GetNation ( i ) ;
66542: LD_ADDR_VAR 0 7
66546: PUSH
66547: LD_VAR 0 4
66551: PPUSH
66552: CALL_OW 248
66556: ST_TO_ADDR
// weapon := 0 ;
66557: LD_ADDR_VAR 0 8
66561: PUSH
66562: LD_INT 0
66564: ST_TO_ADDR
// if not nat then
66565: LD_VAR 0 7
66569: NOT
66570: IFFALSE 66574
// continue ;
66572: GO 66539
// for j in list [ nat ] do
66574: LD_ADDR_VAR 0 5
66578: PUSH
66579: LD_VAR 0 10
66583: PUSH
66584: LD_VAR 0 7
66588: ARRAY
66589: PUSH
66590: FOR_IN
66591: IFFALSE 66632
// if GetBWeapon ( i ) = j [ 1 ] then
66593: LD_VAR 0 4
66597: PPUSH
66598: CALL_OW 269
66602: PUSH
66603: LD_VAR 0 5
66607: PUSH
66608: LD_INT 1
66610: ARRAY
66611: EQUAL
66612: IFFALSE 66630
// begin weapon := j [ 2 ] ;
66614: LD_ADDR_VAR 0 8
66618: PUSH
66619: LD_VAR 0 5
66623: PUSH
66624: LD_INT 2
66626: ARRAY
66627: ST_TO_ADDR
// break ;
66628: GO 66632
// end ;
66630: GO 66590
66632: POP
66633: POP
// if not weapon then
66634: LD_VAR 0 8
66638: NOT
66639: IFFALSE 66643
// continue ;
66641: GO 66539
// for k in factories do
66643: LD_ADDR_VAR 0 6
66647: PUSH
66648: LD_VAR 0 2
66652: PUSH
66653: FOR_IN
66654: IFFALSE 66719
// begin weapons := AvailableWeaponList ( k ) ;
66656: LD_ADDR_VAR 0 9
66660: PUSH
66661: LD_VAR 0 6
66665: PPUSH
66666: CALL_OW 478
66670: ST_TO_ADDR
// if not weapons then
66671: LD_VAR 0 9
66675: NOT
66676: IFFALSE 66680
// continue ;
66678: GO 66653
// if weapon in weapons then
66680: LD_VAR 0 8
66684: PUSH
66685: LD_VAR 0 9
66689: IN
66690: IFFALSE 66717
// begin result := [ i , weapon ] ;
66692: LD_ADDR_VAR 0 3
66696: PUSH
66697: LD_VAR 0 4
66701: PUSH
66702: LD_VAR 0 8
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: ST_TO_ADDR
// exit ;
66711: POP
66712: POP
66713: POP
66714: POP
66715: GO 66725
// end ; end ;
66717: GO 66653
66719: POP
66720: POP
// end ;
66721: GO 66539
66723: POP
66724: POP
// end ;
66725: LD_VAR 0 3
66729: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66730: LD_INT 0
66732: PPUSH
// if not side or side > 8 then
66733: LD_VAR 0 3
66737: NOT
66738: PUSH
66739: LD_VAR 0 3
66743: PUSH
66744: LD_INT 8
66746: GREATER
66747: OR
66748: IFFALSE 66752
// exit ;
66750: GO 66811
// if not range then
66752: LD_VAR 0 4
66756: NOT
66757: IFFALSE 66768
// range := - 12 ;
66759: LD_ADDR_VAR 0 4
66763: PUSH
66764: LD_INT 12
66766: NEG
66767: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66768: LD_VAR 0 1
66772: PPUSH
66773: LD_VAR 0 2
66777: PPUSH
66778: LD_VAR 0 3
66782: PPUSH
66783: LD_VAR 0 4
66787: PPUSH
66788: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66792: LD_VAR 0 1
66796: PPUSH
66797: LD_VAR 0 2
66801: PPUSH
66802: LD_VAR 0 3
66806: PPUSH
66807: CALL_OW 331
// end ;
66811: LD_VAR 0 5
66815: RET
// export function Video ( mode ) ; begin
66816: LD_INT 0
66818: PPUSH
// ingame_video = mode ;
66819: LD_ADDR_OWVAR 52
66823: PUSH
66824: LD_VAR 0 1
66828: ST_TO_ADDR
// interface_hidden = mode ;
66829: LD_ADDR_OWVAR 54
66833: PUSH
66834: LD_VAR 0 1
66838: ST_TO_ADDR
// end ;
66839: LD_VAR 0 2
66843: RET
// export function Join ( array , element ) ; begin
66844: LD_INT 0
66846: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66847: LD_ADDR_VAR 0 3
66851: PUSH
66852: LD_VAR 0 1
66856: PPUSH
66857: LD_VAR 0 1
66861: PUSH
66862: LD_INT 1
66864: PLUS
66865: PPUSH
66866: LD_VAR 0 2
66870: PPUSH
66871: CALL_OW 1
66875: ST_TO_ADDR
// end ;
66876: LD_VAR 0 3
66880: RET
// export function JoinUnion ( array , element ) ; begin
66881: LD_INT 0
66883: PPUSH
// result := array union element ;
66884: LD_ADDR_VAR 0 3
66888: PUSH
66889: LD_VAR 0 1
66893: PUSH
66894: LD_VAR 0 2
66898: UNION
66899: ST_TO_ADDR
// end ;
66900: LD_VAR 0 3
66904: RET
// export function GetBehemoths ( side ) ; begin
66905: LD_INT 0
66907: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66908: LD_ADDR_VAR 0 2
66912: PUSH
66913: LD_INT 22
66915: PUSH
66916: LD_VAR 0 1
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 31
66927: PUSH
66928: LD_INT 25
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PPUSH
66939: CALL_OW 69
66943: ST_TO_ADDR
// end ;
66944: LD_VAR 0 2
66948: RET
// export function Shuffle ( array ) ; var i , index ; begin
66949: LD_INT 0
66951: PPUSH
66952: PPUSH
66953: PPUSH
// result := [ ] ;
66954: LD_ADDR_VAR 0 2
66958: PUSH
66959: EMPTY
66960: ST_TO_ADDR
// if not array then
66961: LD_VAR 0 1
66965: NOT
66966: IFFALSE 66970
// exit ;
66968: GO 67069
// Randomize ;
66970: CALL_OW 10
// for i = array downto 1 do
66974: LD_ADDR_VAR 0 3
66978: PUSH
66979: DOUBLE
66980: LD_VAR 0 1
66984: INC
66985: ST_TO_ADDR
66986: LD_INT 1
66988: PUSH
66989: FOR_DOWNTO
66990: IFFALSE 67067
// begin index := rand ( 1 , array ) ;
66992: LD_ADDR_VAR 0 4
66996: PUSH
66997: LD_INT 1
66999: PPUSH
67000: LD_VAR 0 1
67004: PPUSH
67005: CALL_OW 12
67009: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67010: LD_ADDR_VAR 0 2
67014: PUSH
67015: LD_VAR 0 2
67019: PPUSH
67020: LD_VAR 0 2
67024: PUSH
67025: LD_INT 1
67027: PLUS
67028: PPUSH
67029: LD_VAR 0 1
67033: PUSH
67034: LD_VAR 0 4
67038: ARRAY
67039: PPUSH
67040: CALL_OW 2
67044: ST_TO_ADDR
// array := Delete ( array , index ) ;
67045: LD_ADDR_VAR 0 1
67049: PUSH
67050: LD_VAR 0 1
67054: PPUSH
67055: LD_VAR 0 4
67059: PPUSH
67060: CALL_OW 3
67064: ST_TO_ADDR
// end ;
67065: GO 66989
67067: POP
67068: POP
// end ;
67069: LD_VAR 0 2
67073: RET
// export function GetBaseMaterials ( base ) ; begin
67074: LD_INT 0
67076: PPUSH
// result := [ 0 , 0 , 0 ] ;
67077: LD_ADDR_VAR 0 2
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: LD_INT 0
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: LIST
67095: ST_TO_ADDR
// if not base then
67096: LD_VAR 0 1
67100: NOT
67101: IFFALSE 67105
// exit ;
67103: GO 67154
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67105: LD_ADDR_VAR 0 2
67109: PUSH
67110: LD_VAR 0 1
67114: PPUSH
67115: LD_INT 1
67117: PPUSH
67118: CALL_OW 275
67122: PUSH
67123: LD_VAR 0 1
67127: PPUSH
67128: LD_INT 2
67130: PPUSH
67131: CALL_OW 275
67135: PUSH
67136: LD_VAR 0 1
67140: PPUSH
67141: LD_INT 3
67143: PPUSH
67144: CALL_OW 275
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: LIST
67153: ST_TO_ADDR
// end ;
67154: LD_VAR 0 2
67158: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67159: LD_INT 0
67161: PPUSH
67162: PPUSH
// result := array ;
67163: LD_ADDR_VAR 0 3
67167: PUSH
67168: LD_VAR 0 1
67172: ST_TO_ADDR
// if size > 0 then
67173: LD_VAR 0 2
67177: PUSH
67178: LD_INT 0
67180: GREATER
67181: IFFALSE 67227
// for i := array downto size do
67183: LD_ADDR_VAR 0 4
67187: PUSH
67188: DOUBLE
67189: LD_VAR 0 1
67193: INC
67194: ST_TO_ADDR
67195: LD_VAR 0 2
67199: PUSH
67200: FOR_DOWNTO
67201: IFFALSE 67225
// result := Delete ( result , result ) ;
67203: LD_ADDR_VAR 0 3
67207: PUSH
67208: LD_VAR 0 3
67212: PPUSH
67213: LD_VAR 0 3
67217: PPUSH
67218: CALL_OW 3
67222: ST_TO_ADDR
67223: GO 67200
67225: POP
67226: POP
// end ;
67227: LD_VAR 0 3
67231: RET
// export function ComExit ( unit ) ; var tmp ; begin
67232: LD_INT 0
67234: PPUSH
67235: PPUSH
// if not IsInUnit ( unit ) then
67236: LD_VAR 0 1
67240: PPUSH
67241: CALL_OW 310
67245: NOT
67246: IFFALSE 67250
// exit ;
67248: GO 67310
// tmp := IsInUnit ( unit ) ;
67250: LD_ADDR_VAR 0 3
67254: PUSH
67255: LD_VAR 0 1
67259: PPUSH
67260: CALL_OW 310
67264: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67265: LD_VAR 0 3
67269: PPUSH
67270: CALL_OW 247
67274: PUSH
67275: LD_INT 2
67277: EQUAL
67278: IFFALSE 67291
// ComExitVehicle ( unit ) else
67280: LD_VAR 0 1
67284: PPUSH
67285: CALL_OW 121
67289: GO 67300
// ComExitBuilding ( unit ) ;
67291: LD_VAR 0 1
67295: PPUSH
67296: CALL_OW 122
// result := tmp ;
67300: LD_ADDR_VAR 0 2
67304: PUSH
67305: LD_VAR 0 3
67309: ST_TO_ADDR
// end ;
67310: LD_VAR 0 2
67314: RET
// export function ComExitAll ( units ) ; var i ; begin
67315: LD_INT 0
67317: PPUSH
67318: PPUSH
// if not units then
67319: LD_VAR 0 1
67323: NOT
67324: IFFALSE 67328
// exit ;
67326: GO 67354
// for i in units do
67328: LD_ADDR_VAR 0 3
67332: PUSH
67333: LD_VAR 0 1
67337: PUSH
67338: FOR_IN
67339: IFFALSE 67352
// ComExit ( i ) ;
67341: LD_VAR 0 3
67345: PPUSH
67346: CALL 67232 0 1
67350: GO 67338
67352: POP
67353: POP
// end ;
67354: LD_VAR 0 2
67358: RET
// export function ResetHc ; begin
67359: LD_INT 0
67361: PPUSH
// InitHc ;
67362: CALL_OW 19
// hc_importance := 0 ;
67366: LD_ADDR_OWVAR 32
67370: PUSH
67371: LD_INT 0
67373: ST_TO_ADDR
// end ;
67374: LD_VAR 0 1
67378: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67379: LD_INT 0
67381: PPUSH
67382: PPUSH
67383: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67384: LD_ADDR_VAR 0 6
67388: PUSH
67389: LD_VAR 0 1
67393: PUSH
67394: LD_VAR 0 3
67398: PLUS
67399: PUSH
67400: LD_INT 2
67402: DIV
67403: ST_TO_ADDR
// if _x < 0 then
67404: LD_VAR 0 6
67408: PUSH
67409: LD_INT 0
67411: LESS
67412: IFFALSE 67429
// _x := _x * - 1 ;
67414: LD_ADDR_VAR 0 6
67418: PUSH
67419: LD_VAR 0 6
67423: PUSH
67424: LD_INT 1
67426: NEG
67427: MUL
67428: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67429: LD_ADDR_VAR 0 7
67433: PUSH
67434: LD_VAR 0 2
67438: PUSH
67439: LD_VAR 0 4
67443: PLUS
67444: PUSH
67445: LD_INT 2
67447: DIV
67448: ST_TO_ADDR
// if _y < 0 then
67449: LD_VAR 0 7
67453: PUSH
67454: LD_INT 0
67456: LESS
67457: IFFALSE 67474
// _y := _y * - 1 ;
67459: LD_ADDR_VAR 0 7
67463: PUSH
67464: LD_VAR 0 7
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: MUL
67473: ST_TO_ADDR
// result := [ _x , _y ] ;
67474: LD_ADDR_VAR 0 5
67478: PUSH
67479: LD_VAR 0 6
67483: PUSH
67484: LD_VAR 0 7
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: ST_TO_ADDR
// end ;
67493: LD_VAR 0 5
67497: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67498: LD_INT 0
67500: PPUSH
67501: PPUSH
67502: PPUSH
67503: PPUSH
// task := GetTaskList ( unit ) ;
67504: LD_ADDR_VAR 0 7
67508: PUSH
67509: LD_VAR 0 1
67513: PPUSH
67514: CALL_OW 437
67518: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67519: LD_VAR 0 7
67523: NOT
67524: PUSH
67525: LD_VAR 0 1
67529: PPUSH
67530: LD_VAR 0 2
67534: PPUSH
67535: CALL_OW 308
67539: NOT
67540: AND
67541: IFFALSE 67545
// exit ;
67543: GO 67663
// if IsInArea ( unit , area ) then
67545: LD_VAR 0 1
67549: PPUSH
67550: LD_VAR 0 2
67554: PPUSH
67555: CALL_OW 308
67559: IFFALSE 67577
// begin ComMoveToArea ( unit , goAway ) ;
67561: LD_VAR 0 1
67565: PPUSH
67566: LD_VAR 0 3
67570: PPUSH
67571: CALL_OW 113
// exit ;
67575: GO 67663
// end ; if task [ 1 ] [ 1 ] <> M then
67577: LD_VAR 0 7
67581: PUSH
67582: LD_INT 1
67584: ARRAY
67585: PUSH
67586: LD_INT 1
67588: ARRAY
67589: PUSH
67590: LD_STRING M
67592: NONEQUAL
67593: IFFALSE 67597
// exit ;
67595: GO 67663
// x := task [ 1 ] [ 2 ] ;
67597: LD_ADDR_VAR 0 5
67601: PUSH
67602: LD_VAR 0 7
67606: PUSH
67607: LD_INT 1
67609: ARRAY
67610: PUSH
67611: LD_INT 2
67613: ARRAY
67614: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67615: LD_ADDR_VAR 0 6
67619: PUSH
67620: LD_VAR 0 7
67624: PUSH
67625: LD_INT 1
67627: ARRAY
67628: PUSH
67629: LD_INT 3
67631: ARRAY
67632: ST_TO_ADDR
// if InArea ( x , y , area ) then
67633: LD_VAR 0 5
67637: PPUSH
67638: LD_VAR 0 6
67642: PPUSH
67643: LD_VAR 0 2
67647: PPUSH
67648: CALL_OW 309
67652: IFFALSE 67663
// ComStop ( unit ) ;
67654: LD_VAR 0 1
67658: PPUSH
67659: CALL_OW 141
// end ;
67663: LD_VAR 0 4
67667: RET
// export function Abs ( value ) ; begin
67668: LD_INT 0
67670: PPUSH
// result := value ;
67671: LD_ADDR_VAR 0 2
67675: PUSH
67676: LD_VAR 0 1
67680: ST_TO_ADDR
// if value < 0 then
67681: LD_VAR 0 1
67685: PUSH
67686: LD_INT 0
67688: LESS
67689: IFFALSE 67706
// result := value * - 1 ;
67691: LD_ADDR_VAR 0 2
67695: PUSH
67696: LD_VAR 0 1
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: MUL
67705: ST_TO_ADDR
// end ;
67706: LD_VAR 0 2
67710: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67711: LD_INT 0
67713: PPUSH
67714: PPUSH
67715: PPUSH
67716: PPUSH
67717: PPUSH
67718: PPUSH
67719: PPUSH
67720: PPUSH
// if not unit or not building then
67721: LD_VAR 0 1
67725: NOT
67726: PUSH
67727: LD_VAR 0 2
67731: NOT
67732: OR
67733: IFFALSE 67737
// exit ;
67735: GO 67963
// x := GetX ( building ) ;
67737: LD_ADDR_VAR 0 4
67741: PUSH
67742: LD_VAR 0 2
67746: PPUSH
67747: CALL_OW 250
67751: ST_TO_ADDR
// y := GetY ( building ) ;
67752: LD_ADDR_VAR 0 6
67756: PUSH
67757: LD_VAR 0 2
67761: PPUSH
67762: CALL_OW 251
67766: ST_TO_ADDR
// d := GetDir ( building ) ;
67767: LD_ADDR_VAR 0 8
67771: PUSH
67772: LD_VAR 0 2
67776: PPUSH
67777: CALL_OW 254
67781: ST_TO_ADDR
// r := 4 ;
67782: LD_ADDR_VAR 0 9
67786: PUSH
67787: LD_INT 4
67789: ST_TO_ADDR
// for i := 1 to 5 do
67790: LD_ADDR_VAR 0 10
67794: PUSH
67795: DOUBLE
67796: LD_INT 1
67798: DEC
67799: ST_TO_ADDR
67800: LD_INT 5
67802: PUSH
67803: FOR_TO
67804: IFFALSE 67961
// begin _x := ShiftX ( x , d , r + i ) ;
67806: LD_ADDR_VAR 0 5
67810: PUSH
67811: LD_VAR 0 4
67815: PPUSH
67816: LD_VAR 0 8
67820: PPUSH
67821: LD_VAR 0 9
67825: PUSH
67826: LD_VAR 0 10
67830: PLUS
67831: PPUSH
67832: CALL_OW 272
67836: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67837: LD_ADDR_VAR 0 7
67841: PUSH
67842: LD_VAR 0 6
67846: PPUSH
67847: LD_VAR 0 8
67851: PPUSH
67852: LD_VAR 0 9
67856: PUSH
67857: LD_VAR 0 10
67861: PLUS
67862: PPUSH
67863: CALL_OW 273
67867: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67868: LD_VAR 0 5
67872: PPUSH
67873: LD_VAR 0 7
67877: PPUSH
67878: CALL_OW 488
67882: PUSH
67883: LD_VAR 0 5
67887: PPUSH
67888: LD_VAR 0 7
67892: PPUSH
67893: CALL_OW 428
67897: PPUSH
67898: CALL_OW 247
67902: PUSH
67903: LD_INT 3
67905: PUSH
67906: LD_INT 2
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: IN
67913: NOT
67914: AND
67915: IFFALSE 67959
// begin ComMoveXY ( unit , _x , _y ) ;
67917: LD_VAR 0 1
67921: PPUSH
67922: LD_VAR 0 5
67926: PPUSH
67927: LD_VAR 0 7
67931: PPUSH
67932: CALL_OW 111
// result := [ _x , _y ] ;
67936: LD_ADDR_VAR 0 3
67940: PUSH
67941: LD_VAR 0 5
67945: PUSH
67946: LD_VAR 0 7
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: ST_TO_ADDR
// exit ;
67955: POP
67956: POP
67957: GO 67963
// end ; end ;
67959: GO 67803
67961: POP
67962: POP
// end ;
67963: LD_VAR 0 3
67967: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67968: LD_INT 0
67970: PPUSH
67971: PPUSH
67972: PPUSH
// result := 0 ;
67973: LD_ADDR_VAR 0 3
67977: PUSH
67978: LD_INT 0
67980: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67981: LD_VAR 0 1
67985: PUSH
67986: LD_INT 0
67988: LESS
67989: PUSH
67990: LD_VAR 0 1
67994: PUSH
67995: LD_INT 8
67997: GREATER
67998: OR
67999: PUSH
68000: LD_VAR 0 2
68004: PUSH
68005: LD_INT 0
68007: LESS
68008: OR
68009: PUSH
68010: LD_VAR 0 2
68014: PUSH
68015: LD_INT 8
68017: GREATER
68018: OR
68019: IFFALSE 68023
// exit ;
68021: GO 68098
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68023: LD_ADDR_VAR 0 4
68027: PUSH
68028: LD_INT 22
68030: PUSH
68031: LD_VAR 0 2
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PPUSH
68040: CALL_OW 69
68044: PUSH
68045: FOR_IN
68046: IFFALSE 68096
// begin un := UnitShoot ( i ) ;
68048: LD_ADDR_VAR 0 5
68052: PUSH
68053: LD_VAR 0 4
68057: PPUSH
68058: CALL_OW 504
68062: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68063: LD_VAR 0 5
68067: PPUSH
68068: CALL_OW 255
68072: PUSH
68073: LD_VAR 0 1
68077: EQUAL
68078: IFFALSE 68094
// begin result := un ;
68080: LD_ADDR_VAR 0 3
68084: PUSH
68085: LD_VAR 0 5
68089: ST_TO_ADDR
// exit ;
68090: POP
68091: POP
68092: GO 68098
// end ; end ;
68094: GO 68045
68096: POP
68097: POP
// end ;
68098: LD_VAR 0 3
68102: RET
// export function GetCargoBay ( units ) ; begin
68103: LD_INT 0
68105: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68106: LD_ADDR_VAR 0 2
68110: PUSH
68111: LD_VAR 0 1
68115: PPUSH
68116: LD_INT 2
68118: PUSH
68119: LD_INT 34
68121: PUSH
68122: LD_INT 12
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 34
68131: PUSH
68132: LD_INT 51
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 34
68141: PUSH
68142: LD_INT 32
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 34
68151: PUSH
68152: LD_EXP 15
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: PPUSH
68168: CALL_OW 72
68172: ST_TO_ADDR
// end ;
68173: LD_VAR 0 2
68177: RET
// export function Negate ( value ) ; begin
68178: LD_INT 0
68180: PPUSH
// result := not value ;
68181: LD_ADDR_VAR 0 2
68185: PUSH
68186: LD_VAR 0 1
68190: NOT
68191: ST_TO_ADDR
// end ;
68192: LD_VAR 0 2
68196: RET
// export function Inc ( value ) ; begin
68197: LD_INT 0
68199: PPUSH
// result := value + 1 ;
68200: LD_ADDR_VAR 0 2
68204: PUSH
68205: LD_VAR 0 1
68209: PUSH
68210: LD_INT 1
68212: PLUS
68213: ST_TO_ADDR
// end ;
68214: LD_VAR 0 2
68218: RET
// export function Dec ( value ) ; begin
68219: LD_INT 0
68221: PPUSH
// result := value - 1 ;
68222: LD_ADDR_VAR 0 2
68226: PUSH
68227: LD_VAR 0 1
68231: PUSH
68232: LD_INT 1
68234: MINUS
68235: ST_TO_ADDR
// end ;
68236: LD_VAR 0 2
68240: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68241: LD_INT 0
68243: PPUSH
68244: PPUSH
68245: PPUSH
68246: PPUSH
68247: PPUSH
68248: PPUSH
68249: PPUSH
68250: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68251: LD_VAR 0 1
68255: PPUSH
68256: LD_VAR 0 2
68260: PPUSH
68261: CALL_OW 488
68265: NOT
68266: PUSH
68267: LD_VAR 0 3
68271: PPUSH
68272: LD_VAR 0 4
68276: PPUSH
68277: CALL_OW 488
68281: NOT
68282: OR
68283: IFFALSE 68296
// begin result := - 1 ;
68285: LD_ADDR_VAR 0 5
68289: PUSH
68290: LD_INT 1
68292: NEG
68293: ST_TO_ADDR
// exit ;
68294: GO 68531
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68296: LD_ADDR_VAR 0 12
68300: PUSH
68301: LD_VAR 0 1
68305: PPUSH
68306: LD_VAR 0 2
68310: PPUSH
68311: LD_VAR 0 3
68315: PPUSH
68316: LD_VAR 0 4
68320: PPUSH
68321: CALL 67379 0 4
68325: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68326: LD_ADDR_VAR 0 11
68330: PUSH
68331: LD_VAR 0 1
68335: PPUSH
68336: LD_VAR 0 2
68340: PPUSH
68341: LD_VAR 0 12
68345: PUSH
68346: LD_INT 1
68348: ARRAY
68349: PPUSH
68350: LD_VAR 0 12
68354: PUSH
68355: LD_INT 2
68357: ARRAY
68358: PPUSH
68359: CALL_OW 298
68363: ST_TO_ADDR
// distance := 9999 ;
68364: LD_ADDR_VAR 0 10
68368: PUSH
68369: LD_INT 9999
68371: ST_TO_ADDR
// for i := 0 to 5 do
68372: LD_ADDR_VAR 0 6
68376: PUSH
68377: DOUBLE
68378: LD_INT 0
68380: DEC
68381: ST_TO_ADDR
68382: LD_INT 5
68384: PUSH
68385: FOR_TO
68386: IFFALSE 68529
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68388: LD_ADDR_VAR 0 7
68392: PUSH
68393: LD_VAR 0 1
68397: PPUSH
68398: LD_VAR 0 6
68402: PPUSH
68403: LD_VAR 0 11
68407: PPUSH
68408: CALL_OW 272
68412: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68413: LD_ADDR_VAR 0 8
68417: PUSH
68418: LD_VAR 0 2
68422: PPUSH
68423: LD_VAR 0 6
68427: PPUSH
68428: LD_VAR 0 11
68432: PPUSH
68433: CALL_OW 273
68437: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68438: LD_VAR 0 7
68442: PPUSH
68443: LD_VAR 0 8
68447: PPUSH
68448: CALL_OW 488
68452: NOT
68453: IFFALSE 68457
// continue ;
68455: GO 68385
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68457: LD_ADDR_VAR 0 9
68461: PUSH
68462: LD_VAR 0 12
68466: PUSH
68467: LD_INT 1
68469: ARRAY
68470: PPUSH
68471: LD_VAR 0 12
68475: PUSH
68476: LD_INT 2
68478: ARRAY
68479: PPUSH
68480: LD_VAR 0 7
68484: PPUSH
68485: LD_VAR 0 8
68489: PPUSH
68490: CALL_OW 298
68494: ST_TO_ADDR
// if tmp < distance then
68495: LD_VAR 0 9
68499: PUSH
68500: LD_VAR 0 10
68504: LESS
68505: IFFALSE 68527
// begin result := i ;
68507: LD_ADDR_VAR 0 5
68511: PUSH
68512: LD_VAR 0 6
68516: ST_TO_ADDR
// distance := tmp ;
68517: LD_ADDR_VAR 0 10
68521: PUSH
68522: LD_VAR 0 9
68526: ST_TO_ADDR
// end ; end ;
68527: GO 68385
68529: POP
68530: POP
// end ;
68531: LD_VAR 0 5
68535: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68536: LD_INT 0
68538: PPUSH
68539: PPUSH
// if not driver or not IsInUnit ( driver ) then
68540: LD_VAR 0 1
68544: NOT
68545: PUSH
68546: LD_VAR 0 1
68550: PPUSH
68551: CALL_OW 310
68555: NOT
68556: OR
68557: IFFALSE 68561
// exit ;
68559: GO 68651
// vehicle := IsInUnit ( driver ) ;
68561: LD_ADDR_VAR 0 3
68565: PUSH
68566: LD_VAR 0 1
68570: PPUSH
68571: CALL_OW 310
68575: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68576: LD_VAR 0 1
68580: PPUSH
68581: LD_STRING \
68583: PUSH
68584: LD_INT 0
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: LD_INT 0
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: PUSH
68611: LD_STRING E
68613: PUSH
68614: LD_INT 0
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: LD_VAR 0 3
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PPUSH
68647: CALL_OW 446
// end ;
68651: LD_VAR 0 2
68655: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68656: LD_INT 0
68658: PPUSH
68659: PPUSH
// if not driver or not IsInUnit ( driver ) then
68660: LD_VAR 0 1
68664: NOT
68665: PUSH
68666: LD_VAR 0 1
68670: PPUSH
68671: CALL_OW 310
68675: NOT
68676: OR
68677: IFFALSE 68681
// exit ;
68679: GO 68771
// vehicle := IsInUnit ( driver ) ;
68681: LD_ADDR_VAR 0 3
68685: PUSH
68686: LD_VAR 0 1
68690: PPUSH
68691: CALL_OW 310
68695: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68696: LD_VAR 0 1
68700: PPUSH
68701: LD_STRING \
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: LD_INT 0
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: PUSH
68731: LD_STRING E
68733: PUSH
68734: LD_INT 0
68736: PUSH
68737: LD_INT 0
68739: PUSH
68740: LD_VAR 0 3
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PPUSH
68767: CALL_OW 447
// end ;
68771: LD_VAR 0 2
68775: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68776: LD_INT 0
68778: PPUSH
68779: PPUSH
68780: PPUSH
// tmp := [ ] ;
68781: LD_ADDR_VAR 0 5
68785: PUSH
68786: EMPTY
68787: ST_TO_ADDR
// for i in units do
68788: LD_ADDR_VAR 0 4
68792: PUSH
68793: LD_VAR 0 1
68797: PUSH
68798: FOR_IN
68799: IFFALSE 68837
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68801: LD_ADDR_VAR 0 5
68805: PUSH
68806: LD_VAR 0 5
68810: PPUSH
68811: LD_VAR 0 5
68815: PUSH
68816: LD_INT 1
68818: PLUS
68819: PPUSH
68820: LD_VAR 0 4
68824: PPUSH
68825: CALL_OW 256
68829: PPUSH
68830: CALL_OW 2
68834: ST_TO_ADDR
68835: GO 68798
68837: POP
68838: POP
// if not tmp then
68839: LD_VAR 0 5
68843: NOT
68844: IFFALSE 68848
// exit ;
68846: GO 68896
// if asc then
68848: LD_VAR 0 2
68852: IFFALSE 68876
// result := SortListByListAsc ( units , tmp ) else
68854: LD_ADDR_VAR 0 3
68858: PUSH
68859: LD_VAR 0 1
68863: PPUSH
68864: LD_VAR 0 5
68868: PPUSH
68869: CALL_OW 76
68873: ST_TO_ADDR
68874: GO 68896
// result := SortListByListDesc ( units , tmp ) ;
68876: LD_ADDR_VAR 0 3
68880: PUSH
68881: LD_VAR 0 1
68885: PPUSH
68886: LD_VAR 0 5
68890: PPUSH
68891: CALL_OW 77
68895: ST_TO_ADDR
// end ;
68896: LD_VAR 0 3
68900: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68901: LD_INT 0
68903: PPUSH
68904: PPUSH
// task := GetTaskList ( mech ) ;
68905: LD_ADDR_VAR 0 4
68909: PUSH
68910: LD_VAR 0 1
68914: PPUSH
68915: CALL_OW 437
68919: ST_TO_ADDR
// if not task then
68920: LD_VAR 0 4
68924: NOT
68925: IFFALSE 68929
// exit ;
68927: GO 68971
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68929: LD_ADDR_VAR 0 3
68933: PUSH
68934: LD_VAR 0 4
68938: PUSH
68939: LD_INT 1
68941: ARRAY
68942: PUSH
68943: LD_INT 1
68945: ARRAY
68946: PUSH
68947: LD_STRING r
68949: EQUAL
68950: PUSH
68951: LD_VAR 0 4
68955: PUSH
68956: LD_INT 1
68958: ARRAY
68959: PUSH
68960: LD_INT 4
68962: ARRAY
68963: PUSH
68964: LD_VAR 0 2
68968: EQUAL
68969: AND
68970: ST_TO_ADDR
// end ;
68971: LD_VAR 0 3
68975: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68976: LD_INT 0
68978: PPUSH
// SetDir ( unit , d ) ;
68979: LD_VAR 0 1
68983: PPUSH
68984: LD_VAR 0 4
68988: PPUSH
68989: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68993: LD_VAR 0 1
68997: PPUSH
68998: LD_VAR 0 2
69002: PPUSH
69003: LD_VAR 0 3
69007: PPUSH
69008: LD_VAR 0 5
69012: PPUSH
69013: CALL_OW 48
// end ;
69017: LD_VAR 0 6
69021: RET
// export function ToNaturalNumber ( number ) ; begin
69022: LD_INT 0
69024: PPUSH
// result := number div 1 ;
69025: LD_ADDR_VAR 0 2
69029: PUSH
69030: LD_VAR 0 1
69034: PUSH
69035: LD_INT 1
69037: DIV
69038: ST_TO_ADDR
// if number < 0 then
69039: LD_VAR 0 1
69043: PUSH
69044: LD_INT 0
69046: LESS
69047: IFFALSE 69057
// result := 0 ;
69049: LD_ADDR_VAR 0 2
69053: PUSH
69054: LD_INT 0
69056: ST_TO_ADDR
// end ;
69057: LD_VAR 0 2
69061: RET
// export function SortByClass ( units , class ) ; var un ; begin
69062: LD_INT 0
69064: PPUSH
69065: PPUSH
// if not units or not class then
69066: LD_VAR 0 1
69070: NOT
69071: PUSH
69072: LD_VAR 0 2
69076: NOT
69077: OR
69078: IFFALSE 69082
// exit ;
69080: GO 69177
// result := [ ] ;
69082: LD_ADDR_VAR 0 3
69086: PUSH
69087: EMPTY
69088: ST_TO_ADDR
// for un in units do
69089: LD_ADDR_VAR 0 4
69093: PUSH
69094: LD_VAR 0 1
69098: PUSH
69099: FOR_IN
69100: IFFALSE 69175
// if GetClass ( un ) = class then
69102: LD_VAR 0 4
69106: PPUSH
69107: CALL_OW 257
69111: PUSH
69112: LD_VAR 0 2
69116: EQUAL
69117: IFFALSE 69144
// result := Insert ( result , 1 , un ) else
69119: LD_ADDR_VAR 0 3
69123: PUSH
69124: LD_VAR 0 3
69128: PPUSH
69129: LD_INT 1
69131: PPUSH
69132: LD_VAR 0 4
69136: PPUSH
69137: CALL_OW 2
69141: ST_TO_ADDR
69142: GO 69173
// result := Replace ( result , result + 1 , un ) ;
69144: LD_ADDR_VAR 0 3
69148: PUSH
69149: LD_VAR 0 3
69153: PPUSH
69154: LD_VAR 0 3
69158: PUSH
69159: LD_INT 1
69161: PLUS
69162: PPUSH
69163: LD_VAR 0 4
69167: PPUSH
69168: CALL_OW 1
69172: ST_TO_ADDR
69173: GO 69099
69175: POP
69176: POP
// end ;
69177: LD_VAR 0 3
69181: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69182: LD_INT 0
69184: PPUSH
69185: PPUSH
69186: PPUSH
69187: PPUSH
69188: PPUSH
69189: PPUSH
69190: PPUSH
// result := [ ] ;
69191: LD_ADDR_VAR 0 4
69195: PUSH
69196: EMPTY
69197: ST_TO_ADDR
// if x - r < 0 then
69198: LD_VAR 0 1
69202: PUSH
69203: LD_VAR 0 3
69207: MINUS
69208: PUSH
69209: LD_INT 0
69211: LESS
69212: IFFALSE 69224
// min_x := 0 else
69214: LD_ADDR_VAR 0 8
69218: PUSH
69219: LD_INT 0
69221: ST_TO_ADDR
69222: GO 69240
// min_x := x - r ;
69224: LD_ADDR_VAR 0 8
69228: PUSH
69229: LD_VAR 0 1
69233: PUSH
69234: LD_VAR 0 3
69238: MINUS
69239: ST_TO_ADDR
// if y - r < 0 then
69240: LD_VAR 0 2
69244: PUSH
69245: LD_VAR 0 3
69249: MINUS
69250: PUSH
69251: LD_INT 0
69253: LESS
69254: IFFALSE 69266
// min_y := 0 else
69256: LD_ADDR_VAR 0 7
69260: PUSH
69261: LD_INT 0
69263: ST_TO_ADDR
69264: GO 69282
// min_y := y - r ;
69266: LD_ADDR_VAR 0 7
69270: PUSH
69271: LD_VAR 0 2
69275: PUSH
69276: LD_VAR 0 3
69280: MINUS
69281: ST_TO_ADDR
// max_x := x + r ;
69282: LD_ADDR_VAR 0 9
69286: PUSH
69287: LD_VAR 0 1
69291: PUSH
69292: LD_VAR 0 3
69296: PLUS
69297: ST_TO_ADDR
// max_y := y + r ;
69298: LD_ADDR_VAR 0 10
69302: PUSH
69303: LD_VAR 0 2
69307: PUSH
69308: LD_VAR 0 3
69312: PLUS
69313: ST_TO_ADDR
// for _x = min_x to max_x do
69314: LD_ADDR_VAR 0 5
69318: PUSH
69319: DOUBLE
69320: LD_VAR 0 8
69324: DEC
69325: ST_TO_ADDR
69326: LD_VAR 0 9
69330: PUSH
69331: FOR_TO
69332: IFFALSE 69433
// for _y = min_y to max_y do
69334: LD_ADDR_VAR 0 6
69338: PUSH
69339: DOUBLE
69340: LD_VAR 0 7
69344: DEC
69345: ST_TO_ADDR
69346: LD_VAR 0 10
69350: PUSH
69351: FOR_TO
69352: IFFALSE 69429
// begin if not ValidHex ( _x , _y ) then
69354: LD_VAR 0 5
69358: PPUSH
69359: LD_VAR 0 6
69363: PPUSH
69364: CALL_OW 488
69368: NOT
69369: IFFALSE 69373
// continue ;
69371: GO 69351
// if GetResourceTypeXY ( _x , _y ) then
69373: LD_VAR 0 5
69377: PPUSH
69378: LD_VAR 0 6
69382: PPUSH
69383: CALL_OW 283
69387: IFFALSE 69427
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69389: LD_ADDR_VAR 0 4
69393: PUSH
69394: LD_VAR 0 4
69398: PPUSH
69399: LD_VAR 0 4
69403: PUSH
69404: LD_INT 1
69406: PLUS
69407: PPUSH
69408: LD_VAR 0 5
69412: PUSH
69413: LD_VAR 0 6
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PPUSH
69422: CALL_OW 1
69426: ST_TO_ADDR
// end ;
69427: GO 69351
69429: POP
69430: POP
69431: GO 69331
69433: POP
69434: POP
// end ;
69435: LD_VAR 0 4
69439: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69440: LD_INT 0
69442: PPUSH
69443: PPUSH
69444: PPUSH
69445: PPUSH
69446: PPUSH
69447: PPUSH
69448: PPUSH
69449: PPUSH
// if not units then
69450: LD_VAR 0 1
69454: NOT
69455: IFFALSE 69459
// exit ;
69457: GO 69884
// result := UnitFilter ( units , [ f_ok ] ) ;
69459: LD_ADDR_VAR 0 3
69463: PUSH
69464: LD_VAR 0 1
69468: PPUSH
69469: LD_INT 50
69471: PUSH
69472: EMPTY
69473: LIST
69474: PPUSH
69475: CALL_OW 72
69479: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69480: LD_ADDR_VAR 0 8
69484: PUSH
69485: LD_VAR 0 1
69489: PUSH
69490: LD_INT 1
69492: ARRAY
69493: PPUSH
69494: CALL_OW 255
69498: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69499: LD_ADDR_VAR 0 10
69503: PUSH
69504: LD_INT 29
69506: PUSH
69507: LD_EXP 18
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: ST_TO_ADDR
// if not result then
69516: LD_VAR 0 3
69520: NOT
69521: IFFALSE 69525
// exit ;
69523: GO 69884
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69525: LD_ADDR_VAR 0 5
69529: PUSH
69530: LD_INT 81
69532: PUSH
69533: LD_VAR 0 8
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PPUSH
69542: CALL_OW 69
69546: ST_TO_ADDR
// for i in result do
69547: LD_ADDR_VAR 0 4
69551: PUSH
69552: LD_VAR 0 3
69556: PUSH
69557: FOR_IN
69558: IFFALSE 69882
// begin tag := GetTag ( i ) + 1 ;
69560: LD_ADDR_VAR 0 9
69564: PUSH
69565: LD_VAR 0 4
69569: PPUSH
69570: CALL_OW 110
69574: PUSH
69575: LD_INT 1
69577: PLUS
69578: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69579: LD_ADDR_VAR 0 7
69583: PUSH
69584: LD_VAR 0 4
69588: PPUSH
69589: CALL_OW 250
69593: PPUSH
69594: LD_VAR 0 4
69598: PPUSH
69599: CALL_OW 251
69603: PPUSH
69604: LD_INT 6
69606: PPUSH
69607: CALL 69182 0 3
69611: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69612: LD_VAR 0 7
69616: PUSH
69617: LD_VAR 0 4
69621: PPUSH
69622: CALL_OW 264
69626: PUSH
69627: LD_VAR 0 10
69631: IN
69632: NOT
69633: AND
69634: IFFALSE 69673
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69636: LD_VAR 0 4
69640: PPUSH
69641: LD_VAR 0 7
69645: PUSH
69646: LD_INT 1
69648: ARRAY
69649: PUSH
69650: LD_INT 1
69652: ARRAY
69653: PPUSH
69654: LD_VAR 0 7
69658: PUSH
69659: LD_INT 1
69661: ARRAY
69662: PUSH
69663: LD_INT 2
69665: ARRAY
69666: PPUSH
69667: CALL_OW 116
69671: GO 69880
// if path > tag then
69673: LD_VAR 0 2
69677: PUSH
69678: LD_VAR 0 9
69682: GREATER
69683: IFFALSE 69850
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69685: LD_ADDR_VAR 0 6
69689: PUSH
69690: LD_VAR 0 5
69694: PPUSH
69695: LD_INT 91
69697: PUSH
69698: LD_VAR 0 4
69702: PUSH
69703: LD_INT 12
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: LIST
69710: PPUSH
69711: CALL_OW 72
69715: ST_TO_ADDR
// if nearEnemy then
69716: LD_VAR 0 6
69720: IFFALSE 69748
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69722: LD_VAR 0 4
69726: PPUSH
69727: LD_VAR 0 6
69731: PPUSH
69732: LD_VAR 0 4
69736: PPUSH
69737: CALL_OW 74
69741: PPUSH
69742: CALL_OW 115
69746: GO 69848
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69748: LD_VAR 0 4
69752: PPUSH
69753: LD_VAR 0 2
69757: PUSH
69758: LD_VAR 0 9
69762: ARRAY
69763: PUSH
69764: LD_INT 1
69766: ARRAY
69767: PPUSH
69768: LD_VAR 0 2
69772: PUSH
69773: LD_VAR 0 9
69777: ARRAY
69778: PUSH
69779: LD_INT 2
69781: ARRAY
69782: PPUSH
69783: CALL_OW 297
69787: PUSH
69788: LD_INT 6
69790: GREATER
69791: IFFALSE 69834
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69793: LD_VAR 0 4
69797: PPUSH
69798: LD_VAR 0 2
69802: PUSH
69803: LD_VAR 0 9
69807: ARRAY
69808: PUSH
69809: LD_INT 1
69811: ARRAY
69812: PPUSH
69813: LD_VAR 0 2
69817: PUSH
69818: LD_VAR 0 9
69822: ARRAY
69823: PUSH
69824: LD_INT 2
69826: ARRAY
69827: PPUSH
69828: CALL_OW 114
69832: GO 69848
// SetTag ( i , tag ) ;
69834: LD_VAR 0 4
69838: PPUSH
69839: LD_VAR 0 9
69843: PPUSH
69844: CALL_OW 109
// end else
69848: GO 69880
// if enemy then
69850: LD_VAR 0 5
69854: IFFALSE 69880
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69856: LD_VAR 0 4
69860: PPUSH
69861: LD_VAR 0 5
69865: PPUSH
69866: LD_VAR 0 4
69870: PPUSH
69871: CALL_OW 74
69875: PPUSH
69876: CALL_OW 115
// end ;
69880: GO 69557
69882: POP
69883: POP
// end ;
69884: LD_VAR 0 3
69888: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69889: LD_INT 0
69891: PPUSH
69892: PPUSH
69893: PPUSH
// if not unit or IsInUnit ( unit ) then
69894: LD_VAR 0 1
69898: NOT
69899: PUSH
69900: LD_VAR 0 1
69904: PPUSH
69905: CALL_OW 310
69909: OR
69910: IFFALSE 69914
// exit ;
69912: GO 70005
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69914: LD_ADDR_VAR 0 4
69918: PUSH
69919: LD_VAR 0 1
69923: PPUSH
69924: CALL_OW 250
69928: PPUSH
69929: LD_VAR 0 2
69933: PPUSH
69934: LD_INT 1
69936: PPUSH
69937: CALL_OW 272
69941: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69942: LD_ADDR_VAR 0 5
69946: PUSH
69947: LD_VAR 0 1
69951: PPUSH
69952: CALL_OW 251
69956: PPUSH
69957: LD_VAR 0 2
69961: PPUSH
69962: LD_INT 1
69964: PPUSH
69965: CALL_OW 273
69969: ST_TO_ADDR
// if ValidHex ( x , y ) then
69970: LD_VAR 0 4
69974: PPUSH
69975: LD_VAR 0 5
69979: PPUSH
69980: CALL_OW 488
69984: IFFALSE 70005
// ComTurnXY ( unit , x , y ) ;
69986: LD_VAR 0 1
69990: PPUSH
69991: LD_VAR 0 4
69995: PPUSH
69996: LD_VAR 0 5
70000: PPUSH
70001: CALL_OW 118
// end ;
70005: LD_VAR 0 3
70009: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70010: LD_INT 0
70012: PPUSH
70013: PPUSH
// result := false ;
70014: LD_ADDR_VAR 0 3
70018: PUSH
70019: LD_INT 0
70021: ST_TO_ADDR
// if not units then
70022: LD_VAR 0 2
70026: NOT
70027: IFFALSE 70031
// exit ;
70029: GO 70076
// for i in units do
70031: LD_ADDR_VAR 0 4
70035: PUSH
70036: LD_VAR 0 2
70040: PUSH
70041: FOR_IN
70042: IFFALSE 70074
// if See ( side , i ) then
70044: LD_VAR 0 1
70048: PPUSH
70049: LD_VAR 0 4
70053: PPUSH
70054: CALL_OW 292
70058: IFFALSE 70072
// begin result := true ;
70060: LD_ADDR_VAR 0 3
70064: PUSH
70065: LD_INT 1
70067: ST_TO_ADDR
// exit ;
70068: POP
70069: POP
70070: GO 70076
// end ;
70072: GO 70041
70074: POP
70075: POP
// end ;
70076: LD_VAR 0 3
70080: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70081: LD_INT 0
70083: PPUSH
70084: PPUSH
70085: PPUSH
70086: PPUSH
// if not unit or not points then
70087: LD_VAR 0 1
70091: NOT
70092: PUSH
70093: LD_VAR 0 2
70097: NOT
70098: OR
70099: IFFALSE 70103
// exit ;
70101: GO 70193
// dist := 99999 ;
70103: LD_ADDR_VAR 0 5
70107: PUSH
70108: LD_INT 99999
70110: ST_TO_ADDR
// for i in points do
70111: LD_ADDR_VAR 0 4
70115: PUSH
70116: LD_VAR 0 2
70120: PUSH
70121: FOR_IN
70122: IFFALSE 70191
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70124: LD_ADDR_VAR 0 6
70128: PUSH
70129: LD_VAR 0 1
70133: PPUSH
70134: LD_VAR 0 4
70138: PUSH
70139: LD_INT 1
70141: ARRAY
70142: PPUSH
70143: LD_VAR 0 4
70147: PUSH
70148: LD_INT 2
70150: ARRAY
70151: PPUSH
70152: CALL_OW 297
70156: ST_TO_ADDR
// if tmpDist < dist then
70157: LD_VAR 0 6
70161: PUSH
70162: LD_VAR 0 5
70166: LESS
70167: IFFALSE 70189
// begin result := i ;
70169: LD_ADDR_VAR 0 3
70173: PUSH
70174: LD_VAR 0 4
70178: ST_TO_ADDR
// dist := tmpDist ;
70179: LD_ADDR_VAR 0 5
70183: PUSH
70184: LD_VAR 0 6
70188: ST_TO_ADDR
// end ; end ;
70189: GO 70121
70191: POP
70192: POP
// end ; end_of_file
70193: LD_VAR 0 3
70197: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70198: LD_VAR 0 1
70202: PUSH
70203: LD_INT 200
70205: DOUBLE
70206: GREATEREQUAL
70207: IFFALSE 70215
70209: LD_INT 299
70211: DOUBLE
70212: LESSEQUAL
70213: IFTRUE 70217
70215: GO 70249
70217: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70218: LD_VAR 0 1
70222: PPUSH
70223: LD_VAR 0 2
70227: PPUSH
70228: LD_VAR 0 3
70232: PPUSH
70233: LD_VAR 0 4
70237: PPUSH
70238: LD_VAR 0 5
70242: PPUSH
70243: CALL 25845 0 5
70247: GO 70326
70249: LD_INT 300
70251: DOUBLE
70252: GREATEREQUAL
70253: IFFALSE 70261
70255: LD_INT 399
70257: DOUBLE
70258: LESSEQUAL
70259: IFTRUE 70263
70261: GO 70325
70263: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70264: LD_VAR 0 1
70268: PPUSH
70269: LD_VAR 0 2
70273: PPUSH
70274: LD_VAR 0 3
70278: PPUSH
70279: LD_VAR 0 4
70283: PPUSH
70284: LD_VAR 0 5
70288: PPUSH
70289: LD_VAR 0 6
70293: PPUSH
70294: LD_VAR 0 7
70298: PPUSH
70299: LD_VAR 0 8
70303: PPUSH
70304: LD_VAR 0 9
70308: PPUSH
70309: LD_VAR 0 10
70313: PPUSH
70314: LD_VAR 0 11
70318: PPUSH
70319: CALL 23487 0 11
70323: GO 70326
70325: POP
// end ;
70326: PPOPN 11
70328: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70329: LD_VAR 0 1
70333: PPUSH
70334: LD_VAR 0 2
70338: PPUSH
70339: LD_VAR 0 3
70343: PPUSH
70344: LD_VAR 0 4
70348: PPUSH
70349: LD_VAR 0 5
70353: PPUSH
70354: CALL 25581 0 5
// end ; end_of_file
70358: PPOPN 5
70360: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70361: LD_VAR 0 1
70365: PPUSH
70366: LD_VAR 0 2
70370: PPUSH
70371: LD_VAR 0 3
70375: PPUSH
70376: LD_VAR 0 4
70380: PPUSH
70381: LD_VAR 0 5
70385: PPUSH
70386: LD_VAR 0 6
70390: PPUSH
70391: CALL 11180 0 6
// end ;
70395: PPOPN 6
70397: END
