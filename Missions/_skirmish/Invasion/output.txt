// starting begin InitSettings ;
   0: CALL 2618 0 0
// InitGame ;
   4: CALL 2656 0 0
// InitDisplay ;
   8: CALL 9205 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: IFFALSE 767
 755: PUSH
 756: LD_VAR 0 2
 760: PUSH
 761: LD_VAR 0 4
 765: GREATER
 766: AND
 767: IFFALSE 777
// result := 0 ;
 769: LD_ADDR_VAR 0 5
 773: PUSH
 774: LD_INT 0
 776: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 777: LD_VAR 0 1
 781: PUSH
 782: LD_VAR 0 3
 786: LESS
 787: IFFALSE 801
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_VAR 0 4
 799: EQUAL
 800: AND
 801: IFFALSE 811
// result := 1 ;
 803: LD_ADDR_VAR 0 5
 807: PUSH
 808: LD_INT 1
 810: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 811: LD_VAR 0 1
 815: PUSH
 816: LD_VAR 0 3
 820: LESS
 821: IFFALSE 835
 823: PUSH
 824: LD_VAR 0 2
 828: PUSH
 829: LD_VAR 0 4
 833: LESS
 834: AND
 835: IFFALSE 845
// result := 2 ;
 837: LD_ADDR_VAR 0 5
 841: PUSH
 842: LD_INT 2
 844: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 845: LD_VAR 0 1
 849: PUSH
 850: LD_VAR 0 3
 854: EQUAL
 855: IFFALSE 869
 857: PUSH
 858: LD_VAR 0 2
 862: PUSH
 863: LD_VAR 0 4
 867: LESS
 868: AND
 869: IFFALSE 879
// result := 3 ;
 871: LD_ADDR_VAR 0 5
 875: PUSH
 876: LD_INT 3
 878: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_VAR 0 3
 888: GREATER
 889: IFFALSE 903
 891: PUSH
 892: LD_VAR 0 2
 896: PUSH
 897: LD_VAR 0 4
 901: EQUAL
 902: AND
 903: IFFALSE 913
// result := 4 ;
 905: LD_ADDR_VAR 0 5
 909: PUSH
 910: LD_INT 4
 912: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 913: LD_VAR 0 1
 917: PUSH
 918: LD_VAR 0 3
 922: GREATER
 923: IFFALSE 937
 925: PUSH
 926: LD_VAR 0 2
 930: PUSH
 931: LD_VAR 0 4
 935: GREATER
 936: AND
 937: IFFALSE 947
// result := 5 ;
 939: LD_ADDR_VAR 0 5
 943: PUSH
 944: LD_INT 5
 946: ST_TO_ADDR
// end ;
 947: LD_VAR 0 5
 951: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 952: LD_INT 0
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_INT 22
 965: PUSH
 966: LD_OWVAR 2
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: LD_INT 21
 977: PUSH
 978: LD_INT 1
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PPUSH
 989: CALL_OW 69
 993: ST_TO_ADDR
// for i = 1 to amount do
 994: LD_ADDR_VAR 0 3
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_VAR 0 1
1008: PUSH
1009: FOR_TO
1010: IFFALSE 1091
// begin pep := rand ( 1 , team ) ;
1012: LD_ADDR_VAR 0 5
1016: PUSH
1017: LD_INT 1
1019: PPUSH
1020: LD_VAR 0 4
1024: PPUSH
1025: CALL_OW 12
1029: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1030: LD_VAR 0 4
1034: PUSH
1035: LD_VAR 0 5
1039: ARRAY
1040: PPUSH
1041: LD_INT 1
1043: PPUSH
1044: LD_INT 4
1046: PPUSH
1047: CALL_OW 12
1051: PPUSH
1052: LD_INT 1000
1054: PPUSH
1055: LD_INT 10000
1057: PPUSH
1058: CALL_OW 12
1062: PPUSH
1063: CALL_OW 492
// team := team diff team [ pep ] ;
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: LD_VAR 0 4
1076: PUSH
1077: LD_VAR 0 4
1081: PUSH
1082: LD_VAR 0 5
1086: ARRAY
1087: DIFF
1088: ST_TO_ADDR
// end ;
1089: GO 1009
1091: POP
1092: POP
// end ;
1093: LD_VAR 0 2
1097: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
1102: PPUSH
1103: PPUSH
1104: PPUSH
1105: PPUSH
1106: PPUSH
1107: PPUSH
1108: PPUSH
1109: PPUSH
1110: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1111: LD_ADDR_VAR 0 5
1115: PUSH
1116: LD_INT 7
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: CALL_OW 517
1126: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1127: LD_ADDR_VAR 0 6
1131: PUSH
1132: LD_INT 6
1134: PPUSH
1135: LD_INT 0
1137: PPUSH
1138: CALL_OW 517
1142: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: DOUBLE
1149: LD_INT 1
1151: DEC
1152: ST_TO_ADDR
1153: LD_VAR 0 5
1157: PUSH
1158: LD_INT 1
1160: ARRAY
1161: PUSH
1162: FOR_TO
1163: IFFALSE 1245
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_VAR 0 7
1174: PPUSH
1175: LD_VAR 0 7
1179: PUSH
1180: LD_INT 1
1182: PLUS
1183: PPUSH
1184: LD_VAR 0 5
1188: PUSH
1189: LD_INT 1
1191: ARRAY
1192: PUSH
1193: LD_VAR 0 3
1197: ARRAY
1198: PPUSH
1199: CALL_OW 1
1203: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1204: LD_ADDR_VAR 0 7
1208: PUSH
1209: LD_VAR 0 7
1213: PPUSH
1214: LD_VAR 0 7
1218: PUSH
1219: LD_INT 1
1221: PLUS
1222: PPUSH
1223: LD_VAR 0 5
1227: PUSH
1228: LD_INT 2
1230: ARRAY
1231: PUSH
1232: LD_VAR 0 3
1236: ARRAY
1237: PPUSH
1238: CALL_OW 1
1242: ST_TO_ADDR
// end ;
1243: GO 1162
1245: POP
1246: POP
// uc_side := 4 ;
1247: LD_ADDR_OWVAR 20
1251: PUSH
1252: LD_INT 4
1254: ST_TO_ADDR
// case strenght of 1 .. 10 :
1255: LD_VAR 0 1
1259: PUSH
1260: LD_INT 1
1262: DOUBLE
1263: GREATEREQUAL
1264: IFFALSE 1272
1266: LD_INT 10
1268: DOUBLE
1269: LESSEQUAL
1270: IFTRUE 1274
1272: GO 1336
1274: POP
// begin uc_nation := 0 ;
1275: LD_ADDR_OWVAR 21
1279: PUSH
1280: LD_INT 0
1282: ST_TO_ADDR
// for i = 1 to 20 do
1283: LD_ADDR_VAR 0 3
1287: PUSH
1288: DOUBLE
1289: LD_INT 1
1291: DEC
1292: ST_TO_ADDR
1293: LD_INT 20
1295: PUSH
1296: FOR_TO
1297: IFFALSE 1332
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1299: LD_INT 0
1301: PPUSH
1302: LD_INT 15
1304: PPUSH
1305: LD_VAR 0 1
1309: PPUSH
1310: CALL_OW 380
// result := result ^ CreateHuman ;
1314: LD_ADDR_VAR 0 2
1318: PUSH
1319: LD_VAR 0 2
1323: PUSH
1324: CALL_OW 44
1328: ADD
1329: ST_TO_ADDR
// end ;
1330: GO 1296
1332: POP
1333: POP
// end ; 11 .. 40 :
1334: GO 1523
1336: LD_INT 11
1338: DOUBLE
1339: GREATEREQUAL
1340: IFFALSE 1348
1342: LD_INT 40
1344: DOUBLE
1345: LESSEQUAL
1346: IFTRUE 1350
1348: GO 1429
1350: POP
// begin uc_nation := 1 ;
1351: LD_ADDR_OWVAR 21
1355: PUSH
1356: LD_INT 1
1358: ST_TO_ADDR
// for i = 1 to 20 do
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_INT 20
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1425
// begin vc_chassis := us_medium_tracked ;
1375: LD_ADDR_OWVAR 37
1379: PUSH
1380: LD_INT 3
1382: ST_TO_ADDR
// vc_engine := engine_siberite ;
1383: LD_ADDR_OWVAR 39
1387: PUSH
1388: LD_INT 3
1390: ST_TO_ADDR
// vc_control := control_computer ;
1391: LD_ADDR_OWVAR 38
1395: PUSH
1396: LD_INT 3
1398: ST_TO_ADDR
// vc_weapon := us_laser ;
1399: LD_ADDR_OWVAR 40
1403: PUSH
1404: LD_INT 9
1406: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: LD_VAR 0 2
1416: PUSH
1417: CALL_OW 45
1421: ADD
1422: ST_TO_ADDR
// end ;
1423: GO 1372
1425: POP
1426: POP
// end ; 41 .. 100 :
1427: GO 1523
1429: LD_INT 41
1431: DOUBLE
1432: GREATEREQUAL
1433: IFFALSE 1441
1435: LD_INT 100
1437: DOUBLE
1438: LESSEQUAL
1439: IFTRUE 1443
1441: GO 1522
1443: POP
// begin uc_nation := 1 ;
1444: LD_ADDR_OWVAR 21
1448: PUSH
1449: LD_INT 1
1451: ST_TO_ADDR
// for i = 1 to 20 do
1452: LD_ADDR_VAR 0 3
1456: PUSH
1457: DOUBLE
1458: LD_INT 1
1460: DEC
1461: ST_TO_ADDR
1462: LD_INT 20
1464: PUSH
1465: FOR_TO
1466: IFFALSE 1518
// begin vc_chassis := us_morphling ;
1468: LD_ADDR_OWVAR 37
1472: PUSH
1473: LD_INT 5
1475: ST_TO_ADDR
// vc_engine := engine_siberite ;
1476: LD_ADDR_OWVAR 39
1480: PUSH
1481: LD_INT 3
1483: ST_TO_ADDR
// vc_control := control_computer ;
1484: LD_ADDR_OWVAR 38
1488: PUSH
1489: LD_INT 3
1491: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1492: LD_ADDR_OWVAR 40
1496: PUSH
1497: LD_INT 10
1499: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_VAR 0 2
1509: PUSH
1510: CALL_OW 45
1514: ADD
1515: ST_TO_ADDR
// end ;
1516: GO 1465
1518: POP
1519: POP
// end ; end ;
1520: GO 1523
1522: POP
// for i in result do
1523: LD_ADDR_VAR 0 3
1527: PUSH
1528: LD_VAR 0 2
1532: PUSH
1533: FOR_IN
1534: IFFALSE 1751
// begin x := base_area [ 1 ] [ 1 ] ;
1536: LD_ADDR_VAR 0 9
1540: PUSH
1541: LD_VAR 0 6
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PUSH
1550: LD_INT 1
1552: ARRAY
1553: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1554: LD_ADDR_VAR 0 10
1558: PUSH
1559: LD_VAR 0 6
1563: PUSH
1564: LD_INT 2
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1572: LD_ADDR_VAR 0 8
1576: PUSH
1577: LD_VAR 0 7
1581: PPUSH
1582: LD_VAR 0 9
1586: PPUSH
1587: LD_VAR 0 10
1591: PPUSH
1592: CALL_OW 439
1596: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1597: LD_VAR 0 3
1601: PPUSH
1602: LD_VAR 0 9
1606: PPUSH
1607: LD_VAR 0 10
1611: PPUSH
1612: LD_VAR 0 8
1616: PUSH
1617: LD_INT 1
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 8
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PPUSH
1630: CALL 740 0 4
1634: PPUSH
1635: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1639: LD_VAR 0 3
1643: PPUSH
1644: LD_VAR 0 9
1648: PPUSH
1649: LD_VAR 0 10
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 48
// ComHold ( i ) ;
1661: LD_VAR 0 3
1665: PPUSH
1666: CALL_OW 140
// for c = 1 to 2 do
1670: LD_ADDR_VAR 0 11
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 2
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1747
// begin tmp := base_area [ c ] ;
1686: LD_ADDR_VAR 0 12
1690: PUSH
1691: LD_VAR 0 6
1695: PUSH
1696: LD_VAR 0 11
1700: ARRAY
1701: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1702: LD_ADDR_VAR 0 12
1706: PUSH
1707: LD_VAR 0 12
1711: PPUSH
1712: LD_INT 1
1714: PPUSH
1715: CALL_OW 3
1719: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1720: LD_ADDR_VAR 0 6
1724: PUSH
1725: LD_VAR 0 6
1729: PPUSH
1730: LD_VAR 0 11
1734: PPUSH
1735: LD_VAR 0 12
1739: PPUSH
1740: CALL_OW 1
1744: ST_TO_ADDR
// end ;
1745: GO 1683
1747: POP
1748: POP
// end ;
1749: GO 1533
1751: POP
1752: POP
// end ;
1753: LD_VAR 0 2
1757: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1758: LD_INT 0
1760: PPUSH
1761: PPUSH
1762: PPUSH
1763: PPUSH
1764: PPUSH
// if graveyard = 0 then
1765: LD_EXP 8
1769: PUSH
1770: LD_INT 0
1772: EQUAL
1773: IFFALSE 1777
// exit ;
1775: GO 1940
// i := rand ( 1 , graveyard ) ;
1777: LD_ADDR_VAR 0 2
1781: PUSH
1782: LD_INT 1
1784: PPUSH
1785: LD_EXP 8
1789: PPUSH
1790: CALL_OW 12
1794: ST_TO_ADDR
// un := graveyard [ i ] ;
1795: LD_ADDR_VAR 0 4
1799: PUSH
1800: LD_EXP 8
1804: PUSH
1805: LD_VAR 0 2
1809: ARRAY
1810: ST_TO_ADDR
// for c in playerSquad do
1811: LD_ADDR_VAR 0 3
1815: PUSH
1816: LD_EXP 12
1820: PUSH
1821: FOR_IN
1822: IFFALSE 1858
// if un = c [ 1 ] then
1824: LD_VAR 0 4
1828: PUSH
1829: LD_VAR 0 3
1833: PUSH
1834: LD_INT 1
1836: ARRAY
1837: EQUAL
1838: IFFALSE 1856
// begin new := c [ 2 ] ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: LD_VAR 0 3
1849: PUSH
1850: LD_INT 2
1852: ARRAY
1853: ST_TO_ADDR
// break ;
1854: GO 1858
// end ;
1856: GO 1821
1858: POP
1859: POP
// uc_side := your_side ;
1860: LD_ADDR_OWVAR 20
1864: PUSH
1865: LD_OWVAR 2
1869: ST_TO_ADDR
// uc_nation := playerNation ;
1870: LD_ADDR_OWVAR 21
1874: PUSH
1875: LD_EXP 6
1879: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1880: LD_ADDR_VAR 0 4
1884: PUSH
1885: LD_VAR 0 5
1889: PPUSH
1890: CALL_OW 34
1894: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1895: LD_VAR 0 4
1899: PPUSH
1900: LD_EXP 9
1904: PPUSH
1905: LD_EXP 10
1909: PPUSH
1910: LD_INT 10
1912: PPUSH
1913: LD_INT 1
1915: PPUSH
1916: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1920: LD_ADDR_EXP 8
1924: PUSH
1925: LD_EXP 8
1929: PPUSH
1930: LD_VAR 0 2
1934: PPUSH
1935: CALL_OW 3
1939: ST_TO_ADDR
// end ;
1940: LD_VAR 0 1
1944: RET
// export function ComEspace ( un ) ; begin
1945: LD_INT 0
1947: PPUSH
// if not IsInArea ( un , zoneOut ) then
1948: LD_VAR 0 1
1952: PPUSH
1953: LD_INT 4
1955: PPUSH
1956: CALL_OW 308
1960: NOT
1961: IFFALSE 1977
// ComMoveToArea ( un , zoneOut ) else
1963: LD_VAR 0 1
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL_OW 113
1975: GO 1986
// RemoveUnit ( un ) ;
1977: LD_VAR 0 1
1981: PPUSH
1982: CALL_OW 64
// end ;
1986: LD_VAR 0 2
1990: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1991: LD_INT 0
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
// list := AreaToList ( area , 0 ) ;
1998: LD_ADDR_VAR 0 4
2002: PUSH
2003: LD_VAR 0 2
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 517
2015: ST_TO_ADDR
// if not list then
2016: LD_VAR 0 4
2020: NOT
2021: IFFALSE 2025
// exit ;
2023: GO 2187
// for i = 1 to list do
2025: LD_ADDR_VAR 0 6
2029: PUSH
2030: DOUBLE
2031: LD_INT 1
2033: DEC
2034: ST_TO_ADDR
2035: LD_VAR 0 4
2039: PUSH
2040: FOR_TO
2041: IFFALSE 2123
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2043: LD_ADDR_VAR 0 5
2047: PUSH
2048: LD_VAR 0 5
2052: PPUSH
2053: LD_VAR 0 5
2057: PUSH
2058: LD_INT 1
2060: PLUS
2061: PPUSH
2062: LD_VAR 0 4
2066: PUSH
2067: LD_INT 1
2069: ARRAY
2070: PUSH
2071: LD_VAR 0 6
2075: ARRAY
2076: PPUSH
2077: CALL_OW 1
2081: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2082: LD_ADDR_VAR 0 5
2086: PUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_INT 1
2099: PLUS
2100: PPUSH
2101: LD_VAR 0 4
2105: PUSH
2106: LD_INT 2
2108: ARRAY
2109: PUSH
2110: LD_VAR 0 6
2114: ARRAY
2115: PPUSH
2116: CALL_OW 1
2120: ST_TO_ADDR
// end ;
2121: GO 2040
2123: POP
2124: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2125: LD_ADDR_VAR 0 7
2129: PUSH
2130: LD_VAR 0 5
2134: PPUSH
2135: LD_VAR 0 1
2139: PPUSH
2140: CALL_OW 250
2144: PPUSH
2145: LD_VAR 0 1
2149: PPUSH
2150: CALL_OW 251
2154: PPUSH
2155: CALL_OW 439
2159: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2160: LD_VAR 0 1
2164: PPUSH
2165: LD_VAR 0 7
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PPUSH
2174: LD_VAR 0 7
2178: PUSH
2179: LD_INT 2
2181: ARRAY
2182: PPUSH
2183: CALL_OW 111
// end ;
2187: LD_VAR 0 3
2191: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
// timer := rand ( 2 , 5 ) ;
2197: LD_ADDR_VAR 0 4
2201: PUSH
2202: LD_INT 2
2204: PPUSH
2205: LD_INT 5
2207: PPUSH
2208: CALL_OW 12
2212: ST_TO_ADDR
// while ( timer > 0 ) do
2213: LD_VAR 0 4
2217: PUSH
2218: LD_INT 0
2220: GREATER
2221: IFFALSE 2260
// begin SetUnitDisplayNumber ( un , timer ) ;
2223: LD_VAR 0 1
2227: PPUSH
2228: LD_VAR 0 4
2232: PPUSH
2233: CALL_OW 505
// timer := timer - 1 ;
2237: LD_ADDR_VAR 0 4
2241: PUSH
2242: LD_VAR 0 4
2246: PUSH
2247: LD_INT 1
2249: MINUS
2250: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2251: LD_INT 35
2253: PPUSH
2254: CALL_OW 67
// end ;
2258: GO 2213
// if timer = 0 then
2260: LD_VAR 0 4
2264: PUSH
2265: LD_INT 0
2267: EQUAL
2268: IFFALSE 2317
// for i = 1 to 3 do
2270: LD_ADDR_VAR 0 3
2274: PUSH
2275: DOUBLE
2276: LD_INT 1
2278: DEC
2279: ST_TO_ADDR
2280: LD_INT 3
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2315
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2286: LD_VAR 0 1
2290: PPUSH
2291: CALL_OW 250
2295: PPUSH
2296: LD_VAR 0 1
2300: PPUSH
2301: CALL_OW 251
2305: PPUSH
2306: LD_INT 10
2308: PPUSH
2309: CALL_OW 453
2313: GO 2283
2315: POP
2316: POP
// end ;
2317: LD_VAR 0 2
2321: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2322: LD_INT 0
2324: PPUSH
// if unit in unreachableList then
2325: LD_VAR 0 1
2329: PUSH
2330: LD_EXP 13
2334: IN
2335: IFFALSE 2353
// unreachableList := unreachableList diff unit ;
2337: LD_ADDR_EXP 13
2341: PUSH
2342: LD_EXP 13
2346: PUSH
2347: LD_VAR 0 1
2351: DIFF
2352: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2353: LD_VAR 0 1
2357: PPUSH
2358: LD_VAR 0 2
2362: PPUSH
2363: LD_VAR 0 3
2367: PPUSH
2368: CALL_OW 428
2372: PPUSH
2373: CALL_OW 115
// Wait ( 1 ) ;
2377: LD_INT 1
2379: PPUSH
2380: CALL_OW 67
// if unit in unreachableList then
2384: LD_VAR 0 1
2388: PUSH
2389: LD_EXP 13
2393: IN
2394: IFFALSE 2406
// result := false else
2396: LD_ADDR_VAR 0 4
2400: PUSH
2401: LD_INT 0
2403: ST_TO_ADDR
2404: GO 2414
// result := true ;
2406: LD_ADDR_VAR 0 4
2410: PUSH
2411: LD_INT 1
2413: ST_TO_ADDR
// end ;
2414: LD_VAR 0 4
2418: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2419: LD_INT 0
2421: PPUSH
2422: PPUSH
2423: PPUSH
2424: PPUSH
2425: PPUSH
2426: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2427: LD_ADDR_VAR 0 4
2431: PUSH
2432: LD_INT 81
2434: PUSH
2435: LD_VAR 0 1
2439: PPUSH
2440: CALL_OW 255
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 69
2453: ST_TO_ADDR
// if not enemy then
2454: LD_VAR 0 4
2458: NOT
2459: IFFALSE 2463
// exit ;
2461: GO 2613
// if UnitFilter ( enemy , [ f_occupied ] ) then
2463: LD_VAR 0 4
2467: PPUSH
2468: LD_INT 59
2470: PUSH
2471: EMPTY
2472: LIST
2473: PPUSH
2474: CALL_OW 72
2478: IFFALSE 2589
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2480: LD_ADDR_VAR 0 5
2484: PUSH
2485: LD_VAR 0 4
2489: PPUSH
2490: LD_INT 59
2492: PUSH
2493: EMPTY
2494: LIST
2495: PPUSH
2496: CALL_OW 72
2500: PPUSH
2501: LD_VAR 0 1
2505: PPUSH
2506: CALL_OW 74
2510: ST_TO_ADDR
// x := GetX ( t ) ;
2511: LD_ADDR_VAR 0 6
2515: PUSH
2516: LD_VAR 0 5
2520: PPUSH
2521: CALL_OW 250
2525: ST_TO_ADDR
// y := GetY ( t ) ;
2526: LD_ADDR_VAR 0 7
2530: PUSH
2531: LD_VAR 0 5
2535: PPUSH
2536: CALL_OW 251
2540: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_VAR 0 6
2550: PPUSH
2551: LD_VAR 0 7
2555: PPUSH
2556: CALL 2322 0 3
2560: NOT
2561: IFFALSE 2587
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2563: LD_VAR 0 1
2567: PPUSH
2568: LD_VAR 0 4
2572: PPUSH
2573: LD_VAR 0 1
2577: PPUSH
2578: CALL_OW 74
2582: PPUSH
2583: CALL_OW 115
// end else
2587: GO 2613
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2589: LD_VAR 0 1
2593: PPUSH
2594: LD_VAR 0 4
2598: PPUSH
2599: LD_VAR 0 1
2603: PPUSH
2604: CALL_OW 74
2608: PPUSH
2609: CALL_OW 115
// end ; end_of_file
2613: LD_VAR 0 2
2617: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2618: LD_INT 0
2620: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2621: LD_ADDR_EXP 3
2625: PUSH
2626: LD_INT 0
2628: PPUSH
2629: CALL_OW 426
2633: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2634: LD_ADDR_EXP 6
2638: PUSH
2639: LD_INT 1
2641: PPUSH
2642: CALL_OW 426
2646: PUSH
2647: LD_INT 1
2649: MINUS
2650: ST_TO_ADDR
// end ; end_of_file
2651: LD_VAR 0 1
2655: RET
// export function InitGame ; begin
2656: LD_INT 0
2658: PPUSH
// ResetFog ;
2659: CALL_OW 335
// RandomizeAll ;
2663: CALL_OW 11
// LoadColors ;
2667: CALL 495 0 0
// debug := false ;
2671: LD_ADDR_EXP 1
2675: PUSH
2676: LD_INT 0
2678: ST_TO_ADDR
// game_started := false ;
2679: LD_ADDR_EXP 7
2683: PUSH
2684: LD_INT 0
2686: ST_TO_ADDR
// points := 0 ;
2687: LD_ADDR_EXP 2
2691: PUSH
2692: LD_INT 0
2694: ST_TO_ADDR
// waveNumber := 0 ;
2695: LD_ADDR_EXP 5
2699: PUSH
2700: LD_INT 0
2702: ST_TO_ADDR
// timeToNextAttack := 0 ;
2703: LD_ADDR_EXP 4
2707: PUSH
2708: LD_INT 0
2710: ST_TO_ADDR
// graveyard := [ ] ;
2711: LD_ADDR_EXP 8
2715: PUSH
2716: EMPTY
2717: ST_TO_ADDR
// base_x := 1 ;
2718: LD_ADDR_EXP 9
2722: PUSH
2723: LD_INT 1
2725: ST_TO_ADDR
// base_y := 1 ;
2726: LD_ADDR_EXP 10
2730: PUSH
2731: LD_INT 1
2733: ST_TO_ADDR
// if difficultyLevel > 2 then
2734: LD_EXP 3
2738: PUSH
2739: LD_INT 2
2741: GREATER
2742: IFFALSE 2757
// SetTech ( 5 , 7 , state_researched ) ;
2744: LD_INT 5
2746: PPUSH
2747: LD_INT 7
2749: PPUSH
2750: LD_INT 2
2752: PPUSH
2753: CALL_OW 322
// if not playerNation then
2757: LD_EXP 6
2761: NOT
2762: IFFALSE 2788
// begin points := 100 ;
2764: LD_ADDR_EXP 2
2768: PUSH
2769: LD_INT 100
2771: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2772: LD_ADDR_EXP 6
2776: PUSH
2777: LD_INT 1
2779: PPUSH
2780: LD_INT 3
2782: PPUSH
2783: CALL_OW 12
2787: ST_TO_ADDR
// end ; your_side := playerNation ;
2788: LD_ADDR_OWVAR 2
2792: PUSH
2793: LD_EXP 6
2797: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2798: LD_OWVAR 2
2802: PPUSH
2803: LD_INT 4
2805: PPUSH
2806: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2810: LD_INT 25
2812: PUSH
2813: LD_INT 20
2815: PUSH
2816: LD_INT 15
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: PUSH
2828: LD_EXP 3
2832: ARRAY
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: LD_INT 3
2839: PUSH
2840: LD_INT 2
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: PUSH
2852: LD_EXP 3
2856: ARRAY
2857: PUSH
2858: LD_INT 5
2860: PUSH
2861: LD_INT 3
2863: PUSH
2864: LD_INT 2
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: PUSH
2876: LD_EXP 3
2880: ARRAY
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: PPUSH
2887: LD_INT 1
2889: PUSH
2890: LD_INT 2
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: PPUSH
2901: LD_INT 88
2903: PPUSH
2904: LD_INT 76
2906: PPUSH
2907: LD_INT 6
2909: PPUSH
2910: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2914: LD_EXP 6
2918: PPUSH
2919: LD_INT 9
2921: PUSH
2922: LD_INT 7
2924: PUSH
2925: LD_INT 5
2927: PUSH
2928: LD_INT 3
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: PUSH
2937: LD_EXP 3
2941: ARRAY
2942: PPUSH
2943: LD_INT 24
2945: PUSH
2946: LD_INT 16
2948: PUSH
2949: LD_INT 12
2951: PUSH
2952: LD_INT 8
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: PUSH
2961: LD_EXP 3
2965: ARRAY
2966: PPUSH
2967: LD_INT 88
2969: PPUSH
2970: LD_INT 76
2972: PPUSH
2973: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2977: LD_INT 88
2979: PPUSH
2980: LD_INT 76
2982: PPUSH
2983: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2987: LD_INT 90
2989: PPUSH
2990: LD_INT 79
2992: PPUSH
2993: LD_OWVAR 2
2997: PPUSH
2998: LD_INT 50
3000: NEG
3001: PPUSH
3002: CALL_OW 330
// if debug then
3006: LD_EXP 1
3010: IFFALSE 3021
// FogOff ( your_side ) ;
3012: LD_OWVAR 2
3016: PPUSH
3017: CALL_OW 344
// end ;
3021: LD_VAR 0 1
3025: RET
// every 0 0$01 trigger game_started do var i ;
3026: LD_EXP 7
3030: IFFALSE 3270
3032: GO 3034
3034: DISABLE
3035: LD_INT 0
3037: PPUSH
// begin while ( game_started ) do
3038: LD_EXP 7
3042: IFFALSE 3270
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3044: LD_INT 22
3046: PUSH
3047: LD_INT 7
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PPUSH
3054: CALL_OW 69
3058: PUSH
3059: LD_INT 5
3061: LESS
3062: IFFALSE 3074
3064: PUSH
3065: LD_EXP 4
3069: PUSH
3070: LD_INT 0
3072: LESSEQUAL
3073: AND
3074: IFFALSE 3261
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3076: LD_INT 22
3078: PUSH
3079: LD_INT 4
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PPUSH
3086: CALL_OW 69
3090: IFFALSE 3128
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3092: LD_ADDR_VAR 0 1
3096: PUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 4
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PPUSH
3107: CALL_OW 69
3111: PUSH
3112: FOR_IN
3113: IFFALSE 3126
// RemoveUnit ( i ) ;
3115: LD_VAR 0 1
3119: PPUSH
3120: CALL_OW 64
3124: GO 3112
3126: POP
3127: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3128: LD_EXP 5
3132: PUSH
3133: LD_INT 3
3135: MOD
3136: PUSH
3137: LD_INT 0
3139: EQUAL
3140: IFTRUE 3156
3142: PUSH
3143: LD_EXP 5
3147: PUSH
3148: LD_INT 10
3150: MOD
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: OR
3156: IFFALSE 3168
3158: PUSH
3159: LD_EXP 5
3163: PUSH
3164: LD_INT 0
3166: GREATER
3167: AND
3168: IFFALSE 3174
// InitBonus ;
3170: CALL 9302 0 0
// if waveNumber mod 10 = 0 then
3174: LD_EXP 5
3178: PUSH
3179: LD_INT 10
3181: MOD
3182: PUSH
3183: LD_INT 0
3185: EQUAL
3186: IFFALSE 3192
// SaveForQuickRestart ;
3188: CALL_OW 22
// if waveNumber = 100 then
3192: LD_EXP 5
3196: PUSH
3197: LD_INT 100
3199: EQUAL
3200: IFFALSE 3213
// begin FogOff ( your_side ) ;
3202: LD_OWVAR 2
3206: PPUSH
3207: CALL_OW 344
// break ;
3211: GO 3270
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3213: LD_ADDR_EXP 4
3217: PUSH
3218: LD_INT 3150
3220: PPUSH
3221: LD_INT 5250
3223: PPUSH
3224: CALL_OW 12
3228: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3229: LD_EXP 4
3233: PPUSH
3234: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3238: LD_ADDR_EXP 5
3242: PUSH
3243: LD_EXP 5
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3252: LD_EXP 5
3256: PPUSH
3257: CALL 4301 0 1
// end ; Wait ( 0 0$01 ) ;
3261: LD_INT 35
3263: PPUSH
3264: CALL_OW 67
// end ;
3268: GO 3038
// end ;
3270: PPOPN 1
3272: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3273: LD_EXP 4
3277: PUSH
3278: LD_INT 0
3280: GREATER
3281: IFFALSE 3301
3283: GO 3285
3285: DISABLE
// begin enable ;
3286: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3287: LD_ADDR_EXP 4
3291: PUSH
3292: LD_EXP 4
3296: PUSH
3297: LD_INT 35
3299: MINUS
3300: ST_TO_ADDR
// end ; end_of_file
3301: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3302: LD_VAR 0 1
3306: PUSH
3307: LD_EXP 13
3311: IN
3312: NOT
3313: IFFALSE 3344
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3315: LD_ADDR_EXP 13
3319: PUSH
3320: LD_EXP 13
3324: PPUSH
3325: LD_EXP 13
3329: PUSH
3330: LD_INT 1
3332: PLUS
3333: PPUSH
3334: LD_VAR 0 1
3338: PPUSH
3339: CALL_OW 2
3343: ST_TO_ADDR
// end ;
3344: PPOPN 1
3346: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3347: LD_VAR 0 1
3351: PPUSH
3352: CALL 27069 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3356: LD_VAR 0 1
3360: PPUSH
3361: CALL_OW 255
3365: PUSH
3366: LD_OWVAR 2
3370: EQUAL
3371: IFFALSE 3388
3373: PUSH
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 247
3383: PUSH
3384: LD_INT 1
3386: EQUAL
3387: AND
3388: IFFALSE 3419
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3390: LD_ADDR_EXP 8
3394: PUSH
3395: LD_EXP 8
3399: PPUSH
3400: LD_EXP 8
3404: PUSH
3405: LD_INT 1
3407: PLUS
3408: PPUSH
3409: LD_VAR 0 1
3413: PPUSH
3414: CALL_OW 2
3418: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: LD_INT 7
3431: EQUAL
3432: IFFALSE 3806
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3434: LD_VAR 0 1
3438: PUSH
3439: LD_INT 34
3441: PUSH
3442: LD_INT 91
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 69
3453: IN
3454: IFFALSE 3499
// begin if Rand ( 1 , 100 ) <= 70 then
3456: LD_INT 1
3458: PPUSH
3459: LD_INT 100
3461: PPUSH
3462: CALL_OW 12
3466: PUSH
3467: LD_INT 70
3469: LESSEQUAL
3470: IFFALSE 3499
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3472: LD_VAR 0 1
3476: PPUSH
3477: CALL_OW 250
3481: PPUSH
3482: LD_VAR 0 1
3486: PPUSH
3487: CALL_OW 251
3491: PPUSH
3492: LD_INT 10
3494: PPUSH
3495: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3499: LD_VAR 0 1
3503: PPUSH
3504: CALL_OW 247
3508: PUSH
3509: LD_INT 1
3511: DOUBLE
3512: EQUAL
3513: IFTRUE 3517
3515: GO 3651
3517: POP
// begin case GetClass ( un ) of class_apeman :
3518: LD_VAR 0 1
3522: PPUSH
3523: CALL_OW 257
3527: PUSH
3528: LD_INT 12
3530: DOUBLE
3531: EQUAL
3532: IFTRUE 3536
3534: GO 3546
3536: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3537: LD_INT 2
3539: PPUSH
3540: CALL 471 0 1
3544: GO 3649
3546: LD_INT 15
3548: DOUBLE
3549: EQUAL
3550: IFTRUE 3554
3552: GO 3564
3554: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3555: LD_INT 5
3557: PPUSH
3558: CALL 471 0 1
3562: GO 3649
3564: LD_INT 17
3566: DOUBLE
3567: EQUAL
3568: IFTRUE 3572
3570: GO 3582
3572: POP
// AddPoints ( 30 ) ; class_soldier :
3573: LD_INT 30
3575: PPUSH
3576: CALL 471 0 1
3580: GO 3649
3582: LD_INT 1
3584: DOUBLE
3585: EQUAL
3586: IFTRUE 3590
3588: GO 3600
3590: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3591: LD_INT 50
3593: PPUSH
3594: CALL 471 0 1
3598: GO 3649
3600: LD_INT 9
3602: DOUBLE
3603: EQUAL
3604: IFTRUE 3620
3606: LD_INT 5
3608: DOUBLE
3609: EQUAL
3610: IFTRUE 3620
3612: LD_INT 8
3614: DOUBLE
3615: EQUAL
3616: IFTRUE 3620
3618: GO 3630
3620: POP
// AddPoints ( 75 ) ; class_mechanic :
3621: LD_INT 75
3623: PPUSH
3624: CALL 471 0 1
3628: GO 3649
3630: LD_INT 3
3632: DOUBLE
3633: EQUAL
3634: IFTRUE 3638
3636: GO 3648
3638: POP
// AddPoints ( 60 ) ; end ;
3639: LD_INT 60
3641: PPUSH
3642: CALL 471 0 1
3646: GO 3649
3648: POP
// end ; unit_vehicle :
3649: GO 3806
3651: LD_INT 2
3653: DOUBLE
3654: EQUAL
3655: IFTRUE 3659
3657: GO 3805
3659: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3660: LD_VAR 0 1
3664: PPUSH
3665: CALL_OW 265
3669: PUSH
3670: LD_INT 12
3672: DOUBLE
3673: EQUAL
3674: IFTRUE 3690
3676: LD_INT 1
3678: DOUBLE
3679: EQUAL
3680: IFTRUE 3690
3682: LD_INT 11
3684: DOUBLE
3685: EQUAL
3686: IFTRUE 3690
3688: GO 3700
3690: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3691: LD_INT 100
3693: PPUSH
3694: CALL 471 0 1
3698: GO 3803
3700: LD_INT 13
3702: DOUBLE
3703: EQUAL
3704: IFTRUE 3738
3706: LD_INT 14
3708: DOUBLE
3709: EQUAL
3710: IFTRUE 3738
3712: LD_INT 2
3714: DOUBLE
3715: EQUAL
3716: IFTRUE 3738
3718: LD_INT 3
3720: DOUBLE
3721: EQUAL
3722: IFTRUE 3738
3724: LD_INT 21
3726: DOUBLE
3727: EQUAL
3728: IFTRUE 3738
3730: LD_INT 22
3732: DOUBLE
3733: EQUAL
3734: IFTRUE 3738
3736: GO 3748
3738: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3739: LD_INT 250
3741: PPUSH
3742: CALL 471 0 1
3746: GO 3803
3748: LD_INT 4
3750: DOUBLE
3751: EQUAL
3752: IFTRUE 3774
3754: LD_INT 5
3756: DOUBLE
3757: EQUAL
3758: IFTRUE 3774
3760: LD_INT 23
3762: DOUBLE
3763: EQUAL
3764: IFTRUE 3774
3766: LD_INT 24
3768: DOUBLE
3769: EQUAL
3770: IFTRUE 3774
3772: GO 3784
3774: POP
// AddPoints ( 500 ) ; 25 :
3775: LD_INT 500
3777: PPUSH
3778: CALL 471 0 1
3782: GO 3803
3784: LD_INT 25
3786: DOUBLE
3787: EQUAL
3788: IFTRUE 3792
3790: GO 3802
3792: POP
// AddPoints ( 1250 ) ; end ;
3793: LD_INT 1250
3795: PPUSH
3796: CALL 471 0 1
3800: GO 3803
3802: POP
// end ; end ;
3803: GO 3806
3805: POP
// end ; end ;
3806: PPOPN 1
3808: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 266
3818: PUSH
3819: LD_INT 0
3821: EQUAL
3822: IFFALSE 3872
// begin base_x := GetX ( b ) ;
3824: LD_ADDR_EXP 9
3828: PUSH
3829: LD_VAR 0 1
3833: PPUSH
3834: CALL_OW 250
3838: ST_TO_ADDR
// base_y := GetY ( b ) ;
3839: LD_ADDR_EXP 10
3843: PUSH
3844: LD_VAR 0 1
3848: PPUSH
3849: CALL_OW 251
3853: ST_TO_ADDR
// base := b ;
3854: LD_ADDR_EXP 11
3858: PUSH
3859: LD_VAR 0 1
3863: ST_TO_ADDR
// game_started := true ;
3864: LD_ADDR_EXP 7
3868: PUSH
3869: LD_INT 1
3871: ST_TO_ADDR
// end ; end ;
3872: PPOPN 1
3874: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3875: LD_VAR 0 1
3879: PPUSH
3880: CALL_OW 255
3884: PUSH
3885: LD_OWVAR 2
3889: EQUAL
3890: IFFALSE 3894
// exit ;
3892: GO 4047
// if GetType ( un ) = unit_vehicle then
3894: LD_VAR 0 1
3898: PPUSH
3899: CALL_OW 247
3903: PUSH
3904: LD_INT 2
3906: EQUAL
3907: IFFALSE 3962
// begin KillUnit ( un ) ;
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 248
3927: PUSH
3928: LD_INT 2
3930: EQUAL
3931: IFTRUE 3951
3933: PUSH
3934: LD_VAR 0 1
3938: PPUSH
3939: CALL_OW 264
3943: PUSH
3944: LD_INT 49
3946: PUSH
3947: EMPTY
3948: LIST
3949: IN
3950: OR
3951: IFFALSE 3962
// ExplodeVehicle ( un ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL 2192 0 1
// end ; if GetType ( un ) = unit_human then
3962: LD_VAR 0 1
3966: PPUSH
3967: CALL_OW 247
3971: PUSH
3972: LD_INT 1
3974: EQUAL
3975: IFFALSE 4047
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3977: LD_VAR 0 1
3981: PPUSH
3982: CALL_OW 248
3986: PUSH
3987: LD_INT 2
3989: EQUAL
3990: IFFALSE 4008
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: IFTRUE 4036
4010: PUSH
4011: LD_VAR 0 1
4015: PPUSH
4016: CALL_OW 248
4020: PUSH
4021: LD_INT 0
4023: PUSH
4024: LD_INT 1
4026: PUSH
4027: LD_INT 3
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: IN
4035: OR
4036: IFFALSE 4047
// KillUnit ( un ) ;
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 66
// end ; end ;
4047: PPOPN 1
4049: END
// every 0 0$1 do
4050: GO 4052
4052: DISABLE
// begin enable ;
4053: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4054: LD_INT 4
4056: PPUSH
4057: LD_INT 5
4059: PPUSH
4060: LD_INT 22
4062: PUSH
4063: LD_OWVAR 2
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 513
// end ;
4076: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4077: LD_EXP 7
4081: IFFALSE 4119
4083: PUSH
4084: LD_INT 22
4086: PUSH
4087: LD_OWVAR 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 21
4098: PUSH
4099: LD_INT 1
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PPUSH
4110: CALL_OW 69
4114: PUSH
4115: LD_INT 0
4117: EQUAL
4118: AND
4119: IFFALSE 4131
4121: GO 4123
4123: DISABLE
// YouLost ( die ) ;
4124: LD_STRING die
4126: PPUSH
4127: CALL_OW 104
4131: END
// every 0 0$21 trigger tick <= 15 15$00 do
4132: LD_OWVAR 1
4136: PUSH
4137: LD_INT 31500
4139: LESSEQUAL
4140: IFFALSE 4167
4142: GO 4144
4144: DISABLE
// begin enable ;
4145: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 5
4151: PPUSH
4152: CALL_OW 12
4156: PPUSH
4157: LD_INT 3
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: CALL_OW 55
// end ;
4167: END
// every 0 0$51 trigger tick > 15 15$00 do
4168: LD_OWVAR 1
4172: PUSH
4173: LD_INT 31500
4175: GREATER
4176: IFFALSE 4223
4178: GO 4180
4180: DISABLE
// begin enable ;
4181: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4182: LD_INT 22
4184: PUSH
4185: LD_INT 7
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PPUSH
4192: CALL_OW 69
4196: PUSH
4197: LD_INT 0
4199: EQUAL
4200: IFFALSE 4223
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4202: LD_INT 1
4204: PPUSH
4205: LD_INT 5
4207: PPUSH
4208: CALL_OW 12
4212: PPUSH
4213: LD_INT 3
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: CALL_OW 55
// end ;
4223: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4224: LD_VAR 0 1
4228: PPUSH
4229: LD_INT 3
4231: PPUSH
4232: CALL_OW 308
4236: IFFALSE 4247
// KillUnit ( building ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: CALL_OW 66
// end ;
4247: PPOPN 2
4249: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_VAR 0 2
4259: PPUSH
4260: LD_VAR 0 3
4264: PPUSH
4265: CALL 27103 0 3
// end ;
4269: PPOPN 3
4271: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4272: LD_VAR 0 1
4276: PPUSH
4277: LD_VAR 0 2
4281: PPUSH
4282: CALL 27127 0 2
// end ;
4286: PPOPN 2
4288: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4289: LD_VAR 0 1
4293: PPUSH
4294: CALL 27111 0 1
// end ; end_of_file
4298: PPOPN 1
4300: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4301: LD_INT 0
4303: PPUSH
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
4308: PPUSH
4309: PPUSH
4310: PPUSH
4311: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4312: LD_ADDR_VAR 0 7
4316: PUSH
4317: LD_INT 1
4319: PUSH
4320: LD_INT 2
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: ST_TO_ADDR
// uc_side := 7 ;
4327: LD_ADDR_OWVAR 20
4331: PUSH
4332: LD_INT 7
4334: ST_TO_ADDR
// l := 0 ;
4335: LD_ADDR_VAR 0 9
4339: PUSH
4340: LD_INT 0
4342: ST_TO_ADDR
// case num of 1 :
4343: LD_VAR 0 1
4347: PUSH
4348: LD_INT 1
4350: DOUBLE
4351: EQUAL
4352: IFTRUE 4356
4354: GO 4375
4356: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4357: LD_ADDR_VAR 0 2
4361: PUSH
4362: LD_INT 12
4364: PPUSH
4365: LD_INT 1
4367: PPUSH
4368: CALL 6704 0 2
4372: ST_TO_ADDR
4373: GO 6513
4375: LD_INT 2
4377: DOUBLE
4378: EQUAL
4379: IFTRUE 4383
4381: GO 4402
4383: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4384: LD_ADDR_VAR 0 2
4388: PUSH
4389: LD_INT 12
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL 6775 0 2
4399: ST_TO_ADDR
4400: GO 6513
4402: LD_INT 3
4404: DOUBLE
4405: EQUAL
4406: IFTRUE 4410
4408: GO 4429
4410: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4411: LD_ADDR_VAR 0 2
4415: PUSH
4416: LD_INT 12
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL 6846 0 2
4426: ST_TO_ADDR
4427: GO 6513
4429: LD_INT 4
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 4456
4437: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: LD_INT 7
4445: PPUSH
4446: LD_INT 1
4448: PPUSH
4449: CALL 6925 0 2
4453: ST_TO_ADDR
4454: GO 6513
4456: LD_INT 5
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4483
4464: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4465: LD_ADDR_VAR 0 2
4469: PUSH
4470: LD_INT 7
4472: PPUSH
4473: LD_INT 1
4475: PPUSH
4476: CALL 7321 0 2
4480: ST_TO_ADDR
4481: GO 6513
4483: LD_INT 6
4485: DOUBLE
4486: EQUAL
4487: IFTRUE 4491
4489: GO 4510
4491: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_INT 6
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: CALL 7741 0 2
4507: ST_TO_ADDR
4508: GO 6513
4510: LD_INT 7
4512: DOUBLE
4513: EQUAL
4514: IFTRUE 4518
4516: GO 4537
4518: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4519: LD_ADDR_VAR 0 2
4523: PUSH
4524: LD_INT 15
4526: PPUSH
4527: LD_INT 1
4529: PPUSH
4530: CALL 8161 0 2
4534: ST_TO_ADDR
4535: GO 6513
4537: LD_INT 8
4539: DOUBLE
4540: EQUAL
4541: IFTRUE 4545
4543: GO 4564
4545: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4546: LD_ADDR_VAR 0 2
4550: PUSH
4551: LD_INT 7
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: CALL 8262 0 2
4561: ST_TO_ADDR
4562: GO 6513
4564: LD_INT 9
4566: DOUBLE
4567: EQUAL
4568: IFTRUE 4572
4570: GO 4603
4572: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4573: LD_ADDR_VAR 0 2
4577: PUSH
4578: LD_INT 4
4580: PPUSH
4581: LD_INT 1
4583: PPUSH
4584: CALL 8262 0 2
4588: PUSH
4589: LD_INT 7
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: CALL 7321 0 2
4599: ADD
4600: ST_TO_ADDR
4601: GO 6513
4603: LD_INT 10
4605: DOUBLE
4606: EQUAL
4607: IFTRUE 4611
4609: GO 4642
4611: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4612: LD_ADDR_VAR 0 2
4616: PUSH
4617: LD_INT 9
4619: PPUSH
4620: LD_INT 1
4622: PPUSH
4623: CALL 8161 0 2
4627: PUSH
4628: LD_INT 14
4630: PPUSH
4631: LD_INT 1
4633: PPUSH
4634: CALL 6846 0 2
4638: ADD
4639: ST_TO_ADDR
4640: GO 6513
4642: LD_INT 11
4644: DOUBLE
4645: EQUAL
4646: IFTRUE 4698
4648: LD_INT 21
4650: DOUBLE
4651: EQUAL
4652: IFTRUE 4698
4654: LD_INT 31
4656: DOUBLE
4657: EQUAL
4658: IFTRUE 4698
4660: LD_INT 41
4662: DOUBLE
4663: EQUAL
4664: IFTRUE 4698
4666: LD_INT 51
4668: DOUBLE
4669: EQUAL
4670: IFTRUE 4698
4672: LD_INT 61
4674: DOUBLE
4675: EQUAL
4676: IFTRUE 4698
4678: LD_INT 71
4680: DOUBLE
4681: EQUAL
4682: IFTRUE 4698
4684: LD_INT 81
4686: DOUBLE
4687: EQUAL
4688: IFTRUE 4698
4690: LD_INT 91
4692: DOUBLE
4693: EQUAL
4694: IFTRUE 4698
4696: GO 4807
4698: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4699: LD_ADDR_VAR 0 2
4703: PUSH
4704: LD_INT 20
4706: PUSH
4707: LD_INT 30
4709: PUSH
4710: LD_INT 40
4712: PUSH
4713: LD_INT 45
4715: PUSH
4716: LD_INT 50
4718: PUSH
4719: LD_INT 60
4721: PUSH
4722: LD_INT 70
4724: PUSH
4725: LD_INT 80
4727: PUSH
4728: LD_INT 100
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: LD_VAR 0 1
4746: PUSH
4747: LD_INT 10
4749: DIV
4750: ARRAY
4751: PPUSH
4752: LD_INT 2
4754: PUSH
4755: LD_INT 3
4757: PUSH
4758: LD_INT 4
4760: PUSH
4761: LD_INT 5
4763: PUSH
4764: LD_INT 6
4766: PUSH
4767: LD_INT 7
4769: PUSH
4770: LD_INT 8
4772: PUSH
4773: LD_INT 9
4775: PUSH
4776: LD_INT 10
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: LD_VAR 0 1
4794: PUSH
4795: LD_INT 10
4797: DIV
4798: ARRAY
4799: PPUSH
4800: CALL 6704 0 2
4804: ST_TO_ADDR
4805: GO 6513
4807: LD_INT 12
4809: DOUBLE
4810: EQUAL
4811: IFTRUE 4863
4813: LD_INT 22
4815: DOUBLE
4816: EQUAL
4817: IFTRUE 4863
4819: LD_INT 32
4821: DOUBLE
4822: EQUAL
4823: IFTRUE 4863
4825: LD_INT 42
4827: DOUBLE
4828: EQUAL
4829: IFTRUE 4863
4831: LD_INT 52
4833: DOUBLE
4834: EQUAL
4835: IFTRUE 4863
4837: LD_INT 62
4839: DOUBLE
4840: EQUAL
4841: IFTRUE 4863
4843: LD_INT 72
4845: DOUBLE
4846: EQUAL
4847: IFTRUE 4863
4849: LD_INT 82
4851: DOUBLE
4852: EQUAL
4853: IFTRUE 4863
4855: LD_INT 92
4857: DOUBLE
4858: EQUAL
4859: IFTRUE 4863
4861: GO 4972
4863: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4864: LD_ADDR_VAR 0 2
4868: PUSH
4869: LD_INT 16
4871: PUSH
4872: LD_INT 21
4874: PUSH
4875: LD_INT 28
4877: PUSH
4878: LD_INT 33
4880: PUSH
4881: LD_INT 39
4883: PUSH
4884: LD_INT 46
4886: PUSH
4887: LD_INT 56
4889: PUSH
4890: LD_INT 66
4892: PUSH
4893: LD_INT 80
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: PUSH
4907: LD_VAR 0 1
4911: PUSH
4912: LD_INT 10
4914: DIV
4915: ARRAY
4916: PPUSH
4917: LD_INT 2
4919: PUSH
4920: LD_INT 3
4922: PUSH
4923: LD_INT 4
4925: PUSH
4926: LD_INT 5
4928: PUSH
4929: LD_INT 6
4931: PUSH
4932: LD_INT 7
4934: PUSH
4935: LD_INT 8
4937: PUSH
4938: LD_INT 9
4940: PUSH
4941: LD_INT 10
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: PUSH
4955: LD_VAR 0 1
4959: PUSH
4960: LD_INT 10
4962: DIV
4963: ARRAY
4964: PPUSH
4965: CALL 6775 0 2
4969: ST_TO_ADDR
4970: GO 6513
4972: LD_INT 13
4974: DOUBLE
4975: EQUAL
4976: IFTRUE 5028
4978: LD_INT 23
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 5028
4984: LD_INT 33
4986: DOUBLE
4987: EQUAL
4988: IFTRUE 5028
4990: LD_INT 43
4992: DOUBLE
4993: EQUAL
4994: IFTRUE 5028
4996: LD_INT 53
4998: DOUBLE
4999: EQUAL
5000: IFTRUE 5028
5002: LD_INT 63
5004: DOUBLE
5005: EQUAL
5006: IFTRUE 5028
5008: LD_INT 73
5010: DOUBLE
5011: EQUAL
5012: IFTRUE 5028
5014: LD_INT 83
5016: DOUBLE
5017: EQUAL
5018: IFTRUE 5028
5020: LD_INT 93
5022: DOUBLE
5023: EQUAL
5024: IFTRUE 5028
5026: GO 5137
5028: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5029: LD_ADDR_VAR 0 2
5033: PUSH
5034: LD_INT 14
5036: PUSH
5037: LD_INT 18
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 27
5045: PUSH
5046: LD_INT 33
5048: PUSH
5049: LD_INT 39
5051: PUSH
5052: LD_INT 44
5054: PUSH
5055: LD_INT 57
5057: PUSH
5058: LD_INT 65
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: PUSH
5072: LD_VAR 0 1
5076: PUSH
5077: LD_INT 10
5079: DIV
5080: ARRAY
5081: PPUSH
5082: LD_INT 2
5084: PUSH
5085: LD_INT 3
5087: PUSH
5088: LD_INT 4
5090: PUSH
5091: LD_INT 5
5093: PUSH
5094: LD_INT 6
5096: PUSH
5097: LD_INT 7
5099: PUSH
5100: LD_INT 8
5102: PUSH
5103: LD_INT 9
5105: PUSH
5106: LD_INT 10
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: PUSH
5120: LD_VAR 0 1
5124: PUSH
5125: LD_INT 10
5127: DIV
5128: ARRAY
5129: PPUSH
5130: CALL 6846 0 2
5134: ST_TO_ADDR
5135: GO 6513
5137: LD_INT 14
5139: DOUBLE
5140: EQUAL
5141: IFTRUE 5193
5143: LD_INT 24
5145: DOUBLE
5146: EQUAL
5147: IFTRUE 5193
5149: LD_INT 34
5151: DOUBLE
5152: EQUAL
5153: IFTRUE 5193
5155: LD_INT 44
5157: DOUBLE
5158: EQUAL
5159: IFTRUE 5193
5161: LD_INT 54
5163: DOUBLE
5164: EQUAL
5165: IFTRUE 5193
5167: LD_INT 64
5169: DOUBLE
5170: EQUAL
5171: IFTRUE 5193
5173: LD_INT 74
5175: DOUBLE
5176: EQUAL
5177: IFTRUE 5193
5179: LD_INT 84
5181: DOUBLE
5182: EQUAL
5183: IFTRUE 5193
5185: LD_INT 94
5187: DOUBLE
5188: EQUAL
5189: IFTRUE 5193
5191: GO 5302
5193: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5194: LD_ADDR_VAR 0 2
5198: PUSH
5199: LD_INT 9
5201: PUSH
5202: LD_INT 15
5204: PUSH
5205: LD_INT 22
5207: PUSH
5208: LD_INT 30
5210: PUSH
5211: LD_INT 39
5213: PUSH
5214: LD_INT 45
5216: PUSH
5217: LD_INT 56
5219: PUSH
5220: LD_INT 60
5222: PUSH
5223: LD_INT 65
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: PUSH
5237: LD_VAR 0 1
5241: PUSH
5242: LD_INT 10
5244: DIV
5245: ARRAY
5246: PPUSH
5247: LD_INT 2
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: LD_INT 4
5255: PUSH
5256: LD_INT 5
5258: PUSH
5259: LD_INT 6
5261: PUSH
5262: LD_INT 7
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: PUSH
5285: LD_VAR 0 1
5289: PUSH
5290: LD_INT 10
5292: DIV
5293: ARRAY
5294: PPUSH
5295: CALL 6925 0 2
5299: ST_TO_ADDR
5300: GO 6513
5302: LD_INT 15
5304: DOUBLE
5305: EQUAL
5306: IFTRUE 5358
5308: LD_INT 25
5310: DOUBLE
5311: EQUAL
5312: IFTRUE 5358
5314: LD_INT 35
5316: DOUBLE
5317: EQUAL
5318: IFTRUE 5358
5320: LD_INT 45
5322: DOUBLE
5323: EQUAL
5324: IFTRUE 5358
5326: LD_INT 55
5328: DOUBLE
5329: EQUAL
5330: IFTRUE 5358
5332: LD_INT 65
5334: DOUBLE
5335: EQUAL
5336: IFTRUE 5358
5338: LD_INT 75
5340: DOUBLE
5341: EQUAL
5342: IFTRUE 5358
5344: LD_INT 85
5346: DOUBLE
5347: EQUAL
5348: IFTRUE 5358
5350: LD_INT 95
5352: DOUBLE
5353: EQUAL
5354: IFTRUE 5358
5356: GO 5467
5358: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5359: LD_ADDR_VAR 0 2
5363: PUSH
5364: LD_INT 6
5366: PUSH
5367: LD_INT 11
5369: PUSH
5370: LD_INT 15
5372: PUSH
5373: LD_INT 20
5375: PUSH
5376: LD_INT 25
5378: PUSH
5379: LD_INT 30
5381: PUSH
5382: LD_INT 35
5384: PUSH
5385: LD_INT 40
5387: PUSH
5388: LD_INT 45
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: PUSH
5402: LD_VAR 0 1
5406: PUSH
5407: LD_INT 10
5409: DIV
5410: ARRAY
5411: PPUSH
5412: LD_INT 2
5414: PUSH
5415: LD_INT 3
5417: PUSH
5418: LD_INT 4
5420: PUSH
5421: LD_INT 5
5423: PUSH
5424: LD_INT 6
5426: PUSH
5427: LD_INT 7
5429: PUSH
5430: LD_INT 8
5432: PUSH
5433: LD_INT 9
5435: PUSH
5436: LD_INT 10
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_VAR 0 1
5454: PUSH
5455: LD_INT 10
5457: DIV
5458: ARRAY
5459: PPUSH
5460: CALL 7321 0 2
5464: ST_TO_ADDR
5465: GO 6513
5467: LD_INT 16
5469: DOUBLE
5470: EQUAL
5471: IFTRUE 5523
5473: LD_INT 26
5475: DOUBLE
5476: EQUAL
5477: IFTRUE 5523
5479: LD_INT 36
5481: DOUBLE
5482: EQUAL
5483: IFTRUE 5523
5485: LD_INT 46
5487: DOUBLE
5488: EQUAL
5489: IFTRUE 5523
5491: LD_INT 56
5493: DOUBLE
5494: EQUAL
5495: IFTRUE 5523
5497: LD_INT 66
5499: DOUBLE
5500: EQUAL
5501: IFTRUE 5523
5503: LD_INT 76
5505: DOUBLE
5506: EQUAL
5507: IFTRUE 5523
5509: LD_INT 86
5511: DOUBLE
5512: EQUAL
5513: IFTRUE 5523
5515: LD_INT 96
5517: DOUBLE
5518: EQUAL
5519: IFTRUE 5523
5521: GO 5632
5523: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5524: LD_ADDR_VAR 0 2
5528: PUSH
5529: LD_INT 9
5531: PUSH
5532: LD_INT 12
5534: PUSH
5535: LD_INT 15
5537: PUSH
5538: LD_INT 18
5540: PUSH
5541: LD_INT 21
5543: PUSH
5544: LD_INT 24
5546: PUSH
5547: LD_INT 27
5549: PUSH
5550: LD_INT 30
5552: PUSH
5553: LD_INT 33
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_VAR 0 1
5571: PUSH
5572: LD_INT 10
5574: DIV
5575: ARRAY
5576: PPUSH
5577: LD_INT 2
5579: PUSH
5580: LD_INT 3
5582: PUSH
5583: LD_INT 4
5585: PUSH
5586: LD_INT 5
5588: PUSH
5589: LD_INT 6
5591: PUSH
5592: LD_INT 7
5594: PUSH
5595: LD_INT 8
5597: PUSH
5598: LD_INT 9
5600: PUSH
5601: LD_INT 10
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: PUSH
5615: LD_VAR 0 1
5619: PUSH
5620: LD_INT 10
5622: DIV
5623: ARRAY
5624: PPUSH
5625: CALL 7741 0 2
5629: ST_TO_ADDR
5630: GO 6513
5632: LD_INT 17
5634: DOUBLE
5635: EQUAL
5636: IFTRUE 5688
5638: LD_INT 27
5640: DOUBLE
5641: EQUAL
5642: IFTRUE 5688
5644: LD_INT 37
5646: DOUBLE
5647: EQUAL
5648: IFTRUE 5688
5650: LD_INT 47
5652: DOUBLE
5653: EQUAL
5654: IFTRUE 5688
5656: LD_INT 57
5658: DOUBLE
5659: EQUAL
5660: IFTRUE 5688
5662: LD_INT 67
5664: DOUBLE
5665: EQUAL
5666: IFTRUE 5688
5668: LD_INT 77
5670: DOUBLE
5671: EQUAL
5672: IFTRUE 5688
5674: LD_INT 87
5676: DOUBLE
5677: EQUAL
5678: IFTRUE 5688
5680: LD_INT 97
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5797
5688: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5689: LD_ADDR_VAR 0 2
5693: PUSH
5694: LD_INT 14
5696: PUSH
5697: LD_INT 16
5699: PUSH
5700: LD_INT 18
5702: PUSH
5703: LD_INT 22
5705: PUSH
5706: LD_INT 24
5708: PUSH
5709: LD_INT 26
5711: PUSH
5712: LD_INT 28
5714: PUSH
5715: LD_INT 32
5717: PUSH
5718: LD_INT 35
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: PUSH
5732: LD_VAR 0 1
5736: PUSH
5737: LD_INT 10
5739: DIV
5740: ARRAY
5741: PPUSH
5742: LD_INT 2
5744: PUSH
5745: LD_INT 3
5747: PUSH
5748: LD_INT 4
5750: PUSH
5751: LD_INT 5
5753: PUSH
5754: LD_INT 6
5756: PUSH
5757: LD_INT 7
5759: PUSH
5760: LD_INT 8
5762: PUSH
5763: LD_INT 9
5765: PUSH
5766: LD_INT 10
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: PUSH
5780: LD_VAR 0 1
5784: PUSH
5785: LD_INT 10
5787: DIV
5788: ARRAY
5789: PPUSH
5790: CALL 8161 0 2
5794: ST_TO_ADDR
5795: GO 6513
5797: LD_INT 18
5799: DOUBLE
5800: EQUAL
5801: IFTRUE 5853
5803: LD_INT 28
5805: DOUBLE
5806: EQUAL
5807: IFTRUE 5853
5809: LD_INT 38
5811: DOUBLE
5812: EQUAL
5813: IFTRUE 5853
5815: LD_INT 48
5817: DOUBLE
5818: EQUAL
5819: IFTRUE 5853
5821: LD_INT 58
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5853
5827: LD_INT 68
5829: DOUBLE
5830: EQUAL
5831: IFTRUE 5853
5833: LD_INT 78
5835: DOUBLE
5836: EQUAL
5837: IFTRUE 5853
5839: LD_INT 88
5841: DOUBLE
5842: EQUAL
5843: IFTRUE 5853
5845: LD_INT 98
5847: DOUBLE
5848: EQUAL
5849: IFTRUE 5853
5851: GO 5962
5853: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5854: LD_ADDR_VAR 0 2
5858: PUSH
5859: LD_INT 9
5861: PUSH
5862: LD_INT 12
5864: PUSH
5865: LD_INT 15
5867: PUSH
5868: LD_INT 18
5870: PUSH
5871: LD_INT 21
5873: PUSH
5874: LD_INT 24
5876: PUSH
5877: LD_INT 27
5879: PUSH
5880: LD_INT 30
5882: PUSH
5883: LD_INT 33
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PUSH
5897: LD_VAR 0 1
5901: PUSH
5902: LD_INT 10
5904: DIV
5905: ARRAY
5906: PPUSH
5907: LD_INT 2
5909: PUSH
5910: LD_INT 3
5912: PUSH
5913: LD_INT 4
5915: PUSH
5916: LD_INT 5
5918: PUSH
5919: LD_INT 6
5921: PUSH
5922: LD_INT 7
5924: PUSH
5925: LD_INT 8
5927: PUSH
5928: LD_INT 9
5930: PUSH
5931: LD_INT 10
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: PUSH
5945: LD_VAR 0 1
5949: PUSH
5950: LD_INT 10
5952: DIV
5953: ARRAY
5954: PPUSH
5955: CALL 8262 0 2
5959: ST_TO_ADDR
5960: GO 6513
5962: LD_INT 19
5964: DOUBLE
5965: EQUAL
5966: IFTRUE 6018
5968: LD_INT 29
5970: DOUBLE
5971: EQUAL
5972: IFTRUE 6018
5974: LD_INT 39
5976: DOUBLE
5977: EQUAL
5978: IFTRUE 6018
5980: LD_INT 49
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 6018
5986: LD_INT 59
5988: DOUBLE
5989: EQUAL
5990: IFTRUE 6018
5992: LD_INT 69
5994: DOUBLE
5995: EQUAL
5996: IFTRUE 6018
5998: LD_INT 79
6000: DOUBLE
6001: EQUAL
6002: IFTRUE 6018
6004: LD_INT 89
6006: DOUBLE
6007: EQUAL
6008: IFTRUE 6018
6010: LD_INT 99
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6229
6018: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
6019: LD_ADDR_VAR 0 2
6023: PUSH
6024: LD_INT 4
6026: PUSH
6027: LD_INT 7
6029: PUSH
6030: LD_INT 10
6032: PUSH
6033: LD_INT 13
6035: PUSH
6036: LD_INT 14
6038: PUSH
6039: LD_INT 17
6041: PUSH
6042: LD_INT 19
6044: PUSH
6045: LD_INT 21
6047: PUSH
6048: LD_INT 23
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PUSH
6062: LD_VAR 0 1
6066: PUSH
6067: LD_INT 10
6069: DIV
6070: ARRAY
6071: PPUSH
6072: LD_INT 2
6074: PUSH
6075: LD_INT 3
6077: PUSH
6078: LD_INT 4
6080: PUSH
6081: LD_INT 5
6083: PUSH
6084: LD_INT 6
6086: PUSH
6087: LD_INT 7
6089: PUSH
6090: LD_INT 8
6092: PUSH
6093: LD_INT 9
6095: PUSH
6096: LD_INT 10
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_VAR 0 1
6114: PUSH
6115: LD_INT 10
6117: DIV
6118: ARRAY
6119: PPUSH
6120: CALL 8262 0 2
6124: PUSH
6125: LD_INT 4
6127: PUSH
6128: LD_INT 7
6130: PUSH
6131: LD_INT 10
6133: PUSH
6134: LD_INT 13
6136: PUSH
6137: LD_INT 14
6139: PUSH
6140: LD_INT 17
6142: PUSH
6143: LD_INT 19
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 25
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_VAR 0 1
6167: PUSH
6168: LD_INT 10
6170: DIV
6171: ARRAY
6172: PPUSH
6173: LD_INT 2
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: LD_INT 4
6181: PUSH
6182: LD_INT 5
6184: PUSH
6185: LD_INT 6
6187: PUSH
6188: LD_INT 7
6190: PUSH
6191: LD_INT 8
6193: PUSH
6194: LD_INT 9
6196: PUSH
6197: LD_INT 10
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_VAR 0 1
6215: PUSH
6216: LD_INT 10
6218: DIV
6219: ARRAY
6220: PPUSH
6221: CALL 7321 0 2
6225: ADD
6226: ST_TO_ADDR
6227: GO 6513
6229: LD_INT 20
6231: DOUBLE
6232: EQUAL
6233: IFTRUE 6285
6235: LD_INT 30
6237: DOUBLE
6238: EQUAL
6239: IFTRUE 6285
6241: LD_INT 40
6243: DOUBLE
6244: EQUAL
6245: IFTRUE 6285
6247: LD_INT 50
6249: DOUBLE
6250: EQUAL
6251: IFTRUE 6285
6253: LD_INT 60
6255: DOUBLE
6256: EQUAL
6257: IFTRUE 6285
6259: LD_INT 70
6261: DOUBLE
6262: EQUAL
6263: IFTRUE 6285
6265: LD_INT 80
6267: DOUBLE
6268: EQUAL
6269: IFTRUE 6285
6271: LD_INT 90
6273: DOUBLE
6274: EQUAL
6275: IFTRUE 6285
6277: LD_INT 100
6279: DOUBLE
6280: EQUAL
6281: IFTRUE 6285
6283: GO 6512
6285: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6286: LD_ADDR_VAR 0 2
6290: PUSH
6291: LD_INT 4
6293: PUSH
6294: LD_INT 7
6296: PUSH
6297: LD_INT 10
6299: PUSH
6300: LD_INT 13
6302: PUSH
6303: LD_INT 14
6305: PUSH
6306: LD_INT 17
6308: PUSH
6309: LD_INT 19
6311: PUSH
6312: LD_INT 21
6314: PUSH
6315: LD_INT 23
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_VAR 0 1
6333: PUSH
6334: LD_INT 10
6336: DIVREAL
6337: PUSH
6338: LD_INT 1
6340: MINUS
6341: ARRAY
6342: PPUSH
6343: LD_INT 2
6345: PUSH
6346: LD_INT 3
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 5
6354: PUSH
6355: LD_INT 6
6357: PUSH
6358: LD_INT 7
6360: PUSH
6361: LD_INT 8
6363: PUSH
6364: LD_INT 9
6366: PUSH
6367: LD_INT 10
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: PUSH
6381: LD_VAR 0 1
6385: PUSH
6386: LD_INT 10
6388: DIVREAL
6389: PUSH
6390: LD_INT 1
6392: MINUS
6393: ARRAY
6394: PPUSH
6395: CALL 8161 0 2
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: LD_INT 7
6405: PUSH
6406: LD_INT 10
6408: PUSH
6409: LD_INT 13
6411: PUSH
6412: LD_INT 14
6414: PUSH
6415: LD_INT 17
6417: PUSH
6418: LD_INT 19
6420: PUSH
6421: LD_INT 22
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_VAR 0 1
6442: PUSH
6443: LD_INT 10
6445: DIVREAL
6446: PUSH
6447: LD_INT 1
6449: MINUS
6450: ARRAY
6451: PPUSH
6452: LD_INT 2
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: LD_INT 4
6460: PUSH
6461: LD_INT 5
6463: PUSH
6464: LD_INT 6
6466: PUSH
6467: LD_INT 7
6469: PUSH
6470: LD_INT 8
6472: PUSH
6473: LD_INT 9
6475: PUSH
6476: LD_INT 10
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: LD_VAR 0 1
6494: PUSH
6495: LD_INT 10
6497: DIVREAL
6498: PUSH
6499: LD_INT 1
6501: MINUS
6502: ARRAY
6503: PPUSH
6504: CALL 7741 0 2
6508: ADD
6509: ST_TO_ADDR
6510: GO 6513
6512: POP
// for i in result do
6513: LD_ADDR_VAR 0 3
6517: PUSH
6518: LD_VAR 0 2
6522: PUSH
6523: FOR_IN
6524: IFFALSE 6697
// begin a := rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 8
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if a = 1 then
6542: LD_VAR 0 8
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( i , 3 ) else
6552: LD_VAR 0 3
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( i , 5 ) ;
6566: LD_VAR 0 3
6570: PPUSH
6571: LD_INT 5
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6578: LD_VAR 0 3
6582: PPUSH
6583: LD_VAR 0 7
6587: PUSH
6588: LD_VAR 0 8
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// if GetControl ( i ) = control_manual then
6601: LD_VAR 0 3
6605: PPUSH
6606: CALL_OW 263
6610: PUSH
6611: LD_INT 1
6613: EQUAL
6614: IFFALSE 6660
// begin uc_nation := GetNation ( i ) ;
6616: LD_ADDR_OWVAR 21
6620: PUSH
6621: LD_VAR 0 3
6625: PPUSH
6626: CALL_OW 248
6630: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6631: LD_INT 0
6633: PPUSH
6634: LD_INT 3
6636: PPUSH
6637: LD_VAR 0 5
6641: PPUSH
6642: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6646: CALL_OW 44
6650: PPUSH
6651: LD_VAR 0 3
6655: PPUSH
6656: CALL_OW 52
// end ; l := l + 1 ;
6660: LD_ADDR_VAR 0 9
6664: PUSH
6665: LD_VAR 0 9
6669: PUSH
6670: LD_INT 1
6672: PLUS
6673: ST_TO_ADDR
// if l mod 10 = 0 then
6674: LD_VAR 0 9
6678: PUSH
6679: LD_INT 10
6681: MOD
6682: PUSH
6683: LD_INT 0
6685: EQUAL
6686: IFFALSE 6695
// Wait ( 0 0$02 ) ;
6688: LD_INT 70
6690: PPUSH
6691: CALL_OW 67
// end ;
6695: GO 6523
6697: POP
6698: POP
// end ;
6699: LD_VAR 0 2
6703: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6704: LD_INT 0
6706: PPUSH
6707: PPUSH
6708: PPUSH
// uc_nation := nation_nature ;
6709: LD_ADDR_OWVAR 21
6713: PUSH
6714: LD_INT 0
6716: ST_TO_ADDR
// for i = 1 to n do
6717: LD_ADDR_VAR 0 4
6721: PUSH
6722: DOUBLE
6723: LD_INT 1
6725: DEC
6726: ST_TO_ADDR
6727: LD_VAR 0 1
6731: PUSH
6732: FOR_TO
6733: IFFALSE 6768
// begin PrepareHuman ( false , class_apeman , skill ) ;
6735: LD_INT 0
6737: PPUSH
6738: LD_INT 12
6740: PPUSH
6741: LD_VAR 0 2
6745: PPUSH
6746: CALL_OW 380
// result := result ^ CreateHuman ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 3
6759: PUSH
6760: CALL_OW 44
6764: ADD
6765: ST_TO_ADDR
// end ;
6766: GO 6732
6768: POP
6769: POP
// end ;
6770: LD_VAR 0 3
6774: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6775: LD_INT 0
6777: PPUSH
6778: PPUSH
6779: PPUSH
// uc_nation := nation_nature ;
6780: LD_ADDR_OWVAR 21
6784: PUSH
6785: LD_INT 0
6787: ST_TO_ADDR
// for i = 1 to n do
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: DOUBLE
6794: LD_INT 1
6796: DEC
6797: ST_TO_ADDR
6798: LD_VAR 0 1
6802: PUSH
6803: FOR_TO
6804: IFFALSE 6839
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6806: LD_INT 0
6808: PPUSH
6809: LD_INT 15
6811: PPUSH
6812: LD_VAR 0 2
6816: PPUSH
6817: CALL_OW 380
// result := result ^ CreateHuman ;
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_VAR 0 3
6830: PUSH
6831: CALL_OW 44
6835: ADD
6836: ST_TO_ADDR
// end ;
6837: GO 6803
6839: POP
6840: POP
// end ;
6841: LD_VAR 0 3
6845: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6846: LD_INT 0
6848: PPUSH
6849: PPUSH
6850: PPUSH
// for i = 1 to n do
6851: LD_ADDR_VAR 0 4
6855: PUSH
6856: DOUBLE
6857: LD_INT 1
6859: DEC
6860: ST_TO_ADDR
6861: LD_VAR 0 1
6865: PUSH
6866: FOR_TO
6867: IFFALSE 6918
// begin uc_nation := rand ( 1 , 3 ) ;
6869: LD_ADDR_OWVAR 21
6873: PUSH
6874: LD_INT 1
6876: PPUSH
6877: LD_INT 3
6879: PPUSH
6880: CALL_OW 12
6884: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6885: LD_INT 0
6887: PPUSH
6888: LD_INT 1
6890: PPUSH
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 380
// result := result ^ CreateHuman ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_VAR 0 3
6909: PUSH
6910: CALL_OW 44
6914: ADD
6915: ST_TO_ADDR
// end ;
6916: GO 6866
6918: POP
6919: POP
// end ;
6920: LD_VAR 0 3
6924: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6925: LD_INT 0
6927: PPUSH
6928: PPUSH
6929: PPUSH
6930: PPUSH
6931: PPUSH
6932: PPUSH
6933: PPUSH
// for i = 1 to n do
6934: LD_ADDR_VAR 0 4
6938: PUSH
6939: DOUBLE
6940: LD_INT 1
6942: DEC
6943: ST_TO_ADDR
6944: LD_VAR 0 1
6948: PUSH
6949: FOR_TO
6950: IFFALSE 7314
// begin uc_nation := rand ( 1 , 3 ) ;
6952: LD_ADDR_OWVAR 21
6956: PUSH
6957: LD_INT 1
6959: PPUSH
6960: LD_INT 3
6962: PPUSH
6963: CALL_OW 12
6967: ST_TO_ADDR
// case uc_nation of 1 :
6968: LD_OWVAR 21
6972: PUSH
6973: LD_INT 1
6975: DOUBLE
6976: EQUAL
6977: IFTRUE 6981
6979: GO 7044
6981: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6982: LD_ADDR_VAR 0 6
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6997: LD_ADDR_VAR 0 7
7001: PUSH
7002: LD_INT 2
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7012: LD_ADDR_VAR 0 8
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: LD_INT 3
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7027: LD_ADDR_VAR 0 9
7031: PUSH
7032: LD_INT 1
7034: PUSH
7035: LD_INT 2
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: ST_TO_ADDR
// end ; 2 :
7042: GO 7179
7044: LD_INT 2
7046: DOUBLE
7047: EQUAL
7048: IFTRUE 7052
7050: GO 7115
7052: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7053: LD_ADDR_VAR 0 6
7057: PUSH
7058: LD_INT 12
7060: PUSH
7061: LD_INT 11
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7068: LD_ADDR_VAR 0 7
7072: PUSH
7073: LD_INT 23
7075: PUSH
7076: LD_INT 24
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7083: LD_ADDR_VAR 0 8
7087: PUSH
7088: LD_INT 1
7090: PUSH
7091: LD_INT 5
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7098: LD_ADDR_VAR 0 9
7102: PUSH
7103: LD_INT 1
7105: PUSH
7106: LD_INT 2
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: ST_TO_ADDR
// end ; 3 :
7113: GO 7179
7115: LD_INT 3
7117: DOUBLE
7118: EQUAL
7119: IFTRUE 7123
7121: GO 7178
7123: POP
// begin chassis := [ ru_medium_wheeled ] ;
7124: LD_ADDR_VAR 0 6
7128: PUSH
7129: LD_INT 21
7131: PUSH
7132: EMPTY
7133: LIST
7134: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7135: LD_ADDR_VAR 0 7
7139: PUSH
7140: LD_INT 42
7142: PUSH
7143: LD_INT 44
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7150: LD_ADDR_VAR 0 8
7154: PUSH
7155: LD_INT 1
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7165: LD_ADDR_VAR 0 9
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: ST_TO_ADDR
// end ; end ;
7176: GO 7179
7178: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7179: LD_ADDR_OWVAR 37
7183: PUSH
7184: LD_VAR 0 6
7188: PUSH
7189: LD_INT 1
7191: PPUSH
7192: LD_VAR 0 6
7196: PPUSH
7197: CALL_OW 12
7201: ARRAY
7202: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7203: LD_ADDR_OWVAR 39
7207: PUSH
7208: LD_VAR 0 9
7212: PUSH
7213: LD_INT 1
7215: PPUSH
7216: LD_VAR 0 9
7220: PPUSH
7221: CALL_OW 12
7225: ARRAY
7226: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7227: LD_ADDR_OWVAR 38
7231: PUSH
7232: LD_VAR 0 8
7236: PUSH
7237: LD_INT 1
7239: PPUSH
7240: LD_VAR 0 8
7244: PPUSH
7245: CALL_OW 12
7249: ARRAY
7250: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7251: LD_ADDR_OWVAR 40
7255: PUSH
7256: LD_VAR 0 7
7260: PUSH
7261: LD_INT 1
7263: PPUSH
7264: LD_VAR 0 7
7268: PPUSH
7269: CALL_OW 12
7273: ARRAY
7274: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7275: LD_ADDR_OWVAR 41
7279: PUSH
7280: LD_INT 100
7282: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: LD_VAR 0 3
7292: PPUSH
7293: LD_VAR 0 3
7297: PUSH
7298: LD_INT 1
7300: PLUS
7301: PPUSH
7302: CALL_OW 45
7306: PPUSH
7307: CALL_OW 2
7311: ST_TO_ADDR
// end ;
7312: GO 6949
7314: POP
7315: POP
// end ;
7316: LD_VAR 0 3
7320: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7321: LD_INT 0
7323: PPUSH
7324: PPUSH
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
// for i = 1 to n do
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: DOUBLE
7336: LD_INT 1
7338: DEC
7339: ST_TO_ADDR
7340: LD_VAR 0 1
7344: PUSH
7345: FOR_TO
7346: IFFALSE 7734
// begin uc_nation := rand ( 1 , 3 ) ;
7348: LD_ADDR_OWVAR 21
7352: PUSH
7353: LD_INT 1
7355: PPUSH
7356: LD_INT 3
7358: PPUSH
7359: CALL_OW 12
7363: ST_TO_ADDR
// case uc_nation of 1 :
7364: LD_OWVAR 21
7368: PUSH
7369: LD_INT 1
7371: DOUBLE
7372: EQUAL
7373: IFTRUE 7377
7375: GO 7448
7377: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_INT 2
7385: PUSH
7386: LD_INT 3
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_INT 4
7400: PUSH
7401: LD_INT 5
7403: PUSH
7404: LD_INT 9
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: LIST
7411: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7412: LD_ADDR_VAR 0 8
7416: PUSH
7417: LD_INT 1
7419: PUSH
7420: LD_INT 3
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7427: LD_ADDR_VAR 0 9
7431: PUSH
7432: LD_INT 1
7434: PUSH
7435: LD_INT 2
7437: PUSH
7438: LD_INT 3
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: ST_TO_ADDR
// end ; 2 :
7446: GO 7599
7448: LD_INT 2
7450: DOUBLE
7451: EQUAL
7452: IFTRUE 7456
7454: GO 7527
7456: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7457: LD_ADDR_VAR 0 6
7461: PUSH
7462: LD_INT 13
7464: PUSH
7465: LD_INT 14
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7472: LD_ADDR_VAR 0 7
7476: PUSH
7477: LD_INT 27
7479: PUSH
7480: LD_INT 26
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: LIST
7490: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7491: LD_ADDR_VAR 0 8
7495: PUSH
7496: LD_INT 1
7498: PUSH
7499: LD_INT 5
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7506: LD_ADDR_VAR 0 9
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 3
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: ST_TO_ADDR
// end ; 3 :
7525: GO 7599
7527: LD_INT 3
7529: DOUBLE
7530: EQUAL
7531: IFTRUE 7535
7533: GO 7598
7535: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7536: LD_ADDR_VAR 0 6
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_INT 21
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7551: LD_ADDR_VAR 0 7
7555: PUSH
7556: LD_INT 44
7558: PUSH
7559: LD_INT 43
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7566: LD_ADDR_VAR 0 8
7570: PUSH
7571: LD_INT 1
7573: PUSH
7574: LD_INT 3
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7581: LD_ADDR_VAR 0 9
7585: PUSH
7586: LD_INT 1
7588: PUSH
7589: LD_INT 3
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: ST_TO_ADDR
// end ; end ;
7596: GO 7599
7598: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7599: LD_ADDR_OWVAR 37
7603: PUSH
7604: LD_VAR 0 6
7608: PUSH
7609: LD_INT 1
7611: PPUSH
7612: LD_VAR 0 6
7616: PPUSH
7617: CALL_OW 12
7621: ARRAY
7622: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7623: LD_ADDR_OWVAR 39
7627: PUSH
7628: LD_VAR 0 9
7632: PUSH
7633: LD_INT 1
7635: PPUSH
7636: LD_VAR 0 9
7640: PPUSH
7641: CALL_OW 12
7645: ARRAY
7646: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7647: LD_ADDR_OWVAR 38
7651: PUSH
7652: LD_VAR 0 8
7656: PUSH
7657: LD_INT 1
7659: PPUSH
7660: LD_VAR 0 8
7664: PPUSH
7665: CALL_OW 12
7669: ARRAY
7670: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7671: LD_ADDR_OWVAR 40
7675: PUSH
7676: LD_VAR 0 7
7680: PUSH
7681: LD_INT 1
7683: PPUSH
7684: LD_VAR 0 7
7688: PPUSH
7689: CALL_OW 12
7693: ARRAY
7694: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7695: LD_ADDR_OWVAR 41
7699: PUSH
7700: LD_INT 100
7702: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7703: LD_ADDR_VAR 0 3
7707: PUSH
7708: LD_VAR 0 3
7712: PPUSH
7713: LD_VAR 0 3
7717: PUSH
7718: LD_INT 1
7720: PLUS
7721: PPUSH
7722: CALL_OW 45
7726: PPUSH
7727: CALL_OW 2
7731: ST_TO_ADDR
// end ;
7732: GO 7345
7734: POP
7735: POP
// end ;
7736: LD_VAR 0 3
7740: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7741: LD_INT 0
7743: PPUSH
7744: PPUSH
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
7749: PPUSH
// for i = 1 to n do
7750: LD_ADDR_VAR 0 4
7754: PUSH
7755: DOUBLE
7756: LD_INT 1
7758: DEC
7759: ST_TO_ADDR
7760: LD_VAR 0 1
7764: PUSH
7765: FOR_TO
7766: IFFALSE 8154
// begin uc_nation := rand ( 1 , 3 ) ;
7768: LD_ADDR_OWVAR 21
7772: PUSH
7773: LD_INT 1
7775: PPUSH
7776: LD_INT 3
7778: PPUSH
7779: CALL_OW 12
7783: ST_TO_ADDR
// case uc_nation of 1 :
7784: LD_OWVAR 21
7788: PUSH
7789: LD_INT 1
7791: DOUBLE
7792: EQUAL
7793: IFTRUE 7797
7795: GO 7864
7797: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7798: LD_ADDR_VAR 0 6
7802: PUSH
7803: LD_INT 4
7805: PUSH
7806: LD_INT 5
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7813: LD_ADDR_VAR 0 7
7817: PUSH
7818: LD_INT 6
7820: PUSH
7821: LD_INT 7
7823: PUSH
7824: LD_INT 9
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7832: LD_ADDR_VAR 0 8
7836: PUSH
7837: LD_INT 1
7839: PUSH
7840: LD_INT 3
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7847: LD_ADDR_VAR 0 9
7851: PUSH
7852: LD_INT 1
7854: PUSH
7855: LD_INT 3
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: ST_TO_ADDR
// end ; 2 :
7862: GO 8019
7864: LD_INT 2
7866: DOUBLE
7867: EQUAL
7868: IFTRUE 7872
7870: GO 7947
7872: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7873: LD_ADDR_VAR 0 6
7877: PUSH
7878: LD_INT 13
7880: PUSH
7881: LD_INT 14
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7888: LD_ADDR_VAR 0 7
7892: PUSH
7893: LD_INT 27
7895: PUSH
7896: LD_INT 26
7898: PUSH
7899: LD_INT 28
7901: PUSH
7902: LD_INT 29
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7911: LD_ADDR_VAR 0 8
7915: PUSH
7916: LD_INT 1
7918: PUSH
7919: LD_INT 5
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7926: LD_ADDR_VAR 0 9
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: LD_INT 2
7936: PUSH
7937: LD_INT 3
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: LIST
7944: ST_TO_ADDR
// end ; 3 :
7945: GO 8019
7947: LD_INT 3
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 8018
7955: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7956: LD_ADDR_VAR 0 6
7960: PUSH
7961: LD_INT 23
7963: PUSH
7964: LD_INT 24
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7971: LD_ADDR_VAR 0 7
7975: PUSH
7976: LD_INT 46
7978: PUSH
7979: LD_INT 45
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7986: LD_ADDR_VAR 0 8
7990: PUSH
7991: LD_INT 1
7993: PUSH
7994: LD_INT 3
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8001: LD_ADDR_VAR 0 9
8005: PUSH
8006: LD_INT 1
8008: PUSH
8009: LD_INT 3
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: ST_TO_ADDR
// end ; end ;
8016: GO 8019
8018: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8019: LD_ADDR_OWVAR 37
8023: PUSH
8024: LD_VAR 0 6
8028: PUSH
8029: LD_INT 1
8031: PPUSH
8032: LD_VAR 0 6
8036: PPUSH
8037: CALL_OW 12
8041: ARRAY
8042: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8043: LD_ADDR_OWVAR 39
8047: PUSH
8048: LD_VAR 0 9
8052: PUSH
8053: LD_INT 1
8055: PPUSH
8056: LD_VAR 0 9
8060: PPUSH
8061: CALL_OW 12
8065: ARRAY
8066: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8067: LD_ADDR_OWVAR 38
8071: PUSH
8072: LD_VAR 0 8
8076: PUSH
8077: LD_INT 1
8079: PPUSH
8080: LD_VAR 0 8
8084: PPUSH
8085: CALL_OW 12
8089: ARRAY
8090: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8091: LD_ADDR_OWVAR 40
8095: PUSH
8096: LD_VAR 0 7
8100: PUSH
8101: LD_INT 1
8103: PPUSH
8104: LD_VAR 0 7
8108: PPUSH
8109: CALL_OW 12
8113: ARRAY
8114: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8115: LD_ADDR_OWVAR 41
8119: PUSH
8120: LD_INT 100
8122: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8123: LD_ADDR_VAR 0 3
8127: PUSH
8128: LD_VAR 0 3
8132: PPUSH
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 1
8140: PLUS
8141: PPUSH
8142: CALL_OW 45
8146: PPUSH
8147: CALL_OW 2
8151: ST_TO_ADDR
// end ;
8152: GO 7765
8154: POP
8155: POP
// end ;
8156: LD_VAR 0 3
8160: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8161: LD_INT 0
8163: PPUSH
8164: PPUSH
// for i = 1 to n do
8165: LD_ADDR_VAR 0 4
8169: PUSH
8170: DOUBLE
8171: LD_INT 1
8173: DEC
8174: ST_TO_ADDR
8175: LD_VAR 0 1
8179: PUSH
8180: FOR_TO
8181: IFFALSE 8255
// begin uc_nation := rand ( 1 , 3 ) ;
8183: LD_ADDR_OWVAR 21
8187: PUSH
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8199: LD_INT 0
8201: PPUSH
8202: LD_INT 8
8204: PUSH
8205: LD_INT 9
8207: PUSH
8208: LD_INT 1
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 1
8218: PPUSH
8219: LD_INT 3
8221: PPUSH
8222: CALL_OW 12
8226: ARRAY
8227: PPUSH
8228: LD_VAR 0 2
8232: PPUSH
8233: CALL_OW 380
// result := result ^ CreateHuman ;
8237: LD_ADDR_VAR 0 3
8241: PUSH
8242: LD_VAR 0 3
8246: PUSH
8247: CALL_OW 44
8251: ADD
8252: ST_TO_ADDR
// end ;
8253: GO 8180
8255: POP
8256: POP
// end ;
8257: LD_VAR 0 3
8261: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// for i = 1 to n do
8271: LD_ADDR_VAR 0 4
8275: PUSH
8276: DOUBLE
8277: LD_INT 1
8279: DEC
8280: ST_TO_ADDR
8281: LD_VAR 0 1
8285: PUSH
8286: FOR_TO
8287: IFFALSE 8679
// begin uc_nation := rand ( 1 , 3 ) ;
8289: LD_ADDR_OWVAR 21
8293: PUSH
8294: LD_INT 1
8296: PPUSH
8297: LD_INT 3
8299: PPUSH
8300: CALL_OW 12
8304: ST_TO_ADDR
// case uc_nation of 1 :
8305: LD_OWVAR 21
8309: PUSH
8310: LD_INT 1
8312: DOUBLE
8313: EQUAL
8314: IFTRUE 8318
8316: GO 8389
8318: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8319: LD_ADDR_VAR 0 6
8323: PUSH
8324: LD_INT 4
8326: PUSH
8327: LD_INT 5
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8334: LD_ADDR_VAR 0 7
8338: PUSH
8339: LD_INT 6
8341: PUSH
8342: LD_INT 7
8344: PUSH
8345: LD_INT 10
8347: PUSH
8348: LD_INT 97
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8357: LD_ADDR_VAR 0 8
8361: PUSH
8362: LD_INT 1
8364: PUSH
8365: LD_INT 3
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8372: LD_ADDR_VAR 0 9
8376: PUSH
8377: LD_INT 1
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: ST_TO_ADDR
// end ; 2 :
8387: GO 8544
8389: LD_INT 2
8391: DOUBLE
8392: EQUAL
8393: IFTRUE 8397
8395: GO 8468
8397: POP
// begin chassis := [ ar_half_tracked ] ;
8398: LD_ADDR_VAR 0 6
8402: PUSH
8403: LD_INT 14
8405: PUSH
8406: EMPTY
8407: LIST
8408: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8409: LD_ADDR_VAR 0 7
8413: PUSH
8414: LD_INT 91
8416: PUSH
8417: LD_INT 26
8419: PUSH
8420: LD_INT 28
8422: PUSH
8423: LD_INT 29
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8432: LD_ADDR_VAR 0 8
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: LD_INT 5
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8447: LD_ADDR_VAR 0 9
8451: PUSH
8452: LD_INT 1
8454: PUSH
8455: LD_INT 2
8457: PUSH
8458: LD_INT 3
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: ST_TO_ADDR
// end ; 3 :
8466: GO 8544
8468: LD_INT 3
8470: DOUBLE
8471: EQUAL
8472: IFTRUE 8476
8474: GO 8543
8476: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8477: LD_ADDR_VAR 0 6
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 24
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8492: LD_ADDR_VAR 0 7
8496: PUSH
8497: LD_INT 46
8499: PUSH
8500: LD_INT 45
8502: PUSH
8503: LD_INT 49
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8511: LD_ADDR_VAR 0 8
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: LD_INT 3
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8526: LD_ADDR_VAR 0 9
8530: PUSH
8531: LD_INT 1
8533: PUSH
8534: LD_INT 3
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: ST_TO_ADDR
// end ; end ;
8541: GO 8544
8543: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8544: LD_ADDR_OWVAR 37
8548: PUSH
8549: LD_VAR 0 6
8553: PUSH
8554: LD_INT 1
8556: PPUSH
8557: LD_VAR 0 6
8561: PPUSH
8562: CALL_OW 12
8566: ARRAY
8567: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8568: LD_ADDR_OWVAR 39
8572: PUSH
8573: LD_VAR 0 9
8577: PUSH
8578: LD_INT 1
8580: PPUSH
8581: LD_VAR 0 9
8585: PPUSH
8586: CALL_OW 12
8590: ARRAY
8591: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8592: LD_ADDR_OWVAR 38
8596: PUSH
8597: LD_VAR 0 8
8601: PUSH
8602: LD_INT 1
8604: PPUSH
8605: LD_VAR 0 8
8609: PPUSH
8610: CALL_OW 12
8614: ARRAY
8615: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8616: LD_ADDR_OWVAR 40
8620: PUSH
8621: LD_VAR 0 7
8625: PUSH
8626: LD_INT 1
8628: PPUSH
8629: LD_VAR 0 7
8633: PPUSH
8634: CALL_OW 12
8638: ARRAY
8639: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8640: LD_ADDR_OWVAR 41
8644: PUSH
8645: LD_INT 100
8647: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_VAR 0 3
8657: PPUSH
8658: LD_VAR 0 3
8662: PUSH
8663: LD_INT 1
8665: PLUS
8666: PPUSH
8667: CALL_OW 45
8671: PPUSH
8672: CALL_OW 2
8676: ST_TO_ADDR
// end ;
8677: GO 8286
8679: POP
8680: POP
// end ; end_of_file
8681: LD_VAR 0 3
8685: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8686: LD_INT 22
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PPUSH
8696: CALL_OW 69
8700: IFFALSE 9202
8702: GO 8704
8704: DISABLE
8705: LD_INT 0
8707: PPUSH
8708: PPUSH
8709: PPUSH
// begin enable ;
8710: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8711: LD_ADDR_VAR 0 3
8715: PUSH
8716: LD_INT 22
8718: PUSH
8719: LD_INT 7
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PPUSH
8726: CALL_OW 69
8730: ST_TO_ADDR
// for i in tmp do
8731: LD_ADDR_VAR 0 1
8735: PUSH
8736: LD_VAR 0 3
8740: PUSH
8741: FOR_IN
8742: IFFALSE 9200
// begin case GetType ( i ) of unit_human :
8744: LD_VAR 0 1
8748: PPUSH
8749: CALL_OW 247
8753: PUSH
8754: LD_INT 1
8756: DOUBLE
8757: EQUAL
8758: IFTRUE 8762
8760: GO 8963
8762: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL_OW 256
8772: PUSH
8773: LD_INT 250
8775: LESS
8776: IFFALSE 8794
8778: PUSH
8779: LD_INT 5
8781: PPUSH
8782: LD_INT 7
8784: PPUSH
8785: CALL_OW 321
8789: PUSH
8790: LD_INT 2
8792: NONEQUAL
8793: AND
8794: IFFALSE 8798
// continue ;
8796: GO 8741
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL_OW 257
8807: PUSH
8808: LD_INT 12
8810: PUSH
8811: LD_INT 15
8813: PUSH
8814: LD_INT 16
8816: PUSH
8817: LD_INT 17
8819: PUSH
8820: LD_INT 1
8822: PUSH
8823: LD_INT 5
8825: PUSH
8826: LD_INT 6
8828: PUSH
8829: LD_INT 7
8831: PUSH
8832: LD_INT 8
8834: PUSH
8835: LD_INT 9
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: IN
8850: IFFALSE 8888
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8852: LD_VAR 0 1
8856: PPUSH
8857: LD_INT 22
8859: PUSH
8860: LD_OWVAR 2
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 69
8873: PPUSH
8874: LD_VAR 0 1
8878: PPUSH
8879: CALL_OW 74
8883: PPUSH
8884: CALL_OW 115
// if GetClass ( i ) = 3 then
8888: LD_VAR 0 1
8892: PPUSH
8893: CALL_OW 257
8897: PUSH
8898: LD_INT 3
8900: EQUAL
8901: IFFALSE 8961
// if IsInUnit ( i ) then
8903: LD_VAR 0 1
8907: PPUSH
8908: CALL_OW 310
8912: IFFALSE 8952
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8914: LD_VAR 0 1
8918: PPUSH
8919: LD_INT 22
8921: PUSH
8922: LD_OWVAR 2
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 69
8935: PPUSH
8936: LD_VAR 0 1
8940: PPUSH
8941: CALL_OW 74
8945: PPUSH
8946: CALL_OW 115
8950: GO 8961
// ComEspace ( i ) ;
8952: LD_VAR 0 1
8956: PPUSH
8957: CALL 1945 0 1
// end ; unit_vehicle :
8961: GO 9198
8963: LD_INT 2
8965: DOUBLE
8966: EQUAL
8967: IFTRUE 8971
8969: GO 9197
8971: POP
// begin if GetLives ( i ) > 250 then
8972: LD_VAR 0 1
8976: PPUSH
8977: CALL_OW 256
8981: PUSH
8982: LD_INT 250
8984: GREATER
8985: IFFALSE 9195
// begin if GetWeapon ( i ) = us_artillery then
8987: LD_VAR 0 1
8991: PPUSH
8992: CALL_OW 264
8996: PUSH
8997: LD_INT 97
8999: EQUAL
9000: IFFALSE 9068
// begin if IsInArea ( i , zoneOut ) then
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 4
9009: PPUSH
9010: CALL_OW 308
9014: IFFALSE 9030
// ComMoveToArea ( i , zoneBorder ) else
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_INT 9
9023: PPUSH
9024: CALL_OW 113
9028: GO 9066
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: LD_INT 22
9037: PUSH
9038: LD_OWVAR 2
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 69
9051: PPUSH
9052: LD_VAR 0 1
9056: PPUSH
9057: CALL_OW 74
9061: PPUSH
9062: CALL_OW 115
// end else
9066: GO 9195
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9068: LD_VAR 0 1
9072: PPUSH
9073: CALL_OW 264
9077: PUSH
9078: LD_INT 11
9080: PUSH
9081: LD_INT 30
9083: PUSH
9084: LD_INT 98
9086: PUSH
9087: LD_INT 49
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: IN
9096: IFFALSE 9126
// begin if IsInArea ( i , zoneOut ) then
9098: LD_VAR 0 1
9102: PPUSH
9103: LD_INT 4
9105: PPUSH
9106: CALL_OW 308
9110: IFFALSE 9124
// ComSpecMove ( i , specPos ) ;
9112: LD_VAR 0 1
9116: PPUSH
9117: LD_INT 8
9119: PPUSH
9120: CALL 1991 0 2
// end else
9124: GO 9195
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9126: LD_VAR 0 1
9130: PPUSH
9131: CALL_OW 264
9135: PUSH
9136: LD_INT 91
9138: PUSH
9139: LD_INT 29
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: IN
9146: IFFALSE 9159
// ComSpecAttack ( i ) else
9148: LD_VAR 0 1
9152: PPUSH
9153: CALL 2419 0 1
9157: GO 9195
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9159: LD_VAR 0 1
9163: PPUSH
9164: LD_INT 22
9166: PUSH
9167: LD_OWVAR 2
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PPUSH
9176: CALL_OW 69
9180: PPUSH
9181: LD_VAR 0 1
9185: PPUSH
9186: CALL_OW 74
9190: PPUSH
9191: CALL_OW 115
// end ; end ; end ;
9195: GO 9198
9197: POP
// end ;
9198: GO 8741
9200: POP
9201: POP
// end ; end_of_file
9202: PPOPN 3
9204: END
// export function InitDisplay ; begin
9205: LD_INT 0
9207: PPUSH
// while true do
9208: LD_INT 1
9210: IFFALSE 9297
// begin if waveNumber < 100 then
9212: LD_EXP 5
9216: PUSH
9217: LD_INT 100
9219: LESS
9220: IFFALSE 9271
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9222: LD_ADDR_OWVAR 47
9226: PUSH
9227: LD_STRING #Tick
9229: PUSH
9230: LD_OWVAR 1
9234: PUSH
9235: LD_STRING #Points
9237: PUSH
9238: LD_EXP 2
9242: PUSH
9243: LD_STRING #Attack
9245: PUSH
9246: LD_EXP 4
9250: PUSH
9251: LD_STRING #Wave
9253: PUSH
9254: LD_EXP 5
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: ST_TO_ADDR
9269: GO 9288
// Display_Strings := [ #Win , points ] ;
9271: LD_ADDR_OWVAR 47
9275: PUSH
9276: LD_STRING #Win
9278: PUSH
9279: LD_EXP 2
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9288: LD_INT 35
9290: PPUSH
9291: CALL_OW 67
// end ;
9295: GO 9208
// end ; end_of_file
9297: LD_VAR 0 1
9301: RET
// export function InitBonus ; var i , chance ; begin
9302: LD_INT 0
9304: PPUSH
9305: PPUSH
9306: PPUSH
// chance := rand ( 1 , 99 ) ;
9307: LD_ADDR_VAR 0 3
9311: PUSH
9312: LD_INT 1
9314: PPUSH
9315: LD_INT 99
9317: PPUSH
9318: CALL_OW 12
9322: ST_TO_ADDR
// case chance of 1 .. 10 :
9323: LD_VAR 0 3
9327: PUSH
9328: LD_INT 1
9330: DOUBLE
9331: GREATEREQUAL
9332: IFFALSE 9340
9334: LD_INT 10
9336: DOUBLE
9337: LESSEQUAL
9338: IFTRUE 9342
9340: GO 9353
9342: POP
// i := 5 ; 11 .. 25 :
9343: LD_ADDR_VAR 0 2
9347: PUSH
9348: LD_INT 5
9350: ST_TO_ADDR
9351: GO 9454
9353: LD_INT 11
9355: DOUBLE
9356: GREATEREQUAL
9357: IFFALSE 9365
9359: LD_INT 25
9361: DOUBLE
9362: LESSEQUAL
9363: IFTRUE 9367
9365: GO 9378
9367: POP
// i := 3 ; 26 .. 40 :
9368: LD_ADDR_VAR 0 2
9372: PUSH
9373: LD_INT 3
9375: ST_TO_ADDR
9376: GO 9454
9378: LD_INT 26
9380: DOUBLE
9381: GREATEREQUAL
9382: IFFALSE 9390
9384: LD_INT 40
9386: DOUBLE
9387: LESSEQUAL
9388: IFTRUE 9392
9390: GO 9403
9392: POP
// i := 2 ; 41 .. 60 :
9393: LD_ADDR_VAR 0 2
9397: PUSH
9398: LD_INT 2
9400: ST_TO_ADDR
9401: GO 9454
9403: LD_INT 41
9405: DOUBLE
9406: GREATEREQUAL
9407: IFFALSE 9415
9409: LD_INT 60
9411: DOUBLE
9412: LESSEQUAL
9413: IFTRUE 9417
9415: GO 9428
9417: POP
// i := 4 ; 61 .. 99 :
9418: LD_ADDR_VAR 0 2
9422: PUSH
9423: LD_INT 4
9425: ST_TO_ADDR
9426: GO 9454
9428: LD_INT 61
9430: DOUBLE
9431: GREATEREQUAL
9432: IFFALSE 9440
9434: LD_INT 99
9436: DOUBLE
9437: LESSEQUAL
9438: IFTRUE 9442
9440: GO 9453
9442: POP
// i := 1 ; end ;
9443: LD_ADDR_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ST_TO_ADDR
9451: GO 9454
9453: POP
// case i of 1 :
9454: LD_VAR 0 2
9458: PUSH
9459: LD_INT 1
9461: DOUBLE
9462: EQUAL
9463: IFTRUE 9467
9465: GO 9556
9467: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9468: LD_INT 22
9470: PUSH
9471: LD_OWVAR 2
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 12
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 25
9495: PUSH
9496: LD_INT 16
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: LD_INT 25
9505: PUSH
9506: LD_INT 15
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: LD_INT 25
9515: PUSH
9516: LD_INT 17
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 69
9538: PUSH
9539: LD_INT 10
9541: GREATEREQUAL
9542: IFFALSE 9550
// BonusIV else
9544: CALL 10129 0 0
9548: GO 9554
// BonusI ;
9550: CALL 9634 0 0
// end ; 2 :
9554: GO 9629
9556: LD_INT 2
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9571
9564: POP
// begin BonusII ;
9565: CALL 9807 0 0
// end ; 3 :
9569: GO 9629
9571: LD_INT 3
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9586
9579: POP
// begin BonusIII ;
9580: CALL 9955 0 0
// end ; 4 :
9584: GO 9629
9586: LD_INT 4
9588: DOUBLE
9589: EQUAL
9590: IFTRUE 9594
9592: GO 9601
9594: POP
// begin BonusIV ;
9595: CALL 10129 0 0
// end ; 5 :
9599: GO 9629
9601: LD_INT 5
9603: DOUBLE
9604: EQUAL
9605: IFTRUE 9609
9607: GO 9628
9609: POP
// begin if graveyard then
9610: LD_EXP 8
9614: IFFALSE 9622
// BonusV else
9616: CALL 10547 0 0
9620: GO 9626
// BonusIII ;
9622: CALL 9955 0 0
// end ; end ;
9626: GO 9629
9628: POP
// end ;
9629: LD_VAR 0 1
9633: RET
// export function BonusI ; var i ; begin
9634: LD_INT 0
9636: PPUSH
9637: PPUSH
// case Query ( AddGift1 ) of 1 :
9638: LD_STRING AddGift1
9640: PPUSH
9641: CALL_OW 97
9645: PUSH
9646: LD_INT 1
9648: DOUBLE
9649: EQUAL
9650: IFTRUE 9654
9652: GO 9733
9654: POP
// begin for i = 1 to 3 do
9655: LD_ADDR_VAR 0 2
9659: PUSH
9660: DOUBLE
9661: LD_INT 1
9663: DEC
9664: ST_TO_ADDR
9665: LD_INT 3
9667: PUSH
9668: FOR_TO
9669: IFFALSE 9729
// begin uc_side := your_side ;
9671: LD_ADDR_OWVAR 20
9675: PUSH
9676: LD_OWVAR 2
9680: ST_TO_ADDR
// uc_nation := 0 ;
9681: LD_ADDR_OWVAR 21
9685: PUSH
9686: LD_INT 0
9688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9689: LD_INT 0
9691: PPUSH
9692: LD_INT 12
9694: PPUSH
9695: LD_INT 1
9697: PPUSH
9698: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9702: CALL_OW 44
9706: PPUSH
9707: LD_EXP 9
9711: PPUSH
9712: LD_EXP 10
9716: PPUSH
9717: LD_INT 15
9719: PPUSH
9720: LD_INT 1
9722: PPUSH
9723: CALL_OW 50
// end ;
9727: GO 9668
9729: POP
9730: POP
// end ; 2 :
9731: GO 9802
9733: LD_INT 2
9735: DOUBLE
9736: EQUAL
9737: IFTRUE 9741
9739: GO 9783
9741: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9742: LD_EXP 11
9746: PPUSH
9747: CALL_OW 274
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: LD_EXP 11
9759: PPUSH
9760: CALL_OW 274
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 275
9772: PUSH
9773: LD_INT 100
9775: PLUS
9776: PPUSH
9777: CALL_OW 277
// end ; 3 :
9781: GO 9802
9783: LD_INT 3
9785: DOUBLE
9786: EQUAL
9787: IFTRUE 9791
9789: GO 9801
9791: POP
// begin SetTeamExp ( 2 ) ;
9792: LD_INT 2
9794: PPUSH
9795: CALL 952 0 1
// end ; end ;
9799: GO 9802
9801: POP
// end ;
9802: LD_VAR 0 1
9806: RET
// export function BonusII ; var i ; begin
9807: LD_INT 0
9809: PPUSH
9810: PPUSH
// case Query ( AddGift2 ) of 1 :
9811: LD_STRING AddGift2
9813: PPUSH
9814: CALL_OW 97
9818: PUSH
9819: LD_INT 1
9821: DOUBLE
9822: EQUAL
9823: IFTRUE 9827
9825: GO 9869
9827: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9828: LD_EXP 11
9832: PPUSH
9833: CALL_OW 274
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: LD_EXP 11
9845: PPUSH
9846: CALL_OW 274
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: CALL_OW 275
9858: PUSH
9859: LD_INT 500
9861: PLUS
9862: PPUSH
9863: CALL_OW 277
// end ; 2 :
9867: GO 9950
9869: LD_INT 2
9871: DOUBLE
9872: EQUAL
9873: IFTRUE 9877
9875: GO 9887
9877: POP
// begin SetTeamExp ( 3 ) ;
9878: LD_INT 3
9880: PPUSH
9881: CALL 952 0 1
// end ; 3 :
9885: GO 9950
9887: LD_INT 3
9889: DOUBLE
9890: EQUAL
9891: IFTRUE 9895
9893: GO 9949
9895: POP
// begin uc_side = your_side ;
9896: LD_ADDR_OWVAR 20
9900: PUSH
9901: LD_OWVAR 2
9905: ST_TO_ADDR
// uc_nation = nation_russian ;
9906: LD_ADDR_OWVAR 21
9910: PUSH
9911: LD_INT 3
9913: ST_TO_ADDR
// vc_chassis = 25 ;
9914: LD_ADDR_OWVAR 37
9918: PUSH
9919: LD_INT 25
9921: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9922: CALL_OW 45
9926: PPUSH
9927: LD_EXP 9
9931: PPUSH
9932: LD_EXP 10
9936: PPUSH
9937: LD_INT 15
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 50
// end ; end ;
9947: GO 9950
9949: POP
// end ;
9950: LD_VAR 0 1
9954: RET
// export function BonusIII ; var i ; begin
9955: LD_INT 0
9957: PPUSH
9958: PPUSH
// case Query ( AddGift3 ) of 1 :
9959: LD_STRING AddGift3
9961: PPUSH
9962: CALL_OW 97
9966: PUSH
9967: LD_INT 1
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 10017
9975: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9976: LD_EXP 11
9980: PPUSH
9981: CALL_OW 274
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: LD_EXP 11
9993: PPUSH
9994: CALL_OW 274
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 275
10006: PUSH
10007: LD_INT 1000
10009: PLUS
10010: PPUSH
10011: CALL_OW 277
// end ; 2 :
10015: GO 10124
10017: LD_INT 2
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10037
10025: POP
// begin PrepareGuards ( waveNumber ) ;
10026: LD_EXP 5
10030: PPUSH
10031: CALL 1098 0 1
// end ; 3 :
10035: GO 10124
10037: LD_INT 3
10039: DOUBLE
10040: EQUAL
10041: IFTRUE 10045
10043: GO 10123
10045: POP
// begin uc_side = your_side ;
10046: LD_ADDR_OWVAR 20
10050: PUSH
10051: LD_OWVAR 2
10055: ST_TO_ADDR
// uc_nation = nation_american ;
10056: LD_ADDR_OWVAR 21
10060: PUSH
10061: LD_INT 1
10063: ST_TO_ADDR
// vc_chassis = us_morphling ;
10064: LD_ADDR_OWVAR 37
10068: PUSH
10069: LD_INT 5
10071: ST_TO_ADDR
// vc_engine := engine_siberite ;
10072: LD_ADDR_OWVAR 39
10076: PUSH
10077: LD_INT 3
10079: ST_TO_ADDR
// vc_control := control_computer ;
10080: LD_ADDR_OWVAR 38
10084: PUSH
10085: LD_INT 3
10087: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10088: LD_ADDR_OWVAR 40
10092: PUSH
10093: LD_INT 8
10095: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10096: CALL_OW 45
10100: PPUSH
10101: LD_EXP 9
10105: PPUSH
10106: LD_EXP 10
10110: PPUSH
10111: LD_INT 15
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 50
// end ; end ;
10121: GO 10124
10123: POP
// end ;
10124: LD_VAR 0 1
10128: RET
// export function BonusIV ; var i ; begin
10129: LD_INT 0
10131: PPUSH
10132: PPUSH
// case Query ( AddGift4 ) of 1 :
10133: LD_STRING AddGift4
10135: PPUSH
10136: CALL_OW 97
10140: PUSH
10141: LD_INT 1
10143: DOUBLE
10144: EQUAL
10145: IFTRUE 10149
10147: GO 10473
10149: POP
// begin i := rand ( 1 , 3 ) ;
10150: LD_ADDR_VAR 0 2
10154: PUSH
10155: LD_INT 1
10157: PPUSH
10158: LD_INT 3
10160: PPUSH
10161: CALL_OW 12
10165: ST_TO_ADDR
// uc_side := your_side ;
10166: LD_ADDR_OWVAR 20
10170: PUSH
10171: LD_OWVAR 2
10175: ST_TO_ADDR
// case i of 1 :
10176: LD_VAR 0 2
10180: PUSH
10181: LD_INT 1
10183: DOUBLE
10184: EQUAL
10185: IFTRUE 10189
10187: GO 10276
10189: POP
// begin uc_nation := nation_arabian ;
10190: LD_ADDR_OWVAR 21
10194: PUSH
10195: LD_INT 2
10197: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10198: LD_ADDR_OWVAR 37
10202: PUSH
10203: LD_INT 14
10205: ST_TO_ADDR
// vc_engine := engine_combustion ;
10206: LD_ADDR_OWVAR 39
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// vc_control := control_manual ;
10214: LD_ADDR_OWVAR 38
10218: PUSH
10219: LD_INT 1
10221: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10222: LD_ADDR_OWVAR 40
10226: PUSH
10227: LD_INT 27
10229: PUSH
10230: LD_INT 28
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 1
10239: PPUSH
10240: LD_INT 2
10242: PPUSH
10243: CALL_OW 12
10247: ARRAY
10248: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10249: CALL_OW 45
10253: PPUSH
10254: LD_EXP 9
10258: PPUSH
10259: LD_EXP 10
10263: PPUSH
10264: LD_INT 15
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: CALL_OW 50
// end ; 2 :
10274: GO 10471
10276: LD_INT 2
10278: DOUBLE
10279: EQUAL
10280: IFTRUE 10284
10282: GO 10375
10284: POP
// begin uc_nation := nation_american ;
10285: LD_ADDR_OWVAR 21
10289: PUSH
10290: LD_INT 1
10292: ST_TO_ADDR
// vc_chassis := us_morphling ;
10293: LD_ADDR_OWVAR 37
10297: PUSH
10298: LD_INT 5
10300: ST_TO_ADDR
// vc_engine := engine_siberite ;
10301: LD_ADDR_OWVAR 39
10305: PUSH
10306: LD_INT 3
10308: ST_TO_ADDR
// vc_control := control_computer ;
10309: LD_ADDR_OWVAR 38
10313: PUSH
10314: LD_INT 3
10316: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10317: LD_ADDR_OWVAR 40
10321: PUSH
10322: LD_INT 12
10324: PUSH
10325: LD_INT 10
10327: PUSH
10328: LD_INT 7
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 1
10338: PPUSH
10339: LD_INT 3
10341: PPUSH
10342: CALL_OW 12
10346: ARRAY
10347: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10348: CALL_OW 45
10352: PPUSH
10353: LD_EXP 9
10357: PPUSH
10358: LD_EXP 10
10362: PPUSH
10363: LD_INT 15
10365: PPUSH
10366: LD_INT 1
10368: PPUSH
10369: CALL_OW 50
// end ; 3 :
10373: GO 10471
10375: LD_INT 3
10377: DOUBLE
10378: EQUAL
10379: IFTRUE 10383
10381: GO 10470
10383: POP
// begin uc_nation := nation_russian ;
10384: LD_ADDR_OWVAR 21
10388: PUSH
10389: LD_INT 3
10391: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10392: LD_ADDR_OWVAR 37
10396: PUSH
10397: LD_INT 22
10399: ST_TO_ADDR
// vc_engine := engine_combustion ;
10400: LD_ADDR_OWVAR 39
10404: PUSH
10405: LD_INT 1
10407: ST_TO_ADDR
// vc_control := control_manual ;
10408: LD_ADDR_OWVAR 38
10412: PUSH
10413: LD_INT 1
10415: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10416: LD_ADDR_OWVAR 40
10420: PUSH
10421: LD_INT 45
10423: PUSH
10424: LD_INT 44
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 1
10433: PPUSH
10434: LD_INT 2
10436: PPUSH
10437: CALL_OW 12
10441: ARRAY
10442: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10443: CALL_OW 45
10447: PPUSH
10448: LD_EXP 9
10452: PPUSH
10453: LD_EXP 10
10457: PPUSH
10458: LD_INT 15
10460: PPUSH
10461: LD_INT 1
10463: PPUSH
10464: CALL_OW 50
// end ; end ;
10468: GO 10471
10470: POP
// end ; 2 :
10471: GO 10542
10473: LD_INT 2
10475: DOUBLE
10476: EQUAL
10477: IFTRUE 10481
10479: GO 10523
10481: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10482: LD_EXP 11
10486: PPUSH
10487: CALL_OW 274
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: LD_EXP 11
10499: PPUSH
10500: CALL_OW 274
10504: PPUSH
10505: LD_INT 1
10507: PPUSH
10508: CALL_OW 275
10512: PUSH
10513: LD_INT 100
10515: PLUS
10516: PPUSH
10517: CALL_OW 277
// end ; 3 :
10521: GO 10542
10523: LD_INT 3
10525: DOUBLE
10526: EQUAL
10527: IFTRUE 10531
10529: GO 10541
10531: POP
// begin SetTeamExp ( 2 ) ;
10532: LD_INT 2
10534: PPUSH
10535: CALL 952 0 1
// end ; end ;
10539: GO 10542
10541: POP
// end ;
10542: LD_VAR 0 1
10546: RET
// export function BonusV ; var i , j ; begin
10547: LD_INT 0
10549: PPUSH
10550: PPUSH
10551: PPUSH
// case Query ( AddGift5 ) of 1 :
10552: LD_STRING AddGift5
10554: PPUSH
10555: CALL_OW 97
10559: PUSH
10560: LD_INT 1
10562: DOUBLE
10563: EQUAL
10564: IFTRUE 10568
10566: GO 10912
10568: POP
// begin for j = 1 to 3 do
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: DOUBLE
10575: LD_INT 1
10577: DEC
10578: ST_TO_ADDR
10579: LD_INT 3
10581: PUSH
10582: FOR_TO
10583: IFFALSE 10908
// begin i := rand ( 1 , 3 ) ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 1
10592: PPUSH
10593: LD_INT 3
10595: PPUSH
10596: CALL_OW 12
10600: ST_TO_ADDR
// uc_side := your_side ;
10601: LD_ADDR_OWVAR 20
10605: PUSH
10606: LD_OWVAR 2
10610: ST_TO_ADDR
// case i of 1 :
10611: LD_VAR 0 2
10615: PUSH
10616: LD_INT 1
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10711
10624: POP
// begin uc_nation := nation_arabian ;
10625: LD_ADDR_OWVAR 21
10629: PUSH
10630: LD_INT 2
10632: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10633: LD_ADDR_OWVAR 37
10637: PUSH
10638: LD_INT 14
10640: ST_TO_ADDR
// vc_engine := engine_combustion ;
10641: LD_ADDR_OWVAR 39
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// vc_control := control_manual ;
10649: LD_ADDR_OWVAR 38
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10657: LD_ADDR_OWVAR 40
10661: PUSH
10662: LD_INT 27
10664: PUSH
10665: LD_INT 28
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 1
10674: PPUSH
10675: LD_INT 2
10677: PPUSH
10678: CALL_OW 12
10682: ARRAY
10683: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10684: CALL_OW 45
10688: PPUSH
10689: LD_EXP 9
10693: PPUSH
10694: LD_EXP 10
10698: PPUSH
10699: LD_INT 15
10701: PPUSH
10702: LD_INT 1
10704: PPUSH
10705: CALL_OW 50
// end ; 2 :
10709: GO 10906
10711: LD_INT 2
10713: DOUBLE
10714: EQUAL
10715: IFTRUE 10719
10717: GO 10810
10719: POP
// begin uc_nation := nation_american ;
10720: LD_ADDR_OWVAR 21
10724: PUSH
10725: LD_INT 1
10727: ST_TO_ADDR
// vc_chassis := us_morphling ;
10728: LD_ADDR_OWVAR 37
10732: PUSH
10733: LD_INT 5
10735: ST_TO_ADDR
// vc_engine := engine_siberite ;
10736: LD_ADDR_OWVAR 39
10740: PUSH
10741: LD_INT 3
10743: ST_TO_ADDR
// vc_control := control_computer ;
10744: LD_ADDR_OWVAR 38
10748: PUSH
10749: LD_INT 3
10751: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10752: LD_ADDR_OWVAR 40
10756: PUSH
10757: LD_INT 12
10759: PUSH
10760: LD_INT 11
10762: PUSH
10763: LD_INT 7
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 1
10773: PPUSH
10774: LD_INT 3
10776: PPUSH
10777: CALL_OW 12
10781: ARRAY
10782: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10783: CALL_OW 45
10787: PPUSH
10788: LD_EXP 9
10792: PPUSH
10793: LD_EXP 10
10797: PPUSH
10798: LD_INT 15
10800: PPUSH
10801: LD_INT 1
10803: PPUSH
10804: CALL_OW 50
// end ; 3 :
10808: GO 10906
10810: LD_INT 3
10812: DOUBLE
10813: EQUAL
10814: IFTRUE 10818
10816: GO 10905
10818: POP
// begin uc_nation := nation_russian ;
10819: LD_ADDR_OWVAR 21
10823: PUSH
10824: LD_INT 3
10826: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10827: LD_ADDR_OWVAR 37
10831: PUSH
10832: LD_INT 22
10834: ST_TO_ADDR
// vc_engine := engine_combustion ;
10835: LD_ADDR_OWVAR 39
10839: PUSH
10840: LD_INT 1
10842: ST_TO_ADDR
// vc_control := control_manual ;
10843: LD_ADDR_OWVAR 38
10847: PUSH
10848: LD_INT 1
10850: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10851: LD_ADDR_OWVAR 40
10855: PUSH
10856: LD_INT 45
10858: PUSH
10859: LD_INT 44
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 1
10868: PPUSH
10869: LD_INT 2
10871: PPUSH
10872: CALL_OW 12
10876: ARRAY
10877: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10878: CALL_OW 45
10882: PPUSH
10883: LD_EXP 9
10887: PPUSH
10888: LD_EXP 10
10892: PPUSH
10893: LD_INT 15
10895: PPUSH
10896: LD_INT 1
10898: PPUSH
10899: CALL_OW 50
// end ; end ;
10903: GO 10906
10905: POP
// end ;
10906: GO 10582
10908: POP
10909: POP
// end ; 2 :
10910: GO 10978
10912: LD_INT 2
10914: DOUBLE
10915: EQUAL
10916: IFTRUE 10920
10918: GO 10962
10920: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10921: LD_EXP 11
10925: PPUSH
10926: CALL_OW 274
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: LD_EXP 11
10938: PPUSH
10939: CALL_OW 274
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 275
10951: PUSH
10952: LD_INT 500
10954: PLUS
10955: PPUSH
10956: CALL_OW 277
// end ; 3 :
10960: GO 10978
10962: LD_INT 3
10964: DOUBLE
10965: EQUAL
10966: IFTRUE 10970
10968: GO 10977
10970: POP
// begin GetBack ( ) ;
10971: CALL 1758 0 0
// end ; end ;
10975: GO 10978
10977: POP
// end ; end_of_file end_of_file
10978: LD_VAR 0 1
10982: RET
// export globalGameSaveCounter ; every 0 0$1 do
10983: GO 10985
10985: DISABLE
// begin enable ;
10986: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10987: LD_STRING updateTimer(
10989: PUSH
10990: LD_OWVAR 1
10994: STR
10995: PUSH
10996: LD_STRING );
10998: STR
10999: PPUSH
11000: CALL_OW 559
// end ;
11004: END
// every 0 0$1 do
11005: GO 11007
11007: DISABLE
// begin globalGameSaveCounter := 0 ;
11008: LD_ADDR_EXP 14
11012: PUSH
11013: LD_INT 0
11015: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11016: LD_STRING setGameSaveCounter(0)
11018: PPUSH
11019: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11023: LD_STRING initStreamRollete();
11025: PPUSH
11026: CALL_OW 559
// InitStreamMode ;
11030: CALL 12382 0 0
// DefineStreamItems ( false ) ;
11034: LD_INT 0
11036: PPUSH
11037: CALL 12846 0 1
// end ;
11041: END
// export function SOS_MapStart ( ) ; begin
11042: LD_INT 0
11044: PPUSH
// if streamModeActive then
11045: LD_EXP 15
11049: IFFALSE 11058
// DefineStreamItems ( true ) ;
11051: LD_INT 1
11053: PPUSH
11054: CALL 12846 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
11058: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
11060: PPUSH
11061: CALL_OW 559
// UpdateLuaVariables ( ) ;
11065: CALL 11082 0 0
// UpdateFactoryWaypoints ( ) ;
11069: CALL 25968 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11073: CALL 26220 0 0
// end ;
11077: LD_VAR 0 1
11081: RET
// function UpdateLuaVariables ( ) ; begin
11082: LD_INT 0
11084: PPUSH
// if globalGameSaveCounter then
11085: LD_EXP 14
11089: IFFALSE 11123
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11091: LD_ADDR_EXP 14
11095: PUSH
11096: LD_EXP 14
11100: PPUSH
11101: CALL 73116 0 1
11105: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11106: LD_STRING setGameSaveCounter(
11108: PUSH
11109: LD_EXP 14
11113: STR
11114: PUSH
11115: LD_STRING )
11117: STR
11118: PPUSH
11119: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11123: LD_STRING setGameDifficulty(
11125: PUSH
11126: LD_OWVAR 67
11130: STR
11131: PUSH
11132: LD_STRING )
11134: STR
11135: PPUSH
11136: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11140: LD_STRING displayDifficulty(
11142: PUSH
11143: LD_OWVAR 67
11147: STR
11148: PUSH
11149: LD_STRING )
11151: STR
11152: PPUSH
11153: CALL_OW 559
// end ;
11157: LD_VAR 0 1
11161: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11162: LD_INT 0
11164: PPUSH
// if p2 = stream_mode then
11165: LD_VAR 0 2
11169: PUSH
11170: LD_INT 100
11172: EQUAL
11173: IFFALSE 12176
// begin if not StreamModeActive then
11175: LD_EXP 15
11179: NOT
11180: IFFALSE 11190
// StreamModeActive := true ;
11182: LD_ADDR_EXP 15
11186: PUSH
11187: LD_INT 1
11189: ST_TO_ADDR
// if p3 = 0 then
11190: LD_VAR 0 3
11194: PUSH
11195: LD_INT 0
11197: EQUAL
11198: IFFALSE 11204
// InitStreamMode ;
11200: CALL 12382 0 0
// if p3 = 1 then
11204: LD_VAR 0 3
11208: PUSH
11209: LD_INT 1
11211: EQUAL
11212: IFFALSE 11222
// sRocket := true ;
11214: LD_ADDR_EXP 20
11218: PUSH
11219: LD_INT 1
11221: ST_TO_ADDR
// if p3 = 2 then
11222: LD_VAR 0 3
11226: PUSH
11227: LD_INT 2
11229: EQUAL
11230: IFFALSE 11240
// sSpeed := true ;
11232: LD_ADDR_EXP 19
11236: PUSH
11237: LD_INT 1
11239: ST_TO_ADDR
// if p3 = 3 then
11240: LD_VAR 0 3
11244: PUSH
11245: LD_INT 3
11247: EQUAL
11248: IFFALSE 11258
// sEngine := true ;
11250: LD_ADDR_EXP 21
11254: PUSH
11255: LD_INT 1
11257: ST_TO_ADDR
// if p3 = 4 then
11258: LD_VAR 0 3
11262: PUSH
11263: LD_INT 4
11265: EQUAL
11266: IFFALSE 11276
// sSpec := true ;
11268: LD_ADDR_EXP 18
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// if p3 = 5 then
11276: LD_VAR 0 3
11280: PUSH
11281: LD_INT 5
11283: EQUAL
11284: IFFALSE 11294
// sLevel := true ;
11286: LD_ADDR_EXP 22
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// if p3 = 6 then
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 6
11301: EQUAL
11302: IFFALSE 11312
// sArmoury := true ;
11304: LD_ADDR_EXP 23
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// if p3 = 7 then
11312: LD_VAR 0 3
11316: PUSH
11317: LD_INT 7
11319: EQUAL
11320: IFFALSE 11330
// sRadar := true ;
11322: LD_ADDR_EXP 24
11326: PUSH
11327: LD_INT 1
11329: ST_TO_ADDR
// if p3 = 8 then
11330: LD_VAR 0 3
11334: PUSH
11335: LD_INT 8
11337: EQUAL
11338: IFFALSE 11348
// sBunker := true ;
11340: LD_ADDR_EXP 25
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// if p3 = 9 then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 9
11355: EQUAL
11356: IFFALSE 11366
// sHack := true ;
11358: LD_ADDR_EXP 26
11362: PUSH
11363: LD_INT 1
11365: ST_TO_ADDR
// if p3 = 10 then
11366: LD_VAR 0 3
11370: PUSH
11371: LD_INT 10
11373: EQUAL
11374: IFFALSE 11384
// sFire := true ;
11376: LD_ADDR_EXP 27
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// if p3 = 11 then
11384: LD_VAR 0 3
11388: PUSH
11389: LD_INT 11
11391: EQUAL
11392: IFFALSE 11402
// sRefresh := true ;
11394: LD_ADDR_EXP 28
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// if p3 = 12 then
11402: LD_VAR 0 3
11406: PUSH
11407: LD_INT 12
11409: EQUAL
11410: IFFALSE 11420
// sExp := true ;
11412: LD_ADDR_EXP 29
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
// if p3 = 13 then
11420: LD_VAR 0 3
11424: PUSH
11425: LD_INT 13
11427: EQUAL
11428: IFFALSE 11438
// sDepot := true ;
11430: LD_ADDR_EXP 30
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// if p3 = 14 then
11438: LD_VAR 0 3
11442: PUSH
11443: LD_INT 14
11445: EQUAL
11446: IFFALSE 11456
// sFlag := true ;
11448: LD_ADDR_EXP 31
11452: PUSH
11453: LD_INT 1
11455: ST_TO_ADDR
// if p3 = 15 then
11456: LD_VAR 0 3
11460: PUSH
11461: LD_INT 15
11463: EQUAL
11464: IFFALSE 11474
// sKamikadze := true ;
11466: LD_ADDR_EXP 39
11470: PUSH
11471: LD_INT 1
11473: ST_TO_ADDR
// if p3 = 16 then
11474: LD_VAR 0 3
11478: PUSH
11479: LD_INT 16
11481: EQUAL
11482: IFFALSE 11492
// sTroll := true ;
11484: LD_ADDR_EXP 40
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// if p3 = 17 then
11492: LD_VAR 0 3
11496: PUSH
11497: LD_INT 17
11499: EQUAL
11500: IFFALSE 11510
// sSlow := true ;
11502: LD_ADDR_EXP 41
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// if p3 = 18 then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_INT 18
11517: EQUAL
11518: IFFALSE 11528
// sLack := true ;
11520: LD_ADDR_EXP 42
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if p3 = 19 then
11528: LD_VAR 0 3
11532: PUSH
11533: LD_INT 19
11535: EQUAL
11536: IFFALSE 11546
// sTank := true ;
11538: LD_ADDR_EXP 44
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// if p3 = 20 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 20
11553: EQUAL
11554: IFFALSE 11564
// sRemote := true ;
11556: LD_ADDR_EXP 45
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// if p3 = 21 then
11564: LD_VAR 0 3
11568: PUSH
11569: LD_INT 21
11571: EQUAL
11572: IFFALSE 11582
// sPowell := true ;
11574: LD_ADDR_EXP 46
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// if p3 = 22 then
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 22
11589: EQUAL
11590: IFFALSE 11600
// sTeleport := true ;
11592: LD_ADDR_EXP 49
11596: PUSH
11597: LD_INT 1
11599: ST_TO_ADDR
// if p3 = 23 then
11600: LD_VAR 0 3
11604: PUSH
11605: LD_INT 23
11607: EQUAL
11608: IFFALSE 11618
// sOilTower := true ;
11610: LD_ADDR_EXP 51
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// if p3 = 24 then
11618: LD_VAR 0 3
11622: PUSH
11623: LD_INT 24
11625: EQUAL
11626: IFFALSE 11636
// sShovel := true ;
11628: LD_ADDR_EXP 52
11632: PUSH
11633: LD_INT 1
11635: ST_TO_ADDR
// if p3 = 25 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 25
11643: EQUAL
11644: IFFALSE 11654
// sSheik := true ;
11646: LD_ADDR_EXP 53
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// if p3 = 26 then
11654: LD_VAR 0 3
11658: PUSH
11659: LD_INT 26
11661: EQUAL
11662: IFFALSE 11672
// sEarthquake := true ;
11664: LD_ADDR_EXP 55
11668: PUSH
11669: LD_INT 1
11671: ST_TO_ADDR
// if p3 = 27 then
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 27
11679: EQUAL
11680: IFFALSE 11690
// sAI := true ;
11682: LD_ADDR_EXP 56
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// if p3 = 28 then
11690: LD_VAR 0 3
11694: PUSH
11695: LD_INT 28
11697: EQUAL
11698: IFFALSE 11708
// sCargo := true ;
11700: LD_ADDR_EXP 59
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// if p3 = 29 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 29
11715: EQUAL
11716: IFFALSE 11726
// sDLaser := true ;
11718: LD_ADDR_EXP 60
11722: PUSH
11723: LD_INT 1
11725: ST_TO_ADDR
// if p3 = 30 then
11726: LD_VAR 0 3
11730: PUSH
11731: LD_INT 30
11733: EQUAL
11734: IFFALSE 11744
// sExchange := true ;
11736: LD_ADDR_EXP 61
11740: PUSH
11741: LD_INT 1
11743: ST_TO_ADDR
// if p3 = 31 then
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 31
11751: EQUAL
11752: IFFALSE 11762
// sFac := true ;
11754: LD_ADDR_EXP 62
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if p3 = 32 then
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 32
11769: EQUAL
11770: IFFALSE 11780
// sPower := true ;
11772: LD_ADDR_EXP 63
11776: PUSH
11777: LD_INT 1
11779: ST_TO_ADDR
// if p3 = 33 then
11780: LD_VAR 0 3
11784: PUSH
11785: LD_INT 33
11787: EQUAL
11788: IFFALSE 11798
// sRandom := true ;
11790: LD_ADDR_EXP 64
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// if p3 = 34 then
11798: LD_VAR 0 3
11802: PUSH
11803: LD_INT 34
11805: EQUAL
11806: IFFALSE 11816
// sShield := true ;
11808: LD_ADDR_EXP 65
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// if p3 = 35 then
11816: LD_VAR 0 3
11820: PUSH
11821: LD_INT 35
11823: EQUAL
11824: IFFALSE 11834
// sTime := true ;
11826: LD_ADDR_EXP 66
11830: PUSH
11831: LD_INT 1
11833: ST_TO_ADDR
// if p3 = 36 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_INT 36
11841: EQUAL
11842: IFFALSE 11852
// sTools := true ;
11844: LD_ADDR_EXP 67
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// if p3 = 101 then
11852: LD_VAR 0 3
11856: PUSH
11857: LD_INT 101
11859: EQUAL
11860: IFFALSE 11870
// sSold := true ;
11862: LD_ADDR_EXP 32
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if p3 = 102 then
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 102
11877: EQUAL
11878: IFFALSE 11888
// sDiff := true ;
11880: LD_ADDR_EXP 33
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// if p3 = 103 then
11888: LD_VAR 0 3
11892: PUSH
11893: LD_INT 103
11895: EQUAL
11896: IFFALSE 11906
// sFog := true ;
11898: LD_ADDR_EXP 36
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// if p3 = 104 then
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 104
11913: EQUAL
11914: IFFALSE 11924
// sReset := true ;
11916: LD_ADDR_EXP 37
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// if p3 = 105 then
11924: LD_VAR 0 3
11928: PUSH
11929: LD_INT 105
11931: EQUAL
11932: IFFALSE 11942
// sSun := true ;
11934: LD_ADDR_EXP 38
11938: PUSH
11939: LD_INT 1
11941: ST_TO_ADDR
// if p3 = 106 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 106
11949: EQUAL
11950: IFFALSE 11960
// sTiger := true ;
11952: LD_ADDR_EXP 34
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if p3 = 107 then
11960: LD_VAR 0 3
11964: PUSH
11965: LD_INT 107
11967: EQUAL
11968: IFFALSE 11978
// sBomb := true ;
11970: LD_ADDR_EXP 35
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// if p3 = 108 then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_INT 108
11985: EQUAL
11986: IFFALSE 11996
// sWound := true ;
11988: LD_ADDR_EXP 43
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// if p3 = 109 then
11996: LD_VAR 0 3
12000: PUSH
12001: LD_INT 109
12003: EQUAL
12004: IFFALSE 12014
// sBetray := true ;
12006: LD_ADDR_EXP 47
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// if p3 = 110 then
12014: LD_VAR 0 3
12018: PUSH
12019: LD_INT 110
12021: EQUAL
12022: IFFALSE 12032
// sContamin := true ;
12024: LD_ADDR_EXP 48
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// if p3 = 111 then
12032: LD_VAR 0 3
12036: PUSH
12037: LD_INT 111
12039: EQUAL
12040: IFFALSE 12050
// sOil := true ;
12042: LD_ADDR_EXP 50
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// if p3 = 112 then
12050: LD_VAR 0 3
12054: PUSH
12055: LD_INT 112
12057: EQUAL
12058: IFFALSE 12068
// sStu := true ;
12060: LD_ADDR_EXP 54
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// if p3 = 113 then
12068: LD_VAR 0 3
12072: PUSH
12073: LD_INT 113
12075: EQUAL
12076: IFFALSE 12086
// sBazooka := true ;
12078: LD_ADDR_EXP 57
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// if p3 = 114 then
12086: LD_VAR 0 3
12090: PUSH
12091: LD_INT 114
12093: EQUAL
12094: IFFALSE 12104
// sMortar := true ;
12096: LD_ADDR_EXP 58
12100: PUSH
12101: LD_INT 1
12103: ST_TO_ADDR
// if p3 = 115 then
12104: LD_VAR 0 3
12108: PUSH
12109: LD_INT 115
12111: EQUAL
12112: IFFALSE 12122
// sRanger := true ;
12114: LD_ADDR_EXP 68
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// if p3 = 116 then
12122: LD_VAR 0 3
12126: PUSH
12127: LD_INT 116
12129: EQUAL
12130: IFFALSE 12140
// sComputer := true ;
12132: LD_ADDR_EXP 69
12136: PUSH
12137: LD_INT 1
12139: ST_TO_ADDR
// if p3 = 117 then
12140: LD_VAR 0 3
12144: PUSH
12145: LD_INT 117
12147: EQUAL
12148: IFFALSE 12158
// s30 := true ;
12150: LD_ADDR_EXP 70
12154: PUSH
12155: LD_INT 1
12157: ST_TO_ADDR
// if p3 = 118 then
12158: LD_VAR 0 3
12162: PUSH
12163: LD_INT 118
12165: EQUAL
12166: IFFALSE 12176
// s60 := true ;
12168: LD_ADDR_EXP 71
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// end ; if p2 = hack_mode then
12176: LD_VAR 0 2
12180: PUSH
12181: LD_INT 101
12183: EQUAL
12184: IFFALSE 12312
// begin case p3 of 1 :
12186: LD_VAR 0 3
12190: PUSH
12191: LD_INT 1
12193: DOUBLE
12194: EQUAL
12195: IFTRUE 12199
12197: GO 12206
12199: POP
// hHackUnlimitedResources ; 2 :
12200: CALL 24575 0 0
12204: GO 12312
12206: LD_INT 2
12208: DOUBLE
12209: EQUAL
12210: IFTRUE 12214
12212: GO 12221
12214: POP
// hHackSetLevel10 ; 3 :
12215: CALL 24708 0 0
12219: GO 12312
12221: LD_INT 3
12223: DOUBLE
12224: EQUAL
12225: IFTRUE 12229
12227: GO 12236
12229: POP
// hHackSetLevel10YourUnits ; 4 :
12230: CALL 24793 0 0
12234: GO 12312
12236: LD_INT 4
12238: DOUBLE
12239: EQUAL
12240: IFTRUE 12244
12242: GO 12251
12244: POP
// hHackInvincible ; 5 :
12245: CALL 25241 0 0
12249: GO 12312
12251: LD_INT 5
12253: DOUBLE
12254: EQUAL
12255: IFTRUE 12259
12257: GO 12266
12259: POP
// hHackInvisible ; 6 :
12260: CALL 25352 0 0
12264: GO 12312
12266: LD_INT 6
12268: DOUBLE
12269: EQUAL
12270: IFTRUE 12274
12272: GO 12281
12274: POP
// hHackChangeYourSide ; 7 :
12275: CALL 25409 0 0
12279: GO 12312
12281: LD_INT 7
12283: DOUBLE
12284: EQUAL
12285: IFTRUE 12289
12287: GO 12296
12289: POP
// hHackChangeUnitSide ; 8 :
12290: CALL 25451 0 0
12294: GO 12312
12296: LD_INT 8
12298: DOUBLE
12299: EQUAL
12300: IFTRUE 12304
12302: GO 12311
12304: POP
// hHackFog ; end ;
12305: CALL 25552 0 0
12309: GO 12312
12311: POP
// end ; if p2 = game_save_mode then
12312: LD_VAR 0 2
12316: PUSH
12317: LD_INT 102
12319: EQUAL
12320: IFFALSE 12377
// begin if p3 = 1 then
12322: LD_VAR 0 3
12326: PUSH
12327: LD_INT 1
12329: EQUAL
12330: IFFALSE 12342
// globalGameSaveCounter := p4 ;
12332: LD_ADDR_EXP 14
12336: PUSH
12337: LD_VAR 0 4
12341: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12342: LD_VAR 0 3
12346: PUSH
12347: LD_INT 2
12349: EQUAL
12350: IFFALSE 12358
12352: PUSH
12353: LD_EXP 14
12357: AND
12358: IFFALSE 12377
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12360: LD_STRING setGameSaveCounter(
12362: PUSH
12363: LD_EXP 14
12367: STR
12368: PUSH
12369: LD_STRING )
12371: STR
12372: PPUSH
12373: CALL_OW 559
// end ; end ;
12377: LD_VAR 0 7
12381: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12382: LD_INT 0
12384: PPUSH
// streamModeActive := false ;
12385: LD_ADDR_EXP 15
12389: PUSH
12390: LD_INT 0
12392: ST_TO_ADDR
// normalCounter := 36 ;
12393: LD_ADDR_EXP 16
12397: PUSH
12398: LD_INT 36
12400: ST_TO_ADDR
// hardcoreCounter := 18 ;
12401: LD_ADDR_EXP 17
12405: PUSH
12406: LD_INT 18
12408: ST_TO_ADDR
// sRocket := false ;
12409: LD_ADDR_EXP 20
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sSpeed := false ;
12417: LD_ADDR_EXP 19
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sEngine := false ;
12425: LD_ADDR_EXP 21
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sSpec := false ;
12433: LD_ADDR_EXP 18
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sLevel := false ;
12441: LD_ADDR_EXP 22
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sArmoury := false ;
12449: LD_ADDR_EXP 23
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sRadar := false ;
12457: LD_ADDR_EXP 24
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sBunker := false ;
12465: LD_ADDR_EXP 25
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sHack := false ;
12473: LD_ADDR_EXP 26
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sFire := false ;
12481: LD_ADDR_EXP 27
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sRefresh := false ;
12489: LD_ADDR_EXP 28
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sExp := false ;
12497: LD_ADDR_EXP 29
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sDepot := false ;
12505: LD_ADDR_EXP 30
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sFlag := false ;
12513: LD_ADDR_EXP 31
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sKamikadze := false ;
12521: LD_ADDR_EXP 39
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sTroll := false ;
12529: LD_ADDR_EXP 40
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sSlow := false ;
12537: LD_ADDR_EXP 41
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sLack := false ;
12545: LD_ADDR_EXP 42
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sTank := false ;
12553: LD_ADDR_EXP 44
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sRemote := false ;
12561: LD_ADDR_EXP 45
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sPowell := false ;
12569: LD_ADDR_EXP 46
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sTeleport := false ;
12577: LD_ADDR_EXP 49
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sOilTower := false ;
12585: LD_ADDR_EXP 51
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sShovel := false ;
12593: LD_ADDR_EXP 52
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sSheik := false ;
12601: LD_ADDR_EXP 53
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sEarthquake := false ;
12609: LD_ADDR_EXP 55
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sAI := false ;
12617: LD_ADDR_EXP 56
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sCargo := false ;
12625: LD_ADDR_EXP 59
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sDLaser := false ;
12633: LD_ADDR_EXP 60
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sExchange := false ;
12641: LD_ADDR_EXP 61
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sFac := false ;
12649: LD_ADDR_EXP 62
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sPower := false ;
12657: LD_ADDR_EXP 63
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sRandom := false ;
12665: LD_ADDR_EXP 64
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sShield := false ;
12673: LD_ADDR_EXP 65
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sTime := false ;
12681: LD_ADDR_EXP 66
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sTools := false ;
12689: LD_ADDR_EXP 67
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sSold := false ;
12697: LD_ADDR_EXP 32
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sDiff := false ;
12705: LD_ADDR_EXP 33
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sFog := false ;
12713: LD_ADDR_EXP 36
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sReset := false ;
12721: LD_ADDR_EXP 37
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sSun := false ;
12729: LD_ADDR_EXP 38
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sTiger := false ;
12737: LD_ADDR_EXP 34
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sBomb := false ;
12745: LD_ADDR_EXP 35
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sWound := false ;
12753: LD_ADDR_EXP 43
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sBetray := false ;
12761: LD_ADDR_EXP 47
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sContamin := false ;
12769: LD_ADDR_EXP 48
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sOil := false ;
12777: LD_ADDR_EXP 50
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sStu := false ;
12785: LD_ADDR_EXP 54
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sBazooka := false ;
12793: LD_ADDR_EXP 57
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sMortar := false ;
12801: LD_ADDR_EXP 58
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sRanger := false ;
12809: LD_ADDR_EXP 68
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// sComputer := false ;
12817: LD_ADDR_EXP 69
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// s30 := false ;
12825: LD_ADDR_EXP 70
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// s60 := false ;
12833: LD_ADDR_EXP 71
12837: PUSH
12838: LD_INT 0
12840: ST_TO_ADDR
// end ;
12841: LD_VAR 0 1
12845: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12846: LD_INT 0
12848: PPUSH
12849: PPUSH
12850: PPUSH
12851: PPUSH
12852: PPUSH
12853: PPUSH
12854: PPUSH
// result := [ ] ;
12855: LD_ADDR_VAR 0 2
12859: PUSH
12860: EMPTY
12861: ST_TO_ADDR
// if campaign_id = 1 then
12862: LD_OWVAR 69
12866: PUSH
12867: LD_INT 1
12869: EQUAL
12870: IFFALSE 16036
// begin case mission_number of 1 :
12872: LD_OWVAR 70
12876: PUSH
12877: LD_INT 1
12879: DOUBLE
12880: EQUAL
12881: IFTRUE 12885
12883: GO 12961
12885: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12886: LD_ADDR_VAR 0 2
12890: PUSH
12891: LD_INT 2
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: LD_INT 11
12899: PUSH
12900: LD_INT 12
12902: PUSH
12903: LD_INT 15
12905: PUSH
12906: LD_INT 16
12908: PUSH
12909: LD_INT 22
12911: PUSH
12912: LD_INT 23
12914: PUSH
12915: LD_INT 26
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 101
12931: PUSH
12932: LD_INT 102
12934: PUSH
12935: LD_INT 106
12937: PUSH
12938: LD_INT 116
12940: PUSH
12941: LD_INT 117
12943: PUSH
12944: LD_INT 118
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: ST_TO_ADDR
12959: GO 16034
12961: LD_INT 2
12963: DOUBLE
12964: EQUAL
12965: IFTRUE 12969
12967: GO 13053
12969: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_INT 2
12977: PUSH
12978: LD_INT 4
12980: PUSH
12981: LD_INT 11
12983: PUSH
12984: LD_INT 12
12986: PUSH
12987: LD_INT 15
12989: PUSH
12990: LD_INT 16
12992: PUSH
12993: LD_INT 22
12995: PUSH
12996: LD_INT 23
12998: PUSH
12999: LD_INT 26
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 101
13015: PUSH
13016: LD_INT 102
13018: PUSH
13019: LD_INT 105
13021: PUSH
13022: LD_INT 106
13024: PUSH
13025: LD_INT 108
13027: PUSH
13028: LD_INT 116
13030: PUSH
13031: LD_INT 117
13033: PUSH
13034: LD_INT 118
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: ST_TO_ADDR
13051: GO 16034
13053: LD_INT 3
13055: DOUBLE
13056: EQUAL
13057: IFTRUE 13061
13059: GO 13149
13061: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13062: LD_ADDR_VAR 0 2
13066: PUSH
13067: LD_INT 2
13069: PUSH
13070: LD_INT 4
13072: PUSH
13073: LD_INT 5
13075: PUSH
13076: LD_INT 11
13078: PUSH
13079: LD_INT 12
13081: PUSH
13082: LD_INT 15
13084: PUSH
13085: LD_INT 16
13087: PUSH
13088: LD_INT 22
13090: PUSH
13091: LD_INT 26
13093: PUSH
13094: LD_INT 36
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 101
13111: PUSH
13112: LD_INT 102
13114: PUSH
13115: LD_INT 105
13117: PUSH
13118: LD_INT 106
13120: PUSH
13121: LD_INT 108
13123: PUSH
13124: LD_INT 116
13126: PUSH
13127: LD_INT 117
13129: PUSH
13130: LD_INT 118
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: ST_TO_ADDR
13147: GO 16034
13149: LD_INT 4
13151: DOUBLE
13152: EQUAL
13153: IFTRUE 13157
13155: GO 13253
13157: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13158: LD_ADDR_VAR 0 2
13162: PUSH
13163: LD_INT 2
13165: PUSH
13166: LD_INT 4
13168: PUSH
13169: LD_INT 5
13171: PUSH
13172: LD_INT 8
13174: PUSH
13175: LD_INT 11
13177: PUSH
13178: LD_INT 12
13180: PUSH
13181: LD_INT 15
13183: PUSH
13184: LD_INT 16
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_INT 23
13192: PUSH
13193: LD_INT 26
13195: PUSH
13196: LD_INT 36
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 101
13215: PUSH
13216: LD_INT 102
13218: PUSH
13219: LD_INT 105
13221: PUSH
13222: LD_INT 106
13224: PUSH
13225: LD_INT 108
13227: PUSH
13228: LD_INT 116
13230: PUSH
13231: LD_INT 117
13233: PUSH
13234: LD_INT 118
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: ST_TO_ADDR
13251: GO 16034
13253: LD_INT 5
13255: DOUBLE
13256: EQUAL
13257: IFTRUE 13261
13259: GO 13373
13261: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13262: LD_ADDR_VAR 0 2
13266: PUSH
13267: LD_INT 2
13269: PUSH
13270: LD_INT 4
13272: PUSH
13273: LD_INT 5
13275: PUSH
13276: LD_INT 6
13278: PUSH
13279: LD_INT 8
13281: PUSH
13282: LD_INT 11
13284: PUSH
13285: LD_INT 12
13287: PUSH
13288: LD_INT 15
13290: PUSH
13291: LD_INT 16
13293: PUSH
13294: LD_INT 22
13296: PUSH
13297: LD_INT 23
13299: PUSH
13300: LD_INT 25
13302: PUSH
13303: LD_INT 26
13305: PUSH
13306: LD_INT 36
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 101
13327: PUSH
13328: LD_INT 102
13330: PUSH
13331: LD_INT 105
13333: PUSH
13334: LD_INT 106
13336: PUSH
13337: LD_INT 108
13339: PUSH
13340: LD_INT 109
13342: PUSH
13343: LD_INT 112
13345: PUSH
13346: LD_INT 116
13348: PUSH
13349: LD_INT 117
13351: PUSH
13352: LD_INT 118
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: ST_TO_ADDR
13371: GO 16034
13373: LD_INT 6
13375: DOUBLE
13376: EQUAL
13377: IFTRUE 13381
13379: GO 13513
13381: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13382: LD_ADDR_VAR 0 2
13386: PUSH
13387: LD_INT 2
13389: PUSH
13390: LD_INT 4
13392: PUSH
13393: LD_INT 5
13395: PUSH
13396: LD_INT 6
13398: PUSH
13399: LD_INT 8
13401: PUSH
13402: LD_INT 11
13404: PUSH
13405: LD_INT 12
13407: PUSH
13408: LD_INT 15
13410: PUSH
13411: LD_INT 16
13413: PUSH
13414: LD_INT 20
13416: PUSH
13417: LD_INT 21
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_INT 23
13425: PUSH
13426: LD_INT 25
13428: PUSH
13429: LD_INT 26
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 31
13437: PUSH
13438: LD_INT 32
13440: PUSH
13441: LD_INT 36
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: PUSH
13465: LD_INT 101
13467: PUSH
13468: LD_INT 102
13470: PUSH
13471: LD_INT 105
13473: PUSH
13474: LD_INT 106
13476: PUSH
13477: LD_INT 108
13479: PUSH
13480: LD_INT 109
13482: PUSH
13483: LD_INT 112
13485: PUSH
13486: LD_INT 116
13488: PUSH
13489: LD_INT 117
13491: PUSH
13492: LD_INT 118
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: ST_TO_ADDR
13511: GO 16034
13513: LD_INT 7
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13633
13521: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13522: LD_ADDR_VAR 0 2
13526: PUSH
13527: LD_INT 2
13529: PUSH
13530: LD_INT 4
13532: PUSH
13533: LD_INT 5
13535: PUSH
13536: LD_INT 7
13538: PUSH
13539: LD_INT 11
13541: PUSH
13542: LD_INT 12
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 20
13553: PUSH
13554: LD_INT 21
13556: PUSH
13557: LD_INT 22
13559: PUSH
13560: LD_INT 23
13562: PUSH
13563: LD_INT 25
13565: PUSH
13566: LD_INT 26
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 101
13587: PUSH
13588: LD_INT 102
13590: PUSH
13591: LD_INT 103
13593: PUSH
13594: LD_INT 105
13596: PUSH
13597: LD_INT 106
13599: PUSH
13600: LD_INT 108
13602: PUSH
13603: LD_INT 112
13605: PUSH
13606: LD_INT 116
13608: PUSH
13609: LD_INT 117
13611: PUSH
13612: LD_INT 118
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: ST_TO_ADDR
13631: GO 16034
13633: LD_INT 8
13635: DOUBLE
13636: EQUAL
13637: IFTRUE 13641
13639: GO 13781
13641: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13642: LD_ADDR_VAR 0 2
13646: PUSH
13647: LD_INT 2
13649: PUSH
13650: LD_INT 4
13652: PUSH
13653: LD_INT 5
13655: PUSH
13656: LD_INT 6
13658: PUSH
13659: LD_INT 7
13661: PUSH
13662: LD_INT 8
13664: PUSH
13665: LD_INT 11
13667: PUSH
13668: LD_INT 12
13670: PUSH
13671: LD_INT 15
13673: PUSH
13674: LD_INT 16
13676: PUSH
13677: LD_INT 20
13679: PUSH
13680: LD_INT 21
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_INT 23
13688: PUSH
13689: LD_INT 25
13691: PUSH
13692: LD_INT 26
13694: PUSH
13695: LD_INT 30
13697: PUSH
13698: LD_INT 31
13700: PUSH
13701: LD_INT 32
13703: PUSH
13704: LD_INT 36
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 101
13731: PUSH
13732: LD_INT 102
13734: PUSH
13735: LD_INT 103
13737: PUSH
13738: LD_INT 105
13740: PUSH
13741: LD_INT 106
13743: PUSH
13744: LD_INT 108
13746: PUSH
13747: LD_INT 109
13749: PUSH
13750: LD_INT 112
13752: PUSH
13753: LD_INT 116
13755: PUSH
13756: LD_INT 117
13758: PUSH
13759: LD_INT 118
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: ST_TO_ADDR
13779: GO 16034
13781: LD_INT 9
13783: DOUBLE
13784: EQUAL
13785: IFTRUE 13789
13787: GO 13937
13789: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13790: LD_ADDR_VAR 0 2
13794: PUSH
13795: LD_INT 2
13797: PUSH
13798: LD_INT 4
13800: PUSH
13801: LD_INT 5
13803: PUSH
13804: LD_INT 6
13806: PUSH
13807: LD_INT 7
13809: PUSH
13810: LD_INT 8
13812: PUSH
13813: LD_INT 11
13815: PUSH
13816: LD_INT 12
13818: PUSH
13819: LD_INT 15
13821: PUSH
13822: LD_INT 16
13824: PUSH
13825: LD_INT 20
13827: PUSH
13828: LD_INT 21
13830: PUSH
13831: LD_INT 22
13833: PUSH
13834: LD_INT 23
13836: PUSH
13837: LD_INT 25
13839: PUSH
13840: LD_INT 26
13842: PUSH
13843: LD_INT 28
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: LD_INT 31
13851: PUSH
13852: LD_INT 32
13854: PUSH
13855: LD_INT 36
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 101
13883: PUSH
13884: LD_INT 102
13886: PUSH
13887: LD_INT 103
13889: PUSH
13890: LD_INT 105
13892: PUSH
13893: LD_INT 106
13895: PUSH
13896: LD_INT 108
13898: PUSH
13899: LD_INT 109
13901: PUSH
13902: LD_INT 112
13904: PUSH
13905: LD_INT 114
13907: PUSH
13908: LD_INT 116
13910: PUSH
13911: LD_INT 117
13913: PUSH
13914: LD_INT 118
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: ST_TO_ADDR
13935: GO 16034
13937: LD_INT 10
13939: DOUBLE
13940: EQUAL
13941: IFTRUE 13945
13943: GO 14141
13945: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13946: LD_ADDR_VAR 0 2
13950: PUSH
13951: LD_INT 2
13953: PUSH
13954: LD_INT 4
13956: PUSH
13957: LD_INT 5
13959: PUSH
13960: LD_INT 6
13962: PUSH
13963: LD_INT 7
13965: PUSH
13966: LD_INT 8
13968: PUSH
13969: LD_INT 9
13971: PUSH
13972: LD_INT 10
13974: PUSH
13975: LD_INT 11
13977: PUSH
13978: LD_INT 12
13980: PUSH
13981: LD_INT 13
13983: PUSH
13984: LD_INT 14
13986: PUSH
13987: LD_INT 15
13989: PUSH
13990: LD_INT 16
13992: PUSH
13993: LD_INT 17
13995: PUSH
13996: LD_INT 18
13998: PUSH
13999: LD_INT 19
14001: PUSH
14002: LD_INT 20
14004: PUSH
14005: LD_INT 21
14007: PUSH
14008: LD_INT 22
14010: PUSH
14011: LD_INT 23
14013: PUSH
14014: LD_INT 24
14016: PUSH
14017: LD_INT 25
14019: PUSH
14020: LD_INT 26
14022: PUSH
14023: LD_INT 28
14025: PUSH
14026: LD_INT 30
14028: PUSH
14029: LD_INT 31
14031: PUSH
14032: LD_INT 32
14034: PUSH
14035: LD_INT 36
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 101
14071: PUSH
14072: LD_INT 102
14074: PUSH
14075: LD_INT 103
14077: PUSH
14078: LD_INT 104
14080: PUSH
14081: LD_INT 105
14083: PUSH
14084: LD_INT 106
14086: PUSH
14087: LD_INT 107
14089: PUSH
14090: LD_INT 108
14092: PUSH
14093: LD_INT 109
14095: PUSH
14096: LD_INT 110
14098: PUSH
14099: LD_INT 111
14101: PUSH
14102: LD_INT 112
14104: PUSH
14105: LD_INT 114
14107: PUSH
14108: LD_INT 116
14110: PUSH
14111: LD_INT 117
14113: PUSH
14114: LD_INT 118
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: ST_TO_ADDR
14139: GO 16034
14141: LD_INT 11
14143: DOUBLE
14144: EQUAL
14145: IFTRUE 14149
14147: GO 14353
14149: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14150: LD_ADDR_VAR 0 2
14154: PUSH
14155: LD_INT 2
14157: PUSH
14158: LD_INT 3
14160: PUSH
14161: LD_INT 4
14163: PUSH
14164: LD_INT 5
14166: PUSH
14167: LD_INT 6
14169: PUSH
14170: LD_INT 7
14172: PUSH
14173: LD_INT 8
14175: PUSH
14176: LD_INT 9
14178: PUSH
14179: LD_INT 10
14181: PUSH
14182: LD_INT 11
14184: PUSH
14185: LD_INT 12
14187: PUSH
14188: LD_INT 13
14190: PUSH
14191: LD_INT 14
14193: PUSH
14194: LD_INT 15
14196: PUSH
14197: LD_INT 16
14199: PUSH
14200: LD_INT 17
14202: PUSH
14203: LD_INT 18
14205: PUSH
14206: LD_INT 19
14208: PUSH
14209: LD_INT 20
14211: PUSH
14212: LD_INT 21
14214: PUSH
14215: LD_INT 22
14217: PUSH
14218: LD_INT 23
14220: PUSH
14221: LD_INT 24
14223: PUSH
14224: LD_INT 25
14226: PUSH
14227: LD_INT 26
14229: PUSH
14230: LD_INT 28
14232: PUSH
14233: LD_INT 30
14235: PUSH
14236: LD_INT 31
14238: PUSH
14239: LD_INT 32
14241: PUSH
14242: LD_INT 34
14244: PUSH
14245: LD_INT 36
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: PUSH
14281: LD_INT 101
14283: PUSH
14284: LD_INT 102
14286: PUSH
14287: LD_INT 103
14289: PUSH
14290: LD_INT 104
14292: PUSH
14293: LD_INT 105
14295: PUSH
14296: LD_INT 106
14298: PUSH
14299: LD_INT 107
14301: PUSH
14302: LD_INT 108
14304: PUSH
14305: LD_INT 109
14307: PUSH
14308: LD_INT 110
14310: PUSH
14311: LD_INT 111
14313: PUSH
14314: LD_INT 112
14316: PUSH
14317: LD_INT 114
14319: PUSH
14320: LD_INT 116
14322: PUSH
14323: LD_INT 117
14325: PUSH
14326: LD_INT 118
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: ST_TO_ADDR
14351: GO 16034
14353: LD_INT 12
14355: DOUBLE
14356: EQUAL
14357: IFTRUE 14361
14359: GO 14581
14361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14362: LD_ADDR_VAR 0 2
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: LD_INT 4
14378: PUSH
14379: LD_INT 5
14381: PUSH
14382: LD_INT 6
14384: PUSH
14385: LD_INT 7
14387: PUSH
14388: LD_INT 8
14390: PUSH
14391: LD_INT 9
14393: PUSH
14394: LD_INT 10
14396: PUSH
14397: LD_INT 11
14399: PUSH
14400: LD_INT 12
14402: PUSH
14403: LD_INT 13
14405: PUSH
14406: LD_INT 14
14408: PUSH
14409: LD_INT 15
14411: PUSH
14412: LD_INT 16
14414: PUSH
14415: LD_INT 17
14417: PUSH
14418: LD_INT 18
14420: PUSH
14421: LD_INT 19
14423: PUSH
14424: LD_INT 20
14426: PUSH
14427: LD_INT 21
14429: PUSH
14430: LD_INT 22
14432: PUSH
14433: LD_INT 23
14435: PUSH
14436: LD_INT 24
14438: PUSH
14439: LD_INT 25
14441: PUSH
14442: LD_INT 26
14444: PUSH
14445: LD_INT 27
14447: PUSH
14448: LD_INT 28
14450: PUSH
14451: LD_INT 30
14453: PUSH
14454: LD_INT 31
14456: PUSH
14457: LD_INT 32
14459: PUSH
14460: LD_INT 33
14462: PUSH
14463: LD_INT 34
14465: PUSH
14466: LD_INT 36
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 101
14507: PUSH
14508: LD_INT 102
14510: PUSH
14511: LD_INT 103
14513: PUSH
14514: LD_INT 104
14516: PUSH
14517: LD_INT 105
14519: PUSH
14520: LD_INT 106
14522: PUSH
14523: LD_INT 107
14525: PUSH
14526: LD_INT 108
14528: PUSH
14529: LD_INT 109
14531: PUSH
14532: LD_INT 110
14534: PUSH
14535: LD_INT 111
14537: PUSH
14538: LD_INT 112
14540: PUSH
14541: LD_INT 113
14543: PUSH
14544: LD_INT 114
14546: PUSH
14547: LD_INT 116
14549: PUSH
14550: LD_INT 117
14552: PUSH
14553: LD_INT 118
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: ST_TO_ADDR
14579: GO 16034
14581: LD_INT 13
14583: DOUBLE
14584: EQUAL
14585: IFTRUE 14589
14587: GO 14797
14589: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14590: LD_ADDR_VAR 0 2
14594: PUSH
14595: LD_INT 1
14597: PUSH
14598: LD_INT 2
14600: PUSH
14601: LD_INT 3
14603: PUSH
14604: LD_INT 4
14606: PUSH
14607: LD_INT 5
14609: PUSH
14610: LD_INT 8
14612: PUSH
14613: LD_INT 9
14615: PUSH
14616: LD_INT 10
14618: PUSH
14619: LD_INT 11
14621: PUSH
14622: LD_INT 12
14624: PUSH
14625: LD_INT 14
14627: PUSH
14628: LD_INT 15
14630: PUSH
14631: LD_INT 16
14633: PUSH
14634: LD_INT 17
14636: PUSH
14637: LD_INT 18
14639: PUSH
14640: LD_INT 19
14642: PUSH
14643: LD_INT 20
14645: PUSH
14646: LD_INT 21
14648: PUSH
14649: LD_INT 22
14651: PUSH
14652: LD_INT 23
14654: PUSH
14655: LD_INT 24
14657: PUSH
14658: LD_INT 25
14660: PUSH
14661: LD_INT 26
14663: PUSH
14664: LD_INT 27
14666: PUSH
14667: LD_INT 28
14669: PUSH
14670: LD_INT 30
14672: PUSH
14673: LD_INT 31
14675: PUSH
14676: LD_INT 32
14678: PUSH
14679: LD_INT 33
14681: PUSH
14682: LD_INT 34
14684: PUSH
14685: LD_INT 36
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 101
14723: PUSH
14724: LD_INT 102
14726: PUSH
14727: LD_INT 103
14729: PUSH
14730: LD_INT 104
14732: PUSH
14733: LD_INT 105
14735: PUSH
14736: LD_INT 106
14738: PUSH
14739: LD_INT 107
14741: PUSH
14742: LD_INT 108
14744: PUSH
14745: LD_INT 109
14747: PUSH
14748: LD_INT 110
14750: PUSH
14751: LD_INT 111
14753: PUSH
14754: LD_INT 112
14756: PUSH
14757: LD_INT 113
14759: PUSH
14760: LD_INT 114
14762: PUSH
14763: LD_INT 116
14765: PUSH
14766: LD_INT 117
14768: PUSH
14769: LD_INT 118
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: ST_TO_ADDR
14795: GO 16034
14797: LD_INT 14
14799: DOUBLE
14800: EQUAL
14801: IFTRUE 14805
14803: GO 15029
14805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14806: LD_ADDR_VAR 0 2
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: LD_INT 4
14822: PUSH
14823: LD_INT 5
14825: PUSH
14826: LD_INT 6
14828: PUSH
14829: LD_INT 7
14831: PUSH
14832: LD_INT 8
14834: PUSH
14835: LD_INT 9
14837: PUSH
14838: LD_INT 10
14840: PUSH
14841: LD_INT 11
14843: PUSH
14844: LD_INT 12
14846: PUSH
14847: LD_INT 13
14849: PUSH
14850: LD_INT 14
14852: PUSH
14853: LD_INT 15
14855: PUSH
14856: LD_INT 16
14858: PUSH
14859: LD_INT 17
14861: PUSH
14862: LD_INT 18
14864: PUSH
14865: LD_INT 19
14867: PUSH
14868: LD_INT 20
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 22
14876: PUSH
14877: LD_INT 23
14879: PUSH
14880: LD_INT 24
14882: PUSH
14883: LD_INT 25
14885: PUSH
14886: LD_INT 26
14888: PUSH
14889: LD_INT 27
14891: PUSH
14892: LD_INT 28
14894: PUSH
14895: LD_INT 29
14897: PUSH
14898: LD_INT 30
14900: PUSH
14901: LD_INT 31
14903: PUSH
14904: LD_INT 32
14906: PUSH
14907: LD_INT 33
14909: PUSH
14910: LD_INT 34
14912: PUSH
14913: LD_INT 36
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 101
14955: PUSH
14956: LD_INT 102
14958: PUSH
14959: LD_INT 103
14961: PUSH
14962: LD_INT 104
14964: PUSH
14965: LD_INT 105
14967: PUSH
14968: LD_INT 106
14970: PUSH
14971: LD_INT 107
14973: PUSH
14974: LD_INT 108
14976: PUSH
14977: LD_INT 109
14979: PUSH
14980: LD_INT 110
14982: PUSH
14983: LD_INT 111
14985: PUSH
14986: LD_INT 112
14988: PUSH
14989: LD_INT 113
14991: PUSH
14992: LD_INT 114
14994: PUSH
14995: LD_INT 116
14997: PUSH
14998: LD_INT 117
15000: PUSH
15001: LD_INT 118
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: ST_TO_ADDR
15027: GO 16034
15029: LD_INT 15
15031: DOUBLE
15032: EQUAL
15033: IFTRUE 15037
15035: GO 15261
15037: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15038: LD_ADDR_VAR 0 2
15042: PUSH
15043: LD_INT 1
15045: PUSH
15046: LD_INT 2
15048: PUSH
15049: LD_INT 3
15051: PUSH
15052: LD_INT 4
15054: PUSH
15055: LD_INT 5
15057: PUSH
15058: LD_INT 6
15060: PUSH
15061: LD_INT 7
15063: PUSH
15064: LD_INT 8
15066: PUSH
15067: LD_INT 9
15069: PUSH
15070: LD_INT 10
15072: PUSH
15073: LD_INT 11
15075: PUSH
15076: LD_INT 12
15078: PUSH
15079: LD_INT 13
15081: PUSH
15082: LD_INT 14
15084: PUSH
15085: LD_INT 15
15087: PUSH
15088: LD_INT 16
15090: PUSH
15091: LD_INT 17
15093: PUSH
15094: LD_INT 18
15096: PUSH
15097: LD_INT 19
15099: PUSH
15100: LD_INT 20
15102: PUSH
15103: LD_INT 21
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_INT 23
15111: PUSH
15112: LD_INT 24
15114: PUSH
15115: LD_INT 25
15117: PUSH
15118: LD_INT 26
15120: PUSH
15121: LD_INT 27
15123: PUSH
15124: LD_INT 28
15126: PUSH
15127: LD_INT 29
15129: PUSH
15130: LD_INT 30
15132: PUSH
15133: LD_INT 31
15135: PUSH
15136: LD_INT 32
15138: PUSH
15139: LD_INT 33
15141: PUSH
15142: LD_INT 34
15144: PUSH
15145: LD_INT 36
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 101
15187: PUSH
15188: LD_INT 102
15190: PUSH
15191: LD_INT 103
15193: PUSH
15194: LD_INT 104
15196: PUSH
15197: LD_INT 105
15199: PUSH
15200: LD_INT 106
15202: PUSH
15203: LD_INT 107
15205: PUSH
15206: LD_INT 108
15208: PUSH
15209: LD_INT 109
15211: PUSH
15212: LD_INT 110
15214: PUSH
15215: LD_INT 111
15217: PUSH
15218: LD_INT 112
15220: PUSH
15221: LD_INT 113
15223: PUSH
15224: LD_INT 114
15226: PUSH
15227: LD_INT 116
15229: PUSH
15230: LD_INT 117
15232: PUSH
15233: LD_INT 118
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: ST_TO_ADDR
15259: GO 16034
15261: LD_INT 16
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 15405
15269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15270: LD_ADDR_VAR 0 2
15274: PUSH
15275: LD_INT 2
15277: PUSH
15278: LD_INT 4
15280: PUSH
15281: LD_INT 5
15283: PUSH
15284: LD_INT 7
15286: PUSH
15287: LD_INT 11
15289: PUSH
15290: LD_INT 12
15292: PUSH
15293: LD_INT 15
15295: PUSH
15296: LD_INT 16
15298: PUSH
15299: LD_INT 20
15301: PUSH
15302: LD_INT 21
15304: PUSH
15305: LD_INT 22
15307: PUSH
15308: LD_INT 23
15310: PUSH
15311: LD_INT 25
15313: PUSH
15314: LD_INT 26
15316: PUSH
15317: LD_INT 30
15319: PUSH
15320: LD_INT 31
15322: PUSH
15323: LD_INT 32
15325: PUSH
15326: LD_INT 33
15328: PUSH
15329: LD_INT 34
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 101
15355: PUSH
15356: LD_INT 102
15358: PUSH
15359: LD_INT 103
15361: PUSH
15362: LD_INT 106
15364: PUSH
15365: LD_INT 108
15367: PUSH
15368: LD_INT 112
15370: PUSH
15371: LD_INT 113
15373: PUSH
15374: LD_INT 114
15376: PUSH
15377: LD_INT 116
15379: PUSH
15380: LD_INT 117
15382: PUSH
15383: LD_INT 118
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: ST_TO_ADDR
15403: GO 16034
15405: LD_INT 17
15407: DOUBLE
15408: EQUAL
15409: IFTRUE 15413
15411: GO 15637
15413: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15414: LD_ADDR_VAR 0 2
15418: PUSH
15419: LD_INT 1
15421: PUSH
15422: LD_INT 2
15424: PUSH
15425: LD_INT 3
15427: PUSH
15428: LD_INT 4
15430: PUSH
15431: LD_INT 5
15433: PUSH
15434: LD_INT 6
15436: PUSH
15437: LD_INT 7
15439: PUSH
15440: LD_INT 8
15442: PUSH
15443: LD_INT 9
15445: PUSH
15446: LD_INT 10
15448: PUSH
15449: LD_INT 11
15451: PUSH
15452: LD_INT 12
15454: PUSH
15455: LD_INT 13
15457: PUSH
15458: LD_INT 14
15460: PUSH
15461: LD_INT 15
15463: PUSH
15464: LD_INT 16
15466: PUSH
15467: LD_INT 17
15469: PUSH
15470: LD_INT 18
15472: PUSH
15473: LD_INT 19
15475: PUSH
15476: LD_INT 20
15478: PUSH
15479: LD_INT 21
15481: PUSH
15482: LD_INT 22
15484: PUSH
15485: LD_INT 23
15487: PUSH
15488: LD_INT 24
15490: PUSH
15491: LD_INT 25
15493: PUSH
15494: LD_INT 26
15496: PUSH
15497: LD_INT 27
15499: PUSH
15500: LD_INT 28
15502: PUSH
15503: LD_INT 29
15505: PUSH
15506: LD_INT 30
15508: PUSH
15509: LD_INT 31
15511: PUSH
15512: LD_INT 32
15514: PUSH
15515: LD_INT 33
15517: PUSH
15518: LD_INT 34
15520: PUSH
15521: LD_INT 36
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 101
15563: PUSH
15564: LD_INT 102
15566: PUSH
15567: LD_INT 103
15569: PUSH
15570: LD_INT 104
15572: PUSH
15573: LD_INT 105
15575: PUSH
15576: LD_INT 106
15578: PUSH
15579: LD_INT 107
15581: PUSH
15582: LD_INT 108
15584: PUSH
15585: LD_INT 109
15587: PUSH
15588: LD_INT 110
15590: PUSH
15591: LD_INT 111
15593: PUSH
15594: LD_INT 112
15596: PUSH
15597: LD_INT 113
15599: PUSH
15600: LD_INT 114
15602: PUSH
15603: LD_INT 116
15605: PUSH
15606: LD_INT 117
15608: PUSH
15609: LD_INT 118
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: ST_TO_ADDR
15635: GO 16034
15637: LD_INT 18
15639: DOUBLE
15640: EQUAL
15641: IFTRUE 15645
15643: GO 15793
15645: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15646: LD_ADDR_VAR 0 2
15650: PUSH
15651: LD_INT 2
15653: PUSH
15654: LD_INT 4
15656: PUSH
15657: LD_INT 5
15659: PUSH
15660: LD_INT 7
15662: PUSH
15663: LD_INT 11
15665: PUSH
15666: LD_INT 12
15668: PUSH
15669: LD_INT 15
15671: PUSH
15672: LD_INT 16
15674: PUSH
15675: LD_INT 20
15677: PUSH
15678: LD_INT 21
15680: PUSH
15681: LD_INT 22
15683: PUSH
15684: LD_INT 23
15686: PUSH
15687: LD_INT 25
15689: PUSH
15690: LD_INT 26
15692: PUSH
15693: LD_INT 30
15695: PUSH
15696: LD_INT 31
15698: PUSH
15699: LD_INT 32
15701: PUSH
15702: LD_INT 33
15704: PUSH
15705: LD_INT 34
15707: PUSH
15708: LD_INT 35
15710: PUSH
15711: LD_INT 36
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 101
15739: PUSH
15740: LD_INT 102
15742: PUSH
15743: LD_INT 103
15745: PUSH
15746: LD_INT 106
15748: PUSH
15749: LD_INT 108
15751: PUSH
15752: LD_INT 112
15754: PUSH
15755: LD_INT 113
15757: PUSH
15758: LD_INT 114
15760: PUSH
15761: LD_INT 115
15763: PUSH
15764: LD_INT 116
15766: PUSH
15767: LD_INT 117
15769: PUSH
15770: LD_INT 118
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: ST_TO_ADDR
15791: GO 16034
15793: LD_INT 19
15795: DOUBLE
15796: EQUAL
15797: IFTRUE 15801
15799: GO 16033
15801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15802: LD_ADDR_VAR 0 2
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: LD_INT 2
15812: PUSH
15813: LD_INT 3
15815: PUSH
15816: LD_INT 4
15818: PUSH
15819: LD_INT 5
15821: PUSH
15822: LD_INT 6
15824: PUSH
15825: LD_INT 7
15827: PUSH
15828: LD_INT 8
15830: PUSH
15831: LD_INT 9
15833: PUSH
15834: LD_INT 10
15836: PUSH
15837: LD_INT 11
15839: PUSH
15840: LD_INT 12
15842: PUSH
15843: LD_INT 13
15845: PUSH
15846: LD_INT 14
15848: PUSH
15849: LD_INT 15
15851: PUSH
15852: LD_INT 16
15854: PUSH
15855: LD_INT 17
15857: PUSH
15858: LD_INT 18
15860: PUSH
15861: LD_INT 19
15863: PUSH
15864: LD_INT 20
15866: PUSH
15867: LD_INT 21
15869: PUSH
15870: LD_INT 22
15872: PUSH
15873: LD_INT 23
15875: PUSH
15876: LD_INT 24
15878: PUSH
15879: LD_INT 25
15881: PUSH
15882: LD_INT 26
15884: PUSH
15885: LD_INT 27
15887: PUSH
15888: LD_INT 28
15890: PUSH
15891: LD_INT 29
15893: PUSH
15894: LD_INT 30
15896: PUSH
15897: LD_INT 31
15899: PUSH
15900: LD_INT 32
15902: PUSH
15903: LD_INT 33
15905: PUSH
15906: LD_INT 34
15908: PUSH
15909: LD_INT 35
15911: PUSH
15912: LD_INT 36
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 101
15955: PUSH
15956: LD_INT 102
15958: PUSH
15959: LD_INT 103
15961: PUSH
15962: LD_INT 104
15964: PUSH
15965: LD_INT 105
15967: PUSH
15968: LD_INT 106
15970: PUSH
15971: LD_INT 107
15973: PUSH
15974: LD_INT 108
15976: PUSH
15977: LD_INT 109
15979: PUSH
15980: LD_INT 110
15982: PUSH
15983: LD_INT 111
15985: PUSH
15986: LD_INT 112
15988: PUSH
15989: LD_INT 113
15991: PUSH
15992: LD_INT 114
15994: PUSH
15995: LD_INT 115
15997: PUSH
15998: LD_INT 116
16000: PUSH
16001: LD_INT 117
16003: PUSH
16004: LD_INT 118
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: ST_TO_ADDR
16031: GO 16034
16033: POP
// end else
16034: GO 16265
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16036: LD_ADDR_VAR 0 2
16040: PUSH
16041: LD_INT 1
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: LD_INT 3
16049: PUSH
16050: LD_INT 4
16052: PUSH
16053: LD_INT 5
16055: PUSH
16056: LD_INT 6
16058: PUSH
16059: LD_INT 7
16061: PUSH
16062: LD_INT 8
16064: PUSH
16065: LD_INT 9
16067: PUSH
16068: LD_INT 10
16070: PUSH
16071: LD_INT 11
16073: PUSH
16074: LD_INT 12
16076: PUSH
16077: LD_INT 13
16079: PUSH
16080: LD_INT 14
16082: PUSH
16083: LD_INT 15
16085: PUSH
16086: LD_INT 16
16088: PUSH
16089: LD_INT 17
16091: PUSH
16092: LD_INT 18
16094: PUSH
16095: LD_INT 19
16097: PUSH
16098: LD_INT 20
16100: PUSH
16101: LD_INT 21
16103: PUSH
16104: LD_INT 22
16106: PUSH
16107: LD_INT 23
16109: PUSH
16110: LD_INT 24
16112: PUSH
16113: LD_INT 25
16115: PUSH
16116: LD_INT 26
16118: PUSH
16119: LD_INT 27
16121: PUSH
16122: LD_INT 28
16124: PUSH
16125: LD_INT 29
16127: PUSH
16128: LD_INT 30
16130: PUSH
16131: LD_INT 31
16133: PUSH
16134: LD_INT 32
16136: PUSH
16137: LD_INT 33
16139: PUSH
16140: LD_INT 34
16142: PUSH
16143: LD_INT 35
16145: PUSH
16146: LD_INT 36
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 101
16189: PUSH
16190: LD_INT 102
16192: PUSH
16193: LD_INT 103
16195: PUSH
16196: LD_INT 104
16198: PUSH
16199: LD_INT 105
16201: PUSH
16202: LD_INT 106
16204: PUSH
16205: LD_INT 107
16207: PUSH
16208: LD_INT 108
16210: PUSH
16211: LD_INT 109
16213: PUSH
16214: LD_INT 110
16216: PUSH
16217: LD_INT 111
16219: PUSH
16220: LD_INT 112
16222: PUSH
16223: LD_INT 113
16225: PUSH
16226: LD_INT 114
16228: PUSH
16229: LD_INT 115
16231: PUSH
16232: LD_INT 116
16234: PUSH
16235: LD_INT 117
16237: PUSH
16238: LD_INT 118
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: ST_TO_ADDR
// if result then
16265: LD_VAR 0 2
16269: IFFALSE 17055
// begin normal :=  ;
16271: LD_ADDR_VAR 0 5
16275: PUSH
16276: LD_STRING 
16278: ST_TO_ADDR
// hardcore :=  ;
16279: LD_ADDR_VAR 0 6
16283: PUSH
16284: LD_STRING 
16286: ST_TO_ADDR
// active :=  ;
16287: LD_ADDR_VAR 0 7
16291: PUSH
16292: LD_STRING 
16294: ST_TO_ADDR
// for i = 1 to normalCounter do
16295: LD_ADDR_VAR 0 8
16299: PUSH
16300: DOUBLE
16301: LD_INT 1
16303: DEC
16304: ST_TO_ADDR
16305: LD_EXP 16
16309: PUSH
16310: FOR_TO
16311: IFFALSE 16412
// begin tmp := 0 ;
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_STRING 0
16320: ST_TO_ADDR
// if result [ 1 ] then
16321: LD_VAR 0 2
16325: PUSH
16326: LD_INT 1
16328: ARRAY
16329: IFFALSE 16394
// if result [ 1 ] [ 1 ] = i then
16331: LD_VAR 0 2
16335: PUSH
16336: LD_INT 1
16338: ARRAY
16339: PUSH
16340: LD_INT 1
16342: ARRAY
16343: PUSH
16344: LD_VAR 0 8
16348: EQUAL
16349: IFFALSE 16394
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16351: LD_ADDR_VAR 0 2
16355: PUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_VAR 0 2
16368: PUSH
16369: LD_INT 1
16371: ARRAY
16372: PPUSH
16373: LD_INT 1
16375: PPUSH
16376: CALL_OW 3
16380: PPUSH
16381: CALL_OW 1
16385: ST_TO_ADDR
// tmp := 1 ;
16386: LD_ADDR_VAR 0 3
16390: PUSH
16391: LD_STRING 1
16393: ST_TO_ADDR
// end ; normal := normal & tmp ;
16394: LD_ADDR_VAR 0 5
16398: PUSH
16399: LD_VAR 0 5
16403: PUSH
16404: LD_VAR 0 3
16408: STR
16409: ST_TO_ADDR
// end ;
16410: GO 16310
16412: POP
16413: POP
// for i = 1 to hardcoreCounter do
16414: LD_ADDR_VAR 0 8
16418: PUSH
16419: DOUBLE
16420: LD_INT 1
16422: DEC
16423: ST_TO_ADDR
16424: LD_EXP 17
16428: PUSH
16429: FOR_TO
16430: IFFALSE 16535
// begin tmp := 0 ;
16432: LD_ADDR_VAR 0 3
16436: PUSH
16437: LD_STRING 0
16439: ST_TO_ADDR
// if result [ 2 ] then
16440: LD_VAR 0 2
16444: PUSH
16445: LD_INT 2
16447: ARRAY
16448: IFFALSE 16517
// if result [ 2 ] [ 1 ] = 100 + i then
16450: LD_VAR 0 2
16454: PUSH
16455: LD_INT 2
16457: ARRAY
16458: PUSH
16459: LD_INT 1
16461: ARRAY
16462: PUSH
16463: LD_INT 100
16465: PUSH
16466: LD_VAR 0 8
16470: PLUS
16471: EQUAL
16472: IFFALSE 16517
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16474: LD_ADDR_VAR 0 2
16478: PUSH
16479: LD_VAR 0 2
16483: PPUSH
16484: LD_INT 2
16486: PPUSH
16487: LD_VAR 0 2
16491: PUSH
16492: LD_INT 2
16494: ARRAY
16495: PPUSH
16496: LD_INT 1
16498: PPUSH
16499: CALL_OW 3
16503: PPUSH
16504: CALL_OW 1
16508: ST_TO_ADDR
// tmp := 1 ;
16509: LD_ADDR_VAR 0 3
16513: PUSH
16514: LD_STRING 1
16516: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16517: LD_ADDR_VAR 0 6
16521: PUSH
16522: LD_VAR 0 6
16526: PUSH
16527: LD_VAR 0 3
16531: STR
16532: ST_TO_ADDR
// end ;
16533: GO 16429
16535: POP
16536: POP
// if isGameLoad then
16537: LD_VAR 0 1
16541: IFFALSE 17016
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16543: LD_ADDR_VAR 0 4
16547: PUSH
16548: LD_EXP 20
16552: PUSH
16553: LD_EXP 19
16557: PUSH
16558: LD_EXP 21
16562: PUSH
16563: LD_EXP 18
16567: PUSH
16568: LD_EXP 22
16572: PUSH
16573: LD_EXP 23
16577: PUSH
16578: LD_EXP 24
16582: PUSH
16583: LD_EXP 25
16587: PUSH
16588: LD_EXP 26
16592: PUSH
16593: LD_EXP 27
16597: PUSH
16598: LD_EXP 28
16602: PUSH
16603: LD_EXP 29
16607: PUSH
16608: LD_EXP 30
16612: PUSH
16613: LD_EXP 31
16617: PUSH
16618: LD_EXP 39
16622: PUSH
16623: LD_EXP 40
16627: PUSH
16628: LD_EXP 41
16632: PUSH
16633: LD_EXP 42
16637: PUSH
16638: LD_EXP 44
16642: PUSH
16643: LD_EXP 45
16647: PUSH
16648: LD_EXP 46
16652: PUSH
16653: LD_EXP 49
16657: PUSH
16658: LD_EXP 51
16662: PUSH
16663: LD_EXP 52
16667: PUSH
16668: LD_EXP 53
16672: PUSH
16673: LD_EXP 55
16677: PUSH
16678: LD_EXP 56
16682: PUSH
16683: LD_EXP 59
16687: PUSH
16688: LD_EXP 60
16692: PUSH
16693: LD_EXP 61
16697: PUSH
16698: LD_EXP 62
16702: PUSH
16703: LD_EXP 63
16707: PUSH
16708: LD_EXP 64
16712: PUSH
16713: LD_EXP 65
16717: PUSH
16718: LD_EXP 66
16722: PUSH
16723: LD_EXP 67
16727: PUSH
16728: LD_EXP 32
16732: PUSH
16733: LD_EXP 33
16737: PUSH
16738: LD_EXP 36
16742: PUSH
16743: LD_EXP 37
16747: PUSH
16748: LD_EXP 38
16752: PUSH
16753: LD_EXP 34
16757: PUSH
16758: LD_EXP 35
16762: PUSH
16763: LD_EXP 43
16767: PUSH
16768: LD_EXP 47
16772: PUSH
16773: LD_EXP 48
16777: PUSH
16778: LD_EXP 50
16782: PUSH
16783: LD_EXP 54
16787: PUSH
16788: LD_EXP 57
16792: PUSH
16793: LD_EXP 58
16797: PUSH
16798: LD_EXP 68
16802: PUSH
16803: LD_EXP 69
16807: PUSH
16808: LD_EXP 70
16812: PUSH
16813: LD_EXP 71
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: ST_TO_ADDR
// tmp :=  ;
16874: LD_ADDR_VAR 0 3
16878: PUSH
16879: LD_STRING 
16881: ST_TO_ADDR
// for i = 1 to normalCounter do
16882: LD_ADDR_VAR 0 8
16886: PUSH
16887: DOUBLE
16888: LD_INT 1
16890: DEC
16891: ST_TO_ADDR
16892: LD_EXP 16
16896: PUSH
16897: FOR_TO
16898: IFFALSE 16934
// begin if flags [ i ] then
16900: LD_VAR 0 4
16904: PUSH
16905: LD_VAR 0 8
16909: ARRAY
16910: IFFALSE 16932
// tmp := tmp & i & ; ;
16912: LD_ADDR_VAR 0 3
16916: PUSH
16917: LD_VAR 0 3
16921: PUSH
16922: LD_VAR 0 8
16926: STR
16927: PUSH
16928: LD_STRING ;
16930: STR
16931: ST_TO_ADDR
// end ;
16932: GO 16897
16934: POP
16935: POP
// for i = 1 to hardcoreCounter do
16936: LD_ADDR_VAR 0 8
16940: PUSH
16941: DOUBLE
16942: LD_INT 1
16944: DEC
16945: ST_TO_ADDR
16946: LD_EXP 17
16950: PUSH
16951: FOR_TO
16952: IFFALSE 16998
// begin if flags [ normalCounter + i ] then
16954: LD_VAR 0 4
16958: PUSH
16959: LD_EXP 16
16963: PUSH
16964: LD_VAR 0 8
16968: PLUS
16969: ARRAY
16970: IFFALSE 16996
// tmp := tmp & ( 100 + i ) & ; ;
16972: LD_ADDR_VAR 0 3
16976: PUSH
16977: LD_VAR 0 3
16981: PUSH
16982: LD_INT 100
16984: PUSH
16985: LD_VAR 0 8
16989: PLUS
16990: STR
16991: PUSH
16992: LD_STRING ;
16994: STR
16995: ST_TO_ADDR
// end ;
16996: GO 16951
16998: POP
16999: POP
// if tmp then
17000: LD_VAR 0 3
17004: IFFALSE 17016
// active := tmp ;
17006: LD_ADDR_VAR 0 7
17010: PUSH
17011: LD_VAR 0 3
17015: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17016: LD_STRING getStreamItemsFromMission("
17018: PUSH
17019: LD_VAR 0 5
17023: STR
17024: PUSH
17025: LD_STRING ","
17027: STR
17028: PUSH
17029: LD_VAR 0 6
17033: STR
17034: PUSH
17035: LD_STRING ","
17037: STR
17038: PUSH
17039: LD_VAR 0 7
17043: STR
17044: PUSH
17045: LD_STRING ")
17047: STR
17048: PPUSH
17049: CALL_OW 559
// end else
17053: GO 17062
// ToLua ( getStreamItemsFromMission("","","") ) ;
17055: LD_STRING getStreamItemsFromMission("","","")
17057: PPUSH
17058: CALL_OW 559
// end ;
17062: LD_VAR 0 2
17066: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17067: LD_EXP 15
17071: IFFALSE 17079
17073: PUSH
17074: LD_EXP 20
17078: AND
17079: IFFALSE 17203
17081: GO 17083
17083: DISABLE
17084: LD_INT 0
17086: PPUSH
17087: PPUSH
// begin enable ;
17088: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17089: LD_ADDR_VAR 0 2
17093: PUSH
17094: LD_INT 22
17096: PUSH
17097: LD_OWVAR 2
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 2
17108: PUSH
17109: LD_INT 34
17111: PUSH
17112: LD_INT 7
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 34
17121: PUSH
17122: LD_INT 45
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 34
17131: PUSH
17132: LD_INT 28
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 34
17141: PUSH
17142: LD_INT 47
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PPUSH
17160: CALL_OW 69
17164: ST_TO_ADDR
// if not tmp then
17165: LD_VAR 0 2
17169: NOT
17170: IFFALSE 17174
// exit ;
17172: GO 17203
// for i in tmp do
17174: LD_ADDR_VAR 0 1
17178: PUSH
17179: LD_VAR 0 2
17183: PUSH
17184: FOR_IN
17185: IFFALSE 17201
// begin SetLives ( i , 0 ) ;
17187: LD_VAR 0 1
17191: PPUSH
17192: LD_INT 0
17194: PPUSH
17195: CALL_OW 234
// end ;
17199: GO 17184
17201: POP
17202: POP
// end ;
17203: PPOPN 2
17205: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17206: LD_EXP 15
17210: IFFALSE 17218
17212: PUSH
17213: LD_EXP 21
17217: AND
17218: IFFALSE 17302
17220: GO 17222
17222: DISABLE
17223: LD_INT 0
17225: PPUSH
17226: PPUSH
// begin enable ;
17227: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17228: LD_ADDR_VAR 0 2
17232: PUSH
17233: LD_INT 22
17235: PUSH
17236: LD_OWVAR 2
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 32
17247: PUSH
17248: LD_INT 3
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PPUSH
17259: CALL_OW 69
17263: ST_TO_ADDR
// if not tmp then
17264: LD_VAR 0 2
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 17302
// for i in tmp do
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: LD_VAR 0 2
17282: PUSH
17283: FOR_IN
17284: IFFALSE 17300
// begin SetLives ( i , 0 ) ;
17286: LD_VAR 0 1
17290: PPUSH
17291: LD_INT 0
17293: PPUSH
17294: CALL_OW 234
// end ;
17298: GO 17283
17300: POP
17301: POP
// end ;
17302: PPOPN 2
17304: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17305: LD_EXP 15
17309: IFFALSE 17317
17311: PUSH
17312: LD_EXP 18
17316: AND
17317: IFFALSE 17410
17319: GO 17321
17321: DISABLE
17322: LD_INT 0
17324: PPUSH
// begin enable ;
17325: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17326: LD_ADDR_VAR 0 1
17330: PUSH
17331: LD_INT 22
17333: PUSH
17334: LD_OWVAR 2
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 2
17345: PUSH
17346: LD_INT 25
17348: PUSH
17349: LD_INT 5
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 25
17358: PUSH
17359: LD_INT 9
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 25
17368: PUSH
17369: LD_INT 8
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PPUSH
17386: CALL_OW 69
17390: PUSH
17391: FOR_IN
17392: IFFALSE 17408
// begin SetClass ( i , 1 ) ;
17394: LD_VAR 0 1
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: CALL_OW 336
// end ;
17406: GO 17391
17408: POP
17409: POP
// end ;
17410: PPOPN 1
17412: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17413: LD_EXP 15
17417: IFFALSE 17425
17419: PUSH
17420: LD_EXP 19
17424: AND
17425: IFFALSE 17437
17427: PUSH
17428: LD_OWVAR 65
17432: PUSH
17433: LD_INT 7
17435: LESS
17436: AND
17437: IFFALSE 17451
17439: GO 17441
17441: DISABLE
// begin enable ;
17442: ENABLE
// game_speed := 7 ;
17443: LD_ADDR_OWVAR 65
17447: PUSH
17448: LD_INT 7
17450: ST_TO_ADDR
// end ;
17451: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17452: LD_EXP 15
17456: IFFALSE 17464
17458: PUSH
17459: LD_EXP 22
17463: AND
17464: IFFALSE 17666
17466: GO 17468
17468: DISABLE
17469: LD_INT 0
17471: PPUSH
17472: PPUSH
17473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17474: LD_ADDR_VAR 0 3
17478: PUSH
17479: LD_INT 81
17481: PUSH
17482: LD_OWVAR 2
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 21
17493: PUSH
17494: LD_INT 1
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PPUSH
17505: CALL_OW 69
17509: ST_TO_ADDR
// if not tmp then
17510: LD_VAR 0 3
17514: NOT
17515: IFFALSE 17519
// exit ;
17517: GO 17666
// if tmp > 5 then
17519: LD_VAR 0 3
17523: PUSH
17524: LD_INT 5
17526: GREATER
17527: IFFALSE 17539
// k := 5 else
17529: LD_ADDR_VAR 0 2
17533: PUSH
17534: LD_INT 5
17536: ST_TO_ADDR
17537: GO 17549
// k := tmp ;
17539: LD_ADDR_VAR 0 2
17543: PUSH
17544: LD_VAR 0 3
17548: ST_TO_ADDR
// for i := 1 to k do
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: DOUBLE
17555: LD_INT 1
17557: DEC
17558: ST_TO_ADDR
17559: LD_VAR 0 2
17563: PUSH
17564: FOR_TO
17565: IFFALSE 17664
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17567: LD_VAR 0 3
17571: PUSH
17572: LD_VAR 0 1
17576: ARRAY
17577: PPUSH
17578: LD_VAR 0 1
17582: PUSH
17583: LD_INT 4
17585: MOD
17586: PUSH
17587: LD_INT 1
17589: PLUS
17590: PPUSH
17591: CALL_OW 259
17595: PUSH
17596: LD_INT 10
17598: LESS
17599: IFFALSE 17662
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17601: LD_VAR 0 3
17605: PUSH
17606: LD_VAR 0 1
17610: ARRAY
17611: PPUSH
17612: LD_VAR 0 1
17616: PUSH
17617: LD_INT 4
17619: MOD
17620: PUSH
17621: LD_INT 1
17623: PLUS
17624: PPUSH
17625: LD_VAR 0 3
17629: PUSH
17630: LD_VAR 0 1
17634: ARRAY
17635: PPUSH
17636: LD_VAR 0 1
17640: PUSH
17641: LD_INT 4
17643: MOD
17644: PUSH
17645: LD_INT 1
17647: PLUS
17648: PPUSH
17649: CALL_OW 259
17653: PUSH
17654: LD_INT 1
17656: PLUS
17657: PPUSH
17658: CALL_OW 237
17662: GO 17564
17664: POP
17665: POP
// end ;
17666: PPOPN 3
17668: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17669: LD_EXP 15
17673: IFFALSE 17681
17675: PUSH
17676: LD_EXP 23
17680: AND
17681: IFFALSE 17701
17683: GO 17685
17685: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17686: LD_INT 4
17688: PPUSH
17689: LD_OWVAR 2
17693: PPUSH
17694: LD_INT 0
17696: PPUSH
17697: CALL_OW 324
17701: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17702: LD_EXP 15
17706: IFFALSE 17714
17708: PUSH
17709: LD_EXP 52
17713: AND
17714: IFFALSE 17734
17716: GO 17718
17718: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17719: LD_INT 19
17721: PPUSH
17722: LD_OWVAR 2
17726: PPUSH
17727: LD_INT 0
17729: PPUSH
17730: CALL_OW 324
17734: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17735: LD_EXP 15
17739: IFFALSE 17747
17741: PUSH
17742: LD_EXP 24
17746: AND
17747: IFFALSE 17849
17749: GO 17751
17751: DISABLE
17752: LD_INT 0
17754: PPUSH
17755: PPUSH
// begin enable ;
17756: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17757: LD_ADDR_VAR 0 2
17761: PUSH
17762: LD_INT 22
17764: PUSH
17765: LD_OWVAR 2
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: LD_INT 34
17779: PUSH
17780: LD_INT 11
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 34
17789: PUSH
17790: LD_INT 30
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: LIST
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PPUSH
17806: CALL_OW 69
17810: ST_TO_ADDR
// if not tmp then
17811: LD_VAR 0 2
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 17849
// for i in tmp do
17820: LD_ADDR_VAR 0 1
17824: PUSH
17825: LD_VAR 0 2
17829: PUSH
17830: FOR_IN
17831: IFFALSE 17847
// begin SetLives ( i , 0 ) ;
17833: LD_VAR 0 1
17837: PPUSH
17838: LD_INT 0
17840: PPUSH
17841: CALL_OW 234
// end ;
17845: GO 17830
17847: POP
17848: POP
// end ;
17849: PPOPN 2
17851: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17852: LD_EXP 15
17856: IFFALSE 17864
17858: PUSH
17859: LD_EXP 25
17863: AND
17864: IFFALSE 17884
17866: GO 17868
17868: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17869: LD_INT 32
17871: PPUSH
17872: LD_OWVAR 2
17876: PPUSH
17877: LD_INT 0
17879: PPUSH
17880: CALL_OW 324
17884: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17885: LD_EXP 15
17889: IFFALSE 17897
17891: PUSH
17892: LD_EXP 26
17896: AND
17897: IFFALSE 18080
17899: GO 17901
17901: DISABLE
17902: LD_INT 0
17904: PPUSH
17905: PPUSH
17906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17907: LD_ADDR_VAR 0 2
17911: PUSH
17912: LD_INT 22
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 33
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 69
17942: ST_TO_ADDR
// if not tmp then
17943: LD_VAR 0 2
17947: NOT
17948: IFFALSE 17952
// exit ;
17950: GO 18080
// side := 0 ;
17952: LD_ADDR_VAR 0 3
17956: PUSH
17957: LD_INT 0
17959: ST_TO_ADDR
// for i := 1 to 8 do
17960: LD_ADDR_VAR 0 1
17964: PUSH
17965: DOUBLE
17966: LD_INT 1
17968: DEC
17969: ST_TO_ADDR
17970: LD_INT 8
17972: PUSH
17973: FOR_TO
17974: IFFALSE 18024
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17976: LD_OWVAR 2
17980: PUSH
17981: LD_VAR 0 1
17985: NONEQUAL
17986: IFFALSE 18008
17988: PUSH
17989: LD_OWVAR 2
17993: PPUSH
17994: LD_VAR 0 1
17998: PPUSH
17999: CALL_OW 81
18003: PUSH
18004: LD_INT 2
18006: EQUAL
18007: AND
18008: IFFALSE 18022
// begin side := i ;
18010: LD_ADDR_VAR 0 3
18014: PUSH
18015: LD_VAR 0 1
18019: ST_TO_ADDR
// break ;
18020: GO 18024
// end ;
18022: GO 17973
18024: POP
18025: POP
// if not side then
18026: LD_VAR 0 3
18030: NOT
18031: IFFALSE 18035
// exit ;
18033: GO 18080
// for i := 1 to tmp do
18035: LD_ADDR_VAR 0 1
18039: PUSH
18040: DOUBLE
18041: LD_INT 1
18043: DEC
18044: ST_TO_ADDR
18045: LD_VAR 0 2
18049: PUSH
18050: FOR_TO
18051: IFFALSE 18078
// if Prob ( 60 ) then
18053: LD_INT 60
18055: PPUSH
18056: CALL_OW 13
18060: IFFALSE 18076
// SetSide ( i , side ) ;
18062: LD_VAR 0 1
18066: PPUSH
18067: LD_VAR 0 3
18071: PPUSH
18072: CALL_OW 235
18076: GO 18050
18078: POP
18079: POP
// end ;
18080: PPOPN 3
18082: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18083: LD_EXP 15
18087: IFFALSE 18095
18089: PUSH
18090: LD_EXP 28
18094: AND
18095: IFFALSE 18214
18097: GO 18099
18099: DISABLE
18100: LD_INT 0
18102: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18103: LD_ADDR_VAR 0 1
18107: PUSH
18108: LD_INT 22
18110: PUSH
18111: LD_OWVAR 2
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 21
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 3
18132: PUSH
18133: LD_INT 23
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: LIST
18151: PPUSH
18152: CALL_OW 69
18156: PUSH
18157: FOR_IN
18158: IFFALSE 18212
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18160: LD_VAR 0 1
18164: PPUSH
18165: CALL_OW 257
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: LD_INT 2
18175: PUSH
18176: LD_INT 3
18178: PUSH
18179: LD_INT 4
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: IN
18188: IFFALSE 18210
// SetClass ( un , rand ( 1 , 4 ) ) ;
18190: LD_VAR 0 1
18194: PPUSH
18195: LD_INT 1
18197: PPUSH
18198: LD_INT 4
18200: PPUSH
18201: CALL_OW 12
18205: PPUSH
18206: CALL_OW 336
18210: GO 18157
18212: POP
18213: POP
// end ;
18214: PPOPN 1
18216: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18217: LD_EXP 15
18221: IFFALSE 18229
18223: PUSH
18224: LD_EXP 27
18228: AND
18229: IFFALSE 18308
18231: GO 18233
18233: DISABLE
18234: LD_INT 0
18236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18237: LD_ADDR_VAR 0 1
18241: PUSH
18242: LD_INT 22
18244: PUSH
18245: LD_OWVAR 2
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 21
18256: PUSH
18257: LD_INT 3
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: ST_TO_ADDR
// if not tmp then
18273: LD_VAR 0 1
18277: NOT
18278: IFFALSE 18282
// exit ;
18280: GO 18308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18282: LD_VAR 0 1
18286: PUSH
18287: LD_INT 1
18289: PPUSH
18290: LD_VAR 0 1
18294: PPUSH
18295: CALL_OW 12
18299: ARRAY
18300: PPUSH
18301: LD_INT 100
18303: PPUSH
18304: CALL_OW 234
// end ;
18308: PPOPN 1
18310: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18311: LD_EXP 15
18315: IFFALSE 18323
18317: PUSH
18318: LD_EXP 29
18322: AND
18323: IFFALSE 18421
18325: GO 18327
18327: DISABLE
18328: LD_INT 0
18330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18331: LD_ADDR_VAR 0 1
18335: PUSH
18336: LD_INT 22
18338: PUSH
18339: LD_OWVAR 2
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 21
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PPUSH
18362: CALL_OW 69
18366: ST_TO_ADDR
// if not tmp then
18367: LD_VAR 0 1
18371: NOT
18372: IFFALSE 18376
// exit ;
18374: GO 18421
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18376: LD_VAR 0 1
18380: PUSH
18381: LD_INT 1
18383: PPUSH
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 12
18393: ARRAY
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: LD_INT 4
18400: PPUSH
18401: CALL_OW 12
18405: PPUSH
18406: LD_INT 3000
18408: PPUSH
18409: LD_INT 9000
18411: PPUSH
18412: CALL_OW 12
18416: PPUSH
18417: CALL_OW 492
// end ;
18421: PPOPN 1
18423: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18424: LD_EXP 15
18428: IFFALSE 18436
18430: PUSH
18431: LD_EXP 30
18435: AND
18436: IFFALSE 18456
18438: GO 18440
18440: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18441: LD_INT 1
18443: PPUSH
18444: LD_OWVAR 2
18448: PPUSH
18449: LD_INT 0
18451: PPUSH
18452: CALL_OW 324
18456: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18457: LD_EXP 15
18461: IFFALSE 18469
18463: PUSH
18464: LD_EXP 31
18468: AND
18469: IFFALSE 18552
18471: GO 18473
18473: DISABLE
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18478: LD_ADDR_VAR 0 2
18482: PUSH
18483: LD_INT 22
18485: PUSH
18486: LD_OWVAR 2
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 21
18497: PUSH
18498: LD_INT 3
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PPUSH
18509: CALL_OW 69
18513: ST_TO_ADDR
// if not tmp then
18514: LD_VAR 0 2
18518: NOT
18519: IFFALSE 18523
// exit ;
18521: GO 18552
// for i in tmp do
18523: LD_ADDR_VAR 0 1
18527: PUSH
18528: LD_VAR 0 2
18532: PUSH
18533: FOR_IN
18534: IFFALSE 18550
// SetBLevel ( i , 10 ) ;
18536: LD_VAR 0 1
18540: PPUSH
18541: LD_INT 10
18543: PPUSH
18544: CALL_OW 241
18548: GO 18533
18550: POP
18551: POP
// end ;
18552: PPOPN 2
18554: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18555: LD_EXP 15
18559: IFFALSE 18567
18561: PUSH
18562: LD_EXP 32
18566: AND
18567: IFFALSE 18678
18569: GO 18571
18571: DISABLE
18572: LD_INT 0
18574: PPUSH
18575: PPUSH
18576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18577: LD_ADDR_VAR 0 3
18581: PUSH
18582: LD_INT 22
18584: PUSH
18585: LD_OWVAR 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 25
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PPUSH
18608: CALL_OW 69
18612: ST_TO_ADDR
// if not tmp then
18613: LD_VAR 0 3
18617: NOT
18618: IFFALSE 18622
// exit ;
18620: GO 18678
// un := tmp [ rand ( 1 , tmp ) ] ;
18622: LD_ADDR_VAR 0 2
18626: PUSH
18627: LD_VAR 0 3
18631: PUSH
18632: LD_INT 1
18634: PPUSH
18635: LD_VAR 0 3
18639: PPUSH
18640: CALL_OW 12
18644: ARRAY
18645: ST_TO_ADDR
// if Crawls ( un ) then
18646: LD_VAR 0 2
18650: PPUSH
18651: CALL_OW 318
18655: IFFALSE 18666
// ComWalk ( un ) ;
18657: LD_VAR 0 2
18661: PPUSH
18662: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18666: LD_VAR 0 2
18670: PPUSH
18671: LD_INT 5
18673: PPUSH
18674: CALL_OW 336
// end ;
18678: PPOPN 3
18680: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18681: LD_EXP 15
18685: IFFALSE 18693
18687: PUSH
18688: LD_EXP 33
18692: AND
18693: IFFALSE 18705
18695: PUSH
18696: LD_OWVAR 67
18700: PUSH
18701: LD_INT 4
18703: LESS
18704: AND
18705: IFFALSE 18724
18707: GO 18709
18709: DISABLE
// begin Difficulty := Difficulty + 1 ;
18710: LD_ADDR_OWVAR 67
18714: PUSH
18715: LD_OWVAR 67
18719: PUSH
18720: LD_INT 1
18722: PLUS
18723: ST_TO_ADDR
// end ;
18724: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18725: LD_EXP 15
18729: IFFALSE 18737
18731: PUSH
18732: LD_EXP 34
18736: AND
18737: IFFALSE 18840
18739: GO 18741
18741: DISABLE
18742: LD_INT 0
18744: PPUSH
// begin for i := 1 to 5 do
18745: LD_ADDR_VAR 0 1
18749: PUSH
18750: DOUBLE
18751: LD_INT 1
18753: DEC
18754: ST_TO_ADDR
18755: LD_INT 5
18757: PUSH
18758: FOR_TO
18759: IFFALSE 18838
// begin uc_nation := nation_nature ;
18761: LD_ADDR_OWVAR 21
18765: PUSH
18766: LD_INT 0
18768: ST_TO_ADDR
// uc_side := 0 ;
18769: LD_ADDR_OWVAR 20
18773: PUSH
18774: LD_INT 0
18776: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18777: LD_ADDR_OWVAR 29
18781: PUSH
18782: LD_INT 12
18784: PUSH
18785: LD_INT 12
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: ST_TO_ADDR
// hc_agressivity := 20 ;
18792: LD_ADDR_OWVAR 35
18796: PUSH
18797: LD_INT 20
18799: ST_TO_ADDR
// hc_class := class_tiger ;
18800: LD_ADDR_OWVAR 28
18804: PUSH
18805: LD_INT 14
18807: ST_TO_ADDR
// hc_gallery :=  ;
18808: LD_ADDR_OWVAR 33
18812: PUSH
18813: LD_STRING 
18815: ST_TO_ADDR
// hc_name :=  ;
18816: LD_ADDR_OWVAR 26
18820: PUSH
18821: LD_STRING 
18823: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18824: CALL_OW 44
18828: PPUSH
18829: LD_INT 0
18831: PPUSH
18832: CALL_OW 51
// end ;
18836: GO 18758
18838: POP
18839: POP
// end ;
18840: PPOPN 1
18842: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18843: LD_EXP 15
18847: IFFALSE 18855
18849: PUSH
18850: LD_EXP 35
18854: AND
18855: IFFALSE 18864
18857: GO 18859
18859: DISABLE
// StreamSibBomb ;
18860: CALL 18865 0 0
18864: END
// export function StreamSibBomb ; var i , x , y ; begin
18865: LD_INT 0
18867: PPUSH
18868: PPUSH
18869: PPUSH
18870: PPUSH
// result := false ;
18871: LD_ADDR_VAR 0 1
18875: PUSH
18876: LD_INT 0
18878: ST_TO_ADDR
// for i := 1 to 16 do
18879: LD_ADDR_VAR 0 2
18883: PUSH
18884: DOUBLE
18885: LD_INT 1
18887: DEC
18888: ST_TO_ADDR
18889: LD_INT 16
18891: PUSH
18892: FOR_TO
18893: IFFALSE 19092
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18895: LD_ADDR_VAR 0 3
18899: PUSH
18900: LD_INT 10
18902: PUSH
18903: LD_INT 20
18905: PUSH
18906: LD_INT 30
18908: PUSH
18909: LD_INT 40
18911: PUSH
18912: LD_INT 50
18914: PUSH
18915: LD_INT 60
18917: PUSH
18918: LD_INT 70
18920: PUSH
18921: LD_INT 80
18923: PUSH
18924: LD_INT 90
18926: PUSH
18927: LD_INT 100
18929: PUSH
18930: LD_INT 110
18932: PUSH
18933: LD_INT 120
18935: PUSH
18936: LD_INT 130
18938: PUSH
18939: LD_INT 140
18941: PUSH
18942: LD_INT 150
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: PPUSH
18965: LD_INT 15
18967: PPUSH
18968: CALL_OW 12
18972: ARRAY
18973: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18974: LD_ADDR_VAR 0 4
18978: PUSH
18979: LD_INT 10
18981: PUSH
18982: LD_INT 20
18984: PUSH
18985: LD_INT 30
18987: PUSH
18988: LD_INT 40
18990: PUSH
18991: LD_INT 50
18993: PUSH
18994: LD_INT 60
18996: PUSH
18997: LD_INT 70
18999: PUSH
19000: LD_INT 80
19002: PUSH
19003: LD_INT 90
19005: PUSH
19006: LD_INT 100
19008: PUSH
19009: LD_INT 110
19011: PUSH
19012: LD_INT 120
19014: PUSH
19015: LD_INT 130
19017: PUSH
19018: LD_INT 140
19020: PUSH
19021: LD_INT 150
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: PPUSH
19044: LD_INT 15
19046: PPUSH
19047: CALL_OW 12
19051: ARRAY
19052: ST_TO_ADDR
// if ValidHex ( x , y ) then
19053: LD_VAR 0 3
19057: PPUSH
19058: LD_VAR 0 4
19062: PPUSH
19063: CALL_OW 488
19067: IFFALSE 19090
// begin result := [ x , y ] ;
19069: LD_ADDR_VAR 0 1
19073: PUSH
19074: LD_VAR 0 3
19078: PUSH
19079: LD_VAR 0 4
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: ST_TO_ADDR
// break ;
19088: GO 19092
// end ; end ;
19090: GO 18892
19092: POP
19093: POP
// if result then
19094: LD_VAR 0 1
19098: IFFALSE 19158
// begin ToLua ( playSibBomb() ) ;
19100: LD_STRING playSibBomb()
19102: PPUSH
19103: CALL_OW 559
// wait ( 0 0$14 ) ;
19107: LD_INT 490
19109: PPUSH
19110: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19114: LD_VAR 0 1
19118: PUSH
19119: LD_INT 1
19121: ARRAY
19122: PPUSH
19123: LD_VAR 0 1
19127: PUSH
19128: LD_INT 2
19130: ARRAY
19131: PPUSH
19132: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19136: LD_VAR 0 1
19140: PUSH
19141: LD_INT 1
19143: ARRAY
19144: PPUSH
19145: LD_VAR 0 1
19149: PUSH
19150: LD_INT 2
19152: ARRAY
19153: PPUSH
19154: CALL_OW 429
// end ; end ;
19158: LD_VAR 0 1
19162: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19163: LD_EXP 15
19167: IFFALSE 19175
19169: PUSH
19170: LD_EXP 37
19174: AND
19175: IFFALSE 19187
19177: GO 19179
19179: DISABLE
// YouLost (  ) ;
19180: LD_STRING 
19182: PPUSH
19183: CALL_OW 104
19187: END
// every 0 0$1 trigger StreamModeActive and sFog do
19188: LD_EXP 15
19192: IFFALSE 19200
19194: PUSH
19195: LD_EXP 36
19199: AND
19200: IFFALSE 19214
19202: GO 19204
19204: DISABLE
// FogOff ( your_side ) ;
19205: LD_OWVAR 2
19209: PPUSH
19210: CALL_OW 344
19214: END
// every 0 0$1 trigger StreamModeActive and sSun do
19215: LD_EXP 15
19219: IFFALSE 19227
19221: PUSH
19222: LD_EXP 38
19226: AND
19227: IFFALSE 19255
19229: GO 19231
19231: DISABLE
// begin solar_recharge_percent := 0 ;
19232: LD_ADDR_OWVAR 79
19236: PUSH
19237: LD_INT 0
19239: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19240: LD_INT 10500
19242: PPUSH
19243: CALL_OW 67
// solar_recharge_percent := 100 ;
19247: LD_ADDR_OWVAR 79
19251: PUSH
19252: LD_INT 100
19254: ST_TO_ADDR
// end ;
19255: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19256: LD_EXP 15
19260: IFFALSE 19268
19262: PUSH
19263: LD_EXP 39
19267: AND
19268: IFFALSE 19507
19270: GO 19272
19272: DISABLE
19273: LD_INT 0
19275: PPUSH
19276: PPUSH
19277: PPUSH
// begin tmp := [ ] ;
19278: LD_ADDR_VAR 0 3
19282: PUSH
19283: EMPTY
19284: ST_TO_ADDR
// for i := 1 to 6 do
19285: LD_ADDR_VAR 0 1
19289: PUSH
19290: DOUBLE
19291: LD_INT 1
19293: DEC
19294: ST_TO_ADDR
19295: LD_INT 6
19297: PUSH
19298: FOR_TO
19299: IFFALSE 19404
// begin uc_nation := nation_nature ;
19301: LD_ADDR_OWVAR 21
19305: PUSH
19306: LD_INT 0
19308: ST_TO_ADDR
// uc_side := 0 ;
19309: LD_ADDR_OWVAR 20
19313: PUSH
19314: LD_INT 0
19316: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19317: LD_ADDR_OWVAR 29
19321: PUSH
19322: LD_INT 12
19324: PUSH
19325: LD_INT 12
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: ST_TO_ADDR
// hc_agressivity := 20 ;
19332: LD_ADDR_OWVAR 35
19336: PUSH
19337: LD_INT 20
19339: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19340: LD_ADDR_OWVAR 28
19344: PUSH
19345: LD_INT 17
19347: ST_TO_ADDR
// hc_gallery :=  ;
19348: LD_ADDR_OWVAR 33
19352: PUSH
19353: LD_STRING 
19355: ST_TO_ADDR
// hc_name :=  ;
19356: LD_ADDR_OWVAR 26
19360: PUSH
19361: LD_STRING 
19363: ST_TO_ADDR
// un := CreateHuman ;
19364: LD_ADDR_VAR 0 2
19368: PUSH
19369: CALL_OW 44
19373: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19374: LD_VAR 0 2
19378: PPUSH
19379: LD_INT 1
19381: PPUSH
19382: CALL_OW 51
// tmp := tmp ^ un ;
19386: LD_ADDR_VAR 0 3
19390: PUSH
19391: LD_VAR 0 3
19395: PUSH
19396: LD_VAR 0 2
19400: ADD
19401: ST_TO_ADDR
// end ;
19402: GO 19298
19404: POP
19405: POP
// repeat wait ( 0 0$1 ) ;
19406: LD_INT 35
19408: PPUSH
19409: CALL_OW 67
// for un in tmp do
19413: LD_ADDR_VAR 0 2
19417: PUSH
19418: LD_VAR 0 3
19422: PUSH
19423: FOR_IN
19424: IFFALSE 19498
// begin if IsDead ( un ) then
19426: LD_VAR 0 2
19430: PPUSH
19431: CALL_OW 301
19435: IFFALSE 19455
// begin tmp := tmp diff un ;
19437: LD_ADDR_VAR 0 3
19441: PUSH
19442: LD_VAR 0 3
19446: PUSH
19447: LD_VAR 0 2
19451: DIFF
19452: ST_TO_ADDR
// continue ;
19453: GO 19423
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19455: LD_VAR 0 2
19459: PPUSH
19460: LD_INT 3
19462: PUSH
19463: LD_INT 22
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PPUSH
19477: CALL_OW 69
19481: PPUSH
19482: LD_VAR 0 2
19486: PPUSH
19487: CALL_OW 74
19491: PPUSH
19492: CALL_OW 115
// end ;
19496: GO 19423
19498: POP
19499: POP
// until not tmp ;
19500: LD_VAR 0 3
19504: NOT
19505: IFFALSE 19406
// end ;
19507: PPOPN 3
19509: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19510: LD_EXP 15
19514: IFFALSE 19522
19516: PUSH
19517: LD_EXP 40
19521: AND
19522: IFFALSE 19576
19524: GO 19526
19526: DISABLE
// begin ToLua ( displayTroll(); ) ;
19527: LD_STRING displayTroll();
19529: PPUSH
19530: CALL_OW 559
// wait ( 3 3$00 ) ;
19534: LD_INT 6300
19536: PPUSH
19537: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19541: LD_STRING hideTroll();
19543: PPUSH
19544: CALL_OW 559
// wait ( 1 1$00 ) ;
19548: LD_INT 2100
19550: PPUSH
19551: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19555: LD_STRING displayTroll();
19557: PPUSH
19558: CALL_OW 559
// wait ( 1 1$00 ) ;
19562: LD_INT 2100
19564: PPUSH
19565: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19569: LD_STRING hideTroll();
19571: PPUSH
19572: CALL_OW 559
// end ;
19576: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19577: LD_EXP 15
19581: IFFALSE 19589
19583: PUSH
19584: LD_EXP 41
19588: AND
19589: IFFALSE 19652
19591: GO 19593
19593: DISABLE
19594: LD_INT 0
19596: PPUSH
// begin p := 0 ;
19597: LD_ADDR_VAR 0 1
19601: PUSH
19602: LD_INT 0
19604: ST_TO_ADDR
// repeat game_speed := 1 ;
19605: LD_ADDR_OWVAR 65
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19613: LD_INT 35
19615: PPUSH
19616: CALL_OW 67
// p := p + 1 ;
19620: LD_ADDR_VAR 0 1
19624: PUSH
19625: LD_VAR 0 1
19629: PUSH
19630: LD_INT 1
19632: PLUS
19633: ST_TO_ADDR
// until p >= 60 ;
19634: LD_VAR 0 1
19638: PUSH
19639: LD_INT 60
19641: GREATEREQUAL
19642: IFFALSE 19605
// game_speed := 4 ;
19644: LD_ADDR_OWVAR 65
19648: PUSH
19649: LD_INT 4
19651: ST_TO_ADDR
// end ;
19652: PPOPN 1
19654: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19655: LD_EXP 15
19659: IFFALSE 19667
19661: PUSH
19662: LD_EXP 42
19666: AND
19667: IFFALSE 19813
19669: GO 19671
19671: DISABLE
19672: LD_INT 0
19674: PPUSH
19675: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19676: LD_ADDR_VAR 0 1
19680: PUSH
19681: LD_INT 22
19683: PUSH
19684: LD_OWVAR 2
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: LD_INT 30
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 30
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PPUSH
19725: CALL_OW 69
19729: ST_TO_ADDR
// if not depot then
19730: LD_VAR 0 1
19734: NOT
19735: IFFALSE 19739
// exit ;
19737: GO 19813
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19739: LD_ADDR_VAR 0 2
19743: PUSH
19744: LD_VAR 0 1
19748: PUSH
19749: LD_INT 1
19751: PPUSH
19752: LD_VAR 0 1
19756: PPUSH
19757: CALL_OW 12
19761: ARRAY
19762: PPUSH
19763: CALL_OW 274
19767: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19768: LD_VAR 0 2
19772: PPUSH
19773: LD_INT 1
19775: PPUSH
19776: LD_INT 0
19778: PPUSH
19779: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19783: LD_VAR 0 2
19787: PPUSH
19788: LD_INT 2
19790: PPUSH
19791: LD_INT 0
19793: PPUSH
19794: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19798: LD_VAR 0 2
19802: PPUSH
19803: LD_INT 3
19805: PPUSH
19806: LD_INT 0
19808: PPUSH
19809: CALL_OW 277
// end ;
19813: PPOPN 2
19815: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19816: LD_EXP 15
19820: IFFALSE 19828
19822: PUSH
19823: LD_EXP 43
19827: AND
19828: IFFALSE 19925
19830: GO 19832
19832: DISABLE
19833: LD_INT 0
19835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19836: LD_ADDR_VAR 0 1
19840: PUSH
19841: LD_INT 22
19843: PUSH
19844: LD_OWVAR 2
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 21
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 3
19865: PUSH
19866: LD_INT 23
19868: PUSH
19869: LD_INT 0
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: PPUSH
19885: CALL_OW 69
19889: ST_TO_ADDR
// if not tmp then
19890: LD_VAR 0 1
19894: NOT
19895: IFFALSE 19899
// exit ;
19897: GO 19925
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19899: LD_VAR 0 1
19903: PUSH
19904: LD_INT 1
19906: PPUSH
19907: LD_VAR 0 1
19911: PPUSH
19912: CALL_OW 12
19916: ARRAY
19917: PPUSH
19918: LD_INT 200
19920: PPUSH
19921: CALL_OW 234
// end ;
19925: PPOPN 1
19927: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19928: LD_EXP 15
19932: IFFALSE 19940
19934: PUSH
19935: LD_EXP 44
19939: AND
19940: IFFALSE 20019
19942: GO 19944
19944: DISABLE
19945: LD_INT 0
19947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19948: LD_ADDR_VAR 0 1
19952: PUSH
19953: LD_INT 22
19955: PUSH
19956: LD_OWVAR 2
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 21
19967: PUSH
19968: LD_INT 2
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PPUSH
19979: CALL_OW 69
19983: ST_TO_ADDR
// if not tmp then
19984: LD_VAR 0 1
19988: NOT
19989: IFFALSE 19993
// exit ;
19991: GO 20019
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19993: LD_VAR 0 1
19997: PUSH
19998: LD_INT 1
20000: PPUSH
20001: LD_VAR 0 1
20005: PPUSH
20006: CALL_OW 12
20010: ARRAY
20011: PPUSH
20012: LD_INT 60
20014: PPUSH
20015: CALL_OW 234
// end ;
20019: PPOPN 1
20021: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20022: LD_EXP 15
20026: IFFALSE 20034
20028: PUSH
20029: LD_EXP 45
20033: AND
20034: IFFALSE 20133
20036: GO 20038
20038: DISABLE
20039: LD_INT 0
20041: PPUSH
20042: PPUSH
// begin enable ;
20043: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20044: LD_ADDR_VAR 0 1
20048: PUSH
20049: LD_INT 22
20051: PUSH
20052: LD_OWVAR 2
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 61
20063: PUSH
20064: EMPTY
20065: LIST
20066: PUSH
20067: LD_INT 33
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: LIST
20081: PPUSH
20082: CALL_OW 69
20086: ST_TO_ADDR
// if not tmp then
20087: LD_VAR 0 1
20091: NOT
20092: IFFALSE 20096
// exit ;
20094: GO 20133
// for i in tmp do
20096: LD_ADDR_VAR 0 2
20100: PUSH
20101: LD_VAR 0 1
20105: PUSH
20106: FOR_IN
20107: IFFALSE 20131
// if IsControledBy ( i ) then
20109: LD_VAR 0 2
20113: PPUSH
20114: CALL_OW 312
20118: IFFALSE 20129
// ComUnlink ( i ) ;
20120: LD_VAR 0 2
20124: PPUSH
20125: CALL_OW 136
20129: GO 20106
20131: POP
20132: POP
// end ;
20133: PPOPN 2
20135: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20136: LD_EXP 15
20140: IFFALSE 20148
20142: PUSH
20143: LD_EXP 46
20147: AND
20148: IFFALSE 20288
20150: GO 20152
20152: DISABLE
20153: LD_INT 0
20155: PPUSH
20156: PPUSH
// begin ToLua ( displayPowell(); ) ;
20157: LD_STRING displayPowell();
20159: PPUSH
20160: CALL_OW 559
// uc_side := 0 ;
20164: LD_ADDR_OWVAR 20
20168: PUSH
20169: LD_INT 0
20171: ST_TO_ADDR
// uc_nation := 2 ;
20172: LD_ADDR_OWVAR 21
20176: PUSH
20177: LD_INT 2
20179: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20180: LD_ADDR_OWVAR 37
20184: PUSH
20185: LD_INT 14
20187: ST_TO_ADDR
// vc_engine := engine_siberite ;
20188: LD_ADDR_OWVAR 39
20192: PUSH
20193: LD_INT 3
20195: ST_TO_ADDR
// vc_control := control_apeman ;
20196: LD_ADDR_OWVAR 38
20200: PUSH
20201: LD_INT 5
20203: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20204: LD_ADDR_OWVAR 40
20208: PUSH
20209: LD_INT 29
20211: ST_TO_ADDR
// un := CreateVehicle ;
20212: LD_ADDR_VAR 0 2
20216: PUSH
20217: CALL_OW 45
20221: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20222: LD_VAR 0 2
20226: PPUSH
20227: LD_INT 1
20229: PPUSH
20230: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20234: LD_INT 35
20236: PPUSH
20237: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20241: LD_VAR 0 2
20245: PPUSH
20246: LD_INT 22
20248: PUSH
20249: LD_OWVAR 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PPUSH
20258: CALL_OW 69
20262: PPUSH
20263: LD_VAR 0 2
20267: PPUSH
20268: CALL_OW 74
20272: PPUSH
20273: CALL_OW 115
// until IsDead ( un ) ;
20277: LD_VAR 0 2
20281: PPUSH
20282: CALL_OW 301
20286: IFFALSE 20234
// end ;
20288: PPOPN 2
20290: END
// every 0 0$1 trigger StreamModeActive and sStu do
20291: LD_EXP 15
20295: IFFALSE 20303
20297: PUSH
20298: LD_EXP 54
20302: AND
20303: IFFALSE 20319
20305: GO 20307
20307: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20308: LD_STRING displayStucuk();
20310: PPUSH
20311: CALL_OW 559
// ResetFog ;
20315: CALL_OW 335
// end ;
20319: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20320: LD_EXP 15
20324: IFFALSE 20332
20326: PUSH
20327: LD_EXP 47
20331: AND
20332: IFFALSE 20473
20334: GO 20336
20336: DISABLE
20337: LD_INT 0
20339: PPUSH
20340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20341: LD_ADDR_VAR 0 2
20345: PUSH
20346: LD_INT 22
20348: PUSH
20349: LD_OWVAR 2
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 21
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PPUSH
20372: CALL_OW 69
20376: ST_TO_ADDR
// if not tmp then
20377: LD_VAR 0 2
20381: NOT
20382: IFFALSE 20386
// exit ;
20384: GO 20473
// un := tmp [ rand ( 1 , tmp ) ] ;
20386: LD_ADDR_VAR 0 1
20390: PUSH
20391: LD_VAR 0 2
20395: PUSH
20396: LD_INT 1
20398: PPUSH
20399: LD_VAR 0 2
20403: PPUSH
20404: CALL_OW 12
20408: ARRAY
20409: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20410: LD_VAR 0 1
20414: PPUSH
20415: LD_INT 0
20417: PPUSH
20418: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20422: LD_VAR 0 1
20426: PPUSH
20427: LD_OWVAR 3
20431: PUSH
20432: LD_VAR 0 1
20436: DIFF
20437: PPUSH
20438: LD_VAR 0 1
20442: PPUSH
20443: CALL_OW 74
20447: PPUSH
20448: CALL_OW 115
// wait ( 0 0$20 ) ;
20452: LD_INT 700
20454: PPUSH
20455: CALL_OW 67
// SetSide ( un , your_side ) ;
20459: LD_VAR 0 1
20463: PPUSH
20464: LD_OWVAR 2
20468: PPUSH
20469: CALL_OW 235
// end ;
20473: PPOPN 2
20475: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20476: LD_EXP 15
20480: IFFALSE 20488
20482: PUSH
20483: LD_EXP 48
20487: AND
20488: IFFALSE 20594
20490: GO 20492
20492: DISABLE
20493: LD_INT 0
20495: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20496: LD_ADDR_VAR 0 1
20500: PUSH
20501: LD_INT 22
20503: PUSH
20504: LD_OWVAR 2
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 2
20515: PUSH
20516: LD_INT 30
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 30
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: LIST
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PPUSH
20545: CALL_OW 69
20549: ST_TO_ADDR
// if not depot then
20550: LD_VAR 0 1
20554: NOT
20555: IFFALSE 20559
// exit ;
20557: GO 20594
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20559: LD_VAR 0 1
20563: PUSH
20564: LD_INT 1
20566: ARRAY
20567: PPUSH
20568: CALL_OW 250
20572: PPUSH
20573: LD_VAR 0 1
20577: PUSH
20578: LD_INT 1
20580: ARRAY
20581: PPUSH
20582: CALL_OW 251
20586: PPUSH
20587: LD_INT 70
20589: PPUSH
20590: CALL_OW 495
// end ;
20594: PPOPN 1
20596: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20597: LD_EXP 15
20601: IFFALSE 20609
20603: PUSH
20604: LD_EXP 49
20608: AND
20609: IFFALSE 20820
20611: GO 20613
20613: DISABLE
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
20618: PPUSH
20619: PPUSH
20620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20621: LD_ADDR_VAR 0 5
20625: PUSH
20626: LD_INT 22
20628: PUSH
20629: LD_OWVAR 2
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 21
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PPUSH
20652: CALL_OW 69
20656: ST_TO_ADDR
// if not tmp then
20657: LD_VAR 0 5
20661: NOT
20662: IFFALSE 20666
// exit ;
20664: GO 20820
// for i in tmp do
20666: LD_ADDR_VAR 0 1
20670: PUSH
20671: LD_VAR 0 5
20675: PUSH
20676: FOR_IN
20677: IFFALSE 20818
// begin d := rand ( 0 , 5 ) ;
20679: LD_ADDR_VAR 0 4
20683: PUSH
20684: LD_INT 0
20686: PPUSH
20687: LD_INT 5
20689: PPUSH
20690: CALL_OW 12
20694: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20695: LD_ADDR_VAR 0 2
20699: PUSH
20700: LD_VAR 0 1
20704: PPUSH
20705: CALL_OW 250
20709: PPUSH
20710: LD_VAR 0 4
20714: PPUSH
20715: LD_INT 3
20717: PPUSH
20718: LD_INT 12
20720: PPUSH
20721: CALL_OW 12
20725: PPUSH
20726: CALL_OW 272
20730: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20731: LD_ADDR_VAR 0 3
20735: PUSH
20736: LD_VAR 0 1
20740: PPUSH
20741: CALL_OW 251
20745: PPUSH
20746: LD_VAR 0 4
20750: PPUSH
20751: LD_INT 3
20753: PPUSH
20754: LD_INT 12
20756: PPUSH
20757: CALL_OW 12
20761: PPUSH
20762: CALL_OW 273
20766: ST_TO_ADDR
// if ValidHex ( x , y ) then
20767: LD_VAR 0 2
20771: PPUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: CALL_OW 488
20781: IFFALSE 20816
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20783: LD_VAR 0 1
20787: PPUSH
20788: LD_VAR 0 2
20792: PPUSH
20793: LD_VAR 0 3
20797: PPUSH
20798: LD_INT 3
20800: PPUSH
20801: LD_INT 6
20803: PPUSH
20804: CALL_OW 12
20808: PPUSH
20809: LD_INT 1
20811: PPUSH
20812: CALL_OW 483
// end ;
20816: GO 20676
20818: POP
20819: POP
// end ;
20820: PPOPN 5
20822: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20823: LD_EXP 15
20827: IFFALSE 20835
20829: PUSH
20830: LD_EXP 50
20834: AND
20835: IFFALSE 20929
20837: GO 20839
20839: DISABLE
20840: LD_INT 0
20842: PPUSH
20843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20844: LD_ADDR_VAR 0 2
20848: PUSH
20849: LD_INT 22
20851: PUSH
20852: LD_OWVAR 2
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 32
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 21
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: PPUSH
20886: CALL_OW 69
20890: ST_TO_ADDR
// if not tmp then
20891: LD_VAR 0 2
20895: NOT
20896: IFFALSE 20900
// exit ;
20898: GO 20929
// for i in tmp do
20900: LD_ADDR_VAR 0 1
20904: PUSH
20905: LD_VAR 0 2
20909: PUSH
20910: FOR_IN
20911: IFFALSE 20927
// SetFuel ( i , 0 ) ;
20913: LD_VAR 0 1
20917: PPUSH
20918: LD_INT 0
20920: PPUSH
20921: CALL_OW 240
20925: GO 20910
20927: POP
20928: POP
// end ;
20929: PPOPN 2
20931: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20932: LD_EXP 15
20936: IFFALSE 20944
20938: PUSH
20939: LD_EXP 51
20943: AND
20944: IFFALSE 21010
20946: GO 20948
20948: DISABLE
20949: LD_INT 0
20951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20952: LD_ADDR_VAR 0 1
20956: PUSH
20957: LD_INT 22
20959: PUSH
20960: LD_OWVAR 2
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 30
20971: PUSH
20972: LD_INT 29
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PPUSH
20983: CALL_OW 69
20987: ST_TO_ADDR
// if not tmp then
20988: LD_VAR 0 1
20992: NOT
20993: IFFALSE 20997
// exit ;
20995: GO 21010
// DestroyUnit ( tmp [ 1 ] ) ;
20997: LD_VAR 0 1
21001: PUSH
21002: LD_INT 1
21004: ARRAY
21005: PPUSH
21006: CALL_OW 65
// end ;
21010: PPOPN 1
21012: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21013: LD_EXP 15
21017: IFFALSE 21025
21019: PUSH
21020: LD_EXP 53
21024: AND
21025: IFFALSE 21154
21027: GO 21029
21029: DISABLE
21030: LD_INT 0
21032: PPUSH
// begin uc_side := 0 ;
21033: LD_ADDR_OWVAR 20
21037: PUSH
21038: LD_INT 0
21040: ST_TO_ADDR
// uc_nation := nation_arabian ;
21041: LD_ADDR_OWVAR 21
21045: PUSH
21046: LD_INT 2
21048: ST_TO_ADDR
// hc_gallery :=  ;
21049: LD_ADDR_OWVAR 33
21053: PUSH
21054: LD_STRING 
21056: ST_TO_ADDR
// hc_name :=  ;
21057: LD_ADDR_OWVAR 26
21061: PUSH
21062: LD_STRING 
21064: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21065: LD_INT 1
21067: PPUSH
21068: LD_INT 11
21070: PPUSH
21071: LD_INT 10
21073: PPUSH
21074: CALL_OW 380
// un := CreateHuman ;
21078: LD_ADDR_VAR 0 1
21082: PUSH
21083: CALL_OW 44
21087: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21088: LD_VAR 0 1
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21100: LD_INT 35
21102: PPUSH
21103: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21107: LD_VAR 0 1
21111: PPUSH
21112: LD_INT 22
21114: PUSH
21115: LD_OWVAR 2
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PPUSH
21124: CALL_OW 69
21128: PPUSH
21129: LD_VAR 0 1
21133: PPUSH
21134: CALL_OW 74
21138: PPUSH
21139: CALL_OW 115
// until IsDead ( un ) ;
21143: LD_VAR 0 1
21147: PPUSH
21148: CALL_OW 301
21152: IFFALSE 21100
// end ;
21154: PPOPN 1
21156: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21157: LD_EXP 15
21161: IFFALSE 21169
21163: PUSH
21164: LD_EXP 55
21168: AND
21169: IFFALSE 21181
21171: GO 21173
21173: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21174: LD_STRING earthquake(getX(game), 0, 32)
21176: PPUSH
21177: CALL_OW 559
21181: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21182: LD_EXP 15
21186: IFFALSE 21194
21188: PUSH
21189: LD_EXP 56
21193: AND
21194: IFFALSE 21285
21196: GO 21198
21198: DISABLE
21199: LD_INT 0
21201: PPUSH
// begin enable ;
21202: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21203: LD_ADDR_VAR 0 1
21207: PUSH
21208: LD_INT 22
21210: PUSH
21211: LD_OWVAR 2
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 21
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 33
21232: PUSH
21233: LD_INT 3
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: LIST
21244: PPUSH
21245: CALL_OW 69
21249: ST_TO_ADDR
// if not tmp then
21250: LD_VAR 0 1
21254: NOT
21255: IFFALSE 21259
// exit ;
21257: GO 21285
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21259: LD_VAR 0 1
21263: PUSH
21264: LD_INT 1
21266: PPUSH
21267: LD_VAR 0 1
21271: PPUSH
21272: CALL_OW 12
21276: ARRAY
21277: PPUSH
21278: LD_INT 1
21280: PPUSH
21281: CALL_OW 234
// end ;
21285: PPOPN 1
21287: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21288: LD_EXP 15
21292: IFFALSE 21300
21294: PUSH
21295: LD_EXP 57
21299: AND
21300: IFFALSE 21441
21302: GO 21304
21304: DISABLE
21305: LD_INT 0
21307: PPUSH
21308: PPUSH
21309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21310: LD_ADDR_VAR 0 3
21314: PUSH
21315: LD_INT 22
21317: PUSH
21318: LD_OWVAR 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 25
21329: PUSH
21330: LD_INT 1
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PPUSH
21341: CALL_OW 69
21345: ST_TO_ADDR
// if not tmp then
21346: LD_VAR 0 3
21350: NOT
21351: IFFALSE 21355
// exit ;
21353: GO 21441
// un := tmp [ rand ( 1 , tmp ) ] ;
21355: LD_ADDR_VAR 0 2
21359: PUSH
21360: LD_VAR 0 3
21364: PUSH
21365: LD_INT 1
21367: PPUSH
21368: LD_VAR 0 3
21372: PPUSH
21373: CALL_OW 12
21377: ARRAY
21378: ST_TO_ADDR
// if Crawls ( un ) then
21379: LD_VAR 0 2
21383: PPUSH
21384: CALL_OW 318
21388: IFFALSE 21399
// ComWalk ( un ) ;
21390: LD_VAR 0 2
21394: PPUSH
21395: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21399: LD_VAR 0 2
21403: PPUSH
21404: LD_INT 9
21406: PPUSH
21407: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21411: LD_INT 28
21413: PPUSH
21414: LD_OWVAR 2
21418: PPUSH
21419: LD_INT 2
21421: PPUSH
21422: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21426: LD_INT 29
21428: PPUSH
21429: LD_OWVAR 2
21433: PPUSH
21434: LD_INT 2
21436: PPUSH
21437: CALL_OW 322
// end ;
21441: PPOPN 3
21443: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21444: LD_EXP 15
21448: IFFALSE 21456
21450: PUSH
21451: LD_EXP 58
21455: AND
21456: IFFALSE 21567
21458: GO 21460
21460: DISABLE
21461: LD_INT 0
21463: PPUSH
21464: PPUSH
21465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21466: LD_ADDR_VAR 0 3
21470: PUSH
21471: LD_INT 22
21473: PUSH
21474: LD_OWVAR 2
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 25
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PPUSH
21497: CALL_OW 69
21501: ST_TO_ADDR
// if not tmp then
21502: LD_VAR 0 3
21506: NOT
21507: IFFALSE 21511
// exit ;
21509: GO 21567
// un := tmp [ rand ( 1 , tmp ) ] ;
21511: LD_ADDR_VAR 0 2
21515: PUSH
21516: LD_VAR 0 3
21520: PUSH
21521: LD_INT 1
21523: PPUSH
21524: LD_VAR 0 3
21528: PPUSH
21529: CALL_OW 12
21533: ARRAY
21534: ST_TO_ADDR
// if Crawls ( un ) then
21535: LD_VAR 0 2
21539: PPUSH
21540: CALL_OW 318
21544: IFFALSE 21555
// ComWalk ( un ) ;
21546: LD_VAR 0 2
21550: PPUSH
21551: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21555: LD_VAR 0 2
21559: PPUSH
21560: LD_INT 8
21562: PPUSH
21563: CALL_OW 336
// end ;
21567: PPOPN 3
21569: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21570: LD_EXP 15
21574: IFFALSE 21582
21576: PUSH
21577: LD_EXP 59
21581: AND
21582: IFFALSE 21726
21584: GO 21586
21586: DISABLE
21587: LD_INT 0
21589: PPUSH
21590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21591: LD_ADDR_VAR 0 2
21595: PUSH
21596: LD_INT 22
21598: PUSH
21599: LD_OWVAR 2
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 21
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 2
21620: PUSH
21621: LD_INT 34
21623: PUSH
21624: LD_INT 12
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 34
21633: PUSH
21634: LD_INT 51
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 34
21643: PUSH
21644: LD_INT 32
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: PPUSH
21662: CALL_OW 69
21666: ST_TO_ADDR
// if not tmp then
21667: LD_VAR 0 2
21671: NOT
21672: IFFALSE 21676
// exit ;
21674: GO 21726
// for i in tmp do
21676: LD_ADDR_VAR 0 1
21680: PUSH
21681: LD_VAR 0 2
21685: PUSH
21686: FOR_IN
21687: IFFALSE 21724
// if GetCargo ( i , mat_artifact ) = 0 then
21689: LD_VAR 0 1
21693: PPUSH
21694: LD_INT 4
21696: PPUSH
21697: CALL_OW 289
21701: PUSH
21702: LD_INT 0
21704: EQUAL
21705: IFFALSE 21722
// SetCargo ( i , mat_siberit , 100 ) ;
21707: LD_VAR 0 1
21711: PPUSH
21712: LD_INT 3
21714: PPUSH
21715: LD_INT 100
21717: PPUSH
21718: CALL_OW 290
21722: GO 21686
21724: POP
21725: POP
// end ;
21726: PPOPN 2
21728: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21729: LD_EXP 15
21733: IFFALSE 21741
21735: PUSH
21736: LD_EXP 60
21740: AND
21741: IFFALSE 21924
21743: GO 21745
21745: DISABLE
21746: LD_INT 0
21748: PPUSH
21749: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21750: LD_ADDR_VAR 0 2
21754: PUSH
21755: LD_INT 22
21757: PUSH
21758: LD_OWVAR 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PPUSH
21767: CALL_OW 69
21771: ST_TO_ADDR
// if not tmp then
21772: LD_VAR 0 2
21776: NOT
21777: IFFALSE 21781
// exit ;
21779: GO 21924
// for i := 1 to 2 do
21781: LD_ADDR_VAR 0 1
21785: PUSH
21786: DOUBLE
21787: LD_INT 1
21789: DEC
21790: ST_TO_ADDR
21791: LD_INT 2
21793: PUSH
21794: FOR_TO
21795: IFFALSE 21922
// begin uc_side := your_side ;
21797: LD_ADDR_OWVAR 20
21801: PUSH
21802: LD_OWVAR 2
21806: ST_TO_ADDR
// uc_nation := nation_american ;
21807: LD_ADDR_OWVAR 21
21811: PUSH
21812: LD_INT 1
21814: ST_TO_ADDR
// vc_chassis := us_morphling ;
21815: LD_ADDR_OWVAR 37
21819: PUSH
21820: LD_INT 5
21822: ST_TO_ADDR
// vc_engine := engine_siberite ;
21823: LD_ADDR_OWVAR 39
21827: PUSH
21828: LD_INT 3
21830: ST_TO_ADDR
// vc_control := control_computer ;
21831: LD_ADDR_OWVAR 38
21835: PUSH
21836: LD_INT 3
21838: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21839: LD_ADDR_OWVAR 40
21843: PUSH
21844: LD_INT 10
21846: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21847: LD_VAR 0 2
21851: PUSH
21852: LD_INT 1
21854: ARRAY
21855: PPUSH
21856: CALL_OW 310
21860: NOT
21861: IFFALSE 21908
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21863: CALL_OW 45
21867: PPUSH
21868: LD_VAR 0 2
21872: PUSH
21873: LD_INT 1
21875: ARRAY
21876: PPUSH
21877: CALL_OW 250
21881: PPUSH
21882: LD_VAR 0 2
21886: PUSH
21887: LD_INT 1
21889: ARRAY
21890: PPUSH
21891: CALL_OW 251
21895: PPUSH
21896: LD_INT 12
21898: PPUSH
21899: LD_INT 1
21901: PPUSH
21902: CALL_OW 50
21906: GO 21920
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21908: CALL_OW 45
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: CALL_OW 51
// end ;
21920: GO 21794
21922: POP
21923: POP
// end ;
21924: PPOPN 2
21926: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21927: LD_EXP 15
21931: IFFALSE 21939
21933: PUSH
21934: LD_EXP 61
21938: AND
21939: IFFALSE 22161
21941: GO 21943
21943: DISABLE
21944: LD_INT 0
21946: PPUSH
21947: PPUSH
21948: PPUSH
21949: PPUSH
21950: PPUSH
21951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21952: LD_ADDR_VAR 0 6
21956: PUSH
21957: LD_INT 22
21959: PUSH
21960: LD_OWVAR 2
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 21
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 3
21981: PUSH
21982: LD_INT 23
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 69
22005: ST_TO_ADDR
// if not tmp then
22006: LD_VAR 0 6
22010: NOT
22011: IFFALSE 22015
// exit ;
22013: GO 22161
// s1 := rand ( 1 , 4 ) ;
22015: LD_ADDR_VAR 0 2
22019: PUSH
22020: LD_INT 1
22022: PPUSH
22023: LD_INT 4
22025: PPUSH
22026: CALL_OW 12
22030: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22031: LD_ADDR_VAR 0 4
22035: PUSH
22036: LD_VAR 0 6
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: PPUSH
22045: LD_VAR 0 2
22049: PPUSH
22050: CALL_OW 259
22054: ST_TO_ADDR
// if s1 = 1 then
22055: LD_VAR 0 2
22059: PUSH
22060: LD_INT 1
22062: EQUAL
22063: IFFALSE 22083
// s2 := rand ( 2 , 4 ) else
22065: LD_ADDR_VAR 0 3
22069: PUSH
22070: LD_INT 2
22072: PPUSH
22073: LD_INT 4
22075: PPUSH
22076: CALL_OW 12
22080: ST_TO_ADDR
22081: GO 22091
// s2 := 1 ;
22083: LD_ADDR_VAR 0 3
22087: PUSH
22088: LD_INT 1
22090: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22091: LD_ADDR_VAR 0 5
22095: PUSH
22096: LD_VAR 0 6
22100: PUSH
22101: LD_INT 1
22103: ARRAY
22104: PPUSH
22105: LD_VAR 0 3
22109: PPUSH
22110: CALL_OW 259
22114: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22115: LD_VAR 0 6
22119: PUSH
22120: LD_INT 1
22122: ARRAY
22123: PPUSH
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_VAR 0 5
22133: PPUSH
22134: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22138: LD_VAR 0 6
22142: PUSH
22143: LD_INT 1
22145: ARRAY
22146: PPUSH
22147: LD_VAR 0 3
22151: PPUSH
22152: LD_VAR 0 4
22156: PPUSH
22157: CALL_OW 237
// end ;
22161: PPOPN 6
22163: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22164: LD_EXP 15
22168: IFFALSE 22176
22170: PUSH
22171: LD_EXP 62
22175: AND
22176: IFFALSE 22255
22178: GO 22180
22180: DISABLE
22181: LD_INT 0
22183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22184: LD_ADDR_VAR 0 1
22188: PUSH
22189: LD_INT 22
22191: PUSH
22192: LD_OWVAR 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 30
22203: PUSH
22204: LD_INT 3
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PPUSH
22215: CALL_OW 69
22219: ST_TO_ADDR
// if not tmp then
22220: LD_VAR 0 1
22224: NOT
22225: IFFALSE 22229
// exit ;
22227: GO 22255
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22229: LD_VAR 0 1
22233: PUSH
22234: LD_INT 1
22236: PPUSH
22237: LD_VAR 0 1
22241: PPUSH
22242: CALL_OW 12
22246: ARRAY
22247: PPUSH
22248: LD_INT 1
22250: PPUSH
22251: CALL_OW 234
// end ;
22255: PPOPN 1
22257: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22258: LD_EXP 15
22262: IFFALSE 22270
22264: PUSH
22265: LD_EXP 63
22269: AND
22270: IFFALSE 22382
22272: GO 22274
22274: DISABLE
22275: LD_INT 0
22277: PPUSH
22278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22279: LD_ADDR_VAR 0 2
22283: PUSH
22284: LD_INT 22
22286: PUSH
22287: LD_OWVAR 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: LD_INT 30
22301: PUSH
22302: LD_INT 27
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 30
22311: PUSH
22312: LD_INT 26
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 30
22321: PUSH
22322: LD_INT 28
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 69
22343: ST_TO_ADDR
// if not tmp then
22344: LD_VAR 0 2
22348: NOT
22349: IFFALSE 22353
// exit ;
22351: GO 22382
// for i in tmp do
22353: LD_ADDR_VAR 0 1
22357: PUSH
22358: LD_VAR 0 2
22362: PUSH
22363: FOR_IN
22364: IFFALSE 22380
// SetLives ( i , 1 ) ;
22366: LD_VAR 0 1
22370: PPUSH
22371: LD_INT 1
22373: PPUSH
22374: CALL_OW 234
22378: GO 22363
22380: POP
22381: POP
// end ;
22382: PPOPN 2
22384: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22385: LD_EXP 15
22389: IFFALSE 22397
22391: PUSH
22392: LD_EXP 64
22396: AND
22397: IFFALSE 22684
22399: GO 22401
22401: DISABLE
22402: LD_INT 0
22404: PPUSH
22405: PPUSH
22406: PPUSH
// begin i := rand ( 1 , 7 ) ;
22407: LD_ADDR_VAR 0 1
22411: PUSH
22412: LD_INT 1
22414: PPUSH
22415: LD_INT 7
22417: PPUSH
22418: CALL_OW 12
22422: ST_TO_ADDR
// case i of 1 :
22423: LD_VAR 0 1
22427: PUSH
22428: LD_INT 1
22430: DOUBLE
22431: EQUAL
22432: IFTRUE 22436
22434: GO 22446
22436: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22437: LD_STRING earthquake(getX(game), 0, 32)
22439: PPUSH
22440: CALL_OW 559
22444: GO 22684
22446: LD_INT 2
22448: DOUBLE
22449: EQUAL
22450: IFTRUE 22454
22452: GO 22468
22454: POP
// begin ToLua ( displayStucuk(); ) ;
22455: LD_STRING displayStucuk();
22457: PPUSH
22458: CALL_OW 559
// ResetFog ;
22462: CALL_OW 335
// end ; 3 :
22466: GO 22684
22468: LD_INT 3
22470: DOUBLE
22471: EQUAL
22472: IFTRUE 22476
22474: GO 22580
22476: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22477: LD_ADDR_VAR 0 2
22481: PUSH
22482: LD_INT 22
22484: PUSH
22485: LD_OWVAR 2
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 25
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PPUSH
22508: CALL_OW 69
22512: ST_TO_ADDR
// if not tmp then
22513: LD_VAR 0 2
22517: NOT
22518: IFFALSE 22522
// exit ;
22520: GO 22684
// un := tmp [ rand ( 1 , tmp ) ] ;
22522: LD_ADDR_VAR 0 3
22526: PUSH
22527: LD_VAR 0 2
22531: PUSH
22532: LD_INT 1
22534: PPUSH
22535: LD_VAR 0 2
22539: PPUSH
22540: CALL_OW 12
22544: ARRAY
22545: ST_TO_ADDR
// if Crawls ( un ) then
22546: LD_VAR 0 3
22550: PPUSH
22551: CALL_OW 318
22555: IFFALSE 22566
// ComWalk ( un ) ;
22557: LD_VAR 0 3
22561: PPUSH
22562: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22566: LD_VAR 0 3
22570: PPUSH
22571: LD_INT 8
22573: PPUSH
22574: CALL_OW 336
// end ; 4 :
22578: GO 22684
22580: LD_INT 4
22582: DOUBLE
22583: EQUAL
22584: IFTRUE 22588
22586: GO 22662
22588: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22589: LD_ADDR_VAR 0 2
22593: PUSH
22594: LD_INT 22
22596: PUSH
22597: LD_OWVAR 2
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 30
22608: PUSH
22609: LD_INT 29
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PPUSH
22620: CALL_OW 69
22624: ST_TO_ADDR
// if not tmp then
22625: LD_VAR 0 2
22629: NOT
22630: IFFALSE 22634
// exit ;
22632: GO 22684
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22634: LD_VAR 0 2
22638: PUSH
22639: LD_INT 1
22641: ARRAY
22642: PPUSH
22643: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22647: LD_VAR 0 2
22651: PUSH
22652: LD_INT 1
22654: ARRAY
22655: PPUSH
22656: CALL_OW 65
// end ; 5 .. 7 :
22660: GO 22684
22662: LD_INT 5
22664: DOUBLE
22665: GREATEREQUAL
22666: IFFALSE 22674
22668: LD_INT 7
22670: DOUBLE
22671: LESSEQUAL
22672: IFTRUE 22676
22674: GO 22683
22676: POP
// StreamSibBomb ; end ;
22677: CALL 18865 0 0
22681: GO 22684
22683: POP
// end ;
22684: PPOPN 3
22686: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22687: LD_EXP 15
22691: IFFALSE 22699
22693: PUSH
22694: LD_EXP 65
22698: AND
22699: IFFALSE 22855
22701: GO 22703
22703: DISABLE
22704: LD_INT 0
22706: PPUSH
22707: PPUSH
22708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22709: LD_ADDR_VAR 0 2
22713: PUSH
22714: LD_INT 81
22716: PUSH
22717: LD_OWVAR 2
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 2
22728: PUSH
22729: LD_INT 21
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 21
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PPUSH
22758: CALL_OW 69
22762: ST_TO_ADDR
// if not tmp then
22763: LD_VAR 0 2
22767: NOT
22768: IFFALSE 22772
// exit ;
22770: GO 22855
// p := 0 ;
22772: LD_ADDR_VAR 0 3
22776: PUSH
22777: LD_INT 0
22779: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22780: LD_INT 35
22782: PPUSH
22783: CALL_OW 67
// p := p + 1 ;
22787: LD_ADDR_VAR 0 3
22791: PUSH
22792: LD_VAR 0 3
22796: PUSH
22797: LD_INT 1
22799: PLUS
22800: ST_TO_ADDR
// for i in tmp do
22801: LD_ADDR_VAR 0 1
22805: PUSH
22806: LD_VAR 0 2
22810: PUSH
22811: FOR_IN
22812: IFFALSE 22843
// if GetLives ( i ) < 1000 then
22814: LD_VAR 0 1
22818: PPUSH
22819: CALL_OW 256
22823: PUSH
22824: LD_INT 1000
22826: LESS
22827: IFFALSE 22841
// SetLives ( i , 1000 ) ;
22829: LD_VAR 0 1
22833: PPUSH
22834: LD_INT 1000
22836: PPUSH
22837: CALL_OW 234
22841: GO 22811
22843: POP
22844: POP
// until p > 20 ;
22845: LD_VAR 0 3
22849: PUSH
22850: LD_INT 20
22852: GREATER
22853: IFFALSE 22780
// end ;
22855: PPOPN 3
22857: END
// every 0 0$1 trigger StreamModeActive and sTime do
22858: LD_EXP 15
22862: IFFALSE 22870
22864: PUSH
22865: LD_EXP 66
22869: AND
22870: IFFALSE 22905
22872: GO 22874
22874: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22875: LD_INT 28
22877: PPUSH
22878: LD_OWVAR 2
22882: PPUSH
22883: LD_INT 2
22885: PPUSH
22886: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22890: LD_INT 30
22892: PPUSH
22893: LD_OWVAR 2
22897: PPUSH
22898: LD_INT 2
22900: PPUSH
22901: CALL_OW 322
// end ;
22905: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22906: LD_EXP 15
22910: IFFALSE 22918
22912: PUSH
22913: LD_EXP 67
22917: AND
22918: IFFALSE 23039
22920: GO 22922
22922: DISABLE
22923: LD_INT 0
22925: PPUSH
22926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22927: LD_ADDR_VAR 0 2
22931: PUSH
22932: LD_INT 22
22934: PUSH
22935: LD_OWVAR 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 21
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 3
22956: PUSH
22957: LD_INT 23
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: PPUSH
22976: CALL_OW 69
22980: ST_TO_ADDR
// if not tmp then
22981: LD_VAR 0 2
22985: NOT
22986: IFFALSE 22990
// exit ;
22988: GO 23039
// for i in tmp do
22990: LD_ADDR_VAR 0 1
22994: PUSH
22995: LD_VAR 0 2
22999: PUSH
23000: FOR_IN
23001: IFFALSE 23037
// begin if Crawls ( i ) then
23003: LD_VAR 0 1
23007: PPUSH
23008: CALL_OW 318
23012: IFFALSE 23023
// ComWalk ( i ) ;
23014: LD_VAR 0 1
23018: PPUSH
23019: CALL_OW 138
// SetClass ( i , 2 ) ;
23023: LD_VAR 0 1
23027: PPUSH
23028: LD_INT 2
23030: PPUSH
23031: CALL_OW 336
// end ;
23035: GO 23000
23037: POP
23038: POP
// end ;
23039: PPOPN 2
23041: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23042: LD_EXP 15
23046: IFFALSE 23054
23048: PUSH
23049: LD_EXP 68
23053: AND
23054: IFFALSE 23344
23056: GO 23058
23058: DISABLE
23059: LD_INT 0
23061: PPUSH
23062: PPUSH
23063: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23064: LD_OWVAR 2
23068: PPUSH
23069: LD_INT 9
23071: PPUSH
23072: LD_INT 1
23074: PPUSH
23075: LD_INT 1
23077: PPUSH
23078: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23082: LD_INT 9
23084: PPUSH
23085: LD_OWVAR 2
23089: PPUSH
23090: CALL_OW 343
// uc_side := 9 ;
23094: LD_ADDR_OWVAR 20
23098: PUSH
23099: LD_INT 9
23101: ST_TO_ADDR
// uc_nation := 2 ;
23102: LD_ADDR_OWVAR 21
23106: PUSH
23107: LD_INT 2
23109: ST_TO_ADDR
// hc_name := Dark Warrior ;
23110: LD_ADDR_OWVAR 26
23114: PUSH
23115: LD_STRING Dark Warrior
23117: ST_TO_ADDR
// hc_gallery :=  ;
23118: LD_ADDR_OWVAR 33
23122: PUSH
23123: LD_STRING 
23125: ST_TO_ADDR
// hc_noskilllimit := true ;
23126: LD_ADDR_OWVAR 76
23130: PUSH
23131: LD_INT 1
23133: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23134: LD_ADDR_OWVAR 31
23138: PUSH
23139: LD_INT 30
23141: PUSH
23142: LD_INT 30
23144: PUSH
23145: LD_INT 30
23147: PUSH
23148: LD_INT 30
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: ST_TO_ADDR
// un := CreateHuman ;
23157: LD_ADDR_VAR 0 3
23161: PUSH
23162: CALL_OW 44
23166: ST_TO_ADDR
// hc_noskilllimit := false ;
23167: LD_ADDR_OWVAR 76
23171: PUSH
23172: LD_INT 0
23174: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23175: LD_VAR 0 3
23179: PPUSH
23180: LD_INT 1
23182: PPUSH
23183: CALL_OW 51
// ToLua ( playRanger() ) ;
23187: LD_STRING playRanger()
23189: PPUSH
23190: CALL_OW 559
// p := 0 ;
23194: LD_ADDR_VAR 0 2
23198: PUSH
23199: LD_INT 0
23201: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23202: LD_INT 35
23204: PPUSH
23205: CALL_OW 67
// p := p + 1 ;
23209: LD_ADDR_VAR 0 2
23213: PUSH
23214: LD_VAR 0 2
23218: PUSH
23219: LD_INT 1
23221: PLUS
23222: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23223: LD_VAR 0 3
23227: PPUSH
23228: CALL_OW 256
23232: PUSH
23233: LD_INT 1000
23235: LESS
23236: IFFALSE 23250
// SetLives ( un , 1000 ) ;
23238: LD_VAR 0 3
23242: PPUSH
23243: LD_INT 1000
23245: PPUSH
23246: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23250: LD_VAR 0 3
23254: PPUSH
23255: LD_INT 81
23257: PUSH
23258: LD_OWVAR 2
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 91
23269: PUSH
23270: LD_VAR 0 3
23274: PUSH
23275: LD_INT 30
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PPUSH
23287: CALL_OW 69
23291: PPUSH
23292: LD_VAR 0 3
23296: PPUSH
23297: CALL_OW 74
23301: PPUSH
23302: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23306: LD_VAR 0 2
23310: PUSH
23311: LD_INT 80
23313: GREATER
23314: IFTRUE 23327
23316: PUSH
23317: LD_VAR 0 3
23321: PPUSH
23322: CALL_OW 301
23326: OR
23327: IFFALSE 23202
// if un then
23329: LD_VAR 0 3
23333: IFFALSE 23344
// RemoveUnit ( un ) ;
23335: LD_VAR 0 3
23339: PPUSH
23340: CALL_OW 64
// end ;
23344: PPOPN 3
23346: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23347: LD_EXP 69
23351: IFFALSE 23467
23353: GO 23355
23355: DISABLE
23356: LD_INT 0
23358: PPUSH
23359: PPUSH
23360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23361: LD_ADDR_VAR 0 2
23365: PUSH
23366: LD_INT 81
23368: PUSH
23369: LD_OWVAR 2
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 21
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PPUSH
23392: CALL_OW 69
23396: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23397: LD_STRING playComputer()
23399: PPUSH
23400: CALL_OW 559
// if not tmp then
23404: LD_VAR 0 2
23408: NOT
23409: IFFALSE 23413
// exit ;
23411: GO 23467
// for i in tmp do
23413: LD_ADDR_VAR 0 1
23417: PUSH
23418: LD_VAR 0 2
23422: PUSH
23423: FOR_IN
23424: IFFALSE 23465
// for j := 1 to 4 do
23426: LD_ADDR_VAR 0 3
23430: PUSH
23431: DOUBLE
23432: LD_INT 1
23434: DEC
23435: ST_TO_ADDR
23436: LD_INT 4
23438: PUSH
23439: FOR_TO
23440: IFFALSE 23461
// SetSkill ( i , j , 10 ) ;
23442: LD_VAR 0 1
23446: PPUSH
23447: LD_VAR 0 3
23451: PPUSH
23452: LD_INT 10
23454: PPUSH
23455: CALL_OW 237
23459: GO 23439
23461: POP
23462: POP
23463: GO 23423
23465: POP
23466: POP
// end ;
23467: PPOPN 3
23469: END
// every 0 0$1 trigger s30 do var i , tmp ;
23470: LD_EXP 70
23474: IFFALSE 23543
23476: GO 23478
23478: DISABLE
23479: LD_INT 0
23481: PPUSH
23482: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23483: LD_ADDR_VAR 0 2
23487: PUSH
23488: LD_INT 22
23490: PUSH
23491: LD_OWVAR 2
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PPUSH
23500: CALL_OW 69
23504: ST_TO_ADDR
// if not tmp then
23505: LD_VAR 0 2
23509: NOT
23510: IFFALSE 23514
// exit ;
23512: GO 23543
// for i in tmp do
23514: LD_ADDR_VAR 0 1
23518: PUSH
23519: LD_VAR 0 2
23523: PUSH
23524: FOR_IN
23525: IFFALSE 23541
// SetLives ( i , 300 ) ;
23527: LD_VAR 0 1
23531: PPUSH
23532: LD_INT 300
23534: PPUSH
23535: CALL_OW 234
23539: GO 23524
23541: POP
23542: POP
// end ;
23543: PPOPN 2
23545: END
// every 0 0$1 trigger s60 do var i , tmp ;
23546: LD_EXP 71
23550: IFFALSE 23619
23552: GO 23554
23554: DISABLE
23555: LD_INT 0
23557: PPUSH
23558: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23559: LD_ADDR_VAR 0 2
23563: PUSH
23564: LD_INT 22
23566: PUSH
23567: LD_OWVAR 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PPUSH
23576: CALL_OW 69
23580: ST_TO_ADDR
// if not tmp then
23581: LD_VAR 0 2
23585: NOT
23586: IFFALSE 23590
// exit ;
23588: GO 23619
// for i in tmp do
23590: LD_ADDR_VAR 0 1
23594: PUSH
23595: LD_VAR 0 2
23599: PUSH
23600: FOR_IN
23601: IFFALSE 23617
// SetLives ( i , 600 ) ;
23603: LD_VAR 0 1
23607: PPUSH
23608: LD_INT 600
23610: PPUSH
23611: CALL_OW 234
23615: GO 23600
23617: POP
23618: POP
// end ;
23619: PPOPN 2
23621: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23622: LD_INT 0
23624: PPUSH
// case cmd of 301 :
23625: LD_VAR 0 1
23629: PUSH
23630: LD_INT 301
23632: DOUBLE
23633: EQUAL
23634: IFTRUE 23638
23636: GO 23670
23638: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23639: LD_VAR 0 6
23643: PPUSH
23644: LD_VAR 0 7
23648: PPUSH
23649: LD_VAR 0 8
23653: PPUSH
23654: LD_VAR 0 4
23658: PPUSH
23659: LD_VAR 0 5
23663: PPUSH
23664: CALL 24883 0 5
23668: GO 23791
23670: LD_INT 302
23672: DOUBLE
23673: EQUAL
23674: IFTRUE 23678
23676: GO 23715
23678: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23679: LD_VAR 0 6
23683: PPUSH
23684: LD_VAR 0 7
23688: PPUSH
23689: LD_VAR 0 8
23693: PPUSH
23694: LD_VAR 0 9
23698: PPUSH
23699: LD_VAR 0 4
23703: PPUSH
23704: LD_VAR 0 5
23708: PPUSH
23709: CALL 24974 0 6
23713: GO 23791
23715: LD_INT 303
23717: DOUBLE
23718: EQUAL
23719: IFTRUE 23723
23721: GO 23760
23723: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23724: LD_VAR 0 6
23728: PPUSH
23729: LD_VAR 0 7
23733: PPUSH
23734: LD_VAR 0 8
23738: PPUSH
23739: LD_VAR 0 9
23743: PPUSH
23744: LD_VAR 0 4
23748: PPUSH
23749: LD_VAR 0 5
23753: PPUSH
23754: CALL 23796 0 6
23758: GO 23791
23760: LD_INT 304
23762: DOUBLE
23763: EQUAL
23764: IFTRUE 23768
23766: GO 23790
23768: POP
// hHackTeleport ( unit , x , y ) ; end ;
23769: LD_VAR 0 2
23773: PPUSH
23774: LD_VAR 0 4
23778: PPUSH
23779: LD_VAR 0 5
23783: PPUSH
23784: CALL 25567 0 3
23788: GO 23791
23790: POP
// end ;
23791: LD_VAR 0 12
23795: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23796: LD_INT 0
23798: PPUSH
23799: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23800: LD_VAR 0 1
23804: PUSH
23805: LD_INT 1
23807: LESS
23808: IFTRUE 23820
23810: PUSH
23811: LD_VAR 0 1
23815: PUSH
23816: LD_INT 3
23818: GREATER
23819: OR
23820: IFTRUE 23838
23822: PUSH
23823: LD_VAR 0 5
23827: PPUSH
23828: LD_VAR 0 6
23832: PPUSH
23833: CALL_OW 428
23837: OR
23838: IFFALSE 23842
// exit ;
23840: GO 24570
// uc_side := your_side ;
23842: LD_ADDR_OWVAR 20
23846: PUSH
23847: LD_OWVAR 2
23851: ST_TO_ADDR
// uc_nation := nation ;
23852: LD_ADDR_OWVAR 21
23856: PUSH
23857: LD_VAR 0 1
23861: ST_TO_ADDR
// bc_level = 1 ;
23862: LD_ADDR_OWVAR 43
23866: PUSH
23867: LD_INT 1
23869: ST_TO_ADDR
// case btype of 1 :
23870: LD_VAR 0 2
23874: PUSH
23875: LD_INT 1
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23883
23881: GO 23894
23883: POP
// bc_type := b_depot ; 2 :
23884: LD_ADDR_OWVAR 42
23888: PUSH
23889: LD_INT 0
23891: ST_TO_ADDR
23892: GO 24514
23894: LD_INT 2
23896: DOUBLE
23897: EQUAL
23898: IFTRUE 23902
23900: GO 23913
23902: POP
// bc_type := b_warehouse ; 3 :
23903: LD_ADDR_OWVAR 42
23907: PUSH
23908: LD_INT 1
23910: ST_TO_ADDR
23911: GO 24514
23913: LD_INT 3
23915: DOUBLE
23916: EQUAL
23917: IFTRUE 23921
23919: GO 23932
23921: POP
// bc_type := b_lab ; 4 .. 9 :
23922: LD_ADDR_OWVAR 42
23926: PUSH
23927: LD_INT 6
23929: ST_TO_ADDR
23930: GO 24514
23932: LD_INT 4
23934: DOUBLE
23935: GREATEREQUAL
23936: IFFALSE 23944
23938: LD_INT 9
23940: DOUBLE
23941: LESSEQUAL
23942: IFTRUE 23946
23944: GO 24006
23946: POP
// begin bc_type := b_lab_half ;
23947: LD_ADDR_OWVAR 42
23951: PUSH
23952: LD_INT 7
23954: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23955: LD_ADDR_OWVAR 44
23959: PUSH
23960: LD_INT 10
23962: PUSH
23963: LD_INT 11
23965: PUSH
23966: LD_INT 12
23968: PUSH
23969: LD_INT 15
23971: PUSH
23972: LD_INT 14
23974: PUSH
23975: LD_INT 13
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: PUSH
23986: LD_VAR 0 2
23990: PUSH
23991: LD_INT 3
23993: MINUS
23994: ARRAY
23995: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23996: LD_ADDR_OWVAR 45
24000: PUSH
24001: LD_INT 9
24003: ST_TO_ADDR
// end ; 10 .. 13 :
24004: GO 24514
24006: LD_INT 10
24008: DOUBLE
24009: GREATEREQUAL
24010: IFFALSE 24018
24012: LD_INT 13
24014: DOUBLE
24015: LESSEQUAL
24016: IFTRUE 24020
24018: GO 24097
24020: POP
// begin bc_type := b_lab_full ;
24021: LD_ADDR_OWVAR 42
24025: PUSH
24026: LD_INT 8
24028: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24029: LD_ADDR_OWVAR 44
24033: PUSH
24034: LD_INT 10
24036: PUSH
24037: LD_INT 12
24039: PUSH
24040: LD_INT 14
24042: PUSH
24043: LD_INT 13
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: LD_VAR 0 2
24056: PUSH
24057: LD_INT 9
24059: MINUS
24060: ARRAY
24061: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24062: LD_ADDR_OWVAR 45
24066: PUSH
24067: LD_INT 11
24069: PUSH
24070: LD_INT 15
24072: PUSH
24073: LD_INT 12
24075: PUSH
24076: LD_INT 15
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: PUSH
24085: LD_VAR 0 2
24089: PUSH
24090: LD_INT 9
24092: MINUS
24093: ARRAY
24094: ST_TO_ADDR
// end ; 14 :
24095: GO 24514
24097: LD_INT 14
24099: DOUBLE
24100: EQUAL
24101: IFTRUE 24105
24103: GO 24116
24105: POP
// bc_type := b_workshop ; 15 :
24106: LD_ADDR_OWVAR 42
24110: PUSH
24111: LD_INT 2
24113: ST_TO_ADDR
24114: GO 24514
24116: LD_INT 15
24118: DOUBLE
24119: EQUAL
24120: IFTRUE 24124
24122: GO 24135
24124: POP
// bc_type := b_factory ; 16 :
24125: LD_ADDR_OWVAR 42
24129: PUSH
24130: LD_INT 3
24132: ST_TO_ADDR
24133: GO 24514
24135: LD_INT 16
24137: DOUBLE
24138: EQUAL
24139: IFTRUE 24143
24141: GO 24154
24143: POP
// bc_type := b_ext_gun ; 17 :
24144: LD_ADDR_OWVAR 42
24148: PUSH
24149: LD_INT 17
24151: ST_TO_ADDR
24152: GO 24514
24154: LD_INT 17
24156: DOUBLE
24157: EQUAL
24158: IFTRUE 24162
24160: GO 24190
24162: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24163: LD_ADDR_OWVAR 42
24167: PUSH
24168: LD_INT 19
24170: PUSH
24171: LD_INT 23
24173: PUSH
24174: LD_INT 19
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: LD_VAR 0 1
24186: ARRAY
24187: ST_TO_ADDR
24188: GO 24514
24190: LD_INT 18
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24209
24198: POP
// bc_type := b_ext_radar ; 19 :
24199: LD_ADDR_OWVAR 42
24203: PUSH
24204: LD_INT 20
24206: ST_TO_ADDR
24207: GO 24514
24209: LD_INT 19
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24228
24217: POP
// bc_type := b_ext_radio ; 20 :
24218: LD_ADDR_OWVAR 42
24222: PUSH
24223: LD_INT 22
24225: ST_TO_ADDR
24226: GO 24514
24228: LD_INT 20
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24247
24236: POP
// bc_type := b_ext_siberium ; 21 :
24237: LD_ADDR_OWVAR 42
24241: PUSH
24242: LD_INT 21
24244: ST_TO_ADDR
24245: GO 24514
24247: LD_INT 21
24249: DOUBLE
24250: EQUAL
24251: IFTRUE 24255
24253: GO 24266
24255: POP
// bc_type := b_ext_computer ; 22 :
24256: LD_ADDR_OWVAR 42
24260: PUSH
24261: LD_INT 24
24263: ST_TO_ADDR
24264: GO 24514
24266: LD_INT 22
24268: DOUBLE
24269: EQUAL
24270: IFTRUE 24274
24272: GO 24285
24274: POP
// bc_type := b_ext_track ; 23 :
24275: LD_ADDR_OWVAR 42
24279: PUSH
24280: LD_INT 16
24282: ST_TO_ADDR
24283: GO 24514
24285: LD_INT 23
24287: DOUBLE
24288: EQUAL
24289: IFTRUE 24293
24291: GO 24304
24293: POP
// bc_type := b_ext_laser ; 24 :
24294: LD_ADDR_OWVAR 42
24298: PUSH
24299: LD_INT 25
24301: ST_TO_ADDR
24302: GO 24514
24304: LD_INT 24
24306: DOUBLE
24307: EQUAL
24308: IFTRUE 24312
24310: GO 24323
24312: POP
// bc_type := b_control_tower ; 25 :
24313: LD_ADDR_OWVAR 42
24317: PUSH
24318: LD_INT 36
24320: ST_TO_ADDR
24321: GO 24514
24323: LD_INT 25
24325: DOUBLE
24326: EQUAL
24327: IFTRUE 24331
24329: GO 24342
24331: POP
// bc_type := b_breastwork ; 26 :
24332: LD_ADDR_OWVAR 42
24336: PUSH
24337: LD_INT 31
24339: ST_TO_ADDR
24340: GO 24514
24342: LD_INT 26
24344: DOUBLE
24345: EQUAL
24346: IFTRUE 24350
24348: GO 24361
24350: POP
// bc_type := b_bunker ; 27 :
24351: LD_ADDR_OWVAR 42
24355: PUSH
24356: LD_INT 32
24358: ST_TO_ADDR
24359: GO 24514
24361: LD_INT 27
24363: DOUBLE
24364: EQUAL
24365: IFTRUE 24369
24367: GO 24380
24369: POP
// bc_type := b_turret ; 28 :
24370: LD_ADDR_OWVAR 42
24374: PUSH
24375: LD_INT 33
24377: ST_TO_ADDR
24378: GO 24514
24380: LD_INT 28
24382: DOUBLE
24383: EQUAL
24384: IFTRUE 24388
24386: GO 24399
24388: POP
// bc_type := b_armoury ; 29 :
24389: LD_ADDR_OWVAR 42
24393: PUSH
24394: LD_INT 4
24396: ST_TO_ADDR
24397: GO 24514
24399: LD_INT 29
24401: DOUBLE
24402: EQUAL
24403: IFTRUE 24407
24405: GO 24418
24407: POP
// bc_type := b_barracks ; 30 :
24408: LD_ADDR_OWVAR 42
24412: PUSH
24413: LD_INT 5
24415: ST_TO_ADDR
24416: GO 24514
24418: LD_INT 30
24420: DOUBLE
24421: EQUAL
24422: IFTRUE 24426
24424: GO 24437
24426: POP
// bc_type := b_solar_power ; 31 :
24427: LD_ADDR_OWVAR 42
24431: PUSH
24432: LD_INT 27
24434: ST_TO_ADDR
24435: GO 24514
24437: LD_INT 31
24439: DOUBLE
24440: EQUAL
24441: IFTRUE 24445
24443: GO 24456
24445: POP
// bc_type := b_oil_power ; 32 :
24446: LD_ADDR_OWVAR 42
24450: PUSH
24451: LD_INT 26
24453: ST_TO_ADDR
24454: GO 24514
24456: LD_INT 32
24458: DOUBLE
24459: EQUAL
24460: IFTRUE 24464
24462: GO 24475
24464: POP
// bc_type := b_siberite_power ; 33 :
24465: LD_ADDR_OWVAR 42
24469: PUSH
24470: LD_INT 28
24472: ST_TO_ADDR
24473: GO 24514
24475: LD_INT 33
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24494
24483: POP
// bc_type := b_oil_mine ; 34 :
24484: LD_ADDR_OWVAR 42
24488: PUSH
24489: LD_INT 29
24491: ST_TO_ADDR
24492: GO 24514
24494: LD_INT 34
24496: DOUBLE
24497: EQUAL
24498: IFTRUE 24502
24500: GO 24513
24502: POP
// bc_type := b_siberite_mine ; end ;
24503: LD_ADDR_OWVAR 42
24507: PUSH
24508: LD_INT 30
24510: ST_TO_ADDR
24511: GO 24514
24513: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24514: LD_ADDR_VAR 0 8
24518: PUSH
24519: LD_VAR 0 5
24523: PPUSH
24524: LD_VAR 0 6
24528: PPUSH
24529: LD_VAR 0 3
24533: PPUSH
24534: CALL_OW 47
24538: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24539: LD_OWVAR 42
24543: PUSH
24544: LD_INT 32
24546: PUSH
24547: LD_INT 33
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: IN
24554: IFFALSE 24570
// PlaceWeaponTurret ( b , weapon ) ;
24556: LD_VAR 0 8
24560: PPUSH
24561: LD_VAR 0 4
24565: PPUSH
24566: CALL_OW 431
// end ;
24570: LD_VAR 0 7
24574: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24575: LD_INT 0
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24581: LD_ADDR_VAR 0 4
24585: PUSH
24586: LD_INT 22
24588: PUSH
24589: LD_OWVAR 2
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 30
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 30
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PPUSH
24630: CALL_OW 69
24634: ST_TO_ADDR
// if not tmp then
24635: LD_VAR 0 4
24639: NOT
24640: IFFALSE 24644
// exit ;
24642: GO 24703
// for i in tmp do
24644: LD_ADDR_VAR 0 2
24648: PUSH
24649: LD_VAR 0 4
24653: PUSH
24654: FOR_IN
24655: IFFALSE 24701
// for j = 1 to 3 do
24657: LD_ADDR_VAR 0 3
24661: PUSH
24662: DOUBLE
24663: LD_INT 1
24665: DEC
24666: ST_TO_ADDR
24667: LD_INT 3
24669: PUSH
24670: FOR_TO
24671: IFFALSE 24697
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24673: LD_VAR 0 2
24677: PPUSH
24678: CALL_OW 274
24682: PPUSH
24683: LD_VAR 0 3
24687: PPUSH
24688: LD_INT 99999
24690: PPUSH
24691: CALL_OW 277
24695: GO 24670
24697: POP
24698: POP
24699: GO 24654
24701: POP
24702: POP
// end ;
24703: LD_VAR 0 1
24707: RET
// export function hHackSetLevel10 ; var i , j ; begin
24708: LD_INT 0
24710: PPUSH
24711: PPUSH
24712: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24713: LD_ADDR_VAR 0 2
24717: PUSH
24718: LD_INT 21
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PPUSH
24728: CALL_OW 69
24732: PUSH
24733: FOR_IN
24734: IFFALSE 24786
// if IsSelected ( i ) then
24736: LD_VAR 0 2
24740: PPUSH
24741: CALL_OW 306
24745: IFFALSE 24784
// begin for j := 1 to 4 do
24747: LD_ADDR_VAR 0 3
24751: PUSH
24752: DOUBLE
24753: LD_INT 1
24755: DEC
24756: ST_TO_ADDR
24757: LD_INT 4
24759: PUSH
24760: FOR_TO
24761: IFFALSE 24782
// SetSkill ( i , j , 10 ) ;
24763: LD_VAR 0 2
24767: PPUSH
24768: LD_VAR 0 3
24772: PPUSH
24773: LD_INT 10
24775: PPUSH
24776: CALL_OW 237
24780: GO 24760
24782: POP
24783: POP
// end ;
24784: GO 24733
24786: POP
24787: POP
// end ;
24788: LD_VAR 0 1
24792: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24793: LD_INT 0
24795: PPUSH
24796: PPUSH
24797: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24798: LD_ADDR_VAR 0 2
24802: PUSH
24803: LD_INT 22
24805: PUSH
24806: LD_OWVAR 2
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 21
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PPUSH
24829: CALL_OW 69
24833: PUSH
24834: FOR_IN
24835: IFFALSE 24876
// begin for j := 1 to 4 do
24837: LD_ADDR_VAR 0 3
24841: PUSH
24842: DOUBLE
24843: LD_INT 1
24845: DEC
24846: ST_TO_ADDR
24847: LD_INT 4
24849: PUSH
24850: FOR_TO
24851: IFFALSE 24872
// SetSkill ( i , j , 10 ) ;
24853: LD_VAR 0 2
24857: PPUSH
24858: LD_VAR 0 3
24862: PPUSH
24863: LD_INT 10
24865: PPUSH
24866: CALL_OW 237
24870: GO 24850
24872: POP
24873: POP
// end ;
24874: GO 24834
24876: POP
24877: POP
// end ;
24878: LD_VAR 0 1
24882: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24883: LD_INT 0
24885: PPUSH
// uc_side := your_side ;
24886: LD_ADDR_OWVAR 20
24890: PUSH
24891: LD_OWVAR 2
24895: ST_TO_ADDR
// uc_nation := nation ;
24896: LD_ADDR_OWVAR 21
24900: PUSH
24901: LD_VAR 0 1
24905: ST_TO_ADDR
// InitHc ;
24906: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24910: LD_INT 0
24912: PPUSH
24913: LD_VAR 0 2
24917: PPUSH
24918: LD_VAR 0 3
24922: PPUSH
24923: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24927: LD_VAR 0 4
24931: PPUSH
24932: LD_VAR 0 5
24936: PPUSH
24937: CALL_OW 428
24941: PUSH
24942: LD_INT 0
24944: EQUAL
24945: IFFALSE 24969
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24947: CALL_OW 44
24951: PPUSH
24952: LD_VAR 0 4
24956: PPUSH
24957: LD_VAR 0 5
24961: PPUSH
24962: LD_INT 1
24964: PPUSH
24965: CALL_OW 48
// end ;
24969: LD_VAR 0 6
24973: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24974: LD_INT 0
24976: PPUSH
24977: PPUSH
// uc_side := your_side ;
24978: LD_ADDR_OWVAR 20
24982: PUSH
24983: LD_OWVAR 2
24987: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24988: LD_VAR 0 1
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 2
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: LD_INT 4
25004: PUSH
25005: LD_INT 5
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: IN
25015: IFFALSE 25027
// uc_nation := nation_american else
25017: LD_ADDR_OWVAR 21
25021: PUSH
25022: LD_INT 1
25024: ST_TO_ADDR
25025: GO 25070
// if chassis in [ 11 , 12 , 13 , 14 ] then
25027: LD_VAR 0 1
25031: PUSH
25032: LD_INT 11
25034: PUSH
25035: LD_INT 12
25037: PUSH
25038: LD_INT 13
25040: PUSH
25041: LD_INT 14
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: IN
25050: IFFALSE 25062
// uc_nation := nation_arabian else
25052: LD_ADDR_OWVAR 21
25056: PUSH
25057: LD_INT 2
25059: ST_TO_ADDR
25060: GO 25070
// uc_nation := nation_russian ;
25062: LD_ADDR_OWVAR 21
25066: PUSH
25067: LD_INT 3
25069: ST_TO_ADDR
// vc_chassis := chassis ;
25070: LD_ADDR_OWVAR 37
25074: PUSH
25075: LD_VAR 0 1
25079: ST_TO_ADDR
// vc_engine := engine ;
25080: LD_ADDR_OWVAR 39
25084: PUSH
25085: LD_VAR 0 2
25089: ST_TO_ADDR
// vc_control := control ;
25090: LD_ADDR_OWVAR 38
25094: PUSH
25095: LD_VAR 0 3
25099: ST_TO_ADDR
// vc_weapon := weapon ;
25100: LD_ADDR_OWVAR 40
25104: PUSH
25105: LD_VAR 0 4
25109: ST_TO_ADDR
// un := CreateVehicle ;
25110: LD_ADDR_VAR 0 8
25114: PUSH
25115: CALL_OW 45
25119: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25120: LD_VAR 0 8
25124: PPUSH
25125: LD_INT 0
25127: PPUSH
25128: LD_INT 5
25130: PPUSH
25131: CALL_OW 12
25135: PPUSH
25136: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25140: LD_VAR 0 8
25144: PPUSH
25145: LD_VAR 0 5
25149: PPUSH
25150: LD_VAR 0 6
25154: PPUSH
25155: LD_INT 1
25157: PPUSH
25158: CALL_OW 48
// end ;
25162: LD_VAR 0 7
25166: RET
// export hInvincible ; every 1 do
25167: GO 25169
25169: DISABLE
// hInvincible := [ ] ;
25170: LD_ADDR_EXP 72
25174: PUSH
25175: EMPTY
25176: ST_TO_ADDR
25177: END
// every 10 do var i ;
25178: GO 25180
25180: DISABLE
25181: LD_INT 0
25183: PPUSH
// begin enable ;
25184: ENABLE
// if not hInvincible then
25185: LD_EXP 72
25189: NOT
25190: IFFALSE 25194
// exit ;
25192: GO 25238
// for i in hInvincible do
25194: LD_ADDR_VAR 0 1
25198: PUSH
25199: LD_EXP 72
25203: PUSH
25204: FOR_IN
25205: IFFALSE 25236
// if GetLives ( i ) < 1000 then
25207: LD_VAR 0 1
25211: PPUSH
25212: CALL_OW 256
25216: PUSH
25217: LD_INT 1000
25219: LESS
25220: IFFALSE 25234
// SetLives ( i , 1000 ) ;
25222: LD_VAR 0 1
25226: PPUSH
25227: LD_INT 1000
25229: PPUSH
25230: CALL_OW 234
25234: GO 25204
25236: POP
25237: POP
// end ;
25238: PPOPN 1
25240: END
// export function hHackInvincible ; var i ; begin
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25245: LD_ADDR_VAR 0 2
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: LD_INT 21
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 21
25265: PUSH
25266: LD_INT 2
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: LIST
25277: PPUSH
25278: CALL_OW 69
25282: PUSH
25283: FOR_IN
25284: IFFALSE 25345
// if IsSelected ( i ) then
25286: LD_VAR 0 2
25290: PPUSH
25291: CALL_OW 306
25295: IFFALSE 25343
// begin if i in hInvincible then
25297: LD_VAR 0 2
25301: PUSH
25302: LD_EXP 72
25306: IN
25307: IFFALSE 25327
// hInvincible := hInvincible diff i else
25309: LD_ADDR_EXP 72
25313: PUSH
25314: LD_EXP 72
25318: PUSH
25319: LD_VAR 0 2
25323: DIFF
25324: ST_TO_ADDR
25325: GO 25343
// hInvincible := hInvincible union i ;
25327: LD_ADDR_EXP 72
25331: PUSH
25332: LD_EXP 72
25336: PUSH
25337: LD_VAR 0 2
25341: UNION
25342: ST_TO_ADDR
// end ;
25343: GO 25283
25345: POP
25346: POP
// end ;
25347: LD_VAR 0 1
25351: RET
// export function hHackInvisible ; var i , j ; begin
25352: LD_INT 0
25354: PPUSH
25355: PPUSH
25356: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25357: LD_ADDR_VAR 0 2
25361: PUSH
25362: LD_INT 21
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PPUSH
25372: CALL_OW 69
25376: PUSH
25377: FOR_IN
25378: IFFALSE 25402
// if IsSelected ( i ) then
25380: LD_VAR 0 2
25384: PPUSH
25385: CALL_OW 306
25389: IFFALSE 25400
// ComForceInvisible ( i ) ;
25391: LD_VAR 0 2
25395: PPUSH
25396: CALL_OW 496
25400: GO 25377
25402: POP
25403: POP
// end ;
25404: LD_VAR 0 1
25408: RET
// export function hHackChangeYourSide ; begin
25409: LD_INT 0
25411: PPUSH
// if your_side = 8 then
25412: LD_OWVAR 2
25416: PUSH
25417: LD_INT 8
25419: EQUAL
25420: IFFALSE 25432
// your_side := 0 else
25422: LD_ADDR_OWVAR 2
25426: PUSH
25427: LD_INT 0
25429: ST_TO_ADDR
25430: GO 25446
// your_side := your_side + 1 ;
25432: LD_ADDR_OWVAR 2
25436: PUSH
25437: LD_OWVAR 2
25441: PUSH
25442: LD_INT 1
25444: PLUS
25445: ST_TO_ADDR
// end ;
25446: LD_VAR 0 1
25450: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25451: LD_INT 0
25453: PPUSH
25454: PPUSH
25455: PPUSH
// for i in all_units do
25456: LD_ADDR_VAR 0 2
25460: PUSH
25461: LD_OWVAR 3
25465: PUSH
25466: FOR_IN
25467: IFFALSE 25545
// if IsSelected ( i ) then
25469: LD_VAR 0 2
25473: PPUSH
25474: CALL_OW 306
25478: IFFALSE 25543
// begin j := GetSide ( i ) ;
25480: LD_ADDR_VAR 0 3
25484: PUSH
25485: LD_VAR 0 2
25489: PPUSH
25490: CALL_OW 255
25494: ST_TO_ADDR
// if j = 8 then
25495: LD_VAR 0 3
25499: PUSH
25500: LD_INT 8
25502: EQUAL
25503: IFFALSE 25515
// j := 0 else
25505: LD_ADDR_VAR 0 3
25509: PUSH
25510: LD_INT 0
25512: ST_TO_ADDR
25513: GO 25529
// j := j + 1 ;
25515: LD_ADDR_VAR 0 3
25519: PUSH
25520: LD_VAR 0 3
25524: PUSH
25525: LD_INT 1
25527: PLUS
25528: ST_TO_ADDR
// SetSide ( i , j ) ;
25529: LD_VAR 0 2
25533: PPUSH
25534: LD_VAR 0 3
25538: PPUSH
25539: CALL_OW 235
// end ;
25543: GO 25466
25545: POP
25546: POP
// end ;
25547: LD_VAR 0 1
25551: RET
// export function hHackFog ; begin
25552: LD_INT 0
25554: PPUSH
// FogOff ( true ) ;
25555: LD_INT 1
25557: PPUSH
25558: CALL_OW 344
// end ;
25562: LD_VAR 0 1
25566: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25567: LD_INT 0
25569: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25570: LD_VAR 0 1
25574: PPUSH
25575: LD_VAR 0 2
25579: PPUSH
25580: LD_VAR 0 3
25584: PPUSH
25585: LD_INT 1
25587: PPUSH
25588: LD_INT 1
25590: PPUSH
25591: CALL_OW 483
// CenterOnXY ( x , y ) ;
25595: LD_VAR 0 2
25599: PPUSH
25600: LD_VAR 0 3
25604: PPUSH
25605: CALL_OW 84
// end ;
25609: LD_VAR 0 4
25613: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25614: LD_INT 0
25616: PPUSH
25617: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25618: LD_VAR 0 1
25622: NOT
25623: IFTRUE 25642
25625: PUSH
25626: LD_VAR 0 2
25630: PPUSH
25631: LD_VAR 0 3
25635: PPUSH
25636: CALL_OW 488
25640: NOT
25641: OR
25642: IFTRUE 25677
25644: PUSH
25645: LD_VAR 0 1
25649: PPUSH
25650: CALL_OW 266
25654: PUSH
25655: LD_INT 3
25657: NONEQUAL
25658: IFFALSE 25676
25660: PUSH
25661: LD_VAR 0 1
25665: PPUSH
25666: CALL_OW 247
25670: PUSH
25671: LD_INT 1
25673: EQUAL
25674: NOT
25675: AND
25676: OR
25677: IFFALSE 25681
// exit ;
25679: GO 25963
// if GetType ( factory ) = unit_human then
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL_OW 247
25690: PUSH
25691: LD_INT 1
25693: EQUAL
25694: IFFALSE 25711
// factory := IsInUnit ( factory ) ;
25696: LD_ADDR_VAR 0 1
25700: PUSH
25701: LD_VAR 0 1
25705: PPUSH
25706: CALL_OW 310
25710: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25711: LD_VAR 0 1
25715: PPUSH
25716: CALL_OW 266
25720: PUSH
25721: LD_INT 3
25723: NONEQUAL
25724: IFFALSE 25728
// exit ;
25726: GO 25963
// for i := 1 to Count ( factoryWaypoints ) do
25728: LD_ADDR_VAR 0 5
25732: PUSH
25733: DOUBLE
25734: LD_INT 1
25736: DEC
25737: ST_TO_ADDR
25738: LD_EXP 73
25742: PPUSH
25743: CALL 35767 0 1
25747: PUSH
25748: FOR_TO
25749: IFFALSE 25911
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
25751: LD_VAR 0 2
25755: PPUSH
25756: LD_VAR 0 3
25760: PPUSH
25761: CALL_OW 428
25765: PUSH
25766: LD_EXP 73
25770: PUSH
25771: LD_VAR 0 5
25775: ARRAY
25776: PUSH
25777: LD_INT 2
25779: ARRAY
25780: EQUAL
25781: IFFALSE 25813
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25783: LD_ADDR_EXP 73
25787: PUSH
25788: LD_EXP 73
25792: PPUSH
25793: LD_VAR 0 5
25797: PPUSH
25798: CALL_OW 3
25802: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25803: CALL 25968 0 0
// exit ;
25807: POP
25808: POP
25809: GO 25963
// end else
25811: GO 25909
// if factory = factoryWaypoints [ i ] [ 2 ] then
25813: LD_VAR 0 1
25817: PUSH
25818: LD_EXP 73
25822: PUSH
25823: LD_VAR 0 5
25827: ARRAY
25828: PUSH
25829: LD_INT 2
25831: ARRAY
25832: EQUAL
25833: IFFALSE 25909
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25835: LD_ADDR_EXP 73
25839: PUSH
25840: LD_EXP 73
25844: PPUSH
25845: LD_VAR 0 5
25849: PPUSH
25850: CALL_OW 3
25854: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25855: LD_ADDR_EXP 73
25859: PUSH
25860: LD_EXP 73
25864: PPUSH
25865: LD_VAR 0 1
25869: PPUSH
25870: CALL_OW 255
25874: PUSH
25875: LD_VAR 0 1
25879: PUSH
25880: LD_VAR 0 2
25884: PUSH
25885: LD_VAR 0 3
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: PPUSH
25896: CALL 71743 0 2
25900: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25901: CALL 25968 0 0
// exit ;
25905: POP
25906: POP
25907: GO 25963
// end ; end ;
25909: GO 25748
25911: POP
25912: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25913: LD_ADDR_EXP 73
25917: PUSH
25918: LD_EXP 73
25922: PPUSH
25923: LD_VAR 0 1
25927: PPUSH
25928: CALL_OW 255
25932: PUSH
25933: LD_VAR 0 1
25937: PUSH
25938: LD_VAR 0 2
25942: PUSH
25943: LD_VAR 0 3
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: PPUSH
25954: CALL 71743 0 2
25958: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25959: CALL 25968 0 0
// end ;
25963: LD_VAR 0 4
25967: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25968: LD_INT 0
25970: PPUSH
25971: PPUSH
25972: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25973: LD_STRING resetFactoryWaypoint();
25975: PPUSH
25976: CALL_OW 559
// if factoryWaypoints then
25980: LD_EXP 73
25984: IFFALSE 26105
// begin list := factoryWaypoints ;
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_EXP 73
25995: ST_TO_ADDR
// for i := 1 to list do
25996: LD_ADDR_VAR 0 2
26000: PUSH
26001: DOUBLE
26002: LD_INT 1
26004: DEC
26005: ST_TO_ADDR
26006: LD_VAR 0 3
26010: PUSH
26011: FOR_TO
26012: IFFALSE 26103
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26014: LD_STRING setFactoryWaypointXY(
26016: PUSH
26017: LD_VAR 0 3
26021: PUSH
26022: LD_VAR 0 2
26026: ARRAY
26027: PUSH
26028: LD_INT 1
26030: ARRAY
26031: STR
26032: PUSH
26033: LD_STRING ,
26035: STR
26036: PUSH
26037: LD_VAR 0 3
26041: PUSH
26042: LD_VAR 0 2
26046: ARRAY
26047: PUSH
26048: LD_INT 2
26050: ARRAY
26051: STR
26052: PUSH
26053: LD_STRING ,
26055: STR
26056: PUSH
26057: LD_VAR 0 3
26061: PUSH
26062: LD_VAR 0 2
26066: ARRAY
26067: PUSH
26068: LD_INT 3
26070: ARRAY
26071: STR
26072: PUSH
26073: LD_STRING ,
26075: STR
26076: PUSH
26077: LD_VAR 0 3
26081: PUSH
26082: LD_VAR 0 2
26086: ARRAY
26087: PUSH
26088: LD_INT 4
26090: ARRAY
26091: STR
26092: PUSH
26093: LD_STRING )
26095: STR
26096: PPUSH
26097: CALL_OW 559
26101: GO 26011
26103: POP
26104: POP
// end ; end ;
26105: LD_VAR 0 1
26109: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26110: LD_INT 0
26112: PPUSH
// if HexInfo ( x , y ) = warehouse then
26113: LD_VAR 0 2
26117: PPUSH
26118: LD_VAR 0 3
26122: PPUSH
26123: CALL_OW 428
26127: PUSH
26128: LD_VAR 0 1
26132: EQUAL
26133: IFFALSE 26160
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26135: LD_ADDR_EXP 75
26139: PUSH
26140: LD_EXP 75
26144: PPUSH
26145: LD_VAR 0 1
26149: PPUSH
26150: LD_INT 0
26152: PPUSH
26153: CALL_OW 1
26157: ST_TO_ADDR
26158: GO 26211
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26160: LD_ADDR_EXP 75
26164: PUSH
26165: LD_EXP 75
26169: PPUSH
26170: LD_VAR 0 1
26174: PPUSH
26175: LD_VAR 0 1
26179: PPUSH
26180: CALL_OW 255
26184: PUSH
26185: LD_VAR 0 1
26189: PUSH
26190: LD_VAR 0 2
26194: PUSH
26195: LD_VAR 0 3
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: PPUSH
26206: CALL_OW 1
26210: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26211: CALL 26220 0 0
// end ;
26215: LD_VAR 0 4
26219: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26220: LD_INT 0
26222: PPUSH
26223: PPUSH
26224: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26225: LD_STRING resetWarehouseGatheringPoints();
26227: PPUSH
26228: CALL_OW 559
// if warehouseGatheringPoints then
26232: LD_EXP 75
26236: IFFALSE 26362
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26238: LD_ADDR_VAR 0 3
26242: PUSH
26243: LD_EXP 75
26247: PPUSH
26248: CALL 75677 0 1
26252: ST_TO_ADDR
// for i := 1 to list do
26253: LD_ADDR_VAR 0 2
26257: PUSH
26258: DOUBLE
26259: LD_INT 1
26261: DEC
26262: ST_TO_ADDR
26263: LD_VAR 0 3
26267: PUSH
26268: FOR_TO
26269: IFFALSE 26360
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26271: LD_STRING setWarehouseGatheringPointXY(
26273: PUSH
26274: LD_VAR 0 3
26278: PUSH
26279: LD_VAR 0 2
26283: ARRAY
26284: PUSH
26285: LD_INT 1
26287: ARRAY
26288: STR
26289: PUSH
26290: LD_STRING ,
26292: STR
26293: PUSH
26294: LD_VAR 0 3
26298: PUSH
26299: LD_VAR 0 2
26303: ARRAY
26304: PUSH
26305: LD_INT 2
26307: ARRAY
26308: STR
26309: PUSH
26310: LD_STRING ,
26312: STR
26313: PUSH
26314: LD_VAR 0 3
26318: PUSH
26319: LD_VAR 0 2
26323: ARRAY
26324: PUSH
26325: LD_INT 3
26327: ARRAY
26328: STR
26329: PUSH
26330: LD_STRING ,
26332: STR
26333: PUSH
26334: LD_VAR 0 3
26338: PUSH
26339: LD_VAR 0 2
26343: ARRAY
26344: PUSH
26345: LD_INT 4
26347: ARRAY
26348: STR
26349: PUSH
26350: LD_STRING )
26352: STR
26353: PPUSH
26354: CALL_OW 559
26358: GO 26268
26360: POP
26361: POP
// end ; end ;
26362: LD_VAR 0 1
26366: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26367: LD_EXP 75
26371: IFFALSE 27066
26373: GO 26375
26375: DISABLE
26376: LD_INT 0
26378: PPUSH
26379: PPUSH
26380: PPUSH
26381: PPUSH
26382: PPUSH
26383: PPUSH
26384: PPUSH
26385: PPUSH
26386: PPUSH
// begin enable ;
26387: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26388: LD_ADDR_VAR 0 3
26392: PUSH
26393: LD_EXP 75
26397: PPUSH
26398: CALL 75677 0 1
26402: ST_TO_ADDR
// if not list then
26403: LD_VAR 0 3
26407: NOT
26408: IFFALSE 26412
// exit ;
26410: GO 27066
// for i := 1 to list do
26412: LD_ADDR_VAR 0 1
26416: PUSH
26417: DOUBLE
26418: LD_INT 1
26420: DEC
26421: ST_TO_ADDR
26422: LD_VAR 0 3
26426: PUSH
26427: FOR_TO
26428: IFFALSE 27064
// begin depot := list [ i ] [ 2 ] ;
26430: LD_ADDR_VAR 0 8
26434: PUSH
26435: LD_VAR 0 3
26439: PUSH
26440: LD_VAR 0 1
26444: ARRAY
26445: PUSH
26446: LD_INT 2
26448: ARRAY
26449: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26450: LD_ADDR_VAR 0 5
26454: PUSH
26455: LD_VAR 0 3
26459: PUSH
26460: LD_VAR 0 1
26464: ARRAY
26465: PUSH
26466: LD_INT 1
26468: ARRAY
26469: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26470: LD_VAR 0 8
26474: PPUSH
26475: CALL_OW 301
26479: IFTRUE 26498
26481: PUSH
26482: LD_VAR 0 5
26486: PUSH
26487: LD_VAR 0 8
26491: PPUSH
26492: CALL_OW 255
26496: NONEQUAL
26497: OR
26498: IFFALSE 26527
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26500: LD_ADDR_EXP 75
26504: PUSH
26505: LD_EXP 75
26509: PPUSH
26510: LD_VAR 0 8
26514: PPUSH
26515: LD_INT 0
26517: PPUSH
26518: CALL_OW 1
26522: ST_TO_ADDR
// exit ;
26523: POP
26524: POP
26525: GO 27066
// end ; x := list [ i ] [ 3 ] ;
26527: LD_ADDR_VAR 0 6
26531: PUSH
26532: LD_VAR 0 3
26536: PUSH
26537: LD_VAR 0 1
26541: ARRAY
26542: PUSH
26543: LD_INT 3
26545: ARRAY
26546: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26547: LD_ADDR_VAR 0 7
26551: PUSH
26552: LD_VAR 0 3
26556: PUSH
26557: LD_VAR 0 1
26561: ARRAY
26562: PUSH
26563: LD_INT 4
26565: ARRAY
26566: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26567: LD_ADDR_VAR 0 9
26571: PUSH
26572: LD_VAR 0 6
26576: PPUSH
26577: LD_VAR 0 7
26581: PPUSH
26582: LD_INT 16
26584: PPUSH
26585: CALL 74251 0 3
26589: ST_TO_ADDR
// if not cratesNearbyPoint then
26590: LD_VAR 0 9
26594: NOT
26595: IFFALSE 26601
// exit ;
26597: POP
26598: POP
26599: GO 27066
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26601: LD_ADDR_VAR 0 4
26605: PUSH
26606: LD_INT 22
26608: PUSH
26609: LD_VAR 0 5
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 3
26620: PUSH
26621: LD_INT 60
26623: PUSH
26624: EMPTY
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 91
26633: PUSH
26634: LD_VAR 0 8
26638: PUSH
26639: LD_INT 6
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: PUSH
26650: LD_INT 25
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 25
26662: PUSH
26663: LD_INT 16
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: LIST
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: PPUSH
26681: CALL_OW 69
26685: PUSH
26686: LD_VAR 0 8
26690: PPUSH
26691: CALL_OW 313
26695: PPUSH
26696: LD_INT 3
26698: PUSH
26699: LD_INT 60
26701: PUSH
26702: EMPTY
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: LD_INT 25
26714: PUSH
26715: LD_INT 2
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 25
26724: PUSH
26725: LD_INT 16
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: LIST
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PPUSH
26741: CALL_OW 72
26745: UNION
26746: ST_TO_ADDR
// if tmp then
26747: LD_VAR 0 4
26751: IFFALSE 26831
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26753: LD_ADDR_VAR 0 4
26757: PUSH
26758: LD_VAR 0 4
26762: PPUSH
26763: LD_INT 3
26765: PPUSH
26766: CALL 72058 0 2
26770: ST_TO_ADDR
// for j in tmp do
26771: LD_ADDR_VAR 0 2
26775: PUSH
26776: LD_VAR 0 4
26780: PUSH
26781: FOR_IN
26782: IFFALSE 26825
// begin if IsInUnit ( j ) then
26784: LD_VAR 0 2
26788: PPUSH
26789: CALL_OW 310
26793: IFFALSE 26804
// ComExit ( j ) ;
26795: LD_VAR 0 2
26799: PPUSH
26800: CALL 72141 0 1
// AddComCollect ( j , x , y ) ;
26804: LD_VAR 0 2
26808: PPUSH
26809: LD_VAR 0 6
26813: PPUSH
26814: LD_VAR 0 7
26818: PPUSH
26819: CALL_OW 177
// end ;
26823: GO 26781
26825: POP
26826: POP
// exit ;
26827: POP
26828: POP
26829: GO 27066
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26831: LD_ADDR_VAR 0 4
26835: PUSH
26836: LD_INT 22
26838: PUSH
26839: LD_VAR 0 5
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 91
26850: PUSH
26851: LD_VAR 0 8
26855: PUSH
26856: LD_INT 8
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: LD_INT 34
26869: PUSH
26870: LD_INT 12
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 34
26879: PUSH
26880: LD_INT 51
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 34
26889: PUSH
26890: LD_INT 32
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 34
26899: PUSH
26900: LD_INT 89
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: PPUSH
26919: CALL_OW 69
26923: ST_TO_ADDR
// if tmp then
26924: LD_VAR 0 4
26928: IFFALSE 27062
// begin for j in tmp do
26930: LD_ADDR_VAR 0 2
26934: PUSH
26935: LD_VAR 0 4
26939: PUSH
26940: FOR_IN
26941: IFFALSE 27060
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26943: LD_VAR 0 2
26947: PPUSH
26948: CALL_OW 262
26952: PUSH
26953: LD_INT 3
26955: EQUAL
26956: IFTRUE 26973
26958: PUSH
26959: LD_VAR 0 2
26963: PPUSH
26964: CALL_OW 261
26968: PUSH
26969: LD_INT 20
26971: GREATER
26972: OR
26973: IFFALSE 26987
26975: PUSH
26976: LD_VAR 0 2
26980: PPUSH
26981: CALL_OW 314
26985: NOT
26986: AND
26987: IFFALSE 27017
26989: PUSH
26990: LD_VAR 0 2
26994: PPUSH
26995: CALL_OW 263
26999: PUSH
27000: LD_INT 1
27002: NONEQUAL
27003: IFTRUE 27016
27005: PUSH
27006: LD_VAR 0 2
27010: PPUSH
27011: CALL_OW 311
27015: OR
27016: AND
27017: IFFALSE 27058
// begin ComCollect ( j , x , y ) ;
27019: LD_VAR 0 2
27023: PPUSH
27024: LD_VAR 0 6
27028: PPUSH
27029: LD_VAR 0 7
27033: PPUSH
27034: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27038: LD_VAR 0 2
27042: PPUSH
27043: LD_VAR 0 8
27047: PPUSH
27048: CALL_OW 172
// exit ;
27052: POP
27053: POP
27054: POP
27055: POP
27056: GO 27066
// end ;
27058: GO 26940
27060: POP
27061: POP
// end ; end ;
27062: GO 26427
27064: POP
27065: POP
// end ; end_of_file
27066: PPOPN 9
27068: END
// export function SOS_UnitDestroyed ( un ) ; begin
27069: LD_INT 0
27071: PPUSH
// ComRadiation ( un ) ;
27072: LD_VAR 0 1
27076: PPUSH
27077: CALL 28239 0 1
// end ;
27081: LD_VAR 0 2
27085: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27086: LD_INT 0
27088: PPUSH
// ComRadiation ( un ) ;
27089: LD_VAR 0 1
27093: PPUSH
27094: CALL 28239 0 1
// end ;
27098: LD_VAR 0 2
27102: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27103: LD_INT 0
27105: PPUSH
// end ;
27106: LD_VAR 0 4
27110: RET
// export function SOS_Command ( cmd ) ; begin
27111: LD_INT 0
27113: PPUSH
// end ;
27114: LD_VAR 0 2
27118: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27119: LD_INT 0
27121: PPUSH
// end ;
27122: LD_VAR 0 6
27126: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
27127: LD_INT 0
27129: PPUSH
27130: PPUSH
27131: PPUSH
27132: PPUSH
27133: PPUSH
// if not vehicle or not factory then
27134: LD_VAR 0 1
27138: NOT
27139: IFTRUE 27148
27141: PUSH
27142: LD_VAR 0 2
27146: NOT
27147: OR
27148: IFFALSE 27152
// exit ;
27150: GO 27814
// weapon := GetWeapon ( vehicle ) ;
27152: LD_ADDR_VAR 0 7
27156: PUSH
27157: LD_VAR 0 1
27161: PPUSH
27162: CALL_OW 264
27166: ST_TO_ADDR
// if weapon = ar_miner then
27167: LD_VAR 0 7
27171: PUSH
27172: LD_INT 81
27174: EQUAL
27175: IFFALSE 27232
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
27177: LD_ADDR_EXP 84
27181: PUSH
27182: LD_EXP 84
27186: PPUSH
27187: LD_EXP 84
27191: PUSH
27192: LD_INT 1
27194: PLUS
27195: PPUSH
27196: LD_VAR 0 1
27200: PPUSH
27201: CALL_OW 1
27205: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27206: LD_ADDR_EXP 85
27210: PUSH
27211: LD_EXP 85
27215: PPUSH
27216: LD_EXP 85
27220: PUSH
27221: LD_INT 1
27223: PLUS
27224: PPUSH
27225: EMPTY
27226: PPUSH
27227: CALL_OW 1
27231: ST_TO_ADDR
// end ; if not factoryWaypoints then
27232: LD_EXP 73
27236: NOT
27237: IFFALSE 27241
// exit ;
27239: GO 27814
// for i := 1 to Count ( factoryWaypoints ) do
27241: LD_ADDR_VAR 0 4
27245: PUSH
27246: DOUBLE
27247: LD_INT 1
27249: DEC
27250: ST_TO_ADDR
27251: LD_EXP 73
27255: PPUSH
27256: CALL 35767 0 1
27260: PUSH
27261: FOR_TO
27262: IFFALSE 27812
// if factoryWaypoints [ i ] [ 2 ] = factory then
27264: LD_EXP 73
27268: PUSH
27269: LD_VAR 0 4
27273: ARRAY
27274: PUSH
27275: LD_INT 2
27277: ARRAY
27278: PUSH
27279: LD_VAR 0 2
27283: EQUAL
27284: IFFALSE 27810
// begin if GetControl ( vehicle ) = control_manual then
27286: LD_VAR 0 1
27290: PPUSH
27291: CALL_OW 263
27295: PUSH
27296: LD_INT 1
27298: EQUAL
27299: IFFALSE 27663
// begin driver := IsDrivenBy ( vehicle ) ;
27301: LD_ADDR_VAR 0 5
27305: PUSH
27306: LD_VAR 0 1
27310: PPUSH
27311: CALL_OW 311
27315: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27316: LD_VAR 0 5
27320: PUSH
27321: LD_EXP 74
27325: IN
27326: IFTRUE 27340
27328: PUSH
27329: LD_VAR 0 1
27333: PUSH
27334: LD_EXP 74
27338: IN
27339: OR
27340: IFFALSE 27346
// exit ;
27342: POP
27343: POP
27344: GO 27814
// if not HasTask ( driver ) then
27346: LD_VAR 0 5
27350: PPUSH
27351: CALL_OW 314
27355: NOT
27356: IFFALSE 27661
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27358: LD_ADDR_EXP 74
27362: PUSH
27363: LD_EXP 74
27367: PPUSH
27368: LD_VAR 0 5
27372: PPUSH
27373: CALL 71743 0 2
27377: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27378: LD_ADDR_EXP 74
27382: PUSH
27383: LD_EXP 74
27387: PPUSH
27388: LD_VAR 0 1
27392: PPUSH
27393: CALL 71743 0 2
27397: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27398: LD_ADDR_VAR 0 6
27402: PUSH
27403: LD_EXP 73
27407: PUSH
27408: LD_VAR 0 4
27412: ARRAY
27413: PUSH
27414: LD_INT 3
27416: ARRAY
27417: PPUSH
27418: LD_EXP 73
27422: PUSH
27423: LD_VAR 0 4
27427: ARRAY
27428: PUSH
27429: LD_INT 4
27431: ARRAY
27432: PPUSH
27433: CALL_OW 428
27437: ST_TO_ADDR
// if hex then
27438: LD_VAR 0 6
27442: IFFALSE 27460
// ComMoveUnit ( driver , hex ) else
27444: LD_VAR 0 5
27448: PPUSH
27449: LD_VAR 0 6
27453: PPUSH
27454: CALL_OW 112
27458: GO 27544
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27460: LD_VAR 0 1
27464: PPUSH
27465: LD_EXP 73
27469: PUSH
27470: LD_VAR 0 4
27474: ARRAY
27475: PUSH
27476: LD_INT 3
27478: ARRAY
27479: PPUSH
27480: LD_EXP 73
27484: PUSH
27485: LD_VAR 0 4
27489: ARRAY
27490: PUSH
27491: LD_INT 4
27493: ARRAY
27494: PPUSH
27495: CALL_OW 297
27499: PUSH
27500: LD_INT 0
27502: GREATER
27503: IFFALSE 27544
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27505: LD_VAR 0 5
27509: PPUSH
27510: LD_EXP 73
27514: PUSH
27515: LD_VAR 0 4
27519: ARRAY
27520: PUSH
27521: LD_INT 3
27523: ARRAY
27524: PPUSH
27525: LD_EXP 73
27529: PUSH
27530: LD_VAR 0 4
27534: ARRAY
27535: PUSH
27536: LD_INT 4
27538: ARRAY
27539: PPUSH
27540: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27544: LD_VAR 0 5
27548: PPUSH
27549: CALL_OW 181
// if Multiplayer then
27553: LD_OWVAR 4
27557: IFFALSE 27606
// begin repeat wait ( 10 ) ;
27559: LD_INT 10
27561: PPUSH
27562: CALL_OW 67
// until not IsInUnit ( driver ) ;
27566: LD_VAR 0 5
27570: PPUSH
27571: CALL_OW 310
27575: NOT
27576: IFFALSE 27559
// if not HasTask ( driver ) then
27578: LD_VAR 0 5
27582: PPUSH
27583: CALL_OW 314
27587: NOT
27588: IFFALSE 27604
// ComEnterUnit ( driver , factory ) ;
27590: LD_VAR 0 5
27594: PPUSH
27595: LD_VAR 0 2
27599: PPUSH
27600: CALL_OW 120
// end else
27604: GO 27620
// AddComEnterUnit ( driver , factory ) ;
27606: LD_VAR 0 5
27610: PPUSH
27611: LD_VAR 0 2
27615: PPUSH
27616: CALL_OW 180
// wait ( 0 0$1 ) ;
27620: LD_INT 35
27622: PPUSH
27623: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27627: LD_ADDR_EXP 74
27631: PUSH
27632: LD_EXP 74
27636: PUSH
27637: LD_VAR 0 5
27641: DIFF
27642: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27643: LD_ADDR_EXP 74
27647: PUSH
27648: LD_EXP 74
27652: PUSH
27653: LD_VAR 0 1
27657: DIFF
27658: ST_TO_ADDR
// break ;
27659: GO 27812
// end ; end else
27661: GO 27810
// if GetControl ( vehicle ) = control_remote then
27663: LD_VAR 0 1
27667: PPUSH
27668: CALL_OW 263
27672: PUSH
27673: LD_INT 2
27675: EQUAL
27676: IFFALSE 27762
// begin wait ( 0 0$2 ) ;
27678: LD_INT 70
27680: PPUSH
27681: CALL_OW 67
// repeat wait ( 10 ) ;
27685: LD_INT 10
27687: PPUSH
27688: CALL_OW 67
// Connect ( vehicle ) ;
27692: LD_VAR 0 1
27696: PPUSH
27697: CALL 42045 0 1
// until IsControledBy ( vehicle ) ;
27701: LD_VAR 0 1
27705: PPUSH
27706: CALL_OW 312
27710: IFFALSE 27685
// wait ( 10 ) ;
27712: LD_INT 10
27714: PPUSH
27715: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27719: LD_VAR 0 1
27723: PPUSH
27724: LD_EXP 73
27728: PUSH
27729: LD_VAR 0 4
27733: ARRAY
27734: PUSH
27735: LD_INT 3
27737: ARRAY
27738: PPUSH
27739: LD_EXP 73
27743: PUSH
27744: LD_VAR 0 4
27748: ARRAY
27749: PUSH
27750: LD_INT 4
27752: ARRAY
27753: PPUSH
27754: CALL_OW 111
// break ;
27758: GO 27812
// end else
27760: GO 27810
// begin wait ( 0 0$3 ) ;
27762: LD_INT 105
27764: PPUSH
27765: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27769: LD_VAR 0 1
27773: PPUSH
27774: LD_EXP 73
27778: PUSH
27779: LD_VAR 0 4
27783: ARRAY
27784: PUSH
27785: LD_INT 3
27787: ARRAY
27788: PPUSH
27789: LD_EXP 73
27793: PUSH
27794: LD_VAR 0 4
27798: ARRAY
27799: PUSH
27800: LD_INT 4
27802: ARRAY
27803: PPUSH
27804: CALL_OW 111
// break ;
27808: GO 27812
// end ; end ;
27810: GO 27261
27812: POP
27813: POP
// end ;
27814: LD_VAR 0 3
27818: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27819: LD_INT 0
27821: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27822: LD_VAR 0 1
27826: PUSH
27827: LD_INT 250
27829: EQUAL
27830: IFFALSE 27847
27832: PUSH
27833: LD_VAR 0 2
27837: PPUSH
27838: CALL_OW 264
27842: PUSH
27843: LD_INT 81
27845: EQUAL
27846: AND
27847: IFFALSE 27868
// MinerPlaceMine ( unit , x , y ) ;
27849: LD_VAR 0 2
27853: PPUSH
27854: LD_VAR 0 4
27858: PPUSH
27859: LD_VAR 0 5
27863: PPUSH
27864: CALL 31214 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27868: LD_VAR 0 1
27872: PUSH
27873: LD_INT 251
27875: EQUAL
27876: IFFALSE 27893
27878: PUSH
27879: LD_VAR 0 2
27883: PPUSH
27884: CALL_OW 264
27888: PUSH
27889: LD_INT 81
27891: EQUAL
27892: AND
27893: IFFALSE 27914
// MinerDetonateMine ( unit , x , y ) ;
27895: LD_VAR 0 2
27899: PPUSH
27900: LD_VAR 0 4
27904: PPUSH
27905: LD_VAR 0 5
27909: PPUSH
27910: CALL 31621 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27914: LD_VAR 0 1
27918: PUSH
27919: LD_INT 252
27921: EQUAL
27922: IFFALSE 27939
27924: PUSH
27925: LD_VAR 0 2
27929: PPUSH
27930: CALL_OW 264
27934: PUSH
27935: LD_INT 81
27937: EQUAL
27938: AND
27939: IFFALSE 27960
// MinerCreateMinefield ( unit , x , y ) ;
27941: LD_VAR 0 2
27945: PPUSH
27946: LD_VAR 0 4
27950: PPUSH
27951: LD_VAR 0 5
27955: PPUSH
27956: CALL 31853 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27960: LD_VAR 0 1
27964: PUSH
27965: LD_INT 253
27967: EQUAL
27968: IFFALSE 27985
27970: PUSH
27971: LD_VAR 0 2
27975: PPUSH
27976: CALL_OW 257
27980: PUSH
27981: LD_INT 5
27983: EQUAL
27984: AND
27985: IFFALSE 28006
// ComBinocular ( unit , x , y ) ;
27987: LD_VAR 0 2
27991: PPUSH
27992: LD_VAR 0 4
27996: PPUSH
27997: LD_VAR 0 5
28001: PPUSH
28002: CALL 32228 0 3
// if selectedUnit then
28006: LD_VAR 0 3
28010: IFFALSE 28070
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28012: LD_VAR 0 1
28016: PUSH
28017: LD_INT 254
28019: EQUAL
28020: IFFALSE 28037
28022: PUSH
28023: LD_VAR 0 2
28027: PPUSH
28028: CALL_OW 264
28032: PUSH
28033: LD_INT 99
28035: EQUAL
28036: AND
28037: IFFALSE 28054
28039: PUSH
28040: LD_VAR 0 3
28044: PPUSH
28045: CALL_OW 263
28049: PUSH
28050: LD_INT 3
28052: EQUAL
28053: AND
28054: IFFALSE 28070
// HackDestroyVehicle ( unit , selectedUnit ) ;
28056: LD_VAR 0 2
28060: PPUSH
28061: LD_VAR 0 3
28065: PPUSH
28066: CALL 30404 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28070: LD_VAR 0 1
28074: PUSH
28075: LD_INT 255
28077: EQUAL
28078: IFFALSE 28102
28080: PUSH
28081: LD_VAR 0 2
28085: PPUSH
28086: CALL_OW 264
28090: PUSH
28091: LD_INT 14
28093: PUSH
28094: LD_INT 53
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: IN
28101: AND
28102: IFFALSE 28120
28104: PUSH
28105: LD_VAR 0 4
28109: PPUSH
28110: LD_VAR 0 5
28114: PPUSH
28115: CALL_OW 488
28119: AND
28120: IFFALSE 28144
// CutTreeXYR ( unit , x , y , 12 ) ;
28122: LD_VAR 0 2
28126: PPUSH
28127: LD_VAR 0 4
28131: PPUSH
28132: LD_VAR 0 5
28136: PPUSH
28137: LD_INT 12
28139: PPUSH
28140: CALL 28335 0 4
// if cmd = 256 then
28144: LD_VAR 0 1
28148: PUSH
28149: LD_INT 256
28151: EQUAL
28152: IFFALSE 28173
// SetFactoryWaypoint ( unit , x , y ) ;
28154: LD_VAR 0 2
28158: PPUSH
28159: LD_VAR 0 4
28163: PPUSH
28164: LD_VAR 0 5
28168: PPUSH
28169: CALL 25614 0 3
// if cmd = 257 then
28173: LD_VAR 0 1
28177: PUSH
28178: LD_INT 257
28180: EQUAL
28181: IFFALSE 28202
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28183: LD_VAR 0 2
28187: PPUSH
28188: LD_VAR 0 4
28192: PPUSH
28193: LD_VAR 0 5
28197: PPUSH
28198: CALL 26110 0 3
// if cmd = 258 then
28202: LD_VAR 0 1
28206: PUSH
28207: LD_INT 258
28209: EQUAL
28210: IFFALSE 28234
// BurnTreeXYR ( unit , x , y , 8 ) ;
28212: LD_VAR 0 2
28216: PPUSH
28217: LD_VAR 0 4
28221: PPUSH
28222: LD_VAR 0 5
28226: PPUSH
28227: LD_INT 8
28229: PPUSH
28230: CALL 28757 0 4
// end ;
28234: LD_VAR 0 6
28238: RET
// export function ComRadiation ( un ) ; var eff ; begin
28239: LD_INT 0
28241: PPUSH
28242: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28243: LD_VAR 0 1
28247: PPUSH
28248: CALL_OW 264
28252: PUSH
28253: LD_INT 91
28255: NONEQUAL
28256: IFFALSE 28260
// exit ;
28258: GO 28330
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28260: LD_INT 68
28262: PPUSH
28263: LD_VAR 0 1
28267: PPUSH
28268: CALL_OW 255
28272: PPUSH
28273: CALL_OW 321
28277: PUSH
28278: LD_INT 2
28280: EQUAL
28281: IFFALSE 28293
// eff := 50 else
28283: LD_ADDR_VAR 0 3
28287: PUSH
28288: LD_INT 50
28290: ST_TO_ADDR
28291: GO 28301
// eff := 25 ;
28293: LD_ADDR_VAR 0 3
28297: PUSH
28298: LD_INT 25
28300: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28301: LD_VAR 0 1
28305: PPUSH
28306: CALL_OW 250
28310: PPUSH
28311: LD_VAR 0 1
28315: PPUSH
28316: CALL_OW 251
28320: PPUSH
28321: LD_VAR 0 3
28325: PPUSH
28326: CALL_OW 495
// end ;
28330: LD_VAR 0 2
28334: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28335: LD_INT 0
28337: PPUSH
28338: PPUSH
28339: PPUSH
28340: PPUSH
28341: PPUSH
28342: PPUSH
28343: PPUSH
28344: PPUSH
28345: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28346: LD_VAR 0 1
28350: PPUSH
28351: CALL_OW 302
28355: NOT
28356: IFTRUE 28375
28358: PUSH
28359: LD_VAR 0 2
28363: PPUSH
28364: LD_VAR 0 3
28368: PPUSH
28369: CALL_OW 488
28373: NOT
28374: OR
28375: IFTRUE 28384
28377: PUSH
28378: LD_VAR 0 4
28382: NOT
28383: OR
28384: IFFALSE 28388
// exit ;
28386: GO 28752
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
28388: LD_VAR 0 1
28392: PPUSH
28393: CALL_OW 437
28397: PPUSH
28398: CALL 35767 0 1
28402: PUSH
28403: LD_INT 10
28405: GREATER
28406: IFFALSE 28410
// exit ;
28408: GO 28752
// list := [ ] ;
28410: LD_ADDR_VAR 0 13
28414: PUSH
28415: EMPTY
28416: ST_TO_ADDR
// if x - r < 0 then
28417: LD_VAR 0 2
28421: PUSH
28422: LD_VAR 0 4
28426: MINUS
28427: PUSH
28428: LD_INT 0
28430: LESS
28431: IFFALSE 28443
// min_x := 0 else
28433: LD_ADDR_VAR 0 7
28437: PUSH
28438: LD_INT 0
28440: ST_TO_ADDR
28441: GO 28459
// min_x := x - r ;
28443: LD_ADDR_VAR 0 7
28447: PUSH
28448: LD_VAR 0 2
28452: PUSH
28453: LD_VAR 0 4
28457: MINUS
28458: ST_TO_ADDR
// if y - r < 0 then
28459: LD_VAR 0 3
28463: PUSH
28464: LD_VAR 0 4
28468: MINUS
28469: PUSH
28470: LD_INT 0
28472: LESS
28473: IFFALSE 28485
// min_y := 0 else
28475: LD_ADDR_VAR 0 8
28479: PUSH
28480: LD_INT 0
28482: ST_TO_ADDR
28483: GO 28501
// min_y := y - r ;
28485: LD_ADDR_VAR 0 8
28489: PUSH
28490: LD_VAR 0 3
28494: PUSH
28495: LD_VAR 0 4
28499: MINUS
28500: ST_TO_ADDR
// max_x := x + r ;
28501: LD_ADDR_VAR 0 9
28505: PUSH
28506: LD_VAR 0 2
28510: PUSH
28511: LD_VAR 0 4
28515: PLUS
28516: ST_TO_ADDR
// max_y := y + r ;
28517: LD_ADDR_VAR 0 10
28521: PUSH
28522: LD_VAR 0 3
28526: PUSH
28527: LD_VAR 0 4
28531: PLUS
28532: ST_TO_ADDR
// for _x = min_x to max_x do
28533: LD_ADDR_VAR 0 11
28537: PUSH
28538: DOUBLE
28539: LD_VAR 0 7
28543: DEC
28544: ST_TO_ADDR
28545: LD_VAR 0 9
28549: PUSH
28550: FOR_TO
28551: IFFALSE 28670
// for _y = min_y to max_y do
28553: LD_ADDR_VAR 0 12
28557: PUSH
28558: DOUBLE
28559: LD_VAR 0 8
28563: DEC
28564: ST_TO_ADDR
28565: LD_VAR 0 10
28569: PUSH
28570: FOR_TO
28571: IFFALSE 28666
// begin if not ValidHex ( _x , _y ) then
28573: LD_VAR 0 11
28577: PPUSH
28578: LD_VAR 0 12
28582: PPUSH
28583: CALL_OW 488
28587: NOT
28588: IFFALSE 28592
// continue ;
28590: GO 28570
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28592: LD_VAR 0 11
28596: PPUSH
28597: LD_VAR 0 12
28601: PPUSH
28602: CALL_OW 351
28606: IFFALSE 28624
28608: PUSH
28609: LD_VAR 0 11
28613: PPUSH
28614: LD_VAR 0 12
28618: PPUSH
28619: CALL_OW 554
28623: AND
28624: IFFALSE 28664
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28626: LD_ADDR_VAR 0 13
28630: PUSH
28631: LD_VAR 0 13
28635: PPUSH
28636: LD_VAR 0 13
28640: PUSH
28641: LD_INT 1
28643: PLUS
28644: PPUSH
28645: LD_VAR 0 11
28649: PUSH
28650: LD_VAR 0 12
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PPUSH
28659: CALL_OW 2
28663: ST_TO_ADDR
// end ;
28664: GO 28570
28666: POP
28667: POP
28668: GO 28550
28670: POP
28671: POP
// if not list then
28672: LD_VAR 0 13
28676: NOT
28677: IFFALSE 28681
// exit ;
28679: GO 28752
// for i in list do
28681: LD_ADDR_VAR 0 6
28685: PUSH
28686: LD_VAR 0 13
28690: PUSH
28691: FOR_IN
28692: IFFALSE 28750
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28694: LD_VAR 0 1
28698: PPUSH
28699: LD_STRING M
28701: PUSH
28702: LD_VAR 0 6
28706: PUSH
28707: LD_INT 1
28709: ARRAY
28710: PUSH
28711: LD_VAR 0 6
28715: PUSH
28716: LD_INT 2
28718: ARRAY
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: PUSH
28741: EMPTY
28742: LIST
28743: PPUSH
28744: CALL_OW 447
28748: GO 28691
28750: POP
28751: POP
// end ;
28752: LD_VAR 0 5
28756: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28757: LD_INT 0
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
28763: PPUSH
28764: PPUSH
28765: PPUSH
28766: PPUSH
28767: PPUSH
28768: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28769: LD_VAR 0 1
28773: PPUSH
28774: CALL_OW 302
28778: NOT
28779: IFTRUE 28798
28781: PUSH
28782: LD_VAR 0 2
28786: PPUSH
28787: LD_VAR 0 3
28791: PPUSH
28792: CALL_OW 488
28796: NOT
28797: OR
28798: IFTRUE 28807
28800: PUSH
28801: LD_VAR 0 4
28805: NOT
28806: OR
28807: IFFALSE 28811
// exit ;
28809: GO 29350
// if Count ( GetTaskList ( flame ) ) > 10 then
28811: LD_VAR 0 1
28815: PPUSH
28816: CALL_OW 437
28820: PPUSH
28821: CALL 35767 0 1
28825: PUSH
28826: LD_INT 10
28828: GREATER
28829: IFFALSE 28833
// exit ;
28831: GO 29350
// list := [ ] ;
28833: LD_ADDR_VAR 0 13
28837: PUSH
28838: EMPTY
28839: ST_TO_ADDR
// if x - r < 0 then
28840: LD_VAR 0 2
28844: PUSH
28845: LD_VAR 0 4
28849: MINUS
28850: PUSH
28851: LD_INT 0
28853: LESS
28854: IFFALSE 28866
// min_x := 0 else
28856: LD_ADDR_VAR 0 7
28860: PUSH
28861: LD_INT 0
28863: ST_TO_ADDR
28864: GO 28882
// min_x := x - r ;
28866: LD_ADDR_VAR 0 7
28870: PUSH
28871: LD_VAR 0 2
28875: PUSH
28876: LD_VAR 0 4
28880: MINUS
28881: ST_TO_ADDR
// if y - r < 0 then
28882: LD_VAR 0 3
28886: PUSH
28887: LD_VAR 0 4
28891: MINUS
28892: PUSH
28893: LD_INT 0
28895: LESS
28896: IFFALSE 28908
// min_y := 0 else
28898: LD_ADDR_VAR 0 8
28902: PUSH
28903: LD_INT 0
28905: ST_TO_ADDR
28906: GO 28924
// min_y := y - r ;
28908: LD_ADDR_VAR 0 8
28912: PUSH
28913: LD_VAR 0 3
28917: PUSH
28918: LD_VAR 0 4
28922: MINUS
28923: ST_TO_ADDR
// max_x := x + r ;
28924: LD_ADDR_VAR 0 9
28928: PUSH
28929: LD_VAR 0 2
28933: PUSH
28934: LD_VAR 0 4
28938: PLUS
28939: ST_TO_ADDR
// max_y := y + r ;
28940: LD_ADDR_VAR 0 10
28944: PUSH
28945: LD_VAR 0 3
28949: PUSH
28950: LD_VAR 0 4
28954: PLUS
28955: ST_TO_ADDR
// for _x = min_x to max_x do
28956: LD_ADDR_VAR 0 11
28960: PUSH
28961: DOUBLE
28962: LD_VAR 0 7
28966: DEC
28967: ST_TO_ADDR
28968: LD_VAR 0 9
28972: PUSH
28973: FOR_TO
28974: IFFALSE 29093
// for _y = min_y to max_y do
28976: LD_ADDR_VAR 0 12
28980: PUSH
28981: DOUBLE
28982: LD_VAR 0 8
28986: DEC
28987: ST_TO_ADDR
28988: LD_VAR 0 10
28992: PUSH
28993: FOR_TO
28994: IFFALSE 29089
// begin if not ValidHex ( _x , _y ) then
28996: LD_VAR 0 11
29000: PPUSH
29001: LD_VAR 0 12
29005: PPUSH
29006: CALL_OW 488
29010: NOT
29011: IFFALSE 29015
// continue ;
29013: GO 28993
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29015: LD_VAR 0 11
29019: PPUSH
29020: LD_VAR 0 12
29024: PPUSH
29025: CALL_OW 351
29029: IFFALSE 29047
29031: PUSH
29032: LD_VAR 0 11
29036: PPUSH
29037: LD_VAR 0 12
29041: PPUSH
29042: CALL_OW 554
29046: AND
29047: IFFALSE 29087
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29049: LD_ADDR_VAR 0 13
29053: PUSH
29054: LD_VAR 0 13
29058: PPUSH
29059: LD_VAR 0 13
29063: PUSH
29064: LD_INT 1
29066: PLUS
29067: PPUSH
29068: LD_VAR 0 11
29072: PUSH
29073: LD_VAR 0 12
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PPUSH
29082: CALL_OW 2
29086: ST_TO_ADDR
// end ;
29087: GO 28993
29089: POP
29090: POP
29091: GO 28973
29093: POP
29094: POP
// if not list then
29095: LD_VAR 0 13
29099: NOT
29100: IFFALSE 29104
// exit ;
29102: GO 29350
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29104: LD_ADDR_VAR 0 13
29108: PUSH
29109: LD_VAR 0 1
29113: PPUSH
29114: LD_VAR 0 13
29118: PPUSH
29119: LD_INT 1
29121: PPUSH
29122: LD_INT 1
29124: PPUSH
29125: CALL 39173 0 4
29129: ST_TO_ADDR
// ComStop ( flame ) ;
29130: LD_VAR 0 1
29134: PPUSH
29135: CALL_OW 141
// for i in list do
29139: LD_ADDR_VAR 0 6
29143: PUSH
29144: LD_VAR 0 13
29148: PUSH
29149: FOR_IN
29150: IFFALSE 29181
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29152: LD_VAR 0 1
29156: PPUSH
29157: LD_VAR 0 6
29161: PUSH
29162: LD_INT 1
29164: ARRAY
29165: PPUSH
29166: LD_VAR 0 6
29170: PUSH
29171: LD_INT 2
29173: ARRAY
29174: PPUSH
29175: CALL_OW 176
29179: GO 29149
29181: POP
29182: POP
// repeat wait ( 0 0$1 ) ;
29183: LD_INT 35
29185: PPUSH
29186: CALL_OW 67
// task := GetTaskList ( flame ) ;
29190: LD_ADDR_VAR 0 14
29194: PUSH
29195: LD_VAR 0 1
29199: PPUSH
29200: CALL_OW 437
29204: ST_TO_ADDR
// if not task then
29205: LD_VAR 0 14
29209: NOT
29210: IFFALSE 29214
// exit ;
29212: GO 29350
// if task [ 1 ] [ 1 ] <> | then
29214: LD_VAR 0 14
29218: PUSH
29219: LD_INT 1
29221: ARRAY
29222: PUSH
29223: LD_INT 1
29225: ARRAY
29226: PUSH
29227: LD_STRING |
29229: NONEQUAL
29230: IFFALSE 29234
// exit ;
29232: GO 29350
// _x := task [ 1 ] [ 2 ] ;
29234: LD_ADDR_VAR 0 11
29238: PUSH
29239: LD_VAR 0 14
29243: PUSH
29244: LD_INT 1
29246: ARRAY
29247: PUSH
29248: LD_INT 2
29250: ARRAY
29251: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29252: LD_ADDR_VAR 0 12
29256: PUSH
29257: LD_VAR 0 14
29261: PUSH
29262: LD_INT 1
29264: ARRAY
29265: PUSH
29266: LD_INT 3
29268: ARRAY
29269: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29270: LD_VAR 0 11
29274: PPUSH
29275: LD_VAR 0 12
29279: PPUSH
29280: CALL_OW 351
29284: NOT
29285: IFTRUE 29304
29287: PUSH
29288: LD_VAR 0 11
29292: PPUSH
29293: LD_VAR 0 12
29297: PPUSH
29298: CALL_OW 554
29302: NOT
29303: OR
29304: IFFALSE 29338
// begin task := Delete ( task , 1 ) ;
29306: LD_ADDR_VAR 0 14
29310: PUSH
29311: LD_VAR 0 14
29315: PPUSH
29316: LD_INT 1
29318: PPUSH
29319: CALL_OW 3
29323: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29324: LD_VAR 0 1
29328: PPUSH
29329: LD_VAR 0 14
29333: PPUSH
29334: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 314
29347: NOT
29348: IFFALSE 29183
// end ;
29350: LD_VAR 0 5
29354: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29355: LD_EXP 77
29359: NOT
29360: IFFALSE 29410
29362: GO 29364
29364: DISABLE
// begin initHack := true ;
29365: LD_ADDR_EXP 77
29369: PUSH
29370: LD_INT 1
29372: ST_TO_ADDR
// hackTanks := [ ] ;
29373: LD_ADDR_EXP 78
29377: PUSH
29378: EMPTY
29379: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29380: LD_ADDR_EXP 79
29384: PUSH
29385: EMPTY
29386: ST_TO_ADDR
// hackLimit := 3 ;
29387: LD_ADDR_EXP 80
29391: PUSH
29392: LD_INT 3
29394: ST_TO_ADDR
// hackDist := 12 ;
29395: LD_ADDR_EXP 81
29399: PUSH
29400: LD_INT 12
29402: ST_TO_ADDR
// hackCounter := [ ] ;
29403: LD_ADDR_EXP 82
29407: PUSH
29408: EMPTY
29409: ST_TO_ADDR
// end ;
29410: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29411: LD_EXP 77
29415: IFFALSE 29433
29417: PUSH
29418: LD_INT 34
29420: PUSH
29421: LD_INT 99
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PPUSH
29428: CALL_OW 69
29432: AND
29433: IFFALSE 29686
29435: GO 29437
29437: DISABLE
29438: LD_INT 0
29440: PPUSH
29441: PPUSH
// begin enable ;
29442: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29443: LD_ADDR_VAR 0 1
29447: PUSH
29448: LD_INT 34
29450: PUSH
29451: LD_INT 99
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PPUSH
29458: CALL_OW 69
29462: PUSH
29463: FOR_IN
29464: IFFALSE 29684
// begin if not i in hackTanks then
29466: LD_VAR 0 1
29470: PUSH
29471: LD_EXP 78
29475: IN
29476: NOT
29477: IFFALSE 29560
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29479: LD_ADDR_EXP 78
29483: PUSH
29484: LD_EXP 78
29488: PPUSH
29489: LD_EXP 78
29493: PUSH
29494: LD_INT 1
29496: PLUS
29497: PPUSH
29498: LD_VAR 0 1
29502: PPUSH
29503: CALL_OW 1
29507: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29508: LD_ADDR_EXP 79
29512: PUSH
29513: LD_EXP 79
29517: PPUSH
29518: LD_EXP 79
29522: PUSH
29523: LD_INT 1
29525: PLUS
29526: PPUSH
29527: EMPTY
29528: PPUSH
29529: CALL_OW 1
29533: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29534: LD_ADDR_EXP 82
29538: PUSH
29539: LD_EXP 82
29543: PPUSH
29544: LD_EXP 82
29548: PUSH
29549: LD_INT 1
29551: PLUS
29552: PPUSH
29553: EMPTY
29554: PPUSH
29555: CALL_OW 1
29559: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL_OW 302
29569: NOT
29570: IFFALSE 29583
// begin HackUnlinkAll ( i ) ;
29572: LD_VAR 0 1
29576: PPUSH
29577: CALL 29689 0 1
// continue ;
29581: GO 29463
// end ; HackCheckCapturedStatus ( i ) ;
29583: LD_VAR 0 1
29587: PPUSH
29588: CALL 30134 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29592: LD_ADDR_VAR 0 2
29596: PUSH
29597: LD_INT 81
29599: PUSH
29600: LD_VAR 0 1
29604: PPUSH
29605: CALL_OW 255
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 33
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 91
29626: PUSH
29627: LD_VAR 0 1
29631: PUSH
29632: LD_EXP 81
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 50
29644: PUSH
29645: EMPTY
29646: LIST
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: PPUSH
29654: CALL_OW 69
29658: ST_TO_ADDR
// if not tmp then
29659: LD_VAR 0 2
29663: NOT
29664: IFFALSE 29668
// continue ;
29666: GO 29463
// HackLink ( i , tmp ) ;
29668: LD_VAR 0 1
29672: PPUSH
29673: LD_VAR 0 2
29677: PPUSH
29678: CALL 29825 0 2
// end ;
29682: GO 29463
29684: POP
29685: POP
// end ;
29686: PPOPN 2
29688: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29689: LD_INT 0
29691: PPUSH
29692: PPUSH
29693: PPUSH
// if not hack in hackTanks then
29694: LD_VAR 0 1
29698: PUSH
29699: LD_EXP 78
29703: IN
29704: NOT
29705: IFFALSE 29709
// exit ;
29707: GO 29820
// index := GetElementIndex ( hackTanks , hack ) ;
29709: LD_ADDR_VAR 0 4
29713: PUSH
29714: LD_EXP 78
29718: PPUSH
29719: LD_VAR 0 1
29723: PPUSH
29724: CALL 38468 0 2
29728: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29729: LD_EXP 79
29733: PUSH
29734: LD_VAR 0 4
29738: ARRAY
29739: IFFALSE 29820
// begin for i in hackTanksCaptured [ index ] do
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_EXP 79
29750: PUSH
29751: LD_VAR 0 4
29755: ARRAY
29756: PUSH
29757: FOR_IN
29758: IFFALSE 29784
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29760: LD_VAR 0 3
29764: PUSH
29765: LD_INT 1
29767: ARRAY
29768: PPUSH
29769: LD_VAR 0 3
29773: PUSH
29774: LD_INT 2
29776: ARRAY
29777: PPUSH
29778: CALL_OW 235
29782: GO 29757
29784: POP
29785: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29786: LD_ADDR_EXP 79
29790: PUSH
29791: LD_EXP 79
29795: PPUSH
29796: LD_VAR 0 4
29800: PPUSH
29801: EMPTY
29802: PPUSH
29803: CALL_OW 1
29807: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29808: LD_VAR 0 1
29812: PPUSH
29813: LD_INT 0
29815: PPUSH
29816: CALL_OW 505
// end ; end ;
29820: LD_VAR 0 2
29824: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29825: LD_INT 0
29827: PPUSH
29828: PPUSH
29829: PPUSH
// if not hack in hackTanks or not vehicles then
29830: LD_VAR 0 1
29834: PUSH
29835: LD_EXP 78
29839: IN
29840: NOT
29841: IFTRUE 29850
29843: PUSH
29844: LD_VAR 0 2
29848: NOT
29849: OR
29850: IFFALSE 29854
// exit ;
29852: GO 30129
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29854: LD_ADDR_VAR 0 2
29858: PUSH
29859: LD_VAR 0 1
29863: PPUSH
29864: LD_VAR 0 2
29868: PPUSH
29869: LD_INT 1
29871: PPUSH
29872: LD_INT 1
29874: PPUSH
29875: CALL 39120 0 4
29879: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29880: LD_ADDR_VAR 0 5
29884: PUSH
29885: LD_EXP 78
29889: PPUSH
29890: LD_VAR 0 1
29894: PPUSH
29895: CALL 38468 0 2
29899: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29900: LD_EXP 79
29904: PUSH
29905: LD_VAR 0 5
29909: ARRAY
29910: PUSH
29911: LD_EXP 80
29915: LESS
29916: IFFALSE 30105
// begin for i := 1 to vehicles do
29918: LD_ADDR_VAR 0 4
29922: PUSH
29923: DOUBLE
29924: LD_INT 1
29926: DEC
29927: ST_TO_ADDR
29928: LD_VAR 0 2
29932: PUSH
29933: FOR_TO
29934: IFFALSE 30103
// begin if hackTanksCaptured [ index ] = hackLimit then
29936: LD_EXP 79
29940: PUSH
29941: LD_VAR 0 5
29945: ARRAY
29946: PUSH
29947: LD_EXP 80
29951: EQUAL
29952: IFFALSE 29956
// break ;
29954: GO 30103
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29956: LD_ADDR_EXP 82
29960: PUSH
29961: LD_EXP 82
29965: PPUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: LD_EXP 82
29975: PUSH
29976: LD_VAR 0 5
29980: ARRAY
29981: PUSH
29982: LD_INT 1
29984: PLUS
29985: PPUSH
29986: CALL_OW 1
29990: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29991: LD_ADDR_EXP 79
29995: PUSH
29996: LD_EXP 79
30000: PPUSH
30001: LD_VAR 0 5
30005: PUSH
30006: LD_EXP 79
30010: PUSH
30011: LD_VAR 0 5
30015: ARRAY
30016: PUSH
30017: LD_INT 1
30019: PLUS
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PPUSH
30025: LD_VAR 0 2
30029: PUSH
30030: LD_VAR 0 4
30034: ARRAY
30035: PUSH
30036: LD_VAR 0 2
30040: PUSH
30041: LD_VAR 0 4
30045: ARRAY
30046: PPUSH
30047: CALL_OW 255
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PPUSH
30056: CALL 38685 0 3
30060: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30061: LD_VAR 0 2
30065: PUSH
30066: LD_VAR 0 4
30070: ARRAY
30071: PPUSH
30072: LD_VAR 0 1
30076: PPUSH
30077: CALL_OW 255
30081: PPUSH
30082: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30086: LD_VAR 0 2
30090: PUSH
30091: LD_VAR 0 4
30095: ARRAY
30096: PPUSH
30097: CALL_OW 141
// end ;
30101: GO 29933
30103: POP
30104: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30105: LD_VAR 0 1
30109: PPUSH
30110: LD_EXP 79
30114: PUSH
30115: LD_VAR 0 5
30119: ARRAY
30120: PUSH
30121: LD_INT 0
30123: PLUS
30124: PPUSH
30125: CALL_OW 505
// end ;
30129: LD_VAR 0 3
30133: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30134: LD_INT 0
30136: PPUSH
30137: PPUSH
30138: PPUSH
30139: PPUSH
// if not hack in hackTanks then
30140: LD_VAR 0 1
30144: PUSH
30145: LD_EXP 78
30149: IN
30150: NOT
30151: IFFALSE 30155
// exit ;
30153: GO 30399
// index := GetElementIndex ( hackTanks , hack ) ;
30155: LD_ADDR_VAR 0 4
30159: PUSH
30160: LD_EXP 78
30164: PPUSH
30165: LD_VAR 0 1
30169: PPUSH
30170: CALL 38468 0 2
30174: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30175: LD_ADDR_VAR 0 3
30179: PUSH
30180: DOUBLE
30181: LD_EXP 79
30185: PUSH
30186: LD_VAR 0 4
30190: ARRAY
30191: INC
30192: ST_TO_ADDR
30193: LD_INT 1
30195: PUSH
30196: FOR_DOWNTO
30197: IFFALSE 30373
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30199: LD_ADDR_VAR 0 5
30203: PUSH
30204: LD_EXP 79
30208: PUSH
30209: LD_VAR 0 4
30213: ARRAY
30214: PUSH
30215: LD_VAR 0 3
30219: ARRAY
30220: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30221: LD_VAR 0 5
30225: PUSH
30226: LD_INT 1
30228: ARRAY
30229: PPUSH
30230: CALL_OW 302
30234: NOT
30235: IFTRUE 30263
30237: PUSH
30238: LD_VAR 0 5
30242: PUSH
30243: LD_INT 1
30245: ARRAY
30246: PPUSH
30247: CALL_OW 255
30251: PUSH
30252: LD_VAR 0 1
30256: PPUSH
30257: CALL_OW 255
30261: NONEQUAL
30262: OR
30263: IFFALSE 30371
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30265: LD_VAR 0 5
30269: PUSH
30270: LD_INT 1
30272: ARRAY
30273: PPUSH
30274: CALL_OW 305
30278: IFFALSE 30306
30280: PUSH
30281: LD_VAR 0 5
30285: PUSH
30286: LD_INT 1
30288: ARRAY
30289: PPUSH
30290: CALL_OW 255
30294: PUSH
30295: LD_VAR 0 1
30299: PPUSH
30300: CALL_OW 255
30304: EQUAL
30305: AND
30306: IFFALSE 30330
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30308: LD_VAR 0 5
30312: PUSH
30313: LD_INT 1
30315: ARRAY
30316: PPUSH
30317: LD_VAR 0 5
30321: PUSH
30322: LD_INT 2
30324: ARRAY
30325: PPUSH
30326: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30330: LD_ADDR_EXP 79
30334: PUSH
30335: LD_EXP 79
30339: PPUSH
30340: LD_VAR 0 4
30344: PPUSH
30345: LD_EXP 79
30349: PUSH
30350: LD_VAR 0 4
30354: ARRAY
30355: PPUSH
30356: LD_VAR 0 3
30360: PPUSH
30361: CALL_OW 3
30365: PPUSH
30366: CALL_OW 1
30370: ST_TO_ADDR
// end ; end ;
30371: GO 30196
30373: POP
30374: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30375: LD_VAR 0 1
30379: PPUSH
30380: LD_EXP 79
30384: PUSH
30385: LD_VAR 0 4
30389: ARRAY
30390: PUSH
30391: LD_INT 0
30393: PLUS
30394: PPUSH
30395: CALL_OW 505
// end ;
30399: LD_VAR 0 2
30403: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30404: LD_INT 0
30406: PPUSH
30407: PPUSH
30408: PPUSH
30409: PPUSH
// if not hack in hackTanks then
30410: LD_VAR 0 1
30414: PUSH
30415: LD_EXP 78
30419: IN
30420: NOT
30421: IFFALSE 30425
// exit ;
30423: GO 30510
// index := GetElementIndex ( hackTanks , hack ) ;
30425: LD_ADDR_VAR 0 5
30429: PUSH
30430: LD_EXP 78
30434: PPUSH
30435: LD_VAR 0 1
30439: PPUSH
30440: CALL 38468 0 2
30444: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30445: LD_ADDR_VAR 0 4
30449: PUSH
30450: DOUBLE
30451: LD_INT 1
30453: DEC
30454: ST_TO_ADDR
30455: LD_EXP 79
30459: PUSH
30460: LD_VAR 0 5
30464: ARRAY
30465: PUSH
30466: FOR_TO
30467: IFFALSE 30508
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30469: LD_EXP 79
30473: PUSH
30474: LD_VAR 0 5
30478: ARRAY
30479: PUSH
30480: LD_VAR 0 4
30484: ARRAY
30485: PUSH
30486: LD_INT 1
30488: ARRAY
30489: PUSH
30490: LD_VAR 0 2
30494: EQUAL
30495: IFFALSE 30506
// KillUnit ( vehicle ) ;
30497: LD_VAR 0 2
30501: PPUSH
30502: CALL_OW 66
30506: GO 30466
30508: POP
30509: POP
// end ;
30510: LD_VAR 0 3
30514: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
30515: LD_EXP 83
30519: NOT
30520: IFFALSE 30653
30522: GO 30524
30524: DISABLE
30525: LD_INT 0
30527: PPUSH
// begin initMiner := true ;
30528: LD_ADDR_EXP 83
30532: PUSH
30533: LD_INT 1
30535: ST_TO_ADDR
// minersList := [ ] ;
30536: LD_ADDR_EXP 84
30540: PUSH
30541: EMPTY
30542: ST_TO_ADDR
// minerMinesList := [ ] ;
30543: LD_ADDR_EXP 85
30547: PUSH
30548: EMPTY
30549: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
30550: LD_ADDR_EXP 86
30554: PUSH
30555: LD_INT 10
30557: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30558: LD_ADDR_VAR 0 1
30562: PUSH
30563: LD_INT 34
30565: PUSH
30566: LD_INT 81
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PPUSH
30573: CALL_OW 69
30577: PUSH
30578: FOR_IN
30579: IFFALSE 30651
// begin if not i in minersList then
30581: LD_VAR 0 1
30585: PUSH
30586: LD_EXP 84
30590: IN
30591: NOT
30592: IFFALSE 30649
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30594: LD_ADDR_EXP 84
30598: PUSH
30599: LD_EXP 84
30603: PPUSH
30604: LD_EXP 84
30608: PUSH
30609: LD_INT 1
30611: PLUS
30612: PPUSH
30613: LD_VAR 0 1
30617: PPUSH
30618: CALL_OW 1
30622: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30623: LD_ADDR_EXP 85
30627: PUSH
30628: LD_EXP 85
30632: PPUSH
30633: LD_EXP 85
30637: PUSH
30638: LD_INT 1
30640: PLUS
30641: PPUSH
30642: EMPTY
30643: PPUSH
30644: CALL_OW 1
30648: ST_TO_ADDR
// end end ;
30649: GO 30578
30651: POP
30652: POP
// end ;
30653: PPOPN 1
30655: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
30656: LD_EXP 83
30660: IFFALSE 30691
30662: PUSH
30663: LD_EXP 85
30667: PPUSH
30668: CALL 35767 0 1
30672: IFTRUE 30690
30674: PUSH
30675: LD_INT 34
30677: PUSH
30678: LD_INT 81
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PPUSH
30685: CALL_OW 69
30689: OR
30690: AND
30691: IFFALSE 31211
30693: GO 30695
30695: DISABLE
30696: LD_INT 0
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
// begin enable ;
30702: ENABLE
// for i := minerMinesList downto 1 do
30703: LD_ADDR_VAR 0 1
30707: PUSH
30708: DOUBLE
30709: LD_EXP 85
30713: INC
30714: ST_TO_ADDR
30715: LD_INT 1
30717: PUSH
30718: FOR_DOWNTO
30719: IFFALSE 31209
// begin side := GetSide ( minersList [ i ] ) ;
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_EXP 84
30730: PUSH
30731: LD_VAR 0 1
30735: ARRAY
30736: PPUSH
30737: CALL_OW 255
30741: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
30742: LD_EXP 84
30746: PUSH
30747: LD_VAR 0 1
30751: ARRAY
30752: PPUSH
30753: CALL_OW 300
30757: IFFALSE 30778
30759: PUSH
30760: LD_VAR 0 3
30764: PUSH
30765: LD_OWVAR 2
30769: PUSH
30770: LD_INT 9
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: IN
30777: AND
30778: IFFALSE 30811
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
30780: LD_EXP 84
30784: PUSH
30785: LD_VAR 0 1
30789: ARRAY
30790: PPUSH
30791: LD_EXP 85
30795: PUSH
30796: LD_VAR 0 1
30800: ARRAY
30801: PPUSH
30802: CALL 35767 0 1
30806: PPUSH
30807: CALL_OW 505
// if not minerMinesList [ i ] then
30811: LD_EXP 85
30815: PUSH
30816: LD_VAR 0 1
30820: ARRAY
30821: NOT
30822: IFFALSE 30826
// continue ;
30824: GO 30718
// for j := minerMinesList [ i ] downto 1 do
30826: LD_ADDR_VAR 0 2
30830: PUSH
30831: DOUBLE
30832: LD_EXP 85
30836: PUSH
30837: LD_VAR 0 1
30841: ARRAY
30842: INC
30843: ST_TO_ADDR
30844: LD_INT 1
30846: PUSH
30847: FOR_DOWNTO
30848: IFFALSE 31205
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
30850: LD_EXP 84
30854: PUSH
30855: LD_VAR 0 1
30859: ARRAY
30860: PPUSH
30861: CALL_OW 301
30865: IFTRUE 30885
30867: PUSH
30868: LD_EXP 84
30872: PUSH
30873: LD_VAR 0 1
30877: ARRAY
30878: PPUSH
30879: CALL_OW 305
30883: NOT
30884: OR
30885: IFFALSE 30976
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30887: LD_EXP 85
30891: PUSH
30892: LD_VAR 0 1
30896: ARRAY
30897: PUSH
30898: LD_VAR 0 2
30902: ARRAY
30903: PUSH
30904: LD_INT 1
30906: ARRAY
30907: PPUSH
30908: LD_EXP 85
30912: PUSH
30913: LD_VAR 0 1
30917: ARRAY
30918: PUSH
30919: LD_VAR 0 2
30923: ARRAY
30924: PUSH
30925: LD_INT 2
30927: ARRAY
30928: PPUSH
30929: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30933: LD_ADDR_EXP 85
30937: PUSH
30938: LD_EXP 85
30942: PPUSH
30943: LD_VAR 0 1
30947: PPUSH
30948: LD_EXP 85
30952: PUSH
30953: LD_VAR 0 1
30957: ARRAY
30958: PPUSH
30959: LD_VAR 0 2
30963: PPUSH
30964: CALL_OW 3
30968: PPUSH
30969: CALL_OW 1
30973: ST_TO_ADDR
// continue ;
30974: GO 30847
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30976: LD_ADDR_VAR 0 4
30980: PUSH
30981: LD_EXP 85
30985: PUSH
30986: LD_VAR 0 1
30990: ARRAY
30991: PUSH
30992: LD_VAR 0 2
30996: ARRAY
30997: PUSH
30998: LD_INT 1
31000: ARRAY
31001: PPUSH
31002: LD_EXP 85
31006: PUSH
31007: LD_VAR 0 1
31011: ARRAY
31012: PUSH
31013: LD_VAR 0 2
31017: ARRAY
31018: PUSH
31019: LD_INT 2
31021: ARRAY
31022: PPUSH
31023: CALL_OW 428
31027: ST_TO_ADDR
// if not tmp then
31028: LD_VAR 0 4
31032: NOT
31033: IFFALSE 31037
// continue ;
31035: GO 30847
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31037: LD_VAR 0 4
31041: PUSH
31042: LD_INT 81
31044: PUSH
31045: LD_VAR 0 3
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PPUSH
31054: CALL_OW 69
31058: IN
31059: IFFALSE 31109
31061: PUSH
31062: LD_EXP 85
31066: PUSH
31067: LD_VAR 0 1
31071: ARRAY
31072: PUSH
31073: LD_VAR 0 2
31077: ARRAY
31078: PUSH
31079: LD_INT 1
31081: ARRAY
31082: PPUSH
31083: LD_EXP 85
31087: PUSH
31088: LD_VAR 0 1
31092: ARRAY
31093: PUSH
31094: LD_VAR 0 2
31098: ARRAY
31099: PUSH
31100: LD_INT 2
31102: ARRAY
31103: PPUSH
31104: CALL_OW 458
31108: AND
31109: IFFALSE 31203
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31111: LD_EXP 85
31115: PUSH
31116: LD_VAR 0 1
31120: ARRAY
31121: PUSH
31122: LD_VAR 0 2
31126: ARRAY
31127: PUSH
31128: LD_INT 1
31130: ARRAY
31131: PPUSH
31132: LD_EXP 85
31136: PUSH
31137: LD_VAR 0 1
31141: ARRAY
31142: PUSH
31143: LD_VAR 0 2
31147: ARRAY
31148: PUSH
31149: LD_INT 2
31151: ARRAY
31152: PPUSH
31153: LD_VAR 0 3
31157: PPUSH
31158: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31162: LD_ADDR_EXP 85
31166: PUSH
31167: LD_EXP 85
31171: PPUSH
31172: LD_VAR 0 1
31176: PPUSH
31177: LD_EXP 85
31181: PUSH
31182: LD_VAR 0 1
31186: ARRAY
31187: PPUSH
31188: LD_VAR 0 2
31192: PPUSH
31193: CALL_OW 3
31197: PPUSH
31198: CALL_OW 1
31202: ST_TO_ADDR
// end ; end ;
31203: GO 30847
31205: POP
31206: POP
// end ;
31207: GO 30718
31209: POP
31210: POP
// end ;
31211: PPOPN 4
31213: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
31214: LD_INT 0
31216: PPUSH
31217: PPUSH
31218: PPUSH
31219: PPUSH
// result := false ;
31220: LD_ADDR_VAR 0 4
31224: PUSH
31225: LD_INT 0
31227: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31228: LD_VAR 0 1
31232: PPUSH
31233: CALL_OW 264
31237: PUSH
31238: LD_INT 81
31240: EQUAL
31241: NOT
31242: IFFALSE 31246
// exit ;
31244: GO 31616
// side := GetSide ( unit ) ;
31246: LD_ADDR_VAR 0 6
31250: PUSH
31251: LD_VAR 0 1
31255: PPUSH
31256: CALL_OW 255
31260: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
31261: LD_ADDR_VAR 0 5
31265: PUSH
31266: LD_EXP 84
31270: PPUSH
31271: LD_VAR 0 1
31275: PPUSH
31276: CALL 38468 0 2
31280: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31281: LD_EXP 85
31285: PUSH
31286: LD_VAR 0 5
31290: ARRAY
31291: PUSH
31292: LD_EXP 86
31296: GREATEREQUAL
31297: IFFALSE 31301
// exit ;
31299: GO 31616
// ComMoveXY ( unit , x , y ) ;
31301: LD_VAR 0 1
31305: PPUSH
31306: LD_VAR 0 2
31310: PPUSH
31311: LD_VAR 0 3
31315: PPUSH
31316: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31320: LD_INT 35
31322: PPUSH
31323: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31327: LD_VAR 0 1
31331: PPUSH
31332: LD_VAR 0 2
31336: PPUSH
31337: LD_VAR 0 3
31341: PPUSH
31342: CALL 70524 0 3
31346: NOT
31347: IFFALSE 31360
31349: PUSH
31350: LD_VAR 0 1
31354: PPUSH
31355: CALL_OW 314
31359: AND
31360: IFFALSE 31364
// exit ;
31362: GO 31616
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31364: LD_VAR 0 2
31368: PPUSH
31369: LD_VAR 0 3
31373: PPUSH
31374: CALL_OW 428
31378: PUSH
31379: LD_VAR 0 1
31383: EQUAL
31384: IFFALSE 31398
31386: PUSH
31387: LD_VAR 0 1
31391: PPUSH
31392: CALL_OW 314
31396: NOT
31397: AND
31398: IFFALSE 31320
// if MineAtPos ( x , y ) then
31400: LD_VAR 0 2
31404: PPUSH
31405: LD_VAR 0 3
31409: PPUSH
31410: CALL_OW 458
31414: IFFALSE 31418
// exit ;
31416: GO 31616
// if your_side = side then
31418: LD_OWVAR 2
31422: PUSH
31423: LD_VAR 0 6
31427: EQUAL
31428: IFFALSE 31447
// PlaySoundXY ( x , y , PlantMine ) ;
31430: LD_VAR 0 2
31434: PPUSH
31435: LD_VAR 0 3
31439: PPUSH
31440: LD_STRING PlantMine
31442: PPUSH
31443: CALL_OW 366
// repeat wait ( 1 ) ;
31447: LD_INT 1
31449: PPUSH
31450: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
31454: LD_VAR 0 2
31458: PPUSH
31459: LD_VAR 0 3
31463: PPUSH
31464: LD_VAR 0 6
31468: PPUSH
31469: LD_INT 0
31471: PPUSH
31472: CALL_OW 454
31476: IFFALSE 31447
// if MineAtPos ( x , y ) then
31478: LD_VAR 0 2
31482: PPUSH
31483: LD_VAR 0 3
31487: PPUSH
31488: CALL_OW 458
31492: IFFALSE 31608
// begin for i in minerMinesList [ index ] do
31494: LD_ADDR_VAR 0 7
31498: PUSH
31499: LD_EXP 85
31503: PUSH
31504: LD_VAR 0 5
31508: ARRAY
31509: PUSH
31510: FOR_IN
31511: IFFALSE 31553
// if i [ 1 ] = x and i [ 2 ] = y then
31513: LD_VAR 0 7
31517: PUSH
31518: LD_INT 1
31520: ARRAY
31521: PUSH
31522: LD_VAR 0 2
31526: EQUAL
31527: IFFALSE 31545
31529: PUSH
31530: LD_VAR 0 7
31534: PUSH
31535: LD_INT 2
31537: ARRAY
31538: PUSH
31539: LD_VAR 0 3
31543: EQUAL
31544: AND
31545: IFFALSE 31551
// exit ;
31547: POP
31548: POP
31549: GO 31616
31551: GO 31510
31553: POP
31554: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31555: LD_ADDR_EXP 85
31559: PUSH
31560: LD_EXP 85
31564: PPUSH
31565: LD_VAR 0 5
31569: PUSH
31570: LD_EXP 85
31574: PUSH
31575: LD_VAR 0 5
31579: ARRAY
31580: PUSH
31581: LD_INT 1
31583: PLUS
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PPUSH
31589: LD_VAR 0 2
31593: PUSH
31594: LD_VAR 0 3
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PPUSH
31603: CALL 38685 0 3
31607: ST_TO_ADDR
// end ; result := true ;
31608: LD_ADDR_VAR 0 4
31612: PUSH
31613: LD_INT 1
31615: ST_TO_ADDR
// end ;
31616: LD_VAR 0 4
31620: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31621: LD_INT 0
31623: PPUSH
31624: PPUSH
31625: PPUSH
// if not unit in minersList then
31626: LD_VAR 0 1
31630: PUSH
31631: LD_EXP 84
31635: IN
31636: NOT
31637: IFFALSE 31641
// exit ;
31639: GO 31848
// index := GetElementIndex ( minersList , unit ) ;
31641: LD_ADDR_VAR 0 6
31645: PUSH
31646: LD_EXP 84
31650: PPUSH
31651: LD_VAR 0 1
31655: PPUSH
31656: CALL 38468 0 2
31660: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31661: LD_ADDR_VAR 0 5
31665: PUSH
31666: DOUBLE
31667: LD_EXP 85
31671: PUSH
31672: LD_VAR 0 6
31676: ARRAY
31677: INC
31678: ST_TO_ADDR
31679: LD_INT 1
31681: PUSH
31682: FOR_DOWNTO
31683: IFFALSE 31846
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31685: LD_EXP 85
31689: PUSH
31690: LD_VAR 0 6
31694: ARRAY
31695: PUSH
31696: LD_VAR 0 5
31700: ARRAY
31701: PUSH
31702: LD_INT 1
31704: ARRAY
31705: PPUSH
31706: LD_EXP 85
31710: PUSH
31711: LD_VAR 0 6
31715: ARRAY
31716: PUSH
31717: LD_VAR 0 5
31721: ARRAY
31722: PUSH
31723: LD_INT 2
31725: ARRAY
31726: PPUSH
31727: LD_VAR 0 2
31731: PPUSH
31732: LD_VAR 0 3
31736: PPUSH
31737: CALL_OW 298
31741: PUSH
31742: LD_INT 6
31744: LESS
31745: IFFALSE 31844
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31747: LD_EXP 85
31751: PUSH
31752: LD_VAR 0 6
31756: ARRAY
31757: PUSH
31758: LD_VAR 0 5
31762: ARRAY
31763: PUSH
31764: LD_INT 1
31766: ARRAY
31767: PPUSH
31768: LD_EXP 85
31772: PUSH
31773: LD_VAR 0 6
31777: ARRAY
31778: PUSH
31779: LD_VAR 0 5
31783: ARRAY
31784: PUSH
31785: LD_INT 2
31787: ARRAY
31788: PPUSH
31789: LD_VAR 0 1
31793: PPUSH
31794: CALL_OW 255
31798: PPUSH
31799: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31803: LD_ADDR_EXP 85
31807: PUSH
31808: LD_EXP 85
31812: PPUSH
31813: LD_VAR 0 6
31817: PPUSH
31818: LD_EXP 85
31822: PUSH
31823: LD_VAR 0 6
31827: ARRAY
31828: PPUSH
31829: LD_VAR 0 5
31833: PPUSH
31834: CALL_OW 3
31838: PPUSH
31839: CALL_OW 1
31843: ST_TO_ADDR
// end ; end ;
31844: GO 31682
31846: POP
31847: POP
// end ;
31848: LD_VAR 0 4
31852: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31853: LD_INT 0
31855: PPUSH
31856: PPUSH
31857: PPUSH
31858: PPUSH
31859: PPUSH
31860: PPUSH
31861: PPUSH
31862: PPUSH
31863: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31864: LD_VAR 0 1
31868: PPUSH
31869: CALL_OW 264
31873: PUSH
31874: LD_INT 81
31876: EQUAL
31877: NOT
31878: IFTRUE 31893
31880: PUSH
31881: LD_VAR 0 1
31885: PUSH
31886: LD_EXP 84
31890: IN
31891: NOT
31892: OR
31893: IFFALSE 31897
// exit ;
31895: GO 32223
// index := GetElementIndex ( minersList , unit ) ;
31897: LD_ADDR_VAR 0 6
31901: PUSH
31902: LD_EXP 84
31906: PPUSH
31907: LD_VAR 0 1
31911: PPUSH
31912: CALL 38468 0 2
31916: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31917: LD_ADDR_VAR 0 8
31921: PUSH
31922: LD_EXP 86
31926: PUSH
31927: LD_EXP 85
31931: PUSH
31932: LD_VAR 0 6
31936: ARRAY
31937: MINUS
31938: ST_TO_ADDR
// if not minesFreeAmount then
31939: LD_VAR 0 8
31943: NOT
31944: IFFALSE 31948
// exit ;
31946: GO 32223
// tmp := [ ] ;
31948: LD_ADDR_VAR 0 7
31952: PUSH
31953: EMPTY
31954: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31955: LD_ADDR_VAR 0 5
31959: PUSH
31960: DOUBLE
31961: LD_INT 1
31963: DEC
31964: ST_TO_ADDR
31965: LD_VAR 0 8
31969: PUSH
31970: FOR_TO
31971: IFFALSE 32170
// begin _d := rand ( 0 , 5 ) ;
31973: LD_ADDR_VAR 0 11
31977: PUSH
31978: LD_INT 0
31980: PPUSH
31981: LD_INT 5
31983: PPUSH
31984: CALL_OW 12
31988: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31989: LD_ADDR_VAR 0 12
31993: PUSH
31994: LD_INT 2
31996: PPUSH
31997: LD_INT 6
31999: PPUSH
32000: CALL_OW 12
32004: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32005: LD_ADDR_VAR 0 9
32009: PUSH
32010: LD_VAR 0 2
32014: PPUSH
32015: LD_VAR 0 11
32019: PPUSH
32020: LD_VAR 0 12
32024: PPUSH
32025: CALL_OW 272
32029: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32030: LD_ADDR_VAR 0 10
32034: PUSH
32035: LD_VAR 0 3
32039: PPUSH
32040: LD_VAR 0 11
32044: PPUSH
32045: LD_VAR 0 12
32049: PPUSH
32050: CALL_OW 273
32054: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32055: LD_VAR 0 9
32059: PPUSH
32060: LD_VAR 0 10
32064: PPUSH
32065: CALL_OW 488
32069: IFFALSE 32093
32071: PUSH
32072: LD_VAR 0 9
32076: PUSH
32077: LD_VAR 0 10
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_VAR 0 7
32090: IN
32091: NOT
32092: AND
32093: IFFALSE 32112
32095: PUSH
32096: LD_VAR 0 9
32100: PPUSH
32101: LD_VAR 0 10
32105: PPUSH
32106: CALL_OW 458
32110: NOT
32111: AND
32112: IFFALSE 32154
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32114: LD_ADDR_VAR 0 7
32118: PUSH
32119: LD_VAR 0 7
32123: PPUSH
32124: LD_VAR 0 7
32128: PUSH
32129: LD_INT 1
32131: PLUS
32132: PPUSH
32133: LD_VAR 0 9
32137: PUSH
32138: LD_VAR 0 10
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PPUSH
32147: CALL_OW 1
32151: ST_TO_ADDR
32152: GO 32168
// i := i - 1 ;
32154: LD_ADDR_VAR 0 5
32158: PUSH
32159: LD_VAR 0 5
32163: PUSH
32164: LD_INT 1
32166: MINUS
32167: ST_TO_ADDR
// end ;
32168: GO 31970
32170: POP
32171: POP
// for i in tmp do
32172: LD_ADDR_VAR 0 5
32176: PUSH
32177: LD_VAR 0 7
32181: PUSH
32182: FOR_IN
32183: IFFALSE 32221
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32185: LD_VAR 0 1
32189: PPUSH
32190: LD_VAR 0 5
32194: PUSH
32195: LD_INT 1
32197: ARRAY
32198: PPUSH
32199: LD_VAR 0 5
32203: PUSH
32204: LD_INT 2
32206: ARRAY
32207: PPUSH
32208: CALL 31214 0 3
32212: NOT
32213: IFFALSE 32219
// exit ;
32215: POP
32216: POP
32217: GO 32223
32219: GO 32182
32221: POP
32222: POP
// end ;
32223: LD_VAR 0 4
32227: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32228: LD_INT 0
32230: PPUSH
32231: PPUSH
32232: PPUSH
32233: PPUSH
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
// if GetClass ( unit ) <> class_sniper then
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 257
32248: PUSH
32249: LD_INT 5
32251: NONEQUAL
32252: IFFALSE 32256
// exit ;
32254: GO 32726
// dist := 8 ;
32256: LD_ADDR_VAR 0 5
32260: PUSH
32261: LD_INT 8
32263: ST_TO_ADDR
// viewRange := 12 ;
32264: LD_ADDR_VAR 0 8
32268: PUSH
32269: LD_INT 12
32271: ST_TO_ADDR
// side := GetSide ( unit ) ;
32272: LD_ADDR_VAR 0 6
32276: PUSH
32277: LD_VAR 0 1
32281: PPUSH
32282: CALL_OW 255
32286: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32287: LD_INT 61
32289: PPUSH
32290: LD_VAR 0 6
32294: PPUSH
32295: CALL_OW 321
32299: PUSH
32300: LD_INT 2
32302: EQUAL
32303: IFFALSE 32313
// viewRange := 16 ;
32305: LD_ADDR_VAR 0 8
32309: PUSH
32310: LD_INT 16
32312: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32313: LD_VAR 0 1
32317: PPUSH
32318: LD_VAR 0 2
32322: PPUSH
32323: LD_VAR 0 3
32327: PPUSH
32328: CALL_OW 297
32332: PUSH
32333: LD_VAR 0 5
32337: GREATER
32338: IFFALSE 32417
// begin ComMoveXY ( unit , x , y ) ;
32340: LD_VAR 0 1
32344: PPUSH
32345: LD_VAR 0 2
32349: PPUSH
32350: LD_VAR 0 3
32354: PPUSH
32355: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32359: LD_INT 35
32361: PPUSH
32362: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32366: LD_VAR 0 1
32370: PPUSH
32371: LD_VAR 0 2
32375: PPUSH
32376: LD_VAR 0 3
32380: PPUSH
32381: CALL 70524 0 3
32385: NOT
32386: IFFALSE 32390
// exit ;
32388: GO 32726
// until GetDistUnitXY ( unit , x , y ) < dist ;
32390: LD_VAR 0 1
32394: PPUSH
32395: LD_VAR 0 2
32399: PPUSH
32400: LD_VAR 0 3
32404: PPUSH
32405: CALL_OW 297
32409: PUSH
32410: LD_VAR 0 5
32414: LESS
32415: IFFALSE 32359
// end ; ComTurnXY ( unit , x , y ) ;
32417: LD_VAR 0 1
32421: PPUSH
32422: LD_VAR 0 2
32426: PPUSH
32427: LD_VAR 0 3
32431: PPUSH
32432: CALL_OW 118
// repeat if Multiplayer then
32436: LD_OWVAR 4
32440: IFFALSE 32451
// wait ( 35 ) else
32442: LD_INT 35
32444: PPUSH
32445: CALL_OW 67
32449: GO 32458
// wait ( 5 ) ;
32451: LD_INT 5
32453: PPUSH
32454: CALL_OW 67
// _d := GetDir ( unit ) ;
32458: LD_ADDR_VAR 0 11
32462: PUSH
32463: LD_VAR 0 1
32467: PPUSH
32468: CALL_OW 254
32472: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32473: LD_ADDR_VAR 0 7
32477: PUSH
32478: LD_VAR 0 1
32482: PPUSH
32483: CALL_OW 250
32487: PPUSH
32488: LD_VAR 0 1
32492: PPUSH
32493: CALL_OW 251
32497: PPUSH
32498: LD_VAR 0 2
32502: PPUSH
32503: LD_VAR 0 3
32507: PPUSH
32508: CALL 73160 0 4
32512: ST_TO_ADDR
// until dir = _d ;
32513: LD_VAR 0 7
32517: PUSH
32518: LD_VAR 0 11
32522: EQUAL
32523: IFFALSE 32436
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32525: LD_ADDR_VAR 0 9
32529: PUSH
32530: LD_VAR 0 1
32534: PPUSH
32535: CALL_OW 250
32539: PPUSH
32540: LD_VAR 0 7
32544: PPUSH
32545: LD_VAR 0 5
32549: PPUSH
32550: CALL_OW 272
32554: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32555: LD_ADDR_VAR 0 10
32559: PUSH
32560: LD_VAR 0 1
32564: PPUSH
32565: CALL_OW 251
32569: PPUSH
32570: LD_VAR 0 7
32574: PPUSH
32575: LD_VAR 0 5
32579: PPUSH
32580: CALL_OW 273
32584: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32585: LD_VAR 0 9
32589: PPUSH
32590: LD_VAR 0 10
32594: PPUSH
32595: CALL_OW 488
32599: NOT
32600: IFFALSE 32604
// exit ;
32602: GO 32726
// ComAnimCustom ( unit , 1 ) ;
32604: LD_VAR 0 1
32608: PPUSH
32609: LD_INT 1
32611: PPUSH
32612: CALL_OW 592
// p := 0 ;
32616: LD_ADDR_VAR 0 12
32620: PUSH
32621: LD_INT 0
32623: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32624: LD_VAR 0 9
32628: PPUSH
32629: LD_VAR 0 10
32633: PPUSH
32634: LD_VAR 0 6
32638: PPUSH
32639: LD_VAR 0 8
32643: PPUSH
32644: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32648: LD_INT 35
32650: PPUSH
32651: CALL_OW 67
// p := Inc ( p ) ;
32655: LD_ADDR_VAR 0 12
32659: PUSH
32660: LD_VAR 0 12
32664: PPUSH
32665: CALL 73116 0 1
32669: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32670: LD_VAR 0 12
32674: PUSH
32675: LD_INT 3
32677: EQUAL
32678: IFTRUE 32692
32680: PUSH
32681: LD_VAR 0 1
32685: PPUSH
32686: CALL_OW 302
32690: NOT
32691: OR
32692: IFTRUE 32705
32694: PUSH
32695: LD_VAR 0 1
32699: PPUSH
32700: CALL_OW 301
32704: OR
32705: IFFALSE 32648
// RemoveSeeing ( _x , _y , side ) ;
32707: LD_VAR 0 9
32711: PPUSH
32712: LD_VAR 0 10
32716: PPUSH
32717: LD_VAR 0 6
32721: PPUSH
32722: CALL_OW 331
// end ;
32726: LD_VAR 0 4
32730: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
32731: LD_INT 0
32733: PPUSH
32734: PPUSH
32735: PPUSH
32736: PPUSH
32737: PPUSH
32738: PPUSH
32739: PPUSH
32740: PPUSH
32741: PPUSH
32742: PPUSH
32743: PPUSH
// if not unit then
32744: LD_VAR 0 1
32748: NOT
32749: IFFALSE 32753
// exit ;
32751: GO 33024
// side := GetSide ( unit ) ;
32753: LD_ADDR_VAR 0 3
32757: PUSH
32758: LD_VAR 0 1
32762: PPUSH
32763: CALL_OW 255
32767: ST_TO_ADDR
// x := GetX ( unit ) ;
32768: LD_ADDR_VAR 0 5
32772: PUSH
32773: LD_VAR 0 1
32777: PPUSH
32778: CALL_OW 250
32782: ST_TO_ADDR
// y := GetY ( unit ) ;
32783: LD_ADDR_VAR 0 6
32787: PUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: CALL_OW 251
32797: ST_TO_ADDR
// r := 8 ;
32798: LD_ADDR_VAR 0 4
32802: PUSH
32803: LD_INT 8
32805: ST_TO_ADDR
// if x - r < 0 then
32806: LD_VAR 0 5
32810: PUSH
32811: LD_VAR 0 4
32815: MINUS
32816: PUSH
32817: LD_INT 0
32819: LESS
32820: IFFALSE 32832
// min_x := 0 else
32822: LD_ADDR_VAR 0 7
32826: PUSH
32827: LD_INT 0
32829: ST_TO_ADDR
32830: GO 32848
// min_x := x - r ;
32832: LD_ADDR_VAR 0 7
32836: PUSH
32837: LD_VAR 0 5
32841: PUSH
32842: LD_VAR 0 4
32846: MINUS
32847: ST_TO_ADDR
// if y - r < 0 then
32848: LD_VAR 0 6
32852: PUSH
32853: LD_VAR 0 4
32857: MINUS
32858: PUSH
32859: LD_INT 0
32861: LESS
32862: IFFALSE 32874
// min_y := 0 else
32864: LD_ADDR_VAR 0 8
32868: PUSH
32869: LD_INT 0
32871: ST_TO_ADDR
32872: GO 32890
// min_y := y - r ;
32874: LD_ADDR_VAR 0 8
32878: PUSH
32879: LD_VAR 0 6
32883: PUSH
32884: LD_VAR 0 4
32888: MINUS
32889: ST_TO_ADDR
// max_x := x + r ;
32890: LD_ADDR_VAR 0 9
32894: PUSH
32895: LD_VAR 0 5
32899: PUSH
32900: LD_VAR 0 4
32904: PLUS
32905: ST_TO_ADDR
// max_y := y + r ;
32906: LD_ADDR_VAR 0 10
32910: PUSH
32911: LD_VAR 0 6
32915: PUSH
32916: LD_VAR 0 4
32920: PLUS
32921: ST_TO_ADDR
// for _x = min_x to max_x do
32922: LD_ADDR_VAR 0 11
32926: PUSH
32927: DOUBLE
32928: LD_VAR 0 7
32932: DEC
32933: ST_TO_ADDR
32934: LD_VAR 0 9
32938: PUSH
32939: FOR_TO
32940: IFFALSE 33022
// for _y = min_y to max_y do
32942: LD_ADDR_VAR 0 12
32946: PUSH
32947: DOUBLE
32948: LD_VAR 0 8
32952: DEC
32953: ST_TO_ADDR
32954: LD_VAR 0 10
32958: PUSH
32959: FOR_TO
32960: IFFALSE 33018
// begin if not ValidHex ( _x , _y ) then
32962: LD_VAR 0 11
32966: PPUSH
32967: LD_VAR 0 12
32971: PPUSH
32972: CALL_OW 488
32976: NOT
32977: IFFALSE 32981
// continue ;
32979: GO 32959
// if MineAtPos ( _x , _y ) then
32981: LD_VAR 0 11
32985: PPUSH
32986: LD_VAR 0 12
32990: PPUSH
32991: CALL_OW 458
32995: IFFALSE 33016
// ViewMineAtPos ( _x , _y , side ) ;
32997: LD_VAR 0 11
33001: PPUSH
33002: LD_VAR 0 12
33006: PPUSH
33007: LD_VAR 0 3
33011: PPUSH
33012: CALL_OW 457
// end ;
33016: GO 32959
33018: POP
33019: POP
33020: GO 32939
33022: POP
33023: POP
// end ;
33024: LD_VAR 0 2
33028: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
33029: LD_INT 0
33031: PPUSH
33032: PPUSH
33033: PPUSH
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
// if not units then
33038: LD_VAR 0 1
33042: NOT
33043: IFFALSE 33047
// exit ;
33045: GO 33511
// scaners := [ ] ;
33047: LD_ADDR_VAR 0 6
33051: PUSH
33052: EMPTY
33053: ST_TO_ADDR
// for i in units do
33054: LD_ADDR_VAR 0 3
33058: PUSH
33059: LD_VAR 0 1
33063: PUSH
33064: FOR_IN
33065: IFFALSE 33222
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
33067: LD_VAR 0 3
33071: PPUSH
33072: CALL_OW 264
33076: PUSH
33077: LD_INT 11
33079: NONEQUAL
33080: IFTRUE 33094
33082: PUSH
33083: LD_VAR 0 3
33087: PPUSH
33088: CALL_OW 302
33092: NOT
33093: OR
33094: IFTRUE 33111
33096: PUSH
33097: LD_VAR 0 3
33101: PPUSH
33102: CALL_OW 110
33106: PUSH
33107: LD_INT 502
33109: EQUAL
33110: OR
33111: IFFALSE 33115
// continue ;
33113: GO 33064
// ComStop ( i ) ;
33115: LD_VAR 0 3
33119: PPUSH
33120: CALL_OW 141
// x := GetX ( i ) ;
33124: LD_ADDR_VAR 0 4
33128: PUSH
33129: LD_VAR 0 3
33133: PPUSH
33134: CALL_OW 250
33138: ST_TO_ADDR
// y := GetY ( i ) ;
33139: LD_ADDR_VAR 0 5
33143: PUSH
33144: LD_VAR 0 3
33148: PPUSH
33149: CALL_OW 251
33153: ST_TO_ADDR
// if GetSide ( i ) = your_side then
33154: LD_VAR 0 3
33158: PPUSH
33159: CALL_OW 255
33163: PUSH
33164: LD_OWVAR 2
33168: EQUAL
33169: IFFALSE 33188
// PlaySoundXY ( x , y , mineDetector ) ;
33171: LD_VAR 0 4
33175: PPUSH
33176: LD_VAR 0 5
33180: PPUSH
33181: LD_STRING mineDetector
33183: PPUSH
33184: CALL_OW 366
// scaners := Join ( scaners , i ) ;
33188: LD_ADDR_VAR 0 6
33192: PUSH
33193: LD_VAR 0 6
33197: PPUSH
33198: LD_VAR 0 3
33202: PPUSH
33203: CALL 71743 0 2
33207: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
33208: LD_VAR 0 3
33212: PPUSH
33213: LD_INT 502
33215: PPUSH
33216: CALL_OW 109
// end ;
33220: GO 33064
33222: POP
33223: POP
// if not scaners then
33224: LD_VAR 0 6
33228: NOT
33229: IFFALSE 33233
// exit ;
33231: GO 33511
// wait ( 3 ) ;
33233: LD_INT 3
33235: PPUSH
33236: CALL_OW 67
// timer := 6 ;
33240: LD_ADDR_VAR 0 7
33244: PUSH
33245: LD_INT 6
33247: ST_TO_ADDR
// repeat for i in scaners do
33248: LD_ADDR_VAR 0 3
33252: PUSH
33253: LD_VAR 0 6
33257: PUSH
33258: FOR_IN
33259: IFFALSE 33409
// begin side := GetSide ( i ) ;
33261: LD_ADDR_VAR 0 8
33265: PUSH
33266: LD_VAR 0 3
33270: PPUSH
33271: CALL_OW 255
33275: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33276: LD_VAR 0 3
33280: PPUSH
33281: CALL_OW 302
33285: NOT
33286: IFTRUE 33299
33288: PUSH
33289: LD_VAR 0 3
33293: PPUSH
33294: CALL_OW 314
33298: OR
33299: IFTRUE 33330
33301: PUSH
33302: LD_VAR 0 3
33306: PPUSH
33307: CALL_OW 263
33311: PUSH
33312: LD_INT 1
33314: EQUAL
33315: IFFALSE 33329
33317: PUSH
33318: LD_VAR 0 3
33322: PPUSH
33323: CALL_OW 311
33327: NOT
33328: AND
33329: OR
33330: IFFALSE 33374
// begin SetUnitDisplayNumber ( i , 0 ) ;
33332: LD_VAR 0 3
33336: PPUSH
33337: LD_INT 0
33339: PPUSH
33340: CALL_OW 505
// SetTag ( i , 0 ) ;
33344: LD_VAR 0 3
33348: PPUSH
33349: LD_INT 0
33351: PPUSH
33352: CALL_OW 109
// scaners := scaners diff i ;
33356: LD_ADDR_VAR 0 6
33360: PUSH
33361: LD_VAR 0 6
33365: PUSH
33366: LD_VAR 0 3
33370: DIFF
33371: ST_TO_ADDR
// continue ;
33372: GO 33258
// end ; if side in [ your_side , 9 ] then
33374: LD_VAR 0 8
33378: PUSH
33379: LD_OWVAR 2
33383: PUSH
33384: LD_INT 9
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: IN
33391: IFFALSE 33407
// SetUnitDisplayNumber ( i , timer ) ;
33393: LD_VAR 0 3
33397: PPUSH
33398: LD_VAR 0 7
33402: PPUSH
33403: CALL_OW 505
// end ;
33407: GO 33258
33409: POP
33410: POP
// if not scaners then
33411: LD_VAR 0 6
33415: NOT
33416: IFFALSE 33420
// exit ;
33418: GO 33511
// timer := Dec ( timer ) ;
33420: LD_ADDR_VAR 0 7
33424: PUSH
33425: LD_VAR 0 7
33429: PPUSH
33430: CALL 73138 0 1
33434: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33435: LD_INT 35
33437: PPUSH
33438: CALL_OW 67
// until timer = 0 ;
33442: LD_VAR 0 7
33446: PUSH
33447: LD_INT 0
33449: EQUAL
33450: IFFALSE 33248
// if not scaners then
33452: LD_VAR 0 6
33456: NOT
33457: IFFALSE 33461
// exit ;
33459: GO 33511
// for i in scaners do
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_VAR 0 6
33470: PUSH
33471: FOR_IN
33472: IFFALSE 33509
// begin SetUnitDisplayNumber ( i , 0 ) ;
33474: LD_VAR 0 3
33478: PPUSH
33479: LD_INT 0
33481: PPUSH
33482: CALL_OW 505
// SetTag ( i , 0 ) ;
33486: LD_VAR 0 3
33490: PPUSH
33491: LD_INT 0
33493: PPUSH
33494: CALL_OW 109
// RevealDetectorMine ( i ) ;
33498: LD_VAR 0 3
33502: PPUSH
33503: CALL 32731 0 1
// end ;
33507: GO 33471
33509: POP
33510: POP
// end ;
33511: LD_VAR 0 2
33515: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33516: LD_INT 0
33518: PPUSH
// if p1 = mine_detector_mode then
33519: LD_VAR 0 2
33523: PUSH
33524: LD_INT 103
33526: EQUAL
33527: IFFALSE 33538
// DetectMine ( units ) ;
33529: LD_VAR 0 1
33533: PPUSH
33534: CALL 33029 0 1
// end ; end_of_file
33538: LD_VAR 0 7
33542: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33543: LD_INT 0
33545: PPUSH
33546: PPUSH
// if exist_mode then
33547: LD_VAR 0 2
33551: IFFALSE 33597
// begin unit := CreateCharacter ( prefix & ident ) ;
33553: LD_ADDR_VAR 0 5
33557: PUSH
33558: LD_VAR 0 3
33562: PUSH
33563: LD_VAR 0 1
33567: STR
33568: PPUSH
33569: CALL_OW 34
33573: ST_TO_ADDR
// if unit then
33574: LD_VAR 0 5
33578: IFFALSE 33595
// DeleteCharacters ( prefix & ident ) ;
33580: LD_VAR 0 3
33584: PUSH
33585: LD_VAR 0 1
33589: STR
33590: PPUSH
33591: CALL_OW 40
// end else
33595: GO 33612
// unit := NewCharacter ( ident ) ;
33597: LD_ADDR_VAR 0 5
33601: PUSH
33602: LD_VAR 0 1
33606: PPUSH
33607: CALL_OW 25
33611: ST_TO_ADDR
// result := unit ;
33612: LD_ADDR_VAR 0 4
33616: PUSH
33617: LD_VAR 0 5
33621: ST_TO_ADDR
// end ;
33622: LD_VAR 0 4
33626: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
// if exist_mode then
33631: LD_VAR 0 2
33635: IFFALSE 33660
// unit := CreateCharacter ( prefix & ident ) else
33637: LD_ADDR_VAR 0 5
33641: PUSH
33642: LD_VAR 0 3
33646: PUSH
33647: LD_VAR 0 1
33651: STR
33652: PPUSH
33653: CALL_OW 34
33657: ST_TO_ADDR
33658: GO 33675
// unit := NewCharacter ( ident ) ;
33660: LD_ADDR_VAR 0 5
33664: PUSH
33665: LD_VAR 0 1
33669: PPUSH
33670: CALL_OW 25
33674: ST_TO_ADDR
// result := unit ;
33675: LD_ADDR_VAR 0 4
33679: PUSH
33680: LD_VAR 0 5
33684: ST_TO_ADDR
// end ;
33685: LD_VAR 0 4
33689: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33690: LD_INT 0
33692: PPUSH
33693: PPUSH
// if not side or not nation then
33694: LD_VAR 0 1
33698: NOT
33699: IFTRUE 33708
33701: PUSH
33702: LD_VAR 0 2
33706: NOT
33707: OR
33708: IFFALSE 33712
// exit ;
33710: GO 34506
// case nation of nation_american :
33712: LD_VAR 0 2
33716: PUSH
33717: LD_INT 1
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33725
33723: GO 33947
33725: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33726: LD_ADDR_VAR 0 4
33730: PUSH
33731: LD_INT 35
33733: PUSH
33734: LD_INT 45
33736: PUSH
33737: LD_INT 46
33739: PUSH
33740: LD_INT 47
33742: PUSH
33743: LD_INT 82
33745: PUSH
33746: LD_INT 83
33748: PUSH
33749: LD_INT 84
33751: PUSH
33752: LD_INT 85
33754: PUSH
33755: LD_INT 86
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 2
33763: PUSH
33764: LD_INT 6
33766: PUSH
33767: LD_INT 15
33769: PUSH
33770: LD_INT 16
33772: PUSH
33773: LD_INT 7
33775: PUSH
33776: LD_INT 12
33778: PUSH
33779: LD_INT 13
33781: PUSH
33782: LD_INT 10
33784: PUSH
33785: LD_INT 14
33787: PUSH
33788: LD_INT 20
33790: PUSH
33791: LD_INT 21
33793: PUSH
33794: LD_INT 22
33796: PUSH
33797: LD_INT 25
33799: PUSH
33800: LD_INT 32
33802: PUSH
33803: LD_INT 27
33805: PUSH
33806: LD_INT 36
33808: PUSH
33809: LD_INT 69
33811: PUSH
33812: LD_INT 39
33814: PUSH
33815: LD_INT 34
33817: PUSH
33818: LD_INT 40
33820: PUSH
33821: LD_INT 48
33823: PUSH
33824: LD_INT 49
33826: PUSH
33827: LD_INT 50
33829: PUSH
33830: LD_INT 51
33832: PUSH
33833: LD_INT 52
33835: PUSH
33836: LD_INT 53
33838: PUSH
33839: LD_INT 54
33841: PUSH
33842: LD_INT 55
33844: PUSH
33845: LD_INT 56
33847: PUSH
33848: LD_INT 57
33850: PUSH
33851: LD_INT 58
33853: PUSH
33854: LD_INT 59
33856: PUSH
33857: LD_INT 60
33859: PUSH
33860: LD_INT 61
33862: PUSH
33863: LD_INT 62
33865: PUSH
33866: LD_INT 80
33868: PUSH
33869: LD_INT 82
33871: PUSH
33872: LD_INT 83
33874: PUSH
33875: LD_INT 84
33877: PUSH
33878: LD_INT 85
33880: PUSH
33881: LD_INT 86
33883: PUSH
33884: LD_INT 90
33886: PUSH
33887: LD_INT 93
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: ST_TO_ADDR
33945: GO 34428
33947: LD_INT 2
33949: DOUBLE
33950: EQUAL
33951: IFTRUE 33955
33953: GO 34189
33955: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
33956: LD_ADDR_VAR 0 4
33960: PUSH
33961: LD_INT 35
33963: PUSH
33964: LD_INT 45
33966: PUSH
33967: LD_INT 46
33969: PUSH
33970: LD_INT 47
33972: PUSH
33973: LD_INT 82
33975: PUSH
33976: LD_INT 83
33978: PUSH
33979: LD_INT 84
33981: PUSH
33982: LD_INT 85
33984: PUSH
33985: LD_INT 87
33987: PUSH
33988: LD_INT 70
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: LD_INT 11
33996: PUSH
33997: LD_INT 3
33999: PUSH
34000: LD_INT 4
34002: PUSH
34003: LD_INT 5
34005: PUSH
34006: LD_INT 6
34008: PUSH
34009: LD_INT 15
34011: PUSH
34012: LD_INT 18
34014: PUSH
34015: LD_INT 7
34017: PUSH
34018: LD_INT 17
34020: PUSH
34021: LD_INT 8
34023: PUSH
34024: LD_INT 20
34026: PUSH
34027: LD_INT 21
34029: PUSH
34030: LD_INT 22
34032: PUSH
34033: LD_INT 72
34035: PUSH
34036: LD_INT 26
34038: PUSH
34039: LD_INT 69
34041: PUSH
34042: LD_INT 39
34044: PUSH
34045: LD_INT 40
34047: PUSH
34048: LD_INT 41
34050: PUSH
34051: LD_INT 42
34053: PUSH
34054: LD_INT 43
34056: PUSH
34057: LD_INT 48
34059: PUSH
34060: LD_INT 49
34062: PUSH
34063: LD_INT 50
34065: PUSH
34066: LD_INT 51
34068: PUSH
34069: LD_INT 52
34071: PUSH
34072: LD_INT 53
34074: PUSH
34075: LD_INT 54
34077: PUSH
34078: LD_INT 55
34080: PUSH
34081: LD_INT 56
34083: PUSH
34084: LD_INT 60
34086: PUSH
34087: LD_INT 61
34089: PUSH
34090: LD_INT 62
34092: PUSH
34093: LD_INT 66
34095: PUSH
34096: LD_INT 67
34098: PUSH
34099: LD_INT 68
34101: PUSH
34102: LD_INT 81
34104: PUSH
34105: LD_INT 82
34107: PUSH
34108: LD_INT 83
34110: PUSH
34111: LD_INT 84
34113: PUSH
34114: LD_INT 85
34116: PUSH
34117: LD_INT 87
34119: PUSH
34120: LD_INT 88
34122: PUSH
34123: LD_INT 92
34125: PUSH
34126: LD_INT 94
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: ST_TO_ADDR
34187: GO 34428
34189: LD_INT 3
34191: DOUBLE
34192: EQUAL
34193: IFTRUE 34197
34195: GO 34427
34197: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34198: LD_ADDR_VAR 0 4
34202: PUSH
34203: LD_INT 46
34205: PUSH
34206: LD_INT 47
34208: PUSH
34209: LD_INT 1
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 82
34217: PUSH
34218: LD_INT 83
34220: PUSH
34221: LD_INT 84
34223: PUSH
34224: LD_INT 85
34226: PUSH
34227: LD_INT 86
34229: PUSH
34230: LD_INT 11
34232: PUSH
34233: LD_INT 9
34235: PUSH
34236: LD_INT 20
34238: PUSH
34239: LD_INT 19
34241: PUSH
34242: LD_INT 21
34244: PUSH
34245: LD_INT 24
34247: PUSH
34248: LD_INT 22
34250: PUSH
34251: LD_INT 25
34253: PUSH
34254: LD_INT 28
34256: PUSH
34257: LD_INT 29
34259: PUSH
34260: LD_INT 30
34262: PUSH
34263: LD_INT 31
34265: PUSH
34266: LD_INT 37
34268: PUSH
34269: LD_INT 38
34271: PUSH
34272: LD_INT 32
34274: PUSH
34275: LD_INT 27
34277: PUSH
34278: LD_INT 33
34280: PUSH
34281: LD_INT 69
34283: PUSH
34284: LD_INT 39
34286: PUSH
34287: LD_INT 34
34289: PUSH
34290: LD_INT 40
34292: PUSH
34293: LD_INT 71
34295: PUSH
34296: LD_INT 23
34298: PUSH
34299: LD_INT 44
34301: PUSH
34302: LD_INT 48
34304: PUSH
34305: LD_INT 49
34307: PUSH
34308: LD_INT 50
34310: PUSH
34311: LD_INT 51
34313: PUSH
34314: LD_INT 52
34316: PUSH
34317: LD_INT 53
34319: PUSH
34320: LD_INT 54
34322: PUSH
34323: LD_INT 55
34325: PUSH
34326: LD_INT 56
34328: PUSH
34329: LD_INT 57
34331: PUSH
34332: LD_INT 58
34334: PUSH
34335: LD_INT 59
34337: PUSH
34338: LD_INT 63
34340: PUSH
34341: LD_INT 64
34343: PUSH
34344: LD_INT 65
34346: PUSH
34347: LD_INT 82
34349: PUSH
34350: LD_INT 83
34352: PUSH
34353: LD_INT 84
34355: PUSH
34356: LD_INT 85
34358: PUSH
34359: LD_INT 86
34361: PUSH
34362: LD_INT 89
34364: PUSH
34365: LD_INT 91
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: ST_TO_ADDR
34425: GO 34428
34427: POP
// if state > - 1 and state < 3 then
34428: LD_VAR 0 3
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: GREATER
34437: IFFALSE 34449
34439: PUSH
34440: LD_VAR 0 3
34444: PUSH
34445: LD_INT 3
34447: LESS
34448: AND
34449: IFFALSE 34506
// for i in result do
34451: LD_ADDR_VAR 0 5
34455: PUSH
34456: LD_VAR 0 4
34460: PUSH
34461: FOR_IN
34462: IFFALSE 34504
// if GetTech ( i , side ) <> state then
34464: LD_VAR 0 5
34468: PPUSH
34469: LD_VAR 0 1
34473: PPUSH
34474: CALL_OW 321
34478: PUSH
34479: LD_VAR 0 3
34483: NONEQUAL
34484: IFFALSE 34502
// result := result diff i ;
34486: LD_ADDR_VAR 0 4
34490: PUSH
34491: LD_VAR 0 4
34495: PUSH
34496: LD_VAR 0 5
34500: DIFF
34501: ST_TO_ADDR
34502: GO 34461
34504: POP
34505: POP
// end ;
34506: LD_VAR 0 4
34510: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34511: LD_INT 0
34513: PPUSH
34514: PPUSH
34515: PPUSH
// result := true ;
34516: LD_ADDR_VAR 0 3
34520: PUSH
34521: LD_INT 1
34523: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34524: LD_ADDR_VAR 0 5
34528: PUSH
34529: LD_VAR 0 2
34533: PPUSH
34534: CALL_OW 480
34538: ST_TO_ADDR
// if not tmp then
34539: LD_VAR 0 5
34543: NOT
34544: IFFALSE 34548
// exit ;
34546: GO 34597
// for i in tmp do
34548: LD_ADDR_VAR 0 4
34552: PUSH
34553: LD_VAR 0 5
34557: PUSH
34558: FOR_IN
34559: IFFALSE 34595
// if GetTech ( i , side ) <> state_researched then
34561: LD_VAR 0 4
34565: PPUSH
34566: LD_VAR 0 1
34570: PPUSH
34571: CALL_OW 321
34575: PUSH
34576: LD_INT 2
34578: NONEQUAL
34579: IFFALSE 34593
// begin result := false ;
34581: LD_ADDR_VAR 0 3
34585: PUSH
34586: LD_INT 0
34588: ST_TO_ADDR
// exit ;
34589: POP
34590: POP
34591: GO 34597
// end ;
34593: GO 34558
34595: POP
34596: POP
// end ;
34597: LD_VAR 0 3
34601: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34602: LD_INT 0
34604: PPUSH
34605: PPUSH
34606: PPUSH
34607: PPUSH
34608: PPUSH
34609: PPUSH
34610: PPUSH
34611: PPUSH
34612: PPUSH
34613: PPUSH
34614: PPUSH
34615: PPUSH
34616: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34617: LD_VAR 0 1
34621: NOT
34622: IFTRUE 34639
34624: PUSH
34625: LD_VAR 0 1
34629: PPUSH
34630: CALL_OW 257
34634: PUSH
34635: LD_INT 9
34637: NONEQUAL
34638: OR
34639: IFFALSE 34643
// exit ;
34641: GO 35222
// side := GetSide ( unit ) ;
34643: LD_ADDR_VAR 0 9
34647: PUSH
34648: LD_VAR 0 1
34652: PPUSH
34653: CALL_OW 255
34657: ST_TO_ADDR
// tech_space := tech_spacanom ;
34658: LD_ADDR_VAR 0 12
34662: PUSH
34663: LD_INT 29
34665: ST_TO_ADDR
// tech_time := tech_taurad ;
34666: LD_ADDR_VAR 0 13
34670: PUSH
34671: LD_INT 28
34673: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34674: LD_ADDR_VAR 0 11
34678: PUSH
34679: LD_VAR 0 1
34683: PPUSH
34684: CALL_OW 310
34688: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34689: LD_VAR 0 11
34693: PPUSH
34694: CALL_OW 247
34698: PUSH
34699: LD_INT 2
34701: EQUAL
34702: IFFALSE 34706
// exit ;
34704: GO 35222
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34706: LD_ADDR_VAR 0 8
34710: PUSH
34711: LD_INT 81
34713: PUSH
34714: LD_VAR 0 9
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 3
34725: PUSH
34726: LD_INT 21
34728: PUSH
34729: LD_INT 3
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PPUSH
34744: CALL_OW 69
34748: ST_TO_ADDR
// if not tmp then
34749: LD_VAR 0 8
34753: NOT
34754: IFFALSE 34758
// exit ;
34756: GO 35222
// if in_unit then
34758: LD_VAR 0 11
34762: IFFALSE 34786
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34764: LD_ADDR_VAR 0 10
34768: PUSH
34769: LD_VAR 0 8
34773: PPUSH
34774: LD_VAR 0 11
34778: PPUSH
34779: CALL_OW 74
34783: ST_TO_ADDR
34784: GO 34806
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34786: LD_ADDR_VAR 0 10
34790: PUSH
34791: LD_VAR 0 8
34795: PPUSH
34796: LD_VAR 0 1
34800: PPUSH
34801: CALL_OW 74
34805: ST_TO_ADDR
// if not enemy then
34806: LD_VAR 0 10
34810: NOT
34811: IFFALSE 34815
// exit ;
34813: GO 35222
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34815: LD_VAR 0 11
34819: IFFALSE 34841
34821: PUSH
34822: LD_VAR 0 11
34826: PPUSH
34827: LD_VAR 0 10
34831: PPUSH
34832: CALL_OW 296
34836: PUSH
34837: LD_INT 13
34839: GREATER
34840: AND
34841: IFTRUE 34863
34843: PUSH
34844: LD_VAR 0 1
34848: PPUSH
34849: LD_VAR 0 10
34853: PPUSH
34854: CALL_OW 296
34858: PUSH
34859: LD_INT 12
34861: GREATER
34862: OR
34863: IFFALSE 34867
// exit ;
34865: GO 35222
// missile := [ 1 ] ;
34867: LD_ADDR_VAR 0 14
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34878: LD_VAR 0 9
34882: PPUSH
34883: LD_VAR 0 12
34887: PPUSH
34888: CALL_OW 325
34892: IFFALSE 34921
// missile := Replace ( missile , missile + 1 , 2 ) ;
34894: LD_ADDR_VAR 0 14
34898: PUSH
34899: LD_VAR 0 14
34903: PPUSH
34904: LD_VAR 0 14
34908: PUSH
34909: LD_INT 1
34911: PLUS
34912: PPUSH
34913: LD_INT 2
34915: PPUSH
34916: CALL_OW 1
34920: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34921: LD_VAR 0 9
34925: PPUSH
34926: LD_VAR 0 13
34930: PPUSH
34931: CALL_OW 325
34935: IFFALSE 34959
34937: PUSH
34938: LD_VAR 0 10
34942: PPUSH
34943: CALL_OW 255
34947: PPUSH
34948: LD_VAR 0 13
34952: PPUSH
34953: CALL_OW 325
34957: NOT
34958: AND
34959: IFFALSE 34988
// missile := Replace ( missile , missile + 1 , 3 ) ;
34961: LD_ADDR_VAR 0 14
34965: PUSH
34966: LD_VAR 0 14
34970: PPUSH
34971: LD_VAR 0 14
34975: PUSH
34976: LD_INT 1
34978: PLUS
34979: PPUSH
34980: LD_INT 3
34982: PPUSH
34983: CALL_OW 1
34987: ST_TO_ADDR
// if missile < 2 then
34988: LD_VAR 0 14
34992: PUSH
34993: LD_INT 2
34995: LESS
34996: IFFALSE 35000
// exit ;
34998: GO 35222
// x := GetX ( enemy ) ;
35000: LD_ADDR_VAR 0 4
35004: PUSH
35005: LD_VAR 0 10
35009: PPUSH
35010: CALL_OW 250
35014: ST_TO_ADDR
// y := GetY ( enemy ) ;
35015: LD_ADDR_VAR 0 5
35019: PUSH
35020: LD_VAR 0 10
35024: PPUSH
35025: CALL_OW 251
35029: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35030: LD_ADDR_VAR 0 6
35034: PUSH
35035: LD_VAR 0 4
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PPUSH
35044: LD_INT 1
35046: PPUSH
35047: CALL_OW 12
35051: PLUS
35052: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35053: LD_ADDR_VAR 0 7
35057: PUSH
35058: LD_VAR 0 5
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PPUSH
35067: LD_INT 1
35069: PPUSH
35070: CALL_OW 12
35074: PLUS
35075: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35076: LD_VAR 0 6
35080: PPUSH
35081: LD_VAR 0 7
35085: PPUSH
35086: CALL_OW 488
35090: NOT
35091: IFFALSE 35113
// begin _x := x ;
35093: LD_ADDR_VAR 0 6
35097: PUSH
35098: LD_VAR 0 4
35102: ST_TO_ADDR
// _y := y ;
35103: LD_ADDR_VAR 0 7
35107: PUSH
35108: LD_VAR 0 5
35112: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35113: LD_ADDR_VAR 0 3
35117: PUSH
35118: LD_INT 1
35120: PPUSH
35121: LD_VAR 0 14
35125: PPUSH
35126: CALL_OW 12
35130: ST_TO_ADDR
// case i of 1 :
35131: LD_VAR 0 3
35135: PUSH
35136: LD_INT 1
35138: DOUBLE
35139: EQUAL
35140: IFTRUE 35144
35142: GO 35161
35144: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35145: LD_VAR 0 1
35149: PPUSH
35150: LD_VAR 0 10
35154: PPUSH
35155: CALL_OW 115
35159: GO 35222
35161: LD_INT 2
35163: DOUBLE
35164: EQUAL
35165: IFTRUE 35169
35167: GO 35191
35169: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35170: LD_VAR 0 1
35174: PPUSH
35175: LD_VAR 0 6
35179: PPUSH
35180: LD_VAR 0 7
35184: PPUSH
35185: CALL_OW 153
35189: GO 35222
35191: LD_INT 3
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35221
35199: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35200: LD_VAR 0 1
35204: PPUSH
35205: LD_VAR 0 6
35209: PPUSH
35210: LD_VAR 0 7
35214: PPUSH
35215: CALL_OW 154
35219: GO 35222
35221: POP
// end ;
35222: LD_VAR 0 2
35226: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35227: LD_INT 0
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
// if not unit or not building then
35235: LD_VAR 0 1
35239: NOT
35240: IFTRUE 35249
35242: PUSH
35243: LD_VAR 0 2
35247: NOT
35248: OR
35249: IFFALSE 35253
// exit ;
35251: GO 35411
// x := GetX ( building ) ;
35253: LD_ADDR_VAR 0 5
35257: PUSH
35258: LD_VAR 0 2
35262: PPUSH
35263: CALL_OW 250
35267: ST_TO_ADDR
// y := GetY ( building ) ;
35268: LD_ADDR_VAR 0 6
35272: PUSH
35273: LD_VAR 0 2
35277: PPUSH
35278: CALL_OW 251
35282: ST_TO_ADDR
// for i := 0 to 5 do
35283: LD_ADDR_VAR 0 4
35287: PUSH
35288: DOUBLE
35289: LD_INT 0
35291: DEC
35292: ST_TO_ADDR
35293: LD_INT 5
35295: PUSH
35296: FOR_TO
35297: IFFALSE 35409
// begin _x := ShiftX ( x , i , 3 ) ;
35299: LD_ADDR_VAR 0 7
35303: PUSH
35304: LD_VAR 0 5
35308: PPUSH
35309: LD_VAR 0 4
35313: PPUSH
35314: LD_INT 3
35316: PPUSH
35317: CALL_OW 272
35321: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35322: LD_ADDR_VAR 0 8
35326: PUSH
35327: LD_VAR 0 6
35331: PPUSH
35332: LD_VAR 0 4
35336: PPUSH
35337: LD_INT 3
35339: PPUSH
35340: CALL_OW 273
35344: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35345: LD_VAR 0 7
35349: PPUSH
35350: LD_VAR 0 8
35354: PPUSH
35355: CALL_OW 488
35359: NOT
35360: IFFALSE 35364
// continue ;
35362: GO 35296
// if HexInfo ( _x , _y ) = 0 then
35364: LD_VAR 0 7
35368: PPUSH
35369: LD_VAR 0 8
35373: PPUSH
35374: CALL_OW 428
35378: PUSH
35379: LD_INT 0
35381: EQUAL
35382: IFFALSE 35407
// begin ComMoveXY ( unit , _x , _y ) ;
35384: LD_VAR 0 1
35388: PPUSH
35389: LD_VAR 0 7
35393: PPUSH
35394: LD_VAR 0 8
35398: PPUSH
35399: CALL_OW 111
// exit ;
35403: POP
35404: POP
35405: GO 35411
// end ; end ;
35407: GO 35296
35409: POP
35410: POP
// end ;
35411: LD_VAR 0 3
35415: RET
// export function ScanBase ( side , base_area ) ; begin
35416: LD_INT 0
35418: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35419: LD_ADDR_VAR 0 3
35423: PUSH
35424: LD_VAR 0 2
35428: PPUSH
35429: LD_INT 81
35431: PUSH
35432: LD_VAR 0 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PPUSH
35441: CALL_OW 70
35445: ST_TO_ADDR
// end ;
35446: LD_VAR 0 3
35450: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35451: LD_INT 0
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
// result := false ;
35457: LD_ADDR_VAR 0 2
35461: PUSH
35462: LD_INT 0
35464: ST_TO_ADDR
// side := GetSide ( unit ) ;
35465: LD_ADDR_VAR 0 3
35469: PUSH
35470: LD_VAR 0 1
35474: PPUSH
35475: CALL_OW 255
35479: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35480: LD_ADDR_VAR 0 4
35484: PUSH
35485: LD_VAR 0 1
35489: PPUSH
35490: CALL_OW 248
35494: ST_TO_ADDR
// case nat of 1 :
35495: LD_VAR 0 4
35499: PUSH
35500: LD_INT 1
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35508
35506: GO 35519
35508: POP
// tech := tech_lassight ; 2 :
35509: LD_ADDR_VAR 0 5
35513: PUSH
35514: LD_INT 12
35516: ST_TO_ADDR
35517: GO 35558
35519: LD_INT 2
35521: DOUBLE
35522: EQUAL
35523: IFTRUE 35527
35525: GO 35538
35527: POP
// tech := tech_mortar ; 3 :
35528: LD_ADDR_VAR 0 5
35532: PUSH
35533: LD_INT 41
35535: ST_TO_ADDR
35536: GO 35558
35538: LD_INT 3
35540: DOUBLE
35541: EQUAL
35542: IFTRUE 35546
35544: GO 35557
35546: POP
// tech := tech_bazooka ; end ;
35547: LD_ADDR_VAR 0 5
35551: PUSH
35552: LD_INT 44
35554: ST_TO_ADDR
35555: GO 35558
35557: POP
// if Researched ( side , tech ) then
35558: LD_VAR 0 3
35562: PPUSH
35563: LD_VAR 0 5
35567: PPUSH
35568: CALL_OW 325
35572: IFFALSE 35599
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35574: LD_ADDR_VAR 0 2
35578: PUSH
35579: LD_INT 5
35581: PUSH
35582: LD_INT 8
35584: PUSH
35585: LD_INT 9
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: PUSH
35593: LD_VAR 0 4
35597: ARRAY
35598: ST_TO_ADDR
// end ;
35599: LD_VAR 0 2
35603: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35604: LD_INT 0
35606: PPUSH
35607: PPUSH
35608: PPUSH
// if not mines then
35609: LD_VAR 0 2
35613: NOT
35614: IFFALSE 35618
// exit ;
35616: GO 35762
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35618: LD_ADDR_VAR 0 5
35622: PUSH
35623: LD_INT 81
35625: PUSH
35626: LD_VAR 0 1
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 3
35637: PUSH
35638: LD_INT 21
35640: PUSH
35641: LD_INT 3
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PPUSH
35656: CALL_OW 69
35660: ST_TO_ADDR
// for i in mines do
35661: LD_ADDR_VAR 0 4
35665: PUSH
35666: LD_VAR 0 2
35670: PUSH
35671: FOR_IN
35672: IFFALSE 35760
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35674: LD_VAR 0 4
35678: PUSH
35679: LD_INT 1
35681: ARRAY
35682: PPUSH
35683: LD_VAR 0 4
35687: PUSH
35688: LD_INT 2
35690: ARRAY
35691: PPUSH
35692: CALL_OW 458
35696: NOT
35697: IFFALSE 35701
// continue ;
35699: GO 35671
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35701: LD_VAR 0 4
35705: PUSH
35706: LD_INT 1
35708: ARRAY
35709: PPUSH
35710: LD_VAR 0 4
35714: PUSH
35715: LD_INT 2
35717: ARRAY
35718: PPUSH
35719: CALL_OW 428
35723: PUSH
35724: LD_VAR 0 5
35728: IN
35729: IFFALSE 35758
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35731: LD_VAR 0 4
35735: PUSH
35736: LD_INT 1
35738: ARRAY
35739: PPUSH
35740: LD_VAR 0 4
35744: PUSH
35745: LD_INT 2
35747: ARRAY
35748: PPUSH
35749: LD_VAR 0 1
35753: PPUSH
35754: CALL_OW 456
// end ;
35758: GO 35671
35760: POP
35761: POP
// end ;
35762: LD_VAR 0 3
35766: RET
// export function Count ( array ) ; begin
35767: LD_INT 0
35769: PPUSH
// result := array + 0 ;
35770: LD_ADDR_VAR 0 2
35774: PUSH
35775: LD_VAR 0 1
35779: PUSH
35780: LD_INT 0
35782: PLUS
35783: ST_TO_ADDR
// end ;
35784: LD_VAR 0 2
35788: RET
// export function IsEmpty ( building ) ; begin
35789: LD_INT 0
35791: PPUSH
// if not building then
35792: LD_VAR 0 1
35796: NOT
35797: IFFALSE 35801
// exit ;
35799: GO 35844
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35801: LD_ADDR_VAR 0 2
35805: PUSH
35806: LD_VAR 0 1
35810: PUSH
35811: LD_INT 22
35813: PUSH
35814: LD_VAR 0 1
35818: PPUSH
35819: CALL_OW 255
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 58
35830: PUSH
35831: EMPTY
35832: LIST
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PPUSH
35838: CALL_OW 69
35842: IN
35843: ST_TO_ADDR
// end ;
35844: LD_VAR 0 2
35848: RET
// export function IsNotFull ( building ) ; var places ; begin
35849: LD_INT 0
35851: PPUSH
35852: PPUSH
// if not building then
35853: LD_VAR 0 1
35857: NOT
35858: IFFALSE 35862
// exit ;
35860: GO 35890
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35862: LD_ADDR_VAR 0 2
35866: PUSH
35867: LD_VAR 0 1
35871: PPUSH
35872: LD_INT 3
35874: PUSH
35875: LD_INT 62
35877: PUSH
35878: EMPTY
35879: LIST
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PPUSH
35885: CALL_OW 72
35889: ST_TO_ADDR
// end ;
35890: LD_VAR 0 2
35894: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35895: LD_INT 0
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
// tmp := [ ] ;
35901: LD_ADDR_VAR 0 3
35905: PUSH
35906: EMPTY
35907: ST_TO_ADDR
// list := [ ] ;
35908: LD_ADDR_VAR 0 5
35912: PUSH
35913: EMPTY
35914: ST_TO_ADDR
// for i = 16 to 25 do
35915: LD_ADDR_VAR 0 4
35919: PUSH
35920: DOUBLE
35921: LD_INT 16
35923: DEC
35924: ST_TO_ADDR
35925: LD_INT 25
35927: PUSH
35928: FOR_TO
35929: IFFALSE 36002
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35931: LD_ADDR_VAR 0 3
35935: PUSH
35936: LD_VAR 0 3
35940: PUSH
35941: LD_INT 22
35943: PUSH
35944: LD_VAR 0 1
35948: PPUSH
35949: CALL_OW 255
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 91
35960: PUSH
35961: LD_VAR 0 1
35965: PUSH
35966: LD_INT 6
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 30
35976: PUSH
35977: LD_VAR 0 4
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: PUSH
35991: EMPTY
35992: LIST
35993: PPUSH
35994: CALL_OW 69
35998: ADD
35999: ST_TO_ADDR
36000: GO 35928
36002: POP
36003: POP
// for i = 1 to tmp do
36004: LD_ADDR_VAR 0 4
36008: PUSH
36009: DOUBLE
36010: LD_INT 1
36012: DEC
36013: ST_TO_ADDR
36014: LD_VAR 0 3
36018: PUSH
36019: FOR_TO
36020: IFFALSE 36108
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36022: LD_ADDR_VAR 0 5
36026: PUSH
36027: LD_VAR 0 5
36031: PUSH
36032: LD_VAR 0 3
36036: PUSH
36037: LD_VAR 0 4
36041: ARRAY
36042: PPUSH
36043: CALL_OW 266
36047: PUSH
36048: LD_VAR 0 3
36052: PUSH
36053: LD_VAR 0 4
36057: ARRAY
36058: PPUSH
36059: CALL_OW 250
36063: PUSH
36064: LD_VAR 0 3
36068: PUSH
36069: LD_VAR 0 4
36073: ARRAY
36074: PPUSH
36075: CALL_OW 251
36079: PUSH
36080: LD_VAR 0 3
36084: PUSH
36085: LD_VAR 0 4
36089: ARRAY
36090: PPUSH
36091: CALL_OW 254
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: PUSH
36102: EMPTY
36103: LIST
36104: ADD
36105: ST_TO_ADDR
36106: GO 36019
36108: POP
36109: POP
// result := list ;
36110: LD_ADDR_VAR 0 2
36114: PUSH
36115: LD_VAR 0 5
36119: ST_TO_ADDR
// end ;
36120: LD_VAR 0 2
36124: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36125: LD_INT 0
36127: PPUSH
36128: PPUSH
36129: PPUSH
36130: PPUSH
36131: PPUSH
36132: PPUSH
36133: PPUSH
// if not factory then
36134: LD_VAR 0 1
36138: NOT
36139: IFFALSE 36143
// exit ;
36141: GO 36746
// if control = control_apeman then
36143: LD_VAR 0 4
36147: PUSH
36148: LD_INT 5
36150: EQUAL
36151: IFFALSE 36260
// begin tmp := UnitsInside ( factory ) ;
36153: LD_ADDR_VAR 0 8
36157: PUSH
36158: LD_VAR 0 1
36162: PPUSH
36163: CALL_OW 313
36167: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36168: LD_VAR 0 8
36172: PPUSH
36173: LD_INT 25
36175: PUSH
36176: LD_INT 12
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PPUSH
36183: CALL_OW 72
36187: NOT
36188: IFFALSE 36198
// control := control_manual ;
36190: LD_ADDR_VAR 0 4
36194: PUSH
36195: LD_INT 1
36197: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36198: LD_ADDR_VAR 0 8
36202: PUSH
36203: LD_VAR 0 1
36207: PPUSH
36208: CALL 35895 0 1
36212: ST_TO_ADDR
// if tmp then
36213: LD_VAR 0 8
36217: IFFALSE 36260
// begin for i in tmp do
36219: LD_ADDR_VAR 0 7
36223: PUSH
36224: LD_VAR 0 8
36228: PUSH
36229: FOR_IN
36230: IFFALSE 36258
// if i [ 1 ] = b_ext_radio then
36232: LD_VAR 0 7
36236: PUSH
36237: LD_INT 1
36239: ARRAY
36240: PUSH
36241: LD_INT 22
36243: EQUAL
36244: IFFALSE 36256
// begin control := control_remote ;
36246: LD_ADDR_VAR 0 4
36250: PUSH
36251: LD_INT 2
36253: ST_TO_ADDR
// break ;
36254: GO 36258
// end ;
36256: GO 36229
36258: POP
36259: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36260: LD_VAR 0 1
36264: PPUSH
36265: LD_VAR 0 2
36269: PPUSH
36270: LD_VAR 0 3
36274: PPUSH
36275: LD_VAR 0 4
36279: PPUSH
36280: LD_VAR 0 5
36284: PPUSH
36285: CALL_OW 448
36289: IFFALSE 36324
// begin result := [ chassis , engine , control , weapon ] ;
36291: LD_ADDR_VAR 0 6
36295: PUSH
36296: LD_VAR 0 2
36300: PUSH
36301: LD_VAR 0 3
36305: PUSH
36306: LD_VAR 0 4
36310: PUSH
36311: LD_VAR 0 5
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: ST_TO_ADDR
// exit ;
36322: GO 36746
// end ; _chassis := AvailableChassisList ( factory ) ;
36324: LD_ADDR_VAR 0 9
36328: PUSH
36329: LD_VAR 0 1
36333: PPUSH
36334: CALL_OW 475
36338: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36339: LD_ADDR_VAR 0 11
36343: PUSH
36344: LD_VAR 0 1
36348: PPUSH
36349: CALL_OW 476
36353: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36354: LD_ADDR_VAR 0 12
36358: PUSH
36359: LD_VAR 0 1
36363: PPUSH
36364: CALL_OW 477
36368: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36369: LD_ADDR_VAR 0 10
36373: PUSH
36374: LD_VAR 0 1
36378: PPUSH
36379: CALL_OW 478
36383: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36384: LD_VAR 0 9
36388: NOT
36389: IFTRUE 36398
36391: PUSH
36392: LD_VAR 0 11
36396: NOT
36397: OR
36398: IFTRUE 36407
36400: PUSH
36401: LD_VAR 0 12
36405: NOT
36406: OR
36407: IFTRUE 36416
36409: PUSH
36410: LD_VAR 0 10
36414: NOT
36415: OR
36416: IFFALSE 36451
// begin result := [ chassis , engine , control , weapon ] ;
36418: LD_ADDR_VAR 0 6
36422: PUSH
36423: LD_VAR 0 2
36427: PUSH
36428: LD_VAR 0 3
36432: PUSH
36433: LD_VAR 0 4
36437: PUSH
36438: LD_VAR 0 5
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: ST_TO_ADDR
// exit ;
36449: GO 36746
// end ; if not chassis in _chassis then
36451: LD_VAR 0 2
36455: PUSH
36456: LD_VAR 0 9
36460: IN
36461: NOT
36462: IFFALSE 36488
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36464: LD_ADDR_VAR 0 2
36468: PUSH
36469: LD_VAR 0 9
36473: PUSH
36474: LD_INT 1
36476: PPUSH
36477: LD_VAR 0 9
36481: PPUSH
36482: CALL_OW 12
36486: ARRAY
36487: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36488: LD_VAR 0 2
36492: PPUSH
36493: LD_VAR 0 3
36497: PPUSH
36498: CALL 36751 0 2
36502: NOT
36503: IFFALSE 36564
// repeat engine := _engine [ 1 ] ;
36505: LD_ADDR_VAR 0 3
36509: PUSH
36510: LD_VAR 0 11
36514: PUSH
36515: LD_INT 1
36517: ARRAY
36518: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36519: LD_ADDR_VAR 0 11
36523: PUSH
36524: LD_VAR 0 11
36528: PPUSH
36529: LD_INT 1
36531: PPUSH
36532: CALL_OW 3
36536: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36537: LD_VAR 0 2
36541: PPUSH
36542: LD_VAR 0 3
36546: PPUSH
36547: CALL 36751 0 2
36551: IFTRUE 36562
36553: PUSH
36554: LD_VAR 0 11
36558: PUSH
36559: EMPTY
36560: EQUAL
36561: OR
36562: IFFALSE 36505
// if not control in _control then
36564: LD_VAR 0 4
36568: PUSH
36569: LD_VAR 0 12
36573: IN
36574: NOT
36575: IFFALSE 36601
// control := _control [ rand ( 1 , _control ) ] ;
36577: LD_ADDR_VAR 0 4
36581: PUSH
36582: LD_VAR 0 12
36586: PUSH
36587: LD_INT 1
36589: PPUSH
36590: LD_VAR 0 12
36594: PPUSH
36595: CALL_OW 12
36599: ARRAY
36600: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36601: LD_VAR 0 2
36605: PPUSH
36606: LD_VAR 0 5
36610: PPUSH
36611: CALL 36973 0 2
36615: NOT
36616: IFFALSE 36677
// repeat weapon := _weapon [ 1 ] ;
36618: LD_ADDR_VAR 0 5
36622: PUSH
36623: LD_VAR 0 10
36627: PUSH
36628: LD_INT 1
36630: ARRAY
36631: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36632: LD_ADDR_VAR 0 10
36636: PUSH
36637: LD_VAR 0 10
36641: PPUSH
36642: LD_INT 1
36644: PPUSH
36645: CALL_OW 3
36649: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36650: LD_VAR 0 2
36654: PPUSH
36655: LD_VAR 0 5
36659: PPUSH
36660: CALL 36973 0 2
36664: IFTRUE 36675
36666: PUSH
36667: LD_VAR 0 10
36671: PUSH
36672: EMPTY
36673: EQUAL
36674: OR
36675: IFFALSE 36618
// result := [ ] ;
36677: LD_ADDR_VAR 0 6
36681: PUSH
36682: EMPTY
36683: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36684: LD_VAR 0 1
36688: PPUSH
36689: LD_VAR 0 2
36693: PPUSH
36694: LD_VAR 0 3
36698: PPUSH
36699: LD_VAR 0 4
36703: PPUSH
36704: LD_VAR 0 5
36708: PPUSH
36709: CALL_OW 448
36713: IFFALSE 36746
// result := [ chassis , engine , control , weapon ] ;
36715: LD_ADDR_VAR 0 6
36719: PUSH
36720: LD_VAR 0 2
36724: PUSH
36725: LD_VAR 0 3
36729: PUSH
36730: LD_VAR 0 4
36734: PUSH
36735: LD_VAR 0 5
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
// end ;
36746: LD_VAR 0 6
36750: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36751: LD_INT 0
36753: PPUSH
// if not chassis or not engine then
36754: LD_VAR 0 1
36758: NOT
36759: IFTRUE 36768
36761: PUSH
36762: LD_VAR 0 2
36766: NOT
36767: OR
36768: IFFALSE 36772
// exit ;
36770: GO 36968
// case engine of engine_solar :
36772: LD_VAR 0 2
36776: PUSH
36777: LD_INT 2
36779: DOUBLE
36780: EQUAL
36781: IFTRUE 36785
36783: GO 36823
36785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36786: LD_ADDR_VAR 0 3
36790: PUSH
36791: LD_INT 11
36793: PUSH
36794: LD_INT 12
36796: PUSH
36797: LD_INT 13
36799: PUSH
36800: LD_INT 14
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: LD_INT 3
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: ST_TO_ADDR
36821: GO 36952
36823: LD_INT 1
36825: DOUBLE
36826: EQUAL
36827: IFTRUE 36831
36829: GO 36893
36831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36832: LD_ADDR_VAR 0 3
36836: PUSH
36837: LD_INT 11
36839: PUSH
36840: LD_INT 12
36842: PUSH
36843: LD_INT 13
36845: PUSH
36846: LD_INT 14
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: LD_INT 3
36857: PUSH
36858: LD_INT 4
36860: PUSH
36861: LD_INT 5
36863: PUSH
36864: LD_INT 21
36866: PUSH
36867: LD_INT 23
36869: PUSH
36870: LD_INT 22
36872: PUSH
36873: LD_INT 24
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
36891: GO 36952
36893: LD_INT 3
36895: DOUBLE
36896: EQUAL
36897: IFTRUE 36901
36899: GO 36951
36901: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36902: LD_ADDR_VAR 0 3
36906: PUSH
36907: LD_INT 13
36909: PUSH
36910: LD_INT 14
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: LD_INT 3
36918: PUSH
36919: LD_INT 4
36921: PUSH
36922: LD_INT 5
36924: PUSH
36925: LD_INT 21
36927: PUSH
36928: LD_INT 22
36930: PUSH
36931: LD_INT 23
36933: PUSH
36934: LD_INT 24
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: ST_TO_ADDR
36949: GO 36952
36951: POP
// result := ( chassis in result ) ;
36952: LD_ADDR_VAR 0 3
36956: PUSH
36957: LD_VAR 0 1
36961: PUSH
36962: LD_VAR 0 3
36966: IN
36967: ST_TO_ADDR
// end ;
36968: LD_VAR 0 3
36972: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36973: LD_INT 0
36975: PPUSH
// if not chassis or not weapon then
36976: LD_VAR 0 1
36980: NOT
36981: IFTRUE 36990
36983: PUSH
36984: LD_VAR 0 2
36988: NOT
36989: OR
36990: IFFALSE 36994
// exit ;
36992: GO 38088
// case weapon of us_machine_gun :
36994: LD_VAR 0 2
36998: PUSH
36999: LD_INT 2
37001: DOUBLE
37002: EQUAL
37003: IFTRUE 37007
37005: GO 37037
37007: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37008: LD_ADDR_VAR 0 3
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: LD_INT 3
37021: PUSH
37022: LD_INT 4
37024: PUSH
37025: LD_INT 5
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: ST_TO_ADDR
37035: GO 38072
37037: LD_INT 3
37039: DOUBLE
37040: EQUAL
37041: IFTRUE 37045
37043: GO 37075
37045: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37046: LD_ADDR_VAR 0 3
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: LD_INT 3
37059: PUSH
37060: LD_INT 4
37062: PUSH
37063: LD_INT 5
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: ST_TO_ADDR
37073: GO 38072
37075: LD_INT 11
37077: DOUBLE
37078: EQUAL
37079: IFTRUE 37083
37081: GO 37113
37083: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37084: LD_ADDR_VAR 0 3
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 3
37097: PUSH
37098: LD_INT 4
37100: PUSH
37101: LD_INT 5
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: ST_TO_ADDR
37111: GO 38072
37113: LD_INT 4
37115: DOUBLE
37116: EQUAL
37117: IFTRUE 37121
37119: GO 37147
37121: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37122: LD_ADDR_VAR 0 3
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: LD_INT 3
37132: PUSH
37133: LD_INT 4
37135: PUSH
37136: LD_INT 5
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: ST_TO_ADDR
37145: GO 38072
37147: LD_INT 5
37149: DOUBLE
37150: EQUAL
37151: IFTRUE 37155
37153: GO 37181
37155: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37156: LD_ADDR_VAR 0 3
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 3
37166: PUSH
37167: LD_INT 4
37169: PUSH
37170: LD_INT 5
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
37179: GO 38072
37181: LD_INT 9
37183: DOUBLE
37184: EQUAL
37185: IFTRUE 37189
37187: GO 37215
37189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37190: LD_ADDR_VAR 0 3
37194: PUSH
37195: LD_INT 2
37197: PUSH
37198: LD_INT 3
37200: PUSH
37201: LD_INT 4
37203: PUSH
37204: LD_INT 5
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
37213: GO 38072
37215: LD_INT 7
37217: DOUBLE
37218: EQUAL
37219: IFTRUE 37223
37221: GO 37249
37223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37224: LD_ADDR_VAR 0 3
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: LD_INT 3
37234: PUSH
37235: LD_INT 4
37237: PUSH
37238: LD_INT 5
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
37247: GO 38072
37249: LD_INT 12
37251: DOUBLE
37252: EQUAL
37253: IFTRUE 37257
37255: GO 37283
37257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37258: LD_ADDR_VAR 0 3
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: LD_INT 3
37268: PUSH
37269: LD_INT 4
37271: PUSH
37272: LD_INT 5
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: ST_TO_ADDR
37281: GO 38072
37283: LD_INT 13
37285: DOUBLE
37286: EQUAL
37287: IFTRUE 37291
37289: GO 37317
37291: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37292: LD_ADDR_VAR 0 3
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 3
37302: PUSH
37303: LD_INT 4
37305: PUSH
37306: LD_INT 5
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: ST_TO_ADDR
37315: GO 38072
37317: LD_INT 14
37319: DOUBLE
37320: EQUAL
37321: IFTRUE 37325
37323: GO 37343
37325: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37326: LD_ADDR_VAR 0 3
37330: PUSH
37331: LD_INT 4
37333: PUSH
37334: LD_INT 5
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: ST_TO_ADDR
37341: GO 38072
37343: LD_INT 6
37345: DOUBLE
37346: EQUAL
37347: IFTRUE 37351
37349: GO 37369
37351: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37352: LD_ADDR_VAR 0 3
37356: PUSH
37357: LD_INT 4
37359: PUSH
37360: LD_INT 5
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: ST_TO_ADDR
37367: GO 38072
37369: LD_INT 10
37371: DOUBLE
37372: EQUAL
37373: IFTRUE 37377
37375: GO 37395
37377: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37378: LD_ADDR_VAR 0 3
37382: PUSH
37383: LD_INT 4
37385: PUSH
37386: LD_INT 5
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: ST_TO_ADDR
37393: GO 38072
37395: LD_INT 22
37397: DOUBLE
37398: EQUAL
37399: IFTRUE 37403
37401: GO 37429
37403: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37404: LD_ADDR_VAR 0 3
37408: PUSH
37409: LD_INT 11
37411: PUSH
37412: LD_INT 12
37414: PUSH
37415: LD_INT 13
37417: PUSH
37418: LD_INT 14
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: ST_TO_ADDR
37427: GO 38072
37429: LD_INT 23
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37437
37435: GO 37463
37437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37438: LD_ADDR_VAR 0 3
37442: PUSH
37443: LD_INT 11
37445: PUSH
37446: LD_INT 12
37448: PUSH
37449: LD_INT 13
37451: PUSH
37452: LD_INT 14
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: ST_TO_ADDR
37461: GO 38072
37463: LD_INT 24
37465: DOUBLE
37466: EQUAL
37467: IFTRUE 37471
37469: GO 37497
37471: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37472: LD_ADDR_VAR 0 3
37476: PUSH
37477: LD_INT 11
37479: PUSH
37480: LD_INT 12
37482: PUSH
37483: LD_INT 13
37485: PUSH
37486: LD_INT 14
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: ST_TO_ADDR
37495: GO 38072
37497: LD_INT 30
37499: DOUBLE
37500: EQUAL
37501: IFTRUE 37505
37503: GO 37531
37505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37506: LD_ADDR_VAR 0 3
37510: PUSH
37511: LD_INT 11
37513: PUSH
37514: LD_INT 12
37516: PUSH
37517: LD_INT 13
37519: PUSH
37520: LD_INT 14
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: ST_TO_ADDR
37529: GO 38072
37531: LD_INT 25
37533: DOUBLE
37534: EQUAL
37535: IFTRUE 37539
37537: GO 37557
37539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37540: LD_ADDR_VAR 0 3
37544: PUSH
37545: LD_INT 13
37547: PUSH
37548: LD_INT 14
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: ST_TO_ADDR
37555: GO 38072
37557: LD_INT 27
37559: DOUBLE
37560: EQUAL
37561: IFTRUE 37565
37563: GO 37583
37565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37566: LD_ADDR_VAR 0 3
37570: PUSH
37571: LD_INT 13
37573: PUSH
37574: LD_INT 14
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: ST_TO_ADDR
37581: GO 38072
37583: LD_INT 92
37585: DOUBLE
37586: EQUAL
37587: IFTRUE 37591
37589: GO 37617
37591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37592: LD_ADDR_VAR 0 3
37596: PUSH
37597: LD_INT 11
37599: PUSH
37600: LD_INT 12
37602: PUSH
37603: LD_INT 13
37605: PUSH
37606: LD_INT 14
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: ST_TO_ADDR
37615: GO 38072
37617: LD_INT 28
37619: DOUBLE
37620: EQUAL
37621: IFTRUE 37625
37623: GO 37643
37625: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37626: LD_ADDR_VAR 0 3
37630: PUSH
37631: LD_INT 13
37633: PUSH
37634: LD_INT 14
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: ST_TO_ADDR
37641: GO 38072
37643: LD_INT 29
37645: DOUBLE
37646: EQUAL
37647: IFTRUE 37651
37649: GO 37669
37651: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37652: LD_ADDR_VAR 0 3
37656: PUSH
37657: LD_INT 13
37659: PUSH
37660: LD_INT 14
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: ST_TO_ADDR
37667: GO 38072
37669: LD_INT 31
37671: DOUBLE
37672: EQUAL
37673: IFTRUE 37677
37675: GO 37695
37677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37678: LD_ADDR_VAR 0 3
37682: PUSH
37683: LD_INT 13
37685: PUSH
37686: LD_INT 14
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: ST_TO_ADDR
37693: GO 38072
37695: LD_INT 26
37697: DOUBLE
37698: EQUAL
37699: IFTRUE 37703
37701: GO 37721
37703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37704: LD_ADDR_VAR 0 3
37708: PUSH
37709: LD_INT 13
37711: PUSH
37712: LD_INT 14
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: ST_TO_ADDR
37719: GO 38072
37721: LD_INT 42
37723: DOUBLE
37724: EQUAL
37725: IFTRUE 37729
37727: GO 37755
37729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37730: LD_ADDR_VAR 0 3
37734: PUSH
37735: LD_INT 21
37737: PUSH
37738: LD_INT 22
37740: PUSH
37741: LD_INT 23
37743: PUSH
37744: LD_INT 24
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: ST_TO_ADDR
37753: GO 38072
37755: LD_INT 43
37757: DOUBLE
37758: EQUAL
37759: IFTRUE 37763
37761: GO 37789
37763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37764: LD_ADDR_VAR 0 3
37768: PUSH
37769: LD_INT 21
37771: PUSH
37772: LD_INT 22
37774: PUSH
37775: LD_INT 23
37777: PUSH
37778: LD_INT 24
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: ST_TO_ADDR
37787: GO 38072
37789: LD_INT 44
37791: DOUBLE
37792: EQUAL
37793: IFTRUE 37797
37795: GO 37823
37797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37798: LD_ADDR_VAR 0 3
37802: PUSH
37803: LD_INT 21
37805: PUSH
37806: LD_INT 22
37808: PUSH
37809: LD_INT 23
37811: PUSH
37812: LD_INT 24
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: ST_TO_ADDR
37821: GO 38072
37823: LD_INT 45
37825: DOUBLE
37826: EQUAL
37827: IFTRUE 37831
37829: GO 37857
37831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37832: LD_ADDR_VAR 0 3
37836: PUSH
37837: LD_INT 21
37839: PUSH
37840: LD_INT 22
37842: PUSH
37843: LD_INT 23
37845: PUSH
37846: LD_INT 24
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: ST_TO_ADDR
37855: GO 38072
37857: LD_INT 49
37859: DOUBLE
37860: EQUAL
37861: IFTRUE 37865
37863: GO 37891
37865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37866: LD_ADDR_VAR 0 3
37870: PUSH
37871: LD_INT 21
37873: PUSH
37874: LD_INT 22
37876: PUSH
37877: LD_INT 23
37879: PUSH
37880: LD_INT 24
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: ST_TO_ADDR
37889: GO 38072
37891: LD_INT 51
37893: DOUBLE
37894: EQUAL
37895: IFTRUE 37899
37897: GO 37925
37899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37900: LD_ADDR_VAR 0 3
37904: PUSH
37905: LD_INT 21
37907: PUSH
37908: LD_INT 22
37910: PUSH
37911: LD_INT 23
37913: PUSH
37914: LD_INT 24
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: ST_TO_ADDR
37923: GO 38072
37925: LD_INT 52
37927: DOUBLE
37928: EQUAL
37929: IFTRUE 37933
37931: GO 37959
37933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37934: LD_ADDR_VAR 0 3
37938: PUSH
37939: LD_INT 21
37941: PUSH
37942: LD_INT 22
37944: PUSH
37945: LD_INT 23
37947: PUSH
37948: LD_INT 24
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: ST_TO_ADDR
37957: GO 38072
37959: LD_INT 53
37961: DOUBLE
37962: EQUAL
37963: IFTRUE 37967
37965: GO 37985
37967: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37968: LD_ADDR_VAR 0 3
37972: PUSH
37973: LD_INT 23
37975: PUSH
37976: LD_INT 24
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: ST_TO_ADDR
37983: GO 38072
37985: LD_INT 46
37987: DOUBLE
37988: EQUAL
37989: IFTRUE 37993
37991: GO 38011
37993: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37994: LD_ADDR_VAR 0 3
37998: PUSH
37999: LD_INT 23
38001: PUSH
38002: LD_INT 24
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: ST_TO_ADDR
38009: GO 38072
38011: LD_INT 47
38013: DOUBLE
38014: EQUAL
38015: IFTRUE 38019
38017: GO 38037
38019: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
38020: LD_ADDR_VAR 0 3
38024: PUSH
38025: LD_INT 23
38027: PUSH
38028: LD_INT 24
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: ST_TO_ADDR
38035: GO 38072
38037: LD_INT 98
38039: DOUBLE
38040: EQUAL
38041: IFTRUE 38045
38043: GO 38071
38045: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_INT 21
38053: PUSH
38054: LD_INT 22
38056: PUSH
38057: LD_INT 23
38059: PUSH
38060: LD_INT 24
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
38069: GO 38072
38071: POP
// result := ( chassis in result ) ;
38072: LD_ADDR_VAR 0 3
38076: PUSH
38077: LD_VAR 0 1
38081: PUSH
38082: LD_VAR 0 3
38086: IN
38087: ST_TO_ADDR
// end ;
38088: LD_VAR 0 3
38092: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38093: LD_INT 0
38095: PPUSH
38096: PPUSH
38097: PPUSH
38098: PPUSH
38099: PPUSH
38100: PPUSH
38101: PPUSH
// result := array ;
38102: LD_ADDR_VAR 0 5
38106: PUSH
38107: LD_VAR 0 1
38111: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38112: LD_VAR 0 1
38116: NOT
38117: IFTRUE 38126
38119: PUSH
38120: LD_VAR 0 2
38124: NOT
38125: OR
38126: IFTRUE 38135
38128: PUSH
38129: LD_VAR 0 3
38133: NOT
38134: OR
38135: IFTRUE 38149
38137: PUSH
38138: LD_VAR 0 2
38142: PUSH
38143: LD_VAR 0 1
38147: GREATER
38148: OR
38149: IFTRUE 38163
38151: PUSH
38152: LD_VAR 0 3
38156: PUSH
38157: LD_VAR 0 1
38161: GREATER
38162: OR
38163: IFFALSE 38167
// exit ;
38165: GO 38463
// if direction then
38167: LD_VAR 0 4
38171: IFFALSE 38235
// begin d := 1 ;
38173: LD_ADDR_VAR 0 9
38177: PUSH
38178: LD_INT 1
38180: ST_TO_ADDR
// if i_from > i_to then
38181: LD_VAR 0 2
38185: PUSH
38186: LD_VAR 0 3
38190: GREATER
38191: IFFALSE 38217
// length := ( array - i_from ) + i_to else
38193: LD_ADDR_VAR 0 11
38197: PUSH
38198: LD_VAR 0 1
38202: PUSH
38203: LD_VAR 0 2
38207: MINUS
38208: PUSH
38209: LD_VAR 0 3
38213: PLUS
38214: ST_TO_ADDR
38215: GO 38233
// length := i_to - i_from ;
38217: LD_ADDR_VAR 0 11
38221: PUSH
38222: LD_VAR 0 3
38226: PUSH
38227: LD_VAR 0 2
38231: MINUS
38232: ST_TO_ADDR
// end else
38233: GO 38296
// begin d := - 1 ;
38235: LD_ADDR_VAR 0 9
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: ST_TO_ADDR
// if i_from > i_to then
38244: LD_VAR 0 2
38248: PUSH
38249: LD_VAR 0 3
38253: GREATER
38254: IFFALSE 38274
// length := i_from - i_to else
38256: LD_ADDR_VAR 0 11
38260: PUSH
38261: LD_VAR 0 2
38265: PUSH
38266: LD_VAR 0 3
38270: MINUS
38271: ST_TO_ADDR
38272: GO 38296
// length := ( array - i_to ) + i_from ;
38274: LD_ADDR_VAR 0 11
38278: PUSH
38279: LD_VAR 0 1
38283: PUSH
38284: LD_VAR 0 3
38288: MINUS
38289: PUSH
38290: LD_VAR 0 2
38294: PLUS
38295: ST_TO_ADDR
// end ; if not length then
38296: LD_VAR 0 11
38300: NOT
38301: IFFALSE 38305
// exit ;
38303: GO 38463
// tmp := array ;
38305: LD_ADDR_VAR 0 10
38309: PUSH
38310: LD_VAR 0 1
38314: ST_TO_ADDR
// for i = 1 to length do
38315: LD_ADDR_VAR 0 6
38319: PUSH
38320: DOUBLE
38321: LD_INT 1
38323: DEC
38324: ST_TO_ADDR
38325: LD_VAR 0 11
38329: PUSH
38330: FOR_TO
38331: IFFALSE 38451
// begin for j = 1 to array do
38333: LD_ADDR_VAR 0 7
38337: PUSH
38338: DOUBLE
38339: LD_INT 1
38341: DEC
38342: ST_TO_ADDR
38343: LD_VAR 0 1
38347: PUSH
38348: FOR_TO
38349: IFFALSE 38437
// begin k := j + d ;
38351: LD_ADDR_VAR 0 8
38355: PUSH
38356: LD_VAR 0 7
38360: PUSH
38361: LD_VAR 0 9
38365: PLUS
38366: ST_TO_ADDR
// if k > array then
38367: LD_VAR 0 8
38371: PUSH
38372: LD_VAR 0 1
38376: GREATER
38377: IFFALSE 38387
// k := 1 ;
38379: LD_ADDR_VAR 0 8
38383: PUSH
38384: LD_INT 1
38386: ST_TO_ADDR
// if not k then
38387: LD_VAR 0 8
38391: NOT
38392: IFFALSE 38404
// k := array ;
38394: LD_ADDR_VAR 0 8
38398: PUSH
38399: LD_VAR 0 1
38403: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38404: LD_ADDR_VAR 0 10
38408: PUSH
38409: LD_VAR 0 10
38413: PPUSH
38414: LD_VAR 0 8
38418: PPUSH
38419: LD_VAR 0 1
38423: PUSH
38424: LD_VAR 0 7
38428: ARRAY
38429: PPUSH
38430: CALL_OW 1
38434: ST_TO_ADDR
// end ;
38435: GO 38348
38437: POP
38438: POP
// array := tmp ;
38439: LD_ADDR_VAR 0 1
38443: PUSH
38444: LD_VAR 0 10
38448: ST_TO_ADDR
// end ;
38449: GO 38330
38451: POP
38452: POP
// result := array ;
38453: LD_ADDR_VAR 0 5
38457: PUSH
38458: LD_VAR 0 1
38462: ST_TO_ADDR
// end ;
38463: LD_VAR 0 5
38467: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38468: LD_INT 0
38470: PPUSH
38471: PPUSH
// result := 0 ;
38472: LD_ADDR_VAR 0 3
38476: PUSH
38477: LD_INT 0
38479: ST_TO_ADDR
// if not array or not value in array then
38480: LD_VAR 0 1
38484: NOT
38485: IFTRUE 38500
38487: PUSH
38488: LD_VAR 0 2
38492: PUSH
38493: LD_VAR 0 1
38497: IN
38498: NOT
38499: OR
38500: IFFALSE 38504
// exit ;
38502: GO 38558
// for i = 1 to array do
38504: LD_ADDR_VAR 0 4
38508: PUSH
38509: DOUBLE
38510: LD_INT 1
38512: DEC
38513: ST_TO_ADDR
38514: LD_VAR 0 1
38518: PUSH
38519: FOR_TO
38520: IFFALSE 38556
// if value = array [ i ] then
38522: LD_VAR 0 2
38526: PUSH
38527: LD_VAR 0 1
38531: PUSH
38532: LD_VAR 0 4
38536: ARRAY
38537: EQUAL
38538: IFFALSE 38554
// begin result := i ;
38540: LD_ADDR_VAR 0 3
38544: PUSH
38545: LD_VAR 0 4
38549: ST_TO_ADDR
// exit ;
38550: POP
38551: POP
38552: GO 38558
// end ;
38554: GO 38519
38556: POP
38557: POP
// end ;
38558: LD_VAR 0 3
38562: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38563: LD_INT 0
38565: PPUSH
// vc_chassis := chassis ;
38566: LD_ADDR_OWVAR 37
38570: PUSH
38571: LD_VAR 0 1
38575: ST_TO_ADDR
// vc_engine := engine ;
38576: LD_ADDR_OWVAR 39
38580: PUSH
38581: LD_VAR 0 2
38585: ST_TO_ADDR
// vc_control := control ;
38586: LD_ADDR_OWVAR 38
38590: PUSH
38591: LD_VAR 0 3
38595: ST_TO_ADDR
// vc_weapon := weapon ;
38596: LD_ADDR_OWVAR 40
38600: PUSH
38601: LD_VAR 0 4
38605: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38606: LD_ADDR_OWVAR 41
38610: PUSH
38611: LD_VAR 0 5
38615: ST_TO_ADDR
// end ;
38616: LD_VAR 0 6
38620: RET
// export function WantPlant ( unit ) ; var task ; begin
38621: LD_INT 0
38623: PPUSH
38624: PPUSH
// result := false ;
38625: LD_ADDR_VAR 0 2
38629: PUSH
38630: LD_INT 0
38632: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38633: LD_ADDR_VAR 0 3
38637: PUSH
38638: LD_VAR 0 1
38642: PPUSH
38643: CALL_OW 437
38647: ST_TO_ADDR
// if task then
38648: LD_VAR 0 3
38652: IFFALSE 38680
// if task [ 1 ] [ 1 ] = p then
38654: LD_VAR 0 3
38658: PUSH
38659: LD_INT 1
38661: ARRAY
38662: PUSH
38663: LD_INT 1
38665: ARRAY
38666: PUSH
38667: LD_STRING p
38669: EQUAL
38670: IFFALSE 38680
// result := true ;
38672: LD_ADDR_VAR 0 2
38676: PUSH
38677: LD_INT 1
38679: ST_TO_ADDR
// end ;
38680: LD_VAR 0 2
38684: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38685: LD_INT 0
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
// if pos < 1 then
38691: LD_VAR 0 2
38695: PUSH
38696: LD_INT 1
38698: LESS
38699: IFFALSE 38703
// exit ;
38701: GO 39006
// if pos = 1 then
38703: LD_VAR 0 2
38707: PUSH
38708: LD_INT 1
38710: EQUAL
38711: IFFALSE 38744
// result := Replace ( arr , pos [ 1 ] , value ) else
38713: LD_ADDR_VAR 0 4
38717: PUSH
38718: LD_VAR 0 1
38722: PPUSH
38723: LD_VAR 0 2
38727: PUSH
38728: LD_INT 1
38730: ARRAY
38731: PPUSH
38732: LD_VAR 0 3
38736: PPUSH
38737: CALL_OW 1
38741: ST_TO_ADDR
38742: GO 39006
// begin tmp := arr ;
38744: LD_ADDR_VAR 0 6
38748: PUSH
38749: LD_VAR 0 1
38753: ST_TO_ADDR
// s_arr := [ tmp ] ;
38754: LD_ADDR_VAR 0 7
38758: PUSH
38759: LD_VAR 0 6
38763: PUSH
38764: EMPTY
38765: LIST
38766: ST_TO_ADDR
// for i = 1 to pos - 1 do
38767: LD_ADDR_VAR 0 5
38771: PUSH
38772: DOUBLE
38773: LD_INT 1
38775: DEC
38776: ST_TO_ADDR
38777: LD_VAR 0 2
38781: PUSH
38782: LD_INT 1
38784: MINUS
38785: PUSH
38786: FOR_TO
38787: IFFALSE 38832
// begin tmp := tmp [ pos [ i ] ] ;
38789: LD_ADDR_VAR 0 6
38793: PUSH
38794: LD_VAR 0 6
38798: PUSH
38799: LD_VAR 0 2
38803: PUSH
38804: LD_VAR 0 5
38808: ARRAY
38809: ARRAY
38810: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38811: LD_ADDR_VAR 0 7
38815: PUSH
38816: LD_VAR 0 7
38820: PUSH
38821: LD_VAR 0 6
38825: PUSH
38826: EMPTY
38827: LIST
38828: ADD
38829: ST_TO_ADDR
// end ;
38830: GO 38786
38832: POP
38833: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38834: LD_ADDR_VAR 0 6
38838: PUSH
38839: LD_VAR 0 6
38843: PPUSH
38844: LD_VAR 0 2
38848: PUSH
38849: LD_VAR 0 2
38853: ARRAY
38854: PPUSH
38855: LD_VAR 0 3
38859: PPUSH
38860: CALL_OW 1
38864: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38865: LD_ADDR_VAR 0 7
38869: PUSH
38870: LD_VAR 0 7
38874: PPUSH
38875: LD_VAR 0 7
38879: PPUSH
38880: LD_VAR 0 6
38884: PPUSH
38885: CALL_OW 1
38889: ST_TO_ADDR
// for i = s_arr downto 2 do
38890: LD_ADDR_VAR 0 5
38894: PUSH
38895: DOUBLE
38896: LD_VAR 0 7
38900: INC
38901: ST_TO_ADDR
38902: LD_INT 2
38904: PUSH
38905: FOR_DOWNTO
38906: IFFALSE 38990
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38908: LD_ADDR_VAR 0 6
38912: PUSH
38913: LD_VAR 0 7
38917: PUSH
38918: LD_VAR 0 5
38922: PUSH
38923: LD_INT 1
38925: MINUS
38926: ARRAY
38927: PPUSH
38928: LD_VAR 0 2
38932: PUSH
38933: LD_VAR 0 5
38937: PUSH
38938: LD_INT 1
38940: MINUS
38941: ARRAY
38942: PPUSH
38943: LD_VAR 0 7
38947: PUSH
38948: LD_VAR 0 5
38952: ARRAY
38953: PPUSH
38954: CALL_OW 1
38958: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38959: LD_ADDR_VAR 0 7
38963: PUSH
38964: LD_VAR 0 7
38968: PPUSH
38969: LD_VAR 0 5
38973: PUSH
38974: LD_INT 1
38976: MINUS
38977: PPUSH
38978: LD_VAR 0 6
38982: PPUSH
38983: CALL_OW 1
38987: ST_TO_ADDR
// end ;
38988: GO 38905
38990: POP
38991: POP
// result := s_arr [ 1 ] ;
38992: LD_ADDR_VAR 0 4
38996: PUSH
38997: LD_VAR 0 7
39001: PUSH
39002: LD_INT 1
39004: ARRAY
39005: ST_TO_ADDR
// end ; end ;
39006: LD_VAR 0 4
39010: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39011: LD_INT 0
39013: PPUSH
39014: PPUSH
// if not list then
39015: LD_VAR 0 1
39019: NOT
39020: IFFALSE 39024
// exit ;
39022: GO 39115
// i := list [ pos1 ] ;
39024: LD_ADDR_VAR 0 5
39028: PUSH
39029: LD_VAR 0 1
39033: PUSH
39034: LD_VAR 0 2
39038: ARRAY
39039: ST_TO_ADDR
// if not i then
39040: LD_VAR 0 5
39044: NOT
39045: IFFALSE 39049
// exit ;
39047: GO 39115
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39049: LD_ADDR_VAR 0 1
39053: PUSH
39054: LD_VAR 0 1
39058: PPUSH
39059: LD_VAR 0 2
39063: PPUSH
39064: LD_VAR 0 1
39068: PUSH
39069: LD_VAR 0 3
39073: ARRAY
39074: PPUSH
39075: CALL_OW 1
39079: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39080: LD_ADDR_VAR 0 1
39084: PUSH
39085: LD_VAR 0 1
39089: PPUSH
39090: LD_VAR 0 3
39094: PPUSH
39095: LD_VAR 0 5
39099: PPUSH
39100: CALL_OW 1
39104: ST_TO_ADDR
// result := list ;
39105: LD_ADDR_VAR 0 4
39109: PUSH
39110: LD_VAR 0 1
39114: ST_TO_ADDR
// end ;
39115: LD_VAR 0 4
39119: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39120: LD_INT 0
39122: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39123: LD_ADDR_VAR 0 5
39127: PUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: CALL_OW 250
39137: PPUSH
39138: LD_VAR 0 1
39142: PPUSH
39143: CALL_OW 251
39147: PPUSH
39148: LD_VAR 0 2
39152: PPUSH
39153: LD_VAR 0 3
39157: PPUSH
39158: LD_VAR 0 4
39162: PPUSH
39163: CALL 39545 0 5
39167: ST_TO_ADDR
// end ;
39168: LD_VAR 0 5
39172: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39173: LD_INT 0
39175: PPUSH
39176: PPUSH
39177: PPUSH
39178: PPUSH
// if not list or not unit then
39179: LD_VAR 0 2
39183: NOT
39184: IFTRUE 39193
39186: PUSH
39187: LD_VAR 0 1
39191: NOT
39192: OR
39193: IFFALSE 39197
// exit ;
39195: GO 39540
// result := [ ] ;
39197: LD_ADDR_VAR 0 5
39201: PUSH
39202: EMPTY
39203: ST_TO_ADDR
// for i in list do
39204: LD_ADDR_VAR 0 6
39208: PUSH
39209: LD_VAR 0 2
39213: PUSH
39214: FOR_IN
39215: IFFALSE 39433
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39217: LD_ADDR_VAR 0 8
39221: PUSH
39222: LD_VAR 0 1
39226: PPUSH
39227: LD_VAR 0 6
39231: PUSH
39232: LD_INT 1
39234: ARRAY
39235: PPUSH
39236: LD_VAR 0 6
39240: PUSH
39241: LD_INT 2
39243: ARRAY
39244: PPUSH
39245: CALL_OW 297
39249: ST_TO_ADDR
// if not Count ( result ) then
39250: LD_VAR 0 5
39254: PPUSH
39255: CALL 35767 0 1
39259: NOT
39260: IFFALSE 39293
// begin result := Join ( result , [ i , tmp ] ) ;
39262: LD_ADDR_VAR 0 5
39266: PUSH
39267: LD_VAR 0 5
39271: PPUSH
39272: LD_VAR 0 6
39276: PUSH
39277: LD_VAR 0 8
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PPUSH
39286: CALL 71743 0 2
39290: ST_TO_ADDR
// continue ;
39291: GO 39214
// end ; if result [ result ] [ 2 ] <= tmp then
39293: LD_VAR 0 5
39297: PUSH
39298: LD_VAR 0 5
39302: ARRAY
39303: PUSH
39304: LD_INT 2
39306: ARRAY
39307: PUSH
39308: LD_VAR 0 8
39312: LESSEQUAL
39313: IFFALSE 39346
// result := Join ( result , [ i , tmp ] ) else
39315: LD_ADDR_VAR 0 5
39319: PUSH
39320: LD_VAR 0 5
39324: PPUSH
39325: LD_VAR 0 6
39329: PUSH
39330: LD_VAR 0 8
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PPUSH
39339: CALL 71743 0 2
39343: ST_TO_ADDR
39344: GO 39431
// begin for j := 1 to Count ( result ) do
39346: LD_ADDR_VAR 0 7
39350: PUSH
39351: DOUBLE
39352: LD_INT 1
39354: DEC
39355: ST_TO_ADDR
39356: LD_VAR 0 5
39360: PPUSH
39361: CALL 35767 0 1
39365: PUSH
39366: FOR_TO
39367: IFFALSE 39429
// begin if tmp < result [ j ] [ 2 ] then
39369: LD_VAR 0 8
39373: PUSH
39374: LD_VAR 0 5
39378: PUSH
39379: LD_VAR 0 7
39383: ARRAY
39384: PUSH
39385: LD_INT 2
39387: ARRAY
39388: LESS
39389: IFFALSE 39427
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39391: LD_ADDR_VAR 0 5
39395: PUSH
39396: LD_VAR 0 5
39400: PPUSH
39401: LD_VAR 0 7
39405: PPUSH
39406: LD_VAR 0 6
39410: PUSH
39411: LD_VAR 0 8
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PPUSH
39420: CALL_OW 2
39424: ST_TO_ADDR
// break ;
39425: GO 39429
// end ; end ;
39427: GO 39366
39429: POP
39430: POP
// end ; end ;
39431: GO 39214
39433: POP
39434: POP
// if result and not asc then
39435: LD_VAR 0 5
39439: IFFALSE 39448
39441: PUSH
39442: LD_VAR 0 3
39446: NOT
39447: AND
39448: IFFALSE 39465
// result := ReverseArray ( result ) ;
39450: LD_ADDR_VAR 0 5
39454: PUSH
39455: LD_VAR 0 5
39459: PPUSH
39460: CALL 66823 0 1
39464: ST_TO_ADDR
// tmp := [ ] ;
39465: LD_ADDR_VAR 0 8
39469: PUSH
39470: EMPTY
39471: ST_TO_ADDR
// if mode then
39472: LD_VAR 0 4
39476: IFFALSE 39540
// begin for i := 1 to result do
39478: LD_ADDR_VAR 0 6
39482: PUSH
39483: DOUBLE
39484: LD_INT 1
39486: DEC
39487: ST_TO_ADDR
39488: LD_VAR 0 5
39492: PUSH
39493: FOR_TO
39494: IFFALSE 39528
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39496: LD_ADDR_VAR 0 8
39500: PUSH
39501: LD_VAR 0 8
39505: PPUSH
39506: LD_VAR 0 5
39510: PUSH
39511: LD_VAR 0 6
39515: ARRAY
39516: PUSH
39517: LD_INT 1
39519: ARRAY
39520: PPUSH
39521: CALL 71743 0 2
39525: ST_TO_ADDR
39526: GO 39493
39528: POP
39529: POP
// result := tmp ;
39530: LD_ADDR_VAR 0 5
39534: PUSH
39535: LD_VAR 0 8
39539: ST_TO_ADDR
// end ; end ;
39540: LD_VAR 0 5
39544: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39545: LD_INT 0
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
// if not list then
39551: LD_VAR 0 3
39555: NOT
39556: IFFALSE 39560
// exit ;
39558: GO 39950
// result := [ ] ;
39560: LD_ADDR_VAR 0 6
39564: PUSH
39565: EMPTY
39566: ST_TO_ADDR
// for i in list do
39567: LD_ADDR_VAR 0 7
39571: PUSH
39572: LD_VAR 0 3
39576: PUSH
39577: FOR_IN
39578: IFFALSE 39780
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39580: LD_ADDR_VAR 0 9
39584: PUSH
39585: LD_VAR 0 7
39589: PPUSH
39590: LD_VAR 0 1
39594: PPUSH
39595: LD_VAR 0 2
39599: PPUSH
39600: CALL_OW 297
39604: ST_TO_ADDR
// if not result then
39605: LD_VAR 0 6
39609: NOT
39610: IFFALSE 39636
// result := [ [ i , tmp ] ] else
39612: LD_ADDR_VAR 0 6
39616: PUSH
39617: LD_VAR 0 7
39621: PUSH
39622: LD_VAR 0 9
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: EMPTY
39632: LIST
39633: ST_TO_ADDR
39634: GO 39778
// begin if result [ result ] [ 2 ] <= tmp then
39636: LD_VAR 0 6
39640: PUSH
39641: LD_VAR 0 6
39645: ARRAY
39646: PUSH
39647: LD_INT 2
39649: ARRAY
39650: PUSH
39651: LD_VAR 0 9
39655: LESSEQUAL
39656: IFFALSE 39698
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39658: LD_ADDR_VAR 0 6
39662: PUSH
39663: LD_VAR 0 6
39667: PPUSH
39668: LD_VAR 0 6
39672: PUSH
39673: LD_INT 1
39675: PLUS
39676: PPUSH
39677: LD_VAR 0 7
39681: PUSH
39682: LD_VAR 0 9
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PPUSH
39691: CALL_OW 2
39695: ST_TO_ADDR
39696: GO 39778
// for j := 1 to result do
39698: LD_ADDR_VAR 0 8
39702: PUSH
39703: DOUBLE
39704: LD_INT 1
39706: DEC
39707: ST_TO_ADDR
39708: LD_VAR 0 6
39712: PUSH
39713: FOR_TO
39714: IFFALSE 39776
// begin if tmp < result [ j ] [ 2 ] then
39716: LD_VAR 0 9
39720: PUSH
39721: LD_VAR 0 6
39725: PUSH
39726: LD_VAR 0 8
39730: ARRAY
39731: PUSH
39732: LD_INT 2
39734: ARRAY
39735: LESS
39736: IFFALSE 39774
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39738: LD_ADDR_VAR 0 6
39742: PUSH
39743: LD_VAR 0 6
39747: PPUSH
39748: LD_VAR 0 8
39752: PPUSH
39753: LD_VAR 0 7
39757: PUSH
39758: LD_VAR 0 9
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PPUSH
39767: CALL_OW 2
39771: ST_TO_ADDR
// break ;
39772: GO 39776
// end ; end ;
39774: GO 39713
39776: POP
39777: POP
// end ; end ;
39778: GO 39577
39780: POP
39781: POP
// if result and not asc then
39782: LD_VAR 0 6
39786: IFFALSE 39795
39788: PUSH
39789: LD_VAR 0 4
39793: NOT
39794: AND
39795: IFFALSE 39870
// begin tmp := result ;
39797: LD_ADDR_VAR 0 9
39801: PUSH
39802: LD_VAR 0 6
39806: ST_TO_ADDR
// for i = tmp downto 1 do
39807: LD_ADDR_VAR 0 7
39811: PUSH
39812: DOUBLE
39813: LD_VAR 0 9
39817: INC
39818: ST_TO_ADDR
39819: LD_INT 1
39821: PUSH
39822: FOR_DOWNTO
39823: IFFALSE 39868
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39825: LD_ADDR_VAR 0 6
39829: PUSH
39830: LD_VAR 0 6
39834: PPUSH
39835: LD_VAR 0 9
39839: PUSH
39840: LD_VAR 0 7
39844: MINUS
39845: PUSH
39846: LD_INT 1
39848: PLUS
39849: PPUSH
39850: LD_VAR 0 9
39854: PUSH
39855: LD_VAR 0 7
39859: ARRAY
39860: PPUSH
39861: CALL_OW 1
39865: ST_TO_ADDR
39866: GO 39822
39868: POP
39869: POP
// end ; tmp := [ ] ;
39870: LD_ADDR_VAR 0 9
39874: PUSH
39875: EMPTY
39876: ST_TO_ADDR
// if mode then
39877: LD_VAR 0 5
39881: IFFALSE 39950
// begin for i = 1 to result do
39883: LD_ADDR_VAR 0 7
39887: PUSH
39888: DOUBLE
39889: LD_INT 1
39891: DEC
39892: ST_TO_ADDR
39893: LD_VAR 0 6
39897: PUSH
39898: FOR_TO
39899: IFFALSE 39938
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39901: LD_ADDR_VAR 0 9
39905: PUSH
39906: LD_VAR 0 9
39910: PPUSH
39911: LD_VAR 0 7
39915: PPUSH
39916: LD_VAR 0 6
39920: PUSH
39921: LD_VAR 0 7
39925: ARRAY
39926: PUSH
39927: LD_INT 1
39929: ARRAY
39930: PPUSH
39931: CALL_OW 1
39935: ST_TO_ADDR
39936: GO 39898
39938: POP
39939: POP
// result := tmp ;
39940: LD_ADDR_VAR 0 6
39944: PUSH
39945: LD_VAR 0 9
39949: ST_TO_ADDR
// end ; end ;
39950: LD_VAR 0 6
39954: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39955: LD_INT 0
39957: PPUSH
39958: PPUSH
39959: PPUSH
39960: PPUSH
39961: PPUSH
39962: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39963: LD_ADDR_VAR 0 5
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: EMPTY
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: ST_TO_ADDR
// if not x or not y then
39985: LD_VAR 0 2
39989: NOT
39990: IFTRUE 39999
39992: PUSH
39993: LD_VAR 0 3
39997: NOT
39998: OR
39999: IFFALSE 40003
// exit ;
40001: GO 41659
// if not range then
40003: LD_VAR 0 4
40007: NOT
40008: IFFALSE 40018
// range := 10 ;
40010: LD_ADDR_VAR 0 4
40014: PUSH
40015: LD_INT 10
40017: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40018: LD_ADDR_VAR 0 8
40022: PUSH
40023: LD_INT 81
40025: PUSH
40026: LD_VAR 0 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 92
40037: PUSH
40038: LD_VAR 0 2
40042: PUSH
40043: LD_VAR 0 3
40047: PUSH
40048: LD_VAR 0 4
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: LD_INT 21
40064: PUSH
40065: LD_INT 3
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: PPUSH
40081: CALL_OW 69
40085: ST_TO_ADDR
// if not tmp then
40086: LD_VAR 0 8
40090: NOT
40091: IFFALSE 40095
// exit ;
40093: GO 41659
// for i in tmp do
40095: LD_ADDR_VAR 0 6
40099: PUSH
40100: LD_VAR 0 8
40104: PUSH
40105: FOR_IN
40106: IFFALSE 41634
// begin points := [ 0 , 0 , 0 ] ;
40108: LD_ADDR_VAR 0 9
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: ST_TO_ADDR
// bpoints := 1 ;
40127: LD_ADDR_VAR 0 10
40131: PUSH
40132: LD_INT 1
40134: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40135: LD_VAR 0 6
40139: PPUSH
40140: CALL_OW 247
40144: PUSH
40145: LD_INT 1
40147: DOUBLE
40148: EQUAL
40149: IFTRUE 40153
40151: GO 40735
40153: POP
// begin if GetClass ( i ) = 1 then
40154: LD_VAR 0 6
40158: PPUSH
40159: CALL_OW 257
40163: PUSH
40164: LD_INT 1
40166: EQUAL
40167: IFFALSE 40188
// points := [ 10 , 5 , 3 ] ;
40169: LD_ADDR_VAR 0 9
40173: PUSH
40174: LD_INT 10
40176: PUSH
40177: LD_INT 5
40179: PUSH
40180: LD_INT 3
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40188: LD_VAR 0 6
40192: PPUSH
40193: CALL_OW 257
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: LD_INT 4
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: LIST
40211: IN
40212: IFFALSE 40233
// points := [ 3 , 2 , 1 ] ;
40214: LD_ADDR_VAR 0 9
40218: PUSH
40219: LD_INT 3
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40233: LD_VAR 0 6
40237: PPUSH
40238: CALL_OW 257
40242: PUSH
40243: LD_INT 5
40245: EQUAL
40246: IFFALSE 40267
// points := [ 130 , 5 , 2 ] ;
40248: LD_ADDR_VAR 0 9
40252: PUSH
40253: LD_INT 130
40255: PUSH
40256: LD_INT 5
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40267: LD_VAR 0 6
40271: PPUSH
40272: CALL_OW 257
40276: PUSH
40277: LD_INT 8
40279: EQUAL
40280: IFFALSE 40301
// points := [ 35 , 35 , 30 ] ;
40282: LD_ADDR_VAR 0 9
40286: PUSH
40287: LD_INT 35
40289: PUSH
40290: LD_INT 35
40292: PUSH
40293: LD_INT 30
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40301: LD_VAR 0 6
40305: PPUSH
40306: CALL_OW 257
40310: PUSH
40311: LD_INT 9
40313: EQUAL
40314: IFFALSE 40335
// points := [ 20 , 55 , 40 ] ;
40316: LD_ADDR_VAR 0 9
40320: PUSH
40321: LD_INT 20
40323: PUSH
40324: LD_INT 55
40326: PUSH
40327: LD_INT 40
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40335: LD_VAR 0 6
40339: PPUSH
40340: CALL_OW 257
40344: PUSH
40345: LD_INT 12
40347: PUSH
40348: LD_INT 16
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: IN
40355: IFFALSE 40376
// points := [ 5 , 3 , 2 ] ;
40357: LD_ADDR_VAR 0 9
40361: PUSH
40362: LD_INT 5
40364: PUSH
40365: LD_INT 3
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40376: LD_VAR 0 6
40380: PPUSH
40381: CALL_OW 257
40385: PUSH
40386: LD_INT 17
40388: EQUAL
40389: IFFALSE 40410
// points := [ 100 , 50 , 75 ] ;
40391: LD_ADDR_VAR 0 9
40395: PUSH
40396: LD_INT 100
40398: PUSH
40399: LD_INT 50
40401: PUSH
40402: LD_INT 75
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: LIST
40409: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40410: LD_VAR 0 6
40414: PPUSH
40415: CALL_OW 257
40419: PUSH
40420: LD_INT 15
40422: EQUAL
40423: IFFALSE 40444
// points := [ 10 , 5 , 3 ] ;
40425: LD_ADDR_VAR 0 9
40429: PUSH
40430: LD_INT 10
40432: PUSH
40433: LD_INT 5
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40444: LD_VAR 0 6
40448: PPUSH
40449: CALL_OW 257
40453: PUSH
40454: LD_INT 14
40456: EQUAL
40457: IFFALSE 40478
// points := [ 10 , 0 , 0 ] ;
40459: LD_ADDR_VAR 0 9
40463: PUSH
40464: LD_INT 10
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: LIST
40477: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40478: LD_VAR 0 6
40482: PPUSH
40483: CALL_OW 257
40487: PUSH
40488: LD_INT 11
40490: EQUAL
40491: IFFALSE 40512
// points := [ 30 , 10 , 5 ] ;
40493: LD_ADDR_VAR 0 9
40497: PUSH
40498: LD_INT 30
40500: PUSH
40501: LD_INT 10
40503: PUSH
40504: LD_INT 5
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40512: LD_VAR 0 1
40516: PPUSH
40517: LD_INT 5
40519: PPUSH
40520: CALL_OW 321
40524: PUSH
40525: LD_INT 2
40527: EQUAL
40528: IFFALSE 40545
// bpoints := bpoints * 1.8 ;
40530: LD_ADDR_VAR 0 10
40534: PUSH
40535: LD_VAR 0 10
40539: PUSH
40540: LD_REAL  1.80000000000000E+0000
40543: MUL
40544: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40545: LD_VAR 0 6
40549: PPUSH
40550: CALL_OW 257
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: LD_INT 3
40563: PUSH
40564: LD_INT 4
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: IN
40573: IFFALSE 40593
40575: PUSH
40576: LD_VAR 0 1
40580: PPUSH
40581: LD_INT 51
40583: PPUSH
40584: CALL_OW 321
40588: PUSH
40589: LD_INT 2
40591: EQUAL
40592: AND
40593: IFFALSE 40610
// bpoints := bpoints * 1.2 ;
40595: LD_ADDR_VAR 0 10
40599: PUSH
40600: LD_VAR 0 10
40604: PUSH
40605: LD_REAL  1.20000000000000E+0000
40608: MUL
40609: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40610: LD_VAR 0 6
40614: PPUSH
40615: CALL_OW 257
40619: PUSH
40620: LD_INT 5
40622: PUSH
40623: LD_INT 7
40625: PUSH
40626: LD_INT 9
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: IN
40634: IFFALSE 40654
40636: PUSH
40637: LD_VAR 0 1
40641: PPUSH
40642: LD_INT 52
40644: PPUSH
40645: CALL_OW 321
40649: PUSH
40650: LD_INT 2
40652: EQUAL
40653: AND
40654: IFFALSE 40671
// bpoints := bpoints * 1.5 ;
40656: LD_ADDR_VAR 0 10
40660: PUSH
40661: LD_VAR 0 10
40665: PUSH
40666: LD_REAL  1.50000000000000E+0000
40669: MUL
40670: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40671: LD_VAR 0 1
40675: PPUSH
40676: LD_INT 66
40678: PPUSH
40679: CALL_OW 321
40683: PUSH
40684: LD_INT 2
40686: EQUAL
40687: IFFALSE 40704
// bpoints := bpoints * 1.1 ;
40689: LD_ADDR_VAR 0 10
40693: PUSH
40694: LD_VAR 0 10
40698: PUSH
40699: LD_REAL  1.10000000000000E+0000
40702: MUL
40703: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40704: LD_ADDR_VAR 0 10
40708: PUSH
40709: LD_VAR 0 10
40713: PUSH
40714: LD_VAR 0 6
40718: PPUSH
40719: LD_INT 1
40721: PPUSH
40722: CALL_OW 259
40726: PUSH
40727: LD_REAL  1.15000000000000E+0000
40730: MUL
40731: MUL
40732: ST_TO_ADDR
// end ; unit_vehicle :
40733: GO 41563
40735: LD_INT 2
40737: DOUBLE
40738: EQUAL
40739: IFTRUE 40743
40741: GO 41551
40743: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40744: LD_VAR 0 6
40748: PPUSH
40749: CALL_OW 264
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: LD_INT 42
40759: PUSH
40760: LD_INT 24
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: LIST
40767: IN
40768: IFFALSE 40789
// points := [ 25 , 5 , 3 ] ;
40770: LD_ADDR_VAR 0 9
40774: PUSH
40775: LD_INT 25
40777: PUSH
40778: LD_INT 5
40780: PUSH
40781: LD_INT 3
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: LIST
40788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40789: LD_VAR 0 6
40793: PPUSH
40794: CALL_OW 264
40798: PUSH
40799: LD_INT 4
40801: PUSH
40802: LD_INT 43
40804: PUSH
40805: LD_INT 25
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: IN
40813: IFFALSE 40834
// points := [ 40 , 15 , 5 ] ;
40815: LD_ADDR_VAR 0 9
40819: PUSH
40820: LD_INT 40
40822: PUSH
40823: LD_INT 15
40825: PUSH
40826: LD_INT 5
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40834: LD_VAR 0 6
40838: PPUSH
40839: CALL_OW 264
40843: PUSH
40844: LD_INT 3
40846: PUSH
40847: LD_INT 23
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: IN
40854: IFFALSE 40875
// points := [ 7 , 25 , 8 ] ;
40856: LD_ADDR_VAR 0 9
40860: PUSH
40861: LD_INT 7
40863: PUSH
40864: LD_INT 25
40866: PUSH
40867: LD_INT 8
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40875: LD_VAR 0 6
40879: PPUSH
40880: CALL_OW 264
40884: PUSH
40885: LD_INT 5
40887: PUSH
40888: LD_INT 27
40890: PUSH
40891: LD_INT 44
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: IN
40899: IFFALSE 40920
// points := [ 14 , 50 , 16 ] ;
40901: LD_ADDR_VAR 0 9
40905: PUSH
40906: LD_INT 14
40908: PUSH
40909: LD_INT 50
40911: PUSH
40912: LD_INT 16
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40920: LD_VAR 0 6
40924: PPUSH
40925: CALL_OW 264
40929: PUSH
40930: LD_INT 6
40932: PUSH
40933: LD_INT 46
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: IN
40940: IFFALSE 40961
// points := [ 32 , 120 , 70 ] ;
40942: LD_ADDR_VAR 0 9
40946: PUSH
40947: LD_INT 32
40949: PUSH
40950: LD_INT 120
40952: PUSH
40953: LD_INT 70
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: LIST
40960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40961: LD_VAR 0 6
40965: PPUSH
40966: CALL_OW 264
40970: PUSH
40971: LD_INT 7
40973: PUSH
40974: LD_INT 28
40976: PUSH
40977: LD_INT 45
40979: PUSH
40980: LD_INT 92
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: IN
40989: IFFALSE 41010
// points := [ 35 , 20 , 45 ] ;
40991: LD_ADDR_VAR 0 9
40995: PUSH
40996: LD_INT 35
40998: PUSH
40999: LD_INT 20
41001: PUSH
41002: LD_INT 45
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41010: LD_VAR 0 6
41014: PPUSH
41015: CALL_OW 264
41019: PUSH
41020: LD_INT 47
41022: PUSH
41023: EMPTY
41024: LIST
41025: IN
41026: IFFALSE 41047
// points := [ 67 , 45 , 75 ] ;
41028: LD_ADDR_VAR 0 9
41032: PUSH
41033: LD_INT 67
41035: PUSH
41036: LD_INT 45
41038: PUSH
41039: LD_INT 75
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: LIST
41046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41047: LD_VAR 0 6
41051: PPUSH
41052: CALL_OW 264
41056: PUSH
41057: LD_INT 26
41059: PUSH
41060: EMPTY
41061: LIST
41062: IN
41063: IFFALSE 41084
// points := [ 120 , 30 , 80 ] ;
41065: LD_ADDR_VAR 0 9
41069: PUSH
41070: LD_INT 120
41072: PUSH
41073: LD_INT 30
41075: PUSH
41076: LD_INT 80
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: LIST
41083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41084: LD_VAR 0 6
41088: PPUSH
41089: CALL_OW 264
41093: PUSH
41094: LD_INT 22
41096: PUSH
41097: EMPTY
41098: LIST
41099: IN
41100: IFFALSE 41121
// points := [ 40 , 1 , 1 ] ;
41102: LD_ADDR_VAR 0 9
41106: PUSH
41107: LD_INT 40
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: LIST
41120: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41121: LD_VAR 0 6
41125: PPUSH
41126: CALL_OW 264
41130: PUSH
41131: LD_INT 29
41133: PUSH
41134: EMPTY
41135: LIST
41136: IN
41137: IFFALSE 41158
// points := [ 70 , 200 , 400 ] ;
41139: LD_ADDR_VAR 0 9
41143: PUSH
41144: LD_INT 70
41146: PUSH
41147: LD_INT 200
41149: PUSH
41150: LD_INT 400
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: LIST
41157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41158: LD_VAR 0 6
41162: PPUSH
41163: CALL_OW 264
41167: PUSH
41168: LD_INT 14
41170: PUSH
41171: LD_INT 53
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: IN
41178: IFFALSE 41199
// points := [ 40 , 10 , 20 ] ;
41180: LD_ADDR_VAR 0 9
41184: PUSH
41185: LD_INT 40
41187: PUSH
41188: LD_INT 10
41190: PUSH
41191: LD_INT 20
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: LIST
41198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41199: LD_VAR 0 6
41203: PPUSH
41204: CALL_OW 264
41208: PUSH
41209: LD_INT 9
41211: PUSH
41212: EMPTY
41213: LIST
41214: IN
41215: IFFALSE 41236
// points := [ 5 , 70 , 20 ] ;
41217: LD_ADDR_VAR 0 9
41221: PUSH
41222: LD_INT 5
41224: PUSH
41225: LD_INT 70
41227: PUSH
41228: LD_INT 20
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41236: LD_VAR 0 6
41240: PPUSH
41241: CALL_OW 264
41245: PUSH
41246: LD_INT 10
41248: PUSH
41249: EMPTY
41250: LIST
41251: IN
41252: IFFALSE 41273
// points := [ 35 , 110 , 70 ] ;
41254: LD_ADDR_VAR 0 9
41258: PUSH
41259: LD_INT 35
41261: PUSH
41262: LD_INT 110
41264: PUSH
41265: LD_INT 70
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41273: LD_VAR 0 6
41277: PPUSH
41278: CALL_OW 265
41282: PUSH
41283: LD_INT 25
41285: EQUAL
41286: IFFALSE 41307
// points := [ 80 , 65 , 100 ] ;
41288: LD_ADDR_VAR 0 9
41292: PUSH
41293: LD_INT 80
41295: PUSH
41296: LD_INT 65
41298: PUSH
41299: LD_INT 100
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41307: LD_VAR 0 6
41311: PPUSH
41312: CALL_OW 263
41316: PUSH
41317: LD_INT 1
41319: EQUAL
41320: IFFALSE 41355
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41322: LD_ADDR_VAR 0 10
41326: PUSH
41327: LD_VAR 0 10
41331: PUSH
41332: LD_VAR 0 6
41336: PPUSH
41337: CALL_OW 311
41341: PPUSH
41342: LD_INT 3
41344: PPUSH
41345: CALL_OW 259
41349: PUSH
41350: LD_INT 4
41352: MUL
41353: MUL
41354: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41355: LD_VAR 0 6
41359: PPUSH
41360: CALL_OW 263
41364: PUSH
41365: LD_INT 2
41367: EQUAL
41368: IFFALSE 41419
// begin j := IsControledBy ( i ) ;
41370: LD_ADDR_VAR 0 7
41374: PUSH
41375: LD_VAR 0 6
41379: PPUSH
41380: CALL_OW 312
41384: ST_TO_ADDR
// if j then
41385: LD_VAR 0 7
41389: IFFALSE 41419
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41391: LD_ADDR_VAR 0 10
41395: PUSH
41396: LD_VAR 0 10
41400: PUSH
41401: LD_VAR 0 7
41405: PPUSH
41406: LD_INT 3
41408: PPUSH
41409: CALL_OW 259
41413: PUSH
41414: LD_INT 3
41416: MUL
41417: MUL
41418: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41419: LD_VAR 0 6
41423: PPUSH
41424: CALL_OW 264
41428: PUSH
41429: LD_INT 5
41431: PUSH
41432: LD_INT 6
41434: PUSH
41435: LD_INT 46
41437: PUSH
41438: LD_INT 44
41440: PUSH
41441: LD_INT 47
41443: PUSH
41444: LD_INT 45
41446: PUSH
41447: LD_INT 28
41449: PUSH
41450: LD_INT 7
41452: PUSH
41453: LD_INT 27
41455: PUSH
41456: LD_INT 29
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: IN
41471: IFFALSE 41491
41473: PUSH
41474: LD_VAR 0 1
41478: PPUSH
41479: LD_INT 52
41481: PPUSH
41482: CALL_OW 321
41486: PUSH
41487: LD_INT 2
41489: EQUAL
41490: AND
41491: IFFALSE 41508
// bpoints := bpoints * 1.2 ;
41493: LD_ADDR_VAR 0 10
41497: PUSH
41498: LD_VAR 0 10
41502: PUSH
41503: LD_REAL  1.20000000000000E+0000
41506: MUL
41507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41508: LD_VAR 0 6
41512: PPUSH
41513: CALL_OW 264
41517: PUSH
41518: LD_INT 6
41520: PUSH
41521: LD_INT 46
41523: PUSH
41524: LD_INT 47
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: LIST
41531: IN
41532: IFFALSE 41549
// bpoints := bpoints * 1.2 ;
41534: LD_ADDR_VAR 0 10
41538: PUSH
41539: LD_VAR 0 10
41543: PUSH
41544: LD_REAL  1.20000000000000E+0000
41547: MUL
41548: ST_TO_ADDR
// end ; unit_building :
41549: GO 41563
41551: LD_INT 3
41553: DOUBLE
41554: EQUAL
41555: IFTRUE 41559
41557: GO 41562
41559: POP
// ; end ;
41560: GO 41563
41562: POP
// for j = 1 to 3 do
41563: LD_ADDR_VAR 0 7
41567: PUSH
41568: DOUBLE
41569: LD_INT 1
41571: DEC
41572: ST_TO_ADDR
41573: LD_INT 3
41575: PUSH
41576: FOR_TO
41577: IFFALSE 41630
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41579: LD_ADDR_VAR 0 5
41583: PUSH
41584: LD_VAR 0 5
41588: PPUSH
41589: LD_VAR 0 7
41593: PPUSH
41594: LD_VAR 0 5
41598: PUSH
41599: LD_VAR 0 7
41603: ARRAY
41604: PUSH
41605: LD_VAR 0 9
41609: PUSH
41610: LD_VAR 0 7
41614: ARRAY
41615: PUSH
41616: LD_VAR 0 10
41620: MUL
41621: PLUS
41622: PPUSH
41623: CALL_OW 1
41627: ST_TO_ADDR
41628: GO 41576
41630: POP
41631: POP
// end ;
41632: GO 40105
41634: POP
41635: POP
// result := Replace ( result , 4 , tmp ) ;
41636: LD_ADDR_VAR 0 5
41640: PUSH
41641: LD_VAR 0 5
41645: PPUSH
41646: LD_INT 4
41648: PPUSH
41649: LD_VAR 0 8
41653: PPUSH
41654: CALL_OW 1
41658: ST_TO_ADDR
// end ;
41659: LD_VAR 0 5
41663: RET
// export function DangerAtRange ( unit , range ) ; begin
41664: LD_INT 0
41666: PPUSH
// if not unit then
41667: LD_VAR 0 1
41671: NOT
41672: IFFALSE 41676
// exit ;
41674: GO 41721
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41676: LD_ADDR_VAR 0 3
41680: PUSH
41681: LD_VAR 0 1
41685: PPUSH
41686: CALL_OW 255
41690: PPUSH
41691: LD_VAR 0 1
41695: PPUSH
41696: CALL_OW 250
41700: PPUSH
41701: LD_VAR 0 1
41705: PPUSH
41706: CALL_OW 251
41710: PPUSH
41711: LD_VAR 0 2
41715: PPUSH
41716: CALL 39955 0 4
41720: ST_TO_ADDR
// end ;
41721: LD_VAR 0 3
41725: RET
// export function DangerInArea ( side , area ) ; begin
41726: LD_INT 0
41728: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: LD_VAR 0 2
41738: PPUSH
41739: LD_INT 81
41741: PUSH
41742: LD_VAR 0 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PPUSH
41751: CALL_OW 70
41755: ST_TO_ADDR
// end ;
41756: LD_VAR 0 3
41760: RET
// export function IsExtension ( b ) ; begin
41761: LD_INT 0
41763: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41764: LD_ADDR_VAR 0 2
41768: PUSH
41769: LD_VAR 0 1
41773: PUSH
41774: LD_INT 23
41776: PUSH
41777: LD_INT 20
41779: PUSH
41780: LD_INT 22
41782: PUSH
41783: LD_INT 17
41785: PUSH
41786: LD_INT 24
41788: PUSH
41789: LD_INT 21
41791: PUSH
41792: LD_INT 19
41794: PUSH
41795: LD_INT 16
41797: PUSH
41798: LD_INT 25
41800: PUSH
41801: LD_INT 18
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: IN
41816: ST_TO_ADDR
// end ;
41817: LD_VAR 0 2
41821: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41822: LD_INT 0
41824: PPUSH
41825: PPUSH
41826: PPUSH
// result := [ ] ;
41827: LD_ADDR_VAR 0 4
41831: PUSH
41832: EMPTY
41833: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41834: LD_ADDR_VAR 0 5
41838: PUSH
41839: LD_VAR 0 2
41843: PPUSH
41844: LD_INT 21
41846: PUSH
41847: LD_INT 3
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PPUSH
41854: CALL_OW 70
41858: ST_TO_ADDR
// if not tmp then
41859: LD_VAR 0 5
41863: NOT
41864: IFFALSE 41868
// exit ;
41866: GO 41932
// if checkLink then
41868: LD_VAR 0 3
41872: IFFALSE 41922
// begin for i in tmp do
41874: LD_ADDR_VAR 0 6
41878: PUSH
41879: LD_VAR 0 5
41883: PUSH
41884: FOR_IN
41885: IFFALSE 41920
// if GetBase ( i ) <> base then
41887: LD_VAR 0 6
41891: PPUSH
41892: CALL_OW 274
41896: PUSH
41897: LD_VAR 0 1
41901: NONEQUAL
41902: IFFALSE 41918
// ComLinkToBase ( base , i ) ;
41904: LD_VAR 0 1
41908: PPUSH
41909: LD_VAR 0 6
41913: PPUSH
41914: CALL_OW 169
41918: GO 41884
41920: POP
41921: POP
// end ; result := tmp ;
41922: LD_ADDR_VAR 0 4
41926: PUSH
41927: LD_VAR 0 5
41931: ST_TO_ADDR
// end ;
41932: LD_VAR 0 4
41936: RET
// export function ComComplete ( units , b ) ; var i ; begin
41937: LD_INT 0
41939: PPUSH
41940: PPUSH
// if not units then
41941: LD_VAR 0 1
41945: NOT
41946: IFFALSE 41950
// exit ;
41948: GO 42040
// for i in units do
41950: LD_ADDR_VAR 0 4
41954: PUSH
41955: LD_VAR 0 1
41959: PUSH
41960: FOR_IN
41961: IFFALSE 42038
// if BuildingStatus ( b ) = bs_build then
41963: LD_VAR 0 2
41967: PPUSH
41968: CALL_OW 461
41972: PUSH
41973: LD_INT 1
41975: EQUAL
41976: IFFALSE 42036
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41978: LD_VAR 0 4
41982: PPUSH
41983: LD_STRING h
41985: PUSH
41986: LD_VAR 0 2
41990: PPUSH
41991: CALL_OW 250
41995: PUSH
41996: LD_VAR 0 2
42000: PPUSH
42001: CALL_OW 251
42005: PUSH
42006: LD_VAR 0 2
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: PUSH
42029: EMPTY
42030: LIST
42031: PPUSH
42032: CALL_OW 446
42036: GO 41960
42038: POP
42039: POP
// end ;
42040: LD_VAR 0 3
42044: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42045: LD_INT 0
42047: PPUSH
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
42052: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42053: LD_VAR 0 1
42057: NOT
42058: IFTRUE 42075
42060: PUSH
42061: LD_VAR 0 1
42065: PPUSH
42066: CALL_OW 263
42070: PUSH
42071: LD_INT 2
42073: NONEQUAL
42074: OR
42075: IFFALSE 42079
// exit ;
42077: GO 42395
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42079: LD_ADDR_VAR 0 6
42083: PUSH
42084: LD_INT 22
42086: PUSH
42087: LD_VAR 0 1
42091: PPUSH
42092: CALL_OW 255
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 2
42103: PUSH
42104: LD_INT 30
42106: PUSH
42107: LD_INT 36
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 34
42116: PUSH
42117: LD_INT 31
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: LIST
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PPUSH
42133: CALL_OW 69
42137: ST_TO_ADDR
// if not tmp then
42138: LD_VAR 0 6
42142: NOT
42143: IFFALSE 42147
// exit ;
42145: GO 42395
// result := [ ] ;
42147: LD_ADDR_VAR 0 2
42151: PUSH
42152: EMPTY
42153: ST_TO_ADDR
// for i in tmp do
42154: LD_ADDR_VAR 0 3
42158: PUSH
42159: LD_VAR 0 6
42163: PUSH
42164: FOR_IN
42165: IFFALSE 42236
// begin t := UnitsInside ( i ) ;
42167: LD_ADDR_VAR 0 4
42171: PUSH
42172: LD_VAR 0 3
42176: PPUSH
42177: CALL_OW 313
42181: ST_TO_ADDR
// if t then
42182: LD_VAR 0 4
42186: IFFALSE 42234
// for j in t do
42188: LD_ADDR_VAR 0 7
42192: PUSH
42193: LD_VAR 0 4
42197: PUSH
42198: FOR_IN
42199: IFFALSE 42232
// result := Replace ( result , result + 1 , j ) ;
42201: LD_ADDR_VAR 0 2
42205: PUSH
42206: LD_VAR 0 2
42210: PPUSH
42211: LD_VAR 0 2
42215: PUSH
42216: LD_INT 1
42218: PLUS
42219: PPUSH
42220: LD_VAR 0 7
42224: PPUSH
42225: CALL_OW 1
42229: ST_TO_ADDR
42230: GO 42198
42232: POP
42233: POP
// end ;
42234: GO 42164
42236: POP
42237: POP
// if not result then
42238: LD_VAR 0 2
42242: NOT
42243: IFFALSE 42247
// exit ;
42245: GO 42395
// mech := result [ 1 ] ;
42247: LD_ADDR_VAR 0 5
42251: PUSH
42252: LD_VAR 0 2
42256: PUSH
42257: LD_INT 1
42259: ARRAY
42260: ST_TO_ADDR
// if result > 1 then
42261: LD_VAR 0 2
42265: PUSH
42266: LD_INT 1
42268: GREATER
42269: IFFALSE 42381
// begin for i = 2 to result do
42271: LD_ADDR_VAR 0 3
42275: PUSH
42276: DOUBLE
42277: LD_INT 2
42279: DEC
42280: ST_TO_ADDR
42281: LD_VAR 0 2
42285: PUSH
42286: FOR_TO
42287: IFFALSE 42379
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42289: LD_ADDR_VAR 0 4
42293: PUSH
42294: LD_VAR 0 2
42298: PUSH
42299: LD_VAR 0 3
42303: ARRAY
42304: PPUSH
42305: LD_INT 3
42307: PPUSH
42308: CALL_OW 259
42312: PUSH
42313: LD_VAR 0 2
42317: PUSH
42318: LD_VAR 0 3
42322: ARRAY
42323: PPUSH
42324: CALL_OW 432
42328: MINUS
42329: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42330: LD_VAR 0 4
42334: PUSH
42335: LD_VAR 0 5
42339: PPUSH
42340: LD_INT 3
42342: PPUSH
42343: CALL_OW 259
42347: PUSH
42348: LD_VAR 0 5
42352: PPUSH
42353: CALL_OW 432
42357: MINUS
42358: GREATEREQUAL
42359: IFFALSE 42377
// mech := result [ i ] ;
42361: LD_ADDR_VAR 0 5
42365: PUSH
42366: LD_VAR 0 2
42370: PUSH
42371: LD_VAR 0 3
42375: ARRAY
42376: ST_TO_ADDR
// end ;
42377: GO 42286
42379: POP
42380: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42381: LD_VAR 0 1
42385: PPUSH
42386: LD_VAR 0 5
42390: PPUSH
42391: CALL_OW 135
// end ;
42395: LD_VAR 0 2
42399: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42400: LD_INT 0
42402: PPUSH
42403: PPUSH
42404: PPUSH
42405: PPUSH
42406: PPUSH
42407: PPUSH
42408: PPUSH
42409: PPUSH
42410: PPUSH
42411: PPUSH
42412: PPUSH
42413: PPUSH
42414: PPUSH
// result := [ ] ;
42415: LD_ADDR_VAR 0 7
42419: PUSH
42420: EMPTY
42421: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42422: LD_VAR 0 1
42426: PPUSH
42427: CALL_OW 266
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: IN
42442: NOT
42443: IFFALSE 42447
// exit ;
42445: GO 44087
// if name then
42447: LD_VAR 0 3
42451: IFFALSE 42467
// SetBName ( base_dep , name ) ;
42453: LD_VAR 0 1
42457: PPUSH
42458: LD_VAR 0 3
42462: PPUSH
42463: CALL_OW 500
// base := GetBase ( base_dep ) ;
42467: LD_ADDR_VAR 0 15
42471: PUSH
42472: LD_VAR 0 1
42476: PPUSH
42477: CALL_OW 274
42481: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42482: LD_ADDR_VAR 0 16
42486: PUSH
42487: LD_VAR 0 1
42491: PPUSH
42492: CALL_OW 255
42496: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42497: LD_ADDR_VAR 0 17
42501: PUSH
42502: LD_VAR 0 1
42506: PPUSH
42507: CALL_OW 248
42511: ST_TO_ADDR
// if sources then
42512: LD_VAR 0 5
42516: IFFALSE 42563
// for i = 1 to 3 do
42518: LD_ADDR_VAR 0 8
42522: PUSH
42523: DOUBLE
42524: LD_INT 1
42526: DEC
42527: ST_TO_ADDR
42528: LD_INT 3
42530: PUSH
42531: FOR_TO
42532: IFFALSE 42561
// AddResourceType ( base , i , sources [ i ] ) ;
42534: LD_VAR 0 15
42538: PPUSH
42539: LD_VAR 0 8
42543: PPUSH
42544: LD_VAR 0 5
42548: PUSH
42549: LD_VAR 0 8
42553: ARRAY
42554: PPUSH
42555: CALL_OW 276
42559: GO 42531
42561: POP
42562: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42563: LD_ADDR_VAR 0 18
42567: PUSH
42568: LD_VAR 0 15
42572: PPUSH
42573: LD_VAR 0 2
42577: PPUSH
42578: LD_INT 1
42580: PPUSH
42581: CALL 41822 0 3
42585: ST_TO_ADDR
// InitHc ;
42586: CALL_OW 19
// InitUc ;
42590: CALL_OW 18
// uc_side := side ;
42594: LD_ADDR_OWVAR 20
42598: PUSH
42599: LD_VAR 0 16
42603: ST_TO_ADDR
// uc_nation := nation ;
42604: LD_ADDR_OWVAR 21
42608: PUSH
42609: LD_VAR 0 17
42613: ST_TO_ADDR
// if buildings then
42614: LD_VAR 0 18
42618: IFFALSE 43946
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42620: LD_ADDR_VAR 0 19
42624: PUSH
42625: LD_VAR 0 18
42629: PPUSH
42630: LD_INT 2
42632: PUSH
42633: LD_INT 30
42635: PUSH
42636: LD_INT 29
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 30
42645: PUSH
42646: LD_INT 30
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: LIST
42657: PPUSH
42658: CALL_OW 72
42662: ST_TO_ADDR
// if tmp then
42663: LD_VAR 0 19
42667: IFFALSE 42715
// for i in tmp do
42669: LD_ADDR_VAR 0 8
42673: PUSH
42674: LD_VAR 0 19
42678: PUSH
42679: FOR_IN
42680: IFFALSE 42713
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42682: LD_VAR 0 8
42686: PPUSH
42687: CALL_OW 250
42691: PPUSH
42692: LD_VAR 0 8
42696: PPUSH
42697: CALL_OW 251
42701: PPUSH
42702: LD_VAR 0 16
42706: PPUSH
42707: CALL_OW 441
42711: GO 42679
42713: POP
42714: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42715: LD_VAR 0 18
42719: PPUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 30
42725: PUSH
42726: LD_INT 32
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 30
42735: PUSH
42736: LD_INT 33
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: PPUSH
42748: CALL_OW 72
42752: IFFALSE 42840
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42754: LD_ADDR_VAR 0 8
42758: PUSH
42759: LD_VAR 0 18
42763: PPUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 30
42769: PUSH
42770: LD_INT 32
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 30
42779: PUSH
42780: LD_INT 33
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: PPUSH
42792: CALL_OW 72
42796: PUSH
42797: FOR_IN
42798: IFFALSE 42838
// begin if not GetBWeapon ( i ) then
42800: LD_VAR 0 8
42804: PPUSH
42805: CALL_OW 269
42809: NOT
42810: IFFALSE 42836
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42812: LD_VAR 0 8
42816: PPUSH
42817: LD_VAR 0 8
42821: PPUSH
42822: LD_VAR 0 2
42826: PPUSH
42827: CALL 44092 0 2
42831: PPUSH
42832: CALL_OW 431
// end ;
42836: GO 42797
42838: POP
42839: POP
// end ; for i = 1 to personel do
42840: LD_ADDR_VAR 0 8
42844: PUSH
42845: DOUBLE
42846: LD_INT 1
42848: DEC
42849: ST_TO_ADDR
42850: LD_VAR 0 6
42854: PUSH
42855: FOR_TO
42856: IFFALSE 43926
// begin if i > 4 then
42858: LD_VAR 0 8
42862: PUSH
42863: LD_INT 4
42865: GREATER
42866: IFFALSE 42870
// break ;
42868: GO 43926
// case i of 1 :
42870: LD_VAR 0 8
42874: PUSH
42875: LD_INT 1
42877: DOUBLE
42878: EQUAL
42879: IFTRUE 42883
42881: GO 42963
42883: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42884: LD_ADDR_VAR 0 12
42888: PUSH
42889: LD_VAR 0 18
42893: PPUSH
42894: LD_INT 22
42896: PUSH
42897: LD_VAR 0 16
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 58
42908: PUSH
42909: EMPTY
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: LD_INT 30
42917: PUSH
42918: LD_INT 32
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 30
42927: PUSH
42928: LD_INT 4
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 30
42937: PUSH
42938: LD_INT 5
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: PPUSH
42956: CALL_OW 72
42960: ST_TO_ADDR
42961: GO 43185
42963: LD_INT 2
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42971
42969: GO 43033
42971: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42972: LD_ADDR_VAR 0 12
42976: PUSH
42977: LD_VAR 0 18
42981: PPUSH
42982: LD_INT 22
42984: PUSH
42985: LD_VAR 0 16
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 30
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 30
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: LIST
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PPUSH
43026: CALL_OW 72
43030: ST_TO_ADDR
43031: GO 43185
43033: LD_INT 3
43035: DOUBLE
43036: EQUAL
43037: IFTRUE 43041
43039: GO 43103
43041: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43042: LD_ADDR_VAR 0 12
43046: PUSH
43047: LD_VAR 0 18
43051: PPUSH
43052: LD_INT 22
43054: PUSH
43055: LD_VAR 0 16
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 30
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 30
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PPUSH
43096: CALL_OW 72
43100: ST_TO_ADDR
43101: GO 43185
43103: LD_INT 4
43105: DOUBLE
43106: EQUAL
43107: IFTRUE 43111
43109: GO 43184
43111: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43112: LD_ADDR_VAR 0 12
43116: PUSH
43117: LD_VAR 0 18
43121: PPUSH
43122: LD_INT 22
43124: PUSH
43125: LD_VAR 0 16
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 30
43139: PUSH
43140: LD_INT 6
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 30
43149: PUSH
43150: LD_INT 7
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 30
43159: PUSH
43160: LD_INT 8
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PPUSH
43177: CALL_OW 72
43181: ST_TO_ADDR
43182: GO 43185
43184: POP
// if i = 1 then
43185: LD_VAR 0 8
43189: PUSH
43190: LD_INT 1
43192: EQUAL
43193: IFFALSE 43304
// begin tmp := [ ] ;
43195: LD_ADDR_VAR 0 19
43199: PUSH
43200: EMPTY
43201: ST_TO_ADDR
// for j in f do
43202: LD_ADDR_VAR 0 9
43206: PUSH
43207: LD_VAR 0 12
43211: PUSH
43212: FOR_IN
43213: IFFALSE 43286
// if GetBType ( j ) = b_bunker then
43215: LD_VAR 0 9
43219: PPUSH
43220: CALL_OW 266
43224: PUSH
43225: LD_INT 32
43227: EQUAL
43228: IFFALSE 43255
// tmp := Insert ( tmp , 1 , j ) else
43230: LD_ADDR_VAR 0 19
43234: PUSH
43235: LD_VAR 0 19
43239: PPUSH
43240: LD_INT 1
43242: PPUSH
43243: LD_VAR 0 9
43247: PPUSH
43248: CALL_OW 2
43252: ST_TO_ADDR
43253: GO 43284
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43255: LD_ADDR_VAR 0 19
43259: PUSH
43260: LD_VAR 0 19
43264: PPUSH
43265: LD_VAR 0 19
43269: PUSH
43270: LD_INT 1
43272: PLUS
43273: PPUSH
43274: LD_VAR 0 9
43278: PPUSH
43279: CALL_OW 2
43283: ST_TO_ADDR
43284: GO 43212
43286: POP
43287: POP
// if tmp then
43288: LD_VAR 0 19
43292: IFFALSE 43304
// f := tmp ;
43294: LD_ADDR_VAR 0 12
43298: PUSH
43299: LD_VAR 0 19
43303: ST_TO_ADDR
// end ; x := personel [ i ] ;
43304: LD_ADDR_VAR 0 13
43308: PUSH
43309: LD_VAR 0 6
43313: PUSH
43314: LD_VAR 0 8
43318: ARRAY
43319: ST_TO_ADDR
// if x = - 1 then
43320: LD_VAR 0 13
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: EQUAL
43329: IFFALSE 43540
// begin for j in f do
43331: LD_ADDR_VAR 0 9
43335: PUSH
43336: LD_VAR 0 12
43340: PUSH
43341: FOR_IN
43342: IFFALSE 43536
// repeat InitHc ;
43344: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43348: LD_VAR 0 9
43352: PPUSH
43353: CALL_OW 266
43357: PUSH
43358: LD_INT 5
43360: EQUAL
43361: IFFALSE 43431
// begin if UnitsInside ( j ) < 3 then
43363: LD_VAR 0 9
43367: PPUSH
43368: CALL_OW 313
43372: PUSH
43373: LD_INT 3
43375: LESS
43376: IFFALSE 43412
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43378: LD_INT 0
43380: PPUSH
43381: LD_INT 5
43383: PUSH
43384: LD_INT 8
43386: PUSH
43387: LD_INT 9
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: LIST
43394: PUSH
43395: LD_VAR 0 17
43399: ARRAY
43400: PPUSH
43401: LD_VAR 0 4
43405: PPUSH
43406: CALL_OW 380
43410: GO 43429
// PrepareHuman ( false , i , skill ) ;
43412: LD_INT 0
43414: PPUSH
43415: LD_VAR 0 8
43419: PPUSH
43420: LD_VAR 0 4
43424: PPUSH
43425: CALL_OW 380
// end else
43429: GO 43448
// PrepareHuman ( false , i , skill ) ;
43431: LD_INT 0
43433: PPUSH
43434: LD_VAR 0 8
43438: PPUSH
43439: LD_VAR 0 4
43443: PPUSH
43444: CALL_OW 380
// un := CreateHuman ;
43448: LD_ADDR_VAR 0 14
43452: PUSH
43453: CALL_OW 44
43457: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43458: LD_ADDR_VAR 0 7
43462: PUSH
43463: LD_VAR 0 7
43467: PPUSH
43468: LD_INT 1
43470: PPUSH
43471: LD_VAR 0 14
43475: PPUSH
43476: CALL_OW 2
43480: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43481: LD_VAR 0 14
43485: PPUSH
43486: LD_VAR 0 9
43490: PPUSH
43491: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43495: LD_VAR 0 9
43499: PPUSH
43500: CALL_OW 313
43504: PUSH
43505: LD_INT 6
43507: EQUAL
43508: IFTRUE 43532
43510: PUSH
43511: LD_VAR 0 9
43515: PPUSH
43516: CALL_OW 266
43520: PUSH
43521: LD_INT 32
43523: PUSH
43524: LD_INT 31
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: IN
43531: OR
43532: IFFALSE 43344
43534: GO 43341
43536: POP
43537: POP
// end else
43538: GO 43924
// for j = 1 to x do
43540: LD_ADDR_VAR 0 9
43544: PUSH
43545: DOUBLE
43546: LD_INT 1
43548: DEC
43549: ST_TO_ADDR
43550: LD_VAR 0 13
43554: PUSH
43555: FOR_TO
43556: IFFALSE 43922
// begin InitHc ;
43558: CALL_OW 19
// if not f then
43562: LD_VAR 0 12
43566: NOT
43567: IFFALSE 43656
// begin PrepareHuman ( false , i , skill ) ;
43569: LD_INT 0
43571: PPUSH
43572: LD_VAR 0 8
43576: PPUSH
43577: LD_VAR 0 4
43581: PPUSH
43582: CALL_OW 380
// un := CreateHuman ;
43586: LD_ADDR_VAR 0 14
43590: PUSH
43591: CALL_OW 44
43595: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43596: LD_ADDR_VAR 0 7
43600: PUSH
43601: LD_VAR 0 7
43605: PPUSH
43606: LD_INT 1
43608: PPUSH
43609: LD_VAR 0 14
43613: PPUSH
43614: CALL_OW 2
43618: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43619: LD_VAR 0 14
43623: PPUSH
43624: LD_VAR 0 1
43628: PPUSH
43629: CALL_OW 250
43633: PPUSH
43634: LD_VAR 0 1
43638: PPUSH
43639: CALL_OW 251
43643: PPUSH
43644: LD_INT 10
43646: PPUSH
43647: LD_INT 0
43649: PPUSH
43650: CALL_OW 50
// continue ;
43654: GO 43555
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43656: LD_VAR 0 12
43660: PUSH
43661: LD_INT 1
43663: ARRAY
43664: PPUSH
43665: CALL_OW 313
43669: IFFALSE 43697
43671: PUSH
43672: LD_VAR 0 12
43676: PUSH
43677: LD_INT 1
43679: ARRAY
43680: PPUSH
43681: CALL_OW 266
43685: PUSH
43686: LD_INT 32
43688: PUSH
43689: LD_INT 31
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: IN
43696: AND
43697: IFTRUE 43718
43699: PUSH
43700: LD_VAR 0 12
43704: PUSH
43705: LD_INT 1
43707: ARRAY
43708: PPUSH
43709: CALL_OW 313
43713: PUSH
43714: LD_INT 6
43716: EQUAL
43717: OR
43718: IFFALSE 43738
// f := Delete ( f , 1 ) ;
43720: LD_ADDR_VAR 0 12
43724: PUSH
43725: LD_VAR 0 12
43729: PPUSH
43730: LD_INT 1
43732: PPUSH
43733: CALL_OW 3
43737: ST_TO_ADDR
// if not f then
43738: LD_VAR 0 12
43742: NOT
43743: IFFALSE 43761
// begin x := x + 2 ;
43745: LD_ADDR_VAR 0 13
43749: PUSH
43750: LD_VAR 0 13
43754: PUSH
43755: LD_INT 2
43757: PLUS
43758: ST_TO_ADDR
// continue ;
43759: GO 43555
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43761: LD_VAR 0 12
43765: PUSH
43766: LD_INT 1
43768: ARRAY
43769: PPUSH
43770: CALL_OW 266
43774: PUSH
43775: LD_INT 5
43777: EQUAL
43778: IFFALSE 43852
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43780: LD_VAR 0 12
43784: PUSH
43785: LD_INT 1
43787: ARRAY
43788: PPUSH
43789: CALL_OW 313
43793: PUSH
43794: LD_INT 3
43796: LESS
43797: IFFALSE 43833
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43799: LD_INT 0
43801: PPUSH
43802: LD_INT 5
43804: PUSH
43805: LD_INT 8
43807: PUSH
43808: LD_INT 9
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: PUSH
43816: LD_VAR 0 17
43820: ARRAY
43821: PPUSH
43822: LD_VAR 0 4
43826: PPUSH
43827: CALL_OW 380
43831: GO 43850
// PrepareHuman ( false , i , skill ) ;
43833: LD_INT 0
43835: PPUSH
43836: LD_VAR 0 8
43840: PPUSH
43841: LD_VAR 0 4
43845: PPUSH
43846: CALL_OW 380
// end else
43850: GO 43869
// PrepareHuman ( false , i , skill ) ;
43852: LD_INT 0
43854: PPUSH
43855: LD_VAR 0 8
43859: PPUSH
43860: LD_VAR 0 4
43864: PPUSH
43865: CALL_OW 380
// un := CreateHuman ;
43869: LD_ADDR_VAR 0 14
43873: PUSH
43874: CALL_OW 44
43878: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43879: LD_ADDR_VAR 0 7
43883: PUSH
43884: LD_VAR 0 7
43888: PPUSH
43889: LD_INT 1
43891: PPUSH
43892: LD_VAR 0 14
43896: PPUSH
43897: CALL_OW 2
43901: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43902: LD_VAR 0 14
43906: PPUSH
43907: LD_VAR 0 12
43911: PUSH
43912: LD_INT 1
43914: ARRAY
43915: PPUSH
43916: CALL_OW 52
// end ;
43920: GO 43555
43922: POP
43923: POP
// end ;
43924: GO 42855
43926: POP
43927: POP
// result := result ^ buildings ;
43928: LD_ADDR_VAR 0 7
43932: PUSH
43933: LD_VAR 0 7
43937: PUSH
43938: LD_VAR 0 18
43942: ADD
43943: ST_TO_ADDR
// end else
43944: GO 44087
// begin for i = 1 to personel do
43946: LD_ADDR_VAR 0 8
43950: PUSH
43951: DOUBLE
43952: LD_INT 1
43954: DEC
43955: ST_TO_ADDR
43956: LD_VAR 0 6
43960: PUSH
43961: FOR_TO
43962: IFFALSE 44085
// begin if i > 4 then
43964: LD_VAR 0 8
43968: PUSH
43969: LD_INT 4
43971: GREATER
43972: IFFALSE 43976
// break ;
43974: GO 44085
// x := personel [ i ] ;
43976: LD_ADDR_VAR 0 13
43980: PUSH
43981: LD_VAR 0 6
43985: PUSH
43986: LD_VAR 0 8
43990: ARRAY
43991: ST_TO_ADDR
// if x = - 1 then
43992: LD_VAR 0 13
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: EQUAL
44001: IFFALSE 44005
// continue ;
44003: GO 43961
// PrepareHuman ( false , i , skill ) ;
44005: LD_INT 0
44007: PPUSH
44008: LD_VAR 0 8
44012: PPUSH
44013: LD_VAR 0 4
44017: PPUSH
44018: CALL_OW 380
// un := CreateHuman ;
44022: LD_ADDR_VAR 0 14
44026: PUSH
44027: CALL_OW 44
44031: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44032: LD_VAR 0 14
44036: PPUSH
44037: LD_VAR 0 1
44041: PPUSH
44042: CALL_OW 250
44046: PPUSH
44047: LD_VAR 0 1
44051: PPUSH
44052: CALL_OW 251
44056: PPUSH
44057: LD_INT 10
44059: PPUSH
44060: LD_INT 0
44062: PPUSH
44063: CALL_OW 50
// result := result ^ un ;
44067: LD_ADDR_VAR 0 7
44071: PUSH
44072: LD_VAR 0 7
44076: PUSH
44077: LD_VAR 0 14
44081: ADD
44082: ST_TO_ADDR
// end ;
44083: GO 43961
44085: POP
44086: POP
// end ; end ;
44087: LD_VAR 0 7
44091: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44092: LD_INT 0
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
44098: PPUSH
44099: PPUSH
44100: PPUSH
44101: PPUSH
44102: PPUSH
44103: PPUSH
44104: PPUSH
44105: PPUSH
44106: PPUSH
44107: PPUSH
44108: PPUSH
44109: PPUSH
// result := false ;
44110: LD_ADDR_VAR 0 3
44114: PUSH
44115: LD_INT 0
44117: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44118: LD_VAR 0 1
44122: NOT
44123: IFTRUE 44148
44125: PUSH
44126: LD_VAR 0 1
44130: PPUSH
44131: CALL_OW 266
44135: PUSH
44136: LD_INT 32
44138: PUSH
44139: LD_INT 33
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: IN
44146: NOT
44147: OR
44148: IFFALSE 44152
// exit ;
44150: GO 45287
// nat := GetNation ( tower ) ;
44152: LD_ADDR_VAR 0 12
44156: PUSH
44157: LD_VAR 0 1
44161: PPUSH
44162: CALL_OW 248
44166: ST_TO_ADDR
// side := GetSide ( tower ) ;
44167: LD_ADDR_VAR 0 16
44171: PUSH
44172: LD_VAR 0 1
44176: PPUSH
44177: CALL_OW 255
44181: ST_TO_ADDR
// x := GetX ( tower ) ;
44182: LD_ADDR_VAR 0 10
44186: PUSH
44187: LD_VAR 0 1
44191: PPUSH
44192: CALL_OW 250
44196: ST_TO_ADDR
// y := GetY ( tower ) ;
44197: LD_ADDR_VAR 0 11
44201: PUSH
44202: LD_VAR 0 1
44206: PPUSH
44207: CALL_OW 251
44211: ST_TO_ADDR
// if not x or not y then
44212: LD_VAR 0 10
44216: NOT
44217: IFTRUE 44226
44219: PUSH
44220: LD_VAR 0 11
44224: NOT
44225: OR
44226: IFFALSE 44230
// exit ;
44228: GO 45287
// weapon := 0 ;
44230: LD_ADDR_VAR 0 18
44234: PUSH
44235: LD_INT 0
44237: ST_TO_ADDR
// fac_list := [ ] ;
44238: LD_ADDR_VAR 0 17
44242: PUSH
44243: EMPTY
44244: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44245: LD_ADDR_VAR 0 6
44249: PUSH
44250: LD_VAR 0 1
44254: PPUSH
44255: CALL_OW 274
44259: PPUSH
44260: LD_VAR 0 2
44264: PPUSH
44265: LD_INT 0
44267: PPUSH
44268: CALL 41822 0 3
44272: PPUSH
44273: LD_INT 30
44275: PUSH
44276: LD_INT 3
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PPUSH
44283: CALL_OW 72
44287: ST_TO_ADDR
// if not factories then
44288: LD_VAR 0 6
44292: NOT
44293: IFFALSE 44297
// exit ;
44295: GO 45287
// for i in factories do
44297: LD_ADDR_VAR 0 8
44301: PUSH
44302: LD_VAR 0 6
44306: PUSH
44307: FOR_IN
44308: IFFALSE 44333
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44310: LD_ADDR_VAR 0 17
44314: PUSH
44315: LD_VAR 0 17
44319: PUSH
44320: LD_VAR 0 8
44324: PPUSH
44325: CALL_OW 478
44329: UNION
44330: ST_TO_ADDR
44331: GO 44307
44333: POP
44334: POP
// if not fac_list then
44335: LD_VAR 0 17
44339: NOT
44340: IFFALSE 44344
// exit ;
44342: GO 45287
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44344: LD_ADDR_VAR 0 5
44348: PUSH
44349: LD_INT 4
44351: PUSH
44352: LD_INT 5
44354: PUSH
44355: LD_INT 9
44357: PUSH
44358: LD_INT 10
44360: PUSH
44361: LD_INT 6
44363: PUSH
44364: LD_INT 7
44366: PUSH
44367: LD_INT 11
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 27
44381: PUSH
44382: LD_INT 28
44384: PUSH
44385: LD_INT 26
44387: PUSH
44388: LD_INT 30
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 43
44399: PUSH
44400: LD_INT 44
44402: PUSH
44403: LD_INT 46
44405: PUSH
44406: LD_INT 45
44408: PUSH
44409: LD_INT 47
44411: PUSH
44412: LD_INT 49
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: LIST
44427: PUSH
44428: LD_VAR 0 12
44432: ARRAY
44433: ST_TO_ADDR
// list := list isect fac_list ;
44434: LD_ADDR_VAR 0 5
44438: PUSH
44439: LD_VAR 0 5
44443: PUSH
44444: LD_VAR 0 17
44448: ISECT
44449: ST_TO_ADDR
// if not list then
44450: LD_VAR 0 5
44454: NOT
44455: IFFALSE 44459
// exit ;
44457: GO 45287
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44459: LD_VAR 0 12
44463: PUSH
44464: LD_INT 3
44466: EQUAL
44467: IFFALSE 44479
44469: PUSH
44470: LD_INT 49
44472: PUSH
44473: LD_VAR 0 5
44477: IN
44478: AND
44479: IFFALSE 44499
44481: PUSH
44482: LD_INT 31
44484: PPUSH
44485: LD_VAR 0 16
44489: PPUSH
44490: CALL_OW 321
44494: PUSH
44495: LD_INT 2
44497: EQUAL
44498: AND
44499: IFFALSE 44559
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44501: LD_INT 22
44503: PUSH
44504: LD_VAR 0 16
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 35
44515: PUSH
44516: LD_INT 49
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 91
44525: PUSH
44526: LD_VAR 0 1
44530: PUSH
44531: LD_INT 10
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: PPUSH
44544: CALL_OW 69
44548: NOT
44549: IFFALSE 44559
// weapon := ru_time_lapser ;
44551: LD_ADDR_VAR 0 18
44555: PUSH
44556: LD_INT 49
44558: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44559: LD_VAR 0 12
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: IN
44574: IFFALSE 44598
44576: PUSH
44577: LD_INT 11
44579: PUSH
44580: LD_VAR 0 5
44584: IN
44585: IFTRUE 44597
44587: PUSH
44588: LD_INT 30
44590: PUSH
44591: LD_VAR 0 5
44595: IN
44596: OR
44597: AND
44598: IFFALSE 44618
44600: PUSH
44601: LD_INT 6
44603: PPUSH
44604: LD_VAR 0 16
44608: PPUSH
44609: CALL_OW 321
44613: PUSH
44614: LD_INT 2
44616: EQUAL
44617: AND
44618: IFFALSE 44785
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44620: LD_INT 22
44622: PUSH
44623: LD_VAR 0 16
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 35
44637: PUSH
44638: LD_INT 11
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 35
44647: PUSH
44648: LD_INT 30
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 91
44662: PUSH
44663: LD_VAR 0 1
44667: PUSH
44668: LD_INT 18
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: PPUSH
44681: CALL_OW 69
44685: NOT
44686: IFFALSE 44762
44688: PUSH
44689: LD_INT 22
44691: PUSH
44692: LD_VAR 0 16
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: LD_INT 30
44706: PUSH
44707: LD_INT 32
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 30
44716: PUSH
44717: LD_INT 33
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 91
44731: PUSH
44732: LD_VAR 0 1
44736: PUSH
44737: LD_INT 12
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: PUSH
44750: EMPTY
44751: LIST
44752: PPUSH
44753: CALL_OW 69
44757: PUSH
44758: LD_INT 2
44760: GREATER
44761: AND
44762: IFFALSE 44785
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44764: LD_ADDR_VAR 0 18
44768: PUSH
44769: LD_INT 11
44771: PUSH
44772: LD_INT 30
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_VAR 0 12
44783: ARRAY
44784: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44785: LD_VAR 0 18
44789: NOT
44790: IFFALSE 44810
44792: PUSH
44793: LD_INT 40
44795: PPUSH
44796: LD_VAR 0 16
44800: PPUSH
44801: CALL_OW 321
44805: PUSH
44806: LD_INT 2
44808: EQUAL
44809: AND
44810: IFFALSE 44846
44812: PUSH
44813: LD_INT 7
44815: PUSH
44816: LD_VAR 0 5
44820: IN
44821: IFTRUE 44833
44823: PUSH
44824: LD_INT 28
44826: PUSH
44827: LD_VAR 0 5
44831: IN
44832: OR
44833: IFTRUE 44845
44835: PUSH
44836: LD_INT 45
44838: PUSH
44839: LD_VAR 0 5
44843: IN
44844: OR
44845: AND
44846: IFFALSE 45100
// begin hex := GetHexInfo ( x , y ) ;
44848: LD_ADDR_VAR 0 4
44852: PUSH
44853: LD_VAR 0 10
44857: PPUSH
44858: LD_VAR 0 11
44862: PPUSH
44863: CALL_OW 546
44867: ST_TO_ADDR
// if hex [ 1 ] then
44868: LD_VAR 0 4
44872: PUSH
44873: LD_INT 1
44875: ARRAY
44876: IFFALSE 44880
// exit ;
44878: GO 45287
// height := hex [ 2 ] ;
44880: LD_ADDR_VAR 0 15
44884: PUSH
44885: LD_VAR 0 4
44889: PUSH
44890: LD_INT 2
44892: ARRAY
44893: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44894: LD_ADDR_VAR 0 14
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 3
44907: PUSH
44908: LD_INT 5
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: ST_TO_ADDR
// for i in tmp do
44917: LD_ADDR_VAR 0 8
44921: PUSH
44922: LD_VAR 0 14
44926: PUSH
44927: FOR_IN
44928: IFFALSE 45098
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44930: LD_ADDR_VAR 0 9
44934: PUSH
44935: LD_VAR 0 10
44939: PPUSH
44940: LD_VAR 0 8
44944: PPUSH
44945: LD_INT 5
44947: PPUSH
44948: CALL_OW 272
44952: PUSH
44953: LD_VAR 0 11
44957: PPUSH
44958: LD_VAR 0 8
44962: PPUSH
44963: LD_INT 5
44965: PPUSH
44966: CALL_OW 273
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44975: LD_VAR 0 9
44979: PUSH
44980: LD_INT 1
44982: ARRAY
44983: PPUSH
44984: LD_VAR 0 9
44988: PUSH
44989: LD_INT 2
44991: ARRAY
44992: PPUSH
44993: CALL_OW 488
44997: IFFALSE 45096
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44999: LD_ADDR_VAR 0 4
45003: PUSH
45004: LD_VAR 0 9
45008: PUSH
45009: LD_INT 1
45011: ARRAY
45012: PPUSH
45013: LD_VAR 0 9
45017: PUSH
45018: LD_INT 2
45020: ARRAY
45021: PPUSH
45022: CALL_OW 546
45026: ST_TO_ADDR
// if hex [ 1 ] then
45027: LD_VAR 0 4
45031: PUSH
45032: LD_INT 1
45034: ARRAY
45035: IFFALSE 45039
// continue ;
45037: GO 44927
// h := hex [ 2 ] ;
45039: LD_ADDR_VAR 0 13
45043: PUSH
45044: LD_VAR 0 4
45048: PUSH
45049: LD_INT 2
45051: ARRAY
45052: ST_TO_ADDR
// if h + 7 < height then
45053: LD_VAR 0 13
45057: PUSH
45058: LD_INT 7
45060: PLUS
45061: PUSH
45062: LD_VAR 0 15
45066: LESS
45067: IFFALSE 45096
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45069: LD_ADDR_VAR 0 18
45073: PUSH
45074: LD_INT 7
45076: PUSH
45077: LD_INT 28
45079: PUSH
45080: LD_INT 45
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: PUSH
45088: LD_VAR 0 12
45092: ARRAY
45093: ST_TO_ADDR
// break ;
45094: GO 45098
// end ; end ; end ;
45096: GO 44927
45098: POP
45099: POP
// end ; if not weapon then
45100: LD_VAR 0 18
45104: NOT
45105: IFFALSE 45165
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45107: LD_ADDR_VAR 0 5
45111: PUSH
45112: LD_VAR 0 5
45116: PUSH
45117: LD_INT 11
45119: PUSH
45120: LD_INT 30
45122: PUSH
45123: LD_INT 49
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: DIFF
45131: ST_TO_ADDR
// if not list then
45132: LD_VAR 0 5
45136: NOT
45137: IFFALSE 45141
// exit ;
45139: GO 45287
// weapon := list [ rand ( 1 , list ) ] ;
45141: LD_ADDR_VAR 0 18
45145: PUSH
45146: LD_VAR 0 5
45150: PUSH
45151: LD_INT 1
45153: PPUSH
45154: LD_VAR 0 5
45158: PPUSH
45159: CALL_OW 12
45163: ARRAY
45164: ST_TO_ADDR
// end ; if weapon then
45165: LD_VAR 0 18
45169: IFFALSE 45287
// begin tmp := CostOfWeapon ( weapon ) ;
45171: LD_ADDR_VAR 0 14
45175: PUSH
45176: LD_VAR 0 18
45180: PPUSH
45181: CALL_OW 451
45185: ST_TO_ADDR
// j := GetBase ( tower ) ;
45186: LD_ADDR_VAR 0 9
45190: PUSH
45191: LD_VAR 0 1
45195: PPUSH
45196: CALL_OW 274
45200: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45201: LD_VAR 0 9
45205: PPUSH
45206: LD_INT 1
45208: PPUSH
45209: CALL_OW 275
45213: PUSH
45214: LD_VAR 0 14
45218: PUSH
45219: LD_INT 1
45221: ARRAY
45222: GREATEREQUAL
45223: IFFALSE 45249
45225: PUSH
45226: LD_VAR 0 9
45230: PPUSH
45231: LD_INT 2
45233: PPUSH
45234: CALL_OW 275
45238: PUSH
45239: LD_VAR 0 14
45243: PUSH
45244: LD_INT 2
45246: ARRAY
45247: GREATEREQUAL
45248: AND
45249: IFFALSE 45275
45251: PUSH
45252: LD_VAR 0 9
45256: PPUSH
45257: LD_INT 3
45259: PPUSH
45260: CALL_OW 275
45264: PUSH
45265: LD_VAR 0 14
45269: PUSH
45270: LD_INT 3
45272: ARRAY
45273: GREATEREQUAL
45274: AND
45275: IFFALSE 45287
// result := weapon ;
45277: LD_ADDR_VAR 0 3
45281: PUSH
45282: LD_VAR 0 18
45286: ST_TO_ADDR
// end ; end ;
45287: LD_VAR 0 3
45291: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45292: LD_INT 0
45294: PPUSH
45295: PPUSH
// result := true ;
45296: LD_ADDR_VAR 0 3
45300: PUSH
45301: LD_INT 1
45303: ST_TO_ADDR
// if array1 = array2 then
45304: LD_VAR 0 1
45308: PUSH
45309: LD_VAR 0 2
45313: EQUAL
45314: IFFALSE 45374
// begin for i = 1 to array1 do
45316: LD_ADDR_VAR 0 4
45320: PUSH
45321: DOUBLE
45322: LD_INT 1
45324: DEC
45325: ST_TO_ADDR
45326: LD_VAR 0 1
45330: PUSH
45331: FOR_TO
45332: IFFALSE 45370
// if array1 [ i ] <> array2 [ i ] then
45334: LD_VAR 0 1
45338: PUSH
45339: LD_VAR 0 4
45343: ARRAY
45344: PUSH
45345: LD_VAR 0 2
45349: PUSH
45350: LD_VAR 0 4
45354: ARRAY
45355: NONEQUAL
45356: IFFALSE 45368
// begin result := false ;
45358: LD_ADDR_VAR 0 3
45362: PUSH
45363: LD_INT 0
45365: ST_TO_ADDR
// break ;
45366: GO 45370
// end ;
45368: GO 45331
45370: POP
45371: POP
// end else
45372: GO 45382
// result := false ;
45374: LD_ADDR_VAR 0 3
45378: PUSH
45379: LD_INT 0
45381: ST_TO_ADDR
// end ;
45382: LD_VAR 0 3
45386: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45387: LD_INT 0
45389: PPUSH
45390: PPUSH
// if not array1 or not array2 then
45391: LD_VAR 0 1
45395: NOT
45396: IFTRUE 45405
45398: PUSH
45399: LD_VAR 0 2
45403: NOT
45404: OR
45405: IFFALSE 45409
// exit ;
45407: GO 45473
// result := true ;
45409: LD_ADDR_VAR 0 3
45413: PUSH
45414: LD_INT 1
45416: ST_TO_ADDR
// for i = 1 to array1 do
45417: LD_ADDR_VAR 0 4
45421: PUSH
45422: DOUBLE
45423: LD_INT 1
45425: DEC
45426: ST_TO_ADDR
45427: LD_VAR 0 1
45431: PUSH
45432: FOR_TO
45433: IFFALSE 45471
// if array1 [ i ] <> array2 [ i ] then
45435: LD_VAR 0 1
45439: PUSH
45440: LD_VAR 0 4
45444: ARRAY
45445: PUSH
45446: LD_VAR 0 2
45450: PUSH
45451: LD_VAR 0 4
45455: ARRAY
45456: NONEQUAL
45457: IFFALSE 45469
// begin result := false ;
45459: LD_ADDR_VAR 0 3
45463: PUSH
45464: LD_INT 0
45466: ST_TO_ADDR
// break ;
45467: GO 45471
// end ;
45469: GO 45432
45471: POP
45472: POP
// end ;
45473: LD_VAR 0 3
45477: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45478: LD_INT 0
45480: PPUSH
45481: PPUSH
45482: PPUSH
// pom := GetBase ( fac ) ;
45483: LD_ADDR_VAR 0 5
45487: PUSH
45488: LD_VAR 0 1
45492: PPUSH
45493: CALL_OW 274
45497: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45498: LD_ADDR_VAR 0 4
45502: PUSH
45503: LD_VAR 0 2
45507: PUSH
45508: LD_INT 1
45510: ARRAY
45511: PPUSH
45512: LD_VAR 0 2
45516: PUSH
45517: LD_INT 2
45519: ARRAY
45520: PPUSH
45521: LD_VAR 0 2
45525: PUSH
45526: LD_INT 3
45528: ARRAY
45529: PPUSH
45530: LD_VAR 0 2
45534: PUSH
45535: LD_INT 4
45537: ARRAY
45538: PPUSH
45539: CALL_OW 449
45543: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45544: LD_ADDR_VAR 0 3
45548: PUSH
45549: LD_VAR 0 5
45553: PPUSH
45554: LD_INT 1
45556: PPUSH
45557: CALL_OW 275
45561: PUSH
45562: LD_VAR 0 4
45566: PUSH
45567: LD_INT 1
45569: ARRAY
45570: GREATEREQUAL
45571: IFFALSE 45597
45573: PUSH
45574: LD_VAR 0 5
45578: PPUSH
45579: LD_INT 2
45581: PPUSH
45582: CALL_OW 275
45586: PUSH
45587: LD_VAR 0 4
45591: PUSH
45592: LD_INT 2
45594: ARRAY
45595: GREATEREQUAL
45596: AND
45597: IFFALSE 45623
45599: PUSH
45600: LD_VAR 0 5
45604: PPUSH
45605: LD_INT 3
45607: PPUSH
45608: CALL_OW 275
45612: PUSH
45613: LD_VAR 0 4
45617: PUSH
45618: LD_INT 3
45620: ARRAY
45621: GREATEREQUAL
45622: AND
45623: ST_TO_ADDR
// end ;
45624: LD_VAR 0 3
45628: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45629: LD_INT 0
45631: PPUSH
45632: PPUSH
45633: PPUSH
45634: PPUSH
// pom := GetBase ( building ) ;
45635: LD_ADDR_VAR 0 3
45639: PUSH
45640: LD_VAR 0 1
45644: PPUSH
45645: CALL_OW 274
45649: ST_TO_ADDR
// if not pom then
45650: LD_VAR 0 3
45654: NOT
45655: IFFALSE 45659
// exit ;
45657: GO 45833
// btype := GetBType ( building ) ;
45659: LD_ADDR_VAR 0 5
45663: PUSH
45664: LD_VAR 0 1
45668: PPUSH
45669: CALL_OW 266
45673: ST_TO_ADDR
// if btype = b_armoury then
45674: LD_VAR 0 5
45678: PUSH
45679: LD_INT 4
45681: EQUAL
45682: IFFALSE 45692
// btype := b_barracks ;
45684: LD_ADDR_VAR 0 5
45688: PUSH
45689: LD_INT 5
45691: ST_TO_ADDR
// if btype = b_depot then
45692: LD_VAR 0 5
45696: PUSH
45697: LD_INT 0
45699: EQUAL
45700: IFFALSE 45710
// btype := b_warehouse ;
45702: LD_ADDR_VAR 0 5
45706: PUSH
45707: LD_INT 1
45709: ST_TO_ADDR
// if btype = b_workshop then
45710: LD_VAR 0 5
45714: PUSH
45715: LD_INT 2
45717: EQUAL
45718: IFFALSE 45728
// btype := b_factory ;
45720: LD_ADDR_VAR 0 5
45724: PUSH
45725: LD_INT 3
45727: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45728: LD_ADDR_VAR 0 4
45732: PUSH
45733: LD_VAR 0 5
45737: PPUSH
45738: LD_VAR 0 1
45742: PPUSH
45743: CALL_OW 248
45747: PPUSH
45748: CALL_OW 450
45752: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45753: LD_ADDR_VAR 0 2
45757: PUSH
45758: LD_VAR 0 3
45762: PPUSH
45763: LD_INT 1
45765: PPUSH
45766: CALL_OW 275
45770: PUSH
45771: LD_VAR 0 4
45775: PUSH
45776: LD_INT 1
45778: ARRAY
45779: GREATEREQUAL
45780: IFFALSE 45806
45782: PUSH
45783: LD_VAR 0 3
45787: PPUSH
45788: LD_INT 2
45790: PPUSH
45791: CALL_OW 275
45795: PUSH
45796: LD_VAR 0 4
45800: PUSH
45801: LD_INT 2
45803: ARRAY
45804: GREATEREQUAL
45805: AND
45806: IFFALSE 45832
45808: PUSH
45809: LD_VAR 0 3
45813: PPUSH
45814: LD_INT 3
45816: PPUSH
45817: CALL_OW 275
45821: PUSH
45822: LD_VAR 0 4
45826: PUSH
45827: LD_INT 3
45829: ARRAY
45830: GREATEREQUAL
45831: AND
45832: ST_TO_ADDR
// end ;
45833: LD_VAR 0 2
45837: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45838: LD_INT 0
45840: PPUSH
45841: PPUSH
45842: PPUSH
// pom := GetBase ( building ) ;
45843: LD_ADDR_VAR 0 4
45847: PUSH
45848: LD_VAR 0 1
45852: PPUSH
45853: CALL_OW 274
45857: ST_TO_ADDR
// if not pom then
45858: LD_VAR 0 4
45862: NOT
45863: IFFALSE 45867
// exit ;
45865: GO 45972
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45867: LD_ADDR_VAR 0 5
45871: PUSH
45872: LD_VAR 0 2
45876: PPUSH
45877: LD_VAR 0 1
45881: PPUSH
45882: CALL_OW 248
45886: PPUSH
45887: CALL_OW 450
45891: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45892: LD_ADDR_VAR 0 3
45896: PUSH
45897: LD_VAR 0 4
45901: PPUSH
45902: LD_INT 1
45904: PPUSH
45905: CALL_OW 275
45909: PUSH
45910: LD_VAR 0 5
45914: PUSH
45915: LD_INT 1
45917: ARRAY
45918: GREATEREQUAL
45919: IFFALSE 45945
45921: PUSH
45922: LD_VAR 0 4
45926: PPUSH
45927: LD_INT 2
45929: PPUSH
45930: CALL_OW 275
45934: PUSH
45935: LD_VAR 0 5
45939: PUSH
45940: LD_INT 2
45942: ARRAY
45943: GREATEREQUAL
45944: AND
45945: IFFALSE 45971
45947: PUSH
45948: LD_VAR 0 4
45952: PPUSH
45953: LD_INT 3
45955: PPUSH
45956: CALL_OW 275
45960: PUSH
45961: LD_VAR 0 5
45965: PUSH
45966: LD_INT 3
45968: ARRAY
45969: GREATEREQUAL
45970: AND
45971: ST_TO_ADDR
// end ;
45972: LD_VAR 0 3
45976: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45977: LD_INT 0
45979: PPUSH
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
45986: PPUSH
45987: PPUSH
45988: PPUSH
45989: PPUSH
// result := false ;
45990: LD_ADDR_VAR 0 8
45994: PUSH
45995: LD_INT 0
45997: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45998: LD_VAR 0 5
46002: NOT
46003: IFTRUE 46012
46005: PUSH
46006: LD_VAR 0 1
46010: NOT
46011: OR
46012: IFTRUE 46021
46014: PUSH
46015: LD_VAR 0 2
46019: NOT
46020: OR
46021: IFTRUE 46030
46023: PUSH
46024: LD_VAR 0 3
46028: NOT
46029: OR
46030: IFFALSE 46034
// exit ;
46032: GO 46860
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46034: LD_ADDR_VAR 0 14
46038: PUSH
46039: LD_VAR 0 1
46043: PPUSH
46044: LD_VAR 0 2
46048: PPUSH
46049: LD_VAR 0 3
46053: PPUSH
46054: LD_VAR 0 4
46058: PPUSH
46059: LD_VAR 0 5
46063: PUSH
46064: LD_INT 1
46066: ARRAY
46067: PPUSH
46068: CALL_OW 248
46072: PPUSH
46073: LD_INT 0
46075: PPUSH
46076: CALL 48141 0 6
46080: ST_TO_ADDR
// if not hexes then
46081: LD_VAR 0 14
46085: NOT
46086: IFFALSE 46090
// exit ;
46088: GO 46860
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46090: LD_ADDR_VAR 0 17
46094: PUSH
46095: LD_VAR 0 5
46099: PPUSH
46100: LD_INT 22
46102: PUSH
46103: LD_VAR 0 13
46107: PPUSH
46108: CALL_OW 255
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 30
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 30
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PPUSH
46149: CALL_OW 72
46153: ST_TO_ADDR
// for i = 1 to hexes do
46154: LD_ADDR_VAR 0 9
46158: PUSH
46159: DOUBLE
46160: LD_INT 1
46162: DEC
46163: ST_TO_ADDR
46164: LD_VAR 0 14
46168: PUSH
46169: FOR_TO
46170: IFFALSE 46858
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46172: LD_ADDR_VAR 0 13
46176: PUSH
46177: LD_VAR 0 14
46181: PUSH
46182: LD_VAR 0 9
46186: ARRAY
46187: PUSH
46188: LD_INT 1
46190: ARRAY
46191: PPUSH
46192: LD_VAR 0 14
46196: PUSH
46197: LD_VAR 0 9
46201: ARRAY
46202: PUSH
46203: LD_INT 2
46205: ARRAY
46206: PPUSH
46207: CALL_OW 428
46211: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46212: LD_VAR 0 14
46216: PUSH
46217: LD_VAR 0 9
46221: ARRAY
46222: PUSH
46223: LD_INT 1
46225: ARRAY
46226: PPUSH
46227: LD_VAR 0 14
46231: PUSH
46232: LD_VAR 0 9
46236: ARRAY
46237: PUSH
46238: LD_INT 2
46240: ARRAY
46241: PPUSH
46242: CALL_OW 351
46246: IFTRUE 46285
46248: PUSH
46249: LD_VAR 0 14
46253: PUSH
46254: LD_VAR 0 9
46258: ARRAY
46259: PUSH
46260: LD_INT 1
46262: ARRAY
46263: PPUSH
46264: LD_VAR 0 14
46268: PUSH
46269: LD_VAR 0 9
46273: ARRAY
46274: PUSH
46275: LD_INT 2
46277: ARRAY
46278: PPUSH
46279: CALL_OW 488
46283: NOT
46284: OR
46285: IFTRUE 46302
46287: PUSH
46288: LD_VAR 0 13
46292: PPUSH
46293: CALL_OW 247
46297: PUSH
46298: LD_INT 3
46300: EQUAL
46301: OR
46302: IFFALSE 46308
// exit ;
46304: POP
46305: POP
46306: GO 46860
// if not tmp then
46308: LD_VAR 0 13
46312: NOT
46313: IFFALSE 46317
// continue ;
46315: GO 46169
// result := true ;
46317: LD_ADDR_VAR 0 8
46321: PUSH
46322: LD_INT 1
46324: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46325: LD_VAR 0 6
46329: IFFALSE 46346
46331: PUSH
46332: LD_VAR 0 13
46336: PPUSH
46337: CALL_OW 247
46341: PUSH
46342: LD_INT 2
46344: EQUAL
46345: AND
46346: IFFALSE 46363
46348: PUSH
46349: LD_VAR 0 13
46353: PPUSH
46354: CALL_OW 263
46358: PUSH
46359: LD_INT 1
46361: EQUAL
46362: AND
46363: IFFALSE 46527
// begin if IsDrivenBy ( tmp ) then
46365: LD_VAR 0 13
46369: PPUSH
46370: CALL_OW 311
46374: IFFALSE 46378
// continue ;
46376: GO 46169
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46378: LD_VAR 0 6
46382: PPUSH
46383: LD_INT 3
46385: PUSH
46386: LD_INT 60
46388: PUSH
46389: EMPTY
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 3
46398: PUSH
46399: LD_INT 55
46401: PUSH
46402: EMPTY
46403: LIST
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PPUSH
46413: CALL_OW 72
46417: IFFALSE 46525
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46419: LD_ADDR_VAR 0 18
46423: PUSH
46424: LD_VAR 0 6
46428: PPUSH
46429: LD_INT 3
46431: PUSH
46432: LD_INT 60
46434: PUSH
46435: EMPTY
46436: LIST
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 3
46444: PUSH
46445: LD_INT 55
46447: PUSH
46448: EMPTY
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PPUSH
46459: CALL_OW 72
46463: PUSH
46464: LD_INT 1
46466: ARRAY
46467: ST_TO_ADDR
// if IsInUnit ( driver ) then
46468: LD_VAR 0 18
46472: PPUSH
46473: CALL_OW 310
46477: IFFALSE 46488
// ComExit ( driver ) ;
46479: LD_VAR 0 18
46483: PPUSH
46484: CALL 72141 0 1
// AddComEnterUnit ( driver , tmp ) ;
46488: LD_VAR 0 18
46492: PPUSH
46493: LD_VAR 0 13
46497: PPUSH
46498: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46502: LD_VAR 0 18
46506: PPUSH
46507: LD_VAR 0 7
46511: PPUSH
46512: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46516: LD_VAR 0 18
46520: PPUSH
46521: CALL_OW 181
// end ; continue ;
46525: GO 46169
// end ; if not cleaners or not tmp in cleaners then
46527: LD_VAR 0 6
46531: NOT
46532: IFTRUE 46547
46534: PUSH
46535: LD_VAR 0 13
46539: PUSH
46540: LD_VAR 0 6
46544: IN
46545: NOT
46546: OR
46547: IFFALSE 46856
// begin if dep then
46549: LD_VAR 0 17
46553: IFFALSE 46689
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46555: LD_ADDR_VAR 0 16
46559: PUSH
46560: LD_VAR 0 17
46564: PUSH
46565: LD_INT 1
46567: ARRAY
46568: PPUSH
46569: CALL_OW 250
46573: PPUSH
46574: LD_VAR 0 17
46578: PUSH
46579: LD_INT 1
46581: ARRAY
46582: PPUSH
46583: CALL_OW 254
46587: PPUSH
46588: LD_INT 5
46590: PPUSH
46591: CALL_OW 272
46595: PUSH
46596: LD_VAR 0 17
46600: PUSH
46601: LD_INT 1
46603: ARRAY
46604: PPUSH
46605: CALL_OW 251
46609: PPUSH
46610: LD_VAR 0 17
46614: PUSH
46615: LD_INT 1
46617: ARRAY
46618: PPUSH
46619: CALL_OW 254
46623: PPUSH
46624: LD_INT 5
46626: PPUSH
46627: CALL_OW 273
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46636: LD_VAR 0 16
46640: PUSH
46641: LD_INT 1
46643: ARRAY
46644: PPUSH
46645: LD_VAR 0 16
46649: PUSH
46650: LD_INT 2
46652: ARRAY
46653: PPUSH
46654: CALL_OW 488
46658: IFFALSE 46689
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46660: LD_VAR 0 13
46664: PPUSH
46665: LD_VAR 0 16
46669: PUSH
46670: LD_INT 1
46672: ARRAY
46673: PPUSH
46674: LD_VAR 0 16
46678: PUSH
46679: LD_INT 2
46681: ARRAY
46682: PPUSH
46683: CALL_OW 111
// continue ;
46687: GO 46169
// end ; end ; r := GetDir ( tmp ) ;
46689: LD_ADDR_VAR 0 15
46693: PUSH
46694: LD_VAR 0 13
46698: PPUSH
46699: CALL_OW 254
46703: ST_TO_ADDR
// if r = 5 then
46704: LD_VAR 0 15
46708: PUSH
46709: LD_INT 5
46711: EQUAL
46712: IFFALSE 46722
// r := 0 ;
46714: LD_ADDR_VAR 0 15
46718: PUSH
46719: LD_INT 0
46721: ST_TO_ADDR
// for j = r to 5 do
46722: LD_ADDR_VAR 0 10
46726: PUSH
46727: DOUBLE
46728: LD_VAR 0 15
46732: DEC
46733: ST_TO_ADDR
46734: LD_INT 5
46736: PUSH
46737: FOR_TO
46738: IFFALSE 46854
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46740: LD_ADDR_VAR 0 11
46744: PUSH
46745: LD_VAR 0 13
46749: PPUSH
46750: CALL_OW 250
46754: PPUSH
46755: LD_VAR 0 10
46759: PPUSH
46760: LD_INT 2
46762: PPUSH
46763: CALL_OW 272
46767: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46768: LD_ADDR_VAR 0 12
46772: PUSH
46773: LD_VAR 0 13
46777: PPUSH
46778: CALL_OW 251
46782: PPUSH
46783: LD_VAR 0 10
46787: PPUSH
46788: LD_INT 2
46790: PPUSH
46791: CALL_OW 273
46795: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46796: LD_VAR 0 11
46800: PPUSH
46801: LD_VAR 0 12
46805: PPUSH
46806: CALL_OW 488
46810: IFFALSE 46829
46812: PUSH
46813: LD_VAR 0 11
46817: PPUSH
46818: LD_VAR 0 12
46822: PPUSH
46823: CALL_OW 428
46827: NOT
46828: AND
46829: IFFALSE 46852
// begin ComMoveXY ( tmp , _x , _y ) ;
46831: LD_VAR 0 13
46835: PPUSH
46836: LD_VAR 0 11
46840: PPUSH
46841: LD_VAR 0 12
46845: PPUSH
46846: CALL_OW 111
// break ;
46850: GO 46854
// end ; end ;
46852: GO 46737
46854: POP
46855: POP
// end ; end ;
46856: GO 46169
46858: POP
46859: POP
// end ;
46860: LD_VAR 0 8
46864: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46865: LD_INT 0
46867: PPUSH
// result := true ;
46868: LD_ADDR_VAR 0 3
46872: PUSH
46873: LD_INT 1
46875: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46876: LD_VAR 0 2
46880: PUSH
46881: LD_INT 24
46883: DOUBLE
46884: EQUAL
46885: IFTRUE 46895
46887: LD_INT 33
46889: DOUBLE
46890: EQUAL
46891: IFTRUE 46895
46893: GO 46920
46895: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46896: LD_ADDR_VAR 0 3
46900: PUSH
46901: LD_INT 32
46903: PPUSH
46904: LD_VAR 0 1
46908: PPUSH
46909: CALL_OW 321
46913: PUSH
46914: LD_INT 2
46916: EQUAL
46917: ST_TO_ADDR
46918: GO 47236
46920: LD_INT 20
46922: DOUBLE
46923: EQUAL
46924: IFTRUE 46928
46926: GO 46953
46928: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46929: LD_ADDR_VAR 0 3
46933: PUSH
46934: LD_INT 6
46936: PPUSH
46937: LD_VAR 0 1
46941: PPUSH
46942: CALL_OW 321
46946: PUSH
46947: LD_INT 2
46949: EQUAL
46950: ST_TO_ADDR
46951: GO 47236
46953: LD_INT 22
46955: DOUBLE
46956: EQUAL
46957: IFTRUE 46967
46959: LD_INT 36
46961: DOUBLE
46962: EQUAL
46963: IFTRUE 46967
46965: GO 46992
46967: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46968: LD_ADDR_VAR 0 3
46972: PUSH
46973: LD_INT 15
46975: PPUSH
46976: LD_VAR 0 1
46980: PPUSH
46981: CALL_OW 321
46985: PUSH
46986: LD_INT 2
46988: EQUAL
46989: ST_TO_ADDR
46990: GO 47236
46992: LD_INT 30
46994: DOUBLE
46995: EQUAL
46996: IFTRUE 47000
46998: GO 47025
47000: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47001: LD_ADDR_VAR 0 3
47005: PUSH
47006: LD_INT 20
47008: PPUSH
47009: LD_VAR 0 1
47013: PPUSH
47014: CALL_OW 321
47018: PUSH
47019: LD_INT 2
47021: EQUAL
47022: ST_TO_ADDR
47023: GO 47236
47025: LD_INT 28
47027: DOUBLE
47028: EQUAL
47029: IFTRUE 47039
47031: LD_INT 21
47033: DOUBLE
47034: EQUAL
47035: IFTRUE 47039
47037: GO 47064
47039: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47040: LD_ADDR_VAR 0 3
47044: PUSH
47045: LD_INT 21
47047: PPUSH
47048: LD_VAR 0 1
47052: PPUSH
47053: CALL_OW 321
47057: PUSH
47058: LD_INT 2
47060: EQUAL
47061: ST_TO_ADDR
47062: GO 47236
47064: LD_INT 16
47066: DOUBLE
47067: EQUAL
47068: IFTRUE 47072
47070: GO 47097
47072: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47073: LD_ADDR_VAR 0 3
47077: PUSH
47078: LD_INT 84
47080: PPUSH
47081: LD_VAR 0 1
47085: PPUSH
47086: CALL_OW 321
47090: PUSH
47091: LD_INT 2
47093: EQUAL
47094: ST_TO_ADDR
47095: GO 47236
47097: LD_INT 19
47099: DOUBLE
47100: EQUAL
47101: IFTRUE 47111
47103: LD_INT 23
47105: DOUBLE
47106: EQUAL
47107: IFTRUE 47111
47109: GO 47136
47111: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47112: LD_ADDR_VAR 0 3
47116: PUSH
47117: LD_INT 83
47119: PPUSH
47120: LD_VAR 0 1
47124: PPUSH
47125: CALL_OW 321
47129: PUSH
47130: LD_INT 2
47132: EQUAL
47133: ST_TO_ADDR
47134: GO 47236
47136: LD_INT 17
47138: DOUBLE
47139: EQUAL
47140: IFTRUE 47144
47142: GO 47169
47144: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47145: LD_ADDR_VAR 0 3
47149: PUSH
47150: LD_INT 39
47152: PPUSH
47153: LD_VAR 0 1
47157: PPUSH
47158: CALL_OW 321
47162: PUSH
47163: LD_INT 2
47165: EQUAL
47166: ST_TO_ADDR
47167: GO 47236
47169: LD_INT 18
47171: DOUBLE
47172: EQUAL
47173: IFTRUE 47177
47175: GO 47202
47177: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47178: LD_ADDR_VAR 0 3
47182: PUSH
47183: LD_INT 40
47185: PPUSH
47186: LD_VAR 0 1
47190: PPUSH
47191: CALL_OW 321
47195: PUSH
47196: LD_INT 2
47198: EQUAL
47199: ST_TO_ADDR
47200: GO 47236
47202: LD_INT 27
47204: DOUBLE
47205: EQUAL
47206: IFTRUE 47210
47208: GO 47235
47210: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47211: LD_ADDR_VAR 0 3
47215: PUSH
47216: LD_INT 35
47218: PPUSH
47219: LD_VAR 0 1
47223: PPUSH
47224: CALL_OW 321
47228: PUSH
47229: LD_INT 2
47231: EQUAL
47232: ST_TO_ADDR
47233: GO 47236
47235: POP
// end ;
47236: LD_VAR 0 3
47240: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47241: LD_INT 0
47243: PPUSH
47244: PPUSH
47245: PPUSH
47246: PPUSH
47247: PPUSH
47248: PPUSH
47249: PPUSH
47250: PPUSH
47251: PPUSH
47252: PPUSH
47253: PPUSH
// result := false ;
47254: LD_ADDR_VAR 0 6
47258: PUSH
47259: LD_INT 0
47261: ST_TO_ADDR
// if btype = b_depot then
47262: LD_VAR 0 2
47266: PUSH
47267: LD_INT 0
47269: EQUAL
47270: IFFALSE 47282
// begin result := true ;
47272: LD_ADDR_VAR 0 6
47276: PUSH
47277: LD_INT 1
47279: ST_TO_ADDR
// exit ;
47280: GO 48136
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47282: LD_VAR 0 1
47286: NOT
47287: IFTRUE 47312
47289: PUSH
47290: LD_VAR 0 1
47294: PPUSH
47295: CALL_OW 266
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: IN
47310: NOT
47311: OR
47312: IFTRUE 47321
47314: PUSH
47315: LD_VAR 0 2
47319: NOT
47320: OR
47321: IFTRUE 47357
47323: PUSH
47324: LD_VAR 0 5
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: LD_INT 4
47343: PUSH
47344: LD_INT 5
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: IN
47355: NOT
47356: OR
47357: IFTRUE 47376
47359: PUSH
47360: LD_VAR 0 3
47364: PPUSH
47365: LD_VAR 0 4
47369: PPUSH
47370: CALL_OW 488
47374: NOT
47375: OR
47376: IFFALSE 47380
// exit ;
47378: GO 48136
// side := GetSide ( depot ) ;
47380: LD_ADDR_VAR 0 9
47384: PUSH
47385: LD_VAR 0 1
47389: PPUSH
47390: CALL_OW 255
47394: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47395: LD_VAR 0 9
47399: PPUSH
47400: LD_VAR 0 2
47404: PPUSH
47405: CALL 46865 0 2
47409: NOT
47410: IFFALSE 47414
// exit ;
47412: GO 48136
// pom := GetBase ( depot ) ;
47414: LD_ADDR_VAR 0 10
47418: PUSH
47419: LD_VAR 0 1
47423: PPUSH
47424: CALL_OW 274
47428: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47429: LD_ADDR_VAR 0 11
47433: PUSH
47434: LD_VAR 0 2
47438: PPUSH
47439: LD_VAR 0 1
47443: PPUSH
47444: CALL_OW 248
47448: PPUSH
47449: CALL_OW 450
47453: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47454: LD_VAR 0 10
47458: PPUSH
47459: LD_INT 1
47461: PPUSH
47462: CALL_OW 275
47466: PUSH
47467: LD_VAR 0 11
47471: PUSH
47472: LD_INT 1
47474: ARRAY
47475: GREATEREQUAL
47476: IFFALSE 47502
47478: PUSH
47479: LD_VAR 0 10
47483: PPUSH
47484: LD_INT 2
47486: PPUSH
47487: CALL_OW 275
47491: PUSH
47492: LD_VAR 0 11
47496: PUSH
47497: LD_INT 2
47499: ARRAY
47500: GREATEREQUAL
47501: AND
47502: IFFALSE 47528
47504: PUSH
47505: LD_VAR 0 10
47509: PPUSH
47510: LD_INT 3
47512: PPUSH
47513: CALL_OW 275
47517: PUSH
47518: LD_VAR 0 11
47522: PUSH
47523: LD_INT 3
47525: ARRAY
47526: GREATEREQUAL
47527: AND
47528: NOT
47529: IFFALSE 47533
// exit ;
47531: GO 48136
// if GetBType ( depot ) = b_depot then
47533: LD_VAR 0 1
47537: PPUSH
47538: CALL_OW 266
47542: PUSH
47543: LD_INT 0
47545: EQUAL
47546: IFFALSE 47558
// dist := 28 else
47548: LD_ADDR_VAR 0 14
47552: PUSH
47553: LD_INT 28
47555: ST_TO_ADDR
47556: GO 47566
// dist := 36 ;
47558: LD_ADDR_VAR 0 14
47562: PUSH
47563: LD_INT 36
47565: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47566: LD_VAR 0 1
47570: PPUSH
47571: LD_VAR 0 3
47575: PPUSH
47576: LD_VAR 0 4
47580: PPUSH
47581: CALL_OW 297
47585: PUSH
47586: LD_VAR 0 14
47590: GREATER
47591: IFFALSE 47595
// exit ;
47593: GO 48136
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47595: LD_ADDR_VAR 0 12
47599: PUSH
47600: LD_VAR 0 2
47604: PPUSH
47605: LD_VAR 0 3
47609: PPUSH
47610: LD_VAR 0 4
47614: PPUSH
47615: LD_VAR 0 5
47619: PPUSH
47620: LD_VAR 0 1
47624: PPUSH
47625: CALL_OW 248
47629: PPUSH
47630: LD_INT 0
47632: PPUSH
47633: CALL 48141 0 6
47637: ST_TO_ADDR
// if not hexes then
47638: LD_VAR 0 12
47642: NOT
47643: IFFALSE 47647
// exit ;
47645: GO 48136
// hex := GetHexInfo ( x , y ) ;
47647: LD_ADDR_VAR 0 15
47651: PUSH
47652: LD_VAR 0 3
47656: PPUSH
47657: LD_VAR 0 4
47661: PPUSH
47662: CALL_OW 546
47666: ST_TO_ADDR
// if hex [ 1 ] then
47667: LD_VAR 0 15
47671: PUSH
47672: LD_INT 1
47674: ARRAY
47675: IFFALSE 47679
// exit ;
47677: GO 48136
// height := hex [ 2 ] ;
47679: LD_ADDR_VAR 0 13
47683: PUSH
47684: LD_VAR 0 15
47688: PUSH
47689: LD_INT 2
47691: ARRAY
47692: ST_TO_ADDR
// for i = 1 to hexes do
47693: LD_ADDR_VAR 0 7
47697: PUSH
47698: DOUBLE
47699: LD_INT 1
47701: DEC
47702: ST_TO_ADDR
47703: LD_VAR 0 12
47707: PUSH
47708: FOR_TO
47709: IFFALSE 48053
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47711: LD_VAR 0 12
47715: PUSH
47716: LD_VAR 0 7
47720: ARRAY
47721: PUSH
47722: LD_INT 1
47724: ARRAY
47725: PPUSH
47726: LD_VAR 0 12
47730: PUSH
47731: LD_VAR 0 7
47735: ARRAY
47736: PUSH
47737: LD_INT 2
47739: ARRAY
47740: PPUSH
47741: CALL_OW 488
47745: NOT
47746: IFTRUE 47788
47748: PUSH
47749: LD_VAR 0 12
47753: PUSH
47754: LD_VAR 0 7
47758: ARRAY
47759: PUSH
47760: LD_INT 1
47762: ARRAY
47763: PPUSH
47764: LD_VAR 0 12
47768: PUSH
47769: LD_VAR 0 7
47773: ARRAY
47774: PUSH
47775: LD_INT 2
47777: ARRAY
47778: PPUSH
47779: CALL_OW 428
47783: PUSH
47784: LD_INT 0
47786: GREATER
47787: OR
47788: IFTRUE 47826
47790: PUSH
47791: LD_VAR 0 12
47795: PUSH
47796: LD_VAR 0 7
47800: ARRAY
47801: PUSH
47802: LD_INT 1
47804: ARRAY
47805: PPUSH
47806: LD_VAR 0 12
47810: PUSH
47811: LD_VAR 0 7
47815: ARRAY
47816: PUSH
47817: LD_INT 2
47819: ARRAY
47820: PPUSH
47821: CALL_OW 351
47825: OR
47826: IFFALSE 47832
// exit ;
47828: POP
47829: POP
47830: GO 48136
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47832: LD_ADDR_VAR 0 8
47836: PUSH
47837: LD_VAR 0 12
47841: PUSH
47842: LD_VAR 0 7
47846: ARRAY
47847: PUSH
47848: LD_INT 1
47850: ARRAY
47851: PPUSH
47852: LD_VAR 0 12
47856: PUSH
47857: LD_VAR 0 7
47861: ARRAY
47862: PUSH
47863: LD_INT 2
47865: ARRAY
47866: PPUSH
47867: CALL_OW 546
47871: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47872: LD_VAR 0 8
47876: PUSH
47877: LD_INT 1
47879: ARRAY
47880: IFTRUE 47902
47882: PUSH
47883: LD_VAR 0 8
47887: PUSH
47888: LD_INT 2
47890: ARRAY
47891: PUSH
47892: LD_VAR 0 13
47896: PUSH
47897: LD_INT 2
47899: PLUS
47900: GREATER
47901: OR
47902: IFTRUE 47924
47904: PUSH
47905: LD_VAR 0 8
47909: PUSH
47910: LD_INT 2
47912: ARRAY
47913: PUSH
47914: LD_VAR 0 13
47918: PUSH
47919: LD_INT 2
47921: MINUS
47922: LESS
47923: OR
47924: IFTRUE 47992
47926: PUSH
47927: LD_VAR 0 8
47931: PUSH
47932: LD_INT 3
47934: ARRAY
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 8
47941: PUSH
47942: LD_INT 9
47944: PUSH
47945: LD_INT 10
47947: PUSH
47948: LD_INT 11
47950: PUSH
47951: LD_INT 12
47953: PUSH
47954: LD_INT 13
47956: PUSH
47957: LD_INT 16
47959: PUSH
47960: LD_INT 17
47962: PUSH
47963: LD_INT 18
47965: PUSH
47966: LD_INT 19
47968: PUSH
47969: LD_INT 20
47971: PUSH
47972: LD_INT 21
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: IN
47990: NOT
47991: OR
47992: IFTRUE 48005
47994: PUSH
47995: LD_VAR 0 8
47999: PUSH
48000: LD_INT 5
48002: ARRAY
48003: NOT
48004: OR
48005: IFTRUE 48045
48007: PUSH
48008: LD_VAR 0 8
48012: PUSH
48013: LD_INT 6
48015: ARRAY
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 7
48025: PUSH
48026: LD_INT 9
48028: PUSH
48029: LD_INT 10
48031: PUSH
48032: LD_INT 11
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: IN
48043: NOT
48044: OR
48045: IFFALSE 48051
// exit ;
48047: POP
48048: POP
48049: GO 48136
// end ;
48051: GO 47708
48053: POP
48054: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48055: LD_VAR 0 9
48059: PPUSH
48060: LD_VAR 0 3
48064: PPUSH
48065: LD_VAR 0 4
48069: PPUSH
48070: LD_INT 20
48072: PPUSH
48073: CALL 39955 0 4
48077: PUSH
48078: LD_INT 4
48080: ARRAY
48081: IFFALSE 48085
// exit ;
48083: GO 48136
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48085: LD_VAR 0 2
48089: PUSH
48090: LD_INT 29
48092: PUSH
48093: LD_INT 30
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: IN
48100: IFFALSE 48124
48102: PUSH
48103: LD_VAR 0 3
48107: PPUSH
48108: LD_VAR 0 4
48112: PPUSH
48113: LD_VAR 0 9
48117: PPUSH
48118: CALL_OW 440
48122: NOT
48123: AND
48124: IFFALSE 48128
// exit ;
48126: GO 48136
// result := true ;
48128: LD_ADDR_VAR 0 6
48132: PUSH
48133: LD_INT 1
48135: ST_TO_ADDR
// end ;
48136: LD_VAR 0 6
48140: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48141: LD_INT 0
48143: PPUSH
48144: PPUSH
48145: PPUSH
48146: PPUSH
48147: PPUSH
48148: PPUSH
48149: PPUSH
48150: PPUSH
48151: PPUSH
48152: PPUSH
48153: PPUSH
48154: PPUSH
48155: PPUSH
48156: PPUSH
48157: PPUSH
48158: PPUSH
48159: PPUSH
48160: PPUSH
48161: PPUSH
48162: PPUSH
48163: PPUSH
48164: PPUSH
48165: PPUSH
48166: PPUSH
48167: PPUSH
48168: PPUSH
48169: PPUSH
48170: PPUSH
48171: PPUSH
48172: PPUSH
48173: PPUSH
48174: PPUSH
48175: PPUSH
48176: PPUSH
48177: PPUSH
48178: PPUSH
48179: PPUSH
48180: PPUSH
48181: PPUSH
48182: PPUSH
48183: PPUSH
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
48198: PPUSH
48199: PPUSH
48200: PPUSH
// result = [ ] ;
48201: LD_ADDR_VAR 0 7
48205: PUSH
48206: EMPTY
48207: ST_TO_ADDR
// temp_list = [ ] ;
48208: LD_ADDR_VAR 0 9
48212: PUSH
48213: EMPTY
48214: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48215: LD_VAR 0 4
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: LD_INT 4
48234: PUSH
48235: LD_INT 5
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: IN
48246: NOT
48247: IFTRUE 48290
48249: PUSH
48250: LD_VAR 0 1
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: IN
48265: IFFALSE 48289
48267: PUSH
48268: LD_VAR 0 5
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 3
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: LIST
48286: IN
48287: NOT
48288: AND
48289: OR
48290: IFFALSE 48294
// exit ;
48292: GO 66693
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48294: LD_VAR 0 1
48298: PUSH
48299: LD_INT 6
48301: PUSH
48302: LD_INT 7
48304: PUSH
48305: LD_INT 8
48307: PUSH
48308: LD_INT 13
48310: PUSH
48311: LD_INT 12
48313: PUSH
48314: LD_INT 15
48316: PUSH
48317: LD_INT 11
48319: PUSH
48320: LD_INT 14
48322: PUSH
48323: LD_INT 10
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: IN
48337: IFFALSE 48347
// btype = b_lab ;
48339: LD_ADDR_VAR 0 1
48343: PUSH
48344: LD_INT 6
48346: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48347: LD_VAR 0 6
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: IN
48366: NOT
48367: IFTRUE 48435
48369: PUSH
48370: LD_VAR 0 1
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: LD_INT 6
48389: PUSH
48390: LD_INT 36
48392: PUSH
48393: LD_INT 4
48395: PUSH
48396: LD_INT 5
48398: PUSH
48399: LD_INT 31
48401: PUSH
48402: LD_INT 32
48404: PUSH
48405: LD_INT 33
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: IN
48421: NOT
48422: IFFALSE 48434
48424: PUSH
48425: LD_VAR 0 6
48429: PUSH
48430: LD_INT 1
48432: EQUAL
48433: AND
48434: OR
48435: IFTRUE 48467
48437: PUSH
48438: LD_VAR 0 1
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: IN
48453: NOT
48454: IFFALSE 48466
48456: PUSH
48457: LD_VAR 0 6
48461: PUSH
48462: LD_INT 2
48464: EQUAL
48465: AND
48466: OR
48467: IFFALSE 48477
// mode = 0 ;
48469: LD_ADDR_VAR 0 6
48473: PUSH
48474: LD_INT 0
48476: ST_TO_ADDR
// case mode of 0 :
48477: LD_VAR 0 6
48481: PUSH
48482: LD_INT 0
48484: DOUBLE
48485: EQUAL
48486: IFTRUE 48490
48488: GO 59943
48490: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48491: LD_ADDR_VAR 0 11
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 3
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 3
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48684: LD_ADDR_VAR 0 12
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 3
48841: NEG
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48880: LD_ADDR_VAR 0 13
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: LD_INT 3
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 3
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: LD_INT 3
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49079: LD_ADDR_VAR 0 14
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: LD_INT 3
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49275: LD_ADDR_VAR 0 15
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 3
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49468: LD_ADDR_VAR 0 16
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: LD_INT 3
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49661: LD_ADDR_VAR 0 17
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49891: LD_ADDR_VAR 0 18
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50121: LD_ADDR_VAR 0 19
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50351: LD_ADDR_VAR 0 20
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50581: LD_ADDR_VAR 0 21
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50811: LD_ADDR_VAR 0 22
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51041: LD_ADDR_VAR 0 23
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: LD_INT 3
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 3
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51321: LD_ADDR_VAR 0 24
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 3
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51597: LD_ADDR_VAR 0 25
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 3
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51871: LD_ADDR_VAR 0 26
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 2
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52147: LD_ADDR_VAR 0 27
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: NEG
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52427: LD_ADDR_VAR 0 28
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: LD_INT 3
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52709: LD_ADDR_VAR 0 29
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: LD_INT 3
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 3
52953: NEG
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52988: LD_ADDR_VAR 0 30
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 3
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 3
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53266: LD_ADDR_VAR 0 31
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: LD_INT 3
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 3
53509: NEG
53510: PUSH
53511: LD_INT 2
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53544: LD_ADDR_VAR 0 32
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 3
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 3
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: LD_INT 3
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 3
53787: NEG
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53822: LD_ADDR_VAR 0 33
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: LD_INT 3
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54101: LD_ADDR_VAR 0 34
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 3
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 3
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54381: LD_ADDR_VAR 0 35
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54493: LD_ADDR_VAR 0 36
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54605: LD_ADDR_VAR 0 37
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54717: LD_ADDR_VAR 0 38
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54829: LD_ADDR_VAR 0 39
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54941: LD_ADDR_VAR 0 40
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55053: LD_ADDR_VAR 0 41
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: LD_INT 3
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: LD_INT 3
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: NEG
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 3
55338: NEG
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 3
55350: NEG
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 3
55362: NEG
55363: PUSH
55364: LD_INT 3
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55403: LD_ADDR_VAR 0 42
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 3
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 3
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: LD_INT 3
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 3
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 3
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: NEG
55713: PUSH
55714: LD_INT 3
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55753: LD_ADDR_VAR 0 43
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 3
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 3
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: LD_INT 3
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: LD_INT 3
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56101: LD_ADDR_VAR 0 44
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 3
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 3
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 3
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: NEG
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 3
56398: NEG
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56451: LD_ADDR_VAR 0 45
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 3
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 3
56748: NEG
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: LD_INT 3
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56801: LD_ADDR_VAR 0 46
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 3
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 3
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 2
57086: NEG
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 3
57097: NEG
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57149: LD_ADDR_VAR 0 47
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57300: LD_ADDR_VAR 0 48
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57447: LD_ADDR_VAR 0 49
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57591: LD_ADDR_VAR 0 50
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57735: LD_ADDR_VAR 0 51
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57882: LD_ADDR_VAR 0 52
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58033: LD_ADDR_VAR 0 53
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: LD_INT 2
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 2
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58263: LD_ADDR_VAR 0 54
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: NEG
58463: PUSH
58464: LD_INT 2
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58493: LD_ADDR_VAR 0 55
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: LD_INT 2
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: LD_INT 2
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 2
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58723: LD_ADDR_VAR 0 56
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 2
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58953: LD_ADDR_VAR 0 57
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59183: LD_ADDR_VAR 0 58
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 2
59318: PUSH
59319: LD_INT 2
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: LD_INT 2
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59413: LD_ADDR_VAR 0 59
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59501: LD_ADDR_VAR 0 60
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59589: LD_ADDR_VAR 0 61
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59677: LD_ADDR_VAR 0 62
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59765: LD_ADDR_VAR 0 63
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59853: LD_ADDR_VAR 0 64
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: ST_TO_ADDR
// end ; 1 :
59941: GO 65838
59943: LD_INT 1
59945: DOUBLE
59946: EQUAL
59947: IFTRUE 59951
59949: GO 62574
59951: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59952: LD_ADDR_VAR 0 11
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59996: LD_ADDR_VAR 0 12
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 3
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 3
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: LIST
60036: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60037: LD_ADDR_VAR 0 13
60041: PUSH
60042: LD_INT 3
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 3
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60077: LD_ADDR_VAR 0 14
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 3
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: LD_INT 2
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60118: LD_ADDR_VAR 0 15
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: LD_INT 1
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 3
60147: NEG
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: LIST
60161: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60162: LD_ADDR_VAR 0 16
60166: PUSH
60167: LD_INT 2
60169: NEG
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 3
60181: NEG
60182: PUSH
60183: LD_INT 2
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 3
60193: NEG
60194: PUSH
60195: LD_INT 3
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60208: LD_ADDR_VAR 0 17
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: LD_INT 3
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 3
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: LD_INT 2
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60252: LD_ADDR_VAR 0 18
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60293: LD_ADDR_VAR 0 19
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 3
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: LIST
60332: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60333: LD_ADDR_VAR 0 20
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: LD_INT 3
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60374: LD_ADDR_VAR 0 21
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 3
60392: NEG
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 3
60403: NEG
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60418: LD_ADDR_VAR 0 22
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 3
60449: NEG
60450: PUSH
60451: LD_INT 3
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60464: LD_ADDR_VAR 0 23
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: LD_INT 4
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: LD_INT 3
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: LIST
60507: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60508: LD_ADDR_VAR 0 24
60512: PUSH
60513: LD_INT 3
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 3
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 4
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60549: LD_ADDR_VAR 0 25
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: LD_INT 3
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 4
60566: PUSH
60567: LD_INT 3
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 3
60576: PUSH
60577: LD_INT 4
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60589: LD_ADDR_VAR 0 26
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: LD_INT 4
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: LIST
60629: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60630: LD_ADDR_VAR 0 27
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 3
60648: NEG
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 4
60659: NEG
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: LIST
60673: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60674: LD_ADDR_VAR 0 28
60678: PUSH
60679: LD_INT 3
60681: NEG
60682: PUSH
60683: LD_INT 3
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: LD_INT 4
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 4
60705: NEG
60706: PUSH
60707: LD_INT 3
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: LIST
60719: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60720: LD_ADDR_VAR 0 29
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 3
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 4
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: LD_INT 5
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 5
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 4
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 6
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 6
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: LD_INT 5
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60875: LD_ADDR_VAR 0 30
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 3
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 4
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 4
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 4
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 5
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 5
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 5
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 6
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 6
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61018: LD_ADDR_VAR 0 31
61022: PUSH
61023: LD_INT 3
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 3
61035: PUSH
61036: LD_INT 3
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 2
61045: PUSH
61046: LD_INT 3
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 4
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 4
61065: PUSH
61066: LD_INT 4
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: LD_INT 4
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 5
61085: PUSH
61086: LD_INT 4
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 5
61095: PUSH
61096: LD_INT 5
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 4
61105: PUSH
61106: LD_INT 5
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 6
61115: PUSH
61116: LD_INT 5
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 6
61125: PUSH
61126: LD_INT 6
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 5
61135: PUSH
61136: LD_INT 6
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61157: LD_ADDR_VAR 0 32
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 3
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 4
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 4
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: LD_INT 5
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: LD_INT 5
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: LD_INT 4
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: LD_INT 6
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 6
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: LD_INT 5
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61300: LD_ADDR_VAR 0 33
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 3
61318: NEG
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 4
61352: NEG
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 4
61363: NEG
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 4
61375: NEG
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 5
61386: NEG
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 5
61397: NEG
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 5
61409: NEG
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 6
61420: NEG
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 6
61431: NEG
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61455: LD_ADDR_VAR 0 34
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: NEG
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: LD_INT 4
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 4
61510: NEG
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 4
61522: NEG
61523: PUSH
61524: LD_INT 4
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 4
61534: NEG
61535: PUSH
61536: LD_INT 5
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 5
61546: NEG
61547: PUSH
61548: LD_INT 4
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 5
61558: NEG
61559: PUSH
61560: LD_INT 5
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 5
61570: NEG
61571: PUSH
61572: LD_INT 6
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 6
61582: NEG
61583: PUSH
61584: LD_INT 5
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 6
61594: NEG
61595: PUSH
61596: LD_INT 6
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61618: LD_ADDR_VAR 0 41
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 3
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: LIST
61661: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61662: LD_ADDR_VAR 0 42
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 2
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 3
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: LIST
61702: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61703: LD_ADDR_VAR 0 43
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: LD_INT 2
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: LIST
61742: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61743: LD_ADDR_VAR 0 44
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: LD_INT 2
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: LIST
61783: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61784: LD_ADDR_VAR 0 45
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 3
61813: NEG
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: LIST
61827: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61828: LD_ADDR_VAR 0 46
61832: PUSH
61833: LD_INT 2
61835: NEG
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: NEG
61848: PUSH
61849: LD_INT 3
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 3
61859: NEG
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: LIST
61873: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61874: LD_ADDR_VAR 0 47
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: LD_INT 3
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 3
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61907: LD_ADDR_VAR 0 48
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61938: LD_ADDR_VAR 0 49
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 3
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61967: LD_ADDR_VAR 0 50
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: LD_INT 3
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: LD_INT 3
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61996: LD_ADDR_VAR 0 51
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 2
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62027: LD_ADDR_VAR 0 52
62031: PUSH
62032: LD_INT 3
62034: NEG
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 3
62046: NEG
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62060: LD_ADDR_VAR 0 53
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: LD_INT 3
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 3
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: LD_INT 2
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: LIST
62103: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62104: LD_ADDR_VAR 0 54
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: LIST
62144: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62145: LD_ADDR_VAR 0 55
62149: PUSH
62150: LD_INT 3
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 3
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 2
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: LIST
62184: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62185: LD_ADDR_VAR 0 56
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 3
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 3
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: LIST
62225: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62226: LD_ADDR_VAR 0 57
62230: PUSH
62231: LD_INT 2
62233: NEG
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 3
62244: NEG
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 3
62255: NEG
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: LIST
62269: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62270: LD_ADDR_VAR 0 58
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PUSH
62279: LD_INT 3
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 3
62289: NEG
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 3
62301: NEG
62302: PUSH
62303: LD_INT 3
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62316: LD_ADDR_VAR 0 59
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62360: LD_ADDR_VAR 0 60
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: LIST
62400: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62401: LD_ADDR_VAR 0 61
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: LD_INT 2
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62441: LD_ADDR_VAR 0 62
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62482: LD_ADDR_VAR 0 63
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62526: LD_ADDR_VAR 0 64
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 2
62545: NEG
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 2
62557: NEG
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: LIST
62571: ST_TO_ADDR
// end ; 2 :
62572: GO 65838
62574: LD_INT 2
62576: DOUBLE
62577: EQUAL
62578: IFTRUE 62582
62580: GO 65837
62582: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62583: LD_ADDR_VAR 0 29
62587: PUSH
62588: LD_INT 4
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 4
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 5
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 5
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 4
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 3
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 3
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 5
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 3
62683: PUSH
62684: LD_INT 3
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 3
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 4
62703: PUSH
62704: LD_INT 3
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 4
62713: PUSH
62714: LD_INT 4
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: LD_INT 4
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 2
62733: PUSH
62734: LD_INT 3
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: LD_INT 2
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 4
62753: PUSH
62754: LD_INT 2
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: LD_INT 4
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_INT 4
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: LD_INT 4
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: LD_INT 5
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 5
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: LD_INT 4
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: LD_INT 3
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: LD_INT 5
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: LD_INT 3
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 3
62877: NEG
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 2
62889: NEG
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 2
62900: NEG
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 3
62911: NEG
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 4
62922: NEG
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 4
62933: NEG
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 4
62945: NEG
62946: PUSH
62947: LD_INT 2
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 2
62957: NEG
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 4
62968: NEG
62969: PUSH
62970: LD_INT 4
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 4
62980: NEG
62981: PUSH
62982: LD_INT 5
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 3
62992: NEG
62993: PUSH
62994: LD_INT 4
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 3
63004: NEG
63005: PUSH
63006: LD_INT 3
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 4
63016: NEG
63017: PUSH
63018: LD_INT 3
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 5
63028: NEG
63029: PUSH
63030: LD_INT 4
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 5
63040: NEG
63041: PUSH
63042: LD_INT 5
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 3
63052: NEG
63053: PUSH
63054: LD_INT 5
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 5
63064: NEG
63065: PUSH
63066: LD_INT 3
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63121: LD_ADDR_VAR 0 30
63125: PUSH
63126: LD_INT 4
63128: PUSH
63129: LD_INT 4
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 4
63138: PUSH
63139: LD_INT 3
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 5
63148: PUSH
63149: LD_INT 4
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 5
63158: PUSH
63159: LD_INT 5
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 4
63168: PUSH
63169: LD_INT 5
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 3
63178: PUSH
63179: LD_INT 4
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 3
63188: PUSH
63189: LD_INT 3
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 5
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 3
63208: PUSH
63209: LD_INT 5
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: LD_INT 3
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: LD_INT 3
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: LD_INT 4
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 4
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: LD_INT 3
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: LD_INT 2
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: LD_INT 4
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 2
63300: NEG
63301: PUSH
63302: LD_INT 2
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 4
63311: NEG
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 4
63322: NEG
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 3
63334: NEG
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 3
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 4
63356: NEG
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 5
63367: NEG
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 5
63378: NEG
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 5
63390: NEG
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: NEG
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 3
63413: NEG
63414: PUSH
63415: LD_INT 3
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 3
63425: NEG
63426: PUSH
63427: LD_INT 4
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: NEG
63438: PUSH
63439: LD_INT 3
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 2
63449: NEG
63450: PUSH
63451: LD_INT 2
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 3
63461: NEG
63462: PUSH
63463: LD_INT 2
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 4
63473: NEG
63474: PUSH
63475: LD_INT 3
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 4
63485: NEG
63486: PUSH
63487: LD_INT 4
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: LD_INT 4
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 4
63509: NEG
63510: PUSH
63511: LD_INT 2
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 4
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 5
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: LD_INT 4
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: LD_INT 3
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: LD_INT 3
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: LD_INT 4
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: LD_INT 5
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: LD_INT 3
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 2
63611: NEG
63612: PUSH
63613: LD_INT 5
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63668: LD_ADDR_VAR 0 31
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: LD_INT 4
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 3
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: LD_INT 4
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: LD_INT 5
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 5
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: LD_INT 4
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: LD_INT 3
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: LD_INT 5
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 2
63757: NEG
63758: PUSH
63759: LD_INT 3
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 3
63768: NEG
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 3
63779: NEG
63780: PUSH
63781: LD_INT 1
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 2
63791: NEG
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 2
63802: NEG
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 3
63813: NEG
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 4
63824: NEG
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 4
63835: NEG
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 4
63847: NEG
63848: PUSH
63849: LD_INT 2
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: NEG
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 4
63870: NEG
63871: PUSH
63872: LD_INT 4
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 4
63882: NEG
63883: PUSH
63884: LD_INT 5
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 3
63894: NEG
63895: PUSH
63896: LD_INT 4
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 3
63906: NEG
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 4
63918: NEG
63919: PUSH
63920: LD_INT 3
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 5
63930: NEG
63931: PUSH
63932: LD_INT 4
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 5
63942: NEG
63943: PUSH
63944: LD_INT 5
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 3
63954: NEG
63955: PUSH
63956: LD_INT 5
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 5
63966: NEG
63967: PUSH
63968: LD_INT 3
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: LD_INT 4
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: LD_INT 3
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 2
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: LD_INT 2
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 3
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: LD_INT 4
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 2
64057: PUSH
64058: LD_INT 2
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 2
64068: NEG
64069: PUSH
64070: LD_INT 4
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 4
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 4
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 5
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 5
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 4
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 3
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 3
64141: PUSH
64142: LD_INT 1
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 5
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64218: LD_ADDR_VAR 0 32
64222: PUSH
64223: LD_INT 4
64225: NEG
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 4
64236: NEG
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 3
64248: NEG
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 3
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 4
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 5
64281: NEG
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 5
64292: NEG
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 5
64304: NEG
64305: PUSH
64306: LD_INT 2
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: LD_INT 3
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 3
64339: NEG
64340: PUSH
64341: LD_INT 4
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 2
64351: NEG
64352: PUSH
64353: LD_INT 3
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 2
64363: NEG
64364: PUSH
64365: LD_INT 2
64367: NEG
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 3
64375: NEG
64376: PUSH
64377: LD_INT 2
64379: NEG
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 4
64387: NEG
64388: PUSH
64389: LD_INT 3
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 4
64399: NEG
64400: PUSH
64401: LD_INT 4
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: NEG
64412: PUSH
64413: LD_INT 4
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 4
64423: NEG
64424: PUSH
64425: LD_INT 2
64427: NEG
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 4
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 5
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: LD_INT 4
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: LD_INT 3
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 3
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: LD_INT 4
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: LD_INT 5
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: LD_INT 3
64517: NEG
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 2
64525: NEG
64526: PUSH
64527: LD_INT 5
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 3
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 4
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 4
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 3
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: LD_INT 1
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 4
64620: PUSH
64621: LD_INT 2
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 4
64630: PUSH
64631: LD_INT 4
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 4
64640: PUSH
64641: LD_INT 3
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 5
64650: PUSH
64651: LD_INT 4
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 5
64660: PUSH
64661: LD_INT 5
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 4
64670: PUSH
64671: LD_INT 5
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 3
64680: PUSH
64681: LD_INT 4
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: LD_INT 3
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 5
64700: PUSH
64701: LD_INT 3
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 3
64710: PUSH
64711: LD_INT 5
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64765: LD_ADDR_VAR 0 33
64769: PUSH
64770: LD_INT 4
64772: NEG
64773: PUSH
64774: LD_INT 4
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 4
64784: NEG
64785: PUSH
64786: LD_INT 5
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 3
64796: NEG
64797: PUSH
64798: LD_INT 4
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 3
64808: NEG
64809: PUSH
64810: LD_INT 3
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 4
64820: NEG
64821: PUSH
64822: LD_INT 3
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 5
64832: NEG
64833: PUSH
64834: LD_INT 4
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 5
64844: NEG
64845: PUSH
64846: LD_INT 5
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 3
64856: NEG
64857: PUSH
64858: LD_INT 5
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 5
64868: NEG
64869: PUSH
64870: LD_INT 3
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 3
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: LD_INT 4
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: LD_INT 3
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: LD_INT 3
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: NEG
64948: PUSH
64949: LD_INT 4
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 2
64959: PUSH
64960: LD_INT 2
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 2
64970: NEG
64971: PUSH
64972: LD_INT 4
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 4
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 4
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 5
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 5
65013: PUSH
65014: LD_INT 1
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 4
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 3
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 3
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 3
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 5
65065: PUSH
65066: LD_INT 2
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 3
65075: PUSH
65076: LD_INT 3
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 3
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 4
65095: PUSH
65096: LD_INT 3
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 4
65105: PUSH
65106: LD_INT 4
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 3
65115: PUSH
65116: LD_INT 4
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 2
65125: PUSH
65126: LD_INT 3
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 2
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 4
65145: PUSH
65146: LD_INT 2
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 2
65155: PUSH
65156: LD_INT 4
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: LD_INT 4
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 0
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: LD_INT 4
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: LD_INT 5
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: LD_INT 5
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: LD_INT 4
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: LD_INT 3
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 2
65237: PUSH
65238: LD_INT 5
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 2
65247: NEG
65248: PUSH
65249: LD_INT 3
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65303: LD_ADDR_VAR 0 34
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 4
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: LD_INT 5
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: LD_INT 4
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: LD_INT 3
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 0
65354: PUSH
65355: LD_INT 3
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 1
65365: NEG
65366: PUSH
65367: LD_INT 4
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: LD_INT 5
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 2
65389: PUSH
65390: LD_INT 3
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 2
65400: NEG
65401: PUSH
65402: LD_INT 5
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 3
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 3
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 4
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 4
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 3
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: LD_INT 0
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: LD_INT 1
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 2
65484: PUSH
65485: LD_INT 2
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 4
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 4
65505: PUSH
65506: LD_INT 4
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 4
65515: PUSH
65516: LD_INT 3
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 5
65525: PUSH
65526: LD_INT 4
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 5
65535: PUSH
65536: LD_INT 5
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 4
65545: PUSH
65546: LD_INT 5
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 3
65555: PUSH
65556: LD_INT 4
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 3
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 5
65575: PUSH
65576: LD_INT 3
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 3
65585: PUSH
65586: LD_INT 5
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: LD_INT 3
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: LD_INT 2
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: LD_INT 3
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: LD_INT 4
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: LD_INT 4
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: LD_INT 3
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 2
65667: PUSH
65668: LD_INT 4
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 2
65677: NEG
65678: PUSH
65679: LD_INT 2
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 4
65688: NEG
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 4
65699: NEG
65700: PUSH
65701: LD_INT 1
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 3
65711: NEG
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 3
65722: NEG
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 4
65733: NEG
65734: PUSH
65735: LD_INT 1
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 5
65744: NEG
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 5
65755: NEG
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 5
65767: NEG
65768: PUSH
65769: LD_INT 2
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 3
65779: NEG
65780: PUSH
65781: LD_INT 2
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: ST_TO_ADDR
// end ; end ;
65835: GO 65838
65837: POP
// case btype of b_depot , b_warehouse :
65838: LD_VAR 0 1
65842: PUSH
65843: LD_INT 0
65845: DOUBLE
65846: EQUAL
65847: IFTRUE 65857
65849: LD_INT 1
65851: DOUBLE
65852: EQUAL
65853: IFTRUE 65857
65855: GO 66058
65857: POP
// case nation of nation_american :
65858: LD_VAR 0 5
65862: PUSH
65863: LD_INT 1
65865: DOUBLE
65866: EQUAL
65867: IFTRUE 65871
65869: GO 65927
65871: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65872: LD_ADDR_VAR 0 9
65876: PUSH
65877: LD_VAR 0 11
65881: PUSH
65882: LD_VAR 0 12
65886: PUSH
65887: LD_VAR 0 13
65891: PUSH
65892: LD_VAR 0 14
65896: PUSH
65897: LD_VAR 0 15
65901: PUSH
65902: LD_VAR 0 16
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: PUSH
65915: LD_VAR 0 4
65919: PUSH
65920: LD_INT 1
65922: PLUS
65923: ARRAY
65924: ST_TO_ADDR
65925: GO 66056
65927: LD_INT 2
65929: DOUBLE
65930: EQUAL
65931: IFTRUE 65935
65933: GO 65991
65935: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65936: LD_ADDR_VAR 0 9
65940: PUSH
65941: LD_VAR 0 17
65945: PUSH
65946: LD_VAR 0 18
65950: PUSH
65951: LD_VAR 0 19
65955: PUSH
65956: LD_VAR 0 20
65960: PUSH
65961: LD_VAR 0 21
65965: PUSH
65966: LD_VAR 0 22
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: PUSH
65979: LD_VAR 0 4
65983: PUSH
65984: LD_INT 1
65986: PLUS
65987: ARRAY
65988: ST_TO_ADDR
65989: GO 66056
65991: LD_INT 3
65993: DOUBLE
65994: EQUAL
65995: IFTRUE 65999
65997: GO 66055
65999: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66000: LD_ADDR_VAR 0 9
66004: PUSH
66005: LD_VAR 0 23
66009: PUSH
66010: LD_VAR 0 24
66014: PUSH
66015: LD_VAR 0 25
66019: PUSH
66020: LD_VAR 0 26
66024: PUSH
66025: LD_VAR 0 27
66029: PUSH
66030: LD_VAR 0 28
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: PUSH
66043: LD_VAR 0 4
66047: PUSH
66048: LD_INT 1
66050: PLUS
66051: ARRAY
66052: ST_TO_ADDR
66053: GO 66056
66055: POP
66056: GO 66611
66058: LD_INT 2
66060: DOUBLE
66061: EQUAL
66062: IFTRUE 66072
66064: LD_INT 3
66066: DOUBLE
66067: EQUAL
66068: IFTRUE 66072
66070: GO 66128
66072: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66073: LD_ADDR_VAR 0 9
66077: PUSH
66078: LD_VAR 0 29
66082: PUSH
66083: LD_VAR 0 30
66087: PUSH
66088: LD_VAR 0 31
66092: PUSH
66093: LD_VAR 0 32
66097: PUSH
66098: LD_VAR 0 33
66102: PUSH
66103: LD_VAR 0 34
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: PUSH
66116: LD_VAR 0 4
66120: PUSH
66121: LD_INT 1
66123: PLUS
66124: ARRAY
66125: ST_TO_ADDR
66126: GO 66611
66128: LD_INT 16
66130: DOUBLE
66131: EQUAL
66132: IFTRUE 66190
66134: LD_INT 17
66136: DOUBLE
66137: EQUAL
66138: IFTRUE 66190
66140: LD_INT 18
66142: DOUBLE
66143: EQUAL
66144: IFTRUE 66190
66146: LD_INT 19
66148: DOUBLE
66149: EQUAL
66150: IFTRUE 66190
66152: LD_INT 22
66154: DOUBLE
66155: EQUAL
66156: IFTRUE 66190
66158: LD_INT 20
66160: DOUBLE
66161: EQUAL
66162: IFTRUE 66190
66164: LD_INT 21
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66190
66170: LD_INT 23
66172: DOUBLE
66173: EQUAL
66174: IFTRUE 66190
66176: LD_INT 24
66178: DOUBLE
66179: EQUAL
66180: IFTRUE 66190
66182: LD_INT 25
66184: DOUBLE
66185: EQUAL
66186: IFTRUE 66190
66188: GO 66246
66190: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66191: LD_ADDR_VAR 0 9
66195: PUSH
66196: LD_VAR 0 35
66200: PUSH
66201: LD_VAR 0 36
66205: PUSH
66206: LD_VAR 0 37
66210: PUSH
66211: LD_VAR 0 38
66215: PUSH
66216: LD_VAR 0 39
66220: PUSH
66221: LD_VAR 0 40
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: PUSH
66234: LD_VAR 0 4
66238: PUSH
66239: LD_INT 1
66241: PLUS
66242: ARRAY
66243: ST_TO_ADDR
66244: GO 66611
66246: LD_INT 6
66248: DOUBLE
66249: EQUAL
66250: IFTRUE 66302
66252: LD_INT 7
66254: DOUBLE
66255: EQUAL
66256: IFTRUE 66302
66258: LD_INT 8
66260: DOUBLE
66261: EQUAL
66262: IFTRUE 66302
66264: LD_INT 13
66266: DOUBLE
66267: EQUAL
66268: IFTRUE 66302
66270: LD_INT 12
66272: DOUBLE
66273: EQUAL
66274: IFTRUE 66302
66276: LD_INT 15
66278: DOUBLE
66279: EQUAL
66280: IFTRUE 66302
66282: LD_INT 11
66284: DOUBLE
66285: EQUAL
66286: IFTRUE 66302
66288: LD_INT 14
66290: DOUBLE
66291: EQUAL
66292: IFTRUE 66302
66294: LD_INT 10
66296: DOUBLE
66297: EQUAL
66298: IFTRUE 66302
66300: GO 66358
66302: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66303: LD_ADDR_VAR 0 9
66307: PUSH
66308: LD_VAR 0 41
66312: PUSH
66313: LD_VAR 0 42
66317: PUSH
66318: LD_VAR 0 43
66322: PUSH
66323: LD_VAR 0 44
66327: PUSH
66328: LD_VAR 0 45
66332: PUSH
66333: LD_VAR 0 46
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: PUSH
66346: LD_VAR 0 4
66350: PUSH
66351: LD_INT 1
66353: PLUS
66354: ARRAY
66355: ST_TO_ADDR
66356: GO 66611
66358: LD_INT 36
66360: DOUBLE
66361: EQUAL
66362: IFTRUE 66366
66364: GO 66422
66366: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66367: LD_ADDR_VAR 0 9
66371: PUSH
66372: LD_VAR 0 47
66376: PUSH
66377: LD_VAR 0 48
66381: PUSH
66382: LD_VAR 0 49
66386: PUSH
66387: LD_VAR 0 50
66391: PUSH
66392: LD_VAR 0 51
66396: PUSH
66397: LD_VAR 0 52
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: PUSH
66410: LD_VAR 0 4
66414: PUSH
66415: LD_INT 1
66417: PLUS
66418: ARRAY
66419: ST_TO_ADDR
66420: GO 66611
66422: LD_INT 4
66424: DOUBLE
66425: EQUAL
66426: IFTRUE 66448
66428: LD_INT 5
66430: DOUBLE
66431: EQUAL
66432: IFTRUE 66448
66434: LD_INT 34
66436: DOUBLE
66437: EQUAL
66438: IFTRUE 66448
66440: LD_INT 37
66442: DOUBLE
66443: EQUAL
66444: IFTRUE 66448
66446: GO 66504
66448: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66449: LD_ADDR_VAR 0 9
66453: PUSH
66454: LD_VAR 0 53
66458: PUSH
66459: LD_VAR 0 54
66463: PUSH
66464: LD_VAR 0 55
66468: PUSH
66469: LD_VAR 0 56
66473: PUSH
66474: LD_VAR 0 57
66478: PUSH
66479: LD_VAR 0 58
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: PUSH
66492: LD_VAR 0 4
66496: PUSH
66497: LD_INT 1
66499: PLUS
66500: ARRAY
66501: ST_TO_ADDR
66502: GO 66611
66504: LD_INT 31
66506: DOUBLE
66507: EQUAL
66508: IFTRUE 66554
66510: LD_INT 32
66512: DOUBLE
66513: EQUAL
66514: IFTRUE 66554
66516: LD_INT 33
66518: DOUBLE
66519: EQUAL
66520: IFTRUE 66554
66522: LD_INT 27
66524: DOUBLE
66525: EQUAL
66526: IFTRUE 66554
66528: LD_INT 26
66530: DOUBLE
66531: EQUAL
66532: IFTRUE 66554
66534: LD_INT 28
66536: DOUBLE
66537: EQUAL
66538: IFTRUE 66554
66540: LD_INT 29
66542: DOUBLE
66543: EQUAL
66544: IFTRUE 66554
66546: LD_INT 30
66548: DOUBLE
66549: EQUAL
66550: IFTRUE 66554
66552: GO 66610
66554: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66555: LD_ADDR_VAR 0 9
66559: PUSH
66560: LD_VAR 0 59
66564: PUSH
66565: LD_VAR 0 60
66569: PUSH
66570: LD_VAR 0 61
66574: PUSH
66575: LD_VAR 0 62
66579: PUSH
66580: LD_VAR 0 63
66584: PUSH
66585: LD_VAR 0 64
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: PUSH
66598: LD_VAR 0 4
66602: PUSH
66603: LD_INT 1
66605: PLUS
66606: ARRAY
66607: ST_TO_ADDR
66608: GO 66611
66610: POP
// temp_list2 = [ ] ;
66611: LD_ADDR_VAR 0 10
66615: PUSH
66616: EMPTY
66617: ST_TO_ADDR
// for i in temp_list do
66618: LD_ADDR_VAR 0 8
66622: PUSH
66623: LD_VAR 0 9
66627: PUSH
66628: FOR_IN
66629: IFFALSE 66681
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66631: LD_ADDR_VAR 0 10
66635: PUSH
66636: LD_VAR 0 10
66640: PUSH
66641: LD_VAR 0 8
66645: PUSH
66646: LD_INT 1
66648: ARRAY
66649: PUSH
66650: LD_VAR 0 2
66654: PLUS
66655: PUSH
66656: LD_VAR 0 8
66660: PUSH
66661: LD_INT 2
66663: ARRAY
66664: PUSH
66665: LD_VAR 0 3
66669: PLUS
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: EMPTY
66676: LIST
66677: ADD
66678: ST_TO_ADDR
66679: GO 66628
66681: POP
66682: POP
// result = temp_list2 ;
66683: LD_ADDR_VAR 0 7
66687: PUSH
66688: LD_VAR 0 10
66692: ST_TO_ADDR
// end ;
66693: LD_VAR 0 7
66697: RET
// export function EnemyInRange ( unit , dist ) ; begin
66698: LD_INT 0
66700: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66701: LD_ADDR_VAR 0 3
66705: PUSH
66706: LD_VAR 0 1
66710: PPUSH
66711: CALL_OW 255
66715: PPUSH
66716: LD_VAR 0 1
66720: PPUSH
66721: CALL_OW 250
66725: PPUSH
66726: LD_VAR 0 1
66730: PPUSH
66731: CALL_OW 251
66735: PPUSH
66736: LD_VAR 0 2
66740: PPUSH
66741: CALL 39955 0 4
66745: PUSH
66746: LD_INT 4
66748: ARRAY
66749: ST_TO_ADDR
// end ;
66750: LD_VAR 0 3
66754: RET
// export function PlayerSeeMe ( unit ) ; begin
66755: LD_INT 0
66757: PPUSH
// result := See ( your_side , unit ) ;
66758: LD_ADDR_VAR 0 2
66762: PUSH
66763: LD_OWVAR 2
66767: PPUSH
66768: LD_VAR 0 1
66772: PPUSH
66773: CALL_OW 292
66777: ST_TO_ADDR
// end ;
66778: LD_VAR 0 2
66782: RET
// export function ReverseDir ( unit ) ; begin
66783: LD_INT 0
66785: PPUSH
// if not unit then
66786: LD_VAR 0 1
66790: NOT
66791: IFFALSE 66795
// exit ;
66793: GO 66818
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66795: LD_ADDR_VAR 0 2
66799: PUSH
66800: LD_VAR 0 1
66804: PPUSH
66805: CALL_OW 254
66809: PUSH
66810: LD_INT 3
66812: PLUS
66813: PUSH
66814: LD_INT 6
66816: MOD
66817: ST_TO_ADDR
// end ;
66818: LD_VAR 0 2
66822: RET
// export function ReverseArray ( array ) ; var i ; begin
66823: LD_INT 0
66825: PPUSH
66826: PPUSH
// if not array then
66827: LD_VAR 0 1
66831: NOT
66832: IFFALSE 66836
// exit ;
66834: GO 66891
// result := [ ] ;
66836: LD_ADDR_VAR 0 2
66840: PUSH
66841: EMPTY
66842: ST_TO_ADDR
// for i := array downto 1 do
66843: LD_ADDR_VAR 0 3
66847: PUSH
66848: DOUBLE
66849: LD_VAR 0 1
66853: INC
66854: ST_TO_ADDR
66855: LD_INT 1
66857: PUSH
66858: FOR_DOWNTO
66859: IFFALSE 66889
// result := Join ( result , array [ i ] ) ;
66861: LD_ADDR_VAR 0 2
66865: PUSH
66866: LD_VAR 0 2
66870: PPUSH
66871: LD_VAR 0 1
66875: PUSH
66876: LD_VAR 0 3
66880: ARRAY
66881: PPUSH
66882: CALL 71743 0 2
66886: ST_TO_ADDR
66887: GO 66858
66889: POP
66890: POP
// end ;
66891: LD_VAR 0 2
66895: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66896: LD_INT 0
66898: PPUSH
66899: PPUSH
66900: PPUSH
66901: PPUSH
66902: PPUSH
66903: PPUSH
// if not unit or not hexes then
66904: LD_VAR 0 1
66908: NOT
66909: IFTRUE 66918
66911: PUSH
66912: LD_VAR 0 2
66916: NOT
66917: OR
66918: IFFALSE 66922
// exit ;
66920: GO 67045
// dist := 9999 ;
66922: LD_ADDR_VAR 0 5
66926: PUSH
66927: LD_INT 9999
66929: ST_TO_ADDR
// for i = 1 to hexes do
66930: LD_ADDR_VAR 0 4
66934: PUSH
66935: DOUBLE
66936: LD_INT 1
66938: DEC
66939: ST_TO_ADDR
66940: LD_VAR 0 2
66944: PUSH
66945: FOR_TO
66946: IFFALSE 67033
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66948: LD_ADDR_VAR 0 6
66952: PUSH
66953: LD_VAR 0 1
66957: PPUSH
66958: LD_VAR 0 2
66962: PUSH
66963: LD_VAR 0 4
66967: ARRAY
66968: PUSH
66969: LD_INT 1
66971: ARRAY
66972: PPUSH
66973: LD_VAR 0 2
66977: PUSH
66978: LD_VAR 0 4
66982: ARRAY
66983: PUSH
66984: LD_INT 2
66986: ARRAY
66987: PPUSH
66988: CALL_OW 297
66992: ST_TO_ADDR
// if tdist < dist then
66993: LD_VAR 0 6
66997: PUSH
66998: LD_VAR 0 5
67002: LESS
67003: IFFALSE 67031
// begin hex := hexes [ i ] ;
67005: LD_ADDR_VAR 0 8
67009: PUSH
67010: LD_VAR 0 2
67014: PUSH
67015: LD_VAR 0 4
67019: ARRAY
67020: ST_TO_ADDR
// dist := tdist ;
67021: LD_ADDR_VAR 0 5
67025: PUSH
67026: LD_VAR 0 6
67030: ST_TO_ADDR
// end ; end ;
67031: GO 66945
67033: POP
67034: POP
// result := hex ;
67035: LD_ADDR_VAR 0 3
67039: PUSH
67040: LD_VAR 0 8
67044: ST_TO_ADDR
// end ;
67045: LD_VAR 0 3
67049: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67050: LD_INT 0
67052: PPUSH
67053: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67054: LD_VAR 0 1
67058: NOT
67059: IFTRUE 67098
67061: PUSH
67062: LD_VAR 0 1
67066: PUSH
67067: LD_INT 21
67069: PUSH
67070: LD_INT 2
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 23
67079: PUSH
67080: LD_INT 2
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PPUSH
67091: CALL_OW 69
67095: IN
67096: NOT
67097: OR
67098: IFFALSE 67102
// exit ;
67100: GO 67149
// for i = 1 to 3 do
67102: LD_ADDR_VAR 0 3
67106: PUSH
67107: DOUBLE
67108: LD_INT 1
67110: DEC
67111: ST_TO_ADDR
67112: LD_INT 3
67114: PUSH
67115: FOR_TO
67116: IFFALSE 67147
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67118: LD_VAR 0 1
67122: PPUSH
67123: CALL_OW 250
67127: PPUSH
67128: LD_VAR 0 1
67132: PPUSH
67133: CALL_OW 251
67137: PPUSH
67138: LD_INT 1
67140: PPUSH
67141: CALL_OW 453
67145: GO 67115
67147: POP
67148: POP
// end ;
67149: LD_VAR 0 2
67153: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67154: LD_INT 0
67156: PPUSH
67157: PPUSH
67158: PPUSH
67159: PPUSH
67160: PPUSH
67161: PPUSH
// if not unit or not enemy_unit then
67162: LD_VAR 0 1
67166: NOT
67167: IFTRUE 67176
67169: PUSH
67170: LD_VAR 0 2
67174: NOT
67175: OR
67176: IFFALSE 67180
// exit ;
67178: GO 67661
// if GetLives ( i ) < 250 then
67180: LD_VAR 0 4
67184: PPUSH
67185: CALL_OW 256
67189: PUSH
67190: LD_INT 250
67192: LESS
67193: IFFALSE 67206
// begin ComAutodestruct ( i ) ;
67195: LD_VAR 0 4
67199: PPUSH
67200: CALL 67050 0 1
// exit ;
67204: GO 67661
// end ; x := GetX ( enemy_unit ) ;
67206: LD_ADDR_VAR 0 7
67210: PUSH
67211: LD_VAR 0 2
67215: PPUSH
67216: CALL_OW 250
67220: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67221: LD_ADDR_VAR 0 8
67225: PUSH
67226: LD_VAR 0 2
67230: PPUSH
67231: CALL_OW 251
67235: ST_TO_ADDR
// if not x or not y then
67236: LD_VAR 0 7
67240: NOT
67241: IFTRUE 67250
67243: PUSH
67244: LD_VAR 0 8
67248: NOT
67249: OR
67250: IFFALSE 67254
// exit ;
67252: GO 67661
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67254: LD_ADDR_VAR 0 6
67258: PUSH
67259: LD_VAR 0 7
67263: PPUSH
67264: LD_INT 0
67266: PPUSH
67267: LD_INT 4
67269: PPUSH
67270: CALL_OW 272
67274: PUSH
67275: LD_VAR 0 8
67279: PPUSH
67280: LD_INT 0
67282: PPUSH
67283: LD_INT 4
67285: PPUSH
67286: CALL_OW 273
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_VAR 0 7
67299: PPUSH
67300: LD_INT 1
67302: PPUSH
67303: LD_INT 4
67305: PPUSH
67306: CALL_OW 272
67310: PUSH
67311: LD_VAR 0 8
67315: PPUSH
67316: LD_INT 1
67318: PPUSH
67319: LD_INT 4
67321: PPUSH
67322: CALL_OW 273
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_VAR 0 7
67335: PPUSH
67336: LD_INT 2
67338: PPUSH
67339: LD_INT 4
67341: PPUSH
67342: CALL_OW 272
67346: PUSH
67347: LD_VAR 0 8
67351: PPUSH
67352: LD_INT 2
67354: PPUSH
67355: LD_INT 4
67357: PPUSH
67358: CALL_OW 273
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_VAR 0 7
67371: PPUSH
67372: LD_INT 3
67374: PPUSH
67375: LD_INT 4
67377: PPUSH
67378: CALL_OW 272
67382: PUSH
67383: LD_VAR 0 8
67387: PPUSH
67388: LD_INT 3
67390: PPUSH
67391: LD_INT 4
67393: PPUSH
67394: CALL_OW 273
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_VAR 0 7
67407: PPUSH
67408: LD_INT 4
67410: PPUSH
67411: LD_INT 4
67413: PPUSH
67414: CALL_OW 272
67418: PUSH
67419: LD_VAR 0 8
67423: PPUSH
67424: LD_INT 4
67426: PPUSH
67427: LD_INT 4
67429: PPUSH
67430: CALL_OW 273
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_VAR 0 7
67443: PPUSH
67444: LD_INT 5
67446: PPUSH
67447: LD_INT 4
67449: PPUSH
67450: CALL_OW 272
67454: PUSH
67455: LD_VAR 0 8
67459: PPUSH
67460: LD_INT 5
67462: PPUSH
67463: LD_INT 4
67465: PPUSH
67466: CALL_OW 273
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: ST_TO_ADDR
// for i = tmp downto 1 do
67483: LD_ADDR_VAR 0 4
67487: PUSH
67488: DOUBLE
67489: LD_VAR 0 6
67493: INC
67494: ST_TO_ADDR
67495: LD_INT 1
67497: PUSH
67498: FOR_DOWNTO
67499: IFFALSE 67602
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67501: LD_VAR 0 6
67505: PUSH
67506: LD_VAR 0 4
67510: ARRAY
67511: PUSH
67512: LD_INT 1
67514: ARRAY
67515: PPUSH
67516: LD_VAR 0 6
67520: PUSH
67521: LD_VAR 0 4
67525: ARRAY
67526: PUSH
67527: LD_INT 2
67529: ARRAY
67530: PPUSH
67531: CALL_OW 488
67535: NOT
67536: IFTRUE 67578
67538: PUSH
67539: LD_VAR 0 6
67543: PUSH
67544: LD_VAR 0 4
67548: ARRAY
67549: PUSH
67550: LD_INT 1
67552: ARRAY
67553: PPUSH
67554: LD_VAR 0 6
67558: PUSH
67559: LD_VAR 0 4
67563: ARRAY
67564: PUSH
67565: LD_INT 2
67567: ARRAY
67568: PPUSH
67569: CALL_OW 428
67573: PUSH
67574: LD_INT 0
67576: NONEQUAL
67577: OR
67578: IFFALSE 67600
// tmp := Delete ( tmp , i ) ;
67580: LD_ADDR_VAR 0 6
67584: PUSH
67585: LD_VAR 0 6
67589: PPUSH
67590: LD_VAR 0 4
67594: PPUSH
67595: CALL_OW 3
67599: ST_TO_ADDR
67600: GO 67498
67602: POP
67603: POP
// j := GetClosestHex ( unit , tmp ) ;
67604: LD_ADDR_VAR 0 5
67608: PUSH
67609: LD_VAR 0 1
67613: PPUSH
67614: LD_VAR 0 6
67618: PPUSH
67619: CALL 66896 0 2
67623: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67624: LD_VAR 0 1
67628: PPUSH
67629: LD_VAR 0 5
67633: PUSH
67634: LD_INT 1
67636: ARRAY
67637: PPUSH
67638: LD_VAR 0 5
67642: PUSH
67643: LD_INT 2
67645: ARRAY
67646: PPUSH
67647: CALL_OW 111
// result := j ;
67651: LD_ADDR_VAR 0 3
67655: PUSH
67656: LD_VAR 0 5
67660: ST_TO_ADDR
// end ;
67661: LD_VAR 0 3
67665: RET
// export function PrepareApemanSoldier ( ) ; begin
67666: LD_INT 0
67668: PPUSH
// uc_nation := 0 ;
67669: LD_ADDR_OWVAR 21
67673: PUSH
67674: LD_INT 0
67676: ST_TO_ADDR
// hc_sex := sex_male ;
67677: LD_ADDR_OWVAR 27
67681: PUSH
67682: LD_INT 1
67684: ST_TO_ADDR
// hc_name :=  ;
67685: LD_ADDR_OWVAR 26
67689: PUSH
67690: LD_STRING 
67692: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67693: LD_ADDR_OWVAR 28
67697: PUSH
67698: LD_INT 15
67700: ST_TO_ADDR
// hc_gallery :=  ;
67701: LD_ADDR_OWVAR 33
67705: PUSH
67706: LD_STRING 
67708: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67709: LD_ADDR_OWVAR 31
67713: PUSH
67714: LD_INT 0
67716: PPUSH
67717: LD_INT 3
67719: PPUSH
67720: CALL_OW 12
67724: PUSH
67725: LD_INT 0
67727: PPUSH
67728: LD_INT 3
67730: PPUSH
67731: CALL_OW 12
67735: PUSH
67736: LD_INT 0
67738: PUSH
67739: LD_INT 0
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67748: LD_ADDR_OWVAR 29
67752: PUSH
67753: LD_INT 10
67755: PUSH
67756: LD_INT 12
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: ST_TO_ADDR
// end ;
67763: LD_VAR 0 1
67767: RET
// export function PrepareApemanEngineer ( ) ; begin
67768: LD_INT 0
67770: PPUSH
// uc_nation := 0 ;
67771: LD_ADDR_OWVAR 21
67775: PUSH
67776: LD_INT 0
67778: ST_TO_ADDR
// hc_sex := sex_male ;
67779: LD_ADDR_OWVAR 27
67783: PUSH
67784: LD_INT 1
67786: ST_TO_ADDR
// hc_name :=  ;
67787: LD_ADDR_OWVAR 26
67791: PUSH
67792: LD_STRING 
67794: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67795: LD_ADDR_OWVAR 28
67799: PUSH
67800: LD_INT 16
67802: ST_TO_ADDR
// hc_gallery :=  ;
67803: LD_ADDR_OWVAR 33
67807: PUSH
67808: LD_STRING 
67810: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67811: LD_ADDR_OWVAR 31
67815: PUSH
67816: LD_INT 0
67818: PPUSH
67819: LD_INT 3
67821: PPUSH
67822: CALL_OW 12
67826: PUSH
67827: LD_INT 0
67829: PPUSH
67830: LD_INT 3
67832: PPUSH
67833: CALL_OW 12
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67850: LD_ADDR_OWVAR 29
67854: PUSH
67855: LD_INT 10
67857: PUSH
67858: LD_INT 12
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: ST_TO_ADDR
// end ;
67865: LD_VAR 0 1
67869: RET
// export function PrepareApeman ( agressivity ) ; begin
67870: LD_INT 0
67872: PPUSH
// uc_side := 0 ;
67873: LD_ADDR_OWVAR 20
67877: PUSH
67878: LD_INT 0
67880: ST_TO_ADDR
// uc_nation := 0 ;
67881: LD_ADDR_OWVAR 21
67885: PUSH
67886: LD_INT 0
67888: ST_TO_ADDR
// hc_sex := sex_male ;
67889: LD_ADDR_OWVAR 27
67893: PUSH
67894: LD_INT 1
67896: ST_TO_ADDR
// hc_class := class_apeman ;
67897: LD_ADDR_OWVAR 28
67901: PUSH
67902: LD_INT 12
67904: ST_TO_ADDR
// hc_gallery :=  ;
67905: LD_ADDR_OWVAR 33
67909: PUSH
67910: LD_STRING 
67912: ST_TO_ADDR
// hc_name :=  ;
67913: LD_ADDR_OWVAR 26
67917: PUSH
67918: LD_STRING 
67920: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67921: LD_ADDR_OWVAR 29
67925: PUSH
67926: LD_INT 10
67928: PUSH
67929: LD_INT 12
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: ST_TO_ADDR
// if agressivity = 0 then
67936: LD_VAR 0 1
67940: PUSH
67941: LD_INT 0
67943: EQUAL
67944: IFFALSE 67956
// hc_agressivity := 0 else
67946: LD_ADDR_OWVAR 35
67950: PUSH
67951: LD_INT 0
67953: ST_TO_ADDR
67954: GO 67977
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67956: LD_ADDR_OWVAR 35
67960: PUSH
67961: LD_VAR 0 1
67965: NEG
67966: PPUSH
67967: LD_VAR 0 1
67971: PPUSH
67972: CALL_OW 12
67976: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67977: LD_ADDR_OWVAR 31
67981: PUSH
67982: LD_INT 0
67984: PPUSH
67985: LD_INT 3
67987: PPUSH
67988: CALL_OW 12
67992: PUSH
67993: LD_INT 0
67995: PPUSH
67996: LD_INT 3
67998: PPUSH
67999: CALL_OW 12
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: ST_TO_ADDR
// end ;
68016: LD_VAR 0 2
68020: RET
// export function PrepareTiger ( agressivity ) ; begin
68021: LD_INT 0
68023: PPUSH
// uc_side := 0 ;
68024: LD_ADDR_OWVAR 20
68028: PUSH
68029: LD_INT 0
68031: ST_TO_ADDR
// uc_nation := 0 ;
68032: LD_ADDR_OWVAR 21
68036: PUSH
68037: LD_INT 0
68039: ST_TO_ADDR
// InitHc ;
68040: CALL_OW 19
// hc_class := class_tiger ;
68044: LD_ADDR_OWVAR 28
68048: PUSH
68049: LD_INT 14
68051: ST_TO_ADDR
// hc_gallery :=  ;
68052: LD_ADDR_OWVAR 33
68056: PUSH
68057: LD_STRING 
68059: ST_TO_ADDR
// hc_name :=  ;
68060: LD_ADDR_OWVAR 26
68064: PUSH
68065: LD_STRING 
68067: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68068: LD_ADDR_OWVAR 35
68072: PUSH
68073: LD_VAR 0 1
68077: NEG
68078: PPUSH
68079: LD_VAR 0 1
68083: PPUSH
68084: CALL_OW 12
68088: ST_TO_ADDR
// end ;
68089: LD_VAR 0 2
68093: RET
// export function PrepareEnchidna ( ) ; begin
68094: LD_INT 0
68096: PPUSH
// uc_side := 0 ;
68097: LD_ADDR_OWVAR 20
68101: PUSH
68102: LD_INT 0
68104: ST_TO_ADDR
// uc_nation := 0 ;
68105: LD_ADDR_OWVAR 21
68109: PUSH
68110: LD_INT 0
68112: ST_TO_ADDR
// InitHc ;
68113: CALL_OW 19
// hc_class := class_baggie ;
68117: LD_ADDR_OWVAR 28
68121: PUSH
68122: LD_INT 13
68124: ST_TO_ADDR
// hc_gallery :=  ;
68125: LD_ADDR_OWVAR 33
68129: PUSH
68130: LD_STRING 
68132: ST_TO_ADDR
// hc_name :=  ;
68133: LD_ADDR_OWVAR 26
68137: PUSH
68138: LD_STRING 
68140: ST_TO_ADDR
// end ;
68141: LD_VAR 0 1
68145: RET
// export function PrepareFrog ( ) ; begin
68146: LD_INT 0
68148: PPUSH
// uc_side := 0 ;
68149: LD_ADDR_OWVAR 20
68153: PUSH
68154: LD_INT 0
68156: ST_TO_ADDR
// uc_nation := 0 ;
68157: LD_ADDR_OWVAR 21
68161: PUSH
68162: LD_INT 0
68164: ST_TO_ADDR
// InitHc ;
68165: CALL_OW 19
// hc_class := class_frog ;
68169: LD_ADDR_OWVAR 28
68173: PUSH
68174: LD_INT 19
68176: ST_TO_ADDR
// hc_gallery :=  ;
68177: LD_ADDR_OWVAR 33
68181: PUSH
68182: LD_STRING 
68184: ST_TO_ADDR
// hc_name :=  ;
68185: LD_ADDR_OWVAR 26
68189: PUSH
68190: LD_STRING 
68192: ST_TO_ADDR
// end ;
68193: LD_VAR 0 1
68197: RET
// export function PrepareFish ( ) ; begin
68198: LD_INT 0
68200: PPUSH
// uc_side := 0 ;
68201: LD_ADDR_OWVAR 20
68205: PUSH
68206: LD_INT 0
68208: ST_TO_ADDR
// uc_nation := 0 ;
68209: LD_ADDR_OWVAR 21
68213: PUSH
68214: LD_INT 0
68216: ST_TO_ADDR
// InitHc ;
68217: CALL_OW 19
// hc_class := class_fish ;
68221: LD_ADDR_OWVAR 28
68225: PUSH
68226: LD_INT 20
68228: ST_TO_ADDR
// hc_gallery :=  ;
68229: LD_ADDR_OWVAR 33
68233: PUSH
68234: LD_STRING 
68236: ST_TO_ADDR
// hc_name :=  ;
68237: LD_ADDR_OWVAR 26
68241: PUSH
68242: LD_STRING 
68244: ST_TO_ADDR
// end ;
68245: LD_VAR 0 1
68249: RET
// export function PrepareBird ( ) ; begin
68250: LD_INT 0
68252: PPUSH
// uc_side := 0 ;
68253: LD_ADDR_OWVAR 20
68257: PUSH
68258: LD_INT 0
68260: ST_TO_ADDR
// uc_nation := 0 ;
68261: LD_ADDR_OWVAR 21
68265: PUSH
68266: LD_INT 0
68268: ST_TO_ADDR
// InitHc ;
68269: CALL_OW 19
// hc_class := class_phororhacos ;
68273: LD_ADDR_OWVAR 28
68277: PUSH
68278: LD_INT 18
68280: ST_TO_ADDR
// hc_gallery :=  ;
68281: LD_ADDR_OWVAR 33
68285: PUSH
68286: LD_STRING 
68288: ST_TO_ADDR
// hc_name :=  ;
68289: LD_ADDR_OWVAR 26
68293: PUSH
68294: LD_STRING 
68296: ST_TO_ADDR
// end ;
68297: LD_VAR 0 1
68301: RET
// export function PrepareHorse ( ) ; begin
68302: LD_INT 0
68304: PPUSH
// uc_side := 0 ;
68305: LD_ADDR_OWVAR 20
68309: PUSH
68310: LD_INT 0
68312: ST_TO_ADDR
// uc_nation := 0 ;
68313: LD_ADDR_OWVAR 21
68317: PUSH
68318: LD_INT 0
68320: ST_TO_ADDR
// InitHc ;
68321: CALL_OW 19
// hc_class := class_horse ;
68325: LD_ADDR_OWVAR 28
68329: PUSH
68330: LD_INT 21
68332: ST_TO_ADDR
// hc_gallery :=  ;
68333: LD_ADDR_OWVAR 33
68337: PUSH
68338: LD_STRING 
68340: ST_TO_ADDR
// hc_name :=  ;
68341: LD_ADDR_OWVAR 26
68345: PUSH
68346: LD_STRING 
68348: ST_TO_ADDR
// end ;
68349: LD_VAR 0 1
68353: RET
// export function PrepareMastodont ( ) ; begin
68354: LD_INT 0
68356: PPUSH
// uc_side := 0 ;
68357: LD_ADDR_OWVAR 20
68361: PUSH
68362: LD_INT 0
68364: ST_TO_ADDR
// uc_nation := 0 ;
68365: LD_ADDR_OWVAR 21
68369: PUSH
68370: LD_INT 0
68372: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68373: LD_ADDR_OWVAR 37
68377: PUSH
68378: LD_INT 31
68380: ST_TO_ADDR
// vc_control := control_rider ;
68381: LD_ADDR_OWVAR 38
68385: PUSH
68386: LD_INT 4
68388: ST_TO_ADDR
// end ;
68389: LD_VAR 0 1
68393: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68394: LD_INT 0
68396: PPUSH
68397: PPUSH
68398: PPUSH
// uc_side = 0 ;
68399: LD_ADDR_OWVAR 20
68403: PUSH
68404: LD_INT 0
68406: ST_TO_ADDR
// uc_nation = 0 ;
68407: LD_ADDR_OWVAR 21
68411: PUSH
68412: LD_INT 0
68414: ST_TO_ADDR
// InitHc_All ( ) ;
68415: CALL_OW 584
// InitVc ;
68419: CALL_OW 20
// if mastodonts then
68423: LD_VAR 0 6
68427: IFFALSE 68494
// for i = 1 to mastodonts do
68429: LD_ADDR_VAR 0 11
68433: PUSH
68434: DOUBLE
68435: LD_INT 1
68437: DEC
68438: ST_TO_ADDR
68439: LD_VAR 0 6
68443: PUSH
68444: FOR_TO
68445: IFFALSE 68492
// begin vc_chassis := 31 ;
68447: LD_ADDR_OWVAR 37
68451: PUSH
68452: LD_INT 31
68454: ST_TO_ADDR
// vc_control := control_rider ;
68455: LD_ADDR_OWVAR 38
68459: PUSH
68460: LD_INT 4
68462: ST_TO_ADDR
// animal := CreateVehicle ;
68463: LD_ADDR_VAR 0 12
68467: PUSH
68468: CALL_OW 45
68472: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68473: LD_VAR 0 12
68477: PPUSH
68478: LD_VAR 0 8
68482: PPUSH
68483: LD_INT 0
68485: PPUSH
68486: CALL 70636 0 3
// end ;
68490: GO 68444
68492: POP
68493: POP
// if horses then
68494: LD_VAR 0 5
68498: IFFALSE 68565
// for i = 1 to horses do
68500: LD_ADDR_VAR 0 11
68504: PUSH
68505: DOUBLE
68506: LD_INT 1
68508: DEC
68509: ST_TO_ADDR
68510: LD_VAR 0 5
68514: PUSH
68515: FOR_TO
68516: IFFALSE 68563
// begin hc_class := 21 ;
68518: LD_ADDR_OWVAR 28
68522: PUSH
68523: LD_INT 21
68525: ST_TO_ADDR
// hc_gallery :=  ;
68526: LD_ADDR_OWVAR 33
68530: PUSH
68531: LD_STRING 
68533: ST_TO_ADDR
// animal := CreateHuman ;
68534: LD_ADDR_VAR 0 12
68538: PUSH
68539: CALL_OW 44
68543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68544: LD_VAR 0 12
68548: PPUSH
68549: LD_VAR 0 8
68553: PPUSH
68554: LD_INT 0
68556: PPUSH
68557: CALL 70636 0 3
// end ;
68561: GO 68515
68563: POP
68564: POP
// if birds then
68565: LD_VAR 0 1
68569: IFFALSE 68636
// for i = 1 to birds do
68571: LD_ADDR_VAR 0 11
68575: PUSH
68576: DOUBLE
68577: LD_INT 1
68579: DEC
68580: ST_TO_ADDR
68581: LD_VAR 0 1
68585: PUSH
68586: FOR_TO
68587: IFFALSE 68634
// begin hc_class := 18 ;
68589: LD_ADDR_OWVAR 28
68593: PUSH
68594: LD_INT 18
68596: ST_TO_ADDR
// hc_gallery =  ;
68597: LD_ADDR_OWVAR 33
68601: PUSH
68602: LD_STRING 
68604: ST_TO_ADDR
// animal := CreateHuman ;
68605: LD_ADDR_VAR 0 12
68609: PUSH
68610: CALL_OW 44
68614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68615: LD_VAR 0 12
68619: PPUSH
68620: LD_VAR 0 8
68624: PPUSH
68625: LD_INT 0
68627: PPUSH
68628: CALL 70636 0 3
// end ;
68632: GO 68586
68634: POP
68635: POP
// if tigers then
68636: LD_VAR 0 2
68640: IFFALSE 68724
// for i = 1 to tigers do
68642: LD_ADDR_VAR 0 11
68646: PUSH
68647: DOUBLE
68648: LD_INT 1
68650: DEC
68651: ST_TO_ADDR
68652: LD_VAR 0 2
68656: PUSH
68657: FOR_TO
68658: IFFALSE 68722
// begin hc_class = class_tiger ;
68660: LD_ADDR_OWVAR 28
68664: PUSH
68665: LD_INT 14
68667: ST_TO_ADDR
// hc_gallery =  ;
68668: LD_ADDR_OWVAR 33
68672: PUSH
68673: LD_STRING 
68675: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68676: LD_ADDR_OWVAR 35
68680: PUSH
68681: LD_INT 7
68683: NEG
68684: PPUSH
68685: LD_INT 7
68687: PPUSH
68688: CALL_OW 12
68692: ST_TO_ADDR
// animal := CreateHuman ;
68693: LD_ADDR_VAR 0 12
68697: PUSH
68698: CALL_OW 44
68702: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68703: LD_VAR 0 12
68707: PPUSH
68708: LD_VAR 0 8
68712: PPUSH
68713: LD_INT 0
68715: PPUSH
68716: CALL 70636 0 3
// end ;
68720: GO 68657
68722: POP
68723: POP
// if apemans then
68724: LD_VAR 0 3
68728: IFFALSE 68851
// for i = 1 to apemans do
68730: LD_ADDR_VAR 0 11
68734: PUSH
68735: DOUBLE
68736: LD_INT 1
68738: DEC
68739: ST_TO_ADDR
68740: LD_VAR 0 3
68744: PUSH
68745: FOR_TO
68746: IFFALSE 68849
// begin hc_class = class_apeman ;
68748: LD_ADDR_OWVAR 28
68752: PUSH
68753: LD_INT 12
68755: ST_TO_ADDR
// hc_gallery =  ;
68756: LD_ADDR_OWVAR 33
68760: PUSH
68761: LD_STRING 
68763: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68764: LD_ADDR_OWVAR 35
68768: PUSH
68769: LD_INT 2
68771: NEG
68772: PPUSH
68773: LD_INT 2
68775: PPUSH
68776: CALL_OW 12
68780: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68781: LD_ADDR_OWVAR 31
68785: PUSH
68786: LD_INT 1
68788: PPUSH
68789: LD_INT 3
68791: PPUSH
68792: CALL_OW 12
68796: PUSH
68797: LD_INT 1
68799: PPUSH
68800: LD_INT 3
68802: PPUSH
68803: CALL_OW 12
68807: PUSH
68808: LD_INT 0
68810: PUSH
68811: LD_INT 0
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: ST_TO_ADDR
// animal := CreateHuman ;
68820: LD_ADDR_VAR 0 12
68824: PUSH
68825: CALL_OW 44
68829: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68830: LD_VAR 0 12
68834: PPUSH
68835: LD_VAR 0 8
68839: PPUSH
68840: LD_INT 0
68842: PPUSH
68843: CALL 70636 0 3
// end ;
68847: GO 68745
68849: POP
68850: POP
// if enchidnas then
68851: LD_VAR 0 4
68855: IFFALSE 68922
// for i = 1 to enchidnas do
68857: LD_ADDR_VAR 0 11
68861: PUSH
68862: DOUBLE
68863: LD_INT 1
68865: DEC
68866: ST_TO_ADDR
68867: LD_VAR 0 4
68871: PUSH
68872: FOR_TO
68873: IFFALSE 68920
// begin hc_class = 13 ;
68875: LD_ADDR_OWVAR 28
68879: PUSH
68880: LD_INT 13
68882: ST_TO_ADDR
// hc_gallery =  ;
68883: LD_ADDR_OWVAR 33
68887: PUSH
68888: LD_STRING 
68890: ST_TO_ADDR
// animal := CreateHuman ;
68891: LD_ADDR_VAR 0 12
68895: PUSH
68896: CALL_OW 44
68900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68901: LD_VAR 0 12
68905: PPUSH
68906: LD_VAR 0 8
68910: PPUSH
68911: LD_INT 0
68913: PPUSH
68914: CALL 70636 0 3
// end ;
68918: GO 68872
68920: POP
68921: POP
// if fishes then
68922: LD_VAR 0 7
68926: IFFALSE 68993
// for i = 1 to fishes do
68928: LD_ADDR_VAR 0 11
68932: PUSH
68933: DOUBLE
68934: LD_INT 1
68936: DEC
68937: ST_TO_ADDR
68938: LD_VAR 0 7
68942: PUSH
68943: FOR_TO
68944: IFFALSE 68991
// begin hc_class = 20 ;
68946: LD_ADDR_OWVAR 28
68950: PUSH
68951: LD_INT 20
68953: ST_TO_ADDR
// hc_gallery =  ;
68954: LD_ADDR_OWVAR 33
68958: PUSH
68959: LD_STRING 
68961: ST_TO_ADDR
// animal := CreateHuman ;
68962: LD_ADDR_VAR 0 12
68966: PUSH
68967: CALL_OW 44
68971: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68972: LD_VAR 0 12
68976: PPUSH
68977: LD_VAR 0 9
68981: PPUSH
68982: LD_INT 0
68984: PPUSH
68985: CALL 70636 0 3
// end ;
68989: GO 68943
68991: POP
68992: POP
// end ;
68993: LD_VAR 0 10
68997: RET
// export function WantHeal ( sci , unit ) ; begin
68998: LD_INT 0
69000: PPUSH
// if GetTaskList ( sci ) > 0 then
69001: LD_VAR 0 1
69005: PPUSH
69006: CALL_OW 437
69010: PUSH
69011: LD_INT 0
69013: GREATER
69014: IFFALSE 69086
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69016: LD_VAR 0 1
69020: PPUSH
69021: CALL_OW 437
69025: PUSH
69026: LD_INT 1
69028: ARRAY
69029: PUSH
69030: LD_INT 1
69032: ARRAY
69033: PUSH
69034: LD_STRING l
69036: EQUAL
69037: IFFALSE 69064
69039: PUSH
69040: LD_VAR 0 1
69044: PPUSH
69045: CALL_OW 437
69049: PUSH
69050: LD_INT 1
69052: ARRAY
69053: PUSH
69054: LD_INT 4
69056: ARRAY
69057: PUSH
69058: LD_VAR 0 2
69062: EQUAL
69063: AND
69064: IFFALSE 69076
// result := true else
69066: LD_ADDR_VAR 0 3
69070: PUSH
69071: LD_INT 1
69073: ST_TO_ADDR
69074: GO 69084
// result := false ;
69076: LD_ADDR_VAR 0 3
69080: PUSH
69081: LD_INT 0
69083: ST_TO_ADDR
// end else
69084: GO 69094
// result := false ;
69086: LD_ADDR_VAR 0 3
69090: PUSH
69091: LD_INT 0
69093: ST_TO_ADDR
// end ;
69094: LD_VAR 0 3
69098: RET
// export function HealTarget ( sci ) ; begin
69099: LD_INT 0
69101: PPUSH
// if not sci then
69102: LD_VAR 0 1
69106: NOT
69107: IFFALSE 69111
// exit ;
69109: GO 69176
// result := 0 ;
69111: LD_ADDR_VAR 0 2
69115: PUSH
69116: LD_INT 0
69118: ST_TO_ADDR
// if GetTaskList ( sci ) then
69119: LD_VAR 0 1
69123: PPUSH
69124: CALL_OW 437
69128: IFFALSE 69176
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69130: LD_VAR 0 1
69134: PPUSH
69135: CALL_OW 437
69139: PUSH
69140: LD_INT 1
69142: ARRAY
69143: PUSH
69144: LD_INT 1
69146: ARRAY
69147: PUSH
69148: LD_STRING l
69150: EQUAL
69151: IFFALSE 69176
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69153: LD_ADDR_VAR 0 2
69157: PUSH
69158: LD_VAR 0 1
69162: PPUSH
69163: CALL_OW 437
69167: PUSH
69168: LD_INT 1
69170: ARRAY
69171: PUSH
69172: LD_INT 4
69174: ARRAY
69175: ST_TO_ADDR
// end ;
69176: LD_VAR 0 2
69180: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69181: LD_INT 0
69183: PPUSH
69184: PPUSH
69185: PPUSH
69186: PPUSH
// if not base_units then
69187: LD_VAR 0 1
69191: NOT
69192: IFFALSE 69196
// exit ;
69194: GO 69283
// result := false ;
69196: LD_ADDR_VAR 0 2
69200: PUSH
69201: LD_INT 0
69203: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69204: LD_ADDR_VAR 0 5
69208: PUSH
69209: LD_VAR 0 1
69213: PPUSH
69214: LD_INT 21
69216: PUSH
69217: LD_INT 3
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PPUSH
69224: CALL_OW 72
69228: ST_TO_ADDR
// if not tmp then
69229: LD_VAR 0 5
69233: NOT
69234: IFFALSE 69238
// exit ;
69236: GO 69283
// for i in tmp do
69238: LD_ADDR_VAR 0 3
69242: PUSH
69243: LD_VAR 0 5
69247: PUSH
69248: FOR_IN
69249: IFFALSE 69281
// begin result := EnemyInRange ( i , 22 ) ;
69251: LD_ADDR_VAR 0 2
69255: PUSH
69256: LD_VAR 0 3
69260: PPUSH
69261: LD_INT 22
69263: PPUSH
69264: CALL 66698 0 2
69268: ST_TO_ADDR
// if result then
69269: LD_VAR 0 2
69273: IFFALSE 69279
// exit ;
69275: POP
69276: POP
69277: GO 69283
// end ;
69279: GO 69248
69281: POP
69282: POP
// end ;
69283: LD_VAR 0 2
69287: RET
// export function FilterByTag ( units , tag ) ; begin
69288: LD_INT 0
69290: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69291: LD_ADDR_VAR 0 3
69295: PUSH
69296: LD_VAR 0 1
69300: PPUSH
69301: LD_INT 120
69303: PUSH
69304: LD_VAR 0 2
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PPUSH
69313: CALL_OW 72
69317: ST_TO_ADDR
// end ;
69318: LD_VAR 0 3
69322: RET
// export function IsDriver ( un ) ; begin
69323: LD_INT 0
69325: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69326: LD_ADDR_VAR 0 2
69330: PUSH
69331: LD_VAR 0 1
69335: PUSH
69336: LD_INT 55
69338: PUSH
69339: EMPTY
69340: LIST
69341: PPUSH
69342: CALL_OW 69
69346: IN
69347: ST_TO_ADDR
// end ;
69348: LD_VAR 0 2
69352: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69353: LD_INT 0
69355: PPUSH
69356: PPUSH
// list := [ ] ;
69357: LD_ADDR_VAR 0 5
69361: PUSH
69362: EMPTY
69363: ST_TO_ADDR
// case d of 0 :
69364: LD_VAR 0 3
69368: PUSH
69369: LD_INT 0
69371: DOUBLE
69372: EQUAL
69373: IFTRUE 69377
69375: GO 69510
69377: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69378: LD_ADDR_VAR 0 5
69382: PUSH
69383: LD_VAR 0 1
69387: PUSH
69388: LD_INT 4
69390: MINUS
69391: PUSH
69392: LD_VAR 0 2
69396: PUSH
69397: LD_INT 4
69399: MINUS
69400: PUSH
69401: LD_INT 2
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: LIST
69408: PUSH
69409: LD_VAR 0 1
69413: PUSH
69414: LD_INT 3
69416: MINUS
69417: PUSH
69418: LD_VAR 0 2
69422: PUSH
69423: LD_INT 1
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: LIST
69430: PUSH
69431: LD_VAR 0 1
69435: PUSH
69436: LD_INT 4
69438: PLUS
69439: PUSH
69440: LD_VAR 0 2
69444: PUSH
69445: LD_INT 4
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: LIST
69452: PUSH
69453: LD_VAR 0 1
69457: PUSH
69458: LD_INT 3
69460: PLUS
69461: PUSH
69462: LD_VAR 0 2
69466: PUSH
69467: LD_INT 3
69469: PLUS
69470: PUSH
69471: LD_INT 5
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: LIST
69478: PUSH
69479: LD_VAR 0 1
69483: PUSH
69484: LD_VAR 0 2
69488: PUSH
69489: LD_INT 4
69491: PLUS
69492: PUSH
69493: LD_INT 0
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: LIST
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: ST_TO_ADDR
// end ; 1 :
69508: GO 70208
69510: LD_INT 1
69512: DOUBLE
69513: EQUAL
69514: IFTRUE 69518
69516: GO 69651
69518: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69519: LD_ADDR_VAR 0 5
69523: PUSH
69524: LD_VAR 0 1
69528: PUSH
69529: LD_VAR 0 2
69533: PUSH
69534: LD_INT 4
69536: MINUS
69537: PUSH
69538: LD_INT 3
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: LIST
69545: PUSH
69546: LD_VAR 0 1
69550: PUSH
69551: LD_INT 3
69553: MINUS
69554: PUSH
69555: LD_VAR 0 2
69559: PUSH
69560: LD_INT 3
69562: MINUS
69563: PUSH
69564: LD_INT 2
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: LIST
69571: PUSH
69572: LD_VAR 0 1
69576: PUSH
69577: LD_INT 4
69579: MINUS
69580: PUSH
69581: LD_VAR 0 2
69585: PUSH
69586: LD_INT 1
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: LIST
69593: PUSH
69594: LD_VAR 0 1
69598: PUSH
69599: LD_VAR 0 2
69603: PUSH
69604: LD_INT 3
69606: PLUS
69607: PUSH
69608: LD_INT 0
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: LIST
69615: PUSH
69616: LD_VAR 0 1
69620: PUSH
69621: LD_INT 4
69623: PLUS
69624: PUSH
69625: LD_VAR 0 2
69629: PUSH
69630: LD_INT 4
69632: PLUS
69633: PUSH
69634: LD_INT 5
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: LIST
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: ST_TO_ADDR
// end ; 2 :
69649: GO 70208
69651: LD_INT 2
69653: DOUBLE
69654: EQUAL
69655: IFTRUE 69659
69657: GO 69788
69659: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69660: LD_ADDR_VAR 0 5
69664: PUSH
69665: LD_VAR 0 1
69669: PUSH
69670: LD_VAR 0 2
69674: PUSH
69675: LD_INT 3
69677: MINUS
69678: PUSH
69679: LD_INT 3
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: LIST
69686: PUSH
69687: LD_VAR 0 1
69691: PUSH
69692: LD_INT 4
69694: PLUS
69695: PUSH
69696: LD_VAR 0 2
69700: PUSH
69701: LD_INT 4
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: LIST
69708: PUSH
69709: LD_VAR 0 1
69713: PUSH
69714: LD_VAR 0 2
69718: PUSH
69719: LD_INT 4
69721: PLUS
69722: PUSH
69723: LD_INT 0
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: LIST
69730: PUSH
69731: LD_VAR 0 1
69735: PUSH
69736: LD_INT 3
69738: MINUS
69739: PUSH
69740: LD_VAR 0 2
69744: PUSH
69745: LD_INT 1
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: LIST
69752: PUSH
69753: LD_VAR 0 1
69757: PUSH
69758: LD_INT 4
69760: MINUS
69761: PUSH
69762: LD_VAR 0 2
69766: PUSH
69767: LD_INT 4
69769: MINUS
69770: PUSH
69771: LD_INT 2
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: LIST
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: ST_TO_ADDR
// end ; 3 :
69786: GO 70208
69788: LD_INT 3
69790: DOUBLE
69791: EQUAL
69792: IFTRUE 69796
69794: GO 69929
69796: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69797: LD_ADDR_VAR 0 5
69801: PUSH
69802: LD_VAR 0 1
69806: PUSH
69807: LD_INT 3
69809: PLUS
69810: PUSH
69811: LD_VAR 0 2
69815: PUSH
69816: LD_INT 4
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: LIST
69823: PUSH
69824: LD_VAR 0 1
69828: PUSH
69829: LD_INT 4
69831: PLUS
69832: PUSH
69833: LD_VAR 0 2
69837: PUSH
69838: LD_INT 4
69840: PLUS
69841: PUSH
69842: LD_INT 5
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: LIST
69849: PUSH
69850: LD_VAR 0 1
69854: PUSH
69855: LD_INT 4
69857: MINUS
69858: PUSH
69859: LD_VAR 0 2
69863: PUSH
69864: LD_INT 1
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: LIST
69871: PUSH
69872: LD_VAR 0 1
69876: PUSH
69877: LD_VAR 0 2
69881: PUSH
69882: LD_INT 4
69884: MINUS
69885: PUSH
69886: LD_INT 3
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: LIST
69893: PUSH
69894: LD_VAR 0 1
69898: PUSH
69899: LD_INT 3
69901: MINUS
69902: PUSH
69903: LD_VAR 0 2
69907: PUSH
69908: LD_INT 3
69910: MINUS
69911: PUSH
69912: LD_INT 2
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: LIST
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: ST_TO_ADDR
// end ; 4 :
69927: GO 70208
69929: LD_INT 4
69931: DOUBLE
69932: EQUAL
69933: IFTRUE 69937
69935: GO 70070
69937: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69938: LD_ADDR_VAR 0 5
69942: PUSH
69943: LD_VAR 0 1
69947: PUSH
69948: LD_VAR 0 2
69952: PUSH
69953: LD_INT 4
69955: PLUS
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: LIST
69964: PUSH
69965: LD_VAR 0 1
69969: PUSH
69970: LD_INT 3
69972: PLUS
69973: PUSH
69974: LD_VAR 0 2
69978: PUSH
69979: LD_INT 3
69981: PLUS
69982: PUSH
69983: LD_INT 5
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: LIST
69990: PUSH
69991: LD_VAR 0 1
69995: PUSH
69996: LD_INT 4
69998: PLUS
69999: PUSH
70000: LD_VAR 0 2
70004: PUSH
70005: LD_INT 4
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: LIST
70012: PUSH
70013: LD_VAR 0 1
70017: PUSH
70018: LD_VAR 0 2
70022: PUSH
70023: LD_INT 3
70025: MINUS
70026: PUSH
70027: LD_INT 3
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: LIST
70034: PUSH
70035: LD_VAR 0 1
70039: PUSH
70040: LD_INT 4
70042: MINUS
70043: PUSH
70044: LD_VAR 0 2
70048: PUSH
70049: LD_INT 4
70051: MINUS
70052: PUSH
70053: LD_INT 2
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: LIST
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: ST_TO_ADDR
// end ; 5 :
70068: GO 70208
70070: LD_INT 5
70072: DOUBLE
70073: EQUAL
70074: IFTRUE 70078
70076: GO 70207
70078: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70079: LD_ADDR_VAR 0 5
70083: PUSH
70084: LD_VAR 0 1
70088: PUSH
70089: LD_INT 4
70091: MINUS
70092: PUSH
70093: LD_VAR 0 2
70097: PUSH
70098: LD_INT 1
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: LIST
70105: PUSH
70106: LD_VAR 0 1
70110: PUSH
70111: LD_VAR 0 2
70115: PUSH
70116: LD_INT 4
70118: MINUS
70119: PUSH
70120: LD_INT 3
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: LIST
70127: PUSH
70128: LD_VAR 0 1
70132: PUSH
70133: LD_INT 4
70135: PLUS
70136: PUSH
70137: LD_VAR 0 2
70141: PUSH
70142: LD_INT 4
70144: PLUS
70145: PUSH
70146: LD_INT 5
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: LIST
70153: PUSH
70154: LD_VAR 0 1
70158: PUSH
70159: LD_INT 3
70161: PLUS
70162: PUSH
70163: LD_VAR 0 2
70167: PUSH
70168: LD_INT 4
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: LIST
70175: PUSH
70176: LD_VAR 0 1
70180: PUSH
70181: LD_VAR 0 2
70185: PUSH
70186: LD_INT 3
70188: PLUS
70189: PUSH
70190: LD_INT 0
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: LIST
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: ST_TO_ADDR
// end ; end ;
70205: GO 70208
70207: POP
// result := list ;
70208: LD_ADDR_VAR 0 4
70212: PUSH
70213: LD_VAR 0 5
70217: ST_TO_ADDR
// end ;
70218: LD_VAR 0 4
70222: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70223: LD_INT 0
70225: PPUSH
70226: PPUSH
70227: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70228: LD_VAR 0 1
70232: NOT
70233: IFTRUE 70261
70235: PUSH
70236: LD_VAR 0 2
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: LD_INT 2
70246: PUSH
70247: LD_INT 3
70249: PUSH
70250: LD_INT 4
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: IN
70259: NOT
70260: OR
70261: IFFALSE 70265
// exit ;
70263: GO 70348
// tmp := [ ] ;
70265: LD_ADDR_VAR 0 5
70269: PUSH
70270: EMPTY
70271: ST_TO_ADDR
// for i in units do
70272: LD_ADDR_VAR 0 4
70276: PUSH
70277: LD_VAR 0 1
70281: PUSH
70282: FOR_IN
70283: IFFALSE 70317
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70285: LD_ADDR_VAR 0 5
70289: PUSH
70290: LD_VAR 0 5
70294: PPUSH
70295: LD_VAR 0 4
70299: PPUSH
70300: LD_VAR 0 2
70304: PPUSH
70305: CALL_OW 259
70309: PPUSH
70310: CALL 71743 0 2
70314: ST_TO_ADDR
70315: GO 70282
70317: POP
70318: POP
// if not tmp then
70319: LD_VAR 0 5
70323: NOT
70324: IFFALSE 70328
// exit ;
70326: GO 70348
// result := SortListByListDesc ( units , tmp ) ;
70328: LD_ADDR_VAR 0 3
70332: PUSH
70333: LD_VAR 0 1
70337: PPUSH
70338: LD_VAR 0 5
70342: PPUSH
70343: CALL_OW 77
70347: ST_TO_ADDR
// end ;
70348: LD_VAR 0 3
70352: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70353: LD_INT 0
70355: PPUSH
70356: PPUSH
70357: PPUSH
// result := false ;
70358: LD_ADDR_VAR 0 3
70362: PUSH
70363: LD_INT 0
70365: ST_TO_ADDR
// if not building then
70366: LD_VAR 0 2
70370: NOT
70371: IFFALSE 70375
// exit ;
70373: GO 70519
// x := GetX ( building ) ;
70375: LD_ADDR_VAR 0 4
70379: PUSH
70380: LD_VAR 0 2
70384: PPUSH
70385: CALL_OW 250
70389: ST_TO_ADDR
// y := GetY ( building ) ;
70390: LD_ADDR_VAR 0 5
70394: PUSH
70395: LD_VAR 0 2
70399: PPUSH
70400: CALL_OW 251
70404: ST_TO_ADDR
// if not x or not y then
70405: LD_VAR 0 4
70409: NOT
70410: IFTRUE 70419
70412: PUSH
70413: LD_VAR 0 5
70417: NOT
70418: OR
70419: IFFALSE 70423
// exit ;
70421: GO 70519
// if GetTaskList ( unit ) then
70423: LD_VAR 0 1
70427: PPUSH
70428: CALL_OW 437
70432: IFFALSE 70519
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70434: LD_STRING e
70436: PUSH
70437: LD_VAR 0 1
70441: PPUSH
70442: CALL_OW 437
70446: PUSH
70447: LD_INT 1
70449: ARRAY
70450: PUSH
70451: LD_INT 1
70453: ARRAY
70454: EQUAL
70455: IFFALSE 70482
70457: PUSH
70458: LD_VAR 0 4
70462: PUSH
70463: LD_VAR 0 1
70467: PPUSH
70468: CALL_OW 437
70472: PUSH
70473: LD_INT 1
70475: ARRAY
70476: PUSH
70477: LD_INT 2
70479: ARRAY
70480: EQUAL
70481: AND
70482: IFFALSE 70509
70484: PUSH
70485: LD_VAR 0 5
70489: PUSH
70490: LD_VAR 0 1
70494: PPUSH
70495: CALL_OW 437
70499: PUSH
70500: LD_INT 1
70502: ARRAY
70503: PUSH
70504: LD_INT 3
70506: ARRAY
70507: EQUAL
70508: AND
70509: IFFALSE 70519
// result := true end ;
70511: LD_ADDR_VAR 0 3
70515: PUSH
70516: LD_INT 1
70518: ST_TO_ADDR
// end ;
70519: LD_VAR 0 3
70523: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70524: LD_INT 0
70526: PPUSH
// result := false ;
70527: LD_ADDR_VAR 0 4
70531: PUSH
70532: LD_INT 0
70534: ST_TO_ADDR
// if GetTaskList ( unit ) then
70535: LD_VAR 0 1
70539: PPUSH
70540: CALL_OW 437
70544: IFFALSE 70631
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70546: LD_STRING M
70548: PUSH
70549: LD_VAR 0 1
70553: PPUSH
70554: CALL_OW 437
70558: PUSH
70559: LD_INT 1
70561: ARRAY
70562: PUSH
70563: LD_INT 1
70565: ARRAY
70566: EQUAL
70567: IFFALSE 70594
70569: PUSH
70570: LD_VAR 0 2
70574: PUSH
70575: LD_VAR 0 1
70579: PPUSH
70580: CALL_OW 437
70584: PUSH
70585: LD_INT 1
70587: ARRAY
70588: PUSH
70589: LD_INT 2
70591: ARRAY
70592: EQUAL
70593: AND
70594: IFFALSE 70621
70596: PUSH
70597: LD_VAR 0 3
70601: PUSH
70602: LD_VAR 0 1
70606: PPUSH
70607: CALL_OW 437
70611: PUSH
70612: LD_INT 1
70614: ARRAY
70615: PUSH
70616: LD_INT 3
70618: ARRAY
70619: EQUAL
70620: AND
70621: IFFALSE 70631
// result := true ;
70623: LD_ADDR_VAR 0 4
70627: PUSH
70628: LD_INT 1
70630: ST_TO_ADDR
// end ; end ;
70631: LD_VAR 0 4
70635: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70636: LD_INT 0
70638: PPUSH
70639: PPUSH
70640: PPUSH
70641: PPUSH
// if not unit or not area then
70642: LD_VAR 0 1
70646: NOT
70647: IFTRUE 70656
70649: PUSH
70650: LD_VAR 0 2
70654: NOT
70655: OR
70656: IFFALSE 70660
// exit ;
70658: GO 70836
// tmp := AreaToList ( area , i ) ;
70660: LD_ADDR_VAR 0 6
70664: PUSH
70665: LD_VAR 0 2
70669: PPUSH
70670: LD_VAR 0 5
70674: PPUSH
70675: CALL_OW 517
70679: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70680: LD_ADDR_VAR 0 5
70684: PUSH
70685: DOUBLE
70686: LD_INT 1
70688: DEC
70689: ST_TO_ADDR
70690: LD_VAR 0 6
70694: PUSH
70695: LD_INT 1
70697: ARRAY
70698: PUSH
70699: FOR_TO
70700: IFFALSE 70834
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70702: LD_ADDR_VAR 0 7
70706: PUSH
70707: LD_VAR 0 6
70711: PUSH
70712: LD_INT 1
70714: ARRAY
70715: PUSH
70716: LD_VAR 0 5
70720: ARRAY
70721: PUSH
70722: LD_VAR 0 6
70726: PUSH
70727: LD_INT 2
70729: ARRAY
70730: PUSH
70731: LD_VAR 0 5
70735: ARRAY
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70741: LD_INT 92
70743: PUSH
70744: LD_VAR 0 7
70748: PUSH
70749: LD_INT 1
70751: ARRAY
70752: PUSH
70753: LD_VAR 0 7
70757: PUSH
70758: LD_INT 2
70760: ARRAY
70761: PUSH
70762: LD_INT 2
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: PPUSH
70771: CALL_OW 69
70775: PUSH
70776: LD_INT 0
70778: EQUAL
70779: IFFALSE 70832
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70781: LD_VAR 0 1
70785: PPUSH
70786: LD_VAR 0 7
70790: PUSH
70791: LD_INT 1
70793: ARRAY
70794: PPUSH
70795: LD_VAR 0 7
70799: PUSH
70800: LD_INT 2
70802: ARRAY
70803: PPUSH
70804: LD_VAR 0 3
70808: PPUSH
70809: CALL_OW 48
// result := IsPlaced ( unit ) ;
70813: LD_ADDR_VAR 0 4
70817: PUSH
70818: LD_VAR 0 1
70822: PPUSH
70823: CALL_OW 305
70827: ST_TO_ADDR
// exit ;
70828: POP
70829: POP
70830: GO 70836
// end ; end ;
70832: GO 70699
70834: POP
70835: POP
// end ;
70836: LD_VAR 0 4
70840: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70841: LD_INT 0
70843: PPUSH
70844: PPUSH
70845: PPUSH
// if not side or side > 8 then
70846: LD_VAR 0 1
70850: NOT
70851: IFTRUE 70863
70853: PUSH
70854: LD_VAR 0 1
70858: PUSH
70859: LD_INT 8
70861: GREATER
70862: OR
70863: IFFALSE 70867
// exit ;
70865: GO 71054
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70867: LD_ADDR_VAR 0 4
70871: PUSH
70872: LD_INT 22
70874: PUSH
70875: LD_VAR 0 1
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 21
70886: PUSH
70887: LD_INT 3
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PPUSH
70898: CALL_OW 69
70902: ST_TO_ADDR
// if not tmp then
70903: LD_VAR 0 4
70907: NOT
70908: IFFALSE 70912
// exit ;
70910: GO 71054
// enable_addtolog := true ;
70912: LD_ADDR_OWVAR 81
70916: PUSH
70917: LD_INT 1
70919: ST_TO_ADDR
// AddToLog ( [ ) ;
70920: LD_STRING [
70922: PPUSH
70923: CALL_OW 561
// for i in tmp do
70927: LD_ADDR_VAR 0 3
70931: PUSH
70932: LD_VAR 0 4
70936: PUSH
70937: FOR_IN
70938: IFFALSE 71045
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70940: LD_STRING [
70942: PUSH
70943: LD_VAR 0 3
70947: PPUSH
70948: CALL_OW 266
70952: STR
70953: PUSH
70954: LD_STRING , 
70956: STR
70957: PUSH
70958: LD_VAR 0 3
70962: PPUSH
70963: CALL_OW 250
70967: STR
70968: PUSH
70969: LD_STRING , 
70971: STR
70972: PUSH
70973: LD_VAR 0 3
70977: PPUSH
70978: CALL_OW 251
70982: STR
70983: PUSH
70984: LD_STRING , 
70986: STR
70987: PUSH
70988: LD_VAR 0 3
70992: PPUSH
70993: CALL_OW 254
70997: STR
70998: PUSH
70999: LD_STRING , 
71001: STR
71002: PUSH
71003: LD_VAR 0 3
71007: PPUSH
71008: LD_INT 1
71010: PPUSH
71011: CALL_OW 268
71015: STR
71016: PUSH
71017: LD_STRING , 
71019: STR
71020: PUSH
71021: LD_VAR 0 3
71025: PPUSH
71026: LD_INT 2
71028: PPUSH
71029: CALL_OW 268
71033: STR
71034: PUSH
71035: LD_STRING ],
71037: STR
71038: PPUSH
71039: CALL_OW 561
// end ;
71043: GO 70937
71045: POP
71046: POP
// AddToLog ( ]; ) ;
71047: LD_STRING ];
71049: PPUSH
71050: CALL_OW 561
// end ;
71054: LD_VAR 0 2
71058: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71059: LD_INT 0
71061: PPUSH
71062: PPUSH
71063: PPUSH
71064: PPUSH
71065: PPUSH
// if not area or not rate or not max then
71066: LD_VAR 0 1
71070: NOT
71071: IFTRUE 71080
71073: PUSH
71074: LD_VAR 0 2
71078: NOT
71079: OR
71080: IFTRUE 71089
71082: PUSH
71083: LD_VAR 0 4
71087: NOT
71088: OR
71089: IFFALSE 71093
// exit ;
71091: GO 71282
// while 1 do
71093: LD_INT 1
71095: IFFALSE 71282
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71097: LD_ADDR_VAR 0 9
71101: PUSH
71102: LD_VAR 0 1
71106: PPUSH
71107: LD_INT 1
71109: PPUSH
71110: CALL_OW 287
71114: PUSH
71115: LD_INT 10
71117: MUL
71118: ST_TO_ADDR
// r := rate / 10 ;
71119: LD_ADDR_VAR 0 7
71123: PUSH
71124: LD_VAR 0 2
71128: PUSH
71129: LD_INT 10
71131: DIVREAL
71132: ST_TO_ADDR
// time := 1 1$00 ;
71133: LD_ADDR_VAR 0 8
71137: PUSH
71138: LD_INT 2100
71140: ST_TO_ADDR
// if amount < min then
71141: LD_VAR 0 9
71145: PUSH
71146: LD_VAR 0 3
71150: LESS
71151: IFFALSE 71169
// r := r * 2 else
71153: LD_ADDR_VAR 0 7
71157: PUSH
71158: LD_VAR 0 7
71162: PUSH
71163: LD_INT 2
71165: MUL
71166: ST_TO_ADDR
71167: GO 71195
// if amount > max then
71169: LD_VAR 0 9
71173: PUSH
71174: LD_VAR 0 4
71178: GREATER
71179: IFFALSE 71195
// r := r / 2 ;
71181: LD_ADDR_VAR 0 7
71185: PUSH
71186: LD_VAR 0 7
71190: PUSH
71191: LD_INT 2
71193: DIVREAL
71194: ST_TO_ADDR
// time := time / r ;
71195: LD_ADDR_VAR 0 8
71199: PUSH
71200: LD_VAR 0 8
71204: PUSH
71205: LD_VAR 0 7
71209: DIVREAL
71210: ST_TO_ADDR
// if time < 0 then
71211: LD_VAR 0 8
71215: PUSH
71216: LD_INT 0
71218: LESS
71219: IFFALSE 71236
// time := time * - 1 ;
71221: LD_ADDR_VAR 0 8
71225: PUSH
71226: LD_VAR 0 8
71230: PUSH
71231: LD_INT 1
71233: NEG
71234: MUL
71235: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71236: LD_VAR 0 8
71240: PUSH
71241: LD_INT 35
71243: PPUSH
71244: LD_INT 875
71246: PPUSH
71247: CALL_OW 12
71251: PLUS
71252: PPUSH
71253: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71257: LD_INT 1
71259: PPUSH
71260: LD_INT 5
71262: PPUSH
71263: CALL_OW 12
71267: PPUSH
71268: LD_VAR 0 1
71272: PPUSH
71273: LD_INT 1
71275: PPUSH
71276: CALL_OW 55
// end ;
71280: GO 71093
// end ;
71282: LD_VAR 0 5
71286: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71287: LD_INT 0
71289: PPUSH
71290: PPUSH
71291: PPUSH
71292: PPUSH
71293: PPUSH
71294: PPUSH
71295: PPUSH
71296: PPUSH
// if not turrets or not factories then
71297: LD_VAR 0 1
71301: NOT
71302: IFTRUE 71311
71304: PUSH
71305: LD_VAR 0 2
71309: NOT
71310: OR
71311: IFFALSE 71315
// exit ;
71313: GO 71622
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71315: LD_ADDR_VAR 0 10
71319: PUSH
71320: LD_INT 5
71322: PUSH
71323: LD_INT 6
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 2
71332: PUSH
71333: LD_INT 4
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 3
71342: PUSH
71343: LD_INT 5
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 24
71357: PUSH
71358: LD_INT 25
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 23
71367: PUSH
71368: LD_INT 27
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 42
71381: PUSH
71382: LD_INT 43
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 44
71391: PUSH
71392: LD_INT 46
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 45
71401: PUSH
71402: LD_INT 47
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: LIST
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: LIST
71418: ST_TO_ADDR
// result := [ ] ;
71419: LD_ADDR_VAR 0 3
71423: PUSH
71424: EMPTY
71425: ST_TO_ADDR
// for i in turrets do
71426: LD_ADDR_VAR 0 4
71430: PUSH
71431: LD_VAR 0 1
71435: PUSH
71436: FOR_IN
71437: IFFALSE 71620
// begin nat := GetNation ( i ) ;
71439: LD_ADDR_VAR 0 7
71443: PUSH
71444: LD_VAR 0 4
71448: PPUSH
71449: CALL_OW 248
71453: ST_TO_ADDR
// weapon := 0 ;
71454: LD_ADDR_VAR 0 8
71458: PUSH
71459: LD_INT 0
71461: ST_TO_ADDR
// if not nat then
71462: LD_VAR 0 7
71466: NOT
71467: IFFALSE 71471
// continue ;
71469: GO 71436
// for j in list [ nat ] do
71471: LD_ADDR_VAR 0 5
71475: PUSH
71476: LD_VAR 0 10
71480: PUSH
71481: LD_VAR 0 7
71485: ARRAY
71486: PUSH
71487: FOR_IN
71488: IFFALSE 71529
// if GetBWeapon ( i ) = j [ 1 ] then
71490: LD_VAR 0 4
71494: PPUSH
71495: CALL_OW 269
71499: PUSH
71500: LD_VAR 0 5
71504: PUSH
71505: LD_INT 1
71507: ARRAY
71508: EQUAL
71509: IFFALSE 71527
// begin weapon := j [ 2 ] ;
71511: LD_ADDR_VAR 0 8
71515: PUSH
71516: LD_VAR 0 5
71520: PUSH
71521: LD_INT 2
71523: ARRAY
71524: ST_TO_ADDR
// break ;
71525: GO 71529
// end ;
71527: GO 71487
71529: POP
71530: POP
// if not weapon then
71531: LD_VAR 0 8
71535: NOT
71536: IFFALSE 71540
// continue ;
71538: GO 71436
// for k in factories do
71540: LD_ADDR_VAR 0 6
71544: PUSH
71545: LD_VAR 0 2
71549: PUSH
71550: FOR_IN
71551: IFFALSE 71616
// begin weapons := AvailableWeaponList ( k ) ;
71553: LD_ADDR_VAR 0 9
71557: PUSH
71558: LD_VAR 0 6
71562: PPUSH
71563: CALL_OW 478
71567: ST_TO_ADDR
// if not weapons then
71568: LD_VAR 0 9
71572: NOT
71573: IFFALSE 71577
// continue ;
71575: GO 71550
// if weapon in weapons then
71577: LD_VAR 0 8
71581: PUSH
71582: LD_VAR 0 9
71586: IN
71587: IFFALSE 71614
// begin result := [ i , weapon ] ;
71589: LD_ADDR_VAR 0 3
71593: PUSH
71594: LD_VAR 0 4
71598: PUSH
71599: LD_VAR 0 8
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: ST_TO_ADDR
// exit ;
71608: POP
71609: POP
71610: POP
71611: POP
71612: GO 71622
// end ; end ;
71614: GO 71550
71616: POP
71617: POP
// end ;
71618: GO 71436
71620: POP
71621: POP
// end ;
71622: LD_VAR 0 3
71626: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71627: LD_INT 0
71629: PPUSH
// if not side or side > 8 then
71630: LD_VAR 0 3
71634: NOT
71635: IFTRUE 71647
71637: PUSH
71638: LD_VAR 0 3
71642: PUSH
71643: LD_INT 8
71645: GREATER
71646: OR
71647: IFFALSE 71651
// exit ;
71649: GO 71710
// if not range then
71651: LD_VAR 0 4
71655: NOT
71656: IFFALSE 71667
// range := - 12 ;
71658: LD_ADDR_VAR 0 4
71662: PUSH
71663: LD_INT 12
71665: NEG
71666: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71667: LD_VAR 0 1
71671: PPUSH
71672: LD_VAR 0 2
71676: PPUSH
71677: LD_VAR 0 3
71681: PPUSH
71682: LD_VAR 0 4
71686: PPUSH
71687: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71691: LD_VAR 0 1
71695: PPUSH
71696: LD_VAR 0 2
71700: PPUSH
71701: LD_VAR 0 3
71705: PPUSH
71706: CALL_OW 331
// end ;
71710: LD_VAR 0 5
71714: RET
// export function Video ( mode ) ; begin
71715: LD_INT 0
71717: PPUSH
// ingame_video = mode ;
71718: LD_ADDR_OWVAR 52
71722: PUSH
71723: LD_VAR 0 1
71727: ST_TO_ADDR
// interface_hidden = mode ;
71728: LD_ADDR_OWVAR 54
71732: PUSH
71733: LD_VAR 0 1
71737: ST_TO_ADDR
// end ;
71738: LD_VAR 0 2
71742: RET
// export function Join ( array , element ) ; begin
71743: LD_INT 0
71745: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71746: LD_ADDR_VAR 0 3
71750: PUSH
71751: LD_VAR 0 1
71755: PPUSH
71756: LD_VAR 0 1
71760: PUSH
71761: LD_INT 1
71763: PLUS
71764: PPUSH
71765: LD_VAR 0 2
71769: PPUSH
71770: CALL_OW 1
71774: ST_TO_ADDR
// end ;
71775: LD_VAR 0 3
71779: RET
// export function JoinUnion ( array , element ) ; begin
71780: LD_INT 0
71782: PPUSH
// result := array union element ;
71783: LD_ADDR_VAR 0 3
71787: PUSH
71788: LD_VAR 0 1
71792: PUSH
71793: LD_VAR 0 2
71797: UNION
71798: ST_TO_ADDR
// end ;
71799: LD_VAR 0 3
71803: RET
// export function GetBehemoths ( side ) ; begin
71804: LD_INT 0
71806: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71807: LD_ADDR_VAR 0 2
71811: PUSH
71812: LD_INT 22
71814: PUSH
71815: LD_VAR 0 1
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 31
71826: PUSH
71827: LD_INT 25
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PPUSH
71838: CALL_OW 69
71842: ST_TO_ADDR
// end ;
71843: LD_VAR 0 2
71847: RET
// export function Shuffle ( array ) ; var i , index ; begin
71848: LD_INT 0
71850: PPUSH
71851: PPUSH
71852: PPUSH
// result := [ ] ;
71853: LD_ADDR_VAR 0 2
71857: PUSH
71858: EMPTY
71859: ST_TO_ADDR
// if not array then
71860: LD_VAR 0 1
71864: NOT
71865: IFFALSE 71869
// exit ;
71867: GO 71968
// Randomize ;
71869: CALL_OW 10
// for i = array downto 1 do
71873: LD_ADDR_VAR 0 3
71877: PUSH
71878: DOUBLE
71879: LD_VAR 0 1
71883: INC
71884: ST_TO_ADDR
71885: LD_INT 1
71887: PUSH
71888: FOR_DOWNTO
71889: IFFALSE 71966
// begin index := rand ( 1 , array ) ;
71891: LD_ADDR_VAR 0 4
71895: PUSH
71896: LD_INT 1
71898: PPUSH
71899: LD_VAR 0 1
71903: PPUSH
71904: CALL_OW 12
71908: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71909: LD_ADDR_VAR 0 2
71913: PUSH
71914: LD_VAR 0 2
71918: PPUSH
71919: LD_VAR 0 2
71923: PUSH
71924: LD_INT 1
71926: PLUS
71927: PPUSH
71928: LD_VAR 0 1
71932: PUSH
71933: LD_VAR 0 4
71937: ARRAY
71938: PPUSH
71939: CALL_OW 2
71943: ST_TO_ADDR
// array := Delete ( array , index ) ;
71944: LD_ADDR_VAR 0 1
71948: PUSH
71949: LD_VAR 0 1
71953: PPUSH
71954: LD_VAR 0 4
71958: PPUSH
71959: CALL_OW 3
71963: ST_TO_ADDR
// end ;
71964: GO 71888
71966: POP
71967: POP
// end ;
71968: LD_VAR 0 2
71972: RET
// export function GetBaseMaterials ( base ) ; begin
71973: LD_INT 0
71975: PPUSH
// result := [ 0 , 0 , 0 ] ;
71976: LD_ADDR_VAR 0 2
71980: PUSH
71981: LD_INT 0
71983: PUSH
71984: LD_INT 0
71986: PUSH
71987: LD_INT 0
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: LIST
71994: ST_TO_ADDR
// if not base then
71995: LD_VAR 0 1
71999: NOT
72000: IFFALSE 72004
// exit ;
72002: GO 72053
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72004: LD_ADDR_VAR 0 2
72008: PUSH
72009: LD_VAR 0 1
72013: PPUSH
72014: LD_INT 1
72016: PPUSH
72017: CALL_OW 275
72021: PUSH
72022: LD_VAR 0 1
72026: PPUSH
72027: LD_INT 2
72029: PPUSH
72030: CALL_OW 275
72034: PUSH
72035: LD_VAR 0 1
72039: PPUSH
72040: LD_INT 3
72042: PPUSH
72043: CALL_OW 275
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: LIST
72052: ST_TO_ADDR
// end ;
72053: LD_VAR 0 2
72057: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72058: LD_INT 0
72060: PPUSH
72061: PPUSH
// result := array ;
72062: LD_ADDR_VAR 0 3
72066: PUSH
72067: LD_VAR 0 1
72071: ST_TO_ADDR
// if size >= result then
72072: LD_VAR 0 2
72076: PUSH
72077: LD_VAR 0 3
72081: GREATEREQUAL
72082: IFFALSE 72086
// exit ;
72084: GO 72136
// if size then
72086: LD_VAR 0 2
72090: IFFALSE 72136
// for i := array downto size do
72092: LD_ADDR_VAR 0 4
72096: PUSH
72097: DOUBLE
72098: LD_VAR 0 1
72102: INC
72103: ST_TO_ADDR
72104: LD_VAR 0 2
72108: PUSH
72109: FOR_DOWNTO
72110: IFFALSE 72134
// result := Delete ( result , result ) ;
72112: LD_ADDR_VAR 0 3
72116: PUSH
72117: LD_VAR 0 3
72121: PPUSH
72122: LD_VAR 0 3
72126: PPUSH
72127: CALL_OW 3
72131: ST_TO_ADDR
72132: GO 72109
72134: POP
72135: POP
// end ;
72136: LD_VAR 0 3
72140: RET
// export function ComExit ( unit ) ; var tmp ; begin
72141: LD_INT 0
72143: PPUSH
72144: PPUSH
// if not IsInUnit ( unit ) then
72145: LD_VAR 0 1
72149: PPUSH
72150: CALL_OW 310
72154: NOT
72155: IFFALSE 72159
// exit ;
72157: GO 72219
// tmp := IsInUnit ( unit ) ;
72159: LD_ADDR_VAR 0 3
72163: PUSH
72164: LD_VAR 0 1
72168: PPUSH
72169: CALL_OW 310
72173: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72174: LD_VAR 0 3
72178: PPUSH
72179: CALL_OW 247
72183: PUSH
72184: LD_INT 2
72186: EQUAL
72187: IFFALSE 72200
// ComExitVehicle ( unit ) else
72189: LD_VAR 0 1
72193: PPUSH
72194: CALL_OW 121
72198: GO 72209
// ComExitBuilding ( unit ) ;
72200: LD_VAR 0 1
72204: PPUSH
72205: CALL_OW 122
// result := tmp ;
72209: LD_ADDR_VAR 0 2
72213: PUSH
72214: LD_VAR 0 3
72218: ST_TO_ADDR
// end ;
72219: LD_VAR 0 2
72223: RET
// export function ComExitAll ( units ) ; var i ; begin
72224: LD_INT 0
72226: PPUSH
72227: PPUSH
// if not units then
72228: LD_VAR 0 1
72232: NOT
72233: IFFALSE 72237
// exit ;
72235: GO 72263
// for i in units do
72237: LD_ADDR_VAR 0 3
72241: PUSH
72242: LD_VAR 0 1
72246: PUSH
72247: FOR_IN
72248: IFFALSE 72261
// ComExit ( i ) ;
72250: LD_VAR 0 3
72254: PPUSH
72255: CALL 72141 0 1
72259: GO 72247
72261: POP
72262: POP
// end ;
72263: LD_VAR 0 2
72267: RET
// export function ResetHc ; begin
72268: LD_INT 0
72270: PPUSH
// InitHc ;
72271: CALL_OW 19
// hc_importance := 0 ;
72275: LD_ADDR_OWVAR 32
72279: PUSH
72280: LD_INT 0
72282: ST_TO_ADDR
// end ;
72283: LD_VAR 0 1
72287: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72288: LD_INT 0
72290: PPUSH
72291: PPUSH
72292: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72293: LD_ADDR_VAR 0 6
72297: PUSH
72298: LD_VAR 0 1
72302: PUSH
72303: LD_VAR 0 3
72307: PLUS
72308: PUSH
72309: LD_INT 2
72311: DIV
72312: ST_TO_ADDR
// if _x < 0 then
72313: LD_VAR 0 6
72317: PUSH
72318: LD_INT 0
72320: LESS
72321: IFFALSE 72338
// _x := _x * - 1 ;
72323: LD_ADDR_VAR 0 6
72327: PUSH
72328: LD_VAR 0 6
72332: PUSH
72333: LD_INT 1
72335: NEG
72336: MUL
72337: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72338: LD_ADDR_VAR 0 7
72342: PUSH
72343: LD_VAR 0 2
72347: PUSH
72348: LD_VAR 0 4
72352: PLUS
72353: PUSH
72354: LD_INT 2
72356: DIV
72357: ST_TO_ADDR
// if _y < 0 then
72358: LD_VAR 0 7
72362: PUSH
72363: LD_INT 0
72365: LESS
72366: IFFALSE 72383
// _y := _y * - 1 ;
72368: LD_ADDR_VAR 0 7
72372: PUSH
72373: LD_VAR 0 7
72377: PUSH
72378: LD_INT 1
72380: NEG
72381: MUL
72382: ST_TO_ADDR
// result := [ _x , _y ] ;
72383: LD_ADDR_VAR 0 5
72387: PUSH
72388: LD_VAR 0 6
72392: PUSH
72393: LD_VAR 0 7
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: ST_TO_ADDR
// end ;
72402: LD_VAR 0 5
72406: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72407: LD_INT 0
72409: PPUSH
72410: PPUSH
72411: PPUSH
72412: PPUSH
// task := GetTaskList ( unit ) ;
72413: LD_ADDR_VAR 0 7
72417: PUSH
72418: LD_VAR 0 1
72422: PPUSH
72423: CALL_OW 437
72427: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72428: LD_VAR 0 7
72432: NOT
72433: IFFALSE 72452
72435: PUSH
72436: LD_VAR 0 1
72440: PPUSH
72441: LD_VAR 0 2
72445: PPUSH
72446: CALL_OW 308
72450: NOT
72451: AND
72452: IFFALSE 72456
// exit ;
72454: GO 72574
// if IsInArea ( unit , area ) then
72456: LD_VAR 0 1
72460: PPUSH
72461: LD_VAR 0 2
72465: PPUSH
72466: CALL_OW 308
72470: IFFALSE 72488
// begin ComMoveToArea ( unit , goAway ) ;
72472: LD_VAR 0 1
72476: PPUSH
72477: LD_VAR 0 3
72481: PPUSH
72482: CALL_OW 113
// exit ;
72486: GO 72574
// end ; if task [ 1 ] [ 1 ] <> M then
72488: LD_VAR 0 7
72492: PUSH
72493: LD_INT 1
72495: ARRAY
72496: PUSH
72497: LD_INT 1
72499: ARRAY
72500: PUSH
72501: LD_STRING M
72503: NONEQUAL
72504: IFFALSE 72508
// exit ;
72506: GO 72574
// x := task [ 1 ] [ 2 ] ;
72508: LD_ADDR_VAR 0 5
72512: PUSH
72513: LD_VAR 0 7
72517: PUSH
72518: LD_INT 1
72520: ARRAY
72521: PUSH
72522: LD_INT 2
72524: ARRAY
72525: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72526: LD_ADDR_VAR 0 6
72530: PUSH
72531: LD_VAR 0 7
72535: PUSH
72536: LD_INT 1
72538: ARRAY
72539: PUSH
72540: LD_INT 3
72542: ARRAY
72543: ST_TO_ADDR
// if InArea ( x , y , area ) then
72544: LD_VAR 0 5
72548: PPUSH
72549: LD_VAR 0 6
72553: PPUSH
72554: LD_VAR 0 2
72558: PPUSH
72559: CALL_OW 309
72563: IFFALSE 72574
// ComStop ( unit ) ;
72565: LD_VAR 0 1
72569: PPUSH
72570: CALL_OW 141
// end ;
72574: LD_VAR 0 4
72578: RET
// export function Abs ( value ) ; begin
72579: LD_INT 0
72581: PPUSH
// result := value ;
72582: LD_ADDR_VAR 0 2
72586: PUSH
72587: LD_VAR 0 1
72591: ST_TO_ADDR
// if value < 0 then
72592: LD_VAR 0 1
72596: PUSH
72597: LD_INT 0
72599: LESS
72600: IFFALSE 72617
// result := value * - 1 ;
72602: LD_ADDR_VAR 0 2
72606: PUSH
72607: LD_VAR 0 1
72611: PUSH
72612: LD_INT 1
72614: NEG
72615: MUL
72616: ST_TO_ADDR
// end ;
72617: LD_VAR 0 2
72621: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72622: LD_INT 0
72624: PPUSH
72625: PPUSH
72626: PPUSH
72627: PPUSH
72628: PPUSH
72629: PPUSH
72630: PPUSH
72631: PPUSH
// if not unit or not building then
72632: LD_VAR 0 1
72636: NOT
72637: IFTRUE 72646
72639: PUSH
72640: LD_VAR 0 2
72644: NOT
72645: OR
72646: IFFALSE 72650
// exit ;
72648: GO 72878
// x := GetX ( building ) ;
72650: LD_ADDR_VAR 0 4
72654: PUSH
72655: LD_VAR 0 2
72659: PPUSH
72660: CALL_OW 250
72664: ST_TO_ADDR
// y := GetY ( building ) ;
72665: LD_ADDR_VAR 0 6
72669: PUSH
72670: LD_VAR 0 2
72674: PPUSH
72675: CALL_OW 251
72679: ST_TO_ADDR
// d := GetDir ( building ) ;
72680: LD_ADDR_VAR 0 8
72684: PUSH
72685: LD_VAR 0 2
72689: PPUSH
72690: CALL_OW 254
72694: ST_TO_ADDR
// r := 4 ;
72695: LD_ADDR_VAR 0 9
72699: PUSH
72700: LD_INT 4
72702: ST_TO_ADDR
// for i := 1 to 5 do
72703: LD_ADDR_VAR 0 10
72707: PUSH
72708: DOUBLE
72709: LD_INT 1
72711: DEC
72712: ST_TO_ADDR
72713: LD_INT 5
72715: PUSH
72716: FOR_TO
72717: IFFALSE 72876
// begin _x := ShiftX ( x , d , r + i ) ;
72719: LD_ADDR_VAR 0 5
72723: PUSH
72724: LD_VAR 0 4
72728: PPUSH
72729: LD_VAR 0 8
72733: PPUSH
72734: LD_VAR 0 9
72738: PUSH
72739: LD_VAR 0 10
72743: PLUS
72744: PPUSH
72745: CALL_OW 272
72749: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72750: LD_ADDR_VAR 0 7
72754: PUSH
72755: LD_VAR 0 6
72759: PPUSH
72760: LD_VAR 0 8
72764: PPUSH
72765: LD_VAR 0 9
72769: PUSH
72770: LD_VAR 0 10
72774: PLUS
72775: PPUSH
72776: CALL_OW 273
72780: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72781: LD_VAR 0 5
72785: PPUSH
72786: LD_VAR 0 7
72790: PPUSH
72791: CALL_OW 488
72795: IFFALSE 72830
72797: PUSH
72798: LD_VAR 0 5
72802: PPUSH
72803: LD_VAR 0 7
72807: PPUSH
72808: CALL_OW 428
72812: PPUSH
72813: CALL_OW 247
72817: PUSH
72818: LD_INT 3
72820: PUSH
72821: LD_INT 2
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: IN
72828: NOT
72829: AND
72830: IFFALSE 72874
// begin ComMoveXY ( unit , _x , _y ) ;
72832: LD_VAR 0 1
72836: PPUSH
72837: LD_VAR 0 5
72841: PPUSH
72842: LD_VAR 0 7
72846: PPUSH
72847: CALL_OW 111
// result := [ _x , _y ] ;
72851: LD_ADDR_VAR 0 3
72855: PUSH
72856: LD_VAR 0 5
72860: PUSH
72861: LD_VAR 0 7
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: ST_TO_ADDR
// exit ;
72870: POP
72871: POP
72872: GO 72878
// end ; end ;
72874: GO 72716
72876: POP
72877: POP
// end ;
72878: LD_VAR 0 3
72882: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72883: LD_INT 0
72885: PPUSH
72886: PPUSH
72887: PPUSH
// result := 0 ;
72888: LD_ADDR_VAR 0 3
72892: PUSH
72893: LD_INT 0
72895: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72896: LD_VAR 0 1
72900: PUSH
72901: LD_INT 0
72903: LESS
72904: IFTRUE 72916
72906: PUSH
72907: LD_VAR 0 1
72911: PUSH
72912: LD_INT 8
72914: GREATER
72915: OR
72916: IFTRUE 72928
72918: PUSH
72919: LD_VAR 0 2
72923: PUSH
72924: LD_INT 0
72926: LESS
72927: OR
72928: IFTRUE 72940
72930: PUSH
72931: LD_VAR 0 2
72935: PUSH
72936: LD_INT 8
72938: GREATER
72939: OR
72940: IFFALSE 72944
// exit ;
72942: GO 73019
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72944: LD_ADDR_VAR 0 4
72948: PUSH
72949: LD_INT 22
72951: PUSH
72952: LD_VAR 0 2
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PPUSH
72961: CALL_OW 69
72965: PUSH
72966: FOR_IN
72967: IFFALSE 73017
// begin un := UnitShoot ( i ) ;
72969: LD_ADDR_VAR 0 5
72973: PUSH
72974: LD_VAR 0 4
72978: PPUSH
72979: CALL_OW 504
72983: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72984: LD_VAR 0 5
72988: PPUSH
72989: CALL_OW 255
72993: PUSH
72994: LD_VAR 0 1
72998: EQUAL
72999: IFFALSE 73015
// begin result := un ;
73001: LD_ADDR_VAR 0 3
73005: PUSH
73006: LD_VAR 0 5
73010: ST_TO_ADDR
// exit ;
73011: POP
73012: POP
73013: GO 73019
// end ; end ;
73015: GO 72966
73017: POP
73018: POP
// end ;
73019: LD_VAR 0 3
73023: RET
// export function GetCargoBay ( units ) ; begin
73024: LD_INT 0
73026: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73027: LD_ADDR_VAR 0 2
73031: PUSH
73032: LD_VAR 0 1
73036: PPUSH
73037: LD_INT 2
73039: PUSH
73040: LD_INT 34
73042: PUSH
73043: LD_INT 12
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 34
73052: PUSH
73053: LD_INT 51
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 34
73062: PUSH
73063: LD_INT 32
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 34
73072: PUSH
73073: LD_INT 89
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: PPUSH
73087: CALL_OW 72
73091: ST_TO_ADDR
// end ;
73092: LD_VAR 0 2
73096: RET
// export function Negate ( value ) ; begin
73097: LD_INT 0
73099: PPUSH
// result := not value ;
73100: LD_ADDR_VAR 0 2
73104: PUSH
73105: LD_VAR 0 1
73109: NOT
73110: ST_TO_ADDR
// end ;
73111: LD_VAR 0 2
73115: RET
// export function Inc ( value ) ; begin
73116: LD_INT 0
73118: PPUSH
// result := value + 1 ;
73119: LD_ADDR_VAR 0 2
73123: PUSH
73124: LD_VAR 0 1
73128: PUSH
73129: LD_INT 1
73131: PLUS
73132: ST_TO_ADDR
// end ;
73133: LD_VAR 0 2
73137: RET
// export function Dec ( value ) ; begin
73138: LD_INT 0
73140: PPUSH
// result := value - 1 ;
73141: LD_ADDR_VAR 0 2
73145: PUSH
73146: LD_VAR 0 1
73150: PUSH
73151: LD_INT 1
73153: MINUS
73154: ST_TO_ADDR
// end ;
73155: LD_VAR 0 2
73159: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73160: LD_INT 0
73162: PPUSH
73163: PPUSH
73164: PPUSH
73165: PPUSH
73166: PPUSH
73167: PPUSH
73168: PPUSH
73169: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73170: LD_VAR 0 1
73174: PPUSH
73175: LD_VAR 0 2
73179: PPUSH
73180: CALL_OW 488
73184: NOT
73185: IFTRUE 73204
73187: PUSH
73188: LD_VAR 0 3
73192: PPUSH
73193: LD_VAR 0 4
73197: PPUSH
73198: CALL_OW 488
73202: NOT
73203: OR
73204: IFFALSE 73217
// begin result := - 1 ;
73206: LD_ADDR_VAR 0 5
73210: PUSH
73211: LD_INT 1
73213: NEG
73214: ST_TO_ADDR
// exit ;
73215: GO 73452
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73217: LD_ADDR_VAR 0 12
73221: PUSH
73222: LD_VAR 0 1
73226: PPUSH
73227: LD_VAR 0 2
73231: PPUSH
73232: LD_VAR 0 3
73236: PPUSH
73237: LD_VAR 0 4
73241: PPUSH
73242: CALL 72288 0 4
73246: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73247: LD_ADDR_VAR 0 11
73251: PUSH
73252: LD_VAR 0 1
73256: PPUSH
73257: LD_VAR 0 2
73261: PPUSH
73262: LD_VAR 0 12
73266: PUSH
73267: LD_INT 1
73269: ARRAY
73270: PPUSH
73271: LD_VAR 0 12
73275: PUSH
73276: LD_INT 2
73278: ARRAY
73279: PPUSH
73280: CALL_OW 298
73284: ST_TO_ADDR
// distance := 9999 ;
73285: LD_ADDR_VAR 0 10
73289: PUSH
73290: LD_INT 9999
73292: ST_TO_ADDR
// for i := 0 to 5 do
73293: LD_ADDR_VAR 0 6
73297: PUSH
73298: DOUBLE
73299: LD_INT 0
73301: DEC
73302: ST_TO_ADDR
73303: LD_INT 5
73305: PUSH
73306: FOR_TO
73307: IFFALSE 73450
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73309: LD_ADDR_VAR 0 7
73313: PUSH
73314: LD_VAR 0 1
73318: PPUSH
73319: LD_VAR 0 6
73323: PPUSH
73324: LD_VAR 0 11
73328: PPUSH
73329: CALL_OW 272
73333: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73334: LD_ADDR_VAR 0 8
73338: PUSH
73339: LD_VAR 0 2
73343: PPUSH
73344: LD_VAR 0 6
73348: PPUSH
73349: LD_VAR 0 11
73353: PPUSH
73354: CALL_OW 273
73358: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73359: LD_VAR 0 7
73363: PPUSH
73364: LD_VAR 0 8
73368: PPUSH
73369: CALL_OW 488
73373: NOT
73374: IFFALSE 73378
// continue ;
73376: GO 73306
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73378: LD_ADDR_VAR 0 9
73382: PUSH
73383: LD_VAR 0 12
73387: PUSH
73388: LD_INT 1
73390: ARRAY
73391: PPUSH
73392: LD_VAR 0 12
73396: PUSH
73397: LD_INT 2
73399: ARRAY
73400: PPUSH
73401: LD_VAR 0 7
73405: PPUSH
73406: LD_VAR 0 8
73410: PPUSH
73411: CALL_OW 298
73415: ST_TO_ADDR
// if tmp < distance then
73416: LD_VAR 0 9
73420: PUSH
73421: LD_VAR 0 10
73425: LESS
73426: IFFALSE 73448
// begin result := i ;
73428: LD_ADDR_VAR 0 5
73432: PUSH
73433: LD_VAR 0 6
73437: ST_TO_ADDR
// distance := tmp ;
73438: LD_ADDR_VAR 0 10
73442: PUSH
73443: LD_VAR 0 9
73447: ST_TO_ADDR
// end ; end ;
73448: GO 73306
73450: POP
73451: POP
// end ;
73452: LD_VAR 0 5
73456: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73457: LD_INT 0
73459: PPUSH
73460: PPUSH
// if not driver or not IsInUnit ( driver ) then
73461: LD_VAR 0 1
73465: NOT
73466: IFTRUE 73480
73468: PUSH
73469: LD_VAR 0 1
73473: PPUSH
73474: CALL_OW 310
73478: NOT
73479: OR
73480: IFFALSE 73484
// exit ;
73482: GO 73574
// vehicle := IsInUnit ( driver ) ;
73484: LD_ADDR_VAR 0 3
73488: PUSH
73489: LD_VAR 0 1
73493: PPUSH
73494: CALL_OW 310
73498: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73499: LD_VAR 0 1
73503: PPUSH
73504: LD_STRING \
73506: PUSH
73507: LD_INT 0
73509: PUSH
73510: LD_INT 0
73512: PUSH
73513: LD_INT 0
73515: PUSH
73516: LD_INT 0
73518: PUSH
73519: LD_INT 0
73521: PUSH
73522: LD_INT 0
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: PUSH
73534: LD_STRING E
73536: PUSH
73537: LD_INT 0
73539: PUSH
73540: LD_INT 0
73542: PUSH
73543: LD_VAR 0 3
73547: PUSH
73548: LD_INT 0
73550: PUSH
73551: LD_INT 0
73553: PUSH
73554: LD_INT 0
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: PPUSH
73570: CALL_OW 446
// end ;
73574: LD_VAR 0 2
73578: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73579: LD_INT 0
73581: PPUSH
73582: PPUSH
// if not driver or not IsInUnit ( driver ) then
73583: LD_VAR 0 1
73587: NOT
73588: IFTRUE 73602
73590: PUSH
73591: LD_VAR 0 1
73595: PPUSH
73596: CALL_OW 310
73600: NOT
73601: OR
73602: IFFALSE 73606
// exit ;
73604: GO 73696
// vehicle := IsInUnit ( driver ) ;
73606: LD_ADDR_VAR 0 3
73610: PUSH
73611: LD_VAR 0 1
73615: PPUSH
73616: CALL_OW 310
73620: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73621: LD_VAR 0 1
73625: PPUSH
73626: LD_STRING \
73628: PUSH
73629: LD_INT 0
73631: PUSH
73632: LD_INT 0
73634: PUSH
73635: LD_INT 0
73637: PUSH
73638: LD_INT 0
73640: PUSH
73641: LD_INT 0
73643: PUSH
73644: LD_INT 0
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: LIST
73654: LIST
73655: PUSH
73656: LD_STRING E
73658: PUSH
73659: LD_INT 0
73661: PUSH
73662: LD_INT 0
73664: PUSH
73665: LD_VAR 0 3
73669: PUSH
73670: LD_INT 0
73672: PUSH
73673: LD_INT 0
73675: PUSH
73676: LD_INT 0
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PPUSH
73692: CALL_OW 447
// end ;
73696: LD_VAR 0 2
73700: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73701: LD_INT 0
73703: PPUSH
73704: PPUSH
73705: PPUSH
// tmp := [ ] ;
73706: LD_ADDR_VAR 0 5
73710: PUSH
73711: EMPTY
73712: ST_TO_ADDR
// for i in units do
73713: LD_ADDR_VAR 0 4
73717: PUSH
73718: LD_VAR 0 1
73722: PUSH
73723: FOR_IN
73724: IFFALSE 73762
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73726: LD_ADDR_VAR 0 5
73730: PUSH
73731: LD_VAR 0 5
73735: PPUSH
73736: LD_VAR 0 5
73740: PUSH
73741: LD_INT 1
73743: PLUS
73744: PPUSH
73745: LD_VAR 0 4
73749: PPUSH
73750: CALL_OW 256
73754: PPUSH
73755: CALL_OW 2
73759: ST_TO_ADDR
73760: GO 73723
73762: POP
73763: POP
// if not tmp then
73764: LD_VAR 0 5
73768: NOT
73769: IFFALSE 73773
// exit ;
73771: GO 73821
// if asc then
73773: LD_VAR 0 2
73777: IFFALSE 73801
// result := SortListByListAsc ( units , tmp ) else
73779: LD_ADDR_VAR 0 3
73783: PUSH
73784: LD_VAR 0 1
73788: PPUSH
73789: LD_VAR 0 5
73793: PPUSH
73794: CALL_OW 76
73798: ST_TO_ADDR
73799: GO 73821
// result := SortListByListDesc ( units , tmp ) ;
73801: LD_ADDR_VAR 0 3
73805: PUSH
73806: LD_VAR 0 1
73810: PPUSH
73811: LD_VAR 0 5
73815: PPUSH
73816: CALL_OW 77
73820: ST_TO_ADDR
// end ;
73821: LD_VAR 0 3
73825: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73826: LD_INT 0
73828: PPUSH
73829: PPUSH
// task := GetTaskList ( mech ) ;
73830: LD_ADDR_VAR 0 4
73834: PUSH
73835: LD_VAR 0 1
73839: PPUSH
73840: CALL_OW 437
73844: ST_TO_ADDR
// if not task then
73845: LD_VAR 0 4
73849: NOT
73850: IFFALSE 73854
// exit ;
73852: GO 73898
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73854: LD_ADDR_VAR 0 3
73858: PUSH
73859: LD_VAR 0 4
73863: PUSH
73864: LD_INT 1
73866: ARRAY
73867: PUSH
73868: LD_INT 1
73870: ARRAY
73871: PUSH
73872: LD_STRING r
73874: EQUAL
73875: IFFALSE 73897
73877: PUSH
73878: LD_VAR 0 4
73882: PUSH
73883: LD_INT 1
73885: ARRAY
73886: PUSH
73887: LD_INT 4
73889: ARRAY
73890: PUSH
73891: LD_VAR 0 2
73895: EQUAL
73896: AND
73897: ST_TO_ADDR
// end ;
73898: LD_VAR 0 3
73902: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73903: LD_INT 0
73905: PPUSH
// SetDir ( unit , d ) ;
73906: LD_VAR 0 1
73910: PPUSH
73911: LD_VAR 0 4
73915: PPUSH
73916: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73920: LD_ADDR_VAR 0 6
73924: PUSH
73925: LD_VAR 0 1
73929: PPUSH
73930: LD_VAR 0 2
73934: PPUSH
73935: LD_VAR 0 3
73939: PPUSH
73940: LD_VAR 0 5
73944: PPUSH
73945: CALL_OW 48
73949: ST_TO_ADDR
// end ;
73950: LD_VAR 0 6
73954: RET
// export function ToNaturalNumber ( number ) ; begin
73955: LD_INT 0
73957: PPUSH
// result := number div 1 ;
73958: LD_ADDR_VAR 0 2
73962: PUSH
73963: LD_VAR 0 1
73967: PUSH
73968: LD_INT 1
73970: DIV
73971: ST_TO_ADDR
// if number < 0 then
73972: LD_VAR 0 1
73976: PUSH
73977: LD_INT 0
73979: LESS
73980: IFFALSE 73990
// result := 0 ;
73982: LD_ADDR_VAR 0 2
73986: PUSH
73987: LD_INT 0
73989: ST_TO_ADDR
// end ;
73990: LD_VAR 0 2
73994: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73995: LD_INT 0
73997: PPUSH
73998: PPUSH
73999: PPUSH
// if not buildings then
74000: LD_VAR 0 1
74004: NOT
74005: IFFALSE 74009
// exit ;
74007: GO 74124
// tmp := [ ] ;
74009: LD_ADDR_VAR 0 5
74013: PUSH
74014: EMPTY
74015: ST_TO_ADDR
// for b in buildings do
74016: LD_ADDR_VAR 0 4
74020: PUSH
74021: LD_VAR 0 1
74025: PUSH
74026: FOR_IN
74027: IFFALSE 74065
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
74029: LD_ADDR_VAR 0 5
74033: PUSH
74034: LD_VAR 0 5
74038: PPUSH
74039: LD_VAR 0 5
74043: PUSH
74044: LD_INT 1
74046: PLUS
74047: PPUSH
74048: LD_VAR 0 4
74052: PPUSH
74053: CALL_OW 266
74057: PPUSH
74058: CALL_OW 1
74062: ST_TO_ADDR
74063: GO 74026
74065: POP
74066: POP
// if not tmp then
74067: LD_VAR 0 5
74071: NOT
74072: IFFALSE 74076
// exit ;
74074: GO 74124
// if asc then
74076: LD_VAR 0 2
74080: IFFALSE 74104
// result := SortListByListAsc ( buildings , tmp ) else
74082: LD_ADDR_VAR 0 3
74086: PUSH
74087: LD_VAR 0 1
74091: PPUSH
74092: LD_VAR 0 5
74096: PPUSH
74097: CALL_OW 76
74101: ST_TO_ADDR
74102: GO 74124
// result := SortListByListDesc ( buildings , tmp ) ;
74104: LD_ADDR_VAR 0 3
74108: PUSH
74109: LD_VAR 0 1
74113: PPUSH
74114: LD_VAR 0 5
74118: PPUSH
74119: CALL_OW 77
74123: ST_TO_ADDR
// end ;
74124: LD_VAR 0 3
74128: RET
// export function SortByClass ( units , class ) ; var un ; begin
74129: LD_INT 0
74131: PPUSH
74132: PPUSH
// if not units or not class then
74133: LD_VAR 0 1
74137: NOT
74138: IFTRUE 74147
74140: PUSH
74141: LD_VAR 0 2
74145: NOT
74146: OR
74147: IFFALSE 74151
// exit ;
74149: GO 74246
// result := [ ] ;
74151: LD_ADDR_VAR 0 3
74155: PUSH
74156: EMPTY
74157: ST_TO_ADDR
// for un in units do
74158: LD_ADDR_VAR 0 4
74162: PUSH
74163: LD_VAR 0 1
74167: PUSH
74168: FOR_IN
74169: IFFALSE 74244
// if GetClass ( un ) = class then
74171: LD_VAR 0 4
74175: PPUSH
74176: CALL_OW 257
74180: PUSH
74181: LD_VAR 0 2
74185: EQUAL
74186: IFFALSE 74213
// result := Insert ( result , 1 , un ) else
74188: LD_ADDR_VAR 0 3
74192: PUSH
74193: LD_VAR 0 3
74197: PPUSH
74198: LD_INT 1
74200: PPUSH
74201: LD_VAR 0 4
74205: PPUSH
74206: CALL_OW 2
74210: ST_TO_ADDR
74211: GO 74242
// result := Replace ( result , result + 1 , un ) ;
74213: LD_ADDR_VAR 0 3
74217: PUSH
74218: LD_VAR 0 3
74222: PPUSH
74223: LD_VAR 0 3
74227: PUSH
74228: LD_INT 1
74230: PLUS
74231: PPUSH
74232: LD_VAR 0 4
74236: PPUSH
74237: CALL_OW 1
74241: ST_TO_ADDR
74242: GO 74168
74244: POP
74245: POP
// end ;
74246: LD_VAR 0 3
74250: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74251: LD_INT 0
74253: PPUSH
74254: PPUSH
74255: PPUSH
74256: PPUSH
74257: PPUSH
74258: PPUSH
74259: PPUSH
// result := [ ] ;
74260: LD_ADDR_VAR 0 4
74264: PUSH
74265: EMPTY
74266: ST_TO_ADDR
// if x - r < 0 then
74267: LD_VAR 0 1
74271: PUSH
74272: LD_VAR 0 3
74276: MINUS
74277: PUSH
74278: LD_INT 0
74280: LESS
74281: IFFALSE 74293
// min_x := 0 else
74283: LD_ADDR_VAR 0 8
74287: PUSH
74288: LD_INT 0
74290: ST_TO_ADDR
74291: GO 74309
// min_x := x - r ;
74293: LD_ADDR_VAR 0 8
74297: PUSH
74298: LD_VAR 0 1
74302: PUSH
74303: LD_VAR 0 3
74307: MINUS
74308: ST_TO_ADDR
// if y - r < 0 then
74309: LD_VAR 0 2
74313: PUSH
74314: LD_VAR 0 3
74318: MINUS
74319: PUSH
74320: LD_INT 0
74322: LESS
74323: IFFALSE 74335
// min_y := 0 else
74325: LD_ADDR_VAR 0 7
74329: PUSH
74330: LD_INT 0
74332: ST_TO_ADDR
74333: GO 74351
// min_y := y - r ;
74335: LD_ADDR_VAR 0 7
74339: PUSH
74340: LD_VAR 0 2
74344: PUSH
74345: LD_VAR 0 3
74349: MINUS
74350: ST_TO_ADDR
// max_x := x + r ;
74351: LD_ADDR_VAR 0 9
74355: PUSH
74356: LD_VAR 0 1
74360: PUSH
74361: LD_VAR 0 3
74365: PLUS
74366: ST_TO_ADDR
// max_y := y + r ;
74367: LD_ADDR_VAR 0 10
74371: PUSH
74372: LD_VAR 0 2
74376: PUSH
74377: LD_VAR 0 3
74381: PLUS
74382: ST_TO_ADDR
// for _x = min_x to max_x do
74383: LD_ADDR_VAR 0 5
74387: PUSH
74388: DOUBLE
74389: LD_VAR 0 8
74393: DEC
74394: ST_TO_ADDR
74395: LD_VAR 0 9
74399: PUSH
74400: FOR_TO
74401: IFFALSE 74502
// for _y = min_y to max_y do
74403: LD_ADDR_VAR 0 6
74407: PUSH
74408: DOUBLE
74409: LD_VAR 0 7
74413: DEC
74414: ST_TO_ADDR
74415: LD_VAR 0 10
74419: PUSH
74420: FOR_TO
74421: IFFALSE 74498
// begin if not ValidHex ( _x , _y ) then
74423: LD_VAR 0 5
74427: PPUSH
74428: LD_VAR 0 6
74432: PPUSH
74433: CALL_OW 488
74437: NOT
74438: IFFALSE 74442
// continue ;
74440: GO 74420
// if GetResourceTypeXY ( _x , _y ) then
74442: LD_VAR 0 5
74446: PPUSH
74447: LD_VAR 0 6
74451: PPUSH
74452: CALL_OW 283
74456: IFFALSE 74496
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74458: LD_ADDR_VAR 0 4
74462: PUSH
74463: LD_VAR 0 4
74467: PPUSH
74468: LD_VAR 0 4
74472: PUSH
74473: LD_INT 1
74475: PLUS
74476: PPUSH
74477: LD_VAR 0 5
74481: PUSH
74482: LD_VAR 0 6
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: PPUSH
74491: CALL_OW 1
74495: ST_TO_ADDR
// end ;
74496: GO 74420
74498: POP
74499: POP
74500: GO 74400
74502: POP
74503: POP
// end ;
74504: LD_VAR 0 4
74508: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74509: LD_INT 0
74511: PPUSH
74512: PPUSH
74513: PPUSH
74514: PPUSH
74515: PPUSH
74516: PPUSH
74517: PPUSH
74518: PPUSH
// if not units then
74519: LD_VAR 0 1
74523: NOT
74524: IFFALSE 74528
// exit ;
74526: GO 75060
// result := UnitFilter ( units , [ f_ok ] ) ;
74528: LD_ADDR_VAR 0 3
74532: PUSH
74533: LD_VAR 0 1
74537: PPUSH
74538: LD_INT 50
74540: PUSH
74541: EMPTY
74542: LIST
74543: PPUSH
74544: CALL_OW 72
74548: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74549: LD_ADDR_VAR 0 8
74553: PUSH
74554: LD_VAR 0 1
74558: PUSH
74559: LD_INT 1
74561: ARRAY
74562: PPUSH
74563: CALL_OW 255
74567: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74568: LD_ADDR_VAR 0 10
74572: PUSH
74573: LD_INT 29
74575: PUSH
74576: LD_INT 91
74578: PUSH
74579: LD_INT 49
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: LIST
74586: ST_TO_ADDR
// if not result then
74587: LD_VAR 0 3
74591: NOT
74592: IFFALSE 74596
// exit ;
74594: GO 75060
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74596: LD_ADDR_VAR 0 5
74600: PUSH
74601: LD_INT 81
74603: PUSH
74604: LD_VAR 0 8
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PPUSH
74613: CALL_OW 69
74617: ST_TO_ADDR
// for i in result do
74618: LD_ADDR_VAR 0 4
74622: PUSH
74623: LD_VAR 0 3
74627: PUSH
74628: FOR_IN
74629: IFFALSE 75058
// begin tag := GetTag ( i ) + 1 ;
74631: LD_ADDR_VAR 0 9
74635: PUSH
74636: LD_VAR 0 4
74640: PPUSH
74641: CALL_OW 110
74645: PUSH
74646: LD_INT 1
74648: PLUS
74649: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74650: LD_ADDR_VAR 0 7
74654: PUSH
74655: LD_VAR 0 4
74659: PPUSH
74660: CALL_OW 250
74664: PPUSH
74665: LD_VAR 0 4
74669: PPUSH
74670: CALL_OW 251
74674: PPUSH
74675: LD_INT 4
74677: PPUSH
74678: CALL 74251 0 3
74682: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74683: LD_VAR 0 4
74687: PPUSH
74688: CALL_OW 247
74692: PUSH
74693: LD_INT 2
74695: EQUAL
74696: IFFALSE 74708
74698: PUSH
74699: LD_VAR 0 7
74703: PUSH
74704: LD_INT 2
74706: GREATER
74707: AND
74708: IFFALSE 74728
74710: PUSH
74711: LD_VAR 0 4
74715: PPUSH
74716: CALL_OW 264
74720: PUSH
74721: LD_VAR 0 10
74725: IN
74726: NOT
74727: AND
74728: IFFALSE 74767
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74730: LD_VAR 0 4
74734: PPUSH
74735: LD_VAR 0 7
74739: PUSH
74740: LD_INT 1
74742: ARRAY
74743: PUSH
74744: LD_INT 1
74746: ARRAY
74747: PPUSH
74748: LD_VAR 0 7
74752: PUSH
74753: LD_INT 1
74755: ARRAY
74756: PUSH
74757: LD_INT 2
74759: ARRAY
74760: PPUSH
74761: CALL_OW 116
74765: GO 75056
// if path > tag then
74767: LD_VAR 0 2
74771: PUSH
74772: LD_VAR 0 9
74776: GREATER
74777: IFFALSE 74985
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74779: LD_ADDR_VAR 0 6
74783: PUSH
74784: LD_VAR 0 5
74788: PPUSH
74789: LD_INT 91
74791: PUSH
74792: LD_VAR 0 4
74796: PUSH
74797: LD_INT 8
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: LIST
74804: PPUSH
74805: CALL_OW 72
74809: ST_TO_ADDR
// if nearEnemy then
74810: LD_VAR 0 6
74814: IFFALSE 74883
// begin if GetWeapon ( i ) = ru_time_lapser then
74816: LD_VAR 0 4
74820: PPUSH
74821: CALL_OW 264
74825: PUSH
74826: LD_INT 49
74828: EQUAL
74829: IFFALSE 74857
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74831: LD_VAR 0 4
74835: PPUSH
74836: LD_VAR 0 6
74840: PPUSH
74841: LD_VAR 0 4
74845: PPUSH
74846: CALL_OW 74
74850: PPUSH
74851: CALL_OW 112
74855: GO 74881
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74857: LD_VAR 0 4
74861: PPUSH
74862: LD_VAR 0 6
74866: PPUSH
74867: LD_VAR 0 4
74871: PPUSH
74872: CALL_OW 74
74876: PPUSH
74877: CALL 76141 0 2
// end else
74881: GO 74983
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74883: LD_VAR 0 4
74887: PPUSH
74888: LD_VAR 0 2
74892: PUSH
74893: LD_VAR 0 9
74897: ARRAY
74898: PUSH
74899: LD_INT 1
74901: ARRAY
74902: PPUSH
74903: LD_VAR 0 2
74907: PUSH
74908: LD_VAR 0 9
74912: ARRAY
74913: PUSH
74914: LD_INT 2
74916: ARRAY
74917: PPUSH
74918: CALL_OW 297
74922: PUSH
74923: LD_INT 6
74925: GREATER
74926: IFFALSE 74969
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74928: LD_VAR 0 4
74932: PPUSH
74933: LD_VAR 0 2
74937: PUSH
74938: LD_VAR 0 9
74942: ARRAY
74943: PUSH
74944: LD_INT 1
74946: ARRAY
74947: PPUSH
74948: LD_VAR 0 2
74952: PUSH
74953: LD_VAR 0 9
74957: ARRAY
74958: PUSH
74959: LD_INT 2
74961: ARRAY
74962: PPUSH
74963: CALL_OW 114
74967: GO 74983
// SetTag ( i , tag ) ;
74969: LD_VAR 0 4
74973: PPUSH
74974: LD_VAR 0 9
74978: PPUSH
74979: CALL_OW 109
// end else
74983: GO 75056
// if enemy then
74985: LD_VAR 0 5
74989: IFFALSE 75056
// begin if GetWeapon ( i ) = ru_time_lapser then
74991: LD_VAR 0 4
74995: PPUSH
74996: CALL_OW 264
75000: PUSH
75001: LD_INT 49
75003: EQUAL
75004: IFFALSE 75032
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75006: LD_VAR 0 4
75010: PPUSH
75011: LD_VAR 0 5
75015: PPUSH
75016: LD_VAR 0 4
75020: PPUSH
75021: CALL_OW 74
75025: PPUSH
75026: CALL_OW 112
75030: GO 75056
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75032: LD_VAR 0 4
75036: PPUSH
75037: LD_VAR 0 5
75041: PPUSH
75042: LD_VAR 0 4
75046: PPUSH
75047: CALL_OW 74
75051: PPUSH
75052: CALL 76141 0 2
// end ; end ;
75056: GO 74628
75058: POP
75059: POP
// end ;
75060: LD_VAR 0 3
75064: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75065: LD_INT 0
75067: PPUSH
75068: PPUSH
75069: PPUSH
// if not unit or IsInUnit ( unit ) then
75070: LD_VAR 0 1
75074: NOT
75075: IFTRUE 75088
75077: PUSH
75078: LD_VAR 0 1
75082: PPUSH
75083: CALL_OW 310
75087: OR
75088: IFFALSE 75092
// exit ;
75090: GO 75183
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75092: LD_ADDR_VAR 0 4
75096: PUSH
75097: LD_VAR 0 1
75101: PPUSH
75102: CALL_OW 250
75106: PPUSH
75107: LD_VAR 0 2
75111: PPUSH
75112: LD_INT 1
75114: PPUSH
75115: CALL_OW 272
75119: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75120: LD_ADDR_VAR 0 5
75124: PUSH
75125: LD_VAR 0 1
75129: PPUSH
75130: CALL_OW 251
75134: PPUSH
75135: LD_VAR 0 2
75139: PPUSH
75140: LD_INT 1
75142: PPUSH
75143: CALL_OW 273
75147: ST_TO_ADDR
// if ValidHex ( x , y ) then
75148: LD_VAR 0 4
75152: PPUSH
75153: LD_VAR 0 5
75157: PPUSH
75158: CALL_OW 488
75162: IFFALSE 75183
// ComTurnXY ( unit , x , y ) ;
75164: LD_VAR 0 1
75168: PPUSH
75169: LD_VAR 0 4
75173: PPUSH
75174: LD_VAR 0 5
75178: PPUSH
75179: CALL_OW 118
// end ;
75183: LD_VAR 0 3
75187: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75188: LD_INT 0
75190: PPUSH
75191: PPUSH
// result := false ;
75192: LD_ADDR_VAR 0 3
75196: PUSH
75197: LD_INT 0
75199: ST_TO_ADDR
// if not units then
75200: LD_VAR 0 2
75204: NOT
75205: IFFALSE 75209
// exit ;
75207: GO 75254
// for i in units do
75209: LD_ADDR_VAR 0 4
75213: PUSH
75214: LD_VAR 0 2
75218: PUSH
75219: FOR_IN
75220: IFFALSE 75252
// if See ( side , i ) then
75222: LD_VAR 0 1
75226: PPUSH
75227: LD_VAR 0 4
75231: PPUSH
75232: CALL_OW 292
75236: IFFALSE 75250
// begin result := true ;
75238: LD_ADDR_VAR 0 3
75242: PUSH
75243: LD_INT 1
75245: ST_TO_ADDR
// exit ;
75246: POP
75247: POP
75248: GO 75254
// end ;
75250: GO 75219
75252: POP
75253: POP
// end ;
75254: LD_VAR 0 3
75258: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75259: LD_INT 0
75261: PPUSH
75262: PPUSH
75263: PPUSH
75264: PPUSH
// if not unit or not points then
75265: LD_VAR 0 1
75269: NOT
75270: IFTRUE 75279
75272: PUSH
75273: LD_VAR 0 2
75277: NOT
75278: OR
75279: IFFALSE 75283
// exit ;
75281: GO 75373
// dist := 99999 ;
75283: LD_ADDR_VAR 0 5
75287: PUSH
75288: LD_INT 99999
75290: ST_TO_ADDR
// for i in points do
75291: LD_ADDR_VAR 0 4
75295: PUSH
75296: LD_VAR 0 2
75300: PUSH
75301: FOR_IN
75302: IFFALSE 75371
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75304: LD_ADDR_VAR 0 6
75308: PUSH
75309: LD_VAR 0 1
75313: PPUSH
75314: LD_VAR 0 4
75318: PUSH
75319: LD_INT 1
75321: ARRAY
75322: PPUSH
75323: LD_VAR 0 4
75327: PUSH
75328: LD_INT 2
75330: ARRAY
75331: PPUSH
75332: CALL_OW 297
75336: ST_TO_ADDR
// if tmpDist < dist then
75337: LD_VAR 0 6
75341: PUSH
75342: LD_VAR 0 5
75346: LESS
75347: IFFALSE 75369
// begin result := i ;
75349: LD_ADDR_VAR 0 3
75353: PUSH
75354: LD_VAR 0 4
75358: ST_TO_ADDR
// dist := tmpDist ;
75359: LD_ADDR_VAR 0 5
75363: PUSH
75364: LD_VAR 0 6
75368: ST_TO_ADDR
// end ; end ;
75369: GO 75301
75371: POP
75372: POP
// end ;
75373: LD_VAR 0 3
75377: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75378: LD_INT 0
75380: PPUSH
// uc_side := side ;
75381: LD_ADDR_OWVAR 20
75385: PUSH
75386: LD_VAR 0 1
75390: ST_TO_ADDR
// uc_nation := 3 ;
75391: LD_ADDR_OWVAR 21
75395: PUSH
75396: LD_INT 3
75398: ST_TO_ADDR
// vc_chassis := 25 ;
75399: LD_ADDR_OWVAR 37
75403: PUSH
75404: LD_INT 25
75406: ST_TO_ADDR
// vc_engine := engine_siberite ;
75407: LD_ADDR_OWVAR 39
75411: PUSH
75412: LD_INT 3
75414: ST_TO_ADDR
// vc_control := control_computer ;
75415: LD_ADDR_OWVAR 38
75419: PUSH
75420: LD_INT 3
75422: ST_TO_ADDR
// vc_weapon := 59 ;
75423: LD_ADDR_OWVAR 40
75427: PUSH
75428: LD_INT 59
75430: ST_TO_ADDR
// result := CreateVehicle ;
75431: LD_ADDR_VAR 0 5
75435: PUSH
75436: CALL_OW 45
75440: ST_TO_ADDR
// SetDir ( result , d ) ;
75441: LD_VAR 0 5
75445: PPUSH
75446: LD_VAR 0 4
75450: PPUSH
75451: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75455: LD_VAR 0 5
75459: PPUSH
75460: LD_VAR 0 2
75464: PPUSH
75465: LD_VAR 0 3
75469: PPUSH
75470: LD_INT 0
75472: PPUSH
75473: CALL_OW 48
// end ;
75477: LD_VAR 0 5
75481: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75482: LD_INT 0
75484: PPUSH
75485: PPUSH
75486: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75487: LD_ADDR_VAR 0 2
75491: PUSH
75492: LD_INT 0
75494: PUSH
75495: LD_INT 0
75497: PUSH
75498: LD_INT 0
75500: PUSH
75501: LD_INT 0
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75510: LD_VAR 0 1
75514: NOT
75515: IFTRUE 75548
75517: PUSH
75518: LD_VAR 0 1
75522: PPUSH
75523: CALL_OW 264
75527: PUSH
75528: LD_INT 12
75530: PUSH
75531: LD_INT 51
75533: PUSH
75534: LD_INT 32
75536: PUSH
75537: LD_INT 89
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: IN
75546: NOT
75547: OR
75548: IFFALSE 75552
// exit ;
75550: GO 75650
// for i := 1 to 3 do
75552: LD_ADDR_VAR 0 3
75556: PUSH
75557: DOUBLE
75558: LD_INT 1
75560: DEC
75561: ST_TO_ADDR
75562: LD_INT 3
75564: PUSH
75565: FOR_TO
75566: IFFALSE 75648
// begin tmp := GetCargo ( cargo , i ) ;
75568: LD_ADDR_VAR 0 4
75572: PUSH
75573: LD_VAR 0 1
75577: PPUSH
75578: LD_VAR 0 3
75582: PPUSH
75583: CALL_OW 289
75587: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75588: LD_ADDR_VAR 0 2
75592: PUSH
75593: LD_VAR 0 2
75597: PPUSH
75598: LD_VAR 0 3
75602: PPUSH
75603: LD_VAR 0 4
75607: PPUSH
75608: CALL_OW 1
75612: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75613: LD_ADDR_VAR 0 2
75617: PUSH
75618: LD_VAR 0 2
75622: PPUSH
75623: LD_INT 4
75625: PPUSH
75626: LD_VAR 0 2
75630: PUSH
75631: LD_INT 4
75633: ARRAY
75634: PUSH
75635: LD_VAR 0 4
75639: PLUS
75640: PPUSH
75641: CALL_OW 1
75645: ST_TO_ADDR
// end ;
75646: GO 75565
75648: POP
75649: POP
// end ;
75650: LD_VAR 0 2
75654: RET
// export function Length ( array ) ; begin
75655: LD_INT 0
75657: PPUSH
// result := array + 0 ;
75658: LD_ADDR_VAR 0 2
75662: PUSH
75663: LD_VAR 0 1
75667: PUSH
75668: LD_INT 0
75670: PLUS
75671: ST_TO_ADDR
// end ;
75672: LD_VAR 0 2
75676: RET
// export function PrepareArray ( array ) ; begin
75677: LD_INT 0
75679: PPUSH
// result := array diff 0 ;
75680: LD_ADDR_VAR 0 2
75684: PUSH
75685: LD_VAR 0 1
75689: PUSH
75690: LD_INT 0
75692: DIFF
75693: ST_TO_ADDR
// if not result [ 1 ] then
75694: LD_VAR 0 2
75698: PUSH
75699: LD_INT 1
75701: ARRAY
75702: NOT
75703: IFFALSE 75723
// result := Delete ( result , 1 ) ;
75705: LD_ADDR_VAR 0 2
75709: PUSH
75710: LD_VAR 0 2
75714: PPUSH
75715: LD_INT 1
75717: PPUSH
75718: CALL_OW 3
75722: ST_TO_ADDR
// end ;
75723: LD_VAR 0 2
75727: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75728: LD_INT 0
75730: PPUSH
75731: PPUSH
75732: PPUSH
75733: PPUSH
// sibRocketRange := 25 ;
75734: LD_ADDR_VAR 0 6
75738: PUSH
75739: LD_INT 25
75741: ST_TO_ADDR
// result := false ;
75742: LD_ADDR_VAR 0 4
75746: PUSH
75747: LD_INT 0
75749: ST_TO_ADDR
// for i := 0 to 5 do
75750: LD_ADDR_VAR 0 5
75754: PUSH
75755: DOUBLE
75756: LD_INT 0
75758: DEC
75759: ST_TO_ADDR
75760: LD_INT 5
75762: PUSH
75763: FOR_TO
75764: IFFALSE 75831
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75766: LD_VAR 0 1
75770: PPUSH
75771: LD_VAR 0 5
75775: PPUSH
75776: LD_VAR 0 6
75780: PPUSH
75781: CALL_OW 272
75785: PPUSH
75786: LD_VAR 0 2
75790: PPUSH
75791: LD_VAR 0 5
75795: PPUSH
75796: LD_VAR 0 6
75800: PPUSH
75801: CALL_OW 273
75805: PPUSH
75806: LD_VAR 0 3
75810: PPUSH
75811: CALL_OW 309
75815: IFFALSE 75829
// begin result := true ;
75817: LD_ADDR_VAR 0 4
75821: PUSH
75822: LD_INT 1
75824: ST_TO_ADDR
// exit ;
75825: POP
75826: POP
75827: GO 75833
// end ;
75829: GO 75763
75831: POP
75832: POP
// end ;
75833: LD_VAR 0 4
75837: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75838: LD_INT 0
75840: PPUSH
75841: PPUSH
75842: PPUSH
// if btype = b_depot then
75843: LD_VAR 0 2
75847: PUSH
75848: LD_INT 0
75850: EQUAL
75851: IFFALSE 75863
// begin result := true ;
75853: LD_ADDR_VAR 0 3
75857: PUSH
75858: LD_INT 1
75860: ST_TO_ADDR
// exit ;
75861: GO 75983
// end ; pom := GetBase ( depot ) ;
75863: LD_ADDR_VAR 0 4
75867: PUSH
75868: LD_VAR 0 1
75872: PPUSH
75873: CALL_OW 274
75877: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75878: LD_ADDR_VAR 0 5
75882: PUSH
75883: LD_VAR 0 2
75887: PPUSH
75888: LD_VAR 0 1
75892: PPUSH
75893: CALL_OW 248
75897: PPUSH
75898: CALL_OW 450
75902: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75903: LD_ADDR_VAR 0 3
75907: PUSH
75908: LD_VAR 0 4
75912: PPUSH
75913: LD_INT 1
75915: PPUSH
75916: CALL_OW 275
75920: PUSH
75921: LD_VAR 0 5
75925: PUSH
75926: LD_INT 1
75928: ARRAY
75929: GREATEREQUAL
75930: IFFALSE 75956
75932: PUSH
75933: LD_VAR 0 4
75937: PPUSH
75938: LD_INT 2
75940: PPUSH
75941: CALL_OW 275
75945: PUSH
75946: LD_VAR 0 5
75950: PUSH
75951: LD_INT 2
75953: ARRAY
75954: GREATEREQUAL
75955: AND
75956: IFFALSE 75982
75958: PUSH
75959: LD_VAR 0 4
75963: PPUSH
75964: LD_INT 3
75966: PPUSH
75967: CALL_OW 275
75971: PUSH
75972: LD_VAR 0 5
75976: PUSH
75977: LD_INT 3
75979: ARRAY
75980: GREATEREQUAL
75981: AND
75982: ST_TO_ADDR
// end ;
75983: LD_VAR 0 3
75987: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75988: LD_INT 0
75990: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75991: LD_VAR 0 1
75995: PPUSH
75996: LD_VAR 0 2
76000: PPUSH
76001: LD_INT 0
76003: PPUSH
76004: LD_INT 0
76006: PPUSH
76007: LD_INT 1
76009: PPUSH
76010: LD_INT 0
76012: PPUSH
76013: CALL_OW 587
// end ;
76017: LD_VAR 0 3
76021: RET
// export function CenterOnNow ( unit ) ; begin
76022: LD_INT 0
76024: PPUSH
// result := IsInUnit ( unit ) ;
76025: LD_ADDR_VAR 0 2
76029: PUSH
76030: LD_VAR 0 1
76034: PPUSH
76035: CALL_OW 310
76039: ST_TO_ADDR
// if not result then
76040: LD_VAR 0 2
76044: NOT
76045: IFFALSE 76057
// result := unit ;
76047: LD_ADDR_VAR 0 2
76051: PUSH
76052: LD_VAR 0 1
76056: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76057: LD_VAR 0 1
76061: PPUSH
76062: CALL_OW 87
// end ;
76066: LD_VAR 0 2
76070: RET
// export function ComMoveHex ( unit , hex ) ; begin
76071: LD_INT 0
76073: PPUSH
// if not hex then
76074: LD_VAR 0 2
76078: NOT
76079: IFFALSE 76083
// exit ;
76081: GO 76136
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76083: LD_VAR 0 2
76087: PUSH
76088: LD_INT 1
76090: ARRAY
76091: PPUSH
76092: LD_VAR 0 2
76096: PUSH
76097: LD_INT 2
76099: ARRAY
76100: PPUSH
76101: CALL_OW 428
76105: IFFALSE 76109
// exit ;
76107: GO 76136
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76109: LD_VAR 0 1
76113: PPUSH
76114: LD_VAR 0 2
76118: PUSH
76119: LD_INT 1
76121: ARRAY
76122: PPUSH
76123: LD_VAR 0 2
76127: PUSH
76128: LD_INT 2
76130: ARRAY
76131: PPUSH
76132: CALL_OW 111
// end ;
76136: LD_VAR 0 3
76140: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76141: LD_INT 0
76143: PPUSH
76144: PPUSH
76145: PPUSH
// if not unit or not enemy then
76146: LD_VAR 0 1
76150: NOT
76151: IFTRUE 76160
76153: PUSH
76154: LD_VAR 0 2
76158: NOT
76159: OR
76160: IFFALSE 76164
// exit ;
76162: GO 76290
// x := GetX ( enemy ) ;
76164: LD_ADDR_VAR 0 4
76168: PUSH
76169: LD_VAR 0 2
76173: PPUSH
76174: CALL_OW 250
76178: ST_TO_ADDR
// y := GetY ( enemy ) ;
76179: LD_ADDR_VAR 0 5
76183: PUSH
76184: LD_VAR 0 2
76188: PPUSH
76189: CALL_OW 251
76193: ST_TO_ADDR
// if ValidHex ( x , y ) then
76194: LD_VAR 0 4
76198: PPUSH
76199: LD_VAR 0 5
76203: PPUSH
76204: CALL_OW 488
76208: IFFALSE 76290
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76210: LD_VAR 0 2
76214: PPUSH
76215: CALL_OW 247
76219: PUSH
76220: LD_INT 3
76222: PUSH
76223: LD_INT 2
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: IN
76230: IFTRUE 76253
76232: PUSH
76233: LD_VAR 0 1
76237: PPUSH
76238: CALL_OW 255
76242: PPUSH
76243: LD_VAR 0 2
76247: PPUSH
76248: CALL_OW 292
76252: OR
76253: IFFALSE 76271
// ComAttackUnit ( unit , enemy ) else
76255: LD_VAR 0 1
76259: PPUSH
76260: LD_VAR 0 2
76264: PPUSH
76265: CALL_OW 115
76269: GO 76290
// ComAgressiveMove ( unit , x , y ) ;
76271: LD_VAR 0 1
76275: PPUSH
76276: LD_VAR 0 4
76280: PPUSH
76281: LD_VAR 0 5
76285: PPUSH
76286: CALL_OW 114
// end ;
76290: LD_VAR 0 3
76294: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76295: LD_INT 0
76297: PPUSH
76298: PPUSH
76299: PPUSH
// list := AreaToList ( area , 0 ) ;
76300: LD_ADDR_VAR 0 5
76304: PUSH
76305: LD_VAR 0 1
76309: PPUSH
76310: LD_INT 0
76312: PPUSH
76313: CALL_OW 517
76317: ST_TO_ADDR
// if not list then
76318: LD_VAR 0 5
76322: NOT
76323: IFFALSE 76327
// exit ;
76325: GO 76457
// if all then
76327: LD_VAR 0 2
76331: IFFALSE 76419
// begin for i := 1 to list [ 1 ] do
76333: LD_ADDR_VAR 0 4
76337: PUSH
76338: DOUBLE
76339: LD_INT 1
76341: DEC
76342: ST_TO_ADDR
76343: LD_VAR 0 5
76347: PUSH
76348: LD_INT 1
76350: ARRAY
76351: PUSH
76352: FOR_TO
76353: IFFALSE 76415
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76355: LD_ADDR_VAR 0 3
76359: PUSH
76360: LD_VAR 0 3
76364: PPUSH
76365: LD_VAR 0 3
76369: PUSH
76370: LD_INT 1
76372: PLUS
76373: PPUSH
76374: LD_VAR 0 5
76378: PUSH
76379: LD_INT 1
76381: ARRAY
76382: PUSH
76383: LD_VAR 0 4
76387: ARRAY
76388: PUSH
76389: LD_VAR 0 5
76393: PUSH
76394: LD_INT 2
76396: ARRAY
76397: PUSH
76398: LD_VAR 0 4
76402: ARRAY
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: PPUSH
76408: CALL_OW 1
76412: ST_TO_ADDR
76413: GO 76352
76415: POP
76416: POP
// exit ;
76417: GO 76457
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76419: LD_ADDR_VAR 0 3
76423: PUSH
76424: LD_VAR 0 5
76428: PUSH
76429: LD_INT 1
76431: ARRAY
76432: PUSH
76433: LD_INT 1
76435: ARRAY
76436: PUSH
76437: LD_VAR 0 5
76441: PUSH
76442: LD_INT 2
76444: ARRAY
76445: PUSH
76446: LD_INT 1
76448: ARRAY
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: PUSH
76454: EMPTY
76455: LIST
76456: ST_TO_ADDR
// end ;
76457: LD_VAR 0 3
76461: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76462: LD_INT 0
76464: PPUSH
76465: PPUSH
// list := AreaToList ( area , 0 ) ;
76466: LD_ADDR_VAR 0 4
76470: PUSH
76471: LD_VAR 0 1
76475: PPUSH
76476: LD_INT 0
76478: PPUSH
76479: CALL_OW 517
76483: ST_TO_ADDR
// if not list then
76484: LD_VAR 0 4
76488: NOT
76489: IFFALSE 76493
// exit ;
76491: GO 76534
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76493: LD_ADDR_VAR 0 3
76497: PUSH
76498: LD_VAR 0 4
76502: PUSH
76503: LD_INT 1
76505: ARRAY
76506: PUSH
76507: LD_INT 1
76509: ARRAY
76510: PUSH
76511: LD_VAR 0 4
76515: PUSH
76516: LD_INT 2
76518: ARRAY
76519: PUSH
76520: LD_INT 1
76522: ARRAY
76523: PUSH
76524: LD_VAR 0 2
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: LIST
76533: ST_TO_ADDR
// end ;
76534: LD_VAR 0 3
76538: RET
// export function First ( array ) ; begin
76539: LD_INT 0
76541: PPUSH
// if not array then
76542: LD_VAR 0 1
76546: NOT
76547: IFFALSE 76551
// exit ;
76549: GO 76565
// result := array [ 1 ] ;
76551: LD_ADDR_VAR 0 2
76555: PUSH
76556: LD_VAR 0 1
76560: PUSH
76561: LD_INT 1
76563: ARRAY
76564: ST_TO_ADDR
// end ;
76565: LD_VAR 0 2
76569: RET
// export function Last ( array ) ; begin
76570: LD_INT 0
76572: PPUSH
// if not array then
76573: LD_VAR 0 1
76577: NOT
76578: IFFALSE 76582
// exit ;
76580: GO 76598
// result := array [ array ] ;
76582: LD_ADDR_VAR 0 2
76586: PUSH
76587: LD_VAR 0 1
76591: PUSH
76592: LD_VAR 0 1
76596: ARRAY
76597: ST_TO_ADDR
// end ;
76598: LD_VAR 0 2
76602: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76603: LD_INT 0
76605: PPUSH
76606: PPUSH
// result := [ ] ;
76607: LD_ADDR_VAR 0 5
76611: PUSH
76612: EMPTY
76613: ST_TO_ADDR
// if not array then
76614: LD_VAR 0 1
76618: NOT
76619: IFFALSE 76623
// exit ;
76621: GO 76735
// for i := 1 to array do
76623: LD_ADDR_VAR 0 6
76627: PUSH
76628: DOUBLE
76629: LD_INT 1
76631: DEC
76632: ST_TO_ADDR
76633: LD_VAR 0 1
76637: PUSH
76638: FOR_TO
76639: IFFALSE 76733
// if array [ i ] [ index ] = value then
76641: LD_VAR 0 1
76645: PUSH
76646: LD_VAR 0 6
76650: ARRAY
76651: PUSH
76652: LD_VAR 0 2
76656: ARRAY
76657: PUSH
76658: LD_VAR 0 3
76662: EQUAL
76663: IFFALSE 76731
// begin if indexColumn then
76665: LD_VAR 0 4
76669: IFFALSE 76705
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76671: LD_ADDR_VAR 0 5
76675: PUSH
76676: LD_VAR 0 5
76680: PPUSH
76681: LD_VAR 0 1
76685: PUSH
76686: LD_VAR 0 6
76690: ARRAY
76691: PUSH
76692: LD_VAR 0 4
76696: ARRAY
76697: PPUSH
76698: CALL 71743 0 2
76702: ST_TO_ADDR
76703: GO 76731
// result := Join ( result , array [ i ] ) ;
76705: LD_ADDR_VAR 0 5
76709: PUSH
76710: LD_VAR 0 5
76714: PPUSH
76715: LD_VAR 0 1
76719: PUSH
76720: LD_VAR 0 6
76724: ARRAY
76725: PPUSH
76726: CALL 71743 0 2
76730: ST_TO_ADDR
// end ;
76731: GO 76638
76733: POP
76734: POP
// end ;
76735: LD_VAR 0 5
76739: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76740: LD_INT 0
76742: PPUSH
// if not vehicles or not parkingPoint then
76743: LD_VAR 0 1
76747: NOT
76748: IFTRUE 76757
76750: PUSH
76751: LD_VAR 0 2
76755: NOT
76756: OR
76757: IFFALSE 76761
// exit ;
76759: GO 76859
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76761: LD_ADDR_VAR 0 1
76765: PUSH
76766: LD_VAR 0 1
76770: PPUSH
76771: LD_INT 50
76773: PUSH
76774: EMPTY
76775: LIST
76776: PUSH
76777: LD_INT 3
76779: PUSH
76780: LD_INT 92
76782: PUSH
76783: LD_VAR 0 2
76787: PUSH
76788: LD_INT 1
76790: ARRAY
76791: PUSH
76792: LD_VAR 0 2
76796: PUSH
76797: LD_INT 2
76799: ARRAY
76800: PUSH
76801: LD_INT 8
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: LIST
76808: LIST
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: PPUSH
76818: CALL_OW 72
76822: ST_TO_ADDR
// if not vehicles then
76823: LD_VAR 0 1
76827: NOT
76828: IFFALSE 76832
// exit ;
76830: GO 76859
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76832: LD_VAR 0 1
76836: PPUSH
76837: LD_VAR 0 2
76841: PUSH
76842: LD_INT 1
76844: ARRAY
76845: PPUSH
76846: LD_VAR 0 2
76850: PUSH
76851: LD_INT 2
76853: ARRAY
76854: PPUSH
76855: CALL_OW 111
// end ;
76859: LD_VAR 0 3
76863: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76864: LD_INT 0
76866: PPUSH
76867: PPUSH
76868: PPUSH
// if not side or not area then
76869: LD_VAR 0 1
76873: NOT
76874: IFTRUE 76883
76876: PUSH
76877: LD_VAR 0 2
76881: NOT
76882: OR
76883: IFFALSE 76887
// exit ;
76885: GO 77006
// tmp := AreaToList ( area , 0 ) ;
76887: LD_ADDR_VAR 0 5
76891: PUSH
76892: LD_VAR 0 2
76896: PPUSH
76897: LD_INT 0
76899: PPUSH
76900: CALL_OW 517
76904: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76905: LD_ADDR_VAR 0 4
76909: PUSH
76910: DOUBLE
76911: LD_INT 1
76913: DEC
76914: ST_TO_ADDR
76915: LD_VAR 0 5
76919: PUSH
76920: LD_INT 1
76922: ARRAY
76923: PUSH
76924: FOR_TO
76925: IFFALSE 77004
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76927: LD_VAR 0 5
76931: PUSH
76932: LD_INT 1
76934: ARRAY
76935: PUSH
76936: LD_VAR 0 4
76940: ARRAY
76941: PPUSH
76942: LD_VAR 0 5
76946: PUSH
76947: LD_INT 2
76949: ARRAY
76950: PUSH
76951: LD_VAR 0 4
76955: ARRAY
76956: PPUSH
76957: CALL_OW 351
76961: IFFALSE 77002
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76963: LD_VAR 0 5
76967: PUSH
76968: LD_INT 1
76970: ARRAY
76971: PUSH
76972: LD_VAR 0 4
76976: ARRAY
76977: PPUSH
76978: LD_VAR 0 5
76982: PUSH
76983: LD_INT 2
76985: ARRAY
76986: PUSH
76987: LD_VAR 0 4
76991: ARRAY
76992: PPUSH
76993: LD_VAR 0 1
76997: PPUSH
76998: CALL_OW 244
// end ;
77002: GO 76924
77004: POP
77005: POP
// end ;
77006: LD_VAR 0 3
77010: RET
// export function UniqueArray ( array ) ; var i ; begin
77011: LD_INT 0
77013: PPUSH
77014: PPUSH
// result := [ ] ;
77015: LD_ADDR_VAR 0 2
77019: PUSH
77020: EMPTY
77021: ST_TO_ADDR
// if not array then
77022: LD_VAR 0 1
77026: NOT
77027: IFFALSE 77031
// exit ;
77029: GO 77092
// for i := 1 to array do
77031: LD_ADDR_VAR 0 3
77035: PUSH
77036: DOUBLE
77037: LD_INT 1
77039: DEC
77040: ST_TO_ADDR
77041: LD_VAR 0 1
77045: PUSH
77046: FOR_TO
77047: IFFALSE 77090
// if not array [ i ] in result then
77049: LD_VAR 0 1
77053: PUSH
77054: LD_VAR 0 3
77058: ARRAY
77059: PUSH
77060: LD_VAR 0 2
77064: IN
77065: NOT
77066: IFFALSE 77088
// result := Join ( result , i ) ;
77068: LD_ADDR_VAR 0 2
77072: PUSH
77073: LD_VAR 0 2
77077: PPUSH
77078: LD_VAR 0 3
77082: PPUSH
77083: CALL 71743 0 2
77087: ST_TO_ADDR
77088: GO 77046
77090: POP
77091: POP
// end ; end_of_file
77092: LD_VAR 0 2
77096: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77097: LD_VAR 0 1
77101: PUSH
77102: LD_INT 200
77104: DOUBLE
77105: GREATEREQUAL
77106: IFFALSE 77114
77108: LD_INT 299
77110: DOUBLE
77111: LESSEQUAL
77112: IFTRUE 77116
77114: GO 77148
77116: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77117: LD_VAR 0 1
77121: PPUSH
77122: LD_VAR 0 2
77126: PPUSH
77127: LD_VAR 0 3
77131: PPUSH
77132: LD_VAR 0 4
77136: PPUSH
77137: LD_VAR 0 5
77141: PPUSH
77142: CALL 27819 0 5
77146: GO 77225
77148: LD_INT 300
77150: DOUBLE
77151: GREATEREQUAL
77152: IFFALSE 77160
77154: LD_INT 399
77156: DOUBLE
77157: LESSEQUAL
77158: IFTRUE 77162
77160: GO 77224
77162: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77163: LD_VAR 0 1
77167: PPUSH
77168: LD_VAR 0 2
77172: PPUSH
77173: LD_VAR 0 3
77177: PPUSH
77178: LD_VAR 0 4
77182: PPUSH
77183: LD_VAR 0 5
77187: PPUSH
77188: LD_VAR 0 6
77192: PPUSH
77193: LD_VAR 0 7
77197: PPUSH
77198: LD_VAR 0 8
77202: PPUSH
77203: LD_VAR 0 9
77207: PPUSH
77208: LD_VAR 0 10
77212: PPUSH
77213: LD_VAR 0 11
77217: PPUSH
77218: CALL 23622 0 11
77222: GO 77225
77224: POP
// end ;
77225: PPOPN 11
77227: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77228: LD_VAR 0 1
77232: PPUSH
77233: LD_VAR 0 2
77237: PPUSH
77238: LD_VAR 0 3
77242: PPUSH
77243: LD_VAR 0 4
77247: PPUSH
77248: LD_VAR 0 5
77252: PPUSH
77253: CALL 27119 0 5
// end ; end_of_file
77257: PPOPN 5
77259: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77260: LD_VAR 0 1
77264: PPUSH
77265: LD_VAR 0 2
77269: PPUSH
77270: LD_VAR 0 3
77274: PPUSH
77275: LD_VAR 0 4
77279: PPUSH
77280: LD_VAR 0 5
77284: PPUSH
77285: LD_VAR 0 6
77289: PPUSH
77290: CALL 11162 0 6
// end ;
77294: PPOPN 6
77296: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77297: LD_INT 0
77299: PPUSH
// begin if not units then
77300: LD_VAR 0 1
77304: NOT
77305: IFFALSE 77309
// exit ;
77307: GO 77343
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77309: LD_VAR 0 1
77313: PPUSH
77314: LD_VAR 0 2
77318: PPUSH
77319: LD_VAR 0 3
77323: PPUSH
77324: LD_VAR 0 4
77328: PPUSH
77329: LD_VAR 0 5
77333: PPUSH
77334: LD_VAR 0 6
77338: PPUSH
77339: CALL 33516 0 6
// end ;
77343: PPOPN 7
77345: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77346: CALL 11042 0 0
// end ;
77350: PPOPN 1
77352: END
