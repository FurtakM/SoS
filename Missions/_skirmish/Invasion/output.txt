// starting begin InitMessageWindow ;
   0: CALL 2932 0 0
// InitGame ;
   4: CALL 3153 0 0
// InitDisplay ;
   8: CALL 9626 0 0
// end ; end_of_file
  12: END
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// if pos < 1 then
  19: LD_VAR 0 2
  23: PUSH
  24: LD_INT 1
  26: LESS
  27: IFFALSE 31
// exit ;
  29: GO 334
// if pos = 1 then
  31: LD_VAR 0 2
  35: PUSH
  36: LD_INT 1
  38: EQUAL
  39: IFFALSE 72
// result := Replace ( arr , pos [ 1 ] , value ) else
  41: LD_ADDR_VAR 0 4
  45: PUSH
  46: LD_VAR 0 1
  50: PPUSH
  51: LD_VAR 0 2
  55: PUSH
  56: LD_INT 1
  58: ARRAY
  59: PPUSH
  60: LD_VAR 0 3
  64: PPUSH
  65: CALL_OW 1
  69: ST_TO_ADDR
  70: GO 334
// begin tmp := arr ;
  72: LD_ADDR_VAR 0 6
  76: PUSH
  77: LD_VAR 0 1
  81: ST_TO_ADDR
// s_arr := [ tmp ] ;
  82: LD_ADDR_VAR 0 7
  86: PUSH
  87: LD_VAR 0 6
  91: PUSH
  92: EMPTY
  93: LIST
  94: ST_TO_ADDR
// for i = 1 to pos - 1 do
  95: LD_ADDR_VAR 0 5
  99: PUSH
 100: DOUBLE
 101: LD_INT 1
 103: DEC
 104: ST_TO_ADDR
 105: LD_VAR 0 2
 109: PUSH
 110: LD_INT 1
 112: MINUS
 113: PUSH
 114: FOR_TO
 115: IFFALSE 160
// begin tmp := tmp [ pos [ i ] ] ;
 117: LD_ADDR_VAR 0 6
 121: PUSH
 122: LD_VAR 0 6
 126: PUSH
 127: LD_VAR 0 2
 131: PUSH
 132: LD_VAR 0 5
 136: ARRAY
 137: ARRAY
 138: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
 139: LD_ADDR_VAR 0 7
 143: PUSH
 144: LD_VAR 0 7
 148: PUSH
 149: LD_VAR 0 6
 153: PUSH
 154: EMPTY
 155: LIST
 156: ADD
 157: ST_TO_ADDR
// end ;
 158: GO 114
 160: POP
 161: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
 162: LD_ADDR_VAR 0 6
 166: PUSH
 167: LD_VAR 0 6
 171: PPUSH
 172: LD_VAR 0 2
 176: PUSH
 177: LD_VAR 0 2
 181: ARRAY
 182: PPUSH
 183: LD_VAR 0 3
 187: PPUSH
 188: CALL_OW 1
 192: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
 193: LD_ADDR_VAR 0 7
 197: PUSH
 198: LD_VAR 0 7
 202: PPUSH
 203: LD_VAR 0 7
 207: PPUSH
 208: LD_VAR 0 6
 212: PPUSH
 213: CALL_OW 1
 217: ST_TO_ADDR
// for i = s_arr downto 2 do
 218: LD_ADDR_VAR 0 5
 222: PUSH
 223: DOUBLE
 224: LD_VAR 0 7
 228: INC
 229: ST_TO_ADDR
 230: LD_INT 2
 232: PUSH
 233: FOR_DOWNTO
 234: IFFALSE 318
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
 236: LD_ADDR_VAR 0 6
 240: PUSH
 241: LD_VAR 0 7
 245: PUSH
 246: LD_VAR 0 5
 250: PUSH
 251: LD_INT 1
 253: MINUS
 254: ARRAY
 255: PPUSH
 256: LD_VAR 0 2
 260: PUSH
 261: LD_VAR 0 5
 265: PUSH
 266: LD_INT 1
 268: MINUS
 269: ARRAY
 270: PPUSH
 271: LD_VAR 0 7
 275: PUSH
 276: LD_VAR 0 5
 280: ARRAY
 281: PPUSH
 282: CALL_OW 1
 286: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
 287: LD_ADDR_VAR 0 7
 291: PUSH
 292: LD_VAR 0 7
 296: PPUSH
 297: LD_VAR 0 5
 301: PUSH
 302: LD_INT 1
 304: MINUS
 305: PPUSH
 306: LD_VAR 0 6
 310: PPUSH
 311: CALL_OW 1
 315: ST_TO_ADDR
// end ;
 316: GO 233
 318: POP
 319: POP
// result := s_arr [ 1 ] ;
 320: LD_ADDR_VAR 0 4
 324: PUSH
 325: LD_VAR 0 7
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: ST_TO_ADDR
// end ; end ;
 334: LD_VAR 0 4
 338: RET
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// team := [ ] ;
 345: LD_ADDR_VAR 0 8
 349: PUSH
 350: EMPTY
 351: ST_TO_ADDR
// playerSquad := [ ] ;
 352: LD_ADDR_EXP 12
 356: PUSH
 357: EMPTY
 358: ST_TO_ADDR
// uc_side := nation ;
 359: LD_ADDR_OWVAR 20
 363: PUSH
 364: LD_VAR 0 1
 368: ST_TO_ADDR
// uc_nation := nation ;
 369: LD_ADDR_OWVAR 21
 373: PUSH
 374: LD_VAR 0 1
 378: ST_TO_ADDR
// hc_importance := 100 ;
 379: LD_ADDR_OWVAR 32
 383: PUSH
 384: LD_INT 100
 386: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 387: LD_INT 0
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
 402: LD_ADDR_VAR 0 8
 406: PUSH
 407: LD_VAR 0 8
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 44
 419: PPUSH
 420: CALL_OW 2
 424: ST_TO_ADDR
// hc_importance := 0 ;
 425: LD_ADDR_OWVAR 32
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to num - 1 do
 433: LD_ADDR_VAR 0 7
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 1
 450: MINUS
 451: PUSH
 452: FOR_TO
 453: IFFALSE 511
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 455: LD_INT 0
 457: PPUSH
 458: LD_VAR 0 7
 462: PUSH
 463: LD_VAR 0 3
 467: PUSH
 468: LD_INT 4
 470: DIVREAL
 471: DIV
 472: PUSH
 473: LD_INT 1
 475: PLUS
 476: PPUSH
 477: LD_VAR 0 2
 481: PPUSH
 482: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 486: LD_ADDR_VAR 0 8
 490: PUSH
 491: LD_VAR 0 8
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: CALL_OW 44
 503: PPUSH
 504: CALL_OW 2
 508: ST_TO_ADDR
// end ;
 509: GO 452
 511: POP
 512: POP
// for i in team do
 513: LD_ADDR_VAR 0 7
 517: PUSH
 518: LD_VAR 0 8
 522: PUSH
 523: FOR_IN
 524: IFFALSE 623
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 526: LD_VAR 0 7
 530: PPUSH
 531: LD_VAR 0 4
 535: PPUSH
 536: LD_VAR 0 5
 540: PPUSH
 541: LD_INT 8
 543: PPUSH
 544: LD_INT 0
 546: PPUSH
 547: CALL_OW 50
// c := c + 1 ;
 551: LD_ADDR_VAR 0 9
 555: PUSH
 556: LD_VAR 0 9
 560: PUSH
 561: LD_INT 1
 563: PLUS
 564: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 565: LD_VAR 0 7
 569: PPUSH
 570: LD_STRING grave
 572: PUSH
 573: LD_VAR 0 9
 577: STR
 578: PPUSH
 579: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 583: LD_ADDR_EXP 12
 587: PUSH
 588: LD_EXP 12
 592: PPUSH
 593: LD_VAR 0 9
 597: PPUSH
 598: LD_VAR 0 7
 602: PUSH
 603: LD_STRING grave
 605: PUSH
 606: LD_VAR 0 9
 610: STR
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PPUSH
 616: CALL_OW 2
 620: ST_TO_ADDR
// end ;
 621: GO 523
 623: POP
 624: POP
// end ;
 625: LD_VAR 0 6
 629: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// for i = 1 to type_allowed do
 635: LD_ADDR_VAR 0 7
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 790
// while ( num [ i ] > 0 ) do
 653: LD_VAR 0 1
 657: PUSH
 658: LD_VAR 0 7
 662: ARRAY
 663: PUSH
 664: LD_INT 0
 666: GREATER
 667: IFFALSE 788
// begin if num [ i ] > 5 then
 669: LD_VAR 0 1
 673: PUSH
 674: LD_VAR 0 7
 678: ARRAY
 679: PUSH
 680: LD_INT 5
 682: GREATER
 683: IFFALSE 695
// n := 5 else
 685: LD_ADDR_VAR 0 8
 689: PUSH
 690: LD_INT 5
 692: ST_TO_ADDR
 693: GO 711
// n := num [ i ] ;
 695: LD_ADDR_VAR 0 8
 699: PUSH
 700: LD_VAR 0 1
 704: PUSH
 705: LD_VAR 0 7
 709: ARRAY
 710: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 711: LD_VAR 0 2
 715: PUSH
 716: LD_VAR 0 7
 720: ARRAY
 721: PPUSH
 722: LD_VAR 0 8
 726: PPUSH
 727: LD_VAR 0 3
 731: PPUSH
 732: LD_VAR 0 4
 736: PPUSH
 737: LD_VAR 0 5
 741: PPUSH
 742: LD_INT 0
 744: PPUSH
 745: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 749: LD_ADDR_VAR 0 1
 753: PUSH
 754: LD_VAR 0 1
 758: PPUSH
 759: LD_VAR 0 7
 763: PPUSH
 764: LD_VAR 0 1
 768: PUSH
 769: LD_VAR 0 7
 773: ARRAY
 774: PUSH
 775: LD_VAR 0 8
 779: MINUS
 780: PPUSH
 781: CALL_OW 1
 785: ST_TO_ADDR
// end ;
 786: GO 653
 788: GO 650
 790: POP
 791: POP
// end ;
 792: LD_VAR 0 6
 796: RET
// export function AddPoints ( p ) ; begin
 797: LD_INT 0
 799: PPUSH
// points := points + p ;
 800: LD_ADDR_EXP 2
 804: PUSH
 805: LD_EXP 2
 809: PUSH
 810: LD_VAR 0 1
 814: PLUS
 815: ST_TO_ADDR
// end ;
 816: LD_VAR 0 2
 820: RET
// export function LoadColors ; var file ; begin
 821: LD_INT 0
 823: PPUSH
 824: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 825: CALL_OW 545
 829: PUSH
 830: LD_INT 1
 832: DOUBLE
 833: GREATEREQUAL
 834: IFFALSE 842
 836: LD_INT 3
 838: DOUBLE
 839: LESSEQUAL
 840: IFTRUE 850
 842: LD_INT 12
 844: DOUBLE
 845: EQUAL
 846: IFTRUE 850
 848: GO 861
 850: POP
// file = colors.txt ; 4 .. 5 :
 851: LD_ADDR_VAR 0 2
 855: PUSH
 856: LD_STRING colors.txt
 858: ST_TO_ADDR
 859: GO 937
 861: LD_INT 4
 863: DOUBLE
 864: GREATEREQUAL
 865: IFFALSE 873
 867: LD_INT 5
 869: DOUBLE
 870: LESSEQUAL
 871: IFTRUE 875
 873: GO 886
 875: POP
// file = colors-spring.txt ; 6 .. 8 :
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: LD_STRING colors-spring.txt
 883: ST_TO_ADDR
 884: GO 937
 886: LD_INT 6
 888: DOUBLE
 889: GREATEREQUAL
 890: IFFALSE 898
 892: LD_INT 8
 894: DOUBLE
 895: LESSEQUAL
 896: IFTRUE 900
 898: GO 911
 900: POP
// file = colors-summer.txt ; 9 .. 11 :
 901: LD_ADDR_VAR 0 2
 905: PUSH
 906: LD_STRING colors-summer.txt
 908: ST_TO_ADDR
 909: GO 937
 911: LD_INT 9
 913: DOUBLE
 914: GREATEREQUAL
 915: IFFALSE 923
 917: LD_INT 11
 919: DOUBLE
 920: LESSEQUAL
 921: IFTRUE 925
 923: GO 936
 925: POP
// file = colors-autumn.txt ; end ;
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: LD_STRING colors-autumn.txt
 933: ST_TO_ADDR
 934: GO 937
 936: POP
// LoadColorsTxt ( file ) ;
 937: LD_VAR 0 2
 941: PPUSH
 942: CALL_OW 544
// end ;
 946: LD_VAR 0 1
 950: RET
// export function TestColor ; var i ; begin
 951: LD_INT 0
 953: PPUSH
 954: PPUSH
// i = 1 ;
 955: LD_ADDR_VAR 0 2
 959: PUSH
 960: LD_INT 1
 962: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 963: LD_INT 35
 965: PPUSH
 966: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 970: LD_STRING colors-spring.txt
 972: PUSH
 973: LD_STRING colors-summer.txt
 975: PUSH
 976: LD_STRING colors-autumn.txt
 978: PUSH
 979: LD_STRING colors.txt
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 4
 995: MOD
 996: PUSH
 997: LD_INT 1
 999: PLUS
1000: ARRAY
1001: PPUSH
1002: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
1006: LD_ADDR_OWVAR 47
1010: PUSH
1011: LD_STRING Wiosna
1013: PUSH
1014: LD_STRING Lato
1016: PUSH
1017: LD_STRING Jesien
1019: PUSH
1020: LD_STRING Zima
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_VAR 0 2
1033: PUSH
1034: LD_INT 4
1036: MOD
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: ST_TO_ADDR
// i := i + 1 ;
1043: LD_ADDR_VAR 0 2
1047: PUSH
1048: LD_VAR 0 2
1052: PUSH
1053: LD_INT 1
1055: PLUS
1056: ST_TO_ADDR
// end until false ;
1057: LD_INT 0
1059: IFFALSE 963
// end ;
1061: LD_VAR 0 1
1065: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
1066: LD_INT 0
1068: PPUSH
// if x1 = x2 and y1 > y2 then
1069: LD_VAR 0 1
1073: PUSH
1074: LD_VAR 0 3
1078: EQUAL
1079: PUSH
1080: LD_VAR 0 2
1084: PUSH
1085: LD_VAR 0 4
1089: GREATER
1090: AND
1091: IFFALSE 1101
// result := 0 ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_INT 0
1100: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
1101: LD_VAR 0 1
1105: PUSH
1106: LD_VAR 0 3
1110: LESS
1111: PUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_VAR 0 4
1121: EQUAL
1122: AND
1123: IFFALSE 1133
// result := 1 ;
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_INT 1
1132: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
1133: LD_VAR 0 1
1137: PUSH
1138: LD_VAR 0 3
1142: LESS
1143: PUSH
1144: LD_VAR 0 2
1148: PUSH
1149: LD_VAR 0 4
1153: LESS
1154: AND
1155: IFFALSE 1165
// result := 2 ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 2
1164: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
1165: LD_VAR 0 1
1169: PUSH
1170: LD_VAR 0 3
1174: EQUAL
1175: PUSH
1176: LD_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: LESS
1186: AND
1187: IFFALSE 1197
// result := 3 ;
1189: LD_ADDR_VAR 0 5
1193: PUSH
1194: LD_INT 3
1196: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
1197: LD_VAR 0 1
1201: PUSH
1202: LD_VAR 0 3
1206: GREATER
1207: PUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_VAR 0 4
1217: EQUAL
1218: AND
1219: IFFALSE 1229
// result := 4 ;
1221: LD_ADDR_VAR 0 5
1225: PUSH
1226: LD_INT 4
1228: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
1229: LD_VAR 0 1
1233: PUSH
1234: LD_VAR 0 3
1238: GREATER
1239: PUSH
1240: LD_VAR 0 2
1244: PUSH
1245: LD_VAR 0 4
1249: GREATER
1250: AND
1251: IFFALSE 1261
// result := 5 ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_INT 5
1260: ST_TO_ADDR
// end ;
1261: LD_VAR 0 5
1265: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
1266: LD_INT 0
1268: PPUSH
1269: PPUSH
1270: PPUSH
1271: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_INT 22
1279: PUSH
1280: LD_OWVAR 2
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 21
1291: PUSH
1292: LD_INT 1
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: ST_TO_ADDR
// for i = 1 to amount do
1308: LD_ADDR_VAR 0 3
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 1
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1405
// begin pep := rand ( 1 , team ) ;
1326: LD_ADDR_VAR 0 5
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 4
1338: PPUSH
1339: CALL_OW 12
1343: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1344: LD_VAR 0 4
1348: PUSH
1349: LD_VAR 0 5
1353: ARRAY
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 4
1360: PPUSH
1361: CALL_OW 12
1365: PPUSH
1366: LD_INT 1000
1368: PPUSH
1369: LD_INT 10000
1371: PPUSH
1372: CALL_OW 12
1376: PPUSH
1377: CALL_OW 492
// team := team diff team [ pep ] ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_VAR 0 4
1390: PUSH
1391: LD_VAR 0 4
1395: PUSH
1396: LD_VAR 0 5
1400: ARRAY
1401: DIFF
1402: ST_TO_ADDR
// end ;
1403: GO 1323
1405: POP
1406: POP
// end ;
1407: LD_VAR 0 2
1411: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
1418: PPUSH
1419: PPUSH
1420: PPUSH
1421: PPUSH
1422: PPUSH
1423: PPUSH
1424: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1425: LD_ADDR_VAR 0 5
1429: PUSH
1430: LD_INT 7
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 517
1440: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1441: LD_ADDR_VAR 0 6
1445: PUSH
1446: LD_INT 6
1448: PPUSH
1449: LD_INT 0
1451: PPUSH
1452: CALL_OW 517
1456: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1457: LD_ADDR_VAR 0 3
1461: PUSH
1462: DOUBLE
1463: LD_INT 1
1465: DEC
1466: ST_TO_ADDR
1467: LD_VAR 0 5
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PUSH
1476: FOR_TO
1477: IFFALSE 1559
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1479: LD_ADDR_VAR 0 7
1483: PUSH
1484: LD_VAR 0 7
1488: PPUSH
1489: LD_VAR 0 7
1493: PUSH
1494: LD_INT 1
1496: PLUS
1497: PPUSH
1498: LD_VAR 0 5
1502: PUSH
1503: LD_INT 1
1505: ARRAY
1506: PUSH
1507: LD_VAR 0 3
1511: ARRAY
1512: PPUSH
1513: CALL_OW 1
1517: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1518: LD_ADDR_VAR 0 7
1522: PUSH
1523: LD_VAR 0 7
1527: PPUSH
1528: LD_VAR 0 7
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 5
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PUSH
1546: LD_VAR 0 3
1550: ARRAY
1551: PPUSH
1552: CALL_OW 1
1556: ST_TO_ADDR
// end ;
1557: GO 1476
1559: POP
1560: POP
// uc_side := 4 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 4
1568: ST_TO_ADDR
// case strenght of 1 .. 10 :
1569: LD_VAR 0 1
1573: PUSH
1574: LD_INT 1
1576: DOUBLE
1577: GREATEREQUAL
1578: IFFALSE 1586
1580: LD_INT 10
1582: DOUBLE
1583: LESSEQUAL
1584: IFTRUE 1588
1586: GO 1650
1588: POP
// begin uc_nation := 0 ;
1589: LD_ADDR_OWVAR 21
1593: PUSH
1594: LD_INT 0
1596: ST_TO_ADDR
// for i = 1 to 20 do
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 20
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1646
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1613: LD_INT 0
1615: PPUSH
1616: LD_INT 15
1618: PPUSH
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 380
// result := result ^ CreateHuman ;
1628: LD_ADDR_VAR 0 2
1632: PUSH
1633: LD_VAR 0 2
1637: PUSH
1638: CALL_OW 44
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1610
1646: POP
1647: POP
// end ; 11 .. 40 :
1648: GO 1837
1650: LD_INT 11
1652: DOUBLE
1653: GREATEREQUAL
1654: IFFALSE 1662
1656: LD_INT 40
1658: DOUBLE
1659: LESSEQUAL
1660: IFTRUE 1664
1662: GO 1743
1664: POP
// begin uc_nation := 1 ;
1665: LD_ADDR_OWVAR 21
1669: PUSH
1670: LD_INT 1
1672: ST_TO_ADDR
// for i = 1 to 20 do
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 20
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1739
// begin vc_chassis := us_medium_tracked ;
1689: LD_ADDR_OWVAR 37
1693: PUSH
1694: LD_INT 3
1696: ST_TO_ADDR
// vc_engine := engine_siberite ;
1697: LD_ADDR_OWVAR 39
1701: PUSH
1702: LD_INT 3
1704: ST_TO_ADDR
// vc_control := control_computer ;
1705: LD_ADDR_OWVAR 38
1709: PUSH
1710: LD_INT 3
1712: ST_TO_ADDR
// vc_weapon := us_laser ;
1713: LD_ADDR_OWVAR 40
1717: PUSH
1718: LD_INT 9
1720: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: LD_VAR 0 2
1730: PUSH
1731: CALL_OW 45
1735: ADD
1736: ST_TO_ADDR
// end ;
1737: GO 1686
1739: POP
1740: POP
// end ; 41 .. 100 :
1741: GO 1837
1743: LD_INT 41
1745: DOUBLE
1746: GREATEREQUAL
1747: IFFALSE 1755
1749: LD_INT 100
1751: DOUBLE
1752: LESSEQUAL
1753: IFTRUE 1757
1755: GO 1836
1757: POP
// begin uc_nation := 1 ;
1758: LD_ADDR_OWVAR 21
1762: PUSH
1763: LD_INT 1
1765: ST_TO_ADDR
// for i = 1 to 20 do
1766: LD_ADDR_VAR 0 3
1770: PUSH
1771: DOUBLE
1772: LD_INT 1
1774: DEC
1775: ST_TO_ADDR
1776: LD_INT 20
1778: PUSH
1779: FOR_TO
1780: IFFALSE 1832
// begin vc_chassis := us_morphling ;
1782: LD_ADDR_OWVAR 37
1786: PUSH
1787: LD_INT 5
1789: ST_TO_ADDR
// vc_engine := engine_siberite ;
1790: LD_ADDR_OWVAR 39
1794: PUSH
1795: LD_INT 3
1797: ST_TO_ADDR
// vc_control := control_computer ;
1798: LD_ADDR_OWVAR 38
1802: PUSH
1803: LD_INT 3
1805: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1806: LD_ADDR_OWVAR 40
1810: PUSH
1811: LD_INT 10
1813: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: LD_VAR 0 2
1823: PUSH
1824: CALL_OW 45
1828: ADD
1829: ST_TO_ADDR
// end ;
1830: GO 1779
1832: POP
1833: POP
// end ; end ;
1834: GO 1837
1836: POP
// for i in result do
1837: LD_ADDR_VAR 0 3
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: FOR_IN
1848: IFFALSE 2065
// begin x := base_area [ 1 ] [ 1 ] ;
1850: LD_ADDR_VAR 0 9
1854: PUSH
1855: LD_VAR 0 6
1859: PUSH
1860: LD_INT 1
1862: ARRAY
1863: PUSH
1864: LD_INT 1
1866: ARRAY
1867: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1868: LD_ADDR_VAR 0 10
1872: PUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_INT 2
1880: ARRAY
1881: PUSH
1882: LD_INT 1
1884: ARRAY
1885: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1886: LD_ADDR_VAR 0 8
1890: PUSH
1891: LD_VAR 0 7
1895: PPUSH
1896: LD_VAR 0 9
1900: PPUSH
1901: LD_VAR 0 10
1905: PPUSH
1906: CALL_OW 439
1910: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1911: LD_VAR 0 3
1915: PPUSH
1916: LD_VAR 0 9
1920: PPUSH
1921: LD_VAR 0 10
1925: PPUSH
1926: LD_VAR 0 8
1930: PUSH
1931: LD_INT 1
1933: ARRAY
1934: PPUSH
1935: LD_VAR 0 8
1939: PUSH
1940: LD_INT 2
1942: ARRAY
1943: PPUSH
1944: CALL 1066 0 4
1948: PPUSH
1949: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_VAR 0 9
1962: PPUSH
1963: LD_VAR 0 10
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: CALL_OW 48
// ComHold ( i ) ;
1975: LD_VAR 0 3
1979: PPUSH
1980: CALL_OW 140
// for c = 1 to 2 do
1984: LD_ADDR_VAR 0 11
1988: PUSH
1989: DOUBLE
1990: LD_INT 1
1992: DEC
1993: ST_TO_ADDR
1994: LD_INT 2
1996: PUSH
1997: FOR_TO
1998: IFFALSE 2061
// begin tmp := base_area [ c ] ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_VAR 0 6
2009: PUSH
2010: LD_VAR 0 11
2014: ARRAY
2015: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
2016: LD_ADDR_VAR 0 12
2020: PUSH
2021: LD_VAR 0 12
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: CALL_OW 3
2033: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
2034: LD_ADDR_VAR 0 6
2038: PUSH
2039: LD_VAR 0 6
2043: PPUSH
2044: LD_VAR 0 11
2048: PPUSH
2049: LD_VAR 0 12
2053: PPUSH
2054: CALL_OW 1
2058: ST_TO_ADDR
// end ;
2059: GO 1997
2061: POP
2062: POP
// end ;
2063: GO 1847
2065: POP
2066: POP
// end ;
2067: LD_VAR 0 2
2071: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
2072: LD_INT 0
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
// if graveyard = 0 then
2079: LD_EXP 8
2083: PUSH
2084: LD_INT 0
2086: EQUAL
2087: IFFALSE 2091
// exit ;
2089: GO 2254
// i := rand ( 1 , graveyard ) ;
2091: LD_ADDR_VAR 0 2
2095: PUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_EXP 8
2103: PPUSH
2104: CALL_OW 12
2108: ST_TO_ADDR
// un := graveyard [ i ] ;
2109: LD_ADDR_VAR 0 4
2113: PUSH
2114: LD_EXP 8
2118: PUSH
2119: LD_VAR 0 2
2123: ARRAY
2124: ST_TO_ADDR
// for c in playerSquad do
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 12
2134: PUSH
2135: FOR_IN
2136: IFFALSE 2172
// if un = c [ 1 ] then
2138: LD_VAR 0 4
2142: PUSH
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 1
2150: ARRAY
2151: EQUAL
2152: IFFALSE 2170
// begin new := c [ 2 ] ;
2154: LD_ADDR_VAR 0 5
2158: PUSH
2159: LD_VAR 0 3
2163: PUSH
2164: LD_INT 2
2166: ARRAY
2167: ST_TO_ADDR
// break ;
2168: GO 2172
// end ;
2170: GO 2135
2172: POP
2173: POP
// uc_side := your_side ;
2174: LD_ADDR_OWVAR 20
2178: PUSH
2179: LD_OWVAR 2
2183: ST_TO_ADDR
// uc_nation := playerNation ;
2184: LD_ADDR_OWVAR 21
2188: PUSH
2189: LD_EXP 6
2193: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
2194: LD_ADDR_VAR 0 4
2198: PUSH
2199: LD_VAR 0 5
2203: PPUSH
2204: CALL_OW 34
2208: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
2209: LD_VAR 0 4
2213: PPUSH
2214: LD_EXP 9
2218: PPUSH
2219: LD_EXP 10
2223: PPUSH
2224: LD_INT 10
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
2234: LD_ADDR_EXP 8
2238: PUSH
2239: LD_EXP 8
2243: PPUSH
2244: LD_VAR 0 2
2248: PPUSH
2249: CALL_OW 3
2253: ST_TO_ADDR
// end ;
2254: LD_VAR 0 1
2258: RET
// export function ComEspace ( un ) ; begin
2259: LD_INT 0
2261: PPUSH
// if not IsInArea ( un , zoneOut ) then
2262: LD_VAR 0 1
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: CALL_OW 308
2274: NOT
2275: IFFALSE 2291
// ComMoveToArea ( un , zoneOut ) else
2277: LD_VAR 0 1
2281: PPUSH
2282: LD_INT 4
2284: PPUSH
2285: CALL_OW 113
2289: GO 2300
// RemoveUnit ( un ) ;
2291: LD_VAR 0 1
2295: PPUSH
2296: CALL_OW 64
// end ;
2300: LD_VAR 0 2
2304: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
2305: LD_INT 0
2307: PPUSH
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// list := AreaToList ( area , 0 ) ;
2312: LD_ADDR_VAR 0 4
2316: PUSH
2317: LD_VAR 0 2
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 517
2329: ST_TO_ADDR
// if not list then
2330: LD_VAR 0 4
2334: NOT
2335: IFFALSE 2339
// exit ;
2337: GO 2501
// for i = 1 to list do
2339: LD_ADDR_VAR 0 6
2343: PUSH
2344: DOUBLE
2345: LD_INT 1
2347: DEC
2348: ST_TO_ADDR
2349: LD_VAR 0 4
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2437
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2357: LD_ADDR_VAR 0 5
2361: PUSH
2362: LD_VAR 0 5
2366: PPUSH
2367: LD_VAR 0 5
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PUSH
2385: LD_VAR 0 6
2389: ARRAY
2390: PPUSH
2391: CALL_OW 1
2395: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2396: LD_ADDR_VAR 0 5
2400: PUSH
2401: LD_VAR 0 5
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_INT 1
2413: PLUS
2414: PPUSH
2415: LD_VAR 0 4
2419: PUSH
2420: LD_INT 2
2422: ARRAY
2423: PUSH
2424: LD_VAR 0 6
2428: ARRAY
2429: PPUSH
2430: CALL_OW 1
2434: ST_TO_ADDR
// end ;
2435: GO 2354
2437: POP
2438: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2439: LD_ADDR_VAR 0 7
2443: PUSH
2444: LD_VAR 0 5
2448: PPUSH
2449: LD_VAR 0 1
2453: PPUSH
2454: CALL_OW 250
2458: PPUSH
2459: LD_VAR 0 1
2463: PPUSH
2464: CALL_OW 251
2468: PPUSH
2469: CALL_OW 439
2473: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_VAR 0 7
2483: PUSH
2484: LD_INT 1
2486: ARRAY
2487: PPUSH
2488: LD_VAR 0 7
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: CALL_OW 111
// end ;
2501: LD_VAR 0 3
2505: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2506: LD_INT 0
2508: PPUSH
2509: PPUSH
2510: PPUSH
// timer := rand ( 2 , 5 ) ;
2511: LD_ADDR_VAR 0 4
2515: PUSH
2516: LD_INT 2
2518: PPUSH
2519: LD_INT 5
2521: PPUSH
2522: CALL_OW 12
2526: ST_TO_ADDR
// while ( timer > 0 ) do
2527: LD_VAR 0 4
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: IFFALSE 2574
// begin SetUnitDisplayNumber ( un , timer ) ;
2537: LD_VAR 0 1
2541: PPUSH
2542: LD_VAR 0 4
2546: PPUSH
2547: CALL_OW 505
// timer := timer - 1 ;
2551: LD_ADDR_VAR 0 4
2555: PUSH
2556: LD_VAR 0 4
2560: PUSH
2561: LD_INT 1
2563: MINUS
2564: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// end ;
2572: GO 2527
// if timer = 0 then
2574: LD_VAR 0 4
2578: PUSH
2579: LD_INT 0
2581: EQUAL
2582: IFFALSE 2631
// for i = 1 to 3 do
2584: LD_ADDR_VAR 0 3
2588: PUSH
2589: DOUBLE
2590: LD_INT 1
2592: DEC
2593: ST_TO_ADDR
2594: LD_INT 3
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2629
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 250
2609: PPUSH
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 251
2619: PPUSH
2620: LD_INT 10
2622: PPUSH
2623: CALL_OW 453
2627: GO 2597
2629: POP
2630: POP
// end ;
2631: LD_VAR 0 2
2635: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2636: LD_INT 0
2638: PPUSH
// if unit in unreachableList then
2639: LD_VAR 0 1
2643: PUSH
2644: LD_EXP 18
2648: IN
2649: IFFALSE 2667
// unreachableList := unreachableList diff unit ;
2651: LD_ADDR_EXP 18
2655: PUSH
2656: LD_EXP 18
2660: PUSH
2661: LD_VAR 0 1
2665: DIFF
2666: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2667: LD_VAR 0 1
2671: PPUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_VAR 0 3
2681: PPUSH
2682: CALL_OW 428
2686: PPUSH
2687: CALL_OW 115
// Wait ( 1 ) ;
2691: LD_INT 1
2693: PPUSH
2694: CALL_OW 67
// if unit in unreachableList then
2698: LD_VAR 0 1
2702: PUSH
2703: LD_EXP 18
2707: IN
2708: IFFALSE 2720
// result := false else
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
2718: GO 2728
// result := true ;
2720: LD_ADDR_VAR 0 4
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// end ;
2728: LD_VAR 0 4
2732: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2741: LD_ADDR_VAR 0 4
2745: PUSH
2746: LD_INT 81
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 255
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PPUSH
2763: CALL_OW 69
2767: ST_TO_ADDR
// if not enemy then
2768: LD_VAR 0 4
2772: NOT
2773: IFFALSE 2777
// exit ;
2775: GO 2927
// if UnitFilter ( enemy , [ f_occupied ] ) then
2777: LD_VAR 0 4
2781: PPUSH
2782: LD_INT 59
2784: PUSH
2785: EMPTY
2786: LIST
2787: PPUSH
2788: CALL_OW 72
2792: IFFALSE 2903
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_VAR 0 4
2803: PPUSH
2804: LD_INT 59
2806: PUSH
2807: EMPTY
2808: LIST
2809: PPUSH
2810: CALL_OW 72
2814: PPUSH
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL_OW 74
2824: ST_TO_ADDR
// x := GetX ( t ) ;
2825: LD_ADDR_VAR 0 6
2829: PUSH
2830: LD_VAR 0 5
2834: PPUSH
2835: CALL_OW 250
2839: ST_TO_ADDR
// y := GetY ( t ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_VAR 0 5
2849: PPUSH
2850: CALL_OW 251
2854: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2855: LD_VAR 0 1
2859: PPUSH
2860: LD_VAR 0 6
2864: PPUSH
2865: LD_VAR 0 7
2869: PPUSH
2870: CALL 2636 0 3
2874: NOT
2875: IFFALSE 2901
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2877: LD_VAR 0 1
2881: PPUSH
2882: LD_VAR 0 4
2886: PPUSH
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 74
2896: PPUSH
2897: CALL_OW 115
// end else
2901: GO 2927
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 4
2912: PPUSH
2913: LD_VAR 0 1
2917: PPUSH
2918: CALL_OW 74
2922: PPUSH
2923: CALL_OW 115
// end ; end_of_file
2927: LD_VAR 0 2
2931: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; export ar_bio_bomb , us_artillery , us_hack , ar_miner , ru_radar ; end_of_file export function InitMessageWindow ; begin
2932: LD_INT 0
2934: PPUSH
// Msg_Welcome ;
2935: CALL 2952 0 0
// Msg_Nation ;
2939: CALL 2967 0 0
// Msg_Difficulty ;
2943: CALL 3060 0 0
// end ;
2947: LD_VAR 0 1
2951: RET
// export function Msg_Welcome ; begin
2952: LD_INT 0
2954: PPUSH
// Query ( StartQuery ) ;
2955: LD_STRING StartQuery
2957: PPUSH
2958: CALL_OW 97
// end ;
2962: LD_VAR 0 1
2966: RET
// export function Msg_Nation ; begin
2967: LD_INT 0
2969: PPUSH
// case Query ( SelectNat ) of 1 :
2970: LD_STRING SelectNat
2972: PPUSH
2973: CALL_OW 97
2977: PUSH
2978: LD_INT 1
2980: DOUBLE
2981: EQUAL
2982: IFTRUE 2986
2984: GO 2997
2986: POP
// playerNation := 1 ; 2 :
2987: LD_ADDR_EXP 6
2991: PUSH
2992: LD_INT 1
2994: ST_TO_ADDR
2995: GO 3055
2997: LD_INT 2
2999: DOUBLE
3000: EQUAL
3001: IFTRUE 3005
3003: GO 3016
3005: POP
// playerNation := 2 ; 3 :
3006: LD_ADDR_EXP 6
3010: PUSH
3011: LD_INT 2
3013: ST_TO_ADDR
3014: GO 3055
3016: LD_INT 3
3018: DOUBLE
3019: EQUAL
3020: IFTRUE 3024
3022: GO 3035
3024: POP
// playerNation := 3 ; 4 :
3025: LD_ADDR_EXP 6
3029: PUSH
3030: LD_INT 3
3032: ST_TO_ADDR
3033: GO 3055
3035: LD_INT 4
3037: DOUBLE
3038: EQUAL
3039: IFTRUE 3043
3041: GO 3054
3043: POP
// playerNation := 0 ; end ;
3044: LD_ADDR_EXP 6
3048: PUSH
3049: LD_INT 0
3051: ST_TO_ADDR
3052: GO 3055
3054: POP
// end ;
3055: LD_VAR 0 1
3059: RET
// export function Msg_Difficulty ; begin
3060: LD_INT 0
3062: PPUSH
// case Query ( SelectDif ) of 1 :
3063: LD_STRING SelectDif
3065: PPUSH
3066: CALL_OW 97
3070: PUSH
3071: LD_INT 1
3073: DOUBLE
3074: EQUAL
3075: IFTRUE 3079
3077: GO 3090
3079: POP
// difficultyLevel := 1 ; 2 :
3080: LD_ADDR_EXP 3
3084: PUSH
3085: LD_INT 1
3087: ST_TO_ADDR
3088: GO 3148
3090: LD_INT 2
3092: DOUBLE
3093: EQUAL
3094: IFTRUE 3098
3096: GO 3109
3098: POP
// difficultyLevel := 2 ; 3 :
3099: LD_ADDR_EXP 3
3103: PUSH
3104: LD_INT 2
3106: ST_TO_ADDR
3107: GO 3148
3109: LD_INT 3
3111: DOUBLE
3112: EQUAL
3113: IFTRUE 3117
3115: GO 3128
3117: POP
// difficultyLevel := 3 ; 4 :
3118: LD_ADDR_EXP 3
3122: PUSH
3123: LD_INT 3
3125: ST_TO_ADDR
3126: GO 3148
3128: LD_INT 4
3130: DOUBLE
3131: EQUAL
3132: IFTRUE 3136
3134: GO 3147
3136: POP
// difficultyLevel := 4 ; end ;
3137: LD_ADDR_EXP 3
3141: PUSH
3142: LD_INT 4
3144: ST_TO_ADDR
3145: GO 3148
3147: POP
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function InitGame ; begin
3153: LD_INT 0
3155: PPUSH
// RandomizeAll ;
3156: CALL_OW 11
// LoadColors ;
3160: CALL 821 0 0
// if isEditor then
3164: LD_INT 1
3166: IFFALSE 3178
// debug := true else
3168: LD_ADDR_EXP 1
3172: PUSH
3173: LD_INT 1
3175: ST_TO_ADDR
3176: GO 3186
// debug := false ;
3178: LD_ADDR_EXP 1
3182: PUSH
3183: LD_INT 0
3185: ST_TO_ADDR
// ar_bio_bomb := 91 ;
3186: LD_ADDR_EXP 13
3190: PUSH
3191: LD_INT 91
3193: ST_TO_ADDR
// us_artillery := 97 ;
3194: LD_ADDR_EXP 14
3198: PUSH
3199: LD_INT 97
3201: ST_TO_ADDR
// ru_radar := 98 ;
3202: LD_ADDR_EXP 17
3206: PUSH
3207: LD_INT 98
3209: ST_TO_ADDR
// game_started := false ;
3210: LD_ADDR_EXP 7
3214: PUSH
3215: LD_INT 0
3217: ST_TO_ADDR
// points := 0 ;
3218: LD_ADDR_EXP 2
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// waveNumber := 0 ;
3226: LD_ADDR_EXP 5
3230: PUSH
3231: LD_INT 0
3233: ST_TO_ADDR
// timeToNextAttack := 0 ;
3234: LD_ADDR_EXP 4
3238: PUSH
3239: LD_INT 0
3241: ST_TO_ADDR
// graveyard := [ ] ;
3242: LD_ADDR_EXP 8
3246: PUSH
3247: EMPTY
3248: ST_TO_ADDR
// base_x := 1 ;
3249: LD_ADDR_EXP 9
3253: PUSH
3254: LD_INT 1
3256: ST_TO_ADDR
// base_y := 1 ;
3257: LD_ADDR_EXP 10
3261: PUSH
3262: LD_INT 1
3264: ST_TO_ADDR
// if difficultyLevel > 2 then
3265: LD_EXP 3
3269: PUSH
3270: LD_INT 2
3272: GREATER
3273: IFFALSE 3288
// SetTech ( 5 , 7 , state_researched ) ;
3275: LD_INT 5
3277: PPUSH
3278: LD_INT 7
3280: PPUSH
3281: LD_INT 2
3283: PPUSH
3284: CALL_OW 322
// if not playerNation then
3288: LD_EXP 6
3292: NOT
3293: IFFALSE 3319
// begin points := 100 ;
3295: LD_ADDR_EXP 2
3299: PUSH
3300: LD_INT 100
3302: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
3303: LD_ADDR_EXP 6
3307: PUSH
3308: LD_INT 1
3310: PPUSH
3311: LD_INT 3
3313: PPUSH
3314: CALL_OW 12
3318: ST_TO_ADDR
// end ; your_side := playerNation ;
3319: LD_ADDR_OWVAR 2
3323: PUSH
3324: LD_EXP 6
3328: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
3329: LD_OWVAR 2
3333: PPUSH
3334: LD_INT 4
3336: PPUSH
3337: CALL_OW 343
// PrepareResources ( [ [ 10 , 10 , 8 , 6 ] [ difficultyLevel ] , [ 3 , 3 , 2 , 2 ] [ difficultyLevel ] , [ 2 , 2 , 1 , 0 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
3341: LD_INT 10
3343: PUSH
3344: LD_INT 10
3346: PUSH
3347: LD_INT 8
3349: PUSH
3350: LD_INT 6
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_EXP 3
3363: ARRAY
3364: PUSH
3365: LD_INT 3
3367: PUSH
3368: LD_INT 3
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: PUSH
3383: LD_EXP 3
3387: ARRAY
3388: PUSH
3389: LD_INT 2
3391: PUSH
3392: LD_INT 2
3394: PUSH
3395: LD_INT 1
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: LD_EXP 3
3411: ARRAY
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: PPUSH
3418: LD_INT 1
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 3
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: PPUSH
3432: LD_INT 88
3434: PPUSH
3435: LD_INT 76
3437: PPUSH
3438: LD_INT 6
3440: PPUSH
3441: CALL 630 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
3445: LD_EXP 6
3449: PPUSH
3450: LD_INT 9
3452: PUSH
3453: LD_INT 7
3455: PUSH
3456: LD_INT 5
3458: PUSH
3459: LD_INT 3
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: PUSH
3468: LD_EXP 3
3472: ARRAY
3473: PPUSH
3474: LD_INT 24
3476: PUSH
3477: LD_INT 16
3479: PUSH
3480: LD_INT 12
3482: PUSH
3483: LD_INT 8
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: PUSH
3492: LD_EXP 3
3496: ARRAY
3497: PPUSH
3498: LD_INT 88
3500: PPUSH
3501: LD_INT 76
3503: PPUSH
3504: CALL 339 0 5
// CenterNowOnXY ( 88 , 76 ) ;
3508: LD_INT 88
3510: PPUSH
3511: LD_INT 76
3513: PPUSH
3514: CALL_OW 86
// if debug then
3518: LD_EXP 1
3522: IFFALSE 3533
// FogOff ( your_side ) ;
3524: LD_OWVAR 2
3528: PPUSH
3529: CALL_OW 344
// end ;
3533: LD_VAR 0 1
3537: RET
// every 0 0$01 trigger game_started do var i ;
3538: LD_EXP 7
3542: IFFALSE 3776
3544: GO 3546
3546: DISABLE
3547: LD_INT 0
3549: PPUSH
// begin while ( game_started ) do
3550: LD_EXP 7
3554: IFFALSE 3776
// begin if FilterAllUnits ( [ f_side , 7 ] ) = 0 and timeToNextAttack <= 0 0$00 then
3556: LD_INT 22
3558: PUSH
3559: LD_INT 7
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PPUSH
3566: CALL_OW 69
3570: PUSH
3571: LD_INT 0
3573: EQUAL
3574: PUSH
3575: LD_EXP 4
3579: PUSH
3580: LD_INT 0
3582: LESSEQUAL
3583: AND
3584: IFFALSE 3767
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3586: LD_INT 22
3588: PUSH
3589: LD_INT 4
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PPUSH
3596: CALL_OW 69
3600: IFFALSE 3638
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3602: LD_ADDR_VAR 0 1
3606: PUSH
3607: LD_INT 22
3609: PUSH
3610: LD_INT 4
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: PPUSH
3617: CALL_OW 69
3621: PUSH
3622: FOR_IN
3623: IFFALSE 3636
// RemoveUnit ( i ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: CALL_OW 64
3634: GO 3622
3636: POP
3637: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3638: LD_EXP 5
3642: PUSH
3643: LD_INT 3
3645: MOD
3646: PUSH
3647: LD_INT 0
3649: EQUAL
3650: PUSH
3651: LD_EXP 5
3655: PUSH
3656: LD_INT 10
3658: MOD
3659: PUSH
3660: LD_INT 0
3662: EQUAL
3663: OR
3664: PUSH
3665: LD_EXP 5
3669: PUSH
3670: LD_INT 0
3672: GREATER
3673: AND
3674: IFFALSE 3680
// InitBonus ;
3676: CALL 9723 0 0
// if waveNumber mod 10 = 0 then
3680: LD_EXP 5
3684: PUSH
3685: LD_INT 10
3687: MOD
3688: PUSH
3689: LD_INT 0
3691: EQUAL
3692: IFFALSE 3698
// SaveForQuickRestart ;
3694: CALL_OW 22
// if waveNumber = 100 then
3698: LD_EXP 5
3702: PUSH
3703: LD_INT 100
3705: EQUAL
3706: IFFALSE 3719
// begin FogOff ( your_side ) ;
3708: LD_OWVAR 2
3712: PPUSH
3713: CALL_OW 344
// break ;
3717: GO 3776
// end ; timeToNextAttack := rand ( 2 2$00 , 4 4$00 ) ;
3719: LD_ADDR_EXP 4
3723: PUSH
3724: LD_INT 4200
3726: PPUSH
3727: LD_INT 8400
3729: PPUSH
3730: CALL_OW 12
3734: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3735: LD_EXP 4
3739: PPUSH
3740: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3744: LD_ADDR_EXP 5
3748: PUSH
3749: LD_EXP 5
3753: PUSH
3754: LD_INT 1
3756: PLUS
3757: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3758: LD_EXP 5
3762: PPUSH
3763: CALL 4714 0 1
// end ; Wait ( 0 0$01 ) ;
3767: LD_INT 35
3769: PPUSH
3770: CALL_OW 67
// end ;
3774: GO 3550
// end ;
3776: PPOPN 1
3778: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3779: LD_EXP 4
3783: PUSH
3784: LD_INT 0
3786: GREATER
3787: IFFALSE 3807
3789: GO 3791
3791: DISABLE
// begin enable ;
3792: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3793: LD_ADDR_EXP 4
3797: PUSH
3798: LD_EXP 4
3802: PUSH
3803: LD_INT 35
3805: MINUS
3806: ST_TO_ADDR
// end ; end_of_file
3807: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3808: LD_VAR 0 1
3812: PUSH
3813: LD_EXP 18
3817: IN
3818: NOT
3819: IFFALSE 3850
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3821: LD_ADDR_EXP 18
3825: PUSH
3826: LD_EXP 18
3830: PPUSH
3831: LD_EXP 18
3835: PUSH
3836: LD_INT 1
3838: PLUS
3839: PPUSH
3840: LD_VAR 0 1
3844: PPUSH
3845: CALL_OW 2
3849: ST_TO_ADDR
// end ;
3850: PPOPN 1
3852: END
// on UnitDestroyed ( un ) do begin if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3853: LD_VAR 0 1
3857: PPUSH
3858: CALL_OW 255
3862: PUSH
3863: LD_OWVAR 2
3867: EQUAL
3868: PUSH
3869: LD_VAR 0 1
3873: PPUSH
3874: CALL_OW 247
3878: PUSH
3879: LD_INT 1
3881: EQUAL
3882: AND
3883: IFFALSE 3914
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3885: LD_ADDR_EXP 8
3889: PUSH
3890: LD_EXP 8
3894: PPUSH
3895: LD_EXP 8
3899: PUSH
3900: LD_INT 1
3902: PLUS
3903: PPUSH
3904: LD_VAR 0 1
3908: PPUSH
3909: CALL_OW 2
3913: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3914: LD_VAR 0 1
3918: PPUSH
3919: CALL_OW 255
3923: PUSH
3924: LD_INT 7
3926: EQUAL
3927: IFFALSE 4301
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3929: LD_VAR 0 1
3933: PUSH
3934: LD_INT 34
3936: PUSH
3937: LD_INT 91
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PPUSH
3944: CALL_OW 69
3948: IN
3949: IFFALSE 3994
// begin if Rand ( 1 , 100 ) <= 70 then
3951: LD_INT 1
3953: PPUSH
3954: LD_INT 100
3956: PPUSH
3957: CALL_OW 12
3961: PUSH
3962: LD_INT 70
3964: LESSEQUAL
3965: IFFALSE 3994
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 250
3976: PPUSH
3977: LD_VAR 0 1
3981: PPUSH
3982: CALL_OW 251
3986: PPUSH
3987: LD_INT 10
3989: PPUSH
3990: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 247
4003: PUSH
4004: LD_INT 1
4006: DOUBLE
4007: EQUAL
4008: IFTRUE 4012
4010: GO 4146
4012: POP
// begin case GetClass ( un ) of class_apeman :
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL_OW 257
4022: PUSH
4023: LD_INT 12
4025: DOUBLE
4026: EQUAL
4027: IFTRUE 4031
4029: GO 4041
4031: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
4032: LD_INT 2
4034: PPUSH
4035: CALL 797 0 1
4039: GO 4144
4041: LD_INT 15
4043: DOUBLE
4044: EQUAL
4045: IFTRUE 4049
4047: GO 4059
4049: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
4050: LD_INT 5
4052: PPUSH
4053: CALL 797 0 1
4057: GO 4144
4059: LD_INT 17
4061: DOUBLE
4062: EQUAL
4063: IFTRUE 4067
4065: GO 4077
4067: POP
// AddPoints ( 30 ) ; class_soldier :
4068: LD_INT 30
4070: PPUSH
4071: CALL 797 0 1
4075: GO 4144
4077: LD_INT 1
4079: DOUBLE
4080: EQUAL
4081: IFTRUE 4085
4083: GO 4095
4085: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
4086: LD_INT 50
4088: PPUSH
4089: CALL 797 0 1
4093: GO 4144
4095: LD_INT 9
4097: DOUBLE
4098: EQUAL
4099: IFTRUE 4115
4101: LD_INT 5
4103: DOUBLE
4104: EQUAL
4105: IFTRUE 4115
4107: LD_INT 8
4109: DOUBLE
4110: EQUAL
4111: IFTRUE 4115
4113: GO 4125
4115: POP
// AddPoints ( 75 ) ; class_mechanic :
4116: LD_INT 75
4118: PPUSH
4119: CALL 797 0 1
4123: GO 4144
4125: LD_INT 3
4127: DOUBLE
4128: EQUAL
4129: IFTRUE 4133
4131: GO 4143
4133: POP
// AddPoints ( 60 ) ; end ;
4134: LD_INT 60
4136: PPUSH
4137: CALL 797 0 1
4141: GO 4144
4143: POP
// end ; unit_vehicle :
4144: GO 4301
4146: LD_INT 2
4148: DOUBLE
4149: EQUAL
4150: IFTRUE 4154
4152: GO 4300
4154: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
4155: LD_VAR 0 1
4159: PPUSH
4160: CALL_OW 265
4164: PUSH
4165: LD_INT 12
4167: DOUBLE
4168: EQUAL
4169: IFTRUE 4185
4171: LD_INT 1
4173: DOUBLE
4174: EQUAL
4175: IFTRUE 4185
4177: LD_INT 11
4179: DOUBLE
4180: EQUAL
4181: IFTRUE 4185
4183: GO 4195
4185: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
4186: LD_INT 100
4188: PPUSH
4189: CALL 797 0 1
4193: GO 4298
4195: LD_INT 13
4197: DOUBLE
4198: EQUAL
4199: IFTRUE 4233
4201: LD_INT 14
4203: DOUBLE
4204: EQUAL
4205: IFTRUE 4233
4207: LD_INT 2
4209: DOUBLE
4210: EQUAL
4211: IFTRUE 4233
4213: LD_INT 3
4215: DOUBLE
4216: EQUAL
4217: IFTRUE 4233
4219: LD_INT 21
4221: DOUBLE
4222: EQUAL
4223: IFTRUE 4233
4225: LD_INT 22
4227: DOUBLE
4228: EQUAL
4229: IFTRUE 4233
4231: GO 4243
4233: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
4234: LD_INT 250
4236: PPUSH
4237: CALL 797 0 1
4241: GO 4298
4243: LD_INT 4
4245: DOUBLE
4246: EQUAL
4247: IFTRUE 4269
4249: LD_INT 5
4251: DOUBLE
4252: EQUAL
4253: IFTRUE 4269
4255: LD_INT 23
4257: DOUBLE
4258: EQUAL
4259: IFTRUE 4269
4261: LD_INT 24
4263: DOUBLE
4264: EQUAL
4265: IFTRUE 4269
4267: GO 4279
4269: POP
// AddPoints ( 500 ) ; 25 :
4270: LD_INT 500
4272: PPUSH
4273: CALL 797 0 1
4277: GO 4298
4279: LD_INT 25
4281: DOUBLE
4282: EQUAL
4283: IFTRUE 4287
4285: GO 4297
4287: POP
// AddPoints ( 1250 ) ; end ;
4288: LD_INT 1250
4290: PPUSH
4291: CALL 797 0 1
4295: GO 4298
4297: POP
// end ; end ;
4298: GO 4301
4300: POP
// end ; end ;
4301: PPOPN 1
4303: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
4304: LD_VAR 0 1
4308: PPUSH
4309: CALL_OW 266
4313: PUSH
4314: LD_INT 0
4316: EQUAL
4317: IFFALSE 4367
// begin base_x := GetX ( b ) ;
4319: LD_ADDR_EXP 9
4323: PUSH
4324: LD_VAR 0 1
4328: PPUSH
4329: CALL_OW 250
4333: ST_TO_ADDR
// base_y := GetY ( b ) ;
4334: LD_ADDR_EXP 10
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 251
4348: ST_TO_ADDR
// base := b ;
4349: LD_ADDR_EXP 11
4353: PUSH
4354: LD_VAR 0 1
4358: ST_TO_ADDR
// game_started := true ;
4359: LD_ADDR_EXP 7
4363: PUSH
4364: LD_INT 1
4366: ST_TO_ADDR
// end ; end ;
4367: PPOPN 1
4369: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL_OW 255
4379: PUSH
4380: LD_OWVAR 2
4384: EQUAL
4385: IFFALSE 4389
// exit ;
4387: GO 4539
// if GetType ( un ) = unit_vehicle then
4389: LD_VAR 0 1
4393: PPUSH
4394: CALL_OW 247
4398: PUSH
4399: LD_INT 2
4401: EQUAL
4402: IFFALSE 4458
// begin SetSide ( un , 0 ) ;
4404: LD_VAR 0 1
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 235
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
4416: LD_VAR 0 1
4420: PPUSH
4421: CALL_OW 248
4425: PUSH
4426: LD_INT 2
4428: EQUAL
4429: PUSH
4430: LD_VAR 0 1
4434: PPUSH
4435: CALL_OW 264
4439: PUSH
4440: LD_INT 49
4442: PUSH
4443: EMPTY
4444: LIST
4445: IN
4446: OR
4447: IFFALSE 4458
// ExplodeVehicle ( un ) ;
4449: LD_VAR 0 1
4453: PPUSH
4454: CALL 2506 0 1
// end ; if GetType ( un ) = unit_human then
4458: LD_VAR 0 1
4462: PPUSH
4463: CALL_OW 247
4467: PUSH
4468: LD_INT 1
4470: EQUAL
4471: IFFALSE 4539
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
4473: LD_VAR 0 1
4477: PPUSH
4478: CALL_OW 248
4482: PUSH
4483: LD_INT 2
4485: EQUAL
4486: PUSH
4487: LD_INT 5
4489: PPUSH
4490: LD_INT 7
4492: PPUSH
4493: CALL_OW 321
4497: PUSH
4498: LD_INT 2
4500: NONEQUAL
4501: AND
4502: PUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 248
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: IN
4527: OR
4528: IFFALSE 4539
// KillUnit ( un ) ;
4530: LD_VAR 0 1
4534: PPUSH
4535: CALL_OW 66
// end ; end ;
4539: PPOPN 1
4541: END
// every 0 0$1 do
4542: GO 4544
4544: DISABLE
// begin enable ;
4545: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4546: LD_INT 4
4548: PPUSH
4549: LD_INT 5
4551: PPUSH
4552: LD_INT 22
4554: PUSH
4555: LD_OWVAR 2
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PPUSH
4564: CALL_OW 513
// end ;
4568: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4569: LD_EXP 7
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_OWVAR 2
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 21
4588: PUSH
4589: LD_INT 1
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PPUSH
4600: CALL_OW 69
4604: PUSH
4605: LD_INT 0
4607: EQUAL
4608: AND
4609: IFFALSE 4621
4611: GO 4613
4613: DISABLE
// YouLost ( die ) ;
4614: LD_STRING die
4616: PPUSH
4617: CALL_OW 104
4621: END
// every 0 0$41 trigger tick <= 15 15$00 do
4622: LD_OWVAR 1
4626: PUSH
4627: LD_INT 31500
4629: LESSEQUAL
4630: IFFALSE 4657
4632: GO 4634
4634: DISABLE
// begin enable ;
4635: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4636: LD_INT 1
4638: PPUSH
4639: LD_INT 5
4641: PPUSH
4642: CALL_OW 12
4646: PPUSH
4647: LD_INT 3
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: CALL_OW 55
// end ;
4657: END
// every 1 1$20 trigger tick > 15 15$00 do
4658: LD_OWVAR 1
4662: PUSH
4663: LD_INT 31500
4665: GREATER
4666: IFFALSE 4713
4668: GO 4670
4670: DISABLE
// begin enable ;
4671: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4672: LD_INT 22
4674: PUSH
4675: LD_INT 7
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PPUSH
4682: CALL_OW 69
4686: PUSH
4687: LD_INT 0
4689: EQUAL
4690: IFFALSE 4713
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4692: LD_INT 1
4694: PPUSH
4695: LD_INT 5
4697: PPUSH
4698: CALL_OW 12
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: LD_INT 1
4708: PPUSH
4709: CALL_OW 55
// end ; end_of_file
4713: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4714: LD_INT 0
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
4721: PPUSH
4722: PPUSH
4723: PPUSH
4724: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4725: LD_ADDR_VAR 0 7
4729: PUSH
4730: LD_INT 1
4732: PUSH
4733: LD_INT 2
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: ST_TO_ADDR
// uc_side := 7 ;
4740: LD_ADDR_OWVAR 20
4744: PUSH
4745: LD_INT 7
4747: ST_TO_ADDR
// l := 0 ;
4748: LD_ADDR_VAR 0 9
4752: PUSH
4753: LD_INT 0
4755: ST_TO_ADDR
// case num of 1 :
4756: LD_VAR 0 1
4760: PUSH
4761: LD_INT 1
4763: DOUBLE
4764: EQUAL
4765: IFTRUE 4769
4767: GO 4788
4769: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4770: LD_ADDR_VAR 0 2
4774: PUSH
4775: LD_INT 12
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL 7117 0 2
4785: ST_TO_ADDR
4786: GO 6926
4788: LD_INT 2
4790: DOUBLE
4791: EQUAL
4792: IFTRUE 4796
4794: GO 4815
4796: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_INT 12
4804: PPUSH
4805: LD_INT 1
4807: PPUSH
4808: CALL 7188 0 2
4812: ST_TO_ADDR
4813: GO 6926
4815: LD_INT 3
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4823
4821: GO 4842
4823: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: LD_INT 12
4831: PPUSH
4832: LD_INT 1
4834: PPUSH
4835: CALL 7259 0 2
4839: ST_TO_ADDR
4840: GO 6926
4842: LD_INT 4
4844: DOUBLE
4845: EQUAL
4846: IFTRUE 4850
4848: GO 4869
4850: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 7
4858: PPUSH
4859: LD_INT 1
4861: PPUSH
4862: CALL 7338 0 2
4866: ST_TO_ADDR
4867: GO 6926
4869: LD_INT 5
4871: DOUBLE
4872: EQUAL
4873: IFTRUE 4877
4875: GO 4896
4877: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4878: LD_ADDR_VAR 0 2
4882: PUSH
4883: LD_INT 7
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: CALL 7734 0 2
4893: ST_TO_ADDR
4894: GO 6926
4896: LD_INT 6
4898: DOUBLE
4899: EQUAL
4900: IFTRUE 4904
4902: GO 4923
4904: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4905: LD_ADDR_VAR 0 2
4909: PUSH
4910: LD_INT 6
4912: PPUSH
4913: LD_INT 1
4915: PPUSH
4916: CALL 8154 0 2
4920: ST_TO_ADDR
4921: GO 6926
4923: LD_INT 7
4925: DOUBLE
4926: EQUAL
4927: IFTRUE 4931
4929: GO 4950
4931: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4932: LD_ADDR_VAR 0 2
4936: PUSH
4937: LD_INT 15
4939: PPUSH
4940: LD_INT 1
4942: PPUSH
4943: CALL 8574 0 2
4947: ST_TO_ADDR
4948: GO 6926
4950: LD_INT 8
4952: DOUBLE
4953: EQUAL
4954: IFTRUE 4958
4956: GO 4977
4958: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4959: LD_ADDR_VAR 0 2
4963: PUSH
4964: LD_INT 7
4966: PPUSH
4967: LD_INT 1
4969: PPUSH
4970: CALL 8675 0 2
4974: ST_TO_ADDR
4975: GO 6926
4977: LD_INT 9
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 4985
4983: GO 5016
4985: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4986: LD_ADDR_VAR 0 2
4990: PUSH
4991: LD_INT 4
4993: PPUSH
4994: LD_INT 1
4996: PPUSH
4997: CALL 8675 0 2
5001: PUSH
5002: LD_INT 7
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL 7734 0 2
5012: ADD
5013: ST_TO_ADDR
5014: GO 6926
5016: LD_INT 10
5018: DOUBLE
5019: EQUAL
5020: IFTRUE 5024
5022: GO 5055
5024: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_INT 9
5032: PPUSH
5033: LD_INT 1
5035: PPUSH
5036: CALL 8574 0 2
5040: PUSH
5041: LD_INT 14
5043: PPUSH
5044: LD_INT 1
5046: PPUSH
5047: CALL 7259 0 2
5051: ADD
5052: ST_TO_ADDR
5053: GO 6926
5055: LD_INT 11
5057: DOUBLE
5058: EQUAL
5059: IFTRUE 5111
5061: LD_INT 21
5063: DOUBLE
5064: EQUAL
5065: IFTRUE 5111
5067: LD_INT 31
5069: DOUBLE
5070: EQUAL
5071: IFTRUE 5111
5073: LD_INT 41
5075: DOUBLE
5076: EQUAL
5077: IFTRUE 5111
5079: LD_INT 51
5081: DOUBLE
5082: EQUAL
5083: IFTRUE 5111
5085: LD_INT 61
5087: DOUBLE
5088: EQUAL
5089: IFTRUE 5111
5091: LD_INT 71
5093: DOUBLE
5094: EQUAL
5095: IFTRUE 5111
5097: LD_INT 81
5099: DOUBLE
5100: EQUAL
5101: IFTRUE 5111
5103: LD_INT 91
5105: DOUBLE
5106: EQUAL
5107: IFTRUE 5111
5109: GO 5220
5111: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_INT 20
5119: PUSH
5120: LD_INT 30
5122: PUSH
5123: LD_INT 40
5125: PUSH
5126: LD_INT 45
5128: PUSH
5129: LD_INT 50
5131: PUSH
5132: LD_INT 60
5134: PUSH
5135: LD_INT 70
5137: PUSH
5138: LD_INT 80
5140: PUSH
5141: LD_INT 100
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: PUSH
5155: LD_VAR 0 1
5159: PUSH
5160: LD_INT 10
5162: DIV
5163: ARRAY
5164: PPUSH
5165: LD_INT 2
5167: PUSH
5168: LD_INT 3
5170: PUSH
5171: LD_INT 4
5173: PUSH
5174: LD_INT 5
5176: PUSH
5177: LD_INT 6
5179: PUSH
5180: LD_INT 7
5182: PUSH
5183: LD_INT 8
5185: PUSH
5186: LD_INT 9
5188: PUSH
5189: LD_INT 10
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: PUSH
5203: LD_VAR 0 1
5207: PUSH
5208: LD_INT 10
5210: DIV
5211: ARRAY
5212: PPUSH
5213: CALL 7117 0 2
5217: ST_TO_ADDR
5218: GO 6926
5220: LD_INT 12
5222: DOUBLE
5223: EQUAL
5224: IFTRUE 5276
5226: LD_INT 22
5228: DOUBLE
5229: EQUAL
5230: IFTRUE 5276
5232: LD_INT 32
5234: DOUBLE
5235: EQUAL
5236: IFTRUE 5276
5238: LD_INT 42
5240: DOUBLE
5241: EQUAL
5242: IFTRUE 5276
5244: LD_INT 52
5246: DOUBLE
5247: EQUAL
5248: IFTRUE 5276
5250: LD_INT 62
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5276
5256: LD_INT 72
5258: DOUBLE
5259: EQUAL
5260: IFTRUE 5276
5262: LD_INT 82
5264: DOUBLE
5265: EQUAL
5266: IFTRUE 5276
5268: LD_INT 92
5270: DOUBLE
5271: EQUAL
5272: IFTRUE 5276
5274: GO 5385
5276: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: LD_INT 16
5284: PUSH
5285: LD_INT 21
5287: PUSH
5288: LD_INT 28
5290: PUSH
5291: LD_INT 33
5293: PUSH
5294: LD_INT 39
5296: PUSH
5297: LD_INT 46
5299: PUSH
5300: LD_INT 56
5302: PUSH
5303: LD_INT 66
5305: PUSH
5306: LD_INT 80
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: PUSH
5320: LD_VAR 0 1
5324: PUSH
5325: LD_INT 10
5327: DIV
5328: ARRAY
5329: PPUSH
5330: LD_INT 2
5332: PUSH
5333: LD_INT 3
5335: PUSH
5336: LD_INT 4
5338: PUSH
5339: LD_INT 5
5341: PUSH
5342: LD_INT 6
5344: PUSH
5345: LD_INT 7
5347: PUSH
5348: LD_INT 8
5350: PUSH
5351: LD_INT 9
5353: PUSH
5354: LD_INT 10
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_VAR 0 1
5372: PUSH
5373: LD_INT 10
5375: DIV
5376: ARRAY
5377: PPUSH
5378: CALL 7188 0 2
5382: ST_TO_ADDR
5383: GO 6926
5385: LD_INT 13
5387: DOUBLE
5388: EQUAL
5389: IFTRUE 5441
5391: LD_INT 23
5393: DOUBLE
5394: EQUAL
5395: IFTRUE 5441
5397: LD_INT 33
5399: DOUBLE
5400: EQUAL
5401: IFTRUE 5441
5403: LD_INT 43
5405: DOUBLE
5406: EQUAL
5407: IFTRUE 5441
5409: LD_INT 53
5411: DOUBLE
5412: EQUAL
5413: IFTRUE 5441
5415: LD_INT 63
5417: DOUBLE
5418: EQUAL
5419: IFTRUE 5441
5421: LD_INT 73
5423: DOUBLE
5424: EQUAL
5425: IFTRUE 5441
5427: LD_INT 83
5429: DOUBLE
5430: EQUAL
5431: IFTRUE 5441
5433: LD_INT 93
5435: DOUBLE
5436: EQUAL
5437: IFTRUE 5441
5439: GO 5550
5441: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 14
5449: PUSH
5450: LD_INT 18
5452: PUSH
5453: LD_INT 22
5455: PUSH
5456: LD_INT 27
5458: PUSH
5459: LD_INT 33
5461: PUSH
5462: LD_INT 39
5464: PUSH
5465: LD_INT 44
5467: PUSH
5468: LD_INT 57
5470: PUSH
5471: LD_INT 65
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: PUSH
5485: LD_VAR 0 1
5489: PUSH
5490: LD_INT 10
5492: DIV
5493: ARRAY
5494: PPUSH
5495: LD_INT 2
5497: PUSH
5498: LD_INT 3
5500: PUSH
5501: LD_INT 4
5503: PUSH
5504: LD_INT 5
5506: PUSH
5507: LD_INT 6
5509: PUSH
5510: LD_INT 7
5512: PUSH
5513: LD_INT 8
5515: PUSH
5516: LD_INT 9
5518: PUSH
5519: LD_INT 10
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: LD_VAR 0 1
5537: PUSH
5538: LD_INT 10
5540: DIV
5541: ARRAY
5542: PPUSH
5543: CALL 7259 0 2
5547: ST_TO_ADDR
5548: GO 6926
5550: LD_INT 14
5552: DOUBLE
5553: EQUAL
5554: IFTRUE 5606
5556: LD_INT 24
5558: DOUBLE
5559: EQUAL
5560: IFTRUE 5606
5562: LD_INT 34
5564: DOUBLE
5565: EQUAL
5566: IFTRUE 5606
5568: LD_INT 44
5570: DOUBLE
5571: EQUAL
5572: IFTRUE 5606
5574: LD_INT 54
5576: DOUBLE
5577: EQUAL
5578: IFTRUE 5606
5580: LD_INT 64
5582: DOUBLE
5583: EQUAL
5584: IFTRUE 5606
5586: LD_INT 74
5588: DOUBLE
5589: EQUAL
5590: IFTRUE 5606
5592: LD_INT 84
5594: DOUBLE
5595: EQUAL
5596: IFTRUE 5606
5598: LD_INT 94
5600: DOUBLE
5601: EQUAL
5602: IFTRUE 5606
5604: GO 5715
5606: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5607: LD_ADDR_VAR 0 2
5611: PUSH
5612: LD_INT 9
5614: PUSH
5615: LD_INT 15
5617: PUSH
5618: LD_INT 22
5620: PUSH
5621: LD_INT 30
5623: PUSH
5624: LD_INT 39
5626: PUSH
5627: LD_INT 45
5629: PUSH
5630: LD_INT 56
5632: PUSH
5633: LD_INT 60
5635: PUSH
5636: LD_INT 65
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: PUSH
5650: LD_VAR 0 1
5654: PUSH
5655: LD_INT 10
5657: DIV
5658: ARRAY
5659: PPUSH
5660: LD_INT 2
5662: PUSH
5663: LD_INT 3
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: LD_INT 6
5674: PUSH
5675: LD_INT 7
5677: PUSH
5678: LD_INT 8
5680: PUSH
5681: LD_INT 9
5683: PUSH
5684: LD_INT 10
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: LD_VAR 0 1
5702: PUSH
5703: LD_INT 10
5705: DIV
5706: ARRAY
5707: PPUSH
5708: CALL 7338 0 2
5712: ST_TO_ADDR
5713: GO 6926
5715: LD_INT 15
5717: DOUBLE
5718: EQUAL
5719: IFTRUE 5771
5721: LD_INT 25
5723: DOUBLE
5724: EQUAL
5725: IFTRUE 5771
5727: LD_INT 35
5729: DOUBLE
5730: EQUAL
5731: IFTRUE 5771
5733: LD_INT 45
5735: DOUBLE
5736: EQUAL
5737: IFTRUE 5771
5739: LD_INT 55
5741: DOUBLE
5742: EQUAL
5743: IFTRUE 5771
5745: LD_INT 65
5747: DOUBLE
5748: EQUAL
5749: IFTRUE 5771
5751: LD_INT 75
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5771
5757: LD_INT 85
5759: DOUBLE
5760: EQUAL
5761: IFTRUE 5771
5763: LD_INT 95
5765: DOUBLE
5766: EQUAL
5767: IFTRUE 5771
5769: GO 5880
5771: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5772: LD_ADDR_VAR 0 2
5776: PUSH
5777: LD_INT 6
5779: PUSH
5780: LD_INT 11
5782: PUSH
5783: LD_INT 15
5785: PUSH
5786: LD_INT 20
5788: PUSH
5789: LD_INT 25
5791: PUSH
5792: LD_INT 30
5794: PUSH
5795: LD_INT 35
5797: PUSH
5798: LD_INT 40
5800: PUSH
5801: LD_INT 45
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: PUSH
5815: LD_VAR 0 1
5819: PUSH
5820: LD_INT 10
5822: DIV
5823: ARRAY
5824: PPUSH
5825: LD_INT 2
5827: PUSH
5828: LD_INT 3
5830: PUSH
5831: LD_INT 4
5833: PUSH
5834: LD_INT 5
5836: PUSH
5837: LD_INT 6
5839: PUSH
5840: LD_INT 7
5842: PUSH
5843: LD_INT 8
5845: PUSH
5846: LD_INT 9
5848: PUSH
5849: LD_INT 10
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: PUSH
5863: LD_VAR 0 1
5867: PUSH
5868: LD_INT 10
5870: DIV
5871: ARRAY
5872: PPUSH
5873: CALL 7734 0 2
5877: ST_TO_ADDR
5878: GO 6926
5880: LD_INT 16
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5936
5886: LD_INT 26
5888: DOUBLE
5889: EQUAL
5890: IFTRUE 5936
5892: LD_INT 36
5894: DOUBLE
5895: EQUAL
5896: IFTRUE 5936
5898: LD_INT 46
5900: DOUBLE
5901: EQUAL
5902: IFTRUE 5936
5904: LD_INT 56
5906: DOUBLE
5907: EQUAL
5908: IFTRUE 5936
5910: LD_INT 66
5912: DOUBLE
5913: EQUAL
5914: IFTRUE 5936
5916: LD_INT 76
5918: DOUBLE
5919: EQUAL
5920: IFTRUE 5936
5922: LD_INT 86
5924: DOUBLE
5925: EQUAL
5926: IFTRUE 5936
5928: LD_INT 96
5930: DOUBLE
5931: EQUAL
5932: IFTRUE 5936
5934: GO 6045
5936: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5937: LD_ADDR_VAR 0 2
5941: PUSH
5942: LD_INT 9
5944: PUSH
5945: LD_INT 12
5947: PUSH
5948: LD_INT 15
5950: PUSH
5951: LD_INT 18
5953: PUSH
5954: LD_INT 21
5956: PUSH
5957: LD_INT 24
5959: PUSH
5960: LD_INT 27
5962: PUSH
5963: LD_INT 30
5965: PUSH
5966: LD_INT 33
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: PUSH
5980: LD_VAR 0 1
5984: PUSH
5985: LD_INT 10
5987: DIV
5988: ARRAY
5989: PPUSH
5990: LD_INT 2
5992: PUSH
5993: LD_INT 3
5995: PUSH
5996: LD_INT 4
5998: PUSH
5999: LD_INT 5
6001: PUSH
6002: LD_INT 6
6004: PUSH
6005: LD_INT 7
6007: PUSH
6008: LD_INT 8
6010: PUSH
6011: LD_INT 9
6013: PUSH
6014: LD_INT 10
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: PUSH
6028: LD_VAR 0 1
6032: PUSH
6033: LD_INT 10
6035: DIV
6036: ARRAY
6037: PPUSH
6038: CALL 8154 0 2
6042: ST_TO_ADDR
6043: GO 6926
6045: LD_INT 17
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6101
6051: LD_INT 27
6053: DOUBLE
6054: EQUAL
6055: IFTRUE 6101
6057: LD_INT 37
6059: DOUBLE
6060: EQUAL
6061: IFTRUE 6101
6063: LD_INT 47
6065: DOUBLE
6066: EQUAL
6067: IFTRUE 6101
6069: LD_INT 57
6071: DOUBLE
6072: EQUAL
6073: IFTRUE 6101
6075: LD_INT 67
6077: DOUBLE
6078: EQUAL
6079: IFTRUE 6101
6081: LD_INT 77
6083: DOUBLE
6084: EQUAL
6085: IFTRUE 6101
6087: LD_INT 87
6089: DOUBLE
6090: EQUAL
6091: IFTRUE 6101
6093: LD_INT 97
6095: DOUBLE
6096: EQUAL
6097: IFTRUE 6101
6099: GO 6210
6101: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: LD_INT 14
6109: PUSH
6110: LD_INT 16
6112: PUSH
6113: LD_INT 18
6115: PUSH
6116: LD_INT 22
6118: PUSH
6119: LD_INT 24
6121: PUSH
6122: LD_INT 26
6124: PUSH
6125: LD_INT 28
6127: PUSH
6128: LD_INT 32
6130: PUSH
6131: LD_INT 35
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: LD_VAR 0 1
6149: PUSH
6150: LD_INT 10
6152: DIV
6153: ARRAY
6154: PPUSH
6155: LD_INT 2
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: LD_INT 4
6163: PUSH
6164: LD_INT 5
6166: PUSH
6167: LD_INT 6
6169: PUSH
6170: LD_INT 7
6172: PUSH
6173: LD_INT 8
6175: PUSH
6176: LD_INT 9
6178: PUSH
6179: LD_INT 10
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: PUSH
6193: LD_VAR 0 1
6197: PUSH
6198: LD_INT 10
6200: DIV
6201: ARRAY
6202: PPUSH
6203: CALL 8574 0 2
6207: ST_TO_ADDR
6208: GO 6926
6210: LD_INT 18
6212: DOUBLE
6213: EQUAL
6214: IFTRUE 6266
6216: LD_INT 28
6218: DOUBLE
6219: EQUAL
6220: IFTRUE 6266
6222: LD_INT 38
6224: DOUBLE
6225: EQUAL
6226: IFTRUE 6266
6228: LD_INT 48
6230: DOUBLE
6231: EQUAL
6232: IFTRUE 6266
6234: LD_INT 58
6236: DOUBLE
6237: EQUAL
6238: IFTRUE 6266
6240: LD_INT 68
6242: DOUBLE
6243: EQUAL
6244: IFTRUE 6266
6246: LD_INT 78
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6266
6252: LD_INT 88
6254: DOUBLE
6255: EQUAL
6256: IFTRUE 6266
6258: LD_INT 98
6260: DOUBLE
6261: EQUAL
6262: IFTRUE 6266
6264: GO 6375
6266: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
6267: LD_ADDR_VAR 0 2
6271: PUSH
6272: LD_INT 9
6274: PUSH
6275: LD_INT 12
6277: PUSH
6278: LD_INT 15
6280: PUSH
6281: LD_INT 18
6283: PUSH
6284: LD_INT 21
6286: PUSH
6287: LD_INT 24
6289: PUSH
6290: LD_INT 27
6292: PUSH
6293: LD_INT 30
6295: PUSH
6296: LD_INT 33
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PUSH
6310: LD_VAR 0 1
6314: PUSH
6315: LD_INT 10
6317: DIV
6318: ARRAY
6319: PPUSH
6320: LD_INT 2
6322: PUSH
6323: LD_INT 3
6325: PUSH
6326: LD_INT 4
6328: PUSH
6329: LD_INT 5
6331: PUSH
6332: LD_INT 6
6334: PUSH
6335: LD_INT 7
6337: PUSH
6338: LD_INT 8
6340: PUSH
6341: LD_INT 9
6343: PUSH
6344: LD_INT 10
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: PUSH
6358: LD_VAR 0 1
6362: PUSH
6363: LD_INT 10
6365: DIV
6366: ARRAY
6367: PPUSH
6368: CALL 8675 0 2
6372: ST_TO_ADDR
6373: GO 6926
6375: LD_INT 19
6377: DOUBLE
6378: EQUAL
6379: IFTRUE 6431
6381: LD_INT 29
6383: DOUBLE
6384: EQUAL
6385: IFTRUE 6431
6387: LD_INT 39
6389: DOUBLE
6390: EQUAL
6391: IFTRUE 6431
6393: LD_INT 49
6395: DOUBLE
6396: EQUAL
6397: IFTRUE 6431
6399: LD_INT 59
6401: DOUBLE
6402: EQUAL
6403: IFTRUE 6431
6405: LD_INT 69
6407: DOUBLE
6408: EQUAL
6409: IFTRUE 6431
6411: LD_INT 79
6413: DOUBLE
6414: EQUAL
6415: IFTRUE 6431
6417: LD_INT 89
6419: DOUBLE
6420: EQUAL
6421: IFTRUE 6431
6423: LD_INT 99
6425: DOUBLE
6426: EQUAL
6427: IFTRUE 6431
6429: GO 6642
6431: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
6432: LD_ADDR_VAR 0 2
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 7
6442: PUSH
6443: LD_INT 10
6445: PUSH
6446: LD_INT 13
6448: PUSH
6449: LD_INT 14
6451: PUSH
6452: LD_INT 17
6454: PUSH
6455: LD_INT 19
6457: PUSH
6458: LD_INT 21
6460: PUSH
6461: LD_INT 23
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_VAR 0 1
6479: PUSH
6480: LD_INT 10
6482: DIV
6483: ARRAY
6484: PPUSH
6485: LD_INT 2
6487: PUSH
6488: LD_INT 3
6490: PUSH
6491: LD_INT 4
6493: PUSH
6494: LD_INT 5
6496: PUSH
6497: LD_INT 6
6499: PUSH
6500: LD_INT 7
6502: PUSH
6503: LD_INT 8
6505: PUSH
6506: LD_INT 9
6508: PUSH
6509: LD_INT 10
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: PUSH
6523: LD_VAR 0 1
6527: PUSH
6528: LD_INT 10
6530: DIV
6531: ARRAY
6532: PPUSH
6533: CALL 8675 0 2
6537: PUSH
6538: LD_INT 4
6540: PUSH
6541: LD_INT 7
6543: PUSH
6544: LD_INT 10
6546: PUSH
6547: LD_INT 13
6549: PUSH
6550: LD_INT 14
6552: PUSH
6553: LD_INT 17
6555: PUSH
6556: LD_INT 19
6558: PUSH
6559: LD_INT 22
6561: PUSH
6562: LD_INT 25
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: PUSH
6576: LD_VAR 0 1
6580: PUSH
6581: LD_INT 10
6583: DIV
6584: ARRAY
6585: PPUSH
6586: LD_INT 2
6588: PUSH
6589: LD_INT 3
6591: PUSH
6592: LD_INT 4
6594: PUSH
6595: LD_INT 5
6597: PUSH
6598: LD_INT 6
6600: PUSH
6601: LD_INT 7
6603: PUSH
6604: LD_INT 8
6606: PUSH
6607: LD_INT 9
6609: PUSH
6610: LD_INT 10
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PUSH
6624: LD_VAR 0 1
6628: PUSH
6629: LD_INT 10
6631: DIV
6632: ARRAY
6633: PPUSH
6634: CALL 7734 0 2
6638: ADD
6639: ST_TO_ADDR
6640: GO 6926
6642: LD_INT 20
6644: DOUBLE
6645: EQUAL
6646: IFTRUE 6698
6648: LD_INT 30
6650: DOUBLE
6651: EQUAL
6652: IFTRUE 6698
6654: LD_INT 40
6656: DOUBLE
6657: EQUAL
6658: IFTRUE 6698
6660: LD_INT 50
6662: DOUBLE
6663: EQUAL
6664: IFTRUE 6698
6666: LD_INT 60
6668: DOUBLE
6669: EQUAL
6670: IFTRUE 6698
6672: LD_INT 70
6674: DOUBLE
6675: EQUAL
6676: IFTRUE 6698
6678: LD_INT 80
6680: DOUBLE
6681: EQUAL
6682: IFTRUE 6698
6684: LD_INT 90
6686: DOUBLE
6687: EQUAL
6688: IFTRUE 6698
6690: LD_INT 100
6692: DOUBLE
6693: EQUAL
6694: IFTRUE 6698
6696: GO 6925
6698: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: LD_INT 4
6706: PUSH
6707: LD_INT 7
6709: PUSH
6710: LD_INT 10
6712: PUSH
6713: LD_INT 13
6715: PUSH
6716: LD_INT 14
6718: PUSH
6719: LD_INT 17
6721: PUSH
6722: LD_INT 19
6724: PUSH
6725: LD_INT 21
6727: PUSH
6728: LD_INT 23
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: PUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_INT 10
6749: DIVREAL
6750: PUSH
6751: LD_INT 1
6753: MINUS
6754: ARRAY
6755: PPUSH
6756: LD_INT 2
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 4
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 6
6770: PUSH
6771: LD_INT 7
6773: PUSH
6774: LD_INT 8
6776: PUSH
6777: LD_INT 9
6779: PUSH
6780: LD_INT 10
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: PUSH
6794: LD_VAR 0 1
6798: PUSH
6799: LD_INT 10
6801: DIVREAL
6802: PUSH
6803: LD_INT 1
6805: MINUS
6806: ARRAY
6807: PPUSH
6808: CALL 8574 0 2
6812: PUSH
6813: LD_INT 4
6815: PUSH
6816: LD_INT 7
6818: PUSH
6819: LD_INT 10
6821: PUSH
6822: LD_INT 13
6824: PUSH
6825: LD_INT 14
6827: PUSH
6828: LD_INT 17
6830: PUSH
6831: LD_INT 19
6833: PUSH
6834: LD_INT 22
6836: PUSH
6837: LD_INT 25
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: PUSH
6851: LD_VAR 0 1
6855: PUSH
6856: LD_INT 10
6858: DIVREAL
6859: PUSH
6860: LD_INT 1
6862: MINUS
6863: ARRAY
6864: PPUSH
6865: LD_INT 2
6867: PUSH
6868: LD_INT 3
6870: PUSH
6871: LD_INT 4
6873: PUSH
6874: LD_INT 5
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: LD_INT 7
6882: PUSH
6883: LD_INT 8
6885: PUSH
6886: LD_INT 9
6888: PUSH
6889: LD_INT 10
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: PUSH
6903: LD_VAR 0 1
6907: PUSH
6908: LD_INT 10
6910: DIVREAL
6911: PUSH
6912: LD_INT 1
6914: MINUS
6915: ARRAY
6916: PPUSH
6917: CALL 8154 0 2
6921: ADD
6922: ST_TO_ADDR
6923: GO 6926
6925: POP
// for i in result do
6926: LD_ADDR_VAR 0 3
6930: PUSH
6931: LD_VAR 0 2
6935: PUSH
6936: FOR_IN
6937: IFFALSE 7110
// begin a := rand ( 1 , 2 ) ;
6939: LD_ADDR_VAR 0 8
6943: PUSH
6944: LD_INT 1
6946: PPUSH
6947: LD_INT 2
6949: PPUSH
6950: CALL_OW 12
6954: ST_TO_ADDR
// if a = 1 then
6955: LD_VAR 0 8
6959: PUSH
6960: LD_INT 1
6962: EQUAL
6963: IFFALSE 6979
// SetDir ( i , 3 ) else
6965: LD_VAR 0 3
6969: PPUSH
6970: LD_INT 3
6972: PPUSH
6973: CALL_OW 233
6977: GO 6991
// SetDir ( i , 5 ) ;
6979: LD_VAR 0 3
6983: PPUSH
6984: LD_INT 5
6986: PPUSH
6987: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6991: LD_VAR 0 3
6995: PPUSH
6996: LD_VAR 0 7
7000: PUSH
7001: LD_VAR 0 8
7005: ARRAY
7006: PPUSH
7007: LD_INT 0
7009: PPUSH
7010: CALL_OW 49
// if GetControl ( i ) = control_manual then
7014: LD_VAR 0 3
7018: PPUSH
7019: CALL_OW 263
7023: PUSH
7024: LD_INT 1
7026: EQUAL
7027: IFFALSE 7073
// begin uc_nation := GetNation ( i ) ;
7029: LD_ADDR_OWVAR 21
7033: PUSH
7034: LD_VAR 0 3
7038: PPUSH
7039: CALL_OW 248
7043: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
7044: LD_INT 0
7046: PPUSH
7047: LD_INT 3
7049: PPUSH
7050: LD_VAR 0 5
7054: PPUSH
7055: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
7059: CALL_OW 44
7063: PPUSH
7064: LD_VAR 0 3
7068: PPUSH
7069: CALL_OW 52
// end ; l := l + 1 ;
7073: LD_ADDR_VAR 0 9
7077: PUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ST_TO_ADDR
// if l mod 10 = 0 then
7087: LD_VAR 0 9
7091: PUSH
7092: LD_INT 10
7094: MOD
7095: PUSH
7096: LD_INT 0
7098: EQUAL
7099: IFFALSE 7108
// Wait ( 0 0$02 ) ;
7101: LD_INT 70
7103: PPUSH
7104: CALL_OW 67
// end ;
7108: GO 6936
7110: POP
7111: POP
// end ;
7112: LD_VAR 0 2
7116: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
7117: LD_INT 0
7119: PPUSH
7120: PPUSH
7121: PPUSH
// uc_nation := nation_nature ;
7122: LD_ADDR_OWVAR 21
7126: PUSH
7127: LD_INT 0
7129: ST_TO_ADDR
// for i = 1 to n do
7130: LD_ADDR_VAR 0 4
7134: PUSH
7135: DOUBLE
7136: LD_INT 1
7138: DEC
7139: ST_TO_ADDR
7140: LD_VAR 0 1
7144: PUSH
7145: FOR_TO
7146: IFFALSE 7181
// begin PrepareHuman ( false , class_apeman , skill ) ;
7148: LD_INT 0
7150: PPUSH
7151: LD_INT 12
7153: PPUSH
7154: LD_VAR 0 2
7158: PPUSH
7159: CALL_OW 380
// result := result ^ CreateHuman ;
7163: LD_ADDR_VAR 0 3
7167: PUSH
7168: LD_VAR 0 3
7172: PUSH
7173: CALL_OW 44
7177: ADD
7178: ST_TO_ADDR
// end ;
7179: GO 7145
7181: POP
7182: POP
// end ;
7183: LD_VAR 0 3
7187: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
7188: LD_INT 0
7190: PPUSH
7191: PPUSH
7192: PPUSH
// uc_nation := nation_nature ;
7193: LD_ADDR_OWVAR 21
7197: PUSH
7198: LD_INT 0
7200: ST_TO_ADDR
// for i = 1 to n do
7201: LD_ADDR_VAR 0 4
7205: PUSH
7206: DOUBLE
7207: LD_INT 1
7209: DEC
7210: ST_TO_ADDR
7211: LD_VAR 0 1
7215: PUSH
7216: FOR_TO
7217: IFFALSE 7252
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
7219: LD_INT 0
7221: PPUSH
7222: LD_INT 15
7224: PPUSH
7225: LD_VAR 0 2
7229: PPUSH
7230: CALL_OW 380
// result := result ^ CreateHuman ;
7234: LD_ADDR_VAR 0 3
7238: PUSH
7239: LD_VAR 0 3
7243: PUSH
7244: CALL_OW 44
7248: ADD
7249: ST_TO_ADDR
// end ;
7250: GO 7216
7252: POP
7253: POP
// end ;
7254: LD_VAR 0 3
7258: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
7259: LD_INT 0
7261: PPUSH
7262: PPUSH
7263: PPUSH
// for i = 1 to n do
7264: LD_ADDR_VAR 0 4
7268: PUSH
7269: DOUBLE
7270: LD_INT 1
7272: DEC
7273: ST_TO_ADDR
7274: LD_VAR 0 1
7278: PUSH
7279: FOR_TO
7280: IFFALSE 7331
// begin uc_nation := rand ( 1 , 3 ) ;
7282: LD_ADDR_OWVAR 21
7286: PUSH
7287: LD_INT 1
7289: PPUSH
7290: LD_INT 3
7292: PPUSH
7293: CALL_OW 12
7297: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
7298: LD_INT 0
7300: PPUSH
7301: LD_INT 1
7303: PPUSH
7304: LD_VAR 0 2
7308: PPUSH
7309: CALL_OW 380
// result := result ^ CreateHuman ;
7313: LD_ADDR_VAR 0 3
7317: PUSH
7318: LD_VAR 0 3
7322: PUSH
7323: CALL_OW 44
7327: ADD
7328: ST_TO_ADDR
// end ;
7329: GO 7279
7331: POP
7332: POP
// end ;
7333: LD_VAR 0 3
7337: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7338: LD_INT 0
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
// for i = 1 to n do
7347: LD_ADDR_VAR 0 4
7351: PUSH
7352: DOUBLE
7353: LD_INT 1
7355: DEC
7356: ST_TO_ADDR
7357: LD_VAR 0 1
7361: PUSH
7362: FOR_TO
7363: IFFALSE 7727
// begin uc_nation := rand ( 1 , 3 ) ;
7365: LD_ADDR_OWVAR 21
7369: PUSH
7370: LD_INT 1
7372: PPUSH
7373: LD_INT 3
7375: PPUSH
7376: CALL_OW 12
7380: ST_TO_ADDR
// case uc_nation of 1 :
7381: LD_OWVAR 21
7385: PUSH
7386: LD_INT 1
7388: DOUBLE
7389: EQUAL
7390: IFTRUE 7394
7392: GO 7457
7394: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
7395: LD_ADDR_VAR 0 6
7399: PUSH
7400: LD_INT 1
7402: PUSH
7403: LD_INT 2
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
7410: LD_ADDR_VAR 0 7
7414: PUSH
7415: LD_INT 2
7417: PUSH
7418: LD_INT 3
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7425: LD_ADDR_VAR 0 8
7429: PUSH
7430: LD_INT 1
7432: PUSH
7433: LD_INT 3
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7440: LD_ADDR_VAR 0 9
7444: PUSH
7445: LD_INT 1
7447: PUSH
7448: LD_INT 2
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: ST_TO_ADDR
// end ; 2 :
7455: GO 7592
7457: LD_INT 2
7459: DOUBLE
7460: EQUAL
7461: IFTRUE 7465
7463: GO 7528
7465: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7466: LD_ADDR_VAR 0 6
7470: PUSH
7471: LD_INT 12
7473: PUSH
7474: LD_INT 11
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7481: LD_ADDR_VAR 0 7
7485: PUSH
7486: LD_INT 23
7488: PUSH
7489: LD_INT 24
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7496: LD_ADDR_VAR 0 8
7500: PUSH
7501: LD_INT 1
7503: PUSH
7504: LD_INT 5
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7511: LD_ADDR_VAR 0 9
7515: PUSH
7516: LD_INT 1
7518: PUSH
7519: LD_INT 2
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: ST_TO_ADDR
// end ; 3 :
7526: GO 7592
7528: LD_INT 3
7530: DOUBLE
7531: EQUAL
7532: IFTRUE 7536
7534: GO 7591
7536: POP
// begin chassis := [ ru_medium_wheeled ] ;
7537: LD_ADDR_VAR 0 6
7541: PUSH
7542: LD_INT 21
7544: PUSH
7545: EMPTY
7546: LIST
7547: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7548: LD_ADDR_VAR 0 7
7552: PUSH
7553: LD_INT 42
7555: PUSH
7556: LD_INT 44
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7563: LD_ADDR_VAR 0 8
7567: PUSH
7568: LD_INT 1
7570: PUSH
7571: LD_INT 3
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7578: LD_ADDR_VAR 0 9
7582: PUSH
7583: LD_INT 1
7585: PUSH
7586: EMPTY
7587: LIST
7588: ST_TO_ADDR
// end ; end ;
7589: GO 7592
7591: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7592: LD_ADDR_OWVAR 37
7596: PUSH
7597: LD_VAR 0 6
7601: PUSH
7602: LD_INT 1
7604: PPUSH
7605: LD_VAR 0 6
7609: PPUSH
7610: CALL_OW 12
7614: ARRAY
7615: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7616: LD_ADDR_OWVAR 39
7620: PUSH
7621: LD_VAR 0 9
7625: PUSH
7626: LD_INT 1
7628: PPUSH
7629: LD_VAR 0 9
7633: PPUSH
7634: CALL_OW 12
7638: ARRAY
7639: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7640: LD_ADDR_OWVAR 38
7644: PUSH
7645: LD_VAR 0 8
7649: PUSH
7650: LD_INT 1
7652: PPUSH
7653: LD_VAR 0 8
7657: PPUSH
7658: CALL_OW 12
7662: ARRAY
7663: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7664: LD_ADDR_OWVAR 40
7668: PUSH
7669: LD_VAR 0 7
7673: PUSH
7674: LD_INT 1
7676: PPUSH
7677: LD_VAR 0 7
7681: PPUSH
7682: CALL_OW 12
7686: ARRAY
7687: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7688: LD_ADDR_OWVAR 41
7692: PUSH
7693: LD_INT 100
7695: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7696: LD_ADDR_VAR 0 3
7700: PUSH
7701: LD_VAR 0 3
7705: PPUSH
7706: LD_VAR 0 3
7710: PUSH
7711: LD_INT 1
7713: PLUS
7714: PPUSH
7715: CALL_OW 45
7719: PPUSH
7720: CALL_OW 2
7724: ST_TO_ADDR
// end ;
7725: GO 7362
7727: POP
7728: POP
// end ;
7729: LD_VAR 0 3
7733: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7734: LD_INT 0
7736: PPUSH
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
7742: PPUSH
// for i = 1 to n do
7743: LD_ADDR_VAR 0 4
7747: PUSH
7748: DOUBLE
7749: LD_INT 1
7751: DEC
7752: ST_TO_ADDR
7753: LD_VAR 0 1
7757: PUSH
7758: FOR_TO
7759: IFFALSE 8147
// begin uc_nation := rand ( 1 , 3 ) ;
7761: LD_ADDR_OWVAR 21
7765: PUSH
7766: LD_INT 1
7768: PPUSH
7769: LD_INT 3
7771: PPUSH
7772: CALL_OW 12
7776: ST_TO_ADDR
// case uc_nation of 1 :
7777: LD_OWVAR 21
7781: PUSH
7782: LD_INT 1
7784: DOUBLE
7785: EQUAL
7786: IFTRUE 7790
7788: GO 7861
7790: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7791: LD_ADDR_VAR 0 6
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7806: LD_ADDR_VAR 0 7
7810: PUSH
7811: LD_INT 4
7813: PUSH
7814: LD_INT 5
7816: PUSH
7817: LD_INT 9
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7825: LD_ADDR_VAR 0 8
7829: PUSH
7830: LD_INT 1
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7840: LD_ADDR_VAR 0 9
7844: PUSH
7845: LD_INT 1
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: ST_TO_ADDR
// end ; 2 :
7859: GO 8012
7861: LD_INT 2
7863: DOUBLE
7864: EQUAL
7865: IFTRUE 7869
7867: GO 7940
7869: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7870: LD_ADDR_VAR 0 6
7874: PUSH
7875: LD_INT 13
7877: PUSH
7878: LD_INT 14
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7885: LD_ADDR_VAR 0 7
7889: PUSH
7890: LD_INT 27
7892: PUSH
7893: LD_INT 26
7895: PUSH
7896: LD_INT 25
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7904: LD_ADDR_VAR 0 8
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: LD_INT 5
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7919: LD_ADDR_VAR 0 9
7923: PUSH
7924: LD_INT 1
7926: PUSH
7927: LD_INT 2
7929: PUSH
7930: LD_INT 3
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: ST_TO_ADDR
// end ; 3 :
7938: GO 8012
7940: LD_INT 3
7942: DOUBLE
7943: EQUAL
7944: IFTRUE 7948
7946: GO 8011
7948: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7949: LD_ADDR_VAR 0 6
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 21
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7964: LD_ADDR_VAR 0 7
7968: PUSH
7969: LD_INT 44
7971: PUSH
7972: LD_INT 43
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7979: LD_ADDR_VAR 0 8
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7994: LD_ADDR_VAR 0 9
7998: PUSH
7999: LD_INT 1
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: ST_TO_ADDR
// end ; end ;
8009: GO 8012
8011: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8012: LD_ADDR_OWVAR 37
8016: PUSH
8017: LD_VAR 0 6
8021: PUSH
8022: LD_INT 1
8024: PPUSH
8025: LD_VAR 0 6
8029: PPUSH
8030: CALL_OW 12
8034: ARRAY
8035: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8036: LD_ADDR_OWVAR 39
8040: PUSH
8041: LD_VAR 0 9
8045: PUSH
8046: LD_INT 1
8048: PPUSH
8049: LD_VAR 0 9
8053: PPUSH
8054: CALL_OW 12
8058: ARRAY
8059: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8060: LD_ADDR_OWVAR 38
8064: PUSH
8065: LD_VAR 0 8
8069: PUSH
8070: LD_INT 1
8072: PPUSH
8073: LD_VAR 0 8
8077: PPUSH
8078: CALL_OW 12
8082: ARRAY
8083: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8084: LD_ADDR_OWVAR 40
8088: PUSH
8089: LD_VAR 0 7
8093: PUSH
8094: LD_INT 1
8096: PPUSH
8097: LD_VAR 0 7
8101: PPUSH
8102: CALL_OW 12
8106: ARRAY
8107: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8108: LD_ADDR_OWVAR 41
8112: PUSH
8113: LD_INT 100
8115: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8116: LD_ADDR_VAR 0 3
8120: PUSH
8121: LD_VAR 0 3
8125: PPUSH
8126: LD_VAR 0 3
8130: PUSH
8131: LD_INT 1
8133: PLUS
8134: PPUSH
8135: CALL_OW 45
8139: PPUSH
8140: CALL_OW 2
8144: ST_TO_ADDR
// end ;
8145: GO 7758
8147: POP
8148: POP
// end ;
8149: LD_VAR 0 3
8153: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8154: LD_INT 0
8156: PPUSH
8157: PPUSH
8158: PPUSH
8159: PPUSH
8160: PPUSH
8161: PPUSH
8162: PPUSH
// for i = 1 to n do
8163: LD_ADDR_VAR 0 4
8167: PUSH
8168: DOUBLE
8169: LD_INT 1
8171: DEC
8172: ST_TO_ADDR
8173: LD_VAR 0 1
8177: PUSH
8178: FOR_TO
8179: IFFALSE 8567
// begin uc_nation := rand ( 1 , 3 ) ;
8181: LD_ADDR_OWVAR 21
8185: PUSH
8186: LD_INT 1
8188: PPUSH
8189: LD_INT 3
8191: PPUSH
8192: CALL_OW 12
8196: ST_TO_ADDR
// case uc_nation of 1 :
8197: LD_OWVAR 21
8201: PUSH
8202: LD_INT 1
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8277
8210: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8211: LD_ADDR_VAR 0 6
8215: PUSH
8216: LD_INT 4
8218: PUSH
8219: LD_INT 5
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
8226: LD_ADDR_VAR 0 7
8230: PUSH
8231: LD_INT 6
8233: PUSH
8234: LD_INT 7
8236: PUSH
8237: LD_INT 9
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8245: LD_ADDR_VAR 0 8
8249: PUSH
8250: LD_INT 1
8252: PUSH
8253: LD_INT 3
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8260: LD_ADDR_VAR 0 9
8264: PUSH
8265: LD_INT 1
8267: PUSH
8268: LD_INT 3
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: ST_TO_ADDR
// end ; 2 :
8275: GO 8432
8277: LD_INT 2
8279: DOUBLE
8280: EQUAL
8281: IFTRUE 8285
8283: GO 8360
8285: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
8286: LD_ADDR_VAR 0 6
8290: PUSH
8291: LD_INT 13
8293: PUSH
8294: LD_INT 14
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8301: LD_ADDR_VAR 0 7
8305: PUSH
8306: LD_INT 27
8308: PUSH
8309: LD_INT 26
8311: PUSH
8312: LD_INT 28
8314: PUSH
8315: LD_INT 29
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8324: LD_ADDR_VAR 0 8
8328: PUSH
8329: LD_INT 1
8331: PUSH
8332: LD_INT 5
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8339: LD_ADDR_VAR 0 9
8343: PUSH
8344: LD_INT 1
8346: PUSH
8347: LD_INT 2
8349: PUSH
8350: LD_INT 3
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: ST_TO_ADDR
// end ; 3 :
8358: GO 8432
8360: LD_INT 3
8362: DOUBLE
8363: EQUAL
8364: IFTRUE 8368
8366: GO 8431
8368: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8369: LD_ADDR_VAR 0 6
8373: PUSH
8374: LD_INT 23
8376: PUSH
8377: LD_INT 24
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
8384: LD_ADDR_VAR 0 7
8388: PUSH
8389: LD_INT 46
8391: PUSH
8392: LD_INT 45
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8399: LD_ADDR_VAR 0 8
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: LD_INT 3
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8414: LD_ADDR_VAR 0 9
8418: PUSH
8419: LD_INT 1
8421: PUSH
8422: LD_INT 3
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: ST_TO_ADDR
// end ; end ;
8429: GO 8432
8431: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8432: LD_ADDR_OWVAR 37
8436: PUSH
8437: LD_VAR 0 6
8441: PUSH
8442: LD_INT 1
8444: PPUSH
8445: LD_VAR 0 6
8449: PPUSH
8450: CALL_OW 12
8454: ARRAY
8455: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8456: LD_ADDR_OWVAR 39
8460: PUSH
8461: LD_VAR 0 9
8465: PUSH
8466: LD_INT 1
8468: PPUSH
8469: LD_VAR 0 9
8473: PPUSH
8474: CALL_OW 12
8478: ARRAY
8479: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8480: LD_ADDR_OWVAR 38
8484: PUSH
8485: LD_VAR 0 8
8489: PUSH
8490: LD_INT 1
8492: PPUSH
8493: LD_VAR 0 8
8497: PPUSH
8498: CALL_OW 12
8502: ARRAY
8503: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8504: LD_ADDR_OWVAR 40
8508: PUSH
8509: LD_VAR 0 7
8513: PUSH
8514: LD_INT 1
8516: PPUSH
8517: LD_VAR 0 7
8521: PPUSH
8522: CALL_OW 12
8526: ARRAY
8527: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8528: LD_ADDR_OWVAR 41
8532: PUSH
8533: LD_INT 100
8535: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8536: LD_ADDR_VAR 0 3
8540: PUSH
8541: LD_VAR 0 3
8545: PPUSH
8546: LD_VAR 0 3
8550: PUSH
8551: LD_INT 1
8553: PLUS
8554: PPUSH
8555: CALL_OW 45
8559: PPUSH
8560: CALL_OW 2
8564: ST_TO_ADDR
// end ;
8565: GO 8178
8567: POP
8568: POP
// end ;
8569: LD_VAR 0 3
8573: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8574: LD_INT 0
8576: PPUSH
8577: PPUSH
// for i = 1 to n do
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: DOUBLE
8584: LD_INT 1
8586: DEC
8587: ST_TO_ADDR
8588: LD_VAR 0 1
8592: PUSH
8593: FOR_TO
8594: IFFALSE 8668
// begin uc_nation := rand ( 1 , 3 ) ;
8596: LD_ADDR_OWVAR 21
8600: PUSH
8601: LD_INT 1
8603: PPUSH
8604: LD_INT 3
8606: PPUSH
8607: CALL_OW 12
8611: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8612: LD_INT 0
8614: PPUSH
8615: LD_INT 8
8617: PUSH
8618: LD_INT 9
8620: PUSH
8621: LD_INT 1
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 1
8631: PPUSH
8632: LD_INT 3
8634: PPUSH
8635: CALL_OW 12
8639: ARRAY
8640: PPUSH
8641: LD_VAR 0 2
8645: PPUSH
8646: CALL_OW 380
// result := result ^ CreateHuman ;
8650: LD_ADDR_VAR 0 3
8654: PUSH
8655: LD_VAR 0 3
8659: PUSH
8660: CALL_OW 44
8664: ADD
8665: ST_TO_ADDR
// end ;
8666: GO 8593
8668: POP
8669: POP
// end ;
8670: LD_VAR 0 3
8674: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8675: LD_INT 0
8677: PPUSH
8678: PPUSH
8679: PPUSH
8680: PPUSH
8681: PPUSH
8682: PPUSH
8683: PPUSH
// for i = 1 to n do
8684: LD_ADDR_VAR 0 4
8688: PUSH
8689: DOUBLE
8690: LD_INT 1
8692: DEC
8693: ST_TO_ADDR
8694: LD_VAR 0 1
8698: PUSH
8699: FOR_TO
8700: IFFALSE 9096
// begin uc_nation := rand ( 1 , 3 ) ;
8702: LD_ADDR_OWVAR 21
8706: PUSH
8707: LD_INT 1
8709: PPUSH
8710: LD_INT 3
8712: PPUSH
8713: CALL_OW 12
8717: ST_TO_ADDR
// case uc_nation of 1 :
8718: LD_OWVAR 21
8722: PUSH
8723: LD_INT 1
8725: DOUBLE
8726: EQUAL
8727: IFTRUE 8731
8729: GO 8804
8731: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8732: LD_ADDR_VAR 0 6
8736: PUSH
8737: LD_INT 4
8739: PUSH
8740: LD_INT 5
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8747: LD_ADDR_VAR 0 7
8751: PUSH
8752: LD_INT 6
8754: PUSH
8755: LD_INT 7
8757: PUSH
8758: LD_INT 10
8760: PUSH
8761: LD_EXP 14
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8772: LD_ADDR_VAR 0 8
8776: PUSH
8777: LD_INT 1
8779: PUSH
8780: LD_INT 3
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8787: LD_ADDR_VAR 0 9
8791: PUSH
8792: LD_INT 1
8794: PUSH
8795: LD_INT 3
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: ST_TO_ADDR
// end ; 2 :
8802: GO 8961
8804: LD_INT 2
8806: DOUBLE
8807: EQUAL
8808: IFTRUE 8812
8810: GO 8885
8812: POP
// begin chassis := [ ar_half_tracked ] ;
8813: LD_ADDR_VAR 0 6
8817: PUSH
8818: LD_INT 14
8820: PUSH
8821: EMPTY
8822: LIST
8823: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8824: LD_ADDR_VAR 0 7
8828: PUSH
8829: LD_EXP 13
8833: PUSH
8834: LD_INT 26
8836: PUSH
8837: LD_INT 28
8839: PUSH
8840: LD_INT 29
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8849: LD_ADDR_VAR 0 8
8853: PUSH
8854: LD_INT 1
8856: PUSH
8857: LD_INT 5
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8864: LD_ADDR_VAR 0 9
8868: PUSH
8869: LD_INT 1
8871: PUSH
8872: LD_INT 2
8874: PUSH
8875: LD_INT 3
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: ST_TO_ADDR
// end ; 3 :
8883: GO 8961
8885: LD_INT 3
8887: DOUBLE
8888: EQUAL
8889: IFTRUE 8893
8891: GO 8960
8893: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8894: LD_ADDR_VAR 0 6
8898: PUSH
8899: LD_INT 23
8901: PUSH
8902: LD_INT 24
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8909: LD_ADDR_VAR 0 7
8913: PUSH
8914: LD_INT 46
8916: PUSH
8917: LD_INT 45
8919: PUSH
8920: LD_INT 49
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8928: LD_ADDR_VAR 0 8
8932: PUSH
8933: LD_INT 1
8935: PUSH
8936: LD_INT 3
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8943: LD_ADDR_VAR 0 9
8947: PUSH
8948: LD_INT 1
8950: PUSH
8951: LD_INT 3
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: ST_TO_ADDR
// end ; end ;
8958: GO 8961
8960: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8961: LD_ADDR_OWVAR 37
8965: PUSH
8966: LD_VAR 0 6
8970: PUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 6
8978: PPUSH
8979: CALL_OW 12
8983: ARRAY
8984: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8985: LD_ADDR_OWVAR 39
8989: PUSH
8990: LD_VAR 0 9
8994: PUSH
8995: LD_INT 1
8997: PPUSH
8998: LD_VAR 0 9
9002: PPUSH
9003: CALL_OW 12
9007: ARRAY
9008: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
9009: LD_ADDR_OWVAR 38
9013: PUSH
9014: LD_VAR 0 8
9018: PUSH
9019: LD_INT 1
9021: PPUSH
9022: LD_VAR 0 8
9026: PPUSH
9027: CALL_OW 12
9031: ARRAY
9032: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
9033: LD_ADDR_OWVAR 40
9037: PUSH
9038: LD_VAR 0 7
9042: PUSH
9043: LD_INT 1
9045: PPUSH
9046: LD_VAR 0 7
9050: PPUSH
9051: CALL_OW 12
9055: ARRAY
9056: ST_TO_ADDR
// vc_fuel_battery := 100 ;
9057: LD_ADDR_OWVAR 41
9061: PUSH
9062: LD_INT 100
9064: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
9065: LD_ADDR_VAR 0 3
9069: PUSH
9070: LD_VAR 0 3
9074: PPUSH
9075: LD_VAR 0 3
9079: PUSH
9080: LD_INT 1
9082: PLUS
9083: PPUSH
9084: CALL_OW 45
9088: PPUSH
9089: CALL_OW 2
9093: ST_TO_ADDR
// end ;
9094: GO 8699
9096: POP
9097: POP
// end ; end_of_file
9098: LD_VAR 0 3
9102: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
9103: LD_INT 22
9105: PUSH
9106: LD_INT 7
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 69
9117: IFFALSE 9623
9119: GO 9121
9121: DISABLE
9122: LD_INT 0
9124: PPUSH
9125: PPUSH
9126: PPUSH
// begin enable ;
9127: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
9128: LD_ADDR_VAR 0 3
9132: PUSH
9133: LD_INT 22
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 69
9147: ST_TO_ADDR
// for i in tmp do
9148: LD_ADDR_VAR 0 1
9152: PUSH
9153: LD_VAR 0 3
9157: PUSH
9158: FOR_IN
9159: IFFALSE 9621
// begin case GetType ( i ) of unit_human :
9161: LD_VAR 0 1
9165: PPUSH
9166: CALL_OW 247
9170: PUSH
9171: LD_INT 1
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9378
9179: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
9180: LD_VAR 0 1
9184: PPUSH
9185: CALL_OW 256
9189: PUSH
9190: LD_INT 250
9192: LESS
9193: PUSH
9194: LD_INT 5
9196: PPUSH
9197: LD_INT 7
9199: PPUSH
9200: CALL_OW 321
9204: PUSH
9205: LD_INT 2
9207: NONEQUAL
9208: AND
9209: IFFALSE 9213
// continue ;
9211: GO 9158
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
9213: LD_VAR 0 1
9217: PPUSH
9218: CALL_OW 257
9222: PUSH
9223: LD_INT 12
9225: PUSH
9226: LD_INT 15
9228: PUSH
9229: LD_INT 16
9231: PUSH
9232: LD_INT 17
9234: PUSH
9235: LD_INT 1
9237: PUSH
9238: LD_INT 5
9240: PUSH
9241: LD_INT 6
9243: PUSH
9244: LD_INT 7
9246: PUSH
9247: LD_INT 8
9249: PUSH
9250: LD_INT 9
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: IN
9265: IFFALSE 9303
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9267: LD_VAR 0 1
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_OWVAR 2
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PPUSH
9284: CALL_OW 69
9288: PPUSH
9289: LD_VAR 0 1
9293: PPUSH
9294: CALL_OW 74
9298: PPUSH
9299: CALL_OW 115
// if GetClass ( i ) = 3 then
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 257
9312: PUSH
9313: LD_INT 3
9315: EQUAL
9316: IFFALSE 9376
// if IsInUnit ( i ) then
9318: LD_VAR 0 1
9322: PPUSH
9323: CALL_OW 310
9327: IFFALSE 9367
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
9329: LD_VAR 0 1
9333: PPUSH
9334: LD_INT 22
9336: PUSH
9337: LD_OWVAR 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PPUSH
9346: CALL_OW 69
9350: PPUSH
9351: LD_VAR 0 1
9355: PPUSH
9356: CALL_OW 74
9360: PPUSH
9361: CALL_OW 115
9365: GO 9376
// ComEspace ( i ) ;
9367: LD_VAR 0 1
9371: PPUSH
9372: CALL 2259 0 1
// end ; unit_vehicle :
9376: GO 9619
9378: LD_INT 2
9380: DOUBLE
9381: EQUAL
9382: IFTRUE 9386
9384: GO 9618
9386: POP
// begin if GetLives ( i ) > 250 then
9387: LD_VAR 0 1
9391: PPUSH
9392: CALL_OW 256
9396: PUSH
9397: LD_INT 250
9399: GREATER
9400: IFFALSE 9616
// begin if GetWeapon ( i ) = us_artillery then
9402: LD_VAR 0 1
9406: PPUSH
9407: CALL_OW 264
9411: PUSH
9412: LD_EXP 14
9416: EQUAL
9417: IFFALSE 9485
// begin if IsInArea ( i , zoneOut ) then
9419: LD_VAR 0 1
9423: PPUSH
9424: LD_INT 4
9426: PPUSH
9427: CALL_OW 308
9431: IFFALSE 9447
// ComMoveToArea ( i , zoneBorder ) else
9433: LD_VAR 0 1
9437: PPUSH
9438: LD_INT 9
9440: PPUSH
9441: CALL_OW 113
9445: GO 9483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9447: LD_VAR 0 1
9451: PPUSH
9452: LD_INT 22
9454: PUSH
9455: LD_OWVAR 2
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PPUSH
9464: CALL_OW 69
9468: PPUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: CALL_OW 74
9478: PPUSH
9479: CALL_OW 115
// end else
9483: GO 9616
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9485: LD_VAR 0 1
9489: PPUSH
9490: CALL_OW 264
9494: PUSH
9495: LD_INT 11
9497: PUSH
9498: LD_INT 30
9500: PUSH
9501: LD_EXP 17
9505: PUSH
9506: LD_INT 49
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: IN
9515: IFFALSE 9545
// begin if IsInArea ( i , zoneOut ) then
9517: LD_VAR 0 1
9521: PPUSH
9522: LD_INT 4
9524: PPUSH
9525: CALL_OW 308
9529: IFFALSE 9543
// ComSpecMove ( i , specPos ) ;
9531: LD_VAR 0 1
9535: PPUSH
9536: LD_INT 8
9538: PPUSH
9539: CALL 2305 0 2
// end else
9543: GO 9616
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9545: LD_VAR 0 1
9549: PPUSH
9550: CALL_OW 264
9554: PUSH
9555: LD_EXP 13
9559: PUSH
9560: LD_INT 29
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: IN
9567: IFFALSE 9580
// ComSpecAttack ( i ) else
9569: LD_VAR 0 1
9573: PPUSH
9574: CALL 2733 0 1
9578: GO 9616
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_INT 22
9587: PUSH
9588: LD_OWVAR 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PPUSH
9597: CALL_OW 69
9601: PPUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 74
9611: PPUSH
9612: CALL_OW 115
// end ; end ; end ;
9616: GO 9619
9618: POP
// end ;
9619: GO 9158
9621: POP
9622: POP
// end ; end_of_file
9623: PPOPN 3
9625: END
// export function InitDisplay ; begin
9626: LD_INT 0
9628: PPUSH
// while true do
9629: LD_INT 1
9631: IFFALSE 9718
// begin if waveNumber < 100 then
9633: LD_EXP 5
9637: PUSH
9638: LD_INT 100
9640: LESS
9641: IFFALSE 9692
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9643: LD_ADDR_OWVAR 47
9647: PUSH
9648: LD_STRING #Tick
9650: PUSH
9651: LD_OWVAR 1
9655: PUSH
9656: LD_STRING #Points
9658: PUSH
9659: LD_EXP 2
9663: PUSH
9664: LD_STRING #Attack
9666: PUSH
9667: LD_EXP 4
9671: PUSH
9672: LD_STRING #Wave
9674: PUSH
9675: LD_EXP 5
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: ST_TO_ADDR
9690: GO 9709
// Display_Strings := [ #Win , points ] ;
9692: LD_ADDR_OWVAR 47
9696: PUSH
9697: LD_STRING #Win
9699: PUSH
9700: LD_EXP 2
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9709: LD_INT 35
9711: PPUSH
9712: CALL_OW 67
// end ;
9716: GO 9629
// end ; end_of_file
9718: LD_VAR 0 1
9722: RET
// export function InitBonus ; var i , chance ; begin
9723: LD_INT 0
9725: PPUSH
9726: PPUSH
9727: PPUSH
// chance := rand ( 1 , 99 ) ;
9728: LD_ADDR_VAR 0 3
9732: PUSH
9733: LD_INT 1
9735: PPUSH
9736: LD_INT 99
9738: PPUSH
9739: CALL_OW 12
9743: ST_TO_ADDR
// case chance of 1 .. 10 :
9744: LD_VAR 0 3
9748: PUSH
9749: LD_INT 1
9751: DOUBLE
9752: GREATEREQUAL
9753: IFFALSE 9761
9755: LD_INT 10
9757: DOUBLE
9758: LESSEQUAL
9759: IFTRUE 9763
9761: GO 9774
9763: POP
// i := 5 ; 11 .. 25 :
9764: LD_ADDR_VAR 0 2
9768: PUSH
9769: LD_INT 5
9771: ST_TO_ADDR
9772: GO 9875
9774: LD_INT 11
9776: DOUBLE
9777: GREATEREQUAL
9778: IFFALSE 9786
9780: LD_INT 25
9782: DOUBLE
9783: LESSEQUAL
9784: IFTRUE 9788
9786: GO 9799
9788: POP
// i := 3 ; 26 .. 40 :
9789: LD_ADDR_VAR 0 2
9793: PUSH
9794: LD_INT 3
9796: ST_TO_ADDR
9797: GO 9875
9799: LD_INT 26
9801: DOUBLE
9802: GREATEREQUAL
9803: IFFALSE 9811
9805: LD_INT 40
9807: DOUBLE
9808: LESSEQUAL
9809: IFTRUE 9813
9811: GO 9824
9813: POP
// i := 2 ; 41 .. 60 :
9814: LD_ADDR_VAR 0 2
9818: PUSH
9819: LD_INT 2
9821: ST_TO_ADDR
9822: GO 9875
9824: LD_INT 41
9826: DOUBLE
9827: GREATEREQUAL
9828: IFFALSE 9836
9830: LD_INT 60
9832: DOUBLE
9833: LESSEQUAL
9834: IFTRUE 9838
9836: GO 9849
9838: POP
// i := 4 ; 61 .. 99 :
9839: LD_ADDR_VAR 0 2
9843: PUSH
9844: LD_INT 4
9846: ST_TO_ADDR
9847: GO 9875
9849: LD_INT 61
9851: DOUBLE
9852: GREATEREQUAL
9853: IFFALSE 9861
9855: LD_INT 99
9857: DOUBLE
9858: LESSEQUAL
9859: IFTRUE 9863
9861: GO 9874
9863: POP
// i := 1 ; end ;
9864: LD_ADDR_VAR 0 2
9868: PUSH
9869: LD_INT 1
9871: ST_TO_ADDR
9872: GO 9875
9874: POP
// case i of 1 :
9875: LD_VAR 0 2
9879: PUSH
9880: LD_INT 1
9882: DOUBLE
9883: EQUAL
9884: IFTRUE 9888
9886: GO 9977
9888: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9889: LD_INT 22
9891: PUSH
9892: LD_OWVAR 2
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 2
9903: PUSH
9904: LD_INT 25
9906: PUSH
9907: LD_INT 12
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 25
9916: PUSH
9917: LD_INT 16
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 25
9926: PUSH
9927: LD_INT 15
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 25
9936: PUSH
9937: LD_INT 17
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 69
9959: PUSH
9960: LD_INT 10
9962: GREATEREQUAL
9963: IFFALSE 9971
// BonusIV else
9965: CALL 10550 0 0
9969: GO 9975
// BonusI ;
9971: CALL 10055 0 0
// end ; 2 :
9975: GO 10050
9977: LD_INT 2
9979: DOUBLE
9980: EQUAL
9981: IFTRUE 9985
9983: GO 9992
9985: POP
// begin BonusII ;
9986: CALL 10228 0 0
// end ; 3 :
9990: GO 10050
9992: LD_INT 3
9994: DOUBLE
9995: EQUAL
9996: IFTRUE 10000
9998: GO 10007
10000: POP
// begin BonusIII ;
10001: CALL 10376 0 0
// end ; 4 :
10005: GO 10050
10007: LD_INT 4
10009: DOUBLE
10010: EQUAL
10011: IFTRUE 10015
10013: GO 10022
10015: POP
// begin BonusIV ;
10016: CALL 10550 0 0
// end ; 5 :
10020: GO 10050
10022: LD_INT 5
10024: DOUBLE
10025: EQUAL
10026: IFTRUE 10030
10028: GO 10049
10030: POP
// begin if graveyard then
10031: LD_EXP 8
10035: IFFALSE 10043
// BonusV else
10037: CALL 10968 0 0
10041: GO 10047
// BonusIII ;
10043: CALL 10376 0 0
// end ; end ;
10047: GO 10050
10049: POP
// end ;
10050: LD_VAR 0 1
10054: RET
// export function BonusI ; var i ; begin
10055: LD_INT 0
10057: PPUSH
10058: PPUSH
// case Query ( AddGift1 ) of 1 :
10059: LD_STRING AddGift1
10061: PPUSH
10062: CALL_OW 97
10066: PUSH
10067: LD_INT 1
10069: DOUBLE
10070: EQUAL
10071: IFTRUE 10075
10073: GO 10154
10075: POP
// begin for i = 1 to 3 do
10076: LD_ADDR_VAR 0 2
10080: PUSH
10081: DOUBLE
10082: LD_INT 1
10084: DEC
10085: ST_TO_ADDR
10086: LD_INT 3
10088: PUSH
10089: FOR_TO
10090: IFFALSE 10150
// begin uc_side := your_side ;
10092: LD_ADDR_OWVAR 20
10096: PUSH
10097: LD_OWVAR 2
10101: ST_TO_ADDR
// uc_nation := 0 ;
10102: LD_ADDR_OWVAR 21
10106: PUSH
10107: LD_INT 0
10109: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10110: LD_INT 0
10112: PPUSH
10113: LD_INT 12
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
10123: CALL_OW 44
10127: PPUSH
10128: LD_EXP 9
10132: PPUSH
10133: LD_EXP 10
10137: PPUSH
10138: LD_INT 15
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 50
// end ;
10148: GO 10089
10150: POP
10151: POP
// end ; 2 :
10152: GO 10223
10154: LD_INT 2
10156: DOUBLE
10157: EQUAL
10158: IFTRUE 10162
10160: GO 10204
10162: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10163: LD_EXP 11
10167: PPUSH
10168: CALL_OW 274
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: LD_EXP 11
10180: PPUSH
10181: CALL_OW 274
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: CALL_OW 275
10193: PUSH
10194: LD_INT 100
10196: PLUS
10197: PPUSH
10198: CALL_OW 277
// end ; 3 :
10202: GO 10223
10204: LD_INT 3
10206: DOUBLE
10207: EQUAL
10208: IFTRUE 10212
10210: GO 10222
10212: POP
// begin SetTeamExp ( 2 ) ;
10213: LD_INT 2
10215: PPUSH
10216: CALL 1266 0 1
// end ; end ;
10220: GO 10223
10222: POP
// end ;
10223: LD_VAR 0 1
10227: RET
// export function BonusII ; var i ; begin
10228: LD_INT 0
10230: PPUSH
10231: PPUSH
// case Query ( AddGift2 ) of 1 :
10232: LD_STRING AddGift2
10234: PPUSH
10235: CALL_OW 97
10239: PUSH
10240: LD_INT 1
10242: DOUBLE
10243: EQUAL
10244: IFTRUE 10248
10246: GO 10290
10248: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10249: LD_EXP 11
10253: PPUSH
10254: CALL_OW 274
10258: PPUSH
10259: LD_INT 1
10261: PPUSH
10262: LD_EXP 11
10266: PPUSH
10267: CALL_OW 274
10271: PPUSH
10272: LD_INT 1
10274: PPUSH
10275: CALL_OW 275
10279: PUSH
10280: LD_INT 500
10282: PLUS
10283: PPUSH
10284: CALL_OW 277
// end ; 2 :
10288: GO 10371
10290: LD_INT 2
10292: DOUBLE
10293: EQUAL
10294: IFTRUE 10298
10296: GO 10308
10298: POP
// begin SetTeamExp ( 3 ) ;
10299: LD_INT 3
10301: PPUSH
10302: CALL 1266 0 1
// end ; 3 :
10306: GO 10371
10308: LD_INT 3
10310: DOUBLE
10311: EQUAL
10312: IFTRUE 10316
10314: GO 10370
10316: POP
// begin uc_side = your_side ;
10317: LD_ADDR_OWVAR 20
10321: PUSH
10322: LD_OWVAR 2
10326: ST_TO_ADDR
// uc_nation = nation_russian ;
10327: LD_ADDR_OWVAR 21
10331: PUSH
10332: LD_INT 3
10334: ST_TO_ADDR
// vc_chassis = 25 ;
10335: LD_ADDR_OWVAR 37
10339: PUSH
10340: LD_INT 25
10342: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10343: CALL_OW 45
10347: PPUSH
10348: LD_EXP 9
10352: PPUSH
10353: LD_EXP 10
10357: PPUSH
10358: LD_INT 15
10360: PPUSH
10361: LD_INT 1
10363: PPUSH
10364: CALL_OW 50
// end ; end ;
10368: GO 10371
10370: POP
// end ;
10371: LD_VAR 0 1
10375: RET
// export function BonusIII ; var i ; begin
10376: LD_INT 0
10378: PPUSH
10379: PPUSH
// case Query ( AddGift3 ) of 1 :
10380: LD_STRING AddGift3
10382: PPUSH
10383: CALL_OW 97
10387: PUSH
10388: LD_INT 1
10390: DOUBLE
10391: EQUAL
10392: IFTRUE 10396
10394: GO 10438
10396: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
10397: LD_EXP 11
10401: PPUSH
10402: CALL_OW 274
10406: PPUSH
10407: LD_INT 1
10409: PPUSH
10410: LD_EXP 11
10414: PPUSH
10415: CALL_OW 274
10419: PPUSH
10420: LD_INT 1
10422: PPUSH
10423: CALL_OW 275
10427: PUSH
10428: LD_INT 1000
10430: PLUS
10431: PPUSH
10432: CALL_OW 277
// end ; 2 :
10436: GO 10545
10438: LD_INT 2
10440: DOUBLE
10441: EQUAL
10442: IFTRUE 10446
10444: GO 10458
10446: POP
// begin PrepareGuards ( waveNumber ) ;
10447: LD_EXP 5
10451: PPUSH
10452: CALL 1412 0 1
// end ; 3 :
10456: GO 10545
10458: LD_INT 3
10460: DOUBLE
10461: EQUAL
10462: IFTRUE 10466
10464: GO 10544
10466: POP
// begin uc_side = your_side ;
10467: LD_ADDR_OWVAR 20
10471: PUSH
10472: LD_OWVAR 2
10476: ST_TO_ADDR
// uc_nation = nation_american ;
10477: LD_ADDR_OWVAR 21
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// vc_chassis = us_morphling ;
10485: LD_ADDR_OWVAR 37
10489: PUSH
10490: LD_INT 5
10492: ST_TO_ADDR
// vc_engine := engine_siberite ;
10493: LD_ADDR_OWVAR 39
10497: PUSH
10498: LD_INT 3
10500: ST_TO_ADDR
// vc_control := control_computer ;
10501: LD_ADDR_OWVAR 38
10505: PUSH
10506: LD_INT 3
10508: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10509: LD_ADDR_OWVAR 40
10513: PUSH
10514: LD_INT 8
10516: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10517: CALL_OW 45
10521: PPUSH
10522: LD_EXP 9
10526: PPUSH
10527: LD_EXP 10
10531: PPUSH
10532: LD_INT 15
10534: PPUSH
10535: LD_INT 1
10537: PPUSH
10538: CALL_OW 50
// end ; end ;
10542: GO 10545
10544: POP
// end ;
10545: LD_VAR 0 1
10549: RET
// export function BonusIV ; var i ; begin
10550: LD_INT 0
10552: PPUSH
10553: PPUSH
// case Query ( AddGift4 ) of 1 :
10554: LD_STRING AddGift4
10556: PPUSH
10557: CALL_OW 97
10561: PUSH
10562: LD_INT 1
10564: DOUBLE
10565: EQUAL
10566: IFTRUE 10570
10568: GO 10894
10570: POP
// begin i := rand ( 1 , 3 ) ;
10571: LD_ADDR_VAR 0 2
10575: PUSH
10576: LD_INT 1
10578: PPUSH
10579: LD_INT 3
10581: PPUSH
10582: CALL_OW 12
10586: ST_TO_ADDR
// uc_side := your_side ;
10587: LD_ADDR_OWVAR 20
10591: PUSH
10592: LD_OWVAR 2
10596: ST_TO_ADDR
// case i of 1 :
10597: LD_VAR 0 2
10601: PUSH
10602: LD_INT 1
10604: DOUBLE
10605: EQUAL
10606: IFTRUE 10610
10608: GO 10697
10610: POP
// begin uc_nation := nation_arabian ;
10611: LD_ADDR_OWVAR 21
10615: PUSH
10616: LD_INT 2
10618: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10619: LD_ADDR_OWVAR 37
10623: PUSH
10624: LD_INT 14
10626: ST_TO_ADDR
// vc_engine := engine_combustion ;
10627: LD_ADDR_OWVAR 39
10631: PUSH
10632: LD_INT 1
10634: ST_TO_ADDR
// vc_control := control_manual ;
10635: LD_ADDR_OWVAR 38
10639: PUSH
10640: LD_INT 1
10642: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10643: LD_ADDR_OWVAR 40
10647: PUSH
10648: LD_INT 27
10650: PUSH
10651: LD_INT 28
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 1
10660: PPUSH
10661: LD_INT 2
10663: PPUSH
10664: CALL_OW 12
10668: ARRAY
10669: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10670: CALL_OW 45
10674: PPUSH
10675: LD_EXP 9
10679: PPUSH
10680: LD_EXP 10
10684: PPUSH
10685: LD_INT 15
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 50
// end ; 2 :
10695: GO 10892
10697: LD_INT 2
10699: DOUBLE
10700: EQUAL
10701: IFTRUE 10705
10703: GO 10796
10705: POP
// begin uc_nation := nation_american ;
10706: LD_ADDR_OWVAR 21
10710: PUSH
10711: LD_INT 1
10713: ST_TO_ADDR
// vc_chassis := us_morphling ;
10714: LD_ADDR_OWVAR 37
10718: PUSH
10719: LD_INT 5
10721: ST_TO_ADDR
// vc_engine := engine_siberite ;
10722: LD_ADDR_OWVAR 39
10726: PUSH
10727: LD_INT 3
10729: ST_TO_ADDR
// vc_control := control_computer ;
10730: LD_ADDR_OWVAR 38
10734: PUSH
10735: LD_INT 3
10737: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10738: LD_ADDR_OWVAR 40
10742: PUSH
10743: LD_INT 12
10745: PUSH
10746: LD_INT 11
10748: PUSH
10749: LD_INT 7
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 1
10759: PPUSH
10760: LD_INT 3
10762: PPUSH
10763: CALL_OW 12
10767: ARRAY
10768: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10769: CALL_OW 45
10773: PPUSH
10774: LD_EXP 9
10778: PPUSH
10779: LD_EXP 10
10783: PPUSH
10784: LD_INT 15
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: CALL_OW 50
// end ; 3 :
10794: GO 10892
10796: LD_INT 3
10798: DOUBLE
10799: EQUAL
10800: IFTRUE 10804
10802: GO 10891
10804: POP
// begin uc_nation := nation_russian ;
10805: LD_ADDR_OWVAR 21
10809: PUSH
10810: LD_INT 3
10812: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10813: LD_ADDR_OWVAR 37
10817: PUSH
10818: LD_INT 22
10820: ST_TO_ADDR
// vc_engine := engine_combustion ;
10821: LD_ADDR_OWVAR 39
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// vc_control := control_manual ;
10829: LD_ADDR_OWVAR 38
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10837: LD_ADDR_OWVAR 40
10841: PUSH
10842: LD_INT 45
10844: PUSH
10845: LD_INT 44
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: LD_INT 1
10854: PPUSH
10855: LD_INT 2
10857: PPUSH
10858: CALL_OW 12
10862: ARRAY
10863: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10864: CALL_OW 45
10868: PPUSH
10869: LD_EXP 9
10873: PPUSH
10874: LD_EXP 10
10878: PPUSH
10879: LD_INT 15
10881: PPUSH
10882: LD_INT 1
10884: PPUSH
10885: CALL_OW 50
// end ; end ;
10889: GO 10892
10891: POP
// end ; 2 :
10892: GO 10963
10894: LD_INT 2
10896: DOUBLE
10897: EQUAL
10898: IFTRUE 10902
10900: GO 10944
10902: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10903: LD_EXP 11
10907: PPUSH
10908: CALL_OW 274
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: LD_EXP 11
10920: PPUSH
10921: CALL_OW 274
10925: PPUSH
10926: LD_INT 1
10928: PPUSH
10929: CALL_OW 275
10933: PUSH
10934: LD_INT 100
10936: PLUS
10937: PPUSH
10938: CALL_OW 277
// end ; 3 :
10942: GO 10963
10944: LD_INT 3
10946: DOUBLE
10947: EQUAL
10948: IFTRUE 10952
10950: GO 10962
10952: POP
// begin SetTeamExp ( 2 ) ;
10953: LD_INT 2
10955: PPUSH
10956: CALL 1266 0 1
// end ; end ;
10960: GO 10963
10962: POP
// end ;
10963: LD_VAR 0 1
10967: RET
// export function BonusV ; var i , j ; begin
10968: LD_INT 0
10970: PPUSH
10971: PPUSH
10972: PPUSH
// case Query ( AddGift5 ) of 1 :
10973: LD_STRING AddGift5
10975: PPUSH
10976: CALL_OW 97
10980: PUSH
10981: LD_INT 1
10983: DOUBLE
10984: EQUAL
10985: IFTRUE 10989
10987: GO 11333
10989: POP
// begin for j = 1 to 3 do
10990: LD_ADDR_VAR 0 3
10994: PUSH
10995: DOUBLE
10996: LD_INT 1
10998: DEC
10999: ST_TO_ADDR
11000: LD_INT 3
11002: PUSH
11003: FOR_TO
11004: IFFALSE 11329
// begin i := rand ( 1 , 3 ) ;
11006: LD_ADDR_VAR 0 2
11010: PUSH
11011: LD_INT 1
11013: PPUSH
11014: LD_INT 3
11016: PPUSH
11017: CALL_OW 12
11021: ST_TO_ADDR
// uc_side := your_side ;
11022: LD_ADDR_OWVAR 20
11026: PUSH
11027: LD_OWVAR 2
11031: ST_TO_ADDR
// case i of 1 :
11032: LD_VAR 0 2
11036: PUSH
11037: LD_INT 1
11039: DOUBLE
11040: EQUAL
11041: IFTRUE 11045
11043: GO 11132
11045: POP
// begin uc_nation := nation_arabian ;
11046: LD_ADDR_OWVAR 21
11050: PUSH
11051: LD_INT 2
11053: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11054: LD_ADDR_OWVAR 37
11058: PUSH
11059: LD_INT 14
11061: ST_TO_ADDR
// vc_engine := engine_combustion ;
11062: LD_ADDR_OWVAR 39
11066: PUSH
11067: LD_INT 1
11069: ST_TO_ADDR
// vc_control := control_manual ;
11070: LD_ADDR_OWVAR 38
11074: PUSH
11075: LD_INT 1
11077: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11078: LD_ADDR_OWVAR 40
11082: PUSH
11083: LD_INT 27
11085: PUSH
11086: LD_INT 28
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 1
11095: PPUSH
11096: LD_INT 2
11098: PPUSH
11099: CALL_OW 12
11103: ARRAY
11104: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11105: CALL_OW 45
11109: PPUSH
11110: LD_EXP 9
11114: PPUSH
11115: LD_EXP 10
11119: PPUSH
11120: LD_INT 15
11122: PPUSH
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 50
// end ; 2 :
11130: GO 11327
11132: LD_INT 2
11134: DOUBLE
11135: EQUAL
11136: IFTRUE 11140
11138: GO 11231
11140: POP
// begin uc_nation := nation_american ;
11141: LD_ADDR_OWVAR 21
11145: PUSH
11146: LD_INT 1
11148: ST_TO_ADDR
// vc_chassis := us_morphling ;
11149: LD_ADDR_OWVAR 37
11153: PUSH
11154: LD_INT 5
11156: ST_TO_ADDR
// vc_engine := engine_siberite ;
11157: LD_ADDR_OWVAR 39
11161: PUSH
11162: LD_INT 3
11164: ST_TO_ADDR
// vc_control := control_computer ;
11165: LD_ADDR_OWVAR 38
11169: PUSH
11170: LD_INT 3
11172: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
11173: LD_ADDR_OWVAR 40
11177: PUSH
11178: LD_INT 12
11180: PUSH
11181: LD_INT 11
11183: PUSH
11184: LD_INT 7
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_INT 3
11197: PPUSH
11198: CALL_OW 12
11202: ARRAY
11203: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11204: CALL_OW 45
11208: PPUSH
11209: LD_EXP 9
11213: PPUSH
11214: LD_EXP 10
11218: PPUSH
11219: LD_INT 15
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 50
// end ; 3 :
11229: GO 11327
11231: LD_INT 3
11233: DOUBLE
11234: EQUAL
11235: IFTRUE 11239
11237: GO 11326
11239: POP
// begin uc_nation := nation_russian ;
11240: LD_ADDR_OWVAR 21
11244: PUSH
11245: LD_INT 3
11247: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
11248: LD_ADDR_OWVAR 37
11252: PUSH
11253: LD_INT 22
11255: ST_TO_ADDR
// vc_engine := engine_combustion ;
11256: LD_ADDR_OWVAR 39
11260: PUSH
11261: LD_INT 1
11263: ST_TO_ADDR
// vc_control := control_manual ;
11264: LD_ADDR_OWVAR 38
11268: PUSH
11269: LD_INT 1
11271: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
11272: LD_ADDR_OWVAR 40
11276: PUSH
11277: LD_INT 45
11279: PUSH
11280: LD_INT 44
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 2
11292: PPUSH
11293: CALL_OW 12
11297: ARRAY
11298: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11299: CALL_OW 45
11303: PPUSH
11304: LD_EXP 9
11308: PPUSH
11309: LD_EXP 10
11313: PPUSH
11314: LD_INT 15
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 50
// end ; end ;
11324: GO 11327
11326: POP
// end ;
11327: GO 11003
11329: POP
11330: POP
// end ; 2 :
11331: GO 11399
11333: LD_INT 2
11335: DOUBLE
11336: EQUAL
11337: IFTRUE 11341
11339: GO 11383
11341: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
11342: LD_EXP 11
11346: PPUSH
11347: CALL_OW 274
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: LD_EXP 11
11359: PPUSH
11360: CALL_OW 274
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: CALL_OW 275
11372: PUSH
11373: LD_INT 500
11375: PLUS
11376: PPUSH
11377: CALL_OW 277
// end ; 3 :
11381: GO 11399
11383: LD_INT 3
11385: DOUBLE
11386: EQUAL
11387: IFTRUE 11391
11389: GO 11398
11391: POP
// begin GetBack ( ) ;
11392: CALL 2072 0 0
// end ; end ;
11396: GO 11399
11398: POP
// end ;
11399: LD_VAR 0 1
11403: RET
