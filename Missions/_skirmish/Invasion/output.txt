// starting begin InitSettings ;
   0: CALL 2932 0 0
// InitGame ;
   4: CALL 2970 0 0
// InitDisplay ;
   8: CALL 9475 0 0
// end ; end_of_file
  12: END
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// if pos < 1 then
  19: LD_VAR 0 2
  23: PUSH
  24: LD_INT 1
  26: LESS
  27: IFFALSE 31
// exit ;
  29: GO 334
// if pos = 1 then
  31: LD_VAR 0 2
  35: PUSH
  36: LD_INT 1
  38: EQUAL
  39: IFFALSE 72
// result := Replace ( arr , pos [ 1 ] , value ) else
  41: LD_ADDR_VAR 0 4
  45: PUSH
  46: LD_VAR 0 1
  50: PPUSH
  51: LD_VAR 0 2
  55: PUSH
  56: LD_INT 1
  58: ARRAY
  59: PPUSH
  60: LD_VAR 0 3
  64: PPUSH
  65: CALL_OW 1
  69: ST_TO_ADDR
  70: GO 334
// begin tmp := arr ;
  72: LD_ADDR_VAR 0 6
  76: PUSH
  77: LD_VAR 0 1
  81: ST_TO_ADDR
// s_arr := [ tmp ] ;
  82: LD_ADDR_VAR 0 7
  86: PUSH
  87: LD_VAR 0 6
  91: PUSH
  92: EMPTY
  93: LIST
  94: ST_TO_ADDR
// for i = 1 to pos - 1 do
  95: LD_ADDR_VAR 0 5
  99: PUSH
 100: DOUBLE
 101: LD_INT 1
 103: DEC
 104: ST_TO_ADDR
 105: LD_VAR 0 2
 109: PUSH
 110: LD_INT 1
 112: MINUS
 113: PUSH
 114: FOR_TO
 115: IFFALSE 160
// begin tmp := tmp [ pos [ i ] ] ;
 117: LD_ADDR_VAR 0 6
 121: PUSH
 122: LD_VAR 0 6
 126: PUSH
 127: LD_VAR 0 2
 131: PUSH
 132: LD_VAR 0 5
 136: ARRAY
 137: ARRAY
 138: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
 139: LD_ADDR_VAR 0 7
 143: PUSH
 144: LD_VAR 0 7
 148: PUSH
 149: LD_VAR 0 6
 153: PUSH
 154: EMPTY
 155: LIST
 156: ADD
 157: ST_TO_ADDR
// end ;
 158: GO 114
 160: POP
 161: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
 162: LD_ADDR_VAR 0 6
 166: PUSH
 167: LD_VAR 0 6
 171: PPUSH
 172: LD_VAR 0 2
 176: PUSH
 177: LD_VAR 0 2
 181: ARRAY
 182: PPUSH
 183: LD_VAR 0 3
 187: PPUSH
 188: CALL_OW 1
 192: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
 193: LD_ADDR_VAR 0 7
 197: PUSH
 198: LD_VAR 0 7
 202: PPUSH
 203: LD_VAR 0 7
 207: PPUSH
 208: LD_VAR 0 6
 212: PPUSH
 213: CALL_OW 1
 217: ST_TO_ADDR
// for i = s_arr downto 2 do
 218: LD_ADDR_VAR 0 5
 222: PUSH
 223: DOUBLE
 224: LD_VAR 0 7
 228: INC
 229: ST_TO_ADDR
 230: LD_INT 2
 232: PUSH
 233: FOR_DOWNTO
 234: IFFALSE 318
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
 236: LD_ADDR_VAR 0 6
 240: PUSH
 241: LD_VAR 0 7
 245: PUSH
 246: LD_VAR 0 5
 250: PUSH
 251: LD_INT 1
 253: MINUS
 254: ARRAY
 255: PPUSH
 256: LD_VAR 0 2
 260: PUSH
 261: LD_VAR 0 5
 265: PUSH
 266: LD_INT 1
 268: MINUS
 269: ARRAY
 270: PPUSH
 271: LD_VAR 0 7
 275: PUSH
 276: LD_VAR 0 5
 280: ARRAY
 281: PPUSH
 282: CALL_OW 1
 286: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
 287: LD_ADDR_VAR 0 7
 291: PUSH
 292: LD_VAR 0 7
 296: PPUSH
 297: LD_VAR 0 5
 301: PUSH
 302: LD_INT 1
 304: MINUS
 305: PPUSH
 306: LD_VAR 0 6
 310: PPUSH
 311: CALL_OW 1
 315: ST_TO_ADDR
// end ;
 316: GO 233
 318: POP
 319: POP
// result := s_arr [ 1 ] ;
 320: LD_ADDR_VAR 0 4
 324: PUSH
 325: LD_VAR 0 7
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: ST_TO_ADDR
// end ; end ;
 334: LD_VAR 0 4
 338: RET
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// team := [ ] ;
 345: LD_ADDR_VAR 0 8
 349: PUSH
 350: EMPTY
 351: ST_TO_ADDR
// playerSquad := [ ] ;
 352: LD_ADDR_EXP 12
 356: PUSH
 357: EMPTY
 358: ST_TO_ADDR
// uc_side := nation ;
 359: LD_ADDR_OWVAR 20
 363: PUSH
 364: LD_VAR 0 1
 368: ST_TO_ADDR
// uc_nation := nation ;
 369: LD_ADDR_OWVAR 21
 373: PUSH
 374: LD_VAR 0 1
 378: ST_TO_ADDR
// hc_importance := 100 ;
 379: LD_ADDR_OWVAR 32
 383: PUSH
 384: LD_INT 100
 386: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 387: LD_INT 0
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
 402: LD_ADDR_VAR 0 8
 406: PUSH
 407: LD_VAR 0 8
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 44
 419: PPUSH
 420: CALL_OW 2
 424: ST_TO_ADDR
// hc_importance := 0 ;
 425: LD_ADDR_OWVAR 32
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to num - 1 do
 433: LD_ADDR_VAR 0 7
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 1
 450: MINUS
 451: PUSH
 452: FOR_TO
 453: IFFALSE 511
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 455: LD_INT 0
 457: PPUSH
 458: LD_VAR 0 7
 462: PUSH
 463: LD_VAR 0 3
 467: PUSH
 468: LD_INT 4
 470: DIVREAL
 471: DIV
 472: PUSH
 473: LD_INT 1
 475: PLUS
 476: PPUSH
 477: LD_VAR 0 2
 481: PPUSH
 482: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 486: LD_ADDR_VAR 0 8
 490: PUSH
 491: LD_VAR 0 8
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: CALL_OW 44
 503: PPUSH
 504: CALL_OW 2
 508: ST_TO_ADDR
// end ;
 509: GO 452
 511: POP
 512: POP
// for i in team do
 513: LD_ADDR_VAR 0 7
 517: PUSH
 518: LD_VAR 0 8
 522: PUSH
 523: FOR_IN
 524: IFFALSE 623
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 526: LD_VAR 0 7
 530: PPUSH
 531: LD_VAR 0 4
 535: PPUSH
 536: LD_VAR 0 5
 540: PPUSH
 541: LD_INT 8
 543: PPUSH
 544: LD_INT 0
 546: PPUSH
 547: CALL_OW 50
// c := c + 1 ;
 551: LD_ADDR_VAR 0 9
 555: PUSH
 556: LD_VAR 0 9
 560: PUSH
 561: LD_INT 1
 563: PLUS
 564: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 565: LD_VAR 0 7
 569: PPUSH
 570: LD_STRING grave
 572: PUSH
 573: LD_VAR 0 9
 577: STR
 578: PPUSH
 579: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 583: LD_ADDR_EXP 12
 587: PUSH
 588: LD_EXP 12
 592: PPUSH
 593: LD_VAR 0 9
 597: PPUSH
 598: LD_VAR 0 7
 602: PUSH
 603: LD_STRING grave
 605: PUSH
 606: LD_VAR 0 9
 610: STR
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PPUSH
 616: CALL_OW 2
 620: ST_TO_ADDR
// end ;
 621: GO 523
 623: POP
 624: POP
// end ;
 625: LD_VAR 0 6
 629: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// for i = 1 to type_allowed do
 635: LD_ADDR_VAR 0 7
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 790
// while ( num [ i ] > 0 ) do
 653: LD_VAR 0 1
 657: PUSH
 658: LD_VAR 0 7
 662: ARRAY
 663: PUSH
 664: LD_INT 0
 666: GREATER
 667: IFFALSE 788
// begin if num [ i ] > 5 then
 669: LD_VAR 0 1
 673: PUSH
 674: LD_VAR 0 7
 678: ARRAY
 679: PUSH
 680: LD_INT 5
 682: GREATER
 683: IFFALSE 695
// n := 5 else
 685: LD_ADDR_VAR 0 8
 689: PUSH
 690: LD_INT 5
 692: ST_TO_ADDR
 693: GO 711
// n := num [ i ] ;
 695: LD_ADDR_VAR 0 8
 699: PUSH
 700: LD_VAR 0 1
 704: PUSH
 705: LD_VAR 0 7
 709: ARRAY
 710: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 711: LD_VAR 0 2
 715: PUSH
 716: LD_VAR 0 7
 720: ARRAY
 721: PPUSH
 722: LD_VAR 0 8
 726: PPUSH
 727: LD_VAR 0 3
 731: PPUSH
 732: LD_VAR 0 4
 736: PPUSH
 737: LD_VAR 0 5
 741: PPUSH
 742: LD_INT 0
 744: PPUSH
 745: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 749: LD_ADDR_VAR 0 1
 753: PUSH
 754: LD_VAR 0 1
 758: PPUSH
 759: LD_VAR 0 7
 763: PPUSH
 764: LD_VAR 0 1
 768: PUSH
 769: LD_VAR 0 7
 773: ARRAY
 774: PUSH
 775: LD_VAR 0 8
 779: MINUS
 780: PPUSH
 781: CALL_OW 1
 785: ST_TO_ADDR
// end ;
 786: GO 653
 788: GO 650
 790: POP
 791: POP
// end ;
 792: LD_VAR 0 6
 796: RET
// export function AddPoints ( p ) ; begin
 797: LD_INT 0
 799: PPUSH
// points := points + p ;
 800: LD_ADDR_EXP 2
 804: PUSH
 805: LD_EXP 2
 809: PUSH
 810: LD_VAR 0 1
 814: PLUS
 815: ST_TO_ADDR
// end ;
 816: LD_VAR 0 2
 820: RET
// export function LoadColors ; var file ; begin
 821: LD_INT 0
 823: PPUSH
 824: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 825: CALL_OW 545
 829: PUSH
 830: LD_INT 1
 832: DOUBLE
 833: GREATEREQUAL
 834: IFFALSE 842
 836: LD_INT 3
 838: DOUBLE
 839: LESSEQUAL
 840: IFTRUE 850
 842: LD_INT 12
 844: DOUBLE
 845: EQUAL
 846: IFTRUE 850
 848: GO 861
 850: POP
// file = colors.txt ; 4 .. 5 :
 851: LD_ADDR_VAR 0 2
 855: PUSH
 856: LD_STRING colors.txt
 858: ST_TO_ADDR
 859: GO 937
 861: LD_INT 4
 863: DOUBLE
 864: GREATEREQUAL
 865: IFFALSE 873
 867: LD_INT 5
 869: DOUBLE
 870: LESSEQUAL
 871: IFTRUE 875
 873: GO 886
 875: POP
// file = colors-spring.txt ; 6 .. 8 :
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: LD_STRING colors-spring.txt
 883: ST_TO_ADDR
 884: GO 937
 886: LD_INT 6
 888: DOUBLE
 889: GREATEREQUAL
 890: IFFALSE 898
 892: LD_INT 8
 894: DOUBLE
 895: LESSEQUAL
 896: IFTRUE 900
 898: GO 911
 900: POP
// file = colors-summer.txt ; 9 .. 11 :
 901: LD_ADDR_VAR 0 2
 905: PUSH
 906: LD_STRING colors-summer.txt
 908: ST_TO_ADDR
 909: GO 937
 911: LD_INT 9
 913: DOUBLE
 914: GREATEREQUAL
 915: IFFALSE 923
 917: LD_INT 11
 919: DOUBLE
 920: LESSEQUAL
 921: IFTRUE 925
 923: GO 936
 925: POP
// file = colors-autumn.txt ; end ;
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: LD_STRING colors-autumn.txt
 933: ST_TO_ADDR
 934: GO 937
 936: POP
// LoadColorsTxt ( file ) ;
 937: LD_VAR 0 2
 941: PPUSH
 942: CALL_OW 544
// end ;
 946: LD_VAR 0 1
 950: RET
// export function TestColor ; var i ; begin
 951: LD_INT 0
 953: PPUSH
 954: PPUSH
// i = 1 ;
 955: LD_ADDR_VAR 0 2
 959: PUSH
 960: LD_INT 1
 962: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 963: LD_INT 35
 965: PPUSH
 966: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 970: LD_STRING colors-spring.txt
 972: PUSH
 973: LD_STRING colors-summer.txt
 975: PUSH
 976: LD_STRING colors-autumn.txt
 978: PUSH
 979: LD_STRING colors.txt
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 4
 995: MOD
 996: PUSH
 997: LD_INT 1
 999: PLUS
1000: ARRAY
1001: PPUSH
1002: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
1006: LD_ADDR_OWVAR 47
1010: PUSH
1011: LD_STRING Wiosna
1013: PUSH
1014: LD_STRING Lato
1016: PUSH
1017: LD_STRING Jesien
1019: PUSH
1020: LD_STRING Zima
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_VAR 0 2
1033: PUSH
1034: LD_INT 4
1036: MOD
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: ST_TO_ADDR
// i := i + 1 ;
1043: LD_ADDR_VAR 0 2
1047: PUSH
1048: LD_VAR 0 2
1052: PUSH
1053: LD_INT 1
1055: PLUS
1056: ST_TO_ADDR
// end until false ;
1057: LD_INT 0
1059: IFFALSE 963
// end ;
1061: LD_VAR 0 1
1065: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
1066: LD_INT 0
1068: PPUSH
// if x1 = x2 and y1 > y2 then
1069: LD_VAR 0 1
1073: PUSH
1074: LD_VAR 0 3
1078: EQUAL
1079: PUSH
1080: LD_VAR 0 2
1084: PUSH
1085: LD_VAR 0 4
1089: GREATER
1090: AND
1091: IFFALSE 1101
// result := 0 ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_INT 0
1100: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
1101: LD_VAR 0 1
1105: PUSH
1106: LD_VAR 0 3
1110: LESS
1111: PUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_VAR 0 4
1121: EQUAL
1122: AND
1123: IFFALSE 1133
// result := 1 ;
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_INT 1
1132: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
1133: LD_VAR 0 1
1137: PUSH
1138: LD_VAR 0 3
1142: LESS
1143: PUSH
1144: LD_VAR 0 2
1148: PUSH
1149: LD_VAR 0 4
1153: LESS
1154: AND
1155: IFFALSE 1165
// result := 2 ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 2
1164: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
1165: LD_VAR 0 1
1169: PUSH
1170: LD_VAR 0 3
1174: EQUAL
1175: PUSH
1176: LD_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: LESS
1186: AND
1187: IFFALSE 1197
// result := 3 ;
1189: LD_ADDR_VAR 0 5
1193: PUSH
1194: LD_INT 3
1196: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
1197: LD_VAR 0 1
1201: PUSH
1202: LD_VAR 0 3
1206: GREATER
1207: PUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_VAR 0 4
1217: EQUAL
1218: AND
1219: IFFALSE 1229
// result := 4 ;
1221: LD_ADDR_VAR 0 5
1225: PUSH
1226: LD_INT 4
1228: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
1229: LD_VAR 0 1
1233: PUSH
1234: LD_VAR 0 3
1238: GREATER
1239: PUSH
1240: LD_VAR 0 2
1244: PUSH
1245: LD_VAR 0 4
1249: GREATER
1250: AND
1251: IFFALSE 1261
// result := 5 ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_INT 5
1260: ST_TO_ADDR
// end ;
1261: LD_VAR 0 5
1265: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
1266: LD_INT 0
1268: PPUSH
1269: PPUSH
1270: PPUSH
1271: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_INT 22
1279: PUSH
1280: LD_OWVAR 2
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 21
1291: PUSH
1292: LD_INT 1
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: ST_TO_ADDR
// for i = 1 to amount do
1308: LD_ADDR_VAR 0 3
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 1
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1405
// begin pep := rand ( 1 , team ) ;
1326: LD_ADDR_VAR 0 5
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 4
1338: PPUSH
1339: CALL_OW 12
1343: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1344: LD_VAR 0 4
1348: PUSH
1349: LD_VAR 0 5
1353: ARRAY
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 4
1360: PPUSH
1361: CALL_OW 12
1365: PPUSH
1366: LD_INT 1000
1368: PPUSH
1369: LD_INT 10000
1371: PPUSH
1372: CALL_OW 12
1376: PPUSH
1377: CALL_OW 492
// team := team diff team [ pep ] ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_VAR 0 4
1390: PUSH
1391: LD_VAR 0 4
1395: PUSH
1396: LD_VAR 0 5
1400: ARRAY
1401: DIFF
1402: ST_TO_ADDR
// end ;
1403: GO 1323
1405: POP
1406: POP
// end ;
1407: LD_VAR 0 2
1411: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
1418: PPUSH
1419: PPUSH
1420: PPUSH
1421: PPUSH
1422: PPUSH
1423: PPUSH
1424: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1425: LD_ADDR_VAR 0 5
1429: PUSH
1430: LD_INT 7
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 517
1440: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1441: LD_ADDR_VAR 0 6
1445: PUSH
1446: LD_INT 6
1448: PPUSH
1449: LD_INT 0
1451: PPUSH
1452: CALL_OW 517
1456: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1457: LD_ADDR_VAR 0 3
1461: PUSH
1462: DOUBLE
1463: LD_INT 1
1465: DEC
1466: ST_TO_ADDR
1467: LD_VAR 0 5
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PUSH
1476: FOR_TO
1477: IFFALSE 1559
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1479: LD_ADDR_VAR 0 7
1483: PUSH
1484: LD_VAR 0 7
1488: PPUSH
1489: LD_VAR 0 7
1493: PUSH
1494: LD_INT 1
1496: PLUS
1497: PPUSH
1498: LD_VAR 0 5
1502: PUSH
1503: LD_INT 1
1505: ARRAY
1506: PUSH
1507: LD_VAR 0 3
1511: ARRAY
1512: PPUSH
1513: CALL_OW 1
1517: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1518: LD_ADDR_VAR 0 7
1522: PUSH
1523: LD_VAR 0 7
1527: PPUSH
1528: LD_VAR 0 7
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 5
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PUSH
1546: LD_VAR 0 3
1550: ARRAY
1551: PPUSH
1552: CALL_OW 1
1556: ST_TO_ADDR
// end ;
1557: GO 1476
1559: POP
1560: POP
// uc_side := 4 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 4
1568: ST_TO_ADDR
// case strenght of 1 .. 10 :
1569: LD_VAR 0 1
1573: PUSH
1574: LD_INT 1
1576: DOUBLE
1577: GREATEREQUAL
1578: IFFALSE 1586
1580: LD_INT 10
1582: DOUBLE
1583: LESSEQUAL
1584: IFTRUE 1588
1586: GO 1650
1588: POP
// begin uc_nation := 0 ;
1589: LD_ADDR_OWVAR 21
1593: PUSH
1594: LD_INT 0
1596: ST_TO_ADDR
// for i = 1 to 20 do
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 20
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1646
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1613: LD_INT 0
1615: PPUSH
1616: LD_INT 15
1618: PPUSH
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 380
// result := result ^ CreateHuman ;
1628: LD_ADDR_VAR 0 2
1632: PUSH
1633: LD_VAR 0 2
1637: PUSH
1638: CALL_OW 44
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1610
1646: POP
1647: POP
// end ; 11 .. 40 :
1648: GO 1837
1650: LD_INT 11
1652: DOUBLE
1653: GREATEREQUAL
1654: IFFALSE 1662
1656: LD_INT 40
1658: DOUBLE
1659: LESSEQUAL
1660: IFTRUE 1664
1662: GO 1743
1664: POP
// begin uc_nation := 1 ;
1665: LD_ADDR_OWVAR 21
1669: PUSH
1670: LD_INT 1
1672: ST_TO_ADDR
// for i = 1 to 20 do
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 20
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1739
// begin vc_chassis := us_medium_tracked ;
1689: LD_ADDR_OWVAR 37
1693: PUSH
1694: LD_INT 3
1696: ST_TO_ADDR
// vc_engine := engine_siberite ;
1697: LD_ADDR_OWVAR 39
1701: PUSH
1702: LD_INT 3
1704: ST_TO_ADDR
// vc_control := control_computer ;
1705: LD_ADDR_OWVAR 38
1709: PUSH
1710: LD_INT 3
1712: ST_TO_ADDR
// vc_weapon := us_laser ;
1713: LD_ADDR_OWVAR 40
1717: PUSH
1718: LD_INT 9
1720: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: LD_VAR 0 2
1730: PUSH
1731: CALL_OW 45
1735: ADD
1736: ST_TO_ADDR
// end ;
1737: GO 1686
1739: POP
1740: POP
// end ; 41 .. 100 :
1741: GO 1837
1743: LD_INT 41
1745: DOUBLE
1746: GREATEREQUAL
1747: IFFALSE 1755
1749: LD_INT 100
1751: DOUBLE
1752: LESSEQUAL
1753: IFTRUE 1757
1755: GO 1836
1757: POP
// begin uc_nation := 1 ;
1758: LD_ADDR_OWVAR 21
1762: PUSH
1763: LD_INT 1
1765: ST_TO_ADDR
// for i = 1 to 20 do
1766: LD_ADDR_VAR 0 3
1770: PUSH
1771: DOUBLE
1772: LD_INT 1
1774: DEC
1775: ST_TO_ADDR
1776: LD_INT 20
1778: PUSH
1779: FOR_TO
1780: IFFALSE 1832
// begin vc_chassis := us_morphling ;
1782: LD_ADDR_OWVAR 37
1786: PUSH
1787: LD_INT 5
1789: ST_TO_ADDR
// vc_engine := engine_siberite ;
1790: LD_ADDR_OWVAR 39
1794: PUSH
1795: LD_INT 3
1797: ST_TO_ADDR
// vc_control := control_computer ;
1798: LD_ADDR_OWVAR 38
1802: PUSH
1803: LD_INT 3
1805: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1806: LD_ADDR_OWVAR 40
1810: PUSH
1811: LD_INT 10
1813: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: LD_VAR 0 2
1823: PUSH
1824: CALL_OW 45
1828: ADD
1829: ST_TO_ADDR
// end ;
1830: GO 1779
1832: POP
1833: POP
// end ; end ;
1834: GO 1837
1836: POP
// for i in result do
1837: LD_ADDR_VAR 0 3
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: FOR_IN
1848: IFFALSE 2065
// begin x := base_area [ 1 ] [ 1 ] ;
1850: LD_ADDR_VAR 0 9
1854: PUSH
1855: LD_VAR 0 6
1859: PUSH
1860: LD_INT 1
1862: ARRAY
1863: PUSH
1864: LD_INT 1
1866: ARRAY
1867: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1868: LD_ADDR_VAR 0 10
1872: PUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_INT 2
1880: ARRAY
1881: PUSH
1882: LD_INT 1
1884: ARRAY
1885: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1886: LD_ADDR_VAR 0 8
1890: PUSH
1891: LD_VAR 0 7
1895: PPUSH
1896: LD_VAR 0 9
1900: PPUSH
1901: LD_VAR 0 10
1905: PPUSH
1906: CALL_OW 439
1910: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1911: LD_VAR 0 3
1915: PPUSH
1916: LD_VAR 0 9
1920: PPUSH
1921: LD_VAR 0 10
1925: PPUSH
1926: LD_VAR 0 8
1930: PUSH
1931: LD_INT 1
1933: ARRAY
1934: PPUSH
1935: LD_VAR 0 8
1939: PUSH
1940: LD_INT 2
1942: ARRAY
1943: PPUSH
1944: CALL 1066 0 4
1948: PPUSH
1949: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_VAR 0 9
1962: PPUSH
1963: LD_VAR 0 10
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: CALL_OW 48
// ComHold ( i ) ;
1975: LD_VAR 0 3
1979: PPUSH
1980: CALL_OW 140
// for c = 1 to 2 do
1984: LD_ADDR_VAR 0 11
1988: PUSH
1989: DOUBLE
1990: LD_INT 1
1992: DEC
1993: ST_TO_ADDR
1994: LD_INT 2
1996: PUSH
1997: FOR_TO
1998: IFFALSE 2061
// begin tmp := base_area [ c ] ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_VAR 0 6
2009: PUSH
2010: LD_VAR 0 11
2014: ARRAY
2015: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
2016: LD_ADDR_VAR 0 12
2020: PUSH
2021: LD_VAR 0 12
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: CALL_OW 3
2033: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
2034: LD_ADDR_VAR 0 6
2038: PUSH
2039: LD_VAR 0 6
2043: PPUSH
2044: LD_VAR 0 11
2048: PPUSH
2049: LD_VAR 0 12
2053: PPUSH
2054: CALL_OW 1
2058: ST_TO_ADDR
// end ;
2059: GO 1997
2061: POP
2062: POP
// end ;
2063: GO 1847
2065: POP
2066: POP
// end ;
2067: LD_VAR 0 2
2071: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
2072: LD_INT 0
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
// if graveyard = 0 then
2079: LD_EXP 8
2083: PUSH
2084: LD_INT 0
2086: EQUAL
2087: IFFALSE 2091
// exit ;
2089: GO 2254
// i := rand ( 1 , graveyard ) ;
2091: LD_ADDR_VAR 0 2
2095: PUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_EXP 8
2103: PPUSH
2104: CALL_OW 12
2108: ST_TO_ADDR
// un := graveyard [ i ] ;
2109: LD_ADDR_VAR 0 4
2113: PUSH
2114: LD_EXP 8
2118: PUSH
2119: LD_VAR 0 2
2123: ARRAY
2124: ST_TO_ADDR
// for c in playerSquad do
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 12
2134: PUSH
2135: FOR_IN
2136: IFFALSE 2172
// if un = c [ 1 ] then
2138: LD_VAR 0 4
2142: PUSH
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 1
2150: ARRAY
2151: EQUAL
2152: IFFALSE 2170
// begin new := c [ 2 ] ;
2154: LD_ADDR_VAR 0 5
2158: PUSH
2159: LD_VAR 0 3
2163: PUSH
2164: LD_INT 2
2166: ARRAY
2167: ST_TO_ADDR
// break ;
2168: GO 2172
// end ;
2170: GO 2135
2172: POP
2173: POP
// uc_side := your_side ;
2174: LD_ADDR_OWVAR 20
2178: PUSH
2179: LD_OWVAR 2
2183: ST_TO_ADDR
// uc_nation := playerNation ;
2184: LD_ADDR_OWVAR 21
2188: PUSH
2189: LD_EXP 6
2193: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
2194: LD_ADDR_VAR 0 4
2198: PUSH
2199: LD_VAR 0 5
2203: PPUSH
2204: CALL_OW 34
2208: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
2209: LD_VAR 0 4
2213: PPUSH
2214: LD_EXP 9
2218: PPUSH
2219: LD_EXP 10
2223: PPUSH
2224: LD_INT 10
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
2234: LD_ADDR_EXP 8
2238: PUSH
2239: LD_EXP 8
2243: PPUSH
2244: LD_VAR 0 2
2248: PPUSH
2249: CALL_OW 3
2253: ST_TO_ADDR
// end ;
2254: LD_VAR 0 1
2258: RET
// export function ComEspace ( un ) ; begin
2259: LD_INT 0
2261: PPUSH
// if not IsInArea ( un , zoneOut ) then
2262: LD_VAR 0 1
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: CALL_OW 308
2274: NOT
2275: IFFALSE 2291
// ComMoveToArea ( un , zoneOut ) else
2277: LD_VAR 0 1
2281: PPUSH
2282: LD_INT 4
2284: PPUSH
2285: CALL_OW 113
2289: GO 2300
// RemoveUnit ( un ) ;
2291: LD_VAR 0 1
2295: PPUSH
2296: CALL_OW 64
// end ;
2300: LD_VAR 0 2
2304: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
2305: LD_INT 0
2307: PPUSH
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// list := AreaToList ( area , 0 ) ;
2312: LD_ADDR_VAR 0 4
2316: PUSH
2317: LD_VAR 0 2
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 517
2329: ST_TO_ADDR
// if not list then
2330: LD_VAR 0 4
2334: NOT
2335: IFFALSE 2339
// exit ;
2337: GO 2501
// for i = 1 to list do
2339: LD_ADDR_VAR 0 6
2343: PUSH
2344: DOUBLE
2345: LD_INT 1
2347: DEC
2348: ST_TO_ADDR
2349: LD_VAR 0 4
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2437
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2357: LD_ADDR_VAR 0 5
2361: PUSH
2362: LD_VAR 0 5
2366: PPUSH
2367: LD_VAR 0 5
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PUSH
2385: LD_VAR 0 6
2389: ARRAY
2390: PPUSH
2391: CALL_OW 1
2395: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2396: LD_ADDR_VAR 0 5
2400: PUSH
2401: LD_VAR 0 5
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_INT 1
2413: PLUS
2414: PPUSH
2415: LD_VAR 0 4
2419: PUSH
2420: LD_INT 2
2422: ARRAY
2423: PUSH
2424: LD_VAR 0 6
2428: ARRAY
2429: PPUSH
2430: CALL_OW 1
2434: ST_TO_ADDR
// end ;
2435: GO 2354
2437: POP
2438: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2439: LD_ADDR_VAR 0 7
2443: PUSH
2444: LD_VAR 0 5
2448: PPUSH
2449: LD_VAR 0 1
2453: PPUSH
2454: CALL_OW 250
2458: PPUSH
2459: LD_VAR 0 1
2463: PPUSH
2464: CALL_OW 251
2468: PPUSH
2469: CALL_OW 439
2473: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_VAR 0 7
2483: PUSH
2484: LD_INT 1
2486: ARRAY
2487: PPUSH
2488: LD_VAR 0 7
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: CALL_OW 111
// end ;
2501: LD_VAR 0 3
2505: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2506: LD_INT 0
2508: PPUSH
2509: PPUSH
2510: PPUSH
// timer := rand ( 2 , 5 ) ;
2511: LD_ADDR_VAR 0 4
2515: PUSH
2516: LD_INT 2
2518: PPUSH
2519: LD_INT 5
2521: PPUSH
2522: CALL_OW 12
2526: ST_TO_ADDR
// while ( timer > 0 ) do
2527: LD_VAR 0 4
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: IFFALSE 2574
// begin SetUnitDisplayNumber ( un , timer ) ;
2537: LD_VAR 0 1
2541: PPUSH
2542: LD_VAR 0 4
2546: PPUSH
2547: CALL_OW 505
// timer := timer - 1 ;
2551: LD_ADDR_VAR 0 4
2555: PUSH
2556: LD_VAR 0 4
2560: PUSH
2561: LD_INT 1
2563: MINUS
2564: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// end ;
2572: GO 2527
// if timer = 0 then
2574: LD_VAR 0 4
2578: PUSH
2579: LD_INT 0
2581: EQUAL
2582: IFFALSE 2631
// for i = 1 to 3 do
2584: LD_ADDR_VAR 0 3
2588: PUSH
2589: DOUBLE
2590: LD_INT 1
2592: DEC
2593: ST_TO_ADDR
2594: LD_INT 3
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2629
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 250
2609: PPUSH
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 251
2619: PPUSH
2620: LD_INT 10
2622: PPUSH
2623: CALL_OW 453
2627: GO 2597
2629: POP
2630: POP
// end ;
2631: LD_VAR 0 2
2635: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2636: LD_INT 0
2638: PPUSH
// if unit in unreachableList then
2639: LD_VAR 0 1
2643: PUSH
2644: LD_EXP 18
2648: IN
2649: IFFALSE 2667
// unreachableList := unreachableList diff unit ;
2651: LD_ADDR_EXP 18
2655: PUSH
2656: LD_EXP 18
2660: PUSH
2661: LD_VAR 0 1
2665: DIFF
2666: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2667: LD_VAR 0 1
2671: PPUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_VAR 0 3
2681: PPUSH
2682: CALL_OW 428
2686: PPUSH
2687: CALL_OW 115
// Wait ( 1 ) ;
2691: LD_INT 1
2693: PPUSH
2694: CALL_OW 67
// if unit in unreachableList then
2698: LD_VAR 0 1
2702: PUSH
2703: LD_EXP 18
2707: IN
2708: IFFALSE 2720
// result := false else
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
2718: GO 2728
// result := true ;
2720: LD_ADDR_VAR 0 4
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// end ;
2728: LD_VAR 0 4
2732: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2741: LD_ADDR_VAR 0 4
2745: PUSH
2746: LD_INT 81
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 255
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PPUSH
2763: CALL_OW 69
2767: ST_TO_ADDR
// if not enemy then
2768: LD_VAR 0 4
2772: NOT
2773: IFFALSE 2777
// exit ;
2775: GO 2927
// if UnitFilter ( enemy , [ f_occupied ] ) then
2777: LD_VAR 0 4
2781: PPUSH
2782: LD_INT 59
2784: PUSH
2785: EMPTY
2786: LIST
2787: PPUSH
2788: CALL_OW 72
2792: IFFALSE 2903
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_VAR 0 4
2803: PPUSH
2804: LD_INT 59
2806: PUSH
2807: EMPTY
2808: LIST
2809: PPUSH
2810: CALL_OW 72
2814: PPUSH
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL_OW 74
2824: ST_TO_ADDR
// x := GetX ( t ) ;
2825: LD_ADDR_VAR 0 6
2829: PUSH
2830: LD_VAR 0 5
2834: PPUSH
2835: CALL_OW 250
2839: ST_TO_ADDR
// y := GetY ( t ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_VAR 0 5
2849: PPUSH
2850: CALL_OW 251
2854: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2855: LD_VAR 0 1
2859: PPUSH
2860: LD_VAR 0 6
2864: PPUSH
2865: LD_VAR 0 7
2869: PPUSH
2870: CALL 2636 0 3
2874: NOT
2875: IFFALSE 2901
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2877: LD_VAR 0 1
2881: PPUSH
2882: LD_VAR 0 4
2886: PPUSH
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 74
2896: PPUSH
2897: CALL_OW 115
// end else
2901: GO 2927
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 4
2912: PPUSH
2913: LD_VAR 0 1
2917: PPUSH
2918: CALL_OW 74
2922: PPUSH
2923: CALL_OW 115
// end ; end_of_file
2927: LD_VAR 0 2
2931: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; export ar_bio_bomb , us_artillery , us_hack , ar_miner , ru_radar ; end_of_file export function InitSettings ; begin
2932: LD_INT 0
2934: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2935: LD_ADDR_EXP 3
2939: PUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 426
2947: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2948: LD_ADDR_EXP 6
2952: PUSH
2953: LD_INT 1
2955: PPUSH
2956: CALL_OW 426
2960: PUSH
2961: LD_INT 1
2963: MINUS
2964: ST_TO_ADDR
// end ; end_of_file
2965: LD_VAR 0 1
2969: RET
// export function InitGame ; begin
2970: LD_INT 0
2972: PPUSH
// ResetFog ;
2973: CALL_OW 335
// RandomizeAll ;
2977: CALL_OW 11
// LoadColors ;
2981: CALL 821 0 0
// debug := false ;
2985: LD_ADDR_EXP 1
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2993: LD_ADDR_EXP 13
2997: PUSH
2998: LD_INT 91
3000: ST_TO_ADDR
// us_artillery := 97 ;
3001: LD_ADDR_EXP 14
3005: PUSH
3006: LD_INT 97
3008: ST_TO_ADDR
// ru_radar := 98 ;
3009: LD_ADDR_EXP 17
3013: PUSH
3014: LD_INT 98
3016: ST_TO_ADDR
// game_started := false ;
3017: LD_ADDR_EXP 7
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// points := 0 ;
3025: LD_ADDR_EXP 2
3029: PUSH
3030: LD_INT 0
3032: ST_TO_ADDR
// waveNumber := 0 ;
3033: LD_ADDR_EXP 5
3037: PUSH
3038: LD_INT 0
3040: ST_TO_ADDR
// timeToNextAttack := 0 ;
3041: LD_ADDR_EXP 4
3045: PUSH
3046: LD_INT 0
3048: ST_TO_ADDR
// graveyard := [ ] ;
3049: LD_ADDR_EXP 8
3053: PUSH
3054: EMPTY
3055: ST_TO_ADDR
// base_x := 1 ;
3056: LD_ADDR_EXP 9
3060: PUSH
3061: LD_INT 1
3063: ST_TO_ADDR
// base_y := 1 ;
3064: LD_ADDR_EXP 10
3068: PUSH
3069: LD_INT 1
3071: ST_TO_ADDR
// if difficultyLevel > 2 then
3072: LD_EXP 3
3076: PUSH
3077: LD_INT 2
3079: GREATER
3080: IFFALSE 3095
// SetTech ( 5 , 7 , state_researched ) ;
3082: LD_INT 5
3084: PPUSH
3085: LD_INT 7
3087: PPUSH
3088: LD_INT 2
3090: PPUSH
3091: CALL_OW 322
// if not playerNation then
3095: LD_EXP 6
3099: NOT
3100: IFFALSE 3126
// begin points := 100 ;
3102: LD_ADDR_EXP 2
3106: PUSH
3107: LD_INT 100
3109: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
3110: LD_ADDR_EXP 6
3114: PUSH
3115: LD_INT 1
3117: PPUSH
3118: LD_INT 3
3120: PPUSH
3121: CALL_OW 12
3125: ST_TO_ADDR
// end ; your_side := playerNation ;
3126: LD_ADDR_OWVAR 2
3130: PUSH
3131: LD_EXP 6
3135: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
3136: LD_OWVAR 2
3140: PPUSH
3141: LD_INT 4
3143: PPUSH
3144: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
3148: LD_INT 25
3150: PUSH
3151: LD_INT 20
3153: PUSH
3154: LD_INT 15
3156: PUSH
3157: LD_INT 10
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: PUSH
3166: LD_EXP 3
3170: ARRAY
3171: PUSH
3172: LD_INT 5
3174: PUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 2
3180: PUSH
3181: LD_INT 1
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: PUSH
3190: LD_EXP 3
3194: ARRAY
3195: PUSH
3196: LD_INT 5
3198: PUSH
3199: LD_INT 3
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: PUSH
3214: LD_EXP 3
3218: ARRAY
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PPUSH
3225: LD_INT 1
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: LIST
3238: PPUSH
3239: LD_INT 88
3241: PPUSH
3242: LD_INT 76
3244: PPUSH
3245: LD_INT 6
3247: PPUSH
3248: CALL 630 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
3252: LD_EXP 6
3256: PPUSH
3257: LD_INT 9
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 5
3265: PUSH
3266: LD_INT 3
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_EXP 3
3279: ARRAY
3280: PPUSH
3281: LD_INT 24
3283: PUSH
3284: LD_INT 16
3286: PUSH
3287: LD_INT 12
3289: PUSH
3290: LD_INT 8
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: PUSH
3299: LD_EXP 3
3303: ARRAY
3304: PPUSH
3305: LD_INT 88
3307: PPUSH
3308: LD_INT 76
3310: PPUSH
3311: CALL 339 0 5
// CenterNowOnXY ( 88 , 76 ) ;
3315: LD_INT 88
3317: PPUSH
3318: LD_INT 76
3320: PPUSH
3321: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
3325: LD_INT 90
3327: PPUSH
3328: LD_INT 79
3330: PPUSH
3331: LD_OWVAR 2
3335: PPUSH
3336: LD_INT 50
3338: NEG
3339: PPUSH
3340: CALL_OW 330
// if debug then
3344: LD_EXP 1
3348: IFFALSE 3359
// FogOff ( your_side ) ;
3350: LD_OWVAR 2
3354: PPUSH
3355: CALL_OW 344
// end ;
3359: LD_VAR 0 1
3363: RET
// every 0 0$01 trigger game_started do var i ;
3364: LD_EXP 7
3368: IFFALSE 3602
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
// begin while ( game_started ) do
3376: LD_EXP 7
3380: IFFALSE 3602
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3382: LD_INT 22
3384: PUSH
3385: LD_INT 7
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PPUSH
3392: CALL_OW 69
3396: PUSH
3397: LD_INT 5
3399: LESS
3400: PUSH
3401: LD_EXP 4
3405: PUSH
3406: LD_INT 0
3408: LESSEQUAL
3409: AND
3410: IFFALSE 3593
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3412: LD_INT 22
3414: PUSH
3415: LD_INT 4
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PPUSH
3422: CALL_OW 69
3426: IFFALSE 3464
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3428: LD_ADDR_VAR 0 1
3432: PUSH
3433: LD_INT 22
3435: PUSH
3436: LD_INT 4
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 69
3447: PUSH
3448: FOR_IN
3449: IFFALSE 3462
// RemoveUnit ( i ) ;
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 64
3460: GO 3448
3462: POP
3463: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3464: LD_EXP 5
3468: PUSH
3469: LD_INT 3
3471: MOD
3472: PUSH
3473: LD_INT 0
3475: EQUAL
3476: PUSH
3477: LD_EXP 5
3481: PUSH
3482: LD_INT 10
3484: MOD
3485: PUSH
3486: LD_INT 0
3488: EQUAL
3489: OR
3490: PUSH
3491: LD_EXP 5
3495: PUSH
3496: LD_INT 0
3498: GREATER
3499: AND
3500: IFFALSE 3506
// InitBonus ;
3502: CALL 9572 0 0
// if waveNumber mod 10 = 0 then
3506: LD_EXP 5
3510: PUSH
3511: LD_INT 10
3513: MOD
3514: PUSH
3515: LD_INT 0
3517: EQUAL
3518: IFFALSE 3524
// SaveForQuickRestart ;
3520: CALL_OW 22
// if waveNumber = 100 then
3524: LD_EXP 5
3528: PUSH
3529: LD_INT 100
3531: EQUAL
3532: IFFALSE 3545
// begin FogOff ( your_side ) ;
3534: LD_OWVAR 2
3538: PPUSH
3539: CALL_OW 344
// break ;
3543: GO 3602
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3545: LD_ADDR_EXP 4
3549: PUSH
3550: LD_INT 3150
3552: PPUSH
3553: LD_INT 5250
3555: PPUSH
3556: CALL_OW 12
3560: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3561: LD_EXP 4
3565: PPUSH
3566: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3570: LD_ADDR_EXP 5
3574: PUSH
3575: LD_EXP 5
3579: PUSH
3580: LD_INT 1
3582: PLUS
3583: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3584: LD_EXP 5
3588: PPUSH
3589: CALL 4563 0 1
// end ; Wait ( 0 0$01 ) ;
3593: LD_INT 35
3595: PPUSH
3596: CALL_OW 67
// end ;
3600: GO 3376
// end ;
3602: PPOPN 1
3604: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3605: LD_EXP 4
3609: PUSH
3610: LD_INT 0
3612: GREATER
3613: IFFALSE 3633
3615: GO 3617
3617: DISABLE
// begin enable ;
3618: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3619: LD_ADDR_EXP 4
3623: PUSH
3624: LD_EXP 4
3628: PUSH
3629: LD_INT 35
3631: MINUS
3632: ST_TO_ADDR
// end ; end_of_file
3633: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3634: LD_VAR 0 1
3638: PUSH
3639: LD_EXP 18
3643: IN
3644: NOT
3645: IFFALSE 3676
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3647: LD_ADDR_EXP 18
3651: PUSH
3652: LD_EXP 18
3656: PPUSH
3657: LD_EXP 18
3661: PUSH
3662: LD_INT 1
3664: PLUS
3665: PPUSH
3666: LD_VAR 0 1
3670: PPUSH
3671: CALL_OW 2
3675: ST_TO_ADDR
// end ;
3676: PPOPN 1
3678: END
// on UnitDestroyed ( un ) do begin if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL_OW 255
3688: PUSH
3689: LD_OWVAR 2
3693: EQUAL
3694: PUSH
3695: LD_VAR 0 1
3699: PPUSH
3700: CALL_OW 247
3704: PUSH
3705: LD_INT 1
3707: EQUAL
3708: AND
3709: IFFALSE 3740
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3711: LD_ADDR_EXP 8
3715: PUSH
3716: LD_EXP 8
3720: PPUSH
3721: LD_EXP 8
3725: PUSH
3726: LD_INT 1
3728: PLUS
3729: PPUSH
3730: LD_VAR 0 1
3734: PPUSH
3735: CALL_OW 2
3739: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 255
3749: PUSH
3750: LD_INT 7
3752: EQUAL
3753: IFFALSE 4127
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3755: LD_VAR 0 1
3759: PUSH
3760: LD_INT 34
3762: PUSH
3763: LD_INT 91
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: IN
3775: IFFALSE 3820
// begin if Rand ( 1 , 100 ) <= 70 then
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 100
3782: PPUSH
3783: CALL_OW 12
3787: PUSH
3788: LD_INT 70
3790: LESSEQUAL
3791: IFFALSE 3820
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3793: LD_VAR 0 1
3797: PPUSH
3798: CALL_OW 250
3802: PPUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 251
3812: PPUSH
3813: LD_INT 10
3815: PPUSH
3816: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3820: LD_VAR 0 1
3824: PPUSH
3825: CALL_OW 247
3829: PUSH
3830: LD_INT 1
3832: DOUBLE
3833: EQUAL
3834: IFTRUE 3838
3836: GO 3972
3838: POP
// begin case GetClass ( un ) of class_apeman :
3839: LD_VAR 0 1
3843: PPUSH
3844: CALL_OW 257
3848: PUSH
3849: LD_INT 12
3851: DOUBLE
3852: EQUAL
3853: IFTRUE 3857
3855: GO 3867
3857: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3858: LD_INT 2
3860: PPUSH
3861: CALL 797 0 1
3865: GO 3970
3867: LD_INT 15
3869: DOUBLE
3870: EQUAL
3871: IFTRUE 3875
3873: GO 3885
3875: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3876: LD_INT 5
3878: PPUSH
3879: CALL 797 0 1
3883: GO 3970
3885: LD_INT 17
3887: DOUBLE
3888: EQUAL
3889: IFTRUE 3893
3891: GO 3903
3893: POP
// AddPoints ( 30 ) ; class_soldier :
3894: LD_INT 30
3896: PPUSH
3897: CALL 797 0 1
3901: GO 3970
3903: LD_INT 1
3905: DOUBLE
3906: EQUAL
3907: IFTRUE 3911
3909: GO 3921
3911: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3912: LD_INT 50
3914: PPUSH
3915: CALL 797 0 1
3919: GO 3970
3921: LD_INT 9
3923: DOUBLE
3924: EQUAL
3925: IFTRUE 3941
3927: LD_INT 5
3929: DOUBLE
3930: EQUAL
3931: IFTRUE 3941
3933: LD_INT 8
3935: DOUBLE
3936: EQUAL
3937: IFTRUE 3941
3939: GO 3951
3941: POP
// AddPoints ( 75 ) ; class_mechanic :
3942: LD_INT 75
3944: PPUSH
3945: CALL 797 0 1
3949: GO 3970
3951: LD_INT 3
3953: DOUBLE
3954: EQUAL
3955: IFTRUE 3959
3957: GO 3969
3959: POP
// AddPoints ( 60 ) ; end ;
3960: LD_INT 60
3962: PPUSH
3963: CALL 797 0 1
3967: GO 3970
3969: POP
// end ; unit_vehicle :
3970: GO 4127
3972: LD_INT 2
3974: DOUBLE
3975: EQUAL
3976: IFTRUE 3980
3978: GO 4126
3980: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3981: LD_VAR 0 1
3985: PPUSH
3986: CALL_OW 265
3990: PUSH
3991: LD_INT 12
3993: DOUBLE
3994: EQUAL
3995: IFTRUE 4011
3997: LD_INT 1
3999: DOUBLE
4000: EQUAL
4001: IFTRUE 4011
4003: LD_INT 11
4005: DOUBLE
4006: EQUAL
4007: IFTRUE 4011
4009: GO 4021
4011: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
4012: LD_INT 100
4014: PPUSH
4015: CALL 797 0 1
4019: GO 4124
4021: LD_INT 13
4023: DOUBLE
4024: EQUAL
4025: IFTRUE 4059
4027: LD_INT 14
4029: DOUBLE
4030: EQUAL
4031: IFTRUE 4059
4033: LD_INT 2
4035: DOUBLE
4036: EQUAL
4037: IFTRUE 4059
4039: LD_INT 3
4041: DOUBLE
4042: EQUAL
4043: IFTRUE 4059
4045: LD_INT 21
4047: DOUBLE
4048: EQUAL
4049: IFTRUE 4059
4051: LD_INT 22
4053: DOUBLE
4054: EQUAL
4055: IFTRUE 4059
4057: GO 4069
4059: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
4060: LD_INT 250
4062: PPUSH
4063: CALL 797 0 1
4067: GO 4124
4069: LD_INT 4
4071: DOUBLE
4072: EQUAL
4073: IFTRUE 4095
4075: LD_INT 5
4077: DOUBLE
4078: EQUAL
4079: IFTRUE 4095
4081: LD_INT 23
4083: DOUBLE
4084: EQUAL
4085: IFTRUE 4095
4087: LD_INT 24
4089: DOUBLE
4090: EQUAL
4091: IFTRUE 4095
4093: GO 4105
4095: POP
// AddPoints ( 500 ) ; 25 :
4096: LD_INT 500
4098: PPUSH
4099: CALL 797 0 1
4103: GO 4124
4105: LD_INT 25
4107: DOUBLE
4108: EQUAL
4109: IFTRUE 4113
4111: GO 4123
4113: POP
// AddPoints ( 1250 ) ; end ;
4114: LD_INT 1250
4116: PPUSH
4117: CALL 797 0 1
4121: GO 4124
4123: POP
// end ; end ;
4124: GO 4127
4126: POP
// end ; end ;
4127: PPOPN 1
4129: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
4130: LD_VAR 0 1
4134: PPUSH
4135: CALL_OW 266
4139: PUSH
4140: LD_INT 0
4142: EQUAL
4143: IFFALSE 4193
// begin base_x := GetX ( b ) ;
4145: LD_ADDR_EXP 9
4149: PUSH
4150: LD_VAR 0 1
4154: PPUSH
4155: CALL_OW 250
4159: ST_TO_ADDR
// base_y := GetY ( b ) ;
4160: LD_ADDR_EXP 10
4164: PUSH
4165: LD_VAR 0 1
4169: PPUSH
4170: CALL_OW 251
4174: ST_TO_ADDR
// base := b ;
4175: LD_ADDR_EXP 11
4179: PUSH
4180: LD_VAR 0 1
4184: ST_TO_ADDR
// game_started := true ;
4185: LD_ADDR_EXP 7
4189: PUSH
4190: LD_INT 1
4192: ST_TO_ADDR
// end ; end ;
4193: PPOPN 1
4195: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 255
4205: PUSH
4206: LD_OWVAR 2
4210: EQUAL
4211: IFFALSE 4215
// exit ;
4213: GO 4362
// if GetType ( un ) = unit_vehicle then
4215: LD_VAR 0 1
4219: PPUSH
4220: CALL_OW 247
4224: PUSH
4225: LD_INT 2
4227: EQUAL
4228: IFFALSE 4281
// begin KillUnit ( un ) ;
4230: LD_VAR 0 1
4234: PPUSH
4235: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
4239: LD_VAR 0 1
4243: PPUSH
4244: CALL_OW 248
4248: PUSH
4249: LD_INT 2
4251: EQUAL
4252: PUSH
4253: LD_VAR 0 1
4257: PPUSH
4258: CALL_OW 264
4262: PUSH
4263: LD_INT 49
4265: PUSH
4266: EMPTY
4267: LIST
4268: IN
4269: OR
4270: IFFALSE 4281
// ExplodeVehicle ( un ) ;
4272: LD_VAR 0 1
4276: PPUSH
4277: CALL 2506 0 1
// end ; if GetType ( un ) = unit_human then
4281: LD_VAR 0 1
4285: PPUSH
4286: CALL_OW 247
4290: PUSH
4291: LD_INT 1
4293: EQUAL
4294: IFFALSE 4362
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
4296: LD_VAR 0 1
4300: PPUSH
4301: CALL_OW 248
4305: PUSH
4306: LD_INT 2
4308: EQUAL
4309: PUSH
4310: LD_INT 5
4312: PPUSH
4313: LD_INT 7
4315: PPUSH
4316: CALL_OW 321
4320: PUSH
4321: LD_INT 2
4323: NONEQUAL
4324: AND
4325: PUSH
4326: LD_VAR 0 1
4330: PPUSH
4331: CALL_OW 248
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: LD_INT 1
4341: PUSH
4342: LD_INT 3
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: IN
4350: OR
4351: IFFALSE 4362
// KillUnit ( un ) ;
4353: LD_VAR 0 1
4357: PPUSH
4358: CALL_OW 66
// end ; end ;
4362: PPOPN 1
4364: END
// every 0 0$1 do
4365: GO 4367
4367: DISABLE
// begin enable ;
4368: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4369: LD_INT 4
4371: PPUSH
4372: LD_INT 5
4374: PPUSH
4375: LD_INT 22
4377: PUSH
4378: LD_OWVAR 2
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PPUSH
4387: CALL_OW 513
// end ;
4391: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4392: LD_EXP 7
4396: PUSH
4397: LD_INT 22
4399: PUSH
4400: LD_OWVAR 2
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 21
4411: PUSH
4412: LD_INT 1
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 0
4430: EQUAL
4431: AND
4432: IFFALSE 4444
4434: GO 4436
4436: DISABLE
// YouLost ( die ) ;
4437: LD_STRING die
4439: PPUSH
4440: CALL_OW 104
4444: END
// every 0 0$21 trigger tick <= 15 15$00 do
4445: LD_OWVAR 1
4449: PUSH
4450: LD_INT 31500
4452: LESSEQUAL
4453: IFFALSE 4480
4455: GO 4457
4457: DISABLE
// begin enable ;
4458: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4459: LD_INT 1
4461: PPUSH
4462: LD_INT 5
4464: PPUSH
4465: CALL_OW 12
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: LD_INT 1
4475: PPUSH
4476: CALL_OW 55
// end ;
4480: END
// every 0 0$51 trigger tick > 15 15$00 do
4481: LD_OWVAR 1
4485: PUSH
4486: LD_INT 31500
4488: GREATER
4489: IFFALSE 4536
4491: GO 4493
4493: DISABLE
// begin enable ;
4494: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4495: LD_INT 22
4497: PUSH
4498: LD_INT 7
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PPUSH
4505: CALL_OW 69
4509: PUSH
4510: LD_INT 0
4512: EQUAL
4513: IFFALSE 4536
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4515: LD_INT 1
4517: PPUSH
4518: LD_INT 5
4520: PPUSH
4521: CALL_OW 12
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: LD_INT 1
4531: PPUSH
4532: CALL_OW 55
// end ;
4536: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4537: LD_VAR 0 1
4541: PPUSH
4542: LD_INT 3
4544: PPUSH
4545: CALL_OW 308
4549: IFFALSE 4560
// KillUnit ( building ) ;
4551: LD_VAR 0 1
4555: PPUSH
4556: CALL_OW 66
// end ; end_of_file
4560: PPOPN 2
4562: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4563: LD_INT 0
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4574: LD_ADDR_VAR 0 7
4578: PUSH
4579: LD_INT 1
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: ST_TO_ADDR
// uc_side := 7 ;
4589: LD_ADDR_OWVAR 20
4593: PUSH
4594: LD_INT 7
4596: ST_TO_ADDR
// l := 0 ;
4597: LD_ADDR_VAR 0 9
4601: PUSH
4602: LD_INT 0
4604: ST_TO_ADDR
// case num of 1 :
4605: LD_VAR 0 1
4609: PUSH
4610: LD_INT 1
4612: DOUBLE
4613: EQUAL
4614: IFTRUE 4618
4616: GO 4637
4618: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4619: LD_ADDR_VAR 0 2
4623: PUSH
4624: LD_INT 12
4626: PPUSH
4627: LD_INT 1
4629: PPUSH
4630: CALL 6966 0 2
4634: ST_TO_ADDR
4635: GO 6775
4637: LD_INT 2
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4664
4645: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4646: LD_ADDR_VAR 0 2
4650: PUSH
4651: LD_INT 12
4653: PPUSH
4654: LD_INT 1
4656: PPUSH
4657: CALL 7037 0 2
4661: ST_TO_ADDR
4662: GO 6775
4664: LD_INT 3
4666: DOUBLE
4667: EQUAL
4668: IFTRUE 4672
4670: GO 4691
4672: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4673: LD_ADDR_VAR 0 2
4677: PUSH
4678: LD_INT 12
4680: PPUSH
4681: LD_INT 1
4683: PPUSH
4684: CALL 7108 0 2
4688: ST_TO_ADDR
4689: GO 6775
4691: LD_INT 4
4693: DOUBLE
4694: EQUAL
4695: IFTRUE 4699
4697: GO 4718
4699: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4700: LD_ADDR_VAR 0 2
4704: PUSH
4705: LD_INT 7
4707: PPUSH
4708: LD_INT 1
4710: PPUSH
4711: CALL 7187 0 2
4715: ST_TO_ADDR
4716: GO 6775
4718: LD_INT 5
4720: DOUBLE
4721: EQUAL
4722: IFTRUE 4726
4724: GO 4745
4726: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: LD_INT 7
4734: PPUSH
4735: LD_INT 1
4737: PPUSH
4738: CALL 7583 0 2
4742: ST_TO_ADDR
4743: GO 6775
4745: LD_INT 6
4747: DOUBLE
4748: EQUAL
4749: IFTRUE 4753
4751: GO 4772
4753: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4754: LD_ADDR_VAR 0 2
4758: PUSH
4759: LD_INT 6
4761: PPUSH
4762: LD_INT 1
4764: PPUSH
4765: CALL 8003 0 2
4769: ST_TO_ADDR
4770: GO 6775
4772: LD_INT 7
4774: DOUBLE
4775: EQUAL
4776: IFTRUE 4780
4778: GO 4799
4780: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: LD_INT 15
4788: PPUSH
4789: LD_INT 1
4791: PPUSH
4792: CALL 8423 0 2
4796: ST_TO_ADDR
4797: GO 6775
4799: LD_INT 8
4801: DOUBLE
4802: EQUAL
4803: IFTRUE 4807
4805: GO 4826
4807: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4808: LD_ADDR_VAR 0 2
4812: PUSH
4813: LD_INT 7
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: CALL 8524 0 2
4823: ST_TO_ADDR
4824: GO 6775
4826: LD_INT 9
4828: DOUBLE
4829: EQUAL
4830: IFTRUE 4834
4832: GO 4865
4834: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: LD_INT 4
4842: PPUSH
4843: LD_INT 1
4845: PPUSH
4846: CALL 8524 0 2
4850: PUSH
4851: LD_INT 7
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: CALL 7583 0 2
4861: ADD
4862: ST_TO_ADDR
4863: GO 6775
4865: LD_INT 10
4867: DOUBLE
4868: EQUAL
4869: IFTRUE 4873
4871: GO 4904
4873: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4874: LD_ADDR_VAR 0 2
4878: PUSH
4879: LD_INT 9
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: CALL 8423 0 2
4889: PUSH
4890: LD_INT 14
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: CALL 7108 0 2
4900: ADD
4901: ST_TO_ADDR
4902: GO 6775
4904: LD_INT 11
4906: DOUBLE
4907: EQUAL
4908: IFTRUE 4960
4910: LD_INT 21
4912: DOUBLE
4913: EQUAL
4914: IFTRUE 4960
4916: LD_INT 31
4918: DOUBLE
4919: EQUAL
4920: IFTRUE 4960
4922: LD_INT 41
4924: DOUBLE
4925: EQUAL
4926: IFTRUE 4960
4928: LD_INT 51
4930: DOUBLE
4931: EQUAL
4932: IFTRUE 4960
4934: LD_INT 61
4936: DOUBLE
4937: EQUAL
4938: IFTRUE 4960
4940: LD_INT 71
4942: DOUBLE
4943: EQUAL
4944: IFTRUE 4960
4946: LD_INT 81
4948: DOUBLE
4949: EQUAL
4950: IFTRUE 4960
4952: LD_INT 91
4954: DOUBLE
4955: EQUAL
4956: IFTRUE 4960
4958: GO 5069
4960: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4961: LD_ADDR_VAR 0 2
4965: PUSH
4966: LD_INT 20
4968: PUSH
4969: LD_INT 30
4971: PUSH
4972: LD_INT 40
4974: PUSH
4975: LD_INT 45
4977: PUSH
4978: LD_INT 50
4980: PUSH
4981: LD_INT 60
4983: PUSH
4984: LD_INT 70
4986: PUSH
4987: LD_INT 80
4989: PUSH
4990: LD_INT 100
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: LD_VAR 0 1
5008: PUSH
5009: LD_INT 10
5011: DIV
5012: ARRAY
5013: PPUSH
5014: LD_INT 2
5016: PUSH
5017: LD_INT 3
5019: PUSH
5020: LD_INT 4
5022: PUSH
5023: LD_INT 5
5025: PUSH
5026: LD_INT 6
5028: PUSH
5029: LD_INT 7
5031: PUSH
5032: LD_INT 8
5034: PUSH
5035: LD_INT 9
5037: PUSH
5038: LD_INT 10
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: PUSH
5052: LD_VAR 0 1
5056: PUSH
5057: LD_INT 10
5059: DIV
5060: ARRAY
5061: PPUSH
5062: CALL 6966 0 2
5066: ST_TO_ADDR
5067: GO 6775
5069: LD_INT 12
5071: DOUBLE
5072: EQUAL
5073: IFTRUE 5125
5075: LD_INT 22
5077: DOUBLE
5078: EQUAL
5079: IFTRUE 5125
5081: LD_INT 32
5083: DOUBLE
5084: EQUAL
5085: IFTRUE 5125
5087: LD_INT 42
5089: DOUBLE
5090: EQUAL
5091: IFTRUE 5125
5093: LD_INT 52
5095: DOUBLE
5096: EQUAL
5097: IFTRUE 5125
5099: LD_INT 62
5101: DOUBLE
5102: EQUAL
5103: IFTRUE 5125
5105: LD_INT 72
5107: DOUBLE
5108: EQUAL
5109: IFTRUE 5125
5111: LD_INT 82
5113: DOUBLE
5114: EQUAL
5115: IFTRUE 5125
5117: LD_INT 92
5119: DOUBLE
5120: EQUAL
5121: IFTRUE 5125
5123: GO 5234
5125: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
5126: LD_ADDR_VAR 0 2
5130: PUSH
5131: LD_INT 16
5133: PUSH
5134: LD_INT 21
5136: PUSH
5137: LD_INT 28
5139: PUSH
5140: LD_INT 33
5142: PUSH
5143: LD_INT 39
5145: PUSH
5146: LD_INT 46
5148: PUSH
5149: LD_INT 56
5151: PUSH
5152: LD_INT 66
5154: PUSH
5155: LD_INT 80
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: PUSH
5169: LD_VAR 0 1
5173: PUSH
5174: LD_INT 10
5176: DIV
5177: ARRAY
5178: PPUSH
5179: LD_INT 2
5181: PUSH
5182: LD_INT 3
5184: PUSH
5185: LD_INT 4
5187: PUSH
5188: LD_INT 5
5190: PUSH
5191: LD_INT 6
5193: PUSH
5194: LD_INT 7
5196: PUSH
5197: LD_INT 8
5199: PUSH
5200: LD_INT 9
5202: PUSH
5203: LD_INT 10
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: PUSH
5217: LD_VAR 0 1
5221: PUSH
5222: LD_INT 10
5224: DIV
5225: ARRAY
5226: PPUSH
5227: CALL 7037 0 2
5231: ST_TO_ADDR
5232: GO 6775
5234: LD_INT 13
5236: DOUBLE
5237: EQUAL
5238: IFTRUE 5290
5240: LD_INT 23
5242: DOUBLE
5243: EQUAL
5244: IFTRUE 5290
5246: LD_INT 33
5248: DOUBLE
5249: EQUAL
5250: IFTRUE 5290
5252: LD_INT 43
5254: DOUBLE
5255: EQUAL
5256: IFTRUE 5290
5258: LD_INT 53
5260: DOUBLE
5261: EQUAL
5262: IFTRUE 5290
5264: LD_INT 63
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5290
5270: LD_INT 73
5272: DOUBLE
5273: EQUAL
5274: IFTRUE 5290
5276: LD_INT 83
5278: DOUBLE
5279: EQUAL
5280: IFTRUE 5290
5282: LD_INT 93
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5399
5290: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 14
5298: PUSH
5299: LD_INT 18
5301: PUSH
5302: LD_INT 22
5304: PUSH
5305: LD_INT 27
5307: PUSH
5308: LD_INT 33
5310: PUSH
5311: LD_INT 39
5313: PUSH
5314: LD_INT 44
5316: PUSH
5317: LD_INT 57
5319: PUSH
5320: LD_INT 65
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: PUSH
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 10
5341: DIV
5342: ARRAY
5343: PPUSH
5344: LD_INT 2
5346: PUSH
5347: LD_INT 3
5349: PUSH
5350: LD_INT 4
5352: PUSH
5353: LD_INT 5
5355: PUSH
5356: LD_INT 6
5358: PUSH
5359: LD_INT 7
5361: PUSH
5362: LD_INT 8
5364: PUSH
5365: LD_INT 9
5367: PUSH
5368: LD_INT 10
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: PUSH
5382: LD_VAR 0 1
5386: PUSH
5387: LD_INT 10
5389: DIV
5390: ARRAY
5391: PPUSH
5392: CALL 7108 0 2
5396: ST_TO_ADDR
5397: GO 6775
5399: LD_INT 14
5401: DOUBLE
5402: EQUAL
5403: IFTRUE 5455
5405: LD_INT 24
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5455
5411: LD_INT 34
5413: DOUBLE
5414: EQUAL
5415: IFTRUE 5455
5417: LD_INT 44
5419: DOUBLE
5420: EQUAL
5421: IFTRUE 5455
5423: LD_INT 54
5425: DOUBLE
5426: EQUAL
5427: IFTRUE 5455
5429: LD_INT 64
5431: DOUBLE
5432: EQUAL
5433: IFTRUE 5455
5435: LD_INT 74
5437: DOUBLE
5438: EQUAL
5439: IFTRUE 5455
5441: LD_INT 84
5443: DOUBLE
5444: EQUAL
5445: IFTRUE 5455
5447: LD_INT 94
5449: DOUBLE
5450: EQUAL
5451: IFTRUE 5455
5453: GO 5564
5455: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5456: LD_ADDR_VAR 0 2
5460: PUSH
5461: LD_INT 9
5463: PUSH
5464: LD_INT 15
5466: PUSH
5467: LD_INT 22
5469: PUSH
5470: LD_INT 30
5472: PUSH
5473: LD_INT 39
5475: PUSH
5476: LD_INT 45
5478: PUSH
5479: LD_INT 56
5481: PUSH
5482: LD_INT 60
5484: PUSH
5485: LD_INT 65
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: PUSH
5499: LD_VAR 0 1
5503: PUSH
5504: LD_INT 10
5506: DIV
5507: ARRAY
5508: PPUSH
5509: LD_INT 2
5511: PUSH
5512: LD_INT 3
5514: PUSH
5515: LD_INT 4
5517: PUSH
5518: LD_INT 5
5520: PUSH
5521: LD_INT 6
5523: PUSH
5524: LD_INT 7
5526: PUSH
5527: LD_INT 8
5529: PUSH
5530: LD_INT 9
5532: PUSH
5533: LD_INT 10
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: PUSH
5547: LD_VAR 0 1
5551: PUSH
5552: LD_INT 10
5554: DIV
5555: ARRAY
5556: PPUSH
5557: CALL 7187 0 2
5561: ST_TO_ADDR
5562: GO 6775
5564: LD_INT 15
5566: DOUBLE
5567: EQUAL
5568: IFTRUE 5620
5570: LD_INT 25
5572: DOUBLE
5573: EQUAL
5574: IFTRUE 5620
5576: LD_INT 35
5578: DOUBLE
5579: EQUAL
5580: IFTRUE 5620
5582: LD_INT 45
5584: DOUBLE
5585: EQUAL
5586: IFTRUE 5620
5588: LD_INT 55
5590: DOUBLE
5591: EQUAL
5592: IFTRUE 5620
5594: LD_INT 65
5596: DOUBLE
5597: EQUAL
5598: IFTRUE 5620
5600: LD_INT 75
5602: DOUBLE
5603: EQUAL
5604: IFTRUE 5620
5606: LD_INT 85
5608: DOUBLE
5609: EQUAL
5610: IFTRUE 5620
5612: LD_INT 95
5614: DOUBLE
5615: EQUAL
5616: IFTRUE 5620
5618: GO 5729
5620: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5621: LD_ADDR_VAR 0 2
5625: PUSH
5626: LD_INT 6
5628: PUSH
5629: LD_INT 11
5631: PUSH
5632: LD_INT 15
5634: PUSH
5635: LD_INT 20
5637: PUSH
5638: LD_INT 25
5640: PUSH
5641: LD_INT 30
5643: PUSH
5644: LD_INT 35
5646: PUSH
5647: LD_INT 40
5649: PUSH
5650: LD_INT 45
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: PUSH
5664: LD_VAR 0 1
5668: PUSH
5669: LD_INT 10
5671: DIV
5672: ARRAY
5673: PPUSH
5674: LD_INT 2
5676: PUSH
5677: LD_INT 3
5679: PUSH
5680: LD_INT 4
5682: PUSH
5683: LD_INT 5
5685: PUSH
5686: LD_INT 6
5688: PUSH
5689: LD_INT 7
5691: PUSH
5692: LD_INT 8
5694: PUSH
5695: LD_INT 9
5697: PUSH
5698: LD_INT 10
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: PUSH
5712: LD_VAR 0 1
5716: PUSH
5717: LD_INT 10
5719: DIV
5720: ARRAY
5721: PPUSH
5722: CALL 7583 0 2
5726: ST_TO_ADDR
5727: GO 6775
5729: LD_INT 16
5731: DOUBLE
5732: EQUAL
5733: IFTRUE 5785
5735: LD_INT 26
5737: DOUBLE
5738: EQUAL
5739: IFTRUE 5785
5741: LD_INT 36
5743: DOUBLE
5744: EQUAL
5745: IFTRUE 5785
5747: LD_INT 46
5749: DOUBLE
5750: EQUAL
5751: IFTRUE 5785
5753: LD_INT 56
5755: DOUBLE
5756: EQUAL
5757: IFTRUE 5785
5759: LD_INT 66
5761: DOUBLE
5762: EQUAL
5763: IFTRUE 5785
5765: LD_INT 76
5767: DOUBLE
5768: EQUAL
5769: IFTRUE 5785
5771: LD_INT 86
5773: DOUBLE
5774: EQUAL
5775: IFTRUE 5785
5777: LD_INT 96
5779: DOUBLE
5780: EQUAL
5781: IFTRUE 5785
5783: GO 5894
5785: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5786: LD_ADDR_VAR 0 2
5790: PUSH
5791: LD_INT 9
5793: PUSH
5794: LD_INT 12
5796: PUSH
5797: LD_INT 15
5799: PUSH
5800: LD_INT 18
5802: PUSH
5803: LD_INT 21
5805: PUSH
5806: LD_INT 24
5808: PUSH
5809: LD_INT 27
5811: PUSH
5812: LD_INT 30
5814: PUSH
5815: LD_INT 33
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: LD_VAR 0 1
5833: PUSH
5834: LD_INT 10
5836: DIV
5837: ARRAY
5838: PPUSH
5839: LD_INT 2
5841: PUSH
5842: LD_INT 3
5844: PUSH
5845: LD_INT 4
5847: PUSH
5848: LD_INT 5
5850: PUSH
5851: LD_INT 6
5853: PUSH
5854: LD_INT 7
5856: PUSH
5857: LD_INT 8
5859: PUSH
5860: LD_INT 9
5862: PUSH
5863: LD_INT 10
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: PUSH
5877: LD_VAR 0 1
5881: PUSH
5882: LD_INT 10
5884: DIV
5885: ARRAY
5886: PPUSH
5887: CALL 8003 0 2
5891: ST_TO_ADDR
5892: GO 6775
5894: LD_INT 17
5896: DOUBLE
5897: EQUAL
5898: IFTRUE 5950
5900: LD_INT 27
5902: DOUBLE
5903: EQUAL
5904: IFTRUE 5950
5906: LD_INT 37
5908: DOUBLE
5909: EQUAL
5910: IFTRUE 5950
5912: LD_INT 47
5914: DOUBLE
5915: EQUAL
5916: IFTRUE 5950
5918: LD_INT 57
5920: DOUBLE
5921: EQUAL
5922: IFTRUE 5950
5924: LD_INT 67
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5950
5930: LD_INT 77
5932: DOUBLE
5933: EQUAL
5934: IFTRUE 5950
5936: LD_INT 87
5938: DOUBLE
5939: EQUAL
5940: IFTRUE 5950
5942: LD_INT 97
5944: DOUBLE
5945: EQUAL
5946: IFTRUE 5950
5948: GO 6059
5950: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5951: LD_ADDR_VAR 0 2
5955: PUSH
5956: LD_INT 14
5958: PUSH
5959: LD_INT 16
5961: PUSH
5962: LD_INT 18
5964: PUSH
5965: LD_INT 22
5967: PUSH
5968: LD_INT 24
5970: PUSH
5971: LD_INT 26
5973: PUSH
5974: LD_INT 28
5976: PUSH
5977: LD_INT 32
5979: PUSH
5980: LD_INT 35
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: PUSH
5994: LD_VAR 0 1
5998: PUSH
5999: LD_INT 10
6001: DIV
6002: ARRAY
6003: PPUSH
6004: LD_INT 2
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: LD_INT 4
6012: PUSH
6013: LD_INT 5
6015: PUSH
6016: LD_INT 6
6018: PUSH
6019: LD_INT 7
6021: PUSH
6022: LD_INT 8
6024: PUSH
6025: LD_INT 9
6027: PUSH
6028: LD_INT 10
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: PUSH
6042: LD_VAR 0 1
6046: PUSH
6047: LD_INT 10
6049: DIV
6050: ARRAY
6051: PPUSH
6052: CALL 8423 0 2
6056: ST_TO_ADDR
6057: GO 6775
6059: LD_INT 18
6061: DOUBLE
6062: EQUAL
6063: IFTRUE 6115
6065: LD_INT 28
6067: DOUBLE
6068: EQUAL
6069: IFTRUE 6115
6071: LD_INT 38
6073: DOUBLE
6074: EQUAL
6075: IFTRUE 6115
6077: LD_INT 48
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6115
6083: LD_INT 58
6085: DOUBLE
6086: EQUAL
6087: IFTRUE 6115
6089: LD_INT 68
6091: DOUBLE
6092: EQUAL
6093: IFTRUE 6115
6095: LD_INT 78
6097: DOUBLE
6098: EQUAL
6099: IFTRUE 6115
6101: LD_INT 88
6103: DOUBLE
6104: EQUAL
6105: IFTRUE 6115
6107: LD_INT 98
6109: DOUBLE
6110: EQUAL
6111: IFTRUE 6115
6113: GO 6224
6115: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: LD_INT 9
6123: PUSH
6124: LD_INT 12
6126: PUSH
6127: LD_INT 15
6129: PUSH
6130: LD_INT 18
6132: PUSH
6133: LD_INT 21
6135: PUSH
6136: LD_INT 24
6138: PUSH
6139: LD_INT 27
6141: PUSH
6142: LD_INT 30
6144: PUSH
6145: LD_INT 33
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: PUSH
6159: LD_VAR 0 1
6163: PUSH
6164: LD_INT 10
6166: DIV
6167: ARRAY
6168: PPUSH
6169: LD_INT 2
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: LD_INT 4
6177: PUSH
6178: LD_INT 5
6180: PUSH
6181: LD_INT 6
6183: PUSH
6184: LD_INT 7
6186: PUSH
6187: LD_INT 8
6189: PUSH
6190: LD_INT 9
6192: PUSH
6193: LD_INT 10
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: PUSH
6207: LD_VAR 0 1
6211: PUSH
6212: LD_INT 10
6214: DIV
6215: ARRAY
6216: PPUSH
6217: CALL 8524 0 2
6221: ST_TO_ADDR
6222: GO 6775
6224: LD_INT 19
6226: DOUBLE
6227: EQUAL
6228: IFTRUE 6280
6230: LD_INT 29
6232: DOUBLE
6233: EQUAL
6234: IFTRUE 6280
6236: LD_INT 39
6238: DOUBLE
6239: EQUAL
6240: IFTRUE 6280
6242: LD_INT 49
6244: DOUBLE
6245: EQUAL
6246: IFTRUE 6280
6248: LD_INT 59
6250: DOUBLE
6251: EQUAL
6252: IFTRUE 6280
6254: LD_INT 69
6256: DOUBLE
6257: EQUAL
6258: IFTRUE 6280
6260: LD_INT 79
6262: DOUBLE
6263: EQUAL
6264: IFTRUE 6280
6266: LD_INT 89
6268: DOUBLE
6269: EQUAL
6270: IFTRUE 6280
6272: LD_INT 99
6274: DOUBLE
6275: EQUAL
6276: IFTRUE 6280
6278: GO 6491
6280: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
6281: LD_ADDR_VAR 0 2
6285: PUSH
6286: LD_INT 4
6288: PUSH
6289: LD_INT 7
6291: PUSH
6292: LD_INT 10
6294: PUSH
6295: LD_INT 13
6297: PUSH
6298: LD_INT 14
6300: PUSH
6301: LD_INT 17
6303: PUSH
6304: LD_INT 19
6306: PUSH
6307: LD_INT 21
6309: PUSH
6310: LD_INT 23
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PUSH
6324: LD_VAR 0 1
6328: PUSH
6329: LD_INT 10
6331: DIV
6332: ARRAY
6333: PPUSH
6334: LD_INT 2
6336: PUSH
6337: LD_INT 3
6339: PUSH
6340: LD_INT 4
6342: PUSH
6343: LD_INT 5
6345: PUSH
6346: LD_INT 6
6348: PUSH
6349: LD_INT 7
6351: PUSH
6352: LD_INT 8
6354: PUSH
6355: LD_INT 9
6357: PUSH
6358: LD_INT 10
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: PUSH
6372: LD_VAR 0 1
6376: PUSH
6377: LD_INT 10
6379: DIV
6380: ARRAY
6381: PPUSH
6382: CALL 8524 0 2
6386: PUSH
6387: LD_INT 4
6389: PUSH
6390: LD_INT 7
6392: PUSH
6393: LD_INT 10
6395: PUSH
6396: LD_INT 13
6398: PUSH
6399: LD_INT 14
6401: PUSH
6402: LD_INT 17
6404: PUSH
6405: LD_INT 19
6407: PUSH
6408: LD_INT 22
6410: PUSH
6411: LD_INT 25
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_VAR 0 1
6429: PUSH
6430: LD_INT 10
6432: DIV
6433: ARRAY
6434: PPUSH
6435: LD_INT 2
6437: PUSH
6438: LD_INT 3
6440: PUSH
6441: LD_INT 4
6443: PUSH
6444: LD_INT 5
6446: PUSH
6447: LD_INT 6
6449: PUSH
6450: LD_INT 7
6452: PUSH
6453: LD_INT 8
6455: PUSH
6456: LD_INT 9
6458: PUSH
6459: LD_INT 10
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: LD_INT 10
6480: DIV
6481: ARRAY
6482: PPUSH
6483: CALL 7583 0 2
6487: ADD
6488: ST_TO_ADDR
6489: GO 6775
6491: LD_INT 20
6493: DOUBLE
6494: EQUAL
6495: IFTRUE 6547
6497: LD_INT 30
6499: DOUBLE
6500: EQUAL
6501: IFTRUE 6547
6503: LD_INT 40
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6547
6509: LD_INT 50
6511: DOUBLE
6512: EQUAL
6513: IFTRUE 6547
6515: LD_INT 60
6517: DOUBLE
6518: EQUAL
6519: IFTRUE 6547
6521: LD_INT 70
6523: DOUBLE
6524: EQUAL
6525: IFTRUE 6547
6527: LD_INT 80
6529: DOUBLE
6530: EQUAL
6531: IFTRUE 6547
6533: LD_INT 90
6535: DOUBLE
6536: EQUAL
6537: IFTRUE 6547
6539: LD_INT 100
6541: DOUBLE
6542: EQUAL
6543: IFTRUE 6547
6545: GO 6774
6547: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: LD_INT 4
6555: PUSH
6556: LD_INT 7
6558: PUSH
6559: LD_INT 10
6561: PUSH
6562: LD_INT 13
6564: PUSH
6565: LD_INT 14
6567: PUSH
6568: LD_INT 17
6570: PUSH
6571: LD_INT 19
6573: PUSH
6574: LD_INT 21
6576: PUSH
6577: LD_INT 23
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: PUSH
6591: LD_VAR 0 1
6595: PUSH
6596: LD_INT 10
6598: DIVREAL
6599: PUSH
6600: LD_INT 1
6602: MINUS
6603: ARRAY
6604: PPUSH
6605: LD_INT 2
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 4
6613: PUSH
6614: LD_INT 5
6616: PUSH
6617: LD_INT 6
6619: PUSH
6620: LD_INT 7
6622: PUSH
6623: LD_INT 8
6625: PUSH
6626: LD_INT 9
6628: PUSH
6629: LD_INT 10
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: LD_VAR 0 1
6647: PUSH
6648: LD_INT 10
6650: DIVREAL
6651: PUSH
6652: LD_INT 1
6654: MINUS
6655: ARRAY
6656: PPUSH
6657: CALL 8423 0 2
6661: PUSH
6662: LD_INT 4
6664: PUSH
6665: LD_INT 7
6667: PUSH
6668: LD_INT 10
6670: PUSH
6671: LD_INT 13
6673: PUSH
6674: LD_INT 14
6676: PUSH
6677: LD_INT 17
6679: PUSH
6680: LD_INT 19
6682: PUSH
6683: LD_INT 22
6685: PUSH
6686: LD_INT 25
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: PUSH
6700: LD_VAR 0 1
6704: PUSH
6705: LD_INT 10
6707: DIVREAL
6708: PUSH
6709: LD_INT 1
6711: MINUS
6712: ARRAY
6713: PPUSH
6714: LD_INT 2
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 4
6722: PUSH
6723: LD_INT 5
6725: PUSH
6726: LD_INT 6
6728: PUSH
6729: LD_INT 7
6731: PUSH
6732: LD_INT 8
6734: PUSH
6735: LD_INT 9
6737: PUSH
6738: LD_INT 10
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: PUSH
6752: LD_VAR 0 1
6756: PUSH
6757: LD_INT 10
6759: DIVREAL
6760: PUSH
6761: LD_INT 1
6763: MINUS
6764: ARRAY
6765: PPUSH
6766: CALL 8003 0 2
6770: ADD
6771: ST_TO_ADDR
6772: GO 6775
6774: POP
// for i in result do
6775: LD_ADDR_VAR 0 3
6779: PUSH
6780: LD_VAR 0 2
6784: PUSH
6785: FOR_IN
6786: IFFALSE 6959
// begin a := rand ( 1 , 2 ) ;
6788: LD_ADDR_VAR 0 8
6792: PUSH
6793: LD_INT 1
6795: PPUSH
6796: LD_INT 2
6798: PPUSH
6799: CALL_OW 12
6803: ST_TO_ADDR
// if a = 1 then
6804: LD_VAR 0 8
6808: PUSH
6809: LD_INT 1
6811: EQUAL
6812: IFFALSE 6828
// SetDir ( i , 3 ) else
6814: LD_VAR 0 3
6818: PPUSH
6819: LD_INT 3
6821: PPUSH
6822: CALL_OW 233
6826: GO 6840
// SetDir ( i , 5 ) ;
6828: LD_VAR 0 3
6832: PPUSH
6833: LD_INT 5
6835: PPUSH
6836: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6840: LD_VAR 0 3
6844: PPUSH
6845: LD_VAR 0 7
6849: PUSH
6850: LD_VAR 0 8
6854: ARRAY
6855: PPUSH
6856: LD_INT 0
6858: PPUSH
6859: CALL_OW 49
// if GetControl ( i ) = control_manual then
6863: LD_VAR 0 3
6867: PPUSH
6868: CALL_OW 263
6872: PUSH
6873: LD_INT 1
6875: EQUAL
6876: IFFALSE 6922
// begin uc_nation := GetNation ( i ) ;
6878: LD_ADDR_OWVAR 21
6882: PUSH
6883: LD_VAR 0 3
6887: PPUSH
6888: CALL_OW 248
6892: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6893: LD_INT 0
6895: PPUSH
6896: LD_INT 3
6898: PPUSH
6899: LD_VAR 0 5
6903: PPUSH
6904: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6908: CALL_OW 44
6912: PPUSH
6913: LD_VAR 0 3
6917: PPUSH
6918: CALL_OW 52
// end ; l := l + 1 ;
6922: LD_ADDR_VAR 0 9
6926: PUSH
6927: LD_VAR 0 9
6931: PUSH
6932: LD_INT 1
6934: PLUS
6935: ST_TO_ADDR
// if l mod 10 = 0 then
6936: LD_VAR 0 9
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: PUSH
6945: LD_INT 0
6947: EQUAL
6948: IFFALSE 6957
// Wait ( 0 0$02 ) ;
6950: LD_INT 70
6952: PPUSH
6953: CALL_OW 67
// end ;
6957: GO 6785
6959: POP
6960: POP
// end ;
6961: LD_VAR 0 2
6965: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6966: LD_INT 0
6968: PPUSH
6969: PPUSH
6970: PPUSH
// uc_nation := nation_nature ;
6971: LD_ADDR_OWVAR 21
6975: PUSH
6976: LD_INT 0
6978: ST_TO_ADDR
// for i = 1 to n do
6979: LD_ADDR_VAR 0 4
6983: PUSH
6984: DOUBLE
6985: LD_INT 1
6987: DEC
6988: ST_TO_ADDR
6989: LD_VAR 0 1
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7030
// begin PrepareHuman ( false , class_apeman , skill ) ;
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 12
7002: PPUSH
7003: LD_VAR 0 2
7007: PPUSH
7008: CALL_OW 380
// result := result ^ CreateHuman ;
7012: LD_ADDR_VAR 0 3
7016: PUSH
7017: LD_VAR 0 3
7021: PUSH
7022: CALL_OW 44
7026: ADD
7027: ST_TO_ADDR
// end ;
7028: GO 6994
7030: POP
7031: POP
// end ;
7032: LD_VAR 0 3
7036: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
7037: LD_INT 0
7039: PPUSH
7040: PPUSH
7041: PPUSH
// uc_nation := nation_nature ;
7042: LD_ADDR_OWVAR 21
7046: PUSH
7047: LD_INT 0
7049: ST_TO_ADDR
// for i = 1 to n do
7050: LD_ADDR_VAR 0 4
7054: PUSH
7055: DOUBLE
7056: LD_INT 1
7058: DEC
7059: ST_TO_ADDR
7060: LD_VAR 0 1
7064: PUSH
7065: FOR_TO
7066: IFFALSE 7101
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
7068: LD_INT 0
7070: PPUSH
7071: LD_INT 15
7073: PPUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: CALL_OW 380
// result := result ^ CreateHuman ;
7083: LD_ADDR_VAR 0 3
7087: PUSH
7088: LD_VAR 0 3
7092: PUSH
7093: CALL_OW 44
7097: ADD
7098: ST_TO_ADDR
// end ;
7099: GO 7065
7101: POP
7102: POP
// end ;
7103: LD_VAR 0 3
7107: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
7108: LD_INT 0
7110: PPUSH
7111: PPUSH
7112: PPUSH
// for i = 1 to n do
7113: LD_ADDR_VAR 0 4
7117: PUSH
7118: DOUBLE
7119: LD_INT 1
7121: DEC
7122: ST_TO_ADDR
7123: LD_VAR 0 1
7127: PUSH
7128: FOR_TO
7129: IFFALSE 7180
// begin uc_nation := rand ( 1 , 3 ) ;
7131: LD_ADDR_OWVAR 21
7135: PUSH
7136: LD_INT 1
7138: PPUSH
7139: LD_INT 3
7141: PPUSH
7142: CALL_OW 12
7146: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
7147: LD_INT 0
7149: PPUSH
7150: LD_INT 1
7152: PPUSH
7153: LD_VAR 0 2
7157: PPUSH
7158: CALL_OW 380
// result := result ^ CreateHuman ;
7162: LD_ADDR_VAR 0 3
7166: PUSH
7167: LD_VAR 0 3
7171: PUSH
7172: CALL_OW 44
7176: ADD
7177: ST_TO_ADDR
// end ;
7178: GO 7128
7180: POP
7181: POP
// end ;
7182: LD_VAR 0 3
7186: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7187: LD_INT 0
7189: PPUSH
7190: PPUSH
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
// for i = 1 to n do
7196: LD_ADDR_VAR 0 4
7200: PUSH
7201: DOUBLE
7202: LD_INT 1
7204: DEC
7205: ST_TO_ADDR
7206: LD_VAR 0 1
7210: PUSH
7211: FOR_TO
7212: IFFALSE 7576
// begin uc_nation := rand ( 1 , 3 ) ;
7214: LD_ADDR_OWVAR 21
7218: PUSH
7219: LD_INT 1
7221: PPUSH
7222: LD_INT 3
7224: PPUSH
7225: CALL_OW 12
7229: ST_TO_ADDR
// case uc_nation of 1 :
7230: LD_OWVAR 21
7234: PUSH
7235: LD_INT 1
7237: DOUBLE
7238: EQUAL
7239: IFTRUE 7243
7241: GO 7306
7243: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
7244: LD_ADDR_VAR 0 6
7248: PUSH
7249: LD_INT 1
7251: PUSH
7252: LD_INT 2
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
7259: LD_ADDR_VAR 0 7
7263: PUSH
7264: LD_INT 2
7266: PUSH
7267: LD_INT 3
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7274: LD_ADDR_VAR 0 8
7278: PUSH
7279: LD_INT 1
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7289: LD_ADDR_VAR 0 9
7293: PUSH
7294: LD_INT 1
7296: PUSH
7297: LD_INT 2
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: ST_TO_ADDR
// end ; 2 :
7304: GO 7441
7306: LD_INT 2
7308: DOUBLE
7309: EQUAL
7310: IFTRUE 7314
7312: GO 7377
7314: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7315: LD_ADDR_VAR 0 6
7319: PUSH
7320: LD_INT 12
7322: PUSH
7323: LD_INT 11
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7330: LD_ADDR_VAR 0 7
7334: PUSH
7335: LD_INT 23
7337: PUSH
7338: LD_INT 24
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7345: LD_ADDR_VAR 0 8
7349: PUSH
7350: LD_INT 1
7352: PUSH
7353: LD_INT 5
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7360: LD_ADDR_VAR 0 9
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: LD_INT 2
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: ST_TO_ADDR
// end ; 3 :
7375: GO 7441
7377: LD_INT 3
7379: DOUBLE
7380: EQUAL
7381: IFTRUE 7385
7383: GO 7440
7385: POP
// begin chassis := [ ru_medium_wheeled ] ;
7386: LD_ADDR_VAR 0 6
7390: PUSH
7391: LD_INT 21
7393: PUSH
7394: EMPTY
7395: LIST
7396: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7397: LD_ADDR_VAR 0 7
7401: PUSH
7402: LD_INT 42
7404: PUSH
7405: LD_INT 44
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7412: LD_ADDR_VAR 0 8
7416: PUSH
7417: LD_INT 1
7419: PUSH
7420: LD_INT 3
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7427: LD_ADDR_VAR 0 9
7431: PUSH
7432: LD_INT 1
7434: PUSH
7435: EMPTY
7436: LIST
7437: ST_TO_ADDR
// end ; end ;
7438: GO 7441
7440: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7441: LD_ADDR_OWVAR 37
7445: PUSH
7446: LD_VAR 0 6
7450: PUSH
7451: LD_INT 1
7453: PPUSH
7454: LD_VAR 0 6
7458: PPUSH
7459: CALL_OW 12
7463: ARRAY
7464: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7465: LD_ADDR_OWVAR 39
7469: PUSH
7470: LD_VAR 0 9
7474: PUSH
7475: LD_INT 1
7477: PPUSH
7478: LD_VAR 0 9
7482: PPUSH
7483: CALL_OW 12
7487: ARRAY
7488: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7489: LD_ADDR_OWVAR 38
7493: PUSH
7494: LD_VAR 0 8
7498: PUSH
7499: LD_INT 1
7501: PPUSH
7502: LD_VAR 0 8
7506: PPUSH
7507: CALL_OW 12
7511: ARRAY
7512: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7513: LD_ADDR_OWVAR 40
7517: PUSH
7518: LD_VAR 0 7
7522: PUSH
7523: LD_INT 1
7525: PPUSH
7526: LD_VAR 0 7
7530: PPUSH
7531: CALL_OW 12
7535: ARRAY
7536: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7537: LD_ADDR_OWVAR 41
7541: PUSH
7542: LD_INT 100
7544: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7545: LD_ADDR_VAR 0 3
7549: PUSH
7550: LD_VAR 0 3
7554: PPUSH
7555: LD_VAR 0 3
7559: PUSH
7560: LD_INT 1
7562: PLUS
7563: PPUSH
7564: CALL_OW 45
7568: PPUSH
7569: CALL_OW 2
7573: ST_TO_ADDR
// end ;
7574: GO 7211
7576: POP
7577: POP
// end ;
7578: LD_VAR 0 3
7582: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
// for i = 1 to n do
7592: LD_ADDR_VAR 0 4
7596: PUSH
7597: DOUBLE
7598: LD_INT 1
7600: DEC
7601: ST_TO_ADDR
7602: LD_VAR 0 1
7606: PUSH
7607: FOR_TO
7608: IFFALSE 7996
// begin uc_nation := rand ( 1 , 3 ) ;
7610: LD_ADDR_OWVAR 21
7614: PUSH
7615: LD_INT 1
7617: PPUSH
7618: LD_INT 3
7620: PPUSH
7621: CALL_OW 12
7625: ST_TO_ADDR
// case uc_nation of 1 :
7626: LD_OWVAR 21
7630: PUSH
7631: LD_INT 1
7633: DOUBLE
7634: EQUAL
7635: IFTRUE 7639
7637: GO 7710
7639: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7640: LD_ADDR_VAR 0 6
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7655: LD_ADDR_VAR 0 7
7659: PUSH
7660: LD_INT 4
7662: PUSH
7663: LD_INT 5
7665: PUSH
7666: LD_INT 9
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7674: LD_ADDR_VAR 0 8
7678: PUSH
7679: LD_INT 1
7681: PUSH
7682: LD_INT 3
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7689: LD_ADDR_VAR 0 9
7693: PUSH
7694: LD_INT 1
7696: PUSH
7697: LD_INT 2
7699: PUSH
7700: LD_INT 3
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: LIST
7707: ST_TO_ADDR
// end ; 2 :
7708: GO 7861
7710: LD_INT 2
7712: DOUBLE
7713: EQUAL
7714: IFTRUE 7718
7716: GO 7789
7718: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7719: LD_ADDR_VAR 0 6
7723: PUSH
7724: LD_INT 13
7726: PUSH
7727: LD_INT 14
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7734: LD_ADDR_VAR 0 7
7738: PUSH
7739: LD_INT 27
7741: PUSH
7742: LD_INT 26
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7753: LD_ADDR_VAR 0 8
7757: PUSH
7758: LD_INT 1
7760: PUSH
7761: LD_INT 5
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7768: LD_ADDR_VAR 0 9
7772: PUSH
7773: LD_INT 1
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: LD_INT 3
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: ST_TO_ADDR
// end ; 3 :
7787: GO 7861
7789: LD_INT 3
7791: DOUBLE
7792: EQUAL
7793: IFTRUE 7797
7795: GO 7860
7797: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7798: LD_ADDR_VAR 0 6
7802: PUSH
7803: LD_INT 22
7805: PUSH
7806: LD_INT 21
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7813: LD_ADDR_VAR 0 7
7817: PUSH
7818: LD_INT 44
7820: PUSH
7821: LD_INT 43
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7828: LD_ADDR_VAR 0 8
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 3
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7843: LD_ADDR_VAR 0 9
7847: PUSH
7848: LD_INT 1
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: ST_TO_ADDR
// end ; end ;
7858: GO 7861
7860: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7861: LD_ADDR_OWVAR 37
7865: PUSH
7866: LD_VAR 0 6
7870: PUSH
7871: LD_INT 1
7873: PPUSH
7874: LD_VAR 0 6
7878: PPUSH
7879: CALL_OW 12
7883: ARRAY
7884: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7885: LD_ADDR_OWVAR 39
7889: PUSH
7890: LD_VAR 0 9
7894: PUSH
7895: LD_INT 1
7897: PPUSH
7898: LD_VAR 0 9
7902: PPUSH
7903: CALL_OW 12
7907: ARRAY
7908: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7909: LD_ADDR_OWVAR 38
7913: PUSH
7914: LD_VAR 0 8
7918: PUSH
7919: LD_INT 1
7921: PPUSH
7922: LD_VAR 0 8
7926: PPUSH
7927: CALL_OW 12
7931: ARRAY
7932: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7933: LD_ADDR_OWVAR 40
7937: PUSH
7938: LD_VAR 0 7
7942: PUSH
7943: LD_INT 1
7945: PPUSH
7946: LD_VAR 0 7
7950: PPUSH
7951: CALL_OW 12
7955: ARRAY
7956: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7957: LD_ADDR_OWVAR 41
7961: PUSH
7962: LD_INT 100
7964: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7965: LD_ADDR_VAR 0 3
7969: PUSH
7970: LD_VAR 0 3
7974: PPUSH
7975: LD_VAR 0 3
7979: PUSH
7980: LD_INT 1
7982: PLUS
7983: PPUSH
7984: CALL_OW 45
7988: PPUSH
7989: CALL_OW 2
7993: ST_TO_ADDR
// end ;
7994: GO 7607
7996: POP
7997: POP
// end ;
7998: LD_VAR 0 3
8002: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8003: LD_INT 0
8005: PPUSH
8006: PPUSH
8007: PPUSH
8008: PPUSH
8009: PPUSH
8010: PPUSH
8011: PPUSH
// for i = 1 to n do
8012: LD_ADDR_VAR 0 4
8016: PUSH
8017: DOUBLE
8018: LD_INT 1
8020: DEC
8021: ST_TO_ADDR
8022: LD_VAR 0 1
8026: PUSH
8027: FOR_TO
8028: IFFALSE 8416
// begin uc_nation := rand ( 1 , 3 ) ;
8030: LD_ADDR_OWVAR 21
8034: PUSH
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 3
8040: PPUSH
8041: CALL_OW 12
8045: ST_TO_ADDR
// case uc_nation of 1 :
8046: LD_OWVAR 21
8050: PUSH
8051: LD_INT 1
8053: DOUBLE
8054: EQUAL
8055: IFTRUE 8059
8057: GO 8126
8059: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8060: LD_ADDR_VAR 0 6
8064: PUSH
8065: LD_INT 4
8067: PUSH
8068: LD_INT 5
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
8075: LD_ADDR_VAR 0 7
8079: PUSH
8080: LD_INT 6
8082: PUSH
8083: LD_INT 7
8085: PUSH
8086: LD_INT 9
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: LIST
8093: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8094: LD_ADDR_VAR 0 8
8098: PUSH
8099: LD_INT 1
8101: PUSH
8102: LD_INT 3
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8109: LD_ADDR_VAR 0 9
8113: PUSH
8114: LD_INT 1
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: ST_TO_ADDR
// end ; 2 :
8124: GO 8281
8126: LD_INT 2
8128: DOUBLE
8129: EQUAL
8130: IFTRUE 8134
8132: GO 8209
8134: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
8135: LD_ADDR_VAR 0 6
8139: PUSH
8140: LD_INT 13
8142: PUSH
8143: LD_INT 14
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8150: LD_ADDR_VAR 0 7
8154: PUSH
8155: LD_INT 27
8157: PUSH
8158: LD_INT 26
8160: PUSH
8161: LD_INT 28
8163: PUSH
8164: LD_INT 29
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8173: LD_ADDR_VAR 0 8
8177: PUSH
8178: LD_INT 1
8180: PUSH
8181: LD_INT 5
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8188: LD_ADDR_VAR 0 9
8192: PUSH
8193: LD_INT 1
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: ST_TO_ADDR
// end ; 3 :
8207: GO 8281
8209: LD_INT 3
8211: DOUBLE
8212: EQUAL
8213: IFTRUE 8217
8215: GO 8280
8217: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8218: LD_ADDR_VAR 0 6
8222: PUSH
8223: LD_INT 23
8225: PUSH
8226: LD_INT 24
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
8233: LD_ADDR_VAR 0 7
8237: PUSH
8238: LD_INT 46
8240: PUSH
8241: LD_INT 45
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8248: LD_ADDR_VAR 0 8
8252: PUSH
8253: LD_INT 1
8255: PUSH
8256: LD_INT 3
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8263: LD_ADDR_VAR 0 9
8267: PUSH
8268: LD_INT 1
8270: PUSH
8271: LD_INT 3
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: ST_TO_ADDR
// end ; end ;
8278: GO 8281
8280: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8281: LD_ADDR_OWVAR 37
8285: PUSH
8286: LD_VAR 0 6
8290: PUSH
8291: LD_INT 1
8293: PPUSH
8294: LD_VAR 0 6
8298: PPUSH
8299: CALL_OW 12
8303: ARRAY
8304: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8305: LD_ADDR_OWVAR 39
8309: PUSH
8310: LD_VAR 0 9
8314: PUSH
8315: LD_INT 1
8317: PPUSH
8318: LD_VAR 0 9
8322: PPUSH
8323: CALL_OW 12
8327: ARRAY
8328: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8329: LD_ADDR_OWVAR 38
8333: PUSH
8334: LD_VAR 0 8
8338: PUSH
8339: LD_INT 1
8341: PPUSH
8342: LD_VAR 0 8
8346: PPUSH
8347: CALL_OW 12
8351: ARRAY
8352: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8353: LD_ADDR_OWVAR 40
8357: PUSH
8358: LD_VAR 0 7
8362: PUSH
8363: LD_INT 1
8365: PPUSH
8366: LD_VAR 0 7
8370: PPUSH
8371: CALL_OW 12
8375: ARRAY
8376: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8377: LD_ADDR_OWVAR 41
8381: PUSH
8382: LD_INT 100
8384: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8385: LD_ADDR_VAR 0 3
8389: PUSH
8390: LD_VAR 0 3
8394: PPUSH
8395: LD_VAR 0 3
8399: PUSH
8400: LD_INT 1
8402: PLUS
8403: PPUSH
8404: CALL_OW 45
8408: PPUSH
8409: CALL_OW 2
8413: ST_TO_ADDR
// end ;
8414: GO 8027
8416: POP
8417: POP
// end ;
8418: LD_VAR 0 3
8422: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8423: LD_INT 0
8425: PPUSH
8426: PPUSH
// for i = 1 to n do
8427: LD_ADDR_VAR 0 4
8431: PUSH
8432: DOUBLE
8433: LD_INT 1
8435: DEC
8436: ST_TO_ADDR
8437: LD_VAR 0 1
8441: PUSH
8442: FOR_TO
8443: IFFALSE 8517
// begin uc_nation := rand ( 1 , 3 ) ;
8445: LD_ADDR_OWVAR 21
8449: PUSH
8450: LD_INT 1
8452: PPUSH
8453: LD_INT 3
8455: PPUSH
8456: CALL_OW 12
8460: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8461: LD_INT 0
8463: PPUSH
8464: LD_INT 8
8466: PUSH
8467: LD_INT 9
8469: PUSH
8470: LD_INT 1
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 1
8480: PPUSH
8481: LD_INT 3
8483: PPUSH
8484: CALL_OW 12
8488: ARRAY
8489: PPUSH
8490: LD_VAR 0 2
8494: PPUSH
8495: CALL_OW 380
// result := result ^ CreateHuman ;
8499: LD_ADDR_VAR 0 3
8503: PUSH
8504: LD_VAR 0 3
8508: PUSH
8509: CALL_OW 44
8513: ADD
8514: ST_TO_ADDR
// end ;
8515: GO 8442
8517: POP
8518: POP
// end ;
8519: LD_VAR 0 3
8523: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8524: LD_INT 0
8526: PPUSH
8527: PPUSH
8528: PPUSH
8529: PPUSH
8530: PPUSH
8531: PPUSH
8532: PPUSH
// for i = 1 to n do
8533: LD_ADDR_VAR 0 4
8537: PUSH
8538: DOUBLE
8539: LD_INT 1
8541: DEC
8542: ST_TO_ADDR
8543: LD_VAR 0 1
8547: PUSH
8548: FOR_TO
8549: IFFALSE 8945
// begin uc_nation := rand ( 1 , 3 ) ;
8551: LD_ADDR_OWVAR 21
8555: PUSH
8556: LD_INT 1
8558: PPUSH
8559: LD_INT 3
8561: PPUSH
8562: CALL_OW 12
8566: ST_TO_ADDR
// case uc_nation of 1 :
8567: LD_OWVAR 21
8571: PUSH
8572: LD_INT 1
8574: DOUBLE
8575: EQUAL
8576: IFTRUE 8580
8578: GO 8653
8580: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8581: LD_ADDR_VAR 0 6
8585: PUSH
8586: LD_INT 4
8588: PUSH
8589: LD_INT 5
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8596: LD_ADDR_VAR 0 7
8600: PUSH
8601: LD_INT 6
8603: PUSH
8604: LD_INT 7
8606: PUSH
8607: LD_INT 10
8609: PUSH
8610: LD_EXP 14
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8621: LD_ADDR_VAR 0 8
8625: PUSH
8626: LD_INT 1
8628: PUSH
8629: LD_INT 3
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8636: LD_ADDR_VAR 0 9
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: ST_TO_ADDR
// end ; 2 :
8651: GO 8810
8653: LD_INT 2
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8734
8661: POP
// begin chassis := [ ar_half_tracked ] ;
8662: LD_ADDR_VAR 0 6
8666: PUSH
8667: LD_INT 14
8669: PUSH
8670: EMPTY
8671: LIST
8672: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8673: LD_ADDR_VAR 0 7
8677: PUSH
8678: LD_EXP 13
8682: PUSH
8683: LD_INT 26
8685: PUSH
8686: LD_INT 28
8688: PUSH
8689: LD_INT 29
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8698: LD_ADDR_VAR 0 8
8702: PUSH
8703: LD_INT 1
8705: PUSH
8706: LD_INT 5
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8713: LD_ADDR_VAR 0 9
8717: PUSH
8718: LD_INT 1
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: LD_INT 3
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// end ; 3 :
8732: GO 8810
8734: LD_INT 3
8736: DOUBLE
8737: EQUAL
8738: IFTRUE 8742
8740: GO 8809
8742: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8743: LD_ADDR_VAR 0 6
8747: PUSH
8748: LD_INT 23
8750: PUSH
8751: LD_INT 24
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8758: LD_ADDR_VAR 0 7
8762: PUSH
8763: LD_INT 46
8765: PUSH
8766: LD_INT 45
8768: PUSH
8769: LD_INT 49
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8777: LD_ADDR_VAR 0 8
8781: PUSH
8782: LD_INT 1
8784: PUSH
8785: LD_INT 3
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8792: LD_ADDR_VAR 0 9
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: LD_INT 3
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: ST_TO_ADDR
// end ; end ;
8807: GO 8810
8809: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8810: LD_ADDR_OWVAR 37
8814: PUSH
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 1
8822: PPUSH
8823: LD_VAR 0 6
8827: PPUSH
8828: CALL_OW 12
8832: ARRAY
8833: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8834: LD_ADDR_OWVAR 39
8838: PUSH
8839: LD_VAR 0 9
8843: PUSH
8844: LD_INT 1
8846: PPUSH
8847: LD_VAR 0 9
8851: PPUSH
8852: CALL_OW 12
8856: ARRAY
8857: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8858: LD_ADDR_OWVAR 38
8862: PUSH
8863: LD_VAR 0 8
8867: PUSH
8868: LD_INT 1
8870: PPUSH
8871: LD_VAR 0 8
8875: PPUSH
8876: CALL_OW 12
8880: ARRAY
8881: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8882: LD_ADDR_OWVAR 40
8886: PUSH
8887: LD_VAR 0 7
8891: PUSH
8892: LD_INT 1
8894: PPUSH
8895: LD_VAR 0 7
8899: PPUSH
8900: CALL_OW 12
8904: ARRAY
8905: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8906: LD_ADDR_OWVAR 41
8910: PUSH
8911: LD_INT 100
8913: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8914: LD_ADDR_VAR 0 3
8918: PUSH
8919: LD_VAR 0 3
8923: PPUSH
8924: LD_VAR 0 3
8928: PUSH
8929: LD_INT 1
8931: PLUS
8932: PPUSH
8933: CALL_OW 45
8937: PPUSH
8938: CALL_OW 2
8942: ST_TO_ADDR
// end ;
8943: GO 8548
8945: POP
8946: POP
// end ; end_of_file
8947: LD_VAR 0 3
8951: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8952: LD_INT 22
8954: PUSH
8955: LD_INT 7
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PPUSH
8962: CALL_OW 69
8966: IFFALSE 9472
8968: GO 8970
8970: DISABLE
8971: LD_INT 0
8973: PPUSH
8974: PPUSH
8975: PPUSH
// begin enable ;
8976: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8977: LD_ADDR_VAR 0 3
8981: PUSH
8982: LD_INT 22
8984: PUSH
8985: LD_INT 7
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: ST_TO_ADDR
// for i in tmp do
8997: LD_ADDR_VAR 0 1
9001: PUSH
9002: LD_VAR 0 3
9006: PUSH
9007: FOR_IN
9008: IFFALSE 9470
// begin case GetType ( i ) of unit_human :
9010: LD_VAR 0 1
9014: PPUSH
9015: CALL_OW 247
9019: PUSH
9020: LD_INT 1
9022: DOUBLE
9023: EQUAL
9024: IFTRUE 9028
9026: GO 9227
9028: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 256
9038: PUSH
9039: LD_INT 250
9041: LESS
9042: PUSH
9043: LD_INT 5
9045: PPUSH
9046: LD_INT 7
9048: PPUSH
9049: CALL_OW 321
9053: PUSH
9054: LD_INT 2
9056: NONEQUAL
9057: AND
9058: IFFALSE 9062
// continue ;
9060: GO 9007
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
9062: LD_VAR 0 1
9066: PPUSH
9067: CALL_OW 257
9071: PUSH
9072: LD_INT 12
9074: PUSH
9075: LD_INT 15
9077: PUSH
9078: LD_INT 16
9080: PUSH
9081: LD_INT 17
9083: PUSH
9084: LD_INT 1
9086: PUSH
9087: LD_INT 5
9089: PUSH
9090: LD_INT 6
9092: PUSH
9093: LD_INT 7
9095: PUSH
9096: LD_INT 8
9098: PUSH
9099: LD_INT 9
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: IN
9114: IFFALSE 9152
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9116: LD_VAR 0 1
9120: PPUSH
9121: LD_INT 22
9123: PUSH
9124: LD_OWVAR 2
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PPUSH
9133: CALL_OW 69
9137: PPUSH
9138: LD_VAR 0 1
9142: PPUSH
9143: CALL_OW 74
9147: PPUSH
9148: CALL_OW 115
// if GetClass ( i ) = 3 then
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL_OW 257
9161: PUSH
9162: LD_INT 3
9164: EQUAL
9165: IFFALSE 9225
// if IsInUnit ( i ) then
9167: LD_VAR 0 1
9171: PPUSH
9172: CALL_OW 310
9176: IFFALSE 9216
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
9178: LD_VAR 0 1
9182: PPUSH
9183: LD_INT 22
9185: PUSH
9186: LD_OWVAR 2
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PPUSH
9195: CALL_OW 69
9199: PPUSH
9200: LD_VAR 0 1
9204: PPUSH
9205: CALL_OW 74
9209: PPUSH
9210: CALL_OW 115
9214: GO 9225
// ComEspace ( i ) ;
9216: LD_VAR 0 1
9220: PPUSH
9221: CALL 2259 0 1
// end ; unit_vehicle :
9225: GO 9468
9227: LD_INT 2
9229: DOUBLE
9230: EQUAL
9231: IFTRUE 9235
9233: GO 9467
9235: POP
// begin if GetLives ( i ) > 250 then
9236: LD_VAR 0 1
9240: PPUSH
9241: CALL_OW 256
9245: PUSH
9246: LD_INT 250
9248: GREATER
9249: IFFALSE 9465
// begin if GetWeapon ( i ) = us_artillery then
9251: LD_VAR 0 1
9255: PPUSH
9256: CALL_OW 264
9260: PUSH
9261: LD_EXP 14
9265: EQUAL
9266: IFFALSE 9334
// begin if IsInArea ( i , zoneOut ) then
9268: LD_VAR 0 1
9272: PPUSH
9273: LD_INT 4
9275: PPUSH
9276: CALL_OW 308
9280: IFFALSE 9296
// ComMoveToArea ( i , zoneBorder ) else
9282: LD_VAR 0 1
9286: PPUSH
9287: LD_INT 9
9289: PPUSH
9290: CALL_OW 113
9294: GO 9332
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9296: LD_VAR 0 1
9300: PPUSH
9301: LD_INT 22
9303: PUSH
9304: LD_OWVAR 2
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PPUSH
9313: CALL_OW 69
9317: PPUSH
9318: LD_VAR 0 1
9322: PPUSH
9323: CALL_OW 74
9327: PPUSH
9328: CALL_OW 115
// end else
9332: GO 9465
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9334: LD_VAR 0 1
9338: PPUSH
9339: CALL_OW 264
9343: PUSH
9344: LD_INT 11
9346: PUSH
9347: LD_INT 30
9349: PUSH
9350: LD_EXP 17
9354: PUSH
9355: LD_INT 49
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: IN
9364: IFFALSE 9394
// begin if IsInArea ( i , zoneOut ) then
9366: LD_VAR 0 1
9370: PPUSH
9371: LD_INT 4
9373: PPUSH
9374: CALL_OW 308
9378: IFFALSE 9392
// ComSpecMove ( i , specPos ) ;
9380: LD_VAR 0 1
9384: PPUSH
9385: LD_INT 8
9387: PPUSH
9388: CALL 2305 0 2
// end else
9392: GO 9465
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9394: LD_VAR 0 1
9398: PPUSH
9399: CALL_OW 264
9403: PUSH
9404: LD_EXP 13
9408: PUSH
9409: LD_INT 29
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: IN
9416: IFFALSE 9429
// ComSpecAttack ( i ) else
9418: LD_VAR 0 1
9422: PPUSH
9423: CALL 2733 0 1
9427: GO 9465
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9429: LD_VAR 0 1
9433: PPUSH
9434: LD_INT 22
9436: PUSH
9437: LD_OWVAR 2
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PPUSH
9446: CALL_OW 69
9450: PPUSH
9451: LD_VAR 0 1
9455: PPUSH
9456: CALL_OW 74
9460: PPUSH
9461: CALL_OW 115
// end ; end ; end ;
9465: GO 9468
9467: POP
// end ;
9468: GO 9007
9470: POP
9471: POP
// end ; end_of_file
9472: PPOPN 3
9474: END
// export function InitDisplay ; begin
9475: LD_INT 0
9477: PPUSH
// while true do
9478: LD_INT 1
9480: IFFALSE 9567
// begin if waveNumber < 100 then
9482: LD_EXP 5
9486: PUSH
9487: LD_INT 100
9489: LESS
9490: IFFALSE 9541
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9492: LD_ADDR_OWVAR 47
9496: PUSH
9497: LD_STRING #Tick
9499: PUSH
9500: LD_OWVAR 1
9504: PUSH
9505: LD_STRING #Points
9507: PUSH
9508: LD_EXP 2
9512: PUSH
9513: LD_STRING #Attack
9515: PUSH
9516: LD_EXP 4
9520: PUSH
9521: LD_STRING #Wave
9523: PUSH
9524: LD_EXP 5
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: ST_TO_ADDR
9539: GO 9558
// Display_Strings := [ #Win , points ] ;
9541: LD_ADDR_OWVAR 47
9545: PUSH
9546: LD_STRING #Win
9548: PUSH
9549: LD_EXP 2
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9558: LD_INT 35
9560: PPUSH
9561: CALL_OW 67
// end ;
9565: GO 9478
// end ; end_of_file
9567: LD_VAR 0 1
9571: RET
// export function InitBonus ; var i , chance ; begin
9572: LD_INT 0
9574: PPUSH
9575: PPUSH
9576: PPUSH
// chance := rand ( 1 , 99 ) ;
9577: LD_ADDR_VAR 0 3
9581: PUSH
9582: LD_INT 1
9584: PPUSH
9585: LD_INT 99
9587: PPUSH
9588: CALL_OW 12
9592: ST_TO_ADDR
// case chance of 1 .. 10 :
9593: LD_VAR 0 3
9597: PUSH
9598: LD_INT 1
9600: DOUBLE
9601: GREATEREQUAL
9602: IFFALSE 9610
9604: LD_INT 10
9606: DOUBLE
9607: LESSEQUAL
9608: IFTRUE 9612
9610: GO 9623
9612: POP
// i := 5 ; 11 .. 25 :
9613: LD_ADDR_VAR 0 2
9617: PUSH
9618: LD_INT 5
9620: ST_TO_ADDR
9621: GO 9724
9623: LD_INT 11
9625: DOUBLE
9626: GREATEREQUAL
9627: IFFALSE 9635
9629: LD_INT 25
9631: DOUBLE
9632: LESSEQUAL
9633: IFTRUE 9637
9635: GO 9648
9637: POP
// i := 3 ; 26 .. 40 :
9638: LD_ADDR_VAR 0 2
9642: PUSH
9643: LD_INT 3
9645: ST_TO_ADDR
9646: GO 9724
9648: LD_INT 26
9650: DOUBLE
9651: GREATEREQUAL
9652: IFFALSE 9660
9654: LD_INT 40
9656: DOUBLE
9657: LESSEQUAL
9658: IFTRUE 9662
9660: GO 9673
9662: POP
// i := 2 ; 41 .. 60 :
9663: LD_ADDR_VAR 0 2
9667: PUSH
9668: LD_INT 2
9670: ST_TO_ADDR
9671: GO 9724
9673: LD_INT 41
9675: DOUBLE
9676: GREATEREQUAL
9677: IFFALSE 9685
9679: LD_INT 60
9681: DOUBLE
9682: LESSEQUAL
9683: IFTRUE 9687
9685: GO 9698
9687: POP
// i := 4 ; 61 .. 99 :
9688: LD_ADDR_VAR 0 2
9692: PUSH
9693: LD_INT 4
9695: ST_TO_ADDR
9696: GO 9724
9698: LD_INT 61
9700: DOUBLE
9701: GREATEREQUAL
9702: IFFALSE 9710
9704: LD_INT 99
9706: DOUBLE
9707: LESSEQUAL
9708: IFTRUE 9712
9710: GO 9723
9712: POP
// i := 1 ; end ;
9713: LD_ADDR_VAR 0 2
9717: PUSH
9718: LD_INT 1
9720: ST_TO_ADDR
9721: GO 9724
9723: POP
// case i of 1 :
9724: LD_VAR 0 2
9728: PUSH
9729: LD_INT 1
9731: DOUBLE
9732: EQUAL
9733: IFTRUE 9737
9735: GO 9826
9737: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9738: LD_INT 22
9740: PUSH
9741: LD_OWVAR 2
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 2
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 12
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 25
9765: PUSH
9766: LD_INT 16
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 25
9775: PUSH
9776: LD_INT 15
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 25
9785: PUSH
9786: LD_INT 17
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 69
9808: PUSH
9809: LD_INT 10
9811: GREATEREQUAL
9812: IFFALSE 9820
// BonusIV else
9814: CALL 10399 0 0
9818: GO 9824
// BonusI ;
9820: CALL 9904 0 0
// end ; 2 :
9824: GO 9899
9826: LD_INT 2
9828: DOUBLE
9829: EQUAL
9830: IFTRUE 9834
9832: GO 9841
9834: POP
// begin BonusII ;
9835: CALL 10077 0 0
// end ; 3 :
9839: GO 9899
9841: LD_INT 3
9843: DOUBLE
9844: EQUAL
9845: IFTRUE 9849
9847: GO 9856
9849: POP
// begin BonusIII ;
9850: CALL 10225 0 0
// end ; 4 :
9854: GO 9899
9856: LD_INT 4
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9871
9864: POP
// begin BonusIV ;
9865: CALL 10399 0 0
// end ; 5 :
9869: GO 9899
9871: LD_INT 5
9873: DOUBLE
9874: EQUAL
9875: IFTRUE 9879
9877: GO 9898
9879: POP
// begin if graveyard then
9880: LD_EXP 8
9884: IFFALSE 9892
// BonusV else
9886: CALL 10817 0 0
9890: GO 9896
// BonusIII ;
9892: CALL 10225 0 0
// end ; end ;
9896: GO 9899
9898: POP
// end ;
9899: LD_VAR 0 1
9903: RET
// export function BonusI ; var i ; begin
9904: LD_INT 0
9906: PPUSH
9907: PPUSH
// case Query ( AddGift1 ) of 1 :
9908: LD_STRING AddGift1
9910: PPUSH
9911: CALL_OW 97
9915: PUSH
9916: LD_INT 1
9918: DOUBLE
9919: EQUAL
9920: IFTRUE 9924
9922: GO 10003
9924: POP
// begin for i = 1 to 3 do
9925: LD_ADDR_VAR 0 2
9929: PUSH
9930: DOUBLE
9931: LD_INT 1
9933: DEC
9934: ST_TO_ADDR
9935: LD_INT 3
9937: PUSH
9938: FOR_TO
9939: IFFALSE 9999
// begin uc_side := your_side ;
9941: LD_ADDR_OWVAR 20
9945: PUSH
9946: LD_OWVAR 2
9950: ST_TO_ADDR
// uc_nation := 0 ;
9951: LD_ADDR_OWVAR 21
9955: PUSH
9956: LD_INT 0
9958: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9959: LD_INT 0
9961: PPUSH
9962: LD_INT 12
9964: PPUSH
9965: LD_INT 1
9967: PPUSH
9968: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9972: CALL_OW 44
9976: PPUSH
9977: LD_EXP 9
9981: PPUSH
9982: LD_EXP 10
9986: PPUSH
9987: LD_INT 15
9989: PPUSH
9990: LD_INT 1
9992: PPUSH
9993: CALL_OW 50
// end ;
9997: GO 9938
9999: POP
10000: POP
// end ; 2 :
10001: GO 10072
10003: LD_INT 2
10005: DOUBLE
10006: EQUAL
10007: IFTRUE 10011
10009: GO 10053
10011: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10012: LD_EXP 11
10016: PPUSH
10017: CALL_OW 274
10021: PPUSH
10022: LD_INT 1
10024: PPUSH
10025: LD_EXP 11
10029: PPUSH
10030: CALL_OW 274
10034: PPUSH
10035: LD_INT 1
10037: PPUSH
10038: CALL_OW 275
10042: PUSH
10043: LD_INT 100
10045: PLUS
10046: PPUSH
10047: CALL_OW 277
// end ; 3 :
10051: GO 10072
10053: LD_INT 3
10055: DOUBLE
10056: EQUAL
10057: IFTRUE 10061
10059: GO 10071
10061: POP
// begin SetTeamExp ( 2 ) ;
10062: LD_INT 2
10064: PPUSH
10065: CALL 1266 0 1
// end ; end ;
10069: GO 10072
10071: POP
// end ;
10072: LD_VAR 0 1
10076: RET
// export function BonusII ; var i ; begin
10077: LD_INT 0
10079: PPUSH
10080: PPUSH
// case Query ( AddGift2 ) of 1 :
10081: LD_STRING AddGift2
10083: PPUSH
10084: CALL_OW 97
10088: PUSH
10089: LD_INT 1
10091: DOUBLE
10092: EQUAL
10093: IFTRUE 10097
10095: GO 10139
10097: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10098: LD_EXP 11
10102: PPUSH
10103: CALL_OW 274
10107: PPUSH
10108: LD_INT 1
10110: PPUSH
10111: LD_EXP 11
10115: PPUSH
10116: CALL_OW 274
10120: PPUSH
10121: LD_INT 1
10123: PPUSH
10124: CALL_OW 275
10128: PUSH
10129: LD_INT 500
10131: PLUS
10132: PPUSH
10133: CALL_OW 277
// end ; 2 :
10137: GO 10220
10139: LD_INT 2
10141: DOUBLE
10142: EQUAL
10143: IFTRUE 10147
10145: GO 10157
10147: POP
// begin SetTeamExp ( 3 ) ;
10148: LD_INT 3
10150: PPUSH
10151: CALL 1266 0 1
// end ; 3 :
10155: GO 10220
10157: LD_INT 3
10159: DOUBLE
10160: EQUAL
10161: IFTRUE 10165
10163: GO 10219
10165: POP
// begin uc_side = your_side ;
10166: LD_ADDR_OWVAR 20
10170: PUSH
10171: LD_OWVAR 2
10175: ST_TO_ADDR
// uc_nation = nation_russian ;
10176: LD_ADDR_OWVAR 21
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// vc_chassis = 25 ;
10184: LD_ADDR_OWVAR 37
10188: PUSH
10189: LD_INT 25
10191: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10192: CALL_OW 45
10196: PPUSH
10197: LD_EXP 9
10201: PPUSH
10202: LD_EXP 10
10206: PPUSH
10207: LD_INT 15
10209: PPUSH
10210: LD_INT 1
10212: PPUSH
10213: CALL_OW 50
// end ; end ;
10217: GO 10220
10219: POP
// end ;
10220: LD_VAR 0 1
10224: RET
// export function BonusIII ; var i ; begin
10225: LD_INT 0
10227: PPUSH
10228: PPUSH
// case Query ( AddGift3 ) of 1 :
10229: LD_STRING AddGift3
10231: PPUSH
10232: CALL_OW 97
10236: PUSH
10237: LD_INT 1
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10245
10243: GO 10287
10245: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
10246: LD_EXP 11
10250: PPUSH
10251: CALL_OW 274
10255: PPUSH
10256: LD_INT 1
10258: PPUSH
10259: LD_EXP 11
10263: PPUSH
10264: CALL_OW 274
10268: PPUSH
10269: LD_INT 1
10271: PPUSH
10272: CALL_OW 275
10276: PUSH
10277: LD_INT 1000
10279: PLUS
10280: PPUSH
10281: CALL_OW 277
// end ; 2 :
10285: GO 10394
10287: LD_INT 2
10289: DOUBLE
10290: EQUAL
10291: IFTRUE 10295
10293: GO 10307
10295: POP
// begin PrepareGuards ( waveNumber ) ;
10296: LD_EXP 5
10300: PPUSH
10301: CALL 1412 0 1
// end ; 3 :
10305: GO 10394
10307: LD_INT 3
10309: DOUBLE
10310: EQUAL
10311: IFTRUE 10315
10313: GO 10393
10315: POP
// begin uc_side = your_side ;
10316: LD_ADDR_OWVAR 20
10320: PUSH
10321: LD_OWVAR 2
10325: ST_TO_ADDR
// uc_nation = nation_american ;
10326: LD_ADDR_OWVAR 21
10330: PUSH
10331: LD_INT 1
10333: ST_TO_ADDR
// vc_chassis = us_morphling ;
10334: LD_ADDR_OWVAR 37
10338: PUSH
10339: LD_INT 5
10341: ST_TO_ADDR
// vc_engine := engine_siberite ;
10342: LD_ADDR_OWVAR 39
10346: PUSH
10347: LD_INT 3
10349: ST_TO_ADDR
// vc_control := control_computer ;
10350: LD_ADDR_OWVAR 38
10354: PUSH
10355: LD_INT 3
10357: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10358: LD_ADDR_OWVAR 40
10362: PUSH
10363: LD_INT 8
10365: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10366: CALL_OW 45
10370: PPUSH
10371: LD_EXP 9
10375: PPUSH
10376: LD_EXP 10
10380: PPUSH
10381: LD_INT 15
10383: PPUSH
10384: LD_INT 1
10386: PPUSH
10387: CALL_OW 50
// end ; end ;
10391: GO 10394
10393: POP
// end ;
10394: LD_VAR 0 1
10398: RET
// export function BonusIV ; var i ; begin
10399: LD_INT 0
10401: PPUSH
10402: PPUSH
// case Query ( AddGift4 ) of 1 :
10403: LD_STRING AddGift4
10405: PPUSH
10406: CALL_OW 97
10410: PUSH
10411: LD_INT 1
10413: DOUBLE
10414: EQUAL
10415: IFTRUE 10419
10417: GO 10743
10419: POP
// begin i := rand ( 1 , 3 ) ;
10420: LD_ADDR_VAR 0 2
10424: PUSH
10425: LD_INT 1
10427: PPUSH
10428: LD_INT 3
10430: PPUSH
10431: CALL_OW 12
10435: ST_TO_ADDR
// uc_side := your_side ;
10436: LD_ADDR_OWVAR 20
10440: PUSH
10441: LD_OWVAR 2
10445: ST_TO_ADDR
// case i of 1 :
10446: LD_VAR 0 2
10450: PUSH
10451: LD_INT 1
10453: DOUBLE
10454: EQUAL
10455: IFTRUE 10459
10457: GO 10546
10459: POP
// begin uc_nation := nation_arabian ;
10460: LD_ADDR_OWVAR 21
10464: PUSH
10465: LD_INT 2
10467: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10468: LD_ADDR_OWVAR 37
10472: PUSH
10473: LD_INT 14
10475: ST_TO_ADDR
// vc_engine := engine_combustion ;
10476: LD_ADDR_OWVAR 39
10480: PUSH
10481: LD_INT 1
10483: ST_TO_ADDR
// vc_control := control_manual ;
10484: LD_ADDR_OWVAR 38
10488: PUSH
10489: LD_INT 1
10491: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10492: LD_ADDR_OWVAR 40
10496: PUSH
10497: LD_INT 27
10499: PUSH
10500: LD_INT 28
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 1
10509: PPUSH
10510: LD_INT 2
10512: PPUSH
10513: CALL_OW 12
10517: ARRAY
10518: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10519: CALL_OW 45
10523: PPUSH
10524: LD_EXP 9
10528: PPUSH
10529: LD_EXP 10
10533: PPUSH
10534: LD_INT 15
10536: PPUSH
10537: LD_INT 1
10539: PPUSH
10540: CALL_OW 50
// end ; 2 :
10544: GO 10741
10546: LD_INT 2
10548: DOUBLE
10549: EQUAL
10550: IFTRUE 10554
10552: GO 10645
10554: POP
// begin uc_nation := nation_american ;
10555: LD_ADDR_OWVAR 21
10559: PUSH
10560: LD_INT 1
10562: ST_TO_ADDR
// vc_chassis := us_morphling ;
10563: LD_ADDR_OWVAR 37
10567: PUSH
10568: LD_INT 5
10570: ST_TO_ADDR
// vc_engine := engine_siberite ;
10571: LD_ADDR_OWVAR 39
10575: PUSH
10576: LD_INT 3
10578: ST_TO_ADDR
// vc_control := control_computer ;
10579: LD_ADDR_OWVAR 38
10583: PUSH
10584: LD_INT 3
10586: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10587: LD_ADDR_OWVAR 40
10591: PUSH
10592: LD_INT 12
10594: PUSH
10595: LD_INT 10
10597: PUSH
10598: LD_INT 7
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: LIST
10605: PUSH
10606: LD_INT 1
10608: PPUSH
10609: LD_INT 3
10611: PPUSH
10612: CALL_OW 12
10616: ARRAY
10617: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10618: CALL_OW 45
10622: PPUSH
10623: LD_EXP 9
10627: PPUSH
10628: LD_EXP 10
10632: PPUSH
10633: LD_INT 15
10635: PPUSH
10636: LD_INT 1
10638: PPUSH
10639: CALL_OW 50
// end ; 3 :
10643: GO 10741
10645: LD_INT 3
10647: DOUBLE
10648: EQUAL
10649: IFTRUE 10653
10651: GO 10740
10653: POP
// begin uc_nation := nation_russian ;
10654: LD_ADDR_OWVAR 21
10658: PUSH
10659: LD_INT 3
10661: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10662: LD_ADDR_OWVAR 37
10666: PUSH
10667: LD_INT 22
10669: ST_TO_ADDR
// vc_engine := engine_combustion ;
10670: LD_ADDR_OWVAR 39
10674: PUSH
10675: LD_INT 1
10677: ST_TO_ADDR
// vc_control := control_manual ;
10678: LD_ADDR_OWVAR 38
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10686: LD_ADDR_OWVAR 40
10690: PUSH
10691: LD_INT 45
10693: PUSH
10694: LD_INT 44
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_INT 2
10706: PPUSH
10707: CALL_OW 12
10711: ARRAY
10712: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10713: CALL_OW 45
10717: PPUSH
10718: LD_EXP 9
10722: PPUSH
10723: LD_EXP 10
10727: PPUSH
10728: LD_INT 15
10730: PPUSH
10731: LD_INT 1
10733: PPUSH
10734: CALL_OW 50
// end ; end ;
10738: GO 10741
10740: POP
// end ; 2 :
10741: GO 10812
10743: LD_INT 2
10745: DOUBLE
10746: EQUAL
10747: IFTRUE 10751
10749: GO 10793
10751: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10752: LD_EXP 11
10756: PPUSH
10757: CALL_OW 274
10761: PPUSH
10762: LD_INT 1
10764: PPUSH
10765: LD_EXP 11
10769: PPUSH
10770: CALL_OW 274
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 275
10782: PUSH
10783: LD_INT 100
10785: PLUS
10786: PPUSH
10787: CALL_OW 277
// end ; 3 :
10791: GO 10812
10793: LD_INT 3
10795: DOUBLE
10796: EQUAL
10797: IFTRUE 10801
10799: GO 10811
10801: POP
// begin SetTeamExp ( 2 ) ;
10802: LD_INT 2
10804: PPUSH
10805: CALL 1266 0 1
// end ; end ;
10809: GO 10812
10811: POP
// end ;
10812: LD_VAR 0 1
10816: RET
// export function BonusV ; var i , j ; begin
10817: LD_INT 0
10819: PPUSH
10820: PPUSH
10821: PPUSH
// case Query ( AddGift5 ) of 1 :
10822: LD_STRING AddGift5
10824: PPUSH
10825: CALL_OW 97
10829: PUSH
10830: LD_INT 1
10832: DOUBLE
10833: EQUAL
10834: IFTRUE 10838
10836: GO 11182
10838: POP
// begin for j = 1 to 3 do
10839: LD_ADDR_VAR 0 3
10843: PUSH
10844: DOUBLE
10845: LD_INT 1
10847: DEC
10848: ST_TO_ADDR
10849: LD_INT 3
10851: PUSH
10852: FOR_TO
10853: IFFALSE 11178
// begin i := rand ( 1 , 3 ) ;
10855: LD_ADDR_VAR 0 2
10859: PUSH
10860: LD_INT 1
10862: PPUSH
10863: LD_INT 3
10865: PPUSH
10866: CALL_OW 12
10870: ST_TO_ADDR
// uc_side := your_side ;
10871: LD_ADDR_OWVAR 20
10875: PUSH
10876: LD_OWVAR 2
10880: ST_TO_ADDR
// case i of 1 :
10881: LD_VAR 0 2
10885: PUSH
10886: LD_INT 1
10888: DOUBLE
10889: EQUAL
10890: IFTRUE 10894
10892: GO 10981
10894: POP
// begin uc_nation := nation_arabian ;
10895: LD_ADDR_OWVAR 21
10899: PUSH
10900: LD_INT 2
10902: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10903: LD_ADDR_OWVAR 37
10907: PUSH
10908: LD_INT 14
10910: ST_TO_ADDR
// vc_engine := engine_combustion ;
10911: LD_ADDR_OWVAR 39
10915: PUSH
10916: LD_INT 1
10918: ST_TO_ADDR
// vc_control := control_manual ;
10919: LD_ADDR_OWVAR 38
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10927: LD_ADDR_OWVAR 40
10931: PUSH
10932: LD_INT 27
10934: PUSH
10935: LD_INT 28
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 1
10944: PPUSH
10945: LD_INT 2
10947: PPUSH
10948: CALL_OW 12
10952: ARRAY
10953: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10954: CALL_OW 45
10958: PPUSH
10959: LD_EXP 9
10963: PPUSH
10964: LD_EXP 10
10968: PPUSH
10969: LD_INT 15
10971: PPUSH
10972: LD_INT 1
10974: PPUSH
10975: CALL_OW 50
// end ; 2 :
10979: GO 11176
10981: LD_INT 2
10983: DOUBLE
10984: EQUAL
10985: IFTRUE 10989
10987: GO 11080
10989: POP
// begin uc_nation := nation_american ;
10990: LD_ADDR_OWVAR 21
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// vc_chassis := us_morphling ;
10998: LD_ADDR_OWVAR 37
11002: PUSH
11003: LD_INT 5
11005: ST_TO_ADDR
// vc_engine := engine_siberite ;
11006: LD_ADDR_OWVAR 39
11010: PUSH
11011: LD_INT 3
11013: ST_TO_ADDR
// vc_control := control_computer ;
11014: LD_ADDR_OWVAR 38
11018: PUSH
11019: LD_INT 3
11021: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
11022: LD_ADDR_OWVAR 40
11026: PUSH
11027: LD_INT 12
11029: PUSH
11030: LD_INT 11
11032: PUSH
11033: LD_INT 7
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 1
11043: PPUSH
11044: LD_INT 3
11046: PPUSH
11047: CALL_OW 12
11051: ARRAY
11052: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11053: CALL_OW 45
11057: PPUSH
11058: LD_EXP 9
11062: PPUSH
11063: LD_EXP 10
11067: PPUSH
11068: LD_INT 15
11070: PPUSH
11071: LD_INT 1
11073: PPUSH
11074: CALL_OW 50
// end ; 3 :
11078: GO 11176
11080: LD_INT 3
11082: DOUBLE
11083: EQUAL
11084: IFTRUE 11088
11086: GO 11175
11088: POP
// begin uc_nation := nation_russian ;
11089: LD_ADDR_OWVAR 21
11093: PUSH
11094: LD_INT 3
11096: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
11097: LD_ADDR_OWVAR 37
11101: PUSH
11102: LD_INT 22
11104: ST_TO_ADDR
// vc_engine := engine_combustion ;
11105: LD_ADDR_OWVAR 39
11109: PUSH
11110: LD_INT 1
11112: ST_TO_ADDR
// vc_control := control_manual ;
11113: LD_ADDR_OWVAR 38
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
11121: LD_ADDR_OWVAR 40
11125: PUSH
11126: LD_INT 45
11128: PUSH
11129: LD_INT 44
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 1
11138: PPUSH
11139: LD_INT 2
11141: PPUSH
11142: CALL_OW 12
11146: ARRAY
11147: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11148: CALL_OW 45
11152: PPUSH
11153: LD_EXP 9
11157: PPUSH
11158: LD_EXP 10
11162: PPUSH
11163: LD_INT 15
11165: PPUSH
11166: LD_INT 1
11168: PPUSH
11169: CALL_OW 50
// end ; end ;
11173: GO 11176
11175: POP
// end ;
11176: GO 10852
11178: POP
11179: POP
// end ; 2 :
11180: GO 11248
11182: LD_INT 2
11184: DOUBLE
11185: EQUAL
11186: IFTRUE 11190
11188: GO 11232
11190: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
11191: LD_EXP 11
11195: PPUSH
11196: CALL_OW 274
11200: PPUSH
11201: LD_INT 1
11203: PPUSH
11204: LD_EXP 11
11208: PPUSH
11209: CALL_OW 274
11213: PPUSH
11214: LD_INT 1
11216: PPUSH
11217: CALL_OW 275
11221: PUSH
11222: LD_INT 500
11224: PLUS
11225: PPUSH
11226: CALL_OW 277
// end ; 3 :
11230: GO 11248
11232: LD_INT 3
11234: DOUBLE
11235: EQUAL
11236: IFTRUE 11240
11238: GO 11247
11240: POP
// begin GetBack ( ) ;
11241: CALL 2072 0 0
// end ; end ;
11245: GO 11248
11247: POP
// end ;
11248: LD_VAR 0 1
11252: RET
